Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Create a function in the Azure portal that runs on a schedule
Article
2023-12-31
13 contributors
In this article
Learn how to use the Azure portal to create a function that runsserverlesson Azure based on a schedule that you define.
Note
In-portal editing is only supported for JavaScript, PowerShell, and C# Script functions.
Python in-portal editing is supported only when running in the Consumption plan.
To create a C# Script app that supports in-portal editing, you must choose a runtimeVersionthat supports thein-process model.
When possible, you shoulddevelop your functions locally.
To learn more about the limitations on editing function code in the Azure portal, seeDevelopment limitations in the Azure portal.
Prerequisites
To complete this tutorial:
Ensure that you have an Azure subscription. If you don't have an Azure subscription, create afree accountbefore you begin.
Create a function app
From the Azure portal menu or theHomepage, selectCreate a resource.
From the Azure portal menu or theHomepage, selectCreate a resource.
In theNewpage, selectFunction App.
In theNewpage, selectFunction App.
UnderSelect a hosting option, selectConsumption>Selectto create your app in the defaultConsumptionplan. In thisserverlesshosting option, you pay only for the time your functions run.Premium planalso offers dynamic scaling. When you run in an App Service plan, you must manage thescaling of your function app.
UnderSelect a hosting option, selectConsumption>Selectto create your app in the defaultConsumptionplan. In thisserverlesshosting option, you pay only for the time your functions run.Premium planalso offers dynamic scaling. When you run in an App Service plan, you must manage thescaling of your function app.
On theBasicspage, use the function app settings as specified in the following table:SettingSuggested valueDescriptionSubscriptionYour subscriptionThe subscription under which you create your new function app.Resource GroupmyResourceGroupName for the new resource group in which you create your function app. You should create a new resource group because there areknown limitations when creating new function apps in an existing resource group.Function App nameGlobally unique nameName that identifies your new function app. Valid characters area-z(case insensitive),0-9, and-.Runtime stackPreferred languageChoose a runtime that supports your favorite function programming language. In-portal editing is only available for JavaScript, PowerShell, Python, TypeScript, and C# script.To create a C# Script app that supports in-portal editing, you must choose a runtimeVersionthat supports thein-process model.C# class library and Java functions must bedeveloped locally.VersionVersion numberChoose the version of your installed runtime.RegionPreferred regionSelect aregionthat's near you or near other services that your functions can access.Operating systemWindowsAn operating system is preselected for you based on your runtime stack selection, but you can change the setting if necessary. In-portal editing is only supported on Windows.
On theBasicspage, use the function app settings as specified in the following table:
a-z
0-9
-
Accept the default options in the remaining tabs, including the default behavior of creating a new storage account on theStoragetab and a new Application Insight instance on theMonitoringtab. You can also choose to use an existing storage account or Application Insights instance.
Accept the default options in the remaining tabs, including the default behavior of creating a new storage account on theStoragetab and a new Application Insight instance on theMonitoringtab. You can also choose to use an existing storage account or Application Insights instance.
SelectReview + createto review the app configuration you chose, and then selectCreateto provision and deploy the function app.
SelectReview + createto review the app configuration you chose, and then selectCreateto provision and deploy the function app.
Select theNotificationsicon in the upper-right corner of the portal and watch for theDeployment succeededmessage.
Select theNotificationsicon in the upper-right corner of the portal and watch for theDeployment succeededmessage.
SelectGo to resourceto view your new function app. You can also selectPin to dashboard. Pinning makes it easier to return to this function app resource from your dashboard.
SelectGo to resourceto view your new function app. You can also selectPin to dashboard. Pinning makes it easier to return to this function app resource from your dashboard.

Your new function app is ready to use. Next, you'll create a function in the new function app.


Create a timer triggered function
In your function app, selectOverview, and then select+ CreateunderFunctions.
In your function app, selectOverview, and then select+ CreateunderFunctions.

UnderSelect a template, scroll down and choose theTimer triggertemplate.
UnderSelect a template, scroll down and choose theTimer triggertemplate.

InTemplate details, configure the new trigger with the settings as specified in the table below the image, and then selectCreate.SettingSuggested valueDescriptionNameDefaultDefines the name of your timer triggered function.Schedule0 */1 * * * *A six fieldCRON expressionthat schedules your function to run every minute.
InTemplate details, configure the new trigger with the settings as specified in the table below the image, and then selectCreate.

Test the function
In your function, selectCode + Testand expand theLogs.
In your function, selectCode + Testand expand theLogs.

Verify execution by viewing the information written to the logs.
Verify execution by viewing the information written to the logs.

Now, you change the function's schedule so that it runs once every hour instead of every minute.
Update the timer schedule
In your function, selectIntegration. Here, you define the input and output bindings for your function and also set the schedule.
In your function, selectIntegration. Here, you define the input and output bindings for your function and also set the schedule.
SelectTimer (myTimer).
SelectTimer (myTimer).

Update theSchedulevalue to0 0 */1 * * *, and then selectSave.
Update theSchedulevalue to0 0 */1 * * *, and then selectSave.
0 0 */1 * * *

You now have a function that runs once every hour, on the hour.
Clean up resources
Other quickstarts in this collection build upon this quickstart. If you plan to work with subsequent quickstarts, tutorials, or with any of the services you've created in this quickstart, don't clean up the resources.
Resourcesin Azure refer to function apps, functions, storage accounts, and so forth. They're grouped intoresource groups, and you can delete everything in a group by deleting the group.
You've created resources to complete these quickstarts. You might be billed for these resources, depending on youraccount statusandservice pricing. If you don't need the resources anymore, here's how to delete them:
In the Azure portal, go to theResource grouppage.To get to that page from the function app page, select theOverviewtab, and then select the link underResource group.To get to that page from the dashboard, selectResource groups, and then select the resource group that you used for this article.
In the Azure portal, go to theResource grouppage.
To get to that page from the function app page, select theOverviewtab, and then select the link underResource group.

To get to that page from the dashboard, selectResource groups, and then select the resource group that you used for this article.
In theResource grouppage, review the list of included resources, and verify that they're the ones you want to delete.
In theResource grouppage, review the list of included resources, and verify that they're the ones you want to delete.
SelectDelete resource groupand follow the instructions.Deletion might take a couple of minutes. When it's done, a notification appears for a few seconds. You can also select the bell icon at the top of the page to view the notification.
SelectDelete resource groupand follow the instructions.
Deletion might take a couple of minutes. When it's done, a notification appears for a few seconds. You can also select the bell icon at the top of the page to view the notification.
Next steps
You've created a function that runs based on a schedule. For more information about timer triggers, seeSchedule code execution with Azure Functions.
Now that you've created your first function, let's add an output binding to the function that writes a message to a Storage queue.
Add messages to an Azure Storage queue using Functions
Feedback
Was this page helpful?
Additional resources