Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Get started with Azure Cosmos DB for MongoDB using JavaScript
Article
2024-08-22
5 contributors
In this article
APPLIES TO:MongoDB
This article shows you how to connect to Azure Cosmos DB for MongoDB using the native MongoDB npm package. Once connected, you can perform operations on databases, collections, and docs.
Note
Theexample code snippetsare available on GitHub as a JavaScript project.
API for MongoDB reference documentation|MongoDB Package (npm)
Prerequisites
An Azure account with an active subscription.Create an account for free.
Node.js LTS
Azure Command-Line Interface (CLI)orAzure PowerShell
Azure Cosmos DB for MongoDB resource
Create a new JavaScript app
Create a new JavaScript application in an empty folder using your preferred terminal. Use thenpm initcommand to begin the prompts to create thepackage.jsonfile. Accept the defaults for the prompts.npm init
Create a new JavaScript application in an empty folder using your preferred terminal. Use thenpm initcommand to begin the prompts to create thepackage.jsonfile. Accept the defaults for the prompts.
npm init
package.json
npm init
npm init
Add theMongoDBnpm package to the JavaScript project. Use thenpm install packagecommand specifying the name of the npm package. Thedotenvpackage is used to read the environment variables from a.envfile during local development.npm install mongodb dotenv
Add theMongoDBnpm package to the JavaScript project. Use thenpm install packagecommand specifying the name of the npm package. Thedotenvpackage is used to read the environment variables from a.envfile during local development.
npm install package
dotenv
.env
npm install mongodb dotenv
npm install mongodb dotenv
To run the app, use a terminal to navigate to the application directory and run the application.node index.js
To run the app, use a terminal to navigate to the application directory and run the application.
node index.js
node index.js
Connect with MongoDB native driver to Azure Cosmos DB for MongoDB
To connect with the MongoDB native driver to Azure Cosmos DB, create an instance of theMongoClientclass. This class is the starting point to perform all operations against databases.
MongoClient
The most common constructor forMongoClienthas two parameters:
url
COSMOS_CONNECTION_STRING
options
{ssl: true, tls: true, }
Refer to theTroubleshooting guidefor connection issues.
Get resource name
Azure CLI
PowerShell
Portal
Create a shell variable forresourceGroupName.# Variable for resource group name
resourceGroupName="msdocs-cosmos"
Create a shell variable forresourceGroupName.
# Variable for resource group name
resourceGroupName="msdocs-cosmos"
# Variable for resource group name
resourceGroupName="msdocs-cosmos"
Use theaz cosmosdb listcommand to retrieve the name of the first Azure Cosmos DB account in your resource group and store it in theaccountNameshell variable.# Retrieve most recently created account name
accountName=$(
    az cosmosdb list \
        --resource-group $resourceGroupName \
        --query "[0].name" \
        --output tsv
)
Use theaz cosmosdb listcommand to retrieve the name of the first Azure Cosmos DB account in your resource group and store it in theaccountNameshell variable.
az cosmosdb list
# Retrieve most recently created account name
accountName=$(
    az cosmosdb list \
        --resource-group $resourceGroupName \
        --query "[0].name" \
        --output tsv
)
# Retrieve most recently created account name
accountName=$(
    az cosmosdb list \
        --resource-group $resourceGroupName \
        --query "[0].name" \
        --output tsv
)
Create a shell variable forRESOURCE_GROUP_NAME.# Variable for resource group name
$RESOURCE_GROUP_NAME = "msdocs-cosmos"
Create a shell variable forRESOURCE_GROUP_NAME.
# Variable for resource group name
$RESOURCE_GROUP_NAME = "msdocs-cosmos"
# Variable for resource group name
$RESOURCE_GROUP_NAME = "msdocs-cosmos"
Use theGet-AzCosmosDBAccountKeycmdlet to retrieve the name of the first Azure Cosmos DB account in your resource group and store it in the accountName shell variable.# Get the name of the first Azure Cosmos DB account in your resource group
$ACCOUNT_NAME = (Get-AzCosmosDBAccount -ResourceGroupName $RESOURCE_GROUP_NAME)[0].Name
Use theGet-AzCosmosDBAccountKeycmdlet to retrieve the name of the first Azure Cosmos DB account in your resource group and store it in the accountName shell variable.
# Get the name of the first Azure Cosmos DB account in your resource group
$ACCOUNT_NAME = (Get-AzCosmosDBAccount -ResourceGroupName $RESOURCE_GROUP_NAME)[0].Name
# Get the name of the first Azure Cosmos DB account in your resource group
$ACCOUNT_NAME = (Get-AzCosmosDBAccount -ResourceGroupName $RESOURCE_GROUP_NAME)[0].Name
Skip this step and use the information for the portal in the next step.
Retrieve your connection string
Azure CLI
PowerShell
Portal
Find the API for MongoDBconnection stringfrom the list of connection strings for the account with theaz cosmosdb keys listcommand.az cosmosdb keys list --type connection-strings \
    --resource-group $resourceGroupName \
    --name $accountName
Find the API for MongoDBconnection stringfrom the list of connection strings for the account with theaz cosmosdb keys listcommand.
az cosmosdb keys list
az cosmosdb keys list --type connection-strings \
    --resource-group $resourceGroupName \
    --name $accountName
az cosmosdb keys list --type connection-strings \
    --resource-group $resourceGroupName \
    --name $accountName
Record thePRIMARY KEYvalues. You'll use these credentials later.
Record thePRIMARY KEYvalues. You'll use these credentials later.
Find theCONNECTION STRINGfrom the list of keys and connection strings for the account with theGet-AzCosmosDBAccountKeycmdlet.$parameters = @{
    ResourceGroupName = $RESOURCE_GROUP_NAME
    Name = $ACCOUNT_NAME
    Type = "ConnectionStrings"
}    
Get-AzCosmosDBAccountKey @parameters |
    Select-Object -Property "Primary MongoDB Connection String"
Find theCONNECTION STRINGfrom the list of keys and connection strings for the account with theGet-AzCosmosDBAccountKeycmdlet.
Get-AzCosmosDBAccountKey
$parameters = @{
    ResourceGroupName = $RESOURCE_GROUP_NAME
    Name = $ACCOUNT_NAME
    Type = "ConnectionStrings"
}    
Get-AzCosmosDBAccountKey @parameters |
    Select-Object -Property "Primary MongoDB Connection String"
$parameters = @{
    ResourceGroupName = $RESOURCE_GROUP_NAME
    Name = $ACCOUNT_NAME
    Type = "ConnectionStrings"
}    
Get-AzCosmosDBAccountKey @parameters |
    Select-Object -Property "Primary MongoDB Connection String"
Record theCONNECTION STRINGvalue. You'll use these credentials later.
Record theCONNECTION STRINGvalue. You'll use these credentials later.
Tip
For this guide, we recommend using the resource group namemsdocs-cosmos.
msdocs-cosmos
Sign in to theAzure portal.
Sign in to theAzure portal.
Navigate to the existing Azure Cosmos DB for MongoDB account page.
Navigate to the existing Azure Cosmos DB for MongoDB account page.
From the Azure Cosmos DB for MongoDB account page, select theConnection Stringnavigation menu option.
From the Azure Cosmos DB for MongoDB account page, select theConnection Stringnavigation menu option.
Record the value for thePRIMARY CONNECTION STRINGfield. You use this value in a later step.
Record the value for thePRIMARY CONNECTION STRINGfield. You use this value in a later step.

Configure environment variables
To use theCONNECTION STRINGvalues within your code, set this value in the local environment running the application. To set the environment variable, use your preferred terminal to run the following commands:
Windows
Linux / macOS
.env
$env:COSMOS_CONNECTION_STRING = "<cosmos-connection-string>"
$env:COSMOS_CONNECTION_STRING = "<cosmos-connection-string>"
export COSMOS_CONNECTION_STRING="<cosmos-connection-string>"
export COSMOS_CONNECTION_STRING="<cosmos-connection-string>"
A.envfile is a standard way to store environment variables in a project. Create a.envfile in the root of your project. Add the following lines to the.envfile:
.env
.env
.env
COSMOS_CONNECTION_STRING="<cosmos-connection-string>"
COSMOS_CONNECTION_STRING="<cosmos-connection-string>"
Create MongoClient with connection string
Add dependencies to reference the MongoDB and DotEnv npm packages.// Read .env file and set environment variables
require('dotenv').config();

// Use official mongodb driver to connect to the server
const { MongoClient } = require('mongodb');
Add dependencies to reference the MongoDB and DotEnv npm packages.
// Read .env file and set environment variables
require('dotenv').config();

// Use official mongodb driver to connect to the server
const { MongoClient } = require('mongodb');
// Read .env file and set environment variables
require('dotenv').config();

// Use official mongodb driver to connect to the server
const { MongoClient } = require('mongodb');
Define a new instance of theMongoClientclass using the constructor, andprocess.env.to use the connection string.// New instance of MongoClient with connection string
// for Cosmos DB
const url = process.env.COSMOS_CONNECTION_STRING;
const client = new MongoClient(url);

// connect to the server
await client.connect();

// client options
const options = client.options
console.log(`Options:\n${Object.keys(options).map(key => `\t${key}: ${options[key]}\n`)}`);
Define a new instance of theMongoClientclass using the constructor, andprocess.env.to use the connection string.
MongoClient
process.env.
// New instance of MongoClient with connection string
// for Cosmos DB
const url = process.env.COSMOS_CONNECTION_STRING;
const client = new MongoClient(url);

// connect to the server
await client.connect();

// client options
const options = client.options
console.log(`Options:\n${Object.keys(options).map(key => `\t${key}: ${options[key]}\n`)}`);
// New instance of MongoClient with connection string
// for Cosmos DB
const url = process.env.COSMOS_CONNECTION_STRING;
const client = new MongoClient(url);

// connect to the server
await client.connect();

// client options
const options = client.options
console.log(`Options:\n${Object.keys(options).map(key => `\t${key}: ${options[key]}\n`)}`);
For more information on different ways to create aMongoClientinstance, seeMongoDB NodeJS Driver Quick Start.
MongoClient
Close the MongoClient connection
When your application is finished with the connection, remember to close it. The.close()call should be after all database calls are made.
.close()
client.close()
client.close()
Use MongoDB client classes with Azure Cosmos DB for API for MongoDB
Before you start building the application, let's look into the hierarchy of resources in Azure Cosmos DB. Azure Cosmos DB has a specific object model used to create and access resources. The Azure Cosmos DB creates resources in a hierarchy that consists of accounts, databases, collections, and docs.

Hierarchical diagram showing an Azure Cosmos DB for MongoDB account at the top. The account has two child database nodes. One of the database nodes includes two child collection nodes. The other database node includes a single child collection node. That single collection node has three child doc nodes.

Each type of resource is represented by one or more associated JavaScript classes. Here's a list of the most common classes:
MongoClient
Db
Collection
The following guides show you how to use each of these classes to build your application.
Guide:
Manage databases
Manage collections
Manage documents
Use queries to find documents
See also
Package (NuGet)
API reference
Next steps
Now that you've connected to an API for MongoDB account, use the next guide to create and manage databases.
Create a database in Azure Cosmos DB for MongoDB using JavaScript
Feedback
Was this page helpful?
Additional resources