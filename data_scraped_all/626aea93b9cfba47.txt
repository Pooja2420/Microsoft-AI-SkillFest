Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Use IDENTITY to create surrogate keys in dedicated SQL pool
Article
2025-01-31
10 contributors
In this article
In this article, you find recommendations and examples for using theIDENTITYproperty to create surrogate keys on tables in dedicated SQL pool.
IDENTITY
What is a surrogate key?
A surrogate key on a table is a column with a unique identifier for each row. The key isn't generated from the table data. Data modelers like to create surrogate keys on their tables when they design data warehouse models. You can use theIDENTITYproperty to achieve this goal simply and effectively without affecting load performance.
IDENTITY
Note
In Azure Synapse Analytics:
The IDENTITY value increases on its own in each distribution and doesn't overlap with IDENTITY values in other distributions. The IDENTITY value in Synapse isn't guaranteed to be unique if the user explicitly inserts a duplicate value withSET IDENTITY_INSERT ONor reseeds IDENTITY. For details, seeCREATE TABLE (Transact-SQL) IDENTITY (Property).
SET IDENTITY_INSERT ON
UPDATE on distribution column doesn't guarantee the IDENTITY value is unique. UseDBCC CHECKIDENT (Transact-SQL)after UPDATE on distribution column to verify uniqueness.
Create a table with an IDENTITY column
TheIDENTITYproperty is designed to scale out across all the distributions in the dedicated SQL pool without affecting load performance. Therefore, the implementation ofIDENTITYis oriented toward achieving these goals.
IDENTITY
IDENTITY
You can define a table as having theIDENTITYproperty when you first create the table by using syntax that's similar to the following statement:
IDENTITY
CREATE TABLE dbo.T1
(    C1 INT IDENTITY(1,1) NOT NULL,
     C2 INT NULL
)
WITH
(   DISTRIBUTION = HASH(C2),
    CLUSTERED COLUMNSTORE INDEX
);
CREATE TABLE dbo.T1
(    C1 INT IDENTITY(1,1) NOT NULL,
     C2 INT NULL
)
WITH
(   DISTRIBUTION = HASH(C2),
    CLUSTERED COLUMNSTORE INDEX
);
You can then useINSERT..SELECTto populate the table.
INSERT..SELECT
The remainder of this section highlights the nuances of the implementation to help you understand them more fully.
Allocation of values
TheIDENTITYproperty doesn't guarantee the order in which the surrogate values are allocated due to the distributed architecture of the data warehouse. TheIDENTITYproperty is designed to scale out across all the distributions in the dedicated SQL pool without affecting load performance.
IDENTITY
IDENTITY
The following example is an illustration:
CREATE TABLE dbo.T1
(    C1 INT IDENTITY(1,1) NOT NULL,
     C2 VARCHAR(30) NULL
)
WITH
(   DISTRIBUTION = HASH(C2),
    CLUSTERED COLUMNSTORE INDEX
);

INSERT INTO dbo.T1
VALUES (NULL);

INSERT INTO dbo.T1
VALUES (NULL);

SELECT *
FROM dbo.T1;

DBCC PDW_SHOWSPACEUSED('dbo.T1');
CREATE TABLE dbo.T1
(    C1 INT IDENTITY(1,1) NOT NULL,
     C2 VARCHAR(30) NULL
)
WITH
(   DISTRIBUTION = HASH(C2),
    CLUSTERED COLUMNSTORE INDEX
);

INSERT INTO dbo.T1
VALUES (NULL);

INSERT INTO dbo.T1
VALUES (NULL);

SELECT *
FROM dbo.T1;

DBCC PDW_SHOWSPACEUSED('dbo.T1');
In the preceding example, two rows landed in distribution 1. The first row has the surrogate value of 1 in columnC1, and the second row has the surrogate value of 61. Both of these values were generated by theIDENTITYproperty. However, the allocation of the values isn't contiguous. This behavior is by design.
C1
IDENTITY
Skewed data
The range of values for the data type are spread evenly across the distributions. If a distributed table suffers from skewed data, then the range of values available to the datatype can be exhausted prematurely. For example, if all the data ends up in a single distribution, then effectively the table has access to only one-sixtieth of the values of the data type. For this reason, theIDENTITYproperty is limited toINTandBIGINTdata types only.
IDENTITY
INT
BIGINT
SELECT..INTO
When an existingIDENTITYcolumn is selected into a new table, the new column inherits theIDENTITYproperty, unless one of the following conditions is true:
IDENTITY
IDENTITY
TheSELECTstatement contains a join.
SELECT
MultipleSELECTstatements are joined by usingUNION.
SELECT
UNION
TheIDENTITYcolumn is listed more than one time in theSELECTlist.
IDENTITY
SELECT
TheIDENTITYcolumn is part of an expression.
IDENTITY
If any one of these conditions is true, the column is createdNOT NULLinstead of inheriting theIDENTITYproperty.
NOT NULL
IDENTITY
CREATE TABLE AS SELECT
CREATE TABLE AS SELECT(CTAS) follows the same SQL Server behavior that's documented forSELECT..INTO. However, you can't specify anIDENTITYproperty in the column definition of theCREATE TABLEpart of the statement. You also can't use theIDENTITYfunction in theSELECTpart of the CTAS. To populate a table, you need to useCREATE TABLEto define the table followed byINSERT..SELECTto populate it.
CREATE TABLE AS SELECT
SELECT..INTO
IDENTITY
CREATE TABLE
IDENTITY
SELECT
CREATE TABLE
INSERT..SELECT
Insert explicit values into an IDENTITY column
Dedicated SQL pool supportsSET IDENTITY_INSERT <your table> ON|OFFsyntax. You can use this syntax to explicitly insert values into theIDENTITYcolumn.
SET IDENTITY_INSERT <your table> ON|OFF
IDENTITY
Many data modelers like to use predefined negative values for certain rows in their dimensions. An example is the -1 orunknown memberrow.
The next script shows how to explicitly add this row by usingSET IDENTITY_INSERT:
SET IDENTITY_INSERT
SET IDENTITY_INSERT dbo.T1 ON;

INSERT INTO dbo.T1
(   C1,
    C2
)
VALUES (-1,'UNKNOWN');

SET IDENTITY_INSERT dbo.T1 OFF;

SELECT     *
FROM    dbo.T1;
SET IDENTITY_INSERT dbo.T1 ON;

INSERT INTO dbo.T1
(   C1,
    C2
)
VALUES (-1,'UNKNOWN');

SET IDENTITY_INSERT dbo.T1 OFF;

SELECT     *
FROM    dbo.T1;
Load data
The presence of theIDENTITYproperty has some implications to your data-loading code. This section highlights some basic patterns for loading data into tables by usingIDENTITY.
IDENTITY
IDENTITY
To load data into a table and generate a surrogate key by usingIDENTITY, create the table and then useINSERT..SELECTorINSERT..VALUESto perform the load.
IDENTITY
INSERT..SELECT
INSERT..VALUES
The following example highlights the basic pattern:
--CREATE TABLE with IDENTITY
CREATE TABLE dbo.T1
(    C1 INT IDENTITY(1,1),
     C2 VARCHAR(30)
)
WITH
(   DISTRIBUTION = HASH(C2),
    CLUSTERED COLUMNSTORE INDEX
);

--Use INSERT..SELECT to populate the table from an external table
INSERT INTO dbo.T1
(C2)
SELECT     C2
FROM    ext.T1;

SELECT *
FROM   dbo.T1;

DBCC PDW_SHOWSPACEUSED('dbo.T1');
--CREATE TABLE with IDENTITY
CREATE TABLE dbo.T1
(    C1 INT IDENTITY(1,1),
     C2 VARCHAR(30)
)
WITH
(   DISTRIBUTION = HASH(C2),
    CLUSTERED COLUMNSTORE INDEX
);

--Use INSERT..SELECT to populate the table from an external table
INSERT INTO dbo.T1
(C2)
SELECT     C2
FROM    ext.T1;

SELECT *
FROM   dbo.T1;

DBCC PDW_SHOWSPACEUSED('dbo.T1');
Note
It's not possible to useCREATE TABLE AS SELECTcurrently when loading data into a table with anIDENTITYcolumn.
CREATE TABLE AS SELECT
IDENTITY
For more information on loading data, seeDesigning Extract, Load, and Transform (ELT) for dedicated SQL poolandLoading best practices.
System views
You can use thesys.identity_columnscatalog view to identify a column that has theIDENTITYproperty.
IDENTITY
To help you better understand the database schema, this example shows how to integratesys.identity_columnswith other system catalog views:
sys.identity_columns
SELECT  sm.name
,       tb.name
,       co.name
,       CASE WHEN ic.column_id IS NOT NULL
             THEN 1
        ELSE 0
        END AS is_identity
FROM        sys.schemas AS sm
JOIN        sys.tables  AS tb           ON  sm.schema_id = tb.schema_id
JOIN        sys.columns AS co           ON  tb.object_id = co.object_id
LEFT JOIN   sys.identity_columns AS ic  ON  co.object_id = ic.object_id
                                        AND co.column_id = ic.column_id
WHERE   sm.name = 'dbo'
AND     tb.name = 'T1'
;
SELECT  sm.name
,       tb.name
,       co.name
,       CASE WHEN ic.column_id IS NOT NULL
             THEN 1
        ELSE 0
        END AS is_identity
FROM        sys.schemas AS sm
JOIN        sys.tables  AS tb           ON  sm.schema_id = tb.schema_id
JOIN        sys.columns AS co           ON  tb.object_id = co.object_id
LEFT JOIN   sys.identity_columns AS ic  ON  co.object_id = ic.object_id
                                        AND co.column_id = ic.column_id
WHERE   sm.name = 'dbo'
AND     tb.name = 'T1'
;
Limitations
TheIDENTITYproperty can't be used:
IDENTITY
When the column data type isn'tINTorBIGINT
INT
BIGINT
When the column is also the distribution key
When the table is an external table
The following related functions aren't supported in dedicated SQL pool:
IDENTITY()
@@IDENTITY
SCOPE_IDENTITY
IDENT_CURRENT
IDENT_INCR
IDENT_SEED
Common tasks
You can use the following sample code to perform common tasks when you work withIDENTITYcolumns.
IDENTITY
Column C1 is theIDENTITYin all the following tasks.
IDENTITY
Find the highest allocated value for a table
Use theMAX()function to determine the highest value allocated for a distributed table:
MAX()
SELECT MAX(C1)
FROM dbo.T1
SELECT MAX(C1)
FROM dbo.T1
Find the seed and increment for the IDENTITY property
You can use the catalog views to discover the identity increment and seed configuration values for a table by using the following query:
SELECT  sm.name
,       tb.name
,       co.name
,       ic.seed_value
,       ic.increment_value
FROM        sys.schemas AS sm
JOIN        sys.tables  AS tb           ON  sm.schema_id = tb.schema_id
JOIN        sys.columns AS co           ON  tb.object_id = co.object_id
JOIN        sys.identity_columns AS ic  ON  co.object_id = ic.object_id
                                        AND co.column_id = ic.column_id
WHERE   sm.name = 'dbo'
AND     tb.name = 'T1'
;
SELECT  sm.name
,       tb.name
,       co.name
,       ic.seed_value
,       ic.increment_value
FROM        sys.schemas AS sm
JOIN        sys.tables  AS tb           ON  sm.schema_id = tb.schema_id
JOIN        sys.columns AS co           ON  tb.object_id = co.object_id
JOIN        sys.identity_columns AS ic  ON  co.object_id = ic.object_id
                                        AND co.column_id = ic.column_id
WHERE   sm.name = 'dbo'
AND     tb.name = 'T1'
;
Related content
Design tables using dedicated SQL pool
CREATE TABLE (Transact-SQL) IDENTITY (Property)
DBCC CHECKIDENT (Transact-SQL)
Feedback
Was this page helpful?
Additional resources