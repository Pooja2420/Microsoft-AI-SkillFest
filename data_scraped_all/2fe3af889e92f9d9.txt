Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Map an existing custom domain to Azure Spring Apps
Article
2024-11-19
2 contributors
In this article
Note
TheBasic,Standard, andEnterpriseplans entered a retirement period on March 17, 2025. For more information, see theAzure Spring Apps retirement announcement.
TheStandard consumption and dedicatedplan entered a retirement period on September 30, 2024, with a complete shutdown by the end of March 2025. For more information, seeMigrate Azure Spring Apps Standard consumption and dedicated plan to Azure Container Apps.
This article applies to:â Java â C#
This article applies to:â Standard â Enterprise
Domain Name Service (DNS) is a technique for storing network node names throughout a network. This article maps a domain, such aswww.contoso.com, using a CNAME record. It secures the custom domain with a certificate and shows how to enforce Transport Layer Security (TLS), also known as Secure Sockets Layer (SSL).
www.contoso.com
Certificates encrypt web traffic. These TLS/SSL certificates can be stored in Azure Key Vault.
Prerequisites
An Azure subscription. If you don't have a subscription, create afree accountbefore you begin.
(Optional)Azure CLIversion 2.45.0 or higher. Use the following command to install the Azure Spring Apps extension:az extension add --name spring
az extension add --name spring
An application deployed to Azure Spring Apps (seeQuickstart: Launch an existing application in Azure Spring Apps using the Azure portal, or use an existing app). If your application is deployed using the Basic plan, be sure to upgrade to the Standard plan.
A domain name with access to the DNS registry for a domain provider, such as GoDaddy.
A private certificate (that is, your self-signed certificate) from a third-party provider. The certificate must match the domain.
A deployed instance of Azure Key Vault. For more information, seeAbout Azure Key Vault.
Key Vault private link considerations
The IP addresses for Azure Spring Apps management aren't yet part of the Azure Trusted Microsoft services. Therefore, to enable Azure Spring Apps to load certificates from a Key Vault protected with private endpoint connections, you must add the following IP addresses to Azure Key Vault firewall:
20.99.204.111
20.99.204.111
20.201.9.97
20.201.9.97
20.74.97.5
20.74.97.5
52.235.25.35
52.235.25.35
20.194.10.0
20.194.10.0
20.59.204.46
20.59.204.46
104.214.186.86
104.214.186.86
52.153.221.222
52.153.221.222
52.160.137.39
52.160.137.39
20.39.142.56
20.39.142.56
20.199.190.222
20.199.190.222
20.79.64.6
20.79.64.6
20.211.128.96
20.211.128.96
52.149.104.144
52.149.104.144
20.197.121.209
20.197.121.209
40.119.175.77
40.119.175.77
20.108.108.22
20.108.108.22
102.133.143.38
102.133.143.38
52.226.244.150
52.226.244.150
20.84.171.169
20.84.171.169
20.93.48.108
20.93.48.108
20.75.4.46
20.75.4.46
20.78.29.213
20.78.29.213
20.106.86.34
20.106.86.34
20.193.151.132
20.193.151.132
Import certificate
Prepare your certificate file in PFX (optional)
Azure Key Vault supports importing private certificate in PEM and PFX format. If the PEM file you obtained from your certificate provider doesn't work in theSave certificate in Key Vaultsection, follow the steps here to generate a PFX for Azure Key Vault.
If your certificate authority gives you multiple certificates in the certificate chain, you need to merge the certificates in order.
To do this task, open each certificate you received in a text editor.
Create a file for the merged certificate, calledmergedcertificate.crt. In a text editor, copy the content of each certificate into this file. The order of your certificates should follow the order in the certificate chain, beginning with your certificate and ending with the root certificate. It looks like the following example:
-----BEGIN CERTIFICATE-----
<your entire Base64 encoded SSL certificate>
-----END CERTIFICATE-----

-----BEGIN CERTIFICATE-----
<The entire Base64 encoded intermediate certificate 1>
-----END CERTIFICATE-----

-----BEGIN CERTIFICATE-----
<The entire Base64 encoded intermediate certificate 2>
-----END CERTIFICATE-----

-----BEGIN CERTIFICATE-----
<The entire Base64 encoded root certificate>
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
<your entire Base64 encoded SSL certificate>
-----END CERTIFICATE-----

-----BEGIN CERTIFICATE-----
<The entire Base64 encoded intermediate certificate 1>
-----END CERTIFICATE-----

-----BEGIN CERTIFICATE-----
<The entire Base64 encoded intermediate certificate 2>
-----END CERTIFICATE-----

-----BEGIN CERTIFICATE-----
<The entire Base64 encoded root certificate>
-----END CERTIFICATE-----
Export your merged TLS/SSL certificate with the private key that your certificate request was generated with.
If you generated your certificate request using OpenSSL, then you have created a private key file. To export your certificate to PFX, run the following command. Replace the placeholders<private-key-file>and<merged-certificate-file>with the paths to your private key and your merged certificate file.
<private-key-file>
<merged-certificate-file>
openssl pkcs12 -export -out myserver.pfx -inkey <private-key-file> -in <merged-certificate-file>
openssl pkcs12 -export -out myserver.pfx -inkey <private-key-file> -in <merged-certificate-file>
When prompted, define an export password. Use this password when uploading your TLS/SSL certificate to Azure Key Vault later.
If you used IIS orCertreq.exeto generate your certificate request, install the certificate to your local machine, and thenexport the certificate to PFX.
Save certificate in Key Vault
The procedure to import a certificate requires the PEM or PFX encoded file to be on disk and you must have the private key.
Azure portal
Azure CLI
Use the following steps to upload your certificate to key vault:
Go to your key vault instance.
Go to your key vault instance.
In the navigation pane, selectCertificates.
In the navigation pane, selectCertificates.
On the upper menu, selectGenerate/import.
On the upper menu, selectGenerate/import.
On theCreate a certificatepage, selectImportforMethod of Certificate Creation, and then provide a value forCertificate Name.
On theCreate a certificatepage, selectImportforMethod of Certificate Creation, and then provide a value forCertificate Name.
UnderUpload Certificate File, navigate to certificate location and select it.
UnderUpload Certificate File, navigate to certificate location and select it.
UnderPassword, if you're uploading a password protected certificate file, provide that password here. Otherwise, leave it blank. Once the certificate file is successfully imported, key vault removes that password.
UnderPassword, if you're uploading a password protected certificate file, provide that password here. Otherwise, leave it blank. Once the certificate file is successfully imported, key vault removes that password.
SelectCreate.
SelectCreate.

Use the following command to import a certificate:
az keyvault certificate import \
    --file <path-to-pfx-or-pem-file> \
    --name <certificate-name> \
    --vault-name <key-vault-name> \
    --password <password-if-needed>
az keyvault certificate import \
    --file <path-to-pfx-or-pem-file> \
    --name <certificate-name> \
    --vault-name <key-vault-name> \
    --password <password-if-needed>
Grant Azure Spring Apps access to your key vault
You need to grant Azure Spring Apps access to your key vault before you import the certificate.
Azure portal
Azure CLI
Use the following steps to grant access using the Azure portal:
Go to your key vault instance.
Go to your key vault instance.
In the navigation pane, selectAccess policies.
In the navigation pane, selectAccess policies.
On the upper menu, selectCreate.
On the upper menu, selectCreate.
Fill in the info, and selectAddbutton, thenCreateaccess police.Secret permissionCertificate permissionSelect principalGet, ListGet, ListAzure Spring Apps Domain-ManagementNoteIf you don't find the "Azure Spring Apps Domain-Management", search for "Azure Spring Cloud Domain-Management".
Fill in the info, and selectAddbutton, thenCreateaccess police.
Note
If you don't find the "Azure Spring Apps Domain-Management", search for "Azure Spring Cloud Domain-Management".


Use the following command to grant Azure Spring Apps read access to key vault:
az keyvault set-policy \
    --resource-group <key-vault-resource-group-name> \
    --name <key-vault-name> \
    --object-id 938df8e2-2b9d-40b1-940c-c75c33494239 \
    --certificate-permissions get list \
    --secret-permissions get list
az keyvault set-policy \
    --resource-group <key-vault-resource-group-name> \
    --name <key-vault-name> \
    --object-id 938df8e2-2b9d-40b1-940c-c75c33494239 \
    --certificate-permissions get list \
    --secret-permissions get list
Import certificate to Azure Spring Apps
Azure portal
Azure CLI
Use the following steps to import a certificate:
Go to your Azure Spring Apps instance.
Go to your Azure Spring Apps instance.
From the navigation pane, selectTLS/SSL settings.
From the navigation pane, selectTLS/SSL settings.
SelectImport key vault certificate.
SelectImport key vault certificate.

On theSelect certificate from Azurepage, select theSubscription,Key Vault, andCertificatefrom the drop-down options, and then chooseSelect.
On theSelect certificate from Azurepage, select theSubscription,Key Vault, andCertificatefrom the drop-down options, and then chooseSelect.

On the openedSet certificate namepage, enter your certificate name, selectEnable auto syncif needed, and then selectApply. For more information, see theAuto sync certificatesection.
On the openedSet certificate namepage, enter your certificate name, selectEnable auto syncif needed, and then selectApply. For more information, see theAuto sync certificatesection.

When you have successfully imported your certificate, it displays in the list ofPrivate Key Certificates.
When you have successfully imported your certificate, it displays in the list ofPrivate Key Certificates.

Use the following command to add a certificate:
az spring certificate add \
    --resource-group <resource-group-name> \
    --service <Azure-Spring-Apps-instance-name> \
    --name <cert-name> \
    --vault-uri <key-vault-uri> \
    --vault-certificate-name <key-vault-cert-name> \
    --enable-auto-sync false
az spring certificate add \
    --resource-group <resource-group-name> \
    --service <Azure-Spring-Apps-instance-name> \
    --name <cert-name> \
    --vault-uri <key-vault-uri> \
    --vault-certificate-name <key-vault-cert-name> \
    --enable-auto-sync false
To enable certificate auto sync, include the--enable-auto-sync truesetting when you add the certificate, as shown in the following example. For more information, see theAuto sync certificatesection.
--enable-auto-sync true
az spring certificate add \
    --resource-group <resource-group-name> \
    --service <Azure-Spring-Apps-instance-name> \
    --name <cert-name> \
    --vault-uri <key-vault-uri> \
    --vault-certificate-name <key-vault-cert-name> \
    --enable-auto-sync true
az spring certificate add \
    --resource-group <resource-group-name> \
    --service <Azure-Spring-Apps-instance-name> \
    --name <cert-name> \
    --vault-uri <key-vault-uri> \
    --vault-certificate-name <key-vault-cert-name> \
    --enable-auto-sync true
Use the following command to show a list of imported certificates:
az spring certificate list \
    --resource-group <resource-group-name> \
    --service <Azure-Spring-Apps-instance-name>
az spring certificate list \
    --resource-group <resource-group-name> \
    --service <Azure-Spring-Apps-instance-name>
Important
To secure a custom domain with this certificate, be sure to bind the certificate to the specific domain. For more information, see theAdd SSL bindingsection.
Auto sync certificate
A certificate stored in Azure Key Vault sometimes gets renewed before it expires. Similarly, your organization's security policies for certificate management might require your DevOps team to replace certificates with new ones regularly. After you enable auto sync for a certificate, Azure Spring Apps starts to sync your key vault for a new version regularly - usually every 24 hours. If a new version is available, Azure Spring Apps imports it, and then reloads it for various components using the certificate without causing any downtime. The following list shows the affected components and relevant scenarios:
AppCustom domain
Custom domain
VMware Spring Cloud GatewayCustom domain
Custom domain
API portal for VMware TanzuCustom domain
Custom domain
VMware Tanzu Application AcceleratorConnecting to a Git repository with a self-signed certificate.
Connecting to a Git repository with a self-signed certificate.
Application Configuration Service for TanzuConnecting to a Git repository with a self-signed certificate.
Connecting to a Git repository with a self-signed certificate.
When Azure Spring Apps imports or reloads a certificate, an activity log is generated. To see the activity logs, navigate to your Azure Spring Apps instance in the Azure portal and selectActivity login the navigation pane.
Note
The certificate auto sync feature works with private certificates and public certificates imported from Azure Key Vault. This feature is unavailable for content certificates, which the customer uploads.
You can enable or disable the certificate auto sync feature when you import a certificate from your key vault to Azure Spring Apps. For more information, see theImport a certificate to Azure Spring Appssection.
You can also enable or disable this feature for a certificate that has already been imported to Azure Spring Apps.
Azure portal
Azure CLI
Use the following steps to enable or disable auto sync for an imported certificate:
Go to the list ofPrivate Key CertificatesorPublic Key Certificates.
Go to the list ofPrivate Key CertificatesorPublic Key Certificates.
Select the ellipsis (...) button after theAuto synccolumn, and then select eitherEnable auto syncorDisable auto sync.
Select the ellipsis (...) button after theAuto synccolumn, and then select eitherEnable auto syncorDisable auto sync.

Use the following command to enable auto sync for an imported certificate:
az spring certificate update \
    --resource-group <resource-group-name> \
    --service <Azure-Spring-Apps-instance-name> \
    --name <cert-name> \
    --enable-auto-sync true
az spring certificate update \
    --resource-group <resource-group-name> \
    --service <Azure-Spring-Apps-instance-name> \
    --name <cert-name> \
    --enable-auto-sync true
Use the following command to disable auto sync for an imported certificate:
az spring certificate update \
    --resource-group <resource-group-name> \
    --service <Azure-Spring-Apps-instance-name> \
    --name <cert-name> \
    --enable-auto-sync false
az spring certificate update \
    --resource-group <resource-group-name> \
    --service <Azure-Spring-Apps-instance-name> \
    --name <cert-name> \
    --enable-auto-sync false
Add Custom Domain
You can use a CNAME record to map a custom DNS name to Azure Spring Apps.
Note
The A record isn't supported.
Create the CNAME record
Go to your DNS provider and add a CNAME record to map your domain to<service-name>.azuremicroservices.io. Here,<service-name>is the name of your Azure Spring Apps instance. We support wildcard domain and sub domain.
<service-name>.azuremicroservices.io
<service-name>
After you add the CNAME, the DNS records page resembles the following example:

Map your custom domain to Azure Spring Apps app
If you don't have an application in Azure Spring Apps, follow the instructions inQuickstart: Deploy your first application to Azure Spring Apps.
Azure portal
Azure CLI
Use the following steps to bind a custom domain with the app:
Go to the application page.
Go to the application page.
SelectCustom Domain.
SelectCustom Domain.
SelectAdd Custom Domain.
SelectAdd Custom Domain.

Type the fully qualified domain name for which you added a CNAME record, such aswww.contoso.com. Make sure that Hostname record type is set to CNAME -<service-name>.azuremicroservices.io.
Type the fully qualified domain name for which you added a CNAME record, such aswww.contoso.com. Make sure that Hostname record type is set to CNAME -<service-name>.azuremicroservices.io.
www.contoso.com
<service-name>.azuremicroservices.io
SelectValidateto enable theAddbutton.
SelectValidateto enable theAddbutton.
SelectAdd.
SelectAdd.

One app can have multiple domains, but one domain can only map to one app. When you successfully mapped your custom domain to the app, it displays on the custom domain table.

Use the following command to bind a custom domain with the app:
az spring app custom-domain bind \
    --resource-group <resource-group-name> \
    --service <Azure-Spring-Apps-instance-name> \
    --domain-name <domain-name> \
    --app <app-name>
az spring app custom-domain bind \
    --resource-group <resource-group-name> \
    --service <Azure-Spring-Apps-instance-name> \
    --domain-name <domain-name> \
    --app <app-name>
Use the following command to show the list of custom domains:
az spring app custom-domain list \
    --resource-group <resource-group-name> \
    --service <Azure-Spring-Apps-instance-name> \
    --app <app-name>
az spring app custom-domain list \
    --resource-group <resource-group-name> \
    --service <Azure-Spring-Apps-instance-name> \
    --app <app-name>
Note
ANot Securelabel for your custom domain means that it's not yet bound to an SSL certificate. Any HTTPS request from a browser to your custom domain receives an error or warning.
Add SSL binding
Azure portal
Azure CLI
Use the following steps to update a custom domain of the app:
In the custom domain table, selectAdd ssl bindingas shown in the previous figure.
In the custom domain table, selectAdd ssl bindingas shown in the previous figure.
Select yourCertificateor import it.
Select yourCertificateor import it.
SelectSave.
SelectSave.

Use the following command to update a custom domain of the app:
az spring app custom-domain update \
    --resource-group <resource-group-name>  \
    --service <service-name> \
    --domain-name <domain-name> \
    --certificate <cert-name> \
    --app <app-name>
az spring app custom-domain update \
    --resource-group <resource-group-name>  \
    --service <service-name> \
    --domain-name <domain-name> \
    --certificate <cert-name> \
    --app <app-name>
After you successfully add SSL binding, the domain state is secure:Healthy.

Enforce HTTPS
By default, anyone can still access your app using HTTP, but you can redirect all HTTP requests to the HTTPS port.
Azure portal
Azure CLI
In your app page, in the navigation, selectCustom Domain. Then, setHTTPS OnlytoYes.

Use the following command to update the configurations of an app.
az spring app update \
    --resource-group <resource-group-name> \
    --service <Azure-Spring-Apps-instance-name> \
    --name <app-name> \
    --https-only
az spring app update \
    --resource-group <resource-group-name> \
    --service <Azure-Spring-Apps-instance-name> \
    --name <app-name> \
    --https-only
When the operation is complete, navigate to any of the HTTPS URLs that point to your app. Note that HTTP URLs don't work.
Next steps
What is Azure Key Vault?
Import a certificate
Use TLS/SSL certificates
Feedback
Was this page helpful?
Additional resources