Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Introduction to Reliable Collections in Azure Service Fabric stateful services
Article
2024-08-22
14 contributors
In this article
Reliable Collections enable you to write highly available, scalable, and low-latency cloud applications as though you were writing single computer applications. The classes in theMicrosoft.ServiceFabric.Data.Collectionsnamespace provide a set of collections that automatically make your state highly available. Developers need to program only to the Reliable Collection APIs and let Reliable Collections manage the replicated and local state.
The key difference between Reliable Collections and other high-availability technologies (such as Redis, Azure Table service, and Azure Queue service) is that the state is kept locally in the service instance while also being made highly available. This means that:
All reads are local, which results in low latency and high-throughput reads.
All writes incur the minimum number of network IOs, which results in low latency and high-throughput writes.

Reliable Collections can be thought of as the natural evolution of theSystem.Collectionsclasses: a new set of collections that are designed for the cloud and multi-computer applications without increasing complexity for the developer. As such, Reliable Collections are:
Replicated: State changes are replicated for high availability.
Asynchronous: APIs are asynchronous to ensure that threads are not blocked when incurring IO.
Transactional: APIs utilize the abstraction of transactions so you can manage multiple Reliable Collections within a service easily.
Persisted or Volatile: Data can be persisted to disk for durability against large-scale outages (for example, a datacenter power outage). Some Reliable Collections also support a volatile mode (withCaveats) where all data is kept in-memory, such as a replicated in-memory cache.
Reliable Collections provide strong consistency guarantees out of the box to make reasoning about application state easier.
Strong consistency is achieved by ensuring transaction commits finish only after the entire transaction has been logged on a majority quorum of replicas, including the primary.
To achieve weaker consistency, applications can acknowledge back to the client/requester before the asynchronous commit returns.
The Reliable Collections APIs are an evolution of concurrent collections APIs
(found in theSystem.Collections.Concurrentnamespace):
Asynchronous: Returns a task since, unlike concurrent collections, the operations are replicated and persisted.
No out parameters: UsesConditionalValue<T>to return abooland a value instead of out parameters.ConditionalValue<T>is likeNullable<T>but does not require T to be a struct.
ConditionalValue<T>
bool
ConditionalValue<T>
Nullable<T>
Transactions: Uses a transaction object to enable the user to group actions on multiple Reliable Collections in a transaction.
Today,Microsoft.ServiceFabric.Data.Collectionscontains three collections:
Reliable Dictionary: Represents a replicated, transactional, and asynchronous collection of key/value pairs. Similar toConcurrentDictionary, both the key and the value can be of any type.
Reliable Queue: Represents a replicated, transactional, and asynchronous strict first-in, first-out (FIFO) queue. Similar toConcurrentQueue, the value can be of any type.
Reliable Concurrent Queue: Represents a replicated, transactional, and asynchronous best effort ordering queue for high throughput. Similar to theConcurrentQueue, the value can be of any type.
Next steps
Reliable Collection Guidelines & Recommendations
Working with Reliable Collections
Transactions and Locks
Managing DataBackup and RestoreNotificationsReliable Collection serializationSerialization and UpgradeReliable State Manager configuration
Backup and Restore
Notifications
Reliable Collection serialization
Serialization and Upgrade
Reliable State Manager configuration
OthersReliable Services quickstartDeveloper reference for Reliable Collections
Reliable Services quickstart
Developer reference for Reliable Collections
Feedback
Was this page helpful?
Additional resources