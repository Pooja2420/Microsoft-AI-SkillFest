Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Web sign in with OpenID Connect in Azure Active Directory B2C
Article
2025-03-21
14 contributors
In this article
OpenID Connect is an authentication protocol, built on top of OAuth 2.0, that can be used to securely sign users in to web applications. By using the Azure Active Directory B2C (Azure AD B2C) implementation of OpenID Connect, you can outsource sign-up, sign in, and other identity management experiences in your web applications to Microsoft Entra ID. This guide shows you how to do so in a language-independent manner. It describes how to send and receive HTTP messages without using any of our open-source libraries.
Note
Most of the open-source authentication libraries acquire and validate the JWTs for your application. We recommend exploring those options, rather than implementing your own code. For more information, seeOverview of the Microsoft Authentication Library (MSAL), andMicrosoft Identity Web authentication library.
OpenID Connectextends the OAuth 2.0authorizationprotocol for use as anauthenticationprotocol. This authentication protocol allows you to perform single sign-on. It introduces the concept of anID token, which allows the client to verify the identity of the user and obtain basic profile information about the user.
OpenID Connect also enables applications to securely acquireaccess tokens. You can use access tokens to access resources that theauthorization serversecures. We recommend OpenID Connect if you're building a web application that you host on a server and accessed through a browser. For more information about tokens, see theOverview of tokens in Azure Active Directory B2C
Azure AD B2C extends the standard OpenID Connect protocol to do more than simple authentication and authorization. It introduces theuser flow parameter, which enables you to use OpenID Connect to add user experiences to your application, such as sign up, sign in, and profile management.
Send authentication requests
When your web application needs to authenticate the user and run a user flow, it can direct the user to the/authorizeendpoint. The user takes action depending on the user flow.
/authorize
In this request, the client indicates the permissions that it needs to acquire from the user in thescopeparameter, and specifies the user flow to run. To get a feel of how the request works, paste the request into your browser and run it. Replace:
scope
{tenant}with the name of your tenant.
{tenant}
00001111-aaaa-2222-bbbb-3333cccc4444with the app ID of anapplication you registered in your tenant.
00001111-aaaa-2222-bbbb-3333cccc4444
{application-id-uri}/{scope-name}with the Application ID URI and scope of an application that you registered in your tenant.
{application-id-uri}/{scope-name}
{policy}with the policy name that you have in your tenant, for exampleb2c_1_sign_in.
{policy}
b2c_1_sign_in
GET /{tenant}.onmicrosoft.com/{policy}/oauth2/v2.0/authorize?
Host: {tenant}.b2clogin.com

client_id=00001111-aaaa-2222-bbbb-3333cccc4444
&response_type=code+id_token
&redirect_uri=https%3A%2F%2Fjwt.ms%2F
&response_mode=fragment
&scope=openid%20offline_access%20{application-id-uri}/{scope-name}
&state=arbitrary_data_you_can_receive_in_the_response
&nonce=12345
GET /{tenant}.onmicrosoft.com/{policy}/oauth2/v2.0/authorize?
Host: {tenant}.b2clogin.com

client_id=00001111-aaaa-2222-bbbb-3333cccc4444
&response_type=code+id_token
&redirect_uri=https%3A%2F%2Fjwt.ms%2F
&response_mode=fragment
&scope=openid%20offline_access%20{application-id-uri}/{scope-name}
&state=arbitrary_data_you_can_receive_in_the_response
&nonce=12345
tenant.b2clogin.com
fabrikam.com
b2c_1_sign_in
b2c_1_sign_up
b2c_1_edit_profile
code+id_token
openid
offline_access
https://{tenant-name}/{app-id-uri}/{scope}
login
redirect_uri
redirect_uri
query
form_post
fragment
form_post
state
At this point, the user is asked to complete the workflow. The user might have to enter their username and password, sign in with a social identity, or sign up for the directory. There could be any other number of steps depending on how the user flow is defined.
After the user completes the user flow, a response is returned to your application at the indicatedredirect_uriparameter, by using the method that you specify in theresponse_modeparameter. The response is the same for each of the preceding cases, independent of the user flow.
redirect_uri
response_mode
A successful response usingresponse_mode=fragmentwould look like:
response_mode=fragment
GET https://jwt.ms/#
id_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6Ik5HVEZ2ZEstZnl0aEV1Q...
&code=AwABAAAAvPM1KaPlrEqdFSBzjqfTGBCmLdgfSTLEMPGYuNHSUYBrq...
&state=arbitrary_data_you_can_receive_in_the_response
GET https://jwt.ms/#
id_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6Ik5HVEZ2ZEstZnl0aEV1Q...
&code=AwABAAAAvPM1KaPlrEqdFSBzjqfTGBCmLdgfSTLEMPGYuNHSUYBrq...
&state=arbitrary_data_you_can_receive_in_the_response
response_type=code+id_token
state
state
Error responses can also be sent to theredirect_uriparameter so that the application can handle them appropriately:
redirect_uri
GET https://jwt.ms/#
error=access_denied
&error_description=AADB2C90091%3a+The+user+has+cancelled+entering+self-asserted+information.%0d%0aCorrelation+ID%3a+xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx%0d%0aTimestamp%3a+xxxx-xx-xx+xx%3a23%3a27Z%0d%0a
&state=arbitrary_data_you_can_receive_in_the_response
GET https://jwt.ms/#
error=access_denied
&error_description=AADB2C90091%3a+The+user+has+cancelled+entering+self-asserted+information.%0d%0aCorrelation+ID%3a+xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx%0d%0aTimestamp%3a+xxxx-xx-xx+xx%3a23%3a27Z%0d%0a
&state=arbitrary_data_you_can_receive_in_the_response
state
state
Validate the ID token
Just receiving an ID token isn't enough to authenticate the user. Validate the ID token's signature and verify the claims in the token per your application's requirements. Azure AD B2C usesJSON Web Tokens (JWTs)and public key cryptography to sign tokens and verify that they're valid.
Note
Most of the open-source authentication libraries validate the JWTs for your application. We recommend exploring those options, rather than implementing your own validation logic. For more information, seeOverview of the Microsoft Authentication Library (MSAL), andMicrosoft Identity Web authentication library.
Azure AD B2C has an OpenID Connect metadata endpoint, which allows an application to get information about Azure AD B2C at runtime. This information includes endpoints, token contents, and token signing keys. There's a JSON metadata document for each user flow in your B2C tenant. For example, the metadata document for theb2c_1_sign_inuser flow infabrikamb2c.onmicrosoft.comis located at:
b2c_1_sign_in
fabrikamb2c.onmicrosoft.com
https://fabrikamb2c.b2clogin.com/fabrikamb2c.onmicrosoft.com/b2c_1_sign_in/v2.0/.well-known/openid-configuration
https://fabrikamb2c.b2clogin.com/fabrikamb2c.onmicrosoft.com/b2c_1_sign_in/v2.0/.well-known/openid-configuration
One of the properties of this configuration document isjwks_uri, whose value for the same user flow would be:
jwks_uri
https://fabrikamb2c.b2clogin.com/fabrikamb2c.onmicrosoft.com/b2c_1_sign_in/discovery/v2.0/keys
https://fabrikamb2c.b2clogin.com/fabrikamb2c.onmicrosoft.com/b2c_1_sign_in/discovery/v2.0/keys
To determine which user flow was used to sign an ID token, you have two options. First, the user flow name is included in theacrclaim in the ID token, seeclaim representing user flow. Your other option is to encode the user flow in the value of thestateparameter when you issue the request, and then decode it to determine which user flow was used. Either method is valid.
acr
state
After you acquire the metadata document from the OpenID Connect metadata endpoint, you can use the RSA 256 public keys to validate the signature of the ID token. There might be multiple keys listed at this endpoint, each identified by akidclaim. The header of the ID token also contains akidclaim, which indicates which of these keys was used to sign the ID token.
kid
kid
To verify the tokens from Azure AD B2C, you need to generate the public key using the exponent(e) and modulus(n). To do so, you need to learn how to generate the public key in a programming language of your choice. The official documentation on Public Key generation with the RSA protocol can be found here:https://tools.ietf.org/html/rfc3447#section-3.1
After you validate the signature of the ID token, there are various claims that you need to verify. For instance:
Validate thenonceclaim to prevent token replay attacks. Its value should be what you specified in the sign-in request.
nonce
Validate theaudclaim to ensure that the ID token was issued for your application. Its value should be the application ID of your application.
aud
Validate theiatandexpclaims to make sure that the ID token hasn't expired.
iat
exp
There are also several more validations that you should perform. The validations are described in detail in theOpenID Connect Core Spec. You might also want to validate more claims, depending on your scenario. Some common validations include:
Ensure that the user/organization signed up for the application.
Ensure that the user has proper authorization/privileges.
Ensure that a certain strength of authentication has occurred, such as Microsoft Entra multifactor authentication.
After the ID token is validated, you can begin a session with the user. You can use the claims in the ID token to obtain information about the user in your application. Uses for this information include display, records, and authorization.
Get a token
If you need your web application to only run user flows, you can skip the next few sections. These sections are applicable only to web applications that need to make authenticated calls to a web API, which is protected by Azure AD B2C itself.
You can redeem the authorization code that you acquired (by usingresponse_type=code+id_token) for a token to the desired resource by sending aPOSTrequest to the/tokenendpoint. In Azure AD B2C, you canrequest access tokens for other APIsas usual by specifying their scope(s) in the request.
response_type=code+id_token
POST
/token
You can also request an access token for your app's own back-end Web API. In this case, you use the app's client ID as the requested scope, which results in an access token with that client ID as the "audience":
POST https://{tenant}.b2clogin.com/{tenant}.onmicrosoft.com/{policy}/oauth2/v2.0/token HTTP/1.1
Host: {tenant}.b2clogin.com
Content-Type: application/x-www-form-urlencoded

grant_type=authorization_code
&client_id=00001111-aaaa-2222-bbbb-3333cccc4444
&scope=00001111-aaaa-2222-bbbb-3333cccc4444 offline_access
&code=AwABAAAAvPM1KaPlrEqdFSBzjqfTGBCmLdgfSTLEMPGYuNHSUYBrq...
&redirect_uri=urn:ietf:wg:oauth:2.0:oob
POST https://{tenant}.b2clogin.com/{tenant}.onmicrosoft.com/{policy}/oauth2/v2.0/token HTTP/1.1
Host: {tenant}.b2clogin.com
Content-Type: application/x-www-form-urlencoded

grant_type=authorization_code
&client_id=00001111-aaaa-2222-bbbb-3333cccc4444
&scope=00001111-aaaa-2222-bbbb-3333cccc4444 offline_access
&code=AwABAAAAvPM1KaPlrEqdFSBzjqfTGBCmLdgfSTLEMPGYuNHSUYBrq...
&redirect_uri=urn:ietf:wg:oauth:2.0:oob
authorization_code
redirect_uri
openid
offline_access
A successful token response looks like:
{
    "not_before": "1442340812",
    "token_type": "Bearer",
    "access_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6Ik5HVEZ2ZEstZnl0aEV1Q...",
    "scope": "00001111-aaaa-2222-bbbb-3333cccc4444 offline_access",
    "expires_in": "3600",
    "expires_on": "1644254945",
    "refresh_token": "AAQfQmvuDy8WtUv-sd0TBwWVQs1rC-Lfxa_NDkLqpg50Cxp5Dxj0VPF1mx2Z...",
}
{
    "not_before": "1442340812",
    "token_type": "Bearer",
    "access_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6Ik5HVEZ2ZEstZnl0aEV1Q...",
    "scope": "00001111-aaaa-2222-bbbb-3333cccc4444 offline_access",
    "expires_in": "3600",
    "expires_on": "1644254945",
    "refresh_token": "AAQfQmvuDy8WtUv-sd0TBwWVQs1rC-Lfxa_NDkLqpg50Cxp5Dxj0VPF1mx2Z...",
}
Bearer
offline_access
Error responses look like:
{
    "error": "invalid_grant",
    "error_description": "AADB2C90080: The provided grant has expired. Please re-authenticate and try again. Current time: xxxxxxxxxx, Grant issued time: xxxxxxxxxx, Grant expiration time: xxxxxxxxxx\r\nCorrelation ID: xxxxxxxx-xxxx-xxxX-xxxx-xxxxxxxxxxxx\r\nTimestamp: xxxx-xx-16 xx:10:52Z\r\n"
}
{
    "error": "invalid_grant",
    "error_description": "AADB2C90080: The provided grant has expired. Please re-authenticate and try again. Current time: xxxxxxxxxx, Grant issued time: xxxxxxxxxx, Grant expiration time: xxxxxxxxxx\r\nCorrelation ID: xxxxxxxx-xxxx-xxxX-xxxx-xxxxxxxxxxxx\r\nTimestamp: xxxx-xx-16 xx:10:52Z\r\n"
}
Use the token
After you successfully acquire an access token, you can use the token in requests to your back-end web APIs by including it in theAuthorizationheader:
Authorization
GET /tasks
Host: mytaskwebapi.com
Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6Ik5HVEZ2ZEstZnl0aEV1Q...
GET /tasks
Host: mytaskwebapi.com
Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6Ik5HVEZ2ZEstZnl0aEV1Q...
Refresh the token
Access tokens and ID tokens are short-lived. After they expire, you must refresh them to continue to access resources. When you refresh the access token, Azure AD B2C returns a new token. The refreshed access token will have updatednbf(not before),iat(issued at), andexp(expiration) claim values. All other claim values are similar to those in the previous access token.
nbf
iat
exp
Refresh a token by submitting anotherPOSTrequest to the/tokenendpoint. This time, provide therefresh_tokenparameter instead of thecodeparameter:
POST
/token
refresh_token
code
POST https://{tenant}.b2clogin.com/{tenant}.onmicrosoft.com/{policy}/oauth2/v2.0/token HTTP/1.1
Host: {tenant}.b2clogin.com
Content-Type: application/x-www-form-urlencoded

grant_type=refresh_token
&client_id=00001111-aaaa-2222-bbbb-3333cccc4444
&scope=openid offline_access
&refresh_token=AwABAAAAvPM1KaPlrEqdFSBzjqfTGBCmLdgfSTLEMPGYuNHSUYBrq...
&redirect_uri=urn:ietf:wg:oauth:2.0:oob
POST https://{tenant}.b2clogin.com/{tenant}.onmicrosoft.com/{policy}/oauth2/v2.0/token HTTP/1.1
Host: {tenant}.b2clogin.com
Content-Type: application/x-www-form-urlencoded

grant_type=refresh_token
&client_id=00001111-aaaa-2222-bbbb-3333cccc4444
&scope=openid offline_access
&refresh_token=AwABAAAAvPM1KaPlrEqdFSBzjqfTGBCmLdgfSTLEMPGYuNHSUYBrq...
&redirect_uri=urn:ietf:wg:oauth:2.0:oob
refresh_token
offline_access
redirect_uri
openid
offline_access
A successful token response looks like:
{
    "not_before": "1442340812",
    "token_type": "Bearer",
    "access_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6Ik5HVEZ2ZEstZnl0aEV1Q...",
    "scope": "00001111-aaaa-2222-bbbb-3333cccc4444 offline_access",
    "expires_in": "3600",
    "refresh_token": "AAQfQmvuDy8WtUv-sd0TBwWVQs1rC-Lfxa_NDkLqpg50Cxp5Dxj0VPF1mx2Z...",
    "refresh_token_expires_in": "1209600"
}
{
    "not_before": "1442340812",
    "token_type": "Bearer",
    "access_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6Ik5HVEZ2ZEstZnl0aEV1Q...",
    "scope": "00001111-aaaa-2222-bbbb-3333cccc4444 offline_access",
    "expires_in": "3600",
    "refresh_token": "AAQfQmvuDy8WtUv-sd0TBwWVQs1rC-Lfxa_NDkLqpg50Cxp5Dxj0VPF1mx2Z...",
    "refresh_token_expires_in": "1209600"
}
Bearer
Error responses look like:
{
    "error": "invalid_grant",
    "error_description": "AADB2C90129: The provided grant has been revoked. Please reauthenticate and try again.\r\nCorrelation ID: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\r\nTimestamp: xxxx-xx-xx xx:xx:xxZ\r\n",
}
{
    "error": "invalid_grant",
    "error_description": "AADB2C90129: The provided grant has been revoked. Please reauthenticate and try again.\r\nCorrelation ID: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\r\nTimestamp: xxxx-xx-xx xx:xx:xxZ\r\n",
}
Send a sign-out request
When you want to sign the user out of the application, it isn't enough to clear the application's cookies or otherwise end the session with the user. Redirect the user to Azure AD B2C to sign out. If you fail to do so, the user might be able to reauthenticate to your application without entering their credentials again. For more information, seeAzure AD B2C session behavior.
To sign out the user, redirect the user to theend_session_endpointthat is listed in the OpenID Connect metadata document described earlier:
end_session_endpoint
GET https://{tenant}.b2clogin.com/{tenant}.onmicrosoft.com/{policy}/oauth2/v2.0/logout?post_logout_redirect_uri=https%3A%2F%2Fjwt.ms%2F
GET https://{tenant}.b2clogin.com/{tenant}.onmicrosoft.com/{policy}/oauth2/v2.0/logout?post_logout_redirect_uri=https%3A%2F%2Fjwt.ms%2F
tenant.b2clogin.com
fabrikam.com
b2c_1_sign_in
b2c_1_sign_in
id_token_hint
post_logout_redirect_uri
Application
No
id_token_hint
state
post_logout_redirect_uri
state
Upon a sign-out request, Azure AD B2C invalidates the Azure AD B2C cookie-based session, and attempts to sign out from federated identity providers. For more information, seeSingle sign-out.
Secure your logout redirect
After logout, the user is redirected to the URI you specify in thepost_logout_redirect_uriparameter, regardless of the reply URLs that you specify for the application. However, if a validid_token_hintis passed, and theRequire ID Token in logout requestsis turned on, Azure AD B2C verifies that the value ofpost_logout_redirect_urimatches one of the application's configured redirect URIs before performing the redirect. If no matching reply URL was configured for the application, an error message is displayed and the user isn't redirected.
post_logout_redirect_uri
id_token_hint
post_logout_redirect_uri
To set the required ID Token in logout requests, seeConfigure session behavior in Azure Active Directory B2C.
Related content
Learn more aboutAzure AD B2C session.
Feedback
Was this page helpful?
Additional resources