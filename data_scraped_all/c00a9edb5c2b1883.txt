Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Monitor scheduled events for your Windows VMs
Article
2024-12-19
7 contributors
In this article
Applies to:VMs âï¸ Windows VMs âï¸ Flexible scale sets âï¸ Uniform scale sets
Updates are applied to different parts of Azure every day, to keep the services running on them secure, and up-to-date. In addition to planned updates, unplanned events may also occur. For example, if any hardware degradation or fault is detected, Azure services may need to perform unplanned maintenance. Using live migration, memory preserving updates and keeping a strict limit on the impact of updates, allow these events to be almost transparent to customers. At most, they can cause a few seconds of virtual machine freeze. For some applications however, even a few seconds of virtual machine freeze could cause an impact. Knowing in advance about upcoming Azure maintenance is important to ensure the best experience for those applications.Scheduled Events serviceprovides you with a programmatic interface to be notified about upcoming maintenance, and enables you to gracefully handle the maintenance.
This article shows how you can use scheduled events to be notified about maintenance events that could affect your VMs and build some basic automation that can help with monitoring and analysis.
Routing scheduled events to Log Analytics
Scheduled Events is available as part of theAzure Instance Metadata Service, which is available on every Azure virtual machine. Customers can write automation to query the endpoint of their virtual machines to find scheduled maintenance notifications and perform mitigations, like saving the state and taking the virtual machine out of rotation. We recommend building automation to record the Scheduled Events so you can have an auditing log of Azure maintenance events.
In this article, we walk you through how to capture maintenance Scheduled Events to Log Analytics. Then, we trigger some basic notification actions, like sending an email to your team and getting a historical view of all events that have affected your virtual machines. For the event aggregation and automation we useLog Analytics, but you can use any monitoring solution to collect these logs and trigger automation.

Prerequisites
For this example, you need to create aWindows Virtual Machine in an Availability Set. Scheduled Events provide notifications about changes that can affect any of the virtual machines in your availability set, Cloud Service, Virtual Machine Scale Set or standalone VMs. Aserviceis run that polls for scheduled events on one of the VMs that act as a collector, to get events for all of the other VMs in the availability set.
Don't delete the group resource group at the end of the tutorial.
You also need tocreate a Log Analytics workspacethat we use to aggregate information from the VMs in the availability set.
Set up the environment
You should now have 2 initial VMs in an availability set. Now we need to create a 3rd VM, calledmyCollectorVM, in the same availability set.
myCollectorVM
New-AzVm `
   -ResourceGroupName "myResourceGroupAvailability" `
   -Name "myCollectorVM" `
   -Location "East US" `
   -VirtualNetworkName "myVnet" `
   -SubnetName "mySubnet" `
   -SecurityGroupName "myNetworkSecurityGroup" `
   -OpenPorts 3389 `
   -PublicIpAddressName "myPublicIpAddress3" `
   -AvailabilitySetName "myAvailabilitySet" `
   -Credential $cred
New-AzVm `
   -ResourceGroupName "myResourceGroupAvailability" `
   -Name "myCollectorVM" `
   -Location "East US" `
   -VirtualNetworkName "myVnet" `
   -SubnetName "mySubnet" `
   -SecurityGroupName "myNetworkSecurityGroup" `
   -OpenPorts 3389 `
   -PublicIpAddressName "myPublicIpAddress3" `
   -AvailabilitySetName "myAvailabilitySet" `
   -Credential $cred
Download the installation .zip file of the project fromGitHub.
Download the installation .zip file of the project fromGitHub.
Connect tomyCollectorVMand copy the .zip file to the virtual machine and extract all of the files. On your VM, open a PowerShell prompt. Move your prompt into the folder containingSchService.ps1, for example:PS C:\Users\azureuser\AzureScheduledEventsService-master\AzureScheduledEventsService-master\Powershell>,  and set up the service..\SchService.ps1 -Setup
Connect tomyCollectorVMand copy the .zip file to the virtual machine and extract all of the files. On your VM, open a PowerShell prompt. Move your prompt into the folder containingSchService.ps1, for example:PS C:\Users\azureuser\AzureScheduledEventsService-master\AzureScheduledEventsService-master\Powershell>,  and set up the service.
SchService.ps1
PS C:\Users\azureuser\AzureScheduledEventsService-master\AzureScheduledEventsService-master\Powershell>
.\SchService.ps1 -Setup
.\SchService.ps1 -Setup
Start the service..\SchService.ps1 -Start
Start the service.
.\SchService.ps1 -Start
.\SchService.ps1 -Start
Validate the service status and make sure it is running..\SchService.ps1 -statusThe validation command should returnRunning.
Validate the service status and make sure it is running.
.\SchService.ps1 -status
.\SchService.ps1 -status
The validation command should returnRunning.
Running
The service will now start polling every 10 seconds for any scheduled events and approve the events to expedite the maintenance.  Freeze, Reboot, Redeploy, and Preempt are the events captured by Schedule events. You can extend the script to trigger some mitigations prior to approving the event.
When any of the above events are captured by Schedule Event service, it will get logged in the Application Event Log Event Status, Event Type, Resources (Virtual machine names) and NotBefore (minimum notice period). You can locate the events with ID 1234 in the Application Event Log.
Once the service is set up and started, it will log events in the Windows Application logs.   To verify this works, restart one of the virtual machines in the availability set and you should see an event being logged in Event viewer in  Windows Logs >  Application log showing the VM restarted.

When events are captured by the Schedule Event service, it will get logged in the application even log with Event Status, Event Type, Resources (VM name) and NotBefore (minimum notice period). You can locate the events with ID 1234 in the Application Event Log.
Note
In this example, the virtual machines were are in an availability set, which enabled us to designate a single virtual machine as the collector to listen and route scheduled events to our log analytics works space. If you have standalone virtual machines, you can run the service on every virtual machine, and then connect them individually to your log analytics workspace.
For our set up, we chose Windows, but you can design a similar solution on Linux.
At any point you can stop/remove the Scheduled Event Service by using the switchesâstopandâremove.
âstop
âremove
Connect to the Log Analytics Workspace
We now want to connect a Log Analytics Workspace to the collector VM. The Log Analytics workspace acts as a repository and we will configure event log collection to capture the application logs from the collector VM.
To route the Scheduled Events to the Events Log, which is saved as Application log by our service, you will need to connect your virtual machine to your Log Analytics workspace.
Set up data collection
Open the Azure portal.
Open the Azure portal.
In the search bar at the top, typeLog Analytics Workspacesand select it from the search results.
In the search bar at the top, typeLog Analytics Workspacesand select it from the search results.
Choose the workspace you created to open its page.
Choose the workspace you created to open its page.
Under Settings, selectAgentsand then clickVirtual Machines.
Under Settings, selectAgentsand then clickVirtual Machines.
Under theWindows serverstab, clickData Collection Rules.
Under theWindows serverstab, clickData Collection Rules.
Enter theCollect and Delivertab and clickAdd data source
Enter theCollect and Delivertab and clickAdd data source
Under theData sourcetab, selectWindows Event Logsfrom the dropdown.
Under theData sourcetab, selectWindows Event Logsfrom the dropdown.
Select the event logs you'd like to collect. Ensure thatERROR,WARNING, andINFORMATIONare selected.
Select the event logs you'd like to collect. Ensure thatERROR,WARNING, andINFORMATIONare selected.
ClickNext : Destination >
ClickNext : Destination >
Under theDestinationtab, clickAdd destination.
Under theDestinationtab, clickAdd destination.
Fill out theDestination Type,Subscription, andDestination Detailssections with your collector VM and its subscription's details.
Fill out theDestination Type,Subscription, andDestination Detailssections with your collector VM and its subscription's details.
Once you've selected the correct VM, theMicrosoft Monitoring agentwill be automatically installed on your virtual machine. It will take a few minutes to connect your VM to the workspace and install the extension.
Once you've selected the correct VM, theMicrosoft Monitoring agentwill be automatically installed on your virtual machine. It will take a few minutes to connect your VM to the workspace and install the extension.
Note
There is some delay, and it may take up to 10 minutes before the log is available.
Creating an alert rule with Azure Monitor
Once the events are pushed to Log Analytics, you can run the followingqueryto look for the schedule Events.
At the top of the page, selectLogsand paste the following into the text box:Event
| where EventLog == "Application" and Source contains "AzureScheduledEvents" and RenderedDescription contains "Scheduled" and RenderedDescription contains "EventStatus" 
| project TimeGenerated, RenderedDescription
| extend ReqJson= parse_json(RenderedDescription)
| extend EventId = ReqJson["EventId"]
,EventStatus = ReqJson["EventStatus"]
,EventType = ReqJson["EventType"]
,NotBefore = ReqJson["NotBefore"]
,ResourceType = ReqJson["ResourceType"]
,Resources = ReqJson["Resources"]
| project-away RenderedDescription,ReqJson
At the top of the page, selectLogsand paste the following into the text box:
Event
| where EventLog == "Application" and Source contains "AzureScheduledEvents" and RenderedDescription contains "Scheduled" and RenderedDescription contains "EventStatus" 
| project TimeGenerated, RenderedDescription
| extend ReqJson= parse_json(RenderedDescription)
| extend EventId = ReqJson["EventId"]
,EventStatus = ReqJson["EventStatus"]
,EventType = ReqJson["EventType"]
,NotBefore = ReqJson["NotBefore"]
,ResourceType = ReqJson["ResourceType"]
,Resources = ReqJson["Resources"]
| project-away RenderedDescription,ReqJson
Event
| where EventLog == "Application" and Source contains "AzureScheduledEvents" and RenderedDescription contains "Scheduled" and RenderedDescription contains "EventStatus" 
| project TimeGenerated, RenderedDescription
| extend ReqJson= parse_json(RenderedDescription)
| extend EventId = ReqJson["EventId"]
,EventStatus = ReqJson["EventStatus"]
,EventType = ReqJson["EventType"]
,NotBefore = ReqJson["NotBefore"]
,ResourceType = ReqJson["ResourceType"]
,Resources = ReqJson["Resources"]
| project-away RenderedDescription,ReqJson
SelectSave, and then typeogQueryfor the name, leaveQueryas the type, typeVMLogsas theCategory, and then selectSave.
SelectSave, and then typeogQueryfor the name, leaveQueryas the type, typeVMLogsas theCategory, and then selectSave.
ogQuery
VMLogs

SelectNew alert rule.
SelectNew alert rule.
In theCreate rulepage, leavecollectorworkspaceas theResource.
In theCreate rulepage, leavecollectorworkspaceas theResource.
collectorworkspace
UnderCondition, select the entryWhenever the customer log search is <login undefined>. TheConfigure signal logicpage will open.
UnderCondition, select the entryWhenever the customer log search is <login undefined>. TheConfigure signal logicpage will open.
UnderThreshold value, enter0and then selectDone.
UnderThreshold value, enter0and then selectDone.
UnderActions, selectCreate action group. TheAdd action grouppage will open.
UnderActions, selectCreate action group. TheAdd action grouppage will open.
InAction group name, typemyActionGroup.
InAction group name, typemyActionGroup.
InShort name, typemyActionGroup.
InShort name, typemyActionGroup.
InResource group, selectmyResourceGroupAvailability.
InResource group, selectmyResourceGroupAvailability.
Under Actions, inACTION NAMEtypeEmail, and then selectEmail/SMS/Push/Voice. TheEmail/SMS/Push/Voicepage will open.
Under Actions, inACTION NAMEtypeEmail, and then selectEmail/SMS/Push/Voice. TheEmail/SMS/Push/Voicepage will open.
SelectEmail, type in your e-mail address, then selectOK.
SelectEmail, type in your e-mail address, then selectOK.
In theAdd action grouppage, selectOK.
In theAdd action grouppage, selectOK.
In theCreate rulepage, underALERT DETAILS, typemyAlertfor theAlert rule name, and then typeEmail alert rulefor theDescription.
In theCreate rulepage, underALERT DETAILS, typemyAlertfor theAlert rule name, and then typeEmail alert rulefor theDescription.
When you're finished, selectCreate alert rule.
When you're finished, selectCreate alert rule.
Restart one of the VMs in the availability set. Within a few minutes, you should get an e-mail that the alert has been triggered.
Restart one of the VMs in the availability set. Within a few minutes, you should get an e-mail that the alert has been triggered.
To manage your alert rules, go to the resource group, selectAlertsfrom the left menu, and then selectManage alert rulesfrom the top of the page.
Next steps
To learn more, see theScheduled events servicepage on GitHub.
Feedback
Was this page helpful?
Additional resources