Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Share your code with Azure Repos and Visual Studio
Article
2024-07-24
12 contributors
In this article
Azure DevOps Services | Azure DevOps Server 2022 - Azure DevOps Server 2019
Visual Studio 2019 | Visual Studio 2022
Share your Visual Studio solution with others by hosting your code in anAzure ReposGit repository. You can use Visual Studio to manageAzure ReposGit repositories or GitHub repositories. This article provides procedures for the following tasks:
Add a project or solution to a local Git repository
Publish your code to anAzure ReposGit repository or GitHub repository
Review your code changes before publishing
Link work items to your commits
Commit and push updates
Pull changes from the main branch of your repository
To clone a GitHub repository, get the clone URL as described inCloning a repository.
For an overview of the Git workflow, seeAzure Repos Git tutorial.
Prerequisites
Note
In public projects, users withStakeholderaccess have full access to Azure Repos, including viewing, cloning, and contributing to code.
For more information about permissions and access, seeDefault Git repository and branch permissionsandAbout access levels.
Note
Visual Studio 2019 version 16.8 and later versions provide a new Git menu for managing the Git workflow with less context switching than Team Explorer. Procedures provided in this article under the Visual Studio tab provide information for using the Git experience as well as Team Explorer. For more information, seeSide-by-side comparison of Git and Team Explorer.
Add a project or solution to a new local Git repository
The first step to sharing your Visual Studio solution with others using Git is to create a local Git repo for your code. If it's your first time using Visual Studio to connect toAzure Repos, seeConnect to a project from Visual Studiofor details.
Visual Studio 2022
Visual Studio 2019 - Git menu
Visual Studio 2019 - Team Explorer
Git Command Line
Create a new local Git repo for your Visual Studio solution, by right-clicking the solution name inSolution Explorer, and then selectingCreate Git Repository. Or, chooseAdd to Source Controlon the status bar in the lower right-hand corner of Visual Studio, and then selectGit. If you don't see these options, then your code is already in a Git repo.Or, chooseGit > Create Git Repositoryfrom the menu bar to launch theCreate a Git repositorywindow. If you don't see this option, then your code is already in a Git repo.
Create a new local Git repo for your Visual Studio solution, by right-clicking the solution name inSolution Explorer, and then selectingCreate Git Repository. Or, chooseAdd to Source Controlon the status bar in the lower right-hand corner of Visual Studio, and then selectGit. If you don't see these options, then your code is already in a Git repo.

Or, chooseGit > Create Git Repositoryfrom the menu bar to launch theCreate a Git repositorywindow. If you don't see this option, then your code is already in a Git repo.

This step only applies to the Visual Studio Git version control experience: in theCreate a Git repositorywindow, chooseLocal only, verify the local path is correct, and then chooseCreate.
This step only applies to the Visual Studio Git version control experience: in theCreate a Git repositorywindow, chooseLocal only, verify the local path is correct, and then chooseCreate.

You've now created a local Git repo in the Visual Studio solution folder and committed your code into that repo. Your local Git repo contains both your Visual Studio solution and Git resources.

Create a new local Git repo for your Visual Studio solution, by right-clicking the solution name inSolution Explorer, and then selectingCreate Git Repository. Or, chooseAdd to Source Controlon the status bar in the lower right-hand corner of Visual Studio, and then selectGit. If you don't see these options, then your code is already in a Git repo.Or, chooseGit > Create Git Repositoryfrom the menu bar to launch theCreate a Git repositorywindow. If you don't see this option, then your code is already in a Git repo.
Create a new local Git repo for your Visual Studio solution, by right-clicking the solution name inSolution Explorer, and then selectingCreate Git Repository. Or, chooseAdd to Source Controlon the status bar in the lower right-hand corner of Visual Studio, and then selectGit. If you don't see these options, then your code is already in a Git repo.

Or, chooseGit > Create Git Repositoryfrom the menu bar to launch theCreate a Git repositorywindow. If you don't see this option, then your code is already in a Git repo.

This step only applies to the Visual Studio Git version control experience: in theCreate a Git repositorywindow, chooseLocal only, verify the local path is correct, and then chooseCreate.
This step only applies to the Visual Studio Git version control experience: in theCreate a Git repositorywindow, chooseLocal only, verify the local path is correct, and then chooseCreate.

You've now created a local Git repo in the Visual Studio solution folder and committed your code into that repo. Your local Git repo contains both your Visual Studio solution and Git resources.

These tasks are not supported through Team Explorer.
Download and install Git. When prompted during the install, enableGit Credential Manager.
Download and install Git. When prompted during the install, enableGit Credential Manager.
At the command prompt, go to the root folder that contains your Visual Studio solution and run the following commands. These commands create a local Git repo in the Visual Studio solution folder and commit your code into that repo.> git init
> git commit -am "first commit"
> git branch -m mainYour local Git repo now contains both your Visual Studio solution and Git resources.
At the command prompt, go to the root folder that contains your Visual Studio solution and run the following commands. These commands create a local Git repo in the Visual Studio solution folder and commit your code into that repo.
> git init
> git commit -am "first commit"
> git branch -m main
> git init
> git commit -am "first commit"
> git branch -m main
Your local Git repo now contains both your Visual Studio solution and Git resources.

Publish your code
You can share your work with others by publishing your local Git repo to anAzure ReposGit repo.
Visual Studio 2022
Visual Studio 2019 - Git menu
Visual Studio 2019 - Team Explorer
Git Command Line
Visual Studio 2022 provides a Git version control experience by using theGitmenu,Git Changes, and through context menus inSolution Explorer. Visual Studio 2019 version 16.8 also offers theTeam ExplorerGit user interface. For more information, see theVisual Studio 2019 - Team Explorertab.
Connect to an Azure DevOps repo by right-clicking the solution name inSolution Explorer, and then selectingPush to Git serviceto launch theCreate a Git repositorywindow.Or, chooseGit > Push to Git servicefrom the menu bar to launch theCreate a Git repositorywindow.
Connect to an Azure DevOps repo by right-clicking the solution name inSolution Explorer, and then selectingPush to Git serviceto launch theCreate a Git repositorywindow.

Or, chooseGit > Push to Git servicefrom the menu bar to launch theCreate a Git repositorywindow.

In theCreate a Git repositorydialog, selectGitHub. Enter any required values underCreate a new GitHub repository. Then selectPush.You can verify that the repo is created by going to GitHub and searching for your repo name in your account.
In theCreate a Git repositorydialog, selectGitHub. Enter any required values underCreate a new GitHub repository. Then selectPush.

You can verify that the repo is created by going to GitHub and searching for your repo name in your account.
Visual Studio 2019 provides a Git version control experience by using theGitmenu,Git Changes, and through context menus inSolution Explorer.
Connect to an Azure DevOps repo by right-clicking the solution name inSolution Explorer, and then selectingPush to Git serviceto launch theCreate a Git repositorywindow.Or, chooseGit > Push to Git servicefrom the menu bar to launch theCreate a Git repositorywindow.
Connect to an Azure DevOps repo by right-clicking the solution name inSolution Explorer, and then selectingPush to Git serviceto launch theCreate a Git repositorywindow.

Or, chooseGit > Push to Git servicefrom the menu bar to launch theCreate a Git repositorywindow.

Open a browser and navigate to your Azure DevOps project by using a URL in the form ofhttps://dev.azure.com/<OrganizationName>/<ProjectName>. If you don't have a project yet,create one.
Open a browser and navigate to your Azure DevOps project by using a URL in the form ofhttps://dev.azure.com/<OrganizationName>/<ProjectName>. If you don't have a project yet,create one.
https://dev.azure.com/<OrganizationName>/<ProjectName>
In your Azure DevOps project,Createan empty Git repo without a README file. Copy the clone URL from theClone Repositorypopup.
In your Azure DevOps project,Createan empty Git repo without a README file. Copy the clone URL from theClone Repositorypopup.

In theCreate a Git repositorywindow, chooseExisting remoteand enter the repo clone URL from the previous step, and then choosePush. For more information on how to create a new Azure DevOps repo, seeCreate a new Git repo in your project.
In theCreate a Git repositorywindow, chooseExisting remoteand enter the repo clone URL from the previous step, and then choosePush. For more information on how to create a new Azure DevOps repo, seeCreate a new Git repo in your project.

TheGit Changeswindow shows a confirmation message that your code is now in an Azure DevOps repo.
TheGit Changeswindow shows a confirmation message that your code is now in an Azure DevOps repo.

Note
With Azure DevOps Services, the format for the project URL isdev.azure.com/{your organization}/{your project}. However, the previous format that references thevisualstudio.comformat is still supported. For more information, seeIntroducing Azure DevOps, Switch existing organizations to use the new domain name URL.
dev.azure.com/{your organization}/{your project}
visualstudio.com
Visual Studio 2019 version 16.8 and later versions provides a Git version control experience while maintaining theTeam ExplorerGit user interface. To useTeam Explorer, uncheckTools>Options>Preview Features>New Git user experiencefrom the menu bar. You can exercise Git features from either interface interchangeably. Below, we provide a side-by-side comparison for publishing your code.
Note
One advantage of connecting to a project throughTeam Exploreris you gain access to the Work Items hub. For an overview ofTeam Explorerfeatures, seeNavigate in Visual Studio Team Explorer.
In thePush to Azure Dev Ops Servicessection of theSynchronizationview inTeam Explorer, select thePublish Git Repobutton.
In thePush to Azure Dev Ops Servicessection of theSynchronizationview inTeam Explorer, select thePublish Git Repobutton.

Choose your Azure DevOps organization and repo name, and then selectPublish Repository.This step creates a new project with the same name that you selected for the repo. To create the repo in an existing project, selectAdvancednext to theRepository name, and then choose a project.
Choose your Azure DevOps organization and repo name, and then selectPublish Repository.

This step creates a new project with the same name that you selected for the repo. To create the repo in an existing project, selectAdvancednext to theRepository name, and then choose a project.
Your code is now in aAzure ReposGit repository. You can view your code on the web by selectingSee it on the web.
Your code is now in aAzure ReposGit repository. You can view your code on the web by selectingSee it on the web.

Note
With Azure DevOps Services, the format for the project URL isdev.azure.com/{your organization}/{your project}. However, the previous format that references thevisualstudio.comformat is still supported. For more information, seeIntroducing Azure DevOps, Switch existing organizations to use the new domain name URL.
dev.azure.com/{your organization}/{your project}
visualstudio.com
Open a browser and navigate to your Azure DevOps project using a URL in the form ofhttps://dev.azure.com/<OrganizationName>/<ProjectName>. If you don't have a project yet,create one.
Open a browser and navigate to your Azure DevOps project using a URL in the form ofhttps://dev.azure.com/<OrganizationName>/<ProjectName>. If you don't have a project yet,create one.
https://dev.azure.com/<OrganizationName>/<ProjectName>
In your Azure DevOps project,createan empty Git repo without a README file. Copy the clone URL from theClone Repositorypopup.
In your Azure DevOps project,createan empty Git repo without a README file. Copy the clone URL from theClone Repositorypopup.

To publish your local commit toAzure repos, run the following commands at the command prompt in your local git repo folder, using the clone URL from the previous step.> git remote add origin <clone URL>
> git push -u origin mainYour code is now published to themainbranch of anAzure ReposGit repository.
To publish your local commit toAzure repos, run the following commands at the command prompt in your local git repo folder, using the clone URL from the previous step.
> git remote add origin <clone URL>
> git push -u origin main
> git remote add origin <clone URL>
> git push -u origin main
Your code is now published to themainbranch of anAzure ReposGit repository.
main
Note
With Azure DevOps Services, the format for the project URL isdev.azure.com/{your organization}/{your project}. However, the previous format that references thevisualstudio.comformat is still supported. For more information, seeIntroducing Azure DevOps, Switch existing organizations to use the new domain name URL.
dev.azure.com/{your organization}/{your project}
visualstudio.com
Review commit changes
It's good practice to review the code changes in your commit before publishing. Visual Studio provides a diff view that helps you see all the changes you've made since the previous commit.
Visual Studio 2022
Visual Studio 2019 - Git menu
Visual Studio 2019 - Team Explorer
Git Command Line
To see what's changed in a commit, selectGit>Manage Branchesto open theGit Repositorywindow.
To see what's changed in a commit, selectGit>Manage Branchesto open theGit Repositorywindow.

In theGit Repositorywindow, select your branch, right-click the commit, and then chooseView Commit Detailsto open theCommitwindow.
In theGit Repositorywindow, select your branch, right-click the commit, and then chooseView Commit Detailsto open theCommitwindow.

In theCommitwindow, you can right-click on any file and selectCompare with Previousto view the file changes made by the commit.
In theCommitwindow, you can right-click on any file and selectCompare with Previousto view the file changes made by the commit.

To see what's changed in a commit, selectGit>Manage Branchesto open theGit Repositorywindow.
To see what's changed in a commit, selectGit>Manage Branchesto open theGit Repositorywindow.

In theGit Repositorywindow, select your branch, right-click the commit, and then chooseView Commit Detailsto open theCommitwindow.
In theGit Repositorywindow, select your branch, right-click the commit, and then chooseView Commit Detailsto open theCommitwindow.

In theCommitwindow, you can right-click on any file and selectCompare with Previousto view the file changes made by the commit.
In theCommitwindow, you can right-click on any file and selectCompare with Previousto view the file changes made by the commit.

To see what's changed in a commit, go to theSynchronizationpage inTeam Explorer, right-click on any commit, and then chooseView Commit Detailsto open theGit Detailswindow.
To see what's changed in a commit, go to theSynchronizationpage inTeam Explorer, right-click on any commit, and then chooseView Commit Detailsto open theGit Detailswindow.

In theCommit Detailswindow, you can right-click on any file and selectCompare with Previousto view the file changes made by the commit.
In theCommit Detailswindow, you can right-click on any file and selectCompare with Previousto view the file changes made by the commit.

To show a diff view of the last commit in your current branch, run the following command at the command prompt in your local git repo folder.
> git show
> git show

Link work items to your commits
As you develop your software, you can capture which commits support the completion of work items like Azure DevOps tasks or bug fixes. The audit trail of work items linked to commits lets your team understand how tasks and bugs were resolved.
Note
The#IDsyntax is supported when you connect to an Azure Repos Git repository. If you connect to a GitHub repository, you can stilllink to work items, but must use the#ABIDsyntax, and have previously set up anAzure Boards-GitHub connection.
Visual Studio 2022
Visual Studio 2019 - Git menu
Visual Studio 2019 - Team Explorer
Git Command Line
You can link work items to commits by adding#IDinto the commit message. For example, the commit message "Fix bug #12 Missing icons in the reporting tools" would link work item 12 to the commit when the commit is pushed toAzure Repos.

You can link work items to commits by adding#IDinto the commit message. For example, the commit message "Fix bug #12 Missing icons in the reporting tools" would link work item 12 to the commit when the commit is pushed toAzure Repos.

You can include work items in your commits throughRelated Work Itemsin theChangesview ofTeam Explorer.

You can also link work items to commits by adding#IDinto the commit message. For example, the commit message "Fix bug #12 in the reporting tools" would link work item 12 to the commit when the commit is pushed toAzure Repos.
You can link work items to commits by adding#IDinto the commit message. For example, the commit message "Fix bug #12 in the reporting tools" would link work item 12 to the commit when the commit is pushed toAzure Repos. To test, make some code changes and run the following commands at the command prompt in your local git repo folder.
> git commit -am "Fix bug #<work item ID>"
> git push
> git commit -am "Fix bug #<work item ID>"
> git push
Push commit changes
Visual Studio 2022
Visual Studio 2019 - Git menu
Visual Studio 2019 - Team Explorer
Git Command Line
As you write your code, your changes are automatically tracked by Visual Studio. When you're satisfied with your changes, you can save them in Git using a commit, and then push your commit toAzure Repos.
In theGit Changeswindow, enter a message that describes the changes, and then chooseCommit All.Commit Allcommits unstaged changes and skips the staging area. You can choose to stage all files before committing by selecting the stage all + (plus) button at the top of the Changes section of theGit Changeswindow.
In theGit Changeswindow, enter a message that describes the changes, and then chooseCommit All.Commit Allcommits unstaged changes and skips the staging area. You can choose to stage all files before committing by selecting the stage all + (plus) button at the top of the Changes section of theGit Changeswindow.

To push your commit toAzure Repos, select the up-arrow push button.Or, you can push your commit from theGit Repositorywindow. To open theGit Repositorywindow, select theoutgoing / incominglink in theGit Changeswindow.Or, you can chooseGit > Pushfrom the menu bar.
To push your commit toAzure Repos, select the up-arrow push button.

Or, you can push your commit from theGit Repositorywindow. To open theGit Repositorywindow, select theoutgoing / incominglink in theGit Changeswindow.

Or, you can chooseGit > Pushfrom the menu bar.

As you write your code, your changes are automatically tracked by Visual Studio. When you're satisfied with your changes, you can save them in Git using a commit, and then push your commit toAzure Repos.
In theGit Changeswindow, enter a message that describes the changes, and then chooseCommit All.Commit Allcommits unstaged changes and skips the staging area. You can choose to stage all files before committing by selecting the stage all + (plus) button at the top of the Changes section of theGit Changeswindow.
In theGit Changeswindow, enter a message that describes the changes, and then chooseCommit All.Commit Allcommits unstaged changes and skips the staging area. You can choose to stage all files before committing by selecting the stage all + (plus) button at the top of the Changes section of theGit Changeswindow.

To push your commit toAzure Repos, select the up-arrow push button.Or, you can push your commit from theGit Repositorywindow. To open theGit Repositorywindow, select theoutgoing / incominglink in theGit Changeswindow.Or, you can chooseGit > Pushfrom the menu bar.
To push your commit toAzure Repos, select the up-arrow push button.

Or, you can push your commit from theGit Repositorywindow. To open theGit Repositorywindow, select theoutgoing / incominglink in theGit Changeswindow.

Or, you can chooseGit > Pushfrom the menu bar.

As you write your code, your changes are automatically tracked by Visual Studio. When you're satisfied with your changes, you can save them in Git using a commit, and then push your commit toAzure Repos.
Open theChangesview ofTeam Explorerby selecting theHomebutton and choosingChanges. Or, select the pending changes iconon the status bar.
Open theChangesview ofTeam Explorerby selecting theHomebutton and choosingChanges. Or, select the pending changes iconon the status bar.

In theGit Changeswindow, enter a message that describes the changes, and then chooseCommit All.Commit Allcommits unstaged changes and skips the staging area. You can choose to stage all files before committing by selecting the stage all + (plus) button at the top of the Changes section in theGit Changeswindow.
In theGit Changeswindow, enter a message that describes the changes, and then chooseCommit All.Commit Allcommits unstaged changes and skips the staging area. You can choose to stage all files before committing by selecting the stage all + (plus) button at the top of the Changes section in theGit Changeswindow.

To push one or more commits toAzure Repos, selectHomeand then chooseSyncto open theSynchronizationview inTeam Explorer. Or, select the unpublished changes status bar icon (on the status bar.
To push one or more commits toAzure Repos, selectHomeand then chooseSyncto open theSynchronizationview inTeam Explorer. Or, select the unpublished changes status bar icon (on the status bar.

In theSynchronizationview, choosePushto upload your commit to the remote repo. If this is your first push to the repo, you'll see the message:The current branch does not track a remote branch..., which lets you know that your commit was pushed to a new branch on the remote repo and that future commits pushed from the current branch will be uploaded to that remote branch.
In theSynchronizationview, choosePushto upload your commit to the remote repo. If this is your first push to the repo, you'll see the message:The current branch does not track a remote branch..., which lets you know that your commit was pushed to a new branch on the remote repo and that future commits pushed from the current branch will be uploaded to that remote branch.
The current branch does not track a remote branch...

To publish new commits from your current local branch to the corresponding branch in theAzure ReposGit repo, run the following command at the command prompt in your local git repo folder.
> git push
> git push
Pull changes
You can keep your local branches in sync with their remote counterparts by pulling commits created by others. While you're working on your feature branch, it's a good idea to periodically switch to yourmainbranch and pull new commits to keep it current with the remotemainbranch.
main
main
Note
In Visual Studio,FetchandPulllinks can be found in different views and in the Git menu on the menu bar. Those links all do the same thingâfetch or pull from the remote repo to the current branch of the local repo.
Visual Studio 2022
Visual Studio 2019 - Git menu
Visual Studio 2019 - Team Explorer
Git Command Line
In theGit Changeswindow, you can check for the latest commits on the remote branch by using the down-arrow fetch link, then selecting theoutgoing / incominglink to open theGit Repositorywindow.Fetchdownloads remote commits that aren't in your local branch, but won't merge them into your local branch. Fetched commits show up in theIncoming Commitssection of theGit Repositorywindow. You can double-click a fetched commit to view its file changes.
In theGit Changeswindow, you can check for the latest commits on the remote branch by using the down-arrow fetch link, then selecting theoutgoing / incominglink to open theGit Repositorywindow.Fetchdownloads remote commits that aren't in your local branch, but won't merge them into your local branch. Fetched commits show up in theIncoming Commitssection of theGit Repositorywindow. You can double-click a fetched commit to view its file changes.

ChoosePullto merge the fetched remote commits into your local repo.Pullperforms a fetch and then merges the downloaded commits into your local branch.
ChoosePullto merge the fetched remote commits into your local repo.Pullperforms a fetch and then merges the downloaded commits into your local branch.
In theGit Changeswindow, you can check for the latest commits on the remote branch by using the down-arrow fetch link, then selecting theoutgoing / incominglink to open theGit Repositorywindow.Fetchdownloads remote commits that aren't in your local branch, but won't merge them into your local branch. Fetched commits show up in theIncoming Commitssection of theGit Repositorywindow. You can double-click a fetched commit to view its file changes.
In theGit Changeswindow, you can check for the latest commits on the remote branch by using the down-arrow fetch link, then selecting theoutgoing / incominglink to open theGit Repositorywindow.Fetchdownloads remote commits that aren't in your local branch, but won't merge them into your local branch. Fetched commits show up in theIncoming Commitssection of theGit Repositorywindow. You can double-click a fetched commit to view its file changes.

ChoosePullto merge the fetched remote commits into your local repo.Pullperforms a fetch and then merges the downloaded commits into your local branch.
ChoosePullto merge the fetched remote commits into your local repo.Pullperforms a fetch and then merges the downloaded commits into your local branch.
InTeam Explorer, selectHomeand chooseSyncto open theSynchronizationview.
InTeam Explorer, selectHomeand chooseSyncto open theSynchronizationview.

In theSynchronizationview, you can preview the latest changes on the remote branch by using theFetchlink.Fetchdownloads remote commits that aren't in your local branch, but doesn't merge them. Fetched commits show up in theIncoming Commitssection of theSynchronizationview. You can double-click a commit to view its file changes.
In theSynchronizationview, you can preview the latest changes on the remote branch by using theFetchlink.Fetchdownloads remote commits that aren't in your local branch, but doesn't merge them. Fetched commits show up in theIncoming Commitssection of theSynchronizationview. You can double-click a commit to view its file changes.

ChoosePullto merge the fetched remote commits into your local repo.Pullperforms a fetch and then merges the downloaded commits into your local branch.
ChoosePullto merge the fetched remote commits into your local repo.Pullperforms a fetch and then merges the downloaded commits into your local branch.
To download new commits from theAzure ReposGit repo without merging them into your local repo, run the following command at the command prompt in your local git repo folder.
> git fetch
> git fetch
To downloadandmerge new commits from theAzure ReposGit repo into the current branch of your local repo, run the following command.
> git pull
> git pull
FAQs

A:Your sign-in page depends on whether you used a Microsoft account or a work account with Azure DevOps. Always sign in with the credentials that you use for Azure DevOps.
A:Visual Studio's Team Explorer and the Git command-line work great together. Changes to your repos made in either tool will be reflected in the other.
Make sure to install the latest release ofGit for Windows, which has tools to help you connect to your Azure DevOps Services/TFS repos.
Seethe Azure Repos Git tutorialand thecommand referencefor additional help using Git from the command line.
Next steps
Set up a buildAzure Repos Git tutorial
Related articles
New to Git repos? Learn more
Feedback
Was this page helpful?
Additional resources