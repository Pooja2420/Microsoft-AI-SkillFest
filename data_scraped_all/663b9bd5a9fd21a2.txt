Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Microsoft.Logic integrationAccounts/agreements
Article
2024-12-09
2 contributors
In this article
Latest
2019-05-01
2018-07-01-preview
2016-06-01
2015-08-01-preview
Bicep resource definition
The integrationAccounts/agreements resource type can be deployed with operations that target:
Resource groups- Seeresource group deployment commands
For a list of changed properties in each API version, seechange log.
Resource format
To create a Microsoft.Logic/integrationAccounts/agreements resource, add the following Bicep to your template.
resource symbolicname 'Microsoft.Logic/integrationAccounts/agreements@2019-05-01' = {
  parent: resourceSymbolicName
  location: 'string'
  name: 'string'
  properties: {
    agreementType: 'string'
    content: {
      aS2: {
        receiveAgreement: {
          protocolSettings: {
            acknowledgementConnectionSettings: {
              ignoreCertificateNameMismatch: bool
              keepHttpConnectionAlive: bool
              supportHttpStatusCodeContinue: bool
              unfoldHttpHeaders: bool
            }
            envelopeSettings: {
              autogenerateFileName: bool
              fileNameTemplate: 'string'
              messageContentType: 'string'
              suspendMessageOnFileNameGenerationError: bool
              transmitFileNameInMimeHeader: bool
            }
            errorSettings: {
              resendIfMDNNotReceived: bool
              suspendDuplicateMessage: bool
            }
            mdnSettings: {
              dispositionNotificationTo: 'string'
              mdnText: 'string'
              micHashingAlgorithm: 'string'
              needMDN: bool
              receiptDeliveryUrl: 'string'
              sendInboundMDNToMessageBox: bool
              sendMDNAsynchronously: bool
              signMDN: bool
              signOutboundMDNIfOptional: bool
            }
            messageConnectionSettings: {
              ignoreCertificateNameMismatch: bool
              keepHttpConnectionAlive: bool
              supportHttpStatusCodeContinue: bool
              unfoldHttpHeaders: bool
            }
            securitySettings: {
              enableNRRForInboundDecodedMessages: bool
              enableNRRForInboundEncodedMessages: bool
              enableNRRForInboundMDN: bool
              enableNRRForOutboundDecodedMessages: bool
              enableNRRForOutboundEncodedMessages: bool
              enableNRRForOutboundMDN: bool
              encryptionCertificateName: 'string'
              overrideGroupSigningCertificate: bool
              sha2AlgorithmFormat: 'string'
              signingCertificateName: 'string'
            }
            validationSettings: {
              checkCertificateRevocationListOnReceive: bool
              checkCertificateRevocationListOnSend: bool
              checkDuplicateMessage: bool
              compressMessage: bool
              encryptionAlgorithm: 'string'
              encryptMessage: bool
              interchangeDuplicatesValidityDays: int
              overrideMessageProperties: bool
              signingAlgorithm: 'string'
              signMessage: bool
            }
          }
          receiverBusinessIdentity: {
            qualifier: 'string'
            value: 'string'
          }
          senderBusinessIdentity: {
            qualifier: 'string'
            value: 'string'
          }
        }
        sendAgreement: {
          protocolSettings: {
            acknowledgementConnectionSettings: {
              ignoreCertificateNameMismatch: bool
              keepHttpConnectionAlive: bool
              supportHttpStatusCodeContinue: bool
              unfoldHttpHeaders: bool
            }
            envelopeSettings: {
              autogenerateFileName: bool
              fileNameTemplate: 'string'
              messageContentType: 'string'
              suspendMessageOnFileNameGenerationError: bool
              transmitFileNameInMimeHeader: bool
            }
            errorSettings: {
              resendIfMDNNotReceived: bool
              suspendDuplicateMessage: bool
            }
            mdnSettings: {
              dispositionNotificationTo: 'string'
              mdnText: 'string'
              micHashingAlgorithm: 'string'
              needMDN: bool
              receiptDeliveryUrl: 'string'
              sendInboundMDNToMessageBox: bool
              sendMDNAsynchronously: bool
              signMDN: bool
              signOutboundMDNIfOptional: bool
            }
            messageConnectionSettings: {
              ignoreCertificateNameMismatch: bool
              keepHttpConnectionAlive: bool
              supportHttpStatusCodeContinue: bool
              unfoldHttpHeaders: bool
            }
            securitySettings: {
              enableNRRForInboundDecodedMessages: bool
              enableNRRForInboundEncodedMessages: bool
              enableNRRForInboundMDN: bool
              enableNRRForOutboundDecodedMessages: bool
              enableNRRForOutboundEncodedMessages: bool
              enableNRRForOutboundMDN: bool
              encryptionCertificateName: 'string'
              overrideGroupSigningCertificate: bool
              sha2AlgorithmFormat: 'string'
              signingCertificateName: 'string'
            }
            validationSettings: {
              checkCertificateRevocationListOnReceive: bool
              checkCertificateRevocationListOnSend: bool
              checkDuplicateMessage: bool
              compressMessage: bool
              encryptionAlgorithm: 'string'
              encryptMessage: bool
              interchangeDuplicatesValidityDays: int
              overrideMessageProperties: bool
              signingAlgorithm: 'string'
              signMessage: bool
            }
          }
          receiverBusinessIdentity: {
            qualifier: 'string'
            value: 'string'
          }
          senderBusinessIdentity: {
            qualifier: 'string'
            value: 'string'
          }
        }
      }
      edifact: {
        receiveAgreement: {
          protocolSettings: {
            acknowledgementSettings: {
              acknowledgementControlNumberLowerBound: int
              acknowledgementControlNumberPrefix: 'string'
              acknowledgementControlNumberSuffix: 'string'
              acknowledgementControlNumberUpperBound: int
              batchFunctionalAcknowledgements: bool
              batchTechnicalAcknowledgements: bool
              needFunctionalAcknowledgement: bool
              needLoopForValidMessages: bool
              needTechnicalAcknowledgement: bool
              rolloverAcknowledgementControlNumber: bool
              sendSynchronousAcknowledgement: bool
            }
            edifactDelimiterOverrides: [
              {
                componentSeparator: int
                dataElementSeparator: int
                decimalPointIndicator: 'string'
                messageAssociationAssignedCode: 'string'
                messageId: 'string'
                messageRelease: 'string'
                messageVersion: 'string'
                releaseIndicator: int
                repetitionSeparator: int
                segmentTerminator: int
                segmentTerminatorSuffix: 'string'
                targetNamespace: 'string'
              }
            ]
            envelopeOverrides: [
              {
                applicationPassword: 'string'
                associationAssignedCode: 'string'
                controllingAgencyCode: 'string'
                functionalGroupId: 'string'
                groupHeaderMessageRelease: 'string'
                groupHeaderMessageVersion: 'string'
                messageAssociationAssignedCode: 'string'
                messageId: 'string'
                messageRelease: 'string'
                messageVersion: 'string'
                receiverApplicationId: 'string'
                receiverApplicationQualifier: 'string'
                senderApplicationId: 'string'
                senderApplicationQualifier: 'string'
                targetNamespace: 'string'
              }
            ]
            envelopeSettings: {
              applicationReferenceId: 'string'
              applyDelimiterStringAdvice: bool
              communicationAgreementId: 'string'
              createGroupingSegments: bool
              enableDefaultGroupHeaders: bool
              functionalGroupId: 'string'
              groupApplicationPassword: 'string'
              groupApplicationReceiverId: 'string'
              groupApplicationReceiverQualifier: 'string'
              groupApplicationSenderId: 'string'
              groupApplicationSenderQualifier: 'string'
              groupAssociationAssignedCode: 'string'
              groupControllingAgencyCode: 'string'
              groupControlNumberLowerBound: int
              groupControlNumberPrefix: 'string'
              groupControlNumberSuffix: 'string'
              groupControlNumberUpperBound: int
              groupMessageRelease: 'string'
              groupMessageVersion: 'string'
              interchangeControlNumberLowerBound: int
              interchangeControlNumberPrefix: 'string'
              interchangeControlNumberSuffix: 'string'
              interchangeControlNumberUpperBound: int
              isTestInterchange: bool
              overwriteExistingTransactionSetControlNumber: bool
              processingPriorityCode: 'string'
              receiverInternalIdentification: 'string'
              receiverInternalSubIdentification: 'string'
              receiverReverseRoutingAddress: 'string'
              recipientReferencePasswordQualifier: 'string'
              recipientReferencePasswordValue: 'string'
              rolloverGroupControlNumber: bool
              rolloverInterchangeControlNumber: bool
              rolloverTransactionSetControlNumber: bool
              senderInternalIdentification: 'string'
              senderInternalSubIdentification: 'string'
              senderReverseRoutingAddress: 'string'
              transactionSetControlNumberLowerBound: int
              transactionSetControlNumberPrefix: 'string'
              transactionSetControlNumberSuffix: 'string'
              transactionSetControlNumberUpperBound: int
            }
            framingSettings: {
              characterEncoding: 'string'
              characterSet: 'string'
              componentSeparator: int
              dataElementSeparator: int
              decimalPointIndicator: 'string'
              protocolVersion: int
              releaseIndicator: int
              repetitionSeparator: int
              segmentTerminator: int
              segmentTerminatorSuffix: 'string'
              serviceCodeListDirectoryVersion: 'string'
            }
            messageFilter: {
              messageFilterType: 'string'
            }
            messageFilterList: [
              {
                messageId: 'string'
              }
            ]
            processingSettings: {
              createEmptyXmlTagsForTrailingSeparators: bool
              maskSecurityInfo: bool
              preserveInterchange: bool
              suspendInterchangeOnError: bool
              useDotAsDecimalSeparator: bool
            }
            schemaReferences: [
              {
                associationAssignedCode: 'string'
                messageId: 'string'
                messageRelease: 'string'
                messageVersion: 'string'
                schemaName: 'string'
                senderApplicationId: 'string'
                senderApplicationQualifier: 'string'
              }
            ]
            validationOverrides: [
              {
                allowLeadingAndTrailingSpacesAndZeroes: bool
                enforceCharacterSet: bool
                messageId: 'string'
                trailingSeparatorPolicy: 'string'
                trimLeadingAndTrailingSpacesAndZeroes: bool
                validateEDITypes: bool
                validateXSDTypes: bool
              }
            ]
            validationSettings: {
              allowLeadingAndTrailingSpacesAndZeroes: bool
              checkDuplicateGroupControlNumber: bool
              checkDuplicateInterchangeControlNumber: bool
              checkDuplicateTransactionSetControlNumber: bool
              interchangeControlNumberValidityDays: int
              trailingSeparatorPolicy: 'string'
              trimLeadingAndTrailingSpacesAndZeroes: bool
              validateCharacterSet: bool
              validateEDITypes: bool
              validateXSDTypes: bool
            }
          }
          receiverBusinessIdentity: {
            qualifier: 'string'
            value: 'string'
          }
          senderBusinessIdentity: {
            qualifier: 'string'
            value: 'string'
          }
        }
        sendAgreement: {
          protocolSettings: {
            acknowledgementSettings: {
              acknowledgementControlNumberLowerBound: int
              acknowledgementControlNumberPrefix: 'string'
              acknowledgementControlNumberSuffix: 'string'
              acknowledgementControlNumberUpperBound: int
              batchFunctionalAcknowledgements: bool
              batchTechnicalAcknowledgements: bool
              needFunctionalAcknowledgement: bool
              needLoopForValidMessages: bool
              needTechnicalAcknowledgement: bool
              rolloverAcknowledgementControlNumber: bool
              sendSynchronousAcknowledgement: bool
            }
            edifactDelimiterOverrides: [
              {
                componentSeparator: int
                dataElementSeparator: int
                decimalPointIndicator: 'string'
                messageAssociationAssignedCode: 'string'
                messageId: 'string'
                messageRelease: 'string'
                messageVersion: 'string'
                releaseIndicator: int
                repetitionSeparator: int
                segmentTerminator: int
                segmentTerminatorSuffix: 'string'
                targetNamespace: 'string'
              }
            ]
            envelopeOverrides: [
              {
                applicationPassword: 'string'
                associationAssignedCode: 'string'
                controllingAgencyCode: 'string'
                functionalGroupId: 'string'
                groupHeaderMessageRelease: 'string'
                groupHeaderMessageVersion: 'string'
                messageAssociationAssignedCode: 'string'
                messageId: 'string'
                messageRelease: 'string'
                messageVersion: 'string'
                receiverApplicationId: 'string'
                receiverApplicationQualifier: 'string'
                senderApplicationId: 'string'
                senderApplicationQualifier: 'string'
                targetNamespace: 'string'
              }
            ]
            envelopeSettings: {
              applicationReferenceId: 'string'
              applyDelimiterStringAdvice: bool
              communicationAgreementId: 'string'
              createGroupingSegments: bool
              enableDefaultGroupHeaders: bool
              functionalGroupId: 'string'
              groupApplicationPassword: 'string'
              groupApplicationReceiverId: 'string'
              groupApplicationReceiverQualifier: 'string'
              groupApplicationSenderId: 'string'
              groupApplicationSenderQualifier: 'string'
              groupAssociationAssignedCode: 'string'
              groupControllingAgencyCode: 'string'
              groupControlNumberLowerBound: int
              groupControlNumberPrefix: 'string'
              groupControlNumberSuffix: 'string'
              groupControlNumberUpperBound: int
              groupMessageRelease: 'string'
              groupMessageVersion: 'string'
              interchangeControlNumberLowerBound: int
              interchangeControlNumberPrefix: 'string'
              interchangeControlNumberSuffix: 'string'
              interchangeControlNumberUpperBound: int
              isTestInterchange: bool
              overwriteExistingTransactionSetControlNumber: bool
              processingPriorityCode: 'string'
              receiverInternalIdentification: 'string'
              receiverInternalSubIdentification: 'string'
              receiverReverseRoutingAddress: 'string'
              recipientReferencePasswordQualifier: 'string'
              recipientReferencePasswordValue: 'string'
              rolloverGroupControlNumber: bool
              rolloverInterchangeControlNumber: bool
              rolloverTransactionSetControlNumber: bool
              senderInternalIdentification: 'string'
              senderInternalSubIdentification: 'string'
              senderReverseRoutingAddress: 'string'
              transactionSetControlNumberLowerBound: int
              transactionSetControlNumberPrefix: 'string'
              transactionSetControlNumberSuffix: 'string'
              transactionSetControlNumberUpperBound: int
            }
            framingSettings: {
              characterEncoding: 'string'
              characterSet: 'string'
              componentSeparator: int
              dataElementSeparator: int
              decimalPointIndicator: 'string'
              protocolVersion: int
              releaseIndicator: int
              repetitionSeparator: int
              segmentTerminator: int
              segmentTerminatorSuffix: 'string'
              serviceCodeListDirectoryVersion: 'string'
            }
            messageFilter: {
              messageFilterType: 'string'
            }
            messageFilterList: [
              {
                messageId: 'string'
              }
            ]
            processingSettings: {
              createEmptyXmlTagsForTrailingSeparators: bool
              maskSecurityInfo: bool
              preserveInterchange: bool
              suspendInterchangeOnError: bool
              useDotAsDecimalSeparator: bool
            }
            schemaReferences: [
              {
                associationAssignedCode: 'string'
                messageId: 'string'
                messageRelease: 'string'
                messageVersion: 'string'
                schemaName: 'string'
                senderApplicationId: 'string'
                senderApplicationQualifier: 'string'
              }
            ]
            validationOverrides: [
              {
                allowLeadingAndTrailingSpacesAndZeroes: bool
                enforceCharacterSet: bool
                messageId: 'string'
                trailingSeparatorPolicy: 'string'
                trimLeadingAndTrailingSpacesAndZeroes: bool
                validateEDITypes: bool
                validateXSDTypes: bool
              }
            ]
            validationSettings: {
              allowLeadingAndTrailingSpacesAndZeroes: bool
              checkDuplicateGroupControlNumber: bool
              checkDuplicateInterchangeControlNumber: bool
              checkDuplicateTransactionSetControlNumber: bool
              interchangeControlNumberValidityDays: int
              trailingSeparatorPolicy: 'string'
              trimLeadingAndTrailingSpacesAndZeroes: bool
              validateCharacterSet: bool
              validateEDITypes: bool
              validateXSDTypes: bool
            }
          }
          receiverBusinessIdentity: {
            qualifier: 'string'
            value: 'string'
          }
          senderBusinessIdentity: {
            qualifier: 'string'
            value: 'string'
          }
        }
      }
      x12: {
        receiveAgreement: {
          protocolSettings: {
            acknowledgementSettings: {
              acknowledgementControlNumberLowerBound: int
              acknowledgementControlNumberPrefix: 'string'
              acknowledgementControlNumberSuffix: 'string'
              acknowledgementControlNumberUpperBound: int
              batchFunctionalAcknowledgements: bool
              batchImplementationAcknowledgements: bool
              batchTechnicalAcknowledgements: bool
              functionalAcknowledgementVersion: 'string'
              implementationAcknowledgementVersion: 'string'
              needFunctionalAcknowledgement: bool
              needImplementationAcknowledgement: bool
              needLoopForValidMessages: bool
              needTechnicalAcknowledgement: bool
              rolloverAcknowledgementControlNumber: bool
              sendSynchronousAcknowledgement: bool
            }
            envelopeOverrides: [
              {
                dateFormat: 'string'
                functionalIdentifierCode: 'string'
                headerVersion: 'string'
                messageId: 'string'
                protocolVersion: 'string'
                receiverApplicationId: 'string'
                responsibleAgencyCode: 'string'
                senderApplicationId: 'string'
                targetNamespace: 'string'
                timeFormat: 'string'
              }
            ]
            envelopeSettings: {
              controlStandardsId: int
              controlVersionNumber: 'string'
              enableDefaultGroupHeaders: bool
              functionalGroupId: 'string'
              groupControlNumberLowerBound: int
              groupControlNumberUpperBound: int
              groupHeaderAgencyCode: 'string'
              groupHeaderDateFormat: 'string'
              groupHeaderTimeFormat: 'string'
              groupHeaderVersion: 'string'
              interchangeControlNumberLowerBound: int
              interchangeControlNumberUpperBound: int
              overwriteExistingTransactionSetControlNumber: bool
              receiverApplicationId: 'string'
              rolloverGroupControlNumber: bool
              rolloverInterchangeControlNumber: bool
              rolloverTransactionSetControlNumber: bool
              senderApplicationId: 'string'
              transactionSetControlNumberLowerBound: int
              transactionSetControlNumberPrefix: 'string'
              transactionSetControlNumberSuffix: 'string'
              transactionSetControlNumberUpperBound: int
              usageIndicator: 'string'
              useControlStandardsIdAsRepetitionCharacter: bool
            }
            framingSettings: {
              characterSet: 'string'
              componentSeparator: int
              dataElementSeparator: int
              replaceCharacter: int
              replaceSeparatorsInPayload: bool
              segmentTerminator: int
              segmentTerminatorSuffix: 'string'
            }
            messageFilter: {
              messageFilterType: 'string'
            }
            messageFilterList: [
              {
                messageId: 'string'
              }
            ]
            processingSettings: {
              convertImpliedDecimal: bool
              createEmptyXmlTagsForTrailingSeparators: bool
              maskSecurityInfo: bool
              preserveInterchange: bool
              suspendInterchangeOnError: bool
              useDotAsDecimalSeparator: bool
            }
            schemaReferences: [
              {
                messageId: 'string'
                schemaName: 'string'
                schemaVersion: 'string'
                senderApplicationId: 'string'
              }
            ]
            securitySettings: {
              authorizationQualifier: 'string'
              authorizationValue: 'string'
              passwordValue: 'string'
              securityQualifier: 'string'
            }
            validationOverrides: [
              {
                allowLeadingAndTrailingSpacesAndZeroes: bool
                messageId: 'string'
                trailingSeparatorPolicy: 'string'
                trimLeadingAndTrailingSpacesAndZeroes: bool
                validateCharacterSet: bool
                validateEDITypes: bool
                validateXSDTypes: bool
              }
            ]
            validationSettings: {
              allowLeadingAndTrailingSpacesAndZeroes: bool
              checkDuplicateGroupControlNumber: bool
              checkDuplicateInterchangeControlNumber: bool
              checkDuplicateTransactionSetControlNumber: bool
              interchangeControlNumberValidityDays: int
              trailingSeparatorPolicy: 'string'
              trimLeadingAndTrailingSpacesAndZeroes: bool
              validateCharacterSet: bool
              validateEDITypes: bool
              validateXSDTypes: bool
            }
            x12DelimiterOverrides: [
              {
                componentSeparator: int
                dataElementSeparator: int
                messageId: 'string'
                protocolVersion: 'string'
                replaceCharacter: int
                replaceSeparatorsInPayload: bool
                segmentTerminator: int
                segmentTerminatorSuffix: 'string'
                targetNamespace: 'string'
              }
            ]
          }
          receiverBusinessIdentity: {
            qualifier: 'string'
            value: 'string'
          }
          senderBusinessIdentity: {
            qualifier: 'string'
            value: 'string'
          }
        }
        sendAgreement: {
          protocolSettings: {
            acknowledgementSettings: {
              acknowledgementControlNumberLowerBound: int
              acknowledgementControlNumberPrefix: 'string'
              acknowledgementControlNumberSuffix: 'string'
              acknowledgementControlNumberUpperBound: int
              batchFunctionalAcknowledgements: bool
              batchImplementationAcknowledgements: bool
              batchTechnicalAcknowledgements: bool
              functionalAcknowledgementVersion: 'string'
              implementationAcknowledgementVersion: 'string'
              needFunctionalAcknowledgement: bool
              needImplementationAcknowledgement: bool
              needLoopForValidMessages: bool
              needTechnicalAcknowledgement: bool
              rolloverAcknowledgementControlNumber: bool
              sendSynchronousAcknowledgement: bool
            }
            envelopeOverrides: [
              {
                dateFormat: 'string'
                functionalIdentifierCode: 'string'
                headerVersion: 'string'
                messageId: 'string'
                protocolVersion: 'string'
                receiverApplicationId: 'string'
                responsibleAgencyCode: 'string'
                senderApplicationId: 'string'
                targetNamespace: 'string'
                timeFormat: 'string'
              }
            ]
            envelopeSettings: {
              controlStandardsId: int
              controlVersionNumber: 'string'
              enableDefaultGroupHeaders: bool
              functionalGroupId: 'string'
              groupControlNumberLowerBound: int
              groupControlNumberUpperBound: int
              groupHeaderAgencyCode: 'string'
              groupHeaderDateFormat: 'string'
              groupHeaderTimeFormat: 'string'
              groupHeaderVersion: 'string'
              interchangeControlNumberLowerBound: int
              interchangeControlNumberUpperBound: int
              overwriteExistingTransactionSetControlNumber: bool
              receiverApplicationId: 'string'
              rolloverGroupControlNumber: bool
              rolloverInterchangeControlNumber: bool
              rolloverTransactionSetControlNumber: bool
              senderApplicationId: 'string'
              transactionSetControlNumberLowerBound: int
              transactionSetControlNumberPrefix: 'string'
              transactionSetControlNumberSuffix: 'string'
              transactionSetControlNumberUpperBound: int
              usageIndicator: 'string'
              useControlStandardsIdAsRepetitionCharacter: bool
            }
            framingSettings: {
              characterSet: 'string'
              componentSeparator: int
              dataElementSeparator: int
              replaceCharacter: int
              replaceSeparatorsInPayload: bool
              segmentTerminator: int
              segmentTerminatorSuffix: 'string'
            }
            messageFilter: {
              messageFilterType: 'string'
            }
            messageFilterList: [
              {
                messageId: 'string'
              }
            ]
            processingSettings: {
              convertImpliedDecimal: bool
              createEmptyXmlTagsForTrailingSeparators: bool
              maskSecurityInfo: bool
              preserveInterchange: bool
              suspendInterchangeOnError: bool
              useDotAsDecimalSeparator: bool
            }
            schemaReferences: [
              {
                messageId: 'string'
                schemaName: 'string'
                schemaVersion: 'string'
                senderApplicationId: 'string'
              }
            ]
            securitySettings: {
              authorizationQualifier: 'string'
              authorizationValue: 'string'
              passwordValue: 'string'
              securityQualifier: 'string'
            }
            validationOverrides: [
              {
                allowLeadingAndTrailingSpacesAndZeroes: bool
                messageId: 'string'
                trailingSeparatorPolicy: 'string'
                trimLeadingAndTrailingSpacesAndZeroes: bool
                validateCharacterSet: bool
                validateEDITypes: bool
                validateXSDTypes: bool
              }
            ]
            validationSettings: {
              allowLeadingAndTrailingSpacesAndZeroes: bool
              checkDuplicateGroupControlNumber: bool
              checkDuplicateInterchangeControlNumber: bool
              checkDuplicateTransactionSetControlNumber: bool
              interchangeControlNumberValidityDays: int
              trailingSeparatorPolicy: 'string'
              trimLeadingAndTrailingSpacesAndZeroes: bool
              validateCharacterSet: bool
              validateEDITypes: bool
              validateXSDTypes: bool
            }
            x12DelimiterOverrides: [
              {
                componentSeparator: int
                dataElementSeparator: int
                messageId: 'string'
                protocolVersion: 'string'
                replaceCharacter: int
                replaceSeparatorsInPayload: bool
                segmentTerminator: int
                segmentTerminatorSuffix: 'string'
                targetNamespace: 'string'
              }
            ]
          }
          receiverBusinessIdentity: {
            qualifier: 'string'
            value: 'string'
          }
          senderBusinessIdentity: {
            qualifier: 'string'
            value: 'string'
          }
        }
      }
    }
    guestIdentity: {
      qualifier: 'string'
      value: 'string'
    }
    guestPartner: 'string'
    hostIdentity: {
      qualifier: 'string'
      value: 'string'
    }
    hostPartner: 'string'
    metadata: any(...)
  }
  tags: {
    {customized property}: 'string'
  }
}
resource symbolicname 'Microsoft.Logic/integrationAccounts/agreements@2019-05-01' = {
  parent: resourceSymbolicName
  location: 'string'
  name: 'string'
  properties: {
    agreementType: 'string'
    content: {
      aS2: {
        receiveAgreement: {
          protocolSettings: {
            acknowledgementConnectionSettings: {
              ignoreCertificateNameMismatch: bool
              keepHttpConnectionAlive: bool
              supportHttpStatusCodeContinue: bool
              unfoldHttpHeaders: bool
            }
            envelopeSettings: {
              autogenerateFileName: bool
              fileNameTemplate: 'string'
              messageContentType: 'string'
              suspendMessageOnFileNameGenerationError: bool
              transmitFileNameInMimeHeader: bool
            }
            errorSettings: {
              resendIfMDNNotReceived: bool
              suspendDuplicateMessage: bool
            }
            mdnSettings: {
              dispositionNotificationTo: 'string'
              mdnText: 'string'
              micHashingAlgorithm: 'string'
              needMDN: bool
              receiptDeliveryUrl: 'string'
              sendInboundMDNToMessageBox: bool
              sendMDNAsynchronously: bool
              signMDN: bool
              signOutboundMDNIfOptional: bool
            }
            messageConnectionSettings: {
              ignoreCertificateNameMismatch: bool
              keepHttpConnectionAlive: bool
              supportHttpStatusCodeContinue: bool
              unfoldHttpHeaders: bool
            }
            securitySettings: {
              enableNRRForInboundDecodedMessages: bool
              enableNRRForInboundEncodedMessages: bool
              enableNRRForInboundMDN: bool
              enableNRRForOutboundDecodedMessages: bool
              enableNRRForOutboundEncodedMessages: bool
              enableNRRForOutboundMDN: bool
              encryptionCertificateName: 'string'
              overrideGroupSigningCertificate: bool
              sha2AlgorithmFormat: 'string'
              signingCertificateName: 'string'
            }
            validationSettings: {
              checkCertificateRevocationListOnReceive: bool
              checkCertificateRevocationListOnSend: bool
              checkDuplicateMessage: bool
              compressMessage: bool
              encryptionAlgorithm: 'string'
              encryptMessage: bool
              interchangeDuplicatesValidityDays: int
              overrideMessageProperties: bool
              signingAlgorithm: 'string'
              signMessage: bool
            }
          }
          receiverBusinessIdentity: {
            qualifier: 'string'
            value: 'string'
          }
          senderBusinessIdentity: {
            qualifier: 'string'
            value: 'string'
          }
        }
        sendAgreement: {
          protocolSettings: {
            acknowledgementConnectionSettings: {
              ignoreCertificateNameMismatch: bool
              keepHttpConnectionAlive: bool
              supportHttpStatusCodeContinue: bool
              unfoldHttpHeaders: bool
            }
            envelopeSettings: {
              autogenerateFileName: bool
              fileNameTemplate: 'string'
              messageContentType: 'string'
              suspendMessageOnFileNameGenerationError: bool
              transmitFileNameInMimeHeader: bool
            }
            errorSettings: {
              resendIfMDNNotReceived: bool
              suspendDuplicateMessage: bool
            }
            mdnSettings: {
              dispositionNotificationTo: 'string'
              mdnText: 'string'
              micHashingAlgorithm: 'string'
              needMDN: bool
              receiptDeliveryUrl: 'string'
              sendInboundMDNToMessageBox: bool
              sendMDNAsynchronously: bool
              signMDN: bool
              signOutboundMDNIfOptional: bool
            }
            messageConnectionSettings: {
              ignoreCertificateNameMismatch: bool
              keepHttpConnectionAlive: bool
              supportHttpStatusCodeContinue: bool
              unfoldHttpHeaders: bool
            }
            securitySettings: {
              enableNRRForInboundDecodedMessages: bool
              enableNRRForInboundEncodedMessages: bool
              enableNRRForInboundMDN: bool
              enableNRRForOutboundDecodedMessages: bool
              enableNRRForOutboundEncodedMessages: bool
              enableNRRForOutboundMDN: bool
              encryptionCertificateName: 'string'
              overrideGroupSigningCertificate: bool
              sha2AlgorithmFormat: 'string'
              signingCertificateName: 'string'
            }
            validationSettings: {
              checkCertificateRevocationListOnReceive: bool
              checkCertificateRevocationListOnSend: bool
              checkDuplicateMessage: bool
              compressMessage: bool
              encryptionAlgorithm: 'string'
              encryptMessage: bool
              interchangeDuplicatesValidityDays: int
              overrideMessageProperties: bool
              signingAlgorithm: 'string'
              signMessage: bool
            }
          }
          receiverBusinessIdentity: {
            qualifier: 'string'
            value: 'string'
          }
          senderBusinessIdentity: {
            qualifier: 'string'
            value: 'string'
          }
        }
      }
      edifact: {
        receiveAgreement: {
          protocolSettings: {
            acknowledgementSettings: {
              acknowledgementControlNumberLowerBound: int
              acknowledgementControlNumberPrefix: 'string'
              acknowledgementControlNumberSuffix: 'string'
              acknowledgementControlNumberUpperBound: int
              batchFunctionalAcknowledgements: bool
              batchTechnicalAcknowledgements: bool
              needFunctionalAcknowledgement: bool
              needLoopForValidMessages: bool
              needTechnicalAcknowledgement: bool
              rolloverAcknowledgementControlNumber: bool
              sendSynchronousAcknowledgement: bool
            }
            edifactDelimiterOverrides: [
              {
                componentSeparator: int
                dataElementSeparator: int
                decimalPointIndicator: 'string'
                messageAssociationAssignedCode: 'string'
                messageId: 'string'
                messageRelease: 'string'
                messageVersion: 'string'
                releaseIndicator: int
                repetitionSeparator: int
                segmentTerminator: int
                segmentTerminatorSuffix: 'string'
                targetNamespace: 'string'
              }
            ]
            envelopeOverrides: [
              {
                applicationPassword: 'string'
                associationAssignedCode: 'string'
                controllingAgencyCode: 'string'
                functionalGroupId: 'string'
                groupHeaderMessageRelease: 'string'
                groupHeaderMessageVersion: 'string'
                messageAssociationAssignedCode: 'string'
                messageId: 'string'
                messageRelease: 'string'
                messageVersion: 'string'
                receiverApplicationId: 'string'
                receiverApplicationQualifier: 'string'
                senderApplicationId: 'string'
                senderApplicationQualifier: 'string'
                targetNamespace: 'string'
              }
            ]
            envelopeSettings: {
              applicationReferenceId: 'string'
              applyDelimiterStringAdvice: bool
              communicationAgreementId: 'string'
              createGroupingSegments: bool
              enableDefaultGroupHeaders: bool
              functionalGroupId: 'string'
              groupApplicationPassword: 'string'
              groupApplicationReceiverId: 'string'
              groupApplicationReceiverQualifier: 'string'
              groupApplicationSenderId: 'string'
              groupApplicationSenderQualifier: 'string'
              groupAssociationAssignedCode: 'string'
              groupControllingAgencyCode: 'string'
              groupControlNumberLowerBound: int
              groupControlNumberPrefix: 'string'
              groupControlNumberSuffix: 'string'
              groupControlNumberUpperBound: int
              groupMessageRelease: 'string'
              groupMessageVersion: 'string'
              interchangeControlNumberLowerBound: int
              interchangeControlNumberPrefix: 'string'
              interchangeControlNumberSuffix: 'string'
              interchangeControlNumberUpperBound: int
              isTestInterchange: bool
              overwriteExistingTransactionSetControlNumber: bool
              processingPriorityCode: 'string'
              receiverInternalIdentification: 'string'
              receiverInternalSubIdentification: 'string'
              receiverReverseRoutingAddress: 'string'
              recipientReferencePasswordQualifier: 'string'
              recipientReferencePasswordValue: 'string'
              rolloverGroupControlNumber: bool
              rolloverInterchangeControlNumber: bool
              rolloverTransactionSetControlNumber: bool
              senderInternalIdentification: 'string'
              senderInternalSubIdentification: 'string'
              senderReverseRoutingAddress: 'string'
              transactionSetControlNumberLowerBound: int
              transactionSetControlNumberPrefix: 'string'
              transactionSetControlNumberSuffix: 'string'
              transactionSetControlNumberUpperBound: int
            }
            framingSettings: {
              characterEncoding: 'string'
              characterSet: 'string'
              componentSeparator: int
              dataElementSeparator: int
              decimalPointIndicator: 'string'
              protocolVersion: int
              releaseIndicator: int
              repetitionSeparator: int
              segmentTerminator: int
              segmentTerminatorSuffix: 'string'
              serviceCodeListDirectoryVersion: 'string'
            }
            messageFilter: {
              messageFilterType: 'string'
            }
            messageFilterList: [
              {
                messageId: 'string'
              }
            ]
            processingSettings: {
              createEmptyXmlTagsForTrailingSeparators: bool
              maskSecurityInfo: bool
              preserveInterchange: bool
              suspendInterchangeOnError: bool
              useDotAsDecimalSeparator: bool
            }
            schemaReferences: [
              {
                associationAssignedCode: 'string'
                messageId: 'string'
                messageRelease: 'string'
                messageVersion: 'string'
                schemaName: 'string'
                senderApplicationId: 'string'
                senderApplicationQualifier: 'string'
              }
            ]
            validationOverrides: [
              {
                allowLeadingAndTrailingSpacesAndZeroes: bool
                enforceCharacterSet: bool
                messageId: 'string'
                trailingSeparatorPolicy: 'string'
                trimLeadingAndTrailingSpacesAndZeroes: bool
                validateEDITypes: bool
                validateXSDTypes: bool
              }
            ]
            validationSettings: {
              allowLeadingAndTrailingSpacesAndZeroes: bool
              checkDuplicateGroupControlNumber: bool
              checkDuplicateInterchangeControlNumber: bool
              checkDuplicateTransactionSetControlNumber: bool
              interchangeControlNumberValidityDays: int
              trailingSeparatorPolicy: 'string'
              trimLeadingAndTrailingSpacesAndZeroes: bool
              validateCharacterSet: bool
              validateEDITypes: bool
              validateXSDTypes: bool
            }
          }
          receiverBusinessIdentity: {
            qualifier: 'string'
            value: 'string'
          }
          senderBusinessIdentity: {
            qualifier: 'string'
            value: 'string'
          }
        }
        sendAgreement: {
          protocolSettings: {
            acknowledgementSettings: {
              acknowledgementControlNumberLowerBound: int
              acknowledgementControlNumberPrefix: 'string'
              acknowledgementControlNumberSuffix: 'string'
              acknowledgementControlNumberUpperBound: int
              batchFunctionalAcknowledgements: bool
              batchTechnicalAcknowledgements: bool
              needFunctionalAcknowledgement: bool
              needLoopForValidMessages: bool
              needTechnicalAcknowledgement: bool
              rolloverAcknowledgementControlNumber: bool
              sendSynchronousAcknowledgement: bool
            }
            edifactDelimiterOverrides: [
              {
                componentSeparator: int
                dataElementSeparator: int
                decimalPointIndicator: 'string'
                messageAssociationAssignedCode: 'string'
                messageId: 'string'
                messageRelease: 'string'
                messageVersion: 'string'
                releaseIndicator: int
                repetitionSeparator: int
                segmentTerminator: int
                segmentTerminatorSuffix: 'string'
                targetNamespace: 'string'
              }
            ]
            envelopeOverrides: [
              {
                applicationPassword: 'string'
                associationAssignedCode: 'string'
                controllingAgencyCode: 'string'
                functionalGroupId: 'string'
                groupHeaderMessageRelease: 'string'
                groupHeaderMessageVersion: 'string'
                messageAssociationAssignedCode: 'string'
                messageId: 'string'
                messageRelease: 'string'
                messageVersion: 'string'
                receiverApplicationId: 'string'
                receiverApplicationQualifier: 'string'
                senderApplicationId: 'string'
                senderApplicationQualifier: 'string'
                targetNamespace: 'string'
              }
            ]
            envelopeSettings: {
              applicationReferenceId: 'string'
              applyDelimiterStringAdvice: bool
              communicationAgreementId: 'string'
              createGroupingSegments: bool
              enableDefaultGroupHeaders: bool
              functionalGroupId: 'string'
              groupApplicationPassword: 'string'
              groupApplicationReceiverId: 'string'
              groupApplicationReceiverQualifier: 'string'
              groupApplicationSenderId: 'string'
              groupApplicationSenderQualifier: 'string'
              groupAssociationAssignedCode: 'string'
              groupControllingAgencyCode: 'string'
              groupControlNumberLowerBound: int
              groupControlNumberPrefix: 'string'
              groupControlNumberSuffix: 'string'
              groupControlNumberUpperBound: int
              groupMessageRelease: 'string'
              groupMessageVersion: 'string'
              interchangeControlNumberLowerBound: int
              interchangeControlNumberPrefix: 'string'
              interchangeControlNumberSuffix: 'string'
              interchangeControlNumberUpperBound: int
              isTestInterchange: bool
              overwriteExistingTransactionSetControlNumber: bool
              processingPriorityCode: 'string'
              receiverInternalIdentification: 'string'
              receiverInternalSubIdentification: 'string'
              receiverReverseRoutingAddress: 'string'
              recipientReferencePasswordQualifier: 'string'
              recipientReferencePasswordValue: 'string'
              rolloverGroupControlNumber: bool
              rolloverInterchangeControlNumber: bool
              rolloverTransactionSetControlNumber: bool
              senderInternalIdentification: 'string'
              senderInternalSubIdentification: 'string'
              senderReverseRoutingAddress: 'string'
              transactionSetControlNumberLowerBound: int
              transactionSetControlNumberPrefix: 'string'
              transactionSetControlNumberSuffix: 'string'
              transactionSetControlNumberUpperBound: int
            }
            framingSettings: {
              characterEncoding: 'string'
              characterSet: 'string'
              componentSeparator: int
              dataElementSeparator: int
              decimalPointIndicator: 'string'
              protocolVersion: int
              releaseIndicator: int
              repetitionSeparator: int
              segmentTerminator: int
              segmentTerminatorSuffix: 'string'
              serviceCodeListDirectoryVersion: 'string'
            }
            messageFilter: {
              messageFilterType: 'string'
            }
            messageFilterList: [
              {
                messageId: 'string'
              }
            ]
            processingSettings: {
              createEmptyXmlTagsForTrailingSeparators: bool
              maskSecurityInfo: bool
              preserveInterchange: bool
              suspendInterchangeOnError: bool
              useDotAsDecimalSeparator: bool
            }
            schemaReferences: [
              {
                associationAssignedCode: 'string'
                messageId: 'string'
                messageRelease: 'string'
                messageVersion: 'string'
                schemaName: 'string'
                senderApplicationId: 'string'
                senderApplicationQualifier: 'string'
              }
            ]
            validationOverrides: [
              {
                allowLeadingAndTrailingSpacesAndZeroes: bool
                enforceCharacterSet: bool
                messageId: 'string'
                trailingSeparatorPolicy: 'string'
                trimLeadingAndTrailingSpacesAndZeroes: bool
                validateEDITypes: bool
                validateXSDTypes: bool
              }
            ]
            validationSettings: {
              allowLeadingAndTrailingSpacesAndZeroes: bool
              checkDuplicateGroupControlNumber: bool
              checkDuplicateInterchangeControlNumber: bool
              checkDuplicateTransactionSetControlNumber: bool
              interchangeControlNumberValidityDays: int
              trailingSeparatorPolicy: 'string'
              trimLeadingAndTrailingSpacesAndZeroes: bool
              validateCharacterSet: bool
              validateEDITypes: bool
              validateXSDTypes: bool
            }
          }
          receiverBusinessIdentity: {
            qualifier: 'string'
            value: 'string'
          }
          senderBusinessIdentity: {
            qualifier: 'string'
            value: 'string'
          }
        }
      }
      x12: {
        receiveAgreement: {
          protocolSettings: {
            acknowledgementSettings: {
              acknowledgementControlNumberLowerBound: int
              acknowledgementControlNumberPrefix: 'string'
              acknowledgementControlNumberSuffix: 'string'
              acknowledgementControlNumberUpperBound: int
              batchFunctionalAcknowledgements: bool
              batchImplementationAcknowledgements: bool
              batchTechnicalAcknowledgements: bool
              functionalAcknowledgementVersion: 'string'
              implementationAcknowledgementVersion: 'string'
              needFunctionalAcknowledgement: bool
              needImplementationAcknowledgement: bool
              needLoopForValidMessages: bool
              needTechnicalAcknowledgement: bool
              rolloverAcknowledgementControlNumber: bool
              sendSynchronousAcknowledgement: bool
            }
            envelopeOverrides: [
              {
                dateFormat: 'string'
                functionalIdentifierCode: 'string'
                headerVersion: 'string'
                messageId: 'string'
                protocolVersion: 'string'
                receiverApplicationId: 'string'
                responsibleAgencyCode: 'string'
                senderApplicationId: 'string'
                targetNamespace: 'string'
                timeFormat: 'string'
              }
            ]
            envelopeSettings: {
              controlStandardsId: int
              controlVersionNumber: 'string'
              enableDefaultGroupHeaders: bool
              functionalGroupId: 'string'
              groupControlNumberLowerBound: int
              groupControlNumberUpperBound: int
              groupHeaderAgencyCode: 'string'
              groupHeaderDateFormat: 'string'
              groupHeaderTimeFormat: 'string'
              groupHeaderVersion: 'string'
              interchangeControlNumberLowerBound: int
              interchangeControlNumberUpperBound: int
              overwriteExistingTransactionSetControlNumber: bool
              receiverApplicationId: 'string'
              rolloverGroupControlNumber: bool
              rolloverInterchangeControlNumber: bool
              rolloverTransactionSetControlNumber: bool
              senderApplicationId: 'string'
              transactionSetControlNumberLowerBound: int
              transactionSetControlNumberPrefix: 'string'
              transactionSetControlNumberSuffix: 'string'
              transactionSetControlNumberUpperBound: int
              usageIndicator: 'string'
              useControlStandardsIdAsRepetitionCharacter: bool
            }
            framingSettings: {
              characterSet: 'string'
              componentSeparator: int
              dataElementSeparator: int
              replaceCharacter: int
              replaceSeparatorsInPayload: bool
              segmentTerminator: int
              segmentTerminatorSuffix: 'string'
            }
            messageFilter: {
              messageFilterType: 'string'
            }
            messageFilterList: [
              {
                messageId: 'string'
              }
            ]
            processingSettings: {
              convertImpliedDecimal: bool
              createEmptyXmlTagsForTrailingSeparators: bool
              maskSecurityInfo: bool
              preserveInterchange: bool
              suspendInterchangeOnError: bool
              useDotAsDecimalSeparator: bool
            }
            schemaReferences: [
              {
                messageId: 'string'
                schemaName: 'string'
                schemaVersion: 'string'
                senderApplicationId: 'string'
              }
            ]
            securitySettings: {
              authorizationQualifier: 'string'
              authorizationValue: 'string'
              passwordValue: 'string'
              securityQualifier: 'string'
            }
            validationOverrides: [
              {
                allowLeadingAndTrailingSpacesAndZeroes: bool
                messageId: 'string'
                trailingSeparatorPolicy: 'string'
                trimLeadingAndTrailingSpacesAndZeroes: bool
                validateCharacterSet: bool
                validateEDITypes: bool
                validateXSDTypes: bool
              }
            ]
            validationSettings: {
              allowLeadingAndTrailingSpacesAndZeroes: bool
              checkDuplicateGroupControlNumber: bool
              checkDuplicateInterchangeControlNumber: bool
              checkDuplicateTransactionSetControlNumber: bool
              interchangeControlNumberValidityDays: int
              trailingSeparatorPolicy: 'string'
              trimLeadingAndTrailingSpacesAndZeroes: bool
              validateCharacterSet: bool
              validateEDITypes: bool
              validateXSDTypes: bool
            }
            x12DelimiterOverrides: [
              {
                componentSeparator: int
                dataElementSeparator: int
                messageId: 'string'
                protocolVersion: 'string'
                replaceCharacter: int
                replaceSeparatorsInPayload: bool
                segmentTerminator: int
                segmentTerminatorSuffix: 'string'
                targetNamespace: 'string'
              }
            ]
          }
          receiverBusinessIdentity: {
            qualifier: 'string'
            value: 'string'
          }
          senderBusinessIdentity: {
            qualifier: 'string'
            value: 'string'
          }
        }
        sendAgreement: {
          protocolSettings: {
            acknowledgementSettings: {
              acknowledgementControlNumberLowerBound: int
              acknowledgementControlNumberPrefix: 'string'
              acknowledgementControlNumberSuffix: 'string'
              acknowledgementControlNumberUpperBound: int
              batchFunctionalAcknowledgements: bool
              batchImplementationAcknowledgements: bool
              batchTechnicalAcknowledgements: bool
              functionalAcknowledgementVersion: 'string'
              implementationAcknowledgementVersion: 'string'
              needFunctionalAcknowledgement: bool
              needImplementationAcknowledgement: bool
              needLoopForValidMessages: bool
              needTechnicalAcknowledgement: bool
              rolloverAcknowledgementControlNumber: bool
              sendSynchronousAcknowledgement: bool
            }
            envelopeOverrides: [
              {
                dateFormat: 'string'
                functionalIdentifierCode: 'string'
                headerVersion: 'string'
                messageId: 'string'
                protocolVersion: 'string'
                receiverApplicationId: 'string'
                responsibleAgencyCode: 'string'
                senderApplicationId: 'string'
                targetNamespace: 'string'
                timeFormat: 'string'
              }
            ]
            envelopeSettings: {
              controlStandardsId: int
              controlVersionNumber: 'string'
              enableDefaultGroupHeaders: bool
              functionalGroupId: 'string'
              groupControlNumberLowerBound: int
              groupControlNumberUpperBound: int
              groupHeaderAgencyCode: 'string'
              groupHeaderDateFormat: 'string'
              groupHeaderTimeFormat: 'string'
              groupHeaderVersion: 'string'
              interchangeControlNumberLowerBound: int
              interchangeControlNumberUpperBound: int
              overwriteExistingTransactionSetControlNumber: bool
              receiverApplicationId: 'string'
              rolloverGroupControlNumber: bool
              rolloverInterchangeControlNumber: bool
              rolloverTransactionSetControlNumber: bool
              senderApplicationId: 'string'
              transactionSetControlNumberLowerBound: int
              transactionSetControlNumberPrefix: 'string'
              transactionSetControlNumberSuffix: 'string'
              transactionSetControlNumberUpperBound: int
              usageIndicator: 'string'
              useControlStandardsIdAsRepetitionCharacter: bool
            }
            framingSettings: {
              characterSet: 'string'
              componentSeparator: int
              dataElementSeparator: int
              replaceCharacter: int
              replaceSeparatorsInPayload: bool
              segmentTerminator: int
              segmentTerminatorSuffix: 'string'
            }
            messageFilter: {
              messageFilterType: 'string'
            }
            messageFilterList: [
              {
                messageId: 'string'
              }
            ]
            processingSettings: {
              convertImpliedDecimal: bool
              createEmptyXmlTagsForTrailingSeparators: bool
              maskSecurityInfo: bool
              preserveInterchange: bool
              suspendInterchangeOnError: bool
              useDotAsDecimalSeparator: bool
            }
            schemaReferences: [
              {
                messageId: 'string'
                schemaName: 'string'
                schemaVersion: 'string'
                senderApplicationId: 'string'
              }
            ]
            securitySettings: {
              authorizationQualifier: 'string'
              authorizationValue: 'string'
              passwordValue: 'string'
              securityQualifier: 'string'
            }
            validationOverrides: [
              {
                allowLeadingAndTrailingSpacesAndZeroes: bool
                messageId: 'string'
                trailingSeparatorPolicy: 'string'
                trimLeadingAndTrailingSpacesAndZeroes: bool
                validateCharacterSet: bool
                validateEDITypes: bool
                validateXSDTypes: bool
              }
            ]
            validationSettings: {
              allowLeadingAndTrailingSpacesAndZeroes: bool
              checkDuplicateGroupControlNumber: bool
              checkDuplicateInterchangeControlNumber: bool
              checkDuplicateTransactionSetControlNumber: bool
              interchangeControlNumberValidityDays: int
              trailingSeparatorPolicy: 'string'
              trimLeadingAndTrailingSpacesAndZeroes: bool
              validateCharacterSet: bool
              validateEDITypes: bool
              validateXSDTypes: bool
            }
            x12DelimiterOverrides: [
              {
                componentSeparator: int
                dataElementSeparator: int
                messageId: 'string'
                protocolVersion: 'string'
                replaceCharacter: int
                replaceSeparatorsInPayload: bool
                segmentTerminator: int
                segmentTerminatorSuffix: 'string'
                targetNamespace: 'string'
              }
            ]
          }
          receiverBusinessIdentity: {
            qualifier: 'string'
            value: 'string'
          }
          senderBusinessIdentity: {
            qualifier: 'string'
            value: 'string'
          }
        }
      }
    }
    guestIdentity: {
      qualifier: 'string'
      value: 'string'
    }
    guestPartner: 'string'
    hostIdentity: {
      qualifier: 'string'
      value: 'string'
    }
    hostPartner: 'string'
    metadata: any(...)
  }
  tags: {
    {customized property}: 'string'
  }
}
Property Values
AgreementContent
AS2AcknowledgementConnectionSettings
AS2AgreementContent
AS2EnvelopeSettings
AS2ErrorSettings
AS2MdnSettings
AS2MessageConnectionSettings
AS2OneWayAgreement
AS2ProtocolSettings
AS2SecuritySettings
AS2ValidationSettings
BusinessIdentity
EdifactAcknowledgementSettings
EdifactAgreementContent
EdifactDelimiterOverride
EdifactEnvelopeOverride
EdifactEnvelopeSettings
EdifactFramingSettings
EdifactMessageFilter
EdifactMessageIdentifier
EdifactOneWayAgreement
EdifactProcessingSettings
EdifactProtocolSettings
EdifactSchemaReference
EdifactValidationOverride
EdifactValidationSettings
IntegrationAccountAgreementProperties
Microsoft.Logic/integrationAccounts/agreements
ResourceTags
X12AcknowledgementSettings
X12AgreementContent
X12DelimiterOverrides
X12EnvelopeOverride
X12EnvelopeSettings
X12FramingSettings
X12MessageFilter
X12MessageIdentifier
X12OneWayAgreement
X12ProcessingSettings
X12ProtocolSettings
X12SchemaReference
X12SecuritySettings
X12ValidationOverride
X12ValidationSettings
Usage Examples
Azure Quickstart Samples
The followingAzure Quickstart templatescontain Bicep samples for deploying this resource type.
ARM template resource definition
The integrationAccounts/agreements resource type can be deployed with operations that target:
Resource groups- Seeresource group deployment commands
For a list of changed properties in each API version, seechange log.
Resource format
To create a Microsoft.Logic/integrationAccounts/agreements resource, add the following JSON to your template.
{
  "type": "Microsoft.Logic/integrationAccounts/agreements",
  "apiVersion": "2019-05-01",
  "name": "string",
  "location": "string",
  "properties": {
    "agreementType": "string",
    "content": {
      "aS2": {
        "receiveAgreement": {
          "protocolSettings": {
            "acknowledgementConnectionSettings": {
              "ignoreCertificateNameMismatch": "bool",
              "keepHttpConnectionAlive": "bool",
              "supportHttpStatusCodeContinue": "bool",
              "unfoldHttpHeaders": "bool"
            },
            "envelopeSettings": {
              "autogenerateFileName": "bool",
              "fileNameTemplate": "string",
              "messageContentType": "string",
              "suspendMessageOnFileNameGenerationError": "bool",
              "transmitFileNameInMimeHeader": "bool"
            },
            "errorSettings": {
              "resendIfMDNNotReceived": "bool",
              "suspendDuplicateMessage": "bool"
            },
            "mdnSettings": {
              "dispositionNotificationTo": "string",
              "mdnText": "string",
              "micHashingAlgorithm": "string",
              "needMDN": "bool",
              "receiptDeliveryUrl": "string",
              "sendInboundMDNToMessageBox": "bool",
              "sendMDNAsynchronously": "bool",
              "signMDN": "bool",
              "signOutboundMDNIfOptional": "bool"
            },
            "messageConnectionSettings": {
              "ignoreCertificateNameMismatch": "bool",
              "keepHttpConnectionAlive": "bool",
              "supportHttpStatusCodeContinue": "bool",
              "unfoldHttpHeaders": "bool"
            },
            "securitySettings": {
              "enableNRRForInboundDecodedMessages": "bool",
              "enableNRRForInboundEncodedMessages": "bool",
              "enableNRRForInboundMDN": "bool",
              "enableNRRForOutboundDecodedMessages": "bool",
              "enableNRRForOutboundEncodedMessages": "bool",
              "enableNRRForOutboundMDN": "bool",
              "encryptionCertificateName": "string",
              "overrideGroupSigningCertificate": "bool",
              "sha2AlgorithmFormat": "string",
              "signingCertificateName": "string"
            },
            "validationSettings": {
              "checkCertificateRevocationListOnReceive": "bool",
              "checkCertificateRevocationListOnSend": "bool",
              "checkDuplicateMessage": "bool",
              "compressMessage": "bool",
              "encryptionAlgorithm": "string",
              "encryptMessage": "bool",
              "interchangeDuplicatesValidityDays": "int",
              "overrideMessageProperties": "bool",
              "signingAlgorithm": "string",
              "signMessage": "bool"
            }
          },
          "receiverBusinessIdentity": {
            "qualifier": "string",
            "value": "string"
          },
          "senderBusinessIdentity": {
            "qualifier": "string",
            "value": "string"
          }
        },
        "sendAgreement": {
          "protocolSettings": {
            "acknowledgementConnectionSettings": {
              "ignoreCertificateNameMismatch": "bool",
              "keepHttpConnectionAlive": "bool",
              "supportHttpStatusCodeContinue": "bool",
              "unfoldHttpHeaders": "bool"
            },
            "envelopeSettings": {
              "autogenerateFileName": "bool",
              "fileNameTemplate": "string",
              "messageContentType": "string",
              "suspendMessageOnFileNameGenerationError": "bool",
              "transmitFileNameInMimeHeader": "bool"
            },
            "errorSettings": {
              "resendIfMDNNotReceived": "bool",
              "suspendDuplicateMessage": "bool"
            },
            "mdnSettings": {
              "dispositionNotificationTo": "string",
              "mdnText": "string",
              "micHashingAlgorithm": "string",
              "needMDN": "bool",
              "receiptDeliveryUrl": "string",
              "sendInboundMDNToMessageBox": "bool",
              "sendMDNAsynchronously": "bool",
              "signMDN": "bool",
              "signOutboundMDNIfOptional": "bool"
            },
            "messageConnectionSettings": {
              "ignoreCertificateNameMismatch": "bool",
              "keepHttpConnectionAlive": "bool",
              "supportHttpStatusCodeContinue": "bool",
              "unfoldHttpHeaders": "bool"
            },
            "securitySettings": {
              "enableNRRForInboundDecodedMessages": "bool",
              "enableNRRForInboundEncodedMessages": "bool",
              "enableNRRForInboundMDN": "bool",
              "enableNRRForOutboundDecodedMessages": "bool",
              "enableNRRForOutboundEncodedMessages": "bool",
              "enableNRRForOutboundMDN": "bool",
              "encryptionCertificateName": "string",
              "overrideGroupSigningCertificate": "bool",
              "sha2AlgorithmFormat": "string",
              "signingCertificateName": "string"
            },
            "validationSettings": {
              "checkCertificateRevocationListOnReceive": "bool",
              "checkCertificateRevocationListOnSend": "bool",
              "checkDuplicateMessage": "bool",
              "compressMessage": "bool",
              "encryptionAlgorithm": "string",
              "encryptMessage": "bool",
              "interchangeDuplicatesValidityDays": "int",
              "overrideMessageProperties": "bool",
              "signingAlgorithm": "string",
              "signMessage": "bool"
            }
          },
          "receiverBusinessIdentity": {
            "qualifier": "string",
            "value": "string"
          },
          "senderBusinessIdentity": {
            "qualifier": "string",
            "value": "string"
          }
        }
      },
      "edifact": {
        "receiveAgreement": {
          "protocolSettings": {
            "acknowledgementSettings": {
              "acknowledgementControlNumberLowerBound": "int",
              "acknowledgementControlNumberPrefix": "string",
              "acknowledgementControlNumberSuffix": "string",
              "acknowledgementControlNumberUpperBound": "int",
              "batchFunctionalAcknowledgements": "bool",
              "batchTechnicalAcknowledgements": "bool",
              "needFunctionalAcknowledgement": "bool",
              "needLoopForValidMessages": "bool",
              "needTechnicalAcknowledgement": "bool",
              "rolloverAcknowledgementControlNumber": "bool",
              "sendSynchronousAcknowledgement": "bool"
            },
            "edifactDelimiterOverrides": [
              {
                "componentSeparator": "int",
                "dataElementSeparator": "int",
                "decimalPointIndicator": "string",
                "messageAssociationAssignedCode": "string",
                "messageId": "string",
                "messageRelease": "string",
                "messageVersion": "string",
                "releaseIndicator": "int",
                "repetitionSeparator": "int",
                "segmentTerminator": "int",
                "segmentTerminatorSuffix": "string",
                "targetNamespace": "string"
              }
            ],
            "envelopeOverrides": [
              {
                "applicationPassword": "string",
                "associationAssignedCode": "string",
                "controllingAgencyCode": "string",
                "functionalGroupId": "string",
                "groupHeaderMessageRelease": "string",
                "groupHeaderMessageVersion": "string",
                "messageAssociationAssignedCode": "string",
                "messageId": "string",
                "messageRelease": "string",
                "messageVersion": "string",
                "receiverApplicationId": "string",
                "receiverApplicationQualifier": "string",
                "senderApplicationId": "string",
                "senderApplicationQualifier": "string",
                "targetNamespace": "string"
              }
            ],
            "envelopeSettings": {
              "applicationReferenceId": "string",
              "applyDelimiterStringAdvice": "bool",
              "communicationAgreementId": "string",
              "createGroupingSegments": "bool",
              "enableDefaultGroupHeaders": "bool",
              "functionalGroupId": "string",
              "groupApplicationPassword": "string",
              "groupApplicationReceiverId": "string",
              "groupApplicationReceiverQualifier": "string",
              "groupApplicationSenderId": "string",
              "groupApplicationSenderQualifier": "string",
              "groupAssociationAssignedCode": "string",
              "groupControllingAgencyCode": "string",
              "groupControlNumberLowerBound": "int",
              "groupControlNumberPrefix": "string",
              "groupControlNumberSuffix": "string",
              "groupControlNumberUpperBound": "int",
              "groupMessageRelease": "string",
              "groupMessageVersion": "string",
              "interchangeControlNumberLowerBound": "int",
              "interchangeControlNumberPrefix": "string",
              "interchangeControlNumberSuffix": "string",
              "interchangeControlNumberUpperBound": "int",
              "isTestInterchange": "bool",
              "overwriteExistingTransactionSetControlNumber": "bool",
              "processingPriorityCode": "string",
              "receiverInternalIdentification": "string",
              "receiverInternalSubIdentification": "string",
              "receiverReverseRoutingAddress": "string",
              "recipientReferencePasswordQualifier": "string",
              "recipientReferencePasswordValue": "string",
              "rolloverGroupControlNumber": "bool",
              "rolloverInterchangeControlNumber": "bool",
              "rolloverTransactionSetControlNumber": "bool",
              "senderInternalIdentification": "string",
              "senderInternalSubIdentification": "string",
              "senderReverseRoutingAddress": "string",
              "transactionSetControlNumberLowerBound": "int",
              "transactionSetControlNumberPrefix": "string",
              "transactionSetControlNumberSuffix": "string",
              "transactionSetControlNumberUpperBound": "int"
            },
            "framingSettings": {
              "characterEncoding": "string",
              "characterSet": "string",
              "componentSeparator": "int",
              "dataElementSeparator": "int",
              "decimalPointIndicator": "string",
              "protocolVersion": "int",
              "releaseIndicator": "int",
              "repetitionSeparator": "int",
              "segmentTerminator": "int",
              "segmentTerminatorSuffix": "string",
              "serviceCodeListDirectoryVersion": "string"
            },
            "messageFilter": {
              "messageFilterType": "string"
            },
            "messageFilterList": [
              {
                "messageId": "string"
              }
            ],
            "processingSettings": {
              "createEmptyXmlTagsForTrailingSeparators": "bool",
              "maskSecurityInfo": "bool",
              "preserveInterchange": "bool",
              "suspendInterchangeOnError": "bool",
              "useDotAsDecimalSeparator": "bool"
            },
            "schemaReferences": [
              {
                "associationAssignedCode": "string",
                "messageId": "string",
                "messageRelease": "string",
                "messageVersion": "string",
                "schemaName": "string",
                "senderApplicationId": "string",
                "senderApplicationQualifier": "string"
              }
            ],
            "validationOverrides": [
              {
                "allowLeadingAndTrailingSpacesAndZeroes": "bool",
                "enforceCharacterSet": "bool",
                "messageId": "string",
                "trailingSeparatorPolicy": "string",
                "trimLeadingAndTrailingSpacesAndZeroes": "bool",
                "validateEDITypes": "bool",
                "validateXSDTypes": "bool"
              }
            ],
            "validationSettings": {
              "allowLeadingAndTrailingSpacesAndZeroes": "bool",
              "checkDuplicateGroupControlNumber": "bool",
              "checkDuplicateInterchangeControlNumber": "bool",
              "checkDuplicateTransactionSetControlNumber": "bool",
              "interchangeControlNumberValidityDays": "int",
              "trailingSeparatorPolicy": "string",
              "trimLeadingAndTrailingSpacesAndZeroes": "bool",
              "validateCharacterSet": "bool",
              "validateEDITypes": "bool",
              "validateXSDTypes": "bool"
            }
          },
          "receiverBusinessIdentity": {
            "qualifier": "string",
            "value": "string"
          },
          "senderBusinessIdentity": {
            "qualifier": "string",
            "value": "string"
          }
        },
        "sendAgreement": {
          "protocolSettings": {
            "acknowledgementSettings": {
              "acknowledgementControlNumberLowerBound": "int",
              "acknowledgementControlNumberPrefix": "string",
              "acknowledgementControlNumberSuffix": "string",
              "acknowledgementControlNumberUpperBound": "int",
              "batchFunctionalAcknowledgements": "bool",
              "batchTechnicalAcknowledgements": "bool",
              "needFunctionalAcknowledgement": "bool",
              "needLoopForValidMessages": "bool",
              "needTechnicalAcknowledgement": "bool",
              "rolloverAcknowledgementControlNumber": "bool",
              "sendSynchronousAcknowledgement": "bool"
            },
            "edifactDelimiterOverrides": [
              {
                "componentSeparator": "int",
                "dataElementSeparator": "int",
                "decimalPointIndicator": "string",
                "messageAssociationAssignedCode": "string",
                "messageId": "string",
                "messageRelease": "string",
                "messageVersion": "string",
                "releaseIndicator": "int",
                "repetitionSeparator": "int",
                "segmentTerminator": "int",
                "segmentTerminatorSuffix": "string",
                "targetNamespace": "string"
              }
            ],
            "envelopeOverrides": [
              {
                "applicationPassword": "string",
                "associationAssignedCode": "string",
                "controllingAgencyCode": "string",
                "functionalGroupId": "string",
                "groupHeaderMessageRelease": "string",
                "groupHeaderMessageVersion": "string",
                "messageAssociationAssignedCode": "string",
                "messageId": "string",
                "messageRelease": "string",
                "messageVersion": "string",
                "receiverApplicationId": "string",
                "receiverApplicationQualifier": "string",
                "senderApplicationId": "string",
                "senderApplicationQualifier": "string",
                "targetNamespace": "string"
              }
            ],
            "envelopeSettings": {
              "applicationReferenceId": "string",
              "applyDelimiterStringAdvice": "bool",
              "communicationAgreementId": "string",
              "createGroupingSegments": "bool",
              "enableDefaultGroupHeaders": "bool",
              "functionalGroupId": "string",
              "groupApplicationPassword": "string",
              "groupApplicationReceiverId": "string",
              "groupApplicationReceiverQualifier": "string",
              "groupApplicationSenderId": "string",
              "groupApplicationSenderQualifier": "string",
              "groupAssociationAssignedCode": "string",
              "groupControllingAgencyCode": "string",
              "groupControlNumberLowerBound": "int",
              "groupControlNumberPrefix": "string",
              "groupControlNumberSuffix": "string",
              "groupControlNumberUpperBound": "int",
              "groupMessageRelease": "string",
              "groupMessageVersion": "string",
              "interchangeControlNumberLowerBound": "int",
              "interchangeControlNumberPrefix": "string",
              "interchangeControlNumberSuffix": "string",
              "interchangeControlNumberUpperBound": "int",
              "isTestInterchange": "bool",
              "overwriteExistingTransactionSetControlNumber": "bool",
              "processingPriorityCode": "string",
              "receiverInternalIdentification": "string",
              "receiverInternalSubIdentification": "string",
              "receiverReverseRoutingAddress": "string",
              "recipientReferencePasswordQualifier": "string",
              "recipientReferencePasswordValue": "string",
              "rolloverGroupControlNumber": "bool",
              "rolloverInterchangeControlNumber": "bool",
              "rolloverTransactionSetControlNumber": "bool",
              "senderInternalIdentification": "string",
              "senderInternalSubIdentification": "string",
              "senderReverseRoutingAddress": "string",
              "transactionSetControlNumberLowerBound": "int",
              "transactionSetControlNumberPrefix": "string",
              "transactionSetControlNumberSuffix": "string",
              "transactionSetControlNumberUpperBound": "int"
            },
            "framingSettings": {
              "characterEncoding": "string",
              "characterSet": "string",
              "componentSeparator": "int",
              "dataElementSeparator": "int",
              "decimalPointIndicator": "string",
              "protocolVersion": "int",
              "releaseIndicator": "int",
              "repetitionSeparator": "int",
              "segmentTerminator": "int",
              "segmentTerminatorSuffix": "string",
              "serviceCodeListDirectoryVersion": "string"
            },
            "messageFilter": {
              "messageFilterType": "string"
            },
            "messageFilterList": [
              {
                "messageId": "string"
              }
            ],
            "processingSettings": {
              "createEmptyXmlTagsForTrailingSeparators": "bool",
              "maskSecurityInfo": "bool",
              "preserveInterchange": "bool",
              "suspendInterchangeOnError": "bool",
              "useDotAsDecimalSeparator": "bool"
            },
            "schemaReferences": [
              {
                "associationAssignedCode": "string",
                "messageId": "string",
                "messageRelease": "string",
                "messageVersion": "string",
                "schemaName": "string",
                "senderApplicationId": "string",
                "senderApplicationQualifier": "string"
              }
            ],
            "validationOverrides": [
              {
                "allowLeadingAndTrailingSpacesAndZeroes": "bool",
                "enforceCharacterSet": "bool",
                "messageId": "string",
                "trailingSeparatorPolicy": "string",
                "trimLeadingAndTrailingSpacesAndZeroes": "bool",
                "validateEDITypes": "bool",
                "validateXSDTypes": "bool"
              }
            ],
            "validationSettings": {
              "allowLeadingAndTrailingSpacesAndZeroes": "bool",
              "checkDuplicateGroupControlNumber": "bool",
              "checkDuplicateInterchangeControlNumber": "bool",
              "checkDuplicateTransactionSetControlNumber": "bool",
              "interchangeControlNumberValidityDays": "int",
              "trailingSeparatorPolicy": "string",
              "trimLeadingAndTrailingSpacesAndZeroes": "bool",
              "validateCharacterSet": "bool",
              "validateEDITypes": "bool",
              "validateXSDTypes": "bool"
            }
          },
          "receiverBusinessIdentity": {
            "qualifier": "string",
            "value": "string"
          },
          "senderBusinessIdentity": {
            "qualifier": "string",
            "value": "string"
          }
        }
      },
      "x12": {
        "receiveAgreement": {
          "protocolSettings": {
            "acknowledgementSettings": {
              "acknowledgementControlNumberLowerBound": "int",
              "acknowledgementControlNumberPrefix": "string",
              "acknowledgementControlNumberSuffix": "string",
              "acknowledgementControlNumberUpperBound": "int",
              "batchFunctionalAcknowledgements": "bool",
              "batchImplementationAcknowledgements": "bool",
              "batchTechnicalAcknowledgements": "bool",
              "functionalAcknowledgementVersion": "string",
              "implementationAcknowledgementVersion": "string",
              "needFunctionalAcknowledgement": "bool",
              "needImplementationAcknowledgement": "bool",
              "needLoopForValidMessages": "bool",
              "needTechnicalAcknowledgement": "bool",
              "rolloverAcknowledgementControlNumber": "bool",
              "sendSynchronousAcknowledgement": "bool"
            },
            "envelopeOverrides": [
              {
                "dateFormat": "string",
                "functionalIdentifierCode": "string",
                "headerVersion": "string",
                "messageId": "string",
                "protocolVersion": "string",
                "receiverApplicationId": "string",
                "responsibleAgencyCode": "string",
                "senderApplicationId": "string",
                "targetNamespace": "string",
                "timeFormat": "string"
              }
            ],
            "envelopeSettings": {
              "controlStandardsId": "int",
              "controlVersionNumber": "string",
              "enableDefaultGroupHeaders": "bool",
              "functionalGroupId": "string",
              "groupControlNumberLowerBound": "int",
              "groupControlNumberUpperBound": "int",
              "groupHeaderAgencyCode": "string",
              "groupHeaderDateFormat": "string",
              "groupHeaderTimeFormat": "string",
              "groupHeaderVersion": "string",
              "interchangeControlNumberLowerBound": "int",
              "interchangeControlNumberUpperBound": "int",
              "overwriteExistingTransactionSetControlNumber": "bool",
              "receiverApplicationId": "string",
              "rolloverGroupControlNumber": "bool",
              "rolloverInterchangeControlNumber": "bool",
              "rolloverTransactionSetControlNumber": "bool",
              "senderApplicationId": "string",
              "transactionSetControlNumberLowerBound": "int",
              "transactionSetControlNumberPrefix": "string",
              "transactionSetControlNumberSuffix": "string",
              "transactionSetControlNumberUpperBound": "int",
              "usageIndicator": "string",
              "useControlStandardsIdAsRepetitionCharacter": "bool"
            },
            "framingSettings": {
              "characterSet": "string",
              "componentSeparator": "int",
              "dataElementSeparator": "int",
              "replaceCharacter": "int",
              "replaceSeparatorsInPayload": "bool",
              "segmentTerminator": "int",
              "segmentTerminatorSuffix": "string"
            },
            "messageFilter": {
              "messageFilterType": "string"
            },
            "messageFilterList": [
              {
                "messageId": "string"
              }
            ],
            "processingSettings": {
              "convertImpliedDecimal": "bool",
              "createEmptyXmlTagsForTrailingSeparators": "bool",
              "maskSecurityInfo": "bool",
              "preserveInterchange": "bool",
              "suspendInterchangeOnError": "bool",
              "useDotAsDecimalSeparator": "bool"
            },
            "schemaReferences": [
              {
                "messageId": "string",
                "schemaName": "string",
                "schemaVersion": "string",
                "senderApplicationId": "string"
              }
            ],
            "securitySettings": {
              "authorizationQualifier": "string",
              "authorizationValue": "string",
              "passwordValue": "string",
              "securityQualifier": "string"
            },
            "validationOverrides": [
              {
                "allowLeadingAndTrailingSpacesAndZeroes": "bool",
                "messageId": "string",
                "trailingSeparatorPolicy": "string",
                "trimLeadingAndTrailingSpacesAndZeroes": "bool",
                "validateCharacterSet": "bool",
                "validateEDITypes": "bool",
                "validateXSDTypes": "bool"
              }
            ],
            "validationSettings": {
              "allowLeadingAndTrailingSpacesAndZeroes": "bool",
              "checkDuplicateGroupControlNumber": "bool",
              "checkDuplicateInterchangeControlNumber": "bool",
              "checkDuplicateTransactionSetControlNumber": "bool",
              "interchangeControlNumberValidityDays": "int",
              "trailingSeparatorPolicy": "string",
              "trimLeadingAndTrailingSpacesAndZeroes": "bool",
              "validateCharacterSet": "bool",
              "validateEDITypes": "bool",
              "validateXSDTypes": "bool"
            },
            "x12DelimiterOverrides": [
              {
                "componentSeparator": "int",
                "dataElementSeparator": "int",
                "messageId": "string",
                "protocolVersion": "string",
                "replaceCharacter": "int",
                "replaceSeparatorsInPayload": "bool",
                "segmentTerminator": "int",
                "segmentTerminatorSuffix": "string",
                "targetNamespace": "string"
              }
            ]
          },
          "receiverBusinessIdentity": {
            "qualifier": "string",
            "value": "string"
          },
          "senderBusinessIdentity": {
            "qualifier": "string",
            "value": "string"
          }
        },
        "sendAgreement": {
          "protocolSettings": {
            "acknowledgementSettings": {
              "acknowledgementControlNumberLowerBound": "int",
              "acknowledgementControlNumberPrefix": "string",
              "acknowledgementControlNumberSuffix": "string",
              "acknowledgementControlNumberUpperBound": "int",
              "batchFunctionalAcknowledgements": "bool",
              "batchImplementationAcknowledgements": "bool",
              "batchTechnicalAcknowledgements": "bool",
              "functionalAcknowledgementVersion": "string",
              "implementationAcknowledgementVersion": "string",
              "needFunctionalAcknowledgement": "bool",
              "needImplementationAcknowledgement": "bool",
              "needLoopForValidMessages": "bool",
              "needTechnicalAcknowledgement": "bool",
              "rolloverAcknowledgementControlNumber": "bool",
              "sendSynchronousAcknowledgement": "bool"
            },
            "envelopeOverrides": [
              {
                "dateFormat": "string",
                "functionalIdentifierCode": "string",
                "headerVersion": "string",
                "messageId": "string",
                "protocolVersion": "string",
                "receiverApplicationId": "string",
                "responsibleAgencyCode": "string",
                "senderApplicationId": "string",
                "targetNamespace": "string",
                "timeFormat": "string"
              }
            ],
            "envelopeSettings": {
              "controlStandardsId": "int",
              "controlVersionNumber": "string",
              "enableDefaultGroupHeaders": "bool",
              "functionalGroupId": "string",
              "groupControlNumberLowerBound": "int",
              "groupControlNumberUpperBound": "int",
              "groupHeaderAgencyCode": "string",
              "groupHeaderDateFormat": "string",
              "groupHeaderTimeFormat": "string",
              "groupHeaderVersion": "string",
              "interchangeControlNumberLowerBound": "int",
              "interchangeControlNumberUpperBound": "int",
              "overwriteExistingTransactionSetControlNumber": "bool",
              "receiverApplicationId": "string",
              "rolloverGroupControlNumber": "bool",
              "rolloverInterchangeControlNumber": "bool",
              "rolloverTransactionSetControlNumber": "bool",
              "senderApplicationId": "string",
              "transactionSetControlNumberLowerBound": "int",
              "transactionSetControlNumberPrefix": "string",
              "transactionSetControlNumberSuffix": "string",
              "transactionSetControlNumberUpperBound": "int",
              "usageIndicator": "string",
              "useControlStandardsIdAsRepetitionCharacter": "bool"
            },
            "framingSettings": {
              "characterSet": "string",
              "componentSeparator": "int",
              "dataElementSeparator": "int",
              "replaceCharacter": "int",
              "replaceSeparatorsInPayload": "bool",
              "segmentTerminator": "int",
              "segmentTerminatorSuffix": "string"
            },
            "messageFilter": {
              "messageFilterType": "string"
            },
            "messageFilterList": [
              {
                "messageId": "string"
              }
            ],
            "processingSettings": {
              "convertImpliedDecimal": "bool",
              "createEmptyXmlTagsForTrailingSeparators": "bool",
              "maskSecurityInfo": "bool",
              "preserveInterchange": "bool",
              "suspendInterchangeOnError": "bool",
              "useDotAsDecimalSeparator": "bool"
            },
            "schemaReferences": [
              {
                "messageId": "string",
                "schemaName": "string",
                "schemaVersion": "string",
                "senderApplicationId": "string"
              }
            ],
            "securitySettings": {
              "authorizationQualifier": "string",
              "authorizationValue": "string",
              "passwordValue": "string",
              "securityQualifier": "string"
            },
            "validationOverrides": [
              {
                "allowLeadingAndTrailingSpacesAndZeroes": "bool",
                "messageId": "string",
                "trailingSeparatorPolicy": "string",
                "trimLeadingAndTrailingSpacesAndZeroes": "bool",
                "validateCharacterSet": "bool",
                "validateEDITypes": "bool",
                "validateXSDTypes": "bool"
              }
            ],
            "validationSettings": {
              "allowLeadingAndTrailingSpacesAndZeroes": "bool",
              "checkDuplicateGroupControlNumber": "bool",
              "checkDuplicateInterchangeControlNumber": "bool",
              "checkDuplicateTransactionSetControlNumber": "bool",
              "interchangeControlNumberValidityDays": "int",
              "trailingSeparatorPolicy": "string",
              "trimLeadingAndTrailingSpacesAndZeroes": "bool",
              "validateCharacterSet": "bool",
              "validateEDITypes": "bool",
              "validateXSDTypes": "bool"
            },
            "x12DelimiterOverrides": [
              {
                "componentSeparator": "int",
                "dataElementSeparator": "int",
                "messageId": "string",
                "protocolVersion": "string",
                "replaceCharacter": "int",
                "replaceSeparatorsInPayload": "bool",
                "segmentTerminator": "int",
                "segmentTerminatorSuffix": "string",
                "targetNamespace": "string"
              }
            ]
          },
          "receiverBusinessIdentity": {
            "qualifier": "string",
            "value": "string"
          },
          "senderBusinessIdentity": {
            "qualifier": "string",
            "value": "string"
          }
        }
      }
    },
    "guestIdentity": {
      "qualifier": "string",
      "value": "string"
    },
    "guestPartner": "string",
    "hostIdentity": {
      "qualifier": "string",
      "value": "string"
    },
    "hostPartner": "string",
    "metadata": {}
  },
  "tags": {
    "{customized property}": "string"
  }
}
{
  "type": "Microsoft.Logic/integrationAccounts/agreements",
  "apiVersion": "2019-05-01",
  "name": "string",
  "location": "string",
  "properties": {
    "agreementType": "string",
    "content": {
      "aS2": {
        "receiveAgreement": {
          "protocolSettings": {
            "acknowledgementConnectionSettings": {
              "ignoreCertificateNameMismatch": "bool",
              "keepHttpConnectionAlive": "bool",
              "supportHttpStatusCodeContinue": "bool",
              "unfoldHttpHeaders": "bool"
            },
            "envelopeSettings": {
              "autogenerateFileName": "bool",
              "fileNameTemplate": "string",
              "messageContentType": "string",
              "suspendMessageOnFileNameGenerationError": "bool",
              "transmitFileNameInMimeHeader": "bool"
            },
            "errorSettings": {
              "resendIfMDNNotReceived": "bool",
              "suspendDuplicateMessage": "bool"
            },
            "mdnSettings": {
              "dispositionNotificationTo": "string",
              "mdnText": "string",
              "micHashingAlgorithm": "string",
              "needMDN": "bool",
              "receiptDeliveryUrl": "string",
              "sendInboundMDNToMessageBox": "bool",
              "sendMDNAsynchronously": "bool",
              "signMDN": "bool",
              "signOutboundMDNIfOptional": "bool"
            },
            "messageConnectionSettings": {
              "ignoreCertificateNameMismatch": "bool",
              "keepHttpConnectionAlive": "bool",
              "supportHttpStatusCodeContinue": "bool",
              "unfoldHttpHeaders": "bool"
            },
            "securitySettings": {
              "enableNRRForInboundDecodedMessages": "bool",
              "enableNRRForInboundEncodedMessages": "bool",
              "enableNRRForInboundMDN": "bool",
              "enableNRRForOutboundDecodedMessages": "bool",
              "enableNRRForOutboundEncodedMessages": "bool",
              "enableNRRForOutboundMDN": "bool",
              "encryptionCertificateName": "string",
              "overrideGroupSigningCertificate": "bool",
              "sha2AlgorithmFormat": "string",
              "signingCertificateName": "string"
            },
            "validationSettings": {
              "checkCertificateRevocationListOnReceive": "bool",
              "checkCertificateRevocationListOnSend": "bool",
              "checkDuplicateMessage": "bool",
              "compressMessage": "bool",
              "encryptionAlgorithm": "string",
              "encryptMessage": "bool",
              "interchangeDuplicatesValidityDays": "int",
              "overrideMessageProperties": "bool",
              "signingAlgorithm": "string",
              "signMessage": "bool"
            }
          },
          "receiverBusinessIdentity": {
            "qualifier": "string",
            "value": "string"
          },
          "senderBusinessIdentity": {
            "qualifier": "string",
            "value": "string"
          }
        },
        "sendAgreement": {
          "protocolSettings": {
            "acknowledgementConnectionSettings": {
              "ignoreCertificateNameMismatch": "bool",
              "keepHttpConnectionAlive": "bool",
              "supportHttpStatusCodeContinue": "bool",
              "unfoldHttpHeaders": "bool"
            },
            "envelopeSettings": {
              "autogenerateFileName": "bool",
              "fileNameTemplate": "string",
              "messageContentType": "string",
              "suspendMessageOnFileNameGenerationError": "bool",
              "transmitFileNameInMimeHeader": "bool"
            },
            "errorSettings": {
              "resendIfMDNNotReceived": "bool",
              "suspendDuplicateMessage": "bool"
            },
            "mdnSettings": {
              "dispositionNotificationTo": "string",
              "mdnText": "string",
              "micHashingAlgorithm": "string",
              "needMDN": "bool",
              "receiptDeliveryUrl": "string",
              "sendInboundMDNToMessageBox": "bool",
              "sendMDNAsynchronously": "bool",
              "signMDN": "bool",
              "signOutboundMDNIfOptional": "bool"
            },
            "messageConnectionSettings": {
              "ignoreCertificateNameMismatch": "bool",
              "keepHttpConnectionAlive": "bool",
              "supportHttpStatusCodeContinue": "bool",
              "unfoldHttpHeaders": "bool"
            },
            "securitySettings": {
              "enableNRRForInboundDecodedMessages": "bool",
              "enableNRRForInboundEncodedMessages": "bool",
              "enableNRRForInboundMDN": "bool",
              "enableNRRForOutboundDecodedMessages": "bool",
              "enableNRRForOutboundEncodedMessages": "bool",
              "enableNRRForOutboundMDN": "bool",
              "encryptionCertificateName": "string",
              "overrideGroupSigningCertificate": "bool",
              "sha2AlgorithmFormat": "string",
              "signingCertificateName": "string"
            },
            "validationSettings": {
              "checkCertificateRevocationListOnReceive": "bool",
              "checkCertificateRevocationListOnSend": "bool",
              "checkDuplicateMessage": "bool",
              "compressMessage": "bool",
              "encryptionAlgorithm": "string",
              "encryptMessage": "bool",
              "interchangeDuplicatesValidityDays": "int",
              "overrideMessageProperties": "bool",
              "signingAlgorithm": "string",
              "signMessage": "bool"
            }
          },
          "receiverBusinessIdentity": {
            "qualifier": "string",
            "value": "string"
          },
          "senderBusinessIdentity": {
            "qualifier": "string",
            "value": "string"
          }
        }
      },
      "edifact": {
        "receiveAgreement": {
          "protocolSettings": {
            "acknowledgementSettings": {
              "acknowledgementControlNumberLowerBound": "int",
              "acknowledgementControlNumberPrefix": "string",
              "acknowledgementControlNumberSuffix": "string",
              "acknowledgementControlNumberUpperBound": "int",
              "batchFunctionalAcknowledgements": "bool",
              "batchTechnicalAcknowledgements": "bool",
              "needFunctionalAcknowledgement": "bool",
              "needLoopForValidMessages": "bool",
              "needTechnicalAcknowledgement": "bool",
              "rolloverAcknowledgementControlNumber": "bool",
              "sendSynchronousAcknowledgement": "bool"
            },
            "edifactDelimiterOverrides": [
              {
                "componentSeparator": "int",
                "dataElementSeparator": "int",
                "decimalPointIndicator": "string",
                "messageAssociationAssignedCode": "string",
                "messageId": "string",
                "messageRelease": "string",
                "messageVersion": "string",
                "releaseIndicator": "int",
                "repetitionSeparator": "int",
                "segmentTerminator": "int",
                "segmentTerminatorSuffix": "string",
                "targetNamespace": "string"
              }
            ],
            "envelopeOverrides": [
              {
                "applicationPassword": "string",
                "associationAssignedCode": "string",
                "controllingAgencyCode": "string",
                "functionalGroupId": "string",
                "groupHeaderMessageRelease": "string",
                "groupHeaderMessageVersion": "string",
                "messageAssociationAssignedCode": "string",
                "messageId": "string",
                "messageRelease": "string",
                "messageVersion": "string",
                "receiverApplicationId": "string",
                "receiverApplicationQualifier": "string",
                "senderApplicationId": "string",
                "senderApplicationQualifier": "string",
                "targetNamespace": "string"
              }
            ],
            "envelopeSettings": {
              "applicationReferenceId": "string",
              "applyDelimiterStringAdvice": "bool",
              "communicationAgreementId": "string",
              "createGroupingSegments": "bool",
              "enableDefaultGroupHeaders": "bool",
              "functionalGroupId": "string",
              "groupApplicationPassword": "string",
              "groupApplicationReceiverId": "string",
              "groupApplicationReceiverQualifier": "string",
              "groupApplicationSenderId": "string",
              "groupApplicationSenderQualifier": "string",
              "groupAssociationAssignedCode": "string",
              "groupControllingAgencyCode": "string",
              "groupControlNumberLowerBound": "int",
              "groupControlNumberPrefix": "string",
              "groupControlNumberSuffix": "string",
              "groupControlNumberUpperBound": "int",
              "groupMessageRelease": "string",
              "groupMessageVersion": "string",
              "interchangeControlNumberLowerBound": "int",
              "interchangeControlNumberPrefix": "string",
              "interchangeControlNumberSuffix": "string",
              "interchangeControlNumberUpperBound": "int",
              "isTestInterchange": "bool",
              "overwriteExistingTransactionSetControlNumber": "bool",
              "processingPriorityCode": "string",
              "receiverInternalIdentification": "string",
              "receiverInternalSubIdentification": "string",
              "receiverReverseRoutingAddress": "string",
              "recipientReferencePasswordQualifier": "string",
              "recipientReferencePasswordValue": "string",
              "rolloverGroupControlNumber": "bool",
              "rolloverInterchangeControlNumber": "bool",
              "rolloverTransactionSetControlNumber": "bool",
              "senderInternalIdentification": "string",
              "senderInternalSubIdentification": "string",
              "senderReverseRoutingAddress": "string",
              "transactionSetControlNumberLowerBound": "int",
              "transactionSetControlNumberPrefix": "string",
              "transactionSetControlNumberSuffix": "string",
              "transactionSetControlNumberUpperBound": "int"
            },
            "framingSettings": {
              "characterEncoding": "string",
              "characterSet": "string",
              "componentSeparator": "int",
              "dataElementSeparator": "int",
              "decimalPointIndicator": "string",
              "protocolVersion": "int",
              "releaseIndicator": "int",
              "repetitionSeparator": "int",
              "segmentTerminator": "int",
              "segmentTerminatorSuffix": "string",
              "serviceCodeListDirectoryVersion": "string"
            },
            "messageFilter": {
              "messageFilterType": "string"
            },
            "messageFilterList": [
              {
                "messageId": "string"
              }
            ],
            "processingSettings": {
              "createEmptyXmlTagsForTrailingSeparators": "bool",
              "maskSecurityInfo": "bool",
              "preserveInterchange": "bool",
              "suspendInterchangeOnError": "bool",
              "useDotAsDecimalSeparator": "bool"
            },
            "schemaReferences": [
              {
                "associationAssignedCode": "string",
                "messageId": "string",
                "messageRelease": "string",
                "messageVersion": "string",
                "schemaName": "string",
                "senderApplicationId": "string",
                "senderApplicationQualifier": "string"
              }
            ],
            "validationOverrides": [
              {
                "allowLeadingAndTrailingSpacesAndZeroes": "bool",
                "enforceCharacterSet": "bool",
                "messageId": "string",
                "trailingSeparatorPolicy": "string",
                "trimLeadingAndTrailingSpacesAndZeroes": "bool",
                "validateEDITypes": "bool",
                "validateXSDTypes": "bool"
              }
            ],
            "validationSettings": {
              "allowLeadingAndTrailingSpacesAndZeroes": "bool",
              "checkDuplicateGroupControlNumber": "bool",
              "checkDuplicateInterchangeControlNumber": "bool",
              "checkDuplicateTransactionSetControlNumber": "bool",
              "interchangeControlNumberValidityDays": "int",
              "trailingSeparatorPolicy": "string",
              "trimLeadingAndTrailingSpacesAndZeroes": "bool",
              "validateCharacterSet": "bool",
              "validateEDITypes": "bool",
              "validateXSDTypes": "bool"
            }
          },
          "receiverBusinessIdentity": {
            "qualifier": "string",
            "value": "string"
          },
          "senderBusinessIdentity": {
            "qualifier": "string",
            "value": "string"
          }
        },
        "sendAgreement": {
          "protocolSettings": {
            "acknowledgementSettings": {
              "acknowledgementControlNumberLowerBound": "int",
              "acknowledgementControlNumberPrefix": "string",
              "acknowledgementControlNumberSuffix": "string",
              "acknowledgementControlNumberUpperBound": "int",
              "batchFunctionalAcknowledgements": "bool",
              "batchTechnicalAcknowledgements": "bool",
              "needFunctionalAcknowledgement": "bool",
              "needLoopForValidMessages": "bool",
              "needTechnicalAcknowledgement": "bool",
              "rolloverAcknowledgementControlNumber": "bool",
              "sendSynchronousAcknowledgement": "bool"
            },
            "edifactDelimiterOverrides": [
              {
                "componentSeparator": "int",
                "dataElementSeparator": "int",
                "decimalPointIndicator": "string",
                "messageAssociationAssignedCode": "string",
                "messageId": "string",
                "messageRelease": "string",
                "messageVersion": "string",
                "releaseIndicator": "int",
                "repetitionSeparator": "int",
                "segmentTerminator": "int",
                "segmentTerminatorSuffix": "string",
                "targetNamespace": "string"
              }
            ],
            "envelopeOverrides": [
              {
                "applicationPassword": "string",
                "associationAssignedCode": "string",
                "controllingAgencyCode": "string",
                "functionalGroupId": "string",
                "groupHeaderMessageRelease": "string",
                "groupHeaderMessageVersion": "string",
                "messageAssociationAssignedCode": "string",
                "messageId": "string",
                "messageRelease": "string",
                "messageVersion": "string",
                "receiverApplicationId": "string",
                "receiverApplicationQualifier": "string",
                "senderApplicationId": "string",
                "senderApplicationQualifier": "string",
                "targetNamespace": "string"
              }
            ],
            "envelopeSettings": {
              "applicationReferenceId": "string",
              "applyDelimiterStringAdvice": "bool",
              "communicationAgreementId": "string",
              "createGroupingSegments": "bool",
              "enableDefaultGroupHeaders": "bool",
              "functionalGroupId": "string",
              "groupApplicationPassword": "string",
              "groupApplicationReceiverId": "string",
              "groupApplicationReceiverQualifier": "string",
              "groupApplicationSenderId": "string",
              "groupApplicationSenderQualifier": "string",
              "groupAssociationAssignedCode": "string",
              "groupControllingAgencyCode": "string",
              "groupControlNumberLowerBound": "int",
              "groupControlNumberPrefix": "string",
              "groupControlNumberSuffix": "string",
              "groupControlNumberUpperBound": "int",
              "groupMessageRelease": "string",
              "groupMessageVersion": "string",
              "interchangeControlNumberLowerBound": "int",
              "interchangeControlNumberPrefix": "string",
              "interchangeControlNumberSuffix": "string",
              "interchangeControlNumberUpperBound": "int",
              "isTestInterchange": "bool",
              "overwriteExistingTransactionSetControlNumber": "bool",
              "processingPriorityCode": "string",
              "receiverInternalIdentification": "string",
              "receiverInternalSubIdentification": "string",
              "receiverReverseRoutingAddress": "string",
              "recipientReferencePasswordQualifier": "string",
              "recipientReferencePasswordValue": "string",
              "rolloverGroupControlNumber": "bool",
              "rolloverInterchangeControlNumber": "bool",
              "rolloverTransactionSetControlNumber": "bool",
              "senderInternalIdentification": "string",
              "senderInternalSubIdentification": "string",
              "senderReverseRoutingAddress": "string",
              "transactionSetControlNumberLowerBound": "int",
              "transactionSetControlNumberPrefix": "string",
              "transactionSetControlNumberSuffix": "string",
              "transactionSetControlNumberUpperBound": "int"
            },
            "framingSettings": {
              "characterEncoding": "string",
              "characterSet": "string",
              "componentSeparator": "int",
              "dataElementSeparator": "int",
              "decimalPointIndicator": "string",
              "protocolVersion": "int",
              "releaseIndicator": "int",
              "repetitionSeparator": "int",
              "segmentTerminator": "int",
              "segmentTerminatorSuffix": "string",
              "serviceCodeListDirectoryVersion": "string"
            },
            "messageFilter": {
              "messageFilterType": "string"
            },
            "messageFilterList": [
              {
                "messageId": "string"
              }
            ],
            "processingSettings": {
              "createEmptyXmlTagsForTrailingSeparators": "bool",
              "maskSecurityInfo": "bool",
              "preserveInterchange": "bool",
              "suspendInterchangeOnError": "bool",
              "useDotAsDecimalSeparator": "bool"
            },
            "schemaReferences": [
              {
                "associationAssignedCode": "string",
                "messageId": "string",
                "messageRelease": "string",
                "messageVersion": "string",
                "schemaName": "string",
                "senderApplicationId": "string",
                "senderApplicationQualifier": "string"
              }
            ],
            "validationOverrides": [
              {
                "allowLeadingAndTrailingSpacesAndZeroes": "bool",
                "enforceCharacterSet": "bool",
                "messageId": "string",
                "trailingSeparatorPolicy": "string",
                "trimLeadingAndTrailingSpacesAndZeroes": "bool",
                "validateEDITypes": "bool",
                "validateXSDTypes": "bool"
              }
            ],
            "validationSettings": {
              "allowLeadingAndTrailingSpacesAndZeroes": "bool",
              "checkDuplicateGroupControlNumber": "bool",
              "checkDuplicateInterchangeControlNumber": "bool",
              "checkDuplicateTransactionSetControlNumber": "bool",
              "interchangeControlNumberValidityDays": "int",
              "trailingSeparatorPolicy": "string",
              "trimLeadingAndTrailingSpacesAndZeroes": "bool",
              "validateCharacterSet": "bool",
              "validateEDITypes": "bool",
              "validateXSDTypes": "bool"
            }
          },
          "receiverBusinessIdentity": {
            "qualifier": "string",
            "value": "string"
          },
          "senderBusinessIdentity": {
            "qualifier": "string",
            "value": "string"
          }
        }
      },
      "x12": {
        "receiveAgreement": {
          "protocolSettings": {
            "acknowledgementSettings": {
              "acknowledgementControlNumberLowerBound": "int",
              "acknowledgementControlNumberPrefix": "string",
              "acknowledgementControlNumberSuffix": "string",
              "acknowledgementControlNumberUpperBound": "int",
              "batchFunctionalAcknowledgements": "bool",
              "batchImplementationAcknowledgements": "bool",
              "batchTechnicalAcknowledgements": "bool",
              "functionalAcknowledgementVersion": "string",
              "implementationAcknowledgementVersion": "string",
              "needFunctionalAcknowledgement": "bool",
              "needImplementationAcknowledgement": "bool",
              "needLoopForValidMessages": "bool",
              "needTechnicalAcknowledgement": "bool",
              "rolloverAcknowledgementControlNumber": "bool",
              "sendSynchronousAcknowledgement": "bool"
            },
            "envelopeOverrides": [
              {
                "dateFormat": "string",
                "functionalIdentifierCode": "string",
                "headerVersion": "string",
                "messageId": "string",
                "protocolVersion": "string",
                "receiverApplicationId": "string",
                "responsibleAgencyCode": "string",
                "senderApplicationId": "string",
                "targetNamespace": "string",
                "timeFormat": "string"
              }
            ],
            "envelopeSettings": {
              "controlStandardsId": "int",
              "controlVersionNumber": "string",
              "enableDefaultGroupHeaders": "bool",
              "functionalGroupId": "string",
              "groupControlNumberLowerBound": "int",
              "groupControlNumberUpperBound": "int",
              "groupHeaderAgencyCode": "string",
              "groupHeaderDateFormat": "string",
              "groupHeaderTimeFormat": "string",
              "groupHeaderVersion": "string",
              "interchangeControlNumberLowerBound": "int",
              "interchangeControlNumberUpperBound": "int",
              "overwriteExistingTransactionSetControlNumber": "bool",
              "receiverApplicationId": "string",
              "rolloverGroupControlNumber": "bool",
              "rolloverInterchangeControlNumber": "bool",
              "rolloverTransactionSetControlNumber": "bool",
              "senderApplicationId": "string",
              "transactionSetControlNumberLowerBound": "int",
              "transactionSetControlNumberPrefix": "string",
              "transactionSetControlNumberSuffix": "string",
              "transactionSetControlNumberUpperBound": "int",
              "usageIndicator": "string",
              "useControlStandardsIdAsRepetitionCharacter": "bool"
            },
            "framingSettings": {
              "characterSet": "string",
              "componentSeparator": "int",
              "dataElementSeparator": "int",
              "replaceCharacter": "int",
              "replaceSeparatorsInPayload": "bool",
              "segmentTerminator": "int",
              "segmentTerminatorSuffix": "string"
            },
            "messageFilter": {
              "messageFilterType": "string"
            },
            "messageFilterList": [
              {
                "messageId": "string"
              }
            ],
            "processingSettings": {
              "convertImpliedDecimal": "bool",
              "createEmptyXmlTagsForTrailingSeparators": "bool",
              "maskSecurityInfo": "bool",
              "preserveInterchange": "bool",
              "suspendInterchangeOnError": "bool",
              "useDotAsDecimalSeparator": "bool"
            },
            "schemaReferences": [
              {
                "messageId": "string",
                "schemaName": "string",
                "schemaVersion": "string",
                "senderApplicationId": "string"
              }
            ],
            "securitySettings": {
              "authorizationQualifier": "string",
              "authorizationValue": "string",
              "passwordValue": "string",
              "securityQualifier": "string"
            },
            "validationOverrides": [
              {
                "allowLeadingAndTrailingSpacesAndZeroes": "bool",
                "messageId": "string",
                "trailingSeparatorPolicy": "string",
                "trimLeadingAndTrailingSpacesAndZeroes": "bool",
                "validateCharacterSet": "bool",
                "validateEDITypes": "bool",
                "validateXSDTypes": "bool"
              }
            ],
            "validationSettings": {
              "allowLeadingAndTrailingSpacesAndZeroes": "bool",
              "checkDuplicateGroupControlNumber": "bool",
              "checkDuplicateInterchangeControlNumber": "bool",
              "checkDuplicateTransactionSetControlNumber": "bool",
              "interchangeControlNumberValidityDays": "int",
              "trailingSeparatorPolicy": "string",
              "trimLeadingAndTrailingSpacesAndZeroes": "bool",
              "validateCharacterSet": "bool",
              "validateEDITypes": "bool",
              "validateXSDTypes": "bool"
            },
            "x12DelimiterOverrides": [
              {
                "componentSeparator": "int",
                "dataElementSeparator": "int",
                "messageId": "string",
                "protocolVersion": "string",
                "replaceCharacter": "int",
                "replaceSeparatorsInPayload": "bool",
                "segmentTerminator": "int",
                "segmentTerminatorSuffix": "string",
                "targetNamespace": "string"
              }
            ]
          },
          "receiverBusinessIdentity": {
            "qualifier": "string",
            "value": "string"
          },
          "senderBusinessIdentity": {
            "qualifier": "string",
            "value": "string"
          }
        },
        "sendAgreement": {
          "protocolSettings": {
            "acknowledgementSettings": {
              "acknowledgementControlNumberLowerBound": "int",
              "acknowledgementControlNumberPrefix": "string",
              "acknowledgementControlNumberSuffix": "string",
              "acknowledgementControlNumberUpperBound": "int",
              "batchFunctionalAcknowledgements": "bool",
              "batchImplementationAcknowledgements": "bool",
              "batchTechnicalAcknowledgements": "bool",
              "functionalAcknowledgementVersion": "string",
              "implementationAcknowledgementVersion": "string",
              "needFunctionalAcknowledgement": "bool",
              "needImplementationAcknowledgement": "bool",
              "needLoopForValidMessages": "bool",
              "needTechnicalAcknowledgement": "bool",
              "rolloverAcknowledgementControlNumber": "bool",
              "sendSynchronousAcknowledgement": "bool"
            },
            "envelopeOverrides": [
              {
                "dateFormat": "string",
                "functionalIdentifierCode": "string",
                "headerVersion": "string",
                "messageId": "string",
                "protocolVersion": "string",
                "receiverApplicationId": "string",
                "responsibleAgencyCode": "string",
                "senderApplicationId": "string",
                "targetNamespace": "string",
                "timeFormat": "string"
              }
            ],
            "envelopeSettings": {
              "controlStandardsId": "int",
              "controlVersionNumber": "string",
              "enableDefaultGroupHeaders": "bool",
              "functionalGroupId": "string",
              "groupControlNumberLowerBound": "int",
              "groupControlNumberUpperBound": "int",
              "groupHeaderAgencyCode": "string",
              "groupHeaderDateFormat": "string",
              "groupHeaderTimeFormat": "string",
              "groupHeaderVersion": "string",
              "interchangeControlNumberLowerBound": "int",
              "interchangeControlNumberUpperBound": "int",
              "overwriteExistingTransactionSetControlNumber": "bool",
              "receiverApplicationId": "string",
              "rolloverGroupControlNumber": "bool",
              "rolloverInterchangeControlNumber": "bool",
              "rolloverTransactionSetControlNumber": "bool",
              "senderApplicationId": "string",
              "transactionSetControlNumberLowerBound": "int",
              "transactionSetControlNumberPrefix": "string",
              "transactionSetControlNumberSuffix": "string",
              "transactionSetControlNumberUpperBound": "int",
              "usageIndicator": "string",
              "useControlStandardsIdAsRepetitionCharacter": "bool"
            },
            "framingSettings": {
              "characterSet": "string",
              "componentSeparator": "int",
              "dataElementSeparator": "int",
              "replaceCharacter": "int",
              "replaceSeparatorsInPayload": "bool",
              "segmentTerminator": "int",
              "segmentTerminatorSuffix": "string"
            },
            "messageFilter": {
              "messageFilterType": "string"
            },
            "messageFilterList": [
              {
                "messageId": "string"
              }
            ],
            "processingSettings": {
              "convertImpliedDecimal": "bool",
              "createEmptyXmlTagsForTrailingSeparators": "bool",
              "maskSecurityInfo": "bool",
              "preserveInterchange": "bool",
              "suspendInterchangeOnError": "bool",
              "useDotAsDecimalSeparator": "bool"
            },
            "schemaReferences": [
              {
                "messageId": "string",
                "schemaName": "string",
                "schemaVersion": "string",
                "senderApplicationId": "string"
              }
            ],
            "securitySettings": {
              "authorizationQualifier": "string",
              "authorizationValue": "string",
              "passwordValue": "string",
              "securityQualifier": "string"
            },
            "validationOverrides": [
              {
                "allowLeadingAndTrailingSpacesAndZeroes": "bool",
                "messageId": "string",
                "trailingSeparatorPolicy": "string",
                "trimLeadingAndTrailingSpacesAndZeroes": "bool",
                "validateCharacterSet": "bool",
                "validateEDITypes": "bool",
                "validateXSDTypes": "bool"
              }
            ],
            "validationSettings": {
              "allowLeadingAndTrailingSpacesAndZeroes": "bool",
              "checkDuplicateGroupControlNumber": "bool",
              "checkDuplicateInterchangeControlNumber": "bool",
              "checkDuplicateTransactionSetControlNumber": "bool",
              "interchangeControlNumberValidityDays": "int",
              "trailingSeparatorPolicy": "string",
              "trimLeadingAndTrailingSpacesAndZeroes": "bool",
              "validateCharacterSet": "bool",
              "validateEDITypes": "bool",
              "validateXSDTypes": "bool"
            },
            "x12DelimiterOverrides": [
              {
                "componentSeparator": "int",
                "dataElementSeparator": "int",
                "messageId": "string",
                "protocolVersion": "string",
                "replaceCharacter": "int",
                "replaceSeparatorsInPayload": "bool",
                "segmentTerminator": "int",
                "segmentTerminatorSuffix": "string",
                "targetNamespace": "string"
              }
            ]
          },
          "receiverBusinessIdentity": {
            "qualifier": "string",
            "value": "string"
          },
          "senderBusinessIdentity": {
            "qualifier": "string",
            "value": "string"
          }
        }
      }
    },
    "guestIdentity": {
      "qualifier": "string",
      "value": "string"
    },
    "guestPartner": "string",
    "hostIdentity": {
      "qualifier": "string",
      "value": "string"
    },
    "hostPartner": "string",
    "metadata": {}
  },
  "tags": {
    "{customized property}": "string"
  }
}
Property Values
AgreementContent
AS2AcknowledgementConnectionSettings
AS2AgreementContent
AS2EnvelopeSettings
AS2ErrorSettings
AS2MdnSettings
AS2MessageConnectionSettings
AS2OneWayAgreement
AS2ProtocolSettings
AS2SecuritySettings
AS2ValidationSettings
BusinessIdentity
EdifactAcknowledgementSettings
EdifactAgreementContent
EdifactDelimiterOverride
EdifactEnvelopeOverride
EdifactEnvelopeSettings
EdifactFramingSettings
EdifactMessageFilter
EdifactMessageIdentifier
EdifactOneWayAgreement
EdifactProcessingSettings
EdifactProtocolSettings
EdifactSchemaReference
EdifactValidationOverride
EdifactValidationSettings
IntegrationAccountAgreementProperties
Microsoft.Logic/integrationAccounts/agreements
ResourceTags
X12AcknowledgementSettings
X12AgreementContent
X12DelimiterOverrides
X12EnvelopeOverride
X12EnvelopeSettings
X12FramingSettings
X12MessageFilter
X12MessageIdentifier
X12OneWayAgreement
X12ProcessingSettings
X12ProtocolSettings
X12SchemaReference
X12SecuritySettings
X12ValidationOverride
X12ValidationSettings
Usage Examples
Azure Quickstart Templates
The followingAzure Quickstart templatesdeploy this resource type.
Terraform (AzAPI provider) resource definition
The integrationAccounts/agreements resource type can be deployed with operations that target:
Resource groups
For a list of changed properties in each API version, seechange log.
Resource format
To create a Microsoft.Logic/integrationAccounts/agreements resource, add the following Terraform to your template.
resource "azapi_resource" "symbolicname" {
  type = "Microsoft.Logic/integrationAccounts/agreements@2019-05-01"
  name = "string"
  location = "string"
  tags = {
    {customized property} = "string"
  }
  body = {
    properties = {
      agreementType = "string"
      content = {
        aS2 = {
          receiveAgreement = {
            protocolSettings = {
              acknowledgementConnectionSettings = {
                ignoreCertificateNameMismatch = bool
                keepHttpConnectionAlive = bool
                supportHttpStatusCodeContinue = bool
                unfoldHttpHeaders = bool
              }
              envelopeSettings = {
                autogenerateFileName = bool
                fileNameTemplate = "string"
                messageContentType = "string"
                suspendMessageOnFileNameGenerationError = bool
                transmitFileNameInMimeHeader = bool
              }
              errorSettings = {
                resendIfMDNNotReceived = bool
                suspendDuplicateMessage = bool
              }
              mdnSettings = {
                dispositionNotificationTo = "string"
                mdnText = "string"
                micHashingAlgorithm = "string"
                needMDN = bool
                receiptDeliveryUrl = "string"
                sendInboundMDNToMessageBox = bool
                sendMDNAsynchronously = bool
                signMDN = bool
                signOutboundMDNIfOptional = bool
              }
              messageConnectionSettings = {
                ignoreCertificateNameMismatch = bool
                keepHttpConnectionAlive = bool
                supportHttpStatusCodeContinue = bool
                unfoldHttpHeaders = bool
              }
              securitySettings = {
                enableNRRForInboundDecodedMessages = bool
                enableNRRForInboundEncodedMessages = bool
                enableNRRForInboundMDN = bool
                enableNRRForOutboundDecodedMessages = bool
                enableNRRForOutboundEncodedMessages = bool
                enableNRRForOutboundMDN = bool
                encryptionCertificateName = "string"
                overrideGroupSigningCertificate = bool
                sha2AlgorithmFormat = "string"
                signingCertificateName = "string"
              }
              validationSettings = {
                checkCertificateRevocationListOnReceive = bool
                checkCertificateRevocationListOnSend = bool
                checkDuplicateMessage = bool
                compressMessage = bool
                encryptionAlgorithm = "string"
                encryptMessage = bool
                interchangeDuplicatesValidityDays = int
                overrideMessageProperties = bool
                signingAlgorithm = "string"
                signMessage = bool
              }
            }
            receiverBusinessIdentity = {
              qualifier = "string"
              value = "string"
            }
            senderBusinessIdentity = {
              qualifier = "string"
              value = "string"
            }
          }
          sendAgreement = {
            protocolSettings = {
              acknowledgementConnectionSettings = {
                ignoreCertificateNameMismatch = bool
                keepHttpConnectionAlive = bool
                supportHttpStatusCodeContinue = bool
                unfoldHttpHeaders = bool
              }
              envelopeSettings = {
                autogenerateFileName = bool
                fileNameTemplate = "string"
                messageContentType = "string"
                suspendMessageOnFileNameGenerationError = bool
                transmitFileNameInMimeHeader = bool
              }
              errorSettings = {
                resendIfMDNNotReceived = bool
                suspendDuplicateMessage = bool
              }
              mdnSettings = {
                dispositionNotificationTo = "string"
                mdnText = "string"
                micHashingAlgorithm = "string"
                needMDN = bool
                receiptDeliveryUrl = "string"
                sendInboundMDNToMessageBox = bool
                sendMDNAsynchronously = bool
                signMDN = bool
                signOutboundMDNIfOptional = bool
              }
              messageConnectionSettings = {
                ignoreCertificateNameMismatch = bool
                keepHttpConnectionAlive = bool
                supportHttpStatusCodeContinue = bool
                unfoldHttpHeaders = bool
              }
              securitySettings = {
                enableNRRForInboundDecodedMessages = bool
                enableNRRForInboundEncodedMessages = bool
                enableNRRForInboundMDN = bool
                enableNRRForOutboundDecodedMessages = bool
                enableNRRForOutboundEncodedMessages = bool
                enableNRRForOutboundMDN = bool
                encryptionCertificateName = "string"
                overrideGroupSigningCertificate = bool
                sha2AlgorithmFormat = "string"
                signingCertificateName = "string"
              }
              validationSettings = {
                checkCertificateRevocationListOnReceive = bool
                checkCertificateRevocationListOnSend = bool
                checkDuplicateMessage = bool
                compressMessage = bool
                encryptionAlgorithm = "string"
                encryptMessage = bool
                interchangeDuplicatesValidityDays = int
                overrideMessageProperties = bool
                signingAlgorithm = "string"
                signMessage = bool
              }
            }
            receiverBusinessIdentity = {
              qualifier = "string"
              value = "string"
            }
            senderBusinessIdentity = {
              qualifier = "string"
              value = "string"
            }
          }
        }
        edifact = {
          receiveAgreement = {
            protocolSettings = {
              acknowledgementSettings = {
                acknowledgementControlNumberLowerBound = int
                acknowledgementControlNumberPrefix = "string"
                acknowledgementControlNumberSuffix = "string"
                acknowledgementControlNumberUpperBound = int
                batchFunctionalAcknowledgements = bool
                batchTechnicalAcknowledgements = bool
                needFunctionalAcknowledgement = bool
                needLoopForValidMessages = bool
                needTechnicalAcknowledgement = bool
                rolloverAcknowledgementControlNumber = bool
                sendSynchronousAcknowledgement = bool
              }
              edifactDelimiterOverrides = [
                {
                  componentSeparator = int
                  dataElementSeparator = int
                  decimalPointIndicator = "string"
                  messageAssociationAssignedCode = "string"
                  messageId = "string"
                  messageRelease = "string"
                  messageVersion = "string"
                  releaseIndicator = int
                  repetitionSeparator = int
                  segmentTerminator = int
                  segmentTerminatorSuffix = "string"
                  targetNamespace = "string"
                }
              ]
              envelopeOverrides = [
                {
                  applicationPassword = "string"
                  associationAssignedCode = "string"
                  controllingAgencyCode = "string"
                  functionalGroupId = "string"
                  groupHeaderMessageRelease = "string"
                  groupHeaderMessageVersion = "string"
                  messageAssociationAssignedCode = "string"
                  messageId = "string"
                  messageRelease = "string"
                  messageVersion = "string"
                  receiverApplicationId = "string"
                  receiverApplicationQualifier = "string"
                  senderApplicationId = "string"
                  senderApplicationQualifier = "string"
                  targetNamespace = "string"
                }
              ]
              envelopeSettings = {
                applicationReferenceId = "string"
                applyDelimiterStringAdvice = bool
                communicationAgreementId = "string"
                createGroupingSegments = bool
                enableDefaultGroupHeaders = bool
                functionalGroupId = "string"
                groupApplicationPassword = "string"
                groupApplicationReceiverId = "string"
                groupApplicationReceiverQualifier = "string"
                groupApplicationSenderId = "string"
                groupApplicationSenderQualifier = "string"
                groupAssociationAssignedCode = "string"
                groupControllingAgencyCode = "string"
                groupControlNumberLowerBound = int
                groupControlNumberPrefix = "string"
                groupControlNumberSuffix = "string"
                groupControlNumberUpperBound = int
                groupMessageRelease = "string"
                groupMessageVersion = "string"
                interchangeControlNumberLowerBound = int
                interchangeControlNumberPrefix = "string"
                interchangeControlNumberSuffix = "string"
                interchangeControlNumberUpperBound = int
                isTestInterchange = bool
                overwriteExistingTransactionSetControlNumber = bool
                processingPriorityCode = "string"
                receiverInternalIdentification = "string"
                receiverInternalSubIdentification = "string"
                receiverReverseRoutingAddress = "string"
                recipientReferencePasswordQualifier = "string"
                recipientReferencePasswordValue = "string"
                rolloverGroupControlNumber = bool
                rolloverInterchangeControlNumber = bool
                rolloverTransactionSetControlNumber = bool
                senderInternalIdentification = "string"
                senderInternalSubIdentification = "string"
                senderReverseRoutingAddress = "string"
                transactionSetControlNumberLowerBound = int
                transactionSetControlNumberPrefix = "string"
                transactionSetControlNumberSuffix = "string"
                transactionSetControlNumberUpperBound = int
              }
              framingSettings = {
                characterEncoding = "string"
                characterSet = "string"
                componentSeparator = int
                dataElementSeparator = int
                decimalPointIndicator = "string"
                protocolVersion = int
                releaseIndicator = int
                repetitionSeparator = int
                segmentTerminator = int
                segmentTerminatorSuffix = "string"
                serviceCodeListDirectoryVersion = "string"
              }
              messageFilter = {
                messageFilterType = "string"
              }
              messageFilterList = [
                {
                  messageId = "string"
                }
              ]
              processingSettings = {
                createEmptyXmlTagsForTrailingSeparators = bool
                maskSecurityInfo = bool
                preserveInterchange = bool
                suspendInterchangeOnError = bool
                useDotAsDecimalSeparator = bool
              }
              schemaReferences = [
                {
                  associationAssignedCode = "string"
                  messageId = "string"
                  messageRelease = "string"
                  messageVersion = "string"
                  schemaName = "string"
                  senderApplicationId = "string"
                  senderApplicationQualifier = "string"
                }
              ]
              validationOverrides = [
                {
                  allowLeadingAndTrailingSpacesAndZeroes = bool
                  enforceCharacterSet = bool
                  messageId = "string"
                  trailingSeparatorPolicy = "string"
                  trimLeadingAndTrailingSpacesAndZeroes = bool
                  validateEDITypes = bool
                  validateXSDTypes = bool
                }
              ]
              validationSettings = {
                allowLeadingAndTrailingSpacesAndZeroes = bool
                checkDuplicateGroupControlNumber = bool
                checkDuplicateInterchangeControlNumber = bool
                checkDuplicateTransactionSetControlNumber = bool
                interchangeControlNumberValidityDays = int
                trailingSeparatorPolicy = "string"
                trimLeadingAndTrailingSpacesAndZeroes = bool
                validateCharacterSet = bool
                validateEDITypes = bool
                validateXSDTypes = bool
              }
            }
            receiverBusinessIdentity = {
              qualifier = "string"
              value = "string"
            }
            senderBusinessIdentity = {
              qualifier = "string"
              value = "string"
            }
          }
          sendAgreement = {
            protocolSettings = {
              acknowledgementSettings = {
                acknowledgementControlNumberLowerBound = int
                acknowledgementControlNumberPrefix = "string"
                acknowledgementControlNumberSuffix = "string"
                acknowledgementControlNumberUpperBound = int
                batchFunctionalAcknowledgements = bool
                batchTechnicalAcknowledgements = bool
                needFunctionalAcknowledgement = bool
                needLoopForValidMessages = bool
                needTechnicalAcknowledgement = bool
                rolloverAcknowledgementControlNumber = bool
                sendSynchronousAcknowledgement = bool
              }
              edifactDelimiterOverrides = [
                {
                  componentSeparator = int
                  dataElementSeparator = int
                  decimalPointIndicator = "string"
                  messageAssociationAssignedCode = "string"
                  messageId = "string"
                  messageRelease = "string"
                  messageVersion = "string"
                  releaseIndicator = int
                  repetitionSeparator = int
                  segmentTerminator = int
                  segmentTerminatorSuffix = "string"
                  targetNamespace = "string"
                }
              ]
              envelopeOverrides = [
                {
                  applicationPassword = "string"
                  associationAssignedCode = "string"
                  controllingAgencyCode = "string"
                  functionalGroupId = "string"
                  groupHeaderMessageRelease = "string"
                  groupHeaderMessageVersion = "string"
                  messageAssociationAssignedCode = "string"
                  messageId = "string"
                  messageRelease = "string"
                  messageVersion = "string"
                  receiverApplicationId = "string"
                  receiverApplicationQualifier = "string"
                  senderApplicationId = "string"
                  senderApplicationQualifier = "string"
                  targetNamespace = "string"
                }
              ]
              envelopeSettings = {
                applicationReferenceId = "string"
                applyDelimiterStringAdvice = bool
                communicationAgreementId = "string"
                createGroupingSegments = bool
                enableDefaultGroupHeaders = bool
                functionalGroupId = "string"
                groupApplicationPassword = "string"
                groupApplicationReceiverId = "string"
                groupApplicationReceiverQualifier = "string"
                groupApplicationSenderId = "string"
                groupApplicationSenderQualifier = "string"
                groupAssociationAssignedCode = "string"
                groupControllingAgencyCode = "string"
                groupControlNumberLowerBound = int
                groupControlNumberPrefix = "string"
                groupControlNumberSuffix = "string"
                groupControlNumberUpperBound = int
                groupMessageRelease = "string"
                groupMessageVersion = "string"
                interchangeControlNumberLowerBound = int
                interchangeControlNumberPrefix = "string"
                interchangeControlNumberSuffix = "string"
                interchangeControlNumberUpperBound = int
                isTestInterchange = bool
                overwriteExistingTransactionSetControlNumber = bool
                processingPriorityCode = "string"
                receiverInternalIdentification = "string"
                receiverInternalSubIdentification = "string"
                receiverReverseRoutingAddress = "string"
                recipientReferencePasswordQualifier = "string"
                recipientReferencePasswordValue = "string"
                rolloverGroupControlNumber = bool
                rolloverInterchangeControlNumber = bool
                rolloverTransactionSetControlNumber = bool
                senderInternalIdentification = "string"
                senderInternalSubIdentification = "string"
                senderReverseRoutingAddress = "string"
                transactionSetControlNumberLowerBound = int
                transactionSetControlNumberPrefix = "string"
                transactionSetControlNumberSuffix = "string"
                transactionSetControlNumberUpperBound = int
              }
              framingSettings = {
                characterEncoding = "string"
                characterSet = "string"
                componentSeparator = int
                dataElementSeparator = int
                decimalPointIndicator = "string"
                protocolVersion = int
                releaseIndicator = int
                repetitionSeparator = int
                segmentTerminator = int
                segmentTerminatorSuffix = "string"
                serviceCodeListDirectoryVersion = "string"
              }
              messageFilter = {
                messageFilterType = "string"
              }
              messageFilterList = [
                {
                  messageId = "string"
                }
              ]
              processingSettings = {
                createEmptyXmlTagsForTrailingSeparators = bool
                maskSecurityInfo = bool
                preserveInterchange = bool
                suspendInterchangeOnError = bool
                useDotAsDecimalSeparator = bool
              }
              schemaReferences = [
                {
                  associationAssignedCode = "string"
                  messageId = "string"
                  messageRelease = "string"
                  messageVersion = "string"
                  schemaName = "string"
                  senderApplicationId = "string"
                  senderApplicationQualifier = "string"
                }
              ]
              validationOverrides = [
                {
                  allowLeadingAndTrailingSpacesAndZeroes = bool
                  enforceCharacterSet = bool
                  messageId = "string"
                  trailingSeparatorPolicy = "string"
                  trimLeadingAndTrailingSpacesAndZeroes = bool
                  validateEDITypes = bool
                  validateXSDTypes = bool
                }
              ]
              validationSettings = {
                allowLeadingAndTrailingSpacesAndZeroes = bool
                checkDuplicateGroupControlNumber = bool
                checkDuplicateInterchangeControlNumber = bool
                checkDuplicateTransactionSetControlNumber = bool
                interchangeControlNumberValidityDays = int
                trailingSeparatorPolicy = "string"
                trimLeadingAndTrailingSpacesAndZeroes = bool
                validateCharacterSet = bool
                validateEDITypes = bool
                validateXSDTypes = bool
              }
            }
            receiverBusinessIdentity = {
              qualifier = "string"
              value = "string"
            }
            senderBusinessIdentity = {
              qualifier = "string"
              value = "string"
            }
          }
        }
        x12 = {
          receiveAgreement = {
            protocolSettings = {
              acknowledgementSettings = {
                acknowledgementControlNumberLowerBound = int
                acknowledgementControlNumberPrefix = "string"
                acknowledgementControlNumberSuffix = "string"
                acknowledgementControlNumberUpperBound = int
                batchFunctionalAcknowledgements = bool
                batchImplementationAcknowledgements = bool
                batchTechnicalAcknowledgements = bool
                functionalAcknowledgementVersion = "string"
                implementationAcknowledgementVersion = "string"
                needFunctionalAcknowledgement = bool
                needImplementationAcknowledgement = bool
                needLoopForValidMessages = bool
                needTechnicalAcknowledgement = bool
                rolloverAcknowledgementControlNumber = bool
                sendSynchronousAcknowledgement = bool
              }
              envelopeOverrides = [
                {
                  dateFormat = "string"
                  functionalIdentifierCode = "string"
                  headerVersion = "string"
                  messageId = "string"
                  protocolVersion = "string"
                  receiverApplicationId = "string"
                  responsibleAgencyCode = "string"
                  senderApplicationId = "string"
                  targetNamespace = "string"
                  timeFormat = "string"
                }
              ]
              envelopeSettings = {
                controlStandardsId = int
                controlVersionNumber = "string"
                enableDefaultGroupHeaders = bool
                functionalGroupId = "string"
                groupControlNumberLowerBound = int
                groupControlNumberUpperBound = int
                groupHeaderAgencyCode = "string"
                groupHeaderDateFormat = "string"
                groupHeaderTimeFormat = "string"
                groupHeaderVersion = "string"
                interchangeControlNumberLowerBound = int
                interchangeControlNumberUpperBound = int
                overwriteExistingTransactionSetControlNumber = bool
                receiverApplicationId = "string"
                rolloverGroupControlNumber = bool
                rolloverInterchangeControlNumber = bool
                rolloverTransactionSetControlNumber = bool
                senderApplicationId = "string"
                transactionSetControlNumberLowerBound = int
                transactionSetControlNumberPrefix = "string"
                transactionSetControlNumberSuffix = "string"
                transactionSetControlNumberUpperBound = int
                usageIndicator = "string"
                useControlStandardsIdAsRepetitionCharacter = bool
              }
              framingSettings = {
                characterSet = "string"
                componentSeparator = int
                dataElementSeparator = int
                replaceCharacter = int
                replaceSeparatorsInPayload = bool
                segmentTerminator = int
                segmentTerminatorSuffix = "string"
              }
              messageFilter = {
                messageFilterType = "string"
              }
              messageFilterList = [
                {
                  messageId = "string"
                }
              ]
              processingSettings = {
                convertImpliedDecimal = bool
                createEmptyXmlTagsForTrailingSeparators = bool
                maskSecurityInfo = bool
                preserveInterchange = bool
                suspendInterchangeOnError = bool
                useDotAsDecimalSeparator = bool
              }
              schemaReferences = [
                {
                  messageId = "string"
                  schemaName = "string"
                  schemaVersion = "string"
                  senderApplicationId = "string"
                }
              ]
              securitySettings = {
                authorizationQualifier = "string"
                authorizationValue = "string"
                passwordValue = "string"
                securityQualifier = "string"
              }
              validationOverrides = [
                {
                  allowLeadingAndTrailingSpacesAndZeroes = bool
                  messageId = "string"
                  trailingSeparatorPolicy = "string"
                  trimLeadingAndTrailingSpacesAndZeroes = bool
                  validateCharacterSet = bool
                  validateEDITypes = bool
                  validateXSDTypes = bool
                }
              ]
              validationSettings = {
                allowLeadingAndTrailingSpacesAndZeroes = bool
                checkDuplicateGroupControlNumber = bool
                checkDuplicateInterchangeControlNumber = bool
                checkDuplicateTransactionSetControlNumber = bool
                interchangeControlNumberValidityDays = int
                trailingSeparatorPolicy = "string"
                trimLeadingAndTrailingSpacesAndZeroes = bool
                validateCharacterSet = bool
                validateEDITypes = bool
                validateXSDTypes = bool
              }
              x12DelimiterOverrides = [
                {
                  componentSeparator = int
                  dataElementSeparator = int
                  messageId = "string"
                  protocolVersion = "string"
                  replaceCharacter = int
                  replaceSeparatorsInPayload = bool
                  segmentTerminator = int
                  segmentTerminatorSuffix = "string"
                  targetNamespace = "string"
                }
              ]
            }
            receiverBusinessIdentity = {
              qualifier = "string"
              value = "string"
            }
            senderBusinessIdentity = {
              qualifier = "string"
              value = "string"
            }
          }
          sendAgreement = {
            protocolSettings = {
              acknowledgementSettings = {
                acknowledgementControlNumberLowerBound = int
                acknowledgementControlNumberPrefix = "string"
                acknowledgementControlNumberSuffix = "string"
                acknowledgementControlNumberUpperBound = int
                batchFunctionalAcknowledgements = bool
                batchImplementationAcknowledgements = bool
                batchTechnicalAcknowledgements = bool
                functionalAcknowledgementVersion = "string"
                implementationAcknowledgementVersion = "string"
                needFunctionalAcknowledgement = bool
                needImplementationAcknowledgement = bool
                needLoopForValidMessages = bool
                needTechnicalAcknowledgement = bool
                rolloverAcknowledgementControlNumber = bool
                sendSynchronousAcknowledgement = bool
              }
              envelopeOverrides = [
                {
                  dateFormat = "string"
                  functionalIdentifierCode = "string"
                  headerVersion = "string"
                  messageId = "string"
                  protocolVersion = "string"
                  receiverApplicationId = "string"
                  responsibleAgencyCode = "string"
                  senderApplicationId = "string"
                  targetNamespace = "string"
                  timeFormat = "string"
                }
              ]
              envelopeSettings = {
                controlStandardsId = int
                controlVersionNumber = "string"
                enableDefaultGroupHeaders = bool
                functionalGroupId = "string"
                groupControlNumberLowerBound = int
                groupControlNumberUpperBound = int
                groupHeaderAgencyCode = "string"
                groupHeaderDateFormat = "string"
                groupHeaderTimeFormat = "string"
                groupHeaderVersion = "string"
                interchangeControlNumberLowerBound = int
                interchangeControlNumberUpperBound = int
                overwriteExistingTransactionSetControlNumber = bool
                receiverApplicationId = "string"
                rolloverGroupControlNumber = bool
                rolloverInterchangeControlNumber = bool
                rolloverTransactionSetControlNumber = bool
                senderApplicationId = "string"
                transactionSetControlNumberLowerBound = int
                transactionSetControlNumberPrefix = "string"
                transactionSetControlNumberSuffix = "string"
                transactionSetControlNumberUpperBound = int
                usageIndicator = "string"
                useControlStandardsIdAsRepetitionCharacter = bool
              }
              framingSettings = {
                characterSet = "string"
                componentSeparator = int
                dataElementSeparator = int
                replaceCharacter = int
                replaceSeparatorsInPayload = bool
                segmentTerminator = int
                segmentTerminatorSuffix = "string"
              }
              messageFilter = {
                messageFilterType = "string"
              }
              messageFilterList = [
                {
                  messageId = "string"
                }
              ]
              processingSettings = {
                convertImpliedDecimal = bool
                createEmptyXmlTagsForTrailingSeparators = bool
                maskSecurityInfo = bool
                preserveInterchange = bool
                suspendInterchangeOnError = bool
                useDotAsDecimalSeparator = bool
              }
              schemaReferences = [
                {
                  messageId = "string"
                  schemaName = "string"
                  schemaVersion = "string"
                  senderApplicationId = "string"
                }
              ]
              securitySettings = {
                authorizationQualifier = "string"
                authorizationValue = "string"
                passwordValue = "string"
                securityQualifier = "string"
              }
              validationOverrides = [
                {
                  allowLeadingAndTrailingSpacesAndZeroes = bool
                  messageId = "string"
                  trailingSeparatorPolicy = "string"
                  trimLeadingAndTrailingSpacesAndZeroes = bool
                  validateCharacterSet = bool
                  validateEDITypes = bool
                  validateXSDTypes = bool
                }
              ]
              validationSettings = {
                allowLeadingAndTrailingSpacesAndZeroes = bool
                checkDuplicateGroupControlNumber = bool
                checkDuplicateInterchangeControlNumber = bool
                checkDuplicateTransactionSetControlNumber = bool
                interchangeControlNumberValidityDays = int
                trailingSeparatorPolicy = "string"
                trimLeadingAndTrailingSpacesAndZeroes = bool
                validateCharacterSet = bool
                validateEDITypes = bool
                validateXSDTypes = bool
              }
              x12DelimiterOverrides = [
                {
                  componentSeparator = int
                  dataElementSeparator = int
                  messageId = "string"
                  protocolVersion = "string"
                  replaceCharacter = int
                  replaceSeparatorsInPayload = bool
                  segmentTerminator = int
                  segmentTerminatorSuffix = "string"
                  targetNamespace = "string"
                }
              ]
            }
            receiverBusinessIdentity = {
              qualifier = "string"
              value = "string"
            }
            senderBusinessIdentity = {
              qualifier = "string"
              value = "string"
            }
          }
        }
      }
      guestIdentity = {
        qualifier = "string"
        value = "string"
      }
      guestPartner = "string"
      hostIdentity = {
        qualifier = "string"
        value = "string"
      }
      hostPartner = "string"
      metadata = ?
    }
  }
}
resource "azapi_resource" "symbolicname" {
  type = "Microsoft.Logic/integrationAccounts/agreements@2019-05-01"
  name = "string"
  location = "string"
  tags = {
    {customized property} = "string"
  }
  body = {
    properties = {
      agreementType = "string"
      content = {
        aS2 = {
          receiveAgreement = {
            protocolSettings = {
              acknowledgementConnectionSettings = {
                ignoreCertificateNameMismatch = bool
                keepHttpConnectionAlive = bool
                supportHttpStatusCodeContinue = bool
                unfoldHttpHeaders = bool
              }
              envelopeSettings = {
                autogenerateFileName = bool
                fileNameTemplate = "string"
                messageContentType = "string"
                suspendMessageOnFileNameGenerationError = bool
                transmitFileNameInMimeHeader = bool
              }
              errorSettings = {
                resendIfMDNNotReceived = bool
                suspendDuplicateMessage = bool
              }
              mdnSettings = {
                dispositionNotificationTo = "string"
                mdnText = "string"
                micHashingAlgorithm = "string"
                needMDN = bool
                receiptDeliveryUrl = "string"
                sendInboundMDNToMessageBox = bool
                sendMDNAsynchronously = bool
                signMDN = bool
                signOutboundMDNIfOptional = bool
              }
              messageConnectionSettings = {
                ignoreCertificateNameMismatch = bool
                keepHttpConnectionAlive = bool
                supportHttpStatusCodeContinue = bool
                unfoldHttpHeaders = bool
              }
              securitySettings = {
                enableNRRForInboundDecodedMessages = bool
                enableNRRForInboundEncodedMessages = bool
                enableNRRForInboundMDN = bool
                enableNRRForOutboundDecodedMessages = bool
                enableNRRForOutboundEncodedMessages = bool
                enableNRRForOutboundMDN = bool
                encryptionCertificateName = "string"
                overrideGroupSigningCertificate = bool
                sha2AlgorithmFormat = "string"
                signingCertificateName = "string"
              }
              validationSettings = {
                checkCertificateRevocationListOnReceive = bool
                checkCertificateRevocationListOnSend = bool
                checkDuplicateMessage = bool
                compressMessage = bool
                encryptionAlgorithm = "string"
                encryptMessage = bool
                interchangeDuplicatesValidityDays = int
                overrideMessageProperties = bool
                signingAlgorithm = "string"
                signMessage = bool
              }
            }
            receiverBusinessIdentity = {
              qualifier = "string"
              value = "string"
            }
            senderBusinessIdentity = {
              qualifier = "string"
              value = "string"
            }
          }
          sendAgreement = {
            protocolSettings = {
              acknowledgementConnectionSettings = {
                ignoreCertificateNameMismatch = bool
                keepHttpConnectionAlive = bool
                supportHttpStatusCodeContinue = bool
                unfoldHttpHeaders = bool
              }
              envelopeSettings = {
                autogenerateFileName = bool
                fileNameTemplate = "string"
                messageContentType = "string"
                suspendMessageOnFileNameGenerationError = bool
                transmitFileNameInMimeHeader = bool
              }
              errorSettings = {
                resendIfMDNNotReceived = bool
                suspendDuplicateMessage = bool
              }
              mdnSettings = {
                dispositionNotificationTo = "string"
                mdnText = "string"
                micHashingAlgorithm = "string"
                needMDN = bool
                receiptDeliveryUrl = "string"
                sendInboundMDNToMessageBox = bool
                sendMDNAsynchronously = bool
                signMDN = bool
                signOutboundMDNIfOptional = bool
              }
              messageConnectionSettings = {
                ignoreCertificateNameMismatch = bool
                keepHttpConnectionAlive = bool
                supportHttpStatusCodeContinue = bool
                unfoldHttpHeaders = bool
              }
              securitySettings = {
                enableNRRForInboundDecodedMessages = bool
                enableNRRForInboundEncodedMessages = bool
                enableNRRForInboundMDN = bool
                enableNRRForOutboundDecodedMessages = bool
                enableNRRForOutboundEncodedMessages = bool
                enableNRRForOutboundMDN = bool
                encryptionCertificateName = "string"
                overrideGroupSigningCertificate = bool
                sha2AlgorithmFormat = "string"
                signingCertificateName = "string"
              }
              validationSettings = {
                checkCertificateRevocationListOnReceive = bool
                checkCertificateRevocationListOnSend = bool
                checkDuplicateMessage = bool
                compressMessage = bool
                encryptionAlgorithm = "string"
                encryptMessage = bool
                interchangeDuplicatesValidityDays = int
                overrideMessageProperties = bool
                signingAlgorithm = "string"
                signMessage = bool
              }
            }
            receiverBusinessIdentity = {
              qualifier = "string"
              value = "string"
            }
            senderBusinessIdentity = {
              qualifier = "string"
              value = "string"
            }
          }
        }
        edifact = {
          receiveAgreement = {
            protocolSettings = {
              acknowledgementSettings = {
                acknowledgementControlNumberLowerBound = int
                acknowledgementControlNumberPrefix = "string"
                acknowledgementControlNumberSuffix = "string"
                acknowledgementControlNumberUpperBound = int
                batchFunctionalAcknowledgements = bool
                batchTechnicalAcknowledgements = bool
                needFunctionalAcknowledgement = bool
                needLoopForValidMessages = bool
                needTechnicalAcknowledgement = bool
                rolloverAcknowledgementControlNumber = bool
                sendSynchronousAcknowledgement = bool
              }
              edifactDelimiterOverrides = [
                {
                  componentSeparator = int
                  dataElementSeparator = int
                  decimalPointIndicator = "string"
                  messageAssociationAssignedCode = "string"
                  messageId = "string"
                  messageRelease = "string"
                  messageVersion = "string"
                  releaseIndicator = int
                  repetitionSeparator = int
                  segmentTerminator = int
                  segmentTerminatorSuffix = "string"
                  targetNamespace = "string"
                }
              ]
              envelopeOverrides = [
                {
                  applicationPassword = "string"
                  associationAssignedCode = "string"
                  controllingAgencyCode = "string"
                  functionalGroupId = "string"
                  groupHeaderMessageRelease = "string"
                  groupHeaderMessageVersion = "string"
                  messageAssociationAssignedCode = "string"
                  messageId = "string"
                  messageRelease = "string"
                  messageVersion = "string"
                  receiverApplicationId = "string"
                  receiverApplicationQualifier = "string"
                  senderApplicationId = "string"
                  senderApplicationQualifier = "string"
                  targetNamespace = "string"
                }
              ]
              envelopeSettings = {
                applicationReferenceId = "string"
                applyDelimiterStringAdvice = bool
                communicationAgreementId = "string"
                createGroupingSegments = bool
                enableDefaultGroupHeaders = bool
                functionalGroupId = "string"
                groupApplicationPassword = "string"
                groupApplicationReceiverId = "string"
                groupApplicationReceiverQualifier = "string"
                groupApplicationSenderId = "string"
                groupApplicationSenderQualifier = "string"
                groupAssociationAssignedCode = "string"
                groupControllingAgencyCode = "string"
                groupControlNumberLowerBound = int
                groupControlNumberPrefix = "string"
                groupControlNumberSuffix = "string"
                groupControlNumberUpperBound = int
                groupMessageRelease = "string"
                groupMessageVersion = "string"
                interchangeControlNumberLowerBound = int
                interchangeControlNumberPrefix = "string"
                interchangeControlNumberSuffix = "string"
                interchangeControlNumberUpperBound = int
                isTestInterchange = bool
                overwriteExistingTransactionSetControlNumber = bool
                processingPriorityCode = "string"
                receiverInternalIdentification = "string"
                receiverInternalSubIdentification = "string"
                receiverReverseRoutingAddress = "string"
                recipientReferencePasswordQualifier = "string"
                recipientReferencePasswordValue = "string"
                rolloverGroupControlNumber = bool
                rolloverInterchangeControlNumber = bool
                rolloverTransactionSetControlNumber = bool
                senderInternalIdentification = "string"
                senderInternalSubIdentification = "string"
                senderReverseRoutingAddress = "string"
                transactionSetControlNumberLowerBound = int
                transactionSetControlNumberPrefix = "string"
                transactionSetControlNumberSuffix = "string"
                transactionSetControlNumberUpperBound = int
              }
              framingSettings = {
                characterEncoding = "string"
                characterSet = "string"
                componentSeparator = int
                dataElementSeparator = int
                decimalPointIndicator = "string"
                protocolVersion = int
                releaseIndicator = int
                repetitionSeparator = int
                segmentTerminator = int
                segmentTerminatorSuffix = "string"
                serviceCodeListDirectoryVersion = "string"
              }
              messageFilter = {
                messageFilterType = "string"
              }
              messageFilterList = [
                {
                  messageId = "string"
                }
              ]
              processingSettings = {
                createEmptyXmlTagsForTrailingSeparators = bool
                maskSecurityInfo = bool
                preserveInterchange = bool
                suspendInterchangeOnError = bool
                useDotAsDecimalSeparator = bool
              }
              schemaReferences = [
                {
                  associationAssignedCode = "string"
                  messageId = "string"
                  messageRelease = "string"
                  messageVersion = "string"
                  schemaName = "string"
                  senderApplicationId = "string"
                  senderApplicationQualifier = "string"
                }
              ]
              validationOverrides = [
                {
                  allowLeadingAndTrailingSpacesAndZeroes = bool
                  enforceCharacterSet = bool
                  messageId = "string"
                  trailingSeparatorPolicy = "string"
                  trimLeadingAndTrailingSpacesAndZeroes = bool
                  validateEDITypes = bool
                  validateXSDTypes = bool
                }
              ]
              validationSettings = {
                allowLeadingAndTrailingSpacesAndZeroes = bool
                checkDuplicateGroupControlNumber = bool
                checkDuplicateInterchangeControlNumber = bool
                checkDuplicateTransactionSetControlNumber = bool
                interchangeControlNumberValidityDays = int
                trailingSeparatorPolicy = "string"
                trimLeadingAndTrailingSpacesAndZeroes = bool
                validateCharacterSet = bool
                validateEDITypes = bool
                validateXSDTypes = bool
              }
            }
            receiverBusinessIdentity = {
              qualifier = "string"
              value = "string"
            }
            senderBusinessIdentity = {
              qualifier = "string"
              value = "string"
            }
          }
          sendAgreement = {
            protocolSettings = {
              acknowledgementSettings = {
                acknowledgementControlNumberLowerBound = int
                acknowledgementControlNumberPrefix = "string"
                acknowledgementControlNumberSuffix = "string"
                acknowledgementControlNumberUpperBound = int
                batchFunctionalAcknowledgements = bool
                batchTechnicalAcknowledgements = bool
                needFunctionalAcknowledgement = bool
                needLoopForValidMessages = bool
                needTechnicalAcknowledgement = bool
                rolloverAcknowledgementControlNumber = bool
                sendSynchronousAcknowledgement = bool
              }
              edifactDelimiterOverrides = [
                {
                  componentSeparator = int
                  dataElementSeparator = int
                  decimalPointIndicator = "string"
                  messageAssociationAssignedCode = "string"
                  messageId = "string"
                  messageRelease = "string"
                  messageVersion = "string"
                  releaseIndicator = int
                  repetitionSeparator = int
                  segmentTerminator = int
                  segmentTerminatorSuffix = "string"
                  targetNamespace = "string"
                }
              ]
              envelopeOverrides = [
                {
                  applicationPassword = "string"
                  associationAssignedCode = "string"
                  controllingAgencyCode = "string"
                  functionalGroupId = "string"
                  groupHeaderMessageRelease = "string"
                  groupHeaderMessageVersion = "string"
                  messageAssociationAssignedCode = "string"
                  messageId = "string"
                  messageRelease = "string"
                  messageVersion = "string"
                  receiverApplicationId = "string"
                  receiverApplicationQualifier = "string"
                  senderApplicationId = "string"
                  senderApplicationQualifier = "string"
                  targetNamespace = "string"
                }
              ]
              envelopeSettings = {
                applicationReferenceId = "string"
                applyDelimiterStringAdvice = bool
                communicationAgreementId = "string"
                createGroupingSegments = bool
                enableDefaultGroupHeaders = bool
                functionalGroupId = "string"
                groupApplicationPassword = "string"
                groupApplicationReceiverId = "string"
                groupApplicationReceiverQualifier = "string"
                groupApplicationSenderId = "string"
                groupApplicationSenderQualifier = "string"
                groupAssociationAssignedCode = "string"
                groupControllingAgencyCode = "string"
                groupControlNumberLowerBound = int
                groupControlNumberPrefix = "string"
                groupControlNumberSuffix = "string"
                groupControlNumberUpperBound = int
                groupMessageRelease = "string"
                groupMessageVersion = "string"
                interchangeControlNumberLowerBound = int
                interchangeControlNumberPrefix = "string"
                interchangeControlNumberSuffix = "string"
                interchangeControlNumberUpperBound = int
                isTestInterchange = bool
                overwriteExistingTransactionSetControlNumber = bool
                processingPriorityCode = "string"
                receiverInternalIdentification = "string"
                receiverInternalSubIdentification = "string"
                receiverReverseRoutingAddress = "string"
                recipientReferencePasswordQualifier = "string"
                recipientReferencePasswordValue = "string"
                rolloverGroupControlNumber = bool
                rolloverInterchangeControlNumber = bool
                rolloverTransactionSetControlNumber = bool
                senderInternalIdentification = "string"
                senderInternalSubIdentification = "string"
                senderReverseRoutingAddress = "string"
                transactionSetControlNumberLowerBound = int
                transactionSetControlNumberPrefix = "string"
                transactionSetControlNumberSuffix = "string"
                transactionSetControlNumberUpperBound = int
              }
              framingSettings = {
                characterEncoding = "string"
                characterSet = "string"
                componentSeparator = int
                dataElementSeparator = int
                decimalPointIndicator = "string"
                protocolVersion = int
                releaseIndicator = int
                repetitionSeparator = int
                segmentTerminator = int
                segmentTerminatorSuffix = "string"
                serviceCodeListDirectoryVersion = "string"
              }
              messageFilter = {
                messageFilterType = "string"
              }
              messageFilterList = [
                {
                  messageId = "string"
                }
              ]
              processingSettings = {
                createEmptyXmlTagsForTrailingSeparators = bool
                maskSecurityInfo = bool
                preserveInterchange = bool
                suspendInterchangeOnError = bool
                useDotAsDecimalSeparator = bool
              }
              schemaReferences = [
                {
                  associationAssignedCode = "string"
                  messageId = "string"
                  messageRelease = "string"
                  messageVersion = "string"
                  schemaName = "string"
                  senderApplicationId = "string"
                  senderApplicationQualifier = "string"
                }
              ]
              validationOverrides = [
                {
                  allowLeadingAndTrailingSpacesAndZeroes = bool
                  enforceCharacterSet = bool
                  messageId = "string"
                  trailingSeparatorPolicy = "string"
                  trimLeadingAndTrailingSpacesAndZeroes = bool
                  validateEDITypes = bool
                  validateXSDTypes = bool
                }
              ]
              validationSettings = {
                allowLeadingAndTrailingSpacesAndZeroes = bool
                checkDuplicateGroupControlNumber = bool
                checkDuplicateInterchangeControlNumber = bool
                checkDuplicateTransactionSetControlNumber = bool
                interchangeControlNumberValidityDays = int
                trailingSeparatorPolicy = "string"
                trimLeadingAndTrailingSpacesAndZeroes = bool
                validateCharacterSet = bool
                validateEDITypes = bool
                validateXSDTypes = bool
              }
            }
            receiverBusinessIdentity = {
              qualifier = "string"
              value = "string"
            }
            senderBusinessIdentity = {
              qualifier = "string"
              value = "string"
            }
          }
        }
        x12 = {
          receiveAgreement = {
            protocolSettings = {
              acknowledgementSettings = {
                acknowledgementControlNumberLowerBound = int
                acknowledgementControlNumberPrefix = "string"
                acknowledgementControlNumberSuffix = "string"
                acknowledgementControlNumberUpperBound = int
                batchFunctionalAcknowledgements = bool
                batchImplementationAcknowledgements = bool
                batchTechnicalAcknowledgements = bool
                functionalAcknowledgementVersion = "string"
                implementationAcknowledgementVersion = "string"
                needFunctionalAcknowledgement = bool
                needImplementationAcknowledgement = bool
                needLoopForValidMessages = bool
                needTechnicalAcknowledgement = bool
                rolloverAcknowledgementControlNumber = bool
                sendSynchronousAcknowledgement = bool
              }
              envelopeOverrides = [
                {
                  dateFormat = "string"
                  functionalIdentifierCode = "string"
                  headerVersion = "string"
                  messageId = "string"
                  protocolVersion = "string"
                  receiverApplicationId = "string"
                  responsibleAgencyCode = "string"
                  senderApplicationId = "string"
                  targetNamespace = "string"
                  timeFormat = "string"
                }
              ]
              envelopeSettings = {
                controlStandardsId = int
                controlVersionNumber = "string"
                enableDefaultGroupHeaders = bool
                functionalGroupId = "string"
                groupControlNumberLowerBound = int
                groupControlNumberUpperBound = int
                groupHeaderAgencyCode = "string"
                groupHeaderDateFormat = "string"
                groupHeaderTimeFormat = "string"
                groupHeaderVersion = "string"
                interchangeControlNumberLowerBound = int
                interchangeControlNumberUpperBound = int
                overwriteExistingTransactionSetControlNumber = bool
                receiverApplicationId = "string"
                rolloverGroupControlNumber = bool
                rolloverInterchangeControlNumber = bool
                rolloverTransactionSetControlNumber = bool
                senderApplicationId = "string"
                transactionSetControlNumberLowerBound = int
                transactionSetControlNumberPrefix = "string"
                transactionSetControlNumberSuffix = "string"
                transactionSetControlNumberUpperBound = int
                usageIndicator = "string"
                useControlStandardsIdAsRepetitionCharacter = bool
              }
              framingSettings = {
                characterSet = "string"
                componentSeparator = int
                dataElementSeparator = int
                replaceCharacter = int
                replaceSeparatorsInPayload = bool
                segmentTerminator = int
                segmentTerminatorSuffix = "string"
              }
              messageFilter = {
                messageFilterType = "string"
              }
              messageFilterList = [
                {
                  messageId = "string"
                }
              ]
              processingSettings = {
                convertImpliedDecimal = bool
                createEmptyXmlTagsForTrailingSeparators = bool
                maskSecurityInfo = bool
                preserveInterchange = bool
                suspendInterchangeOnError = bool
                useDotAsDecimalSeparator = bool
              }
              schemaReferences = [
                {
                  messageId = "string"
                  schemaName = "string"
                  schemaVersion = "string"
                  senderApplicationId = "string"
                }
              ]
              securitySettings = {
                authorizationQualifier = "string"
                authorizationValue = "string"
                passwordValue = "string"
                securityQualifier = "string"
              }
              validationOverrides = [
                {
                  allowLeadingAndTrailingSpacesAndZeroes = bool
                  messageId = "string"
                  trailingSeparatorPolicy = "string"
                  trimLeadingAndTrailingSpacesAndZeroes = bool
                  validateCharacterSet = bool
                  validateEDITypes = bool
                  validateXSDTypes = bool
                }
              ]
              validationSettings = {
                allowLeadingAndTrailingSpacesAndZeroes = bool
                checkDuplicateGroupControlNumber = bool
                checkDuplicateInterchangeControlNumber = bool
                checkDuplicateTransactionSetControlNumber = bool
                interchangeControlNumberValidityDays = int
                trailingSeparatorPolicy = "string"
                trimLeadingAndTrailingSpacesAndZeroes = bool
                validateCharacterSet = bool
                validateEDITypes = bool
                validateXSDTypes = bool
              }
              x12DelimiterOverrides = [
                {
                  componentSeparator = int
                  dataElementSeparator = int
                  messageId = "string"
                  protocolVersion = "string"
                  replaceCharacter = int
                  replaceSeparatorsInPayload = bool
                  segmentTerminator = int
                  segmentTerminatorSuffix = "string"
                  targetNamespace = "string"
                }
              ]
            }
            receiverBusinessIdentity = {
              qualifier = "string"
              value = "string"
            }
            senderBusinessIdentity = {
              qualifier = "string"
              value = "string"
            }
          }
          sendAgreement = {
            protocolSettings = {
              acknowledgementSettings = {
                acknowledgementControlNumberLowerBound = int
                acknowledgementControlNumberPrefix = "string"
                acknowledgementControlNumberSuffix = "string"
                acknowledgementControlNumberUpperBound = int
                batchFunctionalAcknowledgements = bool
                batchImplementationAcknowledgements = bool
                batchTechnicalAcknowledgements = bool
                functionalAcknowledgementVersion = "string"
                implementationAcknowledgementVersion = "string"
                needFunctionalAcknowledgement = bool
                needImplementationAcknowledgement = bool
                needLoopForValidMessages = bool
                needTechnicalAcknowledgement = bool
                rolloverAcknowledgementControlNumber = bool
                sendSynchronousAcknowledgement = bool
              }
              envelopeOverrides = [
                {
                  dateFormat = "string"
                  functionalIdentifierCode = "string"
                  headerVersion = "string"
                  messageId = "string"
                  protocolVersion = "string"
                  receiverApplicationId = "string"
                  responsibleAgencyCode = "string"
                  senderApplicationId = "string"
                  targetNamespace = "string"
                  timeFormat = "string"
                }
              ]
              envelopeSettings = {
                controlStandardsId = int
                controlVersionNumber = "string"
                enableDefaultGroupHeaders = bool
                functionalGroupId = "string"
                groupControlNumberLowerBound = int
                groupControlNumberUpperBound = int
                groupHeaderAgencyCode = "string"
                groupHeaderDateFormat = "string"
                groupHeaderTimeFormat = "string"
                groupHeaderVersion = "string"
                interchangeControlNumberLowerBound = int
                interchangeControlNumberUpperBound = int
                overwriteExistingTransactionSetControlNumber = bool
                receiverApplicationId = "string"
                rolloverGroupControlNumber = bool
                rolloverInterchangeControlNumber = bool
                rolloverTransactionSetControlNumber = bool
                senderApplicationId = "string"
                transactionSetControlNumberLowerBound = int
                transactionSetControlNumberPrefix = "string"
                transactionSetControlNumberSuffix = "string"
                transactionSetControlNumberUpperBound = int
                usageIndicator = "string"
                useControlStandardsIdAsRepetitionCharacter = bool
              }
              framingSettings = {
                characterSet = "string"
                componentSeparator = int
                dataElementSeparator = int
                replaceCharacter = int
                replaceSeparatorsInPayload = bool
                segmentTerminator = int
                segmentTerminatorSuffix = "string"
              }
              messageFilter = {
                messageFilterType = "string"
              }
              messageFilterList = [
                {
                  messageId = "string"
                }
              ]
              processingSettings = {
                convertImpliedDecimal = bool
                createEmptyXmlTagsForTrailingSeparators = bool
                maskSecurityInfo = bool
                preserveInterchange = bool
                suspendInterchangeOnError = bool
                useDotAsDecimalSeparator = bool
              }
              schemaReferences = [
                {
                  messageId = "string"
                  schemaName = "string"
                  schemaVersion = "string"
                  senderApplicationId = "string"
                }
              ]
              securitySettings = {
                authorizationQualifier = "string"
                authorizationValue = "string"
                passwordValue = "string"
                securityQualifier = "string"
              }
              validationOverrides = [
                {
                  allowLeadingAndTrailingSpacesAndZeroes = bool
                  messageId = "string"
                  trailingSeparatorPolicy = "string"
                  trimLeadingAndTrailingSpacesAndZeroes = bool
                  validateCharacterSet = bool
                  validateEDITypes = bool
                  validateXSDTypes = bool
                }
              ]
              validationSettings = {
                allowLeadingAndTrailingSpacesAndZeroes = bool
                checkDuplicateGroupControlNumber = bool
                checkDuplicateInterchangeControlNumber = bool
                checkDuplicateTransactionSetControlNumber = bool
                interchangeControlNumberValidityDays = int
                trailingSeparatorPolicy = "string"
                trimLeadingAndTrailingSpacesAndZeroes = bool
                validateCharacterSet = bool
                validateEDITypes = bool
                validateXSDTypes = bool
              }
              x12DelimiterOverrides = [
                {
                  componentSeparator = int
                  dataElementSeparator = int
                  messageId = "string"
                  protocolVersion = "string"
                  replaceCharacter = int
                  replaceSeparatorsInPayload = bool
                  segmentTerminator = int
                  segmentTerminatorSuffix = "string"
                  targetNamespace = "string"
                }
              ]
            }
            receiverBusinessIdentity = {
              qualifier = "string"
              value = "string"
            }
            senderBusinessIdentity = {
              qualifier = "string"
              value = "string"
            }
          }
        }
      }
      guestIdentity = {
        qualifier = "string"
        value = "string"
      }
      guestPartner = "string"
      hostIdentity = {
        qualifier = "string"
        value = "string"
      }
      hostPartner = "string"
      metadata = ?
    }
  }
}
Property Values
AgreementContent
AS2AcknowledgementConnectionSettings
AS2AgreementContent
AS2EnvelopeSettings
AS2ErrorSettings
AS2MdnSettings
AS2MessageConnectionSettings
AS2OneWayAgreement
AS2ProtocolSettings
AS2SecuritySettings
AS2ValidationSettings
BusinessIdentity
EdifactAcknowledgementSettings
EdifactAgreementContent
EdifactDelimiterOverride
EdifactEnvelopeOverride
EdifactEnvelopeSettings
EdifactFramingSettings
EdifactMessageFilter
EdifactMessageIdentifier
EdifactOneWayAgreement
EdifactProcessingSettings
EdifactProtocolSettings
EdifactSchemaReference
EdifactValidationOverride
EdifactValidationSettings
IntegrationAccountAgreementProperties
Microsoft.Logic/integrationAccounts/agreements
ResourceTags
X12AcknowledgementSettings
X12AgreementContent
X12DelimiterOverrides
X12EnvelopeOverride
X12EnvelopeSettings
X12FramingSettings
X12MessageFilter
X12MessageIdentifier
X12OneWayAgreement
X12ProcessingSettings
X12ProtocolSettings
X12SchemaReference
X12SecuritySettings
X12ValidationOverride
X12ValidationSettings
Feedback
Was this page helpful?
Additional resources