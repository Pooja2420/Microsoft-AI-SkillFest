Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Set name and type for child resources
Article
2024-06-20
6 contributors
In this article
Child resources are resources that exist only within the context of another resource. For example, avirtual machine extensioncan't exist without avirtual machine. The extension resource is a child of the virtual machine.
Each parent resource accepts only certain resource types as child resources. The resource type for the child resource includes the resource type for the parent resource. For example,Microsoft.Web/sites/configandMicrosoft.Web/sites/extensionsare both child resources of theMicrosoft.Web/sites. The accepted resource types are specified in thetemplate schemaof the parent resource.
Microsoft.Web/sites/config
Microsoft.Web/sites/extensions
Microsoft.Web/sites
In an Azure Resource Manager template (ARM template), you can specify the child resource either within the parent resource or outside of the parent resource. The values you provide for the resource name and resource type vary based on whether the child resource is defined inside or outside of the parent resource.
Tip
We recommendBicepbecause it offers the same capabilities as ARM templates and the syntax is easier to use. To learn more, seechild resources.
Within parent resource
The following example shows the child resource included within the resources property of the parent resource.
"resources": [
  {
    <parent-resource>
    "resources": [
      <child-resource>
    ]
  }
]
"resources": [
  {
    <parent-resource>
    "resources": [
      <child-resource>
    ]
  }
]
Child resources can only be defined five levels deep.
When defined within the parent resource type, you format the type and name values as a single segment without slashes.
"type": "{child-resource-type}",
"name": "{child-resource-name}",
"type": "{child-resource-type}",
"name": "{child-resource-name}",
The following example shows a virtual network and with a subnet. Notice that the subnet is included within the resources array for the virtual network. The name is set toSubnet1and the type is set tosubnets. The child resource is marked as dependent on the parent resource because the parent resource must exist before the child resource can be deployed.
"resources": [
  {
    "type": "Microsoft.Network/virtualNetworks",
    "apiVersion": "2022-11-01",
    "name": "VNet1",
    "location": "[parameters('location')]",
    "properties": {
      "addressSpace": {
        "addressPrefixes": [
          "10.0.0.0/16"
        ]
      }
    },
    "resources": [
      {
        "type": "subnets",
        "apiVersion": "2022-11-01",
        "name": "Subnet1",
        "dependsOn": [
          "VNet1"
        ],
        "properties": {
          "addressPrefix": "10.0.0.0/24"
        }
      }
    ]
  }
]
"resources": [
  {
    "type": "Microsoft.Network/virtualNetworks",
    "apiVersion": "2022-11-01",
    "name": "VNet1",
    "location": "[parameters('location')]",
    "properties": {
      "addressSpace": {
        "addressPrefixes": [
          "10.0.0.0/16"
        ]
      }
    },
    "resources": [
      {
        "type": "subnets",
        "apiVersion": "2022-11-01",
        "name": "Subnet1",
        "dependsOn": [
          "VNet1"
        ],
        "properties": {
          "addressPrefix": "10.0.0.0/24"
        }
      }
    ]
  }
]
The full resource type is stillMicrosoft.Network/virtualNetworks/subnets. You don't provideMicrosoft.Network/virtualNetworks/because it's assumed from the parent resource type.
Microsoft.Network/virtualNetworks/subnets
Microsoft.Network/virtualNetworks/
The child resource name is set toSubnet1but the full name includes the parent name. You don't provideVNet1because it's assumed from the parent resource.
Outside parent resource
The following example shows the child resource outside of the parent resource. You might use this approach if the parent resource isn't deployed in the same template, or if want to usecopyto create more than one child resource.
"resources": [
  {
    <parent-resource>
  },
  {
    <child-resource>
  }
]
"resources": [
  {
    <parent-resource>
  },
  {
    <child-resource>
  }
]
When defined outside of the parent resource, you format the type and name values with slashes to include the parent type and name.
"type": "{resource-provider-namespace}/{parent-resource-type}/{child-resource-type}",
"name": "{parent-resource-name}/{child-resource-name}",
"type": "{resource-provider-namespace}/{parent-resource-type}/{child-resource-type}",
"name": "{parent-resource-name}/{child-resource-name}",
The following example shows a virtual network and subnet that are both defined at the root level. Notice that the subnet isn't included within the resources array for the virtual network. The name is set toVNet1/Subnet1and the type is set toMicrosoft.Network/virtualNetworks/subnets. The child resource is marked as dependent on the parent resource because the parent resource must exist before the child resource can be deployed.
Microsoft.Network/virtualNetworks/subnets
"resources": [
  {
    "type": "Microsoft.Network/virtualNetworks",
    "apiVersion": "2022-11-01",
    "name": "VNet1",
    "location": "[parameters('location')]",
    "properties": {
      "addressSpace": {
        "addressPrefixes": [
          "10.0.0.0/16"
        ]
      }
    }
  },
  {
    "type": "Microsoft.Network/virtualNetworks/subnets",
    "apiVersion": "2022-11-01",
    "name": "VNet1/Subnet1",
    "dependsOn": [
      "VNet1"
    ],
    "properties": {
      "addressPrefix": "10.0.0.0/24"
    }
  }
]
"resources": [
  {
    "type": "Microsoft.Network/virtualNetworks",
    "apiVersion": "2022-11-01",
    "name": "VNet1",
    "location": "[parameters('location')]",
    "properties": {
      "addressSpace": {
        "addressPrefixes": [
          "10.0.0.0/16"
        ]
      }
    }
  },
  {
    "type": "Microsoft.Network/virtualNetworks/subnets",
    "apiVersion": "2022-11-01",
    "name": "VNet1/Subnet1",
    "dependsOn": [
      "VNet1"
    ],
    "properties": {
      "addressPrefix": "10.0.0.0/24"
    }
  }
]
Next steps
To learn about creating ARM templates, seeUnderstand the structure and syntax of ARM templates.
To learn about the format of the resource name when referencing the resource, see thereference function.
Feedback
Was this page helpful?
Additional resources