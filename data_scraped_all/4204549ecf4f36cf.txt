Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Enable the .NET Profiler for web apps on an Azure virtual machine
Article
2025-04-03
2 contributors
In this article
Note
We recommend that you use the Azure Az PowerShell module to interact with Azure. To get started, seeInstall Azure PowerShell. To learn how to migrate to the Az PowerShell module, seeMigrate Azure PowerShell from AzureRM to Az.
In this article, you learn how to run Application Insights Profiler for .NET on your Azure virtual machine (VM) or Azure virtual machine scale set via three different methods:
Visual Studio and Azure Resource Manager
PowerShell
Azure Resource Explorer
Select your preferred method tab to:
In this guide, you learn how to:
Configure the Azure Diagnostics extension to run the .NET Profiler.
Install the Application Insights SDK on a VM.
Deploy your application.
View Profiler traces via the Application Insights instance in the Azure portal.
Note
Currently, Application Insights Profiler for .NET isn't supported for on-premises servers.
Prerequisites
A functioningASP.NET Core application.
AnApplication Insights resource.
To review the Azure Resource Manager templates (ARM templates) for the Azure Diagnostics extension:VMVirtual machine scale set
VM
Virtual machine scale set
Add the Application Insights SDK to your application
Open your ASP.NET core project in Visual Studio.
Open your ASP.NET core project in Visual Studio.
SelectProject>Add Application Insights Telemetry.
SelectProject>Add Application Insights Telemetry.
SelectAzure Application Insights>Next.
SelectAzure Application Insights>Next.
Select the subscription where your Application Insights resource lives and selectNext.
Select the subscription where your Application Insights resource lives and selectNext.
Select where to save the connection string and selectNext.
Select where to save the connection string and selectNext.
SelectFinish.
SelectFinish.
Note
For full instructions, including how to enable Application Insights on your ASP.NET Core application without Visual Studio, see theApplication Insights for ASP.NET Core applications.
Confirm the latest stable release of the Application Insights SDK
Go toProject>Manage NuGet Packages.
Go toProject>Manage NuGet Packages.
SelectMicrosoft.ApplicationInsights.AspNetCore.
SelectMicrosoft.ApplicationInsights.AspNetCore.
On the side pane, select the latest version of the SDK from the dropdown.
On the side pane, select the latest version of the SDK from the dropdown.
SelectUpdate.
SelectUpdate.

Enable the .NET Profiler
You can enable Profiler by any of three ways:
Within your ASP.NET Core application by using an Azure Resource Manager template and Visual Studio.Recommended.
By using a PowerShell command via the Azure CLI.
By using Azure Resource Explorer.
Visual Studio and ARM template
PowerShell
Azure Resource Explorer
Install the Azure Diagnostics extension
Choose which ARM template to use:VMVirtual machine scale set
Choose which ARM template to use:
VM
Virtual machine scale set
In the template, locate the resource of typeextension.
In the template, locate the resource of typeextension.
extension
In Visual Studio, go to thearm.jsonfile in your ASP.NET Core application that was added when you installed the Application Insights SDK.
In Visual Studio, go to thearm.jsonfile in your ASP.NET Core application that was added when you installed the Application Insights SDK.
arm.json
Add the resource typeextensionfrom the template to thearm.jsonfile to set up a VM or virtual machine scale set with Azure Diagnostics.
Add the resource typeextensionfrom the template to thearm.jsonfile to set up a VM or virtual machine scale set with Azure Diagnostics.
extension
arm.json
Within theWadCfgtag, add your Application Insights connection string toMyApplicationInsightsProfilerSink."WadCfg": {
  "SinksConfig": {
    "Sink": [
      {
        "name": "MyApplicationInsightsProfilerSink",
        "ApplicationInsightsProfiler": "YOUR_APPLICATION_INSIGHTS_INSTRUMENTATION_KEY"
      }
    ]
  }
}
Within theWadCfgtag, add your Application Insights connection string toMyApplicationInsightsProfilerSink.
WadCfg
MyApplicationInsightsProfilerSink
"WadCfg": {
  "SinksConfig": {
    "Sink": [
      {
        "name": "MyApplicationInsightsProfilerSink",
        "ApplicationInsightsProfiler": "YOUR_APPLICATION_INSIGHTS_INSTRUMENTATION_KEY"
      }
    ]
  }
}
"WadCfg": {
  "SinksConfig": {
    "Sink": [
      {
        "name": "MyApplicationInsightsProfilerSink",
        "ApplicationInsightsProfiler": "YOUR_APPLICATION_INSIGHTS_INSTRUMENTATION_KEY"
      }
    ]
  }
}
Deploy your application.
Deploy your application.
The following PowerShell commands are an approach for existing VMs that touch only the Azure Diagnostics extension.
Note
If you deploy the VM again, the sink will be lost. You need to update the config you use when you deploy the VM to preserve this setting.
Install Application Insights via the Azure Diagnostics config
Export the currently deployed Azure Diagnostics config to a file:$ConfigFilePath = [IO.Path]::GetTempFileName()
Export the currently deployed Azure Diagnostics config to a file:
$ConfigFilePath = [IO.Path]::GetTempFileName()
$ConfigFilePath = [IO.Path]::GetTempFileName()
Add the Application Insights Profiler sink to the config returned by the following command:(Get-AzVMDiagnosticsExtension -ResourceGroupName "YOUR_RESOURCE_GROUP" -VMName "YOUR_VM").PublicSettings | Out-File -Verbose $ConfigFilePathApplication Insights ProfilerWadCfg:"WadCfg": {
  "SinksConfig": {
    "Sink": [
      {
        "name": "MyApplicationInsightsProfilerSink",
        "ApplicationInsightsProfiler": "YOUR_APPLICATION_INSIGHTS_INSTRUMENTATION_KEY"
      }
    ]
  }
}
Add the Application Insights Profiler sink to the config returned by the following command:
(Get-AzVMDiagnosticsExtension -ResourceGroupName "YOUR_RESOURCE_GROUP" -VMName "YOUR_VM").PublicSettings | Out-File -Verbose $ConfigFilePath
(Get-AzVMDiagnosticsExtension -ResourceGroupName "YOUR_RESOURCE_GROUP" -VMName "YOUR_VM").PublicSettings | Out-File -Verbose $ConfigFilePath
Application Insights ProfilerWadCfg:
WadCfg
"WadCfg": {
  "SinksConfig": {
    "Sink": [
      {
        "name": "MyApplicationInsightsProfilerSink",
        "ApplicationInsightsProfiler": "YOUR_APPLICATION_INSIGHTS_INSTRUMENTATION_KEY"
      }
    ]
  }
}
"WadCfg": {
  "SinksConfig": {
    "Sink": [
      {
        "name": "MyApplicationInsightsProfilerSink",
        "ApplicationInsightsProfiler": "YOUR_APPLICATION_INSIGHTS_INSTRUMENTATION_KEY"
      }
    ]
  }
}
Run the following command to pass the updated config to theSet-AzVMDiagnosticsExtensioncommand.Set-AzVMDiagnosticsExtension -ResourceGroupName "YOUR_RESOURCE_GROUP" -VMName "YOUR_VM" -DiagnosticsConfigurationPath $ConfigFilePathNoteSet-AzVMDiagnosticsExtensionmight require the-StorageAccountNameargument. If your original diagnostics configuration had thestorageAccountNameproperty in theprotectedSettingssection (which isn't downloadable), be sure to pass the same original value you had in this cmdlet call.
Run the following command to pass the updated config to theSet-AzVMDiagnosticsExtensioncommand.
Set-AzVMDiagnosticsExtension
Set-AzVMDiagnosticsExtension -ResourceGroupName "YOUR_RESOURCE_GROUP" -VMName "YOUR_VM" -DiagnosticsConfigurationPath $ConfigFilePath
Set-AzVMDiagnosticsExtension -ResourceGroupName "YOUR_RESOURCE_GROUP" -VMName "YOUR_VM" -DiagnosticsConfigurationPath $ConfigFilePath
Note
Set-AzVMDiagnosticsExtensionmight require the-StorageAccountNameargument. If your original diagnostics configuration had thestorageAccountNameproperty in theprotectedSettingssection (which isn't downloadable), be sure to pass the same original value you had in this cmdlet call.
Set-AzVMDiagnosticsExtension
-StorageAccountName
storageAccountName
protectedSettings
IIS Http Tracing feature
If the intended application is running throughIIS, enable theIIS Http TracingWindows feature:
IIS Http Tracing
Establish remote access to the environment.
Establish remote access to the environment.
Use theAdd Windows featureswindow, or run the following command in PowerShell (as administrator):Enable-WindowsOptionalFeature -FeatureName IIS-HttpTracing -Online -AllIf establishing remote access is a problem, you can use theAzure CLIto run the following command:az vm run-command invoke -g MyResourceGroupName -n MyVirtualMachineName --command-id RunPowerShellScript --scripts "Enable-WindowsOptionalFeature -FeatureName IIS-HttpTracing -Online -All"
Use theAdd Windows featureswindow, or run the following command in PowerShell (as administrator):
Enable-WindowsOptionalFeature -FeatureName IIS-HttpTracing -Online -All
Enable-WindowsOptionalFeature -FeatureName IIS-HttpTracing -Online -All
If establishing remote access is a problem, you can use theAzure CLIto run the following command:
az vm run-command invoke -g MyResourceGroupName -n MyVirtualMachineName --command-id RunPowerShellScript --scripts "Enable-WindowsOptionalFeature -FeatureName IIS-HttpTracing -Online -All"
az vm run-command invoke -g MyResourceGroupName -n MyVirtualMachineName --command-id RunPowerShellScript --scripts "Enable-WindowsOptionalFeature -FeatureName IIS-HttpTracing -Online -All"
Deploy your application.
Deploy your application.
Set the Profiler sink by using Azure Resource Explorer
Because the Azure portal doesn't provide a way to set the Application Insights Profiler for .NET sink, you can useAzure Resource Explorerto set the sink.
Note
If you deploy the VM again, the sink will be lost. You need to update the config you use when you deploy the VM to preserve this setting.
Verify that the Microsoft Azure Diagnostics extension is installed by viewing the extensions installed for your virtual machine.
Verify that the Microsoft Azure Diagnostics extension is installed by viewing the extensions installed for your virtual machine.

Find the VM Diagnostics extension for your VM:Go toAzure Resource Explorer.Expandsubscriptionsand find the subscription that holds the resource group with your VM.Drill down to your VM extensions by selecting your resource group. Then selectMicrosoft.Compute>virtualMachines>[your virtual machine]>extensions.
Find the VM Diagnostics extension for your VM:
Go toAzure Resource Explorer.
Go toAzure Resource Explorer.
Expandsubscriptionsand find the subscription that holds the resource group with your VM.
Expandsubscriptionsand find the subscription that holds the resource group with your VM.
Drill down to your VM extensions by selecting your resource group. Then selectMicrosoft.Compute>virtualMachines>[your virtual machine]>extensions.
Drill down to your VM extensions by selecting your resource group. Then selectMicrosoft.Compute>virtualMachines>[your virtual machine]>extensions.

Add the Application Insights Profiler for .NET sink to theSinksConfignode underWadCfg. If you don't already have aSinksConfigsection, you might need to add one. To add the sink:Specify the proper Application Insights iKey in your settings.Switch the Explorer mode toRead/Writein the upper-right corner.SelectEdit."WadCfg": {
  "SinksConfig": {
    "Sink": [
      {
        "name": "MyApplicationInsightsProfilerSink",
        "ApplicationInsightsProfiler": "YOUR_APPLICATION_INSIGHTS_INSTRUMENTATION_KEY"
      }
    ]
  }
}
Add the Application Insights Profiler for .NET sink to theSinksConfignode underWadCfg. If you don't already have aSinksConfigsection, you might need to add one. To add the sink:
SinksConfig
WadCfg
SinksConfig
Specify the proper Application Insights iKey in your settings.
Specify the proper Application Insights iKey in your settings.
Switch the Explorer mode toRead/Writein the upper-right corner.
Switch the Explorer mode toRead/Writein the upper-right corner.
SelectEdit."WadCfg": {
  "SinksConfig": {
    "Sink": [
      {
        "name": "MyApplicationInsightsProfilerSink",
        "ApplicationInsightsProfiler": "YOUR_APPLICATION_INSIGHTS_INSTRUMENTATION_KEY"
      }
    ]
  }
}
SelectEdit.

"WadCfg": {
  "SinksConfig": {
    "Sink": [
      {
        "name": "MyApplicationInsightsProfilerSink",
        "ApplicationInsightsProfiler": "YOUR_APPLICATION_INSIGHTS_INSTRUMENTATION_KEY"
      }
    ]
  }
}
"WadCfg": {
  "SinksConfig": {
    "Sink": [
      {
        "name": "MyApplicationInsightsProfilerSink",
        "ApplicationInsightsProfiler": "YOUR_APPLICATION_INSIGHTS_INSTRUMENTATION_KEY"
      }
    ]
  }
}
After you've finished editing the config, selectPUT.
After you've finished editing the config, selectPUT.
If theputis successful, a green check mark appears in the middle of the screen.
If theputis successful, a green check mark appears in the middle of the screen.
put

Next steps
Generate load and view .NET Profiler traces
Feedback
Was this page helpful?
Additional resources