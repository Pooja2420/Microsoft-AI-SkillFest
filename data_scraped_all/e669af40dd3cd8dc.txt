Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Quickstart: Azure Queue Storage client library for JavaScript
Article
2023-06-29
8 contributors
In this article
Get started with the Azure Queue Storage client library for JavaScript. Azure Queue Storage is a service for storing large numbers of messages for later retrieval and processing. Follow these steps to install the package and try out example code for basic tasks.
API reference documentation|Library source code|Package (npm)|Samples
Use the Azure Queue Storage client library for JavaScript to:
Create a queue
Add messages to a queue
Peek at messages in a queue
Update a message in a queue
Get the queue length
Receive messages from a queue
Delete messages from a queue
Delete a queue
Prerequisites
Azure subscription -create one for free
Azure Storage account -create a storage account
CurrentNode.jsfor your operating system.
Setting up
This section walks you through preparing a project to work with the Azure Queue Storage client library for JavaScript.
Create the project
Create a Node.js application namedqueues-quickstart.
queues-quickstart
In a console window (such as cmd, PowerShell, or Bash), create a new directory for the project:mkdir queues-quickstart
In a console window (such as cmd, PowerShell, or Bash), create a new directory for the project:
mkdir queues-quickstart
mkdir queues-quickstart
Switch to the newly createdqueues-quickstartdirectory:cd queues-quickstart
Switch to the newly createdqueues-quickstartdirectory:
queues-quickstart
cd queues-quickstart
cd queues-quickstart
Create apackage.jsonfile:npm init -y
Create apackage.jsonfile:
npm init -y
npm init -y
Open the project in Visual Studio Code:code .
Open the project in Visual Studio Code:
code .
code .
Install the packages
From the project directory, install the following packages using thenpm installcommand.
npm install
Install the Azure Queue Storage npm package:npm install @azure/storage-queue
Install the Azure Queue Storage npm package:
npm install @azure/storage-queue
npm install @azure/storage-queue
Install the Azure Identity npm package to support passwordless connections:npm install @azure/identity
Install the Azure Identity npm package to support passwordless connections:
npm install @azure/identity
npm install @azure/identity
Install other dependencies used in this quickstart:npm install uuid dotenv
Install other dependencies used in this quickstart:
npm install uuid dotenv
npm install uuid dotenv
Set up the app framework
From the project directory:
Open a new text file in your code editor
Open a new text file in your code editor
Addrequirecalls to load Azure and Node.js modules
Addrequirecalls to load Azure and Node.js modules
require
Create the structure for the program, including basic exception handlingHere's the code:const { QueueClient } = require("@azure/storage-queue");
const { DefaultAzureCredential } = require('@azure/identity');
const { v1: uuidv1 } = require("uuid");

async function main() {
    console.log("Azure Queue Storage client library - JavaScript quickstart sample");

    // Quickstart code goes here
}

main().then(() => console.log("\nDone")).catch((ex) => console.log(ex.message));
Create the structure for the program, including basic exception handling
Here's the code:
const { QueueClient } = require("@azure/storage-queue");
const { DefaultAzureCredential } = require('@azure/identity');
const { v1: uuidv1 } = require("uuid");

async function main() {
    console.log("Azure Queue Storage client library - JavaScript quickstart sample");

    // Quickstart code goes here
}

main().then(() => console.log("\nDone")).catch((ex) => console.log(ex.message));
const { QueueClient } = require("@azure/storage-queue");
const { DefaultAzureCredential } = require('@azure/identity');
const { v1: uuidv1 } = require("uuid");

async function main() {
    console.log("Azure Queue Storage client library - JavaScript quickstart sample");

    // Quickstart code goes here
}

main().then(() => console.log("\nDone")).catch((ex) => console.log(ex.message));
Save the new file asindex.jsin thequeues-quickstartdirectory.
Save the new file asindex.jsin thequeues-quickstartdirectory.
index.js
queues-quickstart
Authenticate to Azure
Application requests to most Azure services must be authorized. Using theDefaultAzureCredentialclass provided by the Azure Identity client library is the recommended approach for implementing passwordless connections to Azure services in your code.
DefaultAzureCredential
You can also authorize requests to Azure services using passwords, connection strings, or other credentials directly. However, this approach should be used with caution. Developers must be diligent to never expose these secrets in an unsecure location. Anyone who gains access to the password or secret key is able to authenticate.DefaultAzureCredentialoffers improved management and security benefits over the account key to allow passwordless authentication. Both options are demonstrated in the following example.
DefaultAzureCredential
Passwordless (Recommended)
Connection String
DefaultAzureCredentialis a class provided by the Azure Identity client library for JavaScript. To learn more aboutDefaultAzureCredential, see theDefaultAzureCredential overview.DefaultAzureCredentialsupports multiple authentication methods and determines which method should be used at runtime. This approach enables your app to use different authentication methods in different environments (local vs. production) without implementing environment-specific code.
DefaultAzureCredential
DefaultAzureCredential
DefaultAzureCredential
For example, your app can authenticate using your Azure CLI sign-in credentials when developing locally, and then use amanaged identityonce it has been deployed to Azure. No code changes are required for this transition.
When developing locally, make sure that the user account that is accessing the queue data has the correct permissions. You'll needStorage Queue Data Contributorto read and write queue data. To assign yourself this role, you'll need to be assigned theUser Access Administratorrole, or another role that includes theMicrosoft.Authorization/roleAssignments/writeaction. You can assign Azure RBAC roles to a user using the Azure portal, Azure CLI, or Azure PowerShell. You can learn more about the available scopes for role assignments on thescope overviewpage.
In this scenario, you'll assign permissions to your user account, scoped to the storage account, to follow thePrinciple of Least Privilege. This practice gives users only the minimum permissions needed and creates more secure production environments.
The following example will assign theStorage Queue Data Contributorrole to your user account, which provides both read and write access to queue data in your storage account.
Important
In most cases it will take a minute or two for the role assignment to propagate in Azure, but in rare cases it may take up to eight minutes. If you receive authentication errors when you first run your code, wait a few moments and try again.
Azure portal
Azure CLI
PowerShell
In the Azure portal, locate your storage account using the main search bar or left navigation.
In the Azure portal, locate your storage account using the main search bar or left navigation.
On the storage account overview page, selectAccess control (IAM)from the left-hand menu.
On the storage account overview page, selectAccess control (IAM)from the left-hand menu.
On theAccess control (IAM)page, select theRole assignmentstab.
On theAccess control (IAM)page, select theRole assignmentstab.
Select+ Addfrom the top menu and thenAdd role assignmentfrom the resulting drop-down menu.
Select+ Addfrom the top menu and thenAdd role assignmentfrom the resulting drop-down menu.

Use the search box to filter the results to the desired role. For this example, search forStorage Queue Data Contributorand select the matching result and then chooseNext.
Use the search box to filter the results to the desired role. For this example, search forStorage Queue Data Contributorand select the matching result and then chooseNext.
UnderAssign access to, selectUser, group, or service principal, and then choose+ Select members.
UnderAssign access to, selectUser, group, or service principal, and then choose+ Select members.
In the dialog, search for your Microsoft Entra username (usually youruser@domainemail address) and then chooseSelectat the bottom of the dialog.
In the dialog, search for your Microsoft Entra username (usually youruser@domainemail address) and then chooseSelectat the bottom of the dialog.
SelectReview + assignto go to the final page, and thenReview + assignagain to complete the process.
SelectReview + assignto go to the final page, and thenReview + assignagain to complete the process.
To assign a role at the resource level using the Azure CLI, you first must retrieve the resource id using theaz storage account showcommand. You can filter the output properties using the--queryparameter.
az storage account show
--query
az storage account show --resource-group '<your-resource-group-name>' --name '<your-storage-account-name>' --query id
az storage account show --resource-group '<your-resource-group-name>' --name '<your-storage-account-name>' --query id
Copy the outputIdfrom the preceding command. You can then assign roles using theaz rolecommand of the Azure CLI.
Id
az role assignment create --assignee "<user@domain>" \
    --role "Storage Queue Data Contributor" \
    --scope "<your-resource-id>"
az role assignment create --assignee "<user@domain>" \
    --role "Storage Queue Data Contributor" \
    --scope "<your-resource-id>"
To assign a role at the resource level using Azure PowerShell, you first must retrieve the resource ID using theGet-AzResourcecommand.
Get-AzResource
Get-AzResource -ResourceGroupName "<yourResourceGroupname>" -Name "<yourStorageAccountName>"
Get-AzResource -ResourceGroupName "<yourResourceGroupname>" -Name "<yourStorageAccountName>"
Copy theIdvalue from the preceding command output. You can then assign roles using theNew-AzRoleAssignmentcommand in PowerShell.
Id
New-AzRoleAssignment -SignInName <user@domain> `
    -RoleDefinitionName "Storage Queue Data Contributor" `
    -Scope <yourStorageAccountId>
New-AzRoleAssignment -SignInName <user@domain> `
    -RoleDefinitionName "Storage Queue Data Contributor" `
    -Scope <yourStorageAccountId>
Copy your credentials from the Azure portal
When the sample application makes a request to Azure Storage, it must be authorized. To authorize a request, add your storage account credentials to the application as a connection string. To view your storage account credentials, follow these steps:
Sign in to theAzure portal.
Sign in to theAzure portal.
Locate your storage account.
Locate your storage account.
In the storage account menu pane, underSecurity + networking, selectAccess keys. Here, you can view the account access keys and the complete connection string for each key.
In the storage account menu pane, underSecurity + networking, selectAccess keys. Here, you can view the account access keys and the complete connection string for each key.

In theAccess keyspane, selectShow keys.
In theAccess keyspane, selectShow keys.
In thekey1section, locate theConnection stringvalue. Select theCopy to clipboardicon to copy the connection string. You'll add the connection string value to an environment variable in the next section.
In thekey1section, locate theConnection stringvalue. Select theCopy to clipboardicon to copy the connection string. You'll add the connection string value to an environment variable in the next section.

Configure your storage connection string
After you copy the connection string, write it to a new environment variable on the local machine running the application. To set the environment variable, open a console window, and follow the instructions for your operating system. Replace<yourconnectionstring>with your actual connection string.
<yourconnectionstring>
Windows
Linux and macOS
setx AZURE_STORAGE_CONNECTION_STRING "<yourconnectionstring>"
setx AZURE_STORAGE_CONNECTION_STRING "<yourconnectionstring>"
export AZURE_STORAGE_CONNECTION_STRING="<yourconnectionstring>"
export AZURE_STORAGE_CONNECTION_STRING="<yourconnectionstring>"
After you add the environment variable in Windows, you must start a new instance of the command window.
After you add the environment variable, restart any running programs that will need to read the environment variable. For example, restart your development environment or editor before you continue.
Important
The account access key should be used with caution. If your account access key is lost or accidentally placed in an insecure location, your service may become vulnerable. Anyone who has the access key is able to authorize requests against the storage account, and effectively has access to all the data.DefaultAzureCredentialprovides enhanced security features and benefits and is the recommended approach for managing authorization to Azure services.
DefaultAzureCredential
Object model
Azure Queue Storage is a service for storing large numbers of messages. A queue message can be up to 64 KB in size. A queue may contain millions of messages, up to the total capacity limit of a storage account. Queues are commonly used to create a backlog of work to process asynchronously. Queue Storage offers three types of resources:
Storage account: All access to Azure Storage is done through a storage account. For more information about storage accounts, seeStorage account overview
Queue: A queue contains a set of messages. All messages must be in a queue. Note that the queue name must be all lowercase. For information on naming queues, seeNaming Queues and Metadata.
Message: A message, in any format, of up to 64 KB. A message can remain in the queue for a maximum of 7 days. For version 2017-07-29 or later, the maximum time-to-live can be any positive number, or -1 indicating that the message doesn't expire. If this parameter is omitted, the default time-to-live is seven days.
The following diagram shows the relationship between these resources.

Use the following JavaScript classes to interact with these resources:
QueueServiceClient: AQueueServiceClientinstance represents a connection to a given storage account in the Azure Storage Queue service. This client allows you to manage the all queues in your storage account.
QueueServiceClient
QueueServiceClient
QueueClient: AQueueClientinstance represents a single queue in a storage account. This client allows you to manage and manipulate an individual queue and its messages.
QueueClient
QueueClient
Code examples
These example code snippets show you how to do the following actions with the Azure Queue Storage client library for JavaScript:
Authorize access and create a client object
Create a queue
Add messages to a queue
Peek at messages in a queue
Update a message in a queue
Get the queue length
Receive messages from a queue
Delete messages from a queue
Delete a queue
Passwordless (Recommended)
Connection String
Authorize access and create a client object
Make sure you're authenticated with the same Microsoft Entra account you assigned the role to. You can authenticate via Azure CLI, Visual Studio Code, or Azure PowerShell.
Azure CLI
Visual Studio Code
PowerShell
Sign-in to Azure through the Azure CLI using the following command:
az login
az login
You will need toinstall the Azure CLIto work withDefaultAzureCredentialthrough Visual Studio code.
DefaultAzureCredential
On the main menu of Visual Studio Code, navigate toTerminal > New Terminal.
Sign-in to Azure through the Azure CLI using the following command:
az login
az login
Sign-in to Azure using PowerShell via the following command:
Connect-AzAccount
Connect-AzAccount
Once authenticated, you can create and authorize aQueueClientobject usingDefaultAzureCredentialto access queue data in the storage account.DefaultAzureCredentialautomatically discovers and uses the account you signed in with in the previous step.
QueueClient
DefaultAzureCredential
DefaultAzureCredential
To authorize usingDefaultAzureCredential, make sure you've added the@azure/identitypackage, as described inInstall the packages. Also, be sure to load the@azure/identitymodule in theindex.jsfile:
DefaultAzureCredential
const { DefaultAzureCredential } = require('@azure/identity');
const { DefaultAzureCredential } = require('@azure/identity');
Decide on a name for the queue and create an instance of theQueueClientclass, usingDefaultAzureCredentialfor authorization. We use this client object to create and interact with the queue resource in the storage account.
QueueClient
DefaultAzureCredential
Important
Queue names may only contain lowercase letters, numbers, and hyphens, and must begin with a letter or a number. Each hyphen must be preceded and followed by a non-hyphen character. The name must also be between 3 and 63 characters long. For more information about naming queues, seeNaming queues and metadata.
Add the following code inside themainmethod, and make sure to replace the<storage-account-name>placeholder value:
main
<storage-account-name>
// Create a unique name for the queue
const queueName = "quickstart" + uuidv1();

// Instantiate a QueueClient which will be used to create and interact with a queue
// TODO: replace <storage-account-name> with the actual name
const queueClient = new QueueClient(`https://<storage-account-name>.queue.core.windows.net/${queueName}`, new DefaultAzureCredential());
// Create a unique name for the queue
const queueName = "quickstart" + uuidv1();

// Instantiate a QueueClient which will be used to create and interact with a queue
// TODO: replace <storage-account-name> with the actual name
const queueClient = new QueueClient(`https://<storage-account-name>.queue.core.windows.net/${queueName}`, new DefaultAzureCredential());
Get the connection string and create a client
The following code retrieves the connection string for the storage account. The connection string is stored in the environment variable created in theConfigure your storage connection stringsection.
Add this code inside themainmethod:
main
// Retrieve the connection string for use with the application. The storage
// connection string is stored in an environment variable on the machine
// running the application called AZURE_STORAGE_CONNECTION_STRING. If the
// environment variable is created after the application is launched in a
// console or with Visual Studio, the shell or application needs to be
// closed and reloaded to take the environment variable into account.
const AZURE_STORAGE_CONNECTION_STRING = process.env.AZURE_STORAGE_CONNECTION_STRING;
// Retrieve the connection string for use with the application. The storage
// connection string is stored in an environment variable on the machine
// running the application called AZURE_STORAGE_CONNECTION_STRING. If the
// environment variable is created after the application is launched in a
// console or with Visual Studio, the shell or application needs to be
// closed and reloaded to take the environment variable into account.
const AZURE_STORAGE_CONNECTION_STRING = process.env.AZURE_STORAGE_CONNECTION_STRING;
Decide on a name for the queue and create an instance of theQueueClientclass, using the connection string for authorization. We use this client object to create and interact with the queue resource in the storage account.
QueueClient
Important
Queue names may only contain lowercase letters, numbers, and hyphens, and must begin with a letter or a number. Each hyphen must be preceded and followed by a non-hyphen character. The name must also be between 3 and 63 characters long. For more information, seeNaming queues and metadata.
Add this code to the end of themainmethod:
main
// Create a unique name for the queue
const queueName = "quickstart" + uuidv1();

// Instantiate a QueueClient which will be used to create and interact with a queue
const queueClient = new QueueClient(AZURE_STORAGE_CONNECTION_STRING, queueName);
// Create a unique name for the queue
const queueName = "quickstart" + uuidv1();

// Instantiate a QueueClient which will be used to create and interact with a queue
const queueClient = new QueueClient(AZURE_STORAGE_CONNECTION_STRING, queueName);
Note
Messages sent using theQueueClientclass must be in a format that can be included in an XML request with UTF-8 encoding. To include markup in the message, the contents of the message must either be XML-escaped or Base64-encoded.
QueueClient
Queues messages are stored as strings. If you need to send a different data type, you must serialize that data type into a string when sending the message and deserialize the string format when reading the message.
To convertJSONto a string format and back again in Node.js, use the following helper functions:
function jsonToBase64(jsonObj) {
    const jsonString = JSON.stringify(jsonObj)
    return  Buffer.from(jsonString).toString('base64')
}
function encodeBase64ToJson(base64String) {
    const jsonString = Buffer.from(base64String,'base64').toString()
    return JSON.parse(jsonString)
}
function jsonToBase64(jsonObj) {
    const jsonString = JSON.stringify(jsonObj)
    return  Buffer.from(jsonString).toString('base64')
}
function encodeBase64ToJson(base64String) {
    const jsonString = Buffer.from(base64String,'base64').toString()
    return JSON.parse(jsonString)
}
Create a queue
Using theQueueClientobject, call thecreatemethod to create the queue in your storage account.
QueueClient
create
Add this code to the end of themainmethod:
main
console.log("\nCreating queue...");
console.log("\t", queueName);

// Create the queue
const createQueueResponse = await queueClient.create();
console.log("Queue created, requestId:", createQueueResponse.requestId);
console.log("\nCreating queue...");
console.log("\t", queueName);

// Create the queue
const createQueueResponse = await queueClient.create();
console.log("Queue created, requestId:", createQueueResponse.requestId);
Add messages to a queue
The following code snippet adds messages to queue by calling thesendMessagemethod. It also saves theQueueSendMessageResponsereturned from the thirdsendMessagecall. The returnedsendMessageResponseis used to update the message content later in the program.
sendMessage
QueueSendMessageResponse
sendMessage
sendMessageResponse
Add this code to the end of themainfunction:
main
console.log("\nAdding messages to the queue...");

// Send several messages to the queue
await queueClient.sendMessage("First message");
await queueClient.sendMessage("Second message");
const sendMessageResponse = await queueClient.sendMessage("Third message");

console.log("Messages added, requestId:", sendMessageResponse.requestId);
console.log("\nAdding messages to the queue...");

// Send several messages to the queue
await queueClient.sendMessage("First message");
await queueClient.sendMessage("Second message");
const sendMessageResponse = await queueClient.sendMessage("Third message");

console.log("Messages added, requestId:", sendMessageResponse.requestId);
Peek at messages in a queue
Peek at the messages in the queue by calling thepeekMessagesmethod. This method retrieves one or more messages from the front of the queue but doesn't alter the visibility of the message. By default,peekMessagespeeks at a single message.
peekMessages
peekMessages
Add this code to the end of themainfunction:
main
console.log("\nPeek at the messages in the queue...");

// Peek at messages in the queue
const peekedMessages = await queueClient.peekMessages({ numberOfMessages : 5 });

for (i = 0; i < peekedMessages.peekedMessageItems.length; i++) {
    // Display the peeked message
    console.log("\t", peekedMessages.peekedMessageItems[i].messageText);
}
console.log("\nPeek at the messages in the queue...");

// Peek at messages in the queue
const peekedMessages = await queueClient.peekMessages({ numberOfMessages : 5 });

for (i = 0; i < peekedMessages.peekedMessageItems.length; i++) {
    // Display the peeked message
    console.log("\t", peekedMessages.peekedMessageItems[i].messageText);
}
Update a message in a queue
Update the contents of a message by calling theupdateMessagemethod. This method can change a message's visibility timeout and contents. The message content must be a UTF-8 encoded string that is up to 64 KB in size. Along with the new content, pass inmessageIdandpopReceiptfrom the response that was saved earlier in the code. ThesendMessageResponseproperties identify which message to update.
updateMessage
messageId
popReceipt
sendMessageResponse
console.log("\nUpdating the third message in the queue...");

// Update a message using the response saved when calling sendMessage earlier
updateMessageResponse = await queueClient.updateMessage(
    sendMessageResponse.messageId,
    sendMessageResponse.popReceipt,
    "Third message has been updated"
);

console.log("Message updated, requestId:", updateMessageResponse.requestId);
console.log("\nUpdating the third message in the queue...");

// Update a message using the response saved when calling sendMessage earlier
updateMessageResponse = await queueClient.updateMessage(
    sendMessageResponse.messageId,
    sendMessageResponse.popReceipt,
    "Third message has been updated"
);

console.log("Message updated, requestId:", updateMessageResponse.requestId);
Get the queue length
ThegetPropertiesmethod returns metadata about the queue, including the approximate number of messages waiting in the queue.
getProperties
const properties = await queueClient.getProperties();
console.log("Approximate queue length: ", properties.approximateMessagesCount);
const properties = await queueClient.getProperties();
console.log("Approximate queue length: ", properties.approximateMessagesCount);
Receive messages from a queue
Download previously added messages by calling thereceiveMessagesmethod. In thenumberOfMessagesfield, pass in the maximum number of messages to receive for this call.
receiveMessages
numberOfMessages
Add this code to the end of themainfunction:
main
console.log("\nReceiving messages from the queue...");

// Get messages from the queue
const receivedMessagesResponse = await queueClient.receiveMessages({ numberOfMessages : 5 });

console.log("Messages received, requestId:", receivedMessagesResponse.requestId);
console.log("\nReceiving messages from the queue...");

// Get messages from the queue
const receivedMessagesResponse = await queueClient.receiveMessages({ numberOfMessages : 5 });

console.log("Messages received, requestId:", receivedMessagesResponse.requestId);
When calling thereceiveMessagesmethod, you can optionally specify values inQueueReceiveMessageOptionsto customize message retrieval. You can specify a value fornumberOfMessages, which is the number of messages to retrieve from the queue. The default is 1 message and the maximum is 32 messages. You can also specify a value forvisibilityTimeout, which hides the messages from other operations for the timeout period. The default is 30 seconds.
receiveMessages
numberOfMessages
visibilityTimeout
Delete messages from a queue
You can delete messages from the queue after they're received and processed. In this case, processing is just displaying the message on the console.
Delete messages by calling thedeleteMessagemethod. Any messages not explicitly deleted eventually become visible in the queue again for another chance to process them.
deleteMessage
Add this code to the end of themainfunction:
main
// 'Process' and delete messages from the queue
for (i = 0; i < receivedMessagesResponse.receivedMessageItems.length; i++) {
    receivedMessage = receivedMessagesResponse.receivedMessageItems[i];

    // 'Process' the message
    console.log("\tProcessing:", receivedMessage.messageText);

    // Delete the message
    const deleteMessageResponse = await queueClient.deleteMessage(
        receivedMessage.messageId,
        receivedMessage.popReceipt
    );
    console.log("\tMessage deleted, requestId:", deleteMessageResponse.requestId);
}
// 'Process' and delete messages from the queue
for (i = 0; i < receivedMessagesResponse.receivedMessageItems.length; i++) {
    receivedMessage = receivedMessagesResponse.receivedMessageItems[i];

    // 'Process' the message
    console.log("\tProcessing:", receivedMessage.messageText);

    // Delete the message
    const deleteMessageResponse = await queueClient.deleteMessage(
        receivedMessage.messageId,
        receivedMessage.popReceipt
    );
    console.log("\tMessage deleted, requestId:", deleteMessageResponse.requestId);
}
Delete a queue
The following code cleans up the resources the app created by deleting the queue using thedeletemethod.
delete
Add this code to the end of themainfunction and save the file:
main
// Delete the queue
console.log("\nDeleting queue...");
const deleteQueueResponse = await queueClient.delete();
console.log("Queue deleted, requestId:", deleteQueueResponse.requestId);
// Delete the queue
console.log("\nDeleting queue...");
const deleteQueueResponse = await queueClient.delete();
console.log("Queue deleted, requestId:", deleteQueueResponse.requestId);
Run the code
This app creates and adds three messages to an Azure queue. The code lists the messages in the queue, then retrieves and deletes them, before finally deleting the queue.
In your console window, navigate to the directory containing theindex.jsfile, then use the followingnodecommand to run the app.
index.js
node
node index.js
node index.js
The output of the app is similar to the following example:
Azure Queue Storage client library - JavaScript quickstart sample

Creating queue...
         quickstart<UUID>
Queue created, requestId: 5c0bc94c-6003-011b-7c11-b13d06000000

Adding messages to the queue...
Messages added, requestId: a0390321-8003-001e-0311-b18f2c000000

Peek at the messages in the queue...
         First message
         Second message
         Third message

Updating the third message in the queue...
Message updated, requestId: cb172c9a-5003-001c-2911-b18dd6000000

Receiving messages from the queue...
Messages received, requestId: a039036f-8003-001e-4811-b18f2c000000
        Processing: First message
        Message deleted, requestId: 4a65b82b-d003-00a7-5411-b16c22000000
        Processing: Second message
        Message deleted, requestId: 4f0b2958-c003-0030-2a11-b10feb000000
        Processing: Third message has been updated
        Message deleted, requestId: 6c978fcb-5003-00b6-2711-b15b39000000

Deleting queue...
Queue deleted, requestId: 5c0bca05-6003-011b-1e11-b13d06000000

Done
Azure Queue Storage client library - JavaScript quickstart sample

Creating queue...
         quickstart<UUID>
Queue created, requestId: 5c0bc94c-6003-011b-7c11-b13d06000000

Adding messages to the queue...
Messages added, requestId: a0390321-8003-001e-0311-b18f2c000000

Peek at the messages in the queue...
         First message
         Second message
         Third message

Updating the third message in the queue...
Message updated, requestId: cb172c9a-5003-001c-2911-b18dd6000000

Receiving messages from the queue...
Messages received, requestId: a039036f-8003-001e-4811-b18f2c000000
        Processing: First message
        Message deleted, requestId: 4a65b82b-d003-00a7-5411-b16c22000000
        Processing: Second message
        Message deleted, requestId: 4f0b2958-c003-0030-2a11-b10feb000000
        Processing: Third message has been updated
        Message deleted, requestId: 6c978fcb-5003-00b6-2711-b15b39000000

Deleting queue...
Queue deleted, requestId: 5c0bca05-6003-011b-1e11-b13d06000000

Done
Step through the code in your debugger and check yourAzure portalthroughout the process. Check your storage account to verify messages in the queue are created and deleted.
Next steps
In this quickstart, you learned how to create a queue and add messages to it using JavaScript code. Then you learned to peek, retrieve, and delete messages. Finally, you learned how to delete a message queue.
For tutorials, samples, quick starts and other documentation, visit:
Azure for JavaScript documentation
To learn more, see theAzure Queue Storage client library for JavaScript.
For more Azure Queue Storage sample apps, seeAzure Queue Storage client library for JavaScript - samples.
Feedback
Was this page helpful?
Additional resources