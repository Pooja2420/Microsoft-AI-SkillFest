SFTP
Reference

Connect to an SFTP server to receive file updates.
This article describes the operations for the SFTPbuilt-inconnector, which is availableonlyfor Standard workflows in single-tenant Azure Logic Apps. If you're looking for the SFTP-SSHmanagedconnector operations instead, seeSFTP managed connector reference.
The SFTP built-in connector runs on the Secure Shell (SSH) protocol to encrypt file data and uses theSSH.NET library, which is an open-source Secure Shell (SSH) library that supports .NET.
Connector how-to guide
For more information about connecting to an SFTP server from your workflow in Azure Logic Apps, seeConnect to an SFTP file server using SSH from workflows in Azure Logic Apps.
Differences from the SFTP-SSH managed connector
The SFTP built-in connector differs in the following ways:
Operations use streaming rather than chunking.
Triggers compare file versions not only based on the last modified timestamp, but also other file attributes such as size, permissions, and name.
Connection creation, authentication, and permissions
The SFTP built-in connector currently doesn't support the following SFTP servers:FileMage GatewayIBM DataPowerMessageWayOpenText Secure MFTOpenText GXSVShell Secure File Transfer Server
The SFTP built-in connector currently doesn't support the following SFTP servers:
FileMage Gateway
IBM DataPower
MessageWay
OpenText Secure MFT
OpenText GXS
VShell Secure File Transfer Server
When you create a connection to your SFTP server, you have to provide a name for your connection, your SFTP server address, and your user name.
When you create a connection to your SFTP server, you have to provide a name for your connection, your SFTP server address, and your user name.
You can optionally provide a root directory to specify relative paths in trigger and action inputs. This directory is prefixed in all input paths to create a full path to the resource, such as the input directory or file.NoteIf you don't specify a root directory, you must provide full absolute paths where applicable in trigger and action inputs.
You can optionally provide a root directory to specify relative paths in trigger and action inputs. This directory is prefixed in all input paths to create a full path to the resource, such as the input directory or file.
Note
If you don't specify a root directory, you must provide full absolute paths where applicable in trigger and action inputs.
The SFTP built-in connector supports both password authentication and private key authentication. You can use either method, but if you provide values for both methods, the client tries to authenticate using both. If either method succeeds, the client successfully creates the connection.
The SFTP built-in connector supports both password authentication and private key authentication. You can use either method, but if you provide values for both methods, the client tries to authenticate using both. If either method succeeds, the client successfully creates the connection.
You can omit the user password, but only if you don't provide an SSH private key. If you provide a private key, the client doesn't attempt password authentication.
You can omit the user password, but only if you don't provide an SSH private key. If you provide a private key, the client doesn't attempt password authentication.
The SFTP built-in connector supports only the following private key formats, key exchange algorithms, encryption algorithms, and fingerprints:Private key formats: RSA (Rivest Shamir Adleman) and DSA (Digital Signature Algorithm) keys in both OpenSSH and ssh.com formats. If your private key is in PuTTY (.ppk) file format, firstconvert the key to the OpenSSH (.pem) file format. For more information, see theprivate keys supported by SSH.NET.Key exchange algorithms: SeeKey Exchange Method - SSH.NET.Encryption algorithms: SeeEncryption Method - SSH.NET.Fingerprint: MD5. For more information, seeFind the MD5 fingerprint.
The SFTP built-in connector supports only the following private key formats, key exchange algorithms, encryption algorithms, and fingerprints:
Private key formats: RSA (Rivest Shamir Adleman) and DSA (Digital Signature Algorithm) keys in both OpenSSH and ssh.com formats. If your private key is in PuTTY (.ppk) file format, firstconvert the key to the OpenSSH (.pem) file format. For more information, see theprivate keys supported by SSH.NET.
Key exchange algorithms: SeeKey Exchange Method - SSH.NET.
Encryption algorithms: SeeEncryption Method - SSH.NET.
Fingerprint: MD5. For more information, seeFind the MD5 fingerprint.
SSH private key authentication
If you use an SSH private key, make sure to meet the following requirements:The private key uses a multi-line format with a header and footer.When you provide the private key for your connection,don't manually enter or edit the key, which might cause the connection to fail. Instead, make sure that you copy the key from your SSH private key file, and paste that key into the connection information box.To correctly copy and paste your SSH private key, follow these steps:Open your SSH private key file in any text editor. These steps continue using Notepad as an example.In Notepad, from theEditmenu, selectSelect all. (Press Ctrl + A)From theEditmenu, selectCopy.In the SFTP-SSH connection information box, paste the complete copied key into theSSH private keyproperty, which supports multiple lines.Don't manually enter or edit the key.After you finish entering the connection details, selectCreate.
If you use an SSH private key, make sure to meet the following requirements:
The private key uses a multi-line format with a header and footer.
The private key uses a multi-line format with a header and footer.
When you provide the private key for your connection,don't manually enter or edit the key, which might cause the connection to fail. Instead, make sure that you copy the key from your SSH private key file, and paste that key into the connection information box.To correctly copy and paste your SSH private key, follow these steps:Open your SSH private key file in any text editor. These steps continue using Notepad as an example.In Notepad, from theEditmenu, selectSelect all. (Press Ctrl + A)From theEditmenu, selectCopy.In the SFTP-SSH connection information box, paste the complete copied key into theSSH private keyproperty, which supports multiple lines.Don't manually enter or edit the key.After you finish entering the connection details, selectCreate.
When you provide the private key for your connection,don't manually enter or edit the key, which might cause the connection to fail. Instead, make sure that you copy the key from your SSH private key file, and paste that key into the connection information box.
To correctly copy and paste your SSH private key, follow these steps:
Open your SSH private key file in any text editor. These steps continue using Notepad as an example.
In Notepad, from theEditmenu, selectSelect all. (Press Ctrl + A)
From theEditmenu, selectCopy.
In the SFTP-SSH connection information box, paste the complete copied key into theSSH private keyproperty, which supports multiple lines.Don't manually enter or edit the key.
After you finish entering the connection details, selectCreate.

Convert PuTTY-based key to OpenSSH
If you have a PuTTY-based key, this key's format and the OpenSSH format use different file name extensions. The PuTTY format uses the .ppk, or PuTTY Private Key, file name extension. The OpenSSH format uses the .pem, or Privacy Enhanced Mail, file name extension. If your private key is in PuTTY format, and you have to use OpenSSH format, first convert the key to the OpenSSH format by following these steps:
Unix-based OSIf you don't have the PuTTY tools installed on your system, do that now, for example:sudo apt-get install -y puttyRun the following command, which creates a file that you can use with the SFTP-SSH connector:puttygen <path-to-private-key-file-in-PuTTY-format> -O private-openssh -o <path-to-private-key-file-in-OpenSSH-format>For example:puttygen /tmp/sftp/my-private-key-putty.ppk -O private-openssh -o /tmp/sftp/my-private-key-openssh.pem
Unix-based OS
If you don't have the PuTTY tools installed on your system, do that now, for example:sudo apt-get install -y putty
If you don't have the PuTTY tools installed on your system, do that now, for example:sudo apt-get install -y putty
sudo apt-get install -y putty
Run the following command, which creates a file that you can use with the SFTP-SSH connector:puttygen <path-to-private-key-file-in-PuTTY-format> -O private-openssh -o <path-to-private-key-file-in-OpenSSH-format>For example:puttygen /tmp/sftp/my-private-key-putty.ppk -O private-openssh -o /tmp/sftp/my-private-key-openssh.pem
Run the following command, which creates a file that you can use with the SFTP-SSH connector:
puttygen <path-to-private-key-file-in-PuTTY-format> -O private-openssh -o <path-to-private-key-file-in-OpenSSH-format>
puttygen <path-to-private-key-file-in-PuTTY-format> -O private-openssh -o <path-to-private-key-file-in-OpenSSH-format>
For example:
puttygen /tmp/sftp/my-private-key-putty.ppk -O private-openssh -o /tmp/sftp/my-private-key-openssh.pem
puttygen /tmp/sftp/my-private-key-putty.ppk -O private-openssh -o /tmp/sftp/my-private-key-openssh.pem
Windows OSIf you haven't done so already,download the latest PuTTY Generator (puttygen.exe) tool, and then open the tool.In the PuTTY Key Generator tool (puttygen.exe), underActions, selectLoad.Browse to your private key file in PuTTY format, and selectOpen.From theConversionsmenu, selectExport OpenSSH key.Save the private key file with the.pemfile name extension.
Windows OS
If you haven't done so already,download the latest PuTTY Generator (puttygen.exe) tool, and then open the tool.
In the PuTTY Key Generator tool (puttygen.exe), underActions, selectLoad.
Browse to your private key file in PuTTY format, and selectOpen.
From theConversionsmenu, selectExport OpenSSH key.
Save the private key file with the.pemfile name extension.

Provide an MD5 fingerprint to verify the SFTP host server
You can optionally provide the MD5 fingerprint for the host server's public key. If both the host server's fingerprint and expected fingerprint don't match, the connector rejects the connection.
If you have the host server's public key, which is a47-characterstring that's delimited by colons, you can get the MD5 fingerprint, which is a sequence with 16 pairs of hex digits delimited by colons, by using tools such asssh-keygen.
For example, from a Bash prompt, enter the following command:ssh-keygen -l -f id_rsa.pub -E md5
ssh-keygen -l -f id_rsa.pub -E md5
If you don't have the host server's public key, you can use the latestServer and Protocol Information Dialog tool by WinSCP, or you can use the PuTTY Configuration tool instead:
In the PuTTY Configuration tool (putty.exe), in theCategorywindow, expandConnection>SSH>Host keys.
In the PuTTY Configuration tool (putty.exe), in theCategorywindow, expandConnection>SSH>Host keys.
UnderHost key algorithm preference, open theAlgorithm selection policylist, and check thatRSAappears at the top.
UnderHost key algorithm preference, open theAlgorithm selection policylist, and check thatRSAappears at the top.
If RSA doesn't appear at the top, selectRSA, and then selectUpuntilRSAmoves to the top.
If RSA doesn't appear at the top, selectRSA, and then selectUpuntilRSAmoves to the top.
Connect to your SFTP server with PuTTY. After the connection is created, when the PUTTY security alert appears, selectMore info.NoteIf the security alert doesn't appear, try clearing theSshHostKeysentry. Open the Windows registry editor, and browse to the following entry:Computer\HKEY_CURRENT_USER\Software\SimonTatham\PuTTY\SshHostKeys
Connect to your SFTP server with PuTTY. After the connection is created, when the PUTTY security alert appears, selectMore info.
Note
If the security alert doesn't appear, try clearing theSshHostKeysentry. Open the Windows registry editor, and browse to the following entry:
Computer\HKEY_CURRENT_USER\Software\SimonTatham\PuTTY\SshHostKeys
Computer\HKEY_CURRENT_USER\Software\SimonTatham\PuTTY\SshHostKeys
After thePuTTY: information about the server's host keybox appears, find theMD5 fingerprintproperty, and copy the47-character string value, which looks like the following example:**:**:**:**:**:**:**:**:**:**:**:**:**:**:**:**
After thePuTTY: information about the server's host keybox appears, find theMD5 fingerprintproperty, and copy the47-character string value, which looks like the following example:
**:**:**:**:**:**:**:**:**:**:**:**:**:**:**:**
**:**:**:**:**:**:**:**:**:**:**:**:**:**:**:**
Built-in connector settings
In a Standard logic app resource, the SFTP built-in connector includes settings that control various thresholds for performance, timeout, execution time, and so on. For more information, review the following documentation:
Reference for app settings - local.settings.json
Reference for host settings - host.json - Built-in SFTP operations
Known issues and limitations with triggers
SFTP triggers work only on files in the specified folder, not subfolders. To also check a folder's subfolders, set up a separate flow for each subfolder.
SFTP triggers work only on files in the specified folder, not subfolders. To also check a folder's subfolders, set up a separate flow for each subfolder.
The first poll initializes the trigger state, so SFTP triggers won't detect any file changes at this time because no previous state exists for comparison. File changes or additions are detected only after the first poll.
The first poll initializes the trigger state, so SFTP triggers won't detect any file changes at this time because no previous state exists for comparison. File changes or additions are detected only after the first poll.
SFTP triggers might experience missing, incomplete, or delayed results.Missing resultsOn your SFTP server, use separate folders for triggers to monitor and for storage. This practice helps your monitoring folder stay small and keep triggers performing well because they check and compare the names and timestamps for all files in the folder.If you use the same folder for monitoring and storage, triggers might start to behave unexpectedly if too many files accumulate, for example, more than 500 files. Triggers might not fire at all or fail to return random files.If this problem happens to you, try moving the files that triggers no longer need to work on to a separate storage folder. This recommendation also means you'll need to find a way that automates moving these files to storage.Disable last modified timestamp preservation in any external tool or client that you use with your SFTP server.If you use any external tool or client that adds or updates files on your SFTP server, disable any feature that preserves a file's last modified timestamp. SFTP triggers work by polling, or checking, the SFTP file system and looking for any files that changed since the last poll. SFTP built-in connector triggers compare file versions using file attributes such as the last modified timestamp, size, permissions, and name. If you add or update a file with a timestamp that's earlier than the currently tracked last modified timestamp, the SFTP trigger won't detect this file.The following table lists some commonly used tools that preserve this timestamp and the steps to disable this feature:SFTP clientActionWinSCPGo toOptions>Preferences>Transfer>Edit>Preserve timestamp>Disable.FileZillaGo toTransfer>Preserve timestamps of transferred files>Disable.Incomplete or delayed resultsWhen an SFTP trigger checks for a newly created, added, or updated file, the trigger also checks whether the file is complete. For example, a file might have changes in progress when the trigger checks the SFTP server. To avoid returning an incomplete file, the trigger notes the file's last modified timestamp, but doesn't immediately return the file. Instead, the trigger returns the file only when the trigger checks the server again.Sometimes, this behavior might cause a delay that lasts as long as almost twice the trigger's polling interval. Due to this behavior, if you disable the SFTP trigger'sSplit Onsetting, the SFTP trigger might not return all files at the same time.
SFTP triggers might experience missing, incomplete, or delayed results.
Missing resultsOn your SFTP server, use separate folders for triggers to monitor and for storage. This practice helps your monitoring folder stay small and keep triggers performing well because they check and compare the names and timestamps for all files in the folder.If you use the same folder for monitoring and storage, triggers might start to behave unexpectedly if too many files accumulate, for example, more than 500 files. Triggers might not fire at all or fail to return random files.If this problem happens to you, try moving the files that triggers no longer need to work on to a separate storage folder. This recommendation also means you'll need to find a way that automates moving these files to storage.Disable last modified timestamp preservation in any external tool or client that you use with your SFTP server.If you use any external tool or client that adds or updates files on your SFTP server, disable any feature that preserves a file's last modified timestamp. SFTP triggers work by polling, or checking, the SFTP file system and looking for any files that changed since the last poll. SFTP built-in connector triggers compare file versions using file attributes such as the last modified timestamp, size, permissions, and name. If you add or update a file with a timestamp that's earlier than the currently tracked last modified timestamp, the SFTP trigger won't detect this file.The following table lists some commonly used tools that preserve this timestamp and the steps to disable this feature:SFTP clientActionWinSCPGo toOptions>Preferences>Transfer>Edit>Preserve timestamp>Disable.FileZillaGo toTransfer>Preserve timestamps of transferred files>Disable.
Missing results
On your SFTP server, use separate folders for triggers to monitor and for storage. This practice helps your monitoring folder stay small and keep triggers performing well because they check and compare the names and timestamps for all files in the folder.If you use the same folder for monitoring and storage, triggers might start to behave unexpectedly if too many files accumulate, for example, more than 500 files. Triggers might not fire at all or fail to return random files.If this problem happens to you, try moving the files that triggers no longer need to work on to a separate storage folder. This recommendation also means you'll need to find a way that automates moving these files to storage.
On your SFTP server, use separate folders for triggers to monitor and for storage. This practice helps your monitoring folder stay small and keep triggers performing well because they check and compare the names and timestamps for all files in the folder.
If you use the same folder for monitoring and storage, triggers might start to behave unexpectedly if too many files accumulate, for example, more than 500 files. Triggers might not fire at all or fail to return random files.
If this problem happens to you, try moving the files that triggers no longer need to work on to a separate storage folder. This recommendation also means you'll need to find a way that automates moving these files to storage.
Disable last modified timestamp preservation in any external tool or client that you use with your SFTP server.If you use any external tool or client that adds or updates files on your SFTP server, disable any feature that preserves a file's last modified timestamp. SFTP triggers work by polling, or checking, the SFTP file system and looking for any files that changed since the last poll. SFTP built-in connector triggers compare file versions using file attributes such as the last modified timestamp, size, permissions, and name. If you add or update a file with a timestamp that's earlier than the currently tracked last modified timestamp, the SFTP trigger won't detect this file.The following table lists some commonly used tools that preserve this timestamp and the steps to disable this feature:SFTP clientActionWinSCPGo toOptions>Preferences>Transfer>Edit>Preserve timestamp>Disable.FileZillaGo toTransfer>Preserve timestamps of transferred files>Disable.
Disable last modified timestamp preservation in any external tool or client that you use with your SFTP server.
If you use any external tool or client that adds or updates files on your SFTP server, disable any feature that preserves a file's last modified timestamp. SFTP triggers work by polling, or checking, the SFTP file system and looking for any files that changed since the last poll. SFTP built-in connector triggers compare file versions using file attributes such as the last modified timestamp, size, permissions, and name. If you add or update a file with a timestamp that's earlier than the currently tracked last modified timestamp, the SFTP trigger won't detect this file.
The following table lists some commonly used tools that preserve this timestamp and the steps to disable this feature:
Incomplete or delayed resultsWhen an SFTP trigger checks for a newly created, added, or updated file, the trigger also checks whether the file is complete. For example, a file might have changes in progress when the trigger checks the SFTP server. To avoid returning an incomplete file, the trigger notes the file's last modified timestamp, but doesn't immediately return the file. Instead, the trigger returns the file only when the trigger checks the server again.Sometimes, this behavior might cause a delay that lasts as long as almost twice the trigger's polling interval. Due to this behavior, if you disable the SFTP trigger'sSplit Onsetting, the SFTP trigger might not return all files at the same time.
Incomplete or delayed results
When an SFTP trigger checks for a newly created, added, or updated file, the trigger also checks whether the file is complete. For example, a file might have changes in progress when the trigger checks the SFTP server. To avoid returning an incomplete file, the trigger notes the file's last modified timestamp, but doesn't immediately return the file. Instead, the trigger returns the file only when the trigger checks the server again.
Sometimes, this behavior might cause a delay that lasts as long as almost twice the trigger's polling interval. Due to this behavior, if you disable the SFTP trigger'sSplit Onsetting, the SFTP trigger might not return all files at the same time.
Known issues and limitations with actions

Troubleshoot errors
Connection errors
The following errors might happen when you try to create the SSH connection before any trigger or actions starts to run. All these errors use400as the HTTP status code and are not retryable, which means that Azure Logic Apps doesn't retry the operation even if you set a custom retry policy. Only those operations that fail with the status codes408,429, and5xxare retried, based on the retry interval specified by the retry policy. You can always manually resubmit the workflow run to try again.
400
f6:fc:1c:03:17:5f:67:4f:1f:0b:50:5a:9f:f9:30:e5
Operation errors
Authentication
SSH host address
The IP or host name for the SSH server host.
Parameters
Username
The username for SFTP server sign-in and authentication.
Parameters
Password
The password for SFTP server sign-in and authentication.
Parameters
Port number
The port number for the SFTP server.
Parameters
Root directory
The root directory on the SFTP server.
Parameters
SSH private key
Parameters
SSH private key passphrase
Parameters
Host key fingerprint
Parameters
Disable Connection Cache
Parameters
Actions
Copy a file from the source file path to the destination file path.
Create a folder using the specified folder path.
Delete the file using the specified file path.
Delete the folder using the specified path. Use optional input 'Recursive delete' to delete a non-empty folder along with all its contents.
Extract an archive file inside the specified folder. Only ZIP archives are supported.
Get the full file content, provided that the file size doesn't exceed the limit of '209715200' bytes. For larger files, use the 'Get file content (V2)' action.
Get the content from the specified file. By default, the file size limit is '2147483648' bytes.
Get the metadata for a file or a directory in the specified path.
List the files and folders present in the given folder with their metadata. To exclude subfolders in the action output, use the optional input parameter 'List files only'.
Change the name of the specified file. The renamed file stays in the same directory.
Upload the specified content to a file in the specified file path. To create an empty file, ignore the optional input parameter named 'File content'.
Copy file
Copy a file from the source file path to the destination file path.
The file path for the file to copy, relative to the root directory.
The destination file path, relative to the root directory.
If the destination file exists, overwrite that file.
The name for the file or directory.
The absolute path for the file.
The path relative to the root directory for the SFTP server.
The uploaded file size in bytes.
Type of media.
The time when the file was last accessed.
The time when the file was last updated.
When this value is 'True', the item is a directory.
A value that indicates whether you have read permissions on this file or folder.
A value that indicates whether you have write permissions on this file or folder.
A value that indicates whether you have execute permissions on this file or folder.
Create folder
Create a folder using the specified folder path.
The path for the folder to create. This path must be relative to the root directory.
The name for the file or directory.
The absolute path for the file.
The path relative to the root directory for the SFTP server.
The uploaded file size in bytes.
Type of media.
The time when the file was last accessed.
The time when the file was last updated.
When this value is 'True', the item is a directory.
A value that indicates whether you have read permissions on this file or folder.
A value that indicates whether you have write permissions on this file or folder.
A value that indicates whether you have execute permissions on this file or folder.
Delete file
Delete the file using the specified file path.
The file path with the file extension if any, relative to the root directory.
If file doesn't exist, deletion is skipped, and this action won't fail.
When this value is 'True', the file was deleted.
Delete folder (Preview)
Delete the folder using the specified path. Use optional input 'Recursive delete' to delete a non-empty folder along with all its contents.
The folder path relative to the root directory.
This action will delete all files and subfolders in the given folder when this input is set to 'True'. Otherwise if the folder is non-empty, the action will fail.
Extract archive
Extract an archive file inside the specified folder. Only ZIP archives are supported.
The relative path to the archive file. The file name must have a .zip extension.
The folder path where to extract the files, relative to the root directory.
The input determines the behaviour  when dealing with files having same path as the archive already exist on the file server.
The relative path to the archive file. The file name must have a .zip extension.
The list containing the metadata for all the extracted files.
Get file content
Get the full file content, provided that the file size doesn't exceed the limit of '209715200' bytes. For larger files, use the 'Get file content (V2)' action.
The file path with the file extension if any, relative to the root directory.
Infer content-type based on extension
The file name.
The file content.
Get file content (V2)
Get the content from the specified file. By default, the file size limit is '2147483648' bytes.
The file path with the file extension if any, relative to the root directory.
Infer content-type based on extension
The content from the file provided as input.
Get file or directory metadata
Get the metadata for a file or a directory in the specified path.
The file or folder path, relative to the root directory.
List folder
List the files and folders present in the given folder with their metadata. To exclude subfolders in the action output, use the optional input parameter 'List files only'.
The path to the folder that's to be listed relative to the root directory.
When this parameter is set to 'True', only the files in the specified folder are listed. Subfolders are excluded.
The body of the 'List folder' action.
Rename file
Change the name of the specified file. The renamed file stays in the same directory.
The file path with the file extension if any, relative to the root directory.
The new name for the file. This value must be only the name, not the path.
When this value is 'True', return the metadata of the renamed file in this action's output.
The name for the file or directory.
The absolute path for the file.
The path relative to the root directory for the SFTP server.
The uploaded file size in bytes.
Type of media.
The time when the file was last accessed.
The time when the file was last updated.
When this value is 'True', the item is a directory.
A value that indicates whether you have read permissions on this file or folder.
A value that indicates whether you have write permissions on this file or folder.
A value that indicates whether you have execute permissions on this file or folder.
Upload file content
Upload the specified content to a file in the specified file path. To create an empty file, ignore the optional input parameter named 'File content'.
The file path with the file extension if any, relative to the root directory.
The file content to upload.
When this value is 'True', overwrite the file, if already existing.
The absolute path for the uploaded file.
The uploaded file size in bytes.
The file name.
The path relative to the root directory for the SFTP server.
Triggers
This trigger fires when a new file is added or an existing file is updated in the monitored folder. The trigger gets only one file per run. If multiple files exist, the trigger gets these files using multiple runs.
This trigger fires when one or multiple new files are added or updated in the monitored folder. If multiple files exist, the trigger gets all the files in a single run. To process files one at a time, enable the trigger's 'splitOn' property.
When a file is added or updated
This trigger fires when a new file is added or an existing file is updated in the monitored folder. The trigger gets only one file per run. If multiple files exist, the trigger gets these files using multiple runs.
The folder path relative to the root directory.
If this value is 'True', get the file content along with the file name and properties.
Ignore files that are older than the specified cutoff timestamp. Use the format 'YYYY-MM-DDTHH:MM:SS'. To disable this option, ignore this parameter.
Ignore files that have any of the specified file name extensions. Don't prefix extensions with the period ('.') separator.
The file content.
When files are added or updated
This trigger fires when one or multiple new files are added or updated in the monitored folder. If multiple files exist, the trigger gets all the files in a single run. To process files one at a time, enable the trigger's 'splitOn' property.
The folder path relative to the root directory.
If this value is 'True', get the file content along with the file name and properties.
The maximum number of files to include in a single trigger run. If you don't want this limit, ignore this parameter.
Ignore files that are older than the specified cutoff timestamp. Use the format 'YYYY-MM-DDTHH:MM:SS'. To disable this option, ignore this parameter.
Ignore files that have any of the specified file name extensions. Don't prefix extensions with the period ('.') separator.
The files that were added or updated.