Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Configure customer-managed keys in the same tenant for an existing storage account
Article
2023-11-07
7 contributors
In this article
Azure Storage encrypts all data in a storage account at rest. By default, data is encrypted with Microsoft-managed keys. For more control over encryption keys, you can manage your own keys. Customer-managed keys must be stored in Azure Key Vault or Key Vault Managed Hardware Security Model (HSM).
This article shows how to configure encryption with customer-managed keys for an existing storage account when the storage account and key vault are in the same tenant. The customer-managed keys are stored in a key vault.
To learn how to configure customer-managed keys for a new storage account, seeConfigure customer-managed keys in an Azure key vault for an new storage account.
To learn how to configure encryption with customer-managed keys stored in a managed HSM, seeConfigure encryption with customer-managed keys stored in Azure Key Vault Managed HSM.
Note
Azure Key Vault and Azure Key Vault Managed HSM support the same APIs and management interfaces for configuration of customer-managed keys. Any action that is supported for Azure Key Vault is also supported for Azure Key Vault Managed HSM.
Configure the key vault
You can use a new or existing key vault to store customer-managed keys. The storage account and key vault may be in different regions or subscriptions in the same tenant. To learn more about Azure Key Vault, seeAzure Key Vault OverviewandWhat is Azure Key Vault?.
Using customer-managed keys with Azure Storage encryption requires that both soft delete and purge protection be enabled for the key vault. Soft delete is enabled by default when you create a new key vault and cannot be disabled. You can enable purge protection either when you create the key vault or after it is created.
Azure Key Vault supports authorization with Azure RBAC via an Azure RBAC permission model. Microsoft recommends using the Azure RBAC permission model over key vault access policies. For more information, seeGrant permission to applications to access an Azure key vault using Azure RBAC.
Azure portal
PowerShell
Azure CLI
To learn how to create a key vault with the Azure portal, seeQuickstart: Create a key vault using the Azure portal. When you create the key vault, selectEnable purge protection, as shown in the following image.

To enable purge protection on an existing key vault, follow these steps:
Navigate to your key vault in the Azure portal.
UnderSettings, chooseProperties.
In thePurge protectionsection, chooseEnable purge protection.
To create a new key vault with PowerShell, install version 2.0.0 or later of theAz.KeyVaultPowerShell module. Then callNew-AzKeyVaultto create a new key vault. With version 2.0.0 and later of the Az.KeyVault module, soft delete is enabled by default when you create a new key vault.
The following example creates a new key vault with soft delete and purge protection enabled. The key vault's permission model is set to use Azure RBAC. Remember to replace the placeholder values in brackets with your own values.
$rgName = "<resource_group>"
$location = "<location>"
$kvName = "<key-vault>"

$keyVault = New-AzKeyVault -Name $kvName `
    -ResourceGroupName $rgName `
    -Location $location `
    -EnablePurgeProtection `
    -EnableRbacAuthorization
$rgName = "<resource_group>"
$location = "<location>"
$kvName = "<key-vault>"

$keyVault = New-AzKeyVault -Name $kvName `
    -ResourceGroupName $rgName `
    -Location $location `
    -EnablePurgeProtection `
    -EnableRbacAuthorization
To learn how to enable purge protection on an existing key vault with PowerShell, seeAzure Key Vault recovery overview.
After you have created the key vault, you'll need to assign theKey Vault Crypto Officerrole to yourself. This role enables you to create a key in the key vault. The following example assigns this role to a user, scoped to the key vault:
New-AzRoleAssignment -SignInName "<user-email>" `
    -RoleDefinitionName "Key Vault Crypto Officer" `
    -Scope $keyVault.ResourceId
New-AzRoleAssignment -SignInName "<user-email>" `
    -RoleDefinitionName "Key Vault Crypto Officer" `
    -Scope $keyVault.ResourceId
For more information on how to assign an RBAC role with PowerShell, seeAssign Azure roles using Azure PowerShell.
To create a new key vault using Azure CLI, callaz keyvault create. The following example creates a new key vault with soft delete and purge protection enabled. The key vault's permission model is set to use Azure RBAC. Remember to replace the placeholder values in brackets with your own values.
rgName="<resource_group>"
location="<location>"
kvName="<key-vault>"

az keyvault create \
    --name $kvName \
    --resource-group $rgName \
    --location $location \
    --enable-purge-protection \
    --enable-rbac-authorization
rgName="<resource_group>"
location="<location>"
kvName="<key-vault>"

az keyvault create \
    --name $kvName \
    --resource-group $rgName \
    --location $location \
    --enable-purge-protection \
    --enable-rbac-authorization
To learn how to enable purge protection on an existing key vault with Azure CLI, seeAzure Key Vault recovery overview.
After you have created the key vault, you'll need to assign theKey Vault Crypto Officerrole to yourself. This role enables you to create a key in the key vault. The following example assigns this role to a user, scoped to the key vault:
kvResourceId=$(az keyvault show --resource-group $rgName \
    --name $kvName \
    --query id \
    --output tsv)

az role assignment create --assignee "<user-email>" \
    --role "Key Vault Crypto Officer" \
    --scope $kvResourceId
kvResourceId=$(az keyvault show --resource-group $rgName \
    --name $kvName \
    --query id \
    --output tsv)

az role assignment create --assignee "<user-email>" \
    --role "Key Vault Crypto Officer" \
    --scope $kvResourceId
For more information on how to assign an RBAC role with Azure CLI, seeAssign Azure roles using Azure CLI.
Add a key
Next, add a key to the key vault. Before you add the key, make sure that you have assigned to yourself theKey Vault Crypto Officerrole.
Azure Storage encryption supports RSA and RSA-HSM keys of sizes 2048, 3072 and 4096. For more information about supported key types, seeAbout keys.
Azure portal
PowerShell
Azure CLI
To learn how to add a key with the Azure portal, seeQuickstart: Set and retrieve a key from Azure Key Vault using the Azure portal.
To add a key with PowerShell, callAdd-AzKeyVaultKey. Remember to replace the placeholder values in brackets with your own values and to use the variables defined in the previous examples.
$keyName = "<key-name>"

$key = Add-AzKeyVaultKey -VaultName $keyVault.VaultName `
    -Name $keyName `
    -Destination 'Software'
$keyName = "<key-name>"

$key = Add-AzKeyVaultKey -VaultName $keyVault.VaultName `
    -Name $keyName `
    -Destination 'Software'
To add a key with Azure CLI, callaz keyvault key create. Remember to replace the placeholder values in brackets with your own values.
keyName="<key-name>"

az keyvault key create \
    --name $keyName \
    --vault-name $kvName
keyName="<key-name>"

az keyvault key create \
    --name $keyName \
    --vault-name $kvName
Choose a managed identity to authorize access to the key vault
When you enable customer-managed keys for an existing storage account, you must specify a managed identity to be used to authorize access to the key vault that contains the key. The managed identity must have permissions to access the key in the key vault.
The managed identity that authorizes access to the key vault can be either a user-assigned or system-assigned managed identity. To learn more about system-assigned versus user-assigned managed identities, seeManaged identity types.
Use a user-assigned managed identity to authorize access
When you enable customer-managed keys for a new storage account, you must specify a user-assigned managed identity. An existing storage account supports using either a user-assigned managed identity or a system-assigned managed identity to configure customer-managed keys.
When you configure customer-managed keys with a user-assigned managed identity, the user-assigned managed identity is used to authorize access to the key vault that contains the key. You must create the user-assigned identity before you configure customer-managed keys.
A user-assigned managed identity is a standalone Azure resource. To learn more about user-assigned managed identities, seeManaged identity types. To learn how to create and manage a user-assigned managed identity, seeManage user-assigned managed identities.
The user-assigned managed identity must have permissions to access the key in the key vault. Assign theKey Vault Crypto Service Encryption Userrole to the user-assigned managed identity with key vault scope to grant these permissions.
Azure portal
PowerShell
Azure CLI
Before you can configure customer-managed keys with a user-assigned managed identity, you must assign theKey Vault Crypto Service Encryption Userrole to the user-assigned managed identity, scoped to the key vault. This role grants the user-assigned managed identity permissions to access the key in the key vault. For more information on assigning Azure RBAC roles with the Azure portal, seeAssign Azure roles using the Azure portal.
When you configure customer-managed keys with the Azure portal, you can select an existing user-assigned identity through the portal user interface.
The following example shows how to retrieve the user-assigned managed identity and assign to it the required RBAC role, scoped to the key vault. Remember to replace the placeholder values in brackets with your own values and to use the variables defined in the previous examples:
$userIdentity = Get-AzUserAssignedIdentity -Name <user-assigned-identity> `
    -ResourceGroupName $rgName

$principalId = $userIdentity.PrincipalId

New-AzRoleAssignment -ObjectId $principalId `
    -RoleDefinitionName "Key Vault Crypto Service Encryption User" `
    -Scope $keyVault.ResourceId
$userIdentity = Get-AzUserAssignedIdentity -Name <user-assigned-identity> `
    -ResourceGroupName $rgName

$principalId = $userIdentity.PrincipalId

New-AzRoleAssignment -ObjectId $principalId `
    -RoleDefinitionName "Key Vault Crypto Service Encryption User" `
    -Scope $keyVault.ResourceId
The following example shows how to retrieve the user-assigned managed identity and assign to it the required RBAC role, scoped to the key vault. Remember to replace the placeholder values in brackets with your own values and to use the variables defined in the previous examples:
identityResourceId=$(az identity show --name <user-assigned-identity> \
    --resource-group $rgName \
    --query id \
    --output tsv)

principalId=$(az identity show --name <user-assigned-identity> \
    --resource-group $rgName \
    --query principalId \
    --output tsv)

az role assignment create --assignee-object-id $principalId \
    --role "Key Vault Crypto Service Encryption User" \
    --scope $kvResourceId \
    --assignee-principal-type ServicePrincipal
identityResourceId=$(az identity show --name <user-assigned-identity> \
    --resource-group $rgName \
    --query id \
    --output tsv)

principalId=$(az identity show --name <user-assigned-identity> \
    --resource-group $rgName \
    --query principalId \
    --output tsv)

az role assignment create --assignee-object-id $principalId \
    --role "Key Vault Crypto Service Encryption User" \
    --scope $kvResourceId \
    --assignee-principal-type ServicePrincipal
Use a system-assigned managed identity to authorize access
A system-assigned managed identity is associated with an instance of an Azure service, in this case an Azure Storage account. You must explicitly assign a system-assigned managed identity to a storage account before you can use the system-assigned managed identity to authorize access to the key vault that contains your customer-managed key.
Only existing storage accounts can use a system-assigned identity to authorize access to the key vault. New storage accounts must use a user-assigned identity, if customer-managed keys are configured on account creation.
The system-assigned managed identity must have permissions to access the key in the key vault. Assign theKey Vault Crypto Service Encryption Userrole to the system-assigned managed identity with key vault scope to grant these permissions.
Azure portal
PowerShell
Azure CLI
Before you can configure customer-managed keys with a system-assigned managed identity, you must assign theKey Vault Crypto Service Encryption Userrole to the system-assigned managed identity, scoped to the key vault. This role grants the system-assigned managed identity permissions to access the key in the key vault. For more information on assigning Azure RBAC roles with the Azure portal, seeAssign Azure roles using the Azure portal.
When you configure customer-managed keys with the Azure portal with a system-assigned managed identity, the system-assigned managed identity is assigned to the storage account for you under the covers.
To assign a system-assigned managed identity to your storage account, first callSet-AzStorageAccount:
$accountName = "<storage-account>"

$storageAccount = Set-AzStorageAccount -ResourceGroupName $rgName `
    -Name $accountName `
    -AssignIdentity
$accountName = "<storage-account>"

$storageAccount = Set-AzStorageAccount -ResourceGroupName $rgName `
    -Name $accountName `
    -AssignIdentity
Next, assign to the system-assigned managed identity the required RBAC role, scoped to the key vault. Remember to replace the placeholder values in brackets with your own values and to use the variables defined in the previous examples:
$principalId = $storageAccount.Identity.PrincipalId

New-AzRoleAssignment -ObjectId $storageAccount.Identity.PrincipalId `
    -RoleDefinitionName "Key Vault Crypto Service Encryption User" `
    -Scope $keyVault.ResourceId
$principalId = $storageAccount.Identity.PrincipalId

New-AzRoleAssignment -ObjectId $storageAccount.Identity.PrincipalId `
    -RoleDefinitionName "Key Vault Crypto Service Encryption User" `
    -Scope $keyVault.ResourceId
To authenticate access to the key vault with a system-assigned managed identity, first assign the system-assigned managed identity to the storage account by callingaz storage account update:
accountName="<storage-account>"

az storage account update \
    --name $accountName \
    --resource-group $rgName \
    --assign-identity
accountName="<storage-account>"

az storage account update \
    --name $accountName \
    --resource-group $rgName \
    --assign-identity
Next, assign to the system-assigned managed identity the required RBAC role, scoped to the key vault. Remember to replace the placeholder values in brackets with your own values and to use the variables defined in the previous examples:
principalId=$(az storage account show --name $accountName \
    --resource-group $rgName \
    --query identity.principalId \
    --output tsv)

az role assignment create --assignee-object-id $principalId \
    --role "Key Vault Crypto Service Encryption User" \
    --scope $kvResourceId
principalId=$(az storage account show --name $accountName \
    --resource-group $rgName \
    --query identity.principalId \
    --output tsv)

az role assignment create --assignee-object-id $principalId \
    --role "Key Vault Crypto Service Encryption User" \
    --scope $kvResourceId
Configure customer-managed keys for an existing account
When you configure encryption with customer-managed keys for an existing storage account, you can choose to automatically update the key version used for Azure Storage encryption whenever a new version is available in the associated key vault. Alternately, you can explicitly specify a key version to be used for encryption until the key version is manually updated.
When the key version is changed, whether automatically or manually, the protection of the root encryption key changes, but the data in your Azure Storage account remains encrypted at all times. There's no further action required on your part to ensure that your data is protected. Rotating the key version doesn't impact performance. There's no downtime associated with rotating the key version.
You can use either a system-assigned or user-assigned managed identity to authorize access to the key vault when you configure customer-managed keys for an existing storage account.
Note
To rotate a key, create a new version of the key in Azure Key Vault. Azure Storage does not handle key rotation, so you will need to manage rotation of the key in the key vault. You canconfigure key auto-rotation in Azure Key Vaultor rotate your key manually.
Configure encryption for automatic updating of key versions
Azure Storage can automatically update the customer-managed key that is used for encryption to use the latest key version from the key vault. Azure Storage checks the key vault daily for a new version of the key. When a new version becomes available, then Azure Storage automatically begins using the latest version of the key for encryption.
Important
Azure Storage checks the key vault for a new key version only once daily. When you rotate a key, be sure to wait 24 hours before disabling the older version.
Azure portal
PowerShell
Azure CLI
To configure customer-managed keys for an existing account with automatic updating of the key version in the Azure portal, follow the steps below:
Navigate to your storage account.
Navigate to your storage account.
UnderSecurity + networking, selectEncryption. By default, key management is set toMicrosoft-Managed Keysas shown in the image below:
UnderSecurity + networking, selectEncryption. By default, key management is set toMicrosoft-Managed Keysas shown in the image below:

Select theCustomer-Managed Keysoption. If the account was previously configured forCustomer-Managed Keyswith manual updating of the key version, selectChange keynear the bottom of the page.
Select theCustomer-Managed Keysoption. If the account was previously configured forCustomer-Managed Keyswith manual updating of the key version, selectChange keynear the bottom of the page.
Choose theSelect from Key Vaultoption.
Choose theSelect from Key Vaultoption.
SelectSelect a key vault and key.
SelectSelect a key vault and key.
Select the key vault containing the key you want to use. You can also create a new key vault.
Select the key vault containing the key you want to use. You can also create a new key vault.
Select the key from the key vault. You can also create a new key.
Select the key from the key vault. You can also create a new key.

Select the type of identity to use to authenticate access to the key vault. The options includeSystem-assigned(the default) orUser-assigned. To learn more about each type of managed identity, seeManaged identity types.If you selectSystem-assigned, the system-assigned managed identity for the storage account is created under the covers, if it doesn't already exist.If you selectUser-assigned, then you must select an existing user-assigned identity that has permissions to access the key vault. To learn how to create a user-assigned identity, seeManage user-assigned managed identities.
Select the type of identity to use to authenticate access to the key vault. The options includeSystem-assigned(the default) orUser-assigned. To learn more about each type of managed identity, seeManaged identity types.
If you selectSystem-assigned, the system-assigned managed identity for the storage account is created under the covers, if it doesn't already exist.
If you selectUser-assigned, then you must select an existing user-assigned identity that has permissions to access the key vault. To learn how to create a user-assigned identity, seeManage user-assigned managed identities.

Save your changes.
Save your changes.
After you specify the key, the Azure portal indicates that automatic updating of the key version is enabled and displays the key version currently in use for encryption. The portal also displays the type of managed identity used to authorize access to the key vault and the principal ID for the managed identity.

To configure customer-managed keys for an existing account with automatic updating of the key version with PowerShell, install theAz.Storagemodule, version 2.0.0 or later.
Next, callSet-AzStorageAccountto update the storage account's encryption settings. Include theKeyvaultEncryptionparameter to enable customer-managed keys for the storage account, and setKeyVersionto an empty string to enable automatic updating of the key version. If the storage account was previously configured for customer-managed keys with a specific key version, then setting the key version to an empty string enables automatic updating of the key version going forward.
KeyvaultEncryption
KeyVersion
$accountName = "<storage-account>"

# Use this form of the command with a user-assigned managed identity.
Set-AzStorageAccount -ResourceGroupName $rgName `
    -AccountName $accountName `
    -IdentityType SystemAssignedUserAssigned `
    -UserAssignedIdentityId $userIdentity.Id `
    -KeyvaultEncryption `
    -KeyVaultUri $keyVault.VaultUri `
    -KeyName $key.Name `
    -KeyVersion "" `
    -KeyVaultUserAssignedIdentityId $userIdentity.Id

# Use this form of the command with a system-assigned managed identity.
Set-AzStorageAccount -ResourceGroupName $rgName `
    -AccountName $accountName `
    -KeyvaultEncryption `
    -KeyName $key.Name `
    -KeyVersion "" `
    -KeyVaultUri $keyVault.VaultUri
$accountName = "<storage-account>"

# Use this form of the command with a user-assigned managed identity.
Set-AzStorageAccount -ResourceGroupName $rgName `
    -AccountName $accountName `
    -IdentityType SystemAssignedUserAssigned `
    -UserAssignedIdentityId $userIdentity.Id `
    -KeyvaultEncryption `
    -KeyVaultUri $keyVault.VaultUri `
    -KeyName $key.Name `
    -KeyVersion "" `
    -KeyVaultUserAssignedIdentityId $userIdentity.Id

# Use this form of the command with a system-assigned managed identity.
Set-AzStorageAccount -ResourceGroupName $rgName `
    -AccountName $accountName `
    -KeyvaultEncryption `
    -KeyName $key.Name `
    -KeyVersion "" `
    -KeyVaultUri $keyVault.VaultUri
To configure customer-managed keys for an existing account with automatic updating of the key version with Azure CLI, installAzure CLI version 2.4.0or later. For more information, seeInstall the Azure CLI.
Next, callaz storage account updateto update the storage account's encryption settings. Include the--encryption-key-sourceparameter and set it toMicrosoft.Keyvaultto enable customer-managed keys for the account, and setencryption-key-versionto an empty string to enable automatic updating of the key version. If the storage account was previously configured for customer-managed keys with a specific key version, then setting the key version to an empty string enables automatic updating of the key version going forward.
--encryption-key-source
Microsoft.Keyvault
encryption-key-version
accountName="<storage-account>"

keyVaultUri=$(az keyvault show \
    --name $kvName \
    --resource-group $rgName \
    --query properties.vaultUri \
    --output tsv)

# Use this form of the command with a user-assigned managed identity.
az storage account update \
    --name $accountName \
    --resource-group $rgName \
    --identity-type SystemAssigned,UserAssigned \
    --user-identity-id $identityResourceId \
    --encryption-key-name $keyName \
    --encryption-key-version "" \
    --encryption-key-source Microsoft.Keyvault \
    --encryption-key-vault $keyVaultUri \
    --key-vault-user-identity-id $identityResourceId

# Use this form of the command with a system-assigned managed identity.
az storage account update \
    --name $accountName \
    --resource-group $rgName \
    --encryption-key-name $keyName \
    --encryption-key-version "" \
    --encryption-key-source Microsoft.Keyvault \
    --encryption-key-vault $keyVaultUri
accountName="<storage-account>"

keyVaultUri=$(az keyvault show \
    --name $kvName \
    --resource-group $rgName \
    --query properties.vaultUri \
    --output tsv)

# Use this form of the command with a user-assigned managed identity.
az storage account update \
    --name $accountName \
    --resource-group $rgName \
    --identity-type SystemAssigned,UserAssigned \
    --user-identity-id $identityResourceId \
    --encryption-key-name $keyName \
    --encryption-key-version "" \
    --encryption-key-source Microsoft.Keyvault \
    --encryption-key-vault $keyVaultUri \
    --key-vault-user-identity-id $identityResourceId

# Use this form of the command with a system-assigned managed identity.
az storage account update \
    --name $accountName \
    --resource-group $rgName \
    --encryption-key-name $keyName \
    --encryption-key-version "" \
    --encryption-key-source Microsoft.Keyvault \
    --encryption-key-vault $keyVaultUri
Configure encryption for manual updating of key versions
If you prefer to manually update the key version, then explicitly specify the version at the time that you configure encryption with customer-managed keys. In this case, Azure Storage won't automatically update the key version when a new version is created in the key vault. To use a new key version, you must manually update the version used for Azure Storage encryption.
Azure portal
PowerShell
Azure CLI
To configure customer-managed keys with manual updating of the key version in the Azure portal, specify the key URI, including the version. To specify a key as a URI, follow these steps:
To locate the key URI in the Azure portal, navigate to your key vault, and select theKeyssetting. Select the desired key, then select the key to view its versions. Select a key version to view the settings for that version.
To locate the key URI in the Azure portal, navigate to your key vault, and select theKeyssetting. Select the desired key, then select the key to view its versions. Select a key version to view the settings for that version.
Copy the value of theKey Identifierfield, which provides the URI.
Copy the value of theKey Identifierfield, which provides the URI.

In theEncryption keysettings for your storage account, choose theEnter key URIoption.
In theEncryption keysettings for your storage account, choose theEnter key URIoption.
Paste the URI that you copied into theKey URIfield. Omit the key version from the URI to enable automatic updating of the key version.
Paste the URI that you copied into theKey URIfield. Omit the key version from the URI to enable automatic updating of the key version.

Specify the subscription that contains the key vault.
Specify the subscription that contains the key vault.
Specify either a system-assigned or user-assigned managed identity.
Specify either a system-assigned or user-assigned managed identity.
Save your changes.
Save your changes.
To configure customer-managed keys with manual updating of the key version, explicitly provide the key version when you configure encryption for the storage account. CallSet-AzStorageAccountto update the storage account's encryption settings, as shown in the following example, and include the-KeyvaultEncryptionoption to enable customer-managed keys for the storage account.
Remember to replace the placeholder values in brackets with your own values and to use the variables defined in the previous examples.
$accountName = "<storage-account>"

# Use this form of the command with a user-assigned managed identity.
Set-AzStorageAccount -ResourceGroupName $rgName `
    -AccountName $accountName `
    -IdentityType SystemAssignedUserAssigned `
    -UserAssignedIdentityId $userIdentity.Id `
    -KeyvaultEncryption `
    -KeyVaultUri $keyVault.VaultUri `
    -KeyName $key.Name `
    -KeyVersion $key.Version `
    -KeyVaultUserAssignedIdentityId $userIdentity.Id

# Use this form of the command with a system-assigned managed identity.
Set-AzStorageAccount -ResourceGroupName $rgName `
    -AccountName $accountName `
    -KeyvaultEncryption `
    -KeyVaultUri $keyVault.VaultUri `
    -KeyName $key.Name `
    -KeyVersion $key.Version
$accountName = "<storage-account>"

# Use this form of the command with a user-assigned managed identity.
Set-AzStorageAccount -ResourceGroupName $rgName `
    -AccountName $accountName `
    -IdentityType SystemAssignedUserAssigned `
    -UserAssignedIdentityId $userIdentity.Id `
    -KeyvaultEncryption `
    -KeyVaultUri $keyVault.VaultUri `
    -KeyName $key.Name `
    -KeyVersion $key.Version `
    -KeyVaultUserAssignedIdentityId $userIdentity.Id

# Use this form of the command with a system-assigned managed identity.
Set-AzStorageAccount -ResourceGroupName $rgName `
    -AccountName $accountName `
    -KeyvaultEncryption `
    -KeyVaultUri $keyVault.VaultUri `
    -KeyName $key.Name `
    -KeyVersion $key.Version
When you manually update the key version, you then need to update the storage account's encryption settings to use the new version. First, callGet-AzKeyVaultKeyto get the latest version of the key. Then callSet-AzStorageAccountto update the storage account's encryption settings to use the new version of the key, as shown in the previous example.
To configure customer-managed keys with manual updating of the key version, explicitly provide the key version when you configure encryption for the storage account. Callaz storage account updateto update the storage account's encryption settings, as shown in the following example. Include the--encryption-key-sourceparameter and set it toMicrosoft.Keyvaultto enable customer-managed keys for the account.
--encryption-key-source
Microsoft.Keyvault
Remember to replace the placeholder values in brackets with your own values.
accountName="<storage-account>"

keyVaultUri=$(az keyvault show \
    --name $kvName \
    --resource-group $rgName \
    --query properties.vaultUri \
    --output tsv)

keyVersion=$(az keyvault key list-versions \
    --name $keyName \
    --vault-name $kvName \
    --query [-1].kid \
    --output tsv | cut -d '/' -f 6)

# Use this form of the command with a user-assigned managed identity
az storage account update \
    --name $accountName \
    --resource-group $rgName \
    --identity-type SystemAssigned,UserAssigned \
    --user-identity-id $identityResourceId \
    --encryption-key-name $keyName \
    --encryption-key-version $keyVersion \
    --encryption-key-source Microsoft.Keyvault \
    --encryption-key-vault $keyVaultUri \
    --key-vault-user-identity-id $identityResourceId

# Use this form of the command with a system-assigned managed identity
az storage account update \
    --name $accountName \
    --resource-group $rgName \
    --encryption-key-name $keyName \
    --encryption-key-version $keyVersion \
    --encryption-key-source Microsoft.Keyvault \
    --encryption-key-vault $keyVaultUri
accountName="<storage-account>"

keyVaultUri=$(az keyvault show \
    --name $kvName \
    --resource-group $rgName \
    --query properties.vaultUri \
    --output tsv)

keyVersion=$(az keyvault key list-versions \
    --name $keyName \
    --vault-name $kvName \
    --query [-1].kid \
    --output tsv | cut -d '/' -f 6)

# Use this form of the command with a user-assigned managed identity
az storage account update \
    --name $accountName \
    --resource-group $rgName \
    --identity-type SystemAssigned,UserAssigned \
    --user-identity-id $identityResourceId \
    --encryption-key-name $keyName \
    --encryption-key-version $keyVersion \
    --encryption-key-source Microsoft.Keyvault \
    --encryption-key-vault $keyVaultUri \
    --key-vault-user-identity-id $identityResourceId

# Use this form of the command with a system-assigned managed identity
az storage account update \
    --name $accountName \
    --resource-group $rgName \
    --encryption-key-name $keyName \
    --encryption-key-version $keyVersion \
    --encryption-key-source Microsoft.Keyvault \
    --encryption-key-vault $keyVaultUri
When you manually update the key version, you then need to update the storage account's encryption settings to use the new version. First, query for the key vault URI by callingaz keyvault show, and for the key version by callingaz keyvault key list-versions. Then callaz storage account updateto update the storage account's encryption settings to use the new version of the key, as shown in the previous example.
Change the key
You can change the key that you are using for Azure Storage encryption at any time.
Note
When you change the key or key version, the protection of the root encryption key changes, but the data in your Azure Storage account remains encrypted at all times. There is no additional action required on your part to ensure that your data is protected. Changing the key or rotating the key version doesn't impact performance. There is no downtime associated with changing the key or rotating the key version.
Azure portal
PowerShell
Azure CLI
To change the key with the Azure portal, follow these steps:
Navigate to your storage account and display theEncryptionsettings.
Select the key vault and choose a new key.
Save your changes.
To change the key with PowerShell, callSet-AzStorageAccountand provide the new key name and version. If the new key is in a different key vault, then you must also update the key vault URI.
To change the key with Azure CLI, callaz storage account updateand provide the new key name and version. If the new key is in a different key vault, then you must also update the key vault URI.
If the new key is in a different key vault, you mustgrant the managed identity access to the key in the new vault. If you opt for manual updating of the key version, you also need toupdate the key vault URI.
Revoke access to a storage account that uses customer-managed keys
To temporarily revoke access to a storage account that is using customer-managed keys, disable the key currently being used in the key vault. There is no performance impact or downtime associated with disabling and reenabling the key.
After the key has been disabled, clients can't call operations that read from or write to a blob or its metadata. For information about which operations will fail, seeRevoke access to a storage account that uses customer-managed keys.
Caution
When you disable the key in the key vault, the data in your Azure Storage account remains encrypted, but it becomes inaccessible until you reenable the key.
Azure portal
PowerShell
Azure CLI
To disable a customer-managed key with the Azure portal, follow these steps:
Navigate to the key vault that contains the key.
Navigate to the key vault that contains the key.
UnderObjects, selectKeys.
UnderObjects, selectKeys.
Right-click the key and selectDisable.
Right-click the key and selectDisable.

To revoke a customer-managed key with PowerShell, call theUpdate-AzKeyVaultKeycommand, as shown in the following example. Remember to replace the placeholder values in brackets with your own values to define the variables, or use the variables defined in the previous examples.
$kvName  = "<key-vault-name>"
$keyName = "<key-name>"
$enabled = $false
# $false to disable the key / $true to enable it

# Check the current state of the key (before and after enabling/disabling it)
Get-AzKeyVaultKey -Name $keyName -VaultName $kvName

# Disable (or enable) the key
Update-AzKeyVaultKey -VaultName $kvName -Name $keyName -Enable $enabled
$kvName  = "<key-vault-name>"
$keyName = "<key-name>"
$enabled = $false
# $false to disable the key / $true to enable it

# Check the current state of the key (before and after enabling/disabling it)
Get-AzKeyVaultKey -Name $keyName -VaultName $kvName

# Disable (or enable) the key
Update-AzKeyVaultKey -VaultName $kvName -Name $keyName -Enable $enabled
To revoke a customer-managed key with Azure CLI, call theaz keyvault key set-attributescommand, as shown in the following example. Remember to replace the placeholder values in brackets with your own values to define the variables, or use the variables defined in the previous examples.
kvName="<key-vault-name>"
keyName="<key-name>"
enabled="false"
# "false" to disable the key / "true" to enable it:

# Check the current state of the key (before and after enabling/disabling it)
az keyvault key show \
    --vault-name $kvName \
    --name $keyName

# Disable (or enable) the key
az keyvault key set-attributes \
    --vault-name $kvName \
    --name $keyName \
    --enabled $enabled
kvName="<key-vault-name>"
keyName="<key-name>"
enabled="false"
# "false" to disable the key / "true" to enable it:

# Check the current state of the key (before and after enabling/disabling it)
az keyvault key show \
    --vault-name $kvName \
    --name $keyName

# Disable (or enable) the key
az keyvault key set-attributes \
    --vault-name $kvName \
    --name $keyName \
    --enabled $enabled
Switch back to Microsoft-managed keys
You can switch from customer-managed keys back to Microsoft-managed keys at any time, using the Azure portal, PowerShell, or the Azure CLI.
Azure portal
PowerShell
Azure CLI
To switch from customer-managed keys back to Microsoft-managed keys in the Azure portal, follow these steps:
Navigate to your storage account.
Navigate to your storage account.
UnderSecurity + networking, selectEncryption.
UnderSecurity + networking, selectEncryption.
ChangeEncryption typetoMicrosoft-managed keys.
ChangeEncryption typetoMicrosoft-managed keys.

To switch from customer-managed keys back to Microsoft-managed keys with PowerShell, callSet-AzStorageAccountwith the-StorageEncryptionoption, as shown in the following example. Remember to replace the placeholder values in brackets with your own values and to use the variables defined in the previous examples.
-StorageEncryption
Set-AzStorageAccount -ResourceGroupName $storageAccount.ResourceGroupName `
    -AccountName $storageAccount.StorageAccountName `
    -StorageEncryption
Set-AzStorageAccount -ResourceGroupName $storageAccount.ResourceGroupName `
    -AccountName $storageAccount.StorageAccountName `
    -StorageEncryption
To switch from customer-managed keys back to Microsoft-managed keys with Azure CLI, callaz storage account updateand set the--encryption-key-source parametertoMicrosoft.Storage, as shown in the following example. Remember to replace the placeholder values in brackets with your own values and to use the variables defined in the previous examples.
--encryption-key-source parameter
Microsoft.Storage
az storage account update \
    --name <storage-account> \
    --resource-group <resource_group> \
    --encryption-key-source Microsoft.Storage
az storage account update \
    --name <storage-account> \
    --resource-group <resource_group> \
    --encryption-key-source Microsoft.Storage
Next steps
Azure Storage encryption for data at rest
Customer-managed keys for Azure Storage encryption
Configure customer-managed keys in an Azure key vault for a new storage account
Feedback
Was this page helpful?
Additional resources