Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Authenticate to Azure resources from Python apps hosted on-premises
Article
2024-10-16
4 contributors
In this article
Apps hosted outside of Azure (for example on-premises or at a third-party data center) should use an application service principal to authenticate to Azure when accessing Azure resources. Application service principal objects are created using the app registration process in Azure. When an application service principal is created, a client ID and client secret will be generated for your app. The client ID, client secret, and your tenant ID are then stored in environment variables so they can be used by the Azure SDK for Python to authenticate your app to Azure at runtime.
A different app registration should be created for each environment the app is hosted in. This allows environment specific resource permissions to be configured for each service principal and ensures that an app deployed to one environment doesn't talk to Azure resources that are part of another environment.
1 - Register the application in Azure
An app can be registered with Azure using either the Azure portal or the Azure CLI.
Azure CLI
Azure portal
az ad sp create-for-rbac --name <app-name>
az ad sp create-for-rbac --name <app-name>
The output of the command will be similar to the following. Make note of these values or keep this window open as you'll need these values in the next steps and won't be able to view the password (client secret) value again.
{
  "appId": "00001111-aaaa-2222-bbbb-3333cccc4444",
  "displayName": "msdocs-python-sdk-auth-prod",
  "password": "Ee5Ff~6Gg7.-Hh8Ii9Jj0Kk1Ll2Mm3_Nn4Oo5Pp6",
  "tenant": "aaaabbbb-0000-cccc-1111-dddd2222eeee"
}
{
  "appId": "00001111-aaaa-2222-bbbb-3333cccc4444",
  "displayName": "msdocs-python-sdk-auth-prod",
  "password": "Ee5Ff~6Gg7.-Hh8Ii9Jj0Kk1Ll2Mm3_Nn4Oo5Pp6",
  "tenant": "aaaabbbb-0000-cccc-1111-dddd2222eeee"
}
Sign in to theAzure portaland follow these steps.
Enterapp registrationsin the search bar at the top of the Azure portal.
Select the item labeledApp registrationsunder the underServicesheading on the menu that appears below the search bar.
Nameâ Enter a name for the app registration in Azure.  It is recommended this name include the app name and environment (test, prod) the app registration is for.
Supported account typesâAccounts in this organizational directory only.
Application (client) IDâ This is the app ID that your app will use to access Azure during local development. Copy this value to a temporary location in a text editor as you'll need it in a future step.
Directory (tenant) IDâ This value will also be needed by your app when it authenticates to Azure.  Copy this value to a temporary location in a text editor it will also be needed it in a future step.
Client credentialsâ You must set the client credentials for the app before your app can authenticate to Azure and use Azure services.  SelectAdd a certificate or secretto add credentials for your app.
Descriptionâ Enter a value ofCurrent.
Expiresâ Select a value of24 months.
2 - Assign roles to the application service principal
Next, you need to determine what roles (permissions) your app needs on what resources and assign those roles to your app. Roles can be assigned a role at a resource, resource group, or subscription scope. This example shows how to assign roles for the service principal at the resource group scope since most applications group all their Azure resources into a single resource group.
Azure CLI
Azure portal
A service principal is assigned a role in Azure using theaz role assignment createcommand.
az role assignment create --assignee {appId} \
    --scope /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName} \
    --role "{roleName}"
az role assignment create --assignee {appId} \
    --scope /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName} \
    --role "{roleName}"
To get the role names that a service principal can be assigned to, use theaz role definition listcommand.
az role definition list \
    --query "sort_by([].{roleName:roleName, description:description}, &roleName)" \
    --output table
az role definition list \
    --query "sort_by([].{roleName:roleName, description:description}, &roleName)" \
    --output table
For example, to allow the service principal with the appId of00001111-aaaa-2222-bbbb-3333cccc4444read, write, and delete access to Azure Storage blob containers and data in all storage accounts in themsdocs-python-sdk-auth-exampleresource group in the subscription with IDaaaa0a0a-bb1b-cc2c-dd3d-eeeeee4e4e4e, you would assign the application service principal to theStorage Blob Data Contributorrole using the following command.
00001111-aaaa-2222-bbbb-3333cccc4444
aaaa0a0a-bb1b-cc2c-dd3d-eeeeee4e4e4e
az role assignment create --assignee 00001111-aaaa-2222-bbbb-3333cccc4444 \
    --scope /subscriptions/aaaa0a0a-bb1b-cc2c-dd3d-eeeeee4e4e4e/resourceGroups/msdocs-python-sdk-auth-example \
    --role "Storage Blob Data Contributor"
az role assignment create --assignee 00001111-aaaa-2222-bbbb-3333cccc4444 \
    --scope /subscriptions/aaaa0a0a-bb1b-cc2c-dd3d-eeeeee4e4e4e/resourceGroups/msdocs-python-sdk-auth-example \
    --role "Storage Blob Data Contributor"
For information on assigning permissions at the resource or subscription level using the Azure CLI, see the articleAssign Azure roles using the Azure CLI.
Select theRole assignmentstab.
Select+ Addfrom the top menu and thenAdd role assignmentfrom the resulting drop-down menu.
Use the search box to filter the list to a more manageable size. This example shows how to filter for Storage Blob roles.
Select the role that you want to assign.SelectNextto go to the next screen.
SelectUser, group, or service principalunderAssign access to.
Select+ Select membersunderMembers
TheSelecttext box can be used to filter the list of users and groups in your subscription. If needed, type the first few characters of the service principal you created for the app to filter the list.
Select the service principal associated with your application.
3 - Configure environment variables for application
You must set theAZURE_CLIENT_ID,AZURE_TENANT_ID, andAZURE_CLIENT_SECRETenvironment variables for the process that runs your Python app to make the application service principal credentials available to your app at runtime. TheDefaultAzureCredentialobject looks for the service principal information in these environment variables.
AZURE_CLIENT_ID
AZURE_TENANT_ID
AZURE_CLIENT_SECRET
DefaultAzureCredential
When usingGunicornto run Python web apps in a UNIX server environment, environment variables for an app can be specified by using theEnvironmentFiledirective in thegunicorn.serverfile as shown below.
EnvironmentFile
gunicorn.server
[Unit]
Description=gunicorn daemon
After=network.target  
  
[Service]  
User=www-user
Group=www-data
WorkingDirectory=/path/to/python-app
EnvironmentFile=/path/to/python-app/py-env/app-environment-variables
ExecStart=/path/to/python-app/py-env/gunicorn --config config.py wsgi:app
            
[Install]  
WantedBy=multi-user.target
[Unit]
Description=gunicorn daemon
After=network.target  
  
[Service]  
User=www-user
Group=www-data
WorkingDirectory=/path/to/python-app
EnvironmentFile=/path/to/python-app/py-env/app-environment-variables
ExecStart=/path/to/python-app/py-env/gunicorn --config config.py wsgi:app
            
[Install]  
WantedBy=multi-user.target
The file specified in theEnvironmentFiledirective should contain a list of environment variables with their values as shown below.
EnvironmentFile
AZURE_CLIENT_ID=<value>
AZURE_TENANT_ID=<value>
AZURE_CLIENT_SECRET=<value>
AZURE_CLIENT_ID=<value>
AZURE_TENANT_ID=<value>
AZURE_CLIENT_SECRET=<value>
4 - Implement DefaultAzureCredential in application
To authenticate Azure SDK client objects to Azure, your application should use theDefaultAzureCredentialclass from theazure.identitypackage.
DefaultAzureCredential
azure.identity
Start by adding theazure.identitypackage to your application.
pip install azure-identity
pip install azure-identity
Next, for any Python code that creates an Azure SDK client object in your app, you'll want to:
Import theDefaultAzureCredentialclass from theazure.identitymodule.
DefaultAzureCredential
azure.identity
Create aDefaultAzureCredentialobject.
DefaultAzureCredential
Pass theDefaultAzureCredentialobject to the Azure SDK client object constructor.
DefaultAzureCredential
An example of this is shown in the following code segment.
from azure.identity import DefaultAzureCredential
from azure.storage.blob import BlobServiceClient

# Acquire a credential object
token_credential = DefaultAzureCredential()

blob_service_client = BlobServiceClient(
        account_url="https://<my_account_name>.blob.core.windows.net",
        credential=token_credential)
from azure.identity import DefaultAzureCredential
from azure.storage.blob import BlobServiceClient

# Acquire a credential object
token_credential = DefaultAzureCredential()

blob_service_client = BlobServiceClient(
        account_url="https://<my_account_name>.blob.core.windows.net",
        credential=token_credential)
When the above code instantiates theDefaultAzureCredentialobject,DefaultAzureCredentialreads the environment variablesAZURE_TENANT_ID,AZURE_CLIENT_ID, andAZURE_CLIENT_SECRETfor the application service principal information to connect to Azure with.
DefaultAzureCredential
DefaultAzureCredential
AZURE_TENANT_ID
AZURE_CLIENT_ID
AZURE_CLIENT_SECRET
Feedback
Was this page helpful?
Additional resources