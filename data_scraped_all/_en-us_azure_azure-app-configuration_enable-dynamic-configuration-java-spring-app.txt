Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Tutorial: Use dynamic configuration in a Java Spring app
Article
2024-12-11
7 contributors
In this article
App Configuration has two libraries for Spring.
spring-cloud-azure-appconfiguration-configrequires Spring Boot and takes a dependency onspring-cloud-context.
spring-cloud-azure-appconfiguration-config
spring-cloud-context
spring-cloud-azure-appconfiguration-config-webrequires Spring Web along with Spring Boot, and also adds support for automatic checking of configuration refresh.
spring-cloud-azure-appconfiguration-config-web
Both libraries support manual triggering to check for refreshed configuration values.
Refresh allows you to update your configuration values without having to restart your application, though it causes all beans in the@RefreshScopeto be recreated. It checks for any changes to configured triggers, including metadata. By default, the minimum amount of time between checks for changes, refresh interval, is set to 30 seconds.
@RefreshScope
spring-cloud-azure-appconfiguration-config-web's automated refresh is triggered based on activity, specifically Spring Web'sServletRequestHandledEvent. If aServletRequestHandledEventisn't triggered,spring-cloud-azure-appconfiguration-config-web's automated refresh doesn't trigger a refresh even if the cache expiration time is expired.
spring-cloud-azure-appconfiguration-config-web
ServletRequestHandledEvent
ServletRequestHandledEvent
spring-cloud-azure-appconfiguration-config-web
Use manual refresh
To use manual refresh, start with a Spring Boot app that uses App Configuration, such as the app you create by following theSpring Boot quickstart for App Configuration.
App Configuration exposesAppConfigurationRefresh, which can be used to check if the cache is expired. If it's expired, a refresh is triggered.
AppConfigurationRefresh
To useAppConfigurationRefresh, update HelloController.import com.azure.spring.cloud.config.AppConfigurationRefresh;

@RestController
public class HelloController {
    private final MessageProperties properties;

    @Autowired(required = false)
    private AppConfigurationRefresh refresh;

    public HelloController(MessageProperties properties) {
        this.properties = properties;
    }

    @GetMapping
    public String getMessage() throws InterruptedException, ExecutionException {
        if (refresh != null) {
            refresh.refreshConfigurations();
        }
        return "Message: " + properties.getMessage();
    }
}AppConfigurationRefresh'srefreshConfigurations()returns aMonothat is true if a refresh is triggered, and false if not. False means either the cache expiration time isn't expired, there was no change, or another thread is currently checking for a refresh.
To useAppConfigurationRefresh, update HelloController.
AppConfigurationRefresh
import com.azure.spring.cloud.config.AppConfigurationRefresh;

@RestController
public class HelloController {
    private final MessageProperties properties;

    @Autowired(required = false)
    private AppConfigurationRefresh refresh;

    public HelloController(MessageProperties properties) {
        this.properties = properties;
    }

    @GetMapping
    public String getMessage() throws InterruptedException, ExecutionException {
        if (refresh != null) {
            refresh.refreshConfigurations();
        }
        return "Message: " + properties.getMessage();
    }
}
import com.azure.spring.cloud.config.AppConfigurationRefresh;

@RestController
public class HelloController {
    private final MessageProperties properties;

    @Autowired(required = false)
    private AppConfigurationRefresh refresh;

    public HelloController(MessageProperties properties) {
        this.properties = properties;
    }

    @GetMapping
    public String getMessage() throws InterruptedException, ExecutionException {
        if (refresh != null) {
            refresh.refreshConfigurations();
        }
        return "Message: " + properties.getMessage();
    }
}
AppConfigurationRefresh'srefreshConfigurations()returns aMonothat is true if a refresh is triggered, and false if not. False means either the cache expiration time isn't expired, there was no change, or another thread is currently checking for a refresh.
AppConfigurationRefresh
refreshConfigurations()
Mono
To enable refresh updatebootstrap.properties:spring.cloud.azure.appconfiguration.stores[0].monitoring.enabled=true
spring.cloud.azure.appconfiguration.stores[0].monitoring.refresh-interval= 30s
spring.cloud.azure.appconfiguration.stores[0].monitoring.triggers[0].key=sentinel
To enable refresh updatebootstrap.properties:
bootstrap.properties
spring.cloud.azure.appconfiguration.stores[0].monitoring.enabled=true
spring.cloud.azure.appconfiguration.stores[0].monitoring.refresh-interval= 30s
spring.cloud.azure.appconfiguration.stores[0].monitoring.triggers[0].key=sentinel
spring.cloud.azure.appconfiguration.stores[0].monitoring.enabled=true
spring.cloud.azure.appconfiguration.stores[0].monitoring.refresh-interval= 30s
spring.cloud.azure.appconfiguration.stores[0].monitoring.triggers[0].key=sentinel
Open theAzure Portaland navigate to your App Configuration resource associated with your application. SelectConfiguration ExplorerunderOperationsand create a new key-value pair by selecting+ Create>Key-valueto add the following parameters:KeyValuesentinel1LeaveLabelandContent Typeempty for now.
Open theAzure Portaland navigate to your App Configuration resource associated with your application. SelectConfiguration ExplorerunderOperationsand create a new key-value pair by selecting+ Create>Key-valueto add the following parameters:
LeaveLabelandContent Typeempty for now.
SelectApply.
SelectApply.
Build your Spring Boot application with Maven and run it.mvn clean package
mvn spring-boot:run
Build your Spring Boot application with Maven and run it.
mvn clean package
mvn spring-boot:run
mvn clean package
mvn spring-boot:run
Open a browser window, and go to the URL:http://localhost:8080. You see the message associated with your key.You can also usecurlto test your application, for example:curl -X GET http://localhost:8080/
Open a browser window, and go to the URL:http://localhost:8080. You see the message associated with your key.
http://localhost:8080
You can also usecurlto test your application, for example:
curl -X GET http://localhost:8080/
curl -X GET http://localhost:8080/
To test dynamic configuration, open the Azure App Configuration portal associated with your application. SelectConfiguration Explorer, and update the value of your displayed key, for example:KeyValue/application/config.messageHello - Updated
To test dynamic configuration, open the Azure App Configuration portal associated with your application. SelectConfiguration Explorer, and update the value of your displayed key, for example:
Update the sentinel key you created earlier to a new value. This change triggers the application to refresh all configuration keys once the refresh interval is passed.KeyValuesentinel2
Update the sentinel key you created earlier to a new value. This change triggers the application to refresh all configuration keys once the refresh interval is passed.
Refresh the browser page twice to see the new message displayed. The first time triggers the refresh, the second loads the changes.
Refresh the browser page twice to see the new message displayed. The first time triggers the refresh, the second loads the changes.
Note
The library only checks for changes on the after the refresh interval has passed. If the period hasn't passed then no change is displayed. Wait for the period to pass, then trigger the refresh check.
Use automated refresh
To use automated refresh, start with a Spring Boot app that uses App Configuration, such as the app you create by following theSpring Boot quickstart for App Configuration.
Then, open thepom.xmlfile in a text editor and add a<dependency>forspring-cloud-azure-appconfiguration-config-webusing the following code.
<dependency>
spring-cloud-azure-appconfiguration-config-web
<dependency>
    <groupId>com.azure.spring</groupId>
    <artifactId>spring-cloud-azure-appconfiguration-config-web</artifactId>
    <version>5.18.0</version>
</dependency>
<dependency>
    <groupId>com.azure.spring</groupId>
    <artifactId>spring-cloud-azure-appconfiguration-config-web</artifactId>
    <version>5.18.0</version>
</dependency>
To enable refresh updatebootstrap.properties:spring.cloud.azure.appconfiguration.stores[0].monitoring.enabled=true
spring.cloud.azure.appconfiguration.stores[0].monitoring.refresh-interval= 30s
spring.cloud.azure.appconfiguration.stores[0].monitoring.triggers[0].key=sentinel
To enable refresh updatebootstrap.properties:
bootstrap.properties
spring.cloud.azure.appconfiguration.stores[0].monitoring.enabled=true
spring.cloud.azure.appconfiguration.stores[0].monitoring.refresh-interval= 30s
spring.cloud.azure.appconfiguration.stores[0].monitoring.triggers[0].key=sentinel
spring.cloud.azure.appconfiguration.stores[0].monitoring.enabled=true
spring.cloud.azure.appconfiguration.stores[0].monitoring.refresh-interval= 30s
spring.cloud.azure.appconfiguration.stores[0].monitoring.triggers[0].key=sentinel
Open theAzure Portaland navigate to your App Configuration resource associated with your application. SelectConfiguration ExplorerunderOperationsand create a new key-value pair by selecting+ Create>Key-valueto add the following parameters:KeyValuesentinel1LeaveLabelandContent Typeempty for now.
Open theAzure Portaland navigate to your App Configuration resource associated with your application. SelectConfiguration ExplorerunderOperationsand create a new key-value pair by selecting+ Create>Key-valueto add the following parameters:
LeaveLabelandContent Typeempty for now.
SelectApply.
SelectApply.
Build your Spring Boot application with Maven and run it.mvn clean package
mvn spring-boot:run
Build your Spring Boot application with Maven and run it.
mvn clean package
mvn spring-boot:run
mvn clean package
mvn spring-boot:run
Open a browser window, and go to the URL:http://localhost:8080. You now see the message associated with your key.You can also usecurlto test your application, for example:curl -X GET http://localhost:8080/
Open a browser window, and go to the URL:http://localhost:8080. You now see the message associated with your key.
http://localhost:8080
You can also usecurlto test your application, for example:
curl -X GET http://localhost:8080/
curl -X GET http://localhost:8080/
To test dynamic configuration, open the Azure App Configuration portal associated with your application. SelectConfiguration Explorer, and update the value of your displayed key, for example:KeyValue/application/config.messageHello - Updated
To test dynamic configuration, open the Azure App Configuration portal associated with your application. SelectConfiguration Explorer, and update the value of your displayed key, for example:
Update the sentinel key you created earlier to a new value. This change triggers the application to refresh all configuration keys once the refresh interval is passed.KeyValuesentinel2
Update the sentinel key you created earlier to a new value. This change triggers the application to refresh all configuration keys once the refresh interval is passed.
Refresh the browser page twice to see the new message displayed. The first time triggers the refresh, the second loads the changes, as the first request returns using the original scope.
Refresh the browser page twice to see the new message displayed. The first time triggers the refresh, the second loads the changes, as the first request returns using the original scope.
Note
The library only checks for changes on after the refresh interval has passed. If the refresh interval hasn't passed, then it doesn't check for changes. Wait for the interval to pass, then trigger the refresh check.
Next steps
In this tutorial, you enabled your Spring Boot app to dynamically refresh configuration settings from App Configuration. For further questions see thereference documentation, it has all of the details on how the Spring Cloud Azure App Configuration library works. To learn how to use an Azure managed identity to streamline the access to App Configuration, continue to the next tutorial.
Managed identity integration
Feedback
Was this page helpful?
Additional resources