Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
How to create custom machine configuration policy definitions
Article
2024-10-07
5 contributors
In this article
Before you begin, it's a good idea to read the overview page formachine configuration, and
the details about machine configuration'sremediation options.
Important
The machine configuration extension is required for Azure virtual machines. To deploy the
extension at scale across all machines, assign the following policy initiative:Deploy prerequisites to enable machine configuration policies on virtual machines
Deploy prerequisites to enable machine configuration policies on virtual machines
To use machine configuration packages that apply configurations, Azure VM guest configuration
extension version 1.26.24 or later, or Arc agent 1.10.0 or later, is required.
Custom machine configuration policy definitions using eitherAuditIfNotExistsorDeployIfNotExistsare in Generally Available (GA) support status.
AuditIfNotExists
DeployIfNotExists
Use the following steps to create your own policies that audit compliance or manage the state of
Azure or Arc-enabled machines.
Install PowerShell 7 and required PowerShell modules
First,set up a machine configuration authoring environmentto install the required version
of PowerShell for your OS and theGuestConfigurationmodule.
Create and publish a machine configuration package artifact
If you haven't already, create and publish a custom machine configuration package by following the
steps inHow to create custom machine configuration package artifacts. Then validate the
package in your development environment by following the steps inHow to test machine configuration package artifacts.
Note
The example code in this article references the$contentUrivariable. If you're using the same
PowerShell session as the earlier tutorials for creating and testing your package artifacts, that
variable may already have the URI to your package.
$contentUri
If you don't have the$contentUrivariable set to the URI for your package in your PowerShell
session, you need to set it. This example uses a storage account'sconnection stringand
theNew-AzStorageContextcmdlet to create a storage context. Then it gets the storage blob for
the published package and uses that object's properties to get the content URI.
$contentUri
New-AzStorageContext
$connectionString = '<storage-account-connection-string>'
$context = New-AzStorageContext -ConnectionString $connectionString
$getParams = @{
    Context   = $context
    Container = '<container-name>'
    Blob      = '<published-package-file-name>'
}
$blob = Get-AzStorageBlob @getParams
$contentUri = $blob.ICloudBlob.Uri.AbsoluteUri
$connectionString = '<storage-account-connection-string>'
$context = New-AzStorageContext -ConnectionString $connectionString
$getParams = @{
    Context   = $context
    Container = '<container-name>'
    Blob      = '<published-package-file-name>'
}
$blob = Get-AzStorageBlob @getParams
$contentUri = $blob.ICloudBlob.Uri.AbsoluteUri
Policy requirements for machine configuration
The policy definitionmetadatasection must include two properties for the machine
configuration service to automate provisioning and reporting of guest configuration assignments.
Thecategoryproperty must be set toGuest Configurationand a section namedguestConfigurationmust contain information about the machine configuration assignment. TheNew-GuestConfigurationPolicycmdlet creates this text automatically.
Guest Configuration
New-GuestConfigurationPolicy
The following example demonstrates themetadatasection that's automatically created byNew-GuestConfigurationPolicy.
New-GuestConfigurationPolicy
"metadata": {
    "category": "Guest Configuration",
    "guestConfiguration": {
        "name": "test",
        "version": "1.0.0",
        "contentType": "Custom",
        "contentUri": "CUSTOM-URI-HERE",
        "contentHash": "CUSTOM-HASH-VALUE-HERE",
        "configurationParameter": {}
    }
}
"metadata": {
    "category": "Guest Configuration",
    "guestConfiguration": {
        "name": "test",
        "version": "1.0.0",
        "contentType": "Custom",
        "contentUri": "CUSTOM-URI-HERE",
        "contentHash": "CUSTOM-HASH-VALUE-HERE",
        "configurationParameter": {}
    }
}
If the definition effect is set toDeployIfNotExists, thethensection must contain
deployment details about a machine configuration assignment. TheNew-GuestConfigurationPolicycmdlet creates this text automatically.
DeployIfNotExists
New-GuestConfigurationPolicy
Create an Azure Policy definition
Once a machine configuration custom policy package has been created and uploaded, create the
machine configuration policy definition. TheNew-GuestConfigurationPolicycmdlet takes a custom
policy package and creates a policy definition.
New-GuestConfigurationPolicy
ThePolicyIdparameter ofNew-GuestConfigurationPolicyrequires a unique string. A globally
unique identifier (GUID) is required. For new definitions, generate a new GUID using theNew-GUIDcmdlet. When making updates to the definition, use the same unique string forPolicyIdto
ensure the correct definition is updated.
New-GuestConfigurationPolicy
New-GUID
Parameters of theNew-GuestConfigurationPolicycmdlet:
New-GuestConfigurationPolicy
PolicyId: A GUID.
ContentUri: Public HTTP(s) URI of machine configuration content package.
DisplayName: Policy display name.
Description: Policy description.
Parameter: Policy parameters provided in a hash table.
PolicyVersion: Policy version.
Path: Destination path where policy definitions are created. Don't specify this parameter as
the path to a local copy of the package.
Platform: Target platform (Windows/Linux) for machine configuration policy and content
package.
Mode: (case sensitive:ApplyAndMonitor,ApplyAndAutoCorrect,Audit) choose if the
policy should audit or deploy the configuration. The default isAudit.
ApplyAndMonitor
ApplyAndAutoCorrect
Audit
Audit
Tag: Adds one or more tag filters to the policy definition.
Category: Sets the category metadata field in the policy definition.
LocalContentPath: The path to the local copy of the.zipMachine Configuration package
file. This parameter is required if you're using a User Assigned Managed Identity to provide
access to an Azure Storage blob.
.zip
ManagedIdentityResourceId: TheresourceIdof the User Assigned Managed Identity that has
read access to the Azure Storage blob containing the.zipMachine Configuration package file.
This parameter is required if you're using a User Assigned Managed Identity to provide access to
an Azure Storage blob.
resourceId
.zip
ExcludeArcMachines: Specifies that the Policy definition should exclude Arc machines. This
parameter is required if you are using a User Assigned Managed Identity to provide access to an
Azure Storage blob.
Important
Unlike Azure VMs, Arc-connected machines currently do not support User Assigned Managed
Identities. As a result, the-ExcludeArcMachinesflag is required to ensure the exclusion of
those machines from the policy definition. For the Azure VM to download the assigned package and
apply the policy, the Guest Configuration Agent must be version1.29.82.0or higher for Windows
and version1.26.76.0or higher for Linux.
-ExcludeArcMachines
1.29.82.0
1.26.76.0
For more information about theModeparameter, see the pageHow to configure remediation options for machine configuration.
Create a policy definition thatauditsusing a custom configuration package, in a specified path:
$PolicyConfig      = @{
  PolicyId      = '_My GUID_'
  ContentUri    = $contentUri
  DisplayName   = 'My audit policy'
  Description   = 'My audit policy'
  Path          = './policies/auditIfNotExists.json'
  Platform      = 'Windows'
  PolicyVersion = 1.0.0
}

New-GuestConfigurationPolicy @PolicyConfig
$PolicyConfig      = @{
  PolicyId      = '_My GUID_'
  ContentUri    = $contentUri
  DisplayName   = 'My audit policy'
  Description   = 'My audit policy'
  Path          = './policies/auditIfNotExists.json'
  Platform      = 'Windows'
  PolicyVersion = 1.0.0
}

New-GuestConfigurationPolicy @PolicyConfig
Create a policy definition thatenforcesa custom configuration package, in a specified path:
$PolicyConfig2      = @{
  PolicyId      = '_My GUID_'
  ContentUri    = $contentUri
  DisplayName   = 'My deployment policy'
  Description   = 'My deployment policy'
  Path          = './policies/deployIfNotExists.json'
  Platform      = 'Windows'
  PolicyVersion = 1.0.0
  Mode          = 'ApplyAndAutoCorrect'
}

New-GuestConfigurationPolicy @PolicyConfig2
$PolicyConfig2      = @{
  PolicyId      = '_My GUID_'
  ContentUri    = $contentUri
  DisplayName   = 'My deployment policy'
  Description   = 'My deployment policy'
  Path          = './policies/deployIfNotExists.json'
  Platform      = 'Windows'
  PolicyVersion = 1.0.0
  Mode          = 'ApplyAndAutoCorrect'
}

New-GuestConfigurationPolicy @PolicyConfig2
Create a policy definition thatenforcesa custom configuration package using a User-Assigned
Managed Identity:
$PolicyConfig3      = @{
  PolicyId                  = '_My GUID_'
  ContentUri                = $contentUri
  DisplayName               = 'My deployment policy'
  Description               = 'My deployment policy'
  Path                      = './policies/deployIfNotExists.json'
  Platform                  = 'Windows'
  PolicyVersion             = 1.0.0
  Mode                      = 'ApplyAndAutoCorrect'
  LocalContentPath          = "C:\Local\Path\To\Package"      # Required parameter for managed identity
  ManagedIdentityResourceId = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}" # Required parameter for managed identity
}

New-GuestConfigurationPolicy @PolicyConfig3 -ExcludeArcMachines
$PolicyConfig3      = @{
  PolicyId                  = '_My GUID_'
  ContentUri                = $contentUri
  DisplayName               = 'My deployment policy'
  Description               = 'My deployment policy'
  Path                      = './policies/deployIfNotExists.json'
  Platform                  = 'Windows'
  PolicyVersion             = 1.0.0
  Mode                      = 'ApplyAndAutoCorrect'
  LocalContentPath          = "C:\Local\Path\To\Package"      # Required parameter for managed identity
  ManagedIdentityResourceId = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}" # Required parameter for managed identity
}

New-GuestConfigurationPolicy @PolicyConfig3 -ExcludeArcMachines
For this scenario, you need to disable theAllow Blob anonymous accesssetting and assign the
roleStorage Blob Data Readeron the storage account to the identity.
Note
You can retrieve the resourceId of a managed identity using theGet-AzUserAssignedIdentityPowerShell cmdlet.
Get-AzUserAssignedIdentity
The cmdlet output returns an object containing the definition display name and path of the policy
files. Definition JSON files that create audit policy definitions have the nameauditIfNotExists.jsonand files that create policy definitions to apply configurations have the
namedeployIfNotExists.json.
auditIfNotExists.json
deployIfNotExists.json
The policy definitions created by cmdlets in theGuestConfigurationmodule can optionally
include a filter for tags. TheTagparameter ofNew-GuestConfigurationPolicysupports an
array of hash tables containing individual tag entries. The tags are added to theifsection of
the policy definition and can't be modified by a policy assignment.
New-GuestConfigurationPolicy
An example snippet of a policy definition that filters for tags follows.
"if": {
  "allOf" : [
    {
      "allOf": [
        {
          "field": "tags.Owner",
          "equals": "BusinessUnit"
        },
        {
          "field": "tags.Role",
          "equals": "Web"
        }
      ]
    },
    {
      // Original machine configuration content
    }
  ]
}
"if": {
  "allOf" : [
    {
      "allOf": [
        {
          "field": "tags.Owner",
          "equals": "BusinessUnit"
        },
        {
          "field": "tags.Role",
          "equals": "Web"
        }
      ]
    },
    {
      // Original machine configuration content
    }
  ]
}
Machine configuration supports overriding properties of a DSC Configuration at run time. This
feature means that the values in the MOF file in the package don't have to be considered static.
The override values are provided through Azure Policy and don't change how the DSC Configurations
are authored or compiled.
Machine configuration supports the following value types for parameters:
String
Boolean
Double
Float
The cmdletsNew-GuestConfigurationPolicyandGet-GuestConfigurationPackageComplianceStatusinclude a parameter namedParameter. This parameter takes a hash table definition including all
details about each parameter and creates the required sections of each file used for the Azure
Policy definition.
New-GuestConfigurationPolicy
Get-GuestConfigurationPackageComplianceStatus
The following example creates a policy definition to audit a service, where the user selects from a
list at the time of policy assignment.
# This DSC resource definition...
Service 'UserSelectedNameExample' {
    Name   = 'ParameterValue'
    Ensure = 'Present'
    State  = 'Running'
}

# ...can be converted to a hash table:
$PolicyParameterInfo     = @(
  @{
    # Policy parameter name (mandatory)
    Name                 = 'ServiceName'
    # Policy parameter display name (mandatory)
    DisplayName          = 'windows service name.'
    # Policy parameter description (optional)
    Description          = 'Name of the windows service to be audited.'
    # DSC configuration resource type (mandatory)
    ResourceType         = 'Service'
    # DSC configuration resource id (mandatory)
    ResourceId           = 'UserSelectedNameExample'
    # DSC configuration resource property name (mandatory)
    ResourcePropertyName = 'Name'
    # Policy parameter default value (optional)
    DefaultValue         = 'winrm'
    # Policy parameter allowed values (optional)
    AllowedValues        = @('BDESVC','TermService','wuauserv','winrm')
  })

# ...and then passed into the `New-GuestConfigurationPolicy` cmdlet
$PolicyParam = @{
  PolicyId      = 'My GUID'
  ContentUri    = $contentUri
  DisplayName   = 'Audit Windows Service.'
  Description   = "Audit if a Windows Service isn't enabled on Windows machine."
  Path          = '.\policies\auditIfNotExists.json'
  Parameter     = $PolicyParameterInfo
  PolicyVersion = 1.0.0
}

New-GuestConfigurationPolicy @PolicyParam
# This DSC resource definition...
Service 'UserSelectedNameExample' {
    Name   = 'ParameterValue'
    Ensure = 'Present'
    State  = 'Running'
}

# ...can be converted to a hash table:
$PolicyParameterInfo     = @(
  @{
    # Policy parameter name (mandatory)
    Name                 = 'ServiceName'
    # Policy parameter display name (mandatory)
    DisplayName          = 'windows service name.'
    # Policy parameter description (optional)
    Description          = 'Name of the windows service to be audited.'
    # DSC configuration resource type (mandatory)
    ResourceType         = 'Service'
    # DSC configuration resource id (mandatory)
    ResourceId           = 'UserSelectedNameExample'
    # DSC configuration resource property name (mandatory)
    ResourcePropertyName = 'Name'
    # Policy parameter default value (optional)
    DefaultValue         = 'winrm'
    # Policy parameter allowed values (optional)
    AllowedValues        = @('BDESVC','TermService','wuauserv','winrm')
  })

# ...and then passed into the `New-GuestConfigurationPolicy` cmdlet
$PolicyParam = @{
  PolicyId      = 'My GUID'
  ContentUri    = $contentUri
  DisplayName   = 'Audit Windows Service.'
  Description   = "Audit if a Windows Service isn't enabled on Windows machine."
  Path          = '.\policies\auditIfNotExists.json'
  Parameter     = $PolicyParameterInfo
  PolicyVersion = 1.0.0
}

New-GuestConfigurationPolicy @PolicyParam
Publish the Azure Policy definition
Finally, you can publish the policy definitions using theNew-AzPolicyDefinitioncmdlet. The
below commands publish your machine configuration policy to the policy center.
New-AzPolicyDefinition
To run theNew-AzPolicyDefinitioncommand, you need access to create policy definitions in Azure.
The specific authorization requirements are documented in theAzure Policy Overviewpage. The
recommended built-in role isResource Policy Contributor.
New-AzPolicyDefinition
Resource Policy Contributor
New-AzPolicyDefinition -Name 'mypolicydefinition' -Policy '.\policies\auditIfNotExists.json'
New-AzPolicyDefinition -Name 'mypolicydefinition' -Policy '.\policies\auditIfNotExists.json'
Or, if the policy is a deploy if not exist policy (DINE) use this command:
New-AzPolicyDefinition -Name 'mypolicydefinition' -Policy '.\policies\deployIfNotExists.json'
New-AzPolicyDefinition -Name 'mypolicydefinition' -Policy '.\policies\deployIfNotExists.json'
With the policy definition created in Azure, the last step is to assign the definition. See how to
assign the definition withPortal,Azure CLI, andAzure PowerShell.
Policy lifecycle
If you would like to release an update to the policy definition, make the change for both the guest
configuration package and the Azure Policy definition details.
Note
Theversionproperty of the machine configuration assignment only effects packages that are
hosted by Microsoft. The best practice for versioning custom content is to include the version in
the file name.
version
First, when runningNew-GuestConfigurationPackage, specify a name for the package that makes it
unique from earlier versions. You can include a version number in the name such asPackageName_1.0.0. The number in this example is only used to make the package unique, not to
specify that the package should be considered newer or older than other packages.
New-GuestConfigurationPackage
PackageName_1.0.0
Second, update the parameters used with theNew-GuestConfigurationPolicycmdlet following each of
the following explanations.
New-GuestConfigurationPolicy
Version: When you run theNew-GuestConfigurationPolicycmdlet, you must specify a version
number greater than what's currently published.
New-GuestConfigurationPolicy
contentUri: When you run theNew-GuestConfigurationPolicycmdlet, you must specify a URI to
the location of the package. Including a package version in the file name ensures the value of
this property changes in each release.
New-GuestConfigurationPolicy
contentHash: TheNew-GuestConfigurationPolicycmdlet updates this property automatically.
It's a hash value of the package created byNew-GuestConfigurationPackage. The property must be
correct for the.zipfile you publish. If only thecontentUriproperty is updated, the
Extension rejects the content package.
New-GuestConfigurationPolicy
New-GuestConfigurationPackage
.zip
The easiest way to release an updated package is to repeat the process described in this article
and specify an updated version number. That process guarantees all properties have been correctly
updated.
Next steps
Assign your custom policy definitionusing Azure portal.
Learn how to viewcompliance details for machine configurationpolicy assignments.
Feedback
Was this page helpful?
Additional resources