Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Managed NGINX ingress with the application routing add-on
Article
2024-09-03
9 contributors
In this article
One way to route Hypertext Transfer Protocol (HTTP) and secure (HTTPS) traffic to applications running on an Azure Kubernetes Service (AKS) cluster is to use theKubernetes Ingress object. When you create an Ingress object that uses the application routing add-on NGINX Ingress classes, the add-on creates, configures, and manages one or more Ingress controllers in your AKS cluster.
This article shows you how to deploy and configure a basic Ingress controller in your AKS cluster.
Application routing add-on with NGINX features
The application routing add-on with NGINX delivers the following:
Easy configuration of managed NGINX Ingress controllers based onKubernetes NGINX Ingress controller.
Integration withAzure DNSfor public and private zone management
SSL termination with certificates stored in Azure Key Vault.
For other configurations, see:
DNS and SSL configuration
Application routing add-on configuration
Configure internal NGIX ingress controller for Azure private DNS zone.
With the retirement ofOpen Service Mesh(OSM) by the Cloud Native Computing Foundation (CNCF), using the application routing add-on with OSM is not recommended.
Prerequisites
An Azure subscription. If you don't have an Azure subscription, you can create afree account.
Azure CLI version 2.54.0 or later installed and configured. Runaz --versionto find the version. If you need to install or upgrade, seeInstall Azure CLI.
az --version
Limitations
The application routing add-on supports up to five Azure DNS zones.
The application routing add-on can only be enabled on AKS clusters withmanaged identity.
All global Azure DNS zones integrated with the add-on have to be in the same resource group.
All private Azure DNS zones integrated with the add-on have to be in the same resource group.
Editing the ingress-nginxConfigMapin theapp-routing-systemnamespace isn't supported.
ConfigMap
app-routing-system
The following snippet annotations are blocked and will prevent an Ingress from being configured:load_module,lua_package,_by_lua,location,root,proxy_pass,serviceaccount,{,},'.
load_module
lua_package
_by_lua
location
root
proxy_pass
serviceaccount
{
}
'
Enable application routing using Azure CLI
Enable on a new cluster
To enable application routing on a new cluster, use theaz aks createcommand, specifying the--enable-app-routingflag.
az aks create
--enable-app-routing
az aks create \
    --resource-group <ResourceGroupName> \
    --name <ClusterName> \
    --location <Location> \
    --enable-app-routing \
    --generate-ssh-keys
az aks create \
    --resource-group <ResourceGroupName> \
    --name <ClusterName> \
    --location <Location> \
    --enable-app-routing \
    --generate-ssh-keys
Enable on an existing cluster
To enable application routing on an existing cluster, use theaz aks approuting enablecommand.
az aks approuting enable
az aks approuting enable --resource-group <ResourceGroupName> --name <ClusterName>
az aks approuting enable --resource-group <ResourceGroupName> --name <ClusterName>
Connect to your AKS cluster
To connect to the Kubernetes cluster from your local computer, you usekubectl, the Kubernetes command-line client. You can install it locally using theaz aks install-clicommand. If you use the Azure Cloud Shell,kubectlis already installed.
az aks install-cli
kubectl
Configurekubectlto connect to your Kubernetes cluster using theaz aks get-credentialscommand.
kubectl
az aks get-credentials --resource-group <ResourceGroupName> --name <ClusterName>
az aks get-credentials --resource-group <ResourceGroupName> --name <ClusterName>
Deploy an application
The application routing add-on uses annotations on Kubernetes Ingress objects to create the appropriate resources.
Create the application namespace calledaks-storeto run the example pods using thekubectl create namespacecommand.kubectl create namespace aks-store
Create the application namespace calledaks-storeto run the example pods using thekubectl create namespacecommand.
aks-store
kubectl create namespace
kubectl create namespace aks-store
kubectl create namespace aks-store
Deploy the AKS store application using the following YAML manifest file:kubectl apply -f https://raw.githubusercontent.com/Azure-Samples/aks-store-demo/main/sample-manifests/docs/app-routing/aks-store-deployments-and-services.yaml -n aks-store
Deploy the AKS store application using the following YAML manifest file:
kubectl apply -f https://raw.githubusercontent.com/Azure-Samples/aks-store-demo/main/sample-manifests/docs/app-routing/aks-store-deployments-and-services.yaml -n aks-store
kubectl apply -f https://raw.githubusercontent.com/Azure-Samples/aks-store-demo/main/sample-manifests/docs/app-routing/aks-store-deployments-and-services.yaml -n aks-store
This manifest will create the necessary deployments and services for the AKS store application.
Create the Ingress object
The application routing add-on creates an Ingress class on the cluster namedwebapprouting.kubernetes.azure.com. When you create an Ingress object with this class, it activates the add-on.
Copy the following YAML manifest into a new file namedingress.yamland save the file to your local computer.apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: store-front
  namespace: aks-store
spec:
  ingressClassName: webapprouting.kubernetes.azure.com
  rules:
  - http:
      paths:
      - backend:
          service:
            name: store-front
            port:
              number: 80
        path: /
        pathType: Prefix
Copy the following YAML manifest into a new file namedingress.yamland save the file to your local computer.
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: store-front
  namespace: aks-store
spec:
  ingressClassName: webapprouting.kubernetes.azure.com
  rules:
  - http:
      paths:
      - backend:
          service:
            name: store-front
            port:
              number: 80
        path: /
        pathType: Prefix
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: store-front
  namespace: aks-store
spec:
  ingressClassName: webapprouting.kubernetes.azure.com
  rules:
  - http:
      paths:
      - backend:
          service:
            name: store-front
            port:
              number: 80
        path: /
        pathType: Prefix
Create the ingress resource using thekubectl applycommand.kubectl apply -f ingress.yaml -n aks-storeThe following example output shows the created resource:ingress.networking.k8s.io/store-front created
Create the ingress resource using thekubectl applycommand.
kubectl apply
kubectl apply -f ingress.yaml -n aks-store
kubectl apply -f ingress.yaml -n aks-store
The following example output shows the created resource:
ingress.networking.k8s.io/store-front created
ingress.networking.k8s.io/store-front created
Verify the managed Ingress was created
You can verify the managed Ingress was created using thekubectl get ingresscommand.
kubectl get ingress
kubectl get ingress -n aks-store
kubectl get ingress -n aks-store
The following example output shows the created managed Ingress:
NAME          CLASS                                HOSTS   ADDRESS       PORTS   AGE
store-front   webapprouting.kubernetes.azure.com   *       51.8.10.109   80      110s
NAME          CLASS                                HOSTS   ADDRESS       PORTS   AGE
store-front   webapprouting.kubernetes.azure.com   *       51.8.10.109   80      110s
You can verify that the AKS store works pointing your browser to the public IP address of the Ingress controller.
Find the IP address with kubectl:
kubectl get service -n app-routing-system nginx -o jsonpath="{.status.loadBalancer.ingress[0].ip}"
kubectl get service -n app-routing-system nginx -o jsonpath="{.status.loadBalancer.ingress[0].ip}"
Remove the application routing add-on
To remove the associated namespace, use thekubectl delete namespacecommand.
kubectl delete namespace
kubectl delete namespace aks-store
kubectl delete namespace aks-store
To remove the application routing add-on from your cluster, use theaz aks approuting disablecommand.
az aks approuting disable
az aks approuting disable --name <ClusterName> --resource-group <ResourceGroupName>
az aks approuting disable --name <ClusterName> --resource-group <ResourceGroupName>
Note
To avoid potential disruption of traffic into the cluster when the application routing add-on is disabled, some Kubernetes resources, includingconfigMaps,secrets, and thedeploymentthat runs the controller, will remain on the cluster. These resources are in theapp-routing-systemnamespace. You can remove these resources if they're no longer needed by deleting the namespace withkubectl delete ns app-routing-system.
kubectl delete ns app-routing-system
Next steps
Configure custom ingress configurationsshows how to create an advanced Ingress configuration andconfigure a custom domain using Azure DNS to manage DNS zones and setup a secure ingress.
Configure custom ingress configurationsshows how to create an advanced Ingress configuration andconfigure a custom domain using Azure DNS to manage DNS zones and setup a secure ingress.
To integrate with an Azure internal load balancer and configure a private Azure DNS zone to enable DNS resolution for the private endpoints to resolve specific domains, seeConfigure internal NGINX ingress controller for Azure private DNS zone.
To integrate with an Azure internal load balancer and configure a private Azure DNS zone to enable DNS resolution for the private endpoints to resolve specific domains, seeConfigure internal NGINX ingress controller for Azure private DNS zone.
Learn about monitoring the ingress-nginx controller metrics included with the application routing add-on withwith Prometheus in Grafana(preview) as part of analyzing the performance and usage of your application.
Learn about monitoring the ingress-nginx controller metrics included with the application routing add-on withwith Prometheus in Grafana(preview) as part of analyzing the performance and usage of your application.
Azure Kubernetes Service

Additional resources