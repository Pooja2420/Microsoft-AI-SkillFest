Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
AzureWebApp@1 - Azure Web App v1 task
Article
2025-03-24
4 contributors
In this article
This task deploys an Azure Web App for Linux or Windows.
Syntax
# Azure Web App v1
# Deploy an Azure Web App for Linux or Windows.
- task: AzureWebApp@1
  inputs:
    azureSubscription: # string. Required. Azure subscription. 
    appType: # 'webApp' | 'webAppLinux'. Required. App type. 
    appName: # string. Required. App name. 
    #deployToSlotOrASE: false # boolean. Optional. Use when appType != "". Deploy to Slot or App Service Environment. Default: false.
    #resourceGroupName: # string. Required when deployToSlotOrASE = true. Resource group. 
    #slotName: 'production' # string. Required when deployToSlotOrASE = true. Slot. Default: production.
    package: '$(System.DefaultWorkingDirectory)/**/*.zip' # string. Required. Package or folder. Default: $(System.DefaultWorkingDirectory)/**/*.zip.
    #customDeployFolder: # string. Optional. Use when package EndsWith .war. Custom Deploy Folder. 
    #runtimeStack: # 'DOTNETCORE:9.0' | 'DOTNETCORE:8.0' | 'DOTNETCORE:7.0' | 'DOTNETCORE:6.0' | 'NODE:20-lts' | 'NODE:18-lts' | 'NODE:16-lts' | 'PYTHON:3.12' | 'PYTHON:3.11' | 'PYTHON:3.10' | 'PYTHON:3.9' | 'PYTHON:3.8' | 'PHP:8.3' | 'PHP:8.2' | 'PHP:8.1' | 'PHP:8.0' | 'JAVA:21-java21' | 'JAVA:17-java17' | 'JAVA:11-java11' | 'JAVA:8-jre8' | 'JBOSSEAP:8-java17' | 'JBOSSEAP:8-java11' | 'JBOSSEAP:7-java17' | 'JBOSSEAP:7-java11' | 'JBOSSEAP:7-java8' | 'TOMCAT:10.1-java21' | 'TOMCAT:10.1-java17' | 'TOMCAT:10.1-java11' | 'TOMCAT:10.0-java17' | 'TOMCAT:10.0-java11' | 'TOMCAT:10.0-jre8' | 'TOMCAT:9.0-java21' | 'TOMCAT:9.0-java17' | 'TOMCAT:9.0-java11' | 'TOMCAT:9.0-jre8' | 'TOMCAT:8.5-java11' | 'TOMCAT:8.5-jre8'. Optional. Use when appType = webAppLinux. Runtime stack. 
    #startUpCommand: # string. Optional. Use when appType = webAppLinux. Startup command. 
  # Application and Configuration Settings
    #customWebConfig: # string. Optional. Use when appType != webAppLinux && package NotEndsWith .war. Generate web.config parameters for Python, Node.js, Go and Java apps. 
    #appSettings: # string. App settings. 
    #configurationStrings: # string. Configuration settings. 
  # Additional Deployment Options
    #deploymentMethod: 'auto' # 'auto' | 'zipDeploy' | 'runFromPackage'. Required when appType != webAppLinux && appType != "" && package NotEndsWith .war && package NotEndsWith .jar. Deployment method. Default: auto.
# Azure Web App v1
# Deploy an Azure Web App for Linux or Windows.
- task: AzureWebApp@1
  inputs:
    azureSubscription: # string. Required. Azure subscription. 
    appType: # 'webApp' | 'webAppLinux'. Required. App type. 
    appName: # string. Required. App name. 
    #deployToSlotOrASE: false # boolean. Optional. Use when appType != "". Deploy to Slot or App Service Environment. Default: false.
    #resourceGroupName: # string. Required when deployToSlotOrASE = true. Resource group. 
    #slotName: 'production' # string. Required when deployToSlotOrASE = true. Slot. Default: production.
    package: '$(System.DefaultWorkingDirectory)/**/*.zip' # string. Required. Package or folder. Default: $(System.DefaultWorkingDirectory)/**/*.zip.
    #customDeployFolder: # string. Optional. Use when package EndsWith .war. Custom Deploy Folder. 
    #runtimeStack: # 'DOTNETCORE:9.0' | 'DOTNETCORE:8.0' | 'DOTNETCORE:7.0' | 'DOTNETCORE:6.0' | 'NODE:20-lts' | 'NODE:18-lts' | 'NODE:16-lts' | 'PYTHON:3.12' | 'PYTHON:3.11' | 'PYTHON:3.10' | 'PYTHON:3.9' | 'PYTHON:3.8' | 'PHP:8.3' | 'PHP:8.2' | 'PHP:8.1' | 'PHP:8.0' | 'JAVA:21-java21' | 'JAVA:17-java17' | 'JAVA:11-java11' | 'JAVA:8-jre8' | 'JBOSSEAP:8-java17' | 'JBOSSEAP:8-java11' | 'JBOSSEAP:7-java17' | 'JBOSSEAP:7-java11' | 'JBOSSEAP:7-java8' | 'TOMCAT:10.1-java21' | 'TOMCAT:10.1-java17' | 'TOMCAT:10.1-java11' | 'TOMCAT:10.0-java17' | 'TOMCAT:10.0-java11' | 'TOMCAT:10.0-jre8' | 'TOMCAT:9.0-java21' | 'TOMCAT:9.0-java17' | 'TOMCAT:9.0-java11' | 'TOMCAT:9.0-jre8' | 'TOMCAT:8.5-java11' | 'TOMCAT:8.5-jre8'. Optional. Use when appType = webAppLinux. Runtime stack. 
    #startUpCommand: # string. Optional. Use when appType = webAppLinux. Startup command. 
  # Application and Configuration Settings
    #customWebConfig: # string. Optional. Use when appType != webAppLinux && package NotEndsWith .war. Generate web.config parameters for Python, Node.js, Go and Java apps. 
    #appSettings: # string. App settings. 
    #configurationStrings: # string. Configuration settings. 
  # Additional Deployment Options
    #deploymentMethod: 'auto' # 'auto' | 'zipDeploy' | 'runFromPackage'. Required when appType != webAppLinux && appType != "" && package NotEndsWith .war && package NotEndsWith .jar. Deployment method. Default: auto.
# Azure Web App v1
# Deploy an Azure Web App for Linux or Windows.
- task: AzureWebApp@1
  inputs:
    azureSubscription: # string. Required. Azure subscription. 
    appType: # 'webApp' | 'webAppLinux'. Required. App type. 
    appName: # string. Required. App name. 
    #deployToSlotOrASE: false # boolean. Optional. Use when appType != "". Deploy to Slot or App Service Environment. Default: false.
    #resourceGroupName: # string. Required when deployToSlotOrASE = true. Resource group. 
    #slotName: 'production' # string. Required when deployToSlotOrASE = true. Slot. Default: production.
    package: '$(System.DefaultWorkingDirectory)/**/*.zip' # string. Required. Package or folder. Default: $(System.DefaultWorkingDirectory)/**/*.zip.
    #customDeployFolder: # string. Optional. Use when package EndsWith .war. Custom Deploy Folder. 
    #runtimeStack: # string. Optional. Use when appType = webAppLinux. Runtime stack. 
    #startUpCommand: # string. Optional. Use when appType = webAppLinux. Startup command. 
  # Application and Configuration Settings
    #customWebConfig: # string. Optional. Use when appType != webAppLinux && package NotEndsWith .war. Generate web.config parameters for Python, Node.js, Go and Java apps. 
    #appSettings: # string. App settings. 
    #configurationStrings: # string. Configuration settings. 
  # Additional Deployment Options
    #deploymentMethod: 'auto' # 'auto' | 'zipDeploy' | 'runFromPackage'. Required when appType != webAppLinux && appType != "" && package NotEndsWith .war && package NotEndsWith .jar. Deployment method. Default: auto.
# Azure Web App v1
# Deploy an Azure Web App for Linux or Windows.
- task: AzureWebApp@1
  inputs:
    azureSubscription: # string. Required. Azure subscription. 
    appType: # 'webApp' | 'webAppLinux'. Required. App type. 
    appName: # string. Required. App name. 
    #deployToSlotOrASE: false # boolean. Optional. Use when appType != "". Deploy to Slot or App Service Environment. Default: false.
    #resourceGroupName: # string. Required when deployToSlotOrASE = true. Resource group. 
    #slotName: 'production' # string. Required when deployToSlotOrASE = true. Slot. Default: production.
    package: '$(System.DefaultWorkingDirectory)/**/*.zip' # string. Required. Package or folder. Default: $(System.DefaultWorkingDirectory)/**/*.zip.
    #customDeployFolder: # string. Optional. Use when package EndsWith .war. Custom Deploy Folder. 
    #runtimeStack: # string. Optional. Use when appType = webAppLinux. Runtime stack. 
    #startUpCommand: # string. Optional. Use when appType = webAppLinux. Startup command. 
  # Application and Configuration Settings
    #customWebConfig: # string. Optional. Use when appType != webAppLinux && package NotEndsWith .war. Generate web.config parameters for Python, Node.js, Go and Java apps. 
    #appSettings: # string. App settings. 
    #configurationStrings: # string. Configuration settings. 
  # Additional Deployment Options
    #deploymentMethod: 'auto' # 'auto' | 'zipDeploy' | 'runFromPackage'. Required when appType != webAppLinux && appType != "" && package NotEndsWith .war && package NotEndsWith .jar. Deployment method. Default: auto.
Inputs
azureSubscription-Azure subscriptionstring. Required.
azureSubscription
string
Specifies theAzure Resource Manager subscription connectionfor the deployment.
appType-App typestring. Required. Allowed values:webApp(Web App on Windows),webAppLinux(Web App on Linux).
appType
string
webApp
webAppLinux
Specifies the Azure Web App type.
appName-App namestring. Required.
appName
string
Specifies the name of an existing Azure App Service. Only app services that are based on the selected app type will be listed.
deployToSlotOrASE-Deploy to Slot or App Service Environmentboolean. Optional. Use whenappType != "". Default value:false.
deployToSlotOrASE
boolean
appType != ""
false
Selects the option to deploy to an existing deployment slot or an Azure App Service Environment.For both targets, the task needs a resource group name.If the deployment target is a slot, the default is the production slot. Any other existing slot name can also be provided.If the deployment target is an Azure App Service Environment, leave the slot name as âproductionâ, and specify the resource group name.
resourceGroupName-Resource groupstring. Required whendeployToSlotOrASE = true.
resourceGroupName
string
deployToSlotOrASE = true
The resource group name is required when the deployment target is either a deployment slot or an Azure App Service Environment.Specifies the Azure resource group that contains the Azure App Service indicated above.
slotName-Slotstring. Required whendeployToSlotOrASE = true. Default value:production.
slotName
string
deployToSlotOrASE = true
production
Specifies an existing slot, excluding the production slot.
package-Package or folderstring. Required. Default value:$(System.DefaultWorkingDirectory)/**/*.zip.
package
string
$(System.DefaultWorkingDirectory)/**/*.zip
The file path to the package or folder that contains App Service content generated by MSBuild, a compressed zip file, or a war file. Variables (Build|Release) and wildcards are supported. For example,$(System.DefaultWorkingDirectory)/**/*.zipor$(System.DefaultWorkingDirectory)/**/*.war.
$(System.DefaultWorkingDirectory)/**/*.zip
$(System.DefaultWorkingDirectory)/**/*.war
customDeployFolder-Custom Deploy Folderstring. Optional. Use whenpackage EndsWith .war.
customDeployFolder
string
package EndsWith .war
Specifies the custom folder name you want to deploy to.If the field is empty, the package is deployed to<appname>.azurewebsites.net/<warpackagename>.If ROOT is entered, the package is deployed to<appname>.azurewebsited.net.In all other instances, it is deployed to<appname>.azurewebsited.net/<customWarName>.
<appname>.azurewebsites.net/<warpackagename>
<appname>.azurewebsited.net
<appname>.azurewebsited.net/<customWarName>
runtimeStack-Runtime stackstring. Optional. Use whenappType = webAppLinux. Allowed values:DOTNETCORE:9.0(.NET 9.0),DOTNETCORE:8.0(.NET 8.0),DOTNETCORE:7.0(.NET 7.0),DOTNETCORE:6.0(.NET 6.0),NODE:20-lts(Node 20 LTS),NODE:18-lts(Node 18 LTS),NODE:16-lts(Node 16 LTS),PYTHON:3.12(Python 3.12),PYTHON:3.11(Python 3.11),PYTHON:3.10(Python 3.10),PYTHON:3.9(Python 3.9),PYTHON:3.8(Python 3.8),PHP:8.3(PHP 8.3),PHP:8.2(PHP 8.2),PHP:8.1(PHP 8.1),PHP:8.0(PHP 8.0),JAVA:21-java21(Java 21),JAVA:17-java17(Java 17),JAVA:11-java11(Java 11),JAVA:8-jre8(Java 8),JBOSSEAP:8-java17(JBoss EAP 8 (Java 17)),JBOSSEAP:8-java11(JBoss EAP 8 (Java 11)),JBOSSEAP:7-java17(JBoss EAP 7 (Java 17)),JBOSSEAP:7-java11(JBoss EAP 7 (Java 11)),JBOSSEAP:7-java8(JBoss EAP 7 (Java 8)),TOMCAT:10.1-java21(Tomcat 10.1 (Java 21)),TOMCAT:10.1-java17(Tomcat 10.1 (Java 17)),TOMCAT:10.1-java11(Tomcat 10.1 (Java 11)),TOMCAT:10.0-java17(Tomcat 10.0 (Java 17)),TOMCAT:10.0-java11(Tomcat 10.0 (Java 11)),TOMCAT:10.0-jre8(Tomcat 10.0 (Java 8)),TOMCAT:9.0-java21(Tomcat 9.0 (Java 21)),TOMCAT:9.0-java17(Tomcat 9.0 (Java 17)),TOMCAT:9.0-java11(Tomcat 9.0 (Java 11)),TOMCAT:9.0-jre8(Tomcat 9.0 (Java 8)),TOMCAT:8.5-java11(Tomcat 8.5 (Java 11)),TOMCAT:8.5-jre8(Tomcat 8.5 (Java 8)).
runtimeStack
string
appType = webAppLinux
DOTNETCORE:9.0
DOTNETCORE:8.0
DOTNETCORE:7.0
DOTNETCORE:6.0
NODE:20-lts
NODE:18-lts
NODE:16-lts
PYTHON:3.12
PYTHON:3.11
PYTHON:3.10
PYTHON:3.9
PYTHON:3.8
PHP:8.3
PHP:8.2
PHP:8.1
PHP:8.0
JAVA:21-java21
JAVA:17-java17
JAVA:11-java11
JAVA:8-jre8
JBOSSEAP:8-java17
JBOSSEAP:8-java11
JBOSSEAP:7-java17
JBOSSEAP:7-java11
JBOSSEAP:7-java8
TOMCAT:10.1-java21
TOMCAT:10.1-java17
TOMCAT:10.1-java11
TOMCAT:10.0-java17
TOMCAT:10.0-java11
TOMCAT:10.0-jre8
TOMCAT:9.0-java21
TOMCAT:9.0-java17
TOMCAT:9.0-java11
TOMCAT:9.0-jre8
TOMCAT:8.5-java11
TOMCAT:8.5-jre8
Web App on Linux offers two different options to publish your application: custom image deployment (Web App for Containers) and app deployment with a built-in platform image (Web App on Linux). This parameter is only available whenLinux Web Appis selected as an app type in the task.
runtimeStack-Runtime stackstring. Optional. Use whenappType = webAppLinux.
runtimeStack
string
appType = webAppLinux
Web App on Linux offers two different options to publish your application: custom image deployment (Web App for Containers) and app deployment with a built-in platform image (Web App on Linux). This parameter is only available whenLinux Web Appis selected as an app type in the task.
startUpCommand-Startup commandstring. Optional. Use whenappType = webAppLinux.
startUpCommand
string
appType = webAppLinux
Specifies the start up command.For example:dotnet rundotnet filename.dll.
dotnet run
dotnet filename.dll.
customWebConfig-Generate web.config parameters for Python, Node.js, Go and Java appsstring. Optional. Use whenappType != webAppLinux && package NotEndsWith .war.
customWebConfig
string
appType != webAppLinux && package NotEndsWith .war
A standard web.config will be generated and deployed to Azure App Service if the application does not have one. The values in web.config vary based on the application framework, and they can be edited. For example, for the node.js application, web.config will have a startup file and iis_node module values. This edit feature is only for thegenerated web.config.
appSettings-App settingsstring.
appSettings
string
Specify the web app application settings using the syntax-key value(for example:-Port 5000-RequestTimeout 5000-WEBSITE_TIME_ZONE). Enclose values that contain spaces in double quotes (for example:"Eastern Standard Time").
-key value
-Port 5000
-RequestTimeout 5000
-WEBSITE_TIME_ZONE
"Eastern Standard Time"
configurationStrings-Configuration settingsstring.
configurationStrings
string
Specify the web app configuration settings using the syntax-key value(for example:-phpVersion 5.6-linuxFxVersion: node|6.11). Enclose values that contain spaces in double quotes.
-key value
-phpVersion 5.6
-linuxFxVersion: node|6.11
deploymentMethod-Deployment methodstring. Required whenappType != webAppLinux && appType != "" && package NotEndsWith .war && package NotEndsWith .jar. Allowed values:auto(Auto-detect),zipDeploy(Zip Deploy),runFromPackage(Run From Package). Default value:auto.
deploymentMethod
string
appType != webAppLinux && appType != "" && package NotEndsWith .war && package NotEndsWith .jar
auto
zipDeploy
runFromPackage
auto
Choose thedeployment methodfor the app. Acceptable values areauto,zipDeploy, andrunFromPackage.
Task control options
All tasks have control options in addition to their task inputs. For more information, seeControl options and common task properties.
Output variables
This task defines the followingoutput variables, which you can consume in downstream steps, jobs, and stages.
AppServiceApplicationUrlThe application URL of the selected Azure App Service.
AppServiceApplicationUrl
Remarks
Use this task to deploy web applications to Azure App Service.
Deployment methods
Several deployment methods are available in this task.Autois the default option.
Auto
To change the package-based deployment option in designer task, expandAdditional Deployment Optionsand enableSelect Deployment Method.
Based on the type of Azure App Service and Azure Pipelines agent, the task chooses a suitable deployment technology. The different deployment technologies used by the task are:
Kudu REST APIs
Zip Deploy
RunFromPackage
By default, the task tries to select the appropriate deployment technology given the input package, app service type, and agent OS.
When the app service type is Web App on Linux App, useZip Deploy
If a War file is provided, useWar Deploy
If a Jar file is provided, useRun From Package
For all others, useRun From Zip(via Zip Deploy)
On a non-Windows agent (for any app service type), the task relies onKudu REST APIsto deploy the web app.
Kudu REST APIs
Kudu REST APIswork on Windows or Linux automation agents when the target is Web App on Windows, Web App on Linux (built-in source), or Function App. The task uses Kudu to copy files to the Azure App Service.
Zip Deploy
Creates a .zip deployment package of the chosen package or folder. The file contents are then deployed to the wwwroot folder of the function app in Azure App Service. This option overwrites all existing contents in the wwwroot folder. For more information, seeZip deployment for Azure Functions.
RunFromPackage
Creates the same deployment package as Zip Deploy. However, instead of deploying files to the wwwroot folder, the entire package is mounted by the Azure Functions runtime. With this option, files in the wwwroot folder become read-only. For more information, seeRun your Azure Functions from a package file.
Error: Could not fetch access token for Azure. Verify if the Service Principal used is valid and not expired.
The task uses the service principal in the service connection to authenticate with Azure. If the service principal has expired or doesn't have permissions to the App Service, the task fails with this error. Verify the validity of the service principal used and that it's present in the app registration. For more information, seeUse role-based access control to manage access to your Azure subscription resources.This blog postalso contains more information about using service principal authentication.
SSL error
If you want to use a certificate in App Service, the certificate must be signed by a trusted certificate authority. If your web app gives you certificate validation errors, you're probably using a self-signed certificate. Set a variable namedVSTS_ARM_REST_IGNORE_SSL_ERRORSto the valuetruein the build or release pipeline to resolve the error.
VSTS_ARM_REST_IGNORE_SSL_ERRORS
true
A release hangs for long time and then fails
This problem could be the result of insufficient capacity in your App Service plan. To resolve this problem, you can scale up the App Service instance to increase available CPU, RAM, and disk space or try with a different App Service plan.
5xxerror codes
If you're seeing a 5xxerror,check the status of your Azure service.
Azure Function suddenly stopped working
Azure Functions may suddenly stop working if more than one year has passed since the last deployment. If you deploy with "RunFromPackage" in "deploymentMethod", a SAS with an expiration date of 1 year is generated and set as the value of "WEBSITE_RUN_FROM_PACKAGE" in the application configuration. Azure Functions uses this SAS to reference the package file for function execution, so if the SAS has expired, the function will not be executed. To resolve this issue, deploy again to generate a SAS with an expiration date of one year.
Error: No package found with specified pattern
Check if the package mentioned in the task is published as an artifact in the build or a previous stage and downloaded in the current job.
Error: Publish using zip deploy option is not supported for msBuild package type
Web packages created via the MSBuild task (with default arguments) have a nested folder structure that can be deployed correctly only by Web Deploy. The publish-to-zip deployment option can't be used to deploy those packages. To convert the packaging structure, take these steps:
In the Build solution task, change theMSBuild Argumentsto/p:DeployOnBuild=true /p:DeployDefaultTarget=WebPublish /p:WebPublishMethod=FileSystem /p:DeleteExistingFiles=True /p:publishUrl="$(System.DefaultWorkingDirectory)\\WebAppContent":
In the Build solution task, change theMSBuild Argumentsto/p:DeployOnBuild=true /p:DeployDefaultTarget=WebPublish /p:WebPublishMethod=FileSystem /p:DeleteExistingFiles=True /p:publishUrl="$(System.DefaultWorkingDirectory)\\WebAppContent":
/p:DeployOnBuild=true /p:DeployDefaultTarget=WebPublish /p:WebPublishMethod=FileSystem /p:DeleteExistingFiles=True /p:publishUrl="$(System.DefaultWorkingDirectory)\\WebAppContent"

Add an Archive task and change the values as follows:ChangeRoot folder or file to archiveto$(System.DefaultWorkingDirectory)\\WebAppContent.Clear thePrepend root folder name to archive pathscheck box:
Add an Archive task and change the values as follows:
ChangeRoot folder or file to archiveto$(System.DefaultWorkingDirectory)\\WebAppContent.
ChangeRoot folder or file to archiveto$(System.DefaultWorkingDirectory)\\WebAppContent.
$(System.DefaultWorkingDirectory)\\WebAppContent
Clear thePrepend root folder name to archive pathscheck box:
Clear thePrepend root folder name to archive pathscheck box:

FAQs
AzureWebApp
AzureRmWebAppDeployment
TheAzure Web App task(AzureWebApp) is the simplest way to deploy to an Azure Web App. By default, your deployment happens to the root application in the Azure Web App.
AzureWebApp
TheAzure App Service Deploy task (AzureRmWebAppDeployment)can handle more custom scenarios, such as:
AzureRmWebAppDeployment
Modify configuration settingsinside web packages and XML parameters files.
Deploy with Web Deploy, if you're used to the IIS deployment process.
Deploy to virtual applications.
Deploy to other app types, like Container apps, Function apps, WebJobs, or API and Mobile apps.
Note
File transforms and variable substitution are also supported by the separateFile Transform taskfor use in Azure Pipelines. You can use the File Transform task to apply file transformations and variable substitutions on any configuration and parameters files.
This may be because web.config is not present in your app. You can either add a web.config file to your source or auto-generate one usingApplication and Configuration Settings.
Click on the task and go toGenerate web.config parameters for Python, Node.js, Go and Java apps.
Click on the task and go toGenerate web.config parameters for Python, Node.js, Go and Java apps.

Click on the more button...to edit the parameters.
Click on the more button...to edit the parameters.
...

Select your application type from the drop down.
Select your application type from the drop down.
Click OK. This will populate the web.config parameters required to generate web.config.
Click OK. This will populate the web.config parameters required to generate web.config.
Ensure that the Azure DevOps build agent is on the same VNET (subnet can be different) as the Internal Load Balancer (ILB) of  ASE. This will enable the agent to pull code from Azure DevOps and deploy to ASE.
If you are using Azure DevOps, the agent doesn't need to be accessible from the internet but needs only outbound access to connect to Azure DevOps Service.
If you are using TFS/Azure DevOps Server deployed in a Virtual Network, the agent can be completely isolated.
The build agent must be configured with the DNS configuration of the Web App it needs to deploy to. The private resources in the Virtual Network don't have entries in Azure DNS, so this needs to be added to the host's file on the agent machine.
If a self-signed certificate is used for the ASE configuration, the-allowUntrustedoption needs to be set in the deploy task for MSDeploy. It is also recommended to set the variableVSTS_ARM_REST_IGNORE_SSL_ERRORStotrue. If a certificate from a certificate authority is used for ASE configuration, this should not be necessary.
-allowUntrusted
VSTS_ARM_REST_IGNORE_SSL_ERRORS
true
How should I configure my service connection?
This task requires anAzure Resource Manager service connection.
How should I configure web job deployment with Application Insights?
When you're deploying to an App Service, if you haveApplication Insightsconfigured and you've enabledRemove additional files at destination, you also need to enableExclude files from the App_Data folder. Enabling this option keeps the Application Insights extension in a safe state. This step is required because the Application Insights continuous WebJob is installed into the App_Data folder.
Remove additional files at destination
Exclude files from the App_Data folder
How should I configure my agent if it's behind a proxy while I'm deploying to App Service?
If your self-hosted agent requires a web proxy, you can inform the agent about the proxy during configuration. Doing so allows your agent to connect to Azure Pipelines or Azure DevOps Server through the proxy.Learn more about running a self-hosted agent behind a web proxy.
Examples
Following is an example YAML snippet to deploy web application to the Azure Web App Service running on Windows.
variables:
  azureSubscription: Contoso
  # To ignore SSL error uncomment the below variable
  # VSTS_ARM_REST_IGNORE_SSL_ERRORS: true

steps:

- task: AzureWebApp@1
  displayName: Azure Web App Deploy
  inputs:
    azureSubscription: $(azureSubscription)
    appName: samplewebapp
    package: $(System.DefaultWorkingDirectory)/**/*.zip
variables:
  azureSubscription: Contoso
  # To ignore SSL error uncomment the below variable
  # VSTS_ARM_REST_IGNORE_SSL_ERRORS: true

steps:

- task: AzureWebApp@1
  displayName: Azure Web App Deploy
  inputs:
    azureSubscription: $(azureSubscription)
    appName: samplewebapp
    package: $(System.DefaultWorkingDirectory)/**/*.zip
To deploy Web App on Linux, add theappTypeparameter and set it toappType: webAppLinux.
appType
appType: webAppLinux
To specify the deployment method as Zip Deploy, add the parameterdeploymentMethod: zipDeploy. Another supported value for this parameter isrunFromPackage.
deploymentMethod: zipDeploy
runFromPackage
If not specified,autois the default value.
auto
Requirements
Feedback
Was this page helpful?
Additional resources