Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Azure landing zones - Bicep modules design considerations
Article
2023-11-07
8 contributors
In this article
This article discusses the design considerations of the modularizedAzure Landing Zones (ALZ) - Bicepsolution you can use to deploy and manage the core platform capabilities of theAzure landing zone conceptual architectureas detailed in the Cloud Adoption Framework (CAF).
Bicepis a domain-specific language (DSL) that uses declarative syntax to deploy Azure resources. It has concise syntax, reliable type safety, and support for code reuse.
An implementation of this architecture is available onGitHub: Azure Landing Zones (ALZ) - Bicep Implementation. You can use it as a starting point and configure it as per your needs.
Note
There areimplementationsfor several deployment technologies, including portal-based, ARM templates and Terraform modules. The choice of deployment technology should not influence the resulting Azure landing zones deployment.
ALZ Bicep Accelerator
You can find step by step guidance around implementing, automating, and maintaining your ALZ Bicep module with theALZ Bicep Accelerator.
The ALZ Bicep Accelerator framework was developed to provide end-users support to onboarding and deployment of ALZ Bicep using full-fledged CI/CD pipelines, support for GitHub Actions and Azure DevOps Pipelines, dedicated Framework to stay in-sync with new ALZ Bicep releases and modify or add custom modules, and provides branching strategy guidance and pull request pipelines for linting and validating Bicep modules.
Design

The architecture takes advantage of the modular nature of Azure Bicep and is composed of number of modules. Each module encapsulates a core capability of the Azure Landing Zones conceptual architecture. The modules can be deployed individually, but there are dependencies to be aware of.
The architecture proposes the inclusion of orchestrator modules to simplify the deployment experience. The orchestrator modules could be used to automate the deployment of the modules and to encapsulate differing deployment topologies.
Modules
A core concept in Bicep is the use ofmodules. Modules enable you to organize deployments into logical groupings. With modules, you improve the readability of your Bicep files by encapsulating complex details of your deployment. You can also easily reuse modules for different deployments.
The ability to re-use modules offers a real benefit when defining and deploying landing zones. It enables repeatable, consistent environments in code while reducing the effort required to deploy at scale.
Layers and staging
In addition to modules, the Bicep landing zone architecture is structured using a concept of layers. Layers are groups of Bicep modules that are intended to be deployed together. Those groups form logical stages of the implementation.

A benefit of this layered approach is the ability to add to your environment incrementally over time. For example, you can start with a small number of the layers. You can add the remaining layers at a subsequent stage when youâre ready.
Module descriptions
This section provides a high-level overview of the core modules in this architecture.
Azure Policies
Azure Role Based Access Controls (RBAC) role assignments
Cost controls
Management groups - Cloud Adoption Framework (CAF) documentation
Module:  Management Groups - Reference Implementation
Adopt policy-driven guardrails - CAF documentation
Module: Custom policy definitions - Reference Implementation
Custom policy definitions deployed in reference implementations
Azure role-based access control - CAF documentation
Custom role definitions deployed in reference implementation
Collect - Collect data across your entire infrastructure
Detect - Detect threats that were previously undetected
Respond - Respond to legitimate threats with built-in orchestration
Investigate - Investigate threats with artificial intelligence
Configuration management - Inventory and track changes for Linux and Windows virtual machines and manage desired state configuration
Update management - Assess Windows and Linux system compliance and create scheduled deployments to meet compliance
Process automation - Automate management tasks
Workload management and monitoring - CAF documentation
Module: Logging, Automation & Sentinel - Reference Implementation
Topologies based on Azure Virtual WAN
Traditional topologies
Define an Azure network topology - CAF Documentation
Modules: Network Topology Deployment - Reference Implementation
Azure identity and access management design area - CAF documentation
Module: Role Assignments for Management Groups & Subscriptions - Reference Implementation
Azure Policies
Azure Role Based Access Controls (RBAC) role assignments
Cost controls
Management groups - Cloud Adoption Framework (CAF) documentation
Module: Subscription Placement
Adopt policy-driven guardrails - CAF documentation
Module: ALZ Default Policy Assignments
Module: Orchestration - hubPeeredSpoke - Spoke network, including peering to Hub (Hub & Spoke or Virtual WAN)
Customizing the Bicep implementation
TheAzure landing zone implementationsprovided as part of the Cloud Adoption Framework suit a wide variety of requirements and use cases. However, there are often scenarios where customization is required to meet specific business needs.
Tip
SeeTailor the Azure landing zone architecture to meet requirementsfor further information.
Once the platform landing zone is implemented the next step is to deployApplication landing zoneswhich enable application teams under thelanding zonesmanagement group with the guardrails that Central IT or PlatformOps administrators require. Thecorpmanagement group is for corporate connected applications, while theonlinemanagement group is for applications that are primarily publicly facing, but may still connect to corporate applications via hub networks in some scenarios.
landing zones
corp
online
TheBicep Azure landing zone implementationcan be used as the basis of your customized deployment. It provides you a way to accelerate your implementation by removing the need to start from scratch because of a specific required change that rules a ready-made option out.
Information on customizing the modules is available in the GitHub repo wikiGitHub: Azure Landing Zones (ALZ) Bicep - Wiki- Consumer Guide. You can use it as a starting point and configure it as per your needs.
Feedback
Was this page helpful?
Additional resources