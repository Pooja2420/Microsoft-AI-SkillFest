Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Assign a Key Vault access policy (legacy)
Article
2025-04-15
5 contributors
In this article
Important
When using the Access Policy permission model, a user with theContributor,Key Vault Contributor, or any other role that includesMicrosoft.KeyVault/vaults/writepermissions for the key vault management plane can grant themselves data plane access by setting a Key Vault access policy. To prevent unauthorized access and management of your key vaults, keys, secrets, and certificates, it's essential to limit Contributor role access to key vaults under the Access Policy permission model. To mitigate this risk, we recommend you use theRole-Based Access Control (RBAC) permission model, which restricts permission management to the 'Owner' and 'User Access Administrator' roles, allowing a clear separation between security operations and administrative duties. See theKey Vault RBAC GuideandWhat is Azure RBAC?for more information.
Contributor
Key Vault Contributor
Microsoft.KeyVault/vaults/write
A Key Vault access policy determines whether a given security principal, namely a user, application or user group, can perform different operations on Key Vaultsecrets,keys, andcertificates. You can assign access policies using theAzure portal, the Azure CLI, orAzure PowerShell.
Key vault supports up to 1024 access policy entries, with each entry granting a distinct set of permissions to a particular security principal. Because of this limitation, we recommend assigning access policies to groups of users, where possible, rather than individual users. Using groups makes it much easier to manage permissions for multiple people in your organization. For more information, seeManage app and resource access using Microsoft Entra groups.
Azure portal
Azure CLI
Azure PowerShell
Assign an access policy
In theAzure portal, navigate to the Key Vault resource.
In theAzure portal, navigate to the Key Vault resource.
SelectAccess policies, then selectCreate:
SelectAccess policies, then selectCreate:

Select the permissions you want underKey permissions,Secret permissions, andCertificate permissions.
Select the permissions you want underKey permissions,Secret permissions, andCertificate permissions.

Under thePrincipalselection pane, enter the name of the user, app or service principal in the search field and select the appropriate result.If you're using a managed identity for the app, search for and select the name of the app itself. (For more information on security principals, seeKey Vault authentication.
Under thePrincipalselection pane, enter the name of the user, app or service principal in the search field and select the appropriate result.

If you're using a managed identity for the app, search for and select the name of the app itself. (For more information on security principals, seeKey Vault authentication.
Review the access policy changes and selectCreateto save the access policy.
Review the access policy changes and selectCreateto save the access policy.

Back on theAccess policiespage, verify that your access policy is listed.
Back on theAccess policiespage, verify that your access policy is listed.

For more information on creating groups in Microsoft Entra ID using the Azure CLI, seeaz ad group createandaz ad group member add.
Configure the Azure CLI and sign in
To run Azure CLI commands locally, install theAzure CLI.To run commands directly in the cloud, use theAzure Cloud Shell.
To run Azure CLI commands locally, install theAzure CLI.
To run commands directly in the cloud, use theAzure Cloud Shell.
Local CLI only: sign in to Azure usingaz login:az loginTheaz logincommand opens a browser window to gather credentials if needed.
Local CLI only: sign in to Azure usingaz login:
az login
az login
az login
Theaz logincommand opens a browser window to gather credentials if needed.
az login
Acquire the object ID
Determine the object ID of the application, group, or user to which you want to assign the access policy:
Applications and other service principals: use theaz ad sp listcommand to retrieve your service principals. Examine the output of the command to determine the object ID of the security principal to which you want to assign the access policy.az ad sp list --show-mine
Applications and other service principals: use theaz ad sp listcommand to retrieve your service principals. Examine the output of the command to determine the object ID of the security principal to which you want to assign the access policy.
az ad sp list --show-mine
az ad sp list --show-mine
Groups: use theaz ad group listcommand, filtering the results with the--display-nameparameter:az ad group list --display-name <search-string>
Groups: use theaz ad group listcommand, filtering the results with the--display-nameparameter:
--display-name
az ad group list --display-name <search-string>
az ad group list --display-name <search-string>
Users: use theaz ad user showcommand, passing the user's email address in the--idparameter:az ad user show --id <email-address-of-user>
Users: use theaz ad user showcommand, passing the user's email address in the--idparameter:
--id
az ad user show --id <email-address-of-user>
az ad user show --id <email-address-of-user>
Assign the access policy
Use theaz keyvault set-policycommand to assign the desired permissions:
az keyvault set-policy --name myKeyVault --object-id <object-id> --secret-permissions <secret-permissions> --key-permissions <key-permissions> --certificate-permissions <certificate-permissions>
az keyvault set-policy --name myKeyVault --object-id <object-id> --secret-permissions <secret-permissions> --key-permissions <key-permissions> --certificate-permissions <certificate-permissions>
Replace<object-id>with the object ID of your security principal.
<object-id>
You need only include--secret-permissions,--key-permissions, and--certificate-permissionswhen assigning permissions to those particular types. The allowable values for<secret-permissions>,<key-permissions>, and<certificate-permissions>are given in theaz keyvault set-policydocumentation.
--secret-permissions
--key-permissions
--certificate-permissions
<secret-permissions>
<key-permissions>
<certificate-permissions>
For more information on creating groups in Microsoft Entra ID using Azure PowerShell, seeNew-AzADGroupandAdd-AzADGroupMember.
Configure PowerShell and sign-in
To run commands locally, installAzure PowerShellif you haven't already.To run commands directly in the cloud, use theAzure Cloud Shell.
To run commands locally, installAzure PowerShellif you haven't already.
To run commands directly in the cloud, use theAzure Cloud Shell.
Local PowerShell only:Install theAzure Active Directory PowerShell module.Sign in to Azure:Connect-AzAccount
Local PowerShell only:
Install theAzure Active Directory PowerShell module.
Install theAzure Active Directory PowerShell module.
Sign in to Azure:Connect-AzAccount
Sign in to Azure:
Connect-AzAccount
Connect-AzAccount
Acquire the object ID
Determine the object ID of the application, group, or user to which you want to assign the access policy:
Applications and other service principals: use theGet-AzADServicePrincipalcmdlet with the-SearchStringparameter to filter results to the name of the desired service principal:Get-AzADServicePrincipal -SearchString <search-string>
Applications and other service principals: use theGet-AzADServicePrincipalcmdlet with the-SearchStringparameter to filter results to the name of the desired service principal:
-SearchString
Get-AzADServicePrincipal -SearchString <search-string>
Get-AzADServicePrincipal -SearchString <search-string>
Groups: use theGet-AzADGroupcmdlet with the-SearchStringparameter to filter results to the name of the desired group:Get-AzADGroup -SearchString <search-string>In the output, the object ID is listed asId.
Groups: use theGet-AzADGroupcmdlet with the-SearchStringparameter to filter results to the name of the desired group:
-SearchString
Get-AzADGroup -SearchString <search-string>
Get-AzADGroup -SearchString <search-string>
In the output, the object ID is listed asId.
Id
Users: use theGet-AzADUsercmdlet, passing the user's email address to the-UserPrincipalNameparameter.Get-AzAdUser -UserPrincipalName <email-address-of-user>In the output, the object ID is listed asId.
Users: use theGet-AzADUsercmdlet, passing the user's email address to the-UserPrincipalNameparameter.
-UserPrincipalName
Get-AzAdUser -UserPrincipalName <email-address-of-user>
Get-AzAdUser -UserPrincipalName <email-address-of-user>
In the output, the object ID is listed asId.
Id
Assign the access policy
Use theSet-AzKeyVaultAccessPolicycmdlet to assign the access policy:
Set-AzKeyVaultAccessPolicy -VaultName <key-vault-name> -ObjectId <Id> -PermissionsToSecrets <secrets-permissions> -PermissionsToKeys <keys-permissions> -PermissionsToCertificates <certificate-permissions
Set-AzKeyVaultAccessPolicy -VaultName <key-vault-name> -ObjectId <Id> -PermissionsToSecrets <secrets-permissions> -PermissionsToKeys <keys-permissions> -PermissionsToCertificates <certificate-permissions
You need only include-PermissionsToSecrets,-PermissionsToKeys, and-PermissionsToCertificateswhen assigning permissions to those particular types. The allowable values for<secret-permissions>,<key-permissions>, and<certificate-permissions>are given in theSet-AzKeyVaultAccessPolicy - Parametersdocumentation.
-PermissionsToSecrets
-PermissionsToKeys
-PermissionsToCertificates
<secret-permissions>
<key-permissions>
<certificate-permissions>
Next steps
Azure Key Vault security
Azure Key Vault developer's guide
Feedback
Was this page helpful?
Additional resources