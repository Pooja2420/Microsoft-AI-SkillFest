Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Start a runbook from a webhook
Article
2024-09-09
23 contributors
In this article
A webhook allows an external service to start a particular runbook in Azure Automation through a single HTTP request. External services include Azure DevOps Services, GitHub, Azure Monitor logs, and custom applications. Such a service can use a webhook to start a runbook without implementing the full Azure Automation API. You can compare webhooks to other methods of starting a runbook inStarting a runbook in Azure Automation.

To understand client requirements for TLS 1.2 or higher with webhooks, seeTLS for Azure Automation.
Webhook properties
The following table describes the properties that you must configure for a webhook.
Parameters used when the webhook starts a runbook
A webhook can define values for runbook parameters that are used when the runbook starts. The webhook must include values for any mandatory runbook parameters and can include values for optional parameters. A parameter value configured to a webhook can be modified even after webhook creation. Multiple webhooks linked to a single runbook can each use different runbook parameter values. When a client starts a runbook using a webhook, it can't override the parameter values defined in the webhook.
To receive data from the client, the runbook supports a single parameter calledWebhookData. This parameter defines an object containing data that the client includes in a POST request.
WebhookData

TheWebhookDataparameter has the following properties:
WebhookData
There's no configuration of the webhook required to support theWebhookDataparameter, and the runbook isn't required to accept it. If the runbook doesn't define the parameter, any details of the request sent from the client are ignored.
WebhookData
Note
When calling a webhook, the client should always store any parameter values in case the call fails. If there is a network outage or connection issue, the application can't retrieve failed webhook calls.
If you specify a value forWebhookDataat webhook creation, it's overridden when the webhook starts the runbook with the data from the client POST request. This happens even if the application doesn't include any data in the request body.
WebhookData
If you start a runbook that definesWebhookDatausing a mechanism other than a webhook, you can provide a value forWebhookDatathat the runbook recognizes. This value should be an object with the samepropertiesas theWebhookDataparameter so that the runbook can work with it just as it works with actualWebhookDataobjects passed by a webhook.
WebhookData
WebhookData
WebhookData
WebhookData
For example, if you're starting the following runbook from the Azure portal and want to pass some sample webhook data for testing, you must pass the data in JSON in the user interface.

For the next runbook example, let's define the following properties forWebhookData:
WebhookData
WebhookName: MyWebhook
RequestBody:*[{'ResourceGroup': 'myResourceGroup','Name': 'vm01'},{'ResourceGroup': 'myResourceGroup','Name': 'vm02'}]*
*[{'ResourceGroup': 'myResourceGroup','Name': 'vm01'},{'ResourceGroup': 'myResourceGroup','Name': 'vm02'}]*
Now we pass the following JSON object in the UI for theWebhookDataparameter. This example, with carriage returns and newline characters, matches the format that is passed in from a webhook.
WebhookData
{"WebhookName":"mywebhook","RequestBody":"[\r\n {\r\n \"ResourceGroup\": \"vm01\",\r\n \"Name\": \"vm01\"\r\n },\r\n {\r\n \"ResourceGroup\": \"vm02\",\r\n \"Name\": \"vm02\"\r\n }\r\n]"}
{"WebhookName":"mywebhook","RequestBody":"[\r\n {\r\n \"ResourceGroup\": \"vm01\",\r\n \"Name\": \"vm01\"\r\n },\r\n {\r\n \"ResourceGroup\": \"vm02\",\r\n \"Name\": \"vm02\"\r\n }\r\n]"}

Note
Azure Automation logs the values of all input parameters with the runbook job. Thus any input provided by the client in the webhook request is logged and available to anyone with access to the automation job. For this reason, you should be cautious about including sensitive information in webhook calls.
Webhook security
The security of a webhook relies on the privacy of its URL, which contains a security token that allows the webhook to be invoked. Azure Automation doesn't perform any authentication on a request as long as it's made to the correct URL. For this reason, your clients shouldn't use webhooks for runbooks that perform highly sensitive operations without using an alternate means of validating the request.
Consider the following strategies:
You can include logic within a runbook to determine if it's called by a webhook. Have the runbook check theWebhookNameproperty of theWebhookDataparameter. The runbook can perform further validation by looking for particular information in theRequestHeaderandRequestBodyproperties.
You can include logic within a runbook to determine if it's called by a webhook. Have the runbook check theWebhookNameproperty of theWebhookDataparameter. The runbook can perform further validation by looking for particular information in theRequestHeaderandRequestBodyproperties.
WebhookName
WebhookData
RequestHeader
RequestBody
Have the runbook perform some validation of an external condition when it receives a webhook request. For example, consider a runbook that is called by GitHub any time there's a new commit to a GitHub repository. The runbook might connect to GitHub to validate that a new commit has occurred before continuing.
Have the runbook perform some validation of an external condition when it receives a webhook request. For example, consider a runbook that is called by GitHub any time there's a new commit to a GitHub repository. The runbook might connect to GitHub to validate that a new commit has occurred before continuing.
Azure Automation supports Azure virtual network service tags, specificallyGuestAndHybridManagement. You can use service tags to define network access controls onnetwork security groupsorAzure Firewalland trigger webhooks from within your virtual network. Service tags can be used in place of specific IP addresses when you create security rules. By specifying the service tag nameGuestAndHybridManagementin the appropriate source or destination field of a rule, you can allow or deny the traffic for the Automation service. This service tag doesn't support allowing more granular control by restricting IP ranges to a specific region.
Azure Automation supports Azure virtual network service tags, specificallyGuestAndHybridManagement. You can use service tags to define network access controls onnetwork security groupsorAzure Firewalland trigger webhooks from within your virtual network. Service tags can be used in place of specific IP addresses when you create security rules. By specifying the service tag nameGuestAndHybridManagementin the appropriate source or destination field of a rule, you can allow or deny the traffic for the Automation service. This service tag doesn't support allowing more granular control by restricting IP ranges to a specific region.
Create a webhook
Note
When you use the webhook with PowerShell 7 runbook, it auto-converts the webhook input parameter to an invalid JSON. For more information, seeKnown issues - PowerShell 7.1 (preview). We recommend that you use the webhook with PowerShell 5 runbook.
Create PowerShell runbook with the following code:param
(
    [Parameter(Mandatory=$false)]
    [object] $WebhookData
)

write-output "start"
write-output ("object type: {0}" -f $WebhookData.gettype())
write-output $WebhookData
write-output "`n`n"
write-output $WebhookData.WebhookName
write-output $WebhookData.RequestBody
write-output $WebhookData.RequestHeader
write-output "end"

if ($WebhookData.RequestBody) { 
    $names = (ConvertFrom-Json -InputObject $WebhookData.RequestBody)

        foreach ($x in $names)
        {
            $name = $x.Name
            Write-Output "Hello $name"
        }
}
else {
    Write-Output "Hello World!"
}
Create PowerShell runbook with the following code:
param
(
    [Parameter(Mandatory=$false)]
    [object] $WebhookData
)

write-output "start"
write-output ("object type: {0}" -f $WebhookData.gettype())
write-output $WebhookData
write-output "`n`n"
write-output $WebhookData.WebhookName
write-output $WebhookData.RequestBody
write-output $WebhookData.RequestHeader
write-output "end"

if ($WebhookData.RequestBody) { 
    $names = (ConvertFrom-Json -InputObject $WebhookData.RequestBody)

        foreach ($x in $names)
        {
            $name = $x.Name
            Write-Output "Hello $name"
        }
}
else {
    Write-Output "Hello World!"
}
param
(
    [Parameter(Mandatory=$false)]
    [object] $WebhookData
)

write-output "start"
write-output ("object type: {0}" -f $WebhookData.gettype())
write-output $WebhookData
write-output "`n`n"
write-output $WebhookData.WebhookName
write-output $WebhookData.RequestBody
write-output $WebhookData.RequestHeader
write-output "end"

if ($WebhookData.RequestBody) { 
    $names = (ConvertFrom-Json -InputObject $WebhookData.RequestBody)

        foreach ($x in $names)
        {
            $name = $x.Name
            Write-Output "Hello $name"
        }
}
else {
    Write-Output "Hello World!"
}
Create a webhook using the Azure portal, or PowerShell or REST API. A webhook requires a published runbook. This walk through uses a modified version of the runbook created fromCreate an Azure Automation runbook.Azure portalPowerShellREST APISign in to theAzure portal.In the Azure portal, navigate to your Automation account.UnderProcess Automation, selectRunbooksto open theRunbookspage.Select your runbook from the list to open the RunbookOverviewpage.SelectAdd webhookto open theAdd Webhookpage.On theAdd Webhookpage, selectCreate new webhook.Enter in theNamefor the webhook. The expiration date for the fieldExpiresdefaults to one year from the current date.Click the copy icon or pressCtrl + Ccopy the URL of the webhook. Then save the URL to a secure location.ImportantOnce you create the webhook, you cannot retrieve the URL again. Make sure you copy and record it as above.SelectOKto return to theAdd Webhookpage.From theAdd Webhookpage, selectConfigure parameters and run settingsto open theParameterspage.Review theParameterspage. For the example runbook used in this article, no changes are needed. SelectOKto return to theAdd Webhookpage.From theAdd Webhookpage, selectCreate. The webhook is created and you're returned to the RunbookOverviewpage.Verify you have the latest version of the PowerShellAz Moduleinstalled.Sign in to Azure interactively using theConnect-AzAccountcmdlet and follow the instructions.# Sign in to your Azure subscription
$sub = Get-AzSubscription -ErrorAction SilentlyContinue
if(-not($sub))
{
    Connect-AzAccount
}Use theNew-AzAutomationWebhookcmdlet to create a webhook for an Automation runbook. Provide an appropriate value for the variables and then execute the script.# Initialize variables with your relevant values
$resourceGroup = "resourceGroupName"
$automationAccount = "automationAccountName"
$runbook = "runbookName"
$psWebhook = "webhookName"

# Create webhook
$newWebhook = New-AzAutomationWebhook `
    -ResourceGroup $resourceGroup `
    -AutomationAccountName $automationAccount `
    -Name $psWebhook `
    -RunbookName $runbook `
    -IsEnabled $True `
    -ExpiryTime "12/31/2022" `
    -Force

# Store URL in variable; reveal variable
$uri = $newWebhook.WebhookURI
$uriThe output will be a URL that looks similar to:https://ad7f1818-7ea9-4567-b43a.webhook.wus.azure-automation.net/webhooks?token=uTi69VZ4RCa42zfKHCeHmJa2W9fdYou can also verify the webhook with the PowerShell cmdletGet-AzAutomationWebhook.Get-AzAutomationWebhook `
    -ResourceGroup $resourceGroup `
    -AutomationAccountName $automationAccount `
    -Name $psWebhookThe PUT command is documented atWebhook - Create Or Update. This example uses the PowerShell cmdletInvoke-RestMethodto send the PUT request.Create a file calledwebhook.jsonand then paste the following code:{
"name": "RestWebhook",
"properties": {
    "isEnabled": true,
    "expiryTime": "2022-03-29T22:18:13.7002872Z",
    "runbook": {
    "name": "runbookName"
    }
}
}Before running, modify the value for therunbook:nameproperty with the actual name of your runbook. ReviewWebhook propertiesfor more information about these properties.Verify you have the latest version of the PowerShellAz Moduleinstalled.Sign in to Azure interactively using theConnect-AzAccountcmdlet and follow the instructions.# Sign in to your Azure subscription
$sub = Get-AzSubscription -ErrorAction SilentlyContinue
if(-not($sub))
{
    Connect-AzAccount
}Provide an appropriate value for the variables and then execute the script.# Initialize variables
$subscription = "subscriptionID"
$resourceGroup = "resourceGroup"
$automationAccount = "automationAccount"
$runbook = "runbookName"
$restWebhook = "webhookName"
$file = "path\webhook.json"

# consume file
$body = Get-Content $file

# Craft Uri
$restURI = "https://management.azure.com/subscriptions/$subscription/resourceGroups/$resourceGroup/providers/Microsoft.Automation/automationAccounts/$automationAccount/webhooks/$restWebhook`?api-version=2015-10-31"Run the following script to obtain an access token. If your access token expired, you need  to rerun the script.# Obtain access token
$azContext = Get-AzContext
$azProfile = [Microsoft.Azure.Commands.Common.Authentication.Abstractions.AzureRmProfileProvider]::Instance.Profile
$profileClient = New-Object -TypeName Microsoft.Azure.Commands.ResourceManager.Common.RMProfileClient -ArgumentList ($azProfile)
$token = $profileClient.AcquireAccessToken($azContext.Subscription.TenantId)
$authHeader = @{
    'Content-Type'='application/json'
    'Authorization'='Bearer ' + $token.AccessToken
}Run the following script to create the webhook using the REST API.# Invoke the REST API
# Store URL in variable; reveal variable
$response = Invoke-RestMethod -Uri $restURI -Method Put -Headers $authHeader -Body $body
$webhookURI = $response.properties.uri
$webhookURIThe output is a URL that looks similar to:https://ad7f1818-7ea9-4567-b43a.webhook.wus.azure-automation.net/webhooks?token=uTi69VZ4RCa42zfKHCeHmJa2W9fdYou can also useWebhook - Getto retrieve the webhook identified by its name. You can run the following PowerShell commands:$response = Invoke-RestMethod -Uri $restURI -Method GET -Headers $authHeader
$response | ConvertTo-Json
Create a webhook using the Azure portal, or PowerShell or REST API. A webhook requires a published runbook. This walk through uses a modified version of the runbook created fromCreate an Azure Automation runbook.
Azure portal
PowerShell
REST API
Sign in to theAzure portal.
Sign in to theAzure portal.
In the Azure portal, navigate to your Automation account.
In the Azure portal, navigate to your Automation account.
UnderProcess Automation, selectRunbooksto open theRunbookspage.
UnderProcess Automation, selectRunbooksto open theRunbookspage.
Select your runbook from the list to open the RunbookOverviewpage.
Select your runbook from the list to open the RunbookOverviewpage.
SelectAdd webhookto open theAdd Webhookpage.
SelectAdd webhookto open theAdd Webhookpage.

On theAdd Webhookpage, selectCreate new webhook.
On theAdd Webhookpage, selectCreate new webhook.

Enter in theNamefor the webhook. The expiration date for the fieldExpiresdefaults to one year from the current date.
Enter in theNamefor the webhook. The expiration date for the fieldExpiresdefaults to one year from the current date.
Click the copy icon or pressCtrl + Ccopy the URL of the webhook. Then save the URL to a secure location.ImportantOnce you create the webhook, you cannot retrieve the URL again. Make sure you copy and record it as above.
Click the copy icon or pressCtrl + Ccopy the URL of the webhook. Then save the URL to a secure location.

Important
Once you create the webhook, you cannot retrieve the URL again. Make sure you copy and record it as above.
SelectOKto return to theAdd Webhookpage.
SelectOKto return to theAdd Webhookpage.
From theAdd Webhookpage, selectConfigure parameters and run settingsto open theParameterspage.
From theAdd Webhookpage, selectConfigure parameters and run settingsto open theParameterspage.

Review theParameterspage. For the example runbook used in this article, no changes are needed. SelectOKto return to theAdd Webhookpage.
Review theParameterspage. For the example runbook used in this article, no changes are needed. SelectOKto return to theAdd Webhookpage.
From theAdd Webhookpage, selectCreate. The webhook is created and you're returned to the RunbookOverviewpage.
From theAdd Webhookpage, selectCreate. The webhook is created and you're returned to the RunbookOverviewpage.
Verify you have the latest version of the PowerShellAz Moduleinstalled.
Verify you have the latest version of the PowerShellAz Moduleinstalled.
Sign in to Azure interactively using theConnect-AzAccountcmdlet and follow the instructions.# Sign in to your Azure subscription
$sub = Get-AzSubscription -ErrorAction SilentlyContinue
if(-not($sub))
{
    Connect-AzAccount
}
Sign in to Azure interactively using theConnect-AzAccountcmdlet and follow the instructions.
# Sign in to your Azure subscription
$sub = Get-AzSubscription -ErrorAction SilentlyContinue
if(-not($sub))
{
    Connect-AzAccount
}
# Sign in to your Azure subscription
$sub = Get-AzSubscription -ErrorAction SilentlyContinue
if(-not($sub))
{
    Connect-AzAccount
}
Use theNew-AzAutomationWebhookcmdlet to create a webhook for an Automation runbook. Provide an appropriate value for the variables and then execute the script.# Initialize variables with your relevant values
$resourceGroup = "resourceGroupName"
$automationAccount = "automationAccountName"
$runbook = "runbookName"
$psWebhook = "webhookName"

# Create webhook
$newWebhook = New-AzAutomationWebhook `
    -ResourceGroup $resourceGroup `
    -AutomationAccountName $automationAccount `
    -Name $psWebhook `
    -RunbookName $runbook `
    -IsEnabled $True `
    -ExpiryTime "12/31/2022" `
    -Force

# Store URL in variable; reveal variable
$uri = $newWebhook.WebhookURI
$uriThe output will be a URL that looks similar to:https://ad7f1818-7ea9-4567-b43a.webhook.wus.azure-automation.net/webhooks?token=uTi69VZ4RCa42zfKHCeHmJa2W9fd
Use theNew-AzAutomationWebhookcmdlet to create a webhook for an Automation runbook. Provide an appropriate value for the variables and then execute the script.
# Initialize variables with your relevant values
$resourceGroup = "resourceGroupName"
$automationAccount = "automationAccountName"
$runbook = "runbookName"
$psWebhook = "webhookName"

# Create webhook
$newWebhook = New-AzAutomationWebhook `
    -ResourceGroup $resourceGroup `
    -AutomationAccountName $automationAccount `
    -Name $psWebhook `
    -RunbookName $runbook `
    -IsEnabled $True `
    -ExpiryTime "12/31/2022" `
    -Force

# Store URL in variable; reveal variable
$uri = $newWebhook.WebhookURI
$uri
# Initialize variables with your relevant values
$resourceGroup = "resourceGroupName"
$automationAccount = "automationAccountName"
$runbook = "runbookName"
$psWebhook = "webhookName"

# Create webhook
$newWebhook = New-AzAutomationWebhook `
    -ResourceGroup $resourceGroup `
    -AutomationAccountName $automationAccount `
    -Name $psWebhook `
    -RunbookName $runbook `
    -IsEnabled $True `
    -ExpiryTime "12/31/2022" `
    -Force

# Store URL in variable; reveal variable
$uri = $newWebhook.WebhookURI
$uri
The output will be a URL that looks similar to:https://ad7f1818-7ea9-4567-b43a.webhook.wus.azure-automation.net/webhooks?token=uTi69VZ4RCa42zfKHCeHmJa2W9fd
https://ad7f1818-7ea9-4567-b43a.webhook.wus.azure-automation.net/webhooks?token=uTi69VZ4RCa42zfKHCeHmJa2W9fd
You can also verify the webhook with the PowerShell cmdletGet-AzAutomationWebhook.Get-AzAutomationWebhook `
    -ResourceGroup $resourceGroup `
    -AutomationAccountName $automationAccount `
    -Name $psWebhook
You can also verify the webhook with the PowerShell cmdletGet-AzAutomationWebhook.
Get-AzAutomationWebhook `
    -ResourceGroup $resourceGroup `
    -AutomationAccountName $automationAccount `
    -Name $psWebhook
Get-AzAutomationWebhook `
    -ResourceGroup $resourceGroup `
    -AutomationAccountName $automationAccount `
    -Name $psWebhook
The PUT command is documented atWebhook - Create Or Update. This example uses the PowerShell cmdletInvoke-RestMethodto send the PUT request.
Create a file calledwebhook.jsonand then paste the following code:{
"name": "RestWebhook",
"properties": {
    "isEnabled": true,
    "expiryTime": "2022-03-29T22:18:13.7002872Z",
    "runbook": {
    "name": "runbookName"
    }
}
}Before running, modify the value for therunbook:nameproperty with the actual name of your runbook. ReviewWebhook propertiesfor more information about these properties.
Create a file calledwebhook.jsonand then paste the following code:
webhook.json
{
"name": "RestWebhook",
"properties": {
    "isEnabled": true,
    "expiryTime": "2022-03-29T22:18:13.7002872Z",
    "runbook": {
    "name": "runbookName"
    }
}
}
{
"name": "RestWebhook",
"properties": {
    "isEnabled": true,
    "expiryTime": "2022-03-29T22:18:13.7002872Z",
    "runbook": {
    "name": "runbookName"
    }
}
}
Before running, modify the value for therunbook:nameproperty with the actual name of your runbook. ReviewWebhook propertiesfor more information about these properties.
Verify you have the latest version of the PowerShellAz Moduleinstalled.
Verify you have the latest version of the PowerShellAz Moduleinstalled.
Sign in to Azure interactively using theConnect-AzAccountcmdlet and follow the instructions.# Sign in to your Azure subscription
$sub = Get-AzSubscription -ErrorAction SilentlyContinue
if(-not($sub))
{
    Connect-AzAccount
}
Sign in to Azure interactively using theConnect-AzAccountcmdlet and follow the instructions.
# Sign in to your Azure subscription
$sub = Get-AzSubscription -ErrorAction SilentlyContinue
if(-not($sub))
{
    Connect-AzAccount
}
# Sign in to your Azure subscription
$sub = Get-AzSubscription -ErrorAction SilentlyContinue
if(-not($sub))
{
    Connect-AzAccount
}
Provide an appropriate value for the variables and then execute the script.# Initialize variables
$subscription = "subscriptionID"
$resourceGroup = "resourceGroup"
$automationAccount = "automationAccount"
$runbook = "runbookName"
$restWebhook = "webhookName"
$file = "path\webhook.json"

# consume file
$body = Get-Content $file

# Craft Uri
$restURI = "https://management.azure.com/subscriptions/$subscription/resourceGroups/$resourceGroup/providers/Microsoft.Automation/automationAccounts/$automationAccount/webhooks/$restWebhook`?api-version=2015-10-31"
Provide an appropriate value for the variables and then execute the script.
# Initialize variables
$subscription = "subscriptionID"
$resourceGroup = "resourceGroup"
$automationAccount = "automationAccount"
$runbook = "runbookName"
$restWebhook = "webhookName"
$file = "path\webhook.json"

# consume file
$body = Get-Content $file

# Craft Uri
$restURI = "https://management.azure.com/subscriptions/$subscription/resourceGroups/$resourceGroup/providers/Microsoft.Automation/automationAccounts/$automationAccount/webhooks/$restWebhook`?api-version=2015-10-31"
# Initialize variables
$subscription = "subscriptionID"
$resourceGroup = "resourceGroup"
$automationAccount = "automationAccount"
$runbook = "runbookName"
$restWebhook = "webhookName"
$file = "path\webhook.json"

# consume file
$body = Get-Content $file

# Craft Uri
$restURI = "https://management.azure.com/subscriptions/$subscription/resourceGroups/$resourceGroup/providers/Microsoft.Automation/automationAccounts/$automationAccount/webhooks/$restWebhook`?api-version=2015-10-31"
Run the following script to obtain an access token. If your access token expired, you need  to rerun the script.# Obtain access token
$azContext = Get-AzContext
$azProfile = [Microsoft.Azure.Commands.Common.Authentication.Abstractions.AzureRmProfileProvider]::Instance.Profile
$profileClient = New-Object -TypeName Microsoft.Azure.Commands.ResourceManager.Common.RMProfileClient -ArgumentList ($azProfile)
$token = $profileClient.AcquireAccessToken($azContext.Subscription.TenantId)
$authHeader = @{
    'Content-Type'='application/json'
    'Authorization'='Bearer ' + $token.AccessToken
}
Run the following script to obtain an access token. If your access token expired, you need  to rerun the script.
# Obtain access token
$azContext = Get-AzContext
$azProfile = [Microsoft.Azure.Commands.Common.Authentication.Abstractions.AzureRmProfileProvider]::Instance.Profile
$profileClient = New-Object -TypeName Microsoft.Azure.Commands.ResourceManager.Common.RMProfileClient -ArgumentList ($azProfile)
$token = $profileClient.AcquireAccessToken($azContext.Subscription.TenantId)
$authHeader = @{
    'Content-Type'='application/json'
    'Authorization'='Bearer ' + $token.AccessToken
}
# Obtain access token
$azContext = Get-AzContext
$azProfile = [Microsoft.Azure.Commands.Common.Authentication.Abstractions.AzureRmProfileProvider]::Instance.Profile
$profileClient = New-Object -TypeName Microsoft.Azure.Commands.ResourceManager.Common.RMProfileClient -ArgumentList ($azProfile)
$token = $profileClient.AcquireAccessToken($azContext.Subscription.TenantId)
$authHeader = @{
    'Content-Type'='application/json'
    'Authorization'='Bearer ' + $token.AccessToken
}
Run the following script to create the webhook using the REST API.# Invoke the REST API
# Store URL in variable; reveal variable
$response = Invoke-RestMethod -Uri $restURI -Method Put -Headers $authHeader -Body $body
$webhookURI = $response.properties.uri
$webhookURIThe output is a URL that looks similar to:https://ad7f1818-7ea9-4567-b43a.webhook.wus.azure-automation.net/webhooks?token=uTi69VZ4RCa42zfKHCeHmJa2W9fd
Run the following script to create the webhook using the REST API.
# Invoke the REST API
# Store URL in variable; reveal variable
$response = Invoke-RestMethod -Uri $restURI -Method Put -Headers $authHeader -Body $body
$webhookURI = $response.properties.uri
$webhookURI
# Invoke the REST API
# Store URL in variable; reveal variable
$response = Invoke-RestMethod -Uri $restURI -Method Put -Headers $authHeader -Body $body
$webhookURI = $response.properties.uri
$webhookURI
The output is a URL that looks similar to:https://ad7f1818-7ea9-4567-b43a.webhook.wus.azure-automation.net/webhooks?token=uTi69VZ4RCa42zfKHCeHmJa2W9fd
https://ad7f1818-7ea9-4567-b43a.webhook.wus.azure-automation.net/webhooks?token=uTi69VZ4RCa42zfKHCeHmJa2W9fd
You can also useWebhook - Getto retrieve the webhook identified by its name. You can run the following PowerShell commands:$response = Invoke-RestMethod -Uri $restURI -Method GET -Headers $authHeader
$response | ConvertTo-Json
You can also useWebhook - Getto retrieve the webhook identified by its name. You can run the following PowerShell commands:
$response = Invoke-RestMethod -Uri $restURI -Method GET -Headers $authHeader
$response | ConvertTo-Json
$response = Invoke-RestMethod -Uri $restURI -Method GET -Headers $authHeader
$response | ConvertTo-Json
Use a webhook
This example uses the PowerShell cmdletInvoke-WebRequestto send the POST request to your new webhook.
Prepare values to pass to the runbook as the body for the webhook call. For relatively simple values, you could script the values as follows:$Names  = @(
            @{ Name="Hawaii"},
            @{ Name="Seattle"},
            @{ Name="Florida"}
        )

$body = ConvertTo-Json -InputObject $Names
Prepare values to pass to the runbook as the body for the webhook call. For relatively simple values, you could script the values as follows:
$Names  = @(
            @{ Name="Hawaii"},
            @{ Name="Seattle"},
            @{ Name="Florida"}
        )

$body = ConvertTo-Json -InputObject $Names
$Names  = @(
            @{ Name="Hawaii"},
            @{ Name="Seattle"},
            @{ Name="Florida"}
        )

$body = ConvertTo-Json -InputObject $Names
For larger sets, you may wish to use a file. Create a file namednames.jsonand then paste the following code:[
    { "Name": "Hawaii" },
    { "Name": "Florida" },
    { "Name": "Seattle" }
]Change the value for the variable$filewith the actual path to the json file before running the following PowerShell commands.# Revise file path with actual path
$file = "path\names.json"
$bodyFile = Get-Content -Path $file
For larger sets, you may wish to use a file. Create a file namednames.jsonand then paste the following code:
names.json
[
    { "Name": "Hawaii" },
    { "Name": "Florida" },
    { "Name": "Seattle" }
]
[
    { "Name": "Hawaii" },
    { "Name": "Florida" },
    { "Name": "Seattle" }
]
Change the value for the variable$filewith the actual path to the json file before running the following PowerShell commands.
$file
# Revise file path with actual path
$file = "path\names.json"
$bodyFile = Get-Content -Path $file
# Revise file path with actual path
$file = "path\names.json"
$bodyFile = Get-Content -Path $file
Run the following PowerShell commands to call the webhook using the REST API.$response = Invoke-WebRequest -Method Post -Uri $webhookURI -Body $body -UseBasicParsing
$response

$responseFile = Invoke-WebRequest -Method Post -Uri $webhookURI -Body $bodyFile -UseBasicParsing
$responseFileFor illustrative purposes, two calls were made for the two different methods of producing the body. For production, use only one method.  The output should look similar as follows (only one output is shown):The client receives one of the following return codes from thePOSTrequest.CodeTextDescription202AcceptedThe request was accepted, and the runbook was successfully queued.400Bad RequestThe request wasn't accepted for one of the following reasons:The webhook has expired.The webhook is disabled.The token in the URL is invalid.404Not FoundThe request wasn't accepted for one of the following reasons:The webhook wasn't found.The runbook wasn't found.The account wasn't found.500Internal Server ErrorThe URL was valid, but an error occurred. Resubmit the request.Assuming the request is successful, the webhook response contains the job ID in JSON format as shown below. It contains a single job ID, but the JSON format allows for potential future enhancements.{"JobIds":["<JobId>"]}
Run the following PowerShell commands to call the webhook using the REST API.
$response = Invoke-WebRequest -Method Post -Uri $webhookURI -Body $body -UseBasicParsing
$response

$responseFile = Invoke-WebRequest -Method Post -Uri $webhookURI -Body $bodyFile -UseBasicParsing
$responseFile
$response = Invoke-WebRequest -Method Post -Uri $webhookURI -Body $body -UseBasicParsing
$response

$responseFile = Invoke-WebRequest -Method Post -Uri $webhookURI -Body $bodyFile -UseBasicParsing
$responseFile
For illustrative purposes, two calls were made for the two different methods of producing the body. For production, use only one method.  The output should look similar as follows (only one output is shown):

The client receives one of the following return codes from thePOSTrequest.
POST
The webhook has expired.
The webhook is disabled.
The token in the URL is invalid.
The webhook wasn't found.
The runbook wasn't found.
The account wasn't found.
Assuming the request is successful, the webhook response contains the job ID in JSON format as shown below. It contains a single job ID, but the JSON format allows for potential future enhancements.
{"JobIds":["<JobId>"]}
{"JobIds":["<JobId>"]}
The PowerShell cmdletGet-AzAutomationJobOutputwill be used to get the output. TheAzure Automation APIcould also be used.#isolate job ID
$jobid = (ConvertFrom-Json ($response.Content)).jobids[0]

# Get output
Get-AzAutomationJobOutput `
    -AutomationAccountName $automationAccount `
    -Id $jobid `
    -ResourceGroupName $resourceGroup `
    -Stream OutputWhen you trigger a runbook created in the previous step, it will create a job and the output should look similar to the following:
The PowerShell cmdletGet-AzAutomationJobOutputwill be used to get the output. TheAzure Automation APIcould also be used.
#isolate job ID
$jobid = (ConvertFrom-Json ($response.Content)).jobids[0]

# Get output
Get-AzAutomationJobOutput `
    -AutomationAccountName $automationAccount `
    -Id $jobid `
    -ResourceGroupName $resourceGroup `
    -Stream Output
#isolate job ID
$jobid = (ConvertFrom-Json ($response.Content)).jobids[0]

# Get output
Get-AzAutomationJobOutput `
    -AutomationAccountName $automationAccount `
    -Id $jobid `
    -ResourceGroupName $resourceGroup `
    -Stream Output
When you trigger a runbook created in the previous step, it will create a job and the output should look similar to the following:

Update a webhook
When a webhook is created, it has a validity time period of 10 years, after which it automatically expires. Once a webhook has expired, you can't reactivate it. You can only remove and then recreate it. You can extend a webhook that hasn't reached its expiration time. To extend a webhook, perform the following steps.
Navigate to the runbook that contains the webhook.
UnderResources, selectWebhooks, and then the webhook that you want to extend.
From theWebhookpage, choose a new expiration date and time and then selectSave.
Review the API callWebhook - Updateand PowerShell cmdletSet-AzAutomationWebhookfor other possible modifications.
Clean up resources
Here are examples of removing a webhook from an Automation runbook.
Using PowerShell, theRemove-AzAutomationWebhookcmdlet can be used as shown below. No output is returned.Remove-AzAutomationWebhook `
    -ResourceGroup $resourceGroup `
    -AutomationAccountName $automationAccount `
    -Name $psWebhook
Using PowerShell, theRemove-AzAutomationWebhookcmdlet can be used as shown below. No output is returned.
Remove-AzAutomationWebhook `
    -ResourceGroup $resourceGroup `
    -AutomationAccountName $automationAccount `
    -Name $psWebhook
Remove-AzAutomationWebhook `
    -ResourceGroup $resourceGroup `
    -AutomationAccountName $automationAccount `
    -Name $psWebhook
Using REST, the RESTWebhook - DeleteAPI can be used as shown below.Invoke-WebRequest -Method Delete -Uri $restURI -Headers $authHeaderAn output ofStatusCode        : 200means a successful deletion.
Using REST, the RESTWebhook - DeleteAPI can be used as shown below.
Invoke-WebRequest -Method Delete -Uri $restURI -Headers $authHeader
Invoke-WebRequest -Method Delete -Uri $restURI -Headers $authHeader
An output ofStatusCode        : 200means a successful deletion.
StatusCode        : 200
Create runbook and webhook with ARM template
Automation webhooks can also be created usingAzure Resource Managertemplates. This sample template creates an Automation account, four runbooks, and a webhook for the named runbook.
Create a file namedwebhook_deploy.jsonand then paste the following code:{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "automationAccountName": {
            "type": "String",
            "metadata": {
                "description": "Automation account name"
            }
        },
        "webhookName": {
            "type": "String",
            "metadata": {
                "description": "Webhook Name"
            }
        },
        "runbookName": {
            "type": "String",
            "metadata": {
                "description": "Runbook Name for which webhook will be created"
            }
        },
        "WebhookExpiryTime": {
            "type": "String",
            "metadata": {
                "description": "Webhook Expiry time"
            }
        },
        "_artifactsLocation": {
            "defaultValue": "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/quickstarts/microsoft.automation/101-automation/",
            "type": "String",
            "metadata": {
                "description": "URI to artifacts location"
            }
        }
    },
    "resources": [
        {
            "type": "Microsoft.Automation/automationAccounts",
            "apiVersion": "2020-01-13-preview",
            "name": "[parameters('automationAccountName')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "sku": {
                    "name": "Free"
                }
            },
            "resources": [
                {
                    "type": "runbooks",
                    "apiVersion": "2018-06-30",
                    "name": "[parameters('runbookName')]",
                    "location": "[resourceGroup().location]",
                    "dependsOn": [
                        "[parameters('automationAccountName')]"
                    ],
                    "properties": {
                        "runbookType": "Python2",
                        "logProgress": "false",
                        "logVerbose": "false",
                        "description": "Sample Runbook",
                        "publishContentLink": {
                            "uri": "[uri(parameters('_artifactsLocation'), 'scripts/AzureAutomationTutorialPython2.py')]",
                            "version": "1.0.0.0"
                        }
                    }
                },
                {
                    "type": "webhooks",
                    "apiVersion": "2018-06-30",
                    "name": "[parameters('webhookName')]",
                    "dependsOn": [
                        "[parameters('automationAccountName')]",
                        "[parameters('runbookName')]"
                    ],
                    "properties": {
                        "isEnabled": true,
                        "expiryTime": "[parameters('WebhookExpiryTime')]",
                        "runbook": {
                            "name": "[parameters('runbookName')]"
                        }
                    }
                }
            ]
        }
    ],
    "outputs": {
        "webhookUri": {
            "type": "String",
            "value": "[reference(parameters('webhookName')).uri]"
        }
    }
}
Create a file namedwebhook_deploy.jsonand then paste the following code:
webhook_deploy.json
{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "automationAccountName": {
            "type": "String",
            "metadata": {
                "description": "Automation account name"
            }
        },
        "webhookName": {
            "type": "String",
            "metadata": {
                "description": "Webhook Name"
            }
        },
        "runbookName": {
            "type": "String",
            "metadata": {
                "description": "Runbook Name for which webhook will be created"
            }
        },
        "WebhookExpiryTime": {
            "type": "String",
            "metadata": {
                "description": "Webhook Expiry time"
            }
        },
        "_artifactsLocation": {
            "defaultValue": "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/quickstarts/microsoft.automation/101-automation/",
            "type": "String",
            "metadata": {
                "description": "URI to artifacts location"
            }
        }
    },
    "resources": [
        {
            "type": "Microsoft.Automation/automationAccounts",
            "apiVersion": "2020-01-13-preview",
            "name": "[parameters('automationAccountName')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "sku": {
                    "name": "Free"
                }
            },
            "resources": [
                {
                    "type": "runbooks",
                    "apiVersion": "2018-06-30",
                    "name": "[parameters('runbookName')]",
                    "location": "[resourceGroup().location]",
                    "dependsOn": [
                        "[parameters('automationAccountName')]"
                    ],
                    "properties": {
                        "runbookType": "Python2",
                        "logProgress": "false",
                        "logVerbose": "false",
                        "description": "Sample Runbook",
                        "publishContentLink": {
                            "uri": "[uri(parameters('_artifactsLocation'), 'scripts/AzureAutomationTutorialPython2.py')]",
                            "version": "1.0.0.0"
                        }
                    }
                },
                {
                    "type": "webhooks",
                    "apiVersion": "2018-06-30",
                    "name": "[parameters('webhookName')]",
                    "dependsOn": [
                        "[parameters('automationAccountName')]",
                        "[parameters('runbookName')]"
                    ],
                    "properties": {
                        "isEnabled": true,
                        "expiryTime": "[parameters('WebhookExpiryTime')]",
                        "runbook": {
                            "name": "[parameters('runbookName')]"
                        }
                    }
                }
            ]
        }
    ],
    "outputs": {
        "webhookUri": {
            "type": "String",
            "value": "[reference(parameters('webhookName')).uri]"
        }
    }
}
{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "automationAccountName": {
            "type": "String",
            "metadata": {
                "description": "Automation account name"
            }
        },
        "webhookName": {
            "type": "String",
            "metadata": {
                "description": "Webhook Name"
            }
        },
        "runbookName": {
            "type": "String",
            "metadata": {
                "description": "Runbook Name for which webhook will be created"
            }
        },
        "WebhookExpiryTime": {
            "type": "String",
            "metadata": {
                "description": "Webhook Expiry time"
            }
        },
        "_artifactsLocation": {
            "defaultValue": "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/quickstarts/microsoft.automation/101-automation/",
            "type": "String",
            "metadata": {
                "description": "URI to artifacts location"
            }
        }
    },
    "resources": [
        {
            "type": "Microsoft.Automation/automationAccounts",
            "apiVersion": "2020-01-13-preview",
            "name": "[parameters('automationAccountName')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "sku": {
                    "name": "Free"
                }
            },
            "resources": [
                {
                    "type": "runbooks",
                    "apiVersion": "2018-06-30",
                    "name": "[parameters('runbookName')]",
                    "location": "[resourceGroup().location]",
                    "dependsOn": [
                        "[parameters('automationAccountName')]"
                    ],
                    "properties": {
                        "runbookType": "Python2",
                        "logProgress": "false",
                        "logVerbose": "false",
                        "description": "Sample Runbook",
                        "publishContentLink": {
                            "uri": "[uri(parameters('_artifactsLocation'), 'scripts/AzureAutomationTutorialPython2.py')]",
                            "version": "1.0.0.0"
                        }
                    }
                },
                {
                    "type": "webhooks",
                    "apiVersion": "2018-06-30",
                    "name": "[parameters('webhookName')]",
                    "dependsOn": [
                        "[parameters('automationAccountName')]",
                        "[parameters('runbookName')]"
                    ],
                    "properties": {
                        "isEnabled": true,
                        "expiryTime": "[parameters('WebhookExpiryTime')]",
                        "runbook": {
                            "name": "[parameters('runbookName')]"
                        }
                    }
                }
            ]
        }
    ],
    "outputs": {
        "webhookUri": {
            "type": "String",
            "value": "[reference(parameters('webhookName')).uri]"
        }
    }
}
The following PowerShell code sample deploys the template from your machine. Provide an appropriate value for the variables and then execute the script.$resourceGroup = "resourceGroup"
$templateFile = "path\webhook_deploy.json"
$armAutomationAccount = "automationAccount"
$armRunbook = "ARMrunbookName"
$armWebhook = "webhookName"
$webhookExpiryTime = "12-31-2022"

New-AzResourceGroupDeployment `
    -Name "testDeployment" `
    -ResourceGroupName $resourceGroup `
    -TemplateFile $templateFile `
    -automationAccountName $armAutomationAccount `
    -runbookName $armRunbook `
    -webhookName $armWebhook `
    -WebhookExpiryTime $webhookExpiryTimeNoteFor security reasons, the URI is only returned the first time a template is deployed.
The following PowerShell code sample deploys the template from your machine. Provide an appropriate value for the variables and then execute the script.
$resourceGroup = "resourceGroup"
$templateFile = "path\webhook_deploy.json"
$armAutomationAccount = "automationAccount"
$armRunbook = "ARMrunbookName"
$armWebhook = "webhookName"
$webhookExpiryTime = "12-31-2022"

New-AzResourceGroupDeployment `
    -Name "testDeployment" `
    -ResourceGroupName $resourceGroup `
    -TemplateFile $templateFile `
    -automationAccountName $armAutomationAccount `
    -runbookName $armRunbook `
    -webhookName $armWebhook `
    -WebhookExpiryTime $webhookExpiryTime
$resourceGroup = "resourceGroup"
$templateFile = "path\webhook_deploy.json"
$armAutomationAccount = "automationAccount"
$armRunbook = "ARMrunbookName"
$armWebhook = "webhookName"
$webhookExpiryTime = "12-31-2022"

New-AzResourceGroupDeployment `
    -Name "testDeployment" `
    -ResourceGroupName $resourceGroup `
    -TemplateFile $templateFile `
    -automationAccountName $armAutomationAccount `
    -runbookName $armRunbook `
    -webhookName $armWebhook `
    -WebhookExpiryTime $webhookExpiryTime
Note
For security reasons, the URI is only returned the first time a template is deployed.
Next steps
To trigger a runbook from an alert, seeUse an alert to trigger an Azure Automation runbook.
Feedback
Was this page helpful?
Additional resources