Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Use GPUs for compute-intensive workloads on Azure Kubernetes Service (AKS)
Article
2025-04-25
38 contributors
In this article
Graphical processing units (GPUs) are often used for compute-intensive workloads, such as graphics and visualization workloads. AKS supports GPU-enabled Linux node pools to run compute-intensive Kubernetes workloads.
This article helps you provision nodes with schedulable GPUs on new and existing AKS clusters.
Supported GPU-enabled VMs
To view supported GPU-enabled VMs, seeGPU-optimized VM sizes in Azure. For AKS node pools, we recommend a minimum size ofStandard_NC6s_v3. The NVv4 series (based on AMD GPUs) aren't supported on AKS.
Note
GPU-enabled VMs contain specialized hardware subject to higher pricing and region availability. For more information, see thepricingtool andregion availability.
Limitations
If you're using an Azure Linux GPU-enabled node pool, automatic security patches aren't applied. Refer to your current AKS API version for the default behavior of node OS upgrade channel.
Note
For AKS API version 2023-06-01 or later, the default channel for node OS upgrade isNodeImage. For previous versions, the default channel isNone. To learn more, seeauto-upgrade.
Updating an existing node pool to add GPU VM size is not supported on AKS.
Note
The AKS GPU image (preview) is retired starting on January 10, 2025. The custom header is no longer available, meaning that you can't create new GPU-enabled node pools using the AKS GPU image. We recommend migrating to or using the default GPU configuration rather than the GPU image, as the GPU image is no longer supported. For more information, seeAKS release notes, or view this retirement announcement in ourAKS public roadmap.
Before you begin
This article assumes you have an existing AKS cluster. If you don't have a cluster, create one using theAzure CLI,Azure PowerShell, or theAzure portal.
You need the Azure CLI version 2.0.64 or later installed and configured. Runaz --versionto find the version. If you need to install or upgrade, seeInstall Azure CLI.
az --version
Get the credentials for your cluster
Get the credentials for your AKS cluster using theaz aks get-credentialscommand. The following example command gets the credentials for themyAKSClusterin themyResourceGroupresource group:
az aks get-credentials
az aks get-credentials --resource-group myResourceGroup --name myAKSCluster
az aks get-credentials --resource-group myResourceGroup --name myAKSCluster
Options for using NVIDIA GPUs
Using NVIDIA GPUs involves the installation of various NVIDIA software components such as theNVIDIA device plugin for Kubernetes, GPU driver installation, and more.
Note
By default, Microsoft automatically maintains the version of the NVIDIA drivers as part of the node image deployment, and AKSsupports and managesit. While the NVIDIA drivers are installed by default on GPU capable nodes, you need to install the device plugin.
NVIDIA device plugin installation
NVIDIA device plugin installation is required when using GPUs on AKS. In some cases, the installation is handled automatically, such as when using theNVIDIA GPU Operator. Alternatively, you can manually install the NVIDIA device plugin.
You can deploy a DaemonSet for the NVIDIA device plugin, which runs a pod on each node to provide the required drivers for the GPUs. This is the recommended approach when using GPU-enabled node pools for Azure Linux.
Ubuntu Linux node pool (default SKU)
Azure Linux node pool
To use the default OS SKU, you create the node pool without specifying an OS SKU. The node pool is configured for the default operating system based on the Kubernetes version of the cluster.
Add a node pool to your cluster using theaz aks nodepool addcommand.az aks nodepool add \
    --resource-group myResourceGroup \
    --cluster-name myAKSCluster \
    --name gpunp \
    --node-count 1 \
    --node-vm-size Standard_NC6s_v3 \
    --node-taints sku=gpu:NoSchedule \
    --enable-cluster-autoscaler \
    --min-count 1 \
    --max-count 3This command adds a node pool namedgpunptomyAKSClusterinmyResourceGroupand uses parameters to configure the following node pool settings:--node-vm-size: Sets the VM size for the node in the node pool toStandard_NC6s_v3.--node-taints: Specifies asku=gpu:NoScheduletaint on the node pool.--enable-cluster-autoscaler: Enables the cluster autoscaler.--min-count: Configures the cluster autoscaler to maintain a minimum of one node in the node pool.--max-count: Configures the cluster autoscaler to maintain a maximum of three nodes in the node pool.NoteTaints and VM sizes can only be set for node pools during node pool creation, but you can update autoscaler settings at any time.
Add a node pool to your cluster using theaz aks nodepool addcommand.
az aks nodepool add
az aks nodepool add \
    --resource-group myResourceGroup \
    --cluster-name myAKSCluster \
    --name gpunp \
    --node-count 1 \
    --node-vm-size Standard_NC6s_v3 \
    --node-taints sku=gpu:NoSchedule \
    --enable-cluster-autoscaler \
    --min-count 1 \
    --max-count 3
az aks nodepool add \
    --resource-group myResourceGroup \
    --cluster-name myAKSCluster \
    --name gpunp \
    --node-count 1 \
    --node-vm-size Standard_NC6s_v3 \
    --node-taints sku=gpu:NoSchedule \
    --enable-cluster-autoscaler \
    --min-count 1 \
    --max-count 3
This command adds a node pool namedgpunptomyAKSClusterinmyResourceGroupand uses parameters to configure the following node pool settings:
--node-vm-size: Sets the VM size for the node in the node pool toStandard_NC6s_v3.
--node-vm-size
--node-taints: Specifies asku=gpu:NoScheduletaint on the node pool.
--node-taints
--enable-cluster-autoscaler: Enables the cluster autoscaler.
--enable-cluster-autoscaler
--min-count: Configures the cluster autoscaler to maintain a minimum of one node in the node pool.
--min-count
--max-count: Configures the cluster autoscaler to maintain a maximum of three nodes in the node pool.
--max-count
Note
Taints and VM sizes can only be set for node pools during node pool creation, but you can update autoscaler settings at any time.
To use Azure Linux, you specify the OS SKU by settingos-skutoAzureLinuxduring node pool creation. Theos-typeis set toLinuxby default.
os-sku
AzureLinux
os-type
Linux
Add a node pool to your cluster using theaz aks nodepool addcommand with the--os-skuflag set toAzureLinux.az aks nodepool add \
    --resource-group myResourceGroup \
    --cluster-name myAKSCluster \
    --name gpunp \
    --node-count 1 \
    --os-sku AzureLinux \
    --node-vm-size Standard_NC6s_v3 \
    --node-taints sku=gpu:NoSchedule \
    --enable-cluster-autoscaler \
    --min-count 1 \
    --max-count 3This command adds a node pool namedgpunptomyAKSClusterinmyResourceGroupand uses parameters to configure the following node pool settings:--node-vm-size: Sets the VM size for the node in the node pool toStandard_NC6s_v3.--node-taints: Specifies asku=gpu:NoScheduletaint on the node pool.--enable-cluster-autoscaler: Enables the cluster autoscaler.--min-count: Configures the cluster autoscaler to maintain a minimum of one node in the node pool.--max-count: Configures the cluster autoscaler to maintain a maximum of three nodes in the node pool.NoteTaints and VM sizes can only be set for node pools during node pool creation, but you can update autoscaler settings at any time. Certain SKUs, including A100 and H100 VM SKUs, aren't available for Azure Linux. For more information, seeGPU-optimized VM sizes in Azure.
Add a node pool to your cluster using theaz aks nodepool addcommand with the--os-skuflag set toAzureLinux.
az aks nodepool add
--os-sku
AzureLinux
az aks nodepool add \
    --resource-group myResourceGroup \
    --cluster-name myAKSCluster \
    --name gpunp \
    --node-count 1 \
    --os-sku AzureLinux \
    --node-vm-size Standard_NC6s_v3 \
    --node-taints sku=gpu:NoSchedule \
    --enable-cluster-autoscaler \
    --min-count 1 \
    --max-count 3
az aks nodepool add \
    --resource-group myResourceGroup \
    --cluster-name myAKSCluster \
    --name gpunp \
    --node-count 1 \
    --os-sku AzureLinux \
    --node-vm-size Standard_NC6s_v3 \
    --node-taints sku=gpu:NoSchedule \
    --enable-cluster-autoscaler \
    --min-count 1 \
    --max-count 3
This command adds a node pool namedgpunptomyAKSClusterinmyResourceGroupand uses parameters to configure the following node pool settings:
--node-vm-size: Sets the VM size for the node in the node pool toStandard_NC6s_v3.
--node-vm-size
--node-taints: Specifies asku=gpu:NoScheduletaint on the node pool.
--node-taints
--enable-cluster-autoscaler: Enables the cluster autoscaler.
--enable-cluster-autoscaler
--min-count: Configures the cluster autoscaler to maintain a minimum of one node in the node pool.
--min-count
--max-count: Configures the cluster autoscaler to maintain a maximum of three nodes in the node pool.
--max-count
Note
Taints and VM sizes can only be set for node pools during node pool creation, but you can update autoscaler settings at any time. Certain SKUs, including A100 and H100 VM SKUs, aren't available for Azure Linux. For more information, seeGPU-optimized VM sizes in Azure.
Create a namespace using thekubectl create namespacecommand.kubectl create namespace gpu-resources
Create a namespace using thekubectl create namespacecommand.
kubectl create namespace
kubectl create namespace gpu-resources
kubectl create namespace gpu-resources
Create a file namednvidia-device-plugin-ds.yamland paste the following YAML manifest provided as part of theNVIDIA device plugin for Kubernetes project:apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: nvidia-device-plugin-daemonset
  namespace: gpu-resources
spec:
  selector:
    matchLabels:
      name: nvidia-device-plugin-ds
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        name: nvidia-device-plugin-ds
    spec:
      tolerations:
      - key: "sku"
        operator: "Equal"
        value: "gpu"
        effect: "NoSchedule"
      # Mark this pod as a critical add-on; when enabled, the critical add-on
      # scheduler reserves resources for critical add-on pods so that they can
      # be rescheduled after a failure.
      # See https://kubernetes.io/docs/tasks/administer-cluster/guaranteed-scheduling-critical-addon-pods/
      priorityClassName: "system-node-critical"
      containers:
      - image: nvcr.io/nvidia/k8s-device-plugin:v0.17.0
        name: nvidia-device-plugin-ctr
        env:
          - name: FAIL_ON_INIT_ERROR
            value: "false"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop: ["ALL"]
        volumeMounts:
        - name: device-plugin
          mountPath: /var/lib/kubelet/device-plugins
      volumes:
      - name: device-plugin
        hostPath:
          path: /var/lib/kubelet/device-plugins
Create a file namednvidia-device-plugin-ds.yamland paste the following YAML manifest provided as part of theNVIDIA device plugin for Kubernetes project:
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: nvidia-device-plugin-daemonset
  namespace: gpu-resources
spec:
  selector:
    matchLabels:
      name: nvidia-device-plugin-ds
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        name: nvidia-device-plugin-ds
    spec:
      tolerations:
      - key: "sku"
        operator: "Equal"
        value: "gpu"
        effect: "NoSchedule"
      # Mark this pod as a critical add-on; when enabled, the critical add-on
      # scheduler reserves resources for critical add-on pods so that they can
      # be rescheduled after a failure.
      # See https://kubernetes.io/docs/tasks/administer-cluster/guaranteed-scheduling-critical-addon-pods/
      priorityClassName: "system-node-critical"
      containers:
      - image: nvcr.io/nvidia/k8s-device-plugin:v0.17.0
        name: nvidia-device-plugin-ctr
        env:
          - name: FAIL_ON_INIT_ERROR
            value: "false"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop: ["ALL"]
        volumeMounts:
        - name: device-plugin
          mountPath: /var/lib/kubelet/device-plugins
      volumes:
      - name: device-plugin
        hostPath:
          path: /var/lib/kubelet/device-plugins
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: nvidia-device-plugin-daemonset
  namespace: gpu-resources
spec:
  selector:
    matchLabels:
      name: nvidia-device-plugin-ds
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        name: nvidia-device-plugin-ds
    spec:
      tolerations:
      - key: "sku"
        operator: "Equal"
        value: "gpu"
        effect: "NoSchedule"
      # Mark this pod as a critical add-on; when enabled, the critical add-on
      # scheduler reserves resources for critical add-on pods so that they can
      # be rescheduled after a failure.
      # See https://kubernetes.io/docs/tasks/administer-cluster/guaranteed-scheduling-critical-addon-pods/
      priorityClassName: "system-node-critical"
      containers:
      - image: nvcr.io/nvidia/k8s-device-plugin:v0.17.0
        name: nvidia-device-plugin-ctr
        env:
          - name: FAIL_ON_INIT_ERROR
            value: "false"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop: ["ALL"]
        volumeMounts:
        - name: device-plugin
          mountPath: /var/lib/kubelet/device-plugins
      volumes:
      - name: device-plugin
        hostPath:
          path: /var/lib/kubelet/device-plugins
Create the DaemonSet and confirm the NVIDIA device plugin is created successfully using thekubectl applycommand.kubectl apply -f nvidia-device-plugin-ds.yaml
Create the DaemonSet and confirm the NVIDIA device plugin is created successfully using thekubectl applycommand.
kubectl apply
kubectl apply -f nvidia-device-plugin-ds.yaml
kubectl apply -f nvidia-device-plugin-ds.yaml
Now that you successfully installed the NVIDIA device plugin, you can check that yourGPUs are schedulableandrun a GPU workload.
Now that you successfully installed the NVIDIA device plugin, you can check that yourGPUs are schedulableandrun a GPU workload.
Skip GPU driver installation (preview)
If you want to control the installation of the NVIDIA drivers or use theNVIDIA GPU Operator, you can skip the default GPU driver installation. Microsoftdoesn't support or managethe maintenance and compatibility of the NVIDIA drivers as part of the node image deployment.
Important
AKS preview features are available on a self-service, opt-in basis. Previews are provided "as is" and "as available," and they're excluded from the service-level agreements and limited warranty. AKS previews are partially covered by customer support on a best-effort basis. As such, these features aren't meant for production use. For more information, see the following support articles:
AKS support policies
Azure support FAQ
Register or update the aks-preview extension using theaz extension addoraz extension updatecommand.# Register the aks-preview extension
az extension add --name aks-preview

# Update the aks-preview extension
az extension update --name aks-preview
Register or update the aks-preview extension using theaz extension addoraz extension updatecommand.
az extension add
az extension update
# Register the aks-preview extension
az extension add --name aks-preview

# Update the aks-preview extension
az extension update --name aks-preview
# Register the aks-preview extension
az extension add --name aks-preview

# Update the aks-preview extension
az extension update --name aks-preview
Create a node pool using theaz aks nodepool addcommand with the--skip-gpu-driver-installflag to skip automatic GPU driver installation.az aks nodepool add \
    --resource-group myResourceGroup \
    --cluster-name myAKSCluster \
    --name gpunp \
    --node-count 1 \
    --skip-gpu-driver-install \
    --node-vm-size Standard_NC6s_v3 \
    --enable-cluster-autoscaler \
    --min-count 1 \
    --max-count 3Adding the--skip-gpu-driver-installflag during node pool creation skips the automatic GPU driver installation. Any existing nodes aren't changed. You can scale the node pool to zero and then back up to make the change take effect.
Create a node pool using theaz aks nodepool addcommand with the--skip-gpu-driver-installflag to skip automatic GPU driver installation.
az aks nodepool add
--skip-gpu-driver-install
az aks nodepool add \
    --resource-group myResourceGroup \
    --cluster-name myAKSCluster \
    --name gpunp \
    --node-count 1 \
    --skip-gpu-driver-install \
    --node-vm-size Standard_NC6s_v3 \
    --enable-cluster-autoscaler \
    --min-count 1 \
    --max-count 3
az aks nodepool add \
    --resource-group myResourceGroup \
    --cluster-name myAKSCluster \
    --name gpunp \
    --node-count 1 \
    --skip-gpu-driver-install \
    --node-vm-size Standard_NC6s_v3 \
    --enable-cluster-autoscaler \
    --min-count 1 \
    --max-count 3
Adding the--skip-gpu-driver-installflag during node pool creation skips the automatic GPU driver installation. Any existing nodes aren't changed. You can scale the node pool to zero and then back up to make the change take effect.
--skip-gpu-driver-install
You can optionally install the NVIDIA GPU Operator followingthese steps.
You can optionally install the NVIDIA GPU Operator followingthese steps.
Confirm that GPUs are schedulable
After creating your cluster, confirm that GPUs are schedulable in Kubernetes.
List the nodes in your cluster using thekubectl get nodescommand.kubectl get nodesYour output should look similar to the following example output:NAME                   STATUS   ROLES   AGE   VERSION
aks-gpunp-28993262-0   Ready    agent   13m   v1.20.7
List the nodes in your cluster using thekubectl get nodescommand.
kubectl get nodes
kubectl get nodes
kubectl get nodes
Your output should look similar to the following example output:
NAME                   STATUS   ROLES   AGE   VERSION
aks-gpunp-28993262-0   Ready    agent   13m   v1.20.7
NAME                   STATUS   ROLES   AGE   VERSION
aks-gpunp-28993262-0   Ready    agent   13m   v1.20.7
Confirm the GPUs are schedulable using thekubectl describe nodecommand.kubectl describe node aks-gpunp-28993262-0Under theCapacitysection, the GPU should list asnvidia.com/gpu:  1. Your output should look similar to the following condensed example output:Name:               aks-gpunp-28993262-0
Roles:              agent
Labels:             accelerator=nvidia

[...]

Capacity:
[...]
 nvidia.com/gpu:                 1
[...]
Confirm the GPUs are schedulable using thekubectl describe nodecommand.
kubectl describe node
kubectl describe node aks-gpunp-28993262-0
kubectl describe node aks-gpunp-28993262-0
Under theCapacitysection, the GPU should list asnvidia.com/gpu:  1. Your output should look similar to the following condensed example output:
nvidia.com/gpu:  1
Name:               aks-gpunp-28993262-0
Roles:              agent
Labels:             accelerator=nvidia

[...]

Capacity:
[...]
 nvidia.com/gpu:                 1
[...]
Name:               aks-gpunp-28993262-0
Roles:              agent
Labels:             accelerator=nvidia

[...]

Capacity:
[...]
 nvidia.com/gpu:                 1
[...]
Run a GPU-enabled workload
To see the GPU in action, you can schedule a GPU-enabled workload with the appropriate resource request. In this example, we'll run aTensorflowjob against theMNIST dataset.
Create a file namedsamples-tf-mnist-demo.yamland paste the following YAML manifest, which includes a resource limit ofnvidia.com/gpu: 1:NoteIf you receive a version mismatch error when calling into drivers, such as "CUDA driver version is insufficient for CUDA runtime version", review theNVIDIA driver matrix compatibility chart.apiVersion: batch/v1
kind: Job
metadata:
  labels:
    app: samples-tf-mnist-demo
  name: samples-tf-mnist-demo
spec:
  template:
    metadata:
      labels:
        app: samples-tf-mnist-demo
    spec:
      containers:
      - name: samples-tf-mnist-demo
        image: mcr.microsoft.com/azuredocs/samples-tf-mnist-demo:gpu
        args: ["--max_steps", "500"]
        imagePullPolicy: IfNotPresent
        resources:
          limits:
           nvidia.com/gpu: 1
      restartPolicy: OnFailure
      tolerations:
      - key: "sku"
        operator: "Equal"
        value: "gpu"
        effect: "NoSchedule"
Create a file namedsamples-tf-mnist-demo.yamland paste the following YAML manifest, which includes a resource limit ofnvidia.com/gpu: 1:
nvidia.com/gpu: 1
Note
If you receive a version mismatch error when calling into drivers, such as "CUDA driver version is insufficient for CUDA runtime version", review theNVIDIA driver matrix compatibility chart.
apiVersion: batch/v1
kind: Job
metadata:
  labels:
    app: samples-tf-mnist-demo
  name: samples-tf-mnist-demo
spec:
  template:
    metadata:
      labels:
        app: samples-tf-mnist-demo
    spec:
      containers:
      - name: samples-tf-mnist-demo
        image: mcr.microsoft.com/azuredocs/samples-tf-mnist-demo:gpu
        args: ["--max_steps", "500"]
        imagePullPolicy: IfNotPresent
        resources:
          limits:
           nvidia.com/gpu: 1
      restartPolicy: OnFailure
      tolerations:
      - key: "sku"
        operator: "Equal"
        value: "gpu"
        effect: "NoSchedule"
apiVersion: batch/v1
kind: Job
metadata:
  labels:
    app: samples-tf-mnist-demo
  name: samples-tf-mnist-demo
spec:
  template:
    metadata:
      labels:
        app: samples-tf-mnist-demo
    spec:
      containers:
      - name: samples-tf-mnist-demo
        image: mcr.microsoft.com/azuredocs/samples-tf-mnist-demo:gpu
        args: ["--max_steps", "500"]
        imagePullPolicy: IfNotPresent
        resources:
          limits:
           nvidia.com/gpu: 1
      restartPolicy: OnFailure
      tolerations:
      - key: "sku"
        operator: "Equal"
        value: "gpu"
        effect: "NoSchedule"
Run the job using thekubectl applycommand, which parses the manifest file and creates the defined Kubernetes objects.kubectl apply -f samples-tf-mnist-demo.yaml
Run the job using thekubectl applycommand, which parses the manifest file and creates the defined Kubernetes objects.
kubectl apply
kubectl apply -f samples-tf-mnist-demo.yaml
kubectl apply -f samples-tf-mnist-demo.yaml
View the status of the GPU-enabled workload
Monitor the progress of the job using thekubectl get jobscommand with the--watchflag. It may take a few minutes to first pull the image and process the dataset.kubectl get jobs samples-tf-mnist-demo --watchWhen theCOMPLETIONScolumn shows1/1, the job has successfully finished, as shown in the following example output:NAME                    COMPLETIONS   DURATION   AGE

samples-tf-mnist-demo   0/1           3m29s      3m29s
samples-tf-mnist-demo   1/1   3m10s   3m36s
Monitor the progress of the job using thekubectl get jobscommand with the--watchflag. It may take a few minutes to first pull the image and process the dataset.
kubectl get jobs
--watch
kubectl get jobs samples-tf-mnist-demo --watch
kubectl get jobs samples-tf-mnist-demo --watch
When theCOMPLETIONScolumn shows1/1, the job has successfully finished, as shown in the following example output:
NAME                    COMPLETIONS   DURATION   AGE

samples-tf-mnist-demo   0/1           3m29s      3m29s
samples-tf-mnist-demo   1/1   3m10s   3m36s
NAME                    COMPLETIONS   DURATION   AGE

samples-tf-mnist-demo   0/1           3m29s      3m29s
samples-tf-mnist-demo   1/1   3m10s   3m36s
Exit thekubectl --watchprocess withCtrl-C.
Exit thekubectl --watchprocess withCtrl-C.
kubectl --watch
Get the name of the pod using thekubectl get podscommand.kubectl get pods --selector app=samples-tf-mnist-demo
Get the name of the pod using thekubectl get podscommand.
kubectl get pods
kubectl get pods --selector app=samples-tf-mnist-demo
kubectl get pods --selector app=samples-tf-mnist-demo
View the output of the GPU-enabled workload using thekubectl logscommand.kubectl logs samples-tf-mnist-demo-smnr6The following condensed example output of the pod logs confirms that the appropriate GPU device,Tesla K80, has been discovered:2019-05-16 16:08:31.258328: I tensorflow/core/platform/cpu_feature_guard.cc:137] Your CPU supports instructions that this TensorFlow binary was not compiled to use: SSE4.1 SSE4.2 AVX AVX2 FMA
2019-05-16 16:08:31.396846: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1030] Found device 0 with properties: 
name: Tesla K80 major: 3 minor: 7 memoryClockRate(GHz): 0.8235
pciBusID: 2fd7:00:00.0
totalMemory: 11.17GiB freeMemory: 11.10GiB
2019-05-16 16:08:31.396886: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1120] Creating TensorFlow device (/device:GPU:0) -> (device: 0, name: Tesla K80, pci bus id: 2fd7:00:00.0, compute capability: 3.7)
2019-05-16 16:08:36.076962: I tensorflow/stream_executor/dso_loader.cc:139] successfully opened CUDA library libcupti.so.8.0 locally
Successfully downloaded train-images-idx3-ubyte.gz 9912422 bytes.
Extracting /tmp/tensorflow/input_data/train-images-idx3-ubyte.gz
Successfully downloaded train-labels-idx1-ubyte.gz 28881 bytes.
Extracting /tmp/tensorflow/input_data/train-labels-idx1-ubyte.gz
Successfully downloaded t10k-images-idx3-ubyte.gz 1648877 bytes.
Extracting /tmp/tensorflow/input_data/t10k-images-idx3-ubyte.gz
Successfully downloaded t10k-labels-idx1-ubyte.gz 4542 bytes.
Extracting /tmp/tensorflow/input_data/t10k-labels-idx1-ubyte.gz
Accuracy at step 0: 0.1081
Accuracy at step 10: 0.7457
Accuracy at step 20: 0.8233
Accuracy at step 30: 0.8644
Accuracy at step 40: 0.8848
Accuracy at step 50: 0.8889
Accuracy at step 60: 0.8898
Accuracy at step 70: 0.8979
Accuracy at step 80: 0.9087
Accuracy at step 90: 0.9099
Adding run metadata for 99
Accuracy at step 100: 0.9125
Accuracy at step 110: 0.9184
Accuracy at step 120: 0.922
Accuracy at step 130: 0.9161
Accuracy at step 140: 0.9219
Accuracy at step 150: 0.9151
Accuracy at step 160: 0.9199
Accuracy at step 170: 0.9305
Accuracy at step 180: 0.9251
Accuracy at step 190: 0.9258
Adding run metadata for 199
[...]
Adding run metadata for 499
View the output of the GPU-enabled workload using thekubectl logscommand.
kubectl logs
kubectl logs samples-tf-mnist-demo-smnr6
kubectl logs samples-tf-mnist-demo-smnr6
The following condensed example output of the pod logs confirms that the appropriate GPU device,Tesla K80, has been discovered:
Tesla K80
2019-05-16 16:08:31.258328: I tensorflow/core/platform/cpu_feature_guard.cc:137] Your CPU supports instructions that this TensorFlow binary was not compiled to use: SSE4.1 SSE4.2 AVX AVX2 FMA
2019-05-16 16:08:31.396846: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1030] Found device 0 with properties: 
name: Tesla K80 major: 3 minor: 7 memoryClockRate(GHz): 0.8235
pciBusID: 2fd7:00:00.0
totalMemory: 11.17GiB freeMemory: 11.10GiB
2019-05-16 16:08:31.396886: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1120] Creating TensorFlow device (/device:GPU:0) -> (device: 0, name: Tesla K80, pci bus id: 2fd7:00:00.0, compute capability: 3.7)
2019-05-16 16:08:36.076962: I tensorflow/stream_executor/dso_loader.cc:139] successfully opened CUDA library libcupti.so.8.0 locally
Successfully downloaded train-images-idx3-ubyte.gz 9912422 bytes.
Extracting /tmp/tensorflow/input_data/train-images-idx3-ubyte.gz
Successfully downloaded train-labels-idx1-ubyte.gz 28881 bytes.
Extracting /tmp/tensorflow/input_data/train-labels-idx1-ubyte.gz
Successfully downloaded t10k-images-idx3-ubyte.gz 1648877 bytes.
Extracting /tmp/tensorflow/input_data/t10k-images-idx3-ubyte.gz
Successfully downloaded t10k-labels-idx1-ubyte.gz 4542 bytes.
Extracting /tmp/tensorflow/input_data/t10k-labels-idx1-ubyte.gz
Accuracy at step 0: 0.1081
Accuracy at step 10: 0.7457
Accuracy at step 20: 0.8233
Accuracy at step 30: 0.8644
Accuracy at step 40: 0.8848
Accuracy at step 50: 0.8889
Accuracy at step 60: 0.8898
Accuracy at step 70: 0.8979
Accuracy at step 80: 0.9087
Accuracy at step 90: 0.9099
Adding run metadata for 99
Accuracy at step 100: 0.9125
Accuracy at step 110: 0.9184
Accuracy at step 120: 0.922
Accuracy at step 130: 0.9161
Accuracy at step 140: 0.9219
Accuracy at step 150: 0.9151
Accuracy at step 160: 0.9199
Accuracy at step 170: 0.9305
Accuracy at step 180: 0.9251
Accuracy at step 190: 0.9258
Adding run metadata for 199
[...]
Adding run metadata for 499
2019-05-16 16:08:31.258328: I tensorflow/core/platform/cpu_feature_guard.cc:137] Your CPU supports instructions that this TensorFlow binary was not compiled to use: SSE4.1 SSE4.2 AVX AVX2 FMA
2019-05-16 16:08:31.396846: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1030] Found device 0 with properties: 
name: Tesla K80 major: 3 minor: 7 memoryClockRate(GHz): 0.8235
pciBusID: 2fd7:00:00.0
totalMemory: 11.17GiB freeMemory: 11.10GiB
2019-05-16 16:08:31.396886: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1120] Creating TensorFlow device (/device:GPU:0) -> (device: 0, name: Tesla K80, pci bus id: 2fd7:00:00.0, compute capability: 3.7)
2019-05-16 16:08:36.076962: I tensorflow/stream_executor/dso_loader.cc:139] successfully opened CUDA library libcupti.so.8.0 locally
Successfully downloaded train-images-idx3-ubyte.gz 9912422 bytes.
Extracting /tmp/tensorflow/input_data/train-images-idx3-ubyte.gz
Successfully downloaded train-labels-idx1-ubyte.gz 28881 bytes.
Extracting /tmp/tensorflow/input_data/train-labels-idx1-ubyte.gz
Successfully downloaded t10k-images-idx3-ubyte.gz 1648877 bytes.
Extracting /tmp/tensorflow/input_data/t10k-images-idx3-ubyte.gz
Successfully downloaded t10k-labels-idx1-ubyte.gz 4542 bytes.
Extracting /tmp/tensorflow/input_data/t10k-labels-idx1-ubyte.gz
Accuracy at step 0: 0.1081
Accuracy at step 10: 0.7457
Accuracy at step 20: 0.8233
Accuracy at step 30: 0.8644
Accuracy at step 40: 0.8848
Accuracy at step 50: 0.8889
Accuracy at step 60: 0.8898
Accuracy at step 70: 0.8979
Accuracy at step 80: 0.9087
Accuracy at step 90: 0.9099
Adding run metadata for 99
Accuracy at step 100: 0.9125
Accuracy at step 110: 0.9184
Accuracy at step 120: 0.922
Accuracy at step 130: 0.9161
Accuracy at step 140: 0.9219
Accuracy at step 150: 0.9151
Accuracy at step 160: 0.9199
Accuracy at step 170: 0.9305
Accuracy at step 180: 0.9251
Accuracy at step 190: 0.9258
Adding run metadata for 199
[...]
Adding run metadata for 499
Clean up resources
Remove the associated Kubernetes objects you created in this article using thekubectl delete jobcommand.kubectl delete jobs samples-tf-mnist-demo
Remove the associated Kubernetes objects you created in this article using thekubectl delete jobcommand.
kubectl delete job
kubectl delete jobs samples-tf-mnist-demo
kubectl delete jobs samples-tf-mnist-demo
Next steps
To run Apache Spark jobs, seeRun Apache Spark jobs on AKS.
For more information on features of the Kubernetes scheduler, seeBest practices for advanced scheduler features in AKS.
For more information on Azure Kubernetes Service and Azure Machine Learning, see:Configure a Kubernetes cluster for ML model training or deployment.Deploy a model with an online endpoint.High-performance serving with Triton Inference Server.Labs for Kubernetes and Kubeflow.
Configure a Kubernetes cluster for ML model training or deployment.
Deploy a model with an online endpoint.
High-performance serving with Triton Inference Server.
Labs for Kubernetes and Kubeflow.
Azure Kubernetes Service

Additional resources