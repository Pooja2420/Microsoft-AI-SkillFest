Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Create a new Git repo
Article
2025-02-18
16 contributors
In this article
Azure DevOps Services | Azure DevOps Server 2022 - Azure DevOps Server 2019
Visual Studio 2019 | Visual Studio 2022
A Git repository, or repo, tracks changes to files within a folder. You can create any number of local Git repos on your computer, each stored in its own folder. Each Git repo that you create is independent of other Git repos, so changes you make in one repo won't affect the others.
A Git repo stores every version of every file in the repo, unless you tell Git to ignore a file. Git saves file versions efficiently, so storing a large number of versions doesn't necessarily require a lot of disk space. Git supports comparing file versions, merging different versions, switching between versions, and much more. You can use Git to manage your source code, regardless of whether your code files are inside or outside of a Visual Studio solution. To share your work, you can connect your local Git repo to a remote Git repo that others can access. The remote repo can be anAzure ReposGit repo, aGitHubrepo, or other hosted Git repo.
This article provides procedures for the following tasks:
Create a local Git repo from a new solution
Create a local Git repo from an existing solution
Create a local Git repo in an empty folder
Connect a local Git repo to anAzure ReposGit repo
Connect a local Git repo to aGitHubrepo
For an overview of the Git workflow, seeAzure Repos Git tutorial.
Prerequisites
Note
In public projects, users withStakeholderaccess have full access to Azure Repos, including viewing, cloning, and contributing to code.
Create a local Git repo from a new solution
Visual Studio doesn't support creating a local Git repo when you create a new solution. Instead, create your Visual Studio solution, then follow the steps inCreate a local Git repo from an existing solution.
Git command line doesn't support creating a new Visual Studio solution. Instead, create your new solution using Visual Studio, then follow the steps inCreate a local Git repo from an existing solution.
Create a local Git repo from an existing solution
Create a local Git repo to track file changes in your existing Visual Studio solution.
Visual Studio 2022
Visual Studio 2019 - Git menu
Visual Studio 2019 - Team Explorer
Git Command Line
Visual Studio 2022 provides a Git version control experience by using theGitmenu,Git Changes, and through context menus inSolution Explorer. Visual Studio 2019 version 16.8 also offers theTeam ExplorerGit user interface. For more information, see theVisual Studio 2019 - Team Explorertab.
InSolution Explorer, right-click the solution name, or right-click any item in theFolderview ofSolution Explorer, and then selectCreate Git Repository. Or, chooseAdd to Source Controlon the status bar in the lower right-hand corner of Visual Studio, and then selectGit. If you don't see these options, then your code is already in a Git repo.Or, chooseGit > Create Git Repositoryfrom the menu bar to launch theCreate a Git repositorywindow. If you don't see this option, then your code is already in a Git repo.
InSolution Explorer, right-click the solution name, or right-click any item in theFolderview ofSolution Explorer, and then selectCreate Git Repository. Or, chooseAdd to Source Controlon the status bar in the lower right-hand corner of Visual Studio, and then selectGit. If you don't see these options, then your code is already in a Git repo.

Or, chooseGit > Create Git Repositoryfrom the menu bar to launch theCreate a Git repositorywindow. If you don't see this option, then your code is already in a Git repo.

In theCreate a Git repositorywindow, chooseLocal only, verify the local path is correct, and then chooseCreate.
In theCreate a Git repositorywindow, chooseLocal only, verify the local path is correct, and then chooseCreate.

You've now created a local Git repo in the Visual Studio solution folder and committed your code into that repo. Your local Git repo contains both your Visual Studio solution and Git resources.

Visual Studio 2019 provides a Git version control experience by using theGitmenu,Git Changes, and through context menus inSolution Explorer.
InSolution Explorer, right-click the solution name, or right-click any item in theFolderview ofSolution Explorer, and then selectCreate Git Repository. Or, chooseAdd to Source Controlon the status bar in the lower right-hand corner of Visual Studio, and then selectGit. If you don't see these options, then your code is already in a Git repo.Or, chooseGit > Create Git Repositoryfrom the menu bar to launch theCreate a Git repositorywindow. If you don't see this option, then your code is already in a Git repo.
InSolution Explorer, right-click the solution name, or right-click any item in theFolderview ofSolution Explorer, and then selectCreate Git Repository. Or, chooseAdd to Source Controlon the status bar in the lower right-hand corner of Visual Studio, and then selectGit. If you don't see these options, then your code is already in a Git repo.

Or, chooseGit > Create Git Repositoryfrom the menu bar to launch theCreate a Git repositorywindow. If you don't see this option, then your code is already in a Git repo.

In theCreate a Git repositorywindow, chooseLocal only, verify the local path is correct, and then chooseCreate.
In theCreate a Git repositorywindow, chooseLocal only, verify the local path is correct, and then chooseCreate.

You've now created a local Git repo in the Visual Studio solution folder and committed your code into that repo. Your local Git repo contains both your Visual Studio solution and Git resources.

Visual Studio 2019 version 16.8 and later versions provides a Git version control experience while maintaining theTeam ExplorerGit user interface. To useTeam Explorer, uncheckTools>Options>Preview Features>New Git user experiencefrom the menu bar. You can use Git features from either interface interchangeably.
Note
One advantage of connecting to a project throughTeam Exploreris you gain access to the Work Items hub. For an overview ofTeam Explorerfeatures, seeNavigate in Visual Studio Team Explorer.
In Team Explorer, underLocal Git Repositories, selectNew. Enter a local path and selectCreate.
Team Explorerdoesn't launch theCreate a Git repositorywindow, and assumes you want a local Git repo.
You've now created a local Git repo in the Visual Studio solution folder and committed your code into that repo. Your local Git repo contains both your Visual Studio solution and Git resources.

If you haven't already,download and install Git. When prompted during the install, enableGit Credential Manager.
If you haven't already,download and install Git. When prompted during the install, enableGit Credential Manager.
At the command prompt, go to the root folder that contains your existing Visual Studio solution and run the following commands. These commands create a local Git repo in the Visual Studio solution folder and commit your code into that repo.> git init
> git add .
> git commit -m "first commit"
> git branch -m main
At the command prompt, go to the root folder that contains your existing Visual Studio solution and run the following commands. These commands create a local Git repo in the Visual Studio solution folder and commit your code into that repo.
> git init
> git add .
> git commit -m "first commit"
> git branch -m main
> git init
> git add .
> git commit -m "first commit"
> git branch -m main
Create a local Git repo in an empty folder
Visual Studio 2022
Visual Studio 2019 - Git menu
Visual Studio 2019 - Team Explorer
Git Command Line
Visual Studio 2022 doesn't support creating a new local repo by usingTeam Explorer. UseGit Command Line.
Use the procedure in theVisual Studio 2019 - Team Exploreror useGit Command Line.
You can create a new local repo in an empty folder fromTeam Explorer.
UnderLocal Git Repositoriesin theConnectview ofTeam Explorer, chooseNew.
UnderLocal Git Repositoriesin theConnectview ofTeam Explorer, chooseNew.

Enter a folder path where the repo will be created. The specified folder must be empty, or not exist. ChooseCreate.
Enter a folder path where the repo will be created. The specified folder must be empty, or not exist. ChooseCreate.

You've now created a new local Git repo. To view the folder contents, right-click the new repo entry and selectOpen in File Explorer.Your new local Git repo only contains Git resources.
You've now created a new local Git repo. To view the folder contents, right-click the new repo entry and selectOpen in File Explorer.

Your new local Git repo only contains Git resources.

If you haven't already,download and install Git. When prompted during the install, enableGit Credential Manager.
If you haven't already,download and install Git. When prompted during the install, enableGit Credential Manager.
At the command prompt, go to the empty folder and run the following command to create a new local Git repo.> git init
At the command prompt, go to the empty folder and run the following command to create a new local Git repo.
> git init
> git init
When you've added files to the folder, add them to the Git repo by running the following commands.> git add .
> git commit -m "first commit"
> git branch -m main
When you've added files to the folder, add them to the Git repo by running the following commands.
> git add .
> git commit -m "first commit"
> git branch -m main
> git add .
> git commit -m "first commit"
> git branch -m main

Connect a local Git repo to an Azure Repos Git repo
You can share your code with others by connecting your local Git repo to anAzure ReposGit repo.
Visual Studio 2022
Visual Studio 2019 - Git menu
Visual Studio 2019 - Team Explorer
Git Command Line
InSolution Explorer, right-click the solution name, or right-click any item in theFolderview ofSolution Explorerand then selectPush to Git serviceto launch theCreate a Git repositorywindow.Or, chooseGit > Push to Git servicefrom the menu bar to launch theCreate a Git repositorywindow.
InSolution Explorer, right-click the solution name, or right-click any item in theFolderview ofSolution Explorerand then selectPush to Git serviceto launch theCreate a Git repositorywindow.

Or, chooseGit > Push to Git servicefrom the menu bar to launch theCreate a Git repositorywindow.

Open a browser and navigate to yourAzure DevOpsproject by using a URL in the form ofhttps://dev.azure.com/<OrganizationName>/<ProjectName>. If you don't have a project yet,create one.
Open a browser and navigate to yourAzure DevOpsproject by using a URL in the form ofhttps://dev.azure.com/<OrganizationName>/<ProjectName>. If you don't have a project yet,create one.
https://dev.azure.com/<OrganizationName>/<ProjectName>
In yourAzure DevOpsproject,createan empty Git repo without a README file. Copy the clone URL from theClone Repositorypopup.
In yourAzure DevOpsproject,createan empty Git repo without a README file. Copy the clone URL from theClone Repositorypopup.

In theCreate a Git repositorywindow, chooseExisting remoteand enter the repo clone URL from the previous step, and then choosePush. For more information on how to create a newAzure DevOpsrepo, seeCreate a new Git repo in your project.
In theCreate a Git repositorywindow, chooseExisting remoteand enter the repo clone URL from the previous step, and then choosePush. For more information on how to create a newAzure DevOpsrepo, seeCreate a new Git repo in your project.

InSolution Explorer, right-click the solution name, or right-click any item in theFolderview ofSolution Explorerand then selectPush to Git serviceto launch theCreate a Git repositorywindow.Or, chooseGit > Push to Git servicefrom the menu bar to launch theCreate a Git repositorywindow.
InSolution Explorer, right-click the solution name, or right-click any item in theFolderview ofSolution Explorerand then selectPush to Git serviceto launch theCreate a Git repositorywindow.

Or, chooseGit > Push to Git servicefrom the menu bar to launch theCreate a Git repositorywindow.

Open a browser and navigate to yourAzure DevOpsproject by using a URL in the form ofhttps://dev.azure.com/<OrganizationName>/<ProjectName>. If you don't have a project yet,create one.
Open a browser and navigate to yourAzure DevOpsproject by using a URL in the form ofhttps://dev.azure.com/<OrganizationName>/<ProjectName>. If you don't have a project yet,create one.
https://dev.azure.com/<OrganizationName>/<ProjectName>
In yourAzure DevOpsproject,createan empty Git repo without a README file. Copy the clone URL from theClone Repositorypopup.
In yourAzure DevOpsproject,createan empty Git repo without a README file. Copy the clone URL from theClone Repositorypopup.

In theCreate a Git repositorywindow, chooseExisting remoteand enter the repo clone URL from the previous step, and then choosePush. For more information on how to create a newAzure DevOpsrepo, seeCreate a new Git repo in your project.
In theCreate a Git repositorywindow, chooseExisting remoteand enter the repo clone URL from the previous step, and then choosePush. For more information on how to create a newAzure DevOpsrepo, seeCreate a new Git repo in your project.

In thePush to Azure Dev Ops Servicessection of theSynchronizationview inTeam Explorer, select thePublish Git Repobutton.
In thePush to Azure Dev Ops Servicessection of theSynchronizationview inTeam Explorer, select thePublish Git Repobutton.

Choose yourAzure DevOpsaccount, organization, and a repo name, and then selectPublish Repository.This step creates a new project in yourAzure DevOpsaccount with the same name that you selected for the repo. To create the repo in an existing project, selectAdvancednext to theRepository name, and then choose a project.Your code is now in aAzure ReposGit repo. You can view your code on the web by selectingSee it on the web.
Choose yourAzure DevOpsaccount, organization, and a repo name, and then selectPublish Repository.

This step creates a new project in yourAzure DevOpsaccount with the same name that you selected for the repo. To create the repo in an existing project, selectAdvancednext to theRepository name, and then choose a project.
Your code is now in aAzure ReposGit repo. You can view your code on the web by selectingSee it on the web.

Note
You can also create anAzure ReposGit repo from the command line by using theAzure CLI.
Open a browser and navigate to yourAzure DevOpsproject using a URL in the form ofhttps://dev.azure.com/<OrganizationName>/<ProjectName>. If you don't have a project yet,create one.
Open a browser and navigate to yourAzure DevOpsproject using a URL in the form ofhttps://dev.azure.com/<OrganizationName>/<ProjectName>. If you don't have a project yet,create one.
https://dev.azure.com/<OrganizationName>/<ProjectName>
In yourAzure DevOpsproject,createan empty Git repo without a README file. Copy the clone URL from theClone Repositorypopup.
In yourAzure DevOpsproject,createan empty Git repo without a README file. Copy the clone URL from theClone Repositorypopup.

To publish your existing local git repository toAzure repos, run the following commands in the folder containing the local git repository using the clone URL from the previous step. If you don't have a local git repository yet, create one using the previous steps in this article.> git remote add origin <clone URL>
> git status
> git push -u origin mainYour code is now published to themainbranch of thenAzure ReposGit repo.
To publish your existing local git repository toAzure repos, run the following commands in the folder containing the local git repository using the clone URL from the previous step. If you don't have a local git repository yet, create one using the previous steps in this article.
> git remote add origin <clone URL>
> git status
> git push -u origin main
> git remote add origin <clone URL>
> git status
> git push -u origin main
Your code is now published to themainbranch of thenAzure ReposGit repo.
main
Note
With Azure DevOps Services, the format for the project URL isdev.azure.com/{your organization}/{your project}. However, the previous format that references thevisualstudio.comformat is still supported. For more information, seeIntroducing Azure DevOps, Switch existing organizations to use the new domain name URL.
dev.azure.com/{your organization}/{your project}
visualstudio.com
Connect a local Git repo to a GitHub repo
You can also share your code with others by connecting your local Git repo to aGitHubrepo.
Visual Studio 2022
Visual Studio 2019 - Git menu
Visual Studio 2019 - Team Explorer
Git Command Line
InSolution Explorer, right-click the solution name, or right-click any item in theFolderview ofSolution Explorer, and then selectPush to Git serviceto launch theCreate a Git repositorywindow.Or, chooseGit > Push to Git servicefrom the menu bar to launch theCreate a Git repositorywindow.
InSolution Explorer, right-click the solution name, or right-click any item in theFolderview ofSolution Explorer, and then selectPush to Git serviceto launch theCreate a Git repositorywindow.

Or, chooseGit > Push to Git servicefrom the menu bar to launch theCreate a Git repositorywindow.

In theCreate a Git repositorywindow, chooseGitHub, select yourGitHubaccount, owner name, and a new repo name, and then choosePush.This step creates a new repo in yourGitHubaccount with content from your local repo.
In theCreate a Git repositorywindow, chooseGitHub, select yourGitHubaccount, owner name, and a new repo name, and then choosePush.

This step creates a new repo in yourGitHubaccount with content from your local repo.
InSolution Explorer, right-click the solution name, or right-click any item in theFolderview ofSolution Explorer, and then selectPush to Git serviceto launch theCreate a Git repositorywindow.Or, chooseGit > Push to Git servicefrom the menu bar to launch theCreate a Git repositorywindow.
InSolution Explorer, right-click the solution name, or right-click any item in theFolderview ofSolution Explorer, and then selectPush to Git serviceto launch theCreate a Git repositorywindow.

Or, chooseGit > Push to Git servicefrom the menu bar to launch theCreate a Git repositorywindow.

In theCreate a Git repositorywindow, chooseGitHub, select yourGitHubaccount, owner name, and a new repo name, and then choosePush.This step creates a new repo in yourGitHubaccount with content from your local repo.
In theCreate a Git repositorywindow, chooseGitHub, select yourGitHubaccount, owner name, and a new repo name, and then choosePush.

This step creates a new repo in yourGitHubaccount with content from your local repo.
In thePublish to GitHubsection of theSynchronizationview inTeam Explorer, select yourGitHubaccount, owner name, and a new repo name, and then choosePublish.This step creates a new repo in yourGitHubaccount with content from your local repo.
In thePublish to GitHubsection of theSynchronizationview inTeam Explorer, select yourGitHubaccount, owner name, and a new repo name, and then choosePublish.

This step creates a new repo in yourGitHubaccount with content from your local repo.
Note
You can also create aGitHubrepo from the command line by using theGitHub CLI.
Open a browser and navigate to yourGitHubaccount. If you don't have aGitHubaccount yet,create one.
Open a browser and navigate to yourGitHubaccount. If you don't have aGitHubaccount yet,create one.
In yourGitHubaccount,createan empty Git repo without added files. Copy the clone URL from theQuick setuppage.
In yourGitHubaccount,createan empty Git repo without added files. Copy the clone URL from theQuick setuppage.

To publish your local commit toGitHub, run the following commands at the command prompt in your local git repo folder, using the clone URL from the previous step.> git remote add origin <clone URL>
> git push -u origin mainYour code is now published to themainbranch of yourGitHubrepo.
To publish your local commit toGitHub, run the following commands at the command prompt in your local git repo folder, using the clone URL from the previous step.
> git remote add origin <clone URL>
> git push -u origin main
> git remote add origin <clone URL>
> git push -u origin main
Your code is now published to themainbranch of yourGitHubrepo.
main
Next steps
Save work with commits
Related articles
New to Git repos? Learn more
Feedback
Was this page helpful?
Additional resources