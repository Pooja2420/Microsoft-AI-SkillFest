Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Classic release pipelines
Article
2024-10-31
17 contributors
In this article
Azure DevOps Services | Azure DevOps Server 2022 - Azure DevOps Server 2019
Classic release pipelines provide developers with a framework for deploying applications to multiple environments efficiently and securely. Using classic release pipelines, you can automate testing and deployment processes, set up flexible deployment strategies, incorporate approval workflows, and ensure smooth application transitions across various stages.
How do release pipelines work
As part of every deployment, Azure Pipelines executes the following steps:
Pre-deployment approval:When a new deployment request is triggered, Azure Pipelines verifies if a predeployment approval is necessary before deploying a release to a stage. If approval is required, it sends email notifications to the relevant approvers.
Pre-deployment approval:
When a new deployment request is triggered, Azure Pipelines verifies if a predeployment approval is necessary before deploying a release to a stage. If approval is required, it sends email notifications to the relevant approvers.
Queue deployment job:Azure Pipelines schedules the deployment job on an availableAgent.
Queue deployment job:
Azure Pipelines schedules the deployment job on an availableAgent.
Agent selection:An available agent picks up the deployment job. A release pipeline can be configured to dynamically select a suitable agent during runtime.
Agent selection:
An available agent picks up the deployment job. A release pipeline can be configured to dynamically select a suitable agent during runtime.
Download artifacts:The agent retrieves and downloads all the artifacts specified in the release.
Download artifacts:
The agent retrieves and downloads all the artifacts specified in the release.
Run the deployment tasks:The agent executes all the tasks in the deployment job.
Run the deployment tasks:
The agent executes all the tasks in the deployment job.
Generate progress logs:The agent generates comprehensive logs for each deployment step and sends them back to Azure Pipelines.
Generate progress logs:
The agent generates comprehensive logs for each deployment step and sends them back to Azure Pipelines.
Post-deployment approval:After the deployment to a stage is finished, Azure Pipelines verifies if a post-deployment approval is necessary for that particular stage. If no approval is needed, or once a required approval is obtained, it proceeds to initiate the deployment to the next stage.
Post-deployment approval:
After the deployment to a stage is finished, Azure Pipelines verifies if a post-deployment approval is necessary for that particular stage. If no approval is needed, or once a required approval is obtained, it proceeds to initiate the deployment to the next stage.

Deployment model
Azure release pipelines support a wide range ofartifact sourcesincluding Jenkins, Azure Artifacts, and Team City. The following example illustrates a deployment model using Azure release pipelines:
In the following example, the pipeline consists of two build artifacts originating from separate build pipelines. The application is initially deployed to theDevstage and then to two separateQAstages. If the deployment is successful in both QA stages, the application will be deployed toProd ring 1and then toProd ring 2. Each production ring represents multiple instances of the same web app, deployed to different locations across the world.

Releases vs deployments
Areleaseis a construct that holds a versioned set of artifacts specified in a CI/CD pipeline. It includes a snapshot of all the information required to carry out all the tasks and actions in the release pipeline, such as stages, tasks, policies such as triggers and approvers, and deployment options. There can be multiple releases from one release pipeline, and information about each one is stored and displayed in Azure Pipelines for the specifiedretention period.
Adeploymentis the action of running the tasks for one stage, which can include running automated tests, deploying build artifacts, and whatever other actions are specified for that stage.
Initiating a release starts each deployment based on the settings and policies defined in the original release pipeline. There can be multiple deployments of each release even for one stage. When a deployment of a release fails for a stage, you can redeploy the same release to that stage. To redeploy a release, simply navigate to the release you want to deploy and select deploy.
The following diagram shows the relationship between release, release pipelines, and deployments.

FAQ
A: Creating a release pipeline doesn't automatically start a deployment. Here are a few reasons why this might happen:
Deployment Triggers: defined deployment triggers may cause the deployment to pause. This can occur with scheduled triggers or when there's a delay until deployment to another stage is complete.
Deployment Triggers: defined deployment triggers may cause the deployment to pause. This can occur with scheduled triggers or when there's a delay until deployment to another stage is complete.
Queuing Policies: these policies dictate the order of execution and when releases are queued for deployment.
Queuing Policies: these policies dictate the order of execution and when releases are queued for deployment.
Pre-Deployment Approvals or Gates: specific stages may require pre-deployment approvals or gates, preventing deployment until all defined conditions are met.
Pre-Deployment Approvals or Gates: specific stages may require pre-deployment approvals or gates, preventing deployment until all defined conditions are met.
A: In theVariablestab of your release pipeline, Select theSettable at release timecheckbox for the variables that you wish to modify when a release is queued.

Subsequently, when generating a new release, you have the ability to modify the values of those variables.

A: You can edit the approvals, tasks, and variables of a release instance. However, these edits will only apply to that instance. If you want your changes to apply to all future releases, edit the release pipeline instead.
A: If you don't plan to reuse the release, or want to prevent it from being used, you can abandon the release as followsPipelines> (...) >Abandon. You can't abandon a release when a deployment is in progress, you must cancel the deployment first.

A: The default naming convention for release pipelines is sequential numbering, where the releases are namedRelease-1,Release-2, and so on. However, you have the flexibility to customize the naming scheme by modifying the release name format mask. In theOptionstab of your release pipeline, navigate to theGeneralpage and adjust theRelease name formatproperty to suit your preferences.
When specifying the format mask, you can use the following predefined variables. Example: The following release name format:Release $(Rev:rrr) for build $(Build.BuildNumber) $(Build.DefinitionName)will create the following release:Release 002 for build 20170213.2 MySampleAppBuild.
A: Seeretention policiesto learn how to set up retention policies for your release pipelines.
Related articles
Deploy pull request Artifacts
Deploy from multiple branches
Set up a multi-stage release pipeline
Feedback
Was this page helpful?
Additional resources