Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Add and run PowerShell script code in Standard workflows for Azure Logic Apps (Preview)
Article
2024-08-13
1 contributor
In this article
Applies to:Azure Logic Apps (Standard)
Note
This capability is in preview and is subject to theSupplemental Terms of Use for Microsoft Azure Previews.
To perform custom integration tasks inline with your Standard workflow in Azure Logic Apps, you can directly add and run PowerShell code from within your workflow. For this task, use theInline Codeaction namedExecute PowerShell Code. This action returns the results from your PowerShell code so that you can use this output in your workflow's subsequent actions.
This capability provides the following benefits:
Write your own scripts within the workflow designer so you can solve complex integration challenges. No other service plans are necessary.This benefit streamlines workflow development plus reduces the complexity and cost with managing more services.
Write your own scripts within the workflow designer so you can solve complex integration challenges. No other service plans are necessary.
This benefit streamlines workflow development plus reduces the complexity and cost with managing more services.
Generate a dedicated code file, which provides a personalized scripting space within your workflow.
Generate a dedicated code file, which provides a personalized scripting space within your workflow.
Integrate withAzure Functions PowerShell Functions, which provides powerful functionality and inheritance for advanced task execution.
Integrate withAzure Functions PowerShell Functions, which provides powerful functionality and inheritance for advanced task execution.
Deploy scripts alongside your workflows.
Deploy scripts alongside your workflows.
This guide shows how to add the action in your workflow and add the PowerShell code that you want to run.
Prerequisites
An Azure account and subscription. If you don't have a subscription,sign up for a free Azure account.
An Azure account and subscription. If you don't have a subscription,sign up for a free Azure account.
The Standard logic app workflow where you want to add your PowerShell script. The workflow must already start with a trigger. For more information, seeCreate example Standard logic app workflows.You can use any trigger for your scenario, but as an example, this guide uses theRequesttrigger namedWhen a HTTP request is receivedand also theResponseaction. The workflow runs when another application or workflow sends a request to the trigger's endpoint URL. The sample script returns the results from code execution as output that you can use in subsequent actions.
The Standard logic app workflow where you want to add your PowerShell script. The workflow must already start with a trigger. For more information, seeCreate example Standard logic app workflows.
You can use any trigger for your scenario, but as an example, this guide uses theRequesttrigger namedWhen a HTTP request is receivedand also theResponseaction. The workflow runs when another application or workflow sends a request to the trigger's endpoint URL. The sample script returns the results from code execution as output that you can use in subsequent actions.
Considerations
The Azure portal saves your script as a PowerShell script file (.ps1) in the same folder as yourworkflow.jsonfile, which stores the JSON definition for your workflow, and deploys the file to your logic app resource along with the workflow definition.Theâ¯.ps1file format lets you write less "boilerplate" and focus just on writing PowerShell code. If you rename the action, the file is also renamed, but not vice versa. If you directly rename the file, the renamed version overwrites the previous version. If the action name and file names don't match, the action can't find the file and tries to create a new empty file.
The Azure portal saves your script as a PowerShell script file (.ps1) in the same folder as yourworkflow.jsonfile, which stores the JSON definition for your workflow, and deploys the file to your logic app resource along with the workflow definition.
Theâ¯.ps1file format lets you write less "boilerplate" and focus just on writing PowerShell code. If you rename the action, the file is also renamed, but not vice versa. If you directly rename the file, the renamed version overwrites the previous version. If the action name and file names don't match, the action can't find the file and tries to create a new empty file.
The script is local to the workflow. To use the same script in other workflows,view the script file in theKuduPlusconsole, and then copy the script to reuse in other workflows.
The script is local to the workflow. To use the same script in other workflows,view the script file in theKuduPlusconsole, and then copy the script to reuse in other workflows.
Limitations
Add the Execute PowerShell Code action
In theAzure portal, open your Standard logic app resource and workflow in the designer.
In theAzure portal, open your Standard logic app resource and workflow in the designer.
In the designer,follow these general steps to add theInline Code Operationsaction namedExecute PowerShell Codeto your workflow.
In the designer,follow these general steps to add theInline Code Operationsaction namedExecute PowerShell Codeto your workflow.
After the action information pane opens, on theParameterstab, in theCode Filebox, update the prepopulated sample code with your own code.To access data coming from your workflow, seeAccess workflow trigger and action outputs in your scriptlater in this guide.To return the script's results or other data to your workflow, seeReturn data to your workflow.The following example shows the action'sParameterstab with the sample script code:The following example shows the sample script code:# Use the following cmdlets to retrieve outputs from prior steps.
# $triggerOutput = Get-TriggerOutput
# $ActionOutput = Get-ActionOutput -ActionName <action-name>

$customResponse =  [PSCustomObject]@{
   Message = "Hello world!"
}

# Use Write-Debug/Write-Host/Write-Output/ to log messages to Application Insights.
# Write-Host/Write-Output/Write-Debug and 'return' won't return an output to the workflow.
# Write-Host "Sending to Application Insight logs"

# Use Push-WorkflowOutput to push outputs into subsequent actions.
Push-WorkflowOutput -Output $customResponseThe following example shows a custom sample script:$action = Get-TriggerOutput
$results = "Hello from PowerShell!"
Push-WorkflowOutput -Output $results
After the action information pane opens, on theParameterstab, in theCode Filebox, update the prepopulated sample code with your own code.
To access data coming from your workflow, seeAccess workflow trigger and action outputs in your scriptlater in this guide.
To access data coming from your workflow, seeAccess workflow trigger and action outputs in your scriptlater in this guide.
To return the script's results or other data to your workflow, seeReturn data to your workflow.
To return the script's results or other data to your workflow, seeReturn data to your workflow.
The following example shows the action'sParameterstab with the sample script code:

The following example shows the sample script code:
# Use the following cmdlets to retrieve outputs from prior steps.
# $triggerOutput = Get-TriggerOutput
# $ActionOutput = Get-ActionOutput -ActionName <action-name>

$customResponse =  [PSCustomObject]@{
   Message = "Hello world!"
}

# Use Write-Debug/Write-Host/Write-Output/ to log messages to Application Insights.
# Write-Host/Write-Output/Write-Debug and 'return' won't return an output to the workflow.
# Write-Host "Sending to Application Insight logs"

# Use Push-WorkflowOutput to push outputs into subsequent actions.
Push-WorkflowOutput -Output $customResponse
# Use the following cmdlets to retrieve outputs from prior steps.
# $triggerOutput = Get-TriggerOutput
# $ActionOutput = Get-ActionOutput -ActionName <action-name>

$customResponse =  [PSCustomObject]@{
   Message = "Hello world!"
}

# Use Write-Debug/Write-Host/Write-Output/ to log messages to Application Insights.
# Write-Host/Write-Output/Write-Debug and 'return' won't return an output to the workflow.
# Write-Host "Sending to Application Insight logs"

# Use Push-WorkflowOutput to push outputs into subsequent actions.
Push-WorkflowOutput -Output $customResponse
The following example shows a custom sample script:
$action = Get-TriggerOutput
$results = "Hello from PowerShell!"
Push-WorkflowOutput -Output $results
$action = Get-TriggerOutput
$results = "Hello from PowerShell!"
Push-WorkflowOutput -Output $results
When you finish, save your workflow.
When you finish, save your workflow.
After you run your workflow, you can review the workflow output in Application Insights, if enabled. For more information, seeView output in Application Insights.

Access workflow trigger and action outputs in your script
The output values from the trigger and preceding actions are returned using a custom object, which has multiple parameters. To access these outputs and make sure that you return the value that you want, use theGet-TriggerOutput,Get-ActionOutput, andPush-WorkflowOutputcmdlets plus any appropriate parameters described in the following table, for example:
$trigger = Get-TriggerOutput
$statusCode = $trigger.status.ToString();
$action = Get-ActionOutput -ActionName Compose
$actionOutput = $action.outputs['actionOutput'].ToString();
$populatedString = "Send the $statusCode for the trigger status and $actionOutputName."

Push-WorkflowOutput -Output $populatedString
$trigger = Get-TriggerOutput
$statusCode = $trigger.status.ToString();
$action = Get-ActionOutput -ActionName Compose
$actionOutput = $action.outputs['actionOutput'].ToString();
$populatedString = "Send the $statusCode for the trigger status and $actionOutputName."

Push-WorkflowOutput -Output $populatedString
Note
In PowerShell, if you reference an object that hasJValuetype inside a complex object, and you
add that object to a string, you get a format exception. To avoid this error, useToString().
Trigger and action response outputs
The following table lists the outputs that are generated when you callGet-ActionOutputorGet-TriggerOutput. The return value is a complex object calledPowershellWorkflowOperationResult, which contains thee following outputs.

Return outputs to your workflow
To return any outputs to your workflow, you must use thePush-WorkflowOutputcmdlet.
Custom PowerShell commands
TheExecute PowerShell Codeaction includes following customPowerShell commands (cmdlets)for interacting with your workflow and other operations in your workflow:
Get-TriggerOutput
Gets the output from the workflow's trigger.
Get-TriggerOutput
Get-TriggerOutput
None.
Get-ActionOutput
Gets the output from another action in the workflow and returns an object namedPowershellWorkflowOperationResult.
Get-ActionOutput [ -ActionName <String> ]
Get-ActionOutput [ -ActionName <String> ]
Push-WorkflowOutput
Pushes output from theExecute PowerShell Codeaction to your workflow, which can pass back any object type. If the return value is null, you get a null object error from the cmdlet.
Note
TheWrite-Debug,Write-Host, andWrite-Outputcmdlets don't return values
to your workflow. Thereturnstatement also doesn't return values to your workflow.
However, you can use these cmdlets to write trace messages that appear in Application Insights.
For more information, seeMicrosoft.PowerShell.Utility.
Push-WorkflowOutput [-Output <Object>] [-Clobber]
Push-WorkflowOutput [-Output <Object>] [-Clobber]
Authenticate and authorize access with a managed identity using PowerShell
With amanaged identity, your logic app resource and workflow can authenticate and authorize access to any Azure service and resource that supports Microsoft Entra authentication without including credentials in your code.
From inside theExecute PowerShell Codeaction, you can authenticate and authorize access with a managed identity so that you can perform actions on other Azure resources where you enabled access. For example, you can restart a virtual machine or get the run details of another logic app workflow.
To use the managed identity from inside theExecute PowerShell Codeaction, you must follow these steps:
Follow these steps to set up the managed identity on your logic app and grant the managed identity access on the target Azure resource.On the target Azure resource, review the following considerations:On theRoletab, aContributorrole is usually sufficient.On theAdd role assignmentpage, on theMemberstab, for theAssign access toproperty, make sure that you selectManaged identity.After you selectSelect members, on theSelect managed identitiespane, select the managed identity that you want to use.
Follow these steps to set up the managed identity on your logic app and grant the managed identity access on the target Azure resource.
On the target Azure resource, review the following considerations:
On theRoletab, aContributorrole is usually sufficient.
On theRoletab, aContributorrole is usually sufficient.
On theAdd role assignmentpage, on theMemberstab, for theAssign access toproperty, make sure that you selectManaged identity.
On theAdd role assignmentpage, on theMemberstab, for theAssign access toproperty, make sure that you selectManaged identity.
After you selectSelect members, on theSelect managed identitiespane, select the managed identity that you want to use.
After you selectSelect members, on theSelect managed identitiespane, select the managed identity that you want to use.
In yourExecute PowerShell Codeaction, include the following code as the first statement:Connect-AzAccount -Identity
In yourExecute PowerShell Codeaction, include the following code as the first statement:
Connect-AzAccount -Identity
Connect-AzAccount -Identity
Now, you can work with the Azure resource using cmdlets and modules.
Now, you can work with the Azure resource using cmdlets and modules.

View the script file
In theAzure portal, open your Standard logic app resource that has the workflow you want.
In theAzure portal, open your Standard logic app resource that has the workflow you want.
On the logic app resource menu, underDevelopment Tools, selectAdvanced Tools.
On the logic app resource menu, underDevelopment Tools, selectAdvanced Tools.
On theAdvanced Toolspage, selectGo, which opens theKuduPlusconsole.
On theAdvanced Toolspage, selectGo, which opens theKuduPlusconsole.
Open theDebug consolemenu, and selectCMD.
Open theDebug consolemenu, and selectCMD.
Go to your logic app's root location:site/wwwroot
Go to your logic app's root location:site/wwwroot
Go to your workflow's folder, which contains the .ps1 file, along this path:site/wwwroot/{workflow-name}
Go to your workflow's folder, which contains the .ps1 file, along this path:site/wwwroot/{workflow-name}
Next to the file name, selectEditto open and view the file.
Next to the file name, selectEditto open and view the file.

View logs in Application Insights
In theAzure portal, on the logic app resource menu, underSettings, selectApplication Insights, and then select your logic app.
In theAzure portal, on the logic app resource menu, underSettings, selectApplication Insights, and then select your logic app.
On theApplication Insightsmenu, underMonitoring, selectLogs.
On theApplication Insightsmenu, underMonitoring, selectLogs.
Create a query to find any traces or errors from your workflow execution, for example:union traces, errors
| project TIMESTAMP, message
Create a query to find any traces or errors from your workflow execution, for example:
union traces, errors
| project TIMESTAMP, message
union traces, errors
| project TIMESTAMP, message
Modules
PowerShell modulesâ¯are self-contained, reusable units that include various components, for example:
Cmdlets: Individual commands that perform specific tasks.
Providers: Allow access to data stores, such as the registry or file system, as if they were drives.
Functions: Reusable code blocks that perform specific actions.
Variables: Store data for use within the module.
Other types of resources.
A module organizes PowerShell code, making it easier to distribute. For example, you can create your own modules to package and make related functionality more manageable and shareable. TheExecute PowerShell Codeaction lets you import both public and private PowerShell modules.
Public modules
To find publicly available modules, visit thePowerShell gallery. A Standard logic app resource can support up to 10 public modules. To use any public module, you must enable this capability by following these steps:
In theAzure portal, on your logic app resource menus, under Development Tools, selectAdvanced Tools.
In theAzure portal, on your logic app resource menus, under Development Tools, selectAdvanced Tools.
On theAdvanced Toolspage, selectGo.
On theAdvanced Toolspage, selectGo.
On theKudu Plustoolbar, from theDebug consolemenu, selectCMD.
On theKudu Plustoolbar, from theDebug consolemenu, selectCMD.
Browse to your logic app's root level atC:\home\site\wwwrootby using the directory structure or the command line.
Browse to your logic app's root level atC:\home\site\wwwrootby using the directory structure or the command line.
Open the workflow'shost.jsonfile, and set themanaged dependencyproperty totrue, which is already set by default."managedDependency": {
    "enabled": true
}
Open the workflow'shost.jsonfile, and set themanaged dependencyproperty totrue, which is already set by default.
"managedDependency": {
    "enabled": true
}
"managedDependency": {
    "enabled": true
}
Open the file namedrequirements.psd1. Include the name and version for the module that you want by using the following syntax:MajorNumber.*â¯or the exact module version, for example:@{
    Az = '1.*'
    SqlServer = '21.1.18147'
}
Open the file namedrequirements.psd1. Include the name and version for the module that you want by using the following syntax:MajorNumber.*â¯or the exact module version, for example:
@{
    Az = '1.*'
    SqlServer = '21.1.18147'
}
@{
    Az = '1.*'
    SqlServer = '21.1.18147'
}
If you use dependency management, the following considerations apply:
To download modules, public modules require access to thePowerShell Gallery.
To download modules, public modules require access to thePowerShell Gallery.
Managed dependencies currently don't support modules that require you to accept a license, either by accepting the license interactively or by providing the-AcceptLicenseoption when you runInstall-Module.
Managed dependencies currently don't support modules that require you to accept a license, either by accepting the license interactively or by providing the-AcceptLicenseoption when you runInstall-Module.
Private modules
You can generate your own private PowerShell modules. To create your first PowerShell module, seeWrite a PowerShell Script Module.
In theAzure portal, on your logic app resource menu, under Development Tools, selectsAdvanced Tools.
In theAzure portal, on your logic app resource menu, under Development Tools, selectsAdvanced Tools.
On theAdvanced Toolspage, selectGo.
On theAdvanced Toolspage, selectGo.
On theKudu Plustoolbar, from theDebug consolemenu, selectCMD.
On theKudu Plustoolbar, from theDebug consolemenu, selectCMD.
Browse to your logic app's root level atC:\home\site\wwwrootby using the directory structure or the command line.
Browse to your logic app's root level atC:\home\site\wwwrootby using the directory structure or the command line.
Create a folder namedModules.
Create a folder namedModules.
In theModulesfolder, create a subfolder with the same name as your private module.
In theModulesfolder, create a subfolder with the same name as your private module.
In your private module folder, add your private PowerShell module file with thepsm1file name extension. You can also include an optional PowerShell manifest file with thepsd1file name extension.
In your private module folder, add your private PowerShell module file with thepsm1file name extension. You can also include an optional PowerShell manifest file with thepsd1file name extension.
When you're done, your complete logic app file structure appears similar to the following example:
MyLogicApp
-- execute_powershell_script.ps1
-- mytestworkflow.json
Modules
-- MyPrivateModule
--- MyPrivateModule.psd1
--- MyPrivateModule.psm1
-- MyPrivateModule2
--- MyPrivateModule2.psd1
--- MyPrivateModule2.psm1
requirements.psd1
host.json
MyLogicApp
-- execute_powershell_script.ps1
-- mytestworkflow.json
Modules
-- MyPrivateModule
--- MyPrivateModule.psd1
--- MyPrivateModule.psm1
-- MyPrivateModule2
--- MyPrivateModule2.psd1
--- MyPrivateModule2.psm1
requirements.psd1
host.json
Compilation errors
In this release, the web-based editor includes limited IntelliSense support, which is still under improvement. Any compilation errors are detected when you save your workflow, and the Azure Logic Apps runtime compiles your script. These errors appear in your logic app's error logs through Application Insights.
Runtime errors
A workflow action doesn't return any output.
Make sure that you use thePush-WorkflowOutputcmdlet.
Execute PowerShell Code action fails: "The term '{some-text}' is not recognized..."
If you incorrectly reference a public module in therequirements.psd1file or when your private module doesn't exist in the following path:C:\home\site\wwwroot\Modules{module-name}, you get the following error:
The term '{some-text}' is not recognized as a name of a cmdlet, function, script file, or executable program. Check the spelling of the name or if a path was included, verify the path is correct and try again.
Note
By default, the Az* modules appear in therequirements.psd1file, but they're commented out at file creation.
When you reference a cmdlet from the module, make sure to uncomment the module.
Execute PowerShell Code action fails: "Cannot bind argument to parameter 'Output' because it is null."
This error happens when you try to push a null object to the workflow. Confirm whether the object that you're sending withPush-WorkflowOutputisn't null.
Related content
Add and run JavaScript code snippets
Add and run C# scripts
Feedback
Was this page helpful?
Additional resources