Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Azure DevOps Server 2022 Update 2 Release Notes
Article
2025-04-08
5 contributors
In this article

|Developer Community|System Requirements and Compatibility|License Terms|DevOps Blog|SHA-256 Hashes|
In this article, you will find information regarding the newest release for Azure DevOps Server.
To learn more about installing or upgrading an Azure DevOps Server deployment, seeAzure DevOps Server Requirements.
To download Azure DevOps Server products, visit theAzure DevOps Server Downloads page.
Direct upgrade to Azure DevOps Server 2022 Update 2 is supported from Azure DevOps Server 2019 or Team Foundation Server 2015 or newer. If your TFS deployment is on TFS 2013 or earlier, you need to perform some interim steps before upgrading to Azure DevOps Server 2022. Please see theInstall pagefor more information.
Azure DevOps Server 2022 Update 2 Patch 5 Release Date: April 8, 2025
We have releasedPatch 5for Azure DevOps Server 2022 Update 2 to include:
Important
TheCDN Domain URL change for Agents in Pipelines blogprovides steps to follow before installing this patch.
Previously, the Azure DevOps Agent used the Edgio CDN with endpointvstsagentpackage.azureedge.net. As part of Edgio's retirement, the*.azureedge.netdomain is being decommissioned. To ensure continued availability, we have migrated to an Akamai-backed CDN with a new endpointdownload.agent.dev.azure.com. This patch includes the necessary changes to fetch the Agent binaries from the new CDN endpoint, thereby migrating away from the previous CDN endpoint.
vstsagentpackage.azureedge.net
*.azureedge.net
download.agent.dev.azure.com
Azure DevOps Server 2022 Update 2 Patch 4 Release Date: March 11, 2025
We have releasedPatch 4for Azure DevOps Server 2022 Update 2 to include:
Update tasks due to Edgio CDN deprecation. Check out theSwitching CDN providers blog postfor more details.
Upgraded Mermaid dependency.
Azure DevOps Server 2022 Update 2 Patch 3 Release Date: February 11, 2025
Note
On Monday, February 24, 2025, we re-released Patch 3 for Azure DevOps Server 2022.2. If you have previously installed the earlier version of this patch, please update it using the provided link. This re-release addresses an issue causing YAML pipelines to fail. Further details on the issue can be found in theDeveloper Community.
We have releasedPatch 3for Azure DevOps Server 2022 Update 2 to include:
Updates in Artifacts to addPython Enhancement Proposals (PEPs) 685. This updated addresses feedback shared in theDeveloper Community.
Azure DevOps Server 2022 Update 2 Patch 2 Release Date: November 12, 2024
We have releasedPatch 2for Azure DevOps Server 2022 Update 2 to include an upgrade to a vulnerable dependency.
Azure DevOps Server 2022.2 RTW Release Date: July 9, 2024
Summary of What's New in Azure DevOps Server 2022.2 RTW
Note
We have re-released Azure DevOps Server 2022.2 to fix an issue with loading Teams names. The issue was reported in theAzure DevOps Server 2022.2 RTW now available blog post. If you have installed the version of Azure DevOps Server 2022.2 released on July 9, you can installPatch 1 for Azure DevOps Server 2022.2to fix the issue. Patch 1 is not required if you are installing Azure DevOps Server 2022.2 for the first time since the download links have been updated to include the fix.
Azure DevOps Server 2022.2 RTWis a roll up of bug fixes. It includes all features in the Azure DevOps Server 2022.2 RC previously released.
You can directly install Azure DevOps Server 2022.2 or upgrade from Azure DevOps Server 2020, 2019 or Team Foundation Server 2015 or newer.
The following issues and vulnerabilities have been addressed with this release:
CVE-2024-35266: Azure DevOps Server Spoofing Vulnerability
CVE-2024-35267: Azure DevOps Server Spoofing Vulnerability
Developer Community feedback ticket: Agent version does not update after upgrading to Azure DevOps Server 2022.1 and using Update Agent in Agent Pool configuration
Developer Community feedback ticket: Issue with loading the Team configuration page
Developer Community feedback ticket: Fix incorrect date handling in PR email notification for certain regional formats
Azure DevOps Server 2022 Update 2 RC Release Date: May 7, 2024
Azure DevOps Server 2022.2 RC includes many new features. Some of the highlights include:
Limits for area and iteration paths
Bypass Approvals and Checks in pipelines
Improved YAML validation
Azure Artifacts support for Cargo Crates
New Dashboard directory experience
Quick Copy and Import with Test Plan or Suite ID
You can also jump to individual sections to see all the new features for each service:
General
Boards
Repos
Pipelines
Artifacts
Reporting
General
Publish Test Results task
The Publish Test Results task now supports test run attachments for the JUnit report format.
New version of the Azure DevOps Web Extension SDK
With this update we are releasing a new version of the Azure DevOps Web Extension SDK. The client SDK enables web extensions to communicate to the host frame. It can be used to:
Notify the host that the extension is loaded or has errors
Get basic contextual information about the current page (current user, host and extension information)
Get theme information
Obtain an authorization token to use in REST calls back to Azure DevOps
Get remote services offered by the host frame
You can find a full API reference in theazure-devops-extension-sdk package documentation.
This new version provides support for the following modules:
ES Module Support:SDK now supports ES (ECMAScript) modules in addition to the existing AMD (Asynchronous Module Definition) modules. You can now import SDK using the ES module syntax, which provides performance improvements and reduces the application size.
ES Module Support:SDK now supports ES (ECMAScript) modules in addition to the existing AMD (Asynchronous Module Definition) modules. You can now import SDK using the ES module syntax, which provides performance improvements and reduces the application size.
Backward Compatibility for AMD Modules:Existing support for AMD modules remains intact. If your project is using AMD modules, you can continue to use them as before without any changes.
Backward Compatibility for AMD Modules:Existing support for AMD modules remains intact. If your project is using AMD modules, you can continue to use them as before without any changes.
How to use:
For ES modules, you can import our modules using the import statement:
import * as SDK from 'azure-devops-extension-sdk';
// Use the module here
import * as SDK from 'azure-devops-extension-sdk';
// Use the module here
If you're using AMD modules, you can continue to import SDK using therequirefunction:
require
require(['azure-devops-extension-sdk'], function(SDK) {

  // Use the module here
});
require(['azure-devops-extension-sdk'], function(SDK) {

  // Use the module here
});
Boards
Limits for area and iteration paths
Limits play an important part in maintaining the health and efficiency of a large, global service. With this release, we are introducing hard limits of 10,000 per project for both area and iteration paths. Visit theWork tracking, process, and project limitspage to learn more about different limits in the service.

Development and Deployment Controls
We now remove the Development and/or Deployment controls from the work item, depending on how your project is configured. For example, you might configure your project settings to turn off Repos and/or Pipelines.

When you go to the work item, the corresponding Development and Deployment controls will be hidden from the form.

If you decide toconnect a GitHub repo to Azure Boards, the Development control for GitHub repos will be displayed.

Repos
New "Branch policy" preventing users to approve their own changes
To improve the control around what changes user approves and match stricter regulatory/compliance requirements, we do provide an option to prevent user approving his own changes unless explicitly allowed.
User with ability to manage the branch policies can now switch newly added option "Require at least one approval on every iteration" under the "When new changes are pushed".
When this option is selected, then at least one approval vote for the last source branch change is required.
The user's approval is not counted against any previous unapproved iteration pushed by that user.
As a result, additional approval on the last iteration is required to be done by another user.
Following image shows pull request created by user A and additional 4 commits (iterations) made to that pull request by users B, C, A again and C.
After the second iteration (commit done by user B) was done, user C approved that.
At that time, it implied approval of first commit of user A (when the pull request was created) and the newly introduced policy will succeed.
After the fifth iteration (last commit of user C), the approval was done by user A.
This implied approval for earlier commit done by user C, but was not implying approval for the second commit done by user A in the fourth iteration.
To make the newly introduced policy to succeed, the unapproved iteration four must be approved either by approval from user B, C or any other user who has not made any change to the pull request.

Note
There is a known issue where branch policies will take a group, that is configured as a reviewer, as approving entity. Let's imagine there's a required approval done by any user of Group G. User A is member of that Group G. After User A provides approval as in the image above (after fifth iteration), then the Group G approval approves the change done by User A. This is not expected and will be resolved in the RTW release.
Blobless and treeless filter support
Important
The feature is disabled by default. To enable the feature, please execute the following query on Config DB:
exec prc_SetRegistryValue 1,'#\FeatureAvailability\Entries\Git.EnablePartialClone\AvailabilityState\', 1
exec prc_SetRegistryValue 1,'#\FeatureAvailability\Entries\Git.EnablePartialClone\AvailabilityState\', 1
Azure DevOps now supports two additional filtering while cloning/fetching. These are:--filter=blob:noneand--filter=tree:0The first option (blobless clone) is best used for regular development while the second option (treeless clone) fits better for those cases where you discard of the clone after, for example running a build.
--filter=blob:none
--filter=tree:0
SSH-RSA deprecation
Azure Repos provides two methods for users to access a git repository in Azure Repos â HTTPS and SSH. To use SSH, you need to create a key pair using one of the supported encryption methods. In the past, weâve been supporting only SSH-RSA and weâve asked users to enable the SSH-RSAhere.
With this update, we're announcing the deprecation of SSH-RSA as a supported encryption method for connecting to Azure Repos using SSH. You can see more details in theEnd of SSH-RSA support for Azure Reposblog post.
Pipelines
Prevent unintended pipeline runs
Today, if your YAML pipeline doesn't specify atriggersection, it runs for any changes pushed to its repository. This can create confusion as to why a pipeline ran and lead to many unintended runs.
trigger
We added a project collection- and project-level Pipelines setting namedDisable implied YAML CI triggerthat lets you change this behavior. You can choose to not trigger pipelines if their trigger section is missing.

Retry a stage when approvals and checks time out
When approvals and checks time out, the stage they belong to is skipped. Stages that have a dependency on the skipped stage are also skipped.
Now you can retry a stage when approvals and checks time-out. Previously, this was possible only when an approval timed out.

Bypass Approvals and Checks
Approvals and checkshelp protect access to important resources, such as service connections, repos, or agent pools. A common use case is to use Approvals and Checks when deploying to production, and you wish to protect the ARM service connection.
Say you added the following checks on the service connection: an Approval, a Business Hours check, and an Invoke Azure Function check (to enforce a delay between different regions).
Now, imagine you have to do a hotfix deployment. You start a pipeline run, but it doesn't proceed,it waits for most of the checks to complete. You cannot afford to wait for the approvals and checks to complete.
With this release we've made it possible to bypass running approvals and checks, so you can complete your hotfix.
You can bypass running Approvals, Business Hours, Invoke Azure Function, and Invoke REST API checks.
Bypass an Approval.

Bypass Business Hours check.

Bypass Invoke Azure Function check.
Bypass Business Hours check.

When a check is bypassed, you can see it in the checks panel.

You can bypass a check only if you're an Administrator of the resource on which the checks were defined.

Rerun invoke Azure function checks
Imagine that you deploy your system in multiple stages. Before deploying the second stage, there's an Approval and an Invoke Azure Function check that runs a sanity check on the already-deployed part of the system.
When reviewing the Approval request, you notice the sanity check ran two days earlier. In this scenario, you may be aware of another deployment that affected the result of the sanity check.
With this update, you can rerun Invoke Azure Function and Invoke REST API checks. This functionality is available only for checks that succeeded and have no retries.

Note
You can rerun a check only if you are an Administrator of the resource on which the checks were defined.
Support for GitHub enterprise server in required template check
Templatesare a security mechanism that enables you to control the stages, jobs, and steps of pipelines in your project collection.
TheRequire template checkenables you to enforce that a pipeline extends from a set of approved templates before accessing a protected resource, such as an agent pool or service connection.
You can now specify templates located in GitHub Enterprise Server repos.
Administrator role for all Environments
Environmentsin YAML pipelines represent a compute resource to which you deploy your application, for example an AKS cluster or a set of VMs. They provide you with security controls and traceability for your deployments.
Managing environments can be quite challenging. This is because, when an environment is created, the person creating it automatically becomes the sole administrator. For example, if you want to manage the approvals and checks of all environments in a centralized fashion, you had to ask every environment administrator to add a specific user or group as administrator, and then use REST API to configure the checks. This approach is tedious, error-prone, and doesn't scale when new environments are added.
With this release, we added anAdministrator roleat the environments-hub level. This brings environments up to par with service connections or agent pools. To assign the Administrator role to a user or group, you need to already be an environments-hub administrator or project collection-owner.

A user with this Administrator role can administer permissions, manage, view and use any environment. This includes opening up environments to all pipelines.
When you grant a user Administrator role at environments-hub level, they become administrators for all existing environments and for any future environments.
Improved YAML validation
To verify your YAML syntax is correct, you can use the Azure Pipelines web editor'sValidatefunctionality. Thus, it's important that this functionality catch as many YAML issues as possible.

YAML validation is now more thorough when it comes to expressions.
When writing YAML pipelines, you can usefunctionsto define variable values.
Imagine you define the following variables:
variables:
  Major: '1'
  Minor: '0'
  Patch: $[counter(fromat('{0}.{1}', variables.Major, variables.Minor ), 0)]
variables:
  Major: '1'
  Minor: '0'
  Patch: $[counter(fromat('{0}.{1}', variables.Major, variables.Minor ), 0)]
ThePatchvariable is defined using thecounterfunction and the other two variables. In the YAML code above, the wordformatis misspelt. Previously, this error went undetected. Now, theValidatefunctionality will detect this and surface an error message.
Patch
counter
format

Azure Pipelines will detect incorrect variable definitions at pipeline / stage / job level.
In YAML pipelines, you can skip the execution of stage usingconditions. Typos can show up here as well, like in the following example.
steps:
- task: NuGetCommand@2
  condition: eq(variable.Patch, 0)
  inputs:
    command: pack
    versioningScheme: byPrereleaseNumber
    majorVersion: '$(Major)'
    minorVersion: '$(Minor)'
    patchVersion: '$(Patch)'
steps:
- task: NuGetCommand@2
  condition: eq(variable.Patch, 0)
  inputs:
    command: pack
    versioningScheme: byPrereleaseNumber
    majorVersion: '$(Major)'
    minorVersion: '$(Minor)'
    patchVersion: '$(Patch)'
TheNuGetCommandtask executes only if the value of thePatchvariable is 0. Again, there's a typo in the condition, and theValidatefunctionality will display it.
NuGetCommand
Patch

Azure Pipelines will detect incorrect YAML conditions defined at pipeline / stage / job level.
REST APIs for Environments
AnEnvironmentis a collection of resources that you can target with deployments from a pipeline. Environments provide you with deployment history, traceability for work items and commits, and access control mechanisms.
We know you want to create environmentsprogrammatically, so we published documentation for theirREST API.
Improvements to Approvals REST API
We improved locating approvals assigned to a user by including the groups the user belongs to in the search results.
Approvals now contain information about the pipeline run they belong to.
For example, the following GET REST API callhttps://fabrikam.selfhosted/fabrikam/FabrikamFiber/_apis/pipelines/approvals?api-version=7.2-preview.2&top=1&assignedTo=john@fabrikam.com&state=pendingreturns
https://fabrikam.selfhosted/fabrikam/FabrikamFiber/_apis/pipelines/approvals?api-version=7.2-preview.2&top=1&assignedTo=john@fabrikam.com&state=pending
{
    "count": 1,
    "value":
    [
        {
            "id": "7e90b9f7-f3f8-4548-a108-8b80c0fa80e7",
            "steps":
            [],
            "status": "pending",
            "createdOn": "2023-11-09T10:54:37.977Z",
            "lastModifiedOn": "2023-11-09T10:54:37.9775685Z",
            "executionOrder": "anyOrder",
            "minRequiredApprovers": 1,
            "blockedApprovers":
            [],
            "_links":
            {
                "self":
                {
                    "href": "https://dev.azure.com/fabrikam/26dcfaeb-d8fe-495c-91cb-fec4acb44fbb/_apis/pipelines/approvals/7e80b987-f3fe-4578-a108-8a80c0fb80e7"
                }
            },
            "pipeline":
            {
                "owner":
                {
                    "_links":
                    {
                        "web":
                        {
                            "href": "https://dev.azure.com/buildcanary/26dcfaeb-d8fe-495c-91cb-fec4acb44fbb/_build/results?buildId=73222930"
                        },
                        "self":
                        {
                            "href": "https://dev.azure.com/buildcanary/26dcfaeb-d8fe-495c-91cb-fec4acb44fbb/_apis/build/Builds/73222930"
                        }
                    },
                    "id": 73222930,
                    "name": "20231109.1"
                },
                "id": "4597",
                "name": "FabrikamFiber"
            }
        }
    ]
}
{
    "count": 1,
    "value":
    [
        {
            "id": "7e90b9f7-f3f8-4548-a108-8b80c0fa80e7",
            "steps":
            [],
            "status": "pending",
            "createdOn": "2023-11-09T10:54:37.977Z",
            "lastModifiedOn": "2023-11-09T10:54:37.9775685Z",
            "executionOrder": "anyOrder",
            "minRequiredApprovers": 1,
            "blockedApprovers":
            [],
            "_links":
            {
                "self":
                {
                    "href": "https://dev.azure.com/fabrikam/26dcfaeb-d8fe-495c-91cb-fec4acb44fbb/_apis/pipelines/approvals/7e80b987-f3fe-4578-a108-8a80c0fb80e7"
                }
            },
            "pipeline":
            {
                "owner":
                {
                    "_links":
                    {
                        "web":
                        {
                            "href": "https://dev.azure.com/buildcanary/26dcfaeb-d8fe-495c-91cb-fec4acb44fbb/_build/results?buildId=73222930"
                        },
                        "self":
                        {
                            "href": "https://dev.azure.com/buildcanary/26dcfaeb-d8fe-495c-91cb-fec4acb44fbb/_apis/build/Builds/73222930"
                        }
                    },
                    "id": 73222930,
                    "name": "20231109.1"
                },
                "id": "4597",
                "name": "FabrikamFiber"
            }
        }
    ]
}
Pipeline logs now contain resource utilization
Azure pipeline logs can now capture resource utilization metrics such as memory, CPU usage and available disk space. The logs also include resources used by the pipeline agent and child processes including tasks run in a job.

If you suspect your pipeline job may run into resource constraints, enableverbose logsto have resource utilization information injected into pipeline logs. This works on any agent, independent from hosting model.
Azure Pipelines agent now supports Alpine Linux
The Pipeline agent v3.227 now supportsAlpine Linuxversions 3.13 and above. Alpine Linux is a popular for container (base) image. You can find the agent on thereleasespage. Alpine Linux versions of the agent have a prefixvsts-agent-linux-musle.g.vsts-agent-linux-musl-x64-3.227.1.tar.gz.
vsts-agent-linux-musl
vsts-agent-linux-musl-x64-3.227.1.tar.gz
Azure Pipelines tasks use Node 16
Tasks in the pipeline are executed using a runner, with Node.js used in most cases. Azure Pipelines tasks that utilize a Node as a runner now all use Node 16. As Node 16 is the first Node version to natively support Apple silicon, this also completes full task support for macOS on Apple silicon. Agents running on Apple silicon do not need Rosetta to run.
As the Node 16 end-of-life date hasmoved forward, we have started the work to run tasks with Node 20.
Increased Azure Pipeline limits to align with the 4 MB maximum Azure Resource Manager (ARM) template size.
You can use theAzure Resource Manager Template Deploymenttask to create Azure infrastructure. In response to your feedback, we have increased the Azure Pipelines integration limit of 2 MB to 4 MB. This will align with the ARM Templatesmaximum size of 4 MBresolving size constraints during integration of large templates.
AzureRmWebAppDeployment task supports Microsoft Entra ID authentication
The AzureRmWebAppDeploymentV3 andAzureRmWebAppDeployment@4tasks have been updated to support App Service withbasic authentication disabled. If basic authentication is disabled on the App Service, the AzureRmWebAppDeploymentV3/4 tasks use Microsoft Entra ID authentication to perform deployments to the App Service Kudu endpoint. This requires a recent version of msdeploy.exe installed on the agent, which is the case on the windows-2022/windows-latestHosted agents(seetask reference).
Disabled override of code coverage policy status to Failed when build is failing
Previously in, the code coverage policy status was overridden to 'Failed' if your build in PR was failing. This was a blocker for some of you who had the build as an optional check and the code coverage policy as a required check for PRs resulting in PRs being blocked.

Now, the code coverage policy won't be overridden to 'Failed' if the build fails.
This feature will be enabled for all customers.

Artifacts
Introducing Azure Artifacts support for Cargo Crates
We're excited to announce that Azure Artifacts now offer native support for Cargo crates.
This support includes feature parity with respect to our existing protocols, in addition to crates.io being available as an upstream source. Rust developers and teams can now consume, publish, manage, and share their Cargo crates seamlessly, all while using Azure's robust infrastructure and staying in the familiar Azure DevOps environment.
Deprecation announcement for NuGet Restore v1 and NuGet Installer v0 pipeline tasks
If you're using the NuGet Restore v1 and NuGet Installer v0 pipeline tasks, promptly transition to the NuGetCommand@2 pipeline task. You'll begin receiving alerts in your pipelines soon if the transition hasn't been made. If no action is taken, starting November 27, 2023, your builds will result in failure.
Azure Artifacts support for npm audit
Azure Artifacts now supportsnpm auditandnpm audit fixcommands. This feature enables users to analyze and fix their project's vulnerabilities by automatically updating insecure package versions. To learn more visit,Use npm audit to detect and fix package vulnerabilities.
npm audit
npm audit fix
Reporting
New Dashboard directory experience
We've listened to your feedback and are thrilled to introduce the new Dashboard directory experience. It not only features a modern UI design but also enables you to sort by each column, with the addition of theLast Configuredcolumn. This column will provide you with better insights into overall dashboard usage within your project collection. Additionally, you can now filter by team or project-level dashboards, allowing you to access only the list of what you need to see while hiding the dashboards you donât want to view.

Try it now and let us know what you think in ourAzure DevOps community
Work item filtering
We are happy to announcework item chart filtering.This feature will let you hover over your work item chart for a quick overview and drill down into specific chart segments for detailed insights. You no longer need to create custom queries to access the exact piece of data you need. You can now dive into your work items in work item charts in a few clicks.

Your feedback is invaluable in shaping the future of this feature. Try it now and let us know what you think in ourAzure DevOps community.
Code Coverage results for folders
Results for code coverage are now available for every individual file and folder rather than only as a top-level number. The code coverage view appears when theFolder view modebutton is toggled. In this mode you can drill down and see the code coverage for that selected subtree. Use the toggle button to switch between the new and old views.

Test Plans
Quick Copy and Import with Test Plan or Suite ID
You can now handle multiple test plans in Azure Test Plans with ease! Recognizing the challenges previously faced with long dropdown menus for importing, copying, or cloning test casesâespecially for extensive plans or suitesâwe've taken steps to streamline your workflow.
We're excited to announce the Test Plan and Suite ID Search feature. Enter your Test Plan or Suite ID for swift importing or copying of Test Cases without any delays. This update is part of our ongoing commitment to improve your test management experience, making it more intuitive and less time-consuming.

Update for Azure Test Runner
We're excited to share that Azure Test Runner has been updated to a newer version. This update improves stability and performance, allowing you to run your tests without interruptions or delays. The older version of Azure Test Runner is no longer supported. For the best performance and dependability of your testing operations, we recommend that you update to the newest version as soon as possible.
What's New?
Enhanced Stability and Performance:We've made significant improvements to the Test Runner, addressing issues some users experienced. This upgrade ensures a more reliable testing process, minimizing disruptions to your work.
Upgrade Prompt:To make the transition to the new version seamless, you'll encounter a prompt to upgrade. This ensures everyone can easily move to the improved version at your convenience, enhancing compatibility and performance.

Feedback
We would love to hear from you! You can report a problem or provide an idea and track it throughDeveloper Communityand get advice onStack Overflow.
Additional resources