Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Configure managed identities for your Azure Data Explorer cluster
Article
2023-10-13
6 contributors
In this article
Amanaged identity from Microsoft Entra IDallows your cluster to access other Microsoft Entra protected resources such as Azure Key Vault. The identity is managed by the Azure platform and doesn't require you to provision or rotate any secrets.
This article shows you how to add and remove managed identities on your cluster. For more information on managed identities, seeManaged identities overview.
Note
Managed identities for Azure Data Explorer won't behave as expected if your Azure Data Explorer cluster is migrated across subscriptions or tenants. The app will need to obtain a new identity, which can be done byremoving a system-assigned identityand thenadding a system-assigned identity. Access policies of downstream resources will also need to be updated to use the new identity.
For code samples based on previous SDK versions, see thearchived article.
Types of managed identities
Your Azure Data Explorer cluster can be granted two types of identities:
System-assigned identity: Tied to your cluster and deleted if your resource is deleted. A cluster can only have one system-assigned identity.
System-assigned identity: Tied to your cluster and deleted if your resource is deleted. A cluster can only have one system-assigned identity.
User-assigned identity: A standalone Azure resource that can be assigned to your cluster. A cluster can have multiple user-assigned identities.
User-assigned identity: A standalone Azure resource that can be assigned to your cluster. A cluster can have multiple user-assigned identities.
Add a system-assigned identity
Assign a system-assigned identity that is tied to your cluster, and is deleted if your cluster is deleted. A cluster can only have one system-assigned identity. Creating a cluster with a system-assigned identity requires an additional property to be set on the cluster. Add the system-assigned identity using the Azure portal, C#, or Resource Manager template as detailed below.
Azure portal
C#
Resource Manager template
Add a system-assigned identity using the Azure portal
Sign in to theAzure portal.
Create an Azure Data Explorer cluster
Create an Azure Data Explorer cluster
In theSecuritytab >System assigned identity, selectOn. To remove the system assigned identity, selectOff.
In theSecuritytab >System assigned identity, selectOn. To remove the system assigned identity, selectOff.
SelectNext : Tags >orReview + createto create the cluster.
SelectNext : Tags >orReview + createto create the cluster.

Open an existing Azure Data Explorer cluster.
Open an existing Azure Data Explorer cluster.
SelectSettings>Identityin left pane of portal.
SelectSettings>Identityin left pane of portal.
In theIdentitypane >System assignedtab:Move theStatusslider toOn.SelectSaveIn the pop-up window, selectYes
In theIdentitypane >System assignedtab:
Move theStatusslider toOn.
SelectSave
In the pop-up window, selectYes

After a few minutes, the screen shows:Object ID- Used for customer-managed keysPermissions- Select relevant role assignments
After a few minutes, the screen shows:
Object ID- Used for customer-managed keys
Permissions- Select relevant role assignments

Add a system-assigned identity using C#
To set up a managed identity using the Azure Data Explorer C# client:
Install theAzure Data Explorer NuGet package.
Install theAzure.Identity NuGet packagefor authentication.
Create a Microsoft Entra applicationand service principal that can access resources. You add role assignment at the subscription scope and get the requiredDirectory (tenant) ID,Application ID, andClient Secret.
Directory (tenant) ID
Application ID
Client Secret
Create or update your cluster using theIdentityproperty:var tenantId = "xxxxxxxx-xxxxx-xxxx-xxxx-xxxxxxxxx"; //Directory (tenant) ID
var clientId = "xxxxxxxx-xxxxx-xxxx-xxxx-xxxxxxxxx"; //Application ID
var clientSecret = "PlaceholderClientSecret"; //Client Secret
var subscriptionId = "xxxxxxxx-xxxxx-xxxx-xxxx-xxxxxxxxx";
var credentials = new ClientSecretCredential(tenantId, clientId, clientSecret);
var resourceManagementClient = new ArmClient(credentials, subscriptionId);
var resourceGroupName = "testrg";
var subscription = await resourceManagementClient.GetDefaultSubscriptionAsync();
var resourceGroup = (await subscription.GetResourceGroupAsync(resourceGroupName)).Value;
var clusters = resourceGroup.GetKustoClusters();
var clusterName = "mykustocluster";
var clusterData = new KustoClusterData(
    location: AzureLocation.CentralUS,
    sku: new KustoSku(KustoSkuName.StandardE8adsV5, KustoSkuTier.Standard) { Capacity = 5 }
) { Identity = new ManagedServiceIdentity(ManagedServiceIdentityType.SystemAssigned) };
await clusters.CreateOrUpdateAsync(WaitUntil.Completed, clusterName, clusterData);
Create or update your cluster using theIdentityproperty:
Identity
var tenantId = "xxxxxxxx-xxxxx-xxxx-xxxx-xxxxxxxxx"; //Directory (tenant) ID
var clientId = "xxxxxxxx-xxxxx-xxxx-xxxx-xxxxxxxxx"; //Application ID
var clientSecret = "PlaceholderClientSecret"; //Client Secret
var subscriptionId = "xxxxxxxx-xxxxx-xxxx-xxxx-xxxxxxxxx";
var credentials = new ClientSecretCredential(tenantId, clientId, clientSecret);
var resourceManagementClient = new ArmClient(credentials, subscriptionId);
var resourceGroupName = "testrg";
var subscription = await resourceManagementClient.GetDefaultSubscriptionAsync();
var resourceGroup = (await subscription.GetResourceGroupAsync(resourceGroupName)).Value;
var clusters = resourceGroup.GetKustoClusters();
var clusterName = "mykustocluster";
var clusterData = new KustoClusterData(
    location: AzureLocation.CentralUS,
    sku: new KustoSku(KustoSkuName.StandardE8adsV5, KustoSkuTier.Standard) { Capacity = 5 }
) { Identity = new ManagedServiceIdentity(ManagedServiceIdentityType.SystemAssigned) };
await clusters.CreateOrUpdateAsync(WaitUntil.Completed, clusterName, clusterData);
var tenantId = "xxxxxxxx-xxxxx-xxxx-xxxx-xxxxxxxxx"; //Directory (tenant) ID
var clientId = "xxxxxxxx-xxxxx-xxxx-xxxx-xxxxxxxxx"; //Application ID
var clientSecret = "PlaceholderClientSecret"; //Client Secret
var subscriptionId = "xxxxxxxx-xxxxx-xxxx-xxxx-xxxxxxxxx";
var credentials = new ClientSecretCredential(tenantId, clientId, clientSecret);
var resourceManagementClient = new ArmClient(credentials, subscriptionId);
var resourceGroupName = "testrg";
var subscription = await resourceManagementClient.GetDefaultSubscriptionAsync();
var resourceGroup = (await subscription.GetResourceGroupAsync(resourceGroupName)).Value;
var clusters = resourceGroup.GetKustoClusters();
var clusterName = "mykustocluster";
var clusterData = new KustoClusterData(
    location: AzureLocation.CentralUS,
    sku: new KustoSku(KustoSkuName.StandardE8adsV5, KustoSkuTier.Standard) { Capacity = 5 }
) { Identity = new ManagedServiceIdentity(ManagedServiceIdentityType.SystemAssigned) };
await clusters.CreateOrUpdateAsync(WaitUntil.Completed, clusterName, clusterData);
Run the following command to check if your cluster was successfully created or updated with an identity:clusterData = (await clusters.GetAsync(clusterName)).Value.Data;If the result containsProvisioningStatewith theSucceededvalue, then the cluster was created or updated, and should have the following properties:var principalGuid = clusterData.Identity.PrincipalId.GetValueOrDefault();
var tenantGuid = clusterData.Identity.TenantId.GetValueOrDefault();PrincipalIdandTenantIdare replaced with GUIDs. TheTenantIdproperty identifies the Microsoft Entra tenant to which the identity belongs. ThePrincipalIdis a unique identifier for the cluster's new identity. Within Microsoft Entra ID, the service principal has the same name that you gave to your App Service or Azure Functions instance.
Run the following command to check if your cluster was successfully created or updated with an identity:
clusterData = (await clusters.GetAsync(clusterName)).Value.Data;
clusterData = (await clusters.GetAsync(clusterName)).Value.Data;
If the result containsProvisioningStatewith theSucceededvalue, then the cluster was created or updated, and should have the following properties:
ProvisioningState
Succeeded
var principalGuid = clusterData.Identity.PrincipalId.GetValueOrDefault();
var tenantGuid = clusterData.Identity.TenantId.GetValueOrDefault();
var principalGuid = clusterData.Identity.PrincipalId.GetValueOrDefault();
var tenantGuid = clusterData.Identity.TenantId.GetValueOrDefault();
PrincipalIdandTenantIdare replaced with GUIDs. TheTenantIdproperty identifies the Microsoft Entra tenant to which the identity belongs. ThePrincipalIdis a unique identifier for the cluster's new identity. Within Microsoft Entra ID, the service principal has the same name that you gave to your App Service or Azure Functions instance.
PrincipalId
TenantId
TenantId
PrincipalId
Add a system-assigned identity using an Azure Resource Manager template
An Azure Resource Manager template can be used to automate deployment of your Azure resources. To learn more about deploying to Azure Data Explorer, seeCreate an Azure Data Explorer cluster and database by using an Azure Resource Manager template.
Adding the system-assigned type tells Azure to create and manage the identity for your cluster. Any resource of typeMicrosoft.Kusto/clusterscan be created with an identity by including the following property in the resource definition:
Microsoft.Kusto/clusters
{
   "identity": {
      "type": "SystemAssigned"
   }
}
{
   "identity": {
      "type": "SystemAssigned"
   }
}
For example:
{
   "identity": {
      "type": "SystemAssigned",
      "tenantId": "<TENANTID>",
      "principalId": "<PRINCIPALID>"
   }
}
{
   "identity": {
      "type": "SystemAssigned",
      "tenantId": "<TENANTID>",
      "principalId": "<PRINCIPALID>"
   }
}
Note
A cluster can have both system-assigned and user-assigned identities at the same time. Thetypeproperty would beSystemAssigned,UserAssigned
type
SystemAssigned,UserAssigned
When the cluster is created, it has the following additional properties:
{
    "identity": {
        "type": "SystemAssigned",
        "tenantId": "<TENANTID>",
        "principalId": "<PRINCIPALID>"
    }
}
{
    "identity": {
        "type": "SystemAssigned",
        "tenantId": "<TENANTID>",
        "principalId": "<PRINCIPALID>"
    }
}
<TENANTID>and<PRINCIPALID>are replaced with GUIDs. TheTenantIdproperty identifies the Microsoft Entra tenant to which the identity belongs. ThePrincipalIdis a unique identifier for the cluster's new identity. Within Microsoft Entra ID, the service principal has the same name that you gave to your App Service or Azure Functions instance.
<TENANTID>
<PRINCIPALID>
TenantId
PrincipalId
Remove a system-assigned identity
Removing a system-assigned identity will also delete it from Microsoft Entra ID. System-assigned identities are also automatically removed from Microsoft Entra ID when the cluster resource is deleted. A system-assigned identity can be removed by disabling the feature. Remove the system-assigned identity using the Azure portal, C#, or Resource Manager template as detailed below.
Azure portal
C#
Resource Manager template
Remove a system-assigned identity using the Azure portal
Sign in to theAzure portal.
Sign in to theAzure portal.
SelectSettings>Identityin left pane of portal.
SelectSettings>Identityin left pane of portal.
In theIdentitypane >System assignedtab:Move theStatusslider toOff.SelectSaveIn the pop-up window, selectYesto disable the system-assigned identity. TheIdentitypane reverts to same condition as before the addition of the system-assigned identity.
In theIdentitypane >System assignedtab:
Move theStatusslider toOff.
SelectSave
In the pop-up window, selectYesto disable the system-assigned identity. TheIdentitypane reverts to same condition as before the addition of the system-assigned identity.

Remove a system-assigned identity using C#
Run the following to remove the system-assigned identity:
var cluster = (await clusters.GetAsync(clusterName)).Value;
var clusterPatch = new KustoClusterPatch(clusterData.Location)
{
    Identity = new ManagedServiceIdentity(ManagedServiceIdentityType.None)
};
await cluster.UpdateAsync(WaitUntil.Completed, clusterPatch);
var cluster = (await clusters.GetAsync(clusterName)).Value;
var clusterPatch = new KustoClusterPatch(clusterData.Location)
{
    Identity = new ManagedServiceIdentity(ManagedServiceIdentityType.None)
};
await cluster.UpdateAsync(WaitUntil.Completed, clusterPatch);
Remove a system-assigned identity using an Azure Resource Manager template
Run the following to remove the system-assigned identity:
{
   "identity": {
      "type": "None"
   }
}
{
   "identity": {
      "type": "None"
   }
}
Note
If the cluster had both system-assigned and user-assigned identities at the same time, following system-assigned identity removal, thetypeproperty will beUserAssigned
type
UserAssigned
Add a user-assigned identity
Assign a user-assigned managed identity to your cluster. A cluster can have more than one user-assigned identity. Creating a cluster with a user-assigned identity requires an additional property to be set on the cluster. Add the user-assigned identity using the Azure portal, C#, or Resource Manager template as detailed below.
Azure portal
C#
Resource Manager template
Add a user-assigned identity using the Azure portal
Sign in to theAzure portal.
Sign in to theAzure portal.
Create a user-assigned managed identity resource.
Create a user-assigned managed identity resource.
Open an existing Azure Data Explorer cluster.
Open an existing Azure Data Explorer cluster.
SelectSettings>Identityin left pane of portal.
SelectSettings>Identityin left pane of portal.
In theUser assignedtab, selectAdd.
In theUser assignedtab, selectAdd.
Search for the identity you created earlier and select it. SelectAdd.
Search for the identity you created earlier and select it. SelectAdd.

Add a user-assigned identity using C#
To set up a managed identity using the Azure Data Explorer C# client:
Install theAzure Data Explorer NuGet package.
Install theAzure.Identity NuGet packagefor authentication.
Create a Microsoft Entra applicationand service principal that can access resources. You add role assignment at the subscription scope and get the requiredDirectory (tenant) ID,Application ID, andClient Secret.
Directory (tenant) ID
Application ID
Client Secret
Create or update your cluster using theIdentityproperty:var tenantId = "xxxxxxxx-xxxxx-xxxx-xxxx-xxxxxxxxx"; //Directory (tenant) ID
var clientId = "xxxxxxxx-xxxxx-xxxx-xxxx-xxxxxxxxx"; //Application ID
var clientSecret = "PlaceholderClientSecret"; //Client Secret
var subscriptionId = "xxxxxxxx-xxxxx-xxxx-xxxx-xxxxxxxxx";
var credentials = new ClientSecretCredential(tenantId, clientId, clientSecret);
var resourceManagementClient = new ArmClient(credentials, subscriptionId);
var resourceGroupName = "testrg";
var subscription = await resourceManagementClient.GetDefaultSubscriptionAsync();
var resourceGroup = (await subscription.GetResourceGroupAsync(resourceGroupName)).Value;
var clusters = resourceGroup.GetKustoClusters();
var clusterName = "mykustocluster";
var userIdentityResourceId = new ResourceIdentifier($"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/<identityName>");
var clusterData = new KustoClusterData(
    location: AzureLocation.CentralUS,
    sku: new KustoSku(KustoSkuName.StandardE8adsV5, KustoSkuTier.Standard) { Capacity = 5 }
)
{
    Identity = new ManagedServiceIdentity(ManagedServiceIdentityType.UserAssigned)
    {
        UserAssignedIdentities = { { userIdentityResourceId, new UserAssignedIdentity() } }
    }
};
await clusters.CreateOrUpdateAsync(WaitUntil.Completed, clusterName, clusterData);
Create or update your cluster using theIdentityproperty:
Identity
var tenantId = "xxxxxxxx-xxxxx-xxxx-xxxx-xxxxxxxxx"; //Directory (tenant) ID
var clientId = "xxxxxxxx-xxxxx-xxxx-xxxx-xxxxxxxxx"; //Application ID
var clientSecret = "PlaceholderClientSecret"; //Client Secret
var subscriptionId = "xxxxxxxx-xxxxx-xxxx-xxxx-xxxxxxxxx";
var credentials = new ClientSecretCredential(tenantId, clientId, clientSecret);
var resourceManagementClient = new ArmClient(credentials, subscriptionId);
var resourceGroupName = "testrg";
var subscription = await resourceManagementClient.GetDefaultSubscriptionAsync();
var resourceGroup = (await subscription.GetResourceGroupAsync(resourceGroupName)).Value;
var clusters = resourceGroup.GetKustoClusters();
var clusterName = "mykustocluster";
var userIdentityResourceId = new ResourceIdentifier($"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/<identityName>");
var clusterData = new KustoClusterData(
    location: AzureLocation.CentralUS,
    sku: new KustoSku(KustoSkuName.StandardE8adsV5, KustoSkuTier.Standard) { Capacity = 5 }
)
{
    Identity = new ManagedServiceIdentity(ManagedServiceIdentityType.UserAssigned)
    {
        UserAssignedIdentities = { { userIdentityResourceId, new UserAssignedIdentity() } }
    }
};
await clusters.CreateOrUpdateAsync(WaitUntil.Completed, clusterName, clusterData);
var tenantId = "xxxxxxxx-xxxxx-xxxx-xxxx-xxxxxxxxx"; //Directory (tenant) ID
var clientId = "xxxxxxxx-xxxxx-xxxx-xxxx-xxxxxxxxx"; //Application ID
var clientSecret = "PlaceholderClientSecret"; //Client Secret
var subscriptionId = "xxxxxxxx-xxxxx-xxxx-xxxx-xxxxxxxxx";
var credentials = new ClientSecretCredential(tenantId, clientId, clientSecret);
var resourceManagementClient = new ArmClient(credentials, subscriptionId);
var resourceGroupName = "testrg";
var subscription = await resourceManagementClient.GetDefaultSubscriptionAsync();
var resourceGroup = (await subscription.GetResourceGroupAsync(resourceGroupName)).Value;
var clusters = resourceGroup.GetKustoClusters();
var clusterName = "mykustocluster";
var userIdentityResourceId = new ResourceIdentifier($"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/<identityName>");
var clusterData = new KustoClusterData(
    location: AzureLocation.CentralUS,
    sku: new KustoSku(KustoSkuName.StandardE8adsV5, KustoSkuTier.Standard) { Capacity = 5 }
)
{
    Identity = new ManagedServiceIdentity(ManagedServiceIdentityType.UserAssigned)
    {
        UserAssignedIdentities = { { userIdentityResourceId, new UserAssignedIdentity() } }
    }
};
await clusters.CreateOrUpdateAsync(WaitUntil.Completed, clusterName, clusterData);
Run the following command to check if your cluster was successfully created or updated with an identity:clusterData = (await clusters.GetAsync(clusterName)).Value.Data;If the result containsProvisioningStatewith theSucceededvalue, then the cluster was created or updated, and should have the following properties:var userIdentity = clusterData.Identity.UserAssignedIdentities[userIdentityResourceId];
var principalGuid = userIdentity.PrincipalId.GetValueOrDefault();
var clientGuid = userIdentity.ClientId.GetValueOrDefault();ThePrincipalIdis a unique identifier for the identity that's used for Microsoft Entra administration. TheClientIdis a unique identifier for the application's new identity that's used for specifying which identity to use during runtime calls.
Run the following command to check if your cluster was successfully created or updated with an identity:
clusterData = (await clusters.GetAsync(clusterName)).Value.Data;
clusterData = (await clusters.GetAsync(clusterName)).Value.Data;
If the result containsProvisioningStatewith theSucceededvalue, then the cluster was created or updated, and should have the following properties:
ProvisioningState
Succeeded
var userIdentity = clusterData.Identity.UserAssignedIdentities[userIdentityResourceId];
var principalGuid = userIdentity.PrincipalId.GetValueOrDefault();
var clientGuid = userIdentity.ClientId.GetValueOrDefault();
var userIdentity = clusterData.Identity.UserAssignedIdentities[userIdentityResourceId];
var principalGuid = userIdentity.PrincipalId.GetValueOrDefault();
var clientGuid = userIdentity.ClientId.GetValueOrDefault();
ThePrincipalIdis a unique identifier for the identity that's used for Microsoft Entra administration. TheClientIdis a unique identifier for the application's new identity that's used for specifying which identity to use during runtime calls.
PrincipalId
ClientId
Add a user-assigned identity using an Azure Resource Manager template
An Azure Resource Manager template can be used to automate deployment of your Azure resources. To learn more about deploying to Azure Data Explorer, seeCreate an Azure Data Explorer cluster and database by using an Azure Resource Manager template.
Any resource of typeMicrosoft.Kusto/clusterscan be created with a user-assigned identity by including the following property in the resource definition, replacing<RESOURCEID>with the resource ID of the desired identity:
Microsoft.Kusto/clusters
<RESOURCEID>
{
   "identity": {
      "type": "UserAssigned",
      "userAssignedIdentities": {
         "<RESOURCEID>": {}
      }
   }
}
{
   "identity": {
      "type": "UserAssigned",
      "userAssignedIdentities": {
         "<RESOURCEID>": {}
      }
   }
}
For example:
{
    "apiVersion": "2019-09-07",
    "type": "Microsoft.Kusto/clusters",
    "name": "[variables('clusterName')]",
    "location": "[resourceGroup().location]",
    "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
            "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('identityName'))]": {}
        }
    },
    "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('identityName'))]"
    ]
}
{
    "apiVersion": "2019-09-07",
    "type": "Microsoft.Kusto/clusters",
    "name": "[variables('clusterName')]",
    "location": "[resourceGroup().location]",
    "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
            "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('identityName'))]": {}
        }
    },
    "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('identityName'))]"
    ]
}
When the cluster is created, it has the following additional properties:
{
   "identity": {
      "type": "UserAssigned",
      "userAssignedIdentities": {
         "<RESOURCEID>": {
            "principalId": "<PRINCIPALID>",
            "clientId": "<CLIENTID>"
         }
      }
   }
}
{
   "identity": {
      "type": "UserAssigned",
      "userAssignedIdentities": {
         "<RESOURCEID>": {
            "principalId": "<PRINCIPALID>",
            "clientId": "<CLIENTID>"
         }
      }
   }
}
ThePrincipalIdis a unique identifier for the identity that's used for Microsoft Entra administration. TheClientIdis a unique identifier for the application's new identity that's used for specifying which identity to use during runtime calls.
PrincipalId
ClientId
Note
A cluster can have both system-assigned and user-assigned identities at the same time. In this case, thetypeproperty would beSystemAssigned,UserAssigned.
type
SystemAssigned,UserAssigned
Remove a user-assigned managed identity from a cluster
Remove the user-assigned identity using the Azure portal, C#, or Resource Manager template as detailed below.
Azure portal
C#
Resource Manager template
Remove a user-assigned managed identity using the Azure portal
Sign in to theAzure portal.
Sign in to theAzure portal.
SelectSettings>Identityin left pane of portal.
SelectSettings>Identityin left pane of portal.
Select theUser assignedtab.
Select theUser assignedtab.
Search for the identity you created earlier and select it. SelectRemove.
Search for the identity you created earlier and select it. SelectRemove.

In the pop-up window, selectYesto remove the user-assigned identity. TheIdentitypane reverts to same condition as before the addition of the user-assigned identity.
In the pop-up window, selectYesto remove the user-assigned identity. TheIdentitypane reverts to same condition as before the addition of the user-assigned identity.
Remove a user-assigned identity using C#
Run the following to remove the user-assigned identity:
var cluster = (await clusters.GetAsync(clusterName)).Value;
var clusterUpdate = new KustoClusterPatch(clusterData.Location)
{
    Identity = new ManagedServiceIdentity(ManagedServiceIdentityType.UserAssigned)
    {
        UserAssignedIdentities = { { userIdentityResourceId, null } }
    }
};
await cluster.UpdateAsync(WaitUntil.Completed, clusterUpdate);
var cluster = (await clusters.GetAsync(clusterName)).Value;
var clusterUpdate = new KustoClusterPatch(clusterData.Location)
{
    Identity = new ManagedServiceIdentity(ManagedServiceIdentityType.UserAssigned)
    {
        UserAssignedIdentities = { { userIdentityResourceId, null } }
    }
};
await cluster.UpdateAsync(WaitUntil.Completed, clusterUpdate);
Remove a user-assigned identity using an Azure Resource Manager template
Run the following to remove the user-assigned identity:
{
   "identity": {
      "type": "UserAssigned",
      "userAssignedIdentities": {
         "<RESOURCEID>": null
      }
   }
}
{
   "identity": {
      "type": "UserAssigned",
      "userAssignedIdentities": {
         "<RESOURCEID>": null
      }
   }
}
Note
To remove identities, set their values to null. All other existing identities won't be affected.
To remove all user-assigned identities thetypeproperty would beNone,
type
None
If the cluster had both system-assigned and user-assigned identities at the same time, thetypeproperty would beSystemAssigned,UserAssignedwith the identities to remove, orSystemAssignedto remove all user-assigned identities.
type
SystemAssigned,UserAssigned
SystemAssigned
Related content
Secure Azure Data Explorer clusters in Azure
Secure your cluster using Disk Encryptionby enabling encryption at rest.
Configure customer-managed-keys using C#
Configure customer-managed-keys using the Azure Resource Manager template
Feedback
Was this page helpful?
Additional resources