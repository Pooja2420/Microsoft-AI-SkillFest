Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Backends in API Management
Article
2025-04-01
14 contributors
In this article
APPLIES TO: All API Management tiers
Abackend(orAPI backend) in API Management is an HTTP service that implements your front-end API and its operations.
When importing certain APIs, API Management configures the API backend automatically. For example, API Management configures the backend web service when importing:
AnOpenAPI specification.
ASOAP API.
Azure resources, such as anAzure OpenAI API, an HTTP-triggeredAzure Function App, or aLogic App.
API Management also supports using other Azure resources as an API backend, such as:
AService Fabric cluster.
A custom service.
Benefits of backends
API Management supports backend entities so you can manage the backend services of your API. A backend entity encapsulates information about the backend service, promoting reusability across APIs and improved governance.
Use backends for one or more of the following:
Authorizeâ¯the credentials of requests toâ¯theâ¯backendâ¯service
Take advantage of API Management functionality to maintain secrets in Azure Key Vault ifnamed valuesare configured for header or query parameter authentication.
Define circuit breaker rules to protect your backend from too many requests
Route or load-balance requests to multiple backends
Configure and manage backend entities in the Azure portal, or using Azure APIs or tools.
Create a backend
You can create a backend in the Azure portal, or using Azure APIs or tools.
To create a backend in the portal:
Sign into theportaland go to your API Management instance.
In the left menu, selectAPIs>Backends>+ Create new backend.
On theBackendpage, do the following:Enter aNamefor the backend and optionalDescription.Select aBackend hosting type, for example,Azure resourcefor an Azure resource such as a Function App or Logic App,Custom URLfor a custom service, or aService Fabriccluster.InRuntime URL, enter the URL of the backend service that API requests are forwarded to.UnderAdvanced, optionally disable certificate chain or certificate name validation for the backend.UnderAdd this backend service to a backend pool, optionally select or create aload-balanced poolfor the backend.UnderCircuit breaker rule, optionally configure acircuit breakerfor the backend.UnderAuthorization credentials, optionally configure credentials to authorize access to the backend. Options include a request header, query parameter,client certificate, or system-assigned or user-assignedmanaged identityconfigured in the API Management instance.SelectCreate.
Enter aNamefor the backend and optionalDescription.
Select aBackend hosting type, for example,Azure resourcefor an Azure resource such as a Function App or Logic App,Custom URLfor a custom service, or aService Fabriccluster.
InRuntime URL, enter the URL of the backend service that API requests are forwarded to.
UnderAdvanced, optionally disable certificate chain or certificate name validation for the backend.
UnderAdd this backend service to a backend pool, optionally select or create aload-balanced poolfor the backend.
UnderCircuit breaker rule, optionally configure acircuit breakerfor the backend.
UnderAuthorization credentials, optionally configure credentials to authorize access to the backend. Options include a request header, query parameter,client certificate, or system-assigned or user-assignedmanaged identityconfigured in the API Management instance.
SelectCreate.
After creating a backend, you can update the backend settings at any time. For example, add a circuit breaker rule, change the runtime URL, or add authorization credentials.
Configure managed identity for authorization credentials
You can use a system-assigned or user-assignedmanaged identityconfigured in the API Management instance to authorize access to the backend service. To configure a managed identity for authorization credentials, do the following:
In theAuthorization credentialssection of the backend configuration, select theManaged identitytab, and selectEnable.
In theAuthorization credentialssection of the backend configuration, select theManaged identitytab, and selectEnable.
InClient identity, select eitherSystem assigned identityor a user-assigned identity that is configured in your instance.
InClient identity, select eitherSystem assigned identityor a user-assigned identity that is configured in your instance.
InResource ID, enter a target Azure service or the application ID of your own Microsoft Entra application representing the backend. Example:https://cognitiveservices.azure.comfor Azure OpenAI service.For more examples, see theauthentication-managed-identitypolicy reference.
InResource ID, enter a target Azure service or the application ID of your own Microsoft Entra application representing the backend. Example:https://cognitiveservices.azure.comfor Azure OpenAI service.
https://cognitiveservices.azure.com
For more examples, see theauthentication-managed-identitypolicy reference.
SelectCreate.
SelectCreate.
Note
Also assign the managed identity the appropriate permissions or an RBAC role to access the backend service. For example, if the backend is an Azure OpenAI service, you might assign the managed identity theCognitive Services Userrole.
Cognitive Services User
Reference backend using set-backend-service policy
After creating a backend, youâ¯canâ¯reference the backend identifier (name) in your APIs. Use theset-backend-servicepolicy to direct an incoming API request to the backend. If you already configured a backend web service for an API, you can use theset-backend-servicepolicy to redirect the request to a backend entity instead. For example:
set-backend-service
set-backend-service
<policies>
    <inbound>
        <base />
        <set-backend-service backend-id="myBackend" />
    </inbound>
    [...]
<policies/>
<policies>
    <inbound>
        <base />
        <set-backend-service backend-id="myBackend" />
    </inbound>
    [...]
<policies/>
Note
Alternatively, you can usebase-url. Usually, the format ishttps://backend.com/api. Avoid adding a slash at the end to prevent misconfigurations. Typically, thebase-urland HTTP(S) endpoint value in the backend should match to enable seamless integration between frontend and backend. Note that API Management instances append the backend service name to thebase-url.
base-url
https://backend.com/api
base-url
base-url
You can use conditional logic with theset-backend-servicepolicy to change the effective backend based on location, gateway that was called, or other expressions.
set-backend-service
For example, here is a policy to route traffic to another backend based on the gateway that was called:
<policies>
    <inbound>
        <base />
        <choose>
            <when condition="@(context.Deployment.Gateway.Id == "factory-gateway")">
                <set-backend-service backend-id="backend-on-prem" />
            </when>
            <when condition="@(context.Deployment.Gateway.IsManaged == false)">
                <set-backend-service backend-id="self-hosted-backend" />
            </when>
            <otherwise />
        </choose>
    </inbound>
    [...]
<policies/>
<policies>
    <inbound>
        <base />
        <choose>
            <when condition="@(context.Deployment.Gateway.Id == "factory-gateway")">
                <set-backend-service backend-id="backend-on-prem" />
            </when>
            <when condition="@(context.Deployment.Gateway.IsManaged == false)">
                <set-backend-service backend-id="self-hosted-backend" />
            </when>
            <otherwise />
        </choose>
    </inbound>
    [...]
<policies/>
Circuit breaker
API Management exposes acircuit breakerproperty in the backend resource to protect a backend service from being overwhelmed by too many requests.
The circuit breaker property defines rules to trip the circuit breaker, such as the number or percentage of failure conditions during a defined time interval and a range of status codes that indicate failures.
When the circuit breaker trips, API Management stops sending requests to the backend service for a defined time, and returns a 503 Service Unavailable response to the client.
After the configured trip duration, the circuit resets and traffic resumes to the backend.
The backend circuit breaker is an implementation of thecircuit breaker patternto allow the backend to recover from overload situations. It augments generalrate-limitingandconcurrency-limitingpolicies that you can implement to protect the API Management gateway and your backend services.
Note
Currently, the backend circuit breaker isn't supported in theConsumptiontier of API Management.
Because of the distributed nature of the API Management architecture, circuit breaker tripping rules are approximate. Different instances of the gateway do not synchronize and will apply circuit breaker rules based on the information on the same instance.
Currently, only one rule can be configured for a backend circuit breaker.
Example
Use the Azure portal, API ManagementREST API, or a Bicep or ARM template to configure a circuit breaker in a backend. In the following example, the circuit breaker inmyBackendin the API Management instancemyAPIMtrips when there are three or more5xxstatus codes indicating server errors in 1 hour.
5xx
The circuit breaker in this example resets after 1 hour. If aRetry-Afterheader is present in the response, the circuit breaker accepts the value and waits for the specified time before sending requests to the backend again.
Retry-After
Portal
Bicep
ARM
In theAzure portal, go to your API Management instance.
In the left menu, selectAPIs>Backends> your backend.
In the backend page, selectSettings>Circuit breaker settings>Add new.
In theCreate new circuit breakerpage, configure the rule:Rule name: Enter a name for the rule, such asmyBackend.Failure count: Enter3.Failure interval: Leave the default value of1 hour.Failure status code range: Select500 - 599.Trip duration: Leave the default value of1 hour.Check 'Retry-After' header in HTTP response: SelectTrue (Accept).
Rule name: Enter a name for the rule, such asmyBackend.
Failure count: Enter3.
Failure interval: Leave the default value of1 hour.
Failure status code range: Select500 - 599.
Trip duration: Leave the default value of1 hour.
Check 'Retry-After' header in HTTP response: SelectTrue (Accept).
Include a snippet similar to the following in your Bicep template for a backend resource with a circuit breaker:
resource symbolicname 'Microsoft.ApiManagement/service/backends@2023-09-01-preview' = {
  name: 'myAPIM/myBackend'
  properties: {
    url: 'https://mybackend.com'
    protocol: 'http'
    circuitBreaker: {
      rules: [
        {
          failureCondition: {
            count: 3
            errorReasons: [
              'Server errors'
            ]
            interval: 'PT1H' 
            statusCodeRanges: [
              {
                min: 500
                max: 599
              }
            ]
          }
          name: 'myBreakerRule'
          tripDuration: 'PT1H'  
          acceptRetryAfter: true
        }
      ]
    }
   }
 }
resource symbolicname 'Microsoft.ApiManagement/service/backends@2023-09-01-preview' = {
  name: 'myAPIM/myBackend'
  properties: {
    url: 'https://mybackend.com'
    protocol: 'http'
    circuitBreaker: {
      rules: [
        {
          failureCondition: {
            count: 3
            errorReasons: [
              'Server errors'
            ]
            interval: 'PT1H' 
            statusCodeRanges: [
              {
                min: 500
                max: 599
              }
            ]
          }
          name: 'myBreakerRule'
          tripDuration: 'PT1H'  
          acceptRetryAfter: true
        }
      ]
    }
   }
 }
Include a JSON snippet similar to the following in your ARM template for a backend resource with a circuit breaker:
{
  "type": "Microsoft.ApiManagement/service/backends",
  "apiVersion": "2023-09-01-preview",
  "name": "myAPIM/myBackend",
  "properties": {
    "url": "https://mybackend.com",
    "protocol": "http",
    "circuitBreaker": {
      "rules": [
        {
          "failureCondition": {
            "count": "3",
            "errorReasons": [ "Server errors" ],
            "interval": "PT1H",
            "statusCodeRanges": [
              {
                "min": "500",
                "max": "599"
              }
            ]
          },
          "name": "myBreakerRule",
          "tripDuration": "PT1H",
          "acceptRetryAfter": true
        }
      ]
    }
  }
}
{
  "type": "Microsoft.ApiManagement/service/backends",
  "apiVersion": "2023-09-01-preview",
  "name": "myAPIM/myBackend",
  "properties": {
    "url": "https://mybackend.com",
    "protocol": "http",
    "circuitBreaker": {
      "rules": [
        {
          "failureCondition": {
            "count": "3",
            "errorReasons": [ "Server errors" ],
            "interval": "PT1H",
            "statusCodeRanges": [
              {
                "min": "500",
                "max": "599"
              }
            ]
          },
          "name": "myBreakerRule",
          "tripDuration": "PT1H",
          "acceptRetryAfter": true
        }
      ]
    }
  }
}
Load-balanced pool
API Management supports backendpools, when you want to implement multiple backends for an API and load-balance requests across those backends. A pool is a collection of backends that are treated as a single entity for load balancing.
Use a backend pool for scenarios such as the following:
Spread the load to multiple backends, which may have individual backend circuit breakers.
Shift the load from one set of backends to another for upgrade (blue-green deployment).
Note
You can include up to 30 backends in a pool.
Because of the distributed nature of the API Management architecture, backend load balancing is approximate. Different instances of the gateway do not synchronize and will load balance based on the information on the same instance.
Load balancing options
API Management supports the following load balancing options for backend pools:
Round-robin: By default, requests are distributed evenly across the backends in the pool.
Weighted: Weights are assigned to the backends in the pool, and requests are distributed across the backends based on the relative weight assigned to each backend. Use this option for scenarios such as conducting a blue-green deployment.
Priority-based: Backends are organized in priority groups, and requests are sent to the backends in order of the priority groups. Within a priority group, requests are distributed either evenly across the backends, or (if assigned) according to the relative weight assigned to each backend.
Note
Backends in lower priority groups will only be used when all backends in higher priority groups are unavailable because circuit breaker rules are tripped.
Example
Use the portal, API ManagementREST API, or a Bicep or ARM template to configure a backend pool. In the following example, the backendmyBackendPoolin the API Management instancemyAPIMis configured with a backend pool. Example backends in the pool are namedbackend-1andbackend-2. Both backends are in the highest priority group; within the group,backend-1has a greater weight thanbackend-2.
Portal
Bicep
ARM
In theAzure portal, go to your API Management instance.
In the left menu, selectAPIs>Backends> your backend.
In theBackendspage, select theLoad balancertab.
Select+ Create new pool.
In theCreate new load-balanced poolpage, do the following:Name: Enter a name for the pool such asmyBackendPool.Description: Optionally enter a description.Add backends to pool: Select one or more backends to add to the pool.Backend weight and priority: SelectCustomize weight and priorityto configure the weight and priority of each backend in the pool. For example, if you added two backends namedbackend-1andbackend-2, set the weight ofbackend-1to 3 and the weight ofbackend-2to 1, and set the priority of both backends to 1.SelectCreate.
Name: Enter a name for the pool such asmyBackendPool.
Description: Optionally enter a description.
Add backends to pool: Select one or more backends to add to the pool.
Backend weight and priority: SelectCustomize weight and priorityto configure the weight and priority of each backend in the pool. For example, if you added two backends namedbackend-1andbackend-2, set the weight ofbackend-1to 3 and the weight ofbackend-2to 1, and set the priority of both backends to 1.
SelectCreate.
Include a snippet similar to the following in your Bicep template for a load-balanced pool. Set thetypeproperty of the backend entity toPooland specify the backends in the pool:
type
Pool
resource symbolicname 'Microsoft.ApiManagement/service/backends@2023-09-01-preview' = {
  name: 'myAPIM/myBackendPool'
  properties: {
    description: 'Load balancer for multiple backends'
    type: 'Pool'
    pool: {
      services: [
        {
          id: '/subscriptions/<subscriptionID>/resourceGroups/<resourceGroupName>/providers/Microsoft.ApiManagement/service/<APIManagementName>/backends/backend-1'
          priority: 1
          weight: 3
        }
        {
          id: '/subscriptions/<subscriptionID>/resourceGroups/<resourceGroupName>/providers/Microsoft.ApiManagement/service/<APIManagementName>/backends/backend-2'
          priority: 1
          weight: 1
        }
      ]
    }
  }
}
resource symbolicname 'Microsoft.ApiManagement/service/backends@2023-09-01-preview' = {
  name: 'myAPIM/myBackendPool'
  properties: {
    description: 'Load balancer for multiple backends'
    type: 'Pool'
    pool: {
      services: [
        {
          id: '/subscriptions/<subscriptionID>/resourceGroups/<resourceGroupName>/providers/Microsoft.ApiManagement/service/<APIManagementName>/backends/backend-1'
          priority: 1
          weight: 3
        }
        {
          id: '/subscriptions/<subscriptionID>/resourceGroups/<resourceGroupName>/providers/Microsoft.ApiManagement/service/<APIManagementName>/backends/backend-2'
          priority: 1
          weight: 1
        }
      ]
    }
  }
}
Include a JSON snippet similar to the following in your ARM template for a load-balanced pool. Set thetypeproperty of the backend resource toPooland specify the backends in the pool:
type
Pool
{
  "type": "Microsoft.ApiManagement/service/backends",
  "apiVersion": "2023-09-01-preview",
  "name": "myAPIM/myBackendPool",
  "properties": {
    "description": "Load balancer for multiple backends",
    "type": "Pool",
    "pool": {
      "services": [
        {
          "id": "/subscriptions/<subscriptionID>/resourceGroups/<resourceGroupName>/providers/Microsoft.ApiManagement/service/<APIManagementName>/backends/backend-1",
          "priority": "1", 
â¯ â¯ â¯ â¯ â¯ "weight": "3" 
        },
        {
          "id": "/subscriptions/<subscriptionID>/resourceGroups/<resourceGroupName>/providers/Microsoft.ApiManagement/service/<APIManagementName>/backends/backend-2",
          "priority": "1",
â¯ â¯ â¯ â¯ â¯ "weight": "1"    
        }
      ]
    }
  }
}
{
  "type": "Microsoft.ApiManagement/service/backends",
  "apiVersion": "2023-09-01-preview",
  "name": "myAPIM/myBackendPool",
  "properties": {
    "description": "Load balancer for multiple backends",
    "type": "Pool",
    "pool": {
      "services": [
        {
          "id": "/subscriptions/<subscriptionID>/resourceGroups/<resourceGroupName>/providers/Microsoft.ApiManagement/service/<APIManagementName>/backends/backend-1",
          "priority": "1", 
â¯ â¯ â¯ â¯ â¯ "weight": "3" 
        },
        {
          "id": "/subscriptions/<subscriptionID>/resourceGroups/<resourceGroupName>/providers/Microsoft.ApiManagement/service/<APIManagementName>/backends/backend-2",
          "priority": "1",
â¯ â¯ â¯ â¯ â¯ "weight": "1"    
        }
      ]
    }
  }
}
Limitations
ForDeveloperandPremiumtiers, an API Management instance deployed in aninternal virtual networkcan throw HTTP 500BackendConnectionFailureerrors when the gateway endpoint URL and backend URL are the same. If you encounter this limitation, follow the instructions in theSelf-Chained API Management request limitation in internal virtual network modearticle in the Tech Community blog.
BackendConnectionFailure
Currently, only one rule can be configured for a backend circuit breaker.
Related content
Blog:Using Azure API Management circuit breaker and load balancing with Azure OpenAI Service
Set up aService Fabric backendusing the Azure portal.
QuickstartCreate a Backend Pool in Azure API Management using Bicep for load balance OpenAI requests
Feedback
Was this page helpful?
Additional resources