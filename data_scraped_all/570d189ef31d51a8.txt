Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Secure your cluster using pod security policies in Azure Kubernetes Service (AKS) (preview)
Article
2024-08-01
16 contributors
In this article
Important
The pod security policy feature was deprecated on 1st August 2023 and removed from AKS versions1.25and higher.
We recommend you migrate topod security admission controllerorAzure policyto stay within Azure support. Pod Security Admission is a built-in policy solution for single cluster implementations. If you are looking for enterprise-grade policy, then Azure policy is a better choice.
Before you begin
This article assumes you have an existing AKS cluster. If you need an AKS cluster, create one usingAzure CLI,Azure PowerShell, or theAzure portal.
You need the Azure CLI version 2.0.61 or later installed and configured. Runaz --versionto find the version. If you need to install or upgrade, seeinstall Azure CLI.
az --version
Install theaks-previewAzure CLI extension
aks-preview
Important
AKS preview features are available on a self-service, opt-in basis. Previews are provided "as is" and "as available," and they're excluded from the service-level agreements and limited warranty. AKS previews are partially covered by customer support on a best-effort basis. As such, these features aren't meant for production use. For more information, see the following support articles:
AKS support policies
Azure support FAQ
Install the aks-preview extension using theaz extension addcommand.az extension add --name aks-preview
Install the aks-preview extension using theaz extension addcommand.
az extension add
az extension add --name aks-preview
az extension add --name aks-preview
Update to the latest version of the extension using theaz extension updatecommand.az extension update --name aks-preview
Update to the latest version of the extension using theaz extension updatecommand.
az extension update
az extension update --name aks-preview
az extension update --name aks-preview
Register thePodSecurityPolicyPreviewfeature flag
PodSecurityPolicyPreview
Register thePodSecurityPolicyPreviewfeature flag using theaz feature registercommand.az feature register --namespace "Microsoft.ContainerService" --name "PodSecurityPolicyPreview"It takes a few minutes for the status to showRegistered.
Register thePodSecurityPolicyPreviewfeature flag using theaz feature registercommand.
PodSecurityPolicyPreview
az feature register
az feature register --namespace "Microsoft.ContainerService" --name "PodSecurityPolicyPreview"
az feature register --namespace "Microsoft.ContainerService" --name "PodSecurityPolicyPreview"
It takes a few minutes for the status to showRegistered.
Verify the registration status using theaz feature showcommand.az feature show --namespace "Microsoft.ContainerService" --name "PodSecurityPolicyPreview"
Verify the registration status using theaz feature showcommand.
az feature show
az feature show --namespace "Microsoft.ContainerService" --name "PodSecurityPolicyPreview"
az feature show --namespace "Microsoft.ContainerService" --name "PodSecurityPolicyPreview"
When the status reflectsRegistered, refresh the registration of theMicrosoft.ContainerServiceresource provider using theaz provider registercommand.az provider register --namespace Microsoft.ContainerService
When the status reflectsRegistered, refresh the registration of theMicrosoft.ContainerServiceresource provider using theaz provider registercommand.
az provider register
az provider register --namespace Microsoft.ContainerService
az provider register --namespace Microsoft.ContainerService
Overview of pod security policies
Kubernetes clusters use admission controllers to intercept requests to the API server when a resource is going to be created. The admission controller can thenvalidatethe resource request against a set of rules, ormutatethe resource to change deployment parameters.
PodSecurityPolicyis an admission controller that validates a pod specification meets your defined requirements. These requirements may limit the use of privileged containers, access to certain types of storage, or the user or group the container can run as. When you try to deploy a resource where the pod specifications don't meet the requirements outlined in the pod security policy, the request is denied. This ability to control what pods can be scheduled in the AKS cluster prevents some possible security vulnerabilities or privilege escalations.
PodSecurityPolicy
When you enable pod security policy in an AKS cluster, some default policies are applied. These policies provide an out-of-the-box experience to define what pods can be scheduled. However, you might run into problems deploying your pods until you define your own policies. The recommended approach is to:
Create an AKS cluster.
Define your own pod security policies.
Enable the pod security policy feature.
Behavior changes between pod security policy and Azure Policy
kubectl get psp
kubectl get constrainttemplate
Enable pod security policy on an AKS cluster
Note
For real-world use, don't enable the pod security policy until you define your own custom policies. In this article, we enable pod security policy as the first step to see how the default policies limit pod deployments.
Enable the pod security policy using theaz aks updatecommand.az aks update \
    --resource-group myResourceGroup \
    --name myAKSCluster \
    --enable-pod-security-policy
Enable the pod security policy using theaz aks updatecommand.
az aks update
az aks update \
    --resource-group myResourceGroup \
    --name myAKSCluster \
    --enable-pod-security-policy
az aks update \
    --resource-group myResourceGroup \
    --name myAKSCluster \
    --enable-pod-security-policy
Default AKS policies
When you enable pod security policy, AKS creates one default policy namedprivileged. Don't edit or remove the default policy. Instead, create your own policies that define the settings you want to control. Let's first look at what these default policies are how they impact pod deployments.
View the available policies using thekubectl get pspcommand.kubectl get pspYour output will look similar to the following example output:NAME         PRIV    CAPS   SELINUX    RUNASUSER          FSGROUP     SUPGROUP    READONLYROOTFS   VOLUMES
privileged   true    *      RunAsAny   RunAsAny           RunAsAny    RunAsAny    false            *     configMap,emptyDir,projected,secret,downwardAPI,persistentVolumeClaimTheprivilegedpod security policy is applied to any authenticated user in the AKS cluster. This assignment is controlled byClusterRolesandClusterRoleBindings.
View the available policies using thekubectl get pspcommand.
kubectl get psp
kubectl get psp
kubectl get psp
Your output will look similar to the following example output:
NAME         PRIV    CAPS   SELINUX    RUNASUSER          FSGROUP     SUPGROUP    READONLYROOTFS   VOLUMES
privileged   true    *      RunAsAny   RunAsAny           RunAsAny    RunAsAny    false            *     configMap,emptyDir,projected,secret,downwardAPI,persistentVolumeClaim
NAME         PRIV    CAPS   SELINUX    RUNASUSER          FSGROUP     SUPGROUP    READONLYROOTFS   VOLUMES
privileged   true    *      RunAsAny   RunAsAny           RunAsAny    RunAsAny    false            *     configMap,emptyDir,projected,secret,downwardAPI,persistentVolumeClaim
Theprivilegedpod security policy is applied to any authenticated user in the AKS cluster. This assignment is controlled byClusterRolesandClusterRoleBindings.
ClusterRoles
ClusterRoleBindings
Search for thedefault:privileged:binding in thekube-systemnamespace using thekubectl get rolebindingscommand.kubectl get rolebindings default:privileged -n kube-system -o yamlThe following condensed example output shows thepsp:privilegedClusterRoleis assigned to anysystem:authenticatedusers. This ability provides a basic level of privilege without your own policies being defined.apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  [...]
  name: default:privileged
  [...]
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: psp:privileged
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: Group
  name: system:masters
Search for thedefault:privileged:binding in thekube-systemnamespace using thekubectl get rolebindingscommand.
kubectl get rolebindings
kubectl get rolebindings default:privileged -n kube-system -o yaml
kubectl get rolebindings default:privileged -n kube-system -o yaml
The following condensed example output shows thepsp:privilegedClusterRoleis assigned to anysystem:authenticatedusers. This ability provides a basic level of privilege without your own policies being defined.
ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  [...]
  name: default:privileged
  [...]
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: psp:privileged
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: Group
  name: system:masters
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  [...]
  name: default:privileged
  [...]
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: psp:privileged
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: Group
  name: system:masters
It's important to understand how these default policies interact with user requests to schedule pods before you start to create your own pod security policies. In the next few sections, we schedule some pods to see the default policies in action.
Create a test user in an AKS cluster
When you use theaz aks get-credentialscommand, theadmincredentials for the AKS cluster are added to yourkubectlconfig by default. The admin user bypasses the enforcement of pod security policies. If you use Microsoft Entra integration for your AKS clusters, you can sign in with the credentials of a non-admin user to see the enforcement of policies in action.
az aks get-credentials
kubectl
Create a sample namespace namedpsp-aksfor test resources using thekubectl create namespacecommand.kubectl create namespace psp-aks
Create a sample namespace namedpsp-aksfor test resources using thekubectl create namespacecommand.
kubectl create namespace
kubectl create namespace psp-aks
kubectl create namespace psp-aks
Create a service account namednonadmin-userusing thekubectl create serviceaccountcommand.kubectl create serviceaccount --namespace psp-aks nonadmin-user
Create a service account namednonadmin-userusing thekubectl create serviceaccountcommand.
kubectl create serviceaccount
kubectl create serviceaccount --namespace psp-aks nonadmin-user
kubectl create serviceaccount --namespace psp-aks nonadmin-user
Create a RoleBinding for thenonadmin-userto perform basic actions in the namespace using thekubectl create rolebindingcommand.kubectl create rolebinding \
    --namespace psp-aks \
    psp-aks-editor \
    --clusterrole=edit \
    --serviceaccount=psp-aks:nonadmin-user
Create a RoleBinding for thenonadmin-userto perform basic actions in the namespace using thekubectl create rolebindingcommand.
kubectl create rolebinding
kubectl create rolebinding \
    --namespace psp-aks \
    psp-aks-editor \
    --clusterrole=edit \
    --serviceaccount=psp-aks:nonadmin-user
kubectl create rolebinding \
    --namespace psp-aks \
    psp-aks-editor \
    --clusterrole=edit \
    --serviceaccount=psp-aks:nonadmin-user
Create alias commands for admin and non-admin user
When usingkubectl, you can highlight the differences between the regular admin user and the non-admin user by creating two command-line aliases:
kubectl
Thekubectl-adminalias for the regular admin user, which is scoped to thepsp-aksnamespace.
Thekubectl-nonadminuseralias for thenonadmin-usercreated in the previous step, which is scoped to thepsp-aksnamespace.
Create the two aliases using the following commands.alias kubectl-admin='kubectl --namespace psp-aks'
alias kubectl-nonadminuser='kubectl --as=system:serviceaccount:psp-aks:nonadmin-user --namespace psp-aks'
Create the two aliases using the following commands.
alias kubectl-admin='kubectl --namespace psp-aks'
alias kubectl-nonadminuser='kubectl --as=system:serviceaccount:psp-aks:nonadmin-user --namespace psp-aks'
alias kubectl-admin='kubectl --namespace psp-aks'
alias kubectl-nonadminuser='kubectl --as=system:serviceaccount:psp-aks:nonadmin-user --namespace psp-aks'
Test the creation of a privileged pod
Let's test what happens when you schedule a pod with the security context ofprivileged: true. This security context escalates the pod's privileges. The defaultprivilegeAKS security policy should deny this request.
privileged: true
Create a file namednginx-privileged.yamland paste in the contents of following YAML manifest.apiVersion: v1
kind: Pod
metadata:
  name: nginx-privileged
spec:
  containers:
    - name: nginx-privileged
      image: mcr.microsoft.com/oss/nginx/nginx:1.14.2-alpine
      securityContext:
        privileged: true
Create a file namednginx-privileged.yamland paste in the contents of following YAML manifest.
nginx-privileged.yaml
apiVersion: v1
kind: Pod
metadata:
  name: nginx-privileged
spec:
  containers:
    - name: nginx-privileged
      image: mcr.microsoft.com/oss/nginx/nginx:1.14.2-alpine
      securityContext:
        privileged: true
apiVersion: v1
kind: Pod
metadata:
  name: nginx-privileged
spec:
  containers:
    - name: nginx-privileged
      image: mcr.microsoft.com/oss/nginx/nginx:1.14.2-alpine
      securityContext:
        privileged: true
Create the pod using thekubectl applycommand and specify the name of your YAML manifest.kubectl-nonadminuser apply -f nginx-privileged.yamlThe following example output shows the pod failed to be scheduled:Error from server (Forbidden): error when creating "nginx-privileged.yaml": pods "nginx-privileged" is forbidden: unable to validate against any pod security policy: []Since the pod doesn't reach the scheduling stage, there are no resources to delete before you move on.
Create the pod using thekubectl applycommand and specify the name of your YAML manifest.
kubectl apply
kubectl-nonadminuser apply -f nginx-privileged.yaml
kubectl-nonadminuser apply -f nginx-privileged.yaml
The following example output shows the pod failed to be scheduled:
Error from server (Forbidden): error when creating "nginx-privileged.yaml": pods "nginx-privileged" is forbidden: unable to validate against any pod security policy: []
Error from server (Forbidden): error when creating "nginx-privileged.yaml": pods "nginx-privileged" is forbidden: unable to validate against any pod security policy: []
Since the pod doesn't reach the scheduling stage, there are no resources to delete before you move on.
Test creation of an unprivileged pod
In the previous example, the pod specification requested privileged escalation. This request is denied by the defaultprivilegepod security policy, so the pod fails to be scheduled. Let's try running the same NGINX pod without the privilege escalation request.
Create a file namednginx-unprivileged.yamland paste in the contents of the following YAML manifest.apiVersion: v1
kind: Pod
metadata:
  name: nginx-unprivileged
spec:
  containers:
    - name: nginx-unprivileged
      image: mcr.microsoft.com/oss/nginx/nginx:1.14.2-alpine
Create a file namednginx-unprivileged.yamland paste in the contents of the following YAML manifest.
nginx-unprivileged.yaml
apiVersion: v1
kind: Pod
metadata:
  name: nginx-unprivileged
spec:
  containers:
    - name: nginx-unprivileged
      image: mcr.microsoft.com/oss/nginx/nginx:1.14.2-alpine
apiVersion: v1
kind: Pod
metadata:
  name: nginx-unprivileged
spec:
  containers:
    - name: nginx-unprivileged
      image: mcr.microsoft.com/oss/nginx/nginx:1.14.2-alpine
Create the pod using thekubectl applycommand and specify the name of your YAML manifest.kubectl-nonadminuser apply -f nginx-unprivileged.yamlThe following example output shows the pod failed to be scheduled:Error from server (Forbidden): error when creating "nginx-unprivileged.yaml": pods "nginx-unprivileged" is forbidden: unable to validate against any pod security policy: []Since the pod doesn't reach the scheduling stage, there are no resources to delete before you move on.
Create the pod using thekubectl applycommand and specify the name of your YAML manifest.
kubectl apply
kubectl-nonadminuser apply -f nginx-unprivileged.yaml
kubectl-nonadminuser apply -f nginx-unprivileged.yaml
The following example output shows the pod failed to be scheduled:
Error from server (Forbidden): error when creating "nginx-unprivileged.yaml": pods "nginx-unprivileged" is forbidden: unable to validate against any pod security policy: []
Error from server (Forbidden): error when creating "nginx-unprivileged.yaml": pods "nginx-unprivileged" is forbidden: unable to validate against any pod security policy: []
Since the pod doesn't reach the scheduling stage, there are no resources to delete before you move on.
Test creation of a pod with a specific user context
In the previous example, the container image automatically tried to use root to bind NGINX to port 80. This request was denied by the defaultprivilegepod security policy, so the pod fails to start. Let's try running the same NGINX pod with a specific user context, such asrunAsUser: 2000.
runAsUser: 2000
Create a file namednginx-unprivileged-nonroot.yamland paste in the following YAML manifest.apiVersion: v1
kind: Pod
metadata:
  name: nginx-unprivileged-nonroot
spec:
  containers:
    - name: nginx-unprivileged
      image: mcr.microsoft.com/oss/nginx/nginx:1.14.2-alpine
      securityContext:
        runAsUser: 2000
Create a file namednginx-unprivileged-nonroot.yamland paste in the following YAML manifest.
nginx-unprivileged-nonroot.yaml
apiVersion: v1
kind: Pod
metadata:
  name: nginx-unprivileged-nonroot
spec:
  containers:
    - name: nginx-unprivileged
      image: mcr.microsoft.com/oss/nginx/nginx:1.14.2-alpine
      securityContext:
        runAsUser: 2000
apiVersion: v1
kind: Pod
metadata:
  name: nginx-unprivileged-nonroot
spec:
  containers:
    - name: nginx-unprivileged
      image: mcr.microsoft.com/oss/nginx/nginx:1.14.2-alpine
      securityContext:
        runAsUser: 2000
Create the pod using thekubectl applycommand and specify the name of your YAML manifest.kubectl-nonadminuser apply -f nginx-unprivileged-nonroot.yamlThe following example output shows the pod failed to be scheduled:Error from server (Forbidden): error when creating "nginx-unprivileged-nonroot.yaml": pods "nginx-unprivileged-nonroot" is forbidden: unable to validate against any pod security policy: []Since the pod doesn't reach the scheduling stage, there are no resources to delete before you move on.
Create the pod using thekubectl applycommand and specify the name of your YAML manifest.
kubectl apply
kubectl-nonadminuser apply -f nginx-unprivileged-nonroot.yaml
kubectl-nonadminuser apply -f nginx-unprivileged-nonroot.yaml
The following example output shows the pod failed to be scheduled:
Error from server (Forbidden): error when creating "nginx-unprivileged-nonroot.yaml": pods "nginx-unprivileged-nonroot" is forbidden: unable to validate against any pod security policy: []
Error from server (Forbidden): error when creating "nginx-unprivileged-nonroot.yaml": pods "nginx-unprivileged-nonroot" is forbidden: unable to validate against any pod security policy: []
Since the pod doesn't reach the scheduling stage, there are no resources to delete before you move on.
Create a custom pod security policy
Now that you've seen the behavior of the default pod security policies, let's provide a way for thenonadmin-userto successfully schedule pods.
We'll create a policy to reject pods that request privileged access. Other options, such asrunAsUseror allowedvolumes, aren't explicitly restricted. This type of policy denies a request for privileged access, but allows the cluster to run the requested pods.
Create a file namedpsp-deny-privileged.yamland paste in the following YAML manifest.apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: psp-deny-privileged
spec:
  privileged: false
  seLinux:
    rule: RunAsAny
  supplementalGroups:
    rule: RunAsAny
  runAsUser:
    rule: RunAsAny
  fsGroup:
    rule: RunAsAny
  volumes:
 - '*'
Create a file namedpsp-deny-privileged.yamland paste in the following YAML manifest.
psp-deny-privileged.yaml
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: psp-deny-privileged
spec:
  privileged: false
  seLinux:
    rule: RunAsAny
  supplementalGroups:
    rule: RunAsAny
  runAsUser:
    rule: RunAsAny
  fsGroup:
    rule: RunAsAny
  volumes:
 - '*'
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: psp-deny-privileged
spec:
  privileged: false
  seLinux:
    rule: RunAsAny
  supplementalGroups:
    rule: RunAsAny
  runAsUser:
    rule: RunAsAny
  fsGroup:
    rule: RunAsAny
  volumes:
 - '*'
Create the policy using thekubectl applycommand and specify the name of your YAML manifest.kubectl apply -f psp-deny-privileged.yaml
Create the policy using thekubectl applycommand and specify the name of your YAML manifest.
kubectl apply
kubectl apply -f psp-deny-privileged.yaml
kubectl apply -f psp-deny-privileged.yaml
View the available policies using thekubectl get pspcommand.kubectl get pspIn the following example output, compare thepsp-deny-privilegedpolicy with the defaultprivilegepolicy that was enforced in the previous examples to create a pod. Only the use ofPRIVescalation is denied by your policy. There are no restrictions on the user or group for thepsp-deny-privilegedpolicy.NAME                  PRIV    CAPS   SELINUX    RUNASUSER          FSGROUP     SUPGROUP    READONLYROOTFS   VOLUMES
privileged            true    *      RunAsAny   RunAsAny           RunAsAny    RunAsAny    false            *
psp-deny-privileged   false          RunAsAny   RunAsAny           RunAsAny    RunAsAny    false            *
View the available policies using thekubectl get pspcommand.
kubectl get psp
kubectl get psp
kubectl get psp
In the following example output, compare thepsp-deny-privilegedpolicy with the defaultprivilegepolicy that was enforced in the previous examples to create a pod. Only the use ofPRIVescalation is denied by your policy. There are no restrictions on the user or group for thepsp-deny-privilegedpolicy.
NAME                  PRIV    CAPS   SELINUX    RUNASUSER          FSGROUP     SUPGROUP    READONLYROOTFS   VOLUMES
privileged            true    *      RunAsAny   RunAsAny           RunAsAny    RunAsAny    false            *
psp-deny-privileged   false          RunAsAny   RunAsAny           RunAsAny    RunAsAny    false            *
NAME                  PRIV    CAPS   SELINUX    RUNASUSER          FSGROUP     SUPGROUP    READONLYROOTFS   VOLUMES
privileged            true    *      RunAsAny   RunAsAny           RunAsAny    RunAsAny    false            *
psp-deny-privileged   false          RunAsAny   RunAsAny           RunAsAny    RunAsAny    false            *
Allow user account to use the custom pod security policy
In the previous step, you created a pod security policy to reject pods that request privileged access. To allow the policy to be used, you create aRoleor aClusterRole. Then, you associate one of these roles using aRoleBindingorClusterRoleBinding. For this example, we'll create a ClusterRole that allows you tousethepsp-deny-privilegedpolicy created in the previous step.
Create a file namedpsp-deny-privileged-clusterrole.yamland paste in the following YAML manifest.kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: psp-deny-privileged-clusterrole
rules:
- apiGroups:
  - extensions
   resources:
  - podsecuritypolicies
   resourceNames:
  - psp-deny-privileged
   verbs:
  - use
Create a file namedpsp-deny-privileged-clusterrole.yamland paste in the following YAML manifest.
psp-deny-privileged-clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: psp-deny-privileged-clusterrole
rules:
- apiGroups:
  - extensions
   resources:
  - podsecuritypolicies
   resourceNames:
  - psp-deny-privileged
   verbs:
  - use
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: psp-deny-privileged-clusterrole
rules:
- apiGroups:
  - extensions
   resources:
  - podsecuritypolicies
   resourceNames:
  - psp-deny-privileged
   verbs:
  - use
Create the ClusterRole using thekubectl applycommand and specify the name of your YAML manifest.kubectl apply -f psp-deny-privileged-clusterrole.yaml
Create the ClusterRole using thekubectl applycommand and specify the name of your YAML manifest.
kubectl apply
kubectl apply -f psp-deny-privileged-clusterrole.yaml
kubectl apply -f psp-deny-privileged-clusterrole.yaml
Create a file namedpsp-deny-privileged-clusterrolebinding.yamland paste in the following YAML manifest.apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: psp-deny-privileged-clusterrolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: psp-deny-privileged-clusterrole
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: Group
  name: system:serviceaccounts
Create a file namedpsp-deny-privileged-clusterrolebinding.yamland paste in the following YAML manifest.
psp-deny-privileged-clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: psp-deny-privileged-clusterrolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: psp-deny-privileged-clusterrole
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: Group
  name: system:serviceaccounts
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: psp-deny-privileged-clusterrolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: psp-deny-privileged-clusterrole
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: Group
  name: system:serviceaccounts
Create the ClusterRoleBinding using thekubectl applycommand and specify the name of your YAML manifest.kubectl apply -f psp-deny-privileged-clusterrolebinding.yaml
Create the ClusterRoleBinding using thekubectl applycommand and specify the name of your YAML manifest.
kubectl apply
kubectl apply -f psp-deny-privileged-clusterrolebinding.yaml
kubectl apply -f psp-deny-privileged-clusterrolebinding.yaml
Note
In the first step of this article, the pod security policy feature was enabled on the AKS cluster. The recommended practice was to only enable the pod security policy feature after you've defined your own policies. This is the stage where you would enable the pod security policy feature. One or more custom policies have been defined, and user accounts have been associated with those policies. You can now safely enable the pod security policy feature and minimize problems caused by the default policies.
Test the creation of an unprivileged pod again
With your custom pod security policy applied and a binding for the user account to use the policy, let's try to create an unprivileged pod again.
This example shows how you can create custom pod security policies to define access to the AKS cluster for different users or groups. The default AKS policies provide tight controls on what pods can run, so create your own custom policies to then correctly define the restrictions you need.
Use thenginx-privileged.yamlmanifest to create the pod using thekubectl applycommand.kubectl-nonadminuser apply -f nginx-unprivileged.yaml
Use thenginx-privileged.yamlmanifest to create the pod using thekubectl applycommand.
nginx-privileged.yaml
kubectl apply
kubectl-nonadminuser apply -f nginx-unprivileged.yaml
kubectl-nonadminuser apply -f nginx-unprivileged.yaml
Check the status of the pod using thekubectl get podscommand.kubectl-nonadminuser get podsThe following example output shows the pod was successfully scheduled and isRunning:NAME                 READY   STATUS    RESTARTS   AGE
nginx-unprivileged   1/1     Running   0          7m14s
Check the status of the pod using thekubectl get podscommand.
kubectl get pods
kubectl-nonadminuser get pods
kubectl-nonadminuser get pods
The following example output shows the pod was successfully scheduled and isRunning:
NAME                 READY   STATUS    RESTARTS   AGE
nginx-unprivileged   1/1     Running   0          7m14s
NAME                 READY   STATUS    RESTARTS   AGE
nginx-unprivileged   1/1     Running   0          7m14s
Delete the NGINX unprivileged pod using thekubectl deletecommand and specify the name of your YAML manifest.kubectl-nonadminuser delete -f nginx-unprivileged.yaml
Delete the NGINX unprivileged pod using thekubectl deletecommand and specify the name of your YAML manifest.
kubectl delete
kubectl-nonadminuser delete -f nginx-unprivileged.yaml
kubectl-nonadminuser delete -f nginx-unprivileged.yaml
Clean up resources
Disable pod security policy using theaz aks updatecommand.az aks update \
    --resource-group myResourceGroup \
    --name myAKSCluster \
    --disable-pod-security-policy
Disable pod security policy using theaz aks updatecommand.
az aks update
az aks update \
    --resource-group myResourceGroup \
    --name myAKSCluster \
    --disable-pod-security-policy
az aks update \
    --resource-group myResourceGroup \
    --name myAKSCluster \
    --disable-pod-security-policy
Delete the ClusterRole and ClusterRoleBinding using thekubectl deletecommand.kubectl delete -f psp-deny-privileged-clusterrole.yaml
Delete the ClusterRole and ClusterRoleBinding using thekubectl deletecommand.
kubectl delete
kubectl delete -f psp-deny-privileged-clusterrole.yaml
kubectl delete -f psp-deny-privileged-clusterrole.yaml
Delete the ClusterRoleBinding using thekubectl deletecommand.kubectl delete -f psp-deny-privileged-clusterrolebinding.yaml
Delete the ClusterRoleBinding using thekubectl deletecommand.
kubectl delete
kubectl delete -f psp-deny-privileged-clusterrolebinding.yaml
kubectl delete -f psp-deny-privileged-clusterrolebinding.yaml
Delete the security policy usingkubectl deletecommand and specify the name of your YAML manifest.kubectl delete -f psp-deny-privileged.yaml
Delete the security policy usingkubectl deletecommand and specify the name of your YAML manifest.
kubectl delete
kubectl delete -f psp-deny-privileged.yaml
kubectl delete -f psp-deny-privileged.yaml
Delete thepsp-aksnamespace using thekubectl deletecommand.kubectl delete namespace psp-aks
Delete thepsp-aksnamespace using thekubectl deletecommand.
kubectl delete
kubectl delete namespace psp-aks
kubectl delete namespace psp-aks
Next steps
This article showed you how to create a pod security policy to prevent the use of privileged access. Policies can enforce a lot of features, such as type of volume or the RunAs user. For more information on the available options, see theKubernetes pod security policy reference docs.
For more information about limiting pod network traffic, seeSecure traffic between pods using network policies in AKS.
Azure Kubernetes Service

Additional resources