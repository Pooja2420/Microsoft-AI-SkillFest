Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Architecture best practices for Azure Database for PostgreSQL
Article
2025-02-21
8 contributors
In this article
This article provides architectural best practices for Azure Database for PostgreSQL.
The guidance is based on the five pillars of architectural excellence:
Reliability
Security
Cost optimization
Operational excellence
Performance efficiency
Prerequisites
Understanding the Well-Architected Framework pillars can help produce a high-quality, stable, and efficient cloud architecture. We recommend you review your workload using theAzure Well-Architected Framework Reviewassessment.
Azure Database for PostgreSQLis a relational database service in Azure based on the PostgreSQL open-source relational database. It's a fully managed database as a service offering that can handle mission-critical workloads with predictable performance, security, high availability, and dynamic scalability. Azure Database for PostgreSQL is built on the community edition of the PostgreSQL database engine. It's compatible with the PostgreSQL server community edition and supports PostgreSQL extension features such as PostGIS and TimescaleDB.
Note
To explore a light-weight solution idea that uses Azure Database for PostgreSQL to store analytical results from the Cognitive Services API, seeIntelligent apps using Azure Database for PostgreSQL.
Reliability
Azure Database for PostgreSQL - Flexible Server offershigh availabilitysupport by provisioning physically separate primary and standby replicas either within the same availability zone (zonal) or across availability zones (zone-redundant). This high availability model ensures that committed data is never lost if a failure happens. The model is also designed so the database doesn't become a single point of failure in your software architecture. Azure Database for PostgreSQL - Flexible Server provides features that protect data and mitigate downtime for your mission-critical databases during planned and unplanned downtime events. Built on top of the Azure infrastructure that offers robust resiliency and availability, the flexible server has business continuity features that provide fault protection, address recovery time requirements, and reduce data loss exposure.
Reliability design checklist
You should review thedesign principlesto optimize the cost of your architecture.
Defined targets for RPO (Recovery Point Objective) and RTO (Recovery Time Objective) for workloads.
Select the appropriate high-availability configuration.
Configure geo-redundancy backup.
Test your disaster recovery plan to ensure rapid data restoration in case of a failure.
Test On-Demand Failover for your HA-enabled server to ensure our application behaves as expected.
Monitor your server to ensure it's healthy and performing as expected.
Reliability recommendations
Tip
For more details on reliability guidance for Azure Database for PostgreSQL, seeReliability with Azure Database for PostgreSQL.
Azure policy definitions
Azure Policy definitions help you enforce specific rules and configurations for resources within your Azure environment. To ensure reliability for Azure Database for PostgreSQL, you can create custom Azure Policy definitions to implement specific configurations and best practices. Here's an example of some custom Azure Policy definitions you can create for reliability:
High availability (Reliability) in Azure Database for PostgreSQL - Flexible Server
Security
Think aboutsecuritythroughout the entire lifecycle of an application, from design and implementation to deployment and operations. The Azure platform protects against various threats like network intrusion and DDoS attacks. You still need to build security into your application and your DevOps processes.
Security design checklist
You should review thedesign principlesto optimize the cost of your architecture.
SSL and enforce encryption to secure data in transit.
Implement network security groups and firewalls to control access to your database.
Use Microsoft Entra ID for authentication and authorization to enhance identity management.
Configure row-level security.
Security recommendations
Cost optimization
Cost optimization is about understanding your configuration options and recommended best practices to reduce unnecessary expenses and improve operational efficiencies. You should review your workload to identify opportunities to reduce costs.
Cost design checklist
You should review thedesign principlesto optimize the cost of your architecture.
Pick the right tier and SKU.
Understand high availability mode.
Scale compute and storage tiers.
Consider reserved instances.
Use your provisioned storage.
Understand geo-redundancy costs.
Evaluate storage scale-up decisions.
Deploy to the same region as an app.
High availability oriented cost description.
Consolidate databases and servers.
Cost recommendations
Azure policy definitions
Azure Policy definitions help you enforce specific rules and configurations for resources within your Azure environment. To ensure cost optimization for Azure Database for PostgreSQL, you can create custom Azure Policy definitions to enforce specific configurations and best practices. Here's an example of some custom Azure Policy definitions you can create for cost optimization:
Optimize costs
Operational excellence
The principles of operational excellence are a series of considerations that can help achieve superior operational practices.
To achieve a higher competency in operations, consider and improve how software is developed, deployed, operated, and maintained.
Operational excellence design checklist
You should review thedesign principlesto optimize the cost of your architecture.
Set up automated backups and retention policies to maintain data availability and meet compliance requirements.
Implement automated patching and updates to keep your PostgreSQL instance secure and up-to-date.
Monitor database health and performance using Azure Monitor and set up alerts for critical metrics.
Operational excellence recommendations
Operational excellence policy definitions
Azure Policy definitions help you enforce specific rules and configurations for resources within your Azure environment. To ensure Operational excellence for Azure Database for PostgreSQL, you can create custom Azure Policy definitions to enforce specific configurations and best practices. Here's an example of some custom Azure Policy definitions you can create for Operational excellence:
Azure Policy Regulatory Compliance controls for Azure Database for PostgreSQL
Performance efficiency
Performance efficiency is the ability of your workload to scale to meet the demands placed on it by users efficiently. We recommend you review the Performance efficiency principles.
In the design checklist and list of recommendations below, call-outs indicate whether each choice applies to cluster architecture, workload architecture, or both.
Performance efficiency design checklist
You should review thedesign principlesto optimize the cost of your architecture.
Design your schema and queries for efficiency to minimize resource consumption.
Implement read replicas to offload read traffic and enhance overall performance.
Performance efficiency recommendations
Performance efficiency policy definitions
Azure Policy definitions help you enforce specific rules and configurations for resources within your Azure environment. To ensure Performance efficiency for Azure Database for PostgreSQL, you can create custom Azure Policy definitions to enforce specific configurations and best practices. Here's an example of some custom Azure Policy definitions you can create for Performance efficiency:
Extra resources
Consider more resources related to Azure Database for PostgreSQL.
Azure Architecture Center Guidance
Multitenancy and Azure Database for PostgreSQL
Best practices
Optimize performance
Tuning
Cloud Adoption Framework guidance
Batch Data application with Azure Database for PostgreSQL
Next step
Azure pricing calculator to estimate and manage your costs effectively
Feedback
Was this page helpful?
Additional resources