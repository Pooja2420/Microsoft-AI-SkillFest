Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Manage and monitor IoT Central applications
Article
2024-04-08
2 contributors
In this article
You can use theAzure portal,Azure CLI, orAzure PowerShellto manage and monitor IoT Central applications.
If you prefer to use a language such as JavaScript, Python, C#, Ruby, or Go to create, update, list, and delete Azure IoT Central applications, see theAzure IoT Central ARM SDK samplesrepository.
To learn how to create an IoT Central application, seeCreate an IoT Central application.
View applications
Azure portal
Azure CLI
PowerShell
To list all the IoT Central apps in your subscription, navigate toIoT Central applications.
Use theaz iot central app listcommand to list your IoT Central applications and view metadata.
Use theGet-AzIotCentralAppcmdlet to list your IoT Central applications and view metadata.
Delete an application
Azure portal
Azure CLI
PowerShell
To delete an IoT Central application in the Azure portal, navigate to theOverviewpage of the application in the portal and selectDelete.
Use theaz iot central app deletecommand to delete an IoT Central application.
Use theRemove-AzIotCentralAppcmdlet to delete an IoT Central application.
Manage networking
You can use private IP addresses from a virtual network address space when you manage your devices in IoT Central application to eliminate exposure on the public internet. To learn more, seeCreate and configure a private endpoint for IoT Central.
Configure a managed identity
When you configure a data export in your IoT Central application, you can choose to configure the connection to the destination with aconnection stringor amanaged identity. Managed identities are more secure because:
You don't store the credentials for your resource in a connection string in your IoT Central application.
The credentials are automatically tied to the lifetime of your IoT Central application.
Managed identities automatically rotate their security keys regularly.
IoT Central currently usessystem-assigned managed identities. To create the managed identity for your application, you use either the Azure portal or the REST API.
When you configure a managed identity, the configuration includes ascopeand arole:
The scope defines where you can use the managed identity. For example, you can use an Azure resource group as the scope. In this case, both the IoT Central application and the destination must be in the same resource group.
The role defines what permissions the IoT Central application is granted in the destination service. For example, for an IoT Central application to send data to an event hub, the managed identity needs theAzure Event Hubs Data Senderrole assignment.
Azure portal
Azure CLI
PowerShell
To configure the managed identity that enables your IoT Central application to securely export data to your Azure resource:
In theAzure portal, navigate to your IoT Central application.TipBy default, IoT Central applications are created in theIOTCresource group in your subscription.
In theAzure portal, navigate to your IoT Central application.
Tip
By default, IoT Central applications are created in theIOTCresource group in your subscription.
SelectIdentity. Then on theSystem assignedpage, change the status toOn, and then selectSave.
SelectIdentity. Then on theSystem assignedpage, change the status toOn, and then selectSave.
After a few seconds, the system assigned managed identity for your IoT Central application is enabled and you can selectAzure role assignments:
After a few seconds, the system assigned managed identity for your IoT Central application is enabled and you can selectAzure role assignments:

On theAzure role assignmentspage, select+ Add role assignment.
On theAzure role assignmentspage, select+ Add role assignment.
You can enable the managed identity when you create an IoT Central application:
# Create an IoT Central application with a managed identity
az iot central app create \
  --resource-group "MyIoTCentralResourceGroup" \
  --name "myiotcentralapp" --subdomain "mysubdomain" \
  --sku ST1 --template "iotc-pnp-preview" \
  --display-name "My Custom Display Name" \
  --mi-system-assigned
# Create an IoT Central application with a managed identity
az iot central app create \
  --resource-group "MyIoTCentralResourceGroup" \
  --name "myiotcentralapp" --subdomain "mysubdomain" \
  --sku ST1 --template "iotc-pnp-preview" \
  --display-name "My Custom Display Name" \
  --mi-system-assigned
Alternatively, you can enable a managed identity on an existing IoT Central application:
# Enable a system-assigned managed identity
az iot central app identity assign --name "myiotcentralapp" \
  --resource-group "MyIoTCentralResourceGroup" \
  --system-assigned
# Enable a system-assigned managed identity
az iot central app identity assign --name "myiotcentralapp" \
  --resource-group "MyIoTCentralResourceGroup" \
  --system-assigned
After you enable the managed identity, you can use the CLI to configure the role assignments.
Use theaz role assignment createcommand to create a role assignment. For example, the following commands first retrieve the principal ID of the managed identity. The second command assigns theAzure Event Hubs Data Senderrole to the principal ID in the scope of theMyIoTCentralResourceGroupresource group:
Azure Event Hubs Data Sender
MyIoTCentralResourceGroup
scope=$(az group show -n "MyIoTCentralResourceGroup" --query "id" --output tsv)
spID=$(az iot central app identity show \
  --name "myiotcentralapp" \
  --resource-group "MyIoTCentralResourceGroup" \
  --query "principalId" --output tsv)
az role assignment create --assignee $spID --role "Azure Event Hubs Data Sender" \
  --scope $scope
scope=$(az group show -n "MyIoTCentralResourceGroup" --query "id" --output tsv)
spID=$(az iot central app identity show \
  --name "myiotcentralapp" \
  --resource-group "MyIoTCentralResourceGroup" \
  --query "principalId" --output tsv)
az role assignment create --assignee $spID --role "Azure Event Hubs Data Sender" \
  --scope $scope
You can enable the managed identity when you create an IoT Central application:
# Create an IoT Central application with a managed identity
New-AzIotCentralApp -ResourceGroupName "MyIoTCentralResourceGroup" `
  -Name "myiotcentralapp" -Subdomain "mysubdomain" `
  -Sku "ST1" -Template "iotc-pnp-preview" `
  -DisplayName "My Custom Display Name" -Identity "SystemAssigned"
# Create an IoT Central application with a managed identity
New-AzIotCentralApp -ResourceGroupName "MyIoTCentralResourceGroup" `
  -Name "myiotcentralapp" -Subdomain "mysubdomain" `
  -Sku "ST1" -Template "iotc-pnp-preview" `
  -DisplayName "My Custom Display Name" -Identity "SystemAssigned"
Alternatively, you can enable a managed identity on an existing IoT Central application:
# Enable a system-assigned managed identity
Set-AzIotCentralApp -ResourceGroupName "MyIoTCentralResourceGroup" `
  -Name "myiotcentralapp" -Identity "SystemAssigned"
# Enable a system-assigned managed identity
Set-AzIotCentralApp -ResourceGroupName "MyIoTCentralResourceGroup" `
  -Name "myiotcentralapp" -Identity "SystemAssigned"
After you enable the managed identity, you can use PowerShell to configure the role assignments.
Use theNew-AzRoleAssignmentcmdlet to create a role assignment. For example, the following commands first retrieve the principal ID of the managed identity. The second command assigns theAzure Event Hubs Data Senderrole to the principal ID in the scope of theMyIoTCentralResourceGroupresource group:
Azure Event Hubs Data Sender
MyIoTCentralResourceGroup
$resourceGroup = Get-AzResourceGroup -Name "MyIoTCentralResourceGroup"
$app = Get-AzIotCentralApp -ResourceGroupName $resourceGroup.ResourceGroupName -Name "myiotcentralapp"
$sp = Get-AzADServicePrincipal -ObjectId $app.Identity.PrincipalId
New-AzRoleAssignment -RoleDefinitionName "Azure Event Hubs Data Sender" `
  -ObjectId $sp.Id -Scope $resourceGroup.ResourceId
$resourceGroup = Get-AzResourceGroup -Name "MyIoTCentralResourceGroup"
$app = Get-AzIotCentralApp -ResourceGroupName $resourceGroup.ResourceGroupName -Name "myiotcentralapp"
$sp = Get-AzADServicePrincipal -ObjectId $app.Identity.PrincipalId
New-AzRoleAssignment -RoleDefinitionName "Azure Event Hubs Data Sender" `
  -ObjectId $sp.Id -Scope $resourceGroup.ResourceId
To learn more about the role assignments, see:
Built-in roles for Azure Event Hubs
Built-in roles for Azure Service Bus
Built-in roles for Azure Storage Services
Monitor application health
You can use the set of metrics provided by IoT Central to assess the health of devices connected to your IoT Central application and the health of your running data exports.
Note
IoT Central applications also have an internalaudit logto track activity within the application.
Metrics are enabled by default for your IoT Central application and you access them from theAzure portal. TheAzure Monitor data platform exposes these metricsand provides several ways for you to interact with them. For example, you can use charts in the Azure portal, a REST API, or queries in PowerShell or the Azure CLI.
Azure role based access controlmanages access to metrics in the Azure portal. Use the Azure portal to add users to the IoT Central application/resource group/subscription to grant them access. You must add a user in the portal even they're already added to the IoT Central application. UseAzure built-in rolesfor finer grained access control.
View metrics in the Azure portal
The following exampleMetricspage shows a plot of the number of devices connected to your IoT Central application. For a list of the metrics that are currently available for IoT Central, seeSupported metrics with Azure Monitor.
To view IoT Central metrics in the portal:
Navigate to your IoT Central application resource in the portal. By default, IoT Central resources are located in a resource group calledIOTC.
To create a chart from your application's metrics, selectMetricsin theMonitoringsection.

Export logs and metrics
Use theDiagnostics settingspage to configure exporting metrics and logs to different destinations. To learn more, seeDiagnostic settings in Azure Monitor.
Analyze logs and metrics
Use theWorkbookspage to analyze logs and create visual reports. To learn more, seeAzure Workbooks.
Metrics and invoices
Metrics might differ from the numbers shown on your Azure IoT Central invoice. This situation occurs for reasons such as:
IoT Centralstandard pricing plansinclude two devices and varying message quotas for free. While the free items are excluded from billing, they're still counted in the metrics.
IoT Centralstandard pricing plansinclude two devices and varying message quotas for free. While the free items are excluded from billing, they're still counted in the metrics.
IoT Central autogenerates one test device ID for each device template in the application. This device ID is visible on theManage test devicepage for a device template. You can validate your device templates before publishing them by generating code that uses these test device IDs. While these devices are excluded from billing, they're still counted in the metrics.
IoT Central autogenerates one test device ID for each device template in the application. This device ID is visible on theManage test devicepage for a device template. You can validate your device templates before publishing them by generating code that uses these test device IDs. While these devices are excluded from billing, they're still counted in the metrics.
While metrics might show a subset of device-to-cloud communication, all communication between the device and the cloudcounts as a message for billing.
While metrics might show a subset of device-to-cloud communication, all communication between the device and the cloudcounts as a message for billing.
Monitor connected IoT Edge devices
If your application uses IoT Edge devices, you can monitor the health of your IoT Edge devices and modules using Azure Monitor. To learn more, seeCollect and transport Azure IoT Edge metrics.
Feedback
Was this page helpful?
Additional resources