Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
resources.webhooks.webhook definition
Article
2025-02-24
4 contributors
In this article
A webhook resource enables you to integrate your pipeline with an external service to automate the workflow.
webhooks:
- webhook: string # Required as first property. Name of the webhook.
  connection: string # Required. Name of the connection. In case of offline webhook this will be the type of Incoming Webhook otherwise it will be the type of the webhook extension.
  type: string # Name of the webhook extension. Leave this empty if it is an offline webhook.
  filters: [ filter ] # List of trigger filters.
webhooks:
- webhook: string # Required as first property. Name of the webhook.
  connection: string # Required. Name of the connection. In case of offline webhook this will be the type of Incoming Webhook otherwise it will be the type of the webhook extension.
  type: string # Name of the webhook extension. Leave this empty if it is an offline webhook.
  filters: [ filter ] # List of trigger filters.
Definitions that reference this definition:resources.webhooks
Properties
webhookstring. Required as first property.Name of the webhook. Acceptable values: [-_A-Za-z0-9]*.
For Azure DevOps webhook,webhookmust always be aWebHook.
webhook
webhook
WebHook
connectionstring. Required.Name of the connection. In case of offline webhook this will be the type of Incoming Webhook otherwise it will be the type of the webhook extension.
connection
typestring.Name of the webhook extension. Leave this empty if it is an offline webhook.
type
filtersresources.webhooks.webhook.filters.List of trigger filters.
filters
Examples
Basic example
You can define your pipeline as follows.
resources:
  webhooks:
    - webhook: WebHook
      connection: IncomingWH

steps:  
- script: echo ${{ parameters.WebHook.resource.message.title }}
resources:
  webhooks:
    - webhook: WebHook
      connection: IncomingWH

steps:  
- script: echo ${{ parameters.WebHook.resource.message.title }}
To trigger your pipeline using the webhook, you need to make aPOSTrequest tohttps://dev.azure.com/<org_name>/_apis/public/distributedtask/webhooks/<WebHook Name>?api-version=6.0-preview.
The WebHook Name must match that of the Incoming WebHook Service Connection.
This endpoint is publicly available, and no authorization is needed. The request should have the following body.
POST
https://dev.azure.com/<org_name>/_apis/public/distributedtask/webhooks/<WebHook Name>?api-version=6.0-preview
{
    "resource": {
        "message": {
            "title": "Hello, world!",
            "subtitle": "I'm using WebHooks!"
        }
    }
}
{
    "resource": {
        "message": {
            "title": "Hello, world!",
            "subtitle": "I'm using WebHooks!"
        }
    }
}
When you access data from the webhook's request body, be mindful that it may lead to incorrect YAML. For example, if in the previous pipeline, your step reads- script: echo ${{ parameters.WebHook.resource.message }}, and you trigger the pipeline via a webhook, the pipeline doesn't run. This is because in the process of replacing${{ parameters.WebHook.resource.message.title }}withmessage, which contains the following JSON, the generated YAML becomes invalid.
- script: echo ${{ parameters.WebHook.resource.message }}
${{ parameters.WebHook.resource.message.title }}
message
{
  "title": "Hello, world!",
  "subtitle": "I'm using WebHooks!"
}
{
  "title": "Hello, world!",
  "subtitle": "I'm using WebHooks!"
}
Because the generated YAML becomes invalid, no pipeline run is queued in response.
Prevent unauthorized pipeline runs
Webhooks allow anyone to trigger your pipeline, as long as they know the names of your organization and webhook service connection.
You can prevent unauthorized pipeline runs by defining asecretwhen creating an Incoming Webhook service connection. You need to also specify the name of HTTP header that contains the SHA-1 checksum of the webhook's body.
To verify that an incoming webhook REST API call is authorized, Azure Pipelines computes the SHA-1 checksum of the request's body using the secret as key. It then compares it to the checksum passed in the request header. This way, the caller proves they know the secret.
Let's look at an example. Say you configured an Incoming Webhook service connection namedIncomingWH, specified the secret issecret, and that the checksum is sent in the HTTP header namedX-WH-Checksum. Imagine you have a pipeline that defines a Webhook resource.
IncomingWH
secret
X-WH-Checksum
Say you want to trigger the pipeline using the following request body:
{"resource":{"message":{"title":"Hello, world!","subtitle":"I'm using WebHooks!"}}}
{"resource":{"message":{"title":"Hello, world!","subtitle":"I'm using WebHooks!"}}}
To do this, you need to make aPOSTrequest tohttps://dev.azure.com/<org_name>/_apis/public/distributedtask/webhooks/IncomingWH?api-version=6.0-previewand add theX-WH-Checksumheader with the value of750D33212D3AD4932CC390819050734831A0A94F. You do not need to specify any username & password or any other type of authentication information.
POST
https://dev.azure.com/<org_name>/_apis/public/distributedtask/webhooks/IncomingWH?api-version=6.0-preview
X-WH-Checksum
750D33212D3AD4932CC390819050734831A0A94F
Azure Pipelines will independently compute the SHA-1 checksum of the body usingsecretas key and will generate the same750D33212D3AD4932CC390819050734831A0A94Fvalue. Since the values match, the call is authorized, and pipeline queueing proceeds.
secret
750D33212D3AD4932CC390819050734831A0A94F
You compute the value of theX-WH-Checksumheader, in pseudocode, asSHA1(secret).ComputeHash(requestBody). You can use .NET'sSystem.Security.Cryptography.HMACSHA1class for this purpose.
X-WH-Checksum
SHA1(secret).ComputeHash(requestBody)
System.Security.Cryptography.HMACSHA1
To prevent validation failures due to new lines or whitespaces, we recommend you send the body in a minimized form. That is, send
{"resource":{"message":{"title":"Hello, world!","subtitle":"I'm using WebHooks!"}}}
{"resource":{"message":{"title":"Hello, world!","subtitle":"I'm using WebHooks!"}}}
instead of
{
    "resource": {
        "message": {
            "title": "Hello, world!",
            "subtitle": "I'm using WebHooks!"
        }
    }
}
{
    "resource": {
        "message": {
            "title": "Hello, world!",
            "subtitle": "I'm using WebHooks!"
        }
    }
}
Even though the two JSON objects above represent the same object, they generate different SHA-1 checksums. This is because SHA-1 is computed on their string representation, which is different.
See also
Add resources to a pipeline
Feedback
Was this page helpful?
Additional resources