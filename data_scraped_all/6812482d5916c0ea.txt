Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Tutorial: Deploy to Azure App Service with Jenkins and the Azure CLI
Article
2023-05-30
12 contributors
In this article
Important
Many Azure services have Jenkins plug-ins. Some of these plug-ins will be out of support as of February 29, 2024. Azure CLI is the currently recommended way to integrate Jenkins with Azure services. For more information, refer to the articleJenkins plug-ins for Azure.
To deploy a Java web app to Azure, you can use Azure CLI in aJenkins Pipeline. In this tutorial, you do the following tasks:
Create a Jenkins VM
Configure Jenkins
Create a web app in Azure
Prepare a GitHub repository
Create Jenkins pipeline
Run the pipeline and verify the web app
Prerequisites
Azure subscription: If you don't have an Azure subscription, create afree accountbefore you begin.
Jenkins-Install Jenkins on a Linux VM
Azure CLI: Install Azure CLI (version 2.0.67 or higher) on the Jenkins server.
Configure Jenkins
The following steps show how to install the required Java JDK and Maven on the Jenkins controller:
Sign in to Jenkins controller using SSH.
Sign in to Jenkins controller using SSH.
Download and install the Azul Zulu build of OpenJDK for Azure from an apt-get repository:sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 0xB1998361219BD9C9
sudo apt-add-repository "deb http://repos.azul.com/azure-only/zulu/apt stable main"
sudo apt-get -q update
sudo apt-get -y install zulu-8-azure-jdk
Download and install the Azul Zulu build of OpenJDK for Azure from an apt-get repository:
sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 0xB1998361219BD9C9
sudo apt-add-repository "deb http://repos.azul.com/azure-only/zulu/apt stable main"
sudo apt-get -q update
sudo apt-get -y install zulu-8-azure-jdk
sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 0xB1998361219BD9C9
sudo apt-add-repository "deb http://repos.azul.com/azure-only/zulu/apt stable main"
sudo apt-get -q update
sudo apt-get -y install zulu-8-azure-jdk
Run the following command to install Maven:sudo apt-get install -y maven
Run the following command to install Maven:
sudo apt-get install -y maven
sudo apt-get install -y maven
Add Azure service principal to a Jenkins credential
The following steps show how to specify your Azure credential:
Make sure theCredentials plug-inis installed.
Make sure theCredentials plug-inis installed.
Within the Jenkins dashboard, selectCredentials -> System ->.
Within the Jenkins dashboard, selectCredentials -> System ->.
SelectGlobal credentials(unrestricted).
SelectGlobal credentials(unrestricted).
SelectAdd Credentialsto add aMicrosoft Azure service principal. Make sure that the credential kind isUsername with passwordand enter the following items:Username: Service principalappIdPassword: Service principalpasswordID: Credential identifier (such asAzureServicePrincipal)
SelectAdd Credentialsto add aMicrosoft Azure service principal. Make sure that the credential kind isUsername with passwordand enter the following items:
Username: Service principalappId
appId
Password: Service principalpassword
password
ID: Credential identifier (such asAzureServicePrincipal)
AzureServicePrincipal
Create an Azure App Service for deploying the Java web app
Useaz appservice plan createto create an Azure App Service plan with theFREEpricing tier:
az appservice plan create \
    --name <app_service_plan> \ 
    --resource-group <resource_group> \
    --sku FREE
az appservice plan create \
    --name <app_service_plan> \ 
    --resource-group <resource_group> \
    --sku FREE
Key points:
The appservice plan defines the physical resources used to host your apps.
All applications assigned to an appservice plan share these resources.
Appservice plans allow you to save cost when hosting multiple apps.
Create an Azure web app
Useaz webapp createto create a web app definition in themyAppServicePlanApp Service plan.
myAppServicePlan
az webapp create \
    --name <app_name> \ 
    --resource-group <resource_group> \
    --plan <app_service_plan>
az webapp create \
    --name <app_name> \ 
    --resource-group <resource_group> \
    --plan <app_service_plan>
Key points:
The web app definition provides a URL to access your application with and configures several options to deploy your code to Azure.
Substitute the<app_name>placeholder with a unique app name.
<app_name>
The app name is part of the default domain name for the web app. Therefore, the name needs to be unique across all apps in Azure.
You can map a custom domain name entry to the web app before you expose it to your users.
Configure Java
Useaz appservice web config updateto set up the Java runtime configuration for the app:
az webapp config set \ 
    --name <app_name> \
    --resource-group <resource_group> \ 
    --java-version 1.8 \ 
    --java-container Tomcat \
    --java-container-version 8.0
az webapp config set \ 
    --name <app_name> \
    --resource-group <resource_group> \ 
    --java-version 1.8 \ 
    --java-container Tomcat \
    --java-container-version 8.0
Prepare a GitHub repository
Open theSimple Java Web App for Azurerepo.
Open theSimple Java Web App for Azurerepo.
Select theForkbutton to fork the repo to your own GitHub account.
Select theForkbutton to fork the repo to your own GitHub account.
Open theJenkinsfilefile by clicking on the file name.
Open theJenkinsfilefile by clicking on the file name.
Select the pencil icon to edit the file.
Select the pencil icon to edit the file.
Update the subscription ID and tenant ID.withEnv(['AZURE_SUBSCRIPTION_ID=<subscription_id>',
        'AZURE_TENANT_ID=<tenant_id>'])
Update the subscription ID and tenant ID.
withEnv(['AZURE_SUBSCRIPTION_ID=<subscription_id>',
        'AZURE_TENANT_ID=<tenant_id>'])
withEnv(['AZURE_SUBSCRIPTION_ID=<subscription_id>',
        'AZURE_TENANT_ID=<tenant_id>'])
Update the resource group and name of your web app on line 22 and 23 respectively.def resourceGroup = '<resource_group>'
def webAppName = '<app_name>'
Update the resource group and name of your web app on line 22 and 23 respectively.
def resourceGroup = '<resource_group>'
def webAppName = '<app_name>'
def resourceGroup = '<resource_group>'
def webAppName = '<app_name>'
Update the credential ID in your Jenkins instancewithCredentials([usernamePassword(credentialsId: '<service_principal>', passwordVariable: 'AZURE_CLIENT_SECRET', usernameVariable: 'AZURE_CLIENT_ID')]) {
Update the credential ID in your Jenkins instance
withCredentials([usernamePassword(credentialsId: '<service_principal>', passwordVariable: 'AZURE_CLIENT_SECRET', usernameVariable: 'AZURE_CLIENT_ID')]) {
withCredentials([usernamePassword(credentialsId: '<service_principal>', passwordVariable: 'AZURE_CLIENT_SECRET', usernameVariable: 'AZURE_CLIENT_ID')]) {
Create Jenkins pipeline
Do the following to create a Jenkins pipeline:
Open Jenkins in a web browser.
Open Jenkins in a web browser.
SelectNew Item.
SelectNew Item.
Enter a name for the job.
Enter a name for the job.
SelectPipeline.
SelectPipeline.
SelectOK.
SelectOK.
SelectPipeline.
SelectPipeline.
ForDefinition, selectPipeline script from SCM.
ForDefinition, selectPipeline script from SCM.
ForSCM, selectGit.
ForSCM, selectGit.
Enter the GitHub URL for your forked repo:https:\<forked_repo\>.git
Enter the GitHub URL for your forked repo:https:\<forked_repo\>.git
https:\<forked_repo\>.git
SelectSave
SelectSave
Test your pipeline
Go to the pipeline you created
Go to the pipeline you created
SelectBuild Now
SelectBuild Now
After the build completes, selectConsole Outputto see build details.
After the build completes, selectConsole Outputto see build details.
Verify your web app
Do the following to verify the WAR file is deployed successfully to your web app:
Browse to the following URL:http://&lt;app_name>.azurewebsites.net/api/calculator/ping
Browse to the following URL:http://&lt;app_name>.azurewebsites.net/api/calculator/ping
http://&lt;app_name>.azurewebsites.net/api/calculator/ping
You should see text similar to the following:Welcome to Java Web App!!! This is updated!
Today's date
You should see text similar to the following:
Welcome to Java Web App!!! This is updated!
Today's date
Welcome to Java Web App!!! This is updated!
Today's date
Browse to the following URL (substitute <x> and <y> with two values to be summed): http://<app_name>.azurewebsites.net/api/calculator/add?x=<x>&y=<y>.
Browse to the following URL (substitute <x> and <y> with two values to be summed): http://<app_name>.azurewebsites.net/api/calculator/add?x=<x>&y=<y>.

Deploy to Azure App Service on Linux
App Service can also host web apps natively on Linux for supported application stacks. It can also run custom Linux containers (also known as Web App for Containers.)
You can modify the script to deploy to an Azure App Service on Linux. App Service on Linux supports Docker. As such, you provide a Dockerfile that packages your web app with service runtime into a Docker image. The plug-in builds the image, pushes it to a Docker registry, and deploys the image to your web app.
Refer toMigrate custom software to Azure App Service using a custom containerto create an Azure App Service on Linux and an Azure Container Registry.az group create --name myResourceGroup2 --location westus2
    az acr create --name myACRName --resource-group myResourceGroup2 --sku Basic --admin-enabled true
    az appservice plan create --name myAppServicePlan --resource-group  myResourceGroup2 --is-linux
    az webapp create --resource-group myResourceGroup2 --plan myAppServicePlan --name myApp --deployment-container-image-name myACRName.azurecr.io/calculator:latest
Refer toMigrate custom software to Azure App Service using a custom containerto create an Azure App Service on Linux and an Azure Container Registry.
az group create --name myResourceGroup2 --location westus2
    az acr create --name myACRName --resource-group myResourceGroup2 --sku Basic --admin-enabled true
    az appservice plan create --name myAppServicePlan --resource-group  myResourceGroup2 --is-linux
    az webapp create --resource-group myResourceGroup2 --plan myAppServicePlan --name myApp --deployment-container-image-name myACRName.azurecr.io/calculator:latest
az group create --name myResourceGroup2 --location westus2
    az acr create --name myACRName --resource-group myResourceGroup2 --sku Basic --admin-enabled true
    az appservice plan create --name myAppServicePlan --resource-group  myResourceGroup2 --is-linux
    az webapp create --resource-group myResourceGroup2 --plan myAppServicePlan --name myApp --deployment-container-image-name myACRName.azurecr.io/calculator:latest
Install Docker on your Jenkins.
Install Docker on your Jenkins.
Make sureDocker Pipeline plug-inis installed.
Make sureDocker Pipeline plug-inis installed.
In the sameSimple Java Web App for Azurerepo you forked, edit theJenkinsfile2file as follows:Update the subscription ID and tenant ID.withEnv(['AZURE_SUBSCRIPTION_ID=<mySubscriptionId>',
        'AZURE_TENANT_ID=<myTenantId>']) {Update to the names of your resource group, web app, and ACR (replacing the placeholders with your values).def webAppResourceGroup = '<resource_group>'
def webAppName = '<app_name>'
def acrName = '<registry>'Update<azsrvprincipal\>to your credential IDwithCredentials([usernamePassword(credentialsId: '<service_principal>', passwordVariable: 'AZURE_CLIENT_SECRET', usernameVariable: 'AZURE_CLIENT_ID')]) {
In the sameSimple Java Web App for Azurerepo you forked, edit theJenkinsfile2file as follows:
Update the subscription ID and tenant ID.withEnv(['AZURE_SUBSCRIPTION_ID=<mySubscriptionId>',
        'AZURE_TENANT_ID=<myTenantId>']) {
Update the subscription ID and tenant ID.
withEnv(['AZURE_SUBSCRIPTION_ID=<mySubscriptionId>',
        'AZURE_TENANT_ID=<myTenantId>']) {
withEnv(['AZURE_SUBSCRIPTION_ID=<mySubscriptionId>',
        'AZURE_TENANT_ID=<myTenantId>']) {
Update to the names of your resource group, web app, and ACR (replacing the placeholders with your values).def webAppResourceGroup = '<resource_group>'
def webAppName = '<app_name>'
def acrName = '<registry>'
Update to the names of your resource group, web app, and ACR (replacing the placeholders with your values).
def webAppResourceGroup = '<resource_group>'
def webAppName = '<app_name>'
def acrName = '<registry>'
def webAppResourceGroup = '<resource_group>'
def webAppName = '<app_name>'
def acrName = '<registry>'
Update<azsrvprincipal\>to your credential IDwithCredentials([usernamePassword(credentialsId: '<service_principal>', passwordVariable: 'AZURE_CLIENT_SECRET', usernameVariable: 'AZURE_CLIENT_ID')]) {
Update<azsrvprincipal\>to your credential ID
<azsrvprincipal\>
withCredentials([usernamePassword(credentialsId: '<service_principal>', passwordVariable: 'AZURE_CLIENT_SECRET', usernameVariable: 'AZURE_CLIENT_ID')]) {
withCredentials([usernamePassword(credentialsId: '<service_principal>', passwordVariable: 'AZURE_CLIENT_SECRET', usernameVariable: 'AZURE_CLIENT_ID')]) {
Create a new Jenkins pipeline as you did when deploying to Azure web app in Windows usingJenkinsfile2.
Create a new Jenkins pipeline as you did when deploying to Azure web app in Windows usingJenkinsfile2.
Jenkinsfile2
Run your new job.
Run your new job.
To verify, in Azure CLI, run the following command:az acr repository list -n <myRegistry> -o jsonYou should see results similar to the following:[
"calculator"
]
To verify, in Azure CLI, run the following command:
az acr repository list -n <myRegistry> -o json
az acr repository list -n <myRegistry> -o json
You should see results similar to the following:
[
"calculator"
]
[
"calculator"
]
Browse tohttp://<app_name>.azurewebsites.net/api/calculator/ping(replacing the placeholder). You should see similar results to the following:Welcome to Java Web App!!! This is updated!
Today's date
Browse tohttp://<app_name>.azurewebsites.net/api/calculator/ping(replacing the placeholder). You should see similar results to the following:
http://<app_name>.azurewebsites.net/api/calculator/ping
Welcome to Java Web App!!! This is updated!
Today's date
Welcome to Java Web App!!! This is updated!
Today's date
Browse tohttp://<app_name>.azurewebsites.net/api/calculator/add?x=<x>&y=<y>(replacing the placeholders). The values you specify forxandyare summed and displayed.
Browse tohttp://<app_name>.azurewebsites.net/api/calculator/add?x=<x>&y=<y>(replacing the placeholders). The values you specify forxandyare summed and displayed.
http://<app_name>.azurewebsites.net/api/calculator/add?x=<x>&y=<y>
x
y
Next steps
Jenkins on Azure
Feedback
Was this page helpful?
Additional resources