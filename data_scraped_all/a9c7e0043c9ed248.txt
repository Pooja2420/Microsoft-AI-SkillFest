Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
bag_unpack plugin
Article
2024-11-21
5 contributors
In this article
Applies to: 창혵Microsoft Fabric창혵Azure Data Explorer
Thebag_unpackplugin unpacks a single column of typedynamic, by treating each property bag top-level slot as a column. The plugin is invoked with theevaluateoperator.
bag_unpack
dynamic
evaluate
Syntax
T|evaluatebag_unpack(Column[,OutputColumnPrefix] [,columnsConflict] [,ignoredProperties])[:OutputSchema]
|
evaluate
bag_unpack(
,
,
,
)
:
Learn more aboutsyntax conventions.
Parameters
string
dynamic
string
string
error
replace_source
keep_source
dynamic
bag_unpack
Output schema syntax
(ColumnName:ColumnType[,...])
(
:
,
)
To add all columns of the input table to the plugin output, use a wildcard*as the first parameter, as follows:
*
(*,ColumnName:ColumnType[,...])
(
*
,
:
,
)
Returns
Thebag_unpackplugin returns a table with as many records as its tabular input (T). The schema of the table is the same as the schema of its tabular input with the following modifications:
bag_unpack
The specified input column (Column) is removed.
The schema is extended with as many columns as there are distinct slots in
the top-level property bag values ofT. The name of each column corresponds
to the name of each slot, optionally prefixed byOutputColumnPrefix. Its
type is either the type of the slot, if all values of the same slot have the
same type, ordynamic, if the values differ in type.
dynamic
Note
If theOutputSchemaisn't specified, the plugin's output schema varies according to the input data values. Therefore, multiple executions of the plugin using different data inputs, may produce different output schema.
If theOutputSchemaisn't specified, the plugin's output schema varies according to the input data values. Therefore, multiple executions of the plugin using different data inputs, may produce different output schema.
The input data to the plugin must be such that the output schema follows all the rules for a tabular schema. In particular:An output column name can't be the same as an existing column in the tabular inputT, unless it's the column to be unpacked (Column), since that will produce two columns with the same name.All slot names, when prefixed byOutputColumnPrefix, must be valid entity names and follow theidentifier naming rules.
The input data to the plugin must be such that the output schema follows all the rules for a tabular schema. In particular:
An output column name can't be the same as an existing column in the tabular inputT, unless it's the column to be unpacked (Column), since that will produce two columns with the same name.
An output column name can't be the same as an existing column in the tabular inputT, unless it's the column to be unpacked (Column), since that will produce two columns with the same name.
All slot names, when prefixed byOutputColumnPrefix, must be valid entity names and follow theidentifier naming rules.
All slot names, when prefixed byOutputColumnPrefix, must be valid entity names and follow theidentifier naming rules.
Null values are ignored.
Null values are ignored.
Examples
Expand a bag
Run the query
datatable(d:dynamic)
[
    dynamic({"Name": "John", "Age":20}),
    dynamic({"Name": "Dave", "Age":40}),
    dynamic({"Name": "Jasmine", "Age":30}),
]
| evaluate bag_unpack(d)
datatable(d:dynamic)
[
    dynamic({"Name": "John", "Age":20}),
    dynamic({"Name": "Dave", "Age":40}),
    dynamic({"Name": "Jasmine", "Age":30}),
]
| evaluate bag_unpack(d)
Output
Expand a bag with OutputColumnPrefix
Expand a bag and use theOutputColumnPrefixoption to produce column names that begin with the prefix 'Property_'.
OutputColumnPrefix
Run the query
datatable(d:dynamic)
[
    dynamic({"Name": "John", "Age":20}),
    dynamic({"Name": "Dave", "Age":40}),
    dynamic({"Name": "Jasmine", "Age":30}),
]
| evaluate bag_unpack(d, 'Property_')
datatable(d:dynamic)
[
    dynamic({"Name": "John", "Age":20}),
    dynamic({"Name": "Dave", "Age":40}),
    dynamic({"Name": "Jasmine", "Age":30}),
]
| evaluate bag_unpack(d, 'Property_')
Output
Expand a bag with columnsConflict
Expand a bag and use thecolumnsConflictoption to resolve conflicts between existing columns and columns produced by thebag_unpack()operator.
columnsConflict
bag_unpack()
Run the query
datatable(Name:string, d:dynamic)
[
    'Old_name', dynamic({"Name": "John", "Age":20}),
    'Old_name', dynamic({"Name": "Dave", "Age":40}),
    'Old_name', dynamic({"Name": "Jasmine", "Age":30}),
]
| evaluate bag_unpack(d, columnsConflict='replace_source') // Use new name
datatable(Name:string, d:dynamic)
[
    'Old_name', dynamic({"Name": "John", "Age":20}),
    'Old_name', dynamic({"Name": "Dave", "Age":40}),
    'Old_name', dynamic({"Name": "Jasmine", "Age":30}),
]
| evaluate bag_unpack(d, columnsConflict='replace_source') // Use new name
Output
Run the query
datatable(Name:string, d:dynamic)
[
    'Old_name', dynamic({"Name": "John", "Age":20}),
    'Old_name', dynamic({"Name": "Dave", "Age":40}),
    'Old_name', dynamic({"Name": "Jasmine", "Age":30}),
]
| evaluate bag_unpack(d, columnsConflict='keep_source') // Keep old name
datatable(Name:string, d:dynamic)
[
    'Old_name', dynamic({"Name": "John", "Age":20}),
    'Old_name', dynamic({"Name": "Dave", "Age":40}),
    'Old_name', dynamic({"Name": "Jasmine", "Age":30}),
]
| evaluate bag_unpack(d, columnsConflict='keep_source') // Keep old name
Output
Expand a bag with ignoredProperties
Expand a bag and use theignoredPropertiesoption to ignore certain properties in the property bag.
ignoredProperties
Run the query
datatable(d:dynamic)
[
    dynamic({"Name": "John", "Age":20, "Address": "Address-1" }),
    dynamic({"Name": "Dave", "Age":40, "Address": "Address-2"}),
    dynamic({"Name": "Jasmine", "Age":30, "Address": "Address-3"}),
]
// Ignore 'Age' and 'Address' properties
| evaluate bag_unpack(d, ignoredProperties=dynamic(['Address', 'Age']))
datatable(d:dynamic)
[
    dynamic({"Name": "John", "Age":20, "Address": "Address-1" }),
    dynamic({"Name": "Dave", "Age":40, "Address": "Address-2"}),
    dynamic({"Name": "Jasmine", "Age":30, "Address": "Address-3"}),
]
// Ignore 'Age' and 'Address' properties
| evaluate bag_unpack(d, ignoredProperties=dynamic(['Address', 'Age']))
Output
Expand a bag with a query-defined OutputSchema
Expand a bag and use theOutputSchemaoption to allow various optimizations to be evaluated before running the actual query.
OutputSchema
Run the query
datatable(d:dynamic)
[
    dynamic({"Name": "John", "Age":20}),
    dynamic({"Name": "Dave", "Age":40}),
    dynamic({"Name": "Jasmine", "Age":30}),
]
| evaluate bag_unpack(d) : (Name:string, Age:long)
datatable(d:dynamic)
[
    dynamic({"Name": "John", "Age":20}),
    dynamic({"Name": "Dave", "Age":40}),
    dynamic({"Name": "Jasmine", "Age":30}),
]
| evaluate bag_unpack(d) : (Name:string, Age:long)
Output
Expand a bag and use theOutputSchemaoption to allow various optimizations to be evaluated before running the actual query. Use a wildcard*to return all columns of the input table.
OutputSchema
*
Run the query
datatable(d:dynamic, Description: string)
[
    dynamic({"Name": "John", "Age":20}), "Student",
    dynamic({"Name": "Dave", "Age":40}), "Teacher",
    dynamic({"Name": "Jasmine", "Age":30}), "Student",
]
| evaluate bag_unpack(d) : (*, Name:string, Age:long)
datatable(d:dynamic, Description: string)
[
    dynamic({"Name": "John", "Age":20}), "Student",
    dynamic({"Name": "Dave", "Age":40}), "Teacher",
    dynamic({"Name": "Jasmine", "Age":30}), "Student",
]
| evaluate bag_unpack(d) : (*, Name:string, Age:long)
Output
Related content
parse_json function
mv-expand operator
Feedback
Was this page helpful?
Additional resources