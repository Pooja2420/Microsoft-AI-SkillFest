Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Quickstart: Create Bicep files with Visual Studio Code
Article
2025-03-25
6 contributors
In this article
This quickstart guides you how to use Visual Studio Code to create aBicep file. You create a storage account and a virtual network. You also learn how the Bicep extension provides type safety, syntax validation, and autocompletion to simplify development.
Visual Studio supports a similar authoring experience. SeeQuickstart: Create Bicep files with Visual Studiofor more information.
Prerequisites
If you don't have an Azure subscription,create a free accountbefore you start.
To set up your environment for Bicep development, seeInstall Bicep tools. After completing those steps, you haveVisual Studio Codeand theBicep extensioninstalled. You also have either the latestAzure CLIversion orAzure PowerShell module.
Add resource snippet
Visual Studio Code with the Bicep extension provides predefined snippets to simplify development. In this quickstart, you add a snippet that creates a virtual network.
Launch Visual Studio Code, and create a new file namedmain.bicep. Inmain.bicep, typevnet, selectres-vnetfrom the list, and then pressTABorENTER.

Tip
If you don't see those IntelliSense options in Visual Studio Code, make sure you've installed the Bicep extension as specified inPrerequisites. If you have installed the extension, give the Bicep language service some time to start after opening your Bicep file. It usually starts quickly, and you won't have IntelliSense options until it starts. A notification in the lower-right corner indicates that the service is starting. When that notification disappears, the service is running.
Your Bicep file now contains the following code:
resource virtualNetwork 'Microsoft.Network/virtualNetworks@2019-11-01' = {
  name: 'name'
  location: location
  properties: {
    addressSpace: {
      addressPrefixes: [
        '10.0.0.0/16'
      ]
    }
    subnets: [
      {
        name: 'Subnet-1'
        properties: {
          addressPrefix: '10.0.0.0/24'
        }
      }
      {
        name: 'Subnet-2'
        properties: {
          addressPrefix: '10.0.1.0/24'
        }
      }
    ]
  }
}
resource virtualNetwork 'Microsoft.Network/virtualNetworks@2019-11-01' = {
  name: 'name'
  location: location
  properties: {
    addressSpace: {
      addressPrefixes: [
        '10.0.0.0/16'
      ]
    }
    subnets: [
      {
        name: 'Subnet-1'
        properties: {
          addressPrefix: '10.0.0.0/24'
        }
      }
      {
        name: 'Subnet-2'
        properties: {
          addressPrefix: '10.0.1.0/24'
        }
      }
    ]
  }
}
Within this snippet, you find all the necessary values for defining a virtual network. You might notice two curly underlines. A yellow one denotes a warning related to an outdated API version, while a red curly underline signals an error caused by a missing parameter definition. TheBicep linterchecks Bicep files for syntax errors and best practice violations. Hover your cursor over@2019-11-01, and a popup pane showsUse more recent API version for 'Microsoft.Network/virtualNetworks'. SelectQuick fixfrom the popup pane, and then selectReplace with 2024-05-01to update the API version.
@2019-11-01
Alternatively, remove@2019-11-01, and replace it with@. Select the latest API version.
@2019-11-01
@

You'll fix the missing parameter definition error in the next section.
You can also modify this code to meet your requirements. For example, sincenameisn't a clear name for the virtual network, you can change thenameproperty toexampleVnet:
name
name
exampleVnet
name: 'exampleVNet'
name: 'exampleVNet'
Add parameter
The code snippet you added in the last section misses a parameter definition,location, as indicated by the red curly underline. At the top of the file, add:
location
param location
param location
When you add a space afterlocation, notice that IntelliSense offers the data types that are available for the parameter. Selectstring.

Give the parameter a default value:
param location string = resourceGroup().location
param location string = resourceGroup().location
The preceding line assigns the location of the resource group to the virtual network resource. For more information about the function used in the default value, seeresourceGroup().
resourceGroup()
At the top of the file, add another parameter for the storage account name (which you create later in the quickstart) with a default value:
param storageAccountName string = 'store${uniqueString(resourceGroup().id)}'
param storageAccountName string = 'store${uniqueString(resourceGroup().id)}'
For more information, seeInterpolationanduniqueString().
uniqueString()
This parameter works fine, but storage accounts have limits on the length of the name. The name must have at least 3 and no more than 24 characters. You can specify these requirements by adding decorators to the parameter.
Add a line above the parameter, and type@. You see the available decorators. Notice that there are decorators for bothminLengthandmaxLength.

Add both decorators, and specify the character limits (e.g., 3 and 24 below):
@minLength(3)
@maxLength(24)
param storageAccountName string = 'store${uniqueString(resourceGroup().id)}'
@minLength(3)
@maxLength(24)
param storageAccountName string = 'store${uniqueString(resourceGroup().id)}'
You can also add a description for the parameter. Include information that helps people deploying the Bicep file to understand which value to provide:
@minLength(3)
@maxLength(24)
@description('Provide a name for the storage account. Use only lowercase letters and numbers. The name must be unique across Azure.')
param storageAccountName string = 'store${uniqueString(resourceGroup().id)}'
@minLength(3)
@maxLength(24)
@description('Provide a name for the storage account. Use only lowercase letters and numbers. The name must be unique across Azure.')
param storageAccountName string = 'store${uniqueString(resourceGroup().id)}'
Your parameters are ready to use.
Add resource
Instead of using a snippet to define the storage account, you use IntelliSense to set the values. IntelliSense makes this step easier than having to manually type the values.
To define a resource, use theresourcekeyword. Below your virtual network, typeresource storageAccount:
resource
resource storageAccount
resource storageAccount
storageAccountis a symbolic name for the resource you're deploying. You can use this name to reference the resource in other parts of your Bicep file.
When you add a space after the symbolic name, a list of resource types is displayed. Continue typingstorageaccuntil you can select it from the available options.

After selectingMicrosoft.Storage/storageAccounts, you're presented with the available API versions. Select the latest version. For the following screenshot, it is2023-05-01.

After the single quote for the resource type, add=and a space. You're presented with options for adding properties to the resource. Selectrequired-properties.

This option adds all of the properties for the resource type that are required for deployment. After selecting this option, your storage account has the following properties:
resource storageAccount 'Microsoft.Storage/storageAccounts@2023-05-01' = {
  name:
  location:
  sku: {
    name:
  }
  kind:
}
resource storageAccount 'Microsoft.Storage/storageAccounts@2023-05-01' = {
  name:
  location:
  sku: {
    name:
  }
  kind:
}
You're almost done, and the next step is to provide values for those properties.
Again, IntelliSense helps you. SetnametostorageAccountName, which is the parameter that contains a name for the storage account. Forlocation, set it tolocation, which is a parameter that you created earlier. When addingsku.nameandkind, IntelliSense presents the valid options.
name
storageAccountName
location
location
sku.name
kind
To add optional properties alongside the required properties, place the cursor at the desired location, and pressCtrl+Space. The following screenshot shows how IntelliSense suggests available properties:

When finished, you have:
@minLength(3)
@maxLength(24)
@description('Provide a name for the storage account. Use only lowercase letters and numbers. The name must be unique across Azure.')
param storageAccountName string = 'store${uniqueString(resourceGroup().id)}'
param location string = resourceGroup().location

resource virtualNetwork 'Microsoft.Network/virtualNetworks@2024-05-01' = {
  name: 'exampleVNet'
  location: location
  properties: {
    addressSpace: {
      addressPrefixes: [
        '10.0.0.0/16'
      ]
    }
    subnets: [
      {
        name: 'Subnet-1'
        properties: {
          addressPrefix: '10.0.0.0/24'
        }
      }
      {
        name: 'Subnet-2'
        properties: {
          addressPrefix: '10.0.1.0/24'
        }
      }
    ]
  }
}

resource storageAccount 'Microsoft.Storage/storageAccounts@2023-05-01' = {
  name: storageAccountName
  location: location
  sku: {
    name: 'Standard_LRS'
  }
  kind: 'StorageV2'
}
@minLength(3)
@maxLength(24)
@description('Provide a name for the storage account. Use only lowercase letters and numbers. The name must be unique across Azure.')
param storageAccountName string = 'store${uniqueString(resourceGroup().id)}'
param location string = resourceGroup().location

resource virtualNetwork 'Microsoft.Network/virtualNetworks@2024-05-01' = {
  name: 'exampleVNet'
  location: location
  properties: {
    addressSpace: {
      addressPrefixes: [
        '10.0.0.0/16'
      ]
    }
    subnets: [
      {
        name: 'Subnet-1'
        properties: {
          addressPrefix: '10.0.0.0/24'
        }
      }
      {
        name: 'Subnet-2'
        properties: {
          addressPrefix: '10.0.1.0/24'
        }
      }
    ]
  }
}

resource storageAccount 'Microsoft.Storage/storageAccounts@2023-05-01' = {
  name: storageAccountName
  location: location
  sku: {
    name: 'Standard_LRS'
  }
  kind: 'StorageV2'
}
For more information about the Bicep syntax, seeBicep file structure and syntax.
Visualize resources
Bicep Visualizer shows you a graphic representation of the resources in your file.
Select the Bicep Visualizer button in the upper-right corner to open the tool:

This visualizer shows the resources defined in the Bicep file and the connectors between their dependencies. The two resources defined in this quickstart don't have a dependent relationship, so there isn't a connector between them:

Deploy the Bicep file
Right-click the Bicep file inside the Visual Studio Code, and then selectDeploy Bicep file.
Right-click the Bicep file inside the Visual Studio Code, and then selectDeploy Bicep file.

In thePlease enter name for deploymenttext box, typedeployStorageAndVNet, and then pressENTER.
In thePlease enter name for deploymenttext box, typedeployStorageAndVNet, and then pressENTER.

From theSelect Resource Grouplistbox on the top, selectCreate new Resource Group.
From theSelect Resource Grouplistbox on the top, selectCreate new Resource Group.
EnterexampleRGas the resource group name, and then pressENTER.
EnterexampleRGas the resource group name, and then pressENTER.
Select a location for the resource group, selectCentral USor a location of your choice, and then pressENTER.
Select a location for the resource group, selectCentral USor a location of your choice, and then pressENTER.
FromSelect a parameters file, selectNone.
FromSelect a parameters file, selectNone.
It takes a few moments to create the resources. For more information, seeDeploy Bicep files with Visual Studio Code.
You can also use the Azure CLI or Azure PowerShell to deploy the Bicep file:
Azure CLI
Azure PowerShell
az group create --name exampleRG --location eastus

az deployment group create --resource-group exampleRG --template-file main.bicep --parameters storageAccountName=uniquename
az group create --name exampleRG --location eastus

az deployment group create --resource-group exampleRG --template-file main.bicep --parameters storageAccountName=uniquename
New-AzResourceGroup -Name exampleRG -Location eastus

New-AzResourceGroupDeployment -ResourceGroupName exampleRG -TemplateFile ./main.bicep -storageAccountName "uniquename"
New-AzResourceGroup -Name exampleRG -Location eastus

New-AzResourceGroupDeployment -ResourceGroupName exampleRG -TemplateFile ./main.bicep -storageAccountName "uniquename"
When the deployment finishes, you should see a message describing that the deployment succeeded.
Clean up resources
When the Azure resources are no longer needed, use the Azure CLI or Azure PowerShell module to delete the quickstart resource group.
Azure CLI
Azure PowerShell
az group delete --name exampleRG
az group delete --name exampleRG
Remove-AzResourceGroup -Name exampleRG
Remove-AzResourceGroup -Name exampleRG
Next steps
ExploreLearn modules for Bicep.
Feedback
Was this page helpful?
Additional resources