Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Azure Kubernetes Service (AKS) for Extended Zones (preview)
Article
2025-03-26
3 contributors
In this article
Azure Kubernetes Service (AKS) for Extended Zones provides an extensive and sophisticated set of capabilities that make it simpler to deploy and operate a fully managed Kubernetes cluster in an Extended Zone scenario.
Important
AKS preview features are available on a self-service, opt-in basis. Previews are provided "as is" and "as available," and they're excluded from the service-level agreements and limited warranty. AKS previews are partially covered by customer support on a best-effort basis. As such, these features aren't meant for production use. For more information, see the following support articles:
AKS support policies
Azure support FAQ
What are Azure Extended Zones?
Azure Extended Zones are small-footprint extensions of Azure placed in metros, industry centers, or a specific jurisdiction to serve low latency and data residency workloads. Azure Extended Zones supports virtual machines (VMs), containers, storage, and a selected set of Azure services. They can run latency-sensitive and throughput-intensive applications close to end users and within approved data residency boundaries.
Azure Extended Zones are part of the Microsoft global network that provides secure, reliable, high-bandwidth connectivity between applications that run on an Azure Extended Zone close to the user. Extended Zones address low latency and data residency by bringing all the benefits of the Azure ecosystem (access, user experience, automation, security, and more) closer to you or your jurisdiction. Azure Extended Zone sites are associated with a parent Azure region that hosts all the control plane functions associated with the services running in the extended zone.
Extended Zones use cases
Azure Extended Zones enablelow latencyanddata residencyscenarios. For example, you might want to run media editing software remotely with low latency or keep your applications' data within a specific geography for privacy, regulatory, and compliance reasons.
The following table highlights some of the industries and use cases where Azure Extended Zones can provide benefits:
For more information, see theAzure Extended Zones overview.
What is AKS for Extended Zones?
AKS for Extended Zones enables organizations to meet the unique needs of extended zones while leveraging the container orchestration and management capabilities of AKS, making the deployment and management of applications hosted in extended zones much simpler. Just like a typical AKS deployment, the Azure platform is responsible for maintaining the AKS control plane and providing the infrastructure, while your organization retains control over the worker nodes that run the applications.

Creating an AKS for Extended Zones cluster uses an optimized architecture that is specifically tailored to meet the unique needs and requirements of Extended Zones applications and workloads. The control plane of the clusters is created, deployed, and configured in the closest Azure region, while the agent nodes and node pools attached to the cluster are located in an Azure Extended Zone. The components in an AKS for Extended Zones cluster are identical to those in a typical cluster deployed in an Azure region, ensuring that the same level of functionality and performance is maintained. For more information, seeKubernetes core concepts for AKS.
Deploy a cluster in an Azure Extended Zone location
Deploying an AKS cluster in an Azure Extended Zone is similar to deploying an AKS cluster in any other region. All resource providers provide a field namedextendedLocation, which you can use to deploy resources in an Azure Extended Zone. This allows for precise and targeted deployment of your AKS cluster.
extendedLocation
Prerequisites
Before you can deploy an AKS for Extended Zones cluster, your subscription needs to have access to the targeted Azure Extended Zone location. This access is provided through our onboarding process, done by following the steps outlined in theAzure Extended Zones overview.
Your cluster must be running Kubernetes version 1.24 or later.
The identity you're using to create your cluster must have the appropriate minimum permissions. For more information on access and identity for AKS, seeAccess and identity options for Azure Kubernetes Service (AKS).
Limitations and constraints
When deploying an AKS cluster in an Azure Extended Zone, the following limitations and constraints apply:
AKS for Extended Zones allows for autoscaling only up to 100 nodes in a node pool.
In all Azure Extended Zones, the maximum node count is 100.
In Azure Extended Zones, only selected VM SKUs are offered.
ARM template
Azure CLI
Terraform
You use theextendedLocationparameter to specify the desired Azure Extended zone in an ARM template.
extendedLocation
"extendedLocation": {
    "name": "<extended-zone-id>",
    "type": "EdgeZone",
},
"extendedLocation": {
    "name": "<extended-zone-id>",
    "type": "EdgeZone",
},
The following ARM template deploys a new cluster in an Azure Extended Zone.
{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.9.1.41621",
      "templateHash": "2637152180661081755"
    }
  },
  "parameters": {
    "clusterName": {
      "type": "string",
      "defaultValue": "myAKSCluster",
      "metadata": {
        "description": "The name of the Managed Cluster resource."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The location of the Managed Cluster resource."
      }
    },
    "edgeZoneName": {
      "type": "String",
      "metadata": {
        "description": "The name of the Azure Extended Zone"
      }
    },
    "dnsPrefix": {
      "type": "string",
      "metadata": {
        "description": "Optional DNS prefix to use with hosted Kubernetes API server FQDN."
      }
    },
    "osDiskSizeGB": {
      "type": "int",
      "defaultValue": 0,
      "maxValue": 1023,
      "minValue": 0,
      "metadata": {
        "description": "Disk size (in GB) to provision for each of the agent pool nodes. This value ranges from 0 to 1023. Specifying 0 will apply the default disk size for that agentVMSize."
      }
    },
    "agentCount": {
      "type": "int",
      "defaultValue": 3,
      "maxValue": 50,
      "minValue": 1,
      "metadata": {
        "description": "The number of nodes for the cluster."
      }
    },
    "agentVMSize": {
      "type": "string",
      "defaultValue": "standard_d2s_v3",
      "metadata": {
        "description": "The size of the Virtual Machine."
      }
    },
    "linuxAdminUsername": {
      "type": "string",
      "metadata": {
        "description": "User name for the Linux Virtual Machines."
      }
    },
    "sshRSAPublicKey": {
      "type": "string",
      "metadata": {
        "description": "Configure all linux machines with the SSH RSA public key string. Your key should include three parts, for example 'ssh-rsa AAAAB...snip...UcyupgH azureuser@linuxvm'"
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.ContainerService/managedClusters",
      "apiVersion": "2022-05-02-preview",
      "name": "[parameters('clusterName')]",
      "location": "[parameters('location')]",
      "extendedLocation": {
        "name": "[parameters('edgeZoneName')]",
        "type": "EdgeZone"
      }
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "dnsPrefix": "[parameters('dnsPrefix')]",
        "agentPoolProfiles": [
          {
            "name": "agentpool",
            "osDiskSizeGB": "[parameters('osDiskSizeGB')]",
            "count": "[parameters('agentCount')]",
            "vmSize": "[parameters('agentVMSize')]",
            "osType": "Linux",
            "mode": "System"
          }
        ],
        "linuxProfile": {
          "adminUsername": "[parameters('linuxAdminUsername')]",
          "ssh": {
            "publicKeys": [
              {
                "keyData": "[parameters('sshRSAPublicKey')]"
              }
            ]
          }
        }
      }
    }
  ],
  "outputs": {
    "controlPlaneFQDN": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.ContainerService/managedClusters', parameters('clusterName'))).fqdn]"
    }
  }
}
{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.9.1.41621",
      "templateHash": "2637152180661081755"
    }
  },
  "parameters": {
    "clusterName": {
      "type": "string",
      "defaultValue": "myAKSCluster",
      "metadata": {
        "description": "The name of the Managed Cluster resource."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The location of the Managed Cluster resource."
      }
    },
    "edgeZoneName": {
      "type": "String",
      "metadata": {
        "description": "The name of the Azure Extended Zone"
      }
    },
    "dnsPrefix": {
      "type": "string",
      "metadata": {
        "description": "Optional DNS prefix to use with hosted Kubernetes API server FQDN."
      }
    },
    "osDiskSizeGB": {
      "type": "int",
      "defaultValue": 0,
      "maxValue": 1023,
      "minValue": 0,
      "metadata": {
        "description": "Disk size (in GB) to provision for each of the agent pool nodes. This value ranges from 0 to 1023. Specifying 0 will apply the default disk size for that agentVMSize."
      }
    },
    "agentCount": {
      "type": "int",
      "defaultValue": 3,
      "maxValue": 50,
      "minValue": 1,
      "metadata": {
        "description": "The number of nodes for the cluster."
      }
    },
    "agentVMSize": {
      "type": "string",
      "defaultValue": "standard_d2s_v3",
      "metadata": {
        "description": "The size of the Virtual Machine."
      }
    },
    "linuxAdminUsername": {
      "type": "string",
      "metadata": {
        "description": "User name for the Linux Virtual Machines."
      }
    },
    "sshRSAPublicKey": {
      "type": "string",
      "metadata": {
        "description": "Configure all linux machines with the SSH RSA public key string. Your key should include three parts, for example 'ssh-rsa AAAAB...snip...UcyupgH azureuser@linuxvm'"
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.ContainerService/managedClusters",
      "apiVersion": "2022-05-02-preview",
      "name": "[parameters('clusterName')]",
      "location": "[parameters('location')]",
      "extendedLocation": {
        "name": "[parameters('edgeZoneName')]",
        "type": "EdgeZone"
      }
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "dnsPrefix": "[parameters('dnsPrefix')]",
        "agentPoolProfiles": [
          {
            "name": "agentpool",
            "osDiskSizeGB": "[parameters('osDiskSizeGB')]",
            "count": "[parameters('agentCount')]",
            "vmSize": "[parameters('agentVMSize')]",
            "osType": "Linux",
            "mode": "System"
          }
        ],
        "linuxProfile": {
          "adminUsername": "[parameters('linuxAdminUsername')]",
          "ssh": {
            "publicKeys": [
              {
                "keyData": "[parameters('sshRSAPublicKey')]"
              }
            ]
          }
        }
      }
    }
  ],
  "outputs": {
    "controlPlaneFQDN": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.ContainerService/managedClusters', parameters('clusterName'))).fqdn]"
    }
  }
}
If you're unfamiliar with ARM templates, see the tutorial ondeploying a local ARM template.
Prepare the following variables to deploy an AKS cluster in an Azure Extended Zone using the Azure CLI:
SUBSCRIPTION="<your-subscription>"
RG_NAME="<your-resource-group>"
CLUSTER_NAME="<your-cluster>"
EXTENDED_ZONE_NAME="<extended-zone-id>"
LOCATION="<parent-region>" # Ensure this location corresponds to the parent region for your targeted Azure Extended Zone
SUBSCRIPTION="<your-subscription>"
RG_NAME="<your-resource-group>"
CLUSTER_NAME="<your-cluster>"
EXTENDED_ZONE_NAME="<extended-zone-id>"
LOCATION="<parent-region>" # Ensure this location corresponds to the parent region for your targeted Azure Extended Zone
After making sure you're logged in and using the appropriate subscription, useaz aks createto deploy the cluster, specifying the targeted Azure Extended Zone with the--edge-zoneproperty.
az aks create
--edge-zone
# Log in to Azure
az login

# Set the subscription you want to create the cluster on
az account set --subscription $SUBSCRIPTION 

# Create the resource group
az group create --name $RG_NAME --location $LOCATION

# Deploy the cluster in your designated Azure Extended Zone
az aks create \
    --resource-group $RG_NAME \
    --name $CLUSTER_NAME \
    --edge-zone $EXTENDED_ZONE_NAME \
    --location $LOCATION \
    --generate-ssh-keys
# Log in to Azure
az login

# Set the subscription you want to create the cluster on
az account set --subscription $SUBSCRIPTION 

# Create the resource group
az group create --name $RG_NAME --location $LOCATION

# Deploy the cluster in your designated Azure Extended Zone
az aks create \
    --resource-group $RG_NAME \
    --name $CLUSTER_NAME \
    --edge-zone $EXTENDED_ZONE_NAME \
    --location $LOCATION \
    --generate-ssh-keys
After deploying an AKS for Extended Zones cluster, you can check the status and monitor the cluster's metrics using the Azure portal or the Azure CLI.
The following code creates a resource group and a Kubernetes cluster in Azure, with auto-scaling enabled and specific network settings, using Terraform.
Note
The sample code for this article is located in theAzure Terraform GitHub repo. You can view the log file containing thetest results from current and previous versions of Terraform.
See morearticles and sample code showing how to use Terraform to manage Azure resources
Create a directory in which to test and run the sample Terraform code, and make it the current directory.
Create a directory in which to test and run the sample Terraform code, and make it the current directory.
Create a file namedmain.tf, and insert the following code:resource "random_pet" "rg_name" {
  prefix = var.resource_group_name_prefix
}

resource "azurerm_resource_group" "rg" {
  location = var.resource_group_location
  name     = random_pet.rg_name.id
}

resource "random_pet" "azurerm_kubernetes_cluster_name" {
  prefix = "cluster"
}

resource "random_pet" "azurerm_kubernetes_cluster_dns_prefix" {
  prefix = "dns"
}

resource "azapi_resource" "aks" {
  type      = "Microsoft.ContainerService/ManagedClusters@2024-05-01"
  name      = random_pet.azurerm_kubernetes_cluster_name.id
  parent_id = azurerm_resource_group.rg.id
  location  = azurerm_resource_group.rg.location
  identity {
    type = "SystemAssigned"
  }
  body = {
    extendedLocation = {
      name = replace(lower(var.aks_extended_zone), " ", "")
      type = "EdgeZone"
    }
    sku = {
      name = "Base"
      tier = "Free"
    }
    properties = {
      dnsPrefix         = random_pet.azurerm_kubernetes_cluster_dns_prefix.id
      kubernetesVersion = "1.29"
      agentPoolProfiles = [
        {
          name                   = "agentpool"
          count                  = var.aks_node_count
          vmSize                 = var.aks_node_vm_size
          osDiskSizeGB           = 128
          kubeletDiskType        = "OS"
          maxPods                = 30
          type                   = "VirtualMachineScaleSets"
          enableAutoScaling      = false,
          scaleDownMode          = "Delete",
          orchestratorVersion    = "1.29"
          enableNodePublicIP     = false
          mode                   = "System"
          enableEncryptionAtHost = false
          enableUltraSSD         = false
          osType                 = "Linux"
          osSKU                  = "Ubuntu"
          upgradeSettings = {
            maxSurge = "10%"
          }
          enableFIPS = false
        }
      ]
      windowsProfile = {
        adminUsername  = var.admin_username
        adminPassword  = var.admin_password
        licenseType    = "None"
        enableCSIProxy = true
      }
      servicePrincipalProfile = {
        clientId = "msi"
      }
      enableRBAC  = true
      supportPlan = "KubernetesOfficial"
      networkProfile = {
        networkPlugin    = "azure"
        networkPolicy    = "none"
        networkDataplane = "azure"
        loadBalancerSku  = "standard"
        loadBalancerProfile = {
          managedOutboundIPs = {
            count = 1
          }
          backendPoolType = "nodeIPConfiguration"
        }
        serviceCidr  = "10.0.0.0/16"
        dnsServiceIP = "10.0.0.10"
        outboundType = "loadBalancer"
        serviceCidrs = [
          "10.0.0.0/16",
        ]
        ipFamilies = ["IPv4"]
      }
      autoUpgradeProfile = {
        upgradeChannel       = "none"
        nodeOSUpgradeChannel = "NodeImage"
      }
      disableLocalAccounts = false
      storageProfile = {
        diskCSIDriver = {
          enabled = true
        }
        fileCSIDriver = {
          enabled = true
        }
        snapshotController = {
          enabled = true
        }
      }
      oidcIssuerProfile = {
        enabled = false
      }
      azureMonitorProfile = {
        metrics = {
          enabled = false
        }
      }
    }
  }
  timeouts {
    create = "6h"
  }
}
Create a file namedmain.tf, and insert the following code:
main.tf
resource "random_pet" "rg_name" {
  prefix = var.resource_group_name_prefix
}

resource "azurerm_resource_group" "rg" {
  location = var.resource_group_location
  name     = random_pet.rg_name.id
}

resource "random_pet" "azurerm_kubernetes_cluster_name" {
  prefix = "cluster"
}

resource "random_pet" "azurerm_kubernetes_cluster_dns_prefix" {
  prefix = "dns"
}

resource "azapi_resource" "aks" {
  type      = "Microsoft.ContainerService/ManagedClusters@2024-05-01"
  name      = random_pet.azurerm_kubernetes_cluster_name.id
  parent_id = azurerm_resource_group.rg.id
  location  = azurerm_resource_group.rg.location
  identity {
    type = "SystemAssigned"
  }
  body = {
    extendedLocation = {
      name = replace(lower(var.aks_extended_zone), " ", "")
      type = "EdgeZone"
    }
    sku = {
      name = "Base"
      tier = "Free"
    }
    properties = {
      dnsPrefix         = random_pet.azurerm_kubernetes_cluster_dns_prefix.id
      kubernetesVersion = "1.29"
      agentPoolProfiles = [
        {
          name                   = "agentpool"
          count                  = var.aks_node_count
          vmSize                 = var.aks_node_vm_size
          osDiskSizeGB           = 128
          kubeletDiskType        = "OS"
          maxPods                = 30
          type                   = "VirtualMachineScaleSets"
          enableAutoScaling      = false,
          scaleDownMode          = "Delete",
          orchestratorVersion    = "1.29"
          enableNodePublicIP     = false
          mode                   = "System"
          enableEncryptionAtHost = false
          enableUltraSSD         = false
          osType                 = "Linux"
          osSKU                  = "Ubuntu"
          upgradeSettings = {
            maxSurge = "10%"
          }
          enableFIPS = false
        }
      ]
      windowsProfile = {
        adminUsername  = var.admin_username
        adminPassword  = var.admin_password
        licenseType    = "None"
        enableCSIProxy = true
      }
      servicePrincipalProfile = {
        clientId = "msi"
      }
      enableRBAC  = true
      supportPlan = "KubernetesOfficial"
      networkProfile = {
        networkPlugin    = "azure"
        networkPolicy    = "none"
        networkDataplane = "azure"
        loadBalancerSku  = "standard"
        loadBalancerProfile = {
          managedOutboundIPs = {
            count = 1
          }
          backendPoolType = "nodeIPConfiguration"
        }
        serviceCidr  = "10.0.0.0/16"
        dnsServiceIP = "10.0.0.10"
        outboundType = "loadBalancer"
        serviceCidrs = [
          "10.0.0.0/16",
        ]
        ipFamilies = ["IPv4"]
      }
      autoUpgradeProfile = {
        upgradeChannel       = "none"
        nodeOSUpgradeChannel = "NodeImage"
      }
      disableLocalAccounts = false
      storageProfile = {
        diskCSIDriver = {
          enabled = true
        }
        fileCSIDriver = {
          enabled = true
        }
        snapshotController = {
          enabled = true
        }
      }
      oidcIssuerProfile = {
        enabled = false
      }
      azureMonitorProfile = {
        metrics = {
          enabled = false
        }
      }
    }
  }
  timeouts {
    create = "6h"
  }
}
resource "random_pet" "rg_name" {
  prefix = var.resource_group_name_prefix
}

resource "azurerm_resource_group" "rg" {
  location = var.resource_group_location
  name     = random_pet.rg_name.id
}

resource "random_pet" "azurerm_kubernetes_cluster_name" {
  prefix = "cluster"
}

resource "random_pet" "azurerm_kubernetes_cluster_dns_prefix" {
  prefix = "dns"
}

resource "azapi_resource" "aks" {
  type      = "Microsoft.ContainerService/ManagedClusters@2024-05-01"
  name      = random_pet.azurerm_kubernetes_cluster_name.id
  parent_id = azurerm_resource_group.rg.id
  location  = azurerm_resource_group.rg.location
  identity {
    type = "SystemAssigned"
  }
  body = {
    extendedLocation = {
      name = replace(lower(var.aks_extended_zone), " ", "")
      type = "EdgeZone"
    }
    sku = {
      name = "Base"
      tier = "Free"
    }
    properties = {
      dnsPrefix         = random_pet.azurerm_kubernetes_cluster_dns_prefix.id
      kubernetesVersion = "1.29"
      agentPoolProfiles = [
        {
          name                   = "agentpool"
          count                  = var.aks_node_count
          vmSize                 = var.aks_node_vm_size
          osDiskSizeGB           = 128
          kubeletDiskType        = "OS"
          maxPods                = 30
          type                   = "VirtualMachineScaleSets"
          enableAutoScaling      = false,
          scaleDownMode          = "Delete",
          orchestratorVersion    = "1.29"
          enableNodePublicIP     = false
          mode                   = "System"
          enableEncryptionAtHost = false
          enableUltraSSD         = false
          osType                 = "Linux"
          osSKU                  = "Ubuntu"
          upgradeSettings = {
            maxSurge = "10%"
          }
          enableFIPS = false
        }
      ]
      windowsProfile = {
        adminUsername  = var.admin_username
        adminPassword  = var.admin_password
        licenseType    = "None"
        enableCSIProxy = true
      }
      servicePrincipalProfile = {
        clientId = "msi"
      }
      enableRBAC  = true
      supportPlan = "KubernetesOfficial"
      networkProfile = {
        networkPlugin    = "azure"
        networkPolicy    = "none"
        networkDataplane = "azure"
        loadBalancerSku  = "standard"
        loadBalancerProfile = {
          managedOutboundIPs = {
            count = 1
          }
          backendPoolType = "nodeIPConfiguration"
        }
        serviceCidr  = "10.0.0.0/16"
        dnsServiceIP = "10.0.0.10"
        outboundType = "loadBalancer"
        serviceCidrs = [
          "10.0.0.0/16",
        ]
        ipFamilies = ["IPv4"]
      }
      autoUpgradeProfile = {
        upgradeChannel       = "none"
        nodeOSUpgradeChannel = "NodeImage"
      }
      disableLocalAccounts = false
      storageProfile = {
        diskCSIDriver = {
          enabled = true
        }
        fileCSIDriver = {
          enabled = true
        }
        snapshotController = {
          enabled = true
        }
      }
      oidcIssuerProfile = {
        enabled = false
      }
      azureMonitorProfile = {
        metrics = {
          enabled = false
        }
      }
    }
  }
  timeouts {
    create = "6h"
  }
}
Create a file namedoutputs.tf, and insert the following code:output "resource_group_name" {
  value = azurerm_resource_group.rg.name
}

output "aks_cluster_name" {
  value = azapi_resource.aks.name
}

output "aks_extended_zone" {
  value = azapi_resource.aks.body.extendedLocation.name
}
Create a file namedoutputs.tf, and insert the following code:
outputs.tf
output "resource_group_name" {
  value = azurerm_resource_group.rg.name
}

output "aks_cluster_name" {
  value = azapi_resource.aks.name
}

output "aks_extended_zone" {
  value = azapi_resource.aks.body.extendedLocation.name
}
output "resource_group_name" {
  value = azurerm_resource_group.rg.name
}

output "aks_cluster_name" {
  value = azapi_resource.aks.name
}

output "aks_extended_zone" {
  value = azapi_resource.aks.body.extendedLocation.name
}
Create a file namedproviders.tf, and insert the following code:terraform {
  required_providers {
    azurerm = {
      source  = "hashicorp/azurerm"
      version = "~>3.0"
    }
    azapi = {
      source  = "Azure/azapi"
      version = "2.0.1"
    }
    random = {
      source  = "hashicorp/random"
      version = "~>3.0"
    }
  }
}

provider "azurerm" {
  features {}
}
Create a file namedproviders.tf, and insert the following code:
providers.tf
terraform {
  required_providers {
    azurerm = {
      source  = "hashicorp/azurerm"
      version = "~>3.0"
    }
    azapi = {
      source  = "Azure/azapi"
      version = "2.0.1"
    }
    random = {
      source  = "hashicorp/random"
      version = "~>3.0"
    }
  }
}

provider "azurerm" {
  features {}
}
terraform {
  required_providers {
    azurerm = {
      source  = "hashicorp/azurerm"
      version = "~>3.0"
    }
    azapi = {
      source  = "Azure/azapi"
      version = "2.0.1"
    }
    random = {
      source  = "hashicorp/random"
      version = "~>3.0"
    }
  }
}

provider "azurerm" {
  features {}
}
Create a file namedvariables.tf, and insert the following code:variable "resource_group_name_prefix" {
  type        = string
  default     = "rg"
  description = "Prefix of the resource group name that's combined with a random ID so name is unique in your Azure subscription."
}

variable "resource_group_location" {
  type        = string
  default     = "West US"
  description = "Location of the resource group."
}

variable "virtual_network_name" {
  type        = string
  description = "Virtual network names"
  default     = "example-vnet"
}

variable "aks_node_count" {
  type        = number
  description = "AKS node count"
  default     = 3
}

variable "aks_node_vm_size" {
  type        = string
  description = "AKS node VM size"
  default     = "Standard_D2_v2"
}

variable "admin_username" {
  type        = string
  description = "The admin username for the Windows node pool."
  default     = "azureuser"
}

variable "admin_password" {
  type        = string
  description = "The admin password for the Windows node pool."
  default     = "Passw0rd1234Us!"
}

variable "aks_extended_zone" {
  type        = string
  description = "AKS extended zone"
  default     = "Los Angeles"
}
Create a file namedvariables.tf, and insert the following code:
variables.tf
variable "resource_group_name_prefix" {
  type        = string
  default     = "rg"
  description = "Prefix of the resource group name that's combined with a random ID so name is unique in your Azure subscription."
}

variable "resource_group_location" {
  type        = string
  default     = "West US"
  description = "Location of the resource group."
}

variable "virtual_network_name" {
  type        = string
  description = "Virtual network names"
  default     = "example-vnet"
}

variable "aks_node_count" {
  type        = number
  description = "AKS node count"
  default     = 3
}

variable "aks_node_vm_size" {
  type        = string
  description = "AKS node VM size"
  default     = "Standard_D2_v2"
}

variable "admin_username" {
  type        = string
  description = "The admin username for the Windows node pool."
  default     = "azureuser"
}

variable "admin_password" {
  type        = string
  description = "The admin password for the Windows node pool."
  default     = "Passw0rd1234Us!"
}

variable "aks_extended_zone" {
  type        = string
  description = "AKS extended zone"
  default     = "Los Angeles"
}
variable "resource_group_name_prefix" {
  type        = string
  default     = "rg"
  description = "Prefix of the resource group name that's combined with a random ID so name is unique in your Azure subscription."
}

variable "resource_group_location" {
  type        = string
  default     = "West US"
  description = "Location of the resource group."
}

variable "virtual_network_name" {
  type        = string
  description = "Virtual network names"
  default     = "example-vnet"
}

variable "aks_node_count" {
  type        = number
  description = "AKS node count"
  default     = 3
}

variable "aks_node_vm_size" {
  type        = string
  description = "AKS node VM size"
  default     = "Standard_D2_v2"
}

variable "admin_username" {
  type        = string
  description = "The admin username for the Windows node pool."
  default     = "azureuser"
}

variable "admin_password" {
  type        = string
  description = "The admin password for the Windows node pool."
  default     = "Passw0rd1234Us!"
}

variable "aks_extended_zone" {
  type        = string
  description = "AKS extended zone"
  default     = "Los Angeles"
}
Initialize Terraform.Runterraform initto initialize the Terraform deployment. This command downloads the Azure provider required to manage your Azure resources.terraform init -upgradeKey points:The-upgradeparameter upgrades the necessary provider plugins to the newest version that complies with the configuration's version constraints.
Initialize Terraform.
Runterraform initto initialize the Terraform deployment. This command downloads the Azure provider required to manage your Azure resources.
terraform init -upgrade
terraform init -upgrade
Key points:
The-upgradeparameter upgrades the necessary provider plugins to the newest version that complies with the configuration's version constraints.
-upgrade
Create a Terraform execution plan.Runterraform planto create an execution plan.terraform plan -out main.tfplanKey points:Theterraform plancommand creates an execution plan, but doesn't execute it. Instead, it determines what actions are necessary to create the configuration specified in your configuration files. This pattern allows you to verify whether the execution plan matches your expectations before making any changes to actual resources.The optional-outparameter allows you to specify an output file for the plan. Using the-outparameter ensures that the plan you reviewed is exactly what is applied.
Create a Terraform execution plan.
Runterraform planto create an execution plan.
terraform plan -out main.tfplan
terraform plan -out main.tfplan
Key points:
Theterraform plancommand creates an execution plan, but doesn't execute it. Instead, it determines what actions are necessary to create the configuration specified in your configuration files. This pattern allows you to verify whether the execution plan matches your expectations before making any changes to actual resources.
terraform plan
The optional-outparameter allows you to specify an output file for the plan. Using the-outparameter ensures that the plan you reviewed is exactly what is applied.
-out
-out
Apply a Terraform execution plan.Runterraform applyto apply the execution plan to your cloud infrastructure.terraform apply main.tfplanKey points:The exampleterraform applycommand assumes you previously ranterraform plan -out main.tfplan.If you specified a different filename for the-outparameter, use that same filename in the call toterraform apply.If you didn't use the-outparameter, callterraform applywithout any parameters.
Apply a Terraform execution plan.
Runterraform applyto apply the execution plan to your cloud infrastructure.
terraform apply main.tfplan
terraform apply main.tfplan
Key points:
The exampleterraform applycommand assumes you previously ranterraform plan -out main.tfplan.
terraform apply
terraform plan -out main.tfplan
If you specified a different filename for the-outparameter, use that same filename in the call toterraform apply.
-out
terraform apply
If you didn't use the-outparameter, callterraform applywithout any parameters.
-out
terraform apply
Next steps
After deploying your AKS cluster in an Azure Extended Zone, learn aboutAKS cluster configuration options.
Azure Kubernetes Service

Additional resources