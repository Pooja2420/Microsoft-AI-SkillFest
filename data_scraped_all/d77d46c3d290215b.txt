Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Provision agents for deployment groups
Article
2024-08-27
15 contributors
In this article
Azure DevOps Services | Azure DevOps Server 2022 - Azure DevOps Server 2019
Adeployment groupis a logical group of deployment target machines for Classic release pipelines in Azure Pipelines. Every target server in a deployment group requires a deployment agent installed. This article explains how to install and provision the deployment agent on each physical or virtual machine (VM) in a deployment group.
You can install the agent on a target machine in any one of the following ways:
Run the script that generates when you create the deployment group.
Install theAzure Pipelines AgentAzure VM extension on the VM.
Use theAzureResourceGroupDeploymentV2 taskin your release pipeline to create a deployment group and provision agents dynamically.
The following sections provide steps to implement each method.
Prerequisites
An Azure DevOps organization and project. To create an organization or project, seeCreate a new organizationorCreate a project in Azure DevOps.
Access to at least one Windows or Linux deployment target machine with theappropriate permissions.
For the Azure Pipelines Agent installation methods, an Azure account and subscription with permissions to create and manage Azure VMs. If you don't have an Azure account,sign up for a free account.
Run the installation script on the target servers
When you create a deployment group, a script is generated that you can run on each target machine to register the server and install the agent. To install the agent by using the generated registration script:
From your Azure DevOps project, selectPipelines>Deployment groups.
From your Azure DevOps project, selectPipelines>Deployment groups.
On theDeployment groupsscreen, selectNew, or selectAdd a deployment groupif this deployment group is the first one in the project.
On theDeployment groupsscreen, selectNew, or selectAdd a deployment groupif this deployment group is the first one in the project.
Enter aDeployment group nameand optionalDescription, and then selectCreate.
Enter aDeployment group nameand optionalDescription, and then selectCreate.
On the next screen, selectWindowsorLinuxfor theType of target to register. A registration script is generated.
On the next screen, selectWindowsorLinuxfor theType of target to register. A registration script is generated.
SelectUse a personal access token in the script for authentication. For more information, seeUse personal access tokens.
SelectUse a personal access token in the script for authentication. For more information, seeUse personal access tokens.
SelectCopy script to the clipboard.
SelectCopy script to the clipboard.
On each target machine, sign in using an account with administrative permissions.
On each target machine, sign in using an account with administrative permissions.
Run the copied script to register the machine and install the agent. For Windows machines, use an elevated PowerShell command prompt.As the script runs:To assign tags that let you limit deployments to certain servers in adeployment group job, enterYwhen prompted to enter tags, and then enter a tag or tags for this VM.Tags are limited to 256 characters each, are case insensitive, and there's no limit to the number of tags you can use.When prompted for a user account, accept the defaults.NoteIf you get an error when running the script that a secure channel couldn't be created, run the following command at the Administrator PowerShell prompt:[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
Run the copied script to register the machine and install the agent. For Windows machines, use an elevated PowerShell command prompt.
As the script runs:
To assign tags that let you limit deployments to certain servers in adeployment group job, enterYwhen prompted to enter tags, and then enter a tag or tags for this VM.Tags are limited to 256 characters each, are case insensitive, and there's no limit to the number of tags you can use.
To assign tags that let you limit deployments to certain servers in adeployment group job, enterYwhen prompted to enter tags, and then enter a tag or tags for this VM.
Tags are limited to 256 characters each, are case insensitive, and there's no limit to the number of tags you can use.
When prompted for a user account, accept the defaults.
When prompted for a user account, accept the defaults.
Note
If you get an error when running the script that a secure channel couldn't be created, run the following command at the Administrator PowerShell prompt:
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
After you set up each target server, the script should return the messageService vstsagent.{organization-name}.{computer-name} started successfully.
Service vstsagent.{organization-name}.{computer-name} started successfully
On theTargetstab of the Azure PipelinesDeployment groupspage, you can verify that the agent is running. Refresh the page if necessary.
Install the Azure Pipelines Agent Azure VM extension
If you use Azure VMs as your deployment machines, you can install the Azure Pipelines Agent extension on each VM. The extension automatically registers the agent with the specified deployment group in your Azure DevOps project.
To install the agent by using the extension, first create the deployment group:
From your Azure DevOps project, selectPipelines>Deployment groups.
On theDeployment groupsscreen, selectNew, or selectAdd a deployment groupif this deployment group is the first one in the project.
Enter aDeployment group nameand optionalDescription, and then selectCreate.
In theAzure portal, install the Azure Pipelines Agent extension on each target VM:
On the VM page, selectSettings>Extensions + Applicationsin the left navigation.
On the VM page, selectSettings>Extensions + Applicationsin the left navigation.
On theExtensiontab, selectAdd.
On theExtensiontab, selectAdd.
On theInstall an Extensionpage, search for and selectAzure Pipelines Agent, and then selectNext.
On theInstall an Extensionpage, search for and selectAzure Pipelines Agent, and then selectNext.

On theConfigure Azure Pipelines Agent Extensionscreen, specify the following information:Azure DevOps Organization Url: Enter the URL of your Azure DevOps organization, such ashttps://dev.azure.com/contoso.Team Project: Enter your project name, such asmyProject.Deployment Group: Enter the name of the deployment group you created.Agent Name: Optionally, enter a name for the agent. If you don't enter anything, the agent is named the VM name appended with-DG.Personal Access Token: Enter thePersonal Access Token (PAT)to use for authenticating to Azure Pipelines.Tags: Optionally, specify a comma-separated list of tags to configure on the agent. Tags are limited to 256 characters each, are case insensitive, and there's no limit to the number of tags you can use.
On theConfigure Azure Pipelines Agent Extensionscreen, specify the following information:
Azure DevOps Organization Url: Enter the URL of your Azure DevOps organization, such ashttps://dev.azure.com/contoso.
https://dev.azure.com/contoso
Team Project: Enter your project name, such asmyProject.
Deployment Group: Enter the name of the deployment group you created.
Agent Name: Optionally, enter a name for the agent. If you don't enter anything, the agent is named the VM name appended with-DG.
-DG
Personal Access Token: Enter thePersonal Access Token (PAT)to use for authenticating to Azure Pipelines.
Tags: Optionally, specify a comma-separated list of tags to configure on the agent. Tags are limited to 256 characters each, are case insensitive, and there's no limit to the number of tags you can use.
SelectReview + create, and when validation passes, selectCreate.
SelectReview + create, and when validation passes, selectCreate.
Use the AzureResourceGroupDeploymentV2 task
You can use theAzureResourceGroupDeploymentV2 taskto deploy an Azure Resource Manager (ARM) template. The template can install the Azure Pipelines Agent extension while creating an Azure VM, or can update the resource group to apply the extension after a VM is created.
Alternatively, you can use the advanced deployment options of the AzureResourceGroupDeployment task to deploy the agent.
Create a deployment group
First create the deployment group:
From your Azure DevOps project, selectPipelines>Deployment groups.
On theDeployment groupsscreen, selectNew, or selectAdd a deployment groupif this deployment group is the first one in the project.
Enter aDeployment group nameand optionalDescription, and then selectCreate.
Use an ARM template to install the agent
An ARM template is a JSON file that declaratively defines a set of Azure resources. Azure automatically reads the template and provisions the resources. You can deploy multiple services and their dependencies in a single template.
To register and install the deployment agent by using an ARM template, add a resources element under theMicrosoft.Compute/virtualMachineresource, as shown in the following code.
Microsoft.Compute/virtualMachine
"resources": [
  {
    "name": "[concat(parameters('vmNamePrefix'),copyIndex(),'/TeamServicesAgent')]",
    "type": "Microsoft.Compute/virtualMachines/extensions",
    "location": "[parameters('location')]",
    "apiVersion": "2015-06-15",
    "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines/',
                      concat(parameters('vmNamePrefix'),copyindex()))]"
    ],
    "properties": {
      "publisher": "Microsoft.VisualStudio.Services",
      "type": "TeamServicesAgent",
      "typeHandlerVersion": "1.0",
      "autoUpgradeMinorVersion": true,
      "settings": {
        "VSTSAccountName": "[parameters('VSTSAccountName')]",
        "TeamProject": "[parameters('TeamProject')]",
        "DeploymentGroup": "[parameters('DeploymentGroup')]",
        "AgentName": "[parameters('AgentName')]",
        "AgentMajorVersion": "auto|2|3",
        "Tags": "[parameters('Tags')]"
      },
      "protectedSettings": {
      "PATToken": "[parameters('PATToken')]"
     }
   }
  }
]
"resources": [
  {
    "name": "[concat(parameters('vmNamePrefix'),copyIndex(),'/TeamServicesAgent')]",
    "type": "Microsoft.Compute/virtualMachines/extensions",
    "location": "[parameters('location')]",
    "apiVersion": "2015-06-15",
    "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines/',
                      concat(parameters('vmNamePrefix'),copyindex()))]"
    ],
    "properties": {
      "publisher": "Microsoft.VisualStudio.Services",
      "type": "TeamServicesAgent",
      "typeHandlerVersion": "1.0",
      "autoUpgradeMinorVersion": true,
      "settings": {
        "VSTSAccountName": "[parameters('VSTSAccountName')]",
        "TeamProject": "[parameters('TeamProject')]",
        "DeploymentGroup": "[parameters('DeploymentGroup')]",
        "AgentName": "[parameters('AgentName')]",
        "AgentMajorVersion": "auto|2|3",
        "Tags": "[parameters('Tags')]"
      },
      "protectedSettings": {
      "PATToken": "[parameters('PATToken')]"
     }
   }
  }
]
Note
For a Linux VM, thetypeparameter underpropertiesin the code should beTeamServicesAgentLinux.
type
properties
TeamServicesAgentLinux
Note
In Azure DevOps Server 2022.1 and higher, the allowable values forAgentMajorVersionareauto|2|3. In Azure DevOps Server 2022.0 and earlier, the allowable values forAgentMajorVersionareauto|N.
AgentMajorVersion
auto|2|3
AgentMajorVersion
auto|N
"resources": [
  {
    "name": "[concat(parameters('vmNamePrefix'),copyIndex(),'/TeamServicesAgent')]",
    "type": "Microsoft.Compute/virtualMachines/extensions",
    "location": "[parameters('location')]",
    "apiVersion": "2015-06-15",
    "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines/',
                      concat(parameters('vmNamePrefix'),copyindex()))]"
    ],
    "properties": {
      "publisher": "Microsoft.VisualStudio.Services",
      "type": "TeamServicesAgent",
      "typeHandlerVersion": "1.0",
      "autoUpgradeMinorVersion": true,
      "settings": {
        "VSTSAccountName": "[parameters('VSTSAccountName')]",
        "TeamProject": "[parameters('TeamProject')]",
        "DeploymentGroup": "[parameters('DeploymentGroup')]",
        "AgentName": "[parameters('AgentName')]",
        "AgentMajorVersion": "auto|N",
        "Tags": "[parameters('Tags')]"
      },
      "protectedSettings": {
      "PATToken": "[parameters('PATToken')]"
     }
   }
  }
]
"resources": [
  {
    "name": "[concat(parameters('vmNamePrefix'),copyIndex(),'/TeamServicesAgent')]",
    "type": "Microsoft.Compute/virtualMachines/extensions",
    "location": "[parameters('location')]",
    "apiVersion": "2015-06-15",
    "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines/',
                      concat(parameters('vmNamePrefix'),copyindex()))]"
    ],
    "properties": {
      "publisher": "Microsoft.VisualStudio.Services",
      "type": "TeamServicesAgent",
      "typeHandlerVersion": "1.0",
      "autoUpgradeMinorVersion": true,
      "settings": {
        "VSTSAccountName": "[parameters('VSTSAccountName')]",
        "TeamProject": "[parameters('TeamProject')]",
        "DeploymentGroup": "[parameters('DeploymentGroup')]",
        "AgentName": "[parameters('AgentName')]",
        "AgentMajorVersion": "auto|N",
        "Tags": "[parameters('Tags')]"
      },
      "protectedSettings": {
      "PATToken": "[parameters('PATToken')]"
     }
   }
  }
]
In the preceding code:
VSTSAccountNameis the required Azure Pipelines organization to use. For example, if your Azure DevOps URL ishttps://dev.azure.com/contoso, just specifycontoso
VSTSAccountName
https://dev.azure.com/contoso
contoso
TeamProjectis the required project that has the deployment group defined in it.
TeamProject
DeploymentGroupis the required deployment group to register the agent to.
DeploymentGroup
AgentNameis an optional agent name. If not specified, the agent is given the VM name with-DGappended.
AgentName
-DG
Tagsis an optional, comma-separated list of tags to be set on the agent. Tags are limited to 256 characters each, are case insensitive, and there's no limit to the number of tags you can use.
Tags
PATTokenis the required PAT to authenticate to Azure Pipelines for downloading and configuring the agent.
PATToken
For more information about ARM templates, seeDefine resources in Azure Resource Manager templates.
Use the template in a release pipeline
Create a release pipeline:
SelectPipelines>Releasesfrom the left menu, and then selectNew>New release pipeline.
In theReleasestab ofAzure Pipelines, create a release pipeline with a stage that contains theARM template deploymenttask.
This template uses version 2 of the task, so on theAzure resource group deploymentsettings screen, change theTask versionfrom3.*to2.*.
Provide the parameters required for the task, such as the Azure subscription, resource group name, location, template information, and action to take.
Save the release pipeline, and create a release from the pipeline to install the agents.
Install agents using the advanced deployment options
Alternatively, you can install the agent by using advanced deployment options. Follow the preceding steps, but on theAzure resource group deploymentsettings screen, expand theAdvanced deployment options for virtual machinessection.
UnderEnable prerequisites, selectConfigure with Deployment Group agent.
UnderEnable prerequisites, selectConfigure with Deployment Group agent.
Provide the following required parameters and settings:Azure Pipelines service connection: Select an existing service connection that points to your target.If you don't have an existing service connection, selectNewand create one. For more information, seeCreate a service connection. Configure the service connection to use aPATwith scope restricted toDeployment Group.Team project: Select the project that contains the deployment group.Deployment Group: Select the deployment group to register the agents to.SelectCopy Azure VM tags to agentsto copy any tags already configured on the Azure VM to the corresponding deployment group agent.By default, allAzure tagsare copied using theKey: Valueformat, for exampleRole: Web.
Provide the following required parameters and settings:
Azure Pipelines service connection: Select an existing service connection that points to your target.If you don't have an existing service connection, selectNewand create one. For more information, seeCreate a service connection. Configure the service connection to use aPATwith scope restricted toDeployment Group.
Azure Pipelines service connection: Select an existing service connection that points to your target.
If you don't have an existing service connection, selectNewand create one. For more information, seeCreate a service connection. Configure the service connection to use aPATwith scope restricted toDeployment Group.
Team project: Select the project that contains the deployment group.
Team project: Select the project that contains the deployment group.
Deployment Group: Select the deployment group to register the agents to.
Deployment Group: Select the deployment group to register the agents to.
SelectCopy Azure VM tags to agentsto copy any tags already configured on the Azure VM to the corresponding deployment group agent.By default, allAzure tagsare copied using theKey: Valueformat, for exampleRole: Web.
SelectCopy Azure VM tags to agentsto copy any tags already configured on the Azure VM to the corresponding deployment group agent.
By default, allAzure tagsare copied using theKey: Valueformat, for exampleRole: Web.
Key: Value
Role: Web
Save the pipeline, and create a release to install the agents.
Save the pipeline, and create a release to install the agents.
Troubleshoot the extension
There are some known issues with the Azure Pipelines Agent extension.
This issue can occur on Windows VMs. The status file contains a JSON object that describes the current status of the extension. The object is a placeholder to list the operations performed so far.
Azure reads this status file and passes the status object as response to API requests. The file has a maximum allowed size. If the size exceeds the maximum, Azure can't read it completely and gives an error for the status.
Even though the extension might install initially, every time the machine reboots the extension performs some operations that append to the status file. If the machine reboots many times, the status file size can exceed the threshold, causing the errorHandler Microsoft.VisualStudio.Services.TeamServicesAgent:1.27.0.2 status file 0.status size xxxxxx bytes is too big. Max Limit allowed: 131072 bytes. Although extension installation might succeed, this error hides the actual state of the extension.
Handler Microsoft.VisualStudio.Services.TeamServicesAgent:1.27.0.2 status file 0.status size xxxxxx bytes is too big. Max Limit allowed: 131072 bytes
This machine reboot issue is fixed starting with version1.27.0.2for the Windows extension and1.21.0.1for the Linux extension. A reboot now adds nothing to the status file. However, if you had this issue with an earlier version of the extension and your extension was autoupdated to the fixed version, the issue can persist. Newer versions of the extension can still work with an earlier status file.
1.27.0.2
1.21.0.1
You could face this issue if you're using an earlier version of the extension with the flag to turn off minor version autoupdates, or if a large status file was carried from an earlier version to a fixed version. If so, you can solve the issue by uninstalling and reinstalling the extension. Uninstalling the extension cleans up the entire extension directory and creates a new status file for a fresh install of the latest version.
Python 2 is deprecated, and the Azure Pipelines Agent extension works with Python 3. If you still use OS versions that don't have Python 3 installed by default, to run the extension you should either install Python 3 on the VM or switch to an OS version that has Python 3 installed by default. Otherwise, there can be confusion regarding thecustom datalocation on the VM when you switch OS versions.
On Linux VMs, custom data copies to/var/lib/waagent/ovf-env.xmlfor earlier agent versions, and to/var/lib/waagent/CustomDatafor newer versions. If you hardcode only one of these two paths, you might face issues when switching OS versions because one of the paths doesn't exist on the new OS version, although the other path is present. To avoid breaking the VM provisioning, consider using both paths in the template so that if one fails, the other should succeed.
Help and support
Exploretroubleshooting tips.
Get advice onStack Overflow.
Post your questions, search for answers, or suggest a feature in theAzure DevOps Developer Community.
Getsupport for Azure DevOps.
Related content
Deployment group jobs
Self-hosted Windows agents
Self-hosted macOS agents
Self-hosted Linux agents
Configure and pay for parallel jobs
Pricing for Azure DevOps
Feedback
Was this page helpful?
Additional resources