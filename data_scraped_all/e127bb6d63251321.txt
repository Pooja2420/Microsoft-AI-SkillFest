Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Use an internal load balancer with Azure Kubernetes Service (AKS)
Article
2025-03-25
20 contributors
In this article
You can create and use an internal load balancer to restrict access to your applications in Azure Kubernetes Service (AKS). An internal load balancer doesn't have a public IP and makes a Kubernetes service accessible only to applications that can reach the private IP. These applications can be within the same VNET or in another VNET through VNET peering. This article shows you how to create and use an internal load balancer with AKS.
Important
On September 30, 2025, Basic Load Balancer will be retired. For more information, see theofficial announcement. At this moment there is no integrated option to use the Azure AKS API operation to migrate the Load Balancer SKU. The Load Balancer SKU decision must be done at cluster creation time. Therefore, if you're currently using Basic Load Balancer, take the necessary steps to migrate your workloads to a new created cluster with the new default Standard Load Balancer SKU prior to the retirement date.
Before you begin
This article assumes that you have an existing AKS cluster. If you need an AKS cluster, you can create one usingAzure CLI,Azure PowerShell, or theAzure portal.
You need the Azure CLI version 2.0.59 or later. Runaz --versionto find the version. If you need to install or upgrade, seeInstall Azure CLI.
az --version
If you want to use an existing subnet or resource group, the AKS cluster identity needs permission to manage network resources. For information, seeConfigure Azure CNI networking in AKS. If you're configuring your load balancer to use anIP address in a different subnet, ensure the AKS cluster identity also has read access to that subnet.For more information on permissions, seeDelegate AKS access to other Azure resources.
For more information on permissions, seeDelegate AKS access to other Azure resources.
Create an internal load balancer
Create a service manifest namedinternal-lb.yamlwith the service typeLoadBalancerand theazure-load-balancer-internalannotation.apiVersion: v1
kind: Service
metadata:
  name: internal-app
  annotations:
    service.beta.kubernetes.io/azure-load-balancer-internal: "true"
spec:
  type: LoadBalancer
  ports:
  - port: 80
  selector:
    app: internal-app
Create a service manifest namedinternal-lb.yamlwith the service typeLoadBalancerand theazure-load-balancer-internalannotation.
internal-lb.yaml
LoadBalancer
azure-load-balancer-internal
apiVersion: v1
kind: Service
metadata:
  name: internal-app
  annotations:
    service.beta.kubernetes.io/azure-load-balancer-internal: "true"
spec:
  type: LoadBalancer
  ports:
  - port: 80
  selector:
    app: internal-app
apiVersion: v1
kind: Service
metadata:
  name: internal-app
  annotations:
    service.beta.kubernetes.io/azure-load-balancer-internal: "true"
spec:
  type: LoadBalancer
  ports:
  - port: 80
  selector:
    app: internal-app
Deploy the internal load balancer using thekubectl applycommand. This command creates an Azure load balancer in the node resource group connected to the same virtual network as your AKS cluster.kubectl apply -f internal-lb.yaml
Deploy the internal load balancer using thekubectl applycommand. This command creates an Azure load balancer in the node resource group connected to the same virtual network as your AKS cluster.
kubectl apply
kubectl apply -f internal-lb.yaml
kubectl apply -f internal-lb.yaml
View the service details using thekubectl get servicecommand.kubectl get service internal-appThe IP address of the internal load balancer is shown in theEXTERNAL-IPcolumn, as shown in the following example output. In this context,Externalrefers to the external interface of the load balancer. It doesn't mean that it receives a public, external IP address. This IP address is dynamically assigned from the same subnet as the AKS cluster.NAME           TYPE           CLUSTER-IP    EXTERNAL-IP   PORT(S)        AGE
internal-app   LoadBalancer   10.0.248.59   10.240.0.7    80:30555/TCP   2m
View the service details using thekubectl get servicecommand.
kubectl get service
kubectl get service internal-app
kubectl get service internal-app
The IP address of the internal load balancer is shown in theEXTERNAL-IPcolumn, as shown in the following example output. In this context,Externalrefers to the external interface of the load balancer. It doesn't mean that it receives a public, external IP address. This IP address is dynamically assigned from the same subnet as the AKS cluster.
EXTERNAL-IP
NAME           TYPE           CLUSTER-IP    EXTERNAL-IP   PORT(S)        AGE
internal-app   LoadBalancer   10.0.248.59   10.240.0.7    80:30555/TCP   2m
NAME           TYPE           CLUSTER-IP    EXTERNAL-IP   PORT(S)        AGE
internal-app   LoadBalancer   10.0.248.59   10.240.0.7    80:30555/TCP   2m
Specify an IP address
When you specify an IP address for the load balancer, the specified IP address must reside in the same virtual network as the AKS cluster, but it can't already be assigned to another resource in the virtual network. For example, you shouldn't use an IP address in the range designated for the Kubernetes subnet within the AKS cluster. Using an IP address that's already assigned to another resource in the same virtual network can cause issues with the load balancer.
You can use theaz network vnet subnet listAzure CLI command or theGet-AzVirtualNetworkSubnetConfigPowerShell cmdlet to get the subnets in your virtual network.
az network vnet subnet list
Get-AzVirtualNetworkSubnetConfig
For more information on subnets, seeAdd a node pool with a unique subnet.
If you want to use a specific IP address with the load balancer, you have two options:set service annotationsoradd theLoadBalancerIPproperty to the load balancer YAML manifest.
Important
Adding theLoadBalancerIPproperty to the load balancer YAML manifest is deprecating followingupstream Kubernetes. While current usage remains the same and existing services are expected to work without modification, wehighly recommend setting service annotationsinstead. For more information about service annotations, seeAzure LoadBalancer supported annotations.
Set service annotations
Add theLoadBalancerIPproperty to the load balancer YAML manifest
Set service annotations usingservice.beta.kubernetes.io/azure-load-balancer-ipv4for an IPv4 address andservice.beta.kubernetes.io/azure-load-balancer-ipv6for an IPv6 address.apiVersion: v1
kind: Service
metadata:
  name: internal-app
  annotations:
    service.beta.kubernetes.io/azure-load-balancer-ipv4: 10.240.0.25
    service.beta.kubernetes.io/azure-load-balancer-internal: "true"
spec:
  type: LoadBalancer
  ports:
  - port: 80
  selector:
    app: internal-app
Set service annotations usingservice.beta.kubernetes.io/azure-load-balancer-ipv4for an IPv4 address andservice.beta.kubernetes.io/azure-load-balancer-ipv6for an IPv6 address.
service.beta.kubernetes.io/azure-load-balancer-ipv4
service.beta.kubernetes.io/azure-load-balancer-ipv6
apiVersion: v1
kind: Service
metadata:
  name: internal-app
  annotations:
    service.beta.kubernetes.io/azure-load-balancer-ipv4: 10.240.0.25
    service.beta.kubernetes.io/azure-load-balancer-internal: "true"
spec:
  type: LoadBalancer
  ports:
  - port: 80
  selector:
    app: internal-app
apiVersion: v1
kind: Service
metadata:
  name: internal-app
  annotations:
    service.beta.kubernetes.io/azure-load-balancer-ipv4: 10.240.0.25
    service.beta.kubernetes.io/azure-load-balancer-internal: "true"
spec:
  type: LoadBalancer
  ports:
  - port: 80
  selector:
    app: internal-app
Add theService.Spec.LoadBalancerIPproperty to the load balancer YAML manifest. This field is deprecating followingupstream Kubernetes, and it can't support dual-stack. Current usage remains the same and existing services are expected to work without modification.apiVersion: v1
kind: Service
metadata:
  name: internal-app
  annotations:
    service.beta.kubernetes.io/azure-load-balancer-internal: "true"
spec:
  type: LoadBalancer
  loadBalancerIP: 10.240.0.25
  ports:
  - port: 80
  selector:
    app: internal-app
Add theService.Spec.LoadBalancerIPproperty to the load balancer YAML manifest. This field is deprecating followingupstream Kubernetes, and it can't support dual-stack. Current usage remains the same and existing services are expected to work without modification.
apiVersion: v1
kind: Service
metadata:
  name: internal-app
  annotations:
    service.beta.kubernetes.io/azure-load-balancer-internal: "true"
spec:
  type: LoadBalancer
  loadBalancerIP: 10.240.0.25
  ports:
  - port: 80
  selector:
    app: internal-app
apiVersion: v1
kind: Service
metadata:
  name: internal-app
  annotations:
    service.beta.kubernetes.io/azure-load-balancer-internal: "true"
spec:
  type: LoadBalancer
  loadBalancerIP: 10.240.0.25
  ports:
  - port: 80
  selector:
    app: internal-app
View the service details using thekubectl get servicecommand.kubectl get service internal-appThe IP address in theEXTERNAL-IPcolumn should reflect your specified IP address, as shown in the following example output:NAME           TYPE           CLUSTER-IP     EXTERNAL-IP   PORT(S)        AGE
internal-app   LoadBalancer   10.0.184.168   10.240.0.25   80:30225/TCP   4m
View the service details using thekubectl get servicecommand.
kubectl get service
kubectl get service internal-app
kubectl get service internal-app
The IP address in theEXTERNAL-IPcolumn should reflect your specified IP address, as shown in the following example output:
EXTERNAL-IP
NAME           TYPE           CLUSTER-IP     EXTERNAL-IP   PORT(S)        AGE
internal-app   LoadBalancer   10.0.184.168   10.240.0.25   80:30225/TCP   4m
NAME           TYPE           CLUSTER-IP     EXTERNAL-IP   PORT(S)        AGE
internal-app   LoadBalancer   10.0.184.168   10.240.0.25   80:30225/TCP   4m
For more information on configuring your load balancer in a different subnet, seeSpecify a different subnet.
Connect Azure Private Link service to internal load balancer
Before you begin
You need Kubernetes version 1.22.x or later.
You need an existing resource group with a VNet and subnet. This resource group is where youcreate the private endpoint. If you don't have these resources, seeCreate a virtual network and subnet.
Create a Private Link service connection
Create a service manifest namedinternal-lb-pls.yamlwith the service typeLoadBalancerand theazure-load-balancer-internalandazure-pls-createannotations. For more options, refer to theAzure Private Link Service Integrationdesign document.apiVersion: v1
kind: Service
metadata:
  name: internal-app
  annotations:
    service.beta.kubernetes.io/azure-load-balancer-internal: "true"
    service.beta.kubernetes.io/azure-pls-create: "true"
spec:
  type: LoadBalancer
  ports:
  - port: 80
  selector:
    app: internal-app
Create a service manifest namedinternal-lb-pls.yamlwith the service typeLoadBalancerand theazure-load-balancer-internalandazure-pls-createannotations. For more options, refer to theAzure Private Link Service Integrationdesign document.
internal-lb-pls.yaml
LoadBalancer
azure-load-balancer-internal
azure-pls-create
apiVersion: v1
kind: Service
metadata:
  name: internal-app
  annotations:
    service.beta.kubernetes.io/azure-load-balancer-internal: "true"
    service.beta.kubernetes.io/azure-pls-create: "true"
spec:
  type: LoadBalancer
  ports:
  - port: 80
  selector:
    app: internal-app
apiVersion: v1
kind: Service
metadata:
  name: internal-app
  annotations:
    service.beta.kubernetes.io/azure-load-balancer-internal: "true"
    service.beta.kubernetes.io/azure-pls-create: "true"
spec:
  type: LoadBalancer
  ports:
  - port: 80
  selector:
    app: internal-app
Deploy the internal load balancer using thekubectl applycommand. This command creates an Azure load balancer in the node resource group connected to the same virtual network as your AKS cluster. It also creates a Private Link Service object that connects to the frontend IP configuration of the load balancer associated with the Kubernetes service.kubectl apply -f internal-lb-pls.yaml
Deploy the internal load balancer using thekubectl applycommand. This command creates an Azure load balancer in the node resource group connected to the same virtual network as your AKS cluster. It also creates a Private Link Service object that connects to the frontend IP configuration of the load balancer associated with the Kubernetes service.
kubectl apply
kubectl apply -f internal-lb-pls.yaml
kubectl apply -f internal-lb-pls.yaml
View the service details using thekubectl get servicecommand.kubectl get service internal-appThe IP address of the internal load balancer is shown in theEXTERNAL-IPcolumn, as shown in the following example output. In this context,Externalrefers to the external interface of the load balancer. It doesn't mean that it receives a public, external IP address.NAME           TYPE           CLUSTER-IP    EXTERNAL-IP   PORT(S)        AGE
internal-app   LoadBalancer   10.125.17.53  10.125.0.66   80:30430/TCP   64m
View the service details using thekubectl get servicecommand.
kubectl get service
kubectl get service internal-app
kubectl get service internal-app
The IP address of the internal load balancer is shown in theEXTERNAL-IPcolumn, as shown in the following example output. In this context,Externalrefers to the external interface of the load balancer. It doesn't mean that it receives a public, external IP address.
EXTERNAL-IP
NAME           TYPE           CLUSTER-IP    EXTERNAL-IP   PORT(S)        AGE
internal-app   LoadBalancer   10.125.17.53  10.125.0.66   80:30430/TCP   64m
NAME           TYPE           CLUSTER-IP    EXTERNAL-IP   PORT(S)        AGE
internal-app   LoadBalancer   10.125.17.53  10.125.0.66   80:30430/TCP   64m
View the details of the Private Link Service object using theaz network private-link-service listcommand.# Create a variable for the node resource group

AKS_MC_RG=$(az aks show -g myResourceGroup --name myAKSCluster --query nodeResourceGroup -o tsv)

# View the details of the Private Link Service object

az network private-link-service list -g $AKS_MC_RG --query "[].{Name:name,Alias:alias}" -o tableYour output should look similar to the following example output:Name      Alias
--------  -------------------------------------------------------------------------
pls-xyz   pls-xyz.abc123-defg-4hij-56kl-789mnop.eastus2.azure.privatelinkservice
View the details of the Private Link Service object using theaz network private-link-service listcommand.
az network private-link-service list
# Create a variable for the node resource group

AKS_MC_RG=$(az aks show -g myResourceGroup --name myAKSCluster --query nodeResourceGroup -o tsv)

# View the details of the Private Link Service object

az network private-link-service list -g $AKS_MC_RG --query "[].{Name:name,Alias:alias}" -o table
# Create a variable for the node resource group

AKS_MC_RG=$(az aks show -g myResourceGroup --name myAKSCluster --query nodeResourceGroup -o tsv)

# View the details of the Private Link Service object

az network private-link-service list -g $AKS_MC_RG --query "[].{Name:name,Alias:alias}" -o table
Your output should look similar to the following example output:
Name      Alias
--------  -------------------------------------------------------------------------
pls-xyz   pls-xyz.abc123-defg-4hij-56kl-789mnop.eastus2.azure.privatelinkservice
Name      Alias
--------  -------------------------------------------------------------------------
pls-xyz   pls-xyz.abc123-defg-4hij-56kl-789mnop.eastus2.azure.privatelinkservice
Create a Private Endpoint to the Private Link service
A Private Endpoint allows you to privately connect to your Kubernetes service object via the Private Link Service you created.
Create the private endpoint using theaz network private-endpoint createcommand.# Create a variable for the private link service

AKS_PLS_ID=$(az network private-link-service list -g $AKS_MC_RG --query "[].id" -o tsv)

# Create the private endpoint

$ az network private-endpoint create \
    -g myOtherResourceGroup \
    --name myAKSServicePE \
    --vnet-name myOtherVNET \
    --subnet pe-subnet \
    --private-connection-resource-id $AKS_PLS_ID \
    --connection-name connectToMyK8sService
Create the private endpoint using theaz network private-endpoint createcommand.
az network private-endpoint create
# Create a variable for the private link service

AKS_PLS_ID=$(az network private-link-service list -g $AKS_MC_RG --query "[].id" -o tsv)

# Create the private endpoint

$ az network private-endpoint create \
    -g myOtherResourceGroup \
    --name myAKSServicePE \
    --vnet-name myOtherVNET \
    --subnet pe-subnet \
    --private-connection-resource-id $AKS_PLS_ID \
    --connection-name connectToMyK8sService
# Create a variable for the private link service

AKS_PLS_ID=$(az network private-link-service list -g $AKS_MC_RG --query "[].id" -o tsv)

# Create the private endpoint

$ az network private-endpoint create \
    -g myOtherResourceGroup \
    --name myAKSServicePE \
    --vnet-name myOtherVNET \
    --subnet pe-subnet \
    --private-connection-resource-id $AKS_PLS_ID \
    --connection-name connectToMyK8sService
PLS Customizations via Annotations
You can use the following annotations to customize the PLS resource:
service.beta.kubernetes.io/azure-pls-create
"true"
service.beta.kubernetes.io/azure-pls-name
<PLS name>
"pls-<LB frontend config name>"
service.beta.kubernetes.io/azure-pls-resource-group
Resource Group name
MC_ resource
service.beta.kubernetes.io/azure-pls-ip-configuration-subnet
<Subnet name>
service.beta.kubernetes.io/azure-load-balancer-internal-subnet
service.beta.kubernetes.io/azure-pls-ip-configuration-ip-address-count
[1-8]
service.beta.kubernetes.io/azure-pls-ip-configuration-ip-address
"10.0.0.7 ... 10.0.0.10"
service.beta.kubernetes.io/azure-pls-ip-configuration-ip-address-count
Primary
service.beta.kubernetes.io/azure-pls-fqdns
"fqdn1 fqdn2"
[]
service.beta.kubernetes.io/azure-pls-proxy-protocol
"true"
"false"
false
service.beta.kubernetes.io/azure-pls-visibility
"sub1 sub2 sub3 â¦ subN"
"*"
"*"
[]
service.beta.kubernetes.io/azure-pls-auto-approval
"sub1 sub2 sub3 â¦ subN"
[]
Use private networks
When you create your AKS cluster, you can specify advanced networking settings. These settings allow you to deploy the cluster into an existing Azure virtual network and subnets. For example, you can deploy your AKS cluster into a private network connected to your on-premises environment and run services that are only accessible internally.
For more information, seeconfigure your own virtual network subnets with Kubenetorwith Azure CNI.
You don't need to make any changes to the previous steps to deploy an internal load balancer that uses a private network in an AKS cluster. The load balancer is created in the same resource group as your AKS cluster, but it's instead connected to your private virtual network and subnet, as shown in the following example:
$ kubectl get service internal-app

NAME           TYPE           CLUSTER-IP    EXTERNAL-IP   PORT(S)        AGE
internal-app   LoadBalancer   10.1.15.188   10.0.0.35     80:31669/TCP   1m
$ kubectl get service internal-app

NAME           TYPE           CLUSTER-IP    EXTERNAL-IP   PORT(S)        AGE
internal-app   LoadBalancer   10.1.15.188   10.0.0.35     80:31669/TCP   1m
Note
The cluster identity used by the AKS cluster must at least have theNetwork Contributorrole on the virtual network resource. You can view the cluster identity using theaz aks showcommand, such asaz aks show --resource-group <resource-group-name> --name <cluster-name> --query "identity". You can assign the Network Contributor role using theaz role assignment createcommand, such asaz role assignment create --assignee <identity-resource-id> --scope <virtual-network-resource-id> --role "Network Contributor".
az aks show
az aks show --resource-group <resource-group-name> --name <cluster-name> --query "identity"
az role assignment create
az role assignment create --assignee <identity-resource-id> --scope <virtual-network-resource-id> --role "Network Contributor"
If you want to define acustom roleinstead, you need the following permissions:
Microsoft.Network/virtualNetworks/subnets/join/action
Microsoft.Network/virtualNetworks/subnets/join/action
Microsoft.Network/virtualNetworks/subnets/read
Microsoft.Network/virtualNetworks/subnets/read
For more information, seeAdd, change, or delete a virtual network subnet.
Specify a different subnet
Add theazure-load-balancer-internal-subnetannotation to your service to specify a subnet for your load balancer. The subnet specified must be in the same virtual network as your AKS cluster. When deployed, the load balancerEXTERNAL-IPaddress is part of the specified subnet.apiVersion: v1
kind: Service
metadata:
  name: internal-app
  annotations:
    service.beta.kubernetes.io/azure-load-balancer-internal: "true"
    service.beta.kubernetes.io/azure-load-balancer-internal-subnet: "apps-subnet"
spec:
  type: LoadBalancer
  ports:
  - port: 80
  selector:
    app: internal-app
Add theazure-load-balancer-internal-subnetannotation to your service to specify a subnet for your load balancer. The subnet specified must be in the same virtual network as your AKS cluster. When deployed, the load balancerEXTERNAL-IPaddress is part of the specified subnet.
azure-load-balancer-internal-subnet
EXTERNAL-IP
apiVersion: v1
kind: Service
metadata:
  name: internal-app
  annotations:
    service.beta.kubernetes.io/azure-load-balancer-internal: "true"
    service.beta.kubernetes.io/azure-load-balancer-internal-subnet: "apps-subnet"
spec:
  type: LoadBalancer
  ports:
  - port: 80
  selector:
    app: internal-app
apiVersion: v1
kind: Service
metadata:
  name: internal-app
  annotations:
    service.beta.kubernetes.io/azure-load-balancer-internal: "true"
    service.beta.kubernetes.io/azure-load-balancer-internal-subnet: "apps-subnet"
spec:
  type: LoadBalancer
  ports:
  - port: 80
  selector:
    app: internal-app
Delete the load balancer
The load balancer is deleted when all of its services are deleted.
As with any Kubernetes resource, you can directly delete a service, such askubectl delete service internal-app, which also deletes the underlying Azure load balancer.
kubectl delete service internal-app
Next steps
To learn more about Kubernetes services, see theKubernetes services documentation.
Azure Kubernetes Service

Additional resources