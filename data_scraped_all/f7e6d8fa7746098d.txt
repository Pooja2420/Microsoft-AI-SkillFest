Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Application Insights for Azure VMs and virtual machine scale sets
Article
2025-02-06
21 contributors
In this article
This article explains how to enableAzure MonitorApplication Insightsmonitoring through autoinstrumentation for IIS-hosted ASP.NET and ASP.NET Core applications onAzure Virtual MachinesandAzure Virtual Machine Scale Sets. It covers how to deploy the Application Insights Agent using a virtual machine extension, whichautocollects the same dependency signals as the SDK, and provides guidance for automating large-scale deployments with PowerShell.
Note
For Java applications, use theApplication Insights Java 3.0 agent, whichautocollectsthe most popular libraries, frameworks, logs, and dependencies, along with manyother configurations.
Node.js and Python applications running on Azure VMs and Azure Virtual Machine Scale Sets don't support autoinstrumentation. Use theAzure Monitor OpenTelemetry Distroinstead.
To monitor VM guests in addition to the applications hosted on them, seeVM guest data.
For a complete list of supported autoinstrumentation scenarios, seeSupported environments, languages, and resource providers.
Prerequisites
Before you install the Application Insights Agent extension, you need a connection string.Create a new Application Insights resourceor copy the connection string from an existing one.
Enable monitoring for virtual machines
You can use the Azure portal or PowerShell to enable monitoring for VMs.
Azure portal
PowerShell
In the Azure portal, go to your Application Insights resource. Copy your connection string to the clipboard.
In the Azure portal, go to your Application Insights resource. Copy your connection string to the clipboard.

Go to your virtual machine. Under theSettingssection in the menu on the left side, selectExtensions + applications>Add.
Go to your virtual machine. Under theSettingssection in the menu on the left side, selectExtensions + applications>Add.

SelectApplication Insights Agent>Next.
SelectApplication Insights Agent>Next.

Paste the connection string you copied in step 1 and selectReview + create.
Paste the connection string you copied in step 1 and selectReview + create.

Note
New to PowerShell? Check out theGet started guide.
Install or update the Application Insights Agent as an extension for Azure virtual machines:
# define variables to match your environment before running
$ResourceGroup = "<myVmResourceGroup>"
$VMName = "<myVmName>"
$Location = "<myVmLocation>"
$ConnectionString = "<myAppInsightsResourceConnectionString>"

$publicCfgJsonString = @"
{
    "redfieldConfiguration": {
        "instrumentationKeyMap": {
        "filters": [
            {
            "appFilter": ".*",
            "machineFilter": ".*",
            "virtualPathFilter": ".*",
            "instrumentationSettings" : {
                "connectionString": "$ConnectionString"
            }
            }
        ]
        }
    }
    }
"@

$privateCfgJsonString = '{}'
	
Set-AzVMExtension -ResourceGroupName $ResourceGroup -VMName $VMName -Location $Location -Name "ApplicationMonitoringWindows" -Publisher "Microsoft.Azure.Diagnostics" -Type "ApplicationMonitoringWindows" -Version "2.8" -SettingString $publicCfgJsonString -ProtectedSettingString $privateCfgJsonString
# define variables to match your environment before running
$ResourceGroup = "<myVmResourceGroup>"
$VMName = "<myVmName>"
$Location = "<myVmLocation>"
$ConnectionString = "<myAppInsightsResourceConnectionString>"

$publicCfgJsonString = @"
{
    "redfieldConfiguration": {
        "instrumentationKeyMap": {
        "filters": [
            {
            "appFilter": ".*",
            "machineFilter": ".*",
            "virtualPathFilter": ".*",
            "instrumentationSettings" : {
                "connectionString": "$ConnectionString"
            }
            }
        ]
        }
    }
    }
"@

$privateCfgJsonString = '{}'
	
Set-AzVMExtension -ResourceGroupName $ResourceGroup -VMName $VMName -Location $Location -Name "ApplicationMonitoringWindows" -Publisher "Microsoft.Azure.Diagnostics" -Type "ApplicationMonitoringWindows" -Version "2.8" -SettingString $publicCfgJsonString -ProtectedSettingString $privateCfgJsonString
Note
For more complicated at-scale deployments, you can use a PowerShell loop to install or update the Application Insights Agent extension across multiple VMs.
Query the Application Insights Agent extension status for Azure virtual machines:
Get-AzVMExtension -ResourceGroupName "<myVmResourceGroup>" -VMName "<myVmName>" -Name ApplicationMonitoringWindows -Status
Get-AzVMExtension -ResourceGroupName "<myVmResourceGroup>" -VMName "<myVmName>" -Name ApplicationMonitoringWindows -Status
Get a list of installed extensions for Azure virtual machines:
Get-AzResource -ResourceId "/subscriptions/<mySubscriptionId>/resourceGroups/<myVmResourceGroup>/providers/Microsoft.Compute/virtualMachines/<myVmName>/extensions"
Get-AzResource -ResourceId "/subscriptions/<mySubscriptionId>/resourceGroups/<myVmResourceGroup>/providers/Microsoft.Compute/virtualMachines/<myVmName>/extensions"
Uninstall the Application Insights Agent extension from Azure virtual machines:
Remove-AzVMExtension -ResourceGroupName "<myVmResourceGroup>" -VMName "<myVmName>" -Name "ApplicationMonitoring"
Remove-AzVMExtension -ResourceGroupName "<myVmResourceGroup>" -VMName "<myVmName>" -Name "ApplicationMonitoring"
Note
Verify installation by selectingLive Metrics Streamwithin the Application Insights resource associated with the connection string you used to deploy the Application Insights Agent extension. If you're sending data from multiple virtual machines, select the target Azure virtual machines underServer Name. It might take up to a minute for data to begin flowing.
Enable monitoring for virtual machine scale sets
You can use the Azure portal or PowerShell to enable monitoring for virtual machine scale sets.
Azure portal
PowerShell
Follow the prior steps for VMs, but go to your virtual machine scale sets instead of your VM.
Install or update Application Insights Agent as an extension for virtual machine scale sets:
# Set resource group, vmss name, and connection string to reflect your environment
$ResourceGroup = "<myVmResourceGroup>"
$VMSSName = "<myVmName>"
$ConnectionString = "<myAppInsightsResourceConnectionString>"
$publicCfgHashtable =
@{
  "redfieldConfiguration"= @{
    "instrumentationKeyMap"= @{
      "filters"= @(
        @{
          "appFilter"= ".*";
          "machineFilter"= ".*";
          "virtualPathFilter"= ".*";
          "instrumentationSettings" = @{
            "connectionString"= "$ConnectionString"
          }
        }
      )
    }
  }
};
$privateCfgHashtable = @{};
$vmss = Get-AzVmss -ResourceGroupName $ResourceGroup -VMScaleSetName $VMSSName
Add-AzVmssExtension -VirtualMachineScaleSet $vmss -Name "ApplicationMonitoringWindows" -Publisher "Microsoft.Azure.Diagnostics" -Type "ApplicationMonitoringWindows" -TypeHandlerVersion "2.8" -Setting $publicCfgHashtable -ProtectedSetting $privateCfgHashtable
Update-AzVmss -ResourceGroupName $vmss.ResourceGroupName -Name $vmss
# Note: Depending on your update policy, you might need to run Update-AzVmssInstance for each instance
# Set resource group, vmss name, and connection string to reflect your environment
$ResourceGroup = "<myVmResourceGroup>"
$VMSSName = "<myVmName>"
$ConnectionString = "<myAppInsightsResourceConnectionString>"
$publicCfgHashtable =
@{
  "redfieldConfiguration"= @{
    "instrumentationKeyMap"= @{
      "filters"= @(
        @{
          "appFilter"= ".*";
          "machineFilter"= ".*";
          "virtualPathFilter"= ".*";
          "instrumentationSettings" = @{
            "connectionString"= "$ConnectionString"
          }
        }
      )
    }
  }
};
$privateCfgHashtable = @{};
$vmss = Get-AzVmss -ResourceGroupName $ResourceGroup -VMScaleSetName $VMSSName
Add-AzVmssExtension -VirtualMachineScaleSet $vmss -Name "ApplicationMonitoringWindows" -Publisher "Microsoft.Azure.Diagnostics" -Type "ApplicationMonitoringWindows" -TypeHandlerVersion "2.8" -Setting $publicCfgHashtable -ProtectedSetting $privateCfgHashtable
Update-AzVmss -ResourceGroupName $vmss.ResourceGroupName -Name $vmss
# Note: Depending on your update policy, you might need to run Update-AzVmssInstance for each instance
Get a list of installed extensions for virtual machine scale sets:
Get-AzResource -ResourceId "/subscriptions/<mySubscriptionId>/resourceGroups/<myResourceGroup>/providers/Microsoft.Compute/virtualMachineScaleSets/<myVmssName>/extensions"
Get-AzResource -ResourceId "/subscriptions/<mySubscriptionId>/resourceGroups/<myResourceGroup>/providers/Microsoft.Compute/virtualMachineScaleSets/<myVmssName>/extensions"
Uninstall the application monitoring extension from virtual machine scale sets:
# set resource group and vmss name to reflect your environment
$vmss = Get-AzVmss -ResourceGroupName "<myResourceGroup>" -VMScaleSetName "<myVmssName>"
Remove-AzVmssExtension -VirtualMachineScaleSet $vmss -Name "ApplicationMonitoringWindows"
Update-AzVmss -ResourceGroupName $vmss.ResourceGroupName -Name $vmss.Name -VirtualMachineScaleSet $vmss
# Note: Depending on your update policy, you might need to run Update-AzVmssInstance for each instance
# set resource group and vmss name to reflect your environment
$vmss = Get-AzVmss -ResourceGroupName "<myResourceGroup>" -VMScaleSetName "<myVmssName>"
Remove-AzVmssExtension -VirtualMachineScaleSet $vmss -Name "ApplicationMonitoringWindows"
Update-AzVmss -ResourceGroupName $vmss.ResourceGroupName -Name $vmss.Name -VirtualMachineScaleSet $vmss
# Note: Depending on your update policy, you might need to run Update-AzVmssInstance for each instance
Frequently asked questions
How can I disable client-side monitoring for ASP.NET Core apps?
Client-side monitoring is enabled by default for ASP.NET Core apps. If you want to disable it, define an environment variable in the server with the following information:
Name:APPINSIGHTS_JAVASCRIPT_ENABLED
APPINSIGHTS_JAVASCRIPT_ENABLED
Value:false
false
Troubleshooting
Find troubleshooting tips for the Application Insights Monitoring Agent extension for .NET applications running on Azure virtual machines and virtual machine scale sets.
If you're having trouble deploying the extension, review the execution output that's logged to files found in the following directories:
C:\WindowsAzure\Logs\Plugins\Microsoft.Azure.Diagnostics.ApplicationMonitoringWindows\<version>\
C:\WindowsAzure\Logs\Plugins\Microsoft.Azure.Diagnostics.ApplicationMonitoringWindows\<version>\
If your extension deployed successfully but you're unable to see telemetry, it could be one of the following issues covered inAgent troubleshooting:
Conflicting DLLs in an app's bin directory
Conflict with IIS shared configuration
Test connectivity between your application host and the ingestion service
Application Insights SDKs and agents send telemetry to get ingested as REST calls to our ingestion endpoints. You can test connectivity from your web server or application host machine to the ingestion service endpoints by using raw REST clients from PowerShell or curl commands. SeeTroubleshoot missing application telemetry in Azure Monitor Application Insights.
Release notes
2.8.44
Updated Application Insights .NET/.NET Core SDK to 2.20.1 - red field.
Enabled SQL query collection.
Enabled support for Microsoft Entra authentication.
2.8.42
Updated Application Insights .NET/.NET Core SDK to 2.18.1 - red field.
2.8.41
Added the ASP.NET Core autoinstrumentation feature.
Next steps
Deploy your application on Virtual Machine Scale Sets.
Application Insights availability tests
Monitor VM guest data
Feedback
Was this page helpful?
Additional resources