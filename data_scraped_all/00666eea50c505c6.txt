Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Use Azure Key Vault secrets in Azure Pipelines
Article
2024-11-11
14 contributors
In this article
Azure DevOps Services | Azure DevOps Server 2022 - Azure DevOps Server 2019
Azure Key Vault allows developers to securely store and manage sensitive information like API keys, credentials, or certificates.
Azure Key Vault service supports two types of containers: vaults and managed HSM (Hardware Security Module) pools. Vaults can store both software and HSM-backed keys, secrets, and certificates, while managed HSM pools exclusively support HSM-backed keys.
In this tutorial, you will learn how to:
Create an Azure Key Vault using Azure CLI
Add a secret and configure access to Azure key vault
Use secrets in your pipeline
Prerequisites
An Azure DevOps organization and a project. Create anorganizationor aprojectif you haven't already.
An Azure DevOps organization and a project. Create anorganizationor aprojectif you haven't already.
An Azure subscription.Create an Azure account for freeif you don't have one already.
An Azure subscription.Create an Azure account for freeif you don't have one already.
Get the sample code
If you already have your own repository, proceed to the next step. Otherwise, import the following sample repository into your Azure Repo.
Sign in to your Azure DevOps organization, and then navigate to your project.
Sign in to your Azure DevOps organization, and then navigate to your project.
SelectRepos, and then selectImport. Enter the following repository URL, and then selectImport.https://github.com/MicrosoftDocs/pipelines-dotnet-core
SelectRepos, and then selectImport. Enter the following repository URL, and then selectImport.
https://github.com/MicrosoftDocs/pipelines-dotnet-core
https://github.com/MicrosoftDocs/pipelines-dotnet-core
Create an Azure Key Vault
Sign in to theAzure portal, and then select theCloud Shellbutton in the upper-right corner.
Sign in to theAzure portal, and then select theCloud Shellbutton in the upper-right corner.
If you have more than one Azure subscription associated with your account, use the command below to specify a default subscription. You can useaz account listto generate a list of your subscriptions.az account set --subscription <YOUR_SUBSCRIPTION_NAME_OR_ID>
If you have more than one Azure subscription associated with your account, use the command below to specify a default subscription. You can useaz account listto generate a list of your subscriptions.
az account list
az account set --subscription <YOUR_SUBSCRIPTION_NAME_OR_ID>
az account set --subscription <YOUR_SUBSCRIPTION_NAME_OR_ID>
Set your default Azure region. You can useaz account list-locationsto generate a list of available regions.az config set defaults.location=<YOUR_REGION>
Set your default Azure region. You can useaz account list-locationsto generate a list of available regions.
az account list-locations
az config set defaults.location=<YOUR_REGION>
az config set defaults.location=<YOUR_REGION>
Create a new resource group.az group create --name <YOUR_RESOURCE_GROUP_NAME>
Create a new resource group.
az group create --name <YOUR_RESOURCE_GROUP_NAME>
az group create --name <YOUR_RESOURCE_GROUP_NAME>
Create a new Azure Key Vault.az keyvault create \
  --name <YOUR_KEY_VAULT_NAME> \
  --resource-group <YOUR_RESOURCE_GROUP_NAME>
Create a new Azure Key Vault.
az keyvault create \
  --name <YOUR_KEY_VAULT_NAME> \
  --resource-group <YOUR_RESOURCE_GROUP_NAME>
az keyvault create \
  --name <YOUR_KEY_VAULT_NAME> \
  --resource-group <YOUR_RESOURCE_GROUP_NAME>
Create a new secret in your Azure key vault.az keyvault secret set \
  --name <YOUR_SECRET_NAME> \
  --value <YOUR_ACTUAL_SECRET> \
  --vault-name <YOUR_KEY_VAULT_NAME>
Create a new secret in your Azure key vault.
az keyvault secret set \
  --name <YOUR_SECRET_NAME> \
  --value <YOUR_ACTUAL_SECRET> \
  --vault-name <YOUR_KEY_VAULT_NAME>
az keyvault secret set \
  --name <YOUR_SECRET_NAME> \
  --value <YOUR_ACTUAL_SECRET> \
  --vault-name <YOUR_KEY_VAULT_NAME>
Set up authentication
Managed Identity
Service Principal
Create a user-assigned managed identity
Sign in to theAzure portal, then search for theManaged Identitiesservice in the search bar.
Sign in to theAzure portal, then search for theManaged Identitiesservice in the search bar.
Select Create, and fill out the required fields as follows:Subscription: Select your subscription from the dropdown menu.Resource group: Select an existing resource group or create a new one.Region: Select a region from the dropdown menu.Name: Enter a name for your user-assigned managed identity.
Select Create, and fill out the required fields as follows:
Subscription: Select your subscription from the dropdown menu.
Resource group: Select an existing resource group or create a new one.
Region: Select a region from the dropdown menu.
Name: Enter a name for your user-assigned managed identity.
SelectReview + createwhen you're done.
SelectReview + createwhen you're done.
Once the deployment is complete, selectGo to resource, then copy theSubscriptionandClient IDvalues to use in upcoming steps.
Once the deployment is complete, selectGo to resource, then copy theSubscriptionandClient IDvalues to use in upcoming steps.
Navigate toSettings>Properties, and copy your managed identity'sTenant IDvalue for later use.
Navigate toSettings>Properties, and copy your managed identity'sTenant IDvalue for later use.
Set up key vault access policies
Navigate toAzure portal, and use the search bar to find the key vault you created earlier.
Navigate toAzure portal, and use the search bar to find the key vault you created earlier.
SelectAccess policies, then selectCreateto add a new policy.
SelectAccess policies, then selectCreateto add a new policy.
UnderSecret permissions, selectGetandListcheckboxes.
UnderSecret permissions, selectGetandListcheckboxes.
SelectNext, then paste theClient IDof the managed identity you created earlier into the search bar. Select your managed identity.
SelectNext, then paste theClient IDof the managed identity you created earlier into the search bar. Select your managed identity.
SelectNext, thenNextonce more.
SelectNext, thenNextonce more.
Review your new policies, and then selectCreatewhen you're done.
Review your new policies, and then selectCreatewhen you're done.
Create a service connection
Sign in to your Azure DevOps organization, and then navigate to your project.
Sign in to your Azure DevOps organization, and then navigate to your project.
SelectProject settings>Service connections, and then selectNew service connectionto create a new service connection.
SelectProject settings>Service connections, and then selectNew service connectionto create a new service connection.
SelectAzure Resource Manager, then selectNext.
SelectAzure Resource Manager, then selectNext.
ForIdentity Type, selectManaged identityfrom the dropdown menu.
ForIdentity Type, selectManaged identityfrom the dropdown menu.
ForStep 1: Managed identity details, fill out the fields as follows:Subscription for managed identity: Select the subscription containing your managed identity.Resource group for managed identity: Select the resource group hosting your managed identity.Managed Identity: Select your managed identity from the dropdown menu.
ForStep 1: Managed identity details, fill out the fields as follows:
Subscription for managed identity: Select the subscription containing your managed identity.
Subscription for managed identity: Select the subscription containing your managed identity.
Resource group for managed identity: Select the resource group hosting your managed identity.
Resource group for managed identity: Select the resource group hosting your managed identity.
Managed Identity: Select your managed identity from the dropdown menu.
Managed Identity: Select your managed identity from the dropdown menu.
ForStep 2: Azure Scope, fill out the fields as follows:Scope level for service connection: Select Subscription.Subscription for service connection: Select the subscription your managed identity will access.Resource group for Service connection: (Optional) Specify to limit managed identity access to one resource group.
ForStep 2: Azure Scope, fill out the fields as follows:
Scope level for service connection: Select Subscription.
Scope level for service connection: Select Subscription.
Subscription for service connection: Select the subscription your managed identity will access.
Subscription for service connection: Select the subscription your managed identity will access.
Resource group for Service connection: (Optional) Specify to limit managed identity access to one resource group.
Resource group for Service connection: (Optional) Specify to limit managed identity access to one resource group.
ForStep 3: Service connection details:Service connection name: Provide a name for your service connection.Service Management Reference: (Optional) Context information from an ITSM database.Description: (Optional) Add a description.
ForStep 3: Service connection details:
Service connection name: Provide a name for your service connection.
Service connection name: Provide a name for your service connection.
Service Management Reference: (Optional) Context information from an ITSM database.
Service Management Reference: (Optional) Context information from an ITSM database.
Description: (Optional) Add a description.
Description: (Optional) Add a description.
InSecurity, select theGrant access permission to all pipelinescheckbox to allow all pipelines to use this service connection. If you don't select this option, you must manually grant access to each pipeline that uses this service connection.
InSecurity, select theGrant access permission to all pipelinescheckbox to allow all pipelines to use this service connection. If you don't select this option, you must manually grant access to each pipeline that uses this service connection.
SelectSaveto validate and create the service connection.
SelectSaveto validate and create the service connection.

Set up key vault access policies
To access your Azure Key Vault, you must first set up a service principal to grant access to Azure Pipelines:
Create a service principal
Create a service principal
Navigate toAzure portal, and then use the search bar to find the key vault you created earlier.
Navigate toAzure portal, and then use the search bar to find the key vault you created earlier.
SelectAccess policies, and then selectCreate.
SelectAccess policies, and then selectCreate.
UnderSecret permissions, add theGetandListpermissions, and then selectNext.
UnderSecret permissions, add theGetandListpermissions, and then selectNext.
ForPrincipal, paste your service principal'sObject ID, select it, and then selectNext.
ForPrincipal, paste your service principal'sObject ID, select it, and then selectNext.
SelectNextonce more, review your policies, and then selectSavewhen you're done.
SelectNextonce more, review your policies, and then selectSavewhen you're done.
Add role assignment
In the next step, youâll create an ARM service connection for your service principal. Before verifying the connection, you need to: (1) grant the service principalReadaccess at the subscription level, and (2) create a federated credential for your service principal.
The following steps outline how to grantReadaccess at the subscription level:
Navigate toAzure portal, selectSubscriptions, and then find and select your subscription.
Navigate toAzure portal, selectSubscriptions, and then find and select your subscription.
SelectAccess control, and then selectAdd>Add role assignment.
SelectAccess control, and then selectAdd>Add role assignment.
SelectReaderunder theRoletab, and then selectNext.
SelectReaderunder theRoletab, and then selectNext.
SelectUser, group, or service principal, and then selectSelect members.
SelectUser, group, or service principal, and then selectSelect members.
Paste your service principal's Object ID in the search bar, select it, and thenSelect.
Paste your service principal's Object ID in the search bar, select it, and thenSelect.
SelectReview + assign, review your settings, and then selectReview + assignonce more to confirm your choices and add the role assignment.
SelectReview + assign, review your settings, and then selectReview + assignonce more to confirm your choices and add the role assignment.
Create a service connection
Sign in to your Azure DevOps organization, and then navigate to your project.
Sign in to your Azure DevOps organization, and then navigate to your project.
SelectProject settings, and then selectService connections.
SelectProject settings, and then selectService connections.
SelectNew service connection, selectAzure Resource Manager, and then selectNext.
SelectNew service connection, selectAzure Resource Manager, and then selectNext.
SelectService principal (manual), and then selectNext.
SelectService principal (manual), and then selectNext.
ForIdentity Type, selectApp registration or managed identity (manual)from the dropdown menu.
ForIdentity Type, selectApp registration or managed identity (manual)from the dropdown menu.
ForCredential, selectWorkload identity federation.
ForCredential, selectWorkload identity federation.
Provide a name for your service connection, and then selectNext.
Provide a name for your service connection, and then selectNext.
SelectAzure CloudforEnvironment, andSubscriptionfor theSubscription scope.
SelectAzure CloudforEnvironment, andSubscriptionfor theSubscription scope.
Enter your AzureSubscription IDandSubscription name.
Enter your AzureSubscription IDandSubscription name.
ForAuthentication, paste your service principal'sApplication (client) IDandDirectory (tenant) ID
ForAuthentication, paste your service principal'sApplication (client) IDandDirectory (tenant) ID
UnderSecurity, select theGrant access permission to all pipelinescheckbox to allow all pipelines to use this service connection. If you don't select this option, you must manually grant access to each pipeline that uses this service connection.
UnderSecurity, select theGrant access permission to all pipelinescheckbox to allow all pipelines to use this service connection. If you don't select this option, you must manually grant access to each pipeline that uses this service connection.
Leave this window open, you'll return to verify and save your service connection once you've created the federated credential in Azure.
Leave this window open, you'll return to verify and save your service connection once you've created the federated credential in Azure.
Create a service principal federated credential
Navigate toAzure portal, then enter your service principal'sClientIDin the search bar, and then select yourApplication.
Navigate toAzure portal, then enter your service principal'sClientIDin the search bar, and then select yourApplication.
UnderManage, selectCertificates & secrets>Federated credentials.
UnderManage, selectCertificates & secrets>Federated credentials.
SelectAdd credential, and then forFederated credential scenario, selectOther issuer.
SelectAdd credential, and then forFederated credential scenario, selectOther issuer.
ForIssuer, paste theIssueryou copied from your service connection earlier.
ForIssuer, paste theIssueryou copied from your service connection earlier.
ForSubject identifier, paste theSubject identifieryou copied from your service connection earlier.
ForSubject identifier, paste theSubject identifieryou copied from your service connection earlier.
Provide aNamefor your federated credential, and then selectAddwhen you're done.
Provide aNamefor your federated credential, and then selectAddwhen you're done.
Return to your service connection window, selectVerify and Saveto save your service connection.
Return to your service connection window, selectVerify and Saveto save your service connection.
Access key vault secrets from your pipeline
YAML
Classic
Sign in to your Azure DevOps organization, and then navigate to your project.
Sign in to your Azure DevOps organization, and then navigate to your project.
SelectPipelines, and then selectNew Pipeline.
SelectPipelines, and then selectNew Pipeline.
SelectAzure Repos Git(YAML), and then select your repository.
SelectAzure Repos Git(YAML), and then select your repository.
Select theStarter pipelinetemplate.
Select theStarter pipelinetemplate.
The default pipeline will include a script that runs echo commands. Those are not needed so we can delete them.
The default pipeline will include a script that runs echo commands. Those are not needed so we can delete them.
Add the AzureKeyVault task, replacing the placeholders with the name of the service connection you created earlier and your key vault name. Your YAML file should resemble the following snippet:trigger:
- main

pool:
  vmImage: ubuntu-latest

steps:
- task: AzureKeyVault@2
  displayName: Azure Key Vault
  inputs:
    azureSubscription: 'SERVICE_CONNECTION_NAME'
    KeyVaultName: 'KEY_VAULT_NAME'
    SecretsFilter: '*'
    RunAsPreJob: false
Add the AzureKeyVault task, replacing the placeholders with the name of the service connection you created earlier and your key vault name. Your YAML file should resemble the following snippet:
trigger:
- main

pool:
  vmImage: ubuntu-latest

steps:
- task: AzureKeyVault@2
  displayName: Azure Key Vault
  inputs:
    azureSubscription: 'SERVICE_CONNECTION_NAME'
    KeyVaultName: 'KEY_VAULT_NAME'
    SecretsFilter: '*'
    RunAsPreJob: false
trigger:
- main

pool:
  vmImage: ubuntu-latest

steps:
- task: AzureKeyVault@2
  displayName: Azure Key Vault
  inputs:
    azureSubscription: 'SERVICE_CONNECTION_NAME'
    KeyVaultName: 'KEY_VAULT_NAME'
    SecretsFilter: '*'
    RunAsPreJob: false
Let's add the following tasks to copy and publish our secret. This example is for demonstration purposes only and should not be implemented in a production environment.trigger:
- main

pool:
  vmImage: ubuntu-latest

steps:
- task: AzureKeyVault@2
  displayName: Azure Key Vault
  inputs:
    azureSubscription: 'SERVICE_CONNECTION_NAME'
    KeyVaultName: 'KEY_VAULT_NAME'
    SecretsFilter: '*'
    RunAsPreJob: false

- task: CmdLine@2
  displayName: Create file
  inputs:
    script: 'echo $(SECRET_NAME) > secret.txt'

- task: CopyFiles@2
  displayName: Copy file
  inputs:
    Contents: secret.txt
    targetFolder: '$(Build.ArtifactStagingDirectory)'

- task: PublishBuildArtifacts@1
  displayName: Publish Artifact
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'
Let's add the following tasks to copy and publish our secret. This example is for demonstration purposes only and should not be implemented in a production environment.
trigger:
- main

pool:
  vmImage: ubuntu-latest

steps:
- task: AzureKeyVault@2
  displayName: Azure Key Vault
  inputs:
    azureSubscription: 'SERVICE_CONNECTION_NAME'
    KeyVaultName: 'KEY_VAULT_NAME'
    SecretsFilter: '*'
    RunAsPreJob: false

- task: CmdLine@2
  displayName: Create file
  inputs:
    script: 'echo $(SECRET_NAME) > secret.txt'

- task: CopyFiles@2
  displayName: Copy file
  inputs:
    Contents: secret.txt
    targetFolder: '$(Build.ArtifactStagingDirectory)'

- task: PublishBuildArtifacts@1
  displayName: Publish Artifact
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'
trigger:
- main

pool:
  vmImage: ubuntu-latest

steps:
- task: AzureKeyVault@2
  displayName: Azure Key Vault
  inputs:
    azureSubscription: 'SERVICE_CONNECTION_NAME'
    KeyVaultName: 'KEY_VAULT_NAME'
    SecretsFilter: '*'
    RunAsPreJob: false

- task: CmdLine@2
  displayName: Create file
  inputs:
    script: 'echo $(SECRET_NAME) > secret.txt'

- task: CopyFiles@2
  displayName: Copy file
  inputs:
    Contents: secret.txt
    targetFolder: '$(Build.ArtifactStagingDirectory)'

- task: PublishBuildArtifacts@1
  displayName: Publish Artifact
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'
SelectSave and run, and then select it once more to commit your changes and trigger the pipeline. You may be asked to allow the pipeline access to Azure resources, if prompted selectAllow. You will only have to approve your pipeline once.
SelectSave and run, and then select it once more to commit your changes and trigger the pipeline. You may be asked to allow the pipeline access to Azure resources, if prompted selectAllow. You will only have to approve your pipeline once.
Select theCmdLinetask to view the logs.
Select theCmdLinetask to view the logs.

Once the pipeline run is complete, return to the pipeline summary and select the published artifact.
Once the pipeline run is complete, return to the pipeline summary and select the published artifact.

Selectdrop>secret.txtto download it.
Selectdrop>secret.txtto download it.

Open the text file you just downloaded, the text file should contain the secret from your Azure key vault.
Open the text file you just downloaded, the text file should contain the secret from your Azure key vault.
Sign in to your Azure DevOps organization, and then navigate to your project.
Sign in to your Azure DevOps organization, and then navigate to your project.
SelectPipelines, and then selectNew Pipeline.
SelectPipelines, and then selectNew Pipeline.
SelectUse the classic editorto create a classic pipeline.
SelectUse the classic editorto create a classic pipeline.
SelectAzure Repos Git, select your repository and default branch, and then selectContinue.
SelectAzure Repos Git, select your repository and default branch, and then selectContinue.
Select the.Net Desktoppipeline template.
Select the.Net Desktoppipeline template.
For this example, we will only need the last two tasks. Press CTRL and then select the first five tasks, right-click and chooseRemove selected tasks(s)to delete them.
For this example, we will only need the last two tasks. Press CTRL and then select the first five tasks, right-click and chooseRemove selected tasks(s)to delete them.

Select+to add a new task. Search for theCommand linetask, select it, and then selectAddto add it to your pipeline. Once added, configure it as follows:Display name: Create fileScript:echo $(SECRET_NAME) > secret.txt
Select+to add a new task. Search for theCommand linetask, select it, and then selectAddto add it to your pipeline. Once added, configure it as follows:
Display name: Create file
Script:echo $(SECRET_NAME) > secret.txt
echo $(SECRET_NAME) > secret.txt

Select+to add a new task. Search for theAzure Key Vaulttask, select it, and then selectAdd* to add it to your pipeline. Once added, configure it as follows:Display name: Azure Key VaultAzure subscription: select the service connection you created earlierKey vault: select your key vaultSecret filter: A comma separated list of secret names or leave * to download all secrets from the selected key vault
Select+to add a new task. Search for theAzure Key Vaulttask, select it, and then selectAdd* to add it to your pipeline. Once added, configure it as follows:
Display name: Azure Key Vault
Azure subscription: select the service connection you created earlier
Key vault: select your key vault
Secret filter: A comma separated list of secret names or leave * to download all secrets from the selected key vault

Select theCopy filestask and fill out the required fields as follows:Display name: Copy FileContents: secret.txtTarget Folder: $(build.artifactstagingdirectory)
Select theCopy filestask and fill out the required fields as follows:
Display name: Copy File
Contents: secret.txt
Target Folder: $(build.artifactstagingdirectory)

Select thePublish Artifactstask and fill out the required fields as follows:Display name: Publish ArtifactPath to publish: $(build.artifactstagingdirectory)Artifact name: dropArtifact publish location: Azure Pipelines
Select thePublish Artifactstask and fill out the required fields as follows:
Display name: Publish Artifact
Path to publish: $(build.artifactstagingdirectory)
Artifact name: drop
Artifact publish location: Azure Pipelines

SelectSave and queue, and then selectRunto run your pipeline.
SelectSave and queue, and then selectRunto run your pipeline.
Once the pipeline run is complete, return to the pipeline summary and select the published artifact.
Once the pipeline run is complete, return to the pipeline summary and select the published artifact.
Selectdrop>secret.txtto download the published artifact.
Selectdrop>secret.txtto download the published artifact.

Open the text file you just downloaded, the text file should contain the secret from your Azure key vault.
Open the text file you just downloaded, the text file should contain the secret from your Azure key vault.
Warning
This tutorial is for educational purposes only. For security best practices and how to safely work with secrets, seeManage secrets in your server apps with Azure Key Vault.
Clean up resources
Follow the steps below to delete the resources you created:
If you've created a new organization to host your project, seehow to delete your organization, otherwisedelete your project.
If you've created a new organization to host your project, seehow to delete your organization, otherwisedelete your project.
All Azure resources created during this tutorial are hosted under a single resource group. Run the following command to delete your resource group and all of its resources.az group delete --name <YOUR_RESOURCE_GROUP_NAME>
All Azure resources created during this tutorial are hosted under a single resource group. Run the following command to delete your resource group and all of its resources.
az group delete --name <YOUR_RESOURCE_GROUP_NAME>
az group delete --name <YOUR_RESOURCE_GROUP_NAME>
FAQ
A: If you encounter an error indicating that the user or group does not have secrets list permission on key vault, run the following commands to authorize your application to access the key or secret in the Azure Key Vault:
az account set --subscription <YOUR_SUBSCRIPTION_ID>

az login

$spnObjectId = az ad sp show --id <YOUR_SERVICE_PRINCIPAL_ID>

az keyvault set-policy --name <YOUR_KEY_VAULT_NAME> --object-id $spnObjectId --secret-permissions get list
az account set --subscription <YOUR_SUBSCRIPTION_ID>

az login

$spnObjectId = az ad sp show --id <YOUR_SERVICE_PRINCIPAL_ID>

az keyvault set-policy --name <YOUR_KEY_VAULT_NAME> --object-id $spnObjectId --secret-permissions get list
Related articles
Publish and download pipeline artifacts
Release artifacts and artifact sources
Use gates and approvals to control deployment
Feedback
Was this page helpful?
Additional resources