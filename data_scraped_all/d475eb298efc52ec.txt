Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
How Azure Machine Learning works: resources and assets
Article
2024-09-30
4 contributors
In this article
APPLIES TO:Azure CLI ml extension v2 (current)Python SDK azure-ai-ml v2 (current)
This article applies to the second version of theAzure Machine Learning CLI & Python SDK (v2). For version one (v1), seeHow Azure Machine Learning works: Architecture and concepts (v1)
Azure Machine Learning includes several resources and assets to enable you to perform your machine learning tasks. These resources and assets are needed to run any job.
Resources: setup or infrastructural resources needed to run a machine learning workflow. Resources include:WorkspaceComputeDatastore
Workspace
Compute
Datastore
Assets: created using Azure Machine Learning commands or as part of a training/scoring run. Assets are versioned and can be registered in the Azure Machine Learning workspace. They include:ModelEnvironmentDataComponent
Model
Environment
Data
Component
This document provides a quick overview of these resources and assets.
Prerequisites
Python SDK
Azure CLI
Studio
To use the Python SDK code examples in this article:
Install thePython SDK v2
Install thePython SDK v2
Create a connection to your Azure Machine Learning subscription. The examples all rely onml_client. To create a workspace, the connection doesn't need a workspace name, since you may not yet have one. All other examples in this article require that the workspace name is included in the connection.# import required libraries
from azure.ai.ml import MLClient
from azure.ai.ml.entities import Workspace
from azure.identity import DefaultAzureCredential

# Enter details of your subscription
subscription_id = "<SUBSCRIPTION_ID>"
resource_group = "<RESOURCE_GROUP>"

# get a handle to the subscription (use this if you haven't created a workspace yet)
ml_client = MLClient(DefaultAzureCredential(), subscription_id, resource_group)

# all other examples in this article require the connection to include workspace name
workspace_name = "<WORKSPACE_NAME>"
ml_client = ml_client = MLClient(DefaultAzureCredential(), subscription_id, resource_group, workspace_name)
Create a connection to your Azure Machine Learning subscription. The examples all rely onml_client. To create a workspace, the connection doesn't need a workspace name, since you may not yet have one. All other examples in this article require that the workspace name is included in the connection.
ml_client
# import required libraries
from azure.ai.ml import MLClient
from azure.ai.ml.entities import Workspace
from azure.identity import DefaultAzureCredential

# Enter details of your subscription
subscription_id = "<SUBSCRIPTION_ID>"
resource_group = "<RESOURCE_GROUP>"

# get a handle to the subscription (use this if you haven't created a workspace yet)
ml_client = MLClient(DefaultAzureCredential(), subscription_id, resource_group)

# all other examples in this article require the connection to include workspace name
workspace_name = "<WORKSPACE_NAME>"
ml_client = ml_client = MLClient(DefaultAzureCredential(), subscription_id, resource_group, workspace_name)
# import required libraries
from azure.ai.ml import MLClient
from azure.ai.ml.entities import Workspace
from azure.identity import DefaultAzureCredential

# Enter details of your subscription
subscription_id = "<SUBSCRIPTION_ID>"
resource_group = "<RESOURCE_GROUP>"

# get a handle to the subscription (use this if you haven't created a workspace yet)
ml_client = MLClient(DefaultAzureCredential(), subscription_id, resource_group)

# all other examples in this article require the connection to include workspace name
workspace_name = "<WORKSPACE_NAME>"
ml_client = ml_client = MLClient(DefaultAzureCredential(), subscription_id, resource_group, workspace_name)
To use the Azure CLI code examples in this article, you need to have the Azure CLI installed and configured. You can install the Azure CLI from theInstall and set up the CLI (v2).
Once you have the Azure CLI installed, sign in to your Azure account:
az login
az login
If you have access to multiple Azure subscriptions, you set your active subscription:
az account set -s "<YOUR_SUBSCRIPTION_NAME_OR_ID>"
az account set -s "<YOUR_SUBSCRIPTION_NAME_OR_ID>"
Sign in toAzure Machine Learning studio.
Workspace
The workspace is the top-level resource for Azure Machine Learning, providing a centralized place to work with all the artifacts you create when you use Azure Machine Learning. The workspace keeps a history of all jobs, including logs, metrics, output, and a snapshot of your scripts. The workspace stores references to resources like datastores and compute. It also holds all assets like models, environments, components, and data asset.
Create a workspace
Python SDK
Azure CLI
Studio
To create a workspace using Python SDK v2, you can use the following code:
APPLIES TO:Python SDK azure-ai-mlv2 (current)
# specify the workspace details
ws = Workspace(
    name="my_workspace",
    location="eastus",
    display_name="My workspace",
    description="This example shows how to create a workspace",
    tags=dict(purpose="demo"),
)

ml_client.workspaces.begin_create(ws) # use MLClient to connect to the subscription and resource group and create workspace
# specify the workspace details
ws = Workspace(
    name="my_workspace",
    location="eastus",
    display_name="My workspace",
    description="This example shows how to create a workspace",
    tags=dict(purpose="demo"),
)

ml_client.workspaces.begin_create(ws) # use MLClient to connect to the subscription and resource group and create workspace
ThisJupyter notebookshows more ways to create an Azure Machine Learning workspace using SDK v2.
To create a workspace using CLI v2, use the following command:
APPLIES TO:Azure CLI ml extensionv2 (current)
az ml workspace create --file my_workspace.yml
az ml workspace create --file my_workspace.yml
For the content of the file, seeworkspace YAML examples.
Create a workspace in the studio welcome page by selectingCreate workspace.
For more detailed information about creating a workspace, seeManage Azure Machine Learning workspaces in the portal or with the Python SDK (v2).
Compute
A compute is a designated compute resource where you run your job or host your endpoint. Azure Machine Learning supports the following types of compute:
Compute instance- a fully configured and managed development environment in the cloud. You can use the instance as a training or inference compute for development and testing. It's similar to a virtual machine on the cloud.
Compute cluster- a managed-compute infrastructure that allows you to easily create a cluster of CPU or GPU compute nodes in the cloud.
Serverless compute- a compute cluster you access on the fly. When you use serverless compute, you don't need to create your own cluster. All compute lifecycle management is offloaded to Azure Machine Learning.
Inference cluster- used to deploy trained machine learning models to Azure Kubernetes Service. You can create an Azure Kubernetes Service (AKS) cluster from your Azure Machine Learning workspace, or attach an existing AKS cluster.
Attached compute- You can attach your own compute resources to your workspace and use them for training and inference.
Create a compute
Python SDK
Azure CLI
Studio
To create a compute cluster using Python SDK v2, you can use the following code:
APPLIES TO:Python SDK azure-ai-mlv2 (current)
cluster_basic = AmlCompute(
    name="basic-example",
    type="amlcompute",
    size="STANDARD_DS3_v2",
    location="westus",
    min_instances=0,
    max_instances=2,
    idle_time_before_scale_down=120,
)
ml_client.begin_create_or_update(cluster_basic)
cluster_basic = AmlCompute(
    name="basic-example",
    type="amlcompute",
    size="STANDARD_DS3_v2",
    location="westus",
    min_instances=0,
    max_instances=2,
    idle_time_before_scale_down=120,
)
ml_client.begin_create_or_update(cluster_basic)
ThisJupyter notebookshows more ways to create compute using SDK v2.
To create a compute using CLI v2, use the following command:
APPLIES TO:Azure CLI ml extensionv2 (current)
az ml compute create --file my_compute.yml
az ml compute create --file my_compute.yml
For the content of the file, seecompute YAML examples.
Select a workspace if you aren't already in one.
From the left-hand menu, selectCompute.
On the top, select a tab to specify the type of compute you want to create.
SelectNewto create the new compute.
For more detailed information about creating compute, see:
Create an Azure Machine Learning compute instance
Create an Azure Machine Learning compute cluster
Datastore
Azure Machine Learning datastores securely keep the connection information to your data storage on Azure, so you don't have to code it in your scripts. You can register and create a datastore to easily connect to your storage account, and access the data in your underlying storage service. The CLI v2 and SDK v2 support the following types of cloud-based storage services:
Azure Blob Container
Azure File Share
Azure Data Lake
Azure Data Lake Gen2
Create a datastore
Python SDK
Azure CLI
Studio
To create a datastore using Python SDK v2, you can use the following code:
APPLIES TO:Python SDK azure-ai-mlv2 (current)
import AzureBlobDatastore

blob_datastore1 = AzureBlobDatastore(
    name="blob_example",
    description="Datastore pointing to a blob container.",
    account_name="mytestblobstore",
    container_name="data-container",
    credentials={
        "account_key": "XXXxxxXXXxXXXXxxXXXXXxXXXXXxXxxXxXXXxXXXxXXxxxXXxxXXXxXxXXXxxXxxXXXXxxxxxXXxxxxxxXXXxXXX"
    },
)
ml_client.create_or_update(blob_datastore1)
import AzureBlobDatastore

blob_datastore1 = AzureBlobDatastore(
    name="blob_example",
    description="Datastore pointing to a blob container.",
    account_name="mytestblobstore",
    container_name="data-container",
    credentials={
        "account_key": "XXXxxxXXXxXXXXxxXXXXXxXXXXXxXxxXxXXXxXXXxXXxxxXXxxXXXxXxXXXxxXxxXXXXxxxxxXXxxxxxxXXXxXXX"
    },
)
ml_client.create_or_update(blob_datastore1)
ThisJupyter notebookshows more ways to create datastores using SDK v2.
To create a datastore using CLI v2, use the following command:
APPLIES TO:Azure CLI ml extensionv2 (current)
az ml datastore create --file my_datastore.yml
az ml datastore create --file my_datastore.yml
For the content of the file, seedatastore YAML examples.
Select a workspace if you aren't already in one.
From the left-hand menu, selectData.
On the top, selectDatastores.
SelectCreateto create a new datastore.
To learn more about using a datastore, seeCreate and manage data assets.
Model
Azure Machine Learning models consist of one or more binary files that represent a machine learning model and any corresponding metadata. Models can be created from a local or remote file or directory. For remote locationshttps,wasbsandazuremllocations are supported. The created model is tracked in the workspace under the specified name and version. Azure Machine Learning supports three types of storage format for models:
https
wasbs
azureml
custom_model
custom_model
mlflow_model
mlflow_model
triton_model
triton_model
Create a model in the model registry
Model registration allows you to store and version your models in the Azure cloud, in your workspace. The model registry helps you organize and keep track of your trained models.
For more information on how to create models in the registry, seeWork with models in Azure Machine Learning.
Environment
Azure Machine Learning environments are an encapsulation of the environment where your machine learning task happens. They specify the software packages, environment variables, and software settings around your training and scoring scripts. The environments are managed and versioned entities within your Machine Learning workspace. Environments enable reproducible, auditable, and portable machine learning workflows across various computes.
Types of environment
Azure Machine Learning supports two types of environments: curated and custom.
Curated environments are provided by Azure Machine Learning and are available in your workspace by default. Intended to be used as is, they contain collections of Python packages and settings to help you get started with various machine learning frameworks. These precreated environments also allow for faster deployment time. For a full list, see thecurated environments article.
In custom environments, you're responsible for setting up your environment and installing packages or any other dependencies that your training or scoring script needs on the compute. Azure Machine Learning allows you to create your own environment using
A docker image
A base docker image with a conda YAML to customize further
A docker build context
Create an Azure Machine Learning custom environment
Python SDK
Azure CLI
Studio
To create an environment using Python SDK v2, seeCreate an environment.
ThisJupyter notebookshows more ways to create custom environments using SDK v2.
To create an environment using CLI v2, seeCreate an environment.
For more information, seeenvironment YAML schema.
Select a workspace if you aren't already in one.
From the left-hand menu, selectEnvironments.
On the top, selectCustom environments.
SelectCreateto create a new custom environment.
For more detailed information about environments, seeCreate and manage environments in Azure Machine Learning.
Data
Azure Machine Learning allows you to work with different types of data:
URIs (a location in local/cloud storage)uri_folderuri_file
uri_folder
uri_folder
uri_file
uri_file
Tables (a tabular data abstraction)mltable
mltable
mltable
Primitivesstringbooleannumber
string
string
boolean
boolean
number
number
For most scenarios, you use URIs (uri_folderanduri_file) - a location in storage that can be easily mapped to the filesystem of a compute node in a job by either mounting or downloading the storage to the node.
uri_folder
uri_file
mltableis an abstraction for tabular data that is to be used for AutoML Jobs, Parallel Jobs, and some advanced scenarios. If you're just starting to use Azure Machine Learning and aren't using AutoML, we strongly encourage you to begin with URIs.
mltable
Component
An Azure Machine Learningcomponentis a self-contained piece of code that does one step in a machine learning pipeline. Components are the building blocks of advanced machine learning pipelines. Components can do tasks such as data processing, model training, model scoring, and so on. A component is analogous to a function - it has a name, parameters, expects input, and returns output.
Related content
How to upgrade from v1 to v2
Train models with the v2 CLI and SDK
Feedback
Was this page helpful?
Additional resources