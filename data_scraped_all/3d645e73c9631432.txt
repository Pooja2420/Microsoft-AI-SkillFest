Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Quickstart: Set up Azure NetApp Files and create an NFS volume
Article
2025-03-11
16 contributors
In this article
This article shows you how to quickly set up Azure NetApp Files and create an NFS volume.
In this quickstart, you set up the following items:
Registration for NetApp Resource Provider
A NetApp account
A capacity pool
An NFS volume for Azure NetApp Files
If you don't have an Azure subscription, create afree accountbefore you begin.
To see all features that you can enable for an NFS volume and relevant considerations, seeCreate an NFS volume.
Register for NetApp Resource Provider
Note
The registration process can take some time to complete.
Portal
PowerShell
Azure CLI
Template
Terraform
For registration steps using Portal, open a Cloud Shell session as indicated above and follow these Azure CLI steps:
Specify the subscription that has been approved for Azure NetApp Files:az account set --subscription <subscriptionId>
Specify the subscription that has been approved for Azure NetApp Files:
az account set --subscription <subscriptionId>
az account set --subscription <subscriptionId>
Register the Azure Resource Provider:az provider register --namespace Microsoft.NetApp --wait
Register the Azure Resource Provider:
az provider register --namespace Microsoft.NetApp --wait
az provider register --namespace Microsoft.NetApp --wait
This how-to article requires the Azure PowerShell module Az version 2.6.0 or later. RunGet-Module -ListAvailable Azto find your current version. If you need to install or upgrade, seeInstall Azure PowerShell module. If you prefer, you can use Cloud Shell console in a PowerShell session instead.
Get-Module -ListAvailable Az
In a PowerShell command prompt (or PowerShell Cloud Shell session), specify the subscription that has been approved for Azure NetApp Files:Select-AzSubscription -Subscription <subscriptionId>
In a PowerShell command prompt (or PowerShell Cloud Shell session), specify the subscription that has been approved for Azure NetApp Files:
Select-AzSubscription -Subscription <subscriptionId>
Select-AzSubscription -Subscription <subscriptionId>
Register the Azure Resource Provider:Register-AzResourceProvider -ProviderNamespace Microsoft.NetApp
Register the Azure Resource Provider:
Register-AzResourceProvider -ProviderNamespace Microsoft.NetApp
Register-AzResourceProvider -ProviderNamespace Microsoft.NetApp
Prepare your environment for the Azure CLI.
Use the Bash environment inAzure Cloud Shell. For more information, seeGet started with Azure Cloud Shell.
Use the Bash environment inAzure Cloud Shell. For more information, seeGet started with Azure Cloud Shell.

If you prefer to run CLI reference commands locally,installthe Azure CLI. If you're running on Windows or macOS, consider running Azure CLI in a Docker container. For more information, seeHow to run the Azure CLI in a Docker container.If you're using a local installation, sign in to the Azure CLI by using theaz logincommand. To finish the authentication process, follow the steps displayed in your terminal. For other sign-in options, seeAuthenticate to Azure using Azure CLI.When you're prompted, install the Azure CLI extension on first use. For more information about extensions, seeUse and manage extensions with the Azure CLI.Runaz versionto find the version and dependent libraries that are installed. To upgrade to the latest version, runaz upgrade.
If you prefer to run CLI reference commands locally,installthe Azure CLI. If you're running on Windows or macOS, consider running Azure CLI in a Docker container. For more information, seeHow to run the Azure CLI in a Docker container.
If you're using a local installation, sign in to the Azure CLI by using theaz logincommand. To finish the authentication process, follow the steps displayed in your terminal. For other sign-in options, seeAuthenticate to Azure using Azure CLI.
If you're using a local installation, sign in to the Azure CLI by using theaz logincommand. To finish the authentication process, follow the steps displayed in your terminal. For other sign-in options, seeAuthenticate to Azure using Azure CLI.
When you're prompted, install the Azure CLI extension on first use. For more information about extensions, seeUse and manage extensions with the Azure CLI.
When you're prompted, install the Azure CLI extension on first use. For more information about extensions, seeUse and manage extensions with the Azure CLI.
Runaz versionto find the version and dependent libraries that are installed. To upgrade to the latest version, runaz upgrade.
Runaz versionto find the version and dependent libraries that are installed. To upgrade to the latest version, runaz upgrade.
Specify the subscription that has been approved for Azure NetApp Files:az account set --subscription <subscriptionId>
Specify the subscription that has been approved for Azure NetApp Files:
az account set --subscription <subscriptionId>
az account set --subscription <subscriptionId>
Register the Azure Resource Provider:az provider register --namespace Microsoft.NetApp --wait
Register the Azure Resource Provider:
az provider register --namespace Microsoft.NetApp --wait
az provider register --namespace Microsoft.NetApp --wait
None.
Use the Azure portal, PowerShell, or the Azure CLI toregister for NetApp Resource Provider.
Terraformenables the definition, preview, and deployment of cloud infrastructure. Using Terraform, you create configuration files usingHCL syntax. The HCL syntax allows you to specify the cloud provider - such as Azure - and the elements that make up your cloud infrastructure. After you create your configuration files, you create anexecution planthat allows you to preview your infrastructure changes before they're deployed. Once you verify the changes, you apply the execution plan to deploy the infrastructure.
Use the Azure portal, Azure PowerShell, or the Azure CLI toregister for NetApp Resource Provider.
Create a NetApp account
Portal
PowerShell
Azure CLI
Template
Terraform
In the Azure portal's search box, enterAzure NetApp Filesand then selectAzure NetApp Filesfrom the list that appears.
In the Azure portal's search box, enterAzure NetApp Filesand then selectAzure NetApp Filesfrom the list that appears.

Select+ Createto create a new NetApp account.
Select+ Createto create a new NetApp account.
In the New NetApp Account window, provide the following information:Entermyaccount1for the account name.Select your subscription.SelectCreate newto create new resource group. EntermyRG1for the resource group name. SelectOK.Select your account location.
In the New NetApp Account window, provide the following information:
Entermyaccount1for the account name.
Entermyaccount1for the account name.
Select your subscription.
Select your subscription.
SelectCreate newto create new resource group. EntermyRG1for the resource group name. SelectOK.
SelectCreate newto create new resource group. EntermyRG1for the resource group name. SelectOK.
Select your account location.
Select your account location.


SelectCreateto create your new NetApp account.
SelectCreateto create your new NetApp account.
Define some variables so we can refer to them throughout the rest of the examples:$resourceGroup = "myRG1"
$location = "eastus"
$anfAccountName = "myaccount1"NotePlease refer toProducts available by regionfor a list of supported regions.
To obtain the region name that is supported by our command line tools, please useGet-AzLocation | select Location
Define some variables so we can refer to them throughout the rest of the examples:
$resourceGroup = "myRG1"
$location = "eastus"
$anfAccountName = "myaccount1"
$resourceGroup = "myRG1"
$location = "eastus"
$anfAccountName = "myaccount1"
Note
Please refer toProducts available by regionfor a list of supported regions.
To obtain the region name that is supported by our command line tools, please useGet-AzLocation | select Location
Get-AzLocation | select Location
Create a new resource group by using theNew-AzResourceGroupcommand:New-AzResourceGroup -Name $resourceGroup -Location $location
Create a new resource group by using theNew-AzResourceGroupcommand:
New-AzResourceGroup -Name $resourceGroup -Location $location
New-AzResourceGroup -Name $resourceGroup -Location $location
Create Azure NetApp Files account withNew-AzNetAppFilesAccountcommand:New-AzNetAppFilesAccount -ResourceGroupName $resourceGroup -Location $location -Name $anfAccountName
Create Azure NetApp Files account withNew-AzNetAppFilesAccountcommand:
New-AzNetAppFilesAccount -ResourceGroupName $resourceGroup -Location $location -Name $anfAccountName
New-AzNetAppFilesAccount -ResourceGroupName $resourceGroup -Location $location -Name $anfAccountName
Define some variables so we can refer to them throughout the rest of the examples:RESOURCE_GROUP="myRG1"
LOCATION="eastus"
ANF_ACCOUNT_NAME="myaccount1"NotePlease refer toProducts available by regionfor a list of supported regions.
To obtain the region name that is supported by our command line tools, please useaz account list-locations --query "[].{Region:name}" --out table
Define some variables so we can refer to them throughout the rest of the examples:
RESOURCE_GROUP="myRG1"
LOCATION="eastus"
ANF_ACCOUNT_NAME="myaccount1"
RESOURCE_GROUP="myRG1"
LOCATION="eastus"
ANF_ACCOUNT_NAME="myaccount1"
Note
Please refer toProducts available by regionfor a list of supported regions.
To obtain the region name that is supported by our command line tools, please useaz account list-locations --query "[].{Region:name}" --out table
az account list-locations --query "[].{Region:name}" --out table
Create a new resource group by using theaz group createcommand:az group create \
    --name $RESOURCE_GROUP \
    --location $LOCATION
Create a new resource group by using theaz group createcommand:
az group create \
    --name $RESOURCE_GROUP \
    --location $LOCATION
az group create \
    --name $RESOURCE_GROUP \
    --location $LOCATION
Create Azure NetApp Files account withaz netappfiles account createcommand:az netappfiles account create \
    --resource-group $RESOURCE_GROUP \
    --location $LOCATION \
    --account-name $ANF_ACCOUNT_NAME
Create Azure NetApp Files account withaz netappfiles account createcommand:
az netappfiles account create \
    --resource-group $RESOURCE_GROUP \
    --location $LOCATION \
    --account-name $ANF_ACCOUNT_NAME
az netappfiles account create \
    --resource-group $RESOURCE_GROUP \
    --location $LOCATION \
    --account-name $ANF_ACCOUNT_NAME
AnAzure Resource Manager templateis a JavaScript Object Notation (JSON) file that defines the infrastructure and configuration for your project. The template uses declarative syntax. You describe your intended deployment without writing the sequence of programming commands to create the deployment.
The following code snippet shows how to create a NetApp account in an Azure Resource Manager template (ARM template), using theMicrosoft.NetApp/netAppAccountsresource. To run the code, download thefull ARM templatefrom our GitHub repo.
{
  "type": "Microsoft.NetApp/netAppAccounts",
  "apiVersion": "2020-06-01",
  "name": "[parameters('netAppAccountName')]",
  "location": "[parameters('location')]",
  "properties": {}
},
{
  "type": "Microsoft.NetApp/netAppAccounts",
  "apiVersion": "2020-06-01",
  "name": "[parameters('netAppAccountName')]",
  "location": "[parameters('location')]",
  "properties": {}
},
The following code snippet shows how to create a NetApp account usingTerraform. The sample code for this article is located in theAzure Terraform GitHub repo. You can view the log file containing thetest results from current and previous versions of Terraform.
# Create NetApp Account
resource "azurerm_netapp_account" "account" {
  name                = "account-${random_string.name.result}"
  resource_group_name = azurerm_resource_group.rg.name
  location            = azurerm_resource_group.rg.location
}
# Create NetApp Account
resource "azurerm_netapp_account" "account" {
  name                = "account-${random_string.name.result}"
  resource_group_name = azurerm_resource_group.rg.name
  location            = azurerm_resource_group.rg.location
}
Create a capacity pool
Portal
PowerShell
Azure CLI
Template
Terraform
From the Azure NetApp Files management blade, select your NetApp account (myaccount1).
From the Azure NetApp Files management blade, select your NetApp account (myaccount1).

From the Azure NetApp Files management blade of your NetApp account, selectCapacity pools.
From the Azure NetApp Files management blade of your NetApp account, selectCapacity pools.

Select+ Add pools.
Select+ Add pools.

Provide information for the capacity pool:Entermypool1as the pool name.SelectPremiumfor the service level.Specify4 (TiB)as the pool size.Use theAutoQoS type.
Provide information for the capacity pool:
Entermypool1as the pool name.
SelectPremiumfor the service level.
Specify4 (TiB)as the pool size.
Use theAutoQoS type.
SelectCreate.
SelectCreate.
Defining some new variables for future reference$poolName = "mypool1"
$poolSizeBytes = 4398046511104 # 4TiB
$serviceLevel = "Premium" # Valid values are Standard, Premium and Ultra
Defining some new variables for future reference
$poolName = "mypool1"
$poolSizeBytes = 4398046511104 # 4TiB
$serviceLevel = "Premium" # Valid values are Standard, Premium and Ultra
$poolName = "mypool1"
$poolSizeBytes = 4398046511104 # 4TiB
$serviceLevel = "Premium" # Valid values are Standard, Premium and Ultra
Create a new capacity pool by using theNew-AzNetAppFilesPoolNew-AzNetAppFilesPool -ResourceGroupName $resourceGroup -Location $location -AccountName $anfAccountName -Name $poolName -PoolSize $poolSizeBytes -ServiceLevel $serviceLevel
Create a new capacity pool by using theNew-AzNetAppFilesPool
New-AzNetAppFilesPool -ResourceGroupName $resourceGroup -Location $location -AccountName $anfAccountName -Name $poolName -PoolSize $poolSizeBytes -ServiceLevel $serviceLevel
New-AzNetAppFilesPool -ResourceGroupName $resourceGroup -Location $location -AccountName $anfAccountName -Name $poolName -PoolSize $poolSizeBytes -ServiceLevel $serviceLevel
Defining some new variables for future referencePOOL_NAME="mypool1"
POOL_SIZE_TiB=4 # Size in Azure CLI needs to be in TiB unit (minimum 4 TiB)
SERVICE_LEVEL="Premium" # Valid values are Standard, Premium and Ultra
Defining some new variables for future reference
POOL_NAME="mypool1"
POOL_SIZE_TiB=4 # Size in Azure CLI needs to be in TiB unit (minimum 4 TiB)
SERVICE_LEVEL="Premium" # Valid values are Standard, Premium and Ultra
POOL_NAME="mypool1"
POOL_SIZE_TiB=4 # Size in Azure CLI needs to be in TiB unit (minimum 4 TiB)
SERVICE_LEVEL="Premium" # Valid values are Standard, Premium and Ultra
Create a new capacity pool by using theaz netappfiles pool createaz netappfiles pool create \
    --resource-group $RESOURCE_GROUP \
    --location $LOCATION \
    --account-name $ANF_ACCOUNT_NAME \
    --pool-name $POOL_NAME \
    --size $POOL_SIZE_TiB \
    --service-level $SERVICE_LEVEL
Create a new capacity pool by using theaz netappfiles pool create
az netappfiles pool create \
    --resource-group $RESOURCE_GROUP \
    --location $LOCATION \
    --account-name $ANF_ACCOUNT_NAME \
    --pool-name $POOL_NAME \
    --size $POOL_SIZE_TiB \
    --service-level $SERVICE_LEVEL
az netappfiles pool create \
    --resource-group $RESOURCE_GROUP \
    --location $LOCATION \
    --account-name $ANF_ACCOUNT_NAME \
    --pool-name $POOL_NAME \
    --size $POOL_SIZE_TiB \
    --service-level $SERVICE_LEVEL
The following code snippet shows how to create a capacity pool in an Azure Resource Manager template (ARM template), using theMicrosoft.NetApp/netAppAccounts/capacityPoolsresource. To run the code, download thefull ARM templatefrom our GitHub repo.
{
  "type": "Microsoft.NetApp/netAppAccounts/capacityPools",
  "apiVersion": "2020-06-01",
  "name": "[variables('capacityPoolName')]",
  "location": "[parameters('location')]",
  "dependsOn": [
    "[resourceId('Microsoft.NetApp/netAppAccounts', parameters('netAppAccountName'))]"
  ],
  "properties": {
    "serviceLevel": "[parameters('serviceLevel')]",
    "size": "[parameters('poolSizeBytes')]"
  }
},
{
  "type": "Microsoft.NetApp/netAppAccounts/capacityPools",
  "apiVersion": "2020-06-01",
  "name": "[variables('capacityPoolName')]",
  "location": "[parameters('location')]",
  "dependsOn": [
    "[resourceId('Microsoft.NetApp/netAppAccounts', parameters('netAppAccountName'))]"
  ],
  "properties": {
    "serviceLevel": "[parameters('serviceLevel')]",
    "size": "[parameters('poolSizeBytes')]"
  }
},
The following code snippet shows how to create a NetApp capacity pool usingTerraform. The sample code for this article is located in theAzure Terraform GitHub repo. You can view the log file containing thetest results from current and previous versions of Terraform.
# Create NetApp Pool
resource "azurerm_netapp_pool" "pool" {
  name                = "pool-${random_string.name.result}"
  resource_group_name = azurerm_resource_group.rg.name
  account_name        = azurerm_netapp_account.account.name
  location            = azurerm_resource_group.rg.location
  service_level       = "Premium"
  size_in_tb          = 4
}
# Create NetApp Pool
resource "azurerm_netapp_pool" "pool" {
  name                = "pool-${random_string.name.result}"
  resource_group_name = azurerm_resource_group.rg.name
  account_name        = azurerm_netapp_account.account.name
  location            = azurerm_resource_group.rg.location
  service_level       = "Premium"
  size_in_tb          = 4
}
Create an NFS volume for Azure NetApp Files
Portal
PowerShell
Azure CLI
Template
Terraform
From the Azure NetApp Files management blade of your NetApp account, selectVolumes.
From the Azure NetApp Files management blade of your NetApp account, selectVolumes.

Select+ Add volume.
Select+ Add volume.

In the Create a Volume window, provide information for the volume:Entermyvol1as the volume name.Select your capacity pool (mypool1).Use the default value for quota.Under virtual network, selectCreate newto create a new Azure virtual network (VNet). Then fill in the following information:Entermyvnet1as the Vnet name.Specify an address space for your setting, for example, 10.7.0.0/16EntermyANFsubnetas the subnet name.Specify the subnet address range, for example, 10.7.0.0/24. You cannot share the dedicated subnet with other resources.SelectMicrosoft.NetApp/volumesfor subnet delegation.SelectOKto create the VNet.In subnet, select the newly created Vnet (myvnet1) as the delegate subnet.
In the Create a Volume window, provide information for the volume:
Entermyvol1as the volume name.
Entermyvol1as the volume name.
Select your capacity pool (mypool1).
Select your capacity pool (mypool1).
Use the default value for quota.
Use the default value for quota.
Under virtual network, selectCreate newto create a new Azure virtual network (VNet). Then fill in the following information:Entermyvnet1as the Vnet name.Specify an address space for your setting, for example, 10.7.0.0/16EntermyANFsubnetas the subnet name.Specify the subnet address range, for example, 10.7.0.0/24. You cannot share the dedicated subnet with other resources.SelectMicrosoft.NetApp/volumesfor subnet delegation.SelectOKto create the VNet.
Under virtual network, selectCreate newto create a new Azure virtual network (VNet). Then fill in the following information:
Entermyvnet1as the Vnet name.
Specify an address space for your setting, for example, 10.7.0.0/16
EntermyANFsubnetas the subnet name.
Specify the subnet address range, for example, 10.7.0.0/24. You cannot share the dedicated subnet with other resources.
SelectMicrosoft.NetApp/volumesfor subnet delegation.
SelectOKto create the VNet.
In subnet, select the newly created Vnet (myvnet1) as the delegate subnet.
In subnet, select the newly created Vnet (myvnet1) as the delegate subnet.


SelectProtocol, and then complete the following actions:SelectNFSas the protocol type for the volume.Entermyfilepath1for the file path used to create the export path for the volume.Select the NFS version (NFSv3orNFSv4.1) for the volume.
Seeconsiderationsandbest practiceabout NFS versions.
SelectProtocol, and then complete the following actions:
SelectNFSas the protocol type for the volume.
Entermyfilepath1for the file path used to create the export path for the volume.
Select the NFS version (NFSv3orNFSv4.1) for the volume.
Seeconsiderationsandbest practiceabout NFS versions.

SelectReview + createto display information for the volume you're creating.
SelectReview + createto display information for the volume you're creating.
SelectCreateto create the volume.
The created volume appears in the Volumes blade.
SelectCreateto create the volume.
The created volume appears in the Volumes blade.

Create a subnet delegation to "Microsoft.NetApp/volumes" withNew-AzDelegationcommand.$anfDelegation = New-AzDelegation -Name ([guid]::NewGuid().Guid) -ServiceName "Microsoft.NetApp/volumes"
Create a subnet delegation to "Microsoft.NetApp/volumes" withNew-AzDelegationcommand.
$anfDelegation = New-AzDelegation -Name ([guid]::NewGuid().Guid) -ServiceName "Microsoft.NetApp/volumes"
$anfDelegation = New-AzDelegation -Name ([guid]::NewGuid().Guid) -ServiceName "Microsoft.NetApp/volumes"
Create a subnet configuration by usingNew-AzVirtualNetworkSubnetConfigcommand.$subnet = New-AzVirtualNetworkSubnetConfig -Name "myANFSubnet" -AddressPrefix "10.7.0.0/24" -Delegation $anfDelegation
Create a subnet configuration by usingNew-AzVirtualNetworkSubnetConfigcommand.
$subnet = New-AzVirtualNetworkSubnetConfig -Name "myANFSubnet" -AddressPrefix "10.7.0.0/24" -Delegation $anfDelegation
$subnet = New-AzVirtualNetworkSubnetConfig -Name "myANFSubnet" -AddressPrefix "10.7.0.0/24" -Delegation $anfDelegation
Create the virtual network by using theNew-AzVirtualNetworkcommand.$vnet = New-AzVirtualNetwork -Name "myvnet1" -ResourceGroupName $resourceGroup -Location $location -AddressPrefix "10.7.0.0/16" -Subnet $subnet
Create the virtual network by using theNew-AzVirtualNetworkcommand.
$vnet = New-AzVirtualNetwork -Name "myvnet1" -ResourceGroupName $resourceGroup -Location $location -AddressPrefix "10.7.0.0/16" -Subnet $subnet
$vnet = New-AzVirtualNetwork -Name "myvnet1" -ResourceGroupName $resourceGroup -Location $location -AddressPrefix "10.7.0.0/16" -Subnet $subnet
Create the volume by using theNew-AzNetAppFilesVolumecommand.$volumeSizeBytes = 1099511627776 # 100GiB
$subnetId = $vnet.Subnets[0].Id

New-AzNetAppFilesVolume -ResourceGroupName $resourceGroup `
    -Location $location `
    -AccountName $anfAccountName `
    -PoolName $poolName `
    -Name "myvol1" `
    -UsageThreshold $volumeSizeBytes `
    -SubnetId $subnetId `
    -CreationToken "myfilepath1" `
    -ServiceLevel $serviceLevel `
    -ProtocolType NFSv3
Create the volume by using theNew-AzNetAppFilesVolumecommand.
$volumeSizeBytes = 1099511627776 # 100GiB
$subnetId = $vnet.Subnets[0].Id

New-AzNetAppFilesVolume -ResourceGroupName $resourceGroup `
    -Location $location `
    -AccountName $anfAccountName `
    -PoolName $poolName `
    -Name "myvol1" `
    -UsageThreshold $volumeSizeBytes `
    -SubnetId $subnetId `
    -CreationToken "myfilepath1" `
    -ServiceLevel $serviceLevel `
    -ProtocolType NFSv3
$volumeSizeBytes = 1099511627776 # 100GiB
$subnetId = $vnet.Subnets[0].Id

New-AzNetAppFilesVolume -ResourceGroupName $resourceGroup `
    -Location $location `
    -AccountName $anfAccountName `
    -PoolName $poolName `
    -Name "myvol1" `
    -UsageThreshold $volumeSizeBytes `
    -SubnetId $subnetId `
    -CreationToken "myfilepath1" `
    -ServiceLevel $serviceLevel `
    -ProtocolType NFSv3
Defining some variables for later usage.VNET_NAME="myvnet1"
SUBNET_NAME="myANFSubnet"
Defining some variables for later usage.
VNET_NAME="myvnet1"
SUBNET_NAME="myANFSubnet"
VNET_NAME="myvnet1"
SUBNET_NAME="myANFSubnet"
Create virtual network without subnet by using theaz network vnet createcommand.az network vnet create \
    --resource-group $RESOURCE_GROUP \
    --name $VNET_NAME \
    --location $LOCATION \
    --address-prefix "10.7.0.0/16"
Create virtual network without subnet by using theaz network vnet createcommand.
az network vnet create \
    --resource-group $RESOURCE_GROUP \
    --name $VNET_NAME \
    --location $LOCATION \
    --address-prefix "10.7.0.0/16"
az network vnet create \
    --resource-group $RESOURCE_GROUP \
    --name $VNET_NAME \
    --location $LOCATION \
    --address-prefix "10.7.0.0/16"
Create a delegated subnet by usingaz network vnet subnet createcommand.az network vnet subnet create \
    --resource-group $RESOURCE_GROUP \
    --vnet-name $VNET_NAME \
    --name $SUBNET_NAME \
    --address-prefixes "10.7.0.0/24" \
    --delegations "Microsoft.NetApp/volumes"
Create a delegated subnet by usingaz network vnet subnet createcommand.
az network vnet subnet create \
    --resource-group $RESOURCE_GROUP \
    --vnet-name $VNET_NAME \
    --name $SUBNET_NAME \
    --address-prefixes "10.7.0.0/24" \
    --delegations "Microsoft.NetApp/volumes"
az network vnet subnet create \
    --resource-group $RESOURCE_GROUP \
    --vnet-name $VNET_NAME \
    --name $SUBNET_NAME \
    --address-prefixes "10.7.0.0/24" \
    --delegations "Microsoft.NetApp/volumes"
Create the volume by using theaz netappfiles volume createcommand.VNET_ID=$(az network vnet show --resource-group $RESOURCE_GROUP --name $VNET_NAME --query "id" -o tsv)
SUBNET_ID=$(az network vnet subnet show --resource-group $RESOURCE_GROUP --vnet-name $VNET_NAME --name $SUBNET_NAME --query "id" -o tsv)
VOLUME_SIZE_GiB=100 # 100 GiB
UNIQUE_FILE_PATH="myfilepath2" # Please note that creation token needs to be unique within subscription and region

az netappfiles volume create \
    --resource-group $RESOURCE_GROUP \
    --location $LOCATION \
    --account-name $ANF_ACCOUNT_NAME \
    --pool-name $POOL_NAME \
    --name "myvol1" \
    --service-level $SERVICE_LEVEL \
    --vnet $VNET_ID \
    --subnet $SUBNET_ID \
    --usage-threshold $VOLUME_SIZE_GiB \
    --file-path $UNIQUE_FILE_PATH \
    --protocol-types "NFSv3"
Create the volume by using theaz netappfiles volume createcommand.
VNET_ID=$(az network vnet show --resource-group $RESOURCE_GROUP --name $VNET_NAME --query "id" -o tsv)
SUBNET_ID=$(az network vnet subnet show --resource-group $RESOURCE_GROUP --vnet-name $VNET_NAME --name $SUBNET_NAME --query "id" -o tsv)
VOLUME_SIZE_GiB=100 # 100 GiB
UNIQUE_FILE_PATH="myfilepath2" # Please note that creation token needs to be unique within subscription and region

az netappfiles volume create \
    --resource-group $RESOURCE_GROUP \
    --location $LOCATION \
    --account-name $ANF_ACCOUNT_NAME \
    --pool-name $POOL_NAME \
    --name "myvol1" \
    --service-level $SERVICE_LEVEL \
    --vnet $VNET_ID \
    --subnet $SUBNET_ID \
    --usage-threshold $VOLUME_SIZE_GiB \
    --file-path $UNIQUE_FILE_PATH \
    --protocol-types "NFSv3"
VNET_ID=$(az network vnet show --resource-group $RESOURCE_GROUP --name $VNET_NAME --query "id" -o tsv)
SUBNET_ID=$(az network vnet subnet show --resource-group $RESOURCE_GROUP --vnet-name $VNET_NAME --name $SUBNET_NAME --query "id" -o tsv)
VOLUME_SIZE_GiB=100 # 100 GiB
UNIQUE_FILE_PATH="myfilepath2" # Please note that creation token needs to be unique within subscription and region

az netappfiles volume create \
    --resource-group $RESOURCE_GROUP \
    --location $LOCATION \
    --account-name $ANF_ACCOUNT_NAME \
    --pool-name $POOL_NAME \
    --name "myvol1" \
    --service-level $SERVICE_LEVEL \
    --vnet $VNET_ID \
    --subnet $SUBNET_ID \
    --usage-threshold $VOLUME_SIZE_GiB \
    --file-path $UNIQUE_FILE_PATH \
    --protocol-types "NFSv3"
The following code snippets show how to set up a VNet and create an Azure NetApp Files volume in an Azure Resource Manager template (ARM template). VNet setup uses theMicrosoft.Network/virtualNetworksresource. Volume creation uses theMicrosoft.NetApp/netAppAccounts/capacityPools/volumesresource. To run the code, download thefull ARM templatefrom our GitHub repo.
{
  "type": "Microsoft.Network/virtualNetworks",
  "apiVersion": "2020-06-01",
  "name": "[parameters('virtualNetworkName')]",
  "location": "[parameters('location')]",
  "properties": {
    "addressSpace": {
      "addressPrefixes": [
        "[parameters('vnetAddressPrefix')]"
      ]
    },
    "subnets": [
      {
        "name": "[parameters('subnetName')]",
        "properties": {
          "addressPrefix": "[parameters('subnetAddressPrefix')]",
          "delegations": [
            {
              "name": "NetAppDelegation",
              "properties": {
                "serviceName": "Microsoft.NetApp/volumes"
              }
            }
          ]
        }
      }
    ]
  }
},
{
  "type": "Microsoft.Network/virtualNetworks",
  "apiVersion": "2020-06-01",
  "name": "[parameters('virtualNetworkName')]",
  "location": "[parameters('location')]",
  "properties": {
    "addressSpace": {
      "addressPrefixes": [
        "[parameters('vnetAddressPrefix')]"
      ]
    },
    "subnets": [
      {
        "name": "[parameters('subnetName')]",
        "properties": {
          "addressPrefix": "[parameters('subnetAddressPrefix')]",
          "delegations": [
            {
              "name": "NetAppDelegation",
              "properties": {
                "serviceName": "Microsoft.NetApp/volumes"
              }
            }
          ]
        }
      }
    ]
  }
},
{
  "type": "Microsoft.NetApp/netAppAccounts/capacityPools/volumes",
  "apiVersion": "2020-06-01",
  "name": "[variables('volumeName')]",
  "location": "[parameters('location')]",
  "dependsOn": [
    "[resourceId('Microsoft.NetApp/netAppAccounts/capacityPools', parameters('netAppAccountName'), parameters('netAppPoolName'))]",
    "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
  ],
  "properties": {
    "serviceLevel": "[parameters('serviceLevel')]",
    "creationToken": "[parameters('netAppVolumeName')]",
    "usageThreshold": "[parameters('volSizeBytes')]",
    "exportPolicy": {
      "rules": [
        {
          "ruleIndex": 1,
          "unixReadOnly": "[parameters('unixReadOnly')]",
          "unixReadWrite": "[parameters('unixReadWrite')]",
          "cifs": false,
          "nfsv3": "[if(equals( parameters('protocolTypes'), 'NFSv3'),bool('true'),bool('false'))]",
          "nfsv41": "[if(equals(parameters('protocolTypes'), 'NFSv4.1'),bool('true'),bool('false'))]",
          "allowedClients": "[parameters('allowedClients')]"
        }
      ]
    },
    "protocolTypes": [
      "[parameters('protocolTypes')]"
    ],
    "subnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('subnetName'))]",
    "snapshotDirectoryVisible": "[parameters('snapshotDirectoryVisible')]"
  }
}
{
  "type": "Microsoft.NetApp/netAppAccounts/capacityPools/volumes",
  "apiVersion": "2020-06-01",
  "name": "[variables('volumeName')]",
  "location": "[parameters('location')]",
  "dependsOn": [
    "[resourceId('Microsoft.NetApp/netAppAccounts/capacityPools', parameters('netAppAccountName'), parameters('netAppPoolName'))]",
    "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
  ],
  "properties": {
    "serviceLevel": "[parameters('serviceLevel')]",
    "creationToken": "[parameters('netAppVolumeName')]",
    "usageThreshold": "[parameters('volSizeBytes')]",
    "exportPolicy": {
      "rules": [
        {
          "ruleIndex": 1,
          "unixReadOnly": "[parameters('unixReadOnly')]",
          "unixReadWrite": "[parameters('unixReadWrite')]",
          "cifs": false,
          "nfsv3": "[if(equals( parameters('protocolTypes'), 'NFSv3'),bool('true'),bool('false'))]",
          "nfsv41": "[if(equals(parameters('protocolTypes'), 'NFSv4.1'),bool('true'),bool('false'))]",
          "allowedClients": "[parameters('allowedClients')]"
        }
      ]
    },
    "protocolTypes": [
      "[parameters('protocolTypes')]"
    ],
    "subnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('subnetName'))]",
    "snapshotDirectoryVisible": "[parameters('snapshotDirectoryVisible')]"
  }
}
The following code snippets show how to set up a VNet and create an Azure NetApp Files volume usingTerraform. The sample code for this article is located in theAzure Terraform GitHub repo. You can view the log file containing thetest results from current and previous versions of Terraform.
# Create Virtual Network
resource "azurerm_virtual_network" "vnet" {
  name                = "vnet-${random_string.name.result}"
  address_space       = ["10.0.0.0/16"]
  location            = azurerm_resource_group.rg.location
  resource_group_name = azurerm_resource_group.rg.name
}

# Create Subnet for NetApp
resource "azurerm_subnet" "subnet" {
  name                 = "subnet-${random_string.name.result}"
  resource_group_name  = azurerm_resource_group.rg.name
  virtual_network_name = azurerm_virtual_network.vnet.name
  address_prefixes     = ["10.0.0.0/24"]
  delegation {
    name = "delegation"

    service_delegation {
      name = "Microsoft.Netapp/volumes"
      actions = [
        "Microsoft.Network/networkinterfaces/*",
        "Microsoft.Network/virtualNetworks/subnets/join/action"
      ]
    }
  }
}

# Create NetApp Volume
resource "azurerm_netapp_volume" "volume" {
  name                = "volume-${random_string.name.result}"
  resource_group_name = azurerm_resource_group.rg.name
  account_name        = azurerm_netapp_account.account.name
  pool_name           = azurerm_netapp_pool.pool.name
  location            = azurerm_resource_group.rg.location
  volume_path         = "volume-${random_string.name.result}"
  protocols           = ["NFSv4.1"]
  service_level       = "Premium"
  subnet_id           = azurerm_subnet.subnet.id
  storage_quota_in_gb = 100
  export_policy_rule {
    rule_index        = 1
    allowed_clients   = ["0.0.0.0/0"]
    protocols_enabled = ["NFSv4.1"]
    unix_read_only    = false
    unix_read_write   = true
  }
}
# Create Virtual Network
resource "azurerm_virtual_network" "vnet" {
  name                = "vnet-${random_string.name.result}"
  address_space       = ["10.0.0.0/16"]
  location            = azurerm_resource_group.rg.location
  resource_group_name = azurerm_resource_group.rg.name
}

# Create Subnet for NetApp
resource "azurerm_subnet" "subnet" {
  name                 = "subnet-${random_string.name.result}"
  resource_group_name  = azurerm_resource_group.rg.name
  virtual_network_name = azurerm_virtual_network.vnet.name
  address_prefixes     = ["10.0.0.0/24"]
  delegation {
    name = "delegation"

    service_delegation {
      name = "Microsoft.Netapp/volumes"
      actions = [
        "Microsoft.Network/networkinterfaces/*",
        "Microsoft.Network/virtualNetworks/subnets/join/action"
      ]
    }
  }
}

# Create NetApp Volume
resource "azurerm_netapp_volume" "volume" {
  name                = "volume-${random_string.name.result}"
  resource_group_name = azurerm_resource_group.rg.name
  account_name        = azurerm_netapp_account.account.name
  pool_name           = azurerm_netapp_pool.pool.name
  location            = azurerm_resource_group.rg.location
  volume_path         = "volume-${random_string.name.result}"
  protocols           = ["NFSv4.1"]
  service_level       = "Premium"
  subnet_id           = azurerm_subnet.subnet.id
  storage_quota_in_gb = 100
  export_policy_rule {
    rule_index        = 1
    allowed_clients   = ["0.0.0.0/0"]
    protocols_enabled = ["NFSv4.1"]
    unix_read_only    = false
    unix_read_write   = true
  }
}
Clean up resources
Portal
PowerShell
Azure CLI
Template
Terraform
When you're done and if you want to, you can delete the resource group. The action of deleting a resource group is irreversible.
Important
Deleting a resource group also deletes all resources within it. The action can't be undone.
Important
Before you delete a resource group, you must first delete the backups. Deleting a resource group doesn't delete the backups. You can preemptively delete backups on volumes bymanually delete the backups. If you delete the resource group without deleting all the backups, you lose the ability to see the backups. The backups, however, can continue to incur costs. If you're wrongly billed for some backups, open a support case ticket to get this issue resolved.
In the Azure portal's search box, enterAzure NetApp Filesand then selectAzure NetApp Filesfrom the list that appears.
In the Azure portal's search box, enterAzure NetApp Filesand then selectAzure NetApp Filesfrom the list that appears.
In the list of subscriptions, select the resource group (myRG1) you want to delete.
In the list of subscriptions, select the resource group (myRG1) you want to delete.

In the resource group page, selectDelete resource group.A window opens and displays a warning about the resources to be deleted with the resource group.
In the resource group page, selectDelete resource group.

A window opens and displays a warning about the resources to be deleted with the resource group.
Enter the name of the resource group (myRG1) to confirm that you want to permanently delete the resource group and all resources in it, and then selectDelete.
Enter the name of the resource group (myRG1) to confirm that you want to permanently delete the resource group and all resources in it, and then selectDelete.

When you're done and if you want to, you can delete the resource group. The action of deleting a resource group is irreversible.
Important
Deleting a resource group also deletes all resources within it. The action can't be undone.
Delete resource group by using theRemove-AzResourceGroupcommand.Remove-AzResourceGroup -Name $resourceGroup
Delete resource group by using theRemove-AzResourceGroupcommand.
Remove-AzResourceGroup -Name $resourceGroup
Remove-AzResourceGroup -Name $resourceGroup
When you're done and if you want to, you can delete the resource group. The action of deleting a resource group is irreversible.
Important
Deleting a resource group also deletes all resources within it. The action can't be undone.
Delete resource group by using theaz group deletecommand.az group delete \
    --name $RESOURCE_GROUP
Delete resource group by using theaz group deletecommand.
az group delete \
    --name $RESOURCE_GROUP
az group delete \
    --name $RESOURCE_GROUP
None.
Use the Azure portal, PowerShell, or the Azure CLI to delete the resource group.
When you no longer need the resources created via Terraform, do the following steps:
Runterraform planand specify thedestroyflag.terraform plan -destroy -out main.destroy.tfplanKey points:Theterraform plancommand creates an execution plan, but doesn't execute it. Instead, it determines what actions are necessary to create the configuration specified in your configuration files. This pattern allows you to verify whether the execution plan matches your expectations before making any changes to actual resources.The optional-outparameter allows you to specify an output file for the plan. Using the-outparameter ensures that the plan you reviewed is exactly what is applied.
Runterraform planand specify thedestroyflag.
destroy
terraform plan -destroy -out main.destroy.tfplan
terraform plan -destroy -out main.destroy.tfplan
Key points:
Theterraform plancommand creates an execution plan, but doesn't execute it. Instead, it determines what actions are necessary to create the configuration specified in your configuration files. This pattern allows you to verify whether the execution plan matches your expectations before making any changes to actual resources.
terraform plan
The optional-outparameter allows you to specify an output file for the plan. Using the-outparameter ensures that the plan you reviewed is exactly what is applied.
-out
-out
Runterraform applyto apply the execution plan.terraform apply main.destroy.tfplan
Runterraform applyto apply the execution plan.
terraform apply main.destroy.tfplan
terraform apply main.destroy.tfplan
Next steps
Storage hierarchy of Azure NetApp Files
Service levels for Azure NetApp Files
Create an NFS volume
Solution architectures using Azure NetApp Files
Application resilience FAQs for Azure NetApp Files
Feedback
Was this page helpful?
Additional resources