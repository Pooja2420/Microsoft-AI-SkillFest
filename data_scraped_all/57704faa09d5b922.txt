Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Tutorial: Connect a Node.js web app with Azure Cosmos DB for MongoDB (vCore)
Article
2024-08-14
4 contributors
In this article
APPLIES TO:MongoDB vCore
In this tutorial, you build a Node.js web application that connects to Azure Cosmos DB for MongoDB in vCore architecture. The MongoDB, Express, React.js, Node.js (MERN) stack is a popular collection of technologies used to build many modern web applications. With Azure Cosmos DB for MongoDB (vCore), you can build a new web application or migrate an existing application using MongoDB drivers that you're already familiar with. In this tutorial, you:
Set up your environment
Test the MERN application with a local MongoDB container
Test the MERN application with a vCore cluster
Deploy the MERN application to Azure App Service
Prerequisites
To complete this tutorial, you need the following resources:
An existing vCore cluster.
A GitHub account.GitHub comes with free Codespaces hours for all users.
GitHub comes with free Codespaces hours for all users.
Configure development environment
A development container environment is available with all dependencies required to complete every exercise in this project. You can run the development container in GitHub Codespaces or locally using Visual Studio Code.
GitHub Codespaces
Visual Studio Code
GitHub Codespaces runs a development container managed by GitHub with Visual Studio Code for the Web as the user interface. For the most straightforward development environment, use GitHub Codespaces so that you have the correct developer tools and dependencies preinstalled to complete this training module.
Important
All GitHub accounts can use Codespaces for up to 60 hours free each month with 2 core instances.
Start the process to create a new GitHub Codespace on themainbranch of theazure-samples/msdocs-azure-cosmos-db-mongodb-mern-web-appGitHub repository.
Start the process to create a new GitHub Codespace on themainbranch of theazure-samples/msdocs-azure-cosmos-db-mongodb-mern-web-appGitHub repository.
main
azure-samples/msdocs-azure-cosmos-db-mongodb-mern-web-app

On theCreate codespacepage, review the codespace configuration settings and then selectCreate new codespace
On theCreate codespacepage, review the codespace configuration settings and then selectCreate new codespace

Wait for the codespace to start. This startup process can take a few minutes.
Wait for the codespace to start. This startup process can take a few minutes.
Open a new terminal in the codespace.TipYou can use the main menu to navigate to theTerminalmenu option and then select theNew Terminaloption.
Open a new terminal in the codespace.
Tip
You can use the main menu to navigate to theTerminalmenu option and then select theNew Terminaloption.

Check the versions of the tools you use in this tutorial.docker --version

node --version

npm --version

az --versionNoteThis tutorial requires the following versions of each tool which are preinstalled in your environment:ToolVersionDockerâ¥ 20.10.0Node.jsâ¥ 18.0150NPMâ¥ 9.5.0Azure CLIâ¥ 2.46.0
Check the versions of the tools you use in this tutorial.
docker --version

node --version

npm --version

az --version
docker --version

node --version

npm --version

az --version
Note
This tutorial requires the following versions of each tool which are preinstalled in your environment:
Close the terminal.
Close the terminal.
The remaining steps in this tutorial take place in the context of this development container.
The remaining steps in this tutorial take place in the context of this development container.
TheDev Containers extensionfor Visual Studio Code requiresDockerto be installed on your local machine. The extension hosts the development container locally using the Docker host with the correct developer tools and dependencies preinstalled to complete this training module.
OpenVisual Studio Codein the context of an empty directory.
OpenVisual Studio Codein the context of an empty directory.
Ensure that you have theDev Containers extensioninstalled in Visual Studio Code.
Ensure that you have theDev Containers extensioninstalled in Visual Studio Code.
Open a new terminal in the editor.TipYou can use the main menu to navigate to theTerminalmenu option and then select theNew Terminaloption.
Open a new terminal in the editor.
Tip
You can use the main menu to navigate to theTerminalmenu option and then select theNew Terminaloption.

Clone theazure-samples/msdocs-azure-cosmos-db-mongodb-mern-web-appGitHub repository into the current directory.git clone https://github.com/azure-samples/msdocs-azure-cosmos-db-mongodb-mern-web-app.git .
Clone theazure-samples/msdocs-azure-cosmos-db-mongodb-mern-web-appGitHub repository into the current directory.
azure-samples/msdocs-azure-cosmos-db-mongodb-mern-web-app
git clone https://github.com/azure-samples/msdocs-azure-cosmos-db-mongodb-mern-web-app.git .
git clone https://github.com/azure-samples/msdocs-azure-cosmos-db-mongodb-mern-web-app.git .
Open theCommand Palette, search for theDev Containerscommands, and then selectDev Containers: Reopen in Container.TipVisual Studio Code may automatically prompt you to reopen the existing folder within a development container. This is functionally equivalent to using the command palette to reopen the current workspace in a container.
Open theCommand Palette, search for theDev Containerscommands, and then selectDev Containers: Reopen in Container.

Tip
Visual Studio Code may automatically prompt you to reopen the existing folder within a development container. This is functionally equivalent to using the command palette to reopen the current workspace in a container.

Check the versions of the tools you use in this tutorial.docker --version

node --version

npm --version

az --versionNoteThis tutorial requires the following versions of each tool which are preinstalled in your environment:ToolVersionDockerâ¥ 20.10.0Node.jsâ¥ 18.0150NPMâ¥ 9.5.0Azure CLIâ¥ 2.46.0
Check the versions of the tools you use in this tutorial.
docker --version

node --version

npm --version

az --version
docker --version

node --version

npm --version

az --version
Note
This tutorial requires the following versions of each tool which are preinstalled in your environment:
Close the terminal.
Close the terminal.
The remaining steps in this tutorial take place in the context of this development container.
The remaining steps in this tutorial take place in the context of this development container.
Test the MERN application's API with the MongoDB container
Start by running the sample application's API with the local MongoDB container to validate that the application works.
Run a MongoDB container using Docker and publish the typical MongoDB port (27017).docker pull mongo:6.0

docker run --detach --publish 27017:27017 mongo:6.0
Run a MongoDB container using Docker and publish the typical MongoDB port (27017).
27017
docker pull mongo:6.0

docker run --detach --publish 27017:27017 mongo:6.0
docker pull mongo:6.0

docker run --detach --publish 27017:27017 mongo:6.0
In the side bar, select the MongoDB extension.
In the side bar, select the MongoDB extension.

Add a new connection to the MongoDB extension using the connection stringmongodb://localhost.
Add a new connection to the MongoDB extension using the connection stringmongodb://localhost.
mongodb://localhost

Once the connection is successful, open thedata/products.mongodbplayground file.
Once the connection is successful, open thedata/products.mongodbplayground file.
Select theRun allicon to execute the script.
Select theRun allicon to execute the script.

The playground run should result in a list of documents in the local MongoDB collection. Here's a truncated example of the output.[
  {
    "_id": { "$oid": "640a146e89286b79b6628eef" },
    "name": "Confira Watch",
    "category": "watches",
    "price": 105
  },
  {
    "_id": { "$oid": "640a146e89286b79b6628ef0" },
    "name": "Diannis Watch",
    "category": "watches",
    "price": 98,
    "sale": true
  },
  ...
]NoteThe object ids (_id) are randomnly generated and will differ from this truncated example output.
The playground run should result in a list of documents in the local MongoDB collection. Here's a truncated example of the output.
[
  {
    "_id": { "$oid": "640a146e89286b79b6628eef" },
    "name": "Confira Watch",
    "category": "watches",
    "price": 105
  },
  {
    "_id": { "$oid": "640a146e89286b79b6628ef0" },
    "name": "Diannis Watch",
    "category": "watches",
    "price": 98,
    "sale": true
  },
  ...
]
[
  {
    "_id": { "$oid": "640a146e89286b79b6628eef" },
    "name": "Confira Watch",
    "category": "watches",
    "price": 105
  },
  {
    "_id": { "$oid": "640a146e89286b79b6628ef0" },
    "name": "Diannis Watch",
    "category": "watches",
    "price": 98,
    "sale": true
  },
  ...
]
Note
The object ids (_id) are randomnly generated and will differ from this truncated example output.
_id
In theserver/directory, create a new.envfile.
In theserver/directory, create a new.envfile.
In theserver/.envfile, add an environment variable for this value:Environment VariableValueCONNECTION_STRINGThe connection string to the Azure Cosmos DB for MongoDB (vCore) cluster. For now, usemongodb://localhost:27017?directConnection=true.CONNECTION_STRING=mongodb://localhost:27017?directConnection=true
In theserver/.envfile, add an environment variable for this value:
CONNECTION_STRING
mongodb://localhost:27017?directConnection=true
CONNECTION_STRING=mongodb://localhost:27017?directConnection=true
CONNECTION_STRING=mongodb://localhost:27017?directConnection=true
Change the context of the terminal to theserver/folder.cd server
Change the context of the terminal to theserver/folder.
cd server
cd server
Install the dependencies from Node Package Manager (npm).npm install
Install the dependencies from Node Package Manager (npm).
npm install
npm install
Start the Node.js & Express application.npm start
Start the Node.js & Express application.
npm start
npm start
The API automatically opens a browser window to verify that it returns an array of product documents.
The API automatically opens a browser window to verify that it returns an array of product documents.
Close the extra browser tab/window.
Close the extra browser tab/window.
Close the terminal.
Close the terminal.
Test the MERN application with the Azure Cosmos DB for MongoDB (vCore) cluster
Now, let's validate that the application works seamlessly with Azure Cosmos DB for MongoDB (vCore). For this task, populate the pre-existing cluster with seed data using the MongoDB shell and then update the API's connection string.
Sign in to the Azure portal (https://portal.azure.com).
Sign in to the Azure portal (https://portal.azure.com).
Navigate to the existing Azure Cosmos DB for MongoDB (vCore) cluster page.
Navigate to the existing Azure Cosmos DB for MongoDB (vCore) cluster page.
From the Azure Cosmos DB for MongoDB (vCore) cluster page, select theConnection stringsnavigation menu option.
From the Azure Cosmos DB for MongoDB (vCore) cluster page, select theConnection stringsnavigation menu option.

Record the value from theConnection stringfield.ImportantThe connection string in the portal does not include the username and password values. You must replace the<user>and<password>placeholders with the credentials you used when you originally created the cluster.
Record the value from theConnection stringfield.

Important
The connection string in the portal does not include the username and password values. You must replace the<user>and<password>placeholders with the credentials you used when you originally created the cluster.
<user>
<password>
Back within your integrated development environment (IDE), open a new terminal.
Back within your integrated development environment (IDE), open a new terminal.
Start the MongoDB Shell using themongoshcommand and the connection string you recorded earlier. Make sure you replace the<user>and<password>placeholders with the credentials you used when you originally created the cluster.mongosh "<mongodb-cluster-connection-string>"NoteYou may need to encode specific values for the connection string. In this example, the name of the cluster ismsdocs-cosmos-tutorial, the username isclusteradmin, and the password isP@ssw.rd. In the password the@character will need to be encoded using%40. An example connection string is provided here with the correct encoding of the password.CONNECTION_STRING=mongodb+srv://clusteradmin:P%40ssw.rd@msdocs-cosmos-tutorial.mongocluster.cosmos.azure.com/?tls=true&authMechanism=SCRAM-SHA-256&retrywrites=false&maxIdleTimeMS=120000
Start the MongoDB Shell using themongoshcommand and the connection string you recorded earlier. Make sure you replace the<user>and<password>placeholders with the credentials you used when you originally created the cluster.
mongosh
<user>
<password>
mongosh "<mongodb-cluster-connection-string>"
mongosh "<mongodb-cluster-connection-string>"
Note
You may need to encode specific values for the connection string. In this example, the name of the cluster ismsdocs-cosmos-tutorial, the username isclusteradmin, and the password isP@ssw.rd. In the password the@character will need to be encoded using%40. An example connection string is provided here with the correct encoding of the password.
msdocs-cosmos-tutorial
clusteradmin
P@ssw.rd
@
%40
CONNECTION_STRING=mongodb+srv://clusteradmin:P%40ssw.rd@msdocs-cosmos-tutorial.mongocluster.cosmos.azure.com/?tls=true&authMechanism=SCRAM-SHA-256&retrywrites=false&maxIdleTimeMS=120000
CONNECTION_STRING=mongodb+srv://clusteradmin:P%40ssw.rd@msdocs-cosmos-tutorial.mongocluster.cosmos.azure.com/?tls=true&authMechanism=SCRAM-SHA-256&retrywrites=false&maxIdleTimeMS=120000
Within the shell, run the following commands to create your database, create your collection, and seed with starter data.use('cosmicworks');

db.products.drop();

db.products.insertMany([
  { name: "Confira Watch", category: "watches", price: 105.00 },
  { name: "Diannis Watch", category: "watches", price: 98.00, sale: true },
  { name: "Sterse Gloves", category: "gloves", price: 42.00 },
  { name: "Peache Sunglasses", category: "eyewear", price: 32.00, sale: false, sizes: [ "S", "M", "L" ] },
  { name: "Icento Pack", category: "bags", price: 58.00 },
  { name: "Iroowl Bracelet", category: "watches", price: 66.00 },
  { name: "Glaark Bag", category: "bags", price: 56.00, sale: true },
  { name: "Windry Mittens", category: "gloves", price: 35.00 },
  { name: "Tuvila Hat", category: "hats", price: 120.00 },
  { name: "Klinto Hat", category: "hats", subcategory: "hats-beanies", price: 65.00 }
]);

db.products.find({});
Within the shell, run the following commands to create your database, create your collection, and seed with starter data.
use('cosmicworks');

db.products.drop();

db.products.insertMany([
  { name: "Confira Watch", category: "watches", price: 105.00 },
  { name: "Diannis Watch", category: "watches", price: 98.00, sale: true },
  { name: "Sterse Gloves", category: "gloves", price: 42.00 },
  { name: "Peache Sunglasses", category: "eyewear", price: 32.00, sale: false, sizes: [ "S", "M", "L" ] },
  { name: "Icento Pack", category: "bags", price: 58.00 },
  { name: "Iroowl Bracelet", category: "watches", price: 66.00 },
  { name: "Glaark Bag", category: "bags", price: 56.00, sale: true },
  { name: "Windry Mittens", category: "gloves", price: 35.00 },
  { name: "Tuvila Hat", category: "hats", price: 120.00 },
  { name: "Klinto Hat", category: "hats", subcategory: "hats-beanies", price: 65.00 }
]);

db.products.find({});
use('cosmicworks');

db.products.drop();

db.products.insertMany([
  { name: "Confira Watch", category: "watches", price: 105.00 },
  { name: "Diannis Watch", category: "watches", price: 98.00, sale: true },
  { name: "Sterse Gloves", category: "gloves", price: 42.00 },
  { name: "Peache Sunglasses", category: "eyewear", price: 32.00, sale: false, sizes: [ "S", "M", "L" ] },
  { name: "Icento Pack", category: "bags", price: 58.00 },
  { name: "Iroowl Bracelet", category: "watches", price: 66.00 },
  { name: "Glaark Bag", category: "bags", price: 56.00, sale: true },
  { name: "Windry Mittens", category: "gloves", price: 35.00 },
  { name: "Tuvila Hat", category: "hats", price: 120.00 },
  { name: "Klinto Hat", category: "hats", subcategory: "hats-beanies", price: 65.00 }
]);

db.products.find({});
The commands should result in a list of documents in the local MongoDB collection. Here's a truncated example of the output.[
  {
    "_id": { "$oid": "640a146e89286b79b6628eef" },
    "name": "Confira Watch",
    "category": "watches",
    "price": 105
  },
  {
    "_id": { "$oid": "640a146e89286b79b6628ef0" },
    "name": "Diannis Watch",
    "category": "watches",
    "price": 98,
    "sale": true
  },
  ...
]NoteThe object ids (_id) are randomnly generated and will differ from this truncated example output.
The commands should result in a list of documents in the local MongoDB collection. Here's a truncated example of the output.
[
  {
    "_id": { "$oid": "640a146e89286b79b6628eef" },
    "name": "Confira Watch",
    "category": "watches",
    "price": 105
  },
  {
    "_id": { "$oid": "640a146e89286b79b6628ef0" },
    "name": "Diannis Watch",
    "category": "watches",
    "price": 98,
    "sale": true
  },
  ...
]
[
  {
    "_id": { "$oid": "640a146e89286b79b6628eef" },
    "name": "Confira Watch",
    "category": "watches",
    "price": 105
  },
  {
    "_id": { "$oid": "640a146e89286b79b6628ef0" },
    "name": "Diannis Watch",
    "category": "watches",
    "price": 98,
    "sale": true
  },
  ...
]
Note
The object ids (_id) are randomnly generated and will differ from this truncated example output.
_id
Exit the MongoDB shell.exit
Exit the MongoDB shell.
exit
exit
In theclient/directory, create a new.envfile.
In theclient/directory, create a new.envfile.
In theclient/.envfile, add an environment variable for this value:Environment VariableValueCONNECTION_STRINGThe connection string to the Azure Cosmos DB for MongoDB (vCore) cluster. Use the same connection string you used with the mongo shell.CONNECTION_STRING=<your-connection-string>
In theclient/.envfile, add an environment variable for this value:
CONNECTION_STRING
CONNECTION_STRING=<your-connection-string>
CONNECTION_STRING=<your-connection-string>
Validate that the application is using the database service by changing the context of the terminal to theserver/folder, installing dependencies from Node Package Manager (npm), and then starting the application.cd server

npm install

npm start
Validate that the application is using the database service by changing the context of the terminal to theserver/folder, installing dependencies from Node Package Manager (npm), and then starting the application.
cd server

npm install

npm start
cd server

npm install

npm start
The API automatically opens a browser window to verify that it returns an array of product documents.
The API automatically opens a browser window to verify that it returns an array of product documents.
Close the extra browser tab/window. Then, close the terminal.
Close the extra browser tab/window. Then, close the terminal.
Deploy the MERN application to Azure App Service
Deploy the service and client to Azure App Service to prove that the application works end-to-end. Use secrets in the web apps to store environment variables with credentials and API endpoints.
Within your integrated development environment (IDE), open a new terminal.
Within your integrated development environment (IDE), open a new terminal.
Create a shell variable for the name of the pre-existing resource group namedresourceGroupName.# Variable for resource group name
resourceGroupName="<existing-resource-group>"
Create a shell variable for the name of the pre-existing resource group namedresourceGroupName.
# Variable for resource group name
resourceGroupName="<existing-resource-group>"
# Variable for resource group name
resourceGroupName="<existing-resource-group>"
Create shell variables for the two web app namedserverAppNameandclientAppName.# Variable for randomnly generated suffix
let suffix=$RANDOM*$RANDOM

# Variable for web app names with a randomnly generated suffix
serverAppName="server-app-$suffix"
clientAppName="client-app-$suffix"
Create shell variables for the two web app namedserverAppNameandclientAppName.
# Variable for randomnly generated suffix
let suffix=$RANDOM*$RANDOM

# Variable for web app names with a randomnly generated suffix
serverAppName="server-app-$suffix"
clientAppName="client-app-$suffix"
# Variable for randomnly generated suffix
let suffix=$RANDOM*$RANDOM

# Variable for web app names with a randomnly generated suffix
serverAppName="server-app-$suffix"
clientAppName="client-app-$suffix"
If you haven't already, sign in to the Azure CLI using theaz login --use-device-codecommand.
If you haven't already, sign in to the Azure CLI using theaz login --use-device-codecommand.
az login --use-device-code
Change the current working directory to theserver/path.cd server
Change the current working directory to theserver/path.
cd server
cd server
Create a new web app for the server component of the MERN application withaz webapp up.az webapp up \
    --resource-group $resourceGroupName \
    --name $serverAppName \
    --sku F1 \
    --runtime "NODE|18-lts"
Create a new web app for the server component of the MERN application withaz webapp up.
az webapp up
az webapp up \
    --resource-group $resourceGroupName \
    --name $serverAppName \
    --sku F1 \
    --runtime "NODE|18-lts"
az webapp up \
    --resource-group $resourceGroupName \
    --name $serverAppName \
    --sku F1 \
    --runtime "NODE|18-lts"
Create a new connection string setting for the server web app namedCONNECTION_STRINGwithaz webapp config connection-string set. Use the same value for the connection string you used with the MongoDB shell and.envfile earlier in this tutorial.az webapp config connection-string set \
    --resource-group $resourceGroupName \
    --name $serverAppName \
    --connection-string-type custom \
    --settings "CONNECTION_STRING=<mongodb-connection-string>"
Create a new connection string setting for the server web app namedCONNECTION_STRINGwithaz webapp config connection-string set. Use the same value for the connection string you used with the MongoDB shell and.envfile earlier in this tutorial.
CONNECTION_STRING
az webapp config connection-string set
az webapp config connection-string set \
    --resource-group $resourceGroupName \
    --name $serverAppName \
    --connection-string-type custom \
    --settings "CONNECTION_STRING=<mongodb-connection-string>"
az webapp config connection-string set \
    --resource-group $resourceGroupName \
    --name $serverAppName \
    --connection-string-type custom \
    --settings "CONNECTION_STRING=<mongodb-connection-string>"
Get the URI for the server web app withaz webapp showand store it in a shell variable name dserverUri.serverUri=$(az webapp show \
    --resource-group $resourceGroupName \
    --name $serverAppName \
    --query hostNames[0] \
    --output tsv)
Get the URI for the server web app withaz webapp showand store it in a shell variable name dserverUri.
az webapp show
serverUri=$(az webapp show \
    --resource-group $resourceGroupName \
    --name $serverAppName \
    --query hostNames[0] \
    --output tsv)
serverUri=$(az webapp show \
    --resource-group $resourceGroupName \
    --name $serverAppName \
    --query hostNames[0] \
    --output tsv)
Use theopen-clipackage and command from NuGet withnpxto open a browser window using the URI for the server web app. Validate that the server app is returning your JSON array data from the MongoDB (vCore) cluster.npx open-cli "https://$serverUri/products" --yesTipSometimes deployments can finish asynchronously. If you are not seeing what you expect, wait another minute and refresh your browser window.
Use theopen-clipackage and command from NuGet withnpxto open a browser window using the URI for the server web app. Validate that the server app is returning your JSON array data from the MongoDB (vCore) cluster.
open-cli
npx
npx open-cli "https://$serverUri/products" --yes
npx open-cli "https://$serverUri/products" --yes
Tip
Sometimes deployments can finish asynchronously. If you are not seeing what you expect, wait another minute and refresh your browser window.
Change the working directory to theclient/path.cd ../client
Change the working directory to theclient/path.
cd ../client
cd ../client
Create a new web app for the client component of the MERN application withaz webapp up.az webapp up \
    --resource-group $resourceGroupName \
    --name $clientAppName \
    --sku F1 \
    --runtime "NODE|18-lts"
Create a new web app for the client component of the MERN application withaz webapp up.
az webapp up
az webapp up \
    --resource-group $resourceGroupName \
    --name $clientAppName \
    --sku F1 \
    --runtime "NODE|18-lts"
az webapp up \
    --resource-group $resourceGroupName \
    --name $clientAppName \
    --sku F1 \
    --runtime "NODE|18-lts"
Create a new app setting for the client web app namedREACT_APP_API_ENDPOINTwithaz webapp config appsettings set. Use the server API endpoint stored in theserverUrishell variable.az webapp config appsettings set \
    --resource-group $resourceGroupName \
    --name $clientAppName \
    --settings "REACT_APP_API_ENDPOINT=https://$serverUri"
Create a new app setting for the client web app namedREACT_APP_API_ENDPOINTwithaz webapp config appsettings set. Use the server API endpoint stored in theserverUrishell variable.
REACT_APP_API_ENDPOINT
az webapp config appsettings set
az webapp config appsettings set \
    --resource-group $resourceGroupName \
    --name $clientAppName \
    --settings "REACT_APP_API_ENDPOINT=https://$serverUri"
az webapp config appsettings set \
    --resource-group $resourceGroupName \
    --name $clientAppName \
    --settings "REACT_APP_API_ENDPOINT=https://$serverUri"
Get the URI for the client web app withaz webapp showand store it in a shell variable name dclientUri.clientUri=$(az webapp show \
    --resource-group $resourceGroupName \
    --name $clientAppName \
    --query hostNames[0] \
    --output tsv)
Get the URI for the client web app withaz webapp showand store it in a shell variable name dclientUri.
az webapp show
clientUri=$(az webapp show \
    --resource-group $resourceGroupName \
    --name $clientAppName \
    --query hostNames[0] \
    --output tsv)
clientUri=$(az webapp show \
    --resource-group $resourceGroupName \
    --name $clientAppName \
    --query hostNames[0] \
    --output tsv)
Use theopen-clipackage and command from NuGet withnpxto open a browser window using the URI for the client web app. Validate that the client app is rendering data from the server app's API.npx open-cli "https://$clientUri" --yesTipSometimes deployments can finish asynchronously. If you are not seeing what you expect, wait another minute and refresh your browser window.
Use theopen-clipackage and command from NuGet withnpxto open a browser window using the URI for the client web app. Validate that the client app is rendering data from the server app's API.
open-cli
npx
npx open-cli "https://$clientUri" --yes
npx open-cli "https://$clientUri" --yes
Tip
Sometimes deployments can finish asynchronously. If you are not seeing what you expect, wait another minute and refresh your browser window.
Close the terminal.
Close the terminal.
Clean up resources
When you're working in your own subscription, at the end of a project, it's a good idea to remove the resources that you no longer need. Resources left running can cost you money. You can delete resources individually or delete the resource group to delete the entire set of resources.
To delete the entire resource group, useaz group delete.az group delete \
    --name $resourceGroupName \
    --yes
To delete the entire resource group, useaz group delete.
az group delete
az group delete \
    --name $resourceGroupName \
    --yes
az group delete \
    --name $resourceGroupName \
    --yes
Validate that the resource group is deleted usingaz group list.az group list
Validate that the resource group is deleted usingaz group list.
az group list
az group list
az group list
Clean up dev environment
You may also wish to clean up your development environment or return it to its typical state.
GitHub Codespaces
Visual Studio Code
Deleting the GitHub Codespaces environment ensures that you can maximize the amount of free per-core hours entitlement you get for your account.
Sign into the GitHub Codespaces dashboard (https://github.com/codespaces).
Sign into the GitHub Codespaces dashboard (https://github.com/codespaces).
Locate your currently running codespaces sourced from theazure-samples/msdocs-azure-cosmos-db-mongodb-mern-web-appGitHub repository.
Locate your currently running codespaces sourced from theazure-samples/msdocs-azure-cosmos-db-mongodb-mern-web-appGitHub repository.
azure-samples/msdocs-azure-cosmos-db-mongodb-mern-web-app

Open the context menu for the codespace and then selectDelete.
Open the context menu for the codespace and then selectDelete.

You aren't necessarily required to clean up your local environment, but you can stop the running development container and return to running Visual Studio Code in the context of a local workspace.
Open theCommand Palette, search for theDev Containerscommands, and then selectDev Containers: Reopen Folder Locally.
Open theCommand Palette, search for theDev Containerscommands, and then selectDev Containers: Reopen Folder Locally.

Tip
Visual Studio Code will stop the running development container, but the container still exists in Docker in a stopped state. You always have the option to deleting the container instance, container image, and volumes from Docker to free up more space on your local machine.
Next step
Now that you have built your first application for the MongoDB (vCore) cluster, learn how to migrate your data to Azure Cosmos DB.
Migrate your data
Feedback
Was this page helpful?
Additional resources