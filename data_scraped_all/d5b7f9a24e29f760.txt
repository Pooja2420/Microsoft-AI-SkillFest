Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Connect Azure Boards to GitHub (cloud)
Article
2025-02-18
13 contributors
In this article
Azure DevOps Services
Use GitHub.com repositories for your software development and your Azure Boards project to plan and track your work. Connect your project and repo so your GitHub commits and pull requests get linked to your work items in Azure Boards.
Note
Azure Boards and Azure DevOps Services support integration with GitHub.com and GitHub Enterprise Server repositories. If you want to connect from an on-premises Azure DevOps Server, seeConnect Azure DevOps Server to GitHub Enterprise Server.
Prerequisites
Authentication options
The following authentication options are supported based on the GitHub platform you want to connect to.
GitHub.com
GitHub Enterprise Server
GitHub.com user account (Recommended)
Personal access token (PAT)
OAuth (preferred, registration required)
PAT
GitHub credentials
Note
If you choose to connect GitHub with a PAT, configure single sign-on (SSO) for the PAT on your GitHub account. This configuration is necessary to retrieve a list of repositories from an organization with Security Assertion Markup Language (SAML) SSO authentication enabled.
Connect Azure Boards to a GitHub repo
Sign in to your project (https://dev.azure.com/{Your_Organization/Your_Project}).
Sign in to your project (https://dev.azure.com/{Your_Organization/Your_Project}).
https://dev.azure.com/{Your_Organization/Your_Project}
SelectProject settings>GitHub connections.
SelectProject settings>GitHub connections.

If it's your first time connecting from the project, selectConnect your GitHub accountto use your GitHub account credentials.Otherwise, chooseNew connection, and select your authentication method from theNew Connectiondialog.When you connect with your GitHub account, use your GitHub credentials to authenticate. To use a PAT, seeAdd a GitHub connection using PAT. For connecting to a GitHub Enterprise Server, seeRegister Azure DevOps in GitHub as an OAuth App.
If it's your first time connecting from the project, selectConnect your GitHub accountto use your GitHub account credentials.

Otherwise, chooseNew connection, and select your authentication method from theNew Connectiondialog.
When you connect with your GitHub account, use your GitHub credentials to authenticate. To use a PAT, seeAdd a GitHub connection using PAT. For connecting to a GitHub Enterprise Server, seeRegister Azure DevOps in GitHub as an OAuth App.
Add a GitHub connection with GitHub credentials
You can connect up to 1,000 GitHub repositories to an Azure Boards project.
If it's your first time connecting to GitHub from Azure Boards, sign in using your GitHub credentials. Choose an account for which you're a repository administrator.
If it's your first time connecting to GitHub from Azure Boards, sign in using your GitHub credentials. Choose an account for which you're a repository administrator.
Select the GitHub account or organization you want to connect. Only organizations that you own or are an administrator for are listed.If all repositories for an organization are already connected to Azure Boards, the following message shows:
Select the GitHub account or organization you want to connect. Only organizations that you own or are an administrator for are listed.
If all repositories for an organization are already connected to Azure Boards, the following message shows:

Enter your GitHub credentials. If you have two-factor authentication enabled, enter the authentication code sent by GitHub and selectVerify. If not, the system automatically recognizes your GitHub organization as your GitHub account is associated with your Azure DevOps Services account.
Enter your GitHub credentials. If you have two-factor authentication enabled, enter the authentication code sent by GitHub and selectVerify. If not, the system automatically recognizes your GitHub organization as your GitHub account is associated with your Azure DevOps Services account.

Add GitHub repositories
Once authenticated, you can select the repositories you want to connect.
TheAdd GitHub Repositoriesdialog automatically displays and selects all GitHub.com repositories for which you're an administrator in the selected organization. Deselect any repositories that you don't want to include in the integration.TipTo avoid unexpectedAB#mention linking, we recommend connecting a GitHub repo to projects within a single Azure DevOps organization. Connecting the same GitHub repo to projects in multiple Azure DevOps organizations can cause issues. For more information, seeTroubleshoot GitHub & Azure Boards integration.If all repositories are already connected to the current or another organization, the following message displays:
TheAdd GitHub Repositoriesdialog automatically displays and selects all GitHub.com repositories for which you're an administrator in the selected organization. Deselect any repositories that you don't want to include in the integration.

Tip
To avoid unexpectedAB#mention linking, we recommend connecting a GitHub repo to projects within a single Azure DevOps organization. Connecting the same GitHub repo to projects in multiple Azure DevOps organizations can cause issues. For more information, seeTroubleshoot GitHub & Azure Boards integration.
If all repositories are already connected to the current or another organization, the following message displays:

After making your selections, selectSave.
After making your selections, selectSave.

Confirm the connection
Review the GitHub page that displays and then chooseApprove, Install, & Authorize.
Review the GitHub page that displays and then chooseApprove, Install, & Authorize.

Provide your GitHub credentials to confirm.
Provide your GitHub credentials to confirm.
When you're done, you should see the new connection with the selected repositories listed.
When you're done, you should see the new connection with the selected repositories listed.

To change the configuration or manage the Azure Boards app for GitHub, seeChange repository access to Azure Boards.

Add a GitHub connection using PAT
Important
We recommend usingMicrosoft Entra tokens. For more information about our efforts to reduce PAT usage, seeour blog.
Review ourauthentication guidanceto choose the appropriate authentication mechanism for your needs.
We recommend using your GitHub account credentials to connect to your GitHub repository.
Tip
When you create your GitHub PAT, make sure that you include these scopes:repo, read:user, user:email, admin:repo_hook.
repo, read:user, user:email, admin:repo_hook
ChoosePersonal Access Token.To create a GitHub PAT, go toGitHub Developer Settings > Personal access tokens.
ChoosePersonal Access Token.

To create a GitHub PAT, go toGitHub Developer Settings > Personal access tokens.
Enter the PAT and selectConnect.
Enter the PAT and selectConnect.

Select the repositories you want to connect to the project by following the procedures outlined inChoose the repositoriesearlier in this article.
Select the repositories you want to connect to the project by following the procedures outlined inChoose the repositoriesearlier in this article.
If it's the first time connecting to a GitHub account or organization from Azure Boards, install the Azure Boards app for GitHub.Confirm the connectionearlier in this article.
If it's the first time connecting to a GitHub account or organization from Azure Boards, install the Azure Boards app for GitHub.Confirm the connectionearlier in this article.

Register Azure DevOps in GitHub as an OAuth App
To use OAuth to connect Azure DevOps with your GitHub Enterprise Server, first register the application as an OAuth App. For more information, seeCreate an OAuth App.

Register Azure DevOps Services
Sign into the web portal for your GitHub Enterprise server.
Sign into the web portal for your GitHub Enterprise server.

OpenSettings>Developer settings>Oauth Apps>New OAuth App.
OpenSettings>Developer settings>Oauth Apps>New OAuth App.

Enter registration information.For theHomepage URL, specify theOrganization URLof your organization.For theAuthorization callback URL, use the following pattern to construct the URL.{Azure DevOps Services Organization URL}/_admin/oauth2/callbackFor example:https://dev.azure.com/fabrikam/_admin/oauth2/callback
Enter registration information.
For theHomepage URL, specify theOrganization URLof your organization.For theAuthorization callback URL, use the following pattern to construct the URL.
{Azure DevOps Services Organization URL}/_admin/oauth2/callback
{Azure DevOps Services Organization URL}/_admin/oauth2/callback
For example:
https://dev.azure.com/fabrikam/_admin/oauth2/callback
https://dev.azure.com/fabrikam/_admin/oauth2/callback

SelectRegister application.
SelectRegister application.
TheClient IDandClient Secretfor your registered OAuth application appear.
TheClient IDandClient Secretfor your registered OAuth application appear.


Register your OAuth configuration in Azure DevOps Services
Sign into the web portal for Azure DevOps Services.
Sign into the web portal for Azure DevOps Services.
Add the GitHub Enterprise Oauth configuration to your organization.
Add the GitHub Enterprise Oauth configuration to your organization.
InOrganization settings, selectOauth configurations>Add Oauth configuration.
InOrganization settings, selectOauth configurations>Add Oauth configuration.

Enter your information, and then selectCreate.
Enter your information, and then selectCreate.


Connect Azure DevOps Services to GitHub Enterprise Server
Important
To connect Azure DevOps Services to your GitHub Enterprise Server, ensure your GitHub Enterprise Server is accessible from the Internet. Verify that Azure DNS can resolve your GitHub Enterprise Server name and that your firewall allows access from Azure Data Center IP addresses. To determine the IP address range, seeMicrosoft Azure Data Center IP Ranges. A common error message for connectivity issues is:
The remote name could not be resolved: 'github-enterprise-server.contoso.com'
If you encounter this error, check your server's accessibility. For more information, seeAzure DNS FAQ.
SelectProject settings>GitHub connections>GitHub Enterprise Serverfor a first-time connection.Or, from theNew GitHub connectiondialog, selectGitHub Enterprise Server.
SelectProject settings>GitHub connections>GitHub Enterprise Serverfor a first-time connection.

Or, from theNew GitHub connectiondialog, selectGitHub Enterprise Server.

Select the authentication method.Connect with OAuthChoose the configuration that you set up inStep 4 of Register your OAuth configuration in Azure DevOps Services, and then chooseConnect.Connect with a Personal Access TokenEnter the URL for your GitHub Enterprise server and the Personal access token credentials recognized by that server. And then chooseConnect.Connect with GitHub credentialsEnter the URL for your GitHub Enterprise server and the administrator account credentials recognized by that server, and then selectConnect.
Select the authentication method.

Connect with OAuth
Choose the configuration that you set up inStep 4 of Register your OAuth configuration in Azure DevOps Services, and then chooseConnect.


Connect with a Personal Access Token
Enter the URL for your GitHub Enterprise server and the Personal access token credentials recognized by that server. And then chooseConnect.


Connect with GitHub credentials
Enter the URL for your GitHub Enterprise server and the administrator account credentials recognized by that server, and then selectConnect.

The dialog lists all repositories for which you have GitHub administration rights. You can toggle betweenMineandAllto determine if others appear, and then check the ones that you want to add. SelectSavewhen you're done.TipYou can only make a connection to repositories defined under one GitHub organization. To connect a project to other repositories defined in another GitHub organization, you must add another connection.
The dialog lists all repositories for which you have GitHub administration rights. You can toggle betweenMineandAllto determine if others appear, and then check the ones that you want to add. SelectSavewhen you're done.

Tip
You can only make a connection to repositories defined under one GitHub organization. To connect a project to other repositories defined in another GitHub organization, you must add another connection.
If it's your first time connecting to a GitHub account or organization from Azure Boards, you also install the Azure Boards app for GitHub.Confirm the connectionearlier in this article.
If it's your first time connecting to a GitHub account or organization from Azure Boards, you also install the Azure Boards app for GitHub.Confirm the connectionearlier in this article.
Resolve connection issues
The Azure Boards-GitHub integration uses various authentication protocols to maintain the connection. Changes to a user's permission scope or authentication credentials can revoke the GitHub repositories connected to Azure Boards.
For an overview of the integration supported by the Azure Boards app for GitHub, seeAzure Boards-GitHub integration.
Supported authentication options
The following supported authentication options depend on the GitHub platform you are connecting to:
Platform
GitHub.com
GitHub Enterprise Server
Azure DevOps Services
GitHub.com user account
Personal access token (PAT)
OAuth
PAT
GitHub credentials
Azure DevOps Server 2020
Not applicable
PAT
GitHub credentials
Azure DevOps Server 2019
Not applicable
OAuth
PAT
GitHub credentials
Note
With the Azure Boards app for GitHub, Azure Boards and Azure DevOps Services integrate with GitHub.com and GitHub Enterprise Server repositories. Azure DevOps Server 2019 and later versions support integration with GitHub Enterprise Server repositories only. Integration with other Git repositories is not supported.
Grant Azure Boards organization access
If the integration between Azure Boards and GitHub isn't working as expected, verify that you granted organization access.
From GitHub web portal, openSettingsfrom your profile menu.
From GitHub web portal, openSettingsfrom your profile menu.
SelectApplicationsunderIntegrations>Authorized OAuth Apps>Azure Boards.
SelectApplicationsunderIntegrations>Authorized OAuth Apps>Azure Boards.
UnderOrganization access, resolve any issues that might appear. SelectGrantto grant access to any organizations that show as having anAccess request pending.
UnderOrganization access, resolve any issues that might appear. SelectGrantto grant access to any organizations that show as having anAccess request pending.

Resolve access issues
When the Azure Boards connection to GitHub loses access, an alert status with a red-X appears in the user interface. Hover over the alert to see that the credentials are no longer valid. To fix the issue, remove the connection and create a new one.

To resolve this issue, consider the following items:
If the connection is using OAuth:The Azure Boards application had its access denied for one of the repositories.GitHub might be unavailable/unreachable. This unavailability could be because of an outage in either service or an infrastructure/network issue on-premises. You can check service status from the following links:GitHubAzure DevOpsDelete and recreate the connection to the GitHub repository. This recreated connection causes GitHub to prompt to reauthorize Azure Boards.
If the connection is using OAuth:
The Azure Boards application had its access denied for one of the repositories.
The Azure Boards application had its access denied for one of the repositories.
GitHub might be unavailable/unreachable. This unavailability could be because of an outage in either service or an infrastructure/network issue on-premises. You can check service status from the following links:GitHubAzure DevOpsDelete and recreate the connection to the GitHub repository. This recreated connection causes GitHub to prompt to reauthorize Azure Boards.
GitHub might be unavailable/unreachable. This unavailability could be because of an outage in either service or an infrastructure/network issue on-premises. You can check service status from the following links:
GitHub
Azure DevOps
Delete and recreate the connection to the GitHub repository. This recreated connection causes GitHub to prompt to reauthorize Azure Boards.
If the connection is using a PAT:The PAT was revoked or the required permission scopes changed and are insufficient.The user might not have admin permissions on the GitHub repo.Recreate the PAT and ensure the scope for the token includes the required permissions:repo, read:user, user:email, admin:repo_hook. For more information, seeBest practices for using PATs.
If the connection is using a PAT:
The PAT was revoked or the required permission scopes changed and are insufficient.
The PAT was revoked or the required permission scopes changed and are insufficient.
The user might not have admin permissions on the GitHub repo.Recreate the PAT and ensure the scope for the token includes the required permissions:repo, read:user, user:email, admin:repo_hook. For more information, seeBest practices for using PATs.
The user might not have admin permissions on the GitHub repo.
Recreate the PAT and ensure the scope for the token includes the required permissions:repo, read:user, user:email, admin:repo_hook. For more information, seeBest practices for using PATs.
repo, read:user, user:email, admin:repo_hook

Resolve broken GitHub Enterprise Server connection
If you migrated from Azure DevOps Server to Azure DevOps Services with an existing GitHub Enterprise Server connection, your existing connection might not work as expected. Work item mentions within GitHub might be delayed or never appear in Azure DevOps Services because the callback URL associated with GitHub is no longer valid.
Consider the following resolutions:
Remove and re-create the connection:
Remove and re-create the connection to the GitHub Enterprise Server repository. Follow the sequence of steps provided inConnect from Azure Boardsdocumentation.
Remove and re-create the connection:
Remove and re-create the connection to the GitHub Enterprise Server repository. Follow the sequence of steps provided inConnect from Azure Boardsdocumentation.
Fix the webhook URL:
Go to GitHub's repository settings page and edit the webhook URL, pointing to the migrated Azure DevOps organization URL:https://dev.azure.com/{OrganizationName}/_apis/work/events?api-version=5.2-preview
Fix the webhook URL:
Go to GitHub's repository settings page and edit the webhook URL, pointing to the migrated Azure DevOps organization URL:https://dev.azure.com/{OrganizationName}/_apis/work/events?api-version=5.2-preview
https://dev.azure.com/{OrganizationName}/_apis/work/events?api-version=5.2-preview

Connect to multiple Azure DevOps organizations
When you connect your GitHub repository to projects in multiple Azure DevOps organizations, such as dev.azure.com/Contoso and dev.azure.com/Fabrikam, can cause unexpected results withAB#mentions. Work item IDs aren't unique across Azure DevOps organizations, soAB#12could refer to a work item in either Contoso or Fabrikam. When a work item is mentioned in a commit message or pull request, both organizations might attempt to link to a work item with the matching ID, causing confusion.
To avoid this issue, connect a single GitHub repository to only one Azure DevOps organization.
Note
When you connect using the Azure Boards app for GitHub, the app prevents connections to multiple organizations. If a GitHub repository is connected to the wrong Azure DevOps organization, contact the owner of that organization to remove the connection before adding the repository to the correct Azure DevOps organization.

Update XML definitions for select work item types
Update the XML definitions for the work item types if your organization uses the Hosted XML or on-premises XML process model to customize the work tracking experience and link to and view the GitHub link types from the Development section in the work item forms.
For example, to link user stories and bugs to GitHub commits and pull requests from theDevelopmentsection, update the XML definitions for user stories and bugs.
Follow the sequence of tasks provided inHosted XML process modelto update the XML definitions. For each work item type, find theGroup Label="Development"section, and add the following two lines in the code syntax to support the external link types:GitHub CommitandGitHub Pull Request.
Group Label="Development"
<ExternalLinkFilter Type="GitHub Pull Request" />  
             <ExternalLinkFilter Type="GitHub Commit" />
<ExternalLinkFilter Type="GitHub Pull Request" />  
             <ExternalLinkFilter Type="GitHub Commit" />
After you update, the section should appear as follows.
<Group Label="Development">  
   <Control Type="LinksControl" Name="Development">  
      <LinksControlOptions ViewMode="Dynamic" ZeroDataExperience="Development" ShowCallToAction="true">  
         <ListViewOptions GroupLinks="false">   
         </ListViewOptions>  
         <LinkFilters>  
             <ExternalLinkFilter Type="Build" />  
             <ExternalLinkFilter Type="Integrated in build" />  
             <ExternalLinkFilter Type="Pull Request" />  
             <ExternalLinkFilter Type="Branch" />  
             <ExternalLinkFilter Type="Fixed in Commit" />  
             <ExternalLinkFilter Type="Fixed in Changeset" />  
             <ExternalLinkFilter Type="Source Code File" />  
             <ExternalLinkFilter Type="Found in build" />  
             <ExternalLinkFilter Type="GitHub Pull Request" />  
             <ExternalLinkFilter Type="GitHub Commit" />  
         </LinkFilters>  
      </LinksControlOptions>  
   </Control>  
</Group>
<Group Label="Development">  
   <Control Type="LinksControl" Name="Development">  
      <LinksControlOptions ViewMode="Dynamic" ZeroDataExperience="Development" ShowCallToAction="true">  
         <ListViewOptions GroupLinks="false">   
         </ListViewOptions>  
         <LinkFilters>  
             <ExternalLinkFilter Type="Build" />  
             <ExternalLinkFilter Type="Integrated in build" />  
             <ExternalLinkFilter Type="Pull Request" />  
             <ExternalLinkFilter Type="Branch" />  
             <ExternalLinkFilter Type="Fixed in Commit" />  
             <ExternalLinkFilter Type="Fixed in Changeset" />  
             <ExternalLinkFilter Type="Source Code File" />  
             <ExternalLinkFilter Type="Found in build" />  
             <ExternalLinkFilter Type="GitHub Pull Request" />  
             <ExternalLinkFilter Type="GitHub Commit" />  
         </LinkFilters>  
      </LinksControlOptions>  
   </Control>  
</Group>

FAQs
Q: Some of my users in Azure DevOps have GitHub identities. Do I need to add them as new GitHub users to my organization?
A: No. Ask your users to sign out and then sign back in to the organization with their GitHub credentials from a fresh browser session. This action establishes their GitHub identities.
Q: I'm an organization Administrator and I enabled the policy for inviting GitHub users. Why can't I invite new GitHub users?
A: After changing the setting, sign out of Azure DevOps and then sign back in to the organization (dev.azure.com/{organizationName}ororganizationName.visualstudio.com) with your GitHub credentials from a fresh browser session.
dev.azure.com/{organizationName}
organizationName.visualstudio.com
Q: I signed in with my GitHub credentials, but why can't I invite GitHub users?
A: Only organization or project Administrators can invite new users to join the organization. You might not have the required permissions to add new users. Work with your administrator to get the necessary permissions or ask them to add the user for you.
Q: Do GitHub Enterprise users get free access to Azure DevOps?
A: For more information, seeUser and permissions management FAQs/GitHub Enterprise.
Next steps
Link GitHub commits, pull requests, and branches to work items
Related articles
Install and configure the Azure Boards app for GitHub
Configure status badges to add to GitHub README files
Troubleshoot GitHub & Azure Boards integration
Build GitHub repositories
Change GitHub repository access
Feedback
Was this page helpful?
Additional resources