Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Architecture best practices for Application Insights
Article
2024-11-27
4 contributors
In this article
Application Insights is an extensible application performance management service that you can use to monitor live applications and automatically detect performance anomalies. It includes powerful analytics tools to help you diagnose problems and understand how users interact with your application. This architecture guide provides best practices for Application Insights based on the five pillars of theAzure Well-Architected Framework pillars.
Important
How to use this guide
Each section has adesign checklistthat presents architectural areas of concern and design strategies that are localized to the technology scope.
Also included are recommendations on the technology capabilities that can help materialize those strategies. The recommendations aren't an exhaustive list of all configurations that are available for Application Insights and its dependencies. Instead, they provide the key recommendations mapped to the design perspectives. Use the recommendations to build your proof-of-concept or to optimize your existing environments.
Technology scope
This guide focuses on the interrelated decisions for the following Azure resources:
Application Insights
Log Analytics workspaces
Note
Application Insights stores and exposes data in a Log Analytics workspace. When you evaluate your metrics, keep Log Analytics as a critical dependency on Application Insights. For more information, seeWell-Architected Framework perspective on Log Analytics.
Reliability
The purpose of the Reliability pillar is to provide continued functionality bybuilding enough resilience and the ability to recover from failures quickly.
TheReliability design principlesprovide a high-level design strategy applied for individual components, system flows, and the system as a whole.
Design checklist for Reliability
Start your design strategy based on thedesign review checklist for Reliability. Determine its relevance to your business requirements and keep in mind the dependency on Log Analytics. Extend the strategy to include more approaches as needed.
Align your application monitoring design with business objectives and avoid unnecessary complexity.Determine thenumber of Application Insights resourcesthat you need and where to deploy them.
Align your application monitoring design with business objectives and avoid unnecessary complexity.Determine thenumber of Application Insights resourcesthat you need and where to deploy them.
Configure sampling based on the criticality of the data.Identify the user and system flows of your workload, determine the events that you want to gather, and configure sampling accordingly.For manually instrumented applications, seeAzure Monitor OpenTelemetry DistroorApplication Insights SDKs (Classic API).For autoinstrumentation, sampling is described in environment-specific articles. For more information, seeConfigure sampling in Azure Functions.
Configure sampling based on the criticality of the data.Identify the user and system flows of your workload, determine the events that you want to gather, and configure sampling accordingly.
For manually instrumented applications, seeAzure Monitor OpenTelemetry DistroorApplication Insights SDKs (Classic API).
For autoinstrumentation, sampling is described in environment-specific articles. For more information, seeConfigure sampling in Azure Functions.
Create a comprehensive resiliency plan.Start by conducting a failure mode analysis to identify potential scenarios when Application Insights might fail or become unreachable. These reasons can include network problems, authentication problems, or service disruptions.Determine how your workload should behave if Application Insights is unreachable at boot or during runtime based on the criticality of application monitoring to your business goals. Define and document the expected behavior of your workload.Test your resiliency plan. For example, you can validate network failures by using a network security group rule, and authenticate failures by changing the connection string.
Create a comprehensive resiliency plan.
Start by conducting a failure mode analysis to identify potential scenarios when Application Insights might fail or become unreachable. These reasons can include network problems, authentication problems, or service disruptions.
Determine how your workload should behave if Application Insights is unreachable at boot or during runtime based on the criticality of application monitoring to your business goals. Define and document the expected behavior of your workload.
Test your resiliency plan. For example, you can validate network failures by using a network security group rule, and authenticate failures by changing the connection string.
Plan for workspace resiliency and recovery by defining targets for your data collection components.Assess the criticality of the data that you collect and determine if it needs to be recoverable.Review service limits forApplication InsightsandLog Analytics workspaceto understand restrictions on data collection and retention, and other aspects of the service.Consider moving to adedicated clusterto take advantage of workspace resilience where the availability of Application Insights telemetry within the retention period defined is business critical.Usediagnostic settingsto export platform logs and metrics to the destination of your choice (for example, a storage account) for backup and recovery purposes.
Plan for workspace resiliency and recovery by defining targets for your data collection components.
Assess the criticality of the data that you collect and determine if it needs to be recoverable.
Review service limits forApplication InsightsandLog Analytics workspaceto understand restrictions on data collection and retention, and other aspects of the service.
Consider moving to adedicated clusterto take advantage of workspace resilience where the availability of Application Insights telemetry within the retention period defined is business critical.
Usediagnostic settingsto export platform logs and metrics to the destination of your choice (for example, a storage account) for backup and recovery purposes.
Implement a timely and reliable scaling strategy to plan for data ingestion growth.Monitor and adjust limits on sampling and data ingestion as traffic grows to prevent data loss because of sampling or exceeding thedaily cap. This helps ensure that your data ingestion process scales effectively with traffic increases.
Implement a timely and reliable scaling strategy to plan for data ingestion growth.Monitor and adjust limits on sampling and data ingestion as traffic grows to prevent data loss because of sampling or exceeding thedaily cap. This helps ensure that your data ingestion process scales effectively with traffic increases.
Ensure quick recovery of your application monitoring solution in case of service failure.Adopt infrastructure as code and useBicep templatesto create or re-create your user experience in Application Insights, includingalerts,dashboards, andqueries. This approach helps ensure that all critical components are quickly restored, which minimizes downtime and maintains service reliability.
Ensure quick recovery of your application monitoring solution in case of service failure.Adopt infrastructure as code and useBicep templatesto create or re-create your user experience in Application Insights, includingalerts,dashboards, andqueries. This approach helps ensure that all critical components are quickly restored, which minimizes downtime and maintains service reliability.
Security
The purpose of the Security pillar is to provideconfidentiality, integrity, and availabilityguarantees to the workload. Security is one of the most important aspects of any architecture. Azure Monitor provides features to employ both the principle of least privilege and defense in depth.
TheSecurity design principlesprovide a high-level design strategy for achieving those goals by applying approaches to the technical design of Application Insights. Use the following information to maximize the security of Application Insights and help ensure that only authorized users access collected data.
Design checklist for Security
Start your design strategy based on thedesign review checklist for Security. Identify vulnerabilities and controls to improve the security posture. Extend the strategy to include more approaches as needed.
Review theAzure Monitor security baseline.It provides guidance on security best practices to help secure your cloud solutions on Azure, including Application Insights.
Review theAzure Monitor security baseline.It provides guidance on security best practices to help secure your cloud solutions on Azure, including Application Insights.
Keep Application Insights instrumentation up to date to help ensure that your application monitoring solution is secure.Follow ourSDK update guidanceand update Application Insights SDKs (Classic API) at least once a year. We recommend that you follow similar practices for theAzure Monitor OpenTelemetry Distro.
Keep Application Insights instrumentation up to date to help ensure that your application monitoring solution is secure.Follow ourSDK update guidanceand update Application Insights SDKs (Classic API) at least once a year. We recommend that you follow similar practices for theAzure Monitor OpenTelemetry Distro.
Define a strategy forhandling personal data in Application Insights.To ensure ongoing compliance, regularly verify that the collection and handling of data, including IP addresses and personal data,complies with relevant regulations, such as GDPR.
Define a strategy forhandling personal data in Application Insights.To ensure ongoing compliance, regularly verify that the collection and handling of data, including IP addresses and personal data,complies with relevant regulations, such as GDPR.
Create intentional segmentation in your application monitoring design.Determine thenumber of Application Insights resourcesthat you need.
Create intentional segmentation in your application monitoring design.Determine thenumber of Application Insights resourcesthat you need.
UseAzure Monitor customer-managed key.By default, data in Azure Monitor is encrypted with Microsoft-managed keys. You can use your own encryption key to protect the data and saved queries in your workspaces. Customer-managed keys in Azure Monitor give you greater flexibility to manage access controls to stored data.
UseAzure Monitor customer-managed key.By default, data in Azure Monitor is encrypted with Microsoft-managed keys. You can use your own encryption key to protect the data and saved queries in your workspaces. Customer-managed keys in Azure Monitor give you greater flexibility to manage access controls to stored data.
Control network traffic.Consider private connectivity for accessing Azure services. Private connectivity effectively isolates your traffic from the public internet. Data flows for private networking include both data ingestion and query operations, each targeting distinct endpoints. These endpoints can be managed independently. This approach allows you to configure private ingestion while maintaining public query access, or vice versa. By doing so, you can apply defense-in-depth principles by creating localized network controls at all available network boundaries.
Control network traffic.Consider private connectivity for accessing Azure services. Private connectivity effectively isolates your traffic from the public internet. Data flows for private networking include both data ingestion and query operations, each targeting distinct endpoints. These endpoints can be managed independently. This approach allows you to configure private ingestion while maintaining public query access, or vice versa. By doing so, you can apply defense-in-depth principles by creating localized network controls at all available network boundaries.
Enhance data protection by securing storage systems and limiting access.Visit theLog Analytics service guideto learn about how to secure the data that you collect.
Enhance data protection by securing storage systems and limiting access.Visit theLog Analytics service guideto learn about how to secure the data that you collect.
Cost Optimization
Cost Optimization focuses ondetecting spend patterns, prioritizing investments in critical areas, and optimizing in othersto meet the organization's budget while meeting business requirements.
TheCost Optimization design principlesprovide a high-level design strategy for achieving those goals and making tradeoffs as necessary in the technical design related to Application Insights and its environment.
For more information on how data charges are calculated for the underlying Log Analytics workspaces of your Application Insights resources, seeAzure Monitor Logs cost calculations and options.
Design checklist for Cost Optimization
Start your design strategy based on thedesign review checklist for Cost Optimizationfor investments. Fine tune the design so that the workload aligns with the budget that's allocated for the workload. Your design should use the right Azure capabilities, monitor investments, and find opportunities to optimize over time.
ReviewAzure Monitor pricingto create a cost model.Estimate the initial cost, run rates, and ongoing costs by using thepricing calculator. Notice that Application Insights is billed through the Log Analytics workspace into which its log data ingested.
ReviewAzure Monitor pricingto create a cost model.Estimate the initial cost, run rates, and ongoing costs by using thepricing calculator. Notice that Application Insights is billed through the Log Analytics workspace into which its log data ingested.
Tune the amount of data collected.Usesamplingon an Application Insights-level to reduce data traffic and storage costs while preserving a statistically correct analysis of application data.Application Insights has several possiblelog sources. Use log levels to tune and reduce trace log telemetry.
Tune the amount of data collected.
Usesamplingon an Application Insights-level to reduce data traffic and storage costs while preserving a statistically correct analysis of application data.
Application Insights has several possiblelog sources. Use log levels to tune and reduce trace log telemetry.
Limit unplanned charges for your workspace.You can set a daily cap in both Application Insights and Log Analytics.
Limit unplanned charges for your workspace.You can set a daily cap in both Application Insights and Log Analytics.
Review costs like regional pricing and available pricing tiers regularly.The most significant charges for most Azure Monitor implementations are typically ingestion and retention of data in your Log Analytics workspaces. For more information, seeAzure Monitor Logs cost calculations and optionsor theCost Optimization sectionin the Log Analytics service guide.
Review costs like regional pricing and available pricing tiers regularly.The most significant charges for most Azure Monitor implementations are typically ingestion and retention of data in your Log Analytics workspaces. For more information, seeAzure Monitor Logs cost calculations and optionsor theCost Optimization sectionin the Log Analytics service guide.
Remove or optimize legacy, unneeded, and underutilized components of your application monitoring solution regularly.Edit ApplicationInsights.configto turn off collection modules that you don't need. For example, you might decide that performance counters or dependency data isn't required. Use telemetry filters or processors in code to help optimize component costs by not logging or sampling irrelevant calls.
Remove or optimize legacy, unneeded, and underutilized components of your application monitoring solution regularly.Edit ApplicationInsights.configto turn off collection modules that you don't need. For example, you might decide that performance counters or dependency data isn't required. Use telemetry filters or processors in code to help optimize component costs by not logging or sampling irrelevant calls.
Optimize environment costs.Determine thenumber of Application Insights resourcesyou need and where to deploy them. Optimize log levels and metrics collected per environment to manage costs effectively. For example, production environments might require different logging levels compared to development environments.
Optimize environment costs.Determine thenumber of Application Insights resourcesyou need and where to deploy them. Optimize log levels and metrics collected per environment to manage costs effectively. For example, production environments might require different logging levels compared to development environments.
Optimize flow costs.Use telemetry filters or processors in code to help optimize component costs by not logging or sampling irrelevant calls.
Optimize flow costs.Use telemetry filters or processors in code to help optimize component costs by not logging or sampling irrelevant calls.
Optimize code costs.Make sure to use updated Application Insights SDKs. Earlier versions of the ASP.NET Core SDK and Worker Service SDKcollect many counters by default, which were collected as custom metrics. Use later versions to specifyonly required counters.
Optimize code costs.Make sure to use updated Application Insights SDKs. Earlier versions of the ASP.NET Core SDK and Worker Service SDKcollect many counters by default, which were collected as custom metrics. Use later versions to specifyonly required counters.
Optimize personnel time.Use Application Insights experiences such as theapplication mapandfailure and performance views, and customize savedqueries,dashboardsandworkbooksfor your specific workload needs. Keep track of your deployments and other events withRelease Annotations.
Optimize personnel time.Use Application Insights experiences such as theapplication mapandfailure and performance views, and customize savedqueries,dashboardsandworkbooksfor your specific workload needs. Keep track of your deployments and other events withRelease Annotations.
Operational Excellence
Operational Excellence primarily focuses on procedures fordevelopment practices, observability, and release management.
TheOperational Excellence design principlesprovide a high-level design strategy for achieving those goals for the operational requirements of the workload.
Design checklist for Operational Excellence
Start your design strategy based on thedesign review checklist for Operational Excellencefor defining processes for observability, testing, and deployment related to Application Insights.
Integrate your application monitoring team members' specializations into a robust set of practices to instrument and monitor your workload.Choose an instrumentation method (for example, autoinstrumentation or manual instrumentation) that's best for your situation based on your business needs andsupported environments, languages, and resource providers.
Integrate your application monitoring team members' specializations into a robust set of practices to instrument and monitor your workload.Choose an instrumentation method (for example, autoinstrumentation or manual instrumentation) that's best for your situation based on your business needs andsupported environments, languages, and resource providers.
Ensure optimal performance of your application monitoring solution by keeping Application Insights instrumentation up to date.Follow ourSDK update guidanceand update Application Insights SDKs (Classic API) at least once a year. It's recommended to follow similar practices for theAzure Monitor OpenTelemetry Distro. Using the latest SDK or Distro versionsensures access to support servicesand provides the latest functionality and bug fixes.
Ensure optimal performance of your application monitoring solution by keeping Application Insights instrumentation up to date.Follow ourSDK update guidanceand update Application Insights SDKs (Classic API) at least once a year. It's recommended to follow similar practices for theAzure Monitor OpenTelemetry Distro. Using the latest SDK or Distro versionsensures access to support servicesand provides the latest functionality and bug fixes.
Formalize ideation and planning processes.Usework item ingetrationto easily create work items in GitHub or Azure DevOps that have relevant Application Insights data embedded in them.
Formalize ideation and planning processes.Usework item ingetrationto easily create work items in GitHub or Azure DevOps that have relevant Application Insights data embedded in them.
Configure Application Insights to monitor the availability and responsiveness of your web application.Use built-in features likequeriesanddashboardsbased on your specific business needs. After you deploy your application, set up recurring tests to monitor availability and responsiveness.
Configure Application Insights to monitor the availability and responsiveness of your web application.Use built-in features likequeriesanddashboardsbased on your specific business needs. After you deploy your application, set up recurring tests to monitor availability and responsiveness.
Develop an effective emergency operations practice.Usealertsandworkbooksto identify and respond to incidents. Clearly define human responsiblities. For example, determine who reboots the application if your workload fails.
Develop an effective emergency operations practice.Usealertsandworkbooksto identify and respond to incidents. Clearly define human responsiblities. For example, determine who reboots the application if your workload fails.
Clearly define your workload's safe deployment practices.UseRelease Annotationsas part of your failure mitigation strategies to keep track of your deployments and other events.
Clearly define your workload's safe deployment practices.UseRelease Annotationsas part of your failure mitigation strategies to keep track of your deployments and other events.
Performance Efficiency
Performance Efficiency is aboutmaintaining user experience even when there's an increase in loadby managing capacity. The strategy includes scaling resources, identifying and optimizing potential bottlenecks, and optimizing for peak performance.
ThePerformance Efficiency design principlesprovide a high-level design strategy for achieving those capacity goals against the expected usage.
Design checklist for Performance Efficiency
Start your design strategy based on thedesign review checklist for Performance Efficiency. Use key performance indicators for Application Insights to define a baseline.
Define performance targets related to your application monitoring requirements.Determine thenumber of Application Insights resourcesyou need.
Define performance targets related to your application monitoring requirements.Determine thenumber of Application Insights resourcesyou need.
Conduct capacity planning.Understand usage patterns and how much data is coming in, and review ingestion and sample rates.
Conduct capacity planning.Understand usage patterns and how much data is coming in, and review ingestion and sample rates.
Select the right region for your application monitoring solution.Deploy your Application Insights resource in the same region as the underlying Log Analytics workspace to prevent latency and reliability problems. SeeCreate a resource.
Select the right region for your application monitoring solution.Deploy your Application Insights resource in the same region as the underlying Log Analytics workspace to prevent latency and reliability problems. SeeCreate a resource.
Evaluatehow many Application Insights resourcesyou need.Monitoring mulitple applications or application components with a single Application Insights resource provides a holistic view, but can also affect the performance of experiences likeApplication MapandUsage.
Evaluatehow many Application Insights resourcesyou need.Monitoring mulitple applications or application components with a single Application Insights resource provides a holistic view, but can also affect the performance of experiences likeApplication MapandUsage.
Optimize code and infrastructure.Regularly evaluate custom Application Insights code to reduce complexity, improve performance, and ensure that the code is up to date.
Optimize code and infrastructure.Regularly evaluate custom Application Insights code to reduce complexity, improve performance, and ensure that the code is up to date.
Understand usage patterns and how much data is coming in by reviewing ingestion and sample rates.To optimize data usage, adjust them accordingly and reduce the amount ofcustom metrics, for example ITelemetryProcessor.
Understand usage patterns and how much data is coming in by reviewing ingestion and sample rates.To optimize data usage, adjust them accordingly and reduce the amount ofcustom metrics, for example ITelemetryProcessor.
Continuously optimize performance.Use built-in features likeSmart Detection,queries, anddashboardsto find components that show deteriorating performence.
Continuously optimize performance.Use built-in features likeSmart Detection,queries, anddashboardsto find components that show deteriorating performence.
Azure policies
Azure provides built-in policies related to Application Insights and its dependencies. Some of the preceding recommendations can be audited through Azure Policy. For example, you can check whether:
Application Insights components should prevent log ingestion public networks, or sources that Microsoft Entra ID doesn't authenticate.
You should enforce linking of the Application Insights component to a Log Analytics workspace to encrypt logs.
For comprehensive governance, review theAzure Policy built-in definitions for Application Insightsand other policies that might affect the security of the application performance monitoring solution.
Azure Advisor recommendations
Azure Advisor is a personalized cloud consultant that helps you follow best practices to optimize your Azure deployments. Currently, Azure provides no Azure Advisor recommendations that are specific to Application Insights.
The following are recommendations that can help you improve the cost effectiveness and operational excellence of Azure Monitor.
Cost Optimization
Operational Excellence
Related content
Application Insights
Monitoring and diagnostics guidance
Azure Well-Architected Framework perspective on Log Analytics
Enable application monitoring in Azure App Service for .NET, Node.js, Python, and Java applications
Enable Azure Monitor OpenTelemetry for .NET, Node.js, Python, and Java applications
Feedback
Was this page helpful?
Additional resources