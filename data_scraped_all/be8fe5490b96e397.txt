Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Configure a failover group for Azure SQL Database
Article
2024-09-27
4 contributors
In this article
Applies to:Azure SQL Database
Azure SQL Database
Azure SQL Managed Instance
This article teaches you how to configure afailover groupfor single and pooled databases in Azure SQL Database by using the Azure portal, Azure PowerShell, and the Azure CLI.
For end-to-end scripts, review how to add a single database to a failover group withAzure PowerShellorthe Azure CLI.
Prerequisites
Consider the following prerequisites to create your failover group for a single database:
Your primary database should already be created.Create single databaseto get started.
If your secondary server already exists in a different region to the primary server, the server login and firewall settings must match that of your primary server.
Create failover group
You can create your failover group and add a single database to it by using the Azure portal, PowerShell, and the Azure CLI.
Important
If you need to delete a secondary database after it's been added to a failover group, remove it from the failover group before deleting the database. Deleting a secondary database before it is removed from the failover group can cause unpredictable behavior.
Portal
PowerShell
Azure CLI
To create your failover group and add your single database to it by using the Azure portal, follow these steps:
If you know thelogical serverthat hosts your database, go directly to it in theAzure portal. If you need to find the server, follow these steps:SelectAzure SQLin the service menu. IfAzure SQLisn't in the list, selectAll services, then typeAzure SQLin the search box. (Optional) Select the star next toAzure SQLto favorite it and add it as an item in the service menu.On theAzure SQLpage, find the database you want to add to a failover group and select it to open theSQL databasepane.On theOverviewpane ofSQL database, select the name of the server underServer nameto open theSQL serverpane.
If you know thelogical serverthat hosts your database, go directly to it in theAzure portal. If you need to find the server, follow these steps:
SelectAzure SQLin the service menu. IfAzure SQLisn't in the list, selectAll services, then typeAzure SQLin the search box. (Optional) Select the star next toAzure SQLto favorite it and add it as an item in the service menu.
Azure SQL
On theAzure SQLpage, find the database you want to add to a failover group and select it to open theSQL databasepane.
On theOverviewpane ofSQL database, select the name of the server underServer nameto open theSQL serverpane.

On theSQL serverresource menu, selectFailover groupsunderData management. Select+ Add groupto open theFailover grouppage where you can create a new failover group.
On theSQL serverresource menu, selectFailover groupsunderData management. Select+ Add groupto open theFailover grouppage where you can create a new failover group.

On theFailover Grouppage:Provide aFailover group name.Choose an existing secondary server, or create a new server by selectingCreate newunderServer. The secondary server in the failover group must be in a different region than the primary server.SelectConfigure databaseto open theDatabases for failover grouppage.
On theFailover Grouppage:
Provide aFailover group name.
Choose an existing secondary server, or create a new server by selectingCreate newunderServer. The secondary server in the failover group must be in a different region than the primary server.
SelectConfigure databaseto open theDatabases for failover grouppage.

On theDatabases for failover grouppage:Choose the databases you want to add to the failover group (#1 in screenshot).(Optional) ChooseYesif you intend to designate these databases asstandby replicasto use foronlydisaster recovery (#2 in screenshot). Check the box to confirm that you'll use the replica for standby.UseSelectto save your database selection and go back to theFailover grouppage (not visible in screenshot).
On theDatabases for failover grouppage:
Choose the databases you want to add to the failover group (#1 in screenshot).
(Optional) ChooseYesif you intend to designate these databases asstandby replicasto use foronlydisaster recovery (#2 in screenshot). Check the box to confirm that you'll use the replica for standby.
UseSelectto save your database selection and go back to theFailover grouppage (not visible in screenshot).

UseCreateon theFailover grouppage to create your failover group.
UseCreateon theFailover grouppage to create your failover group.
Create your failover group with theNew-AzSqlDatabaseFailoverGroupPowerShell command:
# Create a failover group between the servers
$failovergroup = Write-host "Creating a failover group between the primary and secondary server..."
New-AzSqlDatabaseFailoverGroup `
   âResourceGroupName $resourceGroupName `
   -ServerName $serverName `
   -PartnerServerName $drServerName  `
   âFailoverGroupName $failoverGroupName `
   âFailoverPolicy Manual
$failovergroup
# Create a failover group between the servers
$failovergroup = Write-host "Creating a failover group between the primary and secondary server..."
New-AzSqlDatabaseFailoverGroup `
   âResourceGroupName $resourceGroupName `
   -ServerName $serverName `
   -PartnerServerName $drServerName  `
   âFailoverGroupName $failoverGroupName `
   âFailoverPolicy Manual
$failovergroup
Use theGet-AzSqlDatabaseandAdd-AzSqlDatabaseToFailoverGroupcommands to add the database to the failover group:
# Add the database to the failover group
Write-host "Adding the database to the failover group..." 
Get-AzSqlDatabase `
   -ResourceGroupName $resourceGroupName `
   -ServerName $serverName `
   -DatabaseName $databaseName | `
Add-AzSqlDatabaseToFailoverGroup `
   -ResourceGroupName $resourceGroupName `
   -ServerName $serverName `
   -FailoverGroupName $failoverGroupName
Write-host "Successfully added the database to the failover group..."
# Add the database to the failover group
Write-host "Adding the database to the failover group..." 
Get-AzSqlDatabase `
   -ResourceGroupName $resourceGroupName `
   -ServerName $serverName `
   -DatabaseName $databaseName | `
Add-AzSqlDatabaseToFailoverGroup `
   -ResourceGroupName $resourceGroupName `
   -ServerName $serverName `
   -FailoverGroupName $failoverGroupName
Write-host "Successfully added the database to the failover group..."
Note
It's possible to deploy your failover group across subscriptions by using the-PartnerSubscriptionIdparameter in Azure Powershell starting withAz.SQL 3.11.0. To learn more, review the followingExample.
-PartnerSubscriptionId
Create your failover group and add databases to it with theaz sql failover-group createAzure CLI command:
echo "Creating $failoverGroup between $server and $secondaryServer..."
az sql failover-group create --name $failoverGroup --partner-server $secondaryServer --resource-group $resourceGroup --server $server --failover-policy Automatic --grace-period 2 --add-db $database
echo "Creating $failoverGroup between $server and $secondaryServer..."
az sql failover-group create --name $failoverGroup --partner-server $secondaryServer --resource-group $resourceGroup --server $server --failover-policy Automatic --grace-period 2 --add-db $database
Test planned failover
Test failover of your failover group with no data loss using the Azure portal or PowerShell.
Portal
PowerShell
Azure CLI
To test failover of your failover group by using the Azure portal, follow these steps:
If you know thelogical serverthat hosts your database, go directly to it in theAzure portal. If you need to find the server, follow these steps:SelectAzure SQLin the service menu. IfAzure SQLisn't in the list, selectAll services, then typeAzure SQLin the search box. (Optional) Select the star next toAzure SQLto favorite it and add it as an item in the service menu.On theAzure SQLpage, find the database to want to test failover for and select it to open theSQL databasepane.On theOverviewpane ofSQL database, select the name of the server underServer nameto open theSQL serverpane.
If you know thelogical serverthat hosts your database, go directly to it in theAzure portal. If you need to find the server, follow these steps:
SelectAzure SQLin the service menu. IfAzure SQLisn't in the list, selectAll services, then typeAzure SQLin the search box. (Optional) Select the star next toAzure SQLto favorite it and add it as an item in the service menu.
Azure SQL
On theAzure SQLpage, find the database to want to test failover for and select it to open theSQL databasepane.
On theOverviewpane ofSQL database, select the name of the server underServer nameto open theSQL serverpane.

On theSQL serverresource menu, selectFailover groupsunderData management, and then choose an existing failover group to open theFailover grouppage.
On theSQL serverresource menu, selectFailover groupsunderData management, and then choose an existing failover group to open theFailover grouppage.

On theFailover grouppage:Review which server is primary and which server is secondary.SelectFailoverfrom the command bar to fail over your failover group containing your database.SelectYeson the warning that notifies you that TDS sessions will be disconnected.
On theFailover grouppage:
Review which server is primary and which server is secondary.
SelectFailoverfrom the command bar to fail over your failover group containing your database.
SelectYeson the warning that notifies you that TDS sessions will be disconnected.

Review which server is now primary and which server is secondary. Once failover succeeds, the two servers swap roles, so that the former primary becomes the secondary.
Review which server is now primary and which server is secondary. Once failover succeeds, the two servers swap roles, so that the former primary becomes the secondary.
(Optional) SelectFailoveragain to fail the servers back to their original roles.
(Optional) SelectFailoveragain to fail the servers back to their original roles.
Test failover of your failover group by using PowerShell.
Verify the roles of each server
Use theGet-AzSqlDatabaseFailoverGroupcommand to confirm the roles of each server.
# Check role of secondary replica
Write-host "Confirming the secondary replica is secondary...." 
(Get-AzSqlDatabaseFailoverGroup `
   -FailoverGroupName $failoverGroupName `
   -ResourceGroupName $resourceGroupName `
   -ServerName $drServerName).ReplicationRole
# Check role of secondary replica
Write-host "Confirming the secondary replica is secondary...." 
(Get-AzSqlDatabaseFailoverGroup `
   -FailoverGroupName $failoverGroupName `
   -ResourceGroupName $resourceGroupName `
   -ServerName $drServerName).ReplicationRole
Fail over to the secondary server
Use theSwitch-AzSqlDatabaseFailoverGroupto fail over to the secondary server.
# Failover to secondary server
Write-host "Failing over failover group to the secondary..." 
Switch-AzSqlDatabaseFailoverGroup `
   -ResourceGroupName $resourceGroupName `
   -ServerName $drServerName `
   -FailoverGroupName $failoverGroupName
Write-host "Failed failover group successfully to" $drServerName 

Write-host "Confirming the secondary server is now primary...." 
(Get-AzSqlDatabaseFailoverGroup `
   -FailoverGroupName $failoverGroupName `
   -ResourceGroupName $resourceGroupName `
   -ServerName $drServerName).ReplicationRole
# Failover to secondary server
Write-host "Failing over failover group to the secondary..." 
Switch-AzSqlDatabaseFailoverGroup `
   -ResourceGroupName $resourceGroupName `
   -ServerName $drServerName `
   -FailoverGroupName $failoverGroupName
Write-host "Failed failover group successfully to" $drServerName 

Write-host "Confirming the secondary server is now primary...." 
(Get-AzSqlDatabaseFailoverGroup `
   -FailoverGroupName $failoverGroupName `
   -ResourceGroupName $resourceGroupName `
   -ServerName $drServerName).ReplicationRole
Revert failover group back to the primary server
Use theSwitch-AzSqlDatabaseFailoverGroupcommand to fail back to the primary server.
# Revert failover to primary server
Write-host "Failing over failover group to the primary...." 
Switch-AzSqlDatabaseFailoverGroup `
   -ResourceGroupName $resourceGroupName `
   -ServerName $serverName `
   -FailoverGroupName $failoverGroupName
Write-host "Failed failover group successfully back to" $serverName
# Revert failover to primary server
Write-host "Failing over failover group to the primary...." 
Switch-AzSqlDatabaseFailoverGroup `
   -ResourceGroupName $resourceGroupName `
   -ServerName $serverName `
   -FailoverGroupName $failoverGroupName
Write-host "Failed failover group successfully back to" $serverName
Test failover by using the Azure CLI.
Verify the roles of each server
Use theaz sql failover-group showcommand to confirm the roles of each server.
echo "Confirming the role of each server in the failover group..." # note ReplicationRole property
az sql failover-group show --name $failoverGroup --resource-group $resourceGroup --server $server
echo "Confirming the role of each server in the failover group..." # note ReplicationRole property
az sql failover-group show --name $failoverGroup --resource-group $resourceGroup --server $server
Fail over to the secondary server
Use theaz sql failover-group set-primaryto fail over to the secondary server. Use theaz sql failover-group showcommand to verify a successful failover.
echo "Failing over to $secondaryServer..."
az sql failover-group set-primary --name $failoverGroup --resource-group $resourceGroup --server $secondaryServer 

echo "Confirming role of $secondaryServer is now primary..." # note ReplicationRole property
az sql failover-group show --name $failoverGroup --resource-group $resourceGroup --server $server
echo "Failing over to $secondaryServer..."
az sql failover-group set-primary --name $failoverGroup --resource-group $resourceGroup --server $secondaryServer 

echo "Confirming role of $secondaryServer is now primary..." # note ReplicationRole property
az sql failover-group show --name $failoverGroup --resource-group $resourceGroup --server $server
Revert failover group back to the primary server
Use theaz sql failover-group set-primarycommand to fail back to the primary server.
echo "Failing back to $server...."
az sql failover-group set-primary --name $failoverGroup --resource-group $resourceGroup --server $server
echo "Failing back to $server...."
az sql failover-group set-primary --name $failoverGroup --resource-group $resourceGroup --server $server
For end-to-end scripts, review how to add an elastic pool to a failover group withAzure PowerShellorthe Azure CLI.
Prerequisites
Consider the following prerequisites for creating your failover group for a pooled database:
Your primary elastic pool should already exist.Create elastic poolto get started.
If your secondary server already exists, the server login and firewall settings must match that of your primary server.
Create failover group
Create the failover group for your elastic pool by using the Azure portal, PowerShell, or the Azure CLI.
Important
If you need to delete a secondary database after its been added to a failover group, remove it from the failover group before deleting the database. Deleting a secondary database before it is removed from the failover group can cause unpredictable behavior.
Portal
PowerShell
Azure CLI
To create your failover group and add your elastic pool to it by using the Azure portal, follow these steps:
Go to theCreate SQL Elastic poolpage in the Azure portal. Create an elastic pool that:Has the same name as the elastic pool on the primary server.Uses a secondary server you intend to use for the failover group. The secondary server must be in a region different to the primary server, and the server login and firewall settings must match that of your primary server. Create a new server if the secondary server doesn't already exist.
Go to theCreate SQL Elastic poolpage in the Azure portal. Create an elastic pool that:
Has the same name as the elastic pool on the primary server.
Uses a secondary server you intend to use for the failover group. The secondary server must be in a region different to the primary server, and the server login and firewall settings must match that of your primary server. Create a new server if the secondary server doesn't already exist.
If you know thelogical serverthat hosts your primary elastic pool, go directly to it in theAzure portal. If you need to find the server, follow these steps:SelectAzure SQLin the service menu. IfAzure SQLisn't in the list, selectAll services, then typeAzure SQLin the search box. (Optional) Select the star next toAzure SQLto favorite it and add it as an item in the service menu.On theAzure SQLpage, find the elastic pool you want to add to the failover group and select it to open theSQL elastic poolpane.On theOverviewpane ofSQL elastic pool, select the name of the server underServer nameto open theSQL serverpane.
If you know thelogical serverthat hosts your primary elastic pool, go directly to it in theAzure portal. If you need to find the server, follow these steps:
SelectAzure SQLin the service menu. IfAzure SQLisn't in the list, selectAll services, then typeAzure SQLin the search box. (Optional) Select the star next toAzure SQLto favorite it and add it as an item in the service menu.
Azure SQL
On theAzure SQLpage, find the elastic pool you want to add to the failover group and select it to open theSQL elastic poolpane.
On theOverviewpane ofSQL elastic pool, select the name of the server underServer nameto open theSQL serverpane.

On theSQL serverresource menu, selectFailover groupsunderData management. Select+ Add groupto open theFailover grouppage where you can create a new failover group.
On theSQL serverresource menu, selectFailover groupsunderData management. Select+ Add groupto open theFailover grouppage where you can create a new failover group.

On theFailover Grouppage:Provide aFailover group name.Choose an existing secondary server. The secondary server in the failover group must be in a different region than the primary server, and contain an elastic pool with the same name as the primary server.SelectConfigure databaseto open theDatabases for failover grouppage.
On theFailover Grouppage:
Provide aFailover group name.
Choose an existing secondary server. The secondary server in the failover group must be in a different region than the primary server, and contain an elastic pool with the same name as the primary server.
SelectConfigure databaseto open theDatabases for failover grouppage.

On theDatabases for failover grouppage, choose the pooled databases you want to add to the failover group. UseSelectto save your database selection and go back to theFailover grouppage.
On theDatabases for failover grouppage, choose the pooled databases you want to add to the failover group. UseSelectto save your database selection and go back to theFailover grouppage.

SelectCreateon theFailover grouppage to create your failover group. Adding the elastic pool to the failover group automatically starts the geo-replication process.
SelectCreateon theFailover grouppage to create your failover group. Adding the elastic pool to the failover group automatically starts the geo-replication process.
Create your failover group and add your elastic pool to it by using PowerShell.
Use theNew-AzSqlDatabaseFailoverGroupto create the failover group:
# Create a failover group between the servers
Write-host "Creating failover group..." 
New-AzSqlDatabaseFailoverGroup `
  âResourceGroupName $resourceGroupName `
   -ServerName $serverName `
   -PartnerServerName $drServerName  `
   âFailoverGroupName $failoverGroupName `
   âFailoverPolicy Manual
Write-host "Failover group created successfully."
# Create a failover group between the servers
Write-host "Creating failover group..." 
New-AzSqlDatabaseFailoverGroup `
  âResourceGroupName $resourceGroupName `
   -ServerName $serverName `
   -PartnerServerName $drServerName  `
   âFailoverGroupName $failoverGroupName `
   âFailoverPolicy Manual
Write-host "Failover group created successfully."
Use theGet-AzSqlDatabaseFailoverGroupandGet-AzSqlElasticPoolDatabasecommands to add the database to the failover group:
# Add elastic pool to the failover group
Write-host "Enumerating databases in elastic pool...." 
$FailoverGroup = Get-AzSqlDatabaseFailoverGroup `
                 -ResourceGroupName $resourceGroupName `
                 -ServerName $serverName `
                 -FailoverGroupName $failoverGroupName
$databases = Get-AzSqlElasticPoolDatabase `
               -ResourceGroupName $resourceGroupName `
               -ServerName $serverName `
               -ElasticPoolName $poolName
Write-host "Adding databases to failover group..." 
$failoverGroup = $failoverGroup | Add-AzSqlDatabaseToFailoverGroup `
                                  -Database $databases 
$failoverGroup
# Add elastic pool to the failover group
Write-host "Enumerating databases in elastic pool...." 
$FailoverGroup = Get-AzSqlDatabaseFailoverGroup `
                 -ResourceGroupName $resourceGroupName `
                 -ServerName $serverName `
                 -FailoverGroupName $failoverGroupName
$databases = Get-AzSqlElasticPoolDatabase `
               -ResourceGroupName $resourceGroupName `
               -ServerName $serverName `
               -ElasticPoolName $poolName
Write-host "Adding databases to failover group..." 
$failoverGroup = $failoverGroup | Add-AzSqlDatabaseToFailoverGroup `
                                  -Database $databases 
$failoverGroup
In this step, create your failover group and add your database to it by using the Azure CLI.
Use theaz sql failover-group createcommand to create a failover group.
echo "Creating $failoverGroup between $server and $secondaryServer..."
az sql failover-group create --name $failoverGroup --partner-server $secondaryServer --resource-group $resourceGroup --server $server --failover-policy Automatic --grace-period 2
databaseId=$(az sql elastic-pool list-dbs --name $pool --resource-group $resourceGroup --server $server --query [0].name -o json | tr -d '"')
echo "Creating $failoverGroup between $server and $secondaryServer..."
az sql failover-group create --name $failoverGroup --partner-server $secondaryServer --resource-group $resourceGroup --server $server --failover-policy Automatic --grace-period 2
databaseId=$(az sql elastic-pool list-dbs --name $pool --resource-group $resourceGroup --server $server --query [0].name -o json | tr -d '"')
Use theaz sql failover-group updatecommand to add a database to the failover group.
echo "Adding $database to $failoverGroup..."
az sql failover-group update --name $failoverGroup --add-db $databaseId --resource-group $resourceGroup --server $server
echo "Adding $database to $failoverGroup..."
az sql failover-group update --name $failoverGroup --add-db $databaseId --resource-group $resourceGroup --server $server
Test planned failover
Test failover of your elastic pool with no data loss by using the Azure portal, PowerShell, or the Azure CLI.
Portal
PowerShell
Azure CLI
Fail your failover group over to the secondary server, and then fail back using the Azure portal.
If you know thelogical serverthat hosts your primary elastic pool, go directly to it in theAzure portal. If you need to find the server, follow these steps:SelectAzure SQLin the service menu. IfAzure SQLisn't in the list, selectAll services, then typeAzure SQLin the search box. (Optional) Select the star next toAzure SQLto favorite it and add it as an item in the service menu.On theAzure SQLpage, find the elastic pool you want to add to the failover group and select it to open theSQL elastic poolpane.On theOverviewpane ofSQL elastic pool, select the name of the server underServer nameto open theSQL serverpane.
If you know thelogical serverthat hosts your primary elastic pool, go directly to it in theAzure portal. If you need to find the server, follow these steps:
SelectAzure SQLin the service menu. IfAzure SQLisn't in the list, selectAll services, then typeAzure SQLin the search box. (Optional) Select the star next toAzure SQLto favorite it and add it as an item in the service menu.
Azure SQL
On theAzure SQLpage, find the elastic pool you want to add to the failover group and select it to open theSQL elastic poolpane.
On theOverviewpane ofSQL elastic pool, select the name of the server underServer nameto open theSQL serverpane.

On theSQL serverresource menu, selectFailover groupsunderData management, and then choose an existing failover group to open theFailover grouppage.
On theSQL serverresource menu, selectFailover groupsunderData management, and then choose an existing failover group to open theFailover grouppage.

On theFailover grouppage:Review which server is primary and which server is secondary.SelectFailoverfrom the command bar to fail over your failover group containing your database.SelectYeson the warning that notifies you that TDS sessions will be disconnected.
On theFailover grouppage:
Review which server is primary and which server is secondary.
SelectFailoverfrom the command bar to fail over your failover group containing your database.
SelectYeson the warning that notifies you that TDS sessions will be disconnected.

Review which server is now primary and which server is secondary. Once failover succeeds, the two servers swap roles, so that the former primary becomes the secondary.
Review which server is now primary and which server is secondary. Once failover succeeds, the two servers swap roles, so that the former primary becomes the secondary.
(Optional) SelectFailoveragain to fail the servers back to their original roles.
(Optional) SelectFailoveragain to fail the servers back to their original roles.
Test failover of your failover group using PowerShell by using the following PowerShell commands:
Verify the roles of each server
Use theGet-AzSqlDatabaseFailoverGroupcommand to confirm the roles of each server.
# Check role of secondary replica
Write-host "Confirming the secondary server is secondary...." 
(Get-AzSqlDatabaseFailoverGroup `
   -FailoverGroupName $failoverGroupName `
   -ResourceGroupName $resourceGroupName `
   -ServerName $drServerName).ReplicationRole
# Check role of secondary replica
Write-host "Confirming the secondary server is secondary...." 
(Get-AzSqlDatabaseFailoverGroup `
   -FailoverGroupName $failoverGroupName `
   -ResourceGroupName $resourceGroupName `
   -ServerName $drServerName).ReplicationRole
Fail over to the secondary server
Use theSwitch-AzSqlDatabaseFailoverGroupto fail over to the secondary server.
# Failover to secondary server
Write-host "Failing over failover group to the secondary..." 
Switch-AzSqlDatabaseFailoverGroup `
   -ResourceGroupName $resourceGroupName `
   -ServerName $drServerName `
   -FailoverGroupName $failoverGroupName
Write-host "Failover group failed over to" $drServerName 

# Check role of secondary replica
Write-host "Confirming the secondary server is now primary" 
(Get-AzSqlDatabaseFailoverGroup `
   -FailoverGroupName $failoverGroupName `
   -ResourceGroupName $resourceGroupName `
   -ServerName $drServerName).ReplicationRole
# Failover to secondary server
Write-host "Failing over failover group to the secondary..." 
Switch-AzSqlDatabaseFailoverGroup `
   -ResourceGroupName $resourceGroupName `
   -ServerName $drServerName `
   -FailoverGroupName $failoverGroupName
Write-host "Failover group failed over to" $drServerName 

# Check role of secondary replica
Write-host "Confirming the secondary server is now primary" 
(Get-AzSqlDatabaseFailoverGroup `
   -FailoverGroupName $failoverGroupName `
   -ResourceGroupName $resourceGroupName `
   -ServerName $drServerName).ReplicationRole
Verify the roles of each server
Use theGet-AzSqlDatabaseFailoverGroupcommand to confirm the roles of each server.
# Check role of secondary replica
Write-host "Confirming the secondary server is secondary...." 
(Get-AzSqlDatabaseFailoverGroup `
   -FailoverGroupName $failoverGroupName `
   -ResourceGroupName $resourceGroupName `
   -ServerName $drServerName).ReplicationRole
# Check role of secondary replica
Write-host "Confirming the secondary server is secondary...." 
(Get-AzSqlDatabaseFailoverGroup `
   -FailoverGroupName $failoverGroupName `
   -ResourceGroupName $resourceGroupName `
   -ServerName $drServerName).ReplicationRole
Revert failover group back to the primary server
Use theSwitch-AzSqlDatabaseFailoverGroupcommand to fail back to the primary server.
# Revert failover to primary server
Write-host "Failing over failover group to the primary...." 
Switch-AzSqlDatabaseFailoverGroup `
   -ResourceGroupName $resourceGroupName `
   -ServerName $serverName `
   -FailoverGroupName $failoverGroupName
Write-host "Failover group failed over to" $serverName
# Revert failover to primary server
Write-host "Failing over failover group to the primary...." 
Switch-AzSqlDatabaseFailoverGroup `
   -ResourceGroupName $resourceGroupName `
   -ServerName $serverName `
   -FailoverGroupName $failoverGroupName
Write-host "Failover group failed over to" $serverName
Test failover using the Azure CLI.
Verify the roles of each server
Use theaz sql failover-group showcommand to confirm the roles of each server in the failover group.
echo "Confirming the role of each server in the failover group..." # note ReplicationRole property
az sql failover-group show --name $failoverGroup --resource-group $resourceGroup --server $server
echo "Confirming the role of each server in the failover group..." # note ReplicationRole property
az sql failover-group show --name $failoverGroup --resource-group $resourceGroup --server $server
Fail over to the secondary server
Use theaz sql failover-group set-primarycommand to fail over to the secondary server. Use theaz sql failover-group showcommand to verify a successful failover.
echo "Failing over to $secondaryServer..."
az sql failover-group set-primary --name $failoverGroup --resource-group $resourceGroup --server $secondaryServer 

echo "Confirming role of $secondaryServer is now primary..." # note ReplicationRole property
az sql failover-group show --name $failoverGroup --resource-group $resourceGroup --server $server
echo "Failing over to $secondaryServer..."
az sql failover-group set-primary --name $failoverGroup --resource-group $resourceGroup --server $secondaryServer 

echo "Confirming role of $secondaryServer is now primary..." # note ReplicationRole property
az sql failover-group show --name $failoverGroup --resource-group $resourceGroup --server $server
Verify the roles of each server
Use theaz sql failover-group showcommand to confirm the roles of each server in the failover group.
echo "Confirming the role of each server in the failover group..." # note ReplicationRole property
az sql failover-group show --name $failoverGroup --resource-group $resourceGroup --server $server
echo "Confirming the role of each server in the failover group..." # note ReplicationRole property
az sql failover-group show --name $failoverGroup --resource-group $resourceGroup --server $server
Revert failover group back to the primary server
Use theaz sql failover-group set-primarycommand to fail back to the primary server.
echo "Failing back to $server...."
az sql failover-group set-primary --name $failoverGroup --resource-group $resourceGroup --server $server
echo "Failing back to $server...."
az sql failover-group set-primary --name $failoverGroup --resource-group $resourceGroup --server $server
Modify existing failover group
You can add or remove databases from an existing failover group, or edit failover group configuration settings by using the Azure portal, PowerShell, and the Azure CLI.
Portal
PowerShell
Azure CLI
To make changes to an existing failover group by using the Azure portal, follow these steps:
If you know thelogical serverthat hosts your database, or elastic pool, go directly to it in theAzure portal. If you need to find the server, follow these steps:SelectAzure SQLin the service menu. IfAzure SQLisn't in the list, selectAll services, then typeAzure SQLin the search box. (Optional) Select the star next toAzure SQLto favorite it and add it as an item in the service menu.On theAzure SQLpage, find the database or elastic pool you want to modify and select it to open theSQL databaseorSQL elastic poolpane.On theOverviewpane forSQL databaseorSQL elastic pool, select the name of the server underServer nameto open theSQL serverpane.
If you know thelogical serverthat hosts your database, or elastic pool, go directly to it in theAzure portal. If you need to find the server, follow these steps:
SelectAzure SQLin the service menu. IfAzure SQLisn't in the list, selectAll services, then typeAzure SQLin the search box. (Optional) Select the star next toAzure SQLto favorite it and add it as an item in the service menu.
Azure SQL
On theAzure SQLpage, find the database or elastic pool you want to modify and select it to open theSQL databaseorSQL elastic poolpane.
On theOverviewpane forSQL databaseorSQL elastic pool, select the name of the server underServer nameto open theSQL serverpane.
On theSQL serverresource menu, selectFailover groupsunderData management, and then choose an existing failover group to open theFailover grouppage.
On theSQL serverresource menu, selectFailover groupsunderData management, and then choose an existing failover group to open theFailover grouppage.

On theFailover grouppage, use the command bar:To add a database, selectAdd databasesto open theAdd databases to failover grouppane and then expand#Databasesto display the list of databases on the primary server. Check the box next to the database(s) you want to add to the failover group, and then useSelectto save your changes and add your database(s).To remove a database, selectRemove databasesto open theRemove databases from failover grouppane and then expand#Databasesto list the databases in the failover group. Check the box next to the database(s) you want to remove from the failover group, and then useSelectto save your changes and remove your database(s).To edit the failover policy, or configure a grace period, selectEdit configurationto open theEdit configurations Failover groupspane and modify your settings. UseSelectto save your changes.
On theFailover grouppage, use the command bar:
To add a database, selectAdd databasesto open theAdd databases to failover grouppane and then expand#Databasesto display the list of databases on the primary server. Check the box next to the database(s) you want to add to the failover group, and then useSelectto save your changes and add your database(s).
To remove a database, selectRemove databasesto open theRemove databases from failover grouppane and then expand#Databasesto list the databases in the failover group. Check the box next to the database(s) you want to remove from the failover group, and then useSelectto save your changes and remove your database(s).
To edit the failover policy, or configure a grace period, selectEdit configurationto open theEdit configurations Failover groupspane and modify your settings. UseSelectto save your changes.

To modify an existing failover group by using PowerShell:
Use theAdd-AzSqlDatabaseToFailoverGroupcommand to add databases to a failover group.
Use theRemove-AzSqlDatabaseFromFailoverGroupcommand to remove databases from a failover group.
Use theSet-AzSqlDatabaseFailoverGroupcommand to modify failover group configuration settings.
To modify an existing failover group by using the Azure CLI, use theaz sql failover-group updatecommand to add or remove databases, or modify configuration settings.
Use Private Link
Using a private link allows you to associate a logical server to a specific private IP address within the virtual network and subnet.
To use a private link with your failover group, do the following:
Ensure your primary and secondary servers are in apaired region.
Create the virtual network and subnet in each region to host private endpoints for primary and secondary servers such that they have nonoverlapping IP address spaces. For example, the primary virtual network address range of 10.0.0.0/16 and the secondary virtual network address range of 10.0.0.1/16 overlaps. For more information about virtual network address ranges, see the blogdesigning Azure virtual networks.
Create aprivate endpoint and Azure Private DNS zone for the primary server.
Create a private endpoint for the secondary server as well, but this time choose to reuse the same Private DNS zone that was created for the primary server.
Once the private link is established, you can create the failover group following the steps outlined previously in this article.
Locate listener endpoint
After your failover group is configured, update the connection string for your application to point to theRead/write listener endpointso that your application continues to connect to whichever database is primary after failover. By using the listener endpoint, you don't have to manually update your connection string every time your failover group fails over since traffic is always routed to the current primary. You can also point read-only workload to theRead-onlylistener endpoint.
To locate the listener endpoint in the Azure portal, go to your logical server in the Azure portal and underData management, selectFailover groups. Select the failover group you're interested in.
Scroll down to find the listener endpoints:
TheRead/writelistener endpoint, in the form offog-name.database.windows.net, routes traffic to the primary database.
fog-name.database.windows.net
TheRead-onlylistener endpoint, in the form offog-name.secondary.database.windows.net, routes traffic to the secondary database.
fog-name.secondary.database.windows.net

Scaling databases in a failover group
You can scale the primary database up or down to a different compute size (within the same service tier) without disconnecting any geo-secondaries. When scaling up, we recommend that you scale up the geo-secondary first, and then scale up the primary. When scaling down, reverse the order: scale down the primary first, and then scale down the secondary. When you scale a database to a different service tier, this recommendation is enforced.
This sequence is recommended specifically to avoid the problem where the geo-secondary at a lower SKU gets overloaded and must be reseeded during an upgrade or downgrade process. You could also avoid the problem by making the primary read-only, at the expense of affecting all read-write workloads against the primary.
Note
If you created a geo-secondary as part of the failover group configuration, it's not recommended to scale down the geo-secondary. This is to ensure your data tier has sufficient capacity to process your regular workload after a geo-failover.
You might not be able to scale a geo-secondary after an unplanned failover when the former geo-primary is unavailable due to outage. This is a known limitation.
The primary database in a failover group can't scale to a higher service tier (edition) unless the secondary database is first scaled to the higher tier. For example, if you want to scale up the primary from General Purpose to Business Critical, you have to first scale the geo-secondary to Business Critical. If you try to scale the primary or geo-secondary in a way that violates this rule, you will receive the following error:
The source database 'Primaryserver.DBName' cannot have higher edition than the target database 'Secondaryserver.DBName'. Upgrade the edition on the target before upgrading the source.
The source database 'Primaryserver.DBName' cannot have higher edition than the target database 'Secondaryserver.DBName'. Upgrade the edition on the target before upgrading the source.
Prevent loss of critical data
Due to the high latency of wide area networks, geo-replication uses an asynchronous replication mechanism. Asynchronous replication makes the possibility of data loss unavoidable if the primary fails. To protect critical transactions from data loss, an application developer can call thesp_wait_for_database_copy_syncstored procedure immediately after committing the transaction. Callingsp_wait_for_database_copy_syncblocks the calling thread until the last committed transaction has been transmitted and hardened in the transaction log of the secondary database. However, it doesn't wait for the transmitted transactions to be replayed (redone) on the secondary.sp_wait_for_database_copy_syncis scoped to a specific geo-replication link. Any user with the connection rights to the primary database can call this procedure.
sp_wait_for_database_copy_sync
sp_wait_for_database_copy_sync
Note
sp_wait_for_database_copy_syncprevents data loss after geo-failover for specific transactions, but does not guarantee full synchronization for read access. The delay caused by asp_wait_for_database_copy_syncprocedure call can be significant and depends on the size of the not yet transmitted transaction log on the primary at the time of the call.
sp_wait_for_database_copy_sync
sp_wait_for_database_copy_sync
Change the secondary region
To illustrate the change sequence, we'll assume that server A is the primary server, server B is the existing secondary server, and server C is the new secondary in the third region. To make the transition, follow these steps:
Create additional secondaries of each database on server A to server C usingactive geo-replication. Each database on server A will have two secondaries, one on server B and one on server C. This guarantees that the primary databases remain protected during the transition.
Delete the failover group. At this point sign in attempts using failover group endpoints start to fail.
Re-create the failover group with the same name between servers A and C.
Add all primary databases on server A to the new failover group. At this point sign in attempts stop failing.
Delete server B. All databases on B will be deleted automatically.
Change the primary region
To illustrate the change sequence, we'll assume server A is the primary server, server B is the existing secondary server, and server C is the new primary in the third region. To make the transition, follow these steps:
Perform a planned geo-failover to switch the primary server to B. Server A becomes the new secondary server. The failover might result in several minutes of downtime. The actual time depends on the size of failover group.
Create additional secondaries of each database on server B to server C usingactive geo-replication. Each database on server B will have two secondaries, one on server A and one on server C. This guarantees that the primary databases remain protected during the transition.
Delete the failover group. At this point sign in attempts using failover group endpoints start to fail.
Re-create the failover group with the same name between servers B and C.
Add all primary databases on B to the new failover group. At this point login attempts stop failing.
Perform a planned geo-failover of the failover group to switch B and C. Now server C becomes the primary and B the secondary. All secondary databases on server A will be automatically linked to the primaries on C. As in step 1, the failover might result in several minutes of downtime.
Delete server A. All databases on A will be deleted automatically.
Important
When the failover group is deleted, the DNS records for the listener endpoints are also deleted. At that point, there is a non-zero probability of somebody else creating a failover group or a server DNS alias with the same name. Because failover group names and DNS aliases must be globally unique, this will prevent you from using the same name again. To minimize this risk, don't use generic failover group names.
Failover groups and network security
For some applications, the security rules require that the network access to the data tier is restricted to a specific component or components such as a VM, web service, etc. This requirement presents some challenges for business continuity design and the use of failover groups. Consider the following options when implementing such restricted access.
Use failover groups and virtual network service endpoints
If you're usingVirtual Network service endpoints and rulesto restrict access to your database, be aware that each virtual network service endpoint applies to only one Azure region. The endpoint doesn't enable other regions to accept communication from the subnet. Therefore, only the client applications deployed in the same region can connect to the primary database. Since a geo-failover results in the SQL Database client sessions being rerouted to a server in a different (secondary) region, these sessions might fail if originated from a client outside of that region. For that reason, the Microsoft managed failover policy can't be enabled if the participating servers are included in the Virtual Network rules. To support manual failover policy, follow these steps:
Provision redundant copies of the frontend components of your application (web service, virtual machines etc.) in the secondary region.
Configurevirtual network rulesindividually for the primary and secondary server.
Enablefrontend failover using a Traffic manager configuration.
Initiate a manual geo-failover when the outage is detected. This option is optimized for applications that require consistent latency between the frontend and the data tier and supports recovery when either frontend, data tier, or both are affected by the outage.
Note
If you're using theread-only listenerto load-balance a read-only workload, make sure this workload is executed in a VM or other resource in the secondary region so it can connect to the secondary database.
Use failover groups and firewall rules
If your business continuity plan requires failover using failover groups, you can restrict access to your SQL Database by using public IP firewall rules. This configuration ensures that a geo-failover won't block connections from frontend components and assumes that the application can tolerate the longer latency between the frontend and the data tier.
To support failover group failover, follow these steps:
Create a public IP.
Create a public load balancerand assign the public IP to it.
Create a virtual network and the virtual machinesfor your front-end components.
Create network security groupand configure inbound connections.
Ensure that the outbound connections are open to Azure SQL Database in a region by using anSql.<Region>service tag.
Sql.<Region>
Create aSQL Database firewall ruleto allow inbound traffic from the public IP address you create in step 1.
For more information on how to configure outbound access and what IP to use in the firewall rules, seeLoad balancer outbound connections.
Important
To guarantee business continuity during regional outages you must ensure geographic redundancy for both frontend components and databases.
Permissions
Permissions for a failover group are managed viaAzure role-based access control (Azure RBAC).
Azure RBAC write access is necessary to create and manage failover groups. TheSQL Server Contributor rolehas all the necessary permissions to manage failover groups.
The following table lists specific permission scopes for Azure SQL Database:
Limitations
Be aware of the following limitations:
Failover groups can't be created between two servers in the same Azure region.
Failover groups support geo-replication of all databases in the group to only one secondary logical server in a different region.
Failover groups can't be renamed. You'll need to delete the group and re-create it with a different name.
Database rename isn't supported for databases in a failover group. You'll need to temporarily delete the failover group to be able to rename a database, or remove the database, from the failover group.
Removing a failover group for a single or pooled database doesn't stop replication, and it doesn't delete the replicated database. You'll need to manually stop geo-replication and delete the database from the secondary server if you wanted to add a single or pooled database back to a failover group after it's been removed. Failing to do either might result in an error similar toThe operation cannot be performed due to multiple errorswhen attempting to add the database to the failover group.
The operation cannot be performed due to multiple errors
Failover group name is subject tonaming restrictions.
When creating a new failover group, or when adding databases to an existing failover group, you canonlydesignate the databases asstandby replicaswhen using the Azure portal- Azure PowerShell and the Azure CLI are not currently available.
Programmatically manage failover groups
Failover groups can also be managed programmatically by using Azure PowerShell, Azure CLI, and REST API. The following tables describe the set of commands available. Failover groups include a set of Azure Resource Manager APIs for management, including theAzure SQL Database REST APIandAzure PowerShell cmdlets. These APIs require the use of resource groups and support Azure role-based access control (Azure RBAC). For more information on how to implement access roles, seeAzure role-based access control (Azure RBAC).
PowerShell
Azure CLI
REST API
Note
It's possible to deploy your failover group across subscriptions by using the-PartnerSubscriptionIdparameter in Azure Powershell starting withAz.SQL 3.11.0. To learn more, review the followingExample.
-PartnerSubscriptionId
Related content
Failover groups overview
Active geo-replication
Feedback
Was this page helpful?
Additional resources