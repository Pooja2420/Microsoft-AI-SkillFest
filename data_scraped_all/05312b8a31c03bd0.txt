Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Configure and manage optional claims in ID tokens, access tokens, and SAML tokens
Article
2025-01-27
9 contributors
In this article
Tokens that Microsoft Entra returns are kept smaller to ensure optimal performance by clients that request them. As a result, several claims are no longer present in the token by default and must be asked for specifically on a per-application basis.
You can configure optional claims for your application through the Microsoft Entra admin center's applications UI or manifest.
Prerequisites
An Azure account with an active subscription.Create an account for free.
Completion ofQuickstart: Register an application
Configure optional claims in your application
Sign in to theMicrosoft Entra admin centeras at least aCloud Application Administrator.
Browse toEntra ID>App registrations.
Choose the application for which you want to configure optional claims based on your scenario and desired outcome.
Proceed with app UI
Proceed with manifest
UnderManage, selectToken configuration.
SelectAdd optional claim.
Select the token type you want to configure, such asAccess.
Select the optional claims to add.
SelectAdd.
UnderManage, selectManifest. A web-based manifest editor opens, allowing you to edit the manifest. Optionally, you can selectDownloadand edit the manifest locally, and then useUploadto reapply it to your application. If the file doesn't containoptionalClaimsproperty, you can add it.The following application manifest entry adds theauth_time,ipaddr, andupnoptional claims to ID, access, and SAML tokens."optionalClaims": {
    "idToken": [
        {
            "name": "auth_time",
            "essential": false
        }
    ],
    "accessToken": [
        {
            "name": "ipaddr",
            "essential": false
        }
    ],
    "saml2Token": [
        {
            "name": "upn",
            "essential": false
        },
        {
            "name": "extension_ab603c56068041afb2f6832e2a17e237_skypeId",
            "source": "user",
            "essential": false
        }
    ]
}
UnderManage, selectManifest. A web-based manifest editor opens, allowing you to edit the manifest. Optionally, you can selectDownloadand edit the manifest locally, and then useUploadto reapply it to your application. If the file doesn't containoptionalClaimsproperty, you can add it.
optionalClaims
The following application manifest entry adds theauth_time,ipaddr, andupnoptional claims to ID, access, and SAML tokens.
auth_time
ipaddr
upn
"optionalClaims": {
    "idToken": [
        {
            "name": "auth_time",
            "essential": false
        }
    ],
    "accessToken": [
        {
            "name": "ipaddr",
            "essential": false
        }
    ],
    "saml2Token": [
        {
            "name": "upn",
            "essential": false
        },
        {
            "name": "extension_ab603c56068041afb2f6832e2a17e237_skypeId",
            "source": "user",
            "essential": false
        }
    ]
}
"optionalClaims": {
    "idToken": [
        {
            "name": "auth_time",
            "essential": false
        }
    ],
    "accessToken": [
        {
            "name": "ipaddr",
            "essential": false
        }
    ],
    "saml2Token": [
        {
            "name": "upn",
            "essential": false
        },
        {
            "name": "extension_ab603c56068041afb2f6832e2a17e237_skypeId",
            "source": "user",
            "essential": false
        }
    ]
}
When finished, selectSave. Now the specified optional claims are included in the tokens for your application.
When finished, selectSave. Now the specified optional claims are included in the tokens for your application.
TheoptionalClaimsobject declares the optional claims requested by an application. An application can configure optional claims that are returned in ID tokens, access tokens, and SAML 2 tokens. The application can configure a different set of optional claims to be returned in each token type.
optionalClaims
idToken
accessToken
saml2Token
If supported by a specific claim, you can also modify the behavior of the optional claim using theadditionalPropertiesfield.
additionalProperties
name
source
essential
additionalProperties
Configure directory extension optional claims
In addition to the standard optional claims set, you can also configure tokens to include Microsoft Graph extensions. For more information, seeAdd custom data to resources using extensions.
Important
Access tokens arealwaysgenerated using the manifest of the resource, not the client. In the request...scope=https://graph.microsoft.com/user.read..., the resource is the Microsoft Graph API.  The access token is created using the Microsoft Graph API manifest, not the client's manifest.  Changing the manifest for your application never causes tokens for the Microsoft Graph API to look different. To validate that youraccessTokenchanges are in effect, request a token for your application, not another app.
...scope=https://graph.microsoft.com/user.read...
accessToken
Optional claims support extension attributes and directory extensions. This feature is useful for attaching more user information that your app can use. For example, other identifiers or important configuration options that the user has set. If your application manifest requests a custom extension and an MSA user logs in to your app, these extensions aren't returned.
Directory extension formatting
When configuring directory extension optional claims using the application manifest, use the full name of the extension (in the format:extension_<appid>_<attributename>). The<appid>is the stripped version of the appId (or Client ID) of the application requesting the claim.
extension_<appid>_<attributename>
<appid>
Within the JWT, these claims are emitted with the following name format:extn.<attributename>. Within the SAML tokens, these claims are emitted with the following URI format:http://schemas.microsoft.com/identity/claims/extn.<attributename>
extn.<attributename>
http://schemas.microsoft.com/identity/claims/extn.<attributename>
Configure groups optional claims
This section covers the configuration options under optional claims for changing the group attributes used in group claims from the default group objectID to attributes synced from on-premises Windows Active Directory. You can configure groups optional claims for your application through the Azure portal or application manifest. Group optional claims are only emitted in the JWT for user principals. Service principals aren't included in group optional claims emitted in the JWT.
Important
The number of groups emitted in a token are limited to 150 for SAML assertions and 200 for JWT, including nested groups. For more information about group limits and important caveats for group claims from on-premises attributes, seeConfigure group claims for applications.
Complete the following steps to configure groups optional claims using the Azure portal:
Select the application for which you want to configure optional claims.
UnderManage, selectToken configuration.
SelectAdd groups claim.
Select the group types to return (Security groups, orDirectory roles,All groups, and/orGroups assigned to the application):TheGroups assigned to the applicationoption includes only groups assigned to the application. TheGroups assigned to the applicationoption is recommended for large organizations due to the group number limit in token. To change the groups assigned to the application, select the application from theEnterprise applicationslist.  SelectUsers and groupsand thenAdd user/group. Select the group(s) you want to add to the application fromUsers and groups.TheAll Groupsoption includesSecurityGroup,DirectoryRole, andDistributionList, but notGroups assigned to the application.
TheGroups assigned to the applicationoption includes only groups assigned to the application. TheGroups assigned to the applicationoption is recommended for large organizations due to the group number limit in token. To change the groups assigned to the application, select the application from theEnterprise applicationslist.  SelectUsers and groupsand thenAdd user/group. Select the group(s) you want to add to the application fromUsers and groups.
TheAll Groupsoption includesSecurityGroup,DirectoryRole, andDistributionList, but notGroups assigned to the application.
Optional: select the specific token type properties to modify the groups claim value to contain on premises group attributes or to change the claim type to a role.
SelectSave.
Complete the following steps to configure groups optional claims through the application manifest:
Select the application for which you want to configure optional claims.
Select the application for which you want to configure optional claims.
UnderManage, selectManifest.
UnderManage, selectManifest.
Add the following entry using the manifest editor:The valid values are:"All" (this option includes SecurityGroup, DirectoryRole, and DistributionList)"SecurityGroup""DirectoryRole""ApplicationGroup" (this option includes only groups that are assigned to the application)For example:"groupMembershipClaims": "SecurityGroup"By default group object IDs are emitted in the group claim value. To modify the claim value to contain on premises group attributes, or to change the claim type to role, use theoptionalClaimsconfiguration as follows:
Add the following entry using the manifest editor:
The valid values are:
"All" (this option includes SecurityGroup, DirectoryRole, and DistributionList)
"SecurityGroup"
"DirectoryRole"
"ApplicationGroup" (this option includes only groups that are assigned to the application)
For example:
"groupMembershipClaims": "SecurityGroup"
"groupMembershipClaims": "SecurityGroup"
By default group object IDs are emitted in the group claim value. To modify the claim value to contain on premises group attributes, or to change the claim type to role, use theoptionalClaimsconfiguration as follows:
optionalClaims
Set group name configuration optional claims.If you want groups in the token to contain the on-premises group attributes in the optional claims section, specify which token type optional claim should be applied to. You also specify the name of optional claim requested and any other properties desired.Multiple token types can be listed:idTokenfor the OIDC ID tokenaccessTokenfor the OAuth access tokenSaml2Tokenfor SAML tokens.TheSaml2Tokentype applies to both SAML1.1 and SAML2.0 format tokens.For each relevant token type, modify the groups claim to use theoptionalClaimssection in the manifest. TheoptionalClaimsschema is as follows:{
    "name": "groups",
    "source": null,
    "essential": false,
    "additionalProperties": []
}Optional claims schemaValuenameMust begroupssourceNot used. Omit or specify null.essentialNot used. Omit or specify false.additionalPropertiesList of other properties. Valid options aresam_account_name,dns_domain_and_sam_account_name,netbios_domain_and_sam_account_name,emit_as_rolesandcloud_displayname.InadditionalPropertiesonly one ofsam_account_name,dns_domain_and_sam_account_name,netbios_domain_and_sam_account_nameare required.  If more than one is present, the first is used and any others ignored. You can also addcloud_displaynameto emit display name of the cloud group. This option works only whengroupMembershipClaimsis set toApplicationGroup.Some applications require group information about the user in the role claim. To change the claim type from a group claim to a role claim, addemit_as_rolestoadditionalProperties.  The group values are emitted in the role claim.Ifemit_as_rolesis used, any application roles configured that the user (or a resource application) is assigned aren't in the role claim.
Set group name configuration optional claims.
If you want groups in the token to contain the on-premises group attributes in the optional claims section, specify which token type optional claim should be applied to. You also specify the name of optional claim requested and any other properties desired.
Multiple token types can be listed:
idTokenfor the OIDC ID token
idToken
accessTokenfor the OAuth access token
accessToken
Saml2Tokenfor SAML tokens.
Saml2Token
TheSaml2Tokentype applies to both SAML1.1 and SAML2.0 format tokens.
Saml2Token
For each relevant token type, modify the groups claim to use theoptionalClaimssection in the manifest. TheoptionalClaimsschema is as follows:
optionalClaims
optionalClaims
{
    "name": "groups",
    "source": null,
    "essential": false,
    "additionalProperties": []
}
{
    "name": "groups",
    "source": null,
    "essential": false,
    "additionalProperties": []
}
name
groups
source
essential
additionalProperties
sam_account_name
dns_domain_and_sam_account_name
netbios_domain_and_sam_account_name
emit_as_roles
cloud_displayname
InadditionalPropertiesonly one ofsam_account_name,dns_domain_and_sam_account_name,netbios_domain_and_sam_account_nameare required.  If more than one is present, the first is used and any others ignored. You can also addcloud_displaynameto emit display name of the cloud group. This option works only whengroupMembershipClaimsis set toApplicationGroup.
additionalProperties
sam_account_name
dns_domain_and_sam_account_name
netbios_domain_and_sam_account_name
cloud_displayname
groupMembershipClaims
ApplicationGroup
Some applications require group information about the user in the role claim. To change the claim type from a group claim to a role claim, addemit_as_rolestoadditionalProperties.  The group values are emitted in the role claim.
emit_as_roles
additionalProperties
Ifemit_as_rolesis used, any application roles configured that the user (or a resource application) is assigned aren't in the role claim.
emit_as_roles
The following examples show the manifest configuration for group claims:
Emit groups as group names in OAuth access tokens indnsDomainName\sAMAccountNameformat.
dnsDomainName\sAMAccountName
"optionalClaims": {
    "accessToken": [
        {
            "name": "groups",
            "additionalProperties": [
                "dns_domain_and_sam_account_name"
            ]
        }
    ]
}
"optionalClaims": {
    "accessToken": [
        {
            "name": "groups",
            "additionalProperties": [
                "dns_domain_and_sam_account_name"
            ]
        }
    ]
}
Emit group names to be returned innetbiosDomain\sAMAccountNameformat as the roles claim in SAML and OIDC ID tokens.
netbiosDomain\sAMAccountName
"optionalClaims": {
    "saml2Token": [
        {
            "name": "groups",
            "additionalProperties": [
                "netbios_domain_and_sam_account_name",
                "emit_as_roles"
            ]
        }
    ],
    "idToken": [
        {
            "name": "groups",
            "additionalProperties": [
                "netbios_domain_and_sam_account_name",
                "emit_as_roles"
            ]
        }
    ]
}
"optionalClaims": {
    "saml2Token": [
        {
            "name": "groups",
            "additionalProperties": [
                "netbios_domain_and_sam_account_name",
                "emit_as_roles"
            ]
        }
    ],
    "idToken": [
        {
            "name": "groups",
            "additionalProperties": [
                "netbios_domain_and_sam_account_name",
                "emit_as_roles"
            ]
        }
    ]
}
Emit group names in the format ofsam_account_namefor on-premises synced groups andcloud_displayname for cloud groups in SAML and OIDC ID tokens for the groups assigned to the application.
sam_account_name
cloud_display
"groupMembershipClaims": "ApplicationGroup",
"optionalClaims": {
    "saml2Token": [
        {
            "name": "groups",
            "additionalProperties": [
                "sam_account_name",
                "cloud_displayname"
            ]
        }
    ],
    "idToken": [
        {
            "name": "groups",
            "additionalProperties": [
                "sam_account_name",
                "cloud_displayname"
            ]
        }
    ]
}
"groupMembershipClaims": "ApplicationGroup",
"optionalClaims": {
    "saml2Token": [
        {
            "name": "groups",
            "additionalProperties": [
                "sam_account_name",
                "cloud_displayname"
            ]
        }
    ],
    "idToken": [
        {
            "name": "groups",
            "additionalProperties": [
                "sam_account_name",
                "cloud_displayname"
            ]
        }
    ]
}
Optional claims example
There are multiple options available for updating the properties on an application's identity configuration to enable and configure optional claims:
You can use the Azure portal
You can use the manifest.
It's also possible to write an application that uses theMicrosoft Graph APIto update your application. TheOptionalClaimstype in the Microsoft Graph API reference guide can help you with configuring the optional claims.
In the following example, the Azure portal and manifest are used to add optional claims to the access, ID, and SAML tokens intended for your application. Different optional claims are added to each type of token that the application can receive:
The ID tokens contain the UPN for federated users in the full form (<upn>_<homedomain>#EXT#@<resourcedomain>).
<upn>_<homedomain>#EXT#@<resourcedomain>
The access tokens that other clients request for this application includes theauth_timeclaim.
auth_time
The SAML tokens contain theskypeIddirectory schema extension (in this example, the app ID for this app isab603c56068041afb2f6832e2a17e237). The SAML token exposes the Skype ID asextension_ab603c56068041afb2f6832e2a17e237_skypeId.
skypeId
ab603c56068041afb2f6832e2a17e237
extension_ab603c56068041afb2f6832e2a17e237_skypeId
Configure claims in the Azure portal:
Select the application for which you want to configure optional claims.
UnderManage, selectToken configuration.
SelectAdd optional claim, select theIDtoken type, selectupnfrom the list of claims, and then selectAdd.
SelectAdd optional claim, select theAccesstoken type, selectauth_timefrom the list of claims, then selectAdd.
From the Token Configuration overview screen, select the pencil icon next toupn, select theExternally authenticatedtoggle, and then selectSave.
SelectAdd optional claim, select theSAMLtoken type, selectextn.skypeIDfrom the list of claims (only applicable if you've created a Microsoft Entra user object called skypeID), and then selectAdd.
Configure claims in the manifest:
Select the application for which you want to configure optional claims.
Select the application for which you want to configure optional claims.
UnderManage, selectManifestto open the inline manifest editor.
UnderManage, selectManifestto open the inline manifest editor.
You can directly edit the manifest using this editor. The manifest follows the schema for theApplication entity, and automatically formats the manifest once saved. New elements are added to theoptionalClaimsproperty."optionalClaims": {
    "idToken": [
        {
            "name": "upn",
            "essential": false,
            "additionalProperties": [
                "include_externally_authenticated_upn"
            ]
        }
    ],
    "accessToken": [
        {
            "name": "auth_time",
            "essential": false
        }
    ],
    "saml2Token": [
        {
            "name": "extension_ab603c56068041afb2f6832e2a17e237_skypeId",
            "source": "user",
            "essential": true
        }
    ]
}
You can directly edit the manifest using this editor. The manifest follows the schema for theApplication entity, and automatically formats the manifest once saved. New elements are added to theoptionalClaimsproperty.
optionalClaims
"optionalClaims": {
    "idToken": [
        {
            "name": "upn",
            "essential": false,
            "additionalProperties": [
                "include_externally_authenticated_upn"
            ]
        }
    ],
    "accessToken": [
        {
            "name": "auth_time",
            "essential": false
        }
    ],
    "saml2Token": [
        {
            "name": "extension_ab603c56068041afb2f6832e2a17e237_skypeId",
            "source": "user",
            "essential": true
        }
    ]
}
"optionalClaims": {
    "idToken": [
        {
            "name": "upn",
            "essential": false,
            "additionalProperties": [
                "include_externally_authenticated_upn"
            ]
        }
    ],
    "accessToken": [
        {
            "name": "auth_time",
            "essential": false
        }
    ],
    "saml2Token": [
        {
            "name": "extension_ab603c56068041afb2f6832e2a17e237_skypeId",
            "source": "user",
            "essential": true
        }
    ]
}
When you're finished updating the manifest, selectSaveto save the manifest.
When you're finished updating the manifest, selectSaveto save the manifest.
Limitation
An application can issue a maximum number of 10 extension attributes as optional claims.
Related content
Access tokens
Application manifest
ID tokens
Optional claims reference
Feedback
Was this page helpful?
Additional resources