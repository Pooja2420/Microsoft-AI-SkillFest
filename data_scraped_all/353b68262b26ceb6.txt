Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Tutorial: Create a hierarchy of IoT Edge devices
Article
2024-12-02
16 contributors
In this article
Applies to:IoT Edge 1.5
Important
IoT Edge 1.5 LTS is thesupported release. IoT Edge 1.4 LTS is end of life as of November 12, 2024. If you are on an earlier release, seeUpdate IoT Edge.
You can deploy Azure IoT Edge nodes across networks organized in hierarchical layers. Each layer in a hierarchy is a gateway device that handles messages and requests from devices in the layer beneath it. This configuration is also known asnested edge.
You can structure a hierarchy of devices so that only the top layer has connectivity to the cloud, and the lower layers can only communicate with adjacent upstream and downstream layers. This network layering is the foundation of most industrial networks that follow theISA-95 standard.
This tutorial walks you through creating a hierarchy of IoT Edge devices, deploying IoT Edge runtime containers to your devices, and configuring your devices locally. You do the following tasks:
Create and define the relationships in a hierarchy of IoT Edge devices.
Configure the IoT Edge runtime on the devices in your hierarchy.
Install consistent certificates across your device hierarchy.
Add workloads to the devices in your hierarchy.
Use theIoT Edge API Proxy moduleto securely route HTTP traffic over a single port from your lower layer devices.
Tip
This tutorial includes a mixture of manual and automated steps to provide a showcase of nested IoT Edge features.
If you'd like an entirely automated look at setting up a hierarchy of IoT Edge devices, follow the scriptedAzure IoT Edge for Industrial IoT sample. This scripted scenario deploys Azure virtual machines as preconfigured devices to simulate a factory environment.
If you'd like an in-depth look at the manual steps to create and manage a hierarchy of IoT Edge devices, seethe how-to guide on IoT Edge device gateway hierarchies.
In this tutorial, the following network layers are defined:
Top layer: IoT Edge devices at this layer can connect directly to the cloud.
Top layer: IoT Edge devices at this layer can connect directly to the cloud.
Lower layers: IoT Edge devices at layers below the top layer can't connect directly to the cloud. They need to go through one or more intermediary IoT Edge devices to send and receive data.
Lower layers: IoT Edge devices at layers below the top layer can't connect directly to the cloud. They need to go through one or more intermediary IoT Edge devices to send and receive data.
This tutorial uses a two device hierarchy for simplicity. Thetop layer devicerepresents a device at the top layer of the hierarchy that can connect directly to the cloud. This device is referred to as theparent device. Thelower layer devicerepresents a device at the lower layer of the hierarchy that can't connect directly to the cloud. You can add more devices to represent your production environment, as needed. Devices at lower layers are referred to aschild devices.

Note
A child device can be a downstream device or a gateway device in a nested topology.
Prerequisites
To create a hierarchy of IoT Edge devices, you need:
A computer (Windows or Linux) with internet connectivity.
A computer (Windows or Linux) with internet connectivity.
An Azure account with a valid subscription. If you don't have anAzure subscription, create afree accountbefore you begin.
An Azure account with a valid subscription. If you don't have anAzure subscription, create afree accountbefore you begin.
A free or standard tierIoT Hubin Azure.
A free or standard tierIoT Hubin Azure.
A Bash shell in Azure Cloud Shell usingAzure CLIwith theAzure IoT extensioninstalled. This tutorial uses theAzure Cloud Shell. To see your current versions of the Azure CLI modules and extensions, runaz version.
A Bash shell in Azure Cloud Shell usingAzure CLIwith theAzure IoT extensioninstalled. This tutorial uses theAzure Cloud Shell. To see your current versions of the Azure CLI modules and extensions, runaz version.
Two Linux devices to configure your hierarchy. If you don't have devices available, you can create Azure virtual machines for each device in your hierarchy using theIoT Edge Azure Resource Manager template. IoT Edge version 1.5 is preinstalled with this Resource Manager template. If you're installing IoT Edge on your own devices, seeInstall Azure IoT Edge for LinuxorUpdate IoT Edge.
Two Linux devices to configure your hierarchy. If you don't have devices available, you can create Azure virtual machines for each device in your hierarchy using theIoT Edge Azure Resource Manager template. IoT Edge version 1.5 is preinstalled with this Resource Manager template. If you're installing IoT Edge on your own devices, seeInstall Azure IoT Edge for LinuxorUpdate IoT Edge.
To simplify network communication between devices, the virtual machines should be on the same virtual network or use virtual network peering.
To simplify network communication between devices, the virtual machines should be on the same virtual network or use virtual network peering.
Make sure that the following ports are open inbound for all devices except the lowest layer device: 443, 5671, 8883:443: Used between parent and child edge hubs for REST API calls and to pull docker container images.5671, 8883: Used for AMQP and MQTT.For more information, seehow to open ports to a virtual machine with the Azure portal.TipYou use the SSH handle and either the FQDN or IP address of each virtual machine for configuration in later steps, so keep track of this information.
You can find the IP address and FQDN on the Azure portal. For the IP address, navigate to your list of virtual machines and note thePublic IP address field. For the FQDN, go to each virtual machine'soverviewpage and look for theDNS namefield. For the SSH handle, go to each virtual machine'sconnectpage.
Make sure that the following ports are open inbound for all devices except the lowest layer device: 443, 5671, 8883:
443: Used between parent and child edge hubs for REST API calls and to pull docker container images.
5671, 8883: Used for AMQP and MQTT.
For more information, seehow to open ports to a virtual machine with the Azure portal.
Tip
You use the SSH handle and either the FQDN or IP address of each virtual machine for configuration in later steps, so keep track of this information.
You can find the IP address and FQDN on the Azure portal. For the IP address, navigate to your list of virtual machines and note thePublic IP address field. For the FQDN, go to each virtual machine'soverviewpage and look for theDNS namefield. For the SSH handle, go to each virtual machine'sconnectpage.
Create your IoT Edge device hierarchy
IoT Edge devices make up the layers of your hierarchy. This tutorial creates a hierarchy of two IoT Edge devices: thetop layer deviceand thelower layer device. You can create more downstream devices as needed.
To create and configure your hierarchy of IoT Edge devices, you use theaz iot edge devices createAzure CLI command. The command simplifies the configuration of the hierarchy by automating and condensing several steps:
Creates devices in your IoT Hub
Sets the parent-child relationships to authorize communication between devices
Applies the deployment manifest to each device
Generates a chain of certificates for each device to establish secure communication between them
Generates configuration files for each device
Create device configuration
You create a group of nested edge devices with containing a parent device with one child device. In this tutorial, we use basic sample deployment manifests. For other scenario examples, review theconfiguration example templates.
Before you use theaz iot edge devices createcommand, you need to define the deployment manifest for the top layer and lower layer devices. Download thedeploymentTopLayer.jsonsample file to your local machine.The top layer device deployment manifest defines theIoT Edge API Proxy moduleand declares theroutefrom the lower layer device to IoT Hub.
Before you use theaz iot edge devices createcommand, you need to define the deployment manifest for the top layer and lower layer devices. Download thedeploymentTopLayer.jsonsample file to your local machine.
The top layer device deployment manifest defines theIoT Edge API Proxy moduleand declares theroutefrom the lower layer device to IoT Hub.
Download thedeploymentLowerLayer.jsonsample file to your local machine.The lower layer device deployment manifest includes the simulated temperature sensor module and declares therouteto the top layer device. You can see withinsystemModulessection that the runtime modules are set to pull from$upstream:443, instead ofmcr.microsoft.com. Thelower layer devicesends Docker image requests theIoT Edge API Proxymodule on port 443, as it can't directly pull the images from the cloud. The other module deployed to thelower layer device, theSimulated Temperature Sensormodule, also makes its image request to$upstream:443.For more information on how to create a lower layer deployment manifest, seeConnect Azure IoT Edge devices to create a hierarchy.
Download thedeploymentLowerLayer.jsonsample file to your local machine.
The lower layer device deployment manifest includes the simulated temperature sensor module and declares therouteto the top layer device. You can see withinsystemModulessection that the runtime modules are set to pull from$upstream:443, instead ofmcr.microsoft.com. Thelower layer devicesends Docker image requests theIoT Edge API Proxymodule on port 443, as it can't directly pull the images from the cloud. The other module deployed to thelower layer device, theSimulated Temperature Sensormodule, also makes its image request to$upstream:443.
$upstream:443
For more information on how to create a lower layer deployment manifest, seeConnect Azure IoT Edge devices to create a hierarchy.
In theAzure Cloud Shell, use theaz iot edge devices createAzure CLI command to create devices in IoT Hub and configuration bundles for each device in your hierarchy. Replace the following placeholders with the appropriate values:PlaceholderDescription<hub-name>The name of your IoT Hub.<config-bundle-output-path>The folder path where you want to save the configuration bundles.<parent-device-name>Thetop layerparent device ID name.<parent-deployment-manifest>The parent device deployment manifest file.<parent-fqdn-or-ip>Parent device fully qualified domain name (FQDN) or IP address.<child-device-name>Thelower layerchild device ID name.<child-deployment-manifest>The child device deployment manifest file.<child-fqdn-or-ip>Child device fully qualified domain name (FQDN) or IP address.az iot edge devices create \
   --hub-name <hub-name> \
   --output-path <config-bundle-output-path> \
   --default-edge-agent "mcr.microsoft.com/azureiotedge-agent:1.5" \
   --device id=<parent-device-name> \
      deployment=<parent-deployment-manifest> \
      hostname=<parent-fqdn-or-ip> \
   --device id=child-1 \
      parent=parent-1 \
      deployment=<child-deployment-manifest> \
      hostname=<child-fqdn-or-ip>For example, the following command creates a hierarchy of two IoT Edge devices in IoT Hub. A top layer device namedparent-1and a lower layer device namedchild-1*. The command saves the configuration bundles for each device in theoutputdirectory. The command also generates self-signed test certificates and includes them in the configuration bundle. The configuration bundles are installed on each device using an install script.az iot edge devices create \
   --hub-name my-iot-hub \
   --output-path ./output \
   --default-edge-agent "mcr.microsoft.com/azureiotedge-agent:1.5" \
   --device id=parent-1 \
      deployment=./deploymentTopLayer.json \
      hostname=10.0.0.4 \
   --device id=child-1 \
      parent=parent-1 \
      deployment=./deploymentLowerLayer.json \
      hostname=10.1.0.4
In theAzure Cloud Shell, use theaz iot edge devices createAzure CLI command to create devices in IoT Hub and configuration bundles for each device in your hierarchy. Replace the following placeholders with the appropriate values:
az iot edge devices create \
   --hub-name <hub-name> \
   --output-path <config-bundle-output-path> \
   --default-edge-agent "mcr.microsoft.com/azureiotedge-agent:1.5" \
   --device id=<parent-device-name> \
      deployment=<parent-deployment-manifest> \
      hostname=<parent-fqdn-or-ip> \
   --device id=child-1 \
      parent=parent-1 \
      deployment=<child-deployment-manifest> \
      hostname=<child-fqdn-or-ip>
az iot edge devices create \
   --hub-name <hub-name> \
   --output-path <config-bundle-output-path> \
   --default-edge-agent "mcr.microsoft.com/azureiotedge-agent:1.5" \
   --device id=<parent-device-name> \
      deployment=<parent-deployment-manifest> \
      hostname=<parent-fqdn-or-ip> \
   --device id=child-1 \
      parent=parent-1 \
      deployment=<child-deployment-manifest> \
      hostname=<child-fqdn-or-ip>
For example, the following command creates a hierarchy of two IoT Edge devices in IoT Hub. A top layer device namedparent-1and a lower layer device namedchild-1*. The command saves the configuration bundles for each device in theoutputdirectory. The command also generates self-signed test certificates and includes them in the configuration bundle. The configuration bundles are installed on each device using an install script.
az iot edge devices create \
   --hub-name my-iot-hub \
   --output-path ./output \
   --default-edge-agent "mcr.microsoft.com/azureiotedge-agent:1.5" \
   --device id=parent-1 \
      deployment=./deploymentTopLayer.json \
      hostname=10.0.0.4 \
   --device id=child-1 \
      parent=parent-1 \
      deployment=./deploymentLowerLayer.json \
      hostname=10.1.0.4
az iot edge devices create \
   --hub-name my-iot-hub \
   --output-path ./output \
   --default-edge-agent "mcr.microsoft.com/azureiotedge-agent:1.5" \
   --device id=parent-1 \
      deployment=./deploymentTopLayer.json \
      hostname=10.0.0.4 \
   --device id=child-1 \
      parent=parent-1 \
      deployment=./deploymentLowerLayer.json \
      hostname=10.1.0.4
After running the command, you can find the device configuration bundles in the output directory. For example:
PS C:\nested-edge\output> dir

   Directory: C:\nested-edge\output

Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
-a---           4/10/2023  4:12 PM           7192 child-1.tgz
-a---           4/10/2023  4:12 PM           6851 parent-1.tgz
PS C:\nested-edge\output> dir

   Directory: C:\nested-edge\output

Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
-a---           4/10/2023  4:12 PM           7192 child-1.tgz
-a---           4/10/2023  4:12 PM           6851 parent-1.tgz
You can use your own certificates and keys passed as arguments to the command or create a more complex device hierarchy. For more information about creating nested devices using theazcommand, seeaz iot edge devices create. If you're unfamiliar with how certificates are used in a gateway scenario, seethe how-to guide's certificate section.
In this tutorial, you use inline arguments to create the devices and configuration bundles. You can also use a configuration file in YAML or JSON format. For a sample configuration file, see the examplesample_devices_config.yaml.
Configure the IoT Edge runtime
In addition to the provisioning of your devices, the configuration steps establish trusted communication between the devices in your hierarchy using the certificates you created earlier. The steps also begin to establish the network structure of your hierarchy. The top layer device maintains internet connectivity, allowing it to pull images for its runtime from the cloud, while lower layer devices route through the top layer device to access these images.
To configure the IoT Edge runtime, you need to apply the configuration bundles to your devices. The configurations differ between thetop layer deviceand alower layer device, so be mindful of the device configuration file you're applying to each device.
Copy each configuration bundle archive file to its corresponding device. You can use a USB drive, a service likeAzure Key Vault, or with a function likeSecure file copy. Choose one of these methods that best matches your scenario.For example, to send theparent-1configuration bundle to the home directory on theparent-1VM, you could use a command like the following example:scp ./output/parent-1.tgz admin@parent-1-vm.westus.cloudapp.azure.com:~
Copy each configuration bundle archive file to its corresponding device. You can use a USB drive, a service likeAzure Key Vault, or with a function likeSecure file copy. Choose one of these methods that best matches your scenario.
For example, to send theparent-1configuration bundle to the home directory on theparent-1VM, you could use a command like the following example:
scp ./output/parent-1.tgz admin@parent-1-vm.westus.cloudapp.azure.com:~
scp ./output/parent-1.tgz admin@parent-1-vm.westus.cloudapp.azure.com:~
On each device, extract the configuration bundle archive. For example, use thetarcommand to extract theparent-1archive file:tar -xzf ./parent-1.tgz
On each device, extract the configuration bundle archive. For example, use thetarcommand to extract theparent-1archive file:
tar -xzf ./parent-1.tgz
tar -xzf ./parent-1.tgz
Set execute permission for the install script.chmod +x install.sh
Set execute permission for the install script.
chmod +x install.sh
chmod +x install.sh
On each device, apply the configuration bundle to the device using root permission:sudo ./install.shIf you want a closer look at what modifications are being made to your device's configuration file, seeConnect Azure IoT Edge devices together to create a hierarchy.
On each device, apply the configuration bundle to the device using root permission:
sudo ./install.sh
sudo ./install.sh

If you want a closer look at what modifications are being made to your device's configuration file, seeConnect Azure IoT Edge devices together to create a hierarchy.
To verify your devices are configured correctly, run the configuration and connectivity checks on your devices.
sudo iotedge check
sudo iotedge check
admin@child-1-vm:~$ sudo iotedge check

Configuration checks (aziot-identity-service)
---------------------------------------------
â keyd configuration is well-formed - OK
â certd configuration is well-formed - OK
â tpmd configuration is well-formed - OK
â identityd configuration is well-formed - OK
â daemon configurations up-to-date with config.toml - OK
â identityd config toml file specifies a valid hostname - OK
â host time is close to reference time - OK
â preloaded certificates are valid - OK
â keyd is running - OK
â certd is running - OK
â identityd is running - OK
â read all preloaded certificates from the Certificates Service - OK
â read all preloaded key pairs from the Keys Service - OK
â check all EST server URLs utilize HTTPS - OK
â ensure all preloaded certificates match preloaded private keys with the same ID - OK

Connectivity checks (aziot-identity-service)
--------------------------------------------
â host can connect to and perform TLS handshake with iothub AMQP port - OK
â host can connect to and perform TLS handshake with iothub HTTPS / WebSockets port - OK
â host can connect to and perform TLS handshake with iothub MQTT port - OK

Configuration checks
--------------------
â aziot-edged configuration is well-formed - OK
â configuration up-to-date with config.toml - OK
â container engine is installed and functional - OK
â configuration has correct parent_hostname - OK
â configuration has correct URIs for daemon mgmt endpoint - OK
â container time is close to host time - OK
â¼ DNS server - Warning
    Container engine is not configured with DNS server setting, which may impact connectivity to IoT Hub.
    Please see https://aka.ms/iotedge-prod-checklist-dns for best practices.
    You can ignore this warning if you are setting DNS server per module in the Edge deployment.
â¼ production readiness: logs policy - Warning
    Container engine is not configured to rotate module logs which may cause it run out of disk space.
    Please see https://aka.ms/iotedge-prod-checklist-logs for best practices.
    You can ignore this warning if you are setting log policy per module in the Edge deployment.
â¼ production readiness: Edge Agent's storage directory is persisted on the host filesystem - Warning
    The edgeAgent module is not configured to persist its /tmp/edgeAgent directory on the host filesystem.
    Data might be lost if the module is deleted or updated.
    Please see https://aka.ms/iotedge-storage-host for best practices.
â¼ production readiness: Edge Hub's storage directory is persisted on the host filesystem - Warning
    The edgeHub module is not configured to persist its /tmp/edgeHub directory on the host filesystem.
    Data might be lost if the module is deleted or updated.
    Please see https://aka.ms/iotedge-storage-host for best practices.
â Agent image is valid and can be pulled from upstream - OK
â proxy settings are consistent in aziot-edged, aziot-identityd, moby daemon and config.toml - OK

Connectivity checks
-------------------
â container on the default network can connect to upstream AMQP port - OK
â container on the default network can connect to upstream HTTPS / WebSockets port - OK
â container on the IoT Edge module network can connect to upstream AMQP port - OK
â container on the IoT Edge module network can connect to upstream HTTPS / WebSockets port - OK
30 check(s) succeeded.
4 check(s) raised warnings. Re-run with --verbose for more details.
2 check(s) were skipped due to errors from other checks. Re-run with --verbose for more details.
admin@child-1-vm:~$ sudo iotedge check

Configuration checks (aziot-identity-service)
---------------------------------------------
â keyd configuration is well-formed - OK
â certd configuration is well-formed - OK
â tpmd configuration is well-formed - OK
â identityd configuration is well-formed - OK
â daemon configurations up-to-date with config.toml - OK
â identityd config toml file specifies a valid hostname - OK
â host time is close to reference time - OK
â preloaded certificates are valid - OK
â keyd is running - OK
â certd is running - OK
â identityd is running - OK
â read all preloaded certificates from the Certificates Service - OK
â read all preloaded key pairs from the Keys Service - OK
â check all EST server URLs utilize HTTPS - OK
â ensure all preloaded certificates match preloaded private keys with the same ID - OK

Connectivity checks (aziot-identity-service)
--------------------------------------------
â host can connect to and perform TLS handshake with iothub AMQP port - OK
â host can connect to and perform TLS handshake with iothub HTTPS / WebSockets port - OK
â host can connect to and perform TLS handshake with iothub MQTT port - OK

Configuration checks
--------------------
â aziot-edged configuration is well-formed - OK
â configuration up-to-date with config.toml - OK
â container engine is installed and functional - OK
â configuration has correct parent_hostname - OK
â configuration has correct URIs for daemon mgmt endpoint - OK
â container time is close to host time - OK
â¼ DNS server - Warning
    Container engine is not configured with DNS server setting, which may impact connectivity to IoT Hub.
    Please see https://aka.ms/iotedge-prod-checklist-dns for best practices.
    You can ignore this warning if you are setting DNS server per module in the Edge deployment.
â¼ production readiness: logs policy - Warning
    Container engine is not configured to rotate module logs which may cause it run out of disk space.
    Please see https://aka.ms/iotedge-prod-checklist-logs for best practices.
    You can ignore this warning if you are setting log policy per module in the Edge deployment.
â¼ production readiness: Edge Agent's storage directory is persisted on the host filesystem - Warning
    The edgeAgent module is not configured to persist its /tmp/edgeAgent directory on the host filesystem.
    Data might be lost if the module is deleted or updated.
    Please see https://aka.ms/iotedge-storage-host for best practices.
â¼ production readiness: Edge Hub's storage directory is persisted on the host filesystem - Warning
    The edgeHub module is not configured to persist its /tmp/edgeHub directory on the host filesystem.
    Data might be lost if the module is deleted or updated.
    Please see https://aka.ms/iotedge-storage-host for best practices.
â Agent image is valid and can be pulled from upstream - OK
â proxy settings are consistent in aziot-edged, aziot-identityd, moby daemon and config.toml - OK

Connectivity checks
-------------------
â container on the default network can connect to upstream AMQP port - OK
â container on the default network can connect to upstream HTTPS / WebSockets port - OK
â container on the IoT Edge module network can connect to upstream AMQP port - OK
â container on the IoT Edge module network can connect to upstream HTTPS / WebSockets port - OK
30 check(s) succeeded.
4 check(s) raised warnings. Re-run with --verbose for more details.
2 check(s) were skipped due to errors from other checks. Re-run with --verbose for more details.
On yourtop layer device, expect to see an output with several passing evaluations. You may see some warnings about logs policies and, depending on your network, DNS policies.
Device module deployment
The module deployment for your devices were applied when the devices were created in IoT Hub. Theaz iot edge devices createcommand applied the deployment JSON files for the top and lower layer devices.
After those deployments completed, thelower layer deviceuses theIoT Edge API Proxymodule to pull its necessary images.
In addition the runtime modulesIoT Edge AgentandIoT Edge Hub, thetop layer devicereceives theDocker registrymodule andIoT Edge API Proxymodule.
TheDocker registrymodule points to an existing Azure Container Registry. In this case,REGISTRY_PROXY_REMOTEURLpoints to the Microsoft Container Registry. By default,Docker registrylistens on port 5000.
REGISTRY_PROXY_REMOTEURL
TheIoT Edge API Proxymodule routes HTTP requests to other modules, allowing lower layer devices to pull container images or push blobs to storage. In this tutorial, it communicates on port 443 and is configured to send Docker container image pull requests route to yourDocker registrymodule on port 5000. Also, any blob storage upload requests route to module AzureBlobStorageonIoTEdge on port 11002. For more information about theIoT Edge API Proxymodule and how to configure it, see the module'show-to guide.
If you'd like a look at how to create a deployment like this through the Azure portal or Azure Cloud Shell, seetop layer device section of the how-to guide.
You can view the status of your modules using the command:
az iot hub module-twin show --device-id <edge-device-id> --module-id '$edgeAgent' --hub-name <iot-hub-name> --query "properties.reported.[systemModules, modules]"
az iot hub module-twin show --device-id <edge-device-id> --module-id '$edgeAgent' --hub-name <iot-hub-name> --query "properties.reported.[systemModules, modules]"
This command outputs all the edgeAgent reported properties. Here are some helpful ones for monitoring the status of the device:runtime status,runtime start time,runtime last exit time,runtime restart count.
You can also see the status of your modules on theAzure portal. Navigate to theDevicessection of your IoT Hub to see your devices and modules.
View generated data
TheSimulated Temperature Sensormodule that you pushed generates sample environment data. It sends messages that include ambient temperature and humidity, machine temperature and pressure, and a timestamp.
You can also view these messages through theAzure Cloud Shell:
az iot hub monitor-events -n <iot-hub-name> -d <lower-layer-device-name>
az iot hub monitor-events -n <iot-hub-name> -d <lower-layer-device-name>
For example:
az iot hub monitor-events -n my-iot-hub -d child-1
az iot hub monitor-events -n my-iot-hub -d child-1
{
    "event": {
        "origin": "child-1",
        "module": "simulatedTemperatureSensor",
        "interface": "",
        "component": "",
        "payload": "{\"machine\":{\"temperature\":104.29281270901808,\"pressure\":10.48905461241978},\"ambient\":{\"temperature\":21.086561171611102,\"humidity\":24},\"timeCreated\":\"2023-04-17T21:50:30.1082487Z\"}"
    }
}
{
    "event": {
        "origin": "child-1",
        "module": "simulatedTemperatureSensor",
        "interface": "",
        "component": "",
        "payload": "{\"machine\":{\"temperature\":104.29281270901808,\"pressure\":10.48905461241978},\"ambient\":{\"temperature\":21.086561171611102,\"humidity\":24},\"timeCreated\":\"2023-04-17T21:50:30.1082487Z\"}"
    }
}
Troubleshooting
Run theiotedge checkcommand to verify the configuration and to troubleshoot errors.
iotedge check
You can runiotedge checkin a nested hierarchy, even if the downstream machines don't have direct internet access.
iotedge check
When you runiotedge checkfrom the lower layer, the program tries to pull the image from the parent through port 443.
iotedge check
Theazureiotedge-diagnosticsvalue is pulled from the container registry that's linked with the registry module. This tutorial has it set by default tohttps://mcr.microsoft.com:
azureiotedge-diagnostics
REGISTRY_PROXY_REMOTEURL
https://mcr.microsoft.com
If you're using a private container registry, make sure that all the images (IoTEdgeAPIProxy, edgeAgent, edgeHub, Simulated Temperature Sensor, and diagnostics) are present in the container registry.
If a downstream device has a different processor architecture from the parent device, you need the appropriate architecture image. You can use aconnected registryor you can specify the correct image for theedgeAgentandedgeHubmodules in the downstream deviceconfig.tomlfile. For example, if the parent device is running on an ARM32v7  architecture and the downstream device is running on an AMD64 architecture, you need to specify the matching version and architecture image tag in the downstream deviceconfig.tomlfile.
[agent.config]
image = "$upstream:443/azureiotedge-agent:1.5.0-linux-amd64"

"systemModules": {
   "edgeAgent": {
      "settings": {
            "image": "$upstream:443/azureiotedge-agent:1.5.0-linux-amd64"
      },
   },
   "edgeHub": {
      "settings": {
            "image": "$upstream:443/azureiotedge-hub:1.5.0-linux-amd64",
      }
   }
}
[agent.config]
image = "$upstream:443/azureiotedge-agent:1.5.0-linux-amd64"

"systemModules": {
   "edgeAgent": {
      "settings": {
            "image": "$upstream:443/azureiotedge-agent:1.5.0-linux-amd64"
      },
   },
   "edgeHub": {
      "settings": {
            "image": "$upstream:443/azureiotedge-hub:1.5.0-linux-amd64",
      }
   }
}
Clean up resources
You can delete the local configurations and the Azure resources that you created in this article to avoid charges.
To delete the resources:
Sign in to theAzure portaland selectResource groups.
Sign in to theAzure portaland selectResource groups.
Select the name of the resource group that contains your IoT Edge test resources.
Select the name of the resource group that contains your IoT Edge test resources.
Review the list of resources contained in your resource group. If you want to delete all of them, you can selectDelete resource group. If you want to delete only some of them, you can select each resource to delete them individually.
Review the list of resources contained in your resource group. If you want to delete all of them, you can selectDelete resource group. If you want to delete only some of them, you can select each resource to delete them individually.
Next steps
In this tutorial, you configured two IoT Edge devices as gateways and set one as the parent device of the other. Then, you pulled a container image onto the downstream device through a gateway using the IoT Edge API Proxy module. Seethe how-to guide on the proxy module's useif you want to learn more.
To learn more about using gateways to create hierarchical layers of IoT Edge devices, see the following article.
Connect Azure IoT Edge devices to create a hierarchy
Feedback
Was this page helpful?
Additional resources