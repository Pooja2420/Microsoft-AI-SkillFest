Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Export settings from App Configuration with Azure Pipelines
Article
2024-11-20
1 contributor
In this article
The Azure App Configuration Export task exports key-values from your App Configuration store and sets them as Azure pipeline variables, which subsequent tasks can consume. This task complements the Azure App Configuration Import task that imports key-values from a configuration file into your App Configuration store. For more information, seeImport settings to App Configuration with Azure Pipelines.
Prerequisites
Azure subscription -create one for free
App Configuration store -create one for free
Azure DevOps project -create one for free
Azure Pipelines agent version 2.144.0or later andNode version 16or later for running the task on self-hosted agents.
Create a service connection
Aservice connectiongives you access to resources in your Azure subscription from your Azure DevOps project.
In Azure DevOps, go to the project that contains your target pipeline. In the lower-left corner, selectProject settings.
In Azure DevOps, go to the project that contains your target pipeline. In the lower-left corner, selectProject settings.
UnderPipelines, selectService connections. In the upper-right corner, selectNew service connection.
UnderPipelines, selectService connections. In the upper-right corner, selectNew service connection.
InNew service connection, selectAzure Resource Manager.
InNew service connection, selectAzure Resource Manager.

In theAuthentication methoddialog, selectWorkload identity federation (automatic)to create a new workload identity federation or selectWorkload identity federation (manual)touse an existing workload identity federation.
In theAuthentication methoddialog, selectWorkload identity federation (automatic)to create a new workload identity federation or selectWorkload identity federation (manual)touse an existing workload identity federation.
Enter your subscription, resource group, and a name for your service connection.
Enter your subscription, resource group, and a name for your service connection.
If you created a new service principal, find the name of the service principal assigned to the service connection. You'll add a new role assignment to this service principal in the next step.
Go toProject Settings>Service connections.
Go toProject Settings>Service connections.
Select the new service connection.
Select the new service connection.
SelectManage Service Principal.
SelectManage Service Principal.
Note the value inDisplay name.
Note the value inDisplay name.

Add role assignment
Assign the proper App Configuration role assignments to the credentials being used within the task so that the task can access the App Configuration store.
Go to your target App Configuration store.
Go to your target App Configuration store.
In the left menu, selectAccess control (IAM).
In the left menu, selectAccess control (IAM).
In the right pane, selectAdd role assignments.
In the right pane, selectAdd role assignments.

ForRole, selectApp Configuration Data Reader. This role allows the task to read from the App Configuration store.
ForRole, selectApp Configuration Data Reader. This role allows the task to read from the App Configuration store.
Select the service principal associated with the service connection that you created in the previous section.
Select the service principal associated with the service connection that you created in the previous section.

SelectReview + assign.
SelectReview + assign.
If the store contains Key Vault references, go to relevant Key Vault and assignKey Vault Secret Userrole to the service principal created in the previous step. From the Key Vault menu, selectAccess policiesand ensureAzure role-based access controlis selected as the permission model.
If the store contains Key Vault references, go to relevant Key Vault and assignKey Vault Secret Userrole to the service principal created in the previous step. From the Key Vault menu, selectAccess policiesand ensureAzure role-based access controlis selected as the permission model.
Use in builds
This section covers how to use the Azure App Configuration Export task in an Azure DevOps build pipeline.
Navigate to the build pipeline page by clickingPipelines>Pipelines. For build pipeline documentation, seeCreate your first pipeline.If you're creating a new build pipeline, on the last step of the process, on theReviewtab, selectShow assistanton the right side of the pipeline.If you're using an existing build pipeline, click theEditbutton at the top-right.
If you're creating a new build pipeline, on the last step of the process, on theReviewtab, selectShow assistanton the right side of the pipeline.

If you're using an existing build pipeline, click theEditbutton at the top-right.

Search for theAzure App Configuration ExportTask.

To export the key-values from the App Configuration store, configure the necessary parameters for the task. Descriptions of the parameters are available in theParameterssection  and in tooltips next to each parameter.Set theAzure subscriptionparameter to the name of the service connection you created in a previous step.Set theApp Configuration Endpointto the endpoint of your App Configuration store.Leave the default values for the remaining parameters.
Set theAzure subscriptionparameter to the name of the service connection you created in a previous step.
Set theApp Configuration Endpointto the endpoint of your App Configuration store.
Leave the default values for the remaining parameters.

Save and queue a build. The build log displays any failures that occurred during the execution of the task.
Use in releases
This section covers how to use the Azure App Configuration Export task in an Azure DevOps release pipeline.
Navigate to release pipeline page by selectingPipelines>Releases. For release pipeline documentation, seeRelease pipelines.
Choose an existing release pipeline. If you donât have one, clickNew pipelineto create a new one.
Select theEditbutton in the top-right corner to edit the release pipeline.
From theTasksdropdown, choose theStageto which you want to add the task. More information about stages can be found inAdd stages, dependencies, & conditions.

Click+next to the Job to which you want to add a new task.

Search for theAzure App Configuration ExportTask.

To export your key-values from your App Configuration store, configure the necessary parameters within the task. Descriptions of the parameters are available in theParameterssection and in tooltips next to each parameter.Set theAzure subscriptionparameter to the name of the service connection you created in a previous step.Set theApp Configuration Endpointto the endpoint of your App Configuration store.Leave the default values for the remaining parameters.
Set theAzure subscriptionparameter to the name of the service connection you created in a previous step.
Set theApp Configuration Endpointto the endpoint of your App Configuration store.
Leave the default values for the remaining parameters.
Save and queue a release. The release log displays any failures encountered during the execution of the task.
Parameters
The following parameters are used by the Azure App Configuration Export task:
Azure subscription: A drop-down containing your available Azure service connections. To update and refresh your list of available Azure service connections, press theRefresh Azure subscriptionbutton to the right of the textbox.
App Configuration Endpoint: A drop-down that loads your available configuration stores endpoints under the selected subscription. To update and refresh your list of available configuration stores endpoints, press theRefresh App Configuration Endpointbutton to the right of the textbox.
Selection Mode: Specifies how the key-values read from a configuration store are selected. The 'Default' selection mode allows the use of key and label filters. The 'Snapshot' selection mode allows key-values to be selected from a snapshot. Default value isDefault.
Key Filter: The filter can be used to select what key-values are requested from Azure App Configuration. A value of * selects all key-values. For more information on, seeQuery key-values.
Label: Specifies which label should be used when selecting key-values from the App Configuration store. If no label is provided, then key-values with the no label are retrieved. The following characters aren't allowed: , *.
Snapshot Name: Specifies snapshot from which key-values should be retrieved in Azure App Configuration.
Trim Key Prefix: Specifies one or more prefixes that should be trimmed from App Configuration keys before setting them as variables. A new-line character can be used to separate multiple prefixes.
Suppress Warning For Overridden Keys: Default value is unchecked. Specifies whether to show warnings when existing keys are overridden. Enable this option when it's expected that the key-values downloaded from App Configuration have overlapping keys with what exists in pipeline variables.
Use key-values in subsequent tasks
The key-values that are fetched from App Configuration are set as pipeline variables, which are accessible as environment variables. The key of the environment variable is the key of the key-value that is retrieved from App Configuration after trimming the prefix, if specified.
For example, if a subsequent task runs a PowerShell script, it could consume a key-value with the key 'myBuildSetting' like this:
echo "$env:myBuildSetting"
echo "$env:myBuildSetting"
And the value is printed to the console.
Note
Azure Key Vault references within App Configuration will be resolved and set assecret variables. In Azure pipelines, secret variables are masked out from log. They aren't passed into tasks as environment variables and must instead be passed as inputs.
Troubleshooting
If an unexpected error occurs, debug logs can be enabled by setting the pipeline variablesystem.debugtotrue.
system.debug
true
FAQ
How do I compose my configuration from multiple keys and labels?
There are times when configuration may need to be composed from multiple labels, for example, default and dev. Multiple App Configuration tasks may be used in one pipeline to implement this scenario. The key-values fetched by a task in a later step supersedes any values from previous steps. In the aforementioned example, a task can be used to select key-values with the default label while a second task can select key-values with the dev label. The keys with the dev label override the same keys with the default label.
Next step
For a complete reference of the parameters or to use this pipeline task in YAML pipelines, refer to the following document.
Azure App Configuration Export Task reference
To learn how to import key-values from a configuration file into your App Configuration store, continue to the following document.
Import settings to App Configuration with Azure pipelines
To learn how to create snapshot in an App Configuration store, continue to the following document.
Create snapshots in App Configuration with Azure Pipelines
Feedback
Was this page helpful?
Additional resources