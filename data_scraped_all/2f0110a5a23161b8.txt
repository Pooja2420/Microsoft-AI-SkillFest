Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Manage your function app
Article
2024-11-11
23 contributors
In this article
In Azure Functions, a function app provides the execution context for your individual functions. Function app behaviors apply to all functions hosted by a given function app. All functions in a function app must be of the samelanguage.
Individual functions in a function app are deployed together and are scaled together. All functions in the same function app share resources, per instance, as the function app scales.
Connection strings, environment variables, and other application settings are defined separately for each function app. Any data that must be shared between function apps should be stored externally in a persisted store.
Get started in the Azure portal
Note
Because of limitations on editing function code in theAzure portal, you should develop your functions locally and publish your code project to a function app in Azure. For more information, seeDevelopment limitations in the Azure portal
To view the app settings in your function app, follow these steps:
Sign in to theAzure portalusing your Azure account. Search for your function app and select it.
Sign in to theAzure portalusing your Azure account. Search for your function app and select it.
In the left pane of your function app, expandSettings, selectEnvironment variables, and then select theApp settingstab.
In the left pane of your function app, expandSettings, selectEnvironment variables, and then select theApp settingstab.

Work with application settings
In addition to the predefined app settings used by Azure Functions, you can create any number of app settings, as required by your function code. For more information, seeApp settings reference for Azure Functions.
These settings are stored encrypted. For more information, seeApp settings security.
You can manage app settings from theAzure portal, and by using theAzure CLIandAzure PowerShell. You can also manage app settings fromVisual Studio Codeand fromVisual Studio.
Azure portal
Azure CLI
Azure PowerShell
To view your app settings, seeGet started in the Azure portal.
TheApp settingstab maintains settings that are used by your function app:
To see the values of the app settings, selectShow values.
To see the values of the app settings, selectShow values.
To add a setting, select+ Add, and then enter theNameandValueof the new key-value pair.
To add a setting, select+ Add, and then enter theNameandValueof the new key-value pair.

Theaz functionapp config appsettings listcommand returns the existing application settings, for example:
az functionapp config appsettings list
az functionapp config appsettings list --name <FUNCTION_APP_NAME> \
--resource-group <RESOURCE_GROUP_NAME>
az functionapp config appsettings list --name <FUNCTION_APP_NAME> \
--resource-group <RESOURCE_GROUP_NAME>
Theaz functionapp config appsettings setcommand adds or updates an application setting. The following example creates a setting with a key namedCUSTOM_FUNCTION_APP_SETTINGand a value of12345:
az functionapp config appsettings set
CUSTOM_FUNCTION_APP_SETTING
12345
az functionapp config appsettings set --name <FUNCTION_APP_NAME> \
--resource-group <RESOURCE_GROUP_NAME> \
--settings CUSTOM_FUNCTION_APP_SETTING=12345
az functionapp config appsettings set --name <FUNCTION_APP_NAME> \
--resource-group <RESOURCE_GROUP_NAME> \
--settings CUSTOM_FUNCTION_APP_SETTING=12345
TheGet-AzFunctionAppSettingcmdlet returns the existing application settings, for example:
Get-AzFunctionAppSetting
Get-AzFunctionAppSetting -Name <FUNCTION_APP_NAME> -ResourceGroupName <RESOURCE_GROUP_NAME>
Get-AzFunctionAppSetting -Name <FUNCTION_APP_NAME> -ResourceGroupName <RESOURCE_GROUP_NAME>
TheUpdate-AzFunctionAppSettingcommand adds or updates an application setting. The following example creates a setting with a key namedCUSTOM_FUNCTION_APP_SETTINGand a value of12345:
Update-AzFunctionAppSetting
CUSTOM_FUNCTION_APP_SETTING
12345
Update-AzFunctionAppSetting -Name <FUNCTION_APP_NAME> -ResourceGroupName <RESOURCE_GROUP_NAME> -AppSetting @{"CUSTOM_FUNCTION_APP_SETTING" = "12345"}
Update-AzFunctionAppSetting -Name <FUNCTION_APP_NAME> -ResourceGroupName <RESOURCE_GROUP_NAME> -AppSetting @{"CUSTOM_FUNCTION_APP_SETTING" = "12345"}
Use application settings
The function app settings values can also be read in your code as environment variables. For more information, see the Environment variables section of these language-specific reference articles:
C# precompiled
C# script (.csx)
Java
JavaScript
PowerShell
Python
When you develop a function app locally, you must maintain local copies of these values in thelocal.settings.jsonproject file. For more information, seeLocal settings file.
FTPS deployment settings
Azure Functions supports deploying project code to your function app by using FTPS. Because this deployment method requires you tosync triggers, it isn't recommended. To securely transfer project files, always use FTPS and not FTP.
To get the credentials required for FTPS deployment, use one of these methods:
Azure portal
Azure CLI
Azure PowerShell
You can get the FTPS publishing credentials in the Azure portal by downloading the publishing profile for your function app.
Important
The publishing profile contains important security credentials. Always secure the downloaded file on your local computer.
To download the publishing profile of your function app:
In theAzure portal, locate the page for your function app, expandSettings>Configurationin the left column.
In theAzure portal, locate the page for your function app, expandSettings>Configurationin the left column.
In theConfigurationpage, select theGeneral settingstab and make sure thatSCM Basic Auth Publishing Credentialsis turnedOn. When this setting isOff, you can't use publish profiles, so selectOnand thenSave.
In theConfigurationpage, select theGeneral settingstab and make sure thatSCM Basic Auth Publishing Credentialsis turnedOn. When this setting isOff, you can't use publish profiles, so selectOnand thenSave.
Go back to the function app'sOverviewpage, and then selectGet publish profile.
Go back to the function app'sOverviewpage, and then selectGet publish profile.

Save and copy the contents of the file.
Save and copy the contents of the file.
In the file, locate thepublishProfileelement with the attributepublishMethod="FTP". In this element, thepublishUrl,userName, anduserPWDattributes contain the target URL and credentials for FTPS publishing.
publishProfile
publishMethod="FTP"
publishUrl
userName
userPWD
Run this Azure CLI command that returns the FTPS credentials from the publishing profile.
az functionapp deployment list-publishing-profiles --name <APP_NAME> --resource-group <GROUP_NAME> --query "[?publishMethod=='FTP'].{URL:publishUrl, username:userName, password:userPWD}" -o table
az functionapp deployment list-publishing-profiles --name <APP_NAME> --resource-group <GROUP_NAME> --query "[?publishMethod=='FTP'].{URL:publishUrl, username:userName, password:userPWD}" -o table
In this example, replace<APP_NAME>with your function app name and<GROUP_NAME>with the resource group. The returnedURL,username, andpasswordcolumns contain the target URL and credentials for FTPS publishing.
<APP_NAME>
<GROUP_NAME>
URL
username
password
Run this Azure PowerShell command that returns the FTPS credentials from the publishing profile.
$profile = [xml](Get-AzWebAppPublishingProfile -ResourceGroupName "<GROUP_NAME>" -Name "<APP_NAME>" -Format "Ftp") 
$profile.publishData.publishProfile | Where-Object -Property publishMethod -eq Ftp | Select-Object -Property @{Name="URL"; Expression = {$_.publishUrl}}, 
@{Name="username"; Expression = {$_.userName}}, @{Name="password"; Expression = {$_.userPWD}} | Format-Table
$profile = [xml](Get-AzWebAppPublishingProfile -ResourceGroupName "<GROUP_NAME>" -Name "<APP_NAME>" -Format "Ftp") 
$profile.publishData.publishProfile | Where-Object -Property publishMethod -eq Ftp | Select-Object -Property @{Name="URL"; Expression = {$_.publishUrl}}, 
@{Name="username"; Expression = {$_.userName}}, @{Name="password"; Expression = {$_.userPWD}} | Format-Table
In this example, replace<APP_NAME>with your function app name and<GROUP_NAME>with the resource group. The returnedURL,username, andpasswordcolumns contain the target URL and credentials for FTPS publishing.
<APP_NAME>
<GROUP_NAME>
URL
username
password
Hosting plan type
When you create a function app, you also create a hosting plan in which the app runs. A plan can have one or more function apps. The functionality, scaling, and pricing of your functions depend on the type of plan. For more information, seeAzure Functions hosting options.
You can determine the type of plan being used by your function app from the Azure portal, or by using the Azure CLI or Azure PowerShell APIs.
The following values indicate the plan type:
Dynamic
ElasticPremium
Azure portal
Azure CLI
Azure PowerShell
To determine the type of plan used by your function app, see theApp Service Planin theOverviewpage of the function app in theAzure portal.
To determine the type of plan used by your function app, see theApp Service Planin theOverviewpage of the function app in theAzure portal.

To see the pricing tier, select the name of theApp Service Plan, and then selectSettings > Propertiesfrom the left pane.
To see the pricing tier, select the name of theApp Service Plan, and then selectSettings > Propertiesfrom the left pane.
Run the following Azure CLI command to get your hosting plan type:
functionApp=<FUNCTION_APP_NAME>
resourceGroup=FunctionMonitoringExamples
appServicePlanId=$(az functionapp show --name $functionApp --resource-group $resourceGroup --query appServicePlanId --output tsv)
az appservice plan list --query "[?id=='$appServicePlanId'].sku.tier" --output tsv
functionApp=<FUNCTION_APP_NAME>
resourceGroup=FunctionMonitoringExamples
appServicePlanId=$(az functionapp show --name $functionApp --resource-group $resourceGroup --query appServicePlanId --output tsv)
az appservice plan list --query "[?id=='$appServicePlanId'].sku.tier" --output tsv
In the previous example, replace<RESOURCE_GROUP>and<FUNCTION_APP_NAME>with the resource group and function app names, respectively.
<RESOURCE_GROUP>
<FUNCTION_APP_NAME>
Run the following Azure PowerShell command to get your hosting plan type:
$FunctionApp = '<FUNCTION_APP_NAME>'
$ResourceGroup = '<RESOURCE_GROUP>'

$PlanID = (Get-AzFunctionApp -ResourceGroupName $ResourceGroup -Name $FunctionApp).AppServicePlan
(Get-AzFunctionAppPlan -Name $PlanID -ResourceGroupName $ResourceGroup).SkuTier
$FunctionApp = '<FUNCTION_APP_NAME>'
$ResourceGroup = '<RESOURCE_GROUP>'

$PlanID = (Get-AzFunctionApp -ResourceGroupName $ResourceGroup -Name $FunctionApp).AppServicePlan
(Get-AzFunctionAppPlan -Name $PlanID -ResourceGroupName $ResourceGroup).SkuTier
In the previous example, replace<RESOURCE_GROUP>and<FUNCTION_APP_NAME>with the resource group and function app names, respectively.
<RESOURCE_GROUP>
<FUNCTION_APP_NAME>
Plan migration
You can migrate a function app between a Consumption plan and a Premium plan on Windows. When migrating between plans, keep in mind the following considerations:
Direct migration to a Dedicated (App Service) plan isn't supported.
Migration isn't supported on Linux.
The source plan and the target plan must be in the same resource group and geographical region. For more information, seeMove an app to another App Service plan.
The specific CLI commands depend on the direction of the migration.
Downtime in your function executions occurs as the function app is migrated between plans.
State and other app-specific content is maintained, because the same Azure Files share is used by the app both before and after migration.
You can migrate your plan using these tools:
Azure portal
Azure CLI
Azure PowerShell
You can use theAzure portalto switch to a different plan.
You can use the Azure CLI commands to manually create a new plan, switch your app to use the new plan, and delete the original plan.
You can use Azure PowerShell commands to manually create a new plan, switch your app to use the new plan, and delete the original plan.
Choose the direction of the migration for your app on Windows.
Consumption-to-Premium
Premium-to-Consumption
Consumption-to-Premium
Premium-to-Consumption
Consumption-to-Premium
Premium-to-Consumption
In the Azure portal, navigate to your Consumption plan app and chooseChange App Service planunderApp Service plan.
In the Azure portal, navigate to your Consumption plan app and chooseChange App Service planunderApp Service plan.
SelectPremiumunderPlan type, create a new Premium plan, and selectOK.
SelectPremiumunderPlan type, create a new Premium plan, and selectOK.
For more information, seeMove an app to another App Service plan.
In the Azure portal, navigate to your Premium plan app and chooseChange App Service planunderApp Service plan.
In the Azure portal, navigate to your Premium plan app and chooseChange App Service planunderApp Service plan.
SelectConsumptionunderPlan type, create a new Consumption plan, and selectOK.
SelectConsumptionunderPlan type, create a new Consumption plan, and selectOK.
For more information, seeMove an app to another App Service plan.
Use the following procedure to migrate from a Consumption plan to a Premium plan on Windows:
Run theaz functionapp createcommand as follows to create a new App Service plan (Elastic Premium) in the same region and resource group as your existing function app:az functionapp plan create --name <NEW_PREMIUM_PLAN_NAME> --resource-group <MY_RESOURCE_GROUP> --location <REGION> --sku EP1
Run theaz functionapp createcommand as follows to create a new App Service plan (Elastic Premium) in the same region and resource group as your existing function app:
az functionapp plan create --name <NEW_PREMIUM_PLAN_NAME> --resource-group <MY_RESOURCE_GROUP> --location <REGION> --sku EP1
az functionapp plan create --name <NEW_PREMIUM_PLAN_NAME> --resource-group <MY_RESOURCE_GROUP> --location <REGION> --sku EP1
Run theaz functionapp updatecommand as follows to migrate the existing function app to the new Premium plan:az functionapp update --name <MY_APP_NAME> --resource-group <MY_RESOURCE_GROUP> --plan <NEW_PREMIUM_PLAN>
Run theaz functionapp updatecommand as follows to migrate the existing function app to the new Premium plan:
az functionapp update --name <MY_APP_NAME> --resource-group <MY_RESOURCE_GROUP> --plan <NEW_PREMIUM_PLAN>
az functionapp update --name <MY_APP_NAME> --resource-group <MY_RESOURCE_GROUP> --plan <NEW_PREMIUM_PLAN>
When you no longer need the Consumption plan originally used by the app, delete your original plan after confirming you've successfully migrated to the new one. Run theaz functionapp plan listcommand as follows to get a list of all Consumption plans in your resource group:az functionapp plan list --resource-group <MY_RESOURCE_GROUP> --query "[?sku.family=='Y'].{PlanName:name,Sites:numberOfSites}" -o tableYou can safely delete the plan with zero sites, which is the one you migrated from.
When you no longer need the Consumption plan originally used by the app, delete your original plan after confirming you've successfully migrated to the new one. Run theaz functionapp plan listcommand as follows to get a list of all Consumption plans in your resource group:
az functionapp plan list --resource-group <MY_RESOURCE_GROUP> --query "[?sku.family=='Y'].{PlanName:name,Sites:numberOfSites}" -o table
az functionapp plan list --resource-group <MY_RESOURCE_GROUP> --query "[?sku.family=='Y'].{PlanName:name,Sites:numberOfSites}" -o table
You can safely delete the plan with zero sites, which is the one you migrated from.
Run theaz functionapp plan deletecommand as follows to delete the Consumption plan you migrated from.az functionapp plan delete --name <CONSUMPTION_PLAN_NAME> --resource-group <MY_RESOURCE_GROUP>
Run theaz functionapp plan deletecommand as follows to delete the Consumption plan you migrated from.
az functionapp plan delete --name <CONSUMPTION_PLAN_NAME> --resource-group <MY_RESOURCE_GROUP>
az functionapp plan delete --name <CONSUMPTION_PLAN_NAME> --resource-group <MY_RESOURCE_GROUP>
Use the following procedure to migrate from a Premium plan to a Consumption plan on Windows:
Run theaz functionapp createcommand as follows to create a new function app (Consumption) in the same region and resource group as your existing function app. This command also creates a new Consumption plan in which the function app runs:az functionapp create --resource-group <MY_RESOURCE_GROUP> --name <NEW_CONSUMPTION_APP_NAME> --consumption-plan-location <REGION> --runtime <LANGUAGE_RUNTIME> --functions-version 4 --storage-account <STORAGE_NAME>
Run theaz functionapp createcommand as follows to create a new function app (Consumption) in the same region and resource group as your existing function app. This command also creates a new Consumption plan in which the function app runs:
az functionapp create --resource-group <MY_RESOURCE_GROUP> --name <NEW_CONSUMPTION_APP_NAME> --consumption-plan-location <REGION> --runtime <LANGUAGE_RUNTIME> --functions-version 4 --storage-account <STORAGE_NAME>
az functionapp create --resource-group <MY_RESOURCE_GROUP> --name <NEW_CONSUMPTION_APP_NAME> --consumption-plan-location <REGION> --runtime <LANGUAGE_RUNTIME> --functions-version 4 --storage-account <STORAGE_NAME>
Run theaz functionapp showcommand as follows to get the name of the Consumption plan created with the new function app:az functionapp show --resource-group <MY_RESOURCE_GROUP> --name <NEW_CONSUMPTION_APP_NAME> --query "{appServicePlanId}" -o tsvThe Consumption plan name is the final segment of the fully qualified resource ID that is returned.
Run theaz functionapp showcommand as follows to get the name of the Consumption plan created with the new function app:
az functionapp show --resource-group <MY_RESOURCE_GROUP> --name <NEW_CONSUMPTION_APP_NAME> --query "{appServicePlanId}" -o tsv
az functionapp show --resource-group <MY_RESOURCE_GROUP> --name <NEW_CONSUMPTION_APP_NAME> --query "{appServicePlanId}" -o tsv
The Consumption plan name is the final segment of the fully qualified resource ID that is returned.
Run theaz functionapp updatecommand as follows to migrate the existing function app to the new Consumption plan:az functionapp update --name <MY_APP_NAME> --resource-group <MY_RESOURCE_GROUP> --plan <NEW_CONSUMPTION_PLAN> --force
Run theaz functionapp updatecommand as follows to migrate the existing function app to the new Consumption plan:
az functionapp update --name <MY_APP_NAME> --resource-group <MY_RESOURCE_GROUP> --plan <NEW_CONSUMPTION_PLAN> --force
az functionapp update --name <MY_APP_NAME> --resource-group <MY_RESOURCE_GROUP> --plan <NEW_CONSUMPTION_PLAN> --force
Run theaz functionapp deletecommand as follows to delete the function app you created in step 1, since you only need the plan that was created to run the existing function app:az functionapp delete --name <NEW_CONSUMPTION_APP_NAME> --resource-group <MY_RESOURCE_GROUP>
Run theaz functionapp deletecommand as follows to delete the function app you created in step 1, since you only need the plan that was created to run the existing function app:
az functionapp delete --name <NEW_CONSUMPTION_APP_NAME> --resource-group <MY_RESOURCE_GROUP>
az functionapp delete --name <NEW_CONSUMPTION_APP_NAME> --resource-group <MY_RESOURCE_GROUP>
When you no longer need the Premium plan originally used by the app, delete your original plan after confirming you've successfully migrated to the new one. Until the Premium plan is deleted, you continue to be charged for it. Run theaz functionapp plan listcommand as follows to get a list of all Premium plans in your resource group:az functionapp plan list --resource-group <MY_RESOURCE_GROUP> --query "[?sku.family=='EP'].{PlanName:name,Sites:numberOfSites}" -o table
When you no longer need the Premium plan originally used by the app, delete your original plan after confirming you've successfully migrated to the new one. Until the Premium plan is deleted, you continue to be charged for it. Run theaz functionapp plan listcommand as follows to get a list of all Premium plans in your resource group:
az functionapp plan list --resource-group <MY_RESOURCE_GROUP> --query "[?sku.family=='EP'].{PlanName:name,Sites:numberOfSites}" -o table
az functionapp plan list --resource-group <MY_RESOURCE_GROUP> --query "[?sku.family=='EP'].{PlanName:name,Sites:numberOfSites}" -o table
Run theaz functionapp plan deletecommand as follows to delete the Premium plan you migrated from:az functionapp plan delete --name <PREMIUM_PLAN> --resource-group <MY_RESOURCE_GROUP>
Run theaz functionapp plan deletecommand as follows to delete the Premium plan you migrated from:
az functionapp plan delete --name <PREMIUM_PLAN> --resource-group <MY_RESOURCE_GROUP>
az functionapp plan delete --name <PREMIUM_PLAN> --resource-group <MY_RESOURCE_GROUP>
Use the following procedure to migrate from a Consumption plan to a Premium plan on Windows:
Run theNew-AzFunctionAppPlancommand as follows to create a new App Service plan (Elastic Premium) in the same region and resource group as your existing function app:New-AzFunctionAppPlan -Name <NEW_PREMIUM_PLAN_NAME> -ResourceGroupName <MY_RESOURCE_GROUP> -Location <REGION> -Sku EP1 -WorkerType Windows
Run theNew-AzFunctionAppPlancommand as follows to create a new App Service plan (Elastic Premium) in the same region and resource group as your existing function app:
New-AzFunctionAppPlan -Name <NEW_PREMIUM_PLAN_NAME> -ResourceGroupName <MY_RESOURCE_GROUP> -Location <REGION> -Sku EP1 -WorkerType Windows
New-AzFunctionAppPlan -Name <NEW_PREMIUM_PLAN_NAME> -ResourceGroupName <MY_RESOURCE_GROUP> -Location <REGION> -Sku EP1 -WorkerType Windows
Run theUpdate-AzFunctionAppcommand as follows to migrate the existing function app to the new Premium plan:Update-AzFunctionApp -Name <MY_APP_NAME> -ResourceGroupName <MY_RESOURCE_GROUP> -PlanName <NEW_PREMIUM_PLAN> -Force
Run theUpdate-AzFunctionAppcommand as follows to migrate the existing function app to the new Premium plan:
Update-AzFunctionApp -Name <MY_APP_NAME> -ResourceGroupName <MY_RESOURCE_GROUP> -PlanName <NEW_PREMIUM_PLAN> -Force
Update-AzFunctionApp -Name <MY_APP_NAME> -ResourceGroupName <MY_RESOURCE_GROUP> -PlanName <NEW_PREMIUM_PLAN> -Force
When you no longer need the Consumption plan originally used by the app, you can run theRemove-AzFunctionAppPlancommand as follows to delete the Consumption plan you migrated from:Remove-AzFunctionAppPlan -Name <CONSUMPTION_PLAN_NAME> -ResourceGroupName <MY_RESOURCE_GROUP> -Force
When you no longer need the Consumption plan originally used by the app, you can run theRemove-AzFunctionAppPlancommand as follows to delete the Consumption plan you migrated from:
Remove-AzFunctionAppPlan -Name <CONSUMPTION_PLAN_NAME> -ResourceGroupName <MY_RESOURCE_GROUP> -Force
Remove-AzFunctionAppPlan -Name <CONSUMPTION_PLAN_NAME> -ResourceGroupName <MY_RESOURCE_GROUP> -Force
Use the following procedure to migrate from a Premium plan to a Consumption plan on Windows:
Run theNew-AzFunctionAppcommand as follows to create a new function app (Consumption) in the same region and resource group as your existing function app. This command also creates a new Consumption plan in which the function app runs:New-AzFunctionApp -Name <NEW_CONSUMPTION_APP_NAME> -StorageAccountName <STORAGE_NAME> -Location <REGION> -ResourceGroupName <MY_RESOURCE_GROUP> -Runtime <LANGUAGE_RUNTIME> -RuntimeVersion <LANGUAGE_VERSION> -FunctionsVersion 4 -OSType Windows
Run theNew-AzFunctionAppcommand as follows to create a new function app (Consumption) in the same region and resource group as your existing function app. This command also creates a new Consumption plan in which the function app runs:
New-AzFunctionApp -Name <NEW_CONSUMPTION_APP_NAME> -StorageAccountName <STORAGE_NAME> -Location <REGION> -ResourceGroupName <MY_RESOURCE_GROUP> -Runtime <LANGUAGE_RUNTIME> -RuntimeVersion <LANGUAGE_VERSION> -FunctionsVersion 4 -OSType Windows
New-AzFunctionApp -Name <NEW_CONSUMPTION_APP_NAME> -StorageAccountName <STORAGE_NAME> -Location <REGION> -ResourceGroupName <MY_RESOURCE_GROUP> -Runtime <LANGUAGE_RUNTIME> -RuntimeVersion <LANGUAGE_VERSION> -FunctionsVersion 4 -OSType Windows
Run theGet-AzFunctionAppcommand as follows to get the name of the Consumption plan created with the new function app:Get-AzFunctionApp -ResourceGroupName <MY_RESOURCE_GROUP> -Name <NEW_CONSUMPTION_APP_NAME> | Select-Object -Property AppServicePlan | Format-List
Run theGet-AzFunctionAppcommand as follows to get the name of the Consumption plan created with the new function app:
Get-AzFunctionApp -ResourceGroupName <MY_RESOURCE_GROUP> -Name <NEW_CONSUMPTION_APP_NAME> | Select-Object -Property AppServicePlan | Format-List
Get-AzFunctionApp -ResourceGroupName <MY_RESOURCE_GROUP> -Name <NEW_CONSUMPTION_APP_NAME> | Select-Object -Property AppServicePlan | Format-List
Run theUpdate-AzFunctionAppcommand as follows to migrate the existing function app to the new Consumption plan:Update-AzFunctionApp -Name <MY_APP_NAME> -ResourceGroupName <MY_RESOURCE_GROUP> -PlanName <NEW_CONSUMPTION_PLAN> -Force
Run theUpdate-AzFunctionAppcommand as follows to migrate the existing function app to the new Consumption plan:
Update-AzFunctionApp -Name <MY_APP_NAME> -ResourceGroupName <MY_RESOURCE_GROUP> -PlanName <NEW_CONSUMPTION_PLAN> -Force
Update-AzFunctionApp -Name <MY_APP_NAME> -ResourceGroupName <MY_RESOURCE_GROUP> -PlanName <NEW_CONSUMPTION_PLAN> -Force
When you no longer need the Consumption plan originally used by the app, you can run theRemove-AzFunctionAppPlancommand as follows to delete the Consumption plan you migrated from:Remove-AzFunctionAppPlan -Name <CONSUMPTION_PLAN_NAME> -ResourceGroupName <MY_RESOURCE_GROUP> -Force
When you no longer need the Consumption plan originally used by the app, you can run theRemove-AzFunctionAppPlancommand as follows to delete the Consumption plan you migrated from:
Remove-AzFunctionAppPlan -Name <CONSUMPTION_PLAN_NAME> -ResourceGroupName <MY_RESOURCE_GROUP> -Force
Remove-AzFunctionAppPlan -Name <CONSUMPTION_PLAN_NAME> -ResourceGroupName <MY_RESOURCE_GROUP> -Force
Development limitations in the Azure portal
The following table shows the operating systems and languages that support in-portal editing:
Consider these limitations when you develop your functions in theAzure portal:
In-portal editing is supported only for functions that were created or last modified in the Azure portal.
In-portal editing is supported only for JavaScript, PowerShell, Python, and C# Script functions.
In-portal editing isn't currently supported by theFlex Consumption plan.
When you deploy code to a function app from outside the Azure portal, you can no longer edit any of the code for that function app in the portal. In this case, just continue usinglocal development.
For Python, development with custom modules isn't currently supported in the portal. To add custom modules to your function app, you mustdevelop your app locally.
For compiled C# functions and Java functions, you can create the function app and related resources in the portal. However, you must create the functions code project locally and then publish it to Azure.
When possible, develop your functions locally and publish your code project to a function app in Azure. For more information, seeCode and test Azure Functions locally.
Manually install extensions
C# class library functions can include the NuGet packages forbinding extensionsdirectly in the class library project. For other non-.NET languages and C# script, you shoulduse extension bundles. If you must manually install extensions, you can do so byusing Azure Functions Core Toolslocally. If you can't use extension bundles and are only able to work in the portal, you need to useAdvanced Tools (Kudu)to manually create the extensions.csproj file directly in the site. Make sure to first remove theextensionBundleelement from thehost.jsonfile.
extensionBundle
This same process works for any other file you need to add to your app.
Important
When possible, don't edit files directly in your function app in Azure. We recommenddownloading your app files locally, usingCore Tools to install extensionsand other packages, validating your changes, and thenrepublishing your app using Core Toolsor one of the othersupported deployment methods.
The Functions editor built into the Azure portal lets you update your function code and configuration files directly in the portal:
Select your function app, then underFunctions, selectFunctions.
Select your function app, then underFunctions, selectFunctions.
Choose your function and selectCode + testunderDeveloper.
Choose your function and selectCode + testunderDeveloper.
Choose your file to edit and selectSavewhen you finish.
Choose your file to edit and selectSavewhen you finish.
Files in the root of the app, such as function.proj or extensions.csproj need to be created and edited by using theAdvanced Tools (Kudu):
Select your function app, expandDevelopment tools, and then selectAdvanced tools>Go.
Select your function app, expandDevelopment tools, and then selectAdvanced tools>Go.
If prompted, sign in to the Source Control Manager (SCM) site with your Azure credentials.
If prompted, sign in to the Source Control Manager (SCM) site with your Azure credentials.
From theDebug consolemenu, chooseCMD.
From theDebug consolemenu, chooseCMD.
Navigate to.\site\wwwroot, select the plus (+) button at the top, and selectNew file.
Navigate to.\site\wwwroot, select the plus (+) button at the top, and selectNew file.
.\site\wwwroot
Give the file a name, such asextensions.csproj, and then press Enter.
Give the file a name, such asextensions.csproj, and then press Enter.
extensions.csproj
Select the edit button next to the new file, add or update code in the file, and then selectSave.
Select the edit button next to the new file, add or update code in the file, and then selectSave.
For a project file likeextensions.csproj, run the following command to rebuild the extensions project:dotnet build extensions.csproj
For a project file likeextensions.csproj, run the following command to rebuild the extensions project:
dotnet build extensions.csproj
dotnet build extensions.csproj
Platform features
Function apps run in the Azure App Service platform, which maintains them. As such, your function apps have access to most of the features of Azure's core web hosting platform. When you use theAzure portal, the left pane is where you access the many features of the App Service platform that you can use in your function apps.
The following matrix indicates Azure portal feature support by hosting plan and operating system:
The rest of this article focuses on the following features in the portal that are useful for your function apps:
App Service editor
Console
Advanced tools (Kudu)
Deployment options
CORS
Authentication
For more information about how to work with App Service settings, seeConfigure Azure App Service Settings.
App Service editor
The App Service editor is an advanced in-portal editor that you can use to modify JSON configuration files and code files alike. Choosing this option launches a separate browser tab with a basic editor. This editor enables you to integrate with the Git repository, run and debug code, and modify function app settings. This editor provides an enhanced development environment for your functions compared with the built-in function editor.

We recommend that you consider developing your functions on your local computer. When you develop locally and publish to Azure, your project files are read-only in the Azure portal. For more information, seeCode and test Azure Functions locally.
Console
The in-portal console is an ideal developer tool when you prefer to interact with your function app from the command line. Common commands include directory and file creation and navigation, as well as executing batch files and scripts.

When developing locally, we recommend using theAzure Functions Core Toolsand theAzure CLI.
Advanced tools (Kudu)
The advanced tools for App Service (also known as Kudu) provide access to advanced administrative features of your function app. From Kudu, you manage system information, app settings, environment variables, site extensions, HTTP headers, and server variables. You can also launchKuduby browsing to the SCM endpoint for your function app, for example:https://<myfunctionapp>.scm.azurewebsites.net/.
https://<myfunctionapp>.scm.azurewebsites.net/

Deployment Center
When you use a source control solution to develop and maintain your functions code, Deployment Center lets you build and deploy from source control. Your project is built and deployed to Azure when you make updates. For more information, seeDeployment technologies in Azure Functions.
Cross-origin resource sharing
To prevent malicious code execution on the client, modern browsers block requests from web applications to resources running in a separate domain.Cross-origin resource sharing (CORS)lets anAccess-Control-Allow-Originheader declare which origins are allowed to call endpoints on your function app.
Access-Control-Allow-Origin
Azure portal
Azure CLI
Azure PowerShell
When you configure theAllowed originslist for your function app, theAccess-Control-Allow-Originheader is automatically added to all responses from HTTP endpoints in your function app.
Access-Control-Allow-Origin

If there's another domain entry, the wildcard (*) is ignored.
Use theaz functionapp cors addcommand to add a domain to the allowed origins list. The following example adds the contoso.com domain:
az functionapp cors add
az functionapp cors add --name <FUNCTION_APP_NAME> \
--resource-group <RESOURCE_GROUP_NAME> \
--allowed-origins https://contoso.com
az functionapp cors add --name <FUNCTION_APP_NAME> \
--resource-group <RESOURCE_GROUP_NAME> \
--allowed-origins https://contoso.com
Use theaz functionapp cors showcommand to list the current allowed origins.
az functionapp cors show
You can't currently update CORS settings using Azure PowerShell.
Authentication
When functions use an HTTP trigger, you can require calls to first be authenticated. App Service supports Microsoft Entra authentication and sign-in with social providers, such as Facebook, Microsoft, and X. For information about configuring specific authentication providers, seeAzure App Service authentication overview.

Related content
Configure an App Service app
Continuous deployment for Azure Functions
Feedback
Was this page helpful?
Additional resources