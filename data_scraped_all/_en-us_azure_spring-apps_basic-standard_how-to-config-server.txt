Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Configure a managed Spring Cloud Config Server in Azure Spring Apps
Article
2024-11-19
3 contributors
In this article
Note
TheBasic,Standard, andEnterpriseplans entered a retirement period on March 17, 2025. For more information, see theAzure Spring Apps retirement announcement.
TheStandard consumption and dedicatedplan entered a retirement period on September 30, 2024, with a complete shutdown by the end of March 2025. For more information, seeMigrate Azure Spring Apps Standard consumption and dedicated plan to Azure Container Apps.
This article applies to:â Java â C#
This article applies to:â Standard consumption and dedicated (Preview) â Basic/Standard â Enterprise
This article shows you how to configure a managed Spring Cloud Config Server in Azure Spring Apps.
Spring Cloud Config Server provides server and client-side support for an externalized configuration in a distributed system. The Spring Cloud Config Server instance provides a central place to manage external properties for applications across all environments. For more information, seeSpring Cloud Config.
Note
To use config server in the Standard consumption and dedicated plan, you must enable it first. For more information, seeEnable and disable Spring Cloud Config Server in Azure Spring Apps.
Prerequisites
An Azure subscription. If you don't have an Azure subscription, create afree accountbefore you begin.
An already provisioned and running Azure Spring Apps service instance using the Basic or Standard plan. To set up and launch an Azure Spring Apps service, seeQuickstart: Deploy your first application to Azure Spring Apps.
An already provisioned and running Azure Spring Apps service instance. To set up and launch an Azure Spring Apps service, seeQuickstart: Build and deploy apps to Azure Spring Apps using the Enterprise plan.
Git.
Enable Spring Cloud Config Server
You can enable Spring Cloud Config Server when you provision an Azure Spring Apps Enterprise plan service instance. If you already have an Azure Spring Apps Enterprise plan instance, see theManage Spring Cloud Config Server in an existing Enterprise plan instancesection in this article.
You can enable Spring Cloud Config Server using the Azure portal or Azure CLI.
Azure portal
Azure CLI
Use the following steps to enable Spring Cloud Config Server:
Open theAzure portal.
Open theAzure portal.
On theBasicstab, selectEnterprise tierin thePricingsection and specify the required information. Then, selectNext: Managed components.
On theBasicstab, selectEnterprise tierin thePricingsection and specify the required information. Then, selectNext: Managed components.
On theManaged componentstab, selectEnable Spring Cloud Config Server.
On theManaged componentstab, selectEnable Spring Cloud Config Server.

Specify other settings, and then selectReview and Create.
Specify other settings, and then selectReview and Create.
On theReview an createtab, make sure thatEnable Spring Cloud Config Serveris set toYes. SelectCreateto create the Enterprise plan instance.
On theReview an createtab, make sure thatEnable Spring Cloud Config Serveris set toYes. SelectCreateto create the Enterprise plan instance.
Use the following steps to provision an Azure Spring Apps service instance with Spring Cloud Config Server enabled.
Use the following commands to sign in to the Azure CLI and choose your active subscription:az login
az account list --output table
az account set --subscription <subscription-ID>
Use the following commands to sign in to the Azure CLI and choose your active subscription:
az login
az account list --output table
az account set --subscription <subscription-ID>
az login
az account list --output table
az account set --subscription <subscription-ID>
Use the following commands to accept the legal terms and privacy statements for the Azure Spring Apps Enterprise plan. This step is necessary only if your subscription has never been used to create an Enterprise plan instance of Azure Spring Apps.az provider register --namespace Microsoft.SaaS
az term accept \
    --publisher vmware-inc \
    --product azure-spring-cloud-vmware-tanzu-2 \
    --plan asa-ent-hr-mtr
Use the following commands to accept the legal terms and privacy statements for the Azure Spring Apps Enterprise plan. This step is necessary only if your subscription has never been used to create an Enterprise plan instance of Azure Spring Apps.
az provider register --namespace Microsoft.SaaS
az term accept \
    --publisher vmware-inc \
    --product azure-spring-cloud-vmware-tanzu-2 \
    --plan asa-ent-hr-mtr
az provider register --namespace Microsoft.SaaS
az term accept \
    --publisher vmware-inc \
    --product azure-spring-cloud-vmware-tanzu-2 \
    --plan asa-ent-hr-mtr
Select a location. The location must support the Azure Spring Apps Enterprise plan. For more information, see theAzure Spring Apps FAQ.
Select a location. The location must support the Azure Spring Apps Enterprise plan. For more information, see theAzure Spring Apps FAQ.
Use the following command to create a resource group:az group create \
    --name <resource-group-name> \
    --location <location>For more information about resource groups, seeWhat is Azure Resource Manager?
Use the following command to create a resource group:
az group create \
    --name <resource-group-name> \
    --location <location>
az group create \
    --name <resource-group-name> \
    --location <location>
For more information about resource groups, seeWhat is Azure Resource Manager?
Prepare a name for your Azure Spring Apps service instance. The name must be between 4 and 32 characters long and can contain only lowercase letters, numbers, and hyphens. The first character of the service name must be a letter and the last character must be either a letter or a number.
Prepare a name for your Azure Spring Apps service instance. The name must be between 4 and 32 characters long and can contain only lowercase letters, numbers, and hyphens. The first character of the service name must be a letter and the last character must be either a letter or a number.
Use the following command to create an Azure Spring Apps service instance with Spring Cloud Config Server enabled:az spring create \
    --resource-group <resource-group-name> \
    --name <Azure-Spring-Apps-service-instance-name> \
    --sku enterprise \
    --enable-config-server
Use the following command to create an Azure Spring Apps service instance with Spring Cloud Config Server enabled:
az spring create \
    --resource-group <resource-group-name> \
    --name <Azure-Spring-Apps-service-instance-name> \
    --sku enterprise \
    --enable-config-server
az spring create \
    --resource-group <resource-group-name> \
    --name <Azure-Spring-Apps-service-instance-name> \
    --sku enterprise \
    --enable-config-server
Restrictions
There are some restrictions when you use Config Server with a Git back end. The following properties are automatically injected into your application environment to access Config Server and Service Discovery. If you also configure those properties from your Config Server files, you might experience conflicts and unexpected behavior.
eureka.client.service-url.defaultZone
eureka.client.service-url.defaultZone
eureka.client.tls.keystore
eureka.client.tls.keystore
eureka.instance.preferIpAddress
eureka.instance.preferIpAddress
eureka.instance.instance-id
eureka.instance.instance-id
server.port
server.port
spring.cloud.config.tls.keystore
spring.cloud.config.tls.keystore
spring.config.import
spring.config.import
spring.application.name
spring.application.name
spring.jmx.enabled
spring.jmx.enabled
management.endpoints.jmx.exposure.include
management.endpoints.jmx.exposure.include
Caution
Avoid putting these properties in your Config Server application files.
Create your Config Server files
Azure Spring Apps supports Azure DevOps Server, GitHub, GitLab, and Bitbucket for storing your Config Server files. When your repository is ready, you can create the configuration files and store them there.
Some configurable properties are available only for certain types. The following sections describe the properties for each repository type.
Note
Config Server takesmaster(on Git) as the default label if you don't specify one. However, GitHub has recently changed the default branch frommastertomain. To avoid Azure Spring Apps Config Server failure, be sure to pay attention to the default label when setting up Config Server with GitHub, especially for newly created repositories.
master
master
main
Using a hyphen (-) to separate words is the only property naming convention currently supported. For example, you can usedefault-label, but notdefaultLabel.
default-label
defaultLabel
Public repository
When you use a public repository, your configurable properties are more limited than they are with a private repository.
The following table lists the configurable properties you can use to set up a public Git repository:
uri
http://
https://
git@
ssh://
default-label
search-paths
Private repository with SSH authentication
The following table lists the configurable properties you can use to set up a private Git repository with SSH:
uri
http://
https://
git@
ssh://
default-label
search-paths
private-key
git@
ssh://
host-key
host-key-algorithm
host-key-algorithm
ssh-dss
ssh-rsa
ecdsa-sha2-nistp256
ecdsa-sha2-nistp384
ecdsa-sha2-nistp521
host-key
strict-host-key-checking
host-key
true
false
Private repository with basic authentication
The following table lists the configurable properties you can use to set up a private Git repository with basic authentication:
uri
http://
https://
git@
ssh://
default-label
search-paths
username
password
Note
Many Git repository servers support the use of tokens rather than passwords for HTTP basic authentication. Some repositories allow tokens to persist indefinitely. However, some Git repository servers, including Azure DevOps Server, force tokens to expire in a few hours. Repositories that cause tokens to expire shouldn't use token-based authentication with Azure Spring Apps. If you use such a token, remember to update it before it expires.
GitHub has removed support for password authentication, so you need to use a personal access token instead of password authentication for GitHub. For more information, seeToken authentication requirements for Git operations.
Other Git repositories
The following table lists the configurable properties you can use to set up Git repositories with a pattern:
repos
repos."uri"
repos
http://
https://
git@
ssh://
repos."name"
repos
team-A
team-B
repos
repos."pattern"
{application}/{profile}
repos."default-label"
repos."search-paths
repos."username"
repos."password"
repos."private-key"
git@
ssh://
repos."host-key"
host-key-algorithm
repos."host-key-algorithm"
ssh-dss
ssh-rsa
ecdsa-sha2-nistp256
ecdsa-sha2-nistp384
ecdsa-sha2-nistp521
host-key
repos."strict-host-key-checking"
host-key
true
false
The following table shows some examples of patterns for configuring your service with an optional extra repository. For more information, see theExtra repositoriessection in this article and thePattern Matching and Multiple Repositoriessection ofSpring Cloud Config.
test-config-server-app-0/*
test-config-server-app-0
test-config-server-app-1/dev
test-config-server-app-1
test-config-server-app-2/prod
test-config-server-app-2


Configure a Git repository against Config Server
After you save your configuration files in a repository, use the following steps to connect Azure Spring Apps to the repository:
Sign in to theAzure portal.
Sign in to theAzure portal.
Go to your Azure Spring AppsOverviewpage.
Go to your Azure Spring AppsOverviewpage.
SelectSpring Cloud Config Serverin the navigation pane.
SelectSpring Cloud Config Serverin the navigation pane.
In theDefault repositorysection, setURItohttps://github.com/Azure-Samples/piggymetrics-config.
In theDefault repositorysection, setURItohttps://github.com/Azure-Samples/piggymetrics-config.
SelectValidate.
SelectValidate.


When validation is complete, selectApplyto save your changes.
When validation is complete, selectApplyto save your changes.


Updating the configuration can take a few minutes. You should get a notification when the configuration is complete.
Enter repository information directly to the Azure portal
You can enter repository information for the default repository and, optionally, for extra repositories.
This section shows you how to enter repository information for a public or private repository. For a private repo, you can use Basic authentication or SSH.
Use the following steps to enter repo information for a public repository:
In theDefault repositorysection, in theUribox, paste the repository URI.
For theLabelsetting, enterconfig.
Ensure that theAuthenticationsetting isPublic.
SelectApply.
Use the following steps to enter repo information for a private repository using basic password/token-based authentication:
In theDefault repositorysection, in theUribox, paste the repository URI.
In theDefault repositorysection, in theUribox, paste the repository URI.
UnderAuthentication, selectEdit Authentication.
UnderAuthentication, selectEdit Authentication.
In theEdit Authenticationpane, on theAuthentication typedrop-down list, selectHTTP Basic.
In theEdit Authenticationpane, on theAuthentication typedrop-down list, selectHTTP Basic.
Enter your username and password/token to grant access to Azure Spring Apps.
Enter your username and password/token to grant access to Azure Spring Apps.
SelectOK, and then selectApplyto finish setting up your Config Server instance.NoteMany Git repository servers support the use of tokens rather than passwords for HTTP basic authentication. Some repositories allow tokens to persist indefinitely. However, some Git repository servers, including Azure DevOps Server, force tokens to expire in a few hours. Repositories that cause tokens to expire shouldn't use token-based authentication with Azure Spring Apps. If you use such a token, remember to update it before it expires.GitHub has removed support for password authentication, so you need to use a personal access token instead of password authentication for GitHub. For more information, seeToken authentication requirements for Git operations.
SelectOK, and then selectApplyto finish setting up your Config Server instance.

Note
Many Git repository servers support the use of tokens rather than passwords for HTTP basic authentication. Some repositories allow tokens to persist indefinitely. However, some Git repository servers, including Azure DevOps Server, force tokens to expire in a few hours. Repositories that cause tokens to expire shouldn't use token-based authentication with Azure Spring Apps. If you use such a token, remember to update it before it expires.
GitHub has removed support for password authentication, so you need to use a personal access token instead of password authentication for GitHub. For more information, seeToken authentication requirements for Git operations.
Use the following steps to enter repo information for a private repository using SSH:
In theDefault repositorysection, in theUribox, paste the repository URI.
In theDefault repositorysection, in theUribox, paste the repository URI.
UnderAuthentication, selectEdit Authentication.
UnderAuthentication, selectEdit Authentication.
On theEdit Authenticationpane, in theAuthentication typedrop-down list, selectSSH.
On theEdit Authenticationpane, in theAuthentication typedrop-down list, selectSSH.
Enter your private key. Optionally, specify your host key and host key algorithm.
Enter your private key. Optionally, specify your host key and host key algorithm.
Include your public key in your Config Server repository.
Include your public key in your Config Server repository.
SelectOK, and then selectApplyto finish setting up your Config Server instance.
SelectOK, and then selectApplyto finish setting up your Config Server instance.

If you want to configure your service with an optional extra repository, use the following steps:
Specify theUriandAuthenticationsettings as you did for the default repository. Be sure to include aNamesetting for your pattern.
SelectApplyto attach the repository to your instance.
Configure a Git repository by importing a YAML file
If you wrote a YAML file with your repository settings, you can import the file directly from your local machine to Azure Spring Apps. The following example shows a simple YAML file for a private repository with basic authentication:
spring:
  cloud:
    config:
      server:
        git:
          uri: https://github.com/azure-spring-apps-samples-pr/config-server-repository.git
          username: <username>
          password: <password/token>
spring:
  cloud:
    config:
      server:
        git:
          uri: https://github.com/azure-spring-apps-samples-pr/config-server-repository.git
          username: <username>
          password: <password/token>
Use the following steps to import a YAML file:
SelectImport settingsand then select the YAML file from your project directory. SelectImport.TheNotificationspane displays anasyncoperation. Config Server should report success after 1-2 minutes. The information from your YAML file displays in the Azure portal.
SelectImport settingsand then select the YAML file from your project directory. SelectImport.


TheNotificationspane displays anasyncoperation. Config Server should report success after 1-2 minutes. The information from your YAML file displays in the Azure portal.
async
SelectApplyto finish the import.
SelectApplyto finish the import.
Configure Azure Repos against Config Server
Azure Spring Apps can access Git repositories that are public, secured by SSH, or secured using HTTP basic authentication. HTTP basic authentication is the easiest of the options for creating and managing repositories with Azure Repos.
Get the repo URL and credentials
Use the following steps to get your repo URL and credentials:
In the Azure Repos portal for your project, selectClone.
In the Azure Repos portal for your project, selectClone.
Copy the clone URL from the textbox. This URL is typically in the following form:https://<organization name>@dev.azure.com/<organization name>/<project name>/_git/<repository name>Remove everything afterhttps://and beforedev.azure.com, including the@symbol. The resulting URL should be in the following form:https://dev.azure.com/<organization name>/<project name>/_git/<repository name>Save this URL to use later.
Copy the clone URL from the textbox. This URL is typically in the following form:
https://<organization name>@dev.azure.com/<organization name>/<project name>/_git/<repository name>
https://<organization name>@dev.azure.com/<organization name>/<project name>/_git/<repository name>
Remove everything afterhttps://and beforedev.azure.com, including the@symbol. The resulting URL should be in the following form:
https://
dev.azure.com
@
https://dev.azure.com/<organization name>/<project name>/_git/<repository name>
https://dev.azure.com/<organization name>/<project name>/_git/<repository name>
Save this URL to use later.
SelectGenerate Git Credentialsto display a username and password. Save this username and password to use in the following section.
SelectGenerate Git Credentialsto display a username and password. Save this username and password to use in the following section.
Configure a Git repository against Config Server
Use the following steps to configure the repo:
Sign in to theAzure portal.
Sign in to theAzure portal.
Go to your Azure Spring AppsOverviewpage.
Go to your Azure Spring AppsOverviewpage.
Select the service to configure.
Select the service to configure.
In the left pane of the service page underSettings, select theSpring Cloud Config Servertab.
In the left pane of the service page underSettings, select theSpring Cloud Config Servertab.
Use the following steps to configure the repository you created:Add the repository URI that you saved earlier.Select the setting underAuthenticationto open theEdit Authenticationpane.ForAuthentication type, selectHTTP Basic.ForUsername, specify the user name that you saved earlier.ForPassword, specify the password that you saved earlier.SelectOK, and then wait for the operation to complete.
Use the following steps to configure the repository you created:
Add the repository URI that you saved earlier.
Select the setting underAuthenticationto open theEdit Authenticationpane.
ForAuthentication type, selectHTTP Basic.
ForUsername, specify the user name that you saved earlier.
ForPassword, specify the password that you saved earlier.
SelectOK, and then wait for the operation to complete.

Bind an app to Spring Cloud Config Server
Use the following command to bind an app to Spring Cloud Config Server, enabling the app to pull configurations from Config Server.
az spring config-server bind \
    --resource-group <resource-group> \
    --service <service-name> \
    --app <app-name>
az spring config-server bind \
    --resource-group <resource-group> \
    --service <service-name> \
    --app <app-name>
You can also set up the app binding from the Azure portal, as shown in the following screenshot:

Note
These changes take a few minutes to propagate to all applications when the config server status changes.
If you change the binding/unbinding status, you need to restart or redeploy the application.
You can now choose to bind your application to the Spring Cloud Config Server directly when creating a new app by using the following command:
az spring app create \ 
    --resource-group <resource-group> \ 
    --service <service-name> \ 
    --name <app-name> \ 
    --bind-config-server
az spring app create \ 
    --resource-group <resource-group> \ 
    --service <service-name> \ 
    --name <app-name> \ 
    --bind-config-server
You can also bind your application to the Spring Cloud Config Server from the Azure portal, as shown in the following screenshot:

Delete your configuration
SelectReseton theSpring Cloud Config Servertab to erase your existing settings. Delete the config server settings if you want to connect your Config Server instance to another source, such as when you're moving from GitHub to Azure DevOps Server.
Refresh Config Server
When properties are changed, services consuming those properties must be notified before changes can be made. The default solution for Spring Cloud Config Server is to manually trigger the refresh event, which might not be feasible if there are many app instances. For more information, seeCentralized Configuration
Instead, you can automatically refresh values from Config Server by letting the config client poll for changes based on a refresh internal.
Use the following steps to automatically refresh values from Config Server:
Register a scheduled task to refresh the context in a given interval, as shown in the following example:@ConditionalOnBean({RefreshEndpoint.class})
@Configuration
@AutoConfigureAfter({RefreshAutoConfiguration.class, RefreshEndpointAutoConfiguration.class})
@EnableScheduling
public class ConfigClientAutoRefreshConfiguration implements SchedulingConfigurer {
    @Value("${spring.cloud.config.refresh-interval:60}")
    private long refreshInterval;
    @Value("${spring.cloud.config.auto-refresh:false}")
    private boolean autoRefresh;
    private RefreshEndpoint refreshEndpoint;
    public ConfigClientAutoRefreshConfiguration(RefreshEndpoint refreshEndpoint) {
        this.refreshEndpoint = refreshEndpoint;
    }
    @Override
    public void configureTasks(ScheduledTaskRegistrar scheduledTaskRegistrar) {
        if (autoRefresh) {
            // set minimal refresh interval to 5 seconds
            refreshInterval = Math.max(refreshInterval, 5);
            scheduledTaskRegistrar.addFixedRateTask(() -> refreshEndpoint.refresh(), refreshInterval * 1000);
        }
    }
}
Register a scheduled task to refresh the context in a given interval, as shown in the following example:
@ConditionalOnBean({RefreshEndpoint.class})
@Configuration
@AutoConfigureAfter({RefreshAutoConfiguration.class, RefreshEndpointAutoConfiguration.class})
@EnableScheduling
public class ConfigClientAutoRefreshConfiguration implements SchedulingConfigurer {
    @Value("${spring.cloud.config.refresh-interval:60}")
    private long refreshInterval;
    @Value("${spring.cloud.config.auto-refresh:false}")
    private boolean autoRefresh;
    private RefreshEndpoint refreshEndpoint;
    public ConfigClientAutoRefreshConfiguration(RefreshEndpoint refreshEndpoint) {
        this.refreshEndpoint = refreshEndpoint;
    }
    @Override
    public void configureTasks(ScheduledTaskRegistrar scheduledTaskRegistrar) {
        if (autoRefresh) {
            // set minimal refresh interval to 5 seconds
            refreshInterval = Math.max(refreshInterval, 5);
            scheduledTaskRegistrar.addFixedRateTask(() -> refreshEndpoint.refresh(), refreshInterval * 1000);
        }
    }
}
@ConditionalOnBean({RefreshEndpoint.class})
@Configuration
@AutoConfigureAfter({RefreshAutoConfiguration.class, RefreshEndpointAutoConfiguration.class})
@EnableScheduling
public class ConfigClientAutoRefreshConfiguration implements SchedulingConfigurer {
    @Value("${spring.cloud.config.refresh-interval:60}")
    private long refreshInterval;
    @Value("${spring.cloud.config.auto-refresh:false}")
    private boolean autoRefresh;
    private RefreshEndpoint refreshEndpoint;
    public ConfigClientAutoRefreshConfiguration(RefreshEndpoint refreshEndpoint) {
        this.refreshEndpoint = refreshEndpoint;
    }
    @Override
    public void configureTasks(ScheduledTaskRegistrar scheduledTaskRegistrar) {
        if (autoRefresh) {
            // set minimal refresh interval to 5 seconds
            refreshInterval = Math.max(refreshInterval, 5);
            scheduledTaskRegistrar.addFixedRateTask(() -> refreshEndpoint.refresh(), refreshInterval * 1000);
        }
    }
}
Enable autorefresh and set the appropriate refresh interval in yourapplication.ymlfile. In the following example, the client polls for configuration changes every 60 seconds, which is the minimum value you can set for a refresh interval.By default, autorefresh is set tofalseand the refresh-interval is set to60 seconds.spring:
    cloud:
         config:
          auto-refresh: true
          refresh-interval: 60
management:
    endpoints:
         web:
          exposure:
            include:
              - refresh
Enable autorefresh and set the appropriate refresh interval in yourapplication.ymlfile. In the following example, the client polls for configuration changes every 60 seconds, which is the minimum value you can set for a refresh interval.
By default, autorefresh is set tofalseand the refresh-interval is set to60 seconds.
false
60 seconds
spring:
    cloud:
         config:
          auto-refresh: true
          refresh-interval: 60
management:
    endpoints:
         web:
          exposure:
            include:
              - refresh
spring:
    cloud:
         config:
          auto-refresh: true
          refresh-interval: 60
management:
    endpoints:
         web:
          exposure:
            include:
              - refresh
Add@RefreshScopeto your code. In the following example, the variableconnectTimeoutis automatically refreshed every 60 seconds.@RestController
@RefreshScope
public class HelloController {
    @Value("${timeout:4000}")
    private String connectTimeout;
}
Add@RefreshScopeto your code. In the following example, the variableconnectTimeoutis automatically refreshed every 60 seconds.
@RefreshScope
connectTimeout
@RestController
@RefreshScope
public class HelloController {
    @Value("${timeout:4000}")
    private String connectTimeout;
}
@RestController
@RefreshScope
public class HelloController {
    @Value("${timeout:4000}")
    private String connectTimeout;
}
For more information, see theconfig-client-pollingsample.
Manage Spring Cloud Config Server in an existing Enterprise plan instance
You can enable and disable Spring Cloud Config Server after service creation using the Azure portal or Azure CLI. Before disabling Spring Cloud Config Server, you're required to unbind all of your apps from it.
Azure portal
Azure CLI
Use the following steps to enable or disable Spring Cloud Config Server:
Navigate to your service instance and then selectSpring Cloud Config Server.
Navigate to your service instance and then selectSpring Cloud Config Server.
SelectManage.
SelectManage.
Select or unselectEnable Spring Cloud Config Server, and then selectSave.
Select or unselectEnable Spring Cloud Config Server, and then selectSave.

You can now view the state of Spring Cloud Config Server on theSpring Cloud Config Serverpage.
You can now view the state of Spring Cloud Config Server on theSpring Cloud Config Serverpage.
Use the following Azure CLI commands to enable or disable Spring Cloud Config Server:
az spring config-server create \
    --resource-group <resource-group-name> \
    --service <Azure-Spring-Apps-service-instance-name>
az spring config-server create \
    --resource-group <resource-group-name> \
    --service <Azure-Spring-Apps-service-instance-name>
az spring config-server delete \
    --resource-group <resource-group-name> \
    --service <Azure-Spring-Apps-service-instance-name>
az spring config-server delete \
    --resource-group <resource-group-name> \
    --service <Azure-Spring-Apps-service-instance-name>
Related content
Azure Spring Apps
Feedback
Was this page helpful?
Additional resources