Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
About permissions and security groups
Article
2025-02-18
20 contributors
In this article
Azure DevOps Services | Azure DevOps Server 2022 - Azure DevOps Server 2019
In this article, learn about access levels and permissions via inheritance, security groups, roles, and more in Azure DevOps.
For an overview of default permissions, seeDefault permissions quick reference.
For more information, seeSecurity overview.
Access levels
All Azure DevOps users have anaccess level, which grants or restricts access to specific web portal features.
There are three main access levels:Stakeholder,Basic, andBasic + Test Plans.
Stakeholder access provides free access to an unlimited number of users with a limited set of features. Use this access level for users who donât need paid access.
Don't use Stakeholder access instead of more limited permissions. Users with a Visual Studio subscription or a GitHub Enterprise license automatically get upgraded from Stakeholder to Basic access when they sign in. For more information, seeStakeholder access quick reference.
To give a user access to Agile portfolio management or test case management features,change access levels, not permissions. For more information, seeAbout access levels.
Permissions
All users in Azure DevOps belong to one or more defaultsecurity groups. Security groups get assignedpermissionsthat eitherAlloworDenyaccess to features or tasks.
Members inherit the permissions assigned to their security group.
Permissions get defined at different levels: organization/collection, project, or object.
Some permissions get managed throughrole-based assignments(for example, team administrator, extension management, or pipeline resource roles).
Administrators can define custom security groups to manage permissions for different functional areas.
Managing permissions in Azure DevOps involves two key groups: Project Collection Administrators and Project Administrators.
Project Collection Administrators:
Hold the highest authority within an organization or project collection.
Perform all operations for the entire collection.
Manage settings, policies, and processes for the organization.
Create and manage all projects and extensions.
Project Administrators:
Operate at the project level.
Manage security groups and permissions from the Project settings in the web portal.
Handle permissions for specific objects contributors create within the project.
Permission states
Assign permissions to grant or restrict access:
User or group has permission:
Allow
Allow (inherited)
Allow (system)
User or group doesn't have permission:
Deny
Deny (inherited)
Deny (system)
Not set
Members of theProject Collection AdministratorsorTeam Foundation Administratorsgroups might always receive permissions even if denied in another group. The following examples explain this scenario further:
A user might still access project settings or manage users. However, for tasks like work item deletion or pipeline management, being a member of the Project Collection Administrators group doesn't overrideDenypermissions set elsewhere.
If a user is denied permission to delete work items in a specific project, they can't delete work items even if they're part of the Project Collection Administrators group. Similarly, if pipeline permissions are denied, they can't manage or run pipelines despite their administrative role.
Warning
When you modify a permission for a group it affects all users in that group. Even a single permission change can impact hundreds of users, so itâs crucial to consider the potential effects before making any adjustments.
Permission inheritance
Permissions follow a hierarchy, allowing inheritance from a parent node or overriding it.
Group inheritance:
Users inherit permissions from the groups they belong to.
If a user has anAllowpermission directly or through group membership but also has aDenypermission through another group, theDenypermission takes precedence.
Members of Project Collection Administrators or Team Foundation Administrators retain most allowed permissions, even if they belong to other groups that deny those permissions (except for work item operations).
Object-level inheritance:
Object-level permissions, assigned to nodes like areas, iterations, version control folders, and work item query folders, get inherited down the hierarchy.
Permission inheritance and specificity rules:
Explicit permissions always take precedence over inherited ones.
Permissions set at a higher-level node get inherited by all subnodes unless explicitly overridden.
If a permission isn't explicitly allowed or denied for a subnode, it inherits the permission from its parent.
If a permission is explicitly set for a subnode, the parentâs permission isn't inherited, regardless of whether allowed or denied.
Specificity:
In the object hierarchy, specificity trumps inheritance. The most specific permission takes precedence if conflicting permissions exist.
Example:
ExplicitlyDenyon âarea-1â (parent node).
ExplicitlyAllowfor âarea-1/sub-area-1â (child node).
In this case, the user receives anAllowon âarea-1/sub-area-1â, overriding the inheritedDenyfrom the parent node.
To understand why a permission is inherited, you can pause over a permission setting, and then selectWhy?To open aSecuritypage, seeView permissions.
Note
To enable theProject Permissions settings pagepreview page, seeEnable preview features.
Preview page
Current page

A new dialog opens that shows the inheritance information for that permission.
The preview user interface for the Project Permissions settings page isn't available for Azure DevOps Server 2020 and earlier versions.

A new window shows the inheritance information for that permission.

Security groups and membership
Security groups assign specific permissions to their members.
With the creation of an organization, collection, or projectâAzure DevOps creates a set of default security groups, which are automatically assigned default permissions. More security groups are defined with the following actions:
When you create custom security groups at the following levels:Project-levelOrganization- or collection-levelServer-level (on-premises only)
Project-level
Organization- or collection-level
Server-level (on-premises only)
When you add a team, a team security group gets created
You can't create an object-level security group, but you can assign a custom group to an object-level and assign permissions to that level. For more information, seeSet object-level permissions.
Default security groups
Most Azure DevOps users get added to theContributorssecurity group and grantedBasicaccess level. TheContributorsgroup provides read and write access to repositories, work tracking, pipelines, and more.Basicaccess provides access to all features and tasks for using Azure Boards, Azure Repos, Azure Pipelines, and Azure Artifacts. Users who require access to manage Azure Test Plans need to be grantedBasic + Test PlansorAdvancedaccess.
The following security groups are defined by default for each project and organization. You typically add users or groups to theReaders,Contributors, orProject Administratorsgroups.
For a description of each of these groups, seeSecurity groups, service accounts, and permissions. For default permission assignments made to the most common default security groups, seeDefault permissions and access.
The following security groups are defined by default for each project and project collection. You typically add users or groups to theReaders,Contributors, orProject Administratorsgroups.
Only add service accounts toAzure DevOps service account groups. To understand valid user groups, seeValid user groupslater in this article.
For users tasked with managing project-level featuresâsuch as, teams, area and iteration paths, repositories, service hooks, and service end pointsâadd them to theProject Administratorsgroup.
For users tasked with managing organization or collection-level featuresâsuch as, projects, policies, processes, retention policies, agent and deployment pools, and extensionsâadd them to theProject Collection Administratorsgroup. For more information, seeAbout user, team, project, and organization-level settings.
Membership, permission, and access level management
Azure DevOps controls access through these three inter-connected functional areas:
Membership managementsupports adding individual user accounts and groups to default security groups. Each default group is associated with a set of default permissions. All users added to any security group are added to the Valid Users group. A valid user is someone who can connect to a project, collection, or organization.
Permission managementcontrols access to specific functional tasks at different levels of the system. Object-level permissions set permissions on a file, folder, build pipeline, or a shared query. Permission settings correspond toAllow,Deny,Inherited allow,Inherited deny,System allow,System deny, andNot set.
Access level managementcontrols access to web portal features. Based on purchased for a user, administrators set the user's access level toStakeholder,Basic,Basic + Test, orVisual Studio Enterprise(previouslyAdvanced).
Each functional area uses security groups to simplify management across the deployment. You add users and groups through the web administration context. Permissions are automatically set based on the security group that you add users to. Or permissions get based on the object, project, collection, or server level to which you add groups.
Security group members can be a combination of users, other groups, and Microsoft Entra groups.
Security group members can be a combination of users, other groups, and Active Directory groups or a Workgroup.
You can createlocal groups or Active Directory (AD) groups to manage your users.
Active Directory and Microsoft Entra security groups
You can populate security groups by adding individual users. But, for ease of management, it's more efficient to populate these groups using Microsoft Entra ID for Azure DevOps Services and Active Directory (AD) or Windows user groups for Azure DevOps Server. This approach allows you to manage group membership and permissions more effectively across multiple computers.
If you only need to manage a small set of users, you can skip this step. But, if you anticipate that your organization might grow, consider setting up Active Directory or Microsoft Entra ID. Also, if you plan to use extra services, it's essential to configure Microsoft Entra ID for use with Azure DevOps to support billing.
Note
Without Microsoft Entra ID, all Azure DevOps users must sign in using Microsoft accounts, and you must manage account access by individual user accounts. Even if you manage account access using Microsoft accounts, set up anAzure subscription to manage billing.
To set up Microsoft Entra ID for use with Azure DevOps Services, seeConnect your organization to Microsoft Entra ID.
When your organization is connected to Microsoft Entra ID, you can define and manage various organization policies to enhance security and streamline access to applications. For more information, seeAbout security, Security-policies.
To manage organizational access with Microsoft Entra ID, see the following articles:
Add or delete users using Microsoft Entra ID
Troubleshoot access with Microsoft Entra ID
Azure DevOps registers the changes that get made to a Microsoft Entra group within an hour of that change in Microsoft Entra ID. Any inherited permissions via group membership get refreshed. To refresh your Microsoft Entra membership and inherited permissions in Azure DevOps, sign out and then sign back in, ortrigger a refresh to reevaluate your permission.
To set up Active Directory for use with Azure DevOps Server, see the following articles:
Install Active Directory Domain Services (Level 100)
Active Directory Domain Services Getting Started.
Install Active Directory before you install Azure DevOps Server.
Valid user groups
When you add accounts of users directly to a security group, they automatically get added to one of the following valid user groups.
Project Collection Valid Users:All members added to an organization-level group.
Project Valid Users:All members added to a project-level group.
Server\Azure DevOps Valid Users: All members added to server-level groups.
ProjectCollectionName\Project Collection Valid Users: All members added to collection-level groups.
ProjectName\Project Valid Users: All members added to project-level groups.
The default permissions assigned to these groups primarily provide read access, such asView build resources,View project-level information, andView collection-level information.
All users you add to one project can view the objects in other projects within a collection.
To restrict view access, you canset restrictions through the area path node.
If you remove or deny theView instance-level informationpermission for one of the Valid Users groups,
no members of the group are able to access the project, collection, or deployment, depending on the group you set.
Project-scoped users group
By default, users added to an organization can view all organization and project information and settings. These settings include the list of users, the list of projects, billing details, usage data, and more, which you can access throughOrganization settings.
To restrict specific users, such as Stakeholders, Microsoft Entra guest users, or members of a particular security group, you can enable theLimit user visibility and collaboration to specific projectspreview feature for the organization. Once enabled, any user or group added to theProject-scoped Usersgroup is restricted from accessing theOrganization settingspages, except forOverviewandProjects. Also, they only have access to the projects to which they're added.
Warning
Consider the following limitations when using this preview feature:
The limited visibility features described in this section apply only to interactions through the web portal. With the REST APIs orazure devopsCLI commands, project members can access the restricted data.
azure devops
Users in the limited group can only select users who are explicitly added to Azure DevOps and not users who have access through Microsoft Entra group membership.
Guest users who are members in the limited group with default access in Microsoft Entra ID, can't search for users with the people picker.
For more information, seeManage preview features.
Note
Security groups are managed at the organization level, even if they are used for specific projects. Depending on user permissions, some groups might be hidden in the web portal. To view all group names within an organization, you can use the Azure DevOps CLI tool or our REST APIs.  For more information, seeAdd and manage security groups.
Note
Security groups are managed at the collection level, even if they are used for specific projects. Depending on user permissions, some groups might be hidden in the web portal. To view all group names within a collection, you can use the Azure DevOps CLI tool or our REST APIs.  For more information, seeAdd and manage security groups.

Role-based permissions
With Role-based permissions, you assign user accounts or security groups to a role, with each role assigned one or more permissions. Here are the primary roles and links to more information.
Artifact or package feed security roles: Roles support various permission levels to edit and manage package feeds.
Marketplace extension Manager role: Members of the Manager role can install extensions and respond to requests for extensions to be installed.
Pipeline security roles: Several roles are used to manage library resources, project-level, and collection-level pipeline resources.
Team administrator roleTeam administrators are able to manage all team tools.
For more information, seeAbout security roles.
The following image illustrates how security groups defined at the project and collection level can assign permissions to objects, projects, and the organization.

The following image illustrates how security groups defined at the project and collection-level can be assigned to permissions assigned at the object, project, and collection level. You can only define server-level security groups to server-level permissions.

Members of the Project Administrators or Project Collection Administrators groups can manage all team tools for all teams.
Preview features
Feature flags control access to new features. Azure DevOps periodically introduces new features behind a feature flag. Project members and organization owners can enable or disable preview features. For more information, seeManage or enable features.
Next steps
Default permissions and access
Related articles
Troubleshoot access and permission issues
Learn about security, authentication, and authorization
Reference permissions and groups
Add and manage security groups
Get started with AD DS
Reference permissions and groups
Add users to a team or a project
Add and manage security groups
Feedback
Was this page helpful?
Additional resources