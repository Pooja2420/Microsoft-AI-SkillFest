Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Deploy Spring Boot applications using Maven
Article
2025-02-26
2 contributors
In this article
Note
TheBasic,Standard, andEnterpriseplans entered a retirement period on March 17, 2025. For more information, see theAzure Spring Apps retirement announcement.
TheStandard consumption and dedicatedplan entered a retirement period on September 30, 2024, with a complete shutdown by the end of March 2025. For more information, seeMigrate Azure Spring Apps Standard consumption and dedicated plan to Azure Container Apps.
This article applies to:â Java â C#
This article applies to:â Basic/Standard â Enterprise
This article shows you how to use the Azure Spring Apps Maven plugin to configure and deploy applications to Azure Spring Apps.
Prerequisites
An Azure account with an active subscription.Create an account for free.
An already provisioned Azure Spring Apps instance.
JDK 8 or JDK 11
Apache Maven
Azure CLI version 2.45.0 or higherwith the Azure Spring Apps extension. You can install the extension by using the following command:az extension add --name spring
az extension add --name spring
Generate a Spring project
To create a Spring project for use in this article, use the following steps:
Navigate toSpring Initializrto generate a sample project with the recommended dependencies for Azure Spring Apps. This link uses the following URL to provide default settings for you.https://start.spring.io/#!type=maven-project&language=java&platformVersion=2.5.7&packaging=jar&jvmVersion=1.8&groupId=com.example&artifactId=hellospring&name=hellospring&description=Demo%20project%20for%20Spring%20Boot&packageName=com.example.hellospring&dependencies=web,cloud-eureka,actuator,cloud-config-clientThe following image shows the recommended Spring Initializr setup for this sample project.This example uses Java version 8. If you want to use Java version 11, change the option underProject Metadata.
Navigate toSpring Initializrto generate a sample project with the recommended dependencies for Azure Spring Apps. This link uses the following URL to provide default settings for you.
https://start.spring.io/#!type=maven-project&language=java&platformVersion=2.5.7&packaging=jar&jvmVersion=1.8&groupId=com.example&artifactId=hellospring&name=hellospring&description=Demo%20project%20for%20Spring%20Boot&packageName=com.example.hellospring&dependencies=web,cloud-eureka,actuator,cloud-config-client
https://start.spring.io/#!type=maven-project&language=java&platformVersion=2.5.7&packaging=jar&jvmVersion=1.8&groupId=com.example&artifactId=hellospring&name=hellospring&description=Demo%20project%20for%20Spring%20Boot&packageName=com.example.hellospring&dependencies=web,cloud-eureka,actuator,cloud-config-client
The following image shows the recommended Spring Initializr setup for this sample project.

This example uses Java version 8. If you want to use Java version 11, change the option underProject Metadata.
SelectGeneratewhen all the dependencies are set.
SelectGeneratewhen all the dependencies are set.
Download and unpack the package, then create a web controller for a web application. Add the filesrc/main/java/com/example/hellospring/HelloController.javawith the following contents:package com.example.hellospring;

import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestMapping;

@RestController
public class HelloController {

    @RequestMapping("/")
    public String index() {
        return "Greetings from Azure Spring Apps!";
    }

}
Download and unpack the package, then create a web controller for a web application. Add the filesrc/main/java/com/example/hellospring/HelloController.javawith the following contents:
package com.example.hellospring;

import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestMapping;

@RestController
public class HelloController {

    @RequestMapping("/")
    public String index() {
        return "Greetings from Azure Spring Apps!";
    }

}
package com.example.hellospring;

import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestMapping;

@RestController
public class HelloController {

    @RequestMapping("/")
    public String index() {
        return "Greetings from Azure Spring Apps!";
    }

}
Build the Spring applications locally
To build the project by using Maven, run the following commands:
cd hellospring
mvn clean package -DskipTests -Denv=cloud
cd hellospring
mvn clean package -DskipTests -Denv=cloud
Compiling the project takes several minutes. After it's completed, you should have individual JAR files for each service in their respective folders.
Provision an instance of Azure Spring Apps
The following procedure creates an instance of Azure Spring Apps using the Azure portal.
In a new tab, open theAzure portal.
In a new tab, open theAzure portal.
From the top search box, search forAzure Spring Apps.
From the top search box, search forAzure Spring Apps.
SelectAzure Spring Appsfrom the results.
SelectAzure Spring Appsfrom the results.
On the Azure Spring Apps page, selectCreate.
On the Azure Spring Apps page, selectCreate.

Fill out the form on the Azure Spring AppsCreatepage.  Consider the following guidelines:Subscription: Select the subscription you want to be billed for this resource.Resource group: Creating new resource groups for new resources is a best practice. You will use this resource group in later steps as<resource group name>.Service Details/Name: Specify the<service instance name>.  The name must be between 4 and 32 characters long and can contain only lowercase letters, numbers, and hyphens.  The first character of the service name must be a letter and the last character must be either a letter or a number.Location: Select the region for your service instance.
Fill out the form on the Azure Spring AppsCreatepage.  Consider the following guidelines:
Subscription: Select the subscription you want to be billed for this resource.
Resource group: Creating new resource groups for new resources is a best practice. You will use this resource group in later steps as<resource group name>.
Service Details/Name: Specify the<service instance name>.  The name must be between 4 and 32 characters long and can contain only lowercase letters, numbers, and hyphens.  The first character of the service name must be a letter and the last character must be either a letter or a number.
Location: Select the region for your service instance.

SelectReview and create.
SelectReview and create.
Generate configurations and deploy to the Azure Spring Apps
To generate configurations and deploy the app, follow these steps:
Run the following command from thehellospringroot folder, which contains the POM file. If you've already signed-in with Azure CLI, the command will automatically pick up the credentials. Otherwise, the command will prompt you with sign-in instructions. For more information, seeAuthenticationin theazure-maven-pluginsrepository on GitHub.mvn com.microsoft.azure:azure-spring-apps-maven-plugin:1.10.0:configYou'll be asked to select:Subscription ID- the subscription you used to create an Azure Spring Apps instance.Service instance- the name of your Azure Spring Apps instance.App name- an app name of your choice, or use the default valueartifactId.Public endpoint-trueto expose the app to public access; otherwise,false.
Run the following command from thehellospringroot folder, which contains the POM file. If you've already signed-in with Azure CLI, the command will automatically pick up the credentials. Otherwise, the command will prompt you with sign-in instructions. For more information, seeAuthenticationin theazure-maven-pluginsrepository on GitHub.
mvn com.microsoft.azure:azure-spring-apps-maven-plugin:1.10.0:config
mvn com.microsoft.azure:azure-spring-apps-maven-plugin:1.10.0:config
You'll be asked to select:
Subscription ID- the subscription you used to create an Azure Spring Apps instance.
Service instance- the name of your Azure Spring Apps instance.
App name- an app name of your choice, or use the default valueartifactId.
Public endpoint-trueto expose the app to public access; otherwise,false.
Verify that theappNameelement in the POM file has the correct value. The relevant portion of the POM file should look similar to the following example.<build>
    <plugins>
        <plugin>
            <groupId>com.microsoft.azure</groupId>
            <artifactId>azure-spring-apps-maven-plugin</artifactId>
            <version>1.10.0</version>
            <configuration>
                <subscriptionId>xxxxxxxxx-xxxx-xxxx-xxxxxxxxxxxx</subscriptionId>
                <clusterName>v-spr-cld</clusterName>
                <appName>hellospring</appName>The POM file now contains the plugin dependencies and configurations.
Verify that theappNameelement in the POM file has the correct value. The relevant portion of the POM file should look similar to the following example.
appName
<build>
    <plugins>
        <plugin>
            <groupId>com.microsoft.azure</groupId>
            <artifactId>azure-spring-apps-maven-plugin</artifactId>
            <version>1.10.0</version>
            <configuration>
                <subscriptionId>xxxxxxxxx-xxxx-xxxx-xxxxxxxxxxxx</subscriptionId>
                <clusterName>v-spr-cld</clusterName>
                <appName>hellospring</appName>
<build>
    <plugins>
        <plugin>
            <groupId>com.microsoft.azure</groupId>
            <artifactId>azure-spring-apps-maven-plugin</artifactId>
            <version>1.10.0</version>
            <configuration>
                <subscriptionId>xxxxxxxxx-xxxx-xxxx-xxxxxxxxxxxx</subscriptionId>
                <clusterName>v-spr-cld</clusterName>
                <appName>hellospring</appName>
The POM file now contains the plugin dependencies and configurations.
Deploy the app using the following command.mvn azure-spring-apps:deploy
Deploy the app using the following command.
mvn azure-spring-apps:deploy
mvn azure-spring-apps:deploy
Verify the services
After deployment has completed, you can access the app athttps://<service instance name>-hellospring.azuremicroservices.io/.
https://<service instance name>-hellospring.azuremicroservices.io/

Clean up resources
If you plan to continue working with the example application, you might want to leave the resources in place. When no longer needed, delete the resource group containing your Azure Spring Apps instance. To delete the resource group by using Azure CLI, use the following commands:
echo "Enter the Resource Group name:" &&
read resourceGroupName &&
az group delete --name $resourceGroupName &&
echo "Press [ENTER] to continue ..."
echo "Enter the Resource Group name:" &&
read resourceGroupName &&
az group delete --name $resourceGroupName &&
echo "Press [ENTER] to continue ..."
Next steps
Prepare Spring application for Azure Spring Apps
Learn more about Azure Spring Apps Maven Plugin
Feedback
Was this page helpful?
Additional resources