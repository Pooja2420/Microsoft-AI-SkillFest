Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Authorize developer accounts by using Microsoft Entra ID in Azure API Management
Article
2024-09-20
27 contributors
In this article
APPLIES TO: Developer | Basic v2 | Standard | Standard v2 | Premium | Premium v2
In this article, you'll learn how to:
Enable access to the developer portal for users from Microsoft Entra ID.
Manage groups of Microsoft Entra users by adding external groups that contain the users.
For an overview of options to secure the developer portal, seeSecure access to the API Management developer portal.
Important
This article has been updated with steps to configure a Microsoft Entra app using the Microsoft Authentication Library (MSAL).
If you previously configured a Microsoft Entra app for user sign-in using the Azure AD Authentication Library (ADAL), we recommend that youmigrate to MSAL.
Prerequisites
Complete theCreate an Azure API Management instancequickstart.
Complete theCreate an Azure API Management instancequickstart.
Import and publishan API in the Azure API Management instance.
Import and publishan API in the Azure API Management instance.
If you created your instance in a v2 tier, enable the developer portal. For more information, seeTutorial: Access and customize the developer portal.
If you created your instance in a v2 tier, enable the developer portal. For more information, seeTutorial: Access and customize the developer portal.
Use the Bash environment inAzure Cloud Shell. For more information, seeGet started with Azure Cloud Shell.
Use the Bash environment inAzure Cloud Shell. For more information, seeGet started with Azure Cloud Shell.

If you prefer to run CLI reference commands locally,installthe Azure CLI. If you're running on Windows or macOS, consider running Azure CLI in a Docker container. For more information, seeHow to run the Azure CLI in a Docker container.If you're using a local installation, sign in to the Azure CLI by using theaz logincommand. To finish the authentication process, follow the steps displayed in your terminal. For other sign-in options, seeAuthenticate to Azure using Azure CLI.When you're prompted, install the Azure CLI extension on first use. For more information about extensions, seeUse and manage extensions with the Azure CLI.Runaz versionto find the version and dependent libraries that are installed. To upgrade to the latest version, runaz upgrade.
If you prefer to run CLI reference commands locally,installthe Azure CLI. If you're running on Windows or macOS, consider running Azure CLI in a Docker container. For more information, seeHow to run the Azure CLI in a Docker container.
If you're using a local installation, sign in to the Azure CLI by using theaz logincommand. To finish the authentication process, follow the steps displayed in your terminal. For other sign-in options, seeAuthenticate to Azure using Azure CLI.
If you're using a local installation, sign in to the Azure CLI by using theaz logincommand. To finish the authentication process, follow the steps displayed in your terminal. For other sign-in options, seeAuthenticate to Azure using Azure CLI.
When you're prompted, install the Azure CLI extension on first use. For more information about extensions, seeUse and manage extensions with the Azure CLI.
When you're prompted, install the Azure CLI extension on first use. For more information about extensions, seeUse and manage extensions with the Azure CLI.
Runaz versionto find the version and dependent libraries that are installed. To upgrade to the latest version, runaz upgrade.
Runaz versionto find the version and dependent libraries that are installed. To upgrade to the latest version, runaz upgrade.
Go to your API Management instance
In the Azureportal, search for and selectAPI Management services:
In the Azureportal, search for and selectAPI Management services:

On theAPI Management servicespage, select your API Management instance:
On theAPI Management servicespage, select your API Management instance:


Enable user sign-in using Microsoft Entra ID - portal
To simplify the configuration, API Management can automatically enable a Microsoft Entra application and identity provider for users of the developer portal. Alternatively, you can manually enable the Microsoft Entra application and identity provider.

Automatically enable Microsoft Entra application and identity provider
In the left menu of your API Management instance, underDeveloper portal, selectPortal overview.
In the left menu of your API Management instance, underDeveloper portal, selectPortal overview.
On thePortal overviewpage, scroll down toEnable user sign-in with Microsoft Entra ID.
On thePortal overviewpage, scroll down toEnable user sign-in with Microsoft Entra ID.
SelectEnable Microsoft Entra ID.
SelectEnable Microsoft Entra ID.
On theEnable Microsoft Entra IDpage, selectEnable Microsoft Entra ID.
On theEnable Microsoft Entra IDpage, selectEnable Microsoft Entra ID.
SelectClose.
SelectClose.

After the Microsoft Entra provider is enabled:
Users in the specified Microsoft Entra instance cansign into the developer portal by using a Microsoft Entra account.
You can manage the Microsoft Entra configuration on theDeveloper portal>Identitiespage in the portal.
Optionally configure other sign-in settings by selectingIdentities>Settings. For example, you might want to redirect anonymous users to the sign-in page.
Republish the developer portal after any configuration change.

Manually enable Microsoft Entra application and identity provider
In the left menu of your API Management instance, underDeveloper portal, selectIdentities.
In the left menu of your API Management instance, underDeveloper portal, selectIdentities.
Select+Addfrom the top to open theAdd identity providerpane to the right.
Select+Addfrom the top to open theAdd identity providerpane to the right.
UnderType, selectMicrosoft Entra IDfrom the drop-down menu. Once selected, you'll be able to enter other necessary information.In theClient librarydropdown, selectMSAL.To addClient IDandClient secret, see steps later in the article.
UnderType, selectMicrosoft Entra IDfrom the drop-down menu. Once selected, you'll be able to enter other necessary information.
In theClient librarydropdown, selectMSAL.
To addClient IDandClient secret, see steps later in the article.
Save theRedirect URLfor later.
Save theRedirect URLfor later.

In your browser, open the Azure portal in a new tab.
In your browser, open the Azure portal in a new tab.
Navigate toApp registrationsto register an app in Active Directory.
Navigate toApp registrationsto register an app in Active Directory.
SelectNew registration. On theRegister an applicationpage, set the values as follows:SetNameto a meaningful name such asdeveloper-portalSetSupported account typestoAccounts in any organizational directory.InRedirect URI, selectSingle-page application (SPA)and paste the redirect URL you saved from a previous step.SelectRegister.
SelectNew registration. On theRegister an applicationpage, set the values as follows:
SetNameto a meaningful name such asdeveloper-portal
SetSupported account typestoAccounts in any organizational directory.
InRedirect URI, selectSingle-page application (SPA)and paste the redirect URL you saved from a previous step.
SelectRegister.
After you've registered the application, copy theApplication (client) IDfrom theOverviewpage.
After you've registered the application, copy theApplication (client) IDfrom theOverviewpage.
Switch to the browser tab with your API Management instance.
Switch to the browser tab with your API Management instance.
In theAdd identity providerwindow, paste theApplication (client) IDvalue into theClient IDbox.
In theAdd identity providerwindow, paste theApplication (client) IDvalue into theClient IDbox.
Switch to the browser tab with the App registration.
Switch to the browser tab with the App registration.
Select the appropriate app registration.
Select the appropriate app registration.
Under theManagesection of the side menu, selectCertificates & secrets.
Under theManagesection of the side menu, selectCertificates & secrets.
From theCertificates & secretspage, select theNew client secretbutton underClient secrets.Enter aDescription.Select any option forExpires.ChooseAdd.
From theCertificates & secretspage, select theNew client secretbutton underClient secrets.
Enter aDescription.
Select any option forExpires.
ChooseAdd.
Copy the clientSecret valuebefore leaving the page. You will need it later.
Copy the clientSecret valuebefore leaving the page. You will need it later.
UnderManagein the side menu, selectToken configuration>+ Add optional claim.InToken type, selectID.Select (check) the following claims:email,family_name,given_name.SelectAdd. If prompted, selectTurn on the Microsoft Graph email, profile permission.
UnderManagein the side menu, selectToken configuration>+ Add optional claim.
InToken type, selectID.
Select (check) the following claims:email,family_name,given_name.
SelectAdd. If prompted, selectTurn on the Microsoft Graph email, profile permission.
Switch to the browser tab with your API Management instance.
Switch to the browser tab with your API Management instance.
Paste the secret into theClient secretfield in theAdd identity providerpane.ImportantUpdate theClient secretbefore the key expires.
Paste the secret into theClient secretfield in theAdd identity providerpane.
Important
Update theClient secretbefore the key expires.
InSignin tenant, specify a tenant name or ID to use for sign-in to Microsoft Entra. If no value is specified, the Common endpoint is used.
InSignin tenant, specify a tenant name or ID to use for sign-in to Microsoft Entra. If no value is specified, the Common endpoint is used.
InAllowed tenants, add specific Microsoft Entra tenant names or IDs for sign-in to Microsoft Entra.
InAllowed tenants, add specific Microsoft Entra tenant names or IDs for sign-in to Microsoft Entra.
After you specify the desired configuration, selectAdd.
After you specify the desired configuration, selectAdd.
Republish the developer portal for the Microsoft Entra configuration to take effect. In the left menu, underDeveloper portal, selectPortal overview>Publish.
Republish the developer portal for the Microsoft Entra configuration to take effect. In the left menu, underDeveloper portal, selectPortal overview>Publish.
After the Microsoft Entra provider is enabled:
Users in the specified Microsoft Entra tenant(s) cansign into the developer portal by using a Microsoft Entra account.
You can manage the Microsoft Entra configuration on theDeveloper portal>Identitiespage in the portal.
Optionally configure other sign-in settings by selectingIdentities>Settings. For example, you might want to redirect anonymous users to the sign-in page.
Republish the developer portal after any configuration change.
Migrate to MSAL
If you previously configured a Microsoft Entra app for user sign-in using the ADAL, you can use the portal to migrate the app to MSAL and update the identity provider in API Management.

Update Microsoft Entra app for MSAL compatibility
For steps, seeSwitch redirect URIs to the single-page application type.
Update identity provider configuration
In the left menu of your API Management instance, underDeveloper portal, selectIdentities.
SelectMicrosoft Entra IDfrom the list.
In theClient librarydropdown, selectMSAL.
SelectUpdate.
Republish your developer portal.

Add an external Microsoft Entra group
Now that you've enabled access for users in a Microsoft Entra tenant, you can:
Add Microsoft Entra groups into API Management. Groups added must be in the tenant where your API Management instance is deployed.
Control product visibility using Microsoft Entra groups.
Navigate to the App Registration page for the application you registered inthe previous section.
SelectAPI Permissions.
Add the following minimumapplicationpermissions for Microsoft Graph API:User.Read.Allapplication permission â so API Management can read the userâs group membership to perform group synchronization at the time the user logs in.Group.Read.Allapplication permission â so API Management can read the Microsoft Entra groups when an administrator tries to add the group to API Management using theGroupsblade in the portal.
User.Read.Allapplication permission â so API Management can read the userâs group membership to perform group synchronization at the time the user logs in.
User.Read.All
Group.Read.Allapplication permission â so API Management can read the Microsoft Entra groups when an administrator tries to add the group to API Management using theGroupsblade in the portal.
Group.Read.All
SelectGrant admin consent for {tenantname}so that you grant access for all users in this directory.
Now you can add external Microsoft Entra groups from theGroupstab of your API Management instance.
UnderDeveloper portalin the side menu, selectGroups.
UnderDeveloper portalin the side menu, selectGroups.
Select theAdd Microsoft Entra groupbutton.
Select theAdd Microsoft Entra groupbutton.

Select theTenantfrom the drop-down.
Select theTenantfrom the drop-down.
Search for and select the group that you want to add.
Search for and select the group that you want to add.
Press theSelectbutton.
Press theSelectbutton.
Once you add an external Microsoft Entra group, you can review and configure its properties:
Select the name of the group from theGroupstab.
EditNameandDescriptioninformation for the group.
Users from the configured Microsoft Entra instance can now:
Sign into the developer portal.
View and subscribe to any groups for which they have visibility.
Note
Learn more about the difference betweenDelegatedandApplicationpermissions types inPermissions and consent in the Microsoft identity platformarticle.
Synchronize Microsoft Entra groups with API Management
Groups configured in Microsoft Entra must synchronize with API Management so that you can add them to your instance. If the groups don't synchronize automatically, do one of the following to synchronize group information manually:
Sign out and sign in to Microsoft Entra ID. This activity usually triggers synchronization of groups.
Ensure that the Microsoft Entra sign-in tenant is specified the same way (using one of tenant ID or domain name) in your configuration settings in API Management. You specify the sign-in tenant in the Microsoft Entra ID identity provider for the developer portal and when you add a Microsoft Entra group to API Management.
Developer portal: Add Microsoft Entra account authentication
In the developer portal, you can sign in with Microsoft Entra ID using theSign-in button: OAuthwidget included on the sign-in page of the default developer portal content.

Although a new account will automatically be created when a new user signs in with Microsoft Entra ID, consider adding the same widget to the sign-up page. TheSign-up form: OAuthwidget represents a form used for signing up with OAuth.
Important
You need torepublish the portalfor the Microsoft Entra ID changes to take effect.
Related content
Learn more aboutMicrosoft Entra ID and OAuth2.0.
Learn more aboutMSALandmigrating to MSAL.
Troubleshoot network connectivity to Microsoft Graph from inside a VNet.
Feedback
Was this page helpful?
Additional resources