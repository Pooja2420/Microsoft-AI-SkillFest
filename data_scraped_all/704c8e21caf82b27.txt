Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Tutorial: Set up CI/CD for a Service Fabric application by using Azure Pipelines
Article
2024-08-22
9 contributors
In this article
This tutorial ispart fourin a series. It shows you how to set up continuous integration and continuous deployment (CI/CD) for an Azure Service Fabric application by using Azure Pipelines. To complete the tutorial, you must have an existing Service Fabric application. This tutorial uses the application that is described inpart one of the tutorial series.
In this tutorial, you learn how to:
Add source control to your project
Create a build pipeline in Azure Pipelines
Create a release pipeline in Azure Pipelines
Automatically deploy and upgrade an application
The tutorial series shows you how to:
Build a .NET Service Fabric application
Deploy the application to a remote cluster
Add an HTTPS endpoint to an ASP.NET Core front-end service
Configure CI/CD by using Azure Pipelines (this tutorial)
Set up monitoring and diagnostics for the application
Prerequisites
Before you begin this tutorial:
If you don't have an Azure subscription, create afree account.
Install Visual Studio 2019, including the Azure development workload and the ASP.NET and web development workload.
Install the Service Fabric SDK.
Create a Windows Service Fabric cluster in Azure, for example, byfollowing this tutorial.
Create anAzure DevOps organizationso that you can create a project in Azure DevOps and use Azure Pipelines.
Download the Voting sample application
If you didn't build the Voting sample application inpart one of this series, you can download it. In a command window, run the following command to clone the sample app repository to your local machine.
git clone https://github.com/Azure-Samples/service-fabric-dotnet-quickstart
git clone https://github.com/Azure-Samples/service-fabric-dotnet-quickstart
Prepare a publish profile
Now that youcreated an applicationanddeployed the application to Azure, you're ready to set up continuous integration. First, prepare a publish profile within your application for use by the deployment process that executes within Azure Pipelines. The publish profile should be configured to target the cluster you previously created. Start Visual Studio and open an existing Service Fabric application project. InSolution Explorer, right-click the application and selectPublish.
Choose a target profile in your application project to use for your continuous integration workflow, for example,Cloud. Specify the cluster connection endpoint. Select theUpgrade the Applicationcheckbox so that your application upgrades for each deployment in Azure DevOps. Select theSave Profilelink to save the settings to the publish profile, and then selectCancelto close the dialog.

Share your Visual Studio solution to a new Azure DevOps Git repo
Share your application source files to a project in Azure DevOps so that you can generate builds.
To create anew GitHub repo and Azure DevOps repoin Visual Studio 2022, selectGit>Create Git Repositoryon the Git menu.
Select your account and enter your repository name. SelectCreate and Push.

Publishing the repo creates a new project in your Azure DevOps Services account that has the same name as the local repo.
To view the newly created repository, go tohttps://dev.azure.com/><organizationname>. Hover over the name of your project and select theReposicon.
https://dev.azure.com/><organizationname>
Configure continuous delivery by using Azure Pipelines
An Azure Pipelines build pipeline describes a workflow that has a set of build steps that are executed sequentially. To deploy to a Service Fabric cluster, create a build pipeline that produces a Service Fabric application package and other artifacts. Learn more aboutAzure Pipelines build pipelines.
An Azure Pipelines release pipeline describes a workflow that deploys an application package to a cluster. When used together, the build pipeline and release pipeline execute the entire workflow, starting with source files and ending with a running application in your cluster. Learn more aboutAzure Pipelines release pipelines.
Create a build pipeline
Open a web browser and go to your new project athttps://dev.azure.com/<organization-name>/VotingSample.
https://dev.azure.com/<organization-name>/VotingSample
Select thePipelinestab, and then selectCreate Pipeline.

SelectUse the classic editorto create a pipeline without using YAML.

For the source, selectAzure Repos Git. ForTeam project, selectVotingSample. ForRepository, selectVotingApplication. Leave the default branch for manual and scheduled builds. Then selectContinue.

InSelect a template, select theAzure Service Fabric applicationtemplate, and then selectApply.

OnTasks, forAgent pool, enterAzure Pipelines. ForAgent Specification, enterwindows-2022.

UnderTriggers, select theEnable continuous integrationcheckbox. InBranch filters, theBranch specificationdefaults tomaster. SelectSave and queueto manually start a build.

Builds also trigger upon push or check-in. To check your build progress, select theBuildstab. After you verify that the build executes successfully, define a release pipeline that deploys your application to a cluster.
Create a release pipeline
Select thePipelinestab, and then selectReleases>New pipeline. OnSelect a template, select theAzure Service Fabric Deploymenttemplate, and then selectApply.

SelectTasks>Newto add a new cluster connection.

OnNew Service Fabric Connection, selectCertificate BasedorMicrosoft Entra credentialauthentication. Specify a cluster endpoint oftcp://mysftestcluster.southcentralus.cloudapp.azure.com:19000(or the endpoint of the cluster you're deploying to).
tcp://mysftestcluster.southcentralus.cloudapp.azure.com:19000
For certificate-based authentication, add the server certificate thumbprint of the server certificate used to create the cluster. InClient certificate, add the base-64 encoding of the client certificate file. See the help information for that field to learn how to get that base-64 encoded representation of the certificate. Also, add the password for the certificate. You can use the cluster certificate or the server certificate if you don't have a separate client certificate.
For Microsoft Entra credentials, add a value forServer certificate thumbprint. Use the server certificate that you used to create the cluster and the credentials that you want to use to connect to the cluster inUsernameandPassword.
SelectSave.
Next, add a build artifact to the pipeline so that the release pipeline can find the output from the build. SelectPipeline>Artifacts>Add. InSource (Build definition), select the build pipeline that you created earlier. SelectAddto save the build artifact.

Enable a continuous deployment trigger so that a release is automatically created when the build finishes. Select the lightning icon in the artifact, enable the trigger, and selectSaveto save the release pipeline.

SelectCreate Release>Createto manually create a release. To monitor the release progress, select theReleasestab.
Verify that the deployment succeeded and that the application is running in the cluster. Open a web browser and go tohttps://mysftestcluster.southcentralus.cloudapp.azure.com:19080/Explorer/. Note the application version. In this example, it's1.0.0.20170616.3.
https://mysftestcluster.southcentralus.cloudapp.azure.com:19080/Explorer/
1.0.0.20170616.3
Commit and push changes to trigger a release
To verify that the continuous integration pipeline is functioning, check in some code changes to Azure DevOps.
As you write your code, Visual Studio keeps track of the file changes to your project in theChangessection of theGit Changespane.
OnChanges, enter a message to describe your update, and then commit your changes.

OnGit Changes, selectPush(the up arrow) to update your code in Azure Pipelines.

Pushing the changes to Azure Pipelines triggers a build. To check your build progress, select thePipelinestab in the application onhttps://dev.azure.com/organizationname/VotingSample.
https://dev.azure.com/organizationname/VotingSample
When the build finishes, a release is automatically created and starts upgrading the application on the cluster.
Verify that the deployment succeeded and that the application is running in the cluster. Open a web browser and go tohttps://mysftestcluster.southcentralus.cloudapp.azure.com:19080/Explorer/. Note the application version. In this example, it's1.0.0.20170815.3.
https://mysftestcluster.southcentralus.cloudapp.azure.com:19080/Explorer/
1.0.0.20170815.3

Update the application
Make code changes in the application. Save and commit the changes.
When the application upgrade begins, you can track the upgrade progress in Service Fabric Explorer:

The application upgrade might take several minutes. When the upgrade is finished, the application is running the next version. In this example, it's running version1.0.0.20170815.4.
1.0.0.20170815.4

Next step
Advance to the next tutorial:
Set up monitoring and diagnostics for the application
Feedback
Was this page helpful?
Additional resources