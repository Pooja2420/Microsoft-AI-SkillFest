Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Use gates and approvals to control your deployment
Article
2024-02-01
12 contributors
In this article
Azure DevOps Services | Azure DevOps Server 2022 - Azure DevOps Server 2019
By using a combination of manual deployment approvals, gates, and manual intervention in your release pipeline, you can quickly and easily configure your deployment to meet all the specific pre-deployment requirements for your workflow.
In this tutorial, you will learn about:
Pre-deployment gates
Manual intervention
Manual validation
Deployment logs
Prerequisites
Complete theDefine your multi-stage release pipelinetutorial.
Complete theDefine your multi-stage release pipelinetutorial.
A work item query.Create a work item query in Azure Boardsif you don't have one already.
A work item query.Create a work item query in Azure Boardsif you don't have one already.
Set up gates
You can use gates to ensure that the release pipeline meets specific criteria before deployment without requiring user intervention.
SelectPipelines>Releases, and then select your release pipeline. SelectEditto open the pipeline editor.
SelectPipelines>Releases, and then select your release pipeline. SelectEditto open the pipeline editor.

Select the pre-deployment icon for your stage, and then select the toggle button to enableGates.
Select the pre-deployment icon for your stage, and then select the toggle button to enableGates.

Specify the delay time before the added gates are evaluated. This time is to allow gate functions to initialize and stabilize before returning results.
Specify the delay time before the added gates are evaluated. This time is to allow gate functions to initialize and stabilize before returning results.

SelectAdd, and then selectQuery Work Items.
SelectAdd, and then selectQuery Work Items.

Select an existing work item query from the dropdown menu. Depending on how many work items you expect the query to return, set your maximum and minimum thresholds.
Select an existing work item query from the dropdown menu. Depending on how many work items you expect the query to return, set your maximum and minimum thresholds.

Select theEvaluation optionssection, and then specify the timeout and sampling interval. The minimum values you can specify are 6-minutes timeout and 5-minutes sampling interval.
Select theEvaluation optionssection, and then specify the timeout and sampling interval. The minimum values you can specify are 6-minutes timeout and 5-minutes sampling interval.

SelectSavewhen you're done.
SelectSavewhen you're done.

Set up manual intervention
Depending on the scenario, sometimes you may need to add manual intervention to your release pipeline. You can do this by adding theManual Interventiontask to your pipeline.
SelectPipelines>Releases. Select your release pipeline, and then selectTasksand choose your stage.
SelectPipelines>Releases. Select your release pipeline, and then selectTasksand choose your stage.

Select the ellipses (...), and then selectAdd an agentless job.
Select the ellipses (...), and then selectAdd an agentless job.

Drag and drop the agentless job to the top of your deployment process. Select the (+) sign, and then selectAddthe Manual Intervention task.
Drag and drop the agentless job to the top of your deployment process. Select the (+) sign, and then selectAddthe Manual Intervention task.

Enter aDisplay nameand the instructions that will be displayed when the task is triggered. You can also specify a list of users to be notified and a timeout action (reject or resume) if no intervention occurred within the timeout period.
Enter aDisplay nameand the instructions that will be displayed when the task is triggered. You can also specify a list of users to be notified and a timeout action (reject or resume) if no intervention occurred within the timeout period.

SelectSavewhen you're done.
SelectSavewhen you're done.
Note
TheManual Interventiontask can only be used in anagentless job.
Set up manual validation
You can use theManual Validationtask in your YAML pipeline to pause and wait for manual approval. Manual validation is especially useful in scenarios where you want to validate configuration settings or build packages before starting a computation-intensive job.
ThewaitForValidationjob pauses the run and triggers a UI prompt to review and validate the task. The email addresses listed innotifyUsersreceive a notification to approve or deny the pipeline run.
waitForValidation
notifyUsers

pool: 
   vmImage: ubuntu-latest

jobs:
- job: waitForValidation
  displayName: Wait for external validation  
  pool: server    
  timeoutInMinutes: 4320 # job times out in 3 days
  steps:   
   - task: ManualValidation@0
     timeoutInMinutes: 1440 # task times out in 1 day
     inputs:
         notifyUsers: |
            someone@example.com
         instructions: 'Please validate the build configuration and resume'
         onTimeout: 'resume'
pool: 
   vmImage: ubuntu-latest

jobs:
- job: waitForValidation
  displayName: Wait for external validation  
  pool: server    
  timeoutInMinutes: 4320 # job times out in 3 days
  steps:   
   - task: ManualValidation@0
     timeoutInMinutes: 1440 # task times out in 1 day
     inputs:
         notifyUsers: |
            someone@example.com
         instructions: 'Please validate the build configuration and resume'
         onTimeout: 'resume'
View deployment logs
Deployment logs are useful to debug deployment issues but you can also use them to audit your pipeline runs and verify approvals and how they were granted and by whom.
SelectPipelines>Releases, and then select your release pipeline.
SelectPipelines>Releases, and then select your release pipeline.

This view will show you a live status of each stage in your pipeline. The QA stage in this example is pending intervention. SelectResume.
This view will show you a live status of each stage in your pipeline. The QA stage in this example is pending intervention. SelectResume.

Enter your comment, and then selectResume.
Enter your comment, and then selectResume.

TheQAstage deployment succeeded and the pre-deployment approvals are triggered for theProductionstage.
TheQAstage deployment succeeded and the pre-deployment approvals are triggered for theProductionstage.

SelectApprove, enter your comment and then selectApproveto continue deployment.
SelectApprove, enter your comment and then selectApproveto continue deployment.

The live status indicates that the gates are being processed for theProductionstage before the release continues.
The live status indicates that the gates are being processed for theProductionstage before the release continues.

Return to your release pipeline, hover over your stage and then selectLogsto view the deployment logs.
Return to your release pipeline, hover over your stage and then selectLogsto view the deployment logs.

Related articles
Release triggers
Deploy pull request Artifacts
Add stages, dependencies, & conditions
Feedback
Was this page helpful?
Additional resources