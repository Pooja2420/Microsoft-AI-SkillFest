Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
InvokeRESTAPI@1 - Invoke REST API v1 task
Article
2025-03-28
4 contributors
In this article
Use this task to invoke a REST API as a part of your pipeline.
Syntax
# Invoke REST API v1
# Invoke a REST API as a part of your pipeline.
- task: InvokeRESTAPI@1
  inputs:
    connectionType: 'connectedServiceName' # 'connectedServiceName' | 'connectedServiceNameARM'. Alias: connectedServiceNameSelector. Required. Connection type. Default: connectedServiceName.
    serviceConnection: # string. Alias: connectedServiceName | genericService. Required when connectedServiceNameSelector = connectedServiceName. Generic service connection. 
    #azureServiceConnection: # string. Alias: connectedServiceNameARM | azureSubscription. Required when connectedServiceNameSelector = connectedServiceNameARM. Azure subscription. 
    method: 'POST' # 'OPTIONS' | 'GET' | 'HEAD' | 'POST' | 'PUT' | 'DELETE' | 'TRACE' | 'PATCH'. Required. Method. Default: POST.
    #headers: # string. Headers. 
    #body: # string. Optional. Use when method != GET && method != HEAD. Body. 
    #urlSuffix: # string. URL suffix and parameters. 
  # Advanced
    waitForCompletion: 'false' # 'true' | 'false'. Required. Completion event. Default: false.
    #successCriteria: # string. Optional. Use when waitForCompletion = false. Success criteria.
# Invoke REST API v1
# Invoke a REST API as a part of your pipeline.
- task: InvokeRESTAPI@1
  inputs:
    connectionType: 'connectedServiceName' # 'connectedServiceName' | 'connectedServiceNameARM'. Alias: connectedServiceNameSelector. Required. Connection type. Default: connectedServiceName.
    serviceConnection: # string. Alias: connectedServiceName | genericService. Required when connectedServiceNameSelector = connectedServiceName. Generic service connection. 
    #azureServiceConnection: # string. Alias: connectedServiceNameARM | azureSubscription. Required when connectedServiceNameSelector = connectedServiceNameARM. Azure subscription. 
    method: 'POST' # 'OPTIONS' | 'GET' | 'HEAD' | 'POST' | 'PUT' | 'DELETE' | 'TRACE' | 'PATCH'. Required. Method. Default: POST.
    #headers: # string. Headers. 
    #body: # string. Optional. Use when method != GET && method != HEAD. Body. 
    #urlSuffix: # string. URL suffix and parameters. 
  # Advanced
    waitForCompletion: 'false' # 'true' | 'false'. Required. Completion event. Default: false.
    #successCriteria: # string. Optional. Use when waitForCompletion = false. Success criteria.
Inputs
connectionType-Connection typeInput alias:connectedServiceNameSelector.string. Required. Allowed values:connectedServiceName(Generic),connectedServiceNameARM(Azure Resource Manager). Default value:connectedServiceName.
connectionType
connectedServiceNameSelector
string
connectedServiceName
connectedServiceNameARM
connectedServiceName
Specifies the service connection type to use to invoke the REST API. SelectAzure Resource Managerto invoke an Azure management API orGenericfor all other APIs.
serviceConnection-Generic service connectionInput alias:connectedServiceName | genericService.string. Required whenconnectedServiceNameSelector = connectedServiceName.
serviceConnection
connectedServiceName | genericService
string
connectedServiceNameSelector = connectedServiceName
Specifies the generic service connection that provides the baseUrl for the call and the authorization to use for the task.
azureServiceConnection-Azure subscriptionInput alias:connectedServiceNameARM | azureSubscription.string. Required whenconnectedServiceNameSelector = connectedServiceNameARM.
azureServiceConnection
connectedServiceNameARM | azureSubscription
string
connectedServiceNameSelector = connectedServiceNameARM
Specifies the Azure Resource Manager subscription to configure and use for invoking Azure management APIs.
method-Methodstring. Required. Allowed values:OPTIONS,GET,HEAD,POST,PUT,DELETE,TRACE,PATCH. Default value:POST.
method
string
OPTIONS
GET
HEAD
POST
PUT
DELETE
TRACE
PATCH
POST
Specifies the HTTP method that invokes the API.
headers-Headersstring. Default value:{\n"Content-Type":"application/json", \n"PlanUrl": "$(system.CollectionUri)", \n"ProjectId": "$(system.TeamProjectId)", \n"HubName": "$(system.HostType)", \n"PlanId": "$(system.PlanId)", \n"JobId": "$(system.JobId)", \n"TimelineId": "$(system.TimelineId)", \n"TaskInstanceId": "$(system.TaskInstanceId)", \n"AuthToken": "$(system.AccessToken)"\n}.
headers
string
{\n"Content-Type":"application/json", \n"PlanUrl": "$(system.CollectionUri)", \n"ProjectId": "$(system.TeamProjectId)", \n"HubName": "$(system.HostType)", \n"PlanId": "$(system.PlanId)", \n"JobId": "$(system.JobId)", \n"TimelineId": "$(system.TimelineId)", \n"TaskInstanceId": "$(system.TaskInstanceId)", \n"AuthToken": "$(system.AccessToken)"\n}
Defines the header in JSON format. The header is attached with the request sent to the API.
body-Bodystring. Optional. Use whenmethod != GET && method != HEAD.
body
string
method != GET && method != HEAD
Specifies the request body for the function call in JSON format.
urlSuffix-URL suffix and parametersstring.
urlSuffix
string
Specifies the string to append to the baseUrl from the generic service connection while making the HTTP call.
Example: If the service connection URL ishttps:...TestProj/_apis/Release/releasesand the URL suffix is/2/environments/1, the service connection URL becomeshttps:.../TestProj/_apis/Release/releases/2/environments/1. If the URL suffix is?definitionId=1&releaseCount=1, then the service connection URL becomeshttps//...TestProj/_apis/Release/releases?definitionId=1&releaseCount=1.
https:...TestProj/_apis/Release/releases
/2/environments/1
https:.../TestProj/_apis/Release/releases/2/environments/1
?definitionId=1&releaseCount=1
https//...TestProj/_apis/Release/releases?definitionId=1&releaseCount=1
waitForCompletion-Completion eventstring. Required. Allowed values:true(Callback),false(ApiResponse). Default value:false.
waitForCompletion
string
true
false
false
Specifies how the task reports completion. The allowed values are:
false-API response: reports completion when the function returns success within 20 seconds, and the success criteria evaluates to true.
false
true-Callback: reports completion when the external service makes a callback to update the timeline record.
true
successCriteria-Success criteriastring. Optional. Use whenwaitForCompletion = false.
successCriteria
string
waitForCompletion = false
Specifies the task's criteria for success. The response content does not influence the result if no criteria is defined. By default, the task passes when the call returns200 OK.
200 OK
Example: For response{"status" : "successful"}, the expression can beeq(root['status'], 'successful'). Learn more aboutspecifying conditions.
{"status" : "successful"}
eq(root['status'], 'successful')
Task control options
All tasks have control options in addition to their task inputs. For more information, seeControl options and common task properties.
Output variables
None.
Remarks
Note
This task can be used only in anagentless job.
Succeeds if the API returns success and the response body parsing is successful, or when the API updates the timeline record with success.
TheInvoke REST API taskdoes not perform deployment actions directly.
Instead, it allows you to invoke any generic HTTP REST API as part of the automated
pipeline and, optionally, wait for it to be completed.

For more information about using this task, seeApprovals and gates overview.
What base URLs are used when invoking Azure Management APIs?
Azure management APIs are invoked usingResourceManagerEndpointof the selected environment. For examplehttps://management.azure.comis used when the subscription is in anAzureCloudenvironment.
https://management.azure.com
Where should a task signal completion whenCallbackis chosen as the completion event?
To signal completion, the external service should POST completion data to the following pipelines REST endpoint.
{planUri}/{projectId}/_apis/distributedtask/hubs/{hubName}/plans/{planId}/events?api-version=2.0-preview.1

**Request Body**
 { "name": "TaskCompleted", "taskId": "taskInstanceId", "jobId": "jobId", "result": "succeeded" }
{planUri}/{projectId}/_apis/distributedtask/hubs/{hubName}/plans/{planId}/events?api-version=2.0-preview.1

**Request Body**
 { "name": "TaskCompleted", "taskId": "taskInstanceId", "jobId": "jobId", "result": "succeeded" }
Seethis simple cmdline applicationfor specifics.
In addition, a C# helper library is available to enable live logging and managing task status for agentless tasks.Learn more
Can I use the response body as the input for another task?
No, as this task is an agentless task and uses TFS's internal HttpRequest, which doesn't return the content of the HTTP request.
Example
YAML
Classic
steps:
- task: InvokeRESTAPI@1
  displayName: 'Invoke REST API: GET'
  inputs:
    serviceConnection: 'generic_demo'
    method: GET
    successCriteria: 'eq(root[''count''], ''1425'')'
steps:
- task: InvokeRESTAPI@1
  displayName: 'Invoke REST API: GET'
  inputs:
    serviceConnection: 'generic_demo'
    method: GET
    successCriteria: 'eq(root[''count''], ''1425'')'
In this example, the task succeeds when the response matched oursuccessCriteria:eq(root[''count''], ''1425'').
successCriteria
From your pipeline definition, select the ellipsis button (...), and then selectAdd an agentless job.
From your pipeline definition, select the ellipsis button (...), and then selectAdd an agentless job.
In your new agentless job, select the+sign to add a new task.
In your new agentless job, select the+sign to add a new task.
+
Search for theInvoke REST APItask. SelectAddto add it to your agentless job.
Search for theInvoke REST APItask. SelectAddto add it to your agentless job.
Select yourConnection typeand yourService connection. Select the HTTPMethodthat you want to use, and then select aCompletion event. You can also define a success a criteria to pass the task.
Select yourConnection typeand yourService connection. Select the HTTPMethodthat you want to use, and then select aCompletion event. You can also define a success a criteria to pass the task.
SelectSave & queuewhen you are done.
SelectSave & queuewhen you are done.

In this example, the task succeeds when the response matched oursuccessCriteria:eq(root[''count''], ''1425'').
successCriteria

Requirements
Feedback
Was this page helpful?
Additional resources