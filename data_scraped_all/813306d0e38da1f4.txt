Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Call external HTTP or HTTPS endpoints from workflows in Azure Logic Apps
Article
2024-04-08
19 contributors
In this article
Applies to:Azure Logic Apps (Consumption + Standard)
Some scenarios might require that you create a logic app workflow that sends outbound requests to endpoints on other services or systems over HTTP or HTTPS. For example, suppose that you want to monitor a service endpoint for your website by checking that endpoint on a specific schedule. When a specific event happens at that endpoint, such as your website going down, that event triggers your workflow and runs the actions in that workflow.
Note
To create a workflow that receives and responds to inbound HTTPS calls instead, seeCreate workflows that you can call, trigger, or nest using HTTPS endpoints in Azure Logic Appsand the built-inRequest trigger and Response action.
This guide shows how to use the HTTP trigger and HTTP action so that your workflow can send outbound calls to other services and systems, for example:
To check orpollan endpoint on a recurring schedule,add the HTTP triggeras the first step in your workflow. Each time that the trigger checks the endpoint, the trigger calls or sends arequestto the endpoint. The endpoint's response determines whether your workflow runs. The trigger passes any content from the endpoint's response to the actions in your workflow.
To check orpollan endpoint on a recurring schedule,add the HTTP triggeras the first step in your workflow. Each time that the trigger checks the endpoint, the trigger calls or sends arequestto the endpoint. The endpoint's response determines whether your workflow runs. The trigger passes any content from the endpoint's response to the actions in your workflow.
To call an endpoint from anywhere else in your workflow,add the HTTP action. The endpoint's response determines how your workflow's remaining actions run.
To call an endpoint from anywhere else in your workflow,add the HTTP action. The endpoint's response determines how your workflow's remaining actions run.
Prerequisites
An Azure account and subscription. If you don't have an Azure subscription,sign up for a free Azure account.
An Azure account and subscription. If you don't have an Azure subscription,sign up for a free Azure account.
The URL for the destination endpoint that you want to call
The URL for the destination endpoint that you want to call
The logic app workflow from where you want to call the destination endpoint. To start with the HTTP trigger, you need a blank workflow. To use the HTTP action, start your workflow with any trigger that you want. This example uses the HTTP trigger as the first step.
The logic app workflow from where you want to call the destination endpoint. To start with the HTTP trigger, you need a blank workflow. To use the HTTP action, start your workflow with any trigger that you want. This example uses the HTTP trigger as the first step.
Connector technical reference
For technical information about trigger and action parameters, see the following sections:
HTTP trigger parameters
HTTP action parameters

Add an HTTP trigger
This built-in trigger makes an HTTP call to the specified URL for an endpoint and returns a response.
Standard
Consumption
In theAzure portal, open your Standard logic app resource and blank workflow in the designer.
In theAzure portal, open your Standard logic app resource and blank workflow in the designer.
Follow these general steps to add the built-in trigger namedHTTPto your workflow.This example renames the trigger toHTTP trigger - Call endpoint URLso that the trigger has a more descriptive name. Also, the example later adds an HTTP action, and operation names in your workflow must be unique.
Follow these general steps to add the built-in trigger namedHTTPto your workflow.
This example renames the trigger toHTTP trigger - Call endpoint URLso that the trigger has a more descriptive name. Also, the example later adds an HTTP action, and operation names in your workflow must be unique.
Provide the values for theHTTP trigger parametersthat you want to include in the call to the destination endpoint. Set up the recurrence for how often you want the trigger to check the destination endpoint.If you select an authentication type other thanNone, the authentication settings differ based on your selection. For more information about authentication types available for HTTP, see the following topics:Add authentication to outbound callsAuthenticate access to resources with managed identities
Provide the values for theHTTP trigger parametersthat you want to include in the call to the destination endpoint. Set up the recurrence for how often you want the trigger to check the destination endpoint.
If you select an authentication type other thanNone, the authentication settings differ based on your selection. For more information about authentication types available for HTTP, see the following topics:
Add authentication to outbound calls
Authenticate access to resources with managed identities
To add other available parameters, open theAdvanced parameterslist, and select the parameters that you want.
To add other available parameters, open theAdvanced parameterslist, and select the parameters that you want.
Add any other actions that you want to run when the trigger fires.
Add any other actions that you want to run when the trigger fires.
When you're done, save your workflow. On the designer toolbar, selectSave.
When you're done, save your workflow. On the designer toolbar, selectSave.
In theAzure portal, open your Consumption logic app and blank workflow in the designer.
In theAzure portal, open your Consumption logic app and blank workflow in the designer.
Follow these general steps to add the built-in trigger namedHTTPto your workflow.This example renames the trigger toHTTP trigger - Call endpoint URLso that the trigger has a more descriptive name. Also, the example later adds an HTTP action, and operation names in your workflow must be unique.
Follow these general steps to add the built-in trigger namedHTTPto your workflow.
This example renames the trigger toHTTP trigger - Call endpoint URLso that the trigger has a more descriptive name. Also, the example later adds an HTTP action, and operation names in your workflow must be unique.
Provide the values for theHTTP trigger parametersthat you want to include in the call to the destination endpoint. Set up the recurrence for how often you want the trigger to check the destination endpoint.If you select an authentication type other thanNone, the authentication settings differ based on your selection. For more information about authentication types available for HTTP, see the following topics:Add authentication to outbound callsAuthenticate access to resources with managed identities
Provide the values for theHTTP trigger parametersthat you want to include in the call to the destination endpoint. Set up the recurrence for how often you want the trigger to check the destination endpoint.
If you select an authentication type other thanNone, the authentication settings differ based on your selection. For more information about authentication types available for HTTP, see the following topics:
Add authentication to outbound calls
Authenticate access to resources with managed identities
To add other available parameters, open theAdd new parameterlist, and select the parameters that you want.
To add other available parameters, open theAdd new parameterlist, and select the parameters that you want.
Add any other actions that you want to run when the trigger fires.
Add any other actions that you want to run when the trigger fires.
When you're done, save your workflow. On the designer toolbar, selectSave.
When you're done, save your workflow. On the designer toolbar, selectSave.

Add an HTTP action
This built-in action makes an HTTP call to the specified URL for an endpoint and returns a response.
Standard
Consumption
In theAzure portal, open your Consumption logic app and workflow in the designer.This example uses the HTTP trigger added in the previous section as the first step.
In theAzure portal, open your Consumption logic app and workflow in the designer.
This example uses the HTTP trigger added in the previous section as the first step.
Follow these general steps to add the built-in action namedHTTPto your workflow.This example renames the action toHTTP action - Call endpoint URLso that the step has a more descriptive name. Also, operation names in your workflow must be unique.
Follow these general steps to add the built-in action namedHTTPto your workflow.
This example renames the action toHTTP action - Call endpoint URLso that the step has a more descriptive name. Also, operation names in your workflow must be unique.
Provide the values for theHTTP action parametersthat you want to include in the call to the destination endpoint.If you select an authentication type other thanNone, the authentication settings differ based on your selection. For more information about authentication types available for HTTP, see these topics:Add authentication to outbound callsAuthenticate access to resources with managed identities
Provide the values for theHTTP action parametersthat you want to include in the call to the destination endpoint.
If you select an authentication type other thanNone, the authentication settings differ based on your selection. For more information about authentication types available for HTTP, see these topics:
Add authentication to outbound calls
Authenticate access to resources with managed identities
To add other available parameters, open theAdvanced parameterslist, and select the parameters that you want.
To add other available parameters, open theAdvanced parameterslist, and select the parameters that you want.
When you're done, save your workflow. On the designer toolbar, selectSave.
When you're done, save your workflow. On the designer toolbar, selectSave.
In theAzure portal, open your Consumption logic app and workflow in the designer.This example uses the HTTP trigger added in the previous section as the first step.
In theAzure portal, open your Consumption logic app and workflow in the designer.
This example uses the HTTP trigger added in the previous section as the first step.
Follow these general steps to add the built-in action namedHTTPto your workflow.This example renames the action toHTTP action - Call endpoint URLso that the step has a more descriptive name. Also, operation names in your workflow must be unique.
Follow these general steps to add the built-in action namedHTTPto your workflow.
This example renames the action toHTTP action - Call endpoint URLso that the step has a more descriptive name. Also, operation names in your workflow must be unique.
Provide the values for theHTTP action parametersthat you want to include in the call to the destination endpoint.If you select an authentication type other thanNone, the authentication settings differ based on your selection. For more information about authentication types available for HTTP, see these topics:Add authentication to outbound callsAuthenticate access to resources with managed identities
Provide the values for theHTTP action parametersthat you want to include in the call to the destination endpoint.
If you select an authentication type other thanNone, the authentication settings differ based on your selection. For more information about authentication types available for HTTP, see these topics:
Add authentication to outbound calls
Authenticate access to resources with managed identities
To add other available parameters, open theAdd new parameterlist, and select the parameters that you want.
To add other available parameters, open theAdd new parameterlist, and select the parameters that you want.
When you're done, save your workflow. On the designer toolbar, selectSave.
When you're done, save your workflow. On the designer toolbar, selectSave.
Trigger and action outputs
Here's more information about the outputs from an HTTP trigger or action, which returns the following information:
headers
body
status code
URL security for outbound calls
For information about encryption, security, and authorization for outbound calls from your workflow, such asTransport Layer Security (TLS), previously known as Secure Sockets Layer (SSL), self-signed certificates, orMicrosoft Entra ID Open Authentication (Microsoft Entra ID OAuth), seeSecure access and data - Access for outbound calls to other services and systems.

Authentication for single-tenant environment
If you have a Standard logic app resource in single-tenant Azure Logic Apps, and you want to use an HTTP operation with any of the following authentication types, make sure to complete the extra setup steps for the corresponding authentication type. Otherwise, the call fails.
TLS/SSL certificate: Add the app setting,WEBSITE_LOAD_ROOT_CERTIFICATES, and set the value to the thumbprint for your TLS/SSL certificate.
TLS/SSL certificate: Add the app setting,WEBSITE_LOAD_ROOT_CERTIFICATES, and set the value to the thumbprint for your TLS/SSL certificate.
WEBSITE_LOAD_ROOT_CERTIFICATES
Client certificate or Microsoft Entra ID Open Authentication (Microsoft Entra ID OAuth) with the "Certificate" credential type: Add the app setting,WEBSITE_LOAD_USER_PROFILE, and set the value to1.
Client certificate or Microsoft Entra ID Open Authentication (Microsoft Entra ID OAuth) with the "Certificate" credential type: Add the app setting,WEBSITE_LOAD_USER_PROFILE, and set the value to1.
WEBSITE_LOAD_USER_PROFILE
1

TLS/SSL certificate authentication
In your logic app resource's app settings,add or update the app setting,WEBSITE_LOAD_ROOT_CERTIFICATES.
In your logic app resource's app settings,add or update the app setting,WEBSITE_LOAD_ROOT_CERTIFICATES.
WEBSITE_LOAD_ROOT_CERTIFICATES
For the setting value, provide the thumbprint for your TLS/SSL certificate as the root certificate to be trusted."WEBSITE_LOAD_ROOT_CERTIFICATES": "<thumbprint-for-TLS/SSL-certificate>"
For the setting value, provide the thumbprint for your TLS/SSL certificate as the root certificate to be trusted.
"WEBSITE_LOAD_ROOT_CERTIFICATES": "<thumbprint-for-TLS/SSL-certificate>"
"WEBSITE_LOAD_ROOT_CERTIFICATES": "<thumbprint-for-TLS/SSL-certificate>"
For example, if you're working in Visual Studio Code, follow these steps:
Open your logic app project'slocal.settings.jsonfile.
Open your logic app project'slocal.settings.jsonfile.
In theValuesJSON object, add or update theWEBSITE_LOAD_ROOT_CERTIFICATESsetting:{
   "IsEncrypted": false,
   "Values": {
      <...>
      "AzureWebJobsStorage": "UseDevelopmentStorage=true",
      "WEBSITE_LOAD_ROOT_CERTIFICATES": "<thumbprint-for-TLS/SSL-certificate>",
      <...>
   }
}NoteTo find the thumbprint, follow these steps:On your logic app resource menu, underSettings, selectTLS/SSL settings>Private Key Certificates (.pfx)orPublic Key Certificates (.cer).Find the certificate that you want to use, and copy the thumbprint.For more information, reviewFind the thumbprint - Azure App Service.
In theValuesJSON object, add or update theWEBSITE_LOAD_ROOT_CERTIFICATESsetting:
Values
WEBSITE_LOAD_ROOT_CERTIFICATES
{
   "IsEncrypted": false,
   "Values": {
      <...>
      "AzureWebJobsStorage": "UseDevelopmentStorage=true",
      "WEBSITE_LOAD_ROOT_CERTIFICATES": "<thumbprint-for-TLS/SSL-certificate>",
      <...>
   }
}
{
   "IsEncrypted": false,
   "Values": {
      <...>
      "AzureWebJobsStorage": "UseDevelopmentStorage=true",
      "WEBSITE_LOAD_ROOT_CERTIFICATES": "<thumbprint-for-TLS/SSL-certificate>",
      <...>
   }
}
Note
To find the thumbprint, follow these steps:
On your logic app resource menu, underSettings, selectTLS/SSL settings>Private Key Certificates (.pfx)orPublic Key Certificates (.cer).
On your logic app resource menu, underSettings, selectTLS/SSL settings>Private Key Certificates (.pfx)orPublic Key Certificates (.cer).
Find the certificate that you want to use, and copy the thumbprint.
Find the certificate that you want to use, and copy the thumbprint.
For more information, reviewFind the thumbprint - Azure App Service.
For more information, review the following documentation:
Edit host and app settings for logic apps in single-tenant Azure Logic Apps
Private client certificates - Azure App Service


Client certificate or Microsoft Entra ID OAuth with "Certificate" credential type authentication
In your logic app resource's app settings,add or update the app setting,WEBSITE_LOAD_USER_PROFILE.
In your logic app resource's app settings,add or update the app setting,WEBSITE_LOAD_USER_PROFILE.
WEBSITE_LOAD_USER_PROFILE
For the setting value, specify1."WEBSITE_LOAD_USER_PROFILE": "1"
For the setting value, specify1.
1
"WEBSITE_LOAD_USER_PROFILE": "1"
"WEBSITE_LOAD_USER_PROFILE": "1"
For example, if you're working in Visual Studio Code, follow these steps:
Open your logic app project'slocal.settings.jsonfile.
Open your logic app project'slocal.settings.jsonfile.
In theValuesJSON object, add or update theWEBSITE_LOAD_USER_PROFILEsetting:{
   "IsEncrypted": false,
   "Values": {
      <...>
      "AzureWebJobsStorage": "UseDevelopmentStorage=true",
      "WEBSITE_LOAD_USER_PROFILE": "1",
      <...>
   }
}
In theValuesJSON object, add or update theWEBSITE_LOAD_USER_PROFILEsetting:
Values
WEBSITE_LOAD_USER_PROFILE
{
   "IsEncrypted": false,
   "Values": {
      <...>
      "AzureWebJobsStorage": "UseDevelopmentStorage=true",
      "WEBSITE_LOAD_USER_PROFILE": "1",
      <...>
   }
}
{
   "IsEncrypted": false,
   "Values": {
      <...>
      "AzureWebJobsStorage": "UseDevelopmentStorage=true",
      "WEBSITE_LOAD_USER_PROFILE": "1",
      <...>
   }
}
For more information, review the following documentation:
Edit host and app settings for logic apps in single-tenant Azure Logic Apps
Private client certificates - Azure App Service
Content with multipart/form-data type
To handle content that hasmultipart/form-datatype in HTTP requests, you can add a JSON object that includes the$content-typeand$multipartattributes to the HTTP request's body by using this format.
multipart/form-data
$content-type
$multipart
"body": {
   "$content-type": "multipart/form-data",
   "$multipart": [
      {
         "body": "<output-from-trigger-or-previous-action>",
         "headers": {
            "Content-Disposition": "form-data; name=file; filename=<file-name>"
         }
      }
   ]
}
"body": {
   "$content-type": "multipart/form-data",
   "$multipart": [
      {
         "body": "<output-from-trigger-or-previous-action>",
         "headers": {
            "Content-Disposition": "form-data; name=file; filename=<file-name>"
         }
      }
   ]
}
For example, suppose you have a workflow that sends an HTTP POST request for an Excel file to a website by using that site's API, which supports themultipart/form-datatype. The following sample shows how this action might appear:
multipart/form-data
Standard workflow

Consumption workflow

Here's the same example that shows the HTTP action's JSON definition in the underlying workflow definition:
"HTTP_action": {
   "inputs": {
      "body": {
         "$content-type": "multipart/form-data",
         "$multipart": [
            {
               "body": "@trigger()",
               "headers": {
                  "Content-Disposition": "form-data; name=file; filename=myExcelFile.xlsx"
               }
            }
         ]
      },
      "method": "POST",
      "uri": "https://finance.contoso.com"
   },
   "runAfter": {},
   "type": "Http"
}
"HTTP_action": {
   "inputs": {
      "body": {
         "$content-type": "multipart/form-data",
         "$multipart": [
            {
               "body": "@trigger()",
               "headers": {
                  "Content-Disposition": "form-data; name=file; filename=myExcelFile.xlsx"
               }
            }
         ]
      },
      "method": "POST",
      "uri": "https://finance.contoso.com"
   },
   "runAfter": {},
   "type": "Http"
}
Content with application/x-www-form-urlencoded type
To provide form-urlencoded data in the body for an HTTP request, you have to specify that the data has theapplication/x-www-form-urlencodedcontent type. In the HTTP trigger or action, add thecontent-typeheader. Set the header value toapplication/x-www-form-urlencoded.
application/x-www-form-urlencoded
content-type
application/x-www-form-urlencoded
For example, suppose you have a logic app that sends an HTTP POST request to a website, which supports theapplication/x-www-form-urlencodedtype. Here's how this action might look:
application/x-www-form-urlencoded
Standard workflow

Consumption workflow


Asynchronous request-response behavior
Forstatefulworkflows in both multitenant and single-tenant Azure Logic Apps, all HTTP-based actions follow the standardasynchronous operation patternas the default behavior. This pattern specifies that after an HTTP action calls or sends a request to an endpoint, service, system, or API, the receiver immediately returns a"202 ACCEPTED"response. This code confirms that the receiver accepted the request but hasn't finished processing. The response can include alocationheader that specifies the URI and a refresh ID that the caller can use to poll or check the status for the asynchronous request until the receiver stops processing and returns a"200 OK"success response or other non-202 response. However, the caller doesn't have to wait for the request to finish processing and can continue to run the next action. For more information, seeAsynchronous microservice integration enforces microservice autonomy.
location
Forstatelessworkflows in single-tenant Azure Logic Apps, HTTP-based actions don't use the asynchronous operation pattern. Instead, they only run synchronously, return the"202 ACCEPTED"response as-is, and proceed to the next step in the workflow execution. If the response includes alocationheader, a stateless workflow won't poll the specified URI to check the status. To follow the standardasynchronous operation pattern, use a stateful workflow instead.
location
The HTTP action's underlying JavaScript Object Notation (JSON) definition implicitly follows the asynchronous operation pattern.
The HTTP action's underlying JavaScript Object Notation (JSON) definition implicitly follows the asynchronous operation pattern.
The HTTP action, but not trigger, has anAsynchronous Patternsetting, which is enabled by default. This setting specifies that the caller doesn't wait for processing to finish and can move on to the next action but continues checking the status until processing stops. If disabled, this setting specifies that the caller waits for processing to finish before moving on to the next action.To find theAsynchronous Patternsetting, follow these steps, based on whether you have a Standard or Consumption workflow:Standard workflow*In the workflow designer, select the HTTP action. On the information pane that opens, selectSettings.UnderNetworking, find theAsynchronous Patternsetting.Consumption workflowIn the workflow designer, on the HTTP action's title bar, select the ellipses (...) button, which opens the action's settings.Find theAsynchronous Patternsetting.
The HTTP action, but not trigger, has anAsynchronous Patternsetting, which is enabled by default. This setting specifies that the caller doesn't wait for processing to finish and can move on to the next action but continues checking the status until processing stops. If disabled, this setting specifies that the caller waits for processing to finish before moving on to the next action.
To find theAsynchronous Patternsetting, follow these steps, based on whether you have a Standard or Consumption workflow:
Standard workflow*
In the workflow designer, select the HTTP action. On the information pane that opens, selectSettings.
In the workflow designer, select the HTTP action. On the information pane that opens, selectSettings.
UnderNetworking, find theAsynchronous Patternsetting.
UnderNetworking, find theAsynchronous Patternsetting.
Consumption workflow
In the workflow designer, on the HTTP action's title bar, select the ellipses (...) button, which opens the action's settings.
In the workflow designer, on the HTTP action's title bar, select the ellipses (...) button, which opens the action's settings.
Find theAsynchronous Patternsetting.
Find theAsynchronous Patternsetting.

Disable asynchronous operations
Sometimes, you might want to disable the HTTP action's asynchronous behavior in specific scenarios, for example, when you want to:
Avoid HTTP timeouts for long-running tasks
Disable checking location headers

Turn off Asynchronous Pattern setting
Standard
Consumption
In the workflow designer, select the HTTP action, and on the information pane that opens, selectSettings.
In the workflow designer, select the HTTP action, and on the information pane that opens, selectSettings.
UnderNetworking, find theAsynchronous Patternsetting. Turn the setting toOffif enabled.
UnderNetworking, find theAsynchronous Patternsetting. Turn the setting toOffif enabled.
In the workflow designer, on the HTTP action's title bar, select the ellipses (...) button, which opens the action's settings.
In the workflow designer, on the HTTP action's title bar, select the ellipses (...) button, which opens the action's settings.
Find theAsynchronous Patternsetting, turn the setting toOffif enabled, and selectDone.
Find theAsynchronous Patternsetting, turn the setting toOffif enabled, and selectDone.

Disable asynchronous pattern in action's JSON definition
In the HTTP action's underlying JSON definition,add the"DisableAsyncPattern"operation optionto the action's definition so that the action follows the synchronous operation pattern instead. For more information, see alsoRun actions in a synchronous operation pattern.
"DisableAsyncPattern"

Avoid HTTP timeouts for long-running tasks
HTTP requests have atimeout limit. If you have a long-running HTTP action that times out due to this limit, you have these options:
Disable the HTTP action's asynchronous operation patternso that the action doesn't continually poll or check the request's status. Instead, the action waits for the receiver to respond with the status and results after the request finishes processing.
Disable the HTTP action's asynchronous operation patternso that the action doesn't continually poll or check the request's status. Instead, the action waits for the receiver to respond with the status and results after the request finishes processing.
Replace the HTTP action with theHTTP Webhook action, which waits for the receiver to respond with the status and results after the request finishes processing.
Replace the HTTP action with theHTTP Webhook action, which waits for the receiver to respond with the status and results after the request finishes processing.

Set up interval between retry attempts with the Retry-After header
To specify the number of seconds between retry attempts, you can add theRetry-Afterheader to the HTTP action response. For example, if the destination endpoint returns the429 - Too many requestsstatus code, you can specify a longer interval between retries. TheRetry-Afterheader also works with the202 - Acceptedstatus code.
Retry-After
429 - Too many requests
Retry-After
202 - Accepted
Here's the same example that shows the HTTP action response that containsRetry-After:
Retry-After
{
    "statusCode": 429,
    "headers": {
        "Retry-After": "300"
    }
}
{
    "statusCode": 429,
    "headers": {
        "Retry-After": "300"
    }
}
Pagination support
Sometimes, the destination service responds by returning the results one page at a time. If the response specifies the next page with thenextLinkor@odata.nextLinkproperty, you can turn on thePaginationsetting on the HTTP action. This setting causes the HTTP action to automatically follow these links and get the next page. However, if the response specifies the next page with any other tag, you might have to add a loop to your workflow. Make this loop follow that tag and manually get each page until the tag is null.
Disable checking location headers
Some endpoints, services, systems, or APIs return a202 ACCEPTEDresponse that doesn't have alocationheader. To avoid having an HTTP action continually check the request status when thelocationheader doesn't exist, you can have these options:
202 ACCEPTED
location
location
Disable the HTTP action's asynchronous operation patternso that the action doesn't continually poll or check the request's status. Instead, the action waits for the receiver to respond with the status and results after the request finishes processing.
Disable the HTTP action's asynchronous operation patternso that the action doesn't continually poll or check the request's status. Instead, the action waits for the receiver to respond with the status and results after the request finishes processing.
Replace the HTTP action with theHTTP Webhook action, which waits for the receiver to respond with the status and results after the request finishes processing.
Replace the HTTP action with theHTTP Webhook action, which waits for the receiver to respond with the status and results after the request finishes processing.
Known issues

Omitted HTTP headers
If an HTTP trigger or action includes these headers, Azure Logic Apps removes these headers from the generated request message without showing any warning or error:
Accept-*headers except forAccept-version
Accept-*
Accept-version
Allow
Allow
Content-*headers except forContent-Disposition,Content-Encoding, andContent-Type, which are honored when you use the POST and PUT operations. However, Azure Logic Apps drops these headers when you use the GET operation.
Content-*
Content-Disposition
Content-Encoding
Content-Type
Cookieheader, but Azure Logic Apps honors any value that you specify using theCookieproperty.
Cookie
Expires
Expires
Host
Host
Last-Modified
Last-Modified
Origin
Origin
Set-Cookie
Set-Cookie
Transfer-Encoding
Transfer-Encoding
Although Azure Logic Apps won't stop you from saving logic apps that use an HTTP trigger or action with these headers, Azure Logic Apps ignores these headers.

Response content doesn't match the expected content type
The HTTP action throws aBadRequesterror if the HTTP action calls the backend API with theContent-Typeheader set toapplication/json, but the response from the backend doesn't actually contain content in JSON format, which fails internal JSON format validation.
Content-Type
Next steps
Managed connectors for Azure Logic Apps
Built-in connectors for Azure Logic Apps
Feedback
Was this page helpful?
Additional resources