Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Estimating consumption-based costs
Article
2025-02-10
10 contributors
In this article
This article shows you how to estimate plan costs for the Flex Consumption and Consumption hosting plans.
Azure Functions currently offers these different hosting options for your function apps, with each option having its own hosting plan pricing model:
You should always choose the option that best supports the feature, performance, and cost requirements for your function executions. To learn more, seeAzure Functions scale and hosting.
This article focuses on Flex Consumption and Consumption plans because in these plans billing depends on active periods of executions inside each instance.
Durable Functions can also run in both of these plans. To learn more about the cost considerations when using Durable Functions, seeDurable Functions billing.
Consumption-based costs
The way that consumption-based costs are calculated, including free grants, depends on the specific plan. For the most current cost and grant information, see theAzure Functions pricing page.
Flex Consumption plan
Consumption plan
There are two modes by which your costs are determined when running your apps in the Flex Consumption plan. Each mode is determined on a per-instance basis.
For the most up-to-date information on execution pricing, always ready baseline costs, and free grants for on demand executions, see theAzure Functions pricing page.
This diagram represents how on-demand costs are determined in this plan:

In addition to execution time, when using one or more always ready instances, you're also billed at a lower, baseline rate for the number of always ready instances you maintain. Execution time for always ready instances might be cheaper than execution time on instances with on demand execution.
Important
In this article, on-demand pricing is used to help understand example calculations. Always check the current costs in theAzure Functions pricing pagewhen estimating costs you might incur while running your functions in the Flex Consumption plan.
Consider a function app that is comprised only of HTTP triggers with and these basic facts:
HTTP triggers handle 40 constant requests per second.
HTTP triggers handle 10 concurrent requests.
The instance memory size setting is2048 MB.
2048 MB
There areno always ready instances configured, which means the app can scale to zero.
In a situation like this, the pricing depends more on the kind of work being done during code execution. Let's look at two workload scenarios:
CPU-bound workload:In a CPU-bound workload, there's no advantage to processing multiple requests in parallel in the same instance. This means that you're better off distributing each request to its own instance so requests complete as a quickly as possible without contention. In this scenario, you should set a lowHTTP trigger concurrencyof1. With 10 concurrent requests, the app scales to a steady state of roughly 10 instances, and each instance is continuously active processing one request at a time.Because the size of each instance is ~2 GB, the consumption for a single continuously active instance is2 GB * 3600 s = 7200 GB-s. Assuming an on-demand execution rate of $0.000026 GB-s (without any free grants applied) becomes$0.1872 USDper hour per instance. Because the CPU-bound app is scaled to 10 instance, the total hourly rate for execution time is$1.872 USD.Similarly, the on-demand per-execution charge (without any free grants) of 40 requests per second is equal to40 * 3600 = 144,000or0.144 millionexecutions per hour. Assuming an on-demand rate of$0.40per million executions, the total (grant-free) hourly cost of executions is0.144 * $0.40, which is$0.0576per hour.In this scenario, the total hourly cost of running on-demand on 10 instances is$1.872 + $0.0576s = $1.9296 USD.
CPU-bound workload:In a CPU-bound workload, there's no advantage to processing multiple requests in parallel in the same instance. This means that you're better off distributing each request to its own instance so requests complete as a quickly as possible without contention. In this scenario, you should set a lowHTTP trigger concurrencyof1. With 10 concurrent requests, the app scales to a steady state of roughly 10 instances, and each instance is continuously active processing one request at a time.
1
Because the size of each instance is ~2 GB, the consumption for a single continuously active instance is2 GB * 3600 s = 7200 GB-s. Assuming an on-demand execution rate of $0.000026 GB-s (without any free grants applied) becomes$0.1872 USDper hour per instance. Because the CPU-bound app is scaled to 10 instance, the total hourly rate for execution time is$1.872 USD.
2 GB * 3600 s = 7200 GB-s
$0.1872 USD
$1.872 USD
Similarly, the on-demand per-execution charge (without any free grants) of 40 requests per second is equal to40 * 3600 = 144,000or0.144 millionexecutions per hour. Assuming an on-demand rate of$0.40per million executions, the total (grant-free) hourly cost of executions is0.144 * $0.40, which is$0.0576per hour.
40 * 3600 = 144,000
0.144 million
$0.40
0.144 * $0.40
$0.0576
In this scenario, the total hourly cost of running on-demand on 10 instances is$1.872 + $0.0576s = $1.9296 USD.
$1.872 + $0.0576s = $1.9296 USD
IO bound workload:In an IO-bound workload, most of the application time is spent waiting on incoming request, which might be limited by network throughput or other upstream factors. Because of the limited inputs, the code can process multiple operations concurrently without negative impacts. In this scenario, assume you can process all 10 concurrent requests on the same instance.Because consumption charges are based only on the memory of each active instance, the consumption charge calculation is simply2 GB * 3600 s = 7200 GB-s, which at the assumed on-demand execution rate (without any free grants applied) is$0.1872 USDper hour for the single instance.As in the CPU-bound scenario, the on-demand per-execution charge (without any free grants) of 40 requests per second is equal to40 * 3600 = 144,000or 0.144 million executions per hour. In this case, the total (grant-free) hourly cost of executions0.144 * $0.40, which is$0.0576per hour.In this scenario, the total hourly cost of running on-demand on a single instance is$0.1872 + $0.0576 = $0.245 USD.
IO bound workload:In an IO-bound workload, most of the application time is spent waiting on incoming request, which might be limited by network throughput or other upstream factors. Because of the limited inputs, the code can process multiple operations concurrently without negative impacts. In this scenario, assume you can process all 10 concurrent requests on the same instance.
Because consumption charges are based only on the memory of each active instance, the consumption charge calculation is simply2 GB * 3600 s = 7200 GB-s, which at the assumed on-demand execution rate (without any free grants applied) is$0.1872 USDper hour for the single instance.
2 GB * 3600 s = 7200 GB-s
$0.1872 USD
As in the CPU-bound scenario, the on-demand per-execution charge (without any free grants) of 40 requests per second is equal to40 * 3600 = 144,000or 0.144 million executions per hour. In this case, the total (grant-free) hourly cost of executions0.144 * $0.40, which is$0.0576per hour.
40 * 3600 = 144,000
0.144 * $0.40
$0.0576
In this scenario, the total hourly cost of running on-demand on a single instance is$0.1872 + $0.0576 = $0.245 USD.
$0.1872 + $0.0576 = $0.245 USD
The executioncostof a single function execution is measured inGB-seconds. Execution cost is calculated by combining its memory usage with its execution time. A function that runs for longer costs more, as does a function that consumes more memory.
Consider a case where the amount of memory used by the function stays constant. In this case, calculating the cost is simple multiplication. For example, say that your function consumed 0.5 GB for 3 seconds. Then the execution cost is0.5GB * 3s = 1.5 GB-seconds.
0.5GB * 3s = 1.5 GB-seconds
Since memory usage changes over time, the calculation is essentially the integral of memory usage over time. The system does this calculation by sampling the memory usage of the process (along with child processes) at regular intervals. As mentioned on thepricing page, memory usage is rounded up to the nearest 128-MB bucket. When your process is using 160 MB, you're charged for 256 MB. The calculation takes into account concurrency, which is multiple concurrent function executions in the same process.
Note
While CPU usage isn't directly considered in execution cost, it can have an impact on the cost when it affects the execution time of the function.
For an HTTP-triggered function, when an error occurs before your function code begins to execute you aren't charged for an execution. This means that 401 responses from the platform due to API key validation or the App Service Authentication / Authorization feature don't count against your execution cost. Similarly, 5xx status code responses aren't counted when they occur in the platform before your function processes the request. A 5xx response generated by the platform after your function code has started to execute is still counted as an execution, even when the error isn't raised from your function code.
Other related costs
When estimating the overall cost of running your functions in any plan, remember that the Functions runtime uses several other Azure services, which are each billed separately. When you estimate pricing for function apps, any triggers and bindings you have that integrate with other Azure services require you to create and pay for those other services.
For functions running in a Consumption plan, the total cost is the execution cost of your functions, plus the cost of bandwidth and other services.
When estimating the overall costs of your function app and related services, use theAzure pricing calculator.
Behaviors affecting execution time
The following behaviors of your functions can affect the execution time:
Triggers and bindings: The time taken to read input from and write output to yourfunction bindingsis counted as execution time. For example, when your function uses an output binding to write a message to an Azure storage queue, your execution time includes the time taken to write the message to the queue, which is included in the calculation of the function cost.
Triggers and bindings: The time taken to read input from and write output to yourfunction bindingsis counted as execution time. For example, when your function uses an output binding to write a message to an Azure storage queue, your execution time includes the time taken to write the message to the queue, which is included in the calculation of the function cost.
Asynchronous execution: The time that your function waits for the results of an async request (awaitin C#) is counted as execution time. The GB-second calculation is based on the start and end time of the function and the memory usage over that period. What is happening over that time in terms of CPU activity isn't factored into the calculation. You might be able to reduce costs during asynchronous operations by usingDurable Functions. You're not billed for time spent at awaits in orchestrator functions.
Asynchronous execution: The time that your function waits for the results of an async request (awaitin C#) is counted as execution time. The GB-second calculation is based on the start and end time of the function and the memory usage over that period. What is happening over that time in terms of CPU activity isn't factored into the calculation. You might be able to reduce costs during asynchronous operations by usingDurable Functions. You're not billed for time spent at awaits in orchestrator functions.
await
Viewing cost-related data
Inyour invoice, you can view the cost-related data ofTotal Executions - FunctionsandExecution Time - Functions, along with the actual billed costs. However, this invoice data is a monthly aggregate for a past invoice period.
Function app-level metrics
To better understand the costs of your functions, you can use Azure Monitor to view cost-related metrics currently being generated by your function apps.
Portal
Azure CLI
Azure PowerShell
UseAzure Monitor metrics explorerto view cost-related data for your Consumption plan function apps in a graphical format.
In theAzure portal, navigate to your function app.
In theAzure portal, navigate to your function app.
In the left panel, scroll down toMonitoringand chooseMetrics.
In the left panel, scroll down toMonitoringand chooseMetrics.
FromMetric, chooseFunction Execution CountandSumforAggregation. This adds the sum of the execution counts during chosen period to the chart.
FromMetric, chooseFunction Execution CountandSumforAggregation. This adds the sum of the execution counts during chosen period to the chart.

SelectAdd metricand repeat steps 2-4 to addFunction Execution Unitsto the chart.
SelectAdd metricand repeat steps 2-4 to addFunction Execution Unitsto the chart.
The resulting chart contains the totals for both execution metrics in the chosen time range, which in this case is two hours.

As the number of execution units is so much greater than the execution count, the chart just shows execution units.
This chart shows a total of 1.11 billionFunction Execution Unitsconsumed in a two-hour period, measured in MB-milliseconds. To convert to GB-seconds, divide by 1024000. In this example, the function app consumed1110000000 / 1024000 = 1083.98GB-seconds. You can take this value and multiply by the current price of execution time on theFunctions pricing page, which gives you the cost of these two hours, assuming you've already used any free grants of execution time.
Function Execution Units
1110000000 / 1024000 = 1083.98
TheAzure CLIhas commands for retrieving metrics. You can use the CLI from a local command environment or directly from the portal usingAzure Cloud Shell. For example, the followingaz monitor metrics listcommand returns hourly data over same time period used before.
Make sure to replace<AZURE_SUBSCRIPTION_ID>with your Azure subscription ID running the command.
<AZURE_SUBSCRIPTION_ID>
az monitor metrics list --resource /subscriptions/<AZURE_SUBSCRIPTION_ID>/resourceGroups/metrics-testing-consumption/providers/Microsoft.Web/sites/metrics-testing-consumption --metric FunctionExecutionUnits,FunctionExecutionCount --aggregation Total --interval PT1H --start-time 2019-09-11T21:46:00Z --end-time 2019-09-11T23:18:00Z
az monitor metrics list --resource /subscriptions/<AZURE_SUBSCRIPTION_ID>/resourceGroups/metrics-testing-consumption/providers/Microsoft.Web/sites/metrics-testing-consumption --metric FunctionExecutionUnits,FunctionExecutionCount --aggregation Total --interval PT1H --start-time 2019-09-11T21:46:00Z --end-time 2019-09-11T23:18:00Z
This command returns a JSON payload that looks like the following example:
{
  "cost": 0.0,
  "interval": "1:00:00",
  "namespace": "Microsoft.Web/sites",
  "resourceregion": "centralus",
  "timespan": "2019-09-11T21:46:00Z/2019-09-11T23:18:00Z",
  "value": [
    {
      "id": "/subscriptions/XXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXX/resourceGroups/metrics-testing-consumption/providers/Microsoft.Web/sites/metrics-testing-consumption/providers/Microsoft.Insights/metrics/FunctionExecutionUnits",
      "name": {
        "localizedValue": "Function Execution Units",
        "value": "FunctionExecutionUnits"
      },
      "resourceGroup": "metrics-testing-consumption",
      "timeseries": [
        {
          "data": [
            {
              "average": null,
              "count": null,
              "maximum": null,
              "minimum": null,
              "timeStamp": "2019-09-11T21:46:00+00:00",
              "total": 793294592.0
            },
            {
              "average": null,
              "count": null,
              "maximum": null,
              "minimum": null,
              "timeStamp": "2019-09-11T22:46:00+00:00",
              "total": 316576256.0
            }
          ],
          "metadatavalues": []
        }
      ],
      "type": "Microsoft.Insights/metrics",
      "unit": "Count"
    },
    {
      "id": "/subscriptions/XXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXX/resourceGroups/metrics-testing-consumption/providers/Microsoft.Web/sites/metrics-testing-consumption/providers/Microsoft.Insights/metrics/FunctionExecutionCount",
      "name": {
        "localizedValue": "Function Execution Count",
        "value": "FunctionExecutionCount"
      },
      "resourceGroup": "metrics-testing-consumption",
      "timeseries": [
        {
          "data": [
            {
              "average": null,
              "count": null,
              "maximum": null,
              "minimum": null,
              "timeStamp": "2019-09-11T21:46:00+00:00",
              "total": 33538.0
            },
            {
              "average": null,
              "count": null,
              "maximum": null,
              "minimum": null,
              "timeStamp": "2019-09-11T22:46:00+00:00",
              "total": 13040.0
            }
          ],
          "metadatavalues": []
        }
      ],
      "type": "Microsoft.Insights/metrics",
      "unit": "Count"
    }
  ]
}
{
  "cost": 0.0,
  "interval": "1:00:00",
  "namespace": "Microsoft.Web/sites",
  "resourceregion": "centralus",
  "timespan": "2019-09-11T21:46:00Z/2019-09-11T23:18:00Z",
  "value": [
    {
      "id": "/subscriptions/XXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXX/resourceGroups/metrics-testing-consumption/providers/Microsoft.Web/sites/metrics-testing-consumption/providers/Microsoft.Insights/metrics/FunctionExecutionUnits",
      "name": {
        "localizedValue": "Function Execution Units",
        "value": "FunctionExecutionUnits"
      },
      "resourceGroup": "metrics-testing-consumption",
      "timeseries": [
        {
          "data": [
            {
              "average": null,
              "count": null,
              "maximum": null,
              "minimum": null,
              "timeStamp": "2019-09-11T21:46:00+00:00",
              "total": 793294592.0
            },
            {
              "average": null,
              "count": null,
              "maximum": null,
              "minimum": null,
              "timeStamp": "2019-09-11T22:46:00+00:00",
              "total": 316576256.0
            }
          ],
          "metadatavalues": []
        }
      ],
      "type": "Microsoft.Insights/metrics",
      "unit": "Count"
    },
    {
      "id": "/subscriptions/XXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXX/resourceGroups/metrics-testing-consumption/providers/Microsoft.Web/sites/metrics-testing-consumption/providers/Microsoft.Insights/metrics/FunctionExecutionCount",
      "name": {
        "localizedValue": "Function Execution Count",
        "value": "FunctionExecutionCount"
      },
      "resourceGroup": "metrics-testing-consumption",
      "timeseries": [
        {
          "data": [
            {
              "average": null,
              "count": null,
              "maximum": null,
              "minimum": null,
              "timeStamp": "2019-09-11T21:46:00+00:00",
              "total": 33538.0
            },
            {
              "average": null,
              "count": null,
              "maximum": null,
              "minimum": null,
              "timeStamp": "2019-09-11T22:46:00+00:00",
              "total": 13040.0
            }
          ],
          "metadatavalues": []
        }
      ],
      "type": "Microsoft.Insights/metrics",
      "unit": "Count"
    }
  ]
}
This particular response shows that from2019-09-11T21:46to2019-09-11T23:18, the app consumed 1110000000 MB-milliseconds (1083.98 GB-seconds).
2019-09-11T21:46
2019-09-11T23:18
TheAzure PowerShellhas commands for retrieving metrics. You can use the Azure PowerShell from a local command environment or directly from the portal usingAzure Cloud Shell. For example, the followingGet-AzMetriccommand returns hourly data over same time period used before.
Make sure to replace<AZURE_SUBSCRIPTION_ID>with your Azure subscription ID running the command.
<AZURE_SUBSCRIPTION_ID>
Get-AzMetric -ResourceId /subscriptions/<AZURE_SUBSCRIPTION_ID>/resourceGroups/metrics-testing-consumption/providers/Microsoft.Web/sites/metrics-testing-consumption -MetricName  FunctionExecutionUnits,FunctionExecutionCount -AggregationType Total -TimeGrain 01:00:00 -StartTime 2019-09-11T21:46:00Z -EndTime 2019-09-11T23:18:00Z
Get-AzMetric -ResourceId /subscriptions/<AZURE_SUBSCRIPTION_ID>/resourceGroups/metrics-testing-consumption/providers/Microsoft.Web/sites/metrics-testing-consumption -MetricName  FunctionExecutionUnits,FunctionExecutionCount -AggregationType Total -TimeGrain 01:00:00 -StartTime 2019-09-11T21:46:00Z -EndTime 2019-09-11T23:18:00Z
This command returns an output that looks like the following example:
Id         : /subscriptions/<AZURE_SUBSCRIPTION_ID>/resourceGroups/metrics-testing-consumption/providers/Microsoft.Web/sites/metrics-testing-consumption/providers/Microsoft.Insights/metrics/FunctionExecutionUnits
Name       : 
                LocalizedValue : Function Execution Units
                Value          : FunctionExecutionUnits
             
Type       : Microsoft.Insights/metrics
Unit       : Count
Data       : {Microsoft.Azure.Commands.Insights.OutputClasses.PSMetricValue, 
             Microsoft.Azure.Commands.Insights.OutputClasses.PSMetricValue, 
             Microsoft.Azure.Commands.Insights.OutputClasses.PSMetricValue, 
             Microsoft.Azure.Commands.Insights.OutputClasses.PSMetricValueâ¦}
Timeseries : {Microsoft.Azure.Management.Monitor.Models.TimeSeriesElement}

Id         : /subscriptions/<AZURE_SUBSCRIPTION_ID>/resourceGroups/metrics-testing-consumption/providers/Microsoft.Web/sites/metrics-testing-consumption/providers/Microsoft.Insights/metrics/FunctionExecutionCount
Name       : 
                LocalizedValue : Function Execution Count
                Value          : FunctionExecutionCount
             
Type       : Microsoft.Insights/metrics
Unit       : Count
Data       : {Microsoft.Azure.Commands.Insights.OutputClasses.PSMetricValue, 
             Microsoft.Azure.Commands.Insights.OutputClasses.PSMetricValue, 
             Microsoft.Azure.Commands.Insights.OutputClasses.PSMetricValue, 
             Microsoft.Azure.Commands.Insights.OutputClasses.PSMetricValueâ¦}
Timeseries : {Microsoft.Azure.Management.Monitor.Models.TimeSeriesElement}
Id         : /subscriptions/<AZURE_SUBSCRIPTION_ID>/resourceGroups/metrics-testing-consumption/providers/Microsoft.Web/sites/metrics-testing-consumption/providers/Microsoft.Insights/metrics/FunctionExecutionUnits
Name       : 
                LocalizedValue : Function Execution Units
                Value          : FunctionExecutionUnits
             
Type       : Microsoft.Insights/metrics
Unit       : Count
Data       : {Microsoft.Azure.Commands.Insights.OutputClasses.PSMetricValue, 
             Microsoft.Azure.Commands.Insights.OutputClasses.PSMetricValue, 
             Microsoft.Azure.Commands.Insights.OutputClasses.PSMetricValue, 
             Microsoft.Azure.Commands.Insights.OutputClasses.PSMetricValueâ¦}
Timeseries : {Microsoft.Azure.Management.Monitor.Models.TimeSeriesElement}

Id         : /subscriptions/<AZURE_SUBSCRIPTION_ID>/resourceGroups/metrics-testing-consumption/providers/Microsoft.Web/sites/metrics-testing-consumption/providers/Microsoft.Insights/metrics/FunctionExecutionCount
Name       : 
                LocalizedValue : Function Execution Count
                Value          : FunctionExecutionCount
             
Type       : Microsoft.Insights/metrics
Unit       : Count
Data       : {Microsoft.Azure.Commands.Insights.OutputClasses.PSMetricValue, 
             Microsoft.Azure.Commands.Insights.OutputClasses.PSMetricValue, 
             Microsoft.Azure.Commands.Insights.OutputClasses.PSMetricValue, 
             Microsoft.Azure.Commands.Insights.OutputClasses.PSMetricValueâ¦}
Timeseries : {Microsoft.Azure.Management.Monitor.Models.TimeSeriesElement}
TheDataproperty contains the actual metric values.
Data
Function-level metrics
Function execution units are a combination of execution time and your memory usage, which makes it a difficult metric for understanding memory usage. Memory data isn't a metric currently available through Azure Monitor. However, if you want to optimize the memory usage of your app, can use the performance counter data collected by Application Insights.
If you haven't already done so,enable Application Insights in your function app. With this integration enabled, you canquery this telemetry data in the portal.
You can use eitherAzure Monitor metrics explorerin theAzure portalor REST APIs to get Monitor Metrics data.
UnderMonitoring, selectLogs (Analytics), then copy the following telemetry query and paste it into the query window and selectRun. This query returns the total memory usage at each sampled time.
performanceCounters
| where name == "Private Bytes"
| project timestamp, name, value
performanceCounters
| where name == "Private Bytes"
| project timestamp, name, value
The results look like the following example:
Azure Monitor tracks metrics at the resource level, which for Functions is the function app. Application Insights integration emits metrics on a per-function basis. Here's an example analytics query to get the average duration of a function:
customMetrics
| where name contains "Duration"
| extend averageDuration = valueSum / valueCount
| summarize averageDurationMilliseconds=avg(averageDuration) by name
customMetrics
| where name contains "Duration"
| extend averageDuration = valueSum / valueCount
| summarize averageDurationMilliseconds=avg(averageDuration) by name
Next steps
Learn more about Monitoring function apps
Feedback
Was this page helpful?
Additional resources