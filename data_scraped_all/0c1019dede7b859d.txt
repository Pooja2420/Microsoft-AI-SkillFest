Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Quickstart: Create a Windows VM cluster in Azure using Terraform
Article
2024-08-27
5 contributors
In this article
Applies to:âï¸ Windows VMs
This article shows you how to create a Windows VM cluster (containing three Windows VM instances) in Azure using Terraform.
Create a random value for the Azure resource group name usingrandom_pet.
Create an Azure resource group usingazurerm_resource_group.
Create a random value for the Windows VM host namerandom_string.
Create a random password for the Windows VMs usingrandom_password.
Create a Windows VM using thecompute module.
Create a virtual network along with subnet using thenetwork module.
Prerequisites
Install and configure Terraform
Implement the Terraform code
Note
The sample code for this article is located in theAzure Terraform GitHub repo. You can view the log file containing thetest results from current and previous versions of Terraform.
See morearticles and sample code showing how to use Terraform to manage Azure resources
Create a directory in which to test the sample Terraform code and make it the current directory.
Create a directory in which to test the sample Terraform code and make it the current directory.
Create a file namedproviders.tfand insert the following code:terraform {
  required_version = ">=1.0"
  required_providers {
    azurerm = {
      source  = "hashicorp/azurerm"
      version = "~>3.0"
    }
    random = {
      source  = "hashicorp/random"
      version = "~>3.0"
    }
  }
}
provider "azurerm" {
  features {}
}
Create a file namedproviders.tfand insert the following code:
providers.tf
terraform {
  required_version = ">=1.0"
  required_providers {
    azurerm = {
      source  = "hashicorp/azurerm"
      version = "~>3.0"
    }
    random = {
      source  = "hashicorp/random"
      version = "~>3.0"
    }
  }
}
provider "azurerm" {
  features {}
}
terraform {
  required_version = ">=1.0"
  required_providers {
    azurerm = {
      source  = "hashicorp/azurerm"
      version = "~>3.0"
    }
    random = {
      source  = "hashicorp/random"
      version = "~>3.0"
    }
  }
}
provider "azurerm" {
  features {}
}
Create a file namedmain.tfand insert the following code:resource "random_pet" "rg_name" {
  prefix = var.resource_group_name_prefix
}

resource "azurerm_resource_group" "rg" {
  name     = random_pet.rg_name.id
  location = var.resource_group_location
}

resource "random_string" "windows_server_vm_hostname" {
  length  = 8
  lower   = true
  upper   = false
  special = false
}

resource "random_pet" "windows_server_public_ip_dns" {
  prefix = "dns"
}

resource "random_password" "password" {
  length  = 16
  special = true
  lower   = true
  upper   = true
  numeric = true
}

# The following module is a Terraform Verified Module. 
# For more information about Verified Modules, see 
# https://github.com/azure/terraform-azure-modules/
module "windows_server" {
  count                         = 3 # Define 3 Windows Server VMs
  source                        = "Azure/compute/azurerm"
  resource_group_name           = azurerm_resource_group.rg.name
  vnet_subnet_id                = module.network.vnet_subnets[0]
  is_windows_image              = true
  vm_hostname                   = "vm-${random_string.windows_server_vm_hostname.result}-${count.index}"
  delete_os_disk_on_termination = true
  admin_password                = random_password.password.result
  vm_os_simple                  = "WindowsServer"
  public_ip_dns                 = ["${random_pet.windows_server_public_ip_dns.id}-${count.index}"]
}

# The following module is a Terraform Verified Module. 
# For more information about Verified Modules, see 
# https://github.com/azure/terraform-azure-modules/
module "network" {
  source              = "Azure/network/azurerm"
  resource_group_name = azurerm_resource_group.rg.name
  version             = "5.2.0"
  subnet_prefixes     = ["10.0.1.0/24"]
  subnet_names        = ["subnet1"]
  use_for_each        = true
}
Create a file namedmain.tfand insert the following code:
main.tf
resource "random_pet" "rg_name" {
  prefix = var.resource_group_name_prefix
}

resource "azurerm_resource_group" "rg" {
  name     = random_pet.rg_name.id
  location = var.resource_group_location
}

resource "random_string" "windows_server_vm_hostname" {
  length  = 8
  lower   = true
  upper   = false
  special = false
}

resource "random_pet" "windows_server_public_ip_dns" {
  prefix = "dns"
}

resource "random_password" "password" {
  length  = 16
  special = true
  lower   = true
  upper   = true
  numeric = true
}

# The following module is a Terraform Verified Module. 
# For more information about Verified Modules, see 
# https://github.com/azure/terraform-azure-modules/
module "windows_server" {
  count                         = 3 # Define 3 Windows Server VMs
  source                        = "Azure/compute/azurerm"
  resource_group_name           = azurerm_resource_group.rg.name
  vnet_subnet_id                = module.network.vnet_subnets[0]
  is_windows_image              = true
  vm_hostname                   = "vm-${random_string.windows_server_vm_hostname.result}-${count.index}"
  delete_os_disk_on_termination = true
  admin_password                = random_password.password.result
  vm_os_simple                  = "WindowsServer"
  public_ip_dns                 = ["${random_pet.windows_server_public_ip_dns.id}-${count.index}"]
}

# The following module is a Terraform Verified Module. 
# For more information about Verified Modules, see 
# https://github.com/azure/terraform-azure-modules/
module "network" {
  source              = "Azure/network/azurerm"
  resource_group_name = azurerm_resource_group.rg.name
  version             = "5.2.0"
  subnet_prefixes     = ["10.0.1.0/24"]
  subnet_names        = ["subnet1"]
  use_for_each        = true
}
resource "random_pet" "rg_name" {
  prefix = var.resource_group_name_prefix
}

resource "azurerm_resource_group" "rg" {
  name     = random_pet.rg_name.id
  location = var.resource_group_location
}

resource "random_string" "windows_server_vm_hostname" {
  length  = 8
  lower   = true
  upper   = false
  special = false
}

resource "random_pet" "windows_server_public_ip_dns" {
  prefix = "dns"
}

resource "random_password" "password" {
  length  = 16
  special = true
  lower   = true
  upper   = true
  numeric = true
}

# The following module is a Terraform Verified Module. 
# For more information about Verified Modules, see 
# https://github.com/azure/terraform-azure-modules/
module "windows_server" {
  count                         = 3 # Define 3 Windows Server VMs
  source                        = "Azure/compute/azurerm"
  resource_group_name           = azurerm_resource_group.rg.name
  vnet_subnet_id                = module.network.vnet_subnets[0]
  is_windows_image              = true
  vm_hostname                   = "vm-${random_string.windows_server_vm_hostname.result}-${count.index}"
  delete_os_disk_on_termination = true
  admin_password                = random_password.password.result
  vm_os_simple                  = "WindowsServer"
  public_ip_dns                 = ["${random_pet.windows_server_public_ip_dns.id}-${count.index}"]
}

# The following module is a Terraform Verified Module. 
# For more information about Verified Modules, see 
# https://github.com/azure/terraform-azure-modules/
module "network" {
  source              = "Azure/network/azurerm"
  resource_group_name = azurerm_resource_group.rg.name
  version             = "5.2.0"
  subnet_prefixes     = ["10.0.1.0/24"]
  subnet_names        = ["subnet1"]
  use_for_each        = true
}
Create a file namedvariables.tfand insert the following code:variable "resource_group_location" {
  type        = string
  default     = "eastus"
  description = "Location for all resources."
}

variable "resource_group_name_prefix" {
  type        = string
  default     = "rg"
  description = "Prefix of the resource group name that's combined with a random value so name is unique in your Azure subscription."
}
Create a file namedvariables.tfand insert the following code:
variables.tf
variable "resource_group_location" {
  type        = string
  default     = "eastus"
  description = "Location for all resources."
}

variable "resource_group_name_prefix" {
  type        = string
  default     = "rg"
  description = "Prefix of the resource group name that's combined with a random value so name is unique in your Azure subscription."
}
variable "resource_group_location" {
  type        = string
  default     = "eastus"
  description = "Location for all resources."
}

variable "resource_group_name_prefix" {
  type        = string
  default     = "rg"
  description = "Prefix of the resource group name that's combined with a random value so name is unique in your Azure subscription."
}
Create a file namedoutputs.tfand insert the following code:output "resource_group_name" {
  value = azurerm_resource_group.rg.name
}

output "windows_vm_public_names" {
  value = module.windows_server[*].public_ip_dns_name
}

output "vm_public_ip_addresses" {
  value = module.windows_server[*].public_ip_address
}

output "vm_private_ip_addresses" {
  value = module.windows_server[*].network_interface_private_ip
}

output "vm_hostnames" {
  value = module.windows_server[*].vm_names
}
Create a file namedoutputs.tfand insert the following code:
outputs.tf
output "resource_group_name" {
  value = azurerm_resource_group.rg.name
}

output "windows_vm_public_names" {
  value = module.windows_server[*].public_ip_dns_name
}

output "vm_public_ip_addresses" {
  value = module.windows_server[*].public_ip_address
}

output "vm_private_ip_addresses" {
  value = module.windows_server[*].network_interface_private_ip
}

output "vm_hostnames" {
  value = module.windows_server[*].vm_names
}
output "resource_group_name" {
  value = azurerm_resource_group.rg.name
}

output "windows_vm_public_names" {
  value = module.windows_server[*].public_ip_dns_name
}

output "vm_public_ip_addresses" {
  value = module.windows_server[*].public_ip_address
}

output "vm_private_ip_addresses" {
  value = module.windows_server[*].network_interface_private_ip
}

output "vm_hostnames" {
  value = module.windows_server[*].vm_names
}
Initialize Terraform
Runterraform initto initialize the Terraform deployment. This command downloads the Azure provider required to manage your Azure resources.
terraform init -upgrade
terraform init -upgrade
Key points:
The-upgradeparameter upgrades the necessary provider plugins to the newest version that complies with the configuration's version constraints.
-upgrade
Create a Terraform execution plan
Runterraform planto create an execution plan.
terraform plan -out main.tfplan
terraform plan -out main.tfplan
Key points:
Theterraform plancommand creates an execution plan, but doesn't execute it. Instead, it determines what actions are necessary to create the configuration specified in your configuration files. This pattern allows you to verify whether the execution plan matches your expectations before making any changes to actual resources.
terraform plan
The optional-outparameter allows you to specify an output file for the plan. Using the-outparameter ensures that the plan you reviewed is exactly what is applied.
-out
-out
Apply a Terraform execution plan
Runterraform applyto apply the execution plan to your cloud infrastructure.
terraform apply main.tfplan
terraform apply main.tfplan
Key points:
The exampleterraform applycommand assumes you previously ranterraform plan -out main.tfplan.
terraform apply
terraform plan -out main.tfplan
If you specified a different filename for the-outparameter, use that same filename in the call toterraform apply.
-out
terraform apply
If you didn't use the-outparameter, callterraform applywithout any parameters.
-out
terraform apply
Cost information isn't presented during the virtual machine creation process for Terraform like it is for theAzure portal. If you want to learn more about how cost works for virtual machines, see theCost optimization Overview page.
Verify the results
Azure CLI
Azure PowerShell
Get the Azure resource group name.resource_group_name=$(terraform output -raw resource_group_name)
Get the Azure resource group name.
resource_group_name=$(terraform output -raw resource_group_name)
resource_group_name=$(terraform output -raw resource_group_name)
Runaz vm listwith aJMESPathquery to display the names of the virtual machines created in the resource group.az vm list \
  --resource-group $resource_group_name \
  --query "[].{\"VM Name\":name}" -o table
Runaz vm listwith aJMESPathquery to display the names of the virtual machines created in the resource group.
az vm list \
  --resource-group $resource_group_name \
  --query "[].{\"VM Name\":name}" -o table
az vm list \
  --resource-group $resource_group_name \
  --query "[].{\"VM Name\":name}" -o table
Get the Azure resource group name.$resource_group_name=$(terraform output -raw resource_group_name)
Get the Azure resource group name.
$resource_group_name=$(terraform output -raw resource_group_name)
$resource_group_name=$(terraform output -raw resource_group_name)
RunGet-AzVmto display the names of all the virtual machines in the resource group.Get-AzVm -ResourceGroupName $resource_group_name
RunGet-AzVmto display the names of all the virtual machines in the resource group.
Get-AzVm -ResourceGroupName $resource_group_name
Get-AzVm -ResourceGroupName $resource_group_name
Clean up resources
When you no longer need the resources created via Terraform, do the following steps:
Runterraform planand specify thedestroyflag.terraform plan -destroy -out main.destroy.tfplanKey points:Theterraform plancommand creates an execution plan, but doesn't execute it. Instead, it determines what actions are necessary to create the configuration specified in your configuration files. This pattern allows you to verify whether the execution plan matches your expectations before making any changes to actual resources.The optional-outparameter allows you to specify an output file for the plan. Using the-outparameter ensures that the plan you reviewed is exactly what is applied.
Runterraform planand specify thedestroyflag.
destroy
terraform plan -destroy -out main.destroy.tfplan
terraform plan -destroy -out main.destroy.tfplan
Key points:
Theterraform plancommand creates an execution plan, but doesn't execute it. Instead, it determines what actions are necessary to create the configuration specified in your configuration files. This pattern allows you to verify whether the execution plan matches your expectations before making any changes to actual resources.
terraform plan
The optional-outparameter allows you to specify an output file for the plan. Using the-outparameter ensures that the plan you reviewed is exactly what is applied.
-out
-out
Runterraform applyto apply the execution plan.terraform apply main.destroy.tfplan
Runterraform applyto apply the execution plan.
terraform apply main.destroy.tfplan
terraform apply main.destroy.tfplan
Troubleshoot Terraform on Azure
Troubleshoot common problems when using Terraform on Azure
Next steps
Azure Windows virtual machine tutorials
Feedback
Was this page helpful?
Additional resources