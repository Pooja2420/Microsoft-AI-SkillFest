Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Tutorial - How to use cloud-init to customize a Linux virtual machine in Azure on first boot
Article
2024-08-22
23 contributors
In this article
Applies to:âï¸ Linux VMs âï¸ Flexible scale sets
In a previous tutorial, you learned how to SSH to a virtual machine (VM) and manually install NGINX. To create VMs in a quick and consistent manner, some form of automation is typically desired. A common approach to customize a VM on first boot is to usecloud-init. In this tutorial you learn how to:
Create a cloud-init config file
Create a VM that uses a cloud-init file
View a running Node.js app after the VM is created
Use Key Vault to securely store certificates
Automate secure deployments of NGINX with cloud-init
If you choose to install and use the CLI locally, this tutorial requires that you are running the Azure CLI version 2.0.30 or later. Runaz --versionto find the version. If you need to install or upgrade, seeInstall Azure CLI.
az --version
Cloud-init overview
Cloud-initis a widely used approach to customize a Linux VM as it boots for the first time. You can use cloud-init to install packages and write files, or to configure users and security. As cloud-init runs during the initial boot process, there are no additional steps or required agents to apply your configuration.
Cloud-init also works across distributions. For example, you don't useapt-get installoryum installto install a package. Instead you can define a list of packages to install. Cloud-init automatically uses the native package management tool for the distro you select.
We are working with our partners to get cloud-init included and working in the images that they provide to Azure. For detailed information cloud-init support for each distribution, seeCloud-init support for VMs in Azure.
Create cloud-init config file
To see cloud-init in action, create a VM that installs NGINX and runs a simple 'Hello World' Node.js app. The following cloud-init configuration installs the required packages, creates a Node.js app, then initialize and starts the app.
At your bash prompt or in the Cloud Shell, create a file namedcloud-init.txtand paste the following configuration. For example, typesensible-editor cloud-init.txtto create the file and see a list of available editors. Make sure that the whole cloud-init file is copied correctly, especially the first line:
sensible-editor cloud-init.txt
#cloud-config
package_upgrade: true
packages:
  - nginx
  - nodejs
  - npm
write_files:
  - owner: www-data:www-data
    path: /etc/nginx/sites-available/default
    defer: true
    content: |
      server {
        listen 80;
        location / {
          proxy_pass http://localhost:3000;
          proxy_http_version 1.1;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection keep-alive;
          proxy_set_header Host $host;
          proxy_cache_bypass $http_upgrade;
        }
      }
  - owner: azureuser:azureuser
    path: /home/azureuser/myapp/index.js
    defer: true
    content: |
      var express = require('express')
      var app = express()
      var os = require('os');
      app.get('/', function (req, res) {
        res.send('Hello World from host ' + os.hostname() + '!')
      })
      app.listen(3000, function () {
        console.log('Hello world app listening on port 3000!')
      })
runcmd:
  - service nginx restart
  - cd "/home/azureuser/myapp"
  - npm init
  - npm install express -y
  - nodejs index.js
#cloud-config
package_upgrade: true
packages:
  - nginx
  - nodejs
  - npm
write_files:
  - owner: www-data:www-data
    path: /etc/nginx/sites-available/default
    defer: true
    content: |
      server {
        listen 80;
        location / {
          proxy_pass http://localhost:3000;
          proxy_http_version 1.1;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection keep-alive;
          proxy_set_header Host $host;
          proxy_cache_bypass $http_upgrade;
        }
      }
  - owner: azureuser:azureuser
    path: /home/azureuser/myapp/index.js
    defer: true
    content: |
      var express = require('express')
      var app = express()
      var os = require('os');
      app.get('/', function (req, res) {
        res.send('Hello World from host ' + os.hostname() + '!')
      })
      app.listen(3000, function () {
        console.log('Hello world app listening on port 3000!')
      })
runcmd:
  - service nginx restart
  - cd "/home/azureuser/myapp"
  - npm init
  - npm install express -y
  - nodejs index.js
For more information about cloud-init configuration options, seecloud-init config examples.
Create virtual machine
Before you can create a VM, create a resource group withaz group create. The following example creates a resource group namedmyResourceGroupAutomatein theeastuslocation:
az group create --name myResourceGroupAutomate --location eastus
az group create --name myResourceGroupAutomate --location eastus
Now create a VM withaz vm create. Use the--custom-dataparameter to pass in your cloud-init config file. Provide the full path to thecloud-init.txtconfig if you saved the file outside of your present working directory. The following example creates a VM namedmyVM:
--custom-data
az vm create \
    --resource-group myResourceGroupAutomate \
    --name myAutomatedVM \
    --image Ubuntu2204 \
    --admin-username azureuser \
    --generate-ssh-keys \
    --custom-data cloud-init.txt
az vm create \
    --resource-group myResourceGroupAutomate \
    --name myAutomatedVM \
    --image Ubuntu2204 \
    --admin-username azureuser \
    --generate-ssh-keys \
    --custom-data cloud-init.txt
It takes a few minutes for the VM to be created, the packages to install, and the app to start. There are background tasks that continue to run after the Azure CLI returns you to the prompt. It may be another couple of minutes before you can access the app. When the VM has been created, take note of thepublicIpAddressdisplayed by the Azure CLI. This address is used to access the Node.js app via a web browser.
publicIpAddress
To allow web traffic to reach your VM, open port 80 from the Internet withaz vm open-port:
az vm open-port --port 80 --resource-group myResourceGroupAutomate --name myAutomatedVM
az vm open-port --port 80 --resource-group myResourceGroupAutomate --name myAutomatedVM
Test web app
Now you can open a web browser and enterhttp://<publicIpAddress>in the address bar. Provide your own public IP address from the VM create process. Your Node.js app is displayed as shown in the following example:

Inject certificates from Key Vault
This optional section shows how you can securely store certificates in Azure Key Vault and inject them during the VM deployment. Rather than using a custom image that includes the certificates baked-in, this process ensures that the most up-to-date certificates are injected to a VM on first boot. During the process, the certificate never leaves the Azure platform or is exposed in a script, command-line history, or template.
Azure Key Vault safeguards cryptographic keys and secrets, such as certificates or passwords. Key Vault helps streamline the key management process and enables you to maintain control of keys that access and encrypt your data. This scenario introduces some Key Vault concepts to create and use a certificate, though is not an exhaustive overview on how to use Key Vault.
The following steps show how you can:
Create an Azure Key Vault
Generate or upload a certificate to the Key Vault
Create a secret from the certificate to inject in to a VM
Create a VM and inject the certificate
Create an Azure Key Vault
First, create a Key Vault withaz keyvault createand enable it for use when you deploy a VM. Each Key Vault requires a unique name, and should be all lower case. Replacemykeyvaultin the following example with your own unique Key Vault name:
mykeyvault
keyvault_name=mykeyvault
az keyvault create \
    --resource-group myResourceGroupAutomate \
    --name $keyvault_name \
    --enabled-for-deployment
keyvault_name=mykeyvault
az keyvault create \
    --resource-group myResourceGroupAutomate \
    --name $keyvault_name \
    --enabled-for-deployment
Generate certificate and store in Key Vault
For production use, you should import a valid certificate signed by trusted provider withaz keyvault certificate import. For this tutorial, the following example shows how you can generate a self-signed certificate withaz keyvault certificate createthat uses the default certificate policy:
az keyvault certificate create \
    --vault-name $keyvault_name \
    --name mycert \
    --policy "$(az keyvault certificate get-default-policy --output json)"
az keyvault certificate create \
    --vault-name $keyvault_name \
    --name mycert \
    --policy "$(az keyvault certificate get-default-policy --output json)"
Prepare certificate for use with VM
To use the certificate during the VM create process, obtain the ID of your certificate withaz keyvault secret list-versions. The VM needs the certificate in a certain format to inject it on boot, so convert the certificate withaz vm secret format. The following example assigns the output of these commands to variables for ease of use in the next steps:
secret=$(az keyvault secret list-versions \
          --vault-name $keyvault_name \
          --name mycert \
          --query "[?attributes.enabled].id" --output tsv)
vm_secret=$(az vm secret format --secret "$secret" --output json)
secret=$(az keyvault secret list-versions \
          --vault-name $keyvault_name \
          --name mycert \
          --query "[?attributes.enabled].id" --output tsv)
vm_secret=$(az vm secret format --secret "$secret" --output json)
Create cloud-init config to secure NGINX
When you create a VM, certificates and keys are stored in the protected/var/lib/waagent/directory. To automate adding the certificate to the VM and configuring NGINX, you can use an updated cloud-init config from the previous example.
Create a file namedcloud-init-secured.txtand paste the following configuration. If you use the Cloud Shell, create the cloud-init config file there and not on your local machine. For example, typesensible-editor cloud-init-secured.txtto create the file and see a list of available editors. Make sure that the whole cloud-init file is copied correctly, especially the first line:
sensible-editor cloud-init-secured.txt
#cloud-config
package_upgrade: true
packages:
  - nginx
  - nodejs
  - npm
write_files:
  - owner: www-data:www-data
    path: /etc/nginx/sites-available/default
    defer: true
    content: |
      server {
        listen 80;
        listen 443 ssl;
        ssl_certificate /etc/nginx/ssl/mycert.cert;
        ssl_certificate_key /etc/nginx/ssl/mycert.prv;
        location / {
          proxy_pass http://localhost:3000;
          proxy_http_version 1.1;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection keep-alive;
          proxy_set_header Host $host;
          proxy_cache_bypass $http_upgrade;
        }
      }
  - owner: azureuser:azureuser
    path: /home/azureuser/myapp/index.js
    defer: true
    content: |
      var express = require('express')
      var app = express()
      var os = require('os');
      app.get('/', function (req, res) {
        res.send('Hello World from host ' + os.hostname() + '!')
      })
      app.listen(3000, function () {
        console.log('Hello world app listening on port 3000!')
      })
runcmd:
  - secretsname=$(find /var/lib/waagent/ -name "*.prv" | cut -c -57)
  - mkdir /etc/nginx/ssl
  - cp $secretsname.crt /etc/nginx/ssl/mycert.cert
  - cp $secretsname.prv /etc/nginx/ssl/mycert.prv
  - service nginx restart
  - cd "/home/azureuser/myapp"
  - npm init
  - npm install express -y
  - nodejs index.js
#cloud-config
package_upgrade: true
packages:
  - nginx
  - nodejs
  - npm
write_files:
  - owner: www-data:www-data
    path: /etc/nginx/sites-available/default
    defer: true
    content: |
      server {
        listen 80;
        listen 443 ssl;
        ssl_certificate /etc/nginx/ssl/mycert.cert;
        ssl_certificate_key /etc/nginx/ssl/mycert.prv;
        location / {
          proxy_pass http://localhost:3000;
          proxy_http_version 1.1;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection keep-alive;
          proxy_set_header Host $host;
          proxy_cache_bypass $http_upgrade;
        }
      }
  - owner: azureuser:azureuser
    path: /home/azureuser/myapp/index.js
    defer: true
    content: |
      var express = require('express')
      var app = express()
      var os = require('os');
      app.get('/', function (req, res) {
        res.send('Hello World from host ' + os.hostname() + '!')
      })
      app.listen(3000, function () {
        console.log('Hello world app listening on port 3000!')
      })
runcmd:
  - secretsname=$(find /var/lib/waagent/ -name "*.prv" | cut -c -57)
  - mkdir /etc/nginx/ssl
  - cp $secretsname.crt /etc/nginx/ssl/mycert.cert
  - cp $secretsname.prv /etc/nginx/ssl/mycert.prv
  - service nginx restart
  - cd "/home/azureuser/myapp"
  - npm init
  - npm install express -y
  - nodejs index.js
Create secure VM
Now create a VM withaz vm create. The certificate data is injected from Key Vault with the--secretsparameter. As in the previous example, you also pass in the cloud-init config with the--custom-dataparameter:
--secrets
--custom-data
az vm create \
    --resource-group myResourceGroupAutomate \
    --name myVMWithCerts \
    --image Ubuntu2204 \
    --admin-username azureuser \
    --generate-ssh-keys \
    --custom-data cloud-init-secured.txt \
    --secrets "$vm_secret"
az vm create \
    --resource-group myResourceGroupAutomate \
    --name myVMWithCerts \
    --image Ubuntu2204 \
    --admin-username azureuser \
    --generate-ssh-keys \
    --custom-data cloud-init-secured.txt \
    --secrets "$vm_secret"
It takes a few minutes for the VM to be created, the packages to install, and the app to start. There are background tasks that continue to run after the Azure CLI returns you to the prompt. It may be another couple of minutes before you can access the app. When the VM has been created, take note of thepublicIpAddressdisplayed by the Azure CLI. This address is used to access the Node.js app via a web browser.
publicIpAddress
To allow secure web traffic to reach your VM, open port 443 from the Internet withaz vm open-port:
az vm open-port \
    --resource-group myResourceGroupAutomate \
    --name myVMWithCerts \
    --port 443
az vm open-port \
    --resource-group myResourceGroupAutomate \
    --name myVMWithCerts \
    --port 443
Test secure web app
Now you can open a web browser and enterhttps://<publicIpAddress>in the address bar. Provide your own public IP address as shown in the output of the previous VM create process. Accept the security warning if you used a self-signed certificate.
Your secured NGINX site and Node.js app is then displayed as in the following example:

Next steps
In this tutorial, you configured VMs on first boot with cloud-init. You learned how to:
Create a cloud-init config file
Create a VM that uses a cloud-init file
View a running Node.js app after the VM is created
Use Key Vault to securely store certificates
Automate secure deployments of NGINX with cloud-init
Advance to the next tutorial to learn how to create custom VM images.
Create custom VM images
Feedback
Was this page helpful?
Additional resources