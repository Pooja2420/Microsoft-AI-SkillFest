Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
How to use Packer to create Linux virtual machine images in Azure
Article
2024-08-22
15 contributors
In this article
Applies to:âï¸ Linux VMs âï¸ Flexible scale sets
Each virtual machine (VM) in Azure is created from an image that defines the Linux distribution and OS version. Images can include pre-installed applications and configurations. The Azure Marketplace provides many first and third-party images for most common distributions and application environments, or you can create your own custom images tailored to your needs. This article details how to use the open source toolPackerto define and build custom images in Azure.
Note
Azure now has a service, Azure Image Builder, for defining and creating your own custom images. Azure Image Builder is built on Packer, so you can even use your existing Packer shell provisioner scripts with it. To get started with Azure Image Builder, seeCreate a Linux VM with Azure Image Builder.
Create Azure resource group
During the build process, Packer creates temporary Azure resources as it builds the source VM. To capture that source VM for use as an image, you must define a resource group. The output from the Packer build process is stored in this resource group.
Create a resource group withaz group create. The following example creates a resource group namedmyResourceGroupin theeastuslocation:
az group create -n myResourceGroup -l eastus
az group create -n myResourceGroup -l eastus
Create Azure credentials
Packer authenticates with Azure using a service principal. An Azure service principal is a security identity that you can use with apps, services, and automation tools like Packer. You control and define the permissions as to what operations the service principal can perform in Azure.
Create a service principal withaz ad sp create-for-rbacand output the credentials that Packer needs:
az ad sp create-for-rbac --role Contributor --scopes /subscriptions/<subscription_id> --query "{ client_id: appId, client_secret: password, tenant_id: tenant }"
az ad sp create-for-rbac --role Contributor --scopes /subscriptions/<subscription_id> --query "{ client_id: appId, client_secret: password, tenant_id: tenant }"
An example of the output from the preceding commands is as follows:
{
    "client_id": "00001111-aaaa-2222-bbbb-3333cccc4444",
    "client_secret": "0e760437-bf34-4aad-9f8d-870be799c55d",
    "tenant_id": "72f988bf-86f1-41af-91ab-2d7cd011db47"
}
{
    "client_id": "00001111-aaaa-2222-bbbb-3333cccc4444",
    "client_secret": "0e760437-bf34-4aad-9f8d-870be799c55d",
    "tenant_id": "72f988bf-86f1-41af-91ab-2d7cd011db47"
}
To authenticate to Azure, you also need to obtain your Azure subscription ID withaz account show:
az account show --query "{ subscription_id: id }"
az account show --query "{ subscription_id: id }"
You use the output from these two commands in the next step.
Define Packer template
To build images, you create a template as a JSON file. In the template, you define builders and provisioners that carry out the actual build process. Packer has aprovisioner for Azurethat allows you to define Azure resources, such as the service principal credentials created in the preceding step.
Create a file namedubuntu.jsonand paste the following content. Enter your own values for the following parameters:
az ad sp
az ad sp
az ad sp
az account show
{
  "builders": [{
    "type": "azure-arm",

    "client_id": "00001111-aaaa-2222-bbbb-3333cccc4444",
    "client_secret": "0e760437-bf34-4aad-9f8d-870be799c55d",
    "tenant_id": "72f988bf-86f1-41af-91ab-2d7cd011db47",
    "subscription_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxx",

    "managed_image_resource_group_name": "myResourceGroup",
    "managed_image_name": "myPackerImage",

    "os_type": "Linux",
    "image_publisher": "canonical",
    "image_offer": "0001-com-ubuntu-server-jammy",
    "image_sku": "22_04-lts",

    "azure_tags": {
        "dept": "Engineering",
        "task": "Image deployment"
    },

    "location": "East US",
    "vm_size": "Standard_DS2_v2"
  }],
  "provisioners": [{
    "execute_command": "chmod +x {{ .Path }}; {{ .Vars }} sudo -E sh '{{ .Path }}'",
    "inline": [
      "apt-get update",
      "apt-get upgrade -y",
      "apt-get -y install nginx",

      "/usr/sbin/waagent -force -deprovision+user && export HISTSIZE=0 && sync"
    ],
    "inline_shebang": "/bin/sh -x",
    "type": "shell"
  }]
}
{
  "builders": [{
    "type": "azure-arm",

    "client_id": "00001111-aaaa-2222-bbbb-3333cccc4444",
    "client_secret": "0e760437-bf34-4aad-9f8d-870be799c55d",
    "tenant_id": "72f988bf-86f1-41af-91ab-2d7cd011db47",
    "subscription_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxx",

    "managed_image_resource_group_name": "myResourceGroup",
    "managed_image_name": "myPackerImage",

    "os_type": "Linux",
    "image_publisher": "canonical",
    "image_offer": "0001-com-ubuntu-server-jammy",
    "image_sku": "22_04-lts",

    "azure_tags": {
        "dept": "Engineering",
        "task": "Image deployment"
    },

    "location": "East US",
    "vm_size": "Standard_DS2_v2"
  }],
  "provisioners": [{
    "execute_command": "chmod +x {{ .Path }}; {{ .Vars }} sudo -E sh '{{ .Path }}'",
    "inline": [
      "apt-get update",
      "apt-get upgrade -y",
      "apt-get -y install nginx",

      "/usr/sbin/waagent -force -deprovision+user && export HISTSIZE=0 && sync"
    ],
    "inline_shebang": "/bin/sh -x",
    "type": "shell"
  }]
}
Note
Replace theimage_publisher,image_offer,image_skuvalues andinlinecommands accordingly.
image_publisher
image_offer
image_sku
inline
You can also create a filed namedubuntu.pkr.hcland paste the following content with your own values as used for the above parameters table.
source "azure-arm" "autogenerated_1" {
  azure_tags = {
    dept = "Engineering"
    task = "Image deployment"
  }
  client_id                         = "00001111-aaaa-2222-bbbb-3333cccc4444"
  client_secret                     = "0e760437-bf34-4aad-9f8d-870be799c55d"
  image_offer                       = "0001-com-ubuntu-server-jammy"
  image_publisher                   = "canonical"
  image_sku                         = "22_04-lts"
  location                          = "East US"
  managed_image_name                = "myPackerImage"
  managed_image_resource_group_name = "myResourceGroup"
  os_type                           = "Linux"
  subscription_id                   = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxx"
  tenant_id                         = "72f988bf-86f1-41af-91ab-2d7cd011db47"
  vm_size                           = "Standard_DS2_v2"
}

build {
  sources = ["source.azure-arm.autogenerated_1"]

  provisioner "shell" {
    execute_command = "chmod +x {{ .Path }}; {{ .Vars }} sudo -E sh '{{ .Path }}'"
    inline          = ["apt-get update", "apt-get upgrade -y", "apt-get -y install nginx", "/usr/sbin/waagent -force -deprovision+user && export HISTSIZE=0 && sync"]
    inline_shebang  = "/bin/sh -x"
  }

}
source "azure-arm" "autogenerated_1" {
  azure_tags = {
    dept = "Engineering"
    task = "Image deployment"
  }
  client_id                         = "00001111-aaaa-2222-bbbb-3333cccc4444"
  client_secret                     = "0e760437-bf34-4aad-9f8d-870be799c55d"
  image_offer                       = "0001-com-ubuntu-server-jammy"
  image_publisher                   = "canonical"
  image_sku                         = "22_04-lts"
  location                          = "East US"
  managed_image_name                = "myPackerImage"
  managed_image_resource_group_name = "myResourceGroup"
  os_type                           = "Linux"
  subscription_id                   = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxx"
  tenant_id                         = "72f988bf-86f1-41af-91ab-2d7cd011db47"
  vm_size                           = "Standard_DS2_v2"
}

build {
  sources = ["source.azure-arm.autogenerated_1"]

  provisioner "shell" {
    execute_command = "chmod +x {{ .Path }}; {{ .Vars }} sudo -E sh '{{ .Path }}'"
    inline          = ["apt-get update", "apt-get upgrade -y", "apt-get -y install nginx", "/usr/sbin/waagent -force -deprovision+user && export HISTSIZE=0 && sync"]
    inline_shebang  = "/bin/sh -x"
  }

}
This template builds an Ubuntu 22.04 LTS image, installs NGINX, then deprovisions the VM.
Note
If you expand on this template to provision user credentials, adjust the provisioner command that deprovisions the Azure agent to read-deprovisionrather thandeprovision+user.
The+userflag removes all user accounts from the source VM.
-deprovision
deprovision+user
+user
Build Packer image
If you don't already have Packer installed on your local machine,follow the Packer installation instructions.
Build the image by specifying your Packer template file as follows:
sudo ./packer build ubuntu.json
sudo ./packer build ubuntu.json
You can also build the image by specifying theubuntu.pkr.hclfile as follows:
sudo packer build ubuntu.pkr.hcl
sudo packer build ubuntu.pkr.hcl
An example of the output from the preceding commands is as follows:
azure-arm output will be in this color.

==> azure-arm: Running builder ...
    azure-arm: Creating Azure Resource Manager (ARM) client ...
==> azure-arm: Creating resource group ...
==> azure-arm:  -> ResourceGroupName : âpacker-Resource-Group-swtxmqm7lyâ
==> azure-arm:  -> Location          : âEast USâ
==> azure-arm:  -> Tags              :
==> azure-arm:  ->> dept : Engineering
==> azure-arm:  ->> task : Image deployment
==> azure-arm: Validating deployment template ...
==> azure-arm:  -> ResourceGroupName : âpacker-Resource-Group-swtxmqm7lyâ
==> azure-arm:  -> DeploymentName    : âpkrdpswtxmqm7lyâ
==> azure-arm: Deploying deployment template ...
==> azure-arm:  -> ResourceGroupName : âpacker-Resource-Group-swtxmqm7lyâ
==> azure-arm:  -> DeploymentName    : âpkrdpswtxmqm7lyâ
==> azure-arm: Getting the VMâs IP address ...
==> azure-arm:  -> ResourceGroupName   : âpacker-Resource-Group-swtxmqm7lyâ
==> azure-arm:  -> PublicIPAddressName : âpackerPublicIPâ
==> azure-arm:  -> NicName             : âpackerNicâ
==> azure-arm:  -> Network Connection  : âPublicEndpointâ
==> azure-arm:  -> IP Address          : â40.76.218.147â
==> azure-arm: Waiting for SSH to become available...
==> azure-arm: Connected to SSH!
==> azure-arm: Provisioning with shell script: /var/folders/h1/ymh5bdx15wgdn5hvgj1wc0zh0000gn/T/packer-shell868574263
    azure-arm: WARNING! The waagent service will be stopped.
    azure-arm: WARNING! Cached DHCP leases will be deleted.
    azure-arm: WARNING! root password will be disabled. You will not be able to login as root.
    azure-arm: WARNING! /etc/resolvconf/resolv.conf.d/tail and /etc/resolvconf/resolv.conf.d/original will be deleted.
    azure-arm: WARNING! packer account and entire home directory will be deleted.
==> azure-arm: Querying the machineâs properties ...
==> azure-arm:  -> ResourceGroupName : âpacker-Resource-Group-swtxmqm7lyâ
==> azure-arm:  -> ComputeName       : âpkrvmswtxmqm7lyâ
==> azure-arm:  -> Managed OS Disk   : â/subscriptions/guid/resourceGroups/packer-Resource-Group-swtxmqm7ly/providers/Microsoft.Compute/disks/osdiskâ
==> azure-arm: Powering off machine ...
==> azure-arm:  -> ResourceGroupName : âpacker-Resource-Group-swtxmqm7lyâ
==> azure-arm:  -> ComputeName       : âpkrvmswtxmqm7lyâ
==> azure-arm: Capturing image ...
==> azure-arm:  -> Compute ResourceGroupName : âpacker-Resource-Group-swtxmqm7lyâ
==> azure-arm:  -> Compute Name              : âpkrvmswtxmqm7lyâ
==> azure-arm:  -> Compute Location          : âEast USâ
==> azure-arm:  -> Image ResourceGroupName   : âmyResourceGroupâ
==> azure-arm:  -> Image Name                : âmyPackerImageâ
==> azure-arm:  -> Image Location            : âeastusâ
==> azure-arm: Deleting resource group ...
==> azure-arm:  -> ResourceGroupName : âpacker-Resource-Group-swtxmqm7lyâ
==> azure-arm: Deleting the temporary OS disk ...
==> azure-arm:  -> OS Disk : skipping, managed disk was used...
Build âazure-armâ finished.

==> Builds finished. The artifacts of successful builds are:
--> azure-arm: Azure.ResourceManagement.VMImage:

ManagedImageResourceGroupName: myResourceGroup
ManagedImageName: myPackerImage
ManagedImageLocation: eastus
azure-arm output will be in this color.

==> azure-arm: Running builder ...
    azure-arm: Creating Azure Resource Manager (ARM) client ...
==> azure-arm: Creating resource group ...
==> azure-arm:  -> ResourceGroupName : âpacker-Resource-Group-swtxmqm7lyâ
==> azure-arm:  -> Location          : âEast USâ
==> azure-arm:  -> Tags              :
==> azure-arm:  ->> dept : Engineering
==> azure-arm:  ->> task : Image deployment
==> azure-arm: Validating deployment template ...
==> azure-arm:  -> ResourceGroupName : âpacker-Resource-Group-swtxmqm7lyâ
==> azure-arm:  -> DeploymentName    : âpkrdpswtxmqm7lyâ
==> azure-arm: Deploying deployment template ...
==> azure-arm:  -> ResourceGroupName : âpacker-Resource-Group-swtxmqm7lyâ
==> azure-arm:  -> DeploymentName    : âpkrdpswtxmqm7lyâ
==> azure-arm: Getting the VMâs IP address ...
==> azure-arm:  -> ResourceGroupName   : âpacker-Resource-Group-swtxmqm7lyâ
==> azure-arm:  -> PublicIPAddressName : âpackerPublicIPâ
==> azure-arm:  -> NicName             : âpackerNicâ
==> azure-arm:  -> Network Connection  : âPublicEndpointâ
==> azure-arm:  -> IP Address          : â40.76.218.147â
==> azure-arm: Waiting for SSH to become available...
==> azure-arm: Connected to SSH!
==> azure-arm: Provisioning with shell script: /var/folders/h1/ymh5bdx15wgdn5hvgj1wc0zh0000gn/T/packer-shell868574263
    azure-arm: WARNING! The waagent service will be stopped.
    azure-arm: WARNING! Cached DHCP leases will be deleted.
    azure-arm: WARNING! root password will be disabled. You will not be able to login as root.
    azure-arm: WARNING! /etc/resolvconf/resolv.conf.d/tail and /etc/resolvconf/resolv.conf.d/original will be deleted.
    azure-arm: WARNING! packer account and entire home directory will be deleted.
==> azure-arm: Querying the machineâs properties ...
==> azure-arm:  -> ResourceGroupName : âpacker-Resource-Group-swtxmqm7lyâ
==> azure-arm:  -> ComputeName       : âpkrvmswtxmqm7lyâ
==> azure-arm:  -> Managed OS Disk   : â/subscriptions/guid/resourceGroups/packer-Resource-Group-swtxmqm7ly/providers/Microsoft.Compute/disks/osdiskâ
==> azure-arm: Powering off machine ...
==> azure-arm:  -> ResourceGroupName : âpacker-Resource-Group-swtxmqm7lyâ
==> azure-arm:  -> ComputeName       : âpkrvmswtxmqm7lyâ
==> azure-arm: Capturing image ...
==> azure-arm:  -> Compute ResourceGroupName : âpacker-Resource-Group-swtxmqm7lyâ
==> azure-arm:  -> Compute Name              : âpkrvmswtxmqm7lyâ
==> azure-arm:  -> Compute Location          : âEast USâ
==> azure-arm:  -> Image ResourceGroupName   : âmyResourceGroupâ
==> azure-arm:  -> Image Name                : âmyPackerImageâ
==> azure-arm:  -> Image Location            : âeastusâ
==> azure-arm: Deleting resource group ...
==> azure-arm:  -> ResourceGroupName : âpacker-Resource-Group-swtxmqm7lyâ
==> azure-arm: Deleting the temporary OS disk ...
==> azure-arm:  -> OS Disk : skipping, managed disk was used...
Build âazure-armâ finished.

==> Builds finished. The artifacts of successful builds are:
--> azure-arm: Azure.ResourceManagement.VMImage:

ManagedImageResourceGroupName: myResourceGroup
ManagedImageName: myPackerImage
ManagedImageLocation: eastus
It takes a few minutes for Packer to build the VM, run the provisioners, and clean up the deployment.
Create VM from Azure Image
You can now create a VM from your Image withaz vm create. Specify the Image you created with the--imageparameter. The following example creates a VM namedmyVMfrommyPackerImageand generates SSH keys if they don't already exist:
--image
az vm create \
    --resource-group myResourceGroup \
    --name myVM \
    --image myPackerImage \
    --admin-username azureuser \
    --generate-ssh-keys
az vm create \
    --resource-group myResourceGroup \
    --name myVM \
    --image myPackerImage \
    --admin-username azureuser \
    --generate-ssh-keys
If you wish to create VMs in a different resource group or region than your Packer image, specify the image ID rather than image name. You can obtain the image ID withaz image show.
It takes a few minutes to create the VM. Once the VM has been created, take note of thepublicIpAddressdisplayed by the Azure CLI. This address is used to access the NGINX site via a web browser.
publicIpAddress
To allow web traffic to reach your VM, open port 80 from the Internet withaz vm open-port:
az vm open-port \
    --resource-group myResourceGroup \
    --name myVM \
    --port 80
az vm open-port \
    --resource-group myResourceGroup \
    --name myVM \
    --port 80
Test VM and NGINX
Now you can open a web browser and enterhttp://publicIpAddressin the address bar. Provide your own public IP address from the VM create process. The default NGINX page is displayed as in the following example:
http://publicIpAddress

Next steps
You can also use existing Packer provisioner scripts withAzure Image Builder.
Feedback
Was this page helpful?
Additional resources