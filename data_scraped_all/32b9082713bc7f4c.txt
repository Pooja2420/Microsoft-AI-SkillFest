Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Use GitHub Actions workflow to deploy your static website in Azure Storage
Article
2025-02-12
15 contributors
In this article
Get started withGitHub Actionsby using a workflow to deploy a static site to an Azure storage account. Once you have set up a GitHub Actions workflow, you will be able to automatically deploy your site to Azure from GitHub when you make changes to your site's code.
Note
If you are usingAzure Static Web Apps, then you do not need to manually set up a GitHub Actions workflow.
Azure Static Web Apps automatically creates a GitHub Actions workflow for you.
Prerequisites
An Azure subscription and GitHub account.
An Azure account with an active subscription.Create an account for free.
A GitHub repository with your static website code. If you do not have a GitHub account,sign up for free.
A working static website hosted in Azure Storage. Learn how tohost a static website in Azure Storage. To follow this example, you should also deployAzure CDN.
Note
It's common to use a content delivery network (CDN) to reduce latency to your users around the globe and to reduce the number of transactions to your storage account. Deploying static content to a cloud-based storage service can reduce the need for potentially expensive compute instance. For more information, seeStatic Content Hosting pattern.
Generate deployment credentials
OpenID Connect
Service principal
To useAzure Login actionwith OIDC, you need to configure a federated identity credential on a Microsoft Entra application or a user-assigned managed identity.
Option 1: Microsoft Entra application
Create a Microsoft Entra application with a service principal byAzure portal,Azure CLI, orAzure PowerShell.
Copy the values forClient ID,Subscription ID, andDirectory (tenant) IDto use later in your GitHub Actions workflow.
Assign an appropriate role to your service principal byAzure portal,Azure CLI, orAzure PowerShell.
Configure a federated identity credential on a Microsoft Entra applicationto trust tokens issued by GitHub Actions to your GitHub repository.
Option 2: User-assigned managed identity
Create a user-assigned managed identity.
Copy the values forClient ID,Subscription ID, andDirectory (tenant) IDto use later in your GitHub Actions workflow.
Assign an appropriate role to your user-assigned managed identity.
Configure a federated identity credential on a user-assigned managed identityto trust tokens issued by GitHub Actions to your GitHub repository.
Create a Microsoft Entra application with a service principal byAzure portal,Azure CLI, orAzure PowerShell.
Create a client secret for your service principal byAzure portal,Azure CLI, orAzure PowerShell.
Copy the values forClient ID,Client Secret,Subscription ID, andDirectory (tenant) IDto use later in your GitHub Actions workflow.
Assign an appropriate role to your service principal byAzure portal,Azure CLI, orAzure PowerShell.
Configure GitHub secrets
OpenID Connect
Service principal
You need to provide your application'sClient ID,Directory (tenant) ID, andSubscription IDto the login action. These values can either be provided directly in the workflow or can be stored in GitHub secrets and referenced in your workflow. Saving the values as GitHub secrets is the more secure option.
InGitHub, go to your repository.
InGitHub, go to your repository.
SelectSecurity > Secrets and variables > Actions.
SelectSecurity > Secrets and variables > Actions.

SelectNew repository secret.NoteTo enhance workflow security in public repositories, useenvironment secretsinstead of repository secrets. If the environment requires approval, a job cannot access environment secrets until one of the required reviewers approves it.
SelectNew repository secret.
Note
To enhance workflow security in public repositories, useenvironment secretsinstead of repository secrets. If the environment requires approval, a job cannot access environment secrets until one of the required reviewers approves it.
Create secrets forAZURE_CLIENT_ID,AZURE_TENANT_ID, andAZURE_SUBSCRIPTION_ID. Copy these values from your Microsoft Entra application or user-assigned managed identity for your GitHub secrets:GitHub secretMicrosoft Entra application or user-assigned managed identityAZURE_CLIENT_IDClient IDAZURE_SUBSCRIPTION_IDSubscription IDAZURE_TENANT_IDDirectory (tenant) IDNoteFor security reasons, we recommend using GitHub Secrets rather than passing values directly to the workflow.
Create secrets forAZURE_CLIENT_ID,AZURE_TENANT_ID, andAZURE_SUBSCRIPTION_ID. Copy these values from your Microsoft Entra application or user-assigned managed identity for your GitHub secrets:
AZURE_CLIENT_ID
AZURE_TENANT_ID
AZURE_SUBSCRIPTION_ID
Note
For security reasons, we recommend using GitHub Secrets rather than passing values directly to the workflow.
InGitHub, go to your repository.
InGitHub, go to your repository.
Go toSettingsin the navigation menu.
Go toSettingsin the navigation menu.
SelectSecurity > Secrets and variables > Actions.
SelectSecurity > Secrets and variables > Actions.

SelectNew repository secret.
SelectNew repository secret.
Paste the entire JSON output from the Azure CLI command into the secret's value field. Give the secret the nameAZURE_CREDENTIALS.
Paste the entire JSON output from the Azure CLI command into the secret's value field. Give the secret the nameAZURE_CREDENTIALS.
AZURE_CREDENTIALS
SelectAdd secret.
SelectAdd secret.
Add your workflow
OpenID Connect
Service principal
Go toActionsfor your GitHub repository.
Go toActionsfor your GitHub repository.

SelectSet up your workflow yourself.
SelectSet up your workflow yourself.
Delete everything after theon:section of your workflow file. For example, your remaining workflow may look like this.name: CI with OpenID Connect

on:
    push:
        branches: [ main ]
Delete everything after theon:section of your workflow file. For example, your remaining workflow may look like this.
on:
name: CI with OpenID Connect

on:
    push:
        branches: [ main ]
name: CI with OpenID Connect

on:
    push:
        branches: [ main ]
Add a permissions section.name: CI with OpenID Connect

on:
    push:
        branches: [ main ]

permissions:
      id-token: write
      contents: read
Add a permissions section.
name: CI with OpenID Connect

on:
    push:
        branches: [ main ]

permissions:
      id-token: write
      contents: read
name: CI with OpenID Connect

on:
    push:
        branches: [ main ]

permissions:
      id-token: write
      contents: read
Add checkout and login actions. These actions will check out your site code and authenticate with Azure using the GitHub secrets you created earlier.name: CI with OpenID Connect

on:
    push:
        branches: [ main ]

permissions:
      id-token: write
      contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: azure/login@v2
      with:
      client-id: ${{ secrets.AZURE_CLIENT_ID }}
      tenant-id: ${{ secrets.AZURE_TENANT_ID }}
      subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
Add checkout and login actions. These actions will check out your site code and authenticate with Azure using the GitHub secrets you created earlier.
name: CI with OpenID Connect

on:
    push:
        branches: [ main ]

permissions:
      id-token: write
      contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: azure/login@v2
      with:
      client-id: ${{ secrets.AZURE_CLIENT_ID }}
      tenant-id: ${{ secrets.AZURE_TENANT_ID }}
      subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
name: CI with OpenID Connect

on:
    push:
        branches: [ main ]

permissions:
      id-token: write
      contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: azure/login@v2
      with:
      client-id: ${{ secrets.AZURE_CLIENT_ID }}
      tenant-id: ${{ secrets.AZURE_TENANT_ID }}
      subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
Use the Azure CLI action to upload your code to blob storage and to purge your CDN endpoint. Foraz storage blob upload-batch, replace the placeholder with your storage account name. The script will upload to the$webcontainer. Foraz cdn endpoint purge, replace the placeholders with your CDN profile name, CDN endpoint name, and resource group. To speed up your CDN purge, you can add the--no-waitoption toaz cdn endpoint purge. To enhance security, you can also add the--account-keyoption with yourstorage account key.- name: Upload to blob storage
      uses: azure/CLI@v1
      with:
        inlineScript: |
            az storage blob upload-batch --account-name <STORAGE_ACCOUNT_NAME>  --auth-mode key -d '$web' -s .
    - name: Purge CDN endpoint
      uses: azure/CLI@v1
      with:
        inlineScript: |
           az cdn endpoint purge --content-paths  "/*" --profile-name "CDN_PROFILE_NAME" --name "CDN_ENDPOINT" --resource-group "RESOURCE_GROUP"
Use the Azure CLI action to upload your code to blob storage and to purge your CDN endpoint. Foraz storage blob upload-batch, replace the placeholder with your storage account name. The script will upload to the$webcontainer. Foraz cdn endpoint purge, replace the placeholders with your CDN profile name, CDN endpoint name, and resource group. To speed up your CDN purge, you can add the--no-waitoption toaz cdn endpoint purge. To enhance security, you can also add the--account-keyoption with yourstorage account key.
az storage blob upload-batch
$web
az cdn endpoint purge
--no-wait
az cdn endpoint purge
--account-key
- name: Upload to blob storage
      uses: azure/CLI@v1
      with:
        inlineScript: |
            az storage blob upload-batch --account-name <STORAGE_ACCOUNT_NAME>  --auth-mode key -d '$web' -s .
    - name: Purge CDN endpoint
      uses: azure/CLI@v1
      with:
        inlineScript: |
           az cdn endpoint purge --content-paths  "/*" --profile-name "CDN_PROFILE_NAME" --name "CDN_ENDPOINT" --resource-group "RESOURCE_GROUP"
- name: Upload to blob storage
      uses: azure/CLI@v1
      with:
        inlineScript: |
            az storage blob upload-batch --account-name <STORAGE_ACCOUNT_NAME>  --auth-mode key -d '$web' -s .
    - name: Purge CDN endpoint
      uses: azure/CLI@v1
      with:
        inlineScript: |
           az cdn endpoint purge --content-paths  "/*" --profile-name "CDN_PROFILE_NAME" --name "CDN_ENDPOINT" --resource-group "RESOURCE_GROUP"
Complete your workflow by adding an action to logout of Azure. Here is the completed workflow. The file will appear in the.github/workflowsfolder of your repository.name: CI with OpenID Connect

on:
    push:
        branches: [ main ]

permissions:
      id-token: write
      contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: azure/login@v2
      with:
      client-id: ${{ secrets.AZURE_CLIENT_ID }}
      tenant-id: ${{ secrets.AZURE_TENANT_ID }}
      subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Upload to blob storage
      uses: azure/CLI@v1
      with:
        inlineScript: |
            az storage blob upload-batch --account-name <STORAGE_ACCOUNT_NAME> --auth-mode key -d '$web' -s .
    - name: Purge CDN endpoint
      uses: azure/CLI@v1
      with:
        inlineScript: |
           az cdn endpoint purge --content-paths  "/*" --profile-name "CDN_PROFILE_NAME" --name "CDN_ENDPOINT" --resource-group "RESOURCE_GROUP"

  # Azure logout
    - name: logout
      run: |
            az logout
      if: always()
Complete your workflow by adding an action to logout of Azure. Here is the completed workflow. The file will appear in the.github/workflowsfolder of your repository.
.github/workflows
name: CI with OpenID Connect

on:
    push:
        branches: [ main ]

permissions:
      id-token: write
      contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: azure/login@v2
      with:
      client-id: ${{ secrets.AZURE_CLIENT_ID }}
      tenant-id: ${{ secrets.AZURE_TENANT_ID }}
      subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Upload to blob storage
      uses: azure/CLI@v1
      with:
        inlineScript: |
            az storage blob upload-batch --account-name <STORAGE_ACCOUNT_NAME> --auth-mode key -d '$web' -s .
    - name: Purge CDN endpoint
      uses: azure/CLI@v1
      with:
        inlineScript: |
           az cdn endpoint purge --content-paths  "/*" --profile-name "CDN_PROFILE_NAME" --name "CDN_ENDPOINT" --resource-group "RESOURCE_GROUP"

  # Azure logout
    - name: logout
      run: |
            az logout
      if: always()
name: CI with OpenID Connect

on:
    push:
        branches: [ main ]

permissions:
      id-token: write
      contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: azure/login@v2
      with:
      client-id: ${{ secrets.AZURE_CLIENT_ID }}
      tenant-id: ${{ secrets.AZURE_TENANT_ID }}
      subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Upload to blob storage
      uses: azure/CLI@v1
      with:
        inlineScript: |
            az storage blob upload-batch --account-name <STORAGE_ACCOUNT_NAME> --auth-mode key -d '$web' -s .
    - name: Purge CDN endpoint
      uses: azure/CLI@v1
      with:
        inlineScript: |
           az cdn endpoint purge --content-paths  "/*" --profile-name "CDN_PROFILE_NAME" --name "CDN_ENDPOINT" --resource-group "RESOURCE_GROUP"

  # Azure logout
    - name: logout
      run: |
            az logout
      if: always()
Go toActionsfor your GitHub repository.
Go toActionsfor your GitHub repository.

SelectSet up your workflow yourself.
SelectSet up your workflow yourself.
Delete everything after theon:section of your workflow file. For example, your remaining workflow may look like this.name: CI

on:
    push:
        branches: [ main ]
Delete everything after theon:section of your workflow file. For example, your remaining workflow may look like this.
on:
name: CI

on:
    push:
        branches: [ main ]
name: CI

on:
    push:
        branches: [ main ]
Rename your workflowBlob storage website CIand add the checkout and login actions. These actions will check out your site code and authenticate with Azure using theAZURE_CREDENTIALSGitHub secret you created earlier.name: Blob storage website CI

on:
    push:
        branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: azure/login@v2
      with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
Rename your workflowBlob storage website CIand add the checkout and login actions. These actions will check out your site code and authenticate with Azure using theAZURE_CREDENTIALSGitHub secret you created earlier.
Blob storage website CI
AZURE_CREDENTIALS
name: Blob storage website CI

on:
    push:
        branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: azure/login@v2
      with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
name: Blob storage website CI

on:
    push:
        branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: azure/login@v2
      with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
Use the Azure CLI action to upload your code to blob storage and to purge your CDN endpoint. Foraz storage blob upload-batch, replace the placeholder with your storage account name. The script will upload to the$webcontainer. Foraz cdn endpoint purge, replace the placeholders with your CDN profile name, CDN endpoint name, and resource group. To speed up your CDN purge, you can add the--no-waitoption toaz cdn endpoint purge. To enhance security, you can also add the--account-keyoption with yourstorage account key.- name: Upload to blob storage
      uses: azure/CLI@v1
      with:
        inlineScript: |
            az storage blob upload-batch --account-name <STORAGE_ACCOUNT_NAME>  --auth-mode key -d '$web' -s .
    - name: Purge CDN endpoint
      uses: azure/CLI@v1
      with:
        inlineScript: |
           az cdn endpoint purge --content-paths  "/*" --profile-name "CDN_PROFILE_NAME" --name "CDN_ENDPOINT" --resource-group "RESOURCE_GROUP"
Use the Azure CLI action to upload your code to blob storage and to purge your CDN endpoint. Foraz storage blob upload-batch, replace the placeholder with your storage account name. The script will upload to the$webcontainer. Foraz cdn endpoint purge, replace the placeholders with your CDN profile name, CDN endpoint name, and resource group. To speed up your CDN purge, you can add the--no-waitoption toaz cdn endpoint purge. To enhance security, you can also add the--account-keyoption with yourstorage account key.
az storage blob upload-batch
$web
az cdn endpoint purge
--no-wait
az cdn endpoint purge
--account-key
- name: Upload to blob storage
      uses: azure/CLI@v1
      with:
        inlineScript: |
            az storage blob upload-batch --account-name <STORAGE_ACCOUNT_NAME>  --auth-mode key -d '$web' -s .
    - name: Purge CDN endpoint
      uses: azure/CLI@v1
      with:
        inlineScript: |
           az cdn endpoint purge --content-paths  "/*" --profile-name "CDN_PROFILE_NAME" --name "CDN_ENDPOINT" --resource-group "RESOURCE_GROUP"
- name: Upload to blob storage
      uses: azure/CLI@v1
      with:
        inlineScript: |
            az storage blob upload-batch --account-name <STORAGE_ACCOUNT_NAME>  --auth-mode key -d '$web' -s .
    - name: Purge CDN endpoint
      uses: azure/CLI@v1
      with:
        inlineScript: |
           az cdn endpoint purge --content-paths  "/*" --profile-name "CDN_PROFILE_NAME" --name "CDN_ENDPOINT" --resource-group "RESOURCE_GROUP"
Complete your workflow by adding an action to logout of Azure. Here is the completed workflow. The file will appear in the.github/workflowsfolder of your repository.name: Blob storage website CI

on:
    push:
        branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: azure/login@v2
      with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Upload to blob storage
      uses: azure/CLI@v1
      with:
        inlineScript: |
            az storage blob upload-batch --account-name <STORAGE_ACCOUNT_NAME> --auth-mode key -d '$web' -s .
    - name: Purge CDN endpoint
      uses: azure/CLI@v1
      with:
        inlineScript: |
           az cdn endpoint purge --content-paths  "/*" --profile-name "CDN_PROFILE_NAME" --name "CDN_ENDPOINT" --resource-group "RESOURCE_GROUP"

  # Azure logout
    - name: logout
      run: |
            az logout
      if: always()
Complete your workflow by adding an action to logout of Azure. Here is the completed workflow. The file will appear in the.github/workflowsfolder of your repository.
.github/workflows
name: Blob storage website CI

on:
    push:
        branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: azure/login@v2
      with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Upload to blob storage
      uses: azure/CLI@v1
      with:
        inlineScript: |
            az storage blob upload-batch --account-name <STORAGE_ACCOUNT_NAME> --auth-mode key -d '$web' -s .
    - name: Purge CDN endpoint
      uses: azure/CLI@v1
      with:
        inlineScript: |
           az cdn endpoint purge --content-paths  "/*" --profile-name "CDN_PROFILE_NAME" --name "CDN_ENDPOINT" --resource-group "RESOURCE_GROUP"

  # Azure logout
    - name: logout
      run: |
            az logout
      if: always()
name: Blob storage website CI

on:
    push:
        branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: azure/login@v2
      with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Upload to blob storage
      uses: azure/CLI@v1
      with:
        inlineScript: |
            az storage blob upload-batch --account-name <STORAGE_ACCOUNT_NAME> --auth-mode key -d '$web' -s .
    - name: Purge CDN endpoint
      uses: azure/CLI@v1
      with:
        inlineScript: |
           az cdn endpoint purge --content-paths  "/*" --profile-name "CDN_PROFILE_NAME" --name "CDN_ENDPOINT" --resource-group "RESOURCE_GROUP"

  # Azure logout
    - name: logout
      run: |
            az logout
      if: always()
Review your deployment
Go toActionsfor your GitHub repository.
Go toActionsfor your GitHub repository.
Open the first result to see detailed logs of your workflow's run.
Open the first result to see detailed logs of your workflow's run.

Clean up resources
When your static website and GitHub repository are no longer needed, clean up the resources you deployed by deleting the resource group and your GitHub repository.
Next steps
Learn about Azure Static Web Apps
Feedback
Was this page helpful?
Additional resources