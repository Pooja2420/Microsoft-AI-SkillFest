Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Configure a lifecycle management policy
Article
2024-07-03
14 contributors
In this article
Azure Blob Storage lifecycle management offers a rule-based policy that you can use to transition blob data to the appropriate access tiers or to expire data at the end of the data lifecycle. A lifecycle policy acts on a base blob, and optionally on the blob's versions or snapshots. For more information about lifecycle management policies, seeOptimize costs by automatically managing the data lifecycle.
A lifecycle management policy is composed of one or more rules that define a set of actions to take based on a condition being met. For a base blob, you can choose to check one of the following conditions:
The number of days since the blob was created.
The number of days since the blob was last modified.
The number of days since the blob was last accessed. To use this condition in an action, you should firstoptionally enable last access time tracking.
Note
Any operation that modifies the blob, including an update of the blob's metadata or properties, changes the last-modified time of the blob.
When the selected condition is true, then the management policy performs the specified action. For example, if you have defined an action to move a blob from the hot tier to the cool tier if it hasn't been modified for 30 days, then the lifecycle management policy will move the blob 30 days after the last write operation to that blob.
For a blob snapshot or version, the condition that is checked is the number of days since the snapshot or version was created.
Note
Lifecycle management policies are supported for block blobs and append blobs in general-purpose v2, premium block blob, and Blob Storage accounts.
Optionally enable access time tracking
Before you configure a lifecycle management policy, you can choose to enable blob access time tracking. When access time tracking is enabled, a lifecycle management policy can include an action based on the time that the blob was last accessed with a read or write operation. To minimize the effect on read access latency, only the first read of the last 24 hours updates the last access time. Subsequent reads in the same 24-hour period don't update the last access time. If a blob is modified between reads, the last access time is the more recent of the two values.
Iflast access time trackingisn't enabled,daysAfterLastAccessTimeGreaterThanuses the date the lifecycle policy was enabled instead of theLastAccessTimeproperty of the blob. This date is also used when theLastAccessTimeproperty is a null value. For more information about using last access time tracking, seeMove data based on last accessed time.
LastAccessTime
LastAccessTime
Portal
PowerShell
Azure CLI
Template
To enable last access time tracking with the Azure portal, follow these steps:
Navigate to your storage account in the Azure portal.
Navigate to your storage account in the Azure portal.
In theData managementsection, selectLifecycle management.
In theData managementsection, selectLifecycle management.
Check the checkbox "Enable access tracking"
Check the checkbox "Enable access tracking"

To enable last access time tracking with PowerShell, call theEnable-AzStorageBlobLastAccessTimeTrackingcommand, as shown in the following example. Remember to replace placeholder values in angle brackets with your own values:
# Initialize these variables with your values.
$rgName = "<resource-group>"
$accountName = "<storage-account>"

Enable-AzStorageBlobLastAccessTimeTracking  -ResourceGroupName $rgName `
    -StorageAccountName $accountName `
    -PassThru
# Initialize these variables with your values.
$rgName = "<resource-group>"
$accountName = "<storage-account>"

Enable-AzStorageBlobLastAccessTimeTracking  -ResourceGroupName $rgName `
    -StorageAccountName $accountName `
    -PassThru
To enable last access time tracking with Azure CLI, call theaz storage account blob-service-properties updatecommand, as shown in the following example. Remember to replace placeholder values in angle brackets with your own values:
az storage account blob-service-properties update \
    --resource-group <resource-group> \
    --account-name <storage-account> \
    --enable-last-access-tracking true
az storage account blob-service-properties update \
    --resource-group <resource-group> \
    --account-name <storage-account> \
    --enable-last-access-tracking true
To enable last access time tracking for a new or existing storage account with an Azure Resource Manager template, include thelastAccessTimeTrackingPolicyobject in the template definition. For details, see theMicrosoft.Storage/storageAccounts/blobServices 2021-02-01 - Bicep & ARM template reference. ThelastAccessTimeTrackingPolicyobject is available in the Azure Storage Resource Provider REST API for versions 2019-06-01 and later.
Use thedaysAfterLastAccessTimeGreaterThanproperty to specify the number of days from last access after which an action should be taken on a blob.
Create or manage a policy
You can add, edit, or remove a lifecycle management policy with the Azure portal, PowerShell, Azure CLI, or an Azure Resource Manager template.
Portal
PowerShell
Azure CLI
Template
There are two ways to add a policy through the Azure portal.
List view
Code view
In the Azure portal, navigate to your storage account.
In the Azure portal, navigate to your storage account.
UnderData management, selectLifecycle Managementto view or change lifecycle management policies.
UnderData management, selectLifecycle Managementto view or change lifecycle management policies.
Select theList Viewtab.
Select theList Viewtab.
SelectAdd a ruleand name your rule on theDetailsform. You can also set theRule scope,Blob type, andBlob subtypevalues. The following example sets the scope to filter blobs. This causes theFilter settab to be added.
SelectAdd a ruleand name your rule on theDetailsform. You can also set theRule scope,Blob type, andBlob subtypevalues. The following example sets the scope to filter blobs. This causes theFilter settab to be added.

SelectBase blobsto set the conditions for your rule. In the following example, blobs are moved to cool storage if they haven't been modified for 30 days.

TheLast accessedoption is available only if you have enabled access time tracking and you've selectedBlock blobsas the blob type. To learn how to enable access tracking, seeOptionally enable access time tracking.
If you selectedLimit blobs with filterson theDetailspage, selectFilter setto add an optional filter. The following example filters on blobs whose name begins withlogin a container calledsample-container.

SelectAddto add the new policy.
Keep in mind that a lifecycle management policy won't delete the current version of a blob until any previous versions or snapshots associated with that blob are deleted. If blobs in your storage account have previous versions or snapshots, then you should selectBase blobs,Snapshots, andVersionsin theBlob Subtypesection when you're specifying a delete action as part of the policy.
In the Azure portal, navigate to your storage account.
UnderData management, selectLifecycle Managementto view or change lifecycle management policies.
Select theCode Viewtab. On this tab, you can define a lifecycle management policy in JSON.
The following sample JSON defines a lifecycle policy that moves a block blob whose name begins withlogto the cool tier if it has been more than 30 days since the blob was modified.
{
  "rules": [
    {
      "enabled": true,
      "name": "move-to-cool",
      "type": "Lifecycle",
      "definition": {
        "actions": {
          "baseBlob": {
            "tierToCool": {
              "daysAfterModificationGreaterThan": 30
            }
          }
        },
        "filters": {
          "blobTypes": [
            "blockBlob"
          ],
          "prefixMatch": [
            "sample-container/log"
          ]
        }
      }
    }
  ]
}
{
  "rules": [
    {
      "enabled": true,
      "name": "move-to-cool",
      "type": "Lifecycle",
      "definition": {
        "actions": {
          "baseBlob": {
            "tierToCool": {
              "daysAfterModificationGreaterThan": 30
            }
          }
        },
        "filters": {
          "blobTypes": [
            "blockBlob"
          ],
          "prefixMatch": [
            "sample-container/log"
          ]
        }
      }
    }
  ]
}
To add a lifecycle management policy with PowerShell, use these commands:
Call theAdd-AzStorageAccountManagementPolicyActioncommand to define the actions that comprise a rule.
Call theNew-AzStorageAccountManagementPolicyFiltercommand to specify one or more filters for a rule.
Call theNew-AzStorageAccountManagementPolicyRulecommand to create a policy rule that includes actions and optional filters.
Call theSet-AzStorageAccountManagementPolicycommand to create the policy on the storage account.
The following example shows how to use each of these commands to create a lifecycle policy. Remember to replace placeholder values in angle brackets with your own values:
# Initialize the following variables with your values.
$rgName = "<resource-group>"
$accountName = "<storage-account>"

# Create a new action object.
$action = Add-AzStorageAccountManagementPolicyAction -BaseBlobAction Delete `
    -daysAfterModificationGreaterThan 180
Add-AzStorageAccountManagementPolicyAction -InputObject $action `
    -BaseBlobAction TierToArchive `
    -daysAfterModificationGreaterThan 90
Add-AzStorageAccountManagementPolicyAction -InputObject $action `
    -BaseBlobAction TierToCool `
    -daysAfterModificationGreaterThan 30
Add-AzStorageAccountManagementPolicyAction -InputObject $action `
    -SnapshotAction Delete `
    -daysAfterCreationGreaterThan 90
Add-AzStorageAccountManagementPolicyAction -InputObject $action `
    -BlobVersionAction TierToArchive `
    -daysAfterCreationGreaterThan 90

# Create a new filter object.
$filter = New-AzStorageAccountManagementPolicyFilter -PrefixMatch ab,cd `
    -BlobType blockBlob

# Create a new rule object.
$rule1 = New-AzStorageAccountManagementPolicyRule -Name sample-rule `
    -Action $action `
    -Filter $filter

# Create the policy.
Set-AzStorageAccountManagementPolicy -ResourceGroupName $rgName `
    -StorageAccountName $accountName `
    -Rule $rule1
# Initialize the following variables with your values.
$rgName = "<resource-group>"
$accountName = "<storage-account>"

# Create a new action object.
$action = Add-AzStorageAccountManagementPolicyAction -BaseBlobAction Delete `
    -daysAfterModificationGreaterThan 180
Add-AzStorageAccountManagementPolicyAction -InputObject $action `
    -BaseBlobAction TierToArchive `
    -daysAfterModificationGreaterThan 90
Add-AzStorageAccountManagementPolicyAction -InputObject $action `
    -BaseBlobAction TierToCool `
    -daysAfterModificationGreaterThan 30
Add-AzStorageAccountManagementPolicyAction -InputObject $action `
    -SnapshotAction Delete `
    -daysAfterCreationGreaterThan 90
Add-AzStorageAccountManagementPolicyAction -InputObject $action `
    -BlobVersionAction TierToArchive `
    -daysAfterCreationGreaterThan 90

# Create a new filter object.
$filter = New-AzStorageAccountManagementPolicyFilter -PrefixMatch ab,cd `
    -BlobType blockBlob

# Create a new rule object.
$rule1 = New-AzStorageAccountManagementPolicyRule -Name sample-rule `
    -Action $action `
    -Filter $filter

# Create the policy.
Set-AzStorageAccountManagementPolicy -ResourceGroupName $rgName `
    -StorageAccountName $accountName `
    -Rule $rule1
To add a lifecycle management policy with Azure CLI, write the policy to a JSON file, then call theaz storage account management-policy createcommand to create the policy.
The following example shows how to use each of these commands to create a lifecycle policy. Remember to replace placeholder values in angle brackets with your own values:
az storage account management-policy create \
    --account-name <storage-account> \
    --policy @policy.json \
    --resource-group <resource-group>
az storage account management-policy create \
    --account-name <storage-account> \
    --policy @policy.json \
    --resource-group <resource-group>
To define a lifecycle management policy with an Azure Resource Manager template, include theMicrosoft.Storage/storageAccounts/managementPoliciesobject in your template. For configuration details, seeMicrosoft.Storage/storageAccounts/managementPolicies 2021-02-01 - Bicep & ARM template reference. TheMicrosoft.Storage/storageAccounts/managementPoliciesobject is available in the Azure Storage Resource Provider REST API for versions 2018-11-01 and later.
See also
Optimize costs by automatically managing the data lifecycle
Known issues and limitations for lifecycle management policies
Access tiers for blob data
Feedback
Was this page helpful?
Additional resources