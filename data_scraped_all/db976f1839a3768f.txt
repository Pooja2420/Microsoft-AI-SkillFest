Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
PublishCodeCoverageResults@2 - Publish code coverage results v2 task
Article
2025-02-24
3 contributors
In this article
Use this task to get code coverage results from a build.
Syntax
# Publish code coverage results v2
# Publish any of the code coverage results from a build.
- task: PublishCodeCoverageResults@2
  inputs:
    summaryFileLocation: # string. Required. Path to summary files. 
    #pathToSources: # string. Path to Source files. 
    #failIfCoverageEmpty: false # boolean. Fail if code coverage results are missing. Default: false.
# Publish code coverage results v2
# Publish any of the code coverage results from a build.
- task: PublishCodeCoverageResults@2
  inputs:
    summaryFileLocation: # string. Required. Path to summary files. 
    #pathToSources: # string. Path to Source files. 
    #failIfCoverageEmpty: false # boolean. Fail if code coverage results are missing. Default: false.
Inputs
summaryFileLocation-Path to summary filesstring. Required.
summaryFileLocation
string
Specifies the path of the summary file containing code coverage statistics, such as line, method, and class coverage. Multiple summary files are merged into a single report. The value may contain minimatch patterns. For example:$(System.DefaultWorkingDirectory)/MyApp/**/site/cobertura/coverage.xml.More information on minimatch patterns.
$(System.DefaultWorkingDirectory)/MyApp/**/site/cobertura/coverage.xml
pathToSources-Path to Source filesstring.
pathToSources
string
Specifying a path to source files is required when coverage XML reports don't contain an absolute path to source files. For example, JaCoCo reports don't use absolute paths, so when publishing JaCoCo coverage for Java apps, the pattern is similar to$(System.DefaultWorkingDirectory)/MyApp/src/main/java/. This input should point to an absolute path to source files on the host. For example,$(System.DefaultWorkingDirectory)/MyApp/.
$(System.DefaultWorkingDirectory)/MyApp/src/main/java/
$(System.DefaultWorkingDirectory)/MyApp/
This input can be used if tests are run in a Docker container.
failIfCoverageEmpty-Fail if code coverage results are missingboolean. Default value:false.
failIfCoverageEmpty
boolean
false
Fails the task if code coverage did not produce any results to publish.
Task control options
All tasks have control options in addition to their task inputs. For more information, seeControl options and common task properties.
Output variables
None.
Remarks
Use this task in a build pipeline to publish code coverage results produced when running tests to Azure Pipelines or TFS and after generating the coverage xml files in order to obtain code coverage tab and coverage reporting details in the pipeline. The task supports all kinds of coverage formats such as: .coverage, .covx, .covb, .cjson, .xml, .lcov, pycov, etc. It generates a cjson file which contains the code coverage details. It will also produce a code coverage HTML report under the build artifacts.
Unlike thePublishCodeCoverageResults@1task, v2 can generate thediffcoverage for multiple languages in the same pipeline. Additionally, the code coverage tab of the PublishCodeCoverageResultsV2 task is the same like the one from the PublishCodeCoverageV1 task.
This task is only supported in build pipelines, not release pipelines.
Tasks such asVisual Studio Test,.NET Core,Ant,Maven,Gulp, andGruntalso provide the option to publish code coverage data to the pipeline. If you are using these tasks, you do not need a separate Publish Code Coverage Results task in the pipeline.
Prerequisite- To use the Publish Code Coverage Results v2 task in the pipeline, please use theUse .NET Coretask as a pre-requisite in the pipeline. Use the dotnet core task before the Publish Code Coverage v2 task.
Prerequisites
Configure the Publish Code Coverage Results version 2 task using the following settings.
Configure the Publish Code Coverage Results version 2 task using the following settings.

After the build completes and the Publish Code Coverage Results v2 task succeeds, select theCode Coveragetab in the pipeline run summary to view the code coverage results.
After the build completes and the Publish Code Coverage Results v2 task succeeds, select theCode Coveragetab in the pipeline run summary to view the code coverage results.

Code coverage results for JavaScript with Istanbul using YAML
To publish code coverage results for JavaScript with Istanbul using YAML, seeCustomize JavaScriptin the Ecosystems section of these topics, which also includes examples for other languages.
See anexample of publishing code coverage using Cobertura.
Docker
For apps using Docker, build and tests may run inside the container and generate code coverage results within the container. In order to publish the results to the pipeline, the resulting artifacts should be made available to thePublish Code Coverage Resultstask. For reference, you can see a similar example for publishing test results under theBuild, test, and publish results with a Docker filesection forDocker.
View results
In order to view the code coverage results in the pipeline, seeReview code coverage results.
Known issues
The publish code coverage results v2 task generates a cjson file and publishes the code coverage report under the code coverage tab. It also produces a build artifacts which is a set of HTML files that are linked from the mainindex.htmlfile. If the code coverage tab fails to show the code coverage report, check whether the input code coverage xml file is in the correct format and has the valid details.
Requirements
See also
Publish Test Results
Feedback
Was this page helpful?
Additional resources