Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Azure Functions hosting options
Article
2025-02-02
54 contributors
In this article
When you create a function app in Azure, you must choose a hosting option for your app. Azure provides you with these hosting options for your function code:
Azure Functions hosting options are facilitated by Azure App Service infrastructure on both Linux and Windows virtual machines. The hosting option you choose dictates the following behaviors:
How your function app is scaled.
The resources available to each function app instance.
Support for advanced functionality, such as Azure Virtual Network connectivity.
Support for Linux containers.
The plan you choose also impacts the costs for running your function code. For more information, seeBilling.
This article provides a detailed comparison between the various hosting options. To learn more about running and managing your function code in Linux containers, seeLinux container support in Azure Functions.
Overview of plans
The following is a summary of the benefits of the various options for Azure Functions hosting:
The remaining tables in this article compare hosting options based on various features and behaviors.
Operating system support
This table shows operating system support for the hosting options.
Linux is the only supported operating system for thePython runtime stack.
Windows deployments are code-only. Functions doesn't currently support Windows containers.
Function app time-out duration
The time-out duration for functions in a function app is defined by thefunctionTimeoutproperty in thehost.jsonproject file. This property applies specifically to function executions. After the trigger starts function execution, the function needs to return/respond within the time-out duration. To avoid time-outs, it's important towrite robust functions. For more information, seeImprove Azure Functions performance and reliability.
functionTimeout
The following table shows the default and maximum values (in minutes) for specific plans:
Regardless of the function app time-out setting, 230 seconds is the maximum amount of time that an HTTP triggered function can take to respond to a request. This is because of thedefault idle time-out of Azure Load Balancer. For longer processing times, consider using theDurable Functions async patternordefer the actual work and return an immediate response.
There is no maximum execution time-out duration enforced. However, the grace period given to a function execution is 60 minutesduring scale infor the Flex Consumption and Premium plans, and a grace period of 10 minutes is given during platform updates.
Requires the App Service plan be set toAlways On. A grace period of 10 minutes is given during platform updates.
The default time-out for version 1.x of the Functions host runtime isunbounded.
When theminimum number of replicasis set to zero, the default time-out depends on the specific triggers used in the app.
Language support
For details on current native language stack support in Functions, seeSupported languages in Azure Functions.
Scale
The following table compares the scaling behaviors of the various hosting plans.Maximum instances are given on a per-function app (Consumption) or per-plan (Premium/Dedicated) basis, unless otherwise indicated.
During scale-out, there's currently a limit of 500 instances per subscription per hour for Linux apps on a Consumption plan.
In some regions, Linux apps on a Premium plan can scale to 100 instances. For more information, see thePremium plan article.
For specific limits for the various App Service plan options, see theApp Service plan limits.
On Container Apps, the default is 10 instances, but you can set themaximum number of replicas, which has an overall maximum of 1000. This setting is honored as long as there's enough cores quota available. When you create your function app from the Azure portal you're limited to 300 instances.
Total instances in a given region are effectively limited byregional subscription memory quotas.
For private endpoint restricted http triggers, scaling out is limited to at most 20 instances.
Cold start behavior
Service limits
Notes on service limits:
By default, the time-out for the Functions 1.x runtime in an App Service plan is unbounded.
Requires the App Service plan be set toAlways On. Pay at standardrates. A grace period of 10 minutes is given during platform updates.
These limits areset in the host.
The actual number of function apps that you can host depends on the activity of the apps, the size of the machine instances, and the corresponding resource utilization.
The storage limit is the total content size in temporary storage across all apps in the same App Service plan. For Consumption plans on Linux, the storage is currently 1.5 GB.
Consumption plan uses an Azure Files share for persisted storage. When you provide your own Azure Files share, the specific share size limits depend on the storage account you set forWEBSITE_CONTENTAZUREFILECONNECTIONSTRING.
On Linux, you mustexplicitly mount your own Azure Files share.
When your function app is hosted in aConsumption plan, only the CNAME option is supported. For function apps in aPremium planor anApp Service plan, you can map a custom domain using either a CNAME or an A record.
There's no maximum execution time-out duration enforced. However, the grace period given to a function execution is 60 minutesduring scale inand 10 minutes during platform updates.
Workers are roles that host customer apps. Workers are available in three fixed sizes: One vCPU/3.5 GB RAM; Two vCPU/7 GB RAM; Four vCPU/14 GB RAM.
SeeApp Service limitsfor details.
Including the production slot.
There's currently a limit of 5,000 function apps in a given subscription.
Flex Consumption plan instance sizes are currently defined as either 2,048 MB or 4,096 MB. For more information, seeInstance memory.
Flex Consumption plan has a regional subscription quota that limits the total memory usage of all instances across a given region. For more information, seeRegional subscription memory quotas. Container Apps has Environments and cores quotas per subscription. SeeQuotas for Azure Container Apps.
When theminimum number of replicasis set to zero, the default time-out depends on the specific triggers used in the app.
When theminimum number of replicasis set to one or more.
On Container Apps, you can set themaximum number of replicas, which is honored as long as there's enough cores quota available.
Networking features
For more information, seeNetworking in Azure Container Apps environment.
There are special considerations when working withvirtual network triggers.
Only the Dedicated/ASE plan supports gateway-required virtual network integration.
Billing
For a direct cost comparison between dynamic hosting plans (Consumption, Flex Consumption, and Premium), see theAzure Functions pricing page. For pricing of the various Dedicated plan options, see theApp Service pricing page. For pricing Container Apps hosting, seeAzure Container Apps pricing.
Limitations for creating new function apps in an existing resource group
In some cases, when trying to create a new hosting plan for your function app in an existing resource group you might receive one of the following errors:
The pricing tier isn't allowed in this resource group
<SKU_name> workers aren't available in resource group <resource_group_name>
This can happen when the following conditions are met:
You create a function app in an existing resource group that has ever contained another function app or web app. For example, Linux Consumption apps aren't supported in the same resource group as Linux Dedicated or Linux Premium plans.
Your new function app is created in the same region as the previous app.
The previous app is in some way incompatible with your new app. This error can happen between SKUs, operating systems, or due to other platform-level features, such as availability zone support.
The reason this happens is due to how function app and web app plans are mapped to different pools of resources when being created. Different SKUs require a different set of infrastructure capabilities. When you create an app in a resource group, that resource group is mapped and assigned to a specific pool of resources. If you try to create another plan in that resource group and the mapped pool doesn't have the required resources, this error occurs.
When this error occurs, instead create your function app and hosting plan in a new resource group.
Next steps
Deployment technologies in Azure Functions
Azure Functions developer guide
Feedback
Was this page helpful?
Additional resources