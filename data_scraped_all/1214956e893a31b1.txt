Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Credential chains in the Azure Identity client library for JavaScript
Article
2025-01-10
2 contributors
In this article
The Azure Identity client library providescredentialswhich are public classes that implement the Azure Core library'sTokenCredentialinterface. A credential represents a distinct authentication flow for acquiring an access token from Microsoft Entra ID. These credentials can be selected individually or chained together to form an ordered sequence of authentication mechanisms to be attempted.
Individual credentialsprovide speed and certainty. If they fail, you know the credential wasn't authenticated.
Chainsprovide fallbacks. When the credential fails to authenticate, the next credential in the chain is attempted.
Design your authentication flows
When you use Azure SDK client libraries, the first step is to authenticate to Azure. There are many options of how to authenticate to consider, such as tools and IDEs used in the development team, automation workflows such as testing and CI/CD, and hosting platforms such as Azure App Service.
Choose from the following common progressions for your authentication flow:
Use theDefaultAzureCredentialforteams whose developers use various IDEs and CLIs to authenticate to Azure. This allows the greatest flexibility. This flexibility is provided at the cost of performance to validate the credentials in the chain until one succeeds.The fallback from credential to credential is selected on your behalf based on the detected environment.To determine which credential was selected, turn ondebugging.
Use theDefaultAzureCredentialforteams whose developers use various IDEs and CLIs to authenticate to Azure. This allows the greatest flexibility. This flexibility is provided at the cost of performance to validate the credentials in the chain until one succeeds.
DefaultAzureCredential
The fallback from credential to credential is selected on your behalf based on the detected environment.
To determine which credential was selected, turn ondebugging.
Use theChainedTokenCredentialforteams which have a strict and scoped selection of tools. For example, they all authenticate in and use the same IDE or CLI. This allows the team to select the exact credentials and the order which still provides flexibility but at a reduced performance cost.You select the fallback path from credential to credential regardless of the environment it's run in.To determine which credential was selected, turn ondebugging.
Use theChainedTokenCredentialforteams which have a strict and scoped selection of tools. For example, they all authenticate in and use the same IDE or CLI. This allows the team to select the exact credentials and the order which still provides flexibility but at a reduced performance cost.
ChainedTokenCredential
You select the fallback path from credential to credential regardless of the environment it's run in.
To determine which credential was selected, turn ondebugging.
Forteams with certainty of credentialsin all the environments, a control flow statement such as if/else, allows you to know which credential was chosen in each environment.There's no fallback to another credential type.You don't need to debug to determine which credential was chosen because it was specified.
Forteams with certainty of credentialsin all the environments, a control flow statement such as if/else, allows you to know which credential was chosen in each environment.
There's no fallback to another credential type.
You don't need to debug to determine which credential was chosen because it was specified.
How a chained credential works
At runtime, a credential chain attempts to authenticate using the sequence's first credential. If that credential fails to acquire an access token, the next credential in the sequence is attempted, and so on, until an access token is successfully obtained. The following sequence diagram illustrates this behavior:

Use DefaultAzureCredential for flexibility
DefaultAzureCredentialis an opinionated, preconfigured chain of credentials. It's designed to support many environments, along with the most common authentication flows and developer tools. In graphical form, the underlying chain looks like this:

The order in whichDefaultAzureCredentialattempts credentials follows.
DefaultAzureCredential
DefaultAzureCredential
az login
Connect-AzAccount
azd auth login
In its simplest form, you can use the parameterless version ofDefaultAzureCredentialas follows:
DefaultAzureCredential
import { DefaultAzureCredential } from "@azure/identity";
import { BlobServiceClient } from "@azure/storage-blob";

// Acquire a credential object
const credential = new DefaultAzureCredential();

const blobServiceClient = new BlobServiceClient(
    "https://<my_account_name>.blob.core.windows.net",
    credential
);
import { DefaultAzureCredential } from "@azure/identity";
import { BlobServiceClient } from "@azure/storage-blob";

// Acquire a credential object
const credential = new DefaultAzureCredential();

const blobServiceClient = new BlobServiceClient(
    "https://<my_account_name>.blob.core.windows.net",
    credential
);
Credentials are global to the environment
DefaultAzureCredentialchecks for the presence of certainenvironment variables. It's possible that someone could add or modify these environment variables at the system level on the host machine. Those changes apply globally and therefore alter the behavior ofDefaultAzureCredentialat runtime in any app running on that machine.
DefaultAzureCredential
DefaultAzureCredential
Use ChainedTokenCredential for granularity
ChainedTokenCredentialis an empty chain to which you add credentials to suit your app's needs. For example, the following example adds aManagedIdentityCredentialinstance, then anAzureCliCredentialinstance.
ManagedIdentityCredential
AzureCliCredential
import { 
    ChainedTokenCredential, 
    ManagedIdentityCredential, 
    AzureCliCredential 
} from "@azure/identity";

const credential = new ChainedTokenCredential(
    new ManagedIdentityCredential({ clientId: "<YOUR_CLIENT_ID>" }),
    new AzureCliCredential()
);
import { 
    ChainedTokenCredential, 
    ManagedIdentityCredential, 
    AzureCliCredential 
} from "@azure/identity";

const credential = new ChainedTokenCredential(
    new ManagedIdentityCredential({ clientId: "<YOUR_CLIENT_ID>" }),
    new AzureCliCredential()
);
The preceding code sample creates a tailored credential chain comprised of two credentials. The user-assigned managed identity variant ofManagedIdentityCredentialis attempted first, followed byAzureCliCredential, if necessary. In graphical form, the chain looks like this:
ManagedIdentityCredential
AzureCliCredential

Tip
For improved performance, optimize credential ordering for yourproduction environment. Credentials intended for use in the local development environment should be added last.
Debug a chained credential
To debug a credential chain, enableAzure SDK logging.
More resources
Azure CLI
Feedback
Was this page helpful?
Additional resources