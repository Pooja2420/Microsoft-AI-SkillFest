Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Query data using T-SQL
Article
2023-12-14
4 contributors
In this article
The Azure Data Explorer query editor supports the use of T-SQL in addition to its primary query language,Kusto query language (KQL). While KQL is the recommended query language, T-SQL can be useful for tools that are unable to use KQL.
Note
Only Data Query Language (DQL) commands are supported. For more information, seeCoverage.
Query with T-SQL
To run a T-SQL query, begin the query with an empty T-SQL comment line:--. The--syntax tells the query editor to interpret the following query as T-SQL and not KQL.
--
--
Example
Run the query
--
SELECT * FROM StormEvents
--
SELECT * FROM StormEvents
T-SQL to Kusto Query Language
The query editor supports the ability to translate T-SQL queries into KQL. This translation feature can be helpful for users who are familiar with SQL and want to learn more about KQL.
To get the equivalent KQL for a T-SQLSELECTstatement, add the keywordexplainbefore the query. The output will be the KQL version of the query, which can be useful for understanding the corresponding KQL syntax and concepts.
SELECT
explain
Remember to preface T-SQL queries with a T-SQL comment line,--, to tell the query editor to interpret the following query as T-SQL and not KQL.
--
Example
Run the query
--
explain
SELECT top(10) *
FROM StormEvents
ORDER BY DamageProperty DESC
--
explain
SELECT top(10) *
FROM StormEvents
ORDER BY DamageProperty DESC
Output
StormEvents
| project
    StartTime,
    EndTime,
    EpisodeId,
    EventId,
    State,
    EventType,
    InjuriesDirect,
    InjuriesIndirect,
    DeathsDirect,
    DeathsIndirect,
    DamageProperty,
    DamageCrops,
    Source,
    BeginLocation,
    EndLocation,
    BeginLat,
    BeginLon,
    EndLat,
    EndLon,
    EpisodeNarrative,
    EventNarrative,
    StormSummary
| sort by DamageProperty desc nulls first
| take int(10)
StormEvents
| project
    StartTime,
    EndTime,
    EpisodeId,
    EventId,
    State,
    EventType,
    InjuriesDirect,
    InjuriesIndirect,
    DeathsDirect,
    DeathsIndirect,
    DamageProperty,
    DamageCrops,
    Source,
    BeginLocation,
    EndLocation,
    BeginLat,
    BeginLon,
    EndLat,
    EndLon,
    EpisodeNarrative,
    EventNarrative,
    StormSummary
| sort by DamageProperty desc nulls first
| take int(10)
Run stored functions
When using T-SQL, we recommend that you create optimized KQL queries and encapsulate them instored functions, as doing so minimizes T-SQL code and may increase performance. For example, if you have a stored function as described in the following table, you can execute it as shown in the code example.
SELECT * FROM kusto.MyFunction(10)
SELECT * FROM kusto.MyFunction(10)
Note
To distinguish between stored functions and emulated SQL system stored procedures, execute stored functions with an explicit reference to thekustoschema. In the example, the stored function is executed usingkusto.Myfunction.
kusto
kusto.Myfunction
Set request properties
Request propertiescontrol how a query executes and returns results. To set request properties with T-SQL, preface your query with one or more statements with the following syntax:
Syntax
DECLARE@__kql_set_requestPropertyNametype=value;
DECLARE
@__kql_set_
=
;
Parameters
string
string
Note
Two statements must be separated by a semicolon, and there should be no empty line before the query.
Request properties apply only to thetabular expression statementsthat immediately follow.
Examples
The following table shows examples for how to set request properties with T-SQL.
query_datetimescope_to
request_app_name
query_results_cache_max_age
truncationmaxsize
maxoutputcolumns
notruncation
norequesttimeout
To set request properties with KQL, seeset statement.
Coverage
Azure Data Explorer offers limited support for T-SQL. The following table outlines the T-SQL statements and features that aren't supported or are partially supported.
CREATE
INSERT
DROP
ALTER
ANY
ALL
EXISTS
WITHIN GROUP
TOP
PERCENT
TOP
WITH TIES
TOP
TRUNCATE
SELECT
*
AT TIME ZONE
IF
THEN
ELSE
THEN
ELSE
TINYINT
SMALLINT
INT32
INT64
BYTE
INT16
Related content
Learn aboutSQL Server emulationin Azure Data Explorer
Use theSQL to Kusto Query Language cheat sheet
Feedback
Was this page helpful?
Additional resources