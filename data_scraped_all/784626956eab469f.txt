Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Start and stop an Azure Kubernetes Service (AKS) node pool
Article
2024-08-01
8 contributors
In this article
You might not need to continuously run your AKS workloads. For example, you might have a development cluster that has node pools running specific workloads. To optimize your compute costs, you can completely stop your node pools in your AKS cluster.
Features and limitations
You can't stop system pools.
Spot node pools are supported.
Stopped node pools can be upgraded.
The cluster and node pool must be running.
You can't stop node pools from clusters which use theNode Autoprovisioning (NAP)feature.
Before you begin
This article assumes you have an existing AKS cluster. If you need an AKS cluster, create one using theAzure CLI,Azure PowerShell, or theAzure portal.
Stop an AKS node pool
Stop a running AKS node pool using theaz aks nodepool stopcommand.az aks nodepool stop --resource-group myResourceGroup --cluster-name myAKSCluster --nodepool-name testnodepool
Stop a running AKS node pool using theaz aks nodepool stopcommand.
az aks nodepool stop
az aks nodepool stop --resource-group myResourceGroup --cluster-name myAKSCluster --nodepool-name testnodepool
az aks nodepool stop --resource-group myResourceGroup --cluster-name myAKSCluster --nodepool-name testnodepool
Verify your node pool stopped using theaz aks nodepool showcommand.az aks nodepool show --resource-group myResourceGroup --cluster-name myAKSCluster --nodepool-name testnodepoolThe following condensed example output shows thepowerStateasStopped:{
[...]
 "osType": "Linux",
    "podSubnetId": null,
    "powerState": {
        "code": "Stopped"
        },
    "provisioningState": "Succeeded",
    "proximityPlacementGroupId": null,
[...]
}NoteIf theprovisioningStateshowsStopping, your node pool is still in the process of stopping.NoteStopping the node pool will stop its Cluster Autoscaler, and starts it back when starting the node pool. So if you manually modify the number of VMSS instances in the pool while it's stopped, Cluster Autoscaler might show inconsistencies.
Verify your node pool stopped using theaz aks nodepool showcommand.
az aks nodepool show
az aks nodepool show --resource-group myResourceGroup --cluster-name myAKSCluster --nodepool-name testnodepool
az aks nodepool show --resource-group myResourceGroup --cluster-name myAKSCluster --nodepool-name testnodepool
The following condensed example output shows thepowerStateasStopped:
powerState
Stopped
{
[...]
 "osType": "Linux",
    "podSubnetId": null,
    "powerState": {
        "code": "Stopped"
        },
    "provisioningState": "Succeeded",
    "proximityPlacementGroupId": null,
[...]
}
{
[...]
 "osType": "Linux",
    "podSubnetId": null,
    "powerState": {
        "code": "Stopped"
        },
    "provisioningState": "Succeeded",
    "proximityPlacementGroupId": null,
[...]
}
Note
If theprovisioningStateshowsStopping, your node pool is still in the process of stopping.
provisioningState
Stopping
Note
Stopping the node pool will stop its Cluster Autoscaler, and starts it back when starting the node pool. So if you manually modify the number of VMSS instances in the pool while it's stopped, Cluster Autoscaler might show inconsistencies.
Start a stopped AKS node pool
Restart a stopped node pool using theaz aks nodepool startcommand.az aks nodepool start --resource-group myResourceGroup --cluster-name myAKSCluster --nodepool-name testnodepool
Restart a stopped node pool using theaz aks nodepool startcommand.
az aks nodepool start
az aks nodepool start --resource-group myResourceGroup --cluster-name myAKSCluster --nodepool-name testnodepool
az aks nodepool start --resource-group myResourceGroup --cluster-name myAKSCluster --nodepool-name testnodepool
Verify your node pool started using theaz aks nodepool showcommand.az aks nodepool show --resource-group myResourceGroup --cluster-name myAKSCluster --nodepool-name testnodepoolThe following condensed example output shows thepowerStateasRunning:{
[...]
 "osType": "Linux",
    "podSubnetId": null,
    "powerState": {
        "code": "Running"
        },
    "provisioningState": "Succeeded",
    "proximityPlacementGroupId": null,
[...]
}NoteIf theprovisioningStateshowsStarting, your node pool is still in the process of starting.
Verify your node pool started using theaz aks nodepool showcommand.
az aks nodepool show
az aks nodepool show --resource-group myResourceGroup --cluster-name myAKSCluster --nodepool-name testnodepool
az aks nodepool show --resource-group myResourceGroup --cluster-name myAKSCluster --nodepool-name testnodepool
The following condensed example output shows thepowerStateasRunning:
powerState
Running
{
[...]
 "osType": "Linux",
    "podSubnetId": null,
    "powerState": {
        "code": "Running"
        },
    "provisioningState": "Succeeded",
    "proximityPlacementGroupId": null,
[...]
}
{
[...]
 "osType": "Linux",
    "podSubnetId": null,
    "powerState": {
        "code": "Running"
        },
    "provisioningState": "Succeeded",
    "proximityPlacementGroupId": null,
[...]
}
Note
If theprovisioningStateshowsStarting, your node pool is still in the process of starting.
provisioningState
Starting
Next steps
To learn how to scaleUserpools to 0, seescaleUserpools to 0.
User
User
To learn how to stop your cluster, seecluster start/stop.
To learn how to save costs using Spot instances, seeadd a spot node pool to AKS.
To learn more about the AKS support policies, seeAKS support policies.
Azure Kubernetes Service

Additional resources