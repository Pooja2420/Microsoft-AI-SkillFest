Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Edit host and app settings for Standard logic apps in single-tenant Azure Logic Apps
Article
2025-03-14
15 contributors
In this article
Applies to:Azure Logic Apps (Standard)
Insingle-tenantAzure Logic Apps, theapp settingsfor a Standard logic app specify the global configuration options that affectall the workflowsin that logic app. However, these settings applyonlywhen these workflows run in yourlocal development environment. Locally running workflows can access these app settings aslocal environment variables, which are used by local development tools for values that can often change between environments. For example, these values can contain connection strings. When you deploy to Azure, app settings are ignored and aren't included with your deployment.
Your logic app also hashost settings, which specify the runtime configuration settings and values that apply toall the workflowsin that logic app, for example, default values for throughput, capacity, data size, and so on,whether they run locally or in Azure.
Settings arekey-valuepairs that define the setting name and value.

App settings, parameters, and deployment
In multitenant Azure Logic Apps, deployment depends on Azure Resource Manager templates (ARM templates), which combine and handle resource provisioning for both logic apps and infrastructure. This design poses a challenge when you have to maintain environment variables for logic apps across various dev, test, and production environments. Everything in an ARM template is defined at deployment. If you need to change just a single variable, you have to redeploy everything.
Insingle-tenantAzure Logic Apps, deployment becomes easier because you can separate resource provisioning between apps and infrastructure. You can useparametersto abstract values that might change between environments. By defining parameters to use in your workflows, you can first focus on designing your workflows, and then insert your environment-specific variables later. You can call and reference your environment variables at runtime by using app settings and parameters. That way, you don't have to redeploy as often.
App settings integrate with Azure Key Vault. You candirectly reference secure strings, such as connection strings and keys. Similar to Azure Resource Manager templates (ARM templates), where you can define environment variables at deployment time, you can define app settings within yourlogic app workflow definition. You can then capture dynamically generated infrastructure values, such as connection endpoints, storage strings, and more. However, app settings have size limitations and can't be referenced from certain areas in Azure Logic Apps.
Note
If you use Azure Key Vault, make sure to store only secrets, such as passwords, credentials,
and certificates. Don't use a key vault in a logic app workflow to store non-secret values,
such as URL paths, that the workflow designer needs to make calls. The designer can't
dereference an app setting that references an Azure Key Vault resource, which results
in an error and a failed call. For non-secret values, store them directly in app settings.
For more information about setting up your logic apps for deployment, see the following documentation:
Create parameters for values that change in workflows between environments for single-tenant Azure Logic Apps
DevOps deployment overview for single-tenant based logic apps
Set up DevOps deployment for single-tenant based logic apps
Visual Studio Code project structure
In Visual Studio Code, your logic app project has either of the following types:
Extension bundle-based (Node.js), which is the default type
NuGet package-based (.NET), which you can convert from the default type
Based on these types, your project might include slightly different folders or files. For example, a Nuget package-based project has a.binfolder that contains packages and other library files. An extension bundle-based project doesn't include this.binfolder.
Some scenarios require a NuGet package-based project for your app to run, for example, when you want to develop and run custom built-in operations. For more information about converting your project to use NuGet, reviewEnable built-connector authoring.
The default extension bundle-based project has a folder and file structure that is similar to the following example:
MyWorkspaceName
| MyBundleBasedLogicAppProjectName
  || .vscode
  || Artifacts
     ||| Maps 
         |||| MapName1
         |||| ...
     ||| Rules
     ||| Schemas
         |||| SchemaName1
         |||| ...
  || lib
     ||| builtinOperationSdks
         |||| JAR
         |||| net472
     ||| custom
  || WorkflowName1
     ||| workflow.json
     ||| ...
  || WorkflowName2
     ||| workflow.json
     ||| ...
  || workflow-designtime
     ||| host.json
     ||| local.settings.json
  || .funcignore
  || connections.json
  || host.json
  || local.settings.json
MyWorkspaceName
| MyBundleBasedLogicAppProjectName
  || .vscode
  || Artifacts
     ||| Maps 
         |||| MapName1
         |||| ...
     ||| Rules
     ||| Schemas
         |||| SchemaName1
         |||| ...
  || lib
     ||| builtinOperationSdks
         |||| JAR
         |||| net472
     ||| custom
  || WorkflowName1
     ||| workflow.json
     ||| ...
  || WorkflowName2
     ||| workflow.json
     ||| ...
  || workflow-designtime
     ||| host.json
     ||| local.settings.json
  || .funcignore
  || connections.json
  || host.json
  || local.settings.json
At your project's root level, you can find the following folders and files along with other items:
Microsoft.Azure.WebJobs.Script.WebHost: Repository has more than 10 non-decryptable secrets backups (host))
appSettings

Reference for app settings - local.settings.json
In Visual Studio Code, at your logic app project's root level, thelocal.settings.jsonfile contain global configuration options that affectall workflowsin that logic app while running in your local development environment. When your workflows run locally, these settings are accessed as local environment variables, and their values can often change between the various environments where you run your workflows. To view and manage these settings, reviewManage app settings - local.settings.json.
App settings in Azure Logic Apps work similarly to app settings in Azure Functions or Azure Web Apps. If you've used these other services before, you might already be familiar with app settings. For more information, reviewApp settings reference for Azure FunctionsandWork with Azure Functions Core Tools - Local settings file.
The following table describes the app settings that your logic app uses. Some settings are required for your logic app to work correctly:
APP_KIND
workflowApp
workflowApp
workflowApp
AZURE_AUTHORITY_HOST
AzureWebJobsStorage
FUNCTIONS_EXTENSION_VERSION
~4
FUNCTIONS_WORKER_RUNTIME
dotnet
node
dotnet
ServiceProviders.Sftp.FileUploadBufferTimeForTrigger
00:00:20
ServiceProviders.Sftp.OperationTimeout
00:02:00
ServiceProviders.Sftp.ServerAliveInterval
00:30:00
ServiceProviders.Sftp.SftpConnectionPoolSize
2
ServiceProviders.MaximumAllowedTriggerStateSizeInKB
10
ServiceProviders.Sql.QueryTimeout
00:02:00
WEBSITE_CONTENTSHARE
WEBSITE_LOAD_ROOT_CERTIFICATES
WEBSITE_NODE_DEFAULT_VERSION
Workflows.Connection.AuthenticationAudience
Workflows.CustomHostName
Workflows.<workflowName>.FlowState
Workflows.<workflowName>.RuntimeConfiguration.RetentionInDays
90
Workflows.RuntimeConfiguration.RetentionInDays
90
Workflows.WebhookRedirectHostUri

Manage app settings - local.settings.json
To add, update, or delete app settings, select and review the following sections for Azure portal, Visual Studio Code, Azure CLI, or ARM (Bicep) template. For app settings specific to logic apps, review thereference guide for available app settings - local.settings.json.
Azure portal
Visual Studio Code
Azure CLI
In theAzure portalsearch box, find and open your logic app.
In theAzure portalsearch box, find and open your logic app.
On your logic app menu, underSettings, selectEnvironment variables.
On your logic app menu, underSettings, selectEnvironment variables.
On theEnvironment variablespage, on theApp settingstab, review the app settings for your logic app.For more information about these settings, review thereference guide for available app settings - local.settings.json.
On theEnvironment variablespage, on theApp settingstab, review the app settings for your logic app.
For more information about these settings, review thereference guide for available app settings - local.settings.json.
To view all values, on the page toolbar, selectShow Values. Or, to view a single value, in theValuecolumn, selectShow value(eye icon).
To view all values, on the page toolbar, selectShow Values. Or, to view a single value, in theValuecolumn, selectShow value(eye icon).
On theApp settingstab, on the toolbar, selectAdd.
On theApp settingstab, on the toolbar, selectAdd.
On theAdd/Edit application settingpane, forName, enter thekeyor name for your new setting.
On theAdd/Edit application settingpane, forName, enter thekeyor name for your new setting.
ForValue, enter the value for your new setting.
ForValue, enter the value for your new setting.
When you're done, selectApply.
When you're done, selectApply.

In your logic app project, at the root project level, find and open thelocal.settings.jsonfile.
In your logic app project, at the root project level, find and open thelocal.settings.jsonfile.
In theValuesobject, review the app settings for your logic app.For more information about these settings, review thereference guide for available app settings - local.settings.json.
In theValuesobject, review the app settings for your logic app.
Values
For more information about these settings, review thereference guide for available app settings - local.settings.json.
In thelocal.settings.jsonfile, find theValuesobject.
In thelocal.settings.jsonfile, find theValuesobject.
Values
In theValuesobject, add the app setting that you want to apply when running locally in Visual Studio Code. Some settings enable you to add a setting for a specific workflow, for example:{
   "IsEncrypted": false,
   "Values": {
      "AzureWebJobsStorage": "UseDevelopmentStorage=true",
      "Workflows.WorkflowName1.FlowState" : "Disabled",
      <...>
  }
}
In theValuesobject, add the app setting that you want to apply when running locally in Visual Studio Code. Some settings enable you to add a setting for a specific workflow, for example:
Values
{
   "IsEncrypted": false,
   "Values": {
      "AzureWebJobsStorage": "UseDevelopmentStorage=true",
      "Workflows.WorkflowName1.FlowState" : "Disabled",
      <...>
  }
}
{
   "IsEncrypted": false,
   "Values": {
      "AzureWebJobsStorage": "UseDevelopmentStorage=true",
      "Workflows.WorkflowName1.FlowState" : "Disabled",
      <...>
  }
}
To review your current app settings using the Azure CLI, run the command,az logicapp config appsettings list. Make sure that your command includes the--name -nand--resource-group -gparameters, for example:
az logicapp config appsettings list
--name -n
--resource-group -g
az logicapp config appsettings list --name MyLogicApp --resource-group MyResourceGroup
az logicapp config appsettings list --name MyLogicApp --resource-group MyResourceGroup
For more information about these settings, review thereference guide for available app settings - local.settings.json.
To add or update an app setting using the Azure CLI, run the commandaz logicapp config appsettings set. Make sure that your command includes the--name nand--resource-group -gparameters. For example, the following command creates a setting with a key namedCUSTOM_LOGIC_APP_SETTINGwith a value of12345:
az logicapp config appsettings set
--name n
--resource-group -g
CUSTOM_LOGIC_APP_SETTING
12345
az logicapp config appsettings set --name MyLogicApp --resource-group MyResourceGroup --settings CUSTOM_LOGIC_APP_SETTING=12345
az logicapp config appsettings set --name MyLogicApp --resource-group MyResourceGroup --settings CUSTOM_LOGIC_APP_SETTING=12345

Reference for host settings - host.json
In Visual Studio Code, at your logic app project's root level, thehost.jsonmetadata file contains the runtime settings and default values that apply toall workflowsin a logic app resource whether running locally or in Azure. To view and manage these settings, reviewManage host settings - host.json. You can also find related limits information in theLimits and configuration for Azure Logic Appsdocumentation.

Job orchestration throughput
These settings affect the throughput and capacity for single-tenant Azure Logic Apps to run workflow operations.
Jobs.BackgroundJobs.DispatchingWorkersPulseInterval
00:00:01
Jobs.BackgroundJobs.NumPartitionsInJobDefinitionsTable
4
Jobs.BackgroundJobs.NumPartitionsInJobTriggersQueue
1
Jobs.BackgroundJobs.NumWorkersPerProcessorCount
192
Jobs.BackgroundJobs.StatelessNumWorkersPerProcessorCount
192
Both of the following settings are used to manually stop and immediately delete the specified workflows in Standard logic app.
Note
Use these settings with caution and only in non-production environments, such as load
or performance test environments, as you can't undo or recover from these operations.
Jobs.CleanupJobPartitionPrefixes
Jobs.SuspendedJobPartitionPrefixes
The following example shows the syntax for these settings where each workflow ID is followed by a colon (:) and separated by a semicolon (;):
"Jobs.CleanupJobPartitionPrefixes": "<workflow-ID-1>:; <workflow-ID-2>:",
"Jobs.SuspendedJobPartitionPrefixes": "<workflow-ID-1>:; <workflow-ID-2>:"
"Jobs.CleanupJobPartitionPrefixes": "<workflow-ID-1>:; <workflow-ID-2>:",
"Jobs.SuspendedJobPartitionPrefixes": "<workflow-ID-1>:; <workflow-ID-2>:"

Recurrence-based triggers
Microsoft.Azure.Workflows.ServiceProviders.MaximumAllowedTriggerStateSizeInKB
1

Trigger concurrency
The following settings work only for workflows that start with a recurrence-based trigger forbuilt-in, service provider-based connectors. For a workflow that starts with a function-based trigger, you might try toset up batching where supported. However, batching isn't always the correct solution. For example, with Azure Service Bus triggers, a batch might hold onto messages beyond the lock duration. As a result, any action, such as complete or abandon, fails on such messages.
Runtime.Trigger.MaximumRunConcurrency
100
Runtime.Trigger.MaximumWaitingRuns
200

Run duration and history retention
Runtime.Backend.FlowRunTimeout
90.00:00:00
Workflows.RuntimeConfiguration.RetentionInDays
Runtime.FlowMaintenanceJob.RetentionCooldownInterval
7.00:00:00

Run actions
Runtime.FlowRunRetryableActionJobCallback.ActionJobExecutionTimeout
00:10:00

Inputs and outputs
Microsoft.Azure.Workflows.TemplateLimits.InputParametersLimit
50
Runtime.ContentLink.MaximumContentSizeInBytes
104857600
Runtime.FlowRunActionJob.MaximumActionResultSize
209715200

Pagination
Runtime.FlowRunRetryableActionJobCallback.MaximumPageCount
1000

Chunking
Runtime.FlowRunRetryableActionJobCallback.MaximumContentLengthInBytesForPartialContent
1073741824
Runtime.FlowRunRetryableActionJobCallback.MaxChunkSizeInBytes
52428800
Runtime.FlowRunRetryableActionJobCallback.MaximumRequestCountForPartialContent
1000

Store content inline or use blobs
Runtime.FlowRunEngine.ForeachMaximumItemsForContentInlining
20
For each
Runtime.FlowRunRetryableActionJobCallback.MaximumPagesForContentInlining
20
Runtime.FlowTriggerSplitOnJob.MaximumItemsForContentInlining
40
SplitOn
Runtime.ScaleUnit.MaximumCharactersForContentInlining
32384

For each loops
Runtime.Backend.FlowDefaultForeachItemsLimit
100000
For each
Runtime.Backend.FlowDefaultSplitOnItemsLimit
100000
SplitOn
Runtime.Backend.ForeachDefaultDegreeOfParallelism
20
For each
1
Runtime.Backend.Stateless.FlowDefaultForeachItemsLimit
100
For each

Until loops
Runtime.Backend.MaximumUntilLimitCount
5000
Count
Until
Runtime.Backend.Stateless.FlowRunTimeout
00:05:00
Until
Runtime.Backend.Stateless.MaximumUntilLimitCount
100
Count
Until

Variables
Runtime.Backend.DefaultAppendArrayItemsLimit
100000
Runtime.Backend.VariableOperation.MaximumStatelessVariableSize
1024
Runtime.Backend.VariableOperation.MaximumVariableSize
104857600

Built-in HTTP operations
Runtime.Backend.HttpOperation.DefaultRetryCount
4
Runtime.Backend.HttpOperation.DefaultRetryInterval
00:00:07
Runtime.Backend.HttpOperation.DefaultRetryMaximumInterval
01:00:00
Runtime.Backend.HttpOperation.DefaultRetryMinimumInterval
00:00:05
Runtime.Backend.HttpOperation.MaxContentSize
104857600
Runtime.Backend.HttpOperation.RequestTimeout
00:03:45

Built-in HTTP Webhook operations
Runtime.Backend.HttpWebhookOperation.DefaultRetryCount
4
Runtime.Backend.HttpWebhookOperation.DefaultRetryInterval
00:00:07
Runtime.Backend.HttpWebhookOperation.DefaultRetryMaximumInterval
01:00:00
Runtime.Backend.HttpWebhookOperation.DefaultRetryMinimumInterval
00:00:05
Runtime.Backend.HttpWebhookOperation.DefaultWakeUpInterval
01:00:00
Runtime.Backend.HttpWebhookOperation.MaxContentSize
104857600
Runtime.Backend.HttpWebhookOperation.RequestTimeout
00:02:00

Built-in Azure Storage operations

Microsoft.Azure.Workflows.ContentStorage.RequestOptionsThreadCount
Runtime.ContentStorage.RequestOptionsDeltaBackoff
00:00:02
Runtime.ContentStorage.RequestOptionsMaximumAttempts
4
Runtime.ContentStorage.RequestOptionsMaximumExecutionTime
00:02:00
Runtime.ContentStorage.RequestOptionsServerTimeout
00:00:30

Runtime.DataStorage.RequestOptionsDeltaBackoff
00:00:02
Runtime.DataStorage.RequestOptionsMaximumAttempts
4
Runtime.DataStorage.RequestOptionsMaximumExecutionTime
00:00:45
Runtime.DataStorage.RequestOptionsServerTimeout
00:00:16

ServiceProviders.AzureFile.MaxFileSizeInBytes
150000000

Built-in Azure Functions operations
Runtime.Backend.FunctionOperation.RequestTimeout
00:03:45
Runtime.Backend.FunctionOperation.MaxContentSize
104857600
Runtime.Backend.FunctionOperation.DefaultRetryCount
4
Runtime.Backend.FunctionOperation.DefaultRetryInterval
00:00:07
Runtime.Backend.FunctionOperation.DefaultRetryMaximumInterval
01:00:00
Runtime.Backend.FunctionOperation.DefaultRetryMinimumInterval
00:00:05

Built-in Azure Service Bus operations
ServiceProviders.ServiceBus.MessageSenderOperationTimeout
00:01:00
Runtime.ServiceProviders.ServiceBus.MessageSenderPoolSizePerProcessorCount
64

Built-in SFTP operations
Runtime.ServiceProviders.Sftp.MaxFileSizeInBytes
2147483648
Runtime.ServiceProviders.Sftp.MaximumFileSizeToReadInBytes
209715200

Managed connector operations
Runtime.Backend.ApiConnectionOperation.RequestTimeout
00:02:00
Runtime.Backend.ApiConnectionOperation.MaxContentSize
104857600
Runtime.Backend.ApiConnectionOperation.DefaultRetryCount
4
Runtime.Backend.ApiConnectionOperation.DefaultRetryInterval
00:00:07
Runtime.Backend.ApiWebhookOperation.DefaultRetryMaximumInterval
01:00:00
Runtime.Backend.ApiConnectionOperation.DefaultRetryMinimumInterval
00:00:05
Runtime.Backend.ApiWebhookOperation.DefaultWakeUpInterval
01:00:00

Retry policy for all other operations
Runtime.ScaleMonitor.MaxPollingLatency
00:00:30
Runtime.Backend.Operation.MaximumRetryCount
90
Runtime.Backend.Operation.MaximumRetryInterval
01:00:00:01
Runtime.Backend.Operation.MinimumRetryInterval
00:00:05
Limitations
Maximum content sizeBy default, built-in triggers, such as HTTP or Request, are limited to the message size described inLimits and configuration reference - Messages. To handle files larger than the limit, try uploading your content as a blob toAzure Blob Storage, and then get your content using theAzure Blob connector.
Maximum content size
By default, built-in triggers, such as HTTP or Request, are limited to the message size described inLimits and configuration reference - Messages. To handle files larger than the limit, try uploading your content as a blob toAzure Blob Storage, and then get your content using theAzure Blob connector.

Manage host settings - host.json
You can add, update, or delete host settings, which specify the runtime configuration settings and values that apply toall the workflowsin that logic app, such as default values for throughput, capacity, data size, and so on,whether they run locally or in Azure. For host settings specific to logic apps, review thereference guide for available runtime and deployment settings - host.json.

Azure portal - host.json
To review the host settings for your single-tenant based logic app in the Azure portal, follow these steps:
In theAzure portalsearch box, find and open your logic app.
In theAzure portalsearch box, find and open your logic app.
On the resource menu, underDevelopment Tools, selectAdvanced Tools.
On the resource menu, underDevelopment Tools, selectAdvanced Tools.
On theAdvanced Toolspane, selectGo, which opens the Kudu environment for your logic app.
On theAdvanced Toolspane, selectGo, which opens the Kudu environment for your logic app.
On the Kudu toolbar, open theDebug consolemenu, and selectCMD.A console window opens so that you can browse to thewwwrootfolder using the command prompt. Or, you can browse the directory structure that appears above the console window.
On the Kudu toolbar, open theDebug consolemenu, and selectCMD.
A console window opens so that you can browse to thewwwrootfolder using the command prompt. Or, you can browse the directory structure that appears above the console window.
Browse along the following path to thewwwrootfolder:...\home\site\wwwroot.
Browse along the following path to thewwwrootfolder:...\home\site\wwwroot.
...\home\site\wwwroot
Above the console window, in the directory table, next to thehost.jsonfile, selectEdit.
Above the console window, in the directory table, next to thehost.jsonfile, selectEdit.
After thehost.jsonfile opens, review any host settings that were previously added for your logic app.For more information about host settings, review thereference guide for available host settings - host.json.
After thehost.jsonfile opens, review any host settings that were previously added for your logic app.
For more information about host settings, review thereference guide for available host settings - host.json.
To add a setting, follow these steps:
Before you add or edit settings, stop your logic app in the Azure portal.On the resource menu, selectOverview.On theOverviewpane's toolbar, selectStop.
Before you add or edit settings, stop your logic app in the Azure portal.
On the resource menu, selectOverview.
On the resource menu, selectOverview.
On theOverviewpane's toolbar, selectStop.
On theOverviewpane's toolbar, selectStop.
If thehost.jsonfile is already open, return to thehost.jsonfile. Otherwise, follow the preceding steps to open thehost.jsonfile.
If thehost.jsonfile is already open, return to thehost.jsonfile. Otherwise, follow the preceding steps to open thehost.jsonfile.
Under theextensionBundleobject, add theextensionsobject, which includes theworkflowandsettingsobjects, for example:{
   "version": "2.0",
   "extensionBundle": {
      "id": "Microsoft.Azure.Functions.ExtensionBundle",
      "version": "[1.*, 2.0.0)"
   },
   "extensions": {
      "workflow": {
         "settings": {
         }
      }
   }
}
Under theextensionBundleobject, add theextensionsobject, which includes theworkflowandsettingsobjects, for example:
extensionBundle
extensions
workflow
settings
{
   "version": "2.0",
   "extensionBundle": {
      "id": "Microsoft.Azure.Functions.ExtensionBundle",
      "version": "[1.*, 2.0.0)"
   },
   "extensions": {
      "workflow": {
         "settings": {
         }
      }
   }
}
{
   "version": "2.0",
   "extensionBundle": {
      "id": "Microsoft.Azure.Functions.ExtensionBundle",
      "version": "[1.*, 2.0.0)"
   },
   "extensions": {
      "workflow": {
         "settings": {
         }
      }
   }
}
In thesettingsobject, add a flat list with the host settings that you want to use for all the workflows in your logic app, whether those workflows run locally or in Azure, for example:{
   "version": "2.0",
   "extensionBundle": {
      "id": "Microsoft.Azure.Functions.ExtensionBundle",
      "version": "[1.*, 2.0.0)"
   },
   "extensions": {
      "workflow": {
         "settings": {
            "Runtime.Trigger.MaximumWaitingRuns": "100"
         }
      }
   }
}
In thesettingsobject, add a flat list with the host settings that you want to use for all the workflows in your logic app, whether those workflows run locally or in Azure, for example:
settings
{
   "version": "2.0",
   "extensionBundle": {
      "id": "Microsoft.Azure.Functions.ExtensionBundle",
      "version": "[1.*, 2.0.0)"
   },
   "extensions": {
      "workflow": {
         "settings": {
            "Runtime.Trigger.MaximumWaitingRuns": "100"
         }
      }
   }
}
{
   "version": "2.0",
   "extensionBundle": {
      "id": "Microsoft.Azure.Functions.ExtensionBundle",
      "version": "[1.*, 2.0.0)"
   },
   "extensions": {
      "workflow": {
         "settings": {
            "Runtime.Trigger.MaximumWaitingRuns": "100"
         }
      }
   }
}
When you're done, remember to selectSave.
When you're done, remember to selectSave.
Now, restart your logic app. Return to your logic app'sOverviewpage, and selectRestart.
Now, restart your logic app. Return to your logic app'sOverviewpage, and selectRestart.

Visual Studio Code - host.json
To review the host settings for your logic app in Visual Studio Code, follow these steps:
In your logic app project, at the root project level, find and open thehost.jsonfile.
In your logic app project, at the root project level, find and open thehost.jsonfile.
In theextensionsobject, underworkflowsandsettings, review any host settings that were previously added for your logic app. Otherwise, theextensionsobject won't appear in the file.For more information about host settings, review thereference guide for available host settings - host.json.
In theextensionsobject, underworkflowsandsettings, review any host settings that were previously added for your logic app. Otherwise, theextensionsobject won't appear in the file.
extensions
workflows
settings
extensions
For more information about host settings, review thereference guide for available host settings - host.json.
To add a host setting, follow these steps:
In thehost.jsonfile, under theextensionBundleobject, add theextensionsobject, which includes theworkflowandsettingsobjects, for example:{
   "version": "2.0",
   "extensionBundle": {
      "id": "Microsoft.Azure.Functions.ExtensionBundle",
      "version": "[1.*, 2.0.0)"
   },
   "extensions": {
      "workflow": {
         "settings": {
         }
      }
   }
}
In thehost.jsonfile, under theextensionBundleobject, add theextensionsobject, which includes theworkflowandsettingsobjects, for example:
extensionBundle
extensions
workflow
settings
{
   "version": "2.0",
   "extensionBundle": {
      "id": "Microsoft.Azure.Functions.ExtensionBundle",
      "version": "[1.*, 2.0.0)"
   },
   "extensions": {
      "workflow": {
         "settings": {
         }
      }
   }
}
{
   "version": "2.0",
   "extensionBundle": {
      "id": "Microsoft.Azure.Functions.ExtensionBundle",
      "version": "[1.*, 2.0.0)"
   },
   "extensions": {
      "workflow": {
         "settings": {
         }
      }
   }
}
In thesettingsobject, add a flat list with the host settings that you want to use for all the workflows in your logic app, whether those workflows run locally or in Azure, for example:{
   "version": "2.0",
   "extensionBundle": {
      "id": "Microsoft.Azure.Functions.ExtensionBundle",
      "version": "[1.*, 2.0.0)"
   },
   "extensions": {
      "workflow": {
         "settings": {
            "Runtime.Trigger.MaximumWaitingRuns": "100"
         }
      }
   }
}
In thesettingsobject, add a flat list with the host settings that you want to use for all the workflows in your logic app, whether those workflows run locally or in Azure, for example:
settings
{
   "version": "2.0",
   "extensionBundle": {
      "id": "Microsoft.Azure.Functions.ExtensionBundle",
      "version": "[1.*, 2.0.0)"
   },
   "extensions": {
      "workflow": {
         "settings": {
            "Runtime.Trigger.MaximumWaitingRuns": "100"
         }
      }
   }
}
{
   "version": "2.0",
   "extensionBundle": {
      "id": "Microsoft.Azure.Functions.ExtensionBundle",
      "version": "[1.*, 2.0.0)"
   },
   "extensions": {
      "workflow": {
         "settings": {
            "Runtime.Trigger.MaximumWaitingRuns": "100"
         }
      }
   }
}
Next steps
Create parameters for values that change in workflows between environments for single-tenant Azure Logic Apps
Set up DevOps deployment for single-tenant Azure Logic Apps
Feedback
Was this page helpful?
Additional resources