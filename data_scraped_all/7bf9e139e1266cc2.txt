Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
PublishTestResults@2 - Publish Test Results v2 task
Article
2025-03-28
8 contributors
In this article
Publish test results to Azure Pipelines.
Syntax
# Publish Test Results v2
# Publish test results to Azure Pipelines.
- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'JUnit' # 'JUnit' | 'NUnit' | 'VSTest' | 'XUnit' | 'CTest'. Alias: testRunner. Required. Test result format. Default: JUnit.
    testResultsFiles: '**/TEST-*.xml' # string. Required. Test results files. Default: **/TEST-*.xml.
    #searchFolder: '$(System.DefaultWorkingDirectory)' # string. Search folder. Default: $(System.DefaultWorkingDirectory).
    #mergeTestResults: false # boolean. Merge test results. Default: false.
    #failTaskOnFailedTests: false # boolean. Fail if there are test failures. Default: false.
    #failTaskOnFailureToPublishResults: false # boolean. Fail if there is failure in publishing test results. Default: false.
    #failTaskOnMissingResultsFile: false # boolean. Fail if no result files are found. Default: false.
    #testRunTitle: # string. Test run title. 
  # Advanced
    #buildPlatform: # string. Alias: platform. Build Platform. 
    #buildConfiguration: # string. Alias: configuration. Build Configuration. 
    #publishRunAttachments: true # boolean. Upload test results files. Default: true.
# Publish Test Results v2
# Publish test results to Azure Pipelines.
- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'JUnit' # 'JUnit' | 'NUnit' | 'VSTest' | 'XUnit' | 'CTest'. Alias: testRunner. Required. Test result format. Default: JUnit.
    testResultsFiles: '**/TEST-*.xml' # string. Required. Test results files. Default: **/TEST-*.xml.
    #searchFolder: '$(System.DefaultWorkingDirectory)' # string. Search folder. Default: $(System.DefaultWorkingDirectory).
    #mergeTestResults: false # boolean. Merge test results. Default: false.
    #failTaskOnFailedTests: false # boolean. Fail if there are test failures. Default: false.
    #failTaskOnFailureToPublishResults: false # boolean. Fail if there is failure in publishing test results. Default: false.
    #failTaskOnMissingResultsFile: false # boolean. Fail if no result files are found. Default: false.
    #testRunTitle: # string. Test run title. 
  # Advanced
    #buildPlatform: # string. Alias: platform. Build Platform. 
    #buildConfiguration: # string. Alias: configuration. Build Configuration. 
    #publishRunAttachments: true # boolean. Upload test results files. Default: true.
# Publish Test Results v2
# Publish test results to Azure Pipelines.
- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'JUnit' # 'JUnit' | 'NUnit' | 'VSTest' | 'XUnit' | 'CTest'. Alias: testRunner. Required. Test result format. Default: JUnit.
    testResultsFiles: '**/TEST-*.xml' # string. Required. Test results files. Default: **/TEST-*.xml.
    #searchFolder: '$(System.DefaultWorkingDirectory)' # string. Search folder. Default: $(System.DefaultWorkingDirectory).
    #mergeTestResults: false # boolean. Merge test results. Default: false.
    #failTaskOnFailedTests: false # boolean. Fail if there are test failures. Default: false.
    #testRunTitle: # string. Test run title. 
  # Advanced
    #buildPlatform: # string. Alias: platform. Build Platform. 
    #buildConfiguration: # string. Alias: configuration. Build Configuration. 
    #publishRunAttachments: true # boolean. Upload test results files. Default: true.
# Publish Test Results v2
# Publish test results to Azure Pipelines.
- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'JUnit' # 'JUnit' | 'NUnit' | 'VSTest' | 'XUnit' | 'CTest'. Alias: testRunner. Required. Test result format. Default: JUnit.
    testResultsFiles: '**/TEST-*.xml' # string. Required. Test results files. Default: **/TEST-*.xml.
    #searchFolder: '$(System.DefaultWorkingDirectory)' # string. Search folder. Default: $(System.DefaultWorkingDirectory).
    #mergeTestResults: false # boolean. Merge test results. Default: false.
    #failTaskOnFailedTests: false # boolean. Fail if there are test failures. Default: false.
    #testRunTitle: # string. Test run title. 
  # Advanced
    #buildPlatform: # string. Alias: platform. Build Platform. 
    #buildConfiguration: # string. Alias: configuration. Build Configuration. 
    #publishRunAttachments: true # boolean. Upload test results files. Default: true.
Inputs
testResultsFormat-Test result formatInput alias:testRunner.string. Required. Allowed values:JUnit,NUnit,VSTest,XUnit,CTest. Default value:JUnit.
testResultsFormat
testRunner
string
JUnit
NUnit
VSTest
XUnit
CTest
JUnit
Specifies the format of the results files you want to publish. The following formats are supported:CTest,JUnit,NUnit 2,NUnit 3, Visual Studio Test (TRX) andxUnit 2.
Tip
VSTestformat refers to the TRX format. So, it works also if you are producing TRX withMicrosoft.Testing.Platform (MTP)and is not specific to VSTest. The value is VSTest for historical reasons, before the introduction of MTP.
VSTest
testResultsFiles-Test results filesstring. Required. Default value:**/TEST-*.xml.
testResultsFiles
string
**/TEST-*.xml
Specifies one or more test results files.
You can use a single-folder wildcard (*) and recursive wildcards (**). For example,**/TEST-*.xmlsearches for all the XML files whose names start withTEST-in all subdirectories. If using VSTest as the test result format, the file type should be changed to.trxe.g.**/TEST-*.trx
*
**
**/TEST-*.xml
TEST-
.trx
**/TEST-*.trx
Multiple paths can be specified, separated by a new line.
Additionally acceptsminimatch patterns.
For example,!TEST[1-3].xmlexcludes files namedTEST1.xml,TEST2.xml, orTEST3.xml.
!TEST[1-3].xml
TEST1.xml
TEST2.xml
TEST3.xml
searchFolder-Search folderstring. Default value:$(System.DefaultWorkingDirectory).
searchFolder
string
$(System.DefaultWorkingDirectory)
Optional. Specifies the folder to search for the test result files.
mergeTestResults-Merge test resultsboolean. Default value:false.
mergeTestResults
boolean
false
When this boolean's value istrue, the task reports test results from all the files against a singletest run. If the value isfalse, the task creates a separate test run for each test result file. To optimize for better performance, results will always be merged into a single run if there are more than 100 result files even if this option is set tofalse.
true
false
false
Note
Use the merge test results setting to combine files from the same test framework to ensure results mapping and duration are calculated correctly.
failTaskOnFailedTests-Fail if there are test failuresboolean. Default value:false.
failTaskOnFailedTests
boolean
false
Optional. When this boolean's value istrue, the task will fail if any of the tests in the results file are marked as failed. The default isfalse, which will simply publish the results from the results file.
true
false
failTaskOnFailureToPublishResults-Fail if there is failure in publishing test resultsboolean. Default value:false.
failTaskOnFailureToPublishResults
boolean
false
Whentrue, fails the task if there is failure in publishing test results.
true
failTaskOnMissingResultsFile-Fail if no result files are foundboolean. Default value:false.
failTaskOnMissingResultsFile
boolean
false
Fail the task if no result files are found.
testRunTitle-Test run titlestring.
testRunTitle
string
Optional. Specifies a name for the test run against which the results will be reported. Variable names declared in the build or release pipeline can be used.
buildPlatform-Build PlatformInput alias:platform.string.
buildPlatform
platform
string
Optional. Specifies the build platform against which the test run should be reported. For example:x64orx86. If you defined a variable for the platform in your build task, use it here.
x64
x86
buildConfiguration-Build ConfigurationInput alias:configuration.string.
buildConfiguration
configuration
string
Optional. Specifies the build configuration against which the test run should be reported. For example:DebugorRelease. If you defined a variable for the configuration in your build task, use it here.
Debug
Release
publishRunAttachments-Upload test results filesboolean. Default value:true.
publishRunAttachments
boolean
true
Optional. When this boolean's value istrue, the task uploads all the test result files as attachments to the test run.
true
Task control options
All tasks have control options in addition to their task inputs. For more information, seeControl options and common task properties.
Output variables
None.
Remarks
Prerequisites
Task defaults
Result formats mapping
Attachments support
This task publishes test results to Azure Pipelines or TFS when tests are executed to provide a comprehensive test reporting and analytics experience. You can use the test runner of your choice that supports the results format you require. Supported results formats includeCTest,JUnit(includingPHPUnit),NUnit 2,NUnit 3, Visual Studio Test (TRX), andxUnit 2.
Other built-in tasks, such asVisual Studio Test taskandDot NetCore CLI taskautomatically publish test results to the pipeline. Tasks such asAnt,Maven,Gulp,Grunt, andXcodeprovide publishing results as an option within the task, or build libraries such asCoberturaandJaCoCo. If you are using any of these tasks, you do not need a separatePublish Test Resultstask in the pipeline.
The published test results are displayed in theTests tabin the pipeline summary. The results help you to measure pipeline quality, review traceability, troubleshoot failures, and drive failure ownership.
The following example shows the task is configured to publish test results.

You can also use this task in a build pipeline topublish code coverage resultsproduced when running tests to Azure Pipelines or TFS in order to obtain coverage reporting.
Prerequisites
If you're using a Windows self-hosted agent, your machine must have this prerequisite installed:
.NET Framework4.6.2 or a later version
Task defaults
The default option uses JUnit format to publish test results. When using VSTest as thetestRunner, thetestResultsFilesoption should be changed to**/TEST-*.trx.
**/TEST-*.trx
testResultsFormatis an alias for thetestRunnerinput name. The results files can be produced by multiple runners, not just a specific runner. For example, the jUnit results format is supported by many runners and not just jUnit.
To publish test results for Python using YAML, seePythonin theEcosystemssection of these topics, which also includes examples for other languages.
Result formats mapping
This table lists the fields reported in theTests tabin a build or release summary, and the corresponding mapping with the attributes in the supported test result formats.
Visual Studio Test (TRX)
JUnit
NUnit 2
NUnit 3
xUnit 2
CTest
Note
Durationis used only whenDate startedandDate completedare not available.
The fully qualified name format fortestNameisNamespace.Testclass.Methodnamewith a character limit of 512. If the test is data driven and has parameters, the character limit will include the parameters.
While publishing the test result, you may get this error: Failed to publish test results: Invalid Priority specified
This error occurs if any of the test methods has priority set above 255, fix the test method priority in the code and execute the tests again. You can review the trx file generated to see all the tests having priority greater than 255.
Attachments support
The Publish Test Results task provides support for attachments for both test run and test results for the following formats. For public projects, we support 2GB of total attachments.
Visual Studio Test (TRX)
NUnit 3
JUnit
JUnit attachment support was added inAzure DevOps sprint 229, and is not available in Azure DevOps Server 2022.1 and lower.
Note
The option to upload the test results file as an attachment is a default option in the task, applicable to all formats.
Examples
Docker
For Docker based apps, there are many ways to build your application and run tests:
Build and test in a build pipeline: builds and tests execute in the pipeline and test results are published using thePublish Test Resultstask.
Build and test with a multi-stage Dockerfile: builds and tests execute inside the container using a multi-stage Docker file, as such test results are not published back to the pipeline.
Build, test, and publish results with a Dockerfile: builds and tests execute inside the container, and results are published back to the pipeline. See the example below.

In this approach, you build your code and run tests inside the container using a Docker file. The test results are then copied to the host to be published to the pipeline. To publish the test results to Azure Pipelines, you can use thePublish Test Resultstask. The final image will be published to Docker or Azure Container Registry.
Create aDockerfile.buildfile at the root of your project directory with the following:# Build and run tests inside the docker container
FROM mcr.microsoft.com/dotnet/sdk:2.1
WORKDIR /app
# copy the contents of agent working directory on host to workdir in container
COPY . ./
# dotnet commands to build, test, and publish
RUN dotnet restore
RUN dotnet build -c Release
RUN dotnet test dotnetcore-tests/dotnetcore-tests.csproj -c Release --logger "trx;LogFileName=testresults.trx"
RUN dotnet publish -c Release -o out
ENTRYPOINT dotnet dotnetcore-sample/out/dotnetcore-sample.dllThis file contains the instructions to build code and run tests. The tests are then copied to a filetestresults.trxinside the container.
Create aDockerfile.buildfile at the root of your project directory with the following:
Dockerfile.build
# Build and run tests inside the docker container
FROM mcr.microsoft.com/dotnet/sdk:2.1
WORKDIR /app
# copy the contents of agent working directory on host to workdir in container
COPY . ./
# dotnet commands to build, test, and publish
RUN dotnet restore
RUN dotnet build -c Release
RUN dotnet test dotnetcore-tests/dotnetcore-tests.csproj -c Release --logger "trx;LogFileName=testresults.trx"
RUN dotnet publish -c Release -o out
ENTRYPOINT dotnet dotnetcore-sample/out/dotnetcore-sample.dll
# Build and run tests inside the docker container
FROM mcr.microsoft.com/dotnet/sdk:2.1
WORKDIR /app
# copy the contents of agent working directory on host to workdir in container
COPY . ./
# dotnet commands to build, test, and publish
RUN dotnet restore
RUN dotnet build -c Release
RUN dotnet test dotnetcore-tests/dotnetcore-tests.csproj -c Release --logger "trx;LogFileName=testresults.trx"
RUN dotnet publish -c Release -o out
ENTRYPOINT dotnet dotnetcore-sample/out/dotnetcore-sample.dll
This file contains the instructions to build code and run tests. The tests are then copied to a filetestresults.trxinside the container.
testresults.trx
To make the final image as small as possible, containing only the runtime and deployment artifacts, replace the contents of the existingDockerfilewith the following:# This Dockerfile creates the final image to be published to Docker or
# Azure Container Registry
# Create a container with the compiled asp.net core app
FROM mcr.microsoft.com/dotnet/aspnet:2.1
# Create app directory
WORKDIR /app
# Copy only the deployment artifacts
COPY /out .
ENTRYPOINT ["dotnet", "dotnetcore-sample.dll"]
To make the final image as small as possible, containing only the runtime and deployment artifacts, replace the contents of the existingDockerfilewith the following:
Dockerfile
# This Dockerfile creates the final image to be published to Docker or
# Azure Container Registry
# Create a container with the compiled asp.net core app
FROM mcr.microsoft.com/dotnet/aspnet:2.1
# Create app directory
WORKDIR /app
# Copy only the deployment artifacts
COPY /out .
ENTRYPOINT ["dotnet", "dotnetcore-sample.dll"]
# This Dockerfile creates the final image to be published to Docker or
# Azure Container Registry
# Create a container with the compiled asp.net core app
FROM mcr.microsoft.com/dotnet/aspnet:2.1
# Create app directory
WORKDIR /app
# Copy only the deployment artifacts
COPY /out .
ENTRYPOINT ["dotnet", "dotnetcore-sample.dll"]
YAML
Classic
If you have a Docker Hub account, and want to push the image to your Docker registry,
replace the contents of the.vsts-ci.docker.ymlfile with the following:# Build Docker image for this app, to be published to Docker Registry
pool:
  vmImage: 'ubuntu-latest'
variables:
  buildConfiguration: 'Release'
steps:
- script: |
    docker build -f Dockerfile.build -t $(dockerId)/dotnetcore-build:$BUILD_BUILDID .
    docker run --name dotnetcoreapp --rm -d $(dockerId)/dotnetcore-build:$BUILD_BUILDID
    docker cp dotnetcoreapp:app/dotnetcore-tests/TestResults $(System.DefaultWorkingDirectory)
    docker cp dotnetcoreapp:app/dotnetcore-sample/out $(System.DefaultWorkingDirectory)
    docker stop dotnetcoreapp

- task: PublishTestResults@2
  inputs:
    testRunner: VSTest
    testResultsFiles: '**/*.trx'
    failTaskOnFailedTests: true

- script: |
    docker build -f Dockerfile -t $(dockerId)/dotnetcore-sample:$BUILD_BUILDID .
    docker login -u $(dockerId) -p $pswd
    docker push $(dockerId)/dotnetcore-sample:$BUILD_BUILDID
  env:
    pswd: $(dockerPassword)Alternatively, if you configure an Azure Container Registry and want to push the image to that registry, replace the contents of the.vsts-ci.ymlfile with the following:# Build Docker image for this app to be published to Azure Container Registry
pool:
  vmImage: 'ubuntu-latest'
variables:
  buildConfiguration: 'Release'

steps:
- script: |
    docker build -f Dockerfile.build -t $(dockerId)/dotnetcore-build:$BUILD_BUILDID .
    docker run --name dotnetcoreapp --rm -d $(dockerId)/dotnetcore-build:$BUILD_BUILDID
    docker cp dotnetcoreapp:app/dotnetcore-tests/TestResults $(System.DefaultWorkingDirectory)
    docker cp dotnetcoreapp:app/dotnetcore-sample/out $(System.DefaultWorkingDirectory)
    docker stop dotnetcoreapp

- task: PublishTestResults@2
  inputs:
    testRunner: VSTest
    testResultsFiles: '**/*.trx'
    failTaskOnFailedTests: true

- script: |
    docker build -f Dockerfile -t $(dockerId).azurecr.io/dotnetcore-sample:$BUILD_BUILDID .
    docker login -u $(dockerId) -p $pswd $(dockerid).azurecr.io
    docker push $(dockerId).azurecr.io/dotnetcore-sample:$BUILD_BUILDID 
  env:
    pswd: $(dockerPassword)
If you have a Docker Hub account, and want to push the image to your Docker registry,
replace the contents of the.vsts-ci.docker.ymlfile with the following:
.vsts-ci.docker.yml
# Build Docker image for this app, to be published to Docker Registry
pool:
  vmImage: 'ubuntu-latest'
variables:
  buildConfiguration: 'Release'
steps:
- script: |
    docker build -f Dockerfile.build -t $(dockerId)/dotnetcore-build:$BUILD_BUILDID .
    docker run --name dotnetcoreapp --rm -d $(dockerId)/dotnetcore-build:$BUILD_BUILDID
    docker cp dotnetcoreapp:app/dotnetcore-tests/TestResults $(System.DefaultWorkingDirectory)
    docker cp dotnetcoreapp:app/dotnetcore-sample/out $(System.DefaultWorkingDirectory)
    docker stop dotnetcoreapp

- task: PublishTestResults@2
  inputs:
    testRunner: VSTest
    testResultsFiles: '**/*.trx'
    failTaskOnFailedTests: true

- script: |
    docker build -f Dockerfile -t $(dockerId)/dotnetcore-sample:$BUILD_BUILDID .
    docker login -u $(dockerId) -p $pswd
    docker push $(dockerId)/dotnetcore-sample:$BUILD_BUILDID
  env:
    pswd: $(dockerPassword)
# Build Docker image for this app, to be published to Docker Registry
pool:
  vmImage: 'ubuntu-latest'
variables:
  buildConfiguration: 'Release'
steps:
- script: |
    docker build -f Dockerfile.build -t $(dockerId)/dotnetcore-build:$BUILD_BUILDID .
    docker run --name dotnetcoreapp --rm -d $(dockerId)/dotnetcore-build:$BUILD_BUILDID
    docker cp dotnetcoreapp:app/dotnetcore-tests/TestResults $(System.DefaultWorkingDirectory)
    docker cp dotnetcoreapp:app/dotnetcore-sample/out $(System.DefaultWorkingDirectory)
    docker stop dotnetcoreapp

- task: PublishTestResults@2
  inputs:
    testRunner: VSTest
    testResultsFiles: '**/*.trx'
    failTaskOnFailedTests: true

- script: |
    docker build -f Dockerfile -t $(dockerId)/dotnetcore-sample:$BUILD_BUILDID .
    docker login -u $(dockerId) -p $pswd
    docker push $(dockerId)/dotnetcore-sample:$BUILD_BUILDID
  env:
    pswd: $(dockerPassword)
Alternatively, if you configure an Azure Container Registry and want to push the image to that registry, replace the contents of the.vsts-ci.ymlfile with the following:
.vsts-ci.yml
# Build Docker image for this app to be published to Azure Container Registry
pool:
  vmImage: 'ubuntu-latest'
variables:
  buildConfiguration: 'Release'

steps:
- script: |
    docker build -f Dockerfile.build -t $(dockerId)/dotnetcore-build:$BUILD_BUILDID .
    docker run --name dotnetcoreapp --rm -d $(dockerId)/dotnetcore-build:$BUILD_BUILDID
    docker cp dotnetcoreapp:app/dotnetcore-tests/TestResults $(System.DefaultWorkingDirectory)
    docker cp dotnetcoreapp:app/dotnetcore-sample/out $(System.DefaultWorkingDirectory)
    docker stop dotnetcoreapp

- task: PublishTestResults@2
  inputs:
    testRunner: VSTest
    testResultsFiles: '**/*.trx'
    failTaskOnFailedTests: true

- script: |
    docker build -f Dockerfile -t $(dockerId).azurecr.io/dotnetcore-sample:$BUILD_BUILDID .
    docker login -u $(dockerId) -p $pswd $(dockerid).azurecr.io
    docker push $(dockerId).azurecr.io/dotnetcore-sample:$BUILD_BUILDID 
  env:
    pswd: $(dockerPassword)
# Build Docker image for this app to be published to Azure Container Registry
pool:
  vmImage: 'ubuntu-latest'
variables:
  buildConfiguration: 'Release'

steps:
- script: |
    docker build -f Dockerfile.build -t $(dockerId)/dotnetcore-build:$BUILD_BUILDID .
    docker run --name dotnetcoreapp --rm -d $(dockerId)/dotnetcore-build:$BUILD_BUILDID
    docker cp dotnetcoreapp:app/dotnetcore-tests/TestResults $(System.DefaultWorkingDirectory)
    docker cp dotnetcoreapp:app/dotnetcore-sample/out $(System.DefaultWorkingDirectory)
    docker stop dotnetcoreapp

- task: PublishTestResults@2
  inputs:
    testRunner: VSTest
    testResultsFiles: '**/*.trx'
    failTaskOnFailedTests: true

- script: |
    docker build -f Dockerfile -t $(dockerId).azurecr.io/dotnetcore-sample:$BUILD_BUILDID .
    docker login -u $(dockerId) -p $pswd $(dockerid).azurecr.io
    docker push $(dockerId).azurecr.io/dotnetcore-sample:$BUILD_BUILDID 
  env:
    pswd: $(dockerPassword)
Push the change to the main branch in your repository.
Push the change to the main branch in your repository.
If you use Azure Container Registry, ensure you havepre-created the registryin the Azure portal.
Copy the admin user name and password shown in theAccess keyssection of the registry settings in Azure portal.
If you use Azure Container Registry, ensure you havepre-created the registryin the Azure portal.
Copy the admin user name and password shown in theAccess keyssection of the registry settings in Azure portal.
Update your build pipeline with the followingAgent pool:Hosted Ubuntu 1604dockerId: Set the value to your Docker ID for DockerHub or the admin user name for Azure Container Registry.dockerPassword: Set the value to your password for DockerHub or the admin password Azure Container Registry.YAML file path:/.vsts-ci.docker.yml
Update your build pipeline with the following
Agent pool:Hosted Ubuntu 1604dockerId: Set the value to your Docker ID for DockerHub or the admin user name for Azure Container Registry.dockerPassword: Set the value to your password for DockerHub or the admin password Azure Container Registry.
Hosted Ubuntu 1604
dockerId: Set the value to your Docker ID for DockerHub or the admin user name for Azure Container Registry.
dockerPassword: Set the value to your password for DockerHub or the admin password Azure Container Registry.
YAML file path:/.vsts-ci.docker.yml
/.vsts-ci.docker.yml
Queue a new build and watch it create and push a Docker image to your registry and the test results to Azure DevOps.
Queue a new build and watch it create and push a Docker image to your registry and the test results to Azure DevOps.
Create a new build pipeline using theEmpty job.
Create a new build pipeline using theEmpty job.
SelectPipelineon theTaskspage of the build pipeline editor and edit its properties as followsAgent queue:Hosted Ubuntu 1604
SelectPipelineon theTaskspage of the build pipeline editor and edit its properties as follows
Agent queue:Hosted Ubuntu 1604
Hosted Ubuntu 1604
Add aBash taskand configure it as follows to build and copy artifacts to the host:Type: InlineScript: To build, test and copy artifacts to host, use the following script:docker build -f Dockerfile.build -t $(dockerId)/dotnetcore-build:$BUILD_BUILDID .
docker run --name dotnetcoreapp --rm -d $(dockerId)/dotnetcore-build:$BUILD_BUILDID
docker cp dotnetcoreapp:app/dotnetcore-tests/TestResults $(System.DefaultWorkingDirectory)
docker cp dotnetcoreapp:app/dotnetcore-sample/out $(System.DefaultWorkingDirectory)
docker stop dotnetcoreapp
Add aBash taskand configure it as follows to build and copy artifacts to the host:
Type: Inline
Type: Inline
Script: To build, test and copy artifacts to host, use the following script:docker build -f Dockerfile.build -t $(dockerId)/dotnetcore-build:$BUILD_BUILDID .
docker run --name dotnetcoreapp --rm -d $(dockerId)/dotnetcore-build:$BUILD_BUILDID
docker cp dotnetcoreapp:app/dotnetcore-tests/TestResults $(System.DefaultWorkingDirectory)
docker cp dotnetcoreapp:app/dotnetcore-sample/out $(System.DefaultWorkingDirectory)
docker stop dotnetcoreapp
Script: To build, test and copy artifacts to host, use the following script:
docker build -f Dockerfile.build -t $(dockerId)/dotnetcore-build:$BUILD_BUILDID .
docker run --name dotnetcoreapp --rm -d $(dockerId)/dotnetcore-build:$BUILD_BUILDID
docker cp dotnetcoreapp:app/dotnetcore-tests/TestResults $(System.DefaultWorkingDirectory)
docker cp dotnetcoreapp:app/dotnetcore-sample/out $(System.DefaultWorkingDirectory)
docker stop dotnetcoreapp
docker build -f Dockerfile.build -t $(dockerId)/dotnetcore-build:$BUILD_BUILDID .
docker run --name dotnetcoreapp --rm -d $(dockerId)/dotnetcore-build:$BUILD_BUILDID
docker cp dotnetcoreapp:app/dotnetcore-tests/TestResults $(System.DefaultWorkingDirectory)
docker cp dotnetcoreapp:app/dotnetcore-sample/out $(System.DefaultWorkingDirectory)
docker stop dotnetcoreapp
Add aPublish Test Resultstask to publish results to the pipeline, and edit its properties as follows:Test result format:VSTestTest results files:**/*.trx
Add aPublish Test Resultstask to publish results to the pipeline, and edit its properties as follows:
Test result format:VSTest
VSTest
Test results files:**/*.trx
**/*.trx
Add aBash taskto publish the final image to the repository, and edit its properties as follows:Type:InlineScript:To push to Docker Hub, use the following script:docker build -f Dockerfile -t $(dockerId)/dotnetcore-sample:$BUILD_BUILDID .
docker login -u $(dockerId) -p $(dockerPassword)
docker push $(dockerId)/dotnetcore-sample:$BUILD_BUILDIDTo push to Azure Container Registry, use the following script:docker build -t $(dockerId).azurecr.io/dotnetcore-sample:$BUILD_BUILDID . 
docker login -u $(dockerId) -p $(dockerPassword) $(dockerId).azurecr.io 
docker push $(dockerId).azurecr.io/dotnetcore-sample:$BUILD_BUILDID
Add aBash taskto publish the final image to the repository, and edit its properties as follows:
Type:Inline
Type:Inline
Inline
Script:To push to Docker Hub, use the following script:docker build -f Dockerfile -t $(dockerId)/dotnetcore-sample:$BUILD_BUILDID .
docker login -u $(dockerId) -p $(dockerPassword)
docker push $(dockerId)/dotnetcore-sample:$BUILD_BUILDIDTo push to Azure Container Registry, use the following script:docker build -t $(dockerId).azurecr.io/dotnetcore-sample:$BUILD_BUILDID . 
docker login -u $(dockerId) -p $(dockerPassword) $(dockerId).azurecr.io 
docker push $(dockerId).azurecr.io/dotnetcore-sample:$BUILD_BUILDID
Script:
To push to Docker Hub, use the following script:docker build -f Dockerfile -t $(dockerId)/dotnetcore-sample:$BUILD_BUILDID .
docker login -u $(dockerId) -p $(dockerPassword)
docker push $(dockerId)/dotnetcore-sample:$BUILD_BUILDID
To push to Docker Hub, use the following script:
docker build -f Dockerfile -t $(dockerId)/dotnetcore-sample:$BUILD_BUILDID .
docker login -u $(dockerId) -p $(dockerPassword)
docker push $(dockerId)/dotnetcore-sample:$BUILD_BUILDID
docker build -f Dockerfile -t $(dockerId)/dotnetcore-sample:$BUILD_BUILDID .
docker login -u $(dockerId) -p $(dockerPassword)
docker push $(dockerId)/dotnetcore-sample:$BUILD_BUILDID
To push to Azure Container Registry, use the following script:docker build -t $(dockerId).azurecr.io/dotnetcore-sample:$BUILD_BUILDID . 
docker login -u $(dockerId) -p $(dockerPassword) $(dockerId).azurecr.io 
docker push $(dockerId).azurecr.io/dotnetcore-sample:$BUILD_BUILDID
To push to Azure Container Registry, use the following script:
docker build -t $(dockerId).azurecr.io/dotnetcore-sample:$BUILD_BUILDID . 
docker login -u $(dockerId) -p $(dockerPassword) $(dockerId).azurecr.io 
docker push $(dockerId).azurecr.io/dotnetcore-sample:$BUILD_BUILDID
docker build -t $(dockerId).azurecr.io/dotnetcore-sample:$BUILD_BUILDID . 
docker login -u $(dockerId) -p $(dockerPassword) $(dockerId).azurecr.io 
docker push $(dockerId).azurecr.io/dotnetcore-sample:$BUILD_BUILDID
If you use Azure Container Registry, ensure you havepre-created the registryin the Azure portal. Copy the admin user name and password shown in theAccess keyssection of the registry settings in Azure Portal.
If you use Azure Container Registry, ensure you havepre-created the registryin the Azure portal. Copy the admin user name and password shown in theAccess keyssection of the registry settings in Azure Portal.
In theVariablestab of the build pipeline, define two variables:dockerId: Set the value to your Docker ID for DockerHub or the admin user name for Azure Container Registry.dockerPassword: Set the value to your password for DockerHub or the admin password Azure Container Registry, and mark it as secure.
In theVariablestab of the build pipeline, define two variables:
dockerId: Set the value to your Docker ID for DockerHub or the admin user name for Azure Container Registry.
dockerPassword: Set the value to your password for DockerHub or the admin password Azure Container Registry, and mark it as secure.
Save the pipeline and queue a build. Watch it create and push a Docker image to your registry and the test results to Azure DevOps.
Save the pipeline and queue a build. Watch it create and push a Docker image to your registry and the test results to Azure DevOps.
Requirements
Feedback
Was this page helpful?
Additional resources