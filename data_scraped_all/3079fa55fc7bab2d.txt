Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Continuous deployment with custom containers in Azure App Service
Article
2025-04-17
13 contributors
In this article
Learn how to configure continuous integration and continuous delivery (CI/CD) for a custom container image from managedAzure Container Registryrepositories orDocker Hub.
1. Go to the Deployment Center
In theAzure portal, go to the management pane for your Azure App Service app.
From the left menu, selectDeployment Center>Settings.
2. Choose deployment source
Choose the deployment source based on the following criteria:
Container registrysets up CI/CD between your container registry and App Service.
Choose theGitHub Actionsoption if you maintain the source code for your container image in GitHub. New commits to your GitHub repository trigger the deploy action, which can rundocker buildanddocker pushdirectly to your container registry. It then updates your App Service app to run the new image. For more information, seeHow CI/CD works with GitHub Actions.
docker build
docker push
To set up CI/CD withAzure Pipelines, seeDeploy an Azure Web App Container from Azure Pipelines.
For a Docker Compose app, selectContainer Registry.
If you choose GitHub Actions, selectAuthorizeand follow the authorization prompts. If you previously authorized with GitHub, you can deploy from a different user's repository by selectingChange Account.
After you authorize your Azure account with GitHub, select theOrganization,Repository, andBranchto deploy from.
2. Configure registry settings
3. Configure registry settings
Note
Sidecar containers (preview) will succeed multi-container (Docker Compose) apps in App Service. To get started, seeTutorial: Configure a sidecar container for custom containers in Azure App Service (preview).
To deploy a multi-container (Docker Compose) app, selectDocker ComposeinContainer Type.
If you don't see theContainer Typedropdown list, scroll back up toSourceand selectContainer Registry.
InRegistry source, select where your container registry is. If it's not Azure Container Registry or Docker Hub, selectPrivate Registry.
Note
If your multi-container (Docker Compose) app uses more than one private image, make sure the private images are in the same private registry and are accessible with the same user credentials. If your multi-container app uses only public images, selectDocker Hub, even if some images aren't in Docker Hub.
Follow the next steps by selecting the tab that matches your choice.
Azure Container Registry
Docker Hub
Private registry
TheRegistrydropdown list displays the registries in the same subscription as your app. Select the registry you want.
To deploy from a registry in a different subscription, selectPrivate RegistryinRegistry sourceinstead.
To use managed identities to lock down Azure Container Registry access, see:
How to use system-assigned managed identities with App Service and Azure Container Registry
How to use user-assigned managed identities with App Service and Azure Container Registry
Select theImageandTagto deploy. You can choose to type the startup command inStartup File.
Follow the next step, depending on theContainer Typevalue:
ForDocker Compose, select the registry for your private images. SelectChoose fileto upload yourDocker Compose file, or just paste the contents of your Docker Compose file intoConfig.
ForSingle Container, select theImageandTagto deploy. You can choose to type the startup command inStartup File.
App Service appends the string inStartup Filetothe end of thedocker runcommand (as the[COMMAND] [ARG...]segment)when starting your container.
docker run
[COMMAND] [ARG...]
InRepository Access, select whether the image you want to deploy is public or private.
InRepository Access, select whether the image you want to deploy is public or private. For a Docker Compose app with one or more private images, selectPrivate.
If you select a private image, specify theLogin(username) andPasswordvalues for the Docker account.
Supply the image and tag name inFull Image Name and Tag, separated by a:(for example,nginx:latest). You can choose to type the startup command inStartup File.
:
nginx:latest
Follow the next step, depending on theContainer Typevalue:
ForDocker Compose, select the registry for your private images. SelectChoose fileto upload yourDocker Compose file, orpastethe contents of your Docker Compose file intoConfig.
ForSingle Container, supply the image and tag name inFull Image Name and Tag, separated by a:(for example,nginx:latest). You can choose to type the startup command inStartup File.
:
nginx:latest
App Service appends the string inStartup Filetothe end of thedocker runcommand (as the[COMMAND] [ARG...]segment)when starting your container.
docker run
[COMMAND] [ARG...]
InServer URL, type the URL of the server, beginning withhttps://.
https://
In theLoginandPasswordfields, type your sign-in credentials for your private registry.
Supply the image and tag name inFull Image Name and Tag, separated by a:(for example,nginx:latest). You can choose to type the startup command inStartup File.
:
nginx:latest
Follow the next step, depending on theContainer Typevalue:
ForDocker Compose, select the registry for your private images. SelectChoose fileto upload yourDocker Compose file, or paste the contents of your Docker Compose file intoConfig.
ForSingle Container, supply the image and tag name inFull Image Name and Tag, separated by a:(for example,nginx:latest). You can choose to type the startup command inStartup File.
:
nginx:latest
App Service appends the string inStartup Filetothe end of thedocker runcommand (as the[COMMAND] [ARG...]segment)when starting your container.
docker run
[COMMAND] [ARG...]
3. Enable CI/CD
4. Enable CI/CD
App Service supports CI/CD integration with Azure Container Registry and Docker Hub. To enable CI/CD integration, selectOninContinuous deployment.
Note
If you selectGitHub ActionsinSource, you don't see this option because CI/CD is handled by GitHub Actions directly. Instead, you see aWorkflow Configurationsection, where you can selectPreview fileto inspect the workflow file. Azure commits this file into your selected GitHub source repository to handle build and deploy tasks. For more information, seeHow CI/CD works with GitHub Actions.
When you enable this option, App Service adds a webhook to your repository in Azure Container Registry or Docker Hub. Your repository posts to this webhook whenever your selected image is updated withdocker push. The webhook causes your App Service app to restart and rundocker pullto get the updated image.
docker push
docker pull
To ensure the proper functioning of the webhook, it's essential to enable theBasic Auth Publishing Credentialsoption within your web app. If you don't, you might receive a "401 unauthorized" error for the webhook.
To verify whetherBasic Auth Publishing Credentialsis enabled, go to your web app'sConfiguration>General Settings. Look for thePlatform Settingsection, and then select theBasic Auth Publishing Credentialsoption.
For other private registries, you can post to the webhook manually or as a step in a CI/CD pipeline. InWebhook URL, select theCopybutton to get the webhook URL.
Note
Support for multi-container (Docker Compose) apps is limited. For Azure Container Registry, App Service creates a webhook in the selected registry with the registry as the scope. Adocker pushto any repository in the registry (including the ones not referenced by your Docker Compose file) triggers an app restart. You might want tomodify the webhookto a narrower scope. Docker Hub doesn't support webhooks at the registry level. You must add the webhooks manually to the images specified in your Docker Compose file.
docker push
4. Save your settings
5. Save your settings
SelectSave.
How CI/CD works with GitHub Actions
If you chooseGitHub ActionsinSource(seeChoose deployment source), App Service sets up CI/CD in the following ways:
It deposits a GitHub Actions workflow file into your GitHub repository to handle build and deploy tasks to App Service.
It adds the credentials for your private registry as GitHub secrets. The generated workflow file runs theAzure/docker-loginaction to sign in with your private registry, and then runsdocker pushto deploy to it.
Azure/docker-login
docker push
It adds the publishing profile for your app as a GitHub secret. The generated workflow file uses this secret to authenticate with App Service, and then runs theAzure/webapps-deployaction to configure the updated image, which triggers an app restart to pull in the updated image.
Azure/webapps-deploy
It captures information from theworkflow run logsand displays it in theLogstab in your app'sDeployment Center.
You can customize the GitHub Actions build provider in the following ways:
Customize the workflow file after it generates in your GitHub repository. For more information, seeWorkflow syntax for GitHub Actions. The workflow must end with theAzure/webapps-deployaction to trigger an app restart.
Azure/webapps-deploy
If the selected branch is protected, you can still preview the workflow file without saving the configuration. Add it and the required GitHub secrets into your repository manually. This method doesn't give you log integration with the Azure portal.
Instead of a publishing profile, deploy by using aservice principalin Microsoft Entra ID.
This optional configuration replaces the default authentication with publishing profiles in the generated workflow file.
Generate a service principal by using theaz ad sp create-for-rbaccommand in theAzure CLI. In the following example, replace<subscription-id>,<group-name>, and<app-name>with your own values. Save the entire JSON output for the next step, including the top-level{}.
az ad sp create-for-rbac
{}
az ad sp create-for-rbac --name "myAppDeployAuth" --role contributor \
                            --scopes /subscriptions/<subscription-id>/resourceGroups/<group-name>/providers/Microsoft.Web/sites/<app-name> \
                            --json-auth
az ad sp create-for-rbac --name "myAppDeployAuth" --role contributor \
                            --scopes /subscriptions/<subscription-id>/resourceGroups/<group-name>/providers/Microsoft.Web/sites/<app-name> \
                            --json-auth
Important
For security, grant the minimum required access to the service principal. The scope in the previous example is limited to the specific App Service app and not the entire resource group.
InGitHub, go to your repository, and then selectSettings>Secrets>Add a new secret. Paste the entire JSON output from the Azure CLI command into the secret's value field. Give the secret a name likeAZURE_CREDENTIALS.
AZURE_CREDENTIALS
In the workflow file generated by theDeployment Center, revise theazure/webapps-deploystep with code similar to the following example:
azure/webapps-deploy
- name: Sign in to Azure 
# Use the GitHub secret you added
- uses: azure/login@v1
    with:
    creds: ${{ secrets.AZURE_CREDENTIALS }}
- name: Deploy to Azure Web App
# Remove publish-profile
- uses: azure/webapps-deploy@v2
    with:
    app-name: '<app-name>'
    slot-name: 'production'
    images: '<registry-server>/${{ secrets.AzureAppService_ContainerUsername_... }}/<image>:${{ github.sha }}'
    - name: Sign out of Azure
    run: |
    az logout
- name: Sign in to Azure 
# Use the GitHub secret you added
- uses: azure/login@v1
    with:
    creds: ${{ secrets.AZURE_CREDENTIALS }}
- name: Deploy to Azure Web App
# Remove publish-profile
- uses: azure/webapps-deploy@v2
    with:
    app-name: '<app-name>'
    slot-name: 'production'
    images: '<registry-server>/${{ secrets.AzureAppService_ContainerUsername_... }}/<image>:${{ github.sha }}'
    - name: Sign out of Azure
    run: |
    az logout
Automate with CLI
To configure the container registry and the Docker image, runaz webapp config container set.
az webapp config container set
Azure Container Registry
Docker Hub
Private registry
az webapp config container set --name <app-name> --resource-group <group-name> --docker-custom-image-name '<image>:<tag>' --docker-registry-server-url 'https://<registry-name>.azurecr.io' --docker-registry-server-user '<username>' --docker-registry-server-password '<password>'
az webapp config container set --name <app-name> --resource-group <group-name> --docker-custom-image-name '<image>:<tag>' --docker-registry-server-url 'https://<registry-name>.azurecr.io' --docker-registry-server-user '<username>' --docker-registry-server-password '<password>'
# Public image
az webapp config container set --name <app-name> --resource-group <group-name> --docker-custom-image-name <image-name>

# Private image
az webapp config container set --name <app-name> --resource-group <group-name> --docker-custom-image-name <image-name> --docker-registry-server-user <username> --docker-registry-server-password <password>
# Public image
az webapp config container set --name <app-name> --resource-group <group-name> --docker-custom-image-name <image-name>

# Private image
az webapp config container set --name <app-name> --resource-group <group-name> --docker-custom-image-name <image-name> --docker-registry-server-user <username> --docker-registry-server-password <password>
az webapp config container set --name <app-name> --resource-group <group-name> --docker-custom-image-name '<image>:<tag>' --docker-registry-server-url <private-repo-url> --docker-registry-server-user <username> --docker-registry-server-password <password>
az webapp config container set --name <app-name> --resource-group <group-name> --docker-custom-image-name '<image>:<tag>' --docker-registry-server-url <private-repo-url> --docker-registry-server-user <username> --docker-registry-server-password <password>
To configure a multi-container (Docker Compose) app, prepare a Docker Compose file locally, and then runaz webapp config container setwith the--multicontainer-config-fileparameter. If your Docker Compose file contains private images, add--docker-registry-server-*parameters as shown in the previous example.
az webapp config container set
--multicontainer-config-file
--docker-registry-server-*
az webapp config container set --resource-group <group-name> --name <app-name> --multicontainer-config-file <docker-compose-file>
az webapp config container set --resource-group <group-name> --name <app-name> --multicontainer-config-file <docker-compose-file>
To configure CI/CD from the container registry to your app, runaz webapp deployment container configwith the--enable-cdparameter. The command outputs the webhook URL, but you must create the webhook in your registry manually in a separate step. The following example enables CI/CD on your app, and then uses the webhook URL in the output to create the webhook in Azure Container Registry.
az webapp deployment container config
--enable-cd
ci_cd_url=$(az webapp deployment container config --name <app-name> --resource-group <group-name> --enable-cd true --query CI_CD_URL --output tsv)

az acr webhook create --name <webhook-name> --registry <registry-name> --resource-group <group-name> --actions push --uri $ci_cd_url --scope '<image>:<tag>'
ci_cd_url=$(az webapp deployment container config --name <app-name> --resource-group <group-name> --enable-cd true --query CI_CD_URL --output tsv)

az acr webhook create --name <webhook-name> --registry <registry-name> --resource-group <group-name> --actions push --uri $ci_cd_url --scope '<image>:<tag>'
Related content
Azure Container Registry
Create a .NET Core web app in App Service on Linux
Quickstart: Run a custom container on App Service
App Service on Linux FAQ
Configure custom containers
Actions workflows to deploy to Azure
Feedback
Was this page helpful?
Additional resources