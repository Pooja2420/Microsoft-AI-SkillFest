JDBC
Reference

Connect to a relational database using JDBC drivers.
This article describes the operations for theJava Database Connectivity (JDBC)built-inconnector, which is availableonlyfor Standard workflows in single-tenant Azure Logic Apps. JDBC provides an API for the Java programming language, which defines how a client can access a database. You can use the JDBC API to connect to most relational databases, including SQL Server, AWS Aurora, My SQL, and so on. As with any other built-in connector, you don't need to use the on-premises data gateway with the JDBC built-in connector to connect to your database.
With this connector, your Standard workflow can connect to a relational database for various tasks, for example:
Replicate data from your source database to any warehouse database for analytical purposes.
Dump event data into your database for Internet of Things (IoT) scenarios.
You can bring and use JDBC drivers (JAR libraries) for any JDBC-supported relational database without requiring native DB support in Azure Logic Apps.
Prerequisites
An Azure account and subscription. If you don't have an Azure subscription,sign up for a free Azure account.
An Azure account and subscription. If you don't have an Azure subscription,sign up for a free Azure account.
The Standard logic app workflow from where you want connect to your relational database. To use a JDBC built-in action in your workflow, make sure that your workflow already starts with a trigger.
The Standard logic app workflow from where you want connect to your relational database. To use a JDBC built-in action in your workflow, make sure that your workflow already starts with a trigger.
Upload all the JDBC JAR libraries your logic app resource:On the logic app resource menu, underDevelopment Tools, selectAdvanced Tools.On theAdvanced Toolspage, selectGo, which opens the Kudu tool.On the console toolbar, from theDebug Consolemenu, selectCMD.Browse to thesite/wwwrootfolder. Next to the/wwwrootlabel, open the+menu, and create the following folder path:lib/builtinOperationSdks/JAR/In theJARfolder, upload all your JDBC JAR libraries, for example:
Upload all the JDBC JAR libraries your logic app resource:
On the logic app resource menu, underDevelopment Tools, selectAdvanced Tools.
On the logic app resource menu, underDevelopment Tools, selectAdvanced Tools.
On theAdvanced Toolspage, selectGo, which opens the Kudu tool.
On theAdvanced Toolspage, selectGo, which opens the Kudu tool.
On the console toolbar, from theDebug Consolemenu, selectCMD.
On the console toolbar, from theDebug Consolemenu, selectCMD.
Browse to thesite/wwwrootfolder. Next to the/wwwrootlabel, open the+menu, and create the following folder path:lib/builtinOperationSdks/JAR/
Browse to thesite/wwwrootfolder. Next to the/wwwrootlabel, open the+menu, and create the following folder path:lib/builtinOperationSdks/JAR/
In theJARfolder, upload all your JDBC JAR libraries, for example:
In theJARfolder, upload all your JDBC JAR libraries, for example:

Built-in connector settings
In a Standard logic app resource, the application and host settings control various thresholds for performance, throughput, timeout, and so on. For more information, seeEdit host and app settings for Standard logic app workflows.
Authentication
URL
URL of the database to connect
Parameters
User identifier
User identifier to be used for connection
Parameters
Password
Password to be used for connection
Parameters
Actions
Execute raw query on the connected database.
Get schema for the table.
Get list of tables from the connected database.
Execute query
Execute raw query on the connected database.
Raw query to run on connected database.
Query parameter to inject in query.
Output of executed query.
Get schema
Get schema for the table.
Table name of connected database.
Output schema of given table.
Get tables
Get list of tables from the connected database.
List of tables fetched from database.