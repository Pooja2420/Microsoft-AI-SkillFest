Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Configure Managed DevOps Pools security settings
Article
2025-04-25
4 contributors
In this article
You can configure security setting for Managed DevOps Pools during pool creation by using theSecuritytab, and after pool creation by using theSecuritysettings pane.
Configure organization access
Be default, Managed DevOps Pools are configured for a single organization, with access to the pool granted to all projects in the organization. You can optionally limit access to specific projects in the organization, and you can grant access to additional organizations if desired.
Use pool with a single organization
Use pool in multiple organizations
Use pool with a single organization
Azure portal
ARM template
Azure CLI
By default, Managed DevOps Pools is configured for use with a single Azure DevOps organization that you specify when you create the pool. When your pool is configured for a single organization, the organization name is displayed and configured in Pool settings
By default,Add pool to all projectsis set toYes, and access to the Managed DevOps Pool is granted to all projects in the organization. ChooseNoto specify a list of projects to limit which projects in your organization can use the pool.

Organizations are configured in theorganizationProfileproperty of the Managed DevOps Pools resource.
organizationProfile
{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "resources": [
        {
            "name": "fabrikam-managed-pool",
            "type": "microsoft.devopsinfrastructure/pools",
            "apiVersion": "2025-01-21",
            "location": "eastus",
            "properties": {
            ...
            "organizationProfile": {
                "organizations": [
                    {
                        "url": "https://dev.azure.com/fabrikam-tailspin",
                        "projects": [],
                        "parallelism": 4
                    }
                ],
                "permissionProfile": {
                    "kind": "CreatorOnly"
                },
                "kind": "AzureDevOps"
            }
        }
    ]
}
{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "resources": [
        {
            "name": "fabrikam-managed-pool",
            "type": "microsoft.devopsinfrastructure/pools",
            "apiVersion": "2025-01-21",
            "location": "eastus",
            "properties": {
            ...
            "organizationProfile": {
                "organizations": [
                    {
                        "url": "https://dev.azure.com/fabrikam-tailspin",
                        "projects": [],
                        "parallelism": 4
                    }
                ],
                "permissionProfile": {
                    "kind": "CreatorOnly"
                },
                "kind": "AzureDevOps"
            }
        }
    ]
}
TheorganizationProfilesection has the following properties.
organizationProfile
organizations
url
projects
parallelism
permissionProfile
Inherit
CreatorOnly
SpecificAccounts
specificAccounts
users
users
kind
Azure DevOps
Organizations are configured in theorganization-profileparameter whencreatingorupdatinga pool.
organization-profile
az mdp pool create \
   --organization-profile organization-profile.json
   # other parameters omitted for space
az mdp pool create \
   --organization-profile organization-profile.json
   # other parameters omitted for space
The following example shows anorganization-profileobject that is configured for all projects in thefabrikam-tailspinorganization withparallelismset to1.
organization-profile
fabrikam-tailspin
parallelism
1
{
  "AzureDevOps":
  {
      "organizations": [
      {
          "url": "https://dev.azure.com/fabrikam-tailspin",
          "projects": [],
          "parallelism": 1
      }
    ]
  }
}
{
  "AzureDevOps":
  {
      "organizations": [
      {
          "url": "https://dev.azure.com/fabrikam-tailspin",
          "projects": [],
          "parallelism": 1
      }
    ]
  }
}
TheorganizationProfilesection has the following properties.
organizationProfile
AzureDevOps
organization-profile
Azure DevOps
organizations
openAccess
url
projects
parallelism
permissionProfile
Inherit
CreatorOnly
SpecificAccounts
specificAccounts
users
users
Use pool in multiple organizations
Azure portal
ARM template
Azure CLI
EnableUse pool in multiple organizationsto use your pool with multiple Azure DevOps organizations. For each organization, specify the projects that are permitted to use the pool, or leave blank to allow all projects. Configure theParallelismfor each organization by specifying what portions of the concurrency, as specified byMaximum agentsfor the pool, to allocate to each organization. The sum of the parallelism for all organizations must equal the maximum concurrency of the pool. For example, ifMaximum agentsis set to five, the sum of the parallelism for the specified organizations must be five. IfMaximum agentsis set to one, you can only use the pool with one organization.
In the following example, the pool is configured to be available for theFabrikamResearchandFabrikamTestprojects in thefabrikam-tailspinorganization, and to all projects in thefabrikam-blueorganization.

If you receive an error likeThe sum of parallelism for all organizations must equal the max concurrency., ensure that theMaximum agentscount for the pool matches the sum of theParallelismcolumn.
The sum of parallelism for all organizations must equal the max concurrency.
Add additional organizations to the organizations list to configure your pool for use with multiple organizations. The following example has two organizations configured. The first organization is configured to use Managed DevOps Pools for all projects, and the second organizations is limited to two projects. In this example, the maximum agents setting for the pool is four, and each organization can use two of these four agents.
"organizationProfile": {
    "organizations": [
        {
            "url": "https://dev.azure.com/fabrikam-tailspin",
            "projects": [],
            "parallelism": 2
        },
        {
            "url": "https://dev.azure.com/fabrikam-prime",
            "projects": [ "fabrikam-dev", "fabrikam-test" ],
            "parallelism": 2
        }
    ],
    "permissionProfile": {
        "kind": "CreatorOnly"
    },
    "kind": "AzureDevOps"
}
"organizationProfile": {
    "organizations": [
        {
            "url": "https://dev.azure.com/fabrikam-tailspin",
            "projects": [],
            "parallelism": 2
        },
        {
            "url": "https://dev.azure.com/fabrikam-prime",
            "projects": [ "fabrikam-dev", "fabrikam-test" ],
            "parallelism": 2
        }
    ],
    "permissionProfile": {
        "kind": "CreatorOnly"
    },
    "kind": "AzureDevOps"
}
Organizations are configured in theorganization-profileparameter whencreatingorupdatinga pool.
organization-profile
az mdp pool create \
   --organization-profile organization-profile.json
   # other parameters omitted for space
az mdp pool create \
   --organization-profile organization-profile.json
   # other parameters omitted for space
Add additional organizations to the organizations list to configure your pool for use with multiple organizations. The following example has two organizations configured. The first organization is configured to use Managed DevOps Pools for all projects, and the second organizations is limited to two projects. In this example, the maximum agents setting for the pool is four, and each organization can use two of these four agents.
{
  "AzureDevOps":
  {
      "organizations": [
        {
            "url": "https://dev.azure.com/fabrikam-tailspin",
            "projects": [],
            "parallelism": 2
        },
        {
            "url": "https://dev.azure.com/fabrikam-prime",
            "projects": [ "fabrikam-dev", "fabrikam-test" ],
            "parallelism": 2
        }
    ]
  }
}
{
  "AzureDevOps":
  {
      "organizations": [
        {
            "url": "https://dev.azure.com/fabrikam-tailspin",
            "projects": [],
            "parallelism": 2
        },
        {
            "url": "https://dev.azure.com/fabrikam-prime",
            "projects": [ "fabrikam-dev", "fabrikam-test" ],
            "parallelism": 2
        }
    ]
  }
}
Configure open access for pipelines to your pool
To configure open access for pipelines, you must have the following permissions in addition to the permissions described inPrerequisites - Verify Azure DevOps permissions.
If you are aProject collection administrator, you don't need any additional permissions to configure open access.
If you are anorganization level pools administrator, you must also be aProject administratorfor each project that will be granted access to the Managed DevOps Pool.
By default, every pipeline definition must be explicitly authorized to run in a self-hosted agent pool (like a Managed DevOps Pool) before it is run for the first time in that pool.
Azure DevOps provides the following modes for authorizing pipelines to run in an agent pool.
Authorize specific pipelines- Individually authorize specific pipelines from an Azure DevOps project to run in the pool. This method is the default.
Open access- Configure an agent pool at project level to be available for all pipelines in that project.
EnableAllow all pipelines to run on the pool without an approval (open access)to configure theOpen accessagent pool setting in Azure DevOps when creating the pool.
Note
TheAllow all pipelines to run on the pool without an approval (open access)setting can be configured by Managed DevOps Pools only when the pool is created. After the Managed DevOps Pool is created, you can view and configureOpen accesson the correspondingagent poolin Azure DevOps for each project that uses the pool.
Azure portal
ARM template
Azure CLI
EnableAllow all pipelines to run on the pool without an approval (open access)to configure access to the Managed DevOps Pool from all pipelines in the designated projects.

IfAdd pool to all projectsis set toYes, Managed DevOps Pools configuresOpen accessfor all pipelines in all projects.
IfAdd pool to all projectsis set toNo, Managed DevOps Pools configuresOpen accessfor all pipelines only in the listed projects.
If you enableUse pool in multiple organizations, you can specifyOpen accessindividually for each organization.

Note
TheOpen accesssetting is present when usingapi-version 2025-01-21and higher.
api-version 2025-01-21
Organizations are configured in theorganizationProfileproperty of the Managed DevOps Pools resource. The following example has two organizations configured.
organizationProfile
Thefabrikam-tailspinorganization is configured withOpen accesson all projects.
fabrikam-tailspin
Thefabrikam-primeorganization is configured for availability with two projects, withOpen accessenabled only on these two projects.
fabrikam-prime
"organizationProfile": {
    "organizations": [
        {
            "url": "https://dev.azure.com/fabrikam-tailspin",
            "projects": [],
            "openAccess": true,
            "parallelism": 2
        },
        {
            "url": "https://dev.azure.com/fabrikam-prime",
            "projects": [ "fabrikam-dev", "fabrikam-test" ],
            "openAccess": true,
            "parallelism": 2
        }
    ],
    "permissionProfile": {
        "kind": "CreatorOnly"
    },
    "kind": "AzureDevOps"
}
"organizationProfile": {
    "organizations": [
        {
            "url": "https://dev.azure.com/fabrikam-tailspin",
            "projects": [],
            "openAccess": true,
            "parallelism": 2
        },
        {
            "url": "https://dev.azure.com/fabrikam-prime",
            "projects": [ "fabrikam-dev", "fabrikam-test" ],
            "openAccess": true,
            "parallelism": 2
        }
    ],
    "permissionProfile": {
        "kind": "CreatorOnly"
    },
    "kind": "AzureDevOps"
}
Important
Open accessis configured only during Managed DevOps Pool creation. To change theOpen accesssetting after pool creation (including adding or removing projects from your Managed DevOps Pool configuration), you must manually configureOpen accesson the correspondingagent poolin Azure DevOps for each project that uses the pool.
TheopenAccesssetting is configured in theorganization-profileparameter whencreatinga pool.
openAccess
organization-profile
az mdp pool create \
   --organization-profile organization-profile.json
   # other parameters omitted for space
az mdp pool create \
   --organization-profile organization-profile.json
   # other parameters omitted for space
The followingorgaization-profileexample has two organizations configured.
orgaization-profile
Thefabrikam-tailspinorganization is configured withOpen accesson all projects.
fabrikam-tailspin
Thefabrikam-primeorganization is configured for availability with two projects, withOpen accessenabled only on these two projects.
fabrikam-prime
{
  "AzureDevOps":
  {
      "organizations": [
        {
            "url": "https://dev.azure.com/fabrikam-tailspin",
            "projects": [],
            "parallelism": 2
        },
        {
            "url": "https://dev.azure.com/fabrikam-prime",
            "projects": [ "fabrikam-dev", "fabrikam-test" ],
            "parallelism": 2
        }
    ]
  }
}
{
  "AzureDevOps":
  {
      "organizations": [
        {
            "url": "https://dev.azure.com/fabrikam-tailspin",
            "projects": [],
            "parallelism": 2
        },
        {
            "url": "https://dev.azure.com/fabrikam-prime",
            "projects": [ "fabrikam-dev", "fabrikam-test" ],
            "parallelism": 2
        }
    ]
  }
}
Important
Open accessis configured only during Managed DevOps Pool creation. To change the Open access setting after pool creation (including adding or removing projects from your Managed DevOps Pool configuration), you must manually configureOpen accesson the correspondingagent poolin Azure DevOps for each project that uses the pool.
If you try to run a pipeline that is not authorized to access your agent pool, you'll receive an error similar toThis pipeline needs permission to access a resource before this run can continue. You can resolve this issue either by configuring open access, as described in the previous section, or byexplicitly authorizing the pipeline to run in the agent pool.
This pipeline needs permission to access a resource before this run can continue
Configure interactive mode
If your tests need an interactive login for UI testing, enable interactive login by enabling theEnableInteractiveModesetting.
Azure portal
ARM template
Azure CLI

Interactive mode is configured in theosProfilesection of thefabricProfileproperty. SetlogonTypetoInteractiveto enable interactive mode, orServiceto disable interactive mode.
osProfile
fabricProfile
logonType
Interactive
Service
{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "resources": [
        {
            "name": "fabrikam-managed-pool",
            "type": "microsoft.devopsinfrastructure/pools",
            "apiVersion": "2025-01-21",
            "location": "eastus",
            "properties": {
            ...
            "fabricProfile": {
                "sku": {...},
                "images": [...],
                "osProfile": {
                    "secretsManagementSettings": {...},
                    "logonType": "Interactive"
                },
                "storageProfile": {...},
                "kind": "Vmss"
            }
        }
    ]
}
{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "resources": [
        {
            "name": "fabrikam-managed-pool",
            "type": "microsoft.devopsinfrastructure/pools",
            "apiVersion": "2025-01-21",
            "location": "eastus",
            "properties": {
            ...
            "fabricProfile": {
                "sku": {...},
                "images": [...],
                "osProfile": {
                    "secretsManagementSettings": {...},
                    "logonType": "Interactive"
                },
                "storageProfile": {...},
                "kind": "Vmss"
            }
        }
    ]
}
Interactive mode is configured using thelogonTypeproperty in theosProfilesection in thefabric-profileparameter whencreatingorupdatinga pool.
logonType
osProfile
fabric-profile
az mdp pool create \
   --fabric-profile fabric-profile.json
   # other parameters omitted for space
az mdp pool create \
   --fabric-profile fabric-profile.json
   # other parameters omitted for space
The following example shows theosProfilesection of thefabric-profile.jsonfile withInteractivemode enabled.
osProfile
Interactive
{
  "vmss": {
    "sku": {...},
    "images": [...],
    "osProfile": {
      "secretsManagementSettings": {...},
      "logonType": "Interactive"
    },
    "storageProfile": {...}
  }
}
{
  "vmss": {
    "sku": {...},
    "images": [...],
    "osProfile": {
      "secretsManagementSettings": {...},
      "logonType": "Interactive"
    },
    "storageProfile": {...}
  }
}
Pool administration permissions
As part of the Managed DevOps Pool creation process, an organization level agent pool is created in Azure DevOps. ThePool administration permissionssetting specifies which users are granted the administrator role of the newly created Azure DevOps pool. To view and manage the Azure DevOps agent pool permissions after the Managed DevOps Pool is created, seeCreate and manage agent pools - Security of agent pools.
Azure portal
ARM template
Azure CLI

Creator only- The user that created the Managed DevOps Pool is added as an administrator of the Azure DevOps agent pool, andInheritanceis set toOffin the agent pool security settings.Creator onlyis the default setting.
Inherit permissions from project- The user that created the Managed DevOps Pool is added as an administrator of the Azure DevOps agent pool, andInheritanceis set toOnin the agent pool security settings.
Specific accounts- Specify the accounts to be added as administrators of the created agent pool in Azure DevOps. By default the Managed DevOps Pool creator is added to the list.
Note
ThePool administration permissionssetting is configured on theSecuritytab when the pool is created, and is not displayed in theSecuritysettings after the pool is created. To view and manage the Azure DevOps agent pool permissions after the Managed DevOps Pool is created, seeCreate and manage agent pools - Security of agent pools.
Pool administration permissions are configured in thepermissionsProfileproperty of theorganizationProfilesection of the Managed DevOps Pools resource.
permissionsProfile
organizationProfile
{
"organizationProfile": {
    "organizations": [...],
    "permissionProfile": {
        "kind": "CreatorOnly"
    },
    "kind": "AzureDevOps"
}
{
"organizationProfile": {
    "organizations": [...],
    "permissionProfile": {
        "kind": "CreatorOnly"
    },
    "kind": "AzureDevOps"
}
ThepermissionProfileproperty can be set during pool creation only. Allowed values areInherit,CreatorOnly, andSpecificAccounts.
permissionProfile
Inherit
CreatorOnly
SpecificAccounts
CreatorOnly- The user that created the Managed DevOps Pool is added as an administrator of the Azure DevOps agent pool, andInheritanceis set toOffin the agent pool security settings.Creator onlyis the default setting.
CreatorOnly- The user that created the Managed DevOps Pool is added as an administrator of the Azure DevOps agent pool, andInheritanceis set toOffin the agent pool security settings.Creator onlyis the default setting.
CreatorOnly
Inherit- The user that created the Managed DevOps Pool is added as an administrator of the Azure DevOps agent pool, andInheritanceis set toOnin the agent pool security settings.
Inherit- The user that created the Managed DevOps Pool is added as an administrator of the Azure DevOps agent pool, andInheritanceis set toOnin the agent pool security settings.
Inherit
SpecificAccounts- Specify the accounts to be added as administrators of the created agent pool in Azure DevOps. By default the Managed DevOps Pool creator is added to the list. Provide a single email address or a list of email addresses for theusersproperty; otherwise omitusers.{
"organizationProfile": {
     "organizations": [...],
     "permissionProfile": {
         "kind": "SpecificAccounts",
         "users" : ["User1@fabrikam.com", "User2@fabrikam.com" ]
     },
     "kind": "AzureDevOps"
  }
SpecificAccounts- Specify the accounts to be added as administrators of the created agent pool in Azure DevOps. By default the Managed DevOps Pool creator is added to the list. Provide a single email address or a list of email addresses for theusersproperty; otherwise omitusers.
SpecificAccounts
users
users
{
"organizationProfile": {
     "organizations": [...],
     "permissionProfile": {
         "kind": "SpecificAccounts",
         "users" : ["User1@fabrikam.com", "User2@fabrikam.com" ]
     },
     "kind": "AzureDevOps"
  }
{
"organizationProfile": {
     "organizations": [...],
     "permissionProfile": {
         "kind": "SpecificAccounts",
         "users" : ["User1@fabrikam.com", "User2@fabrikam.com" ]
     },
     "kind": "AzureDevOps"
  }
Pool administration permissions are configured in theorganization-profileparameter whencreatinga pool.
organization-profile
az mdp pool create \
   --organization-profile organization-profile.json
   # other parameters omitted for space
az mdp pool create \
   --organization-profile organization-profile.json
   # other parameters omitted for space
{
  "AzureDevOps":
  {
    "organizations":  [...],
    "permissionProfile": {
        "kind": "CreatorOnly"
    }
  }
}
{
  "AzureDevOps":
  {
    "organizations":  [...],
    "permissionProfile": {
        "kind": "CreatorOnly"
    }
  }
}
ThepermissionProfileproperty can be set during pool creation only. Allowed values areInherit,CreatorOnly, andSpecificAccounts.
permissionProfile
Inherit
CreatorOnly
SpecificAccounts
CreatorOnly- The user that created the Managed DevOps Pool is added as an administrator of the Azure DevOps agent pool, andInheritanceis set toOffin the agent pool security settings.Creator onlyis the default setting.
CreatorOnly- The user that created the Managed DevOps Pool is added as an administrator of the Azure DevOps agent pool, andInheritanceis set toOffin the agent pool security settings.Creator onlyis the default setting.
CreatorOnly
Inherit- The user that created the Managed DevOps Pool is added as an administrator of the Azure DevOps agent pool, andInheritanceis set toOnin the agent pool security settings.
Inherit- The user that created the Managed DevOps Pool is added as an administrator of the Azure DevOps agent pool, andInheritanceis set toOnin the agent pool security settings.
Inherit
SpecificAccounts- Specify the accounts to be added as administrators of the created agent pool in Azure DevOps. By default the Managed DevOps Pool creator is added to the list. Provide a single email address or a list of email addresses for theusersproperty; otherwise omitusers.{
      "AzureDevOps" : {
          "organizationProfile": {
          "organizations": [...],
          "permissionProfile": {
          "kind": "SpecificAccounts",
          "users" : ["User1@fabrikam.com", "User2@fabrikam.com" ]
          }
      }
  }
SpecificAccounts- Specify the accounts to be added as administrators of the created agent pool in Azure DevOps. By default the Managed DevOps Pool creator is added to the list. Provide a single email address or a list of email addresses for theusersproperty; otherwise omitusers.
SpecificAccounts
users
users
{
      "AzureDevOps" : {
          "organizationProfile": {
          "organizations": [...],
          "permissionProfile": {
          "kind": "SpecificAccounts",
          "users" : ["User1@fabrikam.com", "User2@fabrikam.com" ]
          }
      }
  }
{
      "AzureDevOps" : {
          "organizationProfile": {
          "organizations": [...],
          "permissionProfile": {
          "kind": "SpecificAccounts",
          "users" : ["User1@fabrikam.com", "User2@fabrikam.com" ]
          }
      }
  }
Key Vault configuration
Managed DevOps Pools offers the ability to fetch certificates from an Azure Key Vault during provisioning, which means the certificates will already exist on the machine by the time it runs your pipelines.
To use this feature, you must:
Configure anidentity on your pool, and this identity must haveKey Vault Secrets Userpermissions to fetch the secret from your Key Vault. To assign your identity to theKey Vault Secrets Userrole, seeProvide access to Key Vault keys, certificates, and secrets with an Azure role-based access control.
Configure anidentity on your pool, and this identity must haveKey Vault Secrets Userpermissions to fetch the secret from your Key Vault. To assign your identity to theKey Vault Secrets Userrole, seeProvide access to Key Vault keys, certificates, and secrets with an Azure role-based access control.
The principal configuring the Key Vault integration settings (if you are configuring the Key Vault settings, then your account) must have theKey Vault Certificate Userrole assignment on the Key Vault where the certificates are stored.
The principal configuring the Key Vault integration settings (if you are configuring the Key Vault settings, then your account) must have theKey Vault Certificate Userrole assignment on the Key Vault where the certificates are stored.
Note
As ofapi-version 2025-01-21, if you use this feature you can only use a single identity on the pool. Support for multiple identities will be added soon.
api-version 2025-01-21
Only one identity can be used to fetch secrets from the Key Vault.
Managed DevOps Pools certificate settings are set at the pool level, and some of the settings are specific for Windows or Linux. If your workflow requires both Linux and Windows images, you may have to divide them into multiple pools if you can't find a common set of certificate settings that work for both Windows and Linux.
The following settings configure the certificates fetched from your Key Vault.
Certificates(observedCertificates)Specify the certificates to be fetched from your Key Vault and installed on all machines in your pool.
Certificates(observedCertificates)
observedCertificates
Specify the certificates to be fetched from your Key Vault and installed on all machines in your pool.
Certificate store location(certificateStoreLocation)Specify the location to install the certificates on your agent.Windows agents: SpecifyLocalMachineorCurrentUser.Linux agents:Certificate store locationis only support on Ubuntu distributions. Specify the disk path to store the certificates, for example/var/lib/waagent/Microsoft.Azure.KeyVault/app1.
For Ubuntu distributions, if you specify the trusted store location, for example/usr/local/share/ca-certificates, the certificate is added to that certificate store as root. For more information, seeInstall a root CA certificate in the trust store.
Certificate store location(certificateStoreLocation)
certificateStoreLocation
Specify the location to install the certificates on your agent.
Windows agents: SpecifyLocalMachineorCurrentUser.
LocalMachine
CurrentUser
Linux agents:Certificate store locationis only support on Ubuntu distributions. Specify the disk path to store the certificates, for example/var/lib/waagent/Microsoft.Azure.KeyVault/app1.
For Ubuntu distributions, if you specify the trusted store location, for example/usr/local/share/ca-certificates, the certificate is added to that certificate store as root. For more information, seeInstall a root CA certificate in the trust store.
/var/lib/waagent/Microsoft.Azure.KeyVault/app1
/usr/local/share/ca-certificates
Certificate store name(certificateStoreName)Windows agents: Specify the name of the certificate store, eitherMy(local certificate store - default if no name is specified) orRoot(trusted root location).Linux agents: This setting isn't used on Linux agents.
Certificate store name(certificateStoreName)
certificateStoreName
Windows agents: Specify the name of the certificate store, eitherMy(local certificate store - default if no name is specified) orRoot(trusted root location).
My
Root
Linux agents: This setting isn't used on Linux agents.
Exportable private keys(keyExportable)Whether the key of the certificates is exportable. The default isfalse.
Exportable private keys(keyExportable)
keyExportable
Whether the key of the certificates is exportable. The default isfalse.
false
Azure portal
ARM template
Azure CLI
Key Vault integration is configured inSettings > Security.

Note
Key Vault integration settings can be configured only after the pool is created. Key Vault integration settings can't be configured during pool creation and are not displayed in theSecuritytab during pool creation.
Azure Key Vault is configured in theosProfilesection of thefabricProfileproperty. Set thesecretManagementSettingsto be able to access the desired certificate.
osProfile
fabricProfile
secretManagementSettings
Note
TheosProfile.certificateStoreNameproperty is only available inapiVersion 2025-01-21and later.
osProfile.certificateStoreName
apiVersion 2025-01-21
{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "resources": [
        {
            "name": "fabrikam-managed-pool",
            "type": "microsoft.devopsinfrastructure/pools",
            "apiVersion": "2025-01-21",
            "location": "eastus",
            "properties": {
            ...
            "fabricProfile": {
                "sku": {...},
                "images": [...],
                "osProfile": {
                    "secretsManagementSettings": {
                        "certificateStoreLocation": "LocalMachine",
                        "certificateStoreName": "Root",
                        "observedCertificates": [
                            "https://<keyvault-uri>/secrets/<certificate-name>"
                        ],
                        "keyExportable": false
                    }
                },
                "storageProfile": {...},
                "kind": "Vmss"
            }
        }
    ]
}
{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "resources": [
        {
            "name": "fabrikam-managed-pool",
            "type": "microsoft.devopsinfrastructure/pools",
            "apiVersion": "2025-01-21",
            "location": "eastus",
            "properties": {
            ...
            "fabricProfile": {
                "sku": {...},
                "images": [...],
                "osProfile": {
                    "secretsManagementSettings": {
                        "certificateStoreLocation": "LocalMachine",
                        "certificateStoreName": "Root",
                        "observedCertificates": [
                            "https://<keyvault-uri>/secrets/<certificate-name>"
                        ],
                        "keyExportable": false
                    }
                },
                "storageProfile": {...},
                "kind": "Vmss"
            }
        }
    ]
}
Azure Key Vault is configured in theosProfilesection of thefabricProfileproperty whencreatingorupdatinga pool. Set thesecretManagementSettingsto be able to access the desired certificate.
osProfile
fabricProfile
secretManagementSettings
az mdp pool create \
   --fabric-profile fabric-profile.json
   # other parameters omitted for space
az mdp pool create \
   --fabric-profile fabric-profile.json
   # other parameters omitted for space
The following example shows theosProfilesection of thefabric-profile.jsonfile withsecretsManagementSettingsconfigured.
osProfile
secretsManagementSettings
{
  "vmss": {
    "sku": {...},
    "images": [...],
    "osProfile": {
      "secretsManagementSettings": {
          "certificateStoreLocation": "LocalMachine",
          "observedCertificates": [
              "https://<keyvault-uri>/secrets/<certificate-name>"
          ],
          "keyExportable": false
      },
      "logonType": "Interactive"
    },
    "storageProfile": {...}
  }
}
{
  "vmss": {
    "sku": {...},
    "images": [...],
    "osProfile": {
      "secretsManagementSettings": {
          "certificateStoreLocation": "LocalMachine",
          "observedCertificates": [
              "https://<keyvault-uri>/secrets/<certificate-name>"
          ],
          "keyExportable": false
      },
      "logonType": "Interactive"
    },
    "storageProfile": {...}
  }
}
Configuring SecretManagementSettings
Certificates retrieved using theSecretManagementSettingson your pool will automatically sync with the most recent versions published within the Key Vault. These secrets will be on the machine by the time it runs its first pipeline, meaning you can save time and remove tasks for fetching certificates.
SecretManagementSettings
Important
Provisioning of your agent virtual machines will fail if the secret cannot be fetched from the Key Vault due to a permissions or network issue.
Windows
Linux
For Windows, the Certificate Store Location is allowed to either be set toLocalMachineorCurrentUser. This setting will ensure that the secret is installed at that location on the machine. For specific behavior of how secret retrieval works, seeAzure Key Vault extension for Windows.
LocalMachine
CurrentUser
For Linux, the Certificate Store Location can be any directory on the machine, and the certificates will be downloaded and synced to that location. For specifics on default settings and secret behavior, seeKey Vault virtual machine extension for Linux.
See also
Configure pool settings
Feedback
Was this page helpful?
Additional resources