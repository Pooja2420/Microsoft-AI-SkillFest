Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Connect to SAP from workflows in Azure Logic Apps
Article
2025-04-14
7 contributors
In this article
Applies to:Azure Logic Apps (Consumption + Standard)
This multipart how-to guide shows how to access your SAP server from a workflow in Azure Logic Apps by using the SAP connector. You can use the SAP connector's operations to create automated workflows that run when triggered by events in your SAP server or in other systems and run actions to manage resources on your SAP server.
Both Standard and Consumption logic app workflows offer the SAPmanagedconnector hosted and run in multitenant Azure. Standard workflows also offer the SAPbuilt-inconnector hosted and run in single-tenant Azure Logic Apps. For more information, seeConnector technical reference.
Note
This guide shares links to the SAP website for SAP Support Notes and Knowledge
Base articles. In most cases, you need to sign in to access the full content.
SAP compatibility
The SAP connector is compatible with the following types of SAP systems:
On-premises and cloud-based HANA-based SAP systems, such as S/4 HANA.
On-premises and cloud-based HANA-based SAP systems, such as S/4 HANA.
Classic on-premises SAP systems, such as R/3 and ECC.
Classic on-premises SAP systems, such as R/3 and ECC.
SAP must support the SAP system version that you want to connect. Otherwise, any issues that you might encounter might not be resolvable. For more information about SAP system versions and maintenance information, see theSAP Product Availability Matrix (PAM).
The SAP connector supports the following message and data integration types from SAP NetWeaver-based systems:
Intermediate Document (IDoc)
Intermediate Document (IDoc)
Business Application Programming Interface (BAPI)
Business Application Programming Interface (BAPI)
Remote Function Call (RFC) and Transactional RFC (tRFC)
Remote Function Call (RFC) and Transactional RFC (tRFC)
The SAP connector uses theSAP .NET Connector (NCo) library.
To use the SAP connector operations, you have to first authenticate your connection and have the following options:
You can provide a username and password.
You can provide a username and password.
The SAP connector supports authentication withSAP Secure Network Communications (SNC).
The SAP connector supports authentication withSAP Secure Network Communications (SNC).
You can use SNC for SAP NetWeaver single sign-on (SSO) or for security capabilities from external products. If you choose to use SNC, see theSNC prerequisites.
Connector technical reference
The SAP connector has different versions, based onlogic app type and host environment.
Connector differences
The SAP built-in connector significantly differs from the SAP managed connector in the following ways:
On-premises connections don't require the on-premises data gateway.Instead, the SAP built-in connector communicates directly with your SAP server in the integrated virtual network, which avoids hops, latency, and failure points for a network gateway. Make sure that you upload or deploy the non-redistributable SAP client libraries with your logic app workflow application. For more information, see thePrerequisitesin this guide.
On-premises connections don't require the on-premises data gateway.
Instead, the SAP built-in connector communicates directly with your SAP server in the integrated virtual network, which avoids hops, latency, and failure points for a network gateway. Make sure that you upload or deploy the non-redistributable SAP client libraries with your logic app workflow application. For more information, see thePrerequisitesin this guide.
Payload sizes up to 100 MB are supported, so you don't have to use a blob URI for large requests.
Payload sizes up to 100 MB are supported, so you don't have to use a blob URI for large requests.
Specific actions are available forCall BAPI,Call RFC, andSend IDoc. These dedicated actions provide a better experience for stateful BAPIs, RFC transactions, and IDoc deduplication, and don't use the older SOAP Windows Communication Foundation (WCF) messaging model.TheCall BAPIaction includes up to two responses with the returned JSON:The XML response from the called BAPI.The BAPI commit or BAPI rollback response, if you enable theAuto Commitoption.This capability addresses a problem with the SAP managed connector where the outcome from the autocommit behavior is silent and observable only through logs.
Specific actions are available forCall BAPI,Call RFC, andSend IDoc. These dedicated actions provide a better experience for stateful BAPIs, RFC transactions, and IDoc deduplication, and don't use the older SOAP Windows Communication Foundation (WCF) messaging model.
TheCall BAPIaction includes up to two responses with the returned JSON:
The XML response from the called BAPI.
The XML response from the called BAPI.
The BAPI commit or BAPI rollback response, if you enable theAuto Commitoption.This capability addresses a problem with the SAP managed connector where the outcome from the autocommit behavior is silent and observable only through logs.
The BAPI commit or BAPI rollback response, if you enable theAuto Commitoption.
This capability addresses a problem with the SAP managed connector where the outcome from the autocommit behavior is silent and observable only through logs.
A longer time out at 5 minutes compared to the managed connector.The SAP built-in connector doesn't use the shared or global connector infrastructure, which means time-outs are longer at 5 minutes compared to the SAP managed connector (two minutes). Long-running requests work without you having to implement the long-running webhook-based request action pattern.
A longer time out at 5 minutes compared to the managed connector.
The SAP built-in connector doesn't use the shared or global connector infrastructure, which means time-outs are longer at 5 minutes compared to the SAP managed connector (two minutes). Long-running requests work without you having to implement the long-running webhook-based request action pattern.
By default, the SAP built-in connector operations arestateless. However, you canenable stateful mode (affinity) for these operations.In stateful mode, the SAP built-in connector supports high availability and horizontal scale-out configurations. By comparison, the SAP managed connector has restrictions regarding the on-premises data gateway limited to a single instance for triggers and to clusters only in failover mode for actions. For more information, seeSAP managed connector - Known issues and limitations.
By default, the SAP built-in connector operations arestateless. However, you canenable stateful mode (affinity) for these operations.
In stateful mode, the SAP built-in connector supports high availability and horizontal scale-out configurations. By comparison, the SAP managed connector has restrictions regarding the on-premises data gateway limited to a single instance for triggers and to clusters only in failover mode for actions. For more information, seeSAP managed connector - Known issues and limitations.
Standard logic app workflows require and use the SAP NCo 3.1 client library, not the SAP NCo 3.0 version. For more information, seePrerequisites.
Standard logic app workflows require and use the SAP NCo 3.1 client library, not the SAP NCo 3.0 version. For more information, seePrerequisites.
Standard logic app workflows provide application settings where you can specify a Personal Security Environment (PSE) and PSE password.This change prevents you from uploading multiple PSE files, which isn't supported and results in SAP connection failures. In Consumption logic app workflows, the SAP managed connector lets you specify these values through connection parameters, which allowed you to upload multiple PSE files and isn't supported, causing SAP connection failures.
Standard logic app workflows provide application settings where you can specify a Personal Security Environment (PSE) and PSE password.
This change prevents you from uploading multiple PSE files, which isn't supported and results in SAP connection failures. In Consumption logic app workflows, the SAP managed connector lets you specify these values through connection parameters, which allowed you to upload multiple PSE files and isn't supported, causing SAP connection failures.
Generate SchemaactionYou can select from multiple operation types, such as BAPI, IDoc, RFC, and tRFC, versus the same action in the SAP managed connector, which uses theSapActionUrisparameter and a file system picker experience.You can directly provide a parameter name as a custom value. For example, you can specify theRFC Nameparameter from theCall RFCaction. By comparison, in the SAP managed connector, you had to provide a complexAction URIparameter name.By design, this action doesn't support generating multiple schemas for RFCs, BAPIs, or IDocs in single action execution, which the SAP managed connector supports. This capability change now prevents attempts to send large amounts of content in a single call.
Generate Schemaaction
You can select from multiple operation types, such as BAPI, IDoc, RFC, and tRFC, versus the same action in the SAP managed connector, which uses theSapActionUrisparameter and a file system picker experience.
You can select from multiple operation types, such as BAPI, IDoc, RFC, and tRFC, versus the same action in the SAP managed connector, which uses theSapActionUrisparameter and a file system picker experience.
You can directly provide a parameter name as a custom value. For example, you can specify theRFC Nameparameter from theCall RFCaction. By comparison, in the SAP managed connector, you had to provide a complexAction URIparameter name.
You can directly provide a parameter name as a custom value. For example, you can specify theRFC Nameparameter from theCall RFCaction. By comparison, in the SAP managed connector, you had to provide a complexAction URIparameter name.
By design, this action doesn't support generating multiple schemas for RFCs, BAPIs, or IDocs in single action execution, which the SAP managed connector supports. This capability change now prevents attempts to send large amounts of content in a single call.
By design, this action doesn't support generating multiple schemas for RFCs, BAPIs, or IDocs in single action execution, which the SAP managed connector supports. This capability change now prevents attempts to send large amounts of content in a single call.

Connector parameters
Along with simple string and number inputs, the SAP connector accepts the following table parameters (Type=ITABinputs):
Type=ITAB
Table direction parameters, both input and output, for older SAP releases.
Parameter changes, which replace the table direction parameters for newer SAP releases.
Hierarchical table parameters.

Known issues and limitations
SAP managed connector
The SAP connector currently doesn't support SAP router strings. The on-premises data gateway must exist on a virtual network where the gateway can directly reach the SAP system that you want to connect.
The SAP connector currently doesn't support SAP router strings. The on-premises data gateway must exist on a virtual network where the gateway can directly reach the SAP system that you want to connect.
In general, the SAP trigger doesn't support data gateway clusters. In some failover cases, the data gateway node that communicates with the SAP system might differ from the active node, which results in unexpected behavior.For send message scenarios, data gateway clusters in failover mode are supported.StatefulSAP actionsdon't support data gateway clusters in load-balancing mode. Stateful communications must remain on the same data gateway cluster node. Either use the data gateway in noncluster mode or in a cluster set up for failover only. For example, this scenario applies to the following actions:All actions that specify aSession IDvalue[BAPI] Commit transaction[BAPI] Rollback transaction[BAPI - RFC] Close stateful session[BAPI - RFC] Create stateful session
In general, the SAP trigger doesn't support data gateway clusters. In some failover cases, the data gateway node that communicates with the SAP system might differ from the active node, which results in unexpected behavior.
For send message scenarios, data gateway clusters in failover mode are supported.
For send message scenarios, data gateway clusters in failover mode are supported.
StatefulSAP actionsdon't support data gateway clusters in load-balancing mode. Stateful communications must remain on the same data gateway cluster node. Either use the data gateway in noncluster mode or in a cluster set up for failover only. For example, this scenario applies to the following actions:All actions that specify aSession IDvalue[BAPI] Commit transaction[BAPI] Rollback transaction[BAPI - RFC] Close stateful session[BAPI - RFC] Create stateful session
StatefulSAP actionsdon't support data gateway clusters in load-balancing mode. Stateful communications must remain on the same data gateway cluster node. Either use the data gateway in noncluster mode or in a cluster set up for failover only. For example, this scenario applies to the following actions:
All actions that specify aSession IDvalue
[BAPI] Commit transaction
[BAPI] Rollback transaction
[BAPI - RFC] Close stateful session
[BAPI - RFC] Create stateful session
In the action named[BAPI] Call method in SAP, the autocommit feature doesn't commit the BAPI changes if at least one warning exists in theCallBapiResponseobject returned by the action. To commit BAPI changes despite any warnings, follow these steps:Create a session explicitly by using the action named[BAPI - RFC] Create stateful session.In the action named[BAPI] Call method in SAP, disable theAuto Commitoption.Call the action named[BAPI] Commit transactioninstead.
In the action named[BAPI] Call method in SAP, the autocommit feature doesn't commit the BAPI changes if at least one warning exists in theCallBapiResponseobject returned by the action. To commit BAPI changes despite any warnings, follow these steps:
Create a session explicitly by using the action named[BAPI - RFC] Create stateful session.
In the action named[BAPI] Call method in SAP, disable theAuto Commitoption.
Call the action named[BAPI] Commit transactioninstead.
IP-based connections to SAP Message Server (load-balanced configuration)
If you specify an IP address to connect to an SAP Message Server, for example, a load balancer, the connection might still fail with an error message similar to"hostname SAPDBSERVER01.example.com unknown". The message server instructs the SAP connector to use a hostname for the connection to the backend SAP Application Server, or the server behind the load balancer. If DNS can't resolve the hostname, the connection fails.
For this problem, the following workarounds or solutions exist:
Make sure that the client making the connection, such as the computer with the on-premises data gateway for the SAP connector, can resolve the hostnames returned by the message server.
Make sure that the client making the connection, such as the computer with the on-premises data gateway for the SAP connector, can resolve the hostnames returned by the message server.
In the transaction namedRZ11, change or add the SAP setting namedms/lg_with_hostname=0.
In the transaction namedRZ11, change or add the SAP setting namedms/lg_with_hostname=0.
SAP upgraded their .NET connector (NCo) to version 3.1, which changed the way that the connector requests connections to backend servers from message servers. The connector now uses a new API for application server resolution by the message server unless you force the connector to use the previous API through the setting namedms/lg_with_hostname=0. For more information, seeSAP KB Article 3305039 - SMLG IP Address setting not considered during Logon Group login.
ms/lg_with_hostname=0
Prerequisites
An Azure account and subscription. If you don't have an Azure subscription yet,sign up for a free Azure account.
An Azure account and subscription. If you don't have an Azure subscription yet,sign up for a free Azure account.
TheSAP Application serverorSAP Message serverthat you want to access from Azure Logic Apps.Set up your SAP server and user account to allow the use of RFC.For more information, which includes the supported user account types and the minimum required authorization for each action type (RFC, BAPI, IDoc), seeSAP Note: 460089 - Minimum authorization profiles for external RFC programs.Your SAP user account needs access to theRFC_METADATAfunction group and the respective function modules for the following operations:OperationsAccess to function modulesRFC actionsRFC_GROUP_SEARCHandDD_LANGU_TO_ISOLABAPI actionsBAPI_TRANSACTION_COMMIT,BAPI_TRANSACTION_ROLLBACK,RPY_BOR_TREE_INIT,SWO_QUERY_METHODS, andSWO_QUERY_API_METHODSIDoc actionsIDOCTYPES_LIST_WITH_MESSAGES,IDOCTYPES_FOR_MESTYPE_READ,INBOUND_IDOCS_FOR_TID,OUTBOUND_IDOCS_FOR_TID,GET_STATUS_FROM_IDOCNR, andIDOC_RECORD_READRead SAP tableactionEitherRFC BBP_RFC_READ_TABLEorRFC_READ_TABLEGrant strict minimum access to SAP server for your SAP connectionRFC_METADATA_GETandRFC_METADATA_GET_TIMESTAMP
TheSAP Application serverorSAP Message serverthat you want to access from Azure Logic Apps.
Set up your SAP server and user account to allow the use of RFC.For more information, which includes the supported user account types and the minimum required authorization for each action type (RFC, BAPI, IDoc), seeSAP Note: 460089 - Minimum authorization profiles for external RFC programs.
Set up your SAP server and user account to allow the use of RFC.
For more information, which includes the supported user account types and the minimum required authorization for each action type (RFC, BAPI, IDoc), seeSAP Note: 460089 - Minimum authorization profiles for external RFC programs.
Your SAP user account needs access to theRFC_METADATAfunction group and the respective function modules for the following operations:OperationsAccess to function modulesRFC actionsRFC_GROUP_SEARCHandDD_LANGU_TO_ISOLABAPI actionsBAPI_TRANSACTION_COMMIT,BAPI_TRANSACTION_ROLLBACK,RPY_BOR_TREE_INIT,SWO_QUERY_METHODS, andSWO_QUERY_API_METHODSIDoc actionsIDOCTYPES_LIST_WITH_MESSAGES,IDOCTYPES_FOR_MESTYPE_READ,INBOUND_IDOCS_FOR_TID,OUTBOUND_IDOCS_FOR_TID,GET_STATUS_FROM_IDOCNR, andIDOC_RECORD_READRead SAP tableactionEitherRFC BBP_RFC_READ_TABLEorRFC_READ_TABLEGrant strict minimum access to SAP server for your SAP connectionRFC_METADATA_GETandRFC_METADATA_GET_TIMESTAMP
Your SAP user account needs access to theRFC_METADATAfunction group and the respective function modules for the following operations:
RFC_METADATA
RFC_GROUP_SEARCH
DD_LANGU_TO_ISOLA
BAPI_TRANSACTION_COMMIT
BAPI_TRANSACTION_ROLLBACK
RPY_BOR_TREE_INIT
SWO_QUERY_METHODS
SWO_QUERY_API_METHODS
IDOCTYPES_LIST_WITH_MESSAGES
IDOCTYPES_FOR_MESTYPE_READ
INBOUND_IDOCS_FOR_TID
OUTBOUND_IDOCS_FOR_TID
GET_STATUS_FROM_IDOCNR
IDOC_RECORD_READ
RFC BBP_RFC_READ_TABLE
RFC_READ_TABLE
RFC_METADATA_GET
RFC_METADATA_GET_TIMESTAMP
The logic app workflow from where you want to access your SAP server.For a Consumption workflow in multitenant Azure Logic Apps, seeMultitenant prerequisites.For a Standard workflow in single-tenant Azure Logic Apps, seeSingle-tenant prerequisites.
The logic app workflow from where you want to access your SAP server.
For a Consumption workflow in multitenant Azure Logic Apps, seeMultitenant prerequisites.
For a Consumption workflow in multitenant Azure Logic Apps, seeMultitenant prerequisites.
For a Standard workflow in single-tenant Azure Logic Apps, seeSingle-tenant prerequisites.
For a Standard workflow in single-tenant Azure Logic Apps, seeSingle-tenant prerequisites.
By default, the SAP built-in connector operations arestateless. To run these operations in stateful mode, seeEnable stateful mode for stateless built-in connectors.Stateful communications must stay with the same workflow instance during processing. A Standard logic app can usescale outto distribute the workload over multiple workflow instances when needed. This requirement applies to the following kinds of operations:All actions that specify aSession IDvalue, such as[BAPI] Commit transaction.All actions that specify aTransaction IDvalue, except for the following actions:[IDOC - RFC] Confirm transaction Idand[IDoc] Get IDoc list for transaction.Respond to SAP server
By default, the SAP built-in connector operations arestateless. To run these operations in stateful mode, seeEnable stateful mode for stateless built-in connectors.
Stateful communications must stay with the same workflow instance during processing. A Standard logic app can usescale outto distribute the workload over multiple workflow instances when needed. This requirement applies to the following kinds of operations:
All actions that specify aSession IDvalue, such as[BAPI] Commit transaction.
All actions that specify aSession IDvalue, such as[BAPI] Commit transaction.
All actions that specify aTransaction IDvalue, except for the following actions:[IDOC - RFC] Confirm transaction Idand[IDoc] Get IDoc list for transaction.
All actions that specify aTransaction IDvalue, except for the following actions:[IDOC - RFC] Confirm transaction Idand[IDoc] Get IDoc list for transaction.
Respond to SAP server
Respond to SAP server
To use either the SAP managed or built-in connector trigger namedWhen a message is received, complete the following tasks:Set up your SAP gateway security permissions or Access Control List (ACL). In theGateway Monitor(T-Code SMGW) dialog box, which shows thesecinfoandreginfofiles, open theGotomenu, and selectExpert Functions>External Security>Maintenance of ACL Files.The following permission setting is required:P TP=LOGICAPP HOST=<on-premises-gateway-server-IP-address> ACCESS=*This line has the following format:P TP=<trading-partner-identifier-(program-name)-or-*-for-all-partners> HOST=<comma-separated-list-with-external-host-IP-or-network-names-that-can-register-the-program> ACCESS=<*-for-all-permissions-or-a-comma-separated-list-of-permissions>If you don't configure the SAP gateway security permissions, you might receive the following error:Registration of tp Microsoft.PowerBI.EnterpriseGateway from host <host-name> not allowedFor more information, seeSAP KB Article 1850230 - GW: "Registration of tp <program ID> not allowed".Set up your SAP gateway security logging to help find Access Control List (ACL) issues. For more information, see theSAP help article about setting up gateway logging.In theConfiguration of RFC Connections(T-Code SM59) dialog box, create an RFC connection with theTCP/IPtype. Make sure that theActivation Typeis set toRegistered Server Program. Set the RFC connection'sCommunication Type with Target Systemvalue toUnicode.If you use this SAP trigger with theIDOC Formatparameter set toFlatFilealong with theFlat File Decode action, you have to use theearly_terminate_optional_fieldsproperty in your flat file schema by setting the value totrue.This requirement is necessary because the flat file IDoc data record sent by SAP on the tRFC callIDOC_INBOUND_ASYNCHRONOUSisn't padded to the full SDATA field length. Azure Logic Apps provides the flat file IDoc original data without padding as received from SAP. Also, when you combine this SAP trigger with theFlat File Decodeaction, the schema provided to the action must match.In Consumption and Standard workflows, the SAP managed trigger namedWhen a message is receiveduses the same URI location to both renew and unsubscribe from a webhook subscription. The renewal operation uses the HTTPPATCHmethod, while the unsubscribe operation uses the HTTPDELETEmethod. This behavior might make a renewal operation appear as an unsubscribe operation in your trigger's history, but the operation is still a renewal because the trigger usesPATCHas the HTTP method, notDELETE.In Standard workflows, the SAP built-in trigger namedWhen a message is receiveduses the Azure Functions trigger instead, and shows only the actual callbacks from SAP.For the SAP built-in connector trigger namedWhen a message is received, you have to enable virtual network integration and private ports by following the steps inEnable stateful mode for stateless built-in connectors in Azure Logic Apps. Otherwise, without these requirements, the action namedRespond to SAP servermight lack the necessary state to properly work.To locally fire the trigger, you can run the workflow in Visual Studio Code. For Visual Studio Code setup requirements and more information, seeCreate Standard workflows in Azure Logic Apps with Visual Studio Code. You must also set up the following environment variables on the computer where you install Visual Studio Code:WEBSITE_PRIVATE_IP: Set this environment variable value to127.0.0.1as the localhost address.WEBSITE_PRIVATE_PORTS: Set this environment variable value to two free and usable ports on your local computer, separating the values with a comma (,), for example,8080,8088.
To use either the SAP managed or built-in connector trigger namedWhen a message is received, complete the following tasks:
Set up your SAP gateway security permissions or Access Control List (ACL). In theGateway Monitor(T-Code SMGW) dialog box, which shows thesecinfoandreginfofiles, open theGotomenu, and selectExpert Functions>External Security>Maintenance of ACL Files.The following permission setting is required:P TP=LOGICAPP HOST=<on-premises-gateway-server-IP-address> ACCESS=*This line has the following format:P TP=<trading-partner-identifier-(program-name)-or-*-for-all-partners> HOST=<comma-separated-list-with-external-host-IP-or-network-names-that-can-register-the-program> ACCESS=<*-for-all-permissions-or-a-comma-separated-list-of-permissions>If you don't configure the SAP gateway security permissions, you might receive the following error:Registration of tp Microsoft.PowerBI.EnterpriseGateway from host <host-name> not allowedFor more information, seeSAP KB Article 1850230 - GW: "Registration of tp <program ID> not allowed".
Set up your SAP gateway security permissions or Access Control List (ACL). In theGateway Monitor(T-Code SMGW) dialog box, which shows thesecinfoandreginfofiles, open theGotomenu, and selectExpert Functions>External Security>Maintenance of ACL Files.
The following permission setting is required:
P TP=LOGICAPP HOST=<on-premises-gateway-server-IP-address> ACCESS=*
P TP=LOGICAPP HOST=<on-premises-gateway-server-IP-address> ACCESS=*
This line has the following format:
P TP=<trading-partner-identifier-(program-name)-or-*-for-all-partners> HOST=<comma-separated-list-with-external-host-IP-or-network-names-that-can-register-the-program> ACCESS=<*-for-all-permissions-or-a-comma-separated-list-of-permissions>
P TP=<trading-partner-identifier-(program-name)-or-*-for-all-partners> HOST=<comma-separated-list-with-external-host-IP-or-network-names-that-can-register-the-program> ACCESS=<*-for-all-permissions-or-a-comma-separated-list-of-permissions>
If you don't configure the SAP gateway security permissions, you might receive the following error:
Registration of tp Microsoft.PowerBI.EnterpriseGateway from host <host-name> not allowed
For more information, seeSAP KB Article 1850230 - GW: "Registration of tp <program ID> not allowed".
Set up your SAP gateway security logging to help find Access Control List (ACL) issues. For more information, see theSAP help article about setting up gateway logging.
Set up your SAP gateway security logging to help find Access Control List (ACL) issues. For more information, see theSAP help article about setting up gateway logging.
In theConfiguration of RFC Connections(T-Code SM59) dialog box, create an RFC connection with theTCP/IPtype. Make sure that theActivation Typeis set toRegistered Server Program. Set the RFC connection'sCommunication Type with Target Systemvalue toUnicode.
In theConfiguration of RFC Connections(T-Code SM59) dialog box, create an RFC connection with theTCP/IPtype. Make sure that theActivation Typeis set toRegistered Server Program. Set the RFC connection'sCommunication Type with Target Systemvalue toUnicode.
If you use this SAP trigger with theIDOC Formatparameter set toFlatFilealong with theFlat File Decode action, you have to use theearly_terminate_optional_fieldsproperty in your flat file schema by setting the value totrue.This requirement is necessary because the flat file IDoc data record sent by SAP on the tRFC callIDOC_INBOUND_ASYNCHRONOUSisn't padded to the full SDATA field length. Azure Logic Apps provides the flat file IDoc original data without padding as received from SAP. Also, when you combine this SAP trigger with theFlat File Decodeaction, the schema provided to the action must match.
If you use this SAP trigger with theIDOC Formatparameter set toFlatFilealong with theFlat File Decode action, you have to use theearly_terminate_optional_fieldsproperty in your flat file schema by setting the value totrue.
early_terminate_optional_fields
true
This requirement is necessary because the flat file IDoc data record sent by SAP on the tRFC callIDOC_INBOUND_ASYNCHRONOUSisn't padded to the full SDATA field length. Azure Logic Apps provides the flat file IDoc original data without padding as received from SAP. Also, when you combine this SAP trigger with theFlat File Decodeaction, the schema provided to the action must match.
IDOC_INBOUND_ASYNCHRONOUS
In Consumption and Standard workflows, the SAP managed trigger namedWhen a message is receiveduses the same URI location to both renew and unsubscribe from a webhook subscription. The renewal operation uses the HTTPPATCHmethod, while the unsubscribe operation uses the HTTPDELETEmethod. This behavior might make a renewal operation appear as an unsubscribe operation in your trigger's history, but the operation is still a renewal because the trigger usesPATCHas the HTTP method, notDELETE.In Standard workflows, the SAP built-in trigger namedWhen a message is receiveduses the Azure Functions trigger instead, and shows only the actual callbacks from SAP.
In Consumption and Standard workflows, the SAP managed trigger namedWhen a message is receiveduses the same URI location to both renew and unsubscribe from a webhook subscription. The renewal operation uses the HTTPPATCHmethod, while the unsubscribe operation uses the HTTPDELETEmethod. This behavior might make a renewal operation appear as an unsubscribe operation in your trigger's history, but the operation is still a renewal because the trigger usesPATCHas the HTTP method, notDELETE.
PATCH
DELETE
PATCH
DELETE
In Standard workflows, the SAP built-in trigger namedWhen a message is receiveduses the Azure Functions trigger instead, and shows only the actual callbacks from SAP.
For the SAP built-in connector trigger namedWhen a message is received, you have to enable virtual network integration and private ports by following the steps inEnable stateful mode for stateless built-in connectors in Azure Logic Apps. Otherwise, without these requirements, the action namedRespond to SAP servermight lack the necessary state to properly work.To locally fire the trigger, you can run the workflow in Visual Studio Code. For Visual Studio Code setup requirements and more information, seeCreate Standard workflows in Azure Logic Apps with Visual Studio Code. You must also set up the following environment variables on the computer where you install Visual Studio Code:
For the SAP built-in connector trigger namedWhen a message is received, you have to enable virtual network integration and private ports by following the steps inEnable stateful mode for stateless built-in connectors in Azure Logic Apps. Otherwise, without these requirements, the action namedRespond to SAP servermight lack the necessary state to properly work.
To locally fire the trigger, you can run the workflow in Visual Studio Code. For Visual Studio Code setup requirements and more information, seeCreate Standard workflows in Azure Logic Apps with Visual Studio Code. You must also set up the following environment variables on the computer where you install Visual Studio Code:
WEBSITE_PRIVATE_IP: Set this environment variable value to127.0.0.1as the localhost address.
WEBSITE_PRIVATE_PORTS: Set this environment variable value to two free and usable ports on your local computer, separating the values with a comma (,), for example,8080,8088.
The message content to send to your SAP server, such as a sample IDoc file. This content must be in XML format and include the namespace of theSAP actionthat you want to use. You cansend IDocs with a flat file schema by wrapping them in an XML envelope.
The message content to send to your SAP server, such as a sample IDoc file. This content must be in XML format and include the namespace of theSAP actionthat you want to use. You cansend IDocs with a flat file schema by wrapping them in an XML envelope.
For scenarios where you want to send IDocs from your logic app workflow to SAP, change your SAP processing mode from the defaultTrigger immediatelysetting toTrigger by background programso that your workflow doesn't time out.If your SAP system is under load, the queued IDoc calls for a time out. An example scenario is when your workflow sends a batch of IDocs all at one time to SAP. The default processing mode causes your SAP system to block the inbound call for IDoc transmission until an IDoc finishes processing. In Azure Logic Apps, workflow actions have a 2-minute time out, by default.To change your SAP system's processing mode, follow these steps:In SAP, find the SAP partner profile, and open thePartner profilessettings. You can use thewe20transaction code (T-Code) with the/nprefix.On theInbound optionstab, underProcessing by Function Module, change the setting toTrigger by background programfromTrigger immediately.TheTrigger by background programsetting lets the underlying IDoc transport tRFC callIDOC_INBOUND_ASYNCHRONOUSto complete immediately, rather than block the connection until the IDoc finishes processing. However, this setting works only if the IDoc doesn't include theExpress behavior overwriting segment, per SAP KB Article 1777090 - IDocs are processed immediately despite having the "Trigger by background program" option selected in WE20.For more information, see the following resources:SAP KB Article 1845390 - Poor performance when posting IDocs with report RBDAPP01Improving ALE Performance (Optimise processing of inbound and outbound idocs) - SAP Support Content
For scenarios where you want to send IDocs from your logic app workflow to SAP, change your SAP processing mode from the defaultTrigger immediatelysetting toTrigger by background programso that your workflow doesn't time out.
If your SAP system is under load, the queued IDoc calls for a time out. An example scenario is when your workflow sends a batch of IDocs all at one time to SAP. The default processing mode causes your SAP system to block the inbound call for IDoc transmission until an IDoc finishes processing. In Azure Logic Apps, workflow actions have a 2-minute time out, by default.
To change your SAP system's processing mode, follow these steps:
In SAP, find the SAP partner profile, and open thePartner profilessettings. You can use thewe20transaction code (T-Code) with the/nprefix.
In SAP, find the SAP partner profile, and open thePartner profilessettings. You can use thewe20transaction code (T-Code) with the/nprefix.
On theInbound optionstab, underProcessing by Function Module, change the setting toTrigger by background programfromTrigger immediately.TheTrigger by background programsetting lets the underlying IDoc transport tRFC callIDOC_INBOUND_ASYNCHRONOUSto complete immediately, rather than block the connection until the IDoc finishes processing. However, this setting works only if the IDoc doesn't include theExpress behavior overwriting segment, per SAP KB Article 1777090 - IDocs are processed immediately despite having the "Trigger by background program" option selected in WE20.
On theInbound optionstab, underProcessing by Function Module, change the setting toTrigger by background programfromTrigger immediately.
TheTrigger by background programsetting lets the underlying IDoc transport tRFC callIDOC_INBOUND_ASYNCHRONOUSto complete immediately, rather than block the connection until the IDoc finishes processing. However, this setting works only if the IDoc doesn't include theExpress behavior overwriting segment, per SAP KB Article 1777090 - IDocs are processed immediately despite having the "Trigger by background program" option selected in WE20.
IDOC_INBOUND_ASYNCHRONOUS
For more information, see the following resources:
SAP KB Article 1845390 - Poor performance when posting IDocs with report RBDAPP01
Improving ALE Performance (Optimise processing of inbound and outbound idocs) - SAP Support Content

Network connectivity prerequisites
The SAP system requires network connectivity from the host of the SAP .NET Connector (NCo) library:
For Consumption logic app workflows in multitenant Azure Logic Apps, the on-premises data gateway hosts the SAP .NET Connector (NCo) library. If you use an on-premises data gateway cluster, all nodes of the cluster require network connectivity to the SAP system.
For Consumption logic app workflows in multitenant Azure Logic Apps, the on-premises data gateway hosts the SAP .NET Connector (NCo) library. If you use an on-premises data gateway cluster, all nodes of the cluster require network connectivity to the SAP system.
For Standard logic app workflows in single-tenant Azure Logic Apps, the logic app resource hosts the SAP .NET Connector (NCo) library. So, the logic app resource itself must enable virtual network integration, and that virtual network must have network connectivity to the SAP system.
For Standard logic app workflows in single-tenant Azure Logic Apps, the logic app resource hosts the SAP .NET Connector (NCo) library. So, the logic app resource itself must enable virtual network integration, and that virtual network must have network connectivity to the SAP system.
The SAP system-required network connectivity includes the following servers and services:
SAP Application Server, Dispatcher service (for all Logon types)Your SAP system can include multiple SAP Application Servers. The host of the SAP .NET Connector (NCo) library requires access to each server and their services.
SAP Application Server, Dispatcher service (for all Logon types)
Your SAP system can include multiple SAP Application Servers. The host of the SAP .NET Connector (NCo) library requires access to each server and their services.
SAP Message Server, Message service (for Logon type Group)The Message Server and service will redirect to one or more Application Server's Dispatcher services. The host of the SAP .NET Connector (NCo) library requires access to each server and their services.
SAP Message Server, Message service (for Logon type Group)
The Message Server and service will redirect to one or more Application Server's Dispatcher services. The host of the SAP .NET Connector (NCo) library requires access to each server and their services.
SAP Gateway Server, Gateway service
SAP Gateway Server, Gateway service
SAP Gateway Server, Gateway secured serviceThe SAP system-required network connectivity also includes this server and service to use with Secure Network Communications (SNC).
SAP Gateway Server, Gateway secured service
The SAP system-required network connectivity also includes this server and service to use with Secure Network Communications (SNC).
Redirection of requests from Application Server, Dispatcher service to Gateway Server, Gateway service automatically happens within the SAP .NET Connector (NCo) library. This redirection occurs even if only the Application Server, Dispatcher service information is provided in the connection parameters.
If you use a load balancer in front of your SAP system, you must redirect all the services to their respective servers.
For more information about SAP services and ports, seeTCP/IP Ports of All SAP Products.
Note
Make sure you enabled network connectivity from the host of the SAP .NET Connector (NCo) library and that the required
ports are open on firewalls and network security groups. Otherwise, you get errors such aspartner not reachedfrom theNI (network interface)component and error text such asWSAECONNREFUSED: Connection refused.

SAP NCo client library prerequisites
To use the SAP connector, you have to install the SAP Connector NCo client library for Microsoft .NET 3.1. The following list describes the prerequisites for the SAP NCo client library, based on the workflow where you use the SAP connector:
Version:For Consumption logic app workflows that use the on-premises data gateway, make sure that you install the latest 64-bit version,SAP Connector for Microsoft .NET 3.1.3.0 for Windows 64 bit (x64). The data gateway runs only on 64-bit systems. Installing the unsupported 32-bit version results in a"bad image"error.For Standard logic app workflows, you can install the latest 64-bit or 32-bit version forSAP Connector (NCo 3.1) for Microsoft .NET 3.1.3.0 compiled with .NET Framework 4.6.2. However, make sure that you install the version that matches the configuration in your Standard logic app resource. To check the version used by your logic app, follow these steps:In theAzure portal, open your Standard logic app resource.On the logic app resource menu, underSettings, selectConfiguration.On theConfigurationpage, select theGeneral settingstab. UnderPlatform settings, check whether thePlatformvalue is set to64 Bitor32 Bit.Make sure to install the version of theSAP Connector (NCo 3.1) for Microsoft .NET 3.1.3.0 compiled with .NET Framework 4.6.2that matches your platform configuration.
Version:
For Consumption logic app workflows that use the on-premises data gateway, make sure that you install the latest 64-bit version,SAP Connector for Microsoft .NET 3.1.3.0 for Windows 64 bit (x64). The data gateway runs only on 64-bit systems. Installing the unsupported 32-bit version results in a"bad image"error.
For Consumption logic app workflows that use the on-premises data gateway, make sure that you install the latest 64-bit version,SAP Connector for Microsoft .NET 3.1.3.0 for Windows 64 bit (x64). The data gateway runs only on 64-bit systems. Installing the unsupported 32-bit version results in a"bad image"error.
For Standard logic app workflows, you can install the latest 64-bit or 32-bit version forSAP Connector (NCo 3.1) for Microsoft .NET 3.1.3.0 compiled with .NET Framework 4.6.2. However, make sure that you install the version that matches the configuration in your Standard logic app resource. To check the version used by your logic app, follow these steps:In theAzure portal, open your Standard logic app resource.On the logic app resource menu, underSettings, selectConfiguration.On theConfigurationpage, select theGeneral settingstab. UnderPlatform settings, check whether thePlatformvalue is set to64 Bitor32 Bit.Make sure to install the version of theSAP Connector (NCo 3.1) for Microsoft .NET 3.1.3.0 compiled with .NET Framework 4.6.2that matches your platform configuration.
For Standard logic app workflows, you can install the latest 64-bit or 32-bit version forSAP Connector (NCo 3.1) for Microsoft .NET 3.1.3.0 compiled with .NET Framework 4.6.2. However, make sure that you install the version that matches the configuration in your Standard logic app resource. To check the version used by your logic app, follow these steps:
In theAzure portal, open your Standard logic app resource.
In theAzure portal, open your Standard logic app resource.
On the logic app resource menu, underSettings, selectConfiguration.
On the logic app resource menu, underSettings, selectConfiguration.
On theConfigurationpage, select theGeneral settingstab. UnderPlatform settings, check whether thePlatformvalue is set to64 Bitor32 Bit.
On theConfigurationpage, select theGeneral settingstab. UnderPlatform settings, check whether thePlatformvalue is set to64 Bitor32 Bit.
Make sure to install the version of theSAP Connector (NCo 3.1) for Microsoft .NET 3.1.3.0 compiled with .NET Framework 4.6.2that matches your platform configuration.
Make sure to install the version of theSAP Connector (NCo 3.1) for Microsoft .NET 3.1.3.0 compiled with .NET Framework 4.6.2that matches your platform configuration.
From the client library's default installation folder, copy the assembly (.dll) files to another location, based on your scenario as follows. Or, optionally, if you use only the SAP managed connector, when you install the SAP NCo client library, selectGlobal Assembly Cache registration. The SAP built-in connector currently doesn't support GAC registration.For a Consumption workflow that runs in multitenant Azure Logic Apps and uses your on-premises data gateway, copy the following assembly (.dll) files to the on-premises data gateway installation folder, for example,C:\Program Files\On-Premises Data Gateway. The SAP NCo 3.0 client library contains the following assemblies:libicudecnumber.dllrscp4n.dllsapnco.dllsapnco_utils.dllMake sure that you copy the assembly files to the data gateway'sinstallation folder. Otherwise, your SAP connection might fail with the error message,Please check your account info and/or permissions and try again. You can troubleshoot further issues by using the.NET assembly binding log viewer. This tool lets you check that your assembly files are in the correct location.For Standard workflows, copy the following assembly (.dll) files to a location from where you can upload them to your logic app resource in the Azure portal or to your local logic app project in Visual Studio Code. The SAP NCo 3.1 client library includes the following assemblies:rscp4n.dllsapnco.dllsapnco_utils.dll
From the client library's default installation folder, copy the assembly (.dll) files to another location, based on your scenario as follows. Or, optionally, if you use only the SAP managed connector, when you install the SAP NCo client library, selectGlobal Assembly Cache registration. The SAP built-in connector currently doesn't support GAC registration.
For a Consumption workflow that runs in multitenant Azure Logic Apps and uses your on-premises data gateway, copy the following assembly (.dll) files to the on-premises data gateway installation folder, for example,C:\Program Files\On-Premises Data Gateway. The SAP NCo 3.0 client library contains the following assemblies:libicudecnumber.dllrscp4n.dllsapnco.dllsapnco_utils.dllMake sure that you copy the assembly files to the data gateway'sinstallation folder. Otherwise, your SAP connection might fail with the error message,Please check your account info and/or permissions and try again. You can troubleshoot further issues by using the.NET assembly binding log viewer. This tool lets you check that your assembly files are in the correct location.
For a Consumption workflow that runs in multitenant Azure Logic Apps and uses your on-premises data gateway, copy the following assembly (.dll) files to the on-premises data gateway installation folder, for example,C:\Program Files\On-Premises Data Gateway. The SAP NCo 3.0 client library contains the following assemblies:
libicudecnumber.dll
rscp4n.dll
sapnco.dll
sapnco_utils.dll
Make sure that you copy the assembly files to the data gateway'sinstallation folder. Otherwise, your SAP connection might fail with the error message,Please check your account info and/or permissions and try again. You can troubleshoot further issues by using the.NET assembly binding log viewer. This tool lets you check that your assembly files are in the correct location.
For Standard workflows, copy the following assembly (.dll) files to a location from where you can upload them to your logic app resource in the Azure portal or to your local logic app project in Visual Studio Code. The SAP NCo 3.1 client library includes the following assemblies:rscp4n.dllsapnco.dllsapnco_utils.dll
For Standard workflows, copy the following assembly (.dll) files to a location from where you can upload them to your logic app resource in the Azure portal or to your local logic app project in Visual Studio Code. The SAP NCo 3.1 client library includes the following assemblies:
rscp4n.dll
sapnco.dll
sapnco_utils.dll
The following relationships exist between the SAP NCo client library, the .NET Framework, the .NET runtime, and the data gateway:
The Microsoft SAP Adapter and the gateway host service both use .NET Framework 4.7.2.
The Microsoft SAP Adapter and the gateway host service both use .NET Framework 4.7.2.
The SAP NCo for .NET Framework 4.0 works with processes that use .NET runtime 4.0 to 4.8.
The SAP NCo for .NET Framework 4.0 works with processes that use .NET runtime 4.0 to 4.8.
The SAP NCo for .NET Framework 2.0 works with processes that use .NET runtime 2.0 to 3.5, but no longer works with the latest gateway.
The SAP NCo for .NET Framework 2.0 works with processes that use .NET runtime 2.0 to 3.5, but no longer works with the latest gateway.

SNC prerequisites
Consumption
Standard

For Consumption workflows in multitenant Azure Logic Apps that use the on-premises data gateway, and optionally SNC, you must also configure the following settings.
Make sure that your SNC library version and its dependencies are compatible with your SAP environment. To troubleshoot any library compatibility issues, you can use your on-premises data gateway and data gateway logs.
Make sure that your SNC library version and its dependencies are compatible with your SAP environment. To troubleshoot any library compatibility issues, you can use your on-premises data gateway and data gateway logs.
Make sure that you copied the following assembly (.dll) files in the SAP NCo 3.0 client library to the on-premises data gateway'sinstallationfolder, for example,C:\Program Files\On-Premises Data Gateway.libicudecnumber.dllrscp4n.dllsapnco.dllsapnco_utils.dll
Make sure that you copied the following assembly (.dll) files in the SAP NCo 3.0 client library to the on-premises data gateway'sinstallationfolder, for example,C:\Program Files\On-Premises Data Gateway.
libicudecnumber.dll
rscp4n.dll
sapnco.dll
sapnco_utils.dll
For the SAPGENPSE utility, you must specifically usesapgenpse.exe.
For the SAPGENPSE utility, you must specifically usesapgenpse.exe.
If you provide a Personal Security Environment (PSE) with your connection, you don't need to copy and set up the PSE and SECUDIR for your on-premises data gateway.
If you provide a Personal Security Environment (PSE) with your connection, you don't need to copy and set up the PSE and SECUDIR for your on-premises data gateway.
If you enable SNC through an external security product, such assapseculib, Kerberos, or NTLM, make sure that the SNC library exists on the same computer as your data gateway installation. For this task, copy the SNC library's binary files to the same folder as the data gateway installation on your local computer, for example,C:\Program Files\On-Premises Data Gateway.NoteOn the computer with the data gateway installation and SNC library, don't set the
environment variables forSNC_LIBandSNC_LIB_64. Otherwise, these variables
take precedence over the SNC library value passed through the connector.
If you enable SNC through an external security product, such assapseculib, Kerberos, or NTLM, make sure that the SNC library exists on the same computer as your data gateway installation. For this task, copy the SNC library's binary files to the same folder as the data gateway installation on your local computer, for example,C:\Program Files\On-Premises Data Gateway.
Note
On the computer with the data gateway installation and SNC library, don't set the
environment variables forSNC_LIBandSNC_LIB_64. Otherwise, these variables
take precedence over the SNC library value passed through the connector.
To use SNC with single sign-on (SSO), make sure the data gateway service is running as a user who is mapped to an SAP user. To change the default account for the gateway service account, selectChange account, and enter the user credentials.
To use SNC with single sign-on (SSO), make sure the data gateway service is running as a user who is mapped to an SAP user. To change the default account for the gateway service account, selectChange account, and enter the user credentials.

For more information about enabling SNC, seeEnable Secure Network Communications (SNC).

The SAP built-in connector supports only SNC X.509 authentication, not single sign-on (SSO) authentication. Make sure that you install the SNC and common crypto library assemblies as part of yoursingle-tenant prerequisitesandnetwork connectivity prerequisites. For more information about enabling SNC, seeEnable Secure Network Communications (SNC).
For SNC from SAP, you need to download the following files and have them ready to upload to your logic app resource.
rscp4n.dll
sapnco.dll
sapnco_utils.dll
You also need the following files from theCommonCryptoLib.sarpackage available from theSAP for Me, Software Download Center. For more information, seeDownloadCommonCryptoLib.sar.
sapcrypto.dll
sapgenpse.exe
slcryptokernal.dll
Note
If you use a different SNC implementation, these library files might have different names.
In any case,sapgenpse.exeis required to use SNC with the SAP built-in connector.

To get the required assemblies and other files for SNC from SAP, you can find these files in theCommonCryptoLib.sarpackage available from theSAP for Me, Software Download Center. You can use any currently supportedCommonCryptoLiblibrary implementation, based on compatible versions specific to your SAP environment. However, Microsoft recommends that you use the latest version for theCommonCryptoLiblibrary available from SAP, assuming that version is compatible with your SAP environment.
To download the currentCommonCryptoLibpackage, follow these steps:
Sign in to theSAP for Me, Software Download Center.
Sign in to theSAP for Me, Software Download Center.
On theDownload Softwarepage, select theInstallation & Upgradestab, expandBy Alphabetical Index (A-Z), and selectC>SAP Cryptographic Software>Downloadstab >SapCryptoLib>Downloadstab >CommonCryptoLib 8>Downloadstab.
On theDownload Softwarepage, select theInstallation & Upgradestab, expandBy Alphabetical Index (A-Z), and selectC>SAP Cryptographic Software>Downloadstab >SapCryptoLib>Downloadstab >CommonCryptoLib 8>Downloadstab.
From theItems Available to Downloadlist, selectWindows on x64 64BitorWindows Server on IA32 x32 Bit, whichever matches Standard logic app platform configuration.Microsoft recommends the 64-bit version.
From theItems Available to Downloadlist, selectWindows on x64 64BitorWindows Server on IA32 x32 Bit, whichever matches Standard logic app platform configuration.
Microsoft recommends the 64-bit version.
From the list, select the highest level patch.The current patch number varies based on the selected Windows version.
From the list, select the highest level patch.
The current patch number varies based on the selected Windows version.
If you don't have theSAPCARutilityto extract the .sar file, follow these steps:In theSAP for Me, Software Download Center, on theDownload Softwarepage, select theSupport Packages & Patchestab, expandBy Alphabetical Index (A-Z), and selectS>SAPCAR>Downloadstab.From theItems Available to Downloadlist, select your operating system, and thesapcar.exefile for theSAPCARutility.TipIf you're unfamiliar with theSAPCARutility, see the following SAP blog post,Easily extract SAR files.The following batch file is an improved version that extracts archives to a subdirectory with the same name:@echo off
cd %~dp1
mkdir %~n1
sapcar.exe -xvf %~nx1 -R %~n1
pause
If you don't have theSAPCARutilityto extract the .sar file, follow these steps:
SAPCAR
In theSAP for Me, Software Download Center, on theDownload Softwarepage, select theSupport Packages & Patchestab, expandBy Alphabetical Index (A-Z), and selectS>SAPCAR>Downloadstab.
In theSAP for Me, Software Download Center, on theDownload Softwarepage, select theSupport Packages & Patchestab, expandBy Alphabetical Index (A-Z), and selectS>SAPCAR>Downloadstab.
From theItems Available to Downloadlist, select your operating system, and thesapcar.exefile for theSAPCARutility.
From theItems Available to Downloadlist, select your operating system, and thesapcar.exefile for theSAPCARutility.
Tip
If you're unfamiliar with theSAPCARutility, see the following SAP blog post,Easily extract SAR files.
The following batch file is an improved version that extracts archives to a subdirectory with the same name:
@echo off
cd %~dp1
mkdir %~n1
sapcar.exe -xvf %~nx1 -R %~n1
pause
@echo off
cd %~dp1
mkdir %~n1
sapcar.exe -xvf %~nx1 -R %~n1
pause
Include all the extracted .dll and .exe files, which the following list shows for the current SAPCommonCryptoLibpackage:sapcrypto.dllsapgenpse.exeslcryptokernal.dll
Include all the extracted .dll and .exe files, which the following list shows for the current SAPCommonCryptoLibpackage:
sapcrypto.dll
sapgenpse.exe
slcryptokernal.dll
Azure Logic Apps environment prerequisites
Consumption
Standard

For a Consumption workflow in multitenant Azure Logic Apps, the SAP managed connector integrates with SAP systems through anon-premises data gateway. For example, in scenarios where your workflow sends a message to the SAP system, the data gateway acts as an RFC client and forwards the requests received from your workflow to SAP. Likewise, in scenarios where your workflow receives a message from SAP, the data gateway acts as an RFC server that receives requests from SAP and forwards them to your workflow.
On a host computer or virtual machine that exists in the same virtual network as the SAP system to which you're connecting,download and install the on-premises data gateway.The data gateway helps you securely access on-premises data and resources. Make sure to use a supported version of the gateway. If you experience an issue with your gateway, tryupgrading to the latest version, which might include updates to resolve your problem.
On a host computer or virtual machine that exists in the same virtual network as the SAP system to which you're connecting,download and install the on-premises data gateway.
The data gateway helps you securely access on-premises data and resources. Make sure to use a supported version of the gateway. If you experience an issue with your gateway, tryupgrading to the latest version, which might include updates to resolve your problem.
In the Azure portal,create an Azure gateway resourcefor your on-premises data gateway installation.
In the Azure portal,create an Azure gateway resourcefor your on-premises data gateway installation.
On the same local computer as your on-premises data gateway installation,download and install the latest SAP NCo client library.
On the same local computer as your on-premises data gateway installation,download and install the latest SAP NCo client library.
For the host computer with your on-premises data gateway installation, configure the network host names and service names resolution.To use the host names or service names for connections from Azure Logic Apps, you have to set up name resolution for each SAP Application, Message, and Gateway server along with their services:In the%windir%\System32\drivers\etc\hostsfile or in the DNS server that's available to the host computer for your on-premises data gateway installation, set up the network host name resolution.In the%windir%\System32\drivers\etc\servicesfile, set up the service name resolution.If you don't intend to use network host names or service names for the connection, you can use host IP addresses and service port numbers instead.If you don't have a DNS entry for your SAP system, the following example shows a sample entry for the hosts file:10.0.1.9           sapserver                   # SAP single-instance system host IP by simple computer name
10.0.1.9           sapserver.contoso.com       # SAP single-instance system host IP by fully qualified DNS nameThe following list shows a sample set of entries for the services files:sapdp00            3200/tcp              # SAP system instance 00 dialog (application) service port
sapgw00            3300/tcp              # SAP system instance 00 gateway service port
sapmsDV6           3601/tcp              # SAP system ID DV6 message service port
For the host computer with your on-premises data gateway installation, configure the network host names and service names resolution.
To use the host names or service names for connections from Azure Logic Apps, you have to set up name resolution for each SAP Application, Message, and Gateway server along with their services:In the%windir%\System32\drivers\etc\hostsfile or in the DNS server that's available to the host computer for your on-premises data gateway installation, set up the network host name resolution.In the%windir%\System32\drivers\etc\servicesfile, set up the service name resolution.
To use the host names or service names for connections from Azure Logic Apps, you have to set up name resolution for each SAP Application, Message, and Gateway server along with their services:
In the%windir%\System32\drivers\etc\hostsfile or in the DNS server that's available to the host computer for your on-premises data gateway installation, set up the network host name resolution.
In the%windir%\System32\drivers\etc\hostsfile or in the DNS server that's available to the host computer for your on-premises data gateway installation, set up the network host name resolution.
In the%windir%\System32\drivers\etc\servicesfile, set up the service name resolution.
In the%windir%\System32\drivers\etc\servicesfile, set up the service name resolution.
If you don't intend to use network host names or service names for the connection, you can use host IP addresses and service port numbers instead.
If you don't intend to use network host names or service names for the connection, you can use host IP addresses and service port numbers instead.
If you don't have a DNS entry for your SAP system, the following example shows a sample entry for the hosts file:10.0.1.9           sapserver                   # SAP single-instance system host IP by simple computer name
10.0.1.9           sapserver.contoso.com       # SAP single-instance system host IP by fully qualified DNS nameThe following list shows a sample set of entries for the services files:sapdp00            3200/tcp              # SAP system instance 00 dialog (application) service port
sapgw00            3300/tcp              # SAP system instance 00 gateway service port
sapmsDV6           3601/tcp              # SAP system ID DV6 message service port
If you don't have a DNS entry for your SAP system, the following example shows a sample entry for the hosts file:
10.0.1.9           sapserver                   # SAP single-instance system host IP by simple computer name
10.0.1.9           sapserver.contoso.com       # SAP single-instance system host IP by fully qualified DNS name
10.0.1.9           sapserver                   # SAP single-instance system host IP by simple computer name
10.0.1.9           sapserver.contoso.com       # SAP single-instance system host IP by fully qualified DNS name
The following list shows a sample set of entries for the services files:
sapdp00            3200/tcp              # SAP system instance 00 dialog (application) service port
sapgw00            3300/tcp              # SAP system instance 00 gateway service port
sapmsDV6           3601/tcp              # SAP system ID DV6 message service port
sapdp00            3200/tcp              # SAP system instance 00 dialog (application) service port
sapgw00            3300/tcp              # SAP system instance 00 gateway service port
sapmsDV6           3601/tcp              # SAP system ID DV6 message service port

For a Standard workflow in single-tenant Azure Logic Apps, use the SAPbuilt-inconnector to directly access resources that are protected by an Azure virtual network. You can also use other built-in connectors that let workflows directly access on-premises resources without having to use the on-premises data gateway.
To use the SAP connector, you need to download the following files and have them read to upload to your Standard logic app resource. For more information, seeSAP NCo client library prerequisites:rscp4n.dllsapnco.dllsapnco_utils.dll
To use the SAP connector, you need to download the following files and have them read to upload to your Standard logic app resource. For more information, seeSAP NCo client library prerequisites:
rscp4n.dll
sapnco.dll
sapnco_utils.dll
For SNC from SAP, you need to download the following files and have them ready to upload to your logic app resource. For more information, seeSNC prerequisites:sapcrypto.dllsapgenpse.exeslcryptokernal.dll
For SNC from SAP, you need to download the following files and have them ready to upload to your logic app resource. For more information, seeSNC prerequisites:
sapcrypto.dll
sapgenpse.exe
slcryptokernal.dll
In theAzure portal, open your Standard logic app resource.
In theAzure portal, open your Standard logic app resource.
On the logic app menu, underWorkflows, selectAssemblies.
On the logic app menu, underWorkflows, selectAssemblies.
On theAssembliespage toolbar, selectAdd.
On theAssembliespage toolbar, selectAdd.
After theAdd Assemblypane opens, forAssembly Type, selectClient/SDK Assembly (.NET Framework).
After theAdd Assemblypane opens, forAssembly Type, selectClient/SDK Assembly (.NET Framework).
UnderUpload Files, add the previously described required files that you downloaded:SAP NCorscp4n.dllsapnco.dllsapnco_utils.dllCommonCryptoLibsapcrypto.dllsapgenpse.exeslcryptokernal.dll
UnderUpload Files, add the previously described required files that you downloaded:
SAP NCo
rscp4n.dll
sapnco.dll
sapnco_utils.dll
CommonCryptoLib
sapcrypto.dll
sapgenpse.exe
slcryptokernal.dll
When you're ready, selectUpload Files.If the assembly file is 4 MB or smaller, you can either browse and select or drag and drop the file. For files larger than 4 MB, follow these steps instead:On the logic app menu, underDevelopment Tools, selectAdvanced Tools.On theAdvanced Toolspage, selectGo.On theKudutoolbar, from theDebug consolemenu, selectCMD.Open the following folders:site>wwwrootOn the folder structure toolbar, select the plus (+) sign, and then selectNew folder.Create the following folder and subfolders:lib>builtinOperationSdks>net472In thenet472folder, upload the assembly files larger than 4 MB.
When you're ready, selectUpload Files.
If the assembly file is 4 MB or smaller, you can either browse and select or drag and drop the file. For files larger than 4 MB, follow these steps instead:
On the logic app menu, underDevelopment Tools, selectAdvanced Tools.
On the logic app menu, underDevelopment Tools, selectAdvanced Tools.
On theAdvanced Toolspage, selectGo.
On theAdvanced Toolspage, selectGo.
On theKudutoolbar, from theDebug consolemenu, selectCMD.
On theKudutoolbar, from theDebug consolemenu, selectCMD.
Open the following folders:site>wwwroot
Open the following folders:site>wwwroot
On the folder structure toolbar, select the plus (+) sign, and then selectNew folder.
On the folder structure toolbar, select the plus (+) sign, and then selectNew folder.
Create the following folder and subfolders:lib>builtinOperationSdks>net472
Create the following folder and subfolders:lib>builtinOperationSdks>net472
In thenet472folder, upload the assembly files larger than 4 MB.
In thenet472folder, upload the assembly files larger than 4 MB.

Enable Secure Network Communications (SNC)
Consumption
Standard
For a Consumption workflow that runs in multitenant Azure Logic Apps, you can enable SNC for authentication, which applies only when you use the data gateway. Before you start, make sure that you met all the necessaryprerequisitesandSNC prerequisites.
For more information about SNC, seeGetting started with SAP SNC for RFC integrations - SAP blog.
In theAzure portal, open your Consumption logic app and workflow in the designer.
In theAzure portal, open your Consumption logic app and workflow in the designer.
Add an SAP managed connector operation or edit the connection for an existing operation.
Add an SAP managed connector operation or edit the connection for an existing operation.
In the SAP connection information box, provide therequired information.NoteForAuthentication Type,Basicis currently the only available option.
TheSAP UsernameandSAP Passwordfields are optional. If you don't provide a username
and password, the connector uses the client certificate provided in a later step for authentication.
In the SAP connection information box, provide therequired information.
Note
ForAuthentication Type,Basicis currently the only available option.
TheSAP UsernameandSAP Passwordfields are optional. If you don't provide a username
and password, the connector uses the client certificate provided in a later step for authentication.

To enable SNC, in the SAP connection information box, selectUse SNC, and provide the correspondingrequired information:ParameterDescriptionSNC LibraryEnter one of the following values:- The name for your SNC library, for example,sapsnc.dll- The relative path to the NCo installation location, for example,.\security\sapsnc.dll- The absolute path to the NCo installation location, for example,c:\security\sapsnc.dllSNC SSOSelect eitherLogon using the SNC identityorLogon with the username/password provided on RFC level.Typically, the SNC identity is used to authenticate the caller. You can choose to authenticate with a username and password instead, but this parameter value is still encrypted.SNC My NameIn most cases, you can omit this value. The installed SNC solution usually knows its own SNC name. In the case where your solution supports multiple identities, you might have to specify the identity to use for this particular destination or server.SNC Partner NameEnter the name for the backend SNC, for example,p:CN=DV3, OU=LA, O=MS, C=US.SNC Quality of ProtectionSelect the quality of service to use for SNC communication with this particular destination or server. The back-end system defines the default value. The security product used for SNC defines the maximum value.SNC CertificateEnter the base64-encodedpublickey for the certificate to use for identifying your client to SAP.Note: Make sure to follow this guidance:- Don't include the PEM header or footer.- Don't enter the private key for the client certificate here. Your Personal Security Environment (PSE) must contain the matching private key for this certificate and might contain other private certificates. For more information, see the next parameter.PSEEnter your SNC Personal Security Environment (PSE) as a base64-encoded binary.- Your PSE must contain the private key for the client certificate where the thumbprint matches the public key for the client certificate in theSNC Certificateparameter.- Although your PSE might contain multiple client certificates, to use different client certificates, create separate workflows instead.
To enable SNC, in the SAP connection information box, selectUse SNC, and provide the correspondingrequired information:

To finish creating your connection, selectCreate new.If the parameters are correct, the connection is created. If there's a problem with the parameters, the connection creation dialog displays an error message. To troubleshoot connection parameter issues, you can use the on-premises data gateway installation and the gateway's local logs.
To finish creating your connection, selectCreate new.
If the parameters are correct, the connection is created. If there's a problem with the parameters, the connection creation dialog displays an error message. To troubleshoot connection parameter issues, you can use the on-premises data gateway installation and the gateway's local logs.
For a Standard workflow that runs in single-tenant Azure Logic Apps, you can enable SNC for authentication. Before you start, make sure that you meet all the necessaryprerequisitesandSNC prerequisites for single-tenant. For more information about SNC, seeGetting started with SAP SNC for RFC integrations - SAP blog.
In theAzure portal, open your Standard logic app resource.
In theAzure portal, open your Standard logic app resource.
To specify your SNC Personal Security Environment (PSE) and PSE password, follow these steps:On your logic app resource menu, underSettings, selectEnvironment variables.On theApp settingstab, check whether the settings namedSAP_PSEandSAP_PSE_PASSWORDalready exist. If they don't exist, you have to add each setting at the end of the settings list, provide the following required information, and selectApplyfor each setting:NameValueDescriptionSAP_PSE<PSE-value>Enter your SNC Personal Security Environment (PSE) as a base64-encoded binary.- Your PSE must contain the private key for the client certificate where the thumbprint matches the public key for the client certificate in the SAP connection'sSNC Certificateparameter that is available when you create the connection.- Although your PSE might contain multiple client certificates, to use different client certificates, create separate workflows instead.- The PSE must have no PIN. If necessary, set the PIN to empty by using the SAPGENPSE utility.SAP_PSE_PASSWORD<PSE-password>The password, also known as PIN, for your PSE
To specify your SNC Personal Security Environment (PSE) and PSE password, follow these steps:
On your logic app resource menu, underSettings, selectEnvironment variables.
On your logic app resource menu, underSettings, selectEnvironment variables.
On theApp settingstab, check whether the settings namedSAP_PSEandSAP_PSE_PASSWORDalready exist. If they don't exist, you have to add each setting at the end of the settings list, provide the following required information, and selectApplyfor each setting:NameValueDescriptionSAP_PSE<PSE-value>Enter your SNC Personal Security Environment (PSE) as a base64-encoded binary.- Your PSE must contain the private key for the client certificate where the thumbprint matches the public key for the client certificate in the SAP connection'sSNC Certificateparameter that is available when you create the connection.- Although your PSE might contain multiple client certificates, to use different client certificates, create separate workflows instead.- The PSE must have no PIN. If necessary, set the PIN to empty by using the SAPGENPSE utility.SAP_PSE_PASSWORD<PSE-password>The password, also known as PIN, for your PSE
On theApp settingstab, check whether the settings namedSAP_PSEandSAP_PSE_PASSWORDalready exist. If they don't exist, you have to add each setting at the end of the settings list, provide the following required information, and selectApplyfor each setting:
For the SAPbuilt-inconnector, follow these steps that apply only to this connector version.
Note
For the SAPmanagedconnector, follow thesame steps to enable SNC for an SAP connection in a Consumption workflow.
On your logic app resource menu, underWorkflows, selectWorkflows.
On your logic app resource menu, underWorkflows, selectWorkflows.
Add a new empty Standard workflow or open an existing workflow.
Add a new empty Standard workflow or open an existing workflow.
In the workflow designer, add an SAP built-in connector operation or edit the connection for an existing operation.
In the workflow designer, add an SAP built-in connector operation or edit the connection for an existing operation.
In the SAP connection information box, provide therequired information, based on theAuthentication Typethat you select.NoteIf you plan to enable SNC, continue to the next step
after you provide the connection name and SAP client ID.
In the SAP connection information box, provide therequired information, based on theAuthentication Typethat you select.
Note
If you plan to enable SNC, continue to the next step
after you provide the connection name and SAP client ID.

To enable SNC, in the SAP connection information box, open theAuthentication Typelist, and selectLogon Using SNC. Provide therequired information:ParameterDescriptionSNC My NameIn most cases, you can omit this value. The installed SNC solution usually knows its own SNC name. In the case where your solution supports multiple identities, you might have to specify the identity to use for this particular destination or server.SNC Partner NameEnter the name for the backend SNC, for example,p:CN=DV3, OU=LA, O=MS, C=US.SNC Quality of ProtectionSelect the quality of service to use for SNC communication with this particular destination or server. The back-end system defines the default value. The security product used for SNC defines the maximum value.SNC TypeSelect the SNC authentication to use.Certificate UserEnter the user to connect when you have a certificate assigned to multiple users.SNC CertificateEnter your SNC client's public certificate in base64-encoded format. This parameter specifies the certificates that this connection must use.Note: Make sure to follow this guidance:- Don't include the PEM header or footer.- Don't enter the private certificate here because the Personal Security Environment (PSE) might contain multiple private certificates. You specify this PSE by using theSAP_PSEapp setting for your Standard logic app resource.- If you use more than one SNC client certificate for your logic app resource, you must provide the same PSE for all connections.
To enable SNC, in the SAP connection information box, open theAuthentication Typelist, and selectLogon Using SNC. Provide therequired information:

To finish creating your connection, selectCreate new.If the parameters are correct, the connection is created. If there's a problem with the parameters, the connection creation dialog displays an error message.
To finish creating your connection, selectCreate new.
If the parameters are correct, the connection is created. If there's a problem with the parameters, the connection creation dialog displays an error message.
Convert a binary PSE file into base64-encoded format
Use a PowerShell script, for example:Param ([Parameter(Mandatory=$true)][string]$psePath, [string]$base64OutputPath)
$base64String = [convert]::ToBase64String((Get-Content -path $psePath -Encoding byte))
if ($base64OutputPath -eq $null)
{
    Write-Output $base64String
}
else
{
    Set-Content -Path $base64OutputPath -Value $base64String
    Write-Output "Output written to $base64OutputPath"
}
Use a PowerShell script, for example:
Param ([Parameter(Mandatory=$true)][string]$psePath, [string]$base64OutputPath)
$base64String = [convert]::ToBase64String((Get-Content -path $psePath -Encoding byte))
if ($base64OutputPath -eq $null)
{
    Write-Output $base64String
}
else
{
    Set-Content -Path $base64OutputPath -Value $base64String
    Write-Output "Output written to $base64OutputPath"
}
Param ([Parameter(Mandatory=$true)][string]$psePath, [string]$base64OutputPath)
$base64String = [convert]::ToBase64String((Get-Content -path $psePath -Encoding byte))
if ($base64OutputPath -eq $null)
{
    Write-Output $base64String
}
else
{
    Set-Content -Path $base64OutputPath -Value $base64String
    Write-Output "Output written to $base64OutputPath"
}
Save the script as apseConvert.ps1file, and then invoke the script, for example:.\pseConvert.ps1 -psePath "C:\Temp\SECUDIR\request.pse" -base64OutputPath "connectionInput.txt"
Output written to connectionInput.txtIf you don't provide the output path parameter, the script's output to the console contains line breaks. Remove the line breaks in the base 64-encoded string for the connection input parameter.
Save the script as apseConvert.ps1file, and then invoke the script, for example:
.\pseConvert.ps1 -psePath "C:\Temp\SECUDIR\request.pse" -base64OutputPath "connectionInput.txt"
Output written to connectionInput.txt
.\pseConvert.ps1 -psePath "C:\Temp\SECUDIR\request.pse" -base64OutputPath "connectionInput.txt"
Output written to connectionInput.txt
If you don't provide the output path parameter, the script's output to the console contains line breaks. Remove the line breaks in the base 64-encoded string for the connection input parameter.

Set up and test sending IDocs from SAP to your workflow
To send IDocs from SAP to your logic app workflow, follow these steps to set up and test your SAP configuration with your logic app workflow. These steps apply only to testing because production environments require other configuration.
To send IDocs from SAP to your workflow, you need to set up the minimum configuration by following these steps:
Create an RFC destination.
Create an Advanced Business Application Programming (ABAP) connection.
Create a receiver port.
Create a sender port.
Create a logical system partner.
Create a partner profile.
Test sending messages.
This destination identifies your logic app workflow as the receiver port.
In SAP, open theConfiguration of RFC Connectionssettings. You can use thesm59transaction code (T-Code) with the/nprefix.
In SAP, open theConfiguration of RFC Connectionssettings. You can use thesm59transaction code (T-Code) with the/nprefix.
SelectTCP/IP Connections>Create.
SelectTCP/IP Connections>Create.
Create a new RFC destination with the following settings:ForRFC Destination, enter a name.On theTechnical Settingstab, forActivation Type, selectRegistered Server Program.ForProgram ID, enter a value. In your SAP server, your workflow's trigger is registered by using this identifier.ImportantThe SAPProgram IDis case-sensitive. Make sure that you consistently use the same case format
for yourProgram IDwhen you configure your workflow and SAP server. Otherwise, you might
receive the following errors in the tRFC Monitor (T-Code SM58) when you attempt to send an IDoc to SAP:Function IDOC_INBOUND_ASYNCHRONOUS not foundNon-ABAP RFC client (partner type) not supportedFor more information from SAP, see the following notes:2399329 - Function IDOC_INBOUND_ASYNCHRONOUS not found in SM58https://me.sap.com/notes/353597On theUnicodetab, forCommunication Type with Target System, selectUnicode.NoteSAP .NET Client libraries support only Unicode character encoding. If you get the errorNon-ABAP RFC client (partner type) not supportedwhen you send an IDoc from SAP to
Azure Logic Apps, check that theCommunication Type with Target Systemvalue is set toUnicode.
Create a new RFC destination with the following settings:
ForRFC Destination, enter a name.
ForRFC Destination, enter a name.
On theTechnical Settingstab, forActivation Type, selectRegistered Server Program.
On theTechnical Settingstab, forActivation Type, selectRegistered Server Program.
ForProgram ID, enter a value. In your SAP server, your workflow's trigger is registered by using this identifier.ImportantThe SAPProgram IDis case-sensitive. Make sure that you consistently use the same case format
for yourProgram IDwhen you configure your workflow and SAP server. Otherwise, you might
receive the following errors in the tRFC Monitor (T-Code SM58) when you attempt to send an IDoc to SAP:Function IDOC_INBOUND_ASYNCHRONOUS not foundNon-ABAP RFC client (partner type) not supportedFor more information from SAP, see the following notes:2399329 - Function IDOC_INBOUND_ASYNCHRONOUS not found in SM58https://me.sap.com/notes/353597
ForProgram ID, enter a value. In your SAP server, your workflow's trigger is registered by using this identifier.
Important
The SAPProgram IDis case-sensitive. Make sure that you consistently use the same case format
for yourProgram IDwhen you configure your workflow and SAP server. Otherwise, you might
receive the following errors in the tRFC Monitor (T-Code SM58) when you attempt to send an IDoc to SAP:
Function IDOC_INBOUND_ASYNCHRONOUS not found
Non-ABAP RFC client (partner type) not supported
For more information from SAP, see the following notes:
2399329 - Function IDOC_INBOUND_ASYNCHRONOUS not found in SM58
https://me.sap.com/notes/353597
On theUnicodetab, forCommunication Type with Target System, selectUnicode.NoteSAP .NET Client libraries support only Unicode character encoding. If you get the errorNon-ABAP RFC client (partner type) not supportedwhen you send an IDoc from SAP to
Azure Logic Apps, check that theCommunication Type with Target Systemvalue is set toUnicode.
On theUnicodetab, forCommunication Type with Target System, selectUnicode.
Note
SAP .NET Client libraries support only Unicode character encoding. If you get the errorNon-ABAP RFC client (partner type) not supportedwhen you send an IDoc from SAP to
Azure Logic Apps, check that theCommunication Type with Target Systemvalue is set toUnicode.
Save your changes.
Save your changes.
Register your newProgram IDwith Azure Logic Apps by creating a logic app workflow that starts with the SAP managed trigger namedWhen a message is received.That way, when you save your workflow, Azure Logic Apps registers theProgram IDon the SAP Gateway.
Register your newProgram IDwith Azure Logic Apps by creating a logic app workflow that starts with the SAP managed trigger namedWhen a message is received.
That way, when you save your workflow, Azure Logic Apps registers theProgram IDon the SAP Gateway.
In your workflow's trigger history, the on-premises data gateway SAP Adapter logs, if applicable, and the SAP Gateway trace logs, check the registration status.In the SAP Gateway monitor box (T-Code SMGW), underLogged-On Clients, the new registration appears asRegistered Server.
In your workflow's trigger history, the on-premises data gateway SAP Adapter logs, if applicable, and the SAP Gateway trace logs, check the registration status.
In the SAP Gateway monitor box (T-Code SMGW), underLogged-On Clients, the new registration appears asRegistered Server.
To test your connection, under your newRFC Destination, selectConnection Test.
To test your connection, under your newRFC Destination, selectConnection Test.
This destination identifies your SAP system as the sender port.
In SAP, open theConfiguration of RFC Connectionssettings. You can use thesm59transaction code (T-Code) with the/nprefix.
In SAP, open theConfiguration of RFC Connectionssettings. You can use thesm59transaction code (T-Code) with the/nprefix.
SelectABAP Connections>Create.
SelectABAP Connections>Create.
ForRFC Destination, enter the identifier for your test SAP system.
ForRFC Destination, enter the identifier for your test SAP system.
InTechnical Settings, leave the target host empty to create a local connection to the SAP system.
InTechnical Settings, leave the target host empty to create a local connection to the SAP system.
Save your changes.
Save your changes.
To test your connection, selectConnection Test.
To test your connection, selectConnection Test.
In SAP, open thePorts In IDOC processingsettings. You can use thewe21transaction code (T-Code) with the/nprefix.
In SAP, open thePorts In IDOC processingsettings. You can use thewe21transaction code (T-Code) with the/nprefix.
SelectPorts>Transactional RFC>Create.
SelectPorts>Transactional RFC>Create.
In the settings box that opens, selectown port name.
In the settings box that opens, selectown port name.
For your test port, enter aNamethat starts withSAP. Save your changes.All sender port names must start with the lettersSAP, for example,SAPTEST.
For your test port, enter aNamethat starts withSAP. Save your changes.
All sender port names must start with the lettersSAP, for example,SAPTEST.
In the settings for your new sender port, forRFC destination, enter the identifier foryour ABAP connection.
In the settings for your new sender port, forRFC destination, enter the identifier foryour ABAP connection.
Save your changes.
Save your changes.
In SAP, open thePorts In IDOC processingsettings. You can use thewe21transaction code (T-Code) with the/nprefix.
In SAP, open thePorts In IDOC processingsettings. You can use thewe21transaction code (T-Code) with the/nprefix.
SelectPorts>Transactional RFC>Create.
SelectPorts>Transactional RFC>Create.
In the settings box that opens, selectown port name. For your test port, enter aName. Save your changes.
In the settings box that opens, selectown port name. For your test port, enter aName. Save your changes.
In the settings for your new receiver port, forRFC destination, enter the identifier foryour test RFC destination.
In the settings for your new receiver port, forRFC destination, enter the identifier foryour test RFC destination.
Save your changes.
Save your changes.
In SAP, open theChange View "Logical Systems": Overviewsettings. You can use thebd54transaction code (T-Code).
In SAP, open theChange View "Logical Systems": Overviewsettings. You can use thebd54transaction code (T-Code).
Accept the following warning message that appears:Caution: The table is cross-client
Accept the following warning message that appears:Caution: The table is cross-client
Above the list that shows your existing logical systems, selectNew Entries.
Above the list that shows your existing logical systems, selectNew Entries.
For your new logical system, enter aLog.Systemidentifier and a shortNamedescription. Save your changes.
For your new logical system, enter aLog.Systemidentifier and a shortNamedescription. Save your changes.
When thePrompt for Workbenchappears, create a new request by providing a description, or if you already created a request, skip this step.
When thePrompt for Workbenchappears, create a new request by providing a description, or if you already created a request, skip this step.
After you create the workbench request, link that request to the table update request. To confirm that your table was updated, save your changes.
After you create the workbench request, link that request to the table update request. To confirm that your table was updated, save your changes.
For production environments, you must create the following two partner profiles:
One profile for the sender, which is your organization and SAP system.
One profile for the receiver, which is your logic app resource and workflow.
In SAP, open thePartner profilessettings. You can use thewe20transaction code (T-Code) with the/nprefix.
In SAP, open thePartner profilessettings. You can use thewe20transaction code (T-Code) with the/nprefix.
UnderPartner Profiles, selectPartner Type LS>Create.
UnderPartner Profiles, selectPartner Type LS>Create.
Create a new partner profile with the following settings:SettingDescriptionPartner No.Enteryour logical system partner's identifier.Partn. TypeEnterLS.AgentEnter the identifier for the SAP user account to use when you register program identifiers for Azure Logic Apps or other non-SAP systems.
Create a new partner profile with the following settings:
Save your changes.If you didn'tcreate the logical system partner, you get the error,Enter a valid partner number.
Save your changes.
If you didn'tcreate the logical system partner, you get the error,Enter a valid partner number.
In your partner profile's settings, underOutbound parmtrs., selectCreate outbound parameter.
In your partner profile's settings, underOutbound parmtrs., selectCreate outbound parameter.
Create a new outbound parameter with the following settings:Enter yourMessage Type, for example,CREMAS.Enter yourreceiver port's identifier.Enter an IDoc size forPack. Size. Or, tosend IDocs one at a time from SAP, selectPass IDoc Immediately.
Create a new outbound parameter with the following settings:
Enter yourMessage Type, for example,CREMAS.
Enter yourMessage Type, for example,CREMAS.
Enter yourreceiver port's identifier.
Enter yourreceiver port's identifier.
Enter an IDoc size forPack. Size. Or, tosend IDocs one at a time from SAP, selectPass IDoc Immediately.
Enter an IDoc size forPack. Size. Or, tosend IDocs one at a time from SAP, selectPass IDoc Immediately.
Save your changes.
Save your changes.
In SAP, open theTest Tool for IDoc Processingsettings. You can use thewe19transaction code (T-Code) with the/nprefix.
In SAP, open theTest Tool for IDoc Processingsettings. You can use thewe19transaction code (T-Code) with the/nprefix.
UnderTemplate for test, selectVia message type. Enter your message type, for example,CREMAS. SelectCreate.
UnderTemplate for test, selectVia message type. Enter your message type, for example,CREMAS. SelectCreate.
Confirm theWhich IDoc type?message by selectingContinue.
Confirm theWhich IDoc type?message by selectingContinue.
Select theEDIDCnode. Enter the appropriate values for your receiver and sender ports. SelectContinue.
Select theEDIDCnode. Enter the appropriate values for your receiver and sender ports. SelectContinue.
SelectStandard Outbound Processing.
SelectStandard Outbound Processing.
To start outbound IDoc processing, selectContinue.When the tool finishes processing, theIDoc sent to SAP system or external programmessage appears.
To start outbound IDoc processing, selectContinue.
When the tool finishes processing, theIDoc sent to SAP system or external programmessage appears.
To check for processing errors, use thesm58transaction code (T-Code) with the/nprefix.
To check for processing errors, use thesm58transaction code (T-Code) with the/nprefix.
Create workflows for common SAP scenarios
For the how-to guide to creating workflows for common SAP integration workloads, see the following steps:
Receive message from SAP
Receive IDoc packets from SAP
Send IDocs to SAP
Generate schemas for artifacts in SAP
Create workflows for advanced SAP scenarios
Change language headers for sending data to SAP
Confirm transaction separately and avoid duplicate IDocs
Find extended error logs (Managed connector only)
If you use the SAP managed connector, you can find full error messages by checking your SAP Adapter's extended logs. You can alsoenable an extended log file for the SAP connector.
For on-premises data gateway releases from April 2020 and earlier, logs are disabled by default.
For on-premises data gateway releases from April 2020 and earlier, logs are disabled by default.
For on-premises data gateway releases from June 2020 and later, you canenable gateway logs in the app settings.The default logging level isWarning.If you enableAdditional loggingin theDiagnosticssettings of the on-premises data gateway app, the logging level is increased toInformational.To increase the logging level toVerbose, update the following setting in your configuration file. Typically, the configuration file is located atC:\Program Files\On-premises data gateway\Microsoft.PowerBI.DataMovement.Pipeline.GatewayCore.dll.config.<setting name="SapTraceLevel" serializeAs="String">
   <value>Verbose</value>
</setting>
For on-premises data gateway releases from June 2020 and later, you canenable gateway logs in the app settings.
The default logging level isWarning.
The default logging level isWarning.
If you enableAdditional loggingin theDiagnosticssettings of the on-premises data gateway app, the logging level is increased toInformational.
If you enableAdditional loggingin theDiagnosticssettings of the on-premises data gateway app, the logging level is increased toInformational.
To increase the logging level toVerbose, update the following setting in your configuration file. Typically, the configuration file is located atC:\Program Files\On-premises data gateway\Microsoft.PowerBI.DataMovement.Pipeline.GatewayCore.dll.config.<setting name="SapTraceLevel" serializeAs="String">
   <value>Verbose</value>
</setting>
To increase the logging level toVerbose, update the following setting in your configuration file. Typically, the configuration file is located atC:\Program Files\On-premises data gateway\Microsoft.PowerBI.DataMovement.Pipeline.GatewayCore.dll.config.
C:\Program Files\On-premises data gateway\Microsoft.PowerBI.DataMovement.Pipeline.GatewayCore.dll.config
<setting name="SapTraceLevel" serializeAs="String">
   <value>Verbose</value>
</setting>
<setting name="SapTraceLevel" serializeAs="String">
   <value>Verbose</value>
</setting>

Set up extended SAP logging in on-premises data gateway (Managed connector only)
If you use anon-premises data gateway for Azure Logic Apps, you can configure an extended log file for the SAP connector. You can use your on-premises data gateway to redirect Event Tracing for Windows (ETW) events into rotating log files that are included in your gateway's logging .zip files.
You canexport all of your gateway's configuration and service logsto a .zip file in from the gateway app's settings.
Note
Extended logging might affect your workflow's performance when always enabled. As a best practice,
turn off extended log files after you're finished with analyzing and troubleshooting an issue.
Capture ETW events
As an optional advanced logging task, you can directly capture ETW events, and thenconsume the data in Azure Diagnostics in Event Hubsorcollect your data to Azure Monitor Logs. For more information, review thebest practices for collecting and storing data.
To work with the resulting ETL files, you can usePerfView, or you can write your own program. The following walkthrough uses PerfView:
In the PerfView menu, selectCollect>Collectto capture the events.
In the PerfView menu, selectCollect>Collectto capture the events.
In theAdditional Providerparameter, enter*Microsoft-LobAdapterto specify the SAP provider to capture SAP Adapter events. If you don't specify this information, your trace only includes general ETW events.
In theAdditional Providerparameter, enter*Microsoft-LobAdapterto specify the SAP provider to capture SAP Adapter events. If you don't specify this information, your trace only includes general ETW events.
*Microsoft-LobAdapter
Keep the other default settings. If you want, you can change the file name or location in theData Fileparameter.
Keep the other default settings. If you want, you can change the file name or location in theData Fileparameter.
SelectStart Collectionto begin your trace.
SelectStart Collectionto begin your trace.
After you reproduce your issue or collect enough analysis data, selectStop Collection.
After you reproduce your issue or collect enough analysis data, selectStop Collection.
To share your data with another party, such as Azure support engineers, compress the ETL file.
To share your data with another party, such as Azure support engineers, compress the ETL file.
To view the content of your trace:In PerfView, selectFile>Openand select the ETL file you generated.In the PerfView sidebar, theEventssection under your ETL file.UnderFilter, filter byMicrosoft-LobAdapterto only view relevant events and gateway processes.
To view the content of your trace:
In PerfView, selectFile>Openand select the ETL file you generated.
In PerfView, selectFile>Openand select the ETL file you generated.
In the PerfView sidebar, theEventssection under your ETL file.
In the PerfView sidebar, theEventssection under your ETL file.
UnderFilter, filter byMicrosoft-LobAdapterto only view relevant events and gateway processes.
UnderFilter, filter byMicrosoft-LobAdapterto only view relevant events and gateway processes.
Microsoft-LobAdapter

Test your workflow
Based on whether you have a Consumption workflow in multitenant Azure Logic Apps or a Standard workflow in single-tenant Azure Logic Apps, follow the corresponding steps:
Consumption
Standard
If your Consumption logic app resource isn't already enabled, on your logic app menu, selectOverview. On the toolbar, selectEnable.
If your Consumption logic app resource isn't already enabled, on your logic app menu, selectOverview. On the toolbar, selectEnable.
On the designer toolbar, selectRun>Runto manually start your workflow.
On the designer toolbar, selectRun>Runto manually start your workflow.
To trigger your workflow, send a message from your SAP system.
To trigger your workflow, send a message from your SAP system.
Return to your logic app'sOverviewpage. UnderRuns history, find any new runs for your workflow.
Return to your logic app'sOverviewpage. UnderRuns history, find any new runs for your workflow.
Open the most recent run, which shows a manual run. Find and review the trigger outputs section.
Open the most recent run, which shows a manual run. Find and review the trigger outputs section.
If your Standard logic app resource is stopped or disabled, from your workflow, go to the logic app resource level, and selectOverview. On the toolbar, selectStart.
If your Standard logic app resource is stopped or disabled, from your workflow, go to the logic app resource level, and selectOverview. On the toolbar, selectStart.
Return to the workflow level. On the workflow menu, selectOverview. On the toolbar, selectRun>Runto manually start your workflow.
Return to the workflow level. On the workflow menu, selectOverview. On the toolbar, selectRun>Runto manually start your workflow.
To trigger your workflow, send a message from your SAP system.
To trigger your workflow, send a message from your SAP system.
Return to your workflow'sOverviewpage. UnderRun History, find any new runs for your workflow.
Return to your workflow'sOverviewpage. UnderRun History, find any new runs for your workflow.
Open the most recent run, which shows a manual run. Find and review the trigger outputs section.
Open the most recent run, which shows a manual run. Find and review the trigger outputs section.
Enable SAP client library (NCo) logging and tracing (built-in connector only)
When you have to investigate any problems with this component, you can set up custom text file-based NCo tracing, which SAP or Microsoft support might request from you. By default, this capability is disabled because enabling this trace might negatively affect performance and quickly consume the application host's storage space.
You can control this tracing capability at the application level by adding the following settings:
In theAzure portal, open your Standard logic app resource.
In theAzure portal, open your Standard logic app resource.
On the logic app menu, underSettings, selectEnvironment variablesto review the application settings.
On the logic app menu, underSettings, selectEnvironment variablesto review the application settings.
On theEnvironment variablespage, on theApp settingstab, add the following application settings:SAP_RFC_TRACE_DIRECTORY: The directory where to store the NCo trace files, for example,C:\home\LogFiles\NCo.SAP_RFC_TRACE_LEVEL: The NCo trace level withLevel4as the suggested value for typical verbose logging. SAP or Microsoft support might request that you set adifferent trace level.NoteFor Standard logic app workflows that use runtime version 1.69.0 or later, you can enable
logging for multiple trace levels by separating each trace level with a comma (,).To find your workflow's runtime version, follow these steps:In the Azure portal, on your workflow menu, selectOverview.In theEssentialssection, find theRuntime Versionproperty.SAP_CPIC_TRACE_LEVEL: The Common Programming Interface for Communication (CPI-C) trace level withVerboseas the suggested value for typical verbose logging. SAP or Microsoft support might request that you set adifferent trace level.For more information about adding application settings, seeEdit host and app settings for Standard logic app workflows.
On theEnvironment variablespage, on theApp settingstab, add the following application settings:
SAP_RFC_TRACE_DIRECTORY: The directory where to store the NCo trace files, for example,C:\home\LogFiles\NCo.
SAP_RFC_TRACE_DIRECTORY: The directory where to store the NCo trace files, for example,C:\home\LogFiles\NCo.
SAP_RFC_TRACE_LEVEL: The NCo trace level withLevel4as the suggested value for typical verbose logging. SAP or Microsoft support might request that you set adifferent trace level.NoteFor Standard logic app workflows that use runtime version 1.69.0 or later, you can enable
logging for multiple trace levels by separating each trace level with a comma (,).To find your workflow's runtime version, follow these steps:In the Azure portal, on your workflow menu, selectOverview.In theEssentialssection, find theRuntime Versionproperty.
SAP_RFC_TRACE_LEVEL: The NCo trace level withLevel4as the suggested value for typical verbose logging. SAP or Microsoft support might request that you set adifferent trace level.
Note
For Standard logic app workflows that use runtime version 1.69.0 or later, you can enable
logging for multiple trace levels by separating each trace level with a comma (,).
To find your workflow's runtime version, follow these steps:
In the Azure portal, on your workflow menu, selectOverview.
In theEssentialssection, find theRuntime Versionproperty.
SAP_CPIC_TRACE_LEVEL: The Common Programming Interface for Communication (CPI-C) trace level withVerboseas the suggested value for typical verbose logging. SAP or Microsoft support might request that you set adifferent trace level.
SAP_CPIC_TRACE_LEVEL: The Common Programming Interface for Communication (CPI-C) trace level withVerboseas the suggested value for typical verbose logging. SAP or Microsoft support might request that you set adifferent trace level.
For more information about adding application settings, seeEdit host and app settings for Standard logic app workflows.
Save your changes. This step restarts the application.
Save your changes. This step restarts the application.

Trace levels available
View the trace
On Standard logic app resource menu, underDevelopment Tools, selectAdvanced Tools>Go.
On Standard logic app resource menu, underDevelopment Tools, selectAdvanced Tools>Go.
On theKudutoolbar, selectDebug Console>CMD.
On theKudutoolbar, selectDebug Console>CMD.
Browse to the folder for the application setting named$SAP_RFC_TRACE_DIRECTORY.A new folder namedNCo, or whatever folder name that you used, appears for the application setting value,C:\home\LogFiles\NCo, that you set earlier.
Browse to the folder for the application setting named$SAP_RFC_TRACE_DIRECTORY.
A new folder namedNCo, or whatever folder name that you used, appears for the application setting value,C:\home\LogFiles\NCo, that you set earlier.
Open the$SAP_RFC_TRACE_DIRECTORYfolder, which contains the following files:NCo trace logs: A file nameddev_nco_rfc.log, one or multiple files namednco_rfc_NNNN.log, and one or multiple files namednco_rfc_NNNN.trcfiles whereNNNNis a thread identifier.CPIC trace logs: One or multiple files namednco_cpic_NNNN.trcfiles whereNNNNis thread identifier.
Open the$SAP_RFC_TRACE_DIRECTORYfolder, which contains the following files:
NCo trace logs: A file nameddev_nco_rfc.log, one or multiple files namednco_rfc_NNNN.log, and one or multiple files namednco_rfc_NNNN.trcfiles whereNNNNis a thread identifier.
NCo trace logs: A file nameddev_nco_rfc.log, one or multiple files namednco_rfc_NNNN.log, and one or multiple files namednco_rfc_NNNN.trcfiles whereNNNNis a thread identifier.
CPIC trace logs: One or multiple files namednco_cpic_NNNN.trcfiles whereNNNNis thread identifier.
CPIC trace logs: One or multiple files namednco_cpic_NNNN.trcfiles whereNNNNis thread identifier.
To view the content in a log or trace file, select theEditbutton next to a file.NoteIf you download a log or trace file currently opened or used by your logic app workflow,
your download might result in an empty file.
To view the content in a log or trace file, select theEditbutton next to a file.
Note
If you download a log or trace file currently opened or used by your logic app workflow,
your download might result in an empty file.
Enable SAP Common Crypto Library (CCL) tracing (built-in connector only)
If you have to investigate any problems with the crypto library while using SNC authentication, you can set up custom text file-based CCL tracing. You can use the CCL logs to troubleshoot SNC authentication issues, or share them with Microsoft or SAP support, if requested. By default, this capability is disabled because enabling this trace might negatively affect performance and quickly consume the application host's storage space.
You can control this tracing capability at the application level by adding the following settings:
In theAzure portal, open your Standard logic app resource.
In theAzure portal, open your Standard logic app resource.
On Standard logic app resource menu, underDevelopment Tools, selectAdvanced Tools>Go.
On Standard logic app resource menu, underDevelopment Tools, selectAdvanced Tools>Go.
On theKudutoolbar, selectDebug Console>CMD.
On theKudutoolbar, selectDebug Console>CMD.
Browse to a location underC:\home\site\wwwroot, and create a text file, for example:CCLPROFILE.txt.For more information about logging parameters, seeSAP KB Article 3192871 - How to check CommonCryptoLib version information in ABAP system. The following sample provides an example tracing configuration:ccl/trace/directory=C:\home\LogFiles\CCLLOGS
ccl/trace/level=4
ccl/trace/rotatefilesize=10000000
ccl/trace/rotatefilenumber=10
Browse to a location underC:\home\site\wwwroot, and create a text file, for example:CCLPROFILE.txt.
For more information about logging parameters, seeSAP KB Article 3192871 - How to check CommonCryptoLib version information in ABAP system. The following sample provides an example tracing configuration:
ccl/trace/directory=C:\home\LogFiles\CCLLOGS
ccl/trace/level=4
ccl/trace/rotatefilesize=10000000
ccl/trace/rotatefilenumber=10
ccl/trace/directory=C:\home\LogFiles\CCLLOGS
ccl/trace/level=4
ccl/trace/rotatefilesize=10000000
ccl/trace/rotatefilenumber=10
On the logic app menu, underSettings, selectEnvironment variablesto review the application settings.
On the logic app menu, underSettings, selectEnvironment variablesto review the application settings.
On theEnvironment variablespage, on theApp settingstab, add the following application setting:CCL_PROFILE: The directory whereCCLPROFILE.txtwas created, for example,C:\home\site\wwwroot\CCLPROFILE.txt.
On theEnvironment variablespage, on theApp settingstab, add the following application setting:
CCL_PROFILE: The directory whereCCLPROFILE.txtwas created, for example,C:\home\site\wwwroot\CCLPROFILE.txt.
Save your changes. This step restarts the application.
Save your changes. This step restarts the application.
View the trace
On Standard logic app resource menu, underDevelopment Tools, selectAdvanced Tools>Go.
On Standard logic app resource menu, underDevelopment Tools, selectAdvanced Tools>Go.
On theKudutoolbar, selectDebug Console>CMD.
On theKudutoolbar, selectDebug Console>CMD.
Browse to the folder for the$ccl/trace/directoryparameter, which is from theCCLPROFILE.txtfile.Usually, the trace files are namedsec-Microsoft.Azure.Work-$processId.trcandsec-sapgenpse.exe-$processId.trc.Your logic app workflow performs SNC authentication as a two-step process:Your logic app workflow invokessapgenpse.exeto generate acred_v2file from the PSE file.You can find the traces related to this step in a file namedsec-sapgenpse.exe-$processId.trc.Your logic app workflow authenticates access to your SAP server by consuming the generatedcred_v2file, with the SAP client library invoking the common crypto library.You can find the traces related to this step in a file namedsec-Microsoft.Azure.Work-$processId.trc.
Browse to the folder for the$ccl/trace/directoryparameter, which is from theCCLPROFILE.txtfile.
Usually, the trace files are namedsec-Microsoft.Azure.Work-$processId.trcandsec-sapgenpse.exe-$processId.trc.
Your logic app workflow performs SNC authentication as a two-step process:
Your logic app workflow invokessapgenpse.exeto generate acred_v2file from the PSE file.You can find the traces related to this step in a file namedsec-sapgenpse.exe-$processId.trc.
Your logic app workflow invokessapgenpse.exeto generate acred_v2file from the PSE file.
You can find the traces related to this step in a file namedsec-sapgenpse.exe-$processId.trc.
Your logic app workflow authenticates access to your SAP server by consuming the generatedcred_v2file, with the SAP client library invoking the common crypto library.You can find the traces related to this step in a file namedsec-Microsoft.Azure.Work-$processId.trc.
Your logic app workflow authenticates access to your SAP server by consuming the generatedcred_v2file, with the SAP client library invoking the common crypto library.
You can find the traces related to this step in a file namedsec-Microsoft.Azure.Work-$processId.trc.
Send SAP telemetry forâ¯on-premises data gateway to Azure Application Insights
Starting with the August 2021 update for the on-premises data gateway, SAP connector operations can send telemetry data from the SAP NCo client library and traces from the Microsoft SAP Adapter toApplication Insights. This feature is a capability in Azure Monitor. The telemetry primarily includes the following data:
Metrics and traces based on SAP NCo metrics and monitors
Traces from Microsoft SAP Adapter
Metrics and traces from SAP NCo client library
SAP NCo-based metrics are numeric values that might or might not vary over a time period, based on the usage and availability of resources on the on-premises data gateway. You can use these metrics to better understand system health and to create alerts about the following activities:
System health decline
Unusual events
Heavy system load
This information is sent to the Application Insights table namedcustomMetrics. By default, metrics are sent at 30-second intervals.
SAP NCo-based traces include text information that's used with metrics. This information is sent to the Application Insights table namedtraces. By default, traces are sent at 10-minute intervals.
SAP NCo metrics and traces are based on SAP NCo metrics, specifically the following NCo classes:
RfcDestinationMonitor
RfcConnectionMonitor
RfcServerMonitor
RfcRepositoryMonitor
For more information about the metrics that each class provides, see theSAP NCo documentation.
Set up SAP telemetry for Application Insights
Before you can send SAP telemetry for your gateway installation to Application Insights, you need to create and set up your Application Insights resource. For more information, review the following documentation:
Create an Application Insights resource (classic)
Create an Application Insights resource (classic)
Workspace-based Application Insights resources
Workspace-based Application Insights resources
To enable sending SAP telemetry to Application insights, follow these steps:
Download the NuGet package forMicrosoft.ApplicationInsights.EventSourceListener.dllfrom this location:https://www.nuget.org/packages/Microsoft.ApplicationInsights.EventSourceListener/2.14.0.
Download the NuGet package forMicrosoft.ApplicationInsights.EventSourceListener.dllfrom this location:https://www.nuget.org/packages/Microsoft.ApplicationInsights.EventSourceListener/2.14.0.
Add the downloaded file to your on-premises data gateway installation directory, for example,C:\Program Files\On-Premises Data Gateway.
Add the downloaded file to your on-premises data gateway installation directory, for example,C:\Program Files\On-Premises Data Gateway.
In your on-premises data gateway installation directory, check that theMicrosoft.ApplicationInsights.dllfile has the same version number as theMicrosoft.ApplicationInsights.EventSourceListener.dllfile that you added. The gateway currently uses version 2.14.0.
In your on-premises data gateway installation directory, check that theMicrosoft.ApplicationInsights.dllfile has the same version number as theMicrosoft.ApplicationInsights.EventSourceListener.dllfile that you added. The gateway currently uses version 2.14.0.
In theApplicationInsights.configfile, add yourApplication Insights instrumentation keyby uncommenting the line with the<InstrumentationKey></InstrumentationKey>element. Replace the placeholder,your-Application-Insights-instrumentation-key, with your key, for example:<?xml version="1.0" encoding="utf-8"?>
<ApplicationInsights schemaVersion="2014-05-30" xmlns="http://schemas.microsoft.com/ApplicationInsights/2013/Settings">
   <!-- Uncomment this element and insert your Application Insights key to receive ETW telemetry about your gateway <InstrumentationKey>*your-instrumentation-key-placeholder*</InstrumentationKey> -->
   <TelemetryModules>
      <Add Type="Microsoft.ApplicationInsights.Extensibility.Implementation.Tracing.DiagnosticsTelemetryModule, Microsoft.ApplicationInsights">
         <IsHeartbeatEnabled>false</IsHeartbeatEnabled>
      </Add>
      <Add Type="Microsoft.ApplicationInsights.EventSourceListener.EventSourceTelemetryModule, Microsoft.ApplicationInsights.EventSourceListener">
         <Sources>
            <Add Name="Microsoft-LobAdapter" Level="Verbose" />
         </Sources>
      </Add>
   </TelemetryModules>
</ApplicationInsights>
In theApplicationInsights.configfile, add yourApplication Insights instrumentation keyby uncommenting the line with the<InstrumentationKey></InstrumentationKey>element. Replace the placeholder,your-Application-Insights-instrumentation-key, with your key, for example:
<InstrumentationKey></InstrumentationKey>
<?xml version="1.0" encoding="utf-8"?>
<ApplicationInsights schemaVersion="2014-05-30" xmlns="http://schemas.microsoft.com/ApplicationInsights/2013/Settings">
   <!-- Uncomment this element and insert your Application Insights key to receive ETW telemetry about your gateway <InstrumentationKey>*your-instrumentation-key-placeholder*</InstrumentationKey> -->
   <TelemetryModules>
      <Add Type="Microsoft.ApplicationInsights.Extensibility.Implementation.Tracing.DiagnosticsTelemetryModule, Microsoft.ApplicationInsights">
         <IsHeartbeatEnabled>false</IsHeartbeatEnabled>
      </Add>
      <Add Type="Microsoft.ApplicationInsights.EventSourceListener.EventSourceTelemetryModule, Microsoft.ApplicationInsights.EventSourceListener">
         <Sources>
            <Add Name="Microsoft-LobAdapter" Level="Verbose" />
         </Sources>
      </Add>
   </TelemetryModules>
</ApplicationInsights>
<?xml version="1.0" encoding="utf-8"?>
<ApplicationInsights schemaVersion="2014-05-30" xmlns="http://schemas.microsoft.com/ApplicationInsights/2013/Settings">
   <!-- Uncomment this element and insert your Application Insights key to receive ETW telemetry about your gateway <InstrumentationKey>*your-instrumentation-key-placeholder*</InstrumentationKey> -->
   <TelemetryModules>
      <Add Type="Microsoft.ApplicationInsights.Extensibility.Implementation.Tracing.DiagnosticsTelemetryModule, Microsoft.ApplicationInsights">
         <IsHeartbeatEnabled>false</IsHeartbeatEnabled>
      </Add>
      <Add Type="Microsoft.ApplicationInsights.EventSourceListener.EventSourceTelemetryModule, Microsoft.ApplicationInsights.EventSourceListener">
         <Sources>
            <Add Name="Microsoft-LobAdapter" Level="Verbose" />
         </Sources>
      </Add>
   </TelemetryModules>
</ApplicationInsights>
In theApplicationInsights.configfile, you can change the required tracesLevelvalue for your SAP connector operations, per your requirements, for example:<Addâ¯Type="Microsoft.ApplicationInsights.EventSourceListener.EventSourceTelemetryModule,â¯Microsoft.ApplicationInsights.EventSourceListener">
   <Sources>
      <Addâ¯Name="Microsoft-LobAdapter"â¯Level="Verbose"â¯/>
   </Sources>
</Add>For more information, review the following documentation:Levelvalues:EventLevel EnumEventSource trackingEventSource events
In theApplicationInsights.configfile, you can change the required tracesLevelvalue for your SAP connector operations, per your requirements, for example:
Level
<Addâ¯Type="Microsoft.ApplicationInsights.EventSourceListener.EventSourceTelemetryModule,â¯Microsoft.ApplicationInsights.EventSourceListener">
   <Sources>
      <Addâ¯Name="Microsoft-LobAdapter"â¯Level="Verbose"â¯/>
   </Sources>
</Add>
<Addâ¯Type="Microsoft.ApplicationInsights.EventSourceListener.EventSourceTelemetryModule,â¯Microsoft.ApplicationInsights.EventSourceListener">
   <Sources>
      <Addâ¯Name="Microsoft-LobAdapter"â¯Level="Verbose"â¯/>
   </Sources>
</Add>
For more information, review the following documentation:
Levelvalues:EventLevel Enum
Levelvalues:EventLevel Enum
Level
EventSource tracking
EventSource tracking
EventSource events
EventSource events
After you apply your changes, restart the on-premises data gateway service.
After you apply your changes, restart the on-premises data gateway service.
Review metrics in Application Insights
After your SAP operations run in your logic app workflow, you can review the telemetry that was sent to Application Insights.
In the Azure portal, open your Application Insights resource.
In the Azure portal, open your Application Insights resource.
On the resource menu, underMonitoring, selectLogs.The following screenshot shows the Azure portal where the Application Insights resource has theLogspage open:
On the resource menu, underMonitoring, selectLogs.
The following screenshot shows the Azure portal where the Application Insights resource has theLogspage open:

On theLogspage, you can create aqueryby using theKusto Query Language (KQL)based on your specific requirements.You can use a query pattern similar to the following example query:customMetrics
| extend DestinationName = tostring(customDimensions["DestinationName"])
| extend MetricType = tostring(customDimensions["MetricType"])
| where customDimensions contains "RfcDestinationMonitor"
| where name contains "MaxUsedCount"
On theLogspage, you can create aqueryby using theKusto Query Language (KQL)based on your specific requirements.
You can use a query pattern similar to the following example query:
customMetrics
| extend DestinationName = tostring(customDimensions["DestinationName"])
| extend MetricType = tostring(customDimensions["MetricType"])
| where customDimensions contains "RfcDestinationMonitor"
| where name contains "MaxUsedCount"
customMetrics
| extend DestinationName = tostring(customDimensions["DestinationName"])
| extend MetricType = tostring(customDimensions["MetricType"])
| where customDimensions contains "RfcDestinationMonitor"
| where name contains "MaxUsedCount"
After you run your query, review the results.The following screenshot shows the example query's metrics results table:ColumnDescriptionMaxUsedCount"The maximal number of client connections that were simultaneously used by the monitored destination." as described in theSAP NCo documentation. You can use this value to understand the number of simultaneously open connections.valueCountShows2for each reading because metrics are generated at 30-second intervals. Application Insights aggregates these metrics by the minute.DestinationNameContains a character string that is a Microsoft SAP Adapter internal name.To better understand this Remote Function Call (RFC) destination, use this value withtraces, for example:customMetrics
| extend DestinationName = tostring(customDimensions["DestinationName"])
| join kind=inner (traces
   | extend DestinationName = tostring(customDimensions["DestinationName"]),
   AppServerHost = tostring(customDimensions["AppServerHost"]),
   SncMode = tostring(customDimensions["SncMode"]),
   SapClient = tostring(customDimensions["Client"])
   | where customDimensions contains "RfcDestinationMonitor"
   )
   on DestinationName , $left.DestinationName == $right.DestinationName
| where customDimensions contains "RfcDestinationMonitor"
| where name contains "MaxUsedCount"
| project AppServerHost, SncMode, SapClient, name, valueCount, valueSum, valueMin, valueMax
After you run your query, review the results.
The following screenshot shows the example query's metrics results table:

To better understand this Remote Function Call (RFC) destination, use this value withtraces, for example:
traces
customMetrics
| extend DestinationName = tostring(customDimensions["DestinationName"])
| join kind=inner (traces
   | extend DestinationName = tostring(customDimensions["DestinationName"]),
   AppServerHost = tostring(customDimensions["AppServerHost"]),
   SncMode = tostring(customDimensions["SncMode"]),
   SapClient = tostring(customDimensions["Client"])
   | where customDimensions contains "RfcDestinationMonitor"
   )
   on DestinationName , $left.DestinationName == $right.DestinationName
| where customDimensions contains "RfcDestinationMonitor"
| where name contains "MaxUsedCount"
| project AppServerHost, SncMode, SapClient, name, valueCount, valueSum, valueMin, valueMax
customMetrics
| extend DestinationName = tostring(customDimensions["DestinationName"])
| join kind=inner (traces
   | extend DestinationName = tostring(customDimensions["DestinationName"]),
   AppServerHost = tostring(customDimensions["AppServerHost"]),
   SncMode = tostring(customDimensions["SncMode"]),
   SapClient = tostring(customDimensions["Client"])
   | where customDimensions contains "RfcDestinationMonitor"
   )
   on DestinationName , $left.DestinationName == $right.DestinationName
| where customDimensions contains "RfcDestinationMonitor"
| where name contains "MaxUsedCount"
| project AppServerHost, SncMode, SapClient, name, valueCount, valueSum, valueMin, valueMax
You can also create metric charts or alerts by using those capabilities in Application Insights, for example:

Traces from Microsoft SAP Adapter
You can use traces sent from Microsoft SAP Adapter for issue post-analysis and to find any existing internal system errors that might or might not surface from SAP connector operations. These traces havemessageset to"n\a"because they come from an earlier event source framework that predates Application Insights, for example:
message
"n\a"
traces
| where message == "n/a"
| where severityLevel > 0
| extend ActivityId = tostring(customDimensions["ActivityId"])
| extend fullMessage = tostring(customDimensions["fullMessage"])
| extend shortMessage = tostring(customDimensions["shortMessage"])
| where ActivityId contains "8ad5952b-371e-4d80-b355-34e28df9b5d1"
traces
| where message == "n/a"
| where severityLevel > 0
| extend ActivityId = tostring(customDimensions["ActivityId"])
| extend fullMessage = tostring(customDimensions["fullMessage"])
| extend shortMessage = tostring(customDimensions["shortMessage"])
| where ActivityId contains "8ad5952b-371e-4d80-b355-34e28df9b5d1"
The following screenshot shows the example query's traces results table:

Related content
Create example workflows for common SAP scenarios
Feedback
Was this page helpful?
Additional resources