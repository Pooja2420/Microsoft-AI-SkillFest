Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Remediate non-compliant resources with Azure Policy
Article
2025-03-04
15 contributors
In this article
Resources that are non-compliant to policies withdeployIfNotExistsormodifyeffects can be put into a  compliant state throughRemediation. Remediation is accomplished throughremediation tasksthat deploy thedeployIfNotExiststemplate or themodifyoperations of the assigned policy on your existing resources and subscriptions, whether that assignment is on a management group, subscription, resource group, or individual resource. This article shows the steps needed to understand and accomplish remediation with Azure Policy.
deployIfNotExists
modify
deployIfNotExists
modify
How remediation access control works
When Azure Policy starts a template deployment when evaluatingdeployIfNotExistspolicies or modifies a resource when evaluatingmodifypolicies, it does so using amanaged identityassociated with the policy assignment. Note that while the assignment's identity is used for resource deployment or modification, it is not used for evaluation of the policy definition and its existence condition. Policy evalutation uses the identity of the caller that initiated the API request.
deployIfNotExists
modify
Policy assignments use managed identities for Azure resource authorization during remediation. You can use either a system-assigned managed identity created by the policy service or a user-assigned identity provided by the user. The managed identity needs to be assigned the minimum Azure role-based access control (Azure RBAC) role required to remediate resources. If the managed identity is missing roles, an error is displayed in the portal during the assignment of the policy or an initiative. When you use the portal, Azure Policy automatically grants the managed identity the listed roles once assignment starts. When you use an Azure software development kit (SDK), the roles must manually be granted to the managed identity. Thelocationof the managed identity doesn't affect its operation with Azure Policy.
Note
Changing a policy definition does not automatically update the assignment or the associated managed identity.
Remediation security can be configured through the following steps:
Configure the policy definition
Configure the managed identity
Grant permissions to the managed identity through defined roles
Create a remediation task
Configure the policy definition
As a prerequisite, the policy definition must define the roles thatdeployIfNotExistsandmodifyneed to successfully deploy the content of the included template. No action is required for a built-in policy definition because these roles are prepopulated. For a custom policy definition, under thedetailsproperty, add aroleDefinitionIdsproperty. This property is an array of strings that match roles in your environment. For a full example, seedeployIfNotExistsormodify.
deployIfNotExists
modify
details
roleDefinitionIds
"details": {
    ...
    "roleDefinitionIds": [
    "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/roleDefinitions/{roleGUID}",
    "/providers/Microsoft.Authorization/roleDefinitions/{builtinroleGUID}"
  ]
}
"details": {
    ...
    "roleDefinitionIds": [
    "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/roleDefinitions/{roleGUID}",
    "/providers/Microsoft.Authorization/roleDefinitions/{builtinroleGUID}"
  ]
}
TheroleDefinitionIdsproperty uses the full resource identifier and doesn't take the shortroleNameof the role. To get the ID for the Contributor role in your environment, use the following Azure CLI code:
roleDefinitionIds
roleName
az role definition list --name "Contributor"
az role definition list --name "Contributor"
Important
Permissions should be restricted to the smallest possible set when definingroleDefinitionIdswithin a policy definition or assigning permissions to a managed identity manually. Seemanaged identity best practice recommendationsfor more best practices.
roleDefinitionIds
Configure the managed identity
Each Azure Policy assignment can be associated with only one managed identity. However, the managed identity can be assigned multiple roles. Configuration occurs in two steps: first create either a system-assigned or user-assigned managed identity, then grant it the necessary roles.
Note
When creating a managed identity through the portal, roles will be granted automatically to the managed identity. IfroleDefinitionIdsare later edited in the policy definition, the new permissions must be manually granted, even in the portal.
roleDefinitionIds
Create the managed identity
Portal
PowerShell
Azure CLI
When you create an assignment using the portal, Azure Policy can generate a system-assigned managed identity and grant it the roles defined in the policy definition'sroleDefinitionIds. Alternatively, you can specify a user-assigned managed identity that receives the same role assignment.
roleDefinitionIds

To set a system-assigned managed identity in the portal:
On theRemediationtab of the create/edit assignment view, underTypes of Managed Identity, ensure thatSystem assigned managed identityis selected.
On theRemediationtab of the create/edit assignment view, underTypes of Managed Identity, ensure thatSystem assigned managed identityis selected.
Specify the location at which the managed identity is to be located.
Specify the location at which the managed identity is to be located.
Don't assign a scope for system-assigned managed identity because the scope is inherited from the assignment scope.
Don't assign a scope for system-assigned managed identity because the scope is inherited from the assignment scope.
To set a user-assigned managed identity in the portal:
On theRemediationtab of the create/edit assignment view, underTypes of Managed Identity, ensure thatUser assigned managed identityis selected.
On theRemediationtab of the create/edit assignment view, underTypes of Managed Identity, ensure thatUser assigned managed identityis selected.
Specify the scope where the managed identity is hosted. The scope of the managed identity doesn't have to equate to the scope of the assignment, but it must be in the same tenant.
Specify the scope where the managed identity is hosted. The scope of the managed identity doesn't have to equate to the scope of the assignment, but it must be in the same tenant.
UnderExisting user assigned identities, select the managed identity.
UnderExisting user assigned identities, select the managed identity.
To create an identity during the assignment of the policy,Locationmust be defined andIdentityused.
The following example gets the definition of the built-in policyDeploy SQL DB transparent data encryption, sets the target resource group, and then creates the assignment using asystem assignedmanaged identity.
# Login first with Connect-AzAccount if not using Cloud Shell

# Get the built-in "Deploy SQL DB transparent data encryption" policy definition
$policyDef = Get-AzPolicyDefinition -Id '/providers/Microsoft.Authorization/policyDefinitions/86a912f6-9a06-4e26-b447-11b16ba8659f'

# Get the reference to the resource group
$resourceGroup = Get-AzResourceGroup -Name 'MyResourceGroup'

# Create the assignment using the -Location and -Identity properties
$assignment = New-AzPolicyAssignment -Name 'sqlDbTDE' -DisplayName 'Deploy SQL DB transparent data encryption' -Scope $resourceGroup.ResourceId -PolicyDefinition $policyDef -Location 'westus' -IdentityType "SystemAssigned"
# Login first with Connect-AzAccount if not using Cloud Shell

# Get the built-in "Deploy SQL DB transparent data encryption" policy definition
$policyDef = Get-AzPolicyDefinition -Id '/providers/Microsoft.Authorization/policyDefinitions/86a912f6-9a06-4e26-b447-11b16ba8659f'

# Get the reference to the resource group
$resourceGroup = Get-AzResourceGroup -Name 'MyResourceGroup'

# Create the assignment using the -Location and -Identity properties
$assignment = New-AzPolicyAssignment -Name 'sqlDbTDE' -DisplayName 'Deploy SQL DB transparent data encryption' -Scope $resourceGroup.ResourceId -PolicyDefinition $policyDef -Location 'westus' -IdentityType "SystemAssigned"
The following example gets the definition of the built-in policyDeploy
SQL DB transparent data encryption, sets the target resource group, and then creates the
assignment using anuser assignedmanaged identity.
# Login first with Connect-AzAccount if not using Cloud Shell

# Get the built-in "Deploy SQL DB transparent data encryption" policy definition
$policyDef = Get-AzPolicyDefinition -Id '/providers/Microsoft.Authorization/policyDefinitions/86a912f6-9a06-4e26-b447-11b16ba8659f'

# Get the reference to the resource group
$resourceGroup = Get-AzResourceGroup -Name 'MyResourceGroup'

# Get the existing user assigned managed identity ID
$userassignedidentity = Get-AzUserAssignedIdentity -ResourceGroupName $rgname -Name $userassignedidentityname
$userassignedidentityid = $userassignedidentity.Id

# Create the assignment using the -Location and -Identity properties
$assignment = New-AzPolicyAssignment -Name 'sqlDbTDE' -DisplayName 'Deploy SQL DB transparent data encryption' -Scope $resourceGroup.ResourceId -PolicyDefinition $policyDef -Location 'westus' -IdentityType "UserAssigned" -IdentityId $userassignedidentityid
# Login first with Connect-AzAccount if not using Cloud Shell

# Get the built-in "Deploy SQL DB transparent data encryption" policy definition
$policyDef = Get-AzPolicyDefinition -Id '/providers/Microsoft.Authorization/policyDefinitions/86a912f6-9a06-4e26-b447-11b16ba8659f'

# Get the reference to the resource group
$resourceGroup = Get-AzResourceGroup -Name 'MyResourceGroup'

# Get the existing user assigned managed identity ID
$userassignedidentity = Get-AzUserAssignedIdentity -ResourceGroupName $rgname -Name $userassignedidentityname
$userassignedidentityid = $userassignedidentity.Id

# Create the assignment using the -Location and -Identity properties
$assignment = New-AzPolicyAssignment -Name 'sqlDbTDE' -DisplayName 'Deploy SQL DB transparent data encryption' -Scope $resourceGroup.ResourceId -PolicyDefinition $policyDef -Location 'westus' -IdentityType "UserAssigned" -IdentityId $userassignedidentityid
The$assignmentvariable now contains the principal ID of the managed identity along with the standard values returned when creating a policy assignment. It can be accessed through$assignment.Identity.PrincipalIdfor system-assigned managed identities and$assignment.Identity.UserAssignedIdentities[$userassignedidentityid].PrincipalIdfor user-assigned managed identities.
$assignment
$assignment.Identity.PrincipalId
$assignment.Identity.UserAssignedIdentities[$userassignedidentityid].PrincipalId
To create an identity during the assignment of the policy, useaz policy assignment createcommands with the parameters--location,--mi-system-assigned,--mi-user-assigned, and--identity-scopedepending on whether the managed identity should be system-assigned or user-assigned.
--location
--mi-system-assigned
--mi-user-assigned
--identity-scope
To add a system-assigned identity or a user-assigned identity to a policy assignment, follow exampleaz policy assignment identity assigncommands.
Grant permissions to the managed identity through defined roles
Important
If the managed identity does not have the permissions needed to execute the required remediation task, it will be granted permissionsautomaticallyonly through the portal. You may skip this step if creating a managed identity through the portal.
For all other methods, the assignment's managed identity must be manually granted access through the addition of roles, or else the remediation deployment will fail.
Example scenarios that require manual permissions:
If the assignment is created through an Azure software development kit (SDK)
If a resource modified bydeployIfNotExistsormodifyis outside the scope of the policy
assignment
deployIfNotExists
modify
If the template accesses properties on resources outside the scope of the policy assignment
Portal
PowerShell
Azure CLI
There are two ways to grant an assignment's managed identity the defined roles using the portal: by usingAccess control (IAM)or by editing the policy or initiative assignment and selectingSave.
To add a role to the assignment's managed identity, follow these steps:
Launch the Azure Policy service in the Azure portal by selectingAll services, then searching for and selectingPolicy.
Launch the Azure Policy service in the Azure portal by selectingAll services, then searching for and selectingPolicy.
SelectAssignmentson the left side of the Azure Policy page.
SelectAssignmentson the left side of the Azure Policy page.
Locate the assignment that has a managed identity and select the name.
Locate the assignment that has a managed identity and select the name.
Find theAssignment IDproperty on the edit page. The assignment ID look like the following example:/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Authorization/policyAssignments/2802056bfc094dfb95d4d7a5The name of the managed identity is the last portion of the assignment resource ID, which is2802056bfc094dfb95d4d7a5in this example. Copy this portion of the assignment resource ID.
Find theAssignment IDproperty on the edit page. The assignment ID look like the following example:
/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Authorization/policyAssignments/2802056bfc094dfb95d4d7a5
/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Authorization/policyAssignments/2802056bfc094dfb95d4d7a5
The name of the managed identity is the last portion of the assignment resource ID, which is2802056bfc094dfb95d4d7a5in this example. Copy this portion of the assignment resource ID.
2802056bfc094dfb95d4d7a5
Navigate to the resource or the resources parent container (resource group, subscription, management group) that needs the role definition manually added.
Navigate to the resource or the resources parent container (resource group, subscription, management group) that needs the role definition manually added.
Select theAccess control (IAM)link in the resources page and then select+ Add role assignmentat the top of the access control page.
Select theAccess control (IAM)link in the resources page and then select+ Add role assignmentat the top of the access control page.
Select the appropriate role that matches aroleDefinitionIdsfrom the policy definition. LeaveAssign access toset to the default of 'user, group, or application'. In theSelectbox, paste or type the portion of the assignment resource ID located earlier. Once the search completes, select the object with the same name to select ID and selectSave.
Select the appropriate role that matches aroleDefinitionIdsfrom the policy definition. LeaveAssign access toset to the default of 'user, group, or application'. In theSelectbox, paste or type the portion of the assignment resource ID located earlier. Once the search completes, select the object with the same name to select ID and selectSave.
roleDefinitionIds
The new managed identity must complete replication through Microsoft Entra ID before it can be granted the needed roles. Once replication is complete, the following examples iterate the policy definition in$policyDeffor theroleDefinitionIdsand usesNew-AzRoleAssignmentto grant the new managed identity the roles.
$policyDef
roleDefinitionIds
Specifically, the first example shows you how to grant roles at the policy scope. The second example demonstrates how to grant roles at the initiative (policy set) scope.
###################################################
# Grant roles to managed identity at policy scope #
###################################################

# Use the $policyDef to get to the roleDefinitionIds array
$roleDefinitionIds = $policyDef.Properties.policyRule.then.details.roleDefinitionIds

if ($roleDefinitionIds.Count -gt 0)
{
    $roleDefinitionIds | ForEach-Object {
        $roleDefId = $_.Split("/") | Select-Object -Last 1
        New-AzRoleAssignment -Scope $resourceGroup.ResourceId -ObjectId $assignment.Identity.PrincipalId
        -RoleDefinitionId $roleDefId
    }
}

#######################################################
# Grant roles to managed identity at initiative scope #
#######################################################

#If the policy had no managed identity in its logic, then no impact. If there is a managed identity
used for enforcement, replicate it on the new assignment.
$getNewInitiativeAssignment = Get-AzPolicyAssignment -Name $newInitiativeDefinition.Name

#Create an array to store role definition's IDs used by policies inside the initiative.
$InitiativeRoleDefinitionIds = @();

#Loop through the policy definitions inside the initiative and gather their role definition IDs
foreach ($policyDefinitionIdInsideInitiative in $InitiativeDefinition.Properties.PolicyDefinitions.policyDefinitionId) {
  $policyDef = Get-AzPolicyDefinition -Id $policyDefinitionIdInsideInitiative
  $roleDefinitionIds = $policyDef.Properties.PolicyRule.then.details.roleDefinitionIds
  $InitiativeRoleDefinitionIds += $roleDefinitionIds
}

#Create the role assignments used by the initiative assignment at the subscription scope.
if ($InitiativeRoleDefinitionIds.Count -gt 0) {
  $InitiativeRoleDefinitionIds | Sort-Object -Unique | ForEach-Object {
    $roleDefId = $_.Split("/") | Select-Object -Last 1
    New-AzRoleAssignment -Scope "/subscriptions/$($subscription)" -ObjectId $getNewInitiativeAssignment.Identity.PrincipalId
    -RoleDefinitionId $roleDefId
  }
}
###################################################
# Grant roles to managed identity at policy scope #
###################################################

# Use the $policyDef to get to the roleDefinitionIds array
$roleDefinitionIds = $policyDef.Properties.policyRule.then.details.roleDefinitionIds

if ($roleDefinitionIds.Count -gt 0)
{
    $roleDefinitionIds | ForEach-Object {
        $roleDefId = $_.Split("/") | Select-Object -Last 1
        New-AzRoleAssignment -Scope $resourceGroup.ResourceId -ObjectId $assignment.Identity.PrincipalId
        -RoleDefinitionId $roleDefId
    }
}

#######################################################
# Grant roles to managed identity at initiative scope #
#######################################################

#If the policy had no managed identity in its logic, then no impact. If there is a managed identity
used for enforcement, replicate it on the new assignment.
$getNewInitiativeAssignment = Get-AzPolicyAssignment -Name $newInitiativeDefinition.Name

#Create an array to store role definition's IDs used by policies inside the initiative.
$InitiativeRoleDefinitionIds = @();

#Loop through the policy definitions inside the initiative and gather their role definition IDs
foreach ($policyDefinitionIdInsideInitiative in $InitiativeDefinition.Properties.PolicyDefinitions.policyDefinitionId) {
  $policyDef = Get-AzPolicyDefinition -Id $policyDefinitionIdInsideInitiative
  $roleDefinitionIds = $policyDef.Properties.PolicyRule.then.details.roleDefinitionIds
  $InitiativeRoleDefinitionIds += $roleDefinitionIds
}

#Create the role assignments used by the initiative assignment at the subscription scope.
if ($InitiativeRoleDefinitionIds.Count -gt 0) {
  $InitiativeRoleDefinitionIds | Sort-Object -Unique | ForEach-Object {
    $roleDefId = $_.Split("/") | Select-Object -Last 1
    New-AzRoleAssignment -Scope "/subscriptions/$($subscription)" -ObjectId $getNewInitiativeAssignment.Identity.PrincipalId
    -RoleDefinitionId $roleDefId
  }
}
The new managed identity must complete replication through Microsoft Entra ID before it can be granted the needed roles. Once replication is complete, the roles specified in the policy definition'sroleDefinitionIdsshould be granted to the managed identity.
roleDefinitionIds
Access the roles specified in the policy definition using theaz policy definition showcommand, then iterate over eachroleDefinitionIdsto create the role assignment using theaz role assignment createcommand.
roleDefinitionIds
Create a remediation task
Portal
PowerShell
Azure CLI
Launch the Azure Policy service in the Azure portal by selectingAll services, then searching for and selectingPolicy.

Step 1: Initiate remediation task creation
There are three ways to create a remediation task through the portal.
SelectRemediationon the left side of the Azure Policy page.
SelectRemediationon the left side of the Azure Policy page.

AlldeployIfNotExistsandmodifypolicy assignments are shown on thePolicies to remediatetab. Select one with resources that are non-compliant to open theNew remediation taskpage.
AlldeployIfNotExistsandmodifypolicy assignments are shown on thePolicies to remediatetab. Select one with resources that are non-compliant to open theNew remediation taskpage.
deployIfNotExists
modify
Follow steps tospecify remediation task details.
Follow steps tospecify remediation task details.
SelectComplianceon the left side of the Azure Policy page.
SelectComplianceon the left side of the Azure Policy page.
Select a non-compliant policy or initiative assignment containingdeployIfNotExistsormodifyeffects.
Select a non-compliant policy or initiative assignment containingdeployIfNotExistsormodifyeffects.
deployIfNotExists
modify
Select theCreate Remediation Taskbutton at the top of the page to open theNew remediation taskpage.
Select theCreate Remediation Taskbutton at the top of the page to open theNew remediation taskpage.
Follow steps tospecify remediation task details.
Follow steps tospecify remediation task details.
If the policy or initiative definition to assign has adeployIfNotExistsor amodifyeffect, theRemediationtab of the wizard offers aCreate a remediation taskoption, which creates a remediation task at the same time as the policy assignment.
deployIfNotExists
modify
Note
This is the most streamlined approach for creating a remediation task and is supported for policies assigned on asubscription. For policies assigned on amanagement group, remediation tasks should be created usingOption 1orOption 2after evaluation has determined resource compliance.
From the assignment wizard in the portal, navigate to theRemediationtab. Select the check box forCreate a remediation task.
From the assignment wizard in the portal, navigate to theRemediationtab. Select the check box forCreate a remediation task.
If the remediation task is initiated from an initiative assignment, select the policy to remediate from the drop-down.
If the remediation task is initiated from an initiative assignment, select the policy to remediate from the drop-down.
Configure themanaged identityand fill out the rest of the wizard. The remediation task is created when the assignment is created.
Configure themanaged identityand fill out the rest of the wizard. The remediation task is created when the assignment is created.
Step 2: Specify remediation task details
This step is only applicable when usingOption 1orOption 2to initiate remediation task creation.
If the remediation task is initiated from an initiative assignment, select the policy to remediate from the drop-down. OnedeployIfNotExistsormodifypolicy can be remediated through a single Remediation task at a time.
If the remediation task is initiated from an initiative assignment, select the policy to remediate from the drop-down. OnedeployIfNotExistsormodifypolicy can be remediated through a single Remediation task at a time.
deployIfNotExists
modify
Optionally modify remediation settings on the page. For information on what each setting controls, seeremediation task structure.
Optionally modify remediation settings on the page. For information on what each setting controls, seeremediation task structure.
On the same page, filter the resources to remediate by using theScopeellipses to pick child resources from where the policy is assigned (including down to the individual resource objects). Additionally, use theLocationsdropdown list to further filter the resources.
On the same page, filter the resources to remediate by using theScopeellipses to pick child resources from where the policy is assigned (including down to the individual resource objects). Additionally, use theLocationsdropdown list to further filter the resources.

Begin the remediation task after the resources are filtered by selectingRemediate. The policy compliance page opens to theRemediation taskstab to show the state of the tasks progress. Deployments created by the remediation task begin right away.
Begin the remediation task after the resources are filtered by selectingRemediate. The policy compliance page opens to theRemediation taskstab to show the state of the tasks progress. Deployments created by the remediation task begin right away.

Step 3: Track remediation task progress
Navigate to theRemediation taskstab on theRemediationpage. Select a remediation task to view details about the filtering used, the current status, and a list of resources being remediated.
Navigate to theRemediation taskstab on theRemediationpage. Select a remediation task to view details about the filtering used, the current status, and a list of resources being remediated.
From theRemediation taskdetails page, right-click on a resource to view either the remediation task's deployment or the resource. At the end of the row, selectRelated eventsto see details such as an error message.
From theRemediation taskdetails page, right-click on a resource to view either the remediation task's deployment or the resource. At the end of the row, selectRelated eventsto see details such as an error message.

Resources deployed through aremediation taskare added to theDeployed Resourcestab on the policy assignment details page.
To create aremediation taskwith Azure PowerShell, use theStart-AzPolicyRemediationcommands. Replace{subscriptionId}with your subscription ID and{myAssignmentId}with yourdeployIfNotExistsormodifypolicy assignment ID.
Start-AzPolicyRemediation
{subscriptionId}
{myAssignmentId}
deployIfNotExists
modify
# Login first with Connect-AzAccount if not using Cloud Shell

# Create a remediation for a specific assignment
Start-AzPolicyRemediation -Name 'myRemediation' -PolicyAssignmentId '/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policyAssignments/{myAssignmentId}'
# Login first with Connect-AzAccount if not using Cloud Shell

# Create a remediation for a specific assignment
Start-AzPolicyRemediation -Name 'myRemediation' -PolicyAssignmentId '/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policyAssignments/{myAssignmentId}'
You might also choose to adjust remediation settings through these optional parameters:
-FailureThreshold- Used to specify whether the remediation task should fail if the percentage of failures exceeds the given threshold. Provided as a number between 0 to 100. By default, the failure threshold is 100%.
-FailureThreshold
-ResourceCount- Determines how many non-compliant resources to remediate in a given remediation task. The default value is 500 (the previous limit). The maximum number is 50,000 resources.
-ResourceCount
-ParallelDeploymentCount- Determines how many resources to remediate at the same time. The allowed values are 1 to 30 resources at a time. The default value is 10.
-ParallelDeploymentCount
For more remediation cmdlets and examples, see theAz.PolicyInsightsmodule.
To create aremediation taskwith Azure CLI, use theaz policy remediationcommands. Replace{subscriptionId}with your subscription ID and{myAssignmentId}with yourdeployIfNotExistsormodifypolicy assignment ID.
az policy remediation
{subscriptionId}
{myAssignmentId}
deployIfNotExists
modify
# Login first with az login if not using Cloud Shell

# Create a remediation for a specific assignment
az policy remediation create --name myRemediation --policy-assignment '/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policyAssignments/{myAssignmentId}'
# Login first with az login if not using Cloud Shell

# Create a remediation for a specific assignment
az policy remediation create --name myRemediation --policy-assignment '/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policyAssignments/{myAssignmentId}'
For more remediation commands and examples, see theaz policy remediationcommands.
Next steps
Review examples atAzure Policy samples.
Review theAzure Policy definition structure.
ReviewUnderstanding policy effects.
Understand how toprogrammatically create policies.
Learn how toget compliance data.
Review what a management group is withOrganize your resources with Azure management groups.
Feedback
Was this page helpful?
Additional resources