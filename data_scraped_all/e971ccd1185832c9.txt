Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Tutorial: Configure active geo-replication and failover (Azure SQL Database)
Article
2024-10-09
21 contributors
In this article
Applies to:Azure SQL Database
This article shows you how to configureactive geo-replicationand initiate a failover for Azure SQL Database by using theAzure portal, PowerShell, or the Azure CLI.
Active geo-replication is configured per database. To fail over a group of databases, or if your application requires a stable connection endpoint, considerFailover groupsinstead.
Prerequisites
To complete this tutorial, you need a single Azure SQL Database. To learn how to create a single database with Azure portal, Azure CLI, or PowerShell, seeQuickstart: Create a single database - Azure SQL Database.
To complete this tutorial, you need a single Azure SQL Database. To learn how to create a single database with Azure portal, Azure CLI, or PowerShell, seeQuickstart: Create a single database - Azure SQL Database.
You can use the Azure portal to set up Active geo replication across subscriptions as long as both the subscriptions are in the same Microsoft Entra ID tenant.To create a geo-secondary replica in a subscriptiondifferentfrom the subscription of the primary in a different Microsoft Entra ID tenant, usethe geo-secondary across subscriptions and Microsoft Entra ID tenant T-SQL tutorial.Cross-subscription geo-replication operations including setup and geo-failover are also supported usingDatabases Create or Update REST API.
You can use the Azure portal to set up Active geo replication across subscriptions as long as both the subscriptions are in the same Microsoft Entra ID tenant.
To create a geo-secondary replica in a subscriptiondifferentfrom the subscription of the primary in a different Microsoft Entra ID tenant, usethe geo-secondary across subscriptions and Microsoft Entra ID tenant T-SQL tutorial.
Cross-subscription geo-replication operations including setup and geo-failover are also supported usingDatabases Create or Update REST API.
Add a secondary database
The following steps create a new secondary database in a geo-replication partnership.
To add a secondary database, you must be the subscription owner or co-owner.
The secondary database has the same name as the primary database and has, by default, the same service tier and compute size. The secondary database can be a single database or a pooled database. For more information, seeDTU-based purchasing model overviewandvCore-based purchasing model.
After the secondary is created and seeded, data begins replicating from the primary database to the new secondary database.
If your secondary replica is usedonlyfor disaster recovery (DR), and doesn't have any read or write workloads, you can save on licensing costs by designating the database for standby when you configure a new active geo-replication relationship. For more information, seelicense-free standby replica.
Note
If the partner database already exists, (for example, as a result of terminating a previous geo-replication relationship) the command fails.
Portal
Azure CLI
PowerShell
In theAzure portal, browse to the database that you want to set up for geo-replication.
In theAzure portal, browse to the database that you want to set up for geo-replication.
On the SQL Database page, select your database, scroll toData management, selectReplicas, and then selectCreate replica.
On the SQL Database page, select your database, scroll toData management, selectReplicas, and then selectCreate replica.

Select your geo-secondary databaseSubscriptionandResource group.
Select your geo-secondary databaseSubscriptionandResource group.

Select or create the server for the secondary database, and configure theCompute + storageoptions if necessary. You can select any region for your secondary server, but we recommend thepaired region.Optionally, you can add a secondary database to an elastic pool. To create the secondary database in a pool, selectYesnext toWant to use SQL elastic pool?and select a pool on the target server. A pool must already exist on the target server. This workflow doesn't create a pool.
Select or create the server for the secondary database, and configure theCompute + storageoptions if necessary. You can select any region for your secondary server, but we recommend thepaired region.
Optionally, you can add a secondary database to an elastic pool. To create the secondary database in a pool, selectYesnext toWant to use SQL elastic pool?and select a pool on the target server. A pool must already exist on the target server. This workflow doesn't create a pool.
SelectReview + create, review the information, and then selectCreate.
SelectReview + create, review the information, and then selectCreate.
The secondary database is created and the deployment process begins.
The secondary database is created and the deployment process begins.

When the deployment is complete, the secondary database displays its status.
When the deployment is complete, the secondary database displays its status.

Return to the primary database page, and then selectReplicas. Your secondary database is listed underGeo replicas.
Return to the primary database page, and then selectReplicas. Your secondary database is listed underGeo replicas.

Select the database you want to set up for geo-replication. You need the following information:
Your original Azure SQL database name.
The Azure SQL server name.
Your resource group name.
The name of the server to create the new replica in.
Note
The secondary database must have the same service tier as the primary.
You can select any region for your secondary server, but we recommend thepaired region.
Run theaz sql db replica createcommand.
az sql db replica create --resource-group ContosoHotel --server contosoeast --name guestlist --partner-server contosowest --family Gen5 --capacity 2 --secondary-type Geo
az sql db replica create --resource-group ContosoHotel --server contosoeast --name guestlist --partner-server contosowest --family Gen5 --capacity 2 --secondary-type Geo
Optionally, you can add a secondary database to an elastic pool. To create the secondary database in a pool, use the--elastic-poolparameter. A pool must already exist on the target server. This workflow doesn't create a pool.
--elastic-pool
The secondary database is created and the deployment process begins.
When the deployment is complete, you can check the status of the secondary database by running theaz sql db replica list-linkscommand:
az sql db replica list-links --name guestlist --resource-group ContosoHotel --server contosowest
az sql db replica list-links --name guestlist --resource-group ContosoHotel --server contosowest
Select the database you want to set up for geo-replication. You need the following information:
Your original Azure SQL database name.
The Azure SQL server name.
Your resource group name.
The name of the server to create the new replica in.
Note
The secondary database must have the same service tier as the primary.
You can select any region for your secondary server, but we recommend thepaired region.
As usual, begin your PowerShell session with the following cmdlets to connect your Azure account and set the subscription context:
Connect-AzAccount
$subscriptionid = <your subscription id here>
Set-AzContext -SubscriptionId $subscriptionid

$parameters = @{
    ResourceGroupName = 'PrimaryRG'
    ServerName = 'PrimaryServer'
    DatabaseName = 'TestDB'
    PartnerResourceGroupName = 'SecondaryRG'
    PartnerServerName = 'SecondaryServer'
    PartnerDatabaseName = 'TestDB'
}

New-AzSqlDatabaseSecondary @parameters
Connect-AzAccount
$subscriptionid = <your subscription id here>
Set-AzContext -SubscriptionId $subscriptionid

$parameters = @{
    ResourceGroupName = 'PrimaryRG'
    ServerName = 'PrimaryServer'
    DatabaseName = 'TestDB'
    PartnerResourceGroupName = 'SecondaryRG'
    PartnerServerName = 'SecondaryServer'
    PartnerDatabaseName = 'TestDB'
}

New-AzSqlDatabaseSecondary @parameters
When the deployment is complete, you can check the status of the secondary database by running theGet-AzSqlDatabaseReplicationLinkcommand:
Get-AzSqlDatabaseReplicationLink
$parameters = @{
    ResourceGroupName = 'PrimaryRG'
    ServerName = 'PrimaryServer'
    DatabaseName = 'TestDB'
    PartnerResourceGroupName = 'SecondaryRG'
}

Get-AzSqlDatabaseReplicationLink @parameters
$parameters = @{
    ResourceGroupName = 'PrimaryRG'
    ServerName = 'PrimaryServer'
    DatabaseName = 'TestDB'
    PartnerResourceGroupName = 'SecondaryRG'
}

Get-AzSqlDatabaseReplicationLink @parameters
Initiate a failover
The secondary database can be switched to become the primary.
Portal
Azure CLI
PowerShell
In theAzure portal, browse to the primary database in the geo-replication partnership.
In theAzure portal, browse to the primary database in the geo-replication partnership.
Scroll toData management, and then selectReplicas.
Scroll toData management, and then selectReplicas.
In theGeo replicaslist, select the database you want to become the new primary, select the ellipsis, and then selectForced failover.
In theGeo replicaslist, select the database you want to become the new primary, select the ellipsis, and then selectForced failover.

SelectYesto begin the failover.
SelectYesto begin the failover.
Run theaz sql db replica set-primarycommand.
az sql db replica set-primary --name guestlist --resource-group ContosoHotel --server contosowest
az sql db replica set-primary --name guestlist --resource-group ContosoHotel --server contosowest
Run the following command:
$parameters = @{
    ResourceGroupName = 'SecondaryRG'
    ServerName = 'SecondaryServer'
    DatabaseName = 'TestDB'
    PartnerResourceGroupName = 'PrimaryServer'
}

Set-AzSqlDatabaseSecondary @parameters -Failover
$parameters = @{
    ResourceGroupName = 'SecondaryRG'
    ServerName = 'SecondaryServer'
    DatabaseName = 'TestDB'
    PartnerResourceGroupName = 'PrimaryServer'
}

Set-AzSqlDatabaseSecondary @parameters -Failover
The command immediately switches the secondary database into the primary role. This process normally should complete within 30 seconds or less.
Both databases are unavailable, for up to 25 seconds, while the roles are switched. If the primary database has multiple secondary databases, the command automatically reconfigures the other secondaries to connect to the new primary. The entire operation should take less than a minute to complete under normal circumstances.
Remove secondary database
This operation permanently stops the replication to the secondary database, and changes the role of the secondary to a regular read-write database. If the connectivity to the secondary database is broken, the command succeeds but the secondary doesn't become read-write until after connectivity is restored.
Portal
Azure CLI
PowerShell
In theAzure portal, browse to the primary database in the geo-replication partnership.
SelectReplicas.
In theGeo replicaslist, select the database you want to remove from the geo-replication partnership, select the ellipsis, and then selectStop replication.
A confirmation window opens. SelectYesto remove the database from the geo-replication partnership. (Set it to a read-write database that isn't part of any replication.)
Run theaz sql db replica delete-linkcommand.
az sql db replica delete-link --name guestlist --resource-group ContosoHotel --server contosoeast --partner-server contosowest
az sql db replica delete-link --name guestlist --resource-group ContosoHotel --server contosoeast --partner-server contosowest
Confirm that you want to perform the operation.
Run the following command:
$parameters = @{
    ResourceGroupName = 'SecondaryRG'
    ServerName = 'SecondaryServer'
    DatabaseName = 'TestDB'
    PartnerResourceGroupName = 'PrimaryRG'
    PartnerServerName = 'PrimaryServer'
}
Remove-AzSqlDatabaseSecondary @parameters
$parameters = @{
    ResourceGroupName = 'SecondaryRG'
    ServerName = 'SecondaryServer'
    DatabaseName = 'TestDB'
    PartnerResourceGroupName = 'PrimaryRG'
    PartnerServerName = 'PrimaryServer'
}
Remove-AzSqlDatabaseSecondary @parameters
Cross-subscription geo-replication
To create a geo-secondary replica in a subscriptiondifferentfrom the subscription of the primary in thesameMicrosoft Entra tenant, you can use the Azure portal or the steps in this section.
To create a geo-secondary replica in a subscriptiondifferentfrom the subscription of the primary in a different Microsoft Entra tenant, you must use SQL authentication and T-SQL as described in the steps in this section.Microsoft Entra authentication for Azure SQLfor cross-subscription geo-replication isn't supported when a logical server is in a different Azure tenant
Add the IP address of the client machine executing the T-SQL commands in this example, to the server firewalls ofboththe primary and secondary servers. You can confirm that IP address by executing the following query while connected to the primary server from the same client machine.SELECT client_net_address
FROM sys.dm_exec_connections
WHERE session_id = @@SPID;For more information, seeAzure SQL Database and Azure Synapse IP firewall rules.
Add the IP address of the client machine executing the T-SQL commands in this example, to the server firewalls ofboththe primary and secondary servers. You can confirm that IP address by executing the following query while connected to the primary server from the same client machine.
SELECT client_net_address
FROM sys.dm_exec_connections
WHERE session_id = @@SPID;
SELECT client_net_address
FROM sys.dm_exec_connections
WHERE session_id = @@SPID;
For more information, seeAzure SQL Database and Azure Synapse IP firewall rules.
In themasterdatabase on theprimaryserver, create a SQL authentication login dedicated to active geo-replication setup. Adjust login name and password as needed.CREATE LOGIN geodrsetup
    WITH PASSWORD = 'ComplexPassword01';
In themasterdatabase on theprimaryserver, create a SQL authentication login dedicated to active geo-replication setup. Adjust login name and password as needed.
master
CREATE LOGIN geodrsetup
    WITH PASSWORD = 'ComplexPassword01';
CREATE LOGIN geodrsetup
    WITH PASSWORD = 'ComplexPassword01';
In the same database, create a user for the login, and add it to thedbmanagerrole:CREATE USER geodrsetup FOR LOGIN geodrsetup;

ALTER ROLE dbmanager ADD MEMBER geodrsetup;
In the same database, create a user for the login, and add it to thedbmanagerrole:
dbmanager
CREATE USER geodrsetup FOR LOGIN geodrsetup;

ALTER ROLE dbmanager ADD MEMBER geodrsetup;
CREATE USER geodrsetup FOR LOGIN geodrsetup;

ALTER ROLE dbmanager ADD MEMBER geodrsetup;
Take note of the SID value of the new login. Obtain the SID value using the following query.SELECT sid
FROM sys.sql_logins
WHERE name = 'geodrsetup';
Take note of the SID value of the new login. Obtain the SID value using the following query.
SELECT sid
FROM sys.sql_logins
WHERE name = 'geodrsetup';
SELECT sid
FROM sys.sql_logins
WHERE name = 'geodrsetup';
Connect to theprimarydatabase (not themasterdatabase), and create a user for the same login.CREATE USER geodrsetup FOR LOGIN geodrsetup;
Connect to theprimarydatabase (not themasterdatabase), and create a user for the same login.
master
CREATE USER geodrsetup FOR LOGIN geodrsetup;
CREATE USER geodrsetup FOR LOGIN geodrsetup;
In the same database, add the user to thedb_ownerrole.ALTER ROLE db_owner ADD MEMBER geodrsetup;
In the same database, add the user to thedb_ownerrole.
db_owner
ALTER ROLE db_owner ADD MEMBER geodrsetup;
ALTER ROLE db_owner ADD MEMBER geodrsetup;
In themasterdatabase on thesecondaryserver, create the same login as on the primary server, using the same name, password, and SID. Replace the hexadecimal SID value in the sample command below with the one obtained in Step 4.CREATE LOGIN geodrsetup
    WITH PASSWORD = 'ComplexPassword01', SID = 0x010600000000006400000000000000001C98F52B95D9C84BBBA8578FACE37C3E;
In themasterdatabase on thesecondaryserver, create the same login as on the primary server, using the same name, password, and SID. Replace the hexadecimal SID value in the sample command below with the one obtained in Step 4.
master
CREATE LOGIN geodrsetup
    WITH PASSWORD = 'ComplexPassword01', SID = 0x010600000000006400000000000000001C98F52B95D9C84BBBA8578FACE37C3E;
CREATE LOGIN geodrsetup
    WITH PASSWORD = 'ComplexPassword01', SID = 0x010600000000006400000000000000001C98F52B95D9C84BBBA8578FACE37C3E;
In the same database, create a user for the login, and add it to thedbmanagerrole.CREATE USER geodrsetup FOR LOGIN geodrsetup;

ALTER ROLE dbmanager ADD MEMBER geodrsetup;
In the same database, create a user for the login, and add it to thedbmanagerrole.
dbmanager
CREATE USER geodrsetup FOR LOGIN geodrsetup;

ALTER ROLE dbmanager ADD MEMBER geodrsetup;
CREATE USER geodrsetup FOR LOGIN geodrsetup;

ALTER ROLE dbmanager ADD MEMBER geodrsetup;
Connect to themasterdatabase on theprimaryserver using the newgeodrsetuplogin, and initiate geo-secondary creation on the secondary server. Adjust database name and secondary server name as needed. Once the command is executed, you can monitor geo-secondary creation by querying thesys.dm_geo_replication_link_statusview in theprimarydatabase, and thesys.dm_operation_statusview in themasterdatabase on theprimaryserver. The time needed to create a geo-secondary depends on the primary database size.alter database [dbrep] add secondary on server [servername];
Connect to themasterdatabase on theprimaryserver using the newgeodrsetuplogin, and initiate geo-secondary creation on the secondary server. Adjust database name and secondary server name as needed. Once the command is executed, you can monitor geo-secondary creation by querying thesys.dm_geo_replication_link_statusview in theprimarydatabase, and thesys.dm_operation_statusview in themasterdatabase on theprimaryserver. The time needed to create a geo-secondary depends on the primary database size.
master
geodrsetup
master
alter database [dbrep] add secondary on server [servername];
alter database [dbrep] add secondary on server [servername];
After the geo-secondary is successfully created, the users, logins, and firewall rules created by this procedure can be removed.
After the geo-secondary is successfully created, the users, logins, and firewall rules created by this procedure can be removed.
Related content
Active geo-replication
Failover groups overview & best practices (Azure SQL Database)
Overview of business continuity with Azure SQL Database
Configure a license-free standby replica for Azure SQL Database
Feedback
Was this page helpful?
Additional resources