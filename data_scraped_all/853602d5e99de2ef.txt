Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Quickstart: Route custom events to web endpoint with Azure CLI and Event Grid
Article
2025-01-22
21 contributors
In this article
In this article, you use the Azure CLI to create a custom topic in Azure Event Grid, subscribe to the custom topic, and trigger a sample event to view the result.
Typically, you send events to an endpoint that processes the event data and takes actions. However, to simplify this article, you send sample events to a web app that collects and displays the messages. When you're finished, you see that the event data has been sent to the web app as shown in the following image:

If you don't have anAzure subscription, create anAzure free accountbefore you begin.
Prerequisites
Use the Bash environment inAzure Cloud Shell. For more information, seeGet started with Azure Cloud Shell.
Use the Bash environment inAzure Cloud Shell. For more information, seeGet started with Azure Cloud Shell.

If you prefer to run CLI reference commands locally,installthe Azure CLI. If you're running on Windows or macOS, consider running Azure CLI in a Docker container. For more information, seeHow to run the Azure CLI in a Docker container.If you're using a local installation, sign in to the Azure CLI by using theaz logincommand. To finish the authentication process, follow the steps displayed in your terminal. For other sign-in options, seeAuthenticate to Azure using Azure CLI.When you're prompted, install the Azure CLI extension on first use. For more information about extensions, seeUse and manage extensions with the Azure CLI.Runaz versionto find the version and dependent libraries that are installed. To upgrade to the latest version, runaz upgrade.
If you prefer to run CLI reference commands locally,installthe Azure CLI. If you're running on Windows or macOS, consider running Azure CLI in a Docker container. For more information, seeHow to run the Azure CLI in a Docker container.
If you're using a local installation, sign in to the Azure CLI by using theaz logincommand. To finish the authentication process, follow the steps displayed in your terminal. For other sign-in options, seeAuthenticate to Azure using Azure CLI.
If you're using a local installation, sign in to the Azure CLI by using theaz logincommand. To finish the authentication process, follow the steps displayed in your terminal. For other sign-in options, seeAuthenticate to Azure using Azure CLI.
When you're prompted, install the Azure CLI extension on first use. For more information about extensions, seeUse and manage extensions with the Azure CLI.
When you're prompted, install the Azure CLI extension on first use. For more information about extensions, seeUse and manage extensions with the Azure CLI.
Runaz versionto find the version and dependent libraries that are installed. To upgrade to the latest version, runaz upgrade.
Runaz versionto find the version and dependent libraries that are installed. To upgrade to the latest version, runaz upgrade.
This article requires version 2.0.70 or later of the Azure CLI. If using Azure Cloud Shell, the latest version is already installed.
If you're new to Azure Event Grid, seeWhat's Azure Event Gridto get an overview of the service before going through this tutorial.
Create a resource group
Event Grid topics are Azure resources, and must be placed in an Azure resource group. The resource group is a logical collection into which Azure resources are deployed and managed.
Create a resource group with theaz group createcommand. The following example creates a resource group namedgridResourceGroupin thewestus2location. If you selectTry it, you see the Azure Cloud Shell window in the right pane. Then, selectCopyto copy the command and paste it in the Azure Cloud Shell window, and press ENTER to run the command. Change the name of the resource group and the location if you like.
az group create --name gridResourceGroup --location westus2
az group create --name gridResourceGroup --location westus2
Enable the Event Grid resource provider
If you haven't previously used Event Grid in your Azure subscription, you might need to register the Event Grid resource provider. Run the following command to register the provider:az provider register --namespace Microsoft.EventGrid
If you haven't previously used Event Grid in your Azure subscription, you might need to register the Event Grid resource provider. Run the following command to register the provider:
az provider register --namespace Microsoft.EventGrid
az provider register --namespace Microsoft.EventGrid
It might take a moment for the registration to finish. To check the status, run the following command:az provider show --namespace Microsoft.EventGrid --query "registrationState"WhenregistrationStateisRegistered, you're ready to continue.
It might take a moment for the registration to finish. To check the status, run the following command:
az provider show --namespace Microsoft.EventGrid --query "registrationState"
az provider show --namespace Microsoft.EventGrid --query "registrationState"
WhenregistrationStateisRegistered, you're ready to continue.
registrationState
Registered
Create a custom topic
An Event Grid topic provides a user-defined endpoint that you post your events to. The following example creates the custom topic in your resource group using Bash in Azure Cloud Shell. Replace<your-topic-name>with a unique name for your topic. The custom topic name must be unique because it's part of the Domain Name System (DNS) entry. Additionally, it must be between 3-50 characters and contain only values a-z, A-Z, 0-9, and "-"
<your-topic-name>
Copy the following command, specify a name for the topic, and press ENTER to run the command.topicname=<your-topic-name>
Copy the following command, specify a name for the topic, and press ENTER to run the command.
topicname=<your-topic-name>
topicname=<your-topic-name>
Use theaz eventgrid topic createcommand to create a custom topic.az eventgrid topic create --name $topicname -l westus2 -g gridResourceGroup
Use theaz eventgrid topic createcommand to create a custom topic.
az eventgrid topic create
az eventgrid topic create --name $topicname -l westus2 -g gridResourceGroup
az eventgrid topic create --name $topicname -l westus2 -g gridResourceGroup
Create a message endpoint
Before subscribing to the custom topic, let's create the endpoint for the event message. Typically, the endpoint takes actions based on the event data. To simplify this quickstart, you deploy aprebuilt web appthat displays the event messages. The deployed solution includes an App Service plan, an App Service web app, and source code from GitHub.
Copy the following command, specify a name for the web app (Event Grid Viewer sample), and press ENTER to run the command. Replace<your-site-name>with a unique name for your web app. The web app name must be unique because it's part of the DNS entry.sitename=<your-site-name>
Copy the following command, specify a name for the web app (Event Grid Viewer sample), and press ENTER to run the command. Replace<your-site-name>with a unique name for your web app. The web app name must be unique because it's part of the DNS entry.
<your-site-name>
sitename=<your-site-name>
sitename=<your-site-name>
Run theaz deployment group createto deploy the web app using an Azure Resource Manager template.az deployment group create \
  --resource-group gridResourceGroup \
  --template-uri "https://raw.githubusercontent.com/Azure-Samples/azure-event-grid-viewer/master/azuredeploy.json" \
  --parameters siteName=$sitename hostingPlanName=viewerhost
Run theaz deployment group createto deploy the web app using an Azure Resource Manager template.
az deployment group create
az deployment group create \
  --resource-group gridResourceGroup \
  --template-uri "https://raw.githubusercontent.com/Azure-Samples/azure-event-grid-viewer/master/azuredeploy.json" \
  --parameters siteName=$sitename hostingPlanName=viewerhost
az deployment group create \
  --resource-group gridResourceGroup \
  --template-uri "https://raw.githubusercontent.com/Azure-Samples/azure-event-grid-viewer/master/azuredeploy.json" \
  --parameters siteName=$sitename hostingPlanName=viewerhost
The deployment might take a few minutes to complete. After the deployment has succeeded, view your web app to make sure it's running. In a web browser, navigate to:https://<your-site-name>.azurewebsites.net
https://<your-site-name>.azurewebsites.net
You should see the site with no messages currently displayed.
Subscribe to a custom topic
You subscribe to an Event Grid topic to tell Event Grid which events you want to track and where to send those events. The following example subscribes to the custom topic you created, and passes the URL from your web app as the endpoint for event notification.
The endpoint for your web app must include the suffix/api/updates/.
/api/updates/
Copy the following command, replace$sitenamewith the name of the web app you created in the previous step, and press ENTER to run the command.endpoint=https://$sitename.azurewebsites.net/api/updates
Copy the following command, replace$sitenamewith the name of the web app you created in the previous step, and press ENTER to run the command.
$sitename
endpoint=https://$sitename.azurewebsites.net/api/updates
endpoint=https://$sitename.azurewebsites.net/api/updates
Run the following command to get the resource ID of the topic you created.topicresourceid=$(az eventgrid topic show --resource-group gridResourceGroup --name $topicname --query "id" --output tsv)
Run the following command to get the resource ID of the topic you created.
topicresourceid=$(az eventgrid topic show --resource-group gridResourceGroup --name $topicname --query "id" --output tsv)
topicresourceid=$(az eventgrid topic show --resource-group gridResourceGroup --name $topicname --query "id" --output tsv)
Run the following command to create a subscription to the custom topic using the endpoint.az eventgrid event-subscription create \
  --source-resource-id $topicresourceid \
  --name demoViewerSub \
  --endpoint $endpointView your web app again, and notice that a subscription validation event has been sent to it. Select the eye icon to expand the event data. Event Grid sends the validation event so the endpoint can verify that it wants to receive event data. The web app includes code to validate the subscription.
Run the following command to create a subscription to the custom topic using the endpoint.
az eventgrid event-subscription create \
  --source-resource-id $topicresourceid \
  --name demoViewerSub \
  --endpoint $endpoint
az eventgrid event-subscription create \
  --source-resource-id $topicresourceid \
  --name demoViewerSub \
  --endpoint $endpoint
View your web app again, and notice that a subscription validation event has been sent to it. Select the eye icon to expand the event data. Event Grid sends the validation event so the endpoint can verify that it wants to receive event data. The web app includes code to validate the subscription.

Send an event to your custom topic
Let's trigger an event to see how Event Grid distributes the message to your endpoint. First, let's get the URL and key for the custom topic.
endpoint=$(az eventgrid topic show --name $topicname -g gridResourceGroup --query "endpoint" --output tsv)
key=$(az eventgrid topic key list --name $topicname -g gridResourceGroup --query "key1" --output tsv)
endpoint=$(az eventgrid topic show --name $topicname -g gridResourceGroup --query "endpoint" --output tsv)
key=$(az eventgrid topic key list --name $topicname -g gridResourceGroup --query "key1" --output tsv)
To simplify this article, you use sample event data to send to the custom topic. Typically, an application or Azure service would send the event data. The following example creates sample event data:
event='[ {"id": "'"$RANDOM"'", "eventType": "recordInserted", "subject": "myapp/vehicles/motorcycles", "eventTime": "'`date +%Y-%m-%dT%H:%M:%S%z`'", "data":{ "make": "Ducati", "model": "Monster"},"dataVersion": "1.0"} ]'
event='[ {"id": "'"$RANDOM"'", "eventType": "recordInserted", "subject": "myapp/vehicles/motorcycles", "eventTime": "'`date +%Y-%m-%dT%H:%M:%S%z`'", "data":{ "make": "Ducati", "model": "Monster"},"dataVersion": "1.0"} ]'
Thedataelement of the JSON is the payload of your event. Any well-formed JSON can go in this field. You can also use the subject field for advanced routing and filtering.
data
CURL is a utility that sends HTTP requests. In this article, use CURL to send the event to the topic.
curl -X POST -H "aeg-sas-key: $key" -d "$event" $endpoint
curl -X POST -H "aeg-sas-key: $key" -d "$event" $endpoint
You've triggered the event, and Event Grid sent the message to the endpoint you configured when subscribing. View your web app to see the event you just sent.
[{
  "id": "1807",
  "eventType": "recordInserted",
  "subject": "myapp/vehicles/motorcycles",
  "eventTime": "2017-08-10T21:03:07+00:00",
  "data": {
    "make": "Ducati",
    "model": "Monster"
  },
  "dataVersion": "1.0",
  "metadataVersion": "1",
  "topic": "/subscriptions/{subscription-id}/resourceGroups/{resource-group}/providers/Microsoft.EventGrid/topics/{topic}"
}]
[{
  "id": "1807",
  "eventType": "recordInserted",
  "subject": "myapp/vehicles/motorcycles",
  "eventTime": "2017-08-10T21:03:07+00:00",
  "data": {
    "make": "Ducati",
    "model": "Monster"
  },
  "dataVersion": "1.0",
  "metadataVersion": "1",
  "topic": "/subscriptions/{subscription-id}/resourceGroups/{resource-group}/providers/Microsoft.EventGrid/topics/{topic}"
}]
Clean up resources
If you plan to continue working with this event or the event viewer app, don't clean up the resources created in this article. Otherwise, use the following command to delete the resources you created in this article.
az group delete --name gridResourceGroup
az group delete --name gridResourceGroup
Next steps
Now that you know how to create topics and event subscriptions, learn more about what Event Grid can help you do:
About Event Grid
Route Blob storage events to a custom web endpoint
Monitor virtual machine changes with Azure Event Grid and Logic Apps
Stream big data into a data warehouse
See the following samples to learn about publishing events to and consuming events from Event Grid using different programming languages.
Azure Event Grid samples for .NET
Azure Event Grid samples for Java
Azure Event Grid samples for Python
Azure Event Grid samples for JavaScript
Azure Event Grid samples for TypeScript
Feedback
Was this page helpful?
Additional resources