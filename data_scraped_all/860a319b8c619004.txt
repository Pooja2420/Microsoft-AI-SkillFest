Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Use Power BI and serverless Synapse SQL pool to analyze Azure Cosmos DB data with Synapse Link
Article
2024-09-10
8 contributors
In this article
APPLIES TO:NoSQLMongoDBGremlin
In this article, you learn how to build a serverless SQL pool database and views over Synapse Link for Azure Cosmos DB. You will query the Azure Cosmos DB containers and then build a model with Power BI over those views to reflect that query.
Important
Mirroring Azure Cosmos DB in Microsoft Fabric is now available in preview for NoSql API. This feature provides all the capabilities of Azure Synapse Link with better analytical performance, ability to unify your data estate with Fabric OneLake and open access to your data in Delta Parquet format. If you are considering Azure Synapse Link, we recommend that you try mirroring to assess overall fit for your organization.Get started wtih mirroring in Microsoft Fabric.
With Azure Synapse Link, you can build near real-time dashboards in Power BI to analyze your Azure Cosmos DB data. There is no performance or cost impact to your transactional workloads, and no complexity of managing ETL pipelines. You can use eitherDirectQueryorimportmodes.
Note
You can build Power BI dashboards with just a few clicks using Azure Cosmos DB portal. For more information, seeIntegrated Power BI experience in Azure Cosmos DB portal for Synapse Link enabled accounts. This will automatically create T-SQL views in Synapse serverless SQL pools on your Azure Cosmos DB containers. You can simply download the .pbids file that connects to these T-SQL views to start building your BI dashboards.
In this scenario, you will use dummy data about Surface product sales in a partner retail store. You will analyze the revenue per store based on the proximity to large households and the impact of advertising for a specific week. In this article, you create two views namedRetailSalesandStoreDemographicsand a query between them. You can get the sample product data from thisGitHubrepo.
Prerequisites
Make sure to create the following resources before you start:
Create an Azure Cosmos DB account for API for NoSQL or MongoDB.
Create an Azure Cosmos DB account for API for NoSQL or MongoDB.
Enable Azure Synapse Link for yourAzure Cosmos DB account
Enable Azure Synapse Link for yourAzure Cosmos DB account
Create a database within the Azure Cosmos DB account and two containers that haveanalytical store enabled.
Create a database within the Azure Cosmos DB account and two containers that haveanalytical store enabled.
Load products data into the Azure Cosmos DB containers as described in thisbatch data ingestionnotebook.
Load products data into the Azure Cosmos DB containers as described in thisbatch data ingestionnotebook.
Create a Synapse workspacenamedSynapseLinkBI.
Create a Synapse workspacenamedSynapseLinkBI.
Connect the Azure Cosmos DB database to the Synapse workspace.
Connect the Azure Cosmos DB database to the Synapse workspace.
Create a database and views
From the Synapse workspace go theDeveloptab, select the+icon, and selectSQL Script.

Every workspace comes with a serverless SQL endpoint. After creating a SQL script, from the tool bar on the top connect toBuilt-in.

Creating views in themasterordefaultdatabases is not recommended or supported. Create a new database, namedRetailCosmosDB, and a SQL view over the Synapse Link enabled containers. The following command shows how to create a database:
--â¯Createâ¯database
Createâ¯databaseâ¯RetailCosmosDB
--â¯Createâ¯database
Createâ¯databaseâ¯RetailCosmosDB
Next, create multiple views across different Synapse Link enabled Azure Cosmos DB containers. Views will allow you to use T-SQL to join and query Azure Cosmos DB data sitting in different containers.  Make sure to select theRetailCosmosDBdatabase when creating the views.
The following scripts show how to create views on each container. For simplicity, letâs use theautomatic schema inferencefeature of serverless SQL pool over Synapse Link enabled containers:
RetailSales view:
--â¯Create view for RetailSales container
CREATEâ¯VIEWâ¯ RetailSales
ASâ¯ 
SELECT  *
FROM OPENROWSET (
    'CosmosDB', N'account=<Your Azure Cosmos DB account name>;database=<Your Azure Cosmos DB database name>;region=<Your Azure Cosmos DB Region>;key=<Your Azure Cosmos DB key here>',RetailSales)
AS q1
--â¯Create view for RetailSales container
CREATEâ¯VIEWâ¯ RetailSales
ASâ¯ 
SELECT  *
FROM OPENROWSET (
    'CosmosDB', N'account=<Your Azure Cosmos DB account name>;database=<Your Azure Cosmos DB database name>;region=<Your Azure Cosmos DB Region>;key=<Your Azure Cosmos DB key here>',RetailSales)
AS q1
Make sure to insert your Azure Cosmos DB region and the primary key in the previous SQL script. All the characters in the region name should be in lower case without spaces. Unlike the other parameters of theOPENROWSETcommand, the container name parameter should be specified without quotes around it.
OPENROWSET
--â¯Create view for RetailSales container
CREATEâ¯VIEWâ¯ RetailSales
ASâ¯ 
SELECT  *
FROM OPENROWSET (
    'CosmosDB', N'account=<Your Azure Cosmos DB account name>;database=<Your Azure Cosmos DB database name>;region=<Your Azure Cosmos DB Region>;authtype=ManagedIdentity',RetailSales)
AS q1
--â¯Create view for RetailSales container
CREATEâ¯VIEWâ¯ RetailSales
ASâ¯ 
SELECT  *
FROM OPENROWSET (
    'CosmosDB', N'account=<Your Azure Cosmos DB account name>;database=<Your Azure Cosmos DB database name>;region=<Your Azure Cosmos DB Region>;authtype=ManagedIdentity',RetailSales)
AS q1
StoreDemographics view:
--â¯Create view for StoreDemographics container
CREATEâ¯VIEWâ¯StoreDemographics
ASâ¯ 
SELECT  *
FROM OPENROWSET (
    'CosmosDB', N'account=<Your Azure Cosmos DB account name>;database=<Your Azure Cosmos DB database name>;region=<Your Azure Cosmos DB Region>;key=<Your Azure Cosmos DB key here>', StoreDemographics)
AS q1
--â¯Create view for StoreDemographics container
CREATEâ¯VIEWâ¯StoreDemographics
ASâ¯ 
SELECT  *
FROM OPENROWSET (
    'CosmosDB', N'account=<Your Azure Cosmos DB account name>;database=<Your Azure Cosmos DB database name>;region=<Your Azure Cosmos DB Region>;key=<Your Azure Cosmos DB key here>', StoreDemographics)
AS q1
Now run the SQL script by selecting theRuncommand.
Query the views
Now that the two views are created, letâs define the query to join those two views as follows:
SELECT 
sum(p.[revenue]) as revenue
,p.[advertising]
,p.[storeId]
,p.[weekStarting]
,q.[largeHH]
 FROM [dbo].[RetailSales] as p
INNER JOIN [dbo].[StoreDemographics] as q ON q.[storeId] = p.[storeId]
GROUP BY p.[advertising], p.[storeId], p.[weekStarting], q.[largeHH]
SELECT 
sum(p.[revenue]) as revenue
,p.[advertising]
,p.[storeId]
,p.[weekStarting]
,q.[largeHH]
 FROM [dbo].[RetailSales] as p
INNER JOIN [dbo].[StoreDemographics] as q ON q.[storeId] = p.[storeId]
GROUP BY p.[advertising], p.[storeId], p.[weekStarting], q.[largeHH]
SelectRunthat gives the following table as result:

Model views over containers with Power BI
Next open the Power BI desktop and connect to the serverless SQL endpoint by using the following steps:
Open the Power BI Desktop application. SelectGet dataand selectmore.
Open the Power BI Desktop application. SelectGet dataand selectmore.
ChooseAzure Synapse Analytics (SQL DW)from the list of connection options.
ChooseAzure Synapse Analytics (SQL DW)from the list of connection options.
Enter the name of the SQL endpoint where the database is located. EnterSynapseLinkBI-ondemand.sql.azuresynapse.netwithin theServerfield. In this example,SynapseLinkBIis  name of the workspace. Replace it if you have given a different name to your workspace. SelectDirect Queryfor data connectivity mode and thenOK.
Enter the name of the SQL endpoint where the database is located. EnterSynapseLinkBI-ondemand.sql.azuresynapse.netwithin theServerfield. In this example,SynapseLinkBIis  name of the workspace. Replace it if you have given a different name to your workspace. SelectDirect Queryfor data connectivity mode and thenOK.
SynapseLinkBI-ondemand.sql.azuresynapse.net
Select the preferred authentication method such as Microsoft Entra ID.
Select the preferred authentication method such as Microsoft Entra ID.
Select theRetailCosmosDBdatabase and theRetailSales,StoreDemographicsviews.
Select theRetailCosmosDBdatabase and theRetailSales,StoreDemographicsviews.
SelectLoadto load the two views into the direct query mode.
SelectLoadto load the two views into the direct query mode.
SelectModelto create a relationship between the two views through thestoreIdcolumn.
SelectModelto create a relationship between the two views through thestoreIdcolumn.
Drag theStoreIdcolumn from theRetailSalesview towards theStoreIdcolumn in theStoreDemographicsview.
Drag theStoreIdcolumn from theRetailSalesview towards theStoreIdcolumn in theStoreDemographicsview.
Select the Many to one (*:1) relationship because there are multiple rows with the same store ID in theRetailSalesview.StoreDemographicshas only one store ID row (it is a dimension table).
Select the Many to one (*:1) relationship because there are multiple rows with the same store ID in theRetailSalesview.StoreDemographicshas only one store ID row (it is a dimension table).
Now navigate to thereportwindow and create a report to compare the relative importance of household size to the average revenue per store based on the scattered representation of revenue and LargeHH index:
SelectScatter chart.
SelectScatter chart.
Drag and dropLargeHHfrom theStoreDemographicsview into the X-axis.
Drag and dropLargeHHfrom theStoreDemographicsview into the X-axis.
Drag and dropRevenuefromRetailSalesview into the Y-axis. SelectAverageto get the average sales per product per store and per week.
Drag and dropRevenuefromRetailSalesview into the Y-axis. SelectAverageto get the average sales per product per store and per week.
Drag and drop theproductCodefromRetailSalesview into the legend to select a specific product line.
After you choose these options, you should see a graph like the following screenshot:
Drag and drop theproductCodefromRetailSalesview into the legend to select a specific product line.
After you choose these options, you should see a graph like the following screenshot:

Next steps
Integrated Power BI experience in Azure Cosmos DB portal for Synapse Link enabled accounts
Use T-SQL to query Azure Cosmos DB data using Azure Synapse Link
Use serverless SQL pool toanalyze Azure Open Datasets and visualize the results in Azure Synapse Studio
Feedback
Was this page helpful?
Additional resources