Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Use planned maintenance to schedule and control upgrades for your Azure Kubernetes Service cluster
Article
2024-08-01
14 contributors
In this article
This article shows you how to use planned maintenance to schedule and control cluster and node image upgrades in Azure Kubernetes Service (AKS).
Regular maintenance is performed on your AKS cluster automatically. There are two types of maintenance operations:
AKS-initiated maintenanceinvolves the weekly releases that AKS performs to keep your cluster up to date with the latest features and fixes.
User-initiated maintenanceincludescluster auto-upgradesandnode operating system (OS) automatic security updates.
When you use the feature of planned maintenance in AKS, you can run both types of maintenance in a cadence of your choice to minimize workload impact.
Note
You can use planned maintenance to schedule the timing of automatic upgrades, but enabling or disabling planned maintenance won't enable or disable automatic upgrades.
Before you begin
This article assumes that you have an existing AKS cluster. If you don't have an AKS cluster, seeCreate an AKS cluster.
If you're using the Azure CLI, upgrade to the latest version by using theaz upgradecommand.
az upgrade
Considerations
When you use planned maintenance, the following considerations apply:
AKS reserves the right to break planned maintenance windows for unplanned, reactive maintenance operations that are urgent or critical. These maintenance operations might even run during thenotAllowedTimeornotAllowedDatesperiods defined in your configuration.
notAllowedTime
notAllowedDates
Maintenance operations are consideredbest effort onlyand aren't guaranteed to occur within a specified window.
Schedule configuration types for planned maintenance
Three schedule configuration types are available for planned maintenance:
defaultis a basic configuration for controlling AKS releases. The releases can take up to two weeks to roll out to all regions from the initial time of shipping, because of Azure safe deployment practices.Choosedefaultto schedule these updates in a manner that's least disruptive for you. You can monitor the status of an ongoing AKS release by region with theweekly release tracker.
defaultis a basic configuration for controlling AKS releases. The releases can take up to two weeks to roll out to all regions from the initial time of shipping, because of Azure safe deployment practices.
default
Choosedefaultto schedule these updates in a manner that's least disruptive for you. You can monitor the status of an ongoing AKS release by region with theweekly release tracker.
default
aksManagedAutoUpgradeSchedulecontrols when to perform cluster upgrades scheduled by your designated auto-upgrade channel. You can configure more finely controlled cadence and recurrence settings with this configuration compared to thedefaultconfiguration. For more information on cluster auto-upgrade, seeAutomatically upgrade an Azure Kubernetes Service cluster.
aksManagedAutoUpgradeSchedulecontrols when to perform cluster upgrades scheduled by your designated auto-upgrade channel. You can configure more finely controlled cadence and recurrence settings with this configuration compared to thedefaultconfiguration. For more information on cluster auto-upgrade, seeAutomatically upgrade an Azure Kubernetes Service cluster.
aksManagedAutoUpgradeSchedule
default
aksManagedNodeOSUpgradeSchedulecontrols when to perform the node OS security patching scheduled by your node OS auto-upgrade channel. You can configure more finely controlled cadence and recurrence settings with this configuration compared to thedefaultconfiguration. For more information on node OS auto-upgrade channels, seeAutomatically patch and update AKS cluster node images.
aksManagedNodeOSUpgradeSchedulecontrols when to perform the node OS security patching scheduled by your node OS auto-upgrade channel. You can configure more finely controlled cadence and recurrence settings with this configuration compared to thedefaultconfiguration. For more information on node OS auto-upgrade channels, seeAutomatically patch and update AKS cluster node images.
aksManagedNodeOSUpgradeSchedule
default
We recommend usingaksManagedAutoUpgradeSchedulefor all cluster upgrade scenarios andaksManagedNodeOSUpgradeSchedulefor all node OS security patching scenarios.
aksManagedAutoUpgradeSchedule
aksManagedNodeOSUpgradeSchedule
Thedefaultoption is meant exclusively for AKS weekly releases. You can switch thedefaultconfiguration to theaksManagedAutoUpgradeScheduleoraksManagedNodeOSUpgradeScheduleconfiguration by using theaz aks maintenanceconfiguration updatecommand.
default
default
aksManagedAutoUpgradeSchedule
aksManagedNodeOSUpgradeSchedule
az aks maintenanceconfiguration update
Create a maintenance window
Note
When you're using auto-upgrade, to ensure proper functionality, use a maintenance window with a duration of four hours or more.
Planned maintenance windows are specified in Coordinated Universal Time (UTC).
Adefaultmaintenance window has the following legacy properties (no longer recommended):
default
timeInWeek
default
day
hourSlots
timeInWeek.day
default
timeInWeek.hourSlots
default
notAllowedTime
start
end
Note
From the 2023-05-01 API version onwards, please use the below properties fordefaultconfiguration.
default
AnaksManagedAutoUpgradeScheduleoraksManagedNodeOSUpgradeSchedulemaintenance window anddefaultconfiguration from 2023-05-01 API version onwards has the following properties:
aksManagedAutoUpgradeSchedule
aksManagedNodeOSUpgradeSchedule
default
utcOffset
+00:00
startDate
startTime
utcOffset
schedule
Weekly
AbsoluteMonthly
RelativeMonthly
intervalDays
aksManagedNodeOSUpgradeSchedule
intervalWeeks
intervalMonths
dayOfWeek
durationHours
notAllowedDates
start
end
Schedule types
Four available schedule types are available:Daily,Weekly,AbsoluteMonthly, andRelativeMonthly.
Daily
Weekly
AbsoluteMonthly
RelativeMonthly
Weekly,AbsoluteMonthly, andRelativeMonthlyschedule types are applicable only toaksManagedClusterAutoUpgradeScheduleandaksManagedNodeOSUpgradeScheduleconfigurations.Dailyschedules are applicable only toaksManagedNodeOSUpgradeScheduleconfigurations.
Weekly
AbsoluteMonthly
RelativeMonthly
aksManagedClusterAutoUpgradeSchedule
aksManagedNodeOSUpgradeSchedule
Daily
aksManagedNodeOSUpgradeSchedule
All of the fields shown for each schedule type are required.
ADailyschedule might look like "every three days":
Daily
"schedule": {
    "daily": {
        "intervalDays": 3
    }
}
"schedule": {
    "daily": {
        "intervalDays": 3
    }
}
AWeeklyschedule might look like "every two weeks on Friday":
Weekly
"schedule": {
    "weekly": {
        "intervalWeeks": 2,
        "dayOfWeek": "Friday"
    }
}
"schedule": {
    "weekly": {
        "intervalWeeks": 2,
        "dayOfWeek": "Friday"
    }
}
AnAbsoluteMonthlyschedule might look like "every three months on the first day of the month":
AbsoluteMonthly
"schedule": {
    "absoluteMonthly": {
        "intervalMonths": 3,
        "dayOfMonth": 1
    }
}
"schedule": {
    "absoluteMonthly": {
        "intervalMonths": 3,
        "dayOfMonth": 1
    }
}
ARelativeMonthlyschedule might look like "every two months on the last Monday":
RelativeMonthly
"schedule": {
    "relativeMonthly": {
        "intervalMonths": 2,
        "dayOfWeek": "Monday",
        "weekIndex": "Last"
    }
}
"schedule": {
    "relativeMonthly": {
        "intervalMonths": 2,
        "dayOfWeek": "Monday",
        "weekIndex": "Last"
    }
}
Valid values forweekIndexincludeFirst,Second,Third,Fourth, andLast.
weekIndex
First
Second
Third
Fourth
Last
Add a maintenance window configuration
Azure CLI
Azure portal
JSON file
Add a maintenance window configuration to an AKS cluster by using theaz aks maintenanceconfiguration addcommand.
az aks maintenanceconfiguration add
The first example adds a newdefaultconfiguration that schedules maintenance to run from 1:00 AM to 2:00 AM every Monday. The second example adds a newaksManagedAutoUpgradeScheduleconfiguration that schedules maintenance to run every third Friday between 12:00 AM and 8:00 AM in theUTC+5:30time zone.
default
aksManagedAutoUpgradeSchedule
UTC+5:30
# Add a new default configuration
az aks maintenanceconfiguration add --resource-group myResourceGroup --cluster-name myAKSCluster --name default --weekday Monday --start-hour 1

# Add a new aksManagedAutoUpgradeSchedule configuration
az aks maintenanceconfiguration add --resource-group myResourceGroup --cluster-name myAKSCluster --name aksManagedAutoUpgradeSchedule --schedule-type Weekly --day-of-week Friday --interval-weeks 3 --duration 8 --utc-offset +05:30 --start-time 00:00
# Add a new default configuration
az aks maintenanceconfiguration add --resource-group myResourceGroup --cluster-name myAKSCluster --name default --weekday Monday --start-hour 1

# Add a new aksManagedAutoUpgradeSchedule configuration
az aks maintenanceconfiguration add --resource-group myResourceGroup --cluster-name myAKSCluster --name aksManagedAutoUpgradeSchedule --schedule-type Weekly --day-of-week Friday --interval-weeks 3 --duration 8 --utc-offset +05:30 --start-time 00:00
Note
When you're using adefaultconfiguration type, you can omit the--start-timeparameter to allow maintenance anytime during a day.
default
--start-time
In the Azure portal, go to your AKS cluster.
In the Azure portal, go to your AKS cluster.
From the service menu, underSettings, selectCluster configuration.
From the service menu, underSettings, selectCluster configuration.
UnderUpgrade>Automatic upgrade scheduler, selectAdd schedule.
UnderUpgrade>Automatic upgrade scheduler, selectAdd schedule.

On theAdd maintenance schedulepane, configure the following maintenance window settings:Repeats: Select the frequency for the maintenance window. We recommend selectingWeekly.Frequency: Select the day of the week for the maintenance window. We recommend selectingSunday.Maintenance start date: Select the start date for the maintenance window.Maintenance start time: Select the start time for the maintenance window.UTC offset: Select the UTC offset for the maintenance window. The default is+00:00.
On theAdd maintenance schedulepane, configure the following maintenance window settings:
Repeats: Select the frequency for the maintenance window. We recommend selectingWeekly.
Frequency: Select the day of the week for the maintenance window. We recommend selectingSunday.
Maintenance start date: Select the start date for the maintenance window.
Maintenance start time: Select the start time for the maintenance window.
UTC offset: Select the UTC offset for the maintenance window. The default is+00:00.

SelectSave>Apply.
SelectSave>Apply.
You can use a JSON file to create a maintenance configuration instead of using parameters. When you use this method, you can prevent maintenance during a range of dates by specifyingnotAllowedTimesfordefaultconfigurations andnotAllowedDatesforaksManagedAutoUpgradeScheduleconfigurations.
notAllowedTimes
default
notAllowedDates
aksManagedAutoUpgradeSchedule
Create a JSON file with the maintenance window settings.The following example creates adefault.jsonfile that schedules maintenance to run from 1:00 AM to 3:00 AM every Tuesday and Wednesday in theUTCtime zone. There's also an exception from2021-05-26T03:00:00Zto2021-05-30T12:00:00Zwhere maintenance isn't allowed, even if it overlaps with a maintenance window.{
  "timeInWeek": [
    {
      "day": "Tuesday",
      "hour_slots": [
        1,
        2
      ]
    },
    {
      "day": "Wednesday",
      "hour_slots": [
        1,
        6
      ]
    }
  ],
  "notAllowedTime": [
    {
      "start": "2021-05-26T03:00:00Z",
      "end": "2021-05-30T12:00:00Z"
    }
  ]
}The following example creates anautoUpgradeWindow.jsonfile that schedules maintenance to run every three months on the first of the month between 9:00 AM and 1:00 PM in theUTC-08time zone. There's also an exception from2023-12-23to2024-01-05where maintenance isn't allowed, even if it overlaps with a maintenance window.{
  "properties": {
    "maintenanceWindow": {
        "schedule": {
            "absoluteMonthly": {
                "intervalMonths": 3,
                "dayOfMonth": 1
            }
        },
        "durationHours": 4,
        "utcOffset": "-08:00",
        "startTime": "09:00",
        "notAllowedDates": [
            {
                "start": "2023-12-23",
                "end": "2024-01-05"
            }
        ]
    }
  }
}
Create a JSON file with the maintenance window settings.
The following example creates adefault.jsonfile that schedules maintenance to run from 1:00 AM to 3:00 AM every Tuesday and Wednesday in theUTCtime zone. There's also an exception from2021-05-26T03:00:00Zto2021-05-30T12:00:00Zwhere maintenance isn't allowed, even if it overlaps with a maintenance window.
default.json
UTC
2021-05-26T03:00:00Z
2021-05-30T12:00:00Z
{
  "timeInWeek": [
    {
      "day": "Tuesday",
      "hour_slots": [
        1,
        2
      ]
    },
    {
      "day": "Wednesday",
      "hour_slots": [
        1,
        6
      ]
    }
  ],
  "notAllowedTime": [
    {
      "start": "2021-05-26T03:00:00Z",
      "end": "2021-05-30T12:00:00Z"
    }
  ]
}
{
  "timeInWeek": [
    {
      "day": "Tuesday",
      "hour_slots": [
        1,
        2
      ]
    },
    {
      "day": "Wednesday",
      "hour_slots": [
        1,
        6
      ]
    }
  ],
  "notAllowedTime": [
    {
      "start": "2021-05-26T03:00:00Z",
      "end": "2021-05-30T12:00:00Z"
    }
  ]
}
The following example creates anautoUpgradeWindow.jsonfile that schedules maintenance to run every three months on the first of the month between 9:00 AM and 1:00 PM in theUTC-08time zone. There's also an exception from2023-12-23to2024-01-05where maintenance isn't allowed, even if it overlaps with a maintenance window.
autoUpgradeWindow.json
UTC-08
2023-12-23
2024-01-05
{
  "properties": {
    "maintenanceWindow": {
        "schedule": {
            "absoluteMonthly": {
                "intervalMonths": 3,
                "dayOfMonth": 1
            }
        },
        "durationHours": 4,
        "utcOffset": "-08:00",
        "startTime": "09:00",
        "notAllowedDates": [
            {
                "start": "2023-12-23",
                "end": "2024-01-05"
            }
        ]
    }
  }
}
{
  "properties": {
    "maintenanceWindow": {
        "schedule": {
            "absoluteMonthly": {
                "intervalMonths": 3,
                "dayOfMonth": 1
            }
        },
        "durationHours": 4,
        "utcOffset": "-08:00",
        "startTime": "09:00",
        "notAllowedDates": [
            {
                "start": "2023-12-23",
                "end": "2024-01-05"
            }
        ]
    }
  }
}
Add the maintenance window configuration by using theaz aks maintenanceconfiguration addcommand with the--config-fileparameter.The first example adds a newdefaultconfiguration by using thedefault.jsonfile. The second example adds a newaksManagedAutoUpgradeScheduleconfiguration by using theautoUpgradeWindow.jsonfile.# Add a new default configuration
az aks maintenanceconfiguration add -g myResourceGroup --cluster-name myAKSCluster --name default --config-file ./default.json

# Add a new aksManagedAutoUpgradeSchedule configuration
az aks maintenanceconfiguration add -g myResourceGroup --cluster-name myAKSCluster --name aksManagedAutoUpgradeSchedule --config-file ./autoUpgradeWindow.json
Add the maintenance window configuration by using theaz aks maintenanceconfiguration addcommand with the--config-fileparameter.
az aks maintenanceconfiguration add
--config-file
The first example adds a newdefaultconfiguration by using thedefault.jsonfile. The second example adds a newaksManagedAutoUpgradeScheduleconfiguration by using theautoUpgradeWindow.jsonfile.
default
default.json
aksManagedAutoUpgradeSchedule
autoUpgradeWindow.json
# Add a new default configuration
az aks maintenanceconfiguration add -g myResourceGroup --cluster-name myAKSCluster --name default --config-file ./default.json

# Add a new aksManagedAutoUpgradeSchedule configuration
az aks maintenanceconfiguration add -g myResourceGroup --cluster-name myAKSCluster --name aksManagedAutoUpgradeSchedule --config-file ./autoUpgradeWindow.json
# Add a new default configuration
az aks maintenanceconfiguration add -g myResourceGroup --cluster-name myAKSCluster --name default --config-file ./default.json

# Add a new aksManagedAutoUpgradeSchedule configuration
az aks maintenanceconfiguration add -g myResourceGroup --cluster-name myAKSCluster --name aksManagedAutoUpgradeSchedule --config-file ./autoUpgradeWindow.json
Update an existing maintenance window
Azure CLI
Azure portal
JSON file
Update an existing maintenance configuration by using theaz aks maintenanceconfiguration updatecommand.
az aks maintenanceconfiguration update
The following example updates thedefaultconfiguration to schedule maintenance to run from 2:00 AM to 3:00 AM every Monday:
default
az aks maintenanceconfiguration update --resource-group myResourceGroup --cluster-name myAKSCluster --name default --weekday Monday --start-hour 2
az aks maintenanceconfiguration update --resource-group myResourceGroup --cluster-name myAKSCluster --name default --weekday Monday --start-hour 2
In the Azure portal, go to your AKS cluster.
In the Azure portal, go to your AKS cluster.
From the service menu, underSettings, selectCluster configuration.
From the service menu, underSettings, selectCluster configuration.
UnderUpgrade>Automatic upgrade scheduler, selectEdit schedule.
UnderUpgrade>Automatic upgrade scheduler, selectEdit schedule.

On theEdit maintenance schedulepane, update the maintenance window settings as needed.
On theEdit maintenance schedulepane, update the maintenance window settings as needed.
SelectSave>Apply.
SelectSave>Apply.
Update the configuration JSON file with the new maintenance window settings.The following example updates thedefault.jsonfile from theprevious sectionto schedule maintenance to run from 2:00 AM to 3:00 AM every Monday:{
  "timeInWeek": [
    {
      "day": "Monday",
      "hour_slots": [
        2,
        3
      ]
    }
  ],
  "notAllowedTime": [
    {
      "start": "2021-05-26T03:00:00Z",
      "end": "2021-05-30T12:00:00Z"
    }
  ]
}
Update the configuration JSON file with the new maintenance window settings.
The following example updates thedefault.jsonfile from theprevious sectionto schedule maintenance to run from 2:00 AM to 3:00 AM every Monday:
default.json
{
  "timeInWeek": [
    {
      "day": "Monday",
      "hour_slots": [
        2,
        3
      ]
    }
  ],
  "notAllowedTime": [
    {
      "start": "2021-05-26T03:00:00Z",
      "end": "2021-05-30T12:00:00Z"
    }
  ]
}
{
  "timeInWeek": [
    {
      "day": "Monday",
      "hour_slots": [
        2,
        3
      ]
    }
  ],
  "notAllowedTime": [
    {
      "start": "2021-05-26T03:00:00Z",
      "end": "2021-05-30T12:00:00Z"
    }
  ]
}
Update the maintenance window configuration by using theaz aks maintenanceconfiguration updatecommand with the--config-fileparameter:az aks maintenanceconfiguration update --resource-group myResourceGroup --cluster-name myAKSCluster --name default --config-file ./default.json
Update the maintenance window configuration by using theaz aks maintenanceconfiguration updatecommand with the--config-fileparameter:
az aks maintenanceconfiguration update
--config-file
az aks maintenanceconfiguration update --resource-group myResourceGroup --cluster-name myAKSCluster --name default --config-file ./default.json
az aks maintenanceconfiguration update --resource-group myResourceGroup --cluster-name myAKSCluster --name default --config-file ./default.json
List all maintenance windows in an existing cluster
List the current maintenance configuration windows in your AKS cluster by using theaz aks maintenanceconfiguration listcommand:
az aks maintenanceconfiguration list
az aks maintenanceconfiguration list --resource-group myResourceGroup --cluster-name myAKSCluster
az aks maintenanceconfiguration list --resource-group myResourceGroup --cluster-name myAKSCluster
Show a specific maintenance configuration window in an existing cluster
View a specific maintenance configuration window in your AKS cluster by using theaz aks maintenanceconfiguration showcommand with the--nameparameter:
az aks maintenanceconfiguration show
--name
az aks maintenanceconfiguration show --resource-group myResourceGroup --cluster-name myAKSCluster --name aksManagedAutoUpgradeSchedule
az aks maintenanceconfiguration show --resource-group myResourceGroup --cluster-name myAKSCluster --name aksManagedAutoUpgradeSchedule
The following example output shows the maintenance window foraksManagedAutoUpgradeSchedule:
aksManagedAutoUpgradeSchedule
{
  "id": "/subscriptions/<subscription>/resourceGroups/myResourceGroup/providers/Microsoft.ContainerService/managedClusters/myAKSCluster/maintenanceConfigurations/aksManagedAutoUpgradeSchedule",
  "maintenanceWindow": {
    "durationHours": 4,
    "notAllowedDates": [
      {
        "end": "2024-01-05",
        "start": "2023-12-23"
      }
    ],
    "schedule": {
      "absoluteMonthly": {
        "dayOfMonth": 1,
        "intervalMonths": 3
      },
      "daily": null,
      "relativeMonthly": null,
      "weekly": null
    },
    "startDate": "2023-01-20",
    "startTime": "09:00",
    "utcOffset": "-08:00"
  },
  "name": "aksManagedAutoUpgradeSchedule",
  "notAllowedTime": null,
  "resourceGroup": "myResourceGroup",
  "systemData": null,
  "timeInWeek": null,
  "type": null
}
{
  "id": "/subscriptions/<subscription>/resourceGroups/myResourceGroup/providers/Microsoft.ContainerService/managedClusters/myAKSCluster/maintenanceConfigurations/aksManagedAutoUpgradeSchedule",
  "maintenanceWindow": {
    "durationHours": 4,
    "notAllowedDates": [
      {
        "end": "2024-01-05",
        "start": "2023-12-23"
      }
    ],
    "schedule": {
      "absoluteMonthly": {
        "dayOfMonth": 1,
        "intervalMonths": 3
      },
      "daily": null,
      "relativeMonthly": null,
      "weekly": null
    },
    "startDate": "2023-01-20",
    "startTime": "09:00",
    "utcOffset": "-08:00"
  },
  "name": "aksManagedAutoUpgradeSchedule",
  "notAllowedTime": null,
  "resourceGroup": "myResourceGroup",
  "systemData": null,
  "timeInWeek": null,
  "type": null
}
Delete a maintenance configuration window in an existing cluster
Azure CLI
Azure portal
JSON file
Delete a maintenance configuration window in your AKS cluster by using theaz aks maintenanceconfiguration deletecommand.
az aks maintenanceconfiguration delete
The following example deletes theautoUpgradeSchedulemaintenance configuration:
autoUpgradeSchedule
az aks maintenanceconfiguration delete --resource-group myResourceGroup --cluster-name myAKSCluster --name autoUpgradeSchedule
az aks maintenanceconfiguration delete --resource-group myResourceGroup --cluster-name myAKSCluster --name autoUpgradeSchedule
In the Azure portal, go to your AKS cluster.
In the Azure portal, go to your AKS cluster.
From the service menu, underSettings, selectCluster configuration.
From the service menu, underSettings, selectCluster configuration.
UnderUpgrade>Automatic upgrade scheduler, selectEdit schedule.
UnderUpgrade>Automatic upgrade scheduler, selectEdit schedule.

On theEdit maintenance schedulepane, selectRemove schedule.
On theEdit maintenance schedulepane, selectRemove schedule.

Delete a maintenance configuration window in your AKS cluster by using theaz aks maintenanceconfiguration deletecommand.
az aks maintenanceconfiguration delete
The following example deletes theautoUpgradeSchedulemaintenance configuration:
autoUpgradeSchedule
az aks maintenanceconfiguration delete --resource-group myResourceGroup --cluster-name myAKSCluster --name autoUpgradeSchedule
az aks maintenanceconfiguration delete --resource-group myResourceGroup --cluster-name myAKSCluster --name autoUpgradeSchedule
FAQ
How can I check the existing maintenance configurations in my cluster?Use theaz aks maintenanceconfiguration showcommand.
How can I check the existing maintenance configurations in my cluster?
Use theaz aks maintenanceconfiguration showcommand.
az aks maintenanceconfiguration show
Can reactive, unplanned maintenance happen during thenotAllowedTimeornotAllowedDatesperiods too?Yes. AKS reserves the right to break these windows for unplanned, reactive maintenance operations that are urgent or critical.
Can reactive, unplanned maintenance happen during thenotAllowedTimeornotAllowedDatesperiods too?
notAllowedTime
notAllowedDates
Yes. AKS reserves the right to break these windows for unplanned, reactive maintenance operations that are urgent or critical.
How can I tell if a maintenance event occurred?For releases, check your cluster's region and look up information inweekly releasesto see if it matches your maintenance schedule. To view the status of your automatic upgrades, look upactivity logson your cluster. You can also look up specific upgrade-related events, as mentioned inUpgrade an AKS cluster.AKS also emits upgrade-related Azure Event Grid events. To learn more, seeAKS as an Event Grid source.
How can I tell if a maintenance event occurred?
For releases, check your cluster's region and look up information inweekly releasesto see if it matches your maintenance schedule. To view the status of your automatic upgrades, look upactivity logson your cluster. You can also look up specific upgrade-related events, as mentioned inUpgrade an AKS cluster.
AKS also emits upgrade-related Azure Event Grid events. To learn more, seeAKS as an Event Grid source.
Can I use more than one maintenance configuration at the same time?Yes, you can run all three configurations simultaneously:default,aksManagedAutoUpgradeSchedule, andaksManagedNodeOSUpgradeSchedule. If the windows overlap, AKS decides the running order.
Can I use more than one maintenance configuration at the same time?
Yes, you can run all three configurations simultaneously:default,aksManagedAutoUpgradeSchedule, andaksManagedNodeOSUpgradeSchedule. If the windows overlap, AKS decides the running order.
default
aksManagedAutoUpgradeSchedule
aksManagedNodeOSUpgradeSchedule
I configured a maintenance window, but the upgrade didn't happen. Why?AKS auto-upgrade needs a certain amount of time, usually not more than 15 minutes, to take the maintenance window into consideration. We recommend at least 15 minutes between the creation or update of a maintenance configuration and the scheduled start time.Also, ensure that your cluster is started when the planned maintenance window starts. If the cluster is stopped, its control plane is deallocated and no operations can be performed.
I configured a maintenance window, but the upgrade didn't happen. Why?
AKS auto-upgrade needs a certain amount of time, usually not more than 15 minutes, to take the maintenance window into consideration. We recommend at least 15 minutes between the creation or update of a maintenance configuration and the scheduled start time.
Also, ensure that your cluster is started when the planned maintenance window starts. If the cluster is stopped, its control plane is deallocated and no operations can be performed.
Why was one of my agent pools upgraded outside the maintenance window?If an agent pool isn't upgraded (for example, because pod disruption budgets prevented it), it might be upgraded later, outside the maintenance window. This scenario is called a "catch-up upgrade." It avoids letting agent pools be upgraded with a different version from the AKS control plane.Another reason why an agent pool could be upgraded unexpectedly is when there is no defined maintenance configuration, or if it's been deleted. In that case, a cluster with auto-upgradebut without a maintenance configurationwill be upgraded at random times (fallback schedule), which might be an undesired timeframe.
Why was one of my agent pools upgraded outside the maintenance window?
If an agent pool isn't upgraded (for example, because pod disruption budgets prevented it), it might be upgraded later, outside the maintenance window. This scenario is called a "catch-up upgrade." It avoids letting agent pools be upgraded with a different version from the AKS control plane.
Another reason why an agent pool could be upgraded unexpectedly is when there is no defined maintenance configuration, or if it's been deleted. In that case, a cluster with auto-upgradebut without a maintenance configurationwill be upgraded at random times (fallback schedule), which might be an undesired timeframe.
Are there any best practices for the maintenance configurations?We recommend setting thenode OS security updatesschedule to a weekly cadence if you're using theNodeImagechannel, because a new node image is shipped every week. You can also opt in for theSecurityPatchchannel to receive daily security updates.Set theauto-upgradeschedule to a monthly cadence to stay current with the Kubernetes N-2support policy.For a detailed discussion of upgrade best practices and other considerations, seeAKS patch and upgrade guidance.
Are there any best practices for the maintenance configurations?
We recommend setting thenode OS security updatesschedule to a weekly cadence if you're using theNodeImagechannel, because a new node image is shipped every week. You can also opt in for theSecurityPatchchannel to receive daily security updates.
NodeImage
SecurityPatch
Set theauto-upgradeschedule to a monthly cadence to stay current with the Kubernetes N-2support policy.
For a detailed discussion of upgrade best practices and other considerations, seeAKS patch and upgrade guidance.
Can I configure all my clusters in a single subscription to use the same maintenance configuration?We don't recommend using the same maintenance configuration for multiple clusters in a single subscription, as doing so can lead to ARM throttling errors causing cluster upgrades to fail. Instead, we recommend staggering the maintenance windows for each cluster to avoid these errors.
Can I configure all my clusters in a single subscription to use the same maintenance configuration?
We don't recommend using the same maintenance configuration for multiple clusters in a single subscription, as doing so can lead to ARM throttling errors causing cluster upgrades to fail. Instead, we recommend staggering the maintenance windows for each cluster to avoid these errors.
Next steps
To get started with upgrading your AKS cluster, seeUpgrade options for AKS clusters.
Azure Kubernetes Service

Additional resources