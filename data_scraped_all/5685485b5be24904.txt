Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Deploy ARM templates by using GitHub Actions
Article
2024-09-27
10 contributors
In this article
GitHub Actionsis a suite of features in GitHub to automate your software development workflows in the same place you store code and collaborate on pull requests and issues.
Use theDeploy Azure Resource Manager Template Actionto automate deploying an Azure Resource Manager template (ARM template) to Azure.
Prerequisites
An Azure account with an active subscription.Create an account for free.
An Azure account with an active subscription.Create an account for free.
A GitHub account. If you don't have one, sign up forfree.A GitHub repository to store your Resource Manager templates and your workflow files. To create one, seeCreating a new repository.
A GitHub account. If you don't have one, sign up forfree.
A GitHub repository to store your Resource Manager templates and your workflow files. To create one, seeCreating a new repository.
Workflow file overview
A workflow is defined by a YAML (.yml) file in the/.github/workflows/path in your repository. This definition contains the various steps and parameters that make up the workflow.
/.github/workflows/
The file has two sections:
Generate deployment credentials
OpenID Connect
Service principal
To useAzure Login actionwith OIDC, you need to configure a federated identity credential on a Microsoft Entra application or a user-assigned managed identity.
Option 1: Microsoft Entra application
Create a Microsoft Entra application with a service principal byAzure portal,Azure CLI, orAzure PowerShell.
Copy the values forClient ID,Subscription ID, andDirectory (tenant) IDto use later in your GitHub Actions workflow.
Assign an appropriate role to your service principal byAzure portal,Azure CLI, orAzure PowerShell.
Configure a federated identity credential on a Microsoft Entra applicationto trust tokens issued by GitHub Actions to your GitHub repository.
Option 2: User-assigned managed identity
Create a user-assigned managed identity.
Copy the values forClient ID,Subscription ID, andDirectory (tenant) IDto use later in your GitHub Actions workflow.
Assign an appropriate role to your user-assigned managed identity.
Configure a federated identity credential on a user-assigned managed identityto trust tokens issued by GitHub Actions to your GitHub repository.
Create a Microsoft Entra application with a service principal byAzure portal,Azure CLI, orAzure PowerShell.
Create a client secret for your service principal byAzure portal,Azure CLI, orAzure PowerShell.
Copy the values forClient ID,Client Secret,Subscription ID, andDirectory (tenant) IDto use later in your GitHub Actions workflow.
Assign an appropriate role to your service principal byAzure portal,Azure CLI, orAzure PowerShell.
Configure the GitHub secrets
OpenID Connect
Service principal
You need to provide your application'sClient ID,Directory (tenant) ID, andSubscription IDto the login action. These values can either be provided directly in the workflow or can be stored in GitHub secrets and referenced in your workflow. Saving the values as GitHub secrets is the more secure option.
InGitHub, go to your repository.
InGitHub, go to your repository.
SelectSecurity > Secrets and variables > Actions.
SelectSecurity > Secrets and variables > Actions.

SelectNew repository secret.NoteTo enhance workflow security in public repositories, useenvironment secretsinstead of repository secrets. If the environment requires approval, a job cannot access environment secrets until one of the required reviewers approves it.
SelectNew repository secret.
Note
To enhance workflow security in public repositories, useenvironment secretsinstead of repository secrets. If the environment requires approval, a job cannot access environment secrets until one of the required reviewers approves it.
Create secrets forAZURE_CLIENT_ID,AZURE_TENANT_ID, andAZURE_SUBSCRIPTION_ID. Copy these values from your Microsoft Entra application or user-assigned managed identity for your GitHub secrets:GitHub secretMicrosoft Entra application or user-assigned managed identityAZURE_CLIENT_IDClient IDAZURE_SUBSCRIPTION_IDSubscription IDAZURE_TENANT_IDDirectory (tenant) IDNoteFor security reasons, we recommend using GitHub Secrets rather than passing values directly to the workflow.
Create secrets forAZURE_CLIENT_ID,AZURE_TENANT_ID, andAZURE_SUBSCRIPTION_ID. Copy these values from your Microsoft Entra application or user-assigned managed identity for your GitHub secrets:
AZURE_CLIENT_ID
AZURE_TENANT_ID
AZURE_SUBSCRIPTION_ID
Note
For security reasons, we recommend using GitHub Secrets rather than passing values directly to the workflow.
InGitHub, go to your repository.
InGitHub, go to your repository.
Go toSettingsin the navigation menu.
Go toSettingsin the navigation menu.
SelectSecurity > Secrets and variables > Actions.
SelectSecurity > Secrets and variables > Actions.

SelectNew repository secret.
SelectNew repository secret.
Paste the entire JSON output from the Azure CLI command into the secret's value field. Give the secret the nameAZURE_CREDENTIALS.
Paste the entire JSON output from the Azure CLI command into the secret's value field. Give the secret the nameAZURE_CREDENTIALS.
AZURE_CREDENTIALS
SelectAdd secret.
SelectAdd secret.
Add Resource Manager template
Add a Resource Manager template to your GitHub repository. This template creates a storage account.
https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/quickstarts/microsoft.storage/storage-account-create/azuredeploy.json
https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/quickstarts/microsoft.storage/storage-account-create/azuredeploy.json
You can put the file anywhere in the repository. The workflow sample in the next section assumes the template file is namedazuredeploy.json, and it's stored at the root of your repository.
Create workflow
The workflow file must be stored in the.github/workflowsfolder at the root of your repository. The workflow file extension can be either.ymlor.yaml.
From your GitHub repository, selectActionsfrom the top menu.
SelectNew workflow.
Selectset up a workflow yourself.
Rename the workflow file if you prefer a different name other thanmain.yml. For example:deployStorageAccount.yml.
Replace the content of the yml file with the following:
Service principal
OpenID Connect
on: [push]
  name: Azure ARM
  jobs:
    build-and-deploy:
      runs-on: ubuntu-latest
      steps:

        # Checkout code
      - uses: actions/checkout@main

        # Log into Azure
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

        # Deploy ARM template
      - name: Run ARM deploy
        uses: azure/arm-deploy@v1
        with:
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
          resourceGroupName: ${{ secrets.AZURE_RG }}
          template: ./azuredeploy.json
          parameters: storageAccountType=Standard_LRS

        # output containerName variable from template
      - run: echo ${{ steps.deploy.outputs.containerName }}
on: [push]
  name: Azure ARM
  jobs:
    build-and-deploy:
      runs-on: ubuntu-latest
      steps:

        # Checkout code
      - uses: actions/checkout@main

        # Log into Azure
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

        # Deploy ARM template
      - name: Run ARM deploy
        uses: azure/arm-deploy@v1
        with:
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
          resourceGroupName: ${{ secrets.AZURE_RG }}
          template: ./azuredeploy.json
          parameters: storageAccountType=Standard_LRS

        # output containerName variable from template
      - run: echo ${{ steps.deploy.outputs.containerName }}
Note
You can specify a JSON format parameters file instead in the ARM Deploy action (example:.azuredeploy.parameters.json).
.azuredeploy.parameters.json
The first section of the workflow file includes:
name: The name of the workflow.
on: The name of the GitHub events that triggers the workflow. The workflow is trigger when there's a push event on the main branch, which modifies at least one of the two files specified. The two files are the workflow file and the template file.
on: [push]
  name: Azure ARM
  jobs:
    build-and-deploy:
      runs-on: ubuntu-latest
      steps:

        # Checkout code
      - uses: actions/checkout@main

        # Log into Azure
      - uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

        # Deploy ARM template
      - name: Run ARM deploy
        uses: azure/arm-deploy@v1
        with:
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
          resourceGroupName: ${{ secrets.AZURE_RG }}
          template: ./azuredeploy.json
          parameters: storageAccountType=Standard_LRS

        # output containerName variable from template
      - run: echo ${{ steps.deploy.outputs.containerName }}
on: [push]
  name: Azure ARM
  jobs:
    build-and-deploy:
      runs-on: ubuntu-latest
      steps:

        # Checkout code
      - uses: actions/checkout@main

        # Log into Azure
      - uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

        # Deploy ARM template
      - name: Run ARM deploy
        uses: azure/arm-deploy@v1
        with:
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
          resourceGroupName: ${{ secrets.AZURE_RG }}
          template: ./azuredeploy.json
          parameters: storageAccountType=Standard_LRS

        # output containerName variable from template
      - run: echo ${{ steps.deploy.outputs.containerName }}
Note
You can specify a JSON format parameters file instead in the ARM Deploy action (example:.azuredeploy.parameters.json).
.azuredeploy.parameters.json
The first section of the workflow file includes:
name: The name of the workflow.
on: The name of the GitHub events that triggers the workflow. The workflow is trigger when there's a push event on the main branch, which modifies at least one of the two files specified. The two files are the workflow file and the template file.
SelectStart commit.
SelectCommit directly to the main branch.
SelectCommit new file(orCommit changes).
Because the workflow is configured to be triggered by either the workflow file or the template file being updated, the workflow starts right after you commit the changes.
Check workflow status
Select theActionstab. You see aCreate deployStorageAccount.ymlworkflow listed. It takes 1-2 minutes to run the workflow.
Select the workflow to open it.
SelectRun ARM deployfrom the menu to verify the deployment.
Clean up resources
When your resource group and repository are no longer needed, clean up the resources you deployed by deleting the resource group and your GitHub repository.
Next steps
Create your first ARM template
Learn module: Automate the deployment of ARM templates by using GitHub Actions
Feedback
Was this page helpful?
Additional resources