Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Set up a Service Fabric backend in API Management using the Azure portal
How-to
2023-03-09
3 contributors
In this article
This article shows how to configure aService Fabricservice as a custom API backend using the Azure portal. For demonstration purposes, it shows how to set up a basic stateless ASP.NET Core Reliable Service as the Service Fabric backend.
For background, seeBackends in API Management.
Prerequisites
Prerequisites to configure a sample service in a Service Fabric cluster running Windows as a custom backend:
Windows development environment- InstallVisual Studio 2019and theAzure development,ASP.NET and web development, and.NET Core cross-platform developmentworkloads. Then set up a.NET development environment.
Windows development environment- InstallVisual Studio 2019and theAzure development,ASP.NET and web development, and.NET Core cross-platform developmentworkloads. Then set up a.NET development environment.
Service Fabric cluster- SeeTutorial: Deploy a Service Fabric cluster running Windows into an Azure virtual network. You can create a cluster with an existing X.509 certificate or for test purposes create a new, self-signed certificate. The cluster is created in a virtual network.
Service Fabric cluster- SeeTutorial: Deploy a Service Fabric cluster running Windows into an Azure virtual network. You can create a cluster with an existing X.509 certificate or for test purposes create a new, self-signed certificate. The cluster is created in a virtual network.
Sample Service Fabric app-  Create a Web API app and deploy to the Service Fabric cluster as described inIntegrate API Management with Service Fabric in Azure.These steps create a basic stateless ASP.NET Core Reliable Service using the default Web API project template. Later, you expose the HTTP endpoint for this service through Azure API Management.Take note of the application name, for examplefabric:/myApplication/myService.
Sample Service Fabric app-  Create a Web API app and deploy to the Service Fabric cluster as described inIntegrate API Management with Service Fabric in Azure.
These steps create a basic stateless ASP.NET Core Reliable Service using the default Web API project template. Later, you expose the HTTP endpoint for this service through Azure API Management.
Take note of the application name, for examplefabric:/myApplication/myService.
fabric:/myApplication/myService
API Management instance- An existing or new API Management instance in thePremiumorDevelopertier and in the same region as the Service Fabric cluster. If you need one,create an API Management instance.
API Management instance- An existing or new API Management instance in thePremiumorDevelopertier and in the same region as the Service Fabric cluster. If you need one,create an API Management instance.
Virtual network- Add your API Management instance to the virtual network you created for your Service Fabric cluster. API Management requires a dedicated subnet in the virtual network.For steps to enable virtual network connectivity for the API Management instance, seeHow to use Azure API Management with virtual networks.
Virtual network- Add your API Management instance to the virtual network you created for your Service Fabric cluster. API Management requires a dedicated subnet in the virtual network.
For steps to enable virtual network connectivity for the API Management instance, seeHow to use Azure API Management with virtual networks.
Create backend - portal
Add Service Fabric cluster certificate to API Management
The Service Fabric cluster certificate is stored and managed in an Azure key vault associated with the cluster. Add this certificate to your API Management instance as a client certificate.
For steps to add a certificate to your API Management instance, seeHow to secure backend services using client certificate authentication in Azure API Management.
Note
We recommend adding the certificate to API Management by referencing the key vault certificate.
Add Service Fabric backend
In theAzure portal, navigate to your API Management instance.
In theAzure portal, navigate to your API Management instance.
UnderAPIs, selectBackends>+ Add.
UnderAPIs, selectBackends>+ Add.
Enter a backend name and an optional description
Enter a backend name and an optional description
InType, selectService Fabric.
InType, selectService Fabric.
InRuntime URL, enter the name of the Service Fabric backend service that API Management will forward requests to. Example:fabric:/myApplication/myService.
InRuntime URL, enter the name of the Service Fabric backend service that API Management will forward requests to. Example:fabric:/myApplication/myService.
fabric:/myApplication/myService
InMaximum number of partition resolution retries, enter a number between 0 and 10.
InMaximum number of partition resolution retries, enter a number between 0 and 10.
Enter the management endpoint of the Service Fabric cluster. This endpoint is the URL of the cluster on port19080, for example,https://mysfcluster.eastus.cloudapp.azure.com:19080.
Enter the management endpoint of the Service Fabric cluster. This endpoint is the URL of the cluster on port19080, for example,https://mysfcluster.eastus.cloudapp.azure.com:19080.
19080
https://mysfcluster.eastus.cloudapp.azure.com:19080
InClient certificate, select the Service Fabric cluster certificate you added to your API Management instance in the previous section.
InClient certificate, select the Service Fabric cluster certificate you added to your API Management instance in the previous section.
InManagement endpoint authorization method, enter a thumbprint or server X509 name of a certificate used by the Service Fabric cluster management service for TLS communication.
InManagement endpoint authorization method, enter a thumbprint or server X509 name of a certificate used by the Service Fabric cluster management service for TLS communication.
Enable theValidate certificate chainandValidate certificate namesettings.
Enable theValidate certificate chainandValidate certificate namesettings.
InAuthorization credentials, provide credentials, if necessary, to reach the configured backend service in Service Fabric. For the sample app used in this scenario, authorization credentials aren't needed.
InAuthorization credentials, provide credentials, if necessary, to reach the configured backend service in Service Fabric. For the sample app used in this scenario, authorization credentials aren't needed.
SelectCreate.
SelectCreate.

Use the backend
To use a custom backend, reference it using theset-backend-servicepolicy. This policy transforms the default backend service base URL of an incoming API request to a specified backend, in this case the Service Fabric backend.
set-backend-service
Theset-backend-servicepolicy can be useful with an existing API to transform an incoming request to a different backend than the one specified in the API settings. For demonstration purposes in this article, create a test API and set the policy to direct API requests to the Service Fabric backend.
set-backend-service
Create API
Follow the steps inAdd an API manuallyto create a blank API.
In the API settings, leave theWeb service URLblank.
In the API settings, leave theWeb service URLblank.
Add anAPI URL suffix, such asfabric.
Add anAPI URL suffix, such asfabric.

Add GET operation to the API
As shown inDeploy a Service Fabric back-end service, the sample ASP.NET Core service deployed on the Service Fabric cluster supports a single HTTP GET operation on the URL path/api/values.
/api/values
The default response on that path is a JSON array of two strings:
["value1", "value2"]
["value1", "value2"]
To test the integration of API Management with the cluster, add the corresponding GET operation to the API on the path/api/values:
/api/values
Select the API you created in the previous step.
Select the API you created in the previous step.
Select+ Add Operation.
Select+ Add Operation.
In theFrontendwindow, enter the following values, and selectSave.SettingValueDisplay nameTest backendURLGETURL/api/values
In theFrontendwindow, enter the following values, and selectSave.
/api/values

Configureset-backend-servicepolicy
set-backend-service
Add theset-backend-servicepolicy to the test API.
set-backend-service
On theDesigntab, in theInbound processingsection, select the code editor (</>) icon.
On theDesigntab, in theInbound processingsection, select the code editor (</>) icon.
Position the cursor inside the<inbound>element
Position the cursor inside the<inbound>element
Add theset-service-backendpolicy statement.Inbackend-id, substitute the name of your Service Fabric backend.Thesf-resolve-conditionis a condition for re-resolving a service location and resending a request. The number of retries was set when configuring the backend. For example:<set-backend-service backend-id="mysfbackend" sf-resolve-condition="@(context.LastError?.Reason == "BackendConnectionFailure")"/>
Add theset-service-backendpolicy statement.
set-service-backend
Inbackend-id, substitute the name of your Service Fabric backend.
Inbackend-id, substitute the name of your Service Fabric backend.
backend-id
Thesf-resolve-conditionis a condition for re-resolving a service location and resending a request. The number of retries was set when configuring the backend. For example:<set-backend-service backend-id="mysfbackend" sf-resolve-condition="@(context.LastError?.Reason == "BackendConnectionFailure")"/>
Thesf-resolve-conditionis a condition for re-resolving a service location and resending a request. The number of retries was set when configuring the backend. For example:
sf-resolve-condition
<set-backend-service backend-id="mysfbackend" sf-resolve-condition="@(context.LastError?.Reason == "BackendConnectionFailure")"/>
<set-backend-service backend-id="mysfbackend" sf-resolve-condition="@(context.LastError?.Reason == "BackendConnectionFailure")"/>
SelectSave.
SelectSave.

Note
If one or more nodes in the Service Fabric cluster goes down or is removed, API Management does not get an automatic notification and continues to send traffic to these nodes. To handle these cases, configure a resolve condition similar to:sf-resolve-condition="@((int)context.Response.StatusCode != 200 || context.LastError?.Reason == "BackendConnectionFailure" || context.LastError?.Reason == "Timeout")"
sf-resolve-condition="@((int)context.Response.StatusCode != 200 || context.LastError?.Reason == "BackendConnectionFailure" || context.LastError?.Reason == "Timeout")"
Test backend API
On theTesttab, select theGEToperation you created in a previous section.
On theTesttab, select theGEToperation you created in a previous section.
SelectSend.When properly configured, the HTTP response shows an HTTP success code and displays the JSON returned from the backend Service Fabric service.
SelectSend.
When properly configured, the HTTP response shows an HTTP success code and displays the JSON returned from the backend Service Fabric service.

Related content
REST API
Azure PowerShell
Azure Resource Manager templates
Feedback
Was this page helpful?