Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Glossary: Microsoft identity platform
Article
2024-03-20
29 contributors
In this article
You see these terms when you use our documentation, the Microsoft Entra admin center, our authentication libraries, and the Microsoft Graph API. Some terms are Microsoft-specific while others are related to protocols like OAuth or other technologies you use with the Microsoft identity platform.
Access token
A type ofsecurity tokenissued by anauthorization serverand used by aclient applicationto access aprotected resource server. Typically in the form of aJSON Web Token (JWT), the token embodies the authorization granted to the client by theresource owner, for a requested level of access. The token contains all applicableclaimsabout the subject, enabling the client application to use it as a form of credential when accessing a given resource. This also eliminates the need for the resource owner to expose credentials to the client.
Access tokens are only valid for a short period of time and can't be revoked. An authorization server may also issue arefresh tokenwhen the access token is issued. Refresh tokens are typically provided only to confidential client applications.
Access tokens are sometimes referred to as "User+App" or "App-Only", depending on the credentials being represented. For example, when a client application uses the:
"Authorization code" authorization grant, the end user authenticates first as the resource owner, delegating authorization to the client to access the resource. The client authenticates afterward when obtaining the access token. The token can sometimes be referred to more specifically as a "User+App" token, as it represents both the user that authorized the client application, and the application.
"Client credentials" authorization grant, the client provides the sole authentication, functioning without the resource-owner's authentication/authorization, so the token can sometimes be referred to as an "App-Only" token.
See theaccess tokens referencefor more details.
Actor
Another term for theclient application. The actor is the party acting on behalf of a subject (resource owner).
Application (client) ID
The application ID, orclient ID, is a value the Microsoft identity platform assigns to your application when you register it in Microsoft Entra ID. The application ID is a GUID value that uniquely identifies the application and its configuration within the identity platform. You add the app ID to your application's code, and authentication libraries include the value in their requests to the identity platform at application runtime. The application (client) ID isn't a secret - don't use it as a password or other credential.
Application manifest
An application manifest is a feature that produces a JSON representation of the application's identity configuration, used as a mechanism for updating its associatedApplicationandServicePrincipalentities. SeeUnderstanding the Microsoft Entra application manifestfor more details.
Application object
When you register/update an application, both an application object and a correspondingservice principal objectare created/updated for that tenant. The application objectdefinesthe application's identity configuration globally (across all tenants where it has access), providing a template from which its corresponding service principal object(s) arederivedfor use locally at run-time (in a specific tenant).
For more information, seeApplication and Service Principal Objects.
Application registration
In order to allow an application to integrate with and delegate Identity and Access Management functions to Microsoft Entra ID, it must be registered with a Microsoft Entratenant. When you register your application with Microsoft Entra ID, you're providing an identity configuration for your application, allowing it to integrate with Microsoft Entra ID and use features like:
Robust management of single sign-on using Microsoft Entra identity management andOpenID Connectprotocol implementation
Brokered access toprotected resourcesbyclient applications, via OAuth 2.0authorization server
Consent frameworkfor managing client access to protected resources, based on resource owner authorization.
SeeIntegrating applications with Microsoft Entra IDfor more details.
Authentication
The act of challenging a party for legitimate credentials, providing the basis for creation of a security principal to be used for identity and access control. During anOAuth 2.0 authorization grantfor example, the party authenticating is filling the role of eitherresource ownerorclient application, depending on the grant used.
Authorization
The act of granting an authenticated security principal permission to do something. There are two primary use cases in the Microsoft Entra programming model:
During anOAuth 2.0 authorization grantflow: when theresource ownergrants authorization to theclient application, allowing the client to access the resource owner's resources.
During resource access by the client: as implemented by theresource server, using theclaimvalues present in theaccess tokento make access control decisions based upon them.
Authorization code
A short-lived value provided by theauthorization endpointto aclient applicationduring the OAuth 2.0authorization code grant flow, one of the four OAuth 2.0authorization grants. Also called anauth code, the authorization code is returned to the client application in response to the authentication of aresource owner. The auth code indicates the resource owner has delegated authorization to the client application to access their resources. As part of the flow, the auth code is later redeemed for anaccess token.
Authorization endpoint
One of the endpoints implemented by theauthorization server, used to interact with theresource ownerto provide anauthorization grantduring an OAuth 2.0 authorization grant flow. Depending on the authorization grant flow used, the actual grant provided can vary, including anauthorization codeorsecurity token.
See the OAuth 2.0 specification'sauthorization grant typesandauthorization endpointsections, and theOpenIDConnect specificationfor more details.
Authorization grant
A credential representing theresource owner'sauthorizationto access its protected resources, granted to aclient application. A client application can use one of thefour grant types defined by the OAuth 2.0 Authorization Frameworkto obtain a grant, depending on client type/requirements: "authorization code grant", "client credentials grant", "implicit grant", and "resource owner password credentials grant". The credential returned to the client is either anaccess token, or anauthorization code(exchanged later for an access token), depending on the type of authorization grant used.
The resource owner password credentials grantshouldn't be usedexcept in scenarios when other flows can't be used. If you are building a SPA, use theauthorization code flow with PKCE instead of implicit grant.
Authorization server
As defined by theOAuth 2.0 Authorization Framework, the server responsible for issuing access tokens to theclientafter successfully authenticating theresource ownerand obtaining its authorization. Aclient applicationinteracts with the authorization server at runtime via itsauthorizationandtokenendpoints, in accordance with the OAuth 2.0 definedauthorization grants.
In the case of the Microsoft identity platform application integration, the Microsoft identity platform implements the authorization server role for Microsoft Entra applications and Microsoft service APIs, for exampleMicrosoft Graph APIs.
Claim
Claims are name/values pairs in asecurity tokenthat provide assertions made by one entity to another. These entities are typically theclient applicationor aresource ownerproviding assertions to aresource server. Claims relay facts about the token subject like the ID of the security principal that was authenticated by theauthorization server. The claims present in a token can vary and depend on several factors like the type of token, type of credential used for authenticating the subject, the application configuration, and others.
See theMicrosoft identity platform token referencefor more details.
Client application
Also known as the "actor".  As defined by theOAuth 2.0 Authorization Framework, an application that makes protected resource requests on behalf of theresource owner.  They receive permissions from the resource owner in the form of scopes. The term "client" doesn't imply any particular hardware implementation characteristics (for instance, whether the application executes on a server, a desktop, or other devices).
A client application requestsauthorizationfrom a resource owner to participate in anOAuth 2.0 authorization grantflow, and may access APIs/data on the resource owner's behalf. The OAuth 2.0 Authorization Frameworkdefines two types of clients, "confidential" and "public", based on the client's ability to maintain the confidentiality of its credentials. Applications can implement aweb client (confidential)which runs on a web server, anative client (public)installed on a device, or auser-agent-based client (public)which runs in a device's browser.
Consent
The process of aresource ownergranting authorization to aclient application, to access protected resources under specificpermissions, on behalf of the resource owner. Depending on the permissions requested by the client, an administrator or user will be asked for consent to allow access to their organization/individual data respectively. Note, in amulti-tenantscenario, the application'sservice principalis also recorded in the tenant of the consenting user.
Seeconsent frameworkfor more information.
ID token
AnOpenID Connectsecurity tokenprovided by anauthorization server'sauthorization endpoint, which containsclaimspertaining to the authentication of an end userresource owner. Like an access token, ID tokens are also represented as a digitally signedJSON Web Token (JWT). Unlike an access token though, an ID token's claims aren't used for purposes related to resource access and specifically access control.
See theID token referencefor more details.
Managed identities
Eliminate the need for developers to manage credentials. Managed identities provide an identity for applications to use when connecting to resources that support Microsoft Entra authentication. Applications may use the managed identity to obtain Microsoft identity platform tokens. For example, an application may use a managed identity to access resources like Azure Key Vault where developers can store credentials in a secure manner or to access storage accounts. For more information, seemanaged identities overview.
Microsoft identity platform
The Microsoft identity platform is an evolution of the Microsoft Entra identity service and developer platform. It allows developers to build applications that sign in all Microsoft identities, get tokens to call Microsoft Graph, other Microsoft APIs, or APIs that developers have built. It's a full-featured platform that consists of an authentication service, libraries, application registration and configuration, full developer documentation, code samples, and other developer content. The Microsoft identity platform supports industry standard protocols such as OAuth 2.0 and OpenID Connect.
Multi-tenant application
A class of application that enables sign in andconsentby users provisioned in any Microsoft Entratenant, including tenants other than the one where the client is registered.Native clientapplications are multi-tenant by default, whereasweb clientandweb resource/APIapplications have the ability to select between single or multi-tenant. By contrast, a web application registered as single-tenant, would only allow sign-ins from user accounts provisioned in the same tenant as the one where the application is registered.
SeeHow to sign in any Microsoft Entra user using the multi-tenant application patternfor more details.
Native client
A type ofclient applicationthat is installed natively on a device. Since all code is executed on a device, it's considered a "public" client due to its inability to store credentials privately/confidentially. SeeOAuth 2.0 client types and profilesfor more details.
Permissions
Aclient applicationgains access to aresource serverby declaring permission requests. Two types are available:
"Delegated" permissions, which specifyscope-basedaccess using delegated authorization from the signed-inresource owner, are presented to the resource at run-time as"scp" claimsin the client'saccess token. These indicate the permission granted to theactorby thesubject.
"Application" permissions, which specifyrole-basedaccess using the client application's credentials/identity, are presented to the resource at run-time as"roles" claimsin the client's access token.  These indicate permissions granted to thesubjectby the tenant.
They also surface during theconsentprocess, giving the administrator or resource owner the opportunity to grant/deny the client access to resources in their tenant.
Permission requests are configured on theAPI permissionspage for an application, by selecting the desired "Delegated Permissions" and "Application Permissions" (the latter requires membership in the Global Administrator role). Because apublic clientcan't securely maintain credentials, it can only request delegated permissions, while aconfidential clienthas the ability to request both delegated and application permissions. The client'sapplication objectstores the declared permissions in itsrequiredResourceAccess property.
Refresh token
A type ofsecurity tokenissued by anauthorization server. Before an access token expires, aclient applicationincludes its associated refresh token when it requests a newaccess tokenfrom the authorization server. Refresh tokens are typically formatted as aJSON Web Token (JWT).
Unlike access tokens, refresh tokens can be revoked. An authorization server denies any request from a client application that includes a refresh token that has been revoked. When the authorization server denies a request that includes a revoked refresh token, the client application loses the permission to access theresource serveron behalf of theresource owner.
See therefresh tokensfor more details.
Resource owner
As defined by theOAuth 2.0 Authorization Framework, an entity capable of granting access to a protected resource. When the resource owner is a person, it's referred to as an end user. For example, when aclient applicationwants to access a user's mailbox through theMicrosoft Graph API, it requires permission from the resource owner of the mailbox. The "resource owner" is also sometimes called thesubject.
Everysecurity tokenrepresents a resource owner.  The resource owner is what the subjectclaim, object ID claim, and personal data in the token represent.  Resource owners are the party that grants delegated permissions to a client application, in the form of scopes.  Resource owners are also the recipients ofrolesthat indicate expanded permissions within a tenant or on an application.
Resource server
As defined by theOAuth 2.0 Authorization Framework, a server that hosts protected resources, capable of accepting and responding to protected resource requests byclient applicationsthat present anaccess token. Also known as a protected resource server, or resource application.
A resource server exposes APIs and enforces access to its protected resources throughscopesandroles, using the OAuth 2.0 Authorization Framework. Examples include theMicrosoft Graph API, which provides access to Microsoft Entra tenant data, and the Microsoft 365 APIs that provide access to data such as mail and calendar.
Just like a client application, resource application's identity configuration is established viaregistrationin a Microsoft Entra tenant, providing both the application and service principal object. Some Microsoft-provided APIs, such as the Microsoft Graph API, have pre-registered service principals made available in all tenants during provisioning.
Roles
Likescopes, app roles provide a way for aresource serverto govern access to its protected resources. Unlike scopes, roles represent privileges that thesubjecthas been granted beyond the baseline - this is why reading your own email is a scope, while being an email administrator that can read everyone's email is a role.
App roles can support two assignment types: "user" assignment implements role-based access control for users/groups that require access to the resource, while "application" assignment implements the same forclient applicationsthat require access. An app role can be defined as user-assignable, app-assignable, or both.
Roles are resource-defined strings (for example "Expense approver", "Read-only", "Directory.ReadWrite.All"), managed via the resource'sapplication manifest, and stored in the resource'sappRoles property. Users can be assigned to "user" assignable roles and clientapplication permissionscan be configured to request "application" assignable roles.
For a detailed discussion of the application roles exposed by the Microsoft Graph API, seeGraph API Permission Scopes. For a step-by-step implementation example, seeAdd or remove Azure role assignments.
Scopes
Likeroles, scopes provide a way for aresource serverto govern access to its protected resources. Scopes are used to implementscope-basedaccess control, for aclient applicationthat has been given delegated access to the resource by its owner.
Scopes are resource-defined strings (for example "Mail.Read", "Directory.ReadWrite.All"), managed via the resource'sapplication manifest, and stored in the resource'soauth2Permissions property. Client applicationdelegated permissionscan be configured to access a scope.
A best practice naming convention, is to use a "resource.operation.constraint" format. For a detailed discussion of the scopes exposed by Microsoft Graph API, seeGraph API Permission Scopes. For scopes exposed by Microsoft 365 services, seeMicrosoft 365 API permissions reference.
Security token
A signed document containing claims, such as an OAuth 2.0 token or SAML 2.0 assertion. For an OAuth 2.0authorization grant, anaccess token(OAuth2),refresh token, and anID Tokenare types of security tokens, all of which are implemented as aJSON Web Token (JWT).
Service principal object
When you register/update an application, both anapplication objectand a corresponding service principal object are created/updated for that tenant. The application objectdefinesthe application's identity configuration globally (across all tenants where the associated application has been granted access), and is the template from which its corresponding service principal object(s) arederivedfor use locally at run-time (in a specific tenant).
For more information, seeApplication and Service Principal Objects.
Sign-in
The process of aclient applicationinitiating end-user authentication and capturing related state for requesting asecurity tokenand scoping the application session to that state. State can include artifacts like user profile information, and information derived from token claims.
The sign-in function of an application is typically used to implement single-sign-on (SSO). It may also be preceded by a "sign-up" function, as the entry point for an end user to gain access to an application (upon first sign-in). The sign-up function is used to gather and persist additional state specific to the user, and may requireuser consent.
Sign-out
The process of unauthenticating an end user, detaching the user state associated with theclient applicationsession duringsign-in
Subject
Also known as theresource owner.
Tenant
An instance of a Microsoft Entra directory is referred to as a Microsoft Entra tenant. It provides several features, including:
a registry service for integrated applications
authentication of user accounts and registered applications
REST endpoints required to support various protocols including OAuth 2.0 and SAML, including theauthorization endpoint,token endpointand the "common" endpoint used bymulti-tenant applications.
Microsoft Entra tenants are created/associated with Azure and Microsoft 365 subscriptions during sign-up, providing Identity & Access Management features for the subscription. Azure subscription administrators can also create additional Microsoft Entra tenants. SeeHow to get a Microsoft Entra tenantfor details on the various ways you can get access to a tenant. SeeAssociate or add an Azure subscription to your Microsoft Entra tenantfor details on the relationship between subscriptions and a Microsoft Entra tenant, and for instructions on how to associate or add a subscription to a Microsoft Entra tenant.
Token endpoint
One of the endpoints implemented by theauthorization serverto support OAuth 2.0authorization grants. Depending on the grant, it can be used to acquire anaccess token(and related "refresh" token) to aclient, orID tokenwhen used with theOpenID Connectprotocol.
User-agent-based client
A type ofclient applicationthat downloads code from a web server and executes within a user-agent (for instance, a web browser), such as a single-page application (SPA). Since all code is executed on a device, it's considered a "public" client due to its inability to store credentials privately/confidentially. For more information, seeOAuth 2.0 client types and profiles.
User principal
Similar to the way a service principal object is used to represent an application instance, a user principal object is another type of security principal, which represents a user. The Microsoft GraphUserresource typedefines the schema for a user object, including user-related properties like first and last name, user principal name, directory role membership, and so on. This provides the user identity configuration for Microsoft Entra ID to establish a user principal at run-time. The user principal is used to represent an authenticated user for single sign-on, recordingconsentdelegation, making access control decisions, and so on.
User
Web client
A type ofclient applicationthat executes all code on a web server, functioning as aconfidential clientbecause it can securely store its credentials on the server. For more information, seeOAuth 2.0 client types and profiles.
Workload identity
An identity used by a software workload like an application, service, script, or container to authenticate and access other services and resources. In Microsoft Entra ID, workload identities are apps, service principals, and managed identities.  For more information, seeworkload identity overview.
Workload identity federation
Allows you to securely access Microsoft Entra protected resources from external apps and services without needing to manage secrets (for supported scenarios).  For more information, seeworkload identity federation.
Next steps
Many of the terms in this glossary are related to the OAuth 2.0 and OpenID Connect protocols. Though you don't need to know how the protocols work "on the wire" to use the identity platform, knowing some protocol basics can help you more easily build and debug authentication and authorization in your apps:
OAuth 2.0 and OpenID Connect (OIDC) in the Microsoft identity platform
Feedback
Was this page helpful?
Additional resources