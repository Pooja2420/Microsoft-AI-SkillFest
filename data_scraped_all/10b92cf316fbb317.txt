Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Quickstart: Azure Blob Storage client library for .NET
Article
2024-09-13
21 contributors
In this article
Note
TheBuild from scratchoption walks you step by step through the process of creating a new project, installing packages, writing the code, and running a basic console app. This approach is recommended if you want to understand all the details involved in creating an app that connects to Azure Blob Storage. If you prefer to automate deployment tasks and start with a completed project, chooseStart with a template.
Note
TheStart with a templateoption uses the Azure Developer CLI to automate deployment tasks and starts you off with a completed project. This approach is recommended if you want to explore the code as quickly as possible without going through the setup tasks. If you prefer step by step instructions to build the app, chooseBuild from scratch.
Get started with the Azure Blob Storage client library for .NET. Azure Blob Storage is Microsoft's object storage solution for the cloud, and is optimized for storing massive amounts of unstructured data.
In this article, you follow steps to install the package and try out example code for basic tasks.
In this article, you use theAzure Developer CLIto deploy Azure resources and run a completed console app with just a few commands.
API reference documentation|Library source code|Package (NuGet)|Samples
This video shows you how to start using the Azure Blob Storage client library for .NET.
The steps in the video are also described in the following sections.
Prerequisites
Azure subscription -create one for free
Azure storage account -create a storage account
Latest.NET SDKfor your operating system. Be sure to get the SDK and not the runtime.
Azure subscription -create one for free
Latest.NET SDKfor your operating system. This code sample uses .NET 8.0. Be sure to get the SDK and not the runtime.
Azure Developer CLI
Setting up
This section walks you through preparing a project to work with the Azure Blob Storage client library for .NET.
Create the project
Create a .NET console app using either the .NET CLI or Visual Studio 2022.
Visual Studio 2022
.NET CLI
At the top of Visual Studio, navigate toFile>New>Project...
At the top of Visual Studio, navigate toFile>New>Project...
In the dialog window, enterconsole appinto the project template search box and select the first result. ChooseNextat the bottom of the dialog.
In the dialog window, enterconsole appinto the project template search box and select the first result. ChooseNextat the bottom of the dialog.

For theProject Name, enterBlobQuickstart. Leave the default values for the rest of the fields and selectNext.
For theProject Name, enterBlobQuickstart. Leave the default values for the rest of the fields and selectNext.
For theFramework, ensure the latest installed version of .NET is selected. Then chooseCreate. The new project opens inside the Visual Studio environment.
For theFramework, ensure the latest installed version of .NET is selected. Then chooseCreate. The new project opens inside the Visual Studio environment.
In a console window (such as cmd, PowerShell, or Bash), use thedotnet newcommand to create a new console app with the nameBlobQuickstart. This command creates a simple "Hello World" C# project with a single source file:Program.cs.dotnet new console -n BlobQuickstart
In a console window (such as cmd, PowerShell, or Bash), use thedotnet newcommand to create a new console app with the nameBlobQuickstart. This command creates a simple "Hello World" C# project with a single source file:Program.cs.
dotnet new
dotnet new console -n BlobQuickstart
dotnet new console -n BlobQuickstart
Switch to the newly createdBlobQuickstartdirectory.cd BlobQuickstart
Switch to the newly createdBlobQuickstartdirectory.
cd BlobQuickstart
cd BlobQuickstart
Open the project in your desired code editor. To open the project in:Visual Studio, locate and double-click theBlobQuickStart.csprojfile.Visual Studio Code, run the following command:code .
Open the project in your desired code editor. To open the project in:
Visual Studio, locate and double-click theBlobQuickStart.csprojfile.
BlobQuickStart.csproj
Visual Studio Code, run the following command:
code .
code .
Install the package
To interact with Azure Blob Storage, install the Azure Blob Storage client library for .NET.
Visual Studio 2022
.NET CLI
InSolution Explorer, right-click theDependenciesnode of your project. SelectManage NuGet Packages.
InSolution Explorer, right-click theDependenciesnode of your project. SelectManage NuGet Packages.
In the resulting window, search forAzure.Storage.Blobs. Select the appropriate result, and selectInstall.
In the resulting window, search forAzure.Storage.Blobs. Select the appropriate result, and selectInstall.

Use the following command to install theAzure.Storage.Blobspackage:
Azure.Storage.Blobs
dotnet add package Azure.Storage.Blobs
dotnet add package Azure.Storage.Blobs
If this command to add the package fails, follow these steps:
Make sure thatnuget.orgis added as a package source. You can list the package sources using thedotnet nuget list sourcecommand:dotnet nuget list source
Make sure thatnuget.orgis added as a package source. You can list the package sources using thedotnet nuget list sourcecommand:
nuget.org
dotnet nuget list source
dotnet nuget list source
dotnet nuget list source
If you don't seenuget.orgin the list, you can add it using thedotnet nuget add sourcecommand:dotnet nuget add source https://api.nuget.org/v3/index.json -n nuget.org
If you don't seenuget.orgin the list, you can add it using thedotnet nuget add sourcecommand:
nuget.org
dotnet nuget add source
dotnet nuget add source https://api.nuget.org/v3/index.json -n nuget.org
dotnet nuget add source https://api.nuget.org/v3/index.json -n nuget.org
Now that the package source is updated, run the command to install the package.
Set up the app code
Replace the starting code in theProgram.csfile so that it matches the following example, which includes the necessaryusingstatements for this exercise.
Program.cs
using
using Azure.Storage.Blobs;
using Azure.Storage.Blobs.Models;
using System;
using System.IO;

// See https://aka.ms/new-console-template for more information
Console.WriteLine("Hello, World!");
using Azure.Storage.Blobs;
using Azure.Storage.Blobs.Models;
using System;
using System.IO;

// See https://aka.ms/new-console-template for more information
Console.WriteLine("Hello, World!");
WithAzure Developer CLIinstalled, you can create a storage account and run the sample code with just a few commands. You can run the project in your local development environment, or in aDevContainer.
Initialize the Azure Developer CLI template and deploy resources
From an empty directory, follow these steps to initialize theazdtemplate, provision Azure resources, and get started with the code:
azd
Clone the quickstart repository assets from GitHub and initialize the template locally:azd init --template blob-storage-quickstart-dotnetYou'll be prompted for the following information:Environment name: This value is used as a prefix for all Azure resources created by Azure Developer CLI. The name must be unique across all Azure subscriptions and must be between 3 and 24 characters long. The name can contain numbers and lowercase letters only.
Clone the quickstart repository assets from GitHub and initialize the template locally:
azd init --template blob-storage-quickstart-dotnet
azd init --template blob-storage-quickstart-dotnet
You'll be prompted for the following information:
Environment name: This value is used as a prefix for all Azure resources created by Azure Developer CLI. The name must be unique across all Azure subscriptions and must be between 3 and 24 characters long. The name can contain numbers and lowercase letters only.
Log in to Azure:azd auth login
Log in to Azure:
azd auth login
azd auth login
Provision and deploy the resources to Azure:azd upYou'll be prompted for the following information:Subscription: The Azure subscription that your resources are deployed to.Location: The Azure region where your resources are deployed.The deployment might take a few minutes to complete. The output from theazd upcommand includes the name of the newly created storage account, which you'll need later to run the code.
Provision and deploy the resources to Azure:
azd up
azd up
You'll be prompted for the following information:
Subscription: The Azure subscription that your resources are deployed to.
Location: The Azure region where your resources are deployed.
The deployment might take a few minutes to complete. The output from theazd upcommand includes the name of the newly created storage account, which you'll need later to run the code.
azd up
Run the sample code
At this point, the resources are deployed to Azure and the project is ready to run. Follow these steps to update the name of the storage account in the code and run the sample console app:
Update the storage account name: Navigate to thesrcdirectory and editProgram.cs. Find the<storage-account-name>placeholder and replace it with the actual name of the storage account created by theazd upcommand. Save the changes.
src
Program.cs
<storage-account-name>
azd up
Run the project: If you're using Visual Studio, press F5 to build and run the code and interact with the console app. If you're using the .NET CLI, navigate to your application directory, build the project usingdotnet build, and run the application using thedotnet run.
dotnet build
dotnet run
Observe the output: This app creates a test file in your localdatafolder and uploads it to a container in the storage account. The example then lists the blobs in the container and downloads the file with a new name so that you can compare the old and new files.
To learn more about how the sample code works, seeCode examples.
When you're finished testing the code, see theClean up resourcessection to delete the resources created by theazd upcommand.
azd up
Object model
Azure Blob Storage is optimized for storing massive amounts of unstructured data. Unstructured data doesn't adhere to a particular data model or definition, such as text or binary data. Blob storage offers three types of resources:
The storage account
A container in the storage account
A blob in the container
The following diagram shows the relationship between these resources.

Use the following .NET classes to interact with these resources:
BlobServiceClient: TheBlobServiceClientclass allows you to manipulate Azure Storage resources and blob containers.
BlobServiceClient
BlobContainerClient: TheBlobContainerClientclass allows you to manipulate Azure Storage containers and their blobs.
BlobContainerClient
BlobClient: TheBlobClientclass allows you to manipulate Azure Storage blobs.
BlobClient
Code examples
The sample code snippets in the following sections demonstrate how to perform the following tasks with the Azure Blob Storage client library for .NET:
Authenticate to Azure and authorize access to blob data
Create a container
Upload a blob to a container
List blobs in a container
Download a blob
Delete a container
Important
Make sure you've installed the correct NuGet packages and added the necessary using statements in order for the code samples to work, as described in thesetting upsection.
Note
The Azure Developer CLI template includes a project with sample code already in place. The following examples provide detail for each part of the sample code. The template implements the recommended passwordless authentication method, as described in theAuthenticate to Azuresection. The connection string method is shown as an alternative, but isn't used in the template and isn't recommended for production code.
Authenticate to Azure and authorize access to blob data
Application requests to Azure Blob Storage must be authorized. Using theDefaultAzureCredentialclass provided by the Azure Identity client library is the recommended approach for implementing passwordless connections to Azure services in your code, including Blob Storage.
DefaultAzureCredential
You can also authorize requests to Azure Blob Storage by using the account access key. However, this approach should be used with caution. Developers must be diligent to never expose the access key in an unsecure location. Anyone who has the access key is able to authorize requests against the storage account, and effectively has access to all the data.DefaultAzureCredentialoffers improved management and security benefits over the account key to allow passwordless authentication. Both options are demonstrated in the following example.
DefaultAzureCredential
Passwordless (Recommended)
Connection String
DefaultAzureCredentialis a class provided by the Azure Identity client library for .NET, which you can learn more about on theDefaultAzureCredential overview.DefaultAzureCredentialsupports multiple authentication methods and determines which method should be used at runtime. This approach enables your app to use different authentication methods in different environments (local vs. production) without implementing environment-specific code.
DefaultAzureCredential
DefaultAzureCredential
The order and locations in whichDefaultAzureCredentiallooks for credentials can be found in theAzure Identity library overview.
DefaultAzureCredential
For example, your app can authenticate using your Visual Studio sign-in credentials with when developing locally. Your app can then use amanaged identityonce it has been deployed to Azure. No code changes are required for this transition.

When developing locally, make sure that the user account that is accessing blob data has the correct permissions. You'll needStorage Blob Data Contributorto read and write blob data. To assign yourself this role, you'll need to be assigned theUser Access Administratorrole, or another role that includes theMicrosoft.Authorization/roleAssignments/writeaction. You can assign Azure RBAC roles to a user using the Azure portal, Azure CLI, or Azure PowerShell. For more information about theStorage Blob Data Contributorrole, seeStorage Blob Data Contributor. For more information about the available scopes for role assignments, seeUnderstand scope for Azure RBAC.
In this scenario, you'll assign permissions to your user account, scoped to the storage account, to follow thePrinciple of Least Privilege. This practice gives users only the minimum permissions needed and creates more secure production environments.
The following example will assign theStorage Blob Data Contributorrole to your user account, which provides both read and write access to blob data in your storage account.
Important
In most cases it will take a minute or two for the role assignment to propagate in Azure, but in rare cases it may take up to eight minutes. If you receive authentication errors when you first run your code, wait a few moments and try again.
Azure portal
Azure CLI
PowerShell
In the Azure portal, locate your storage account using the main search bar or left navigation.
In the Azure portal, locate your storage account using the main search bar or left navigation.
On the storage account overview page, selectAccess control (IAM)from the left-hand menu.
On the storage account overview page, selectAccess control (IAM)from the left-hand menu.
On theAccess control (IAM)page, select theRole assignmentstab.
On theAccess control (IAM)page, select theRole assignmentstab.
Select+ Addfrom the top menu and thenAdd role assignmentfrom the resulting drop-down menu.
Select+ Addfrom the top menu and thenAdd role assignmentfrom the resulting drop-down menu.

Use the search box to filter the results to the desired role. For this example, search forStorage Blob Data Contributorand select the matching result and then chooseNext.
Use the search box to filter the results to the desired role. For this example, search forStorage Blob Data Contributorand select the matching result and then chooseNext.
UnderAssign access to, selectUser, group, or service principal, and then choose+ Select members.
UnderAssign access to, selectUser, group, or service principal, and then choose+ Select members.
In the dialog, search for your Microsoft Entra username (usually youruser@domainemail address) and then chooseSelectat the bottom of the dialog.
In the dialog, search for your Microsoft Entra username (usually youruser@domainemail address) and then chooseSelectat the bottom of the dialog.
SelectReview + assignto go to the final page, and thenReview + assignagain to complete the process.
SelectReview + assignto go to the final page, and thenReview + assignagain to complete the process.
To assign a role at the resource level using the Azure CLI, you first must retrieve the resource id using theaz storage account showcommand. You can filter the output properties using the--queryparameter.
az storage account show
--query
az storage account show --resource-group '<your-resource-group-name>' --name '<your-storage-account-name>' --query id
az storage account show --resource-group '<your-resource-group-name>' --name '<your-storage-account-name>' --query id
Copy the outputIdfrom the preceding command. You can then assign roles using theaz rolecommand of the Azure CLI.
Id
az role assignment create --assignee "<user@domain>" \
    --role "Storage Blob Data Contributor" \
    --scope "<your-resource-id>"
az role assignment create --assignee "<user@domain>" \
    --role "Storage Blob Data Contributor" \
    --scope "<your-resource-id>"
To assign a role at the resource level using Azure PowerShell, you first must retrieve the resource ID using theGet-AzResourcecommand.
Get-AzResource
Get-AzResource -ResourceGroupName "<yourResourceGroupname>" -Name "<yourStorageAccountName>"
Get-AzResource -ResourceGroupName "<yourResourceGroupname>" -Name "<yourStorageAccountName>"
Copy theIdvalue from the preceding command output. You can then assign roles using theNew-AzRoleAssignmentcommand in PowerShell.
Id
New-AzRoleAssignment -SignInName <user@domain> `
    -RoleDefinitionName "Storage Blob Data Contributor" `
    -Scope <yourStorageAccountId>
New-AzRoleAssignment -SignInName <user@domain> `
    -RoleDefinitionName "Storage Blob Data Contributor" `
    -Scope <yourStorageAccountId>
You can authorize access to data in your storage account using the following steps:
For local development, make sure you're authenticated with the same Microsoft Entra account you assigned the role to. You can authenticate via popular development tools, such as the Azure CLI or Azure PowerShell. The development tools with which you can authenticate vary across languages.Azure CLIVisual StudioVisual Studio CodePowerShellSign-in to Azure through the Azure CLI using the following command:az loginSelect theSign inbutton in the top right of Visual Studio.Sign-in using the Microsoft Entra account you assigned a role to previously.You will need toinstall the Azure CLIto work withDefaultAzureCredentialthrough Visual Studio Code.On the main menu of Visual Studio Code, navigate toTerminal > New Terminal.Sign-in to Azure through the Azure CLI using the following command:az loginSign-in to Azure using PowerShell via the following command:Connect-AzAccount
For local development, make sure you're authenticated with the same Microsoft Entra account you assigned the role to. You can authenticate via popular development tools, such as the Azure CLI or Azure PowerShell. The development tools with which you can authenticate vary across languages.
Azure CLI
Visual Studio
Visual Studio Code
PowerShell
Sign-in to Azure through the Azure CLI using the following command:
az login
az login
Select theSign inbutton in the top right of Visual Studio.

Sign-in using the Microsoft Entra account you assigned a role to previously.

You will need toinstall the Azure CLIto work withDefaultAzureCredentialthrough Visual Studio Code.
DefaultAzureCredential
On the main menu of Visual Studio Code, navigate toTerminal > New Terminal.
Sign-in to Azure through the Azure CLI using the following command:
az login
az login
Sign-in to Azure using PowerShell via the following command:
Connect-AzAccount
Connect-AzAccount
To useDefaultAzureCredential, add theAzure.Identitypackage to your application.Visual Studio.NET CLIInSolution Explorer, right-click theDependenciesnode of your project. SelectManage NuGet Packages.In the resulting window, search forAzure.Identity. Select the appropriate result, and selectInstall.dotnet add package Azure.Identity
To useDefaultAzureCredential, add theAzure.Identitypackage to your application.
DefaultAzureCredential
Visual Studio
.NET CLI
InSolution Explorer, right-click theDependenciesnode of your project. SelectManage NuGet Packages.
InSolution Explorer, right-click theDependenciesnode of your project. SelectManage NuGet Packages.
In the resulting window, search forAzure.Identity. Select the appropriate result, and selectInstall.
In the resulting window, search forAzure.Identity. Select the appropriate result, and selectInstall.

dotnet add package Azure.Identity
dotnet add package Azure.Identity
Update yourProgram.cscode to match the following example. When the code is run on your local workstation during development, it will use the developer credentials of the prioritized tool you're logged into to authenticate to Azure, such as the Azure CLI or Visual Studio.using Azure.Storage.Blobs;
using Azure.Storage.Blobs.Models;
using System;
using System.IO;
using Azure.Identity;

// TODO: Replace <storage-account-name> with your actual storage account name
var blobServiceClient = new BlobServiceClient(
        new Uri("https://<storage-account-name>.blob.core.windows.net"),
        new DefaultAzureCredential());
Update yourProgram.cscode to match the following example. When the code is run on your local workstation during development, it will use the developer credentials of the prioritized tool you're logged into to authenticate to Azure, such as the Azure CLI or Visual Studio.
using Azure.Storage.Blobs;
using Azure.Storage.Blobs.Models;
using System;
using System.IO;
using Azure.Identity;

// TODO: Replace <storage-account-name> with your actual storage account name
var blobServiceClient = new BlobServiceClient(
        new Uri("https://<storage-account-name>.blob.core.windows.net"),
        new DefaultAzureCredential());
using Azure.Storage.Blobs;
using Azure.Storage.Blobs.Models;
using System;
using System.IO;
using Azure.Identity;

// TODO: Replace <storage-account-name> with your actual storage account name
var blobServiceClient = new BlobServiceClient(
        new Uri("https://<storage-account-name>.blob.core.windows.net"),
        new DefaultAzureCredential());
Make sure to update the storage account name in the URI of yourBlobServiceClient. The storage account name can be found on the overview page of the Azure portal.NoteWhen deployed to Azure, this same code can be used to authorize requests to Azure Storage from an application running in Azure. However, you'll need to enable managed identity on your app in Azure. Then configure your storage account to allow that managed identity to connect. For detailed instructions on configuring this connection between Azure services, see theAuth from Azure-hosted appstutorial.
Make sure to update the storage account name in the URI of yourBlobServiceClient. The storage account name can be found on the overview page of the Azure portal.
BlobServiceClient

Note
When deployed to Azure, this same code can be used to authorize requests to Azure Storage from an application running in Azure. However, you'll need to enable managed identity on your app in Azure. Then configure your storage account to allow that managed identity to connect. For detailed instructions on configuring this connection between Azure services, see theAuth from Azure-hosted appstutorial.
A connection string includes the storage account access key and uses it to authorize requests. Always be careful to never expose the keys in an unsecure location.
Note
To authorize data access with the storage account access key, you'll need permissions for the following Azure RBAC action:Microsoft.Storage/storageAccounts/listkeys/action. The least privileged built-in role with permissions for this action isReader and Data Access, but any role which includes this action will work.
Azure portal
Azure CLI
PowerShell
Sign in to theAzure portal.
Sign in to theAzure portal.
Locate your storage account.
Locate your storage account.
In the storage account menu pane, underSecurity + networking, selectAccess keys. Here, you can view the account access keys and the complete connection string for each key.
In the storage account menu pane, underSecurity + networking, selectAccess keys. Here, you can view the account access keys and the complete connection string for each key.
In theAccess keyspane, selectShow keys.
In theAccess keyspane, selectShow keys.
In thekey1section, locate theConnection stringvalue. Select theCopy to clipboardicon to copy the connection string. You'll add the connection string value to an environment variable in the next section.
In thekey1section, locate theConnection stringvalue. Select theCopy to clipboardicon to copy the connection string. You'll add the connection string value to an environment variable in the next section.

You can see the connection string for your storage account using theaz storage account show-connection-stringcommand.
az storage account show-connection-string --name "<your-storage-account-name>"
az storage account show-connection-string --name "<your-storage-account-name>"
You can assemble a connection string with PowerShell using theGet-AzStorageAccountandGet-AzStorageAccountKeycommands.
$saName = "yourStorageAccountName"
$rgName = "yourResourceGroupName"
$sa = Get-AzStorageAccount -StorageAccountName $saName -ResourceGroupName $rgName

$saKey = (Get-AzStorageAccountKey -ResourceGroupName $rgName -Name $saName)[0].Value

'DefaultEndpointsProtocol=https;AccountName=' + $saName + ';AccountKey=' + $saKey + ';EndpointSuffix=core.windows.net'
$saName = "yourStorageAccountName"
$rgName = "yourResourceGroupName"
$sa = Get-AzStorageAccount -StorageAccountName $saName -ResourceGroupName $rgName

$saKey = (Get-AzStorageAccountKey -ResourceGroupName $rgName -Name $saName)[0].Value

'DefaultEndpointsProtocol=https;AccountName=' + $saName + ';AccountKey=' + $saKey + ';EndpointSuffix=core.windows.net'
After you copy the connection string, write it to a new environment variable on the local machine running the application. To set the environment variable, open a console window, and follow the instructions for your operating system. Replace<yourconnectionstring>with your actual connection string.
<yourconnectionstring>
Windows:
setx AZURE_STORAGE_CONNECTION_STRING "<yourconnectionstring>"
setx AZURE_STORAGE_CONNECTION_STRING "<yourconnectionstring>"
After you add the environment variable in Windows, you must start a new instance of the command window. If you're using Visual Studio on Windows, you may need to relaunch Visual Studio after creating the environment variable for the change to be detected.
Linux:
export AZURE_STORAGE_CONNECTION_STRING="<yourconnectionstring>"
export AZURE_STORAGE_CONNECTION_STRING="<yourconnectionstring>"
The code below retrieves the connection string for the storage account from the environment variable created earlier, and uses the connection string to construct a service client object.
Add following code to the end of theProgram.csfile:
Program.cs
// Retrieve the connection string for use with the application. 
string connectionString = Environment.GetEnvironmentVariable("AZURE_STORAGE_CONNECTION_STRING");

// Create a BlobServiceClient object 
var blobServiceClient = new BlobServiceClient(connectionString);
// Retrieve the connection string for use with the application. 
string connectionString = Environment.GetEnvironmentVariable("AZURE_STORAGE_CONNECTION_STRING");

// Create a BlobServiceClient object 
var blobServiceClient = new BlobServiceClient(connectionString);
Important
The account access key should be used with caution. If your account access key is lost or accidentally placed in an insecure location, your service may become vulnerable. Anyone who has the access key is able to authorize requests against the storage account, and effectively has access to all the data.DefaultAzureCredentialprovides enhanced security features and benefits and is the recommended approach for managing authorization to Azure services.
DefaultAzureCredential
Create a container
Create a new container in your storage account by calling theCreateBlobContainerAsyncmethod on theblobServiceClientobject. In this example, the code appends a GUID value to the container name to ensure that it's unique.
blobServiceClient
Add the following code to the end of theProgram.csfile:
Program.cs
// TODO: Replace <storage-account-name> with your actual storage account name
var blobServiceClient = new BlobServiceClient(
        new Uri("https://<storage-account-name>.blob.core.windows.net"),
        new DefaultAzureCredential());

//Create a unique name for the container
string containerName = "quickstartblobs" + Guid.NewGuid().ToString();

// Create the container and return a container client object
BlobContainerClient containerClient = await blobServiceClient.CreateBlobContainerAsync(containerName);
// TODO: Replace <storage-account-name> with your actual storage account name
var blobServiceClient = new BlobServiceClient(
        new Uri("https://<storage-account-name>.blob.core.windows.net"),
        new DefaultAzureCredential());

//Create a unique name for the container
string containerName = "quickstartblobs" + Guid.NewGuid().ToString();

// Create the container and return a container client object
BlobContainerClient containerClient = await blobServiceClient.CreateBlobContainerAsync(containerName);
To learn more about creating a container, and to explore more code samples, seeCreate a blob container with .NET.
Important
Container names must be lowercase. For more information about naming containers and blobs, seeNaming and Referencing Containers, Blobs, and Metadata.
Upload a blob to a container
Upload a blob to a container usingUploadAsync. The example code creates a text file in the localdatadirectory to upload to the container.
Add the following code to the end of theProgram.csfile:
Program.cs
// Create a local file in the ./data/ directory for uploading and downloading
string localPath = "data";
Directory.CreateDirectory(localPath);
string fileName = "quickstart" + Guid.NewGuid().ToString() + ".txt";
string localFilePath = Path.Combine(localPath, fileName);

// Write text to the file
await File.WriteAllTextAsync(localFilePath, "Hello, World!");

// Get a reference to a blob
BlobClient blobClient = containerClient.GetBlobClient(fileName);

Console.WriteLine("Uploading to Blob storage as blob:\n\t {0}\n", blobClient.Uri);

// Upload data from the local file, overwrite the blob if it already exists
await blobClient.UploadAsync(localFilePath, true);
// Create a local file in the ./data/ directory for uploading and downloading
string localPath = "data";
Directory.CreateDirectory(localPath);
string fileName = "quickstart" + Guid.NewGuid().ToString() + ".txt";
string localFilePath = Path.Combine(localPath, fileName);

// Write text to the file
await File.WriteAllTextAsync(localFilePath, "Hello, World!");

// Get a reference to a blob
BlobClient blobClient = containerClient.GetBlobClient(fileName);

Console.WriteLine("Uploading to Blob storage as blob:\n\t {0}\n", blobClient.Uri);

// Upload data from the local file, overwrite the blob if it already exists
await blobClient.UploadAsync(localFilePath, true);
To learn more about uploading blobs, and to explore more code samples, seeUpload a blob with .NET.
List blobs in a container
List the blobs in the container by calling theGetBlobsAsyncmethod.
Add the following code to the end of theProgram.csfile:
Program.cs
Console.WriteLine("Listing blobs...");

// List all blobs in the container
await foreach (BlobItem blobItem in containerClient.GetBlobsAsync())
{
    Console.WriteLine("\t" + blobItem.Name);
}
Console.WriteLine("Listing blobs...");

// List all blobs in the container
await foreach (BlobItem blobItem in containerClient.GetBlobsAsync())
{
    Console.WriteLine("\t" + blobItem.Name);
}
To learn more about listing blobs, and to explore more code samples, seeList blobs with .NET.
Download a blob
Download the blob we created earlier by calling theDownloadToAsyncmethod. The example code appends the string "DOWNLOADED" to the file name so that you can see both files in local file system.
Add the following code to the end of theProgram.csfile:
Program.cs
// Download the blob to a local file
// Append the string "DOWNLOADED" before the .txt extension 
// so you can compare the files in the data directory
string downloadFilePath = localFilePath.Replace(".txt", "DOWNLOADED.txt");

Console.WriteLine("\nDownloading blob to\n\t{0}\n", downloadFilePath);

// Download the blob's contents and save it to a file
await blobClient.DownloadToAsync(downloadFilePath);
// Download the blob to a local file
// Append the string "DOWNLOADED" before the .txt extension 
// so you can compare the files in the data directory
string downloadFilePath = localFilePath.Replace(".txt", "DOWNLOADED.txt");

Console.WriteLine("\nDownloading blob to\n\t{0}\n", downloadFilePath);

// Download the blob's contents and save it to a file
await blobClient.DownloadToAsync(downloadFilePath);
To learn more about downloading blobs, and to explore more code samples, seeDownload a blob with .NET.
Delete a container
The following code cleans up the resources the app created by deleting the container usingDeleteAsync. The code example also deletes the local files created by the app.
The app pauses for user input by callingConsole.ReadLinebefore it deletes the blob, container, and local files. This is a good chance to verify that the resources were created correctly, before they're deleted.
Console.ReadLine
Add the following code to the end of theProgram.csfile:
Program.cs
// Clean up
Console.Write("Press any key to begin clean up");
Console.ReadLine();

Console.WriteLine("Deleting blob container...");
await containerClient.DeleteAsync();

Console.WriteLine("Deleting the local source and downloaded files...");
File.Delete(localFilePath);
File.Delete(downloadFilePath);

Console.WriteLine("Done");
// Clean up
Console.Write("Press any key to begin clean up");
Console.ReadLine();

Console.WriteLine("Deleting blob container...");
await containerClient.DeleteAsync();

Console.WriteLine("Deleting the local source and downloaded files...");
File.Delete(localFilePath);
File.Delete(downloadFilePath);

Console.WriteLine("Done");
To learn more about deleting a container, and to explore more code samples, seeDelete and restore a blob container with .NET.
The completed code
After completing these steps, the code in yourProgram.csfile should now resemble the following:
Program.cs
Passwordless (Recommended)
Connection String
using Azure.Storage.Blobs;
using Azure.Storage.Blobs.Models;
using Azure.Identity;

// TODO: Replace <storage-account-name> with your actual storage account name
var blobServiceClient = new BlobServiceClient(
        new Uri("https://<storage-account-name>.blob.core.windows.net"),
        new DefaultAzureCredential());

//Create a unique name for the container
string containerName = "quickstartblobs" + Guid.NewGuid().ToString();

// Create the container and return a container client object
BlobContainerClient containerClient = await blobServiceClient.CreateBlobContainerAsync(containerName);

// Create a local file in the ./data/ directory for uploading and downloading
string localPath = "data";
Directory.CreateDirectory(localPath);
string fileName = "quickstart" + Guid.NewGuid().ToString() + ".txt";
string localFilePath = Path.Combine(localPath, fileName);

// Write text to the file
await File.WriteAllTextAsync(localFilePath, "Hello, World!");

// Get a reference to a blob
BlobClient blobClient = containerClient.GetBlobClient(fileName);

Console.WriteLine("Uploading to Blob storage as blob:\n\t {0}\n", blobClient.Uri);

// Upload data from the local file
await blobClient.UploadAsync(localFilePath, true);

Console.WriteLine("Listing blobs...");

// List all blobs in the container
await foreach (BlobItem blobItem in containerClient.GetBlobsAsync())
{
    Console.WriteLine("\t" + blobItem.Name);
}

// Download the blob to a local file
// Append the string "DOWNLOADED" before the .txt extension 
// so you can compare the files in the data directory
string downloadFilePath = localFilePath.Replace(".txt", "DOWNLOADED.txt");

Console.WriteLine("\nDownloading blob to\n\t{0}\n", downloadFilePath);

// Download the blob's contents and save it to a file
await blobClient.DownloadToAsync(downloadFilePath);

// Clean up
Console.Write("Press any key to begin clean up");
Console.ReadLine();

Console.WriteLine("Deleting blob container...");
await containerClient.DeleteAsync();

Console.WriteLine("Deleting the local source and downloaded files...");
File.Delete(localFilePath);
File.Delete(downloadFilePath);

Console.WriteLine("Done");
using Azure.Storage.Blobs;
using Azure.Storage.Blobs.Models;
using Azure.Identity;

// TODO: Replace <storage-account-name> with your actual storage account name
var blobServiceClient = new BlobServiceClient(
        new Uri("https://<storage-account-name>.blob.core.windows.net"),
        new DefaultAzureCredential());

//Create a unique name for the container
string containerName = "quickstartblobs" + Guid.NewGuid().ToString();

// Create the container and return a container client object
BlobContainerClient containerClient = await blobServiceClient.CreateBlobContainerAsync(containerName);

// Create a local file in the ./data/ directory for uploading and downloading
string localPath = "data";
Directory.CreateDirectory(localPath);
string fileName = "quickstart" + Guid.NewGuid().ToString() + ".txt";
string localFilePath = Path.Combine(localPath, fileName);

// Write text to the file
await File.WriteAllTextAsync(localFilePath, "Hello, World!");

// Get a reference to a blob
BlobClient blobClient = containerClient.GetBlobClient(fileName);

Console.WriteLine("Uploading to Blob storage as blob:\n\t {0}\n", blobClient.Uri);

// Upload data from the local file
await blobClient.UploadAsync(localFilePath, true);

Console.WriteLine("Listing blobs...");

// List all blobs in the container
await foreach (BlobItem blobItem in containerClient.GetBlobsAsync())
{
    Console.WriteLine("\t" + blobItem.Name);
}

// Download the blob to a local file
// Append the string "DOWNLOADED" before the .txt extension 
// so you can compare the files in the data directory
string downloadFilePath = localFilePath.Replace(".txt", "DOWNLOADED.txt");

Console.WriteLine("\nDownloading blob to\n\t{0}\n", downloadFilePath);

// Download the blob's contents and save it to a file
await blobClient.DownloadToAsync(downloadFilePath);

// Clean up
Console.Write("Press any key to begin clean up");
Console.ReadLine();

Console.WriteLine("Deleting blob container...");
await containerClient.DeleteAsync();

Console.WriteLine("Deleting the local source and downloaded files...");
File.Delete(localFilePath);
File.Delete(downloadFilePath);

Console.WriteLine("Done");
using Azure.Storage.Blobs;
using Azure.Storage.Blobs.Models;

// TODO: Replace <storage-account-name> with your actual storage account name
var blobServiceClient = new BlobServiceClient("<storage-account-connection-string>");

//Create a unique name for the container
string containerName = "quickstartblobs" + Guid.NewGuid().ToString();

// Create the container and return a container client object
BlobContainerClient containerClient = await blobServiceClient.CreateBlobContainerAsync(containerName);

// Create a local file in the ./data/ directory for uploading and downloading
string localPath = "data";
Directory.CreateDirectory(localPath);
string fileName = "quickstart" + Guid.NewGuid().ToString() + ".txt";
string localFilePath = Path.Combine(localPath, fileName);

// Write text to the file
await File.WriteAllTextAsync(localFilePath, "Hello, World!");

// Get a reference to a blob
BlobClient blobClient = containerClient.GetBlobClient(fileName);

Console.WriteLine("Uploading to Blob storage as blob:\n\t {0}\n", blobClient.Uri);

// Upload data from the local file
await blobClient.UploadAsync(localFilePath, true);

Console.WriteLine("Listing blobs...");

// List all blobs in the container
await foreach (BlobItem blobItem in containerClient.GetBlobsAsync())
{
    Console.WriteLine("\t" + blobItem.Name);
}

// Download the blob to a local file
// Append the string "DOWNLOADED" before the .txt extension 
// so you can compare the files in the data directory
string downloadFilePath = localFilePath.Replace(".txt", "DOWNLOADED.txt");

Console.WriteLine("\nDownloading blob to\n\t{0}\n", downloadFilePath);

// Download the blob's contents and save it to a file
await blobClient.DownloadToAsync(downloadFilePath);

// Clean up
Console.Write("Press any key to begin clean up");
Console.ReadLine();

Console.WriteLine("Deleting blob container...");
await containerClient.DeleteAsync();

Console.WriteLine("Deleting the local source and downloaded files...");
File.Delete(localFilePath);
File.Delete(downloadFilePath);

Console.WriteLine("Done");
using Azure.Storage.Blobs;
using Azure.Storage.Blobs.Models;

// TODO: Replace <storage-account-name> with your actual storage account name
var blobServiceClient = new BlobServiceClient("<storage-account-connection-string>");

//Create a unique name for the container
string containerName = "quickstartblobs" + Guid.NewGuid().ToString();

// Create the container and return a container client object
BlobContainerClient containerClient = await blobServiceClient.CreateBlobContainerAsync(containerName);

// Create a local file in the ./data/ directory for uploading and downloading
string localPath = "data";
Directory.CreateDirectory(localPath);
string fileName = "quickstart" + Guid.NewGuid().ToString() + ".txt";
string localFilePath = Path.Combine(localPath, fileName);

// Write text to the file
await File.WriteAllTextAsync(localFilePath, "Hello, World!");

// Get a reference to a blob
BlobClient blobClient = containerClient.GetBlobClient(fileName);

Console.WriteLine("Uploading to Blob storage as blob:\n\t {0}\n", blobClient.Uri);

// Upload data from the local file
await blobClient.UploadAsync(localFilePath, true);

Console.WriteLine("Listing blobs...");

// List all blobs in the container
await foreach (BlobItem blobItem in containerClient.GetBlobsAsync())
{
    Console.WriteLine("\t" + blobItem.Name);
}

// Download the blob to a local file
// Append the string "DOWNLOADED" before the .txt extension 
// so you can compare the files in the data directory
string downloadFilePath = localFilePath.Replace(".txt", "DOWNLOADED.txt");

Console.WriteLine("\nDownloading blob to\n\t{0}\n", downloadFilePath);

// Download the blob's contents and save it to a file
await blobClient.DownloadToAsync(downloadFilePath);

// Clean up
Console.Write("Press any key to begin clean up");
Console.ReadLine();

Console.WriteLine("Deleting blob container...");
await containerClient.DeleteAsync();

Console.WriteLine("Deleting the local source and downloaded files...");
File.Delete(localFilePath);
File.Delete(downloadFilePath);

Console.WriteLine("Done");
Run the code
This app creates a test file in your localdatafolder and uploads it to Blob storage. The example then lists the blobs in the container and downloads the file with a new name so that you can compare the old and new files.
If you're using Visual Studio, press F5 to build and run the code and interact with the console app. If you're using the .NET CLI, navigate to your application directory, then build and run the application.
dotnet build
dotnet build
dotnet run
dotnet run
The output of the app is similar to the following example (GUID values omitted for readability):
Azure Blob Storage - .NET quickstart sample

Uploading to Blob storage as blob:
         https://mystorageacct.blob.core.windows.net/quickstartblobsGUID/quickstartGUID.txt

Listing blobs...
        quickstartGUID.txt

Downloading blob to
        ./data/quickstartGUIDDOWNLOADED.txt

Press any key to begin clean up
Deleting blob container...
Deleting the local source and downloaded files...
Done
Azure Blob Storage - .NET quickstart sample

Uploading to Blob storage as blob:
         https://mystorageacct.blob.core.windows.net/quickstartblobsGUID/quickstartGUID.txt

Listing blobs...
        quickstartGUID.txt

Downloading blob to
        ./data/quickstartGUIDDOWNLOADED.txt

Press any key to begin clean up
Deleting blob container...
Deleting the local source and downloaded files...
Done
Before you begin the clean-up process, check yourdatafolder for the two files. You can open them and observe that they're identical.
Clean up resources
After you verify the files and finish testing, press theEnterkey to delete the test files along with the container you created in the storage account. You can also useAzure CLIto delete resources.
When you're done with the quickstart, you can clean up the resources you created by running the following command:
azd down
azd down
You'll be prompted to confirm the deletion of the resources. Enteryto confirm.
y
Next step
Azure Storage samples and developer guides for .NET
Feedback
Was this page helpful?
Additional resources