Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Deploy a web app to an NGINX web server running on a Linux Virtual Machine (Classic)
Article
2022-06-13
2 contributors
In this article
Azure DevOps Services | Azure DevOps Server 2022 - Azure DevOps Server 2019 | TFS 2018
Note
If you want to deploy your application to a Linux virtual machine using YAML pipelines, seeDeploy to a Linux virtual machine.
Learn how to use Classic Azure Pipelines to build and deploy your web app to an NGINX web server running on a Linux virtual machine.
Prerequisites
An Azure DevOps Organization.Create one for free.
An Azure account with an active subscription.Create an Azure accountfor free if you don't have one already.
A GitHub account.Create one for free.
Linux VM Prerequisites
JavaScript
Java
If you don't have a Linux VM with an Nginx web server, follow the steps in thisQuickstartto create one in Azure.
Use Ubuntu 16.04 or higher.
For Java Spring Boot and Spring Cloud apps, create a Linux VM in Azure using thistemplate, which provides a fully supported OpenJDK-based runtime.
For Java servlets on Tomcat server, create a Linux VM using thistemplateand thensetup Tomcat9.x as a service.
For Java EE apps, use one of the following templates to create aLinux VM, Java and WebSphere 9.x, aLinux VM, Java and WebLogic, or aLinux VM and Java 13.xand WildFly/JBoss 14.
Get the code
If you don't have a repository, use the following sample project follow along with this tutorial:
JavaScript
Java
https://github.com/MicrosoftDocs/pipelines-javascript
https://github.com/MicrosoftDocs/pipelines-javascript
https://github.com/MicrosoftDocs/pipelines-java
https://github.com/MicrosoftDocs/pipelines-java
Build your app
JavaScript
Java
Build JavaScript apps
Build Java apps
Set up a deployment group
Deployment groups make it easier to organize the servers you want to use to host your app. A deployment group is a collection of machines with an Azure Pipelines agent on each of them. Each machine interacts with Azure Pipelines to coordinate deployment of your app.
Open an SSH session to your Linux VM. You can do this using the Cloud Shell button in the upper-right of theAzure portal.
Open an SSH session to your Linux VM. You can do this using the Cloud Shell button in the upper-right of theAzure portal.

Run the following command to initiate the session. Replace the placeholder with the IP address of your VM:ssh <publicIpAddress>
Run the following command to initiate the session. Replace the placeholder with the IP address of your VM:
ssh <publicIpAddress>
ssh <publicIpAddress>
Run the following command to install the required dependencies to set up the build and release agent on a Linux virtual machine. SeeSelf-hosted Linux agentsfor more details.sudo apt-get install -y libunwind8 libcurl3
Run the following command to install the required dependencies to set up the build and release agent on a Linux virtual machine. SeeSelf-hosted Linux agentsfor more details.
sudo apt-get install -y libunwind8 libcurl3
sudo apt-get install -y libunwind8 libcurl3
in Azure DevOps web portal, selectPipelines, and then selectDeployment groups.
in Azure DevOps web portal, selectPipelines, and then selectDeployment groups.
SelectAdd a deployment group(orNewif you have existing deployment groups).
SelectAdd a deployment group(orNewif you have existing deployment groups).
Enter a name for the group such asmyNginxand then selectCreate.
Enter a name for the group such asmyNginxand then selectCreate.
SelectLinuxfor theType of target to registerand make sure thatUse a personal access token in the script for authenticationis checked. SelectCopy script to the clipboard. This script will install and configure an agent on your VM.
SelectLinuxfor theType of target to registerand make sure thatUse a personal access token in the script for authenticationis checked. SelectCopy script to the clipboard. This script will install and configure an agent on your VM.
Back in the SSH session in Azure portal, paste and run the script.
Back in the SSH session in Azure portal, paste and run the script.
When you're prompted to configure tags for the agent, pressEnterto skip.
When you're prompted to configure tags for the agent, pressEnterto skip.
Wait for the script to finish and display the messageStarted Azure Pipelines Agent. Type"q"to exit the file editor and return to the shell prompt.
Wait for the script to finish and display the messageStarted Azure Pipelines Agent. Type"q"to exit the file editor and return to the shell prompt.
Back in Azure DevOps portal, on theDeployment groupspage, open themyNginxdeployment group. Select theTargetstab, and verify that your VM is listed.
Back in Azure DevOps portal, on theDeployment groupspage, open themyNginxdeployment group. Select theTargetstab, and verify that your VM is listed.
Create a release pipeline
SelectPipelines>Releases, and then selectNew pipeline.
SelectPipelines>Releases, and then selectNew pipeline.
SelectEmpty job.
SelectEmpty job.
SelectAdd an artifactto link your build artifact. SelectBuild, and then select yourProjectandSourcefrom the dropdown menu. SelectAddwhen you are done.
SelectAdd an artifactto link your build artifact. SelectBuild, and then select yourProjectandSourcefrom the dropdown menu. SelectAddwhen you are done.
Select theContinuous deploymenticon, and the click the toggle button to enable the continuous deployment trigger. Add themainbranch as aBuild branch filter.
Select theContinuous deploymenticon, and the click the toggle button to enable the continuous deployment trigger. Add themainbranch as aBuild branch filter.

SelectTasks, and then select theAgent joband remove it.
SelectTasks, and then select theAgent joband remove it.

Select the ellipsis icon, and then selectAdd a deployment group job. The tasks you will add to this job will run on each server in your deployment group.
Select the ellipsis icon, and then selectAdd a deployment group job. The tasks you will add to this job will run on each server in your deployment group.

Select the deployment group you created earlier from theDeployment groupdropdown menu.
Select the deployment group you created earlier from theDeployment groupdropdown menu.

Select+to add a new task. Search forBashand then selectAddto add it to your pipeline.
Select+to add a new task. Search forBashand then selectAddto add it to your pipeline.

Select the browse button to add the path of yourdeploy.shscript file. See a sample nodeJS deployment scripthere.
Select the browse button to add the path of yourdeploy.shscript file. See a sample nodeJS deployment scripthere.

SelectSavewhen you are done.
SelectSavewhen you are done.

Deploy your app
SelectReleases, and then selectCreate a release.
SelectReleases, and then selectCreate a release.
Make sure that the artifact version you want to use is selected and then selectCreate.
Make sure that the artifact version you want to use is selected and then selectCreate.
Select the release link in the information bar message. For example: "ReleaseRelease-1has been queued".
Select the release link in the information bar message. For example: "ReleaseRelease-1has been queued".
Select the status link inStagesto see the deployment logs.
Select the status link inStagesto see the deployment logs.
After the release is complete, navigate to your app and verify its contents.
After the release is complete, navigate to your app and verify its contents.
Related articles
Extend your deployments to IIS Deployment Groups
Deploy to IIS servers with Azure Pipelines and WinRM
Deploy to a Windows Virtual Machine
Create and remove deployment groups dynamically
Additional resources