Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Use TLS/SSL certificates in your application in Azure Spring Apps
Article
2025-01-31
2 contributors
In this article
Note
TheBasic,Standard, andEnterpriseplans entered a retirement period on March 17, 2025. For more information, see theAzure Spring Apps retirement announcement.
TheStandard consumption and dedicatedplan entered a retirement period on September 30, 2024, with a complete shutdown by the end of March 2025. For more information, seeMigrate Azure Spring Apps Standard consumption and dedicated plan to Azure Container Apps.
This article applies to:â Basic/Standard â Enterprise
This article shows you how to use public certificates in Azure Spring Apps for your application. Your app might act as a client and access an external service that requires certificate authentication, or it might need to perform cryptographic tasks.
When you let Azure Spring Apps manage your TLS/SSL certificates, you can maintain the certificates and your application code separately to safeguard your sensitive data. Your app code can access the public certificates you add to your Azure Spring Apps instance.
Prerequisites
An application deployed to Azure Spring Apps. SeeQuickstart: Deploy your first application in Azure Spring Apps, or use an existing app.
Either a certificate file with.crt,.cer,.pem, or.derextension, or a deployed instance of Azure Key Vault with a private certificate.
Import a certificate
You can choose to import your certificate into your Azure Spring Apps instance from either Key Vault or use a local certificate file.
Import a certificate from Key Vault
You need to grant Azure Spring Apps access to your key vault before you import your certificate.
Azure Key Vault offers two authorization systems:Azure role-based access control(Azure RBAC), which operates on Azure'scontrol and data planes, and theaccess policy model, which operates on the data plane alone.
Use the following steps to grant access:
Access policies
RBAC
Sign in to theAzure portal.
Sign in to theAzure portal.
SelectKey vaults, then select the key vault you import your certificate from.
SelectKey vaults, then select the key vault you import your certificate from.
In the navigation pane, selectAccess policies, then selectCreate.
In the navigation pane, selectAccess policies, then selectCreate.
SelectCertificate permissions, then selectGetandList.
SelectCertificate permissions, then selectGetandList.

UnderPrincipal, selectAzure Spring Cloud Resource Provider.
UnderPrincipal, selectAzure Spring Cloud Resource Provider.

SelectReview + Create, then selectCreate.
SelectReview + Create, then selectCreate.
Sign in to theAzure portal.
Sign in to theAzure portal.
SelectKey vaults, then select the key vault you import your certificate from.
SelectKey vaults, then select the key vault you import your certificate from.
In the navigation pane, selectAccess control (IAM), then selectAdd role assignment.
In the navigation pane, selectAccess control (IAM), then selectAdd role assignment.
Search forCertificate, then select the role namedKey Vault Certificate User.
Search forCertificate, then select the role namedKey Vault Certificate User.

UnderMembers, selectSelect members. Search forAzure Spring Cloud Resource Provider, select the provider, and then selectSelect.
UnderMembers, selectSelect members. Search forAzure Spring Cloud Resource Provider, select the provider, and then selectSelect.

SelectReview + assign.
SelectReview + assign.
After you grant access to your key vault, you can import your certificate using the following steps:
Go to your service instance.
Go to your service instance.
From the left navigation pane of your instance, selectTLS/SSL settings.
From the left navigation pane of your instance, selectTLS/SSL settings.
SelectImport Key Vault Certificatein thePublic Key Certificatessection.
SelectImport Key Vault Certificatein thePublic Key Certificatessection.
Select your key vault in theKey vaultssection, select your certificate in theCertificatesection, and then selectSelect.
Select your key vault in theKey vaultssection, select your certificate in theCertificatesection, and then selectSelect.
Provide a value forCertificate name, selectEnable auto syncif needed, and then selectApply. For more information, see theAuto sync certificatesection ofMap an existing custom domain to Azure Spring Apps.
Provide a value forCertificate name, selectEnable auto syncif needed, and then selectApply. For more information, see theAuto sync certificatesection ofMap an existing custom domain to Azure Spring Apps.
After you  successfully import your certificate, you see it in the list of Public Key Certificates.
Note
The Azure Key Vault and Azure Spring Apps instances should be in the same tenant.
Import a local certificate file
You can import a certificate file stored locally using these steps:
Go to your service instance.
From the left navigation pane of your instance, selectTLS/SSL settings.
SelectUpload public certificatein thePublic Key Certificatessection.
After you successfully import your certificate, you see it in the list of Public Key Certificates.
Load a certificate
To load a certificate into your application in Azure Spring Apps, start with these steps:
Go to your application instance.
From the left navigation pane of your app, selectCertificate management.
SelectAdd certificateto choose certificates accessible for the app.

Load a certificate from code
Your loaded certificates are available in the/etc/azure-spring-cloud/certs/publicfolder. Use the following Java code to load a public certificate in an application in Azure Spring Apps.
CertificateFactory factory = CertificateFactory.getInstance("X509");
FileInputStream is = new FileInputStream("/etc/azure-spring-cloud/certs/public/<certificate name>");
X509Certificate cert = (X509Certificate) factory.generateCertificate(is);

// use the loaded certificate
CertificateFactory factory = CertificateFactory.getInstance("X509");
FileInputStream is = new FileInputStream("/etc/azure-spring-cloud/certs/public/<certificate name>");
X509Certificate cert = (X509Certificate) factory.generateCertificate(is);

// use the loaded certificate
Load a certificate into the trust store
For a Java application, you can chooseLoad into trust storefor the selected certificate. The certificate is automatically added to the Java default TrustStores to authenticate a server in TLS/SSL authentication.
The following log from your app shows that the certificate is successfully loaded.
Load certificate from specific path. alias = <certificate alias>, thumbprint = <certificate thumbprint>, file = <certificate name>
Load certificate from specific path. alias = <certificate alias>, thumbprint = <certificate thumbprint>, file = <certificate name>
Next steps
Enable ingress-to-app Transport Layer Security
Access Config Server and Service Registry
Feedback
Was this page helpful?
Additional resources