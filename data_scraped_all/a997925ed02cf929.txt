Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Multilingual and emoji support in Language service features
Article
2024-11-21
4 contributors
In this article
Multilingual and emoji support has led to Unicode encodings that use more than onecode pointto represent a single displayed character, called a grapheme. For example, emojis like ð· and ð may use several characters to compose the shape with additional characters for visual attributes, such as skin tone. Similarly, the Hindi wordà¤à¤¨à¥à¤à¥à¤à¥à¤¦is encoded as five letters and three combining marks.
à¤à¤¨à¥à¤à¥à¤à¥à¤¦
Because of the different lengths of possible multilingual and emoji encodings, Language service features may return offsets in the response.
Offsets in the API response
Whenever offsets are returned the API response, remember:
Elements in the response may be specific to the endpoint that was called.
HTTP POST/GET payloads are encoded inUTF-8, which may or may not be the default character encoding on your client-side compiler or operating system.
Offsets refer to grapheme counts based on theUnicode 8.0.0standard, not character counts.
Extracting substrings from text with offsets
Offsets can cause problems when using character-based substring methods, for example the .NETsubstring()method. One problem is that an offset may cause a substring method to end in the middle of a multi-character grapheme encoding instead of the end.
In .NET, consider using theStringInfoclass, which enables you to work with a string as a series of textual elements, rather than individual character objects. You can also look for grapheme splitter libraries in your preferred software environment.
The Language service features returns these textual elements as well, for convenience.
Endpoints that return an offset will support thestringIndexTypeparameter. This parameter adjusts theoffsetandlengthattributes in the API output to match the requested string iteration scheme. Currently, we support three types:
stringIndexType
offset
length
textElement_v8(default): iterates over graphemes as defined by theUnicode 8.0.0standard
textElement_v8
unicodeCodePoint: iterates overUnicode Code Points, the default scheme for Python 3
unicodeCodePoint
utf16CodeUnit: iterates overUTF-16 Code Units, the default scheme for JavaScript, Java, and .NET
utf16CodeUnit
If thestringIndexTyperequested matches the programming environment of choice, substring extraction can be done using standard substring or slice methods.
stringIndexType
See also
Language service overview
Feedback
Was this page helpful?
Additional resources