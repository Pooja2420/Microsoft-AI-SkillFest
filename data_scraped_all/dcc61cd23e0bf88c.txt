Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Tutorial: Add a resource to your ARM template
Article
2024-06-20
5 contributors
In this article
In theprevious tutorial, you learned how to create and deploy your first blank Azure Resource Manager template (ARM template). Now, you're ready to deploy an actual resource to that template. In this case, anAzure storage account. This instruction takes9 minutesto complete.
Prerequisites
We recommend that you complete theintroductory tutorial about templates, but it's not required.
You need to haveVisual Studio Codeinstalled and working with the Azure Resource Manager Tools extension, and either Azure PowerShell or Azure Command-Line Interface (CLI). For more information, seetemplate tools.
Add resource
To add an Azure storage account definition to the existing template, look at the highlighted JSON file in the following example. Instead of trying to copy sections of the template, copy the whole file and replace your template with its contents.
Replace{provide-unique-name}and the curly braces{}with a unique storage account name.
{provide-unique-name}
{}
Important
The storage account name needs to be unique across Azure. It's only lowercase letters or numbers and has a limit of 24 characters. You can use a name likestore1as a prefix and then add your initials and today's date. The name, for example, can bestore1abc06132022.
{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2021-09-01",
      "name": "{provide-unique-name}",
      "location": "eastus",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2",
      "properties": {
        "supportsHttpsTrafficOnly": true
      }
    }
  ]
}
{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2021-09-01",
      "name": "{provide-unique-name}",
      "location": "eastus",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2",
      "properties": {
        "supportsHttpsTrafficOnly": true
      }
    }
  ]
}
Guessing a unique name for a storage account isn't easy and doesn't work well for automating large deployments. Later in this tutorial series, you use template features that make it easier to create a unique name.
Resource properties
You may be wondering how to find the properties to use for each resource type. You can use theARM template referenceto find the resource types you want to deploy.
Every resource you deploy has at least the following three properties:
type: Type of the resource. This value is a combination of the namespace of the resource provider and the resource type such asMicrosoft.Storage/storageAccounts.
type
Microsoft.Storage/storageAccounts
apiVersion: Version of the REST API to use for creating the resource. Each resource provider publishes its own API versions, so this value is specific to the type.
apiVersion
name: Name of the resource.
name
Most resources also have alocationproperty, which sets the region where you deploy the resource.
location
The other properties vary by resource type and API version. It's important to understand the connection between the API version and the available properties, so let's jump into more detail.
In this tutorial, you add a storage account to the template. You can see the storage account's API version atstorageAccounts 2021-09-01. Notice that you don't add all the properties to your template. Many of the properties are optional. TheMicrosoft.Storageresource provider could release a new API version, but the version you're deploying doesn't have to change. You can continue using that version and know that the results of your deployment are consistent.
Microsoft.Storage
If you view an olderAPI versionyou might see that a smaller set of properties is available.
If you decide to change the API version for a resource, make sure you evaluate the properties for that version and adjust your template appropriately.
Deploy template
You can deploy the template to create the storage account. Give your deployment a different name so you can easily find it in the history.
If you haven't created the resource group, seeCreate resource group. The example assumes you've set thetemplateFilevariable to the path to the template file, as shown in thefirst tutorial.
templateFile
PowerShell
Azure CLI
New-AzResourceGroupDeployment `
  -Name addstorage `
  -ResourceGroupName myResourceGroup `
  -TemplateFile $templateFile
New-AzResourceGroupDeployment `
  -Name addstorage `
  -ResourceGroupName myResourceGroup `
  -TemplateFile $templateFile
To run this deployment command, you need to have thelatest versionof Azure CLI.
az deployment group create \
  --name addstorage \
  --resource-group myResourceGroup \
  --template-file $templateFile
az deployment group create \
  --name addstorage \
  --resource-group myResourceGroup \
  --template-file $templateFile
Note
If the deployment fails, use theverboseswitch to get information about the resources you're creating. Use thedebugswitch to get more information for debugging.
verbose
debug
These errors are two possible deployment failures that you might encounter:
Error: Code=AccountNameInvalid; Message={provide-unique-name}isn't a valid storage account name. The storage account name needs to be between 3 and 24 characters in length and use numbers and lower-case letters only.In the template, replace{provide-unique-name}with a unique storage account name. SeeAdd resource.
Error: Code=AccountNameInvalid; Message={provide-unique-name}isn't a valid storage account name. The storage account name needs to be between 3 and 24 characters in length and use numbers and lower-case letters only.
Error: Code=AccountNameInvalid; Message={provide-unique-name}
In the template, replace{provide-unique-name}with a unique storage account name. SeeAdd resource.
{provide-unique-name}
Error: Code=StorageAccountAlreadyTaken; Message=The storage account named store1abc09092019is already taken.In the template, try a different storage account name.
Error: Code=StorageAccountAlreadyTaken; Message=The storage account named store1abc09092019is already taken.
Error: Code=StorageAccountAlreadyTaken; Message=The storage account named store1abc09092019
In the template, try a different storage account name.
This deployment takes longer than your blank template deployment because you're creating a storage account. It can take about a minute.
Verify deployment
You can verify the deployment by exploring the resource group from the Azure portal.
Sign in to theAzure portal.
From the left menu, selectResource groups.
Check the box to the left ofmyResourceGroupand selectmyResourceGroup
Select the resource group you deployed to.
You see that a storage account has been deployed.
Notice that the deployment label now says:Deployments: 2 Succeeded.
Clean up resources
If you're moving on to the next tutorial, you don't need to delete the resource group.
If you're stopping now, you might want to clean up the resources you deployed by deleting the resource group.
From the Azure portal, selectResource groupfrom the left menu.
Type the resource group name in theFilter for any field ...box.
Check the box next to myResourceGroup and selectmyResourceGroupor the resource group name you chose.
SelectDelete resource groupfrom the top menu.
Next steps
You created a simple template to deploy an Azure storage account. In the later tutorials, you learn how to add parameters, variables, resources, and outputs to a template. These features are the building blocks for much more complex templates.
Add parameters
Feedback
Was this page helpful?
Additional resources