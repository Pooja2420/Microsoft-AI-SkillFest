Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Configure Azure Firewall application rules with SQL FQDNs
Article
2023-04-13
11 contributors
In this article
You can now configure Azure Firewall application rules with SQL FQDNs. This allows you to limit access from your virtual networks to only the specified SQL server instances.
With SQL FQDNs, you can filter traffic:
From your VNets to an Azure SQL Database or Azure Synapse Analytics. For example: Only allow access tosql-server1.database.windows.net.
From on-premises to Azure SQL Managed Instances or SQL IaaS running in your VNets.
From spoke-to-spoke to Azure SQL Managed Instances or SQL IaaS running in your VNets.
SQL FQDN filtering is supported inproxy-modeonly (port 1433). If you use SQL in the default redirect mode, you can filter access using the SQL service tag as part ofnetwork rules.
If you use non-default ports for SQL IaaS traffic, you can configure those ports in the firewall application rules.
Configure using Azure CLI
Deploy anAzure Firewall using Azure CLI.
Deploy anAzure Firewall using Azure CLI.
If you filter traffic to Azure SQL Database, Azure Synapse Analytics, or SQL Managed Instance, ensure the SQL connectivity mode is set toProxy. To learn how to switch SQL connectivity mode, seeAzure SQL Connectivity Settings.NoteSQLproxymode can result in more latency compared toredirect. If you want to continue using redirect mode, which is the default for clients connecting within Azure, you can filter access using the SQLservice tagin firewallnetwork rules.
If you filter traffic to Azure SQL Database, Azure Synapse Analytics, or SQL Managed Instance, ensure the SQL connectivity mode is set toProxy. To learn how to switch SQL connectivity mode, seeAzure SQL Connectivity Settings.
Note
SQLproxymode can result in more latency compared toredirect. If you want to continue using redirect mode, which is the default for clients connecting within Azure, you can filter access using the SQLservice tagin firewallnetwork rules.
Create a new rule collection with an application rule using SQL FQDN to allow access to a SQL server:az extension add -n azure-firewall

 az network firewall application-rule create \ 
     --resource-group Test-FW-RG \
     --firewall-name Test-FW01 \ 
     --collection-name sqlRuleCollection \
     --priority 1000 \
     --action Allow \
     --name sqlRule \
     --protocols mssql=1433 \
     --source-addresses 10.0.0.0/24 \
     --target-fqdns sql-serv1.database.windows.net
Create a new rule collection with an application rule using SQL FQDN to allow access to a SQL server:
az extension add -n azure-firewall

 az network firewall application-rule create \ 
     --resource-group Test-FW-RG \
     --firewall-name Test-FW01 \ 
     --collection-name sqlRuleCollection \
     --priority 1000 \
     --action Allow \
     --name sqlRule \
     --protocols mssql=1433 \
     --source-addresses 10.0.0.0/24 \
     --target-fqdns sql-serv1.database.windows.net
az extension add -n azure-firewall

 az network firewall application-rule create \ 
     --resource-group Test-FW-RG \
     --firewall-name Test-FW01 \ 
     --collection-name sqlRuleCollection \
     --priority 1000 \
     --action Allow \
     --name sqlRule \
     --protocols mssql=1433 \
     --source-addresses 10.0.0.0/24 \
     --target-fqdns sql-serv1.database.windows.net
Configure using Azure PowerShell
Deploy anAzure Firewall using Azure PowerShell.
Deploy anAzure Firewall using Azure PowerShell.
If you filter traffic to Azure SQL Database, Azure Synapse Analytics, or SQL Managed Instance, ensure the SQL connectivity mode is set toProxy. To learn how to switch SQL connectivity mode, seeAzure SQL Connectivity Settings.NoteSQLproxymode can result in more latency compared toredirect. If you want to continue using redirect mode, which is the default for clients connecting within Azure, you can filter access using the SQLservice tagin firewallnetwork rules.
If you filter traffic to Azure SQL Database, Azure Synapse Analytics, or SQL Managed Instance, ensure the SQL connectivity mode is set toProxy. To learn how to switch SQL connectivity mode, seeAzure SQL Connectivity Settings.
Note
SQLproxymode can result in more latency compared toredirect. If you want to continue using redirect mode, which is the default for clients connecting within Azure, you can filter access using the SQLservice tagin firewallnetwork rules.
Create a new rule collection with an application rule using SQL FQDN to allow access to a SQL server:$AzFw = Get-AzFirewall -Name "Test-FW01" -ResourceGroupName "Test-FW-RG"

$sqlRule = @{
   Name          = "sqlRule"
   Protocol      = "mssql:1433" 
   TargetFqdn    = "sql-serv1.database.windows.net"
   SourceAddress = "10.0.0.0/24"
}

$rule = New-AzFirewallApplicationRule @sqlRule

$sqlRuleCollection = @{
   Name       = "sqlRuleCollection" 
   Priority   = 1000 
   Rule       = $rule
   ActionType = "Allow"
}

$ruleCollection = New-AzFirewallApplicationRuleCollection @sqlRuleCollection

$Azfw.ApplicationRuleCollections.Add($ruleCollection)    
Set-AzFirewall -AzureFirewall $AzFw
Create a new rule collection with an application rule using SQL FQDN to allow access to a SQL server:
$AzFw = Get-AzFirewall -Name "Test-FW01" -ResourceGroupName "Test-FW-RG"

$sqlRule = @{
   Name          = "sqlRule"
   Protocol      = "mssql:1433" 
   TargetFqdn    = "sql-serv1.database.windows.net"
   SourceAddress = "10.0.0.0/24"
}

$rule = New-AzFirewallApplicationRule @sqlRule

$sqlRuleCollection = @{
   Name       = "sqlRuleCollection" 
   Priority   = 1000 
   Rule       = $rule
   ActionType = "Allow"
}

$ruleCollection = New-AzFirewallApplicationRuleCollection @sqlRuleCollection

$Azfw.ApplicationRuleCollections.Add($ruleCollection)    
Set-AzFirewall -AzureFirewall $AzFw
$AzFw = Get-AzFirewall -Name "Test-FW01" -ResourceGroupName "Test-FW-RG"

$sqlRule = @{
   Name          = "sqlRule"
   Protocol      = "mssql:1433" 
   TargetFqdn    = "sql-serv1.database.windows.net"
   SourceAddress = "10.0.0.0/24"
}

$rule = New-AzFirewallApplicationRule @sqlRule

$sqlRuleCollection = @{
   Name       = "sqlRuleCollection" 
   Priority   = 1000 
   Rule       = $rule
   ActionType = "Allow"
}

$ruleCollection = New-AzFirewallApplicationRuleCollection @sqlRuleCollection

$Azfw.ApplicationRuleCollections.Add($ruleCollection)    
Set-AzFirewall -AzureFirewall $AzFw
Configure using the Azure portal
Deploy anAzure Firewall using Azure CLI.
Deploy anAzure Firewall using Azure CLI.
If you filter traffic to Azure SQL Database, Azure Synapse Analytics, or SQL Managed Instance, ensure the SQL connectivity mode is set toProxy. To learn how to switch SQL connectivity mode, seeAzure SQL Connectivity Settings.NoteSQLproxymode can result in more latency compared toredirect. If you want to continue using redirect mode, which is the default for clients connecting within Azure, you can filter access using the SQLservice tagin firewallnetwork rules.
If you filter traffic to Azure SQL Database, Azure Synapse Analytics, or SQL Managed Instance, ensure the SQL connectivity mode is set toProxy. To learn how to switch SQL connectivity mode, seeAzure SQL Connectivity Settings.
Note
SQLproxymode can result in more latency compared toredirect. If you want to continue using redirect mode, which is the default for clients connecting within Azure, you can filter access using the SQLservice tagin firewallnetwork rules.
Add the application rule with the appropriate protocol, port, and SQL FQDN and then selectSave.
Add the application rule with the appropriate protocol, port, and SQL FQDN and then selectSave.
Access SQL from a virtual machine in a VNet that filters the traffic through the firewall.
Access SQL from a virtual machine in a VNet that filters the traffic through the firewall.
Validate thatAzure Firewall logsshow the traffic is allowed.
Validate thatAzure Firewall logsshow the traffic is allowed.
Next steps
To learn about SQL proxy and redirect modes, seeAzure SQL Database connectivity architecture.
Feedback
Was this page helpful?
Additional resources