Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Use Azure OpenAI without keys
Article
2025-03-31
2 contributors
In this article
Application requests to most Azure services must be authenticated with keys orpasswordless connections. Developers must be diligent to never expose the keys in an unsecure location. Anyone who gains access to the key is able to authenticate to the service. Keyless authentication offers improved management and security benefits over the account key because there's no key (or connection string) to store.
Keyless connections are enabled with the following steps:
Configure your authentication.
Set environment variables, as needed.
Use an Azure Identity library credential type to create an Azure OpenAI client object.
Authentication
Authentication to Microsoft Entra ID is required to use the Azure client libraries.
Authentication differs based on the environment in which the app is running:
Local development
Azure
Azure OpenAI Keyless Building Block
Use the following link to explore the Azure OpenAI Keyless Building Block AI template. This template provisions an Azure OpenAI account with your user account RBAC role permission for keyless (Microsoft Entra) authentication to access the OpenAI API SDKs.
Note
This article uses one or moreAI app templatesas the basis for the examples and guidance in the article. AI app templates provide you with well-maintained, easy to deploy reference implementations that help to ensure a high-quality starting point for your AI apps.
.NET
Go
Java
JavaScript
Python
Explore the .NETEnd to end Azure OpenAI Keyless Authentication Building Block AI template.
Explore the GoEnd to end Azure OpenAI Keyless Authentication Building Block AI template.
Explore the JavaEnd to end Azure OpenAI Keyless Authentication Building Block AI template.
Explore the JavaScriptEnd to end Azure OpenAI Keyless Authentication Building Block AI template.
Explore the PythonEnd to end Azure OpenAI Keyless Authentication Building Block AI template.
Authenticate for local development
.NET
Go
Java
JavaScript
Python
Select a tool forauthentication during local development.
Important
For access to your Azure resources during local development, you mustsign-in to a local development toolusing the Azure account you assigned theAzure AI Developerrole to. For example, Visual Studio or the Azure CLI.
Azure AI Developer
Select a tool forauthentication during local development.
Select a tool forauthentication during local development.
Select a tool forauthentication during local development.
Select a tool forauthentication during local development.
Authenticate for Azure-hosted environments
.NET
Go
Java
JavaScript
Python
Learn about how to manage theDefaultAzureCredentialfor applications deployed to Azure.
Learn about how to manage theDefaultAzureCredentialfor applications deployed to Azure.
Learn about how to manage theDefaultAzureCredentialfor applications deployed to Azure.
Learn about how to manage theDefaultAzureCredentialfor applications deployed to Azure.
Learn about how to manage theDefaultAzureCredentialfor applications deployed to Azure.
Configure roles for authorization
Find therolefor your usage of Azure OpenAI. Depending on how you intend to set that role, you need either the name or ID.Role nameRole IDFor Azure CLI or Azure PowerShell, you can use role name.For Bicep, you need the role ID.
Find therolefor your usage of Azure OpenAI. Depending on how you intend to set that role, you need either the name or ID.
Use the following table to select a role and ID.Use caseRole nameRole IDAssistantsCognitive Services OpenAI Contributora001fd3d-188f-4b5d-821b-7da978bf7442Chat completionsCognitive Services OpenAI User5e0bd9bd-7b93-4f28-af87-19fc36ad61bd
Use the following table to select a role and ID.
Cognitive Services OpenAI Contributor
a001fd3d-188f-4b5d-821b-7da978bf7442
Cognitive Services OpenAI User
5e0bd9bd-7b93-4f28-af87-19fc36ad61bd
Select an identity type to use.Personal identity: This is your personal identity tied to your sign in to Azure.Managed identity: This is an identity managed by and created for use on Azure. Formanaged identity, create auser-assigned managed identity. When you create the managed identity, you need theClient ID, also known as theapp ID.
Select an identity type to use.
Personal identity: This is your personal identity tied to your sign in to Azure.
Managed identity: This is an identity managed by and created for use on Azure. Formanaged identity, create auser-assigned managed identity. When you create the managed identity, you need theClient ID, also known as theapp ID.
Client ID
app ID
To find your personal identity, use one of the following commands. Use the ID as the<identity-id>in the next step.Azure CLIAzure PowerShellBicepAzure portalFor local development, to get your own identity ID, use the following command. You need to sign in withaz loginbefore using this command.az ad signed-in-user show \
    --query id -o tsvFor local development, to get your own identity ID, use the following command. You need to sign in withConnect-AzAccountbefore using this command.(Get-AzContext).Account.ExtendedProperties.HomeAccountId.Split('.')[0]When usingBicepdeployed withAzure Developer CLI, the identity of the person or service running the deployment is set to theprincipalIdparameter.The followingmain.parameters.jsonvariable is set to the identity running the process."principalId": {
    "value": "${AZURE_PRINCIPAL_ID}"
  },For use in Azure, specify a user-assigned managed identity as part of the Bicep deployment process. Create a user-assigned managed identity separate from the identity running the process.resource userAssignedManagedIdentity 'Microsoft.ManagedIdentity/userAssignedIdentities@2018-11-30' = {
  name: managedIdentityName
  location: location
}Use the steps found here:find the user object IDin the Azure portal.
To find your personal identity, use one of the following commands. Use the ID as the<identity-id>in the next step.
<identity-id>
Azure CLI
Azure PowerShell
Bicep
Azure portal
For local development, to get your own identity ID, use the following command. You need to sign in withaz loginbefore using this command.
az login
az ad signed-in-user show \
    --query id -o tsv
az ad signed-in-user show \
    --query id -o tsv
For local development, to get your own identity ID, use the following command. You need to sign in withConnect-AzAccountbefore using this command.
Connect-AzAccount
(Get-AzContext).Account.ExtendedProperties.HomeAccountId.Split('.')[0]
(Get-AzContext).Account.ExtendedProperties.HomeAccountId.Split('.')[0]
When usingBicepdeployed withAzure Developer CLI, the identity of the person or service running the deployment is set to theprincipalIdparameter.
principalId
The followingmain.parameters.jsonvariable is set to the identity running the process.
main.parameters.json
"principalId": {
    "value": "${AZURE_PRINCIPAL_ID}"
  },
"principalId": {
    "value": "${AZURE_PRINCIPAL_ID}"
  },
For use in Azure, specify a user-assigned managed identity as part of the Bicep deployment process. Create a user-assigned managed identity separate from the identity running the process.
resource userAssignedManagedIdentity 'Microsoft.ManagedIdentity/userAssignedIdentities@2018-11-30' = {
  name: managedIdentityName
  location: location
}
resource userAssignedManagedIdentity 'Microsoft.ManagedIdentity/userAssignedIdentities@2018-11-30' = {
  name: managedIdentityName
  location: location
}
Use the steps found here:find the user object IDin the Azure portal.
Assign the role-based access control (RBAC) role to the identity for the resource group.Azure CLIAzure PowerShellBicepAzure portalTo grant your identity permissions to your resource through RBAC, assign a role using the Azure CLI commandaz role assignment create.az role assignment create \
    --role "Cognitive Services OpenAI User" \
    --assignee "<identity-id>" \
    --scope "/subscriptions/<subscription-id>/resourceGroups/<resource-group-name>"To grant your application permissions to your Azure OpenAI resource through RBAC, assign a role using the Azure PowerShell cmdletNew-AzRoleAssignment.New-AzRoleAssignment -ObjectId "<identity-id>" -RoleDefinitionName "Cognitive Services OpenAI User" -Scope "/subscriptions/<subscription-id>/resourceGroups/<resource-group-name>"Use the following Azure OpenAI Bicep template to create the resource and set the authentication for theidentityId. Bicep requires the role ID. Thenameshown in this Bicep snippet isn't the Azure role; it's specific to the Bicep deployment.// main.bicep
param environment string = 'production'

// USER ROLES
module openAiRoleUser 'core/security/role.bicep' = {
    scope: openAiResourceGroup
    name: 'openai-role-user'
    params: {
        principalId: (environment == 'development') ? principalId : userAssignedManagedIdentity 
        principalType: (environment == 'development') ? 'User' : 'ServicePrincipal'
        roleDefinitionId: '5e0bd9bd-7b93-4f28-af87-19fc36ad61bd'
    }
}The following generic Bicep is called from themain.bicepto create any role.// core/security/role.bicep
metadata description = 'Creates a role assignment for an identity.'
param principalId string // passed in from main.bicep identityId

@allowed([
    'Device'
    'ForeignGroup'
    'Group'
    'ServicePrincipal'
    'User'
])
param principalType string = 'ServicePrincipal'
param roleDefinitionId string

resource role 'Microsoft.Authorization/roleAssignments@2022-04-01' = {
    name: guid(subscription().id, resourceGroup().id, principalId, roleDefinitionId)
    properties: {
        principalId: principalId
        principalType: principalType
        roleDefinitionId: resourceId('Microsoft.Authorization/roleDefinitions', roleDefinitionId)
    }
}Use the steps found atopen the Add role assignment pagein the Azure portal.Where applicable, replace<identity-id>,<subscription-id>, and<resource-group-name>with your actual values.
Assign the role-based access control (RBAC) role to the identity for the resource group.
Azure CLI
Azure PowerShell
Bicep
Azure portal
To grant your identity permissions to your resource through RBAC, assign a role using the Azure CLI commandaz role assignment create.
az role assignment create \
    --role "Cognitive Services OpenAI User" \
    --assignee "<identity-id>" \
    --scope "/subscriptions/<subscription-id>/resourceGroups/<resource-group-name>"
az role assignment create \
    --role "Cognitive Services OpenAI User" \
    --assignee "<identity-id>" \
    --scope "/subscriptions/<subscription-id>/resourceGroups/<resource-group-name>"
To grant your application permissions to your Azure OpenAI resource through RBAC, assign a role using the Azure PowerShell cmdletNew-AzRoleAssignment.
New-AzRoleAssignment -ObjectId "<identity-id>" -RoleDefinitionName "Cognitive Services OpenAI User" -Scope "/subscriptions/<subscription-id>/resourceGroups/<resource-group-name>"
New-AzRoleAssignment -ObjectId "<identity-id>" -RoleDefinitionName "Cognitive Services OpenAI User" -Scope "/subscriptions/<subscription-id>/resourceGroups/<resource-group-name>"
Use the following Azure OpenAI Bicep template to create the resource and set the authentication for theidentityId. Bicep requires the role ID. Thenameshown in this Bicep snippet isn't the Azure role; it's specific to the Bicep deployment.
identityId
name
// main.bicep
param environment string = 'production'

// USER ROLES
module openAiRoleUser 'core/security/role.bicep' = {
    scope: openAiResourceGroup
    name: 'openai-role-user'
    params: {
        principalId: (environment == 'development') ? principalId : userAssignedManagedIdentity 
        principalType: (environment == 'development') ? 'User' : 'ServicePrincipal'
        roleDefinitionId: '5e0bd9bd-7b93-4f28-af87-19fc36ad61bd'
    }
}
// main.bicep
param environment string = 'production'

// USER ROLES
module openAiRoleUser 'core/security/role.bicep' = {
    scope: openAiResourceGroup
    name: 'openai-role-user'
    params: {
        principalId: (environment == 'development') ? principalId : userAssignedManagedIdentity 
        principalType: (environment == 'development') ? 'User' : 'ServicePrincipal'
        roleDefinitionId: '5e0bd9bd-7b93-4f28-af87-19fc36ad61bd'
    }
}
The following generic Bicep is called from themain.bicepto create any role.
main.bicep
// core/security/role.bicep
metadata description = 'Creates a role assignment for an identity.'
param principalId string // passed in from main.bicep identityId

@allowed([
    'Device'
    'ForeignGroup'
    'Group'
    'ServicePrincipal'
    'User'
])
param principalType string = 'ServicePrincipal'
param roleDefinitionId string

resource role 'Microsoft.Authorization/roleAssignments@2022-04-01' = {
    name: guid(subscription().id, resourceGroup().id, principalId, roleDefinitionId)
    properties: {
        principalId: principalId
        principalType: principalType
        roleDefinitionId: resourceId('Microsoft.Authorization/roleDefinitions', roleDefinitionId)
    }
}
// core/security/role.bicep
metadata description = 'Creates a role assignment for an identity.'
param principalId string // passed in from main.bicep identityId

@allowed([
    'Device'
    'ForeignGroup'
    'Group'
    'ServicePrincipal'
    'User'
])
param principalType string = 'ServicePrincipal'
param roleDefinitionId string

resource role 'Microsoft.Authorization/roleAssignments@2022-04-01' = {
    name: guid(subscription().id, resourceGroup().id, principalId, roleDefinitionId)
    properties: {
        principalId: principalId
        principalType: principalType
        roleDefinitionId: resourceId('Microsoft.Authorization/roleDefinitions', roleDefinitionId)
    }
}
Use the steps found atopen the Add role assignment pagein the Azure portal.
Where applicable, replace<identity-id>,<subscription-id>, and<resource-group-name>with your actual values.
<identity-id>
<subscription-id>
<resource-group-name>
Configure environment variables
To connect to Azure OpenAI, your code needs to know your resource endpoint, andmightneed other environment variables.
Create an environment variable for your Azure OpenAI endpoint.AZURE_OPENAI_ENDPOINT: This URL is the access point for your Azure OpenAI resource.
Create an environment variable for your Azure OpenAI endpoint.
AZURE_OPENAI_ENDPOINT: This URL is the access point for your Azure OpenAI resource.
AZURE_OPENAI_ENDPOINT
Create environment variables based on the location in which your app runs:LocationIdentityDescriptionLocalPersonalFor local runtimes with yourpersonal identity,sign into create your credential with a tool.Azure cloudUser-assigned managed identityCreate anAZURE_CLIENT_IDenvironment variable containing the client ID of the user-assigned managed identity to authenticate as.
Create environment variables based on the location in which your app runs:
AZURE_CLIENT_ID
Install Azure Identity client library
Use the following link to install the Azure Identity client library.
.NET
Go
Java
JavaScript
Python
Install the .NETAzure Identity client library:
dotnet add package Azure.Identity
dotnet add package Azure.Identity
Install the GoAzure Identity client library:
go get -u github.com/Azure/azure-sdk-for-go/sdk/azidentity
go get -u github.com/Azure/azure-sdk-for-go/sdk/azidentity
Install the JavaAzure Identity client librarywith the following POM file:
<dependencyManagement>
    <dependencies>
        <dependency>
            <groupId>com.azure</groupId>
            <artifactId>azure-identity</artifactId>
            <version>1.10.0</version>
            <type>pom</type>
            <scope>import</scope>
        </dependency>
    </dependencies>
</dependencyManagement>
<dependencyManagement>
    <dependencies>
        <dependency>
            <groupId>com.azure</groupId>
            <artifactId>azure-identity</artifactId>
            <version>1.10.0</version>
            <type>pom</type>
            <scope>import</scope>
        </dependency>
    </dependencies>
</dependencyManagement>
Install the JavaScriptAzure Identity client library:
npm install --save @azure/identity
npm install --save @azure/identity
Install the PythonAzure Identity client library:
pip install azure-identity
pip install azure-identity
Use DefaultAzureCredential
The Azure Identity library'sDefaultAzureCredentialallows the customer to run the same code in the local development environment and in the Azure Cloud.
DefaultAzureCredential
.NET
Go
Java
JavaScript
Python
For more information onDefaultAzureCredentialfor .NET, see theDefaultAzureCredentialoverview.
DefaultAzureCredential
DefaultAzureCredential
Take one of the following approaches to set the user-assigned managed identity's client ID:
Set environment variableAZURE_CLIENT_ID. The parameterless constructor ofDefaultAzureCredentialuses the value of this environment variable, if present.using Azure;
using Azure.AI.OpenAI;
using Azure.Identity;
using System;
using static System.Environment;

string endpoint = GetEnvironmentVariable("AZURE_OPENAI_ENDPOINT");

OpenAIClient client = new(new Uri(endpoint), new DefaultAzureCredential());
Set environment variableAZURE_CLIENT_ID. The parameterless constructor ofDefaultAzureCredentialuses the value of this environment variable, if present.
AZURE_CLIENT_ID
DefaultAzureCredential
using Azure;
using Azure.AI.OpenAI;
using Azure.Identity;
using System;
using static System.Environment;

string endpoint = GetEnvironmentVariable("AZURE_OPENAI_ENDPOINT");

OpenAIClient client = new(new Uri(endpoint), new DefaultAzureCredential());
using Azure;
using Azure.AI.OpenAI;
using Azure.Identity;
using System;
using static System.Environment;

string endpoint = GetEnvironmentVariable("AZURE_OPENAI_ENDPOINT");

OpenAIClient client = new(new Uri(endpoint), new DefaultAzureCredential());
Set propertyManagedIdentityClientIdonDefaultAzureCredentialOptions:using Azure;
using Azure.AI.OpenAI;
using Azure.Identity;
using System;
using static System.Environment;

string endpoint = GetEnvironmentVariable("AZURE_OPENAI_ENDPOINT");

var credential = new DefaultAzureCredential(
    new DefaultAzureCredentialOptions
    {
        ManagedIdentityClientId = "<user_assigned_client_id>"
    });

OpenAIClient client = new(new Uri(endpoint), credential);
Set propertyManagedIdentityClientIdonDefaultAzureCredentialOptions:
DefaultAzureCredentialOptions
using Azure;
using Azure.AI.OpenAI;
using Azure.Identity;
using System;
using static System.Environment;

string endpoint = GetEnvironmentVariable("AZURE_OPENAI_ENDPOINT");

var credential = new DefaultAzureCredential(
    new DefaultAzureCredentialOptions
    {
        ManagedIdentityClientId = "<user_assigned_client_id>"
    });

OpenAIClient client = new(new Uri(endpoint), credential);
using Azure;
using Azure.AI.OpenAI;
using Azure.Identity;
using System;
using static System.Environment;

string endpoint = GetEnvironmentVariable("AZURE_OPENAI_ENDPOINT");

var credential = new DefaultAzureCredential(
    new DefaultAzureCredentialOptions
    {
        ManagedIdentityClientId = "<user_assigned_client_id>"
    });

OpenAIClient client = new(new Uri(endpoint), credential);
For more information onDefaultAzureCredentialfor Go, see theDefaultAzureCredentialoverview.
DefaultAzureCredential
DefaultAzureCredential
import (
	"log"

	"github.com/Azure/azure-sdk-for-go/sdk/ai/azopenai"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
)

func main() {
	dac, err := azidentity.NewDefaultAzureCredential(nil)

	if err != nil {
		log.Fatalf("ERROR: %s", err)
	}

	client, err := azopenai.NewClient(os.Getenv("AZURE_OPENAI_ENDPOINT"), dac, nil)

	if err != nil {
		log.Fatalf("ERROR: %s", err)
	}

	_ = client
}
import (
	"log"

	"github.com/Azure/azure-sdk-for-go/sdk/ai/azopenai"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
)

func main() {
	dac, err := azidentity.NewDefaultAzureCredential(nil)

	if err != nil {
		log.Fatalf("ERROR: %s", err)
	}

	client, err := azopenai.NewClient(os.Getenv("AZURE_OPENAI_ENDPOINT"), dac, nil)

	if err != nil {
		log.Fatalf("ERROR: %s", err)
	}

	_ = client
}
For more information onDefaultAzureCredentialfor Java,  see theDefaultAzureCredentialoverview.
DefaultAzureCredential
DefaultAzureCredential
Take one of the following approaches to set the user-assigned managed identity's client ID:
Set environment variableAZURE_CLIENT_ID. The parameterless constructor ofDefaultAzureCredentialuses the value of this environment variable, if present.import com.azure.identity.DefaultAzureCredentialBuilder;
import com.azure.ai.openai.OpenAIClient;
import com.azure.ai.openai.OpenAIClientBuilder;

String endpoint = System.getenv("AZURE_OPENAI_ENDPOINT");

DefaultAzureCredential credential = new DefaultAzureCredentialBuilder().build();
OpenAIClient client = new OpenAIClientBuilder()
    .credential(credential)
    .endpoint(endpoint)
    .buildClient();
Set environment variableAZURE_CLIENT_ID. The parameterless constructor ofDefaultAzureCredentialuses the value of this environment variable, if present.
AZURE_CLIENT_ID
DefaultAzureCredential
import com.azure.identity.DefaultAzureCredentialBuilder;
import com.azure.ai.openai.OpenAIClient;
import com.azure.ai.openai.OpenAIClientBuilder;

String endpoint = System.getenv("AZURE_OPENAI_ENDPOINT");

DefaultAzureCredential credential = new DefaultAzureCredentialBuilder().build();
OpenAIClient client = new OpenAIClientBuilder()
    .credential(credential)
    .endpoint(endpoint)
    .buildClient();
import com.azure.identity.DefaultAzureCredentialBuilder;
import com.azure.ai.openai.OpenAIClient;
import com.azure.ai.openai.OpenAIClientBuilder;

String endpoint = System.getenv("AZURE_OPENAI_ENDPOINT");

DefaultAzureCredential credential = new DefaultAzureCredentialBuilder().build();
OpenAIClient client = new OpenAIClientBuilder()
    .credential(credential)
    .endpoint(endpoint)
    .buildClient();
Assign a specific user-assigned managed identity withDefaultAzureCredentialby using theDefaultAzureCredentialBuilderto configure it with a client ID:import com.azure.identity.DefaultAzureCredentialBuilder;
import com.azure.ai.openai.OpenAIClient;
import com.azure.ai.openai.OpenAIClientBuilder;

String endpoint = System.getenv("AZURE_OPENAI_ENDPOINT");
String userAssignedClientId = "<your managed identity client ID>";

TokenCredential dacWithUserAssignedManagedIdentity
     = new DefaultAzureCredentialBuilder().managedIdentityClientId(userAssignedClientId).build();
OpenAIClient client = new OpenAIClientBuilder()
    .credential(dacWithUserAssignedManagedIdentity)
    .endpoint(endpoint)
    .buildClient();
Assign a specific user-assigned managed identity withDefaultAzureCredentialby using theDefaultAzureCredentialBuilderto configure it with a client ID:
DefaultAzureCredential
DefaultAzureCredentialBuilder
import com.azure.identity.DefaultAzureCredentialBuilder;
import com.azure.ai.openai.OpenAIClient;
import com.azure.ai.openai.OpenAIClientBuilder;

String endpoint = System.getenv("AZURE_OPENAI_ENDPOINT");
String userAssignedClientId = "<your managed identity client ID>";

TokenCredential dacWithUserAssignedManagedIdentity
     = new DefaultAzureCredentialBuilder().managedIdentityClientId(userAssignedClientId).build();
OpenAIClient client = new OpenAIClientBuilder()
    .credential(dacWithUserAssignedManagedIdentity)
    .endpoint(endpoint)
    .buildClient();
import com.azure.identity.DefaultAzureCredentialBuilder;
import com.azure.ai.openai.OpenAIClient;
import com.azure.ai.openai.OpenAIClientBuilder;

String endpoint = System.getenv("AZURE_OPENAI_ENDPOINT");
String userAssignedClientId = "<your managed identity client ID>";

TokenCredential dacWithUserAssignedManagedIdentity
     = new DefaultAzureCredentialBuilder().managedIdentityClientId(userAssignedClientId).build();
OpenAIClient client = new OpenAIClientBuilder()
    .credential(dacWithUserAssignedManagedIdentity)
    .endpoint(endpoint)
    .buildClient();
For more information onDefaultAzureCredentialfor JavaScript, see theDefaultAzureCredentialoverview.
DefaultAzureCredential
DefaultAzureCredential
Take one of the following approaches to set the user-assigned managed identity's client ID:
Set environment variableAZURE_CLIENT_ID. The parameterless constructor ofDefaultAzureCredentialuses the value of this environment variable, if present.import { DefaultAzureCredential, getBearerTokenProvider } from "@azure/identity";
import { AzureOpenAI } from "openai";

const credential = new DefaultAzureCredential();
const scope = "https://cognitiveservices.azure.com/.default";
const azureADTokenProvider = getBearerTokenProvider(credential, scope);

const endpoint = process.env["AZURE_OPENAI_ENDPOINT"] || "<endpoint>";
const deployment = "<your Azure OpenAI deployment name>";
const apiVersion = "2024-05-01-preview";
const options = { azureADTokenProvider, deployment, apiVersion, endpoint }

const client = new AzureOpenAI(options);
Set environment variableAZURE_CLIENT_ID. The parameterless constructor ofDefaultAzureCredentialuses the value of this environment variable, if present.
AZURE_CLIENT_ID
DefaultAzureCredential
import { DefaultAzureCredential, getBearerTokenProvider } from "@azure/identity";
import { AzureOpenAI } from "openai";

const credential = new DefaultAzureCredential();
const scope = "https://cognitiveservices.azure.com/.default";
const azureADTokenProvider = getBearerTokenProvider(credential, scope);

const endpoint = process.env["AZURE_OPENAI_ENDPOINT"] || "<endpoint>";
const deployment = "<your Azure OpenAI deployment name>";
const apiVersion = "2024-05-01-preview";
const options = { azureADTokenProvider, deployment, apiVersion, endpoint }

const client = new AzureOpenAI(options);
import { DefaultAzureCredential, getBearerTokenProvider } from "@azure/identity";
import { AzureOpenAI } from "openai";

const credential = new DefaultAzureCredential();
const scope = "https://cognitiveservices.azure.com/.default";
const azureADTokenProvider = getBearerTokenProvider(credential, scope);

const endpoint = process.env["AZURE_OPENAI_ENDPOINT"] || "<endpoint>";
const deployment = "<your Azure OpenAI deployment name>";
const apiVersion = "2024-05-01-preview";
const options = { azureADTokenProvider, deployment, apiVersion, endpoint }

const client = new AzureOpenAI(options);
Assign a specific user-assigned managed identity withDefaultAzureCredentialby using themanagedIdentityClientIdparameter to configure it with a client ID:import { DefaultAzureCredential, getBearerTokenProvider } from "@azure/identity";
import { AzureOpenAI } from "openai";

const managedIdentityClientId = "<your managed identity client ID>";

const credential = new DefaultAzureCredential({
      managedIdentityClientId: managedIdentityClientId,
    });
const scope = "https://cognitiveservices.azure.com/.default";
const azureADTokenProvider = getBearerTokenProvider(credential, scope);

const endpoint = process.env["AZURE_OPENAI_ENDPOINT"] || "<endpoint>";
const deployment = "<your Azure OpenAI deployment name>";
const apiVersion = "2024-05-01-preview";
const options = { azureADTokenProvider, deployment, apiVersion, endpoint }

const client = new AzureOpenAI(options);
Assign a specific user-assigned managed identity withDefaultAzureCredentialby using themanagedIdentityClientIdparameter to configure it with a client ID:
DefaultAzureCredential
managedIdentityClientId
import { DefaultAzureCredential, getBearerTokenProvider } from "@azure/identity";
import { AzureOpenAI } from "openai";

const managedIdentityClientId = "<your managed identity client ID>";

const credential = new DefaultAzureCredential({
      managedIdentityClientId: managedIdentityClientId,
    });
const scope = "https://cognitiveservices.azure.com/.default";
const azureADTokenProvider = getBearerTokenProvider(credential, scope);

const endpoint = process.env["AZURE_OPENAI_ENDPOINT"] || "<endpoint>";
const deployment = "<your Azure OpenAI deployment name>";
const apiVersion = "2024-05-01-preview";
const options = { azureADTokenProvider, deployment, apiVersion, endpoint }

const client = new AzureOpenAI(options);
import { DefaultAzureCredential, getBearerTokenProvider } from "@azure/identity";
import { AzureOpenAI } from "openai";

const managedIdentityClientId = "<your managed identity client ID>";

const credential = new DefaultAzureCredential({
      managedIdentityClientId: managedIdentityClientId,
    });
const scope = "https://cognitiveservices.azure.com/.default";
const azureADTokenProvider = getBearerTokenProvider(credential, scope);

const endpoint = process.env["AZURE_OPENAI_ENDPOINT"] || "<endpoint>";
const deployment = "<your Azure OpenAI deployment name>";
const apiVersion = "2024-05-01-preview";
const options = { azureADTokenProvider, deployment, apiVersion, endpoint }

const client = new AzureOpenAI(options);
For more information onDefaultAzureCredentialfor Python, see theDefaultAzureCredentialoverview.
DefaultAzureCredential
DefaultAzureCredential
Take one of the following approaches to set the user-assigned managed identity's client ID:
Set environment variableAZURE_CLIENT_ID. The parameterless constructor ofDefaultAzureCredentialuses the value of this environment variable, if present.import openai
from azure.identity import DefaultAzureCredential, get_bearer_token_provider

token_provider = get_bearer_token_provider(DefaultAzureCredential(), "https://cognitiveservices.azure.com/.default")

openai_client = openai.AzureOpenAI(
    api_version=os.getenv("AZURE_OPENAI_VERSION"),
    azure_endpoint=os.getenv("AZURE_OPENAI_ENDPOINT"),
    azure_ad_token_provider=token_provider
)
Set environment variableAZURE_CLIENT_ID. The parameterless constructor ofDefaultAzureCredentialuses the value of this environment variable, if present.
AZURE_CLIENT_ID
DefaultAzureCredential
import openai
from azure.identity import DefaultAzureCredential, get_bearer_token_provider

token_provider = get_bearer_token_provider(DefaultAzureCredential(), "https://cognitiveservices.azure.com/.default")

openai_client = openai.AzureOpenAI(
    api_version=os.getenv("AZURE_OPENAI_VERSION"),
    azure_endpoint=os.getenv("AZURE_OPENAI_ENDPOINT"),
    azure_ad_token_provider=token_provider
)
import openai
from azure.identity import DefaultAzureCredential, get_bearer_token_provider

token_provider = get_bearer_token_provider(DefaultAzureCredential(), "https://cognitiveservices.azure.com/.default")

openai_client = openai.AzureOpenAI(
    api_version=os.getenv("AZURE_OPENAI_VERSION"),
    azure_endpoint=os.getenv("AZURE_OPENAI_ENDPOINT"),
    azure_ad_token_provider=token_provider
)
Assign a specific user-assigned managed identity withDefaultAzureCredentialby using themanaged_identity_client_idparameter to configure it with a client ID:import openai
from azure.identity import DefaultAzureCredential, get_bearer_token_provider

user_assigned_client_id = "<your managed identity client ID>"

credential = DefaultAzureCredential(
 managed_identity_client_id=user_assigned_client_id
)

token_provider = get_bearer_token_provider(credential, "https://cognitiveservices.azure.com/.default")

openai_client = openai.AzureOpenAI(
    api_version=os.getenv("AZURE_OPENAI_VERSION"),
    azure_endpoint=os.getenv("AZURE_OPENAI_ENDPOINT"),
    azure_ad_token_provider=token_provider
)
Assign a specific user-assigned managed identity withDefaultAzureCredentialby using themanaged_identity_client_idparameter to configure it with a client ID:
DefaultAzureCredential
managed_identity_client_id
import openai
from azure.identity import DefaultAzureCredential, get_bearer_token_provider

user_assigned_client_id = "<your managed identity client ID>"

credential = DefaultAzureCredential(
 managed_identity_client_id=user_assigned_client_id
)

token_provider = get_bearer_token_provider(credential, "https://cognitiveservices.azure.com/.default")

openai_client = openai.AzureOpenAI(
    api_version=os.getenv("AZURE_OPENAI_VERSION"),
    azure_endpoint=os.getenv("AZURE_OPENAI_ENDPOINT"),
    azure_ad_token_provider=token_provider
)
import openai
from azure.identity import DefaultAzureCredential, get_bearer_token_provider

user_assigned_client_id = "<your managed identity client ID>"

credential = DefaultAzureCredential(
 managed_identity_client_id=user_assigned_client_id
)

token_provider = get_bearer_token_provider(credential, "https://cognitiveservices.azure.com/.default")

openai_client = openai.AzureOpenAI(
    api_version=os.getenv("AZURE_OPENAI_VERSION"),
    azure_endpoint=os.getenv("AZURE_OPENAI_ENDPOINT"),
    azure_ad_token_provider=token_provider
)
Resources
Passwordless connections developer guide
Feedback
Was this page helpful?
Additional resources