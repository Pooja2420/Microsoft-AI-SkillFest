Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Secure traffic between Standard logic apps and Azure virtual networks using private endpoints
Article
2025-04-15
6 contributors
In this article
Applies to:Azure Logic Apps (Standard)
To securely and privately communicate between your workflow in a Standard logic app and an Azure virtual network, you can set upprivate endpointsfor inbound traffic and use virtual network integration for outbound traffic.
A private endpoint is a network interface that privately and securely connects to a service powered by Azure Private Link. This service can be an Azure service such as Azure Logic Apps, Azure Storage, Azure Cosmos DB, SQL, or your own Private Link Service. The private endpoint uses a private IP address from your virtual network, which effectively brings the service into your virtual network.
This article shows how to set up access through private endpoints for inbound traffic and virtual network integration for outbound traffic.
For more information, review the following documentation:
What is Azure Private Endpoint?
Private endpoints - Integrate your app with an Azure virtual network
What is Azure Private Link?
Regional virtual network integration?
Prerequisites
A new or existing Azure virtual network that includes a subnet without any delegations. This subnet is used to deploy and allocate private IP addresses from the virtual network.For more information, review the following documentation:Quickstart: Create a virtual network using the Azure portalWhat is subnet delegation?Add or remove a subnet delegation
A new or existing Azure virtual network that includes a subnet without any delegations. This subnet is used to deploy and allocate private IP addresses from the virtual network.
For more information, review the following documentation:
Quickstart: Create a virtual network using the Azure portal
What is subnet delegation?
Add or remove a subnet delegation
Install or use a tool that can send HTTP requests to test your solution, for example:Visual Studio Codewith anextension from Visual Studio MarketplacePowerShell Invoke-RestMethodMicrosoft Edge - Network Console toolBrunocurlCautionFor scenarios where you have sensitive data, such as credentials, secrets, access tokens, API keys, and other
similar information, make sure to use a tool that protects your data with the necessary security features.
The tool should work offline or locally, and not require sign in to an online account or sync data to the cloud.
When you use a tool with these characteristics, you reduce the risk of exposing sensitive data to the public.
Install or use a tool that can send HTTP requests to test your solution, for example:
Visual Studio Codewith anextension from Visual Studio Marketplace
PowerShell Invoke-RestMethod
Microsoft Edge - Network Console tool
Bruno
curl
Caution
For scenarios where you have sensitive data, such as credentials, secrets, access tokens, API keys, and other
similar information, make sure to use a tool that protects your data with the necessary security features.
The tool should work offline or locally, and not require sign in to an online account or sync data to the cloud.
When you use a tool with these characteristics, you reduce the risk of exposing sensitive data to the public.

Set up inbound traffic through private endpoints
To secure inbound traffic to your workflow, complete these high-level steps:
Start your workflow with a built-in trigger that can receive and handle inbound requests, such as theRequesttrigger or theHTTP + Webhooktrigger. This trigger sets up your workflow with a callable endpoint.
Start your workflow with a built-in trigger that can receive and handle inbound requests, such as theRequesttrigger or theHTTP + Webhooktrigger. This trigger sets up your workflow with a callable endpoint.
Add a private endpoint for your logic app resource to your virtual network.
Add a private endpoint for your logic app resource to your virtual network.
Make test calls to check access to the endpoint. To call your logic app workflow after you set up this endpoint, you must be connected to the virtual network.
Make test calls to check access to the endpoint. To call your logic app workflow after you set up this endpoint, you must be connected to the virtual network.
Considerations for inbound traffic through private endpoints
If accessed from outside your virtual network, monitoring view can't access the inputs and outputs from triggers and actions.
If accessed from outside your virtual network, monitoring view can't access the inputs and outputs from triggers and actions.
Managed API webhook triggers (pushtriggers) and actions won't work because they run in the public cloud and can't call into your private network. They require a public endpoint to receive calls. For example, such triggers include the Dataverse trigger and the Event Grid trigger.
Managed API webhook triggers (pushtriggers) and actions won't work because they run in the public cloud and can't call into your private network. They require a public endpoint to receive calls. For example, such triggers include the Dataverse trigger and the Event Grid trigger.
If you use the Office 365 Outlook trigger, the workflow is triggered only hourly.
If you use the Office 365 Outlook trigger, the workflow is triggered only hourly.
Deployment from Visual Studio Code or Azure CLI works only from inside the virtual network. You can use the Deployment Center to link your logic app to a GitHub repo. You can then use Azure infrastructure to build and deploy your code.For GitHub integration to work, remove theWEBSITE_RUN_FROM_PACKAGEsetting from your logic app or set the value to0.
Deployment from Visual Studio Code or Azure CLI works only from inside the virtual network. You can use the Deployment Center to link your logic app to a GitHub repo. You can then use Azure infrastructure to build and deploy your code.
For GitHub integration to work, remove theWEBSITE_RUN_FROM_PACKAGEsetting from your logic app or set the value to0.
WEBSITE_RUN_FROM_PACKAGE
0
Enabling Private Link doesn't affect outbound traffic, which still flows through the App Service infrastructure.
Enabling Private Link doesn't affect outbound traffic, which still flows through the App Service infrastructure.
Prerequisites for inbound traffic through private endpoints
Along with thevirtual network setup in the top-level prerequisites, you need to have a new or existing Standard logic app workflow that starts with a built-in trigger that can receive requests.
For example, theRequesttrigger creates an endpoint on your workflow that can receive and handle inbound requests from other callers, including workflows. This endpoint provides a URL that you can use to call and trigger the workflow. For this example, the steps continue with theRequesttrigger.
For more information, reviewReceive and respond to inbound HTTP requests using Azure Logic Apps.
Create the workflow
If you haven't already, create a single-tenant based logic app, and a blank workflow.
If you haven't already, create a single-tenant based logic app, and a blank workflow.
After the designer opens, add theRequesttrigger as the first step in your workflow.
After the designer opens, add theRequesttrigger as the first step in your workflow.
Based on your scenario requirements, add other actions that you want to run in your workflow.
Based on your scenario requirements, add other actions that you want to run in your workflow.
When you're done, save your workflow.
When you're done, save your workflow.
For more information, reviewCreate single-tenant logic app workflows in Azure Logic Apps.
Copy the endpoint URL
On the workflow menu, underConfiguration, selectProperties.
On the workflow menu, underConfiguration, selectProperties.
On thePropertiespage, copy and save theWorkflow URLfor later use.
On thePropertiespage, copy and save theWorkflow URLfor later use.
To test the URL and trigger the workflow, send an HTTP request to the URL by using your HTTP request tool and its instructions.
To test the URL and trigger the workflow, send an HTTP request to the URL by using your HTTP request tool and its instructions.
Set up private endpoint connection
On the logic app resource menu, underSettings, selectNetworking.
On the logic app resource menu, underSettings, selectNetworking.
On theNetworkingpage, in theInbound traffic configurationsection, select the link next toPrivate endpoints.
On theNetworkingpage, in theInbound traffic configurationsection, select the link next toPrivate endpoints.
On thePrivate Endpoint connectionspage, selectAdd>ExpressorAdvanced.For more information about theAdvancedoption, seeCreate a private endpoint.
On thePrivate Endpoint connectionspage, selectAdd>ExpressorAdvanced.
For more information about theAdvancedoption, seeCreate a private endpoint.
On theAdd Private Endpointpane, provide the requested information about the endpoint.For more information, reviewPrivate Endpoint properties.
On theAdd Private Endpointpane, provide the requested information about the endpoint.
For more information, reviewPrivate Endpoint properties.
After Azure successfully provisions the private endpoint, try again to call the workflow URL.This time, you get an expected403 Forbiddenerror, which is means that the private endpoint is set up and works correctly.
After Azure successfully provisions the private endpoint, try again to call the workflow URL.
This time, you get an expected403 Forbiddenerror, which is means that the private endpoint is set up and works correctly.
403 Forbidden
To make sure the connection is working correctly, create a virtual machine in the same virtual network that has the private endpoint, and try calling the logic app workflow.
To make sure the connection is working correctly, create a virtual machine in the same virtual network that has the private endpoint, and try calling the logic app workflow.

Set up outbound traffic using virtual network integration
To secure outbound traffic from your logic app, you can integrate your logic app with a virtual network. First, create and test an example workflow. You can then set up virtual network integration.
Considerations for outbound traffic through virtual network integration
Setting up virtual network integration affects only outbound traffic. To secure inbound traffic, which continues to use the App Service shared endpoint, reviewSet up inbound traffic through private endpoints.
Setting up virtual network integration affects only outbound traffic. To secure inbound traffic, which continues to use the App Service shared endpoint, reviewSet up inbound traffic through private endpoints.
You can't change the subnet size after assignment, so use a subnet that's large enough to accommodate the scale that your app might reach. To avoid any issues with subnet capacity, use a/26subnet with 64 addresses. If you create the subnet for virtual network integration with the Azure portal, you must use/27as the minimum subnet size.
You can't change the subnet size after assignment, so use a subnet that's large enough to accommodate the scale that your app might reach. To avoid any issues with subnet capacity, use a/26subnet with 64 addresses. If you create the subnet for virtual network integration with the Azure portal, you must use/27as the minimum subnet size.
/26
/27
For the Azure Logic Apps runtime to work, you need to have an uninterrupted connection to the backend storage. If the backend storage is exposed to the virtual network through a private endpoint, make sure that the following ports are open:Source portDestination portSourceDestinationProtocolPurpose*443Subnet integrated with Standard logic appStorage accountTCPStorage account*445Subnet integrated with Standard logic appStorage accountTCPServer Message Block (SMB) File Share*20000-30000Subnet integrated with Standard logic appWorker processTCPCommunication between App Service Plan and Standard logic app nodes
For the Azure Logic Apps runtime to work, you need to have an uninterrupted connection to the backend storage. If the backend storage is exposed to the virtual network through a private endpoint, make sure that the following ports are open:
For Azure-hosted managed connectors to work, you need to have an uninterrupted connection to the managed API service. With virtual network integration, make sure that no firewall or network security policy blocks these connections. If your virtual network uses a network security group (NSG), user-defined route table (UDR), or a firewall, make sure that the virtual network allows outbound connections toall managed connector IP addressesin the corresponding region. Otherwise, Azure-managed connectors won't work.
For Azure-hosted managed connectors to work, you need to have an uninterrupted connection to the managed API service. With virtual network integration, make sure that no firewall or network security policy blocks these connections. If your virtual network uses a network security group (NSG), user-defined route table (UDR), or a firewall, make sure that the virtual network allows outbound connections toall managed connector IP addressesin the corresponding region. Otherwise, Azure-managed connectors won't work.
For more information, review the following documentation:
Integrate your app with an Azure virtual network
Network security groups
Virtual network traffic routing
Create and test the workflow
If you haven't already, in theAzure portal, create a single-tenant based logic app, and a blank workflow.
If you haven't already, in theAzure portal, create a single-tenant based logic app, and a blank workflow.
After the designer opens, add theRequesttrigger as the first step in your workflow.
After the designer opens, add theRequesttrigger as the first step in your workflow.
Add an HTTP action to call an internal service that's unavailable through the Internet and runs with a private IP address such as10.0.1.3.
Add an HTTP action to call an internal service that's unavailable through the Internet and runs with a private IP address such as10.0.1.3.
10.0.1.3
When you're done, save your workflow.
When you're done, save your workflow.
From the designer, manually run the workflow.The HTTP action fails, which is by design and expected because the workflow runs in the cloud and can't access your internal service.
From the designer, manually run the workflow.
The HTTP action fails, which is by design and expected because the workflow runs in the cloud and can't access your internal service.

Set up virtual network integration
In theAzure portal, on the logic app resource menu, underSettings, selectNetworking.
In theAzure portal, on the logic app resource menu, underSettings, selectNetworking.
On theNetworkingpage, in theOutbound traffic configurationsection, select the link next toVirtual network integration.
On theNetworkingpage, in theOutbound traffic configurationsection, select the link next toVirtual network integration.
On theVirtual network integrationpage, selectAdd virtual network integration.
On theVirtual network integrationpage, selectAdd virtual network integration.
On theAdd virtual network integrationpane, select the subscription, the virtual network that connects to your internal service, and the subnet where to add the logic app. When you finish, selectConnect.On theVirtual Network Integrationpage, by default, theOutbound internet trafficsetting is selected, which routes all outbound traffic through the virtual network. In this scenario, the app setting namedWEBSITE_VNET_ROUTE_ALLis ignored.To find this app setting, on the logic app resource menu, underSettings, selectEnvironment variables.
On theAdd virtual network integrationpane, select the subscription, the virtual network that connects to your internal service, and the subnet where to add the logic app. When you finish, selectConnect.
On theVirtual Network Integrationpage, by default, theOutbound internet trafficsetting is selected, which routes all outbound traffic through the virtual network. In this scenario, the app setting namedWEBSITE_VNET_ROUTE_ALLis ignored.
To find this app setting, on the logic app resource menu, underSettings, selectEnvironment variables.
If you use your own domain name server (DNS) with your virtual network, add theWEBSITE_DNS_SERVERapp setting, if none exists, and set the value to the IP address for your DNS. If you have a secondary DNS, add another app setting namedWEBSITE_DNS_ALT_SERVER, and set the value to the IP for your secondary DNS.
If you use your own domain name server (DNS) with your virtual network, add theWEBSITE_DNS_SERVERapp setting, if none exists, and set the value to the IP address for your DNS. If you have a secondary DNS, add another app setting namedWEBSITE_DNS_ALT_SERVER, and set the value to the IP for your secondary DNS.
After Azure successfully provisions the virtual network integration, try to run the workflow again.The HTTP action now runs successfully.
After Azure successfully provisions the virtual network integration, try to run the workflow again.
The HTTP action now runs successfully.
Next steps
Logic Apps Anywhere: Networking possibilities with Logic Apps (single-tenant)
Feedback
Was this page helpful?
Additional resources