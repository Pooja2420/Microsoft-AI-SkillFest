Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Deploy a custom container to Azure App Service with Azure Pipelines
Article
2024-08-12
16 contributors
In this article
Azure DevOps Services | Azure DevOps Server 2022 - Azure DevOps Server 2019
Using Azure Pipelines, you can build, test, and automatically deploy your web app to an Azure App Service Web App container on Linux. In this article, you will learn how to use YAML or Classic pipelines to:
Build and publish a Docker image to Azure Container Registry
Create an Azure Web App
Deploy a container to Azure App Service
Deploy to deployment slots
Prerequisites
An Azure account with an active subscription.Create an account for free.
A GitHub account. Create a freeGitHub accountif you don't have one already.
An Azure DevOps organization.Create an organization, if you don't have one already.
An Azure Container Registry.Create an Azure container registryif you don't have one already.
Get the code
Fork the following sample app at GitHub.
Java
JavaScript
Python
.NET Core
https://github.com/spring-guides/gs-spring-boot-docker.git
https://github.com/spring-guides/gs-spring-boot-docker.git
https://github.com/MicrosoftDocs/pipelines-javascript-docker
https://github.com/MicrosoftDocs/pipelines-javascript-docker
https://github.com/Microsoft/python-sample-vscode-flask-tutorial
https://github.com/Microsoft/python-sample-vscode-flask-tutorial
https://github.com/MicrosoftDocs/pipelines-dotnet-core-docker
https://github.com/MicrosoftDocs/pipelines-dotnet-core-docker
Build and publish a Docker image to Azure Container Registry
To complete this section successfully, you must have anAzure Container Registry. Refer to the prerequisites section for details.
Sign in to your Azure DevOps organization and navigate to your project.
Sign in to your Azure DevOps organization and navigate to your project.
SelectPipelines, and thenNew Pipeline.
SelectPipelines, and thenNew Pipeline.
SelectGitHubwhen prompted for the location of your source code, and then select your repository.
SelectGitHubwhen prompted for the location of your source code, and then select your repository.
Select theDocker: build and push an image to Azure Container Registrypipeline template.
Select theDocker: build and push an image to Azure Container Registrypipeline template.

Select your Azure subscription, and then selectContinue.
Select your Azure subscription, and then selectContinue.
Select yourContainer registryfrom the drop-down menu, and then selectValidate and configure.
Select yourContainer registryfrom the drop-down menu, and then selectValidate and configure.

Review the pipeline YAML template, and then selectSave and runto build and publish the Docker image to your Azure Container Registry.trigger:
- main

resources:
- repo: self

variables:
    # Container registry service connection established during pipeline creation
    dockerRegistryServiceConnection: '{{ containerRegistryConnection.Id }}'
    imageRepository: 'javascriptdocker'
    containerRegistry: 'sampleappcontainerregistry.azurecr.io'
    dockerfilePath: '$(Build.SourcesDirectory)/app/Dockerfile'
    tag: '$(Build.BuildId)'

    # Agent VM image name
    vmImageName: 'ubuntu-latest'

stages:
- stage: Build
    displayName: Build and push stage
    jobs:
    - job: Build
    displayName: Build
    pool:
        vmImage: $(vmImageName)
    steps:
    - task: Docker@2
        displayName: Build and push an image to container registry
        inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
            $(tag)
Review the pipeline YAML template, and then selectSave and runto build and publish the Docker image to your Azure Container Registry.
trigger:
- main

resources:
- repo: self

variables:
    # Container registry service connection established during pipeline creation
    dockerRegistryServiceConnection: '{{ containerRegistryConnection.Id }}'
    imageRepository: 'javascriptdocker'
    containerRegistry: 'sampleappcontainerregistry.azurecr.io'
    dockerfilePath: '$(Build.SourcesDirectory)/app/Dockerfile'
    tag: '$(Build.BuildId)'

    # Agent VM image name
    vmImageName: 'ubuntu-latest'

stages:
- stage: Build
    displayName: Build and push stage
    jobs:
    - job: Build
    displayName: Build
    pool:
        vmImage: $(vmImageName)
    steps:
    - task: Docker@2
        displayName: Build and push an image to container registry
        inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
            $(tag)
trigger:
- main

resources:
- repo: self

variables:
    # Container registry service connection established during pipeline creation
    dockerRegistryServiceConnection: '{{ containerRegistryConnection.Id }}'
    imageRepository: 'javascriptdocker'
    containerRegistry: 'sampleappcontainerregistry.azurecr.io'
    dockerfilePath: '$(Build.SourcesDirectory)/app/Dockerfile'
    tag: '$(Build.BuildId)'

    # Agent VM image name
    vmImageName: 'ubuntu-latest'

stages:
- stage: Build
    displayName: Build and push stage
    jobs:
    - job: Build
    displayName: Build
    pool:
        vmImage: $(vmImageName)
    steps:
    - task: Docker@2
        displayName: Build and push an image to container registry
        inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
            $(tag)
To view the published Docker image after your pipeline run has been completed, navigate to your container registry in Azure portal, and then selectRepositories.
To view the published Docker image after your pipeline run has been completed, navigate to your container registry in Azure portal, and then selectRepositories.

To deploy your image from the container registry, you must enable the admin user account. Navigate to your container registry in Azure portal, and selectAccess keys. Next, select the toggle button toEnable Admin user.
To deploy your image from the container registry, you must enable the admin user account. Navigate to your container registry in Azure portal, and selectAccess keys. Next, select the toggle button toEnable Admin user.
Create a Web App
Navigate toAzure portal.
Navigate toAzure portal.
SelectCreate a resource>Containers, and then chooseWeb App for Containers.
SelectCreate a resource>Containers, and then chooseWeb App for Containers.

Enter a name for your new web app, and create a new Resource Group. SelectLinuxfor theOperating System.
Enter a name for your new web app, and create a new Resource Group. SelectLinuxfor theOperating System.

In thePricing planssection, choose theF1 Free plan.
In thePricing planssection, choose theF1 Free plan.
SelectReview and create. Review your configuration, and selectCreatewhen you are done.
SelectReview and create. Review your configuration, and selectCreatewhen you are done.
Deploy to Web App for Containers
YAML
Classic
In this YAML, you build and push a Docker image to a container registry and then deploy it to Azure Web App for Containers. In the Build stage, you build and push a Docker image to an Azure Container Registry with theDocker@2 task. TheAzureWebAppContainer@1 taskdeploys the image to Web App for Containers.
trigger:
- main

resources:
- repo: self

variables: 
  ## Add this under variables section in the pipeline
  azureSubscription: <Name of the Azure subscription>
  appName: <Name of the Web App>
  containerRegistry: <Name of the Azure container registry>
  dockerRegistryServiceConnection: '4fa4efbc-59af-4c0b-8637-1d5bf7f268fc'
  imageRepository: <Name of image repository>
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'

  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build and push stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)


    ## Add the below snippet at the end of your pipeline
    - task: AzureWebAppContainer@1
      displayName: 'Azure Web App on Container Deploy'
      inputs:
        azureSubscription: $(azureSubscription)
        appName: $(appName)
        containers: $(containerRegistry)/$(imageRepository):$(tag)
trigger:
- main

resources:
- repo: self

variables: 
  ## Add this under variables section in the pipeline
  azureSubscription: <Name of the Azure subscription>
  appName: <Name of the Web App>
  containerRegistry: <Name of the Azure container registry>
  dockerRegistryServiceConnection: '4fa4efbc-59af-4c0b-8637-1d5bf7f268fc'
  imageRepository: <Name of image repository>
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'

  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build and push stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)


    ## Add the below snippet at the end of your pipeline
    - task: AzureWebAppContainer@1
      displayName: 'Azure Web App on Container Deploy'
      inputs:
        azureSubscription: $(azureSubscription)
        appName: $(appName)
        containers: $(containerRegistry)/$(imageRepository):$(tag)
From within your project, selectPipelines, and then selectRelease.
From within your project, selectPipelines, and then selectRelease.
SelectNew pipelineto create a new release pipeline.
SelectNew pipelineto create a new release pipeline.
Select theAzure App Service deploymenttemplate
Select theAzure App Service deploymenttemplate

SelectTasks, thenUnlink allinstage 1to unlink all the pipeline parameters.
SelectTasks, thenUnlink allinstage 1to unlink all the pipeline parameters.

Select theDeploy Azure App Servicetask, and fill out the required fields. SelectSavewhen you are done.
Select theDeploy Azure App Servicetask, and fill out the required fields. SelectSavewhen you are done.

SelectCreate release, and then chooseStage 1from the dropdown menu. SelectCreatewhen you are done.
SelectCreate release, and then chooseStage 1from the dropdown menu. SelectCreatewhen you are done.

Hover overStage 1in your pipeline, and selectDeployto queue and start the deployment.
Hover overStage 1in your pipeline, and selectDeployto queue and start the deployment.

Your pipeline logs should look similar to the screenshot below.
Your pipeline logs should look similar to the screenshot below.

Navigate to your newly deployed web app to verify your deployment.
Navigate to your newly deployed web app to verify your deployment.

Deploy to a deployment slot
YAML
Classic
You can configure the Azure Web App container to have multiple slots. Slots allow you to safely deploy your app and test it before making it available to your customers. SeeCreate staging environmentsfor more details.
The following YAML snippet shows how to deploy to a staging slot, and then swap to a production slot:
- task: AzureWebAppContainer@1
  inputs:
    azureSubscription: '<Azure service connection>'
    appName: '<Name of the web app>'
    containers: $(containerRegistry)/$(imageRepository):$(tag)
    deployToSlotOrASE: true
    resourceGroupName: '<Name of the resource group>'
    slotName: staging

- task: AzureAppServiceManage@0
  inputs:
    azureSubscription: '<Azure service connection>'
    WebAppName: '<name of web app>'
    ResourceGroupName: '<name of resource group>'
    SourceSlot: staging
    SwapWithProduction: true
- task: AzureWebAppContainer@1
  inputs:
    azureSubscription: '<Azure service connection>'
    appName: '<Name of the web app>'
    containers: $(containerRegistry)/$(imageRepository):$(tag)
    deployToSlotOrASE: true
    resourceGroupName: '<Name of the resource group>'
    slotName: staging

- task: AzureAppServiceManage@0
  inputs:
    azureSubscription: '<Azure service connection>'
    WebAppName: '<name of web app>'
    ResourceGroupName: '<name of resource group>'
    SourceSlot: staging
    SwapWithProduction: true
You can configure the Azure Web App for container to have multiple slots. Slots allow you to safely deploy your app and test it before making it available to your customers.
Use the optionDeploy to Slotin theAzure Web App Containertask to specify the slot to deploy to. You can swap the slots by using theAzure App Service Managetask.
FAQ
Q: How can I find my Docker registry credentials?
A: Navigate toAzure portal, and then select your Web App for Containers. SelectConfiguration>Application settingsand then click to show the value.

Related articles
Deploy to Azure
Use ARM templates
Define and target environments
Feedback
Was this page helpful?
Additional resources