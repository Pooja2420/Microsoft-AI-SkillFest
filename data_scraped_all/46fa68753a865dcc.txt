Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Block connector usage in Azure Logic Apps
Article
2024-01-10
4 contributors
In this article
Applies to:Azure Logic Apps (Consumption + Standard)
If your organization doesn't permit connecting to restricted or unapproved resources using theirmanaged connectorsin Azure Logic Apps, you can block the capability to create and use those connections in logic app workflows. WithAzure Policy, you can define and enforcepoliciesthat prevent creating or using connections for connectors that you want to block. For example, for security reasons, you might want to block connections to specific social media platforms or other services and systems.
This article shows how to set up a policy that blocks specific connections by using the Azure portal, but you can create policy definitions in other ways. For example, you can use the Azure REST API, Azure PowerShell, Azure CLI, and Azure Resource Manager templates. For more information, seeTutorial: Create and manage policies to enforce compliance.
Prerequisites
An Azure account and subscription. If you don't have a subscription,create a free Azure account.
An Azure account and subscription. If you don't have a subscription,create a free Azure account.
The reference ID for the connector that you want to block. For more information, seeFind the connector reference ID.
The reference ID for the connector that you want to block. For more information, seeFind the connector reference ID.

Find connector reference ID
If you already have a logic app with the connection that you want to block, follow thesteps for the Azure portal. Otherwise, follow these steps:

Connector reference doc
ReviewConnectors for Azure Logic Apps.
ReviewConnectors for Azure Logic Apps.
Find the reference page for the connector that you want to block.For example, if you want to block the Instagram connector, which is deprecated, go to this page:https://learn.microsoft.com/connectors/instagram/
Find the reference page for the connector that you want to block.
For example, if you want to block the Instagram connector, which is deprecated, go to this page:
https://learn.microsoft.com/connectors/instagram/
https://learn.microsoft.com/connectors/instagram/
From the page's URL, copy and save the connector reference ID at the end without the forward slash (/), for example,instagram.Later, when you create your policy definition, you use this ID in the definition's condition statement, for example:"like": "*managedApis/instagram"
From the page's URL, copy and save the connector reference ID at the end without the forward slash (/), for example,instagram.
/
instagram
Later, when you create your policy definition, you use this ID in the definition's condition statement, for example:
"like": "*managedApis/instagram"
"like": "*managedApis/instagram"

Azure portal
In theAzure portal, find and open your logic app workflow.
In theAzure portal, find and open your logic app workflow.
On the logic app menu, select one of the following options:Consumption logic app: UnderDevelopment Tools, selectAPI connections.Standard logic app: UnderWorkflows, selectConnections. On theConnectionspane, selectAPI Connectionsif not already selected.On the API connections pane, select the connection. When the connection pane opens, in the upper right corner, selectJSON View.Find theapiobject, which contains anidproperty and value that has the following format:"id": "/subscriptions/{Azure-subscription-ID}/providers/Microsoft.Web/locations/{Azure-region}/managedApis/{connection-name}"The following example shows theidproperty and value for an Instagram connection:"id": "/subscriptions/xxxxxXXXXXxxxxxXXXXXxxxxxXXXXX/providers/Microsoft.Web/locations/westus/managedApis/instagram"From theidproperty value, copy and save the connector reference ID at the end, for example,instagram.Later, when you create your policy definition, you use this ID in the definition's condition statement, for example:"like": "*managedApis/instagram"
On the logic app menu, select one of the following options:
Consumption logic app: UnderDevelopment Tools, selectAPI connections.
Consumption logic app: UnderDevelopment Tools, selectAPI connections.
Standard logic app: UnderWorkflows, selectConnections. On theConnectionspane, selectAPI Connectionsif not already selected.
Standard logic app: UnderWorkflows, selectConnections. On theConnectionspane, selectAPI Connectionsif not already selected.
On the API connections pane, select the connection. When the connection pane opens, in the upper right corner, selectJSON View.
On the API connections pane, select the connection. When the connection pane opens, in the upper right corner, selectJSON View.
Find theapiobject, which contains anidproperty and value that has the following format:"id": "/subscriptions/{Azure-subscription-ID}/providers/Microsoft.Web/locations/{Azure-region}/managedApis/{connection-name}"The following example shows theidproperty and value for an Instagram connection:"id": "/subscriptions/xxxxxXXXXXxxxxxXXXXXxxxxxXXXXX/providers/Microsoft.Web/locations/westus/managedApis/instagram"
Find theapiobject, which contains anidproperty and value that has the following format:
api
id
"id": "/subscriptions/{Azure-subscription-ID}/providers/Microsoft.Web/locations/{Azure-region}/managedApis/{connection-name}"
"id": "/subscriptions/{Azure-subscription-ID}/providers/Microsoft.Web/locations/{Azure-region}/managedApis/{connection-name}"
The following example shows theidproperty and value for an Instagram connection:
id
"id": "/subscriptions/xxxxxXXXXXxxxxxXXXXXxxxxxXXXXX/providers/Microsoft.Web/locations/westus/managedApis/instagram"
"id": "/subscriptions/xxxxxXXXXXxxxxxXXXXXxxxxxXXXXX/providers/Microsoft.Web/locations/westus/managedApis/instagram"
From theidproperty value, copy and save the connector reference ID at the end, for example,instagram.Later, when you create your policy definition, you use this ID in the definition's condition statement, for example:"like": "*managedApis/instagram"
From theidproperty value, copy and save the connector reference ID at the end, for example,instagram.
id
instagram
Later, when you create your policy definition, you use this ID in the definition's condition statement, for example:
"like": "*managedApis/instagram"
"like": "*managedApis/instagram"

Block creating connections
To block creating a connection altogether in a logic app workflow, follow these steps:
In theAzure portalsearch box, enterpolicy, and selectPolicy.
In theAzure portalsearch box, enterpolicy, and selectPolicy.

On thePolicymenu, underAuthoring, selectDefinitions. On theDefinitionspane toolbar, selectPolicy definition.
On thePolicymenu, underAuthoring, selectDefinitions. On theDefinitionspane toolbar, selectPolicy definition.

On thePolicy definitionpane, provide the information for your policy definition, based on the properties described under the example:PropertyRequiredValueDescriptionDefinition locationYes<Azure-subscription-name>The Azure subscription to use for the policy definition1. To find your subscription, select the ellipses (...) button.2. From theSubscriptionlist, find and select your subscription.3. When you're done, selectSelect.NameYes<policy-definition-name>The name to use for the policy definitionDescriptionNo<policy-definition-name>A description for the policy definitionCategoryYesLogic appsThe name for an existing category or new category for the policy definitionPolicy enforcementYesEnabledThis setting specifies whether to enable or disable the policy definition when you save your work.
On thePolicy definitionpane, provide the information for your policy definition, based on the properties described under the example:


1. To find your subscription, select the ellipses (...) button.2. From theSubscriptionlist, find and select your subscription.3. When you're done, selectSelect.
UnderPOLICY RULE, the JSON edit box is prepopulated with a policy definition template. Replace this template with yourpolicy definitionbased on the properties described in the table below and by following this syntax:{
   "mode": "All",
   "policyRule": {
      "if": {
         "field": "Microsoft.Web/connections/api.id",
         "like": "*managedApis/{connector-name}"
      },
      "then": {
         "effect": "deny"
      }
   },
   "parameters": {}
 }PropertyValueDescriptionmodeAllThe mode that determines the resource types that the policy evaluates.This scenario setsmodetoAll, which applies the policy to Azure resource groups, subscriptions, and all resource types.For more information, seePolicy definition structure - mode.if{condition-to-evaluate}The condition that determines when to enforce the policy ruleIn this scenario, the{condition-to-evaluate}determines whether theapi.idvalue inMicrosoft.Web/connections/api.idmatches on*managedApis/{connector-name}, which specifies a wildcard (*) value.For more information, seePolicy definition structure - Policy rule.fieldMicrosoft.Web/connections/api.idThefieldvalue to compare against the conditionIn this scenario, thefielduses thealias,Microsoft.Web/connections/api.id, to access the value in the connector property,api.id.like*managedApis/{connector-name}The logical operator and value to use for comparing thefieldvalueIn this scenario, thelikeoperator and the wildcard (*) character both make sure that the rule works regardless of region, and the string,*managedApis/{connector-name}, is the value to match where{connector-name}is the ID for the connector that you want to block.For example, suppose that you want to block creating connections to social media platforms or databases:- X:x- Instagram:instagram- Facebook:facebook- Pinterest:pinterest- SQL Server or Azure SQL:sqlTo find these connector IDs, seeFind connector reference IDearlier in this topic.then{effect-to-apply}The effect to apply when theifcondition is metIn this scenario, the{effect-to-apply}is to block and fail a request or operation that doesn't comply with the policy.For more information, seePolicy definition structure - Policy rule.effectdenyTheeffectis to block the request, which is to create the specified connectionFor more information, seeUnderstand Azure Policy effects - Deny.For example, suppose that you want to block creating connections with the Instagram connector. Here's the policy definition that you can use:{
   "mode": "All",
   "policyRule": {
      "if": {
         "field": "Microsoft.Web/connections/api.id",
         "like": "*managedApis/instagram"
      },
      "then": {
         "effect": "deny"
      }
   },
   "parameters": {}
}Here's the way that thePOLICY RULEbox appears:For multiple connectors, you can add more conditions, for example:{
   "mode": "All",
   "policyRule": {
      "if": {
         "anyOf": [
            {
               "field": "Microsoft.Web/connections/api.id",
               "like": "*managedApis/instagram"
            },
            {
               "field": "Microsoft.Web/connections/api.id",
               "like": "*managedApis/x"
            },
            {
               "field": "Microsoft.Web/connections/api.id",
               "like": "*managedApis/facebook"
            },
            {
               "field": "Microsoft.Web/connections/api.id",
               "like": "*managedApis/pinterest"
            }
         ]
      },
      "then": {
         "effect": "deny"
      }
   },
   "parameters": {}
 }
UnderPOLICY RULE, the JSON edit box is prepopulated with a policy definition template. Replace this template with yourpolicy definitionbased on the properties described in the table below and by following this syntax:
{
   "mode": "All",
   "policyRule": {
      "if": {
         "field": "Microsoft.Web/connections/api.id",
         "like": "*managedApis/{connector-name}"
      },
      "then": {
         "effect": "deny"
      }
   },
   "parameters": {}
 }
{
   "mode": "All",
   "policyRule": {
      "if": {
         "field": "Microsoft.Web/connections/api.id",
         "like": "*managedApis/{connector-name}"
      },
      "then": {
         "effect": "deny"
      }
   },
   "parameters": {}
 }
mode
All

This scenario setsmodetoAll, which applies the policy to Azure resource groups, subscriptions, and all resource types.
mode
All

For more information, seePolicy definition structure - mode.
if
{condition-to-evaluate}

In this scenario, the{condition-to-evaluate}determines whether theapi.idvalue inMicrosoft.Web/connections/api.idmatches on*managedApis/{connector-name}, which specifies a wildcard (*) value.
{condition-to-evaluate}
api.id
Microsoft.Web/connections/api.id
*managedApis/{connector-name}

For more information, seePolicy definition structure - Policy rule.
field
Microsoft.Web/connections/api.id
field

In this scenario, thefielduses thealias,Microsoft.Web/connections/api.id, to access the value in the connector property,api.id.
field
Microsoft.Web/connections/api.id
api.id
like
*managedApis/{connector-name}
field

In this scenario, thelikeoperator and the wildcard (*) character both make sure that the rule works regardless of region, and the string,*managedApis/{connector-name}, is the value to match where{connector-name}is the ID for the connector that you want to block.
like
*managedApis/{connector-name}
{connector-name}

For example, suppose that you want to block creating connections to social media platforms or databases:

- X:x- Instagram:instagram- Facebook:facebook- Pinterest:pinterest- SQL Server or Azure SQL:sql
x
instagram
facebook
pinterest
sql

To find these connector IDs, seeFind connector reference IDearlier in this topic.
then
{effect-to-apply}
if

In this scenario, the{effect-to-apply}is to block and fail a request or operation that doesn't comply with the policy.
{effect-to-apply}

For more information, seePolicy definition structure - Policy rule.
effect
deny
effect

For more information, seeUnderstand Azure Policy effects - Deny.
For example, suppose that you want to block creating connections with the Instagram connector. Here's the policy definition that you can use:
{
   "mode": "All",
   "policyRule": {
      "if": {
         "field": "Microsoft.Web/connections/api.id",
         "like": "*managedApis/instagram"
      },
      "then": {
         "effect": "deny"
      }
   },
   "parameters": {}
}
{
   "mode": "All",
   "policyRule": {
      "if": {
         "field": "Microsoft.Web/connections/api.id",
         "like": "*managedApis/instagram"
      },
      "then": {
         "effect": "deny"
      }
   },
   "parameters": {}
}
Here's the way that thePOLICY RULEbox appears:

For multiple connectors, you can add more conditions, for example:
{
   "mode": "All",
   "policyRule": {
      "if": {
         "anyOf": [
            {
               "field": "Microsoft.Web/connections/api.id",
               "like": "*managedApis/instagram"
            },
            {
               "field": "Microsoft.Web/connections/api.id",
               "like": "*managedApis/x"
            },
            {
               "field": "Microsoft.Web/connections/api.id",
               "like": "*managedApis/facebook"
            },
            {
               "field": "Microsoft.Web/connections/api.id",
               "like": "*managedApis/pinterest"
            }
         ]
      },
      "then": {
         "effect": "deny"
      }
   },
   "parameters": {}
 }
{
   "mode": "All",
   "policyRule": {
      "if": {
         "anyOf": [
            {
               "field": "Microsoft.Web/connections/api.id",
               "like": "*managedApis/instagram"
            },
            {
               "field": "Microsoft.Web/connections/api.id",
               "like": "*managedApis/x"
            },
            {
               "field": "Microsoft.Web/connections/api.id",
               "like": "*managedApis/facebook"
            },
            {
               "field": "Microsoft.Web/connections/api.id",
               "like": "*managedApis/pinterest"
            }
         ]
      },
      "then": {
         "effect": "deny"
      }
   },
   "parameters": {}
 }
When you're done, selectSave. After you save the policy definition, Azure Policy generates and adds more property values to the policy definition.
When you're done, selectSave. After you save the policy definition, Azure Policy generates and adds more property values to the policy definition.
Next, to assign the policy definition where you want to enforce the policy,create a policy assignment.
Next, to assign the policy definition where you want to enforce the policy,create a policy assignment.
For more information about Azure Policy definitions, see these topics:
Azure Policy definition structure
Tutorial: Create and manage policies to enforce compliance
Azure Policy built-in policy definitions for Azure Logic Apps

Block associating connections with logic apps
When you create a connection in a logic app workflow, this connection exists as separate Azure resource. If you delete only the logic app workflow, the connection resource isn't automatically deleted and continues to exist until deleted. You might have a scenario where the connection resource already exists or where you have to create the connection resource for use outside the logic app. You can still block the capability to associate the connection with a different logic app workflow by creating a policy that prevents saving logic app workflows that try to use the restricted or unapproved connection. This policy affects only logic app workflows that don't already use the connection.
In theAzure portalsearch box, enterpolicy, and selectPolicy.
In theAzure portalsearch box, enterpolicy, and selectPolicy.

On thePolicymenu, underAuthoring, selectDefinitions. On theDefinitionspane toolbar, selectPolicy definition.
On thePolicymenu, underAuthoring, selectDefinitions. On theDefinitionspane toolbar, selectPolicy definition.

UnderPolicy definition, provide the information for your policy definition, based on the properties described under the example and continues by using Instagram as the example:PropertyRequiredValueDescriptionDefinition locationYes<Azure-subscription-name>The Azure subscription to use for the policy definition1. To find your subscription, select the ellipses (...) button.2. From theSubscriptionlist, find and select your subscription.3. When you're done, selectSelect.NameYes<policy-definition-name>The name to use for the policy definitionDescriptionNo<policy-definition-name>A description for the policy definitionCategoryYesLogic appsThe name for an existing category or new category for the policy definitionPolicy enforcementYesEnabledThis setting specifies whether to enable or disable the policy definition when you save your work.
UnderPolicy definition, provide the information for your policy definition, based on the properties described under the example and continues by using Instagram as the example:


1. To find your subscription, select the ellipses (...) button.2. From theSubscriptionlist, find and select your subscription.3. When you're done, selectSelect.
UnderPOLICY RULE, the JSON edit box is prepopulated with a policy definition template. Replace this template with yourpolicy definitionbased on the properties described in the table below and by following this syntax:{
   "mode": "All",
   "policyRule": {
      "if": {
         "value": "[string(field('Microsoft.Logic/workflows/parameters'))]",
         "contains": "{connector-name}"
      },
      "then": {
         "effect": "deny"
      }
   },
   "parameters": {}
 }PropertyValueDescriptionmodeAllThe mode that determines the resource types that the policy evaluates.This scenario setsmodetoAll, which applies the policy to Azure resource groups, subscriptions, and all resource types.For more information, seePolicy definition structure - mode.if{condition-to-evaluate}The condition that determines when to enforce the policy ruleIn this scenario, the{condition-to-evaluate}determines whether the string output from[string(field('Microsoft.Logic/workflows/parameters'))], contains the string,{connector-name}.For more information, seePolicy definition structure - Policy rule.value[string(field('Microsoft.Logic/workflows/parameters'))]The value to compare against the conditionIn this scenario, thevalueis the string output from[string(field('Microsoft.Logic/workflows/parameters'))], which converts the$connectorsobject inside theMicrosoft.Logic/workflows/parametersobject to a string.contains{connector-name}The logical operator and value to use for comparing with thevaluepropertyIn this scenario, thecontainsoperator makes sure that the rule works regardless where{connector-name}appears, where the string,{connector-name}, is the ID for the connector that you want to restrict or block.For example, suppose that you want to block using connections to social media platforms or databases:- X:x- Instagram:instagram- Facebook:facebook- Pinterest:pinterest- SQL Server or Azure SQL:sqlTo find these connector IDs, seeFind connector reference IDearlier in this topic.then{effect-to-apply}The effect to apply when theifcondition is metIn this scenario, the{effect-to-apply}is to block and fail a request or operation that doesn't comply with the policy.For more information, seePolicy definition structure - Policy rule.effectdenyTheeffectis todenyor block the request to save a logic app that uses the specified connectionFor more information, seeUnderstand Azure Policy effects - Deny.For example, suppose that you want to block saving logic apps that use Instagram connections. Here's the policy definition that you can use:{
   "mode": "All",
   "policyRule": {
      "if": {
         "value": "[string(field('Microsoft.Logic/workflows/parameters'))]",
         "contains": "instagram"
      },
      "then": {
         "effect": "deny"
      }
   },
   "parameters": {}
 }Here's the way that thePOLICY RULEbox appears:
UnderPOLICY RULE, the JSON edit box is prepopulated with a policy definition template. Replace this template with yourpolicy definitionbased on the properties described in the table below and by following this syntax:
{
   "mode": "All",
   "policyRule": {
      "if": {
         "value": "[string(field('Microsoft.Logic/workflows/parameters'))]",
         "contains": "{connector-name}"
      },
      "then": {
         "effect": "deny"
      }
   },
   "parameters": {}
 }
{
   "mode": "All",
   "policyRule": {
      "if": {
         "value": "[string(field('Microsoft.Logic/workflows/parameters'))]",
         "contains": "{connector-name}"
      },
      "then": {
         "effect": "deny"
      }
   },
   "parameters": {}
 }
mode
All

This scenario setsmodetoAll, which applies the policy to Azure resource groups, subscriptions, and all resource types.
mode
All

For more information, seePolicy definition structure - mode.
if
{condition-to-evaluate}

In this scenario, the{condition-to-evaluate}determines whether the string output from[string(field('Microsoft.Logic/workflows/parameters'))], contains the string,{connector-name}.
{condition-to-evaluate}
[string(field('Microsoft.Logic/workflows/parameters'))]
{connector-name}

For more information, seePolicy definition structure - Policy rule.
value
[string(field('Microsoft.Logic/workflows/parameters'))]

In this scenario, thevalueis the string output from[string(field('Microsoft.Logic/workflows/parameters'))], which converts the$connectorsobject inside theMicrosoft.Logic/workflows/parametersobject to a string.
value
[string(field('Microsoft.Logic/workflows/parameters'))]
$connectors
Microsoft.Logic/workflows/parameters
contains
{connector-name}
value

In this scenario, thecontainsoperator makes sure that the rule works regardless where{connector-name}appears, where the string,{connector-name}, is the ID for the connector that you want to restrict or block.
contains
{connector-name}
{connector-name}

For example, suppose that you want to block using connections to social media platforms or databases:

- X:x- Instagram:instagram- Facebook:facebook- Pinterest:pinterest- SQL Server or Azure SQL:sql
x
instagram
facebook
pinterest
sql

To find these connector IDs, seeFind connector reference IDearlier in this topic.
then
{effect-to-apply}
if

In this scenario, the{effect-to-apply}is to block and fail a request or operation that doesn't comply with the policy.
{effect-to-apply}

For more information, seePolicy definition structure - Policy rule.
effect
deny
effect
deny

For more information, seeUnderstand Azure Policy effects - Deny.
For example, suppose that you want to block saving logic apps that use Instagram connections. Here's the policy definition that you can use:
{
   "mode": "All",
   "policyRule": {
      "if": {
         "value": "[string(field('Microsoft.Logic/workflows/parameters'))]",
         "contains": "instagram"
      },
      "then": {
         "effect": "deny"
      }
   },
   "parameters": {}
 }
{
   "mode": "All",
   "policyRule": {
      "if": {
         "value": "[string(field('Microsoft.Logic/workflows/parameters'))]",
         "contains": "instagram"
      },
      "then": {
         "effect": "deny"
      }
   },
   "parameters": {}
 }
Here's the way that thePOLICY RULEbox appears:

When you're done, selectSave. After you save the policy definition, Azure Policy generates and adds more property values to the policy definition.
When you're done, selectSave. After you save the policy definition, Azure Policy generates and adds more property values to the policy definition.
Next, to assign the policy definition where you want to enforce the policy,create a policy assignment.
Next, to assign the policy definition where you want to enforce the policy,create a policy assignment.
For more information about Azure Policy definitions, see these topics:
Azure Policy definition structure
Tutorial: Create and manage policies to enforce compliance
Azure Policy built-in policy definitions for Azure Logic Apps

Create policy assignment
Next, you need to assign the policy definition where you want to enforce the policy, for example, to a single resource group, multiple resource groups, Microsoft Entra tenant, or Azure subscription. For this task, follow these steps to create a policy assignment:
In theAzure portal, portal search box, enterpolicy, and selectPolicy.
In theAzure portal, portal search box, enterpolicy, and selectPolicy.

On thePolicymenu, underAuthoring, selectAssignments. On theAssignmentspane toolbar, selectAssign policy.
On thePolicymenu, underAuthoring, selectAssignments. On theAssignmentspane toolbar, selectAssign policy.

On theAssign policypane, underBasics, provide this information for the policy assignment:PropertyRequiredDescriptionScopeYesThe resources where you want to enforce the policy assignment.1. Next to theScopebox, select the ellipses (...) button.2. From theSubscriptionlist, select the Azure subscription.3. Optionally, from theResource Grouplist, select the resource group.4. When you're done, selectSelect.ExclusionsNoAny Azure resources to exclude from the policy assignment.1. Next to theExclusionsbox, select the ellipses (...) button.2. From theResourcelist, select the resource >Add to Selected Scope.3. When you're done, selectSave.Policy definitionYesThe name for the policy definition that you want to assign and enforce. This example continues with the example Instagram policy, "Block Instagram connections".1. Next to thePolicy definitionbox, select the ellipses (...) button.2. Find and select the policy definition by using theTypefilter orSearchbox.3. When you're done, selectSelect.Assignment nameYesThe name to use for the policy assignment, if different from the policy definitionAssignment IDYesThe automatically generated ID for the policy assignmentDescriptionNoA description for the policy assignmentPolicy enforcementYesThe setting that enables or disables the policy assignmentAssigned byNoThe name for the person who created and applied the policy assignmentFor example, to assign the policy to an Azure resource group by using the Instagram example:
On theAssign policypane, underBasics, provide this information for the policy assignment:

1. Next to theScopebox, select the ellipses (...) button.2. From theSubscriptionlist, select the Azure subscription.3. Optionally, from theResource Grouplist, select the resource group.4. When you're done, selectSelect.

1. Next to theExclusionsbox, select the ellipses (...) button.2. From theResourcelist, select the resource >Add to Selected Scope.3. When you're done, selectSave.

1. Next to thePolicy definitionbox, select the ellipses (...) button.2. Find and select the policy definition by using theTypefilter orSearchbox.3. When you're done, selectSelect.
For example, to assign the policy to an Azure resource group by using the Instagram example:

When you're done, selectReview + create.After you create a policy, you might have to wait up to 15 minutes before the policy takes effect. Changes might also have similar delayed effects.
When you're done, selectReview + create.
After you create a policy, you might have to wait up to 15 minutes before the policy takes effect. Changes might also have similar delayed effects.
After the policy takes effect, you cantest your policy.
After the policy takes effect, you cantest your policy.
For more information, seeQuickstart: Create a policy assignment to identify noncompliant resources.

Test the policy
To try your policy, start creating a connection by using the now restricted connector in the workflow designer. Continuing with the Instagram example, when you sign in to Instagram, you get this error that your logic app failed to create the connection:

The message includes this information:
"Resource 'instagram' was disallowed by policy."
"Block Instagram connections"
"/subscriptions/xxxxxXXXXXxxxxxXXXXXxxxxxXXXXX/resourceGroups/MyLogicApp-RG/providers/Microsoft.Authorization/policyAssignments/4231890fc3bd4352acb0b673"
"/subscriptions/xxxxxXXXXXxxxxxXXXXXxxxxxXXXXX/providers/Microsoft.Authorization/policyDefinitions/aaaa0a0a-bb1b-cc2c-dd3d-eeeeee4e4e4e"
Next steps
Learn more aboutAzure Policy
Feedback
Was this page helpful?
Additional resources