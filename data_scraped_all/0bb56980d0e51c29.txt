Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Create and configure Application Insights resources
Article
2025-02-26
16 contributors
In this article
Important
This article applies toworkspace-basedApplication Insights resources. Classic Application Insights resources have been retired.Transition to workspace-based Application Insightsto take advantage of new capabilities.
Application Insightsintegrates withLog Analyticsand sends telemetry to a common Log Analytics workspace. This setup provides full access to Log Analytics features, consolidates logs in one location, and allows for unifiedAzure role-based access controlwhich eliminates the need for cross-app/workspace queries.
Enhanced capabilities include:
Customer-managed keys-Encrypt your data at rest with keys only accessible to you.
Azure Private Link-Securely connect Azure PaaS services to your virtual network using private endpoints.
Bring your own storage (BYOS)-Manage data from.NET ProfilerandSnapshot Debuggerwith policies on encryption, lifetime, and network access.
Commitment tiers-Save up to 30% over pay-as-you-go pricing.
This article shows you how to create and configure Application Insights resources. Along with the Application Insights resource itself, you can add various configurations like setting thedailycap andpricing plan. You can also createavailability tests, set upmetric alerts, and automate the process usingAzure Resource Manager.
Note
Data ingestion and retention for workspace-based Application Insights resources are billed through the Log Analytics workspace where the data is located. To learn more about billing, seeAzure Monitor Logs pricing details.
Prerequisites
An active Azure subscription.
The necessary permissions to create resources.
Additional requirements
Portal
Azure CLI
PowerShell
REST
Bicep
ARM (JSON)
No additional requirements.
To access Application Insights Azure CLI commands, you first need to run:
az extension add -n application-insights
az extension add -n application-insights
If you don't run theaz extension addcommand, you see an error message that statesaz : ERROR: az monitor: 'app-insights' is not in the 'az monitor' command group. See 'az monitor --help'.
az extension add
az : ERROR: az monitor: 'app-insights' is not in the 'az monitor' command group. See 'az monitor --help'
Note
We recommend that you use the Azure Az PowerShell module to interact with Azure. To get started, seeInstall Azure PowerShell. To learn how to migrate to the Az PowerShell module, seeMigrate Azure PowerShell from AzureRM to Az.
To make a REST API call to Azure, you first need to obtain an access token.
For more information, seeManage Azure resources by using the REST API.
You can deploy Bicep templates via the Azure CLI, Azure PowerShell, and in the Azure portal. Check the respective tabs for additional requirements.
You can deploy ARM templates via the Azure CLI, Azure PowerShell, and in the Azure portal. Check the respective tabs for additional requirements.
Create an Application Insights resource
Portal
Azure CLI
PowerShell
REST
Bicep
ARM (JSON)
Sign in to theAzure portal.
SelectCreate a resource.
Open the categoryMonitoring & Diagnostics, then selectApplication Insights.
Enter all relevant information, thenReview + createyour Application Insights resource.

Note
If you don't connect to an existing Log Analytics workspace during resource creation, a new Log Analytics resource is created automatically along with your Application Insights resource.
After creating your resource, you can find the corresponding workspace information in the Application InsightsOverviewpane.

Select the blue link text to go to the associated Log Analytics workspace where you can take advantage of the new unified workspace query environment.
Note
We still provide full backward compatibility for your Application Insights classic resource queries, workbooks, and log-based alerts. To query or view thenew workspace-based table structure or schema, you must first go to your Log Analytics workspace. SelectLogs (Analytics)in theApplication Insightspanes for access to the classic Application Insights query experience.
To create a workspace-based Application Insights resource, a Log Analytics workspace is required. If you don't have one already, you can use the following Azure CLI command to create one.
Placeholders:<resource-group-name>,<log-analytics-workspace-name>,<azure-region-name>
<resource-group-name>
<log-analytics-workspace-name>
<azure-region-name>
az monitor log-analytics workspace create --resource-group <resource-group-name> --workspace-name <log-analytics-workspace-name> --location <azure-region-name>
az monitor log-analytics workspace create --resource-group <resource-group-name> --workspace-name <log-analytics-workspace-name> --location <azure-region-name>
To create an Application Insights resource, run the following Azure CLI command in your terminal.
Placeholders:<application-insights-resource-name>,<azure-region-name>,<resource-group-name>,<log-analytics-workspace-name>
<application-insights-resource-name>
<azure-region-name>
<resource-group-name>
<log-analytics-workspace-name>
az monitor app-insights component create --app <application-insights-resource-name> --location <azure-region-name> --resource-group <resource-group-name> --workspace <log-analytics-workspace-name>
az monitor app-insights component create --app <application-insights-resource-name> --location <azure-region-name> --resource-group <resource-group-name> --workspace <log-analytics-workspace-name>
For more information about creating Application Insights resources and Log Analytics workspaces using the Azure CLI, see theAzure CLI documentation for Application InsightsandLog Analytics.
To create a workspace-based Application Insights resource, a Log Analytics workspace is required. If you don't have one already, you can use the following Azure PowerShell command to create one.
Placeholders:<resource-group-name>,<log-analytics-workspace-name>,<azure-region-name>
<resource-group-name>
<log-analytics-workspace-name>
<azure-region-name>
New-AzOperationalInsightsWorkspace -ResourceGroupName <resource-group-name> -Name <log-analytics-workspace-name> -Location <azure-region-name>
New-AzOperationalInsightsWorkspace -ResourceGroupName <resource-group-name> -Name <log-analytics-workspace-name> -Location <azure-region-name>
To create an Application Insights resource, run the following Azure PowerShell command in your terminal.
Placeholders:<resource-group-name>,<application-insights-resource-name>,<azure-region-name>,<subscription-id>,<log-analytics-workspace-name>
<resource-group-name>
<application-insights-resource-name>
<azure-region-name>
<subscription-id>
<log-analytics-workspace-name>
New-AzApplicationInsights -ResourceGroupName <resource-group-name> -Name <application-insights-resource-name> -Location <azure-region-name> -WorkspaceResourceId /subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/Microsoft.OperationalInsights/workspaces/<log-analytics-workspace-name>
New-AzApplicationInsights -ResourceGroupName <resource-group-name> -Name <application-insights-resource-name> -Location <azure-region-name> -WorkspaceResourceId /subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/Microsoft.OperationalInsights/workspaces/<log-analytics-workspace-name>
For more information about creating Application Insights resources and Log Analytics workspaces using Azure PowerShell, see theAzure PowerShell documentation for Application InsightsandLog Analytics.
To create a workspace-based Application Insights resource, a Log Analytics workspace is required. If you don't have one already, you can use the following REST API call to create one.
Placeholders:<subscription-id>,<resource-group-name>,<log-analytics-workspace-name>,<access-token>,<azure-region-name>
<subscription-id>
<resource-group-name>
<log-analytics-workspace-name>
<access-token>
<azure-region-name>
PUT https://management.azure.com/subscriptions/<subscription-id>/resourcegroups/<resource-group-name>/providers/Microsoft.OperationalInsights/workspaces/<log-analytics-workspace-name>?api-version=2023-09-01
Authorization: Bearer <access-token>
Content-Type: application/json

{
	"location": "<azure-region-name>"
}
PUT https://management.azure.com/subscriptions/<subscription-id>/resourcegroups/<resource-group-name>/providers/Microsoft.OperationalInsights/workspaces/<log-analytics-workspace-name>?api-version=2023-09-01
Authorization: Bearer <access-token>
Content-Type: application/json

{
	"location": "<azure-region-name>"
}
To create an Application Insights resource using the REST API, use the following request.
Placeholders:<subscription-id>,<resource-group-name>,<application-insights-resource-name>,<access-token>,<application-type>,<azure-region-name>,<log-analytics-workspace-name>
<subscription-id>
<resource-group-name>
<application-insights-resource-name>
<access-token>
<application-type>
<azure-region-name>
<log-analytics-workspace-name>
PUT https://management.azure.com/subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/Microsoft.Insights/components/<application-insights-resource-name>?api-version=2020-02-02
Authorization: Bearer <access-token>
Content-Type: application/json

{
  "kind": "<application-type>",
  "location": "<azure-region-name>",
  "properties": {
    "Application_Type": "<application-type>",
    "WorkspaceResourceId": "/subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/Microsoft.OperationalInsights/workspaces/<log-analytics-workspace-name>"
  }
}
PUT https://management.azure.com/subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/Microsoft.Insights/components/<application-insights-resource-name>?api-version=2020-02-02
Authorization: Bearer <access-token>
Content-Type: application/json

{
  "kind": "<application-type>",
  "location": "<azure-region-name>",
  "properties": {
    "Application_Type": "<application-type>",
    "WorkspaceResourceId": "/subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/Microsoft.OperationalInsights/workspaces/<log-analytics-workspace-name>"
  }
}
For more information about creating Application Insights resources and Log Analytics workspaces using the REST API, see theREST API documentation for Application InsightsandLog Analytics.
Here's how to create a new Application Insights resource using a Bicep template.
Create a template
Create a new.bicepfile (for example,my-template.bicep), copy the following content into it:
param name string 
param type string 
param regionId string 
param requestSource string 
param workspaceResourceId string 

resource appInsights 'Microsoft.Insights/components@2020-02-02' = {
  name: name
  location: regionId
  tags: tagsArray
  kind: 'other'
  properties: {
    Application_Type: type
    Request_Source: requestSource
    WorkspaceResourceId: workspaceResourceId
  }
}
param name string 
param type string 
param regionId string 
param requestSource string 
param workspaceResourceId string 

resource appInsights 'Microsoft.Insights/components@2020-02-02' = {
  name: name
  location: regionId
  tags: tagsArray
  kind: 'other'
  properties: {
    Application_Type: type
    Request_Source: requestSource
    WorkspaceResourceId: workspaceResourceId
  }
}
Create a parameter file
Create a new.bicepparamfile (for example,my-parameters.bicepparam), copy the following content into it, and replace the placeholders<application-insights-resource-name>,<application-type>,<azure-region-name>,<subscription-id>,<resource-group-name>, and<log-analytics-workspace-name>with your specific values:
<application-insights-resource-name>
<application-type>
<azure-region-name>
<subscription-id>
<resource-group-name>
<log-analytics-workspace-name>
using 'my-template.bicep' 

param name string = '<application-insights-resource-name>'
param type string = '<application-type>'
param regionId string = '<azure-region-name>'
param requestSource string = 'CustomDeployment'
param workspaceResourceId string = '/subscriptions/<subscription-id>/resourcegroups/<resource-group-name>/providers/microsoft.operationalinsights/workspaces/<log-analytics-workspace-name>'
using 'my-template.bicep' 

param name string = '<application-insights-resource-name>'
param type string = '<application-type>'
param regionId string = '<azure-region-name>'
param requestSource string = 'CustomDeployment'
param workspaceResourceId string = '/subscriptions/<subscription-id>/resourcegroups/<resource-group-name>/providers/microsoft.operationalinsights/workspaces/<log-analytics-workspace-name>'
Use the template to create a new Application Insights resource
In PowerShell, sign in to Azure by using$Connect-AzAccount.
In PowerShell, sign in to Azure by using$Connect-AzAccount.
$Connect-AzAccount
Set your context to a subscription withSet-AzContext "<subscription ID>".
Set your context to a subscription withSet-AzContext "<subscription ID>".
Set-AzContext "<subscription ID>"
Run a new deployment to create a new Application Insights resource:New-AzResourceGroupDeployment -ResourceGroupName <your-resource-group> -TemplateFile my-template.bicep -TemplateParameterFile my-parameters.bicepparam-ResourceGroupNameis the group where you want to create the new resources.-TemplateFilemust occur before the custom parameters.-TemplateParameterFileis the name of the parameter file.
Run a new deployment to create a new Application Insights resource:
New-AzResourceGroupDeployment -ResourceGroupName <your-resource-group> -TemplateFile my-template.bicep -TemplateParameterFile my-parameters.bicepparam
New-AzResourceGroupDeployment -ResourceGroupName <your-resource-group> -TemplateFile my-template.bicep -TemplateParameterFile my-parameters.bicepparam
-ResourceGroupNameis the group where you want to create the new resources.
-ResourceGroupName
-TemplateFilemust occur before the custom parameters.
-TemplateFile
-TemplateParameterFileis the name of the parameter file.
-TemplateParameterFile
You can add other parameters. You find their descriptions in the parameters section of the template.
Tip
You can use the VS CodeBicep extension by Microsoftto simplify the deployment process.
Visitpublisher's GitHub repositoryfor extension related questions.
Here's how to create a new Application Insights resource using an ARM template.
Create a template
Create a new.jsonfile (for example,my-template.json) and copy the following content into it:
{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "name": {
      "type": "string",
      "metadata": {
        "description": "Name of Application Insights resource."
      }
    },
    "type": {
      "type": "string",
      "metadata": {
        "description": "Type of app you are deploying. This field is for legacy reasons and will not impact the type of Application Insights resource you deploy."
      }
    },
    "regionId": {
      "type": "string",
      "metadata": {
        "description": "Which Azure region to deploy the resource to. This must be a valid Azure regionId."
      }
    },
    "tagsArray": {
      "type": "object",
      "metadata": {
        "description": "See documentation on tags: https://learn.microsoft.com/azure/azure-resource-manager/management/tag-resources."
      }
    },
    "requestSource": {
      "type": "string",
      "metadata": {
        "description": "Source of Azure Resource Manager deployment"
      }
    },
    "workspaceResourceId": {
      "type": "string",
      "metadata": {
        "description": "Log Analytics workspace ID to associate with your Application Insights resource."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[parameters('name')]",
      "location": "[parameters('regionId')]",
      "tags": "[parameters('tagsArray')]",
      "kind": "other",
      "properties": {
        "Application_Type": "[parameters('type')]",
        "Request_Source": "[parameters('requestSource')]",
        "WorkspaceResourceId": "[parameters('workspaceResourceId')]"
      }
    }
  ]
}
{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "name": {
      "type": "string",
      "metadata": {
        "description": "Name of Application Insights resource."
      }
    },
    "type": {
      "type": "string",
      "metadata": {
        "description": "Type of app you are deploying. This field is for legacy reasons and will not impact the type of Application Insights resource you deploy."
      }
    },
    "regionId": {
      "type": "string",
      "metadata": {
        "description": "Which Azure region to deploy the resource to. This must be a valid Azure regionId."
      }
    },
    "tagsArray": {
      "type": "object",
      "metadata": {
        "description": "See documentation on tags: https://learn.microsoft.com/azure/azure-resource-manager/management/tag-resources."
      }
    },
    "requestSource": {
      "type": "string",
      "metadata": {
        "description": "Source of Azure Resource Manager deployment"
      }
    },
    "workspaceResourceId": {
      "type": "string",
      "metadata": {
        "description": "Log Analytics workspace ID to associate with your Application Insights resource."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[parameters('name')]",
      "location": "[parameters('regionId')]",
      "tags": "[parameters('tagsArray')]",
      "kind": "other",
      "properties": {
        "Application_Type": "[parameters('type')]",
        "Request_Source": "[parameters('requestSource')]",
        "WorkspaceResourceId": "[parameters('workspaceResourceId')]"
      }
    }
  ]
}
Note
For more information on resource properties, seeProperty values.Flow_TypeandRequest_Sourcearen't used but are included in this sample for completeness.
Flow_Type
Request_Source
Create a parameter file
Create a new.jsonfile (for example,my-parameters.json), copy the following content into it, and replace the placeholders<application-insights-resource-name>,<application-type>,<azure-region-name>,<subscription-id>,<resource-group-name>, and<log-analytics-workspace-name>with your specific values:
<application-insights-resource-name>
<application-type>
<azure-region-name>
<subscription-id>
<resource-group-name>
<log-analytics-workspace-name>
{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentParameters.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "name": {
      "value": "<application-insights-resource-name>"
    },
    "type": {
      "value": "<application-type>"
    },
    "regionId": {
      "value": "<azure-region-name>"
    },
    "tagsArray": {
      "value": {}
    },
    "requestSource": {
      "value": "CustomDeployment"
    },
    "workspaceResourceId": {
      "value": "/subscriptions/<subscription-id>/resourcegroups/<resource-group-name>/providers/microsoft.operationalinsights/workspaces/<log-analytics-workspace-name>"
    }
  }
}
{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentParameters.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "name": {
      "value": "<application-insights-resource-name>"
    },
    "type": {
      "value": "<application-type>"
    },
    "regionId": {
      "value": "<azure-region-name>"
    },
    "tagsArray": {
      "value": {}
    },
    "requestSource": {
      "value": "CustomDeployment"
    },
    "workspaceResourceId": {
      "value": "/subscriptions/<subscription-id>/resourcegroups/<resource-group-name>/providers/microsoft.operationalinsights/workspaces/<log-analytics-workspace-name>"
    }
  }
}
Use the template to create a new Application Insights resource
In PowerShell, sign in to Azure by using$Connect-AzAccount.
In PowerShell, sign in to Azure by using$Connect-AzAccount.
$Connect-AzAccount
Set your context to a subscription withSet-AzContext "<subscription ID>".
Set your context to a subscription withSet-AzContext "<subscription ID>".
Set-AzContext "<subscription ID>"
Run a new deployment to create a new Application Insights resource:New-AzResourceGroupDeployment -ResourceGroupName <your-resource-group> -TemplateFile my-template.json -TemplateParameterFile my-parameters.json-ResourceGroupNameis the group where you want to create the new resources.-TemplateFilemust occur before the custom parameters.-TemplateParameterFileis the name of the parameter file.
Run a new deployment to create a new Application Insights resource:
New-AzResourceGroupDeployment -ResourceGroupName <your-resource-group> -TemplateFile my-template.json -TemplateParameterFile my-parameters.json
New-AzResourceGroupDeployment -ResourceGroupName <your-resource-group> -TemplateFile my-template.json -TemplateParameterFile my-parameters.json
-ResourceGroupNameis the group where you want to create the new resources.
-ResourceGroupName
-TemplateFilemust occur before the custom parameters.
-TemplateFile
-TemplateParameterFileis the name of the parameter file.
-TemplateParameterFile
Configure monitoring
After creating an Application Insights resource, you configure monitoring.
Get the connection string
Theconnection stringidentifies the resource that you want to associate your telemetry data with. You can also use it to modify the endpoints your resource uses as a destination for your telemetry. You must copy the connection string and add it to your application's code or to an environment variable.
Portal
Azure CLI
PowerShell
REST
Bicep
ARM (JSON)
To get the connection string of your Application Insights resource:
Open your Application Insights resource in the Azure portal.
On theOverviewpane in theEssentialssection, look forConnection string.
If you hover over the connection string, an icon appears which allows you to copy it to your clipboard.
To get the connection string, run the following Azure CLI command in your terminal and replace the placeholders<application-insights-resource-name>and<resource-group-name>with your specific values:
<application-insights-resource-name>
<resource-group-name>
az monitor app-insights component show --app <application-insights-resource-name> --resource-group <resource-group-name> --query connectionString --output tsv
az monitor app-insights component show --app <application-insights-resource-name> --resource-group <resource-group-name> --query connectionString --output tsv
For more information about theaz monitor app-insights component showcommand, see theAzure CLI documentation.
az monitor app-insights component show
To get the connection string, run the following Azure PowerShell command in your terminal and replace the placeholders<resource-group-name>and<application-insights-resource-name>with your specific values:
<resource-group-name>
<application-insights-resource-name>
Get-AzApplicationInsights -ResourceGroupName <resource-group-name> -Name <application-insights-resource-name> | Select-Object -ExpandProperty ConnectionString
Get-AzApplicationInsights -ResourceGroupName <resource-group-name> -Name <application-insights-resource-name> | Select-Object -ExpandProperty ConnectionString
For more information about theGet-AzApplicationInsightscommand, see theAzure PowerShell documentation.
Get-AzApplicationInsights
To retrieve the details of your Application Insights resource, use the following request and replace the placeholders<subscription-id>,<resource-group-name>,<application-insights-resource-name>, and<access-token>with your specific values:
<subscription-id>
<resource-group-name>
<application-insights-resource-name>
<access-token>
GET https://management.azure.com/subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/Microsoft.Insights/components/<application-insights-resource-name>?api-version=2015-05-01
Authorization: Bearer <access-token>
GET https://management.azure.com/subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/Microsoft.Insights/components/<application-insights-resource-name>?api-version=2015-05-01
Authorization: Bearer <access-token>
Look for theproperties.connectionStringfield in the JSON response.
properties.connectionString
For more information about retrieving information about Application Insights resources using the REST API, see theREST API documentation.
Not applicable to Bicep templates.
Not applicable to ARM templates.
Application monitoring with OpenTelemetry
For application monitoring with OpenTelemetry, you install the appropriate Azure Monitor OpenTelemetry Distro and point the connection string to your newly created resource.
For information on how to set up application monitoring with OpenTelemetry, see the following documentation specific to the language:
ASP.NET Core
.NET
Java
Java native
Node.js
Python
Note
For web apps targeting browsers, we recommend using theApplication Insights JavaScript SDK.
Automatic instrumentation
For monitoring services likeAzure FunctionsandAzure App Service, you can first create your Application Insights resource, then point to it when you enable monitoring. Alternatively, you can create a new Application Insights resource during the enablement process.
Configure Application Insights resources
Modify the associated workspace
After creating an Application Insights resource, you can modify the associated Log Analytics workspace.
Portal
Azure CLI
PowerShell
REST
Bicep
ARM (JSON)
In your Application Insights resource, selectProperties>Change workspace>Log Analytics Workspaces.
To change the Log Analytics workspace, run the following Azure CLI command in your terminal and replace the placeholders<application-insights-resource-name>,<resource-group-name>, and<log-analytics-workspace-name>with your specific values:
<application-insights-resource-name>
<resource-group-name>
<log-analytics-workspace-name>
az monitor app-insights component update --app <application-insights-resource-name> --resource-group <resource-group-name> --workspace <log-analytics-workspace-name>
az monitor app-insights component update --app <application-insights-resource-name> --resource-group <resource-group-name> --workspace <log-analytics-workspace-name>
For more information about theaz monitor app-insights component updatecommand, see theAzure CLI documentation.
az monitor app-insights component update
To change the Log Analytics workspace, run the following Azure PowerShell command in your terminal and replace the placeholders<resource-group-name>,<application-insights-resource-name>,<subscription-id>, and<log-analytics-workspace-name>with your specific values:
<resource-group-name>
<application-insights-resource-name>
<subscription-id>
<log-analytics-workspace-name>
Update-AzApplicationInsights -ResourceGroupName <resource-group-name> -Name <application-insights-resource-name> -WorkspaceResourceId /subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/Microsoft.OperationalInsights/workspaces/<log-analytics-workspace-name>
Update-AzApplicationInsights -ResourceGroupName <resource-group-name> -Name <application-insights-resource-name> -WorkspaceResourceId /subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/Microsoft.OperationalInsights/workspaces/<log-analytics-workspace-name>
For more information about theUpdate-AzApplicationInsightscommand, see theAzure PowerShell documentation.
Update-AzApplicationInsights
To change the Log Analytics workspace using the REST API, use the following request and replace the placeholders<subscription-id>,<resource-group-name>,<application-insights-resource-name>,<access-token>,<azure-region-name>, and<log-analytics-workspace-name>with your specific values:
<subscription-id>
<resource-group-name>
<application-insights-resource-name>
<access-token>
<azure-region-name>
<log-analytics-workspace-name>
PATCH https://management.azure.com/subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/Microsoft.Insights/components/<application-insights-resource-name>?api-version=2020-02-02
Authorization: Bearer <access-token>
Content-Type: application/json

{
  "location": "<azure-region-name>",
  "properties": {
    "WorkspaceResourceId": "/subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/Microsoft.OperationalInsights/workspaces/<log-analytics-workspace-name>"
  }
}
PATCH https://management.azure.com/subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/Microsoft.Insights/components/<application-insights-resource-name>?api-version=2020-02-02
Authorization: Bearer <access-token>
Content-Type: application/json

{
  "location": "<azure-region-name>",
  "properties": {
    "WorkspaceResourceId": "/subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/Microsoft.OperationalInsights/workspaces/<log-analytics-workspace-name>"
  }
}
For more information about modifying the associated workspace using the REST API, see theREST API documentation.
To change the Log Analytics workspace, paste the following code into your template and replace the placeholders<application-insights-resource-name>,<azure-region-name>,<application-type>, and<log-analytics-workspace-name>with your specific values:
<application-insights-resource-name>
<azure-region-name>
<application-type>
<log-analytics-workspace-name>
param workspaceResourceId string = '/subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/Microsoft.OperationalInsights/workspaces/<log-analytics-workspace-name>' 

resource appInsights 'Microsoft.Insights/components@2020-02-02-preview' = {
  name: '<application-insights-resource-name>'
  location: '<azure-region-name>'
  properties: {
    Application_Type: '<application-type>'
    WorkspaceResourceId: workspaceResourceId
  }
}
param workspaceResourceId string = '/subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/Microsoft.OperationalInsights/workspaces/<log-analytics-workspace-name>' 

resource appInsights 'Microsoft.Insights/components@2020-02-02-preview' = {
  name: '<application-insights-resource-name>'
  location: '<azure-region-name>'
  properties: {
    Application_Type: '<application-type>'
    WorkspaceResourceId: workspaceResourceId
  }
}
To change the Log Analytics workspace, paste the following code into your template and replace the placeholders<application-insights-resource-name>,<azure-region-name>,<application-type>, and<log-analytics-workspace-name>with your specific values:
<application-insights-resource-name>
<azure-region-name>
<application-type>
<log-analytics-workspace-name>
{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "resources": [
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02-preview",
      "name": "<application-insights-resource-name>",
      "location": "<azure-region-name>",
      "properties": {
        "Application_Type": "<application-type>",
        "WorkspaceResourceId": "/subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/Microsoft.OperationalInsights/workspaces/<log-analytics-workspace-name>"
      }
    }
  ]
}
{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "resources": [
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02-preview",
      "name": "<application-insights-resource-name>",
      "location": "<azure-region-name>",
      "properties": {
        "Application_Type": "<application-type>",
        "WorkspaceResourceId": "/subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/Microsoft.OperationalInsights/workspaces/<log-analytics-workspace-name>"
      }
    }
  ]
}
Export telemetry
The legacy continuous export functionality isn't supported for workspace-based resources. Instead, useDiagnostic settings.
Note
Diagnostic settings export might increase costs. For more information, seeExport telemetry from Application Insights.
For pricing information for this feature, see theAzure Monitor pricing page. Before the start of billing, notifications are sent. If you continue to use telemetry export after the notice period, you'll be billed at the applicable rate.
Portal
Azure CLI
PowerShell
REST
Bicep
ARM (JSON)
In your Application Insights resource, selectDiagnostic settings>Add diagnostic setting.
You can select all tables or a subset of tables to archive to a storage account. You can also stream to anevent hub.
To export telemetry using diagnostic settings, run the following Azure CLI command in your terminal and replace the placeholders<diagnostic-setting-name>,<application-insights-resource-name>,<resource-group-name>, and<storage-account-name>with your specific values:
<diagnostic-setting-name>
<application-insights-resource-name>
<resource-group-name>
<storage-account-name>
az monitor diagnostic-settings create --name <diagnostic-setting-name> --resource <application-insights-resource-name> --resource-group <resource-group-name> --resource-type Microsoft.Insights/components --storage-account <storage-account-name>
az monitor diagnostic-settings create --name <diagnostic-setting-name> --resource <application-insights-resource-name> --resource-group <resource-group-name> --resource-type Microsoft.Insights/components --storage-account <storage-account-name>
This example command enables diagnostic settings and sends all logs of your Application Insights resource to the specified storage account. To also send metrics, add--metrics '[{"category": "AllMetrics", "enabled": true}]'to the command.
--metrics '[{"category": "AllMetrics", "enabled": true}]'
For more information about theaz monitor diagnostic-settings createcommand, see theAzure CLI documentation.
az monitor diagnostic-settings create
To export telemetry using diagnostic settings, run the following Azure PowerShell command in your terminal and replace the placeholders<application-insights-resource-id>,<diagnostic-setting-name>, and<storage-account-id>with your specific values:
<application-insights-resource-id>
<diagnostic-setting-name>
<storage-account-id>
Set-AzDiagnosticSetting -ResourceId <application-insights-resource-id> -Name <diagnostic-setting-name> -StorageAccountId <storage-account-id> -Enabled $True
Set-AzDiagnosticSetting -ResourceId <application-insights-resource-id> -Name <diagnostic-setting-name> -StorageAccountId <storage-account-id> -Enabled $True
This example command enables diagnostic settings and sends all metrics and logs of your Application Insights resource to the specified storage account.
For more information about theSet-AzDiagnosticSettingcommand, see theAzure PowerShell documentation.
Set-AzDiagnosticSetting
To export telemetry to an Azure storage account using a diagnostic setting, use the following request and replace the placeholders<subscription-id>,<resource-group-name>,<application-insights-resource-name>,<diagnostic-setting-name>,<access-token>, and<storage-account-name>with your specific values:
<subscription-id>
<resource-group-name>
<application-insights-resource-name>
<diagnostic-setting-name>
<access-token>
<storage-account-name>
PUT https://management.azure.com//subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/microsoft.insights/components/<application-insights-resource-name>/providers/Microsoft.Insights/diagnosticSettings/<diagnostic-setting-name>?api-version=2021-05-01-preview
Authorization: Bearer <access-token>
Content-Type: application/json

{
  "properties": {
    "storageAccountId": "/subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/Microsoft.Storage/storageAccounts/<storage-account-name>",
    "logs": [
      {
        "category": "AppRequests",
        "enabled": true
      }
    ],
    "metrics": [
      {
        "category": "AllMetrics",
        "enabled": true
      }
    ]
  }
}
PUT https://management.azure.com//subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/microsoft.insights/components/<application-insights-resource-name>/providers/Microsoft.Insights/diagnosticSettings/<diagnostic-setting-name>?api-version=2021-05-01-preview
Authorization: Bearer <access-token>
Content-Type: application/json

{
  "properties": {
    "storageAccountId": "/subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/Microsoft.Storage/storageAccounts/<storage-account-name>",
    "logs": [
      {
        "category": "AppRequests",
        "enabled": true
      }
    ],
    "metrics": [
      {
        "category": "AllMetrics",
        "enabled": true
      }
    ]
  }
}
This example call enables diagnostic settings and sends all metrics and logs of your Application Insights resource to the specified storage account.
For more information about creating a diagnostic setting using the REST API, see theREST API documentation.
To export telemetry using diagnostic settings, paste the following code into your template and replace the placeholders<application-insights-resource-name>,<azure-region-name>,<application-type>,<diagnostic-setting-name>,<subscription-id>,<resource-group>, and<storage-account-name>with your specific values:
<application-insights-resource-name>
<azure-region-name>
<application-type>
<diagnostic-setting-name>
<subscription-id>
<resource-group>
<storage-account-name>
param appInsightsName string = '<application-insights-resource-name>'
param location string = '<azure-region-name>'
param applicationType string = '<application-type>'
param diagnosticSettingName string = '<diagnostic-setting-name>'
param storageAccountId string = '/subscriptions/<subscription-id>/resourceGroups/<resource-group>/providers/Microsoft.Storage/storageAccounts/<storage-account-name>'

resource appInsights 'Microsoft.Insights/components@2020-02-02' = {
  name: appInsightsName
  location: location
  kind: applicationType
  properties: {
    Application_Type: applicationType
  }
}

resource diagnosticSetting 'Microsoft.Insights/diagnosticSettings@2021-05-01-preview' = {
  name: diagnosticSettingName
  scope: appInsights
  properties: {
    storageAccountId: storageAccountId
    logs: [
      {
        category: 'AppRequests'
        enabled: true
      }
    ]
    metrics: [
      {
        category: 'AllMetrics'
        enabled: true
      }
    ]
  }
}
param appInsightsName string = '<application-insights-resource-name>'
param location string = '<azure-region-name>'
param applicationType string = '<application-type>'
param diagnosticSettingName string = '<diagnostic-setting-name>'
param storageAccountId string = '/subscriptions/<subscription-id>/resourceGroups/<resource-group>/providers/Microsoft.Storage/storageAccounts/<storage-account-name>'

resource appInsights 'Microsoft.Insights/components@2020-02-02' = {
  name: appInsightsName
  location: location
  kind: applicationType
  properties: {
    Application_Type: applicationType
  }
}

resource diagnosticSetting 'Microsoft.Insights/diagnosticSettings@2021-05-01-preview' = {
  name: diagnosticSettingName
  scope: appInsights
  properties: {
    storageAccountId: storageAccountId
    logs: [
      {
        category: 'AppRequests'
        enabled: true
      }
    ]
    metrics: [
      {
        category: 'AllMetrics'
        enabled: true
      }
    ]
  }
}
To export telemetry using diagnostic settings, paste the following code into your template and replace the placeholders<application-insights-resource-name>,<azure-region-name>,<application-type>,<diagnostic-setting-name>,<subscription-id>,<resource-group>, and<storage-account-name>with your specific values:
<application-insights-resource-name>
<azure-region-name>
<application-type>
<diagnostic-setting-name>
<subscription-id>
<resource-group>
<storage-account-name>
{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "appInsightsName": {
      "type": "string",
      "defaultValue": "<application-insights-resource-name>"
    },
    "location": {
      "type": "string",
      "defaultValue": "<azure-region-name>"
    },
    "applicationType": {
      "type": "string",
      "defaultValue": "<application-type>"
    },
    "diagnosticSettingName": {
      "type": "string",
      "defaultValue": "<diagnostic-setting-name>"
    },
    "storageAccountId": {
      "type": "string",
      "defaultValue": "/subscriptions/<subscription-id>/resourceGroups/<resource-group>/providers/Microsoft.Storage/storageAccounts/<storage-account-name>"
    }
  },

  "resources": [
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[parameters('appInsightsName')]",
      "location": "[parameters('location')]",
      "kind": "[parameters('applicationType')]",
      "properties": {
        "Application_Type": "[parameters('applicationType')]"
      }
    },
    {
      "type": "Microsoft.Insights/diagnosticSettings",
      "apiVersion": "2021-05-01-preview",
      "name": "[parameters('diagnosticSettingName')]",
      "scope": "[resourceId('Microsoft.Insights/components', parameters('appInsightsName'))]",
      "properties": {
        "storageAccountId": "[parameters('storageAccountId')]",
        "logs": [
          {
            "category": "AppRequests",
            "enabled": true
          }
        ],
        "metrics": [
          {
            "category": "AllMetrics",
            "enabled": true
          }
        ]
      }
    }
  ]
}
{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "appInsightsName": {
      "type": "string",
      "defaultValue": "<application-insights-resource-name>"
    },
    "location": {
      "type": "string",
      "defaultValue": "<azure-region-name>"
    },
    "applicationType": {
      "type": "string",
      "defaultValue": "<application-type>"
    },
    "diagnosticSettingName": {
      "type": "string",
      "defaultValue": "<diagnostic-setting-name>"
    },
    "storageAccountId": {
      "type": "string",
      "defaultValue": "/subscriptions/<subscription-id>/resourceGroups/<resource-group>/providers/Microsoft.Storage/storageAccounts/<storage-account-name>"
    }
  },

  "resources": [
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[parameters('appInsightsName')]",
      "location": "[parameters('location')]",
      "kind": "[parameters('applicationType')]",
      "properties": {
        "Application_Type": "[parameters('applicationType')]"
      }
    },
    {
      "type": "Microsoft.Insights/diagnosticSettings",
      "apiVersion": "2021-05-01-preview",
      "name": "[parameters('diagnosticSettingName')]",
      "scope": "[resourceId('Microsoft.Insights/components', parameters('appInsightsName'))]",
      "properties": {
        "storageAccountId": "[parameters('storageAccountId')]",
        "logs": [
          {
            "category": "AppRequests",
            "enabled": true
          }
        ],
        "metrics": [
          {
            "category": "AllMetrics",
            "enabled": true
          }
        ]
      }
    }
  ]
}
Set the data retention
Portal
Azure CLI
PowerShell
REST
Bicep
ARM (JSON)
Data retention for Application Insights resources can be set in the associated Log Analytics workspace.
For more information, seeConfigure the default interactive retention period of Analytics tables.
Data retention for Application Insights resources can be set in the associated Log Analytics workspace.
For more information, seeConfigure the default interactive retention period of Analytics tables.
Data retention for Application Insights resources can be set in the associated Log Analytics workspace.
For more information, seeConfigure the default interactive retention period of Analytics tables.
Data retention for Application Insights resources can be set in the associated Log Analytics workspace.
For more information, seeConfigure the default interactive retention period of Analytics tables.
To set the data retention for the associated Log Analytics workspace, paste the following code into your template and replace the placeholders<log-analytics-workspace-name>,<azure-region-name>,<retention-period-in-days>with your specific values:
<log-analytics-workspace-name>
<azure-region-name>
<retention-period-in-days>
resource logAnalyticsWorkspace 'Microsoft.OperationalInsights/workspaces@2020-08-01' = {
  name: '<log-analytics-workspace-name>'
  location: '<azure-region-name>'
  properties: {
    retentionInDays: <retention-period-in-days>
  }
}
resource logAnalyticsWorkspace 'Microsoft.OperationalInsights/workspaces@2020-08-01' = {
  name: '<log-analytics-workspace-name>'
  location: '<azure-region-name>'
  properties: {
    retentionInDays: <retention-period-in-days>
  }
}
To set the data retention for the associated Log Analytics workspace, paste the following code into your template and replace the placeholders<log-analytics-workspace-name>,<azure-region-name>,<retention-period-in-days>with your specific values:
<log-analytics-workspace-name>
<azure-region-name>
<retention-period-in-days>
{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2020-08-01",
      "name": "<log-analytics-workspace-name>",
      "location": "<azure-region-name>",
      "properties": {
        "retentionInDays": <retention-period-in-days>
      }
    }
  ]
}
{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2020-08-01",
      "name": "<log-analytics-workspace-name>",
      "location": "<azure-region-name>",
      "properties": {
        "retentionInDays": <retention-period-in-days>
      }
    }
  ]
}
Set the daily cap
The daily cap must be set independently for both Application Insights and the underlying Log Analytics workspace. The effective daily cap is the minimum of the two settings.
Portal
Azure CLI
PowerShell
REST
Bicep
ARM (JSON)
To learn how to set the daily cap in the Azure portal, seeSet daily cap on Log Analytics workspace.
Note
Currently, Azure doesn't provide a way to set the daily cap for Application Insights via the Azure CLI.
To change the daily cap for Log Analytics, run the following Azure CLI command in your terminal and replace the placeholders<resource-group-name>,<log-analytics-workspace-name>, and<daily-cap-in-gb>with your specific values.
<resource-group-name>
<log-analytics-workspace-name>
<daily-cap-in-gb>
az monitor log-analytics workspace update --resource-group <resource-group-name> --workspace-name <log-analytics-workspace-name> --set workspaceCapping.dailyQuotaGb=<daily-cap-in-gb>
az monitor log-analytics workspace update --resource-group <resource-group-name> --workspace-name <log-analytics-workspace-name> --set workspaceCapping.dailyQuotaGb=<daily-cap-in-gb>
For more information about theaz monitor log-analytics workspace updatecommand, see theAzure CLI documentation.
az monitor log-analytics workspace update
To change the daily cap for Application Insights and Log Analytics, run the following Azure PowerShell commands in your terminal and replace the placeholders with your specific values.
Application Insights
Placeholders:<resource-group-name>,<application-insights-resource-name>,<daily-cap-in-gb>
<resource-group-name>
<application-insights-resource-name>
<daily-cap-in-gb>
Set-AzApplicationInsightsDailyCap -ResourceGroupName <resource-group-name> -Name <application-insights-resource-name> -DailyCapGB <daily-cap-in-gb>
Set-AzApplicationInsightsDailyCap -ResourceGroupName <resource-group-name> -Name <application-insights-resource-name> -DailyCapGB <daily-cap-in-gb>
For more information about theSet-AzApplicationInsightsDailyCapcommand, see theAzure PowerShell documentation.
Set-AzApplicationInsightsDailyCap
Log Analytics
Placeholders:<resource-group-name>,<log-analytics-workspace-name>,<daily-cap-in-gb>
<resource-group-name>
<log-analytics-workspace-name>
<daily-cap-in-gb>
Set-AzOperationalInsightsWorkspace -ResourceGroupName <resource-group-name> -Name <log-analytics-workspace-name> -DailyQuotaGb <daily-cap-in-gb>
Set-AzOperationalInsightsWorkspace -ResourceGroupName <resource-group-name> -Name <log-analytics-workspace-name> -DailyQuotaGb <daily-cap-in-gb>
For more information about theSet-AzOperationalInsightsWorkspacecommand, see theAzure PowerShell documentation.
Set-AzOperationalInsightsWorkspace
Note
Currently, Azure doesn't provide a way to set the daily cap for Application Insights with the Azure CLI.
To change the daily cap for Log Analytics, use the following request and replace the placeholders<subscription-id>,<resource-group-name>,<log-analytics-workspace-name>,<access-token>,<azure-region-name>, and<daily-cap-in-gb>with your specific values:
<subscription-id>
<resource-group-name>
<log-analytics-workspace-name>
<access-token>
<azure-region-name>
<daily-cap-in-gb>
Placeholders:
PATCH https://management.azure.com/subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/Microsoft.OperationalInsights/workspaces/<log-analytics-workspace-name>?api-version=2023-09-01
Authorization: Bearer <access-token>
Content-Type: application/json

{
  "location": '<azure-region-name>',
  "properties": {
    "workspaceCapping": {
      "dailyQuotaGb": <daily-cap-in-gb>,
    },
  }
}
PATCH https://management.azure.com/subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/Microsoft.OperationalInsights/workspaces/<log-analytics-workspace-name>?api-version=2023-09-01
Authorization: Bearer <access-token>
Content-Type: application/json

{
  "location": '<azure-region-name>',
  "properties": {
    "workspaceCapping": {
      "dailyQuotaGb": <daily-cap-in-gb>,
    },
  }
}
For more information about the setting the Log Analytics daily cap, see theREST API documentation
Note
Currently, Azure doesn't provide a way to set the daily cap for Application Insights with a Bicep template.
To set the daily cap for Log Analytics, paste the following code into your template and replace the placeholders<log-analytics-workspace-name>,<azure-region-name>, and<daily-cap-in-gb>with your specific values:
<log-analytics-workspace-name>
<azure-region-name>
<daily-cap-in-gb>
resource logAnalyticsWorkspace 'Microsoft.OperationalInsights/workspaces@2020-08-01' = {
  name: '<log-analytics-workspace-name>'
  location: '<azure-region-name>'
  properties: {
    dailyQuotaGb: <daily-cap-in-gb>
  }
}
resource logAnalyticsWorkspace 'Microsoft.OperationalInsights/workspaces@2020-08-01' = {
  name: '<log-analytics-workspace-name>'
  location: '<azure-region-name>'
  properties: {
    dailyQuotaGb: <daily-cap-in-gb>
  }
}
Note
Currently, Azure doesn't provide a way to set the daily cap for Application Insights using an ARM template.
To set the daily cap for Log Analytics, paste the following code into your template and replace the placeholders<log-analytics-workspace-name>,<azure-region-name>, and<daily-cap-in-gb>with your specific values:
<log-analytics-workspace-name>
<azure-region-name>
<daily-cap-in-gb>
{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2023-09-01",
      "name": "<log-analytics-workspace-name>",
      "location": "<azure-region-name>",
      "properties": {
        "workspaceCapping": {
          "dailyQuotaGb": <daily-cap-in-gb>
        }
      }
    }
  ]
}
{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2023-09-01",
      "name": "<log-analytics-workspace-name>",
      "location": "<azure-region-name>",
      "properties": {
        "workspaceCapping": {
          "dailyQuotaGb": <daily-cap-in-gb>
        }
      }
    }
  ]
}
Set the pricing plan
The pricing plan for Application Insights resources can be set in the associated Log Analytics workspace. For more information about available pricing plans, seeAzure Monitor Logs cost calculations and options.
Note
If you're seeing unexpected charges or high costs in Application Insights, this guide can help. It covers common causes like high telemetry volume, data ingestion spikes, and misconfigured sampling. It's especially useful if you're troubleshooting issues related to cost spikes, telemetry volume, sampling not working, data caps, high ingestion, or unexpected billing. To get started, seeTroubleshoot high data ingestion in Application Insights.
Portal
Azure CLI
PowerShell
REST
Bicep
ARM (JSON)
To learn how to set the pricing plan in the Azure portal, seeApplication Insights billing.
To set the pricing plan, run one of the following Azure CLI commands in your terminal and replace the placeholders<log-analytics-workspace-name>,<azure-region-name>, and (if applicable)<capacity-reservation-in-gb>with your specific values:
<log-analytics-workspace-name>
<azure-region-name>
<capacity-reservation-in-gb>
Pay-as-you-go
az monitor log-analytics workspace update --resource-group <resource-group-name> --workspace-name <log-analytics-workspace-name> --set PerGB2018
az monitor log-analytics workspace update --resource-group <resource-group-name> --workspace-name <log-analytics-workspace-name> --set PerGB2018
Commitment tier
az monitor log-analytics workspace update --resource-group <resource-group-name> --workspace-name <log-analytics-workspace-name> --set CapacityReservation --level <capacity-reservation-in-gb>
az monitor log-analytics workspace update --resource-group <resource-group-name> --workspace-name <log-analytics-workspace-name> --set CapacityReservation --level <capacity-reservation-in-gb>
For more information about theaz monitor log-analytics workspace updatecommand, see theAzure CLI documentation.
az monitor log-analytics workspace update
To set the pricing plan, run one of the following Azure PowerShell commands in your terminal and replace the placeholders<log-analytics-workspace-name>,<azure-region-name>, and (if applicable)<capacity-reservation-in-gb>with your specific values:
<log-analytics-workspace-name>
<azure-region-name>
<capacity-reservation-in-gb>
Pay-as-you-go
Set-AzOperationalInsightsWorkspace -ResourceGroupName <resource-group-name> -Name <log-analytics-workspace-name> -Sku perb2018
Set-AzOperationalInsightsWorkspace -ResourceGroupName <resource-group-name> -Name <log-analytics-workspace-name> -Sku perb2018
Commitment tier
Set-AzOperationalInsightsWorkspace -ResourceGroupName <resource-group-name> -Name <log-analytics-workspace-name> -Sku capacityreservation -SkuCapacity <capacity-reservation-in-gb>
Set-AzOperationalInsightsWorkspace -ResourceGroupName <resource-group-name> -Name <log-analytics-workspace-name> -Sku capacityreservation -SkuCapacity <capacity-reservation-in-gb>
For more information about theSet-AzOperationalInsightsWorkspacecommand, see theAzure PowerShell documentation.
Set-AzOperationalInsightsWorkspace
To set the pricing plan using the REST API, use one of the following requests and replace the placeholders<subscription-id>,<resource-group-name>,<log-analytics-workspace-name>,<access-token>, and (if applicable)<capacity-reservation-in-gb>with your specific values:
<subscription-id>
<resource-group-name>
<log-analytics-workspace-name>
<access-token>
<capacity-reservation-in-gb>
Pay-as-you-go
PUT https://management.azure.com/subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/Microsoft.OperationalInsights/workspaces/<log-analytics-workspace-name>/pricingPlans/current?api-version=2017-10-01
Content-Type: application/json
Authorization: Bearer <access-token>

{
  "properties": {
    "sku": {
      "name": "pergb2018"
    }
  }
}
PUT https://management.azure.com/subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/Microsoft.OperationalInsights/workspaces/<log-analytics-workspace-name>/pricingPlans/current?api-version=2017-10-01
Content-Type: application/json
Authorization: Bearer <access-token>

{
  "properties": {
    "sku": {
      "name": "pergb2018"
    }
  }
}
Commitment tier
PUT https://management.azure.com/subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/Microsoft.OperationalInsights/workspaces/<log-analytics-workspace-name>/pricingPlans/current?api-version=2017-10-01
Content-Type: application/json
Authorization: Bearer <access-token>

{
  "properties": {
    "sku": {
      "name": "capacityreservation",
      "capacityReservationLevel": <capacity-reservation-in-gb>
    }
  }
}
PUT https://management.azure.com/subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/Microsoft.OperationalInsights/workspaces/<log-analytics-workspace-name>/pricingPlans/current?api-version=2017-10-01
Content-Type: application/json
Authorization: Bearer <access-token>

{
  "properties": {
    "sku": {
      "name": "capacityreservation",
      "capacityReservationLevel": <capacity-reservation-in-gb>
    }
  }
}
For more information about setting the pricing plan using the REST API, see theREST API documentation.
To set the pricing plan using Bicep, paste the following code into your template and replace the placeholders<log-analytics-workspace-name>,<azure-region-name>, and for the commitment tier also<capacity-reservation-in-gb>with your specific values:
<log-analytics-workspace-name>
<azure-region-name>
<capacity-reservation-in-gb>
Pay-as-you-go
param workspaceName string = '<log-analytics-workspace-name>'
param workspaceRegion string = '<azure-region-name>'

resource logAnalyticsWorkspace 'Microsoft.OperationalInsights/workspaces@2020-08-01' = {
  name: workspaceName
  location: workspaceRegion
  properties: {
    sku: {
      name: 'pergb2018'
    }
  }
}
param workspaceName string = '<log-analytics-workspace-name>'
param workspaceRegion string = '<azure-region-name>'

resource logAnalyticsWorkspace 'Microsoft.OperationalInsights/workspaces@2020-08-01' = {
  name: workspaceName
  location: workspaceRegion
  properties: {
    sku: {
      name: 'pergb2018'
    }
  }
}
Commitment tier
param workspaceName string = '<log-analytics-workspace-name>'
param workspaceRegion string = '<azure-region-name>'
param capacityReservationLevel int = '<capacity-reservation-in-gb>'

resource logAnalyticsWorkspace 'Microsoft.OperationalInsights/workspaces@2020-08-01' = {
  name: workspaceName
  location: workspaceRegion
  properties: {
    sku: {
      name: 'capacityreservation'
      capacityReservationLevel: capacityReservationLevel
    }
  }
}
param workspaceName string = '<log-analytics-workspace-name>'
param workspaceRegion string = '<azure-region-name>'
param capacityReservationLevel int = '<capacity-reservation-in-gb>'

resource logAnalyticsWorkspace 'Microsoft.OperationalInsights/workspaces@2020-08-01' = {
  name: workspaceName
  location: workspaceRegion
  properties: {
    sku: {
      name: 'capacityreservation'
      capacityReservationLevel: capacityReservationLevel
    }
  }
}
For more information about updating theMicrosoft.OperationalInsights/workspacesresource using Bicep, see thetemplates documentation.
Microsoft.OperationalInsights/workspaces
To set the pricing plan using an ARM template, paste the following code into your template and replace the placeholders<log-analytics-workspace-name>,<azure-region-name>, and for the commitment tier also<capacity-reservation-in-gb>with your specific values:
<log-analytics-workspace-name>
<azure-region-name>
<capacity-reservation-in-gb>
Pay-as-you-go
{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "workspaceName": {
      "type": "string",
      "defaultValue": "<log-analytics-workspace-name>" 
    },
    "workspaceRegion": {
      "type": "string",
      "defaultValue": "<azure-region-name>" 
    }
  },
  "resources": [
    {
      "name": "[parameters('workspaceName')]",
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2020-08-01",
      "location": "[parameters('workspaceRegion')]",
      "properties": {
        "sku": {
          "name": "pergb2018"
        }
      }
    }
  ]
}
{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "workspaceName": {
      "type": "string",
      "defaultValue": "<log-analytics-workspace-name>" 
    },
    "workspaceRegion": {
      "type": "string",
      "defaultValue": "<azure-region-name>" 
    }
  },
  "resources": [
    {
      "name": "[parameters('workspaceName')]",
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2020-08-01",
      "location": "[parameters('workspaceRegion')]",
      "properties": {
        "sku": {
          "name": "pergb2018"
        }
      }
    }
  ]
}
Commitment tier
{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "workspaceName": {
      "type": "string",
      "defaultValue": "<log-analytics-workspace-name>" 
    },
    "workspaceRegion": {
      "type": "string",
      "defaultValue": "<azure-region-name>" 
    },
    "capacityReservationLevel": {
      "type": "int",
      "defaultValue": <capacity-reservation-in-gb>
    }
  },
  "resources": [
    {
      "name": "[parameters('workspaceName')]",
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2020-08-01",
      "location": "[parameters('workspaceRegion')]",
      "properties": {
        "sku": {
          "name": "capacityreservation",
          "capacityReservationLevel": "[parameters('capacityReservationLevel')]"
        }
      }
    }
  ]
}
{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "workspaceName": {
      "type": "string",
      "defaultValue": "<log-analytics-workspace-name>" 
    },
    "workspaceRegion": {
      "type": "string",
      "defaultValue": "<azure-region-name>" 
    },
    "capacityReservationLevel": {
      "type": "int",
      "defaultValue": <capacity-reservation-in-gb>
    }
  },
  "resources": [
    {
      "name": "[parameters('workspaceName')]",
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2020-08-01",
      "location": "[parameters('workspaceRegion')]",
      "properties": {
        "sku": {
          "name": "capacityreservation",
          "capacityReservationLevel": "[parameters('capacityReservationLevel')]"
        }
      }
    }
  ]
}
For more information about updating theMicrosoft.OperationalInsights/workspacesresource using an ARM template, see thetemplates documentation.
Microsoft.OperationalInsights/workspaces
Disable IP masking
By default, Application Insights doesn't store IP addresses. To learn how to disable IP masking, seeGeolocation and IP address handling.
Create additional resources
Create an availability test
Portal
Azure CLI
PowerShell
REST
Bicep
ARM (JSON)
To learn how to create an availability test in the Azure portal, seeApplication Insights availability tests.
To create a standard availability test with default settings, run the following Azure CLI command in your terminal and replace the placeholders<resource-group-name>,<azure-region-name>,<web-test-name>,<url>,<subscription-id>, and<application-insights-resource-name>with your specific values:
<resource-group-name>
<azure-region-name>
<web-test-name>
<url>
<subscription-id>
<application-insights-resource-name>
az monitor app-insights web-test create --resource-group <resource-group-name> \
                                        --location <azure-region-name> \
                                        --web-test-kind standard \
                                        --name <web-test-name> \
                                        --defined-web-test-name <web-test-name> \
                                        --request-url <url> \
                                        --retry-enabled true \
                                        --ssl-check true \
                                        --ssl-lifetime-check 7 \
                                        --frequency 300 \
                                        --locations Id="us-ca-sjc-azr" \
                                        --locations Id="apac-sg-sin-azr" \
                                        --locations Id="us-il-ch1-azr" \
                                        --locations Id="us-va-ash-azr" \
                                        --locations Id="emea-au-syd-edge" \
                                        --http-verb GET \
                                        --timeout 120 \
                                        --expected-status-code 200 \
                                        --enabled true \
                                        --tags hidden-link:/subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/microsoft.insights/components/<application-insights-resource-name>=Resource
az monitor app-insights web-test create --resource-group <resource-group-name> \
                                        --location <azure-region-name> \
                                        --web-test-kind standard \
                                        --name <web-test-name> \
                                        --defined-web-test-name <web-test-name> \
                                        --request-url <url> \
                                        --retry-enabled true \
                                        --ssl-check true \
                                        --ssl-lifetime-check 7 \
                                        --frequency 300 \
                                        --locations Id="us-ca-sjc-azr" \
                                        --locations Id="apac-sg-sin-azr" \
                                        --locations Id="us-il-ch1-azr" \
                                        --locations Id="us-va-ash-azr" \
                                        --locations Id="emea-au-syd-edge" \
                                        --http-verb GET \
                                        --timeout 120 \
                                        --expected-status-code 200 \
                                        --enabled true \
                                        --tags hidden-link:/subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/microsoft.insights/components/<application-insights-resource-name>=Resource
For more information about theaz monitor app-insights web-test createcommand, see theAzure CLI documentation.
az monitor app-insights web-test create
Note
The web test region (-location) is different from geographic location (-locations, notice the plural form) of which multiple can be selected. The-locationrefers to the Azure region where the web test is created and hosted, while-locationsrefers to geographic location or locations from which the web test is executed. For a full list of all geographic locations, seeApplication Insights availability tests.
-location
-locations
-location
-locations
To create a standard availability test with default settings, run the following Azure PowerShell command in your terminal and replace the placeholders<resource-group-name>,<azure-region-name>,<web-test-name>,<url>,<subscription-id>, and<application-insights-resource-name>with your specific values:
<resource-group-name>
<azure-region-name>
<web-test-name>
<url>
<subscription-id>
<application-insights-resource-name>
$geoLocation = @() 
$geoLocation += New-AzApplicationInsightsWebTestGeolocationObject -Location "us-ca-sjc-azr" 
$geoLocation += New-AzApplicationInsightsWebTestGeolocationObject -Location "apac-sg-sin-azr" 
$geoLocation += New-AzApplicationInsightsWebTestGeolocationObject -Location "us-il-ch1-azr" 
$geoLocation += New-AzApplicationInsightsWebTestGeolocationObject -Location "us-va-ash-azr" 
$geoLocation += New-AzApplicationInsightsWebTestGeolocationObject -Location "emea-au-syd-edge" 
New-AzApplicationInsightsWebTest -ResourceGroupName <resource-group-name> `
                                 -Location <azure-region-name> `
                                 -Name <web-test-name> `
                                 -TestName <web-test-name> `
                                 -Kind standard `
                                 -RequestUrl <url> `
                                 -RetryEnabled `
                                 -RuleSslCheck `
                                 -RuleSslCertRemainingLifetimeCheck 7 `
                                 -Frequency 300 `
                                 -GeoLocation $geoLocation `
                                 -RequestHttpVerb GET `
                                 -Timeout 120 `
                                 -RuleExpectedHttpStatusCode 200 ` 
                                 -Enabled `
                                 -Tag @{"hidden-link:/subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/microsoft.insights/components/<application-insights-resource-name>" = "Resource"}
$geoLocation = @() 
$geoLocation += New-AzApplicationInsightsWebTestGeolocationObject -Location "us-ca-sjc-azr" 
$geoLocation += New-AzApplicationInsightsWebTestGeolocationObject -Location "apac-sg-sin-azr" 
$geoLocation += New-AzApplicationInsightsWebTestGeolocationObject -Location "us-il-ch1-azr" 
$geoLocation += New-AzApplicationInsightsWebTestGeolocationObject -Location "us-va-ash-azr" 
$geoLocation += New-AzApplicationInsightsWebTestGeolocationObject -Location "emea-au-syd-edge" 
New-AzApplicationInsightsWebTest -ResourceGroupName <resource-group-name> `
                                 -Location <azure-region-name> `
                                 -Name <web-test-name> `
                                 -TestName <web-test-name> `
                                 -Kind standard `
                                 -RequestUrl <url> `
                                 -RetryEnabled `
                                 -RuleSslCheck `
                                 -RuleSslCertRemainingLifetimeCheck 7 `
                                 -Frequency 300 `
                                 -GeoLocation $geoLocation `
                                 -RequestHttpVerb GET `
                                 -Timeout 120 `
                                 -RuleExpectedHttpStatusCode 200 ` 
                                 -Enabled `
                                 -Tag @{"hidden-link:/subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/microsoft.insights/components/<application-insights-resource-name>" = "Resource"}
For more information about theNew-AzApplicationInsightsWebTestcommand, see theAzure PowerShell documentation.
New-AzApplicationInsightsWebTest
Note
The web test region (-Location) is different from the geographic location (-GeoLocation) of which multiple can be selected.-Locationrefers to the Azure region where the web test is created and hosted, while-GeoLocationrefers to the geographic location or locations from which the web test is executed. For a full list of all geographic locations, seeApplication Insights availability tests.
-Location
-GeoLocation
-Location
-GeoLocation
To create a standard availability test with default settings using the REST API, use the following request and replace the placeholders<subscription-id>,<resource-group-name>,<application-insights-resource-name>,<web-test-name>,<access-token>,<azure-region-name>, and<url>with your specific values:
<subscription-id>
<resource-group-name>
<application-insights-resource-name>
<web-test-name>
<access-token>
<azure-region-name>
<url>
PUT https://management.azure.com/subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/microsoft.insights/components/<application-insights-resource-name>/webtests/<web-test-name>?api-version=2021-08-01

Content-Type: application/json
Authorization: Bearer <access-token>

{
  "location": "<azure-region-name>",
  "properties": {
    "Name": "<web-test-name>",
    "SyntheticMonitorId": "<web-test-name>",
    "Enabled": true,
    "Frequency": 300,
    "Timeout": 120,
    "Kind": "standard",
    "RetryEnabled": true,
    "Request": {
      "RequestUrl": "<url>",
      "HttpVerb": "GET"
    },
    "ValidationRules": {
      "ExpectedHttpStatusCode": 200,
      "SslCheck": true,
      "SslCertRemainingLifetimeCheck": 7
    },
    "Locations": [
      {
        "Id": "us-ca-sjc-azr"
      },
      {
        "Id": "apac-sg-sin-azr"
      },
      {
        "Id": "us-il-ch1-azr"
      },
      {
        "Id": "us-va-ash-azr"
      },
      {
        "Id": "emea-au-syd-edge"
      }
    ]
  },
  "Tags": {
    "hidden-link:/subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/microsoft.insights/components/<application-insights-resource-name>": "Resource"
  }
}
PUT https://management.azure.com/subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/microsoft.insights/components/<application-insights-resource-name>/webtests/<web-test-name>?api-version=2021-08-01

Content-Type: application/json
Authorization: Bearer <access-token>

{
  "location": "<azure-region-name>",
  "properties": {
    "Name": "<web-test-name>",
    "SyntheticMonitorId": "<web-test-name>",
    "Enabled": true,
    "Frequency": 300,
    "Timeout": 120,
    "Kind": "standard",
    "RetryEnabled": true,
    "Request": {
      "RequestUrl": "<url>",
      "HttpVerb": "GET"
    },
    "ValidationRules": {
      "ExpectedHttpStatusCode": 200,
      "SslCheck": true,
      "SslCertRemainingLifetimeCheck": 7
    },
    "Locations": [
      {
        "Id": "us-ca-sjc-azr"
      },
      {
        "Id": "apac-sg-sin-azr"
      },
      {
        "Id": "us-il-ch1-azr"
      },
      {
        "Id": "us-va-ash-azr"
      },
      {
        "Id": "emea-au-syd-edge"
      }
    ]
  },
  "Tags": {
    "hidden-link:/subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/microsoft.insights/components/<application-insights-resource-name>": "Resource"
  }
}
Note
The web test region (-location) is different from the geographic location (-Locations, notice the plural form) of which multiple can be selected.-locationrefers to the Azure region where the web test is created and hosted, while-Locationsrefers to the geographic location or locations from which the web test is executed. For a full list of all geographic locations, seeApplication Insights availability tests.
-location
-Locations
-location
-Locations
To learn more about creating and configuring web tests using the REST API, see ourREST API documentation.
To create a standard availability test with default settings using Bicep, add the following code to your template and replace the placeholders<web-test-name>,<azure-region-name>,<subscription-id>,<resource-group-name>,<application-insights-resource-name>, and<url>with your specific values:
<web-test-name>
<azure-region-name>
<subscription-id>
<resource-group-name>
<application-insights-resource-name>
<url>
resource webTest 'microsoft.insights/webtests@2022-06-15' = {
  name: '<web-test-name>'
  location: '<azure-region-name>'
  tags: {
    'hidden-link:/subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/microsoft.insights/components/<application-insights-resource-name>': 'Resource'
  }
  properties: {
    SyntheticMonitorId: '<web-test-name>'
    Name: '<web-test-name>'
    Enabled: true
    Frequency: 300
    Timeout: 120
    Kind: 'standard'
    RetryEnabled: true
    Locations: [
      {
        Id: 'us-ca-sjc-azr'
      }
      {
        Id: 'apac-sg-sin-azr'
      }
      {
        Id: 'us-il-ch1-azr'
      }
      {
        Id: 'us-va-ash-azr'
      }
      {
        Id: 'emea-au-syd-edge'
      }
    ]
    Request: {
      RequestUrl: '<url>'
      HttpVerb: 'GET'
    }
    ValidationRules: {
      ExpectedHttpStatusCode: 200
      SSLCheck: true
      SSLCertRemainingLifetimeCheck: 7
    }
  }
}
resource webTest 'microsoft.insights/webtests@2022-06-15' = {
  name: '<web-test-name>'
  location: '<azure-region-name>'
  tags: {
    'hidden-link:/subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/microsoft.insights/components/<application-insights-resource-name>': 'Resource'
  }
  properties: {
    SyntheticMonitorId: '<web-test-name>'
    Name: '<web-test-name>'
    Enabled: true
    Frequency: 300
    Timeout: 120
    Kind: 'standard'
    RetryEnabled: true
    Locations: [
      {
        Id: 'us-ca-sjc-azr'
      }
      {
        Id: 'apac-sg-sin-azr'
      }
      {
        Id: 'us-il-ch1-azr'
      }
      {
        Id: 'us-va-ash-azr'
      }
      {
        Id: 'emea-au-syd-edge'
      }
    ]
    Request: {
      RequestUrl: '<url>'
      HttpVerb: 'GET'
    }
    ValidationRules: {
      ExpectedHttpStatusCode: 200
      SSLCheck: true
      SSLCertRemainingLifetimeCheck: 7
    }
  }
}
Note
The web test region (location) is different from the geographic location (Locations) of which multiple can be selected.locationrefers to the Azure region where the web test is created and hosted, whileLocationsrefers to the geographic location or locations from which the web test is executed. For a full list of all geographic locations, seeApplication Insights availability tests.
location
Locations
location
Locations
For more information about creating availability tests using Bicep, seeMicrosoft.Insights webtests.
To create a standard availability test with default settings using an ARM template, add the following code to your template and replace the placeholders<web-test-name>,<azure-region-name>,<subscription-id>,<resource-group-name>,<application-insights-resource-name>, and<url>with your specific values:
<web-test-name>
<azure-region-name>
<subscription-id>
<resource-group-name>
<application-insights-resource-name>
<url>
{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "resources": [
        {
            "type": "microsoft.insights/webtests",
            "apiVersion": "2022-06-15",
            "name": "<web-test-name>",
            "location": "<azure-region-name>",
            "tags": {
                "hidden-link:/subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/microsoft.insights/components/<application-insights-resource-name>": "Resource"
            },
            "properties": {
                "SyntheticMonitorId": "<web-test-name>",
                "Name": "<web-test-name>",
                "Enabled": true,
                "Frequency": 300,
                "Timeout": 120,
                "Kind": "standard",
                "RetryEnabled": true,
                "Locations": [
                    {
                        "Id": "us-ca-sjc-azr"
                    },
                    {
                        "Id": "apac-sg-sin-azr"
                    },
                    {
                        "Id": "us-il-ch1-azr"
                    },
                    {
                        "Id": "us-va-ash-azr"
                    },
                    {
                        "Id": "emea-au-syd-edge"
                    }
                ],
                "Request": {
                    "RequestUrl": "<url>",
                    "HttpVerb": "GET"
                },
                "ValidationRules": {
                    "ExpectedHttpStatusCode": 200,
                    "SSLCheck": true,
                    "SSLCertRemainingLifetimeCheck": 7
                }
            }
        }
    ]
}
{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "resources": [
        {
            "type": "microsoft.insights/webtests",
            "apiVersion": "2022-06-15",
            "name": "<web-test-name>",
            "location": "<azure-region-name>",
            "tags": {
                "hidden-link:/subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/microsoft.insights/components/<application-insights-resource-name>": "Resource"
            },
            "properties": {
                "SyntheticMonitorId": "<web-test-name>",
                "Name": "<web-test-name>",
                "Enabled": true,
                "Frequency": 300,
                "Timeout": 120,
                "Kind": "standard",
                "RetryEnabled": true,
                "Locations": [
                    {
                        "Id": "us-ca-sjc-azr"
                    },
                    {
                        "Id": "apac-sg-sin-azr"
                    },
                    {
                        "Id": "us-il-ch1-azr"
                    },
                    {
                        "Id": "us-va-ash-azr"
                    },
                    {
                        "Id": "emea-au-syd-edge"
                    }
                ],
                "Request": {
                    "RequestUrl": "<url>",
                    "HttpVerb": "GET"
                },
                "ValidationRules": {
                    "ExpectedHttpStatusCode": 200,
                    "SSLCheck": true,
                    "SSLCertRemainingLifetimeCheck": 7
                }
            }
        }
    ]
}
Note
The web test region (location) is different from the geographic location (Locations) of which multiple can be selected.locationrefers to the Azure region where the web test is created and hosted, whileLocationsrefers to the geographic location or locations from which the web test is executed. For a full list of all geographic locations, seeApplication Insights availability tests.
location
Locations
location
Locations
For more information about creating availability tests using an ARM template, seeMicrosoft.Insights webtests.
Add a metric alert
Tip
Each Application Insights resource comes with metrics that are available out of the box. If separate components report to the same Application Insights resource, it might not make sense to alert on these metrics.
Portal
Azure CLI
PowerShell
REST
Bicep
ARM (JSON)
To learn how to create a metric alert in the Azure portal, seeTutorial: Create a metric alert for an Azure resource.
To learn how to add a metric alert using the Azure CLI, seeCreate a new alert rule using the CLI, PowerShell, or an ARM template.
To learn how to add a metric alert using PowerShell, seeCreate a new alert rule using the CLI, PowerShell, or an ARM template.
For a list of various REST API call examples to create a metric alert, see theREST API documentation.
To learn how to add a metric alert using an ARM template, seeCreate a new alert rule using the CLI, PowerShell, or an ARM template.
To learn how to add a metric alert using an ARM template, seeCreate a new alert rule using the CLI, PowerShell, or an ARM template.
To automate the creation of metric alerts, see theMetric alerts templatearticle.
Create more Application Insights resources
When you're developing the next version of a web application, you don't want to mix up theApplication Insightstelemetry from the new version and the already released version.
To avoid confusion, send the telemetry from different development stages to separate Application Insights resources with separate connection strings.
If your system is an instance of Azure Cloud Services, there'sanother method of setting separate connection strings.
Use a single Application Insights resource for:
Streamlining DevOps/ITOps management for applications deployed together, typically developed and managed by the same team.
Centralizing key performance indicators, such as response times and failure rates, in a dashboard by default. Segment by role name in the metrics explorer if necessary.
When there's no need for different Azure role-based access control management between application components.
When identical metrics alert criteria, continuous exports, and billing/quotas management across components suffice.
When it's acceptable for an API key to access data from all components equally, and 10 API keys meet the needs across all components.
When the same smart detection and work item integration settings are suitable across all roles.
Note
If you want to consolidate multiple Application Insights resources, you can point your existing application components to a new, consolidated Application Insights resource. The telemetry stored in your old resource doesn't transfer to the new resource. Only delete the old resource when you have enough telemetry in the new resource for business continuity.
To activate portal experiences, add custom code to assign meaningful values to theCloud_RoleNameattribute. Without these values, portal features don't function.
For Azure Service Fabric applications and classic cloud services, the SDK automatically configures services by reading from the Azure Role Environment. For other app types, you typically need to set it explicitly.
Live Metrics can't split data by role name.
Version and release tracking
When you publish a new version of your application, you want to be able to separate the telemetry from different builds. You can set theApplication Versionproperty so you can filtersearchandmetric explorerresults.
There are several different methods of setting theApplication Versionproperty.
Option 1:Set the version directlyAdd the linetelemetryClient.Context.Component.Version = typeof(MyProject.MyClass).Assembly.GetName().Version;to the initialization code of your application.To ensure that allTelemetryClientinstances are set consistently, wrap that line in atelemetry initializer.
Option 1:Set the version directly
Add the linetelemetryClient.Context.Component.Version = typeof(MyProject.MyClass).Assembly.GetName().Version;to the initialization code of your application.
telemetryClient.Context.Component.Version = typeof(MyProject.MyClass).Assembly.GetName().Version;
To ensure that allTelemetryClientinstances are set consistently, wrap that line in atelemetry initializer.
TelemetryClient
Option 2:Set the version inBuildInfo.config(ASP.NET only)The Application Insights web module picks up the version from theBuildLabelnode. Include this file in your project and remember to set theCopy Alwaysproperty in Solution Explorer.<?xml version="1.0" encoding="utf-8"?>
<DeploymentEvent xmlns:xsi="https://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="https://www.w3.org/2001/XMLSchema" xmlns="http://schemas.microsoft.com/VisualStudio/DeploymentEvent/2013/06">
  <ProjectName>AppVersionExpt</ProjectName>
  <Build type="MSBuild">
    <MSBuild>
      <BuildLabel kind="label">1.0.0.2</BuildLabel>
    </MSBuild>
  </Build>
</DeploymentEvent>GenerateBuildInfo.configautomatically in the Microsoft Build Engine. Add the following lines to your.csprojfile:<PropertyGroup>
  <GenerateBuildInfoConfigFile>true</GenerateBuildInfoConfigFile>
  <IncludeServerNameInBuildInfo>true</IncludeServerNameInBuildInfo>
</PropertyGroup>This step generates a file calledyourProjectName.BuildInfo.config. The Publish process renames it toBuildInfo.config.The build label contains a placeholder(*AutoGen_...*)when you build with Visual Studio. When built with the Microsoft Build Engine, the placeholder is populated with the correct version number.To allow the Microsoft Build Engine to generate version numbers, set the version like1.0.*inAssemblyReference.cs.
Option 2:Set the version inBuildInfo.config(ASP.NET only)
BuildInfo.config
The Application Insights web module picks up the version from theBuildLabelnode. Include this file in your project and remember to set theCopy Alwaysproperty in Solution Explorer.
BuildLabel
<?xml version="1.0" encoding="utf-8"?>
<DeploymentEvent xmlns:xsi="https://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="https://www.w3.org/2001/XMLSchema" xmlns="http://schemas.microsoft.com/VisualStudio/DeploymentEvent/2013/06">
  <ProjectName>AppVersionExpt</ProjectName>
  <Build type="MSBuild">
    <MSBuild>
      <BuildLabel kind="label">1.0.0.2</BuildLabel>
    </MSBuild>
  </Build>
</DeploymentEvent>
<?xml version="1.0" encoding="utf-8"?>
<DeploymentEvent xmlns:xsi="https://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="https://www.w3.org/2001/XMLSchema" xmlns="http://schemas.microsoft.com/VisualStudio/DeploymentEvent/2013/06">
  <ProjectName>AppVersionExpt</ProjectName>
  <Build type="MSBuild">
    <MSBuild>
      <BuildLabel kind="label">1.0.0.2</BuildLabel>
    </MSBuild>
  </Build>
</DeploymentEvent>
GenerateBuildInfo.configautomatically in the Microsoft Build Engine. Add the following lines to your.csprojfile:
BuildInfo.config
.csproj
<PropertyGroup>
  <GenerateBuildInfoConfigFile>true</GenerateBuildInfoConfigFile>
  <IncludeServerNameInBuildInfo>true</IncludeServerNameInBuildInfo>
</PropertyGroup>
<PropertyGroup>
  <GenerateBuildInfoConfigFile>true</GenerateBuildInfoConfigFile>
  <IncludeServerNameInBuildInfo>true</IncludeServerNameInBuildInfo>
</PropertyGroup>
This step generates a file calledyourProjectName.BuildInfo.config. The Publish process renames it toBuildInfo.config.
.BuildInfo.config
BuildInfo.config
The build label contains a placeholder(*AutoGen_...*)when you build with Visual Studio. When built with the Microsoft Build Engine, the placeholder is populated with the correct version number.
(*AutoGen_...*)
To allow the Microsoft Build Engine to generate version numbers, set the version like1.0.*inAssemblyReference.cs.
1.0.*
AssemblyReference.cs
If you use Azure DevOps, you canget an annotation markeradded to your charts whenever you release a new version.
Automate the resource creation process
The resource creation process can be automated by using Bicep or JSON templates withAzure Resource Manager. You can package several resources together to create them in one deployment. For example, you can create an Application Insights resource with availability tests, metric alerts, and a diagnostic setting to send telemetry to an Azure Storage account.
Generate a template in the Azure portal
You can generate a template from existing resources.
Go to the Application Insights resource in the Azure portal.
OpenExport templatelisted underAutomationin the left-hand navigation bar.
(Optional): To use your own parameters, uncheckInclude parameters.
Downloadthe template file orDeployit directly in the Azure portal.
Go to the resource group of your Application Insights resource.
On theOverviewpane, mark all resources you want to be included in the template, then selectExport templatein the top navigation bar.
(Optional): To use your own parameters, uncheckInclude parameters.
Downloadthe template file orDeployit directly in the Azure portal.
Create a template from scratch
To learn how to create an ARM template from scratch, visit ourARM template documentationwhich includes tutorials tocreate a template,add resources,add parameters, and more.
Available properties forApplication Insights,availability tests,metric alerts,diagnostic settings, and other resources can be found in ourAzure resource referencedocumentation under theReference>Monitor>Insightsnode.
Tip
You can also use quickstart templates, available towards the bottom of each Azure resource reference documentation page linked in this section. To learn how to use templates, visitTutorial: Use Azure Quickstart Templates.
Frequently asked questions
This section provides answers to common questions.
How do I move an Application Insights resource to a new region?
Transferring existing Application Insights resources between regions isn't supported, and you can't migrate historical data to a new region. The workaround involves:
Creating a new Application Insights resource in the desired region.
Re-creating any unique customizations from the original resource in the new one.
Updating your application with the new region resource'sconnection string.
Testing to ensure everything works as expected with the new Application Insights resource.
Decide to either keep or delete the original Application Insights resource. Deleting a classic resource means to lose all historical data. If the resource is workspace-based, the data remains in Log Analytics, enabling access to historical data until the retention period expires.
Unique customizations that commonly need to be manually re-created or updated for the resource in the new region include but aren't limited to:
Re-create custom dashboards and workbooks.
Re-create or update the scope of any custom log/metric alerts.
Re-create availability alerts.
Re-create any custom Azure role-based access control settings that are required for your users to access the new resource.
Replicate settings involving ingestion sampling, data retention, daily cap, and custom metrics enablement. These settings are controlled via theUsage and estimated costspane.
Any integration that relies on API keys, such asrelease annotationsandlive metrics secure control channel. You need to generate new API keys and update the associated integration.
Continuous export in classic resources must be configured again.
Diagnostic settings in workspace-based resources must be configured again.
Can I use providers('Microsoft.Insights', 'components').apiVersions[0] in my Azure Resource Manager deployments?
We don't recommend using this method of populating the API version. The newest version can represent preview releases, which might contain breaking changes. Even with newer non-preview releases, the API versions aren't always backward compatible with existing templates. In some cases, the API version might not be available to all subscriptions.
Next steps
Explore metrics
Write Log Analytics queries
Shared resources for multiple roles
Send Azure Diagnostics to Application Insights.
Create release annotations.
Feedback
Was this page helpful?
Additional resources