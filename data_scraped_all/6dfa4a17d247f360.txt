Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Use Azure tags in Azure Kubernetes Service (AKS)
Article
2024-08-01
12 contributors
In this article
With Azure Kubernetes Service (AKS), you can set Azure tags on an AKS cluster and its related resources using Azure Resource Manager and the Azure CLI. You can also use Kubernetes manifests to set Azure tags for certain resources. Azure tags are a useful tracking resource for certain business processes, such aschargeback.
This article explains how to set Azure tags for AKS clusters and related resources.
Before you begin
Review the following information before you begin:
Tags set on an AKS cluster apply to all resources related to the cluster, but not the node pools. This operation overwrites the values of existing keys.
Tags set on a node pool apply only to resources related to that node pool. This operation overwrites the values of existing keys. Resources outside that node pool, including resources for the rest of the cluster and other node pools, are unaffected.
Public IPs, files, and disks can have tags set by Kubernetes through a Kubernetes manifest. Tags set in this way maintain the Kubernetes values, even if you update them later using a different method. When you remove public IPs, files, or disks through Kubernetes, any tags set by Kubernetes are removed. The tags on those resources that Kubernetes doesn't track remain unaffected.
Prerequisites
The Azure CLI version 2.0.59 or later. To find your version, runaz --version. If you need to install it or update your version, seeInstall Azure CLI.
az --version
Kubernetes version 1.20 or later.
Limitations
Azure tags have keys that are case-insensitive for operations, such as when you're retrieving a tag by searching the key. In this case, a tag with the specified key is updated or retrieved regardless of casing. Tag values are case-sensitive.
In AKS, if multiple tags are set with identical keys but different casing, the tags are used in alphabetical order. For example,{"Key1": "val1", "kEy1": "val2", "key1": "val3"}results inKey1andval1being set.
{"Key1": "val1", "kEy1": "val2", "key1": "val3"}
Key1
val1
For shared resources, tags can't determine the split in resource usage on their own.
Azure tags and AKS clusters
When you create or update an AKS cluster with the--tagsparameter, the following are assigned the Azure tags that you specified:
--tags
The AKS cluster itself and its related resources:Route tablePublic IPLoad balancerNetwork security groupVirtual networkAKS-managed kubelet msiAKS-managed add-on msiPrivate DNS zone associated with theprivate clusterPrivate endpoint associated with theprivate cluster
Route table
Public IP
Load balancer
Network security group
Virtual network
AKS-managed kubelet msi
AKS-managed add-on msi
Private DNS zone associated with theprivate cluster
Private endpoint associated with theprivate cluster
The node resource group
Note
Azure Private DNS only supports 15 tags. For more information, see thetag resources.
Create or update tags on an AKS cluster
Create a new AKS cluster
Important
If you're using existing resources when you create a new cluster, such as an IP address or route table, theaz aks createcommand overwrites the set of tags. If you delete the cluster later, any tags set by the cluster are removed.
az aks create
Create a cluster and assign Azure tags using theaz aks createcommand with the--tagsparameter.NoteTo set tags on the initial node pool, the virtual machine scale set, and each virtual machine scale set instance associated with the initial node pool, you can also set the--nodepool-tagsparameter.az aks create \
    --resource-group myResourceGroup \
    --name myAKSCluster \
    --tags dept=IT costcenter=9999 \
    --generate-ssh-keys
Create a cluster and assign Azure tags using theaz aks createcommand with the--tagsparameter.
az aks create
--tags
Note
To set tags on the initial node pool, the virtual machine scale set, and each virtual machine scale set instance associated with the initial node pool, you can also set the--nodepool-tagsparameter.
--nodepool-tags
az aks create \
    --resource-group myResourceGroup \
    --name myAKSCluster \
    --tags dept=IT costcenter=9999 \
    --generate-ssh-keys
az aks create \
    --resource-group myResourceGroup \
    --name myAKSCluster \
    --tags dept=IT costcenter=9999 \
    --generate-ssh-keys
Verify the tags have been applied to the cluster and its related resources using theaz aks showcommand.az aks show --resource-group myResourceGroup --name myAKSCluster --query '[tags]'The following example output shows the tags applied to the cluster:{
  "clusterTags": {
    "dept": "IT",
    "costcenter": "9999"
  }
}
Verify the tags have been applied to the cluster and its related resources using theaz aks showcommand.
az aks show
az aks show --resource-group myResourceGroup --name myAKSCluster --query '[tags]'
az aks show --resource-group myResourceGroup --name myAKSCluster --query '[tags]'
The following example output shows the tags applied to the cluster:
{
  "clusterTags": {
    "dept": "IT",
    "costcenter": "9999"
  }
}
{
  "clusterTags": {
    "dept": "IT",
    "costcenter": "9999"
  }
}
Update an existing AKS cluster
Important
Setting tags on a cluster using theaz aks updatecommand overwrites the set of tags. For example, if your cluster has the tagsdept=ITandcostcenter=9999, and you useaz aks updatewith the tagsteam=alphaandcostcenter=1234, the new list of tags would beteam=alphaandcostcenter=1234.
az aks update
az aks update
Update the tags on an existing cluster using theaz aks updatecommand with the--tagsparameter.az aks update \
    --resource-group myResourceGroup \
    --name myAKSCluster \
    --tags team=alpha costcenter=1234
Update the tags on an existing cluster using theaz aks updatecommand with the--tagsparameter.
az aks update
--tags
az aks update \
    --resource-group myResourceGroup \
    --name myAKSCluster \
    --tags team=alpha costcenter=1234
az aks update \
    --resource-group myResourceGroup \
    --name myAKSCluster \
    --tags team=alpha costcenter=1234
Verify the tags have been applied to the cluster and its related resources using theaz aks showcommand.az aks show --resource-group myResourceGroup --name myAKSCluster --query '[tags]'The following example output shows the tags applied to the cluster:{
  "clusterTags": {
    "team": "alpha",
    "costcenter": "1234"
  }
}
Verify the tags have been applied to the cluster and its related resources using theaz aks showcommand.
az aks show
az aks show --resource-group myResourceGroup --name myAKSCluster --query '[tags]'
az aks show --resource-group myResourceGroup --name myAKSCluster --query '[tags]'
The following example output shows the tags applied to the cluster:
{
  "clusterTags": {
    "team": "alpha",
    "costcenter": "1234"
  }
}
{
  "clusterTags": {
    "team": "alpha",
    "costcenter": "1234"
  }
}
Add tags to node pools
You can apply an Azure tag to a new or existing node pool in your AKS cluster. Tags applied to a node pool are applied to each node within the node pool and are persisted through upgrades. Tags are also applied to new nodes that are added to a node pool during scale-out operations. Adding a tag can help with tasks such as policy tracking or cost estimation.
When you create or update a node pool with the--tagsparameter, the tags you specify are assigned to the following resources:
--tags
The node pool.
The virtual machine scale set and each virtual machine scale set instance associated with the node pool.
Create a new node pool
Create a node pool with an Azure tag using theaz aks nodepool addcommand with the--tagsparameter.az aks nodepool add \
    --resource-group myResourceGroup \
    --cluster-name myAKSCluster \
    --name tagnodepool \
    --node-count 1 \
    --tags abtest=a costcenter=5555 \
    --no-wait
Create a node pool with an Azure tag using theaz aks nodepool addcommand with the--tagsparameter.
az aks nodepool add
--tags
az aks nodepool add \
    --resource-group myResourceGroup \
    --cluster-name myAKSCluster \
    --name tagnodepool \
    --node-count 1 \
    --tags abtest=a costcenter=5555 \
    --no-wait
az aks nodepool add \
    --resource-group myResourceGroup \
    --cluster-name myAKSCluster \
    --name tagnodepool \
    --node-count 1 \
    --tags abtest=a costcenter=5555 \
    --no-wait
Verify that the tags have been applied to the node pool using theaz aks showcommand.az aks show --resource-group myResourceGroup --name myAKSCluster --query 'agentPoolProfiles[].{nodepoolName:name,tags:tags}'The following example output shows the tags applied to the node pool:[
  {
    "nodepoolName": "nodepool1",
    "tags": null
  },
  {
    "nodepoolName": "tagnodepool",
    "tags": {
      "abtest": "a",
      "costcenter": "5555"
    }
  }
]
Verify that the tags have been applied to the node pool using theaz aks showcommand.
az aks show
az aks show --resource-group myResourceGroup --name myAKSCluster --query 'agentPoolProfiles[].{nodepoolName:name,tags:tags}'
az aks show --resource-group myResourceGroup --name myAKSCluster --query 'agentPoolProfiles[].{nodepoolName:name,tags:tags}'
The following example output shows the tags applied to the node pool:
[
  {
    "nodepoolName": "nodepool1",
    "tags": null
  },
  {
    "nodepoolName": "tagnodepool",
    "tags": {
      "abtest": "a",
      "costcenter": "5555"
    }
  }
]
[
  {
    "nodepoolName": "nodepool1",
    "tags": null
  },
  {
    "nodepoolName": "tagnodepool",
    "tags": {
      "abtest": "a",
      "costcenter": "5555"
    }
  }
]
Update an existing node pool
Important
Setting tags on a node pool using theaz aks nodepool updatecommand overwrites the set of tags. For example, if your node pool has the tagsabtest=aandcostcenter=5555, and you useaz aks nodepool updatewith the tagsappversion=0.0.2andcostcenter=4444, the new list of tags would beappversion=0.0.2andcostcenter=4444.
az aks nodepool update
az aks nodepool update
Update a node pool with an Azure tag using theaz aks nodepool updatecommand.az aks nodepool update \
    --resource-group myResourceGroup \
    --cluster-name myAKSCluster \
    --name tagnodepool \
    --tags appversion=0.0.2 costcenter=4444 \
    --no-wait
Update a node pool with an Azure tag using theaz aks nodepool updatecommand.
az aks nodepool update
az aks nodepool update \
    --resource-group myResourceGroup \
    --cluster-name myAKSCluster \
    --name tagnodepool \
    --tags appversion=0.0.2 costcenter=4444 \
    --no-wait
az aks nodepool update \
    --resource-group myResourceGroup \
    --cluster-name myAKSCluster \
    --name tagnodepool \
    --tags appversion=0.0.2 costcenter=4444 \
    --no-wait
Verify the tags have been applied to the node pool using theaz aks showcommand.az aks show --resource-group myResourceGroup --name myAKSCluster --query 'agentPoolProfiles[].{nodepoolName:name,tags:tags}'The following example output shows the tags applied to the node pool:[
  {
    "nodepoolName": "nodepool1",
    "tags": null
  },
  {
    "nodepoolName": "tagnodepool",
    "tags": {
      "appversion": "0.0.2",
      "costcenter": "4444"
    }
  }
]
Verify the tags have been applied to the node pool using theaz aks showcommand.
az aks show
az aks show --resource-group myResourceGroup --name myAKSCluster --query 'agentPoolProfiles[].{nodepoolName:name,tags:tags}'
az aks show --resource-group myResourceGroup --name myAKSCluster --query 'agentPoolProfiles[].{nodepoolName:name,tags:tags}'
The following example output shows the tags applied to the node pool:
[
  {
    "nodepoolName": "nodepool1",
    "tags": null
  },
  {
    "nodepoolName": "tagnodepool",
    "tags": {
      "appversion": "0.0.2",
      "costcenter": "4444"
    }
  }
]
[
  {
    "nodepoolName": "nodepool1",
    "tags": null
  },
  {
    "nodepoolName": "tagnodepool",
    "tags": {
      "appversion": "0.0.2",
      "costcenter": "4444"
    }
  }
]
Add tags using Kubernetes
Important
Setting tags on files, disks, and public IPs using Kubernetes updates the set of tags. For example, if your disk has the tagsdept=ITandcostcenter=5555, and you use Kubernetes to set the tagsteam=betaandcostcenter=3333, the new list of tags would bedept=IT,team=beta, andcostcenter=3333.
Any updates you make to tags through Kubernetes retain the value set through Kubernetes. For example, if your disk has tagsdept=ITandcostcenter=5555set by Kubernetes, and you use the portal to set the tagsteam=betaandcostcenter=3333, the new list of tags would bedept=IT,team=beta, andcostcenter=5555. If you then remove the disk through Kubernetes, the disk would have the tagteam=beta.
You can apply Azure tags to public IPs, disks, and files using a Kubernetes manifest.
For public IPs, useservice.beta.kubernetes.io/azure-pip-tagsunderannotations. For example:apiVersion: v1
kind: Service
metadata:
  annotations:
    service.beta.kubernetes.io/azure-pip-tags: costcenter=3333,team=beta
spec:
  ...
For public IPs, useservice.beta.kubernetes.io/azure-pip-tagsunderannotations. For example:
apiVersion: v1
kind: Service
metadata:
  annotations:
    service.beta.kubernetes.io/azure-pip-tags: costcenter=3333,team=beta
spec:
  ...
apiVersion: v1
kind: Service
metadata:
  annotations:
    service.beta.kubernetes.io/azure-pip-tags: costcenter=3333,team=beta
spec:
  ...
For files and disks, usetagsunderparameters. For example:---
apiVersion: storage.k8s.io/v1
...
parameters:
  ...
  tags: costcenter=3333,team=beta
...
For files and disks, usetagsunderparameters. For example:
---
apiVersion: storage.k8s.io/v1
...
parameters:
  ...
  tags: costcenter=3333,team=beta
...
---
apiVersion: storage.k8s.io/v1
...
parameters:
  ...
  tags: costcenter=3333,team=beta
...
Next steps
Learn more aboutusing labels in an AKS cluster.
Azure Kubernetes Service

Additional resources