Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Microsoft Azure Monitor Application Insights JavaScript SDK configuration
Article
2025-01-31
6 contributors
In this article
The Azure Application Insights JavaScript SDK provides configuration for tracking, monitoring, and debugging your web applications.
SDK configuration
Cookie management and configuration
Source map un-minify support
Tree shaking optimized code
SDK configuration
These configuration fields are optional and default to false unless otherwise stated.
For instructions on how to add SDK configuration, seeAdd SDK configuration.
xhr
xhr
fetch request
fetch response
fetch
PageVisitTime
milliseconds
any
cookieCfg.domain
cookieCfg.domain
cookieCfg.path
cookieCfg.path
enablePerfMgr
setPerfMgr()
[{header: string, value: string}]
cookieCfg.enabled
cookieCfg.enabled
disableFetchTracking
false
true
true
false
DistributedTracingModes
DistributedTracing Modes.AI_AND_W3C
example.com/foo#bar
history
loggingLevelConsole
loggingLevelTelemetry
enableDebug
{[key: number]: IThrottleMgrConfig}
Cookie management
Starting from version 2.6.0, the Azure Application Insights JavaScript SDK provides instance-based cookie management that can be disabled and re-enabled after initialization.
If you disabled cookies during initialization using thedisableCookiesUsageorcookieCfg.enabledconfigurations, you can re-enable them using thesetEnabledfunction of theICookieMgr object.
disableCookiesUsage
cookieCfg.enabled
setEnabled
The instance-based cookie management replaces the previous CoreUtils global functions ofdisableCookies(),setCookie(),getCookie(), anddeleteCookie().
disableCookies()
setCookie()
getCookie()
deleteCookie()
To take advantage of the tree-shaking enhancements introduced in version 2.6.0, it's recommended to no longer use the global functions.
Cookie configuration
ICookieMgrConfig is a cookie configuration for instance-based cookie management added in 2.6.0. The options provided allow you to enable or disable the use of cookies by the SDK. You can also set custom cookie domains and paths and customize the functions for fetching, setting, and deleting cookies.
The ICookieMgrConfig options are defined in the following table.
cookieDomain
cookiePath
blockedCookies
(name: string) => string
(name: string, value: string) => void
(name: string, value: string) => void
Source map
Source map support helps you debug minified JavaScript code with the ability to unminify the minified callstack of your exception telemetry.
Compatible with all current integrations on theException Detailspanel
Supports all current and future JavaScript SDKs, including Node.JS, without the need for an SDK upgrade
Link to Blob Storage account
Application Insights supports the uploading of source maps to your Azure Storage account blob container. You can use source maps to unminify call stacks found on theEnd-to-end transaction detailspage. You can also use source maps to unminify any exception sent by theJavaScript SDKor theNode.js SDK.

If you already have an existing storage account or blob container, you can skip this step.
Create a new storage account.
Create a new storage account.
Create a blob containerinside your storage account. SetPublic access leveltoPrivateto ensure that your source maps aren't publicly accessible.
Create a blob containerinside your storage account. SetPublic access leveltoPrivateto ensure that your source maps aren't publicly accessible.

Integrate your continuous deployment pipeline with your storage account by configuring it to automatically upload your source maps to the configured blob container.
You can upload source maps to your Azure Blob Storage container with the same folder structure they were compiled and deployed with. A common use case is to prefix a deployment folder with its version, for example,1.2.3/static/js/main.js. When you unminify via an Azure blob container calledsourcemaps, the pipeline tries to fetch a source map located atsourcemaps/1.2.3/static/js/main.js.map.
1.2.3/static/js/main.js
sourcemaps
sourcemaps/1.2.3/static/js/main.js.map
If you're using Azure Pipelines to continuously build and deploy your application, add anAzure file copytask to your pipeline to automatically upload your source maps.

You have two options for configuring your Application Insights resource with a source map storage account.
From theEnd-to-end transaction detailstab, selectUnminify. Configure your resource if it's unconfigured.
In the Azure portal, view the details of an exception that's minified.
SelectUnminify.
If your resource isn't configured, configure it.
To configure or change the storage account or blob container that's linked to your Application Insights resource:
Go to thePropertiestab of your Application Insights resource.
Go to thePropertiestab of your Application Insights resource.
SelectChange source map Blob Container.
SelectChange source map Blob Container.
Select a different blob container as your source map container.
Select a different blob container as your source map container.
SelectApply.
SelectApply.

View the unminified callstack
To view the unminified callstack, select an Exception Telemetry item in the Azure portal, find the source maps that match the call stack, and drag and drop the source maps onto the call stack in the Azure portal. The source map must have the same name as the source file of a stack frame, but with amapextension.
map
If you experience issues that involve source map support for JavaScript applications, seeTroubleshoot source map support for JavaScript applications.

Tree shaking
Tree shaking eliminates unused code from the final JavaScript bundle.
To take advantage of tree shaking, import only the necessary components of the SDK into your code. By doing so, unused code isn't included in the final bundle, reducing its size and improving performance.
Tree shaking enhancements and recommendations
In version 2.6.0, we deprecated and removed the internal usage of these static helper classes to improve support for tree-shaking algorithms. It lets npm packages safely drop unused code.
CoreUtils
CoreUtils
EventHelper
EventHelper
Util
Util
UrlHelper
UrlHelper
DateTimeUtils
DateTimeUtils
ConnectionStringParser
ConnectionStringParser
The functions are now exported as top-level roots from the modules, making it easier to refactor your code for better tree-shaking.
The static classes were changed to const objects that reference the new exported functions, and future changes are planned to further refactor the references.
Tree shaking deprecated functions and replacements
This section only applies to you if you're using the deprecated functions and you want to optimize package size. We recommend using the replacement functions to reduce size and support all the versions of Internet Explorer.
appInsights.getCookieMgr().setEnabled(true/false)
appInsights.getCookieMgr().isEnabled()
appInsights.getCookieMgr().setEnabled(false)
appInsights.getCookieMgr().setEnabled(false)
appInsights.getCookieMgr().isEnabled()
appInsights.getCookieMgr().set(name: string, value: string)
appInsights.getCookieMgr().get(name: string)
appInsights.getCookieMgr().del(name: string, path?: string)
Service notifications
Service notifications is a feature built into the SDK to provide actionable recommendations to help ensure your telemetry flows uninterrupted to Application Insights. You'll see the notifications as an exception message within Application Insights. We ensure notifications are relevant to you based on your SDK settings, and we adjust the verbosity based on the urgency of the recommendation. We recommend leaving service notifications on, but you're able to opt out via thefeatureOptInconfiguration. See below for a list of active notifications.
featureOptIn
Currently, no active notifications are being sent.
Service notifications are managed by the JavaScript SDK, which regularly polls a public JSON file to control and update these notifications. To disable the polling made by the JavaScript SDK, disable thefeatureOptIn mode.
Troubleshooting
See the dedicatedtroubleshooting article.
Frequently asked questions
This section provides answers to common questions.
How can I update my third-party server configuration for the JavaScript SDK?
The server side needs to be able to accept connections with those headers present. Depending on theAccess-Control-Allow-Headersconfiguration on the server side, it's often necessary to extend the server-side list by manually addingRequest-Id,Request-Context, andtraceparent(W3C distributed header).
Access-Control-Allow-Headers
Request-Id
Request-Context
traceparent
Access-Control-Allow-Headers:Request-Id,traceparent,Request-Context,<your header>
Request-Id
traceparent
Request-Context
<your header>
How can I disable distributed tracing for the JavaScript SDK?
Distributed tracing can be disabled in configuration.
Are the HTTP 502 and 503 responses always captured by Application Insights?
No. The "502 bad gateway" and "503 service unavailable" errors aren't always captured by Application Insights. If only client-side JavaScript is being used for monitoring, this behavior would be expected because the error response is returned prior to the page containing the HTML header with the monitoring JavaScript snippet being rendered.
If the 502 or 503 response was sent from a server with server-side monitoring enabled, the errors are collected by the Application Insights SDK.
Even when server-side monitoring is enabled on an application's web server, sometimes a 502 or 503 error isn't captured by Application Insights. Many modern web servers don't allow a client to communicate directly. Instead, they employ solutions like reverse proxies to pass information back and forth between the client and the front-end web servers.
In this scenario, a 502 or 503 response might be returned to a client because of an issue at the reverse proxy layer, so it isn't captured out-of-box by Application Insights. To help detect issues at this layer, you might need to forward logs from your reverse proxy to Log Analytics and create a custom rule to check for 502 or 503 responses. To learn more about common causes of 502 and 503 errors, seeTroubleshoot HTTP errors of "502 bad gateway" and "503 service unavailable" in Azure App Service.
Next steps
Track usage
Custom events and metrics
Azure file copy task
Feedback
Was this page helpful?
Additional resources