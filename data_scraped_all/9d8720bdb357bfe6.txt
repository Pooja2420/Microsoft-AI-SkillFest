Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
jobs.deployment.strategy.runOnce definition
Article
2025-03-24
2 contributors
In this article
The runOnce deployment strategy rolls out changes by executing each of its steps one time.
runOnce:
  preDeploy: # Pre deploy hook for runOnce deployment strategy.
    steps: [ task | script | powershell | pwsh | bash | checkout | download | downloadBuild | getPackage | publish | template | reviewApp ] # A list of steps to run.
    pool: string | pool # Pool where pre deploy steps will run.
  deploy: # Deploy hook for runOnce deployment strategy.
    steps: [ task | script | powershell | pwsh | bash | checkout | download | downloadBuild | getPackage | publish | template | reviewApp ] # A list of steps to run.
    pool: string | pool # Pool where deploy steps will run.
  routeTraffic: # Route traffic hook for runOnce deployment strategy.
    steps: [ task | script | powershell | pwsh | bash | checkout | download | downloadBuild | getPackage | publish | template | reviewApp ] # A list of steps to run.
    pool: string | pool # Pool where route traffic steps will run.
  postRouteTraffic: # Post route traffic hook for runOnce deployment strategy.
    steps: [ task | script | powershell | pwsh | bash | checkout | download | downloadBuild | getPackage | publish | template | reviewApp ] # A list of steps to run.
    pool: string | pool # Pool where post route traffic steps will run.
  on: # On success or failure hook for runOnce deployment strategy.
    failure: # Runs on failure of any step.
      steps: [ task | script | powershell | pwsh | bash | checkout | download | downloadBuild | getPackage | publish | template | reviewApp ] # A list of steps to run.
      pool: string | pool # Pool where post on failure steps will run.
    success: # Runs on success of all of the steps.
      steps: [ task | script | powershell | pwsh | bash | checkout | download | downloadBuild | getPackage | publish | template | reviewApp ] # A list of steps to run.
      pool: string | pool # Pool where on success steps will run.
runOnce:
  preDeploy: # Pre deploy hook for runOnce deployment strategy.
    steps: [ task | script | powershell | pwsh | bash | checkout | download | downloadBuild | getPackage | publish | template | reviewApp ] # A list of steps to run.
    pool: string | pool # Pool where pre deploy steps will run.
  deploy: # Deploy hook for runOnce deployment strategy.
    steps: [ task | script | powershell | pwsh | bash | checkout | download | downloadBuild | getPackage | publish | template | reviewApp ] # A list of steps to run.
    pool: string | pool # Pool where deploy steps will run.
  routeTraffic: # Route traffic hook for runOnce deployment strategy.
    steps: [ task | script | powershell | pwsh | bash | checkout | download | downloadBuild | getPackage | publish | template | reviewApp ] # A list of steps to run.
    pool: string | pool # Pool where route traffic steps will run.
  postRouteTraffic: # Post route traffic hook for runOnce deployment strategy.
    steps: [ task | script | powershell | pwsh | bash | checkout | download | downloadBuild | getPackage | publish | template | reviewApp ] # A list of steps to run.
    pool: string | pool # Pool where post route traffic steps will run.
  on: # On success or failure hook for runOnce deployment strategy.
    failure: # Runs on failure of any step.
      steps: [ task | script | powershell | pwsh | bash | checkout | download | downloadBuild | getPackage | publish | template | reviewApp ] # A list of steps to run.
      pool: string | pool # Pool where post on failure steps will run.
    success: # Runs on success of all of the steps.
      steps: [ task | script | powershell | pwsh | bash | checkout | download | downloadBuild | getPackage | publish | template | reviewApp ] # A list of steps to run.
      pool: string | pool # Pool where on success steps will run.
Definitions that reference this definition:jobs.deployment.strategy
Properties
preDeploypreDeployHook.Pre deploy hook for runOnce deployment strategy.
preDeploy
deploydeployHook.Deploy hook for runOnce deployment strategy.
deploy
routeTrafficrouteTrafficHook.Route traffic hook for runOnce deployment strategy.
routeTraffic
postRouteTrafficpostRouteTrafficHook.Post route traffic hook for runOnce deployment strategy.
postRouteTraffic
ononSuccessOrFailureHook.On success or failure hook for runOnce deployment strategy.
on
Remarks
runOnceis the simplest deployment strategy wherein all the lifecycle hooks, namelypreDeploydeploy,routeTraffic, andpostRouteTraffic, are executed once. Then, eitheron:successoron:failureis executed.
runOnce
preDeploy
deploy
routeTraffic
postRouteTraffic
on:
success
on:
failure
Descriptions of lifecycle hooks
preDeploy: Used to run steps that initialize resources before application deployment starts.
preDeploy
deploy: Used to run steps that deploy your application. Download artifact task will be auto injected only in thedeployhook for deployment jobs. To stop downloading artifacts, use- download: noneor choose specific artifacts to download by specifyingDownload Pipeline Artifact task.
deploy
deploy
- download: none
routeTraffic: Used to run steps that serve the traffic to the updated version.
routeTraffic
postRouteTraffic: Used to run the steps after the traffic is routed. Typically, these tasks monitor the health of the updated version for defined interval.
postRouteTraffic
on: failureoron: success: Used to run steps for rollback actions or clean-up.
on: failure
on: success
Examples
The following example YAML snippet showcases a simple use of a deployment job by using therunOncedeployment strategy. The example includes a checkout step.
runOnce
jobs:
  # Track deployments on the environment.
- deployment: DeployWeb
  displayName: deploy Web App
  pool:
    vmImage: ubuntu-latest
  # Creates an environment if it doesn't exist.
  environment: 'smarthotel-dev'
  strategy:
    runOnce:
      deploy:
        steps:
        - checkout: self 
        - script: echo my first deployment
jobs:
  # Track deployments on the environment.
- deployment: DeployWeb
  displayName: deploy Web App
  pool:
    vmImage: ubuntu-latest
  # Creates an environment if it doesn't exist.
  environment: 'smarthotel-dev'
  strategy:
    runOnce:
      deploy:
        steps:
        - checkout: self 
        - script: echo my first deployment
With each run of this job, deployment history is recorded against thesmarthotel-devenvironment.
smarthotel-dev
Note
It's also possible to create an environment with empty resources and use that as an abstract shell to record deployment history, as shown in the previous example.
The next example demonstrates how a pipeline can refer both an environment and a resource to be used as the target for a deployment job.
jobs:
- deployment: DeployWeb
  displayName: deploy Web App
  pool:
    vmImage: ubuntu-latest
  # Records deployment against bookings resource - Kubernetes namespace.
  environment: 'smarthotel-dev.bookings'
  strategy: 
    runOnce:
      deploy:
        steps:
          # No need to explicitly pass the connection details.
        - task: KubernetesManifest@0
          displayName: Deploy to Kubernetes cluster
          inputs:
            action: deploy
            namespace: $(k8sNamespace)
            manifests: |
              $(System.ArtifactsDirectory)/manifests/*
            imagePullSecrets: |
              $(imagePullSecret)
            containers: |
              $(containerRegistry)/$(imageRepository):$(tag)
jobs:
- deployment: DeployWeb
  displayName: deploy Web App
  pool:
    vmImage: ubuntu-latest
  # Records deployment against bookings resource - Kubernetes namespace.
  environment: 'smarthotel-dev.bookings'
  strategy: 
    runOnce:
      deploy:
        steps:
          # No need to explicitly pass the connection details.
        - task: KubernetesManifest@0
          displayName: Deploy to Kubernetes cluster
          inputs:
            action: deploy
            namespace: $(k8sNamespace)
            manifests: |
              $(System.ArtifactsDirectory)/manifests/*
            imagePullSecrets: |
              $(imagePullSecret)
            containers: |
              $(containerRegistry)/$(imageRepository):$(tag)
This approach has the following benefits:
Records deployment history on a specific resource within the environment, as opposed to recording the history on all resources within the environment.
Steps in the deployment jobautomatically inheritthe connection details of the resource (in this case, a Kubernetes namespace,smarthotel-dev.bookings), because the deployment job is linked to the environment.
This is useful in the cases where the same connection detail is set for multiple steps of the job.
smarthotel-dev.bookings
See also
Deployment jobs
Feedback
Was this page helpful?
Additional resources