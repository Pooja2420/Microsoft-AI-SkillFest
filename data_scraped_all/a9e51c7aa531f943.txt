Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Migrate from XAML builds to new builds
Article
2018-04-17
3 contributors
In this article
TFS 2017 | TFS 2015 | TFS 2013
Note
In Microsoft Team Foundation Server (TFS) 2018 and previous versions,
build and releasepipelinesare calleddefinitions,runsare calledbuilds,service connectionsare calledservice endpoints,stagesare calledenvironments,
andjobsare calledphases.
We introduced XAML build automation capabilities based on the Windows Workflow Foundation in Team Foundation Server (TFS) 2010. We released another version ofXAML buildsin TFS 2013.
After that we sought to expand beyond .NET and Windows and add support for other kinds of apps that are based on operating systems such as macOS and Linux. It became clear that we needed to switch to a more open, flexible, web-based foundation for our build automation engine. In early 2015 in Azure Pipelines, and then in TFS 2015, we introduced a simpler task- and script-driven cross-platform build system.
Because the systems are so different, there's no automated or general way to migrate a XAML build pipeline into a new build pipeline.  The migration process is to manually create the new build pipelines that replicate what your XAML builds do.
If you're building standard .NET applications, you probably used our default templates as provided out-of-the-box. In this case the process should be reasonably easy.
If you have customized your XAML templates or added custom tasks, then you'll need to also take other steps including writing scripts, installing extensions, or creating custom tasks.
Overview of the migration effort
Here are the steps to migrate from XAML builds to newer builds:
If you're using a private TFS server,set up agentsto run your builds.
If you're using a private TFS server,set up agentsto run your builds.
To get familiar with the new build system, create a"Hello world" build pipeline.
To get familiar with the new build system, create a"Hello world" build pipeline.
Create a new build pipeline intended to replace one of your XAML build pipelines.Create a new build pipeline.Port your XAML settings.
Create a new build pipeline intended to replace one of your XAML build pipelines.
Create a new build pipeline.
Create a new build pipeline.
Port your XAML settings.
Port your XAML settings.
On theGeneral tab, disable the XAML build pipeline.
On theGeneral tab, disable the XAML build pipeline.
Repeat the previous two steps for each of your XAML build pipelines.
Repeat the previous two steps for each of your XAML build pipelines.
Take advantage of new build features and learn more about the kinds of apps you can build.
Take advantage of new build features and learn more about the kinds of apps you can build.
Learn how to customize, and if necessary extend your system.
Learn how to customize, and if necessary extend your system.
When you no longer need the history and artifacts from your XAML builds, delete the XAML builds, and then the XAML build pipelines.WarningAfter you delete the XAML builds and pipelines, you cannot get them back.
When you no longer need the history and artifacts from your XAML builds, delete the XAML builds, and then the XAML build pipelines.
Warning
After you delete the XAML builds and pipelines, you cannot get them back.
Create new build pipelines
If you're building a standard .NET app, you're probably using one of the out-of-the-box build templates such as TfvcTemplate.12.xaml or GitTemplate.12.xaml. In this case, it will probably just take you a few clicks to create build pipelines in the new build system.
Open your project in your web browser(If you don't see your project listed on the home page, selectBrowse.)On-premises TFS:http://{your_server}:8080/tfs/DefaultCollection/{your_project}Azure Pipelines:https://dev.azure.com/{your_organization}/{your_project}The TFS URL doesn't work for me. How can I get the correct URL?
Open your project in your web browser
(If you don't see your project listed on the home page, selectBrowse.)
On-premises TFS:http://{your_server}:8080/tfs/DefaultCollection/{your_project}
http://{your_server}:8080/tfs/DefaultCollection/{your_project}
Azure Pipelines:https://dev.azure.com/{your_organization}/{your_project}
https://dev.azure.com/{your_organization}/{your_project}
The TFS URL doesn't work for me. How can I get the correct URL?
Create a build pipeline (Pipelines tab > Builds)
Create a build pipeline (Pipelines tab > Builds)

Select a template to add commonly used tasks to your build pipeline.
Make any necessary changes to your build pipeline to replicate your XAML build pipeline. The tasks added by the template should simply work in many cases. But if you changed process parameters or other settings in your XAML build pipelines, below are some pointers to get you started replicating those changes.
Port your XAML settings
In each of the following sections we show the XAML user interface, and then provide a pointer to the place where you can port the setting into your new build pipeline.
General tab

When editing the pipeline: On theTaskstab, in left pane clickPipeline, and theNamefield appears in right pane.
In theBuildshub (MineorAll pipelinestab), open the action menu and chooseRename.
Source Settings tab

The new build pipeline offers you some new options. The specific extra options you'll see depend on the version you're using of TFS or Azure Pipelines.  If you're using Azure Pipelines, first make sure to displayAdvanced settings. SeeBuild TFVC repositories.

The new build pipeline offers you some new options. The specific extra options you'll see depend on the version you're using of TFS or Azure Pipelines.  If you're using Azure Pipelines, first make sure to displayAdvanced settings. SeePipeline options for Git repositories.
Trigger tab

The new build pipeline offers you some new options. For example:
You can potentially create fewer build pipelines to replace a larger number of XAML build pipelines. This is because you can use a single new build pipeline with multiple triggers. And if you're using Azure Pipelines, then you can add multiple scheduled times.
You can potentially create fewer build pipelines to replace a larger number of XAML build pipelines. This is because you can use a single new build pipeline with multiple triggers. And if you're using Azure Pipelines, then you can add multiple scheduled times.
TheRolling buildsoption is replaced by theBatch changesoption. You can't specify minimum time between builds. But if you're using Azure Pipelines, you can specify the maximum number of parallel jobs per branch.
TheRolling buildsoption is replaced by theBatch changesoption. You can't specify minimum time between builds. But if you're using Azure Pipelines, you can specify the maximum number of parallel jobs per branch.
If your code is in TFVC, you can add folder path filters to include or exclude certain sets of files from triggering a CI build.
If your code is in TFVC, you can add folder path filters to include or exclude certain sets of files from triggering a CI build.
If your code is in TFVC and you're using the gated check-in trigger, you've got the option to also run CI builds or not. You can also use the same workspace mappings as your repository settings, or specify different mappings.
If your code is in TFVC and you're using the gated check-in trigger, you've got the option to also run CI builds or not. You can also use the same workspace mappings as your repository settings, or specify different mappings.
If your code is in Git, then you specify the branch filters directly on theTriggerstab. And you can add folder path filters to include or exclude certain sets of files from triggering a CI build.
If your code is in Git, then you specify the branch filters directly on theTriggerstab. And you can add folder path filters to include or exclude certain sets of files from triggering a CI build.
The specific extra options you'll see depend on the version you're using of TFS or Azure Pipelines. SeeBuild pipeline triggers
We don't yet support theBuild even if nothing has changed since the previous buildoption.
Build Defaults tab

The new build pipeline offers you some new options. For example:
You don't need a controller, and the new agents are easier to set up and maintain. SeeBuild and release agents.
You don't need a controller, and the new agents are easier to set up and maintain. SeeBuild and release agents.
You can exactly specify which sets of files you want to publish as build artifacts. SeeBuild artifacts.
You can exactly specify which sets of files you want to publish as build artifacts. SeeBuild artifacts.
Process tab

The new build pipeline offers you some new options. SeeBuild TFVC repositories.

The new build pipeline offers you some new options. SeePipeline options for Git repositories.

On theBuildtab (TFS 2017 and newer) or theTaskstab (Azure Pipelines), after you select the Visual Studio Build task, you'll see the arguments that are equivalent to the XAML build parameters.
/p:RunCodeAnalysis=true
Important
In the Visual Studio Build arguments, on theVisual Studio Versionmenu, make sure to select version of Visual Studio that you're using.
The new build pipeline offers you some new options. SeeVisual Studio Build.
Learn more:Visual Studio Build task(for building solutions),MSBuild task(for building individual projects).

Seecontinuous testingandVisual Studio Test task.


The new build pipeline offers you some new options. See:
Agent capabilities
Agent capabilities
Build number format
Build number format
Retention Policy tab

The new build pipeline offers you some new options. SeeBuild and release retention policies.
Build and release different kinds of apps
In XAML builds you had to create your own custom templates to build different types of apps. In the new build system you can pick from a set of predefined templates. The largest and most current set of templates are available on Azure Pipelines and in our newest version of TFS.
Build
Here are a few examples of the kinds of apps you can build:
Build your ASP.NET 4 app.
Build your ASP.NET 4 app.
Build your ASP.NET Core app
Build your ASP.NET Core app
Build your Universal Windows Platform app
Build your Universal Windows Platform app
Build your Xamarin app
Build your Xamarin app
C++ apps for Windows
C++ apps for Windows
Release
The new build system is tightly integrated with Azure Pipelines. So it's easier then ever to automatically kick off a deployment after a successful build. Learn more:
Create your first pipeline
Create your first pipeline
Release pipelines
Release pipelines
Triggers
Triggers
A few examples include:
Continuous deployment of your app to an Azure web site
Continuous deployment of your app to an Azure web site
IIS using deployment groups
IIS using deployment groups
Other apps and tasks
For more examples of apps you can build and deploy, seeBuild and deploy your app.
For a complete list of our build, test, and deployment tasks, seeBuild and release tasks.
Customize your tasks
In XAML builds you created custom XAML tasks. In the new builds, you've got a range of options that begin with easier and lighter-weight approaches.
Get tasks from the Marketplace
Visual Studio Marketplaceoffers hundreds of extensions that you can install to add tasks that extend your build and deployment capabilities.
Write a script
A major feature of the new build system is its emphasis on using scripts to customize your build pipeline. You can check your scripts into version control and customize your build using any of these methods:
PowerShell scripts(Windows)
Batch scripts(Windows)
Command prompt
Shell scripts(macOS and Linux)
Tip
If you're using TFS 2017 or newer, you can write a short PowerShell script directly inside your build pipeline.
TFS 2017 or newer inline PowerShell script
For all these tasks we offer a set of built-in variables, and if necessary, you can define your own variables. SeeBuild variables.
Write a custom task
If necessary, you can write your owncustom extensionstocustom tasksfor your builds and releases.
Reuse patterns
In XAML builds you created custom XAML templates. In the new builds, it's easier to create reusable patterns.
Create a template
If you don't see a template for the kind of app you can start from an empty pipeline andadd the tasks you need. After you've got a pattern that you like, you can clone it or save it as a template directly in your web browser. SeeCreate your first pipeline.
Task groups (TFS 2017 or newer)
In XAML builds, if you change the template, then you also change the behavior of all pipelines based on it. In the new build system, templates don't work this way. Instead, a template behaves as a traditional template. After you create the build pipeline, subsequent changes to the template have no effect on build pipelines.
If you want to create a reusable and automatically updated piece of logic, thencreate a task group. You can then later modify the task group in one place and cause all the pipelines that use it to automatically be changed.
FAQ
How do I add conditional logic to my build pipeline?
Although the new build pipelines are essentially linear, we do give you control of the conditions under which a task runs.
On TFS 2015 and newer: You can select Enabled, Continue on error, or Always run.
On Azure Pipelines, you can specify one of four built-in choices to control when a task is run. If you need more control, you can specify custom conditions. For example:
and(failed(), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI'), startsWith(variables['Build.SourceBranch'], 'refs/heads/features/'))
and(failed(), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI'), startsWith(variables['Build.SourceBranch'], 'refs/heads/features/'))
SeeSpecify conditions for running a task.
Additional resources