Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Create a chaos experiment that uses a Chaos Mesh fault to kill AKS pods with the Azure portal
Article
2024-10-14
12 contributors
In this article
You can use a chaos experiment to verify that your application is resilient to failures by causing those failures in a controlled environment. In this article, you cause periodic Azure Kubernetes Service (AKS) pod failures on a namespace by using a chaos experiment and Azure Chaos Studio. Running this experiment can help you defend against service unavailability when there are sporadic failures.
Chaos Studio usesChaos Mesh, a free, open-source chaos engineering platform for Kubernetes, to inject faults into an AKS cluster. Chaos Mesh faults areservice-directfaults that require Chaos Mesh to be installed on the AKS cluster. You can use these same steps to set up and run an experiment for any AKS Chaos Mesh fault.
Prerequisites
An Azure subscription. If you don't have anAzure subscription, create anAzure free accountbefore you begin.
An AKS cluster with a Linux node pool. If you don't have an AKS cluster, see the AKS quickstart that uses theAzure CLI,Azure PowerShell, or theAzure portal.
Limitations
You can use Chaos Mesh faults with private clusters by configuringVNet Injection in Chaos Studio. Any commands issued to the private cluster, including the steps in this article to set up Chaos Mesh, need to follow theprivate cluster guidance. Recommended methods include connecting from a VM in the same virtual network or using theAKS command invokefeature.
AKS Chaos Mesh faults are only supported on Linux node pools.
If your AKS cluster is configured to only allow authorized IP ranges, you need to allow Chaos Studio's IP ranges. You can find them by querying theChaosStudioservice tag with the Service Tag Discovery API or downloadable JSON files.
ChaosStudio
Set up Chaos Mesh on your AKS cluster
Before you can run Chaos Mesh faults in Chaos Studio, you must install Chaos Mesh on your AKS cluster.
Run the following commands in anAzure Cloud Shellwindow where you have the active subscription set to be the subscription where your AKS cluster is deployed. ReplaceMyManagedClusterandMyResourceGroupwith the name of your cluster and resource group.az aks get-credentials --admin --name MyManagedCluster --resource-group MyResourceGrouphelm repo add chaos-mesh https://charts.chaos-mesh.org
helm repo update
kubectl create ns chaos-testing
helm install chaos-mesh chaos-mesh/chaos-mesh --namespace=chaos-testing --set chaosDaemon.runtime=containerd --set chaosDaemon.socketPath=/run/containerd/containerd.sock
Run the following commands in anAzure Cloud Shellwindow where you have the active subscription set to be the subscription where your AKS cluster is deployed. ReplaceMyManagedClusterandMyResourceGroupwith the name of your cluster and resource group.
MyManagedCluster
MyResourceGroup
az aks get-credentials --admin --name MyManagedCluster --resource-group MyResourceGroup
az aks get-credentials --admin --name MyManagedCluster --resource-group MyResourceGroup
helm repo add chaos-mesh https://charts.chaos-mesh.org
helm repo update
kubectl create ns chaos-testing
helm install chaos-mesh chaos-mesh/chaos-mesh --namespace=chaos-testing --set chaosDaemon.runtime=containerd --set chaosDaemon.socketPath=/run/containerd/containerd.sock
helm repo add chaos-mesh https://charts.chaos-mesh.org
helm repo update
kubectl create ns chaos-testing
helm install chaos-mesh chaos-mesh/chaos-mesh --namespace=chaos-testing --set chaosDaemon.runtime=containerd --set chaosDaemon.socketPath=/run/containerd/containerd.sock
Verify that the Chaos Mesh pods are installed by running the following command:kubectl get po -n chaos-testingYou should see output similar to the following example (a chaos-controller-manager and one or more chaos-daemons):NAME                                        READY   STATUS    RESTARTS   AGE
chaos-controller-manager-69fd5c46c8-xlqpc   1/1     Running   0          2d5h
chaos-daemon-jb8xh                          1/1     Running   0          2d5h
chaos-dashboard-98c4c5f97-tx5ds             1/1     Running   0          2d5h
Verify that the Chaos Mesh pods are installed by running the following command:
kubectl get po -n chaos-testing
kubectl get po -n chaos-testing
You should see output similar to the following example (a chaos-controller-manager and one or more chaos-daemons):
NAME                                        READY   STATUS    RESTARTS   AGE
chaos-controller-manager-69fd5c46c8-xlqpc   1/1     Running   0          2d5h
chaos-daemon-jb8xh                          1/1     Running   0          2d5h
chaos-dashboard-98c4c5f97-tx5ds             1/1     Running   0          2d5h
NAME                                        READY   STATUS    RESTARTS   AGE
chaos-controller-manager-69fd5c46c8-xlqpc   1/1     Running   0          2d5h
chaos-daemon-jb8xh                          1/1     Running   0          2d5h
chaos-dashboard-98c4c5f97-tx5ds             1/1     Running   0          2d5h
You can alsouse the installation instructions on the Chaos Mesh website.
Enable Chaos Studio on your AKS cluster
Chaos Studio can't inject faults against a resource unless that resource is added to Chaos Studio first. You add a resource to Chaos Studio by creating atarget and capabilitieson the resource. AKS clusters have only one target type (service-direct), but other resources might have up to two target types. One target type is for service-direct faults. Another target type is for agent-based faults. Each type of Chaos Mesh fault is represented as a capability like PodChaos, NetworkChaos, and IOChaos.
Open theAzure portal.
Open theAzure portal.
Search forChaos Studioin the search bar.
Search forChaos Studioin the search bar.
SelectTargetsand go to your AKS cluster.
SelectTargetsand go to your AKS cluster.

Select the checkbox next to your AKS cluster. SelectEnable targetsand then selectEnable service-direct targetsfrom the dropdown menu.
Select the checkbox next to your AKS cluster. SelectEnable targetsand then selectEnable service-direct targetsfrom the dropdown menu.

Confirm that the desired resource is listed. SelectReview + Enable, thenEnable.
Confirm that the desired resource is listed. SelectReview + Enable, thenEnable.
A notification appears that indicates that the resources you selected were successfully enabled.
A notification appears that indicates that the resources you selected were successfully enabled.

You've now successfully added your AKS cluster to Chaos Studio. In theTargetsview, you can also manage the capabilities enabled on this resource. Select theManage actionslink next to a resource to display the capabilities enabled for that resource.
Create an experiment
Now you can create your experiment. A chaos experiment defines the actions you want to take against target resources. The actions are organized and run in sequential steps. The chaos experiment also defines the actions you want to take against branches, which run in parallel.
Select theExperimentstab in Chaos Studio. In this view, you can see and manage all your chaos experiments. SelectCreate>New experiment.
Select theExperimentstab in Chaos Studio. In this view, you can see and manage all your chaos experiments. SelectCreate>New experiment.

Fill in theSubscription,Resource Group, andLocationwhere you want to deploy the chaos experiment. Give your experiment a name. SelectNext: Experiment designer.
Fill in theSubscription,Resource Group, andLocationwhere you want to deploy the chaos experiment. Give your experiment a name. SelectNext: Experiment designer.

You're now in the Chaos Studio experiment designer. The experiment designer allows you to build your experiment by adding steps, branches, and faults. Give a friendly name to yourStepandBranchand selectAdd action > Add fault.
You're now in the Chaos Studio experiment designer. The experiment designer allows you to build your experiment by adding steps, branches, and faults. Give a friendly name to yourStepandBranchand selectAdd action > Add fault.

SelectAKS Chaos Mesh Pod Chaosfrom the dropdown list. Fill inDurationwith the number of minutes you want the failure to last andjsonSpecwith the following information:To formulate your Chaos MeshjsonSpec:See the Chaos Mesh documentation for a fault type,for example, the PodChaos type.Formulate the YAML configuration for that fault type by using the Chaos Mesh documentation.apiVersion: chaos-mesh.org/v1alpha1
kind: PodChaos
metadata:
  name: pod-failure-example
  namespace: chaos-testing
spec:
  action: pod-failure
  mode: all
  duration: '600s'
  selector:
    namespaces:
      - defaultRemove any YAML outside of thespec(including the spec property name) and remove the indentation of the spec details. Thedurationparameter isn't necessary, but is used if provided. In this case, remove it.action: pod-failure
mode: all
selector:
  namespaces:
    - defaultUse aYAML-to-JSON converter like this oneto convert the Chaos Mesh YAML to JSON and minimize it.{"action":"pod-failure","mode":"all","selector":{"namespaces":["default"]}}Paste the minimized JSON into thejsonSpecfield in the portal.
SelectAKS Chaos Mesh Pod Chaosfrom the dropdown list. Fill inDurationwith the number of minutes you want the failure to last andjsonSpecwith the following information:
To formulate your Chaos MeshjsonSpec:
jsonSpec
See the Chaos Mesh documentation for a fault type,for example, the PodChaos type.
See the Chaos Mesh documentation for a fault type,for example, the PodChaos type.
Formulate the YAML configuration for that fault type by using the Chaos Mesh documentation.apiVersion: chaos-mesh.org/v1alpha1
kind: PodChaos
metadata:
  name: pod-failure-example
  namespace: chaos-testing
spec:
  action: pod-failure
  mode: all
  duration: '600s'
  selector:
    namespaces:
      - default
Formulate the YAML configuration for that fault type by using the Chaos Mesh documentation.
apiVersion: chaos-mesh.org/v1alpha1
kind: PodChaos
metadata:
  name: pod-failure-example
  namespace: chaos-testing
spec:
  action: pod-failure
  mode: all
  duration: '600s'
  selector:
    namespaces:
      - default
apiVersion: chaos-mesh.org/v1alpha1
kind: PodChaos
metadata:
  name: pod-failure-example
  namespace: chaos-testing
spec:
  action: pod-failure
  mode: all
  duration: '600s'
  selector:
    namespaces:
      - default
Remove any YAML outside of thespec(including the spec property name) and remove the indentation of the spec details. Thedurationparameter isn't necessary, but is used if provided. In this case, remove it.action: pod-failure
mode: all
selector:
  namespaces:
    - default
Remove any YAML outside of thespec(including the spec property name) and remove the indentation of the spec details. Thedurationparameter isn't necessary, but is used if provided. In this case, remove it.
spec
duration
action: pod-failure
mode: all
selector:
  namespaces:
    - default
action: pod-failure
mode: all
selector:
  namespaces:
    - default
Use aYAML-to-JSON converter like this oneto convert the Chaos Mesh YAML to JSON and minimize it.{"action":"pod-failure","mode":"all","selector":{"namespaces":["default"]}}
Use aYAML-to-JSON converter like this oneto convert the Chaos Mesh YAML to JSON and minimize it.
{"action":"pod-failure","mode":"all","selector":{"namespaces":["default"]}}
{"action":"pod-failure","mode":"all","selector":{"namespaces":["default"]}}
Paste the minimized JSON into thejsonSpecfield in the portal.
Paste the minimized JSON into thejsonSpecfield in the portal.
SelectNext: Target resources.
SelectNext: Target resources.

Select your AKS cluster and selectNext.
Select your AKS cluster and selectNext.

Verify that your experiment looks correct and selectReview + create>Create.
Verify that your experiment looks correct and selectReview + create>Create.

Give the experiment permission to your AKS cluster
When you create a chaos experiment, Chaos Studio creates a system-assigned managed identity that executes faults against your target resources. This identity must be givenappropriate permissionsto the target resource for the experiment to run successfully.
Go to your AKS cluster and selectAccess control (IAM).
Go to your AKS cluster and selectAccess control (IAM).

SelectAdd>Add role assignment.
SelectAdd>Add role assignment.

Search forAzure Kubernetes Service Cluster Admin Roleand select the role. SelectNext.
Search forAzure Kubernetes Service Cluster Admin Roleand select the role. SelectNext.

ChooseSelect membersand search for your experiment name. Select your experiment and chooseSelect. If there are multiple experiments in the same tenant with the same name, your experiment name is truncated with random characters added.
ChooseSelect membersand search for your experiment name. Select your experiment and chooseSelect. If there are multiple experiments in the same tenant with the same name, your experiment name is truncated with random characters added.

SelectReview + assign>Review + assign.
SelectReview + assign>Review + assign.
Run your experiment
You're now ready to run your experiment. To see the effect, we recommend that you open your AKS cluster overview and go toInsightsin a separate browser tab. Live data for theActive Pod Countshows the effect of running your experiment.
In theExperimentsview, select your experiment. SelectStart>OK.
In theExperimentsview, select your experiment. SelectStart>OK.

When theStatuschanges toRunning, selectDetailsfor the latest run underHistoryto see details for the running experiment.
When theStatuschanges toRunning, selectDetailsfor the latest run underHistoryto see details for the running experiment.
Next steps
Now that you've run an AKS Chaos Mesh service-direct experiment, you're ready to:
Create an experiment that uses agent-based faults
Manage your experiment
Feedback
Was this page helpful?
Additional resources