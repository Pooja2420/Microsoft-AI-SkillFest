Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Create a function triggered by Azure Cosmos DB
Article
2023-12-31
13 contributors
In this article
Learn how to create a function in the Azure portal that is triggered when data is added to or changed in Azure Cosmos DB. To learn more about Azure Cosmos DB, seeAzure Cosmos DB: Serverless database computing using Azure Functions.
Note
In-portal editing is only supported for JavaScript, PowerShell, and C# Script functions.
Python in-portal editing is supported only when running in the Consumption plan.
To create a C# Script app that supports in-portal editing, you must choose a runtimeVersionthat supports thein-process model.
When possible, you shoulddevelop your functions locally.
To learn more about the limitations on editing function code in the Azure portal, seeDevelopment limitations in the Azure portal.
Prerequisites
To complete this tutorial:
If you don't have an Azure subscription, create afree accountbefore you begin.
Note
Azure Cosmos DB bindings are only supported for use with Azure Cosmos DB for NoSQL. Support for Azure Cosmos DB for Table is provided by using theTable storage bindings, starting with extension 5.x. For all other Azure Cosmos DB APIs, you should access the database from your function by using the static client for your API, includingAzure Cosmos DB for MongoDB,Azure Cosmos DB for Cassandra, andAzure Cosmos DB for Apache Gremlin.
Sign in to Azure
Sign in to theAzure portalwith your Azure account.
Create an Azure Cosmos DB account
You must have an Azure Cosmos DB account that uses the SQL API before you create the trigger.
From the Azure portal menu or theHome page, selectCreate a resource.
From the Azure portal menu or theHome page, selectCreate a resource.
Search forAzure Cosmos DB. SelectCreate>Azure Cosmos DB.
Search forAzure Cosmos DB. SelectCreate>Azure Cosmos DB.
On theCreate an Azure Cosmos DB accountpage, select theCreateoption within theAzure Cosmos DB for NoSQLsection.Azure Cosmos DB provides several APIs:NoSQL, for document dataPostgreSQLMongoDB, for document dataApache CassandraTableApache Gremlin, for graph dataTo learn more about the API for NoSQL, seeWelcome to Azure Cosmos DB.
On theCreate an Azure Cosmos DB accountpage, select theCreateoption within theAzure Cosmos DB for NoSQLsection.
Azure Cosmos DB provides several APIs:
NoSQL, for document data
PostgreSQL
MongoDB, for document data
Apache Cassandra
Table
Apache Gremlin, for graph data
To learn more about the API for NoSQL, seeWelcome to Azure Cosmos DB.
In theCreate Azure Cosmos DB Accountpage, enter the basic settings for the new Azure Cosmos DB account.SettingValueDescriptionSubscriptionSubscription nameSelect the Azure subscription that you want to use for this Azure Cosmos DB account.Resource GroupResource group nameSelect a resource group, or selectCreate new, then enter a unique name for the new resource group.Account NameA unique nameEnter a name to identify your Azure Cosmos DB account. Becausedocuments.azure.comis appended to the name that you provide to create your URI, use a unique name. The name can contain only lowercase letters, numbers, and the hyphen (-) character. It must be 3-44 characters.LocationThe region closest to your usersSelect a geographic location to host your Azure Cosmos DB account. Use the location that is closest to your users to give them the fastest access to the data.Capacity modeProvisioned throughputorServerlessSelectProvisioned throughputto create an account inprovisioned throughputmode. SelectServerlessto create an account inserverlessmode.Apply Azure Cosmos DB free tier discountApplyorDo not applyWith Azure Cosmos DB free tier, you get the first 1000 RU/s and 25 GB of storage for free in an account. Learn more aboutfree tier.Limit total account throughputSelected or notLimit the total amount of throughput that can be provisioned on this account. This limit prevents unexpected charges related to provisioned throughput. You can update or remove this limit after your account is created.You can have up to one free tier Azure Cosmos DB account per Azure subscription and must opt in when creating the account. If you don't see the option to apply the free tier discount, another account in the subscription has already been enabled with free tier.NoteThe following options are not available if you selectServerlessas theCapacity mode:Apply Free Tier DiscountLimit total account throughput
In theCreate Azure Cosmos DB Accountpage, enter the basic settings for the new Azure Cosmos DB account.
You can have up to one free tier Azure Cosmos DB account per Azure subscription and must opt in when creating the account. If you don't see the option to apply the free tier discount, another account in the subscription has already been enabled with free tier.

Note
The following options are not available if you selectServerlessas theCapacity mode:
Apply Free Tier Discount
Limit total account throughput
In theGlobal Distributiontab, configure the following details. You can leave the default values for this quickstart:SettingValueDescriptionGeo-RedundancyDisableEnable or disable global distribution on your account by pairing your region with a pair region. You can add more regions to your account later.Multi-region WritesDisableMulti-region writes capability allows you to take advantage of the provisioned throughput for your databases and containers across the globe.Availability ZonesDisableAvailability Zones help you further improve availability and resiliency of your application.NoteThe following options are not available if you selectServerlessas theCapacity modein the previousBasicspage:Geo-redundancyMulti-region Writes
In theGlobal Distributiontab, configure the following details. You can leave the default values for this quickstart:
Note
The following options are not available if you selectServerlessas theCapacity modein the previousBasicspage:
Geo-redundancy
Multi-region Writes
Optionally, you can configure more details in the following tabs:Networking. Configureaccess from a virtual network.Backup Policy. Configure eitherperiodicorcontinuousbackup policy.Encryption. Use either service-managed key or acustomer-managed key.Tags. Tags are name/value pairs that enable you to categorize resources and view consolidated billing by applying the same tag to multiple resources and resource groups.
Optionally, you can configure more details in the following tabs:
Networking. Configureaccess from a virtual network.
Backup Policy. Configure eitherperiodicorcontinuousbackup policy.
Encryption. Use either service-managed key or acustomer-managed key.
Tags. Tags are name/value pairs that enable you to categorize resources and view consolidated billing by applying the same tag to multiple resources and resource groups.
SelectReview + create.
SelectReview + create.
Review the account settings, and then selectCreate. It takes a few minutes to create the account. Wait for the portal page to displayYour deployment is complete.
Review the account settings, and then selectCreate. It takes a few minutes to create the account. Wait for the portal page to displayYour deployment is complete.

SelectGo to resourceto go to the Azure Cosmos DB account page.
SelectGo to resourceto go to the Azure Cosmos DB account page.

Create a function app in Azure
From the Azure portal menu or theHomepage, selectCreate a resource.
From the Azure portal menu or theHomepage, selectCreate a resource.
In theNewpage, selectFunction App.
In theNewpage, selectFunction App.
UnderSelect a hosting option, selectConsumption>Selectto create your app in the defaultConsumptionplan. In thisserverlesshosting option, you pay only for the time your functions run.Premium planalso offers dynamic scaling. When you run in an App Service plan, you must manage thescaling of your function app.
UnderSelect a hosting option, selectConsumption>Selectto create your app in the defaultConsumptionplan. In thisserverlesshosting option, you pay only for the time your functions run.Premium planalso offers dynamic scaling. When you run in an App Service plan, you must manage thescaling of your function app.
On theBasicspage, use the function app settings as specified in the following table:SettingSuggested valueDescriptionSubscriptionYour subscriptionThe subscription under which you create your new function app.Resource GroupmyResourceGroupName for the new resource group in which you create your function app. You should create a new resource group because there areknown limitations when creating new function apps in an existing resource group.Function App nameGlobally unique nameName that identifies your new function app. Valid characters area-z(case insensitive),0-9, and-.Runtime stackPreferred languageChoose a runtime that supports your favorite function programming language. In-portal editing is only available for JavaScript, PowerShell, Python, TypeScript, and C# script.To create a C# Script app that supports in-portal editing, you must choose a runtimeVersionthat supports thein-process model.C# class library and Java functions must bedeveloped locally.VersionVersion numberChoose the version of your installed runtime.RegionPreferred regionSelect aregionthat's near you or near other services that your functions can access.Operating systemWindowsAn operating system is preselected for you based on your runtime stack selection, but you can change the setting if necessary. In-portal editing is only supported on Windows.
On theBasicspage, use the function app settings as specified in the following table:
a-z
0-9
-
Accept the default options in the remaining tabs, including the default behavior of creating a new storage account on theStoragetab and a new Application Insight instance on theMonitoringtab. You can also choose to use an existing storage account or Application Insights instance.
Accept the default options in the remaining tabs, including the default behavior of creating a new storage account on theStoragetab and a new Application Insight instance on theMonitoringtab. You can also choose to use an existing storage account or Application Insights instance.
SelectReview + createto review the app configuration you chose, and then selectCreateto provision and deploy the function app.
SelectReview + createto review the app configuration you chose, and then selectCreateto provision and deploy the function app.
Select theNotificationsicon in the upper-right corner of the portal and watch for theDeployment succeededmessage.
Select theNotificationsicon in the upper-right corner of the portal and watch for theDeployment succeededmessage.
SelectGo to resourceto view your new function app. You can also selectPin to dashboard. Pinning makes it easier to return to this function app resource from your dashboard.
SelectGo to resourceto view your new function app. You can also selectPin to dashboard. Pinning makes it easier to return to this function app resource from your dashboard.

Next, you create a function in the new function app.

Create Azure Cosmos DB trigger
In your function app, selectOverviewand then select+ CreateunderFunctions. If you don't see aCreatebutton, you must instead add your Azure Cosmos DB trigger to your local code project and then redeploy to Azure. For more information, seeCode and test Azure Functions locally.
In your function app, selectOverviewand then select+ CreateunderFunctions. If you don't see aCreatebutton, you must instead add your Azure Cosmos DB trigger to your local code project and then redeploy to Azure. For more information, seeCode and test Azure Functions locally.
UnderSelect a template, scroll down and choose theAzure Cosmos DB triggertemplate.
UnderSelect a template, scroll down and choose theAzure Cosmos DB triggertemplate.
InTemplate details, configure the new trigger with the settings as specified in this table, then selectCreate:SettingSuggested valueDescriptionNew functionAccept the default nameThe name of the function.Azure Cosmos DB account connectionAccept the default new nameSelectNew, theDatabase Accountyou created earlier, and thenOK. This action creates an application setting for your account connection. This setting is used by the binding to connection to the database.Database nameTasksName of the database that includes the collection to be monitored.Collection nameItemsName of the collection to be monitored.Collection name for leasesleasesName of the collection to store the leases.Create lease collection if it does not existYesChecks for existence of the lease collection and automatically creates it.Azure creates the Azure Cosmos DB triggered function based on the provided values.
InTemplate details, configure the new trigger with the settings as specified in this table, then selectCreate:
Azure creates the Azure Cosmos DB triggered function based on the provided values.
To display the template-based function code, selectCode + Test.This function template writes the number of documents and the first document ID to the logs.
To display the template-based function code, selectCode + Test.

This function template writes the number of documents and the first document ID to the logs.
Next, you connect to your Azure Cosmos DB account and create theItemscontainer in theTasksdatabase.
Items
Tasks
Create the Items container
Open a second instance of theAzure portalin a new tab in the browser.
Open a second instance of theAzure portalin a new tab in the browser.
On the left side of the portal, expand the icon bar, typecosmosin the search field, and selectAzure Cosmos DB.
On the left side of the portal, expand the icon bar, typecosmosin the search field, and selectAzure Cosmos DB.
cosmos

Choose your Azure Cosmos DB account, then select theData Explorer.
Choose your Azure Cosmos DB account, then select theData Explorer.
UnderSQL API, chooseTasksdatabase and selectNew Container.
UnderSQL API, chooseTasksdatabase and selectNew Container.

InAdd Container, use the settings shown in the table below the image.SettingSuggested valueDescriptionDatabase IDTasksThe name for your new database. This must match the name defined in your function binding.Container IDItemsThe name for the new container. This must match the name defined in your function binding.Partition key/categoryA partition key that distributes data evenly to each partition. Selecting the correct partition key is important in creating a performant container.Throughput400 RUUse the default value. If you want to reduce latency, you can scale up the throughput later.
InAdd Container, use the settings shown in the table below the image.

ClickOKto create the Items container. It may take a short time for the container to get created.
ClickOKto create the Items container. It may take a short time for the container to get created.
After the container specified in the function binding exists, you can test the function by adding items to this new container.
Test the function
Expand the newItemscontainer in Data Explorer, chooseItems, then selectNew Item.
Expand the newItemscontainer in Data Explorer, chooseItems, then selectNew Item.

Replace the contents of the new item with the following content, then chooseSave.{
    "id": "task1",
    "category": "general",
    "description": "some task"
}
Replace the contents of the new item with the following content, then chooseSave.
{
    "id": "task1",
    "category": "general",
    "description": "some task"
}
{
    "id": "task1",
    "category": "general",
    "description": "some task"
}
Switch to the first browser tab that contains your function in the portal. Expand the function logs and verify that the new document has triggered the function. See that thetask1document ID value is written to the logs.
Switch to the first browser tab that contains your function in the portal. Expand the function logs and verify that the new document has triggered the function. See that thetask1document ID value is written to the logs.
task1

(Optional) Go back to your document, make a change, and clickUpdate. Then, go back to the function logs and verify that the update has also triggered the function.
(Optional) Go back to your document, make a change, and clickUpdate. Then, go back to the function logs and verify that the update has also triggered the function.
Clean up resources
Other quickstarts in this collection build upon this quickstart. If you plan to work with subsequent quickstarts, tutorials, or with any of the services you've created in this quickstart, don't clean up the resources.
Resourcesin Azure refer to function apps, functions, storage accounts, and so forth. They're grouped intoresource groups, and you can delete everything in a group by deleting the group.
You've created resources to complete these quickstarts. You might be billed for these resources, depending on youraccount statusandservice pricing. If you don't need the resources anymore, here's how to delete them:
In the Azure portal, go to theResource grouppage.To get to that page from the function app page, select theOverviewtab, and then select the link underResource group.To get to that page from the dashboard, selectResource groups, and then select the resource group that you used for this article.
In the Azure portal, go to theResource grouppage.
To get to that page from the function app page, select theOverviewtab, and then select the link underResource group.

To get to that page from the dashboard, selectResource groups, and then select the resource group that you used for this article.
In theResource grouppage, review the list of included resources, and verify that they're the ones you want to delete.
In theResource grouppage, review the list of included resources, and verify that they're the ones you want to delete.
SelectDelete resource groupand follow the instructions.Deletion might take a couple of minutes. When it's done, a notification appears for a few seconds. You can also select the bell icon at the top of the page to view the notification.
SelectDelete resource groupand follow the instructions.
Deletion might take a couple of minutes. When it's done, a notification appears for a few seconds. You can also select the bell icon at the top of the page to view the notification.
Next steps
You have created a function that runs when a document is added or modified in your Azure Cosmos DB. For more information about Azure Cosmos DB triggers, seeAzure Cosmos DB bindings for Azure Functions.
Now that you've created your first function, let's add an output binding to the function that writes a message to a Storage queue.
Add messages to an Azure Storage queue using Functions
Feedback
Was this page helpful?
Additional resources