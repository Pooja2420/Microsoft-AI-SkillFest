Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Quickstart: Deploy an ASP.NET web app
Article
2025-04-24
28 contributors
In this article
In this quickstart, you learn how to create and deploy your first ASP.NET web app toAzure App Service. App Service supports various versions of .NET apps. It provides a highly scalable, self-patching web hosting service. ASP.NET web apps are cross-platform and can be hosted on Linux or Windows. When you're finished, you have an Azure resource group that includes an App Service hosting plan and an App Service with a deployed web application.
Alternatively, you can deploy an ASP.NET web app as part of aWindows or Linux container in App Service.
Tip
Find GitHub Copilot tips in the Visual Studio, Visual Studio Code, and Azure portal steps.
Prerequisites
.NET 8.0
.NET Framework 4.8
An Azure account with an active subscription.Create an account for free.
Visual Studio 2022with theASP.NET and web developmentworkload.
(Optional)To try GitHub Copilot, aGitHub Copilot account. A 30-day free trial is available.
An Azure account with an active subscription.Create an account for free.
Visual Studio 2022with theASP.NET and web developmentworkload. Ensure the optional checkbox.NET Framework project and item templatesis selected.
(Optional)To try GitHub Copilot, aGitHub Copilot account. A 30-day free trial is available.
If you already installed Visual Studio 2022:
Install the latest updates in Visual Studio by selectingHelp>Check for Updates.
Add the workload by selectingTools>Get Tools and Features.
An Azure account with an active subscription.Create an account for free.
Visual Studio Code.
TheAzure Toolsextension.
The latest .NET 8.0 SDK.
(Optional)To try GitHub Copilot, aGitHub Copilot account. A 30-day free trial is available.
An Azure account with an active subscription.Create an account for free.
TheAzure CLI.
The latest .NET 8.0 SDK.
(Optional)To try GitHub Copilot, aGitHub Copilot account. A 30-day free trial is available.
An Azure account with an active subscription.Create an account for free.
TheAzure PowerShell.
The latest .NET 8.0 SDK.
An Azure account with an active subscription.Create an account for free.
A GitHub accountCreate an account for free.
Skip to the end
You can quickly deploy the ASP.NET Core sample app in this tutorial using Azure Developer CLI and see it running in Azure. Just run the following commands in theAzure Cloud Shell, and follow the prompt:
mkdir dotnetcore-quickstart
cd dotnetcore-quickstart
azd init --template https://github.com/Azure-Samples/quickstart-deploy-aspnet-core-app-service.git
azd up
mkdir dotnetcore-quickstart
cd dotnetcore-quickstart
azd init --template https://github.com/Azure-Samples/quickstart-deploy-aspnet-core-app-service.git
azd up
And, to delete the resources:
azd down
azd down
Create an ASP.NET web app
.NET 8.0
.NET Framework 4.8
Open Visual Studio and then selectCreate a new project.
Open Visual Studio and then selectCreate a new project.
InCreate a new project, find and selectASP.NET Core Web App (Razor Pages), then selectNext.
InCreate a new project, find and selectASP.NET Core Web App (Razor Pages), then selectNext.
InConfigure your new project, name the applicationMyFirstAzureWebApp, and then selectNext.
InConfigure your new project, name the applicationMyFirstAzureWebApp, and then selectNext.

Select.NET 8.0 (Long Term Support).
Select.NET 8.0 (Long Term Support).
EnsureAuthentication typeis set toNone. SelectCreate.
EnsureAuthentication typeis set toNone. SelectCreate.

From the Visual Studio menu, selectDebug>Start Without Debuggingto run the web app locally. If you see a message asking you to trust a self-signed certificate, selectYes.
From the Visual Studio menu, selectDebug>Start Without Debuggingto run the web app locally. If you see a message asking you to trust a self-signed certificate, selectYes.

Open Visual Studio and then selectCreate a new project.
Open Visual Studio and then selectCreate a new project.
InCreate a new project, find and selectASP.NET Web Application (.NET Framework), then selectNext.
InCreate a new project, find and selectASP.NET Web Application (.NET Framework), then selectNext.
InConfigure your new project, name the applicationMyFirstAzureWebApp, and then selectCreate.
InConfigure your new project, name the applicationMyFirstAzureWebApp, and then selectCreate.

Select theMVCtemplate.
Select theMVCtemplate.
EnsureAuthenticationis set toNo Authentication. SelectCreate.
EnsureAuthenticationis set toNo Authentication. SelectCreate.

From the Visual Studio menu, selectDebug>Start Without Debuggingto run the web app locally.
From the Visual Studio menu, selectDebug>Start Without Debuggingto run the web app locally.

Tip
If you have a GitHub Copilot account, trygetting GitHub Copilot features for Visual Studio.
Open a terminal window on your machine to a working directory. Create a new .NET web app using thedotnet new webappcommand, and then change directories into the newly created app.dotnet new webapp -n MyFirstAzureWebApp --framework net8.0
cd MyFirstAzureWebApp
Open a terminal window on your machine to a working directory. Create a new .NET web app using thedotnet new webappcommand, and then change directories into the newly created app.
dotnet new webapp -n MyFirstAzureWebApp --framework net8.0
cd MyFirstAzureWebApp
dotnet new webapp -n MyFirstAzureWebApp --framework net8.0
cd MyFirstAzureWebApp
From the same terminal session, run the application locally using thedotnet runcommand.dotnet run --urls=https://localhost:5001/
From the same terminal session, run the application locally using thedotnet runcommand.
dotnet run --urls=https://localhost:5001/
dotnet run --urls=https://localhost:5001/
Open a web browser, and navigate to the app athttps://localhost:5001.You see the template ASP.NET Core 8.0 web app displayed in the page.
Open a web browser, and navigate to the app athttps://localhost:5001.
https://localhost:5001
You see the template ASP.NET Core 8.0 web app displayed in the page.

In this step, you fork a demo project to deploy.
.NET 8.0
.NET Framework 4.8
Go to the.NET 8.0 sample app.
Select theForkbutton in the upper right on the GitHub page.
Select theOwnerand leave the defaultRepository name.
SelectCreate fork.
Go to the.NET Framework 4.8 sample app.
Select theForkbutton in the upper right on the GitHub page.
Select theOwnerand leave the defaultRepository name.
SelectCreate fork.
Publish your web app
Follow these steps to create your App Service resources and publish your project:
InSolution Explorer, right-click theMyFirstAzureWebAppproject and selectPublish.
InSolution Explorer, right-click theMyFirstAzureWebAppproject and selectPublish.
InPublish, selectAzureand thenNext.
InPublish, selectAzureand thenNext.

Choose theSpecific target, eitherAzure App Service (Linux)orAzure App Service (Windows). SelectNext.ImportantWhen targeting ASP.NET Framework 4.8, useAzure App Service (Windows).
Choose theSpecific target, eitherAzure App Service (Linux)orAzure App Service (Windows). SelectNext.
Important
When targeting ASP.NET Framework 4.8, useAzure App Service (Windows).
Your options depend on whether you're signed in to Azure already and whether you have a Visual Studio account linked to an Azure account. Select eitherAdd an accountorSign into sign in to your Azure subscription. If you're already signed in, select the account you want.
Your options depend on whether you're signed in to Azure already and whether you have a Visual Studio account linked to an Azure account. Select eitherAdd an accountorSign into sign in to your Azure subscription. If you're already signed in, select the account you want.

To the right ofApp Service instances, select+.
To the right ofApp Service instances, select+.

ForSubscription, accept the subscription that is listed or select a new one from the drop-down list.
ForSubscription, accept the subscription that is listed or select a new one from the drop-down list.
ForResource group, selectNew. InNew resource group name, entermyResourceGroupand selectOK.
ForResource group, selectNew. InNew resource group name, entermyResourceGroupand selectOK.
ForHosting Plan, selectNew.
ForHosting Plan, selectNew.
In theHosting Plan: Create newdialog, enter the values specified in the following table:SettingSuggested valueDescriptionHosting PlanMyFirstAzureWebAppPlanName of the App Service plan.LocationWest EuropeThe datacenter where the web app is hosted.SizeChoose the lowest tier.Pricing tiersdefine hosting features.
In theHosting Plan: Create newdialog, enter the values specified in the following table:
InName, enter a unique app name. Include only charactersa-z,A-Z,0-9, and-. You can accept the automatically generated unique name.
InName, enter a unique app name. Include only charactersa-z,A-Z,0-9, and-. You can accept the automatically generated unique name.
a-z
A-Z
0-9
-
SelectCreateto create the Azure resources.When the process completes, the Azure resources are created for you. You're ready to publish your ASP.NET Core project.
SelectCreateto create the Azure resources.

When the process completes, the Azure resources are created for you. You're ready to publish your ASP.NET Core project.
In thePublishdialog, ensure your new App Service app is selected, then selectFinish, then selectClose. Visual Studio creates a publish profile for you for the selected App Service app.
In thePublishdialog, ensure your new App Service app is selected, then selectFinish, then selectClose. Visual Studio creates a publish profile for you for the selected App Service app.
In thePublishpage, selectPublish. If you see a warning message, selectContinue.Visual Studio builds, packages, and publishes the app to Azure, and then launches the app in the default browser..NET 8.0.NET Framework 4.8You see the ASP.NET Core 8.0 web app displayed in the page.You see the ASP.NET Framework 4.8 web app displayed in the page.
In thePublishpage, selectPublish. If you see a warning message, selectContinue.
Visual Studio builds, packages, and publishes the app to Azure, and then launches the app in the default browser.
.NET 8.0
.NET Framework 4.8
You see the ASP.NET Core 8.0 web app displayed in the page.

You see the ASP.NET Framework 4.8 web app displayed in the page.

Open Visual Studio Code from your project's root directory.code .
Open Visual Studio Code from your project's root directory.
code .
code .
If prompted, selectYes, I trust the authors.TipIf you have a GitHub Copilot account, trygetting GitHub Copilot features for Visual Studio Code.
If prompted, selectYes, I trust the authors.
Tip
If you have a GitHub Copilot account, trygetting GitHub Copilot features for Visual Studio Code.
In Visual Studio Code, selectView>Command Paletteto open theCommand Palette.
In Visual Studio Code, selectView>Command Paletteto open theCommand Palette.
Search for and selectAzure App Service: Create New Web App (Advanced).
Search for and selectAzure App Service: Create New Web App (Advanced).
Respond to the prompts as follows:If prompted, sign in to your Azure account.Select yourSubscription.SelectCreate new Web App... Advanced.ForEnter a globally unique name for the new web app, use a name that's unique across all of Azure. Valid characters area-z,0-9, and-. A good pattern is to use a combination of your company name and an app identifier.SelectCreate new resource groupand provide a name likemyResourceGroup.When prompted toSelect a runtime stack, select.NET 8 (LTS).Select an operating system (Windows or Linux).Select a location near you.SelectCreate new App Service plan, provide a name, and select theFree (F1)pricing tier.For the Application Insights resource, selectSkip for nowfor the Application Insights resource.When prompted, selectDeploy.SelectMyFirstAzureWebAppas the folder to deploy.SelectAdd Configwhen prompted.
Respond to the prompts as follows:
If prompted, sign in to your Azure account.
Select yourSubscription.
SelectCreate new Web App... Advanced.
ForEnter a globally unique name for the new web app, use a name that's unique across all of Azure. Valid characters area-z,0-9, and-. A good pattern is to use a combination of your company name and an app identifier.
a-z
0-9
-
SelectCreate new resource groupand provide a name likemyResourceGroup.
myResourceGroup
When prompted toSelect a runtime stack, select.NET 8 (LTS).
Select an operating system (Windows or Linux).
Select a location near you.
SelectCreate new App Service plan, provide a name, and select theFree (F1)pricing tier.
For the Application Insights resource, selectSkip for nowfor the Application Insights resource.
When prompted, selectDeploy.
SelectMyFirstAzureWebAppas the folder to deploy.
SelectAdd Configwhen prompted.
In the dialogAlways deploy the workspace "MyFirstAzureWebApp" to <app-name>", selectYesso that Visual Studio Code deploys to the same App Service app every time you're in that workspace.
In the dialogAlways deploy the workspace "MyFirstAzureWebApp" to <app-name>", selectYesso that Visual Studio Code deploys to the same App Service app every time you're in that workspace.
When publishing completes, selectBrowse Websitein the notification and selectOpenwhen prompted.You see the ASP.NET Core 8.0 web app displayed in the page.
When publishing completes, selectBrowse Websitein the notification and selectOpenwhen prompted.
You see the ASP.NET Core 8.0 web app displayed in the page.

Sign into your Azure account by using theaz logincommand and following the prompt:az loginIf theazcommand isn't recognized, ensure that you have the Azure CLI installed as described inPrerequisites.
Sign into your Azure account by using theaz logincommand and following the prompt:
az login
az login
If theazcommand isn't recognized, ensure that you have the Azure CLI installed as described inPrerequisites.
az
Useaz webapp upto deploy the code in your localMyFirstAzureWebAppdirectory:az webapp up --sku F1 --name <app-name> --os-type <os>Replace<app-name>with a name that's unique across all of Azure. Valid characters area-z,0-9, and-. A good pattern is to use a combination of your company name and an app identifier.The--sku F1argument creates the web app on theFreepricing tier. Omit this argument to use a faster premium tier, which incurs an hourly cost.Replace<os>with eitherlinuxorwindows.You can optionally include the argument--location <location-name>where<location-name>is an available Azure region. To get a list of allowable regions for your Azure account, run theaz account list-locationscommand.The command might take a few minutes to complete. While it runs, the command provides messages about creating the resource group, the App Service plan, and hosting app, configuring logging, then performing ZIP deployment. Then it shows a message with the app's URL:You can launch the app at http://<app-name>.azurewebsites.net
Useaz webapp upto deploy the code in your localMyFirstAzureWebAppdirectory:
az webapp up --sku F1 --name <app-name> --os-type <os>
az webapp up --sku F1 --name <app-name> --os-type <os>
Replace<app-name>with a name that's unique across all of Azure. Valid characters area-z,0-9, and-. A good pattern is to use a combination of your company name and an app identifier.
<app-name>
a-z
0-9
-
The--sku F1argument creates the web app on theFreepricing tier. Omit this argument to use a faster premium tier, which incurs an hourly cost.
--sku F1
Replace<os>with eitherlinuxorwindows.
<os>
linux
windows
You can optionally include the argument--location <location-name>where<location-name>is an available Azure region. To get a list of allowable regions for your Azure account, run theaz account list-locationscommand.
--location <location-name>
<location-name>
The command might take a few minutes to complete. While it runs, the command provides messages about creating the resource group, the App Service plan, and hosting app, configuring logging, then performing ZIP deployment. Then it shows a message with the app's URL:
You can launch the app at http://<app-name>.azurewebsites.net
You can launch the app at http://<app-name>.azurewebsites.net
Open a web browser and navigate to the URL. You see the ASP.NET Core 8.0 web app displayed in the page.
Open a web browser and navigate to the URL. You see the ASP.NET Core 8.0 web app displayed in the page.

Note
We recommend Azure PowerShell for creating apps on the Windows hosting platform. To create apps on Linux, use a different tool, such asAzure CLI.
Sign into your Azure account by using theConnect-AzAccountcommand and following the prompt:Connect-AzAccount
Sign into your Azure account by using theConnect-AzAccountcommand and following the prompt:
Connect-AzAccount
Connect-AzAccount
Create a new app by using theNew-AzWebAppcommand:New-AzWebApp -ResourceGroupName myResourceGroup -Name <app-name> -Location westeuropeReplace<app-name>with a name that's unique across all of Azure. Valid characters area-z,0-9, and-A combination of your company name and an app identifier is a good pattern.You can optionally include the parameter-Location <location-name>where<location-name>is an available Azure region. To get a list of allowable regions for your Azure account, run theGet-AzLocationcommand.The command might take a few minutes to complete. The command creates a resource group, an App Service plan, and the App Service resource.
Create a new app by using theNew-AzWebAppcommand:
New-AzWebApp -ResourceGroupName myResourceGroup -Name <app-name> -Location westeurope
New-AzWebApp -ResourceGroupName myResourceGroup -Name <app-name> -Location westeurope
Replace<app-name>with a name that's unique across all of Azure. Valid characters area-z,0-9, and-A combination of your company name and an app identifier is a good pattern.
<app-name>
a-z
0-9
-
You can optionally include the parameter-Location <location-name>where<location-name>is an available Azure region. To get a list of allowable regions for your Azure account, run theGet-AzLocationcommand.
-Location <location-name>
<location-name>
The command might take a few minutes to complete. The command creates a resource group, an App Service plan, and the App Service resource.
From the application root folder, run thedotnet publishcommand to prepare your localMyFirstAzureWebAppapplication for deployment:dotnet publish --configuration Release
From the application root folder, run thedotnet publishcommand to prepare your localMyFirstAzureWebAppapplication for deployment:
dotnet publish --configuration Release
dotnet publish --configuration Release
Change to the release directory and create a zip file from the contents:cd bin\Release\net8.0\publish
Compress-Archive -Path * -DestinationPath deploy.zip
Change to the release directory and create a zip file from the contents:
cd bin\Release\net8.0\publish
Compress-Archive -Path * -DestinationPath deploy.zip
cd bin\Release\net8.0\publish
Compress-Archive -Path * -DestinationPath deploy.zip
Publish the zip file to the Azure app using thePublish-AzWebAppcommand:Publish-AzWebApp -ResourceGroupName myResourceGroup -Name <app-name> -ArchivePath (Get-Item .\deploy.zip).FullName -ForceNote-ArchivePathneeds the full path of the zip file.
Publish the zip file to the Azure app using thePublish-AzWebAppcommand:
Publish-AzWebApp -ResourceGroupName myResourceGroup -Name <app-name> -ArchivePath (Get-Item .\deploy.zip).FullName -Force
Publish-AzWebApp -ResourceGroupName myResourceGroup -Name <app-name> -ArchivePath (Get-Item .\deploy.zip).FullName -Force
Note
-ArchivePathneeds the full path of the zip file.
-ArchivePath
Open a web browser and navigate to the URL. You see the ASP.NET Core 8.0 web app displayed in the page.
Open a web browser and navigate to the URL. You see the ASP.NET Core 8.0 web app displayed in the page.

Typeapp servicesin the search. UnderServices, selectApp Services.
Typeapp servicesin the search. UnderServices, selectApp Services.

In theApp Servicespage, selectCreate>Web App.
In theApp Servicespage, selectCreate>Web App.
In theBasicstab:.NET 8.0.NET Framework 4.8UnderResource group, selectCreate new. EntermyResourceGroupfor the name.UnderName, enter a globally unique name for your web app.UnderPublish, selectCode.UnderRuntime stackselect.NET 8 (LTS).UnderOperating System, selectWindows. If you selectLinux, you can't configure GitHub deployment in the next step, but you can still do it after you create the app in theDeployment Centerpage.Select aRegionyou want to serve your app from.UnderApp Service Plan, selectCreate newand typemyAppServicePlanfor the name.UnderPricing plan, selectFree F1.UnderResource group, selectCreate new. EntermyResourceGroupfor the name.UnderName, enter a globally unique name for your web app.UnderPublish, selectCode.UnderRuntime stackselectASP.NET V4.8.Select anOperating System, and aRegionyou want to serve your app from.UnderApp Service Plan, selectCreate newand typemyAppServicePlanfor the name.UnderPricing plan, selectFree F1.
In theBasicstab:
.NET 8.0
.NET Framework 4.8
UnderResource group, selectCreate new. EntermyResourceGroupfor the name.
UnderName, enter a globally unique name for your web app.
UnderPublish, selectCode.
UnderRuntime stackselect.NET 8 (LTS).
UnderOperating System, selectWindows. If you selectLinux, you can't configure GitHub deployment in the next step, but you can still do it after you create the app in theDeployment Centerpage.
Select aRegionyou want to serve your app from.
UnderApp Service Plan, selectCreate newand typemyAppServicePlanfor the name.
UnderPricing plan, selectFree F1.

UnderResource group, selectCreate new. EntermyResourceGroupfor the name.
UnderName, enter a globally unique name for your web app.
UnderPublish, selectCode.
UnderRuntime stackselectASP.NET V4.8.
Select anOperating System, and aRegionyou want to serve your app from.
UnderApp Service Plan, selectCreate newand typemyAppServicePlanfor the name.
UnderPricing plan, selectFree F1.

Select theDeploymenttab at the top of the page
Select theDeploymenttab at the top of the page
UnderGitHub Actions settings, setContinuous deploymenttoEnable.
UnderGitHub Actions settings, setContinuous deploymenttoEnable.
UnderGitHub Actions details, authenticate with your GitHub account, and select the following options:.NET 8.0.NET Framework 4.8ForOrganization, select the organization where you forked the demo project.ForRepository, select thedotnetcore-docs-hello-worldproject.ForBranch, selectmain.ForOrganization, select the organization where you forked the demo project.ForRepository, select theapp-service-web-dotnet-get-startedproject.ForBranch, selectmain.NoteBy default, the resource creationdisables basic authentication. It creates the GitHub Actions deployment by using auser-assigned identity. If you get a permissions error during resource creation, your Azure account might not haveenough permissions. You canconfigure GitHub Actions deployment laterwith an identity generated for you by an Azure administrator, or you enable basic authentication instead.
UnderGitHub Actions details, authenticate with your GitHub account, and select the following options:
.NET 8.0
.NET Framework 4.8
ForOrganization, select the organization where you forked the demo project.
ForRepository, select thedotnetcore-docs-hello-worldproject.
ForBranch, selectmain.

ForOrganization, select the organization where you forked the demo project.
ForRepository, select theapp-service-web-dotnet-get-startedproject.
ForBranch, selectmain.

Note
By default, the resource creationdisables basic authentication. It creates the GitHub Actions deployment by using auser-assigned identity. If you get a permissions error during resource creation, your Azure account might not haveenough permissions. You canconfigure GitHub Actions deployment laterwith an identity generated for you by an Azure administrator, or you enable basic authentication instead.
SelectReview + createat the bottom of the page.
SelectReview + createat the bottom of the page.
After validation runs, selectCreateat the bottom of the page.
After validation runs, selectCreateat the bottom of the page.
After deployment is complete, selectGo to resource.
After deployment is complete, selectGo to resource.

To browse to the created app, select thedefault domainin theOverviewpage. If you see the messageYour web app is running and waiting for your content, GitHub deployment is still running. Wait a couple of minutes and refresh the page..NET 8.0.NET Framework 4.8
To browse to the created app, select thedefault domainin theOverviewpage. If you see the messageYour web app is running and waiting for your content, GitHub deployment is still running. Wait a couple of minutes and refresh the page.
.NET 8.0
.NET Framework 4.8


Update the app and redeploy
Make a change toIndex.cshtmland redeploy to see the changes. In the .NET 8.0 template, it's in thePagesfolder. In the .NET Framework 4.8 template, it's in theViews/Homefolder. Follow these steps to update and redeploy your web app:
InSolution Explorer, under your project, double-clickPages>Index.cshtmlto open.
InSolution Explorer, under your project, double-clickPages>Index.cshtmlto open.
Replace the first<div>element with the following code:<div class="jumbotron">
    <h1>.NET ð Azure</h1>
    <p class="lead">Example .NET app to Azure App Service.</p>
</div>TipWith GitHub Copilot enabled in Visual Studio, try the following steps:Select the<div>element and typeAlt+/.Ask Copilot, "Change to a Bootstrap card that says .NET ð Azure."Save your changes.
Replace the first<div>element with the following code:
<div>
<div class="jumbotron">
    <h1>.NET ð Azure</h1>
    <p class="lead">Example .NET app to Azure App Service.</p>
</div>
<div class="jumbotron">
    <h1>.NET ð Azure</h1>
    <p class="lead">Example .NET app to Azure App Service.</p>
</div>
Tip
With GitHub Copilot enabled in Visual Studio, try the following steps:
Select the<div>element and typeAlt+/.
<div>
Ask Copilot, "Change to a Bootstrap card that says .NET ð Azure."
Save your changes.
To redeploy to Azure, right-click theMyFirstAzureWebAppproject inSolution Explorerand selectPublish.
To redeploy to Azure, right-click theMyFirstAzureWebAppproject inSolution Explorerand selectPublish.
In thePublishsummary page, selectPublish.When publishing completes, Visual Studio launches a browser to the URL of the web app..NET 8.0.NET Framework 4.8You see the updated ASP.NET Core 8.0 web app displayed in the page.You see the updated ASP.NET Framework 4.8 web app displayed in the page.
In thePublishsummary page, selectPublish.
When publishing completes, Visual Studio launches a browser to the URL of the web app.
.NET 8.0
.NET Framework 4.8
You see the updated ASP.NET Core 8.0 web app displayed in the page.

You see the updated ASP.NET Framework 4.8 web app displayed in the page.

OpenPages/Index.cshtml.
OpenPages/Index.cshtml.
Replace the first<div>element with the following code:<div class="jumbotron">
    <h1>.NET ð Azure</h1>
    <p class="lead">Example .NET app to Azure App Service.</p>
</div>TipTry this approach with GitHub Copilot:Select the entire<div>element and select.Ask Copilot, "Change to a Bootstrap card that says .NET ð Azure."Save your changes.
Replace the first<div>element with the following code:
<div>
<div class="jumbotron">
    <h1>.NET ð Azure</h1>
    <p class="lead">Example .NET app to Azure App Service.</p>
</div>
<div class="jumbotron">
    <h1>.NET ð Azure</h1>
    <p class="lead">Example .NET app to Azure App Service.</p>
</div>
Tip
Try this approach with GitHub Copilot:
Select the entire<div>element and select.
<div>
Ask Copilot, "Change to a Bootstrap card that says .NET ð Azure."
Save your changes.
In Visual Studio Code, open theCommand Palette:Ctrl+Shift+P.
In Visual Studio Code, open theCommand Palette:Ctrl+Shift+P.
Search for and selectAzure App Service: Deploy to Web App.
Search for and selectAzure App Service: Deploy to Web App.
Select the subscription and the web app you used earlier.
Select the subscription and the web app you used earlier.
When prompted, selectDeploy.
When prompted, selectDeploy.
When publishing completes, selectBrowse Websitein the notification.You see the updated ASP.NET Core 8.0 web app displayed in the page.
When publishing completes, selectBrowse Websitein the notification.
You see the updated ASP.NET Core 8.0 web app displayed in the page.

Tip
To see how Visual Studio Code with GitHub Copilot helps improve your web development experience, see the Visual Studio Code steps.
In the local directory, open thePages/Index.cshtmlfile. Replace the first<div>element:
<div>
<div class="jumbotron">
    <h1>.NET ð Azure</h1>
    <p class="lead">Example .NET app to Azure App Service.</p>
</div>
<div class="jumbotron">
    <h1>.NET ð Azure</h1>
    <p class="lead">Example .NET app to Azure App Service.</p>
</div>
Save your changes, then redeploy the app using theaz webapp upcommand again and replace<os>with eitherlinuxorwindows.
az webapp up
<os>
linux
windows
az webapp up --os-type <os>
az webapp up --os-type <os>
This command uses values that are cached locally in the.azure/configfile, including the app name, resource group, and App Service plan.
After deployment completes, switch back to the browser window that opened in theBrowse to the appstep, and refresh.
You see the updated ASP.NET Core 8.0 web app displayed in the page.

In the local directory, open thePages/Index.cshtmlfile. Replace the first<div>element:<div class="jumbotron">
    <h1>.NET ð Azure</h1>
    <p class="lead">Example .NET app to Azure App Service.</p>
</div>
In the local directory, open thePages/Index.cshtmlfile. Replace the first<div>element:
<div>
<div class="jumbotron">
    <h1>.NET ð Azure</h1>
    <p class="lead">Example .NET app to Azure App Service.</p>
</div>
<div class="jumbotron">
    <h1>.NET ð Azure</h1>
    <p class="lead">Example .NET app to Azure App Service.</p>
</div>
From the application root folder, prepare your localMyFirstAzureWebAppapplication for deployment using thedotnet publishcommand:dotnet publish --configuration Release
From the application root folder, prepare your localMyFirstAzureWebAppapplication for deployment using thedotnet publishcommand:
dotnet publish --configuration Release
dotnet publish --configuration Release
Change to the release directory and create a zip file from the contents:cd bin\Release\net8.0\publish
Compress-Archive -Path * -DestinationPath deploy.zip -Force
Change to the release directory and create a zip file from the contents:
cd bin\Release\net8.0\publish
Compress-Archive -Path * -DestinationPath deploy.zip -Force
cd bin\Release\net8.0\publish
Compress-Archive -Path * -DestinationPath deploy.zip -Force
Publish the zip file to the Azure app using thePublish-AzWebAppcommand:Publish-AzWebApp -ResourceGroupName myResourceGroup -Name <app-name> -ArchivePath (Get-Item .\deploy.zip).FullName -ForceNote-ArchivePathneeds the full path of the zip file.
Publish the zip file to the Azure app using thePublish-AzWebAppcommand:
Publish-AzWebApp -ResourceGroupName myResourceGroup -Name <app-name> -ArchivePath (Get-Item .\deploy.zip).FullName -Force
Publish-AzWebApp -ResourceGroupName myResourceGroup -Name <app-name> -ArchivePath (Get-Item .\deploy.zip).FullName -Force
Note
-ArchivePathneeds the full path of the zip file.
-ArchivePath
After deployment completes, switch back to the browser window that opened in theBrowse to the appstep, and refresh.You see the updated ASP.NET Core 8.0 web app displayed in the page.
After deployment completes, switch back to the browser window that opened in theBrowse to the appstep, and refresh.
You see the updated ASP.NET Core 8.0 web app displayed in the page.

Browse to your GitHub fork of the sample code.
Browse to your GitHub fork of the sample code.
On your repo page, create a codespace by selectingCode>Create codespace on main..NET 8.0.NET Framework 4.8TipIf you have a GitHub Copilot account, trygetting GitHub Copilot features in your codespace.
On your repo page, create a codespace by selectingCode>Create codespace on main.
.NET 8.0
.NET Framework 4.8


Tip
If you have a GitHub Copilot account, trygetting GitHub Copilot features in your codespace.
OpenIndex.cshtml..NET 8.0.NET Framework 4.8Index.cshtml is located in thePagesfolder.Index.cshtml is located in theaspnet-get-started/Views/Homefolder
OpenIndex.cshtml.
.NET 8.0
.NET Framework 4.8
Index.cshtml is located in thePagesfolder.

Index.cshtml is located in theaspnet-get-started/Views/Homefolder

Replace the first<div>element with the following code:<div class="jumbotron">
    <h1>.NET ð Azure</h1>
    <p class="lead">Example .NET app to Azure App Service.</p>
</div>The changes are automatically saved.TipTry this approach with GitHub Copilot:Select the entire<div>element and select.Ask Copilot, "Change to a Bootstrap card that says .NET ð Azure."
Replace the first<div>element with the following code:
<div>
<div class="jumbotron">
    <h1>.NET ð Azure</h1>
    <p class="lead">Example .NET app to Azure App Service.</p>
</div>
<div class="jumbotron">
    <h1>.NET ð Azure</h1>
    <p class="lead">Example .NET app to Azure App Service.</p>
</div>
The changes are automatically saved.
Tip
Try this approach with GitHub Copilot:
Select the entire<div>element and select.
<div>
Ask Copilot, "Change to a Bootstrap card that says .NET ð Azure."
From theSource Controlmenu, enter a commit message such asModify homepage. Then, selectCommitand confirm staging the changes by selectingYes..NET 8.0.NET Framework 4.8TipLet GitHub Copilot create a commit message for you by selectingin the message box.
From theSource Controlmenu, enter a commit message such asModify homepage. Then, selectCommitand confirm staging the changes by selectingYes.
Modify homepage
.NET 8.0
.NET Framework 4.8


Tip
Let GitHub Copilot create a commit message for you by selectingin the message box.
SelectSync changes 1, then confirm by selectingOK.
SelectSync changes 1, then confirm by selectingOK.
It takes a few minutes for the deployment to run. To view the progress, navigate tohttps://github.com/<your-github-alias>/dotnetcore-docs-hello-world/actions.
It takes a few minutes for the deployment to run. To view the progress, navigate tohttps://github.com/<your-github-alias>/dotnetcore-docs-hello-world/actions.
https://github.com/<your-github-alias>/dotnetcore-docs-hello-world/actions
Return to the browser window that opened during theBrowse to the appstep, and refresh the page..NET 8.0.NET Framework 4.8You see the updated ASP.NET Core 8.0 web app displayed in the page.You see the updated ASP.NET Framework 4.8 web app displayed in the page.
Return to the browser window that opened during theBrowse to the appstep, and refresh the page.
.NET 8.0
.NET Framework 4.8
You see the updated ASP.NET Core 8.0 web app displayed in the page.

You see the updated ASP.NET Framework 4.8 web app displayed in the page.

Manage the Azure app
To manage your web app, go to theAzure portal, and search for and selectApp Services.

On theApp Servicespage, select the name of your web app.

TheOverviewpage for your web app, contains options for basic management like browse, stop, start, restart, and delete. The left menu provides further pages for configuring your app.

Clean up resources
In the preceding steps, you created Azure resources in a resource group. If you don't expect to need these resources in the future, you can delete them by deleting the resource group.
From your web app'sOverviewpage in the Azure portal, select themyResourceGrouplink underResource group.
On the resource group page, make sure that the listed resources are the ones you want to delete.
SelectDelete resource group, typemyResourceGroupin the text box, and then selectDelete.
Confirm again by selectingDelete.
Clean up resources
In the preceding steps, you created Azure resources in a resource group. If you don't expect to need these resources in the future, you can delete them by deleting the resource group.
From your web app'sOverviewpage in the Azure portal, select themyResourceGrouplink underResource group.
On the resource group page, make sure that the listed resources are the ones you want to delete.
SelectDelete resource group, typemyResourceGroupin the text box, and then selectDelete.
Confirm again by selectingDelete.
In the preceding steps, you created Azure resources in a resource group. If you don't expect to need these resources in the future, delete the resource group by running the following command in the Cloud Shell:
az group delete
az group delete
For your convenience, theaz webapp upcommand that you ran earlier in this project saves the resource group name as the default value whenever you runazcommands from this project.
az
Clean up resources
In the preceding steps, you created Azure resources in a resource group. If you don't expect to need these resources in the future, delete the resource group by running the following PowerShell command:
Remove-AzResourceGroup -Name myResourceGroup
Remove-AzResourceGroup -Name myResourceGroup
This command might take a minute to run.
Clean up resources
In the preceding steps, you created Azure resources in a resource group. If you don't expect to need these resources in the future, you can delete them by deleting the resource group.
From your web app'sOverviewpage in the Azure portal, select themyResourceGrouplink underResource group.
On the resource group page, make sure that the listed resources are the ones you want to delete.
SelectDelete resource group, typemyResourceGroupin the text box, and then selectDelete.
Confirm again by selectingDelete.
Next steps
.NET 8.0
.NET Framework 4.8
Advance to the next article to learn how to create a .NET Core app and connect it to a SQL Database:
Tutorial: ASP.NET Core app with SQL database
App Template: ASP.NET Core app with SQL database and App Insights deployed using CI/CD GitHub Actions
Configure ASP.NET Core app
Advance to the next article to learn how to create a .NET Framework app and connect it to a SQL Database:
Tutorial: ASP.NET app with SQL database
Configure ASP.NET Framework app
Secure with custom domain and certificate
Feedback
Was this page helpful?
Additional resources