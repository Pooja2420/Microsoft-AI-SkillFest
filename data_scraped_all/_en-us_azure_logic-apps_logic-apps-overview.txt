Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
What is Azure Logic Apps?
Article
2025-01-29
14 contributors
In this article
Azure Logic Apps is a cloud platform where you can create and run automated workflows in, across, and outside the software ecosystems in your enterprise or organization. This platform greatly reduces or removes the need to write code when your workflows must connect and work with resources from different components, such as services, systems, apps, and data sources.
Azure Logic Apps includes low-code-no-code tools for you to work with legacy, modern, and cutting-edge systems that exist in the cloud, on premises, or in hybrid environments. For example, you use a visual designer along with prebuilt operations to make building workflows as easy as possible. These prebuilt operations act as the building blocks in your workflows by giving you access to various resources and completing common tasks, such as getting data, sending data, and managing data. With Azure Logic Apps, you can build integration solutions that scale and support the business scenarios for your enterprise or organization's needs.
The following examples describe only a sample of tasks, business processes, and workloads that you can automate with Azure Logic Apps:
Schedule and send email notifications using Office 365 when a specific event happens, for example, a new file is uploaded.
Route and process customer orders across on-premises systems and cloud services.
Move uploaded files from an SFTP or FTP server to Azure Blob Storage.
Monitor social media activity, analyze the sentiment, and create alerts or tasks for items that need review.
The following example workflow uses conditions and switches to determine the next action. Suppose you have an order system, and your workflow processes incoming orders. You want to manually review orders above a certain cost. Your workflow already has steps that determine the cost from an incoming order. So, you add a condition that compares each order to your cost threshold, for example:

For more information about the logic behind this workflow, seeHow logic apps work.
Tip
To learn more, you can ask Azure Copilot these questions:
What problems can I solve with Azure Logic Apps?
What benefits does Azure Logic Apps provide?
To find Azure Copilot, on theAzure portaltoolbar, selectCopilot.
To try creating your first workflow, seeGet started. To continue learning more, watch this video:
For more information, visitAzure Logic Appsand otherAzure Integration Serviceson the Microsoft Azure website.
Why use Azure Logic Apps
The Azure Logic Apps platform provides1,400+ prebuilt connectorsthat you can use to integrate your workflows with various services, systems, apps, and data. This constantly expanding connector ecosystem helps you reduce or eliminate the work required to access your resources. Instead, you can focus more on designing and developing the business logic and functionality required for your solutions to meet your business needs.
To communicate with any service endpoint, run your own code, control your workflow structure, manipulate data, or connect to commonly used resources with increased speed, capacity, and throughput, you can usebuilt-in connector operations. These operations natively run on the Azure Logic Apps runtime, rather than in Azure, for better performance.
To access and work with resources created and managed using services such as Azure, Microsoft, external web apps and services, or on-premises systems, you can usemanaged connector operations. These operations are hosted and run in global, multitenant Azure. You can choose from1,400+ connectors, for example:
Azure services such as Blob Storage and Service Bus
Office 365 services such as Outlook, Excel, and SharePoint
Database servers such as SQL and Oracle
Enterprise systems such as SAP and IBM MQ
File shares such as FTP and SFTP
For more information, see the following articles:
What are connectors in Azure Logic Apps
Built-in connectors
Managed connectors
When you build workflows with Azure Logic Apps, you usually don't have to write any code. However, if you have to create and run your own code, Azure Logic Apps supports this capability. For example, in workflows that run in multitenant Azure Logic Apps, you can write and run JavaScript code snippets directly within your workflow. For more complex and structured code, you can create and call functions from your workflows when you use the Azure Functions platform. For workflows that run in single-tenant Azure Logic Apps, App Service Environment (ASE) v3, or partially connected environments, you can write and run JavaScript code snippets, .NET code, C# scripts, and PowerShell scripts directly within your workflow.
If your workflow needs to interact with events from other Azure services, custom apps, or other solutions, you can monitor, route, and publish events by usingAzure Event GridorAzure Event Hubs.
For more information, see the following articles:
Add and run JavaScript code inline with workflows
Azure Functions overviewandCall Azure Functions from workflows
Create and run .NET code from Standard workflows
Add and run C# scripts
Add and run PowerShell scripts
Azure Logic Apps is fully managed by Microsoft Azure, which frees you from worrying about hosting, scaling, managing, monitoring, and maintaining solutions built with these services. When you use these capabilities to create"serverless" apps and solutions, you can focus more on the building the business logic and functionality. Serverless platforms automatically scale to meet your needs, make integrations work faster, and help you build robust cloud apps using little to no code.
To learn how other companies improved their agility and increased focus on their core businesses when they combined Azure Logic Apps with other Azure services and Microsoft products,check out these customer stories.

Key terms
The following table briefly defines core terminology and concepts in Azure Logic Apps.
How fast can I ramp up with Azure Logic Apps?
You can start small with your current systems and services, and then grow incrementally at your own pace. When you're ready, Azure Logic Apps helps you implement and scale up to more mature integration scenarios by providing the following capabilities and benefits.
Visually create and edit workflows with easy-to-use tools
Save time and simplify complex processes by using the visual design tools in Azure Logic Apps. Create your workflows from start to finish by using the Azure Logic Apps workflow designer in the Azure portal or Visual Studio Code. Just start your workflow with a trigger, and add any number of actions from theconnectors gallery.
Connect different systems across various environments
Some patterns and processes are easy to describe but hard to implement in code. Azure Logic Apps helps you seamlessly connect disparate systems across cloud, on-premises, and hybrid environments. For example, you can connect a cloud marketing solution to an on-premises billing system, or centralize messaging across APIs and systems using Azure Service Bus. Azure Logic Apps provides a fast, reliable, and consistent way to deliver reusable and reconfigurable solutions for these scenarios.

Create and deploy to different environments
Based on your scenario, solution requirements, and desired capabilities, choose whether to create a Consumption or Standard logic app workflow. Based on this choice, the workflow runs in either multitenant Azure Logic Apps, single-tenant Azure Logic Apps, or an App Service Environment (v3). With single-tenant Azure Logic Apps, your workflows can more easily access resources protected by Azure virtual networks. If you create single tenant-based workflows using Azure Arc enabled Logic Apps, you can also run workflows in containers. For more information, seeSingle-tenant versus multitenant in Azure Logic AppsandWhat is Arc enabled Logic Apps?
The following table briefly summarizes differences between a Consumption and Standard logic app workflow. You'll also learn the differences between the multitenant environment, single-tenant environment, and App Service Environment v3 (ASEv3) for deploying, hosting, and running your logic app workflows.
First-class support for enterprise integration and B2B scenarios
Businesses and organizations electronically communicate with each other by using industry-standard but different message protocols and formats, such as EDIFACT, AS2, X12, and RosettaNet. By using theenterprise integration capabilitiessupported by Azure Logic Apps, you can create workflows that transform message formats used by trading partners into formats that your organization's systems can interpret and process. Azure Logic Apps handles these exchanges smoothly and securely with encryption and digital signatures. For B2B integration scenarios, Azure Logic Apps includes capabilities fromBizTalk Server. To define business-to-business (B2B) artifacts, you create anintegration accountwhere you store these artifacts. After you link this account to your logic app resource, your workflow can use these B2B artifacts and exchange messages that comply with Electronic Data Interchange (EDI) and Enterprise Application Integration (EAI) standards.
For more information, see the following documentation:
Integrate and build offMicrosoft BizTalk Server,Azure Service Bus,Azure Functions,Azure API Management, and more.
Integrate and build offMicrosoft BizTalk Server,Azure Service Bus,Azure Functions,Azure API Management, and more.
Exchange messages usingEDIFACT,AS2,X12, andRosettaNetprotocols.
Exchange messages usingEDIFACT,AS2,X12, andRosettaNetprotocols.
ProcessXML messagesandflat files.
ProcessXML messagesandflat files.
Create anintegration accountto store and manage B2B artifacts, such astrading partners,agreements,maps,schemas, and more.
Create anintegration accountto store and manage B2B artifacts, such astrading partners,agreements,maps,schemas, and more.
For example, if you use Microsoft BizTalk Server, your workflows can communicate with your BizTalk Server using theBizTalk Server connector. You can then run or extend BizTalk-like operations in your workflows by usingintegration account connectors. In the other direction, BizTalk Server can communicate with your workflows by using theMicrosoft BizTalk Server Adapter for Azure Logic Apps. Learn how toset up and use the BizTalk Server Adapterin your BizTalk Server.
Write once, reuse often
Create your logic app workflows as Azure Resource Manager templates so that you canset up and automate deploymentsacross multiple environments and regions.
Built-in extensibility
If no suitable connector is available to run the code you want, you can create and run code snippets from your workflow by using theInline Codeaction forJavaScriptorC# scripts, you can useAzure Functions. You can also createAPIsandcustom connectorsthat you can call from your workflows.
Direct access to resources in Azure virtual networks
Logic app workflows can access secured resources such as virtual machines, other services, and systems that are inside anAzure virtual networkwhen you useAzure Logic Apps (Standard). Azure Logic Apps (Standard) is a single-tenant instance Azure Logic Apps that uses dedicated resources and runs separately from global, multitenant Azure Logic Apps.
Hosting and running logic app workflows in your own dedicated instance helps reduce the impact that other Azure tenants might have on app performance, also known as the"noisy neighbors" effect.
Azure Logic Apps (Standard) provides the following benefits:
Your own static IP addresses, which are separate from the static IP addresses that logic apps share in multitenant Azure Logic Apps. You can also set up a single public, static, and predictable outbound IP address to communicate with destination systems. That way, you don't have to set up extra firewall openings at those destination systems.
Your own static IP addresses, which are separate from the static IP addresses that logic apps share in multitenant Azure Logic Apps. You can also set up a single public, static, and predictable outbound IP address to communicate with destination systems. That way, you don't have to set up extra firewall openings at those destination systems.
Increased limits on run duration, storage retention, throughput, HTTP request and response timeouts, message sizes, and custom connector requests. For more information, reviewLimits and configuration for Azure Logic Apps.
Increased limits on run duration, storage retention, throughput, HTTP request and response timeouts, message sizes, and custom connector requests. For more information, reviewLimits and configuration for Azure Logic Apps.

How logic apps work
A logic app workflow always starts with a singletrigger. The trigger fires when a condition is met, for example, when a specific event happens or when data meets specific criteria. Many triggers includescheduling capabilitiesthat control how often your workflow runs. After the trigger fires, one or moreactionsrun operations that process, handle, or convert data that travels through the workflow, or that advance the workflow to the next step.
Based on the earlier example, the following section explains the logic behind the example workflow, which processes incoming orders for an order system. As a reminder, your goal is to manually review orders above a certain cost. The workflow already has steps that determine the cost from an incoming order. So, you add a condition that compares each order to your cost threshold, for example:
If the order is below a certain amount, the condition is false. So, the workflow processes the order.
If the order is below a certain amount, the condition is false. So, the workflow processes the order.
If the condition is true, the workflow sends an email for manual review. A switch determines the next step.If the reviewer approves, the workflow continues to process the order.If the reviewer escalates, the workflow sends an escalation email to get more information about the order.If the escalation requirements are met, the response condition is true. So, the order is processed.If the response condition is false, an email is sent regarding the problem.
If the condition is true, the workflow sends an email for manual review. A switch determines the next step.
If the reviewer approves, the workflow continues to process the order.
If the reviewer approves, the workflow continues to process the order.
If the reviewer escalates, the workflow sends an escalation email to get more information about the order.If the escalation requirements are met, the response condition is true. So, the order is processed.If the response condition is false, an email is sent regarding the problem.
If the reviewer escalates, the workflow sends an escalation email to get more information about the order.
If the escalation requirements are met, the response condition is true. So, the order is processed.
If the response condition is false, an email is sent regarding the problem.

Azure Logic Apps uses the "at-least-once" message delivery semantic. Rarely does the service deliver a message more than one time, but no messages are lost. If your business doesn't handle or can't handle duplicate messages, you need to implementidempotence, which is the capability to accept identical or duplicate messages, while preserving data integrity and system stability. That way, repeats of the same operation don't change the result after the first execution.
You can visually create workflows using the Azure Logic Apps workflow designer in the Azure portal or Visual Studio Code. Each workflow also has an underlying definition that uses JavaScript Object Notation (JSON) format. If you prefer, you can edit workflows by changing this JSON definition. For some creation and management tasks, Azure Logic Apps provides Azure PowerShell and Azure CLI command support. For automated deployment, Azure Logic Apps supports Azure Resource Manager templates.
Pricing options
Each logic app hosting option (multitenant, single-tenant, App Service Environment (ASE) v3, or partially connected environment) has a differentpricing model. For example, multitenant Consumption logic app workflows follow the Consumption pricing model, while single-tenant Standard logic app workflows follow the Standard pricing model. For specific pricing details, seeAzure Logic Apps pricing.
How does Azure Logic Apps differ from Functions, WebJobs, and Power Automate?
All these services help you connect and bring together disparate systems. Each service has their advantages and benefits, so combining their capabilities is the best way to quickly build a scalable, full-featured integration system. For more information, seeChoose between Azure Logic Apps, Azure Functions, Azure WebJobs, and Microsoft Power Automate.
How does Azure Logic Apps differ from Azure Automation Runbooks?
Azure Automation Runbooksprovide a lightweight and cost-effective solution for straightforward remediations, such as restarting virtual machines. In contrast, the Azure Logic Apps platform is ideal for automated workflows or orchestrations that involve multiple services, systems, apps, and data. These scenarios also include workloads that run custom code or that require complex logic that uses control structures such as loops, branching, conditions, and more.
Get started
Before you can start trying out Azure Logic Apps, you need an Azure account and subscription. If you don't have a subscription,sign up for a free Azure account.
When you're ready, get started with one or more of the following how-to guides for Azure Logic Apps:
Create a multitenant Consumption logic app workflow with the Azure portal
Create a multitenant Consumption logic app workflow with Visual Studio Code
Create a single-tenant Standard logic app workflow with the Azure portal
Create a single-tenant Standard logic app workflow with Visual Studio Code
Next steps
Quickstart: Create an example Consumption logic app workflow in multitenant Azure Logic Apps in the Azure portal
Feedback
Was this page helpful?
Additional resources