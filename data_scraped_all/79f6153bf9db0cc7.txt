Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
What is Bicep?
Article
2025-03-25
9 contributors
In this article
Bicep is a domain-specific language that uses declarative syntax to deploy Azure resources. In a Bicep file, you define the infrastructure you want to deploy to Azure and then use that file throughout the development lifecycle to repeatedly deploy that infrastructure. Your resources are deployed in a consistent manner.
Bicep provides concise syntax, reliable type safety, and support for reusing code. Bicep offers an optimal authoring experience for yourinfrastructure-as-codesolutions in Azure.
Benefits of Bicep
Bicep provides the following advantages:
Support for all resource types and API versions: Bicep immediately supports all preview and GA versions for Azure services. As soon as a resource provider introduces new resource types and API versions, you can use them in your Bicep file. You don't need to wait for tools to be updated before using new services.
Support for all resource types and API versions: Bicep immediately supports all preview and GA versions for Azure services. As soon as a resource provider introduces new resource types and API versions, you can use them in your Bicep file. You don't need to wait for tools to be updated before using new services.
Simple syntax: When compared to the equivalent JSON template, Bicep files are more concise and easier to read. Bicep doesn't require prior knowledge of programming languages. Bicep syntax is declarative and specifies which resources and resource properties you want to deploy.The following examples show the difference between a Bicep file and the equivalent JSON template. Both examples deploy a storage account:BicepJSONparam location string = resourceGroup().location
param storageAccountName string = 'toylaunch${uniqueString(resourceGroup().id)}'

resource storageAccount 'Microsoft.Storage/storageAccounts@2023-05-01' = {
  name: storageAccountName
  location: location
  sku: {
    name: 'Standard_LRS'
  }
  kind: 'StorageV2'
  properties: {
    accessTier: 'Hot'
  }
}{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]"
    },
    "storageAccountName": {
      "type": "string",
      "defaultValue": "[format('toylaunch{0}', uniqueString(resourceGroup().id))]"
    }
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2023-05-01",
      "name": "[parameters('storageAccountName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2",
      "properties": {
        "accessTier": "Hot"
      }
    }
  ]
}
Simple syntax: When compared to the equivalent JSON template, Bicep files are more concise and easier to read. Bicep doesn't require prior knowledge of programming languages. Bicep syntax is declarative and specifies which resources and resource properties you want to deploy.
The following examples show the difference between a Bicep file and the equivalent JSON template. Both examples deploy a storage account:
Bicep
JSON
param location string = resourceGroup().location
param storageAccountName string = 'toylaunch${uniqueString(resourceGroup().id)}'

resource storageAccount 'Microsoft.Storage/storageAccounts@2023-05-01' = {
  name: storageAccountName
  location: location
  sku: {
    name: 'Standard_LRS'
  }
  kind: 'StorageV2'
  properties: {
    accessTier: 'Hot'
  }
}
param location string = resourceGroup().location
param storageAccountName string = 'toylaunch${uniqueString(resourceGroup().id)}'

resource storageAccount 'Microsoft.Storage/storageAccounts@2023-05-01' = {
  name: storageAccountName
  location: location
  sku: {
    name: 'Standard_LRS'
  }
  kind: 'StorageV2'
  properties: {
    accessTier: 'Hot'
  }
}
{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]"
    },
    "storageAccountName": {
      "type": "string",
      "defaultValue": "[format('toylaunch{0}', uniqueString(resourceGroup().id))]"
    }
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2023-05-01",
      "name": "[parameters('storageAccountName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2",
      "properties": {
        "accessTier": "Hot"
      }
    }
  ]
}
{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]"
    },
    "storageAccountName": {
      "type": "string",
      "defaultValue": "[format('toylaunch{0}', uniqueString(resourceGroup().id))]"
    }
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2023-05-01",
      "name": "[parameters('storageAccountName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2",
      "properties": {
        "accessTier": "Hot"
      }
    }
  ]
}
Authoring experience: When you use theBicep Extension for VS Codeto create your Bicep files, you get a first-class authoring experience. The editor provides rich type safety, IntelliSense, and syntax validation.You can also create Bicep files in Visual Studio with theBicep extension for Visual Studio.
Authoring experience: When you use theBicep Extension for VS Codeto create your Bicep files, you get a first-class authoring experience. The editor provides rich type safety, IntelliSense, and syntax validation.

You can also create Bicep files in Visual Studio with theBicep extension for Visual Studio.
Repeatable results: Deploy your infrastructure throughout the development lifecycle with confidence that your resources are deployed consistently. Bicep files are idempotent, which means that you can deploy the same file many times and get the same resource types in the same state. You can develop one file that represents the desired state instead of developing many separate files to represent updates. For example, the following file creates a storage account. If you deploy this template and the storage account when the specified properties already exist, changes aren't made:BicepJSONparam location string = resourceGroup().location

resource mystore 'Microsoft.Storage/storageAccounts@2023-05-01' = {
  name: 'mystorageaccount'
  location: location
  sku: {
    name: 'Standard_LRS'
  }
  kind: 'StorageV2'
}{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]"
    }
  },
  "resources": {
    "mystore": {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2023-05-01",
      "name": "mystorageaccount",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2"
    }
  }
}
Repeatable results: Deploy your infrastructure throughout the development lifecycle with confidence that your resources are deployed consistently. Bicep files are idempotent, which means that you can deploy the same file many times and get the same resource types in the same state. You can develop one file that represents the desired state instead of developing many separate files to represent updates. For example, the following file creates a storage account. If you deploy this template and the storage account when the specified properties already exist, changes aren't made:
Bicep
JSON
param location string = resourceGroup().location

resource mystore 'Microsoft.Storage/storageAccounts@2023-05-01' = {
  name: 'mystorageaccount'
  location: location
  sku: {
    name: 'Standard_LRS'
  }
  kind: 'StorageV2'
}
param location string = resourceGroup().location

resource mystore 'Microsoft.Storage/storageAccounts@2023-05-01' = {
  name: 'mystorageaccount'
  location: location
  sku: {
    name: 'Standard_LRS'
  }
  kind: 'StorageV2'
}
{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]"
    }
  },
  "resources": {
    "mystore": {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2023-05-01",
      "name": "mystorageaccount",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2"
    }
  }
}
{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]"
    }
  },
  "resources": {
    "mystore": {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2023-05-01",
      "name": "mystorageaccount",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2"
    }
  }
}
Orchestration: You don't have to worry about the complexities of ordering operations. Azure Resource Manager orchestrates the deployment of interdependent resources so that they're created in the correct order. When possible, Resource Manager deploys resources in parallel, which helps your deployments to finish faster than serial deployments. You deploy the file through one rather than multiple imperative commands.
Orchestration: You don't have to worry about the complexities of ordering operations. Azure Resource Manager orchestrates the deployment of interdependent resources so that they're created in the correct order. When possible, Resource Manager deploys resources in parallel, which helps your deployments to finish faster than serial deployments. You deploy the file through one rather than multiple imperative commands.

Modularity: Usemodulesto segment your Bicep code into manageable parts. Modules help you to reuse code and simplify development. A module deploys a set of related resources. Add a module to a Bicep file when you need to deploy those resources.
Modularity: Usemodulesto segment your Bicep code into manageable parts. Modules help you to reuse code and simplify development. A module deploys a set of related resources. Add a module to a Bicep file when you need to deploy those resources.
Integration with Azure services: Bicep integrates with Azure services such as Azure Policy, template specs, and Azure Blueprints.
Integration with Azure services: Bicep integrates with Azure services such as Azure Policy, template specs, and Azure Blueprints.
Preview changes: You can use thewhat-if operationto preview changes before deploying the Bicep file. The what-if operation shows you which resources to create, update, or delete and any resource properties to change. It also checks the current state of your environment and eliminates the need to manage this state.
Preview changes: You can use thewhat-if operationto preview changes before deploying the Bicep file. The what-if operation shows you which resources to create, update, or delete and any resource properties to change. It also checks the current state of your environment and eliminates the need to manage this state.
No state or state files to manage: Azure stores all states. You can collaborate with others and be confident that your updates are handled as expected.
No state or state files to manage: Azure stores all states. You can collaborate with others and be confident that your updates are handled as expected.
No cost and open source: Since Bicep is free, you don't pay for premium capabilities. Microsoft Support supports it.
No cost and open source: Since Bicep is free, you don't pay for premium capabilities. Microsoft Support supports it.
Get started
To start with Bicep:
Install the tools. For more information, seeSet up Bicep development and deployment environments, or use theVS Code devcontainer/Codespaces repositoryto get a preconfigured authoring environment.
Install the tools. For more information, seeSet up Bicep development and deployment environments, or use theVS Code devcontainer/Codespaces repositoryto get a preconfigured authoring environment.
Complete theQuickstartandLearn modules for Bicep.
Complete theQuickstartandLearn modules for Bicep.
To decompile an existing Resource Manager template to Bicep, seeDecompile a JSON Azure Resource Manager template to Bicep. You can useBicep Playgroundto view Bicep and its equivalent, JSON, side by side.
To learn about the resources that are available in your Bicep file, seeBicep resource reference.
You can find Bicep examples in theBicep GitHub repo.
About the language
Bicep isn't intended as a general programming language to write applications. A Bicep file declares Azure resources and resource properties without writing a sequence of programming commands to create them.
To track the status of the Bicep work, see theBicep project repository.
To learn about Bicep, watch the following video:
You can use Bicep instead of JSON to develop Resource Manager templates. The JSON syntax to create a Resource Manager template can be verbose and require complicated expressions. Bicep syntax reduces that complexity and improves the development experience. Bicep is a transparent abstraction over a Resource Manager JSON template that doesn't lose the capabilities of a JSON template. During deployment, the Bicep CLI converts a Bicep file into a Resource Manager JSON template.
Resource types, API versions, and properties that are valid in a Resource Manager template are valid in a Bicep file.
Bicep offers an easier and more concise syntax than its equivalent, JSON. You don't use bracketed expressions[...]. Instead, you directly call functions and get values from parameters and variables. You give each deployed resource a symbolic name, which makes it easy to reference that resource in your template.
[...]
For a full comparison of the syntax, seeComparing JSON and Bicep for templates.
Bicep automatically manages dependencies between resources. You can avoid settingdependsOnwhen the symbolic name of a resource is used in another resource declaration.
dependsOn
The structure of the Bicep file is more flexible than a JSON template. You can declare parameters, variables, and outputs anywhere in the file. In JSON, you have to declare all parameters, variables, and outputs within the corresponding sections of the template.
Get support
Here are the steps for opening a support ticket for Azure Resource Manager (ARM) template related issues:
Open theAzure portal.
Open theAzure portal.
Select theSupport + Troubleshootingicon from the upper right corner.
Select theSupport + Troubleshootingicon from the upper right corner.
InBriefly describe the issue, enterARM template, and then selectGo.
InBriefly describe the issue, enterARM template, and then selectGo.
InWhich service are you having an issue with?, selectPortalunderMonitoring & Management, and then selectNext.
InWhich service are you having an issue with?, selectPortalunderMonitoring & Management, and then selectNext.
Select a subscription, and then selectNext.
Select a subscription, and then selectNext.
SelectIssue with ARM templates, and then selectNext.
SelectIssue with ARM templates, and then selectNext.

Next steps
To get started, see theQuickstart: Create Bicep files with Visual Studio Code.
For answers to common questions, seeFrequently asked questions for Bicep.
Feedback
Was this page helpful?
Additional resources