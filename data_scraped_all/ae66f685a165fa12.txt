Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Configure customer-managed keys
Article
2023-10-13
4 contributors
In this article
Azure Data Explorer encrypts all data in a storage account at rest. By default, data is encrypted with Microsoft-managed keys. For extra control over encryption keys, you can supply customer-managed keys to use for data encryption.
Customer-managed keys must be stored in anAzure Key Vault. You can create your own keys and store them in a key vault, or you can use an Azure Key Vault API to generate keys. The Azure Data Explorer cluster and the key vault must be in the same region, but they can be in different subscriptions. For a detailed explanation on customer-managed keys, seecustomer-managed keys with Azure Key Vault.
This article shows you how to configure customer-managed keys.
For code samples based on previous SDK versions, see thearchived article.
Configure Azure Key Vault
To configure customer-managed keys with Azure Data Explorer, you mustset two properties on the key vault:Soft DeleteandDo Not Purge. These properties aren't enabled by default. To enable these properties, performEnabling soft-deleteandEnabling Purge ProtectioninPowerShellorAzure CLIon a new or existing key vault. Only RSA keys of size 2048 are supported. For more information about keys, seeKey Vault keys.
Note
For information about the limitations of using customer managed keys on leader and follower clusters, seeLimitations.
Assign a managed identity to the cluster
To enable customer-managed keys for your cluster, first assign either a system-assigned or user-assigned managed identity to the cluster. You'll use this managed identity to grant the cluster permissions to access the key vault. To configure managed identities, seemanaged identities.
Enable encryption with customer-managed keys
Portal
C#
Azure CLI
PowerShell
ARM template
The following steps explain how to enable customer-managed keys encryption using the Azure portal. By default, Azure Data Explorer encryption uses Microsoft-managed keys. Configure your Azure Data Explorer cluster to use customer-managed keys and specify the key to associate with the cluster.
In theAzure portal, go to yourAzure Data Explorer clusterresource.
In theAzure portal, go to yourAzure Data Explorer clusterresource.
SelectSettings>Encryptionin left pane of portal.
SelectSettings>Encryptionin left pane of portal.
In theEncryptionpane, selectOnfor theCustomer-managed keysetting.
In theEncryptionpane, selectOnfor theCustomer-managed keysetting.
SelectSelect Key.
SelectSelect Key.

In theSelect key from Azure Key Vaultwindow, select an existingKey vaultfrom the dropdown list. If you selectCreate newtocreate a new Key Vault, you'll be routed to theCreate Key Vaultscreen.
In theSelect key from Azure Key Vaultwindow, select an existingKey vaultfrom the dropdown list. If you selectCreate newtocreate a new Key Vault, you'll be routed to theCreate Key Vaultscreen.
SelectKey.
SelectKey.
Version:To ensure that this key always uses the latest key version, select theAlways use current key versioncheckbox.Otherwise, selectVersion.
Version:
To ensure that this key always uses the latest key version, select theAlways use current key versioncheckbox.
Otherwise, selectVersion.
SelectSelect.
SelectSelect.

UnderIdentity type, selectSystem AssignedorUser Assigned.
UnderIdentity type, selectSystem AssignedorUser Assigned.
If you selectUser Assigned, pick a user assigned identity from the dropdown.
If you selectUser Assigned, pick a user assigned identity from the dropdown.

In theEncryptionpane that now contains your key, selectSave. When CMK creation succeeds, you'll see a success message inNotifications.
In theEncryptionpane that now contains your key, selectSave. When CMK creation succeeds, you'll see a success message inNotifications.

If you select system assigned identity when enabling customer-managed keys for your Azure Data Explorer cluster, you'll create a system assigned identity for the cluster if one doesn't exist. In addition, you'll be providing the required get, wrapKey, and unwrapKey permissions to your Azure Data Explorer cluster on the selected Key Vault and get the Key Vault properties.
Note
SelectOffto remove the customer-managed key after it has been created.
The following sections explain how to configure customer-managed keys encryption using the Azure Data Explorer C# client.
Install packages
Install theAzure Data Explorer (Kusto) NuGet package.
Install theAzure.Identity NuGet packagefor authentication with Microsoft Entra ID.
Authentication
To run the examples in this article,create a Microsoft Entra applicationand service principal that can access resources. You can add role assignment at the subscription scope and get the requiredMicrosoft Entra Directory (tenant) ID,Application ID, andApplication Secret.
Microsoft Entra Directory (tenant) ID
Application ID
Application Secret
The following code snippet demonstrates how to use theMicrosoft Authentication Library (MSAL)to acquire a Microsoft Entra application token to access your cluster. For the flow to succeed, the application must be registered with Microsoft Entra ID and you must have the credentials for application authentication, such as a Microsoft Entra ID-issued application key or a Microsoft Entra registered X.509v2 certificate.
Configure customer managed keys
By default, Azure Data Explorer encryption uses Microsoft-managed keys. Configure your Azure Data Explorer cluster to use customer-managed keys and specify the key to associate with the cluster.
Update your cluster by using the following code:var tenantId = "xxxxxxxx-xxxxx-xxxx-xxxx-xxxxxxxxx"; // Azure AD Directory (tenant) ID
var clientId = "xxxxxxxx-xxxxx-xxxx-xxxx-xxxxxxxxx"; // Application ID
var clientSecret = "PlaceholderClientSecret"; // Application secret
var subscriptionId = "xxxxxxxx-xxxxx-xxxx-xxxx-xxxxxxxxx";
var credentials = new ClientSecretCredential(tenantId, clientId, clientSecret);
var resourceManagementClient = new ArmClient(credentials, subscriptionId);
var resourceGroupName = "testrg";
var clusterName = "mykustocluster";
var subscription = await resourceManagementClient.GetDefaultSubscriptionAsync();
var resourceGroup = (await subscription.GetResourceGroupAsync(resourceGroupName)).Value;
var clusters = resourceGroup.GetKustoClusters();
var cluster = (await clusters.GetAsync(clusterName)).Value;
var clusterPatch = new KustoClusterPatch(cluster.Data.Location)
{
    KeyVaultProperties = new KustoKeyVaultProperties
    {
        KeyName = "<keyName>",
        KeyVersion = "<keyVersion>", // Optional, leave as NULL for the latest version of the key.
        KeyVaultUri = new Uri("https://<keyVaultName>.vault.azure.net/"),
        UserIdentity = "/subscriptions/<identitySubscriptionId>/resourcegroups/<identityResourceGroupName>/providers/Microsoft.ManagedIdentity/userAssignedIdentities/<identityName>" // Use NULL if you want to use system assigned identity.
    }
};
await cluster.UpdateAsync(WaitUntil.Completed, clusterPatch);
Update your cluster by using the following code:
var tenantId = "xxxxxxxx-xxxxx-xxxx-xxxx-xxxxxxxxx"; // Azure AD Directory (tenant) ID
var clientId = "xxxxxxxx-xxxxx-xxxx-xxxx-xxxxxxxxx"; // Application ID
var clientSecret = "PlaceholderClientSecret"; // Application secret
var subscriptionId = "xxxxxxxx-xxxxx-xxxx-xxxx-xxxxxxxxx";
var credentials = new ClientSecretCredential(tenantId, clientId, clientSecret);
var resourceManagementClient = new ArmClient(credentials, subscriptionId);
var resourceGroupName = "testrg";
var clusterName = "mykustocluster";
var subscription = await resourceManagementClient.GetDefaultSubscriptionAsync();
var resourceGroup = (await subscription.GetResourceGroupAsync(resourceGroupName)).Value;
var clusters = resourceGroup.GetKustoClusters();
var cluster = (await clusters.GetAsync(clusterName)).Value;
var clusterPatch = new KustoClusterPatch(cluster.Data.Location)
{
    KeyVaultProperties = new KustoKeyVaultProperties
    {
        KeyName = "<keyName>",
        KeyVersion = "<keyVersion>", // Optional, leave as NULL for the latest version of the key.
        KeyVaultUri = new Uri("https://<keyVaultName>.vault.azure.net/"),
        UserIdentity = "/subscriptions/<identitySubscriptionId>/resourcegroups/<identityResourceGroupName>/providers/Microsoft.ManagedIdentity/userAssignedIdentities/<identityName>" // Use NULL if you want to use system assigned identity.
    }
};
await cluster.UpdateAsync(WaitUntil.Completed, clusterPatch);
var tenantId = "xxxxxxxx-xxxxx-xxxx-xxxx-xxxxxxxxx"; // Azure AD Directory (tenant) ID
var clientId = "xxxxxxxx-xxxxx-xxxx-xxxx-xxxxxxxxx"; // Application ID
var clientSecret = "PlaceholderClientSecret"; // Application secret
var subscriptionId = "xxxxxxxx-xxxxx-xxxx-xxxx-xxxxxxxxx";
var credentials = new ClientSecretCredential(tenantId, clientId, clientSecret);
var resourceManagementClient = new ArmClient(credentials, subscriptionId);
var resourceGroupName = "testrg";
var clusterName = "mykustocluster";
var subscription = await resourceManagementClient.GetDefaultSubscriptionAsync();
var resourceGroup = (await subscription.GetResourceGroupAsync(resourceGroupName)).Value;
var clusters = resourceGroup.GetKustoClusters();
var cluster = (await clusters.GetAsync(clusterName)).Value;
var clusterPatch = new KustoClusterPatch(cluster.Data.Location)
{
    KeyVaultProperties = new KustoKeyVaultProperties
    {
        KeyName = "<keyName>",
        KeyVersion = "<keyVersion>", // Optional, leave as NULL for the latest version of the key.
        KeyVaultUri = new Uri("https://<keyVaultName>.vault.azure.net/"),
        UserIdentity = "/subscriptions/<identitySubscriptionId>/resourcegroups/<identityResourceGroupName>/providers/Microsoft.ManagedIdentity/userAssignedIdentities/<identityName>" // Use NULL if you want to use system assigned identity.
    }
};
await cluster.UpdateAsync(WaitUntil.Completed, clusterPatch);
Run the following command to check if your cluster was successfully updated:var clusterData = (await resourceGroup.GetKustoClusterAsync(clusterName)).Value.Data;If the result containsProvisioningStatewith theSucceededvalue, then your cluster was successfully updated.
Run the following command to check if your cluster was successfully updated:
var clusterData = (await resourceGroup.GetKustoClusterAsync(clusterName)).Value.Data;
var clusterData = (await resourceGroup.GetKustoClusterAsync(clusterName)).Value.Data;
If the result containsProvisioningStatewith theSucceededvalue, then your cluster was successfully updated.
ProvisioningState
Succeeded
The following steps explain how to enable customer-managed keys encryption using Azure CLI client. By default, Azure Data Explorer encryption uses Microsoft-managed keys. Configure your Azure Data Explorer cluster to use customer-managed keys and specify the key to associate with the cluster.
Run the following command to sign in to Azure:az login
Run the following command to sign in to Azure:
az login
az login
Set the subscription where your cluster is registered. ReplaceMyAzureSubwith the name of the Azure subscription that you want to use.az account set --subscription MyAzureSub
Set the subscription where your cluster is registered. ReplaceMyAzureSubwith the name of the Azure subscription that you want to use.
az account set --subscription MyAzureSub
az account set --subscription MyAzureSub
Run the following command to set the new key with the cluster's system assigned identityaz kusto cluster update --cluster-name "mytestcluster" --resource-group "mytestrg" --key-vault-properties key-name="<key-name>" key-version="<key-version>" key-vault-uri="<key-vault-uri>"Alternatively, set the new key with a user assigned identity.az kusto cluster update --cluster-name "mytestcluster" --resource-group "mytestrg" --key-vault-properties key-name="<key-name>" key-version="<key-version>" key-vault-uri="<key-vault-uri>" key-user-identity="<user-identity-resource-id>"
Run the following command to set the new key with the cluster's system assigned identity
az kusto cluster update --cluster-name "mytestcluster" --resource-group "mytestrg" --key-vault-properties key-name="<key-name>" key-version="<key-version>" key-vault-uri="<key-vault-uri>"
az kusto cluster update --cluster-name "mytestcluster" --resource-group "mytestrg" --key-vault-properties key-name="<key-name>" key-version="<key-version>" key-vault-uri="<key-vault-uri>"
Alternatively, set the new key with a user assigned identity.
az kusto cluster update --cluster-name "mytestcluster" --resource-group "mytestrg" --key-vault-properties key-name="<key-name>" key-version="<key-version>" key-vault-uri="<key-vault-uri>" key-user-identity="<user-identity-resource-id>"
az kusto cluster update --cluster-name "mytestcluster" --resource-group "mytestrg" --key-vault-properties key-name="<key-name>" key-version="<key-version>" key-vault-uri="<key-vault-uri>" key-user-identity="<user-identity-resource-id>"
Run the following command and check the 'keyVaultProperties' property to verify the cluster updated successfully.az kusto cluster show --cluster-name "mytestcluster" --resource-group "mytestrg"
Run the following command and check the 'keyVaultProperties' property to verify the cluster updated successfully.
az kusto cluster show --cluster-name "mytestcluster" --resource-group "mytestrg"
az kusto cluster show --cluster-name "mytestcluster" --resource-group "mytestrg"
The following steps explain how to enable customer-managed keys encryption using PowerShell. By default, Azure Data Explorer encryption uses Microsoft-managed keys. Configure your Azure Data Explorer cluster to use customer-managed keys and specify the key to associate with the cluster.
Run the following command to sign in to Azure:Connect-AzAccount
Run the following command to sign in to Azure:
Connect-AzAccount
Connect-AzAccount
Set the subscription where your cluster is registered.Set-AzContext -SubscriptionId "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
Set the subscription where your cluster is registered.
Set-AzContext -SubscriptionId "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
Set-AzContext -SubscriptionId "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
Run the following command to set the new key using a system assigned identity.Update-AzKustoCluster -ResourceGroupName "mytestrg" -Name "mytestcluster" -KeyVaultPropertyKeyName "<key-name>" -KeyVaultPropertyKeyVaultUri "<key-vault-uri>" -KeyVaultPropertyKeyVersion "<key-version>"Alternatively, set the new key using a user assigned identity.Update-AzKustoCluster -ResourceGroupName "mytestrg" -Name "mytestcluster" -KeyVaultPropertyKeyName "<key-name>" -KeyVaultPropertyKeyVaultUri "<key-vault-uri>" -KeyVaultPropertyKeyVersion "<key-version>" -KeyVaultPropertyUserIdentity "user-assigned-identity-resource-id"
Run the following command to set the new key using a system assigned identity.
Update-AzKustoCluster -ResourceGroupName "mytestrg" -Name "mytestcluster" -KeyVaultPropertyKeyName "<key-name>" -KeyVaultPropertyKeyVaultUri "<key-vault-uri>" -KeyVaultPropertyKeyVersion "<key-version>"
Update-AzKustoCluster -ResourceGroupName "mytestrg" -Name "mytestcluster" -KeyVaultPropertyKeyName "<key-name>" -KeyVaultPropertyKeyVaultUri "<key-vault-uri>" -KeyVaultPropertyKeyVersion "<key-version>"
Alternatively, set the new key using a user assigned identity.
Update-AzKustoCluster -ResourceGroupName "mytestrg" -Name "mytestcluster" -KeyVaultPropertyKeyName "<key-name>" -KeyVaultPropertyKeyVaultUri "<key-vault-uri>" -KeyVaultPropertyKeyVersion "<key-version>" -KeyVaultPropertyUserIdentity "user-assigned-identity-resource-id"
Update-AzKustoCluster -ResourceGroupName "mytestrg" -Name "mytestcluster" -KeyVaultPropertyKeyName "<key-name>" -KeyVaultPropertyKeyVaultUri "<key-vault-uri>" -KeyVaultPropertyKeyVersion "<key-version>" -KeyVaultPropertyUserIdentity "user-assigned-identity-resource-id"
Run the following command and check the 'KeyVaultProperty...' properties to verify the cluster updated successfully.Get-AzKustoCluster -Name "mytestcluster" -ResourceGroupName "mytestrg" | Format-List
Run the following command and check the 'KeyVaultProperty...' properties to verify the cluster updated successfully.
Get-AzKustoCluster -Name "mytestcluster" -ResourceGroupName "mytestrg" | Format-List
Get-AzKustoCluster -Name "mytestcluster" -ResourceGroupName "mytestrg" | Format-List
The following steps explain how to configure customer-managed keys using Azure Resource Manager templates. By default, Azure Data Explorer encryption uses Microsoft-managed keys. In this step, configure your Azure Data Explorer cluster to use customer-managed keys and specify the key to associate with the cluster.
If you'd like to use a system assigned identity to access the key vault, leaveuserIdentityempty. Otherwise, set the identity's resource ID.
userIdentity
You can deploy the Azure Resource Manager template by using the Azure portal or using PowerShell.
{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "clusterName": {
      "type": "string",
      "defaultValue": "[concat('kusto', uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "Name of the cluster to create"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    }
  },
  "variables": {},
  "resources": [
    {
      "name": "[parameters('clusterName')]",
      "type": "Microsoft.Kusto/clusters",
      "sku": {
        "name": "Standard_E8ads_v5",
        "tier": "Standard",
        "capacity": 2
      },
      "apiVersion": "2019-09-07",
      "location": "[parameters('location')]",
      "properties": {
        "keyVaultProperties": {
          "keyVaultUri": "<keyVaultUri>",
          "keyName": "<keyName>",
          "keyVersion": "<keyVersion>",
          "userIdentity": "<userIdentity>"
        }
      }
    }
  ]
}
{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "clusterName": {
      "type": "string",
      "defaultValue": "[concat('kusto', uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "Name of the cluster to create"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    }
  },
  "variables": {},
  "resources": [
    {
      "name": "[parameters('clusterName')]",
      "type": "Microsoft.Kusto/clusters",
      "sku": {
        "name": "Standard_E8ads_v5",
        "tier": "Standard",
        "capacity": 2
      },
      "apiVersion": "2019-09-07",
      "location": "[parameters('location')]",
      "properties": {
        "keyVaultProperties": {
          "keyVaultUri": "<keyVaultUri>",
          "keyName": "<keyName>",
          "keyVersion": "<keyVersion>",
          "userIdentity": "<userIdentity>"
        }
      }
    }
  ]
}
Update the key version
When you create a new version of a key, you'll need to update the cluster to use the new version. First, callGet-AzKeyVaultKeyto get the latest version of the key. Then update the cluster's key vault properties to use the new version of the key, as shown inEnable encryption with customer-managed keys.
Get-AzKeyVaultKey
Related content
Secure Azure Data Explorer clusters in Azure
Configure managed identities for your Azure Data Explorer cluster
Secure your cluster using Disk Encryption in Azure Data Explorer
Feedback
Was this page helpful?
Additional resources