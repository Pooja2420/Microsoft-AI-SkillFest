Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
resources.repositories.repository definition
Article
2025-03-20
4 contributors
In this article
Therepositorykeyword lets you specify an external repository. Use a repository resource to reference an additional repository in your pipeline.
repository
repositories:
- repository: string # Required as first property. Alias for the repository.
  endpoint: string # ID of the service endpoint connecting to this repository.
  trigger: none | trigger | [ string ] # CI trigger for this repository, no CI trigger if skipped (only works for Azure Repos).
  name: string # repository name (format depends on 'type'; does not accept variables).
  ref: string # ref name to checkout; defaults to 'refs/heads/main'. The branch checked out by default whenever the resource trigger fires.
  type: string # Type of repository: git, github, githubenterprise, and bitbucket.
repositories:
- repository: string # Required as first property. Alias for the repository.
  endpoint: string # ID of the service endpoint connecting to this repository.
  trigger: none | trigger | [ string ] # CI trigger for this repository, no CI trigger if skipped (only works for Azure Repos).
  name: string # repository name (format depends on 'type'; does not accept variables).
  ref: string # ref name to checkout; defaults to 'refs/heads/main'. The branch checked out by default whenever the resource trigger fires.
  type: string # Type of repository: git, github, githubenterprise, and bitbucket.
repositories:
- repository: string # Required as first property. Alias for the repository.
  endpoint: string # ID of the service endpoint connecting to this repository.
  trigger: none | trigger | [ string ] # CI trigger for this repository, no CI trigger if skipped (only works for Azure Repos).
  name: string # repository name (format depends on 'type'; does not accept variables).
  type: string # Type of repository: git, github, githubenterprise, and bitbucket.
  ref: string # ref name to checkout; defaults to 'refs/heads/main'. The branch checked out by default whenever the resource trigger fires. Does not accept variables.
repositories:
- repository: string # Required as first property. Alias for the repository.
  endpoint: string # ID of the service endpoint connecting to this repository.
  trigger: none | trigger | [ string ] # CI trigger for this repository, no CI trigger if skipped (only works for Azure Repos).
  name: string # repository name (format depends on 'type'; does not accept variables).
  type: string # Type of repository: git, github, githubenterprise, and bitbucket.
  ref: string # ref name to checkout; defaults to 'refs/heads/main'. The branch checked out by default whenever the resource trigger fires. Does not accept variables.
Definitions that reference this definition:resources.repositories
Properties
repositorystring. Required as first property.Alias for the specified repository. Acceptable values: [-_A-Za-z0-9]*.
repository
endpointstring.ID of the service endpoint connecting to this repository.
endpoint
triggertrigger.CI trigger for this repository, no CI trigger if omitted.
trigger
Important
Repository resource triggers are supported only for Azure Repos Git repositories.
Repository resource triggers don't supportbatch.
batch
namestring.Repository name. Format depends on 'type'; does not accept variables.
name
refstring.ref name to checkout; defaults to 'refs/heads/main'. The branch checked out by default whenever the resource trigger fires.Template expressions are supported.
ref
refstring.ref name to checkout; defaults to 'refs/heads/main'. The branch checked out by default whenever the resource trigger fires. Does not accept variables.
ref
typestring.Type of repository: git, github, githubenterprise, and bitbucket.
type
Remarks
Important
Repository resource does not allow pipeline variables innameandref. Wildcards are supported in triggers.
name
ref
Template expressions are supportedfor therefproperty (but not thenameproperty). Wildcards are supported in triggers.
ref
name
Important
Repository resource triggers are supported for Azure Repos Git repositories only. For more information ontriggersyntax, includingwildcard supportforbranchesandtags, seetrigger definitionandBuild Azure Repos Git or TFS Git repositories.
trigger
Important
batchis not supported in repository resource triggers.
batch
If your pipeline hastemplates in another repository, or if you want to usemulti-repo checkoutwith a repository that requires a service connection, you must let the system know about that repository.
Types
Pipelines support the following values for the repository type:git,github, andbitbucket.
Thegittype refers to Azure Repos Git repos.
git
github
bitbucket
git
If you specifytype: git, thenamevalue refers to the name of an Azure Repos Git repository.If your pipeline is in the same Azure DevOps project as the repository, for example a repository namedtools, you reference it usingname: tools.If your pipeline is in the same Azure DevOps organization as the repository, but in a different Azure DevOps project, for example a project namedToolsProject, you must qualify the repository name with the project name:name: ToolsProject/tools.
If you specifytype: git, thenamevalue refers to the name of an Azure Repos Git repository.
type: git
name
If your pipeline is in the same Azure DevOps project as the repository, for example a repository namedtools, you reference it usingname: tools.
tools
name: tools
If your pipeline is in the same Azure DevOps organization as the repository, but in a different Azure DevOps project, for example a project namedToolsProject, you must qualify the repository name with the project name:name: ToolsProject/tools.
ToolsProject
name: ToolsProject/tools
If you specifytype: github, thenamevalue is the full name of the GitHub repo and includes the user or organization.
An example isname: Microsoft/vscode.
GitHub repos require aGitHub service connectionfor authorization.
If you specifytype: github, thenamevalue is the full name of the GitHub repo and includes the user or organization.
An example isname: Microsoft/vscode.
GitHub repos require aGitHub service connectionfor authorization.
type: github
name
name: Microsoft/vscode
If you specifytype: bitbucket, thenamevalue is the full name of the Bitbucket Cloud repo and includes the user or organization.
An example isname: MyBitbucket/vscode.
Bitbucket Cloud repos require aBitbucket Cloud service connectionfor authorization.
If you specifytype: bitbucket, thenamevalue is the full name of the Bitbucket Cloud repo and includes the user or organization.
An example isname: MyBitbucket/vscode.
Bitbucket Cloud repos require aBitbucket Cloud service connectionfor authorization.
type: bitbucket
name
name: MyBitbucket/vscode
For more information about these types, seeCheck out multiple repositories in your pipeline - Repository resource definition.
Variables
In each run, the metadata for a repository resource is available to all jobs in the form of runtime variables. The<Alias>is the identifier that you gave for your repository resource.
<Alias>
resources.repositories.<Alias>.name
resources.repositories.<Alias>.ref
resources.repositories.<Alias>.type
resources.repositories.<Alias>.id
resources.repositories.<Alias>.url
resources.repositories.<Alias>.version
resources.repositories.<Alias>.name
resources.repositories.<Alias>.ref
resources.repositories.<Alias>.type
resources.repositories.<Alias>.id
resources.repositories.<Alias>.url
resources.repositories.<Alias>.version
The following example has a repository resource with an alias ofcommon, and the repository resource variables are accessed usingresources.repositories.common.*.
common
resources.repositories.common.*
resources:
  repositories:
    - repository: common
      type: git
      ref: main
      name: Repo

variables:
  ref: $[ resources.repositories.common.ref ]
  name: $[ resources.repositories.common.name ]
  id: $[ resources.repositories.common.id ]
  type: $[ resources.repositories.common.type ]
  url: $[ resources.repositories.common.url ]
  version: $[ resources.repositories.common.version ]

steps:
- bash: |
    echo "name = $(name)"
    echo "ref = $(ref)"
    echo "id = $(id)"
    echo "type = $(type)"
    echo "url = $(url)"
    echo "version = $(version)"
resources:
  repositories:
    - repository: common
      type: git
      ref: main
      name: Repo

variables:
  ref: $[ resources.repositories.common.ref ]
  name: $[ resources.repositories.common.name ]
  id: $[ resources.repositories.common.id ]
  type: $[ resources.repositories.common.type ]
  url: $[ resources.repositories.common.url ]
  version: $[ resources.repositories.common.version ]

steps:
- bash: |
    echo "name = $(name)"
    echo "ref = $(ref)"
    echo "id = $(id)"
    echo "type = $(type)"
    echo "url = $(url)"
    echo "version = $(version)"
Variables
In each run, the metadata for a repository resource is available to all jobs in the form of runtime variables. The<Alias>is the identifier that you gave for your repository resource.
<Alias>
resources.repositories.<Alias>.name
resources.repositories.<Alias>.ref
resources.repositories.<Alias>.type
resources.repositories.<Alias>.id
resources.repositories.<Alias>.url
resources.repositories.<Alias>.name
resources.repositories.<Alias>.ref
resources.repositories.<Alias>.type
resources.repositories.<Alias>.id
resources.repositories.<Alias>.url
The following example has a repository resource with an alias ofcommon, and the repository resource variables are accessed usingresources.repositories.common.*.
common
resources.repositories.common.*
resources:
  repositories:
    - repository: common
      type: git
      ref: main
      name: Repo

variables:
  ref: $[ resources.repositories.common.ref ]
  name: $[ resources.repositories.common.name ]
  id: $[ resources.repositories.common.id ]
  type: $[ resources.repositories.common.type ]
  url: $[ resources.repositories.common.url ]

steps:
- bash: |
    echo "name = $(name)"
    echo "ref = $(ref)"
    echo "id = $(id)"
    echo "type = $(type)"
    echo "url = $(url)"
resources:
  repositories:
    - repository: common
      type: git
      ref: main
      name: Repo

variables:
  ref: $[ resources.repositories.common.ref ]
  name: $[ resources.repositories.common.name ]
  id: $[ resources.repositories.common.id ]
  type: $[ resources.repositories.common.type ]
  url: $[ resources.repositories.common.url ]

steps:
- bash: |
    echo "name = $(name)"
    echo "ref = $(ref)"
    echo "id = $(id)"
    echo "type = $(type)"
    echo "url = $(url)"
Examples
resources:
  repositories:
  - repository: common
    type: github
    name: Contoso/CommonTools
    endpoint: MyContosoServiceConnection
resources:
  repositories:
  - repository: common
    type: github
    name: Contoso/CommonTools
    endpoint: MyContosoServiceConnection
See also
Add resources to a pipeline
Feedback
Was this page helpful?
Additional resources