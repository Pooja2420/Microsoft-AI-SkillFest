Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Install the Dapr extension for Azure Kubernetes Service (AKS) and Arc-enabled Kubernetes
Article
2025-01-16
14 contributors
In this article
Daprsimplifies building resilient, stateless, and stateful applications that run on the cloud and edge and embrace the diversity of languages and developer frameworks. With Dapr's sidecar architecture, you can keep your code platform agnostic while tackling challenges around building microservices, like:
Calling other services reliably and securely
Building event-driven apps with pub/sub
Building applications that are portable across multiple cloud services and hosts (for example, Kubernetes vs. a virtual machine)
Note
If you plan on installing Dapr in a Kubernetes production environment, see theDapr guidelines for production usagedocumentation page.
How it works
The Dapr extension uses the Azure CLI or a Bicep template to provision the Dapr control plane on your AKS or Arc-enabled Kubernetes cluster, creating the following Dapr services:
dapr-operator
dapr-sidecar-injector
DAPR_HTTP_PORT
DAPR_GRPC_PORT
dapr-placement
dapr-sentry
Once Dapr is installed on your cluster, you can begin to develop using the Dapr building block APIs byadding a few annotationsto your deployments. For a more in-depth overview of the building block APIs and how to best use them, see theDapr building blocks overview.
Warning
If you install Dapr through the AKS or Arc-enabled Kubernetes extension, our recommendation is to continue using the extension for future management of Dapr instead of the Dapr CLI. Combining the two tools can cause conflicts and result in undesired behavior.
Prerequisites
An Azure subscription.Don't have one? Create a free account.
The latest version of theAzure CLI.
An existingAKS clusteror connectedArc-enabled Kubernetes cluster.
An Azure Kubernetes Service Role-Based Access Control Admin role
Select how you'd like to install, deploy, and configure the Dapr extension.
Azure CLI
Bicep
Before you begin
Add the Azure CLI extension for cluster extensions
Install thek8s-extensionAzure CLI extension by running the following commands:
k8s-extension
az extension add --name k8s-extension
az extension add --name k8s-extension
If thek8s-extensionextension is already installed, you can update it to the latest version using the following command:
k8s-extension
az extension update --name k8s-extension
az extension update --name k8s-extension
Register theKubernetesConfigurationresource provider
KubernetesConfiguration
If you aren't already using cluster extensions, you may need to register the resource provider with your subscription. You can check the status of the provider registration using theaz provider listcommand, as shown in the following example:
az provider list --query "[?contains(namespace,'Microsoft.KubernetesConfiguration')]" -o table
az provider list --query "[?contains(namespace,'Microsoft.KubernetesConfiguration')]" -o table
TheMicrosoft.KubernetesConfigurationprovider should report asRegistered, as shown in the following example output:
Namespace                          RegistrationState    RegistrationPolicy
---------------------------------  -------------------  --------------------
Microsoft.KubernetesConfiguration  Registered           RegistrationRequired
Namespace                          RegistrationState    RegistrationPolicy
---------------------------------  -------------------  --------------------
Microsoft.KubernetesConfiguration  Registered           RegistrationRequired
If the provider shows asNotRegistered, register the provider using theaz provider registeras shown in the following example:
az provider register --namespace Microsoft.KubernetesConfiguration
az provider register --namespace Microsoft.KubernetesConfiguration
Register theExtenstionTypesfeature to your Azure subscription
ExtenstionTypes
TheExtensionTypesfeature needs to be registered to your Azure subscription. In the terminal, verify you're in the correct subscription:
ExtensionTypes
az account set --subscription <YOUR-AZURE-SUBSCRIPTION-ID>
az account set --subscription <YOUR-AZURE-SUBSCRIPTION-ID>
Register theExtenstionTypesfeature.
ExtenstionTypes
az feature registration create --namespace Microsoft.KubernetesConfiguration --name ExtensionTypes
az feature registration create --namespace Microsoft.KubernetesConfiguration --name ExtensionTypes
Feature registration may take some time. After a few minutes, check the registration status using the following command:
az feature show --namespace Microsoft.KubernetesConfiguration --name ExtensionTypes
az feature show --namespace Microsoft.KubernetesConfiguration --name ExtensionTypes
Create the extension and install Dapr on your AKS or Arc-enabled Kubernetes cluster
When installing the Dapr extension, use the flag value that corresponds to your cluster type:
AKS cluster:--cluster-type managedClusters.
--cluster-type managedClusters
Arc-enabled Kubernetes cluster:--cluster-type connectedClusters.
--cluster-type connectedClusters
Note
If you're using Dapr OSS on your AKS cluster and would like to install the Dapr extension for AKS, read more abouthow to successfully migrate to the Dapr extension.
Create the Dapr extension, which installs Dapr on your AKS or Arc-enabled Kubernetes cluster.
For example, install the latest version of Dapr via the Dapr extension on your AKS cluster:
az k8s-extension create --cluster-type managedClusters \
--cluster-name <myAKSCluster> \
--resource-group <myResourceGroup> \
--name dapr \
--extension-type Microsoft.Dapr \
--auto-upgrade-minor-version false
az k8s-extension create --cluster-type managedClusters \
--cluster-name <myAKSCluster> \
--resource-group <myResourceGroup> \
--name dapr \
--extension-type Microsoft.Dapr \
--auto-upgrade-minor-version false
Keep your managed AKS cluster updated to the latest version
Based on your environment (dev, test, or production), you can keep up-to-date with the latest stable Dapr versions.
When configuring the extension, you can choose to install Dapr from a particular release train. Specify one of the two release train values:
stable
dev
For example:
--release-train stable
--release-train stable
Warning
Auto-upgrade is not suitable for production environments. Only enable automatic updates to the Dapr control plane in dev or test environments.Learn how to manually upgrade to the latest Dapr version for production environments.
If you install Dapr without specifying a version,--auto-upgrade-minor-versionis automatically enabled, configuring the Dapr control plane to automatically update its minor version on new releases.
--auto-upgrade-minor-version
You can disable auto-update by specifying the--auto-upgrade-minor-versionparameter and setting the value tofalse.
--auto-upgrade-minor-version
false
Dapr versioning is inMAJOR.MINOR.PATCHformat, which means1.11.0to1.12.0is aminorversion upgrade.
MAJOR.MINOR.PATCH
1.11.0
1.12.0
--auto-upgrade-minor-version true
--auto-upgrade-minor-version true
To upgrade to the latest Dapr version in a production environment, you need to manually upgrade. Start by viewing a list of the stable Dapr versions available to your managed AKS cluster. Run the following command:
az k8s-extension extension-types list-versions-by-cluster --resource-group <myResourceGroup> --cluster-name <myCluster> --cluster-type managedClusters --extension-type microsoft.dapr --release-train stable
az k8s-extension extension-types list-versions-by-cluster --resource-group <myResourceGroup> --cluster-name <myCluster> --cluster-type managedClusters --extension-type microsoft.dapr --release-train stable
To see the latest stable Dapr version available to your managed AKS cluster, run the following command:
az k8s-extension extension-types list-versions-by-cluster --resource-group <myResourceGroup> --cluster-name <myCluster> --cluster-type managedClusters --extension-type microsoft.dapr  --release-train stable --show-latest
az k8s-extension extension-types list-versions-by-cluster --resource-group <myResourceGroup> --cluster-name <myCluster> --cluster-type managedClusters --extension-type microsoft.dapr  --release-train stable --show-latest
To view a list of the stable Dapr versions availableby location:
Make sure you've registered theExtenstionTypesfeature to your Azure subscription.
ExtenstionTypes
Run the following command.
az k8s-extension extension-types list-versions-by-location --location westus --extension-type microsoft.dapr
az k8s-extension extension-types list-versions-by-location --location westus --extension-type microsoft.dapr
Next, manually update Dapr to the latest stable version.
Note
Dapr is supported with a rolling window, including only the current and previous versions. It is your operational responsibility to remain up to date with these supported versions. If you have an older version of Dapr, you may have to do intermediate upgrades to get to a supported version.
The same command-line argument is used for installing a specific version of Dapr or rolling back to a previous version. Set--auto-upgrade-minor-versiontofalseand--versionto the version of Dapr you wish to install. If theversionparameter is omitted, the extension installs the latest version of Dapr. The following example command installs Dapr version1.14.4-msft.10on your AKS cluster:
--auto-upgrade-minor-version
false
--version
version
1.14.4-msft.10
az k8s-extension create --cluster-type managedClusters \
--cluster-name <myAKSCluster> \
--resource-group <myResourceGroup> \
--name dapr \
--extension-type Microsoft.Dapr \
--auto-upgrade-minor-version false \
--version 1.14.4-msft.10
az k8s-extension create --cluster-type managedClusters \
--cluster-name <myAKSCluster> \
--resource-group <myResourceGroup> \
--name dapr \
--extension-type Microsoft.Dapr \
--auto-upgrade-minor-version false \
--version 1.14.4-msft.10
Before you begin
Register theKubernetesConfigurationresource provider
KubernetesConfiguration
If you aren't already using cluster extensions, you may need to register the resource provider with your subscription. You can check the status of the provider registration using theaz provider listcommand, as shown in the following example:
az provider list --query "[?contains(namespace,'Microsoft.KubernetesConfiguration')]" -o table
az provider list --query "[?contains(namespace,'Microsoft.KubernetesConfiguration')]" -o table
TheMicrosoft.KubernetesConfigurationprovider should report asRegistered, as shown in the following example output:
Namespace                          RegistrationState    RegistrationPolicy
---------------------------------  -------------------  --------------------
Microsoft.KubernetesConfiguration  Registered           RegistrationRequired
Namespace                          RegistrationState    RegistrationPolicy
---------------------------------  -------------------  --------------------
Microsoft.KubernetesConfiguration  Registered           RegistrationRequired
If the provider shows asNotRegistered, register the provider using theaz provider registeras shown in the following example:
az provider register --namespace Microsoft.KubernetesConfiguration
az provider register --namespace Microsoft.KubernetesConfiguration
Register theExtenstionTypesfeature to your Azure subscription
ExtenstionTypes
TheExtensionTypesfeature needs to be registered to your Azure subscription. In the terminal, verify you're in the correct subscription:
ExtensionTypes
az account set --subscription <YOUR-AZURE-SUBSCRIPTION-ID>
az account set --subscription <YOUR-AZURE-SUBSCRIPTION-ID>
Register theExtenstionTypesfeature.
ExtenstionTypes
az feature registration create --namespace Microsoft.KubernetesConfiguration --name ExtensionTypes
az feature registration create --namespace Microsoft.KubernetesConfiguration --name ExtensionTypes
Feature registration may take some time. After a few minutes, check the registration status using the following command:
az feature show --namespace Microsoft.KubernetesConfiguration --name ExtensionTypes
az feature show --namespace Microsoft.KubernetesConfiguration --name ExtensionTypes
Deploy the Dapr extension on your AKS or Arc-enabled Kubernetes cluster
Create a Bicep template similar to the following example and deploy the Dapr extension to your existing cluster.
@description('The name of the Managed Cluster resource.')
param clusterName string

resource existingManagedClusters 'Microsoft.ContainerService/managedClusters@2023-05-02-preview' existing = {
  name: clusterName
}

resource daprExtension 'Microsoft.KubernetesConfiguration/extensions@2022-11-01' = {
  name: 'dapr'
  scope: existingManagedClusters
  identity: {
    type: 'SystemAssigned'
  }
  properties: {
    autoUpgradeMinorVersion: true
    configurationProtectedSettings: {}
    configurationSettings: {
      'global.clusterType': 'managedclusters'
    }
    extensionType: 'microsoft.dapr'
    releaseTrain: 'stable'
    scope: {
      cluster: {
        releaseNamespace: 'dapr-system'
      }
    }
    version: '1.11.2'
  }
}
@description('The name of the Managed Cluster resource.')
param clusterName string

resource existingManagedClusters 'Microsoft.ContainerService/managedClusters@2023-05-02-preview' existing = {
  name: clusterName
}

resource daprExtension 'Microsoft.KubernetesConfiguration/extensions@2022-11-01' = {
  name: 'dapr'
  scope: existingManagedClusters
  identity: {
    type: 'SystemAssigned'
  }
  properties: {
    autoUpgradeMinorVersion: true
    configurationProtectedSettings: {}
    configurationSettings: {
      'global.clusterType': 'managedclusters'
    }
    extensionType: 'microsoft.dapr'
    releaseTrain: 'stable'
    scope: {
      cluster: {
        releaseNamespace: 'dapr-system'
      }
    }
    version: '1.11.2'
  }
}
Set the following variables, changing the following values to your actual resource group and cluster names.
MY_RESOURCE_GROUP=<myResourceGroup>
MY_AKS_CLUSTER=<myAKSCluster>
MY_RESOURCE_GROUP=<myResourceGroup>
MY_AKS_CLUSTER=<myAKSCluster>
Deploy the Bicep template using theaz deployment groupcommand.
az deployment group
az deployment group create \
  --resource-group $MY_RESOURCE_GROUP \
  --template-file ./my-bicep-file-path.bicep \
  --parameters clusterName=$MY_AKS_CLUSTER
az deployment group create \
  --resource-group $MY_RESOURCE_GROUP \
  --template-file ./my-bicep-file-path.bicep \
  --parameters clusterName=$MY_AKS_CLUSTER
Configuring automatic updates to Dapr control plane
Warning
You can enable automatic updates to the Dapr control plane only in dev or test environments. Auto-upgrade is not suitable for production environments.
If you deploy Dapr without specifying a version,autoUpgradeMinorVersionis automatically enabled, configuring the Dapr control plane to automatically update its minor version on new releases.
autoUpgradeMinorVersion
You can disable auto-update by specifying theautoUpgradeMinorVersionparameter and setting the value tofalse.
autoUpgradeMinorVersion
false
Dapr versioning is inMAJOR.MINOR.PATCHformat, which means1.11.0to1.12.0is aminorversion upgrade.
MAJOR.MINOR.PATCH
1.11.0
1.12.0
properties {
  autoUpgradeMinorVersion: true
}
properties {
  autoUpgradeMinorVersion: true
}
Targeting a specific Dapr version
Note
Dapr is supported with a rolling window, including only the current and previous versions. It is your operational responsibility to remain up to date with these supported versions. If you have an older version of Dapr, you may have to do intermediate upgrades to get to a supported version.
SetautoUpgradeMinorVersiontofalseandversionto the version of Dapr you wish to install. If theautoUpgradeMinorVersionparameter is set totrue, andversionparameter is omitted, the extension installs the latest version of Dapr.
autoUpgradeMinorVersion
false
version
autoUpgradeMinorVersion
true
version
For example, to use Dapr 1.11.2:
properties: {
  autoUpgradeMinorVersion: false
  version: '1.11.2'
}
properties: {
  autoUpgradeMinorVersion: false
  version: '1.11.2'
}
Choosing a release train
When configuring the extension, you can choose to install Dapr from a particular release train. Specify one of the two release train values:
stable
dev
For example:
properties: {
  releaseTrain: 'stable'
}
properties: {
  releaseTrain: 'stable'
}
Troubleshooting
Troubleshooting extension management errors
If the extension fails to create or update, try suggestions and solutions in theDapr extension troubleshooting guide.
Troubleshooting Dapr functional errors
Troubleshoot Dapr open source errors unrelated to the extension via thecommon Dapr issues and solutions guide.
Support
Note
Learn more abouthow Microsoft handles issues raised for the Dapr extension.
If you're experiencing Dapr runtime security risks and regressions while using the extension, open an issue with theDapr open source project.
You could also start a discussion in the Dapr project Discord:
Dapr runtime
Dapr components
Delete the Dapr extension from your cluster
The process of uninstalling the Dapr extension from AKS does not delete the CRDs created during installation. These CRDs remain in the cluster as residual components, essential for the reconciler during the installation and uninstallation of the extension.
To clean the cluster of these CRDs, you can manually delete themafterthe Dapr extension has been completely uninstalled from AKS.
Uninstalling the extension
Delete the extension from your AKS cluster using the following command:
az k8s-extension delete --resource-group <myResourceGroup> --cluster-name <myAKSCluster> --cluster-type managedClusters --name dapr
az k8s-extension delete --resource-group <myResourceGroup> --cluster-name <myAKSCluster> --cluster-type managedClusters --name dapr
Or, if using a Bicep template, you can delete the template.
Listing the CRDs in your cluster
To find the CRDs you'd like to remove, run the following command:
kubectl get crds | findstr dapr.io
kubectl get crds | findstr dapr.io
Next Steps
Configure the Dapr extension for your unique scenario
Azure Kubernetes Service

Additional resources