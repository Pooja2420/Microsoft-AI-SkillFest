Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Install Bicep tools
Article
2025-03-25
8 contributors
In this article
Prepare your environment for working with Bicep files. To author and deploy Bicep files, we recommend any of the following options:
Warning
The Bicep CLI's stability in emulated environments isn't guaranteed, as emulation tools like Rosetta2 and QEMU typically don't perfectly emulate the architecture.
Visual Studio Code and Bicep extension
To create Bicep files, you need a good Bicep editor. We recommend:
Visual Studio Code- If you don't already have Visual Studio Code,install it.
Visual Studio Code- If you don't already have Visual Studio Code,install it.
Bicep extension for Visual Studio Code.  Visual Studio Code with the Bicep extension provides language support and resource autocompletion. The extension helps you create and validate Bicep files.To install the extension, search forbicepin theExtensionstab or in theVisual Studio marketplace.SelectInstall.
Bicep extension for Visual Studio Code.  Visual Studio Code with the Bicep extension provides language support and resource autocompletion. The extension helps you create and validate Bicep files.
To install the extension, search forbicepin theExtensionstab or in theVisual Studio marketplace.
SelectInstall.

To verify you've installed the extension, open any file with the.bicepfile extension. You should see the language mode in the lower-right corner change toBicep.
.bicep

If you get an error during installation, seeTroubleshoot Bicep installation.
You can deploy your Bicep files directly from the Visual Studio Code editor. For more information, seeDeploy Bicep files with Visual Studio Code.
Configure Bicep extension
To see the settings:
From theViewmenu, selectExtensions.
From theViewmenu, selectExtensions.
View
Extensions
SelectBicepfrom the list of extensions.
SelectBicepfrom the list of extensions.
Bicep
Select theFEATURE CONTRIBUTIONStab:The Bicep extension has these settings and default values:IDDefault valueDescriptionbicep.decompileOnPastetrueAutomatically convert pasted JSON values, Azure Resource Manager JSON templates (ARM templates,) or resources from an ARM template into Bicep (use Undo to revert). For more information, see thePaste JSON as Bicep command.bicep.enableOutputTimestampstruePrepend each line displayed in the Bicep Operations output channel with a timestamp.bicep.suppressedWarningsWarnings that are being suppressed because a 'Don't show again' button was pressed. Remove items to reset.bicep.enableSurveystrueEnable occasional surveys to collect feedback that helps us improve the Bicep extension.bicep.completions.getAllAccessibleAzureContainerRegistriesfalseWhen completing 'br:' module references, query Azure for all container registries accessible to the user (might be slow). If this option is off, only  registries configured undermoduleAliasesinbicepconfig.jsonfileswill be listed.bicep.trace.serveroffConfigure tracing of messages sent to the Bicep language server.
Select theFEATURE CONTRIBUTIONStab:
FEATURE CONTRIBUTIONS

The Bicep extension has these settings and default values:
To configure the settings:
From theFilemenu, selectPreferencesand thenSettings.
From theFilemenu, selectPreferencesand thenSettings.
ExpandExtensionsto selectBicep:
ExpandExtensionsto selectBicep:

Visual Studio and Bicep extension
To author Bicep file from Visual Studio, you need:
Visual Studio- If you don't already have Visual Studio,install it.
Bicep extension for Visual Studio.  Visual Studio with the Bicep extension provides language support and resource autocompletion. The extension helps you create and validate Bicep files. Install the extension fromVisual Studio Marketplace.
To walk through a tutorial, seeQuickstart: Create Bicep files with Visual Studio.
Azure CLI
When you use Azure CLI with Bicep, you have everything you need todeployanddecompileBicep files. Azure CLI automatically installs the Bicep CLI when a command is executed that needs it.
You must have Azure CLI version2.20.0 or laterinstalled. To install or update the Azure CLI on different operating systems, see:
Install on Windows
Install on Linux
Install on macOS
To verify your current version, run:
az --version
az --version
To validate your Bicep CLI installation, use:
az bicep version
az bicep version
To upgrade to the latest version, use:
az bicep upgrade
az bicep upgrade
For more commands, seeBicep CLI.
Important
The Azure CLI installs a self-contained instance of the Bicep CLI. This instance doesn't conflict with any versions that you might have installed manually. The Azure CLI doesn't add Bicep CLI to your PATH.
You're done with setting up your Bicep environment. The rest of this article describes installation steps that you don't need when using the Azure CLI.
Azure PowerShell
You must have Azure PowerShell version5.6.0 or laterinstalled. To update or install, seeInstall Azure PowerShell.
Azure PowerShell doesn't automatically install the Bicep CLI. Instead, you mustinstall the Bicep CLI manually.
Important
The self-contained instance of the Bicep CLI installed by the Azure CLI isn't available for PowerShell commands. Azure PowerShell deployments fail if you haven't manually installed the Bicep CLI.
When you manually install the Bicep CLI, run the Bicep commands with thebicepsyntax instead of theaz bicepsyntax for Azure CLI.
bicep
az bicep
To check your Bicep CLI version, run:
bicep --version
bicep --version
Install manually
The following methods install the Bicep CLI and add it to your PATH. You must manually install for any use other than the Azure CLI.
When installing manually, select a location that's different from the one managed by the Azure CLI. All of the following examples use a location namedbicepor.bicep. This location won't conflict with the location managed by the Azure CLI, which uses.azure.
Linux
macOS
Windows
Linux
# Fetch the latest Bicep CLI binary
curl -Lo bicep https://github.com/Azure/bicep/releases/latest/download/bicep-linux-x64
# Mark it as executable
chmod +x ./bicep
# Add bicep to your PATH (requires admin)
sudo mv ./bicep /usr/local/bin/bicep
# Verify you can now access the 'bicep' command
bicep --help
# Done!
# Fetch the latest Bicep CLI binary
curl -Lo bicep https://github.com/Azure/bicep/releases/latest/download/bicep-linux-x64
# Mark it as executable
chmod +x ./bicep
# Add bicep to your PATH (requires admin)
sudo mv ./bicep /usr/local/bin/bicep
# Verify you can now access the 'bicep' command
bicep --help
# Done!
Note
For lightweight Linux distributions likeAlpine, usebicep-linux-musl-x64instead ofbicep-linux-x64in the preceding script.
macOS
# Add the tap for bicep
brew tap azure/bicep

# Install the tool
brew install bicep
# Add the tap for bicep
brew tap azure/bicep

# Install the tool
brew install bicep
# Fetch the latest Bicep CLI binary
curl -Lo bicep https://github.com/Azure/bicep/releases/latest/download/bicep-osx-x64
# Mark it as executable
chmod +x ./bicep
# Add Gatekeeper exception (requires admin)
sudo spctl --add ./bicep
# Add bicep to your PATH (requires admin)
sudo mv ./bicep /usr/local/bin/bicep
# Verify you can now access the 'bicep' command
bicep --help
# Done!
# Fetch the latest Bicep CLI binary
curl -Lo bicep https://github.com/Azure/bicep/releases/latest/download/bicep-osx-x64
# Mark it as executable
chmod +x ./bicep
# Add Gatekeeper exception (requires admin)
sudo spctl --add ./bicep
# Add bicep to your PATH (requires admin)
sudo mv ./bicep /usr/local/bin/bicep
# Verify you can now access the 'bicep' command
bicep --help
# Done!
Note
ABicep CLIversion 0.16.X or later installation doesn't need a Gatekeeper exception. However,nightly buildsof the Bicep CLI still require the exception.
Windows
Download and run thelatest Windows installer. The installer doesn't require administrative privileges. After the installation, the Bicep CLI is added to your user PATH. Close and reopen any open command shell windows for the PATH change to take effect.
choco install bicep
choco install bicep
winget install -e --id Microsoft.Bicep
winget install -e --id Microsoft.Bicep
# Create the install folder
$installPath = "$env:USERPROFILE\.bicep"
$installDir = New-Item -ItemType Directory -Path $installPath -Force
$installDir.Attributes += 'Hidden'
# Fetch the latest Bicep CLI binary
(New-Object Net.WebClient).DownloadFile("https://github.com/Azure/bicep/releases/latest/download/bicep-win-x64.exe", "$installPath\bicep.exe")
# Add bicep to your PATH
$currentPath = (Get-Item -path "HKCU:\Environment" ).GetValue('Path', '', 'DoNotExpandEnvironmentNames')
if (-not $currentPath.Contains("%USERPROFILE%\.bicep")) { setx PATH ($currentPath + ";%USERPROFILE%\.bicep") }
if (-not $env:path.Contains($installPath)) { $env:path += ";$installPath" }
# Verify you can now access the 'bicep' command.
bicep --help
# Done!
# Create the install folder
$installPath = "$env:USERPROFILE\.bicep"
$installDir = New-Item -ItemType Directory -Path $installPath -Force
$installDir.Attributes += 'Hidden'
# Fetch the latest Bicep CLI binary
(New-Object Net.WebClient).DownloadFile("https://github.com/Azure/bicep/releases/latest/download/bicep-win-x64.exe", "$installPath\bicep.exe")
# Add bicep to your PATH
$currentPath = (Get-Item -path "HKCU:\Environment" ).GetValue('Path', '', 'DoNotExpandEnvironmentNames')
if (-not $currentPath.Contains("%USERPROFILE%\.bicep")) { setx PATH ($currentPath + ";%USERPROFILE%\.bicep") }
if (-not $env:path.Contains($installPath)) { $env:path += ";$installPath" }
# Verify you can now access the 'bicep' command.
bicep --help
# Done!
Install on air-gapped cloud
Thebicep installandbicep upgradecommands don't work in an air-gapped environment. To install Bicep CLI in an air-gapped environment, you need to download the Bicep CLI executable manually and save it to.azure/bin. This location is where the instance managed by Azure CLI is installed.
bicep install
bicep upgrade
LinuxDownloadbicep-linux-x64from theBicep release pagein a non-air-gapped environment.Copy the executable to the$HOME/.azure/bindirectory on an air-gapped machine. Rename file tobicep.
Linux
Downloadbicep-linux-x64from theBicep release pagein a non-air-gapped environment.
Copy the executable to the$HOME/.azure/bindirectory on an air-gapped machine. Rename file tobicep.
macOSDownloadbicep-osx-x64from theBicep release pagein a non-air-gapped environment.Copy the executable to the$HOME/.azure/bindirectory on an air-gapped machine. Rename file tobicep.
macOS
Downloadbicep-osx-x64from theBicep release pagein a non-air-gapped environment.
Copy the executable to the$HOME/.azure/bindirectory on an air-gapped machine. Rename file tobicep.
WindowsDownloadbicep-win-x64.exefrom theBicep release pagein a non-air-gapped environment.Copy the executable to the%UserProfile%/.azure/bindirectory on an air-gapped machine. Rename file tobicep.exe.
Windows
Downloadbicep-win-x64.exefrom theBicep release pagein a non-air-gapped environment.
Copy the executable to the%UserProfile%/.azure/bindirectory on an air-gapped machine. Rename file tobicep.exe.
When using theAzure CLI taskon air-gapped cloud, you must set theuseGlobalConfigproperty of the task totrue. The default value isfalse. SeeCI/CD with Azure Pipelines and Bicep filesfor an example.
useGlobalConfig
true
false
Install the nightly builds
If you'd like to try the latest pre-release bits of Bicep before they're released, seeInstall nightly builds.
Warning
These pre-release builds are much more likely to have known or unknown bugs.
Install the NuGet package
The Bicep team has made theAzure.Bicep.Core NuGet packagepublicly available on nuget.org. While it's public, it isn't a supported package. Any dependency you take on this package will be done at your own risk, and Microsoft reserves the right to push breaking changes to this package at any time.
For more information about installing and consuming NuGet packages, seePackage consumption workflow.
Next steps
For more information about using Visual Studio Code and the Bicep extension, seeQuickstart: Create Bicep files with Visual Studio Code.
If you have problems with your Bicep installation, seeTroubleshoot Bicep installation.
To deploy Bicep files from an Azure Pipeline, seeQuickstart: Integrate Bicep with Azure Pipelines. To deploy Bicep files through GitHub Actions, seeQuickstart: Deploy Bicep files by using GitHub Actions.
Feedback
Was this page helpful?
Additional resources