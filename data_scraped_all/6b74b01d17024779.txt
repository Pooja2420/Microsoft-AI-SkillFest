Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
How to create custom machine configuration package artifacts
Article
2024-02-07
2 contributors
In this article
Before you begin, it's a good idea to read the overview page formachine configuration.
Machine configuration usesDesired State Configuration(DSC) when auditing and configuring
both Windows and Linux. The DSC configuration defines the condition that the machine should be in.
Important
Custom packages that audit the state of an environment and apply configurations are in Generally
Available (GA) support status. However, the following limitations apply:
To use machine configuration packages that apply configurations, Azure VM guest configuration
extension version 1.26.24 or later, or Arc agent 1.10.0 or later, is required.
TheGuestConfigurationmodule is only available on Ubuntu 18 and later. However, the package
and policies produced by the module can be used on any Linux distribution and version supported
in Azure or Arc.
Testing packages on macOS isn't available.
Don't use secrets or confidential information in custom content packages.
Use the following steps to create your own configuration for managing the state of an Azure or
non-Azure machine.
Install PowerShell 7 and required PowerShell modules
First, follow the steps inHow to set up a machine configuration authoring environment. Those
steps help you to install the required version of PowerShell for your OS, theGuestConfigurationmodule, and thePSDesiredStateConfigurationmodule.
Author a configuration
Before you create a configuration package, author and compile a DSC configuration. Example
configurations are available for Windows and Linux.
Important
When compiling configurations for Windows, usePSDesiredStateConfigurationversion 2.0.7 (the
stable release). When compiling configurations for Linux install the prerelease version 3.0.0.
This example configuration is for Windows machines. It configures the machine to create theMC_ENV_EXAMPLEenvironment variable in theProcessandMachinescopes. The value of the
variable sets to'This was set by machine configuration'.
MC_ENV_EXAMPLE
Process
Machine
'This was set by machine configuration'
Configuration MyConfig {
    Import-DscResource -Name 'Environment' -ModuleName 'PSDscResources'
    Environment MachineConfigurationExample {
        Name   = 'MC_ENV_EXAMPLE'
        Value  = 'This was set by machine configuration'
        Ensure = 'Present'
        Target = @('Process', 'Machine')
    }
}

MyConfig
Configuration MyConfig {
    Import-DscResource -Name 'Environment' -ModuleName 'PSDscResources'
    Environment MachineConfigurationExample {
        Name   = 'MC_ENV_EXAMPLE'
        Value  = 'This was set by machine configuration'
        Ensure = 'Present'
        Target = @('Process', 'Machine')
    }
}

MyConfig
With that definition saved in theMyConfig.ps1script file, you can run the script to compile the
configuration.
MyConfig.ps1
. .\MyConfig.ps1
. .\MyConfig.ps1
Directory: C:\dsc\MyConfig

Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
-a---           5/16/2023 10:39 AM           1080 localhost.mof
Directory: C:\dsc\MyConfig

Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
-a---           5/16/2023 10:39 AM           1080 localhost.mof
The configuration is compiled into thelocalhost.moffile in theMyConfigfolder in the current
working directory. Renamelocalhost.mofto the name you want to use as the package name, such asMyConfig.mof.
localhost.mof
MyConfig
localhost.mof
MyConfig.mof
Rename-Item -Path .\MyConfig\localhost.mof -NewName MyConfig.mof -PassThru
Rename-Item -Path .\MyConfig\localhost.mof -NewName MyConfig.mof -PassThru
Directory: C:\dsc\MyConfig

Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
-a---           5/16/2023 10:40 AM           1080 MyConfig.mof
Directory: C:\dsc\MyConfig

Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
-a---           5/16/2023 10:40 AM           1080 MyConfig.mof
Note
This example shows how to author and compile a configuration for a Windows machine. For Linux,
you need to create a custom DSC resource module usingPowerShell classes. The  articleWriting a custom DSC resource with PowerShell classesincludes a full example of a
custom resource and configuration, tested with machine configuration.
The rest of this article applies to configurations defined for Linux and Windows machines except
where it mentions platform-specific considerations.
Create a configuration package artifact
Once the MOF is compiled, the supporting files must be packaged together. The completed package is
used by machine configuration to create the Azure Policy definitions.
TheNew-GuestConfigurationPackagecmdlet creates the package. Modules required by the
configuration must be in available in$Env:PSModulePathfor the development environment so the
commands in the module can add them to the package.
New-GuestConfigurationPackage
$Env:PSModulePath
Parameters of theNew-GuestConfigurationPackagecmdlet when creating Windows content:
New-GuestConfigurationPackage
Name: machine configuration package name.
Configuration: Compiled DSC configuration document full path.
Path: Output folder path. This parameter is optional. If not specified, the package is
created in current directory.
Type: (Audit,AuditandSet) Determines whether the configuration should only audit or if
the configuration should change the state of the machine if it's out of the desired state. The
default isAudit.
Audit
AuditandSet
Audit
FrequencyMinutes: The frequency of evaluation of the package on the machine in minutes.
FilesToInclude: An array list of paths to additional files to include in the generated package.
This step doesn't require elevation. TheForceparameter is used to overwrite existing
packages, if you run the command more than once.
The following commands create a package artifact:
# Create a package that will only audit compliance
$params = @{
    Name          = 'MyConfig'
    Configuration = './MyConfig/MyConfig.mof'
    Type          = 'Audit'
    Force         = $true
}
New-GuestConfigurationPackage @params
# Create a package that will only audit compliance
$params = @{
    Name          = 'MyConfig'
    Configuration = './MyConfig/MyConfig.mof'
    Type          = 'Audit'
    Force         = $true
}
New-GuestConfigurationPackage @params
# Create a package that will audit and apply the configuration (Set)
$params = @{
    Name          = 'MyConfig'
    Configuration = './MyConfig/MyConfig.mof'
    Type          = 'AuditAndSet'
    Force         = $true
}
New-GuestConfigurationPackage @params
# Create a package that will audit and apply the configuration (Set)
$params = @{
    Name          = 'MyConfig'
    Configuration = './MyConfig/MyConfig.mof'
    Type          = 'AuditAndSet'
    Force         = $true
}
New-GuestConfigurationPackage @params
An object is returned with theNameandPathof the created package.
Name     Path
----     ----
MyConfig C:\dsc\MyConfig.zip
Name     Path
----     ----
MyConfig C:\dsc\MyConfig.zip
Expected contents of a machine configuration artifact
The completed package is used by machine configuration to create the Azure Policy definitions. The
package consists of:
The compiled DSC configuration as a MOF
Modules folderGuestConfigurationmoduleDscNativeResourcesmoduleDSC resource modules required by the MOF
GuestConfigurationmodule
DscNativeResourcesmodule
DSC resource modules required by the MOF
A metaconfig file that stores the packagetypeandversion
type
version
The PowerShell cmdlet creates the package.zipfile. No root level folder or version folder is
required. The package format must be a.zipfile and can't exceed a total size of 100 MB when
uncompressed.
.zip
.zip
You can expand the archive to inspect it by using theExpand-Archivecmdlet.
Expand-Archive
Expand-Archive -Path .\MyConfig.zip -DestinationPath MyConfigZip
Expand-Archive -Path .\MyConfig.zip -DestinationPath MyConfigZip
You can get the total size of the uncompressed package with PowerShell.
Get-ChildItem -Recurse -Path .\MyConfigZip |
    Measure-Object -Sum Length |
    ForEach-Object -Process {
        $Size = [math]::Round(($_.Sum / 1MB), 2)
        "$Size MB"
    }
Get-ChildItem -Recurse -Path .\MyConfigZip |
    Measure-Object -Sum Length |
    ForEach-Object -Process {
        $Size = [math]::Round(($_.Sum / 1MB), 2)
        "$Size MB"
    }
Extending machine configuration with third-party tools
The artifact packages for machine configuration can be extended to include third-party tools.
Extending machine configuration requires development of two components.
A Desired State Configuration resource that handles all activity related to managing the
third-party toolInstallInvokeConvert output
Install
Invoke
Convert output
Content in the correct format for the tool to natively consume
The DSC resource requires custom development if a community solution doesn't already exist.
Community solutions can be discovered by searching the PowerShell Gallery for tagGuestConfiguration.
Note
Machine configuration extensibility is a "bring your own license" scenario. Ensure you have met
the terms and conditions of any third party tools before use.
After the DSC resource has been installed in the development environment, use theFilesToIncludeparameter forNew-GuestConfigurationPackageto include content for the
third-party platform in the content artifact.
New-GuestConfigurationPackage
Next step
Test a custom machine configuration package
Feedback
Was this page helpful?
Additional resources