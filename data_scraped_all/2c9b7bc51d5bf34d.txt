Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Using Azure Redis as session cache for WebSphere Liberty or Open Liberty
Article
2025-03-04
11 contributors
In this article
This article describes how to use Azure Redis as the HTTP session cache for WebSphere Liberty or Open Liberty.
In this guide, you'll:
Create an Azure Managed Redis instance as session cache.
Prepare a sample application that enables persistence of HTTP sessions.
Run the sample application locally.
This article is intended to help you quickly get to deployment. Before going to production, you should exploreTuning Liberty.
If you're interested in providing feedback or working closely on your migration scenarios with the engineering team developing WebSphere on Azure solutions, fill out this shortsurvey on WebSphere migrationand include your contact information. The team of program managers, architects, and engineers will promptly get in touch with you to initiate close collaboration.
Prerequisites
An Azure subscription. If you don't have anAzure subscription, create afree accountbefore you begin.
Prepare a local machine with Unix-like operating system installed - for example, Ubuntu, macOS, or Windows Subsystem for Linux.
Install a Java Standard Edition (SE) implementation version 17 or later - for example,Microsoft build of OpenJDK.
InstallMaven3.9.8 or higher.
Ensure thatGitis installed.
Create an Azure Managed Redis instance
Azure Managed Redisprovides an in-memory data store based on theRedis Enterprisesoftware. Use the following steps to create an Azure Managed Redis instance, and then note down its connection information. You use this information later to configure the sample application.
Create an Azure Managed Redis instance by following the steps inQuickstart: Create an Azure Managed Redis Instance. Carefully note the following differences:At step 3 of the sectionCreate a Redis instance, where you're on theBasicstab, select aCache SKUthat supports Azure Managed Redis. For this guide, selectBalanced (For general purpose workloads with typical performance requirements). For more information, seeChoosing the right tier.At step 4 of the sectionCreate a Redis instance, where you're on theNetworkingtab, for theConnectivityoption, selectPublic Endpoint. This option is the best choice for simplicity when using this guide. For production, you should consider usingPrivate Endpointfor better security.At step 5 of the sectionCreate a Redis instance, where you're on theAdvancedtab, configure the following settings:ForAuthentication, enableAccess Keys Authentication. This option is the best choice for simplicity when using this guide. For optimal security, we recommend using Microsoft Entra ID with managed identities to authorize requests against your cache, if possible. Authorization by using Microsoft Entra ID and managed identities provides superior security and ease of use over shared access key authorization. For more information about using managed identities with your cache, seeUse Microsoft Entra ID for cache authentication.SetClustering policytoEnterprisefor a nonclustered cache, which works for this guide where single node configuration is used. For more information, seeClustering on Enterprise.
Create an Azure Managed Redis instance by following the steps inQuickstart: Create an Azure Managed Redis Instance. Carefully note the following differences:
At step 3 of the sectionCreate a Redis instance, where you're on theBasicstab, select aCache SKUthat supports Azure Managed Redis. For this guide, selectBalanced (For general purpose workloads with typical performance requirements). For more information, seeChoosing the right tier.
At step 3 of the sectionCreate a Redis instance, where you're on theBasicstab, select aCache SKUthat supports Azure Managed Redis. For this guide, selectBalanced (For general purpose workloads with typical performance requirements). For more information, seeChoosing the right tier.
At step 4 of the sectionCreate a Redis instance, where you're on theNetworkingtab, for theConnectivityoption, selectPublic Endpoint. This option is the best choice for simplicity when using this guide. For production, you should consider usingPrivate Endpointfor better security.
At step 4 of the sectionCreate a Redis instance, where you're on theNetworkingtab, for theConnectivityoption, selectPublic Endpoint. This option is the best choice for simplicity when using this guide. For production, you should consider usingPrivate Endpointfor better security.
At step 5 of the sectionCreate a Redis instance, where you're on theAdvancedtab, configure the following settings:ForAuthentication, enableAccess Keys Authentication. This option is the best choice for simplicity when using this guide. For optimal security, we recommend using Microsoft Entra ID with managed identities to authorize requests against your cache, if possible. Authorization by using Microsoft Entra ID and managed identities provides superior security and ease of use over shared access key authorization. For more information about using managed identities with your cache, seeUse Microsoft Entra ID for cache authentication.SetClustering policytoEnterprisefor a nonclustered cache, which works for this guide where single node configuration is used. For more information, seeClustering on Enterprise.
At step 5 of the sectionCreate a Redis instance, where you're on theAdvancedtab, configure the following settings:
ForAuthentication, enableAccess Keys Authentication. This option is the best choice for simplicity when using this guide. For optimal security, we recommend using Microsoft Entra ID with managed identities to authorize requests against your cache, if possible. Authorization by using Microsoft Entra ID and managed identities provides superior security and ease of use over shared access key authorization. For more information about using managed identities with your cache, seeUse Microsoft Entra ID for cache authentication.
ForAuthentication, enableAccess Keys Authentication. This option is the best choice for simplicity when using this guide. For optimal security, we recommend using Microsoft Entra ID with managed identities to authorize requests against your cache, if possible. Authorization by using Microsoft Entra ID and managed identities provides superior security and ease of use over shared access key authorization. For more information about using managed identities with your cache, seeUse Microsoft Entra ID for cache authentication.
SetClustering policytoEnterprisefor a nonclustered cache, which works for this guide where single node configuration is used. For more information, seeClustering on Enterprise.
SetClustering policytoEnterprisefor a nonclustered cache, which works for this guide where single node configuration is used. For more information, seeClustering on Enterprise.
After the deployment completes, selectGo to resourceif you're on theDeploymentpage. Otherwise, navigate to the Azure portal, find, and select your Azure Managed Redis instance.
After the deployment completes, selectGo to resourceif you're on theDeploymentpage. Otherwise, navigate to the Azure portal, find, and select your Azure Managed Redis instance.
On theOverviewpage, note down theEndpointvalue. You use this value in theREDIS_CACHE_ADDRESSenvironment variable later.
On theOverviewpage, note down theEndpointvalue. You use this value in theREDIS_CACHE_ADDRESSenvironment variable later.
REDIS_CACHE_ADDRESS
SelectSettings>Authentication. SelectAccess keysand note down thePrimaryvalue. You use this value as theREDIS_CACHE_KEYenvironment variable later.
SelectSettings>Authentication. SelectAccess keysand note down thePrimaryvalue. You use this value as theREDIS_CACHE_KEYenvironment variable later.
REDIS_CACHE_KEY
Use the following command to export the environment variablesREDIS_CACHE_ADDRESSandREDIS_CACHE_KEY:export REDIS_CACHE_ADDRESS=rediss://<your-redis-cache-endpoint>
export REDIS_CACHE_KEY=<your-primary-access-key>
Use the following command to export the environment variablesREDIS_CACHE_ADDRESSandREDIS_CACHE_KEY:
REDIS_CACHE_ADDRESS
REDIS_CACHE_KEY
export REDIS_CACHE_ADDRESS=rediss://<your-redis-cache-endpoint>
export REDIS_CACHE_KEY=<your-primary-access-key>
export REDIS_CACHE_ADDRESS=rediss://<your-redis-cache-endpoint>
export REDIS_CACHE_KEY=<your-primary-access-key>
Prepare the sample application
WebSphere Liberty and Open Liberty provide a session cache feature that enables you to store HTTP session data in an external cache. In this guide, you use theJCache Session Persistencefeature to store the session data in the Azure Managed Redis instance.
Use the following commands to clone the sample code for this guide. The sample is in theopen-liberty-on-aksrepository on GitHub. There are a few samples in the repository. This article usesjava-app-jcache.
git clone https://github.com/Azure-Samples/open-liberty-on-aks.git
cd open-liberty-on-aks
git checkout 20250228
cd java-app-jcache
git clone https://github.com/Azure-Samples/open-liberty-on-aks.git
cd open-liberty-on-aks
git checkout 20250228
cd java-app-jcache
If you see a message about being indetached HEADstate, this message is safe to ignore. It just means you checked out a tag.
detached HEAD
The application has the following file structure:
java-app-jcache/
âââ pom.xml
âââ pom-redisson.xml
âââ src
    âââ main
        âââ docker
        â   âââ Dockerfile
        â   âââ Dockerfile-wlp
        âââ java
        âââ liberty
        â   âââ config
        â       âââ server.xml
        âââ redisson
        â   âââ redisson-config.yaml
        âââ resources
        âââ webapp
java-app-jcache/
âââ pom.xml
âââ pom-redisson.xml
âââ src
    âââ main
        âââ docker
        â   âââ Dockerfile
        â   âââ Dockerfile-wlp
        âââ java
        âââ liberty
        â   âââ config
        â       âââ server.xml
        âââ redisson
        â   âââ redisson-config.yaml
        âââ resources
        âââ webapp
Thepom.xmlfile is the Maven project file that contains the dependencies and plugins for the sample application.
Thepom-redisson.xmlfile is used to copy dependencies for the Redisson client library to the shared resources directory of the Liberty server later.
Thejava,resources, andwebappdirectories contain the source code of the sample application.
In theliberty/configdirectory, theserver.xmlfile is used to configure the HTTP session cache for Open Liberty and WebSphere Liberty.
In theredissondirectory, theredisson-config.yamlfile is used to configure the connection to the Azure Managed Redis instance.
Thedockerdirectory contains two Dockerfiles.Dockerfileis used to build an image with Open Liberty andDockerfile-wlpis used to build an image with WebSphere Liberty.
Run the sample application locally
Use the following steps to build and run your sample application locally. These steps use Maven and theliberty-maven-plugin. For more information about theliberty-maven-plugin, seeBuilding a web application with Maven.
liberty-maven-plugin
liberty-maven-plugin
Verify the current working directory isjava-app-jcachein your local clone.
Verify the current working directory isjava-app-jcachein your local clone.
Run the Maven commandmvn clean packageand package the application.
Run the Maven commandmvn clean packageand package the application.
mvn clean package
Runmvn -Predisson validateto copy the Redisson configuration file to the correct target location. This step also inserts the values of the environment variablesREDIS_CACHE_ADDRESSandREDIS_CACHE_KEYinto theredisson-config.yamlfile, which is referenced by theserver.xmlfile.
Runmvn -Predisson validateto copy the Redisson configuration file to the correct target location. This step also inserts the values of the environment variablesREDIS_CACHE_ADDRESSandREDIS_CACHE_KEYinto theredisson-config.yamlfile, which is referenced by theserver.xmlfile.
mvn -Predisson validate
REDIS_CACHE_ADDRESS
REDIS_CACHE_KEY
Runmvn dependency:copy-dependencies -f pom-redisson.xml -DoutputDirectory=target/liberty/wlp/usr/shared/resourcesto copy the Redisson client library and its dependencies to the shared resources directory of the Liberty server.
Runmvn dependency:copy-dependencies -f pom-redisson.xml -DoutputDirectory=target/liberty/wlp/usr/shared/resourcesto copy the Redisson client library and its dependencies to the shared resources directory of the Liberty server.
mvn dependency:copy-dependencies -f pom-redisson.xml -DoutputDirectory=target/liberty/wlp/usr/shared/resources
Run the Maven commandmvn liberty:devand start the application. If the application is successfully started, you should seeThe defaultServer server is ready to run a smarter planet.in the command output.You should see output similar to the following if the Redis connection is successful.[INFO] [err] [Default Executor-thread-3] INFO org.redisson.Version - Redisson 3.23.4
[INFO] [err] [redisson-netty-2-7] INFO org.redisson.connection.pool.MasterPubSubConnectionPool - 1 connections initialized for redacted.<region>.redis.azure.net/<ip_address>:10000
[INFO] [err] [redisson-netty-2-20] INFO org.redisson.connection.pool.MasterConnectionPool - 24 connections initialized for redacted.<region>.redis.azure.net/<ip_address>:10000
Run the Maven commandmvn liberty:devand start the application. If the application is successfully started, you should seeThe defaultServer server is ready to run a smarter planet.in the command output.
mvn liberty:dev
The defaultServer server is ready to run a smarter planet.
You should see output similar to the following if the Redis connection is successful.
[INFO] [err] [Default Executor-thread-3] INFO org.redisson.Version - Redisson 3.23.4
[INFO] [err] [redisson-netty-2-7] INFO org.redisson.connection.pool.MasterPubSubConnectionPool - 1 connections initialized for redacted.<region>.redis.azure.net/<ip_address>:10000
[INFO] [err] [redisson-netty-2-20] INFO org.redisson.connection.pool.MasterConnectionPool - 24 connections initialized for redacted.<region>.redis.azure.net/<ip_address>:10000
[INFO] [err] [Default Executor-thread-3] INFO org.redisson.Version - Redisson 3.23.4
[INFO] [err] [redisson-netty-2-7] INFO org.redisson.connection.pool.MasterPubSubConnectionPool - 1 connections initialized for redacted.<region>.redis.azure.net/<ip_address>:10000
[INFO] [err] [redisson-netty-2-20] INFO org.redisson.connection.pool.MasterConnectionPool - 24 connections initialized for redacted.<region>.redis.azure.net/<ip_address>:10000
Test the application
Open a web browser tohttp://localhost:9080and you should see the application home page.

In theNew coffeeform, set values for the fieldsNameandPrice, and then selectSubmit. The application creates a new coffee, persists it, and also stores the HTTP session in the Azure Managed Redis instance.
After a few seconds, you see the new coffee displayed in the tableOur coffees.

To demonstrate that the session data can be retrieved from Redis, useCtrl+Cto stop the application and restart it with themvn liberty:devcommand.
mvn liberty:dev
Then, refresh the application home page. You should see the same session data displayed in the sectionNew coffee. Stop the application when you're done testing.
Containerize the application
Optionally, you can package and run the application in a container by using the following steps. The sample application provides two Dockerfiles for Open Liberty and WebSphere Liberty. This guide uses the Dockerfile for Open Liberty, but you can use the Dockerfile for WebSphere Liberty by following similar steps.
Install Docker for your OS. For more information, seeGet Docker.
Install Docker for your OS. For more information, seeGet Docker.
Use the following command to build the Docker image:docker build -t javaee-cafe-jcache:v1 -f src/main/docker/Dockerfile .
Use the following command to build the Docker image:
docker build -t javaee-cafe-jcache:v1 -f src/main/docker/Dockerfile .
docker build -t javaee-cafe-jcache:v1 -f src/main/docker/Dockerfile .
Use the following command to start the Docker container:docker run -it --rm \
   -p 9080:9080 \
   -e REDIS_CACHE_ADDRESS=${REDIS_CACHE_ADDRESS} \
   -e REDIS_CACHE_KEY=${REDIS_CACHE_KEY} \
   --mount type=bind,source=$(pwd)/target/liberty/wlp/usr/servers/defaultServer/redisson-config.yaml,target=/config/redisson-config.yaml \
   javaee-cafe-jcache:v1After the container starts, you can test it by using steps similar to the ones you use to run the application locally without Docker.
Use the following command to start the Docker container:
docker run -it --rm \
   -p 9080:9080 \
   -e REDIS_CACHE_ADDRESS=${REDIS_CACHE_ADDRESS} \
   -e REDIS_CACHE_KEY=${REDIS_CACHE_KEY} \
   --mount type=bind,source=$(pwd)/target/liberty/wlp/usr/servers/defaultServer/redisson-config.yaml,target=/config/redisson-config.yaml \
   javaee-cafe-jcache:v1
docker run -it --rm \
   -p 9080:9080 \
   -e REDIS_CACHE_ADDRESS=${REDIS_CACHE_ADDRESS} \
   -e REDIS_CACHE_KEY=${REDIS_CACHE_KEY} \
   --mount type=bind,source=$(pwd)/target/liberty/wlp/usr/servers/defaultServer/redisson-config.yaml,target=/config/redisson-config.yaml \
   javaee-cafe-jcache:v1
After the container starts, you can test it by using steps similar to the ones you use to run the application locally without Docker.
Clean up resources
To avoid Azure charges, you should clean up unnecessary resources. When the Azure Managed Redis instance is no longer needed, find its resource group name and delete it from the Azure portal.
For more information, seeDelete resource groups.
Next steps
You can learn more from references used in this guide:
Configuring Liberty session persistence with JCache
JCache support of Redisson
Open Liberty Server Configuration
If you want to deploy the sample application to Azure, reference the following articles:
Deploy a Java application with Open Liberty or WebSphere Liberty on an Azure Kubernetes Service (AKS) cluster
Deploy WebSphere Liberty and Open Liberty on Azure Red Hat OpenShift
Deploy a Java application with Open Liberty on Azure Container Apps
To explore options to run WebSphere products on Azure, seeWhat are solutions to run the WebSphere family of products on Azure?
Feedback
Was this page helpful?
Additional resources