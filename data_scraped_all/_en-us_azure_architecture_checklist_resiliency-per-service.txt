Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Resiliency checklist for specific Azure services
Article
2023-07-26
27 contributors
In this article
Resiliency is the ability of a system to recover from failures and continue to function. Every technology has its own particular failure modes, which you must consider when designing and implementing your application. Use this checklist to review the resiliency considerations for specific Azure services. For more information about designing resilient applications, seeDesign reliable Azure applications.
App Service
Use Standard or Premium tier.These tiers support staging slots and automated backups. For more information, seeAzure App Service plans in-depth overview
Avoid scaling up or down.Instead, select a tier and instance size that meet your performance requirements under typical load, and thenscale outthe instances to handle changes in traffic volume. Scaling up and down may trigger an application restart.
Store configuration as app settings.Use app settings to hold configuration settings as app settings. Define the settings in your Resource Manager templates, or using PowerShell, so that you can apply them as part of an automated deployment / update process, which is more reliable. For more information, seeConfigure web apps in Azure App Service.
Create separate App Service plans for production and test.Don't use slots on your production deployment for testing. All apps within the same app service plan share the same VM instances. If you put production and test deployments in the same plan, it can negatively affect the production deployment. For example, load tests might degrade the live production site. By putting test deployments into a separate plan, you isolate them from the production version.
Separate web apps from web APIs.If your solution has both a web front end and a web API, consider decomposing them into separate App Service apps. This design makes it easier to decompose the solution by workload. You can run the web app and the API in separate App Service plans, so they can be scaled independently. If you don't need that level of scalability at first, you can deploy the apps into the same plan, and move them into separate plans later, if needed.
Deploy zone-redundant App Service plans.In supported regions, App Service plans can be deployed as zone redundant, which means that the instances are automatically distributed across availability zones. App Service automatically distributes traffic between the zones, and handles failover if a zone experiences an outage. For more information, seeMigrate App Service to availability zone support.
Avoid using the App Service backup feature to back up Azure SQL databases.Instead, useSQL Database automated backups. App Service backup exports the database to a SQL BACPAC file, which costs DTUs.
Deploy to a staging slot.Create a deployment slot for staging. Deploy application updates to the staging slot, and verify the deployment before swapping it into production. This reduces the chance of a bad update in production. It also ensures that all instances are warmed up before being swapped into production. Many applications have a significant warmup and cold-start time. For more information, seeSet up staging environments for web apps in Azure App Service.
Create a deployment slot to hold the last-known-good (LKG) deployment.When you deploy an update to production, move the previous production deployment into the LKG slot. This makes it easier to roll back a bad deployment. If you discover a problem later, you can quickly revert to the LKG version. For more information, seeBasic web application.
Enable diagnostics logging, including application logging and web server logging. Logging is important for monitoring and diagnostics. SeeEnable diagnostics logging for web apps in Azure App Service
Log to blob storage.This makes it easier to collect and analyze the data.
Create a separate storage account for logs.Don't use the same storage account for logs and application data. This helps to prevent logging from reducing application performance.
Monitor performance.Use a performance monitoring service such asNew RelicorApplication Insightsto monitor application performance and behavior under load. Performance monitoring gives you real-time insight into the application. It enables you to diagnose issues and perform root cause analysis of failures.
Azure Load Balancer
Select Standard SKU.Standard load balancer provides a dimension of reliability that Basic does not - that of availability zones and zone resiliency. This means when a zone goes down, your zone-redundant Standard Load Balancer will not be affected. This ensures your deployments can withstand zone failures within a region. In addition, Standard Load Balancer supports global load balancing ensuring your application is not affected by region failures either.
Provision at least two instances.Deploy Azure Load Balancer with at least two instances in the backend. A single instance could result in a single point of failure. In order to build for scale, you should pair load balancer with Virtual Machine Scale Sets.
Use outbound rules.Outbound rules ensure that you are not faced with connection failures as a result of Source Network Address Translation (SNAT) port exhaustion. Learn more aboutoutbound connectivity. While outbound rules will help improve the solution for small to mid size deployments, for production workloads, we recommend coupling Standard load balancer or any subnet deployment withVNet network address translation (NAT).
Azure Public IPs
Select Standard SKU.Standard Public IPs provide availability zones and zone resiliency unlike Basic Public IPs. If using a service that needs a public IP, select a zone-redundant public IP. For existing IPs, upgrade them from Basic to Standard to get the benefits ofzone-redundant by default.
Application Gateway
Provision at least two instances.Deploy Application Gateway with at least two instances. A single instance is a single point of failure. Use two or more instances for redundancy and scalability. In order to qualify for theservice-level agreement (SLA), you must provision two or more medium or larger instances.
Azure Cosmos DB
Configure zone redundancy.When you use zone redundancy, Azure Cosmos DB synchronously replicates all writes across availability zones. It automatically fails over in the event of a zone outage. For more information, seeAchieve high availability with Azure Cosmos DB.
Replicate the database across regions.Azure Cosmos DB allows you to associate any number of Azure regions with an Azure Cosmos DB database account. An Azure Cosmos DB database can have one write region and multiple read regions. If there is a failure in the write region, you can read from another replica. The Client SDK handles this automatically. You can also fail over the write region to another region. For more information, seeHow to distribute data globally with Azure Cosmos DB.
Event Hubs
Use checkpoints. An event consumer should write its current position to persistent storage at some predefined interval. That way, if the consumer experiences a fault (for example, the consumer crashes, or the host fails), then a new instance can resume reading the stream from the last recorded position. For more information, seeEvent consumers.
Handle duplicate messages.If an event consumer fails, message processing is resumed from the last recorded checkpoint. Any messages that were already processed after the last checkpoint will be processed again. Therefore, your message processing logic must be idempotent, or the application must be able to deduplicate messages.
Handle exceptions.. An event consumer typically processes a batch of messages in a loop. You should handle exceptions within this processing loop to avoid losing an entire batch of messages if a single message causes an exception.
Use a dead-letter queue.If processing a message results in a nontransient failure, put the message onto a dead-letter queue, so that you can track the status. Depending on the scenario, you might retry the message later, apply a compensating transaction, or take some other action. Note that Event Hubs does not have any built-in dead-letter queue functionality. You can use Azure Queue Storage or Service Bus to implement a dead-letter queue, or use Azure Functions or some other eventing mechanism.
Configure zone redundancy. When zone redundancy is enabled on your namespace, Event Hubs automatically replicates changes between multiple availability zones. If one availability zone fails, failover happens automatically. For more information, seeAvailability zones.
Implement disaster recovery (DR) by failing over to a secondary Event Hubs namespace.For more information, seeAzure Event Hubs Geo-disaster recovery.
Azure Cache for Redis
Configure zone redundancy.When zone redundancy is enabled on your cache, Azure Cache for Redis spreads the virtual machines that host your cache across multiple availability zones. Zone redundancy provides high availability and fault tolerance in the event of a datacenter outage. For more information, seeEnable zone redundancy for Azure Cache for Redis.
Configure Geo-replication. Geo-replication provides a mechanism for linking two Premium-tier Azure Cache for Redis instances. Data written to the primary cache is replicated to a secondary read-only cache. For more information, seeHow to configure geo-replication for Azure Cache for Redis.
Configure data persistence.Redis persistence allows you to persist data stored in Redis. You can also take snapshots and back up the data, which you can load in case of a hardware failure. For more information, seeHow to configure data persistence for a Premium-tier Azure Cache for Redis.
If you are using Azure Cache for Redis as a temporary data cache and not as a persistent store, these recommendations may not apply.
Azure AI Search
Provision more than one replica.Use at least two replicas for read high-availability, or three for read-write high-availability.
Use zone redundancy.You can deploy AI Search replicas across multiple availability zones. This approach helps your service to remain operational even when datacenter outages occur. For more information, seeReliability in AI Search
Configure indexers for multi-region deployments.If you have a multi-region deployment, consider your options for continuity in indexing.
If the data source is geo-replicated, you should generally point each indexer of each regional AI Search service to its local data source replica. However, that approach is not recommended for large datasets stored in Azure SQL Database. The reason is that AI Search cannot perform incremental indexing from secondary SQL Database replicas, only from primary replicas. Instead, point all indexers to the primary replica. After a failover, point the AI Search indexers at the new primary replica.
If the data source is geo-replicated, you should generally point each indexer of each regional AI Search service to its local data source replica. However, that approach is not recommended for large datasets stored in Azure SQL Database. The reason is that AI Search cannot perform incremental indexing from secondary SQL Database replicas, only from primary replicas. Instead, point all indexers to the primary replica. After a failover, point the AI Search indexers at the new primary replica.
If the data source is not geo-replicated, point multiple indexers at the same data source, so that AI Search services in multiple regions continuously and independently index from the data source. For more information, seeAI Search reliability considerations.
If the data source is not geo-replicated, point multiple indexers at the same data source, so that AI Search services in multiple regions continuously and independently index from the data source. For more information, seeAI Search reliability considerations.
Service Bus
Use Premium tier for production workloads.Service Bus Premium Messagingprovides dedicated and reserved processing resources, and memory capacity to support predictable performance and throughput. Premium Messaging tier also gives you access to new features that are available only to premium customers at first. You can decide the number of messaging units based on expected workloads.
Handle duplicate messages. If a publisher fails immediately after sending a message, or experiences network or system issues, it may erroneously fail to record that the message was delivered, and may send the same message to the system twice. Service Bus can handle this issue by enabling duplicate detection. For more information, seeDuplicate detection.
Handle exceptions. Messaging APIs generate exceptions when a user error, configuration error, or other error occurs. The client code (senders and receivers) should handle these exceptions in their code. This is especially important in batch processing, where exception handling can be used to avoid losing an entire batch of messages. For more information, seeService Bus messaging exceptions.
Retry policy. Service Bus allows you to pick the best retry policy for your applications. The default policy is to allow 9 maximum retry attempts, and wait for 30 seconds but this can be further adjusted.
Use a dead-letter queue. If a message cannot be processed or delivered to any receiver after multiple retries, it is moved to a dead letter queue. Implement a process to read messages from the dead letter queue, inspect them, and remediate the problem. Depending on the scenario, you might retry the message as-is, make changes and retry, or discard the message. For more information, seeOverview of Service Bus dead-letter queues.
Use zone redundancy. When zone redundancy is enabled on your namespace, Service Bus automatically replicates changes between multiple availability zones. If one availability zone fails, failover happens automatically. For more information, seeBest practices for insulating applications against Service Bus outages and disasters.
Use Geo-Disaster Recovery. Geo-disaster recovery ensures that data processing continues to operate in a different region or datacenter if an entire Azure region or datacenter becomes unavailable due to a disaster. For more information, seeAzure Service Bus Geo-disaster recovery.
Storage
Use zone-redundant storage (ZRS).Zone-redundant storage (ZRS) copies your data synchronously across three Azure availability zones in the primary region. If an availability zone experiences an outage, Azure Storage automatically fails over to an alternative zone. For more information, seeAzure Storage redundancy.
When using geo-redundancy, configure read-access.If you use a multi-region architecture, use a suitable storage tier for global redundancy. With read-access geo-redundant storage (RA-GRS) or read-access geo-zone-redundant storage (RA-GZRS), your data is replicated to a secondary region. RA-GRS uses locally redundant storage (LRS) in the primary region, while RA-GZRS uses zone-redundant storage (ZRS) in the primary region. Both configurations provide read-only access to your data in the secondary region. If there is a storage outage in the primary region, the application can read the data from the secondary region if you have designed it for this possibility. For more information, seeAzure Storage redundancy.
For VM disks, use managed disks.Managed disksprovide better reliability for VMs in an availability set, because the disks are sufficiently isolated from each other to avoid single points of failure. Also, managed disks aren't subject to the IOPS limits of VHDs created in a storage account. For more information, seeManage the availability of Windows virtual machines in Azure.
For Queue storage, create a backup queue in another region.For Queue Storage, a read-only replica has limited use, because you can't queue or dequeue items. Instead, create a backup queue in a storage account in another region. If there is an Azure Storage outage, the application can use the backup queue, until the primary region becomes available again. That way, the application can continue to process new requests during the outage.
SQL Database
Use Standard or Premium tier.These tiers provide a longer point-in-time restore period (35 days). For more information, seeSQL Database options and performance.
Enable SQL Database auditing.Auditing can be used to diagnose malicious attacks or human error. For more information, seeGet started with SQL database auditing.
Use Active Geo-ReplicationUse Active Geo-Replication to create a readable secondary in a different region. If your primary database fails, or simply needs to be taken offline, perform a manual failover to the secondary database. Until you fail over, the secondary database remains read-only. For more information, seeSQL Database Active Geo-Replication.
Use sharding.Consider using sharding to partition the database horizontally. Sharding can provide fault isolation. For more information, seeScaling out with Azure SQL Database.
Use point-in-time restore to recover from human error.Point-in-time restore returns your database to an earlier point in time. For more information, seeRecover an Azure SQL database using automated database backups.
Use geo-restore to recover from a service outage.Geo-restore restores a database from a geo-redundant backup. For more information, seeRecover an Azure SQL database using automated database backups.
Azure Synapse Analytics
Do not disable geo-backup.By default, Azure Synapse Analytics takes a full backup of your data in Dedicated SQL Pool every 24 hours for disaster recovery. It is not recommended to turn this feature off. For more information, seeGeo-backups.
SQL Server running in a VM
Back up the database. If you are already usingAzure Backupto back up your VMs, consider usingAzure Backup for SQL Server workloads using DPM. With this approach, there is one Backup administrator role for the organization and a unified recovery procedure for VMs and SQL Server. Otherwise, useSQL Server Managed Backup to Microsoft Azure.
Traffic Manager
Perform manual failback.After a Traffic Manager failover, perform manual failback, rather than automatically failing back. Before failing back, verify that all application subsystems are healthy. Otherwise, you can create a situation where the application flips back and forth between datacenters.
Create a health probe endpoint.Create a custom endpoint that reports on the overall health of the application. This enables Traffic Manager to fail over if any critical path fails, not just the front end. The endpoint should return an HTTP error code if any critical dependency is unhealthy or unreachable. Don't report errors for non-critical services, however. Otherwise, the health probe might trigger failover when it's not needed, creating false positives. For more information, seeTraffic Manager endpoint monitoring and failover.
Virtual Machines
Avoid running a production workload on a single VM.A single VM deployment is not resilient to planned or unplanned maintenance. Instead, put multiple VMs in an availability set orvirtual machine scale set, with a load balancer in front.
Specify an availability set when you provision the VM.Currently, there is no way to add a VM to an availability set after the VM is provisioned. When you add a new VM to an existing availability set, make sure to create a NIC for the VM, and add the NIC to the back-end address pool on the load balancer. Otherwise, the load balancer won't route network traffic to that VM.
Put each application tier into a separate Availability Set.In an N-tier application, don't put VMs from different tiers into the same availability set. VMs in an availability set are placed across fault domains (FDs) and update domains (UD). However, to get the redundancy benefit of FDs and UDs, every VM in the availability set must be able to handle the same client requests.
Replicate VMs using Azure Site Recovery.When you replicate Azure VMs usingSite Recovery, all the VM disks are continuously replicated to the target region asynchronously. The recovery points are created every few minutes. This gives you a Recovery Point Objective (RPO) in the order of minutes. You can conduct disaster recovery drills as many times as you want, without affecting the production application or the ongoing replication. For more information, seeRun a disaster recovery drill to Azure.
Choose the right VM size based on performance requirements.When moving an existing workload to Azure, start with the VM size that's the closest match to your on-premises servers. Then measure the performance of your actual workload with respect to CPU, memory, and disk IOPS, and adjust the size if needed. This helps to ensure the application behaves as expected in a cloud environment. Also, if you need multiple NICs, be aware of the NIC limit for each size.
Use managed disks for VHDs.Managed disksprovide better reliability for VMs in an availability set, because the disks are sufficiently isolated from each other to avoid single points of failure. Also, managed disks aren't subject to the IOPS limits of VHDs created in a storage account. For more information, seeManage the availability of Windows virtual machines in Azure.
Install applications on a data disk, not the OS disk.Otherwise, you may reach the disk size limit.
Use Azure Backup to back up VMs.Backups protect against accidental data loss. For more information, seeProtect Azure VMs with a Recovery Services vault.
Enable diagnostic logs.Include basic health metrics, infrastructure logs, andboot diagnostics. Boot diagnostics can help you diagnose a boot failure if your VM gets into a nonbootable state. For more information, seeOverview of Azure Diagnostic Logs.
Configure Azure Monitor.Collect and analyze monitoring data from Azure Virtual Machines including the guest operating system and the workloads that run in it, seeAzure MonitorandQuickstart: Azure Monitor.
Virtual Network
To allow or block public IP addresses, add a network security group to the subnet.Block access from malicious users, or allow access only from users who have privilege to access the application.
Create a custom health probe.Load Balancer Health Probes can test either HTTP or TCP. If a VM runs an HTTP server, the HTTP probe is a better indicator of health status than a TCP probe. For an HTTP probe, use a custom endpoint that reports the overall health of the application, including all critical dependencies. For more information, seeAzure Load Balancer overview.
Don't block the health probe.The Load Balancer Health probe is sent from a known IP address, 168.63.129.16. Don't block traffic to or from this IP in any firewall policies or network security group rules. Blocking the health probe would cause the load balancer to remove the VM from rotation.
Enable Load Balancer logging.The logs show how many VMs on the back-end are not receiving network traffic due to failed probe responses. For more information, seeLog analytics for Azure Load Balancer.
Feedback
Was this page helpful?
Additional resources