Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Use personal access tokens
Article
2025-03-10
19 contributors
In this article
Azure DevOps Services | Azure DevOps Server 2022 - Azure DevOps Server 2019
A Personal Access Token (PAT) serves as an alternative password for authenticating into Azure DevOps. This PAT identifies you and determines your accessibility and scope of access. Therefore, treat PATs with the same level of caution as passwords.
Important
We recommend usingMicrosoft Entra tokens. For more information about our efforts to reduce PAT usage, seeour blog.
Review ourauthentication guidanceto choose the appropriate authentication mechanism for your needs.
When you use Microsoft tools, your Microsoft account (MSA) or Microsoft Entra ID is recognized and supported. If you use tools that don't support Microsoft Entra accounts or don't want to share your primary credentials, PATs can be a suitable alternative. However, we recommend usingMicrosoft Entra tokensover PATs whenever possible.
You can manage PATs through the following methods:
User interface (UI):Through user settings, as detailed in this article.
PAT Lifecycle Management APIs
Git credential managersfor Git operations. Credential managers facilitate token management. Without one, users must input their credentials each time.
Prerequisites
Create a PAT
Sign in to your organization (https://dev.azure.com/{Your_Organization}).
Sign in to your organization (https://dev.azure.com/{Your_Organization}).
https://dev.azure.com/{Your_Organization}
From your home page, open user settingsand selectPersonal access tokens.
From your home page, open user settingsand selectPersonal access tokens.

Select+ New Token.
Select+ New Token.

Name your token, select the organization where you want to use the token, and then set your token to automatically expire after a set number of days.
Name your token, select the organization where you want to use the token, and then set your token to automatically expire after a set number of days.

Select thescopesfor this token to authorize foryour specific tasks.For example, to create a token for abuild and release agentto authenticate to Azure DevOps, set the token's scope toAgent Pools (Read & manage). To read audit log events and manage or delete streams, selectRead Audit Log, and then selectCreate.NoteYou might be restricted from creating full-scoped PATs. If so, your Azure DevOps Administrator in Microsoft Entra ID enabled a policy that limits you to a specific custom-defined set of scopes. For more information, seeManage PATs with policies/Restrict creation of full-scoped PATs.
For a custom-defined PAT, the required scope for accessing the Component Governance API,vso.governance, isn't selectable in the UI.
Select thescopesfor this token to authorize foryour specific tasks.
For example, to create a token for abuild and release agentto authenticate to Azure DevOps, set the token's scope toAgent Pools (Read & manage). To read audit log events and manage or delete streams, selectRead Audit Log, and then selectCreate.

Note
You might be restricted from creating full-scoped PATs. If so, your Azure DevOps Administrator in Microsoft Entra ID enabled a policy that limits you to a specific custom-defined set of scopes. For more information, seeManage PATs with policies/Restrict creation of full-scoped PATs.
For a custom-defined PAT, the required scope for accessing the Component Governance API,vso.governance, isn't selectable in the UI.
vso.governance
When you're done, copy the token and store it in a secure location. For your security, it doesn't display again.
When you're done, copy the token and store it in a secure location. For your security, it doesn't display again.

Use your PAT anywhere your user credentials are required for authentication in Azure DevOps.
Important
Treat a PAT with the same caution as your password and keep it confidential.
Sign in with your new PAT within 90 days for organizations backed by Microsoft Entra ID; otherwise, the PAT becomes inactive. For more information, seeUser sign-in frequency for Conditional Access.
Notifications
During the lifespan of a PAT, users receive two notifications: the first at the time of creation and the second seven days before its expiration.
After you create a PAT, you receive a notification similar to the following example. This notification serves as confirmation that your PAT was successfully added to your organization.

The following image shows an example of the seven-day notification before your PAT expires.

For more information, seeConfigure an SMTP server and customize email for alerts and feedback requests.
If you receive an unexpected PAT notification, it might mean that an administrator or tool created a PAT for you. Here are some examples:
A token named "git:https://dev.azure.com/{Your_Organization}on YourMachine" gets created when you connect to an Azure DevOps Git repo via git.exe.
https://dev.azure.com/{Your_Organization}
A token named "Service Hooks: Azure App Service: Deploy web app" gets created when you or an administrator sets up an Azure App Service web app deployment.
A token named "WebAppLoadTestCDIntToken" gets created when web load testing gets set up as part of a pipeline by you or an administrator.
A token named "Microsoft Teams Integration" gets created when a Microsoft Teams Integration Messaging Extension gets set up.
Warning
Revoke the PAT(and change your password) if you suspect it exists in error.
Check with your administrator if you're a Microsoft Entra user to see if an unknown source or location accessed your organization.
Review the FAQ onaccidental PAT check-ins to public GitHub repositories.
Use a PAT
Your PAT serves as your digital identity, much like a password. You can use PATs as a quick way to do one-off requests or prototype an application locally.
Important
When your code is working, it's a good time to switch from basic auth toMicrosoft Entra OAuth. You can use Microsoft Entra ID tokens anywhere a PAT gets used, unless specified further in this article.
You can use a PAT in your code to authenticateREST APIsrequests and automate workflows. To do so, include the PAT in the authorization header of your HTTP requests.
Windows
Linux/macOS
To provide the PAT through an HTTP header, first convert it to aBase64string. The following example shows how to convert toBase64using C#.
Base64
Base64
Authorization: Basic BASE64_USERNAME_PAT_STRING
Authorization: Basic BASE64_USERNAME_PAT_STRING
The resulting string can then be provided as an HTTP header in the following format.
The following sample uses theHttpClient classin C#.
public static async void GetBuilds()
{
    try
    {
        var personalaccesstoken = "PATFROMWEB";

        using (HttpClient client = new HttpClient())
        {
            client.DefaultRequestHeaders.Accept.Add(
                new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Basic",
                Convert.ToBase64String(
                    System.Text.ASCIIEncoding.ASCII.GetBytes(
                        string.Format("{0}:{1}", "", personalaccesstoken))));

            using (HttpResponseMessage response = client.GetAsync(
                        "https://dev.azure.com/{organization}/{project}/_apis/build/builds?api-version=5.0").Result)
            {
                response.EnsureSuccessStatusCode();
                string responseBody = await response.Content.ReadAsStringAsync();
                Console.WriteLine(responseBody);
            }
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine(ex.ToString());
    }
}
public static async void GetBuilds()
{
    try
    {
        var personalaccesstoken = "PATFROMWEB";

        using (HttpClient client = new HttpClient())
        {
            client.DefaultRequestHeaders.Accept.Add(
                new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Basic",
                Convert.ToBase64String(
                    System.Text.ASCIIEncoding.ASCII.GetBytes(
                        string.Format("{0}:{1}", "", personalaccesstoken))));

            using (HttpResponseMessage response = client.GetAsync(
                        "https://dev.azure.com/{organization}/{project}/_apis/build/builds?api-version=5.0").Result)
            {
                response.EnsureSuccessStatusCode();
                string responseBody = await response.Content.ReadAsStringAsync();
                Console.WriteLine(responseBody);
            }
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine(ex.ToString());
    }
}
Tip
When you're using variables, add a$at the beginning of the string, like in the following example.
$
public static async void GetBuilds()
{
   try
  {
      var personalaccesstoken = "PATFROMWEB";

      using (HttpClient client = new HttpClient())
       {
           client.DefaultRequestHeaders.Accept.Add(
              new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

           client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Basic",
               Convert.ToBase64String(
                   System.Text.ASCIIEncoding.ASCII.GetBytes(
                       string.Format("{0}:{1}", "", personalaccesstoken))));

          using (HttpResponseMessage response = client.GetAsync(
                       $"https://dev.azure.com/{organization}/{project}/_apis/build/builds?api-version=5.0").Result)
           {
               response.EnsureSuccessStatusCode();
               string responseBody = await response.Content.ReadAsStringAsync();
               Console.WriteLine(responseBody);
           }
       }
   }
   catch (Exception ex)
   {
       Console.WriteLine(ex.ToString());
   }
}
public static async void GetBuilds()
{
   try
  {
      var personalaccesstoken = "PATFROMWEB";

      using (HttpClient client = new HttpClient())
       {
           client.DefaultRequestHeaders.Accept.Add(
              new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

           client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Basic",
               Convert.ToBase64String(
                   System.Text.ASCIIEncoding.ASCII.GetBytes(
                       string.Format("{0}:{1}", "", personalaccesstoken))));

          using (HttpResponseMessage response = client.GetAsync(
                       $"https://dev.azure.com/{organization}/{project}/_apis/build/builds?api-version=5.0").Result)
           {
               response.EnsureSuccessStatusCode();
               string responseBody = await response.Content.ReadAsStringAsync();
               Console.WriteLine(responseBody);
           }
       }
   }
   catch (Exception ex)
   {
       Console.WriteLine(ex.ToString());
   }
}
The following sample gets a list of builds using curl.
curl -u :{PAT} https://dev.azure.com/{organization}/_apis/build-release/builds
curl -u :{PAT} https://dev.azure.com/{organization}/_apis/build-release/builds
Some more examples of how to use PATs can be found in the following articles:
Authenticate with your Git repos
Set up Git credential managers (GCM) to connect with Git repositories
Use NuGet on a Mac
Authenticate reporting clients
Get started with Azure DevOps CLI
Modify a PAT
Do the following steps to:
Regenerate a PAT to create a new token, which invalidates the previous one.
Extend a PAT to increase its validity period.
Alter thescopeof a PAT to change its permissions.
From your home page, open your user settings, and then selectProfile.
From your home page, open your user settings, and then selectProfile.

Under Security, selectPersonal access tokens. Select the token you want to modify, and thenEdit.
Under Security, selectPersonal access tokens. Select the token you want to modify, and thenEdit.

Edit the token name, token expiration, or the scope of access associated with the token, and then selectSave.
Edit the token name, token expiration, or the scope of access associated with the token, and then selectSave.

Revoke a PAT
You can revoke a PAT at any time for these and other reasons:
Revoke a PAT if you suspect it's compromised.
Revoke a PAT when it's no longer needed.
Revoke a PAT to enforce security policies or compliance requirements.
From your home page, open your user settings, and then selectProfile.
From your home page, open your user settings, and then selectProfile.

Under Security, selectPersonal access tokens. Select the token for which you want to revoke access, and then selectRevoke.
Under Security, selectPersonal access tokens. Select the token for which you want to revoke access, and then selectRevoke.

SelectRevokein the confirmation dialog.
SelectRevokein the confirmation dialog.

For more information, seeRevoke user PATs for admins.
Changes to format
As of July 2024, we significantly changed the format of PATs issued by Azure DevOps. These changes provide more security benefits and improve secret detection tooling available through ourleaked PAT detection toolingorpartner offerings. This new PAT format follows the recommended format across all Microsoft products. The inclusion of more identifiable bits improves the false positive detection rate of these secret detection tools and enables us to mitigate detected leaks faster.
Key changes:
Increased token length:The new tokens are now84characters long, with 52 characters being randomized data. This increased length improves overall entropy, making the tokens more resistant to potential brute force attacks.
Fixed signature:Tokens issued by our service include a fixedAZDOsignature at positions 76-80.
AZDO
Action required:
Regenerate existing PATs:We strongly recommend regenerating all PATs currently in use to take advantage of these security enhancements.
Integrator support:Integrators should update their systems to accommodate both the new and existing token lengths.
Important
Both formats remain valid for the foreseeable future, but weactively encourage customers to transition to the new 84-character format. As adoption of the new format increases, we consider retiring the older 52-character format and all tokens issued in that style.
Best practices for using PATs
Consider alternatives
Acquire a Microsoft Entra token viaAzure CLIfor ad-hoc requests that lasts for one hour instead of minting a longer-lived PAT.
Use credential managers likeGit Credential ManagerorAzure Artifacts Credential Managerfor credential management simplification. These tools might offer options touse Microsoft Entra tokensas the default authentication instead of PATs.
Creating PATs
Avoid putting personal data in the PAT name. Don't rename the PAT token string as the name of your token.
Select only the organization your PAT needs to access if it doesn't need to access multiple organizations. For workflows requiring access to multiple organizations, create a separate global PAT for that workflow.
Choose only the necessary scopes for each PAT. If possible, create multiple PATs for each workflow with fewer scopes instead of a single fully scoped PAT. If your PAT only needs read permissions, don't provide it write permissions until necessary.
Keep PAT lifespans short (weekly is ideal, even shorter is better) and regularly rotate or regenerate them via the UI or thePAT Lifecycle Management APIs.
Managing PATs
Alwaysstore your PATs in a secure key management solution likeAzure KeyVault.
Revoke PATs when they're no longer needed. Tenant admins canrevoke PATs for their organization usersif the PAT is compromised.
Rotate your PATs to use thenew PAT formatfor better leaked secret detection and revocation by our first-party tools.
For admins
Tenant admins can set policiesto restrict global PAT creation, full scoped PAT creation, and long-lived PAT duration. They can also enable policies to automatically revoke leaked PATs detected in public repositories. Use these policies to improve your company's security.
FAQs
Q: Why can't I edit or regenerate a PAT scoped to a single organization?
A: Sign into the organization where your PAT is scoped. You can view all your PATs while signed into any organization in the same Microsoft Entra ID, but you can only edit organization-scoped tokens when signed into the specific organization.
Q: What happens to a PAT if a user account is disabled?
A: When a user is removed from Azure DevOps, the PAT invalidates within 1 hour. If your organization is connected to Microsoft Entra ID, the PAT also invalidates in Microsoft Entra ID, as it belongs to the user. We recommend rotating the PAT to another user or service account to keep services running.
Q: Is there a way to renew a PAT via REST API?
A: Yes, you can renew, manage, and create PATs using ourPAT Lifecycle Management APIs.
Q: Can I use PATs with all Azure DevOps REST APIs?
A: No. You can use basic auth with most Azure DevOps REST APIs, butorganizations and profilesand thePAT Management Lifecycle APIsonly supportMicrosoft Entra OAuth. For an example on how to set up a Microsoft Entra app to call such APIs, seeManage PATs using the REST API.
Q: What happens if I accidentally check my PAT into a public repository on GitHub?
A: Azure DevOps scans for PATs checked into public repositories on GitHub. When we find a leaked token, we immediately send a detailed email notification to the token owner and log an event in your Azure DevOps organization'saudit log. Unless you disabled theAutomatically revoke leaked personal access tokenspolicy, we immediately revoke the leaked PAT. We encourage affected users to mitigate the issue byrevoking the leaked tokenand replacing it with a new token. For more information, seeRevoke leaked PATs automatically.
Q: Can I use a personal access token as an ApiKey to publish NuGet packages to an Azure Artifacts feed using the dotnet/nuget.exe command line?
A: No. Azure Artifacts doesn't support passing a PAT as an ApiKey. When using a local development environment, we recommend installing theAzure Artifacts Credential Providerto authenticate with Azure Artifacts. For more information, see the following examples:dotnet,NuGet.exe. If you want to publish your packages using Azure Pipelines, use theNuGet Authenticatetask to authenticate with your feed. Seeexample.
Q: Why did my PAT stop working?
A: PAT authentication requires you to regularly sign into Azure DevOps using the full authentication flow. Signing in once every 30 days is sufficient for many users, but you might need to sign in more frequently depending on your Microsoft Entra configuration. If your PAT stops working, first try signing into your organization and complete the full authentication prompt. If your PAT still doesn't work, check if it expired.
Enabling IIS Basic Authentication invalidates using PATs for Azure DevOps Server.
Caution
We recommend that you keepIIS Basic Authenticationturnedoffalways. Only if necessary should you enable IIS Basic Authentication. When IIS Basic Authentication is enabled on your windows machine, it prevents you from using personal access tokens (PATs) as an authentication mechanism.
For example, if you use a PAT to allow a third-party app to retrieve bug information, and then send an email with the info to the bug assignee (with IIS Basic Authentication enabled), the app fails authentication. The app can't retrieve bug info.
Warning
If you use Git with IIS Basic Authentication, Git breaks because it requires PATs for user authentication. Although we don't recommend you use IIS Basic Authentication, by adding an extra header to Git requests, you can use Git with IIS Basic Authentication.
The extra header must be used for all Azure DevOps Server installations, as Windows Auth also prevents using PATs.
The extra header must include a base 64 encoding of "user:PAT." See the following format and example.
Format:
git -c http.extraheader='Authorization: Basic [base 64 encoding of "user:password"]' ls-remote http://tfsserver:8080/tfs/DefaultCollection/_git/projectName
git -c http.extraheader='Authorization: Basic [base 64 encoding of "user:password"]' ls-remote http://tfsserver:8080/tfs/DefaultCollection/_git/projectName
Example:
git -c http.extraheader='Authorization: Basic a2FzYW50aGE6bzN3cDVndmw2YXRkajJkam83Znd4N2k3NDdhbGxjNXp4bnc3b3o0dGQycmd3d2M1eTdjYQ==' ls-remote http://tfsserver:8080/tfs/DefaultCollection/_git/projectName
git -c http.extraheader='Authorization: Basic a2FzYW50aGE6bzN3cDVndmw2YXRkajJkam83Znd4N2k3NDdhbGxjNXp4bnc3b3o0dGQycmd3d2M1eTdjYQ==' ls-remote http://tfsserver:8080/tfs/DefaultCollection/_git/projectName
Q: How do I create access keys that aren't tied to a specific person for deployment purposes?
A: In Azure DevOps, you can create access keys that aren't tied to a specific person by using Service Principals or Managed Identities. For more information, seeManage service connectionsandUse Azure Key Vault secrets in Azure Pipelines.
Related articles
Use policies to manage personal access tokens for users
Revoke user PATs (for admins)
Learn about security, authentication, and authorization
Review default permissions and access for Azure DevOps
Manage personal access tokens (PATs) using REST API
Manage service principals and managed identities in Azure DevOps
Feedback
Was this page helpful?
Additional resources