Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Authenticate access and connections to Azure resources with managed identities in Azure Logic Apps
Article
2025-01-27
5 contributors
In this article
Applies to:Azure Logic Apps (Consumption + Standard)
If you want to avoid providing, storing, and managing credentials, secrets, or Microsoft Entra tokens, you can use a managed identity to authenticate access or connections from your logic app workflow to Microsoft Entra protected resources. In Azure Logic Apps, some connector operations support using a managed identity when you must authenticate access to resources protected by Microsoft Entra ID. Azure manages this identity and helps keep authentication information secure so that you don't have to manage this sensitive information. For more information, seeWhat are managed identities for Azure resources?
Azure Logic Apps supports the following managed identity types:
System-assigned managed identity
System-assigned managed identity
User-assigned managed identity
User-assigned managed identity
The following list describes some differences between these managed identity types:
A logic app resource can enable and use only one unique system-assigned identity.
A logic app resource can enable and use only one unique system-assigned identity.
A logic app resource can share the same user-assigned identity across a group of other logic app resources.
A logic app resource can share the same user-assigned identity across a group of other logic app resources.
This guide shows how to complete the following tasks:
Enable and set up the system-assigned identity for your logic app resource. This guide provides an example that shows how to use the identity for authentication.
Enable and set up the system-assigned identity for your logic app resource. This guide provides an example that shows how to use the identity for authentication.
Create and set up a user-assigned identity. This guide shows how to create this identity using the Azure portal or an Azure Resource Manager template (ARM template) and how to use the identity for authentication. For Azure PowerShell, Azure CLI, and Azure REST API, see the following documentation:ToolDocumentationAzure PowerShellCreate user-assigned identityAzure CLICreate user-assigned identityAzure REST APICreate user-assigned identity
Create and set up a user-assigned identity. This guide shows how to create this identity using the Azure portal or an Azure Resource Manager template (ARM template) and how to use the identity for authentication. For Azure PowerShell, Azure CLI, and Azure REST API, see the following documentation:
Prerequisites
An Azure account and subscription. If you don't have a subscription,sign up for a free Azure account. Both the managed identity and the target Azure resource where you need access must use the same Azure subscription.
An Azure account and subscription. If you don't have a subscription,sign up for a free Azure account. Both the managed identity and the target Azure resource where you need access must use the same Azure subscription.
The target Azure resource that you want to access. On this resource, you must add the necessary role for the managed identity to access that resource on your logic app's or connection's behalf. To add a role to a managed identity, you needMicrosoft Entra administrator permissionsthat can assign roles to the identities in the corresponding Microsoft Entra tenant.
The target Azure resource that you want to access. On this resource, you must add the necessary role for the managed identity to access that resource on your logic app's or connection's behalf. To add a role to a managed identity, you needMicrosoft Entra administrator permissionsthat can assign roles to the identities in the corresponding Microsoft Entra tenant.
The logic app resource and workflow where you want to use thetrigger or actions that support managed identities.
The logic app resource and workflow where you want to use thetrigger or actions that support managed identities.
Managed identity differences between Consumption and Standard logic apps
Based on your logic app resource type, you can enable either the system-assigned identity, user-assigned identity, or both at the same time:
For information about managed identity limits in Azure Logic Apps, seeLimits on managed identities for logic apps. For more information about the Consumption and Standard logic app resource types and environments, see the following documentation:
Resource environment differences
Resource environment differences
Azure Arc enabled Logic Apps
Azure Arc enabled Logic Apps

Where you can use a managed identity
In Azure Logic Apps, only specific built-in and managed connector operations that support OAuth with Microsoft Entra ID can use a managed identity for authentication. The following tables provide only a sample selection. For a more complete list, see the following documentation:
Authentication types for triggers and actions that support authentication
Authentication types for triggers and actions that support authentication
Azure services that support managed identities for Azure resources
Azure services that support managed identities for Azure resources
Azure services that support Microsoft Entra authentication
Azure services that support Microsoft Entra authentication
Consumption
Standard
For a Consumption logic app workflow, the following table lists example connectors that support managed identity authentication:
For a Standard logic app workflow, the following table lists example connectors that support managed identity authentication:

Enable system-assigned identity in the Azure portal
Consumption
Standard
On a Consumption logic app resource, you must manually enable the system-assigned identity.
In theAzure portal, open your Consumption logic app resource.
In theAzure portal, open your Consumption logic app resource.
On the logic app menu, underSettings, selectIdentity.
On the logic app menu, underSettings, selectIdentity.
On theIdentitypage, underSystem assigned, selectOn>Save. When Azure prompts you to confirm, selectYes.NoteIf you get an error that you can have only a single managed identity, your logic app resource is
already associated with the user-assigned identity. Before you can add the system-assigned identity,
you must first remove the user-assigned identity from your logic app resource.Your logic app resource can now use the system-assigned identity. This identity is registered with Microsoft Entra ID and is represented by an object ID.PropertyValueDescriptionObject (principal) ID<identity-resource-ID>A Globally Unique Identifier (GUID) that represents the system-assigned identity for your logic app in a Microsoft Entra tenant.
On theIdentitypage, underSystem assigned, selectOn>Save. When Azure prompts you to confirm, selectYes.

Note
If you get an error that you can have only a single managed identity, your logic app resource is
already associated with the user-assigned identity. Before you can add the system-assigned identity,
you must first remove the user-assigned identity from your logic app resource.
Your logic app resource can now use the system-assigned identity. This identity is registered with Microsoft Entra ID and is represented by an object ID.

Now follow thesteps that give the system-assigned identity access to the resourcelater in this guide.
Now follow thesteps that give the system-assigned identity access to the resourcelater in this guide.
On a Standard logic app resource, the system-assigned identity is automatically enabled. If you need to enable the identity, follow these steps:
In theAzure portal, open your Standard logic app resource.
In theAzure portal, open your Standard logic app resource.
On the logic app menu, underSettings, selectIdentity.
On the logic app menu, underSettings, selectIdentity.
On theIdentitypage, underSystem assigned, selectOn>Save. When Azure prompts you to confirm, selectYes.Your logic app resource can now use the system-assigned identity, which is registered with Microsoft Entra ID and is represented by an object ID.PropertyValueDescriptionObject (principal) ID<identity-resource-ID>A Globally Unique Identifier (GUID) that represents the system-assigned identity for your logic app in a Microsoft Entra tenant.
On theIdentitypage, underSystem assigned, selectOn>Save. When Azure prompts you to confirm, selectYes.

Your logic app resource can now use the system-assigned identity, which is registered with Microsoft Entra ID and is represented by an object ID.

Now follow thesteps that give that identity access to the resourcelater in this guide.
Now follow thesteps that give that identity access to the resourcelater in this guide.

Enable system-assigned identity in an ARM template
To automate creating and deploying logic app resources, you can use anARM template. To enable the system-assigned identity for your logic app resource in the template, add theidentityobject and thetypechild property to the logic app's resource definition in the template, for example:
Consumption
Standard
{
   "apiVersion": "2016-06-01",
   "type": "Microsoft.logic/workflows",
   "name": "[variables('logicappName')]",
   "location": "[resourceGroup().location]",
   "identity": {
      "type": "SystemAssigned"
   },
   "properties": {},
   <...>
}
{
   "apiVersion": "2016-06-01",
   "type": "Microsoft.logic/workflows",
   "name": "[variables('logicappName')]",
   "location": "[resourceGroup().location]",
   "identity": {
      "type": "SystemAssigned"
   },
   "properties": {},
   <...>
}
{
   "apiVersion": "2021-01-15",
   "type": "Microsoft.Web/sites",
   "name": "[variables('sites_<logic-app-resource-name>_name')]",
   "location": "[resourceGroup().location]",
   "kind": "functionapp,workflowapp",
   "identity": {
      "type": "SystemAssigned"
   },
   "properties": {},
   <...>
}
{
   "apiVersion": "2021-01-15",
   "type": "Microsoft.Web/sites",
   "name": "[variables('sites_<logic-app-resource-name>_name')]",
   "location": "[resourceGroup().location]",
   "kind": "functionapp,workflowapp",
   "identity": {
      "type": "SystemAssigned"
   },
   "properties": {},
   <...>
}
When Azure creates your logic app resource definition, theidentityobject gets the following other properties:
"identity": {
   "type": "SystemAssigned",
   "principalId": "<principal-ID>",
   "tenantId": "<Entra-tenant-ID>"
}
"identity": {
   "type": "SystemAssigned",
   "principalId": "<principal-ID>",
   "tenantId": "<Entra-tenant-ID>"
}

Create user-assigned identity in the Azure portal
Before you can enable the user-assigned identity on a Consumption logic app resource or Standard logic app resource, you must create that identity as a separate Azure resource.
In theAzure portalsearch box, entermanaged identities. From the results list, selectManaged Identities.
In theAzure portalsearch box, entermanaged identities. From the results list, selectManaged Identities.

On theManaged Identitiespage toolbar, selectCreate.
On theManaged Identitiespage toolbar, selectCreate.
Provide information about your managed identity, and selectReview + Create, for example:PropertyRequiredValueDescriptionSubscriptionYes<Azure-subscription-name>The Azure subscription nameResource groupYes<Azure-resource-group-name>The Azure resource group name. Create a new group, or select an existing group. This example creates a new group namedfabrikam-managed-identities-RG.RegionYes<Azure-region>The Azure region where to store information about your resource. This example usesWest US.NameYes<user-assigned-identity-name>The name to give your user-assigned identity. This example usesFabrikam-user-assigned-identity.After Azure validates the information, Azure creates your managed identity. Now you can add the user-assigned identity to your logic app resource.
Provide information about your managed identity, and selectReview + Create, for example:

After Azure validates the information, Azure creates your managed identity. Now you can add the user-assigned identity to your logic app resource.
Add user-assigned identity to logic app in the Azure portal
Consumption
Standard
In the Azure portal, open your Consumption logic app resource.
In the Azure portal, open your Consumption logic app resource.
On the logic app menu, underSettings, selectIdentity.
On the logic app menu, underSettings, selectIdentity.
On theIdentitypage, selectUser assigned, and then selectAdd.
On theIdentitypage, selectUser assigned, and then selectAdd.

On theAdd user assigned managed identitypane, follow these steps:From theSelect a subscriptionlist, select your Azure subscription.From the list that hasallthe managed identities in your subscription, select the user-assigned identity that you want. To filter the list, in theUser assigned managed identitiessearch box, enter the name for the identity or resource group.When you're done, selectAdd.NoteIf you get an error that you can have only a single managed identity, your logic app
is already associated with the system-assigned identity. Before you can add the
user-assigned identity, you have to first disable the system-assigned identity.Your logic app is now associated with the user-assigned identity.
On theAdd user assigned managed identitypane, follow these steps:
From theSelect a subscriptionlist, select your Azure subscription.
From theSelect a subscriptionlist, select your Azure subscription.
From the list that hasallthe managed identities in your subscription, select the user-assigned identity that you want. To filter the list, in theUser assigned managed identitiessearch box, enter the name for the identity or resource group.
From the list that hasallthe managed identities in your subscription, select the user-assigned identity that you want. To filter the list, in theUser assigned managed identitiessearch box, enter the name for the identity or resource group.

When you're done, selectAdd.NoteIf you get an error that you can have only a single managed identity, your logic app
is already associated with the system-assigned identity. Before you can add the
user-assigned identity, you have to first disable the system-assigned identity.
When you're done, selectAdd.
Note
If you get an error that you can have only a single managed identity, your logic app
is already associated with the system-assigned identity. Before you can add the
user-assigned identity, you have to first disable the system-assigned identity.
Your logic app is now associated with the user-assigned identity.

Now follow thesteps that give the identity access to the resourcelater in this guide.
Now follow thesteps that give the identity access to the resourcelater in this guide.
In the Azure portal, open your Standard logic app resource.
In the Azure portal, open your Standard logic app resource.
On the logic app menu, underSettings, selectIdentity.
On the logic app menu, underSettings, selectIdentity.
On theIdentitypage, selectUser assigned, and then selectAdd.
On theIdentitypage, selectUser assigned, and then selectAdd.

On theAdd user assigned managed identitypane, follow these steps:From theSelect a subscriptionlist, select your Azure subscription.From the list withallthe managed identities in your subscription, select the user-assigned identity that you want. To filter the list, in theUser assigned managed identitiessearch box, enter the name for the identity or resource group.When you're done, selectAdd.Your logic app is now associated with the user-assigned identity.To have multiple user-assigned identities, repeat the same steps to add those identities.
On theAdd user assigned managed identitypane, follow these steps:
From theSelect a subscriptionlist, select your Azure subscription.
From theSelect a subscriptionlist, select your Azure subscription.
From the list withallthe managed identities in your subscription, select the user-assigned identity that you want. To filter the list, in theUser assigned managed identitiessearch box, enter the name for the identity or resource group.
From the list withallthe managed identities in your subscription, select the user-assigned identity that you want. To filter the list, in theUser assigned managed identitiessearch box, enter the name for the identity or resource group.

When you're done, selectAdd.Your logic app is now associated with the user-assigned identity.
When you're done, selectAdd.
Your logic app is now associated with the user-assigned identity.

To have multiple user-assigned identities, repeat the same steps to add those identities.
To have multiple user-assigned identities, repeat the same steps to add those identities.
Now follow thesteps that give the identity access to the resourcelater in this guide.
Now follow thesteps that give the identity access to the resourcelater in this guide.

Create user-assigned identity in an ARM template
To automate creating and deploying logic app resources, you can use anARM template. These templates supportuser-assigned identities for authentication.
In your template'sresourcessection, your logic app's resource definition requires the following items:
Anidentityobject with thetypeproperty set toUserAssigned
Anidentityobject with thetypeproperty set toUserAssigned
A childuserAssignedIdentitiesobject that specifies the user-assigned resource and name
A childuserAssignedIdentitiesobject that specifies the user-assigned resource and name
Consumption
Standard
This example shows a Consumption logic app resource and workflow definition for an HTTP PUT request with a nonparameterizedidentityobject. The response to the PUT request and subsequent GET operation also includes thisidentityobject:
{
   "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
   "contentVersion": "1.0.0.0",
   "parameters": {<template-parameters>},
   "resources": [
      {
         "apiVersion": "2016-06-01",
         "type": "Microsoft.logic/workflows",
         "name": "[variables('logicappName')]",
         "location": "[resourceGroup().location]",
         "identity": {
            "type": "UserAssigned",
            "userAssignedIdentities": {
               "/subscriptions/<Azure-subscription-ID>/resourceGroups/<Azure-resource-group-name>/providers/Microsoft.ManagedIdentity/userAssignedIdentities/<user-assigned-identity-name>": {}
            }
         },
         "properties": {
            "definition": {<logic-app-workflow-definition>}
         },
         "parameters": {},
         "dependsOn": []
      },
   ],
   "outputs": {}
}
{
   "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
   "contentVersion": "1.0.0.0",
   "parameters": {<template-parameters>},
   "resources": [
      {
         "apiVersion": "2016-06-01",
         "type": "Microsoft.logic/workflows",
         "name": "[variables('logicappName')]",
         "location": "[resourceGroup().location]",
         "identity": {
            "type": "UserAssigned",
            "userAssignedIdentities": {
               "/subscriptions/<Azure-subscription-ID>/resourceGroups/<Azure-resource-group-name>/providers/Microsoft.ManagedIdentity/userAssignedIdentities/<user-assigned-identity-name>": {}
            }
         },
         "properties": {
            "definition": {<logic-app-workflow-definition>}
         },
         "parameters": {},
         "dependsOn": []
      },
   ],
   "outputs": {}
}
If your template also includes the managed identity's resource definition, you can parameterize theidentityobject. The following example shows how the childuserAssignedIdentitiesobject references auserAssignedIdentityNamevariable that you define in your template'svariablessection. This variable references the resource ID for your user-assigned identity.
{
   "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
   "contentVersion": "1.0.0.0",
   "parameters": {
      "Template_LogicAppName": {
         "type": "string"
      },
      "Template_UserAssignedIdentityName": {
         "type": "securestring"
      }
   },
   "variables": {
      "logicAppName": "[parameters('Template_LogicAppName')]",
      "userAssignedIdentityName": "[parameters('Template_UserAssignedIdentityName')]"
   },
   "resources": [
      {
         "apiVersion": "2016-06-01",
         "type": "Microsoft.logic/workflows",
         "name": "[variables('logicAppName')]",
         "location": "[resourceGroup().location]",
         "identity": {
            "type": "UserAssigned",
            "userAssignedIdentities": {
               "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', variables('userAssignedIdentityName'))]": {}
            }
         },
         "properties": {
            "definition": {<logic-app-workflow-definition>}
         },
         "parameters": {},
         "dependsOn": [
            "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', variables('userAssignedIdentityName'))]"
         ]
      },
      {
         "apiVersion": "2018-11-30",
         "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
         "name": "[parameters('Template_UserAssignedIdentityName')]",
         "location": "[resourceGroup().location]",
         "properties": {}
      }
  ]
}
{
   "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
   "contentVersion": "1.0.0.0",
   "parameters": {
      "Template_LogicAppName": {
         "type": "string"
      },
      "Template_UserAssignedIdentityName": {
         "type": "securestring"
      }
   },
   "variables": {
      "logicAppName": "[parameters('Template_LogicAppName')]",
      "userAssignedIdentityName": "[parameters('Template_UserAssignedIdentityName')]"
   },
   "resources": [
      {
         "apiVersion": "2016-06-01",
         "type": "Microsoft.logic/workflows",
         "name": "[variables('logicAppName')]",
         "location": "[resourceGroup().location]",
         "identity": {
            "type": "UserAssigned",
            "userAssignedIdentities": {
               "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', variables('userAssignedIdentityName'))]": {}
            }
         },
         "properties": {
            "definition": {<logic-app-workflow-definition>}
         },
         "parameters": {},
         "dependsOn": [
            "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', variables('userAssignedIdentityName'))]"
         ]
      },
      {
         "apiVersion": "2018-11-30",
         "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
         "name": "[parameters('Template_UserAssignedIdentityName')]",
         "location": "[resourceGroup().location]",
         "properties": {}
      }
  ]
}
A Standard logic app resource can enable and have both the system-assigned identity and multiple user-assigned identities defined. The Standard logic app resource definition is based on the Azure Functions function app resource definition.
This example shows a Standard logic app resource and workflow definition that includes a nonparameterizedidentityobject:
{
   "$schema": "https://schema.management.azure.com/schemas/2019-01-01/deploymentTemplate.json#",
   "contentVersion": "1.0.0.0",
   "parameters": {<template-parameters>},
   "resources": [
      {
         "apiVersion": "2021-02-01",
         "type": "Microsoft.Web/sites/functions",
         "name": "[variables('logicappName')]",
         "location": "[resourceGroup().location]",
         "identity": {
            "type": "UserAssigned",
            "userAssignedIdentities": {
               "/subscriptions/<Azure-subscription-ID>/resourceGroups/<Azure-resource-group-name>/providers/Microsoft.ManagedIdentity/userAssignedIdentities/<user-assigned-identity-name>": {}
            },
         },
         "properties": {
            "name": "[variables('appName')]",
            "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
            "hostingEnvironment": "",
            "clientAffinityEnabled": false,
            "alwaysOn": true
         },
         "parameters": {},
         "dependsOn": []
      }
   ],
   "outputs": {}
}
{
   "$schema": "https://schema.management.azure.com/schemas/2019-01-01/deploymentTemplate.json#",
   "contentVersion": "1.0.0.0",
   "parameters": {<template-parameters>},
   "resources": [
      {
         "apiVersion": "2021-02-01",
         "type": "Microsoft.Web/sites/functions",
         "name": "[variables('logicappName')]",
         "location": "[resourceGroup().location]",
         "identity": {
            "type": "UserAssigned",
            "userAssignedIdentities": {
               "/subscriptions/<Azure-subscription-ID>/resourceGroups/<Azure-resource-group-name>/providers/Microsoft.ManagedIdentity/userAssignedIdentities/<user-assigned-identity-name>": {}
            },
         },
         "properties": {
            "name": "[variables('appName')]",
            "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
            "hostingEnvironment": "",
            "clientAffinityEnabled": false,
            "alwaysOn": true
         },
         "parameters": {},
         "dependsOn": []
      }
   ],
   "outputs": {}
}
If your template also includes the managed identity's resource definition, you can parameterize theidentityobject. The following example shows how the childuserAssignedIdentitiesobject references auserAssignedIdentityNamevariable that you define in your template'svariablessection. This variable references the resource ID for your user-assigned identity.
{
   "$schema": "https://schema.management.azure.com/schemas/2019-01-01/deploymentTemplate.json#",
   "contentVersion": "1.0.0.0",
   "parameters": {<template-parameters>},
   "resources": [
      {
         "apiVersion": "2021-02-01",
         "type": "Microsoft.Web/sites/functions",
         "name": "[variables('logicappName')]",
         "location": "[resourceGroup().location]",
         "identity": {
            "type": "UserAssigned",
            "userAssignedIdentities": {
               "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('userAssignedIdentityName'))]": {}
            }
         },
         "properties": {
            "name": "[variables('appName')]",
            "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
            "hostingEnvironment": "",
            "clientAffinityEnabled": false,
            "alwaysOn": true
         },
         "parameters": {},
         "dependsOn": [
            "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
            "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', variables('userAssignedIdentityName'))]"
         ]
      },
      {
         "apiVersion": "2018-11-30",
         "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
         "name": "[parameters('Template_UserAssignedIdentityName')]",
         "location": "[resourceGroup().location]",
         "properties": {}
      },
   ],
   "outputs": {}
}
{
   "$schema": "https://schema.management.azure.com/schemas/2019-01-01/deploymentTemplate.json#",
   "contentVersion": "1.0.0.0",
   "parameters": {<template-parameters>},
   "resources": [
      {
         "apiVersion": "2021-02-01",
         "type": "Microsoft.Web/sites/functions",
         "name": "[variables('logicappName')]",
         "location": "[resourceGroup().location]",
         "identity": {
            "type": "UserAssigned",
            "userAssignedIdentities": {
               "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('userAssignedIdentityName'))]": {}
            }
         },
         "properties": {
            "name": "[variables('appName')]",
            "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
            "hostingEnvironment": "",
            "clientAffinityEnabled": false,
            "alwaysOn": true
         },
         "parameters": {},
         "dependsOn": [
            "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
            "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', variables('userAssignedIdentityName'))]"
         ]
      },
      {
         "apiVersion": "2018-11-30",
         "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
         "name": "[parameters('Template_UserAssignedIdentityName')]",
         "location": "[resourceGroup().location]",
         "properties": {}
      },
   ],
   "outputs": {}
}
When the template creates a logic app resource, theidentityobject includes the following properties:
"identity": {
    "type": "UserAssigned",
    "userAssignedIdentities": {
        "<resource-ID>": {
            "principalId": "<principal-ID>",
            "clientId": "<client-ID>"
        }
    }
}
"identity": {
    "type": "UserAssigned",
    "userAssignedIdentities": {
        "<resource-ID>": {
            "principalId": "<principal-ID>",
            "clientId": "<client-ID>"
        }
    }
}
TheprincipalIdproperty value is a unique identifier for the identity that's used for Microsoft Entra administration. TheclientIdproperty value is a unique identifier for the logic app's new identity that's used for specifying which identity to use during runtime calls. For more information about Azure Resource Manager templates and managed identities for Azure Functions, see the following documentation:
ARM template - Azure Functions
ARM template - Azure Functions
Add a user-assigned identity using an ARM template for Azure Functions.
Add a user-assigned identity using an ARM template for Azure Functions.

Give identity access to resources
Before you can use your logic app's managed identity for authentication, you have to set up access for the identity on the target Azure resource where you want to use the identity. The way that you set up access varies based on the target resource.
Note
When a managed identity has access to an Azure resource in the same subscription, the identity can
access only that resource. However, in some triggers and actions that support managed identities,
you have to first select the Azure resource group that contains the target resource. If the identity
doesn't have access at the resource group level, no resources in that group are listed, despite having
access to the target resource.
To handle this behavior, you must also give the identity access to the resource group, not just
the resource. Likewise, if you have to select your subscription before you can select the
target resource, you must give the identity access to the subscription.
In some cases, you might need the identity to get access to the associated resource. For example,
suppose you have a managed identity for a logic app that needs access to update the application
settings for that same logic app from a workflow. You must give that identity access to the associated logic app.
For example, to use a managed identity for authenticating access to a Blob storage account or key vault in Azure, you need to set up Azure role-based access control (Azure RBAC) and assign the appropriate role for that identity to the storage account or key vault, respectively.
The steps in this section describe how to assign role-based access using theAzure portalandAzure Resource Manager template (ARM template). For Azure PowerShell, Azure CLI, and Azure REST API, see the following documentation:
For Azure Key Vault, you also have the option to create an access policy for your managed identity on your key vault and assign the appropriate permissions for that identity on that key vault. The later steps in this section describe how to complete this task by using theAzure portal. For Resource Manager templates, PowerShell, and Azure CLI, see the following documentation:

Assign role-based access to a managed identity using the Azure portal
To use a managed identity for authentication, some Azure resources, such as Azure storage accounts, require that you assign that identity to a role that has the appropriate permissions on the target resource. Other Azure resources, such as key vaults, support multiple options. You can choose either role-based access or anaccess policy that has the appropriate permissions on the target resource for that identity.
In theAzure portal, open the resource where you want to use the identity.
In theAzure portal, open the resource where you want to use the identity.
On the resource menu, selectAccess control (IAM)>Add>Add role assignment.NoteIf theAdd role assignmentoption is disabled, you don't have permissions to assign roles.
For more information, seeMicrosoft Entra built-in roles.
On the resource menu, selectAccess control (IAM)>Add>Add role assignment.
Note
If theAdd role assignmentoption is disabled, you don't have permissions to assign roles.
For more information, seeMicrosoft Entra built-in roles.
Assign the necessary role to your managed identity. On theRoletab, assign a role that gives your identity the required access to the current resource.For this example, assign the role that's namedStorage Blob Data Contributor, which includes write access for blobs in an Azure Storage container. For more information about specific storage container roles, seeRoles that can access blobs in an Azure Storage container.
Assign the necessary role to your managed identity. On theRoletab, assign a role that gives your identity the required access to the current resource.
For this example, assign the role that's namedStorage Blob Data Contributor, which includes write access for blobs in an Azure Storage container. For more information about specific storage container roles, seeRoles that can access blobs in an Azure Storage container.
Next, choose the managed identity where you want to assign the role. UnderAssign access to, selectManaged identity>Add members.
Next, choose the managed identity where you want to assign the role. UnderAssign access to, selectManaged identity>Add members.
Based on your managed identity's type, select or provide the following values:TypeAzure service instanceSubscriptionMemberSystem-assignedLogic App<Azure-subscription-name><your-logic-app-name>User-assignedNot applicable<Azure-subscription-name><your-user-assigned-identity-name>For more information about assigning roles, seeAssign roles using the Azure portal.
Based on your managed identity's type, select or provide the following values:
For more information about assigning roles, seeAssign roles using the Azure portal.
After you're done, you can use the identity toauthenticate access for triggers and actions that support managed identities.
For more general information about this task, seeAssign a managed identity access to an Azure resource or another resource.

Create an access policy using the Azure portal
To use a managed identity for authentication, other Azure resources also support or require that you create an access policy that has the appropriate permissions on the target resource for that identity. Other Azure resources, such as Azure storage accounts, instead require that youassign that identity to a role that has the appropriate permissions on the target resource.
In theAzure portal, open the target resource where you want to use the identity.This example uses a key vault as the target Azure resource.
In theAzure portal, open the target resource where you want to use the identity.
This example uses a key vault as the target Azure resource.
On the resource menu, selectAccess policies>Create, which opens theCreate an access policypane.NoteIf the resource doesn't have theAccess policiesoption,try assigning a role assignment instead.
On the resource menu, selectAccess policies>Create, which opens theCreate an access policypane.
Note
If the resource doesn't have theAccess policiesoption,try assigning a role assignment instead.

On thePermissionstab, select the required permissions that the identity needs to access the target resource.For example, to use the identity with the Azure Key Vault managed connector'sList secretsoperation, the identity needsListpermissions. So, in theSecret permissionscolumn, selectList.
On thePermissionstab, select the required permissions that the identity needs to access the target resource.
For example, to use the identity with the Azure Key Vault managed connector'sList secretsoperation, the identity needsListpermissions. So, in theSecret permissionscolumn, selectList.

When you're ready, selectNext. On thePrincipaltab, find and select the managed identity, which is a user-assigned identity in this example.
When you're ready, selectNext. On thePrincipaltab, find and select the managed identity, which is a user-assigned identity in this example.
Skip the optionalApplicationstep, selectNext, and finish creating the access policy.
Skip the optionalApplicationstep, selectNext, and finish creating the access policy.
The next section shows how to use a managed identity with a trigger or action to authenticate access. The example continues with the steps from an earlier section where you set up access for a managed identity using RBAC and an Azure storage account as the example. However, the general steps to use a managed identity for authentication are the same.

Authenticate access with managed identity
After youenable the managed identity for your logic app resourceandgive that identity access to the Azure target resource or service, you can use that identity intriggers and actions that support managed identities.
Important
If you have an Azure function where you want to use the system-assigned identity,
firstenable authentication for Azure Functions.
The following steps show how to use the managed identity with a trigger or action using the Azure portal. To specify the managed identity in a trigger or action's underlying JSON definition, seeManaged identity authentication.
Consumption
Standard
In theAzure portal, open your Consumption logic app resource.
In theAzure portal, open your Consumption logic app resource.
If you haven't done so yet, add thetrigger or action that supports managed identities.NoteNot all connector operations support letting you add an authentication type. For more information, seeAuthentication types for triggers and actions that support authentication.
If you haven't done so yet, add thetrigger or action that supports managed identities.
Note
Not all connector operations support letting you add an authentication type. For more information, seeAuthentication types for triggers and actions that support authentication.
On the trigger or action that you added, follow these steps:Built-in connector operations that support managed identity authenticationThese steps continue by using theHTTPaction as an example.From theAdvanced parameterslist, add theAuthenticationproperty, if the property doesn't already appear.Now, both theAuthenticationproperty and theAuthentication Typelist appear on the action.From theAuthentication Typelist, selectManaged Identity.TheAuthenticationsection now shows the following options:AManaged Identitylist from where you can select a specific managed identityTheAudienceproperty appears on specific triggers and actions so that you can set the resource ID for the Azure target resource or service. Otherwise, by default, theAudienceproperty uses thehttps://management.azure.com/resource ID, which is the resource ID for Azure Resource Manager.From theManaged Identitylist, select the identity that you want to use, for example:NoteThe default selected option is theSystem-assigned managed identity,
even when you don't have any managed identities enabled.To successfully use a managed identity, you must first enable that identity on your
logic app. On a Consumption logic app, you can have either the system-assigned or
user-assigned managed identity, but not both.For more information, seeExample: Authenticate built-in trigger or action with a managed identity.Managed connector operations that support managed identity authenticationOn theCreate Connectionpane, from theAuthenticationlist, selectManaged Identity, for example:On the next pane, forConnection Name, provide a name to use for the connection.For the authentication type, choose one of the following options based on your managed connector:Single-authentication: These connectors support only one authentication type, which is the managed identity in this case.From theManaged Identitylist, select the currently enabled managed identity.When you're ready, selectCreate New.Multi-authentication: These connectors support multiple authentication types, but you can select and use only one type at a time.These steps continue by using anAzure Blob Storageaction as an example.From theAuthentication Typelist, selectLogic Apps Managed Identity.When you're ready, selectCreate New.For more information, seeExample: Authenticate managed connector trigger or action with a managed identity.
On the trigger or action that you added, follow these steps:
Built-in connector operations that support managed identity authenticationThese steps continue by using theHTTPaction as an example.From theAdvanced parameterslist, add theAuthenticationproperty, if the property doesn't already appear.Now, both theAuthenticationproperty and theAuthentication Typelist appear on the action.From theAuthentication Typelist, selectManaged Identity.TheAuthenticationsection now shows the following options:AManaged Identitylist from where you can select a specific managed identityTheAudienceproperty appears on specific triggers and actions so that you can set the resource ID for the Azure target resource or service. Otherwise, by default, theAudienceproperty uses thehttps://management.azure.com/resource ID, which is the resource ID for Azure Resource Manager.From theManaged Identitylist, select the identity that you want to use, for example:NoteThe default selected option is theSystem-assigned managed identity,
even when you don't have any managed identities enabled.To successfully use a managed identity, you must first enable that identity on your
logic app. On a Consumption logic app, you can have either the system-assigned or
user-assigned managed identity, but not both.For more information, seeExample: Authenticate built-in trigger or action with a managed identity.
Built-in connector operations that support managed identity authentication
These steps continue by using theHTTPaction as an example.
From theAdvanced parameterslist, add theAuthenticationproperty, if the property doesn't already appear.Now, both theAuthenticationproperty and theAuthentication Typelist appear on the action.
From theAdvanced parameterslist, add theAuthenticationproperty, if the property doesn't already appear.

Now, both theAuthenticationproperty and theAuthentication Typelist appear on the action.

From theAuthentication Typelist, selectManaged Identity.TheAuthenticationsection now shows the following options:AManaged Identitylist from where you can select a specific managed identityTheAudienceproperty appears on specific triggers and actions so that you can set the resource ID for the Azure target resource or service. Otherwise, by default, theAudienceproperty uses thehttps://management.azure.com/resource ID, which is the resource ID for Azure Resource Manager.
From theAuthentication Typelist, selectManaged Identity.

TheAuthenticationsection now shows the following options:
AManaged Identitylist from where you can select a specific managed identity
AManaged Identitylist from where you can select a specific managed identity
TheAudienceproperty appears on specific triggers and actions so that you can set the resource ID for the Azure target resource or service. Otherwise, by default, theAudienceproperty uses thehttps://management.azure.com/resource ID, which is the resource ID for Azure Resource Manager.
TheAudienceproperty appears on specific triggers and actions so that you can set the resource ID for the Azure target resource or service. Otherwise, by default, theAudienceproperty uses thehttps://management.azure.com/resource ID, which is the resource ID for Azure Resource Manager.
https://management.azure.com/
From theManaged Identitylist, select the identity that you want to use, for example:NoteThe default selected option is theSystem-assigned managed identity,
even when you don't have any managed identities enabled.To successfully use a managed identity, you must first enable that identity on your
logic app. On a Consumption logic app, you can have either the system-assigned or
user-assigned managed identity, but not both.
From theManaged Identitylist, select the identity that you want to use, for example:

Note
The default selected option is theSystem-assigned managed identity,
even when you don't have any managed identities enabled.
To successfully use a managed identity, you must first enable that identity on your
logic app. On a Consumption logic app, you can have either the system-assigned or
user-assigned managed identity, but not both.
For more information, seeExample: Authenticate built-in trigger or action with a managed identity.
Managed connector operations that support managed identity authenticationOn theCreate Connectionpane, from theAuthenticationlist, selectManaged Identity, for example:On the next pane, forConnection Name, provide a name to use for the connection.For the authentication type, choose one of the following options based on your managed connector:Single-authentication: These connectors support only one authentication type, which is the managed identity in this case.From theManaged Identitylist, select the currently enabled managed identity.When you're ready, selectCreate New.Multi-authentication: These connectors support multiple authentication types, but you can select and use only one type at a time.These steps continue by using anAzure Blob Storageaction as an example.From theAuthentication Typelist, selectLogic Apps Managed Identity.When you're ready, selectCreate New.For more information, seeExample: Authenticate managed connector trigger or action with a managed identity.
Managed connector operations that support managed identity authentication
On theCreate Connectionpane, from theAuthenticationlist, selectManaged Identity, for example:
On theCreate Connectionpane, from theAuthenticationlist, selectManaged Identity, for example:

On the next pane, forConnection Name, provide a name to use for the connection.
On the next pane, forConnection Name, provide a name to use for the connection.
For the authentication type, choose one of the following options based on your managed connector:Single-authentication: These connectors support only one authentication type, which is the managed identity in this case.From theManaged Identitylist, select the currently enabled managed identity.When you're ready, selectCreate New.Multi-authentication: These connectors support multiple authentication types, but you can select and use only one type at a time.These steps continue by using anAzure Blob Storageaction as an example.From theAuthentication Typelist, selectLogic Apps Managed Identity.When you're ready, selectCreate New.For more information, seeExample: Authenticate managed connector trigger or action with a managed identity.
For the authentication type, choose one of the following options based on your managed connector:
Single-authentication: These connectors support only one authentication type, which is the managed identity in this case.From theManaged Identitylist, select the currently enabled managed identity.When you're ready, selectCreate New.
Single-authentication: These connectors support only one authentication type, which is the managed identity in this case.
From theManaged Identitylist, select the currently enabled managed identity.
From theManaged Identitylist, select the currently enabled managed identity.
When you're ready, selectCreate New.
When you're ready, selectCreate New.
Multi-authentication: These connectors support multiple authentication types, but you can select and use only one type at a time.These steps continue by using anAzure Blob Storageaction as an example.From theAuthentication Typelist, selectLogic Apps Managed Identity.When you're ready, selectCreate New.
Multi-authentication: These connectors support multiple authentication types, but you can select and use only one type at a time.
These steps continue by using anAzure Blob Storageaction as an example.
From theAuthentication Typelist, selectLogic Apps Managed Identity.
From theAuthentication Typelist, selectLogic Apps Managed Identity.

When you're ready, selectCreate New.
When you're ready, selectCreate New.
For more information, seeExample: Authenticate managed connector trigger or action with a managed identity.
In theAzure portal, open your Standard logic app resource.
In theAzure portal, open your Standard logic app resource.
If you haven't done so yet, add thetrigger or action that supports managed identities.NoteNot all triggers and actions support letting you add an authentication type. For more information, seeAuthentication types for triggers and actions that support authentication.
If you haven't done so yet, add thetrigger or action that supports managed identities.
Note
Not all triggers and actions support letting you add an authentication type. For more information, seeAuthentication types for triggers and actions that support authentication.
On the trigger or action that you added, follow these steps:Built-in operations that support managed identity authenticationThese steps continue by using theHTTPaction as an example.From theAdvanced parameterslist, add theAuthenticationproperty, if the property doesn't already appear.Now, both theAuthenticationproperty and theAuthentication Typelist appear on the action.From theAuthentication Typelist, selectManaged Identity.TheAuthenticationsection now shows the following options:AManaged Identitylist from where you can select a specific managed identityTheAudienceproperty appears on specific triggers and actions so that you can set the resource ID for the Azure target resource or service. Otherwise, by default, theAudienceproperty uses thehttps://management.azure.com/resource ID, which is the resource ID for Azure Resource Manager.From theManaged Identitylist, select the identity that you want to use, for example:NoteThe default selected option is theSystem-assigned managed identity,
even when you don't have any managed identities enabled.To successfully use a managed identity, you must first enable that identity on your
logic app. On a Standard logic app, you can have both the system-assigned and
user-assigned managed identity defined and enabled. However, your logic app should
use only one managed identity at a time.For example, a workflow that accesses different Azure Service Bus messaging entities
should use only one managed identity. SeeConnect to Azure Service Bus from workflows.For more information, seeExample: Authenticate built-in trigger or action with a managed identity.Managed connector operations that support managed identity authenticationOn theCreate Connectionpane, from theAuthenticationlist, selectManaged Identity, for example:On the next pane, forConnection Name, provide a name to use for the connection.For the authentication type, choose one of the following options based on your managed connector:Single-authentication: These connectors support only one authentication type, which is the managed identity in this case.From theManaged Identitylist, select the currently enabled managed identity.When you're ready, selectCreate New.Multi-authentication: These connectors support multiple authentication types, but you can select and use only one type at a time.These steps continue by using anAzure Blob Storageaction as an example.From theAuthentication Typelist, selectLogic Apps Managed Identity.From theManaged identitylist, select the identity that you want to use.When you're ready, selectCreate New.For more information, seeExample: Authenticate managed connector trigger or action with a managed identity.
On the trigger or action that you added, follow these steps:
Built-in operations that support managed identity authenticationThese steps continue by using theHTTPaction as an example.From theAdvanced parameterslist, add theAuthenticationproperty, if the property doesn't already appear.Now, both theAuthenticationproperty and theAuthentication Typelist appear on the action.From theAuthentication Typelist, selectManaged Identity.TheAuthenticationsection now shows the following options:AManaged Identitylist from where you can select a specific managed identityTheAudienceproperty appears on specific triggers and actions so that you can set the resource ID for the Azure target resource or service. Otherwise, by default, theAudienceproperty uses thehttps://management.azure.com/resource ID, which is the resource ID for Azure Resource Manager.From theManaged Identitylist, select the identity that you want to use, for example:NoteThe default selected option is theSystem-assigned managed identity,
even when you don't have any managed identities enabled.To successfully use a managed identity, you must first enable that identity on your
logic app. On a Standard logic app, you can have both the system-assigned and
user-assigned managed identity defined and enabled. However, your logic app should
use only one managed identity at a time.For example, a workflow that accesses different Azure Service Bus messaging entities
should use only one managed identity. SeeConnect to Azure Service Bus from workflows.For more information, seeExample: Authenticate built-in trigger or action with a managed identity.
Built-in operations that support managed identity authentication
These steps continue by using theHTTPaction as an example.
From theAdvanced parameterslist, add theAuthenticationproperty, if the property doesn't already appear.Now, both theAuthenticationproperty and theAuthentication Typelist appear on the action.
From theAdvanced parameterslist, add theAuthenticationproperty, if the property doesn't already appear.

Now, both theAuthenticationproperty and theAuthentication Typelist appear on the action.

From theAuthentication Typelist, selectManaged Identity.TheAuthenticationsection now shows the following options:AManaged Identitylist from where you can select a specific managed identityTheAudienceproperty appears on specific triggers and actions so that you can set the resource ID for the Azure target resource or service. Otherwise, by default, theAudienceproperty uses thehttps://management.azure.com/resource ID, which is the resource ID for Azure Resource Manager.
From theAuthentication Typelist, selectManaged Identity.

TheAuthenticationsection now shows the following options:
AManaged Identitylist from where you can select a specific managed identity
AManaged Identitylist from where you can select a specific managed identity
TheAudienceproperty appears on specific triggers and actions so that you can set the resource ID for the Azure target resource or service. Otherwise, by default, theAudienceproperty uses thehttps://management.azure.com/resource ID, which is the resource ID for Azure Resource Manager.
TheAudienceproperty appears on specific triggers and actions so that you can set the resource ID for the Azure target resource or service. Otherwise, by default, theAudienceproperty uses thehttps://management.azure.com/resource ID, which is the resource ID for Azure Resource Manager.
https://management.azure.com/

From theManaged Identitylist, select the identity that you want to use, for example:NoteThe default selected option is theSystem-assigned managed identity,
even when you don't have any managed identities enabled.To successfully use a managed identity, you must first enable that identity on your
logic app. On a Standard logic app, you can have both the system-assigned and
user-assigned managed identity defined and enabled. However, your logic app should
use only one managed identity at a time.For example, a workflow that accesses different Azure Service Bus messaging entities
should use only one managed identity. SeeConnect to Azure Service Bus from workflows.
From theManaged Identitylist, select the identity that you want to use, for example:

Note
The default selected option is theSystem-assigned managed identity,
even when you don't have any managed identities enabled.
To successfully use a managed identity, you must first enable that identity on your
logic app. On a Standard logic app, you can have both the system-assigned and
user-assigned managed identity defined and enabled. However, your logic app should
use only one managed identity at a time.
For example, a workflow that accesses different Azure Service Bus messaging entities
should use only one managed identity. SeeConnect to Azure Service Bus from workflows.
For more information, seeExample: Authenticate built-in trigger or action with a managed identity.
Managed connector operations that support managed identity authenticationOn theCreate Connectionpane, from theAuthenticationlist, selectManaged Identity, for example:On the next pane, forConnection Name, provide a name to use for the connection.For the authentication type, choose one of the following options based on your managed connector:Single-authentication: These connectors support only one authentication type, which is the managed identity in this case.From theManaged Identitylist, select the currently enabled managed identity.When you're ready, selectCreate New.Multi-authentication: These connectors support multiple authentication types, but you can select and use only one type at a time.These steps continue by using anAzure Blob Storageaction as an example.From theAuthentication Typelist, selectLogic Apps Managed Identity.From theManaged identitylist, select the identity that you want to use.When you're ready, selectCreate New.For more information, seeExample: Authenticate managed connector trigger or action with a managed identity.
Managed connector operations that support managed identity authentication
On theCreate Connectionpane, from theAuthenticationlist, selectManaged Identity, for example:
On theCreate Connectionpane, from theAuthenticationlist, selectManaged Identity, for example:

On the next pane, forConnection Name, provide a name to use for the connection.
On the next pane, forConnection Name, provide a name to use for the connection.
For the authentication type, choose one of the following options based on your managed connector:Single-authentication: These connectors support only one authentication type, which is the managed identity in this case.From theManaged Identitylist, select the currently enabled managed identity.When you're ready, selectCreate New.Multi-authentication: These connectors support multiple authentication types, but you can select and use only one type at a time.These steps continue by using anAzure Blob Storageaction as an example.From theAuthentication Typelist, selectLogic Apps Managed Identity.From theManaged identitylist, select the identity that you want to use.When you're ready, selectCreate New.For more information, seeExample: Authenticate managed connector trigger or action with a managed identity.
For the authentication type, choose one of the following options based on your managed connector:
Single-authentication: These connectors support only one authentication type, which is the managed identity in this case.From theManaged Identitylist, select the currently enabled managed identity.When you're ready, selectCreate New.
Single-authentication: These connectors support only one authentication type, which is the managed identity in this case.
From theManaged Identitylist, select the currently enabled managed identity.
From theManaged Identitylist, select the currently enabled managed identity.
When you're ready, selectCreate New.
When you're ready, selectCreate New.
Multi-authentication: These connectors support multiple authentication types, but you can select and use only one type at a time.These steps continue by using anAzure Blob Storageaction as an example.From theAuthentication Typelist, selectLogic Apps Managed Identity.From theManaged identitylist, select the identity that you want to use.When you're ready, selectCreate New.
Multi-authentication: These connectors support multiple authentication types, but you can select and use only one type at a time.
These steps continue by using anAzure Blob Storageaction as an example.
From theAuthentication Typelist, selectLogic Apps Managed Identity.
From theAuthentication Typelist, selectLogic Apps Managed Identity.

From theManaged identitylist, select the identity that you want to use.
From theManaged identitylist, select the identity that you want to use.

When you're ready, selectCreate New.
When you're ready, selectCreate New.
For more information, seeExample: Authenticate managed connector trigger or action with a managed identity.

Example: Authenticate built-in trigger or action with a managed identity
The built-in HTTP trigger or action can use the system-assigned identity that you enable on your logic app resource. In general, the HTTP trigger or action uses the following properties to specify the resource or entity that you want to access:
As a specific example, suppose that you want to run theSnapshot Blob operationon a blob in the Azure Storage account where you previously set up access for your identity. However, theAzure Blob Storage connectordoesn't currently offer this operation. Instead, you can run this operation by using theHTTP actionor anotherBlob Service REST API operation.
Important
To access Azure storage accounts behind firewalls by using the Azure Blob Storage connector
and managed identities, make sure that you also set up your storage account with theexception that allows access by trusted Microsoft services.
To run theSnapshot Blob operation, the HTTP action specifies the following properties:
https://<storage-account-name>/<folder-name>/{name}
PUT
x-ms-blob-type
BlockBlob
x-ms-version
2024-05-05
x-ms-date
formatDateTime(utcNow(),'r')
x-ms-blob-type
x-ms-version
x-ms-date
x-ms-version
x-ms-date
403 FORBIDDEN
comp
snapshot
Consumption
Standard
On the workflow designer, add any trigger you want, and then add theHTTPaction.The following example shows a sample HTTP action with all the previously described property values to use for the Snapshot Blob operation:
On the workflow designer, add any trigger you want, and then add theHTTPaction.
The following example shows a sample HTTP action with all the previously described property values to use for the Snapshot Blob operation:

In theHTTPaction, add theAuthenticationproperty. From theAdvanced parameterslist, selectAuthentication.TheAuthenticationsection now appears in yourHTTPaction.NoteNot all triggers and actions support letting you add an authentication type. For more information,
seeAuthentication types for triggers and actions that support authentication.
In theHTTPaction, add theAuthenticationproperty. From theAdvanced parameterslist, selectAuthentication.

TheAuthenticationsection now appears in yourHTTPaction.
Note
Not all triggers and actions support letting you add an authentication type. For more information,
seeAuthentication types for triggers and actions that support authentication.
From theAuthentication Typelist, selectManaged Identity.
From theAuthentication Typelist, selectManaged Identity.

From theManaged Identitylist, select from the available options based on your scenario.If you set up the system-assigned identity, selectSystem-assigned managed identity.If you set up the user-assigned identity, select that identity.This example continues with theSystem-assigned managed identity.
From theManaged Identitylist, select from the available options based on your scenario.
If you set up the system-assigned identity, selectSystem-assigned managed identity.
If you set up the system-assigned identity, selectSystem-assigned managed identity.

If you set up the user-assigned identity, select that identity.
If you set up the user-assigned identity, select that identity.

This example continues with theSystem-assigned managed identity.
On some triggers and actions, theAudienceproperty appears so that you can set the resource ID for the target Azure resource or service.For example, to authenticate access to aKey Vault resource in the global Azure cloud, you must set theAudienceproperty toexactlythe following resource ID:https://vault.azure.netIf you don't set theAudienceproperty, by default, theAudienceproperty uses thehttps://management.azure.com/resource ID, which is the resource ID for Azure Resource Manager.ImportantMake sure that the target resource IDexactly matchesthe value that Microsoft Entra ID expects.
Otherwise, you might get either a400 Bad Requesterror or a401 Unauthorizederror. So, if
the resource ID includes any trailing slashes, make sure to include them. Otherwise, don't include
them.For example, the resource ID for all Azure Blob Storage accounts requires a trailing slash. However,
the resource ID for a specific storage account doesn't require a trailing slash. Check the
resource IDs for theAzure services that support Microsoft Entra ID.This example sets theAudienceproperty tohttps://storage.azure.com/so that the access tokens used for authentication are valid for all storage accounts. However, you can also specify the root service URL,https://<your-storage-account>.blob.core.windows.net, for a specific storage account.For more information about authorizing access with Microsoft Entra ID for Azure Storage, see the following documentation:Authorize access to Azure blobs and queues by using Microsoft Entra IDAuthorize access to Azure Storage with OAuth
On some triggers and actions, theAudienceproperty appears so that you can set the resource ID for the target Azure resource or service.
For example, to authenticate access to aKey Vault resource in the global Azure cloud, you must set theAudienceproperty toexactlythe following resource ID:https://vault.azure.net
https://vault.azure.net
If you don't set theAudienceproperty, by default, theAudienceproperty uses thehttps://management.azure.com/resource ID, which is the resource ID for Azure Resource Manager.
https://management.azure.com/
Important
Make sure that the target resource IDexactly matchesthe value that Microsoft Entra ID expects.
Otherwise, you might get either a400 Bad Requesterror or a401 Unauthorizederror. So, if
the resource ID includes any trailing slashes, make sure to include them. Otherwise, don't include
them.
400 Bad Request
401 Unauthorized
For example, the resource ID for all Azure Blob Storage accounts requires a trailing slash. However,
the resource ID for a specific storage account doesn't require a trailing slash. Check the
resource IDs for theAzure services that support Microsoft Entra ID.
This example sets theAudienceproperty tohttps://storage.azure.com/so that the access tokens used for authentication are valid for all storage accounts. However, you can also specify the root service URL,https://<your-storage-account>.blob.core.windows.net, for a specific storage account.
https://storage.azure.com/
https://<your-storage-account>.blob.core.windows.net

For more information about authorizing access with Microsoft Entra ID for Azure Storage, see the following documentation:
Authorize access to Azure blobs and queues by using Microsoft Entra ID
Authorize access to Azure blobs and queues by using Microsoft Entra ID
Authorize access to Azure Storage with OAuth
Authorize access to Azure Storage with OAuth
Continue building the workflow the way that you want.
Continue building the workflow the way that you want.
On the workflow designer, add any trigger you want, and then add theHTTPaction.The following example shows a sample HTTP action with all the previously described property values to use for the Snapshot Blob operation:
On the workflow designer, add any trigger you want, and then add theHTTPaction.
The following example shows a sample HTTP action with all the previously described property values to use for the Snapshot Blob operation:

In theHTTPaction, add theAuthenticationproperty. From theAdvanced parameterslist, selectAuthentication.TheAuthenticationsection now appears in yourHTTPaction.NoteNot all triggers and actions support letting you add an authentication type. For more information, seeAuthentication types for triggers and actions that support authentication.
In theHTTPaction, add theAuthenticationproperty. From theAdvanced parameterslist, selectAuthentication.

TheAuthenticationsection now appears in yourHTTPaction.
Note
Not all triggers and actions support letting you add an authentication type. For more information, seeAuthentication types for triggers and actions that support authentication.
From theAuthentication typelist, selectManaged Identity.
From theAuthentication typelist, selectManaged Identity.

From theManaged Identitylist, select from the available options based on your scenario.If you set up the system-assigned identity, selectSystem-assigned managed identity.If you set up a user-assigned identity, select that identity.This example continues with theSystem-assigned managed identity.
From theManaged Identitylist, select from the available options based on your scenario.
If you set up the system-assigned identity, selectSystem-assigned managed identity.
If you set up the system-assigned identity, selectSystem-assigned managed identity.

If you set up a user-assigned identity, select that identity.
If you set up a user-assigned identity, select that identity.

This example continues with theSystem-assigned managed identity.
On some triggers and actions, theAudienceproperty appears so that you can set the resource ID for the target Azure resource or service.For example, toauthenticate access to a Key Vault resource in the global Azure cloud, you must set theAudienceproperty toexactlythe following resource ID:https://vault.azure.netIf you don't set theAudienceproperty, by default, theAudienceproperty uses thehttps://management.azure.com/resource ID, which is the resource ID for Azure Resource Manager.ImportantMake sure that the target resource IDexactly matchesthe value that Microsoft Entra ID expects.
Otherwise, you might get either a400 Bad Requesterror or a401 Unauthorizederror. So, if
the resource ID includes any trailing slashes, make sure to include them. Otherwise, don't include
them.For example, the resource ID for all Azure Blob Storage accounts requires a trailing slash. However,
the resource ID for a specific storage account doesn't require a trailing slash. Check the
resource IDs for theAzure services that support Microsoft Entra ID.This example sets theAudienceproperty tohttps://storage.azure.com/so that the access tokens used for authentication are valid for all storage accounts. However, you can also specify the root service URL,https://<your-storage-account>.blob.core.windows.net, for a specific storage account.For more information about authorizing access with Microsoft Entra ID for Azure Storage, see the following documentation:Authorize access to Azure blobs and queues by using Microsoft Entra IDAuthorize access to Azure Storage with OAuth
On some triggers and actions, theAudienceproperty appears so that you can set the resource ID for the target Azure resource or service.
For example, toauthenticate access to a Key Vault resource in the global Azure cloud, you must set theAudienceproperty toexactlythe following resource ID:https://vault.azure.net
https://vault.azure.net
If you don't set theAudienceproperty, by default, theAudienceproperty uses thehttps://management.azure.com/resource ID, which is the resource ID for Azure Resource Manager.
https://management.azure.com/
Important
Make sure that the target resource IDexactly matchesthe value that Microsoft Entra ID expects.
Otherwise, you might get either a400 Bad Requesterror or a401 Unauthorizederror. So, if
the resource ID includes any trailing slashes, make sure to include them. Otherwise, don't include
them.
400 Bad Request
401 Unauthorized
For example, the resource ID for all Azure Blob Storage accounts requires a trailing slash. However,
the resource ID for a specific storage account doesn't require a trailing slash. Check the
resource IDs for theAzure services that support Microsoft Entra ID.
This example sets theAudienceproperty tohttps://storage.azure.com/so that the access tokens used for authentication are valid for all storage accounts. However, you can also specify the root service URL,https://<your-storage-account>.blob.core.windows.net, for a specific storage account.
https://storage.azure.com/
https://<your-storage-account>.blob.core.windows.net

For more information about authorizing access with Microsoft Entra ID for Azure Storage, see the following documentation:
Authorize access to Azure blobs and queues by using Microsoft Entra ID
Authorize access to Azure blobs and queues by using Microsoft Entra ID
Authorize access to Azure Storage with OAuth
Authorize access to Azure Storage with OAuth
Continue building the workflow the way that you want.
Continue building the workflow the way that you want.

Example: Authenticate managed connector trigger or action with a managed identity
TheAzure Resource Managermanaged connector has an action namedRead a resource, which can use the managed identity that you enable on your logic app resource. This example shows how to use the system-assigned managed identity with a managed connector.
Consumption
Standard
On the workflow designer, add theAzure Resource Manageraction namedRead a resource.
On the workflow designer, add theAzure Resource Manageraction namedRead a resource.
On theCreate Connectionpane, from theAuthenticationlist, selectManaged Identity, and then selectSign in.NoteIn other connectors, theAuthentication Typelist showsLogic Apps Managed Identityinstead, so select this option.
On theCreate Connectionpane, from theAuthenticationlist, selectManaged Identity, and then selectSign in.
Note
In other connectors, theAuthentication Typelist showsLogic Apps Managed Identityinstead, so select this option.

Provide a name for the connection, and select the managed identity that you want to use.If you enabled the system-assigned identity, theManaged identitylist automatically selectsSystem-assigned managed identity. If you enabled a user-assigned identity instead, the list automatically selects the user-assigned identity.In this example,System-assigned managed identityis the only selection available.NoteIf the managed identity isn't enabled when you try to create or change the connection, or if
the managed identity was removed while a managed identity-enabled connection still exists,
you get an error that says you must enable the identity and grant access to the target resource.
Provide a name for the connection, and select the managed identity that you want to use.
If you enabled the system-assigned identity, theManaged identitylist automatically selectsSystem-assigned managed identity. If you enabled a user-assigned identity instead, the list automatically selects the user-assigned identity.
In this example,System-assigned managed identityis the only selection available.

Note
If the managed identity isn't enabled when you try to create or change the connection, or if
the managed identity was removed while a managed identity-enabled connection still exists,
you get an error that says you must enable the identity and grant access to the target resource.
When you're ready, selectCreate New.
When you're ready, selectCreate New.
After the designer successfully creates the connection, the designer can fetch any dynamic values, content, or schema by using managed identity authentication.
After the designer successfully creates the connection, the designer can fetch any dynamic values, content, or schema by using managed identity authentication.
Continue building the workflow the way that you want.
Continue building the workflow the way that you want.
On the workflow designer, add theAzure Resource Manageraction namedRead a resource.
On the workflow designer, add theAzure Resource Manageraction namedRead a resource.
On theCreate Connectionpane, from theAuthenticationlist, selectManaged Identity, and then selectSign in.NoteIn other connectors, theAuthentication Typelist showsLogic Apps Managed Identityinstead, so select this option.
On theCreate Connectionpane, from theAuthenticationlist, selectManaged Identity, and then selectSign in.
Note
In other connectors, theAuthentication Typelist showsLogic Apps Managed Identityinstead, so select this option.

Provide a name for the connection, and select the managed identity that you want to use.By default, Standard logic app resources automatically have the system-assigned identity enabled. So, theManaged identitylist automatically selectsSystem-assigned managed identity. If you also enabled one or more user-assigned identities, theManaged identitylist shows all the currently enabled managed identities, for example:NoteIf the managed identity isn't enabled when you try to create or change the connection, or if
the managed identity was removed while a managed identity-enabled connection still exists,
you get an error that says you must enable the identity and grant access to the target resource.
Provide a name for the connection, and select the managed identity that you want to use.
By default, Standard logic app resources automatically have the system-assigned identity enabled. So, theManaged identitylist automatically selectsSystem-assigned managed identity. If you also enabled one or more user-assigned identities, theManaged identitylist shows all the currently enabled managed identities, for example:

Note
If the managed identity isn't enabled when you try to create or change the connection, or if
the managed identity was removed while a managed identity-enabled connection still exists,
you get an error that says you must enable the identity and grant access to the target resource.
When you're ready, selectCreate New.
When you're ready, selectCreate New.
After the designer successfully creates the connection, the designer can fetch any dynamic values, content, or schema by using managed identity authentication.
After the designer successfully creates the connection, the designer can fetch any dynamic values, content, or schema by using managed identity authentication.
Continue building the workflow the way that you want.
Continue building the workflow the way that you want.

Logic app resource definition and connections that use a managed identity
A connection that enables and uses a managed identity is a special connection type that works only with a managed identity. At runtime, the connection uses the managed identity that's enabled on the logic app resource. Azure Logic Apps checks whether any managed connector operations in the workflow are set up to use the managed identity and that all the required permissions exist to use the managed identity for accessing the target resources specified by the connector operations. If this check is successful, Azure Logic Apps retrieves the Microsoft Entra token that's associated with the managed identity, uses that identity to authenticate access to the target Azure resource, and performs the configured operations in the workflow.
Consumption
Standard
In a Consumption logic app resource, the connection configuration is saved in the resource definition'sparametersobject, which contains the$connectionsobject that includes pointers to the connection's resource ID along with the managed identity's resource ID when the user-assigned identity is enabled.
parameters
$connections
This example shows theparametersobject configuration when the logic app enables thesystem-assignedidentity:
parameters
"parameters": {
   "$connections": {
      "value": {
         "<action-name>": {
            "connectionId": "/subscriptions/<Azure-subscription-ID>/resourceGroups/<resource-group-name>/providers/Microsoft.Web/connections/<connector-name>",
            "connectionName": "<connector-name>",
            "connectionProperties": {
               "authentication": {
                  "type": "ManagedServiceIdentity"
               }
            },
            "id": "/subscriptions/<Azure-subscription-ID>/providers/Microsoft.Web/locations/<Azure-region>/managedApis/<managed-connector-type>"
         }
      }
   }
}
"parameters": {
   "$connections": {
      "value": {
         "<action-name>": {
            "connectionId": "/subscriptions/<Azure-subscription-ID>/resourceGroups/<resource-group-name>/providers/Microsoft.Web/connections/<connector-name>",
            "connectionName": "<connector-name>",
            "connectionProperties": {
               "authentication": {
                  "type": "ManagedServiceIdentity"
               }
            },
            "id": "/subscriptions/<Azure-subscription-ID>/providers/Microsoft.Web/locations/<Azure-region>/managedApis/<managed-connector-type>"
         }
      }
   }
}
This example shows theparametersobject configuration when the logic app enables theuser-assignedmanaged identity:
parameters
"parameters": {
   "$connections": {
      "value": {
         "<action-name>": {
            "connectionId": "/subscriptions/<Azure-subscription-ID>/resourceGroups/<resource-group-name>/providers/Microsoft.Web/connections/<connector-name>",
            "connectionName": "<connector-name>",
            "connectionProperties": {
               "authentication": {
                  "type": "ManagedServiceIdentity",
                  "identity": "/subscriptions/<Azure-subscription-ID>/resourceGroups/<resource-group-name>/providers/microsoft.managedidentity/userassignedidentities/<managed-identity-name>"
               }
            },
            "id": "/subscriptions/<Azure-subscription-ID>/providers/Microsoft.Web/locations/<Azure-region>/managedApis/<managed-connector-type>"
         }
      }
   }
}
"parameters": {
   "$connections": {
      "value": {
         "<action-name>": {
            "connectionId": "/subscriptions/<Azure-subscription-ID>/resourceGroups/<resource-group-name>/providers/Microsoft.Web/connections/<connector-name>",
            "connectionName": "<connector-name>",
            "connectionProperties": {
               "authentication": {
                  "type": "ManagedServiceIdentity",
                  "identity": "/subscriptions/<Azure-subscription-ID>/resourceGroups/<resource-group-name>/providers/microsoft.managedidentity/userassignedidentities/<managed-identity-name>"
               }
            },
            "id": "/subscriptions/<Azure-subscription-ID>/providers/Microsoft.Web/locations/<Azure-region>/managedApis/<managed-connector-type>"
         }
      }
   }
}
In a Standard logic app resource, the connection configuration is saved in the logic app resource or project'sconnections.jsonfile, which contains amanagedApiConnectionsobject that includes connection configuration information for each managed connector used in a workflow. This connection information includes pointers to the connection's resource ID along with the managed identity properties, such as the resource ID when the user-assigned identity is enabled.
connections.json
managedApiConnections
This example shows themanagedApiConnectionsobject configuration when the logic app enables thesystem-assignedidentity:
managedApiConnections
{
    "managedApiConnections": {
        "<connector-name>": {
            "api": {
                "id": "/subscriptions/<Azure-subscription-ID>/providers/Microsoft.Web/locations/<Azure-region>/managedApis/<connector-name>"
            },
            "authentication": { // Authentication for the internal token store
                "type": "ManagedServiceIdentity"
            },
            "connection": {
                "id": "/subscriptions/<Azure-subscription-ID>/resourceGroups/<resource-group-name>/providers/Microsoft.Web/connections/<connector-name>"
            },
            "connectionProperties": {
                "authentication": { // Authentication for the target resource
                    "audience": "<resource-URL>",
                    "type": "ManagedServiceIdentity"
                }
            },
            "connectionRuntimeUrl": "<connection-runtime-URL>"
        }
    }
}
{
    "managedApiConnections": {
        "<connector-name>": {
            "api": {
                "id": "/subscriptions/<Azure-subscription-ID>/providers/Microsoft.Web/locations/<Azure-region>/managedApis/<connector-name>"
            },
            "authentication": { // Authentication for the internal token store
                "type": "ManagedServiceIdentity"
            },
            "connection": {
                "id": "/subscriptions/<Azure-subscription-ID>/resourceGroups/<resource-group-name>/providers/Microsoft.Web/connections/<connector-name>"
            },
            "connectionProperties": {
                "authentication": { // Authentication for the target resource
                    "audience": "<resource-URL>",
                    "type": "ManagedServiceIdentity"
                }
            },
            "connectionRuntimeUrl": "<connection-runtime-URL>"
        }
    }
}
This example shows themanagedApiConnectionsobject configuration when the logic app enables theuser-assignedidentity:
managedApiConnections
{
    "managedApiConnections": {
        "<connector-name>": {
            "api": {
                "id": "/subscriptions/<Azure-subscription-ID>/providers/Microsoft.Web/locations/<Azure-region>/managedApis/<connector-name>"
            },
            "authentication": { // Authentication for the internal token store
                "type": "ManagedServiceIdentity"
            },
            "connection": {
                "id": "/subscriptions/<Azure-subscription-ID>/resourceGroups/<resource-group-name>/providers/Microsoft.Web/connections/<connector-name>"
            },
            "connectionProperties": {
                "authentication": { // Authentication for the target resource
                    "audience": "<resource-URL>",
                    "type": "ManagedServiceIdentity",
                    "identity": "<user-assigned-identity>" // Optional
                }
            },
            "connectionRuntimeUrl": "<connection-runtime-URL>"
        }
    }
}
{
    "managedApiConnections": {
        "<connector-name>": {
            "api": {
                "id": "/subscriptions/<Azure-subscription-ID>/providers/Microsoft.Web/locations/<Azure-region>/managedApis/<connector-name>"
            },
            "authentication": { // Authentication for the internal token store
                "type": "ManagedServiceIdentity"
            },
            "connection": {
                "id": "/subscriptions/<Azure-subscription-ID>/resourceGroups/<resource-group-name>/providers/Microsoft.Web/connections/<connector-name>"
            },
            "connectionProperties": {
                "authentication": { // Authentication for the target resource
                    "audience": "<resource-URL>",
                    "type": "ManagedServiceIdentity",
                    "identity": "<user-assigned-identity>" // Optional
                }
            },
            "connectionRuntimeUrl": "<connection-runtime-URL>"
        }
    }
}

ARM template for API connections and managed identities
If you use an ARM template to automate deployment, and your workflow includes an API connection, which is created by amanaged connectorthat uses a managed identity, you have an extra step to take.
In an ARM template, the underlying connector resource definition differs based on whether you have a Consumption or Standard logic app resource and whether theconnector shows single-authentication or multi-authentication options.
Consumption
Standard
The following examples apply to Consumption logic app resources and show how the underlying connector resource definition differs between a single-authentication connector and a multi-authentication connector.
This example shows the underlying connection resource definition for a connector action that supports only one authentication type and uses a managed identity in a Consumption logic app workflow where the definition includes the following attributes:
Thekindproperty is set toV1for a Consumption logic app.
Thekindproperty is set toV1for a Consumption logic app.
kind
V1
TheparameterValueTypeproperty is set toAlternative.
TheparameterValueTypeproperty is set toAlternative.
parameterValueType
Alternative
{
    "type": "Microsoft.Web/connections",
    "apiVersion": "[providers('Microsoft.Web','connections').apiVersions[0]]",
    "name": "[variables('connections_<connector-name>_name')]",
    "location": "[parameters('location')]",
    "kind": "V1",
    "properties": {
        "alternativeParameterValues": {},
        "api": {
            "id": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', parameters('location'), 'azureautomation')]"
        },
        "authenticatedUser": {},
        "connectionState": "Enabled",
        "customParameterValues": {},
        "displayName": "[variables('connections_<connector-name>_name')]",
        "parameterValueSet": {},
        "parameterValueType": "Alternative"
    }
},
{
    "type": "Microsoft.Web/connections",
    "apiVersion": "[providers('Microsoft.Web','connections').apiVersions[0]]",
    "name": "[variables('connections_<connector-name>_name')]",
    "location": "[parameters('location')]",
    "kind": "V1",
    "properties": {
        "alternativeParameterValues": {},
        "api": {
            "id": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', parameters('location'), 'azureautomation')]"
        },
        "authenticatedUser": {},
        "connectionState": "Enabled",
        "customParameterValues": {},
        "displayName": "[variables('connections_<connector-name>_name')]",
        "parameterValueSet": {},
        "parameterValueType": "Alternative"
    }
},
This example shows the underlying connection resource definition for a connector action that supports multiple authentication types and uses a managed identity in a Consumption logic app workflow where the definition includes the following attributes:
Thekindproperty is set toV1for a Consumption logic app.
Thekindproperty is set toV1for a Consumption logic app.
kind
V1
TheparameterValueSetobject includes anameproperty that's set tomanagedIdentityAuthand avaluesproperty that's set to an empty object.
TheparameterValueSetobject includes anameproperty that's set tomanagedIdentityAuthand avaluesproperty that's set to an empty object.
parameterValueSet
name
managedIdentityAuth
values
{
    "type": "Microsoft.Web/connections",
    "apiVersion": "[providers('Microsoft.Web','connections').apiVersions[0]]",
    "name": "[variables('connections_<connector-name>_name')]",
    "location": "[parameters('location')]",
    "kind": "V1",
    "properties": {
        "alternativeParameterValues":{},
        "api": {
            "id": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', parameters('location'), 'azureblob')]"
        },
        "authenticatedUser": {},
        "connectionState": "Enabled",
        "customParameterValues": {},
        "displayName": "[variables('connections_<connector-name>_name')]",
        "parameterValueSet":{
            "name": "managedIdentityAuth",
            "values": {}
        },
        "parameterValueType": "Alternative"
    }
}
{
    "type": "Microsoft.Web/connections",
    "apiVersion": "[providers('Microsoft.Web','connections').apiVersions[0]]",
    "name": "[variables('connections_<connector-name>_name')]",
    "location": "[parameters('location')]",
    "kind": "V1",
    "properties": {
        "alternativeParameterValues":{},
        "api": {
            "id": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', parameters('location'), 'azureblob')]"
        },
        "authenticatedUser": {},
        "connectionState": "Enabled",
        "customParameterValues": {},
        "displayName": "[variables('connections_<connector-name>_name')]",
        "parameterValueSet":{
            "name": "managedIdentityAuth",
            "values": {}
        },
        "parameterValueType": "Alternative"
    }
}
The following examples apply to Standard logic app resources and show how the underlying connector resource definition differs between a single-authentication connector and a multi-authentication connector.
This example shows the underlying connection resource definition for a connector action that supports only one authentication type and uses a managed identity in a Standard logic app workflow where the definition includes the following attributes:
Thekindproperty is set toV2for a Standard logic app.
Thekindproperty is set toV2for a Standard logic app.
kind
V2
TheparameterValueTypeproperty is set toAlternative.
TheparameterValueTypeproperty is set toAlternative.
parameterValueType
Alternative
{
    "type": "Microsoft.Web/connections",
    "name": "[variables('connections_<connector-name>_name')]",
    "apiVersion": "[providers('Microsoft.Web','connections').apiVersions[0]]",
    "location": "[parameters('location')]",
    "kind": "V2",
    "properties": {
        "alternativeParameterValues": {},
        "api": {
            "id": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', parameters('location'), '<connector-name>')]"
        },
        "authenticatedUser": {},
        "connectionState": "Enabled",
        "customParameterValues": {},
        "displayName": "[variables('connections_<connector-name>_name')]",
        "parameterValueSet": {},
        "parameterValueType": "Alternative"
    }
},
{
    "type": "Microsoft.Web/connections",
    "name": "[variables('connections_<connector-name>_name')]",
    "apiVersion": "[providers('Microsoft.Web','connections').apiVersions[0]]",
    "location": "[parameters('location')]",
    "kind": "V2",
    "properties": {
        "alternativeParameterValues": {},
        "api": {
            "id": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', parameters('location'), '<connector-name>')]"
        },
        "authenticatedUser": {},
        "connectionState": "Enabled",
        "customParameterValues": {},
        "displayName": "[variables('connections_<connector-name>_name')]",
        "parameterValueSet": {},
        "parameterValueType": "Alternative"
    }
},
This example shows the underlying connection resource definition for a connector action that supports multiple authentication types and uses a managed identity in a Standard logic app workflow where the definition includes the following attributes:
Thekindproperty is set toV2for a Standard logic app.
Thekindproperty is set toV2for a Standard logic app.
kind
V2
TheparameterValueSetobject includes anameproperty that's set tomanagedIdentityAuthand avaluesproperty that's set to an empty object.
TheparameterValueSetobject includes anameproperty that's set tomanagedIdentityAuthand avaluesproperty that's set to an empty object.
parameterValueSet
name
managedIdentityAuth
values
{
    "type": "Microsoft.Web/connections",
    "apiVersion": "[providers('Microsoft.Web','connections').apiVersions[0]]",
    "name": "[variables('connections_<connector-name>_name')]",
    "location": "[parameters('location')]",
    "kind": "V2",
    "properties": {
        "alternativeParameterValues":{},
        "api": {
            "id": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', parameters('location'), '<connector-name>')]"
        },
        "authenticatedUser": {},
        "connectionState": "Enabled",
        "customParameterValues": {},
        "displayName": "[variables('connections_<connector-name>_name')]",
        "parameterValueSet":{
            "name": "managedIdentityAuth",
            "values": {}
        },
        "parameterValueType": "Alternative"
    }
}
{
    "type": "Microsoft.Web/connections",
    "apiVersion": "[providers('Microsoft.Web','connections').apiVersions[0]]",
    "name": "[variables('connections_<connector-name>_name')]",
    "location": "[parameters('location')]",
    "kind": "V2",
    "properties": {
        "alternativeParameterValues":{},
        "api": {
            "id": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', parameters('location'), '<connector-name>')]"
        },
        "authenticatedUser": {},
        "connectionState": "Enabled",
        "customParameterValues": {},
        "displayName": "[variables('connections_<connector-name>_name')]",
        "parameterValueSet":{
            "name": "managedIdentityAuth",
            "values": {}
        },
        "parameterValueType": "Alternative"
    }
}
In the subsequentMicrosoft.Web/connectionsresource definition, make sure that you add an access policy that specifies a resource definition for each API connection and provide the following information:
{
   "type": "Microsoft.Web/connections/accessPolicies",
   "apiVersion": "[providers('Microsoft.Web','connections').apiVersions[0]]",
   "name": "[concat('<connector-name>','/','<object-ID>')]",
   "location": "<location>",
   "dependsOn": [
      "[resourceId('Microsoft.Web/connections', parameters('<connector-name>'))]"
   ],
   "properties": {
      "principal": {
         "type": "ActiveDirectory",
         "identity": {
            "objectId": "<object-ID>",
            "tenantId": "<tenant-ID>"
         }
      }
   }
}
{
   "type": "Microsoft.Web/connections/accessPolicies",
   "apiVersion": "[providers('Microsoft.Web','connections').apiVersions[0]]",
   "name": "[concat('<connector-name>','/','<object-ID>')]",
   "location": "<location>",
   "dependsOn": [
      "[resourceId('Microsoft.Web/connections', parameters('<connector-name>'))]"
   ],
   "properties": {
      "principal": {
         "type": "ActiveDirectory",
         "identity": {
            "objectId": "<object-ID>",
            "tenantId": "<tenant-ID>"
         }
      }
   }
}
For more information, seeMicrosoft.Web/connections/accesspolicies (ARM template).

Set up advanced control over API connection authentication
When your Standard logic app workflow uses an API connection, which is created by amanaged connector, Azure Logic Apps communicates with the target resource, such as your email account, key vault, and so on, using two connections:

Connection #1 is set up with authentication for the internal token store.
Connection #1 is set up with authentication for the internal token store.
Connection #2 is set up with authentication for the target resource.
Connection #2 is set up with authentication for the target resource.
However, when a Consumption logic app workflow uses an API connection, connection #1 is abstracted from you without any configuration options. With the Standard logic app resource, you have more control over your logic app and workflows. By default, connection #1 is automatically set up to use the system-assigned identity.
If your scenario requires finer control over authenticating API connections, you can optionally change the authentication for connection #1 from the default system-assigned identity to any user-assigned identity that you added to your logic app. This authentication applies to each API connection, so you can mix system-assigned and user-assigned identities across different connections to the same target resource.
In your Standard logic app'sconnections.jsonfile, which stores information about each API connection, each connection definition has twoauthenticationsections, for example:
authentication
"keyvault": {
   "api": {
      "id": "/subscriptions/<Azure-subscription-ID>/providers/Microsoft.Web/locations/<Azure-region>/managedApis/keyvault"
   },
   "authentication": {
      "type": "ManagedServiceIdentity",
   },
   "connection": {
      "id": "/subscriptions/<Azure-subscription-ID>/resourceGroups/<resource-group-name>/providers/Microsoft.Web/connections/<connector-name>"
   },
   "connectionProperties": {
      "authentication": {
         "audience": "https://vault.azure.net",
         "type": "ManagedServiceIdentity"
      }
   },
   "connectionRuntimeUrl": "<connection-runtime-URL>"
}
"keyvault": {
   "api": {
      "id": "/subscriptions/<Azure-subscription-ID>/providers/Microsoft.Web/locations/<Azure-region>/managedApis/keyvault"
   },
   "authentication": {
      "type": "ManagedServiceIdentity",
   },
   "connection": {
      "id": "/subscriptions/<Azure-subscription-ID>/resourceGroups/<resource-group-name>/providers/Microsoft.Web/connections/<connector-name>"
   },
   "connectionProperties": {
      "authentication": {
         "audience": "https://vault.azure.net",
         "type": "ManagedServiceIdentity"
      }
   },
   "connectionRuntimeUrl": "<connection-runtime-URL>"
}
The firstauthenticationsection maps to connection #1.This section describes the authentication used for communicating with the internal token store. In the past, this section was always set toManagedServiceIdentityfor an app that deploys to Azure and had no configurable options.
The firstauthenticationsection maps to connection #1.
authentication
This section describes the authentication used for communicating with the internal token store. In the past, this section was always set toManagedServiceIdentityfor an app that deploys to Azure and had no configurable options.
ManagedServiceIdentity
The secondauthenticationsection maps to connection #2.This section describes the authentication used for communicating with the target resource can vary, based on the authentication type that you select for that connection.
The secondauthenticationsection maps to connection #2.
authentication
This section describes the authentication used for communicating with the target resource can vary, based on the authentication type that you select for that connection.
Why change the authentication for the token store?
In some scenarios, you might want to share and use the same API connection across multiple logic app resources, but not add the system-assigned identity for each logic app resource to the target resource's access policy.
In other scenarios, you might not want to have the system-assigned identity set up on your logic app entirely, so you can change the authentication to a user-assigned identity and disable the system-assigned identity completely.
Change the authentication for the token store
In theAzure portal, open your Standard logic app resource.
In theAzure portal, open your Standard logic app resource.
On the resource menu, underWorkflows, selectConnections.
On the resource menu, underWorkflows, selectConnections.
On theConnectionspane, selectJSON View.
On theConnectionspane, selectJSON View.

In the JSON editor, find themanagedApiConnectionssection, which contains the API connections across all workflows in your logic app resource.
In the JSON editor, find themanagedApiConnectionssection, which contains the API connections across all workflows in your logic app resource.
managedApiConnections
Find the connection where you want to add a user-assigned managed identity.For example, suppose your workflow has an Azure Key Vault connection:"keyvault": {
   "api": {
      "id": "/subscriptions/<Azure-subscription-ID>/providers/Microsoft.Web/locations/<Azure-region>/managedApis/keyvault"
   },
   "authentication": {
      "type": "ManagedServiceIdentity"
   },
   "connection": {
      "id": "/subscriptions/<Azure-subscription-ID>/resourceGroups/<resource-group-name>/providers/Microsoft.Web/connections/<connector-name>"
   },
   "connectionProperties": {
      "authentication": {
         "audience": "https://vault.azure.net",
         "type": "ManagedServiceIdentity"
      }
   },
   "connectionRuntimeUrl": "<connection-runtime-URL>"
}
Find the connection where you want to add a user-assigned managed identity.
For example, suppose your workflow has an Azure Key Vault connection:
"keyvault": {
   "api": {
      "id": "/subscriptions/<Azure-subscription-ID>/providers/Microsoft.Web/locations/<Azure-region>/managedApis/keyvault"
   },
   "authentication": {
      "type": "ManagedServiceIdentity"
   },
   "connection": {
      "id": "/subscriptions/<Azure-subscription-ID>/resourceGroups/<resource-group-name>/providers/Microsoft.Web/connections/<connector-name>"
   },
   "connectionProperties": {
      "authentication": {
         "audience": "https://vault.azure.net",
         "type": "ManagedServiceIdentity"
      }
   },
   "connectionRuntimeUrl": "<connection-runtime-URL>"
}
"keyvault": {
   "api": {
      "id": "/subscriptions/<Azure-subscription-ID>/providers/Microsoft.Web/locations/<Azure-region>/managedApis/keyvault"
   },
   "authentication": {
      "type": "ManagedServiceIdentity"
   },
   "connection": {
      "id": "/subscriptions/<Azure-subscription-ID>/resourceGroups/<resource-group-name>/providers/Microsoft.Web/connections/<connector-name>"
   },
   "connectionProperties": {
      "authentication": {
         "audience": "https://vault.azure.net",
         "type": "ManagedServiceIdentity"
      }
   },
   "connectionRuntimeUrl": "<connection-runtime-URL>"
}
In the connection definition, complete the following steps:Find the firstauthenticationsection. If noidentityproperty exists in thisauthenticationsection, the logic app implicitly uses the system-assigned identity.Add anidentityproperty by using the example in this step.Set the property value to the resource ID for the user-assigned identity."keyvault": {
   "api": {
      "id": "/subscriptions/<Azure-subscription-ID>/providers/Microsoft.Web/locations/<Azure-region>/managedApis/keyvault"
   },
   "authentication": {
      "type": "ManagedServiceIdentity",
      // Add "identity" property here
      "identity": "/subscriptions/<Azure-subscription-ID>/resourcegroups/<resource-group-name>/providers/Microsoft.ManagedIdentity/userAssignedIdentities/<identity-resource-ID>"
   },
   "connection": {
      "id": "/subscriptions/<Azure-subscription-ID>/resourceGroups/<resource-group-name>/providers/Microsoft.Web/connections/<connector-name>"
   },
   "connectionProperties": {
      "authentication": {
         "audience": "https://vault.azure.net",
         "type": "ManagedServiceIdentity"
      }
   },
   "connectionRuntimeUrl": "<connection-runtime-URL>"
}
In the connection definition, complete the following steps:
Find the firstauthenticationsection. If noidentityproperty exists in thisauthenticationsection, the logic app implicitly uses the system-assigned identity.
Find the firstauthenticationsection. If noidentityproperty exists in thisauthenticationsection, the logic app implicitly uses the system-assigned identity.
authentication
identity
authentication
Add anidentityproperty by using the example in this step.
Add anidentityproperty by using the example in this step.
identity
Set the property value to the resource ID for the user-assigned identity.
Set the property value to the resource ID for the user-assigned identity.
"keyvault": {
   "api": {
      "id": "/subscriptions/<Azure-subscription-ID>/providers/Microsoft.Web/locations/<Azure-region>/managedApis/keyvault"
   },
   "authentication": {
      "type": "ManagedServiceIdentity",
      // Add "identity" property here
      "identity": "/subscriptions/<Azure-subscription-ID>/resourcegroups/<resource-group-name>/providers/Microsoft.ManagedIdentity/userAssignedIdentities/<identity-resource-ID>"
   },
   "connection": {
      "id": "/subscriptions/<Azure-subscription-ID>/resourceGroups/<resource-group-name>/providers/Microsoft.Web/connections/<connector-name>"
   },
   "connectionProperties": {
      "authentication": {
         "audience": "https://vault.azure.net",
         "type": "ManagedServiceIdentity"
      }
   },
   "connectionRuntimeUrl": "<connection-runtime-URL>"
}
"keyvault": {
   "api": {
      "id": "/subscriptions/<Azure-subscription-ID>/providers/Microsoft.Web/locations/<Azure-region>/managedApis/keyvault"
   },
   "authentication": {
      "type": "ManagedServiceIdentity",
      // Add "identity" property here
      "identity": "/subscriptions/<Azure-subscription-ID>/resourcegroups/<resource-group-name>/providers/Microsoft.ManagedIdentity/userAssignedIdentities/<identity-resource-ID>"
   },
   "connection": {
      "id": "/subscriptions/<Azure-subscription-ID>/resourceGroups/<resource-group-name>/providers/Microsoft.Web/connections/<connector-name>"
   },
   "connectionProperties": {
      "authentication": {
         "audience": "https://vault.azure.net",
         "type": "ManagedServiceIdentity"
      }
   },
   "connectionRuntimeUrl": "<connection-runtime-URL>"
}
In the Azure portal, go to the target resource, andgive access to the user-assigned managed identity, based on the target resource's needs.For example, for Azure Key Vault, add the identity to the key vault's access policies. For Azure Blob Storage, assign the necessary role for the identity to the storage account.
In the Azure portal, go to the target resource, andgive access to the user-assigned managed identity, based on the target resource's needs.
For example, for Azure Key Vault, add the identity to the key vault's access policies. For Azure Blob Storage, assign the necessary role for the identity to the storage account.

Disable managed identity
To stop using the managed identity for authentication, firstremove the identity's access to the target resource. Next, on your logic app resource,turn off the system-assigned identity or remove the user-assigned identity.
When you disable the managed identity on your logic app resource, you remove the capability for that identity to request access for Azure resources where the identity had access.
Note
If you disable the system-assigned identity, any and all connections used by workflows in that
logic app's workflow won't work at runtime, even if you immediately enable the identity again.
This behavior happens because disabling the identity deletes its object ID. Each time that you
enable the identity, Azure generates the identity with a different and unique object ID. To resolve
this problem, you need to recreate the connections so that they use the current object ID for the
current system-assigned identity.
Try to avoid disabling the system-assigned identity as much as possible. If you want to remove
the identity's access to Azure resources, remove the identity's role assignment from the target
resource. If you delete your logic app resource, Azure automatically removes the managed identity
from Microsoft Entra ID.
The steps in this section cover using theAzure portalandAzure Resource Manager template (ARM template). For Azure PowerShell, Azure CLI, and Azure REST API, see the following documentation:
For more information, seeRemove Azure role assignments.

Disable managed identity in the Azure portal
To remove access for the managed identity, remove the identity's role assignment from the target resource, and then disable the managed identity.

The following steps remove access to the target resource from the managed identity:
In theAzure portal, go to the target Azure resource where you want to remove access for the managed identity.
In theAzure portal, go to the target Azure resource where you want to remove access for the managed identity.
From the target resource's menu, selectAccess control (IAM). Under the toolbar, selectRole assignments.
From the target resource's menu, selectAccess control (IAM). Under the toolbar, selectRole assignments.
In the roles list, select the managed identities that you want to remove. On the toolbar, selectRemove.TipIf theRemoveoption is disabled, you most likely don't have permissions.
For more information about the permissions that let you manage roles for resources, seeAdministrator role permissions in Microsoft Entra ID.
In the roles list, select the managed identities that you want to remove. On the toolbar, selectRemove.
Tip
If theRemoveoption is disabled, you most likely don't have permissions.
For more information about the permissions that let you manage roles for resources, seeAdministrator role permissions in Microsoft Entra ID.

In theAzure portal, open your logic app resource.
In theAzure portal, open your logic app resource.
On the logic app resource menu, underSettings, selectIdentity, and then follow the steps for your identity:SelectSystem assigned>Off>Save. When Azure prompts you to confirm, selectYes.SelectUser assignedand the managed identity, and then selectRemove. When Azure prompts you to confirm, selectYes.
On the logic app resource menu, underSettings, selectIdentity, and then follow the steps for your identity:
SelectSystem assigned>Off>Save. When Azure prompts you to confirm, selectYes.
SelectSystem assigned>Off>Save. When Azure prompts you to confirm, selectYes.
SelectUser assignedand the managed identity, and then selectRemove. When Azure prompts you to confirm, selectYes.
SelectUser assignedand the managed identity, and then selectRemove. When Azure prompts you to confirm, selectYes.

Disable managed identity in an ARM template
If you created the logic app's managed identity by using an ARM template, set theidentityobject'stypechild property toNone.
identity
type
None
"identity": {
   "type": "None"
}
"identity": {
   "type": "None"
}
Related content
Secure access and data in Azure Logic Apps
Feedback
Was this page helpful?
Additional resources