Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Secure access to the API Management developer portal
Article
2024-04-01
1 contributor
In this article
APPLIES TO: Developer | Basic | Basic v2 | Standard | Standard v2 | Premium | Premium v2
API Management has a fully customizable, standalone, manageddeveloper portal, which can be used externally (or internally) to allow developer users to discover and interact with the APIs published through API Management. The developer portal has several options to facilitate secure user sign-up and sign-in.
Note
By default, the developer portal enables anonymous access. This means that anyone can view the portal and content such as APIs without signing in, although functionality such as using the test console is restricted. You can enable a setting that requires users to sign-in to view the developer portal. In the Azure portal, in the left menu of your API Management instance, underDeveloper portal, selectIdentities>Settings. UnderAnonymous users, select (enable)Redirect anonymous users to sign-in page.
Authentication options
External users- The preferred option when the developer portal is consumed externally is to enable business-to-consumer access control through Azure Active Directory B2C (Azure AD B2C).Azure AD B2C provides the option of using Azure AD B2C native accounts: users sign up to Azure AD B2C and use that identity to access the developer portal.Azure AD B2C is also useful if you want users to access the developer portal using existing social media or federated organizational accounts.Azure AD B2C provides many features to improve the end user sign-up and sign-in experience, including conditional access and MFA.For steps to enable Azure AD B2C authentication in the developer portal, seeHow to authorize developer accounts by using Azure Active Directory B2C in Azure API Management.
External users- The preferred option when the developer portal is consumed externally is to enable business-to-consumer access control through Azure Active Directory B2C (Azure AD B2C).
Azure AD B2C provides the option of using Azure AD B2C native accounts: users sign up to Azure AD B2C and use that identity to access the developer portal.
Azure AD B2C is also useful if you want users to access the developer portal using existing social media or federated organizational accounts.
Azure AD B2C provides many features to improve the end user sign-up and sign-in experience, including conditional access and MFA.
For steps to enable Azure AD B2C authentication in the developer portal, seeHow to authorize developer accounts by using Azure Active Directory B2C in Azure API Management.
Internal users- The preferred option when the developer portal is consumed internally is to leverage your corporate Microsoft Entra ID. Microsoft Entra ID provides a seamless single sign-on (SSO) experience for corporate users who need to access and discover APIs through the developer portal.For steps to enable Microsoft Entra authentication in the developer portal, seeHow to authorize developer accounts by using Microsoft Entra ID in Azure API Management.
Internal users- The preferred option when the developer portal is consumed internally is to leverage your corporate Microsoft Entra ID. Microsoft Entra ID provides a seamless single sign-on (SSO) experience for corporate users who need to access and discover APIs through the developer portal.
For steps to enable Microsoft Entra authentication in the developer portal, seeHow to authorize developer accounts by using Microsoft Entra ID in Azure API Management.
Basic authentication- A default option is to use the built-in developer portalusername and passwordprovider, which allows developers to register directly in API Management and sign in using API Management user accounts. User sign up through this option is protected by a CAPTCHA service.CautionWhile you can use basic authentication to secure users' access to the developer portal, we recommend configuring a more secure authentication method such asMicrosoft Entra IDorAzure AD B2C.
Basic authentication- A default option is to use the built-in developer portalusername and passwordprovider, which allows developers to register directly in API Management and sign in using API Management user accounts. User sign up through this option is protected by a CAPTCHA service.
Caution
While you can use basic authentication to secure users' access to the developer portal, we recommend configuring a more secure authentication method such asMicrosoft Entra IDorAzure AD B2C.
Developer portal test console
In addition to providing configuration for developer users to sign up for access and sign in, the developer portal includes a test console where the developers can send test requests through API Management to the backend APIs. This test facility also exists for contributing users of API Management who manage the service using the Azure portal.
If the API exposed through Azure API Management is secured with OAuth 2.0 - that is, a calling application (bearer) needs to obtain and pass a valid access token - you can configure API Management to generate a valid token on behalf of an Azure portal or developer portal test console user. For more information, seeHow to authorize test console of developer portal by configuring OAuth 2.0 user authorization.
To enable the test console to acquire a valid OAuth 2.0 token for API testing:
Add an OAuth 2.0 user authorization server to your instance. You can use any OAuth 2.0 provider, including Microsoft Entra ID, Azure AD B2C, or a third-party identity provider.
Add an OAuth 2.0 user authorization server to your instance. You can use any OAuth 2.0 provider, including Microsoft Entra ID, Azure AD B2C, or a third-party identity provider.
Then, configure the API with settings for that authorization server. In the portal, configure OAuth 2.0 authorization on the API'sSettingspage >Security>User authorization.
Then, configure the API with settings for that authorization server. In the portal, configure OAuth 2.0 authorization on the API'sSettingspage >Security>User authorization.

This OAuth 2.0 configuration for API testing is independent of the configuration required for user access to the developer portal. However, the identity provider and user could be the same. For example, an intranet application could require user access to the developer portal using SSO with their corporate identity. That same corporate identity could obtain a token, through the test console, for the backend service being called with the same user context.
Scenarios
Different authentication and authorization options apply to different scenarios. The following sections explore high level configurations for three example scenarios. More steps are required to fully secure and configure APIs exposed through API Management. However, the scenarios intentionally focus on the minimum configurations recommended in each case to provide the required authentication and authorization.
Scenario 1 - Intranet API and applications
An API Management contributor and backend API developer wants to publish an API that is secured by OAuth 2.0.
The API will be consumed by desktop applications whose users sign in using SSO through Microsoft Entra ID.
The desktop application developers also need to discover and test the APIs via the API Management developer portal.
Key configurations:
Go a step further with this scenario by moving API Management into the network perimeter and controlling ingress through a reverse proxy. For a reference architecture, seeProtect APIs with Application Gateway and API Management.
Scenario 2 - External API, partner application
An API Management contributor and backend API developer wants to undertake a rapid proof-of-concept to expose a legacy API through Azure API Management. The API through API Management will be externally (internet) facing.
The API uses client certificate authentication and will be consumed by a new public-facing single-page app (SPA) being developed offshore by a partner.
The SPA uses OAuth 2.0 with OpenID Connect (OIDC).
Application developers will access the API in a test environment through the developer portal, using a test backend endpoint to accelerate frontend development.
Key configurations:
Go a step further with this scenario by using thedeveloper portal with Microsoft Entra authorizationand Microsoft EntraB2B collaborationto allow the delivery partners to collaborate more closely. Consider delegating access to API Management through RBAC in a development or test environment and enable SSO into the developer portal using their own corporate credentials.
Scenario 3 - External API, SaaS, open to the public
An API Management contributor and backend API developer is writing several new APIs that will be available to community developers.
An API Management contributor and backend API developer is writing several new APIs that will be available to community developers.
The APIs will be publicly available, with full functionality protected behind a paywall and secured using OAuth 2.0. After purchasing a license, the developer will be provided with their own client credentials and subscription key that is valid for production use.
The APIs will be publicly available, with full functionality protected behind a paywall and secured using OAuth 2.0. After purchasing a license, the developer will be provided with their own client credentials and subscription key that is valid for production use.
External community developers will discover the APIs using the developer portal. Developers will sign up and sign in to the developer portal using their social media accounts.
External community developers will discover the APIs using the developer portal. Developers will sign up and sign in to the developer portal using their social media accounts.
Interested developer portal users with a test subscription key can explore the API functionality in a test context, without needing to purchase a license. The developer portal test console will represent the calling application and generate a default access token to the backend API.CautionExtra care is required when using a client credentials flow with the developer portal test console. Seesecurity considerations.
Interested developer portal users with a test subscription key can explore the API functionality in a test context, without needing to purchase a license. The developer portal test console will represent the calling application and generate a default access token to the backend API.
Caution
Extra care is required when using a client credentials flow with the developer portal test console. Seesecurity considerations.
Key configurations:
Go a step further by delegatinguser registration or product subscriptionand extend the process with your own logic.
Related content
Learn more aboutauthentication and authorizationin the Microsoft identity platform.
Learn how tomitigate OWASP API security threatsusing API Management.
Feedback
Was this page helpful?
Additional resources