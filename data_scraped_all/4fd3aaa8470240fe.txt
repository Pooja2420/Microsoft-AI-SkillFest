Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Get started with Maven packages in Azure Artifacts
Article
2024-07-15
11 contributors
In this article
Azure DevOps Services | Azure DevOps Server 2022 - Azure DevOps Server 2019
Azure Artifacts enables developers to manage their dependencies from a single feed while providing control over package sharing. With Azure Artifacts feeds, you can publish and restore Maven packages, and set up upstream sources to consume packages from public registries like Maven Central, Google Maven Repository, Gradle Plugins, and JitPack. This article will guide you through setting up your Maven project, connecting to an Azure Artifacts feed, and publishing and restoring your Maven packages.
Prerequisites
Create an Azure DevOpsorganizationand aprojectif you haven't already.
Create an Azure DevOpsorganizationand aprojectif you haven't already.
DownloadandInstallApache Maven.
DownloadandInstallApache Maven.
Create a feed
Sign in to your Azure DevOps organization and navigate to your project.
Sign in to your Azure DevOps organization and navigate to your project.
SelectArtifacts, and then selectCreate Feed.
SelectArtifacts, and then selectCreate Feed.
Provide aNamefor your feed, choose theVisibilityoption that defines who can view your packages, checkInclude packages from common public sourcesif you want to include packages from sources likenuget.orgornpmjs.com, and forScope, decide whether the feed should be scoped to your project or the entire organization.
Provide aNamefor your feed, choose theVisibilityoption that defines who can view your packages, checkInclude packages from common public sourcesif you want to include packages from sources likenuget.orgornpmjs.com, and forScope, decide whether the feed should be scoped to your project or the entire organization.
SelectCreatewhen you're done.
SelectCreatewhen you're done.

Sign in to your Azure DevOps server, and then go to your project.
Sign in to your Azure DevOps server, and then go to your project.
SelectArtifacts, and then selectCreate Feed.
SelectArtifacts, and then selectCreate Feed.
Provide aNamefor your feed, choose theVisibilityoption that defines who can view your packages, checkInclude packages from common public sourcesif you want to include packages from sources likenuget.orgornpmjs.com, and forScope, decide whether the feed should be scoped to your project or the entire organization.
Provide aNamefor your feed, choose theVisibilityoption that defines who can view your packages, checkInclude packages from common public sourcesif you want to include packages from sources likenuget.orgornpmjs.com, and forScope, decide whether the feed should be scoped to your project or the entire organization.
SelectCreatewhen you're done.
SelectCreatewhen you're done.

SelectCreatewhen you're done.
SelectCreatewhen you're done.

Note
By default, newly created feeds have their project'sBuild Servicevalue set toFeed and Upstream Reader (Collaborator).
Connect to a feed
Sign in to your Azure DevOps organization, and then navigate to your project.
Sign in to your Azure DevOps organization, and then navigate to your project.
SelectArtifacts, and then select your feed from the dropdown menu.
SelectArtifacts, and then select your feed from the dropdown menu.
SelectConnect to feed, and then selectMavenfrom the left navigation area.
SelectConnect to feed, and then selectMavenfrom the left navigation area.
If this is your first time using Azure Artifacts with Maven, make sure you've installed the prerequisites. Otherwise selectGet the toolsin the top-right corner to install them.
If this is your first time using Azure Artifacts with Maven, make sure you've installed the prerequisites. Otherwise selectGet the toolsin the top-right corner to install them.
Follow the instructions in theProject setupsection to set up yourpom.xmlandsettings.xmlfiles. Your files should resemble the following examples:pom.xml:<repositories>
    <repository>
      <id>MavenDemo</id>
      <url>https://pkgs.dev.azure.com/<ORGANIZATION_NAME>/<PROJECT_NAME>/_packaging/<FEED_NAME>/maven/v1</url>
      <releases>
        <enabled>true</enabled>
      </releases>
      <snapshots>
        <enabled>true</enabled>
      </snapshots>
    </repository>
  </repositories>
  <distributionManagement>
    <repository>
      <id>MavenDemo</id>
      <url>https://pkgs.dev.azure.com/<ORGANIZATION_NAME>/<PROJECT_NAME>/_packaging/<FEED_NAME>/maven/v1</url>
      <releases>
        <enabled>true</enabled>
      </releases>
      <snapshots>
        <enabled>true</enabled>
      </snapshots>
    </repository>
  </distributionManagement>settings.xml:<servers>
    <server>
      <id>MavenDemo</id>
      <username><ORGANIZATION_NAME></username>
      <password>[PERSONAL_ACCESS_TOKEN]</password>
    </server>
  </servers>
Follow the instructions in theProject setupsection to set up yourpom.xmlandsettings.xmlfiles. Your files should resemble the following examples:
pom.xml:<repositories>
    <repository>
      <id>MavenDemo</id>
      <url>https://pkgs.dev.azure.com/<ORGANIZATION_NAME>/<PROJECT_NAME>/_packaging/<FEED_NAME>/maven/v1</url>
      <releases>
        <enabled>true</enabled>
      </releases>
      <snapshots>
        <enabled>true</enabled>
      </snapshots>
    </repository>
  </repositories>
  <distributionManagement>
    <repository>
      <id>MavenDemo</id>
      <url>https://pkgs.dev.azure.com/<ORGANIZATION_NAME>/<PROJECT_NAME>/_packaging/<FEED_NAME>/maven/v1</url>
      <releases>
        <enabled>true</enabled>
      </releases>
      <snapshots>
        <enabled>true</enabled>
      </snapshots>
    </repository>
  </distributionManagement>
pom.xml:
<repositories>
    <repository>
      <id>MavenDemo</id>
      <url>https://pkgs.dev.azure.com/<ORGANIZATION_NAME>/<PROJECT_NAME>/_packaging/<FEED_NAME>/maven/v1</url>
      <releases>
        <enabled>true</enabled>
      </releases>
      <snapshots>
        <enabled>true</enabled>
      </snapshots>
    </repository>
  </repositories>
  <distributionManagement>
    <repository>
      <id>MavenDemo</id>
      <url>https://pkgs.dev.azure.com/<ORGANIZATION_NAME>/<PROJECT_NAME>/_packaging/<FEED_NAME>/maven/v1</url>
      <releases>
        <enabled>true</enabled>
      </releases>
      <snapshots>
        <enabled>true</enabled>
      </snapshots>
    </repository>
  </distributionManagement>
<repositories>
    <repository>
      <id>MavenDemo</id>
      <url>https://pkgs.dev.azure.com/<ORGANIZATION_NAME>/<PROJECT_NAME>/_packaging/<FEED_NAME>/maven/v1</url>
      <releases>
        <enabled>true</enabled>
      </releases>
      <snapshots>
        <enabled>true</enabled>
      </snapshots>
    </repository>
  </repositories>
  <distributionManagement>
    <repository>
      <id>MavenDemo</id>
      <url>https://pkgs.dev.azure.com/<ORGANIZATION_NAME>/<PROJECT_NAME>/_packaging/<FEED_NAME>/maven/v1</url>
      <releases>
        <enabled>true</enabled>
      </releases>
      <snapshots>
        <enabled>true</enabled>
      </snapshots>
    </repository>
  </distributionManagement>
settings.xml:<servers>
    <server>
      <id>MavenDemo</id>
      <username><ORGANIZATION_NAME></username>
      <password>[PERSONAL_ACCESS_TOKEN]</password>
    </server>
  </servers>
settings.xml:
<servers>
    <server>
      <id>MavenDemo</id>
      <username><ORGANIZATION_NAME></username>
      <password>[PERSONAL_ACCESS_TOKEN]</password>
    </server>
  </servers>
<servers>
    <server>
      <id>MavenDemo</id>
      <username><ORGANIZATION_NAME></username>
      <password>[PERSONAL_ACCESS_TOKEN]</password>
    </server>
  </servers>
Generate aPersonal Access TokenwithPackaging>Read & writescope, and then paste it into the<password>tag.
Generate aPersonal Access TokenwithPackaging>Read & writescope, and then paste it into the<password>tag.
<password>
Sign in to your Azure DevOps collection, and then navigate to your project.
Sign in to your Azure DevOps collection, and then navigate to your project.
SelectArtifacts, and then select your feed from the dropdown menu.
SelectArtifacts, and then select your feed from the dropdown menu.
SelectConnect to Feed, and then selectMavenfrom the left navigation pane.
SelectConnect to Feed, and then selectMavenfrom the left navigation pane.
If this is your first time using Azure Artifacts with Maven, make sure you've installed the prerequisites, otherwise selectGet the toolsin the top-right corner to install them.
If this is your first time using Azure Artifacts with Maven, make sure you've installed the prerequisites, otherwise selectGet the toolsin the top-right corner to install them.
Follow the instructions in theProject setupsection to set up yourpom.xmlandsettings.xmlfiles. Your files should resemble the following examples:pom.xml:<repositories>
    <repository>
      <id>MavenDemo</id>
      <url>http://<SERVER_NAME>/<COLLECTION_NAME>/<PROJECT_NAME>/_packaging/<FEED_NAME>/maven/v1</url>
      <releases>
        <enabled>true</enabled>
      </releases>
      <snapshots>
        <enabled>true</enabled>
      </snapshots>
    </repository>
  </repositories>
  <distributionManagement>
    <repository>
      <id>MavenDemo</id>
      <url>http://<SERVER_NAME>/<COLLECTION_NAME>/<PROJECT_NAME>/_packaging/<FEED_NAME>/maven/v1</url>
      <releases>
        <enabled>true</enabled>
      </releases>
      <snapshots>
        <enabled>true</enabled>
      </snapshots>
    </repository>
  </distributionManagement>settings.xml:<servers>
    <server>
      <id>MavenDemo</id>
      <username><COLLECTION_NAME></username>
      <password>[PERSONAL_ACCESS_TOKEN]</password>
    </server>
  </servers>
Follow the instructions in theProject setupsection to set up yourpom.xmlandsettings.xmlfiles. Your files should resemble the following examples:
pom.xml:<repositories>
    <repository>
      <id>MavenDemo</id>
      <url>http://<SERVER_NAME>/<COLLECTION_NAME>/<PROJECT_NAME>/_packaging/<FEED_NAME>/maven/v1</url>
      <releases>
        <enabled>true</enabled>
      </releases>
      <snapshots>
        <enabled>true</enabled>
      </snapshots>
    </repository>
  </repositories>
  <distributionManagement>
    <repository>
      <id>MavenDemo</id>
      <url>http://<SERVER_NAME>/<COLLECTION_NAME>/<PROJECT_NAME>/_packaging/<FEED_NAME>/maven/v1</url>
      <releases>
        <enabled>true</enabled>
      </releases>
      <snapshots>
        <enabled>true</enabled>
      </snapshots>
    </repository>
  </distributionManagement>
pom.xml:
<repositories>
    <repository>
      <id>MavenDemo</id>
      <url>http://<SERVER_NAME>/<COLLECTION_NAME>/<PROJECT_NAME>/_packaging/<FEED_NAME>/maven/v1</url>
      <releases>
        <enabled>true</enabled>
      </releases>
      <snapshots>
        <enabled>true</enabled>
      </snapshots>
    </repository>
  </repositories>
  <distributionManagement>
    <repository>
      <id>MavenDemo</id>
      <url>http://<SERVER_NAME>/<COLLECTION_NAME>/<PROJECT_NAME>/_packaging/<FEED_NAME>/maven/v1</url>
      <releases>
        <enabled>true</enabled>
      </releases>
      <snapshots>
        <enabled>true</enabled>
      </snapshots>
    </repository>
  </distributionManagement>
<repositories>
    <repository>
      <id>MavenDemo</id>
      <url>http://<SERVER_NAME>/<COLLECTION_NAME>/<PROJECT_NAME>/_packaging/<FEED_NAME>/maven/v1</url>
      <releases>
        <enabled>true</enabled>
      </releases>
      <snapshots>
        <enabled>true</enabled>
      </snapshots>
    </repository>
  </repositories>
  <distributionManagement>
    <repository>
      <id>MavenDemo</id>
      <url>http://<SERVER_NAME>/<COLLECTION_NAME>/<PROJECT_NAME>/_packaging/<FEED_NAME>/maven/v1</url>
      <releases>
        <enabled>true</enabled>
      </releases>
      <snapshots>
        <enabled>true</enabled>
      </snapshots>
    </repository>
  </distributionManagement>
settings.xml:<servers>
    <server>
      <id>MavenDemo</id>
      <username><COLLECTION_NAME></username>
      <password>[PERSONAL_ACCESS_TOKEN]</password>
    </server>
  </servers>
settings.xml:
<servers>
    <server>
      <id>MavenDemo</id>
      <username><COLLECTION_NAME></username>
      <password>[PERSONAL_ACCESS_TOKEN]</password>
    </server>
  </servers>
<servers>
    <server>
      <id>MavenDemo</id>
      <username><COLLECTION_NAME></username>
      <password>[PERSONAL_ACCESS_TOKEN]</password>
    </server>
  </servers>
Generate aPersonal Access TokenwithPackaging>Read & writescope, and then paste it into the<password>tag.
Generate aPersonal Access TokenwithPackaging>Read & writescope, and then paste it into the<password>tag.
<password>
Publish packages
Open a command prompt window and navigate to your project directory where yourpom.xmlfile is located, and then run the following command to package your project. This command compiles your code, runs tests included, and packages your project into a distributable format (such as a JAR file).mvn package
Open a command prompt window and navigate to your project directory where yourpom.xmlfile is located, and then run the following command to package your project. This command compiles your code, runs tests included, and packages your project into a distributable format (such as a JAR file).
mvn package
mvn package
Run the following command from your project directory to publish your package to your feed:mvn deploy
Run the following command from your project directory to publish your package to your feed:
mvn deploy
mvn deploy
After successfully deploying your package, it will shortly be available in your feed.
After successfully deploying your package, it will shortly be available in your feed.

Note
If your organization is using a firewall or a proxy server, make sure you allowAzure Artifacts Domain URLs and IP addresses.
Restore packages
Navigate toArtifactsin your Azure DevOps project, select your feed from the dropdown menu, and then select the package you wish to install.
Navigate toArtifactsin your Azure DevOps project, select your feed from the dropdown menu, and then select the package you wish to install.
Navigate toOverview>Maven, then copy the dependency snippet.
Navigate toOverview>Maven, then copy the dependency snippet.
Open yourpom.xmlfile and paste the snippet inside the<dependencies>tag.
Open yourpom.xmlfile and paste the snippet inside the<dependencies>tag.
<dependencies>
Run the following command from the directory where yourpom.xmlfile is located to restore your packages:mvn install
Run the following command from the directory where yourpom.xmlfile is located to restore your packages:
mvn install
mvn install
Related articles
Publish Maven artifacts with Azure Pipelines
Use packages from Maven Central
Use upstream sources in a public feed
Feedback
Was this page helpful?
Additional resources