Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Control flow
Article
2025-02-16
1 contributor
In this article
APPLIES TO: All API Management tiers
Use thechoosepolicy to conditionally apply policy statements based on the results of the evaluation of Booleanexpressions. Use the policy for control flow similar to an if-then-else or a switch construct in a programming language.
choose
Note
Set the policy's elements and child elements in the order provided in the policy statement. Learn more abouthow to set or edit API Management policies.
Policy statement
<choose>
    <when condition="Boolean expression | Boolean constant">
        <!â one or more policy statements to be applied if the above condition is true  -->
    </when>
    <when condition="Boolean expression | Boolean constant">
        <!â one or more policy statements to be applied if the above condition is true  -->
    </when>
    <otherwise>
        <!â one or more policy statements to be applied if none of the above conditions are true  -->
    </otherwise>
</choose>
<choose>
    <when condition="Boolean expression | Boolean constant">
        <!â one or more policy statements to be applied if the above condition is true  -->
    </when>
    <when condition="Boolean expression | Boolean constant">
        <!â one or more policy statements to be applied if the above condition is true  -->
    </when>
    <otherwise>
        <!â one or more policy statements to be applied if none of the above conditions are true  -->
    </otherwise>
</choose>
Thechoosepolicy must contain at least one<when/>element. The<otherwise/>element is optional. Conditions in<when/>elements are evaluated in order of their appearance within the policy. Policy statement(s) enclosed within the first<when/>element with condition attribute equalstruewill be applied. Policies enclosed within the<otherwise/>element, if present, will be applied if all of the<when/>element condition attributes arefalse.
choose
<when/>
<otherwise/>
<when/>
<when/>
true
<otherwise/>
<when/>
false
Elements
if
ifelse
choose
when
condition
true
when
when
true
when attributes
when
Usage
Policy sections:inbound, outbound, backend, on-error
Policy scopes:global, workspace, product, API, operation
Gateways:classic, v2, consumption, self-hosted, workspace
Examples
Modify request and response based on user agent
The following example demonstrates aset-variablepolicy and two control flow policies.
The set variable policy is in the inbound section and creates anisMobileBooleancontextvariable that is set to true if theUser-Agentrequest header contains the textiPadoriPhone.
isMobile
User-Agent
iPad
iPhone
The first control flow policy is also in the inbound section, and conditionally applies one of twoSet query string parameterpolicies depending on the value of theisMobilecontext variable.
isMobile
The second control flow policy is in the outbound section and conditionally applies theConvert XML to JSONpolicy whenisMobileis set totrue.
isMobile
true
<policies>
    <inbound>
        <set-variable name="isMobile" value="@(context.Request.Headers.GetValueOrDefault("User-Agent","").Contains("iPad") || context.Request.Headers.GetValueOrDefault("User-Agent","").Contains("iPhone"))" />
        <base />
        <choose>
            <when condition="@(context.Variables.GetValueOrDefault<bool>("isMobile"))">
                <set-query-parameter name="mobile" exists-action="override">
                    <value>true</value>
                </set-query-parameter>
            </when>
            <otherwise>
                <set-query-parameter name="mobile" exists-action="override">
                    <value>false</value>
                </set-query-parameter>
            </otherwise>
        </choose>
    </inbound>
    <outbound>
        <base />
        <choose>
            <when condition="@(context.Variables.GetValueOrDefault<bool>("isMobile"))">
                <xml-to-json kind="direct" apply="always" consider-accept-header="false"/>
            </when>
        </choose>
    </outbound>
</policies>
<policies>
    <inbound>
        <set-variable name="isMobile" value="@(context.Request.Headers.GetValueOrDefault("User-Agent","").Contains("iPad") || context.Request.Headers.GetValueOrDefault("User-Agent","").Contains("iPhone"))" />
        <base />
        <choose>
            <when condition="@(context.Variables.GetValueOrDefault<bool>("isMobile"))">
                <set-query-parameter name="mobile" exists-action="override">
                    <value>true</value>
                </set-query-parameter>
            </when>
            <otherwise>
                <set-query-parameter name="mobile" exists-action="override">
                    <value>false</value>
                </set-query-parameter>
            </otherwise>
        </choose>
    </inbound>
    <outbound>
        <base />
        <choose>
            <when condition="@(context.Variables.GetValueOrDefault<bool>("isMobile"))">
                <xml-to-json kind="direct" apply="always" consider-accept-header="false"/>
            </when>
        </choose>
    </outbound>
</policies>
Modify response based on product name
This example shows how to perform content filtering by removing data elements from the response received from the backend service when using theStarterproduct. The example backend response includes root-level properties similar to theOpenWeather One Call API.
Starter
<!-- Copy this snippet into the outbound section to remove a number of data elements from the response received from the backend service based on the name of the product -->
<choose>
  <when condition="@(context.Response.StatusCode == 200 && context.Product.Name.Equals("Starter"))">
    <set-body>@{
        var response = context.Response.Body.As<JObject>();
        foreach (var key in new [] {"current", "minutely", "hourly", "daily", "alerts"}) {
          response.Property (key).Remove ();
        }
        return response.ToString();
      }
    </set-body>
  </when>
</choose>
<!-- Copy this snippet into the outbound section to remove a number of data elements from the response received from the backend service based on the name of the product -->
<choose>
  <when condition="@(context.Response.StatusCode == 200 && context.Product.Name.Equals("Starter"))">
    <set-body>@{
        var response = context.Response.Body.As<JObject>();
        foreach (var key in new [] {"current", "minutely", "hourly", "daily", "alerts"}) {
          response.Property (key).Remove ();
        }
        return response.ToString();
      }
    </set-body>
  </when>
</choose>
Related policies
Policy control and flow
Related content
For more information about working with policies, see:
Tutorial: Transform and protect your API
Policy referencefor a full list of policy statements and their settings
Policy expressions
Set or edit policies
Reuse policy configurations
Policy snippets repo
Azure API Management policy toolkit
Get Copilot assistance to create, explain, and troubleshoot policies
Feedback
Was this page helpful?
Additional resources