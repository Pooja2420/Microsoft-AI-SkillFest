Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Architecture best practices for Azure SQL Database
Article
2025-04-11
3 contributors
In this article
Azure SQL Databaseis a fully managed platform as a service database engine that handles most database management functions without user involvement. Management functions include upgrades, patches, backups, and monitoring.
The single database resource type creates a database in SQL Database. The database has its own set of resources and is managed via alogical server. You can create multiple databases in a single resource pool by usingelastic pools.
This article assumes that as an architect, you've reviewed thedata store optionsand chose SQL Database as the database engine for your workload. The guidance in this article provides architectural recommendations that are mapped to the principles of theWell-Architected Framework pillars.
This article also assumes that you're familiar with the SQL Database core concepts. For more information, seeCore concepts of SQL DatabaseandWhat's new in SQL Database?.
Important
How to use this guide
Each section has adesign checklistthat presents architectural areas of concern along with design strategies localized to the technology scope.
Also included are recommendations for the technology capabilities that can help materialize those strategies. The recommendations don't represent an exhaustive list of all configurations that are available for Azure SQL Database and its dependencies. Instead, they list the key recommendations mapped to the design perspectives. Use the recommendations to build your proof-of-concept or to optimize your existing environments.
Foundational architecture that demonstrates the key recommendations:Baseline highly available zone-redundant web application.
Technology scope
This review focuses on the interrelated decisions for the following Azure resources:
SQL Database
Reliability
The purpose of the Reliability pillar is to provide continued functionality bybuilding enough resilience and the ability to recover fast from failures.
Reliability design principlesprovide a high-level design strategy applied for individual components, system flows, and the system as a whole.
Design checklist
Start your design strategy based on thedesign review checklist for Reliability. Determine its relevance to your business requirements while keeping in mind the reliability of SQL Database. Extend the strategy to include more approaches as needed.
Familiarize yourself with SQL Database product reliability guidance:For more information, see the following resources:Business continuity overviewHigh availabilityHigh availability and disaster recovery checklistAutomated backups
Familiarize yourself with SQL Database product reliability guidance:For more information, see the following resources:
Business continuity overview
High availability
High availability and disaster recovery checklist
Automated backups
Choose appropriate SKU configurations:Use the Business Critical tier for critical workloads because it offers the highest reliability guarantees.Consider the SQL Database Hyperscale tier to meet strict recovery time objective and recovery point objective targets when the Business Critical tier isn't practical. The Hyperscale tier uses storage snapshots rather than traditional database backup mechanisms, which provide zero downtime and rapid recovery.
Choose appropriate SKU configurations:Use the Business Critical tier for critical workloads because it offers the highest reliability guarantees.
Consider the SQL Database Hyperscale tier to meet strict recovery time objective and recovery point objective targets when the Business Critical tier isn't practical. The Hyperscale tier uses storage snapshots rather than traditional database backup mechanisms, which provide zero downtime and rapid recovery.
Build redundancy to improve resiliency:Enhance the availability of your databases by using active geo-replication, failover groups, and zone-redundancy.
Build redundancy to improve resiliency:Enhance the availability of your databases by using active geo-replication, failover groups, and zone-redundancy.
Use native disaster recovery and backup features:Use geo-restore to recover from a service outage. You can restore a database on any SQL Database server or a managed instance in any Azure region. Restoration uses the most recent geo-replicated backups.Use point-in-time restore to recover from human error. Point-in-time restore returns your database to an earlier point in time to recover data from inadvertent changes.
Use native disaster recovery and backup features:Use geo-restore to recover from a service outage. You can restore a database on any SQL Database server or a managed instance in any Azure region. Restoration uses the most recent geo-replicated backups.
Use point-in-time restore to recover from human error. Point-in-time restore returns your database to an earlier point in time to recover data from inadvertent changes.
Monitor reliability and overall health indicators of SQL Database:Monitor SQL Database in near real-time to detect reliability incidents.
Monitor reliability and overall health indicators of SQL Database:Monitor SQL Database in near real-time to detect reliability incidents.
Implement retry logic and backoff logic:Use these features to handle transient faults in your application.
Implement retry logic and backoff logic:Use these features to handle transient faults in your application.
Back up your TDE encryption keys:When you use customer-managed keys for Transparent Data Encryption (TDE), back up the keys to Azure Key Vault.
Back up your TDE encryption keys:When you use customer-managed keys for Transparent Data Encryption (TDE), back up the keys to Azure Key Vault.
Recommendations
Security
The purpose of the Security pillar is to provideconfidentiality, integrity, and availabilityguarantees to the workload.
TheSecurity design principlesprovide a high-level design strategy for achieving those goals by applying approaches to the technical design of SQL Database.
Design checklist
Start your design strategy based on thedesign review checklist for Securityand identify vulnerabilities and controls to improve the security posture. Extend the strategy to include more approaches as needed.
Review security baselines:To enhance the security posture of your workload, review theAzure security baseline for SQL Database.For more information about features that can help workloads meet security and compliance requirements, seeBuilt-in security and compliance features.
Review security baselines:To enhance the security posture of your workload, review theAzure security baseline for SQL Database.
For more information about features that can help workloads meet security and compliance requirements, seeBuilt-in security and compliance features.
Implement strict, conditional, and auditable identity and access management:Use Microsoft Entra ID for your workload's authentication and authorization needs. Microsoft Entra ID provides centralized authorization and access management.Centralize the administration of sign-ins, firewall rules, auditing rules, and threat detection policies for collections of databases at thelogical serverlevel.
Implement strict, conditional, and auditable identity and access management:Use Microsoft Entra ID for your workload's authentication and authorization needs. Microsoft Entra ID provides centralized authorization and access management.
Centralize the administration of sign-ins, firewall rules, auditing rules, and threat detection policies for collections of databases at thelogical serverlevel.
Encrypt data:Enable data encryption to safeguard confidentiality and integrity. Use features likeAlways EncryptedandAlways Encrypted with secure enclavesto protect highly sensitive information, like credit card numbers and social security numbers. These features help prevent encryption keys from being exposed to the database engine.
Encrypt data:Enable data encryption to safeguard confidentiality and integrity. Use features likeAlways EncryptedandAlways Encrypted with secure enclavesto protect highly sensitive information, like credit card numbers and social security numbers. These features help prevent encryption keys from being exposed to the database engine.
Always Encrypted
Always Encrypted with secure enclaves
Apply network segmentation and security controls:Create intentional segmentation and perimeters in your network design and apply defense-in-depth principles by using localized network controls at all network boundaries.Usevirtual network rulesto control communication from specific subnets in virtual networks.ConfigureSQL Database firewall rulesat the database level and server level to restrict access to databases. If you use an Azure firewall,configure Azure Firewall application rules with SQL fully qualified domain names (FQDNs).Review theSQL Database connectivity architecture. Use theRedirectorProxyconnection policywhen practical.
Apply network segmentation and security controls:Create intentional segmentation and perimeters in your network design and apply defense-in-depth principles by using localized network controls at all network boundaries.
Usevirtual network rulesto control communication from specific subnets in virtual networks.
ConfigureSQL Database firewall rulesat the database level and server level to restrict access to databases. If you use an Azure firewall,configure Azure Firewall application rules with SQL fully qualified domain names (FQDNs).
Review theSQL Database connectivity architecture. Use theRedirectorProxyconnection policywhen practical.
Redirect
Proxy
Recommendations
Cost Optimization
Cost Optimization focuses ondetecting spend patterns, prioritizing investments in critical areas, and optimizing in othersto meet the organization's budget while meeting business requirements.
TheCost Optimization design principlesprovide a high-level design strategy for achieving those goals and making tradeoffs as necessary in the technical design related to SQL Database.
Design checklist
Familiarize yourself with SQL Database cost management resources:Review thePlan and manage costs for SQL Databasearticle. This resource contains cost-saving strategies, including recommendations about how to optimize cost-effective instances and resources and how to choose the right billing model for your workload.
Familiarize yourself with SQL Database cost management resources:Review thePlan and manage costs for SQL Databasearticle. This resource contains cost-saving strategies, including recommendations about how to optimize cost-effective instances and resources and how to choose the right billing model for your workload.
Estimate the initial cost:As part of your cost modeling exercise, use theAzure pricing calculatorto evaluate the approximate costs associated with SQL Database in your workload.
Estimate the initial cost:As part of your cost modeling exercise, use theAzure pricing calculatorto evaluate the approximate costs associated with SQL Database in your workload.
Choose the right SQL Database service tier for your workload:Evaluate the SQL DatabaseServerlessandHyperscaletiers to better align pricing with your use case.Considerelastic poolsto manage and scale multiple databases.
Choose the right SQL Database service tier for your workload:Evaluate the SQL DatabaseServerlessandHyperscaletiers to better align pricing with your use case.
Considerelastic poolsto manage and scale multiple databases.
Optimize component costs:Considerreserved capacity for SQL Databasefor static workloads that you intend to operate for long periods of time.Fine-tune backup storage consumption to avoid charges for excess usage.
Optimize component costs:Considerreserved capacity for SQL Databasefor static workloads that you intend to operate for long periods of time.
Fine-tune backup storage consumption to avoid charges for excess usage.
Optimize application code costs:Optimize queries and other operations to reduce resource consumption, minimize runtime, and improve overall performance.
Optimize application code costs:Optimize queries and other operations to reduce resource consumption, minimize runtime, and improve overall performance.
Optimize scaling costs:Incorporate cost optimization considerations into your database scaling strategies.To reduce costs, scale down databases during periods of low usage. Examples include seasonal workloads that have weeks or months of decreased load or workloads that are idle overnight.
Optimize scaling costs:Incorporate cost optimization considerations into your database scaling strategies.
To reduce costs, scale down databases during periods of low usage. Examples include seasonal workloads that have weeks or months of decreased load or workloads that are idle overnight.
Recommendations
Operational Excellence
TheOperational Excellence design principlesprovide a high-level design strategy for achieving those goals for the operational requirements of the workload.
Design checklist
Start your design strategy based on thedesign review checklist for Operational Excellencefor defining processes for observability, testing, and deployment related to SQL Database.
Familiarize yourself with SQL Database operational excellence resources:Review theMonitoring and performance tuning in SQL Databasearticle. This article contains detailed monitoring guidance, including recommendations for monitoring query performance, configuring alerts, and using automatic tuning to enhance efficiency.
Familiarize yourself with SQL Database operational excellence resources:Review theMonitoring and performance tuning in SQL Databasearticle. This article contains detailed monitoring guidance, including recommendations for monitoring query performance, configuring alerts, and using automatic tuning to enhance efficiency.
Use infrastructure as code (IaC) technologies:Use IaC technologies likeBicep and Azure Resource Manager templatesto deploy Azure SQL databases to achieve consistent results and take advantage of reusability.Use the latest version of the Resource Manager API to take advantage of the newest features, security updates, and performance improvements.
Use infrastructure as code (IaC) technologies:Use IaC technologies likeBicep and Azure Resource Manager templatesto deploy Azure SQL databases to achieve consistent results and take advantage of reusability.
Use the latest version of the Resource Manager API to take advantage of the newest features, security updates, and performance improvements.
Monitor your SQL Database:Use monitoring to detect reliability incidents and optimize performance. Start by monitoring the CPU and input/output resources that your workload uses. For help designing the reliability and health monitoring solution for your workload, seeHealth modeling for workloads.
Monitor your SQL Database:Use monitoring to detect reliability incidents and optimize performance. Start by monitoring the CPU and input/output resources that your workload uses. For help designing the reliability and health monitoring solution for your workload, seeHealth modeling for workloads.
Optimize management of business continuity and disaster recovery:Use Azure Backup to protect SQL Database and regularly test your backup strategy.
Optimize management of business continuity and disaster recovery:Use Azure Backup to protect SQL Database and regularly test your backup strategy.
Use native database administration features:Adopt SQL Database to relieve database administrators of many of their traditional tasks, like infrastructure-related administration, backup management, and high availability and disaster recovery operations. Encourage their growth in cloud-native administration and integration with DevOps teams as they adopt a data-as-code mindset.
Use native database administration features:Adopt SQL Database to relieve database administrators of many of their traditional tasks, like infrastructure-related administration, backup management, and high availability and disaster recovery operations. Encourage their growth in cloud-native administration and integration with DevOps teams as they adopt a data-as-code mindset.
Recommendations
Performance Efficiency
Performance Efficiency is aboutmaintaining user experience even when there's an increase in loadby managing capacity. The strategy includes scaling resources, identifying and optimizing potential bottlenecks, and optimizing for peak performance.
ThePerformance Efficiency design principlesprovide a high-level design strategy for achieving those capacity goals against the expected usage.
Design checklist
Start your design strategy based on thedesign review checklist for Performance Efficiencyfor defining a baseline based on key performance indicators for SQL Database.
Familiarize yourself with SQL Database performance efficiency resources:Review thePerformance Center for SQL Server Database Engine and SQL DatabaseandTune applications and databases for performancearticles. These articles provide insights about how to improve the performance of your SQL Database, including recommendations to optimize server configuration and query performance.
Familiarize yourself with SQL Database performance efficiency resources:Review thePerformance Center for SQL Server Database Engine and SQL DatabaseandTune applications and databases for performancearticles. These articles provide insights about how to improve the performance of your SQL Database, including recommendations to optimize server configuration and query performance.
Select the right tier, features, and billing model:Microsoft recommends the latestvCore-basedpurchasing model.Review resource limits. Resource limits for singe databases in each pricing tier are also known asservice objectives. For more information, seevCore-based single database resource limits. For elastic pool resource limits, seevCore-based elastic pool resource limits.Review thedefault max degree of parallelism (MAXDOP), and configure it as needed based on a migrated or expected workload.
Select the right tier, features, and billing model:Microsoft recommends the latestvCore-basedpurchasing model.
Review resource limits. Resource limits for singe databases in each pricing tier are also known asservice objectives. For more information, seevCore-based single database resource limits. For elastic pool resource limits, seevCore-based elastic pool resource limits.
Review thedefault max degree of parallelism (MAXDOP), and configure it as needed based on a migrated or expected workload.
Optimize workload design and application code for performance:Consider offloading read-only actions toread-only replicas.Applications that connect to SQL Database should use the latest connection providers, for example the latestOLE DB driverorODBC driver.When you use elastic pools, familiarize yourself withresource governance.
Optimize workload design and application code for performance:Consider offloading read-only actions toread-only replicas.
Applications that connect to SQL Database should use the latest connection providers, for example the latestOLE DB driverorODBC driver.
When you use elastic pools, familiarize yourself withresource governance.
Recommendations
Azure policies
Azure provides an extensive set of built-in policies related to SQL Database. A set of Azure policies can audit some of the preceding recommendations. For example, you can check whether:
Microsoft Entra-only authentication is enabled by default during creation.
Zone redundancy is enabled to enhance availability and resilience.
Long-term, geo-redundant backup should be enabled for Azure SQL databases.
Setting the minimal TLS version to 1.2 improves security by ensuring that SQL Database can only be accessed from clients that use TLS 1.2. Don't use earlier versions of TLS because they have well-documented security vulnerabilities.
SQL servers should have auditing enabled to ensure that you capture the operations performed against your SQL assets.
For comprehensive governance, review the built-in definitions for SQL Database policies that are listed inAzure Policy built-in definitions.
Related resources
Tutorial: Secure a database in SQL Database
SQL Database features
Resolve Transact-SQL differences during migration to SQL Database
Azure Database Migration Guides
Video: Data exposed
Feedback
Was this page helpful?
Additional resources