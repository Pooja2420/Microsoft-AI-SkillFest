Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Use named values in Azure API Management policies
Article
2024-07-11
21 contributors
In this article
APPLIES TO: All API Management tiers
API Management policiesare a powerful capability of the system that allow the publisher to change the behavior of the API through configuration. Policies are a collection of statements that are executed sequentially on the request or response of an API. Policy statements can be constructed using literal text values, policy expressions, and named values.
Named valuesare a global collection of name/value pairs in each API Management instance. Named values can be used to manage constant string values and secrets across all API configurations and policies.

Value types
Plain values or secrets can containpolicy expressions. For example, the expression@(DateTime.Now.ToString())returns a string containing the current date and time.
@(DateTime.Now.ToString())
For details about the named value attributes, see the API ManagementREST API reference.
Key vault secrets
Secret values can be stored either as encrypted strings in API Management (custom secrets) or by referencing secrets inAzure Key Vault.
Using key vault secrets is recommended because it helps improve API Management security:
Secrets stored in key vaults can be reused across services
Granularaccess policiescan be applied to secrets
Secrets updated in the key vault are automatically rotated in API Management. After update in the key vault, a named value in API Management is updated within 4 hours. You can also manually refresh the secret using the Azure portal or via the management REST API.
Note
The secrets stored in Azure Key Vault must be between 1 and 4096 characters, as API Management can't retrieve values that exceed this limit.
Prerequisites
If you haven't created an API Management service instance yet, seeCreate an API Management service instance.
Prerequisites for key vault integration
Note
Currently, this feature isn't available inworkspaces.
If you don't already have a key vault, create one. For steps to create a key vault, seeQuickstart: Create a key vault using the Azure portal.To create or import a secret to the key vault, seeQuickstart: Set and retrieve a secret from Azure Key Vault using the Azure portal.
If you don't already have a key vault, create one. For steps to create a key vault, seeQuickstart: Create a key vault using the Azure portal.
To create or import a secret to the key vault, seeQuickstart: Set and retrieve a secret from Azure Key Vault using the Azure portal.
Enable a system-assigned or user-assignedmanaged identityin the API Management instance.
Enable a system-assigned or user-assignedmanaged identityin the API Management instance.
Configure access to key vault
In the portal, navigate to your key vault.
In the left menu, selectAccess configuration, and note thePermission modelthat is configured.
Depending on the permission model, configure either akey vault access policyorAzure RBAC accessfor an API Management managed identity.
To add a key vault access policy:
In the left menu, selectAccess policies.
On theAccess policiespage, select+ Create.
On thePermissionstab, underSecret permissions, selectGetandList, then selectNext.
On thePrincipaltab,Select principal, search for  the resource name of your managed identity, and then selectNext.
If you're using a system-assigned identity, the principal is the name of your API Management instance.
SelectNextagain. On theReview + createtab, selectCreate.
To configure Azure RBAC access:
In the left menu, selectAccess control (IAM).
On theAccess control (IAM)page, selectAdd role assignment.
On theRoletab, selectKey Vault Secrets User.
On theMemberstab, selectManaged identity>+ Select members.
On theSelect managed identitypage, select the system-assigned managed identity or a user-assigned managed identity associated with your API Management instance, and then selectSelect.
SelectReview + assign.
IfKey Vault firewallis enabled on your key vault, the following are additional requirements:
You must use the API Management instance'ssystem-assignedmanaged identity to access the key vault.
You must use the API Management instance'ssystem-assignedmanaged identity to access the key vault.
In Key Vault firewall, enable theAllow Trusted Microsoft Services to bypass this firewalloption.
In Key Vault firewall, enable theAllow Trusted Microsoft Services to bypass this firewalloption.
Ensure that your local client IP address is allowed to access the key vault temporarily while you select a certificate or secret to add to Azure API Management. For more information, seeConfigure Azure Key Vault networking settings.After completing the configuration, you may block your client address in the key vault firewall.
Ensure that your local client IP address is allowed to access the key vault temporarily while you select a certificate or secret to add to Azure API Management. For more information, seeConfigure Azure Key Vault networking settings.
After completing the configuration, you may block your client address in the key vault firewall.
If the API Management instance is deployed in a virtual network, also configure the following network settings:
Enable aservice endpointto Azure Key Vault on the API Management subnet.
Configure a network security group (NSG) rule to allow outbound traffic to the AzureKeyVault and AzureActiveDirectoryservice tags.
For details, seeNetwork configuration when setting up Azure API Management in a VNet.
Add or edit a named value
Add a key vault secret to API Management
SeePrerequisites for key vault integration.
Important
When adding a key vault secret to your API Management instance, you must have permissions to list secrets from the key vault.
Caution
When using a key vault secret in API Management, be careful not to delete the secret, key vault, or managed identity used to access the key vault.
In theAzure portal, navigate to your API Management instance.
In theAzure portal, navigate to your API Management instance.
UnderAPIs, selectNamed values>+Add.
UnderAPIs, selectNamed values>+Add.
Enter aNameidentifier, and enter aDisplay nameused to reference the property in policies.
Enter aNameidentifier, and enter aDisplay nameused to reference the property in policies.
InValue type, selectKey vault.
InValue type, selectKey vault.
Enter the identifier of a key vault secret (without version), or chooseSelectto select a secret from a key vault.ImportantIf you enter a key vault secret identifier yourself, ensure that it doesn't have version information. Otherwise, the secret won't rotate automatically in API Management after an update in the key vault.
Enter the identifier of a key vault secret (without version), or chooseSelectto select a secret from a key vault.
Important
If you enter a key vault secret identifier yourself, ensure that it doesn't have version information. Otherwise, the secret won't rotate automatically in API Management after an update in the key vault.
InClient identity, select a system-assigned or an existing user-assigned managed identity. Learn how toadd or modify managed identities in your API Management service.NoteThe identity needs permissions to get and list secrets from the key vault. If you haven't already configured access to the key vault, API Management prompts you so it can automatically configure the identity with the necessary permissions.
InClient identity, select a system-assigned or an existing user-assigned managed identity. Learn how toadd or modify managed identities in your API Management service.
Note
The identity needs permissions to get and list secrets from the key vault. If you haven't already configured access to the key vault, API Management prompts you so it can automatically configure the identity with the necessary permissions.
Add one or more optional tags to help organize your named values, thenSave.
Add one or more optional tags to help organize your named values, thenSave.
SelectCreate.
SelectCreate.

Add a plain or secret value to API Management
Portal
Azure CLI
In theAzure portal, navigate to your API Management instance.
UnderAPIs, selectNamed values>+Add.
Enter aNameidentifier, and enter aDisplay nameused to reference the property in policies.
InValue type, selectPlainorSecret.
InValue, enter a string or policy expression.
Add one or more optional tags to help organize your named values, thenSave.
SelectCreate.
Once the named value is created, you can edit it by selecting the name. If you change the display name, any policies that reference that named value are automatically updated to use the new display name.
To begin using Azure CLI:
Use the Bash environment inAzure Cloud Shell. For more information, seeGet started with Azure Cloud Shell.
Use the Bash environment inAzure Cloud Shell. For more information, seeGet started with Azure Cloud Shell.

If you prefer to run CLI reference commands locally,installthe Azure CLI. If you're running on Windows or macOS, consider running Azure CLI in a Docker container. For more information, seeHow to run the Azure CLI in a Docker container.If you're using a local installation, sign in to the Azure CLI by using theaz logincommand. To finish the authentication process, follow the steps displayed in your terminal. For other sign-in options, seeAuthenticate to Azure using Azure CLI.When you're prompted, install the Azure CLI extension on first use. For more information about extensions, seeUse and manage extensions with the Azure CLI.Runaz versionto find the version and dependent libraries that are installed. To upgrade to the latest version, runaz upgrade.
If you prefer to run CLI reference commands locally,installthe Azure CLI. If you're running on Windows or macOS, consider running Azure CLI in a Docker container. For more information, seeHow to run the Azure CLI in a Docker container.
If you're using a local installation, sign in to the Azure CLI by using theaz logincommand. To finish the authentication process, follow the steps displayed in your terminal. For other sign-in options, seeAuthenticate to Azure using Azure CLI.
If you're using a local installation, sign in to the Azure CLI by using theaz logincommand. To finish the authentication process, follow the steps displayed in your terminal. For other sign-in options, seeAuthenticate to Azure using Azure CLI.
When you're prompted, install the Azure CLI extension on first use. For more information about extensions, seeUse and manage extensions with the Azure CLI.
When you're prompted, install the Azure CLI extension on first use. For more information about extensions, seeUse and manage extensions with the Azure CLI.
Runaz versionto find the version and dependent libraries that are installed. To upgrade to the latest version, runaz upgrade.
Runaz versionto find the version and dependent libraries that are installed. To upgrade to the latest version, runaz upgrade.
To add a named value, use theaz apim nv createcommand:
az apim nv create --resource-group apim-hello-word-resource-group \
    --display-name "named_value_01" --named-value-id named_value_01 \
    --secret true --service-name apim-hello-world --value test
az apim nv create --resource-group apim-hello-word-resource-group \
    --display-name "named_value_01" --named-value-id named_value_01 \
    --secret true --service-name apim-hello-world --value test
After you create a named value, you can update it by using theaz apim nv updatecommand. To see all your named values, run theaz apim nv listcommand:
az apim nv list --resource-group apim-hello-word-resource-group \
    --service-name apim-hello-world --output table
az apim nv list --resource-group apim-hello-word-resource-group \
    --service-name apim-hello-world --output table
To see the details of the named value you created for this example, run theaz apim nv showcommand:
az apim nv show --resource-group apim-hello-word-resource-group \
    --service-name apim-hello-world --named-value-id named_value_01
az apim nv show --resource-group apim-hello-word-resource-group \
    --service-name apim-hello-world --named-value-id named_value_01
This example is a secret value. The previous command doesn't return the value. To see the value, run theaz apim nv show-secretcommand:
az apim nv show-secret --resource-group apim-hello-word-resource-group \
    --service-name apim-hello-world --named-value-id named_value_01
az apim nv show-secret --resource-group apim-hello-word-resource-group \
    --service-name apim-hello-world --named-value-id named_value_01
To delete a named value, use theaz apim nv deletecommand:
az apim nv delete --resource-group apim-hello-word-resource-group \
    --service-name apim-hello-world --named-value-id named_value_01
az apim nv delete --resource-group apim-hello-word-resource-group \
    --service-name apim-hello-world --named-value-id named_value_01
Use a named value
The examples in this section use the named values shown in the following table.
TrackingId
@(DateTime.Now.ToString())
This is a header value.
To use a named value in a policy, place its display name inside a double pair of braces like{{ContosoHeader}}, as shown in the following example:
{{ContosoHeader}}
<set-header name="{{ContosoHeader}}" exists-action="override">
  <value>{{ContosoHeaderValue}}</value>
</set-header>
<set-header name="{{ContosoHeader}}" exists-action="override">
  <value>{{ContosoHeaderValue}}</value>
</set-header>
In this example,ContosoHeaderis used as the name of a header in aset-headerpolicy, andContosoHeaderValueis used as the value of that header. When this policy is evaluated during a request or response to the API Management gateway,{{ContosoHeader}}and{{ContosoHeaderValue}}are replaced with their respective values.
ContosoHeader
set-header
ContosoHeaderValue
{{ContosoHeader}}
{{ContosoHeaderValue}}
Named values can be used as complete attribute or element values as shown in the previous example, but they can also be inserted into or combined with part of a literal text expression as shown in the following example:
<set-header name = "CustomHeader{{ContosoHeader}}" ...>
<set-header name = "CustomHeader{{ContosoHeader}}" ...>
Named values can also contain policy expressions. In the following example, theExpressionPropertyexpression is used.
ExpressionProperty
<set-header name="CustomHeader" exists-action="override">
    <value>{{ExpressionProperty}}</value>
</set-header>
<set-header name="CustomHeader" exists-action="override">
    <value>{{ExpressionProperty}}</value>
</set-header>
When this policy is evaluated,{{ExpressionProperty}}is replaced with its value,@(DateTime.Now.ToString()). Since the value is a policy expression, the expression is evaluated and the policy proceeds with its execution.
{{ExpressionProperty}}
@(DateTime.Now.ToString())
You can test this in the Azure portal or thedeveloper portalby calling an operation that has a policy with named values in scope. In the following example, an operation is called with the two previous exampleset-headerpolicies with named values. Notice that the response contains two custom headers that were configured using policies with named values.
set-header

If you look at the outboundAPI tracefor a call that includes the two previous sample policies with named values, you can see the twoset-headerpolicies with the named values inserted as well as the policy expression evaluation for the named value that contained the policy expression.
set-header

String interpolation can also be used with named values.
<set-header name="CustomHeader" exists-action="override">
    <value>@($"The URL encoded value is {System.Net.WebUtility.UrlEncode("{{ContosoHeaderValue2}}")}")</value>
</set-header>
<set-header name="CustomHeader" exists-action="override">
    <value>@($"The URL encoded value is {System.Net.WebUtility.UrlEncode("{{ContosoHeaderValue2}}")}")</value>
</set-header>
The value forCustomHeaderwill beThe URL encoded value is This+is+a+header+value..
CustomHeader
The URL encoded value is This+is+a+header+value.
Caution
If a policy references a secret in Azure Key Vault, the value from the key vault will be visible to users who have access to subscriptions enabled forAPI request tracing.
While named values can contain policy expressions, they can't contain other named values. If text containing a named value reference is used for a value, such asText: {{MyProperty}}, that reference won't be resolved and replaced.
Text: {{MyProperty}}
Delete a named value
To delete a named value, select the name and then selectDeletefrom the context menu (...).
Important
If the named value is referenced by any API Management policies, you can't delete it until you remove the named value from all policies that use it.
Related content
Learn more about working with policiesPolicies in API ManagementPolicy referencePolicy expressions
Policies in API Management
Policy reference
Policy expressions
Feedback
Was this page helpful?
Additional resources