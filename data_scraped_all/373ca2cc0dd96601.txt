Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Checklist for architecting and building multitenant solutions on Azure
Article
2025-04-17
10 contributors
In this article
When you build your multitenant solution in Azure, there are many elements that you need to consider. Use this checklist as a starting point to help you design and build your multitenant solution. This checklist is a companion resource to theArchitecting multitenant solutions on Azureseries of articles. The checklist is structured around the business and technical considerations, and the five pillars of theAzure Well-Architected Framework.
Tip
After going through this checklist, take theSaaS journey reviewto evaluate your SaaS product by analyzing your understanding of multitenant architecture and its alignment with SaaS operation best practices.
Business considerations
Understand what kind of solution you're creating, such as business-to-business (B2B), business-to-consumer (B2C), or your enterprise software, andhow tenants are different from users.
Define your tenants. Understand how many tenants you'll support initially, and your growth plans.
Define your pricing modeland ensure it aligns with yourtenantsâ consumption of Azure resources.
Understand whether you need to separate your tenants into differenttiers. Tiers might have different pricing, features, performance promises, geographic locations, and so forth.
Based on your customersâ requirements, decide on thetenancy modelsthat are appropriate for various parts of your solution.
When you're ready, sell your B2B multitenant solution using theMicrosoft Commercial Marketplace.
Reliability considerations
Review theAzure Well-Architected Reliability checklist, which is applicable to all workloads.
Understand theNoisy Neighbor antipattern. Prevent individual tenants from impacting the system's availability for other tenants.
Design your multitenant solutionfor the level of growth that you expect. But don't overengineer for unrealistic growth.
Defineservice-level objectives (SLOs)and optionallyservice-level agreements (SLAs)for your solution. SLAs and SLOs should be based on the requirements of your tenants.
Test thescaleof your solution. Ensure that it performs well under all levels of load, and that it scales correctly as the number of tenants increases.
Applychaos engineering principlesto test the reliability of your solution.
Security considerations
Apply theZero Trustand least privilege principles in all layers of your solution.
Ensure that you cancorrectly map user requeststo tenants. Consider including the tenant context as part of the identity system, or by using another means, like application-level tenant authorization.
Design fortenant isolation. Continuouslytest your isolation model.
Ensure that your application code prevents any cross-tenant access or data leakage.
Perform ongoing penetration testing and security code reviews.
Understand your tenants'compliance requirements, including data residency and any compliance or regulatory standards that they require you to meet.
Correctlymanage domain namesand avoid vulnerabilities likedangling DNS and subdomain takeover attacks.
Followservice-specific guidancefor multitenancy.
Cost Optimization considerations
Review theAzure Well-Architected Cost Optimization checklist, which is applicable to all workloads.
Ensure you can adequatelymeasure per-tenant consumptionand correlate it withyour infrastructure costs.
Avoidantipatterns. Antipatterns include failing to track costs, tracking costs with unnecessary precision, real-time measurement, and using monitoring tools for billing.
Operational Excellence considerations
Use automation to manage thetenant lifecycle, such as onboarding,deployment, provisioning, and configuration.
Understand the differences betweencontrol planeand data plane in your multitenant solution.
Find the right balance fordeploying service updates. Consider both your tenants' requirements and your own operational requirements.
Monitor the health of the overall system, as well as each tenant.
Configure and test alerts to notify you when specific tenants are experiencing issues or are exceeding their consumption limits.
Organize your Azure resourcesfor isolation and scale.
Avoiddeployment and configuration antipatterns. Antipatterns include running separate versions of the solution for each tenant, hardcoding tenant-specific configurations or logic, and manual deployments.
Performance Efficiency considerations
Review theAzure Well-Architected Performance Efficiency checklist, which is applicable to all workloads.
If you use shared infrastructure, plan for how you'll mitigateNoisy Neighborconcerns. Ensure that one tenant can't reduce the performance of the system for other tenants.
Determine how you'll scale yourcompute,storage,networking, and other Azure resources to match the demands of your tenants.
Consider each Azure resource's scale limits.Organize your resourcesappropriately, in order to avoidresource organization antipatterns. For example, don't over-architect your solution to work within unrealistic scale requirements.
Contributors
This article is maintained by Microsoft. It was originally written by the following contributors.
Principal authors:
Arsen Vladimirskiy| Principal Customer Engineer
Bohdan Cherchyk| Senior Customer Engineer
Other contributor:
John Downs| Principal Software Engineer
To see non-public LinkedIn profiles, sign in to LinkedIn.
Next steps
Reviewarchitectural considerations for multitenant solutions.
Reviewarchitectural approaches for multitenancy.
Reviewservice-specific guidance for multitenancy.
Review additionalresources for architects and developers of multitenant solutions.
Feedback
Was this page helpful?
Additional resources