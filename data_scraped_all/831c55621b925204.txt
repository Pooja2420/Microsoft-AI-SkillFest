Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Understand event filtering for Event Grid subscriptions
Article
2024-12-12
12 contributors
In this article
This article describes the different ways to filter which events are sent to your endpoint. When creating an event subscription, you have three options for filtering:
Event types
Subject begins with or ends with
Advanced fields and operators
Azure Resource Manager template
The examples shown in this article are JSON snippets for defining filters in Azure Resource Manager (ARM) templates. For an example of a complete ARM template and deploying an ARM template, seeQuickstart: Route Blob storage events to web endpoint by using an ARM template. Here's some more sections around thefiltersection from the example in the quickstart. The ARM template defines the following resources.
filter
Azure storage account
System topic for the storage account
Event subscription for the system topic. See thefiltersubsection in the event subscription section.
filter
In the following example, the event subscription filters forMicrosoft.Storage.BlobCreatedandMicrosoft.Storage.BlobDeletedevents.
Microsoft.Storage.BlobCreated
Microsoft.Storage.BlobDeleted
{
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2021-08-01",
      "name": "[parameters('storageAccountName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2",
      "properties": {
        "accessTier": "Hot"
      }
    },
    {
      "type": "Microsoft.EventGrid/systemTopics",
      "apiVersion": "2021-12-01",
      "name": "[parameters('systemTopicName')]",
      "location": "[parameters('location')]",
      "properties": {
        "source": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
        "topicType": "Microsoft.Storage.StorageAccounts"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.EventGrid/systemTopics/eventSubscriptions",
      "apiVersion": "2021-12-01",
      "name": "[format('{0}/{1}', parameters('systemTopicName'), parameters('eventSubName'))]",
      "properties": {
        "destination": {
          "properties": {
            "endpointUrl": "[parameters('endpoint')]"
          },
          "endpointType": "WebHook"
        },
        "filter": {
          "includedEventTypes": [
            "Microsoft.Storage.BlobCreated",
            "Microsoft.Storage.BlobDeleted"
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.EventGrid/systemTopics', parameters('systemTopicName'))]"
      ]
    }
  ]
}
{
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2021-08-01",
      "name": "[parameters('storageAccountName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2",
      "properties": {
        "accessTier": "Hot"
      }
    },
    {
      "type": "Microsoft.EventGrid/systemTopics",
      "apiVersion": "2021-12-01",
      "name": "[parameters('systemTopicName')]",
      "location": "[parameters('location')]",
      "properties": {
        "source": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
        "topicType": "Microsoft.Storage.StorageAccounts"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.EventGrid/systemTopics/eventSubscriptions",
      "apiVersion": "2021-12-01",
      "name": "[format('{0}/{1}', parameters('systemTopicName'), parameters('eventSubName'))]",
      "properties": {
        "destination": {
          "properties": {
            "endpointUrl": "[parameters('endpoint')]"
          },
          "endpointType": "WebHook"
        },
        "filter": {
          "includedEventTypes": [
            "Microsoft.Storage.BlobCreated",
            "Microsoft.Storage.BlobDeleted"
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.EventGrid/systemTopics', parameters('systemTopicName'))]"
      ]
    }
  ]
}
Event type filtering
By default, allevent typesfor the event source are sent to the endpoint. You can decide to send only certain event types to your endpoint. For example, you can get notified of updates to your resources, but not notified for other operations like deletions. In that case, filter by theMicrosoft.Resources.ResourceWriteSuccessevent type. Provide an array with the event types, or specifyAllto get all event types for the event source.
Microsoft.Resources.ResourceWriteSuccess
All
The JSON syntax for filtering by event type is:
"filter": {
  "includedEventTypes": [
    "Microsoft.Resources.ResourceWriteFailure",
    "Microsoft.Resources.ResourceWriteSuccess"
  ]
}
"filter": {
  "includedEventTypes": [
    "Microsoft.Resources.ResourceWriteFailure",
    "Microsoft.Resources.ResourceWriteSuccess"
  ]
}
Subject filtering
For simple filtering by subject, specify a starting or ending value for the subject. For example, you can specify the subject ends with.txtto only get events related to uploading a text file to storage account. Or, you can filter the subject begins with/blobServices/default/containers/testcontainerto get all events for that container but not other containers in the storage account.
.txt
/blobServices/default/containers/testcontainer
When publishing events to custom topics, create subjects for your events that make it easy for subscribers to know whether they're interested in the event. Subscribers use thesubjectproperty to filter and route events. Consider adding the path for where the event happened, so subscribers can filter by segments of that path. The path enables subscribers to narrowly or broadly filter events. If you provide a three segment path like/A/B/Cin the subject, subscribers can filter by the first segment/Ato get a broad set of events. Those subscribers get events with subjects like/A/B/Cor/A/D/E. Other subscribers can filter by/A/Bto get a narrower set of events.
/A/B/C
/A
/A/B/C
/A/D/E
/A/B
Examples (Blob Storage events)
Blob events can be filtered by the event type, container name, or name of the object that was created or deleted.
The subject of Blob storage events uses the format:
/blobServices/default/containers/<containername>/blobs/<blobname>
/blobServices/default/containers/<containername>/blobs/<blobname>
To match all events for a storage account, you can leave the subject filters empty.
To match events from blobs created in a set of containers sharing a prefix, use asubjectBeginsWithfilter like:
subjectBeginsWith
/blobServices/default/containers/containerprefix
/blobServices/default/containers/containerprefix
To match events from blobs created in specific container, use asubjectBeginsWithfilter like:
subjectBeginsWith
/blobServices/default/containers/containername/
/blobServices/default/containers/containername/
To match events from blobs created in specific container sharing a blob name prefix, use asubjectBeginsWithfilter like:
subjectBeginsWith
/blobServices/default/containers/containername/blobs/blobprefix
/blobServices/default/containers/containername/blobs/blobprefix
To match events from blobs create in a specific subfolder of a container, use asubjectBeginsWithfilter like:
subjectBeginsWith
/blobServices/default/containers/{containername}/blobs/{subfolder}/
/blobServices/default/containers/{containername}/blobs/{subfolder}/
To match events from blobs created in specific container sharing a blob suffix, use asubjectEndsWithfilter like ".log" or ".jpg".
subjectEndsWith
Advanced filtering
To filter by values in the data fields and specify the comparison operator, use the advanced filtering option. In advanced filtering, you specify the:
operator type - The type of comparison.
key - The field in the event data that you're using for filtering. It can be a number, boolean, string, or an array.
values - The value or values to compare to the key.
Key
Key is the field in the event data that you're using for filtering. It can be one of the following types:
Number
Number
Boolean
Boolean
String
String
Array. You need to set theenableAdvancedFilteringOnArraysproperty to true to use this feature."filter":
{
    "subjectBeginsWith": "/blobServices/default/containers/mycontainer/blobs/log",
    "subjectEndsWith": ".jpg",
    "enableAdvancedFilteringOnArrays": true
}
Array. You need to set theenableAdvancedFilteringOnArraysproperty to true to use this feature.
enableAdvancedFilteringOnArrays
"filter":
{
    "subjectBeginsWith": "/blobServices/default/containers/mycontainer/blobs/log",
    "subjectEndsWith": ".jpg",
    "enableAdvancedFilteringOnArrays": true
}
"filter":
{
    "subjectBeginsWith": "/blobServices/default/containers/mycontainer/blobs/log",
    "subjectEndsWith": ".jpg",
    "enableAdvancedFilteringOnArrays": true
}
For events inCloud Events schema, use the following values for the key:eventid,source,eventtype,eventtypeversion, or event data (likedata.key1).
eventid
source
eventtype
eventtypeversion
data.key1
If you're using Event Grid basic tier, for events in theEvent Grid schema, use the following values for the key:ID,Topic,Subject,EventType,DataVersion, or event data (likedata.key1). Forcustom input schema, use the event data fields (likedata.key1). To access fields in the data section, use the.(dot) notation. For example,data.siteName,data.appEventTypeDetail.actionto accesssiteNameoractionfor the following sample event.
ID
Topic
Subject
EventType
DataVersion
data.key1
data.key1
.
data.siteName
data.appEventTypeDetail.action
siteName
action
"data": {
		"appEventTypeDetail": {
			"action": "Started"
		},
		"siteName": "<site-name>",
		"clientRequestId": "None",
		"correlationRequestId": "None",
		"requestId": "292f499d-04ee-4066-994d-c2df57b99198",
		"address": "None",
		"verb": "None"
	},
"data": {
		"appEventTypeDetail": {
			"action": "Started"
		},
		"siteName": "<site-name>",
		"clientRequestId": "None",
		"correlationRequestId": "None",
		"requestId": "292f499d-04ee-4066-994d-c2df57b99198",
		"address": "None",
		"verb": "None"
	},
Note
Event Grid doesn't support filtering on an array of objects. It only allows String, Boolean, Numbers, and Array of the same types (like integer array or string array).
Values
The values can be: number, string, boolean, or array
Operators
The available operators fornumbersare:
NumberIn
The NumberIn operator evaluates to true if thekeyvalue is one of the specifiedfiltervalues. In the following example, it checks whether the value of thecounterattribute in thedatasection is 5 or 1.
counter
data
"advancedFilters": [{
    "operatorType": "NumberIn",
    "key": "data.counter",
    "values": [
        5,
        1
    ]
}]
"advancedFilters": [{
    "operatorType": "NumberIn",
    "key": "data.counter",
    "values": [
        5,
        1
    ]
}]
If the key is an array, all the values in the array are checked against the array of filter values. Here's the pseudo code with the key:[v1, v2, v3]and the filter:[a, b, c]. Any key values with data types that donât match the filterâs data type are ignored.
[v1, v2, v3]
[a, b, c]
FOR_EACH filter IN (a, b, c)
    FOR_EACH key IN (v1, v2, v3)
        IF filter == key
            MATCH
FOR_EACH filter IN (a, b, c)
    FOR_EACH key IN (v1, v2, v3)
        IF filter == key
            MATCH
NumberNotIn
The NumberNotIn evaluates to true if thekeyvalue isnotany of the specifiedfiltervalues. In the following example, it checks whether the value of thecounterattribute in thedatasection isn't 41 and 0.
counter
data
"advancedFilters": [{
    "operatorType": "NumberNotIn",
    "key": "data.counter",
    "values": [
        41,
        0
    ]
}]
"advancedFilters": [{
    "operatorType": "NumberNotIn",
    "key": "data.counter",
    "values": [
        41,
        0
    ]
}]
If the key is an array, all the values in the array are checked against the array of filter values. Here's the pseudo code with the key:[v1, v2, v3]and the filter:[a, b, c]. Any key values with data types that donât match the filterâs data type are ignored.
[v1, v2, v3]
[a, b, c]
FOR_EACH filter IN (a, b, c)
    FOR_EACH key IN (v1, v2, v3)
        IF filter == key
            FAIL_MATCH
FOR_EACH filter IN (a, b, c)
    FOR_EACH key IN (v1, v2, v3)
        IF filter == key
            FAIL_MATCH
NumberLessThan
The NumberLessThan operator evaluates to true if thekeyvalue isless thanthe specifiedfiltervalue. In the following example, it checks whether the value of thecounterattribute in thedatasection is less than 100.
counter
data
"advancedFilters": [{
    "operatorType": "NumberLessThan",
    "key": "data.counter",
    "value": 100
}]
"advancedFilters": [{
    "operatorType": "NumberLessThan",
    "key": "data.counter",
    "value": 100
}]
If the key is an array, all the values in the array are checked against the filter value. Here's the pseudo code with the key:[v1, v2, v3]. Any key values with data types that donât match the filterâs data type are ignored.
[v1, v2, v3]
FOR_EACH key IN (v1, v2, v3)
    IF key < filter
        MATCH
FOR_EACH key IN (v1, v2, v3)
    IF key < filter
        MATCH
NumberGreaterThan
The NumberGreaterThan operator evaluates to true if thekeyvalue isgreater thanthe specifiedfiltervalue. In the following example, it checks whether the value of thecounterattribute in thedatasection is greater than 20.
counter
data
"advancedFilters": [{
    "operatorType": "NumberGreaterThan",
    "key": "data.counter",
    "value": 20
}]
"advancedFilters": [{
    "operatorType": "NumberGreaterThan",
    "key": "data.counter",
    "value": 20
}]
If the key is an array, all the values in the array are checked against the filter value. Here's the pseudo code with the key:[v1, v2, v3]. Any key values with data types that donât match the filterâs data type are ignored.
[v1, v2, v3]
FOR_EACH key IN (v1, v2, v3)
    IF key > filter
        MATCH
FOR_EACH key IN (v1, v2, v3)
    IF key > filter
        MATCH
NumberLessThanOrEquals
The NumberLessThanOrEquals operator evaluates to true if thekeyvalue isless than or equalto the specifiedfiltervalue. In the following example, it checks whether the value of thecounterattribute in thedatasection is less than or equal to 100.
counter
data
"advancedFilters": [{
    "operatorType": "NumberLessThanOrEquals",
    "key": "data.counter",
    "value": 100
}]
"advancedFilters": [{
    "operatorType": "NumberLessThanOrEquals",
    "key": "data.counter",
    "value": 100
}]
If the key is an array, all the values in the array are checked against the filter value. Here's the pseudo code with the key:[v1, v2, v3]. Any key values with data types that donât match the filterâs data type are ignored.
[v1, v2, v3]
FOR_EACH key IN (v1, v2, v3)
    IF key <= filter
        MATCH
FOR_EACH key IN (v1, v2, v3)
    IF key <= filter
        MATCH
NumberGreaterThanOrEquals
The NumberGreaterThanOrEquals operator evaluates to true if thekeyvalue isgreater than or equalto the specifiedfiltervalue. In the following example, it checks whether the value of thecounterattribute in thedatasection is greater than or equal to 30.
counter
data
"advancedFilters": [{
    "operatorType": "NumberGreaterThanOrEquals",
    "key": "data.counter",
    "value": 30
}]
"advancedFilters": [{
    "operatorType": "NumberGreaterThanOrEquals",
    "key": "data.counter",
    "value": 30
}]
If the key is an array, all the values in the array are checked against the filter value. Here's the pseudo code with the key:[v1, v2, v3]. Any key values with data types that donât match the filterâs data type are ignored.
[v1, v2, v3]
FOR_EACH key IN (v1, v2, v3)
    IF key >= filter
        MATCH
FOR_EACH key IN (v1, v2, v3)
    IF key >= filter
        MATCH
NumberInRange
The NumberInRange operator evaluates to true if thekeyvalue is in one of the specifiedfilter ranges. In the following example, it checks whether the value of thekey1attribute in thedatasection is in one of the two ranges: 3.14159 - 999.95, 3000 - 4000.
key1
data
{
    "operatorType": "NumberInRange",
    "key": "data.key1",
    "values": [[3.14159, 999.95], [3000, 4000]]
}
{
    "operatorType": "NumberInRange",
    "key": "data.key1",
    "values": [[3.14159, 999.95], [3000, 4000]]
}
Thevaluesproperty is an array of ranges. In the previous example, it's an array of two ranges. Here's an example of an array with one range to check.
values
Array with one range:
{
    "operatorType": "NumberInRange",
    "key": "data.key1",
    "values": [[3000, 4000]]
}
{
    "operatorType": "NumberInRange",
    "key": "data.key1",
    "values": [[3000, 4000]]
}
If the key is an array, all the values in the array are checked against the array of filter values. Here's the pseudo code with the key:[v1, v2, v3]and the filter: an array of ranges. In this pseudo code,aandbare low and high values of each range in the array. Any key values with data types that donât match the filterâs data type are ignored.
[v1, v2, v3]
a
b
FOR_EACH (a,b) IN filter.Values
    FOR_EACH key IN (v1, v2, v3)
       IF key >= a AND key <= b
           MATCH
FOR_EACH (a,b) IN filter.Values
    FOR_EACH key IN (v1, v2, v3)
       IF key >= a AND key <= b
           MATCH
NumberNotInRange
The NumberNotInRange operator evaluates to true if thekeyvalue isnotin any of the specifiedfilter ranges. In the following example, it checks whether the value of thekey1attribute in thedatasection is in one of the two ranges: 3.14159 - 999.95, 3000 - 4000. If it's, the operator returns false.
key1
data
{
    "operatorType": "NumberNotInRange",
    "key": "data.key1",
    "values": [[3.14159, 999.95], [3000, 4000]]
}
{
    "operatorType": "NumberNotInRange",
    "key": "data.key1",
    "values": [[3.14159, 999.95], [3000, 4000]]
}
Thevaluesproperty is an array of ranges. In the previous example, it's an array of two ranges. Here's an example of an array with one range to check.
values
Array with one range:
{
    "operatorType": "NumberNotInRange",
    "key": "data.key1",
    "values": [[3000, 4000]]
}
{
    "operatorType": "NumberNotInRange",
    "key": "data.key1",
    "values": [[3000, 4000]]
}
If the key is an array, all the values in the array are checked against the array of filter values. Here's the pseudo code with the key:[v1, v2, v3]and the filter: an array of ranges. In this pseudo code,aandbare low and high values of each range in the array. Any key values with data types that donât match the filterâs data type are ignored.
[v1, v2, v3]
a
b
FOR_EACH (a,b) IN filter.Values
    FOR_EACH key IN (v1, v2, v3)
        IF key >= a AND key <= b
            FAIL_MATCH
FOR_EACH (a,b) IN filter.Values
    FOR_EACH key IN (v1, v2, v3)
        IF key >= a AND key <= b
            FAIL_MATCH
The available operator forbooleansis:
BoolEquals
The BoolEquals operator evaluates to true if thekeyvalue is the specified boolean valuefilter. In the following example, it checks whether the value of theisEnabledattribute in thedatasection istrue.
isEnabled
data
true
"advancedFilters": [{
    "operatorType": "BoolEquals",
    "key": "data.isEnabled",
    "value": true
}]
"advancedFilters": [{
    "operatorType": "BoolEquals",
    "key": "data.isEnabled",
    "value": true
}]
If the key is an array, all the values in the array are checked against the filter boolean value. Here's the pseudo code with the key:[v1, v2, v3]. Any key values with data types that donât match the filterâs data type are ignored.
[v1, v2, v3]
FOR_EACH key IN (v1, v2, v3)
    IF filter == key
        MATCH
FOR_EACH key IN (v1, v2, v3)
    IF filter == key
        MATCH
The available operators forstringsare:
StringContains
TheStringContainsevaluates to true if thekeyvaluecontainsany of the specifiedfiltervalues (as substrings). In the following example, it checks whether the value of thekey1attribute in thedatasection contains one of the specified substrings:microsoftorazure. For example,azure data factoryhasazurein it.
key1
data
microsoft
azure
azure data factory
azure
"advancedFilters": [{
    "operatorType": "StringContains",
    "key": "data.key1",
    "values": [
        "microsoft", 
        "azure"
    ]
}]
"advancedFilters": [{
    "operatorType": "StringContains",
    "key": "data.key1",
    "values": [
        "microsoft", 
        "azure"
    ]
}]
If the key is an array, all the values in the array are checked against the array of filter values. Here's the pseudo code with the key:[v1, v2, v3]and the filter:[a,b,c]. Any key values with data types that donât match the filterâs data type are ignored.
[v1, v2, v3]
[a,b,c]
FOR_EACH filter IN (a, b, c)
    FOR_EACH key IN (v1, v2, v3)
        IF key CONTAINS filter
            MATCH
FOR_EACH filter IN (a, b, c)
    FOR_EACH key IN (v1, v2, v3)
        IF key CONTAINS filter
            MATCH
StringNotContains
TheStringNotContainsoperator evaluates to true if thekeydoesnot containthe specifiedfiltervalues as substrings. If the key contains one of the specified values as a substring, the operator evaluates to false. In the following example, the operator returns true only if the value of thekey1attribute in thedatasection doesn't havecontosoandfabrikamas substrings.
key1
data
contoso
fabrikam
"advancedFilters": [{
    "operatorType": "StringNotContains",
    "key": "data.key1",
    "values": [
        "contoso", 
        "fabrikam"
    ]
}]
"advancedFilters": [{
    "operatorType": "StringNotContains",
    "key": "data.key1",
    "values": [
        "contoso", 
        "fabrikam"
    ]
}]
If the key is an array, all the values in the array are checked against the array of filter values. Here's the pseudo code with the key:[v1, v2, v3]and the filter:[a,b,c]. Any key values with data types that donât match the filterâs data type are ignored.
[v1, v2, v3]
[a,b,c]
FOR_EACH filter IN (a, b, c)
    FOR_EACH key IN (v1, v2, v3)
        IF key CONTAINS filter
            FAIL_MATCH
FOR_EACH filter IN (a, b, c)
    FOR_EACH key IN (v1, v2, v3)
        IF key CONTAINS filter
            FAIL_MATCH
SeeLimitationssection for current limitation of this operator.
StringBeginsWith
TheStringBeginsWithoperator evaluates to true if thekeyvaluebegins withany of the specifiedfiltervalues. In the following example, it checks whether the value of thekey1attribute in thedatasection begins witheventormessage. For example,event hubsbegins withevent.
key1
data
event
message
event hubs
event
"advancedFilters": [{
    "operatorType": "StringBeginsWith",
    "key": "data.key1",
    "values": [
        "event", 
        "message"
    ]
}]
"advancedFilters": [{
    "operatorType": "StringBeginsWith",
    "key": "data.key1",
    "values": [
        "event", 
        "message"
    ]
}]
If the key is an array, all the values in the array are checked against the array of filter values. Here's the pseudo code with the key:[v1, v2, v3]and the filter:[a,b,c]. Any key values with data types that donât match the filterâs data type are ignored.
[v1, v2, v3]
[a,b,c]
FOR_EACH filter IN (a, b, c)
    FOR_EACH key IN (v1, v2, v3)
        IF key BEGINS_WITH filter
            MATCH
FOR_EACH filter IN (a, b, c)
    FOR_EACH key IN (v1, v2, v3)
        IF key BEGINS_WITH filter
            MATCH
StringNotBeginsWith
TheStringNotBeginsWithoperator evaluates to true if thekeyvalue doesnot begin withany of the specifiedfiltervalues. In the following example, it checks whether the value of thekey1attribute in thedatasection doesn't begin witheventormessage.
key1
data
event
message
"advancedFilters": [{
    "operatorType": "StringNotBeginsWith",
    "key": "data.key1",
    "values": [
        "event", 
        "message"
    ]
}]
"advancedFilters": [{
    "operatorType": "StringNotBeginsWith",
    "key": "data.key1",
    "values": [
        "event", 
        "message"
    ]
}]
If the key is an array, all the values in the array are checked against the array of filter values. Here's the pseudo code with the key:[v1, v2, v3]and the filter:[a,b,c]. Any key values with data types that donât match the filterâs data type are ignored.
[v1, v2, v3]
[a,b,c]
FOR_EACH filter IN (a, b, c)
    FOR_EACH key IN (v1, v2, v3)
        IF key BEGINS_WITH filter
            FAIL_MATCH
FOR_EACH filter IN (a, b, c)
    FOR_EACH key IN (v1, v2, v3)
        IF key BEGINS_WITH filter
            FAIL_MATCH
StringEndsWith
TheStringEndsWithoperator evaluates to true if thekeyvalueends withone of the specifiedfiltervalues. In the following example, it checks whether the value of thekey1attribute in thedatasection ends withjpgorjpegorpng. For example,eventgrid.pngends withpng.
key1
data
jpg
jpeg
png
eventgrid.png
png
"advancedFilters": [{
    "operatorType": "StringEndsWith",
    "key": "data.key1",
    "values": [
        "jpg", 
        "jpeg", 
        "png"
    ]
}]
"advancedFilters": [{
    "operatorType": "StringEndsWith",
    "key": "data.key1",
    "values": [
        "jpg", 
        "jpeg", 
        "png"
    ]
}]
If the key is an array, all the values in the array are checked against the array of filter values. Here's the pseudo code with the key:[v1, v2, v3]and the filter:[a,b,c]. Any key values with data types that donât match the filterâs data type are ignored.
[v1, v2, v3]
[a,b,c]
FOR_EACH filter IN (a, b, c)
    FOR_EACH key IN (v1, v2, v3)
        IF key ENDS_WITH filter
            MATCH
FOR_EACH filter IN (a, b, c)
    FOR_EACH key IN (v1, v2, v3)
        IF key ENDS_WITH filter
            MATCH
StringNotEndsWith
TheStringNotEndsWithoperator evaluates to true if thekeyvalue doesnot end withany of the specifiedfiltervalues. In the following example, it checks whether the value of thekey1attribute in thedatasection doesn't end withjpgorjpegorpng.
key1
data
jpg
jpeg
png
"advancedFilters": [{
    "operatorType": "StringNotEndsWith",
    "key": "data.key1",
    "values": [
        "jpg", 
        "jpeg", 
        "png"
    ]
}]
"advancedFilters": [{
    "operatorType": "StringNotEndsWith",
    "key": "data.key1",
    "values": [
        "jpg", 
        "jpeg", 
        "png"
    ]
}]
If the key is an array, all the values in the array are checked against the array of filter values. Here's the pseudo code with the key:[v1, v2, v3]and the filter:[a,b,c]. Any key values with data types that donât match the filterâs data type are ignored.
[v1, v2, v3]
[a,b,c]
FOR_EACH filter IN (a, b, c)
    FOR_EACH key IN (v1, v2, v3)
        IF key ENDS_WITH filter
            FAIL_MATCH
FOR_EACH filter IN (a, b, c)
    FOR_EACH key IN (v1, v2, v3)
        IF key ENDS_WITH filter
            FAIL_MATCH
StringIn
TheStringInoperator checks whether thekeyvalueexactly matchesone of the specifiedfiltervalues. In the following example, it checks whether the value of thekey1attribute in thedatasection iscontosoorfabrikamorfactory.
key1
data
contoso
fabrikam
factory
"advancedFilters": [{
    "operatorType": "StringIn",
    "key": "data.key1",
    "values": [
        "contoso", 
        "fabrikam", 
        "factory"
    ]
}]
"advancedFilters": [{
    "operatorType": "StringIn",
    "key": "data.key1",
    "values": [
        "contoso", 
        "fabrikam", 
        "factory"
    ]
}]
If the key is an array, all the values in the array are checked against the array of filter values. Here's the pseudo code with the key:[v1, v2, v3]and the filter:[a,b,c]. Any key values with data types that donât match the filterâs data type are ignored.
[v1, v2, v3]
[a,b,c]
FOR_EACH filter IN (a, b, c)
    FOR_EACH key IN (v1, v2, v3)
        IF filter == key
            MATCH
FOR_EACH filter IN (a, b, c)
    FOR_EACH key IN (v1, v2, v3)
        IF filter == key
            MATCH
StringNotIn
TheStringNotInoperator checks whether thekeyvaluedoes not matchany of the specifiedfiltervalues. In the following example, it checks whether the value of thekey1attribute in thedatasection isn'tawsandbridge.
key1
data
aws
bridge
"advancedFilters": [{
    "operatorType": "StringNotIn",
    "key": "data.key1",
    "values": [
        "aws", 
        "bridge"
    ]
}]
"advancedFilters": [{
    "operatorType": "StringNotIn",
    "key": "data.key1",
    "values": [
        "aws", 
        "bridge"
    ]
}]
If the key is an array, all the values in the array are checked against the array of filter values. Here's the pseudo code with the key:[v1, v2, v3]and the filter:[a,b,c]. Any key values with data types that donât match the filterâs data type are ignored.
[v1, v2, v3]
[a,b,c]
FOR_EACH filter IN (a, b, c)
    FOR_EACH key IN (v1, v2, v3)
        IF filter == key
            FAIL_MATCH
FOR_EACH filter IN (a, b, c)
    FOR_EACH key IN (v1, v2, v3)
        IF filter == key
            FAIL_MATCH
All string comparisons aren't case-sensitive.
Note
If the event JSON doesn't contain the advanced filter key, filter is evaluated asnot matchedfor the following operators: NumberGreaterThan, NumberGreaterThanOrEquals, NumberLessThan, NumberLessThanOrEquals, NumberIn, BoolEquals, StringContains, StringNotContains, StringBeginsWith, StringNotBeginsWith, StringEndsWith, StringNotEndsWith, StringIn.
The filter is evaluated asmatchedfor the following operators: NumberNotIn, StringNotIn.
IsNullOrUndefined
The IsNullOrUndefined operator evaluates to true if the key's value is NULL or undefined.
{
    "operatorType": "IsNullOrUndefined",
    "key": "data.key1"
}
{
    "operatorType": "IsNullOrUndefined",
    "key": "data.key1"
}
In the following example, key1 is missing, so the operator would evaluate to true.
{ 
    "data": 
    { 
        "key2": 5 
    } 
}
{ 
    "data": 
    { 
        "key2": 5 
    } 
}
In the following example, key1 is set to null, so the operator would evaluate to true.
{
    "data": 
    { 
        "key1": null
    }
}
{
    "data": 
    { 
        "key1": null
    }
}
If key1 has any other value in these examples, the operator would evaluate to false.
IsNotNull
The IsNotNull operator evaluates to true if the key's value isn't NULL or undefined.
{
    "operatorType": "IsNotNull",
    "key": "data.key1"
}
{
    "operatorType": "IsNotNull",
    "key": "data.key1"
}
OR and AND
If you specify a single filter with multiple values, anORoperation is performed, so the value of the key field must be one of these values. Here's an example:
"advancedFilters": [
    {
        "operatorType": "StringContains",
        "key": "Subject",
        "values": [
            "/providers/microsoft.devtestlab/",
            "/providers/Microsoft.Compute/virtualMachines/"
        ]
    }
]
"advancedFilters": [
    {
        "operatorType": "StringContains",
        "key": "Subject",
        "values": [
            "/providers/microsoft.devtestlab/",
            "/providers/Microsoft.Compute/virtualMachines/"
        ]
    }
]
If you specify multiple different filters, anANDoperation is done, so each filter condition must be met. Here's an example:
"advancedFilters": [
    {
        "operatorType": "StringContains",
        "key": "Subject",
        "values": [
            "/providers/microsoft.devtestlab/"
        ]
    },
    {
        "operatorType": "StringContains",
        "key": "Subject",
        "values": [
            "/providers/Microsoft.Compute/virtualMachines/"
        ]
    }
]
"advancedFilters": [
    {
        "operatorType": "StringContains",
        "key": "Subject",
        "values": [
            "/providers/microsoft.devtestlab/"
        ]
    },
    {
        "operatorType": "StringContains",
        "key": "Subject",
        "values": [
            "/providers/Microsoft.Compute/virtualMachines/"
        ]
    }
]
CloudEvents
For events in theCloudEvents schema, use the following values for the key:eventid,source,eventtype,eventtypeversion, or event data (likedata.key1).
eventid
source
eventtype
eventtypeversion
data.key1
You can also useextension context attributes in CloudEvents 1.0. In the following example,comexampleextension1andcomexampleothervalueare extension context attributes.
comexampleextension1
comexampleothervalue
{
    "specversion" : "1.0",
    "type" : "com.example.someevent",
    "source" : "/mycontext",
    "id" : "C234-1234-1234",
    "time" : "2018-04-05T17:31:00Z",
    "subject": null,
    "comexampleextension1" : "value",
    "comexampleothervalue" : 5,
    "datacontenttype" : "application/json",
    "data" : {
        "appinfoA" : "abc",
        "appinfoB" : 123,
        "appinfoC" : true
    }
}
{
    "specversion" : "1.0",
    "type" : "com.example.someevent",
    "source" : "/mycontext",
    "id" : "C234-1234-1234",
    "time" : "2018-04-05T17:31:00Z",
    "subject": null,
    "comexampleextension1" : "value",
    "comexampleothervalue" : 5,
    "datacontenttype" : "application/json",
    "data" : {
        "appinfoA" : "abc",
        "appinfoB" : 123,
        "appinfoC" : true
    }
}
Here's an example of using an extension context attribute in a filter.
"advancedFilters": [{
    "operatorType": "StringBeginsWith",
    "key": "comexampleothervalue",
    "values": [
        "5", 
        "1"
    ]
}]
"advancedFilters": [{
    "operatorType": "StringBeginsWith",
    "key": "comexampleothervalue",
    "values": [
        "5", 
        "1"
    ]
}]
Limitations
Advanced filtering has the following limitations:
25 advanced filters and 25 filter values across all the filters per Event Grid subscription
512 characters per string value
Keys with.(dot)character in them. For example:http://schemas.microsoft.com/claims/authnclassreferenceorjohn.doe@contoso.com. Currently, there's no support for escape characters in keys.
.
http://schemas.microsoft.com/claims/authnclassreference
john.doe@contoso.com
The same key can be used in more than one filter.
Next steps
To learn about filtering events with PowerShell and Azure CLI, seeFilter events for Event Grid.
To quickly get started using Event Grid, seeCreate and route custom events with Azure Event Grid.
Feedback
Was this page helpful?
Additional resources