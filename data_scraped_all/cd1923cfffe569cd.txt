Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Set up DevOps deployment for Standard logic apps in single-tenant Azure Logic Apps
Article
2025-03-27
11 contributors
In this article
Applies to:Azure Logic Apps (Standard)
This guide primarily shows how to set up deployment for a Standard logic app project in Visual Studio Code to your infrastructure using DevOps tools and processes. If your Standard logic app exists in the Azure portal instead, you can download your logic app's artifact files for use with DevOps deployment. Based on whether you want to use GitHub or Azure DevOps, you then choose the path and tools that work best for your deployment scenario.
If you don't have a Standard logic app, you can still follow this guide using the linked sample Standard logic app projects plus examples for deployment to Azure through GitHub or Azure DevOps. For more information, reviewDevOps deployment overview for single-tenant Azure Logic Apps.
Prerequisites
An Azure account with an active subscription. If you don't have an Azure subscription,create a free account.
An Azure account with an active subscription. If you don't have an Azure subscription,create a free account.
Visual Studio Code, which is free, the Azure Logic Apps (Standard) extension for Visual Studio Code, and other related prerequisites.
Visual Studio Code, which is free, the Azure Logic Apps (Standard) extension for Visual Studio Code, and other related prerequisites.
The Standard logic app to use with your DevOps tools and processes.You can either download the artifact files for your Standard logic app resource from the Azure portal, or you can use a Standard logic app project created withVisual Studio Code and the Azure Logic Apps (Standard) extension for Visual Studio Code.Portal: The downloaded zip file contains Standard logic app artifact files, such asworkflow.json,connections.json,host.json, andlocal.settings.json. SeeDownload Standard logic app artifact files from portal.Visual Studio Code: You need an empty Standard logic app resource in the Azure portal for your deployment destination. To quickly create an empty Standard logic app resource, reviewCreate single-tenant based logic app workflows - Portal.If you don't have an existing logic app or infrastructure, you can use the linked sample Standard logic app projects to deploy an example logic app and infrastructure, based whether you want to use GitHub or Azure DevOps. For more information about the included sample projects and resources to run the example logic app, reviewDeploy infrastructure resources.
The Standard logic app to use with your DevOps tools and processes.
You can either download the artifact files for your Standard logic app resource from the Azure portal, or you can use a Standard logic app project created withVisual Studio Code and the Azure Logic Apps (Standard) extension for Visual Studio Code.
Portal: The downloaded zip file contains Standard logic app artifact files, such asworkflow.json,connections.json,host.json, andlocal.settings.json. SeeDownload Standard logic app artifact files from portal.
Portal: The downloaded zip file contains Standard logic app artifact files, such asworkflow.json,connections.json,host.json, andlocal.settings.json. SeeDownload Standard logic app artifact files from portal.
Visual Studio Code: You need an empty Standard logic app resource in the Azure portal for your deployment destination. To quickly create an empty Standard logic app resource, reviewCreate single-tenant based logic app workflows - Portal.
Visual Studio Code: You need an empty Standard logic app resource in the Azure portal for your deployment destination. To quickly create an empty Standard logic app resource, reviewCreate single-tenant based logic app workflows - Portal.
If you don't have an existing logic app or infrastructure, you can use the linked sample Standard logic app projects to deploy an example logic app and infrastructure, based whether you want to use GitHub or Azure DevOps. For more information about the included sample projects and resources to run the example logic app, reviewDeploy infrastructure resources.

Deploy infrastructure resources
To try the DevOps deployment experience without prior Standard logic app or infrastructure setup, use the following sample projects so you can set up deployment for an example Standard logic app and infrastructure, based whether you want to use GitHub or Azure DevOps:
GitHub sample for single-tenant Azure Logic AppsThis sample includes an example Standard logic app project plus examples for Azure deployment and GitHub Actions.
GitHub sample for single-tenant Azure Logic Apps
This sample includes an example Standard logic app project plus examples for Azure deployment and GitHub Actions.
Azure DevOps sample for single-tenant Azure Logic AppsThis sample includes an example Standard logic app project plus examples for Azure deployment and Azure Pipelines.
Azure DevOps sample for single-tenant Azure Logic Apps
This sample includes an example Standard logic app project plus examples for Azure deployment and Azure Pipelines.
Both samples include the following resources that a Standard logic app uses to run:

API connection resources and access policies
In single-tenant Azure Logic Apps, every managed API connection resource in your workflow requires an associated access policy. This policy needs your logic app's identity to provide the correct permissions for accessing the managed connector infrastructure. The included sample projects include an ARM template that includes all the necessary infrastructure resources, including these access policies.
For example, the following diagram shows the dependencies between a Standard logic app project and infrastructure resources:


Download Standard logic app artifacts from portal
If your Standard logic app is in the Azure portal, you can download a zip file that contains your logic app's artifact files, includingworkflow.json,connections.json,host.json, andlocal.settings.json.
In theAzure portal, find and open your Standard logic app resource.
In theAzure portal, find and open your Standard logic app resource.
On the logic app menu, selectOverview.
On the logic app menu, selectOverview.
On theOverviewtoolbar, selectDownload app content. In the confirmation box that appears, selectDownload.
On theOverviewtoolbar, selectDownload app content. In the confirmation box that appears, selectDownload.
When the prompt appears, selectSave as, browse to the local folder that you want, and selectSaveto save the zip file.
When the prompt appears, selectSave as, browse to the local folder that you want, and selectSaveto save the zip file.
Extract the zip file.
Extract the zip file.
In Visual Studio Code, open the folder that contains the unzipped files.When you open the folder, Visual Studio Code automatically creates aworkspace.
In Visual Studio Code, open the folder that contains the unzipped files.
When you open the folder, Visual Studio Code automatically creates aworkspace.
Edit the folder's contents to include only the folders and files required for deployment using DevOps.
Edit the folder's contents to include only the folders and files required for deployment using DevOps.
When you finish, save your changes.
When you finish, save your changes.

Build and deploy logic app (zip deploy)
You can set up build and release pipelines either inside or outside Azure that deploy Standard logic apps to your infrastructure.
Build your project
Push your Standard logic app project and artifact files to your source repository, for example, either GitHub or Azure DevOps.
Push your Standard logic app project and artifact files to your source repository, for example, either GitHub or Azure DevOps.
Set up a build pipeline based on your logic app project type by completing the following corresponding actions:Project typeDescription and stepsNuget-basedThe NuGet-based project structure is based on the .NET Framework. To build these projects, make sure to follow the build steps for .NET Standard. For more information, review the documentation forCreate a NuGet package using MSBuild.Bundle-basedThe extension bundle-based project isn't language-specific and doesn't require any language-specific build steps.
Set up a build pipeline based on your logic app project type by completing the following corresponding actions:
Zip your project files using any method that you want.ImportantMake sure that your zip file contains your project's actual build artifacts at the root level,
including all workflow folders, configuration files such ashost.json,connections.json,local.settings.json, and any other related files. Don't add any extra folders nor put any
artifacts into folders that don't already exist in your project structure.For example, the following list shows an exampleMyBuildArtifacts.zipfile structure:MyStatefulWorkflow1-Folder
MyStatefulWorkflow2-Folder
connections.json
host.json
local.settings.json
Zip your project files using any method that you want.
Important
Make sure that your zip file contains your project's actual build artifacts at the root level,
including all workflow folders, configuration files such ashost.json,connections.json,local.settings.json, and any other related files. Don't add any extra folders nor put any
artifacts into folders that don't already exist in your project structure.
For example, the following list shows an exampleMyBuildArtifacts.zipfile structure:
MyStatefulWorkflow1-Folder
MyStatefulWorkflow2-Folder
connections.json
host.json
local.settings.json
MyStatefulWorkflow1-Folder
MyStatefulWorkflow2-Folder
connections.json
host.json
local.settings.json
Before you release to Azure
The managed API connections inside your logic app project'sconnections.jsonfile are created specifically for local use in Visual Studio Code. Before you can release your project artifacts from Visual Studio Code to Azure, you have to update these artifacts. To use the managed API connections in Azure, you have to update their authentication methods so that they're in the correct format to use in Azure.
For each managed API connection that uses authentication, you have to update theauthenticationobject from the local format in Visual Studio Code to the Azure portal format, as shown by the first and second code examples, respectively:
authentication
Visual Studio Code format
{
   "managedApiConnections": {
      "sql": {
         "api": {
            "id": "/subscriptions/aaaa0a0a-bb1b-cc2c-dd3d-eeeeee4e4e4e/providers/Microsoft.Web/locations/westus/managedApis/sql"
         },
         "connection": {
            "id": "/subscriptions/aaaa0a0a-bb1b-cc2c-dd3d-eeeeee4e4e4e/resourceGroups/ase/providers/Microsoft.Web/connections/sql-2"
         },
         "connectionRuntimeUrl": "https://xxxxxxxxxxxxxx.01.common.logic-westus.azure-apihub.net/apim/sql/xxxxxxxxxxxxxxxxxxxxxxxxx/",
         "authentication": {
            "type": "Raw",
            "scheme": "Key",
            "parameter": "@appsetting('sql-connectionKey')"
         }
      }
   }
}
{
   "managedApiConnections": {
      "sql": {
         "api": {
            "id": "/subscriptions/aaaa0a0a-bb1b-cc2c-dd3d-eeeeee4e4e4e/providers/Microsoft.Web/locations/westus/managedApis/sql"
         },
         "connection": {
            "id": "/subscriptions/aaaa0a0a-bb1b-cc2c-dd3d-eeeeee4e4e4e/resourceGroups/ase/providers/Microsoft.Web/connections/sql-2"
         },
         "connectionRuntimeUrl": "https://xxxxxxxxxxxxxx.01.common.logic-westus.azure-apihub.net/apim/sql/xxxxxxxxxxxxxxxxxxxxxxxxx/",
         "authentication": {
            "type": "Raw",
            "scheme": "Key",
            "parameter": "@appsetting('sql-connectionKey')"
         }
      }
   }
}
Azure portal format
{
   "managedApiConnections": {
      "sql": {
         "api": {
            "id": "/subscriptions/aaaa0a0a-bb1b-cc2c-dd3d-eeeeee4e4e4e/providers/Microsoft.Web/locations/westus/managedApis/sql"
         },
         "connection": {
            "id": "/subscriptions/aaaa0a0a-bb1b-cc2c-dd3d-eeeeee4e4e4e/resourceGroups/ase/providers/Microsoft.Web/connections/sql-2"
         },
         "connectionRuntimeUrl": "https://xxxxxxxxxxxxxx.01.common.logic-westus.azure-apihub.net/apim/sql/xxxxxxxxxxxxxxxxxxxxxxxxx/",
         "authentication": {
            "type": "ManagedServiceIdentity"
         }
      }
   }
}
{
   "managedApiConnections": {
      "sql": {
         "api": {
            "id": "/subscriptions/aaaa0a0a-bb1b-cc2c-dd3d-eeeeee4e4e4e/providers/Microsoft.Web/locations/westus/managedApis/sql"
         },
         "connection": {
            "id": "/subscriptions/aaaa0a0a-bb1b-cc2c-dd3d-eeeeee4e4e4e/resourceGroups/ase/providers/Microsoft.Web/connections/sql-2"
         },
         "connectionRuntimeUrl": "https://xxxxxxxxxxxxxx.01.common.logic-westus.azure-apihub.net/apim/sql/xxxxxxxxxxxxxxxxxxxxxxxxx/",
         "authentication": {
            "type": "ManagedServiceIdentity"
         }
      }
   }
}
If you're deploying your Standard logic app to an Azure region or subscription different from your local development environment, you must also make sure to create these managed API connections before deployment. Azure Resource Manager template (ARM template) deployment is the easiest way to create managed API connections.
The following example shows a SQL managed API connection resource definition in an ARM template:
{
   "type": "Microsoft.Web/connections",
   "apiVersion": "2016â06â01",
   "location": "[parameters('location')]",
   "name": "[parameters('connectionName')]",
   "properties": {
      "displayName": "sqltestconnector",
      "api": {
         "id": "/subscriptions/aaaa0a0a-bb1b-cc2c-dd3d-eeeeee4e4e4e/providers/Microsoft.Web/locations/{Azure-region-location}/managedApis/sql"
      },
      "parameterValues": {
         "authType": "windows", 
         "database": "TestDB",
         "password": "TestPassword",
         "server": "TestServer",
         "username": "TestUserName"
      }
   }
}
{
   "type": "Microsoft.Web/connections",
   "apiVersion": "2016â06â01",
   "location": "[parameters('location')]",
   "name": "[parameters('connectionName')]",
   "properties": {
      "displayName": "sqltestconnector",
      "api": {
         "id": "/subscriptions/aaaa0a0a-bb1b-cc2c-dd3d-eeeeee4e4e4e/providers/Microsoft.Web/locations/{Azure-region-location}/managedApis/sql"
      },
      "parameterValues": {
         "authType": "windows", 
         "database": "TestDB",
         "password": "TestPassword",
         "server": "TestServer",
         "username": "TestUserName"
      }
   }
}
To find the required values for thepropertiesobject so that you can complete the connection resource definition, use the following API for a specific connector:
properties
GET https://management.azure.com/subscriptions/{Azure-subscription-ID}/providers/Microsoft.Web/locations/{Azure-region-location}/managedApis/{connector-name}?api-version=2016-06-01
GET https://management.azure.com/subscriptions/{Azure-subscription-ID}/providers/Microsoft.Web/locations/{Azure-region-location}/managedApis/{connector-name}?api-version=2016-06-01
In the response, find theconnectionParametersobject, which contains the necessary information to complete the resource definition for that specific connector. The following example shows an example resource definition for a SQL managed connection:
connectionParameters
{
   "type": "Microsoft.Web/connections",
   "apiVersion": "2016â06â01",
   "location": "[parameters('location')]",
   "name": "[parameters('connectionName')]",
   "properties": {
      "displayName": "sqltestconnector",
      "api": {
         "id": "/subscriptions/{Azure-subscription-ID}/providers/Microsoft.Web/locations/{Azure-region-location}/managedApis/sql"
      },
      "parameterValues": {
         "authType": "windows",
         "database": "TestDB",
         "password": "TestPassword",
         "server": "TestServer",
         "username": "TestUserName"
      }
   }
}
{
   "type": "Microsoft.Web/connections",
   "apiVersion": "2016â06â01",
   "location": "[parameters('location')]",
   "name": "[parameters('connectionName')]",
   "properties": {
      "displayName": "sqltestconnector",
      "api": {
         "id": "/subscriptions/{Azure-subscription-ID}/providers/Microsoft.Web/locations/{Azure-region-location}/managedApis/sql"
      },
      "parameterValues": {
         "authType": "windows",
         "database": "TestDB",
         "password": "TestPassword",
         "server": "TestServer",
         "username": "TestUserName"
      }
   }
}
As an alternative, you can capture and review the network trace for when you create a connection using the workflow designer in Azure Logic Apps. Find thePUTcall that is sent to the managed connector's API as previously described, and review the request body for all the necessary information.
PUT
If your connection uses an on-premises data gateway resource, this resource definition exists separately from the connector resource definition. To view the data gateway's resource definition, seeAutomate deployment for Azure Logic Apps by using Azure Resource Manager templatesandMicrosoft.Web connectionGateways.
Release to Azure
To set up a release pipeline that deploys to Azure, follow the associated steps for GitHub, Azure DevOps, or Azure CLI.
GitHub
Azure DevOps
Azure CLI
For GitHub deployments, you can deploy your logic app by usingGitHub Actions, for example, the GitHub Actions in Azure Functions. This action requires that you pass through the following information:
The logic app name to use for deployment
The zip file that contains your actual build artifacts, including all workflow folders, configuration files such ashost.json,connections.json,local.settings.json, and any other related files.
Yourpublish profile, which is used for authentication
- name: 'Run Azure Functions Action'
  uses: Azure/functions-action@v1
  id: fa
  with:
   app-name: 'MyLogicAppName'
   package: 'MyBuildArtifact.zip'
   publish-profile: 'MyLogicAppPublishProfile'
- name: 'Run Azure Functions Action'
  uses: Azure/functions-action@v1
  id: fa
  with:
   app-name: 'MyLogicAppName'
   package: 'MyBuildArtifact.zip'
   publish-profile: 'MyLogicAppPublishProfile'
For more information, reviewContinuous delivery by using GitHub Action.
For Azure DevOps deployments, you can deploy your logic app by using theAzure Function App Deploy taskin Azure Pipelines. This action requires that you pass through the following information:
The logic app name to use for deployment
The zip file that contains your actual build artifacts, including all workflow folders, configuration files such ashost.json,connections.json,local.settings.json, and any other related files.
Yourpublish profile, which is used for authentication
- task: AzureFunctionApp@1
  displayName: 'Deploy logic app workflows'
  inputs:
     azureSubscription: 'MyServiceConnection'
     appType: 'functionAppLinux' ## Default: functionApp 
     appName: 'MyLogicAppName'
     package: 'MyBuildArtifact.zip'
     deploymentMethod: 'zipDeploy'
- task: AzureFunctionApp@1
  displayName: 'Deploy logic app workflows'
  inputs:
     azureSubscription: 'MyServiceConnection'
     appType: 'functionAppLinux' ## Default: functionApp 
     appName: 'MyLogicAppName'
     package: 'MyBuildArtifact.zip'
     deploymentMethod: 'zipDeploy'
For more information, reviewDeploy an Azure Function using Azure Pipelines.
If you use other deployment tools, you can deploy your Standard logic app by using the Azure CLI. Before you start, you need the following items:
The latest Azure CLI extension installed on your local computer.If you're not sure that you have the latest version,check your environment and CLI version.If you don't have the Azure CLI extension,install the extension by following the installation guide for your operating system or platform.NoteIf you get apiperror when you try to install the Azure CLI, make sure that you
have the standard package installer for Python (PIP). This package manager is written
in Python and is used to install software packages. For more information, seeCheck "pip" installation and version.
The latest Azure CLI extension installed on your local computer.
If you're not sure that you have the latest version,check your environment and CLI version.
If you're not sure that you have the latest version,check your environment and CLI version.
If you don't have the Azure CLI extension,install the extension by following the installation guide for your operating system or platform.NoteIf you get apiperror when you try to install the Azure CLI, make sure that you
have the standard package installer for Python (PIP). This package manager is written
in Python and is used to install software packages. For more information, seeCheck "pip" installation and version.
If you don't have the Azure CLI extension,install the extension by following the installation guide for your operating system or platform.
Note
If you get apiperror when you try to install the Azure CLI, make sure that you
have the standard package installer for Python (PIP). This package manager is written
in Python and is used to install software packages. For more information, seeCheck "pip" installation and version.
Thepreviewsingle-tenantAzure Logic Apps (Standard)extension for Azure CLI.If you don't have this extension,install the extension. Although the single-tenant Azure Logic Apps service is already generally available, the single-tenant Azure Logic Apps extension for Azure CLI is still in preview.
Thepreviewsingle-tenantAzure Logic Apps (Standard)extension for Azure CLI.
If you don't have this extension,install the extension. Although the single-tenant Azure Logic Apps service is already generally available, the single-tenant Azure Logic Apps extension for Azure CLI is still in preview.
An Azure resource group to use for deploying your logic app project to Azure.If you don't have this resource group,create the resource group.
An Azure resource group to use for deploying your logic app project to Azure.
If you don't have this resource group,create the resource group.
An Azure storage account to use with your logic app for data and run history retention.If you don't have this storage account,create a storage account.
An Azure storage account to use with your logic app for data and run history retention.
If you don't have this storage account,create a storage account.

On a Windows or Mac operating system, open a command prompt, and enter the following command:python -m pip --versionIf you get apipversion, thenpipis installed. Make sure that you have the most recent version by using the following command:python -m pip install --upgrade pipIf you get errors instead, thenpipisn't installed or added to yourPATHenvironment.
On a Windows or Mac operating system, open a command prompt, and enter the following command:
python -m pip --version
python -m pip --version
If you get apipversion, thenpipis installed. Make sure that you have the most recent version by using the following command:python -m pip install --upgrade pip
If you get apipversion, thenpipis installed. Make sure that you have the most recent version by using the following command:
python -m pip install --upgrade pip
python -m pip install --upgrade pip
If you get errors instead, thenpipisn't installed or added to yourPATHenvironment.
If you get errors instead, thenpipisn't installed or added to yourPATHenvironment.
To installpip,follow thepipinstallation steps for your operating system.
To installpip,follow thepipinstallation steps for your operating system.

Sign in to theAzure portal. In a terminal or command window, confirm that your subscription is active by running the command,az login:az login
Sign in to theAzure portal. In a terminal or command window, confirm that your subscription is active by running the command,az login:
az login
az login
az login
In the terminal or command window, check your version of the Azure CLI version by running the command,az, with the following required parameter:az --version
In the terminal or command window, check your version of the Azure CLI version by running the command,az, with the following required parameter:
az
az --version
az --version
If you don't have the latest Azure CLI version, update your installation by following theinstallation guide for your operating system or platform.For more information about the latest version, review themost recent release notes. For troubleshooting guidance, see the following resources:Azure CLI GitHub issuesAzure CLI documentation
If you don't have the latest Azure CLI version, update your installation by following theinstallation guide for your operating system or platform.
For more information about the latest version, review themost recent release notes. For troubleshooting guidance, see the following resources:
Azure CLI GitHub issues
Azure CLI documentation

Currently, only thepreviewversion for this extension is available. If you didn't install this extension yet, run the command,az extension add, with the following required parameters:
az extension add
az extension add --yes --source "https://aka.ms/logicapp-latest-py2.py3-none-any.whl"
az extension add --yes --source "https://aka.ms/logicapp-latest-py2.py3-none-any.whl"
To get the latest extension, which is version 0.1.2, run these commands to remove the existing extension and then install the latest version from the source:
az extension remove --name logicapp
az extension add --yes --source "https://aka.ms/logicapp-latest-py2.py3-none-any.whl"
az extension remove --name logicapp
az extension add --yes --source "https://aka.ms/logicapp-latest-py2.py3-none-any.whl"
Note
If a new extension version is available, the current and later versions show a message.
While this extension is in preview, you can use the following command to upgrade to the
latest version without manually removing and installing again:
az logicapp upgrade
az logicapp upgrade

If you don't have an existing Azure resource group to use for deployment, create the group by running the command,az group create. Unless you already set a default subscription for your Azure account, make sure to use the--subscriptionparameter with your subscription name or identifier. Otherwise, you don't have to use the--subscriptionparameter.
az group create
--subscription
--subscription
Tip
To set a default subscription, run the following command, and replaceMySubscriptionwith your subscription name or identifier.
MySubscription
az account set --subscription MySubscription
az account set --subscription MySubscription
For example, the following command creates a resource group namedMyResourceGroupNameusing the Azure subscription namedMySubscriptionin the locationeastus:
MyResourceGroupName
MySubscription
eastus
az group create --name MyResourceGroupName 
   --subscription MySubscription 
   --location eastus
az group create --name MyResourceGroupName 
   --subscription MySubscription 
   --location eastus
If your resource group is successfully created, the output shows theprovisioningStateasSucceeded:
provisioningState
Succeeded
<...>
   "name": "testResourceGroup",
   "properties": {
      "provisioningState": "Succeeded"
    },
<...>
<...>
   "name": "testResourceGroup",
   "properties": {
      "provisioningState": "Succeeded"
    },
<...>

Now, you can deploy your zipped artifacts to the Azure resource group that you created.
Run the command,az logicapp deployment, with the following required parameters:
az logicapp deployment
az logicapp deployment source config-zip --name MyLogicAppName 
   --resource-group MyResourceGroupName --subscription MySubscription 
   --src MyBuildArtifact.zip
az logicapp deployment source config-zip --name MyLogicAppName 
   --resource-group MyResourceGroupName --subscription MySubscription 
   --src MyBuildArtifact.zip
After deployment to Azure
Each API connection has access policies. After the zip deployment completes, you must open your Standard logic app resource in the Azure portal, and create access policies for each API connection to set up permissions for the deployed logic app. The zip deployment doesn't create app settings for you. After deployment, you must create these app settings based on thelocal.settings.jsonfile in your logic app project.
Related content
DevOps deployment for single-tenant Azure Logic Apps
We'd like to hear about your experiences with the single-tenant Azure Logic Apps!
For bugs or problems,create your issues in GitHub.
For questions, requests, comments, and other feedback,use this feedback form.
Feedback
Was this page helpful?
Additional resources