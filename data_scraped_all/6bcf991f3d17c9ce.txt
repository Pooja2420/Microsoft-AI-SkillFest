Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Call Azure Functions from workflows in Azure Logic Apps
Article
2024-10-21
1 contributor
In this article
Applies to:Azure Logic Apps (Consumption + Standard)
To run code that performs a specific job in your logic app workflow, you don't have to build a complete app or infrastructure. Instead, you can create and call an Azure function.Azure Functionsprovides serverless computing in the cloud and the capability to perform the following tasks:
Extend your workflow's behavior by running functions created using Node.js or C#.
Perform calculations in your workflow.
Apply advanced formatting or compute fields in your workflow.
This how-to guide shows how to call an existing Azure function from your Consumption or Standard workflow. To run code without using Azure Functions, see the following documentation:
Run code snippets in workflows
Create and run .NET Framework code from Standard workflows
Limitations
Only Consumption workflows support authenticating Azure function calls using a managed identity with Microsoft Entra authentication. Standard workflows aren't currently supported in the section abouthow to enable authentication for function calls.
Only Consumption workflows support authenticating Azure function calls using a managed identity with Microsoft Entra authentication. Standard workflows aren't currently supported in the section abouthow to enable authentication for function calls.
Azure Logic Apps doesn't support using Azure Functions with deployment slots enabled. Although this scenario might sometimes work, this behavior is unpredictable and might result in authorization problems when your workflow tries call the Azure function.
Azure Logic Apps doesn't support using Azure Functions with deployment slots enabled. Although this scenario might sometimes work, this behavior is unpredictable and might result in authorization problems when your workflow tries call the Azure function.
Prerequisites
Azure account and subscription. If you don't have a subscription,sign up for a free Azure account.
Azure account and subscription. If you don't have a subscription,sign up for a free Azure account.
AnAzure function app resource, which contains one or more Azure functions.Your function app resource and logic app resource must use the same Azure subscription.Your function app resource must use either.NETorNode.jsas the runtime stack.When you add a new function to your function app, you can select eitherC#orJavaScript.
AnAzure function app resource, which contains one or more Azure functions.
Your function app resource and logic app resource must use the same Azure subscription.
Your function app resource and logic app resource must use the same Azure subscription.
Your function app resource must use either.NETorNode.jsas the runtime stack.
Your function app resource must use either.NETorNode.jsas the runtime stack.
When you add a new function to your function app, you can select eitherC#orJavaScript.
When you add a new function to your function app, you can select eitherC#orJavaScript.
The Azure function that you want to call. You can create this function using the following tools:Azure portalVisual StudioVisual Studio CodeAzure CLIAzure PowerShellARM templateYour function must use theHTTP triggertemplate.TheHTTP triggertemplate can accept content that hasapplication/jsontype from your logic app workflow. When you add a function to your workflow, the designer shows custom functions that are created from this template within your Azure subscription.Your function code must include the response and payload that you want returned to your workflow after your function completes. Thecontextobject refers to the message that your workflow sends through the Azure Functions action parameter namedRequest Bodylater in this guide.This guide uses the following sample function, which is namedFabrikamAzureFunction:module.exports = function (context, data) {

   var input = data;

   // Function processing logic
   // Function response for later use
   context.res = {
      body: {
        content:"Thank you for your feedback: " + input
      }
   };
   context.done();
}To access thecontextobject's properties from inside your function, use the following syntax:context.body.<property-name>For example, to reference thecontentproperty in thecontextobject, use the following syntax:context.body.contentThis code also includes aninputvariable, which stores the value from thedataparameter so that your function can perform operations on that value. Within JavaScript functions, thedatavariable is also a shortcut forcontext.body.NoteThebodyproperty here applies to thecontextobject and isn't the same as
theBodytoken in an action's output, which you might also pass to your function.Your function can't use custom routes unless you defined anOpenAPI definition.When you have an OpenAPI definition for your function, the workflow designer gives you a richer experience when you work with function parameters. Before your workflow can find and access functions that have OpenAPI definitions,set up your function app by following these steps.
The Azure function that you want to call. You can create this function using the following tools:
Azure portal
Azure portal
Visual Studio
Visual Studio
Visual Studio Code
Visual Studio Code
Azure CLI
Azure CLI
Azure PowerShell
Azure PowerShell
ARM template
ARM template
Your function must use theHTTP triggertemplate.TheHTTP triggertemplate can accept content that hasapplication/jsontype from your logic app workflow. When you add a function to your workflow, the designer shows custom functions that are created from this template within your Azure subscription.
Your function must use theHTTP triggertemplate.
TheHTTP triggertemplate can accept content that hasapplication/jsontype from your logic app workflow. When you add a function to your workflow, the designer shows custom functions that are created from this template within your Azure subscription.
application/json
Your function code must include the response and payload that you want returned to your workflow after your function completes. Thecontextobject refers to the message that your workflow sends through the Azure Functions action parameter namedRequest Bodylater in this guide.This guide uses the following sample function, which is namedFabrikamAzureFunction:module.exports = function (context, data) {

   var input = data;

   // Function processing logic
   // Function response for later use
   context.res = {
      body: {
        content:"Thank you for your feedback: " + input
      }
   };
   context.done();
}To access thecontextobject's properties from inside your function, use the following syntax:context.body.<property-name>For example, to reference thecontentproperty in thecontextobject, use the following syntax:context.body.contentThis code also includes aninputvariable, which stores the value from thedataparameter so that your function can perform operations on that value. Within JavaScript functions, thedatavariable is also a shortcut forcontext.body.NoteThebodyproperty here applies to thecontextobject and isn't the same as
theBodytoken in an action's output, which you might also pass to your function.
Your function code must include the response and payload that you want returned to your workflow after your function completes. Thecontextobject refers to the message that your workflow sends through the Azure Functions action parameter namedRequest Bodylater in this guide.
context
This guide uses the following sample function, which is namedFabrikamAzureFunction:
module.exports = function (context, data) {

   var input = data;

   // Function processing logic
   // Function response for later use
   context.res = {
      body: {
        content:"Thank you for your feedback: " + input
      }
   };
   context.done();
}
module.exports = function (context, data) {

   var input = data;

   // Function processing logic
   // Function response for later use
   context.res = {
      body: {
        content:"Thank you for your feedback: " + input
      }
   };
   context.done();
}
To access thecontextobject's properties from inside your function, use the following syntax:
context
context.body.<property-name>
context.body.<property-name>
For example, to reference thecontentproperty in thecontextobject, use the following syntax:
content
context
context.body.content
context.body.content
This code also includes aninputvariable, which stores the value from thedataparameter so that your function can perform operations on that value. Within JavaScript functions, thedatavariable is also a shortcut forcontext.body.
input
data
data
context.body
Note
Thebodyproperty here applies to thecontextobject and isn't the same as
theBodytoken in an action's output, which you might also pass to your function.
body
context
Your function can't use custom routes unless you defined anOpenAPI definition.When you have an OpenAPI definition for your function, the workflow designer gives you a richer experience when you work with function parameters. Before your workflow can find and access functions that have OpenAPI definitions,set up your function app by following these steps.
Your function can't use custom routes unless you defined anOpenAPI definition.
When you have an OpenAPI definition for your function, the workflow designer gives you a richer experience when you work with function parameters. Before your workflow can find and access functions that have OpenAPI definitions,set up your function app by following these steps.
A Consumption or Standard logic app workflow that starts with any trigger.The examples in this guide use the Office 365 Outlook trigger namedWhen a new email arrives.
A Consumption or Standard logic app workflow that starts with any trigger.
The examples in this guide use the Office 365 Outlook trigger namedWhen a new email arrives.
To create and call an Azure function that calls another workflow, make sure that secondary workflow starts with a trigger that provides a callable endpoint.For example, you can start the workflow with the generalHTTPorRequesttrigger, or you can use a service-based trigger, such asAzure QueuesorEvent Grid. Inside your function, send an HTTP POST request to the trigger's URL and include the payload that you want your secondary workflow to process. For more information, seeCall, trigger, or nest logic app workflows.
To create and call an Azure function that calls another workflow, make sure that secondary workflow starts with a trigger that provides a callable endpoint.
For example, you can start the workflow with the generalHTTPorRequesttrigger, or you can use a service-based trigger, such asAzure QueuesorEvent Grid. Inside your function, send an HTTP POST request to the trigger's URL and include the payload that you want your secondary workflow to process. For more information, seeCall, trigger, or nest logic app workflows.
Tips for working with Azure functions

Find functions with OpenAPI definitions
To set up your function app so that your workflow can find and use functions that have OpenAPI definitions, follow these steps:
In theAzure portal, open your function app. Make sure that the function app is actively running.
In theAzure portal, open your function app. Make sure that the function app is actively running.
On your function app, set upCross-Origin Resource Sharing (CORS)so that all origins are permitted by following these steps:On the function app menu, underAPI, selectCORS.UnderAllowed Origins, add the asterisk (*) wildcard character, but remove all the other origins in the list, and selectSave.
On your function app, set upCross-Origin Resource Sharing (CORS)so that all origins are permitted by following these steps:
On the function app menu, underAPI, selectCORS.
On the function app menu, underAPI, selectCORS.
UnderAllowed Origins, add the asterisk (*) wildcard character, but remove all the other origins in the list, and selectSave.
UnderAllowed Origins, add the asterisk (*) wildcard character, but remove all the other origins in the list, and selectSave.
*

Access property values inside HTTP requests
Webhook-based functions can accept HTTP requests as inputs and pass those requests to other functions. For example, although Azure Logic Apps hasfunctions that convert DateTime values, this basic sample JavaScript function shows how you can access a property inside an HTTP request object that's passed to the function and perform operations on that property value. To access properties inside objects, this example uses thedot (.) operator:
function convertToDateString(request, response){
   var data = request.body;
   response = {
      body: data.date.ToDateString();
   }
}
function convertToDateString(request, response){
   var data = request.body;
   response = {
      body: data.date.ToDateString();
   }
}
Here's what happens inside this function:
The function creates adatavariable, and then assigns thebodyobject, which is inside therequestobject, to the variable. The function uses the dot (.) operator to reference thebodyobject inside therequestobject:var data = request.body;
The function creates adatavariable, and then assigns thebodyobject, which is inside therequestobject, to the variable. The function uses the dot (.) operator to reference thebodyobject inside therequestobject:
data
body
request
body
request
var data = request.body;
var data = request.body;
The function can now access thedateproperty through thedatavariable, and convert the property value fromDateTimetype toDateStringtype by calling theToDateString()function. The function also returns the result through thebodyproperty in the function's response:body: data.date.ToDateString();
The function can now access thedateproperty through thedatavariable, and convert the property value fromDateTimetype toDateStringtype by calling theToDateString()function. The function also returns the result through thebodyproperty in the function's response:
date
data
ToDateString()
body
body: data.date.ToDateString();
body: data.date.ToDateString();
After you create your function in Azure, follow the steps toadd an Azure function to your workflow.
Pass URI parameters to a function
If you have to pass a URI parameter to your function, you can use query parameters in the function's endpoint URL.
With the workflow designer open for your logic app, and the function information pane open, from theAdvanced parameterslist, selectQueries.A table appears where you can enter parameter input as key-value pairs.
With the workflow designer open for your logic app, and the function information pane open, from theAdvanced parameterslist, selectQueries.
A table appears where you can enter parameter input as key-value pairs.
Enter the key-value pair for your parameter, for example:
Enter the key-value pair for your parameter, for example:


Add a function to your workflow (Consumption + Standard workflows)
To call an Azure function from your workflow, you can add that functions like any other action in the designer.
Consumption
Standard
In theAzure portal, open your Consumption logic app workflow in the designer.
In theAzure portal, open your Consumption logic app workflow in the designer.
In the designer,follow these general steps to add theAzure Functionsaction namedChoose an Azure function.
In the designer,follow these general steps to add theAzure Functionsaction namedChoose an Azure function.
In theAdd an actionpane, follow these steps:From the function apps list, select your function app, select the function, and then selectAdd action, for example:
In theAdd an actionpane, follow these steps:
From the function apps list, select your function app, select the function, and then selectAdd action, for example:
From the function apps list, select your function app, select the function, and then selectAdd action, for example:

After the function's information box appears, follow these steps:ForRequest Body, provide your function's input, which must use the format for a JavaScript Object Notation (JSON) object, for example:{"context": <selected-input> }This input is thecontext objectpayload or message that your workflow sends to your function.To select tokens that represent outputs from previous steps, select inside theRequest Bodybox, and then select the option to open the dynamic content list (lightning icon).To create an expression, select inside theRequest Bodybox, and then select option to open the expression editor (formula icon).The following example specifies a JSON object with thecontentattribute and a token representing theFromoutput from the email trigger as theRequest Bodyvalue:Here, the context object isn't cast as a string, so the object's content gets added directly to the JSON payload. Here's the complete example:If you provide a context object other than a JSON token that passes a string, a JSON object, or a JSON array, you get an error. However, you can cast the context object as a string by enclosing the token in quotation marks (""), for example, if you wanted to use theReceived Timetoken:To specify other details such as the method to use, request headers, query parameters, or authentication, open theAdvanced parameterslist, and select the parameters that you want. For authentication, your options differ based on your selected function. For more information, reviewEnable authentication for functions.
After the function's information box appears, follow these steps:
ForRequest Body, provide your function's input, which must use the format for a JavaScript Object Notation (JSON) object, for example:{"context": <selected-input> }This input is thecontext objectpayload or message that your workflow sends to your function.To select tokens that represent outputs from previous steps, select inside theRequest Bodybox, and then select the option to open the dynamic content list (lightning icon).To create an expression, select inside theRequest Bodybox, and then select option to open the expression editor (formula icon).The following example specifies a JSON object with thecontentattribute and a token representing theFromoutput from the email trigger as theRequest Bodyvalue:Here, the context object isn't cast as a string, so the object's content gets added directly to the JSON payload. Here's the complete example:If you provide a context object other than a JSON token that passes a string, a JSON object, or a JSON array, you get an error. However, you can cast the context object as a string by enclosing the token in quotation marks (""), for example, if you wanted to use theReceived Timetoken:
ForRequest Body, provide your function's input, which must use the format for a JavaScript Object Notation (JSON) object, for example:
{"context": <selected-input> }
{"context": <selected-input> }
This input is thecontext objectpayload or message that your workflow sends to your function.
To select tokens that represent outputs from previous steps, select inside theRequest Bodybox, and then select the option to open the dynamic content list (lightning icon).
To select tokens that represent outputs from previous steps, select inside theRequest Bodybox, and then select the option to open the dynamic content list (lightning icon).
To create an expression, select inside theRequest Bodybox, and then select option to open the expression editor (formula icon).
To create an expression, select inside theRequest Bodybox, and then select option to open the expression editor (formula icon).
The following example specifies a JSON object with thecontentattribute and a token representing theFromoutput from the email trigger as theRequest Bodyvalue:
content

Here, the context object isn't cast as a string, so the object's content gets added directly to the JSON payload. Here's the complete example:

If you provide a context object other than a JSON token that passes a string, a JSON object, or a JSON array, you get an error. However, you can cast the context object as a string by enclosing the token in quotation marks (""), for example, if you wanted to use theReceived Timetoken:

To specify other details such as the method to use, request headers, query parameters, or authentication, open theAdvanced parameterslist, and select the parameters that you want. For authentication, your options differ based on your selected function. For more information, reviewEnable authentication for functions.
To specify other details such as the method to use, request headers, query parameters, or authentication, open theAdvanced parameterslist, and select the parameters that you want. For authentication, your options differ based on your selected function. For more information, reviewEnable authentication for functions.
In theAzure portal, open your Standard logic app workflow in the designer.
In theAzure portal, open your Standard logic app workflow in the designer.
In the designer,follow these general steps to add theAzure Functionsaction namedCall an Azure function.
In the designer,follow these general steps to add theAzure Functionsaction namedCall an Azure function.
In theCreate Connectionpane, follow these steps:Provide aConnection Namefor the connection to your function app.From the function apps list, select your function app, select the function, and then selectCreate new, for example:
In theCreate Connectionpane, follow these steps:
Provide aConnection Namefor the connection to your function app.
Provide aConnection Namefor the connection to your function app.
From the function apps list, select your function app, select the function, and then selectCreate new, for example:
From the function apps list, select your function app, select the function, and then selectCreate new, for example:

After the function's information box appears, follow these steps:From theMethodlist, select the HTTP method required to call the selected function.ForRequest Body, provide your function's input, which must use the format for a JavaScript Object Notation (JSON) object, for example:{"context": <selected-input> }This input is thecontext objectpayload or message that your workflow sends to your function.To select tokens that represent outputs from previous steps, select inside theRequest Bodybox, and then select the option to open the dynamic content list (lightning icon).To create an expression, select inside theRequest Bodybox, and then select option to open the expression editor (formula icon).The following example specifies a JSON object with thecontentattribute and a token representing theFromoutput from the email trigger as theRequest Bodyvalue:Here, the context object isn't cast as a string, so the object's content gets added directly to the JSON payload. Here's the complete example:If you provide a context object other than a JSON token that passes a string, a JSON object, or a JSON array, you get an error. However, you can cast the context object as a string by enclosing the token in quotation marks (""), for example, if you wanted to use theReceived Timetoken:To specify other details such as the method to use, request headers, query parameters, or authentication, open theAdvanced parameterslist, and select the parameters that you want. For authentication, your options differ based on your selected function. For more information, reviewEnable authentication for functions.
After the function's information box appears, follow these steps:
From theMethodlist, select the HTTP method required to call the selected function.
From theMethodlist, select the HTTP method required to call the selected function.
ForRequest Body, provide your function's input, which must use the format for a JavaScript Object Notation (JSON) object, for example:{"context": <selected-input> }This input is thecontext objectpayload or message that your workflow sends to your function.To select tokens that represent outputs from previous steps, select inside theRequest Bodybox, and then select the option to open the dynamic content list (lightning icon).To create an expression, select inside theRequest Bodybox, and then select option to open the expression editor (formula icon).The following example specifies a JSON object with thecontentattribute and a token representing theFromoutput from the email trigger as theRequest Bodyvalue:Here, the context object isn't cast as a string, so the object's content gets added directly to the JSON payload. Here's the complete example:If you provide a context object other than a JSON token that passes a string, a JSON object, or a JSON array, you get an error. However, you can cast the context object as a string by enclosing the token in quotation marks (""), for example, if you wanted to use theReceived Timetoken:
ForRequest Body, provide your function's input, which must use the format for a JavaScript Object Notation (JSON) object, for example:
{"context": <selected-input> }
{"context": <selected-input> }
This input is thecontext objectpayload or message that your workflow sends to your function.
To select tokens that represent outputs from previous steps, select inside theRequest Bodybox, and then select the option to open the dynamic content list (lightning icon).
To select tokens that represent outputs from previous steps, select inside theRequest Bodybox, and then select the option to open the dynamic content list (lightning icon).
To create an expression, select inside theRequest Bodybox, and then select option to open the expression editor (formula icon).
To create an expression, select inside theRequest Bodybox, and then select option to open the expression editor (formula icon).
The following example specifies a JSON object with thecontentattribute and a token representing theFromoutput from the email trigger as theRequest Bodyvalue:
content

Here, the context object isn't cast as a string, so the object's content gets added directly to the JSON payload. Here's the complete example:

If you provide a context object other than a JSON token that passes a string, a JSON object, or a JSON array, you get an error. However, you can cast the context object as a string by enclosing the token in quotation marks (""), for example, if you wanted to use theReceived Timetoken:

To specify other details such as the method to use, request headers, query parameters, or authentication, open theAdvanced parameterslist, and select the parameters that you want. For authentication, your options differ based on your selected function. For more information, reviewEnable authentication for functions.
To specify other details such as the method to use, request headers, query parameters, or authentication, open theAdvanced parameterslist, and select the parameters that you want. For authentication, your options differ based on your selected function. For more information, reviewEnable authentication for functions.

Enable authentication for Azure function calls (Consumption workflows only)
Your Consumption workflow can use amanaged identityto authenticate an Azure function call and access resources protected by Microsoft Entra ID. The managed identity can authenticate access without you having to sign in and provide credentials or secrets. Azure manages this identity for you and helps secure your credentials because you don't have to provide or rotate secrets. You can set up the system-assigned identity or a manually created, user-assigned identity at the logic app resource level. The Azure function that's called from your workflow can use the same managed identity for authentication.
Note
Only Consumption workflows support authentication for an Azure function call using
a managed identity and Microsoft Entra authentication. Standard workflows currently
don't include this support when you use the action to call an Azure function.
For more information, see the following documentation:
Authenticate access with managed identities
Add authentication to outbound calls
To set up your function app and function so they can use your Consumption logic app's managed identity, follow these high-level steps:
Enable and set up your logic app's managed identity.
Enable and set up your logic app's managed identity.
Set up your function for anonymous authentication.
Set up your function for anonymous authentication.
Find the required values to set up Microsoft Entra authentication.
Find the required values to set up Microsoft Entra authentication.
Create an app registration for your function app.
Create an app registration for your function app.

Set up your function for anonymous authentication (Consumption workflows only)
For your function to use your Consumption logic app's managed identity, you must set your function's authentication level toanonymous. Otherwise, your workflow throws aBadRequesterror.
anonymous
In theAzure portal, find and select your function app.The following steps use an example function app namedFabrikamFunctionApp.
In theAzure portal, find and select your function app.
The following steps use an example function app namedFabrikamFunctionApp.
On the function app resource menu, underDevelopment tools, selectAdvanced Tools>Go.
On the function app resource menu, underDevelopment tools, selectAdvanced Tools>Go.

After theKudu Pluspage opens, on the Kudu website's title bar, from theDebug Consolemenu, selectCMD.
After theKudu Pluspage opens, on the Kudu website's title bar, from theDebug Consolemenu, selectCMD.

After the next page appears, from the folder list, selectsite>wwwroot>your-function.The following steps use an example function namedFabrikamAzureFunction.
After the next page appears, from the folder list, selectsite>wwwroot>your-function.
The following steps use an example function namedFabrikamAzureFunction.

Open thefunction.jsonfile for editing.
Open thefunction.jsonfile for editing.

In thebindingsobject, check whether theauthLevelproperty exists. If the property exists, set the property value toanonymous. Otherwise, add that property, and set the value.
In thebindingsobject, check whether theauthLevelproperty exists. If the property exists, set the property value toanonymous. Otherwise, add that property, and set the value.
anonymous

When you're done, save your settings. Continue to the next section.
When you're done, save your settings. Continue to the next section.

Find the required values to set up Microsoft Entra authentication (Consumption workflows only)
Before you can set up your function app to use the managed identity and Microsoft Entra authentication, you need to find and save the following values by following the steps in this section.
Find the tenant ID for your Microsoft Entra tenant.
Find the tenant ID for your Microsoft Entra tenant.
Find the object ID for your managed identity.
Find the object ID for your managed identity.
Find the application ID for the Enterprise application associated with your managed identity.
Find the application ID for the Enterprise application associated with your managed identity.

Either run the PowerShell command namedGet-AzureAccount, or in the Azure portal, follow these steps:
In theAzure portal, open your Microsoft Entra tenant.This guide usesFabrikamas the example tenant.
In theAzure portal, open your Microsoft Entra tenant.
This guide usesFabrikamas the example tenant.
On the tenant menu, selectOverview.
On the tenant menu, selectOverview.
Copy and save your tenant ID for later use, for example:
Copy and save your tenant ID for later use, for example:


After you enable the managed identity for your Consumption logic app resource, find the object for your managed identity. You'll use this ID to find the associated Enterprise application in your Microsoft Entra tenant.
On the logic app menu, underSettings, selectIdentity, and then select eitherSystem assignedorUser assigned.System assignedCopy the identity'sObject (principal) ID:User assignedSelect the identity:Copy the identity'sObject (principal) ID:
On the logic app menu, underSettings, selectIdentity, and then select eitherSystem assignedorUser assigned.
System assignedCopy the identity'sObject (principal) ID:
System assigned
Copy the identity'sObject (principal) ID:

User assignedSelect the identity:Copy the identity'sObject (principal) ID:
User assigned
Select the identity:
Select the identity:

Copy the identity'sObject (principal) ID:
Copy the identity'sObject (principal) ID:


Find the application ID for the Azure Enterprise application associated with your managed identity
When you enable a managed identity on your logic app resource, Azure automatically creates an associatedAzure Enterprise applicationthat has the same name. You now need to find the associated Enterprise application and copy itsApplication ID. Later, you use this application ID to add an identity provider for your function app by creating an app registration.
In theAzure portal, find and open your Microsoft Entra tenant.
In theAzure portal, find and open your Microsoft Entra tenant.
On the tenant menu, underManage, selectEnterprise applications.
On the tenant menu, underManage, selectEnterprise applications.
On theAll applicationspage, in the search box, enter the object ID for your managed identity. From the results, find the matching enterprise application, and copy theApplication ID:
On theAll applicationspage, in the search box, enter the object ID for your managed identity. From the results, find the matching enterprise application, and copy theApplication ID:

Now, use the copied application ID toadd an identity provider to your function app.
Now, use the copied application ID toadd an identity provider to your function app.

Add identity provider for your function app (Consumption workflows only)
Now that you have the tenant ID and the application ID, you can set up your function app to use Microsoft Entra authentication by adding an identity provider and creating an app registration.
In theAzure portal, open your function app.
In theAzure portal, open your function app.
On the function app menu, underSettings, selectAuthentication, and then selectAdd identity provider.
On the function app menu, underSettings, selectAuthentication, and then selectAdd identity provider.

On theAdd an identity providerpane, underBasics, from theIdentity providerlist, selectMicrosoft.
On theAdd an identity providerpane, underBasics, from theIdentity providerlist, selectMicrosoft.
UnderApp registration, forApp registration type, selectProvide the details of an existing app registration, and enter the values that you previously saved.PropertyRequiredValueDescriptionApplication (client) IDYes<application-ID>The unique identifier to use for this app registration. For this example, use the application ID that you copied for the Enterprise application associated with your managed identity.Client secretOptional, but recommended<client-secret>The secret value that the app uses to prove its identity when requesting a token. The client secret is created and stored in your app's configuration as a slot-stickyapplication settingnamedMICROSOFT_PROVIDER_AUTHENTICATION_SECRET.- Make sure to regularly rotate secrets and store them securely. For example, manage your secrets in Azure Key Vault where you can use a managed identity to retrieve the key without exposing the value to an unauthorized user. You can update this setting to useKey Vault references.- If you provide a client secret value, sign-in operations use the hybrid flow, returning both access and refresh tokens.- If you don't provide a client secret, sign-in operations use theOAuth 2.0 implicit grant flow. This method directly returns only an ID token or access token. These tokens are sent by the provider and stored in the EasyAuth token store.Important: Due to security risks, the implicit grant flow isno longer a suitable authentication method. Instead, use eitherauthorization code flow with Proof Key for Code Exchange (PKCE)orsingle-page application (SPA) authorization codes.Issuer URLNo<authentication-endpoint-URL>/<Microsoft-Entra-tenant-ID>/v2.0This URL redirects users to the correct Microsoft Entra tenant and downloads the appropriate metadata to determine the appropriate token signing keys and token issuer claim value. For apps that use Azure AD v1, omit/v2.0from the URL.For this scenario, use the following URL:https://sts.windows.net/<Microsoft-Entra-tenant-ID>Allowed token audiencesNo<application-ID-URI>The application ID URI (resource ID) for the function app. For a cloud or server app where you want to allow authentication tokens from a web app, add the application ID URI for the web app. The configured client ID is always implicitly considered as an allowed audience.For this scenario, the value ishttps://management.azure.com. Later, you can use the same URI in theAudienceproperty when youset up your function action in your workflow to use the managed identity.Important: The application ID URI (resource ID) must exactly match the value that Microsoft Entra ID expects, including any required trailing slashes.At this point, your version looks similar to this example:If you're setting up your function app with an identity provider for the first time, theApp Service authentication settingssection also appears. These options determine how your function app responds to unauthenticated requests. The default selection redirects all requests to log in with the new identity provider. You can customize this behavior now or adjust these settings later from the mainAuthenticationpage by selectingEditnext toAuthentication settings. To learn more about these options, reviewAuthentication flow - Authentication and authorization in Azure App Service and Azure Functions.Otherwise, you can continue with the next step.
UnderApp registration, forApp registration type, selectProvide the details of an existing app registration, and enter the values that you previously saved.
https://sts.windows.net/
https://management.azure.com
At this point, your version looks similar to this example:

If you're setting up your function app with an identity provider for the first time, theApp Service authentication settingssection also appears. These options determine how your function app responds to unauthenticated requests. The default selection redirects all requests to log in with the new identity provider. You can customize this behavior now or adjust these settings later from the mainAuthenticationpage by selectingEditnext toAuthentication settings. To learn more about these options, reviewAuthentication flow - Authentication and authorization in Azure App Service and Azure Functions.
Otherwise, you can continue with the next step.
To finish creating the app registration, selectAdd.When you're done, theAuthenticationpage now lists the identity provider and the app registration's application (client) ID. Your function app can now use this app registration for authentication.
To finish creating the app registration, selectAdd.
When you're done, theAuthenticationpage now lists the identity provider and the app registration's application (client) ID. Your function app can now use this app registration for authentication.
Copy the app registration'sApp (client) IDto use later in the Azure Functions action'sAudienceproperty for your workflow.
Copy the app registration'sApp (client) IDto use later in the Azure Functions action'sAudienceproperty for your workflow.

Return to the designer and follow thesteps to authenticate access with the managed identityby using the built-in Azure Functions action.
Return to the designer and follow thesteps to authenticate access with the managed identityby using the built-in Azure Functions action.
Next steps
Authentication access to Azure resources with managed identities in Azure Logic Apps
Feedback
Was this page helpful?
Additional resources