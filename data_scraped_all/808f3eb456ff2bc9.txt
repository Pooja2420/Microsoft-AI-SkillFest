Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Use client-side encryption with Always Encrypted for Azure Cosmos DB
Article
2025-04-18
7 contributors
In this article
APPLIES TO:NoSQL
Important
A breaking change has been introduced with the 1.0 release of our encryption packages. If you created data encryption keys and encryption-enabled containers with prior versions, you'll need to re-create your databases and containers after migrating your client code to 1.0 packages.
Always Encrypted is a feature designed to protect sensitive data, such as credit card numbers or national/regional identification numbers (for example, U.S. social security numbers), stored in Azure Cosmos DB. Always Encrypted allows clients to encrypt sensitive data inside client applications and never reveal the encryption keys to the database.
Always Encrypted brings client-side encryption capabilities to Azure Cosmos DB. Encrypting your data client-side can be required in the following scenarios:
Protecting sensitive data that has specific confidentiality characteristics: Always Encrypted allows clients to encrypt sensitive data inside their applications and never reveal the plain text data or encryption keys to the Azure Cosmos DB service.
Implementing per-property access control: Because the encryption is controlled with keys that you own and manage from Azure Key Vault, you can apply access policies to control which sensitive properties each client has access to.
Concepts
Always Encrypted for Azure Cosmos DB introduces some new concepts that are involved in the configuration of your client-side encryption.
Encryption keys
When using Always Encrypted, data is encrypted with data encryption keys (DEK) that should be created ahead. These DEKs are stored in the Azure Cosmos DB service and are defined at the database level, so a DEK can be shared across multiple containers. The creation of the DEKs is done client-side by using the Azure Cosmos DB SDK.
You can:
Create one DEK per property to encrypt, or
Use the same DEK to encrypt multiple properties.
Note
Resource limit for Client Encryption Key is 20
Before DEKs get stored in Azure Cosmos DB, they're wrapped by a customer-managed key (CMK). By controlling the wrapping and unwrapping of DEKs, CMKs effectively control the access to the data that's encrypted with their corresponding DEKs. CMK storage is designed as an extensible, with a default implementation that expects them to be stored in Azure Key Vault.

Encryption policy
Similar to anindexing policy, an encryption policy is a container-level specification describing how JSON properties should be encrypted. This policy must be provided when the container is created and it's immutable. In the current release, you can't update the encryption policy.
For each property that you want to encrypt, the encryption policy defines:
The path of the property in the form of/property. Only top-level paths are currently supported, nested paths such as/path/to/propertyare not supported.
/property
/path/to/property
The ID of theDEKto use when encrypting and decrypting the property.
An encryption type. It can be either randomized or deterministic.
The encryption algorithm to use when encrypting the property. The specified algorithm can override the algorithm defined when creating the key if they're compatible.
The Azure Cosmos DB service never sees the plain text of properties encrypted with Always Encrypted. However, it still supports some querying capabilities over the encrypted data, depending on the encryption type used for a property. Always Encrypted supports the following two types of encryptions:
Deterministic encryption:It always generates the same encrypted value for any given plain text value and encryption configuration. Using deterministic encryption allows queries to perform equality filters on encrypted properties. However, it may allow attackers to guess information about encrypted values by examining patterns in the encrypted property. This is especially true if there's a small set of possible encrypted values, such as True/False, or North/South/East/West region.
Deterministic encryption:It always generates the same encrypted value for any given plain text value and encryption configuration. Using deterministic encryption allows queries to perform equality filters on encrypted properties. However, it may allow attackers to guess information about encrypted values by examining patterns in the encrypted property. This is especially true if there's a small set of possible encrypted values, such as True/False, or North/South/East/West region.
Randomized encryption:It uses a method that encrypts data in a less predictable manner. Randomized encryption is more secure, but prevents queries from filtering on encrypted properties.
Randomized encryption:It uses a method that encrypts data in a less predictable manner. Randomized encryption is more secure, but prevents queries from filtering on encrypted properties.
SeeGenerating the initialization vector (IV)to learn more about deterministic and randomized encryption in Always Encrypted.
Setup Azure Key Vault
The first step to get started with Always Encrypted is to create your CMKs in Azure Key Vault:
Create a new Azure Key Vault instance or browse to an existing one.
Create a new key in theKeyssection.
Once the key is created, browse to its current version, and copy its full key identifier:https://<my-key-vault>.vault.azure.net/keys/<key>/<version>.
https://<my-key-vault>.vault.azure.net/keys/<key>/<version>
Next, you need to configure how the Azure Cosmos DB SDK will access your Azure Key Vault instance. This authentication is done through a Microsoft Entra identity. Most likely, you'll use the identity of a Microsoft Entra application or amanaged identityas the proxy between your client code and your Azure Key Vault instance, although any kind of identity could be used. Use the following steps to use your Microsoft Entra identity as the proxy:
From your Azure Key Vault instance, browse to theAccess policiessection, and add a new policy:InKey permissions, selectGet,List,Unwrap Key,Wrap Key,VerifyandSign.InSelect principal, search for your Microsoft Entra identity.
From your Azure Key Vault instance, browse to theAccess policiessection, and add a new policy:
InKey permissions, selectGet,List,Unwrap Key,Wrap Key,VerifyandSign.
InSelect principal, search for your Microsoft Entra identity.
Protect your CMK from accidental deletion
To make sure you don't lose access to your encrypted data after accidental deletion of your CMK, it's recommended to set two properties on your Azure Key Vault instance:Soft DeleteandPurge Protection.
If you create a new Azure Key Vault instance, enable these properties during creation:

If you're using an existing Azure Key Vault instance, you can verify that these properties are enabled by looking at thePropertiessection on the Azure portal. If any of these properties isn't enabled, see the "Enabling soft-delete" and "Enabling Purge Protection" sections in one of the following articles:
How to use soft-delete with PowerShell
How to use soft-delete with Azure CLI
Initialize the SDK
Note
Always Encrypted for Azure Cosmos DB is currently supported:
In.NETwith theMicrosoft.Azure.Cosmos.Encryption package.
InJavawith theazure.cosmos.encryption package.
.NET
Java
NodeJS
To use Always Encrypted, an instance of aKeyResolvermust be attached to your Azure Cosmos DB SDK instance. This class, defined in theAzure.Security.KeyVault.Keys.Cryptographynamespace, is used to interact with the key store hosting your CMKs.
KeyResolver
Azure.Security.KeyVault.Keys.Cryptography
The following snippets use theDefaultAzureCredentialclass to retrieve the Microsoft Entra identity to use when accessing your Azure Key Vault instance. You can find examples of creating different kinds ofTokenCredentialclasseshere.
DefaultAzureCredential
TokenCredential
Note
You'll need the additionalAzure.Identity packageto access theTokenCredentialclasses.
TokenCredential
var tokenCredential = new DefaultAzureCredential();
var keyResolver = new KeyResolver(tokenCredential);
var client = new CosmosClient("<connection-string>")
    .WithEncryption(keyResolver, KeyEncryptionKeyResolverName.AzureKeyVault);
var tokenCredential = new DefaultAzureCredential();
var keyResolver = new KeyResolver(tokenCredential);
var client = new CosmosClient("<connection-string>")
    .WithEncryption(keyResolver, KeyEncryptionKeyResolverName.AzureKeyVault);
To use Always Encrypted, an instance of aKeyEncryptionKeyClientBuildermust be attached to your Azure Cosmos DB SDK instance. This class, defined in thecom.azure.security.keyvault.keys.cryptographynamespace, is used to interact with the key store hosting your CMKs.
KeyEncryptionKeyClientBuilder
com.azure.security.keyvault.keys.cryptography
The following snippets use theDefaultAzureCredentialclass to retrieve the Microsoft Entra identity to use when accessing your Azure Key Vault instance. You can find examples of creating different kinds ofTokenCredentialclasseshere.
DefaultAzureCredential
TokenCredential
TokenCredential tokenCredential = new DefaultAzureCredentialBuilder()
    .build();
KeyEncryptionKeyClientBuilder keyEncryptionKeyClientBuilder =
    new KeyEncryptionKeyClientBuilder().credential(tokenCredentials);
CosmosAsyncClient client = new CosmosClientBuilder()
    .endpoint("<endpoint>")
    .key("<primary-key>")
    .buildAsyncClient();
CosmosEncryptionAsyncClient cosmosEncryptionAsyncClient =
    new CosmosEncryptionClientBuilder().cosmosAsyncClient(client).keyEncryptionKeyResolver(keyEncryptionKeyClientBuilder)
        .keyEncryptionKeyResolverName(CosmosEncryptionClientBuilder.KEY_RESOLVER_NAME_AZURE_KEY_VAULT).buildAsyncClient();
TokenCredential tokenCredential = new DefaultAzureCredentialBuilder()
    .build();
KeyEncryptionKeyClientBuilder keyEncryptionKeyClientBuilder =
    new KeyEncryptionKeyClientBuilder().credential(tokenCredentials);
CosmosAsyncClient client = new CosmosClientBuilder()
    .endpoint("<endpoint>")
    .key("<primary-key>")
    .buildAsyncClient();
CosmosEncryptionAsyncClient cosmosEncryptionAsyncClient =
    new CosmosEncryptionClientBuilder().cosmosAsyncClient(client).keyEncryptionKeyResolver(keyEncryptionKeyClientBuilder)
        .keyEncryptionKeyResolverName(CosmosEncryptionClientBuilder.KEY_RESOLVER_NAME_AZURE_KEY_VAULT).buildAsyncClient();
Note
Unlike .NET and Java SDK, there's no separate package for Encryption in JS. Same package can be used to encrypted and non-encrypted operations.
To use Always Encrypted in JS SDK, an instance ofEncryptionKeyResolvermust be passed inClientEncryptionOptionsduring Azure Cosmos DB SDK instance initialization. This class is used to interact with the key store hosting your CMKs.
EncryptionKeyResolver
ClientEncryptionOptions
The following snippets use theDefaultAzureCredentialclass to retrieve the Microsoft Entra identity to use when accessing your Azure Key Vault instance. You can find examples of creating different kinds ofTokenCredentialclasseshere.
DefaultAzureCredential
TokenCredential
Note
You'll need the additional@azure/identitypackage to access theTokenCredentialclasses.
TokenCredential
const credentials = new DefaultAzureCredential();
const keyResolver = new AzureKeyVaultEncryptionKeyResolver(credentials);
const cosmosClient = new CosmosClient({connectionString: "<ConnectionString>", clientEncryptionOptions: { keyEncryptionKeyResolver: keyResolver }});
const credentials = new DefaultAzureCredential();
const keyResolver = new AzureKeyVaultEncryptionKeyResolver(credentials);
const cosmosClient = new CosmosClient({connectionString: "<ConnectionString>", clientEncryptionOptions: { keyEncryptionKeyResolver: keyResolver }});
Create a data encryption key
Before data can be encrypted in a container, adata encryption keymust be created in the parent database.
.NET
Java
NodeJS
Creating a new data encryption key is done by calling theCreateClientEncryptionKeyAsyncmethod and passing:
CreateClientEncryptionKeyAsync
A string identifier that will uniquely identify the key in the database.
The encryption algorithm intended to be used with the key. Only one algorithm is currently supported.
The key identifier of theCMKstored in Azure Key Vault. This parameter is passed in a genericEncryptionKeyWrapMetadataobject where:Thetypedefines the type of key resolver (for example, Azure Key Vault).Thenamecan be any friendly name you want.Thevaluemust be the key identifier.ImportantOnce the key is created, browse to its current version, and copy its full key identifier:https://<my-key-vault>.vault.azure.net/keys/<key>/<version>.Thealgorithmdefines which algorithm shall be used to wrap the key encryption key with the customer-managed key.
EncryptionKeyWrapMetadata
Thetypedefines the type of key resolver (for example, Azure Key Vault).
type
Thenamecan be any friendly name you want.
name
Thevaluemust be the key identifier.
value
Important
Once the key is created, browse to its current version, and copy its full key identifier:https://<my-key-vault>.vault.azure.net/keys/<key>/<version>.
https://<my-key-vault>.vault.azure.net/keys/<key>/<version>
Thealgorithmdefines which algorithm shall be used to wrap the key encryption key with the customer-managed key.
algorithm
var database = client.GetDatabase("my-database");
await database.CreateClientEncryptionKeyAsync(
    "my-key",
    DataEncryptionAlgorithm.AeadAes256CbcHmacSha256,
    new EncryptionKeyWrapMetadata(
        KeyEncryptionKeyResolverName.AzureKeyVault,
        "akvKey",
        "https://<my-key-vault>.vault.azure.net/keys/<key>/<version>",
        EncryptionAlgorithm.RsaOaep.ToString()));
var database = client.GetDatabase("my-database");
await database.CreateClientEncryptionKeyAsync(
    "my-key",
    DataEncryptionAlgorithm.AeadAes256CbcHmacSha256,
    new EncryptionKeyWrapMetadata(
        KeyEncryptionKeyResolverName.AzureKeyVault,
        "akvKey",
        "https://<my-key-vault>.vault.azure.net/keys/<key>/<version>",
        EncryptionAlgorithm.RsaOaep.ToString()));
Creating a new data encryption key is done by calling thecreateClientEncryptionKeymethod and passing:
createClientEncryptionKey
A string identifier that will uniquely identify the key in the database.
The encryption algorithm intended to be used with the key. Only one algorithm is currently supported.
The key identifier of theCMKstored in Azure Key Vault. This parameter is passed in a genericEncryptionKeyWrapMetadataobject where:Thetypedefines the type of key resolver (for example, Azure Key Vault).Thenamecan be any friendly name you want.Thevaluemust be the key identifier.ImportantOnce the key is created, browse to its current version, and copy its full key identifier:https://<my-key-vault>.vault.azure.net/keys/<key>/<version>. If you omit the key version at the end of the key identifier, the latest version of the key is used.Thealgorithmdefines which algorithm shall be used to wrap the key encryption key with the customer-managed key.
EncryptionKeyWrapMetadata
Thetypedefines the type of key resolver (for example, Azure Key Vault).
type
Thenamecan be any friendly name you want.
name
Thevaluemust be the key identifier.
value
Important
Once the key is created, browse to its current version, and copy its full key identifier:https://<my-key-vault>.vault.azure.net/keys/<key>/<version>. If you omit the key version at the end of the key identifier, the latest version of the key is used.
https://<my-key-vault>.vault.azure.net/keys/<key>/<version>
Thealgorithmdefines which algorithm shall be used to wrap the key encryption key with the customer-managed key.
algorithm
CosmosEncryptionAsyncDatabase database =
    cosmosEncryptionAsyncClient.getCosmosEncryptionAsyncDatabase("my-database");
EncryptionKeyWrapMetadata metadata = new EncryptionKeyWrapMetadata(
    cosmosEncryptionAsyncClient.getKeyEncryptionKeyResolverName(), 
    "akvKey", 
    "https://<my-key-vault>.vault.azure.net/keys/<key>/<version>",
    EncryptionAlgorithm.RSA_OAEP.toString());
database.createClientEncryptionKey(
    "my-key",
    CosmosEncryptionAlgorithm.AEAD_AES_256_CBC_HMAC_SHA256.getName(),
    metadata);
CosmosEncryptionAsyncDatabase database =
    cosmosEncryptionAsyncClient.getCosmosEncryptionAsyncDatabase("my-database");
EncryptionKeyWrapMetadata metadata = new EncryptionKeyWrapMetadata(
    cosmosEncryptionAsyncClient.getKeyEncryptionKeyResolverName(), 
    "akvKey", 
    "https://<my-key-vault>.vault.azure.net/keys/<key>/<version>",
    EncryptionAlgorithm.RSA_OAEP.toString());
database.createClientEncryptionKey(
    "my-key",
    CosmosEncryptionAlgorithm.AEAD_AES_256_CBC_HMAC_SHA256.getName(),
    metadata);
Creating a new data encryption key is done by calling thecreateClientEncryptionKeymethod and passing:
createClientEncryptionKey
A string identifier that will uniquely identify the key in the database.
The encryption algorithm intended to be used with the key. Only one algorithm is currently supported.
The key identifier of theCMKstored in Azure Key Vault. This parameter is passed in a genericEncryptionKeyWrapMetadataobject where:Thetypedefines the type of key resolver (for example, Azure Key Vault).Thenamecan be any friendly name you want.Thevaluemust be the key identifier.ImportantOnce the key is created, browse to its current version, and copy its full key identifier:https://<my-key-vault>.vault.azure.net/keys/<key>/<version>. If you omit the key version at the end of the key identifier, an error will be thrown.Thealgorithmdefines which algorithm shall be used to wrap the key encryption key with the customer-managed key.
EncryptionKeyWrapMetadata
Thetypedefines the type of key resolver (for example, Azure Key Vault).
type
Thenamecan be any friendly name you want.
name
Thevaluemust be the key identifier.
value
Important
Once the key is created, browse to its current version, and copy its full key identifier:https://<my-key-vault>.vault.azure.net/keys/<key>/<version>. If you omit the key version at the end of the key identifier, an error will be thrown.
https://<my-key-vault>.vault.azure.net/keys/<key>/<version>
Thealgorithmdefines which algorithm shall be used to wrap the key encryption key with the customer-managed key.
algorithm
const database = cosmosClient.database("my-database");
const metadata = new EncryptionKeyWrapMetadata(
    EncryptionKeyResolverName.AzureKeyVault, 
    "akvKey", 
    "https://<my-key-vault>.vault.azure.net/keys/<key>/<version>",
    KeyEncryptionAlgorithm.RSA_OAEP);

await database.createClientEncryptionKey(
    "my-key",
    EncryptionAlgorithm.AEAD_AES_256_CBC_HMAC_SHA256,
    metadata);
const database = cosmosClient.database("my-database");
const metadata = new EncryptionKeyWrapMetadata(
    EncryptionKeyResolverName.AzureKeyVault, 
    "akvKey", 
    "https://<my-key-vault>.vault.azure.net/keys/<key>/<version>",
    KeyEncryptionAlgorithm.RSA_OAEP);

await database.createClientEncryptionKey(
    "my-key",
    EncryptionAlgorithm.AEAD_AES_256_CBC_HMAC_SHA256,
    metadata);
Create a container with encryption policy
Specify the container-level encryption policy when creating the container.
.NET
Java
NodeJS
var path1 = new ClientEncryptionIncludedPath
{
    Path = "/property1",
    ClientEncryptionKeyId = "my-key",
    EncryptionType = EncryptionType.Deterministic.ToString(),
    EncryptionAlgorithm = DataEncryptionAlgorithm.AeadAes256CbcHmacSha256
};
var path2 = new ClientEncryptionIncludedPath
{
    Path = "/property2",
    ClientEncryptionKeyId = "my-key",
    EncryptionType = EncryptionType.Randomized.ToString(),
    EncryptionAlgorithm = DataEncryptionAlgorithm.AeadAes256CbcHmacSha256
};
await database.DefineContainer("my-container", "/partition-key")
    .WithClientEncryptionPolicy()
    .WithIncludedPath(path1)
    .WithIncludedPath(path2)
    .Attach()
    .CreateAsync();
var path1 = new ClientEncryptionIncludedPath
{
    Path = "/property1",
    ClientEncryptionKeyId = "my-key",
    EncryptionType = EncryptionType.Deterministic.ToString(),
    EncryptionAlgorithm = DataEncryptionAlgorithm.AeadAes256CbcHmacSha256
};
var path2 = new ClientEncryptionIncludedPath
{
    Path = "/property2",
    ClientEncryptionKeyId = "my-key",
    EncryptionType = EncryptionType.Randomized.ToString(),
    EncryptionAlgorithm = DataEncryptionAlgorithm.AeadAes256CbcHmacSha256
};
await database.DefineContainer("my-container", "/partition-key")
    .WithClientEncryptionPolicy()
    .WithIncludedPath(path1)
    .WithIncludedPath(path2)
    .Attach()
    .CreateAsync();
ClientEncryptionIncludedPath path1 = new ClientEncryptionIncludedPath();
path1.setClientEncryptionKeyId("my-key"):
path1.setPath("/property1");
path1.setEncryptionType(CosmosEncryptionType.DETERMINISTIC.getName());
path1.setEncryptionAlgorithm(CosmosEncryptionAlgorithm.AEAES_256_CBC_HMAC_SHA_256.getName());

ClientEncryptionIncludedPath path2 = new ClientEncryptionIncludedPath();
path2.setClientEncryptionKeyId("my-key"):
path2.setPath("/property2");
path2.setEncryptionType(CosmosEncryptionType.RANDOMIZED.getName());
path2.setEncryptionAlgorithm(CosmosEncryptionAlgorithm.AEAES_256_CBC_HMAC_SHA_256.getName());

List<ClientEncryptionIncludedPath> paths = new ArrayList<>();
paths.add(path1);
paths.add(path2);

CosmosContainerProperties containerProperties =
    new CosmosContainerProperties("my-container", "/id");
containerProperties.setClientEncryptionPolicy(new ClientEncryptionPolicy(paths));
database.createEncryptionContainerAsync(containerProperties);
ClientEncryptionIncludedPath path1 = new ClientEncryptionIncludedPath();
path1.setClientEncryptionKeyId("my-key"):
path1.setPath("/property1");
path1.setEncryptionType(CosmosEncryptionType.DETERMINISTIC.getName());
path1.setEncryptionAlgorithm(CosmosEncryptionAlgorithm.AEAES_256_CBC_HMAC_SHA_256.getName());

ClientEncryptionIncludedPath path2 = new ClientEncryptionIncludedPath();
path2.setClientEncryptionKeyId("my-key"):
path2.setPath("/property2");
path2.setEncryptionType(CosmosEncryptionType.RANDOMIZED.getName());
path2.setEncryptionAlgorithm(CosmosEncryptionAlgorithm.AEAES_256_CBC_HMAC_SHA_256.getName());

List<ClientEncryptionIncludedPath> paths = new ArrayList<>();
paths.add(path1);
paths.add(path2);

CosmosContainerProperties containerProperties =
    new CosmosContainerProperties("my-container", "/id");
containerProperties.setClientEncryptionPolicy(new ClientEncryptionPolicy(paths));
database.createEncryptionContainerAsync(containerProperties);
const path1 = new ClientEncryptionIncludedPath(
   "/property1",
   "my-key",
   EncryptionType.DETERMINISTIC,
   EncryptionAlgorithm.AEAD_AES_256_CBC_HMAC_SHA256,
);
const path2 = new ClientEncryptionIncludedPath(
   "/property2",
   "my-key",
   EncryptionType.DETERMINISTIC,
   EncryptionAlgorithm.AEAD_AES_256_CBC_HMAC_SHA256,
);
const paths = [path1, path2];
const clientEncryptionPolicy = new ClientEncryptionPolicy(paths, 2);

const containerDefinition = {
    id: "my-container",
    partitionKey: {
      paths: ["/id"],
    },
    clientEncryptionPolicy: clientEncryptionPolicy,
};

await database.containers.createIfNotExists(containerDefinition);
const path1 = new ClientEncryptionIncludedPath(
   "/property1",
   "my-key",
   EncryptionType.DETERMINISTIC,
   EncryptionAlgorithm.AEAD_AES_256_CBC_HMAC_SHA256,
);
const path2 = new ClientEncryptionIncludedPath(
   "/property2",
   "my-key",
   EncryptionType.DETERMINISTIC,
   EncryptionAlgorithm.AEAD_AES_256_CBC_HMAC_SHA256,
);
const paths = [path1, path2];
const clientEncryptionPolicy = new ClientEncryptionPolicy(paths, 2);

const containerDefinition = {
    id: "my-container",
    partitionKey: {
      paths: ["/id"],
    },
    clientEncryptionPolicy: clientEncryptionPolicy,
};

await database.containers.createIfNotExists(containerDefinition);
Read and write encrypted data
How data gets encrypted
Whenever a document is written to Azure Cosmos DB, the SDK looks up the encryption policy to figure out which properties need to be encrypted, and how. The result of the encryption is a base 64 string.
Encryption of complex types:
When the property to encrypt is a JSON array, every entry of the array is encrypted.
When the property to encrypt is a JSON array, every entry of the array is encrypted.
When the property to encrypt is a JSON object, only the leaf values of the object get encrypted. The intermediate sub-property names remain in plain text form.
When the property to encrypt is a JSON object, only the leaf values of the object get encrypted. The intermediate sub-property names remain in plain text form.
Read encrypted items
No explicit action is required to decrypt encrypted properties when issuing point-reads (fetching a single item by its ID and partition key), queries, or reading the change feed. This is because:
The SDK looks up the encryption policy to figure out which properties need to be decrypted.
The result of the encryption embeds the original JSON type of the value.
Note that the resolution of encrypted properties and their subsequent decryption are based only on the results returned from your requests. For example, ifproperty1is encrypted but is projected intoproperty2(SELECT property1 AS property2 FROM c), it won't get identified as an encrypted property when received by the SDK.
property1
property2
SELECT property1 AS property2 FROM c
Filter queries on encrypted properties
When writing queries that filter on encrypted properties, a specific method must be used to pass the value of the query parameter. This method takes the following arguments:
The name of the query parameter.
The value to use in the query.
The path of the encrypted property (as defined in the encryption policy).
Important
Encrypted properties can only be used in equality filters (WHERE c.property = @Value). Any other usage will return unpredictable and wrong query results. This constraint will be better enforced in next versions of the SDK.
WHERE c.property = @Value
.NET
Java
NodeJS
var queryDefinition = container.CreateQueryDefinition(
    "SELECT * FROM c where c.property1 = @Property1");
await queryDefinition.AddParameterAsync(
    "@Property1",
    1234,
    "/property1");
var queryDefinition = container.CreateQueryDefinition(
    "SELECT * FROM c where c.property1 = @Property1");
await queryDefinition.AddParameterAsync(
    "@Property1",
    1234,
    "/property1");
SqlQuerySpecWithEncryption sqlQuerySpecWithEncryption = new SqlQuerySpecWithEncryption(
    new SqlQuerySpec("SELECT * FROM c where c.property1 = @Property1"));
sqlQuerySpecWithEncryption.addEncryptionParameter(
    "/property1", new SqlParameter("@Property1", 1234))
SqlQuerySpecWithEncryption sqlQuerySpecWithEncryption = new SqlQuerySpecWithEncryption(
    new SqlQuerySpec("SELECT * FROM c where c.property1 = @Property1"));
sqlQuerySpecWithEncryption.addEncryptionParameter(
    "/property1", new SqlParameter("@Property1", 1234))
const queryBuilder = new EncryptionQueryBuilder("SELECT * FROM c where c.property1 = @Property1");
queryBuilder.addIntegerParameter(@Property1, 1234, "/property1");

const iterator = await container.items.getEncryptionQueryIterator(queryBuilder);
const queryBuilder = new EncryptionQueryBuilder("SELECT * FROM c where c.property1 = @Property1");
queryBuilder.addIntegerParameter(@Property1, 1234, "/property1");

const iterator = await container.items.getEncryptionQueryIterator(queryBuilder);
Reading documents when only a subset of properties can be decrypted
In situations where the client doesn't have access to all the CMK used to encrypt properties, only a subset of properties can be decrypted when data is read back. For example, ifproperty1was encrypted with key1 andproperty2was encrypted with key2, a client application that only has access to key1 can still read data, but notproperty2. In such a case, you must read your data through SQL queries and project away the properties that the client can't decrypt:SELECT c.property1, c.property3 FROM c.
property1
property2
property2
SELECT c.property1, c.property3 FROM c
CMK rotation
You may want to "rotate" your CMK (that is, use a new CMK instead of the current one) if you suspect that the current CMK has been compromised. It's also a common security practice to rotate the CMK regularly. To perform this rotation, you only have to provide the key identifier of the new CMK that should be used to wrap a specific DEK. Note that this operation doesn't affect the encryption of your data, but the protection of the DEK. Access to the previous CMK shouldn't be revoked until the rotation is completed.
.NET
Java
NodeJS
await database.RewrapClientEncryptionKeyAsync(
    "my-key",
    new EncryptionKeyWrapMetadata(
        KeyEncryptionKeyResolverName.AzureKeyVault,
        "akvKey",
        "https://<my-key-vault>.vault.azure.net/keys/<new-key>/<version>",
        EncryptionAlgorithm.RsaOaep.ToString()));
await database.RewrapClientEncryptionKeyAsync(
    "my-key",
    new EncryptionKeyWrapMetadata(
        KeyEncryptionKeyResolverName.AzureKeyVault,
        "akvKey",
        "https://<my-key-vault>.vault.azure.net/keys/<new-key>/<version>",
        EncryptionAlgorithm.RsaOaep.ToString()));
EncryptionKeyWrapMetadata metadata = new EncryptionKeyWrapMetadata(
    cosmosEncryptionAsyncClient.getKeyEncryptionKeyResolverName(), 
    "akvKey", 
    "https://<my-key-vault>.vault.azure.net/keys/<new-key>/<version>",
    EncryptionAlgorithm.RSA_OAEP.toString());
database.rewrapClientEncryptionKey(
    "my-key",
    metadata);
EncryptionKeyWrapMetadata metadata = new EncryptionKeyWrapMetadata(
    cosmosEncryptionAsyncClient.getKeyEncryptionKeyResolverName(), 
    "akvKey", 
    "https://<my-key-vault>.vault.azure.net/keys/<new-key>/<version>",
    EncryptionAlgorithm.RSA_OAEP.toString());
database.rewrapClientEncryptionKey(
    "my-key",
    metadata);
const newMetadata = new EncryptionKeyWrapMetadata(
    EncryptionKeyResolverName.AzureKeyVault, 
    "akvKey", 
    "https://<my-key-vault>.vault.azure.net/keys/<new-key>/<version>",
    KeyEncryptionAlgorithm.RSA_OAEP);

await database.rewrapClientEncryptionKey(
    "my-key",
    newMetadata);
const newMetadata = new EncryptionKeyWrapMetadata(
    EncryptionKeyResolverName.AzureKeyVault, 
    "akvKey", 
    "https://<my-key-vault>.vault.azure.net/keys/<new-key>/<version>",
    KeyEncryptionAlgorithm.RSA_OAEP);

await database.rewrapClientEncryptionKey(
    "my-key",
    newMetadata);
DEK rotation
Performing a rotation of a data encryption key isn't offered as a turnkey capability. This is because updating a DEK requires a scan of all containers where this key is used and a re-encryption of all properties encrypted with this key. This operation can only happen client-side as the Azure Cosmos DB service doesn't store or ever accesses the plain text value of the DEK.
In practice, a DEK rotation can be done by performing a data migration from the impacted containers to new ones. The new containers can be created the exact same way as the original ones. To help you with such a data migration, you can finda standalone migration tool on GitHub.
Adding additional encrypted properties
Adding additional encrypted properties to an existing encryption policy isn't supported for the same reasons explained in the section just above. This operation requires a full scan of the container to ensure that all instances of the properties are properly encrypted, and this is an operation that can only happen client-side. Just like a DEK rotation, adding additional encrypted properties can be done by performing a data migration to a new container with an appropriate encryption policy.
If you have flexibility in the way new encrypted properties can be added from a schema standpoint, you can also leverage the schema-agnostic nature of Azure Cosmos DB. If you use a property defined in your encryption policy as a "property bag", you can add more properties below with no constraint. For example, let's imagine thatproperty1is defined in your encryption policy and you initially writeproperty1.property2in your documents. If, at a later stage, you need to addproperty3as an encrypted property, you can start writingproperty1.property3in your documents and the new property will automatically be encrypted as well. This approach doesn't require any data migration.
property1
property1.property2
property3
property1.property3
Next steps
Learn more aboutcustomer-managed keys for encryption-at-rest
Feedback
Was this page helpful?
Additional resources