Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Edit and manage logic apps in Visual Studio Code
Article
2025-03-20
1 contributor
In this article
Applies to:Azure Logic Apps (Consumption + Standard)
This guide shows how to work with deployed logic apps in Visual Studio Code and how to perform tasks such as edit, disable, enable, and delete. If you have both extensions forAzure Logic Apps (Consumption)andAzure Logic Apps (Standard)installed in Visual Studio Code, you can view all the deployed logic apps in your Azure subscription and perform management tasks with some that vary based on the logic app type.
Prerequisites
An Azure account and subscription. If you don't have a subscription,sign up for a free Azure account.
An Azure account and subscription. If you don't have a subscription,sign up for a free Azure account.
Access to the internet so that you can download the required extension if necessary, connect from Visual Studio Code to your Azure account, and publish any changes that you make to your project.
Access to the internet so that you can download the required extension if necessary, connect from Visual Studio Code to your Azure account, and publish any changes that you make to your project.
Visual Studio Codewith the following extensions, based on the logic app type that you want to manage. You can also have both extensions installed at the same time.Azure Logic Apps (Standard) extension for Visual Studio CodeAzure Logic Apps (Consumption) extension for Visual Studio Code
Visual Studio Codewith the following extensions, based on the logic app type that you want to manage. You can also have both extensions installed at the same time.
Azure Logic Apps (Standard) extension for Visual Studio Code
Azure Logic Apps (Consumption) extension for Visual Studio Code
For Standard logic app workflows, you need the Standard logic app project that you want to edit or manage in Visual Studio Code.
For Standard logic app workflows, you need the Standard logic app project that you want to edit or manage in Visual Studio Code.

Connect to your Azure account
If you aren't already connected to your Azure account, follow these steps to connect:
Consumption
Standard
In Visual Studio Code, on the Activity Bar, select the Azure icon to open theAzurepane.
In Visual Studio Code, on the Activity Bar, select the Azure icon to open theAzurepane.

In theAzurepane, in theLogic Apps (Consumption)section, selectSign in to Azure.
In theAzurepane, in theLogic Apps (Consumption)section, selectSign in to Azure.
When the Visual Studio Code authentication page appears, sign in with your Azure account.After you sign in, theLogic Apps (Consumption)section shows the Azure subscriptions for your Azure account. If the expected subscriptions don't appear, or you want the pane to show only specific subscriptions, follow these steps:In theLogic Apps (Consumption)section, move your pointer over the section title until theSelect Subscriptionsbutton (filter icon) appears. Select the filter icon.When the subscriptions list appears, select the subscriptions that you want, and make sure that you selectOK.
When the Visual Studio Code authentication page appears, sign in with your Azure account.
After you sign in, theLogic Apps (Consumption)section shows the Azure subscriptions for your Azure account. If the expected subscriptions don't appear, or you want the pane to show only specific subscriptions, follow these steps:
In theLogic Apps (Consumption)section, move your pointer over the section title until theSelect Subscriptionsbutton (filter icon) appears. Select the filter icon.
In theLogic Apps (Consumption)section, move your pointer over the section title until theSelect Subscriptionsbutton (filter icon) appears. Select the filter icon.
When the subscriptions list appears, select the subscriptions that you want, and make sure that you selectOK.
When the subscriptions list appears, select the subscriptions that you want, and make sure that you selectOK.
In Visual Studio Code, on the Activity Bar, select the Azure icon to open theAzurepane.
In Visual Studio Code, on the Activity Bar, select the Azure icon to open theAzurepane.

In theAzurepane, in theResourcessection, selectSign in to Azure.
In theAzurepane, in theResourcessection, selectSign in to Azure.
When the Visual Studio Code authentication page appears, sign in with your Azure account.After you sign in, theResourcessection shows the Azure subscriptions for your Azure account. If the expected subscriptions don't appear, or you want the pane to show only specific subscriptions, follow these steps:In theResourcessection, move your pointer over the first subscription until theSelect Subscriptionsbutton (filter icon) appears. Select the filter icon.When the subscriptions list appears, select the subscriptions that you want, and make sure that you selectOK.
When the Visual Studio Code authentication page appears, sign in with your Azure account.
After you sign in, theResourcessection shows the Azure subscriptions for your Azure account. If the expected subscriptions don't appear, or you want the pane to show only specific subscriptions, follow these steps:
In theResourcessection, move your pointer over the first subscription until theSelect Subscriptionsbutton (filter icon) appears. Select the filter icon.
In theResourcessection, move your pointer over the first subscription until theSelect Subscriptionsbutton (filter icon) appears. Select the filter icon.
When the subscriptions list appears, select the subscriptions that you want, and make sure that you selectOK.
When the subscriptions list appears, select the subscriptions that you want, and make sure that you selectOK.
View deployed logic apps in Visual Studio Code
Consumption
Standard
In Visual Studio Code,connect to your Azure account, if you haven't already.
In Visual Studio Code,connect to your Azure account, if you haven't already.
On the Activity Bar, select the Azure icon to open theAzurepane.
On the Activity Bar, select the Azure icon to open theAzurepane.
In theLogic Apps (Consumption)section, expand your Azure subscription.You can now view all the deployed Consumption logic apps in the selected subscription, for example:
In theLogic Apps (Consumption)section, expand your Azure subscription.
You can now view all the deployed Consumption logic apps in the selected subscription, for example:

Find and expand the node for the deployed Consumption logic app that you want.At the logic app resource level, you can select the following tasks from the logic app node shortcut menu:TaskSelectOpen workflow in the designerOpen in Designer, which opens the workflow in read-only mode.Open workflow in the code view editorOpen in Editor, which opens the workflow for editing. SeeEdit a workflow.
Find and expand the node for the deployed Consumption logic app that you want.
At the logic app resource level, you can select the following tasks from the logic app node shortcut menu:
Expand the node for the items described in the following table where you want to view more information, if any exists:NodeDescriptionRunsWorkflow run historyTriggersWorkflow trigger information.- To open in the code view editor, open the shortcut menu for the trigger, and selectOpen in Editor.- To run the trigger, open the shortcut menu for the trigger, and selectRun.VersionsLogic app versions.- To open in the designer, open the shortcut menu for a specific version, and selectOpen in Designer, which opens in read-only mode.- To open in the code view editor, open the shortcut menu for a specific version, and selectOpen in Editor, which opens in read-only mode.
Expand the node for the items described in the following table where you want to view more information, if any exists:
In Visual Studio Code,connect to your Azure account, if you haven't already.
In Visual Studio Code,connect to your Azure account, if you haven't already.
On the Activity Bar, select the Azure icon to open theAzurepane.
On the Activity Bar, select the Azure icon to open theAzurepane.
In theResourcessection, expand your subscription, and then expandLogic App.You can now view all the deployed Standard logic apps in the selected subscription, for example:
In theResourcessection, expand your subscription, and then expandLogic App.
You can now view all the deployed Standard logic apps in the selected subscription, for example:

Find and expand the node for the deployed Standard logic app that you want.
Find and expand the node for the deployed Standard logic app that you want.
Expand the node for the items described in the following table where you want to view more information, if any exists:NodeDescriptionWorkflowsWorkflows in this logic app.To view an individual workflow in the designer, which opens in read-only mode, choose from the following options:-Open in Visual Studio Code: Open the shortcut menu for the workflow, and selectOpen Designer.-Open in Azure portal: Open the shortcut menu for the workflow, and selectOpen in Portal.To edit the workflow, seeEdit a workflow.ConfigurationsView the following configuration elements:-Application Settings-Connections-ParametersFilesProject files and any other files in your logic app resource, for example:-Artifacts-workflow.jsonfile for each workflow in your logic app resource-connections.jsonfile that contains information about connections created by managed connectors-host.jsonfileLogsLog files that contain any diagnostic logging informationDeploymentsSlotsAny existing deployment slotsArtifactsFiles such as map (.xslt) files, schemas (.xsd), or assemblies (.dll or .jar)Note: This node and subnodes appear only if any actual files exist.
Expand the node for the items described in the following table where you want to view more information, if any exists:

Add blank workflow to project (Standard logic app only)
While a Consumption logic app can have only one workflow, a Standard logic app can have multiple workflows. To add a new empty workflow to your project, follow these steps:
In Visual Studio Code, open your Standard logic app project, if not already open.
In Visual Studio Code, open your Standard logic app project, if not already open.
On the Activity Bar, select the files icon, which opens theExplorerwindow to show your project.
On the Activity Bar, select the files icon, which opens theExplorerwindow to show your project.
On your project folder shortcut menu, and selectCreate workflow.
On your project folder shortcut menu, and selectCreate workflow.
Select the workflow templateStatefulorStateless
Select the workflow templateStatefulorStateless
Provide a name for your workflow.
Provide a name for your workflow.
A new workflow folder now appears in your project. This folder contains aworkflow.jsonfile for the workflow's underlying JSON definition.

Edit a workflow
In Visual Studio Code, you can edit a deployed Consumption workflow using only the code view editor. If you open a deployed Consumption workflow using the designer, the workflow opens in read-only mode. By comparison, you can edit a Standard workflow using the designer or code view editor only within the context of your Standard logic app project in theExplorerpane. If you open adeployedStandard workflow using the designer or code view editor from theResourcessection in theAzurepane, the workflow opens in read-only mode.
To edit a deployed Consumption or Standard workflow using the designer, make those changes in the Azure portal instead.
Important
Before you change your workflow, you might want to stop or disable your workflow. Make sure
that you understand how your changes affect your workflow's operation. When you're done,
remember to restart or reenable your workflow. For considerations around stopping, disabling,
restarting, or re-enabling workflows, see the following documentation:
Considerations for stopping Consumption logic apps
Considerations for stopping Standard logic apps
Consumption
Standard
In Visual Studio Code, on the Activity Bar, select the Azure icon to open theAzurepane.
In Visual Studio Code, on the Activity Bar, select the Azure icon to open theAzurepane.
In theLogic Apps (Consumption)section, expand your Azure subscription, and find your logic app.
In theLogic Apps (Consumption)section, expand your Azure subscription, and find your logic app.
Open the logic app shortcut menu, and selectOpen in Editor.Visual Studio Code opens the code view editor for the workflow's underlying JSON definition file named<logic-app-name>.logicapp.jsonfile. You can now edit the workflow's underlying JSON definition.
Open the logic app shortcut menu, and selectOpen in Editor.
Visual Studio Code opens the code view editor for the workflow's underlying JSON definition file named<logic-app-name>.logicapp.jsonfile. You can now edit the workflow's underlying JSON definition.
After you make changes and try to save your workflow, a message appears to confirm that you want to upload your changes to the deployed workflow.
After you make changes and try to save your workflow, a message appears to confirm that you want to upload your changes to the deployed workflow.
To continue saving and publishing your changes, selectUpload.Azure saves the original workflow as a previous version. Your updated workflow becomes the current workflow.
To continue saving and publishing your changes, selectUpload.
Azure saves the original workflow as a previous version. Your updated workflow becomes the current workflow.
If your workflow is disabled, remember to reenable your workflow.
If your workflow is disabled, remember to reenable your workflow.
In Visual Studio Code, open your Standard logic app project, if not already open.
In Visual Studio Code, open your Standard logic app project, if not already open.
On the Activity Bar, select the files icon to open theExplorerpane, which shows your project.
On the Activity Bar, select the files icon to open theExplorerpane, which shows your project.
In your project, expand the workflow folder that you want.
In your project, expand the workflow folder that you want.
Choose from the following options:Open theworkflow.jsonshortcut menu, selectOpen Designer, and make your changes in the designer.Open theworkflow.jsonfile, and make your changes in the underlying JSON definition.
Choose from the following options:
Open theworkflow.jsonshortcut menu, selectOpen Designer, and make your changes in the designer.
Open theworkflow.jsonshortcut menu, selectOpen Designer, and make your changes in the designer.
Open theworkflow.jsonfile, and make your changes in the underlying JSON definition.
Open theworkflow.jsonfile, and make your changes in the underlying JSON definition.
When you're done,publish your updated Standard logic app.
When you're done,publish your updated Standard logic app.
If your workflow is disabled, remember to reenable your workflow.
If your workflow is disabled, remember to reenable your workflow.

Disable or enable a deployed logic app
Deployed Consumption and Standard logic apps have different ways to disable and enable their activity. For considerations around how these tasks affect each logic app resource type, see the following documentation:
Considerations for stopping Consumption logic apps
Considerations for stopping Standard logic apps
Considerations for disabling Standard workflows
Consumption
Standard
In Visual Studio Code, on the Activity Bar, select the Azure icon to open theAzurepane.
In Visual Studio Code, on the Activity Bar, select the Azure icon to open theAzurepane.
In theLogic Apps (Consumption)section, expand your Azure subscription, and find your logic app.
In theLogic Apps (Consumption)section, expand your Azure subscription, and find your logic app.
Open the logic app shortcut menu. Based on the current activity state, selectDisableorEnable.
Open the logic app shortcut menu. Based on the current activity state, selectDisableorEnable.
In Visual Studio Code, you can stop, start, or restart a Standard logic app, which affects all workflow instances. You can also restart a Standard logic app without first stopping its activity. However, to disable and reenable individual workflows,you must use the Azure portal.
Stopping the resource versus disabling a workflow have different effects, so review the considerations before you continue.
In Visual Studio Code, on the Activity Bar, select the Azure icon to open theAzurepane.
In Visual Studio Code, on the Activity Bar, select the Azure icon to open theAzurepane.
In theResourcessection, expand your Azure subscription, and find your logic app.
In theResourcessection, expand your Azure subscription, and find your logic app.
Open the logic app shortcut menu. Based on the current activity state, selectStoporStart. Or, you can selectRestart.
Open the logic app shortcut menu. Based on the current activity state, selectStoporStart. Or, you can selectRestart.
Post logic app stoppage
After you stop a logic app, workflow triggers won't fire the next time that their conditions are met. However, trigger states remember the points at where you stopped the logic app. When you restart a logic app, the trigger fires for all unprocessed items since the last workflow run.
To stop a trigger from firing on unprocessed items since the last workflow run, you must clear the trigger state before you restart a logic app by following these steps:
Consumption
Standard
In Visual Studio Code,open your Consumption logic app workflow, and edit any part of the workflow trigger.
In Visual Studio Code,open your Consumption logic app workflow, and edit any part of the workflow trigger.
Save your changes. This step resets your trigger's current state.
Save your changes. This step resets your trigger's current state.
Restart your logic app.
Restart your logic app.
In Visual Studio Code,open your Standard logic app workflow, and edit any part of the workflow trigger.
In Visual Studio Code,open your Standard logic app workflow, and edit any part of the workflow trigger.
Save your changes. This step resets the trigger's current state.
Save your changes. This step resets the trigger's current state.
Repeat for each existing workflow.
Repeat for each existing workflow.
Restart your logic app.
Restart your logic app.

Delete logic apps
Deployed Consumption and Standard logic apps have different ways to delete their resources. For considerations around how deleting affects each logic app resource type, see the following documentation:
Considerations for deleting Consumption logic apps
Considerations for deleting Standard logic apps
Considerations for deleting Standard workflows
Consumption
Standard
In Visual Studio Code, on the Activity Bar, select the Azure icon to open theAzurepane.
In Visual Studio Code, on the Activity Bar, select the Azure icon to open theAzurepane.
In theLogic Apps (Consumption)section, expand your Azure subscription, and find your logic app.
In theLogic Apps (Consumption)section, expand your Azure subscription, and find your logic app.
Open the logic app shortcut menu, and selectDelete.
Open the logic app shortcut menu, and selectDelete.
In Visual Studio Code, you can only delete an entire Standard logic app. To delete individual workflows,use the Azure portal.
In Visual Studio Code, on the Activity Bar, select the Azure icon to open theAzurepane.
In Visual Studio Code, on the Activity Bar, select the Azure icon to open theAzurepane.
In theResourcessection, expand your Azure subscription, expandLogic App, and find your logic app.
In theResourcessection, expand your Azure subscription, expandLogic App, and find your logic app.
Open the logic app shortcut menu, and selectDelete logic app.
Open the logic app shortcut menu, and selectDelete logic app.

Promote previous versions (Consumption only)
To publish an earlier Consumption logic app version, you can promote that version over the current version. Your logic app must have at least two versions to make the promote option available.
In Visual Studio Code, on the Activity Bar, select the Azure icon to open theAzurepane.
In Visual Studio Code, on the Activity Bar, select the Azure icon to open theAzurepane.
In theLogic Apps (Consumption)section, expand your Azure subscription, and find your logic app.
In theLogic Apps (Consumption)section, expand your Azure subscription, and find your logic app.
Expand your logic app, expandVersions, and find the earlier version to promote.
Expand your logic app, expandVersions, and find the earlier version to promote.
On the version shortcut menu, selectPromote.
On the version shortcut menu, selectPromote.
Related content
Create Standard logic app workflows in Visual Studio Code
Feedback
Was this page helpful?
Additional resources