Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Authenticate JavaScript apps to Azure services during local development using developer accounts
Article
2025-02-25
3 contributors
In this article
When you create cloud applications, developers need to debug and test applications on their local workstation. When an application is run on a developer's workstation during local development, it still must authenticate to any Azure services used by the app. This article covers how to use a developer's Azure credentials to authenticate the app to Azure during local development.

For an app to authenticate to Azure during local development using the developer's Azure credentials, the developer must be signed-in to Azure from the Visual Studio Code Azure Tools extension, the Azure CLI, or Azure PowerShell. The Azure SDK for JavaScript is able to detect that the developer is signed-in from one of these tools and then obtain the necessary credentials from the credentials cache to authenticate the app to Azure as the signed-in user.
This approach is easiest to set up for a development team since it takes advantage of the developers' existing Azure accounts. However, a developer's account will likely have more permissions than required by the application, therefore exceeding the permissions the app runs with in production. As an alternative, you can create application service principals to use during local development, which can be scoped to have only the access needed by the app.

Create Microsoft Entra group for local development
Since there are almost always multiple developers who work on an application, it's recommended to first create a Microsoft Entra group to encapsulate the roles (permissions) the app needs in local development. This offers the following advantages.
Every developer is assured to have the same roles assigned since roles are assigned at the group level.
If a new role is needed for the app, it only needs to be added to the Microsoft Entra group for the app.
If a new developer joins the team, they simply must be added to the correct Microsoft Entra group to get the correct permissions to work on the app.
If you have an existing Microsoft Entra group for your development team, you can use that group. Otherwise, complete the following steps to create a Microsoft Entra group.
Azure portal
Azure CLI
Group typeâSecurity.
Group nameâ A name for the security group, typically created from the application name.  It's also helpful to include a string likelocal-devin the name of the group to indicate the purpose of the group.
Group descriptionâ A description of the purpose of the group.
Select theNo members selectedlink underMembersto add members to the group.
Use the search box to filter the list of user names in the list.
Choose one or more users for local development for this app.  As you choose an object, the object moves to theSelected itemslist at the bottom of the dialog.
When finished, choose theSelectbutton.
Theaz ad group createcommand is used to create groups in Microsoft Entra ID. The--display-nameand--main-nicknameparameters are required. The name given to the group should be based on the name of the application. It's also useful to include a phrase like 'local-dev' in the name of the group to indicate the purpose of the group.
--display-name
--main-nickname
az ad group create \
    --display-name MyDisplay \
    --mail-nickname MyDisplay  \
    --description <group-description>
az ad group create \
    --display-name MyDisplay \
    --mail-nickname MyDisplay  \
    --description <group-description>
To add members to the group, you'll need the object ID of Azure user. Use theaz ad user listto list the available service principals. The--filterparameter command accepts OData style filters and can be used to filter the list on the display name of the user as shown. The--queryparameter returns specified columns.
--filter
--query
az ad user list \
    --filter "startswith(displayName, 'Bob')" \
    --query "[].{objectId:objectId, displayName:displayName}" \
    --output table
az ad user list \
    --filter "startswith(displayName, 'Bob')" \
    --query "[].{objectId:objectId, displayName:displayName}" \
    --output table
Theaz ad group member addcommand can then be used to add members to groups.
az ad group member add \
    --group <group-name> \
    --member-id <object-id>
az ad group member add \
    --group <group-name> \
    --member-id <object-id>

Assign roles to the Microsoft Entra group
Next, you need to determine what roles (permissions) your app needs on what resources and assign those roles to your app. In this example, the roles are assigned to the Microsoft Entra group created in step 1. Roles can be assigned a role at a resource, resource group, or subscription scope. This example shows how to assign roles at the resource group scope since most applications group all their Azure resources into a single resource group.
Azure portal
Azure CLI
Select theRole assignmentstab.
Select+ Addfrom the top menu and thenAdd role assignmentfrom the resulting drop-down menu.
Use the search box to filter the list to a more manageable size. This example shows how to filter for Storage Blob roles.
Select the role that you want to assign.SelectNextto go to the next screen.
SelectUser, group, or service principalunderAssign access to.
Select+ Select membersunderMembers
TheSelecttext box can be used to filter the list of users and groups in your subscription. If needed, type the first few characters of the local development Microsoft Entra group you created for the app.
Select the local development Microsoft Entra group associated with your application.
An application service principal is assigned a role in Azure using theaz role assignment createcommand.
az role assignment create --assignee "{appId}" \
    --scope /subscriptions/"{subscriptionName}" \
    --role "{roleName}" \
    --resource-group "{resourceGroupName}"
az role assignment create --assignee "{appId}" \
    --scope /subscriptions/"{subscriptionName}" \
    --role "{roleName}" \
    --resource-group "{resourceGroupName}"
To get the role names that a service principal can be assigned to, use theaz role definition listcommand.
az role definition list --query "sort_by([].{roleName:roleName, description:description}, &roleName)" --output table
az role definition list --query "sort_by([].{roleName:roleName, description:description}, &roleName)" --output table
For example, to allow the application service principal to read, write, and delete access to Azure Storage blob containers and data to all storage accounts in themsdocs-sdk-auth-exampleresource group, you would assign the application service principal to theStorage Blob Data Contributorrole using the following command.
az role assignment create --assignee "aaaaaaaa-bbbb-cccc-7777-888888888888" \
    --scope /subscriptions/"Storage Blob Data Subscriber" \
    --role "Storage Blob Data Contributor" \
    --resource-group "msdocs-sdk-auth-example"
az role assignment create --assignee "aaaaaaaa-bbbb-cccc-7777-888888888888" \
    --scope /subscriptions/"Storage Blob Data Subscriber" \
    --role "Storage Blob Data Contributor" \
    --resource-group "msdocs-sdk-auth-example"
For information on assigning permissions at the resource or subscription level using the Azure CLI, see the articleAssign Azure roles using the Azure CLI.
Sign-in to Azure using VS Code, the Azure CLI, or Azure PowerShell
Azure PowerShell
Open a terminal on your developer workstation and sign-in to Azure fromAzure PowerShell.
Connect-AzAccount
Connect-AzAccount
Implement DefaultAzureCredential in your application
To authenticate Azure SDK client objects to Azure, your application should use theDefaultAzureCredentialclass from the@azure/identitypackage. In this scenario,DefaultAzureCredentialwill sequentially check to see if the developer has signed-in to Azure using the VS Code Azure tools extension, the Azure CLI, or Azure PowerShell. If the developer is signed-in to Azure using any of these tools, then the credentials used to sign into the tool will be used by the app to authenticate to Azure with.
DefaultAzureCredential
@azure/identity
DefaultAzureCredential
Start by adding the@azure/identitypackage to your application.
npm install @azure/identity
npm install @azure/identity
Next, for any JavaScript code that creates an Azure SDK client object in your app, you'll want to:
Import theDefaultAzureCredentialclass from the@azure/identitymodule.
DefaultAzureCredential
@azure/identity
Create aDefaultAzureCredentialobject.
DefaultAzureCredential
Pass theDefaultAzureCredentialobject to the Azure SDK client object constructor.
DefaultAzureCredential
An example of this is shown in the following code segment.
import { BlobServiceClient } from '@azure/storage-blob';
import { DefaultAzureCredential } from '@azure/identity';

// Acquire a credential object
const tokenCredential = DefaultAzureCredential();

const blobServiceClient = BlobServiceClient(
        `https://${accountName}.blob.core.windows.net`,
        tokenCredential
);
import { BlobServiceClient } from '@azure/storage-blob';
import { DefaultAzureCredential } from '@azure/identity';

// Acquire a credential object
const tokenCredential = DefaultAzureCredential();

const blobServiceClient = BlobServiceClient(
        `https://${accountName}.blob.core.windows.net`,
        tokenCredential
);
DefaultAzureCredentialwill automatically detect the authentication mechanism configured for the app and obtain the necessary tokens to authenticate the app to Azure. If an application makes use of more than one SDK client, the same credential object can be used with each SDK client object.
DefaultAzureCredential
Feedback
Was this page helpful?
Additional resources