Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Access control model in Azure Data Lake Storage
Article
2024-12-03
8 contributors
In this article
Data Lake Storage supports the following authorization mechanisms:
Shared Key authorization
Shared access signature (SAS) authorization
Role-based access control (Azure RBAC)
Attribute-based access control (Azure ABAC)
Access control lists (ACL)
Shared Key, account SAS, and service SAS authorization grants access to a user (or application) without requiring them to have an identity in Microsoft Entra ID. With these forms of authentication, Azure RBAC, Azure ABAC, and ACLs have no effect. ACLs can be applied to user delegated SAS tokens because those tokens are secured with Microsoft Entra credentials. SeeShared Key and SAS authorization.
Azure RBAC and ACL both require the user (or application) to have an identity in Microsoft Entra ID. Azure RBAC lets you grant "coarse-grain" access to storage account data, such as read or write access toallof the data in a storage account. Azure ABAC allows you to refine RBAC role assignments by adding conditions. For example, you can grant read or write access to all data objects in a storage account that have a specific tag. ACLs let you grant "fine-grained" access, such as write access to a specific directory or file.
This article focuses on Azure RBAC, ABAC, and ACLs, and how the system evaluates them together to make authorization decisions for storage account resources.

Role-based access control (Azure RBAC)
Azure RBAC uses role assignments to apply sets of permissions tosecurity principals. A security principal is an object that represents a user, group, service principal, or managed identity that is defined in Microsoft Entra ID. A permission set can give a security principal a "coarse-grain" level of access such as read or write access toallof the data in a storage account orallof the data in a container.
The following roles permit a security principal to access data in a storage account.
Roles such asOwner,Contributor,Reader, andStorage Account Contributorpermit a security principal to manage a storage account, but do not provide access to the data within that account. However, these roles (excludingReader) can obtain access to the storage keys, which can be used in various client tools to access the data.
Attribute-based access control (Azure ABAC)
Azure ABAC builds on Azure RBAC by adding role assignment conditions based on attributes in the context of specific actions. A role assignment condition is an additional check that you can optionally add to your role assignment to provide more refined access control. You cannot explicitly deny access to specific resources using conditions.
For more information on using Azure ABAC to control access to Azure Storage, seeAuthorize access to Azure Blob Storage using Azure role assignment conditions.
Access control lists (ACLs)
ACLs give you the ability to apply "finer grain" level of access to directories and files. AnACLis a permission construct that contains a series ofACL entries. Each ACL entry associates security principal with an access level. To learn more, seeAccess control lists (ACLs) in Azure Data Lake Storage.
How permissions are evaluated
During security principal-based authorization, permissions are evaluated as shown in the following diagram.

Azure determines whether a role assignment exists for the principal.If a role assignment exists, the role assignment conditions (2) are evaluated next.If not, the ACLs (4) are evaluated next.
If a role assignment exists, the role assignment conditions (2) are evaluated next.
If not, the ACLs (4) are evaluated next.
Azure determines whether any ABAC role assignment conditions exist.If no conditions exist, access is granted.If conditions exist, they are evaluated to see if they match the request (3).
If no conditions exist, access is granted.
If conditions exist, they are evaluated to see if they match the request (3).
Azure determines whether all of the ABAC role assignment conditions match the attributes of the request.If all of them match, access is granted.If at least one of them does not match, the ACLs (4) are evaluated next.
If all of them match, access is granted.
If at least one of them does not match, the ACLs (4) are evaluated next.
If access has not been explicitly granted after evaluating the role assignments and conditions, the ACLs are evaluated.If the ACLs permit the requested level of access, access is granted.If not, access is denied.
If the ACLs permit the requested level of access, access is granted.
If not, access is denied.
Important
Because of the way that access permissions are evaluated by the system, youcannotuse an ACL torestrictaccess that has already been granted by a role assignment and its conditions. That's because the system evaluates Azure role assignments and conditions first, and if the assignment grants sufficient access permission, ACLs are ignored.
The following diagram shows the permission flow for three common operations: listing directory contents, reading a file, and writing a file.

Permissions table: Combining Azure RBAC, ABAC, and ACLs
The following table shows you how to combine Azure roles, conditions, and ACL entries so that a security principal can perform the operations listed in theOperationcolumn. This table shows a column that represents each level of a fictitious directory hierarchy. There's a column for the root directory of the container (/), a subdirectory namedOregon, a subdirectory of the Oregon directory namedPortland, and a text file in the Portland directory namedData.txt. Appearing in those columns areshort formrepresentations of the ACL entry required to grant permissions.N/A(Not applicable) appears in the column if an ACL entry is not required to perform the operation.
/
--X
--X
--X
R--
--X
--X
--X
-W-
--X
--X
--X
RW-
--X
--X
-WX
--X
--X
-WX
--X
--X
-WX
--X
--X
-WX
R-X
--X
R-X
--X
--X
R-X
Note
To view the contents of a container in Azure Storage Explorer, security principals mustsign in to Storage Explorer by using Microsoft Entra ID, and (at a minimum) have read access (R--) to the root folder (\) of a container. This level of permission does give them the ability to list the contents of the root folder. If you don't want the contents of the root folder to be visible, you can assign themReaderrole. With that role, they'll be able to list the containers in the account, but not container contents. You can then grant access to specific directories and files by using ACLs.
\
Security groups
Always useMicrosoft Entra security groupsas the assigned principal in an ACL entry. Resist the opportunity to directly assign individual users or service principals. Using this structure will allow you to add and remove users or service principals without the need to reapply ACLs to an entire directory structure. Instead, you can just add or remove users and service principals from the appropriate Microsoft Entra security group.
There are many different ways to set up groups. For example, imagine that you have a directory named/LogDatawhich holds log data that is generated by your server. Azure Data Factory (ADF) ingests data into that folder. Specific users from the service engineering team will upload logs and manage other users of this folder, and various Databricks clusters will analyze logs from that folder.
To enable these activities, you could create aLogsWritergroup and aLogsReadergroup. Then, you could assign permissions as follows:
LogsWriter
LogsReader
Add theLogsWritergroup to the ACL of the/LogDatadirectory withrwxpermissions.
LogsWriter
rwx
Add theLogsReadergroup to the ACL of the/LogDatadirectory withr-xpermissions.
LogsReader
r-x
Add the service principal object or Managed Service Identity (MSI) for ADF to theLogsWritersgroup.
LogsWriters
Add users in the service engineering team to theLogsWritergroup.
LogsWriter
Add the service principal object or MSI for Databricks to theLogsReadergroup.
LogsReader
If a user in the service engineering team leaves the company, you could just remove them from theLogsWritergroup. If you did not add that user to a group, but instead, you added a dedicated ACL entry for that user, you would have to remove that ACL entry from the/LogDatadirectory. You would also have to remove the entry from all subdirectories and files in the entire directory hierarchy of the/LogDatadirectory.
LogsWriter
To create a group and add members, seeCreate a basic group and add members using Microsoft Entra ID.
Important
Azure Data Lake Storage Gen2 depends on Microsoft Entra ID to manage security groups. Microsoft Entra ID recommends that you limit group membership for a given security principal to less than 200. This recommendation is due to a limitation of JSON Web Tokens (JWT) that provide a security principal's group membership information within Microsoft Entra applications. Exceeding this limit might lead to unexpected performance issues with Data Lake Storage Gen2. To learn more, seeConfigure group claims for applications by using Microsoft Entra ID.
Limits on Azure role assignments and ACL entries
By using groups, you're less likely to exceed the maximum number of role assignments per subscription and the maximum number of ACL entries per file or directory. The following table describes these limits.
Shared Key and Shared Access Signature (SAS) authorization
Azure Data Lake Storage also supportsShared KeyandSASmethods for authentication.
In the case of Shared Key, the caller effectively gains 'super-user' access, meaning full access to all operations on all resources including data, setting owner, and changing ACLs. ACLs don't apply to users who use Shared Key authorization because no identity is associated with the caller and therefore security principal permission-based authorization cannot be performed. The same is true for shared access signature (SAS) tokens except when a user delegated SAS token is used. In that case, Azure Storage performs a POSIX ACL check against the object ID before it authorizes the operation as long as the optional parameter suoid is used. To learn more, seeConstruct a user delegation SAS.
Next steps
To learn more about access control lists, seeAccess control lists (ACLs) in Azure Data Lake Storage.
Feedback
Was this page helpful?
Additional resources