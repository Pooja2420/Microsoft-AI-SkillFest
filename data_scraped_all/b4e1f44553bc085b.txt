Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
find operator
Article
2025-01-28
4 contributors
In this article
Applies to: âMicrosoft FabricâAzure Data ExplorerâAzure MonitorâMicrosoft Sentinel
Finds rows that match a predicate across a set of tables.
The scope of thefindoperator can also be cross-database or cross-cluster.
find
find in (Table1, Table2, Table3) where Fruit=="apple"

find in (database('*').*) where Fruit == "apple"

find in (cluster('cluster_name').database('MyDB*').*) where Fruit == "apple"
find in (Table1, Table2, Table3) where Fruit=="apple"

find in (database('*').*) where Fruit == "apple"

find in (cluster('cluster_name').database('MyDB*').*) where Fruit == "apple"
find in (Table1, Table2, Table3) where Fruit=="apple"
find in (Table1, Table2, Table3) where Fruit=="apple"
Note
findoperator is substantially less efficient than column-specific text filtering. Whenever the columns are known, we recommend using thewhere operator.finddoesn't function well when the workspace contains large number of tables and columns and the data volume that is being scanned is high and the time range of the query is high.
find
find
Syntax
find[withsource=ColumnName] [in(Tables)]wherePredicate[project-smart|projectColumnName[:ColumnType,... ] [,pack_all()]]
find[withsource=ColumnName] [in(Tables)]wherePredicate[project-smart|projectColumnName[:ColumnType,... ] [,pack_all()]]
find
withsource
in
(
)
where
project-smart
project
:
,
,
pack_all()
findPredicate[project-smart|projectColumnName[:ColumnType,... ] [,pack_all()]]
findPredicate[project-smart|projectColumnName[:ColumnType,... ] [,pack_all()]]
find
project-smart
project
:
,
,
pack_all()
Learn more aboutsyntax conventions.
Parameters
string
bool
string
find
Events
(Events | where id==42)
E*
E
project-smart
project
string
project-smart
withsource=ColumnName: Optional. By default, the output includes a column calledsource_whose values indicate which source table contributed each row. If specified,ColumnNameis used instead ofsource_.
withsource=ColumnName: Optional. By default, the output includes a column calledsource_whose values indicate which source table contributed each row. If specified,ColumnNameis used instead ofsource_.
withsource=
Predicate: Abooleanexpressionover the columns of the input tablesTable[,Table, ...]. It's evaluated for each row in each input table. For more information, seepredicate-syntax details.
Predicate: Abooleanexpressionover the columns of the input tablesTable[,Table, ...]. It's evaluated for each row in each input table. For more information, seepredicate-syntax details.
boolean
,
Tables: Optional. Zero or more comma-separated table references. By defaultfindsearches all tables for:The name of a table, such asEventsA query expression, such as(Events | where id==42)A set of tables specified with a wildcard. For example,E*would form the union of all the tables whose names begin withE.
Tables: Optional. Zero or more comma-separated table references. By defaultfindsearches all tables for:
The name of a table, such asEvents
Events
A query expression, such as(Events | where id==42)
(Events | where id==42)
A set of tables specified with a wildcard. For example,E*would form the union of all the tables whose names begin withE.
E*
E
project-smart|project: If not specifiedproject-smartis used by default. For more information, seeoutput-schema details.
project-smart|project: If not specifiedproject-smartis used by default. For more information, seeoutput-schema details.
project-smart
project
project-smart
Returns
Transformation of rows inTable[,Table, ...] for whichPredicateistrue. The rows are transformed according to theoutput schema.
,
true
Output schema
source_ column
Thefindoperator output always includes asource_column with the source table name. The column can be renamed using thewithsourceparameter.
find
withsource
results columns
Source tables that don't contain any column used by the predicate evaluation, are filtered out.
When you useproject-smart, the columns that appear in the output are:
project-smart
Columns that appear explicitly in the predicate.
Columns that are common to all the filtered tables.
The rest of the columns are packed into a property bag and appear in an extrapackcolumn.
A column that is referenced explicitly by the predicate and appears in multiple tables with multiple types, has a different column in the result schema for each such type. Each of the column names is constructed from the original column name and type, separated by an underscore.
pack
When usingprojectColumnName[:ColumnType,... ] [,pack_all()]:
project
:
,
,
pack_all()
The result table includes the columns specified in the list. If a source table doesn't contain a certain column, the values in the corresponding rows are null.
When you specify aColumnTypewith aColumnName, this column in the "result" has the given type, and the values are cast to that type if needed. The casting doesn't have an effect on the column type when evaluating thePredicate.
Whenpack_all()is used, all the columns, including the projected columns, are packed into a property bag and appear in an extra column, by default 'column1'. In the property bag, the source column name serves as the property name and the column's value serves as the property value.
pack_all()
Predicate syntax
Thefindoperator supports an alternative syntax for the* hasterm, and using justterm, searches a term across all input columns.
find
* has
For a summary of some filtering functions, seewhere operator.
Considerations
If theprojectclause references a column that appears in multiple tables and has multiple types, a type must follow this column reference in the project clause
project
If a column appears in multiple tables and has multiple types andproject-smartis in use, there's a corresponding column for each type in thefind's result, as described inunion
project-smart
find
When you useproject-smart, changes in the predicate, in the source tables set, or in the tables schema, might result in a change to the output schema. If a constant result schema is needed, useprojectinstead
findscope can't includefunctions. To include a function in thefindscope, define alet statementwithview keyword.
find
find
Performance tips
Usetablesas opposed totabular expressions.
If tabular expression, the find operator falls back to aunionquery that can result in degraded performance.
union
If a column that appears in multiple tables and has multiple types, is part of the project clause, prefer adding aColumnTypeto the project clause over modifying the table before passing it tofind.
find
Add time-based filters to the predicate. Use a datetime column value oringestion_time().
Search in specific columns rather than a full text search.
It's better not to reference columns that appear in multiple tables and have multiple types. If the predicate is valid when resolving such columns type for more than one type, the query falls back to union.
For example, seeexamples of cases wherefindacts as a union.
find
Examples
The examples in this article use publicly available tables in thehelp cluster, such as theStormEventstable in theSamplesdatabase.
StormEvents
The examples in this article use publicly available tables, such as theStormEventstable in the Weather analyticssample data.
StormEvents
Term lookup across all tables
The query finds all rows from all tables in the current database in which any column includes the wordHernandez. The resulting records are transformed according to theoutput schema. The output includes rows from theCustomerstable and theSalesTabletable of theContosoSalesdatabase.
Hernandez
Customers
SalesTable
ContosoSales
Run the query
find "Hernandez"
find "Hernandez"
Output
This table shows the first three rows of the output.
Term lookup across all tables matching a name pattern
The query finds all rows from all tables in the current database whose name starts withC, and in which any column includes the wordHernandez. The resulting records are transformed according to theoutput schema. Now, the output only contains records from theCustomerstable.
C
Hernandez
Customers
Run the query
find in (C*) where * has "Hernandez"
find in (C*) where * has "Hernandez"
Output
This table shows the first three rows of the output.
Term lookup across the cluster
The query finds all rows from all tables in all databases in the cluster in which any column includes the wordKusto.
This query is across-databasequery.
The resulting records are transformed according to theoutput schema.
Kusto
Run the query
find in (database('*').*) where * has "Kusto"
find in (database('*').*) where * has "Kusto"
Output
This table shows the first three rows of the output.
Term lookup matching a name pattern in the cluster
The query finds all rows from all tables whose name starts withKin all databases whose name start withBand in which any column includes the wordKusto.
The resulting records are transformed according to theoutput schema.
K
B
Kusto
Run the query
find in (database("S*").C*) where * has "Kusto"
find in (database("S*").C*) where * has "Kusto"
Output
This table shows the first three rows of the output.
Term lookup in several clusters
The query finds all rows from all tables whose name starts withKin all databases whose name start withBand in which any column includes the wordKusto.
The resulting records are transformed according to theoutput schema.
K
B
Kusto
find in (cluster("cluster1").database("B*").K*, cluster("cluster2").database("C*".*))
where * has "Kusto"
find in (cluster("cluster1").database("B*").K*, cluster("cluster2").database("C*".*))
where * has "Kusto"
Term lookup across all tables
The query finds all rows from all tables in which any column includes the wordKusto.
The resulting records are transformed according to theoutput schema.
Kusto
find "Kusto"
find "Kusto"
Examples offindoutput results
find
The following examples show howfindcan be used over two tables:EventsTable1andEventsTable2.
Assume we have the next content of these two tables:
find
EventsTable1
EventsTable2
Search in common columns, project common, and uncommon columns, and pack the rest
The query searches for specific records inEventsTable1andEventsTable2based on a givenSession_Idand anErrorLevel. It then projects three specific columns:EventText,Version, andEventName, and packs all other remaining columns into a dynamic object.
find in (EventsTable1, EventsTable2) 
     where Session_Id == 'acbd207d-51aa-4df7-bfa7-be70eb68f04e' and Level == 'Error' 
     project EventText, Version, EventName, pack_all()
find in (EventsTable1, EventsTable2) 
     where Session_Id == 'acbd207d-51aa-4df7-bfa7-be70eb68f04e' and Level == 'Error' 
     project EventText, Version, EventName, pack_all()
Output
Search in common and uncommon columns
The query searches for records that either haveVersionas 'v1.0.0' orEventNameas 'Event1', and then it projects (selects) four specific columns:Session_Id,EventText,Version, andEventNamefrom those filtered results.
find Version == 'v1.0.0' or EventName == 'Event1' project Session_Id, EventText, Version, EventName
find Version == 'v1.0.0' or EventName == 'Event1' project Session_Id, EventText, Version, EventName
Output
Note
In practice,EventsTable1rows are filtered withVersion == 'v1.0.0'predicate andEventsTable2rows are filtered withEventName == 'Event1'predicate.
Version == 'v1.0.0'
EventName == 'Event1'
Use abbreviated notation to search across all tables in the current database
This query searches the database for any records with aSession_Idthat matches 'acbd207d-51aa-4df7-bfa7-be70eb68f04e'. It retrieves records from all tables and columns that contain this specificSession_Id.
find Session_Id == 'acbd207d-51aa-4df7-bfa7-be70eb68f04e'
find Session_Id == 'acbd207d-51aa-4df7-bfa7-be70eb68f04e'
Output
Return the results from each row as a property bag
This query searches the database for records with the specifiedSession_Idand returns all columns of those records as a single dynamic object.
find Session_Id == 'acbd207d-51aa-4df7-bfa7-be70eb68f04e' project pack_all()
find Session_Id == 'acbd207d-51aa-4df7-bfa7-be70eb68f04e' project pack_all()
Output
Examples of cases wherefindacts asunion
find
union
Thefindoperator in Kusto can sometimes act like aunionoperator, mainly when it's used to search across multiple tables.
find
union
Using a nontabular expression as find operand
The query first creates a view that filtersEventsTable1to only include error-level records. Then, it searches within this filtered view and the EventsTable2 table for records with a specificSession_Id.
let PartialEventsTable1 = view() { EventsTable1 | where Level == 'Error' };
find in (PartialEventsTable1, EventsTable2) 
     where Session_Id == 'acbd207d-51aa-4df7-bfa7-be70eb68f04e'
let PartialEventsTable1 = view() { EventsTable1 | where Level == 'Error' };
find in (PartialEventsTable1, EventsTable2) 
     where Session_Id == 'acbd207d-51aa-4df7-bfa7-be70eb68f04e'
Referencing a column that appears in multiple tables and has multiple types
For this example, create two tables by running:
.create tables 
  Table1 (Level:string, Timestamp:datetime, ProcessId:string),
  Table2 (Level:string, Timestamp:datetime, ProcessId:int64)
.create tables 
  Table1 (Level:string, Timestamp:datetime, ProcessId:string),
  Table2 (Level:string, Timestamp:datetime, ProcessId:int64)
The following query is executed asunion.
union
find in (Table1, Table2) where ProcessId == 1001
find in (Table1, Table2) where ProcessId == 1001
The output result schema is(Level:string, Timestamp, ProcessId_string, ProcessId_int).
The following query is executed asunion, but produces a different result schema.
union
find in (Table1, Table2) where ProcessId == 1001 project Level, Timestamp, ProcessId:string
find in (Table1, Table2) where ProcessId == 1001 project Level, Timestamp, ProcessId:string
The output result schema is(Level:string, Timestamp, ProcessId_string)
Feedback
Was this page helpful?
Additional resources