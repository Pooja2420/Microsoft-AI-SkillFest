Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
File transforms and variable substitution reference
Article
2020-02-18
2 contributors
In this article
TFS 2018
Note
Microsoft Visual Studio Team Foundation Server 2018 and earlier versions have the following differences in naming:
Pipelinesfor build and release are calleddefinitions
Runsare calledbuilds
Service connectionsare calledservice endpoints
Stagesare calledenvironments
Jobsare calledphases
Some tasks, such as theAzure App Service Deploytask
version 3 and later and theIIS Web App Deploytask, allow users to configure the package based on the environment specified.
These tasks usemsdeploy.exe, which supports the overriding of values in theweb.configfile with values from theparameters.xmlfile.
However, file transforms and variable substitution arenot confined to web app files. You can use these techniques with any XML or JSON files.
Configuration substitution is specified in theFile Transform and Variable Substitution Optionssection of the settings for the tasks. The transformation and substitution options are:
XML transformation
XML variable substitution
JSON variable substitution
When the task runs, it first performs XML transformation, XML variable substitution, and JSON variable substitution
on configuration and parameters files. Next, it invokesmsdeploy.exe, which uses
theparameters.xmlfile to substitute values in theweb.configfile.

XML Transformation
XML transformation supports transforming the configuration files (*.configfiles)
by followingWeb.config Transformation Syntaxand is based on the environment to which the web package will be deployed.
This option is useful when you want to add, remove or modify configurations for different environments.
Transformation will be applied for other configuration files including Console or Windows service application
configuration files (for example,FabrikamService.exe.config).
*.config
Configuration transform file naming conventions
XML transformation will be run on the*.configfile for
transformation configuration files named*.Release.configor*.<stage>.configand will be executed in the following order:
*.config
*.Release.config
*.<stage>.config
*.Release.config(for example,fabrikam.Release.config)
*.Release.config
*.<stage>.config(for example,fabrikam.Production.config)
*.<stage>.config
For example, if your package contains the following files:
Web.config
Web.Debug.config
Web.Release.config
Web.Production.config
and your stage name isProduction, the transformation is applied
forWeb.configwithWeb.Release.configfollowed byWeb.Production.config.
Web.config
Web.Release.config
Web.Production.config
XML transformation example
Create a Web Application package with the necessary configuration and transform files.
For example, use the following configuration files:Configuration file<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <connectionStrings>
    <add name="DefaultConnection"
         connectionString="Data Source=(LocalDb)\\MSDB;DbFilename=aspcore-local.mdf;" />
  </connectionStrings>
  <appSettings>
    <add key="webpages:Version" value="3.0.0.0" />
    <add key="webpages:Enabled" value="false" />
  </appSettings>
  <system.web>
    <authentication mode="None" />
    <compilation targetFramework="4.5" debug="true" />
  </system.web>
</configuration>Transform file<?xml version="1.0"?>
<configuration xmlns:xdt="http://schemas.microsoft.com/XML-Document-Transform">
    <connectionStrings>
      <add name="MyDB"
           connectionString="Data Source=ReleaseSQLServer;Initial Catalog=MyReleaseDB;Integrated Security=True"
           xdt:Transform="Insert" />
    </connectionStrings>
  <appSettings>
    <add xdt:Transform="Replace" xdt:Locator="Match(key)" key="webpages:Enabled" value="true" />
  </appSettings>
  <system.web>
    <compilation xdt:Transform="RemoveAttributes(debug)" />
  </system.web>
</configuration>This example transform configuration file does three things:It adds a new database connection string inside theConnectionStringselement.It modifies value ofWebpages:Enabledinside theappSettingselement.It removes thedebugattribute from thecompilationelement inside theSystem.Webelement.For more information, seeWeb.config Transformation Syntax for Web Project Deployment Using Visual Studio
Create a Web Application package with the necessary configuration and transform files.
For example, use the following configuration files:
Configuration file
<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <connectionStrings>
    <add name="DefaultConnection"
         connectionString="Data Source=(LocalDb)\\MSDB;DbFilename=aspcore-local.mdf;" />
  </connectionStrings>
  <appSettings>
    <add key="webpages:Version" value="3.0.0.0" />
    <add key="webpages:Enabled" value="false" />
  </appSettings>
  <system.web>
    <authentication mode="None" />
    <compilation targetFramework="4.5" debug="true" />
  </system.web>
</configuration>
<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <connectionStrings>
    <add name="DefaultConnection"
         connectionString="Data Source=(LocalDb)\\MSDB;DbFilename=aspcore-local.mdf;" />
  </connectionStrings>
  <appSettings>
    <add key="webpages:Version" value="3.0.0.0" />
    <add key="webpages:Enabled" value="false" />
  </appSettings>
  <system.web>
    <authentication mode="None" />
    <compilation targetFramework="4.5" debug="true" />
  </system.web>
</configuration>

Transform file
<?xml version="1.0"?>
<configuration xmlns:xdt="http://schemas.microsoft.com/XML-Document-Transform">
    <connectionStrings>
      <add name="MyDB"
           connectionString="Data Source=ReleaseSQLServer;Initial Catalog=MyReleaseDB;Integrated Security=True"
           xdt:Transform="Insert" />
    </connectionStrings>
  <appSettings>
    <add xdt:Transform="Replace" xdt:Locator="Match(key)" key="webpages:Enabled" value="true" />
  </appSettings>
  <system.web>
    <compilation xdt:Transform="RemoveAttributes(debug)" />
  </system.web>
</configuration>
<?xml version="1.0"?>
<configuration xmlns:xdt="http://schemas.microsoft.com/XML-Document-Transform">
    <connectionStrings>
      <add name="MyDB"
           connectionString="Data Source=ReleaseSQLServer;Initial Catalog=MyReleaseDB;Integrated Security=True"
           xdt:Transform="Insert" />
    </connectionStrings>
  <appSettings>
    <add xdt:Transform="Replace" xdt:Locator="Match(key)" key="webpages:Enabled" value="true" />
  </appSettings>
  <system.web>
    <compilation xdt:Transform="RemoveAttributes(debug)" />
  </system.web>
</configuration>

This example transform configuration file does three things:
It adds a new database connection string inside theConnectionStringselement.
ConnectionStrings
It modifies value ofWebpages:Enabledinside theappSettingselement.
Webpages:Enabled
appSettings
It removes thedebugattribute from thecompilationelement inside theSystem.Webelement.
debug
compilation
System.Web
For more information, seeWeb.config Transformation Syntax for Web Project Deployment Using Visual Studio
Create a release pipeline with a stage namedRelease.
Create a release pipeline with a stage namedRelease.
Add anAzure App Service Deploytask and set (tick) theXML transformationoption.
Add anAzure App Service Deploytask and set (tick) theXML transformationoption.

Save the release pipeline and start a new release.
Save the release pipeline and start a new release.
Open theWeb.configfile to see the transformations fromWeb.Release.config.<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <connectionStrings>
    <add name="DefaultConnection"
         connectionString="Data Source=(LocalDb)\\MSDB;DbFilename=aspcore-local.mdf;" />
  <add name="MyDB"
       connectionString="Data Source=ReleaseSQLServer;Initial Catalog=MyReleaseDB;Integrated Security=True" />
  </connectionStrings>
  <appSettings>
    <add key="webpages:Version" value="3.0.0.0" />
    <add key="webpages:Enabled" value="true" />
  </appSettings>
  <system.web>
    <authentication mode="None" />
    <compilation targetFramework="4.5" />
  </system.web>
</configuration>
Open theWeb.configfile to see the transformations fromWeb.Release.config.
Web.config
Web.Release.config
<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <connectionStrings>
    <add name="DefaultConnection"
         connectionString="Data Source=(LocalDb)\\MSDB;DbFilename=aspcore-local.mdf;" />
  <add name="MyDB"
       connectionString="Data Source=ReleaseSQLServer;Initial Catalog=MyReleaseDB;Integrated Security=True" />
  </connectionStrings>
  <appSettings>
    <add key="webpages:Version" value="3.0.0.0" />
    <add key="webpages:Enabled" value="true" />
  </appSettings>
  <system.web>
    <authentication mode="None" />
    <compilation targetFramework="4.5" />
  </system.web>
</configuration>
<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <connectionStrings>
    <add name="DefaultConnection"
         connectionString="Data Source=(LocalDb)\\MSDB;DbFilename=aspcore-local.mdf;" />
  <add name="MyDB"
       connectionString="Data Source=ReleaseSQLServer;Initial Catalog=MyReleaseDB;Integrated Security=True" />
  </connectionStrings>
  <appSettings>
    <add key="webpages:Version" value="3.0.0.0" />
    <add key="webpages:Enabled" value="true" />
  </appSettings>
  <system.web>
    <authentication mode="None" />
    <compilation targetFramework="4.5" />
  </system.web>
</configuration>
XML transformation notes
You can use this technique to create a default package and deploy it to multiple stages.
You can use this technique to create a default package and deploy it to multiple stages.
XML transformation takes effect only when the configuration file and transform file
are in the same folder within the specified package.
XML transformation takes effect only when the configuration file and transform file
are in the same folder within the specified package.
By default, MSBuild applies the transformation as it generates the web package if the<DependentUpon>element
is already present in the transform file in the*.csprojfile. In such cases, theAzure App Service Deploytask will fail because there is no further transformation applied on theWeb.configfile. Therefore, it is
recommended that the<DependentUpon>element is removed from all the transform files to disable any build-time
configuration when using XML transformation.
By default, MSBuild applies the transformation as it generates the web package if the<DependentUpon>element
is already present in the transform file in the*.csprojfile. In such cases, theAzure App Service Deploytask will fail because there is no further transformation applied on theWeb.configfile. Therefore, it is
recommended that the<DependentUpon>element is removed from all the transform files to disable any build-time
configuration when using XML transformation.
<DependentUpon>
*.csproj
Web.config
<DependentUpon>
Set theBuild Actionproperty for each of the transformation files (Web.config) toContentso that the files are copied to the root folder....
<Content Include="Web.Debug.config">
   <DependentUpon>Web.config</DependentUpon>
</Content>
<Content Include="Web.Release.config">
   <DependentUpon>Web.config</DependentUpon>
</Content>
...
Set theBuild Actionproperty for each of the transformation files (Web.config) toContentso that the files are copied to the root folder.
Web.config
...
<Content Include="Web.Debug.config">
   <DependentUpon>Web.config</DependentUpon>
</Content>
<Content Include="Web.Release.config">
   <DependentUpon>Web.config</DependentUpon>
</Content>
...
...
<Content Include="Web.Debug.config">
   <DependentUpon>Web.config</DependentUpon>
</Content>
<Content Include="Web.Release.config">
   <DependentUpon>Web.config</DependentUpon>
</Content>
...

XML variable substitution
This feature enables you to modify configuration settings in configuration files (*.configfiles)
inside web packages and XML parameters files (parameters.xml).
In this way, the same package can be configured based on the environment to which it will be deployed.
*.config
parameters.xml
Variable substitution takes effect only on theapplicationSettings,appSettings,connectionStrings,
andconfigSectionselements of configuration files. If you are looking to substitute values outside of these elements you can use a (parameters.xml) file, however you will need to use a 3rd party pipeline task to handle the variable substitution.
applicationSettings
appSettings
connectionStrings
configSections
parameters.xml
XML variable substitution example
As an example, consider the task of changing the following values inWeb.config:
Web.config
<?xml version="1.0" encoding="utf-8"?>
<configuration>
    <configSection>
        <section name="entityFramework" />
    </configSection>
    <connectionStrings>
        <!-- Change connectionString in this line: --> 
        <add name="DefaultConnection"
             connectionString="Data Source=(LocalDB)\LocalDB;FileName=Local.mdf" />
    </connectionStrings>
    <appSettings>
        <add key="ClientValidationEnabled" value="true" />
        <add key="UnobstructiveJavascriptEnabled" value="true" />
        <!-- Change AdminUserName in this line: --> 
        <add key="AdminUserName" value="__AdminUserName__" />
        <!-- Change AdminPassword in this line: --> 
        <add key="AdminPassword" value="__AdminPassword__" />
    </appSettings>
    <entityFramework>
        <defaultConnectionFactory type="System.Data.Entity.LocalDbConnectionFactory">
            <parameters></parameters>
        </defaultConnectionFactory>
        <providers>
            <!-- Change invariantName in this line: --> 
            <provider invariantName="System.Data.SqlClient" type="System.Data.Entity.SqlServer" />
        </providers>
    </entityFramework>
</configuration>
<?xml version="1.0" encoding="utf-8"?>
<configuration>
    <configSection>
        <section name="entityFramework" />
    </configSection>
    <connectionStrings>
        <!-- Change connectionString in this line: --> 
        <add name="DefaultConnection"
             connectionString="Data Source=(LocalDB)\LocalDB;FileName=Local.mdf" />
    </connectionStrings>
    <appSettings>
        <add key="ClientValidationEnabled" value="true" />
        <add key="UnobstructiveJavascriptEnabled" value="true" />
        <!-- Change AdminUserName in this line: --> 
        <add key="AdminUserName" value="__AdminUserName__" />
        <!-- Change AdminPassword in this line: --> 
        <add key="AdminPassword" value="__AdminPassword__" />
    </appSettings>
    <entityFramework>
        <defaultConnectionFactory type="System.Data.Entity.LocalDbConnectionFactory">
            <parameters></parameters>
        </defaultConnectionFactory>
        <providers>
            <!-- Change invariantName in this line: --> 
            <provider invariantName="System.Data.SqlClient" type="System.Data.Entity.SqlServer" />
        </providers>
    </entityFramework>
</configuration>

Create a release pipeline with a stage namedRelease.
Create a release pipeline with a stage namedRelease.
Add anAzure App Service Deploytask and set (tick) theXML variable substitutionoption.
Add anAzure App Service Deploytask and set (tick) theXML variable substitutionoption.

Define the required values in release pipeline variables:NameValueSecureScopeDefaultConnectionData Source=(ProdDB)\MSSQLProdDB;AttachFileName=Local.mdfNoReleaseAdminUserNameProdAdminNameNoReleaseAdminPassword[your-password]YesReleaseinvariantNameSystem.Data.SqlClientExtensionNoRelease
Define the required values in release pipeline variables:
Save the release pipeline and start a new release.
Save the release pipeline and start a new release.
Open theWeb.configfile to see the variable substitutions.<?xml version="1.0" encoding="utf-8"?>
<configuration>
    <configSection>
        <section name="entityFramework" />
    </configSection>
    <connectionStrings>
        <add name="DefaultConnection"
             connectionString="Data Source=(ProdDB)\MSSQLProdDB;AttachFileName=Local.mdf" />
    </connectionStrings>
    <appSettings>
        <add key="ClientValidationEnabled" value="true" />
        <add key="UnobstructiveJavascriptEnabled" value="true" />
        <add key="AdminUserName" value="ProdAdminName" />
        <add key="AdminPassword" value="*password_masked_for_display*" />
    </appSettings>
    <entityFramework>
        <defaultConnectionFactory type="System.Data.Entity.LocalDbConnectionFactory">
            <parameters></parameters>
        </defaultConnectionFactory>
        <providers>
            <provider invariantName="System.Data.SqlClientExtension"
                      type="System.Data.Entity.SqlServer" />
        </providers>
    </entityFramework>
</configuration>
Open theWeb.configfile to see the variable substitutions.
Web.config
<?xml version="1.0" encoding="utf-8"?>
<configuration>
    <configSection>
        <section name="entityFramework" />
    </configSection>
    <connectionStrings>
        <add name="DefaultConnection"
             connectionString="Data Source=(ProdDB)\MSSQLProdDB;AttachFileName=Local.mdf" />
    </connectionStrings>
    <appSettings>
        <add key="ClientValidationEnabled" value="true" />
        <add key="UnobstructiveJavascriptEnabled" value="true" />
        <add key="AdminUserName" value="ProdAdminName" />
        <add key="AdminPassword" value="*password_masked_for_display*" />
    </appSettings>
    <entityFramework>
        <defaultConnectionFactory type="System.Data.Entity.LocalDbConnectionFactory">
            <parameters></parameters>
        </defaultConnectionFactory>
        <providers>
            <provider invariantName="System.Data.SqlClientExtension"
                      type="System.Data.Entity.SqlServer" />
        </providers>
    </entityFramework>
</configuration>
<?xml version="1.0" encoding="utf-8"?>
<configuration>
    <configSection>
        <section name="entityFramework" />
    </configSection>
    <connectionStrings>
        <add name="DefaultConnection"
             connectionString="Data Source=(ProdDB)\MSSQLProdDB;AttachFileName=Local.mdf" />
    </connectionStrings>
    <appSettings>
        <add key="ClientValidationEnabled" value="true" />
        <add key="UnobstructiveJavascriptEnabled" value="true" />
        <add key="AdminUserName" value="ProdAdminName" />
        <add key="AdminPassword" value="*password_masked_for_display*" />
    </appSettings>
    <entityFramework>
        <defaultConnectionFactory type="System.Data.Entity.LocalDbConnectionFactory">
            <parameters></parameters>
        </defaultConnectionFactory>
        <providers>
            <provider invariantName="System.Data.SqlClientExtension"
                      type="System.Data.Entity.SqlServer" />
        </providers>
    </entityFramework>
</configuration>
XML variable substitution notes
By default, ASP.NET applications have a default parameterized connection attribute.
These values are overridden only in theparameters.xmlfile inside the web package.
By default, ASP.NET applications have a default parameterized connection attribute.
These values are overridden only in theparameters.xmlfile inside the web package.
parameters.xml
Because substitution occurs before deployment, the user can override the
values inWeb.configusingparameters.xml(inside the web package) or
asetparametersfile.
Because substitution occurs before deployment, the user can override the
values inWeb.configusingparameters.xml(inside the web package) or
asetparametersfile.
Web.config
parameters.xml
setparameters

JSON variable substitution
This feature substitutes values in the JSON configuration files.
It overrides the values in the specified JSON configuration files
(for example,appsettings.json) with the values matching names of release pipeline
and stage variables.
appsettings.json
To substitute variables in specific JSON files, provide newline-separated
list of JSON files. File names must be specified relative to the root folder.
For example, if your package has this structure:
/WebPackage(.zip)
  /---- content
    /----- website
      /---- appsettings.json
      /---- web.config
      /---- [other folders] 
  /--- archive.xml
  /--- systeminfo.xml
/WebPackage(.zip)
  /---- content
    /----- website
      /---- appsettings.json
      /---- web.config
      /---- [other folders] 
  /--- archive.xml
  /--- systeminfo.xml
and you want to substitute values inappsettings.json, enter the relative
path from the root folder; for examplecontent/website/appsettings.json.
Alternatively, use wildcard patterns to search for specific JSON files.
For example,**/appsettings.jsonreturns the relative path and name of files
namedappsettings.json.
content/website/appsettings.json
**/appsettings.json
JSON variable substitution example
As an example, consider the task of overriding values in this JSON file:
{
  "Data": {
    "DefaultConnection": {
      "ConnectionString": "Data Source=(LocalDb)\\MSDB;AttachDbFilename=aspcore-local.mdf;"
    },
    "DebugMode": "enabled",
    "DBAccess": {
      "Administrators": ["Admin-1", "Admin-2"],
      "Users": ["Vendor-1", "vendor-3"]
    },
    "FeatureFlags": {
      "Preview": [
        {
          "newUI": "AllAccounts"
        },
        {
          "NewWelcomeMessage": "Newusers"
        }
      ]
    }
  }
}
{
  "Data": {
    "DefaultConnection": {
      "ConnectionString": "Data Source=(LocalDb)\\MSDB;AttachDbFilename=aspcore-local.mdf;"
    },
    "DebugMode": "enabled",
    "DBAccess": {
      "Administrators": ["Admin-1", "Admin-2"],
      "Users": ["Vendor-1", "vendor-3"]
    },
    "FeatureFlags": {
      "Preview": [
        {
          "newUI": "AllAccounts"
        },
        {
          "NewWelcomeMessage": "Newusers"
        }
      ]
    }
  }
}

The task is to override the values ofConnectionString,DebugMode,
the first of theUsersvalues, andNewWelcomeMessageat the respective places within the JSON file hierarchy.
Classic
YAML
Create a release pipeline with a stage namedRelease.
Create a release pipeline with a stage namedRelease.
Add anAzure App Service Deploytask and enter a newline-separated
list of JSON files to substitute the variable values in theJSON variable substitutiontextbox.
Files names must be relative to the root folder.
You can use wildcards to search for JSON files. For example:**/*.jsonmeans substitute values in all the JSON files within the package.
Add anAzure App Service Deploytask and enter a newline-separated
list of JSON files to substitute the variable values in theJSON variable substitutiontextbox.
Files names must be relative to the root folder.
You can use wildcards to search for JSON files. For example:**/*.jsonmeans substitute values in all the JSON files within the package.
**/*.json

Define the required substitution values in release pipeline or stage variables.NameValueSecureScopeData.DebugModedisabledNoReleaseData.DefaultConnection.ConnectionStringData Source=(prodDB)\MSDB;AttachDbFilename=prod.mdf;NoReleaseData.DBAccess.Users.0Admin-3YesReleaseData.FeatureFlags.Preview.1.NewWelcomeMessageAllAccountsNoRelease
Define the required substitution values in release pipeline or stage variables.
Save the release pipeline and start a new release.
Save the release pipeline and start a new release.
After the transformation, the JSON will contain the following:{
  "Data": {
    "DefaultConnection": {
      "ConnectionString": "Data Source=(prodDB)\MSDB;AttachDbFilename=prod.mdf;"
    },
    "DebugMode": "disabled",
    "DBAccess": {
      "Administrators": ["Admin-1", "Admin-2"],
      "Users": ["Admin-3", "vendor-3"]
    },
    "FeatureFlags": {
      "Preview": [
        {
          "newUI": "AllAccounts"
        },
        {
          "NewWelcomeMessage": "AllAccounts"
        }
      ]
    }
  }
}
'''
After the transformation, the JSON will contain the following:
{
  "Data": {
    "DefaultConnection": {
      "ConnectionString": "Data Source=(prodDB)\MSDB;AttachDbFilename=prod.mdf;"
    },
    "DebugMode": "disabled",
    "DBAccess": {
      "Administrators": ["Admin-1", "Admin-2"],
      "Users": ["Admin-3", "vendor-3"]
    },
    "FeatureFlags": {
      "Preview": [
        {
          "newUI": "AllAccounts"
        },
        {
          "NewWelcomeMessage": "AllAccounts"
        }
      ]
    }
  }
}
'''
{
  "Data": {
    "DefaultConnection": {
      "ConnectionString": "Data Source=(prodDB)\MSDB;AttachDbFilename=prod.mdf;"
    },
    "DebugMode": "disabled",
    "DBAccess": {
      "Administrators": ["Admin-1", "Admin-2"],
      "Users": ["Admin-3", "vendor-3"]
    },
    "FeatureFlags": {
      "Preview": [
        {
          "newUI": "AllAccounts"
        },
        {
          "NewWelcomeMessage": "AllAccounts"
        }
      ]
    }
  }
}
'''
Following YAML snippet showcases JSON variable substitution.
variables:
  Data.DebugMode: disabled
  Data.DefaultConnection.ConnectionString: 'Data Source=(prodDB)\MSDB;AttachDbFilename=prod.mdf;'
  Data.DBAccess.Users.0: Admin-3
  Data.FeatureFlags.Preview.1.NewWelcomeMessage: AllAccounts

# Update appsettings.json via FileTransform task.
- task: FileTransform@1
  displayName: 'File transformation: appsettings.json'
  inputs:
    folderPath: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
    targetFiles: '**/appsettings.json'
    fileType: json
  
# Deploy web app
- task: AzureWebApp@1
  inputs:
    azureSubscription: <Name of the Azure subscription>
    appName: <Name of the Azure WebApp>
    package: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
variables:
  Data.DebugMode: disabled
  Data.DefaultConnection.ConnectionString: 'Data Source=(prodDB)\MSDB;AttachDbFilename=prod.mdf;'
  Data.DBAccess.Users.0: Admin-3
  Data.FeatureFlags.Preview.1.NewWelcomeMessage: AllAccounts

# Update appsettings.json via FileTransform task.
- task: FileTransform@1
  displayName: 'File transformation: appsettings.json'
  inputs:
    folderPath: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
    targetFiles: '**/appsettings.json'
    fileType: json
  
# Deploy web app
- task: AzureWebApp@1
  inputs:
    azureSubscription: <Name of the Azure subscription>
    appName: <Name of the Azure WebApp>
    package: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
JSON variable substitution notes
To substitute values in nested levels of the file, concatenate the names with
a period (.) in hierarchical order.
To substitute values in nested levels of the file, concatenate the names with
a period (.) in hierarchical order.
.
A JSON object may contain an array whose values can be referenced by their index.
For example, to substitute the first value in theUsersarray shown above,
use the variable nameDBAccess.Users.0. To update the value inNewWelcomeMessage,
use the variable nameFeatureFlags.Preview.1.NewWelcomeMessage. However, thefile transform taskhas the ability to transform entire arrays in JSON files. You can also useDBAccess.Users = ["NewUser1","NewUser2","NewUser3"].
A JSON object may contain an array whose values can be referenced by their index.
For example, to substitute the first value in theUsersarray shown above,
use the variable nameDBAccess.Users.0. To update the value inNewWelcomeMessage,
use the variable nameFeatureFlags.Preview.1.NewWelcomeMessage. However, thefile transform taskhas the ability to transform entire arrays in JSON files. You can also useDBAccess.Users = ["NewUser1","NewUser2","NewUser3"].
DBAccess.Users.0
FeatureFlags.Preview.1.NewWelcomeMessage
DBAccess.Users = ["NewUser1","NewUser2","NewUser3"]
OnlyStringsubstitution is supported for JSON variable substitution.
OnlyStringsubstitution is supported for JSON variable substitution.
Substitution is supported for only UTF-8 and UTF-16 LE encoded files.
Substitution is supported for only UTF-8 and UTF-16 LE encoded files.
If the file specification you enter does not match any file, the task will fail.
If the file specification you enter does not match any file, the task will fail.
Variable name matching is case-sensitive.
Variable name matching is case-sensitive.
Variable substitution is applied for only the JSON keys predefined in the object hierarchy. It does not create new keys.
Variable substitution is applied for only the JSON keys predefined in the object hierarchy. It does not create new keys.
If a variable name includes periods ("."), the transformation will attempt to locate the item within the hierarchy.
For example, if the variable name isfirst.second.third, the transformation process will search for:"first" : {
  "second": {
    "third" : "value"
  }
}as well as"first.second.third" : "value".
If a variable name includes periods ("."), the transformation will attempt to locate the item within the hierarchy.
For example, if the variable name isfirst.second.third, the transformation process will search for:
first.second.third
"first" : {
  "second": {
    "third" : "value"
  }
}
"first" : {
  "second": {
    "third" : "value"
  }
}
as well as"first.second.third" : "value".
"first.second.third" : "value"
Additional resources