Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Manage Azure AD B2C with Microsoft Graph
Article
2025-04-18
21 contributors
In this article
Microsoft Graph allows you to manage resources in your Azure AD B2C directory. The following Microsoft Graph API operations are supported for the management of Azure AD B2C resources, including users, identity providers, user flows, custom policies, and policy keys. Each link in the following sections targets the corresponding page within the Microsoft Graph API reference for that operation.
Note
You can also programmatically create an Azure AD B2C directory itself, along with the corresponding Azure resource linked to an Azure subscription. This functionality isn't exposed through the Microsoft Graph API, but through the Azure REST API. For more information, seeB2C Tenants - Create.
Prerequisites
To use MS Graph API, and interact with resources in your Azure AD B2C tenant, you need an application registration that grants the permissions to do so. Follow the steps in theRegister a Microsoft Graph applicationarticle to create an application registration that your management application can use.
User management
Note
Azure AD B2C currently doesn't support advanced query capabilities on directory objects. This means that there's no support for$count,$searchquery parameters and Not (not), Not equals (ne), and Ends with (endsWith) operators in$filterquery parameter. For more information, seequery parameters in Microsoft Graphandadvanced query capabilities in Microsoft Graph.
$count
$search
not
ne
endsWith
$filter
List users
Create a consumer user
Get a user
Update a user
Delete a user
User migration
Watch this video to learn how user migration to Azure AD B2C can be managed using Microsoft Graph API.
User phone number management
A phone number that can be used by a user to sign-in usingSMS or voice calls, ormultifactor authentication. For more information, seeMicrosoft Entra authentication methods API.
Add
List
Get
Update
Delete
Note, thelistoperation returns  only enabled phone numbers. The following phone number should be enabled to use with the list operations.
Note
A correctly represented phone number is stored with a space between the country code and the phone number. The Azure AD B2C service doesn't currently add this space by default.

Self-service password reset email address
An email address that can be used by ausername sign-in accountto reset the password. For more information, seeMicrosoft Entra authentication methods API.
Add
List
Get
Update
Delete
Software OATH token authentication method
A software OATH token is a software-based number generator that uses the OATH time-based one-time password (TOTP) standard for multifactor authentication via an authenticator app. Use the Microsoft Graph API to manage a software OATH token registered to a user:
List
Get
Delete
Identity providers
Manage theidentity providersavailable to your user flows in your Azure AD B2C tenant.
List identity providers available in the Azure AD B2C tenant
List identity providers configured in the Azure AD B2C tenant
Create an identity provider
Get an identity provider
Update identity provider
Delete an identity provider
User flow (beta)
Configure prebuilt policies for sign-up, sign-in, combined sign-up and sign-in, password reset, and profile update.
List user flows
Create a user flow
Get a user flow
Delete a user flow
User flow authentication methods (beta)
Choose a mechanism for letting users register via local accounts. A Local account is one where Azure AD B2C completes the identity assertion. For more information, seeb2cAuthenticationMethodsPolicy resource type.
Get
Update
Custom policies (beta)
The following operations allow you to manage your Azure AD B2C Trust Framework policies, known ascustom policies.
List all trust framework policies configured in a tenant
Create trust framework policy
Read properties of an existing trust framework policy
Update or create trust framework policy.
Delete an existing trust framework policy
Policy keys (beta)
The Identity Experience Framework stores the secrets referenced in a custom policy to establish trust between components. These secrets can be symmetric or asymmetric keys/values. In the Azure portal, these entities are shown asPolicy keys.
The top-level resource for policy keys in the Microsoft Graph API is theTrusted Framework Keyset. EachKeysetcontains at least oneKey. To create a key, first create an empty keyset, and then generate a key in the keyset. You can create a manual secret, upload a certificate, or a PKCS12 key. The key can be a generated secret, a string (such as the Facebook application secret), or a certificate you upload. If a keyset has multiple keys, only one of the keys is active.
Trust Framework policy keyset
List the trust framework keysets
Create a trust framework keysets
Get a keyset
Update a trust framework keysets
Delete a trust framework keysets
Trust Framework policy key
Get currently active key in the keyset
Generate a key in keyset
Upload a string based secret
Upload a X.509 certificate
Upload a PKCS12 format certificate
Applications
List applications
Create an application
Update application
Create servicePrincipal
Create oauth2Permission Grant
Delete application
Application extension (directory extension) properties
Application extension properties are also known as directory or Microsoft Entra extensions. To manage them in Azure AD B2C, use theidentityUserFlowAttribute resource typeand its associated methods.
Create user flow attribute
List user flow attributes
Get a user flow attribute
Update a user flow attribute
Delete a user flow attribute
You can store up to 100 directory extension values per user. To manage the directory extension properties for a user, use the followingUser APIsin Microsoft Graph.
Update user: To write or remove the value of the directory extension property from the user object.
Get a user: To retrieve the value of the directory extension for the user. The property is returned by default through thebetaendpoint, but only on$selectthrough thev1.0endpoint.
beta
$select
v1.0
For user flows, these extension properties aremanaged by using the Azure portal. For custom policies, Azure AD B2C creates the property for you, the first time the policy writes a value to the extension property.
Note
In Microsoft Entra ID, directory extensions are managed through theextensionProperty resource typeand its associated methods. However, because they're used in B2C through theb2c-extensions-appapp which shouldn't be updated, they're managed in Azure AD B2C using theidentityUserFlowAttribute resource typeand its associated methods.
b2c-extensions-app
Tenant usage
Use theGet organization detailsAPI to get your directory size quota. You need to add the$selectquery parameter as shown in the following HTTP request:
$select
GET https://graph.microsoft.com/v1.0/organization/organization-id?$select=directorySizeQuota
GET https://graph.microsoft.com/v1.0/organization/organization-id?$select=directorySizeQuota
Replaceorganization-idwith your organization or tenant ID.
organization-id
The response to the above request looks similar to the following JSON snippet:
{
    "directorySizeQuota": {
        "used": 156,
        "total": 1250000
    }
}
{
    "directorySizeQuota": {
        "used": 156,
        "total": 1250000
    }
}
Audit logs
List audit logs
For more information about accessing Azure AD B2C audit logs, seeAccessing Azure AD B2C audit logs.
Conditional Access
List the built-in templates for Conditional Access policy scenarios
List all of the Conditional Access policies
Read properties and relationships of a Conditional Access policy
Create a new Conditional Access policy
Update a Conditional Access policy
Delete a Conditional Access policy
Retrieve or restore deleted users and applications
Deleted users and apps can only be restored if they were deleted within the last 30 days.
List deleted items
Get a deleted item
Restore a deleted item
Permanently delete a deleted item
How to programmatically manage Microsoft Graph
You can manage Microsoft Graph in two ways:
Delegated permissionseither the user or an administrator consents to the permissions that the app requests. The app is delegated with the permission to act as a signed-in user when it makes calls to the target resource.
Application permissionsare used by apps that don't require a signed in user present. Because of this, only administrators can consent to application permissions.
Note
Delegated permissions for users signing in through user flows or custom policies can't be used against delegated permissions for Microsoft Graph API.
Related content
ExploreMicrosoft Graph API
ExploreGraph Explorerthat lets you try Microsoft Graph APIs and learn about them.
Feedback
Was this page helpful?
Additional resources