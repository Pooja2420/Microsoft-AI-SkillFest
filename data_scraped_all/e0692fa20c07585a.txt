Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Publish NuGet packages with Azure Pipelines (YAML/Classic)
Article
2024-10-04
16 contributors
In this article
Azure DevOps Services | Azure DevOps Server 2022 - Azure DevOps Server 2019
Using Azure Pipelines, you can publish your NuGet packages to Azure Artifacts feeds in your organization, in other organizations, and to public registries such asnuget.org, using either Classic or YAML pipelines. In this article, you'll learn how to:
Publish packages to an internal feed
Publish packages to a feed in a different organization
Package versioning
Prerequisites
Create an Azure DevOpsorganizationand aprojectif you haven't already.
Create an Azure DevOpsorganizationand aprojectif you haven't already.
Create anew feedif you don't have one already.
Create anew feedif you don't have one already.
If you're using a self-hosted agent, make sure that it has the.NET Core SDK (2.1.400+)andNuGet (4.8.0.5385+)installed.
If you're using a self-hosted agent, make sure that it has the.NET Core SDK (2.1.400+)andNuGet (4.8.0.5385+)installed.
Note
If you're using Ubuntu 24.04 or higher, you must use theNuGetAuthenticatetask with the .NET CLI instead of thenuget.exe. SeeSupport for newer Ubuntu hosted imagesfor more details.
NuGetAuthenticate
Publish NuGet packages to a feed in the same organization
YAML
Classic
Sign in to your Azure DevOps organization, and then navigate to your project.
Sign in to your Azure DevOps organization, and then navigate to your project.
SelectPipelines, and then select your pipeline definition.
SelectPipelines, and then select your pipeline definition.
SelectEdit, and then add the following snippet to your YAML pipeline.
SelectEdit, and then add the following snippet to your YAML pipeline.
steps:
- task: NuGetToolInstaller@1                            # Minimum required NuGet version: 4.8.0.5385+.
  displayName: 'NuGet Tool Installer'

- task: NuGetAuthenticate@0
  displayName: 'NuGet Authenticate'

- script: |
      nuget.exe push -Source "https://pkgs.dev.azure.com/<ORGANIZATION_NAME>/<PROJECT_NAME>/_packaging/<FEED_NAME>/nuget/v3/index.json" -ApiKey az $(Build.ArtifactStagingDirectory)\*.nupkg
  displayName: Push
steps:
- task: NuGetToolInstaller@1                            # Minimum required NuGet version: 4.8.0.5385+.
  displayName: 'NuGet Tool Installer'

- task: NuGetAuthenticate@0
  displayName: 'NuGet Authenticate'

- script: |
      nuget.exe push -Source "https://pkgs.dev.azure.com/<ORGANIZATION_NAME>/<PROJECT_NAME>/_packaging/<FEED_NAME>/nuget/v3/index.json" -ApiKey az $(Build.ArtifactStagingDirectory)\*.nupkg
  displayName: Push
Navigate to the Azure DevOps portal, and then select your project.
Navigate to the Azure DevOps portal, and then select your project.
SelectPipelines, and then select your pipeline definition.
SelectPipelines, and then select your pipeline definition.
SelectEdit, and then select the+sign to add a new task. Add theNuGet tool installer,NuGet AuthenticateandCommand linetasks to your pipeline definition. You can leave theNuGet tool installerandNuGet Authenticatetasks with their default settings and configure theCommand linetask as follows:Display name:Push.Script:nuget.exe push -Source "https://pkgs.dev.azure.com/<ORGANIZATION_NAME>/<PROJECT_NAME>/_packaging/<FEED_NAME>/nuget/v3/index.json" -ApiKey az $(Build.ArtifactStagingDirectory)\*.nupkg
SelectEdit, and then select the+sign to add a new task. Add theNuGet tool installer,NuGet AuthenticateandCommand linetasks to your pipeline definition. You can leave theNuGet tool installerandNuGet Authenticatetasks with their default settings and configure theCommand linetask as follows:
+

Display name:Push.
Script:nuget.exe push -Source "https://pkgs.dev.azure.com/<ORGANIZATION_NAME>/<PROJECT_NAME>/_packaging/<FEED_NAME>/nuget/v3/index.json" -ApiKey az $(Build.ArtifactStagingDirectory)\*.nupkg
nuget.exe push -Source "https://pkgs.dev.azure.com/<ORGANIZATION_NAME>/<PROJECT_NAME>/_packaging/<FEED_NAME>/nuget/v3/index.json" -ApiKey az $(Build.ArtifactStagingDirectory)\*.nupkg
nuget.exe push -Source "https://pkgs.dev.azure.com/<ORGANIZATION_NAME>/<PROJECT_NAME>/_packaging/<FEED_NAME>/nuget/v3/index.json" -ApiKey az $(Build.ArtifactStagingDirectory)\*.nupkg
YAML
Classic
Sign in to your Azure DevOps organization, and then navigate to your project.
Sign in to your Azure DevOps organization, and then navigate to your project.
SelectPipelines, and then select your pipeline definition.
SelectPipelines, and then select your pipeline definition.
SelectEdit, and then add the following snippet to your YAML pipeline.
SelectEdit, and then add the following snippet to your YAML pipeline.
steps:
- task: NuGetToolInstaller@1                            # Minimum required NuGet version: 4.8.0.5385+.
  displayName: 'NuGet Tool Installer'

- task: NuGetAuthenticate@1
  displayName: 'NuGet Authenticate'

- script: |
      nuget.exe push -Source "https://pkgs.dev.azure.com/<ORGANIZATION_NAME>/<PROJECT_NAME>/_packaging/<FEED_NAME>/nuget/v3/index.json" -ApiKey az $(Build.ArtifactStagingDirectory)\*.nupkg
  displayName: Push
steps:
- task: NuGetToolInstaller@1                            # Minimum required NuGet version: 4.8.0.5385+.
  displayName: 'NuGet Tool Installer'

- task: NuGetAuthenticate@1
  displayName: 'NuGet Authenticate'

- script: |
      nuget.exe push -Source "https://pkgs.dev.azure.com/<ORGANIZATION_NAME>/<PROJECT_NAME>/_packaging/<FEED_NAME>/nuget/v3/index.json" -ApiKey az $(Build.ArtifactStagingDirectory)\*.nupkg
  displayName: Push
Sign in to your Azure DevOps organization, and then navigate to your project.
Sign in to your Azure DevOps organization, and then navigate to your project.
SelectPipelines, and then select your pipeline definition.
SelectPipelines, and then select your pipeline definition.
SelectEdit, and then select the+sign to add a new task. Add theNuGet tool installer,NuGet AuthenticateandCommand linetasks to your pipeline definition. You can leave theNuGet tool installerandNuGet Authenticatetasks with their default settings and configure theCommand linetask as follows:Display name:Push.Script:nuget.exe push -Source "https://pkgs.dev.azure.com/<ORGANIZATION_NAME>/<PROJECT_NAME>/_packaging/<FEED_NAME>/nuget/v3/index.json" -ApiKey az $(Build.ArtifactStagingDirectory)\*.nupkg
SelectEdit, and then select the+sign to add a new task. Add theNuGet tool installer,NuGet AuthenticateandCommand linetasks to your pipeline definition. You can leave theNuGet tool installerandNuGet Authenticatetasks with their default settings and configure theCommand linetask as follows:
+

Display name:Push.
Script:nuget.exe push -Source "https://pkgs.dev.azure.com/<ORGANIZATION_NAME>/<PROJECT_NAME>/_packaging/<FEED_NAME>/nuget/v3/index.json" -ApiKey az $(Build.ArtifactStagingDirectory)\*.nupkg
nuget.exe push -Source "https://pkgs.dev.azure.com/<ORGANIZATION_NAME>/<PROJECT_NAME>/_packaging/<FEED_NAME>/nuget/v3/index.json" -ApiKey az $(Build.ArtifactStagingDirectory)\*.nupkg
nuget.exe push -Source "https://pkgs.dev.azure.com/<ORGANIZATION_NAME>/<PROJECT_NAME>/_packaging/<FEED_NAME>/nuget/v3/index.json" -ApiKey az $(Build.ArtifactStagingDirectory)\*.nupkg
Note
To publish your packages to a feed using Azure Pipelines, make sure that both theProject Collection Build Serviceand your project'sBuild Serviceidentities are granted theFeed Publisher (Contributor)role assigned in your feed settings. SeeManage permissionsfor more details.
Publish NuGet packages to a feed in another organization
To publish your NuGet packages to a feed in a different Azure DevOps organization, you must first create a personal access token (PAT) in the target organization. Navigate to the organization hosting your target feed andCreate a personal access tokenwithPackaging>Read & writescope.
Once the PAT is created, copy and store it in a secure location, as you'll need it in the following section to set up a service connection.
Sign in to the Azure DevOps organization where your pipeline will run, and then navigate to your project.
Sign in to the Azure DevOps organization where your pipeline will run, and then navigate to your project.
Navigate to yourProject settings>Service connections.
Navigate to yourProject settings>Service connections.
SelectNew service connection, selectNuGet, and then selectNext.
SelectNew service connection, selectNuGet, and then selectNext.
SelectExternal Azure DevOps Serveras theAuthentication method, and then enter your targetFeed URL. Paste thePersonal Access Tokenyou created earlier, provide a name for your service connection, and checkGrant access permission to all pipelinesif applicable to your scenario.
SelectExternal Azure DevOps Serveras theAuthentication method, and then enter your targetFeed URL. Paste thePersonal Access Tokenyou created earlier, provide a name for your service connection, and checkGrant access permission to all pipelinesif applicable to your scenario.
SelectSavewhen you're done.
SelectSavewhen you're done.

YAML
Classic
Sign in to your Azure DevOps organization, and then navigate to your project.
Sign in to your Azure DevOps organization, and then navigate to your project.
SelectPipelines, and then select your pipeline definition.
SelectPipelines, and then select your pipeline definition.
SelectEdit, and then add the following snippet to your YAML pipeline.- task: NuGetToolInstaller@1                                # Minimum required NuGet version: 4.8.0.5385+.
  displayName: 'NuGet Tool Installer'

- task: NuGetAuthenticate@1
  inputs:
    nuGetServiceConnections: <SERVICE_CONNECTION_NAME>

- script: |
      nuget.exe push -Source "https://pkgs.dev.azure.com/<ORGANIZATION_NAME>/<PROJECT_NAME>/_packaging/<FEED_NAME>/nuget/v3/index.json" -ApiKey az $(Build.ArtifactStagingDirectory)\*.nupkg
  displayName: Push
SelectEdit, and then add the following snippet to your YAML pipeline.
- task: NuGetToolInstaller@1                                # Minimum required NuGet version: 4.8.0.5385+.
  displayName: 'NuGet Tool Installer'

- task: NuGetAuthenticate@1
  inputs:
    nuGetServiceConnections: <SERVICE_CONNECTION_NAME>

- script: |
      nuget.exe push -Source "https://pkgs.dev.azure.com/<ORGANIZATION_NAME>/<PROJECT_NAME>/_packaging/<FEED_NAME>/nuget/v3/index.json" -ApiKey az $(Build.ArtifactStagingDirectory)\*.nupkg
  displayName: Push
- task: NuGetToolInstaller@1                                # Minimum required NuGet version: 4.8.0.5385+.
  displayName: 'NuGet Tool Installer'

- task: NuGetAuthenticate@1
  inputs:
    nuGetServiceConnections: <SERVICE_CONNECTION_NAME>

- script: |
      nuget.exe push -Source "https://pkgs.dev.azure.com/<ORGANIZATION_NAME>/<PROJECT_NAME>/_packaging/<FEED_NAME>/nuget/v3/index.json" -ApiKey az $(Build.ArtifactStagingDirectory)\*.nupkg
  displayName: Push
Sign in to your Azure DevOps organization, and then navigate to your project.
Sign in to your Azure DevOps organization, and then navigate to your project.
SelectPipelines, and then select your pipeline definition.
SelectPipelines, and then select your pipeline definition.
SelectEdit, and then select the+sign to add a new task. Add theNuGet tool installer,NuGet AuthenticateandCommand linetasks to your pipeline definition. You can leave theNuGet tool installerwith its default settings and configure the other tasks as follows:NuGet Authenticate task: select your service connection from theService connection credentials for feeds outside this organizationdropdown menu.Command line task:Display name:Push.Script:nuget.exe push -Source "https://pkgs.dev.azure.com/<ORGANIZATION_NAME>/<PROJECT_NAME>/_packaging/<FEED_NAME>/nuget/v3/index.json" -ApiKey az $(Build.ArtifactStagingDirectory)\*.nupkg
SelectEdit, and then select the+sign to add a new task. Add theNuGet tool installer,NuGet AuthenticateandCommand linetasks to your pipeline definition. You can leave theNuGet tool installerwith its default settings and configure the other tasks as follows:
+

NuGet Authenticate task: select your service connection from theService connection credentials for feeds outside this organizationdropdown menu.
NuGet Authenticate task: select your service connection from theService connection credentials for feeds outside this organizationdropdown menu.
Command line task:Display name:Push.Script:nuget.exe push -Source "https://pkgs.dev.azure.com/<ORGANIZATION_NAME>/<PROJECT_NAME>/_packaging/<FEED_NAME>/nuget/v3/index.json" -ApiKey az $(Build.ArtifactStagingDirectory)\*.nupkg
Command line task:
Display name:Push.
Script:nuget.exe push -Source "https://pkgs.dev.azure.com/<ORGANIZATION_NAME>/<PROJECT_NAME>/_packaging/<FEED_NAME>/nuget/v3/index.json" -ApiKey az $(Build.ArtifactStagingDirectory)\*.nupkg
nuget.exe push -Source "https://pkgs.dev.azure.com/<ORGANIZATION_NAME>/<PROJECT_NAME>/_packaging/<FEED_NAME>/nuget/v3/index.json" -ApiKey az $(Build.ArtifactStagingDirectory)\*.nupkg
nuget.exe push -Source "https://pkgs.dev.azure.com/<ORGANIZATION_NAME>/<PROJECT_NAME>/_packaging/<FEED_NAME>/nuget/v3/index.json" -ApiKey az $(Build.ArtifactStagingDirectory)\*.nupkg
YAML
Classic
Sign in to your Azure DevOps organization, and then navigate to your project.
Sign in to your Azure DevOps organization, and then navigate to your project.
SelectPipelines, and then select your pipeline definition.
SelectPipelines, and then select your pipeline definition.
SelectEdit, and then add the following snippet to your YAML pipeline.- task: NuGetToolInstaller@1                            # Minimum required NuGet version: 4.8.0.5385+.
  displayName: 'NuGet Tool Installer'

- task: NuGetAuthenticate@0
  inputs:
    nuGetServiceConnections: <SERVICE_CONNECTION_NAME>

- script: |
    nuget.exe push -Source "https://pkgs.dev.azure.com/<ORGANIZATION_NAME>/<PROJECT_NAME>/_packaging/<FEED_NAME>/nuget/v3/index.json" -ApiKey az $(Build.ArtifactStagingDirectory)\*.nupkg
  displayName: Push
SelectEdit, and then add the following snippet to your YAML pipeline.
- task: NuGetToolInstaller@1                            # Minimum required NuGet version: 4.8.0.5385+.
  displayName: 'NuGet Tool Installer'

- task: NuGetAuthenticate@0
  inputs:
    nuGetServiceConnections: <SERVICE_CONNECTION_NAME>

- script: |
    nuget.exe push -Source "https://pkgs.dev.azure.com/<ORGANIZATION_NAME>/<PROJECT_NAME>/_packaging/<FEED_NAME>/nuget/v3/index.json" -ApiKey az $(Build.ArtifactStagingDirectory)\*.nupkg
  displayName: Push
- task: NuGetToolInstaller@1                            # Minimum required NuGet version: 4.8.0.5385+.
  displayName: 'NuGet Tool Installer'

- task: NuGetAuthenticate@0
  inputs:
    nuGetServiceConnections: <SERVICE_CONNECTION_NAME>

- script: |
    nuget.exe push -Source "https://pkgs.dev.azure.com/<ORGANIZATION_NAME>/<PROJECT_NAME>/_packaging/<FEED_NAME>/nuget/v3/index.json" -ApiKey az $(Build.ArtifactStagingDirectory)\*.nupkg
  displayName: Push
Sign in to your Azure DevOps organization, and then navigate to your project.
Sign in to your Azure DevOps organization, and then navigate to your project.
SelectPipelines, and then select your pipeline definition.
SelectPipelines, and then select your pipeline definition.
SelectEdit, and then select the+sign to add a new task. Add theNuGet tool installer,NuGet AuthenticateandCommand linetasks to your pipeline definition. You can leave theNuGet tool installerwith its default settings and configure the other tasks as follows:NuGet Authenticate task: select your service connection from theService connection credentials for feeds outside this organizationdropdown menu.Command line task:Display name:Push.Script:nuget.exe push -Source "https://pkgs.dev.azure.com/<ORGANIZATION_NAME>/<PROJECT_NAME>/_packaging/<FEED_NAME>/nuget/v3/index.json" -ApiKey az $(Build.ArtifactStagingDirectory)\*.nupkg
SelectEdit, and then select the+sign to add a new task. Add theNuGet tool installer,NuGet AuthenticateandCommand linetasks to your pipeline definition. You can leave theNuGet tool installerwith its default settings and configure the other tasks as follows:
+

NuGet Authenticate task: select your service connection from theService connection credentials for feeds outside this organizationdropdown menu.
NuGet Authenticate task: select your service connection from theService connection credentials for feeds outside this organizationdropdown menu.
Command line task:Display name:Push.Script:nuget.exe push -Source "https://pkgs.dev.azure.com/<ORGANIZATION_NAME>/<PROJECT_NAME>/_packaging/<FEED_NAME>/nuget/v3/index.json" -ApiKey az $(Build.ArtifactStagingDirectory)\*.nupkg
Command line task:
Display name:Push.
Script:nuget.exe push -Source "https://pkgs.dev.azure.com/<ORGANIZATION_NAME>/<PROJECT_NAME>/_packaging/<FEED_NAME>/nuget/v3/index.json" -ApiKey az $(Build.ArtifactStagingDirectory)\*.nupkg
nuget.exe push -Source "https://pkgs.dev.azure.com/<ORGANIZATION_NAME>/<PROJECT_NAME>/_packaging/<FEED_NAME>/nuget/v3/index.json" -ApiKey az $(Build.ArtifactStagingDirectory)\*.nupkg
nuget.exe push -Source "https://pkgs.dev.azure.com/<ORGANIZATION_NAME>/<PROJECT_NAME>/_packaging/<FEED_NAME>/nuget/v3/index.json" -ApiKey az $(Build.ArtifactStagingDirectory)\*.nupkg

NuGet task package versioning
Azure Pipelines supportsSemantic Versioningand provides the following configuration options for NuGet tasks:
Use the date and time(Classic) |byPrereleaseNumber(YAML):
Your package version will follow the format:Major.Minor.Patch-ci-datetimewhere you have the flexibility to customize the Major, Minor, and Patch values.
Use the date and time(Classic) |byPrereleaseNumber(YAML):
Your package version will follow the format:Major.Minor.Patch-ci-datetimewhere you have the flexibility to customize the Major, Minor, and Patch values.
Use an environment variable(Classic) |byEnvVar(YAML):
Your package version is set to the value of the specified environment variable.
Use an environment variable(Classic) |byEnvVar(YAML):
Your package version is set to the value of the specified environment variable.
Use the build number(Classic) |byBuildNumber(YAML):
Your package version is set to the build number. Make sure you define the build number format in your pipelineOptionsas$(BuildDefinitionName)_$(Year:yyyy).$(Month).$(DayOfMonth)$(Rev:.r). To specify the format in YAML, add aname:property at the root of your pipeline and define your format.
Use the build number(Classic) |byBuildNumber(YAML):
Your package version is set to the build number. Make sure you define the build number format in your pipelineOptionsas$(BuildDefinitionName)_$(Year:yyyy).$(Month).$(DayOfMonth)$(Rev:.r). To specify the format in YAML, add aname:property at the root of your pipeline and define your format.
$(BuildDefinitionName)_$(Year:yyyy).$(Month).$(DayOfMonth)$(Rev:.r)
name:
The following is an example demonstrating how to use the date and time versioning to generate a SemVer-compliant package formatted as:Major.Minor.Patch-ci-datetime.
YAML
Classic
variables:
  Major: '1'
  Minor: '0'
  Patch: '0'

steps:
- task: NuGetCommand@2
  inputs:
    command: pack
    versioningScheme: byPrereleaseNumber
    majorVersion: '$(Major)'
    minorVersion: '$(Minor)'
    patchVersion: '$(Patch)'
variables:
  Major: '1'
  Minor: '0'
  Patch: '0'

steps:
- task: NuGetCommand@2
  inputs:
    command: pack
    versioningScheme: byPrereleaseNumber
    majorVersion: '$(Major)'
    minorVersion: '$(Minor)'
    patchVersion: '$(Patch)'
Note
DotNetCoreandDotNetStandardpackages should be packaged with theDotNetCoreCLI@2task to avoid System.InvalidCastExceptions. See the.NET Core CLItask for more details.
DotNetCore
DotNetStandard
DotNetCoreCLI@2
task: DotNetCoreCLI@2
inputs:
    command: pack
    versioningScheme: byPrereleaseNumber
    majorVersion: '$(Major)'
    minorVersion: '$(Minor)'
    patchVersion: '$(Patch)'
task: DotNetCoreCLI@2
inputs:
    command: pack
    versioningScheme: byPrereleaseNumber
    majorVersion: '$(Major)'
    minorVersion: '$(Minor)'
    patchVersion: '$(Patch)'
Sign in to your Azure DevOps organization, and then navigate to your project.
Sign in to your Azure DevOps organization, and then navigate to your project.
SelectPipelines, and then select your pipeline definition.
SelectPipelines, and then select your pipeline definition.
SelectEdit, and then select your NuGet task.
SelectEdit, and then select your NuGet task.
Make sure the command is set toPack, then underPack options, selectUse the date and timefrom the dropdown menu.
Make sure the command is set toPack, then underPack options, selectUse the date and timefrom the dropdown menu.

Related content
Publish NuGet packages to NuGet.org
Use packages from the NuGet.org upstream
Publish and download Universal Packages
Feedback
Was this page helpful?
Additional resources