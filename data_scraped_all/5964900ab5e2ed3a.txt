Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Outbound network and FQDN rules for Azure Kubernetes Service (AKS) clusters
Article
2024-12-11
19 contributors
In this article
This article provides the necessary details that allow you to secure outbound traffic from your Azure Kubernetes Service (AKS). It contains the cluster requirements for a base AKS deployment and additional requirements for optional addons and features. You can apply this information to any outbound restriction method or appliance.
To see an example configuration using Azure Firewall, visitControl egress traffic using Azure Firewall in AKS.
Background
AKS clusters are deployed on a virtual network. This network can either be customized and pre-configured by you or it can be created and managed by AKS. In either case, the cluster hasoutbound, or egress, dependencies on services outside of the virtual network.
For management and operational purposes, nodes in an AKS cluster need to access certain ports and fully qualified domain names (FQDNs). These endpoints are required for the nodes to communicate with the API server or to download and install core Kubernetes cluster components and node security updates. For example, the cluster needs to pull container images from Microsoft Artifact Registry (MAR).
The AKS outbound dependencies are almost entirely defined with FQDNs, which don't have static addresses behind them. The lack of static addresses means you can't use network security groups (NSGs) to lock down the outbound traffic from an AKS cluster.
By default, AKS clusters have unrestricted outbound internet access. This level of network access allows nodes and services you run to access external resources as needed. If you wish to restrict egress traffic, a limited number of ports and addresses must be accessible to maintain healthy cluster maintenance tasks.
Anetwork isolated AKS cluster, provides the simplest and most secure solution for setting up outbound restrictions for a cluster out of the box. A network isolated cluster pulls the images for cluster components and add-ons from a private Azure Container Registry (ACR) instance connected to the cluster instead of pulling from MAR. If the images aren't present, the private ACR pulls them from MAR and serves them via its private endpoint, eliminating the need to enable egress from the cluster to the public MAR endpoint. The cluster operator can then incrementally set up allowed outbound traffic securely over a private network for each scenario they want to enable. This way the cluster operators have complete control over designing the allowed outbound traffic from their clusters right from the start, thus allowing them to reduce the risk of data exfiltration.
Another solution to securing outbound addresses is using a firewall device that can control outbound traffic based on domain names. Azure Firewall can restrict outbound HTTP and HTTPS traffic based on the FQDN of the destination. You can also configure your preferred firewall and security rules to allow these required ports and addresses.
Important
This document covers only how to lock down the traffic leaving the AKS subnet. AKS has no ingress requirements by default. Blockinginternal subnet trafficusing network security groups (NSGs) and firewalls isn't supported. To control and block the traffic within the cluster, seeSecure traffic between pods using network policies in AKS.
Required outbound network rules and FQDNs for AKS clusters
The following network and FQDN/application rules are required for an AKS cluster. You can use them if you wish to configure a solution other than Azure Firewall.
IP address dependencies are for non-HTTP/S traffic (both TCP and UDP traffic).
FQDN HTTP/HTTPS endpoints can be placed in your firewall device.
Wildcard HTTP/HTTPS endpoints are dependencies that can vary with your AKS cluster based on a number of qualifiers.
AKS uses an admission controller to inject the FQDN as an environment variable to all deployments under kube-system and gatekeeper-system. This ensures all system communication between nodes and API server uses the API server FQDN and not the API server IP.  You can get the same behavior on your own pods, in any namespace, by annotating the pod spec with an annotation namedkubernetes.azure.com/set-kube-service-host-fqdn. If that annotation is present, AKS will set the KUBERNETES_SERVICE_HOST variable to the domain name of the API server instead of the in-cluster service IP. This is useful in cases where the cluster egress is via a layer 7 firewall.
kubernetes.azure.com/set-kube-service-host-fqdn
If you have an app or solution that needs to talk to the API server, you must either add anadditionalnetwork rule to allowTCP communication to port 443 of your API server's IPOR, if you have a layer 7 firewall configured to allow traffic to the API Server's domain name, setkubernetes.azure.com/set-kube-service-host-fqdnin your pod specs.
kubernetes.azure.com/set-kube-service-host-fqdn
On rare occasions, if there's a maintenance operation, your API server IP might change. Planned maintenance operations that can change the API server IP are always communicated in advance.
You might notice traffic towards "md-*.blob.storage.azure.net" endpoint. This endpoint is used for internal components of Azure Managed Disks. Blocking access to this endpoint from your firewall should not cause any issues.
You might notice traffic towards "umsa*.blob.core.windows.net" endpoint. This endpoint is used to store manifests for Azure Linux VM Agent & Extensions and is regularly checked to download new versions. You can find more details onVM Extensions.
Azure Global required network rules
*:1194
AzureCloud.<Region>:1194
RegionCIDRs:1194
APIServerPublicIP:1194
(only known after cluster creation)
*:9000
AzureCloud.<Region>:9000
RegionCIDRs:9000
APIServerPublicIP:9000
(only known after cluster creation)
*:123
ntp.ubuntu.com:123
CustomDNSIP:53
(if using custom DNS servers)
APIServerPublicIP:443
(if running pods/deployments, like Ingress Controller, that access the API Server)
Azure Global required FQDN / application rules
*.hcp.<location>.azmk8s.io
HTTPS:443
mcr.microsoft.com
HTTPS:443
*.data.mcr.microsoft.com
mcr-0001.mcr-msedge.net
HTTPS:443
management.azure.com
HTTPS:443
login.microsoftonline.com
HTTPS:443
packages.microsoft.com
HTTPS:443
acs-mirror.azureedge.net
HTTPS:443
packages.aks.azure.com
HTTPS:443
acs-mirror.azureedge.net
Microsoft Azure operated by 21Vianet required network rules
*:1194
AzureCloud.Region:1194
RegionCIDRs:1194
APIServerPublicIP:1194
(only known after cluster creation)
*:9000
AzureCloud.<Region>:9000
RegionCIDRs:9000
APIServerPublicIP:9000
(only known after cluster creation)
*:22
AzureCloud.<Region>:22
RegionCIDRs:22
APIServerPublicIP:22
(only known after cluster creation)
*:123
ntp.ubuntu.com:123
CustomDNSIP:53
(if using custom DNS servers)
APIServerPublicIP:443
(if running pods/deployments, like Ingress Controller, that access the API Server)
Microsoft Azure operated by 21Vianet required FQDN / application rules
*.hcp.<location>.cx.prod.service.azk8s.cn
HTTPS:443
*.tun.<location>.cx.prod.service.azk8s.cn
HTTPS:443
mcr.microsoft.com
HTTPS:443
.data.mcr.microsoft.com
HTTPS:443
management.chinacloudapi.cn
HTTPS:443
login.chinacloudapi.cn
HTTPS:443
packages.microsoft.com
HTTPS:443
*.azk8s.cn
HTTPS:443
Azure US Government required network rules
*:1194
AzureCloud.<Region>:1194
RegionCIDRs:1194
APIServerPublicIP:1194
(only known after cluster creation)
*:9000
AzureCloud.<Region>:9000
RegionCIDRs:9000
APIServerPublicIP:9000
(only known after cluster creation)
*:123
ntp.ubuntu.com:123
CustomDNSIP:53
(if using custom DNS servers)
APIServerPublicIP:443
(if running pods/deployments, like Ingress Controller, that access the API Server)
Azure US Government required FQDN / application rules
*.hcp.<location>.cx.aks.containerservice.azure.us
HTTPS:443
mcr.microsoft.com
HTTPS:443
*.data.mcr.microsoft.com
HTTPS:443
management.usgovcloudapi.net
HTTPS:443
login.microsoftonline.us
HTTPS:443
packages.microsoft.com
HTTPS:443
acs-mirror.azureedge.net
HTTPS:443
packages.aks.azure.com
HTTPS:443
acs-mirror.azureedge.net
Optional recommended FQDN / application rules for AKS clusters
The following FQDN / application rules aren't required, but are recommended for AKS clusters:
security.ubuntu.com
azure.archive.ubuntu.com
changelogs.ubuntu.com
HTTP:80
snapshot.ubuntu.com
HTTPS:443
If you choose to block/not allow these FQDNs, the nodes will only receive OS updates when you do anode image upgradeorcluster upgrade. Keep in mind that node image upgrades also come with updated packages including security fixes.
GPU enabled AKS clusters required FQDN / application rules
nvidia.github.io
HTTPS:443
us.download.nvidia.com
HTTPS:443
download.docker.com
HTTPS:443
Windows Server based node pools required FQDN / application rules
onegetcdn.azureedge.net, go.microsoft.com
HTTPS:443
*.mp.microsoft.com, www.msftconnecttest.com, ctldl.windowsupdate.com
HTTP:80
If you choose to block/not allow these FQDNs, the nodes will only receive OS updates when you do anode image upgradeorcluster upgrade. Keep in mind that Node Image Upgrades also come with updated packages including security fixes.
AKS features, addons, and integrations
Workload identity
login.microsoftonline.com
login.chinacloudapi.cn
login.microsoftonline.us
HTTPS:443
Microsoft Defender for Containers
login.microsoftonline.com
login.microsoftonline.us
login.microsoftonline.cn
HTTPS:443
*.ods.opinsights.azure.com
*.ods.opinsights.azure.us
*.ods.opinsights.azure.cn
HTTPS:443
*.oms.opinsights.azure.com
*.oms.opinsights.azure.us
*.oms.opinsights.azure.cn
HTTPS:443
Azure Key Vault provider for Secrets Store CSI Driver
If using network isolated clusters, it's recommended to set upprivate endpoint to access Azure Key Vault.
If your cluster has outbound type user-defined routing and Azure Firewall, the following network rules and application rules are applicable:
vault.azure.net
HTTPS:443
*.vault.usgovcloudapi.net
HTTPS:443
Azure Monitor - Managed Prometheus and Container Insights
If using network isolated clusters, it's recommended to set upprivate endpoint based ingestion, which is supported for both Managed Prometheus (Azure Monitor workspace) and Container insights (Log Analytics workspace).
If your cluster has outbound type user-defined routing and Azure Firewall, the following network rules and application rules are applicable:
AzureMonitor:443
*.ods.opinsights.azure.com
*.oms.opinsights.azure.com
dc.services.visualstudio.com
*.monitoring.azure.com
login.microsoftonline.com
global.handler.control.monitor.azure.com
*.ingest.monitor.azure.com
*.metrics.ingest.monitor.azure.com
<cluster-region-name>.handler.control.monitor.azure.com
*.ods.opinsights.azure.cn
*.oms.opinsights.azure.cn
dc.services.visualstudio.com
global.handler.control.monitor.azure.cn
<cluster-region-name>.handler.control.monitor.azure.cn
*.ingest.monitor.azure.cn
*.metrics.ingest.monitor.azure.cn
*.ods.opinsights.azure.us
*.oms.opinsights.azure.us
dc.services.visualstudio.com
global.handler.control.monitor.azure.us
<cluster-region-name>.handler.control.monitor.azure.us
*.ingest.monitor.azure.us
*.metrics.ingest.monitor.azure.us
Azure Policy
data.policy.core.windows.net
HTTPS:443
store.policy.core.windows.net
HTTPS:443
dc.services.visualstudio.com
HTTPS:443
data.policy.azure.cn
HTTPS:443
store.policy.azure.cn
HTTPS:443
data.policy.azure.us
HTTPS:443
store.policy.azure.us
HTTPS:443
AKS cost analysis add-on
management.azure.com
management.usgovcloudapi.net
management.chinacloudapi.cn
HTTPS:443
login.microsoftonline.com
login.microsoftonline.us
login.microsoftonline.cn
HTTPS:443
Cluster extensions
Required FQDN / application rules
<region>.dp.kubernetesconfiguration.azure.com
HTTPS:443
mcr.microsoft.com, *.data.mcr.microsoft.com
HTTPS:443
arcmktplaceprod.azurecr.io
HTTPS:443
arcmktplaceprod.centralindia.data.azurecr.io
HTTPS:443
arcmktplaceprod.japaneast.data.azurecr.io
HTTPS:443
arcmktplaceprod.westus2.data.azurecr.io
HTTPS:443
arcmktplaceprod.westeurope.data.azurecr.io
HTTPS:443
arcmktplaceprod.eastus.data.azurecr.io
HTTPS:443
*.ingestion.msftcloudes.com, *.microsoftmetrics.com
HTTPS:443
marketplaceapi.microsoft.com
HTTPS: 443
<region>.dp.kubernetesconfiguration.azure.us
HTTPS:443
mcr.microsoft.com, *.data.mcr.microsoft.com
HTTPS:443
Note
For any addons that aren't explicitly stated here, the core requirements cover it.
Istio-based service mesh add-on
In Istio=based service mesh add-on, if you are setting up istiod with a Plugin Certificate Authority (CA) or if you are setting up secure ingress gateway, Azure Key Vault provider for Secrets Store CSI Driver is required for these features. Outbound network requirements for Azure Key Vault provider for Secrets Store CSI Driver can be foundhere.
Application routing add-on
Application routing add-on supports SSL termination at the ingress with certificates stored in Azure Key Vault. Outbound network requirements for Azure Key Vault provider for Secrets Store CSI Driver can be foundhere.
Next steps
In this article, you learned what ports and addresses to allow if you want to restrict egress traffic for the cluster.
If you want to restrict how pods communicate between themselves and East-West traffic restrictions within cluster seeSecure traffic between pods using network policies in AKS.
Azure Kubernetes Service

Additional resources