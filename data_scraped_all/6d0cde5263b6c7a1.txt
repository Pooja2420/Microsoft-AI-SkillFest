Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
externaldata operator
Article
2025-01-27
17 contributors
In this article
Applies to: âMicrosoft FabricâAzure Data ExplorerâAzure MonitorâMicrosoft Sentinel
Theexternaldataoperator returns a table whose schema is defined in the query itself, and whose data is read from an external storage artifact, such as a blob in Azure Blob Storage or a file in Azure Data Lake Storage.
externaldata
Note
Theexternaldataoperator supports:
externaldata
a specific set of storage services, as listed underStorage connection strings.
shared Access Signature (SAS) key, Access key, and Microsoft Entra Token authentication methods. For more information, seeStorage authentication methods.
Note
Use theexternaldataoperator to retrieve small reference tables of up to 100 MB from an external storage artifact. The operator is not designed for large data volumes. To retrieve large volumes of external data, we recommendingesting the external data into Log Analytics as custom logs.
This operator isn't supported when the public endpoint of the storage artifact is behind a firewall.
externaldata
Syntax
externaldata(columnName:columnType[,...])[storageConnectionString[,...]][with(propertyName=propertyValue[,...])]
externaldata
(
:
,
)
[
,
]
with
(
=
,
)
Learn more aboutsyntax conventions.
Parameters
string
string
string
Supported properties
string
CSV
bool
true
string
Note
This operator doesn't accept any pipeline input.
Standardquery limitsapply to external data queries as well.
Returns
Theexternaldataoperator returns a data table of the given schema whose data was parsed from the specified storage artifact, indicated by the storage connection string.
externaldata
Examples
The examples query data in an external storage file.
Fetch a list of user IDs stored in Azure Blob Storage
The following example shows how to find all records in a table whoseUserIDcolumn falls into a known set of IDs, held (one per line) in an external storage file. Since the data format isn't specified, the detected data format isTXT.
UserID
TXT
Users
| where UserID in ((externaldata (UserID:string) [
    @"https://storageaccount.blob.core.windows.net/storagecontainer/users.txt" 
      h@"?...SAS..." // Secret token needed to access the blob
    ]))
| ...
Users
| where UserID in ((externaldata (UserID:string) [
    @"https://storageaccount.blob.core.windows.net/storagecontainer/users.txt" 
      h@"?...SAS..." // Secret token needed to access the blob
    ]))
| ...
Query multiple data files
The following example queries multiple data files stored in external storage.
externaldata(Timestamp:datetime, ProductId:string, ProductDescription:string)
[
  h@"https://mycompanystorage.blob.core.windows.net/archivedproducts/2019/01/01/part-00000-7e967c99-cf2b-4dbb-8c53-ce388389470d.csv.gz?...SAS...",
  h@"https://mycompanystorage.blob.core.windows.net/archivedproducts/2019/01/02/part-00000-ba356fa4-f85f-430a-8b5a-afd64f128ca4.csv.gz?...SAS...",
  h@"https://mycompanystorage.blob.core.windows.net/archivedproducts/2019/01/03/part-00000-acb644dc-2fc6-467c-ab80-d1590b23fc31.csv.gz?...SAS..."
]
with(format="csv")
| summarize count() by ProductId
externaldata(Timestamp:datetime, ProductId:string, ProductDescription:string)
[
  h@"https://mycompanystorage.blob.core.windows.net/archivedproducts/2019/01/01/part-00000-7e967c99-cf2b-4dbb-8c53-ce388389470d.csv.gz?...SAS...",
  h@"https://mycompanystorage.blob.core.windows.net/archivedproducts/2019/01/02/part-00000-ba356fa4-f85f-430a-8b5a-afd64f128ca4.csv.gz?...SAS...",
  h@"https://mycompanystorage.blob.core.windows.net/archivedproducts/2019/01/03/part-00000-acb644dc-2fc6-467c-ab80-d1590b23fc31.csv.gz?...SAS..."
]
with(format="csv")
| summarize count() by ProductId
The above example can be thought of as a quick way to query multiple data files without defining anexternal table.
Note
Data partitioning isn't recognized by theexternaldataoperator.
externaldata
Query hierarchical data formats
To query hierarchical data format, such asJSON,Parquet,Avro, orORC,ingestionMappingmust be specified in the operator properties.
In this example, there's a JSON file stored in Azure Blob Storage with the following contents:
JSON
Parquet
Avro
ORC
ingestionMapping
{
  "timestamp": "2019-01-01 10:00:00.238521",   
  "data": {    
    "tenant": "e1ef54a6-c6f2-4389-836e-d289b37bcfe0",   
    "method": "RefreshTableMetadata"   
  }   
}   
{
  "timestamp": "2019-01-01 10:00:01.845423",   
  "data": {   
    "tenant": "9b49d0d7-b3e6-4467-bb35-fa420a25d324",   
    "method": "GetFileList"   
  }   
}
...
{
  "timestamp": "2019-01-01 10:00:00.238521",   
  "data": {    
    "tenant": "e1ef54a6-c6f2-4389-836e-d289b37bcfe0",   
    "method": "RefreshTableMetadata"   
  }   
}   
{
  "timestamp": "2019-01-01 10:00:01.845423",   
  "data": {   
    "tenant": "9b49d0d7-b3e6-4467-bb35-fa420a25d324",   
    "method": "GetFileList"   
  }   
}
...
To query this file using theexternaldataoperator, a data mapping must be specified. The mapping dictates how to map JSON fields to the operator result set columns:
externaldata
externaldata(Timestamp: datetime, TenantId: guid, MethodName: string)
[ 
   h@'https://mycompanystorage.blob.core.windows.net/events/2020/09/01/part-0000046c049c1-86e2-4e74-8583-506bda10cca8.json?...SAS...'
]
with(format='multijson', ingestionMapping='[{"Column":"Timestamp","Properties":{"Path":"$.timestamp"}},{"Column":"TenantId","Properties":{"Path":"$.data.tenant"}},{"Column":"MethodName","Properties":{"Path":"$.data.method"}}]')
externaldata(Timestamp: datetime, TenantId: guid, MethodName: string)
[ 
   h@'https://mycompanystorage.blob.core.windows.net/events/2020/09/01/part-0000046c049c1-86e2-4e74-8583-506bda10cca8.json?...SAS...'
]
with(format='multijson', ingestionMapping='[{"Column":"Timestamp","Properties":{"Path":"$.timestamp"}},{"Column":"TenantId","Properties":{"Path":"$.data.tenant"}},{"Column":"MethodName","Properties":{"Path":"$.data.method"}}]')
TheMultiJSONformat is used here because single JSON records are spanned into multiple lines.
MultiJSON
Related content
For more info on mapping syntax, seedata mappings.
Feedback
Was this page helpful?
Additional resources