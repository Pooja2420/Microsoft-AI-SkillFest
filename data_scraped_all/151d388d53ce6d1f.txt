Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Add a time-in-state measure to your Power BI report
Article
2025-02-12
12 contributors
In this article
Azure DevOps Services | Azure DevOps Server 2022 - Azure DevOps Server 2019
The time a work item spends in a specific workflow state or series of states is an important aspect for understanding efficiency. TheCycle Time and Lead TimeAnalytics widgets provide some measures of time-in-state. However, these widgets might not have the level of detail that you want.
This article provides recipes using Data Analysis Expressions (DAX) to evaluate time spent by work items in a combination of states. Specifically, you learn how to add the following measure and calculated columns to your Power BI reports and use them to generate various trend charts. All fields are calculated columns except the first one listed.
Important
When adding a calculated column or measure per the examples shown in this article, replaceView Namewith the table name for the Analytics view  or data table. For example, replaceView NamewithActive Bugs.
Analytics doesn't support intra-day revisions. These examples have the most precision when using aDailyinterval when referencing an Analytics view.
All intra-day or intra-period (weekly/monthly) revisions are ignored by the calculations. This can result in unexpected results for specific scenarios like a work item showing no time "In Progress" when a work item is "In Progress" for less than a day.
Power BI default aggregations are used whenever possible instead of building measures.
Some calculations include+0to ensure that a numeric value is included for every row instead of BLANK.
You might need to revise some of the calculated column definitions based on the workflow states used by your project. For example, if your project usesNew,Active, andClosedin place ofProposed,In Progress, andCompleted.
TheDatecolumn referred to in this article isn't a native column in Azure DevOps; It's a derived column created within PowerBI to facilitate theTime in Statereport. You can build this column using the existing date-related columns, such as "Changed Date" or "State Changed Date."
Prerequisites
Note
To exercise all the time-in-state measures described in this article, make sure to include the following fields in your Analytics views, Power Query, or OData query:Created DateandState Categoryin addition to the default fields:Area Path,Assigned To,Iteration Path,State,Title,Work Item ID, andWork Item Type.
Also, consider using an Analytics view based on aDailygranularity. Examples in this article are based on the Active Bugs Analytics view defined inCreate an active bugs report in Power BI based on a custom Analytics view, with the exception that 60 days ofHistoryandDailygranularity are selected. Determine also if you want to review completed or closed work items.
Add a Work Items Count measure
To simplify quickly generating reports, we designed Analytics views to work with default aggregations in Power BI. To illustrate the difference between a default aggregation and a measure, we start with a simple work item count measure.
Load your Analytics view into Power BI Desktop. For details, seeConnect with Power BI Data Connector, Connect to an Analytics view.
Load your Analytics view into Power BI Desktop. For details, seeConnect with Power BI Data Connector, Connect to an Analytics view.
Select the data table, and then from theTable toolstab,Calculationssection of the ribbon, chooseNew measure.
Select the data table, and then from theTable toolstab,Calculationssection of the ribbon, chooseNew measure.

Replace the default text with the following code and then select thecheckmark.Work Items Count=CALCULATE(COUNTROWS ('View Name'),LASTDATE ('View Name'[Date]))TheWork Items Countmeasure uses theCALCULATE,COUNTROWS,  andLASTDATEDAX functions that are described in more detaillater in this article.NoteRemember to replaceView Namewith the table name for the Analytics view. For example, here we replaceView NamewithActive bugs.
Replace the default text with the following code and then select thecheckmark.
Work Items Count=CALCULATE(COUNTROWS ('View Name'),LASTDATE ('View Name'[Date]))
Work Items Count=CALCULATE(COUNTROWS ('View Name'),LASTDATE ('View Name'[Date]))
TheWork Items Countmeasure uses theCALCULATE,COUNTROWS,  andLASTDATEDAX functions that are described in more detaillater in this article.
CALCULATE
COUNTROWS
LASTDATE
Note
Remember to replaceView Namewith the table name for the Analytics view. For example, here we replaceView NamewithActive bugs.

How does a measure differ from a calculated column
A measure always evaluates the entire table where a calculated column is specific to a single row. For more information, seeCalculated Columns and Measures in DAX.
Compare theWork Items Countmeasure with the default count aggregation based on theWork Item ID. The following image is created by adding theCardvisual and theWork Item Countmeasure to the first card, and theWork Item IDproperty to the second card.

To get the correct count using a default aggregation, you apply the filterIs Currentequals 'True.' This pattern of applying filters to a default aggregation is the basis for many of the examples provided in this article.

Add State Sort Order
By default, Power BI shows states sorted alphabetically in a visualization. It can be misleading when you want to visualize time in state andProposedshows up afterIn Progress. The following steps help to resolve this issue.
Verify that theState Categoryfield is included in the Analytics view. This field is included in all default shared views.
Verify that theState Categoryfield is included in the Analytics view. This field is included in all default shared views.
Select the data table, and then from theTable toolstab,Calculationssection of the ribbon, chooseNew column.
Select the data table, and then from theTable toolstab,Calculationssection of the ribbon, chooseNew column.

Replace the default text with the following code and then select thecheckmark.State Sort Order =  
SWITCH (  
    'View Name'[State Category],  
    "Proposed", 1,  
    "InProgress", 2,  
    "Resolved", 3,  
    4  
)See the following example:NoteYou may need to revise the definition if you need more granularity thanState Categoryprovides.State Categoryprovides correct sorting across all work item types regardless of anyStatecustomizations.
Replace the default text with the following code and then select thecheckmark.
State Sort Order =  
SWITCH (  
    'View Name'[State Category],  
    "Proposed", 1,  
    "InProgress", 2,  
    "Resolved", 3,  
    4  
)
State Sort Order =  
SWITCH (  
    'View Name'[State Category],  
    "Proposed", 1,  
    "InProgress", 2,  
    "Resolved", 3,  
    4  
)
See the following example:

Note
You may need to revise the definition if you need more granularity thanState Categoryprovides.State Categoryprovides correct sorting across all work item types regardless of anyStatecustomizations.
Open theDataview and select theStatecolumn.
Open theDataview and select theStatecolumn.
From theColumn Toolstab, chooseSort by Columnand then select theState Sort Orderfield.
From theColumn Toolstab, chooseSort by Columnand then select theState Sort Orderfield.


Add Date Previous
The next step for calculating time-in-state requires mapping the previous interval (day, week, month) for each row of data in the dataset. It's a simple calculation using a calculated column. Typically, you would define this column as shown.
Date Previous  = 
PREVIOUSDAY ( 'View Name'[Date] )
Date Previous  = 
PREVIOUSDAY ( 'View Name'[Date] )
However, this approach has two main problems:
It works only for daily periods.
It doesn't handle gaps in the data. For example, if a work item is moved between projects.
To resolve these problems, the calculated column should find the previous day by scanning theDatefield.
To add theDate Previouscalculated column, from theTable toolstab, chooseNew Columnand then replace the default text with the following code and select thecheckmark.
Date Previous =
CALCULATE (
    MAX ( 'View Name'[Date] ),
        ALLEXCEPT ( 'View Name', 'View Name'[Work Item Id] ),
        'View Name'[Date] < EARLIER ( 'View Name'[Date] )
)
Date Previous =
CALCULATE (
    MAX ( 'View Name'[Date] ),
        ALLEXCEPT ( 'View Name', 'View Name'[Work Item Id] ),
        'View Name'[Date] < EARLIER ( 'View Name'[Date] )
)
TheDate Previouscalculated column uses three DAX functions,MAX,ALLEXCEPT, andEARLIER, described in more detaillater in this article. Because the column is calculated, it runs for every row in the table, and each time it runs, it has the context of that specific row.
MAX
ALLEXCEPT
EARLIER

Tip
From the context menu for theDateandPrevious Datefields, chooseDate(instead ofDate Hierarchy) to see a single date for these fields.

Add Date Diff in Days
Date Previouscalculates the difference between the previous and current date for each row. WithDate Diff in Days, we calculate a count of days between each of those periods. For most rows in a daily snapshot, the value equals1. However, for many work items that have gaps in the dataset, the value is greater than1.
Important
Requires that you have added theDate Previouscalculated column to the table.
It's important to consider the first day of the dataset whereDate Previousis blank. In this example, we give that row a standard value of 1 to keep the calculation consistent.
From theModelingtab, chooseNew Columnand then replace the default text with the following code and select thecheckmark.
Date Diff in Days =
IF (
    ISBLANK ( 'View Name'[Date Previous] ),
    1,
    DATEDIFF (
        'View Name'[Date Previous],
        'View Name'[Date],
        DAY
    )
)
Date Diff in Days =
IF (
    ISBLANK ( 'View Name'[Date Previous] ),
    1,
    DATEDIFF (
        'View Name'[Date Previous],
        'View Name'[Date],
        DAY
    )
)
This calculated column uses theISBLANKandDATEDIFFDAX functions describedlater in this article.
ISBLANK
DATEDIFF
Add Is Last Day in State
In this next step, we calculate if a given row represents the last day a specific work item was in a state. It supports default aggregations in Power BI we add in the next section where we add theState Time in Dayscolumn.
From theModelingtab, chooseNew Columnand then replace the default text with the following code and select thecheckmark.
Is Last Day in State = 
ISBLANK (CALCULATE (
    COUNTROWS ( 'View Name' ),
        ALLEXCEPT ( 'View Name', 'View Name'[Work Item Id] ),
        'View Name'[Date] > EARLIER ( 'View Name'[Date] ),
        'View Name'[State] = EARLIER ( 'View Name'[State] )
))
Is Last Day in State = 
ISBLANK (CALCULATE (
    COUNTROWS ( 'View Name' ),
        ALLEXCEPT ( 'View Name', 'View Name'[Work Item Id] ),
        'View Name'[Date] > EARLIER ( 'View Name'[Date] ),
        'View Name'[State] = EARLIER ( 'View Name'[State] )
))
Add State Time in Days
The time that a work item spent in a specific state can now be calculated by summing theDate Diff in Daysfor each work item. This calculation includes all of the time spent in a specific state even if it switched between states multiple times. It's possible to evaluate each row as a trend usingDateor the latest information by usingIs Last Day In State.
Important
Requires that you have added theDate Diff in DaysandIs Last Day in Statecalculated columns to the table.
From theModelingtab, chooseNew Columnand then replace the default text with the following code and select thecheckmark.
State Time in Days = 
CALCULATE (
    SUM ( 'View Name'[Date Diff in Days] ),
    ALLEXCEPT ( 'View Name', 'View Name'[Work Item Id] ),
    'View Name'[Date] <= EARLIER ( 'View Name'[Date] ),
    'View Name'[State] = EARLIER ( 'View Name'[State] )
) + 0
State Time in Days = 
CALCULATE (
    SUM ( 'View Name'[Date Diff in Days] ),
    ALLEXCEPT ( 'View Name', 'View Name'[Work Item Id] ),
    'View Name'[Date] <= EARLIER ( 'View Name'[Date] ),
    'View Name'[State] = EARLIER ( 'View Name'[State] )
) + 0
Create stacked column trend charts based on State Time in Days
To demonstrate theState Time in Dayscolumn, the following stacked column charts are created. The first chart shows the count of work items in each state over time.

The second chart illustrates the trend of average days the active work items are in a particular state.

Add State Time in Days - Latest (Is Last Day In State)
When evaluating time-in-state for each work item in a table or when filtered by a field likeArea Path, don't use theState Time in Dayscolumn in an aggregation. The aggregation uses the value for every day the work item was in the state. For example, if a work item wasIn Progresson Monday and moved toCompletedon Thursday, the time-in-state is three days, but the sum ofState Time in Dayscolumn is six days,1+2+3, which is incorrect.
1+2+3

To resolve this issue, useState Time in Daysand apply the filterIs Last Day In Stateequals 'True.' It eliminates all the historical data necessary for a trend and focuses instead on just the latest value for each state.

Add State Time in Days - In Progress
In the previous examples,State Time in Daysfor a given work item is only counted when the work item was in that specific state. If your goal is to have the time-in-state for a given work item count towards an average continuously, you must change the calculation. For example, if we want to track the "In Progress" state, we add theState Time in Days - In Progresscalculated column.
From theModelingtab, chooseNew Columnand then replace the default text with the following code and select thecheckmark.
State Time in Days - In Progress = 
CALCULATE (
    SUM ( 'View Name'[Date Diff in Days] ),
    ALLEXCEPT ( 'View Name', 'View Name'[Work Item Id] ),
   'View Name'[Date] <= EARLIER('View Name'[Date]),
   'View Name'[State] = "In Progress"
) + 0
State Time in Days - In Progress = 
CALCULATE (
    SUM ( 'View Name'[Date Diff in Days] ),
    ALLEXCEPT ( 'View Name', 'View Name'[Work Item Id] ),
   'View Name'[Date] <= EARLIER('View Name'[Date]),
   'View Name'[State] = "In Progress"
) + 0
Note
You may need to revise the definition based on the workflow states used by your project. For example, the project used in the examples in this article use the 'In Progress' workflow state, however, Agile, Scrum, and CMMI processes typically use the 'Active' or 'Committed' states to represent work in progress. For an overview, seeWorkflow states and state categories.
The following image shows the effect of considering all time-in-state for every existing work item (shown left) versus only those work items in a specific state on a given day (shown right).

State Time in Days trend of multiple states
Analyzing performance across multiple states is also possible using the "Continuous" pattern. However, this approach only works with a trend chart.
From theModelingtab, chooseNew Columnand then replace the default text with the following code and select thecheckmark.
State Time in Days - Working States = 
CALCULATE (
    SUM ( 'View Name'[Date Diff in Days] ),
    ALLEXCEPT ( 'View Name', 'View Name'[Work Item Id] ),
   'View Name'[Date] <= EARLIER('View Name'[Date]),
   'View Name'[State] IN { "Committed", "In Progress" }
) + 0
State Time in Days - Working States = 
CALCULATE (
    SUM ( 'View Name'[Date Diff in Days] ),
    ALLEXCEPT ( 'View Name', 'View Name'[Work Item Id] ),
   'View Name'[Date] <= EARLIER('View Name'[Date]),
   'View Name'[State] IN { "Committed", "In Progress" }
) + 0
Note
You may need to revise the definition based on the workflow states used by your project. For example, if your project uses 'Active' in place of 'Committed' or 'Proposed'.
The chart of the left shows combined average while the right-hand side shows each individual state.

Get the State Time in Days- Latest for multiple states
You use theState Time in Days- Latestcalculated column when creating a trend. With a filter on the states, theState Time in Dayscolumn andIs Last Day in Stateprovides a simple way to get the total time any work item or group of work items spent in a set of states.

Add State Previous
TheDate Previouscalculated column can also be used to look up past values such as previous state for each work item.
Important
Requires that you have added theDate Previouscalculated columnto the table.
From theModelingtab, chooseNew Columnand then replace the default text with the following code and select thecheckmark.
State Previous =
LOOKUPVALUE (
    'View Name'[State],
    'View Name'[Work Item Id], 'View Name'[Work Item Id],
    'View Name'[Date], 'View Name'[Date Previous]
)
State Previous =
LOOKUPVALUE (
    'View Name'[State],
    'View Name'[Work Item Id], 'View Name'[Work Item Id],
    'View Name'[Date], 'View Name'[Date Previous]
)
This calculated column uses theLOOKUPVALUE, describedlater in this article.
LOOKUPVALUE
The firstLOOKUPVALUEparameter,'View Name'[State], specifies to return the value of [State].
LOOKUPVALUE
'View Name'[State]
The next parameter,'View Name'[Work Item Id], 'View Name'[Work Item Id], specifies that only rows with a matching work item ID as the current row should be considered.
'View Name'[Work Item Id], 'View Name'[Work Item Id]
And, the last parameter,'View Name'[Date], 'View Name'[Date Previous], specifies that the date of the row being returned must have a [Date] that matches the [Previous Date] of the current row. In a snapshot, only one row can meet this criteria.
'View Name'[Date], 'View Name'[Date Previous]

Add State Changed
Using theState Previouscolumn, we can flag the rows for each work item where a state transition occurred. TheStage Changedcalculated column has two special considerations:
Blank values of *State Previous, which we set to theCreated Dateof the work item
Creation of a work item is considered a state transition
Important
Requires that you have added theState Previouscalculated column to the table.
From theModelingtab, chooseNew Columnand then replace the default text with the following code and select thecheckmark.
State Changed =
IF (
    ISBLANK ( 'View Name'[State Previous] ),
    'View Name'[Created Date].[Date] = 'View Name'[Date],
    'View Name'[State Previous] <> 'View Name'[State]
)
State Changed =
IF (
    ISBLANK ( 'View Name'[State Previous] ),
    'View Name'[Created Date].[Date] = 'View Name'[Date],
    'View Name'[State Previous] <> 'View Name'[State]
)
The calculated column is a boolean value that identifies whether the row is a state transition. By using theNot Equal Tooperator, you correctly catch rows where the previous state doesn't match the current state, which means the comparison returns True as expected.
Not Equal To

Add State Flow
WithState PreviousandState Changedcalculated columns, you can create a column that illustrates theState Flowfor a given work item. Creating this column is optional for the purposes of this article.
Important
Requires that you have added theState PreviousandState Changedcalculated columns to the table.
From theModelingtab, chooseNew Columnand then replace the default text with the following code and select thecheckmark.
State Flow = 
IF([State Changed], [State Previous], [State]) & " => " & [State]
State Flow = 
IF([State Changed], [State Previous], [State]) & " => " & [State]
Add State Change Count
As we move into the more complicated measures, we need to have a representation of the total number of state changes to compare the rows of a data for a given work item. We get the representation by adding aState Change Countcalculated column.
Important
Requires that you have added theState Changedcalculated column to the table.
From theModelingtab, chooseNew Columnand then replace the default text with the following code and select thecheckmark.
State Change Count = 
CALCULATE (
    COUNTROWS ( 'View Name' ),
    ALLEXCEPT ( 'View Name', 'View Name'[Work Item Id] ),
    'View Name'[Date] <= EARLIER ( 'View Name'[Date] ),
    'View Name'[State Changed]
) + 0
State Change Count = 
CALCULATE (
    COUNTROWS ( 'View Name' ),
    ALLEXCEPT ( 'View Name', 'View Name'[Work Item Id] ),
    'View Name'[Date] <= EARLIER ( 'View Name'[Date] ),
    'View Name'[State Changed]
) + 0
Add State Change Count - Last Proposed and State Restart Time in Days
State Restart Time in Daysis a fairly complex calculation. The first step is to find the last time a work item was in a proposed state. Add theState Change Count - Last Proposedcalculated column.
Note
You might need to revise the following definitions based on the workflow states used by your project. For example, if your project uses 'New' in place of 'Proposed'.
From theModelingtab, chooseNew columnand then replace the default text with the following code and select thecheckmark.
State Change Count - Last Proposed = 
CALCULATE (
    MAX ( 'View Name'[State Change Count] ),
    ALLEXCEPT ( 'View Name', 'View Name'[Work Item Id] ),
    'View Name'[Date] <= EARLIER ( 'View Name'[Date] ),
    'View Name'[State] = "Proposed"
)
State Change Count - Last Proposed = 
CALCULATE (
    MAX ( 'View Name'[State Change Count] ),
    ALLEXCEPT ( 'View Name', 'View Name'[Work Item Id] ),
    'View Name'[Date] <= EARLIER ( 'View Name'[Date] ),
    'View Name'[State] = "Proposed"
)
Then, look further back to the past and see if there were some active states before this proposed state. Lastly, sum up all the days when work item was in active state before the last proposed.
From theModelingtab, chooseNew Columnand then replace the default text with the following code and select thecheckmark.
State Restart Time in Days = 
CALCULATE (
    SUM ( 'View Name'[Date Diff in Days] ),
    ALLEXCEPT ( 'View Name', 'View Name'[Work Item Id] ),
    'View Name'[Date] <= EARLIER ( 'View Name'[Date] ),
    'View Name'[State Change Count] < EARLIER('View Name'[State Change Count - Last Proposed] ),
    'View Name'[State] <"Proposed"
) + 0
State Restart Time in Days = 
CALCULATE (
    SUM ( 'View Name'[Date Diff in Days] ),
    ALLEXCEPT ( 'View Name', 'View Name'[Work Item Id] ),
    'View Name'[Date] <= EARLIER ( 'View Name'[Date] ),
    'View Name'[State Change Count] < EARLIER('View Name'[State Change Count - Last Proposed] ),
    'View Name'[State] <"Proposed"
) + 0
Since theState Restart Time in Daysis updated for each row of data, you can either create a trend to evaluate rework across specific sprints or examine rework for individual work items by usingIs Current.
Add State Rework Time in Days
Similar toState Restart Time in Days, theState Rework Time in Dayslooks for the first time a work item was in the Completed state category. After that time, each day a work item spends in a state other than Completed, counts as rework.
Create the "State Change Count - First Completed" column. This column tracks the number of times a work item transitions to the Completed state from any other state.State Change Count - First Completed =
VAR CompletedState = "Completed"
RETURN
CALCULATE(
   COUNTROWS('YourTable'),
   FILTER(
       'YourTable',
       'YourTable'[State] = CompletedState
       && 'YourTable'[State Change Date] = MIN('YourTable'[State Change Date])
   )
)
Create the "State Change Count - First Completed" column. This column tracks the number of times a work item transitions to the Completed state from any other state.
State Change Count - First Completed =
VAR CompletedState = "Completed"
RETURN
CALCULATE(
   COUNTROWS('YourTable'),
   FILTER(
       'YourTable',
       'YourTable'[State] = CompletedState
       && 'YourTable'[State Change Date] = MIN('YourTable'[State Change Date])
   )
)
State Change Count - First Completed =
VAR CompletedState = "Completed"
RETURN
CALCULATE(
   COUNTROWS('YourTable'),
   FILTER(
       'YourTable',
       'YourTable'[State] = CompletedState
       && 'YourTable'[State Change Date] = MIN('YourTable'[State Change Date])
   )
)
From theModelingtab, chooseNew Columnand then replace the default text with the following code and select thecheckmark.State Rework Time in Days = 
IF (
    ISBLANK ( 'View Name'[State Change Count - First Completed] ),
    0,
    CALCULATE (
        SUM ( 'View Name'[Date Diff in Days] ),
        ALLEXCEPT ( 'View Name', 'View Name'[Work Item Id] ),
        'View Name'[Date] <= EARLIER ( 'View Name'[Date] ),
        'View Name'[State Change Count] <= EARLIER ( 'View Name'[State Change Count - First Completed] ),
        'View Name'[State] IN {"Completed", "Closed", "Cut" } = FALSE()
    ) + 0
)NoteYou might need to revise the previous definition based on the workflow states used by your project. For example, if your project usesDonein place ofClosed, and so on.
From theModelingtab, chooseNew Columnand then replace the default text with the following code and select thecheckmark.
State Rework Time in Days = 
IF (
    ISBLANK ( 'View Name'[State Change Count - First Completed] ),
    0,
    CALCULATE (
        SUM ( 'View Name'[Date Diff in Days] ),
        ALLEXCEPT ( 'View Name', 'View Name'[Work Item Id] ),
        'View Name'[Date] <= EARLIER ( 'View Name'[Date] ),
        'View Name'[State Change Count] <= EARLIER ( 'View Name'[State Change Count - First Completed] ),
        'View Name'[State] IN {"Completed", "Closed", "Cut" } = FALSE()
    ) + 0
)
State Rework Time in Days = 
IF (
    ISBLANK ( 'View Name'[State Change Count - First Completed] ),
    0,
    CALCULATE (
        SUM ( 'View Name'[Date Diff in Days] ),
        ALLEXCEPT ( 'View Name', 'View Name'[Work Item Id] ),
        'View Name'[Date] <= EARLIER ( 'View Name'[Date] ),
        'View Name'[State Change Count] <= EARLIER ( 'View Name'[State Change Count - First Completed] ),
        'View Name'[State] IN {"Completed", "Closed", "Cut" } = FALSE()
    ) + 0
)
Note
You might need to revise the previous definition based on the workflow states used by your project. For example, if your project usesDonein place ofClosed, and so on.

DAX functions
Additional information is provided in this section for the DAX functions used to create the calculated columns and measure added in this article. See alsoDAX, Time intelligence functions.
ALLEXCEPT
ALLEXCEPT ('View Name'', 'View Name'[Work Item Id])
CALCULATE
COUNTROWS
COUNTROWS ( 'View Name' )
DATEDIFF
DATEDIFF
EARLIER
'View Name'[Date] < EARLIER ( 'View Name'[Date] )
EARLIER
EARLIER
ISBLANK
ISBLANK
LASTDATE
LASTDATE
LASTDATE ( 'View Name'[Date] )
LOOKUPVALUE
MAX
MAX ( 'View Name'[Date] )
Related articles
Learn about Power BI integration
Create Analytics views
Get started with Power BI Desktop
Design datasets for the Power BI Connector
Understand workflow states and state categories
Explore the data model for Analytics
Feedback
Was this page helpful?
Additional resources