Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Import SOAP API to API Management
Article
2025-03-13
6 contributors
In this article
APPLIES TO: All API Management tiers
This article shows how to import a WSDL specification, which is a standard XML representation of a SOAP API. The article also shows how to test the API in API Management.
In this article, you learn how to:
Import a SOAP API
Test the API in the Azure portal
Note
WSDL import to API Management is subject to certainlimitations. WSDL files withwsdl:import,xsd:import, andxsd:includedirectives aren't supported. For an open-source tool to resolve and merge these dependencies in a WSDL file, see thisGitHub repo.
wsdl:import
xsd:import
xsd:include
Prerequisites
An API Management instance. If you don't already have one, complete the following quickstart:Create an Azure API Management instance.
An API Management instance. If you don't already have one, complete the following quickstart:Create an Azure API Management instance.
Azure CLIUse the Bash environment inAzure Cloud Shell. For more information, seeGet started with Azure Cloud Shell.If you prefer to run CLI reference commands locally,installthe Azure CLI. If you're running on Windows or macOS, consider running Azure CLI in a Docker container. For more information, seeHow to run the Azure CLI in a Docker container.If you're using a local installation, sign in to the Azure CLI by using theaz logincommand. To finish the authentication process, follow the steps displayed in your terminal. For other sign-in options, seeAuthenticate to Azure using Azure CLI.When you're prompted, install the Azure CLI extension on first use. For more information about extensions, seeUse and manage extensions with the Azure CLI.Runaz versionto find the version and dependent libraries that are installed. To upgrade to the latest version, runaz upgrade.
Azure CLI
Use the Bash environment inAzure Cloud Shell. For more information, seeGet started with Azure Cloud Shell.
Use the Bash environment inAzure Cloud Shell. For more information, seeGet started with Azure Cloud Shell.

If you prefer to run CLI reference commands locally,installthe Azure CLI. If you're running on Windows or macOS, consider running Azure CLI in a Docker container. For more information, seeHow to run the Azure CLI in a Docker container.If you're using a local installation, sign in to the Azure CLI by using theaz logincommand. To finish the authentication process, follow the steps displayed in your terminal. For other sign-in options, seeAuthenticate to Azure using Azure CLI.When you're prompted, install the Azure CLI extension on first use. For more information about extensions, seeUse and manage extensions with the Azure CLI.Runaz versionto find the version and dependent libraries that are installed. To upgrade to the latest version, runaz upgrade.
If you prefer to run CLI reference commands locally,installthe Azure CLI. If you're running on Windows or macOS, consider running Azure CLI in a Docker container. For more information, seeHow to run the Azure CLI in a Docker container.
If you're using a local installation, sign in to the Azure CLI by using theaz logincommand. To finish the authentication process, follow the steps displayed in your terminal. For other sign-in options, seeAuthenticate to Azure using Azure CLI.
If you're using a local installation, sign in to the Azure CLI by using theaz logincommand. To finish the authentication process, follow the steps displayed in your terminal. For other sign-in options, seeAuthenticate to Azure using Azure CLI.
When you're prompted, install the Azure CLI extension on first use. For more information about extensions, seeUse and manage extensions with the Azure CLI.
When you're prompted, install the Azure CLI extension on first use. For more information about extensions, seeUse and manage extensions with the Azure CLI.
Runaz versionto find the version and dependent libraries that are installed. To upgrade to the latest version, runaz upgrade.
Runaz versionto find the version and dependent libraries that are installed. To upgrade to the latest version, runaz upgrade.
Azure PowerShellIf you choose to use Azure PowerShell locally:Install the latest version of the Az PowerShell module.Connect to your Azure account using theConnect-AzAccountcmdlet.If you choose to use Azure Cloud Shell:SeeOverview of Azure Cloud Shellfor more information.
Azure PowerShell
If you choose to use Azure PowerShell locally:Install the latest version of the Az PowerShell module.Connect to your Azure account using theConnect-AzAccountcmdlet.
Install the latest version of the Az PowerShell module.
Connect to your Azure account using theConnect-AzAccountcmdlet.
If you choose to use Azure Cloud Shell:SeeOverview of Azure Cloud Shellfor more information.
SeeOverview of Azure Cloud Shellfor more information.
Import a backend API
Portal
Azure CLI
PowerShell
In theAzure portal, navigate to your API Management instance.
In theAzure portal, navigate to your API Management instance.
In the left menu, selectAPIs>+ Add API.
In the left menu, selectAPIs>+ Add API.
UnderCreate from definition, selectWSDL.
UnderCreate from definition, selectWSDL.

InWSDL specification, enter the URL to your SOAP API, or clickSelect a fileto select a local WSDL file.
InWSDL specification, enter the URL to your SOAP API, or clickSelect a fileto select a local WSDL file.
InImport method,SOAP pass-throughis selected by default.
With this selection, the API is exposed as SOAP, and API consumers have to use SOAP rules. If you want to "restify" the API, follow the steps inImport a SOAP API and convert it to REST.
InImport method,SOAP pass-throughis selected by default.
With this selection, the API is exposed as SOAP, and API consumers have to use SOAP rules. If you want to "restify" the API, follow the steps inImport a SOAP API and convert it to REST.

The following API settings are filled automatically based on information from the SOAP API:Display name,Name,Description. Operations are filled automatically withDisplay name,URL, andDescription, and receive a system-generatedName.
The following API settings are filled automatically based on information from the SOAP API:Display name,Name,Description. Operations are filled automatically withDisplay name,URL, andDescription, and receive a system-generatedName.
Enter other API settings. You can set the values during creation or configure them later by going to theSettingstab.For more information about API settings, seeImport and publish your first APItutorial.
Enter other API settings. You can set the values during creation or configure them later by going to theSettingstab.
For more information about API settings, seeImport and publish your first APItutorial.
SelectCreate.
SelectCreate.
The following example uses theaz apim api importcommand to import a WSDL specification from the specified URL to an API Management instance namedapim-hello-world. To import using a path to a specification instead of a URL, use the--specification-pathparameter.
--specification-path
For this example WSDL, the service name isOrdersAPI, and one of the available endpoints (interfaces) isbasic.
# API Management service-specific details
APIMServiceName="apim-hello-world"
ResourceGroupName="myResourceGroup"

# API-specific details
APIId="order-api"
APIPath="order"
SpecificationFormat="Wsdl"
SpecificationURL="https://fazioapisoap.azurewebsites.net/FazioService.svc?singleWsdl"
WsdlServiceName="OrdersAPI"
WsdlEndpointName="basic"

# Import API
az apim api import --path $APIPath --resource-group $ResourceGroupName \
    --service-name $APIMServiceName --api-id $APIId \
    --specification-format $SpecificationFormat --specification-url $SpecificationURL \
    --wsdl-service-name $WsdlServiceName --wsdl-endpoint-name $WsdlEndpointName
# API Management service-specific details
APIMServiceName="apim-hello-world"
ResourceGroupName="myResourceGroup"

# API-specific details
APIId="order-api"
APIPath="order"
SpecificationFormat="Wsdl"
SpecificationURL="https://fazioapisoap.azurewebsites.net/FazioService.svc?singleWsdl"
WsdlServiceName="OrdersAPI"
WsdlEndpointName="basic"

# Import API
az apim api import --path $APIPath --resource-group $ResourceGroupName \
    --service-name $APIMServiceName --api-id $APIId \
    --specification-format $SpecificationFormat --specification-url $SpecificationURL \
    --wsdl-service-name $WsdlServiceName --wsdl-endpoint-name $WsdlEndpointName
The following example uses theImport-AzApiManagementApiAzure PowerShell cmdlet to import a WSDL specification from the specified URL to an API Management instance namedapim-hello-world. To import using a path to a specification instead of a URL, use the-SpecificationPathparameter.
-SpecificationPath
For this example WSDL, the service name isOrdersAPI, and one of the available endpoints (interfaces) isbasic.
# API Management service-specific details
$apimServiceName = "apim-hello-world"
$resourceGroupName = "myResourceGroup"

# API-specific det
$apiId = "orders-api"
$apiPath = "orders"
$specificationFormat = "Wsdl"
$specificationUrl = "https://fazioapisoap.azurewebsites.net/FazioService.svc?singleWsdl"
$wsdlServiceName = "OrdersAPI"
$wsdlEndpointName = "basic"

# Get context of the API Management instance. 
$context = New-AzApiManagementContext -ResourceGroupName $resourceGroupName -ServiceName $apimServiceName

# Import API
Import-AzApiManagementApi -Context $context -ApiId $apiId -SpecificationFormat $specificationFormat -SpecificationUrl $specificationUrl -Path $apiPath -WsdlServiceName $wsdlServiceName -WsdlEndpointName $wsdlEndpointName
# API Management service-specific details
$apimServiceName = "apim-hello-world"
$resourceGroupName = "myResourceGroup"

# API-specific det
$apiId = "orders-api"
$apiPath = "orders"
$specificationFormat = "Wsdl"
$specificationUrl = "https://fazioapisoap.azurewebsites.net/FazioService.svc?singleWsdl"
$wsdlServiceName = "OrdersAPI"
$wsdlEndpointName = "basic"

# Get context of the API Management instance. 
$context = New-AzApiManagementContext -ResourceGroupName $resourceGroupName -ServiceName $apimServiceName

# Import API
Import-AzApiManagementApi -Context $context -ApiId $apiId -SpecificationFormat $specificationFormat -SpecificationUrl $specificationUrl -Path $apiPath -WsdlServiceName $wsdlServiceName -WsdlEndpointName $wsdlEndpointName
Test the new API in the portal
Operations can be called directly from the portal, which provides a convenient way for administrators to view and test the operations of an API.
Select the API you created in the previous step.
Select the API you created in the previous step.
Select theTesttab.
Select theTesttab.
Select an operation.
The page displays fields for query parameters and fields for the headers.NoteIn the test console, API Management automatically populates anOcp-Apim-Subscription-Keyheader, and configures the subscription key of the built-inall-access subscription. This key enables access to every API in the API Management instance. Optionally display theOcp-Apim-Subscription-Keyheader by selecting the "eye" icon next to theHTTP Request.
Select an operation.
The page displays fields for query parameters and fields for the headers.
Note
In the test console, API Management automatically populates anOcp-Apim-Subscription-Keyheader, and configures the subscription key of the built-inall-access subscription. This key enables access to every API in the API Management instance. Optionally display theOcp-Apim-Subscription-Keyheader by selecting the "eye" icon next to theHTTP Request.
Depending on the operation, enter query parameter values, header values, or a request body. SelectSend.When the test is successful, the backend responds with a successful HTTP response code and some data.TipBy default, the test console sends a request to API Management's CORS proxy, which forwards the request to the API Management instance, which then forwards it to the backend. This proxy uses public IP address 13.91.254.72 and can only reach public endpoints. If you want to send a request directly from the browser to the API Management service, selectBypass CORS proxy. Use this option when you want to use the test console and your API Management gateway is network-isolated or doesn't allow traffic from the CORS proxy.
Depending on the operation, enter query parameter values, header values, or a request body. SelectSend.
When the test is successful, the backend responds with a successful HTTP response code and some data.
Tip
By default, the test console sends a request to API Management's CORS proxy, which forwards the request to the API Management instance, which then forwards it to the backend. This proxy uses public IP address 13.91.254.72 and can only reach public endpoints. If you want to send a request directly from the browser to the API Management service, selectBypass CORS proxy. Use this option when you want to use the test console and your API Management gateway is network-isolated or doesn't allow traffic from the CORS proxy.
To debug an API, seeTutorial: Debug your APIs using request tracing.
Wildcard SOAP action
If you need to pass a SOAP request that doesn't have a dedicated action defined in the API, you can configure a wildcard SOAP action. The wildcard action will match any SOAP request that isn't defined in the API.
To define a wildcard SOAP action:
In the portal, select the API you created in the previous step.
In theDesigntab, select+ Add Operation.
Enter aDisplay namefor the operation.
In the URL, selectPOSTand enter/?soapAction={any}in the resource. The template parameter inside the curly brackets is arbitrary and doesn't affect the execution.
POST
/?soapAction={any}
Note
Don't use theOpenAPI specificationeditor in theDesigntab to modify a SOAP API.
Append other APIs
You can compose an API out of APIs that are exposed by different services, including:
An OpenAPI specification
A SOAP API
A GraphQL API
A Web App that's hosted in Azure App Service
Azure Functions
Azure Logic Apps
Azure Service Fabric
Note
When you import an API, the operations are appended to your current API.
To append an API to an existing API:
Go to your Azure API Management instance in the Azure portal:
Go to your Azure API Management instance in the Azure portal:

SelectAPIson theOverviewpage or selectAPIs>APIsin the menu on the left.
SelectAPIson theOverviewpage or selectAPIs>APIsin the menu on the left.

Select the ellipsis (...) next to the API that you want to append another API to.
Select the ellipsis (...) next to the API that you want to append another API to.
SelectImportfrom the drop-down menu:
SelectImportfrom the drop-down menu:

Select a service from which to import an API.
Select a service from which to import an API.
Related content
API import limitations
Import an OpenAPI specification
Import a SOAP API
Import a SOAP API and convert it to REST
Import an App Service API
Import a Container App API
Import a WebSocket API
Import a GraphQL API
Import a GraphQL schema and set up field resolvers
Import an Azure Function App API
Import an Azure Logic App API
Import a Service Fabric service
Import an Azure OpenAI API
Import an OData API
Import SAP OData metadata
Import a gRPC API
Edit an API
Feedback
Was this page helpful?
Additional resources