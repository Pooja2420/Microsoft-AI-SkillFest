Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Management group deployments with Bicep files
Article
2025-02-12
6 contributors
In this article
This article describes how to set scope with Bicep when deploying to a management group.
As your organization matures, you can deploy a Bicep file to create resources at the management group level. For example, you may need to define and assignpoliciesorAzure role-based access control (Azure RBAC)for a management group. With management group level templates, you can declaratively apply policies and assign roles at the management group level. For more information, seeUnderstand scope.
Training resources
If you would rather learn about deployment scopes through step-by-step guidance, seeDeploy resources to subscriptions, management groups, and tenants by using Bicep.
Supported resources
Not all resource types can be deployed to the management group level. This section lists which resource types are supported.
For Azure Blueprints, use:
artifacts
blueprints
blueprintAssignments
versions
For Azure Policy, use:
policyAssignments
policyDefinitions
policySetDefinitions
remediations
For access control, use:
privateLinkAssociations
roleAssignments
roleAssignmentScheduleRequests
roleDefinitions
roleEligibilityScheduleRequests
roleManagementPolicyAssignments
For nested templates that deploy to subscriptions or resource groups, use:
deployments
For managing your resources, use:
diagnosticSettings
tags
Management groups are tenant-level resources. However, you can create management groups in a management group deployment by setting the scope of the new management group to the tenant. SeeManagement group.
Set scope
To set the scope to management group, use:
targetScope = 'managementGroup'
targetScope = 'managementGroup'
Deployment commands
To deploy to a management group, use the management group deployment commands.
Azure CLI
PowerShell
For Azure CLI, useaz deployment mg create:
az deployment mg create \
  --name demoMGDeployment \
  --location WestUS \
  --management-group-id myMG \
  --template-uri "https://raw.githubusercontent.com/Azure/azure-docs-json-samples/master/management-level-deployment/azuredeploy.json"
az deployment mg create \
  --name demoMGDeployment \
  --location WestUS \
  --management-group-id myMG \
  --template-uri "https://raw.githubusercontent.com/Azure/azure-docs-json-samples/master/management-level-deployment/azuredeploy.json"
For Azure PowerShell, useNew-AzManagementGroupDeployment.
New-AzManagementGroupDeployment `
  -Name demoMGDeployment `
  -Location "West US" `
  -ManagementGroupId "myMG" `
  -TemplateUri "https://raw.githubusercontent.com/Azure/azure-docs-json-samples/master/management-level-deployment/azuredeploy.json"
New-AzManagementGroupDeployment `
  -Name demoMGDeployment `
  -Location "West US" `
  -ManagementGroupId "myMG" `
  -TemplateUri "https://raw.githubusercontent.com/Azure/azure-docs-json-samples/master/management-level-deployment/azuredeploy.json"
For more detailed information about deployment commands and options for deploying ARM templates, see:
Deploy resources with ARM templates and Azure CLI
Deploy resources with ARM templates and Azure PowerShell
Deploy ARM templates from Cloud Shell
Deployment location and name
For management group level deployments, you must provide a location for the deployment. The location of the deployment is separate from the location of the resources you deploy. The deployment location specifies where to store deployment data.Subscriptionandtenantdeployments also require a location. Forresource groupdeployments, the location of the resource group is used to store the deployment data.
You can provide a name for the deployment, or use the default deployment name. The default name is the name of the template file. For example, deploying a template namedmain.bicepcreates a default deployment name ofmain.
For each deployment name, the location is immutable. You can't create a deployment in one location when there's an existing deployment with the same name in a different location. For example, if you create a management group deployment with the namedeployment1incentralus, you can't later create another deployment with the namedeployment1but a location ofwestus. If you get the error codeInvalidDeploymentLocation, either use a different name or the same location as the previous deployment for that name.
InvalidDeploymentLocation
Deployment scopes
In a Bicep file, all resources declared with theresourcekeyword must be deployed at the same scope as the deployment. For a management group deployment, this means allresourcedeclarations in the Bicep file must be deployed to the same management group or as a child or extension resource of a resource in the same management group as the deployment.
resource
resource
However, this restriction doesn't apply toexistingresources. You can reference existing resources at a different scope than the deployment.
existing
To deploy resources at multiple scopes within a single deployment, usemodules. Deploying a module triggers a "nested deployment," allowing you to target different scopes. The user deploying the parent Bicep file must have the necessary permissions to initiate deployments at those scopes.
You can deploy a Bicep module from within a management-group scope Bicep file at the following scopes:
The same management group
Other management groups
The subscription
The resource group
The tenant
Scope to management group
To deploy resources to the target management group, add those resources with theresourcekeyword.
resource
targetScope = 'managementGroup'

// policy definition created in the management group
resource policyDefinition 'Microsoft.Authorization/policyDefinitions@2025-01-01' = {
  ...
}
targetScope = 'managementGroup'

// policy definition created in the management group
resource policyDefinition 'Microsoft.Authorization/policyDefinitions@2025-01-01' = {
  ...
}
To target another management group, add amodule. Use themanagementGroup functionto set thescopeproperty. Provide the management group name.
scope
targetScope = 'managementGroup'

param otherManagementGroupName string

// module deployed at management group level but in a different management group
module exampleModule 'module.bicep' = {
  name: 'deployToDifferentMG'
  scope: managementGroup(otherManagementGroupName)
}
targetScope = 'managementGroup'

param otherManagementGroupName string

// module deployed at management group level but in a different management group
module exampleModule 'module.bicep' = {
  name: 'deployToDifferentMG'
  scope: managementGroup(otherManagementGroupName)
}
Scope to subscription
You can also target subscriptions within a management group. The user deploying the template must have access to the specified scope.
To target a subscription within the management group, add a module. Use thesubscription functionto set thescopeproperty. Provide the subscription ID.
scope
targetScope = 'managementGroup'

param subscriptionID string

// module deployed to subscription in the management group
module exampleModule 'module.bicep' = {
  name: 'deployToSub'
  scope: subscription(subscriptionID)
}
targetScope = 'managementGroup'

param subscriptionID string

// module deployed to subscription in the management group
module exampleModule 'module.bicep' = {
  name: 'deployToSub'
  scope: subscription(subscriptionID)
}
Scope to resource group
You can also target resource groups within the management group. The user deploying the template must have access to the specified scope.
To target a resource group within the management group, add a module. Use theresourceGroup functionto set thescopeproperty.  Provide the subscription ID and resource group name.
scope
targetScope = 'managementGroup'

param subscriptionID string
param resourceGroupName string

// module deployed to resource group in the management group
module exampleModule 'module.bicep' = {
  name: 'deployToRG'
  scope: resourceGroup(subscriptionID, resourceGroupName)
}
targetScope = 'managementGroup'

param subscriptionID string
param resourceGroupName string

// module deployed to resource group in the management group
module exampleModule 'module.bicep' = {
  name: 'deployToRG'
  scope: resourceGroup(subscriptionID, resourceGroupName)
}
Scope to tenant
To create resources at the tenant, add a module. Use thetenant functionto set itsscopeproperty. The user deploying the template must have therequired access to deploy at the tenant.
scope
targetScope = 'managementGroup'

// module deployed at tenant level
module exampleModule 'module.bicep' = {
  name: 'deployToTenant'
  scope: tenant()
}
targetScope = 'managementGroup'

// module deployed at tenant level
module exampleModule 'module.bicep' = {
  name: 'deployToTenant'
  scope: tenant()
}
Or, you can set the scope to/for some resource types, like management groups. Creating a new management group is described in the next section.
/
Management group
To create a management group in a management group deployment, you must set the scope to the tenant.
The following example creates a new management group in the root management group.
targetScope = 'managementGroup'

param mgName string = 'mg-${uniqueString(newGuid())}'

resource newMG 'Microsoft.Management/managementGroups@2023-04-01' = {
  scope: tenant()
  name: mgName
  properties: {}
}

output newManagementGroup string = mgName
targetScope = 'managementGroup'

param mgName string = 'mg-${uniqueString(newGuid())}'

resource newMG 'Microsoft.Management/managementGroups@2023-04-01' = {
  scope: tenant()
  name: mgName
  properties: {}
}

output newManagementGroup string = mgName
The next example creates a new management group in the management group targeted for the deployment. It uses themanagement group function.
targetScope = 'managementGroup'

param mgName string = 'mg-${uniqueString(newGuid())}'

resource newMG 'Microsoft.Management/managementGroups@2023-04-01' = {
  scope: tenant()
  name: mgName
  properties: {
    details: {
      parent: {
        id: managementGroup().id
      }
    }
  }
}

output newManagementGroup string = mgName
targetScope = 'managementGroup'

param mgName string = 'mg-${uniqueString(newGuid())}'

resource newMG 'Microsoft.Management/managementGroups@2023-04-01' = {
  scope: tenant()
  name: mgName
  properties: {
    details: {
      parent: {
        id: managementGroup().id
      }
    }
  }
}

output newManagementGroup string = mgName
Subscriptions
To use an ARM template to create a new Azure subscription in a management group, see:
Programmatically create Azure Enterprise Agreement subscriptions
Programmatically create Azure subscriptions for a Microsoft Customer Agreement
Programmatically create Azure subscriptions for a Microsoft Partner Agreement
To deploy a template that moves an existing Azure subscription to a new management group, seeMove subscriptions in ARM template
Azure Policy
Custom policy definitions that are deployed to the management group are extensions of the management group. To get the ID of a custom policy definition, use theextensionResourceId()function. Built-in policy definitions are tenant level resources. To get the ID of a built-in policy definition, use thetenantResourceId()function.
The following example shows how todefinea policy at the management group level, and how to assign it.
targetScope = 'managementGroup'

@description('An array of the allowed locations, all other locations will be denied by the created policy.')
param allowedLocations array = [
  'australiaeast'
  'australiasoutheast'
  'australiacentral'
]

resource policyDefinition 'Microsoft.Authorization/policyDefinitions@2023-04-01' = {
  name: 'locationRestriction'
  properties: {
    policyType: 'Custom'
    mode: 'All'
    parameters: {}
    policyRule: {
      if: {
        not: {
          field: 'location'
          in: allowedLocations
        }
      }
      then: {
        effect: 'deny'
      }
    }
  }
}

resource policyAssignment 'Microsoft.Authorization/policyAssignments@2024-04-01' = {
  name: 'locationAssignment'
  properties: {
    policyDefinitionId: policyDefinition.id
  }
}
targetScope = 'managementGroup'

@description('An array of the allowed locations, all other locations will be denied by the created policy.')
param allowedLocations array = [
  'australiaeast'
  'australiasoutheast'
  'australiacentral'
]

resource policyDefinition 'Microsoft.Authorization/policyDefinitions@2023-04-01' = {
  name: 'locationRestriction'
  properties: {
    policyType: 'Custom'
    mode: 'All'
    parameters: {}
    policyRule: {
      if: {
        not: {
          field: 'location'
          in: allowedLocations
        }
      }
      then: {
        effect: 'deny'
      }
    }
  }
}

resource policyAssignment 'Microsoft.Authorization/policyAssignments@2024-04-01' = {
  name: 'locationAssignment'
  properties: {
    policyDefinitionId: policyDefinition.id
  }
}
Next steps
To learn about other scopes, see:
Resource group deployments
Subscription deployments
Tenant deployments
Feedback
Was this page helpful?
Additional resources