Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Use Application Configuration Service for Tanzu
Article
2024-03-29
6 contributors
In this article
Note
TheBasic,Standard, andEnterpriseplans entered a retirement period on March 17, 2025. For more information, see theAzure Spring Apps retirement announcement.
TheStandard consumption and dedicatedplan entered a retirement period on September 30, 2024, with a complete shutdown by the end of March 2025. For more information, seeMigrate Azure Spring Apps Standard consumption and dedicated plan to Azure Container Apps.
Note
Application Configuration Service for VMware Tanzu reaches the end of support on August 31, 2025. We recommend migrating it to managedSpring Cloud Config Server. For more information on how to perform the migration, seeMigrate Application Configuration Service to managed Spring Cloud Config Server.
This article applies to:â Basic/Standard â Enterprise
This article shows you how to use Application Configuration Service for VMware Tanzu with the Azure Spring Apps Enterprise plan.
Application Configuration Service for VMware Tanzuis one of the commercial VMware Tanzu components. It enables the management of Kubernetes-nativeConfigMapresources that are populated from properties defined in one or more Git repositories.
ConfigMap
With Application Configuration Service, you have a central place to manage external properties for applications across all environments. To understand the differences from Spring Cloud Config Server in the Basic and Standard plans, see theUse Application Configuration Service for external configurationsection ofMigrate an Azure Spring Apps Basic or Standard plan instance to the Enterprise plan.
Application Configuration Service is offered in two versions: Gen1 and Gen2. The Gen1 version mainly serves existing customers for backward compatibility purposes, and is supported only until April 30, 2024. New service instances should use Gen2. The Gen2 version usesfluxas the backend to communicate with Git repositories, and provides better performance compared to Gen1.
The following table shows the subcomponent relationships:
application-configuration-service
application-configuration-service
flux-source-controller
The following table shows some benchmark data for your reference. However, the Git repository size is a key factor with significant impact on the performance data. We recommend that you store only the necessary configuration files in the Git repository in order to keep it small.
Gen2 also provides more security verifications when you connect to a remote Git repository. Gen2 requires a secure connection if you're using HTTPS, and verifies the correct host key and host algorithm when using an SSH connection.
You can choose the version of Application Configuration Service when you create an Azure Spring Apps Enterprise service instance. The default version is Gen1. You can also upgrade to Gen2 after the instance is created, but downgrade isn't supported. The upgrade is zero downtime, but we still recommend that you to test in a staging environment before moving to a production environment.
Prerequisites
An already provisioned Azure Spring Apps Enterprise plan instance with Application Configuration Service enabled. For more information, seeQuickstart: Build and deploy apps to Azure Spring Apps using the Enterprise plan.
Manage Application Configuration Service settings
Application Configuration Service supports Azure DevOps, GitHub, GitLab, and Bitbucket for storing your configuration files.
To manage the service settings, open theSettingssection. In this section, you can configure the following key aspects:
Generation: Upgrade the service generation.
Refresh Interval: Adjust the frequency at which the service checks for updates from Git repositories.
Repositories: Add new entries, or modify existing ones. This function enables you to control which repositories the service monitors use to pull data.

If your current service generation isGen1, you can upgrade toGen2for better performance. For more information, see theUpgrade from Gen1 to Gen2section.
TheRefresh Intervalspecifies the frequency in seconds for checking updates in the repository. The minimum value is0, which disables automatic refresh. For optimal performance, set this interval to a minimum value of 60 seconds.
The following table describes the properties for each repository entry:
Name
Patterns
URI
https://github.com/Azure-Samples/piggymetrics-config
git@github.com:Azure-Samples/piggymetrics-config
Label
Search path
Pattern
Configuration is pulled from Git backends using what you define in a pattern. A pattern is a combination of{application}/{profile}as described in the following guidelines:
{application}- The name of an application whose configuration you're retrieving. The valueapplicationis considered the default application and includes configuration information shared across multiple applications. Any other value refers to a specific application and includes properties for both the specific application and shared properties for the default application.
application
{profile}- Optional. The name of a profile whose properties you can retrieve. An empty value, or the valuedefault, includes properties that are shared across profiles. Non-default values include properties for the specified profile and properties for the default profile.
default
Authentication
The following screenshot shows the three types of repository authentication supported by Application Configuration Service:

The following list describes the three authentication types:
Public repository.You don't need any extra authentication configuration when you use a public repository. SelectPublicin theAuthenticationform.The following table shows the configurable property you can use to set up a public Git repository:PropertyRequired?DescriptionCA certificateNoRequired only when a self-signed cert is used for the Git repo URL.
Public repository.
You don't need any extra authentication configuration when you use a public repository. SelectPublicin theAuthenticationform.
The following table shows the configurable property you can use to set up a public Git repository:
CA certificate
Private repository with basic authentication.The following table shows the configurable properties you can use to set up a private Git repository with basic authentication:PropertyRequired?DescriptionusernameYesThe username used to access the repository.passwordYesThe password used to access the repository.CA certificateNoRequired only when a self-signed cert is used for the Git repo URL.
Private repository with basic authentication.
The following table shows the configurable properties you can use to set up a private Git repository with basic authentication:
username
password
CA certificate
Private repository with SSH authentication.The following table shows the configurable properties you can use to set up a private Git repository with SSH:PropertyRequired?DescriptionPrivate keyYesThe private key that identifies the Git user. Passphrase-encrypted private keys aren't supported.Host keyNo for Gen1Yes for Gen2The host key of the Git server. If you connect to the server via Git on the command line, the host key is in your.ssh/known_hostsfile. Don't include the algorithm prefix, because it's specified inHost key algorithm.Host key algorithmNo for Gen1Yes for Gen2The algorithm forhostKey: one ofssh-dss,ssh-rsa,ecdsa-sha2-nistp256,ecdsa-sha2-nistp384, andecdsa-sha2-nistp521. Required if you supplyHost key.Strict host key checkingNoOptional value that indicates whether the backend should be ignored if it encounters an error when using the providedHost key. Valid values aretrueandfalse. The default value istrue.
Private repository with SSH authentication.
The following table shows the configurable properties you can use to set up a private Git repository with SSH:
Private key
Host key
Host key algorithm
Host key algorithm
hostKey
ssh-dss
ssh-rsa
ecdsa-sha2-nistp256
ecdsa-sha2-nistp384
ecdsa-sha2-nistp521
Host key
Strict host key checking
Host key
true
false
true
To validate access to the target URI, selectValidate. After validation completes successfully, selectApplyto update the configuration settings.
Upgrade from Gen1 to Gen2
Application Configuration Service Gen2 provides better performance compared to Gen1, especially when you have a large number of configuration files. We recommend using Gen2, especially because Gen1 is being retired soon. The upgrade from Gen1 to Gen2 is zero downtime, but we still recommend that you test in a staging environment before moving to a production environment.
Gen2 requires more configuration properties than Gen1 when using SSH authentication. You need to update the configuration properties in your application to make it work with Gen2. The following table shows the required properties for Gen2 when using SSH authentication:
Host key
Host key algorithm
Host key algorithm
hostKey
ssh-dss
ssh-rsa
ecdsa-sha2-nistp256
ecdsa-sha2-nistp384
ecdsa-sha2-nistp521
Use the following steps to upgrade from Gen1 to Gen2:
In the Azure portal, navigate to the Application Configuration Service page for your Azure Spring Apps service instance.
In the Azure portal, navigate to the Application Configuration Service page for your Azure Spring Apps service instance.
Select theSettingssection and then selectGen2in theGenerationdropdown menu.
Select theSettingssection and then selectGen2in theGenerationdropdown menu.

SelectValidateto validate access to the target URI. After validation completes successfully, selectApplyto update the configuration settings.
SelectValidateto validate access to the target URI. After validation completes successfully, selectApplyto update the configuration settings.

Polyglot support
The Application Configuration Service works seamlessly with Spring Boot applications. The properties generated by the service are imported as external configurations by Spring Boot and injected into the beans. You don't need to write extra code. You can consume the values by using the@Valueannotation, accessed through Spring's Environment abstraction, or you can bind them to structured objects by using the@ConfigurationPropertiesannotation.
@Value
@ConfigurationProperties
The Application Configuration Service also supports polyglot apps like dotNET, Go, Python, and so on. To access config files that you specify to load during polyglot app deployment in the apps, try to access a file path that you can retrieve through an environment variable with a name such asAZURE_SPRING_APPS_CONFIG_FILE_PATH. You can access all your intended config files under that path. To access the property values in the config files, use the existing read/write file libraries for your app.
AZURE_SPRING_APPS_CONFIG_FILE_PATH
Refresh strategies
When you modify and commit your configurations in a Git repository, several steps are involved before these changes are reflected in your applications. This process, though automated, involves the following distinct stages and components, each with its own timing and behavior:
Polling by Application Configuration Service: The Application Configuration Service regularly polls the backend Git repositories to detect any changes. This polling occurs at a set frequency, defined by the refresh interval. When a change is detected, Application Configuration Service updates the KubernetesConfigMap.
ConfigMap
ConfigMapupdate and interaction with kubelet cache: In Azure Spring Apps, thisConfigMapis mounted as a data volume to the relevant application. However, there's a natural delay in this process due to the frequency at which the kubelet refreshes its cache to recognize changes inConfigMap.
ConfigMap
ConfigMap
ConfigMap
Application reads updated configuration: Your application running in the Azure Spring Apps environment can access the updated configuration values. The existing beans in the Spring Context aren't automatically refreshed to use the updated configurations.
These stages are summarized in the following diagram:

You can adjust the polling refresh interval of the Application Configuration Service to align with your specific needs. To apply the updated configurations in your application, a restart or refresh action is necessary.
In Spring applications, properties are held or referenced as beans within the Spring Context. To load new configurations, consider using the following methods:
Restart the application. Restarting the application always loads the new configuration.
Restart the application. Restarting the application always loads the new configuration.
Call the/actuator/refreshendpoint exposed on the config client via the Spring Actuator.To use this method, add the following dependency to your configuration client'spom.xmlfile:<dependency>
   <groupId>org.springframework.boot</groupId>
   <artifactId>spring-boot-starter-actuator</artifactId>
</dependency>You can also enable the actuator endpoint by adding the following configuration:management.endpoints.web.exposure.include=refresh, bus-refresh, beans, envAfter you reload the property sources by calling the/actuator/refreshendpoint, the attributes bound with@Valuein the beans having the annotation@RefreshScopeare refreshed.@Service
@Getter @Setter
@RefreshScope
public class MyService {
   @Value
   private Boolean activated;
}Use curl with the application endpoint to refresh the new configuration, as shown in the following example:curl -X POST http://{app-endpoint}/actuator/refresh
Call the/actuator/refreshendpoint exposed on the config client via the Spring Actuator.
/actuator/refresh
To use this method, add the following dependency to your configuration client'spom.xmlfile:
<dependency>
   <groupId>org.springframework.boot</groupId>
   <artifactId>spring-boot-starter-actuator</artifactId>
</dependency>
<dependency>
   <groupId>org.springframework.boot</groupId>
   <artifactId>spring-boot-starter-actuator</artifactId>
</dependency>
You can also enable the actuator endpoint by adding the following configuration:
management.endpoints.web.exposure.include=refresh, bus-refresh, beans, env
management.endpoints.web.exposure.include=refresh, bus-refresh, beans, env
After you reload the property sources by calling the/actuator/refreshendpoint, the attributes bound with@Valuein the beans having the annotation@RefreshScopeare refreshed.
/actuator/refresh
@Value
@RefreshScope
@Service
@Getter @Setter
@RefreshScope
public class MyService {
   @Value
   private Boolean activated;
}
@Service
@Getter @Setter
@RefreshScope
public class MyService {
   @Value
   private Boolean activated;
}
Use curl with the application endpoint to refresh the new configuration, as shown in the following example:
curl -X POST http://{app-endpoint}/actuator/refresh
curl -X POST http://{app-endpoint}/actuator/refresh
UseFileSystemWatcherto watch the file change and refresh the context on demand.FileSystemWatcheris a class shipped withspring-boot-devtoolsthat watches specific directories for file changes, or you can use another utility with similar function. The previous option requires users to initiate the refresh actively, while the latter can monitor for file changes and automatically invoke the refresh upon detecting updates. You can retrieve the file path by using the environment variableAZURE_SPRING_APPS_CONFIG_FILE_PATH, as mentioned in thePolyglot supportsection.
UseFileSystemWatcherto watch the file change and refresh the context on demand.FileSystemWatcheris a class shipped withspring-boot-devtoolsthat watches specific directories for file changes, or you can use another utility with similar function. The previous option requires users to initiate the refresh actively, while the latter can monitor for file changes and automatically invoke the refresh upon detecting updates. You can retrieve the file path by using the environment variableAZURE_SPRING_APPS_CONFIG_FILE_PATH, as mentioned in thePolyglot supportsection.
FileSystemWatcher
FileSystemWatcher
spring-boot-devtools
AZURE_SPRING_APPS_CONFIG_FILE_PATH
Configure Application Configuration Service settings
Azure portal
Azure CLI
Use the following steps to configure Application Configuration Service:
SelectApplication Configuration Service.
SelectApplication Configuration Service.
SelectOverviewto view the running state and resources allocated to Application Configuration Service.
SelectOverviewto view the running state and resources allocated to Application Configuration Service.

SelectSettingsand add a new entry in theRepositoriessection with the Git backend information.
SelectSettingsand add a new entry in theRepositoriessection with the Git backend information.
SelectValidateto validate access to the target URI. After validation completes successfully, selectApplyto update the configuration settings.
SelectValidateto validate access to the target URI. After validation completes successfully, selectApplyto update the configuration settings.

Use the following command to configure Application Configuration Service:
az spring application-configuration-service git repo add \
    --name <entry-name> \
    --patterns <patterns> \
    --uri <git-backend-uri> \
    --label <git-branch-name>
az spring application-configuration-service git repo add \
    --name <entry-name> \
    --patterns <patterns> \
    --uri <git-backend-uri> \
    --label <git-branch-name>
Configure the TLS certificate to access the Git backend with a self-signed certificate for Gen2
This step is optional. If you use a self-signed certificate for the Git backend, you must configure the TLS certificate to access the Git backend.
You need to upload the certificate to Azure Spring Apps first. For more information, see theImport a certificatesection ofUse TLS/SSL certificates in your application in Azure Spring Apps.
Azure portal
Azure CLI
Use the following steps to configure the TLS certificate:
Navigate to your service resource and then selectApplication Configuration Service.
Navigate to your service resource and then selectApplication Configuration Service.
SelectSettingsand add or update a new entry in theRepositoriessection with the Git backend information.
SelectSettingsand add or update a new entry in theRepositoriessection with the Git backend information.

Use the following command to configure the TLS certificate:
az spring application-configuration-service git repo add \
    --name <entry-name> \
    --patterns <patterns> \
    --uri <git-backend-uri> \
    --label <git-branch-name> \
    --ca-cert-name <ca-certificate-name>
az spring application-configuration-service git repo add \
    --name <entry-name> \
    --patterns <patterns> \
    --uri <git-backend-uri> \
    --label <git-branch-name> \
    --ca-cert-name <ca-certificate-name>
Use Application Configuration Service with applications
When you use Application Configuration Service with a Git back end and use the centralized configurations, you must bind the app to Application Configuration Service.
Azure portal
Azure CLI
Use the following steps to use Application Configuration Service with applications:
Open theApp bindingtab.
Open theApp bindingtab.
SelectBind appand choose one app from the dropdown. SelectApplyto bind.NoteWhen you change the bind/unbind status, you must restart or redeploy the app to for the binding to take effect.
SelectBind appand choose one app from the dropdown. SelectApplyto bind.

Note
When you change the bind/unbind status, you must restart or redeploy the app to for the binding to take effect.
In the navigation menu, selectAppsto view the list of all the apps.
In the navigation menu, selectAppsto view the list of all the apps.
Select the target app to configure patterns for thenamecolumn.
Select the target app to configure patterns for thenamecolumn.
name
In the navigation pane, selectConfigurationand then selectGeneral settings.
In the navigation pane, selectConfigurationand then selectGeneral settings.
In theConfig file patternsdropdown, choose one or more patterns from the list. For more information, see thePatternsection.
In theConfig file patternsdropdown, choose one or more patterns from the list. For more information, see thePatternsection.

SelectSave.
SelectSave.
Use the following command to use Application Configuration Service with applications:
az spring application-configuration-service bind --app <app-name>
az spring app deploy \
    --name <app-name> \
    --artifact-path <path-to-your-JAR-file> \
    --config-file-pattern <config-file-pattern>
az spring application-configuration-service bind --app <app-name>
az spring app deploy \
    --name <app-name> \
    --artifact-path <path-to-your-JAR-file> \
    --config-file-pattern <config-file-pattern>
Bind an app to the Application Configuration Service
You can now choose to bind your application to the Application Configuration Service when creating a new app.
Azure portal
Azure CLI
Use the following steps to create a new app and bind it to the Application Configuration Service:
In the navigation pane, selectAppsto see all your apps.
In the navigation pane, selectAppsto see all your apps.
SelectCreate Appto create a new app.
SelectCreate Appto create a new app.
Enter a name for your new app.
Enter a name for your new app.
Select theBindtab and then selectApplication Configuration Servicefrom the dropdown.
Select theBindtab and then selectApplication Configuration Servicefrom the dropdown.

SelectCreateto finish creating your app and binding it to the Application Configuration Service.
SelectCreateto finish creating your app and binding it to the Application Configuration Service.
Use the following command to create a new app and bind it to the Application Configuration Service:
az spring app create \
    --resource-group <resource-group> \
    --service <service-name> \
    --name <app-name> \
    --bind-application-configuration-service
az spring app create \
    --resource-group <resource-group> \
    --service <service-name> \
    --name <app-name> \
    --bind-application-configuration-service
Enable/disable Application Configuration Service after service creation
You can enable and disable Application Configuration Service after service creation using the Azure portal or the Azure CLI. Before disabling Application Configuration Service, you're required to unbind all of your apps from it.
Azure portal
Azure CLI
Use the following steps to enable or disable Application Configuration Service:
Navigate to your service resource and then selectApplication Configuration Service.
SelectManage.
Select or unselectEnable Application Configuration Serviceand then selectSave.
You can now view the state of Application Configuration Service on theApplication Configuration Servicepage.
Use the following commands to enable or disable Application Configuration Service:
az spring application-configuration-service create \
    --resource-group <resource-group-name> \
    --service <Azure-Spring-Apps-service-instance-name>
az spring application-configuration-service create \
    --resource-group <resource-group-name> \
    --service <Azure-Spring-Apps-service-instance-name>
az spring application-configuration-service delete \
    --resource-group <resource-group-name> \
    --service <Azure-Spring-Apps-service-instance-name>
az spring application-configuration-service delete \
    --resource-group <resource-group-name> \
    --service <Azure-Spring-Apps-service-instance-name>
Examine configuration file in ConfigMap
The following section shows you how to examine the content of the configuration file pulled by Application Configuration Service from upstream Git repositories in the related KubernetesConfigMap. For more information, see theRefresh strategiessection of this article.
ConfigMap
Assign an Azure role
First, you must have the Azure roleAzure Spring Apps Application Configuration Service Config File Pattern Reader Roleassigned to you.
Azure Spring Apps Application Configuration Service Config File Pattern Reader Role
Azure portal
Azure CLI
Use the following steps to assign an Azure role:
Open theAzure portaland go to your Azure Spring Apps service instance.
Open theAzure portaland go to your Azure Spring Apps service instance.
In the navigation pane, selectAccess Control (IAM).
In the navigation pane, selectAccess Control (IAM).
On theAccess Control (IAM)page, selectAdd, and then selectAdd role assignment.
On theAccess Control (IAM)page, selectAdd, and then selectAdd role assignment.

On theAdd role assignmentpage, in theNamelist, search for and select the target role, and then selectNext.
On theAdd role assignmentpage, in theNamelist, search for and select the target role, and then selectNext.

SelectMembersand then search for and select your username.
SelectMembersand then search for and select your username.
SelectReview + assign.
SelectReview + assign.
Use the following command to assign an Azure role:
az role assignment create \
    --role "Azure Spring Apps Application Configuration Service Config File Pattern Reader Role" \
    --scope "<service-instance-resource-id>" \
    --assignee "<your-identity>"
az role assignment create \
    --role "Azure Spring Apps Application Configuration Service Config File Pattern Reader Role" \
    --scope "<service-instance-resource-id>" \
    --assignee "<your-identity>"
Examine configuration file with the Azure CLI
Use the following command to view the content of the configuration file byPattern:
az spring application-configuration-service config show \
    --resource-group <resource-group-name> \
    --service <Azure-Spring-Apps-instance-name> \
    --config-file-pattern <pattern>
az spring application-configuration-service config show \
    --resource-group <resource-group-name> \
    --service <Azure-Spring-Apps-instance-name> \
    --config-file-pattern <pattern>
This command produces JSON output similar to the following example:
{
  "configurationFiles": {
    "application.properties": [
      "example.property.application.name: example-service",
      "example.property.cloud: Azure"
    ]
  },
  "metadata": {
    "gitRevisions": "[{\"url\":\"{gitRepoUrl}\",\"revision\":\"{revisionInfo}\"}]"
  }
}
{
  "configurationFiles": {
    "application.properties": [
      "example.property.application.name: example-service",
      "example.property.cloud: Azure"
    ]
  },
  "metadata": {
    "gitRevisions": "[{\"url\":\"{gitRepoUrl}\",\"revision\":\"{revisionInfo}\"}]"
  }
}
Note
ThemetadataandgitRevisionsproperties aren't available for the Gen1 version of Application Configuration Service.
metadata
gitRevisions
You can also use this command with the--export-path <path-to-target-folder>parameter to export the configuration file to the specified folder. It supports both relative paths and absolute paths. If you don't specify the path, the command uses the path of the current directory by default.
--export-path <path-to-target-folder>
Examine configuration file in the app
After you bind the app to the Application Configuration Service and set thePatternfor the app deployment, as described in theUse Application Configuration Service with applicationssection of this article, theConfigMapcontaining the configuration file for the pattern should be mounted to the application container. Use the following steps to check the configuration files in each instance of the app deployment:
ConfigMap
Connect to one of the application instances. For more information, seeConnect to an app instance for troubleshooting.
Connect to one of the application instances. For more information, seeConnect to an app instance for troubleshooting.
Use theecho $AZURE_SPRING_APPS_CONFIG_FILE_PATHcommand to find the folders containing the configuration files. A list of locations shows up separated by commas, as shown in the following example:$ echo $AZURE_SPRING_APPS_CONFIG_FILE_PATH
/etc/azure-spring-cloud/configmap/acs-default-payment-default-e9d46,/etc/azure-spring-cloud/configmap/acs-default-catalog-default-616f4
Use theecho $AZURE_SPRING_APPS_CONFIG_FILE_PATHcommand to find the folders containing the configuration files. A list of locations shows up separated by commas, as shown in the following example:
echo $AZURE_SPRING_APPS_CONFIG_FILE_PATH
$ echo $AZURE_SPRING_APPS_CONFIG_FILE_PATH
/etc/azure-spring-cloud/configmap/acs-default-payment-default-e9d46,/etc/azure-spring-cloud/configmap/acs-default-catalog-default-616f4
$ echo $AZURE_SPRING_APPS_CONFIG_FILE_PATH
/etc/azure-spring-cloud/configmap/acs-default-payment-default-e9d46,/etc/azure-spring-cloud/configmap/acs-default-catalog-default-616f4
Check the content of the configuration file using commands such ascat.
Check the content of the configuration file using commands such ascat.
cat
Note
The Git revision information isn't available in the app.
Check logs
The following sections show you how to view application logs by using either the Azure CLI or the Azure portal.
Use real-time log streaming
You can stream logs in real time with the Azure CLI. For more information, seeStream Azure Spring Apps managed component logs in real time. The following examples show how you can use Azure CLI commands to continuously stream new logs forapplication-configuration-serviceandflux-source-controllersubcomponents.
application-configuration-service
flux-source-controller
Use the following command to stream logs forapplication-configuration-service:
application-configuration-service
az spring component logs \
    --resource-group <resource-group-name> \
    --service <Azure-Spring-Apps-instance-name> \
    --name application-configuration-service \
    --all-instances \
    --follow
az spring component logs \
    --resource-group <resource-group-name> \
    --service <Azure-Spring-Apps-instance-name> \
    --name application-configuration-service \
    --all-instances \
    --follow
Use the following command to stream logs forflux-source-controller:
flux-source-controller
az spring component logs \
    --resource-group <resource-group-name> \
    --service <Azure-Spring-Apps-instance-name> \
    --name flux-source-controller \
    --all-instances \
    --follow
az spring component logs \
    --resource-group <resource-group-name> \
    --service <Azure-Spring-Apps-instance-name> \
    --name flux-source-controller \
    --all-instances \
    --follow
Use Log Analytics
The following sections show you how to turn on and view System Logs using Log Analytics.
You must turn on System Logs and send the logs to your Log Analytics instance before you query the logs for Application Configuration Service. To enable System Logs in the Azure portal, use the following steps:
Open your Azure Spring Apps instance.
In the navigation pane, selectDiagnostics settings.
SelectAdd diagnostic settingor selectEdit settingfor an existing setting.
In theLogssection, select theSystem Logscategory.
In theDestination detailssection, selectSend to Log Analytics workspaceand then select your workspace.
SelectSaveto update the setting.
To check the logs ofapplication-configuration-serviceandflux-source-controllerusing the Azure portal, use the following steps:
application-configuration-service
flux-source-controller
Make sure you turned onSystem Logs. For more information, see theDiagnostic settings for Log Analyticssection.
Make sure you turned onSystem Logs. For more information, see theDiagnostic settings for Log Analyticssection.
Open your Azure Spring Apps instance.
Open your Azure Spring Apps instance.
In the navigation menu, selectLogsand then selectOverview.
In the navigation menu, selectLogsand then selectOverview.
Use the following sample queries in the query edit pane. Adjust the time range then selectRunto search for logs.To view the logs forapplication-configuration-service, use the following query:AppPlatformSystemLogs
| where LogType in ("ApplicationConfigurationService")
| project TimeGenerated , ServiceName , LogType, Log , _ResourceId
| limit 100To view the logs forflux-source-controller, use the following query:AppPlatformSystemLogs
| where LogType in ("Flux")
| project TimeGenerated , ServiceName , LogType, Log , _ResourceId
| limit 100
Use the following sample queries in the query edit pane. Adjust the time range then selectRunto search for logs.
To view the logs forapplication-configuration-service, use the following query:AppPlatformSystemLogs
| where LogType in ("ApplicationConfigurationService")
| project TimeGenerated , ServiceName , LogType, Log , _ResourceId
| limit 100
To view the logs forapplication-configuration-service, use the following query:
application-configuration-service
AppPlatformSystemLogs
| where LogType in ("ApplicationConfigurationService")
| project TimeGenerated , ServiceName , LogType, Log , _ResourceId
| limit 100
AppPlatformSystemLogs
| where LogType in ("ApplicationConfigurationService")
| project TimeGenerated , ServiceName , LogType, Log , _ResourceId
| limit 100

To view the logs forflux-source-controller, use the following query:AppPlatformSystemLogs
| where LogType in ("Flux")
| project TimeGenerated , ServiceName , LogType, Log , _ResourceId
| limit 100
To view the logs forflux-source-controller, use the following query:
flux-source-controller
AppPlatformSystemLogs
| where LogType in ("Flux")
| project TimeGenerated , ServiceName , LogType, Log , _ResourceId
| limit 100
AppPlatformSystemLogs
| where LogType in ("Flux")
| project TimeGenerated , ServiceName , LogType, Log , _ResourceId
| limit 100

Note
There might be a few minutes delay before the logs are available in Log Analytics.
Examine Git revisions of the configuration files
You can find the Git revision of the configuration file of thePatternin the logs of Application Configuration Service. The following example log indicates that the configuration file for thepayment/defaultpattern is pulled withexample-commit-idfrom themainbranch of thehttps://github.com/Azure-Samples/acme-fitness-store-configrepository. You can learn how to query logs in theCheck logssection.
payment/default
example-commit-id
main
https://github.com/Azure-Samples/acme-fitness-store-config
Applied ConfigMap ({config-map-name}) for content (payment/default) from Git repositories https://github.com/Azure-Samples/acme-fitness-store-config@main@sha1:{example-commit-id}
Applied ConfigMap ({config-map-name}) for content (payment/default) from Git repositories https://github.com/Azure-Samples/acme-fitness-store-config@main@sha1:{example-commit-id}
You can also find the Git revision by using the Azure CLI. For more information, see theExamine configuration file with the Azure CLIsection.
Note
Git revision isn't available for the Gen1 version of Application Configuration Service.
Troubleshoot known issues
If the latest changes aren't reflected in the applications, check the following items based on theRefresh strategiessection:
Confirm that the Git repo is updated correctly by checking the following items:Confirm that the branch of the desired config file changes is updated.Confirm that the pattern configured in the Application Configuration Service matches the updated config files.Confirm that the application is bound to the Application Configuration Service.
Confirm that the branch of the desired config file changes is updated.
Confirm that the pattern configured in the Application Configuration Service matches the updated config files.
Confirm that the application is bound to the Application Configuration Service.
Confirm that the Application Configuration Service is using the correct Git revisions as described in theExamine Git revisions of the configuration filessection.
Confirm that theConfigMapcontaining the configuration file for thePatternused by the application is updated, as described in theExamine configuration file in ConfigMapsection of this article. If it isn't updated, raise a ticket.
ConfigMap
Confirm that theConfigMapis mounted to the application as a file, as described in theExamine configuration file in the appsection of this article. If the file isn't updated, wait for the Kubernetes refresh interval - one minute - or force a refresh by restarting the application.
ConfigMap
After checking these items, the applications should be able to read the updated configurations. If the applications still aren't updated, raise a ticket.
Related content
Azure Spring Apps
Feedback
Was this page helpful?
Additional resources