Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Enable diagnostic logging for apps in Azure App Service
Article
2025-03-27
22 contributors
In this article
Azure provides built-in diagnostics to assist with debugging anAzure App Service app. In this article, you learn how to enable diagnostic logging and add instrumentation to your application. You also learn how to access the information that Azure logs.

Note
Starting June 1, 2024, newly created App Service apps can generate a unique default host name that uses the naming convention<app-name>-<random-hash>.<region>.azurewebsites.net. For example:myapp-ds27dh7271aah175.westus-01.azurewebsites.net. Existing app names remain unchanged.
<app-name>-<random-hash>.<region>.azurewebsites.net
myapp-ds27dh7271aah175.westus-01.azurewebsites.net
For more information, see theblog post about creating a web app with a unique default host name.
This article uses theAzure portaland the Azure CLI to work with diagnostic logs. For information on working with diagnostic logs by using Visual Studio, seeTroubleshoot an app in Azure App Service using Visual Studio.
In addition to the logging instructions in this article, you can use the Azure Monitor integrated logging capability. For more information, seeSend logs to Azure Monitor.
Note
App Service provides a dedicated, interactive diagnostic tool to help you troubleshoot your application. For more information, seeAzure App Service diagnostics overview.
You can also use other Azure services to improve the logging and monitoring capabilities of your app, such asAzure Monitor.
Overview of logging types
When logs are stored in the App Service file system, they're subject to the available storage for your pricing tier. For more information, seeApp Service limits.
Enable application logging (Windows)
To enable application logging for Windows apps in theAzure portal:
Go to your app and selectMonitoring>App Service logs.
Go to your app and selectMonitoring>App Service logs.
SelectOnfor either or both of these options:Application logging (Filesystem): This option is for temporary debugging purposes. It turns itself off in 12 hours.Application logging (Blob): This option is for long-term logging. It needs a blob storage container to write logs to.TheBloboption includes additional information in the log messages, such as the ID of the origin virtual machine instance of the log message (InstanceId), the thread ID (Tid), and a more granular time stamp (EventTickCount).
SelectOnfor either or both of these options:
Application logging (Filesystem): This option is for temporary debugging purposes. It turns itself off in 12 hours.
Application logging (Filesystem): This option is for temporary debugging purposes. It turns itself off in 12 hours.
Application logging (Blob): This option is for long-term logging. It needs a blob storage container to write logs to.TheBloboption includes additional information in the log messages, such as the ID of the origin virtual machine instance of the log message (InstanceId), the thread ID (Tid), and a more granular time stamp (EventTickCount).
Application logging (Blob): This option is for long-term logging. It needs a blob storage container to write logs to.
TheBloboption includes additional information in the log messages, such as the ID of the origin virtual machine instance of the log message (InstanceId), the thread ID (Tid), and a more granular time stamp (EventTickCount).
InstanceId
Tid
EventTickCount
ForLevel, select the level of details to log. The following table shows the log categories included in each level:LevelIncluded categoriesDisabledNoneErrorError,CriticalWarningWarning,Error,CriticalInformationInfo,Warning,Error,CriticalVerboseTrace,Debug,Info,Warning,Error,Critical(all categories)
ForLevel, select the level of details to log. The following table shows the log categories included in each level:
SelectSave.
SelectSave.
If you write logs to blobs, the retention policy no longer applies if you delete the app but keep the logs in the blobs. For more information, seeCosts that might accrue after resource deletion.
Currently, only .NET application logs can be written to blob storage. Java, PHP, Node.js, and Python application logs can be stored only in the App Service file system without code modifications to write logs to external storage.
If youregenerate your storage account's access keys, you must reset the respective logging configuration to use the updated access keys:
On theConfiguretab, set the respective logging feature toOff. Save your setting.
On theConfiguretab, set the respective logging feature toOff. Save your setting.
Enable logging to the storage account's blob again. Save your setting.
Enable logging to the storage account's blob again. Save your setting.
Enable application logging (Linux or container)
To enable application logging for Linux apps or custom containers in theAzure portal:
Go to your app and selectMonitoring>App Service logs.
Go to your app and selectMonitoring>App Service logs.
InApplication logging, selectFile System.
InApplication logging, selectFile System.
InQuota (MB), specify the disk quota for the application logs.
InQuota (MB), specify the disk quota for the application logs.
InRetention Period (Days), set the number of days to retain the logs.
InRetention Period (Days), set the number of days to retain the logs.
SelectSave.
SelectSave.
Enable web server logging
To enable web server logging for Windows apps in theAzure portal:
Go to your app and selectMonitoring>App Service logs.
Go to your app and selectMonitoring>App Service logs.
ForWeb server logging, selectStorageto store logs in blob storage, or selectFile Systemto store logs in the App Service file system.
ForWeb server logging, selectStorageto store logs in blob storage, or selectFile Systemto store logs in the App Service file system.
InRetention Period (Days), set the number of days to retain the logs.
InRetention Period (Days), set the number of days to retain the logs.
SelectSave.
SelectSave.
If you write logs to blobs, the retention policy no longer applies if you delete the app but keep the logs in the blobs. For more information, seeCosts that might accrue after resource deletion.
If youregenerate your storage account's access keys, you must reset the respective logging configuration to use the updated keys:
On theConfiguretab, set the respective logging feature toOff. Save your setting.
On theConfiguretab, set the respective logging feature toOff. Save your setting.
Enable logging to the storage account's blob again. Save your setting.
Enable logging to the storage account's blob again. Save your setting.
Log detailed errors
To save the error page or failed request traces for Windows apps in theAzure portal:
Go to your app and selectMonitoring>App Service logs.
Go to your app and selectMonitoring>App Service logs.
UnderDetailed error messagesorFailed request tracing, selectOn.
UnderDetailed error messagesorFailed request tracing, selectOn.
SelectSave.
SelectSave.
Both types of logs are stored in the App Service file system. It retains up to 50 errors (files or folders). When the number of HTML files exceeds 50, App Service deletes the oldest error files.
By default, failed request tracing captures a log of requests that failed with HTTP status codes between 400 and 600. To specify custom rules, override the<traceFailedRequests>section in theWeb.configfile.
<traceFailedRequests>
Web.config
Add log messages in code
In your application code, you can use the usual logging facilities to send log messages to the application logs. For example:
ASP.NET applications can use theSystem.Diagnostics.Traceclass to log information to the application diagnostic log. For example:System.Diagnostics.Trace.TraceError("If you're seeing this, something bad happened");By default, ASP.NET Core uses theMicrosoft.Extensions.Logging.AzureAppServiceslogging provider. For more information, seeASP.NET Core logging in Azure. For information about WebJobs SDK logging, seeGet started with the Azure WebJobs SDK.
ASP.NET applications can use theSystem.Diagnostics.Traceclass to log information to the application diagnostic log. For example:
System.Diagnostics.Trace.TraceError("If you're seeing this, something bad happened");
System.Diagnostics.Trace.TraceError("If you're seeing this, something bad happened");
By default, ASP.NET Core uses theMicrosoft.Extensions.Logging.AzureAppServiceslogging provider. For more information, seeASP.NET Core logging in Azure. For information about WebJobs SDK logging, seeGet started with the Azure WebJobs SDK.
Python applications can use OpenTelemetry to send logs to the application diagnostic log. For more information, seeEnable Azure Monitor OpenTelemetry.
Python applications can use OpenTelemetry to send logs to the application diagnostic log. For more information, seeEnable Azure Monitor OpenTelemetry.
Stream logs
Before you stream logs in real time, enable the log type that you want. App Service streams any information written to the console output or files ending in .txt, .log, or .htm that are stored in the/home/LogFilesdirectory (D:\home\LogFiles).
/home/LogFiles
D:\home\LogFiles
Note
Some types of logging buffers write to the log file, which can cause events to appear in the incorrect order in the stream. For example, an application log entry that occurs when a user visits a page might be displayed in the stream before the corresponding HTTP log entry for the page request.
Azure portal
To stream logs in theAzure portal, go to your app and selectMonitoring>Log stream.
Cloud Shell
To stream logs live inAzure Cloud Shell, use the following command.
Important
This command might not work with web apps hosted in a Linux-based App Service plan.
az webapp log tail --name appname --resource-group myResourceGroup
az webapp log tail --name appname --resource-group myResourceGroup
To filter specific log types, such as HTTP, use the--providerparameter. For example:
--provider
az webapp log tail --name appname --resource-group myResourceGroup --provider http
az webapp log tail --name appname --resource-group myResourceGroup --provider http
Local terminal
To stream logs in the local console,install the Azure CLIandsign in to your account. After you're signed in, follow theinstructions for Cloud Shell.
Access log files
If you configure the Azure Storage blobs option for a log type, you need a client tool that works with Azure Storage. For more information, seeMicrosoft client tools for working with Azure Storage.
For logs stored in the App Service file system, the easiest way to access the files is to download the ZIP file in the browser at:
Linux or custom containers:https://<app-name>.scm.azurewebsites.net/api/logs/docker/zip
https://<app-name>.scm.azurewebsites.net/api/logs/docker/zip
Windows apps:https://<app-name>.scm.azurewebsites.net/api/dump
https://<app-name>.scm.azurewebsites.net/api/dump
For Linux or custom containers, the ZIP file contains console output logs for both the Docker host and the Docker container. For a scaled-out app, the ZIP file contains one set of logs for each instance. In the App Service file system, these log files are the contents of the/home/LogFilesdirectory. Deployment logs are stored in/site/deployments/.
/home/LogFiles
/site/deployments/
For Windows apps, the ZIP file contains the contents of theD:\Home\LogFilesdirectory in the App Service file system. It has the following structure:
D:\Home\LogFiles
/LogFiles/Application/
/LogFiles/W3SVC#########/
/LogFiles/DetailedErrors/
/LogFiles/http/RawLogs/
s-computername
s-ip
cs-version
/LogFiles/Git/
/deployments/
Send logs to Azure Monitor
WithAzure Monitor integration, you cancreate diagnostic settingsto send logs to storage accounts, event hubs, and Log Analytics workspaces. When you add a diagnostic setting, App Service adds app settings to your app, which triggers an app restart.

Supported log types
For a list of supported log types and their descriptions, seeSupported resource logs for Microsoft.Web.
Network considerations
For information about restrictions for diagnostic settings, seeDestination limits.
Related content
Log queries in Azure Monitor
Azure App Service quotas and alerts
Troubleshoot an app in Azure App Service by using Visual Studio
Tutorial: Run a load test to identify performance bottlenecks in a web app
Feedback
Was this page helpful?
Additional resources