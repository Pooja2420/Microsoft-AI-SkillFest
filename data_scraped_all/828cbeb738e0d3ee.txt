Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
HelmDeploy@0 - Package and deploy Helm charts v0 task
Article
2025-03-28
5 contributors
In this article
Use this task to deploy, configure, or update a Kubernetes cluster in Azure Container Service by running helm commands.
Syntax
# Package and deploy Helm charts v0
# Deploy, configure, update a Kubernetes cluster in Azure Container Service by running helm commands.
- task: HelmDeploy@0
  inputs:
  # Kubernetes Cluster
    #connectionType: 'Azure Resource Manager' # 'Azure Resource Manager' | 'Kubernetes Service Connection' | 'None'. Required when command != logout && command != package && command != save. Connection Type. Default: Azure Resource Manager.
    #azureSubscription: # string. Alias: azureSubscriptionEndpoint. Required when connectionType = Azure Resource Manager && command != logout && command != package && command != save. Azure subscription. 
    #azureResourceGroup: # string. Required when connectionType = Azure Resource Manager && command != logout && command != package && command != save. Resource group. 
    #kubernetesCluster: # string. Required when connectionType = Azure Resource Manager && command != logout && command != package && command != save. Kubernetes cluster. 
    #useClusterAdmin: false # boolean. Optional. Use when connectionType = Azure Resource Manager && command != logout && command != package && command != save. Use cluster admin credentials. Default: false.
    #kubernetesServiceConnection: # string. Alias: kubernetesServiceEndpoint. Required when connectionType = Kubernetes Service Connection && command != logout && command != package && command != save. Kubernetes Service Connection. 
    #namespace: # string. Optional. Use when command != logout && command != package && command != save. Namespace. 
  # Azure Container Registry
    #azureSubscriptionForACR: # string. Alias: azureSubscriptionEndpointForACR. Required when command == save. Azure subscription for Container Registry. 
    #azureResourceGroupForACR: # string. Required when command == save. Resource group. 
    #azureContainerRegistry: # string. Required when command == save. Azure Container Registry. 
  # Commands
    command: 'ls' # 'create' | 'delete' | 'expose' | 'get' | 'init' | 'install' | 'login' | 'logout' | 'ls' | 'package' | 'rollback' | 'save' | 'upgrade' | 'uninstall'. Required. Command. Default: ls.
    #chartType: 'Name' # 'Name' | 'FilePath'. Required when command == install || command == upgrade. Chart Type. Default: Name.
    chartName: # string. Required when chartType == Name. Chart Name. 
    #chartPath: # string. Required when chartType == FilePath || command == package. Chart Path. 
    #chartVersion: # string. Alias: version. Optional. Use when command == package || command == install || command == upgrade. Version. 
    #releaseName: # string. Optional. Use when command == install || command == upgrade. Release Name. 
    #overrideValues: # string. Optional. Use when command == install || command == upgrade. Set Values. 
    #valueFile: # string. Optional. Use when command == install || command == upgrade. Value File. 
    #destination: '$(Build.ArtifactStagingDirectory)' # string. Optional. Use when command == package. Destination. Default: $(Build.ArtifactStagingDirectory).
    #canaryimage: false # boolean. Optional. Use when command == init. Use canary image version. Default: false.
    #upgradetiller: true # boolean. Optional. Use when command == init. Upgrade Tiller. Default: true.
    #updatedependency: false # boolean. Optional. Use when command == install || command == package. Update Dependency. Default: false.
    #save: true # boolean. Optional. Use when command == package. Save. Default: true.
    #install: true # boolean. Optional. Use when command == upgrade. Install if release not present. Default: true.
    #recreate: false # boolean. Optional. Use when command == upgrade. Recreate Pods. Default: false.
    #resetValues: false # boolean. Optional. Use when command == upgrade. Reset Values. Default: false.
    #force: false # boolean. Optional. Use when command == upgrade. Force. Default: false.
    #waitForExecution: true # boolean. Optional. Use when command == init || command == install || command == upgrade. Wait. Default: true.
    #arguments: # string. Optional. Use when command != login && command != logout. Arguments. 
    #chartNameForACR: # string. Required when command == save. Chart Name For Azure Container Registry. 
    #chartPathForACR: # string. Required when command == save. Chart Path for Azure Container Registry. 
  # TLS
    #enableTls: false # boolean. Optional. Use when command != login && command != logout && command != package && command != save. Enable TLS. Default: false.
    #caCert: # string. Required when enableTls == true && command != login && command != logout && command != package && command != save. CA certificate. 
    #certificate: # string. Required when enableTls == true && command != login && command != logout && command != package && command != save. Certificate. 
    #privatekey: # string. Required when enableTls == true && command != login && command != logout && command != package && command != save. Key. 
  # Advanced
    #tillernamespace: # string. Optional. Use when command != login && command != logout && command != package && command != save. Tiller namespace. 
    #failOnStderr: false # boolean. Optional. Use when command != login && command != logout && command != package && command != save. Fail on Standard Error. Default: false.
    #publishPipelineMetadata: true # boolean. Optional. Use when command != login && command != logout && command != package && command != save. Publish pipeline metadata. Default: true.
# Package and deploy Helm charts v0
# Deploy, configure, update a Kubernetes cluster in Azure Container Service by running helm commands.
- task: HelmDeploy@0
  inputs:
  # Kubernetes Cluster
    #connectionType: 'Azure Resource Manager' # 'Azure Resource Manager' | 'Kubernetes Service Connection' | 'None'. Required when command != logout && command != package && command != save. Connection Type. Default: Azure Resource Manager.
    #azureSubscription: # string. Alias: azureSubscriptionEndpoint. Required when connectionType = Azure Resource Manager && command != logout && command != package && command != save. Azure subscription. 
    #azureResourceGroup: # string. Required when connectionType = Azure Resource Manager && command != logout && command != package && command != save. Resource group. 
    #kubernetesCluster: # string. Required when connectionType = Azure Resource Manager && command != logout && command != package && command != save. Kubernetes cluster. 
    #useClusterAdmin: false # boolean. Optional. Use when connectionType = Azure Resource Manager && command != logout && command != package && command != save. Use cluster admin credentials. Default: false.
    #kubernetesServiceConnection: # string. Alias: kubernetesServiceEndpoint. Required when connectionType = Kubernetes Service Connection && command != logout && command != package && command != save. Kubernetes Service Connection. 
    #namespace: # string. Optional. Use when command != logout && command != package && command != save. Namespace. 
  # Azure Container Registry
    #azureSubscriptionForACR: # string. Alias: azureSubscriptionEndpointForACR. Required when command == save. Azure subscription for Container Registry. 
    #azureResourceGroupForACR: # string. Required when command == save. Resource group. 
    #azureContainerRegistry: # string. Required when command == save. Azure Container Registry. 
  # Commands
    command: 'ls' # 'create' | 'delete' | 'expose' | 'get' | 'init' | 'install' | 'login' | 'logout' | 'ls' | 'package' | 'rollback' | 'save' | 'upgrade' | 'uninstall'. Required. Command. Default: ls.
    #chartType: 'Name' # 'Name' | 'FilePath'. Required when command == install || command == upgrade. Chart Type. Default: Name.
    chartName: # string. Required when chartType == Name. Chart Name. 
    #chartPath: # string. Required when chartType == FilePath || command == package. Chart Path. 
    #chartVersion: # string. Alias: version. Optional. Use when command == package || command == install || command == upgrade. Version. 
    #releaseName: # string. Optional. Use when command == install || command == upgrade. Release Name. 
    #overrideValues: # string. Optional. Use when command == install || command == upgrade. Set Values. 
    #valueFile: # string. Optional. Use when command == install || command == upgrade. Value File. 
    #destination: '$(Build.ArtifactStagingDirectory)' # string. Optional. Use when command == package. Destination. Default: $(Build.ArtifactStagingDirectory).
    #canaryimage: false # boolean. Optional. Use when command == init. Use canary image version. Default: false.
    #upgradetiller: true # boolean. Optional. Use when command == init. Upgrade Tiller. Default: true.
    #updatedependency: false # boolean. Optional. Use when command == install || command == package. Update Dependency. Default: false.
    #save: true # boolean. Optional. Use when command == package. Save. Default: true.
    #install: true # boolean. Optional. Use when command == upgrade. Install if release not present. Default: true.
    #recreate: false # boolean. Optional. Use when command == upgrade. Recreate Pods. Default: false.
    #resetValues: false # boolean. Optional. Use when command == upgrade. Reset Values. Default: false.
    #force: false # boolean. Optional. Use when command == upgrade. Force. Default: false.
    #waitForExecution: true # boolean. Optional. Use when command == init || command == install || command == upgrade. Wait. Default: true.
    #arguments: # string. Optional. Use when command != login && command != logout. Arguments. 
    #chartNameForACR: # string. Required when command == save. Chart Name For Azure Container Registry. 
    #chartPathForACR: # string. Required when command == save. Chart Path for Azure Container Registry. 
  # TLS
    #enableTls: false # boolean. Optional. Use when command != login && command != logout && command != package && command != save. Enable TLS. Default: false.
    #caCert: # string. Required when enableTls == true && command != login && command != logout && command != package && command != save. CA certificate. 
    #certificate: # string. Required when enableTls == true && command != login && command != logout && command != package && command != save. Certificate. 
    #privatekey: # string. Required when enableTls == true && command != login && command != logout && command != package && command != save. Key. 
  # Advanced
    #tillernamespace: # string. Optional. Use when command != login && command != logout && command != package && command != save. Tiller namespace. 
    #failOnStderr: false # boolean. Optional. Use when command != login && command != logout && command != package && command != save. Fail on Standard Error. Default: false.
    #publishPipelineMetadata: true # boolean. Optional. Use when command != login && command != logout && command != package && command != save. Publish pipeline metadata. Default: true.
# Package and deploy Helm charts v0
# Deploy, configure, update a Kubernetes cluster in Azure Container Service by running helm commands.
- task: HelmDeploy@0
  inputs:
  # Kubernetes Cluster
    #connectionType: 'Azure Resource Manager' # 'Azure Resource Manager' | 'Kubernetes Service Connection' | 'None'. Required when command != logout && command != package && command != save. Connection Type. Default: Azure Resource Manager.
    #azureSubscription: # string. Alias: azureSubscriptionEndpoint. Required when connectionType = Azure Resource Manager && command != logout && command != package && command != save. Azure subscription. 
    #azureResourceGroup: # string. Required when connectionType = Azure Resource Manager && command != logout && command != package && command != save. Resource group. 
    #kubernetesCluster: # string. Required when connectionType = Azure Resource Manager && command != logout && command != package && command != save. Kubernetes cluster. 
    #useClusterAdmin: false # boolean. Optional. Use when connectionType = Azure Resource Manager && command != logout && command != package && command != save. Use cluster admin credentials. Default: false.
    #kubernetesServiceConnection: # string. Alias: kubernetesServiceEndpoint. Required when connectionType = Kubernetes Service Connection && command != logout && command != package && command != save. Kubernetes Service Connection. 
    #namespace: # string. Optional. Use when command != logout && command != package && command != save. Namespace. 
  # Azure Container Registry
    #azureSubscriptionForACR: # string. Alias: azureSubscriptionEndpointForACR. Required when command == save. Azure subscription for Container Registry. 
    #azureResourceGroupForACR: # string. Required when command == save. Resource group. 
    #azureContainerRegistry: # string. Required when command == save. Azure Container Registry. 
  # Commands
    command: 'ls' # 'create' | 'delete' | 'expose' | 'get' | 'init' | 'install' | 'login' | 'logout' | 'ls' | 'package' | 'rollback' | 'save' | 'upgrade'. Required. Command. Default: ls.
    #chartType: 'Name' # 'Name' | 'FilePath'. Required when command == install || command == upgrade. Chart Type. Default: Name.
    chartName: # string. Required when chartType == Name. Chart Name. 
    #chartPath: # string. Required when chartType == FilePath || command == package. Chart Path. 
    #chartVersion: # string. Alias: version. Optional. Use when command == package || command == install || command == upgrade. Version. 
    #releaseName: # string. Optional. Use when command == install || command == upgrade. Release Name. 
    #overrideValues: # string. Optional. Use when command == install || command == upgrade. Set Values. 
    #valueFile: # string. Optional. Use when command == install || command == upgrade. Value File. 
    #destination: '$(Build.ArtifactStagingDirectory)' # string. Optional. Use when command == package. Destination. Default: $(Build.ArtifactStagingDirectory).
    #canaryimage: false # boolean. Optional. Use when command == init. Use canary image version. Default: false.
    #upgradetiller: true # boolean. Optional. Use when command == init. Upgrade Tiller. Default: true.
    #updatedependency: false # boolean. Optional. Use when command == install || command == package. Update Dependency. Default: false.
    #save: true # boolean. Optional. Use when command == package. Save. Default: true.
    #install: true # boolean. Optional. Use when command == upgrade. Install if release not present. Default: true.
    #recreate: false # boolean. Optional. Use when command == upgrade. Recreate Pods. Default: false.
    #resetValues: false # boolean. Optional. Use when command == upgrade. Reset Values. Default: false.
    #force: false # boolean. Optional. Use when command == upgrade. Force. Default: false.
    #waitForExecution: true # boolean. Optional. Use when command == init || command == install || command == upgrade. Wait. Default: true.
    #arguments: # string. Optional. Use when command != login && command != logout. Arguments. 
    #chartNameForACR: # string. Required when command == save. Chart Name For Azure Container Registry. 
    #chartPathForACR: # string. Required when command == save. Chart Path for Azure Container Registry. 
  # TLS
    #enableTls: false # boolean. Optional. Use when command != login && command != logout && command != package && command != save. Enable TLS. Default: false.
    #caCert: # string. Required when enableTls == true && command != login && command != logout && command != package && command != save. CA certificate. 
    #certificate: # string. Required when enableTls == true && command != login && command != logout && command != package && command != save. Certificate. 
    #privatekey: # string. Required when enableTls == true && command != login && command != logout && command != package && command != save. Key. 
  # Advanced
    #tillernamespace: # string. Optional. Use when command != login && command != logout && command != package && command != save. Tiller namespace. 
    #failOnStderr: false # boolean. Optional. Use when command != login && command != logout && command != package && command != save. Fail on Standard Error. Default: false.
    #publishPipelineMetadata: true # boolean. Optional. Use when command != login && command != logout && command != package && command != save. Publish pipeline metadata. Default: true.
# Package and deploy Helm charts v0
# Deploy, configure, update a Kubernetes cluster in Azure Container Service by running helm commands.
- task: HelmDeploy@0
  inputs:
  # Kubernetes Cluster
    #connectionType: 'Azure Resource Manager' # 'Azure Resource Manager' | 'Kubernetes Service Connection' | 'None'. Required when command != logout && command != package && command != save. Connection Type. Default: Azure Resource Manager.
    #azureSubscription: # string. Alias: azureSubscriptionEndpoint. Required when connectionType = Azure Resource Manager && command != logout && command != package && command != save. Azure subscription. 
    #azureResourceGroup: # string. Required when connectionType = Azure Resource Manager && command != logout && command != package && command != save. Resource group. 
    #kubernetesCluster: # string. Required when connectionType = Azure Resource Manager && command != logout && command != package && command != save. Kubernetes cluster. 
    #useClusterAdmin: false # boolean. Optional. Use when connectionType = Azure Resource Manager && command != logout && command != package && command != save. Use cluster admin credentials. Default: false.
    #kubernetesServiceConnection: # string. Alias: kubernetesServiceEndpoint. Required when connectionType = Kubernetes Service Connection && command != logout && command != package && command != save. Kubernetes Service Connection. 
    #namespace: # string. Optional. Use when command != logout && command != package && command != save. Namespace. 
  # Azure Container Registry
    #azureSubscriptionForACR: # string. Alias: azureSubscriptionEndpointForACR. Required when command == save. Azure subscription for Container Registry. 
    #azureResourceGroupForACR: # string. Required when command == save. Resource group. 
    #azureContainerRegistry: # string. Required when command == save. Azure Container Registry. 
  # Commands
    command: 'ls' # 'create' | 'delete' | 'expose' | 'get' | 'init' | 'install' | 'login' | 'logout' | 'ls' | 'package' | 'rollback' | 'save' | 'upgrade'. Required. Command. Default: ls.
    #chartType: 'Name' # 'Name' | 'FilePath'. Required when command == install || command == upgrade. Chart Type. Default: Name.
    chartName: # string. Required when chartType == Name. Chart Name. 
    #chartPath: # string. Required when chartType == FilePath || command == package. Chart Path. 
    #chartVersion: # string. Alias: version. Optional. Use when command == package || command == install || command == upgrade. Version. 
    #releaseName: # string. Optional. Use when command == install || command == upgrade. Release Name. 
    #overrideValues: # string. Optional. Use when command == install || command == upgrade. Set Values. 
    #valueFile: # string. Optional. Use when command == install || command == upgrade. Value File. 
    #destination: '$(Build.ArtifactStagingDirectory)' # string. Optional. Use when command == package. Destination. Default: $(Build.ArtifactStagingDirectory).
    #canaryimage: false # boolean. Optional. Use when command == init. Use canary image version. Default: false.
    #upgradetiller: true # boolean. Optional. Use when command == init. Upgrade Tiller. Default: true.
    #updatedependency: false # boolean. Optional. Use when command == install || command == package. Update Dependency. Default: false.
    #save: true # boolean. Optional. Use when command == package. Save. Default: true.
    #install: true # boolean. Optional. Use when command == upgrade. Install if release not present. Default: true.
    #recreate: false # boolean. Optional. Use when command == upgrade. Recreate Pods. Default: false.
    #resetValues: false # boolean. Optional. Use when command == upgrade. Reset Values. Default: false.
    #force: false # boolean. Optional. Use when command == upgrade. Force. Default: false.
    #waitForExecution: true # boolean. Optional. Use when command == init || command == install || command == upgrade. Wait. Default: true.
    #arguments: # string. Optional. Use when command != login && command != logout. Arguments. 
    #chartNameForACR: # string. Required when command == save. Chart Name For Azure Container Registry. 
    #chartPathForACR: # string. Required when command == save. Chart Path for Azure Container Registry. 
  # TLS
    #enableTls: false # boolean. Optional. Use when command != login && command != logout && command != package && command != save. Enable TLS. Default: false.
    #caCert: # string. Required when enableTls == true && command != login && command != logout && command != package && command != save. CA certificate. 
    #certificate: # string. Required when enableTls == true && command != login && command != logout && command != package && command != save. Certificate. 
    #privatekey: # string. Required when enableTls == true && command != login && command != logout && command != package && command != save. Key. 
  # Advanced
    #tillernamespace: # string. Optional. Use when command != login && command != logout && command != package && command != save. Tiller namespace. 
    #failOnStderr: false # boolean. Optional. Use when command != login && command != logout && command != package && command != save. Fail on Standard Error. Default: false.
    #publishPipelineMetadata: true # boolean. Optional. Use when command != login && command != logout && command != package && command != save. Publish pipeline metadata. Default: true.
# Package and deploy Helm charts v0
# Deploy, configure, update a Kubernetes cluster in Azure Container Service by running helm commands.
- task: HelmDeploy@0
  inputs:
  # Kubernetes Cluster
    #connectionType: 'Azure Resource Manager' # 'Azure Resource Manager' | 'Kubernetes Service Connection' | 'None'. Required when command != logout && command != package. Connection Type. Default: Azure Resource Manager.
    #azureSubscription: # string. Alias: azureSubscriptionEndpoint. Required when connectionType = Azure Resource Manager && command != logout && command != package. Azure subscription. 
    #azureResourceGroup: # string. Required when connectionType = Azure Resource Manager && command != logout && command != package. Resource group. 
    #kubernetesCluster: # string. Required when connectionType = Azure Resource Manager && command != logout && command != package. Kubernetes cluster. 
    #useClusterAdmin: false # boolean. Optional. Use when connectionType = Azure Resource Manager && command != logout && command != package. Use cluster admin credentials. Default: false.
    #kubernetesServiceConnection: # string. Alias: kubernetesServiceEndpoint. Required when connectionType = Kubernetes Service Connection && command != logout && command != package. Kubernetes Service Connection. 
    #namespace: # string. Optional. Use when command != logout && command != package. Namespace. 
  # Commands
    command: 'ls' # 'create' | 'delete' | 'expose' | 'get' | 'init' | 'install' | 'login' | 'logout' | 'ls' | 'package' | 'rollback' | 'upgrade'. Required. Command. Default: ls.
    #chartType: 'Name' # 'Name' | 'FilePath'. Required when command == install || command == upgrade. Chart Type. Default: Name.
    chartName: # string. Required when chartType == Name. Chart Name. 
    #chartPath: # string. Required when chartType == FilePath || command == package. Chart Path. 
    #chartVersion: # string. Alias: version. Optional. Use when command == package. Version. 
    #releaseName: # string. Optional. Use when command == install || command == upgrade. Release Name. 
    #overrideValues: # string. Optional. Use when command == install || command == upgrade. Set Values. 
    #valueFile: # string. Optional. Use when command == install || command == upgrade. Value File. 
    #destination: '$(Build.ArtifactStagingDirectory)' # string. Optional. Use when command == package. Destination. Default: $(Build.ArtifactStagingDirectory).
    #canaryimage: false # boolean. Optional. Use when command == init. Use canary image version. Default: false.
    #upgradetiller: true # boolean. Optional. Use when command == init. Upgrade Tiller. Default: true.
    #updatedependency: false # boolean. Optional. Use when command == install || command == package. Update Dependency. Default: false.
    #save: true # boolean. Optional. Use when command == package. Save. Default: true.
    #install: true # boolean. Optional. Use when command == upgrade. Install if release not present. Default: true.
    #recreate: false # boolean. Optional. Use when command == upgrade. Recreate Pods. Default: false.
    #resetValues: false # boolean. Optional. Use when command == upgrade. Reset Values. Default: false.
    #force: false # boolean. Optional. Use when command == upgrade. Force. Default: false.
    #waitForExecution: true # boolean. Optional. Use when command == init || command == install || command == upgrade. Wait. Default: true.
    #arguments: # string. Optional. Use when command != login && command != logout. Arguments. 
  # TLS
    #enableTls: false # boolean. Optional. Use when command != login && command != logout && command != package. Enable TLS. Default: false.
    #caCert: # string. Required when enableTls == true && command != login && command != logout && command != package. CA certificate. 
    #certificate: # string. Required when enableTls == true && command != login && command != logout && command != package. Certificate. 
    #privatekey: # string. Required when enableTls == true && command != login && command != logout && command != package. Key. 
  # Advanced
    #tillernamespace: # string. Optional. Use when command != login && command != logout && command != package. Tiller namespace. 
    #failOnStderr: true # boolean. Optional. Use when command != login && command != logout && command != package. Fail on Standard Error. Default: true.
# Package and deploy Helm charts v0
# Deploy, configure, update a Kubernetes cluster in Azure Container Service by running helm commands.
- task: HelmDeploy@0
  inputs:
  # Kubernetes Cluster
    #connectionType: 'Azure Resource Manager' # 'Azure Resource Manager' | 'Kubernetes Service Connection' | 'None'. Required when command != logout && command != package. Connection Type. Default: Azure Resource Manager.
    #azureSubscription: # string. Alias: azureSubscriptionEndpoint. Required when connectionType = Azure Resource Manager && command != logout && command != package. Azure subscription. 
    #azureResourceGroup: # string. Required when connectionType = Azure Resource Manager && command != logout && command != package. Resource group. 
    #kubernetesCluster: # string. Required when connectionType = Azure Resource Manager && command != logout && command != package. Kubernetes cluster. 
    #useClusterAdmin: false # boolean. Optional. Use when connectionType = Azure Resource Manager && command != logout && command != package. Use cluster admin credentials. Default: false.
    #kubernetesServiceConnection: # string. Alias: kubernetesServiceEndpoint. Required when connectionType = Kubernetes Service Connection && command != logout && command != package. Kubernetes Service Connection. 
    #namespace: # string. Optional. Use when command != logout && command != package. Namespace. 
  # Commands
    command: 'ls' # 'create' | 'delete' | 'expose' | 'get' | 'init' | 'install' | 'login' | 'logout' | 'ls' | 'package' | 'rollback' | 'upgrade'. Required. Command. Default: ls.
    #chartType: 'Name' # 'Name' | 'FilePath'. Required when command == install || command == upgrade. Chart Type. Default: Name.
    chartName: # string. Required when chartType == Name. Chart Name. 
    #chartPath: # string. Required when chartType == FilePath || command == package. Chart Path. 
    #chartVersion: # string. Alias: version. Optional. Use when command == package. Version. 
    #releaseName: # string. Optional. Use when command == install || command == upgrade. Release Name. 
    #overrideValues: # string. Optional. Use when command == install || command == upgrade. Set Values. 
    #valueFile: # string. Optional. Use when command == install || command == upgrade. Value File. 
    #destination: '$(Build.ArtifactStagingDirectory)' # string. Optional. Use when command == package. Destination. Default: $(Build.ArtifactStagingDirectory).
    #canaryimage: false # boolean. Optional. Use when command == init. Use canary image version. Default: false.
    #upgradetiller: true # boolean. Optional. Use when command == init. Upgrade Tiller. Default: true.
    #updatedependency: false # boolean. Optional. Use when command == install || command == package. Update Dependency. Default: false.
    #save: true # boolean. Optional. Use when command == package. Save. Default: true.
    #install: true # boolean. Optional. Use when command == upgrade. Install if release not present. Default: true.
    #recreate: false # boolean. Optional. Use when command == upgrade. Recreate Pods. Default: false.
    #resetValues: false # boolean. Optional. Use when command == upgrade. Reset Values. Default: false.
    #force: false # boolean. Optional. Use when command == upgrade. Force. Default: false.
    #waitForExecution: true # boolean. Optional. Use when command == init || command == install || command == upgrade. Wait. Default: true.
    #arguments: # string. Optional. Use when command != login && command != logout. Arguments. 
  # TLS
    #enableTls: false # boolean. Optional. Use when command != login && command != logout && command != package. Enable TLS. Default: false.
    #caCert: # string. Required when enableTls == true && command != login && command != logout && command != package. CA certificate. 
    #certificate: # string. Required when enableTls == true && command != login && command != logout && command != package. Certificate. 
    #privatekey: # string. Required when enableTls == true && command != login && command != logout && command != package. Key. 
  # Advanced
    #tillernamespace: # string. Optional. Use when command != login && command != logout && command != package. Tiller namespace. 
    #failOnStderr: true # boolean. Optional. Use when command != login && command != logout && command != package. Fail on Standard Error. Default: true.
Inputs
connectionType-Connection Typestring. Required whencommand != logout && command != package && command != save. Allowed values:Azure Resource Manager,Kubernetes Service Connection,None. Default value:Azure Resource Manager.
connectionType
string
command != logout && command != package && command != save
Azure Resource Manager
Kubernetes Service Connection
None
Azure Resource Manager
Specifies the connection type.
Kubernetes Service Connection- SpecifyKubernetes Service Connectionto connect to any Kubernetes cluster by usingkubeconfigor the Azure Service Account. Allows you to provide a KubeConfig file, specify a Service Account, or import an AKS instance with theAzure Subscriptionoption. Importing an AKS instance with theAzure Subscriptionoption requires Kubernetes cluster access at Service Connection configuration time.
Kubernetes Service Connection
Kubernetes Service Connection
kubeconfig
Azure Resource Manager- SpecifyAzure Resource Managerto connect to an Azure Kubernetes Service by using Azure Service Connection. Does not access Kubernetes cluster at Service Connection configuration time.
Azure Resource Manager
Azure Resource Manager
None- Use a pre-created Kubernetes configuration stored locally.
None
For more information, seeService connectionin the followingRemarkssection.
connectionType-Connection Typestring. Required whencommand != logout && command != package. Allowed values:Azure Resource Manager,Kubernetes Service Connection,None. Default value:Azure Resource Manager.
connectionType
string
command != logout && command != package
Azure Resource Manager
Kubernetes Service Connection
None
Azure Resource Manager
Specifies the connection type.
Kubernetes Service Connection- SpecifyKubernetes Service Connectionto connect to any Kubernetes cluster by usingkubeconfigor the Azure Service Account. Allows you to provide a KubeConfig file, specify a Service Account, or import an AKS instance with theAzure Subscriptionoption. Importing an AKS instance with theAzure Subscriptionoption requires Kubernetes cluster access at Service Connection configuration time.
Kubernetes Service Connection
Kubernetes Service Connection
kubeconfig
Azure Resource Manager- SpecifyAzure Resource Managerto connect to an Azure Kubernetes Service by using Azure Service Connection. Does not access Kubernetes cluster at Service Connection configuration time.
Azure Resource Manager
Azure Resource Manager
None- Use a pre-created Kubernetes configuration stored locally.
None
For more information, seeService connectionin the followingRemarkssection.
azureSubscription-Azure subscriptionInput alias:azureSubscriptionEndpoint.string. Required whenconnectionType = Azure Resource Manager && command != logout && command != package && command != save.
azureSubscription
azureSubscriptionEndpoint
string
connectionType = Azure Resource Manager && command != logout && command != package && command != save
The name of the Azure Service Connection. Specify an Azure subscription that has your container registry.
azureSubscription-Azure subscriptionInput alias:azureSubscriptionEndpoint.string. Required whenconnectionType = Azure Resource Manager && command != logout && command != package.
azureSubscription
azureSubscriptionEndpoint
string
connectionType = Azure Resource Manager && command != logout && command != package
The name of the Azure Service Connection. Specify an Azure subscription that has your container registry.
azureResourceGroup-Resource groupstring. Required whenconnectionType = Azure Resource Manager && command != logout && command != package && command != save.
azureResourceGroup
string
connectionType = Azure Resource Manager && command != logout && command != package && command != save
The name of the resource group within the subscription. Specify an Azure Resource Group.
azureResourceGroup-Resource groupstring. Required whenconnectionType = Azure Resource Manager && command != logout && command != package.
azureResourceGroup
string
connectionType = Azure Resource Manager && command != logout && command != package
The name of the resource group within the subscription. Specify an Azure Resource Group.
kubernetesCluster-Kubernetes clusterstring. Required whenconnectionType = Azure Resource Manager && command != logout && command != package && command != save.
kubernetesCluster
string
connectionType = Azure Resource Manager && command != logout && command != package && command != save
The name of the AKS cluster. Specify an Azure Managed Cluster.
kubernetesCluster-Kubernetes clusterstring. Required whenconnectionType = Azure Resource Manager && command != logout && command != package.
kubernetesCluster
string
connectionType = Azure Resource Manager && command != logout && command != package
The name of the AKS cluster. Specify an Azure Managed Cluster.
useClusterAdmin-Use cluster admin credentialsboolean. Optional. Use whenconnectionType = Azure Resource Manager && command != logout && command != package && command != save. Default value:false.
useClusterAdmin
boolean
connectionType = Azure Resource Manager && command != logout && command != package && command != save
false
Uses cluster administrator credentials instead of default cluster user credentials.
useClusterAdmin-Use cluster admin credentialsboolean. Optional. Use whenconnectionType = Azure Resource Manager && command != logout && command != package. Default value:false.
useClusterAdmin
boolean
connectionType = Azure Resource Manager && command != logout && command != package
false
Uses cluster administrator credentials instead of default cluster user credentials.
kubernetesServiceConnection-Kubernetes Service ConnectionInput alias:kubernetesServiceEndpoint.string. Required whenconnectionType = Kubernetes Service Connection && command != logout && command != package && command != save.
kubernetesServiceConnection
kubernetesServiceEndpoint
string
connectionType = Kubernetes Service Connection && command != logout && command != package && command != save
Specifies a Kubernetes Service Connection.
kubernetesServiceConnection-Kubernetes Service ConnectionInput alias:kubernetesServiceEndpoint.string. Required whenconnectionType = Kubernetes Service Connection && command != logout && command != package.
kubernetesServiceConnection
kubernetesServiceEndpoint
string
connectionType = Kubernetes Service Connection && command != logout && command != package
Specifies a Kubernetes Service Connection.
namespace-Namespacestring. Optional. Use whencommand != logout && command != package && command != save.
namespace
string
command != logout && command != package && command != save
The namespace on which you run thekubectlcommands. If not specified, the task uses the default namespace. Specify the Kubernetes namespace to use. You can specify the Tiller namespace in the advanced section of the task or by passing the--tiller-namespaceoption as an argument.
kubectl
--tiller-namespace
namespace-Namespacestring. Optional. Use whencommand != logout && command != package.
namespace
string
command != logout && command != package
The namespace on which you run thekubectlcommands. If not specified, the task uses the default namespace. Specify the Kubernetes namespace to use. You can specify the Tiller namespace in the advanced section of the task or by passing the--tiller-namespaceoption as an argument.
kubectl
--tiller-namespace
azureSubscriptionForACR-Azure subscription for Container RegistryInput alias:azureSubscriptionEndpointForACR.string. Required whencommand == save.
azureSubscriptionForACR
azureSubscriptionEndpointForACR
string
command == save
Specifies an Azure subscription that has your Azure Container Registry.
azureResourceGroupForACR-Resource groupstring. Required whencommand == save.
azureResourceGroupForACR
string
command == save
Specifies an Azure Resource Group that has your Container Registry.
azureContainerRegistry-Azure Container Registrystring. Required whencommand == save.
azureContainerRegistry
string
command == save
Specifies an Azure Container Registry to be used for pushing Helm charts.
command-Commandstring. Required. Allowed values:create,delete,expose,get,init,install,login,logout,ls,package,rollback,save,upgrade,uninstall. Default value:ls.
command
string
create
delete
expose
get
init
install
login
logout
ls
package
rollback
save
upgrade
uninstall
ls
Specifies a Helm command.
command-Commandstring. Required. Allowed values:create,delete,expose,get,init,install,login,logout,ls,package,rollback,save,upgrade. Default value:ls.
command
string
create
delete
expose
get
init
install
login
logout
ls
package
rollback
save
upgrade
ls
Specifies a Helm command.
command-Commandstring. Required. Allowed values:create,delete,expose,get,init,install,login,logout,ls,package,rollback,upgrade. Default value:ls.
command
string
create
delete
expose
get
init
install
login
logout
ls
package
rollback
upgrade
ls
Specifies a Helm command.
chartType-Chart Typestring. Required whencommand == install || command == upgrade. Allowed values:Name,FilePath(File Path). Default value:Name.
chartType
string
command == install || command == upgrade
Name
FilePath
Name
Specifies how you want to enter chart information. You can either provide the name of the chart or folder/file path to the chart.
chartName-Chart Namestring. Required whenchartType == Name.
chartName
string
chartType == Name
The name of the chart reference to install. This can be a url or a chart name. For example, if the chart name isstable/mysql, the task runshelm install stable/mysql.
stable/mysql
helm install stable/mysql
chartPath-Chart Pathstring. Required whenchartType == FilePath || command == package.
chartPath
string
chartType == FilePath || command == package
The path to the chart to install. This can be a path to a packaged chart or a path to an unpacked chart directory. For example, if you specify./redis, the task runshelm install ./redis. If you're consuming a chart that's published as an artifact, then the path will be$(System.DefaultWorkingDirectory)/ARTIFACT-NAME/Charts/CHART-NAME.
./redis
helm install ./redis
$(System.DefaultWorkingDirectory)/ARTIFACT-NAME/Charts/CHART-NAME
chartVersion-VersionInput alias:version.string. Optional. Use whencommand == package || command == install || command == upgrade.
chartVersion
version
string
command == package || command == install || command == upgrade
Specifies the exact chart version to install. If you don't specify the chart version, the task installs the latest version. Set the version on the chart to this semver versionâ.
chartVersion-VersionInput alias:version.string. Optional. Use whencommand == package.
chartVersion
version
string
command == package
Specifies the exact chart version to install. If you don't specify the chart version, the task installs the latest version. Set the version on the chart to this semver versionâ.
releaseName-Release Namestring. Optional. Use whencommand == install || command == upgrade.
releaseName
string
command == install || command == upgrade
The release name. If you don't specify the release name, the task autogenerates one for you. ThereleaseNameinput is only valid forinstallandupgradecommands.
releaseName
install
upgrade
overrideValues-Set Valuesstring. Optional. Use whencommand == install || command == upgrade.
overrideValues
string
command == install || command == upgrade
Specifies values on the command line. This input can specify multiple or separate values with commas:key1=val1,key2=val2.
key1=val1,key2=val2
You can also specify multiple values by delimiting them with a new line, as follows:
key1=val1
key2=val2
If you have a value that contains new lines, use thevalueFileoption. Otherwise, the task treats the new line as a delimiter. The task constructs the Helm command by using these set values. For example, you can set the value using a command like the following:helm install --set key1=val1 ./redis.
valueFile
helm install --set key1=val1 ./redis
valueFile-Value Filestring. Optional. Use whencommand == install || command == upgrade.
valueFile
string
command == install || command == upgrade
Specifies values in a YAML file or a URL. For example, specifyingmyvalues.yamlresults inhelm install --values=myvals.yaml.
myvalues.yaml
helm install --values=myvals.yaml
destination-Destinationstring. Optional. Use whencommand == package. Default value:$(Build.ArtifactStagingDirectory).
destination
string
command == package
$(Build.ArtifactStagingDirectory)
Specifies values in a YAML file or a URL.
canaryimage-Use canary image version.boolean. Optional. Use whencommand == init. Default value:false.
canaryimage
boolean
command == init
false
Specifies the canary Tiller image. Use the latest pre-release version of Tiller.
upgradetiller-Upgrade Tillerboolean. Optional. Use whencommand == init. Default value:true.
upgradetiller
boolean
command == init
true
Iftrue, this input upgrades Tiller if Tiller is already installed.
true
updatedependency-Update Dependencyboolean. Optional. Use whencommand == install || command == package. Default value:false.
updatedependency
boolean
command == install || command == package
false
Iftrue, this input updates a Helm dependency update before installing the chart. Updates dependencies fromrequirements.yamlto thecharts/directory before packaging.
true
requirements.yaml
charts/
save-Saveboolean. Optional. Use whencommand == package. Default value:true.
save
boolean
command == package
true
Saves the packaged chart to the local chart repository when set totrueâ.
trueâ
install-Install if release not present.boolean. Optional. Use whencommand == upgrade. Default value:true.
install
boolean
command == upgrade
true
If a release by this name doesn't already exist, this input runs an installâ.
recreate-Recreate Pods.boolean. Optional. Use whencommand == upgrade. Default value:false.
recreate
boolean
command == upgrade
false
Performs pods restart for the resource, if applicable.
resetValues-Reset Values.boolean. Optional. Use whencommand == upgrade. Default value:false.
resetValues
boolean
command == upgrade
false
Resets the values to the values built into the chart.
force-Forceboolean. Optional. Use whencommand == upgrade. Default value:false.
force
boolean
command == upgrade
false
Forces a resource update through a delete or recreate action, if neededâ.
waitForExecution-Waitboolean. Optional. Use whencommand == init || command == install || command == upgrade. Default value:true.
waitForExecution
boolean
command == init || command == install || command == upgrade
true
Blocks the action until the command execution completes.
arguments-Argumentsstring. Optional. Use whencommand != login && command != logout.
arguments
string
command != login && command != logout
The Helm command options.
enableTls-Enable TLSboolean. Optional. Use whencommand != login && command != logout && command != package && command != save. Default value:false.
enableTls
boolean
command != login && command != logout && command != package && command != save
false
Enables using SSL between Helm and Tiller.
enableTls-Enable TLSboolean. Optional. Use whencommand != login && command != logout && command != package. Default value:false.
enableTls
boolean
command != login && command != logout && command != package
false
Enables using SSL between Helm and Tiller.
caCert-CA certificatestring. Required whenenableTls == true && command != login && command != logout && command != package && command != save.
caCert
string
enableTls == true && command != login && command != logout && command != package && command != save
The CA cert used to issue a certificate for the Tiller and Helm client.
caCert-CA certificatestring. Required whenenableTls == true && command != login && command != logout && command != package.
caCert
string
enableTls == true && command != login && command != logout && command != package
The CA cert used to issue a certificate for the Tiller and Helm client.
certificate-Certificatestring. Required whenenableTls == true && command != login && command != logout && command != package && command != save.
certificate
string
enableTls == true && command != login && command != logout && command != package && command != save
Specify the Tiller certificate or the Helm client certificate.
certificate-Certificatestring. Required whenenableTls == true && command != login && command != logout && command != package.
certificate
string
enableTls == true && command != login && command != logout && command != package
Specify the Tiller certificate or the Helm client certificate.
privatekey-Keystring. Required whenenableTls == true && command != login && command != logout && command != package && command != save.
privatekey
string
enableTls == true && command != login && command != logout && command != package && command != save
Specify the Tiller key or the Helm client key.
privatekey-Keystring. Required whenenableTls == true && command != login && command != logout && command != package.
privatekey
string
enableTls == true && command != login && command != logout && command != package
Specify the Tiller key or the Helm client key.
tillernamespace-Tiller namespacestring. Optional. Use whencommand != login && command != logout && command != package && command != save.
tillernamespace
string
command != login && command != logout && command != package && command != save
Specify Tiller's Kubernetes namespace.
tillernamespace-Tiller namespacestring. Optional. Use whencommand != login && command != logout && command != package.
tillernamespace
string
command != login && command != logout && command != package
Specify Tiller's Kubernetes namespace.
failOnStderr-Fail on Standard Errorboolean. Optional. Use whencommand != login && command != logout && command != package && command != save. Default value:false.
failOnStderr
boolean
command != login && command != logout && command != package && command != save
false
If this input istrue, this task fails if any errors are written to the error pipeline, or if any data is written to the Standard Error stream. Otherwise, the task relies on the exit code to determine failure.
true
failOnStderr-Fail on Standard Errorboolean. Optional. Use whencommand != login && command != logout && command != package. Default value:true.
failOnStderr
boolean
command != login && command != logout && command != package
true
If this input istrue, this task fails if any errors are written to the error pipeline, or if any data is written to the Standard Error stream. Otherwise, the task relies on the exit code to determine failure.
true
publishPipelineMetadata-Publish pipeline metadataboolean. Optional. Use whencommand != login && command != logout && command != package && command != save. Default value:true.
publishPipelineMetadata
boolean
command != login && command != logout && command != package && command != save
true
If this input istrue, the task collects and publishes deployment metadata.
true
chartNameForACR-Chart Name For Azure Container Registrystring. Required whencommand == save.
chartNameForACR
string
command == save
The chart's name in the Azure Container Registry.
chartPathForACR-Chart Path for Azure Container Registrystring. Required whencommand == save.
chartPathForACR
string
command == save
The file path to the chart directory in the Azure Container Registry.
Task control options
All tasks have control options in addition to their task inputs. For more information, seeControl options and common task properties.
Output variables
This task defines the followingoutput variables, which you can consume in downstream steps, jobs, and stages.
helmExitCodeThe exit code emitted from the execution of specified Helm command.
helmExitCode
helmOutputThe output emitted from the execution of specified Helm command.
helmOutput
Remarks
Use HelmDeploy@0 to deploy, configure, or update a Kubernetes cluster in Azure Container Service by running Helm commands.
Helm is a tool that streamlines deploying and managing Kubernetes apps using a packaging format called
charts.
You can define, version, share, install, and upgrade even the most complex Kubernetes app by using Helm.
Helm helps you combine multiple Kubernetes manifests (yaml) such as service, deployments, configmaps, and more into a single unit called Helm Charts. You don't need to either invent or use a tokenization or a templating tool.
Helm Charts help you manage application dependencies and deploy as well as rollback as a unit. They are also easy to create, version, publish, and share with other partner teams.
Azure Pipelines has built-in support for Helm charts:
TheHelm Tool installer taskcan be used to install the correct version of Helm onto the agents.
The Helm package and deploy task can be used to package the app and deploy it to a Kubernetes cluster.
You can use the task to install or update Tiller to a Kubernetes namespace, to securely connect to Tiller over TLS for deploying charts,
or to run any Helm command such aslint.
The Helm task supports connecting to an Azure Kubernetes Service by using an Azure service connection.
You can connect to any Kubernetes cluster by usingkubeconfigor a service account.
Helm deployments can be supplemented by using theKubectltask; for example, create/update, imagepullsecret, and others.
Service connection
HelmDeploy@0 works with two service connection types:Azure Resource ManagerandKubernetes Service Connection. SeeExamplesfor examples on configuring these two connection types.
Note
A service connection isn't required if an environment resource that points to a Kubernetes cluster has already been specified in the pipeline's stage.
You can create a Kubernetes service connection with any of the following options.
KubeConfig
Service Account
Azure Subscription

When selecting theAzure Subscriptionoption, Kubernetes needs to be accessible to Azure DevOps at service connection configuration time. There may be various reasons a service connection cannot be created, for example youcreated a private clusteror the cluster haslocal accounts disabled. In these cases, Azure DevOps can't connect to your cluster at service connection configuration time and you'll see a stuckLoading namespacesscreen.

Starting with Kubernetes 1.24, long-lived tokens areno longer created by default. Kubernetes recommends not using long-lived tokens. As a result, tasks using a Kubernetes service connection created with theAzure Subscriptionoption don't have access to the permanent token required to authenticate and canât access your Kubernetes cluster. This also results in the frozenLoading namespacesdialog.
For AKS customers, the Azure Resource Manager service connection type provides the best method to connect to a private cluster, or a cluster that has local accounts disabled. This method is not dependent on cluster connectivity at the time you create a service connection. Access to AKS is deferred to pipeline runtime, which has the following advantages:
Access to a (private) AKS cluster can be performed from a self-hosted or scale set agent with line of sight to the cluster.
A token is created for every task that uses an Azure Resource Manager service connection. This ensures you are connecting to Kubernetes with a short-lived token, which is theKubernetes recommendation.
AKS can be accessed even when local accounts are disabled.
You are using the Kubernetes service connection with Azure Subscription option. We are updating this method to create long-lived tokens. This is expected to be available mid-May. However, it is recommended to start using the Azure service connection type and not o use long-lived tokens as perKubernetes guidance.
We are updating this method to create long-lived tokens. This is expected to be available mid-May. However, please be aware that this approach is againstKubernetes guidance.
You tasks will continue to work as before.
Our Kubernetes tasks work with any Kubernetes cluster, regardless where they are running. The Kubernetes service connection will continue to exist.
There is no need to change anything. If you are using the Kubernetes service connection and selected Azure Subscription during creation, you should be aware of theKubernetes guidance on using long-lived tokens.
In case you canât access your AKS during environment creation time, you can use an empty environment and set theconnectionTypeinput to an Azure Resource Manager service connection.
connectionType
Accessing Kubernetes when AAD RBAC is enabled is unrelated to token creation. To prevent an interactive prompt, we will supportkubeloginin a future update.
Command values
The command input accepts one of the followinghelm commands: create/delete/expose/get/init/install/login/logout/ls/package/rollback/upgrade. Examples are provided in theExamplessection.
Each command input maps to a set of task inputs. The commands that map to a task input are designated in the YAML syntax block and in the task inputs table
Troubleshooting
There are some breaking changes between Helm 2 and Helm 3. One of them includes removal of tiller, and hencehelm initcommand is no longer supported. Remove command: init when you use Helm 3.0+ versions.
helm init
This is a known issue with Helm 3, as it writes some logs to stderr. Helm Deploy Task is marked as failed if there are logs to stderr or exit code is non-zero. Set the task input failOnStderr: false to ignore the logs printed to stderr.
Examples
Azure Resource Manager
This YAML example shows how Azure Resource Manager is used to refer to the Kubernetes cluster.
This is used with one of the helmcommandsand the appropriate values required for the command:
variables:
  azureSubscriptionEndpoint: Contoso
  azureContainerRegistry: contoso.azurecr.io
  azureResourceGroup: Contoso
  kubernetesCluster: Contoso

- task: HelmDeploy@0
  displayName: Helm deploy
  inputs:
    connectionType: Azure Resource Manager
    azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
    azureResourceGroup: $(azureResourceGroup)
    kubernetesCluster: $(kubernetesCluster)
variables:
  azureSubscriptionEndpoint: Contoso
  azureContainerRegistry: contoso.azurecr.io
  azureResourceGroup: Contoso
  kubernetesCluster: Contoso

- task: HelmDeploy@0
  displayName: Helm deploy
  inputs:
    connectionType: Azure Resource Manager
    azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
    azureResourceGroup: $(azureResourceGroup)
    kubernetesCluster: $(kubernetesCluster)
Kubernetes Service Connection
This YAML example shows how Kubernetes service connection is used to refer to the Kubernetes cluster.
This is used with one of the helmcommandsand the appropriate values required for the command:
- task: HelmDeploy@0
  displayName: Helm deploy
  inputs:
    connectionType: Kubernetes Service Connection
    kubernetesServiceEndpoint: Contoso
- task: HelmDeploy@0
  displayName: Helm deploy
  inputs:
    connectionType: Kubernetes Service Connection
    kubernetesServiceEndpoint: Contoso
Commands
The command input accepts one of the followinghelm commands: create/delete/expose/get/init/install/login/logout/ls/package/rollback/upgrade.
This YAML example demonstrates thelscommand:
- task: HelmDeploy@0
  displayName: Helm list
  inputs:
    azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
    azureResourceGroup: $(azureResourceGroup)
    kubernetesCluster: $(kubernetesCluster)
    command: ls
    arguments: --all
- task: HelmDeploy@0
  displayName: Helm list
  inputs:
    azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
    azureResourceGroup: $(azureResourceGroup)
    kubernetesCluster: $(kubernetesCluster)
    command: ls
    arguments: --all
init command
This YAML example demonstrates theinitcommand:
- task: HelmDeploy@0
  displayName: Helm init
  inputs:
    azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
    azureResourceGroup: $(azureResourceGroup)
    kubernetesCluster: $(kubernetesCluster)
    command: init
    upgradetiller: true
    waitForExecution: true
    arguments: --client-only
- task: HelmDeploy@0
  displayName: Helm init
  inputs:
    azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
    azureResourceGroup: $(azureResourceGroup)
    kubernetesCluster: $(kubernetesCluster)
    command: init
    upgradetiller: true
    waitForExecution: true
    arguments: --client-only
install command
This YAML example demonstrates theinstallcommand:
- task: HelmDeploy@0
  displayName: Helm install
  inputs:
    azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
    azureResourceGroup: $(azureResourceGroup)
    kubernetesCluster: $(kubernetesCluster)
    command: install
    chartType: FilePath
    chartPath: Application/charts/sampleapp
- task: HelmDeploy@0
  displayName: Helm install
  inputs:
    azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
    azureResourceGroup: $(azureResourceGroup)
    kubernetesCluster: $(kubernetesCluster)
    command: install
    chartType: FilePath
    chartPath: Application/charts/sampleapp
package command
This YAML example demonstrates thepackagecommand:
- task: HelmDeploy@0
  displayName: Helm package
  inputs:
    command: package
    chartPath: Application/charts/sampleapp
    destination: $(Build.ArtifactStagingDirectory)
- task: HelmDeploy@0
  displayName: Helm package
  inputs:
    command: package
    chartPath: Application/charts/sampleapp
    destination: $(Build.ArtifactStagingDirectory)
upgrade command
This YAML example demonstrates theupgradecommand:
- task: HelmDeploy@0
  displayName: Helm upgrade
  inputs:
    azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
    azureResourceGroup: $(azureResourceGroup)
    kubernetesCluster: $(kubernetesCluster)
    command: upgrade
    chartType: filepath
    chartPath: $(Build.ArtifactStagingDirectory)/sampleapp-v0.2.0.tgz
    releaseName: azuredevopsdemo
    install: true
    waitForExecution: false
- task: HelmDeploy@0
  displayName: Helm upgrade
  inputs:
    azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
    azureResourceGroup: $(azureResourceGroup)
    kubernetesCluster: $(kubernetesCluster)
    command: upgrade
    chartType: filepath
    chartPath: $(Build.ArtifactStagingDirectory)/sampleapp-v0.2.0.tgz
    releaseName: azuredevopsdemo
    install: true
    waitForExecution: false
save command
This YAML example demonstrates thesavecommand:
- task: HelmDeploy@0
  displayName: Helm save
  inputs:
    command: save
    chartNameForACR: mycontainerregistry.azurecr.io/helm/hello-world:v1
    chartPathForACR: Application/charts/sampleapp
    azureSubscriptionEndpointForACR: $(azureSubscriptionEndpointForACR)
    azureResourceGroupForACR: $(azureResourceGroupForACR)
    azureContainerRegistry: $(azureContainerRegistry)
- task: HelmDeploy@0
  displayName: Helm save
  inputs:
    command: save
    chartNameForACR: mycontainerregistry.azurecr.io/helm/hello-world:v1
    chartPathForACR: Application/charts/sampleapp
    azureSubscriptionEndpointForACR: $(azureSubscriptionEndpointForACR)
    azureResourceGroupForACR: $(azureResourceGroupForACR)
    azureContainerRegistry: $(azureContainerRegistry)
Package and sign Helm charts
In this section you'll learn how to package and sign Helm charts in a pipeline.
DownloadGPG.
DownloadGPG.
Launch the command prompt in an administrator mode. Run the following command to generate a private-public key pair to sign the helm chart using gpg. While creating the key, you'll be prompted for the username and email address. The "name email address" is later used to name the private-public key pair that is created.gpg --full-generate-key
Launch the command prompt in an administrator mode. Run the following command to generate a private-public key pair to sign the helm chart using gpg. While creating the key, you'll be prompted for the username and email address. The "name email address" is later used to name the private-public key pair that is created.
gpg --full-generate-key
gpg --full-generate-key

You'll be prompted for the passphrase. Give the value and click ok.
You'll be prompted for the passphrase. Give the value and click ok.

After creating the key, you can see the list of keys which contains both private and public using the following command.To see list of private keysgpg --list-secret-keysTo see the list of public keysgpg --list-keys
After creating the key, you can see the list of keys which contains both private and public using the following command.
To see list of private keysgpg --list-secret-keys
To see list of private keys
gpg --list-secret-keys
gpg --list-secret-keys

To see the list of public keysgpg --list-keys
To see the list of public keys
gpg --list-keys
gpg --list-keys

Store the private and public keys in 2 different files with the extensiongpgas shown below.For a private keygpg --export-secret-key AA11BB22CC33DD44EE55FF66AA77BB88CC99DD00 contoso@microsoft.com > C:/somepath/privatekeys.gpgYou'll see theprivatekeys.gpgfile exported to the path which was mentioned above.For a public keygpg --export-key AA11BB22CC33DD44EE55FF66AA77BB88CC99DD00 contoso@microsoft.com > C:/somepath/publickey.gpgYou'll see thepublickey.gpgfile exported to the path which was mentioned above.
Store the private and public keys in 2 different files with the extensiongpgas shown below.
For a private key
gpg --export-secret-key AA11BB22CC33DD44EE55FF66AA77BB88CC99DD00 contoso@microsoft.com > C:/somepath/privatekeys.gpg
gpg --export-secret-key AA11BB22CC33DD44EE55FF66AA77BB88CC99DD00 contoso@microsoft.com > C:/somepath/privatekeys.gpg
You'll see theprivatekeys.gpgfile exported to the path which was mentioned above.
For a public key
gpg --export-key AA11BB22CC33DD44EE55FF66AA77BB88CC99DD00 contoso@microsoft.com > C:/somepath/publickey.gpg
gpg --export-key AA11BB22CC33DD44EE55FF66AA77BB88CC99DD00 contoso@microsoft.com > C:/somepath/publickey.gpg
You'll see thepublickey.gpgfile exported to the path which was mentioned above.
In Azure DevOps, save theprivatekey.gpgfile in the librarysecure filessection.
pool:
  name: Hosted Ubuntu 1604

variables:
  # The below variable should be secure
  HelmKeyPassphrase: contoso@123
  keyName: contoso contoso@microsoft.com
  azureSubscriptionEndpoint: contoso
  azureResourceGroup: contoso
  kubernetesCluster: contoso

steps:
- task: DownloadSecureFile@1
  displayName: Download Secure file
  inputs:
    secureFile: privatekey.gpg
  name: privateKeyRing

- task: HelmInstaller@0
  displayName: Install Helm 2.12.0
  inputs:
    helmVersion: 2.12.0

- task: HelmDeploy@0
  displayName: helm init
  inputs:
    azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
    azureResourceGroup: $(azureResourceGroup)
    kubernetesCluster: $(kubernetesCluster)
    command: init
    arguments: --client-only

- task: HelmDeploy@0
  displayName: helm package
  inputs:
    command: package
    chartPath: Application/charts/sampleapp
    arguments: --sign --key "$(keyName)" --keyring $(privateKeyRing.secureFilePath)
  env:
    HelmKeyPassphrase: $(HelmKeyPassphrase)
pool:
  name: Hosted Ubuntu 1604

variables:
  # The below variable should be secure
  HelmKeyPassphrase: contoso@123
  keyName: contoso contoso@microsoft.com
  azureSubscriptionEndpoint: contoso
  azureResourceGroup: contoso
  kubernetesCluster: contoso

steps:
- task: DownloadSecureFile@1
  displayName: Download Secure file
  inputs:
    secureFile: privatekey.gpg
  name: privateKeyRing

- task: HelmInstaller@0
  displayName: Install Helm 2.12.0
  inputs:
    helmVersion: 2.12.0

- task: HelmDeploy@0
  displayName: helm init
  inputs:
    azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
    azureResourceGroup: $(azureResourceGroup)
    kubernetesCluster: $(kubernetesCluster)
    command: init
    arguments: --client-only

- task: HelmDeploy@0
  displayName: helm package
  inputs:
    command: package
    chartPath: Application/charts/sampleapp
    arguments: --sign --key "$(keyName)" --keyring $(privateKeyRing.secureFilePath)
  env:
    HelmKeyPassphrase: $(HelmKeyPassphrase)
Requirements
Feedback
Was this page helpful?
Additional resources