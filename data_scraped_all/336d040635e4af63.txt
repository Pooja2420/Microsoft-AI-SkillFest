Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Quickstart: Create a Go or Rust function in Azure using Visual Studio Code
Article
2024-07-18
8 contributors
In this article
C#
Java
JavaScript
PowerShell
Python
TypeScript
Other (Go/Rust)
In this article, you use Visual Studio Code to create acustom handlerfunction that responds to HTTP requests. After testing the code locally, you deploy it to the serverless environment of Azure Functions.
Custom handlers can be used to create functions in any language or runtime by running an HTTP server process. This article supports bothGoandRust.
Completing this quickstart incurs a small cost of a few USD cents or less in your Azure account.
Configure your environment
Before you get started, make sure you have the following requirements in place:
Go
Rust
An Azure account with an active subscription.Create an account for free.
An Azure account with an active subscription.Create an account for free.
Visual Studio Codeon one of thesupported platforms.
Visual Studio Codeon one of thesupported platforms.
TheAzure Functions extensionfor Visual Studio Code.
TheAzure Functions extensionfor Visual Studio Code.
Go, latest version recommended. Use thego versioncommand to check your version.
Go, latest version recommended. Use thego versioncommand to check your version.
go version
An Azure account with an active subscription.Create an account for free.
An Azure account with an active subscription.Create an account for free.
Visual Studio Codeon one of thesupported platforms.
Visual Studio Codeon one of thesupported platforms.
TheAzure Functions extensionfor Visual Studio Code.
TheAzure Functions extensionfor Visual Studio Code.
Rust toolchain usingrustup. Use therustc --versioncommand to check your version.
Rust toolchain usingrustup. Use therustc --versioncommand to check your version.
rustc --version
Install or update Core Tools
The Azure Functions extension for Visual Studio Code integrates with Azure Functions Core Tools so that you can run and debug your functions locally in Visual Studio Code using the Azure Functions runtime. Before getting started, it's a good idea to install Core Tools locally or update an existing installation to use the latest version.
In Visual Studio Code, select F1 to open the command palette, and then search for and run the commandAzure Functions: Install or Update Core Tools.
This command tries to either start a package-based installation of the latest version of Core Tools or update an existing package-based installation. If you don't have npm or Homebrew installed on your local computer, you must insteadmanually install or update Core Tools.
Create your local project
In this section, you use Visual Studio Code to create a local Azure Functions custom handlers project. Later in this article, you'll publish your function code to Azure.
In Visual Studio Code, pressF1to open the command palette and search for and run the commandAzure Functions: Create New Project....
In Visual Studio Code, pressF1to open the command palette and search for and run the commandAzure Functions: Create New Project....
Azure Functions: Create New Project...
Choose the directory location for your project workspace and chooseSelect. You should either create a new folder or choose an empty folder for the project workspace. Don't choose a project folder that is already part of a workspace.
Choose the directory location for your project workspace and chooseSelect. You should either create a new folder or choose an empty folder for the project workspace. Don't choose a project folder that is already part of a workspace.
Provide the following information at the prompts:PromptSelectionSelect a language for your function projectChooseCustom Handler.Select a template for your project's first functionChooseHTTP trigger.Provide a function nameTypeHttpExample.Authorization levelChooseAnonymous, which enables anyone to call your function endpoint. For more information, seeAuthorization level.Select how you would like to open your projectChooseOpen in current window.Using this information, Visual Studio Code generates an Azure Functions project with an HTTP trigger. You can view the local project files in the Explorer.
Provide the following information at the prompts:
Custom Handler
HTTP trigger
HttpExample
Anonymous
Open in current window
Using this information, Visual Studio Code generates an Azure Functions project with an HTTP trigger. You can view the local project files in the Explorer.
Create and build your function
Thefunction.jsonfile in theHttpExamplefolder declares an HTTP trigger function. You complete the function by adding a handler and compiling it into an executable.
Go
Rust
PressCtrl + N(Cmd + Non macOS) to create a new file. Save it ashandler.goin the function app root (in the same folder ashost.json).
PressCtrl + N(Cmd + Non macOS) to create a new file. Save it ashandler.goin the function app root (in the same folder ashost.json).
Inhandler.go, add the following code and save the file. This is your Go custom handler.package main

import (
    "fmt"
    "log"
    "net/http"
    "os"
)

func helloHandler(w http.ResponseWriter, r *http.Request) {
    message := "This HTTP triggered function executed successfully. Pass a name in the query string for a personalized response.\n"
    name := r.URL.Query().Get("name")
    if name != "" {
        message = fmt.Sprintf("Hello, %s. This HTTP triggered function executed successfully.\n", name)
    }
    fmt.Fprint(w, message)
}

func main() {
    listenAddr := ":8080"
    if val, ok := os.LookupEnv("FUNCTIONS_CUSTOMHANDLER_PORT"); ok {
        listenAddr = ":" + val
    }
    http.HandleFunc("/api/HttpExample", helloHandler)
    log.Printf("About to listen on %s. Go to https://127.0.0.1%s/", listenAddr, listenAddr)
    log.Fatal(http.ListenAndServe(listenAddr, nil))
}
Inhandler.go, add the following code and save the file. This is your Go custom handler.
package main

import (
    "fmt"
    "log"
    "net/http"
    "os"
)

func helloHandler(w http.ResponseWriter, r *http.Request) {
    message := "This HTTP triggered function executed successfully. Pass a name in the query string for a personalized response.\n"
    name := r.URL.Query().Get("name")
    if name != "" {
        message = fmt.Sprintf("Hello, %s. This HTTP triggered function executed successfully.\n", name)
    }
    fmt.Fprint(w, message)
}

func main() {
    listenAddr := ":8080"
    if val, ok := os.LookupEnv("FUNCTIONS_CUSTOMHANDLER_PORT"); ok {
        listenAddr = ":" + val
    }
    http.HandleFunc("/api/HttpExample", helloHandler)
    log.Printf("About to listen on %s. Go to https://127.0.0.1%s/", listenAddr, listenAddr)
    log.Fatal(http.ListenAndServe(listenAddr, nil))
}
package main

import (
    "fmt"
    "log"
    "net/http"
    "os"
)

func helloHandler(w http.ResponseWriter, r *http.Request) {
    message := "This HTTP triggered function executed successfully. Pass a name in the query string for a personalized response.\n"
    name := r.URL.Query().Get("name")
    if name != "" {
        message = fmt.Sprintf("Hello, %s. This HTTP triggered function executed successfully.\n", name)
    }
    fmt.Fprint(w, message)
}

func main() {
    listenAddr := ":8080"
    if val, ok := os.LookupEnv("FUNCTIONS_CUSTOMHANDLER_PORT"); ok {
        listenAddr = ":" + val
    }
    http.HandleFunc("/api/HttpExample", helloHandler)
    log.Printf("About to listen on %s. Go to https://127.0.0.1%s/", listenAddr, listenAddr)
    log.Fatal(http.ListenAndServe(listenAddr, nil))
}
PressCtrl + Shift + `or selectNew Terminalfrom theTerminalmenu to open a new integrated terminal in VS Code.
PressCtrl + Shift + `or selectNew Terminalfrom theTerminalmenu to open a new integrated terminal in VS Code.
Compile your custom handler using the following command. An executable file namedhandler(handler.exeon Windows) is output in the function app root folder.go build handler.go
Compile your custom handler using the following command. An executable file namedhandler(handler.exeon Windows) is output in the function app root folder.
handler
handler.exe
go build handler.go
go build handler.go

PressCtrl + Shift + `or selectNew Terminalfrom theTerminalmenu to open a new integrated terminal in VS Code.
PressCtrl + Shift + `or selectNew Terminalfrom theTerminalmenu to open a new integrated terminal in VS Code.
In the function app root (the same folder ashost.json), initialize a Rust project namedhandler.cargo init --name handler
In the function app root (the same folder ashost.json), initialize a Rust project namedhandler.
handler
cargo init --name handler
cargo init --name handler
InCargo.toml, add the following dependencies necessary to complete this quickstart. The example uses thewarpweb server framework.[dependencies]
warp = "0.3"
tokio = { version = "1", features = ["rt", "macros", "rt-multi-thread"] }
InCargo.toml, add the following dependencies necessary to complete this quickstart. The example uses thewarpweb server framework.
[dependencies]
warp = "0.3"
tokio = { version = "1", features = ["rt", "macros", "rt-multi-thread"] }
[dependencies]
warp = "0.3"
tokio = { version = "1", features = ["rt", "macros", "rt-multi-thread"] }
Insrc/main.rs, add the following code and save the file. This is your Rust custom handler.use std::collections::HashMap;
use std::env;
use std::net::Ipv4Addr;
use warp::{http::Response, Filter};

#[tokio::main]
async fn main() {
    let example1 = warp::get()
        .and(warp::path("api"))
        .and(warp::path("HttpExample"))
        .and(warp::query::<HashMap<String, String>>())
        .map(|p: HashMap<String, String>| match p.get("name") {
            Some(name) => Response::builder().body(format!("Hello, {}. This HTTP triggered function executed successfully.", name)),
            None => Response::builder().body(String::from("This HTTP triggered function executed successfully. Pass a name in the query string for a personalized response.")),
        });

    let port_key = "FUNCTIONS_CUSTOMHANDLER_PORT";
    let port: u16 = match env::var(port_key) {
        Ok(val) => val.parse().expect("Custom Handler port is not a number!"),
        Err(_) => 3000,
    };

    warp::serve(example1).run((Ipv4Addr::LOCALHOST, port)).await
}
Insrc/main.rs, add the following code and save the file. This is your Rust custom handler.
use std::collections::HashMap;
use std::env;
use std::net::Ipv4Addr;
use warp::{http::Response, Filter};

#[tokio::main]
async fn main() {
    let example1 = warp::get()
        .and(warp::path("api"))
        .and(warp::path("HttpExample"))
        .and(warp::query::<HashMap<String, String>>())
        .map(|p: HashMap<String, String>| match p.get("name") {
            Some(name) => Response::builder().body(format!("Hello, {}. This HTTP triggered function executed successfully.", name)),
            None => Response::builder().body(String::from("This HTTP triggered function executed successfully. Pass a name in the query string for a personalized response.")),
        });

    let port_key = "FUNCTIONS_CUSTOMHANDLER_PORT";
    let port: u16 = match env::var(port_key) {
        Ok(val) => val.parse().expect("Custom Handler port is not a number!"),
        Err(_) => 3000,
    };

    warp::serve(example1).run((Ipv4Addr::LOCALHOST, port)).await
}
use std::collections::HashMap;
use std::env;
use std::net::Ipv4Addr;
use warp::{http::Response, Filter};

#[tokio::main]
async fn main() {
    let example1 = warp::get()
        .and(warp::path("api"))
        .and(warp::path("HttpExample"))
        .and(warp::query::<HashMap<String, String>>())
        .map(|p: HashMap<String, String>| match p.get("name") {
            Some(name) => Response::builder().body(format!("Hello, {}. This HTTP triggered function executed successfully.", name)),
            None => Response::builder().body(String::from("This HTTP triggered function executed successfully. Pass a name in the query string for a personalized response.")),
        });

    let port_key = "FUNCTIONS_CUSTOMHANDLER_PORT";
    let port: u16 = match env::var(port_key) {
        Ok(val) => val.parse().expect("Custom Handler port is not a number!"),
        Err(_) => 3000,
    };

    warp::serve(example1).run((Ipv4Addr::LOCALHOST, port)).await
}
Compile a binary for your custom handler. An executable file namedhandler(handler.exeon Windows) is output in the function app root folder.cargo build --release
cp target/release/handler .
Compile a binary for your custom handler. An executable file namedhandler(handler.exeon Windows) is output in the function app root folder.
handler
handler.exe
cargo build --release
cp target/release/handler .
cargo build --release
cp target/release/handler .

Configure your function app
The function host needs to be configured to run your custom handler binary when it starts.
Openhost.json.
Openhost.json.
In thecustomHandler.descriptionsection, set the value ofdefaultExecutablePathtohandler(on Windows, set it tohandler.exe).
In thecustomHandler.descriptionsection, set the value ofdefaultExecutablePathtohandler(on Windows, set it tohandler.exe).
customHandler.description
defaultExecutablePath
handler
handler.exe
In thecustomHandlersection, add a property namedenableForwardingHttpRequestand set its value totrue. For functions consisting of only an HTTP trigger, this setting simplifies programming by allow you to work with a typical HTTP request instead of the custom handlerrequest payload.
In thecustomHandlersection, add a property namedenableForwardingHttpRequestand set its value totrue. For functions consisting of only an HTTP trigger, this setting simplifies programming by allow you to work with a typical HTTP request instead of the custom handlerrequest payload.
customHandler
enableForwardingHttpRequest
true
Confirm thecustomHandlersection looks like this example. Save the file."customHandler": {
  "description": {
    "defaultExecutablePath": "handler",
    "workingDirectory": "",
    "arguments": []
  },
  "enableForwardingHttpRequest": true
}
Confirm thecustomHandlersection looks like this example. Save the file.
customHandler
"customHandler": {
  "description": {
    "defaultExecutablePath": "handler",
    "workingDirectory": "",
    "arguments": []
  },
  "enableForwardingHttpRequest": true
}
"customHandler": {
  "description": {
    "defaultExecutablePath": "handler",
    "workingDirectory": "",
    "arguments": []
  },
  "enableForwardingHttpRequest": true
}
The function app is configured to start your custom handler executable.
Run the function locally
You can run this project on your local development computer before you publish to Azure.
In the integrated terminal, start the function app using Azure Functions Core Tools.func start
In the integrated terminal, start the function app using Azure Functions Core Tools.
func start
func start
With Core Tools running, navigate to the following URL to execute a GET request, which includes?name=Functionsquery string.http://localhost:7071/api/HttpExample?name=Functions
With Core Tools running, navigate to the following URL to execute a GET request, which includes?name=Functionsquery string.
?name=Functions
http://localhost:7071/api/HttpExample?name=Functions
http://localhost:7071/api/HttpExample?name=Functions
A response is returned, which looks like the following in a browser:
A response is returned, which looks like the following in a browser:

Information about the request is shown inTerminalpanel.
Information about the request is shown inTerminalpanel.

PressCtrl + Cto stop Core Tools.
PressCtrl + Cto stop Core Tools.
After you've verified that the function runs correctly on your local computer, it's time to use Visual Studio Code to publish the project directly to Azure.
Sign in to Azure
Before you can create Azure resources or publish your app, you must sign in to Azure.
If you aren't already signed in, in theActivity bar, select the Azure icon. Then underResources, selectSign in to Azure.If you're already signed in and can see your existing subscriptions, go to the next section. If you don't yet have an Azure account, selectCreate an Azure Account. Students can selectCreate an Azure for Students Account.
If you aren't already signed in, in theActivity bar, select the Azure icon. Then underResources, selectSign in to Azure.

If you're already signed in and can see your existing subscriptions, go to the next section. If you don't yet have an Azure account, selectCreate an Azure Account. Students can selectCreate an Azure for Students Account.
When you are prompted in the browser, select your Azure account and sign in by using your Azure account credentials. If you create a new account, you can sign in after your account is created.
When you are prompted in the browser, select your Azure account and sign in by using your Azure account credentials. If you create a new account, you can sign in after your account is created.
After you successfully sign in, you can close the new browser window. The subscriptions that belong to your Azure account are displayed in the side bar.
After you successfully sign in, you can close the new browser window. The subscriptions that belong to your Azure account are displayed in the side bar.
Compile the custom handler for Azure
In this section, you publish your project to Azure in a function app running Linux. In most cases, you must recompile your binary and adjust your configuration to match the target platform before publishing it to Azure.
Go
Rust
In the integrated terminal, compile the handler to Linux/x64. A binary namedhandleris created in the function app root.macOSLinuxWindowsGOOS=linux GOARCH=amd64 go build handler.goGOOS=linux GOARCH=amd64 go build handler.goset GOOS=linux
set GOARCH=amd64
go build handler.goChange thedefaultExecutablePathinhost.jsonfromhandler.exetohandler. This instructs the function app to run the Linux binary.
In the integrated terminal, compile the handler to Linux/x64. A binary namedhandleris created in the function app root.
handler
macOS
Linux
Windows
GOOS=linux GOARCH=amd64 go build handler.go
GOOS=linux GOARCH=amd64 go build handler.go
GOOS=linux GOARCH=amd64 go build handler.go
GOOS=linux GOARCH=amd64 go build handler.go
set GOOS=linux
set GOARCH=amd64
go build handler.go
set GOOS=linux
set GOARCH=amd64
go build handler.go
Change thedefaultExecutablePathinhost.jsonfromhandler.exetohandler. This instructs the function app to run the Linux binary.
defaultExecutablePath
handler.exe
handler
Create a file at.cargo/config. Add the following contents and save the file.[target.x86_64-unknown-linux-musl]
linker = "rust-lld"
Create a file at.cargo/config. Add the following contents and save the file.
[target.x86_64-unknown-linux-musl]
linker = "rust-lld"
[target.x86_64-unknown-linux-musl]
linker = "rust-lld"
In the integrated terminal, compile the handler to Linux/x64. A binary namedhandleris created. Copy it to the function app root.rustup target add x86_64-unknown-linux-musl
cargo build --release --target=x86_64-unknown-linux-musl
cp target/x86_64-unknown-linux-musl/release/handler .
In the integrated terminal, compile the handler to Linux/x64. A binary namedhandleris created. Copy it to the function app root.
handler
rustup target add x86_64-unknown-linux-musl
cargo build --release --target=x86_64-unknown-linux-musl
cp target/x86_64-unknown-linux-musl/release/handler .
rustup target add x86_64-unknown-linux-musl
cargo build --release --target=x86_64-unknown-linux-musl
cp target/x86_64-unknown-linux-musl/release/handler .
If you are using Windows, change thedefaultExecutablePathinhost.jsonfromhandler.exetohandler. This instructs the function app to run the Linux binary.
If you are using Windows, change thedefaultExecutablePathinhost.jsonfromhandler.exetohandler. This instructs the function app to run the Linux binary.
defaultExecutablePath
handler.exe
handler
Add the following line to the.funcignorefile:targetThis prevents publishing the contents of thetargetfolder.
Add the following line to the.funcignorefile:
target
target
This prevents publishing the contents of thetargetfolder.
Create the function app in Azure
In this section, you create a function app and related resources in your Azure subscription.
Choose the Azure icon in the Activity bar. Then in theResourcesarea, select the+icon and choose theCreate Function App in Azureoption.
Choose the Azure icon in the Activity bar. Then in theResourcesarea, select the+icon and choose theCreate Function App in Azureoption.

Provide the following information at the prompts:PromptSelectionSelect subscriptionChoose the subscription to use. You won't see this when you have only one subscription visible underResources.Enter a globally unique name for the function appType a name that is valid in a URL path. The name you type is validated to make sure that it's unique in Azure Functions.Select a runtime stackChooseCustom Handler.Select a location for new resourcesFor better performance, choose aregionnear you.The extension shows the status of individual resources as they are being created in Azure in theAzure: Activity Logpanel.
Provide the following information at the prompts:
The extension shows the status of individual resources as they are being created in Azure in theAzure: Activity Logpanel.

When the creation is complete, the following Azure resources are created in your subscription. The resources are named based on your function app name:Aresource group, which is a logical container for related resources.A standardAzure Storage account, which maintains state and other information about your projects.A function app, which provides the environment for executing your function code. A function app lets you group functions as a logical unit for easier management, deployment, and sharing of resources within the same hosting plan.An Azure App Service plan, which defines the underlying host for your function app.An Application Insights instance that's connected to the function app, and which tracks the use of your functions in the app.A notification is displayed after your function app is created and the deployment package is applied.TipBy default, the Azure resources required by your function app are created based on the name you enter for your function app. By default, the resources are created with the function app in the same, new resource group. If you want to customize the names of the associated resources or reuse existing resources,publish the project with advanced create options.
When the creation is complete, the following Azure resources are created in your subscription. The resources are named based on your function app name:
Aresource group, which is a logical container for related resources.
A standardAzure Storage account, which maintains state and other information about your projects.
A function app, which provides the environment for executing your function code. A function app lets you group functions as a logical unit for easier management, deployment, and sharing of resources within the same hosting plan.
An Azure App Service plan, which defines the underlying host for your function app.
An Application Insights instance that's connected to the function app, and which tracks the use of your functions in the app.
A notification is displayed after your function app is created and the deployment package is applied.
Tip
By default, the Azure resources required by your function app are created based on the name you enter for your function app. By default, the resources are created with the function app in the same, new resource group. If you want to customize the names of the associated resources or reuse existing resources,publish the project with advanced create options.
Deploy the project to Azure
Important
Deploying to an existing function app always overwrites the contents of that app in Azure.
In the command palette, enter and then selectAzure Functions: Deploy to Function App.
In the command palette, enter and then selectAzure Functions: Deploy to Function App.
Select the function app you just created. When prompted about overwriting previous deployments, selectDeployto deploy your function code to the new function app resource.
Select the function app you just created. When prompted about overwriting previous deployments, selectDeployto deploy your function code to the new function app resource.
When deployment is completed, selectView Outputto view the creation and deployment results, including the Azure resources that you created. If you miss the notification, select the bell icon in the lower-right corner to see it again.
When deployment is completed, selectView Outputto view the creation and deployment results, including the Azure resources that you created. If you miss the notification, select the bell icon in the lower-right corner to see it again.

Run the function in Azure
PressF1to display the command palette, then search for and run the commandAzure Functions:Execute Function Now.... If prompted, select your subscription.
PressF1to display the command palette, then search for and run the commandAzure Functions:Execute Function Now.... If prompted, select your subscription.
Azure Functions:Execute Function Now...
Select your new function app resource andHttpExampleas your function.
Select your new function app resource andHttpExampleas your function.
HttpExample
InEnter request bodytype{ "name": "Azure" }, then press Enter to send this request message to your function.
InEnter request bodytype{ "name": "Azure" }, then press Enter to send this request message to your function.
{ "name": "Azure" }
When the function executes in Azure, the response is displayed in the notification area. Expand the notification to review the full response.
When the function executes in Azure, the response is displayed in the notification area. Expand the notification to review the full response.
Clean up resources
When you continue to thenext stepand add an Azure Storage queue binding to your function, you'll need to keep all your resources in place to build on what you've already done.
Otherwise, you can use the following steps to delete the function app and its related resources to avoid incurring any further costs.
In Visual Studio Code, pressF1to open the command palette. In the command palette, search for and selectAzure: Open in portal.
In Visual Studio Code, pressF1to open the command palette. In the command palette, search for and selectAzure: Open in portal.
Azure: Open in portal
Choose your function app and pressEnter. The function app page opens in the Azure portal.
Choose your function app and pressEnter. The function app page opens in the Azure portal.
In theOverviewtab, select the named link next toResource group.
In theOverviewtab, select the named link next toResource group.

On theResource grouppage, review the list of included resources, and verify that they're the ones you want to delete.
On theResource grouppage, review the list of included resources, and verify that they're the ones you want to delete.
SelectDelete resource group, and follow the instructions.Deletion may take a couple of minutes. When it's done, a notification appears for a few seconds. You can also select the bell icon at the top of the page to view the notification.
SelectDelete resource group, and follow the instructions.
Deletion may take a couple of minutes. When it's done, a notification appears for a few seconds. You can also select the bell icon at the top of the page to view the notification.
For more information about Functions costs, seeEstimating Consumption plan costs.
Next steps
Learn about Azure Functions custom handlers
Feedback
Was this page helpful?
Additional resources