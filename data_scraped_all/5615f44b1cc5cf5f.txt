Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Add sign-in with Microsoft Entra account to a Spring web app
Article
2024-12-18
2 contributors
In this article
This article shows you how to develop a Spring web app that supports sign-in byMicrosoft Entra account. After finishing all steps in this article, the web app will redirect to the Microsoft Entra sign-in page when it's been accessed anonymously. The following screenshot shows the Microsoft Entra sign-in page:

Prerequisites
The following prerequisites are required to complete the steps in this article:
A supported Java Development Kit (JDK). For more information about the JDKs available for use when developing on Azure, seeJava support on Azure and Azure Stack.
Apache Maven, version 3.0 or higher.
An Azure subscription. If you don't have an Azure subscription, create afree account.
Important
Spring Boot version 2.5 or higher is required to complete the steps in this article.
Create an app using Spring Initializr
Browse tohttps://start.spring.io/.
Browse tohttps://start.spring.io/.
Specify that you want to generate aMavenproject withJava, enter theGroupandArtifactnames for your application.
Specify that you want to generate aMavenproject withJava, enter theGroupandArtifactnames for your application.
AddDependenciesforSpring Web,Microsoft Entra ID, andOAuth2 Client.
AddDependenciesforSpring Web,Microsoft Entra ID, andOAuth2 Client.
At the bottom of the page, select theGENERATEbutton.
At the bottom of the page, select theGENERATEbutton.
When prompted, download the project to a path on your local computer.
When prompted, download the project to a path on your local computer.

Create Microsoft Entra instance
Create the Active Directory instance
If you're the administrator of an existing instance, you can skip this process.
Log intohttps://portal.azure.com.
Log intohttps://portal.azure.com.
SelectAll services, thenIdentity, and thenMicrosoft Entra ID.
SelectAll services, thenIdentity, and thenMicrosoft Entra ID.
Enter yourOrganization nameand yourInitial domain name. Copy the full URL of your directory. You'll use the URL to add user accounts later in this tutorial. (For example:azuresampledirectory.onmicrosoft.com.)Copy the full URL of your directory. You'll use the URL to add user accounts later in this tutorial. (For example:azuresampledirectory.onmicrosoft.com.).When you've finished, selectCreate. It will take a few minutes to create the new resource.
Enter yourOrganization nameand yourInitial domain name. Copy the full URL of your directory. You'll use the URL to add user accounts later in this tutorial. (For example:azuresampledirectory.onmicrosoft.com.)
azuresampledirectory.onmicrosoft.com
Copy the full URL of your directory. You'll use the URL to add user accounts later in this tutorial. (For example:azuresampledirectory.onmicrosoft.com.).
azuresampledirectory.onmicrosoft.com
When you've finished, selectCreate. It will take a few minutes to create the new resource.
When complete, select the displayed link to access the new directory.
When complete, select the displayed link to access the new directory.
Copy theTenant ID. You'll use the ID value to configure yourapplication.propertiesfile later in this tutorial.
Copy theTenant ID. You'll use the ID value to configure yourapplication.propertiesfile later in this tutorial.
Add an application registration for your Spring Boot app
From the portal menu, selectApp registrations, and then selectRegister an application.
From the portal menu, selectApp registrations, and then selectRegister an application.
Specify your application, and then selectRegister.
Specify your application, and then selectRegister.
When the page for your app registration appears, copy yourApplication (client) IDand theDirectory (tenant) ID. You'll use these values to configure yourapplication.propertiesfile later in this tutorial.
When the page for your app registration appears, copy yourApplication (client) IDand theDirectory (tenant) ID. You'll use these values to configure yourapplication.propertiesfile later in this tutorial.
SelectCertificates & secretsin the navigation pane. Then, selectNew client secret.
SelectCertificates & secretsin the navigation pane. Then, selectNew client secret.

Add aDescriptionand select duration in theExpireslist. SelectAdd. The value for the key will be automatically filled in.
Add aDescriptionand select duration in theExpireslist. SelectAdd. The value for the key will be automatically filled in.
Copy and save the value of the client secret to configure yourapplication.propertiesfile later in this tutorial. (You won't be able to retrieve this value later.)
Copy and save the value of the client secret to configure yourapplication.propertiesfile later in this tutorial. (You won't be able to retrieve this value later.)

From the main page for your app registration, selectAuthentication, and selectAdd a platform.  Then selectWeb applications.
From the main page for your app registration, selectAuthentication, and selectAdd a platform.  Then selectWeb applications.
For a newRedirect URI, enterhttp://localhost:8080/login/oauth2/code/, and then selectConfigure.
For a newRedirect URI, enterhttp://localhost:8080/login/oauth2/code/, and then selectConfigure.
http://localhost:8080/login/oauth2/code/
If you've modified thepom.xmlfile to use a Microsoft Entra starter version earlier than 3.0.0: underImplicit grant and hybrid flows, selectID tokens (used for implicit and hybrid flows), then selectSave.
If you've modified thepom.xmlfile to use a Microsoft Entra starter version earlier than 3.0.0: underImplicit grant and hybrid flows, selectID tokens (used for implicit and hybrid flows), then selectSave.
Add a user account to your directory, and add that account to an appRole
From theOverviewpage of your Active Directory, selectUsers, and then selectNew user.
From theOverviewpage of your Active Directory, selectUsers, and then selectNew user.
When theUserpanel is displayed, enter theUser nameandName.  Then selectCreate.NoteYou need to specify your directory URL from earlier in this tutorial when you enter the user name. For example:test-user@azuresampledirectory.onmicrosoft.com
When theUserpanel is displayed, enter theUser nameandName.  Then selectCreate.

Note
You need to specify your directory URL from earlier in this tutorial when you enter the user name. For example:
test-user@azuresampledirectory.onmicrosoft.com
test-user@azuresampledirectory.onmicrosoft.com
From the main page for your app registration, selectApp roles, then selectCreate app role. Provide values for the form fields, selectDo you want to enable this app role?, then selectApply.
From the main page for your app registration, selectApp roles, then selectCreate app role. Provide values for the form fields, selectDo you want to enable this app role?, then selectApply.

From theOverviewpage of your Microsoft Entra directory, selectEnterprise applications.
From theOverviewpage of your Microsoft Entra directory, selectEnterprise applications.
SelectAll applications, then select the application you added the app role to in a previous step.
SelectAll applications, then select the application you added the app role to in a previous step.
SelectUsers and groups, then selectAdd user/group.
SelectUsers and groups, then selectAdd user/group.
UnderUsers, selectNone Selected. Select the user you created earlier, selectSelect, then selectAssign. If you created more than one app role earlier, select a role.
UnderUsers, selectNone Selected. Select the user you created earlier, selectSelect, then selectAssign. If you created more than one app role earlier, select a role.
Go back to theUserspanel, select your test user, and selectReset password, and copy the password. You'll use the password when you log into your application later in this tutorial.
Go back to theUserspanel, select your test user, and selectReset password, and copy the password. You'll use the password when you log into your application later in this tutorial.
Configure and compile your app
Extract the files from the project archive you created and downloaded earlier in this tutorial into a directory.
Extract the files from the project archive you created and downloaded earlier in this tutorial into a directory.
Navigate to thesrc/main/resourcesfolder in your project, then open theapplication.propertiesfile in a text editor.
Navigate to thesrc/main/resourcesfolder in your project, then open theapplication.propertiesfile in a text editor.
Specify the settings for your app registration using the values you created earlier. For example:# Enable related features.
spring.cloud.azure.active-directory.enabled=true
# Specifies your Active Directory ID:
spring.cloud.azure.active-directory.profile.tenant-id=<tenant-ID>
# Specifies your App Registration's Application ID:
spring.cloud.azure.active-directory.credential.client-id=<client-ID>
# Specifies your App Registration's secret key:
spring.cloud.azure.active-directory.credential.client-secret=<client-secret>Where:ParameterDescriptionspring.cloud.azure.active-directory.enabledEnable the features provided by spring-cloud-azure-starter-active-directoryspring.cloud.azure.active-directory.profile.tenant-idContains your Active Directory'sDirectory IDfrom earlier.spring.cloud.azure.active-directory.credential.client-idContains theApplication IDfrom your app registration that you completed earlier.spring.cloud.azure.active-directory.credential.client-secretContains theValuefrom your app registration key that you completed earlier.
Specify the settings for your app registration using the values you created earlier. For example:
# Enable related features.
spring.cloud.azure.active-directory.enabled=true
# Specifies your Active Directory ID:
spring.cloud.azure.active-directory.profile.tenant-id=<tenant-ID>
# Specifies your App Registration's Application ID:
spring.cloud.azure.active-directory.credential.client-id=<client-ID>
# Specifies your App Registration's secret key:
spring.cloud.azure.active-directory.credential.client-secret=<client-secret>
# Enable related features.
spring.cloud.azure.active-directory.enabled=true
# Specifies your Active Directory ID:
spring.cloud.azure.active-directory.profile.tenant-id=<tenant-ID>
# Specifies your App Registration's Application ID:
spring.cloud.azure.active-directory.credential.client-id=<client-ID>
# Specifies your App Registration's secret key:
spring.cloud.azure.active-directory.credential.client-secret=<client-secret>
Where:
spring.cloud.azure.active-directory.enabled
spring.cloud.azure.active-directory.profile.tenant-id
spring.cloud.azure.active-directory.credential.client-id
spring.cloud.azure.active-directory.credential.client-secret
Save and close theapplication.propertiesfile.
Save and close theapplication.propertiesfile.
Create a folder namedcontrollerin the Java source folder for your application. For example:src/main/java/com/wingtiptoys/security/controller.
Create a folder namedcontrollerin the Java source folder for your application. For example:src/main/java/com/wingtiptoys/security/controller.
Create a new Java file namedHelloController.javain thecontrollerfolder and open it in a text editor.
Create a new Java file namedHelloController.javain thecontrollerfolder and open it in a text editor.
Enter the following code, then save and close the file:package com.wingtiptoys.security;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.security.access.prepost.PreAuthorize;

@RestController
public class HelloController {
     @GetMapping("Admin")
     @ResponseBody
     @PreAuthorize("hasAuthority('APPROLE_Admin')")
     public String Admin() {
         return "Admin message";
     }
}
Enter the following code, then save and close the file:
package com.wingtiptoys.security;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.security.access.prepost.PreAuthorize;

@RestController
public class HelloController {
     @GetMapping("Admin")
     @ResponseBody
     @PreAuthorize("hasAuthority('APPROLE_Admin')")
     public String Admin() {
         return "Admin message";
     }
}
package com.wingtiptoys.security;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.security.access.prepost.PreAuthorize;

@RestController
public class HelloController {
     @GetMapping("Admin")
     @ResponseBody
     @PreAuthorize("hasAuthority('APPROLE_Admin')")
     public String Admin() {
         return "Admin message";
     }
}
Build and test your app
Open a command prompt and change directory to the folder where your app'spom.xmlfile is located.
Open a command prompt and change directory to the folder where your app'spom.xmlfile is located.
Build your Spring Boot application with Maven and run it. For example:mvn clean package
mvn spring-boot:run
Build your Spring Boot application with Maven and run it. For example:
mvn clean package
mvn spring-boot:run
mvn clean package
mvn spring-boot:run
After your application is built and started by Maven, openhttp://localhost:8080/Adminin a web browser. You should be prompted for a user name and password.NoteYou may be prompted to change your password if this is the first login for a new user account.
After your application is built and started by Maven, openhttp://localhost:8080/Adminin a web browser. You should be prompted for a user name and password.
http://localhost:8080/Admin

Note
You may be prompted to change your password if this is the first login for a new user account.

After you've logged in successfully, you should see the sample "Admin message" text from the controller.
After you've logged in successfully, you should see the sample "Admin message" text from the controller.

Summary
In this tutorial, you created a new Java web application using the Microsoft Entra starter, configured a new Microsoft Entra tenant, registered a new application in the tenant, and then configured your application to use the Spring annotations and classes to protect the web app.
See also
For information about new UI options, seeNew Azure portal app registration training guide
Next steps
To learn more about Spring and Azure, continue to the Spring on Azure documentation center.
Spring on Azure
Feedback
Was this page helpful?
Additional resources