Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Build and test PHP apps
Article
2025-04-17
10 contributors
In this article
Azure DevOps Services
Use Azure Pipelines continuous integration and continuous delivery (CI/CD) to build, deploy, and test your PHP projects.
Learn how to create a PHP pipeline, deploy a pipeline with a sample project to Azure App Service, and how to configure your environment.
To learn more about Azure App Service, seeCreate a PHP web app in Azure App Service.
Prerequisites
If you're going to deploy to Azure App Service, you need to have a webapp created.
Get the code
If you already have an app at GitHub that you want to deploy, you can create a pipeline for that code. But, if you're a new user, you might get a better start by using our sample code. In that case, fork the following repo at GitHub:
https://github.com/Azure-Samples/basic-php-composer
https://github.com/Azure-Samples/basic-php-composer
Create a pipeline
Sign in to your Azure DevOps organization and go to your project.
Sign in to your Azure DevOps organization and go to your project.
Go to pipelines, and then selectNew pipeline.
Go to pipelines, and then selectNew pipeline.
Select your source location (GitHub, Azure Repos Git, Bitbucket Cloud, or other Git repositories).
Select your source location (GitHub, Azure Repos Git, Bitbucket Cloud, or other Git repositories).
Select the repository where your code is located.
Select the repository where your code is located.
SelectPHPin theConfiguretab.
SelectPHPin theConfiguretab.
Ensure the PHP version is 8.3.
Ensure the PHP version is 8.3.
Examine your new pipeline. When you're ready, selectSave and run.
Examine your new pipeline. When you're ready, selectSave and run.

You're prompted to commit a newazure-pipelines.ymlfile to your repository. SelectSave and runagain.If you want to watch your pipeline in action, select the build job.You now have a working YAML pipeline (azure-pipelines.yml) in your repository that's ready for you to customize!
You're prompted to commit a newazure-pipelines.ymlfile to your repository. SelectSave and runagain.
If you want to watch your pipeline in action, select the build job.
You now have a working YAML pipeline (azure-pipelines.yml) in your repository that's ready for you to customize!
When you want to make changes to your pipeline, select your pipeline on thePipelinespage, and thenEdittheazure-pipelines.ymlfile.
Read further to learn some of the more common ways to customize your pipeline.
Deploy to App Service
Use a pipeline to build a PHP web app and deploy to Azure App Service. Azure App Service is an HTTP-based service for hosting web applications, REST APIs, and mobile back ends.
You can use tasks to archive your files, publish a build artifact, and then use theAzure Web App taskto deploy to Azure App Service.
This pipeline has two stages: Build and Deploy. In the Build stage, PHP 8.3 is installed with composer. The app files are archived and uploaded into a package nameddrop. During the Deploy phase, thedroppackage gets deployed to Azure App Service as a web app.
drop
drop
trigger:
- main

variables:
  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: 'subscription-id'
  # Web app name
  webAppName: 'web-app-name'
  # Agent VM image name
  vmImageName: 'ubuntu-22.04'
  # Environment name
  environmentName: 'environment-name'
  # Root folder under which your composer.json file is available.
  rootFolder: $(System.DefaultWorkingDirectory)

stages:
- stage: Build
  displayName: Build stage
  variables:
    phpVersion: '8.3'
  jobs:
  - job: BuildJob
    pool:
      vmImage: $(vmImageName)
    steps:
    - script: |
        sudo update-alternatives --set php /usr/bin/php$(phpVersion)
        sudo update-alternatives --set phar /usr/bin/phar$(phpVersion)
        sudo update-alternatives --set phpdbg /usr/bin/phpdbg$(phpVersion)
        sudo update-alternatives --set php-cgi /usr/bin/php-cgi$(phpVersion)
        sudo update-alternatives --set phar.phar /usr/bin/phar.phar$(phpVersion)
        php -version
      workingDirectory: $(rootFolder)
      displayName: 'Use PHP version $(phpVersion)'

    - script: composer install --no-interaction --prefer-dist
      workingDirectory: $(rootFolder)
      displayName: 'Composer install'

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(rootFolder)'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      displayName: 'Upload package'
      artifact: drop

- stage: Deploy
  displayName: 'Deploy Web App'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeploymentJob
    pool:
      vmImage: $(vmImageName)
    environment: $(environmentName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: $(azureSubscription)
              appName: $(webAppName)
              package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip
trigger:
- main

variables:
  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: 'subscription-id'
  # Web app name
  webAppName: 'web-app-name'
  # Agent VM image name
  vmImageName: 'ubuntu-22.04'
  # Environment name
  environmentName: 'environment-name'
  # Root folder under which your composer.json file is available.
  rootFolder: $(System.DefaultWorkingDirectory)

stages:
- stage: Build
  displayName: Build stage
  variables:
    phpVersion: '8.3'
  jobs:
  - job: BuildJob
    pool:
      vmImage: $(vmImageName)
    steps:
    - script: |
        sudo update-alternatives --set php /usr/bin/php$(phpVersion)
        sudo update-alternatives --set phar /usr/bin/phar$(phpVersion)
        sudo update-alternatives --set phpdbg /usr/bin/phpdbg$(phpVersion)
        sudo update-alternatives --set php-cgi /usr/bin/php-cgi$(phpVersion)
        sudo update-alternatives --set phar.phar /usr/bin/phar.phar$(phpVersion)
        php -version
      workingDirectory: $(rootFolder)
      displayName: 'Use PHP version $(phpVersion)'

    - script: composer install --no-interaction --prefer-dist
      workingDirectory: $(rootFolder)
      displayName: 'Composer install'

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(rootFolder)'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      displayName: 'Upload package'
      artifact: drop

- stage: Deploy
  displayName: 'Deploy Web App'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeploymentJob
    pool:
      vmImage: $(vmImageName)
    environment: $(environmentName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: $(azureSubscription)
              appName: $(webAppName)
              package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip
Configure build environment
Use Azure Pipelines to build your PHP projects without setting up infrastructure.
Use a specific PHP version
PHP is preinstalled onMicrosoft-hosted agents, along with many common libraries per PHP version. You can use Linux, macOS, or Windows agents to run your builds. For more information and the exact versions of PHP that get preinstalled, seeMicrosoft-hosted agents.
On the Microsoft-hosted Ubuntu agent, multiple versions of PHP are installed. A symlink at/usr/bin/phppoints to the currently set PHP version, so that when you runphp, the set version executes.
/usr/bin/php
php
To use a PHP version other than the default, the symlink can be pointed to that version using theupdate-alternativestool. Set the PHP version that you want by adding the following snippet to yourazure-pipelines.ymlfile and change the value of thephpVersionvariable.
update-alternatives
azure-pipelines.yml
pool:
  vmImage: 'ubuntu-22.04'

variables:
  phpVersion: 8.2

steps:
- script: |
    sudo update-alternatives --set php /usr/bin/php$(phpVersion)
    sudo update-alternatives --set phar /usr/bin/phar$(phpVersion)
    sudo update-alternatives --set phpdbg /usr/bin/phpdbg$(phpVersion)
    sudo update-alternatives --set php-cgi /usr/bin/php-cgi$(phpVersion)
    sudo update-alternatives --set phar.phar /usr/bin/phar.phar$(phpVersion)
    php -version
  displayName: 'Use PHP version $(phpVersion)'
pool:
  vmImage: 'ubuntu-22.04'

variables:
  phpVersion: 8.2

steps:
- script: |
    sudo update-alternatives --set php /usr/bin/php$(phpVersion)
    sudo update-alternatives --set phar /usr/bin/phar$(phpVersion)
    sudo update-alternatives --set phpdbg /usr/bin/phpdbg$(phpVersion)
    sudo update-alternatives --set php-cgi /usr/bin/php-cgi$(phpVersion)
    sudo update-alternatives --set phar.phar /usr/bin/phar.phar$(phpVersion)
    php -version
  displayName: 'Use PHP version $(phpVersion)'
Install dependencies
To use Composer to install dependencies, add the following snippet to yourazure-pipelines.ymlfile.
azure-pipelines.yml
- script: composer install --no-interaction --prefer-dist
  displayName: 'composer install'
- script: composer install --no-interaction --prefer-dist
  displayName: 'composer install'
Test with phpunit
To run tests with phpunit, add the following snippet to yourazure-pipelines.ymlfile.
azure-pipelines.yml
- script: ./phpunit
  displayName: 'Run tests with phpunit'
- script: ./phpunit
  displayName: 'Run tests with phpunit'
Retain the PHP app with the build record
To save the artifacts of this build with the build record, add the following snippet to yourazure-pipelines.ymlfile.
Optionally, customize the value ofrootFolderOrFileto alter what is included in the archive.
azure-pipelines.yml
- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(system.defaultWorkingDirectory)'
    includeRootFolder: false
- task: PublishBuildArtifacts@1
- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(system.defaultWorkingDirectory)'
    includeRootFolder: false
- task: PublishBuildArtifacts@1
Using a custom composer location
If your composer.json is in a subfolder instead of the root directory, you can use the--working-dirargument to tell composer what directory to use. For example, if your composer.json is inside the subfolderpkgs
--working-dir
pkgs
composer install --no-interaction --working-dir=pkgs
composer install --no-interaction --working-dir=pkgs
You can also specify the absolute path, using the built-in system variables:
composer install --no-interaction --working-dir='$(system.defaultWorkingDirectory)/pkgs'
composer install --no-interaction --working-dir='$(system.defaultWorkingDirectory)/pkgs'
Feedback
Was this page helpful?
Additional resources