Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Authorizing access to Azure Databricks resources
Article
2025-02-12
2 contributors
In this article
This topic discusses the basic approaches for making secured Azure Databricks CLI or REST API calls using Azure Databricks account credentials, such as user accounts or service principals.
Authorization for the Azure Databricks CLI and APIs
To access a Azure Databricks resource with the Databricks CLI or REST APIs, clients must authorize using a Azure Databricks account. This account must have permissions to access the resource, which can be configured by your Azure Databricks administrator or a user account with adminstrator privileges.
There are two types of accounts that you can use, depending on how you intend to access your Azure Databricks resources:
User account:Use this to interactively enter Azure Databricks CLI commands or REST API calls.
Service principal:Use this to automate Azure Databricks CLI commands or REST API calls without human interaction.
Once you have decided on the Azure Databricks account type, you must acquire anaccess tokenthat represents the accountâs credentials. You will provide this access token when accessing the accountâs resources in your scripts or code, or in interactive sessions.
If you are using Azure Databricks, you can also use an MS Entra service principal to authorize access to your Azure Databricks account or workspace. However, Databricks recommends that you use a Databricks service principal with our provided OAuth authorization instead of MS Entra service principal authorization. This is because Databricksâ authorization uses OAuth access tokens that are more robust when authorizing only with Azure Databricks.
For more details on using an MS Entra service principal to access Databricks resources, seeMS Entra service principal authentication.
Acquire an access token
Your accountâs credentials are represented by a secure access token, which you provide either directly or indirectly to the CLI command or API call.
To securely run a Databricks CLI command or API request that requires authorized access to an account or workspace, you must provide an access token based on valid Azure Databricks account credentials.
The following table shows the authorization methods available to your Azure Databricks account.
Azure Databricks authorization methods
Because Azure Databricks tools and SDKs work with one or more supported Azure Databricks authorization methods, you can select the best authorization method for your use case. For details, see the tool or SDK documentation inLocal development tools.
Azure Databricks users may require access to Azure-specific resources not directly managed under your Databricks account. The methods for accessing those resources are also included in this table. For Azure resource access, you use an Azure managed service identity (MSI) or an MS Entra ID (depending on your scenario) and not your Azure Databricks account credentials.
What authorization option should I choose?
Azure Databricks provides 2 options for authorization or authentication with an access token:
OAuth 2.0-based access tokens.
Personal access tokens (PATs).
Note
Azure Databricks strongly recommends you use OAuth over PATs for authorization as OAuth tokens are automatically refreshed by default and do not require the direct management of the access token, improving your security against token hijacking and unwanted access.
Because OAuth creates and manages the access token for you, you provide an OAuth token endpoint URL, a client ID, and a secret you generate from your Azure Databricks workspace instead of directly providing a token string. Choose PATs only when you are integrating a 3rd-party tool or service that is unsupported by Azure Databricks unified client authentication or has no OAuth support.
How do I use OAuth to authorize access to Azure Databricks resources?
Azure Databricks providesunified client authenticationto assist you with authorization by using a default set of environment variables you can set to specific credential values. This helps you work more easily and securely since these environment variables are specific to the environment that will be running the Azure Databricks CLI commands or calling Azure Databricks APIs.
For user account authorization, the authentication part of Azure Databricks OAuthâthe creation and management of access tokensâis handled for you withDatabricks client unified authentication, as long as the tools and SDKs implement its standard. If they donât, you can manually generate an OAuth code verifier and challenge pair to use directly in your Azure Databricks CLI commands and API requests. SeeStep 1: Generate an OAuth code verifier and code challenge pair.
For service principal authorization, Azure Databricks OAuth requires that the caller provide client credentials along with a token endpoint URL where the request can be authorized. (This is handled for you if you use Azure Databricks tools and SDKs that support Databricks unified client authentication.) The credentials include a uniqueclient IDandclient secret. The client, which is the Databricks service principal that will run your code, must beassigned to Databricks workspaces. After you assign the service principal to the workspaces it will access, you are provided with a client ID and a client secret that you will set with specific environment variables.
These environment variables are:
DATABRICKS_HOST
http://accounts.cloud.databricks.com
https://{workspace-id}.cloud.databricks.com
DATABRICKS_ACCOUNT_ID
DATABRICKS_CLIENT_ID
DATABRICKS_CLIENT_SECRET
You can set these directly, or through the use of aDatabricks configuration profile(.databrickscfg) on your client machine.
.databrickscfg
To use an OAuth access token, your Azure Databricks workspace or account administrator must have granted your user account or service principal theCAN USEprivilege for the account and workspace features your code will access.
CAN USE
For more details on configuring OAuth authorization for your client and to review cloud provider-specific authorization options, seeUnified client authentication.
Authentication for third-party services and tools
If you are writing code which accesses third-party services, tools, or SDKs you must use the authentication and authorization mechanisms provided by the third-party. However, if you must grant a third-party tool, SDK, or service access to your Azure Databricks account or workspace resources, Databricks provides the following support:
Databricks Terraform Provider: This tool can access Azure Databricks APIs from Terraform on your behalf, using your Azure Databricks user account. For more details, seeProvision a service principal by using Terraform.
Git providers such as GitHub, GitLab, and Bitbucket can access Azure Databricks APIs using a Databricks service principal. For more details, seeService principals for CI/CD.
Jenkins can access Azure Databricks APIs using a Databricks service principal. For more details, seeCI/CD with Jenkins on Azure Databricks.
Azure DevOps can access Azure Databricks APIs using an MS Entra ID-based service principal. For more details, seeAuthenticate with Azure DevOps on Azure Databricks.
Azure Databricks configuration profiles
An Azure Databricks configuration profile contains settings and other information that Azure Databricks needs to authorize access. Azure Databricks configuration profiles are stored in local client files for your tools, SDKs, scripts, and apps to use. The standard configuration profile file is named.databrickscfg.
.databrickscfg
For more information, seeAzure Databricks configuration profiles.
Feedback
Was this page helpful?
Additional resources