Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Configuration options: Azure Monitor Application Insights for Java
Article
2025-02-28
29 contributors
In this article
This article shows you how to configure Azure Monitor Application Insights for Java.
For more information, seeGet started with OpenTelemetrywhich includessample applications.
Connection string and role name
Connection string and role name are the most common settings you need to get started:
{
  "connectionString": "...",
  "role": {
    "name": "my cloud role name"
  }
}
{
  "connectionString": "...",
  "role": {
    "name": "my cloud role name"
  }
}
Connection string is required. Role name is important anytime you're sending data from different applications to the same Application Insights resource.
More information and configuration options are provided in the following sections.
JSON configuration set-up
Default configuration
By default, Application Insights Java 3  expects the configuration file to be named applicationinsights.json and located in the same directory as applicationinsights-agent-3.7.1.jar.
Alternative configurations
You can specify a custom configuration file with
the APPLICATIONINSIGHTS_CONFIGURATION_FILE environment variable, or
the applicationinsights.configuration.file system property
If you provide a relative path, it will resolve relative to the directory where applicationinsights-agent-3.7.1.jar is located.
Instead of using a configuration file, you can set the entire JSON configuration with:
the APPLICATIONINSIGHTS_CONFIGURATION_CONTENT environment variable, or
the applicationinsights.configuration.content system property
Connection string
Connection string is required. You can find your connection string in your Application Insights resource.

{
  "connectionString": "..."
}
{
  "connectionString": "..."
}
You can also set the connection string by using the environment variableAPPLICATIONINSIGHTS_CONNECTION_STRING. It then takes precedence over the connection string specified in the JSON configuration.
APPLICATIONINSIGHTS_CONNECTION_STRING
Or you can set the connection string by using the Java system propertyapplicationinsights.connection.string. It also takes precedence over the connection string specified in the JSON configuration.
applicationinsights.connection.string
You can also set the connection string by specifying a file to load the connection string from.
If you specify a relative path, it resolves relative to the directory whereapplicationinsights-agent-3.7.1.jaris located.
applicationinsights-agent-3.7.1.jar
{
  "connectionString": "${file:connection-string-file.txt}"
}
{
  "connectionString": "${file:connection-string-file.txt}"
}
The file should contain only the connection string and nothing else.
Not setting the connection string disables the Java agent.
If you have multiple applications deployed in the same Java Virtual Machine (JVM) and want them to send telemetry to different connection strings, seeConnection string overrides (preview).
Cloud role name
The cloud role name is used to label the component on the application map.
If you want to set the cloud role name:
{
  "role": {   
    "name": "my cloud role name"
  }
}
{
  "role": {   
    "name": "my cloud role name"
  }
}
If the cloud role name isn't set, the Application Insights resource's name is used to label the component on the application map.
You can also set the cloud role name by using the environment variableAPPLICATIONINSIGHTS_ROLE_NAME. It then takes precedence over the cloud role name specified in the JSON configuration.
APPLICATIONINSIGHTS_ROLE_NAME
Or you can set the cloud role name by using the Java system propertyapplicationinsights.role.name. It also takes precedence over the cloud role name specified in the JSON configuration.
applicationinsights.role.name
If you have multiple applications deployed in the same JVM and want them to send telemetry to different cloud role names, seeCloud role name overrides (preview).
Cloud role instance
The cloud role instance defaults to the machine name.
If you want to set the cloud role instance to something different rather than the machine name:
{
  "role": {
    "name": "my cloud role name",
    "instance": "my cloud role instance"
  }
}
{
  "role": {
    "name": "my cloud role name",
    "instance": "my cloud role instance"
  }
}
You can also set the cloud role instance by using the environment variableAPPLICATIONINSIGHTS_ROLE_INSTANCE. It then takes precedence over the cloud role instance specified in the JSON configuration.
APPLICATIONINSIGHTS_ROLE_INSTANCE
Or you can set the cloud role instance by using the Java system propertyapplicationinsights.role.instance.
It also takes precedence over the cloud role instance specified in the JSON configuration.
applicationinsights.role.instance
Sampling
Note
Sampling can be a great way to reduce the cost of Application Insights. Make sure to set up your sampling
configuration appropriately for your use case.
Sampling is based on request, which means that if a request is captured (sampled), so are its dependencies, logs, and exceptions.
Sampling is also based on trace ID to help ensure consistent sampling decisions across different services.
Sampling only applies to logs inside of a request. Logs that aren't inside of a request (for example, startup logs) are always collected by default.
If you want to sample those logs, you can useSampling overrides.
Rate-limited sampling
Starting from 3.4.0, rate-limited sampling is available and is now the default.
If no sampling is configured, the default is now rate-limited sampling configured to capture at most
(approximately) five requests per second, along with all the dependencies and logs on those requests.
This configuration replaces the prior default, which was to capture all requests. If you still want to capture all requests, usefixed-percentage samplingand set the sampling percentage to 100.
Note
The rate-limited sampling is approximate because internally it must adapt a "fixed" sampling percentage over time to emit accurate item counts on each telemetry record. Internally, the rate-limited sampling is
tuned to adapt quickly (0.1 seconds) to new application loads. For this reason, you shouldn't see it exceed the configured rate by much, or for very long.
This example shows how to set the sampling to capture at most (approximately) one request per second:
{
  "sampling": {
    "requestsPerSecond": 1.0
  }
}
{
  "sampling": {
    "requestsPerSecond": 1.0
  }
}
TherequestsPerSecondcan be a decimal, so you can configure it to capture less than one request per second if you want. For example, a value of0.5means capture at most one request every 2 seconds.
requestsPerSecond
0.5
You can also set the sampling percentage by using the environment variableAPPLICATIONINSIGHTS_SAMPLING_REQUESTS_PER_SECOND. It then takes precedence over the rate limit specified in the JSON configuration.
APPLICATIONINSIGHTS_SAMPLING_REQUESTS_PER_SECOND
Fixed-percentage sampling
This example shows how to set the sampling to capture approximately a third of all requests:
{
  "sampling": {
    "percentage": 33.333
  }
}
{
  "sampling": {
    "percentage": 33.333
  }
}
You can also set the sampling percentage by using the environment variableAPPLICATIONINSIGHTS_SAMPLING_PERCENTAGE. It then takes precedence over the sampling percentage specified in the JSON configuration.
APPLICATIONINSIGHTS_SAMPLING_PERCENTAGE
Note
For the sampling percentage, choose a percentage that's close to 100/N, where N is an integer. Currently, sampling doesn't support other values.
Sampling overrides
Sampling overrides allow you to override thedefault sampling percentage. For example, you can:
Set the sampling percentage to 0, or some small value, for noisy health checks.
Set the sampling percentage to 0, or some small value, for noisy dependency calls.
Set the sampling percentage to 100 for an important request type. For example, you can use/logineven though you have the default sampling configured to something lower.
/login
For more information, see theSampling overridesdocumentation.
Java Management Extensions metrics
If you want to collect some other Java Management Extensions (JMX) metrics:
{
  "jmxMetrics": [
    {
      "name": "JVM uptime (millis)",
      "objectName": "java.lang:type=Runtime",
      "attribute": "Uptime"
    },
    {
      "name": "MetaSpace Used",
      "objectName": "java.lang:type=MemoryPool,name=Metaspace",
      "attribute": "Usage.used"
    }
  ]
}
{
  "jmxMetrics": [
    {
      "name": "JVM uptime (millis)",
      "objectName": "java.lang:type=Runtime",
      "attribute": "Uptime"
    },
    {
      "name": "MetaSpace Used",
      "objectName": "java.lang:type=MemoryPool,name=Metaspace",
      "attribute": "Usage.used"
    }
  ]
}
In the preceding configuration example:
nameis the metric name that is assigned to this JMX metric (can be anything).
name
objectNameis theObject Nameof theJMX MBeanthat you want to collect. Wildcard character asterisk (*) is supported.
objectName
JMX MBean
attributeis the attribute name inside of theJMX MBeanthat you want to collect.
attribute
JMX MBean
Numeric and Boolean JMX metric values are supported. Boolean JMX metrics are mapped to0for false and1for true.
0
1
For more information, see theJMX metricsdocumentation.
Custom dimensions
If you want to add custom dimensions to all your telemetry:
{
  "customDimensions": {
    "mytag": "my value",
    "anothertag": "${ANOTHER_VALUE}"
  }
}
{
  "customDimensions": {
    "mytag": "my value",
    "anothertag": "${ANOTHER_VALUE}"
  }
}
You can use${...}to read the value from the specified environment variable at startup.
${...}
Note
Starting from version 3.0.2, if you add a custom dimension namedservice.version, the value is stored in theapplication_Versioncolumn in the Application Insights Logs table instead of as a custom dimension.
service.version
application_Version
Inherited attribute (preview)
Starting with version 3.2.0, you can set a custom dimension programmatically on your request telemetry. It ensures inheritance by dependency and log telemetry. All are captured in the context of that request.
{
  "preview": {
    "inheritedAttributes": [
      {
        "key": "mycustomer",
        "type": "string"
      }
    ]
  }
}
{
  "preview": {
    "inheritedAttributes": [
      {
        "key": "mycustomer",
        "type": "string"
      }
    ]
  }
}
And then at the beginning of each request, call:
Span.current().setAttribute("mycustomer", "xyz");
Span.current().setAttribute("mycustomer", "xyz");
Also see:Add a custom property to a Span.
Connection string overrides (preview)
This feature is in preview, starting from 3.4.0.
Connection string overrides allow you to override thedefault connection string. For example, you can:
Set one connection string for one HTTP path prefix/myapp1.
/myapp1
Set another connection string for another HTTP path prefix/myapp2/.
/myapp2/
{
  "preview": {
    "connectionStringOverrides": [
      {
        "httpPathPrefix": "/myapp1",
        "connectionString": "..."
      },
      {
        "httpPathPrefix": "/myapp2",
        "connectionString": "..."
      }
    ]
  }
}
{
  "preview": {
    "connectionStringOverrides": [
      {
        "httpPathPrefix": "/myapp1",
        "connectionString": "..."
      },
      {
        "httpPathPrefix": "/myapp2",
        "connectionString": "..."
      }
    ]
  }
}
Cloud role name overrides (preview)
This feature is in preview, starting from 3.3.0.
Cloud role name overrides allow you to override thedefault cloud role name. For example, you can:
Set one cloud role name for one HTTP path prefix/myapp1.
/myapp1
Set another cloud role name for another HTTP path prefix/myapp2/.
/myapp2/
{
  "preview": {
    "roleNameOverrides": [
      {
        "httpPathPrefix": "/myapp1",
        "roleName": "Role A"
      },
      {
        "httpPathPrefix": "/myapp2",
        "roleName": "Role B"
      }
    ]
  }
}
{
  "preview": {
    "roleNameOverrides": [
      {
        "httpPathPrefix": "/myapp1",
        "roleName": "Role A"
      },
      {
        "httpPathPrefix": "/myapp2",
        "roleName": "Role B"
      }
    ]
  }
}
Connection string configured at runtime
Starting from version 3.4.8, if you need the ability to configure the connection string at runtime,
add this property to your json configuration:
{
  "connectionStringConfiguredAtRuntime": true
}
{
  "connectionStringConfiguredAtRuntime": true
}
Addapplicationinsights-coreto your application:
applicationinsights-core
<dependency>
  <groupId>com.microsoft.azure</groupId>
  <artifactId>applicationinsights-core</artifactId>
  <version>3.7.1</version>
</dependency>
<dependency>
  <groupId>com.microsoft.azure</groupId>
  <artifactId>applicationinsights-core</artifactId>
  <version>3.7.1</version>
</dependency>
Use the staticconfigure(String)method in the classcom.microsoft.applicationinsights.connectionstring.ConnectionString.
configure(String)
com.microsoft.applicationinsights.connectionstring.ConnectionString
Note
Any telemetry that is captured prior to configuring the connection string will be dropped, so it's best to configure it as early as possible in your application startup.
Autocollect InProc dependencies (preview)
Starting from version 3.2.0, if you want to capture controller "InProc" dependencies, use the following configuration:
{
  "preview": {
    "captureControllerSpans": true
  }
}
{
  "preview": {
    "captureControllerSpans": true
  }
}
Browser SDK Loader (preview)
This feature automatically injects theBrowser SDK Loaderinto your application's HTML pages, including configuring the appropriate Connection String.
For example, when your java application returns a response like:
<!DOCTYPE html>
<html lang="en">
  <head>
    <title>Title</title>
  </head>
  <body>
  </body>
</html>
<!DOCTYPE html>
<html lang="en">
  <head>
    <title>Title</title>
  </head>
  <body>
  </body>
</html>
It automatically modifies to return:
<!DOCTYPE html>
<html lang="en">
  <head>
    <script type="text/javascript">
    !function(v,y,T){var S=v.location,k="script"
    <!-- Removed for brevity -->
    connectionString: "YOUR_CONNECTION_STRING"
    <!-- Removed for brevity --> }});
    </script>
    <title>Title</title>
  </head>
  <body>
  </body>
</html>
<!DOCTYPE html>
<html lang="en">
  <head>
    <script type="text/javascript">
    !function(v,y,T){var S=v.location,k="script"
    <!-- Removed for brevity -->
    connectionString: "YOUR_CONNECTION_STRING"
    <!-- Removed for brevity --> }});
    </script>
    <title>Title</title>
  </head>
  <body>
  </body>
</html>
The script is aiming at helping customers to track the web user data, and sent the collecting server-side telemetry back to users' Azure portal. Details can be found atApplicationInsights-JS.
If you want to enable this feature, add the below configuration option:
{
  "preview": {
    "browserSdkLoader": {
      "enabled": true
    }
  }
}
{
  "preview": {
    "browserSdkLoader": {
      "enabled": true
    }
  }
}
Telemetry processors (preview)
You can use telemetry processors to configure rules that are applied to request, dependency, and trace telemetry. For example, you can:
Mask sensitive data.
Conditionally add custom dimensions.
Update the span name, which is used to aggregate similar telemetry in the Azure portal.
Drop specific span attributes to control ingestion costs.
For more information, see theTelemetry processordocumentation.
Note
If you want to drop specific (whole) spans for controlling ingestion cost, seeSampling overrides.
Custom instrumentation (preview)
Starting from version 3.3.1, you can capture spans for a method in your application:
{
  "preview": {
    "customInstrumentation": [
      {
        "className": "my.package.MyClass",
        "methodName": "myMethod"
      }
    ]
  }
}
{
  "preview": {
    "customInstrumentation": [
      {
        "className": "my.package.MyClass",
        "methodName": "myMethod"
      }
    ]
  }
}
Locally disabling ingestion sampling (preview)
By default, when the effective sampling percentage in the Java agent is 100%
andingestion samplinghas been configured on your Application Insights resource,
then the ingestion sampling percentage will be applied.
Note that this behavior applies to both fixed-rate sampling of 100% and also applies to rate-limited sampling when the
request rate doesn't exceed the rate limit (effectively capturing 100% during the continuously sliding time window).
Starting from 3.5.3, you can disable this behavior
(and keep 100% of telemetry in these cases even when ingestion sampling has been configured
on your Application Insights resource):
{
  "preview": {
    "sampling": {
      "ingestionSamplingEnabled": false
    }
  }
}
{
  "preview": {
    "sampling": {
      "ingestionSamplingEnabled": false
    }
  }
}
Autocollected logging
Log4j, Logback, JBoss Logging, and java.util.logging are autoinstrumented. Logging performed via these logging frameworks is autocollected.
Logging is only captured if it:
Meets the configured level for the logging framework.
Also meets the configured level for Application Insights.
For example, if your logging framework is configured to logWARN(and you configured it as described earlier) from the packagecom.example,
and Application Insights is configured to captureINFO(and you configured as described), Application Insights only capturesWARN(and more severe) from the packagecom.example.
WARN
com.example
INFO
WARN
com.example
The default level configured for Application Insights isINFO. If you want to change this level:
INFO
{
  "instrumentation": {
    "logging": {
      "level": "WARN"
    }
  }
}
{
  "instrumentation": {
    "logging": {
      "level": "WARN"
    }
  }
}
You can also set the level by using the environment variableAPPLICATIONINSIGHTS_INSTRUMENTATION_LOGGING_LEVEL. It then takes precedence over the level specified in the JSON configuration.
APPLICATIONINSIGHTS_INSTRUMENTATION_LOGGING_LEVEL
You can use these validlevelvalues to specify in theapplicationinsights.jsonfile. The table shows how they correspond to logging levels in different logging frameworks.
level
applicationinsights.json
Note
If an exception object is passed to the logger, the log message (and exception object details) will show up in the Azure portal under theexceptionstable instead of thetracestable. If you want to see the log messages across both thetracesandexceptionstables, you can write a Logs (Kusto) query to union across them. For example:
exceptions
traces
traces
exceptions
union traces, (exceptions | extend message = outerMessage)
| project timestamp, message, itemType
union traces, (exceptions | extend message = outerMessage)
| project timestamp, message, itemType
Log markers (preview)
Starting from 3.4.2, you can capture the log markers for Logback and Log4j 2:
{
  "preview": {
    "captureLogbackMarker":  true,
    "captureLog4jMarker":  true
  }
}
{
  "preview": {
    "captureLogbackMarker":  true,
    "captureLog4jMarker":  true
  }
}
Other log attributes for Logback (preview)
Starting from 3.4.3, you can captureFileName,ClassName,MethodName, andLineNumber, for Logback:
FileName
ClassName
MethodName
LineNumber
{
  "preview": {
    "captureLogbackCodeAttributes": true
  }
}
{
  "preview": {
    "captureLogbackCodeAttributes": true
  }
}
Warning
Capturing code attributes might add a performance overhead.
Logging level as a custom dimension
Starting from version 3.3.0,LoggingLevelisn't captured by default as part of the Traces custom dimension because that data is already captured in theSeverityLevelfield.
LoggingLevel
SeverityLevel
If needed, you can temporarily re-enable the previous behavior:
{
  "preview": {
    "captureLoggingLevelAsCustomDimension": true
  }
}
{
  "preview": {
    "captureLoggingLevelAsCustomDimension": true
  }
}
Autocollected Micrometer metrics (including Spring Boot Actuator metrics)
If your application usesMicrometer, metrics that are sent to the Micrometer global registry are autocollected.
Also, if your application usesSpring Boot Actuator, metrics configured by Spring Boot Actuator are also autocollected.
To send custom metrics using micrometer:
Add Micrometer to your application as shown in the following example.<dependency>
  <groupId>io.micrometer</groupId>
  <artifactId>micrometer-core</artifactId>
  <version>1.6.1</version>
</dependency>
Add Micrometer to your application as shown in the following example.
<dependency>
  <groupId>io.micrometer</groupId>
  <artifactId>micrometer-core</artifactId>
  <version>1.6.1</version>
</dependency>
<dependency>
  <groupId>io.micrometer</groupId>
  <artifactId>micrometer-core</artifactId>
  <version>1.6.1</version>
</dependency>
Use the Micrometerglobal registryto create a meter as shown in the following example.static final Counter counter = Metrics.counter("test.counter");
Use the Micrometerglobal registryto create a meter as shown in the following example.
static final Counter counter = Metrics.counter("test.counter");
static final Counter counter = Metrics.counter("test.counter");
Use the counter to record metrics by using the following command.counter.increment();
Use the counter to record metrics by using the following command.
counter.increment();
counter.increment();
The metrics are ingested into thecustomMetricstable, with tags captured in thecustomDimensionscolumn. You can also view the metrics in themetrics explorerunder theLog-based metricsmetric namespace.NoteApplication Insights Java replaces all nonalphanumeric characters (except dashes) in the Micrometer metric name with underscores. As a result, the precedingtest.countermetric will show up astest_counter.
The metrics are ingested into thecustomMetricstable, with tags captured in thecustomDimensionscolumn. You can also view the metrics in themetrics explorerunder theLog-based metricsmetric namespace.
customDimensions
Log-based metrics
Note
Application Insights Java replaces all nonalphanumeric characters (except dashes) in the Micrometer metric name with underscores. As a result, the precedingtest.countermetric will show up astest_counter.
test.counter
test_counter
To disable autocollection of Micrometer metrics and Spring Boot Actuator metrics:
Note
Custom metrics are billed separately and might generate extra costs. Make sure to check thePricing information. To disable the Micrometer and Spring Boot Actuator metrics, add the following configuration to your config file.
{
  "instrumentation": {
    "micrometer": {
      "enabled": false
    }
  }
}
{
  "instrumentation": {
    "micrometer": {
      "enabled": false
    }
  }
}
Java Database Connectivity query masking
Literal values in Java Database Connectivity (JDBC) queries are masked by default to avoid accidentally capturing sensitive data.
Starting from 3.4.0, this behavior can be disabled. For example:
{
  "instrumentation": {
    "jdbc": {
      "masking": {
        "enabled": false
      }
    }
  }
}
{
  "instrumentation": {
    "jdbc": {
      "masking": {
        "enabled": false
      }
    }
  }
}
Mongo query masking
Literal values in Mongo queries are masked by default to avoid accidentally capturing sensitive data.
Starting from 3.4.0, this behavior can be disabled. For example:
{
  "instrumentation": {
    "mongo": {
      "masking": {
        "enabled": false
      }
    }
  }
}
{
  "instrumentation": {
    "mongo": {
      "masking": {
        "enabled": false
      }
    }
  }
}
HTTP headers
Starting from version 3.3.0, you can capture request and response headers on your server (request) telemetry:
{
  "preview": {
    "captureHttpServerHeaders": {
      "requestHeaders": [
        "My-Header-A"
      ],
      "responseHeaders": [
        "My-Header-B"
      ]
    }
  }
}
{
  "preview": {
    "captureHttpServerHeaders": {
      "requestHeaders": [
        "My-Header-A"
      ],
      "responseHeaders": [
        "My-Header-B"
      ]
    }
  }
}
The header names are case insensitive.
The preceding examples are captured under the property nameshttp.request.header.my_header_aandhttp.response.header.my_header_b.
http.request.header.my_header_a
http.response.header.my_header_b
Similarly, you can capture request and response headers on your client (dependency) telemetry:
{
  "preview": {
    "captureHttpClientHeaders": {
      "requestHeaders": [
        "My-Header-C"
      ],
      "responseHeaders": [
        "My-Header-D"
      ]
    }
  }
}
{
  "preview": {
    "captureHttpClientHeaders": {
      "requestHeaders": [
        "My-Header-C"
      ],
      "responseHeaders": [
        "My-Header-D"
      ]
    }
  }
}
Again, the header names are case insensitive. The preceding examples are captured under the property nameshttp.request.header.my_header_candhttp.response.header.my_header_d.
http.request.header.my_header_c
http.response.header.my_header_d
HTTP server 4xx response codes
By default, HTTP server requests that result in 4xx response codes are captured as errors.
Starting from version 3.3.0, you can change this behavior to capture them as success:
{
  "preview": {
    "captureHttpServer4xxAsError": false
  }
}
{
  "preview": {
    "captureHttpServer4xxAsError": false
  }
}
Suppress specific autocollected telemetry
Starting from version 3.0.3, specific autocollected telemetry can be suppressed by using these configuration options:
{
  "instrumentation": {
    "azureSdk": {
      "enabled": false
    },
    "cassandra": {
      "enabled": false
    },
    "jdbc": {
      "enabled": false
    },
    "jms": {
      "enabled": false
    },
    "kafka": {
      "enabled": false
    },
    "logging": {
      "enabled": false
    },
    "micrometer": {
      "enabled": false
    },
    "mongo": {
      "enabled": false
    },
    "quartz": {
      "enabled": false
    },
    "rabbitmq": {
      "enabled": false
    },
    "redis": {
      "enabled": false
    },
    "springScheduling": {
      "enabled": false
    }
  }
}
{
  "instrumentation": {
    "azureSdk": {
      "enabled": false
    },
    "cassandra": {
      "enabled": false
    },
    "jdbc": {
      "enabled": false
    },
    "jms": {
      "enabled": false
    },
    "kafka": {
      "enabled": false
    },
    "logging": {
      "enabled": false
    },
    "micrometer": {
      "enabled": false
    },
    "mongo": {
      "enabled": false
    },
    "quartz": {
      "enabled": false
    },
    "rabbitmq": {
      "enabled": false
    },
    "redis": {
      "enabled": false
    },
    "springScheduling": {
      "enabled": false
    }
  }
}
You can also suppress these instrumentations by setting these environment variables tofalse:
false
APPLICATIONINSIGHTS_INSTRUMENTATION_AZURE_SDK_ENABLED
APPLICATIONINSIGHTS_INSTRUMENTATION_AZURE_SDK_ENABLED
APPLICATIONINSIGHTS_INSTRUMENTATION_CASSANDRA_ENABLED
APPLICATIONINSIGHTS_INSTRUMENTATION_CASSANDRA_ENABLED
APPLICATIONINSIGHTS_INSTRUMENTATION_JDBC_ENABLED
APPLICATIONINSIGHTS_INSTRUMENTATION_JDBC_ENABLED
APPLICATIONINSIGHTS_INSTRUMENTATION_JMS_ENABLED
APPLICATIONINSIGHTS_INSTRUMENTATION_JMS_ENABLED
APPLICATIONINSIGHTS_INSTRUMENTATION_KAFKA_ENABLED
APPLICATIONINSIGHTS_INSTRUMENTATION_KAFKA_ENABLED
APPLICATIONINSIGHTS_INSTRUMENTATION_LOGGING_ENABLED
APPLICATIONINSIGHTS_INSTRUMENTATION_LOGGING_ENABLED
APPLICATIONINSIGHTS_INSTRUMENTATION_MICROMETER_ENABLED
APPLICATIONINSIGHTS_INSTRUMENTATION_MICROMETER_ENABLED
APPLICATIONINSIGHTS_INSTRUMENTATION_MONGO_ENABLED
APPLICATIONINSIGHTS_INSTRUMENTATION_MONGO_ENABLED
APPLICATIONINSIGHTS_INSTRUMENTATION_RABBITMQ_ENABLED
APPLICATIONINSIGHTS_INSTRUMENTATION_RABBITMQ_ENABLED
APPLICATIONINSIGHTS_INSTRUMENTATION_REDIS_ENABLED
APPLICATIONINSIGHTS_INSTRUMENTATION_REDIS_ENABLED
APPLICATIONINSIGHTS_INSTRUMENTATION_SPRING_SCHEDULING_ENABLED
APPLICATIONINSIGHTS_INSTRUMENTATION_SPRING_SCHEDULING_ENABLED
These variables then take precedence over the enabled variables specified in the JSON configuration.
Note
If you're looking for more fine-grained control, for example, to suppress some redis calls but not all redis calls, seeSampling overrides.
Preview instrumentations
Starting from version 3.2.0, you can enable the following preview instrumentations:
{
  "preview": {
    "instrumentation": {
      "akka": {
        "enabled": true
      },
      "apacheCamel": {
        "enabled": true
      },
      "grizzly": {
        "enabled": true
      },
      "ktor": {
        "enabled": true
      },
      "play": {
        "enabled": true
      },
      "r2dbc": {
        "enabled": true
      },
      "springIntegration": {
        "enabled": true
      },
      "vertx": {
        "enabled": true
      }
    }
  }
}
{
  "preview": {
    "instrumentation": {
      "akka": {
        "enabled": true
      },
      "apacheCamel": {
        "enabled": true
      },
      "grizzly": {
        "enabled": true
      },
      "ktor": {
        "enabled": true
      },
      "play": {
        "enabled": true
      },
      "r2dbc": {
        "enabled": true
      },
      "springIntegration": {
        "enabled": true
      },
      "vertx": {
        "enabled": true
      }
    }
  }
}
Note
Akka instrumentation is available starting from version 3.2.2. Vertx HTTP Library instrumentation is available starting from version 3.3.0.
Metric interval
By default, metrics are captured every 60 seconds.
Starting from version 3.0.3, you can change this interval:
{
  "metricIntervalSeconds": 300
}
{
  "metricIntervalSeconds": 300
}
Starting from 3.4.9 GA, you can also set themetricIntervalSecondsby using the environment variableAPPLICATIONINSIGHTS_METRIC_INTERVAL_SECONDS. It then takes precedence over themetricIntervalSecondsspecified in the JSON configuration.
metricIntervalSeconds
APPLICATIONINSIGHTS_METRIC_INTERVAL_SECONDS
metricIntervalSeconds
The setting applies to the following metrics:
Default performance counters: For example, CPU and memory
Default custom metrics: For example, garbage collection timing
Configured JMX metrics:See the JMX metric section
Micrometer metrics:See the Autocollected Micrometer metrics section
Heartbeat
By default, Application Insights Java 3.x sends a heartbeat metric once every 15 minutes. If you're using the heartbeat metric to trigger alerts, you can increase the frequency of this heartbeat:
{
  "heartbeat": {
    "intervalSeconds": 60
  }
}
{
  "heartbeat": {
    "intervalSeconds": 60
  }
}
Note
You can't increase the interval to longer than 15 minutes because the heartbeat data is also used to track Application Insights usage.
Authentication
Note
The authentication feature is GA since version 3.4.17.
You can use authentication to configure the agent to generatetoken credentialsthat are required for Microsoft Entra authentication.
For more information, see theAuthenticationdocumentation.
HTTP proxy
If your application is behind a firewall and can't connect directly to Application Insights, refer toAzure Monitor endpoint access and firewall configuration.
To work around this issue, you can configure Application Insights Java 3.x to use an HTTP proxy.
{
  "proxy": {
    "host": "myproxy",
    "port": 8080
  }
}
{
  "proxy": {
    "host": "myproxy",
    "port": 8080
  }
}
You can also set the http proxy using the environment variableAPPLICATIONINSIGHTS_PROXY, which takes the formathttps://<host>:<port>. It then takes precedence over the proxy specified in the JSON configuration.
APPLICATIONINSIGHTS_PROXY
https://<host>:<port>
You can provide a user and a password for your proxy with theAPPLICATIONINSIGHTS_PROXYenvironment variable:https://<user>:<password>@<host>:<port>.
APPLICATIONINSIGHTS_PROXY
https://<user>:<password>@<host>:<port>
Application Insights Java 3.x also respects the globalhttps.proxyHostandhttps.proxyPortsystem properties if they're set, andhttp.nonProxyHosts, if needed.
https.proxyHost
https.proxyPort
http.nonProxyHosts
Recovery from ingestion failures
When sending telemetry to the Application Insights service fails, Application Insights Java 3.x stores the telemetry to disk and continues retrying from disk.
The default limit for disk persistence is 50 Mb. If you have high telemetry volume or need to be able to recover from longer network or ingestion service outages, you can increase this limit starting from version 3.3.0:
{
  "preview": {
    "diskPersistenceMaxSizeMb": 50
  }
}
{
  "preview": {
    "diskPersistenceMaxSizeMb": 50
  }
}
Self-diagnostics
"Self-diagnostics" refers to internal logging from Application Insights Java 3.x. This functionality can be helpful for spotting and diagnosing issues with Application Insights itself.
By default, Application Insights Java 3.x logs at levelINFOto both the fileapplicationinsights.logand the console, corresponding to this configuration:
INFO
applicationinsights.log
{
  "selfDiagnostics": {
    "destination": "file+console",
    "level": "INFO",
    "file": {
      "path": "applicationinsights.log",
      "maxSizeMb": 5,
      "maxHistory": 1
    }
  }
}
{
  "selfDiagnostics": {
    "destination": "file+console",
    "level": "INFO",
    "file": {
      "path": "applicationinsights.log",
      "maxSizeMb": 5,
      "maxHistory": 1
    }
  }
}
In the preceding configuration example:
levelcan be one ofOFF,ERROR,WARN,INFO,DEBUG, orTRACE.
level
OFF
ERROR
WARN
INFO
DEBUG
TRACE
pathcan be an absolute or relative path. Relative paths are resolved against the directory whereapplicationinsights-agent-3.7.1.jaris located.
path
applicationinsights-agent-3.7.1.jar
Starting from version 3.0.2, you can also set the self-diagnosticslevelby using the environment variableAPPLICATIONINSIGHTS_SELF_DIAGNOSTICS_LEVEL. It then takes precedence over the self-diagnostics level specified in the JSON configuration.
level
APPLICATIONINSIGHTS_SELF_DIAGNOSTICS_LEVEL
Starting from version 3.0.3, you can also set the self-diagnostics file location by using the environment variableAPPLICATIONINSIGHTS_SELF_DIAGNOSTICS_FILE_PATH. It then takes precedence over the self-diagnostics file path specified in the JSON configuration.
APPLICATIONINSIGHTS_SELF_DIAGNOSTICS_FILE_PATH
Telemetry correlation
Telemetry correlation is enabled by default, but you may disable it in configuration.
{
  "preview": {
    "disablePropagation": true
  }
}
{
  "preview": {
    "disablePropagation": true
  }
}
An example
This example shows what a configuration file looks like with multiple components. Configure specific options based on your needs.
{
  "connectionString": "...",
  "role": {
    "name": "my cloud role name"
  },
  "sampling": {
    "percentage": 100
  },
  "jmxMetrics": [
  ],
  "customDimensions": {
  },
  "instrumentation": {
    "logging": {
      "level": "INFO"
    },
    "micrometer": {
      "enabled": true
    }
  },
  "proxy": {
  },
  "preview": {
    "processors": [
    ]
  },
  "selfDiagnostics": {
    "destination": "file+console",
    "level": "INFO",
    "file": {
      "path": "applicationinsights.log",
      "maxSizeMb": 5,
      "maxHistory": 1
    }
  }
}
{
  "connectionString": "...",
  "role": {
    "name": "my cloud role name"
  },
  "sampling": {
    "percentage": 100
  },
  "jmxMetrics": [
  ],
  "customDimensions": {
  },
  "instrumentation": {
    "logging": {
      "level": "INFO"
    },
    "micrometer": {
      "enabled": true
    }
  },
  "proxy": {
  },
  "preview": {
    "processors": [
    ]
  },
  "selfDiagnostics": {
    "destination": "file+console",
    "level": "INFO",
    "file": {
      "path": "applicationinsights.log",
      "maxSizeMb": 5,
      "maxHistory": 1
    }
  }
}
Feedback
Was this page helpful?
Additional resources