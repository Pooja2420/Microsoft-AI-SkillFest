Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Application Gateway HTTP settings configuration
Article
2025-04-14
12 contributors
In this article
The application gateway routes traffic to the backend servers by using the configuration that you specify here. After you create an HTTP setting, you must associate it with one or more request-routing rules.
Cookie-based affinity
Azure Application Gateway uses gateway-managed cookies for maintaining user sessions. When a user sends the first request to Application Gateway, it sets an affinity cookie in the response with a hash value that contains the session details. This process enables subsequent requests that carry the affinity cookie to be routed to the same backend server, thus maintaining stickiness.
This feature is useful when you want to keep a user session on the same server and when session state is saved locally on the server for a user session. If the application can't handle cookie-based affinity, you can't use this feature. To use it, make sure that the clients support cookies.
Note
Some vulnerability scans may flag the Application Gateway affinity cookie because the Secure or HttpOnly flags are not set. These scans don't take into account that the data in the cookie is generated using a one-way hash. The cookie doesn't contain any user information and is used purely for routing.
TheChromium browserv80 updatebrought a mandate where HTTP cookies withoutSameSiteattribute have to be treated as SameSite=Lax. For CORS (Cross-Origin Resource Sharing) requests, if the cookie has to be sent in a third-party context, it has to useSameSite=None; Secureattributes and it should be sent over HTTPS only. Otherwise, in an HTTP only scenario, the browser doesn't send the cookies in the third-party context. The goal of this update from Chrome is to enhance security and to avoid Cross-Site Request Forgery (CSRF) attacks.
To support this change, starting February 17 2020, Application Gateway (all the SKU types) will inject another cookie calledApplicationGatewayAffinityCORSin addition to the existingApplicationGatewayAffinitycookie. TheApplicationGatewayAffinityCORScookie has two more attributes added to it ("SameSite=None; Secure") so that sticky sessions are maintained even for cross-origin requests.
The default affinity cookie name isApplicationGatewayAffinityand you can change it. If in your network topology, you deploy multiple application gateways in line, you must set unique cookie names for each resource. If you're using a custom affinity cookie name, an additional cookie is added withCORSas suffix. For example:CustomCookieNameCORS.
CORS
Note
If the attributeSameSite=Noneis set, it's mandatory that the cookie also contains theSecureflag, and must be sent over HTTPS. If session affinity is required over CORS, you must migrate your workload to HTTPS. Refer to TLS offload and End-to-End TLS documentation for Application Gateway. See theSSL overview,Configure an application gateway with TLS termination, andConfigure end-to-end TLS.
Connection draining
Connection draining helps you gracefully remove backend pool members during planned service updates. It applies to backend instances that are explicitly removed from the backend pool.
You can apply this setting to all backend pool members by enabling Connection Draining in the Backend Setting. It ensures that all deregistering instances in a backend pool don't receive any new requests/connections while maintaining the existing connections until the configured timeout value. This process is also true for WebSocket connections.
The only exception to this process are requests bound for deregistering instances because of gateway-managed session affinity. These requests continue to be forwarded to the deregistering instances.
Note
There's a limitation where a configuration update will terminate ongoing connections after the connection draining timeout. To address this limitation, you must increase the connection draining time-out in the backend settings to a value higher than the max expected client download time.
Protocol
Application Gateway supports both HTTP and HTTPS for routing requests to the backend servers. If you choose HTTP, traffic to the backend servers is unencrypted. If unencrypted communication isn't acceptable, choose HTTPS.
This setting combined with HTTPS in the listener supportsend-to-end TLS. This allows you to securely transmit sensitive data encrypted to the back end. Each backend server in the backend pool that has end-to-end TLS enabled must be configured with a certificate to allow secure communication.
Port
This setting specifies the port where the backend servers listen to traffic from the application gateway. You can configure ports ranging from 1 to 65535.
Trusted root certificate
If you select HTTPS as the backend protocol, the Application Gateway requires a trusted root certificate to trust the backend pool for end-to-end SSL. By default, theUse well known CA certificateoption is set toNo. If you plan to use a self-signed certificate, or a certificate signed by an internal Certificate Authority, then you must provide the Application Gateway the matching public certificate used by the backend pool. This certificate must be uploaded directly to the Application Gateway in .CER format.
If you plan to use a certificate on the backend pool that is signed by a trusted public Certificate Authority, then you can set theUse well known CA certificateoption toYesand skip uploading a public certificate.
Request timeout
This setting is the number of seconds that the application gateway waits to receive a response from the backend server.
Override backend path
This setting lets you configure an optional custom forwarding path to use when the request is forwarded to the back end. Any part of the incoming path that matches the custom path in theoverride backend pathfield is copied to the forwarded path. The following table shows how this feature works:
When the HTTP setting is attached to a basic request-routing rule:Original requestOverride backend pathRequest forwarded to back end/home//override//override/home//home/secondhome//override//override/home/secondhome/
When the HTTP setting is attached to a basic request-routing rule:
When the HTTP setting is attached to a path-based request-routing rule:Original requestPath ruleOverride backend pathRequest forwarded to back end/pathrule/home//pathrule*/override//override/home//pathrule/home/secondhome//pathrule*/override//override/home/secondhome//home//pathrule*/override//override/home//home/secondhome//pathrule*/override//override/home/secondhome//pathrule/home//pathrule/home*/override//override//pathrule/home/secondhome//pathrule/home*/override//override/secondhome//pathrule//pathrule//override//override/
When the HTTP setting is attached to a path-based request-routing rule:
Use custom probe
This setting associates acustom probewith an HTTP setting. You can associate only one custom probe with an HTTP setting. If you don't explicitly associate a custom probe, thedefault probeis used to monitor the health of the back end. We recommend that you create a custom probe for greater control over the health monitoring of your back ends.
Note
The custom probe doesn't monitor the health of the backend pool unless the corresponding HTTP setting is explicitly associated with a listener.
Configuring the host name
Application Gateway allows for the connection established to the backend to use adifferenthostname than the one used by the client to connect to Application Gateway. While this configuration can be useful in some cases, exercise caution when overriding the hostname such that it's different between the application gateway and the client compared to the backend target.
In production environments, it's a best practice to use the same hostname for the client to application gateway connection and application gateway to backend target connection. This practice avoids potential issues with absolute URLs, redirect URLs, and host-bound cookies.
Before setting up Application Gateway that deviates from this, review the implications of such configuration as discussed in more detail in Architecture Center:Preserve the original HTTP host name between a reverse proxy and its backend web application
There are two aspects of an HTTP setting that influence theHostHTTP header that is used by Application Gateway to connect to the backend:
Host
"Pick host name from backend-address"
"Host name override"
Pick host name from backend address
This capability dynamically sets thehostheader in the request to the host name of the backend pool. It uses an IP address or FQDN.
This feature helps when the domain name of the back end is different from the DNS name of the application gateway, and the back end relies on a specific host header to resolve to the correct endpoint.
An example case is multi-tenant services as the back end. An app service is a multi-tenant service that uses a shared space with a single IP address. So, an app service can only be accessed through the hostnames that are configured in the custom domain settings.
By default, the custom domain name isexample.azurewebsites.net. To access your app service by using an application gateway through a hostname that's not explicitly registered in the app service or through the application gateway's FQDN, you can override the hostname in the original request to the app service's hostname. To do this, enable thepick host name from backend addresssetting.
For a custom domain whose existing custom DNS name is mapped to the app service, the recommended configuration isn't to enable thepick host name from backend address.
Note
This setting isn't required for App Service Environment, which is a dedicated deployment.
Host name override
This capability replaces thehostheader in the incoming request on the application gateway with the host name that you specify.
For example, ifwww.contoso.comis specified in theHost namesetting, the original request *https://appgw.eastus.cloudapp.azure.com/path1is changed to *https://www.contoso.com/path1when the request is forwarded to the backend server.
https://appgw.eastus.cloudapp.azure.com/path1
https://www.contoso.com/path1
Next steps
Learn about the backend pool
Feedback
Was this page helpful?
Additional resources