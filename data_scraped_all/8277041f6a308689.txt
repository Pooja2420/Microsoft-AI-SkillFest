Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Web app that signs in users: App registration
Article
2025-03-21
19 contributors
In this article
Applies to:Workforce tenantsExternal tenants (learn more)
This article explains the app registration steps for a web app that signs in users.
To register your application, you can use:
Theweb app quickstarts. In addition to being a great first experience with creating an application, quickstarts in the Azure portal contain a button namedMake this change for me. You can use this button to set the properties you need, even for an existing app. Adapt the values of these properties to your own case. In particular, the web API URL for your app is probably going to be different from the proposed default, which will also affect the sign-out URI.
The Azure portal toregister your application manually.
PowerShell and command-line tools.
Register an app by using the quickstarts
You can use the following link to bootstrap the creation of your web application:
Register an application
Register an app by using the Azure portal
Note
The portal to use is different depending on whether your application runs in the Microsoft Azure public cloud or in a national or sovereign cloud. For more information, seeNational clouds.
Sign in to theMicrosoft Entra admin center.
If you have access to multiple tenants, use theSettingsiconin the top menu to switch to the tenant in which you want to register the application from theDirectories + subscriptionsmenu.
Browse toEntra ID>App registrations, selectNew registration.
ASP.NET Core
ASP.NET
Java
Node.js
Python
When theRegister an applicationpage appears, enter your application's registration information:Enter aNamefor your application, for exampleAspNetCore-WebApp. Users of your app might see this name, and you can change it later.Choose the supported account types for your application. (SeeSupported account types.)ForRedirect URI, add the type of application and the URI destination that will accept returned token responses after successful authentication. For example, enterhttps://localhost:44321.SelectRegister.
Enter aNamefor your application, for exampleAspNetCore-WebApp. Users of your app might see this name, and you can change it later.
AspNetCore-WebApp
Choose the supported account types for your application. (SeeSupported account types.)
ForRedirect URI, add the type of application and the URI destination that will accept returned token responses after successful authentication. For example, enterhttps://localhost:44321.
https://localhost:44321
SelectRegister.
UnderManage, selectAuthenticationand then add the following information:In theWebsection, addhttps://localhost:44321/signin-oidcas aRedirect URI.InFront-channel logout URL, enterhttps://localhost:44321/signout-oidc.SelectSave.
In theWebsection, addhttps://localhost:44321/signin-oidcas aRedirect URI.
https://localhost:44321/signin-oidc
InFront-channel logout URL, enterhttps://localhost:44321/signout-oidc.
https://localhost:44321/signout-oidc
SelectSave.
When theRegister an application pageappears, enter your application's registration information:Enter aNamefor your application, for exampleMailApp-openidconnect-v2. Users of your app might see this name, and you can change it later.Choose the supported account types for your application. (SeeSupported account types.)In theRedirect URI (optional)section, selectWebin the combo box and enter aRedirect URIofhttps://localhost:44326/.SelectRegisterto create the application.
Enter aNamefor your application, for exampleMailApp-openidconnect-v2. Users of your app might see this name, and you can change it later.
MailApp-openidconnect-v2
Choose the supported account types for your application. (SeeSupported account types.)
In theRedirect URI (optional)section, selectWebin the combo box and enter aRedirect URIofhttps://localhost:44326/.
https://localhost:44326/
SelectRegisterto create the application.
UnderManage, selectAuthentication.
SelectSave.
When theRegister an application pageappears, enter your application's registration information:Enter aNamefor your application, for examplejava-webapp. Users of your app might see this name, and you can change it later.SelectAccounts in any organizational directory and personal Microsoft Accounts.SelectRegisterto register the application.
When theRegister an application pageappears, enter your application's registration information:
Enter aNamefor your application, for examplejava-webapp. Users of your app might see this name, and you can change it later.
java-webapp
SelectAccounts in any organizational directory and personal Microsoft Accounts.
SelectRegisterto register the application.
UnderManage, selectAuthentication>Add a platform.
UnderManage, selectAuthentication>Add a platform.
SelectWeb.
SelectWeb.
ForRedirect URI, enter the same host and port number, followed by/msal4jsample/secure/aadfor the sign-in page.
ForRedirect URI, enter the same host and port number, followed by/msal4jsample/secure/aadfor the sign-in page.
/msal4jsample/secure/aad
SelectConfigure.
SelectConfigure.
In theWebsection, use the host and port number, followed by/msal4jsample/graph/meas aRedirect URIfor the user information page.
By default, the sample uses:http://localhost:8080/msal4jsample/secure/aadhttp://localhost:8080/msal4jsample/graph/me
In theWebsection, use the host and port number, followed by/msal4jsample/graph/meas aRedirect URIfor the user information page.
By default, the sample uses:
/msal4jsample/graph/me
http://localhost:8080/msal4jsample/secure/aad
http://localhost:8080/msal4jsample/secure/aad
http://localhost:8080/msal4jsample/graph/me
http://localhost:8080/msal4jsample/graph/me
SelectSave.
SelectSave.
UnderManage, selectCertificates & secrets.
UnderManage, selectCertificates & secrets.
In theClient secretssection, selectNew client secret, and then:Enter a key description.Select the key durationIn 1 year.SelectAdd.When the key value appears, copy it for later. This value won't be displayed again or be retrievable by any other means.
In theClient secretssection, selectNew client secret, and then:
Enter a key description.
Select the key durationIn 1 year.
SelectAdd.
When the key value appears, copy it for later. This value won't be displayed again or be retrievable by any other means.
When theRegister an application pageappears, enter your application's registration information:Enter aNamefor your application, for examplenode-webapp. Users of your app might see this name, and you can change it later.ChangeSupported account typestoAccounts in this organizational directory only.In theRedirect URI (optional)section, selectWebin the combo  box and enter the following redirect URI:http://localhost:3000/auth/redirect.SelectRegisterto create the application.
Enter aNamefor your application, for examplenode-webapp. Users of your app might see this name, and you can change it later.
node-webapp
ChangeSupported account typestoAccounts in this organizational directory only.
In theRedirect URI (optional)section, selectWebin the combo  box and enter the following redirect URI:http://localhost:3000/auth/redirect.
http://localhost:3000/auth/redirect
SelectRegisterto create the application.
On the app'sOverviewpage, find theApplication (client) IDvalue and record it for later. You'll need it to configure the configuration file for this project.
UnderManage, selectCertificates & secrets.
In theClient Secretssection, selectNew client secret, and then:Enter a key description.Select a key duration ofIn 1 year.SelectAdd.When the key value appears, copy it. You'll need it later.
Enter a key description.
Select a key duration ofIn 1 year.
SelectAdd.
When the key value appears, copy it. You'll need it later.
When theRegister an application pageappears, enter your application's registration information:Enter aNamefor your application, for examplepython-webapp. Users of your app might see this name, and you can change it later.ChangeSupported account typestoAccounts in any organizational directory and personal Microsoft accounts (such as Skype, Xbox, Outlook.com).In theRedirect URI (optional)section, selectWebin the combo  box and enter the following redirect URI:http://localhost:5000/getAToken.SelectRegisterto create the application.
Enter aNamefor your application, for examplepython-webapp. Users of your app might see this name, and you can change it later.
python-webapp
ChangeSupported account typestoAccounts in any organizational directory and personal Microsoft accounts (such as Skype, Xbox, Outlook.com).
In theRedirect URI (optional)section, selectWebin the combo  box and enter the following redirect URI:http://localhost:5000/getAToken.
http://localhost:5000/getAToken
SelectRegisterto create the application.
On the app'sOverviewpage, find theApplication (client) IDvalue and record it for later. You'll need it to configure the.envfile for this project.
UnderManage, selectCertificates & secrets.
In theClient Secretssection, selectNew client secret, and then:Enter a key description. Leave the default expiration.SelectAdd.Save theValueof theClient Secretin a safe location. You'll need it to configure the code, and you can't retrieve it later.
Enter a key description. Leave the default expiration.
SelectAdd.
Save theValueof theClient Secretin a safe location. You'll need it to configure the code, and you can't retrieve it later.
Register an app by using PowerShell
You can also register an application with Microsoft Graph PowerShell, using theNew-MgApplication.
Here's an idea of the code. For a fully functioning code, seethis sample
# Connect to the Microsoft Graph API, non-interactive is not supported for the moment (Oct 2021)
Write-Host "Connecting to Microsoft Graph"
if ($tenantId -eq "") {
   Connect-MgGraph -Scopes "User.Read.All Organization.Read.All Application.ReadWrite.All" -Environment $azureEnvironmentName
}
else {
   Connect-MgGraph -TenantId $tenantId -Scopes "User.Read.All Organization.Read.All Application.ReadWrite.All" -Environment $azureEnvironmentName
}
   
$context = Get-MgContext
$tenantId = $context.TenantId

# Get the user running the script
$currentUserPrincipalName = $context.Account
$user = Get-MgUser -Filter "UserPrincipalName eq '$($context.Account)'"

# get the tenant we signed in to
$Tenant = Get-MgOrganization
$tenantName = $Tenant.DisplayName
   
$verifiedDomain = $Tenant.VerifiedDomains | where {$_.Isdefault -eq $true}
$verifiedDomainName = $verifiedDomain.Name
$tenantId = $Tenant.Id

Write-Host ("Connected to Tenant {0} ({1}) as account '{2}'. Domain is '{3}'" -f  $Tenant.DisplayName, $Tenant.Id, $currentUserPrincipalName, $verifiedDomainName)

# Create the webApp AAD application
Write-Host "Creating the AAD application (WebApp)"
# create the application 
$webAppAadApplication = New-MgApplication -DisplayName "WebApp" `
                                                   -Web `
                                                   @{ `
                                                         RedirectUris = "https://localhost:44321/", "https://localhost:44321/signin-oidc"; `
                                                         HomePageUrl = "https://localhost:44321/"; `
                                                         LogoutUrl = "https://localhost:44321/signout-oidc"; `
                                                      } `
                                                      -SignInAudience AzureADandPersonalMicrosoftAccount `
                                                   #end of command

$currentAppId = $webAppAadApplication.AppId
$currentAppObjectId = $webAppAadApplication.Id

$tenantName = (Get-MgApplication -ApplicationId $currentAppObjectId).PublisherDomain
#Update-MgApplication -ApplicationId $currentAppObjectId -IdentifierUris @("https://$tenantName/WebApp")
   
# create the service principal of the newly created application     
$webAppServicePrincipal = New-MgServicePrincipal -AppId $currentAppId -Tags {WindowsAzureActiveDirectoryIntegratedApp}

# add the user running the script as an app owner if needed
$owner = Get-MgApplicationOwner -ApplicationId $currentAppObjectId
if ($owner -eq $null)
{
   New-MgApplicationOwnerByRef -ApplicationId $currentAppObjectId  -BodyParameter = @{"@odata.id" = "https://graph.microsoft.com/v1.0/directoryObjects/$user.ObjectId"}
   Write-Host "'$($user.UserPrincipalName)' added as an application owner to app '$($webAppServicePrincipal.DisplayName)'"
}
Write-Host "Done creating the webApp application (WebApp)"
# Connect to the Microsoft Graph API, non-interactive is not supported for the moment (Oct 2021)
Write-Host "Connecting to Microsoft Graph"
if ($tenantId -eq "") {
   Connect-MgGraph -Scopes "User.Read.All Organization.Read.All Application.ReadWrite.All" -Environment $azureEnvironmentName
}
else {
   Connect-MgGraph -TenantId $tenantId -Scopes "User.Read.All Organization.Read.All Application.ReadWrite.All" -Environment $azureEnvironmentName
}
   
$context = Get-MgContext
$tenantId = $context.TenantId

# Get the user running the script
$currentUserPrincipalName = $context.Account
$user = Get-MgUser -Filter "UserPrincipalName eq '$($context.Account)'"

# get the tenant we signed in to
$Tenant = Get-MgOrganization
$tenantName = $Tenant.DisplayName
   
$verifiedDomain = $Tenant.VerifiedDomains | where {$_.Isdefault -eq $true}
$verifiedDomainName = $verifiedDomain.Name
$tenantId = $Tenant.Id

Write-Host ("Connected to Tenant {0} ({1}) as account '{2}'. Domain is '{3}'" -f  $Tenant.DisplayName, $Tenant.Id, $currentUserPrincipalName, $verifiedDomainName)

# Create the webApp AAD application
Write-Host "Creating the AAD application (WebApp)"
# create the application 
$webAppAadApplication = New-MgApplication -DisplayName "WebApp" `
                                                   -Web `
                                                   @{ `
                                                         RedirectUris = "https://localhost:44321/", "https://localhost:44321/signin-oidc"; `
                                                         HomePageUrl = "https://localhost:44321/"; `
                                                         LogoutUrl = "https://localhost:44321/signout-oidc"; `
                                                      } `
                                                      -SignInAudience AzureADandPersonalMicrosoftAccount `
                                                   #end of command

$currentAppId = $webAppAadApplication.AppId
$currentAppObjectId = $webAppAadApplication.Id

$tenantName = (Get-MgApplication -ApplicationId $currentAppObjectId).PublisherDomain
#Update-MgApplication -ApplicationId $currentAppObjectId -IdentifierUris @("https://$tenantName/WebApp")
   
# create the service principal of the newly created application     
$webAppServicePrincipal = New-MgServicePrincipal -AppId $currentAppId -Tags {WindowsAzureActiveDirectoryIntegratedApp}

# add the user running the script as an app owner if needed
$owner = Get-MgApplicationOwner -ApplicationId $currentAppObjectId
if ($owner -eq $null)
{
   New-MgApplicationOwnerByRef -ApplicationId $currentAppObjectId  -BodyParameter = @{"@odata.id" = "https://graph.microsoft.com/v1.0/directoryObjects/$user.ObjectId"}
   Write-Host "'$($user.UserPrincipalName)' added as an application owner to app '$($webAppServicePrincipal.DisplayName)'"
}
Write-Host "Done creating the webApp application (WebApp)"
Next step
ASP.NET Core
ASP.NET
Java
Node.js
Python
Move on to the next article in this scenario,App's code configuration.
Move on to the next article in this scenario,App's code configuration.
Move on to the next article in this scenario,App's code configuration.
Move on to the next article in this scenario,App's code configuration.
Move on to the next article in this scenario,App's code configuration.
Feedback
Was this page helpful?
Additional resources