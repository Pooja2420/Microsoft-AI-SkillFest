Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Use Spring Boot to upload a file to Azure Blob Storage
Article
2024-08-28
21 contributors
In this article
This tutorial shows you how to upload and read from container blobs in an Azure Blob Storage account from a Spring Boot application.
Azure Blob Storageis Microsoft's object storage solution for the cloud. Blob storage is optimized for storing a massive amount of unstructured data, such as text or binary data.
Prerequisites
An Azure subscription -create one for free.
Java Development Kit (JDK)version 8 or higher.
Apache Maven, version 3.0 or higher.
cURLor a similar HTTP utility to test functionality.
An Azure storage account and container. If you don't have one,create a storage account.
A Spring Boot application. If you don't have one, create a Maven project with theSpring Initializr. Be sure to selectMaven Projectand, underDependencies, add theSpring Webdependency, and then select Java version 8 or higher.
Note
To grant your account access to resources, in your newly created Azure Storage account, assign theStorage Blob Data Contributorrole to the Microsoft Entra account you're currently using. For more information, seeAssign Azure roles using the Azure portal.
Storage Blob Data Contributor
Important
Spring Boot version 2.5 or higher is required to complete the steps in this tutorial.
Create a container
First, create a container namedtestcontainerby following the instructions inQuickstart: Upload, download, and list blobs with the Azure portal.
testcontainer
Upload and read blobs from Azure Storage account container
Now that you have an Azure Storage account and container, you can upload and read files from blobs with Spring Cloud Azure.
To install the Spring Cloud Azure Storage Blob Starter module, add the following dependencies to yourpom.xmlfile:
The Spring Cloud Azure Bill of Materials (BOM):<dependencyManagement>
  <dependencies>
    <dependency>
      <groupId>com.azure.spring</groupId>
      <artifactId>spring-cloud-azure-dependencies</artifactId>
      <version>5.22.0</version>
      <type>pom</type>
      <scope>import</scope>
    </dependency>
  </dependencies>
</dependencyManagement>NoteIf you're using Spring Boot 2.x, be sure to set thespring-cloud-azure-dependenciesversion to4.20.0.
This Bill of Material (BOM) should be configured in the<dependencyManagement>section of yourpom.xmlfile. This ensures that all Spring Cloud Azure dependencies are using the same version.
For more information about the version used for this BOM, seeWhich Version of Spring Cloud Azure Should I Use.
The Spring Cloud Azure Bill of Materials (BOM):
<dependencyManagement>
  <dependencies>
    <dependency>
      <groupId>com.azure.spring</groupId>
      <artifactId>spring-cloud-azure-dependencies</artifactId>
      <version>5.22.0</version>
      <type>pom</type>
      <scope>import</scope>
    </dependency>
  </dependencies>
</dependencyManagement>
<dependencyManagement>
  <dependencies>
    <dependency>
      <groupId>com.azure.spring</groupId>
      <artifactId>spring-cloud-azure-dependencies</artifactId>
      <version>5.22.0</version>
      <type>pom</type>
      <scope>import</scope>
    </dependency>
  </dependencies>
</dependencyManagement>
Note
If you're using Spring Boot 2.x, be sure to set thespring-cloud-azure-dependenciesversion to4.20.0.
This Bill of Material (BOM) should be configured in the<dependencyManagement>section of yourpom.xmlfile. This ensures that all Spring Cloud Azure dependencies are using the same version.
For more information about the version used for this BOM, seeWhich Version of Spring Cloud Azure Should I Use.
spring-cloud-azure-dependencies
4.20.0
<dependencyManagement>
The Spring Cloud Azure Storage Blob Starter artifact:<dependency>
  <groupId>com.azure.spring</groupId>
  <artifactId>spring-cloud-azure-starter-storage-blob</artifactId>
</dependency>
The Spring Cloud Azure Storage Blob Starter artifact:
<dependency>
  <groupId>com.azure.spring</groupId>
  <artifactId>spring-cloud-azure-starter-storage-blob</artifactId>
</dependency>
<dependency>
  <groupId>com.azure.spring</groupId>
  <artifactId>spring-cloud-azure-starter-storage-blob</artifactId>
</dependency>
Code the application
To upload and read files from blobs by using the Spring Cloud Azure Storage Blob starter, configure the application by using the following steps.
Configure a Storage account name and endpoint in theapplication.propertiesconfiguration file, as shown in the following example.spring.cloud.azure.storage.blob.account-name=${AZURE_STORAGE_ACCOUNT_NAME}
spring.cloud.azure.storage.blob.endpoint=${AZURE_STORAGE_ACCOUNT_ENDPOINT}
Configure a Storage account name and endpoint in theapplication.propertiesconfiguration file, as shown in the following example.
spring.cloud.azure.storage.blob.account-name=${AZURE_STORAGE_ACCOUNT_NAME}
spring.cloud.azure.storage.blob.endpoint=${AZURE_STORAGE_ACCOUNT_ENDPOINT}
spring.cloud.azure.storage.blob.account-name=${AZURE_STORAGE_ACCOUNT_NAME}
spring.cloud.azure.storage.blob.endpoint=${AZURE_STORAGE_ACCOUNT_ENDPOINT}
Create a newBlobControllerJava class as shown in the following example. This class is used to upload and read files from the container blob in the Azure Storage account.package com.example.demo;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.io.Resource;
import org.springframework.core.io.WritableResource;
import org.springframework.util.StreamUtils;
import org.springframework.web.bind.annotation.*;

import java.io.IOException;
import java.io.OutputStream;
import java.nio.charset.Charset;

@RestController
@RequestMapping("blob")
public class BlobController {

    @Value("azure-blob://testcontainer/test.txt")
    private Resource blobFile;

    @GetMapping("/readBlobFile")
    public String readBlobFile() throws IOException {
        return StreamUtils.copyToString(
                this.blobFile.getInputStream(),
                Charset.defaultCharset());
    }

    @PostMapping("/writeBlobFile")
    public String writeBlobFile(@RequestBody String data) throws IOException {
        try (OutputStream os = ((WritableResource) this.blobFile).getOutputStream()) {
            os.write(data.getBytes());
        }
        return "file was updated";
    }
}TipIn this tutorial, there are no authentication operations in the configurations or the code. However, connecting to Azure services requires authentication. To complete the authentication, you need to use Azure Identity. Spring Cloud Azure usesDefaultAzureCredential, which the Azure Identity library provides to help you get credentials without any code changes.DefaultAzureCredentialsupports multiple authentication methods and determines which method to use at runtime. This approach enables your app to use different authentication methods in different environments (such as local and production environments) without implementing environment-specific code. For more information, seeDefaultAzureCredential.To complete the authentication in local development environments, you can use Azure CLI, Visual Studio Code, PowerShell, or other methods. For more information, seeAzure authentication in Java development environments. To complete the authentication in Azure hosting environments, we recommend using user-assigned managed identity. For more information, seeWhat are managed identities for Azure resources?
Create a newBlobControllerJava class as shown in the following example. This class is used to upload and read files from the container blob in the Azure Storage account.
BlobController
package com.example.demo;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.io.Resource;
import org.springframework.core.io.WritableResource;
import org.springframework.util.StreamUtils;
import org.springframework.web.bind.annotation.*;

import java.io.IOException;
import java.io.OutputStream;
import java.nio.charset.Charset;

@RestController
@RequestMapping("blob")
public class BlobController {

    @Value("azure-blob://testcontainer/test.txt")
    private Resource blobFile;

    @GetMapping("/readBlobFile")
    public String readBlobFile() throws IOException {
        return StreamUtils.copyToString(
                this.blobFile.getInputStream(),
                Charset.defaultCharset());
    }

    @PostMapping("/writeBlobFile")
    public String writeBlobFile(@RequestBody String data) throws IOException {
        try (OutputStream os = ((WritableResource) this.blobFile).getOutputStream()) {
            os.write(data.getBytes());
        }
        return "file was updated";
    }
}
package com.example.demo;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.io.Resource;
import org.springframework.core.io.WritableResource;
import org.springframework.util.StreamUtils;
import org.springframework.web.bind.annotation.*;

import java.io.IOException;
import java.io.OutputStream;
import java.nio.charset.Charset;

@RestController
@RequestMapping("blob")
public class BlobController {

    @Value("azure-blob://testcontainer/test.txt")
    private Resource blobFile;

    @GetMapping("/readBlobFile")
    public String readBlobFile() throws IOException {
        return StreamUtils.copyToString(
                this.blobFile.getInputStream(),
                Charset.defaultCharset());
    }

    @PostMapping("/writeBlobFile")
    public String writeBlobFile(@RequestBody String data) throws IOException {
        try (OutputStream os = ((WritableResource) this.blobFile).getOutputStream()) {
            os.write(data.getBytes());
        }
        return "file was updated";
    }
}
Tip
In this tutorial, there are no authentication operations in the configurations or the code. However, connecting to Azure services requires authentication. To complete the authentication, you need to use Azure Identity. Spring Cloud Azure usesDefaultAzureCredential, which the Azure Identity library provides to help you get credentials without any code changes.
DefaultAzureCredential
DefaultAzureCredentialsupports multiple authentication methods and determines which method to use at runtime. This approach enables your app to use different authentication methods in different environments (such as local and production environments) without implementing environment-specific code. For more information, seeDefaultAzureCredential.
DefaultAzureCredential
To complete the authentication in local development environments, you can use Azure CLI, Visual Studio Code, PowerShell, or other methods. For more information, seeAzure authentication in Java development environments. To complete the authentication in Azure hosting environments, we recommend using user-assigned managed identity. For more information, seeWhat are managed identities for Azure resources?
After your application is running, usecurlto test your application by following these steps.Send a POST request to update a file's contents by using the following command:curl http://localhost:8080/blob/writeBlobFile -d "new message" -H "Content-Type: text/plain"You should see a response that saysfile was updated.Send a GET request to verify the file's contents by using the following command:curl -X GET http://localhost:8080/blob/readBlobFileYou should see the "new message" text that you posted.
After your application is running, usecurlto test your application by following these steps.
curl
Send a POST request to update a file's contents by using the following command:curl http://localhost:8080/blob/writeBlobFile -d "new message" -H "Content-Type: text/plain"You should see a response that saysfile was updated.
Send a POST request to update a file's contents by using the following command:
curl http://localhost:8080/blob/writeBlobFile -d "new message" -H "Content-Type: text/plain"
curl http://localhost:8080/blob/writeBlobFile -d "new message" -H "Content-Type: text/plain"
You should see a response that saysfile was updated.
file was updated
Send a GET request to verify the file's contents by using the following command:curl -X GET http://localhost:8080/blob/readBlobFileYou should see the "new message" text that you posted.
Send a GET request to verify the file's contents by using the following command:
curl -X GET http://localhost:8080/blob/readBlobFile
curl -X GET http://localhost:8080/blob/readBlobFile
You should see the "new message" text that you posted.
Deploy to Azure Spring Apps
Now that you have the Spring Boot application running locally, it's time to move it to production.Azure Spring Appsmakes it easy to deploy Spring Boot applications to Azure without any code changes. The service manages the infrastructure of Spring applications so developers can focus on their code. Azure Spring Apps provides lifecycle management using comprehensive monitoring and diagnostics, configuration management, service discovery, CI/CD integration, blue-green deployments, and more. To deploy your application to Azure Spring Apps, seeDeploy your first application to Azure Spring Apps.
Next steps
To learn more about Spring and Azure, continue to the Spring on Azure documentation center.
Azure for Spring developersSpring Cloud Azure Storage Samples
See also
For more information about the additional Spring Boot Starters that are available for Microsoft Azure, seeWhat is Spring Cloud Azure?
For more information about additional Azure storage APIs that you can call from your Spring Boot applications, see the following articles:
Quickstart: Azure Blob Storage client library for Java
How to use Queue Storage from Java
How to use Azure Table client library for Java
Develop for Azure Files with Java SE
Quickstart: Quarkus extension for Azure Blob Storage
Feedback
Was this page helpful?
Additional resources