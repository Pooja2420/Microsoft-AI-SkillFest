Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Manage Azure SQL Database long-term backup retention
Article
2025-01-06
23 contributors
In this article
Applies to:Azure SQL Database
Azure SQL Database
Azure SQL Managed Instance
With Azure SQL Database, you can set along-term backup retention(LTR) policy to automatically retain backups in separate Azure Blob storage containers for up to 10 years. You can then recover a database using these backups using the Azure portal, Azure CLI, or PowerShell.
Prerequisites
Portal
Azure CLI
PowerShell
An active Azure subscription.
Prepare your environment for the Azure CLI.
Use the Bash environment inAzure Cloud Shell. For more information, seeGet started with Azure Cloud Shell.
Use the Bash environment inAzure Cloud Shell. For more information, seeGet started with Azure Cloud Shell.

If you prefer to run CLI reference commands locally,installthe Azure CLI. If you're running on Windows or macOS, consider running Azure CLI in a Docker container. For more information, seeHow to run the Azure CLI in a Docker container.If you're using a local installation, sign in to the Azure CLI by using theaz logincommand. To finish the authentication process, follow the steps displayed in your terminal. For other sign-in options, seeAuthenticate to Azure using Azure CLI.When you're prompted, install the Azure CLI extension on first use. For more information about extensions, seeUse and manage extensions with the Azure CLI.Runaz versionto find the version and dependent libraries that are installed. To upgrade to the latest version, runaz upgrade.
If you prefer to run CLI reference commands locally,installthe Azure CLI. If you're running on Windows or macOS, consider running Azure CLI in a Docker container. For more information, seeHow to run the Azure CLI in a Docker container.
If you're using a local installation, sign in to the Azure CLI by using theaz logincommand. To finish the authentication process, follow the steps displayed in your terminal. For other sign-in options, seeAuthenticate to Azure using Azure CLI.
If you're using a local installation, sign in to the Azure CLI by using theaz logincommand. To finish the authentication process, follow the steps displayed in your terminal. For other sign-in options, seeAuthenticate to Azure using Azure CLI.
When you're prompted, install the Azure CLI extension on first use. For more information about extensions, seeUse and manage extensions with the Azure CLI.
When you're prompted, install the Azure CLI extension on first use. For more information about extensions, seeUse and manage extensions with the Azure CLI.
Runaz versionto find the version and dependent libraries that are installed. To upgrade to the latest version, runaz upgrade.
Runaz versionto find the version and dependent libraries that are installed. To upgrade to the latest version, runaz upgrade.
Prepare your environment for PowerShell.
Note
This article uses the Azure Az PowerShell module, which is the recommended PowerShell module for interacting with Azure. To get started with the Az PowerShell module, seeInstall Azure PowerShell. To learn how to migrate to the Az PowerShell module, seeMigrate Azure PowerShell from AzureRM to Az.
Important
The PowerShell Azure Resource Manager (AzureRM) module was deprecated on February 29, 2024. All future development should use the Az.Sql module. Users are advised to migrate from AzureRM to the Az PowerShell module to ensure continued support and updates. The AzureRM module is no longer maintained or supported. The arguments for the commands in the Az PowerShell module and in the AzureRM modules are substantially identical. For more about their compatibility, seeIntroducing the new Az PowerShell module.
ForGet-AzSqlDatabaseLongTermRetentionBackupandRestore-AzSqlDatabase, you need to be a member of one of the following roles:
Get-AzSqlDatabaseLongTermRetentionBackup
Restore-AzSqlDatabase
Subscription Owner role or
Subscription Owner role or
Subscription Contributor role or
Subscription Contributor role or
SQL Server Contributor role or
SQL Server Contributor role or
Custom role with the following permissions:Microsoft.Sql/locations/longTermRetentionBackups/readMicrosoft.Sql/locations/longTermRetentionServers/longTermRetentionBackups/readMicrosoft.Sql/locations/longTermRetentionServers/longTermRetentionDatabases/longTermRetentionBackups/read
Custom role with the following permissions:
Microsoft.Sql/locations/longTermRetentionBackups/readMicrosoft.Sql/locations/longTermRetentionServers/longTermRetentionBackups/readMicrosoft.Sql/locations/longTermRetentionServers/longTermRetentionDatabases/longTermRetentionBackups/read
Microsoft.Sql/locations/longTermRetentionBackups/read
Microsoft.Sql/locations/longTermRetentionServers/longTermRetentionBackups/read
Microsoft.Sql/locations/longTermRetentionServers/longTermRetentionDatabases/longTermRetentionBackups/read
ForRemove-AzSqlDatabaseLongTermRetentionBackup, you need to be a member of one of the following roles:
Remove-AzSqlDatabaseLongTermRetentionBackup
Subscription Owner role or
Subscription Owner role or
Subscription Contributor role or
Subscription Contributor role or
Custom role with the following permission:Microsoft.Sql/locations/longTermRetentionServers/longTermRetentionDatabases/longTermRetentionBackups/delete
Custom role with the following permission:
Microsoft.Sql/locations/longTermRetentionServers/longTermRetentionDatabases/longTermRetentionBackups/delete
Microsoft.Sql/locations/longTermRetentionServers/longTermRetentionDatabases/longTermRetentionBackups/delete
Permissions
To view and restore LTR backups, you need:
Subscription Owner role or
Subscription Owner role or
Subscription Contributor role or
Subscription Contributor role or
SQL Server Contributor role or
SQL Server Contributor role or
Custom role with the following permissions:Microsoft.Sql/locations/longTermRetentionBackups/readMicrosoft.Sql/locations/longTermRetentionServers/longTermRetentionBackups/readMicrosoft.Sql/locations/longTermRetentionServers/longTermRetentionDatabases/longTermRetentionBackups/read
Custom role with the following permissions:
Microsoft.Sql/locations/longTermRetentionBackups/readMicrosoft.Sql/locations/longTermRetentionServers/longTermRetentionBackups/readMicrosoft.Sql/locations/longTermRetentionServers/longTermRetentionDatabases/longTermRetentionBackups/read
Microsoft.Sql/locations/longTermRetentionBackups/read
Microsoft.Sql/locations/longTermRetentionServers/longTermRetentionBackups/read
Microsoft.Sql/locations/longTermRetentionServers/longTermRetentionDatabases/longTermRetentionBackups/read
To delete LTR backups, you need to be a member of one of the following roles:
Subscription Owner role or
Subscription Owner role or
Subscription Contributor role or
Subscription Contributor role or
Custom role with the following permission:Microsoft.Sql/locations/longTermRetentionServers/longTermRetentionDatabases/longTermRetentionBackups/delete
Custom role with the following permission:
Microsoft.Sql/locations/longTermRetentionServers/longTermRetentionDatabases/longTermRetentionBackups/delete
Microsoft.Sql/locations/longTermRetentionServers/longTermRetentionDatabases/longTermRetentionBackups/delete
Note
The SQL Server Contributor role does not have permission to delete LTR backups.
Azure role-based access control (RBAC) permissions could be granted in eithersubscriptionorresource groupscope. However, to access LTR backups that belong to a dropped server, this permission must be granted in thesubscriptionscope of that server:
Microsoft.Sql/locations/longTermRetentionServers/longTermRetentionDatabases/longTermRetentionBackups/delete
Microsoft.Sql/locations/longTermRetentionServers/longTermRetentionDatabases/longTermRetentionBackups/delete
Create long-term retention policies
Portal
Azure CLI
PowerShell
You can configure SQL Database toretain automated backupsfor a period longer than the retention period for your service tier.
In the Azure portal, navigate to your server and then selectBackups. Select theRetention policiestab to modify your backup retention settings.
In the Azure portal, navigate to your server and then selectBackups. Select theRetention policiestab to modify your backup retention settings.

On the Retention policies tab, select the database(s) on which you want to set or modify long-term backup retention policies. Unselected databases will not be affected.
On the Retention policies tab, select the database(s) on which you want to set or modify long-term backup retention policies. Unselected databases will not be affected.

In theConfigure policiespane, specify your desired retention period for weekly, monthly, or yearly backups. Choose a retention period of '0' to indicate that no long-term backup retention should be set.
In theConfigure policiespane, specify your desired retention period for weekly, monthly, or yearly backups. Choose a retention period of '0' to indicate that no long-term backup retention should be set.

SelectApplyto apply the chosen retention settings to all selected databases.
SelectApplyto apply the chosen retention settings to all selected databases.
Important
When you enable a long-term backup retention policy, it may take up to 7 days for the first backup to become visible and available to restore. For details of the LTR backup cadence, seelong-term backup retention.
Run theaz sql db ltr-policy setcommand to create an LTR policy. The following example sets a long-term retention policy for 12 weeks for the weekly backup.
az sql db ltr-policy set \
   --resource-group mygroup \
   --server myserver \
   --name mydb \
   --weekly-retention "P12W"
az sql db ltr-policy set \
   --resource-group mygroup \
   --server myserver \
   --name mydb \
   --weekly-retention "P12W"
This example sets a retention policy for 12 weeks for the weekly backup, 5 years for the yearly backup, and the week of April 15 in which to take the yearly LTR backup.
az sql db ltr-policy set \
   --resource-group mygroup \
   --server myserver \
   --name mydb \
   --weekly-retention "P12W" \
   --yearly-retention "P5Y" \
   --week-of-year 16
az sql db ltr-policy set \
   --resource-group mygroup \
   --server myserver \
   --name mydb \
   --weekly-retention "P12W" \
   --yearly-retention "P5Y" \
   --week-of-year 16
# get the SQL server
$subId = "<subscriptionId>"
$serverName = "<serverName>"
$resourceGroup = "<resourceGroupName>"
$dbName = "<databaseName>"

Connect-AzAccount
Select-AzSubscription -SubscriptionId $subId

$server = Get-AzSqlServer -ServerName $serverName -ResourceGroupName $resourceGroup

# create LTR policy with WeeklyRetention = 12 weeks. MonthlyRetention and YearlyRetention = 0 by default.
Set-AzSqlDatabaseBackupLongTermRetentionPolicy -ServerName $serverName -DatabaseName $dbName `
    -ResourceGroupName $resourceGroup -WeeklyRetention P12W

# create LTR policy with WeeklyRetention = 12 weeks, YearlyRetention = 5 years and WeekOfYear = 16 (week of April 15). MonthlyRetention = 0 by default.
Set-AzSqlDatabaseBackupLongTermRetentionPolicy -ServerName $serverName -DatabaseName $dbName `
    -ResourceGroupName $resourceGroup -WeeklyRetention P12W -YearlyRetention P5Y -WeekOfYear 16
# get the SQL server
$subId = "<subscriptionId>"
$serverName = "<serverName>"
$resourceGroup = "<resourceGroupName>"
$dbName = "<databaseName>"

Connect-AzAccount
Select-AzSubscription -SubscriptionId $subId

$server = Get-AzSqlServer -ServerName $serverName -ResourceGroupName $resourceGroup

# create LTR policy with WeeklyRetention = 12 weeks. MonthlyRetention and YearlyRetention = 0 by default.
Set-AzSqlDatabaseBackupLongTermRetentionPolicy -ServerName $serverName -DatabaseName $dbName `
    -ResourceGroupName $resourceGroup -WeeklyRetention P12W

# create LTR policy with WeeklyRetention = 12 weeks, YearlyRetention = 5 years and WeekOfYear = 16 (week of April 15). MonthlyRetention = 0 by default.
Set-AzSqlDatabaseBackupLongTermRetentionPolicy -ServerName $serverName -DatabaseName $dbName `
    -ResourceGroupName $resourceGroup -WeeklyRetention P12W -YearlyRetention P5Y -WeekOfYear 16
View backups and restore from a backup
View the backups that are retained for a specific database with an LTR policy, and restore from those backups.
Note
If the logical server has been deleted, use Azure CLI or PowerShell commands to view and restore LTR backups.
Portal
Azure CLI
PowerShell

In the Azure portal, navigate to your server and then selectBackups. To view the available LTR backups for a specific database, selectManageunder theAvailable LTR backupscolumn. A pane appears with a list of the available LTR backups for the selected database.
In the Azure portal, navigate to your server and then selectBackups. To view the available LTR backups for a specific database, selectManageunder theAvailable LTR backupscolumn. A pane appears with a list of the available LTR backups for the selected database.

In theAvailable LTR backupspane that appears, review the available backups. Select a backup to restore from.
In theAvailable LTR backupspane that appears, review the available backups. Select a backup to restore from.

To restore from an available LTR backup, select the backup from which you want to restore, and then selectRestore.
To restore from an available LTR backup, select the backup from which you want to restore, and then selectRestore.

Choose a name for your new database, then selectReview + Createto review the details of your Restore. SelectCreateto restore your database from the chosen backup.
Choose a name for your new database, then selectReview + Createto review the details of your Restore. SelectCreateto restore your database from the chosen backup.

On the toolbar, select the notification icon to view the status of the restore job.
On the toolbar, select the notification icon to view the status of the restore job.

When the restore job is completed, open theSQL databasespage to view the newly restored database.
When the restore job is completed, open theSQL databasespage to view the newly restored database.
Note
From here, you can connect to the restored database usingSQL Server Management Studioto perform needed tasks, such as toextract a bit of data from the restored database to copy into the existing database or to delete the existing database and rename the restored database to the existing database name.
View LTR policies
Run theaz sql db ltr-policy showcommand to view the LTR policy for a single database on your server.
az sql db ltr-policy show \
    --resource-group mygroup \
    --server myserver \
    --name mydb
az sql db ltr-policy show \
    --resource-group mygroup \
    --server myserver \
    --name mydb
View LTR backups
Use theaz sql db ltr-backup listcommand to list the LTR backups for a database. You can use this command to find thenameparameter for use in other commands.
name
az sql db ltr-backup list \
   --location eastus2 \
   --server myserver \
   --database mydb
az sql db ltr-backup list \
   --location eastus2 \
   --server myserver \
   --database mydb
Restore from LTR backups
Run theaz sql db ltr-backup restorecommand to restore your database from an LTR backup. You can runaz sql db ltr-backup showto get thebackup-id.
backup-id
Create a variable for thebackup-idwith the command `az sql db ltr-backup show' for future use.get_backup_id=$(az sql db ltr-backup show 
    --location eastus2 \
    --server myserver \
    --database mydb \
    --name "3214b3fb-fba9-43e7-96a3-09e35ffcb336;132292152080000000" \
    --query 'id' \
    --output tsv)
Create a variable for thebackup-idwith the command `az sql db ltr-backup show' for future use.
backup-id
get_backup_id=$(az sql db ltr-backup show 
    --location eastus2 \
    --server myserver \
    --database mydb \
    --name "3214b3fb-fba9-43e7-96a3-09e35ffcb336;132292152080000000" \
    --query 'id' \
    --output tsv)
get_backup_id=$(az sql db ltr-backup show 
    --location eastus2 \
    --server myserver \
    --database mydb \
    --name "3214b3fb-fba9-43e7-96a3-09e35ffcb336;132292152080000000" \
    --query 'id' \
    --output tsv)
Restore your database from the LTR backup.az sql db ltr-backup restore \
   --dest-database targetdb \
   --dest-server myserver \
   --dest-resource-group mygroup \
   --backup-id $get_backup_id
Restore your database from the LTR backup.
az sql db ltr-backup restore \
   --dest-database targetdb \
   --dest-server myserver \
   --dest-resource-group mygroup \
   --backup-id $get_backup_id
az sql db ltr-backup restore \
   --dest-database targetdb \
   --dest-server myserver \
   --dest-resource-group mygroup \
   --backup-id $get_backup_id
Important
To restore from an LTR backup after the server or resource group has been deleted, you must have permissions scoped to the server's subscription and that subscription must be active. You must also omit the optional -ResourceGroupName parameter.
Note
From here, you can connect to the restored database using SQL Server Management Studio to perform needed tasks, like database swapping. Seepoint in time restore.
View LTR policies
This example shows how to list the LTR policies within a server.
# get all LTR policies within a server
$ltrPolicies = Get-AzSqlDatabase -ResourceGroupName $resourceGroup -ServerName $serverName | `
    Get-AzSqlDatabaseLongTermRetentionPolicy

# get the LTR policy of a specific database
$ltrPolicies = Get-AzSqlDatabaseBackupLongTermRetentionPolicy -ServerName $serverName -DatabaseName $dbName `
    -ResourceGroupName $resourceGroup
# get all LTR policies within a server
$ltrPolicies = Get-AzSqlDatabase -ResourceGroupName $resourceGroup -ServerName $serverName | `
    Get-AzSqlDatabaseLongTermRetentionPolicy

# get the LTR policy of a specific database
$ltrPolicies = Get-AzSqlDatabaseBackupLongTermRetentionPolicy -ServerName $serverName -DatabaseName $dbName `
    -ResourceGroupName $resourceGroup
Clear an LTR policy
This example shows how to clear an LTR policy from a database.
Set-AzSqlDatabaseBackupLongTermRetentionPolicy -ServerName $serverName -DatabaseName $dbName `
    -ResourceGroupName $resourceGroup -RemovePolicy
Set-AzSqlDatabaseBackupLongTermRetentionPolicy -ServerName $serverName -DatabaseName $dbName `
    -ResourceGroupName $resourceGroup -RemovePolicy
View LTR backups
This example shows how to list the LTR backups within a server.
# get the list of all LTR backups in a specific Azure region
# backups are grouped by the logical database id, within each group they are ordered by the timestamp, the earliest backup first
$ltrBackups = Get-AzSqlDatabaseLongTermRetentionBackup -Location $server.Location

# get the list of LTR backups from the Azure region under the named server
$ltrBackups = Get-AzSqlDatabaseLongTermRetentionBackup -Location $server.Location -ServerName $serverName

# get the LTR backups for a specific database from the Azure region under the named server
$ltrBackups = Get-AzSqlDatabaseLongTermRetentionBackup -Location $server.Location -ServerName $serverName -DatabaseName $dbName

# list LTR backups only from live databases (you have option to choose All/Live/Deleted)
$ltrBackups = Get-AzSqlDatabaseLongTermRetentionBackup -Location $server.Location -DatabaseState Live

# only list the latest LTR backup for each database
$ltrBackups = Get-AzSqlDatabaseLongTermRetentionBackup -Location $server.Location -ServerName $serverName -OnlyLatestPerDatabase
# get the list of all LTR backups in a specific Azure region
# backups are grouped by the logical database id, within each group they are ordered by the timestamp, the earliest backup first
$ltrBackups = Get-AzSqlDatabaseLongTermRetentionBackup -Location $server.Location

# get the list of LTR backups from the Azure region under the named server
$ltrBackups = Get-AzSqlDatabaseLongTermRetentionBackup -Location $server.Location -ServerName $serverName

# get the LTR backups for a specific database from the Azure region under the named server
$ltrBackups = Get-AzSqlDatabaseLongTermRetentionBackup -Location $server.Location -ServerName $serverName -DatabaseName $dbName

# list LTR backups only from live databases (you have option to choose All/Live/Deleted)
$ltrBackups = Get-AzSqlDatabaseLongTermRetentionBackup -Location $server.Location -DatabaseState Live

# only list the latest LTR backup for each database
$ltrBackups = Get-AzSqlDatabaseLongTermRetentionBackup -Location $server.Location -ServerName $serverName -OnlyLatestPerDatabase
Restore from LTR backups
This example shows how to restore from an LTR backup. Note, this interface did not change but the resource ID parameter now requires the LTR backup resource ID.
# restore a specific LTR backup as an P1 database on the server $serverName of the resource group $resourceGroup
Restore-AzSqlDatabase -FromLongTermRetentionBackup -ResourceId $ltrBackup.ResourceId -ServerName $serverName -ResourceGroupName $resourceGroup `
    -TargetDatabaseName $dbName -ServiceObjectiveName P1
# restore a specific LTR backup as an P1 database on the server $serverName of the resource group $resourceGroup
Restore-AzSqlDatabase -FromLongTermRetentionBackup -ResourceId $ltrBackup.ResourceId -ServerName $serverName -ResourceGroupName $resourceGroup `
    -TargetDatabaseName $dbName -ServiceObjectiveName P1
Important
To restore from an LTR backup after the server or resource group has been deleted, you must have permissions scoped to the server's subscription and that subscription must be active. You must also omit the optional-ResourceGroupNameparameter.
-ResourceGroupName
If you are using LTR backups to meet compliance or other mission-critical requirements, consider conducting periodic recovery drills to verify that LTR backups can be restored, and that the restore results in an expected database state.
Note
From here, you can connect to the restored database using SQL Server Management Studio to perform needed tasks, such as to extract a bit of data from the restored database to copy into the existing database or to delete the existing database and rename the restored database to the existing database name. Seepoint in time restore.
Delete LTR backups
Delete backups that are retained for a specific database with an LTR policy.
Important
Deleting LTR backup is non-reversible. To delete an LTR backup after the server has been deleted you must have Subscription scope permission. You can set up notifications about each delete in Azure Monitor by filtering for operation 'Deletes a long term retention backup'. The activity log contains information on who and when made the request. SeeCreate activity log alertsfor detailed instructions.
Portal
Azure CLI
PowerShell
In the Azure portal, navigate to the logical server of the Azure SQL Database.
SelectBackups. To view the available LTR backups for a specific database, selectManageunder theAvailable LTR backupscolumn. A pane appears with a list of the available LTR backups for the selected database.
In theAvailable LTR backupspane that appears, review the available backups. Select a backup to delete. SelectDelete.
Useaz sql db ltr-backup listto find the backupname.
name
Run theaz sql db ltr-backup deletecommand to remove an LTR backup.az sql db ltr-backup delete \
   --location eastus2 \
   --server myserver \
   --database mydb \
   --name "3214b3fb-fba9-43e7-96a3-09e35ffcb336;132292152080000000"
az sql db ltr-backup delete \
   --location eastus2 \
   --server myserver \
   --database mydb \
   --name "3214b3fb-fba9-43e7-96a3-09e35ffcb336;132292152080000000"
az sql db ltr-backup delete \
   --location eastus2 \
   --server myserver \
   --database mydb \
   --name "3214b3fb-fba9-43e7-96a3-09e35ffcb336;132292152080000000"
This example shows how to delete an LTR backup from the list of backups.
Identify backups withView LTR backups.
UseRemove-AzSqlDatabaseLongTermRetentionBackupto delete a backup.# remove the earliest backup
$ltrBackup = $ltrBackups[0]
Remove-AzSqlDatabaseLongTermRetentionBackup -ResourceId $ltrBackup.ResourceId
Remove-AzSqlDatabaseLongTermRetentionBackup
# remove the earliest backup
$ltrBackup = $ltrBackups[0]
Remove-AzSqlDatabaseLongTermRetentionBackup -ResourceId $ltrBackup.ResourceId
# remove the earliest backup
$ltrBackup = $ltrBackups[0]
Remove-AzSqlDatabaseLongTermRetentionBackup -ResourceId $ltrBackup.ResourceId
Best practices
If you use LTR backups to meet compliance or other mission-critical requirements:
Verify the LTR backups are taken as per the configured policy by following steps outlined inview backupssection either using Portal, Azure CLI or PowerShell.
Consider conducting periodic recovery drills to verify that restore of LTR backups results in expected database state.
Related content
To learn about service-generated automatic backups, seeautomatic backups
To learn about long-term backup retention, seelong-term backup retention
Feedback
Was this page helpful?
Additional resources