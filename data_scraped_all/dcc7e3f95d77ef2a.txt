Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Export telemetry from Application Insights
Article
2023-02-14
5 contributors
In this article
Do you want to keep your telemetry for longer than the standard retention period? Or do you want to process it in some specialized way? Continuous export is ideal for this purpose. The events you see in the Application Insights portal can be exported to storage in Azure in JSON format. From there, you can download your data and write whatever code you need to process it.
Important
As of February 29, 2024, continuous export is retired.
When youmigrate to a workspace-based Application Insights resource, you must usediagnostic settingsfor exporting telemetry. Allworkspace-based Application Insights resourcesmust usediagnostic settings.
Diagnostic settings export might increase costs. For more information, seeDiagnostic settings-based export.
Before you set up continuous export, there are some alternatives you might want to consider:
TheExportbutton at the top of a metrics or search tab lets you transfer tables and charts to an Excel spreadsheet.
Log Analyticsprovides a powerful query language for telemetry. It can also export results.
If you're looking toexplore your data in Power BI, you can do that without using continuous export if you'vemigrated to a workspace-based resource.
TheData Access REST APIlets you access your telemetry programmatically.
You can also access setup forcontinuous export via PowerShell.
After continuous export copies your data to storage, where it can stay as long as you like, it's still available in Application Insights for the usualretention period.
Supported regions
Continuous export is supported in the following regions:
Southeast Asia
Canada Central
Central India
North Europe
UK South
Australia East
Japan East
Korea Central
France Central
East Asia
West US
Central US
East US 2
South Central US
West US 2
South Africa North
North Central US
Brazil South
Switzerland North
Australia Southeast
UK West
Germany West Central
Switzerland West
Australia Central 2
UAE Central
Brazil Southeast
Australia Central
UAE North
Norway East
Japan West
Note
Continuous export will continue to work for applications in East US and West Europe if the export was configured before February 23, 2021. New continuous export rules can't be configured on any application in East US or West Europe, no matter when the application was created.
Continuous export advanced storage configuration
Continuous exportdoesn't supportthe following Azure Storage features or configurations:
Use ofAzure Virtual Network/Azure Storage firewallswith Azure Blob Storage.
Azure Data Lake Storage Gen2.
Create a continuous export
Note
An application can't export more than 3 TB of data per day. If more than 3 TB per day is exported, the export will be disabled. To export without a limit, usediagnostic settings-based export.
In the Application Insights resource for your app underConfigureon the left, openContinuous exportand selectAdd.
In the Application Insights resource for your app underConfigureon the left, openContinuous exportand selectAdd.
Choose the telemetry data types you want to export.
Choose the telemetry data types you want to export.
Create or select anAzure Storage accountwhere you want to store the data. For more information on storage pricing options, see thePricing page.SelectAdd>Export destination>Storage account. Then either create a new store or choose an existing store.WarningBy default, the storage location will be set to the same geographical region as your Application Insights resource. If you store in a different region, you might incur transfer charges.
Create or select anAzure Storage accountwhere you want to store the data. For more information on storage pricing options, see thePricing page.
SelectAdd>Export destination>Storage account. Then either create a new store or choose an existing store.
Warning
By default, the storage location will be set to the same geographical region as your Application Insights resource. If you store in a different region, you might incur transfer charges.
Create or select a container in the storage.
Create or select a container in the storage.
Note
After you've created your export, newly ingested data will begin to flow to Azure Blob Storage. Continuous export only transmits new telemetry that's created or ingested after continuous export was enabled. Any data that existed prior to enabling continuous export won't be exported. There's no supported way to retroactively export previously created data by using continuous export.
There can be a delay of about an hour before data appears in the storage.
After the first export is finished, you'll find the following structure in your Blob Storage container. (This structure varies depending on the data you're collecting.)
Edit continuous export
SelectContinuous exportand select the storage account to edit.
Stop continuous export
To stop the export, selectDisable. When you selectEnableagain, the export restarts with new data. You won't get the data that arrived in the portal while export was disabled.
To stop the export permanently, delete it. Doing so doesn't delete your data from storage.
Can't add or change an export?
To add or change exports, you need Owner, Contributor, or Application Insights Contributor access rights.Learn about roles.
What events do you get?
The exported data is the raw telemetry we receive from your application with added location data from the client IP address.
Data that has been discarded bysamplingisn't included in the exported data.
Other calculated metrics aren't included. For example, we don't export average CPU utilization, but we do export the raw telemetry from which the average is computed.
The data also includes the results of anyavailability web teststhat you have set up.
Note
If your application sends a lot of data, the sampling feature might operate and send only a fraction of the generated telemetry.Learn more about sampling.
Inspect the data
You can inspect the storage directly in the portal. SelectHomeon the leftmost menu. At the top where it saysAzure services, selectStorage accounts. Select the storage account name, and on theOverviewpage selectServices>Blobs. Finally, select the container name.
To inspect Azure Storage in Visual Studio, selectView>Cloud Explorer. If you don't have that menu command, you need to install the Azure SDK. Open theNew Projectdialog, expandVisual C#/Cloud, and selectGet Microsoft Azure SDK for .NET.
When you open your blob store, you'll see a container with a set of blob files. You'll see the URI of each file derived from your Application Insights resource name, its instrumentation key, and telemetry type, date, and time. The resource name is all lowercase, and the instrumentation key omits dashes.

Note
On March 31, 2025, support for instrumentation key ingestion will end. Instrumentation key ingestion will continue to work, but we'll no longer provide updates or support for the feature.Transition to connection stringsto take advantage ofnew capabilities.
The date and time are UTC and are when the telemetry was deposited in the store, not the time it was generated. For this reason, if you write code to download the data, it can move linearly through the data.
Here's the form of the path:
$"{applicationName}_{instrumentationKey}/{type}/{blobDeliveryTimeUtc:yyyy-MM-dd}/{ blobDeliveryTimeUtc:HH}/{blobId}_{blobCreationTimeUtc:yyyyMMdd_HHmmss}.blob"
$"{applicationName}_{instrumentationKey}/{type}/{blobDeliveryTimeUtc:yyyy-MM-dd}/{ blobDeliveryTimeUtc:HH}/{blobId}_{blobCreationTimeUtc:yyyyMMdd_HHmmss}.blob"
Where:
blobCreationTimeUtcis the time when the blob was created in the internal staging storage.
blobCreationTimeUtc
blobDeliveryTimeUtcis the time when the blob is copied to the export destination storage.
blobDeliveryTimeUtc
Data format
The data is formatted so that:
Each blob is a text file that contains multiple\n-separated rows. It contains the telemetry processed over a time period of roughly half a minute.
Each blob is a text file that contains multiple\n-separated rows. It contains the telemetry processed over a time period of roughly half a minute.
\n
Each row represents a telemetry data point, such as a request or page view.
Each row represents a telemetry data point, such as a request or page view.
Each row is an unformatted JSON document. If you want to view the rows, open the blob in Visual Studio and selectEdit>Advanced>Format File.
Each row is an unformatted JSON document. If you want to view the rows, open the blob in Visual Studio and selectEdit>Advanced>Format File.

Time durations are in ticks, where 10 000 ticks = 1 ms. For example, these values show a time of 1 ms to send a request from the browser, 3 ms to receive it, and 1.8 s to process the page in the browser:
"sendRequest": {"value": 10000.0},
"receiveRequest": {"value": 30000.0},
"clientProcess": {"value": 17970000.0}
"sendRequest": {"value": 10000.0},
"receiveRequest": {"value": 30000.0},
"clientProcess": {"value": 17970000.0}
For a detailed data model reference for the property types and values, seeApplication Insights export data model.
Process the data
On a small scale, you can write some code to pull apart your data and read it into a spreadsheet. For example:
private IEnumerable<T> DeserializeMany<T>(string folderName)
{
   var files = Directory.EnumerateFiles(folderName, "*.blob", SearchOption.AllDirectories);
   foreach (var file in files)
   {
      using (var fileReader = File.OpenText(file))
      {
         string fileContent = fileReader.ReadToEnd();
         IEnumerable<string> entities = fileContent.Split('\n').Where(s => !string.IsNullOrWhiteSpace(s));
         foreach (var entity in entities)
         {
            yield return JsonConvert.DeserializeObject<T>(entity);
         }
      }
   }
}
private IEnumerable<T> DeserializeMany<T>(string folderName)
{
   var files = Directory.EnumerateFiles(folderName, "*.blob", SearchOption.AllDirectories);
   foreach (var file in files)
   {
      using (var fileReader = File.OpenText(file))
      {
         string fileContent = fileReader.ReadToEnd();
         IEnumerable<string> entities = fileContent.Split('\n').Where(s => !string.IsNullOrWhiteSpace(s));
         foreach (var entity in entities)
         {
            yield return JsonConvert.DeserializeObject<T>(entity);
         }
      }
   }
}
For a larger code sample, seeUsing a worker role.
Delete your old data
You're responsible for managing your storage capacity and deleting old data, if necessary.
Regenerate your storage key
If you change the key to your storage, continuous export will stop working. You'll see a notification in your Azure account.
Select theContinuous Exporttab and edit your export. Edit theExport Destinationvalue, but leave the same storage selected. SelectOKto confirm.
Continuous export will restart.
Export samples
For export samples, see:
Export to SQL using Stream Analytics
Stream Analytics sample 2
On larger scales, considerHDInsightHadoop clusters in the cloud. HDInsight provides various technologies for managing and analyzing big data. You can use it to process data that's been exported from Application Insights.
Frequently asked questions
This section provides answers to common questions.
Can I get a one-time download of a chart?
You can do that. At the top of the tab, selectExport Data.
I set up an export, but why is there no data in my store?
Did Application Insights receive any telemetry from your app since you set up the export? You'll only receive new data.
I tried to set up an export, but why was I denied access?
If the account is owned by your organization, you have to be a member of the Owners or Contributors groups.
Can I export straight to my own on-premises store?
No. Our export engine currently only works with Azure Storage at this time.
Is there any limit to the amount of data you put in my store?
No. We'll keep pushing data in until you delete the export. We'll stop if we hit the outer limits for Blob Storage, but that limit is huge. It's up to you to control how much storage you use.
How many blobs should I see in the storage?
For every data type you selected to export, a new blob is created every minute, if data is available.
For applications with high traffic, extra partition units are allocated. In this case, each unit creates a blob every minute.
I regenerated the key to my storage, or changed the name of the container, but why doesn't the export  work?
Edit the export and select theExport destinationtab. Leave the same storage selected as before, and selectOKto confirm. Export will restart. If the change was within the past few days, you won't lose data.
Can I pause the export?
Yes. SelectDisable.
Code samples
Stream Analytics sample
Export to SQL by using Stream Analytics
Detailed data model reference for property types and values
Diagnostic settings-based export
Diagnostic settings export is preferred because it provides extra features:
Azure Storage accounts with virtual networks, firewalls, and private links.
Export to Azure Event Hubs.
Diagnostic settings export further differs from continuous export in the following ways:
Updated schema.
Telemetry data is sent as it arrives instead of in batched uploads.
Important
Extra costs might be incurred because of an increase in calls to the destination, such as a storage account.
To migrate to diagnostic settings export:
Enable Diagnostic Settings on Classic Application Insights.
Configure your data export: SelectDiagnostic settings>Add diagnostic settingfrom within your Application Insights resource.
Verify your new data export is configured the same as you Continuous Export
Caution
If you want to store diagnostic logs in a Log Analytics workspace, there are two points to consider to avoid seeing duplicate data in Application Insights:
The destination can't be the same Log Analytics workspace that your Application Insights resource is based on.
The Application Insights user can't have access to both workspaces. Set the Log Analyticsaccess control modetoRequires workspace permissions. ThroughAzure role-based access control, ensure the user only has access to the Log Analytics workspace the Application Insights resource is based on.
These steps are necessary because Application Insights accesses telemetry across Application Insight resources, including Log Analytics workspaces, to provide complete end-to-end transaction operations and accurate application maps. Because diagnostic logs use the same table names, duplicate telemetry can be displayed if the user has access to multiple resources that contain the same data.
Application Insights Export Data Model
This table lists the properties of telemetry sent from theApplication InsightsSDKs to the portal.
You'll see these properties in data output fromContinuous Export.
They also appear in property filters inMetric ExplorerandDiagnostic Search.
Points to note:
[0]in these tables denotes a point in the path where you have to insert an index; but it isn't always 0.
[0]
Time durations are in tenths of a microsecond, so 10000000 == 1 second.
Dates and times are UTC, and are given in the ISO formatyyyy-MM-DDThh:mm:ss.sssZ
yyyy-MM-DDThh:mm:ss.sssZ
Example
// A server report about an HTTP request
{
  "request": [
    {
      "urlData": { // derived from 'url'
        "host": "contoso.org",
        "base": "/",
        "hashTag": ""
      },
      "responseCode": 200, // Sent to client
      "success": true, // Default == responseCode<400
      // Request id becomes the operation id of child events
      "id": "fCOhCdCnZ9I=",  
      "name": "GET Home/Index",
      "count": 1, // 100% / sampling rate
      "durationMetric": {
        "value": 1046804.0, // 10000000 == 1 second
        // Currently the following fields are redundant:
        "count": 1.0,
        "min": 1046804.0,
        "max": 1046804.0,
        "stdDev": 0.0,
        "sampledValue": 1046804.0
      },
      "url": "/"
    }
  ],
  "internal": {
    "data": {
      "id": "7f156650-ef4c-11e5-8453-3f984b167d05",
      "documentVersion": "1.61"
    }
  },
  "context": {
    "device": { // client browser
      "type": "PC",
      "screenResolution": { },
      "roleInstance": "WFWEB14B.fabrikam.net"
    },
    "application": { },
    "location": { // derived from client ip
      "continent": "North America",
      "country": "United States",
      // last octagon is anonymized to 0 at portal:
      "clientip": "168.62.177.0",
      "province": "",
      "city": ""
    },
    "data": {
      "isSynthetic": true, // we identified source as a bot
      // percentage of generated data sent to portal:
      "samplingRate": 100.0,
      "eventTime": "2016-03-21T10:05:45.7334717Z" // UTC
    },
    "user": {
      "isAuthenticated": false,
      "anonId": "us-tx-sn1-azr", // bot agent id
      "anonAcquisitionDate": "0001-01-01T00:00:00Z",
      "authAcquisitionDate": "0001-01-01T00:00:00Z",
      "accountAcquisitionDate": "0001-01-01T00:00:00Z"
    },
    "operation": {
      "id": "fCOhCdCnZ9I=",
      "parentId": "fCOhCdCnZ9I=",
      "name": "GET Home/Index"
    },
    "cloud": { },
    "serverDevice": { },
    "custom": { // set by custom fields of track calls
      "dimensions": [ ],
      "metrics": [ ]
    },
    "session": {
      "id": "65504c10-44a6-489e-b9dc-94184eb00d86",
      "isFirst": true
    }
  }
}
// A server report about an HTTP request
{
  "request": [
    {
      "urlData": { // derived from 'url'
        "host": "contoso.org",
        "base": "/",
        "hashTag": ""
      },
      "responseCode": 200, // Sent to client
      "success": true, // Default == responseCode<400
      // Request id becomes the operation id of child events
      "id": "fCOhCdCnZ9I=",  
      "name": "GET Home/Index",
      "count": 1, // 100% / sampling rate
      "durationMetric": {
        "value": 1046804.0, // 10000000 == 1 second
        // Currently the following fields are redundant:
        "count": 1.0,
        "min": 1046804.0,
        "max": 1046804.0,
        "stdDev": 0.0,
        "sampledValue": 1046804.0
      },
      "url": "/"
    }
  ],
  "internal": {
    "data": {
      "id": "7f156650-ef4c-11e5-8453-3f984b167d05",
      "documentVersion": "1.61"
    }
  },
  "context": {
    "device": { // client browser
      "type": "PC",
      "screenResolution": { },
      "roleInstance": "WFWEB14B.fabrikam.net"
    },
    "application": { },
    "location": { // derived from client ip
      "continent": "North America",
      "country": "United States",
      // last octagon is anonymized to 0 at portal:
      "clientip": "168.62.177.0",
      "province": "",
      "city": ""
    },
    "data": {
      "isSynthetic": true, // we identified source as a bot
      // percentage of generated data sent to portal:
      "samplingRate": 100.0,
      "eventTime": "2016-03-21T10:05:45.7334717Z" // UTC
    },
    "user": {
      "isAuthenticated": false,
      "anonId": "us-tx-sn1-azr", // bot agent id
      "anonAcquisitionDate": "0001-01-01T00:00:00Z",
      "authAcquisitionDate": "0001-01-01T00:00:00Z",
      "accountAcquisitionDate": "0001-01-01T00:00:00Z"
    },
    "operation": {
      "id": "fCOhCdCnZ9I=",
      "parentId": "fCOhCdCnZ9I=",
      "name": "GET Home/Index"
    },
    "cloud": { },
    "serverDevice": { },
    "custom": { // set by custom fields of track calls
      "dimensions": [ ],
      "metrics": [ ]
    },
    "session": {
      "id": "65504c10-44a6-489e-b9dc-94184eb00d86",
      "isFirst": true
    }
  }
}
Context
All types of telemetry are accompanied by a context section. Not all of these fields are transmitted with every data point.
clientip
clientip
operation id
request id
Id
Unique id
Events
Custom events generated byTrackEvent().
Exceptions
Reportsexceptionsin the server and in the browser.
id
Trace Messages
Sent byTrackTrace, and by thelogging adapters.
Remote dependency
Sent by TrackDependency. Used to report performance and usage ofcalls to dependenciesin the server, and AJAX calls in the browser.
id
Requests
Sent byTrackRequest. The standard modules use this to reports server response time, measured at the server.
id
Operation id
Page View Performance
Sent by the browser. Measures the time to process a page, from user initiating the request to display complete (excluding async AJAX calls).
Context values show client OS and browser version.
Page Views
Sent by trackPageView() orstopTrackPage
Availability
Reportsavailability web tests.
Metrics
Generated by TrackMetric().
The metric value is found in context.custom.metrics[0]
For example:
{
  "metric": [ ],
  "context": {
  ...
    "custom": {
      "dimensions": [
        { "ProcessId": "4068" }
      ],
      "metrics": [
        {
          "dispatchRate": {
            "value": 0.001295,
            "count": 1.0,
            "min": 0.001295,
            "max": 0.001295,
            "stdDev": 0.0,
            "sampledValue": 0.001295,
            "sum": 0.001295
          }
        }
      ]  
    }
  }
}
{
  "metric": [ ],
  "context": {
  ...
    "custom": {
      "dimensions": [
        { "ProcessId": "4068" }
      ],
      "metrics": [
        {
          "dispatchRate": {
            "value": 0.001295,
            "count": 1.0,
            "min": 0.001295,
            "max": 0.001295,
            "stdDev": 0.0,
            "sampledValue": 0.001295,
            "sum": 0.001295
          }
        }
      ]  
    }
  }
}
About metric values
Metric values, both in metric reports and elsewhere, are reported with a standard object structure. For example:
"durationMetric": {
  "name": "contoso.org",
  "type": "Aggregation",
  "value": 468.71603053650279,
  "count": 1.0,
  "min": 468.71603053650279,
  "max": 468.71603053650279,
  "stdDev": 0.0,
  "sampledValue": 468.71603053650279
}
"durationMetric": {
  "name": "contoso.org",
  "type": "Aggregation",
  "value": 468.71603053650279,
  "count": 1.0,
  "min": 468.71603053650279,
  "max": 468.71603053650279,
  "stdDev": 0.0,
  "sampledValue": 468.71603053650279
}
Currently - though this might change in the future - in all values reported from the standard SDK modules,count==1and only thenameandvaluefields are useful. The only case where they would be different would be if you write your own TrackMetric calls in which you set the other parameters.
count==1
name
value
The purpose of the other fields is to allow metrics to be aggregated in the SDK, to reduce traffic to the portal. For example, you could average several successive readings before sending each metric report. Then you would calculate the min, max, standard deviation and aggregate value (sum or average) and set count to the number of readings represented by the report.
In the tables above, we have omitted the rarely used fields count, min, max, stdDev, and sampledValue.
Instead of pre-aggregating metrics, you can usesamplingif you need to reduce the volume of telemetry.
Except where otherwise noted, durations are represented in tenths of a microsecond, so that 10000000.0 means 1 second.
See also
Application Insights
Continuous Export
Code samples
Additional resources