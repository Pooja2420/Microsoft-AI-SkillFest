Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Use a service principal with Azure Kubernetes Service (AKS)
Article
2024-08-01
34 contributors
In this article
An AKS cluster requires either aMicrosoft Entra service principalor amanaged identityto dynamically create and manage other Azure resources, such as an Azure Load Balancer or Azure Container Registry (ACR).
For optimal security and ease of use, Microsoft recommends using managed identities rather than service principals to authorize access from an AKS cluster to other resources in Azure. A managed identity is a special type of service principal that can be used to obtain Microsoft Entra credentials without the need to manage and secure credentials. For more information about using a managed identity with your cluster, seeUse a managed identity in AKS.
This article shows you how to create and use a service principal with your AKS clusters.
Before you begin
To create a Microsoft Entra service principal, you must have permissions to register an application with your Microsoft Entra tenant and to assign the application to a role in your subscription. If you don't have the necessary permissions, you need to ask your Microsoft Entra ID or subscription administrator to assign the necessary permissions or pre-create a service principal for use with your AKS cluster.
If you're using a service principal from a different Microsoft Entra tenant, there are other considerations around the permissions available when you deploy the cluster. You may not have the appropriate permissions to read and write directory information. For more information, seeWhat are the default user permissions in Microsoft Entra ID?
Prerequisites
If using Azure CLI, you need Azure CLI version 2.0.59 or later. Runaz --versionto find the version. If you need to install or upgrade, seeInstall Azure CLI.
az --version
If using Azure PowerShell, you need Azure PowerShell version 5.0.0 or later. RunGet-InstalledModule -Name Azto find the version. If you need to install or upgrade, seeInstall the Azure Az PowerShell module.
Get-InstalledModule -Name Az
Create a service principal
Create a service principal before you create your cluster.
Azure CLI
Azure PowerShell
Create a service principal using theaz ad sp create-for-rbaccommand.az ad sp create-for-rbac --name myAKSClusterServicePrincipalYour output should be similar to the following example output:{
  "appId": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
  "displayName": "myAKSClusterServicePrincipal",
  "name": "http://myAKSClusterServicePrincipal",
  "password": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
  "tenant": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
}
Create a service principal using theaz ad sp create-for-rbaccommand.
az ad sp create-for-rbac
az ad sp create-for-rbac --name myAKSClusterServicePrincipal
az ad sp create-for-rbac --name myAKSClusterServicePrincipal
Your output should be similar to the following example output:
{
  "appId": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
  "displayName": "myAKSClusterServicePrincipal",
  "name": "http://myAKSClusterServicePrincipal",
  "password": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
  "tenant": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
}
{
  "appId": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
  "displayName": "myAKSClusterServicePrincipal",
  "name": "http://myAKSClusterServicePrincipal",
  "password": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
  "tenant": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
}
Copy the values forappIdandpasswordfrom the output. You use these when creating an AKS cluster in the next section.
Copy the values forappIdandpasswordfrom the output. You use these when creating an AKS cluster in the next section.
appId
password
Create a service principal using theNew-AzADServicePrincipalcommand.New-AzADServicePrincipal -DisplayName myAKSClusterServicePrincipal -OutVariable spYour output should be similar to the following example output:Secret                : System.Security.SecureString
ServicePrincipalNames : {xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx, http://myAKSClusterServicePrincipal}
ApplicationId         : xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
ObjectType            : ServicePrincipal
DisplayName           : myAKSClusterServicePrincipal
Id                    : xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
Type                  :The values are stored in a variable that you use when creating an AKS cluster in the next section.
Create a service principal using theNew-AzADServicePrincipalcommand.
New-AzADServicePrincipal
New-AzADServicePrincipal -DisplayName myAKSClusterServicePrincipal -OutVariable sp
New-AzADServicePrincipal -DisplayName myAKSClusterServicePrincipal -OutVariable sp
Your output should be similar to the following example output:
Secret                : System.Security.SecureString
ServicePrincipalNames : {xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx, http://myAKSClusterServicePrincipal}
ApplicationId         : xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
ObjectType            : ServicePrincipal
DisplayName           : myAKSClusterServicePrincipal
Id                    : xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
Type                  :
Secret                : System.Security.SecureString
ServicePrincipalNames : {xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx, http://myAKSClusterServicePrincipal}
ApplicationId         : xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
ObjectType            : ServicePrincipal
DisplayName           : myAKSClusterServicePrincipal
Id                    : xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
Type                  :
The values are stored in a variable that you use when creating an AKS cluster in the next section.
Decrypt the value stored in theSecretsecure string using the following command.$BSTR = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($sp.Secret)
[System.Runtime.InteropServices.Marshal]::PtrToStringAuto($BSTR)
Decrypt the value stored in theSecretsecure string using the following command.
$BSTR = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($sp.Secret)
[System.Runtime.InteropServices.Marshal]::PtrToStringAuto($BSTR)
$BSTR = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($sp.Secret)
[System.Runtime.InteropServices.Marshal]::PtrToStringAuto($BSTR)
Specify a service principal for an AKS cluster
Azure CLI
Azure PowerShell
Use an existing service principal for a new AKS cluster using theaz aks createcommand and use the--service-principaland--client-secretparameters to specify theappIdandpasswordfrom the output you received the previous section.az aks create \
    --resource-group myResourceGroup \
    --name myAKSCluster \
    --service-principal <appId> \
    --client-secret <password> \
    --generate-ssh-keysNoteIf you're using an existing service principal with customized secret, make sure the secret isn't longer than 190 bytes.
Use an existing service principal for a new AKS cluster using theaz aks createcommand and use the--service-principaland--client-secretparameters to specify theappIdandpasswordfrom the output you received the previous section.
az aks create
--service-principal
--client-secret
appId
password
az aks create \
    --resource-group myResourceGroup \
    --name myAKSCluster \
    --service-principal <appId> \
    --client-secret <password> \
    --generate-ssh-keys
az aks create \
    --resource-group myResourceGroup \
    --name myAKSCluster \
    --service-principal <appId> \
    --client-secret <password> \
    --generate-ssh-keys
Note
If you're using an existing service principal with customized secret, make sure the secret isn't longer than 190 bytes.
Convert the service principalApplicationIdandSecretto aPSCredentialobject using the following command.$Cred = New-Object -TypeName System.Management.Automation.PSCredential ($sp.ApplicationId, $sp.Secret)
Convert the service principalApplicationIdandSecretto aPSCredentialobject using the following command.
ApplicationId
Secret
$Cred = New-Object -TypeName System.Management.Automation.PSCredential ($sp.ApplicationId, $sp.Secret)
$Cred = New-Object -TypeName System.Management.Automation.PSCredential ($sp.ApplicationId, $sp.Secret)
Use an existing service principal for a new AKS cluster using theNew-AzAksClustercommand and specify theServicePrincipalIdAndSecretparameter with the previously createdPSCredentialobject as its value.New-AzAksCluster -ResourceGroupName myResourceGroup -Name myAKSCluster -ServicePrincipalIdAndSecret $CredNoteIf you're using an existing service principal with customized secret, make sure the secret isn't longer than 190 bytes.
Use an existing service principal for a new AKS cluster using theNew-AzAksClustercommand and specify theServicePrincipalIdAndSecretparameter with the previously createdPSCredentialobject as its value.
New-AzAksCluster
ServicePrincipalIdAndSecret
New-AzAksCluster -ResourceGroupName myResourceGroup -Name myAKSCluster -ServicePrincipalIdAndSecret $Cred
New-AzAksCluster -ResourceGroupName myResourceGroup -Name myAKSCluster -ServicePrincipalIdAndSecret $Cred
Note
If you're using an existing service principal with customized secret, make sure the secret isn't longer than 190 bytes.
Delegate access to other Azure resources
You can use the service principal for the AKS cluster to access other resources. For example, if you want to deploy your AKS cluster into an existing Azure virtual network subnet, connect to Azure Container Registry (ACR), or access keys or secrets in a key vault from your cluster, then you need to delegate access to those resources to the service principal. To delegate access, assign an Azure role-based access control (Azure RBAC) role to the service principal.
Important
Permissions granted to a service principal associated with a cluster may take up 60 minutes to propagate.
Azure CLI
Azure PowerShell
Create a role assignment using theaz role assignment createcommand. Provide the value of the service principal's appID for theappIdparameter. Specify the scope for the role assignment, such as a resource group or virtual network resource. The role assignment determines what permissions the service principal has on the resource and at what scope.For example, to assign the service principal permissions to access secrets in a key vault, you might use the following command:az role assignment create \
    --assignee <appId> \
    --scope "/subscriptions/<subscription-id>/resourceGroups/<resource-group>/providers/Microsoft.KeyVault/vaults/<vault-name>" \
    --role "Key Vault Secrets User"NoteThe--scopefor a resource needs to be a full resource ID, such as/subscriptions/<guid>/resourceGroups/myResourceGroupor/subscriptions/<guid>/resourceGroups/myResourceGroupVnet/providers/Microsoft.Network/virtualNetworks/myVnet.
Create a role assignment using theaz role assignment createcommand. Provide the value of the service principal's appID for theappIdparameter. Specify the scope for the role assignment, such as a resource group or virtual network resource. The role assignment determines what permissions the service principal has on the resource and at what scope.
az role assignment create
appId
For example, to assign the service principal permissions to access secrets in a key vault, you might use the following command:
az role assignment create \
    --assignee <appId> \
    --scope "/subscriptions/<subscription-id>/resourceGroups/<resource-group>/providers/Microsoft.KeyVault/vaults/<vault-name>" \
    --role "Key Vault Secrets User"
az role assignment create \
    --assignee <appId> \
    --scope "/subscriptions/<subscription-id>/resourceGroups/<resource-group>/providers/Microsoft.KeyVault/vaults/<vault-name>" \
    --role "Key Vault Secrets User"
Note
The--scopefor a resource needs to be a full resource ID, such as/subscriptions/<guid>/resourceGroups/myResourceGroupor/subscriptions/<guid>/resourceGroups/myResourceGroupVnet/providers/Microsoft.Network/virtualNetworks/myVnet.
--scope
Create a role assignment using theNew-AzRoleAssignmentcommand. Provide the value of the service principal's appID for theApplicationIdparameter. Specify the scope for the role assignment, such as a resource group or virtual network resource. The role assignment determines what permissions the service principal has on the resource and at what scope.For example, to assign the service principal permissions to access secrets in a key vault, you might use the following command:New-AzRoleAssignment -ApplicationId <ApplicationId> `
    -Scope "/subscriptions/<subscription-id>/resourceGroups/<resource-group>/providers/Microsoft.KeyVault/vaults/<vault-name>" `
    -RoleDefinitionName "Key Vault Secrets User"NoteTheScopefor a resource needs to be a full resource ID, such as/subscriptions/<guid>/resourceGroups/myResourceGroupor/subscriptions/<guid>/resourceGroups/myResourceGroupVnet/providers/Microsoft.Network/virtualNetworks/myVnet
Create a role assignment using theNew-AzRoleAssignmentcommand. Provide the value of the service principal's appID for theApplicationIdparameter. Specify the scope for the role assignment, such as a resource group or virtual network resource. The role assignment determines what permissions the service principal has on the resource and at what scope.
New-AzRoleAssignment
ApplicationId
For example, to assign the service principal permissions to access secrets in a key vault, you might use the following command:
New-AzRoleAssignment -ApplicationId <ApplicationId> `
    -Scope "/subscriptions/<subscription-id>/resourceGroups/<resource-group>/providers/Microsoft.KeyVault/vaults/<vault-name>" `
    -RoleDefinitionName "Key Vault Secrets User"
New-AzRoleAssignment -ApplicationId <ApplicationId> `
    -Scope "/subscriptions/<subscription-id>/resourceGroups/<resource-group>/providers/Microsoft.KeyVault/vaults/<vault-name>" `
    -RoleDefinitionName "Key Vault Secrets User"
Note
TheScopefor a resource needs to be a full resource ID, such as/subscriptions/<guid>/resourceGroups/myResourceGroupor/subscriptions/<guid>/resourceGroups/myResourceGroupVnet/providers/Microsoft.Network/virtualNetworks/myVnet
Scope
The following sections detail common delegations that you may need to assign to a service principal.
Azure Container Registry
Azure CLI
Azure PowerShell
If you use Azure Container Registry (ACR) as your container image store, you need to grant permissions to the service principal for your AKS cluster to read and pull images. We recommend using theaz aks createoraz aks updatecommand to integrate with a registry and assign the appropriate role for the service principal. For detailed steps, seeAuthenticate with Azure Container Registry from Azure Kubernetes Service.
az aks create
az aks update
If you use Azure Container Registry (ACR) as your container image store, you need to grant permissions to the service principal for your AKS cluster to read and pull images. We recommend using theNew-AzAksClusterorSet-AzAksClustercommand to integrate with a registry and assign the appropriate role for the service principal. For detailed steps, seeAuthenticate with Azure Container Registry from Azure Kubernetes Service.
New-AzAksCluster
Set-AzAksCluster
Networking
You may use advanced networking where the virtual network and subnet or public IP addresses are in another resource group. Assign theNetwork Contributorbuilt-in role on the subnet within the virtual network. Alternatively, you can create acustom rolewith permissions to access the network resources in that resource group. For more information, seeAKS service permissions.
Storage
If you need to access existing disk resources in another resource group, assign one of the following sets of role permissions:
Create acustom roleand define theMicrosoft.Compute/disks/readandMicrosoft.Compute/disks/writerole permissions, or
Assign theVirtual Machine Contributorbuilt-in role on the resource group.
Azure Container Instances
If you use Virtual Kubelet to integrate with AKS and choose to run Azure Container Instances (ACI) in resource group separate from the AKS cluster, the AKS cluster service principal must be grantedContributorpermissions on the ACI resource group.
Other considerations
Azure CLI
Azure PowerShell
When using AKS and a Microsoft Entra service principal, consider the following:
The service principal for Kubernetes is a part of the cluster configuration, but don't use this identity to deploy the cluster.
By default, the service principal credentials are valid for one year. You canupdate or rotate the service principal credentialsat any time.
Every service principal is associated with a Microsoft Entra application. You can associate the service principal for a Kubernetes cluster with any valid Microsoft Entra application name (for example:https://www.contoso.org/example). The URL for the application doesn't have to be a real endpoint.
When you specify the service principalClient ID, use the value of theappId.
appId
On the agent node VMs in the Kubernetes cluster, the service principal credentials are stored in the/etc/kubernetes/azure.jsonfile.
/etc/kubernetes/azure.json
When you delete an AKS cluster that was created using theaz aks createcommand, the service principal created isn't automatically deleted.To delete the service principal, query for your cluster'sservicePrincipalProfile.clientIdand delete it using theaz ad sp deletecommand. Replace the values for the-gparameter for the resource group name and-nparameter for the cluster name:az ad sp delete --id $(az aks show \
  --resource-group myResourceGroup \
  --name myAKSCluster \
  --query servicePrincipalProfile.clientId \
  --output tsv)
az aks create
To delete the service principal, query for your cluster'sservicePrincipalProfile.clientIdand delete it using theaz ad sp deletecommand. Replace the values for the-gparameter for the resource group name and-nparameter for the cluster name:az ad sp delete --id $(az aks show \
  --resource-group myResourceGroup \
  --name myAKSCluster \
  --query servicePrincipalProfile.clientId \
  --output tsv)
To delete the service principal, query for your cluster'sservicePrincipalProfile.clientIdand delete it using theaz ad sp deletecommand. Replace the values for the-gparameter for the resource group name and-nparameter for the cluster name:
az ad sp delete
-g
-n
az ad sp delete --id $(az aks show \
  --resource-group myResourceGroup \
  --name myAKSCluster \
  --query servicePrincipalProfile.clientId \
  --output tsv)
az ad sp delete --id $(az aks show \
  --resource-group myResourceGroup \
  --name myAKSCluster \
  --query servicePrincipalProfile.clientId \
  --output tsv)
When using AKS and a Microsoft Entra service principal, consider the following:
The service principal for Kubernetes is a part of the cluster configuration, but don't use this identity to deploy the cluster.
By default, the service principal credentials are valid for one year. You canupdate or rotate the service principal credentialsat any time.
Every service principal is associated with a Microsoft Entra application. You can associate the service principal for a Kubernetes cluster with any valid Microsoft Entra application name (for example:https://www.contoso.org/example). The URL for the application doesn't have to be a real endpoint.
When you specify the service principalClient ID, use the value of theApplicationId.
ApplicationId
On the agent node VMs in the Kubernetes cluster, the service principal credentials are stored in the/etc/kubernetes/azure.jsonfile.
/etc/kubernetes/azure.json
When you delete an AKS cluster that was created using theNew-AzAksCluster, the service principal created isn't automatically deleted.To delete the service principal, query for your cluster'sServicePrincipalProfile.ClientIdand delete it using theRemove-AzADServicePrincipalcommand. Replace the values for the-ResourceGroupNameparameter for the resource group name and-Nameparameter for the cluster name:$ClientId = (Get-AzAksCluster -ResourceGroupName myResourceGroup -Name myAKSCluster ).ServicePrincipalProfile.ClientId
Remove-AzADServicePrincipal -ApplicationId $ClientId
New-AzAksCluster
To delete the service principal, query for your cluster'sServicePrincipalProfile.ClientIdand delete it using theRemove-AzADServicePrincipalcommand. Replace the values for the-ResourceGroupNameparameter for the resource group name and-Nameparameter for the cluster name:$ClientId = (Get-AzAksCluster -ResourceGroupName myResourceGroup -Name myAKSCluster ).ServicePrincipalProfile.ClientId
Remove-AzADServicePrincipal -ApplicationId $ClientId
To delete the service principal, query for your cluster'sServicePrincipalProfile.ClientIdand delete it using theRemove-AzADServicePrincipalcommand. Replace the values for the-ResourceGroupNameparameter for the resource group name and-Nameparameter for the cluster name:
Remove-AzADServicePrincipal
-ResourceGroupName
-Name
$ClientId = (Get-AzAksCluster -ResourceGroupName myResourceGroup -Name myAKSCluster ).ServicePrincipalProfile.ClientId
Remove-AzADServicePrincipal -ApplicationId $ClientId
$ClientId = (Get-AzAksCluster -ResourceGroupName myResourceGroup -Name myAKSCluster ).ServicePrincipalProfile.ClientId
Remove-AzADServicePrincipal -ApplicationId $ClientId
Troubleshoot
Azure CLI
Azure PowerShell
Azure CLI caches the service principal credentials for AKS clusters. If these credentials expire, you can encounter errors during AKS cluster deployment. If you run theaz aks createcommand and receive an error message similar to the following, it may indicate a problem with the cached service principal credentials:
az aks create
Operation failed with status: 'Bad Request'.
Details: The credentials in ServicePrincipalProfile were invalid. Please see https://aka.ms/aks-sp-help for more details.
(Details: adal: Refresh request failed. Status Code = '401'.
Operation failed with status: 'Bad Request'.
Details: The credentials in ServicePrincipalProfile were invalid. Please see https://aka.ms/aks-sp-help for more details.
(Details: adal: Refresh request failed. Status Code = '401'.
You can check the expiration date of your service principal credentials using theaz ad app credential listcommand with the"[].endDateTime"query.
az ad app credential list
"[].endDateTime"
az ad app credential list \
    --id <app-id> \
    --query "[].endDateTime" \
    --output tsv
az ad app credential list \
    --id <app-id> \
    --query "[].endDateTime" \
    --output tsv
The default expiration time for the service principal credentials is one year. If your credentials are older than one year, you canreset the existing credentialsorcreate a new service principal.
General Azure CLI troubleshooting
The Azure CLI can run in several shell environments, but with slight format variations.  If you have unexpected results with Azure CLI commands, seeHow to use the Azure CLI successfully.
Azure PowerShell caches the service principal credentials for AKS clusters. If these credentials expire, you encounter errors during AKS cluster deployment. If you run theNew-AzAksClustercommand and receive an error message similar to the following, it may indicate a problem with the cached service principal credentials:
New-AzAksCluster
Operation failed with status: 'Bad Request'.
Details: The credentials in ServicePrincipalProfile were invalid. Please see https://aka.ms/aks-sp-help for more details.
(Details: adal: Refresh request failed. Status Code = '401'.
Operation failed with status: 'Bad Request'.
Details: The credentials in ServicePrincipalProfile were invalid. Please see https://aka.ms/aks-sp-help for more details.
(Details: adal: Refresh request failed. Status Code = '401'.
You can check the expiration date of your service principal credentials using theGet-AzADAppCredentialcommand. The output shows you theStartDateTimeof your credentials.
StartDateTime
Get-AzADAppCredential -ApplicationId <ApplicationId>
Get-AzADAppCredential -ApplicationId <ApplicationId>
The default expiration time for the service principal credentials is one year. If your credentials are older than one year, you canreset the existing credentialsorcreate a new service principal.
Next steps
For more information about Microsoft Entra service principals, seeApplication and service principal objects.
For information on how to update the credentials, seeUpdate or rotate the credentials for a service principal in AKS.
Azure Kubernetes Service

Additional resources