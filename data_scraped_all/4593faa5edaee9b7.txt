Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Run your functions from a package file in Azure
Article
2025-01-21
18 contributors
In this article
In Azure, you can run your functions directly from a deployment package file in your function app. The other option is to deploy your files in thec:\home\site\wwwroot(Windows) or/home/site/wwwroot(Linux) directory of your function app.
c:\home\site\wwwroot
/home/site/wwwroot
This article describes the benefits of running your functions from a package. It also shows how to enable this functionality in your function app.
Benefits of running from a package file
There are several benefits to running functions from a package file:
Reduces the risk of file copy locking issues.
Can be deployed to a production app (with restart).
Verifies the files that are running in your app.
Improves the performance ofAzure Resource Manager deployments.
Reduces cold-start times, particularly for JavaScript functions with large npm package trees.
For more information, seethis announcement.
Enable functions to run from a package
Function apps on theFlex Consumptionhosting plan run from a package by default. No special configuration needs to be done.
To enable your function app to run from a package on theConsumption,Elastic Premium, andDedicated (App Service)hosting plans, add aWEBSITE_RUN_FROM_PACKAGEapp setting to your function app. TheWEBSITE_RUN_FROM_PACKAGEapp setting can have one of the following values:
WEBSITE_RUN_FROM_PACKAGE
WEBSITE_RUN_FROM_PACKAGE
1
c:\home\data\SitePackages
/home/data/SitePackages
<URL>
The following table indicates the recommendedWEBSITE_RUN_FROM_PACKAGEvalues for deployment to a specific operating system and hosting plan:
WEBSITE_RUN_FROM_PACKAGE
1
<URL>
1
1
1
1
General considerations
Do not add theWEBSITE_RUN_FROM_PACKAGEapp setting to apps on theFlex Consumptionplan.
WEBSITE_RUN_FROM_PACKAGE
The package file must be .zip formatted. Tar and gzip formats aren't supported.
Zip deploymentis recommended.
When deploying your function app to Windows, you should setWEBSITE_RUN_FROM_PACKAGEto1and publish with zip deployment.
WEBSITE_RUN_FROM_PACKAGE
1
When you run from a package, thewwwrootfolder is read-only and you receive an error if you write files to this directory. Files are also read-only in the Azure portal.
wwwroot
The maximum size for a deployment package file is 1 GB.The deployment uses temporary storage when unpacking your project files. This means that your function app must have enough available temporary storage space to hold the contents of your package. Keep in mind that the temporary storage limit for a Consumption plan is500 MB per plan. To learn about how to troubleshoot issues with temporary storage, seeHow to troubleshoot temporary storage on Azure App Service.
The deployment uses temporary storage when unpacking your project files. This means that your function app must have enough available temporary storage space to hold the contents of your package. Keep in mind that the temporary storage limit for a Consumption plan is500 MB per plan. To learn about how to troubleshoot issues with temporary storage, seeHow to troubleshoot temporary storage on Azure App Service.
You can't use the local cache when running from a deployment package.
If your project needs to use remote build, don't use theWEBSITE_RUN_FROM_PACKAGEapp setting. Instead, add theSCM_DO_BUILD_DURING_DEPLOYMENT=truedeployment customization app setting. For Linux, also add theENABLE_ORYX_BUILD=truesetting. For more information, seeRemote build.
WEBSITE_RUN_FROM_PACKAGE
SCM_DO_BUILD_DURING_DEPLOYMENT=true
ENABLE_ORYX_BUILD=true
Note
TheWEBSITE_RUN_FROM_PACKAGEapp setting does not work with MSDeploy as described inMSDeploy VS. ZipDeploy. You will receive an error during deployment, such asARM-MSDeploy Deploy Failed. To resolve this error, change/MSDeployto/ZipDeploy.
WEBSITE_RUN_FROM_PACKAGE
ARM-MSDeploy Deploy Failed
/MSDeploy
/ZipDeploy
Add the WEBSITE_RUN_FROM_PACKAGE setting
There are several ways that you can add, update, and delete function app settings:
In the Azure portal.
By using the Azure CLI.
By using Azure PowerShell.
Changes to function app settings require your function app to be restarted.
Creating the zip archive
The zip archive you deploy must contain all of the files needed to run your function app. You can manually create a zip archive from the contents of a Functions project folder using built-in .zip compression functionality or third-party tools.
The archive must include thehost.jsonfile at the root of the extracted folder. The selected language stack for the function app creates additional requirements:
.NET (isolated worker model)
.NET (in-process model)
Java
JavaScript
TypeScript
PowerShell
Python
Important
For languages that generate compiled output for deployment, make sure to compress the contents of the output folder you plan to publish and not the entire project folder. When Functions extracts the contents of the zip archive, thehost.jsonfile must exist in the root of the package.
host.json
Use WEBSITE_RUN_FROM_PACKAGE = 1
This section provides information about how to run your function app from a local package file.
Considerations for deploying from an on-site package

Using an on-site package is the recommended option for running from the deployment package, except when running on Linux hosted in a Consumption plan.
Zip deploymentis the recommended way to upload a deployment package to your site.
When not using zip deployment, make sure thec:\home\data\SitePackages(Windows) or/home/data/SitePackages(Linux) folder has a file namedpackagename.txt. This file contains only the name, without any whitespace, of the package file in this folder that's currently running.
c:\home\data\SitePackages
/home/data/SitePackages
packagename.txt
Integration with zip deployment
Zip deployment is a feature of Azure App Service that lets you deploy your function app project to thewwwrootdirectory. The project is packaged as a .zip deployment file. The same APIs can be used to deploy your package to thec:\home\data\SitePackages(Windows) or/home/data/SitePackages(Linux) folder.
wwwroot
c:\home\data\SitePackages
/home/data/SitePackages
When you set theWEBSITE_RUN_FROM_PACKAGEapp setting value to1, the zip deployment APIs copy your package to thec:\home\data\SitePackages(Windows) or/home/data/SitePackages(Linux) folder instead of extracting the files toc:\home\site\wwwroot(Windows) or/home/site/wwwroot(Linux). It also creates thepackagename.txtfile. After your function app is automatically restarted, the package is mounted towwwrootas a read-only filesystem. For more information about zip deployment, seeZip deployment for Azure Functions.
WEBSITE_RUN_FROM_PACKAGE
1
c:\home\data\SitePackages
/home/data/SitePackages
c:\home\site\wwwroot
/home/site/wwwroot
packagename.txt
wwwroot
Note
When a deployment occurs, a restart of the function app is triggered. Function executions currently running during the deploy are terminated. For information about how to write stateless and defensive functions, settWrite functions to be stateless.
Use WEBSITE_RUN_FROM_PACKAGE = URL
This section provides information about how to run your function app from a package deployed to a URL endpoint. This option is the only one supported for running from a Linux-hosted package with a Consumption plan. This option is not supported in theFlex Consumptionplan.
Considerations for deploying from a URL
Do not setWEBSITE_RUN_FROM_PACKAGE = <URL>in apps on theFlex Consumptionplan. This option is not supported.
WEBSITE_RUN_FROM_PACKAGE = <URL>
Function apps running on Windows experience a slight increase incold-start timewhen the application package is deployed to a URL endpoint viaWEBSITE_RUN_FROM_PACKAGE = <URL>.
WEBSITE_RUN_FROM_PACKAGE = <URL>
When you specify a URL, you must alsomanually sync triggersafter you publish an updated package.
The Functions runtime must have permissions to access the package URL.
Don't deploy your package to Azure Blob Storage as a public blob. Instead, use a private container with ashared access signature (SAS)oruse a managed identityto enable the Functions runtime to access the package.
You must maintain any SAS URLs used for deployment. When an SAS expires, the package can no longer be deployed. In this case, you must generate a new SAS and update the setting in your function app. You can eliminate this management burden byusing a managed identity.
When running on a Premium plan, make sure toeliminate cold starts.
When you're running on a Dedicated plan, ensure you enableAlways On.
You can useAzure Storage Explorerto upload package files to blob containers in your storage account.
Manually uploading a package to Blob Storage
To deploy a zipped package when using the URL option, you must create a .zip compressed deployment package and upload it to the destination. The following procedure deploys to a container in Blob Storage:
Create a .zip package for your project using the utility of your choice.
Create a .zip package for your project using the utility of your choice.
In theAzure portal, search for your storage account name or browse for it in the storage accounts list.
In theAzure portal, search for your storage account name or browse for it in the storage accounts list.
In the storage account, selectContainersunderData storage.
In the storage account, selectContainersunderData storage.
Select+ Containerto create a new Blob Storage container in your account.
Select+ Containerto create a new Blob Storage container in your account.
In theNew containerpage, provide aName(for example,deployments), ensure theAnonymous access levelisPrivate, and then selectCreate.
In theNew containerpage, provide aName(for example,deployments), ensure theAnonymous access levelisPrivate, and then selectCreate.
Select the container you created, selectUpload, browse to the location of the .zip file you created with your project, and then selectUpload.
Select the container you created, selectUpload, browse to the location of the .zip file you created with your project, and then selectUpload.
After the upload completes, choose your uploaded blob file, and copy the URL. If you aren'tusing a managed identity, you might need to generate a SAS URL.
After the upload completes, choose your uploaded blob file, and copy the URL. If you aren'tusing a managed identity, you might need to generate a SAS URL.
Search for your function app or browse for it in theFunction Apppage.
Search for your function app or browse for it in theFunction Apppage.
In your function app, expandSettings, and then selectEnvironment variables.
In your function app, expandSettings, and then selectEnvironment variables.
In theApp settingstab, select+ Add.
In theApp settingstab, select+ Add.
Enter the valueWEBSITE_RUN_FROM_PACKAGEfor theName, and paste the URL of your package in Blob Storage for theValue.
Enter the valueWEBSITE_RUN_FROM_PACKAGEfor theName, and paste the URL of your package in Blob Storage for theValue.
WEBSITE_RUN_FROM_PACKAGE
SelectApply, and then selectApplyandConfirmto save the setting and restart the function app.
SelectApply, and then selectApplyandConfirmto save the setting and restart the function app.
Now you can run your function in Azure to verify that deployment of the deployment package .zip file was successful.
Fetch a package from Azure Blob Storage using a managed identity
You can configure Azure Blob Storage toauthorize requests with Microsoft Entra ID. This configuration means that instead of generating a SAS key with an expiration, you can instead rely on the application'smanaged identity. By default, the app's system-assigned identity is used. If you wish to specify a user-assigned identity, you can set theWEBSITE_RUN_FROM_PACKAGE_BLOB_MI_RESOURCE_IDapp setting to the resource ID of that identity. The setting can also acceptSystemAssignedas a value, which is equivalent to omitting the setting.
WEBSITE_RUN_FROM_PACKAGE_BLOB_MI_RESOURCE_ID
SystemAssigned
To enable the package to be fetched using the identity:
Ensure that the blob isconfigured for private access.
Ensure that the blob isconfigured for private access.
Grant the identity theStorage Blob Data Readerrole with scope over the package blob. SeeAssign an Azure role for access to blob datafor details on creating the role assignment.
Grant the identity theStorage Blob Data Readerrole with scope over the package blob. SeeAssign an Azure role for access to blob datafor details on creating the role assignment.
Set theWEBSITE_RUN_FROM_PACKAGEapplication setting to the blob URL of the package. This URL is usually of the formhttps://{storage-account-name}.blob.core.windows.net/{container-name}/{path-to-package}or similar.
Set theWEBSITE_RUN_FROM_PACKAGEapplication setting to the blob URL of the package. This URL is usually of the formhttps://{storage-account-name}.blob.core.windows.net/{container-name}/{path-to-package}or similar.
WEBSITE_RUN_FROM_PACKAGE
https://{storage-account-name}.blob.core.windows.net/{container-name}/{path-to-package}
If you wish to specify a user-assigned identity, you can set theWEBSITE_RUN_FROM_PACKAGE_BLOB_MI_RESOURCE_IDapp setting to the resource ID of that identity. The setting can also accept "SystemAssigned" as a value, although this is the same as omitting the setting altogether. A resource ID is a standard representation for a resource in Azure. For a user-assigned managed identity, that is going to be/subscriptions/subid/resourcegroups/rg-name/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity-name. The resource ID of a user-assigned managed identity can be obtained in theSettings->Properties->ID for the user assigned managed identity.
If you wish to specify a user-assigned identity, you can set theWEBSITE_RUN_FROM_PACKAGE_BLOB_MI_RESOURCE_IDapp setting to the resource ID of that identity. The setting can also accept "SystemAssigned" as a value, although this is the same as omitting the setting altogether. A resource ID is a standard representation for a resource in Azure. For a user-assigned managed identity, that is going to be/subscriptions/subid/resourcegroups/rg-name/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity-name. The resource ID of a user-assigned managed identity can be obtained in theSettings->Properties->ID for the user assigned managed identity.
WEBSITE_RUN_FROM_PACKAGE_BLOB_MI_RESOURCE_ID
/subscriptions/subid/resourcegroups/rg-name/providers/Microsoft.ManagedIdentity/userAssignedIdentities/identity-name
Related content
Continuous deployment for Azure Functions
Feedback
Was this page helpful?
Additional resources