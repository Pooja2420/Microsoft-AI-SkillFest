Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Azure Queue storage output bindings for Azure Functions
Article
2024-08-15
16 contributors
In this article
Azure Functions can create new Azure Queue storage messages by setting up an output binding.
For information on setup and configuration details, see theoverview.
Important
This article uses tabs to support multiple versions of the Node.js programming model. The v4 model is generally available and is designed to have a more flexible and intuitive experience for JavaScript and TypeScript developers. For more details about how the v4 model works, refer to theAzure Functions Node.js developer guide. To learn more about the differences between v3 and v4, refer to themigration guide.
Azure Functions supports two programming models for Python. The way that you define your bindings depends on your chosen programming model.
v2
v1
The Python v2 programming model lets you define bindings using decorators directly in your Python function code. For more information, see thePython developer guide.
The Python v1 programming model requires you to define bindings in a separatefunction.jsonfile in the function folder. For more information, see thePython developer guide.
This article supports both programming models.
Example
A C# function can be created by using one of the following C# modes:
Isolated worker model: Compiled C# function that runs in a worker process that's isolated from the runtime. Isolated worker process is required to support C# functions running on LTS and non-LTS versions .NET and the .NET Framework. Extensions for isolated worker process functions useMicrosoft.Azure.Functions.Worker.Extensions.*namespaces.
Microsoft.Azure.Functions.Worker.Extensions.*
In-process model: Compiled C# function that runs in the same process as the Functions runtime. In a variation of this model, Functions can be run usingC# scripting, which is supported primarily for C# portal editing. Extensions for in-process functions useMicrosoft.Azure.WebJobs.Extensions.*namespaces.
Microsoft.Azure.WebJobs.Extensions.*
Important
Support will end for the in-process model on November 10, 2026. We highly recommend that youmigrate your apps to the isolated worker modelfor full support.
Isolated worker model
In-process model
[Function(nameof(QueueFunction))]
[QueueOutput("output-queue")]
public string[] Run([QueueTrigger("input-queue")] Album myQueueItem, FunctionContext context)
{
    // Use a string array to return more than one message.
    string[] messages = {
        $"Album name = {myQueueItem.Name}",
        $"Album songs = {myQueueItem.Songs}"};

    _logger.LogInformation("{msg1},{msg2}", messages[0], messages[1]);

    // Queue Output messages
    return messages;
}
[Function(nameof(QueueFunction))]
[QueueOutput("output-queue")]
public string[] Run([QueueTrigger("input-queue")] Album myQueueItem, FunctionContext context)
{
    // Use a string array to return more than one message.
    string[] messages = {
        $"Album name = {myQueueItem.Name}",
        $"Album songs = {myQueueItem.Songs}"};

    _logger.LogInformation("{msg1},{msg2}", messages[0], messages[1]);

    // Queue Output messages
    return messages;
}
The following example shows aC# functionthat creates a queue message for each HTTP request received.
[StorageAccount("MyStorageConnectionAppSetting")]
public static class QueueFunctions
{
    [FunctionName("QueueOutput")]
    [return: Queue("myqueue-items")]
    public static string QueueOutput([HttpTrigger] dynamic input,  ILogger log)
    {
        log.LogInformation($"C# function processed: {input.Text}");
        return input.Text;
    }
}
[StorageAccount("MyStorageConnectionAppSetting")]
public static class QueueFunctions
{
    [FunctionName("QueueOutput")]
    [return: Queue("myqueue-items")]
    public static string QueueOutput([HttpTrigger] dynamic input,  ILogger log)
    {
        log.LogInformation($"C# function processed: {input.Text}");
        return input.Text;
    }
}
For an end-to-end example of how to configure an output binding to Queue storage, see one of these articles:
Connect functions to Azure Storage using Visual Studio
Connect functions to Azure Storage using Visual Studio Code
Connect functions to Azure Storage using command line tools
The following example shows a Java function that creates a queue message for when triggered by an  HTTP request.
@FunctionName("httpToQueue")
@QueueOutput(name = "item", queueName = "myqueue-items", connection = "MyStorageConnectionAppSetting")
 public String pushToQueue(
     @HttpTrigger(name = "request", methods = {HttpMethod.POST}, authLevel = AuthorizationLevel.ANONYMOUS)
     final String message,
     @HttpOutput(name = "response") final OutputBinding<String> result) {
       result.setValue(message + " has been added.");
       return message;
 }
@FunctionName("httpToQueue")
@QueueOutput(name = "item", queueName = "myqueue-items", connection = "MyStorageConnectionAppSetting")
 public String pushToQueue(
     @HttpTrigger(name = "request", methods = {HttpMethod.POST}, authLevel = AuthorizationLevel.ANONYMOUS)
     final String message,
     @HttpOutput(name = "response") final OutputBinding<String> result) {
       result.setValue(message + " has been added.");
       return message;
 }
In theJava functions runtime library, use the@QueueOutputannotation on parameters whose value would be written to Queue storage.  The parameter type should beOutputBinding<T>, whereTis any native Java type of a POJO.
@QueueOutput
OutputBinding<T>
T
For an end-to-end example of how to configure an output binding to Queue storage, see one of these articles:
Connect functions to Azure Storage using Visual Studio Code
Connect functions to Azure Storage using command line tools
Model v4
Model v3
The following example shows an HTTP triggeredTypeScript functionthat creates a queue item for each HTTP request received.
import { app, HttpRequest, HttpResponseInit, InvocationContext, output } from '@azure/functions';

const queueOutput = output.storageQueue({
    queueName: 'outqueue',
    connection: 'MyStorageConnectionAppSetting',
});

export async function httpTrigger1(request: HttpRequest, context: InvocationContext): Promise<HttpResponseInit> {
    const body = await request.text();
    context.extraOutputs.set(queueOutput, body);
    return { body: 'Created queue item.' };
}

app.http('httpTrigger1', {
    methods: ['GET', 'POST'],
    authLevel: 'anonymous',
    extraOutputs: [queueOutput],
    handler: httpTrigger1,
});
import { app, HttpRequest, HttpResponseInit, InvocationContext, output } from '@azure/functions';

const queueOutput = output.storageQueue({
    queueName: 'outqueue',
    connection: 'MyStorageConnectionAppSetting',
});

export async function httpTrigger1(request: HttpRequest, context: InvocationContext): Promise<HttpResponseInit> {
    const body = await request.text();
    context.extraOutputs.set(queueOutput, body);
    return { body: 'Created queue item.' };
}

app.http('httpTrigger1', {
    methods: ['GET', 'POST'],
    authLevel: 'anonymous',
    extraOutputs: [queueOutput],
    handler: httpTrigger1,
});
To output multiple messages, return an array instead of a single object. For example:
context.extraOutputs.set(queueOutput, ['message 1', 'message 2']);
context.extraOutputs.set(queueOutput, ['message 1', 'message 2']);
TypeScript samples are not documented for model v3.
Model v4
Model v3
The following example shows an HTTP triggeredJavaScript functionthat creates a queue item for each HTTP request received.
const { app, output } = require('@azure/functions');

const queueOutput = output.storageQueue({
    queueName: 'outqueue',
    connection: 'MyStorageConnectionAppSetting',
});

app.http('httpTrigger1', {
    methods: ['GET', 'POST'],
    authLevel: 'anonymous',
    extraOutputs: [queueOutput],
    handler: async (request, context) => {
        const body = await request.text();
        context.extraOutputs.set(queueOutput, body);
        return { body: 'Created queue item.' };
    },
});
const { app, output } = require('@azure/functions');

const queueOutput = output.storageQueue({
    queueName: 'outqueue',
    connection: 'MyStorageConnectionAppSetting',
});

app.http('httpTrigger1', {
    methods: ['GET', 'POST'],
    authLevel: 'anonymous',
    extraOutputs: [queueOutput],
    handler: async (request, context) => {
        const body = await request.text();
        context.extraOutputs.set(queueOutput, body);
        return { body: 'Created queue item.' };
    },
});
To output multiple messages, return an array instead of a single object. For example:
context.extraOutputs.set(queueOutput, ['message 1', 'message 2']);
context.extraOutputs.set(queueOutput, ['message 1', 'message 2']);
For an end-to-end example of how to configure an output binding to Queue storage, see one of these articles:
Connect functions to Azure Storage using Visual Studio Code
Connect functions to Azure Storage using command line tools
The following example shows an HTTP trigger binding in afunction.jsonfile and aJavaScript functionthat uses the binding. The function creates a queue item for each HTTP request received.
Here's thefunction.jsonfile:
{
  "bindings": [
    {
      "type": "httpTrigger",
      "direction": "in",
      "authLevel": "function",
      "name": "input"
    },
    {
      "type": "http",
      "direction": "out",
      "name": "$return"
    },
    {
      "type": "queue",
      "direction": "out",
      "name": "myQueueItem",
      "queueName": "outqueue",
      "connection": "MyStorageConnectionAppSetting"
    }
  ]
}
{
  "bindings": [
    {
      "type": "httpTrigger",
      "direction": "in",
      "authLevel": "function",
      "name": "input"
    },
    {
      "type": "http",
      "direction": "out",
      "name": "$return"
    },
    {
      "type": "queue",
      "direction": "out",
      "name": "myQueueItem",
      "queueName": "outqueue",
      "connection": "MyStorageConnectionAppSetting"
    }
  ]
}
Theconfigurationsection explains these properties.
Here's the JavaScript code:
module.exports = async function (context, input) {
    context.bindings.myQueueItem = input.body;
};
module.exports = async function (context, input) {
    context.bindings.myQueueItem = input.body;
};
You can send multiple messages at once by defining a message array for themyQueueItemoutput binding. The following JavaScript code sends two queue messages with hard-coded values for each HTTP request received.
myQueueItem
module.exports = async function(context) {
    context.bindings.myQueueItem = ["message 1","message 2"];
};
module.exports = async function(context) {
    context.bindings.myQueueItem = ["message 1","message 2"];
};
The following code examples demonstrate how to output a queue message from an HTTP-triggered function. The configuration section with thetypeofqueuedefines the output binding.
type
queue
{
  "bindings": [
    {
      "authLevel": "anonymous",
      "type": "httpTrigger",
      "direction": "in",
      "name": "Request",
      "methods": [
        "get",
        "post"
      ]
    },
    {
      "type": "http",
      "direction": "out",
      "name": "Response"
    },
    {
      "type": "queue",
      "direction": "out",
      "name": "Msg",
      "queueName": "outqueue",
      "connection": "MyStorageConnectionAppSetting"
    }
  ]
}
{
  "bindings": [
    {
      "authLevel": "anonymous",
      "type": "httpTrigger",
      "direction": "in",
      "name": "Request",
      "methods": [
        "get",
        "post"
      ]
    },
    {
      "type": "http",
      "direction": "out",
      "name": "Response"
    },
    {
      "type": "queue",
      "direction": "out",
      "name": "Msg",
      "queueName": "outqueue",
      "connection": "MyStorageConnectionAppSetting"
    }
  ]
}
Using this binding configuration, a PowerShell function can create a queue message usingPush-OutputBinding. In this example, a message is created from a query string or body parameter.
Push-OutputBinding
using namespace System.Net

# Input bindings are passed in via param block.
param($Request, $TriggerMetadata)

# Write to the Azure Functions log stream.
Write-Host "PowerShell HTTP trigger function processed a request."

# Interact with query parameters or the body of the request.
$message = $Request.Query.Message
Push-OutputBinding -Name Msg -Value $message
Push-OutputBinding -Name Response -Value ([HttpResponseContext]@{
    StatusCode = 200
    Body = "OK"
})
using namespace System.Net

# Input bindings are passed in via param block.
param($Request, $TriggerMetadata)

# Write to the Azure Functions log stream.
Write-Host "PowerShell HTTP trigger function processed a request."

# Interact with query parameters or the body of the request.
$message = $Request.Query.Message
Push-OutputBinding -Name Msg -Value $message
Push-OutputBinding -Name Response -Value ([HttpResponseContext]@{
    StatusCode = 200
    Body = "OK"
})
To send multiple messages at once, define a message array and usePush-OutputBindingto send messages to the Queue output binding.
Push-OutputBinding
using namespace System.Net

# Input bindings are passed in via param block.
param($Request, $TriggerMetadata)

# Write to the Azure Functions log stream.
Write-Host "PowerShell HTTP trigger function processed a request."

# Interact with query parameters or the body of the request.
$message = @("message1", "message2")
Push-OutputBinding -Name Msg -Value $message
Push-OutputBinding -Name Response -Value ([HttpResponseContext]@{
    StatusCode = 200
    Body = "OK"
})
using namespace System.Net

# Input bindings are passed in via param block.
param($Request, $TriggerMetadata)

# Write to the Azure Functions log stream.
Write-Host "PowerShell HTTP trigger function processed a request."

# Interact with query parameters or the body of the request.
$message = @("message1", "message2")
Push-OutputBinding -Name Msg -Value $message
Push-OutputBinding -Name Response -Value ([HttpResponseContext]@{
    StatusCode = 200
    Body = "OK"
})
For an end-to-end example of how to configure an output binding to Queue storage, see one of these articles:
Connect functions to Azure Storage using Visual Studio Code
Connect functions to Azure Storage using command line tools
The following example demonstrates how to output single and multiple values to storage queues. The configuration needed forfunction.jsonis the same either way. The example depends on whether you use thev1 or v2 Python programming model.
v2
v1
import logging
import azure.functions as func

app = func.FunctionApp()

@app.function_name(name="QueueOutput1")
@app.route(route="message")
@app.queue_output(arg_name="msg", 
                  queue_name="<QUEUE_NAME>", 
                  connection="<CONNECTION_SETTING>")
def main(req: func.HttpRequest, msg: func.Out[str]) -> func.HttpResponse:
    input_msg = req.params.get('name')
    logging.info(input_msg)

    msg.set(input_msg)

    logging.info(f'name: {name}')
    return 'OK'
import logging
import azure.functions as func

app = func.FunctionApp()

@app.function_name(name="QueueOutput1")
@app.route(route="message")
@app.queue_output(arg_name="msg", 
                  queue_name="<QUEUE_NAME>", 
                  connection="<CONNECTION_SETTING>")
def main(req: func.HttpRequest, msg: func.Out[str]) -> func.HttpResponse:
    input_msg = req.params.get('name')
    logging.info(input_msg)

    msg.set(input_msg)

    logging.info(f'name: {name}')
    return 'OK'
For an end-to-end example of how to configure an output binding to Queue storage, see one of these articles:
Connect functions to Azure Storage using Visual Studio Code
Connect functions to Azure Storage using command line tools
A Storage queue binding is defined infunction.jsonwheretypeis set toqueue.
queue
{
  "scriptFile": "__init__.py",
  "bindings": [
    {
      "authLevel": "function",
      "type": "httpTrigger",
      "direction": "in",
      "name": "req",
      "methods": [
        "get",
        "post"
      ]
    },
    {
      "type": "http",
      "direction": "out",
      "name": "$return"
    },
    {
      "type": "queue",
      "direction": "out",
      "name": "msg",
      "queueName": "outqueue",
      "connection": "AzureStorageQueuesConnectionString"
    }
  ]
}
{
  "scriptFile": "__init__.py",
  "bindings": [
    {
      "authLevel": "function",
      "type": "httpTrigger",
      "direction": "in",
      "name": "req",
      "methods": [
        "get",
        "post"
      ]
    },
    {
      "type": "http",
      "direction": "out",
      "name": "$return"
    },
    {
      "type": "queue",
      "direction": "out",
      "name": "msg",
      "queueName": "outqueue",
      "connection": "AzureStorageQueuesConnectionString"
    }
  ]
}
To set an individual message on the queue, you pass a single value to thesetmethod.
set
import azure.functions as func

def main(req: func.HttpRequest, msg: func.Out[str]) -> func.HttpResponse:

    input_msg = req.params.get('message')

    msg.set(input_msg)

    return 'OK'
import azure.functions as func

def main(req: func.HttpRequest, msg: func.Out[str]) -> func.HttpResponse:

    input_msg = req.params.get('message')

    msg.set(input_msg)

    return 'OK'
To create multiple messages on the queue, declare a parameter as the appropriate list type and pass an array of values (that match the list type) to thesetmethod.
set
import azure.functions as func
import typing

def main(req: func.HttpRequest, msg: func.Out[typing.List[str]]) -> func.HttpResponse:

    msg.set(['one', 'two'])

    return 'OK'
import azure.functions as func
import typing

def main(req: func.HttpRequest, msg: func.Out[typing.List[str]]) -> func.HttpResponse:

    msg.set(['one', 'two'])

    return 'OK'
Attributes
The attribute that defines an output binding in C# libraries depends on the mode in which the C# class library runs.
Isolated worker model
In-process model
When running in an isolated worker process, you use theQueueOutputAttribute, which takes the name of the queue, as shown in the following example:
[Function(nameof(QueueFunction))]
[QueueOutput("output-queue")]
public string[] Run([QueueTrigger("input-queue")] Album myQueueItem, FunctionContext context)
[Function(nameof(QueueFunction))]
[QueueOutput("output-queue")]
public string[] Run([QueueTrigger("input-queue")] Album myQueueItem, FunctionContext context)
Only returned variables are supported when running in an isolated worker process. Output parameters can't be used.
InC# class libraries, use theQueueAttribute. C# script instead uses a function.json configuration file as described in theC# scripting guide.
The attribute applies to anoutparameter or the return value of the function. The attribute's constructor takes the name of the queue, as shown in the following example:
out
[FunctionName("QueueOutput")]
[return: Queue("myqueue-items")]
public static string Run([HttpTrigger] dynamic input,  ILogger log)
{
    ...
}
[FunctionName("QueueOutput")]
[return: Queue("myqueue-items")]
public static string Run([HttpTrigger] dynamic input,  ILogger log)
{
    ...
}
You can set theConnectionproperty to specify the storage account to use, as shown in the following example:
Connection
[FunctionName("QueueOutput")]
[return: Queue("myqueue-items", Connection = "StorageConnectionAppSetting")]
public static string Run([HttpTrigger] dynamic input,  ILogger log)
{
    ...
}
[FunctionName("QueueOutput")]
[return: Queue("myqueue-items", Connection = "StorageConnectionAppSetting")]
public static string Run([HttpTrigger] dynamic input,  ILogger log)
{
    ...
}
You can use theStorageAccountattribute to specify the storage account at class, method, or parameter level. For more information, see Trigger - attributes.
StorageAccount
Decorators
Applies only to the Python v2 programming model.
For Python v2 functions defined using a decorator, the following properties on thequeue_output:
queue_output
arg_name
queue_name
connection
For Python functions defined by usingfunction.json, see theConfigurationsection.
Annotations
TheQueueOutputannotation allows you to write a message as the output of a function. The following example shows an HTTP-triggered function that creates a queue message.
package com.function;
import java.util.*;
import com.microsoft.azure.functions.annotation.*;
import com.microsoft.azure.functions.*;

public class HttpTriggerQueueOutput {
    @FunctionName("HttpTriggerQueueOutput")
    public HttpResponseMessage run(
            @HttpTrigger(name = "req", methods = {HttpMethod.GET, HttpMethod.POST}, authLevel = AuthorizationLevel.FUNCTION) HttpRequestMessage<Optional<String>> request,
            @QueueOutput(name = "message", queueName = "messages", connection = "MyStorageConnectionAppSetting") OutputBinding<String> message,
            final ExecutionContext context) {

        message.setValue(request.getQueryParameters().get("name"));
        return request.createResponseBuilder(HttpStatus.OK).body("Done").build();
    }
}
package com.function;
import java.util.*;
import com.microsoft.azure.functions.annotation.*;
import com.microsoft.azure.functions.*;

public class HttpTriggerQueueOutput {
    @FunctionName("HttpTriggerQueueOutput")
    public HttpResponseMessage run(
            @HttpTrigger(name = "req", methods = {HttpMethod.GET, HttpMethod.POST}, authLevel = AuthorizationLevel.FUNCTION) HttpRequestMessage<Optional<String>> request,
            @QueueOutput(name = "message", queueName = "messages", connection = "MyStorageConnectionAppSetting") OutputBinding<String> message,
            final ExecutionContext context) {

        message.setValue(request.getQueryParameters().get("name"));
        return request.createResponseBuilder(HttpStatus.OK).body("Done").build();
    }
}
name
queueName
connection
The parameter associated with theQueueOutputannotation is typed as anOutputBinding<T>instance.
Configuration
Applies only to the Python v1 programming model.
Model v4
Model v3
The following table explains the properties that you can set on theoptionsobject passed to theoutput.storageQueue()method.
options
output.storageQueue()
The following table explains the binding configuration properties that you set in thefunction.jsonfile.
queue
out
$return
When you're developing locally, add your application settings in thelocal.settings.json filein theValuescollection.
Values
The following table explains the binding configuration properties that you set in thefunction.jsonfile.
queue
out
$return
When you're developing locally, add your application settings in thelocal.settings.json filein theValuescollection.
Values
See theExample sectionfor complete examples.
Usage
The usage of the Queue output binding depends on the extension package version and the C# modality used in your function app, which can be one of the following:
Isolated worker model
In-process model
An isolated worker process class library compiled C# function runs in a process isolated from the runtime.
An in-process class library is a compiled C# function runs in the same process as the Functions runtime.
Choose a version to see usage details for the mode and version.
Extension 5.x+
Extension 2.x+
Extension 5.x+
Extension 2.x+
Write a single queue message by using a method parameter such asout T paramName. You can use the method return type instead of anoutparameter, andTcan be any of the following types:
out T paramName
out
T
An object serializable as JSON
string
string
byte[]
byte[]
QueueMessage
For examples using these types, seethe GitHub repository for the extension.
You can write multiple messages to the queue by using one of the following types:
ICollector<T>orIAsyncCollector<T>
ICollector<T>
IAsyncCollector<T>
QueueClient
For examples usingQueueMessageandQueueClient, seethe GitHub repository for the extension.
While the attribute takes aConnectionproperty, you can also use theStorageAccountAttributeto specify a storage account connection. You can do this when you need to use a different storage account than other functions in the library. The constructor takes the name of an app setting that contains a storage connection string. The attribute can be applied at the parameter, method, or class level. The following example shows class level and method level:
Connection
[StorageAccount("ClassLevelStorageAppSetting")]
public static class AzureFunctions
{
    [FunctionName("StorageTrigger")]
    [StorageAccount("FunctionLevelStorageAppSetting")]
    public static void Run( //...
{
    ...
}
[StorageAccount("ClassLevelStorageAppSetting")]
public static class AzureFunctions
{
    [FunctionName("StorageTrigger")]
    [StorageAccount("FunctionLevelStorageAppSetting")]
    public static void Run( //...
{
    ...
}
The storage account to use is determined in the following order:
The trigger or binding attribute'sConnectionproperty.
Connection
TheStorageAccountattribute applied to the same parameter as the trigger or binding attribute.
StorageAccount
TheStorageAccountattribute applied to the function.
StorageAccount
TheStorageAccountattribute applied to the class.
StorageAccount
The default storage account for the function app, which is defined in theAzureWebJobsStorageapplication setting.
AzureWebJobsStorage
Write a single queue message by using a method parameter such asout T paramName. You can use the method return type instead of anoutparameter, andTcan be any of the following types:
out T paramName
out
T
An object serializable as JSON
string
string
byte[]
byte[]
CloudQueueMessage
If you try to bind toCloudQueueMessageand get an error message, make sure that you have a reference tothe correct Storage SDK version.
You can write multiple messages to the queue by using one of the following types:
ICollector<T>orIAsyncCollector<T>
ICollector<T>
IAsyncCollector<T>
CloudQueue
While the attribute takes aConnectionproperty, you can also use theStorageAccountAttributeto specify a storage account connection. You can do this when you need to use a different storage account than other functions in the library. The constructor takes the name of an app setting that contains a storage connection string. The attribute can be applied at the parameter, method, or class level. The following example shows class level and method level:
Connection
[StorageAccount("ClassLevelStorageAppSetting")]
public static class AzureFunctions
{
    [FunctionName("StorageTrigger")]
    [StorageAccount("FunctionLevelStorageAppSetting")]
    public static void Run( //...
{
    ...
}
[StorageAccount("ClassLevelStorageAppSetting")]
public static class AzureFunctions
{
    [FunctionName("StorageTrigger")]
    [StorageAccount("FunctionLevelStorageAppSetting")]
    public static void Run( //...
{
    ...
}
The storage account to use is determined in the following order:
The trigger or binding attribute'sConnectionproperty.
Connection
TheStorageAccountattribute applied to the same parameter as the trigger or binding attribute.
StorageAccount
TheStorageAccountattribute applied to the function.
StorageAccount
TheStorageAccountattribute applied to the class.
StorageAccount
The default storage account for the function app, which is defined in theAzureWebJobsStorageapplication setting.
AzureWebJobsStorage
When you want the function to write a single message, the queue output binding can bind to the following types:
string
byte[]
When you want the function to write multiple messages, the queue output binding can bind to the following types:
T[]
T
For other output scenarios, create and use aQueueClientwith other types fromAzure.Storage.Queuesdirectly. SeeRegister Azure clientsfor an example of using dependency injection to create a client type from the Azure SDK.
Isolated worker process currently only supports binding to string parameters.
There are two options for writing to a queue from a function by using theQueueOutputannotation:
Return value: By applying the annotation to the function itself, the return value of the function is written to the queue.
Return value: By applying the annotation to the function itself, the return value of the function is written to the queue.
Imperative: To explicitly set the message value, apply the annotation to a specific parameter of the typeOutputBinding<T>, whereTis a POJO or any native Java type. With this configuration, passing a value to thesetValuemethod writes the value to the queue.
Imperative: To explicitly set the message value, apply the annotation to a specific parameter of the typeOutputBinding<T>, whereTis a POJO or any native Java type. With this configuration, passing a value to thesetValuemethod writes the value to the queue.
OutputBinding<T>
T
setValue
Model v4
Model v3
Access the output queue item by returning the value directly or usingcontext.extraOutputs.set(). You can use a string or a JSON-serializable object for the queue item payload.
context.extraOutputs.set()
Access the output queue item by usingcontext.bindings.<name>where<name>is the value specified in thenameproperty offunction.json. You can use a string or a JSON-serializable object for the queue item payload.
context.bindings.<name>
<name>
name
Output to the queue message is available viaPush-OutputBindingwhere you pass arguments that match the name designated by binding'snameparameter in thefunction.jsonfile.
Push-OutputBinding
name
There are two options for writing from your function to the configured queue:
Return value: Set thenameproperty infunction.jsonto$return. With this configuration, the function's return value is persisted as a Queue storage message.
Return value: Set thenameproperty infunction.jsonto$return. With this configuration, the function's return value is persisted as a Queue storage message.
name
$return
Imperative: Pass a value to thesetmethod of the parameter declared as anOuttype. The value passed tosetis persisted as a Queue storage message.
Imperative: Pass a value to thesetmethod of the parameter declared as anOuttype. The value passed tosetis persisted as a Queue storage message.
set
Connections
Theconnectionproperty is a reference to environment configuration that specifies how the app should connect to Azure Queues. It may specify:
connection
The name of an application setting containing aconnection string
The name of a shared prefix for multiple application settings, together defining anidentity-based connection.
If the configured value is both an exact match for a single setting and a prefix match for other settings, the exact match is used.
Connection string
To obtain a connection string, follow the steps shown atManage storage account access keys.
This connection string should be stored in an application setting with a name matching the value specified by theconnectionproperty of the binding configuration.
connection
If the app setting name begins with "AzureWebJobs", you can specify only the remainder of the name here. For example, if you setconnectionto "MyStorage", the Functions runtime looks for an app setting that is named "AzureWebJobsMyStorage." If you leaveconnectionempty, the Functions runtime uses the default Storage connection string in the app setting that is namedAzureWebJobsStorage.
connection
connection
AzureWebJobsStorage
Identity-based connections
If you're usingversion 5.x or higher of the extension(bundle 3.x or higherfor non-.NET language stacks), instead of using a connection string with a secret, you can have the app use anMicrosoft Entra identity. To use an identity, you define settings under a common prefix that maps to theconnectionproperty in the trigger and binding configuration.
connection
If you're settingconnectionto "AzureWebJobsStorage", seeConnecting to host storage with an identity. For all other connections, the extension requires the following properties:
connection
<CONNECTION_NAME_PREFIX>__queueServiceUri
1<CONNECTION_NAME_PREFIX>__serviceUrican be used as an alias. If both forms are provided, thequeueServiceUriform is used. TheserviceUriform can't be used when the overall connection configuration is to be used across blobs, queues, and/or tables.
<CONNECTION_NAME_PREFIX>__serviceUri
queueServiceUri
serviceUri
Other properties may be set to customize the connection. SeeCommon properties for identity-based connections.
When hosted in the Azure Functions service, identity-based connections use amanaged identity. The system-assigned identity is used by default, although a user-assigned identity can be specified with thecredentialandclientIDproperties. Note that configuring a user-assigned identity with a resource ID isnotsupported. When run in other contexts, such as local development, your developer identity is used instead, although this can be customized. SeeLocal development with identity-based connections.
credential
clientID
Whatever identity is being used must have permissions to perform the intended actions. For most Azure services, this means you need toassign a role in Azure RBAC, using either built-in or custom roles which provide those permissions.
Important
Some permissions might be exposed by the target service that are not necessary for all contexts. Where possible, adhere to theprinciple of least privilege, granting the identity only required privileges. For example, if the app only needs to be able to read from a data source, use a role that only has permission to read. It would be inappropriate to assign a role that also allows writing to that service, as this would be excessive permission for a read operation. Similarly, you would want to ensure the role assignment is scoped only over the resources that need to be read.
You will need to create a role assignment that provides access to your queue at runtime. Management roles likeOwnerare not sufficient. The following table shows built-in roles that are recommended when using the Queue Storage extension in normal operation. Your application may require additional permissions based on the code you write.
Exceptions and return codes
Next steps
Run a function as queue storage data changes (Trigger)
Feedback
Was this page helpful?
Additional resources