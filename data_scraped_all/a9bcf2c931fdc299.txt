Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Tutorial: Enable Azure Container Apps on Azure Arc-enabled Kubernetes (Preview)
Article
2025-02-03
11 contributors
In this article
WithAzure Arc-enabled Kubernetes clusters, you can create aContainer Apps enabled custom locationin your on-premises or cloud Kubernetes cluster to deploy your Azure Container Apps applications as you would any other region.
This tutorial will show you how to enable Azure Container Apps on your Arc-enabled Kubernetes cluster.  In this tutorial you will:
Create a connected cluster.
Create a Log Analytics workspace.
Install the Container Apps extension.
Create a custom location.
Create the Azure Container Apps connected environment.
Note
During the preview, Azure Container Apps on Arc are not supported in production configurations. This article provides an example configuration for evaluation purposes only.
This tutorial usesAzure Kubernetes Service (AKS)to provide concrete instructions for setting up an environment from scratch. However, for a production workload, you may not want to enable Azure Arc on an AKS cluster as it is already managed in Azure.
Prerequisites
An Azure account with an active subscription.If you don't have one, youcan create one for free.
If you don't have one, youcan create one for free.
Install theAzure CLI.
Access to a public or private container registry, such as theAzure Container Registry.
Review therequirements and limitationsof the public preview. Of particular importance are the cluster requirements.
Setup
Install the following Azure CLI extensions.
Azure CLI
PowerShell
az extension add --name connectedk8s --upgrade --yes
az extension add --name k8s-extension --upgrade --yes
az extension add --name customlocation --upgrade --yes
az extension add --name containerapp  --upgrade --yes
az extension add --name connectedk8s --upgrade --yes
az extension add --name k8s-extension --upgrade --yes
az extension add --name customlocation --upgrade --yes
az extension add --name containerapp  --upgrade --yes
az extension add --name connectedk8s  --upgrade --yes
az extension add --name k8s-extension --upgrade --yes
az extension add --name customlocation --upgrade --yes
az extension add --name containerapp  --upgrade --yes
az extension add --name connectedk8s  --upgrade --yes
az extension add --name k8s-extension --upgrade --yes
az extension add --name customlocation --upgrade --yes
az extension add --name containerapp  --upgrade --yes
Register the required namespaces.
Azure CLI
PowerShell
az provider register --namespace Microsoft.ExtendedLocation --wait
az provider register --namespace Microsoft.KubernetesConfiguration --wait
az provider register --namespace Microsoft.App --wait
az provider register --namespace Microsoft.OperationalInsights --wait
az provider register --namespace Microsoft.ExtendedLocation --wait
az provider register --namespace Microsoft.KubernetesConfiguration --wait
az provider register --namespace Microsoft.App --wait
az provider register --namespace Microsoft.OperationalInsights --wait
az provider register --namespace Microsoft.ExtendedLocation --wait
az provider register --namespace Microsoft.KubernetesConfiguration --wait
az provider register --namespace Microsoft.App --wait
az provider register --namespace Microsoft.OperationalInsights --wait
az provider register --namespace Microsoft.ExtendedLocation --wait
az provider register --namespace Microsoft.KubernetesConfiguration --wait
az provider register --namespace Microsoft.App --wait
az provider register --namespace Microsoft.OperationalInsights --wait
Set environment variables based on your Kubernetes cluster deployment.
Azure CLI
PowerShell
GROUP_NAME="my-arc-cluster-group"
AKS_CLUSTER_GROUP_NAME="my-aks-cluster-group"
AKS_NAME="my-aks-cluster"
LOCATION="eastus"
GROUP_NAME="my-arc-cluster-group"
AKS_CLUSTER_GROUP_NAME="my-aks-cluster-group"
AKS_NAME="my-aks-cluster"
LOCATION="eastus"
$GROUP_NAME="my-arc-cluster-group"
$AKS_CLUSTER_GROUP_NAME="my-aks-cluster-group"
$AKS_NAME="my-aks-cluster"
$LOCATION="eastus"
$GROUP_NAME="my-arc-cluster-group"
$AKS_CLUSTER_GROUP_NAME="my-aks-cluster-group"
$AKS_NAME="my-aks-cluster"
$LOCATION="eastus"
Create a connected cluster
The following steps help you get started understanding the service, but for production deployments, they should be viewed as illustrative, not prescriptive. SeeQuickstart: Connect an existing Kubernetes cluster to Azure Arcfor general instructions on creating an Azure Arc-enabled Kubernetes cluster.
Create a cluster in Azure Kubernetes Service.Azure CLIPowerShellaz group create --name $AKS_CLUSTER_GROUP_NAME --location $LOCATION
az aks create \
   --resource-group $AKS_CLUSTER_GROUP_NAME \
   --name $AKS_NAME \
   --enable-aad \
   --generate-ssh-keysaz group create --name $AKS_CLUSTER_GROUP_NAME --location $LOCATION
az aks create `
   --resource-group $AKS_CLUSTER_GROUP_NAME `
   --name $AKS_NAME `
   --enable-aad `
   --generate-ssh-keys
Create a cluster in Azure Kubernetes Service.
Azure CLI
PowerShell
az group create --name $AKS_CLUSTER_GROUP_NAME --location $LOCATION
az aks create \
   --resource-group $AKS_CLUSTER_GROUP_NAME \
   --name $AKS_NAME \
   --enable-aad \
   --generate-ssh-keys
az group create --name $AKS_CLUSTER_GROUP_NAME --location $LOCATION
az aks create \
   --resource-group $AKS_CLUSTER_GROUP_NAME \
   --name $AKS_NAME \
   --enable-aad \
   --generate-ssh-keys
az group create --name $AKS_CLUSTER_GROUP_NAME --location $LOCATION
az aks create `
   --resource-group $AKS_CLUSTER_GROUP_NAME `
   --name $AKS_NAME `
   --enable-aad `
   --generate-ssh-keys
az group create --name $AKS_CLUSTER_GROUP_NAME --location $LOCATION
az aks create `
   --resource-group $AKS_CLUSTER_GROUP_NAME `
   --name $AKS_NAME `
   --enable-aad `
   --generate-ssh-keys
Get thekubeconfigfile and test your connection to the cluster. By default, the kubeconfig file is saved to~/.kube/config.az aks get-credentials --resource-group $AKS_CLUSTER_GROUP_NAME --name $AKS_NAME --admin

kubectl get ns
Get thekubeconfigfile and test your connection to the cluster. By default, the kubeconfig file is saved to~/.kube/config.
~/.kube/config
az aks get-credentials --resource-group $AKS_CLUSTER_GROUP_NAME --name $AKS_NAME --admin

kubectl get ns
az aks get-credentials --resource-group $AKS_CLUSTER_GROUP_NAME --name $AKS_NAME --admin

kubectl get ns
Create a resource group to contain your Azure Arc resources.Azure CLIPowerShellaz group create --name $GROUP_NAME --location $LOCATIONaz group create --name $GROUP_NAME --location $LOCATION
Create a resource group to contain your Azure Arc resources.
Azure CLI
PowerShell
az group create --name $GROUP_NAME --location $LOCATION
az group create --name $GROUP_NAME --location $LOCATION
az group create --name $GROUP_NAME --location $LOCATION
az group create --name $GROUP_NAME --location $LOCATION
Connect the cluster you created to Azure Arc.Azure CLIPowerShellCLUSTER_NAME="${GROUP_NAME}-cluster" # Name of the connected cluster resource

az connectedk8s connect --resource-group $GROUP_NAME --name $CLUSTER_NAME$CLUSTER_NAME="${GROUP_NAME}-cluster" # Name of the connected cluster resource

az connectedk8s connect --resource-group $GROUP_NAME --name $CLUSTER_NAME
Connect the cluster you created to Azure Arc.
Azure CLI
PowerShell
CLUSTER_NAME="${GROUP_NAME}-cluster" # Name of the connected cluster resource

az connectedk8s connect --resource-group $GROUP_NAME --name $CLUSTER_NAME
CLUSTER_NAME="${GROUP_NAME}-cluster" # Name of the connected cluster resource

az connectedk8s connect --resource-group $GROUP_NAME --name $CLUSTER_NAME
$CLUSTER_NAME="${GROUP_NAME}-cluster" # Name of the connected cluster resource

az connectedk8s connect --resource-group $GROUP_NAME --name $CLUSTER_NAME
$CLUSTER_NAME="${GROUP_NAME}-cluster" # Name of the connected cluster resource

az connectedk8s connect --resource-group $GROUP_NAME --name $CLUSTER_NAME
Validate the connection with the following command. It should show theprovisioningStateproperty asSucceeded. If not, run the command again after a minute.az connectedk8s show --resource-group $GROUP_NAME --name $CLUSTER_NAME
Validate the connection with the following command. It should show theprovisioningStateproperty asSucceeded. If not, run the command again after a minute.
provisioningState
Succeeded
az connectedk8s show --resource-group $GROUP_NAME --name $CLUSTER_NAME
az connectedk8s show --resource-group $GROUP_NAME --name $CLUSTER_NAME
Create a Log Analytics workspace
ALog Analytics workspaceprovides access to logs for Container Apps applications running in the Azure Arc-enabled Kubernetes cluster.  A Log Analytics workspace is optional, but recommended.
Create a Log Analytics workspace.Azure CLIPowerShellWORKSPACE_NAME="$GROUP_NAME-workspace" # Name of the Log Analytics workspace

az monitor log-analytics workspace create \
    --resource-group $GROUP_NAME \
    --workspace-name $WORKSPACE_NAME$WORKSPACE_NAME="$GROUP_NAME-workspace"

az monitor log-analytics workspace create `
    --resource-group $GROUP_NAME `
    --workspace-name $WORKSPACE_NAME
Create a Log Analytics workspace.
Azure CLI
PowerShell
WORKSPACE_NAME="$GROUP_NAME-workspace" # Name of the Log Analytics workspace

az monitor log-analytics workspace create \
    --resource-group $GROUP_NAME \
    --workspace-name $WORKSPACE_NAME
WORKSPACE_NAME="$GROUP_NAME-workspace" # Name of the Log Analytics workspace

az monitor log-analytics workspace create \
    --resource-group $GROUP_NAME \
    --workspace-name $WORKSPACE_NAME
$WORKSPACE_NAME="$GROUP_NAME-workspace"

az monitor log-analytics workspace create `
    --resource-group $GROUP_NAME `
    --workspace-name $WORKSPACE_NAME
$WORKSPACE_NAME="$GROUP_NAME-workspace"

az monitor log-analytics workspace create `
    --resource-group $GROUP_NAME `
    --workspace-name $WORKSPACE_NAME
Run the following commands to get the encoded workspace ID and shared key for an existing Log Analytics workspace. You need them in the next step.Azure CLIPowerShellLOG_ANALYTICS_WORKSPACE_ID=$(az monitor log-analytics workspace show \
    --resource-group $GROUP_NAME \
    --workspace-name $WORKSPACE_NAME \
    --query customerId \
    --output tsv)
LOG_ANALYTICS_WORKSPACE_ID_ENC=$(printf %s $LOG_ANALYTICS_WORKSPACE_ID | base64 -w0) # Needed for the next step
LOG_ANALYTICS_KEY=$(az monitor log-analytics workspace get-shared-keys \
    --resource-group $GROUP_NAME \
    --workspace-name $WORKSPACE_NAME \
    --query primarySharedKey \
    --output tsv)
LOG_ANALYTICS_KEY_ENC=$(printf %s $LOG_ANALYTICS_KEY | base64 -w0) # Needed for the next step$LOG_ANALYTICS_WORKSPACE_ID=$(az monitor log-analytics workspace show `
    --resource-group $GROUP_NAME `
    --workspace-name $WORKSPACE_NAME `
    --query customerId `
    --output tsv)
$LOG_ANALYTICS_WORKSPACE_ID_ENC=[Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes($LOG_ANALYTICS_WORKSPACE_ID))# Needed for the next step
$LOG_ANALYTICS_KEY=$(az monitor log-analytics workspace get-shared-keys `
    --resource-group $GROUP_NAME `
    --workspace-name $WORKSPACE_NAME `
    --query primarySharedKey `
    --output tsv)
$LOG_ANALYTICS_KEY_ENC=[Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes($LOG_ANALYTICS_KEY))
Run the following commands to get the encoded workspace ID and shared key for an existing Log Analytics workspace. You need them in the next step.
Azure CLI
PowerShell
LOG_ANALYTICS_WORKSPACE_ID=$(az monitor log-analytics workspace show \
    --resource-group $GROUP_NAME \
    --workspace-name $WORKSPACE_NAME \
    --query customerId \
    --output tsv)
LOG_ANALYTICS_WORKSPACE_ID_ENC=$(printf %s $LOG_ANALYTICS_WORKSPACE_ID | base64 -w0) # Needed for the next step
LOG_ANALYTICS_KEY=$(az monitor log-analytics workspace get-shared-keys \
    --resource-group $GROUP_NAME \
    --workspace-name $WORKSPACE_NAME \
    --query primarySharedKey \
    --output tsv)
LOG_ANALYTICS_KEY_ENC=$(printf %s $LOG_ANALYTICS_KEY | base64 -w0) # Needed for the next step
LOG_ANALYTICS_WORKSPACE_ID=$(az monitor log-analytics workspace show \
    --resource-group $GROUP_NAME \
    --workspace-name $WORKSPACE_NAME \
    --query customerId \
    --output tsv)
LOG_ANALYTICS_WORKSPACE_ID_ENC=$(printf %s $LOG_ANALYTICS_WORKSPACE_ID | base64 -w0) # Needed for the next step
LOG_ANALYTICS_KEY=$(az monitor log-analytics workspace get-shared-keys \
    --resource-group $GROUP_NAME \
    --workspace-name $WORKSPACE_NAME \
    --query primarySharedKey \
    --output tsv)
LOG_ANALYTICS_KEY_ENC=$(printf %s $LOG_ANALYTICS_KEY | base64 -w0) # Needed for the next step
$LOG_ANALYTICS_WORKSPACE_ID=$(az monitor log-analytics workspace show `
    --resource-group $GROUP_NAME `
    --workspace-name $WORKSPACE_NAME `
    --query customerId `
    --output tsv)
$LOG_ANALYTICS_WORKSPACE_ID_ENC=[Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes($LOG_ANALYTICS_WORKSPACE_ID))# Needed for the next step
$LOG_ANALYTICS_KEY=$(az monitor log-analytics workspace get-shared-keys `
    --resource-group $GROUP_NAME `
    --workspace-name $WORKSPACE_NAME `
    --query primarySharedKey `
    --output tsv)
$LOG_ANALYTICS_KEY_ENC=[Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes($LOG_ANALYTICS_KEY))
$LOG_ANALYTICS_WORKSPACE_ID=$(az monitor log-analytics workspace show `
    --resource-group $GROUP_NAME `
    --workspace-name $WORKSPACE_NAME `
    --query customerId `
    --output tsv)
$LOG_ANALYTICS_WORKSPACE_ID_ENC=[Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes($LOG_ANALYTICS_WORKSPACE_ID))# Needed for the next step
$LOG_ANALYTICS_KEY=$(az monitor log-analytics workspace get-shared-keys `
    --resource-group $GROUP_NAME `
    --workspace-name $WORKSPACE_NAME `
    --query primarySharedKey `
    --output tsv)
$LOG_ANALYTICS_KEY_ENC=[Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes($LOG_ANALYTICS_KEY))
Install the Container Apps extension
Important
If deploying ontoAKS on Azure Localensure that you havesetup HAProxy or a custom load balancerbefore attempting to install the extension.
Set the following environment variables to the desired name of theContainer Apps extension, the cluster namespace in which resources should be provisioned, and the name for the Azure Container Apps connected environment. Choose a unique name for<connected-environment-name>.  The connected environment name will be part of the domain name for app you'll create in the Azure Container Apps connected environment.Azure CLIPowerShellEXTENSION_NAME="appenv-ext"
NAMESPACE="appplat-ns"
CONNECTED_ENVIRONMENT_NAME="<connected-environment-name>"$EXTENSION_NAME="appenv-ext"
$NAMESPACE="appplat-ns"
$CONNECTED_ENVIRONMENT_NAME="<connected-environment-name>"
Set the following environment variables to the desired name of theContainer Apps extension, the cluster namespace in which resources should be provisioned, and the name for the Azure Container Apps connected environment. Choose a unique name for<connected-environment-name>.  The connected environment name will be part of the domain name for app you'll create in the Azure Container Apps connected environment.
<connected-environment-name>
Azure CLI
PowerShell
EXTENSION_NAME="appenv-ext"
NAMESPACE="appplat-ns"
CONNECTED_ENVIRONMENT_NAME="<connected-environment-name>"
EXTENSION_NAME="appenv-ext"
NAMESPACE="appplat-ns"
CONNECTED_ENVIRONMENT_NAME="<connected-environment-name>"
$EXTENSION_NAME="appenv-ext"
$NAMESPACE="appplat-ns"
$CONNECTED_ENVIRONMENT_NAME="<connected-environment-name>"
$EXTENSION_NAME="appenv-ext"
$NAMESPACE="appplat-ns"
$CONNECTED_ENVIRONMENT_NAME="<connected-environment-name>"
Install the Container Apps extension to your Azure Arc-connected cluster with Log Analytics enabled. Log Analytics can't be added to the extension later.Azure CLIPowerShellaz k8s-extension create \
    --resource-group $GROUP_NAME \
    --name $EXTENSION_NAME \
    --cluster-type connectedClusters \
    --cluster-name $CLUSTER_NAME \
    --extension-type 'Microsoft.App.Environment' \
    --release-train stable \
    --auto-upgrade-minor-version true \
    --scope cluster \
    --release-namespace $NAMESPACE \
    --configuration-settings "Microsoft.CustomLocation.ServiceAccount=default" \
    --configuration-settings "appsNamespace=${NAMESPACE}" \
    --configuration-settings "clusterName=${CONNECTED_ENVIRONMENT_NAME}" \
    --configuration-settings "envoy.annotations.service.beta.kubernetes.io/azure-load-balancer-resource-group=${AKS_CLUSTER_GROUP_NAME}" \
    --configuration-settings "logProcessor.appLogs.destination=log-analytics" \
    --configuration-protected-settings "logProcessor.appLogs.logAnalyticsConfig.customerId=${LOG_ANALYTICS_WORKSPACE_ID_ENC}" \
    --configuration-protected-settings "logProcessor.appLogs.logAnalyticsConfig.sharedKey=${LOG_ANALYTICS_KEY_ENC}"az k8s-extension create `
    --resource-group $GROUP_NAME `
    --name $EXTENSION_NAME `
    --cluster-type connectedClusters `
    --cluster-name $CLUSTER_NAME `
    --extension-type 'Microsoft.App.Environment' `
    --release-train stable `
    --auto-upgrade-minor-version true `
    --scope cluster `
    --release-namespace $NAMESPACE `
    --configuration-settings "Microsoft.CustomLocation.ServiceAccount=default" `
    --configuration-settings "appsNamespace=${NAMESPACE}" `
    --configuration-settings "clusterName=${CONNECTED_ENVIRONMENT_NAME}" `
    --configuration-settings "envoy.annotations.service.beta.kubernetes.io/azure-load-balancer-resource-group=${AKS_CLUSTER_GROUP_NAME}" `
    --configuration-settings "logProcessor.appLogs.destination=log-analytics" `
    --configuration-protected-settings "logProcessor.appLogs.logAnalyticsConfig.customerId=${LOG_ANALYTICS_WORKSPACE_ID_ENC}" `
    --configuration-protected-settings "logProcessor.appLogs.logAnalyticsConfig.sharedKey=${LOG_ANALYTICS_KEY_ENC}"NoteTo install the extension without Log Analytics integration, remove the last three--configuration-settingsparameters from the command.The following table describes the various--configuration-settingsparameters when running the command:ParameterDescriptionMicrosoft.CustomLocation.ServiceAccountThe service account created for the custom location. It's recommended that it 's set to the valuedefault.appsNamespaceThe namespace used to create the app definitions and revisions. Itmustmatch that of the extension release namespace.clusterNameThe name of the Container Apps extension Kubernetes environment that will be created against this extension.logProcessor.appLogs.destinationOptional. Destination for application logs. Acceptslog-analyticsornone, choosing none disables platform logs.logProcessor.appLogs.logAnalyticsConfig.customerIdRequired only whenlogProcessor.appLogs.destinationis set tolog-analytics. The base64-encoded Log analytics workspace ID. This parameter should be configured as a protected setting.logProcessor.appLogs.logAnalyticsConfig.sharedKeyRequired only whenlogProcessor.appLogs.destinationis set tolog-analytics. The base64-encoded Log analytics workspace shared key. This parameter should be configured as a protected setting.envoy.annotations.service.beta.kubernetes.io/azure-load-balancer-resource-groupThe name of the resource group in which the Azure Kubernetes Service cluster resides. Valid and required only when the underlying cluster is Azure Kubernetes Service.
Install the Container Apps extension to your Azure Arc-connected cluster with Log Analytics enabled. Log Analytics can't be added to the extension later.
Azure CLI
PowerShell
az k8s-extension create \
    --resource-group $GROUP_NAME \
    --name $EXTENSION_NAME \
    --cluster-type connectedClusters \
    --cluster-name $CLUSTER_NAME \
    --extension-type 'Microsoft.App.Environment' \
    --release-train stable \
    --auto-upgrade-minor-version true \
    --scope cluster \
    --release-namespace $NAMESPACE \
    --configuration-settings "Microsoft.CustomLocation.ServiceAccount=default" \
    --configuration-settings "appsNamespace=${NAMESPACE}" \
    --configuration-settings "clusterName=${CONNECTED_ENVIRONMENT_NAME}" \
    --configuration-settings "envoy.annotations.service.beta.kubernetes.io/azure-load-balancer-resource-group=${AKS_CLUSTER_GROUP_NAME}" \
    --configuration-settings "logProcessor.appLogs.destination=log-analytics" \
    --configuration-protected-settings "logProcessor.appLogs.logAnalyticsConfig.customerId=${LOG_ANALYTICS_WORKSPACE_ID_ENC}" \
    --configuration-protected-settings "logProcessor.appLogs.logAnalyticsConfig.sharedKey=${LOG_ANALYTICS_KEY_ENC}"
az k8s-extension create \
    --resource-group $GROUP_NAME \
    --name $EXTENSION_NAME \
    --cluster-type connectedClusters \
    --cluster-name $CLUSTER_NAME \
    --extension-type 'Microsoft.App.Environment' \
    --release-train stable \
    --auto-upgrade-minor-version true \
    --scope cluster \
    --release-namespace $NAMESPACE \
    --configuration-settings "Microsoft.CustomLocation.ServiceAccount=default" \
    --configuration-settings "appsNamespace=${NAMESPACE}" \
    --configuration-settings "clusterName=${CONNECTED_ENVIRONMENT_NAME}" \
    --configuration-settings "envoy.annotations.service.beta.kubernetes.io/azure-load-balancer-resource-group=${AKS_CLUSTER_GROUP_NAME}" \
    --configuration-settings "logProcessor.appLogs.destination=log-analytics" \
    --configuration-protected-settings "logProcessor.appLogs.logAnalyticsConfig.customerId=${LOG_ANALYTICS_WORKSPACE_ID_ENC}" \
    --configuration-protected-settings "logProcessor.appLogs.logAnalyticsConfig.sharedKey=${LOG_ANALYTICS_KEY_ENC}"
az k8s-extension create `
    --resource-group $GROUP_NAME `
    --name $EXTENSION_NAME `
    --cluster-type connectedClusters `
    --cluster-name $CLUSTER_NAME `
    --extension-type 'Microsoft.App.Environment' `
    --release-train stable `
    --auto-upgrade-minor-version true `
    --scope cluster `
    --release-namespace $NAMESPACE `
    --configuration-settings "Microsoft.CustomLocation.ServiceAccount=default" `
    --configuration-settings "appsNamespace=${NAMESPACE}" `
    --configuration-settings "clusterName=${CONNECTED_ENVIRONMENT_NAME}" `
    --configuration-settings "envoy.annotations.service.beta.kubernetes.io/azure-load-balancer-resource-group=${AKS_CLUSTER_GROUP_NAME}" `
    --configuration-settings "logProcessor.appLogs.destination=log-analytics" `
    --configuration-protected-settings "logProcessor.appLogs.logAnalyticsConfig.customerId=${LOG_ANALYTICS_WORKSPACE_ID_ENC}" `
    --configuration-protected-settings "logProcessor.appLogs.logAnalyticsConfig.sharedKey=${LOG_ANALYTICS_KEY_ENC}"
az k8s-extension create `
    --resource-group $GROUP_NAME `
    --name $EXTENSION_NAME `
    --cluster-type connectedClusters `
    --cluster-name $CLUSTER_NAME `
    --extension-type 'Microsoft.App.Environment' `
    --release-train stable `
    --auto-upgrade-minor-version true `
    --scope cluster `
    --release-namespace $NAMESPACE `
    --configuration-settings "Microsoft.CustomLocation.ServiceAccount=default" `
    --configuration-settings "appsNamespace=${NAMESPACE}" `
    --configuration-settings "clusterName=${CONNECTED_ENVIRONMENT_NAME}" `
    --configuration-settings "envoy.annotations.service.beta.kubernetes.io/azure-load-balancer-resource-group=${AKS_CLUSTER_GROUP_NAME}" `
    --configuration-settings "logProcessor.appLogs.destination=log-analytics" `
    --configuration-protected-settings "logProcessor.appLogs.logAnalyticsConfig.customerId=${LOG_ANALYTICS_WORKSPACE_ID_ENC}" `
    --configuration-protected-settings "logProcessor.appLogs.logAnalyticsConfig.sharedKey=${LOG_ANALYTICS_KEY_ENC}"
Note
To install the extension without Log Analytics integration, remove the last three--configuration-settingsparameters from the command.
--configuration-settings
The following table describes the various--configuration-settingsparameters when running the command:
--configuration-settings
Microsoft.CustomLocation.ServiceAccount
default
appsNamespace
clusterName
logProcessor.appLogs.destination
log-analytics
none
logProcessor.appLogs.logAnalyticsConfig.customerId
logProcessor.appLogs.destination
log-analytics
logProcessor.appLogs.logAnalyticsConfig.sharedKey
logProcessor.appLogs.destination
log-analytics
envoy.annotations.service.beta.kubernetes.io/azure-load-balancer-resource-group
Save theidproperty of the Container Apps extension for later.Azure CLIPowerShellEXTENSION_ID=$(az k8s-extension show \
    --cluster-type connectedClusters \
    --cluster-name $CLUSTER_NAME \
    --resource-group $GROUP_NAME \
    --name $EXTENSION_NAME \
    --query id \
    --output tsv)$EXTENSION_ID=$(az k8s-extension show `
    --cluster-type connectedClusters `
    --cluster-name $CLUSTER_NAME `
    --resource-group $GROUP_NAME `
    --name $EXTENSION_NAME `
    --query id `
    --output tsv)
Save theidproperty of the Container Apps extension for later.
id
Azure CLI
PowerShell
EXTENSION_ID=$(az k8s-extension show \
    --cluster-type connectedClusters \
    --cluster-name $CLUSTER_NAME \
    --resource-group $GROUP_NAME \
    --name $EXTENSION_NAME \
    --query id \
    --output tsv)
EXTENSION_ID=$(az k8s-extension show \
    --cluster-type connectedClusters \
    --cluster-name $CLUSTER_NAME \
    --resource-group $GROUP_NAME \
    --name $EXTENSION_NAME \
    --query id \
    --output tsv)
$EXTENSION_ID=$(az k8s-extension show `
    --cluster-type connectedClusters `
    --cluster-name $CLUSTER_NAME `
    --resource-group $GROUP_NAME `
    --name $EXTENSION_NAME `
    --query id `
    --output tsv)
$EXTENSION_ID=$(az k8s-extension show `
    --cluster-type connectedClusters `
    --cluster-name $CLUSTER_NAME `
    --resource-group $GROUP_NAME `
    --name $EXTENSION_NAME `
    --query id `
    --output tsv)
Wait for the extension to fully install before proceeding. You can have your terminal session wait until it completes by running the following command:az resource wait --ids $EXTENSION_ID --custom "properties.provisioningState!='Pending'" --api-version "2020-07-01-preview"
Wait for the extension to fully install before proceeding. You can have your terminal session wait until it completes by running the following command:
az resource wait --ids $EXTENSION_ID --custom "properties.provisioningState!='Pending'" --api-version "2020-07-01-preview"
az resource wait --ids $EXTENSION_ID --custom "properties.provisioningState!='Pending'" --api-version "2020-07-01-preview"
You can usekubectlto see the pods that have been created in your Kubernetes cluster:
kubectl
kubectl get pods -n $NAMESPACE
kubectl get pods -n $NAMESPACE
To learn more about these pods and their role in the system, seeAzure Arc overview.
Create a custom location
Thecustom locationis an Azure location that you assign to the Azure Container Apps connected environment.
Set the following environment variables to the desired name of the custom location and for the ID of the Azure Arc-connected cluster.Azure CLIPowerShellCUSTOM_LOCATION_NAME="my-custom-location" # Name of the custom location
CONNECTED_CLUSTER_ID=$(az connectedk8s show --resource-group $GROUP_NAME --name $CLUSTER_NAME --query id --output tsv)$CUSTOM_LOCATION_NAME="my-custom-location" # Name of the custom location
$CONNECTED_CLUSTER_ID=$(az connectedk8s show --resource-group $GROUP_NAME --name $CLUSTER_NAME --query id --output tsv)
Set the following environment variables to the desired name of the custom location and for the ID of the Azure Arc-connected cluster.
Azure CLI
PowerShell
CUSTOM_LOCATION_NAME="my-custom-location" # Name of the custom location
CONNECTED_CLUSTER_ID=$(az connectedk8s show --resource-group $GROUP_NAME --name $CLUSTER_NAME --query id --output tsv)
CUSTOM_LOCATION_NAME="my-custom-location" # Name of the custom location
CONNECTED_CLUSTER_ID=$(az connectedk8s show --resource-group $GROUP_NAME --name $CLUSTER_NAME --query id --output tsv)
$CUSTOM_LOCATION_NAME="my-custom-location" # Name of the custom location
$CONNECTED_CLUSTER_ID=$(az connectedk8s show --resource-group $GROUP_NAME --name $CLUSTER_NAME --query id --output tsv)
$CUSTOM_LOCATION_NAME="my-custom-location" # Name of the custom location
$CONNECTED_CLUSTER_ID=$(az connectedk8s show --resource-group $GROUP_NAME --name $CLUSTER_NAME --query id --output tsv)
Create the custom location:Azure CLIPowerShellaz customlocation create \
    --resource-group $GROUP_NAME \
    --name $CUSTOM_LOCATION_NAME \
    --host-resource-id $CONNECTED_CLUSTER_ID \
    --namespace $NAMESPACE \
    --cluster-extension-ids $EXTENSION_IDaz customlocation create `
    --resource-group $GROUP_NAME `
    --name $CUSTOM_LOCATION_NAME `
    --host-resource-id $CONNECTED_CLUSTER_ID `
    --namespace $NAMESPACE `
    --cluster-extension-ids $EXTENSION_IDNoteIf you experience issues creating a custom location on your cluster, you may need toenable the custom location feature on your cluster.  This is required if logged into the CLI using a Service Principal or if you are logged in with a Microsoft Entra user with restricted permissions on the cluster resource.
Create the custom location:
Azure CLI
PowerShell
az customlocation create \
    --resource-group $GROUP_NAME \
    --name $CUSTOM_LOCATION_NAME \
    --host-resource-id $CONNECTED_CLUSTER_ID \
    --namespace $NAMESPACE \
    --cluster-extension-ids $EXTENSION_ID
az customlocation create \
    --resource-group $GROUP_NAME \
    --name $CUSTOM_LOCATION_NAME \
    --host-resource-id $CONNECTED_CLUSTER_ID \
    --namespace $NAMESPACE \
    --cluster-extension-ids $EXTENSION_ID
az customlocation create `
    --resource-group $GROUP_NAME `
    --name $CUSTOM_LOCATION_NAME `
    --host-resource-id $CONNECTED_CLUSTER_ID `
    --namespace $NAMESPACE `
    --cluster-extension-ids $EXTENSION_ID
az customlocation create `
    --resource-group $GROUP_NAME `
    --name $CUSTOM_LOCATION_NAME `
    --host-resource-id $CONNECTED_CLUSTER_ID `
    --namespace $NAMESPACE `
    --cluster-extension-ids $EXTENSION_ID
Note
If you experience issues creating a custom location on your cluster, you may need toenable the custom location feature on your cluster.  This is required if logged into the CLI using a Service Principal or if you are logged in with a Microsoft Entra user with restricted permissions on the cluster resource.
Validate that the custom location is successfully created with the following command. The output should show theprovisioningStateproperty asSucceeded. If not, rerun the command after a minute.az customlocation show --resource-group $GROUP_NAME --name $CUSTOM_LOCATION_NAME
Validate that the custom location is successfully created with the following command. The output should show theprovisioningStateproperty asSucceeded. If not, rerun the command after a minute.
provisioningState
Succeeded
az customlocation show --resource-group $GROUP_NAME --name $CUSTOM_LOCATION_NAME
az customlocation show --resource-group $GROUP_NAME --name $CUSTOM_LOCATION_NAME
Save the custom location ID for the next step.Azure CLIPowerShellCUSTOM_LOCATION_ID=$(az customlocation show \
    --resource-group $GROUP_NAME \
    --name $CUSTOM_LOCATION_NAME \
    --query id \
    --output tsv)$CUSTOM_LOCATION_ID=$(az customlocation show `
    --resource-group $GROUP_NAME `
    --name $CUSTOM_LOCATION_NAME `
    --query id `
    --output tsv)
Save the custom location ID for the next step.
Azure CLI
PowerShell
CUSTOM_LOCATION_ID=$(az customlocation show \
    --resource-group $GROUP_NAME \
    --name $CUSTOM_LOCATION_NAME \
    --query id \
    --output tsv)
CUSTOM_LOCATION_ID=$(az customlocation show \
    --resource-group $GROUP_NAME \
    --name $CUSTOM_LOCATION_NAME \
    --query id \
    --output tsv)
$CUSTOM_LOCATION_ID=$(az customlocation show `
    --resource-group $GROUP_NAME `
    --name $CUSTOM_LOCATION_NAME `
    --query id `
    --output tsv)
$CUSTOM_LOCATION_ID=$(az customlocation show `
    --resource-group $GROUP_NAME `
    --name $CUSTOM_LOCATION_NAME `
    --query id `
    --output tsv)
Create the Azure Container Apps connected environment
Before you can start creating apps in the custom location, you need anAzure Container Apps connected environment.
Create the Container Apps connected environment:Azure CLIPowerShellaz containerapp connected-env create \
    --resource-group $GROUP_NAME \
    --name $CONNECTED_ENVIRONMENT_NAME \
    --custom-location $CUSTOM_LOCATION_ID \
    --location $LOCATIONaz containerapp connected-env create `
    --resource-group $GROUP_NAME `
    --name $CONNECTED_ENVIRONMENT_NAME `
    --custom-location $CUSTOM_LOCATION_ID `
    --location $LOCATION
Create the Container Apps connected environment:
Azure CLI
PowerShell
az containerapp connected-env create \
    --resource-group $GROUP_NAME \
    --name $CONNECTED_ENVIRONMENT_NAME \
    --custom-location $CUSTOM_LOCATION_ID \
    --location $LOCATION
az containerapp connected-env create \
    --resource-group $GROUP_NAME \
    --name $CONNECTED_ENVIRONMENT_NAME \
    --custom-location $CUSTOM_LOCATION_ID \
    --location $LOCATION
az containerapp connected-env create `
    --resource-group $GROUP_NAME `
    --name $CONNECTED_ENVIRONMENT_NAME `
    --custom-location $CUSTOM_LOCATION_ID `
    --location $LOCATION
az containerapp connected-env create `
    --resource-group $GROUP_NAME `
    --name $CONNECTED_ENVIRONMENT_NAME `
    --custom-location $CUSTOM_LOCATION_ID `
    --location $LOCATION
Validate that the Container Apps connected environment is successfully created with the following command. The output should show theprovisioningStateproperty asSucceeded. If not, run it again after a minute.az containerapp connected-env show --resource-group $GROUP_NAME --name $CONNECTED_ENVIRONMENT_NAME
Validate that the Container Apps connected environment is successfully created with the following command. The output should show theprovisioningStateproperty asSucceeded. If not, run it again after a minute.
provisioningState
Succeeded
az containerapp connected-env show --resource-group $GROUP_NAME --name $CONNECTED_ENVIRONMENT_NAME
az containerapp connected-env show --resource-group $GROUP_NAME --name $CONNECTED_ENVIRONMENT_NAME
Next steps
Create a container app on Azure Arc
Feedback
Was this page helpful?
Additional resources