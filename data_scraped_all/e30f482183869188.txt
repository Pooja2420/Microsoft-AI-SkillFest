Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Publish and download pipeline artifacts
Article
2024-10-15
19 contributors
In this article
Azure DevOps Services
Using Azure Pipelines, you can download artifacts from earlier stages in your pipeline or from another pipeline. You can also publish your artifact to a file share or make it available as a pipeline artifact.
Publish artifacts
You can publish your artifacts using YAML, the classic editor, or Azure CLI:
Note
Publishing pipeline artifacts is not supported in release pipelines.
YAML
YAML (task)
Classic
Azure CLI
steps:
- publish: $(System.DefaultWorkingDirectory)/bin/WebApp
  artifact: WebApp
steps:
- publish: $(System.DefaultWorkingDirectory)/bin/WebApp
  artifact: WebApp
Note
Thepublishkeyword is a shortcut for thePublish Pipeline Artifact task.
publish
steps:
- task: PublishPipelineArtifact@1
  inputs:
    targetPath: $(System.DefaultWorkingDirectory)/bin/WebApp
    artifactName: WebApp
steps:
- task: PublishPipelineArtifact@1
  inputs:
    targetPath: $(System.DefaultWorkingDirectory)/bin/WebApp
    artifactName: WebApp
targetPath: the path to the folder or file you want to publish.
artifactName: the name of the artifact that you want to create.
Add thePublish Pipeline Artifacttask.
Add thePublish Pipeline Artifacttask.
Fill out the following fields:Display name: artifact display nameFile or directory path: the path of the file or directory to publishArtifact name: name of the artifact to publishArtifact publish location: choose whether to store the artifact in Azure Pipelines, or to copy it to a file share that must be accessible from the pipeline agent.
Fill out the following fields:
Display name: artifact display name
File or directory path: the path of the file or directory to publish
Artifact name: name of the artifact to publish
Artifact publish location: choose whether to store the artifact in Azure Pipelines, or to copy it to a file share that must be accessible from the pipeline agent.
Run the following command to publish your Artifact:az pipelines runs artifact upload --artifact-name 'WebApp' --path $(System.DefaultWorkingDirectory)/bin/WebApp --run-id '<run id here>'
Run the following command to publish your Artifact:
az pipelines runs artifact upload --artifact-name 'WebApp' --path $(System.DefaultWorkingDirectory)/bin/WebApp --run-id '<run id here>'
az pipelines runs artifact upload --artifact-name 'WebApp' --path $(System.DefaultWorkingDirectory)/bin/WebApp --run-id '<run id here>'
Although the artifact's name is optional, it's a good practice to specify a name that accurately reflects the contents of your artifact. If you plan to consume the artifact from a job running on a different OS, you must ensure all the file paths are valid for the target environment. For example, a file name containing the character\or*will fail to download on Windows.
\
*
The path of the file/folder that you want to publish is required. This can be an absolute or a relative path to$(System.DefaultWorkingDirectory).
$(System.DefaultWorkingDirectory)
Packages in Azure Artifacts are immutable. Once you publish a package, its version is permanently reserved. Rerunning failed jobs will fail if the package has been published. A good way to approach this if you want to be able to rerun failed jobs without facing an errorpackage already exists, is to useConditionsto only run if the previous job succeeded.
jobs:
  - job: Job1
    steps:
      - script: echo Hello Job1!

  - job: Job2
    steps:
      - script: echo Hello Job2!
    dependsOn: Job1
jobs:
  - job: Job1
    steps:
      - script: echo Hello Job1!

  - job: Job2
    steps:
      - script: echo Hello Job2!
    dependsOn: Job1
Note
You will not be billed for storing Pipeline Artifacts. Pipeline Caching is also exempt from storage billing. SeeWhich artifacts count toward my total billed storage.
Caution
Deleting a pipeline run will result in the deletion of all Artifacts associated with that run.
Use .artifactignore
.artifactignoreuses a similar syntax to.gitignore(with few limitations) to specify which files should be ignored when publishing artifacts. Make sure that the.artifactignorefile is located within the directory specified by thetargetPathargument of yourPublish Pipeline Artifacts task.
.artifactignore
.gitignore
Note
The plus sign character+is not supported in URL paths and some builds metadata for package types such as Maven.
+
Example: ignore all files except.exefiles:
**/*
!*.exe
**/*
!*.exe
Important
Azure Artifacts automatically ignore the.gitfolder path when you don't have a.artifactignorefile. You can bypass this by creating an empty.artifactignorefile.
Download artifacts
You can download artifacts using YAML, the classic editor, or Azure CLI.
YAML
YAML (task)
Classic
Azure CLI
steps:
- download: current
  artifact: WebApp
steps:
- download: current
  artifact: WebApp
current: download artifacts produced by the current pipeline run. Options: current, specific.
Note
List of published artifacts will be available only in following dependant jobs. Therefore, usecurrentoption only in separate jobs, that has dependency on jobs with publish artifacts tasks.
current
Tip
You can usePipeline resourcesto define your source in one place and use it anywhere in your pipeline.
Note
Thedownloadkeyword downloads artifacts. For more information, seesteps.download.
download
steps:
- task: DownloadPipelineArtifact@2
  inputs:
    artifact: WebApp
steps:
- task: DownloadPipelineArtifact@2
  inputs:
    artifact: WebApp
artifact: The name of the artifact to download. If left empty, all artifacts associated with the pipeline run will be downloaded.
Add theDownload Pipeline Artifacttask.
Add theDownload Pipeline Artifacttask.
Fill out the following fields:Display name: artifact display nameDownload artifacts produced by: download artifacts produced by the current pipeline run, or from a specific pipeline runArtifact name: name of the artifact to publishMatching patterns: file matching patterns to control which files get downloadedDestination directory: directory to download the artifact files to
Fill out the following fields:
Display name: artifact display name
Download artifacts produced by: download artifacts produced by the current pipeline run, or from a specific pipeline run
Artifact name: name of the artifact to publish
Matching patterns: file matching patterns to control which files get downloaded
Destination directory: directory to download the artifact files to
Run the following command to download your Artifactaz pipelines runs artifact download --artifact-name 'WebApp' --path $(System.DefaultWorkingDirectory)/bin/WebApp --run-id '<run id here>'
Run the following command to download your Artifact
az pipelines runs artifact download --artifact-name 'WebApp' --path $(System.DefaultWorkingDirectory)/bin/WebApp --run-id '<run id here>'
az pipelines runs artifact download --artifact-name 'WebApp' --path $(System.DefaultWorkingDirectory)/bin/WebApp --run-id '<run id here>'
To download a pipeline artifact from a different project within your organization, make sure that you have the appropriatepermissionsconfigured for both the downstream project and the pipeline generating the artifact.
By default, files are downloaded to$(Pipeline.Workspace). If an artifact name wasn't specified, a subdirectory will be created for each downloaded artifact. You can use matching patterns to limit which files get downloaded. SeeFile matching patternsfor more details.
steps:
- download: current
  artifact: WebApp
  patterns: |
    **/*.js
    **/*.zip
steps:
- download: current
  artifact: WebApp
  patterns: |
    **/*.js
    **/*.zip
Artifacts selection
A single download step can download one or more artifacts. To download multiple artifacts, leave theartifact namefield empty and use file matching patterns to limit which files will be downloaded.**is the default file matching pattern (all files in all artifacts).
**
When an artifact name is specified:
Only files for that specific artifact are downloaded. If the artifact doesn't exist, the task will fail.
Only files for that specific artifact are downloaded. If the artifact doesn't exist, the task will fail.
File matching patterns are evaluated relative to the root of the artifact. For example, the pattern*.jarmatches all files with a.jarextension at the root of the artifact.
File matching patterns are evaluated relative to the root of the artifact. For example, the pattern*.jarmatches all files with a.jarextension at the root of the artifact.
*.jar
.jar
The following example illustrates how to download all*.jsfrom an artifactWebApp:
*.js
WebApp
YAML
YAML (task)
Classic
Azure CLI
steps:
- download: current
  artifact: WebApp
  patterns: '**/*.js'
steps:
- download: current
  artifact: WebApp
  patterns: '**/*.js'
steps:
- task: DownloadPipelineArtifact@2
  inputs:
    artifact: WebApp
    patterns: '**/*.js'
    path: $(Build.SourcesDirectory)/bin
steps:
- task: DownloadPipelineArtifact@2
  inputs:
    artifact: WebApp
    patterns: '**/*.js'
    path: $(Build.SourcesDirectory)/bin
artifact: The name of the artifact to download. If left empty, all artifacts associated to the pipeline run will be downloaded.
patterns: One or more file matching patterns that limit which files get downloaded.
path: The destination directory. Can be relative or absolute path.
Add theDownload Pipeline Artifacttask.
Add theDownload Pipeline Artifacttask.
Fill out the following fields:Display name: artifact display nameDownload artifacts produced by: download artifacts produced by the current pipeline run, or from a specific pipeline runArtifact name: name of the artifact to publishMatching patterns: file matching patterns to control which files get downloadedDestination directory: directory to download the artifact files to
Fill out the following fields:
Display name: artifact display name
Download artifacts produced by: download artifacts produced by the current pipeline run, or from a specific pipeline run
Artifact name: name of the artifact to publish
Matching patterns: file matching patterns to control which files get downloaded
Destination directory: directory to download the artifact files to
Not available.
When no artifact name is specified:
Multiple artifacts can be downloaded and the task does not fail if no files are found.
Multiple artifacts can be downloaded and the task does not fail if no files are found.
A subdirectory is created for each artifact.
A subdirectory is created for each artifact.
File matching patterns should assume the first segment of the pattern is (or matches) an artifact name. For example,WebApp/**matches all files from theWebAppartifact. The pattern*/*.dllmatches all files with a.dllextension at the root of each artifact.
File matching patterns should assume the first segment of the pattern is (or matches) an artifact name. For example,WebApp/**matches all files from theWebAppartifact. The pattern*/*.dllmatches all files with a.dllextension at the root of each artifact.
WebApp/**
WebApp
*/*.dll
.dll
The following example illustrates how to download all.zipfiles from all artifacts:
.zip
YAML
YAML (task)
Classic
Azure CLI
steps:
- download: current
  patterns: '**/*.zip'
steps:
- download: current
  patterns: '**/*.zip'
steps:
- task: DownloadPipelineArtifact@2
  inputs:
    patterns: '**/*.zip'
steps:
- task: DownloadPipelineArtifact@2
  inputs:
    patterns: '**/*.zip'
patterns: One or more file matching patterns that limit which files get downloaded.
Add theDownload Pipeline Artifacttask.
Add theDownload Pipeline Artifacttask.
Fill out the following fields:Display name: artifact display nameDownload artifacts produced by: download artifacts produced by the current pipeline run, or from a specific pipeline runArtifact name: name of the artifact to publishMatching patterns: file matching patterns to control which files get downloadedDestination directory: directory to download the artifact files to
Fill out the following fields:
Display name: artifact display name
Download artifacts produced by: download artifacts produced by the current pipeline run, or from a specific pipeline run
Artifact name: name of the artifact to publish
Matching patterns: file matching patterns to control which files get downloaded
Destination directory: directory to download the artifact files to
Not available.
The following example demonstrates how to download pipeline artifacts from a specific build version produced by a particular run:
YAML
YAML (task)
Classic
Azure CLI
resources:
  pipelines:
  - pipeline: myPipeline
    project: 'xxxxxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxx'
    source: '79'
    version: '597'

steps:
- download: myPipeline
  artifact: drop
  patterns: '**'
  displayName: 'Download Pipeline Artifact'
resources:
  pipelines:
  - pipeline: myPipeline
    project: 'xxxxxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxx'
    source: '79'
    version: '597'

steps:
- download: myPipeline
  artifact: drop
  patterns: '**'
  displayName: 'Download Pipeline Artifact'
steps:
- task: DownloadPipelineArtifact@2
  displayName: 'Download Pipeline Artifact'
  inputs:
    buildType: specific
    project: 'xxxxxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxx'
    definition: 79
    buildVersionToDownload: specific
    pipelineId: 597
    artifactName: drop
steps:
- task: DownloadPipelineArtifact@2
  displayName: 'Download Pipeline Artifact'
  inputs:
    buildType: specific
    project: 'xxxxxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxx'
    definition: 79
    buildVersionToDownload: specific
    pipelineId: 597
    artifactName: drop
Add theDownload Pipeline Artifacttask.
Add theDownload Pipeline Artifacttask.
Fill out the following fields:Display name: task display nameDownload artifacts produced by: specific runProject: the project from which to download the pipeline artifactsBuild pipeline: select from the dropdown menuBuild version to download: specific versionBuild: the build from which to download the artifactsArtifact name: the name of the artifact to downloadMatching patterns: one or more file matching patterns that limit which files get downloadedDestination directory: Default: $(Pipeline.Workspace)
Fill out the following fields:
Display name: task display name
Download artifacts produced by: specific run
Project: the project from which to download the pipeline artifacts
Build pipeline: select from the dropdown menu
Build version to download: specific version
Build: the build from which to download the artifacts
Artifact name: the name of the artifact to download
Matching patterns: one or more file matching patterns that limit which files get downloaded
Destination directory: Default: $(Pipeline.Workspace)

Not available.
Artifacts in release and deployment jobs
Artifacts are only downloaded automatically in deployment jobs. By default, artifacts are downloaded to$(Pipeline.Workspace). The download artifact task will be auto injected only when using thedeploylifecycle hook in your deployment. To stop artifacts from being downloaded automatically, add adownloadstep and set its value to none.
In a regular build job, you need to explicitly use thedownloadstep keyword or theDownload Pipeline Artifacttask. Seelifecycle hooksto learn more about the other types of hooks.
$(Pipeline.Workspace)
deploy
download
download
steps:
- download: none
steps:
- download: none
Use Artifacts across stages
If you want to be able to access your artifact across different stages in your pipeline, you can now publish your artifact in one stage and then download it in the next stage leveraging dependencies. SeeStage to stage dependenciesfor more details.
Example
In the following example, we will copy and publish a script folder from our repo to the$(Build.ArtifactStagingDirectory). In the second stage, we will download and run our script.
$(Build.ArtifactStagingDirectory)
trigger:
- main
stages:
- stage: build
  jobs:
  - job: run_build
    pool:
      vmImage: 'windows-latest'
    steps:
    - task: VSBuild@1
      inputs:
        solution: '**/*.sln'
        msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:DesktopBuildPackageLocation="$(build.artifactStagingDirectory)\WebApp.zip" /p:DeployIisAppPath="Default Web Site"'
        platform: 'Any CPU'
        configuration: 'Release'

    - task: CopyFiles@2
      displayName: 'Copy scripts'
      inputs:
        contents: 'scripts/**'
        targetFolder: '$(Build.ArtifactStagingDirectory)'

    - publish: '$(Build.ArtifactStagingDirectory)/scripts'
      displayName: 'Publish script'
      artifact: drop

- stage: test
  dependsOn: build
  jobs:
  - job: run_test
    pool:
      vmImage: 'windows-latest'
    steps:
    - download: current
      artifact: drop
    - task: PowerShell@2
      inputs:
        filePath: '$(Pipeline.Workspace)\drop\test.ps1'
trigger:
- main
stages:
- stage: build
  jobs:
  - job: run_build
    pool:
      vmImage: 'windows-latest'
    steps:
    - task: VSBuild@1
      inputs:
        solution: '**/*.sln'
        msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:DesktopBuildPackageLocation="$(build.artifactStagingDirectory)\WebApp.zip" /p:DeployIisAppPath="Default Web Site"'
        platform: 'Any CPU'
        configuration: 'Release'

    - task: CopyFiles@2
      displayName: 'Copy scripts'
      inputs:
        contents: 'scripts/**'
        targetFolder: '$(Build.ArtifactStagingDirectory)'

    - publish: '$(Build.ArtifactStagingDirectory)/scripts'
      displayName: 'Publish script'
      artifact: drop

- stage: test
  dependsOn: build
  jobs:
  - job: run_test
    pool:
      vmImage: 'windows-latest'
    steps:
    - download: current
      artifact: drop
    - task: PowerShell@2
      inputs:
        filePath: '$(Pipeline.Workspace)\drop\test.ps1'

Migrate from build artifacts
Pipeline artifacts are the next generation of build artifacts and are the recommended way to work with artifacts. Artifacts published using thePublish Build Artifacts taskcan still be downloaded usingDownload Build Artifacts, but we recommend using the latestDownload Pipeline Artifacttask instead.
When migrating from build artifacts to pipeline artifacts:
By default, theDownload Pipeline Artifacttask downloads files to$(Pipeline.Workspace). This is the default and recommended path for all types of artifacts.
By default, theDownload Pipeline Artifacttask downloads files to$(Pipeline.Workspace). This is the default and recommended path for all types of artifacts.
$(Pipeline.Workspace)
File matching patterns for theDownload Build Artifactstask are expected to start with (or match) the artifact name, regardless if a specific artifact was specified or not. In theDownload Pipeline Artifacttask, patterns should not include the artifact name when an artifact name has already been specified. For more information, seesingle artifact selection.
File matching patterns for theDownload Build Artifactstask are expected to start with (or match) the artifact name, regardless if a specific artifact was specified or not. In theDownload Pipeline Artifacttask, patterns should not include the artifact name when an artifact name has already been specified. For more information, seesingle artifact selection.
Example
- task: PublishPipelineArtifact@1
  displayName: 'Publish pipeline artifact'
  inputs:
    targetPath: '$(Pipeline.Workspace)'
    ${{ if eq(variables['Build.SourceBranchName'], 'main') }}:
        artifact: 'prod'
    ${{ else }}:
        artifact: 'dev'
    publishLocation: 'pipeline'
- task: PublishPipelineArtifact@1
  displayName: 'Publish pipeline artifact'
  inputs:
    targetPath: '$(Pipeline.Workspace)'
    ${{ if eq(variables['Build.SourceBranchName'], 'main') }}:
        artifact: 'prod'
    ${{ else }}:
        artifact: 'dev'
    publishLocation: 'pipeline'
targetPath: (Required) The path of the file or directory to publish. Can be absolute or relative to the default working directory. Can includevariables, but wildcards are not supported. Default: $(Pipeline.Workspace).
targetPath: (Required) The path of the file or directory to publish. Can be absolute or relative to the default working directory. Can includevariables, but wildcards are not supported. Default: $(Pipeline.Workspace).
publishLocation: (Required) Artifacts publish location. Choose whether to store the artifact in Azure Pipelines, or to copy it to a file share that must be accessible from the pipeline agent. Options:pipeline,filepath. Default: pipeline.
publishLocation: (Required) Artifacts publish location. Choose whether to store the artifact in Azure Pipelines, or to copy it to a file share that must be accessible from the pipeline agent. Options:pipeline,filepath. Default: pipeline.
pipeline
filepath
artifact: (Optional) Name of the artifact to publish. If not set, defaults to a unique ID scoped to the job.
artifact: (Optional) Name of the artifact to publish. If not set, defaults to a unique ID scoped to the job.
View published Artifacts
Once your pipeline run is complete, follow these steps to view or download your published artifact:
Sign in to your Azure DevOps organization, and then navigate to your project.
Sign in to your Azure DevOps organization, and then navigate to your project.
SelectPipelines, select your pipeline run, and then select theSummarytab.
SelectPipelines, select your pipeline run, and then select theSummarytab.
In the related section, select the published artifact.
In the related section, select the published artifact.

Expand the drop folder to locate your artifact. You can then download your Artifact and explore its content.
Expand the drop folder to locate your artifact. You can then download your Artifact and explore its content.

FAQ
A: Build artifacts are the files generated by your build. SeeBuild Artifactsto learn more about how to publish and consume your build artifacts.
A: Pipeline artifacts are not deletable or overwritable. If you want to regenerate artifacts when you re-run a failed job, you can include the job ID in the artifact name.$(system.JobId)is the appropriate variable for this purpose. SeeSystem variablesto learn more about predefined variables.
$(system.JobId)
A: If your organization is using a firewall or a proxy server, make sure you allowAzure Artifacts Domain URLs and IP addresses.
Related articles
Build artifacts
Releases in Azure Pipelines
Release artifacts and artifact sources
How to mitigate risk when using private package feeds
Feedback
Was this page helpful?
Additional resources