Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Task types & usage
Article
2025-01-09
17 contributors
In this article
Azure DevOps Services | Azure DevOps Server 2022 - Azure DevOps Server 2019
Ataskperforms an action in a pipeline and is a packaged script or procedure that's
abstracted with a set of inputs. Tasks are the building blocks for defining automation in a pipeline.
When you run ajob, all the tasks are run in sequence, one after the other.
To run the same set of tasks in parallel on multiple agents, or to run some tasks without using an agent, seejobs.
By default, all tasks run in the same context, whether that's on thehostor in ajob container.
You might optionally usestep targetsto control context for an individual task.
Learn more about how to specify properties for a task with thebuilt-in tasks.
To learn more about the general attributes supported by tasks, see theYAML Reference forsteps.task.
Custom tasks
Azure DevOps includesbuilt-in tasksto enable fundamental build and deployment scenarios. You also cancreate your own custom task.
In addition,Visual Studio Marketplaceoffers many extensions; each of which, when installed to your
subscription or collection, extends the task catalog with one or more tasks.
You can also write your owncustom extensionsto add tasks to Azure Pipelines.
In YAML pipelines, you refer to tasks by name. If a name matches both an in-box task
and a custom task, the in-box task takes precedence. You can use the task GUID or a fully qualified
name for the custom task to avoid this risk:
steps:
- task: myPublisherId.myExtensionId.myContributionId.myTaskName@1 #format example
- task: qetza.replacetokens.replacetokens-task.replacetokens@3 #working example
steps:
- task: myPublisherId.myExtensionId.myContributionId.myTaskName@1 #format example
- task: qetza.replacetokens.replacetokens-task.replacetokens@3 #working example
To findmyPublisherIdandmyExtensionId, selectGeton a task in the marketplace. The values after theitemNamein your URL string aremyPublisherIdandmyExtensionId. You can also find the fully qualified name by adding the task to aRelease pipelineand selectingView YAMLwhen editing the task.
myPublisherId
myExtensionId
itemName
myPublisherId
myExtensionId

Task versions
Tasks are versioned, and you must specify the major version of the task used in your
pipeline. This can help to prevent issues when new versions of a task are released.
Tasks are typically backwards compatible, but in some scenarios you may
encounter unpredictable errors when a task is automatically updated.
When a new minor version is released (for example, 1.2 to 1.3), your pipeline
automatically uses the new version. However, if a new major version is released
(for example 2.0), your pipeline continues to use the major version you specified
until you edit the pipeline and manually change to the new major version.
The log will include an alert that a new major version is available.
You can set which minor version gets used by specifying the full version number of a task after the@sign (example:GoTool@0.3.1). You can only use task versions that exist for yourorganization.
@
GoTool@0.3.1
YAML
Classic
In YAML, you specify the major version using@in the task name.
For example, to pin to version 2 of thePublishTestResultstask:
@
PublishTestResults
steps:
- task: PublishTestResults@2
steps:
- task: PublishTestResults@2
Each task in a pipeline has aVersionselector to let you choose the version you want.
If you select a preview version (such as1.* Preview), the
version is still under development and might have issues.
If you change the version and have problems with your builds, you can revert the pipeline change from theHistorytab.
The ability to restore to an older version of a release pipeline isn't currently available. You must manually revert the changes to the release pipeline, then save the pipeline.
Consider cloning the pipeline and testing the cloned pipeline with the new major task version.

Task control options
Each task offers you someControl Options.
YAML
Classic
Control options are available as keys on thetasksection.
task
- task: string # Required as first property. Name of the task to run.
  inputs: # Inputs for the task.
    string: string # Name/value pairs
  condition: string # Evaluate this condition expression to determine whether to run this task.
  continueOnError: boolean # Continue running even on failure?
  displayName: string # Human-readable name for the task.
  target: string | target # Environment in which to run this task.
  enabled: boolean # Run this task when the job runs?
  env: # Variables to map into the process's environment.
    string: string # Name/value pairs
  name: string # ID of the step.
  timeoutInMinutes: string # Time to wait for this task to complete before the server kills it.
- task: string # Required as first property. Name of the task to run.
  inputs: # Inputs for the task.
    string: string # Name/value pairs
  condition: string # Evaluate this condition expression to determine whether to run this task.
  continueOnError: boolean # Continue running even on failure?
  displayName: string # Human-readable name for the task.
  target: string | target # Environment in which to run this task.
  enabled: boolean # Run this task when the job runs?
  env: # Variables to map into the process's environment.
    string: string # Name/value pairs
  name: string # ID of the step.
  timeoutInMinutes: string # Time to wait for this task to complete before the server kills it.
Control options are available as keys on thetasksection.
task
- task: string # Required as first property. Name of the task to run.
  inputs: # Inputs for the task.
    string: string # Name/value pairs
  condition: string # Evaluate this condition expression to determine whether to run this task.
  continueOnError: boolean # Continue running even on failure?
  displayName: string # Human-readable name for the task.
  target: string | target # Environment in which to run this task.
  enabled: boolean # Run this task when the job runs?
  env: # Variables to map into the process's environment.
    string: string # Name/value pairs
  name: string # ID of the step.
  timeoutInMinutes: string # Time to wait for this task to complete before the server kills it.
  retryCountOnTaskFailure: string # Number of retries if the task fails.
- task: string # Required as first property. Name of the task to run.
  inputs: # Inputs for the task.
    string: string # Name/value pairs
  condition: string # Evaluate this condition expression to determine whether to run this task.
  continueOnError: boolean # Continue running even on failure?
  displayName: string # Human-readable name for the task.
  target: string | target # Environment in which to run this task.
  enabled: boolean # Run this task when the job runs?
  env: # Variables to map into the process's environment.
    string: string # Name/value pairs
  name: string # ID of the step.
  timeoutInMinutes: string # Time to wait for this task to complete before the server kills it.
  retryCountOnTaskFailure: string # Number of retries if the task fails.
Note
A given task or job can't unilaterally decide whether the job/stage continues. What it can do is offer a status ofsucceededorfailed, and downstream tasks/jobs each have a condition computation that lets them decide whether to run or not. The default condition which is effectively "run if we're in a successful state".
Continue on erroralters this in a subtle way. It effectively "tricks" all downstream steps/jobs into treating any result as "success" for the purposes of making that decision. Or to put it another way, it says "don't consider the failure of this task when you're making a decision about the condition of the containing structure".
The timeout period begins when the task starts running. It doesn't include the
time the task is queued or is waiting for an agent.
Note
Pipelines may have a job level timeout specified in addition to a task level timeout. If the job level timeout interval elapses before your step completes, the running job is terminated, even if the step is configured with a longer timeout interval. For more information, seeTimeouts.
In this YAML,PublishTestResults@2runs even if the previous step fails because of thesucceededOrFailed() condition.
PublishTestResults@2
steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.x'
    architecture: 'x64'
- task: PublishTestResults@2
  inputs:
    testResultsFiles: "**/TEST-*.xml"
  condition: succeededOrFailed()
steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.x'
    architecture: 'x64'
- task: PublishTestResults@2
  inputs:
    testResultsFiles: "**/TEST-*.xml"
  condition: succeededOrFailed()
Conditions
Only when all previous direct and indirect dependencies with the same agent pool succeed. If you have different agent pools, those stages or jobs run concurrently. This condition is the default if no condition is set in the YAML.
Only when all previous direct and indirect dependencies with the same agent pool succeed. If you have different agent pools, those stages or jobs run concurrently. This condition is the default if no condition is set in the YAML.
Even if a previous dependency fails, unless the run is canceled. UsesucceededOrFailed()in the YAML for this condition.
Even if a previous dependency fails, unless the run is canceled. UsesucceededOrFailed()in the YAML for this condition.
succeededOrFailed()
Even if a previous dependency fails, and even if the run is canceled. Usealways()in the YAML for this condition.
Even if a previous dependency fails, and even if the run is canceled. Usealways()in the YAML for this condition.
always()
Only when a previous dependency fails. Usefailed()in the YAML for this condition.
Only when a previous dependency fails. Usefailed()in the YAML for this condition.
failed()
Custom conditions, which are composed ofexpressions
Step target
Tasks run in an execution context, which is either the agent host or a container.
An individual step might override its context by specifying atarget.
Available options are the wordhostto target the agent host plus any containers defined in the pipeline.
For example:
target
host
resources:
  containers:
  - container: pycontainer
    image: python:3.11

steps:
- task: SampleTask@1
  target: host
- task: AnotherTask@1
  target: pycontainer
resources:
  containers:
  - container: pycontainer
    image: python:3.11

steps:
- task: SampleTask@1
  target: host
- task: AnotherTask@1
  target: pycontainer
Here, theSampleTaskruns on the host andAnotherTaskruns in a container.
SampleTask
AnotherTask
Number of retries if task failed
UseretryCountOnTaskFailureto specify the number of retries if the task fails. The default is zero retries. For more information on task properties, seesteps.task in the YAML Schema.
retryCountOnTaskFailure
- task: <name of task>
  retryCountOnTaskFailure: <max number of retries>
   ...
- task: <name of task>
  retryCountOnTaskFailure: <max number of retries>
   ...
Note
Requires agent version 2.194.0 or later. On Azure DevOps Server 2022, retries are not supported foragentless tasks. For more information, seeAzure DevOps service update November 16, 2021 - Automatic retries for a task, andAzure DevOps service update June 14, 2025 - Retries for server tasks.
The maximum number of retries allowed is 10.
The wait time between each retry increases after each failed attempt, following an exponential backoff strategy. The 1st retry happens after 1 second, the 2nd retry after 4 seconds, and the 10th retry after 100 seconds.
There is no assumption about the idempotency of the task. If the task has side-effects (for instance, if it created an external resource partially), then it may fail the second time it is run.
There is no information about the retry count made available to the task.
A warning is added to the task logs indicating that it has failed before it is retried.
All of the attempts to retry a task are shown in the UI as part of the same task node.
Enabled
Clear this check box to disable a task. This is useful
when you want to temporarily take task out of the process for testing or for specific deployments.
Tip
You can also right-click the task to toggle this setting.
Timeout
The timeout for this task in minutes. The default is zero (infinite timeout).
Setting a value other than zero overrides the setting for the parent task job.
The timeout period begins when the task starts running. It doesn't include the
time the task is queued or is waiting for an agent.
Azure Pipelines options
Select this option if you want subsequent tasks in the same job to possibly run even if this task fails. The build or deployment will be no better than partially successful. Whether subsequent tasks run depends on theRun this tasksetting.
Specify the number of retries if this task fails. The default is zero.
Note
The failing task retries in seconds. The wait time between each retry increases after each failed attempt.
There is no assumption about the idempotency of the task. If the task has side-effects (for instance, if it created an external resource partially), then it may fail the second time it is run.
There is no information about the retry count made available to the task.
A warning is added to the task logs indicating that it has failed before it is retried.
All of the attempts to retry a task are shown in the UI as part of the same task node.
Select the condition for running this task:
Only when all previous direct and indirect dependencies with the same agent pool succeed. If you have different agent pools, those stages or jobs run concurrently. This condition is the default if no condition is set in the YAML.
Only when all previous direct and indirect dependencies with the same agent pool succeed. If you have different agent pools, those stages or jobs run concurrently. This condition is the default if no condition is set in the YAML.
Even if a previous dependency fails, unless the run is canceled. UsesucceededOrFailed()in the YAML for this condition.
Even if a previous dependency fails, unless the run is canceled. UsesucceededOrFailed()in the YAML for this condition.
succeededOrFailed()
Even if a previous dependency fails, and even if the run is canceled. Usealways()in the YAML for this condition.
Even if a previous dependency fails, and even if the run is canceled. Usealways()in the YAML for this condition.
always()
Only when a previous dependency fails. Usefailed()in the YAML for this condition.
Only when a previous dependency fails. Usefailed()in the YAML for this condition.
failed()
Custom conditions, which are composed ofexpressions
Note
If you're running tasks in cases when the build is canceled, then make sure you specify sufficient time for these tasks to run thepipeline options.
Select this option if you want subsequent tasks in the same job to run even if this task fails. The build or deployment will be no better than partially successful.
Select this check box if you want the task to run even if the build or deployment is failing.
Environment variables
YAML
Classic
Each task has anenvproperty that is a list of string pairs that represent environment variables mapped into the task process.
env
- task: AzureCLI@2
  displayName: Azure CLI
  inputs: # Specific to each task
  env:
    ENV_VARIABLE_NAME: value
    ENV_VARIABLE_NAME2: value
  ...
- task: AzureCLI@2
  displayName: Azure CLI
  inputs: # Specific to each task
  env:
    ENV_VARIABLE_NAME: value
    ENV_VARIABLE_NAME2: value
  ...
The following example runs thescriptstep, which is a shortcut for theCommand line task, followed by the equivalent task syntax. This example assigns a value to theAZURE_DEVOPS_EXT_PATenvironment variable, which is used to authenticating with Azure DevOps CLI.
script
AZURE_DEVOPS_EXT_PAT
# Using the script shortcut syntax
- script: az pipelines variable-group list --output table
  env:
    AZURE_DEVOPS_EXT_PAT: $(System.AccessToken)
  displayName: 'List variable groups using the script step'

# Using the task syntax
- task: CmdLine@2
  inputs:
    script: az pipelines variable-group list --output table
  env:
    AZURE_DEVOPS_EXT_PAT: $(System.AccessToken)
  displayName: 'List variable groups using the command line task'
# Using the script shortcut syntax
- script: az pipelines variable-group list --output table
  env:
    AZURE_DEVOPS_EXT_PAT: $(System.AccessToken)
  displayName: 'List variable groups using the script step'

# Using the task syntax
- task: CmdLine@2
  inputs:
    script: az pipelines variable-group list --output table
  env:
    AZURE_DEVOPS_EXT_PAT: $(System.AccessToken)
  displayName: 'List variable groups using the command line task'
- task: Bash@3
  inputs:
     targetType: # specific to each task
  env:
    ENV_VARIABLE_NAME: value
    ENV_VARIABLE_NAME2: value
  ...
- task: Bash@3
  inputs:
     targetType: # specific to each task
  env:
    ENV_VARIABLE_NAME: value
    ENV_VARIABLE_NAME2: value
  ...
The following example runs thescriptstep, which is a shortcut for theBash@3, followed by the equivalent task syntax. This example assigns a value to theENV_VARIABLE_NAMEenvironment variable and echoes the value.
script
ENV_VARIABLE_NAME
# Using the script shortcut syntax
- script: echo "This is " $ENV_VARIABLE_NAME
  env:
    ENV_VARIABLE_NAME: "my value"
  displayName: 'echo environment variable'

# Using the task syntax
- task: Bash@2
  inputs:
    script: echo "This is " $ENV_VARIABLE_NAME
  env:
    ENV_VARIABLE_NAME: "my value"
  displayName: 'echo environment variable'
# Using the script shortcut syntax
- script: echo "This is " $ENV_VARIABLE_NAME
  env:
    ENV_VARIABLE_NAME: "my value"
  displayName: 'echo environment variable'

# Using the task syntax
- task: Bash@2
  inputs:
    script: echo "This is " $ENV_VARIABLE_NAME
  env:
    ENV_VARIABLE_NAME: "my value"
  displayName: 'echo environment variable'
You can work with environment variables using theEnvironment Variablessection of the task editor.

Build tool installers (Azure Pipelines)
Tool installers enable your build pipeline to install and control your dependencies. Specifically, you can:
Install a tool or runtime on the fly (even onMicrosoft-hosted agents) just in time for your CI build.
Install a tool or runtime on the fly (even onMicrosoft-hosted agents) just in time for your CI build.
Validate your app or library against multiple versions of a dependency such as Node.js.
Validate your app or library against multiple versions of a dependency such as Node.js.
For example, you can set up your build pipeline to run and validate your app for multiple versions of Node.js.
Example: Test and validate your app on multiple versions of Node.js
YAML
Classic
Create an azure-pipelines.yml file in your project's base directory with the following contents.
pool:
  vmImage: ubuntu-latest

steps:
# Node install
- task: UseNode@1
  displayName: Node install
  inputs:
    version: '16.x' # The version we're installing
# Write the installed version to the command line
- script: which node
pool:
  vmImage: ubuntu-latest

steps:
# Node install
- task: UseNode@1
  displayName: Node install
  inputs:
    version: '16.x' # The version we're installing
# Write the installed version to the command line
- script: which node
Create a new build pipelineand run it. Observe how the build is run.
TheNode.js Tool Installerdownloads the Node.js version if it isn't already on the agent. TheCommand Linescript logs the location of the Node.js version on disk.
Create a new build pipeline(start with an empty process) to try this out.
Apply the following agent settings:
SetParallelismtoMulti-configuration
SetParallelismtoMulti-configuration
SpecifyMultipliers:
SpecifyMultipliers:
NodeVersionSpec
NodeVersionSpec
SetMaximum number of agentsto 2
Add these tasks:
Tool: Node.js Installer
Version Spec:$(NodeVersionSpec)
Version Spec:
$(NodeVersionSpec)
$(NodeVersionSpec)
Utility: Command Line
Script (if you're running on a Windows agent)where node
Script (if you're running on a Windows agent)
where node
where node
Script (if you're running on a macOS or Linux agent)which node
Script (if you're running on a macOS or Linux agent)
which node
which node
On theVariables tab, define this variable:
NodeVersionSpec
10.x, 12.x
SelectSave & queue. Observe how two builds are run. TheNode.js Tool Installerdownloads each of the Node.js versions if they aren't already on the agent. TheCommand Linetask logs the location of the Node.js version on disk.
Tool installer tasks
For a list of our tool installer tasks, seeTool installer tasks.
Disabling in-box and Marketplace tasks
On the organization settings page, you can disable Marketplace tasks, in-box tasks, or both.
Disabling Marketplace tasks can helpincrease securityof your pipelines.
If you disable both in-box and Marketplace tasks, only tasks you install usingtfxis available.
tfx
Related articles
Jobs
Task groups
Built-in task catalog
Help and support
Exploretroubleshooting tips.
Get advice onStack Overflow.
Post your questions, search for answers, or suggest a feature in theAzure DevOps Developer Community.
Getsupport for Azure DevOps.
Feedback
Was this page helpful?
Additional resources