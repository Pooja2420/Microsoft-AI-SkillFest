Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Access and identity options for AKS enabled by Azure Arc
Article
2024-07-31
2 contributors
In this article
Applies to: AKS on Azure Local
You can authenticate, authorize, secure, and control access to Kubernetes clusters in various ways:
WithKubernetes role-based access control (Kubernetes RBAC), you can grant users, groups, and service accounts access to only the Kubernetes resources they need.
WithAKS clusters enabled with Azure RBAC, you can further enhance the security and permissions structure using Microsoft Entra ID and Azure RBAC.
Kubernetes RBAC and Azure RBAC help you secure your cluster access and provide only the minimum required permissions to developers and operators.
This article introduces the core concepts that help you authenticate and assign permissions in AKS.
Kubernetes RBAC
Kubernetes RBAC provides granular filtering of user actions. With this control mechanism:
You assign users or user groups permission to create and modify resources or view logs from running application workloads.
You can scope permissions to a single namespace or across the entire AKS cluster.
You createrolesto define permissions, and then assign those roles to users withrole bindings.
For more information, seeUsing Kubernetes RBAC authorization.
Roles and ClusterRoles
Before assigning permissions to users with Kubernetes RBAC, you define user permissions as arole. Grant permissions within a Kubernetes namespace using roles.
Kubernetes roles grant permissions; they don't deny permissions. To grant permissions across the entire cluster or to cluster resources outside a given namespace, you can useClusterRoles.
A ClusterRole grants and applies permissions to resources across the entire cluster, not a specific namespace.
RoleBindings and ClusterRoleBindings
Once you define roles to grant permissions to resources, you assign those Kubernetes RBAC permissions with aRoleBinding. If your AKS clusterintegrates with Microsoft Entra ID, RoleBindings grant permissions to Microsoft Entra users to perform actions within the cluster. SeeControl access using Microsoft Entra ID and Kubernetes RBAC
Assign roles to users for a given namespace using RoleBindings. With RoleBindings, you can logically segregate a single AKS cluster, only enabling users to access the application resources in their assigned namespace.
To bind roles across the entire cluster, or to cluster resources outside a given namespace, useClusterRoleBindings.
With a ClusterRoleBinding, you bind roles to users and apply to resources across the entire cluster, not a specific namespace. This approach lets you grant administrators or support engineers access to all resources in the AKS cluster.
Kubernetes service accounts
Service accountsare one of the primary user types in Kubernetes. The Kubernetes API holds and manages service accounts. Service account credentials are stored as Kubernetes secrets, allowing them to be used by authorized pods to communicate with the API server. Most API requests provide an authentication token for a service account or a normal user account.
Normal user accounts allow more traditional access for human administrators or developers, not just services and processes. While Kubernetes doesn't provide an identity management solution to store regular user accounts and passwords, you can integrate external identity solutions into Kubernetes. For AKS clusters, this integrated identity solution is Microsoft Entra ID.
For more information about the identity options in Kubernetes, seeKubernetes authentication.
Azure role-based access control
Azure Role-based Access Control (RBAC) is an authorization system built onAzure Resource Managerthat provides fine-grained access management of Azure resources.
With Azure RBAC, you create arole definitionthat outlines the permissions to be applied. You then assign a user or group this role definition via arole assignmentfor a particularscope. The scope can be an individual resource, a resource group, or across the subscription.
For more information, seeWhat is Azure role-based access control (Azure RBAC)?
There are two required levels of access to fully operate an AKS Arc cluster:
Access the AKS resource in your Azure subscription.Control scaling or upgrading your cluster using the AKS enabled by Azure Arc APIs.Pull youradmin, certificate-based kubeconfig.Pull yourEntra ID enabled kubeconfig.
Control scaling or upgrading your cluster using the AKS enabled by Azure Arc APIs.
Pull youradmin, certificate-based kubeconfig.
Pull yourEntra ID enabled kubeconfig.
Access to the Kubernetes API. This access is controlled by either:Kubernetes RBAC, orIntegrating Azure RBAC with AKS for Kubernetes authorization.
Kubernetes RBAC, or
Integrating Azure RBAC with AKS for Kubernetes authorization.
Azure RBAC to authorize access to the AKS resource
With Azure RBAC, you can provide your users (or identities) with granular access to AKS resources across one or more subscriptions. There are three roles available for this control plane action:Azure Kubernetes Service Arc Cluster Admin Role,Azure Kubernetes Service Arc Cluster User Role, andAzure Kubernetes Service Arc Contributor Role. Each role has a different permission scope as described inAzure built-in roles for Containers. For example, you can use theAzure Kubernetes Service Arc Contributorrole to create, scale, and upgrade your cluster. Meanwhile, another user with theAzure Kubernetes Service Arc Cluster Adminrole only has permission to pull theadmin kubeconfig.
Azure RBAC for Kubernetes authorization
With the Azure RBAC integration, AKS uses a Kubernetes authorization webhook server so you can manage Microsoft Entra integrated Kubernetes cluster resource permissions and assignments using Azure role definition and role assignments.

As shown in this diagram, when using the Azure RBAC integration, all requests to the Kubernetes API follow the same authentication flow as described inMicrosoft Entra integration.
If the identity making the request exists in Microsoft Entra ID, Azure teams with Kubernetes RBAC to authorize the request. If the identity exists outside of Microsoft Entra ID (for example, a Kubernetes service account), authorization defers to the normal Kubernetes RBAC.
In this scenario, you use Azure RBAC mechanisms and APIs to assign users built-in roles or create custom roles, just as you would with Kubernetes roles.
With this feature, you not only give users permissions to the AKS resource across subscriptions, but you also configure the role and permissions for inside each of those clusters controlling Kubernetes API access. There are four built-in roles available for this data plane action, each with its own scope of permissions,as described in the built-in rolessection.
Important
You must enable Azure RBAC for Kubernetes authorization before doing role assignment. For more details and step by step guidance, seeUse Azure RBAC for Kubernetes authorization.
Built-in roles
AKS enabled by Arc provides the following five built-in roles. They are similar to theKubernetes built-in roleswith a few differences, such as supporting CRDs. See the full list of actions allowed by eachAzure built-in role.
Microsoft Entra integration
Enhance your AKS cluster security with Microsoft Entra integration. Built on enterprise identity management experience, Microsoft Entra ID is a multitenant, cloud-based directory and identity management service that combines core directory services, application access management, and identity protection. With Microsoft Entra ID, you can integrate on-premises identities into AKS clusters to provide a single source for account management and security.

With Microsoft Entra-integrated AKS clusters, you can grant users or groups access to Kubernetes resources within a namespace or across the cluster.
To obtain akubectlconfiguration context, run theaz aksarc get-credentialscommand.
When a user interacts with the AKS cluster usingkubectl, they're prompted to sign in with their Microsoft Entra credentials.
This approach provides a single source for user account management and password credentials. The user can only access the resources as defined by the Kubernetes cluster administrator.
Microsoft Entra authentication is provided to AKS clusters withOpenID Connect. OpenID Connect is an identity layer built on top of the OAuth 2.0 protocol. For more information about OpenID Connect, see theOpenID Connect documentation. From inside the Kubernetes cluster,Webhook Token Authenticationis used to verify authentication tokens. Webhook token authentication is configured and managed as part of the AKS cluster.
Summary
The following table contains a summary of how users can authenticate to Kubernetes when Microsoft Entra integration is enabled. In all cases, the sequence of commands is:
Runaz loginto authenticate to Azure.
az login
Runaz aksarc get-credentialsto download credentials for the Kubernetes cluster into.kube/config.
az aksarc get-credentials
.kube/config
Runkubectlcommands.The first command can trigger browser-based authentication to authenticate to the Kubernetes cluster, as described in the following table.
kubectl
The first command can trigger browser-based authentication to authenticate to the Kubernetes cluster, as described in the following table.
az aksarc get-credentials
--admin
az aksarc get-credentials
--admin
--aad-admin-group-object-ids
cluster-admin
kubectl
cluster-admin
Next steps
To get started with Kubernetes RBAC for Kubernetes authorization, seeControl access using Microsoft Entra ID and Kubernetes RBAC
To get started with Azure RBAC for Kubernetes authorization, seeUse Azure RBAC for Kubernetes Authorization
Feedback
Was this page helpful?
Additional resources