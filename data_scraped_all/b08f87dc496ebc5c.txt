Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Tutorial: Deploy configurations using GitOps on an Azure Arc-enabled Kubernetes cluster
Article
2024-11-21
7 contributors
In this article
Important
This tutorial is for GitOps with Flux v1.  GitOps with Flux v2 is now available for Azure Arc-enabled Kubernetes and Azure Kubernetes Service (AKS) clusters;go to the tutorial for GitOps with Flux v2.  We recommendmigrating to Flux v2as soon as possible.
Support for Flux v1-based cluster configuration resources created prior to January 1, 2024 will end onMay 24, 2025. Starting on January 1, 2024, you won't be able to create new Flux v1-based cluster configuration resources.
In this tutorial, you will apply Flux v1 configurations using GitOps on an Azure Arc-enabled Kubernetes cluster. You'll learn how to:
Create a configuration on an Azure Arc-enabled Kubernetes cluster using an example Git repository.
Validate that the configuration was successfully created.
Apply configuration from a private Git repository.
Validate the Kubernetes configuration.
Prerequisites
An Azure account with an active subscription.Create an account for free.
An Azure account with an active subscription.Create an account for free.
An existing Azure Arc-enabled Kubernetes connected cluster. If you haven't connected a cluster yet, walk through ourConnect an Azure Arc-enabled Kubernetes cluster quickstart.
An existing Azure Arc-enabled Kubernetes connected cluster. If you haven't connected a cluster yet, walk through ourConnect an Azure Arc-enabled Kubernetes cluster quickstart.
Install thek8s-configurationAzure CLI extension of version >= 1.0.0:az extension add --name k8s-configurationTipIf thek8s-configurationextension is already installed, you can update it to the latest version using the following command -az extension update --name k8s-configuration
Install thek8s-configurationAzure CLI extension of version >= 1.0.0:
k8s-configuration
az extension add --name k8s-configuration
az extension add --name k8s-configuration
Tip
If thek8s-configurationextension is already installed, you can update it to the latest version using the following command -az extension update --name k8s-configuration
k8s-configuration
az extension update --name k8s-configuration
Create a configuration
Theexample repositoryused in this article is structured around the persona of a cluster operator. The manifests in this repository provision a few namespaces, deploy workloads, and provide some team-specific configuration. Using this repository with GitOps creates the following resources on your cluster:
Namespaces:cluster-config,team-a,team-b
cluster-config
team-a
team-b
Deployment:arc-k8s-demo
arc-k8s-demo
ConfigMap:team-a/endpoints
team-a/endpoints
Theconfig-agentpolls Azure for new or updated configurations. This task will take up to 5 minutes.
config-agent
If you are associating a private repository with the configuration, complete the steps below inApply configuration from a private Git repository.
Important
This tutorial is for GitOps with Flux v1.  GitOps with Flux v2 is now available for Azure Arc-enabled Kubernetes and Azure Kubernetes Service (AKS) clusters;go to the tutorial for GitOps with Flux v2.  We recommendmigrating to Flux v2as soon as possible.
Support for Flux v1-based cluster configuration resources created prior to January 1, 2024 will end onMay 24, 2025. Starting on January 1, 2024, you won't be able to create new Flux v1-based cluster configuration resources.
Use Azure CLI
Use the Azure CLI extension fork8s-configurationto link a connected cluster to theexample Git repository.
k8s-configuration
Name this configurationcluster-config.
Name this configurationcluster-config.
cluster-config
Instruct the agent to deploy the operator in thecluster-confignamespace.
Instruct the agent to deploy the operator in thecluster-confignamespace.
cluster-config
Give the operatorcluster-adminpermissions.az k8s-configuration flux create --name cluster-config --cluster-name AzureArcTest1 --resource-group AzureArcTest --operator-instance-name cluster-config --operator-namespace cluster-config --repository-url https://github.com/Azure/arc-k8s-demo --scope cluster --cluster-type connectedClusters{
  "complianceStatus": {
  "complianceState": "Pending",
  "lastConfigApplied": "0001-01-01T00:00:00",
  "message": "{\"OperatorMessage\":null,\"ClusterState\":null}",
  "messageLevel": "3"
  },
  "configurationProtectedSettings": {},
  "enableHelmOperator": false,
  "helmOperatorProperties": null,
  "id": "/subscriptions/<sub id>/resourceGroups/<group name>/providers/Microsoft.Kubernetes/connectedClusters/<cluster name>/providers/Microsoft.KubernetesConfiguration/sourceControlConfigurations/cluster-config",
  "name": "cluster-config",
  "operatorInstanceName": "cluster-config",
  "operatorNamespace": "cluster-config",
  "operatorParams": "--git-readonly",
  "operatorScope": "cluster",
  "operatorType": "Flux",
  "provisioningState": "Succeeded",
  "repositoryPublicKey": "",
  "repositoryUrl": "https://github.com/Azure/arc-k8s-demo",
  "resourceGroup": "MyRG",
  "sshKnownHostsContents": "",
  "systemData": {
    "createdAt": "2020-11-24T21:22:01.542801+00:00",
    "createdBy": null,
    "createdByType": null,
    "lastModifiedAt": "2020-11-24T21:22:01.542801+00:00",
    "lastModifiedBy": null,
    "lastModifiedByType": null
  },
  "type": "Microsoft.KubernetesConfiguration/sourceControlConfigurations"
}
Give the operatorcluster-adminpermissions.
cluster-admin
az k8s-configuration flux create --name cluster-config --cluster-name AzureArcTest1 --resource-group AzureArcTest --operator-instance-name cluster-config --operator-namespace cluster-config --repository-url https://github.com/Azure/arc-k8s-demo --scope cluster --cluster-type connectedClusters
az k8s-configuration flux create --name cluster-config --cluster-name AzureArcTest1 --resource-group AzureArcTest --operator-instance-name cluster-config --operator-namespace cluster-config --repository-url https://github.com/Azure/arc-k8s-demo --scope cluster --cluster-type connectedClusters
{
  "complianceStatus": {
  "complianceState": "Pending",
  "lastConfigApplied": "0001-01-01T00:00:00",
  "message": "{\"OperatorMessage\":null,\"ClusterState\":null}",
  "messageLevel": "3"
  },
  "configurationProtectedSettings": {},
  "enableHelmOperator": false,
  "helmOperatorProperties": null,
  "id": "/subscriptions/<sub id>/resourceGroups/<group name>/providers/Microsoft.Kubernetes/connectedClusters/<cluster name>/providers/Microsoft.KubernetesConfiguration/sourceControlConfigurations/cluster-config",
  "name": "cluster-config",
  "operatorInstanceName": "cluster-config",
  "operatorNamespace": "cluster-config",
  "operatorParams": "--git-readonly",
  "operatorScope": "cluster",
  "operatorType": "Flux",
  "provisioningState": "Succeeded",
  "repositoryPublicKey": "",
  "repositoryUrl": "https://github.com/Azure/arc-k8s-demo",
  "resourceGroup": "MyRG",
  "sshKnownHostsContents": "",
  "systemData": {
    "createdAt": "2020-11-24T21:22:01.542801+00:00",
    "createdBy": null,
    "createdByType": null,
    "lastModifiedAt": "2020-11-24T21:22:01.542801+00:00",
    "lastModifiedBy": null,
    "lastModifiedByType": null
  },
  "type": "Microsoft.KubernetesConfiguration/sourceControlConfigurations"
}
{
  "complianceStatus": {
  "complianceState": "Pending",
  "lastConfigApplied": "0001-01-01T00:00:00",
  "message": "{\"OperatorMessage\":null,\"ClusterState\":null}",
  "messageLevel": "3"
  },
  "configurationProtectedSettings": {},
  "enableHelmOperator": false,
  "helmOperatorProperties": null,
  "id": "/subscriptions/<sub id>/resourceGroups/<group name>/providers/Microsoft.Kubernetes/connectedClusters/<cluster name>/providers/Microsoft.KubernetesConfiguration/sourceControlConfigurations/cluster-config",
  "name": "cluster-config",
  "operatorInstanceName": "cluster-config",
  "operatorNamespace": "cluster-config",
  "operatorParams": "--git-readonly",
  "operatorScope": "cluster",
  "operatorType": "Flux",
  "provisioningState": "Succeeded",
  "repositoryPublicKey": "",
  "repositoryUrl": "https://github.com/Azure/arc-k8s-demo",
  "resourceGroup": "MyRG",
  "sshKnownHostsContents": "",
  "systemData": {
    "createdAt": "2020-11-24T21:22:01.542801+00:00",
    "createdBy": null,
    "createdByType": null,
    "lastModifiedAt": "2020-11-24T21:22:01.542801+00:00",
    "lastModifiedBy": null,
    "lastModifiedByType": null
  },
  "type": "Microsoft.KubernetesConfiguration/sourceControlConfigurations"
}
Use a public Git repository
--repository-url
Use a private Git repository with SSH and Flux-created keys
Add the public key generated by Flux to the user account in your Git service provider. If the key is added to the repository instead of the user account, usegit@in place ofuser@in the URL.
git@
user@
Jump to theApply configuration from a private Git repositorysection for more details.
--repository-url
git@
user@
Use a private Git repository with SSH and user-provided keys
Provide your own private key directly or in a file. The key must be inPEM formatand end with newline (\n).
Add the associated public key to the user account in your Git service provider. If the key is added to the repository instead of the user account, usegit@in place ofuser@.
git@
user@
Jump to theApply configuration from a private Git repositorysection for more details.
--repository-url
git@
user@
--ssh-private-key
--ssh-private-key-file
Use a private Git host with SSH and user-provided known hosts
The Flux operator maintains a list of common Git hosts in its known hosts file to authenticate the Git repository before establishing the SSH connection. If you are using anuncommonGit repository or your own Git host, you can supply the host key so that Flux can identify your repo.
Just like private keys, you can provide your known_hosts content directly or in a file. When providing your own content, use theknown_hosts content format specifications, along with either of the SSH key scenarios above.
--repository-url
git@
user@
--ssh-known-hosts
--ssh-known-hosts-file
Use a private Git repository with HTTPS
--repository-url
--https-user
--https-key
Note
Helm operator chart version 1.2.0+ supports the HTTPS Helm release private auth.
HTTPS Helm release is not supported for AKS managed clusters.
If you need Flux to access the Git repository through your proxy, you will need to update the Azure Arc agents with the proxy settings. For more information, seeConnect using an outbound proxy server.
Additional Parameters
Customize the configuration with the following optional parameters:
--enable-helm-operator
--helm-operator-params
--set helm.versions=v3
--helm-operator-chart-version
--operator-namespace
--operator-params
--operator-params='--git-readonly --sync-garbage-collection --git-branch=main'
Options supported in--operator-params:
--operator-params
--git-branch
main
--git-branch=main
--git-path
--git-readonly
--manifest-generation
--git-poll-interval
5m
--sync-garbage-collection
--git-label
flux-sync
--git-user
--git-email
If you don't want Flux to write to the repository and--git-useror--git-emailaren't set, then--git-readonlywill automatically be set.
--git-user
--git-email
--git-readonly
For more information, see theFlux documentation.
Note
Flux defaults to sync from themasterbranch of the git repo. However, newer git repositories have the root branch namedmain, in which case you need to set--git-branch=mainin the --operator-params.
master
main
--git-branch=main
Tip
You can create a configuration in the Azure portal in theGitOpstab of the Azure Arc-enabled Kubernetes resource.
Validate the configuration
Use the Azure CLI to validate that the configuration was successfully created.
az k8s-configuration flux show --name cluster-config --cluster-name AzureArcTest1 --resource-group AzureArcTest --cluster-type connectedClusters
az k8s-configuration flux show --name cluster-config --cluster-name AzureArcTest1 --resource-group AzureArcTest --cluster-type connectedClusters
The configuration resource will be updated with compliance status, messages, and debugging information.
{
  "complianceStatus": {
    "complianceState": "Installed",
    "lastConfigApplied": "2020-12-10T18:26:52.801000+00:00",
    "message": "...",
    "messageLevel": "Information"
  },
  "configurationProtectedSettings": {},
  "enableHelmOperator": false,
  "helmOperatorProperties": {
    "chartValues": "",
    "chartVersion": ""
  },
  "id": "/subscriptions/<sub id>/resourceGroups/AzureArcTest/providers/Microsoft.Kubernetes/connectedClusters/AzureArcTest1/providers/Microsoft.KubernetesConfiguration/sourceControlConfigurations/cluster-config",
  "name": "cluster-config",
  "operatorInstanceName": "cluster-config",
  "operatorNamespace": "cluster-config",
  "operatorParams": "--git-readonly",
  "operatorScope": "cluster",
  "operatorType": "Flux",
  "provisioningState": "Succeeded",
  "repositoryPublicKey": "...",
  "repositoryUrl": "git://github.com/Azure/arc-k8s-demo.git",
  "resourceGroup": "AzureArcTest",
  "sshKnownHostsContents": null,
  "systemData": {
    "createdAt": "2020-12-01T03:58:56.175674+00:00",
    "createdBy": null,
    "createdByType": null,
    "lastModifiedAt": "2020-12-10T18:30:56.881219+00:00",
    "lastModifiedBy": null,
    "lastModifiedByType": null
},
  "type": "Microsoft.KubernetesConfiguration/sourceControlConfigurations"
}
{
  "complianceStatus": {
    "complianceState": "Installed",
    "lastConfigApplied": "2020-12-10T18:26:52.801000+00:00",
    "message": "...",
    "messageLevel": "Information"
  },
  "configurationProtectedSettings": {},
  "enableHelmOperator": false,
  "helmOperatorProperties": {
    "chartValues": "",
    "chartVersion": ""
  },
  "id": "/subscriptions/<sub id>/resourceGroups/AzureArcTest/providers/Microsoft.Kubernetes/connectedClusters/AzureArcTest1/providers/Microsoft.KubernetesConfiguration/sourceControlConfigurations/cluster-config",
  "name": "cluster-config",
  "operatorInstanceName": "cluster-config",
  "operatorNamespace": "cluster-config",
  "operatorParams": "--git-readonly",
  "operatorScope": "cluster",
  "operatorType": "Flux",
  "provisioningState": "Succeeded",
  "repositoryPublicKey": "...",
  "repositoryUrl": "git://github.com/Azure/arc-k8s-demo.git",
  "resourceGroup": "AzureArcTest",
  "sshKnownHostsContents": null,
  "systemData": {
    "createdAt": "2020-12-01T03:58:56.175674+00:00",
    "createdBy": null,
    "createdByType": null,
    "lastModifiedAt": "2020-12-10T18:30:56.881219+00:00",
    "lastModifiedBy": null,
    "lastModifiedByType": null
},
  "type": "Microsoft.KubernetesConfiguration/sourceControlConfigurations"
}
When a configuration is created or updated, a few things happen:
The Azure Arcconfig-agentmonitors Azure Resource Manager for new or updated configurations (Microsoft.KubernetesConfiguration/sourceControlConfigurations) and notices the newPendingconfiguration.
config-agent
Microsoft.KubernetesConfiguration/sourceControlConfigurations
Pending
Theconfig-agentreads the configuration properties and creates the destination namespace.
config-agent
The Azure Arccontroller-managercreates a Kubernetes service account and maps it toClusterRoleBinding or RoleBindingfor the appropriate permissions (clusterornamespacescope). It then deploys an instance offlux.
controller-manager
cluster
namespace
flux
If using the option of SSH with Flux-generated keys,fluxgenerates an SSH key and logs the public key.
flux
Theconfig-agentreports status back to the configuration resource in Azure.
config-agent
While the provisioning process happens, the configuration resource will move through a few state changes. Monitor progress with theaz k8s-configuration flux showcommand above:
complianceStatus
Pending
complianceStatus
Installed
config-agent
flux
complianceStatus
Failed
config-agent
flux
complianceStatus.message
Apply configuration from a private Git repository
If you are using a private Git repository, you need to configure the SSH public key in your repository. Either you provide or Flux generates the SSH public key. You can configure the public key either on the specific Git repository or on the Git user that has access to the repository.
Get your own public key
If you generated your own SSH keys, then you already have the private and public keys.
Use the following in Azure CLI if Flux is generating the keys.
az k8s-configuration flux show --resource-group <resource group name> --cluster-name <connected cluster name> --name <configuration name> --cluster-type connectedClusters --query 'repositoryPublicKey' 
"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAREDACTED"
az k8s-configuration flux show --resource-group <resource group name> --cluster-name <connected cluster name> --name <configuration name> --cluster-type connectedClusters --query 'repositoryPublicKey' 
"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAREDACTED"
Walk through the following in Azure portal if Flux is generating the keys.
In the Azure portal, navigate to the connected cluster resource.
In the resource page, select "GitOps" and see the list of configurations for this cluster.
Select the configuration that uses the private Git repository.
In the context window that opens, at the bottom of the window, copy theRepository public key.
Use one of the following options:
Option 1: Add the public key to your user account (applies to all repositories in your account):Open GitHub and click on your profile icon at the top-right corner of the page.Click onSettings.Click onSSH and GPG keys.Click onNew SSH key.Supply a Title.Paste the public key without any surrounding quotes.Click onAdd SSH key.
Option 1: Add the public key to your user account (applies to all repositories in your account):
Open GitHub and click on your profile icon at the top-right corner of the page.
Click onSettings.
Click onSSH and GPG keys.
Click onNew SSH key.
Supply a Title.
Paste the public key without any surrounding quotes.
Click onAdd SSH key.
Option 2: Add the public key as a deploy key to the Git repository (applies to only this repository):Open GitHub and navigate to your repository.Click onSettings.Click onDeploy keys.Click onAdd deploy key.Supply a Title.CheckAllow write access.Paste the public key without any surrounding quotes.Click onAdd key.
Option 2: Add the public key as a deploy key to the Git repository (applies to only this repository):
Open GitHub and navigate to your repository.
Click onSettings.
Click onDeploy keys.
Click onAdd deploy key.
Supply a Title.
CheckAllow write access.
Paste the public key without any surrounding quotes.
Click onAdd key.
Use the following steps to add the key to your SSH keys:
UnderUser Settingsin the top right (next to the profile image), clickSSH public keys.
Select+ New Key.
Supply a name.
Paste the public key without any surrounding quotes.
ClickAdd.
Validate the Kubernetes configuration
Afterconfig-agenthas installed thefluxinstance, resources held in the Git repository should begin to flow to the cluster. Check to see that the namespaces, deployments, and resources have been created with the following command:
config-agent
flux
kubectl get ns --show-labels
kubectl get ns --show-labels
NAME              STATUS   AGE    LABELS
azure-arc         Active   24h    <none>
cluster-config    Active   177m   <none>
default           Active   29h    <none>
itops             Active   177m   fluxcd.io/sync-gc-mark=sha256.9oYk8yEsRwWkR09n8eJCRNafckASgghAsUWgXWEQ9es,name=itops
kube-node-lease   Active   29h    <none>
kube-public       Active   29h    <none>
kube-system       Active   29h    <none>
team-a            Active   177m   fluxcd.io/sync-gc-mark=sha256.CS5boSi8kg_vyxfAeu7Das5harSy1i0gc2fodD7YDqA,name=team-a
team-b            Active   177m   fluxcd.io/sync-gc-mark=sha256.vF36thDIFnDDI2VEttBp5jgdxvEuaLmm7yT_cuA2UEw,name=team-b
NAME              STATUS   AGE    LABELS
azure-arc         Active   24h    <none>
cluster-config    Active   177m   <none>
default           Active   29h    <none>
itops             Active   177m   fluxcd.io/sync-gc-mark=sha256.9oYk8yEsRwWkR09n8eJCRNafckASgghAsUWgXWEQ9es,name=itops
kube-node-lease   Active   29h    <none>
kube-public       Active   29h    <none>
kube-system       Active   29h    <none>
team-a            Active   177m   fluxcd.io/sync-gc-mark=sha256.CS5boSi8kg_vyxfAeu7Das5harSy1i0gc2fodD7YDqA,name=team-a
team-b            Active   177m   fluxcd.io/sync-gc-mark=sha256.vF36thDIFnDDI2VEttBp5jgdxvEuaLmm7yT_cuA2UEw,name=team-b
We can see thatteam-a,team-b,itops, andcluster-confignamespaces have been created.
team-a
team-b
itops
cluster-config
Thefluxoperator has been deployed tocluster-confignamespace, as directed by the configuration resource:
flux
cluster-config
kubectl -n cluster-config get deploy  -o wide
kubectl -n cluster-config get deploy  -o wide
NAME             READY   UP-TO-DATE   AVAILABLE   AGE   CONTAINERS   IMAGES                         SELECTOR
cluster-config   1/1     1            1           3h    flux         docker.io/fluxcd/flux:1.16.0   instanceName=cluster-config,name=flux
memcached        1/1     1            1           3h    memcached    memcached:1.5.15               name=memcached
NAME             READY   UP-TO-DATE   AVAILABLE   AGE   CONTAINERS   IMAGES                         SELECTOR
cluster-config   1/1     1            1           3h    flux         docker.io/fluxcd/flux:1.16.0   instanceName=cluster-config,name=flux
memcached        1/1     1            1           3h    memcached    memcached:1.5.15               name=memcached
Further exploration
You can explore the other resources deployed as part of the configuration repository using:
kubectl -n team-a get cm -o yaml
kubectl -n itops get all
kubectl -n team-a get cm -o yaml
kubectl -n itops get all
Clean up resources
Delete a configuration using the Azure CLI or Azure portal. After you run the delete command, the configuration resource will be deleted immediately in Azure. Full deletion of the associated objects from the cluster should happen within 10 minutes. If the configuration is in a failed state when removed, the full deletion of associated objects can take up to an hour.
When a configuration withnamespacescope is deleted, the namespace is not deleted by Azure Arc to avoid breaking existing workloads. If needed, you can delete this namespace manually usingkubectl.
namespace
kubectl
az k8s-configuration flux delete --name cluster-config --cluster-name AzureArcTest1 --resource-group AzureArcTest --cluster-type connectedClusters
az k8s-configuration flux delete --name cluster-config --cluster-name AzureArcTest1 --resource-group AzureArcTest --cluster-type connectedClusters
Note
Any changes to the cluster that were the result of deployments from the tracked Git repository are not deleted when the configuration is deleted.
Important
This tutorial is for GitOps with Flux v1.  GitOps with Flux v2 is now available for Azure Arc-enabled Kubernetes and Azure Kubernetes Service (AKS) clusters;go to the tutorial for GitOps with Flux v2.  We recommendmigrating to Flux v2as soon as possible.
Support for Flux v1-based cluster configuration resources created prior to January 1, 2024 will end onMay 24, 2025. Starting on January 1, 2024, you won't be able to create new Flux v1-based cluster configuration resources.
Next steps
Advance to the next tutorial to learn how to implement CI/CD with GitOps.
Implement CI/CD with GitOps
Feedback
Was this page helpful?
Additional resources