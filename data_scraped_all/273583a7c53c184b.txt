Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Let statement
Article
2025-01-29
5 contributors
In this article
Applies to: âMicrosoft FabricâAzure Data ExplorerâAzure MonitorâMicrosoft Sentinel
Aletstatement is used to set a variable name equal to an expression or a function, or to createviews.
let
letstatements are useful for:
let
Breaking up a complex expression into multiple parts, each represented by a variable.
Defining constants outside of the query body for readability.
Defining a variable once and using it multiple times within a query.
If the variable previously represented another value, for example in nested statements, the innermostletstatement applies.
let
To optimize multiple uses of theletstatement within a single query, seeOptimize queries that use named expressions.
let
Note
Theletstatement binds a name to a calculation, not to the evaluated value of that calculation. This behavior means that multiple references to the same name can return different values due to the calculation being evaluated multiple times. If this is not the desired behavior, usetoscalar()ormaterialize().
let
Syntax: Scalar or tabular expressions
letName=Expression
let
=
Important
Let statements must be followed by a semicolon. There can be no blank lines between let statements or between let statements and other query statements.
Learn more aboutsyntax conventions.
Parameters
string
["Name with spaces"]
string
let one=1;
let RecentLog = Logs  | where Timestamp > ago(1h)
Syntax: View or function
letName=[view]([Parameters]){FunctionBody}
let
=
view
(
)
{
}
Important
Let statements must be followed by a semicolon. There can be no blank lines between let statements or between let statements and other query statements.
Learn more aboutsyntax conventions.
Parameters
string
view
string
let
let
union
string
:
:
*
:
bool
string
long
datetime
timespan
real
dynamic
Note
Tabular parameters must appear before scalar parameters.
Any two statements must be separated by a semicolon.
Examples
The examples in this section show how to use the syntax to help you get started.
The examples in this article use publicly available tables in thehelp cluster, such as theStormEventstable in theSamplesdatabase.
StormEvents
The examples in this article use publicly available tables, such as theStormEventstable in the Weather analyticssample data.
StormEvents
The query examples show the syntax and example usage of the operator, statement, or function.
Define scalar values
The following example uses a scalar expression statement.
let n = 10;  // number
let place = "Dallas";  // string
let cutoff = ago(62d); // datetime 
Events 
| where timestamp > cutoff 
    and city == place 
| take n
let n = 10;  // number
let place = "Dallas";  // string
let cutoff = ago(62d); // datetime 
Events 
| where timestamp > cutoff 
    and city == place 
| take n
The following example binds the namesome numberusing the['name']notation, and then uses it in a tabular expression statement.
some number
['name']
Run the query
let ['some number'] = 20;
range y from 0 to ['some number'] step 5
let ['some number'] = 20;
range y from 0 to ['some number'] step 5
Output
Create a user defined function with scalar calculation
This example uses the let statement with arguments for scalar calculation. The query defines functionMultiplyByNfor multiplying two numbers.
MultiplyByN
Run the query
let MultiplyByN = (val:long, n:long) { val * n };
range x from 1 to 5 step 1 
| extend result = MultiplyByN(x, 5)
let MultiplyByN = (val:long, n:long) { val * n };
range x from 1 to 5 step 1 
| extend result = MultiplyByN(x, 5)
Output
Create a user defined function that trims input
The following example removes leading and trailing ones from the input.
Run the query
let TrimOnes = (s:string) { trim("1", s) };
range x from 10 to 15 step 1 
| extend result = TrimOnes(tostring(x))
let TrimOnes = (s:string) { trim("1", s) };
range x from 10 to 15 step 1 
| extend result = TrimOnes(tostring(x))
Output
Use multiple let statements
This example defines two let statements where one statement (foo2) uses another (foo1).
foo2
foo1
Run the query
let foo1 = (_start:long, _end:long, _step:long) { range x from _start to _end step _step};
let foo2 = (_step:long) { foo1(1, 100, _step)};
foo2(2) | count
let foo1 = (_start:long, _end:long, _step:long) { range x from _start to _end step _step};
let foo2 = (_step:long) { foo1(1, 100, _step)};
foo2(2) | count
Output
Create a view or virtual table
This example shows you how to use a let statement to create aviewor virtual table.
view
Run the query
let Range10 = view () { range MyColumn from 1 to 10 step 1 };
let Range20 = view () { range MyColumn from 1 to 20 step 1 };
search MyColumn == 5
let Range10 = view () { range MyColumn from 1 to 10 step 1 };
let Range20 = view () { range MyColumn from 1 to 20 step 1 };
search MyColumn == 5
Output
Use a materialize function
Thematerialize()function lets you cache subquery results during the time of query execution. When you use thematerialize()function, the data is cached, and any subsequent invocation of the result uses cached data.
materialize()
materialize()
let totalPagesPerDay = PageViews
| summarize by Page, Day = startofday(Timestamp)
| summarize count() by Day;
let materializedScope = PageViews
| summarize by Page, Day = startofday(Timestamp);
let cachedResult = materialize(materializedScope);
cachedResult
| project Page, Day1 = Day
| join kind = inner
(
    cachedResult
    | project Page, Day2 = Day
)
on Page
| where Day2 > Day1
| summarize count() by Day1, Day2
| join kind = inner
    totalPagesPerDay
on $left.Day1 == $right.Day
| project Day1, Day2, Percentage = count_*100.0/count_1
let totalPagesPerDay = PageViews
| summarize by Page, Day = startofday(Timestamp)
| summarize count() by Day;
let materializedScope = PageViews
| summarize by Page, Day = startofday(Timestamp);
let cachedResult = materialize(materializedScope);
cachedResult
| project Page, Day1 = Day
| join kind = inner
(
    cachedResult
    | project Page, Day2 = Day
)
on Page
| where Day2 > Day1
| summarize count() by Day1, Day2
| join kind = inner
    totalPagesPerDay
on $left.Day1 == $right.Day
| project Day1, Day2, Percentage = count_*100.0/count_1
Output
Using nested let statements
Nested let statements are permitted, including within a user defined function expression. Let statements and arguments apply in both the current and inner scope of the function body.
let start_time = ago(5h); 
let end_time = start_time + 2h; 
T | where Time > start_time and Time < end_time | ...
let start_time = ago(5h); 
let end_time = start_time + 2h; 
T | where Time > start_time and Time < end_time | ...
Tabular argument with schema
The following example specifies that the table parameterTmust have a columnStateof typestring. The tableTmay include other columns as well, but they can't be referenced in the functionStateStatebecause the aren't declared.
T
State
string
T
StateState
Run the query
let StateState=(T: (State: string)) { T | extend s_s=strcat(State, State) };
StormEvents
| invoke StateState()
| project State, s_s
let StateState=(T: (State: string)) { T | extend s_s=strcat(State, State) };
StormEvents
| invoke StateState()
| project State, s_s
Output
Tabular argument with wildcard
The table parameterTcan have any schema, and the functionCountRecordsInTablewill work.
T
CountRecordsInTable
Run the query
let CountRecordsInTable=(T: (*)) { T | count };
StormEvents | invoke CountRecordsInTable()
let CountRecordsInTable=(T: (*)) { T | count };
StormEvents | invoke CountRecordsInTable()
Output
Feedback
Was this page helpful?
Additional resources