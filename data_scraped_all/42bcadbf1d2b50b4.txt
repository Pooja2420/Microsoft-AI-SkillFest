Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Connect your app to Azure AI Search using identities
Article
2024-10-30
4 contributors
In this article
In your application code, you can set up a keyless connection to Azure AI Search that uses Microsoft Entra ID and roles for authentication and authorization. Application requests to most Azure services must be authenticated with keys or keyless connections. Developers must be diligent to never expose the keys in an unsecure location. Anyone who gains access to the key is able to authenticate to the service. Keyless authentication offers improved management and security benefits over the account key because there's no key (or connection string) to store.
Keyless connections are enabled with the following steps:
Configure your authentication.
Set environment variables, as needed.
Use an Azure Identity library credential type to create an Azure AI Search client object.
Prerequisites
The following steps need to be completed for both local development and production workloads:
Create an AI Search resource
Enable role-based access on your search service
Install Azure Identity client library
Create an AI Search resource
Before continuing with this article, you need an Azure AI Search resource to work with. If you don't have a resource,create your resourcenow.Enable role-based access control (RBAC)for the resource.
Install Azure Identity client library
To use a keyless approach, update your AI Search enabled code with the Azure Identity client library.
.NET
Java
JavaScript
Python
Install theAzure Identity client library for .NET:
dotnet add package Azure.Identity
dotnet add package Azure.Identity
Install theAzure Identity client library for Javawith the following POM file:
<dependencyManagement>
    <dependencies>
        <dependency>
            <groupId>com.azure</groupId>
            <artifactId>azure-identity</artifactId>
            <version>1.15.1</version>
        </dependency>
    </dependencies>
</dependencyManagement>
<dependencyManagement>
    <dependencies>
        <dependency>
            <groupId>com.azure</groupId>
            <artifactId>azure-identity</artifactId>
            <version>1.15.1</version>
        </dependency>
    </dependencies>
</dependencyManagement>
Install theAzure Identity client library for JavaScript:
npm install --save @azure/identity
npm install --save @azure/identity
Install theAzure Identity client library for Python:
pip install azure-identity
pip install azure-identity
Update source code to use DefaultAzureCredential
The Azure Identity library'sDefaultAzureCredentialallows you to run the same code in the local development environment and in the Azure cloud. Create a single credential and reuse the credential instance as needed to take advantage of token caching.
DefaultAzureCredential
.NET
Java
JavaScript
Python
For more information onDefaultAzureCredentialfor .NET, seeAzure Identity client library for .NET.
DefaultAzureCredential
using Azure;
using Azure.Search.Documents;
using Azure.Search.Documents.Indexes;
using Azure.Search.Documents.Indexes.Models;
using Azure.Search.Documents.Models;
using Azure.Identity;
using System;
using static System.Environment;

string endpoint = GetEnvironmentVariable("AZURE_SEARCH_ENDPOINT");
string indexName = "my-search-index";

DefaultAzureCredential credential = new();
SearchClient searchClient = new(new Uri(endpoint), indexName, credential);
SearchIndexClient searchIndexClient = new(endpoint, credential);
using Azure;
using Azure.Search.Documents;
using Azure.Search.Documents.Indexes;
using Azure.Search.Documents.Indexes.Models;
using Azure.Search.Documents.Models;
using Azure.Identity;
using System;
using static System.Environment;

string endpoint = GetEnvironmentVariable("AZURE_SEARCH_ENDPOINT");
string indexName = "my-search-index";

DefaultAzureCredential credential = new();
SearchClient searchClient = new(new Uri(endpoint), indexName, credential);
SearchIndexClient searchIndexClient = new(endpoint, credential);
For more information onDefaultAzureCredentialfor Java, seeAzure Identity client library for Java.
DefaultAzureCredential
import com.azure.identity.DefaultAzureCredentialBuilder;
import com.azure.search.documents.SearchAsyncClient;
import com.azure.search.documents.SearchClientBuilder;
import com.azure.search.documents.SearchDocument;
import com.azure.search.documents.indexes.SearchIndexAsyncClient;
import com.azure.search.documents.indexes.SearchIndexClientBuilder;

String ENDPOINT = System.getenv("AZURE_SEARCH_ENDPOINT");
String INDEX_NAME = "my-index";

DefaultAzureCredential credential = new DefaultAzureCredentialBuilder().build();

// Sync SearchClient
SearchClient searchClient = new SearchClientBuilder()
    .endpoint(ENDPOINT)
    .credential(credential)
    .indexName(INDEX_NAME)
    .buildClient();

// Sync IndexClient
SearchIndexClient searchIndexClient = new SearchIndexClientBuilder()
    .endpoint(ENDPOINT)
    .credential(credential)
    .buildClient();

// Async SearchClient
SearchAsyncClient searchAsyncClient = new SearchClientBuilder()
    .endpoint(ENDPOINT)
    .credential(credential)
    .indexName(INDEX_NAME)
    .buildAsyncClient();

// Async IndexClient
SearchIndexAsyncClient searchIndexAsyncClient = new SearchIndexClientBuilder()
    .endpoint(ENDPOINT)
    .credential(credential)
    .buildAsyncClient();
import com.azure.identity.DefaultAzureCredentialBuilder;
import com.azure.search.documents.SearchAsyncClient;
import com.azure.search.documents.SearchClientBuilder;
import com.azure.search.documents.SearchDocument;
import com.azure.search.documents.indexes.SearchIndexAsyncClient;
import com.azure.search.documents.indexes.SearchIndexClientBuilder;

String ENDPOINT = System.getenv("AZURE_SEARCH_ENDPOINT");
String INDEX_NAME = "my-index";

DefaultAzureCredential credential = new DefaultAzureCredentialBuilder().build();

// Sync SearchClient
SearchClient searchClient = new SearchClientBuilder()
    .endpoint(ENDPOINT)
    .credential(credential)
    .indexName(INDEX_NAME)
    .buildClient();

// Sync IndexClient
SearchIndexClient searchIndexClient = new SearchIndexClientBuilder()
    .endpoint(ENDPOINT)
    .credential(credential)
    .buildClient();

// Async SearchClient
SearchAsyncClient searchAsyncClient = new SearchClientBuilder()
    .endpoint(ENDPOINT)
    .credential(credential)
    .indexName(INDEX_NAME)
    .buildAsyncClient();

// Async IndexClient
SearchIndexAsyncClient searchIndexAsyncClient = new SearchIndexClientBuilder()
    .endpoint(ENDPOINT)
    .credential(credential)
    .buildAsyncClient();
For more information onDefaultAzureCredentialfor JavaScript, seeAzure Identity client library for JavaScript.
DefaultAzureCredential
import { DefaultAzureCredential } from "@azure/identity";
import {
  SearchClient,
  SearchIndexClient
} from "@azure/search-documents";

const AZURE_SEARCH_ENDPOINT = process.env.AZURE_SEARCH_ENDPOINT;
const index = "my-index";
const credential = new DefaultAzureCredential();

// To query and manipulate documents
const searchClient = new SearchClient(
  AZURE_SEARCH_ENDPOINT,
  index,
  credential
);

// To manage indexes and synonymmaps
const indexClient = new SearchIndexClient(
  AZURE_SEARCH_ENDPOINT, 
  credential
);
import { DefaultAzureCredential } from "@azure/identity";
import {
  SearchClient,
  SearchIndexClient
} from "@azure/search-documents";

const AZURE_SEARCH_ENDPOINT = process.env.AZURE_SEARCH_ENDPOINT;
const index = "my-index";
const credential = new DefaultAzureCredential();

// To query and manipulate documents
const searchClient = new SearchClient(
  AZURE_SEARCH_ENDPOINT,
  index,
  credential
);

// To manage indexes and synonymmaps
const indexClient = new SearchIndexClient(
  AZURE_SEARCH_ENDPOINT, 
  credential
);
For more information onDefaultAzureCredentialfor Python, seeAzure Identity client library for Python.
DefaultAzureCredential
import os
from azure.search.documents import SearchClient
from azure.identity import DefaultAzureCredential, AzureAuthorityHosts

# Azure Public Cloud
audience = "https://search.windows.net"
authority = AzureAuthorityHosts.AZURE_PUBLIC_CLOUD

service_endpoint = os.environ["AZURE_SEARCH_ENDPOINT"]
index_name = os.environ["AZURE_SEARCH_INDEX_NAME"]
credential = DefaultAzureCredential(authority=authority)

search_client = SearchClient(
    endpoint=service_endpoint, 
    index_name=index_name, 
    credential=credential, 
    audience=audience)

search_index_client = SearchIndexClient(
    endpoint=service_endpoint, 
    credential=credential, 
    audience=audience)
import os
from azure.search.documents import SearchClient
from azure.identity import DefaultAzureCredential, AzureAuthorityHosts

# Azure Public Cloud
audience = "https://search.windows.net"
authority = AzureAuthorityHosts.AZURE_PUBLIC_CLOUD

service_endpoint = os.environ["AZURE_SEARCH_ENDPOINT"]
index_name = os.environ["AZURE_SEARCH_INDEX_NAME"]
credential = DefaultAzureCredential(authority=authority)

search_client = SearchClient(
    endpoint=service_endpoint, 
    index_name=index_name, 
    credential=credential, 
    audience=audience)

search_index_client = SearchIndexClient(
    endpoint=service_endpoint, 
    credential=credential, 
    audience=audience)
Local development
Local development using roles includes these steps:
Assign your personal identity to RBAC roles on the specific resource.
Use a tool like the Azure CLI or Azure PowerShell to authenticate with Azure.
Establish environment variables for your resource.
Roles for local development
As a local developer, your Azure identity needs full control over data plane operations. These are the suggested roles:
Search Service Contributor, create and manage objects
Search Index Data Contributor, load and query an index
Find your personal identity with one of the following tools. Use that identity as the<identity-id>value.
<identity-id>
Azure CLI
Azure PowerShell
Azure portal
Sign in to Azure CLI.az login
Sign in to Azure CLI.
az login
az login
Get your personal identity.az ad signed-in-user show \
    --query id -o tsv
Get your personal identity.
az ad signed-in-user show \
    --query id -o tsv
az ad signed-in-user show \
    --query id -o tsv
Assign the role-based access control (RBAC) role to the identity for the resource group.az role assignment create \
    --role "<role-name>" \
    --assignee "<identity-id>" \
    --scope "/subscriptions/<subscription-id>/resourceGroups/<resource-group-name>"
Assign the role-based access control (RBAC) role to the identity for the resource group.
az role assignment create \
    --role "<role-name>" \
    --assignee "<identity-id>" \
    --scope "/subscriptions/<subscription-id>/resourceGroups/<resource-group-name>"
az role assignment create \
    --role "<role-name>" \
    --assignee "<identity-id>" \
    --scope "/subscriptions/<subscription-id>/resourceGroups/<resource-group-name>"
Sign in with PowerShell.Connect-AzAccount
Sign in with PowerShell.
Connect-AzAccount
Connect-AzAccount
Get your personal identity.(Get-AzContext).Account.ExtendedProperties.HomeAccountId.Split('.')[0]
Get your personal identity.
(Get-AzContext).Account.ExtendedProperties.HomeAccountId.Split('.')[0]
(Get-AzContext).Account.ExtendedProperties.HomeAccountId.Split('.')[0]
Assign the role-based access control (RBAC) role to the identity for the resource group.New-AzRoleAssignment -ObjectId "<identity-id>" -RoleDefinitionName "<role-name>" -Scope "/subscriptions/<subscription-id>/resourceGroups/<resource-group-name>"
Assign the role-based access control (RBAC) role to the identity for the resource group.
New-AzRoleAssignment -ObjectId "<identity-id>" -RoleDefinitionName "<role-name>" -Scope "/subscriptions/<subscription-id>/resourceGroups/<resource-group-name>"
New-AzRoleAssignment -ObjectId "<identity-id>" -RoleDefinitionName "<role-name>" -Scope "/subscriptions/<subscription-id>/resourceGroups/<resource-group-name>"
Use the steps found here:find the user object IDin the Azure portal.
Use the steps found here:find the user object IDin the Azure portal.
Use the steps found atopen the Add role assignment pagein the Azure portal.
Use the steps found atopen the Add role assignment pagein the Azure portal.
Where applicable, replace<identity-id>,<subscription-id>, and<resource-group-name>with your actual values.
<identity-id>
<subscription-id>
<resource-group-name>
Authentication for local development
Use a tool in your local development environment to authentication to Azure identity. Once you're authenticated, theDefaultAzureCredentialinstance in your source code finds and uses the authentication.
DefaultAzureCredential
.NET
Java
JavaScript
Python
Select a tool forauthentication during local development.
Select a tool forauthentication during local development.
Select a tool forauthentication during local development.
Select a tool forauthentication during local development.
Configure environment variables for local development
To connect to Azure AI Search, your code needs to know your resource endpoint.
Create an environment variable namedAZURE_SEARCH_ENDPOINTfor your Azure AI Search endpoint. This URL generally has the formathttps://<YOUR-RESOURCE-NAME>.search.windows.net/.
AZURE_SEARCH_ENDPOINT
https://<YOUR-RESOURCE-NAME>.search.windows.net/
Production workloads
Deploy production workloads includes these steps:
Choose RBAC roles that adhere to the principle of least privilege.
Assign RBAC roles to your production identity on the specific resource.
Set up environment variables for your resource.
Roles for production workloads
To create your production resources, you need to create auser-assigned managed identitythen assign that identity to your resources with the correct roles.
The following role is suggested for a production application:
Authentication for production workloads
Use the following Azure AI SearchBicep templateto create the resource and set the authentication for theidentityId. Bicep requires the role ID. Thenameshown in this Bicep snippet isn't the Azure role; it's specific to the Bicep deployment.
identityId
name
// main.bicep
param environment string = 'production'
param roleGuid string = ''

module aiSearchRoleUser 'core/security/role.bicep' = {
    scope: aiSearchResourceGroup
    name: 'aiSearch-role-user'
    params: {
        principalId: (environment == 'development') ? principalId : userAssignedManagedIdentity.properties.principalId 
        principalType: (environment == 'development') ? 'User' : 'ServicePrincipal'
        roleDefinitionId: roleGuid
    }
}
// main.bicep
param environment string = 'production'
param roleGuid string = ''

module aiSearchRoleUser 'core/security/role.bicep' = {
    scope: aiSearchResourceGroup
    name: 'aiSearch-role-user'
    params: {
        principalId: (environment == 'development') ? principalId : userAssignedManagedIdentity.properties.principalId 
        principalType: (environment == 'development') ? 'User' : 'ServicePrincipal'
        roleDefinitionId: roleGuid
    }
}
Themain.bicepfile calls the following generic Bicep code to create any role. You have the option to create multiple RBAC roles, such as one for the user and another for production. This allows you to enable both development and production environments within the same Bicep deployment.
main.bicep
// core/security/role.bicep
metadata description = 'Creates a role assignment for an identity.'
param principalId string // passed in from main.bicep

@allowed([
    'Device'
    'ForeignGroup'
    'Group'
    'ServicePrincipal'
    'User'
])
param principalType string = 'ServicePrincipal'
param roleDefinitionId string // Role ID

resource role 'Microsoft.Authorization/roleAssignments@2022-04-01' = {
    name: guid(subscription().id, resourceGroup().id, principalId, roleDefinitionId)
    properties: {
        principalId: principalId
        principalType: principalType
        roleDefinitionId: resourceId('Microsoft.Authorization/roleDefinitions', roleDefinitionId)
    }
}
// core/security/role.bicep
metadata description = 'Creates a role assignment for an identity.'
param principalId string // passed in from main.bicep

@allowed([
    'Device'
    'ForeignGroup'
    'Group'
    'ServicePrincipal'
    'User'
])
param principalType string = 'ServicePrincipal'
param roleDefinitionId string // Role ID

resource role 'Microsoft.Authorization/roleAssignments@2022-04-01' = {
    name: guid(subscription().id, resourceGroup().id, principalId, roleDefinitionId)
    properties: {
        principalId: principalId
        principalType: principalType
        roleDefinitionId: resourceId('Microsoft.Authorization/roleDefinitions', roleDefinitionId)
    }
}
Configure environment variables for production workloads
To connect to Azure AI Search, your code needs to know your resource endpoint, and the ID of the managed identity.
Create environment variables for your deployed and keyless Azure AI Search resource:
AZURE_SEARCH_ENDPOINT: This URL is the access point for your Azure AI Search resource. This URL generally has the formathttps://<YOUR-RESOURCE-NAME>.search.windows.net/.
AZURE_SEARCH_ENDPOINT
https://<YOUR-RESOURCE-NAME>.search.windows.net/
AZURE_CLIENT_ID: This is the identity to authenticate as.
AZURE_CLIENT_ID
Related content
Keyless connections developer guide
Azure built-in roles
Set environment variables
Feedback
Was this page helpful?
Additional resources