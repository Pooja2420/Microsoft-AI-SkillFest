Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
mv-expand operator
Article
2025-02-03
4 contributors
In this article
Applies to: âMicrosoft FabricâAzure Data ExplorerâAzure MonitorâMicrosoft Sentinel
Expands multi-value dynamic arrays or property bags into multiple records.
mv-expandcan be described as the opposite of the aggregation operators
that pack multiple values into a singledynamic-typed
array or property bag, such assummarize...make-list()andmake-series.
Each element in the (scalar) array or property bag generates a new record in the
output of the operator. All columns of the input that aren't expanded are duplicated to all the records in the output.
mv-expand
summarize
make-list()
make-series
Syntax
T|mv-expand[kind=(bag|array)] [with_itemindex=IndexColumnName]ColumnName[to typeof(Typename)] [,ColumnName...] [limitRowlimit]
|mv-expand
kind=
bag
array
with_itemindex=
to typeof(
)
,
limit
T|mv-expand[kind=(bag|array)] [Name=]ArrayExpression[to typeof(Typename)] [,[Name=]ArrayExpression[to typeof(Typename)] ...] [limitRowlimit]
|mv-expand
kind=
bag
array
=
to typeof(
)
,
=
to typeof(
)
limit
Learn more aboutsyntax conventions.
Parameters
string
dynamic
string
string
mv-expand
null
int
mvexpand
mv-expand
string
with_itemindex
Returns
For each record in the input, the operator returns zero, one, or many records in the output,
as determined in the following way:
Input columns that aren't expanded appear in the output with their original value.
If a single input record is expanded into multiple output records, the value is duplicated
to all records.
Input columns that aren't expanded appear in the output with their original value.
If a single input record is expanded into multiple output records, the value is duplicated
to all records.
For eachColumnNameorArrayExpressionthat is expanded, the number of output records
is determined for each value as explained inmodes of expansion. For each input record, the maximum number of output records is calculated. All arrays or property bags are expanded "in parallel"
so that missing values (if any) are replaced by null values. Elements are expanded into rows in the order that they appear in the original array/bag.
For eachColumnNameorArrayExpressionthat is expanded, the number of output records
is determined for each value as explained inmodes of expansion. For each input record, the maximum number of output records is calculated. All arrays or property bags are expanded "in parallel"
so that missing values (if any) are replaced by null values. Elements are expanded into rows in the order that they appear in the original array/bag.
If the dynamic value is null, then a single record is produced for that value (null).
If the dynamic value is an empty array or property bag, no record is produced for that value.
Otherwise, as many records are produced as there are elements in the dynamic value.
If the dynamic value is null, then a single record is produced for that value (null).
If the dynamic value is an empty array or property bag, no record is produced for that value.
Otherwise, as many records are produced as there are elements in the dynamic value.
The expanded columns are of typedynamic, unless they're explicitly typed
by using theto typeof()clause.
dynamic
to typeof()
Modes of expansion
Two modes of property bag expansions are supported:
kind=bagorbagexpansion=bag: Property bags are expanded into single-entry property bags. This mode is the default mode.
kind=bag
bagexpansion=bag
kind=arrayorbagexpansion=array: Property bags are expanded into two-element[key,value]array structures, allowing uniform access to keys and values. This mode also allows, for example, running a distinct-count aggregation over property names.
kind=array
bagexpansion=array
[
,
]
Examples
The examples in this article use publicly available tables in thehelp cluster, such as theStormEventstable in theSamplesdatabase.
StormEvents
The examples in this article use publicly available tables, such as theStormEventstable in the Weather analyticssample data.
StormEvents
The examples in this section show how to use the syntax to help you get started.
Single column - array expansion
Run the query
datatable (a: int, b: dynamic)
[
    1, dynamic([10, 20]),
    2, dynamic(['a', 'b'])
]
| mv-expand b
datatable (a: int, b: dynamic)
[
    1, dynamic([10, 20]),
    2, dynamic(['a', 'b'])
]
| mv-expand b
Output
Single column - bag expansion
A simple expansion of a single column:
Run the query
datatable (a: int, b: dynamic)
[
    1, dynamic({"prop1": "a1", "prop2": "b1"}),
    2, dynamic({"prop1": "a2", "prop2": "b2"})
]
| mv-expand b
datatable (a: int, b: dynamic)
[
    1, dynamic({"prop1": "a1", "prop2": "b1"}),
    2, dynamic({"prop1": "a2", "prop2": "b2"})
]
| mv-expand b
Output
Single column - bag expansion to key-value pairs
A simple bag expansion to key-value pairs:
Run the query
datatable (a: int, b: dynamic)
[
    1, dynamic({"prop1": "a1", "prop2": "b1"}),
    2, dynamic({"prop1": "a2", "prop2": "b2"})
]
| mv-expand kind=array b 
| extend key = b[0], val=b[1]
datatable (a: int, b: dynamic)
[
    1, dynamic({"prop1": "a1", "prop2": "b1"}),
    2, dynamic({"prop1": "a2", "prop2": "b2"})
]
| mv-expand kind=array b 
| extend key = b[0], val=b[1]
Output
Zipped two columns
Expanding two columns will first 'zip' the applicable columns and then expand them:
Run the query
datatable (a: int, b: dynamic, c: dynamic)[
    1, dynamic({"prop1": "a", "prop2": "b"}), dynamic([5, 4, 3])
]
| mv-expand b, c
datatable (a: int, b: dynamic, c: dynamic)[
    1, dynamic({"prop1": "a", "prop2": "b"}), dynamic([5, 4, 3])
]
| mv-expand b, c
Output
Cartesian product of two columns
If you want to get a Cartesian product of expanding two columns, expand one after the other:
Run the query
datatable (a: int, b: dynamic, c: dynamic)
[
    1, dynamic({"prop1": "a", "prop2": "b"}), dynamic([5, 6])
]
| mv-expand b
| mv-expand c
datatable (a: int, b: dynamic, c: dynamic)
[
    1, dynamic({"prop1": "a", "prop2": "b"}), dynamic([5, 6])
]
| mv-expand b
| mv-expand c
Output
Convert output
To force the output of an mv-expand to a certain type (default is dynamic), useto typeof:
to typeof
Run the query
datatable (a: string, b: dynamic, c: dynamic)[
    "Constant", dynamic([1, 2, 3, 4]), dynamic([6, 7, 8, 9])
]
| mv-expand b, c to typeof(int)
| getschema
datatable (a: string, b: dynamic, c: dynamic)[
    "Constant", dynamic([1, 2, 3, 4]), dynamic([6, 7, 8, 9])
]
| mv-expand b, c to typeof(int)
| getschema
Output
string
dynamic
int
Notice columnbis returned asdynamicwhilecis returned asint.
b
dynamic
c
int
Using with_itemindex
Expansion of an array withwith_itemindex:
with_itemindex
Run the query
range x from 1 to 4 step 1
| summarize x = make_list(x)
| mv-expand with_itemindex=Index x
range x from 1 to 4 step 1
| summarize x = make_list(x)
| mv-expand with_itemindex=Index x
Output
Related content
mv-applyoperator.
For the opposite of the mv-expand operator, seesummarize make_list().
For expanding dynamic JSON objects into columns using property bag keys, seebag_unpack()plugin.
parse_json function
Feedback
Was this page helpful?
Additional resources