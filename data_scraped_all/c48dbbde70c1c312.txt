Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Use Bicep to create Azure role-based access control (Azure RBAC) resources
Article
2025-03-25
6 contributors
In this article
Azure has a powerful role-based access control (RBAC) system. For more information on Azure RBAC, seeWhat is Azure Role-based access control (Azure RBAC)?By using Bicep, you can programmatically define your RBAC role assignments and role definitions.
Role assignments
Role assignments enable you to grant a principal such as a user, a group, or a service principal access to a specific Azure resource.
To define a role assignment, create a resource with typeMicrosoft.Authorization/roleAssignments. A role definition has multiple properties, including a scope, a name, a role definition ID, a principal ID, and a principal type.
Microsoft.Authorization/roleAssignments
Scope
Role assignments apply at a specificscope, which defines the resource or set of resources to which you're granting access. For more information, seeUnderstand scope for Azure RBAC.
Role assignments areextension resources, meaning that they apply to another resource. The following example shows how to create a storage account and a role assignment scoped to that storage account:
param location string = resourceGroup().location
param storageAccountName string = 'stor${uniqueString(resourceGroup().id)}'
param storageSkuName string = 'Standard_LRS'
param roleDefinitionResourceId string
param principalId string

resource storageAccount 'Microsoft.Storage/storageAccounts@2023-05-01' = {
  name: storageAccountName
  location: location
  kind: 'StorageV2'
  sku: {
   name: storageSkuName
  }
}

resource roleAssignment 'Microsoft.Authorization/roleAssignments@2022-04-01' = {
  scope: storageAccount
  name: guid(storageAccount.id, principalId, roleDefinitionResourceId)
  properties: {
    roleDefinitionId: roleDefinitionResourceId
    principalId: principalId
    principalType: 'ServicePrincipal'
  }
}
param location string = resourceGroup().location
param storageAccountName string = 'stor${uniqueString(resourceGroup().id)}'
param storageSkuName string = 'Standard_LRS'
param roleDefinitionResourceId string
param principalId string

resource storageAccount 'Microsoft.Storage/storageAccounts@2023-05-01' = {
  name: storageAccountName
  location: location
  kind: 'StorageV2'
  sku: {
   name: storageSkuName
  }
}

resource roleAssignment 'Microsoft.Authorization/roleAssignments@2022-04-01' = {
  scope: storageAccount
  name: guid(storageAccount.id, principalId, roleDefinitionResourceId)
  properties: {
    roleDefinitionId: roleDefinitionResourceId
    principalId: principalId
    principalType: 'ServicePrincipal'
  }
}
If you don't explicitly specify the scope, Bicep uses the file'stargetScope. In the following example, noscopeproperty is specified, so the role assignment is scoped to the subscription:
targetScope
scope
param roleDefinitionResourceId string
param principalId string

targetScope = 'subscription'

resource roleAssignment 'Microsoft.Authorization/roleAssignments@2022-04-01' = {
  name: guid(subscription().id, principalId, roleDefinitionResourceId)
  properties: {
    roleDefinitionId: roleDefinitionResourceId
    principalId: principalId
    principalType: 'ServicePrincipal'
  }
}
param roleDefinitionResourceId string
param principalId string

targetScope = 'subscription'

resource roleAssignment 'Microsoft.Authorization/roleAssignments@2022-04-01' = {
  name: guid(subscription().id, principalId, roleDefinitionResourceId)
  properties: {
    roleDefinitionId: roleDefinitionResourceId
    principalId: principalId
    principalType: 'ServicePrincipal'
  }
}
Tip
Use the smallest scope that you need to meet your requirements.
For example, if you need to grant a managed identity access to a single storage account, it's good security practice to create the role assignment at the scope of the storage account and not at the resource group or subscription scope.
Name
A role assignment's resource name must be a globally unique identifier (GUID).
Role assignment resource names must be unique within the Microsoft Entra tenant, even if the scope is narrower.
For your Bicep deployment to be repeatable, it's important for the name to be deterministic; i.e., use the same name every time you deploy. It's a good practice to create a GUID that uses the scope, principal ID, and role ID together. It's a good idea to use theguid()function to help you to create a deterministic GUID for your role assignment names, like in this example:
guid()
name: guid(subscription().id, principalId, roleDefinitionResourceId)
name: guid(subscription().id, principalId, roleDefinitionResourceId)
Role definition ID
The role you assign can be a built-in role definition or acustom role definition. To use a built-in role definition,find the appropriate role definition ID. For example, theContributorrole has a role definition ID ofb24988ac-6180-42a0-ab88-20f7382dd24c.
b24988ac-6180-42a0-ab88-20f7382dd24c
When you create the role assignment resource, you need to specify a fully qualified resource ID. Built-in role definition IDs are subscription-scoped resources. It's recommended to use anexistingresource to refer to the built-in role and to use the.idproperty to access its fully qualified resource ID:
existing
.id
param principalId string

@description('This is the built-in Contributor role. See https://learn.microsoft.com/azure/role-based-access-control/built-in-roles#contributor')
resource contributorRoleDefinition 'Microsoft.Authorization/roleDefinitions@2022-04-01' existing = {
  scope: subscription()
  name: 'b24988ac-6180-42a0-ab88-20f7382dd24c'
}

resource roleAssignment 'Microsoft.Authorization/roleAssignments@2022-04-01' = {
  name: guid(resourceGroup().id, principalId, contributorRoleDefinition.id)
  properties: {
    roleDefinitionId: contributorRoleDefinition.id
    principalId: principalId
    principalType: 'ServicePrincipal'
  }
}
param principalId string

@description('This is the built-in Contributor role. See https://learn.microsoft.com/azure/role-based-access-control/built-in-roles#contributor')
resource contributorRoleDefinition 'Microsoft.Authorization/roleDefinitions@2022-04-01' existing = {
  scope: subscription()
  name: 'b24988ac-6180-42a0-ab88-20f7382dd24c'
}

resource roleAssignment 'Microsoft.Authorization/roleAssignments@2022-04-01' = {
  name: guid(resourceGroup().id, principalId, contributorRoleDefinition.id)
  properties: {
    roleDefinitionId: contributorRoleDefinition.id
    principalId: principalId
    principalType: 'ServicePrincipal'
  }
}
Principal
TheprincipalIdproperty must be set to a GUID that represents the Microsoft Entra identifier for the principal. In Microsoft Entra ID, this is sometimes referred to as theobject ID.
principalId
TheprincipalTypeproperty specifies whether the principal is a user, a group, or a service principal. Managed identities are a form of service principal.
principalType
Tip
It's important to set theprincipalTypeproperty when you create a role assignment in Bicep. Otherwise, you might get intermittent deployment errors, especially when you work with service principals and managed identities.
principalType
The following example shows how to create a user-assigned managed identity and a role assignment:
param location string = resourceGroup().location
param roleDefinitionResourceId string

var managedIdentityName = 'MyManagedIdentity'

resource managedIdentity 'Microsoft.ManagedIdentity/userAssignedIdentities@2023-01-31' = {
  name: managedIdentityName
  location: location
}

resource roleAssignment 'Microsoft.Authorization/roleAssignments@2022-04-01' = {
  name: guid(resourceGroup().id, managedIdentity.id, roleDefinitionResourceId)
  properties: {
    roleDefinitionId: roleDefinitionResourceId
    principalId: managedIdentity.properties.principalId
    principalType: 'ServicePrincipal'
  }
}
param location string = resourceGroup().location
param roleDefinitionResourceId string

var managedIdentityName = 'MyManagedIdentity'

resource managedIdentity 'Microsoft.ManagedIdentity/userAssignedIdentities@2023-01-31' = {
  name: managedIdentityName
  location: location
}

resource roleAssignment 'Microsoft.Authorization/roleAssignments@2022-04-01' = {
  name: guid(resourceGroup().id, managedIdentity.id, roleDefinitionResourceId)
  properties: {
    roleDefinitionId: roleDefinitionResourceId
    principalId: managedIdentity.properties.principalId
    principalType: 'ServicePrincipal'
  }
}
Resource deletion behavior
When you delete a user, group, service principal, or managed identity from Microsoft Entra ID, it's recommended to delete any role assignments. They aren't deleted automatically.
Any role assignments that refer to a deleted principal ID become invalid. If you try to reuse a role assignment's name for another role assignment, the deployment will fail. To work around this behavior, you should either remove the old role assignment before you recreate it, or ensure that you use a unique name when you deploy a new role assignment. Thisquickstart templateillustrates how you can define a role assignment in a Bicep module and use a principal ID as a seed value for the role assignment name.
Custom role definitions
Custom role definitions enable you to define a set of permissions that can then be assigned to a principal by using a role assignment. For more information on role definitions, seeUnderstand Azure role definitions.
To create a custom role definition, define a resource of typeMicrosoft.Authorization/roleDefinitions. See theCreate a new role def via a subscription-level deploymentquickstart for an example.
Microsoft.Authorization/roleDefinitions
Role definition resource names must be unique within the Microsoft Entra tenant, even if the assignable scopes are more narrow.
Note
Some services manage their own role definitions and assignments. For example, Azure Cosmos DB maintains its ownMicrosoft.DocumentDB/databaseAccounts/sqlRoleAssignmentsandMicrosoft.DocumentDB/databaseAccounts/sqlRoleDefinitionsresources. For more information, see the specific service's documentation.
Microsoft.DocumentDB/databaseAccounts/sqlRoleAssignments
Microsoft.DocumentDB/databaseAccounts/sqlRoleDefinitions
Related resources
Resource documentationMicrosoft.Authorization/roleAssignmentsMicrosoft.Authorization/roleDefinitions
Microsoft.Authorization/roleAssignments
Microsoft.Authorization/roleAssignments
Microsoft.Authorization/roleDefinitions
Microsoft.Authorization/roleDefinitions
Extension resources
ScopesResource groupSubscriptionManagement groupTenant
Resource group
Subscription
Management group
Tenant
Quickstart templatesCreate a new role def via a subscription-level deploymentAssign a role at subscription scopeAssign a role at tenant scopeCreate a resourceGroup, apply a lock and RBACCreate key vault, managed identity, and role assignment
Create a new role def via a subscription-level deployment
Assign a role at subscription scope
Assign a role at tenant scope
Create a resourceGroup, apply a lock and RBAC
Create key vault, managed identity, and role assignment
Community blog postsCreate role assignments for different scopes with Bicep, by Barbara Forbes
Create role assignments for different scopes with Bicep, by Barbara Forbes
Feedback
Was this page helpful?
Additional resources