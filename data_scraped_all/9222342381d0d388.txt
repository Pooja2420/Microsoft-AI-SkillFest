Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
How to authenticate JavaScript apps to Azure services using the Azure Identity library
Article
2024-12-06
2 contributors
In this article
When an application needs to access an Azure resource, such as Storage, Key Vault, or Cognitive Services, the application must be authenticated to Azure. This is true for all applications, whether deployed to Azure, deployed on-premises, or under development on a local developer workstation. This article describes the recommended approaches to authenticate an app to Azure when using the Azure SDK for JavaScript.
Recommended app authentication approach
The recommended approach is to have your apps usetoken-based authentication, rather than connection strings or keys, when authenticating to Azure resources. The Azure Identity library provides token-based authentication and allows apps to seamlessly authenticate to Azure resources whether the app is in local development, deployed to Azure, or deployed to an on-premises server.
The specific type of token-based authentication an app should use to authenticate to Azure resources depends on where the app is running and is shown in the following diagram.

Advantages of token-based authentication
When building apps for Azure, token-based authentication is strongly recommended over secrets (connection strings or keys). Token-based authentication is provided withDefaultAzureCredential.
Use of connection strings should be limited to initial proof of concept apps or development prototypes that don't access production or sensitive data. Otherwise, the token-based authentication classes available in the Azure Identity library should always be preferred when authenticating to Azure resources.
Use the following library:
@azure/identity
DefaultAzureCredential
TheDefaultAzureCredentialclass provided by the Azure Identity library allows apps to use different authentication methods depending on the environment in which they're run. This behavior allows apps to be promoted from local development to test environments to production without code changes. You configure the appropriate authentication method for each environment, andDefaultAzureCredentialwill automatically detect and use that authentication method. The use ofDefaultAzureCredentialshould be preferred over manually coding conditional logic or feature flags to use different authentication methods in different environments.
DefaultAzureCredential
DefaultAzureCredential
Details about usingDefaultAzureCredentialare covered atUseDefaultAzureCredentialin an application.
DefaultAzureCredential
DefaultAzureCredential
Authentication in server environments
When hosting in a server environment, each application should be assigned a uniqueapplication identityper environment. In Azure, an app identity is represented by aservice principal, a special type ofsecurity principalintended to identify and authenticate apps to Azure. The type of service principal to use for your app depends on where your app is running.
Authentication during local development
When an application is run on a developer's workstation during local development, the local environment must still authenticate to any Azure services used by the app.
Use DefaultAzureCredential in an application
DefaultAzureCredentialis an opinionated, ordered sequence of mechanisms for authenticating to Microsoft Entra ID. Each authentication mechanism is a class derived from theTokenCredentialclass and is known as acredential. At runtime,DefaultAzureCredentialattempts to authenticate using the first credential. If that credential fails to acquire an access token, the next credential in the sequence is attempted, and so on, until an access token is successfully obtained. In this way, your app can use different credentials in different environments without writing environment-specific code.
DefaultAzureCredential
To useDefaultAzureCredential, add the@azure/identitypackage to your application.
npm install @azure/identity
npm install @azure/identity
Then, the followingcode sampleshows how to instantiate aDefaultAzureCredentialobject and use it with an Azure SDK service client classâin this case, aBlobServiceClientused to access Azure Blob Storage.
DefaultAzureCredential
BlobServiceClient
import { BlobServiceClient } from '@azure/storage-blob';
import { DefaultAzureCredential } from '@azure/identity';
import 'dotenv/config';

const accountName = process.env.AZURE_STORAGE_ACCOUNT_NAME;
if (!accountName) throw Error('Azure Storage accountName not found');

const blobServiceClient = new BlobServiceClient(
  `https://${accountName}.blob.core.windows.net`,
  new DefaultAzureCredential()
);
import { BlobServiceClient } from '@azure/storage-blob';
import { DefaultAzureCredential } from '@azure/identity';
import 'dotenv/config';

const accountName = process.env.AZURE_STORAGE_ACCOUNT_NAME;
if (!accountName) throw Error('Azure Storage accountName not found');

const blobServiceClient = new BlobServiceClient(
  `https://${accountName}.blob.core.windows.net`,
  new DefaultAzureCredential()
);
DefaultAzureCredentialwill automatically detect the authentication mechanism configured for the app and obtain the necessary tokens to authenticate the app to Azure. If an application makes use of more than one SDK client, the same credential object can be used with each SDK client object.
DefaultAzureCredential
Feedback
Was this page helpful?
Additional resources