Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Branch policies and settings
Article
2025-01-09
20 contributors
In this article
Azure DevOps Services | Azure DevOps Server 2022 - Azure DevOps Server 2019
Branch policies help teams protect their importantbranchesof development. Policies enforce your team's code quality and change management standards. This article describes how to set and manage branch policies. For an overview of all repository and branch policies and settings, seeGit repository settings and policies.
A branch with required policies configured can't be deleted, and requires pull requests (PRs) for all changes.
Prerequisites
To set branch policies, be a member of the Project Administrators security group or have repository-levelEdit policiespermissions. For more information, seeSet Git repository permissions.
To set branch policies, be a member of the Project Administrators security group or have repository-levelEdit policiespermissions. For more information, seeSet Git repository permissions.
If you want to use Azure DevOps CLIaz repos policycommands to manage branch policies, follow the steps inGet started with Azure DevOps CLI.
If you want to use Azure DevOps CLIaz repos policycommands to manage branch policies, follow the steps inGet started with Azure DevOps CLI.
To set branch policies, be a member of the Project Administrators security group or have repository-levelEdit policiespermissions. For more information, seeSet Git repository permissions.
Configure branch policies
Browser
Azure DevOps CLI
To manage branch policies, selectRepos>Branchesto open theBranchespage in the web portal.

You can also get to branch policy settings withProject Settings>Repository>Policies>Branch Policies><Branch Name>.
Branches that have policies display a policy icon. You can select the icon to go directly to the branch's policy settings.
To set branch policies, locate the branch you want to manage. You can browse the list or search for your branch in theSearch branch namebox at upper right.
Select theMore optionsicon next to the branch, and then selectBranch policiesfrom the context menu.

Configure policies on the branch's settings page. See the following sections for descriptions and instructions for each policy type.
You can use Azure DevOps CLI to list or show policies for a branch or repository.
List policies
To list all policies in a project, useaz repos policy list.
az repos policy list [--branch]
                     [--detect {false, true}]
                     [--org]
                     [--project]
                     [--query-examples]
                     [--repository-id]
                     [--subscription]
az repos policy list [--branch]
                     [--detect {false, true}]
                     [--org]
                     [--project]
                     [--query-examples]
                     [--repository-id]
                     [--subscription]
Parameters
branch
--repository-id
--branch main
detect
false
true
org
organization
az devops configure -d organization=<ORG_URL>
https://dev.azure.com/MyOrganizationName/
project
p
az devops configure -d project=<NAME_OR_ID>
query-examples
--query
repository-id
--repository-ID e556f204-53c9-4153-9cd9-ef41a11e3345
subscription
az account set -s <NAME_OR_ID>
Example
The following command returns all the branch policies in effect in themainbranch of the Fabrikam repository, IDd28cd374-e7f0-4b1f-ad60-f349f155d47c. You can get the repository ID by runningaz repos list.
main
d28cd374-e7f0-4b1f-ad60-f349f155d47c
az repos list
This example uses the following default configuration:az devops configure --defaults organization=https://dev.azure.com/fabrikamprime project="Fabrikam Fiber".
az devops configure --defaults organization=https://dev.azure.com/fabrikamprime project="Fabrikam Fiber"
az repos policy list --repository-id d28cd374-e7f0-4b1f-ad60-f349f155d47c --branch main --output table

ID    Name                         Is Blocking    Is Enabled    Repository Id                         Branch
----  ---------------------------  -------------  ------------  ------------------------------------  ---------------
3     Work item linking            False          True          d28cd374-e7f0-4b1f-ad60-f349f155d47c  refs/heads/main
5     Minimum number of reviewers  True           True          d28cd374-e7f0-4b1f-ad60-f349f155d47c  refs/heads/main
6     Comment requirements         False          True          d28cd374-e7f0-4b1f-ad60-f349f155d47c  refs/heads/main
12    Required reviewers           True           False         d28cd374-e7f0-4b1f-ad60-f349f155d47c  refs/heads/main
13    Required reviewers           False          True          d28cd374-e7f0-4b1f-ad60-f349f155d47c  refs/heads/main
az repos policy list --repository-id d28cd374-e7f0-4b1f-ad60-f349f155d47c --branch main --output table

ID    Name                         Is Blocking    Is Enabled    Repository Id                         Branch
----  ---------------------------  -------------  ------------  ------------------------------------  ---------------
3     Work item linking            False          True          d28cd374-e7f0-4b1f-ad60-f349f155d47c  refs/heads/main
5     Minimum number of reviewers  True           True          d28cd374-e7f0-4b1f-ad60-f349f155d47c  refs/heads/main
6     Comment requirements         False          True          d28cd374-e7f0-4b1f-ad60-f349f155d47c  refs/heads/main
12    Required reviewers           True           False         d28cd374-e7f0-4b1f-ad60-f349f155d47c  refs/heads/main
13    Required reviewers           False          True          d28cd374-e7f0-4b1f-ad60-f349f155d47c  refs/heads/main
Show details of a policy
To show the details of any policy, useaz repos policy show.
az repos policy show --id
                     [--detect {false, true}]
                     [--org]
                     [--project]
                     [--query-examples]
                     [--subscription]
az repos policy show --id
                     [--detect {false, true}]
                     [--org]
                     [--project]
                     [--query-examples]
                     [--subscription]
Parameters
id
policy-id
detect
false
true
org
organization
az devops configure -d organization=<ORG_URL>
https://dev.azure.com/MyOrganizationName/
project
p
az devops configure -d project=<NAME_OR_ID>
query-examples
--query
subscription
az account set -s <NAME_OR_ID>
Azure DevOps CLI commands aren't supported for Azure DevOps Server.

Require a minimum number of reviewers
Code reviews are important for software development projects. To ensure that teams review and approve PRs, you can require approval from a minimum number of reviewers. The basic policy requires that a specified number of reviewers approve the code, with no rejections.
Browser
Azure DevOps CLI
To set the policy, underBranch Policies, setRequire a minimum number of reviewerstoOn. Enter the required number of reviewers, and select any of the following options:

SelectAllow requestors to approve their own changesto allow a PR's creator to vote on its approval. Otherwise, the creator can still voteApproveon the PR, but their vote does't count toward the minimum number of reviewers.
SelectAllow requestors to approve their own changesto allow a PR's creator to vote on its approval. Otherwise, the creator can still voteApproveon the PR, but their vote does't count toward the minimum number of reviewers.
SelectProhibit the most recent pusher from approving their own changesto enforce segregation of duties. By default, anyone with push permission on the source branch can both add commits and vote on PR approval. Selecting this option means the most recent pusher's vote doesn't count, even if they can ordinarily approve their own changes.
SelectProhibit the most recent pusher from approving their own changesto enforce segregation of duties. By default, anyone with push permission on the source branch can both add commits and vote on PR approval. Selecting this option means the most recent pusher's vote doesn't count, even if they can ordinarily approve their own changes.
SelectAllow completion even if some reviewers vote to wait or rejectto allow PR completion even if some reviewers vote against approval. The minimum number of reviewers must still approve.
SelectAllow completion even if some reviewers vote to wait or rejectto allow PR completion even if some reviewers vote against approval. The minimum number of reviewers must still approve.
UnderWhen new changes are pushed:SelectRequire at least one approval on the last iterationto require at least one approval vote for the last source branch change.SelectReset all approval votes (does not reset votes to reject or wait)to remove all approval votes, but keep votes to reject or wait, whenever the source branch changes.SelectReset all code reviewer votesto remove all reviewer votes whenever the source branch changes, including votes to approve, reject, or wait.
SelectRequire at least one approval on the last iterationto require at least one approval vote for the last source branch change.
SelectReset all approval votes (does not reset votes to reject or wait)to remove all approval votes, but keep votes to reject or wait, whenever the source branch changes.
SelectReset all code reviewer votesto remove all reviewer votes whenever the source branch changes, including votes to approve, reject, or wait.
UnderWhen new changes are pushed:SelectRequire at least one approval on every iterationto require at least one approval vote for the last source branch change. The user's approval isn't counted against any previous unapproved iteration pushed by that user. As a result, another approval on the last iteration is required to be done by another user.Require at least one approval on every iterationis available in Azure DevOps Server 2022.1 and higher.SelectRequire at least one approval on the last iterationto require at least one approval vote for the last source branch change.SelectReset all approval votes (does not reset votes to reject or wait)to remove all approval votes, but keep votes to reject or wait, whenever the source branch changes.SelectReset all code reviewer votesto remove all reviewer votes whenever the source branch changes, including votes to approve, reject, or wait.
SelectRequire at least one approval on every iterationto require at least one approval vote for the last source branch change. The user's approval isn't counted against any previous unapproved iteration pushed by that user. As a result, another approval on the last iteration is required to be done by another user.Require at least one approval on every iterationis available in Azure DevOps Server 2022.1 and higher.
SelectRequire at least one approval on the last iterationto require at least one approval vote for the last source branch change.
SelectReset all approval votes (does not reset votes to reject or wait)to remove all approval votes, but keep votes to reject or wait, whenever the source branch changes.
SelectReset all code reviewer votesto remove all reviewer votes whenever the source branch changes, including votes to approve, reject, or wait.
If all other policies pass, the creator can complete the PR when the required number of reviewers approve it.
You can manage pull request required approver counts withaz repos policy approver-count.
Create approver count policy
To create an approver count policy, useaz repos policy approver-count create.
az repos policy approver-count create --allow-downvotes {false, true}
                                      --blocking {false, true}
                                      --branch
                                      --creator-vote-counts {false, true}
                                      --enabled {false, true}
                                      --minimum-approver-count
                                      --repository-id
                                      --reset-on-source-push {false, true}
                                      [--branch-match-type {exact, prefix}]
                                      [--detect {false, true}]
                                      [--org]
                                      [--project]
                                      [--subscription]
az repos policy approver-count create --allow-downvotes {false, true}
                                      --blocking {false, true}
                                      --branch
                                      --creator-vote-counts {false, true}
                                      --enabled {false, true}
                                      --minimum-approver-count
                                      --repository-id
                                      --reset-on-source-push {false, true}
                                      [--branch-match-type {exact, prefix}]
                                      [--detect {false, true}]
                                      [--org]
                                      [--project]
                                      [--subscription]
Parameters
allow-downvotes
false
true
blocking
false
true
branch
--repository-id
--branch main
creator-vote-counts
false
true
enabled
false
true
minimum-approver-count
2
repository-id
--repository-ID e556f204-53c9-4153-9cd9-ef41a11e3345
reset-on-source-push
false
true
branch-match-type
branch
exact
--branch
prefix
--branch
exact
prefix
exact
detect
false
true
org
az devops configure -d organization=<ORG_URL>
https://dev.azure.com/MyOrganizationName/
project
p
az devops configure -d project=<NAME_OR_ID>
subscription
az account set -s <NAME_OR_ID>
Example
The following example sets the minimum number of required approvals to2for pull requests in themainbranch of the Fabrikam repository. The policy allows downvotes, meaning that pull requests can complete even if some reviewers vote not to approve, as long as the minimum number vote to approve. Pushes to the source branch don't reset votes. The policy also allows pull request creators to approve their own pull requests.
2
main
This example uses the default configurationaz devops configure --defaults organization=https://dev.azure.com/fabrikamprime project="Fabrikam Fiber".
az devops configure --defaults organization=https://dev.azure.com/fabrikamprime project="Fabrikam Fiber"
az repos policy approver-count create --allow-downvotes true --blocking true --branch main --creator-vote-counts true --enabled true --minimum-approver-count 2 --repository-id d28cd374-e7f0-4b1f-ad60-f349f155d47c --reset-on-source-push false --output table

ID    Name                         Is Blocking    Is Enabled    Repository Id                         Branch
----  ---------------------------  -------------  ------------  ------------------------------------  ---------------
27    Minimum number of reviewers  True           True          d28cd374-e7f0-4b1f-ad60-f349f155d47c  refs/heads/main
az repos policy approver-count create --allow-downvotes true --blocking true --branch main --creator-vote-counts true --enabled true --minimum-approver-count 2 --repository-id d28cd374-e7f0-4b1f-ad60-f349f155d47c --reset-on-source-push false --output table

ID    Name                         Is Blocking    Is Enabled    Repository Id                         Branch
----  ---------------------------  -------------  ------------  ------------------------------------  ---------------
27    Minimum number of reviewers  True           True          d28cd374-e7f0-4b1f-ad60-f349f155d47c  refs/heads/main
Update approver count policy
To update an approver count policy, useaz repos policy approver-count update.
az repos policy approver-count update --id
                                      [--allow-downvotes {false, true}]
                                      [--blocking {false, true}]
                                      [--branch]
                                      [--branch-match-type {exact, prefix}]
                                      [--creator-vote-counts {false, true}]
                                      [--detect {false, true}]
                                      [--enabled {false, true}]
                                      [--minimum-approver-count]
                                      [--org]
                                      [--project]
                                      [--repository-id]
                                      [--reset-on-source-push {false, true}]
                                      [--subscription]
az repos policy approver-count update --id
                                      [--allow-downvotes {false, true}]
                                      [--blocking {false, true}]
                                      [--branch]
                                      [--branch-match-type {exact, prefix}]
                                      [--creator-vote-counts {false, true}]
                                      [--detect {false, true}]
                                      [--enabled {false, true}]
                                      [--minimum-approver-count]
                                      [--org]
                                      [--project]
                                      [--repository-id]
                                      [--reset-on-source-push {false, true}]
                                      [--subscription]
Parameters
id
policy-id
allow-downvotes
false
true
blocking
false
true
branch
--repository-id
--branch main
branch-match-type
branch
exact
--branch
prefix
--branch
exact
prefix
exact
creator-vote-counts
false
true
detect
false
true
enabled
false
true
minimum-approver-count
2
org
az devops configure -d organization=<ORG_URL>
https://dev.azure.com/MyOrganizationName/
project
p
az devops configure -d project=<NAME_OR_ID>
repository-id
--repository-ID e556f204-53c9-4153-9cd9-ef41a11e3345
reset-on-source-push
false
true
subscription
az account set -s <NAME_OR_ID>
Azure DevOps CLI commands aren't supported for Azure DevOps Server.

Check for linked work items
Forwork item management tracking, you can require associations between PRs and work items. Linking work items provides more context for changes, and ensures that updates go through your work item tracking process.
Browser
Azure DevOps CLI
To set the policy, underBranch Policies, setCheck for linked work itemstoOn. This setting requires that work items be linked to a PR for the PR to merge. Make the settingOptionalto warn when there are no linked work items, but allow completion of the pull request.

You can use Azure CLIaz repos policy work-item-linkingto create and update work item linking policies for a branch or repository.

Create work item linking policy
Useaz repos policy work-item-linking createto create a work item linking policy for a repository or branches.
az repos policy work-item-linking create --blocking {false, true}
                                         --branch
                                         --enabled {false, true}
                                         --repository-id
                                         [--branch-match-type {exact, prefix}]
                                         [--detect {false, true}]
                                         [--org]
                                         [--project]
                                         [--subscription]
az repos policy work-item-linking create --blocking {false, true}
                                         --branch
                                         --enabled {false, true}
                                         --repository-id
                                         [--branch-match-type {exact, prefix}]
                                         [--detect {false, true}]
                                         [--org]
                                         [--project]
                                         [--subscription]
Parameters
blocking
false
true
branch
--repository-id
--branch main
enabled
false
true
repository-id
--repository-ID e556f204-53c9-4153-9cd9-ef41a11e3345
branch-match-type
branch
exact
--branch
prefix
--branch
exact
prefix
exact
detect
false
true
org
az devops configure -d organization=<ORG_URL>
https://dev.azure.com/MyOrganizationName/
project
p
az devops configure -d project=<NAME_OR_ID>
subscription
az account set -s <NAME_OR_ID>

Update work item linking policy
Useaz repos policy work-item-linking updateto update a work item linking policy for a repository or one or more branches.
az repos policy work-item-linking update --id
                                         [--blocking {false, true}]
                                         [--branch]
                                         [--branch-match-type {exact, prefix}]
                                         [--detect {false, true}]
                                         [--enabled {false, true}]
                                         [--org]
                                         [--project]
                                         [--repository-id]
                                         [--subscription]
az repos policy work-item-linking update --id
                                         [--blocking {false, true}]
                                         [--branch]
                                         [--branch-match-type {exact, prefix}]
                                         [--detect {false, true}]
                                         [--enabled {false, true}]
                                         [--org]
                                         [--project]
                                         [--repository-id]
                                         [--subscription]
Parameters
id
policy-id
blocking
false
true
branch
--repository-id
--branch main
branch-match-type
branch
exact
--branch
prefix
--branch
exact
prefix
exact
detect
false
true
enabled
false
true
minimum-approver-count
2
org
az devops configure -d organization=<ORG_URL>
https://dev.azure.com/MyOrganizationName/
project
p
az devops configure -d project=<NAME_OR_ID>
repository-id
--repository-ID e556f204-53c9-4153-9cd9-ef41a11e3345
subscription
az account set -s <NAME_OR_ID>
Example
The following example updates the policy ID3for themainbranch of the Fabrikam repository to be enabled but optional. The example uses the default configurationaz devops configure --defaults organization=https://dev.azure.com/fabrikamprime project="Fabrikam Fiber".
3
main
az devops configure --defaults organization=https://dev.azure.com/fabrikamprime project="Fabrikam Fiber"
>az repos policy work-item-linking update --id 3 --blocking false --branch main --enabled true --repository-id d28cd374-e7f0-4b1f-ad60-f349f155d47c --output table

ID    Name               Is Blocking    Is Enabled    Repository Id                         Branch
----  -----------------  -------------  ------------  ------------------------------------  ---------------
3     Work item linking  False          True          d28cd374-e7f0-4b1f-ad60-f349f155d47c  refs/heads/main
>az repos policy work-item-linking update --id 3 --blocking false --branch main --enabled true --repository-id d28cd374-e7f0-4b1f-ad60-f349f155d47c --output table

ID    Name               Is Blocking    Is Enabled    Repository Id                         Branch
----  -----------------  -------------  ------------  ------------------------------------  ---------------
3     Work item linking  False          True          d28cd374-e7f0-4b1f-ad60-f349f155d47c  refs/heads/main
Azure DevOps CLI commands aren't supported for Azure DevOps Server.

Check for comment resolution
TheCheck for comment resolutionpolicy checks whether all PR comments are resolved.
Browser
Azure DevOps CLI
Configure a comment resolution policy for your branch by settingCheck for comment resolutiontoOn. Then select whether to make the policyRequiredorOptional.

For more information on working with pull request comments, seeReview pull requests.
You can use Azure DevOps CLIaz repos policy comment-requiredto set and update comment resolution policy.
Create comment resolution policy
To create a comment resolution policy, useaz repos policy comment-required create.
az repos policy comment-required create --blocking {false, true}
                                        --branch
                                        --enabled {false, true}
                                        --repository-id
                                        [--branch-match-type {exact, prefix}]
                                        [--detect {false, true}]
                                        [--org]
                                        [--project]
                                        [--subscription]
az repos policy comment-required create --blocking {false, true}
                                        --branch
                                        --enabled {false, true}
                                        --repository-id
                                        [--branch-match-type {exact, prefix}]
                                        [--detect {false, true}]
                                        [--org]
                                        [--project]
                                        [--subscription]
Parameters
blocking
false
true
branch
--repository-id
--branch main
enabled
false
true
repository-id
--repository-ID e556f204-53c9-4153-9cd9-ef41a11e3345
branch-match-type
branch
exact
--branch
prefix
--branch
exact
prefix
exact
detect
false
true
org
az devops configure -d organization=<ORG_URL>
https://dev.azure.com/MyOrganizationName/
project
p
az devops configure -d project=<NAME_OR_ID>
subscription
az account set -s <NAME_OR_ID>
Update comment resolution policy
To update a comment resolution policy, useaz repos policy comment-required update.
az repos policy comment-required update --id
                                        [--blocking {false, true}]
                                        [--branch]
                                        [--branch-match-type {exact, prefix}]
                                        [--detect {false, true}]
                                        [--enabled {false, true}]
                                        [--org]
                                        [--project]
                                        [--repository-id]
                                        [--subscription]
az repos policy comment-required update --id
                                        [--blocking {false, true}]
                                        [--branch]
                                        [--branch-match-type {exact, prefix}]
                                        [--detect {false, true}]
                                        [--enabled {false, true}]
                                        [--org]
                                        [--project]
                                        [--repository-id]
                                        [--subscription]
Parameters
id
policy-id
blocking
false
true
branch
--repository-id
--branch main
branch-match-type
branch
exact
--branch
prefix
--branch
exact
prefix
exact
detect
false
true
enabled
false
true
org
az devops configure -d organization=<ORG_URL>
https://dev.azure.com/MyOrganizationName/
project
p
az devops configure -d project=<NAME_OR_ID>
repository-id
--repository-ID e556f204-53c9-4153-9cd9-ef41a11e3345
subscription
az account set -s <NAME_OR_ID>
Example
The following example updates comment resolution policy ID6in themainbranch of the Fabrikam repository to be blocking. Comments must be resolved before pull requests can merge. This example uses the default configurationaz devops configure --defaults organization=https://dev.azure.com/fabrikamprime project="Fabrikam Fiber".
6
main
az devops configure --defaults organization=https://dev.azure.com/fabrikamprime project="Fabrikam Fiber"
az repos policy comment-required update --id 6 --blocking true --output table

ID    Name                  Is Blocking    Is Enabled    Repository Id                         Branch
----  --------------------  -------------  ------------  ------------------------------------  ---------------
6     Comment requirements  True           True          d28cd374-e7f0-4b1f-ad60-f349f155d47c  refs/heads/main
az repos policy comment-required update --id 6 --blocking true --output table

ID    Name                  Is Blocking    Is Enabled    Repository Id                         Branch
----  --------------------  -------------  ------------  ------------------------------------  ---------------
6     Comment requirements  True           True          d28cd374-e7f0-4b1f-ad60-f349f155d47c  refs/heads/main
Azure DevOps CLI commands aren't supported for Azure DevOps Server.

Limit merge types
Azure Repos has several merge strategies, and by default, all of them are allowed. You can maintain a consistent branch history by enforcing a merge strategy for PR completion.
Browser
Azure DevOps CLI
SetLimit merge typestoOnto limit which merge types to allow in your repo.

Basic merge (no fast-forward)creates a merge commit in the target whose parents are the target and source branches.
Squash mergecreates a linear history with a single commit in the target branch with the changes from the source branch.Learn more about squash mergingand how it affects branch history.
Rebase and fast-forwardcreates a linear history by replaying source commits onto the target branch with no merge commit.
Rebase with merge commitreplays the source commits onto the target and also creates a merge commit.
You can use Azure DevOps CLIaz repos policy merge-strategyto set and update merge strategy policy.
Create a merge strategy policy
Useaz repos policy merge-strategy createto create a merge strategy policy.
az repos policy merge-strategy create --blocking {false, true}
                                      --branch
                                      --enabled {false, true}
                                      --repository-id
                                      [--allow-no-fast-forward {false, true}]
                                      [--allow-rebase {false, true}]
                                      [--allow-rebase-merge {false, true}]
                                      [--allow-squash {false, true}]
                                      [--branch-match-type {exact, prefix}]
                                      [--detect {false, true}]
                                      [--org]
                                      [--project]
                                      [--subscription]
                                      [--use-squash-merge {false, true}]
az repos policy merge-strategy create --blocking {false, true}
                                      --branch
                                      --enabled {false, true}
                                      --repository-id
                                      [--allow-no-fast-forward {false, true}]
                                      [--allow-rebase {false, true}]
                                      [--allow-rebase-merge {false, true}]
                                      [--allow-squash {false, true}]
                                      [--branch-match-type {exact, prefix}]
                                      [--detect {false, true}]
                                      [--org]
                                      [--project]
                                      [--subscription]
                                      [--use-squash-merge {false, true}]
Parameters
blocking
false
true
branch
--repository-id
--branch main
enabled
false
true
repository-id
--repository-ID e556f204-53c9-4153-9cd9-ef41a11e3345
allow-no-fast-forward
false
true
allow-rebase
false
true
allow-rebase-merge
false
true
allow-squash
false
true
branch-match-type
branch
exact
--branch
prefix
--branch
exact
prefix
exact
detect
false
true
org
az devops configure -d organization=<ORG_URL>
https://dev.azure.com/MyOrganizationName/
project
p
az devops configure -d project=<NAME_OR_ID>
subscription
az account set -s <NAME_OR_ID>
use-squash-merge
false
true
use-squash-merge
--allow-squash
Example
The following example sets a required merge strategy for pull requests in themainbranch of the Fabrikam repository to allow squash merge. This example uses the default configurationaz devops configure --defaults organization=https://dev.azure.com/fabrikamprime project="Fabrikam Fiber".
main
az devops configure --defaults organization=https://dev.azure.com/fabrikamprime project="Fabrikam Fiber"
az repos policy merge-strategy create --allow-squash true --blocking true --branch main --enabled true --repository-id d28cd374-e7f0-4b1f-ad60-f349f155d47c --output table

ID    Name                      Is Blocking    Is Enabled    Repository Id                         Branch
----  ------------------------  -------------  ------------  ------------------------------------  ---------------
29    Require a merge strategy  True           True          d28cd374-e7f0-4b1f-ad60-f349f155d47c  refs/heads/main
az repos policy merge-strategy create --allow-squash true --blocking true --branch main --enabled true --repository-id d28cd374-e7f0-4b1f-ad60-f349f155d47c --output table

ID    Name                      Is Blocking    Is Enabled    Repository Id                         Branch
----  ------------------------  -------------  ------------  ------------------------------------  ---------------
29    Require a merge strategy  True           True          d28cd374-e7f0-4b1f-ad60-f349f155d47c  refs/heads/main
Update a merge strategy policy
Useaz repos policy merge-strategy updateto update a merge strategy policy.
az repos policy merge-strategy update --id
                                      [--allow-no-fast-forward {false, true}]
                                      [--allow-rebase {false, true}]
                                      [--allow-rebase-merge {false, true}]
                                      [--allow-squash {false, true}]
                                      [--blocking {false, true}]
                                      [--branch]
                                      [--branch-match-type {exact, prefix}]
                                      [--detect {false, true}]
                                      [--enabled {false, true}]
                                      [--org]
                                      [--project]
                                      [--repository-id]
                                      [--subscription]
                                      [--use-squash-merge {false, true}]
az repos policy merge-strategy update --id
                                      [--allow-no-fast-forward {false, true}]
                                      [--allow-rebase {false, true}]
                                      [--allow-rebase-merge {false, true}]
                                      [--allow-squash {false, true}]
                                      [--blocking {false, true}]
                                      [--branch]
                                      [--branch-match-type {exact, prefix}]
                                      [--detect {false, true}]
                                      [--enabled {false, true}]
                                      [--org]
                                      [--project]
                                      [--repository-id]
                                      [--subscription]
                                      [--use-squash-merge {false, true}]
Parameters
id
policy-id
allow-no-fast-forward
false
true
allow-rebase
false
true
allow-rebase-merge
false
true
allow-squash
false
true
blocking
false
true
branch
--repository-id
--branch main
branch-match-type
branch
exact
--branch
prefix
--branch
exact
prefix
exact
detect
false
true
enabled
false
true
org
az devops configure -d organization=<ORG_URL>
https://dev.azure.com/MyOrganizationName/
project
p
az devops configure -d project=<NAME_OR_ID>
repository-id
--repository-ID e556f204-53c9-4153-9cd9-ef41a11e3345
subscription
az account set -s <NAME_OR_ID>
use-squash-merge
false
true
Azure DevOps CLI commands aren't supported for Azure DevOps Server.

Build validation
You can set a policy requiring PR changes to build successfully before the PR can complete.
Build policies reduce breaks and keep your test results passing. Build policies help even if you're usingcontinuous integration(CI) on your development branches to catch problems early.
A build validation policy queues a new build when a new PR is created or changes are pushed to an existing PR that targets the branch. The build policy evaluates the build results to determine whether the PR can be completed.
Important
Before specifying a build validation policy, have a build pipeline. If you don't have a pipeline, seeCreate a build pipeline. Choose the type of build that matches your project type.
Browser
Azure DevOps CLI
To add a build validation policy
Select the+button next toBuild validation.
Select the+button next toBuild validation.

Fill out theSet build policyform:Select theBuild pipeline.Optionally set aPath filter.Learn more about path filtersin branch policies.UnderTrigger, selectAutomatic (whenever the source branch is updated)orManual.UnderPolicy requirement, selectRequiredorOptional. If you chooseRequired, builds must complete successfully to complete PRs. ChooseOptionalto provide a notification of the build failure but still allow PRs to complete.Set a build expiration to make sure updates to your protected branch don't break changes for open PRs.Immediately when <branch name> is updated: This option sets PR build policy status tofailedwhenever the branch is updated, and requeues a build. This setting ensures that the PR changes build successfully even if the protected branch changes.This option is best for teams whose important branches have few changes. Teams working in busy development branches might find it disruptive to wait for a build every time the branch updates.After <n> hours if <branch name> has been updated: This option expires the current policy status when the protected branch updates if the passing build is older than the threshold you enter. This option is a compromise between always or never requiring a build when the protected branch updates. This choice reduces the number of builds when your protected branch has frequent updates.Never: Updates to the protected branch don't change the policy status. This value reduces the number of builds, but can cause problems when completing PRs that weren't updated recently.Enter an optionalDisplay namefor this build policy. This name identifies the policy on theBranch policiespage. If you don't specify a display name, the policy uses the build pipeline name.
Fill out theSet build policyform:

Select theBuild pipeline.
Select theBuild pipeline.
Optionally set aPath filter.Learn more about path filtersin branch policies.
Optionally set aPath filter.Learn more about path filtersin branch policies.
UnderTrigger, selectAutomatic (whenever the source branch is updated)orManual.
UnderTrigger, selectAutomatic (whenever the source branch is updated)orManual.
UnderPolicy requirement, selectRequiredorOptional. If you chooseRequired, builds must complete successfully to complete PRs. ChooseOptionalto provide a notification of the build failure but still allow PRs to complete.
UnderPolicy requirement, selectRequiredorOptional. If you chooseRequired, builds must complete successfully to complete PRs. ChooseOptionalto provide a notification of the build failure but still allow PRs to complete.
Set a build expiration to make sure updates to your protected branch don't break changes for open PRs.Immediately when <branch name> is updated: This option sets PR build policy status tofailedwhenever the branch is updated, and requeues a build. This setting ensures that the PR changes build successfully even if the protected branch changes.This option is best for teams whose important branches have few changes. Teams working in busy development branches might find it disruptive to wait for a build every time the branch updates.After <n> hours if <branch name> has been updated: This option expires the current policy status when the protected branch updates if the passing build is older than the threshold you enter. This option is a compromise between always or never requiring a build when the protected branch updates. This choice reduces the number of builds when your protected branch has frequent updates.Never: Updates to the protected branch don't change the policy status. This value reduces the number of builds, but can cause problems when completing PRs that weren't updated recently.
Set a build expiration to make sure updates to your protected branch don't break changes for open PRs.
Immediately when <branch name> is updated: This option sets PR build policy status tofailedwhenever the branch is updated, and requeues a build. This setting ensures that the PR changes build successfully even if the protected branch changes.This option is best for teams whose important branches have few changes. Teams working in busy development branches might find it disruptive to wait for a build every time the branch updates.
Immediately when <branch name> is updated: This option sets PR build policy status tofailedwhenever the branch is updated, and requeues a build. This setting ensures that the PR changes build successfully even if the protected branch changes.
This option is best for teams whose important branches have few changes. Teams working in busy development branches might find it disruptive to wait for a build every time the branch updates.
After <n> hours if <branch name> has been updated: This option expires the current policy status when the protected branch updates if the passing build is older than the threshold you enter. This option is a compromise between always or never requiring a build when the protected branch updates. This choice reduces the number of builds when your protected branch has frequent updates.
After <n> hours if <branch name> has been updated: This option expires the current policy status when the protected branch updates if the passing build is older than the threshold you enter. This option is a compromise between always or never requiring a build when the protected branch updates. This choice reduces the number of builds when your protected branch has frequent updates.
Never: Updates to the protected branch don't change the policy status. This value reduces the number of builds, but can cause problems when completing PRs that weren't updated recently.
Never: Updates to the protected branch don't change the policy status. This value reduces the number of builds, but can cause problems when completing PRs that weren't updated recently.
Enter an optionalDisplay namefor this build policy. This name identifies the policy on theBranch policiespage. If you don't specify a display name, the policy uses the build pipeline name.
Enter an optionalDisplay namefor this build policy. This name identifies the policy on theBranch policiespage. If you don't specify a display name, the policy uses the build pipeline name.
SelectSave.
SelectSave.
When the PR owner pushes changes that build successfully, the policy status updates.
If you have anImmediately when <branch name> is updatedorAfter <n> hours if <branch name> has been updatedbuild policy, the policy status updates when the protected branch updates, if the previous build is no longer valid.
You can use Azure DevOps CLIaz repos policy buildto set and update build validation policy.
Create a build validation policy
Useaz repos policy build createto create a build validation policy.
az repos policy build create --blocking {false, true}
                             --branch
                             --build-definition-id
                             --display-name
                             --enabled {false, true}
                             --manual-queue-only {false, true}
                             --queue-on-source-update-only {false, true}
                             --repository-id
                             --valid-duration
                             [--branch-match-type {exact, prefix}]
                             [--detect {false, true}]
                             [--org]
                             [--path-filter]
                             [--project]
                             [--subscription]
az repos policy build create --blocking {false, true}
                             --branch
                             --build-definition-id
                             --display-name
                             --enabled {false, true}
                             --manual-queue-only {false, true}
                             --queue-on-source-update-only {false, true}
                             --repository-id
                             --valid-duration
                             [--branch-match-type {exact, prefix}]
                             [--detect {false, true}]
                             [--org]
                             [--path-filter]
                             [--project]
                             [--subscription]
Parameters
blocking
false
true
branch
--repository-id
--branch main
build-definition-id
display-name
Manual queue policy
enabled
false
true
manual-queue-only
false
true
queue-on-source-update-only
false
true
repository-id
--repository-ID e556f204-53c9-4153-9cd9-ef41a11e3345
valid-duration
valid-duration
--queue-on-source-update-only
false
branch-match-type
branch
exact
--branch
prefix
--branch
exact
prefix
exact
detect
false
true
org
az devops configure -d organization=<ORG_URL>
https://dev.azure.com/MyOrganizationName/
path-filter
;
/WebApp/Models/Data.cs
/WebApp/*
*.cs,
/WebApp/Models/Data.cs;ClientApp/Models/Data.cs
project
p
az devops configure -d project=<NAME_OR_ID>
subscription
az account set -s <NAME_OR_ID>
Example
The following example sets a required build policy for pull requests in themainbranch of the Fabrikam repository. The policy requires a successful build of build definition ID1, and allows only manual build queuing. This example uses the default configurationaz devops configure --defaults organization=https://dev.azure.com/fabrikamprime project="Fabrikam Fiber".
main
1
az devops configure --defaults organization=https://dev.azure.com/fabrikamprime project="Fabrikam Fiber"
az repos policy build create --blocking true --branch main --build-definition-id 1 --display-name build-policy --enabled true --manual-queue-only true --queue-on-source-update-only false --repository-id d28cd374-e7f0-4b1f-ad60-f349f155d47c --valid-duration 0 --output table

ID    Name          Is Blocking    Is Enabled    Repository Id                         Branch
----  ------------  -------------  ------------  ------------------------------------  ---------------
31    build-policy  True           True          d28cd374-e7f0-4b1f-ad60-f349f155d47c  refs/heads/main
az repos policy build create --blocking true --branch main --build-definition-id 1 --display-name build-policy --enabled true --manual-queue-only true --queue-on-source-update-only false --repository-id d28cd374-e7f0-4b1f-ad60-f349f155d47c --valid-duration 0 --output table

ID    Name          Is Blocking    Is Enabled    Repository Id                         Branch
----  ------------  -------------  ------------  ------------------------------------  ---------------
31    build-policy  True           True          d28cd374-e7f0-4b1f-ad60-f349f155d47c  refs/heads/main
Update a build validation policy
Useaz repos policy build updateto update a build validation policy.
az repos policy build update --id
                             [--blocking {false, true}]
                             [--branch]
                             [--branch-match-type {exact, prefix}]
                             [--build-definition-id]
                             [--detect {false, true}]
                             [--display-name]
                             [--enabled {false, true}]
                             [--manual-queue-only {false, true}]
                             [--org]
                             [--path-filter]
                             [--project]
                             [--queue-on-source-update-only {false, true}]
                             [--repository-id]
                             [--subscription]
                             [--valid-duration]
az repos policy build update --id
                             [--blocking {false, true}]
                             [--branch]
                             [--branch-match-type {exact, prefix}]
                             [--build-definition-id]
                             [--detect {false, true}]
                             [--display-name]
                             [--enabled {false, true}]
                             [--manual-queue-only {false, true}]
                             [--org]
                             [--path-filter]
                             [--project]
                             [--queue-on-source-update-only {false, true}]
                             [--repository-id]
                             [--subscription]
                             [--valid-duration]
Parameters
id
policy-id
blocking
false
true
branch
--repository-id
--branch main
branch-match-type
branch
exact
--branch
prefix
--branch
exact
prefix
exact
build-definition-id
detect
false
true
display-name
Manual queue policy
enabled
false
true
manual-queue-only
false
true
org
az devops configure -d organization=<ORG_URL>
https://dev.azure.com/MyOrganizationName/
path-filter
;
/WebApp/Models/Data.cs
/WebApp/*
*.cs,
/WebApp/Models/Data.cs;ClientApp/Models/Data.cs
project
p
az devops configure -d project=<NAME_OR_ID>
queue-on-source-update-only
false
true
repository-id
--repository-ID e556f204-53c9-4153-9cd9-ef41a11e3345
subscription
az account set -s <NAME_OR_ID>
valid-duration
Azure DevOps CLI commands aren't supported for Azure DevOps Server.

Status checks
External services can use the PRStatus APIto post detailed status to your PRs. The branch policy for additional services enables those external services to participate in the PR workflow and establish policy requirements.

For instructions on configuring this policy, seeConfigure a branch policy for an external service.

Automatically include code reviewers
You can automatically add reviewers to pull requests that change files in specific directories and files, or to all pull requests in a repo.
Browser
Azure DevOps CLI
Select the+button next toAutomatically included reviewers.
Select the+button next toAutomatically included reviewers.

Fill out theAdd new reviewer policyscreen.Add people and groups toReviewers.SelectOptionalif you want to add reviewers automatically, but not require their approval to complete the pull request.Or, selectRequiredif pull requests can't be completed until:Every individual added as a reviewer approves the changes.At least one person in every group added as a reviewer approves the changes.If only one group is required, the minimum number of members you specify approve the changes.Specify the files and folders that require the automatically included reviewers. Leave this field blank to require the reviewers for all pull requests in the branch.SelectAllow requestors to approve their own changesif pull request owners can vote to approve their own pull requests to satisfy this policy.You can specify anActivity feed messagethat appears in the pull request.
Fill out theAdd new reviewer policyscreen.

Add people and groups toReviewers.
Add people and groups toReviewers.
SelectOptionalif you want to add reviewers automatically, but not require their approval to complete the pull request.Or, selectRequiredif pull requests can't be completed until:Every individual added as a reviewer approves the changes.At least one person in every group added as a reviewer approves the changes.If only one group is required, the minimum number of members you specify approve the changes.
SelectOptionalif you want to add reviewers automatically, but not require their approval to complete the pull request.
Or, selectRequiredif pull requests can't be completed until:
Every individual added as a reviewer approves the changes.
At least one person in every group added as a reviewer approves the changes.
If only one group is required, the minimum number of members you specify approve the changes.
Specify the files and folders that require the automatically included reviewers. Leave this field blank to require the reviewers for all pull requests in the branch.
Specify the files and folders that require the automatically included reviewers. Leave this field blank to require the reviewers for all pull requests in the branch.
SelectAllow requestors to approve their own changesif pull request owners can vote to approve their own pull requests to satisfy this policy.
SelectAllow requestors to approve their own changesif pull request owners can vote to approve their own pull requests to satisfy this policy.
You can specify anActivity feed messagethat appears in the pull request.
You can specify anActivity feed messagethat appears in the pull request.
SelectSave.
SelectSave.
You can use Azure DevOps CLIaz repos policy required-reviewerto set and update required reviewer policy.
Create a required reviewer policy
Useaz repos policy required-reviewer createto create a required reviewer policy.
az repos policy required-reviewer create --blocking {false, true}
                                         --branch
                                         --enabled {false, true}
                                         --message
                                         --repository-id
                                         --required-reviewer-ids
                                         [--branch-match-type {exact, prefix}]
                                         [--detect {false, true}]
                                         [--org]
                                         [--path-filter]
                                         [--project]
                                         [--subscription]
az repos policy required-reviewer create --blocking {false, true}
                                         --branch
                                         --enabled {false, true}
                                         --message
                                         --repository-id
                                         --required-reviewer-ids
                                         [--branch-match-type {exact, prefix}]
                                         [--detect {false, true}]
                                         [--org]
                                         [--path-filter]
                                         [--project]
                                         [--subscription]
Parameters
blocking
false
true
branch
--repository-id
--branch main
enabled
false
true
message
repository-id
--repository-ID e556f204-53c9-4153-9cd9-ef41a11e3345
required-reviewer-ids
;
john@contoso.com;alice@contoso.com
branch-match-type
branch
exact
--branch
prefix
--branch
exact
prefix
exact
detect
false
true
org
az devops configure -d organization=<ORG_URL>
https://dev.azure.com/MyOrganizationName/
path-filter
;
/WebApp/Models/Data.cs
/WebApp/*
*.cs,
/WebApp/Models/Data.cs;ClientApp/Models/Data.cs
project
p
az devops configure -d project=<NAME_OR_ID>
subscription
az account set -s <NAME_OR_ID>
Example
The following example sets Jamal Hartnett as a required reviewer for pull requests in themainbranch of the Fabrikam repository. This example uses the default configurationaz devops configure --defaults organization=https://dev.azure.com/fabrikamprime project="Fabrikam Fiber".
main
az devops configure --defaults organization=https://dev.azure.com/fabrikamprime project="Fabrikam Fiber"
az repos policy required-reviewer create --blocking true --branch main --enabled true --message "Please review." --repository-id d28cd374-e7f0-4b1f-ad60-f349f155d47c --required-reviewer-ids fabrikamfiber4@hotmail.com --output table

ID    Name                Is Blocking    Is Enabled    Repository Id                         Branch
----  ------------------  -------------  ------------  ------------------------------------  ---------------
35    Required reviewers  True           True          d28cd374-e7f0-4b1f-ad60-f349f155d47c  refs/heads/main
az repos policy required-reviewer create --blocking true --branch main --enabled true --message "Please review." --repository-id d28cd374-e7f0-4b1f-ad60-f349f155d47c --required-reviewer-ids fabrikamfiber4@hotmail.com --output table

ID    Name                Is Blocking    Is Enabled    Repository Id                         Branch
----  ------------------  -------------  ------------  ------------------------------------  ---------------
35    Required reviewers  True           True          d28cd374-e7f0-4b1f-ad60-f349f155d47c  refs/heads/main
Update a required reviewer policy
Useaz repos policy required-reviewer updateto update a required reviewer policy.
az repos policy required-reviewer update --id
                                         [--blocking {false, true}]
                                         [--branch]
                                         [--branch-match-type {exact, prefix}]
                                         [--detect {false, true}]
                                         [--enabled {false, true}]
                                         [--message]
                                         [--org]
                                         [--path-filter]
                                         [--project]
                                         [--repository-id]
                                         [--required-reviewer-ids]
                                         [--subscription]
az repos policy required-reviewer update --id
                                         [--blocking {false, true}]
                                         [--branch]
                                         [--branch-match-type {exact, prefix}]
                                         [--detect {false, true}]
                                         [--enabled {false, true}]
                                         [--message]
                                         [--org]
                                         [--path-filter]
                                         [--project]
                                         [--repository-id]
                                         [--required-reviewer-ids]
                                         [--subscription]
Parameters
id
policy-id
blocking
false
true
branch
--repository-id
--branch main
branch-match-type
branch
exact
--branch
prefix
--branch
exact
prefix
exact
detect
false
true
enabled
false
true
message
org
az devops configure -d organization=<ORG_URL>
https://dev.azure.com/MyOrganizationName/
path-filter
;
/WebApp/Models/Data.cs
/WebApp/*
*.cs,
/WebApp/Models/Data.cs;ClientApp/Models/Data.cs
project
p
az devops configure -d project=<NAME_OR_ID>
repository-id
--repository-ID e556f204-53c9-4153-9cd9-ef41a11e3345
required-reviewer-ids
;
john@contoso.com;alice@contoso.com
subscription
az account set -s <NAME_OR_ID>
Azure DevOps CLI commands aren't supported for Azure DevOps Server.
Bypass branch policies
In some cases, you might need to bypass policy requirements. Bypass permissions let you push changes to a branch directly, or complete pull requests that don't satisfy branch policies. You can grant bypass permissions to a user or group. You can scope bypass permissions to an entire project, a repo, or a single branch.
Two permissions allow users to bypass branch policy in different ways:
Bypass policies when completing pull requestsapplies only to pull request completion. Users with this permission can complete pull requests even if the pull requests don't satisfy policies.
Bypass policies when completing pull requestsapplies only to pull request completion. Users with this permission can complete pull requests even if the pull requests don't satisfy policies.
Bypass policies when pushingapplies to pushes from local repositories and edits made on the web. Users with this permission can push changes directly to protected branches without meeting policy requirements.
Bypass policies when pushingapplies to pushes from local repositories and edits made on the web. Users with this permission can push changes directly to protected branches without meeting policy requirements.

For more information about managing these permissions, seeGit permissions.
Important
Use caution when granting the ability to bypass policies, especially at the repo and project levels. Policies are a cornerstone of secure and compliant source code management.
Path filters
Several branch policies offer path filters. If a path filter is set, the policy applies only to files that match the path filter. Leaving this field blank means that the policy applies to all files in the branch.
You can specify absolute paths (path must start either by/or a wildcard) and wildcards.
Examples:
/
/WebApp/Models/Data.cs
/WebApp/Models/Data.cs
/WebApp/*
/WebApp/*
*/Models/Data.cs
*/Models/Data.cs
*.cs
*.cs
You can specify multiple paths using;as a separator.
Example:
;
/WebApp/Models/Data.cs;/ClientApp/Models/Data.cs
/WebApp/Models/Data.cs;/ClientApp/Models/Data.cs
Paths prefixed with!are excluded if they would otherwise be included.
Example:
!
/WebApp/*;!/WebApp/Tests/*includes all files in/WebAppexcept files in/WebApp/Tests
/WebApp/*;!/WebApp/Tests/*
/WebApp
/WebApp/Tests
!/WebApp/Tests/*specifies no files, since nothing is included first
!/WebApp/Tests/*
The order of filters is significant. Filters are applied left-to-right.
Q & A
Can I push changes directly to branches that have branch policies?
What is autocomplete?
When are branch policy conditions checked?
Can I use XAML build definitions in branch policies?
What wildcard characters can I use for required code reviewers?
Are the required code reviewer paths case-sensitive?
How can I configure multiple users as required reviewers, but require only one of them to approve?
I have bypass policy permissions. Why do I still see policy failures in the pull request status?
Why can't I complete my own pull requests when "Allow requestors to approve their own changes" is set?
What happens when path in path filters doesn't start with/or with a wildcard?
/
You can't push changes directly to branches withrequiredbranch policies unless you have permissions tobypass branch policies. Changes to these branches can be made only throughpull requests. You can push changes directly to branches that haveoptionalbranch policies, if they have no required branch policies.
Pull requests into branches with branch policies configured have theSet auto-completebutton. Select this option toautomatically completethe pull request once it fulfills all policies. Autocomplete is useful when you don't expect any problems with your changes.

Branch policies reevaluate on the server when pull request owners push changes and when reviewers vote. If a policy triggers a build, the build status sets to waiting until the build completes.
No, you can't use XAML build definitions in branch policies.
Single asterisks*match any number of characters, including both forward-slashes/and back-slashes\. Question marks?match any single character.
*
/
\
?
Examples:
*.sqlmatches all files with the.sqlextension.
*.sql
/ConsoleApplication/*matches all files under the folder namedConsoleApplication.
/ConsoleApplication/*
/.gitattributesmatches the.gitattributes* file in the root of the repo.
/.gitattributes
*/.gitignorematches any.gitignorefile in the repo.
*/.gitignore
No, branch policies aren't case-sensitive.
You canadd the users to a group, and then add the group as a reviewer. Any member of the group can then approve to meet the policy requirement.
Configured policies are always evaluated for pull request changes. For users that have bypass policy permissions, the reported policy status is advisory only. If the user with bypass permissions approves, the failure status doesn't block pull request completion.
Both theRequire a minimum number of reviewerspolicy and theAutomatically included reviewerspolicy have options toAllow requestors to approve their own changes. In each policy, the setting applies only to that policy. The setting doesn't affect the other policy.
For example, your pull request has the following policies set:
Require a minimum number of reviewersrequires at least one reviewer.
Automatically included reviewersrequires you or a team you're in as a reviewer.
Automatically included reviewershasAllow requestors to approve their own changesenabled.
Require a minimum number of reviewersdoesn't haveAllow requestors to approve their own changesenabled.
In this case, your approval satisfiesAutomatically included reviewers, but notRequire a minimum number of reviewers, so you can't complete the pull request.
There might also be other policies, such asProhibit the most recent pusher from approving their own changes, that prevent you from approving your own changes even ifAllow requestors to approve their own changesis set.
/
The path in path filters that doesn't start with/or with a wildcard has no effect, and the path filter evaluates as if that path wasn't specified. Such a path can't match the/the absolute file path starts with.
/
/
Related articles
About branches and branch policies
Configure Git repository policies using a configuration file
Default Git permissions (Security)
Set permissions (Security)
Cross-service integration overview
Azure DevOps REST API: Policy
Feedback
Was this page helpful?
Additional resources