Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Custom Logs via AMA data connector - Configure data ingestion to Microsoft Sentinel from specific applications
Article
2024-08-25
2 contributors
In this article
Microsoft Sentinel'sCustom Logs via AMAdata connector supports the collection of logs from text files from several different network and security applications and devices.
This article supplies the configuration information, unique to each specific security application, that you need to supply when configuring this data connector. This information is provided by the application providers. Contact the provider for updates, for more information, or when information is unavailable for your security application. For the full instructions to install and configure the connector, seeCollect logs from text files with the Azure Monitor Agent and ingest to Microsoft Sentinel, but refer back to this article for the unique information to supply for each application.
This article also shows you how to ingest data from these applications to your Microsoft Sentinel workspace without using the connector. These steps include installation of the Azure Monitor Agent. After the connector is installed, use the instructions appropriate to your application, shown later in this article, to complete the setup.
The devices from which you collect custom text logs fall into two categories:
Applications installed on Windows or Linux machinesThe application stores its log files on the machine where it's installed. To collect these logs, the Azure Monitor Agent is installed on this same machine.
Applications installed on Windows or Linux machines
The application stores its log files on the machine where it's installed. To collect these logs, the Azure Monitor Agent is installed on this same machine.
Appliances that are self-contained on closed (usually Linux-based) devicesThese appliances store their logs on an external syslog server. To collect these logs, the Azure Monitor Agentis installed on this external syslog server, often called a log forwarder.
Appliances that are self-contained on closed (usually Linux-based) devices
These appliances store their logs on an external syslog server. To collect these logs, the Azure Monitor Agentis installed on this external syslog server, often called a log forwarder.
For more information about the related Microsoft Sentinel solution for each of these applications, search theAzure Marketplacefor theProduct Type>Solution Templatesor review the solution from theContent hubin Microsoft Sentinel.
Important
TheCustom Logs via AMAdata connector is currently in PREVIEW. See theSupplemental Terms of Use for Microsoft Azure Previewsfor additional legal terms that apply to Azure features that are in beta, preview, or otherwise not yet released into general availability.
TheCustom Logs via AMAdata connector is currently in PREVIEW. See theSupplemental Terms of Use for Microsoft Azure Previewsfor additional legal terms that apply to Azure features that are in beta, preview, or otherwise not yet released into general availability.
Microsoft Sentinel is generally available within Microsoft's unified security operations platform in the Microsoft Defender portal, including for customers without Microsoft Defender XDR or an E5 license. For more information, seeMicrosoft Sentinel in the Microsoft Defender portal.
Microsoft Sentinel is generally available within Microsoft's unified security operations platform in the Microsoft Defender portal, including for customers without Microsoft Defender XDR or an E5 license. For more information, seeMicrosoft Sentinel in the Microsoft Defender portal.
General instructions
The steps for collecting logs from machines hosting applications and appliances follow a general pattern:
Create the destination table in Log Analytics (or Advanced Hunting if you're in the Defender portal).
Create the destination table in Log Analytics (or Advanced Hunting if you're in the Defender portal).
Create the data collection rule (DCR) for your application or appliance.
Create the data collection rule (DCR) for your application or appliance.
Deploy the Azure Monitor Agent to the machine hosting the application, or to the external server (log forwarder) that collects logs from appliances if it's not already deployed.
Deploy the Azure Monitor Agent to the machine hosting the application, or to the external server (log forwarder) that collects logs from appliances if it's not already deployed.
Configure logging on your application. If an appliance, configure it to send its logs to the external server (log forwarder) where the Azure Monitor Agent is installed.
Configure logging on your application. If an appliance, configure it to send its logs to the external server (log forwarder) where the Azure Monitor Agent is installed.
These general steps (except for the last one) are automated when you use theCustom Logs via AMAdata connector, and are described in detail inCollect logs from text files with the Azure Monitor Agent and ingest to Microsoft Sentinel.
Specific instructions per application type
The per-application information you need to complete these steps is presented in the rest of this article. Some of these applications are on self-contained appliances and require a different type of configuration, starting with the use of a log forwarder.
Each application section contains the following information:
Unique parameters to supply to the configuration of theCustom Logs via AMAdata connector, if you're using it.
The outline of the procedure required to ingest data manually, without using the connector. For the details of this procedure, seeCollect logs from text files with the Azure Monitor Agent and ingest to Microsoft Sentinel.
Specific instructions for configuring the originating applications or devices themselves, and/or links to the instructions on the providers' web sites. These steps must be taken whether using the connector or not.
Apache HTTP Server
Follow these steps to ingest log messages from Apache HTTP Server:
Table name:ApacheHTTPServer_CL
Table name:ApacheHTTPServer_CL
ApacheHTTPServer_CL
Log storage location: Logs are stored as text files on the application's host machine. Install the AMA on the same machine to collect the files.Default file locations ("filePatterns"):Windows:"C:\Server\bin\log\Apache24\logs\*.log"Linux:"/var/log/httpd/*.log"
Log storage location: Logs are stored as text files on the application's host machine. Install the AMA on the same machine to collect the files.
Default file locations ("filePatterns"):
Windows:"C:\Server\bin\log\Apache24\logs\*.log"
"C:\Server\bin\log\Apache24\logs\*.log"
Linux:"/var/log/httpd/*.log"
"/var/log/httpd/*.log"
Create the DCR according to the directions inCollect logs from text files with the Azure Monitor Agent and ingest to Microsoft Sentinel.Replace the {TABLE_NAME} and {LOCAL_PATH_FILE} placeholders in theDCR templatewith the values in steps 1 and 2. Replace the other placeholders as directed.
Create the DCR according to the directions inCollect logs from text files with the Azure Monitor Agent and ingest to Microsoft Sentinel.
Replace the {TABLE_NAME} and {LOCAL_PATH_FILE} placeholders in theDCR templatewith the values in steps 1 and 2. Replace the other placeholders as directed.
Back to top
Apache Tomcat
Follow these steps to ingest log messages from Apache Tomcat:
Table name:Tomcat_CL
Table name:Tomcat_CL
Tomcat_CL
Log storage location: Logs are stored as text files on the application's host machine. Install the AMA on the same machine to collect the files.Default file locations ("filePatterns"):Linux:"/var/log/tomcat/*.log"
Log storage location: Logs are stored as text files on the application's host machine. Install the AMA on the same machine to collect the files.
Default file locations ("filePatterns"):
Linux:"/var/log/tomcat/*.log"
"/var/log/tomcat/*.log"
Create the DCR according to the directions inCollect logs from text files with the Azure Monitor Agent and ingest to Microsoft Sentinel.Replace the {TABLE_NAME} and {LOCAL_PATH_FILE} placeholders in theDCR templatewith the values in steps 1 and 2. Replace the other placeholders as directed.
Create the DCR according to the directions inCollect logs from text files with the Azure Monitor Agent and ingest to Microsoft Sentinel.
Replace the {TABLE_NAME} and {LOCAL_PATH_FILE} placeholders in theDCR templatewith the values in steps 1 and 2. Replace the other placeholders as directed.
Back to top
Cisco Meraki
Follow these steps to ingest log messages from Cisco Meraki:
Table name:meraki_CL
Table name:meraki_CL
meraki_CL
Log storage location: Create a log file on your external syslog server. Grant the syslog daemon write permissions to the file. Install the AMA on the external syslog server if it's not already installed. Enter this filename and path in theFile patternfield in the connector, or in place of the{LOCAL_PATH_FILE}placeholder in the DCR.
Log storage location: Create a log file on your external syslog server. Grant the syslog daemon write permissions to the file. Install the AMA on the external syslog server if it's not already installed. Enter this filename and path in theFile patternfield in the connector, or in place of the{LOCAL_PATH_FILE}placeholder in the DCR.
{LOCAL_PATH_FILE}
Configure the syslog daemon to export its Meraki log messages to a temporary text file so the AMA can collect them.rsyslogsyslog-ngCreate a custom configuration file for the rsyslog daemon and save it to/etc/rsyslog.d/10-meraki.conf. Add the following filtering conditions to this configuration file:if $rawmsg contains "flows" then {
    action(type="omfile" file="<LOG_FILE_Name>")
    stop
}
if $rawmsg contains "urls" then { 
    action(type="omfile" file="<LOG_FILE_Name>") 
    stop 
} 
if $rawmsg contains "ids-alerts" then { 
    action(type="omfile" file="<LOG_FILE_Name>") 
    stop 
} 
if $rawmsg contains "events" then { 
    action(type="omfile" file="<LOG_FILE_Name>") 
    stop 
} 
if $rawmsg contains "ip_flow_start" then { 
    action(type="omfile" file="<LOG_FILE_Name>") 
    stop 
} 
if $rawmsg contains "ip_flow_end" then { 
    action(type="omfile" file="<LOG_FILE_Name>") 
    stop 
}(Replace<LOG_FILE_Name>with the name of the log file you created.)To learn more about filtering conditions for rsyslog, seersyslog: Filter conditions. We recommend testing and modifying the configuration based on your specific installation.Restart rsyslog. The typical command syntax issystemctl restart rsyslog.Edit the config file/etc/syslog-ng/conf.d, adding the following conditions:filter f_meraki {
    message("flows") or message("urls") or message("ids-alerts") or message("events") or message("ip_flow_start") or message("ip_flow_end"); 
}; 

destination d_meraki { 
    file("<LOG_FILE_NAME>"); 
}; 

log { 
    source(s_src); 
    filter(f_meraki); 
    destination(d_meraki); 
    flags(final); #Ensures that once a message matches the filter and is written to the specified destination, it will not be processed by subsequent log statements 
};(Replace<LOG_FILE_NAME>with the name of the log file you created.)Restart syslog-ng. The typical command syntax issystemctl restart syslog-ng.
Configure the syslog daemon to export its Meraki log messages to a temporary text file so the AMA can collect them.
rsyslog
syslog-ng
Create a custom configuration file for the rsyslog daemon and save it to/etc/rsyslog.d/10-meraki.conf. Add the following filtering conditions to this configuration file:if $rawmsg contains "flows" then {
    action(type="omfile" file="<LOG_FILE_Name>")
    stop
}
if $rawmsg contains "urls" then { 
    action(type="omfile" file="<LOG_FILE_Name>") 
    stop 
} 
if $rawmsg contains "ids-alerts" then { 
    action(type="omfile" file="<LOG_FILE_Name>") 
    stop 
} 
if $rawmsg contains "events" then { 
    action(type="omfile" file="<LOG_FILE_Name>") 
    stop 
} 
if $rawmsg contains "ip_flow_start" then { 
    action(type="omfile" file="<LOG_FILE_Name>") 
    stop 
} 
if $rawmsg contains "ip_flow_end" then { 
    action(type="omfile" file="<LOG_FILE_Name>") 
    stop 
}(Replace<LOG_FILE_Name>with the name of the log file you created.)To learn more about filtering conditions for rsyslog, seersyslog: Filter conditions. We recommend testing and modifying the configuration based on your specific installation.
Create a custom configuration file for the rsyslog daemon and save it to/etc/rsyslog.d/10-meraki.conf. Add the following filtering conditions to this configuration file:
/etc/rsyslog.d/10-meraki.conf
if $rawmsg contains "flows" then {
    action(type="omfile" file="<LOG_FILE_Name>")
    stop
}
if $rawmsg contains "urls" then { 
    action(type="omfile" file="<LOG_FILE_Name>") 
    stop 
} 
if $rawmsg contains "ids-alerts" then { 
    action(type="omfile" file="<LOG_FILE_Name>") 
    stop 
} 
if $rawmsg contains "events" then { 
    action(type="omfile" file="<LOG_FILE_Name>") 
    stop 
} 
if $rawmsg contains "ip_flow_start" then { 
    action(type="omfile" file="<LOG_FILE_Name>") 
    stop 
} 
if $rawmsg contains "ip_flow_end" then { 
    action(type="omfile" file="<LOG_FILE_Name>") 
    stop 
}
if $rawmsg contains "flows" then {
    action(type="omfile" file="<LOG_FILE_Name>")
    stop
}
if $rawmsg contains "urls" then { 
    action(type="omfile" file="<LOG_FILE_Name>") 
    stop 
} 
if $rawmsg contains "ids-alerts" then { 
    action(type="omfile" file="<LOG_FILE_Name>") 
    stop 
} 
if $rawmsg contains "events" then { 
    action(type="omfile" file="<LOG_FILE_Name>") 
    stop 
} 
if $rawmsg contains "ip_flow_start" then { 
    action(type="omfile" file="<LOG_FILE_Name>") 
    stop 
} 
if $rawmsg contains "ip_flow_end" then { 
    action(type="omfile" file="<LOG_FILE_Name>") 
    stop 
}
(Replace<LOG_FILE_Name>with the name of the log file you created.)
<LOG_FILE_Name>
To learn more about filtering conditions for rsyslog, seersyslog: Filter conditions. We recommend testing and modifying the configuration based on your specific installation.
Restart rsyslog. The typical command syntax issystemctl restart rsyslog.
Restart rsyslog. The typical command syntax issystemctl restart rsyslog.
systemctl restart rsyslog
Edit the config file/etc/syslog-ng/conf.d, adding the following conditions:filter f_meraki {
    message("flows") or message("urls") or message("ids-alerts") or message("events") or message("ip_flow_start") or message("ip_flow_end"); 
}; 

destination d_meraki { 
    file("<LOG_FILE_NAME>"); 
}; 

log { 
    source(s_src); 
    filter(f_meraki); 
    destination(d_meraki); 
    flags(final); #Ensures that once a message matches the filter and is written to the specified destination, it will not be processed by subsequent log statements 
};(Replace<LOG_FILE_NAME>with the name of the log file you created.)
Edit the config file/etc/syslog-ng/conf.d, adding the following conditions:
/etc/syslog-ng/conf.d
filter f_meraki {
    message("flows") or message("urls") or message("ids-alerts") or message("events") or message("ip_flow_start") or message("ip_flow_end"); 
}; 

destination d_meraki { 
    file("<LOG_FILE_NAME>"); 
}; 

log { 
    source(s_src); 
    filter(f_meraki); 
    destination(d_meraki); 
    flags(final); #Ensures that once a message matches the filter and is written to the specified destination, it will not be processed by subsequent log statements 
};
filter f_meraki {
    message("flows") or message("urls") or message("ids-alerts") or message("events") or message("ip_flow_start") or message("ip_flow_end"); 
}; 

destination d_meraki { 
    file("<LOG_FILE_NAME>"); 
}; 

log { 
    source(s_src); 
    filter(f_meraki); 
    destination(d_meraki); 
    flags(final); #Ensures that once a message matches the filter and is written to the specified destination, it will not be processed by subsequent log statements 
};
(Replace<LOG_FILE_NAME>with the name of the log file you created.)
<LOG_FILE_NAME>
Restart syslog-ng. The typical command syntax issystemctl restart syslog-ng.
Restart syslog-ng. The typical command syntax issystemctl restart syslog-ng.
systemctl restart syslog-ng
Create the DCR according to the directions inCollect logs from text files with the Azure Monitor Agent and ingest to Microsoft Sentinel.Replace the column name"RawData"with the column name"Message".Replace the transformKql value"source"with the value"sourceâ¯| project-rename Message=RawData".Replace the{TABLE_NAME}and{LOCAL_PATH_FILE}placeholders in theDCR templatewith the values in steps 1 and 2. Replace the other placeholders as directed.
Create the DCR according to the directions inCollect logs from text files with the Azure Monitor Agent and ingest to Microsoft Sentinel.
Replace the column name"RawData"with the column name"Message".
Replace the column name"RawData"with the column name"Message".
"RawData"
"Message"
Replace the transformKql value"source"with the value"sourceâ¯| project-rename Message=RawData".
Replace the transformKql value"source"with the value"sourceâ¯| project-rename Message=RawData".
"source"
"sourceâ¯| project-rename Message=RawData"
Replace the{TABLE_NAME}and{LOCAL_PATH_FILE}placeholders in theDCR templatewith the values in steps 1 and 2. Replace the other placeholders as directed.
Replace the{TABLE_NAME}and{LOCAL_PATH_FILE}placeholders in theDCR templatewith the values in steps 1 and 2. Replace the other placeholders as directed.
{TABLE_NAME}
{LOCAL_PATH_FILE}
Configure the machine where the Azure Monitor Agent is installed to open the syslog ports, and configure the syslog daemon there to accept messages from external sources. For detailed instructions and a script to automate this configuration, seeConfigure the log forwarder to accept logs.
Configure the machine where the Azure Monitor Agent is installed to open the syslog ports, and configure the syslog daemon there to accept messages from external sources. For detailed instructions and a script to automate this configuration, seeConfigure the log forwarder to accept logs.
Configure and connect the Cisco Meraki device(s): follow theinstructionsâ¯providedâ¯by Ciscofor sending syslog messages. Use the IP address or hostname of the virtual machine where the Azure Monitor Agent is installed.
Configure and connect the Cisco Meraki device(s): follow theinstructionsâ¯providedâ¯by Ciscofor sending syslog messages. Use the IP address or hostname of the virtual machine where the Azure Monitor Agent is installed.
Back to top
JBoss Enterprise Application Platform
Follow these steps to ingest log messages from JBoss Enterprise Application Platform:
Table name:JBossLogs_CL
Table name:JBossLogs_CL
JBossLogs_CL
Log storage location: Logs are stored as text files on the application's host machine. Install the AMA on the same machine to collect the files.Default file locations ("filePatterns") - Linux only:Standalone server:"{EAP_HOME}/standalone/log/server.log"Managed domain:"{EAP_HOME}/domain/servers/{SERVER_NAME}/log/server.log"
Log storage location: Logs are stored as text files on the application's host machine. Install the AMA on the same machine to collect the files.
Default file locations ("filePatterns") - Linux only:
Standalone server:"{EAP_HOME}/standalone/log/server.log"
"{EAP_HOME}/standalone/log/server.log"
Managed domain:"{EAP_HOME}/domain/servers/{SERVER_NAME}/log/server.log"
"{EAP_HOME}/domain/servers/{SERVER_NAME}/log/server.log"
Create the DCR according to the directions inCollect logs from text files with the Azure Monitor Agent and ingest to Microsoft Sentinel.Replace the {TABLE_NAME} and {LOCAL_PATH_FILE} placeholders in theDCR templatewith the values in steps 1 and 2. Replace the other placeholders as directed.
Create the DCR according to the directions inCollect logs from text files with the Azure Monitor Agent and ingest to Microsoft Sentinel.
Replace the {TABLE_NAME} and {LOCAL_PATH_FILE} placeholders in theDCR templatewith the values in steps 1 and 2. Replace the other placeholders as directed.
Back to top
JuniperIDP
Follow these steps to ingest log messages from JuniperIDP:
Table name:JuniperIDP_CL
Table name:JuniperIDP_CL
JuniperIDP_CL
Log storage location: Create a log file on your external syslog server. Grant the syslog daemon write permissions to the file. Install the AMA on the external syslog server if it's not already installed. Enter this filename and path in theFile patternfield in the connector, or in place of the{LOCAL_PATH_FILE}placeholder in the DCR.
Log storage location: Create a log file on your external syslog server. Grant the syslog daemon write permissions to the file. Install the AMA on the external syslog server if it's not already installed. Enter this filename and path in theFile patternfield in the connector, or in place of the{LOCAL_PATH_FILE}placeholder in the DCR.
{LOCAL_PATH_FILE}
Configure the syslog daemon to export its JuniperIDP log messages to a temporary text file so the AMA can collect them.rsyslogsyslog-ngCreate custom configuration file for the rsyslog daemon, in the/etc/rsyslog.d/folder, with the following filtering conditions:# Define a new ruleset
ruleset(name="<RULESET_NAME>") { 
    action(type="omfile" file="<LOG_FILE_NAME>") 
} 

 # Set the input on port and bind it to the new ruleset 
input(type="imudp" port="<PORT>" ruleset="<RULESET_NAME>")(Replace<parameters>with the actual names of the objects represented. <LOG_FILE_NAME> is the file you created in step 2.)Restart rsyslog. The typical command syntax issystemctl restart rsyslog.Edit the config file/etc/syslog-ng/conf.d, adding the following conditions:source s_network {
    network ( 
        ip(â0.0.0.0â) 
        port(<PORT>) 
    ); 
}; 
destination d_file { 
    file(â<LOG_FILE_NAME>â); 
}; 
log { 
    source(s_network); 
    destination(d_file); 
};(Replace<LOG_FILE_NAME>with the name of the log file you created.)Restart syslog-ng. The typical command syntax issystemctl restart syslog-ng.
Configure the syslog daemon to export its JuniperIDP log messages to a temporary text file so the AMA can collect them.
rsyslog
syslog-ng
Create custom configuration file for the rsyslog daemon, in the/etc/rsyslog.d/folder, with the following filtering conditions:# Define a new ruleset
ruleset(name="<RULESET_NAME>") { 
    action(type="omfile" file="<LOG_FILE_NAME>") 
} 

 # Set the input on port and bind it to the new ruleset 
input(type="imudp" port="<PORT>" ruleset="<RULESET_NAME>")(Replace<parameters>with the actual names of the objects represented. <LOG_FILE_NAME> is the file you created in step 2.)
Create custom configuration file for the rsyslog daemon, in the/etc/rsyslog.d/folder, with the following filtering conditions:
/etc/rsyslog.d/
# Define a new ruleset
ruleset(name="<RULESET_NAME>") { 
    action(type="omfile" file="<LOG_FILE_NAME>") 
} 

 # Set the input on port and bind it to the new ruleset 
input(type="imudp" port="<PORT>" ruleset="<RULESET_NAME>")
# Define a new ruleset
ruleset(name="<RULESET_NAME>") { 
    action(type="omfile" file="<LOG_FILE_NAME>") 
} 

 # Set the input on port and bind it to the new ruleset 
input(type="imudp" port="<PORT>" ruleset="<RULESET_NAME>")
(Replace<parameters>with the actual names of the objects represented. <LOG_FILE_NAME> is the file you created in step 2.)
<parameters>
Restart rsyslog. The typical command syntax issystemctl restart rsyslog.
Restart rsyslog. The typical command syntax issystemctl restart rsyslog.
systemctl restart rsyslog
Edit the config file/etc/syslog-ng/conf.d, adding the following conditions:source s_network {
    network ( 
        ip(â0.0.0.0â) 
        port(<PORT>) 
    ); 
}; 
destination d_file { 
    file(â<LOG_FILE_NAME>â); 
}; 
log { 
    source(s_network); 
    destination(d_file); 
};(Replace<LOG_FILE_NAME>with the name of the log file you created.)
Edit the config file/etc/syslog-ng/conf.d, adding the following conditions:
/etc/syslog-ng/conf.d
source s_network {
    network ( 
        ip(â0.0.0.0â) 
        port(<PORT>) 
    ); 
}; 
destination d_file { 
    file(â<LOG_FILE_NAME>â); 
}; 
log { 
    source(s_network); 
    destination(d_file); 
};
source s_network {
    network ( 
        ip(â0.0.0.0â) 
        port(<PORT>) 
    ); 
}; 
destination d_file { 
    file(â<LOG_FILE_NAME>â); 
}; 
log { 
    source(s_network); 
    destination(d_file); 
};
(Replace<LOG_FILE_NAME>with the name of the log file you created.)
<LOG_FILE_NAME>
Restart syslog-ng. The typical command syntax issystemctl restart syslog-ng.
Restart syslog-ng. The typical command syntax issystemctl restart syslog-ng.
systemctl restart syslog-ng
Create the DCR according to the directions inCollect logs from text files with the Azure Monitor Agent and ingest to Microsoft Sentinel.Replace the column name"RawData"with the column name"Message".Replace the{TABLE_NAME}and{LOCAL_PATH_FILE}placeholders in theDCR templatewith the values in steps 1 and 2. Replace the other placeholders as directed.Replace the transformKql value"source"with the following Kusto query (enclosed in double quotes):source | parse RawData with tmp_time " " host_s " " ident_s " " tmp_pid " " msgid_s " " extradata | extend dvc_os_s = extract("\\[(junos\\S+)", 1, extradata) | extend event_end_time_s = extract(".*epoch-time=\"(\\S+)\"", 1, extradata) | extend message_type_s = extract(".*message-type=\"(\\S+)\"", 1, extradata) | extend source_address_s = extract(".*source-address=\"(\\S+)\"", 1, extradata) | extend destination_address_s = extract(".*destination-address=\"(\\S+)\"", 1, extradata) | extend destination_port_s = extract(".*destination-port=\"(\\S+)\"", 1, extradata) | extend protocol_name_s = extract(".*protocol-name=\"(\\S+)\"", 1, extradata) | extend service_name_s = extract(".*service-name=\"(\\S+)\"", 1, extradata) | extend application_name_s = extract(".*application-name=\"(\\S+)\"", 1, extradata) | extend rule_name_s = extract(".*rule-name=\"(\\S+)\"", 1, extradata) | extend rulebase_name_s = extract(".*rulebase-name=\"(\\S+)\"", 1, extradata) | extend policy_name_s = extract(".*policy-name=\"(\\S+)\"", 1, extradata) | extend export_id_s = extract(".*export-id=\"(\\S+)\"", 1, extradata) | extend repeat_count_s = extract(".*repeat-count=\"(\\S+)\"", 1, extradata) | extend action_s = extract(".*action=\"(\\S+)\"", 1, extradata) | extend threat_severity_s = extract(".*threat-severity=\"(\\S+)\"", 1, extradata) | extend attack_name_s = extract(".*attack-name=\"(\\S+)\"", 1, extradata) | extend nat_source_address_s = extract(".*nat-source-address=\"(\\S+)\"", 1, extradata) | extend nat_source_port_s = extract(".*nat-source-port=\"(\\S+)\"", 1, extradata) | extend nat_destination_address_s = extract(".*nat-destination-address=\"(\\S+)\"", 1, extradata) | extend nat_destination_port_s = extract(".*nat-destination-port=\"(\\S+)\"", 1, extradata) | extend elapsed_time_s = extract(".*elapsed-time=\"(\\S+)\"", 1, extradata) | extend inbound_bytes_s = extract(".*inbound-bytes=\"(\\S+)\"", 1, extradata) | extend outbound_bytes_s = extract(".*outbound-bytes=\"(\\S+)\"", 1, extradata) | extend inbound_packets_s = extract(".*inbound-packets=\"(\\S+)\"", 1, extradata) | extend outbound_packets_s = extract(".*outbound-packets=\"(\\S+)\"", 1, extradata) | extend source_zone_name_s = extract(".*source-zone-name=\"(\\S+)\"", 1, extradata) | extend source_interface_name_s = extract(".*source-interface-name=\"(\\S+)\"", 1, extradata) | extend destination_zone_name_s = extract(".*destination-zone-name=\"(\\S+)\"", 1, extradata) | extend destination_interface_name_s = extract(".*destination-interface-name=\"(\\S+)\"", 1, extradata) | extend packet_log_id_s = extract(".*packet-log-id=\"(\\S+)\"", 1, extradata) | extend alert_s = extract(".*alert=\"(\\S+)\"", 1, extradata) | extend username_s = extract(".*username=\"(\\S+)\"", 1, extradata) | extend roles_s = extract(".*roles=\"(\\S+)\"", 1, extradata) | extend msg_s = extract(".*message=\"(\\S+)\"", 1, extradata) | project-away RawDataThe following screenshot shows the complete query in the preceding example in a more readable format:See more information on the following items used in the preceding examples, in the Kusto documentation:parseoperatorextendoperatorextractfunctionproject-awayoperatorFor more information on KQL, seeKusto Query Language (KQL) overview.Other resources:KQL quick referenceKusto Query Language learning resources
Create the DCR according to the directions inCollect logs from text files with the Azure Monitor Agent and ingest to Microsoft Sentinel.
Replace the column name"RawData"with the column name"Message".
Replace the column name"RawData"with the column name"Message".
"RawData"
"Message"
Replace the{TABLE_NAME}and{LOCAL_PATH_FILE}placeholders in theDCR templatewith the values in steps 1 and 2. Replace the other placeholders as directed.
Replace the{TABLE_NAME}and{LOCAL_PATH_FILE}placeholders in theDCR templatewith the values in steps 1 and 2. Replace the other placeholders as directed.
{TABLE_NAME}
{LOCAL_PATH_FILE}
Replace the transformKql value"source"with the following Kusto query (enclosed in double quotes):source | parse RawData with tmp_time " " host_s " " ident_s " " tmp_pid " " msgid_s " " extradata | extend dvc_os_s = extract("\\[(junos\\S+)", 1, extradata) | extend event_end_time_s = extract(".*epoch-time=\"(\\S+)\"", 1, extradata) | extend message_type_s = extract(".*message-type=\"(\\S+)\"", 1, extradata) | extend source_address_s = extract(".*source-address=\"(\\S+)\"", 1, extradata) | extend destination_address_s = extract(".*destination-address=\"(\\S+)\"", 1, extradata) | extend destination_port_s = extract(".*destination-port=\"(\\S+)\"", 1, extradata) | extend protocol_name_s = extract(".*protocol-name=\"(\\S+)\"", 1, extradata) | extend service_name_s = extract(".*service-name=\"(\\S+)\"", 1, extradata) | extend application_name_s = extract(".*application-name=\"(\\S+)\"", 1, extradata) | extend rule_name_s = extract(".*rule-name=\"(\\S+)\"", 1, extradata) | extend rulebase_name_s = extract(".*rulebase-name=\"(\\S+)\"", 1, extradata) | extend policy_name_s = extract(".*policy-name=\"(\\S+)\"", 1, extradata) | extend export_id_s = extract(".*export-id=\"(\\S+)\"", 1, extradata) | extend repeat_count_s = extract(".*repeat-count=\"(\\S+)\"", 1, extradata) | extend action_s = extract(".*action=\"(\\S+)\"", 1, extradata) | extend threat_severity_s = extract(".*threat-severity=\"(\\S+)\"", 1, extradata) | extend attack_name_s = extract(".*attack-name=\"(\\S+)\"", 1, extradata) | extend nat_source_address_s = extract(".*nat-source-address=\"(\\S+)\"", 1, extradata) | extend nat_source_port_s = extract(".*nat-source-port=\"(\\S+)\"", 1, extradata) | extend nat_destination_address_s = extract(".*nat-destination-address=\"(\\S+)\"", 1, extradata) | extend nat_destination_port_s = extract(".*nat-destination-port=\"(\\S+)\"", 1, extradata) | extend elapsed_time_s = extract(".*elapsed-time=\"(\\S+)\"", 1, extradata) | extend inbound_bytes_s = extract(".*inbound-bytes=\"(\\S+)\"", 1, extradata) | extend outbound_bytes_s = extract(".*outbound-bytes=\"(\\S+)\"", 1, extradata) | extend inbound_packets_s = extract(".*inbound-packets=\"(\\S+)\"", 1, extradata) | extend outbound_packets_s = extract(".*outbound-packets=\"(\\S+)\"", 1, extradata) | extend source_zone_name_s = extract(".*source-zone-name=\"(\\S+)\"", 1, extradata) | extend source_interface_name_s = extract(".*source-interface-name=\"(\\S+)\"", 1, extradata) | extend destination_zone_name_s = extract(".*destination-zone-name=\"(\\S+)\"", 1, extradata) | extend destination_interface_name_s = extract(".*destination-interface-name=\"(\\S+)\"", 1, extradata) | extend packet_log_id_s = extract(".*packet-log-id=\"(\\S+)\"", 1, extradata) | extend alert_s = extract(".*alert=\"(\\S+)\"", 1, extradata) | extend username_s = extract(".*username=\"(\\S+)\"", 1, extradata) | extend roles_s = extract(".*roles=\"(\\S+)\"", 1, extradata) | extend msg_s = extract(".*message=\"(\\S+)\"", 1, extradata) | project-away RawDataThe following screenshot shows the complete query in the preceding example in a more readable format:See more information on the following items used in the preceding examples, in the Kusto documentation:parseoperatorextendoperatorextractfunctionproject-awayoperatorFor more information on KQL, seeKusto Query Language (KQL) overview.Other resources:KQL quick referenceKusto Query Language learning resources
Replace the transformKql value"source"with the following Kusto query (enclosed in double quotes):
"source"
source | parse RawData with tmp_time " " host_s " " ident_s " " tmp_pid " " msgid_s " " extradata | extend dvc_os_s = extract("\\[(junos\\S+)", 1, extradata) | extend event_end_time_s = extract(".*epoch-time=\"(\\S+)\"", 1, extradata) | extend message_type_s = extract(".*message-type=\"(\\S+)\"", 1, extradata) | extend source_address_s = extract(".*source-address=\"(\\S+)\"", 1, extradata) | extend destination_address_s = extract(".*destination-address=\"(\\S+)\"", 1, extradata) | extend destination_port_s = extract(".*destination-port=\"(\\S+)\"", 1, extradata) | extend protocol_name_s = extract(".*protocol-name=\"(\\S+)\"", 1, extradata) | extend service_name_s = extract(".*service-name=\"(\\S+)\"", 1, extradata) | extend application_name_s = extract(".*application-name=\"(\\S+)\"", 1, extradata) | extend rule_name_s = extract(".*rule-name=\"(\\S+)\"", 1, extradata) | extend rulebase_name_s = extract(".*rulebase-name=\"(\\S+)\"", 1, extradata) | extend policy_name_s = extract(".*policy-name=\"(\\S+)\"", 1, extradata) | extend export_id_s = extract(".*export-id=\"(\\S+)\"", 1, extradata) | extend repeat_count_s = extract(".*repeat-count=\"(\\S+)\"", 1, extradata) | extend action_s = extract(".*action=\"(\\S+)\"", 1, extradata) | extend threat_severity_s = extract(".*threat-severity=\"(\\S+)\"", 1, extradata) | extend attack_name_s = extract(".*attack-name=\"(\\S+)\"", 1, extradata) | extend nat_source_address_s = extract(".*nat-source-address=\"(\\S+)\"", 1, extradata) | extend nat_source_port_s = extract(".*nat-source-port=\"(\\S+)\"", 1, extradata) | extend nat_destination_address_s = extract(".*nat-destination-address=\"(\\S+)\"", 1, extradata) | extend nat_destination_port_s = extract(".*nat-destination-port=\"(\\S+)\"", 1, extradata) | extend elapsed_time_s = extract(".*elapsed-time=\"(\\S+)\"", 1, extradata) | extend inbound_bytes_s = extract(".*inbound-bytes=\"(\\S+)\"", 1, extradata) | extend outbound_bytes_s = extract(".*outbound-bytes=\"(\\S+)\"", 1, extradata) | extend inbound_packets_s = extract(".*inbound-packets=\"(\\S+)\"", 1, extradata) | extend outbound_packets_s = extract(".*outbound-packets=\"(\\S+)\"", 1, extradata) | extend source_zone_name_s = extract(".*source-zone-name=\"(\\S+)\"", 1, extradata) | extend source_interface_name_s = extract(".*source-interface-name=\"(\\S+)\"", 1, extradata) | extend destination_zone_name_s = extract(".*destination-zone-name=\"(\\S+)\"", 1, extradata) | extend destination_interface_name_s = extract(".*destination-interface-name=\"(\\S+)\"", 1, extradata) | extend packet_log_id_s = extract(".*packet-log-id=\"(\\S+)\"", 1, extradata) | extend alert_s = extract(".*alert=\"(\\S+)\"", 1, extradata) | extend username_s = extract(".*username=\"(\\S+)\"", 1, extradata) | extend roles_s = extract(".*roles=\"(\\S+)\"", 1, extradata) | extend msg_s = extract(".*message=\"(\\S+)\"", 1, extradata) | project-away RawData
source | parse RawData with tmp_time " " host_s " " ident_s " " tmp_pid " " msgid_s " " extradata | extend dvc_os_s = extract("\\[(junos\\S+)", 1, extradata) | extend event_end_time_s = extract(".*epoch-time=\"(\\S+)\"", 1, extradata) | extend message_type_s = extract(".*message-type=\"(\\S+)\"", 1, extradata) | extend source_address_s = extract(".*source-address=\"(\\S+)\"", 1, extradata) | extend destination_address_s = extract(".*destination-address=\"(\\S+)\"", 1, extradata) | extend destination_port_s = extract(".*destination-port=\"(\\S+)\"", 1, extradata) | extend protocol_name_s = extract(".*protocol-name=\"(\\S+)\"", 1, extradata) | extend service_name_s = extract(".*service-name=\"(\\S+)\"", 1, extradata) | extend application_name_s = extract(".*application-name=\"(\\S+)\"", 1, extradata) | extend rule_name_s = extract(".*rule-name=\"(\\S+)\"", 1, extradata) | extend rulebase_name_s = extract(".*rulebase-name=\"(\\S+)\"", 1, extradata) | extend policy_name_s = extract(".*policy-name=\"(\\S+)\"", 1, extradata) | extend export_id_s = extract(".*export-id=\"(\\S+)\"", 1, extradata) | extend repeat_count_s = extract(".*repeat-count=\"(\\S+)\"", 1, extradata) | extend action_s = extract(".*action=\"(\\S+)\"", 1, extradata) | extend threat_severity_s = extract(".*threat-severity=\"(\\S+)\"", 1, extradata) | extend attack_name_s = extract(".*attack-name=\"(\\S+)\"", 1, extradata) | extend nat_source_address_s = extract(".*nat-source-address=\"(\\S+)\"", 1, extradata) | extend nat_source_port_s = extract(".*nat-source-port=\"(\\S+)\"", 1, extradata) | extend nat_destination_address_s = extract(".*nat-destination-address=\"(\\S+)\"", 1, extradata) | extend nat_destination_port_s = extract(".*nat-destination-port=\"(\\S+)\"", 1, extradata) | extend elapsed_time_s = extract(".*elapsed-time=\"(\\S+)\"", 1, extradata) | extend inbound_bytes_s = extract(".*inbound-bytes=\"(\\S+)\"", 1, extradata) | extend outbound_bytes_s = extract(".*outbound-bytes=\"(\\S+)\"", 1, extradata) | extend inbound_packets_s = extract(".*inbound-packets=\"(\\S+)\"", 1, extradata) | extend outbound_packets_s = extract(".*outbound-packets=\"(\\S+)\"", 1, extradata) | extend source_zone_name_s = extract(".*source-zone-name=\"(\\S+)\"", 1, extradata) | extend source_interface_name_s = extract(".*source-interface-name=\"(\\S+)\"", 1, extradata) | extend destination_zone_name_s = extract(".*destination-zone-name=\"(\\S+)\"", 1, extradata) | extend destination_interface_name_s = extract(".*destination-interface-name=\"(\\S+)\"", 1, extradata) | extend packet_log_id_s = extract(".*packet-log-id=\"(\\S+)\"", 1, extradata) | extend alert_s = extract(".*alert=\"(\\S+)\"", 1, extradata) | extend username_s = extract(".*username=\"(\\S+)\"", 1, extradata) | extend roles_s = extract(".*roles=\"(\\S+)\"", 1, extradata) | extend msg_s = extract(".*message=\"(\\S+)\"", 1, extradata) | project-away RawData
The following screenshot shows the complete query in the preceding example in a more readable format:

See more information on the following items used in the preceding examples, in the Kusto documentation:
parseoperator
extendoperator
extractfunction
project-awayoperator
For more information on KQL, seeKusto Query Language (KQL) overview.
Other resources:
KQL quick reference
Kusto Query Language learning resources
Configure the machine where the Azure Monitor Agent is installed to open the syslog ports, and configure the syslog daemon there to accept messages from external sources. For detailed instructions and a script to automate this configuration, seeConfigure the log forwarder to accept logs.
Configure the machine where the Azure Monitor Agent is installed to open the syslog ports, and configure the syslog daemon there to accept messages from external sources. For detailed instructions and a script to automate this configuration, seeConfigure the log forwarder to accept logs.
For the instructions to configure the Juniper IDP appliance to send syslog messages to an external server, seeSRX Getting Started - Configure System Logging..
For the instructions to configure the Juniper IDP appliance to send syslog messages to an external server, seeSRX Getting Started - Configure System Logging..
Back to top
MarkLogic Audit
Follow these steps to ingest log messages from MarkLogic Audit:
Table name:MarkLogicAudit_CL
Table name:MarkLogicAudit_CL
MarkLogicAudit_CL
Log storage location: Logs are stored as text files on the application's host machine. Install the AMA on the same machine to collect the files.Default file locations ("filePatterns"):Windows:"C:\Program Files\MarkLogic\Data\Logs\AuditLog.txt"Linux:"/var/opt/MarkLogic/Logs/AuditLog.txt"
Log storage location: Logs are stored as text files on the application's host machine. Install the AMA on the same machine to collect the files.
Default file locations ("filePatterns"):
Windows:"C:\Program Files\MarkLogic\Data\Logs\AuditLog.txt"
"C:\Program Files\MarkLogic\Data\Logs\AuditLog.txt"
Linux:"/var/opt/MarkLogic/Logs/AuditLog.txt"
"/var/opt/MarkLogic/Logs/AuditLog.txt"
Create the DCR according to the directions inCollect logs from text files with the Azure Monitor Agent and ingest to Microsoft Sentinel.Replace the {TABLE_NAME} and {LOCAL_PATH_FILE} placeholders in theDCR templatewith the values in steps 1 and 2. Replace the other placeholders as directed.
Create the DCR according to the directions inCollect logs from text files with the Azure Monitor Agent and ingest to Microsoft Sentinel.
Replace the {TABLE_NAME} and {LOCAL_PATH_FILE} placeholders in theDCR templatewith the values in steps 1 and 2. Replace the other placeholders as directed.
Configure MarkLogic Audit to enable it to write logs: (from MarkLogic documentation)Using your browser, navigate to MarkLogic Admin interface.Open the Audit Configuration screen under Groups > group_name > Auditing.Mark the Audit Enabled radio button. Make sure it is enabled.Configure audit event and/or restrictions desired.Validate by selecting OK.Refer to MarkLogic documentation formore details and configuration options.
Configure MarkLogic Audit to enable it to write logs: (from MarkLogic documentation)
Using your browser, navigate to MarkLogic Admin interface.
Open the Audit Configuration screen under Groups > group_name > Auditing.
Mark the Audit Enabled radio button. Make sure it is enabled.
Configure audit event and/or restrictions desired.
Validate by selecting OK.
Refer to MarkLogic documentation formore details and configuration options.
Back to top
MongoDB Audit
Follow these steps to ingest log messages from MongoDB Audit:
Table name:MongoDBAudit_CL
Table name:MongoDBAudit_CL
MongoDBAudit_CL
Log storage location: Logs are stored as text files on the application's host machine. Install the AMA on the same machine to collect the files.Default file locations ("filePatterns"):Windows:"C:\data\db\auditlog.json"Linux:"/data/db/auditlog.json"
Log storage location: Logs are stored as text files on the application's host machine. Install the AMA on the same machine to collect the files.
Default file locations ("filePatterns"):
Windows:"C:\data\db\auditlog.json"
"C:\data\db\auditlog.json"
Linux:"/data/db/auditlog.json"
"/data/db/auditlog.json"
Create the DCR according to the directions inCollect logs from text files with the Azure Monitor Agent and ingest to Microsoft Sentinel.Replace the {TABLE_NAME} and {LOCAL_PATH_FILE} placeholders in theDCR templatewith the values in steps 1 and 2. Replace the other placeholders as directed.
Create the DCR according to the directions inCollect logs from text files with the Azure Monitor Agent and ingest to Microsoft Sentinel.
Replace the {TABLE_NAME} and {LOCAL_PATH_FILE} placeholders in theDCR templatewith the values in steps 1 and 2. Replace the other placeholders as directed.
Configure MongoDB to write logs:For Windows, edit the configuration filemongod.cfg. For Linux,mongod.conf.Set thedbpathparameter todata/db.Set thepathparameter to/data/db/auditlog.json.Refer to MongoDB documentation formore parameters and details.
Configure MongoDB to write logs:
For Windows, edit the configuration filemongod.cfg. For Linux,mongod.conf.
mongod.cfg
mongod.conf
Set thedbpathparameter todata/db.
dbpath
data/db
Set thepathparameter to/data/db/auditlog.json.
path
/data/db/auditlog.json
Refer to MongoDB documentation formore parameters and details.
Back to top
NGINX HTTP Server
Follow these steps to ingest log messages from NGINX HTTP Server:
Table name:NGINX_CL
Table name:NGINX_CL
NGINX_CL
Log storage location: Logs are stored as text files on the application's host machine. Install the AMA on the same machine to collect the files.Default file locations ("filePatterns"):Linux:"/var/log/nginx.log"
Log storage location: Logs are stored as text files on the application's host machine. Install the AMA on the same machine to collect the files.
Default file locations ("filePatterns"):
Linux:"/var/log/nginx.log"
"/var/log/nginx.log"
Create the DCR according to the directions inCollect logs from text files with the Azure Monitor Agent and ingest to Microsoft Sentinel.Replace the {TABLE_NAME} and {LOCAL_PATH_FILE} placeholders in theDCR templatewith the values in steps 1 and 2. Replace the other placeholders as directed.
Create the DCR according to the directions inCollect logs from text files with the Azure Monitor Agent and ingest to Microsoft Sentinel.
Replace the {TABLE_NAME} and {LOCAL_PATH_FILE} placeholders in theDCR templatewith the values in steps 1 and 2. Replace the other placeholders as directed.
Back to top
Oracle WebLogic Server
Follow these steps to ingest log messages from Oracle WebLogic Server:
Table name:OracleWebLogicServer_CL
Table name:OracleWebLogicServer_CL
OracleWebLogicServer_CL
Log storage location: Logs are stored as text files on the application's host machine. Install the AMA on the same machine to collect the files.Default file locations ("filePatterns"):Windows:"{DOMAIN_NAME}\Servers\{SERVER_NAME}\logs*.log"Linux:"{DOMAIN_HOME}/servers/{SERVER_NAME}/logs/*.log"
Log storage location: Logs are stored as text files on the application's host machine. Install the AMA on the same machine to collect the files.
Default file locations ("filePatterns"):
Windows:"{DOMAIN_NAME}\Servers\{SERVER_NAME}\logs*.log"
"{DOMAIN_NAME}\Servers\{SERVER_NAME}\logs*.log"
Linux:"{DOMAIN_HOME}/servers/{SERVER_NAME}/logs/*.log"
"{DOMAIN_HOME}/servers/{SERVER_NAME}/logs/*.log"
Create the DCR according to the directions inCollect logs from text files with the Azure Monitor Agent and ingest to Microsoft Sentinel.Replace the {TABLE_NAME} and {LOCAL_PATH_FILE} placeholders in theDCR templatewith the values in steps 1 and 2. Replace the other placeholders as directed.
Create the DCR according to the directions inCollect logs from text files with the Azure Monitor Agent and ingest to Microsoft Sentinel.
Replace the {TABLE_NAME} and {LOCAL_PATH_FILE} placeholders in theDCR templatewith the values in steps 1 and 2. Replace the other placeholders as directed.
Back to top
PostgreSQL Events
Follow these steps to ingest log messages from PostgreSQL Events:
Table name:PostgreSQL_CL
Table name:PostgreSQL_CL
PostgreSQL_CL
Log storage location: Logs are stored as text files on the application's host machine. Install the AMA on the same machine to collect the files.Default file locations ("filePatterns"):Windows:"C:\*.log"Linux:"/var/log/*.log"
Log storage location: Logs are stored as text files on the application's host machine. Install the AMA on the same machine to collect the files.
Default file locations ("filePatterns"):
Windows:"C:\*.log"
"C:\*.log"
Linux:"/var/log/*.log"
"/var/log/*.log"
Create the DCR according to the directions inCollect logs from text files with the Azure Monitor Agent and ingest to Microsoft Sentinel.Replace the {TABLE_NAME} and {LOCAL_PATH_FILE} placeholders in theDCR templatewith the values in steps 1 and 2. Replace the other placeholders as directed.
Create the DCR according to the directions inCollect logs from text files with the Azure Monitor Agent and ingest to Microsoft Sentinel.
Replace the {TABLE_NAME} and {LOCAL_PATH_FILE} placeholders in theDCR templatewith the values in steps 1 and 2. Replace the other placeholders as directed.
Edit the PostgreSQL Events configuration filepostgresql.confto output logs to files.Setlog_destination='stderr'Setlogging_collector=onRefer to PostgreSQL documentation formore parameters and details.
Edit the PostgreSQL Events configuration filepostgresql.confto output logs to files.
postgresql.conf
Setlog_destination='stderr'
log_destination='stderr'
Setlogging_collector=on
logging_collector=on
Refer to PostgreSQL documentation formore parameters and details.
Back to top
SecurityBridge Threat Detection for SAP
Follow these steps to ingest log messages from SecurityBridge Threat Detection for SAP:
Table name:SecurityBridgeLogs_CL
Table name:SecurityBridgeLogs_CL
SecurityBridgeLogs_CL
Log storage location: Logs are stored as text files on the application's host machine. Install the AMA on the same machine to collect the files.Default file locations ("filePatterns"):Linux:"/usr/sap/tmp/sb_events/*.cef"
Log storage location: Logs are stored as text files on the application's host machine. Install the AMA on the same machine to collect the files.
Default file locations ("filePatterns"):
Linux:"/usr/sap/tmp/sb_events/*.cef"
"/usr/sap/tmp/sb_events/*.cef"
Create the DCR according to the directions inCollect logs from text files with the Azure Monitor Agent and ingest to Microsoft Sentinel.Replace the {TABLE_NAME} and {LOCAL_PATH_FILE} placeholders in theDCR templatewith the values in steps 1 and 2. Replace the other placeholders as directed.
Create the DCR according to the directions inCollect logs from text files with the Azure Monitor Agent and ingest to Microsoft Sentinel.
Replace the {TABLE_NAME} and {LOCAL_PATH_FILE} placeholders in theDCR templatewith the values in steps 1 and 2. Replace the other placeholders as directed.
Back to top
SquidProxy
Follow these steps to ingest log messages from SquidProxy:
Table name:SquidProxy_CL
Table name:SquidProxy_CL
SquidProxy_CL
Log storage location: Logs are stored as text files on the application's host machine. Install the AMA on the same machine to collect the files.Default file locations ("filePatterns"):Windows:"C:\Squid\var\log\squid\*.log"Linux:"/var/log/squid/*.log"
Log storage location: Logs are stored as text files on the application's host machine. Install the AMA on the same machine to collect the files.
Default file locations ("filePatterns"):
Windows:"C:\Squid\var\log\squid\*.log"
"C:\Squid\var\log\squid\*.log"
Linux:"/var/log/squid/*.log"
"/var/log/squid/*.log"
Create the DCR according to the directions inCollect logs from text files with the Azure Monitor Agent and ingest to Microsoft Sentinel.Replace the {TABLE_NAME} and {LOCAL_PATH_FILE} placeholders in theDCR templatewith the values in steps 1 and 2. Replace the other placeholders as directed.
Create the DCR according to the directions inCollect logs from text files with the Azure Monitor Agent and ingest to Microsoft Sentinel.
Replace the {TABLE_NAME} and {LOCAL_PATH_FILE} placeholders in theDCR templatewith the values in steps 1 and 2. Replace the other placeholders as directed.
Back to top
Ubiquiti UniFi
Follow these steps to ingest log messages from Ubiquiti UniFi:
Table name:Ubiquiti_CL
Table name:Ubiquiti_CL
Ubiquiti_CL
Log storage location: Create a log file on your external syslog server. Grant the syslog daemon write permissions to the file. Install the AMA on the external syslog server if it's not already installed. Enter this filename and path in theFile patternfield in the connector, or in place of the{LOCAL_PATH_FILE}placeholder in the DCR.
Log storage location: Create a log file on your external syslog server. Grant the syslog daemon write permissions to the file. Install the AMA on the external syslog server if it's not already installed. Enter this filename and path in theFile patternfield in the connector, or in place of the{LOCAL_PATH_FILE}placeholder in the DCR.
{LOCAL_PATH_FILE}
Configure the syslog daemon to export its Ubiquiti log messages to a temporary text file so the AMA can collect them.rsyslogsyslog-ngCreate custom configuration file for the rsyslog daemon, in the/etc/rsyslog.d/folder, with the following filtering conditions:# Define a new ruleset
ruleset(name="<RULESET_NAME>") { 
    action(type="omfile" file="<LOG_FILE_NAME>") 
} 

 # Set the input on port and bind it to the new ruleset 
input(type="imudp" port="<PORT>" ruleset="<RULESET_NAME>")(Replace<parameters>with the actual names of the objects represented. <LOG_FILE_NAME> is the file you created in step 2.)Restart rsyslog. The typical command syntax issystemctl restart rsyslog.Edit the config file/etc/syslog-ng/conf.d, adding the following conditions:source s_network {
    network ( 
        ip(â0.0.0.0â) 
        port(<PORT>) 
    ); 
}; 
destination d_file { 
    file(â<LOG_FILE_NAME>â); 
}; 
log { 
    source(s_network); 
    destination(d_file); 
};(Replace<LOG_FILE_NAME>with the name of the log file you created.)Restart syslog-ng. The typical command syntax issystemctl restart syslog-ng.
Configure the syslog daemon to export its Ubiquiti log messages to a temporary text file so the AMA can collect them.
rsyslog
syslog-ng
Create custom configuration file for the rsyslog daemon, in the/etc/rsyslog.d/folder, with the following filtering conditions:# Define a new ruleset
ruleset(name="<RULESET_NAME>") { 
    action(type="omfile" file="<LOG_FILE_NAME>") 
} 

 # Set the input on port and bind it to the new ruleset 
input(type="imudp" port="<PORT>" ruleset="<RULESET_NAME>")(Replace<parameters>with the actual names of the objects represented. <LOG_FILE_NAME> is the file you created in step 2.)
Create custom configuration file for the rsyslog daemon, in the/etc/rsyslog.d/folder, with the following filtering conditions:
/etc/rsyslog.d/
# Define a new ruleset
ruleset(name="<RULESET_NAME>") { 
    action(type="omfile" file="<LOG_FILE_NAME>") 
} 

 # Set the input on port and bind it to the new ruleset 
input(type="imudp" port="<PORT>" ruleset="<RULESET_NAME>")
# Define a new ruleset
ruleset(name="<RULESET_NAME>") { 
    action(type="omfile" file="<LOG_FILE_NAME>") 
} 

 # Set the input on port and bind it to the new ruleset 
input(type="imudp" port="<PORT>" ruleset="<RULESET_NAME>")
(Replace<parameters>with the actual names of the objects represented. <LOG_FILE_NAME> is the file you created in step 2.)
<parameters>
Restart rsyslog. The typical command syntax issystemctl restart rsyslog.
Restart rsyslog. The typical command syntax issystemctl restart rsyslog.
systemctl restart rsyslog
Edit the config file/etc/syslog-ng/conf.d, adding the following conditions:source s_network {
    network ( 
        ip(â0.0.0.0â) 
        port(<PORT>) 
    ); 
}; 
destination d_file { 
    file(â<LOG_FILE_NAME>â); 
}; 
log { 
    source(s_network); 
    destination(d_file); 
};(Replace<LOG_FILE_NAME>with the name of the log file you created.)
Edit the config file/etc/syslog-ng/conf.d, adding the following conditions:
/etc/syslog-ng/conf.d
source s_network {
    network ( 
        ip(â0.0.0.0â) 
        port(<PORT>) 
    ); 
}; 
destination d_file { 
    file(â<LOG_FILE_NAME>â); 
}; 
log { 
    source(s_network); 
    destination(d_file); 
};
source s_network {
    network ( 
        ip(â0.0.0.0â) 
        port(<PORT>) 
    ); 
}; 
destination d_file { 
    file(â<LOG_FILE_NAME>â); 
}; 
log { 
    source(s_network); 
    destination(d_file); 
};
(Replace<LOG_FILE_NAME>with the name of the log file you created.)
<LOG_FILE_NAME>
Restart syslog-ng. The typical command syntax issystemctl restart syslog-ng.
Restart syslog-ng. The typical command syntax issystemctl restart syslog-ng.
systemctl restart syslog-ng
Create the DCR according to the directions inCollect logs from text files with the Azure Monitor Agent and ingest to Microsoft Sentinel.Replace the column name"RawData"with the column name"Message".Replace the transformKql value"source"with the value"sourceâ¯| project-rename Message=RawData".Replace the{TABLE_NAME}and{LOCAL_PATH_FILE}placeholders in theDCR templatewith the values in steps 1 and 2. Replace the other placeholders as directed.
Create the DCR according to the directions inCollect logs from text files with the Azure Monitor Agent and ingest to Microsoft Sentinel.
Replace the column name"RawData"with the column name"Message".
Replace the column name"RawData"with the column name"Message".
"RawData"
"Message"
Replace the transformKql value"source"with the value"sourceâ¯| project-rename Message=RawData".
Replace the transformKql value"source"with the value"sourceâ¯| project-rename Message=RawData".
"source"
"sourceâ¯| project-rename Message=RawData"
Replace the{TABLE_NAME}and{LOCAL_PATH_FILE}placeholders in theDCR templatewith the values in steps 1 and 2. Replace the other placeholders as directed.
Replace the{TABLE_NAME}and{LOCAL_PATH_FILE}placeholders in theDCR templatewith the values in steps 1 and 2. Replace the other placeholders as directed.
{TABLE_NAME}
{LOCAL_PATH_FILE}
Configure the machine where the Azure Monitor Agent is installed to open the syslog ports, and configure the syslog daemon there to accept messages from external sources. For detailed instructions and a script to automate this configuration, seeConfigure the log forwarder to accept logs.
Configure the machine where the Azure Monitor Agent is installed to open the syslog ports, and configure the syslog daemon there to accept messages from external sources. For detailed instructions and a script to automate this configuration, seeConfigure the log forwarder to accept logs.
Configure and connect the Ubiquiti controller.Follow theinstructionsâ¯providedâ¯by Ubiquitito enable syslog and optionally debugging logs.Select Settings > System Settings > Controller Configuration > Remote Logging and enable syslog.
Configure and connect the Ubiquiti controller.
Follow theinstructionsâ¯providedâ¯by Ubiquitito enable syslog and optionally debugging logs.
Select Settings > System Settings > Controller Configuration > Remote Logging and enable syslog.
Back to top
VMware vCenter
Follow these steps to ingest log messages from VMware vCenter:
Table name:vcenter_CL
Table name:vcenter_CL
vcenter_CL
Log storage location: Create a log file on your external syslog server. Grant the syslog daemon write permissions to the file. Install the AMA on the external syslog server if it's not already installed. Enter this filename and path in theFile patternfield in the connector, or in place of the{LOCAL_PATH_FILE}placeholder in the DCR.
Log storage location: Create a log file on your external syslog server. Grant the syslog daemon write permissions to the file. Install the AMA on the external syslog server if it's not already installed. Enter this filename and path in theFile patternfield in the connector, or in place of the{LOCAL_PATH_FILE}placeholder in the DCR.
{LOCAL_PATH_FILE}
Configure the syslog daemon to export its vCenter log messages to a temporary text file so the AMA can collect them.rsyslogsyslog-ngEdit the configuration file/etc/rsyslog.confto add the following template line before thedirectivesection:$template vcenter,"%timestamp% %hostname% %msg%\ n"Create custom configuration file for the rsyslog daemon, saved as/etc/rsyslog.d/10-vcenter.confwith the following filtering conditions:if $rawmsg contains "vpxd" then {
    action(type="omfile" file="/<LOG_FILE_NAME>")
    stop
}
if $rawmsg contains "vcenter-server" then { 
    action(type="omfile" file="/<LOG_FILE_NAME>") 
    stop 
}(Replace<LOG_FILE_NAME>with the name of the log file you created.)Restart rsyslog. The typical command syntax issudo systemctl restart rsyslog.Edit the config file/etc/syslog-ng/conf.d, adding the following filtering conditions:filter f_vcenter {
    message("vpxd") or message("vcenter-server"); 
}; 

destination d_vcenter { 
    file("<LOG_FILE_NAME>"); 
}; 

log { 
    source(s_src); 
    filter(f_vcenter); 
    destination(d_vcenter); 
    flags(final); #Ensures that once a message matches the filter and is written to the specified destination, it will not be processed by subsequent log statements 
};(Replace<LOG_FILE_NAME>with the name of the log file you created.)Restart syslog-ng. The typical command syntax issystemctl restart syslog-ng.
Configure the syslog daemon to export its vCenter log messages to a temporary text file so the AMA can collect them.
rsyslog
syslog-ng
Edit the configuration file/etc/rsyslog.confto add the following template line before thedirectivesection:$template vcenter,"%timestamp% %hostname% %msg%\ n"
Edit the configuration file/etc/rsyslog.confto add the following template line before thedirectivesection:
/etc/rsyslog.conf
$template vcenter,"%timestamp% %hostname% %msg%\ n"
$template vcenter,"%timestamp% %hostname% %msg%\ n"
Create custom configuration file for the rsyslog daemon, saved as/etc/rsyslog.d/10-vcenter.confwith the following filtering conditions:if $rawmsg contains "vpxd" then {
    action(type="omfile" file="/<LOG_FILE_NAME>")
    stop
}
if $rawmsg contains "vcenter-server" then { 
    action(type="omfile" file="/<LOG_FILE_NAME>") 
    stop 
}(Replace<LOG_FILE_NAME>with the name of the log file you created.)
Create custom configuration file for the rsyslog daemon, saved as/etc/rsyslog.d/10-vcenter.confwith the following filtering conditions:
/etc/rsyslog.d/10-vcenter.conf
if $rawmsg contains "vpxd" then {
    action(type="omfile" file="/<LOG_FILE_NAME>")
    stop
}
if $rawmsg contains "vcenter-server" then { 
    action(type="omfile" file="/<LOG_FILE_NAME>") 
    stop 
}
if $rawmsg contains "vpxd" then {
    action(type="omfile" file="/<LOG_FILE_NAME>")
    stop
}
if $rawmsg contains "vcenter-server" then { 
    action(type="omfile" file="/<LOG_FILE_NAME>") 
    stop 
}
(Replace<LOG_FILE_NAME>with the name of the log file you created.)
<LOG_FILE_NAME>
Restart rsyslog. The typical command syntax issudo systemctl restart rsyslog.
Restart rsyslog. The typical command syntax issudo systemctl restart rsyslog.
sudo systemctl restart rsyslog
Edit the config file/etc/syslog-ng/conf.d, adding the following filtering conditions:filter f_vcenter {
    message("vpxd") or message("vcenter-server"); 
}; 

destination d_vcenter { 
    file("<LOG_FILE_NAME>"); 
}; 

log { 
    source(s_src); 
    filter(f_vcenter); 
    destination(d_vcenter); 
    flags(final); #Ensures that once a message matches the filter and is written to the specified destination, it will not be processed by subsequent log statements 
};(Replace<LOG_FILE_NAME>with the name of the log file you created.)
Edit the config file/etc/syslog-ng/conf.d, adding the following filtering conditions:
/etc/syslog-ng/conf.d
filter f_vcenter {
    message("vpxd") or message("vcenter-server"); 
}; 

destination d_vcenter { 
    file("<LOG_FILE_NAME>"); 
}; 

log { 
    source(s_src); 
    filter(f_vcenter); 
    destination(d_vcenter); 
    flags(final); #Ensures that once a message matches the filter and is written to the specified destination, it will not be processed by subsequent log statements 
};
filter f_vcenter {
    message("vpxd") or message("vcenter-server"); 
}; 

destination d_vcenter { 
    file("<LOG_FILE_NAME>"); 
}; 

log { 
    source(s_src); 
    filter(f_vcenter); 
    destination(d_vcenter); 
    flags(final); #Ensures that once a message matches the filter and is written to the specified destination, it will not be processed by subsequent log statements 
};
(Replace<LOG_FILE_NAME>with the name of the log file you created.)
<LOG_FILE_NAME>
Restart syslog-ng. The typical command syntax issystemctl restart syslog-ng.
Restart syslog-ng. The typical command syntax issystemctl restart syslog-ng.
systemctl restart syslog-ng
Create the DCR according to the directions inCollect logs from text files with the Azure Monitor Agent and ingest to Microsoft Sentinel.Replace the column name"RawData"with the column name"Message".Replace the transformKql value"source"with the value"sourceâ¯| project-rename Message=RawData".Replace the{TABLE_NAME}and{LOCAL_PATH_FILE}placeholders in theDCR templatewith the values in steps 1 and 2. Replace the other placeholders as directed.dataCollectionEndpointId should be populated with your DCE. If you don't have one, define a new one. SeeCreate a data collection endpointfor the instructions.
Create the DCR according to the directions inCollect logs from text files with the Azure Monitor Agent and ingest to Microsoft Sentinel.
Replace the column name"RawData"with the column name"Message".
Replace the column name"RawData"with the column name"Message".
"RawData"
"Message"
Replace the transformKql value"source"with the value"sourceâ¯| project-rename Message=RawData".
Replace the transformKql value"source"with the value"sourceâ¯| project-rename Message=RawData".
"source"
"sourceâ¯| project-rename Message=RawData"
Replace the{TABLE_NAME}and{LOCAL_PATH_FILE}placeholders in theDCR templatewith the values in steps 1 and 2. Replace the other placeholders as directed.
Replace the{TABLE_NAME}and{LOCAL_PATH_FILE}placeholders in theDCR templatewith the values in steps 1 and 2. Replace the other placeholders as directed.
{TABLE_NAME}
{LOCAL_PATH_FILE}
dataCollectionEndpointId should be populated with your DCE. If you don't have one, define a new one. SeeCreate a data collection endpointfor the instructions.
dataCollectionEndpointId should be populated with your DCE. If you don't have one, define a new one. SeeCreate a data collection endpointfor the instructions.
Configure the machine where the Azure Monitor Agent is installed to open the syslog ports, and configure the syslog daemon there to accept messages from external sources. For detailed instructions and a script to automate this configuration, seeConfigure the log forwarder to accept logs.
Configure the machine where the Azure Monitor Agent is installed to open the syslog ports, and configure the syslog daemon there to accept messages from external sources. For detailed instructions and a script to automate this configuration, seeConfigure the log forwarder to accept logs.
Configure and connect the vCenter devices.Follow theinstructions provided by VMwarefor sending syslog messages.Use the IP address or hostname of the machine where the Azure Monitor Agent is installed.
Configure and connect the vCenter devices.
Follow theinstructions provided by VMwarefor sending syslog messages.
Use the IP address or hostname of the machine where the Azure Monitor Agent is installed.
Back to top
Zscaler Private Access (ZPA)
Follow these steps to ingest log messages from Zscaler Private Access (ZPA):
Table name:ZPA_CL
Table name:ZPA_CL
ZPA_CL
Log storage location: Create a log file on your external syslog server. Grant the syslog daemon write permissions to the file. Install the AMA on the external syslog server if it's not already installed. Enter this filename and path in theFile patternfield in the connector, or in place of the{LOCAL_PATH_FILE}placeholder in the DCR.
Log storage location: Create a log file on your external syslog server. Grant the syslog daemon write permissions to the file. Install the AMA on the external syslog server if it's not already installed. Enter this filename and path in theFile patternfield in the connector, or in place of the{LOCAL_PATH_FILE}placeholder in the DCR.
{LOCAL_PATH_FILE}
Configure the syslog daemon to export its ZPA log messages to a temporary text file so the AMA can collect them.rsyslogsyslog-ngCreate custom configuration file for the rsyslog daemon, in the/etc/rsyslog.d/folder, with the following filtering conditions:# Define a new ruleset
ruleset(name="<RULESET_NAME>") { 
    action(type="omfile" file="<LOG_FILE_NAME>") 
} 

 # Set the input on port and bind it to the new ruleset 
input(type="imudp" port="<PORT>" ruleset="<RULESET_NAME>")(Replace<parameters>with the actual names of the objects represented.)Restart rsyslog. The typical command syntax issystemctl restart rsyslog.Edit the config file/etc/syslog-ng/conf.d, adding the following conditions:source s_network {
    network ( 
        ip(â0.0.0.0â) 
        port(<PORT>) 
    ); 
}; 
destination d_file { 
    file(â<LOG_FILE_NAME>â); 
}; 
log { 
    source(s_network); 
    destination(d_file); 
};(Replace<LOG_FILE_NAME>with the name of the log file you created.)Restart syslog-ng. The typical command syntax issystemctl restart syslog-ng.
Configure the syslog daemon to export its ZPA log messages to a temporary text file so the AMA can collect them.
rsyslog
syslog-ng
Create custom configuration file for the rsyslog daemon, in the/etc/rsyslog.d/folder, with the following filtering conditions:# Define a new ruleset
ruleset(name="<RULESET_NAME>") { 
    action(type="omfile" file="<LOG_FILE_NAME>") 
} 

 # Set the input on port and bind it to the new ruleset 
input(type="imudp" port="<PORT>" ruleset="<RULESET_NAME>")(Replace<parameters>with the actual names of the objects represented.)
Create custom configuration file for the rsyslog daemon, in the/etc/rsyslog.d/folder, with the following filtering conditions:
/etc/rsyslog.d/
# Define a new ruleset
ruleset(name="<RULESET_NAME>") { 
    action(type="omfile" file="<LOG_FILE_NAME>") 
} 

 # Set the input on port and bind it to the new ruleset 
input(type="imudp" port="<PORT>" ruleset="<RULESET_NAME>")
# Define a new ruleset
ruleset(name="<RULESET_NAME>") { 
    action(type="omfile" file="<LOG_FILE_NAME>") 
} 

 # Set the input on port and bind it to the new ruleset 
input(type="imudp" port="<PORT>" ruleset="<RULESET_NAME>")
(Replace<parameters>with the actual names of the objects represented.)
<parameters>
Restart rsyslog. The typical command syntax issystemctl restart rsyslog.
Restart rsyslog. The typical command syntax issystemctl restart rsyslog.
systemctl restart rsyslog
Edit the config file/etc/syslog-ng/conf.d, adding the following conditions:source s_network {
    network ( 
        ip(â0.0.0.0â) 
        port(<PORT>) 
    ); 
}; 
destination d_file { 
    file(â<LOG_FILE_NAME>â); 
}; 
log { 
    source(s_network); 
    destination(d_file); 
};(Replace<LOG_FILE_NAME>with the name of the log file you created.)
Edit the config file/etc/syslog-ng/conf.d, adding the following conditions:
/etc/syslog-ng/conf.d
source s_network {
    network ( 
        ip(â0.0.0.0â) 
        port(<PORT>) 
    ); 
}; 
destination d_file { 
    file(â<LOG_FILE_NAME>â); 
}; 
log { 
    source(s_network); 
    destination(d_file); 
};
source s_network {
    network ( 
        ip(â0.0.0.0â) 
        port(<PORT>) 
    ); 
}; 
destination d_file { 
    file(â<LOG_FILE_NAME>â); 
}; 
log { 
    source(s_network); 
    destination(d_file); 
};
(Replace<LOG_FILE_NAME>with the name of the log file you created.)
<LOG_FILE_NAME>
Restart syslog-ng. The typical command syntax issystemctl restart syslog-ng.
Restart syslog-ng. The typical command syntax issystemctl restart syslog-ng.
systemctl restart syslog-ng
Create the DCR according to the directions inCollect logs from text files with the Azure Monitor Agent and ingest to Microsoft Sentinel.Replace the column name"RawData"with the column name"Message".Replace the transformKql value"source"with the value"sourceâ¯| project-rename Message=RawData".Replace the{TABLE_NAME}and{LOCAL_PATH_FILE}placeholders in theDCR templatewith the values in steps 1 and 2. Replace the other placeholders as directed.
Create the DCR according to the directions inCollect logs from text files with the Azure Monitor Agent and ingest to Microsoft Sentinel.
Replace the column name"RawData"with the column name"Message".
Replace the column name"RawData"with the column name"Message".
"RawData"
"Message"
Replace the transformKql value"source"with the value"sourceâ¯| project-rename Message=RawData".
Replace the transformKql value"source"with the value"sourceâ¯| project-rename Message=RawData".
"source"
"sourceâ¯| project-rename Message=RawData"
Replace the{TABLE_NAME}and{LOCAL_PATH_FILE}placeholders in theDCR templatewith the values in steps 1 and 2. Replace the other placeholders as directed.
Replace the{TABLE_NAME}and{LOCAL_PATH_FILE}placeholders in theDCR templatewith the values in steps 1 and 2. Replace the other placeholders as directed.
{TABLE_NAME}
{LOCAL_PATH_FILE}
Configure the machine where the Azure Monitor Agent is installed to open the syslog ports, and configure the syslog daemon there to accept messages from external sources. For detailed instructions and a script to automate this configuration, seeConfigure the log forwarder to accept logs.
Configure the machine where the Azure Monitor Agent is installed to open the syslog ports, and configure the syslog daemon there to accept messages from external sources. For detailed instructions and a script to automate this configuration, seeConfigure the log forwarder to accept logs.
Configure and connect the ZPA receiver.Follow theinstructionsâ¯providedâ¯by ZPA. Select JSON as the log template.Select Settings > System Settings > Controller Configuration > Remote Logging and enable syslog.
Configure and connect the ZPA receiver.
Follow theinstructionsâ¯providedâ¯by ZPA. Select JSON as the log template.
Select Settings > System Settings > Controller Configuration > Remote Logging and enable syslog.
Back to top
Related content
Ingest syslog and CEF messages to Microsoft Sentinel with the Azure Monitor Agent
Syslog via AMA and Common Event Format (CEF) via AMA connectors for Microsoft Sentinel
Feedback
Was this page helpful?
Additional resources