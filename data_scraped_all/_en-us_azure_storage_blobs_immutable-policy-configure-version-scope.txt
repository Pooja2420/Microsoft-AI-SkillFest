Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Configure immutability policies for blob versions
Article
2023-11-21
6 contributors
In this article
Immutable storage for Azure Blob Storage enables users to store business-critical data in a WORM (Write Once, Read Many) state. While in a WORM state, data can't be modified or deleted for a user-specified interval. By configuring immutability policies for blob data, you can protect your data from overwrites and deletes. Immutability policies include time-based retention policies and legal holds. For more information about immutability policies for Blob Storage, seeStore business-critical blob data with immutable storage.
An immutability policy may be scoped either to an individual blob version or to a container. This article describes how to configure a version-level immutability policy. To learn how to configure container-level immutability policies, seeConfigure immutability policies for containers.
Note
Immutability policies are not supported in accounts that have the Network File System (NFS) 3.0 protocol or the SSH File Transfer Protocol (SFTP) enabled on them.
Configuring a version-level immutability policy is a two-step process:
First, enable support for version-level immutability on a new storage account or on a new or existing container. SeeEnable support for version-level immutabilityfor details.
Next, configure a time-based retention policy or legal hold that applies to one or more blob versions in that container.
Prerequisites
To configure version-level time-based retention policies, blob versioning must be enabled for the storage account. Keep in mind that enabling blob versioning may have a billing impact. To learn how to enable blob versioning, seeEnable and manage blob versioning.
For information about supported storage account configurations for version-level immutability policies, seeVersion-level WORM policies for immutable blob data.
Enable support for version-level immutability
Before you can apply a time-based retention policy to a blob version, you must enable support for version-level immutability. You can enable support for version-level immutability on a new storage account, or on a new or existing container.
Enable version-level immutability support on a storage account
You can enable support for version-level immutability only when you create a new storage account.
Portal
PowerShell
Azure CLI
To enable support for version-level immutability when you create a storage account in the Azure portal, follow these steps:
Navigate to theStorage accountspage in the Azure portal.
Navigate to theStorage accountspage in the Azure portal.
Select theCreatebutton to create a new account.
Select theCreatebutton to create a new account.
Fill out theBasicstab.
Fill out theBasicstab.
On theData protectiontab, under Access control, selectEnable version-level immutability support. When you check this box, the box forEnable versioning for blobsis also automatically checked.
On theData protectiontab, under Access control, selectEnable version-level immutability support. When you check this box, the box forEnable versioning for blobsis also automatically checked.
SelectReview + Createto validate your account parameters and create the storage account.
SelectReview + Createto validate your account parameters and create the storage account.

After the storage account is created, you can configure a default version-level policy for the account. For more information, seeConfigure a default time-based retention policy.
N/A
To enable support for version-level immutability when you create a storage account with Azure CLI, call theaz storage account createcommand with the--enable-alwparameter specified. You can optionally specify a default policy for the storage account at the same time, as shown in the following example. Remember to replace placeholders in angle brackets with your own values:
--enable-alw
az storage account create \
    --name <storage-account> \
    --resource-group <resource-group> \
    --enable-alw \
    --immutability-period-in-days 90 \
    --immutability-state unlocked \
    --allow-protected-append-writes true
az storage account create \
    --name <storage-account> \
    --resource-group <resource-group> \
    --enable-alw \
    --immutability-period-in-days 90 \
    --immutability-state unlocked \
    --allow-protected-append-writes true
If version-level immutability support is enabled for the storage account and the account contains one or more containers, then you must delete all containers before you delete the storage account, even if there are no immutability policies in effect for the account or containers.
Note
Version-level immutability cannot be disabled after it is enabled on the storage account, although locked policies can be deleted.
Enable version-level immutability support on a container
Both new and existing containers can be configured to support version-level immutability. However, an existing container must undergo a migration process in order to enable support.
Keep in mind that enabling version-level immutability support for a container doesn't make data in that container immutable. You must also either configure a default immutability policy for the container, or an immutability policy on a specific blob version. If you enabled version-level immutability for the storage account when it was created, you can also configure a default immutability policy for the account.
To use a version-level immutability policy, you must first explicitly enable support for version-level WORM on the container. You can enable support for version-level WORM either when you create the container, or when you add a version-level immutability policy to an existing container.
Portal
PowerShell
Azure CLI
To create a container that supports version-level immutability in the Azure portal, follow these steps:
Navigate to theContainerspage for your storage account in the Azure portal, and selectAdd.
Navigate to theContainerspage for your storage account in the Azure portal, and selectAdd.
In theNew containerdialog, provide a name for your container, then expand theAdvancedsection.
In theNew containerdialog, provide a name for your container, then expand theAdvancedsection.
SelectEnable version-level immutability supportto enable version-level immutability for the container.
SelectEnable version-level immutability supportto enable version-level immutability for the container.

To create a container that supports version-level immutability with PowerShell, first install theAz.Storage module, version 3.12.0 or later.
Next, call theNew-AzRmStorageContainercommand with the-EnableImmutableStorageWithVersioningparameter, as shown in the following example. Remember to replace placeholders in angle brackets with your own values:
-EnableImmutableStorageWithVersioning
# Create a container with version-level immutability support.
$container = New-AzRmStorageContainer -ResourceGroupName <resource-group> `
    -StorageAccountName <storage-account> `
    -Name <container> `
    -EnableImmutableStorageWithVersioning

# Verify that version-level immutability support is enabled for the container
$container.ImmutableStorageWithVersioning
# Create a container with version-level immutability support.
$container = New-AzRmStorageContainer -ResourceGroupName <resource-group> `
    -StorageAccountName <storage-account> `
    -Name <container> `
    -EnableImmutableStorageWithVersioning

# Verify that version-level immutability support is enabled for the container
$container.ImmutableStorageWithVersioning
To create a container that supports version-level immutability with Azure CLI, first install Azure CLI version 2.27 or later. For more information about installing Azure CLI, seeHow to install the Azure CLI.
Next, call theaz storage container-rm createcommand, specifying the--enable-vlwparameter. Remember to replace placeholders in angle brackets with your own values:
--enable-vlw
# Create a container with version-level immutability support.
az storage container-rm create \
    --name <container> \
    --storage-account <storage-account> \
    --resource-group <resource-group> \
    --enable-vlw

# Verify that version-level immutability support is enabled for the container
az storage container-rm show \
    --storage-account <storage-account> \
    --name <container> \
    --query '[immutableStorageWithVersioning.enabled]' \
    --output tsv
# Create a container with version-level immutability support.
az storage container-rm create \
    --name <container> \
    --storage-account <storage-account> \
    --resource-group <resource-group> \
    --enable-vlw

# Verify that version-level immutability support is enabled for the container
az storage container-rm show \
    --storage-account <storage-account> \
    --name <container> \
    --query '[immutableStorageWithVersioning.enabled]' \
    --output tsv
If version-level immutability support is enabled for a container and the container contains one or more blobs, then you must delete all blobs in the container before you can delete the container, even if there are no immutability policies in effect for the container or its blobs.
To configure version-level immutability policies for an existing container, you must migrate the container to support version-level immutable storage. Container migration may take some time and can't be reversed. You can migrate 10 containers at a time per storage account.
To migrate an existing container to support version-level immutability policies, the container must have a container-level time-based retention policy configured. The migration fails unless the container has an existing policy. The retention interval for the container-level policy is maintained as the retention interval for the default version-level policy on the container.
If the container has an existing container-level legal hold, then it can't be migrated until the legal hold is removed.
Portal
PowerShell
Azure CLI
To migrate a container to support version-level immutability policies in the Azure portal, follow these steps:
Navigate to the desired container.
Navigate to the desired container.
In the context menu of the container, then selectAccess policy.
In the context menu of the container, then selectAccess policy.
UnderImmutable blob storage, selectAdd policy.
UnderImmutable blob storage, selectAdd policy.
For thePolicy typefield, chooseTime-based retention, and specify the retention interval.
For thePolicy typefield, chooseTime-based retention, and specify the retention interval.
SelectEnable version-level immutability.
SelectEnable version-level immutability.
SelectOKto create a container-level policy with the specified retention interval and then begin the migration to version-level immutability support.
SelectOKto create a container-level policy with the specified retention interval and then begin the migration to version-level immutability support.

While the migration operation is underway, the scope of the policy on the container shows asContainer. Any operations related to managing version-level immutability policies aren't permitted while the container migration is in progress. Other operations on blob data will proceed normally during migration.

After the migration is complete, the scope of the policy on the container shows asVersion. The policy shown is a default policy on the container that automatically applies to all blob versions subsequently created in the container. The default policy can be overridden on any version by specifying a custom policy for that version.

To migrate a container to support version-level immutable storage with PowerShell, first make sure that a container-level time-based retention policy exists for the container. To create one, callSet-AzRmStorageContainerImmutabilityPolicy.
Set-AzRmStorageContainerImmutabilityPolicy -ResourceGroupName <resource-group> `
   -StorageAccountName <storage-account> `
   -ContainerName <container> `
   -ImmutabilityPeriod <retention-interval-in-days>
Set-AzRmStorageContainerImmutabilityPolicy -ResourceGroupName <resource-group> `
   -StorageAccountName <storage-account> `
   -ContainerName <container> `
   -ImmutabilityPeriod <retention-interval-in-days>
Next, call theInvoke-AzRmStorageContainerImmutableStorageWithVersioningMigrationcommand to migrate the container. Include the-AsJobparameter to run the command asynchronously. Running the operation asynchronously is recommended, as the migration may take some time to complete.
-AsJob
$migrationOperation = Invoke-AzRmStorageContainerImmutableStorageWithVersioningMigration `
    -ResourceGroupName <resource-group> `
    -StorageAccountName <storage-account> `
    -Name <container> `
    -AsJob
$migrationOperation = Invoke-AzRmStorageContainerImmutableStorageWithVersioningMigration `
    -ResourceGroupName <resource-group> `
    -StorageAccountName <storage-account> `
    -Name <container> `
    -AsJob
To check the status of the long-running operation, read the operation'sJobStateInfo.Stateproperty.
$migrationOperation.JobStateInfo.State
$migrationOperation.JobStateInfo.State
If the container doesn't have an existing time-based retention policy when you attempt to migrate to version-level immutability, then the operation fails. The following example checks the value of theJobStateInfo.Stateproperty and displays the error message if the operation failed because the container-level policy doesn't exist.
if ($migrationOperation.JobStateInfo.State -eq "Failed") {
Write-Host $migrationOperation.Error
}
The container <container-name> must have an immutability policy set as a default policy
before initiating container migration to support object level immutability with versioning.
if ($migrationOperation.JobStateInfo.State -eq "Failed") {
Write-Host $migrationOperation.Error
}
The container <container-name> must have an immutability policy set as a default policy
before initiating container migration to support object level immutability with versioning.
After the migration is complete, check theOutputproperty of the operation to see that support for version-level immutability is enabled.
$migrationOperation.Output
$migrationOperation.Output
For more information about PowerShell jobs, seeRun Azure PowerShell cmdlets in PowerShell Jobs.
To migrate a container to support version-level immutable storage with Azure CLI, first make sure that a container-level time-based retention policy exists for the container. To create one, callaz storage container immutability-policy create.
az storage container immutability-policy create \
    --resource-group <resource-group> \
    --account-name <storage-account> \
    --container-name <container> \
    --period <retention-interval-in-days>
az storage container immutability-policy create \
    --resource-group <resource-group> \
    --account-name <storage-account> \
    --container-name <container> \
    --period <retention-interval-in-days>
Next, call theaz storage container-rm migrate-vlwcommand to migrate the container. Include the--no-waitparameter to run the command asynchronously. Running the operation asynchronously is recommended, as the migration may take some time to complete.
--no-wait
az storage container-rm migrate-vlw \
    --resource-group <resource-group> \
    --storage-account <storage-account> \
    --name <container> \
    --no-wait
az storage container-rm migrate-vlw \
    --resource-group <resource-group> \
    --storage-account <storage-account> \
    --name <container> \
    --no-wait
To check the status of the long-running operation, read the value of themigrationStateproperty.
az storage container-rm show \
    --storage-account <storage-account> \
    --name <container> \
    --query '[immutableStorageWithVersioning.migrationState]' \
    --output tsv
az storage container-rm show \
    --storage-account <storage-account> \
    --name <container> \
    --query '[immutableStorageWithVersioning.migrationState]' \
    --output tsv
Configure a default time-based retention policy
After you have enabled version-level immutability support for a storage account or for an individual container, you can specify a default version-level time-based retention policy for the account or container. When you specify a default policy for an account or container, that policy applies by default to all new blob versions that are created in the account or container. You can override the default policy for any individual blob version in the account or container.
The default policy isn't automatically applied to blob versions that existed before the default policy was configured.
If you migrated an existing container to support version-level immutability, then the container-level policy that was in effect before the migration is migrated to a default version-level policy for the container.
To configure a default version-level immutability policy for a storage account or container, use the Azure portal, PowerShell, Azure CLI, or one of the Azure Storage SDKs. Make sure that you have enabled support for version-level immutability for the storage account or container, as described inEnable support for version-level immutability.
Portal
PowerShell
Azure CLI
To configure a default version-level immutability policy for a storage account in the Azure portal, follow these steps:
In the Azure portal, navigate to your storage account.
In the Azure portal, navigate to your storage account.
UnderData management, selectData protection.
UnderData management, selectData protection.
On theData protectionpage, locate theAccess controlsection. If the storage account was created with support for version-level immutability, then theManage policybutton appears in theAccess controlsection.
On theData protectionpage, locate theAccess controlsection. If the storage account was created with support for version-level immutability, then theManage policybutton appears in theAccess controlsection.

Select theManage policybutton to display theManage version-level immutability policydialog.
Select theManage policybutton to display theManage version-level immutability policydialog.
Add a default time-based retention policy for the storage account.
Add a default time-based retention policy for the storage account.

To configure a default version-level immutability policy for a container in the Azure portal, follow these steps:
In the Azure portal, navigate to theContainerspage, and locate the container to which you want to apply the policy.
In the Azure portal, navigate to theContainerspage, and locate the container to which you want to apply the policy.
In the context menu of the container, and chooseAccess policy.
In the context menu of the container, and chooseAccess policy.
In theAccess policydialog, under theImmutable blob storagesection, chooseAdd policy.
In theAccess policydialog, under theImmutable blob storagesection, chooseAdd policy.
SelectTime-based retention policyand specify the retention interval.
SelectTime-based retention policyand specify the retention interval.
Choose whether to allow protected append writes.TheAppend blobsoption enables your workloads to add new blocks of data to the end of an append blob by using theAppend Blockoperation.TheBlock and append blobsoption extends this support by adding the ability to write new blocks to a block blob.  The Blob Storage API does not provide a way for applications to do this directly. However, applications can accomplish this by using append and flush methods that are available in the Data Lake Storage API. Also, this property enables Microsoft applications such as Azure Data Factory to append blocks of data by using internal APIs. If your workloads depend on any of these tools, then you can use this property to avoid errors that can appear when those tools attempt to append data to blobs.To learn more about these options, seeAllow protected append blobs writes.
Choose whether to allow protected append writes.
TheAppend blobsoption enables your workloads to add new blocks of data to the end of an append blob by using theAppend Blockoperation.
TheBlock and append blobsoption extends this support by adding the ability to write new blocks to a block blob.  The Blob Storage API does not provide a way for applications to do this directly. However, applications can accomplish this by using append and flush methods that are available in the Data Lake Storage API. Also, this property enables Microsoft applications such as Azure Data Factory to append blocks of data by using internal APIs. If your workloads depend on any of these tools, then you can use this property to avoid errors that can appear when those tools attempt to append data to blobs.
To learn more about these options, seeAllow protected append blobs writes.

To configure a default version-level immutability policy for a container with PowerShell, call theSet-AzRmStorageContainerImmutabilityPolicycommand.
Set-AzRmStorageContainerImmutabilityPolicy -ResourceGroupName <resource-group> `
   -StorageAccountName <storage-account> `
   -ContainerName <container> `
   -ImmutabilityPeriod <retention-interval-in-days> `
   -AllowProtectedAppendWrite $true
Set-AzRmStorageContainerImmutabilityPolicy -ResourceGroupName <resource-group> `
   -StorageAccountName <storage-account> `
   -ContainerName <container> `
   -ImmutabilityPeriod <retention-interval-in-days> `
   -AllowProtectedAppendWrite $true
To configure a default version-level immutability policy for a container with Azure CLI, call theaz storage container immutability-policy createcommand.
az storage container immutability-policy create \
    --account-name <storage-account> \
    --container-name <container> \
    --period <retention-interval-in-days> \
    --allow-protected-append-writes true
az storage container immutability-policy create \
    --account-name <storage-account> \
    --container-name <container> \
    --period <retention-interval-in-days> \
    --allow-protected-append-writes true
Determine the scope of a retention policy on a container
To determine the scope of a time-based retention policy in the Azure portal, follow these steps:
Navigate to the desired container.
Navigate to the desired container.
In the context menu of the container, then selectAccess policy.
In the context menu of the container, then selectAccess policy.
UnderImmutable blob storage, locate theScopefield. If the container is configured with a default version-level retention policy, then the scope is set toVersion, as shown in the following image:
UnderImmutable blob storage, locate theScopefield. If the container is configured with a default version-level retention policy, then the scope is set toVersion, as shown in the following image:

If the container is configured with a container-level retention policy, then the scope is set toContainer, as shown in the following image:
If the container is configured with a container-level retention policy, then the scope is set toContainer, as shown in the following image:

Configure a time-based retention policy on an existing version
Time-based retention policies maintain blob data in a WORM state for a specified interval. For more information about time-based retention policies, seeTime-based retention policies for immutable blob data.
You have three options for configuring a time-based retention policy for a blob version:
Option 1: You can configure a default policy on the storage account or container that applies to all objects in the account or container. Objects in the account or container will inherit the default policy unless you explicitly override it by configuring a policy on an individual blob version. For more information, seeConfigure a default time-based retention policy.
Option 2: You can configure a policy on the current version of the blob. This policy can override a default policy configured on the storage account or container, if a default policy exists and it's unlocked. By default, any previous versions that are created after the policy is configured will inherit the policy on the current version of the blob. For more information, seeConfigure a retention policy on the current version of a blob.
Option 3: You can configure a policy on a previous version of a blob. This policy can override a default policy configured on the current version, if one exists and it's unlocked. For more information, seeConfigure a retention policy on a previous version of a blob.
For more information on blob versioning, seeBlob versioning.
Portal
PowerShell
Azure CLI
The Azure portal displays a list of blobs when you navigate to a container. Each blob displayed represents the current version of the blob. You can access a list of previous versions by opening the context menu of the blob and then choosingView previous versions.
Configure a retention policy on the current version of a blob
To configure a time-based retention policy on the current version of a blob, follow these steps:
Navigate to the container that contains the target blob.
Navigate to the container that contains the target blob.
In the context menu of the blob, and chooseAccess policy. If a time-based retention policy has already been configured for the previous version, it appears in theAccess policydialog.
In the context menu of the blob, and chooseAccess policy. If a time-based retention policy has already been configured for the previous version, it appears in theAccess policydialog.
In theAccess policydialog, under theImmutable blob versionssection, chooseAdd policy.
In theAccess policydialog, under theImmutable blob versionssection, chooseAdd policy.
SelectTime-based retention policyand specify the retention interval.
SelectTime-based retention policyand specify the retention interval.
SelectOKto apply the policy to the current version of the blob.
SelectOKto apply the policy to the current version of the blob.

You can view the properties for a blob to see whether a policy is enabled on the current version. Select the blob, then navigate to theOverviewtab and locate theVersion-level immutability policyproperty. If a policy is enabled, theRetention periodproperty will display the expiry date and time for the policy. Keep in mind that a policy may either be configured for the current version, or may be inherited from the blob's parent container if a default policy is in effect.

Configure a retention policy on a previous version of a blob
You can also configure a time-based retention policy on a previous version of a blob. A previous version is always immutable in that it can't be modified. However, a previous version can be deleted. A time-based retention policy protects against deletion while it is in effect.
To configure a time-based retention policy on a previous version of a blob, follow these steps:
Navigate to the container that contains the target blob.
Navigate to the container that contains the target blob.
Select the blob, then navigate to theVersionstab.
Select the blob, then navigate to theVersionstab.
Locate the target version, then, in the context menu of the version, chooseAccess policy. If a time-based retention policy has already been configured for the previous version, it appears in theAccess policydialog.
Locate the target version, then, in the context menu of the version, chooseAccess policy. If a time-based retention policy has already been configured for the previous version, it appears in theAccess policydialog.
In theAccess policydialog, under theImmutable blob versionssection, chooseAdd policy.
In theAccess policydialog, under theImmutable blob versionssection, chooseAdd policy.
SelectTime-based retention policyand specify the retention interval.
SelectTime-based retention policyand specify the retention interval.
SelectOKto apply the policy to the current version of the blob.
SelectOKto apply the policy to the current version of the blob.

To configure a time-based retention policy on a blob version with PowerShell, call theSet-AzStorageBlobImmutabilityPolicycommand.
The following example shows how to configure an unlocked policy on the current version of a blob. Remember to replace placeholders in angle brackets with your own values:
# Get the storage account context
$ctx = (Get-AzStorageAccount `
        -ResourceGroupName <resource-group> `
        -Name <storage-account>).Context

Set-AzStorageBlobImmutabilityPolicy -Container <container> `
    -Blob <blob-version> `
    -Context $ctx `
    -ExpiresOn "2021-09-01T12:00:00Z" `
    -PolicyMode Unlocked
# Get the storage account context
$ctx = (Get-AzStorageAccount `
        -ResourceGroupName <resource-group> `
        -Name <storage-account>).Context

Set-AzStorageBlobImmutabilityPolicy -Container <container> `
    -Blob <blob-version> `
    -Context $ctx `
    -ExpiresOn "2021-09-01T12:00:00Z" `
    -PolicyMode Unlocked
To configure a time-based retention policy on a blob version with Azure CLI, first install the Azure CLI, version 2.29.0 or later.
Next, call theaz storage blob immutability-policy setcommand to configure the time-based retention policy. The following example shows how to configure an unlocked policy on the current version of a blob. Remember to replace placeholders in angle brackets with your own values:
az storage blob immutability-policy set \
    --expiry-time 2021-09-20T08:00:00Z \
    --policy-mode Unlocked \
    --container <container> \
    --name <blob-version> \
    --account-name <storage-account> \
    --auth-mode login
az storage blob immutability-policy set \
    --expiry-time 2021-09-20T08:00:00Z \
    --policy-mode Unlocked \
    --container <container> \
    --name <blob-version> \
    --account-name <storage-account> \
    --auth-mode login
Configure a time-based retention policy when uploading a blob
When you use the Azure portal to upload a blob to a container that supports version-level immutability, you have several options for configuring a time-based retention policy for the new blob:
Option 1: If a default retention policy is configured for the container, you can upload the blob with the container's policy. This option is selected by default when there's a retention policy on the container.
Option 2: If a default retention policy is configured for the container, you can choose to override the default policy, either by defining a custom retention policy for the new blob, or by uploading the blob with no policy.
Option 3: If no default policy is configured for the container, then you can upload the blob with a custom policy, or with no policy.
To configure a time-based retention policy when you upload a blob, follow these steps:
Navigate to the desired container, and selectUpload.
Navigate to the desired container, and selectUpload.
In theUploadblob dialog, expand theAdvancedsection.
In theUploadblob dialog, expand theAdvancedsection.
Configure the time-based retention policy for the new blob in theRetention policyfield. If there's a default policy configured for the container, that policy is selected by default. You can also specify a custom policy for the blob.
Configure the time-based retention policy for the new blob in theRetention policyfield. If there's a default policy configured for the container, that policy is selected by default. You can also specify a custom policy for the blob.

Modify or delete an unlocked retention policy
You can modify an unlocked time-based retention policy to shorten or lengthen the retention interval. You can also delete an unlocked policy. Editing or deleting an unlocked time-based retention policy for a blob version doesn't affect policies in effect for any other versions. If there's a default time-based retention policy in effect for the container, then the blob version with the modified or deleted policy will no longer inherit from the container.
Portal
PowerShell
Azure CLI
To modify an unlocked time-based retention policy in the Azure portal, follow these steps:
Locate the target container or version. In the context menu of the container or version, chooseAccess policy.
Locate the target container or version. In the context menu of the container or version, chooseAccess policy.
Locate the existing unlocked immutability policy. In the context menu, selectEditfrom the menu.
Locate the existing unlocked immutability policy. In the context menu, selectEditfrom the menu.

Provide the new date and time for the policy expiration.
Provide the new date and time for the policy expiration.
To delete the unlocked policy, selectDeletefrom the context menu.
To modify an unlocked time-based retention policy with PowerShell, call theSet-AzStorageBlobImmutabilityPolicycommand on the blob version with the new date and time for the policy expiration. Remember to replace placeholders in angle brackets with your own values:
$containerName = "<container>"
$blobName = "<blob>"

# Get the previous blob version.
$blobVersion = Get-AzStorageBlob -Container $containerName `
    -Blob $blobName `
    -VersionId "2021-08-31T00:26:41.2273852Z" `
    -Context $ctx

# Extend the retention interval by five days.
$blobVersion = $blobVersion |
    Set-AzStorageBlobImmutabilityPolicy -ExpiresOn (Get-Date).AddDays(5) `

# View the new policy parameters.
$blobVersion.BlobProperties.ImmutabilityPolicy
$containerName = "<container>"
$blobName = "<blob>"

# Get the previous blob version.
$blobVersion = Get-AzStorageBlob -Container $containerName `
    -Blob $blobName `
    -VersionId "2021-08-31T00:26:41.2273852Z" `
    -Context $ctx

# Extend the retention interval by five days.
$blobVersion = $blobVersion |
    Set-AzStorageBlobImmutabilityPolicy -ExpiresOn (Get-Date).AddDays(5) `

# View the new policy parameters.
$blobVersion.BlobProperties.ImmutabilityPolicy
To delete an unlocked retention policy, call theRemove-AzStorageBlobImmutabilityPolicycommand.
$blobVersion = $blobVersion | Remove-AzStorageBlobImmutabilityPolicy
$blobVersion = $blobVersion | Remove-AzStorageBlobImmutabilityPolicy
To modify an unlocked time-based retention policy with PowerShell, call theaz storage blob immutability-policy setcommand on the blob version with the new date and time for the policy expiration. Remember to replace placeholders in angle brackets with your own values:
az storage blob immutability-policy set \
    --expiry-time 2021-10-0T18:00:00Z \
    --policy-mode Unlocked \
    --container <container> \
    --name <blob-version> \
    --account-name <storage-account> \
    --auth-mode login
az storage blob immutability-policy set \
    --expiry-time 2021-10-0T18:00:00Z \
    --policy-mode Unlocked \
    --container <container> \
    --name <blob-version> \
    --account-name <storage-account> \
    --auth-mode login
To delete an unlocked retention policy, call theaz storage blob immutability-policy deletecommand.
az storage blob immutability-policy delete \
    --container <container> \
    --name <blob-version> \
    --account-name <storage-account> \
    --auth-mode login
az storage blob immutability-policy delete \
    --container <container> \
    --name <blob-version> \
    --account-name <storage-account> \
    --auth-mode login
Lock a time-based retention policy
When you have finished testing a time-based retention policy, you can lock the policy. A locked policy is compliant with SEC 17a-4(f) and other regulatory compliance. You can lengthen the retention interval for a locked policy up to five times, but you can't shorten it.
After a policy is locked, you can't delete it. However, you can delete the blob after the retention interval has expired.
Portal
PowerShell
Azure CLI
To lock a policy in the Azure portal, follow these steps:
Locate the target container or version. In the context menu of the container or version, chooseAccess policy.
Locate the target container or version. In the context menu of the container or version, chooseAccess policy.
Under theImmutable blob versionssection, locate the existing unlocked policy. SelectLock policyfrom the context menu.
Under theImmutable blob versionssection, locate the existing unlocked policy. SelectLock policyfrom the context menu.
Confirm that you want to lock the policy.
Confirm that you want to lock the policy.

To lock a policy with PowerShell, call theSet-AzStorageBlobImmutabilityPolicycommand and set thePolicyModeparameter toLocked.
The following example shows how to lock a policy by specifying the same retention interval that was in effect for the unlocked policy. You can also change the expiry at the time that you lock the policy.
# Get the previous blob version.
$blobVersion = Get-AzStorageBlob -Container $containerName `
    -Blob $blobName `
    -VersionId "2021-08-31T00:26:41.2273852Z" `
    -Context $ctx

$blobVersion = $blobVersion |
    Set-AzStorageBlobImmutabilityPolicy `
        -ExpiresOn $blobVersion.BlobProperties.ImmutabilityPolicy.ExpiresOn `
        -PolicyMode Locked
# Get the previous blob version.
$blobVersion = Get-AzStorageBlob -Container $containerName `
    -Blob $blobName `
    -VersionId "2021-08-31T00:26:41.2273852Z" `
    -Context $ctx

$blobVersion = $blobVersion |
    Set-AzStorageBlobImmutabilityPolicy `
        -ExpiresOn $blobVersion.BlobProperties.ImmutabilityPolicy.ExpiresOn `
        -PolicyMode Locked
To lock a policy with PowerShell, call theaz storage blob immutability-policy setcommand and set the--policy-modeparameter toLocked. You can also change the expiry at the time that you lock the policy.
--policy-mode
az storage blob immutability-policy set \
    --expiry-time 2021-10-0T18:00:00Z \
    --policy-mode Locked \
    --container <container> \
    --name <blob-version> \
    --account-name <storage-account> \
    --auth-mode login
az storage blob immutability-policy set \
    --expiry-time 2021-10-0T18:00:00Z \
    --policy-mode Locked \
    --container <container> \
    --name <blob-version> \
    --account-name <storage-account> \
    --auth-mode login
Configure or clear a legal hold
A legal hold stores immutable data until the legal hold is explicitly cleared. To learn more about legal hold policies, seeLegal holds for immutable blob data.
To configure a legal hold on a blob version, you must first enable version-level immutability support on the storage account or container. For more information, seeEnable support for version-level immutability.
Portal
PowerShell
Azure CLI
To configure a legal hold on a blob version with the Azure portal, follow these steps:
Locate the target version, which may be the current version or a previous version of a blob. In the context menu of the target version, chooseAccess policy.
Locate the target version, which may be the current version or a previous version of a blob. In the context menu of the target version, chooseAccess policy.
Under theImmutable blob versionssection, selectAdd policy.
Under theImmutable blob versionssection, selectAdd policy.
ChooseLegal holdas the policy type, and selectOKto apply it.
ChooseLegal holdas the policy type, and selectOKto apply it.
The following image shows a current version of a blob with both a time-based retention policy and legal hold configured.

To clear a legal hold, navigate to theAccess policydialog, in the context menu, chooseDelete.
To configure or clear a legal hold on a blob version with PowerShell, call theSet-AzStorageBlobLegalHoldcommand.
# Set a legal hold
Set-AzStorageBlobLegalHold -Container <container> `
    -Blob <blob-version> `
    -Context $ctx `
    -EnableLegalHold

# Clear a legal hold
Set-AzStorageBlobLegalHold -Container <container> `
    -Blob <blob-version> `
    -Context $ctx `
    -DisableLegalHold
# Set a legal hold
Set-AzStorageBlobLegalHold -Container <container> `
    -Blob <blob-version> `
    -Context $ctx `
    -EnableLegalHold

# Clear a legal hold
Set-AzStorageBlobLegalHold -Container <container> `
    -Blob <blob-version> `
    -Context $ctx `
    -DisableLegalHold
To configure or clear a legal hold on a blob version with Azure CLI, call theaz storage blob set-legal-holdcommand.
# Set a legal hold
az storage blob set-legal-hold \
    --legal-hold \
    --container <container> \
    --name <blob-version> \
    --account-name <account-name> \
    --auth-mode login

# Clear a legal hold
az storage blob set-legal-hold \
    --legal-hold false \
    --container <container> \
    --name <blob-version> \
    --account-name <account-name> \
    --auth-mode login
# Set a legal hold
az storage blob set-legal-hold \
    --legal-hold \
    --container <container> \
    --name <blob-version> \
    --account-name <account-name> \
    --auth-mode login

# Clear a legal hold
az storage blob set-legal-hold \
    --legal-hold false \
    --container <container> \
    --name <blob-version> \
    --account-name <account-name> \
    --auth-mode login
Next steps
Store business-critical blob data with immutable storage
Time-based retention policies for immutable blob data
Legal holds for immutable blob data
Feedback
Was this page helpful?
Additional resources