Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Use the Azure Key Vault provider for Secrets Store CSI Driver in an Azure Kubernetes Service (AKS) cluster
Article
2024-08-01
22 contributors
In this article
The Azure Key Vault provider for Secrets Store CSI Driver allows for the integration of an Azure Key Vault as a secret store with an Azure Kubernetes Service (AKS) cluster via aCSI volume.
Features
Mounts secrets, keys, and certificates to a pod using a CSI volume.
Supports CSI inline volumes.
Supports mounting multiple secrets store objects as a single volume.
Supports pod portability with theSecretProviderClassCRD.
SecretProviderClass
Supports Windows containers.
Syncs with Kubernetes secrets.
Supports autorotation of mounted contents and synced Kubernetes secrets.
Limitations
A container usingsubPath volume mountdoesn't receive secret updates when it's rotated. For more information, seeSecrets Store CSI Driver known limitations.
Prerequisites
If you don't have an Azure subscription, create afree accountbefore you begin.
Check that your version of the Azure CLI is 2.30.0 or later. If it's an earlier version,install the latest version.
If you're restricting Ingress to the cluster, make sure ports9808and8095are open.
The minimum recommended Kubernetes version is based on therolling Kubernetes version support window. Make sure you're running versionN-2or later.
Create an AKS cluster with Azure Key Vault provider for Secrets Store CSI Driver support
Create an Azure resource group using theaz group createcommand.az group create --name myResourceGroup --location eastus2
Create an Azure resource group using theaz group createcommand.
az group create
az group create --name myResourceGroup --location eastus2
az group create --name myResourceGroup --location eastus2
Create an AKS cluster with Azure Key Vault provider for Secrets Store CSI Driver capability using theaz aks createcommand with the--enable-addons azure-keyvault-secrets-providerparameter. The add-on creates a user-assigned managed identity you can use to authenticate to your key vault. The following example creates an AKS cluster with the Azure Key Vault provider for Secrets Store CSI Driver enabled.NoteIf you want to use Microsoft Entra Workload ID, you must also use the--enable-oidc-issuerand--enable-workload-identityparameters, such as in the following example:az aks create --name myAKSCluster --resource-group myResourceGroup --enable-addons azure-keyvault-secrets-provider --enable-oidc-issuer --enable-workload-identity --generate-ssh-keysaz aks create \
    --name myAKSCluster \
    --resource-group myResourceGroup \
    --enable-addons azure-keyvault-secrets-provider \
    --generate-ssh-keys
Create an AKS cluster with Azure Key Vault provider for Secrets Store CSI Driver capability using theaz aks createcommand with the--enable-addons azure-keyvault-secrets-providerparameter. The add-on creates a user-assigned managed identity you can use to authenticate to your key vault. The following example creates an AKS cluster with the Azure Key Vault provider for Secrets Store CSI Driver enabled.
az aks create
--enable-addons azure-keyvault-secrets-provider
Note
If you want to use Microsoft Entra Workload ID, you must also use the--enable-oidc-issuerand--enable-workload-identityparameters, such as in the following example:
--enable-oidc-issuer
--enable-workload-identity
az aks create --name myAKSCluster --resource-group myResourceGroup --enable-addons azure-keyvault-secrets-provider --enable-oidc-issuer --enable-workload-identity --generate-ssh-keys
az aks create --name myAKSCluster --resource-group myResourceGroup --enable-addons azure-keyvault-secrets-provider --enable-oidc-issuer --enable-workload-identity --generate-ssh-keys
az aks create \
    --name myAKSCluster \
    --resource-group myResourceGroup \
    --enable-addons azure-keyvault-secrets-provider \
    --generate-ssh-keys
az aks create \
    --name myAKSCluster \
    --resource-group myResourceGroup \
    --enable-addons azure-keyvault-secrets-provider \
    --generate-ssh-keys
The previous command creates a user-assigned managed identity,azureKeyvaultSecretsProvider, to access Azure resources. The following example uses this identity to connect to the key vault that stores the secrets, but you can also use otheridentity access methods. Take note of the identity'sclientIdin the output....,
 "addonProfiles": {
    "azureKeyvaultSecretsProvider": {
      ...,
      "identity": {
        "clientId": "<client-id>",
        ...
      }
    }
The previous command creates a user-assigned managed identity,azureKeyvaultSecretsProvider, to access Azure resources. The following example uses this identity to connect to the key vault that stores the secrets, but you can also use otheridentity access methods. Take note of the identity'sclientIdin the output.
azureKeyvaultSecretsProvider
clientId
...,
 "addonProfiles": {
    "azureKeyvaultSecretsProvider": {
      ...,
      "identity": {
        "clientId": "<client-id>",
        ...
      }
    }
...,
 "addonProfiles": {
    "azureKeyvaultSecretsProvider": {
      ...,
      "identity": {
        "clientId": "<client-id>",
        ...
      }
    }
Note
After you enable this feature, AKS creates a managed identity namedazurekeyvaultsecretsprovider-xxxin the node resource group and assigns it to the Virtual Machine Scale Sets (VMSS) automatically. You can use this managed identity or your own managed identity to access the key vault. It's not supported to prevent creation of the identity.
azurekeyvaultsecretsprovider-xxx
Upgrade an existing AKS cluster with Azure Key Vault provider for Secrets Store CSI Driver support
Upgrade an existing AKS cluster with Azure Key Vault provider for Secrets Store CSI Driver capability using theaz aks enable-addonscommand and enable theazure-keyvault-secrets-provideradd-on. The add-on creates a user-assigned managed identity you can use to authenticate to your key vault.az aks enable-addons --addons azure-keyvault-secrets-provider --name myAKSCluster --resource-group myResourceGroup
Upgrade an existing AKS cluster with Azure Key Vault provider for Secrets Store CSI Driver capability using theaz aks enable-addonscommand and enable theazure-keyvault-secrets-provideradd-on. The add-on creates a user-assigned managed identity you can use to authenticate to your key vault.
az aks enable-addons
azure-keyvault-secrets-provider
az aks enable-addons --addons azure-keyvault-secrets-provider --name myAKSCluster --resource-group myResourceGroup
az aks enable-addons --addons azure-keyvault-secrets-provider --name myAKSCluster --resource-group myResourceGroup
Note
After you enable this feature, AKS creates a managed identity namedazurekeyvaultsecretsprovider-xxxin the node resource group and assigns it to the Virtual Machine Scale Sets (VMSS) automatically. You can use this managed identity or your own managed identity to access the key vault. It's not supported to prevent creation of the identity.
azurekeyvaultsecretsprovider-xxx
Verify the Azure Key Vault provider for Secrets Store CSI Driver installation
Get the AKS cluster credentials using the [az aks get-credentials][az-aks-get-credentials] command.az aks get-credentials --name myAKSCluster --resource-group myResourceGroup
Get the AKS cluster credentials using the [az aks get-credentials][az-aks-get-credentials] command.
az aks get-credentials
az aks get-credentials --name myAKSCluster --resource-group myResourceGroup
az aks get-credentials --name myAKSCluster --resource-group myResourceGroup
Verify the installation is finished using thekubectl get podscommand, which lists all pods with thesecrets-store-csi-driverandsecrets-store-provider-azurelabels in the kube-system namespace.kubectl get pods -n kube-system -l 'app in (secrets-store-csi-driver,secrets-store-provider-azure)'Your output should look similar to the following example output:NAME                                     READY   STATUS    RESTARTS   AGE
aks-secrets-store-csi-driver-4vpkj       3/3     Running   2          4m25s
aks-secrets-store-csi-driver-ctjq6       3/3     Running   2          4m21s
aks-secrets-store-csi-driver-tlvlq       3/3     Running   2          4m24s
aks-secrets-store-provider-azure-5p4nb   1/1     Running   0          4m21s
aks-secrets-store-provider-azure-6pqmv   1/1     Running   0          4m24s
aks-secrets-store-provider-azure-f5qlm   1/1     Running   0          4m25s
Verify the installation is finished using thekubectl get podscommand, which lists all pods with thesecrets-store-csi-driverandsecrets-store-provider-azurelabels in the kube-system namespace.
kubectl get pods
secrets-store-csi-driver
secrets-store-provider-azure
kubectl get pods -n kube-system -l 'app in (secrets-store-csi-driver,secrets-store-provider-azure)'
kubectl get pods -n kube-system -l 'app in (secrets-store-csi-driver,secrets-store-provider-azure)'
Your output should look similar to the following example output:
NAME                                     READY   STATUS    RESTARTS   AGE
aks-secrets-store-csi-driver-4vpkj       3/3     Running   2          4m25s
aks-secrets-store-csi-driver-ctjq6       3/3     Running   2          4m21s
aks-secrets-store-csi-driver-tlvlq       3/3     Running   2          4m24s
aks-secrets-store-provider-azure-5p4nb   1/1     Running   0          4m21s
aks-secrets-store-provider-azure-6pqmv   1/1     Running   0          4m24s
aks-secrets-store-provider-azure-f5qlm   1/1     Running   0          4m25s
NAME                                     READY   STATUS    RESTARTS   AGE
aks-secrets-store-csi-driver-4vpkj       3/3     Running   2          4m25s
aks-secrets-store-csi-driver-ctjq6       3/3     Running   2          4m21s
aks-secrets-store-csi-driver-tlvlq       3/3     Running   2          4m24s
aks-secrets-store-provider-azure-5p4nb   1/1     Running   0          4m21s
aks-secrets-store-provider-azure-6pqmv   1/1     Running   0          4m24s
aks-secrets-store-provider-azure-f5qlm   1/1     Running   0          4m25s
Verify that each node in your cluster's node pool has a Secrets Store CSI Driver pod and a Secrets Store Provider Azure pod running.
Verify that each node in your cluster's node pool has a Secrets Store CSI Driver pod and a Secrets Store Provider Azure pod running.
Create or use an existing Azure Key Vault
Create or update a key vault with Azure role-based access control (Azure RBAC) enabled using theaz keyvault createcommand or theaz keyvault updatecommand with the--enable-rbac-authorizationflag. The name of the key vault must be globally unique. For more details on key vault permission models and Azure RBAC, seeProvide access to Key Vault keys, certificates, and secrets with an Azure role-based access control## Create a new Azure key vault
az keyvault create --name <keyvault-name> --resource-group myResourceGroup --location eastus2 --enable-rbac-authorization

## Update an existing Azure key vault
az keyvault update --name <keyvault-name> --resource-group myResourceGroup --location eastus2 --enable-rbac-authorization
Create or update a key vault with Azure role-based access control (Azure RBAC) enabled using theaz keyvault createcommand or theaz keyvault updatecommand with the--enable-rbac-authorizationflag. The name of the key vault must be globally unique. For more details on key vault permission models and Azure RBAC, seeProvide access to Key Vault keys, certificates, and secrets with an Azure role-based access control
az keyvault create
az keyvault update
--enable-rbac-authorization
## Create a new Azure key vault
az keyvault create --name <keyvault-name> --resource-group myResourceGroup --location eastus2 --enable-rbac-authorization

## Update an existing Azure key vault
az keyvault update --name <keyvault-name> --resource-group myResourceGroup --location eastus2 --enable-rbac-authorization
## Create a new Azure key vault
az keyvault create --name <keyvault-name> --resource-group myResourceGroup --location eastus2 --enable-rbac-authorization

## Update an existing Azure key vault
az keyvault update --name <keyvault-name> --resource-group myResourceGroup --location eastus2 --enable-rbac-authorization
Your key vault can store keys, secrets, and certificates. In this example, use theaz keyvault secret setcommand to set a plain-text secret calledExampleSecret.az keyvault secret set --vault-name <keyvault-name> --name ExampleSecret --value MyAKSExampleSecret
Your key vault can store keys, secrets, and certificates. In this example, use theaz keyvault secret setcommand to set a plain-text secret calledExampleSecret.
az keyvault secret set
ExampleSecret
az keyvault secret set --vault-name <keyvault-name> --name ExampleSecret --value MyAKSExampleSecret
az keyvault secret set --vault-name <keyvault-name> --name ExampleSecret --value MyAKSExampleSecret
Take note of the following properties for future use:The name of the secret object in the key vaultThe object type (secret, key, or certificate)The name of your key vault resourceThe Azure tenant ID of the subscription
Take note of the following properties for future use:
The name of the secret object in the key vault
The object type (secret, key, or certificate)
The name of your key vault resource
The Azure tenant ID of the subscription
Next steps
In this article, you learned how to use the Azure Key Vault provider for Secrets Store CSI Driver in an AKS cluster. You now need to provide an identity to access the Azure Key Vault. To learn how, continue to the next article.
Provide an identity to access the Azure Key Vault provider for Secrets Store CSI Driver in AKS
Azure Kubernetes Service

Additional resources