Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Code and test Azure Functions locally
Article
2025-03-21
17 contributors
In this article
Whenever possible, you should create and validate your Azure Functions code project in a local development environment. Azure Functions Core Tools provides a local runtime version of Azure Functions that integrates with popular development tools for an integrated development, debugging, and deployments. Your local functions can even connect to live Azure services.
This article provides some shared guidance for local development, such as working with thelocal.settings.json file. It also links to development environment-specific guidance.
Tip
You can find detailed information about how to develop functions locally in the linked IDE-specific guidance articles.
Local development environments
The way in which you develop functions on your local computer depends on yourlanguageand tooling preferences. Make sure to choose your preferred language at thetop of the article.
Tip
All local development relies on Azure Functions Core Tools to provide the Functions runtime for debugging in a local environment.
You can use these development environments to code functions locally in your preferred language:
Each of these local development environments lets you create function app projects and use predefined function templates to create new functions. Each uses the Core Tools so that you can test and debug your functions against the real Functions runtime on your own machine just as you would any other app. You can also publish your function app project from any of these environments to Azure.
Local project files
A Functions project directory contains the following files in the project root folder, regardless of language:
Other files in the project depend on your language and specific functions. For more information, see the developer guide for your language.
Local settings file
Thelocal.settings.jsonfile stores app settings and settings used by local development tools. Settings in thelocal.settings.jsonfile are used only when you're running your project locally. When you publish your project to Azure, be sure to also add any required settings to the app settings for the function app.
local.settings.json
local.settings.json
Important
Because thelocal.settings.jsonfile might contain secrets, such as connection strings, you should use caution committing to source control. Tools that support Functions provide ways to synchronize settings in thelocal.settings.jsonfile with theapp settingsin the function app to which your project is deployed.
local.settings.json
local.settings.json
Thelocal.settings.jsonfile has this structure:
local.settings.json
{
  "IsEncrypted": false,
  "Values": {
    "FUNCTIONS_WORKER_RUNTIME": "<language worker>",
    "AzureWebJobsStorage": "<connection-string>",
    "MyBindingConnection": "<binding-connection-string>",
    "AzureWebJobs.HttpExample.Disabled": "true"
  },
  "Host": {
    "LocalHttpPort": 7071,
    "CORS": "*",
    "CORSCredentials": false
  },
  "ConnectionStrings": {
    "SQLConnectionString": "<sqlclient-connection-string>"
  }
}
{
  "IsEncrypted": false,
  "Values": {
    "FUNCTIONS_WORKER_RUNTIME": "<language worker>",
    "AzureWebJobsStorage": "<connection-string>",
    "MyBindingConnection": "<binding-connection-string>",
    "AzureWebJobs.HttpExample.Disabled": "true"
  },
  "Host": {
    "LocalHttpPort": 7071,
    "CORS": "*",
    "CORSCredentials": false
  },
  "ConnectionStrings": {
    "SQLConnectionString": "<sqlclient-connection-string>"
  }
}
These settings are supported when you run projects locally:
IsEncrypted
true
func settings
false
func settings decrypt
Values
AzureWebJobsStorage
Connection
Values
__
:
Host
LocalHttpPort
func host start
func run
--port
host start --port <your-port-number>
CORS
CORSCredentials
true
withCredentials
ConnectionStrings
ConnectionStrings
Connection strings
SqlConnection
The following application settings can be included in theValuesarray when running locally:
Values
AzureWebJobsStorage
UseDevelopmentStorage=true
AzureWebJobsStorage
AzureWebJobsStorage
UseDevelopmentStorage=true
AzureWebJobs.<FUNCTION_NAME>.Disabled
true
false
"AzureWebJobs.<FUNCTION_NAME>.Disabled": "true"
<FUNCTION_NAME>
FUNCTIONS_WORKER_RUNTIME
dotnet
dotnet-isolated
node
java
powershell
python
FUNCTIONS_WORKER_RUNTIME
FUNCTIONS_WORKER_RUNTIME_VERSION
~7
powerShellVersion
Synchronize settings
When you develop your functions locally, any local settings required by your app must also be present in app settings of the function app to which your code is deployed. You might also need to download current settings from the function app to your local project. While you canmanually configure app settings in the Azure portal, the following tools also let you synchronize app settings with local settings in your project:
Visual Studio Code
Visual Studio
Azure Functions Core Tools
Triggers and bindings
When you develop your functions locally, you need to take trigger and binding behaviors into consideration. For HTTP triggers, you can call the HTTP endpoint on the local computer, usinghttp://localhost/. For non-HTTP triggered functions, there are several options to run locally:
http://localhost/
The easiest way to test bindings during local development is to use connection strings that target live Azure services. You can target live services by adding the appropriate connection string settings in theValuesarray in the local.settings.json file. When you do this, local executions during testing might affect your production services. Instead, consider setting-up separate services to use during development and testing, and then switch to different services during production.
Values
For storage-based triggers, you can use alocal storage emulator.
You can manually run non-HTTP trigger functions by using special administrator endpoints. For more information, seeManually run a non-HTTP-triggered function.
During local testing, you must be running the host provided by Core Tools (func.exe) locally. For more information, seeAzure Functions Core Tools.
HTTP test tools
During development, it's easy to call any of your function endpoints from a web browser when they support the HTTP GET method. However, for other HTTP methods that support payloads, such as POST or PUT, you need to use an HTTP test tool to create and send these HTTP requests to your function endpoints.
Caution
For scenarios where your requests must include sensitive data, make sure to use a tool that protects your data and reduces the risk of exposing any sensitive data to the public. Sensitive data you should protect might include: credentials, secrets, access tokens, API keys, geolocation data, even personal data.
You can keep your data secure by choosing an HTTP test tool that works either offline or locally, doesn't sync your data to the cloud, and doesn't require that you sign in to an online account. Some tools can also protect your data from accidental exposure by implementing specific security features.
Avoid using tools that centrally store your HTTP request history (including sensitive information), don't follow best security practices, or don't respect data privacy concerns.
Consider using one of these tools for securely sending HTTP requests to your function endpoints:
Visual Studio Codewith anextension from Visual Studio Marketplace, such asREST Client
PowerShell Invoke-RestMethod
Microsoft Edge - Network Console tool
Bruno
curl
Local storage emulator
During local development, you can use the localAzurite emulatorwhen testing functions with Azure Storage bindings (Queue Storage, Blob Storage, and Table Storage), without having to connect to remote storage services. Azurite integrates with Visual Studio Code and Visual Studio, and you can also run it from the command prompt using npm. For more information, seeUse the Azurite emulator for local Azure Storage development.
The following setting in theValuescollection of the local.settings.json file tells the local Functions host to use Azurite for the defaultAzureWebJobsStorageconnection:
Values
AzureWebJobsStorage
"AzureWebJobsStorage": "UseDevelopmentStorage=true"
"AzureWebJobsStorage": "UseDevelopmentStorage=true"
With this setting value, any Azure Storage trigger or binding that usesAzureWebJobsStorageas its connection connects to Azurite when running locally. Keep these considerations in mind when using storage emulation during local execution:
AzureWebJobsStorage
You must have Azurite installed and running.
You should test with an actual storage connection to Azure services before publishing to Azure.
When you publish your project, don't publish theAzureWebJobsStoragesetting asUseDevelopmentStorage=true. In Azure, theAzureWebJobsStoragesetting must always be the connection string of the storage account used by your function app. For more information, seeAzureWebJobsStorage.
AzureWebJobsStorage
UseDevelopmentStorage=true
AzureWebJobsStorage
AzureWebJobsStorage
Related articles
To learn more about local development of functions using Visual Studio, seeDevelop Azure Functions using Visual Studio.
To learn more about local development of functions using Visual Studio Code on a Mac, Linux, or Windows computer, seeDevelop Azure Functions by using Visual Studio Code.
To learn more about developing functions from the command prompt or terminal, seeWork with Azure Functions Core Tools.
Feedback
Was this page helpful?
Additional resources