Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
VM Applications overview
Article
2025-03-14
16 contributors
In this article
VM Applications are a resource type in Azure Compute Gallery (formerly known as Shared Image Gallery) that simplifies management, sharing, and global distribution of applications for your virtual machines.
While you can create an image of a VM with apps preinstalled, you would need to update your image each time you have application changes. Separating your application installation from your VM images means thereâs no need to publish a new image for every line of code change.
Application packages provide benefits over other deployment and packaging methods:
VM Applications have support forAzure Policies
VM Applications have support forAzure Policies
Grouping and versioning of your packages
Grouping and versioning of your packages
VM applications can be globally replicated to be closer to your infrastructure, so you donât need to use AzCopy or other storage copy mechanisms to copy the bits across Azure regions.
VM applications can be globally replicated to be closer to your infrastructure, so you donât need to use AzCopy or other storage copy mechanisms to copy the bits across Azure regions.
Sharing with other users through Azure Role Based Access Control (RBAC)
Sharing with other users through Azure Role Based Access Control (RBAC)
Support for virtual machines, and both flexible and uniform scale sets
Support for virtual machines, and both flexible and uniform scale sets
If you have Network Security Group (NSG) rules applied on your VM or scale set, downloading the packages from an internet repository might not be possible. And with storage accounts, downloading packages onto locked-down VMs would require setting up private links.
If you have Network Security Group (NSG) rules applied on your VM or scale set, downloading the packages from an internet repository might not be possible. And with storage accounts, downloading packages onto locked-down VMs would require setting up private links.
Support for Block Blobs: This feature allows the handling of large files efficiently by breaking them into smaller, manageable blocks. Ideal for uploading large amounts of data, streaming, and background uploading.
Support for Block Blobs: This feature allows the handling of large files efficiently by breaking them into smaller, manageable blocks. Ideal for uploading large amounts of data, streaming, and background uploading.
What are VM app packages?
The VM application packages use multiple resource types:
Limitations
No more than 3 replicas per region: When you're creating a VM Application version, the maximum number of replicas per region is three.
No more than 3 replicas per region: When you're creating a VM Application version, the maximum number of replicas per region is three.
Storage with public access and SAS URI with read privilege:The storage account needs to have public level access and use a SAS URI with read privilege, as other restriction levels fail deployments. SAS Tokens can be bypassed by publishing the artifact on the storage account by allowing anonymous access.
Storage with public access and SAS URI with read privilege:The storage account needs to have public level access and use a SAS URI with read privilege, as other restriction levels fail deployments. SAS Tokens can be bypassed by publishing the artifact on the storage account by allowing anonymous access.
System Assigned Managed identity:The compute galleries system managed assigned identity cannot be used to access a blob in the storage account.
System Assigned Managed identity:The compute galleries system managed assigned identity cannot be used to access a blob in the storage account.
Retrying failed installations: Currently, the only way to retry a failed installation is to remove the application from the profile, then add it back.
Retrying failed installations: Currently, the only way to retry a failed installation is to remove the application from the profile, then add it back.
Only 25 applications per VM: No more than 25 applications may be deployed to a VM at any point.
Only 25 applications per VM: No more than 25 applications may be deployed to a VM at any point.
2GB application size: The maximum file size of an application version is 2 GB.
2GB application size: The maximum file size of an application version is 2 GB.
No guarantees on reboots in your script: If your script requires a reboot, the recommendation is to place that application last during deployment. While the code attempts to handle reboots, it may fail.
No guarantees on reboots in your script: If your script requires a reboot, the recommendation is to place that application last during deployment. While the code attempts to handle reboots, it may fail.
Requires a VM Agent: The VM agent must exist on the VM and be able to receive goal states.
Requires a VM Agent: The VM agent must exist on the VM and be able to receive goal states.
Multiple versions of same application on the same VM: You can't have multiple versions of the same application on a VM.
Multiple versions of same application on the same VM: You can't have multiple versions of the same application on a VM.
Move operations currently not supported: Moving VMs with VM Apps to other resource groups aren't supported at this time.
Move operations currently not supported: Moving VMs with VM Apps to other resource groups aren't supported at this time.
Note
For Azure Compute Gallery and VM Applications, Storage SAS can be deleted after replication. However, any subsequent update operation will require a valid SAS.
Cost
There's no extra charge for using VM Application Packages, but you're charged for the following resources:
Storage costs of storing each package and any replicas.
Network egress charges for replication of the first image version from the source region to the replicated regions. Subsequent replicas are handled within the region, so there are no extra charges.
For more information on network egress, seeBandwidth pricing.
VM applications
The VM application resource defines the following about your VM application:
Azure Compute Gallery where the VM application is stored
Name of the application
Supported OS type like Linux or Windows
A description of the VM application
VM application versions
VM application versions are the deployable resource. Versions are defined with the following properties:
Version number
Link to the application package file in a storage account
Install string for installing the application
Remove string to show how to properly remove the app
Package file name to use when it's downloaded to the VM
Configuration file name to be used to configure the app on the VM
A link to the configuration file for the VM application, which you can include license files
Update string for how to update the VM application to a newer version
End-of-life date. End-of-life dates are informational; you're still able to deploy VM application versions past the end-of-life date.
Exclude from latest. You can keep a version from being used as the latest version of the application.
Target regions for replication
Replica count per region
Download directory
The download location of the application package and the configuration files are:
Linux:/var/lib/waagent/Microsoft.CPlat.Core.VMApplicationManagerLinux/<appname>/<app version>
/var/lib/waagent/Microsoft.CPlat.Core.VMApplicationManagerLinux/<appname>/<app version>
Windows:C:\Packages\Plugins\Microsoft.CPlat.Core.VMApplicationManagerWindows\1.0.9\Downloads\<appname>\<app version>
C:\Packages\Plugins\Microsoft.CPlat.Core.VMApplicationManagerWindows\1.0.9\Downloads\<appname>\<app version>
The install/update/remove commands should be written assuming the application package and the configuration file are in the current directory.
File naming
When the application file gets downloaded to the VM, it's renamed as "MyVmApp" (no extension). This is because the VM isn't aware of your package's original name or extension. It utilizes the only name it has, which is the application name itself - "MyVmApp".
Here are a few alternatives to navigate this issue:
You can modify your script to include a command for renaming the file before execution:
move .\\MyVmApp .\\MyApp.exe & MyApp.exe /S
move .\\MyVmApp .\\MyApp.exe & MyApp.exe /S
You can also use thepackageFileName(and the correspondingconfigFileName) property to instruct us what to rename your file. For example, setting it to "MyApp.exe" will make your install script only need to be:
packageFileName
configFileName
MyAppe.exe /S
MyAppe.exe /S
Tip
If your blob was originally named "myApp.exe" instead of "myapp", then the above script would have worked without setting thepackageFileNameproperty.
packageFileName
Command interpreter
The default command interpreters are:
Linux:/bin/bash
/bin/bash
Windows:cmd.exe
cmd.exe
It's possible to use a different interpreter like Chocolatey or PowerShell, as long as it's installed on the machine, by calling the executable and passing the command to it. For example, to have your command run in PowerShell on Windows instead of cmd, you can passpowershell.exe -Command '<powershell commmand>'
powershell.exe -Command '<powershell commmand>'
How updates are handled
When you update an application version on a VM or Virtual Machine Scale Sets, the update command you provided during deployment is used. If the updated version doesn't have an update command, then the current version is removed and the new version is installed.
Update commands should be written with the expectation that it could be updating from any older version of the VM application.
Tips for creating VM Applications on Linux
Third party applications for Linux can be packaged in a few ways. Let's explore how to handle creating the install commands for some of the most common.
.tar and .gz files
These files are compressed archives and can be extracted to a desired location. Check the installation instructions for the original package to in case they need to be extracted to a specific location. If .tar.gz file contains source code, see the instructions for the package for how to install from source.
Example to install command to installgolangon a Linux machine:
golang
sudo tar -C /usr/local -xzf go_linux
sudo tar -C /usr/local -xzf go_linux
Example remove command:
sudo rm -rf /usr/local/go
sudo rm -rf /usr/local/go
Creating application packages using.deb,.rpm, and other platform specific packages for VMs with restricted internet access
.deb
.rpm
You can download individual packages for platform specific package managers, but they usually don't contain all the dependencies. For these files, you must also include all dependencies in the application package, or have the system package manager download the dependencies through the repositories that are available to the VM. If you're working with a VM with restricted internet access, you must package all the dependencies yourself.
Figuring out the dependencies can be a bit tricky. There are third party tools that can show you the entire dependency tree.
Ubuntu
Red Hat
SUSE
In Ubuntu, you can runsudo apt show <package_name> | grep Dependsto show all the packages that are installed when executing thesudo apt-get install <packge_name>command. Then you can use that output to download all.debfiles to create an archive that can be used as the application package.
sudo apt show <package_name> | grep Depends
sudo apt-get install <packge_name>
.deb
Example, to create a VM application package to install PowerShell for Ubuntu, first run the following commands to enable the repository where PowerShell can be downloaded from and also to identify the package dependencies on a new Ubuntu VM.
# Download the Microsoft repository GPG keys
wget -q "https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/packages-microsoft-prod.deb"
# Register the Microsoft repository GPG keys
sudo dpkg -i packages-microsoft-prod.deb
sudo rm -rf packages-microsoft-prod.deb
sudo apt update
sudo apt show powershell | grep Depends
# Download the Microsoft repository GPG keys
wget -q "https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/packages-microsoft-prod.deb"
# Register the Microsoft repository GPG keys
sudo dpkg -i packages-microsoft-prod.deb
sudo rm -rf packages-microsoft-prod.deb
sudo apt update
sudo apt show powershell | grep Depends
Check the output of the lineDependswhich lists the following packages:
Depends: libc6, lib32gcc-s1, libgssapi-krb5-2, libstdc++6, zlib1g, libicu72|libicu71|libicu70|libicu69|libicu68|libicu67|libicu66|libicu65|libicu63|libicu60|libicu57|libicu55|libicu52, libssl3|libssl1.1|libssl1.0.2|libssl1.
Depends: libc6, lib32gcc-s1, libgssapi-krb5-2, libstdc++6, zlib1g, libicu72|libicu71|libicu70|libicu69|libicu68|libicu67|libicu66|libicu65|libicu63|libicu60|libicu57|libicu55|libicu52, libssl3|libssl1.1|libssl1.0.2|libssl1.
Download each of these files usingsudo apt-get download <package_name>and create a tar compressed archive with all files.
sudo apt-get download <package_name>
Ubuntu 18.04:
mkdir /tmp/powershell
cd /tmp/powershell
sudo apt-get download libc6
sudo apt-get download lib32gcc-s1
sudo apt-get download libgssapi-krb5-2
sudo apt-get download libstdc++6
sudo apt-get download zlib1g
sudo apt-get download libssl1.1
sudo apt-get download libicu60
sudo apt-get download powershell
sudo tar -cvzf powershell.tar.gz *.deb
mkdir /tmp/powershell
cd /tmp/powershell
sudo apt-get download libc6
sudo apt-get download lib32gcc-s1
sudo apt-get download libgssapi-krb5-2
sudo apt-get download libstdc++6
sudo apt-get download zlib1g
sudo apt-get download libssl1.1
sudo apt-get download libicu60
sudo apt-get download powershell
sudo tar -cvzf powershell.tar.gz *.deb
Ubuntu 20.04:
mkdir /tmp/powershell
cd /tmp/powershell
sudo apt-get download libc6
sudo apt-get download lib32gcc-s1
sudo apt-get download libgssapi-krb5-2
sudo apt-get download libstdc++6
sudo apt-get download zlib1g
sudo apt-get download libssl1.1
sudo apt-get download libicu66
sudo apt-get download powershell
sudo tar -cvzf powershell.tar.gz *.deb
mkdir /tmp/powershell
cd /tmp/powershell
sudo apt-get download libc6
sudo apt-get download lib32gcc-s1
sudo apt-get download libgssapi-krb5-2
sudo apt-get download libstdc++6
sudo apt-get download zlib1g
sudo apt-get download libssl1.1
sudo apt-get download libicu66
sudo apt-get download powershell
sudo tar -cvzf powershell.tar.gz *.deb
Ubuntu 22.04:
mkdir /tmp/powershell
cd /tmp/powershell
sudo apt-get download libc6
sudo apt-get download lib32gcc-s1
sudo apt-get download libgssapi-krb5-2
sudo apt-get download libstdc++6
sudo apt-get download zlib1g
sudo apt-get download libssl3
sudo apt-get download libicu70
sudo apt-get download powershell
sudo tar -cvzf powershell.tar.gz *.deb
mkdir /tmp/powershell
cd /tmp/powershell
sudo apt-get download libc6
sudo apt-get download lib32gcc-s1
sudo apt-get download libgssapi-krb5-2
sudo apt-get download libstdc++6
sudo apt-get download zlib1g
sudo apt-get download libssl3
sudo apt-get download libicu70
sudo apt-get download powershell
sudo tar -cvzf powershell.tar.gz *.deb
This tar archive is the application package file.
The install command in this case is:
sudo tar -xvzf powershell.tar.gz && sudo dpkg -i *.deb
sudo tar -xvzf powershell.tar.gz && sudo dpkg -i *.deb
And the remove command is:
sudo apt remove powershell
sudo apt remove powershell
Usesudo apt autoremoveinstead of explicitly trying to remove all the dependencies. You may have installed other applications with overlapping dependencies, and in that case, an explicit remove command would fail.
sudo apt autoremove
In case you don't want to resolve the dependencies yourself, andaptis able to connect to the repositories, you can install an application with just one.debfile and letapthandle the dependencies.
apt
.deb
apt
Example install command:
dpkg -i <package_name> || apt --fix-broken install -y
dpkg -i <package_name> || apt --fix-broken install -y
In Red Hat, you can runsudo yum deplist <package_name>to show all the packages that are installed when executing thesudo yum install <package_name>command. Then you can use that output to download all.rpmfiles to create an archive that can be used as the application package.
sudo yum deplist <package_name>
sudo yum install <package_name>
.rpm
Example, to create a VM application package to install PowerShell for Red Hat, first run the following commands to enable the repository where PowerShell can be downloaded from and also to identify the package dependencies on a new RHEL VM.
RHEL 7:
# Register the Microsoft RedHat repository
curl https://packages.microsoft.com/config/rhel/7/prod.repo | sudo tee /etc/yum.repos.d/microsoft.repo

sudo yum deplist powershell
# Register the Microsoft RedHat repository
curl https://packages.microsoft.com/config/rhel/7/prod.repo | sudo tee /etc/yum.repos.d/microsoft.repo

sudo yum deplist powershell
RHEL 8:
# Register the Microsoft RedHat repository
curl https://packages.microsoft.com/config/rhel/8/prod.repo | sudo tee /etc/yum.repos.d/microsoft.repo

sudo dnf deplist powershell
# Register the Microsoft RedHat repository
curl https://packages.microsoft.com/config/rhel/8/prod.repo | sudo tee /etc/yum.repos.d/microsoft.repo

sudo dnf deplist powershell
Check the output of each of the dependency entries, the dependencies are named afterprovider::
provider:
dependency: /bin/sh
   provider: bash.x86_64 4.2.46-35.el7_9
  dependency: libicu
   provider: libicu.x86_64 50.2-4.el7_7
   provider: libicu.i686 50.2-4.el7_7
  dependency: openssl-libs
   provider: openssl-libs.x86_64 1:1.0.2k-26.el7_9
   provider: openssl-libs.i686 1:1.0.2k-26.el7_9
dependency: /bin/sh
   provider: bash.x86_64 4.2.46-35.el7_9
  dependency: libicu
   provider: libicu.x86_64 50.2-4.el7_7
   provider: libicu.i686 50.2-4.el7_7
  dependency: openssl-libs
   provider: openssl-libs.x86_64 1:1.0.2k-26.el7_9
   provider: openssl-libs.i686 1:1.0.2k-26.el7_9
Download each of these files usingsudo yum install --downloadonly <package_name>, to download a package when isn't yet installed in the system, orsudo yum reinstall --downloadonly <package_name>, to download a package that's already installed in the system, and create a tar compressed archive with all files.
sudo yum install --downloadonly <package_name>
sudo yum reinstall --downloadonly <package_name>
mkdir /tmp/powershell
cd /tmp/powershell
sudo yum reinstall --downloadonly --downloaddir=/tmp/powershell bash
sudo yum reinstall --downloadonly --downloaddir=/tmp/powershell libicu
sudo yum reinstall --downloadonly --downloaddir=/tmp/powershell openssl-libs
sudo yum install --downloadonly --downloaddir=/tmp/powershell powershell
sudo tar -cvzf powershell.tar.gz *.rpm
mkdir /tmp/powershell
cd /tmp/powershell
sudo yum reinstall --downloadonly --downloaddir=/tmp/powershell bash
sudo yum reinstall --downloadonly --downloaddir=/tmp/powershell libicu
sudo yum reinstall --downloadonly --downloaddir=/tmp/powershell openssl-libs
sudo yum install --downloadonly --downloaddir=/tmp/powershell powershell
sudo tar -cvzf powershell.tar.gz *.rpm
This tar archive is the application package file.
The install command in this case is:
sudo tar -xvzf powershell.tar.gz && sudo yum install *.rpm -y
sudo tar -xvzf powershell.tar.gz && sudo yum install *.rpm -y
And the remove command is:
sudo yum remove powershell
sudo yum remove powershell
In case you don't want to resolve the dependencies yourself and yum/dnf is able to connect to the repositories, you can install an application with just one.rpmfile and let yum/dnf handle the dependencies.
.rpm
Example install command:
yum install <package.rpm> -y
yum install <package.rpm> -y
In SUSE, you can runsudo zypper info --requires <package_name>to show all the packages that are installed when executing thesudo zypper install <package_name>command. Then you can use that output to download all.rpmfiles to create an archive that can be used as the application package.
sudo zypper info --requires <package_name>
sudo zypper install <package_name>
.rpm
Example, to create a VM application package to installazure-clifor SUSE, first run the following commands to enable the repository where Azure CLI can be downloaded from and also to identify the package dependencies on a new SUSE VM.
azure-cli
sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc
sudo zypper addrepo --name 'Azure CLI' --check https://packages.microsoft.com/yumrepos/azure-cli azure-cli
sudo zypper info --requires azure-cli
sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc
sudo zypper addrepo --name 'Azure CLI' --check https://packages.microsoft.com/yumrepos/azure-cli azure-cli
sudo zypper info --requires azure-cli
Check the output afterRequireswhich lists the following packages:
Requires       : [98]
    /usr/bin/python3
    python(abi) = 3.6
    azure-cli-command-modules-nspkg >= 2.0
    azure-cli-nspkg >= 3.0.3
    python3-azure-loganalytics >= 0.1.0
    python3-azure-mgmt-apimanagement >= 0.2.0
    python3-azure-mgmt-authorization >= 0.61.0
    python3-azure-mgmt-batch >= 9.0.0
    python3-azure-mgmt-cognitiveservices >= 6.3.0
    python3-azure-mgmt-containerservice >= 9.4.0
    python3-azure-mgmt-cosmosdb >= 1.0.0
    python3-azure-mgmt-datalake-store >= 0.5.0
    python3-azure-mgmt-deploymentmanager >= 0.2.0
    python3-azure-mgmt-imagebuilder >= 0.4.0
    python3-azure-mgmt-iothubprovisioningservices >= 0.2.0
    python3-azure-mgmt-maps >= 0.1.0
    python3-azure-mgmt-media >= 2.1.0
<truncated>
...
<truncated>
    python3-vsts-cd-manager >= 1.0.2
    python3-websocket-client >= 0.56.0
    python3-xmltodict >= 0.12
    python3-azure-mgmt-keyvault >= 8.0.0
    python3-azure-mgmt-storage >= 16.0.0
    python3-azure-mgmt-billing >= 1.0.0
    python3-azure-mgmt-cdn >= 5.2.0
    python3-azure-mgmt-hdinsight >= 2.0.0
    python3-azure-mgmt-netapp >= 0.14.0
    python3-azure-mgmt-synapse >= 0.5.0
    azure-cli-core = 2.17.1
    python3-azure-batch >= 10.0
    python3-azure-mgmt-compute >= 18.0
    python3-azure-mgmt-containerregistry >= 3.0.0rc16
    python3-azure-mgmt-databoxedge >= 0.2.0
    python3-azure-mgmt-network >= 17.0.0
    python3-azure-mgmt-security >= 0.6.0
Requires       : [98]
    /usr/bin/python3
    python(abi) = 3.6
    azure-cli-command-modules-nspkg >= 2.0
    azure-cli-nspkg >= 3.0.3
    python3-azure-loganalytics >= 0.1.0
    python3-azure-mgmt-apimanagement >= 0.2.0
    python3-azure-mgmt-authorization >= 0.61.0
    python3-azure-mgmt-batch >= 9.0.0
    python3-azure-mgmt-cognitiveservices >= 6.3.0
    python3-azure-mgmt-containerservice >= 9.4.0
    python3-azure-mgmt-cosmosdb >= 1.0.0
    python3-azure-mgmt-datalake-store >= 0.5.0
    python3-azure-mgmt-deploymentmanager >= 0.2.0
    python3-azure-mgmt-imagebuilder >= 0.4.0
    python3-azure-mgmt-iothubprovisioningservices >= 0.2.0
    python3-azure-mgmt-maps >= 0.1.0
    python3-azure-mgmt-media >= 2.1.0
<truncated>
...
<truncated>
    python3-vsts-cd-manager >= 1.0.2
    python3-websocket-client >= 0.56.0
    python3-xmltodict >= 0.12
    python3-azure-mgmt-keyvault >= 8.0.0
    python3-azure-mgmt-storage >= 16.0.0
    python3-azure-mgmt-billing >= 1.0.0
    python3-azure-mgmt-cdn >= 5.2.0
    python3-azure-mgmt-hdinsight >= 2.0.0
    python3-azure-mgmt-netapp >= 0.14.0
    python3-azure-mgmt-synapse >= 0.5.0
    azure-cli-core = 2.17.1
    python3-azure-batch >= 10.0
    python3-azure-mgmt-compute >= 18.0
    python3-azure-mgmt-containerregistry >= 3.0.0rc16
    python3-azure-mgmt-databoxedge >= 0.2.0
    python3-azure-mgmt-network >= 17.0.0
    python3-azure-mgmt-security >= 0.6.0
Download each of these files usingsudo zypper install -f --download-only <package_name>and create a tar compressed archive with all files.
sudo zypper install -f --download-only <package_name>
mkdir /tmp/azurecli
cd /tmp/azurecli
for i in $(sudo zypper info --requires azure-cli | sed -n -e '/Requires*/,$p' | grep -v "Requires" | awk -F '[>=]' '{print $1}') ; do sudo zypper --non-interactive --pkg-cache-dir /tmp/azurecli install -f --download-only $i; done
for i in $(sudo find /tmp/azurecli -name "*.rpm") ; do sudo cp $i /tmp/azurecli; done
sudo tar -cvzf azurecli.tar.gz *.rpm
mkdir /tmp/azurecli
cd /tmp/azurecli
for i in $(sudo zypper info --requires azure-cli | sed -n -e '/Requires*/,$p' | grep -v "Requires" | awk -F '[>=]' '{print $1}') ; do sudo zypper --non-interactive --pkg-cache-dir /tmp/azurecli install -f --download-only $i; done
for i in $(sudo find /tmp/azurecli -name "*.rpm") ; do sudo cp $i /tmp/azurecli; done
sudo tar -cvzf azurecli.tar.gz *.rpm
This tar archive is the application package file.
The install command in this case is:
sudo tar -xvzf azurecli.tar.gz && sudo zypper --no-refresh --no-remote --non-interactive install *.rpm
sudo tar -xvzf azurecli.tar.gz && sudo zypper --no-refresh --no-remote --non-interactive install *.rpm
And the remove command is:
sudo zypper remove azure-cli
sudo zypper remove azure-cli
Tips for creating VM Applications on Windows
Most third party applications in Windows are available as .exe or .msi installers. Some are also available as extract and run zip files. Let us look at the best practices for each of them.
.exe installer
Installer executables typically launch a user interface (UI) and require someone to select through the UI. If the installer supports a silent mode parameter, it should be included in your installation string.
Cmd.exe also expects executable files to have the extension.exe, so you need to rename the file to have the.exeextension.
.exe
.exe
If I want to create a VM application package formyApp.exe, which ships as an executable, my VM Application is called 'myApp', so I write the command assuming the application package is in the current directory:
myApp.exe
"move .\\myApp .\\myApp.exe & myApp.exe /S -config myApp_config"
"move .\\myApp .\\myApp.exe & myApp.exe /S -config myApp_config"
If the installer executable file doesn't support an uninstall parameter, you can sometimes look up the registry on a test machine to know where the uninstaller is located.
In the registry, the uninstall string is stored inComputer\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\<installed application name>\UninstallStringso I would use the contents as my remove command:
Computer\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\<installed application name>\UninstallString
'\"C:\\Program Files\\myApp\\uninstall\\helper.exe\" /S'
'\"C:\\Program Files\\myApp\\uninstall\\helper.exe\" /S'
.msi installer
For command line execution of.msiinstallers, the commands to install or remove an application should usemsiexec. Typically,msiexecruns as its own separate process andcmddoesn't wait for it to complete, which can lead to problems when installing more than one VM application.  Thestartcommand can be used withmsiexecto ensure that the installation completes before the command returns. For example:
.msi
msiexec
msiexec
cmd
start
msiexec
start /wait %windir%\\system32\\msiexec.exe /i myapp /quiet /forcerestart /log myapp_install.log
start /wait %windir%\\system32\\msiexec.exe /i myapp /quiet /forcerestart /log myapp_install.log
Example remove command:
start /wait %windir%\\system32\\msiexec.exe /x myapp /quiet /forcerestart /log myapp_uninstall.log
start /wait %windir%\\system32\\msiexec.exe /x myapp /quiet /forcerestart /log myapp_uninstall.log
Typically, thestartcommand would be called within a batch script. If used with the/waitparameter, the calling script will be paused until the called process terminates. Once complete, the batch script would check for theerrorlevelvariable set by thestartcommand and exit as follows:
start
/wait
errorlevel
start
start /wait %windir%\\system32\\msiexec.exe /i myapp /quiet /forcerestart /log myapp_install.log
if %errorlevel% neq 0 exit /b %errorlevel%
...
start /wait %windir%\\system32\\msiexec.exe /i myapp /quiet /forcerestart /log myapp_install.log
if %errorlevel% neq 0 exit /b %errorlevel%
...
Zipped files
For .zip or other zipped files, rename and unzip the contents of the application package to the desired destination.
Example install command:
rename myapp myapp.zip && mkdir C:\myapp && powershell.exe -Command "Expand-Archive -path myapp.zip -destinationpath C:\myapp"
rename myapp myapp.zip && mkdir C:\myapp && powershell.exe -Command "Expand-Archive -path myapp.zip -destinationpath C:\myapp"
Example remove command:
rmdir /S /Q C:\\myapp
rmdir /S /Q C:\\myapp
Treat failure as deployment failure
The VM application extension always returns asuccessregardless of whether any VM app failed while being installed/updated/removed. The VM Application extension only reports the extension status as failure when there's a problem with the extension or the underlying infrastructure. This behavior is triggered by the "treat failure as deployment failure" flag, which is set to$falseby default and can be changed to$true. The failure flag can be configured inPowerShellorCLI.
$false
$true
Troubleshooting VM Applications
To know whether a particular VM application was successfully added to the VM instance, check the message of the VM Application extension.
To learn more about getting the status of VM extensions, seeVirtual machine extensions and features for LinuxandVirtual machine extensions and features for Windows.
To get status of VM extensions, useGet-AzVM:
Get-AzVM -name <VM name> -ResourceGroupName <resource group name> -Status | convertto-json -Depth 10
Get-AzVM -name <VM name> -ResourceGroupName <resource group name> -Status | convertto-json -Depth 10
To get status of scale set extensions, useGet-AzVMSS:
$result = Get-AzVmssVM -ResourceGroupName $rgName -VMScaleSetName $vmssName -InstanceView
$resultSummary  = New-Object System.Collections.ArrayList
$result | ForEach-Object {
    $res = @{ instanceId = $_.InstanceId; vmappStatus = $_.InstanceView.Extensions | Where-Object {$_.Name -eq "VMAppExtension"}}
    $resultSummary.Add($res) | Out-Null
}
$resultSummary | convertto-json -depth 5
$result = Get-AzVmssVM -ResourceGroupName $rgName -VMScaleSetName $vmssName -InstanceView
$resultSummary  = New-Object System.Collections.ArrayList
$result | ForEach-Object {
    $res = @{ instanceId = $_.InstanceId; vmappStatus = $_.InstanceView.Extensions | Where-Object {$_.Name -eq "VMAppExtension"}}
    $resultSummary.Add($res) | Out-Null
}
$resultSummary | convertto-json -depth 5
Error messages
latest
Forbidden
int
Next steps
Learn how tocreate and deploy VM application packages.
Feedback
Was this page helpful?
Additional resources