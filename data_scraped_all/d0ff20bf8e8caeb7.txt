Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Quickstart: Deploy a Python (Django, Flask, or FastAPI) web app to Azure App Service
Article
2025-04-24
22 contributors
In this article
In this quickstart, you deploy a Python web app (Django, Flask, or FastAPI) toAzure App Service. Azure App Service is a fully managed web hosting service that supports Python apps hosted in a Linux server environment.
To complete this quickstart, you need:
An Azure account with an active subscription.Create an account for free.
Python 3.9 or higherinstalled locally.
Note
This article contains current instructions on deploying a Python web app using Azure App Service. Python on Windows is no longer supported.
Skip to the end
You can quickly deploy the sample app in this tutorial using Azure Developer CLI and see it running in Azure. Just run the following commands in theAzure Cloud Shellwant, and follow the prompt:
Flask
Django
FastAPI
mkdir flask-quickstart
cd flask-quickstart
azd init --template https://github.com/Azure-Samples/msdocs-python-flask-webapp-quickstart
azd up
mkdir flask-quickstart
cd flask-quickstart
azd init --template https://github.com/Azure-Samples/msdocs-python-flask-webapp-quickstart
azd up
mkdir django-quickstart
cd django-quickstart
azd init --template https://github.com/Azure-Samples/msdocs-python-django-webapp-quickstart
azd up
mkdir django-quickstart
cd django-quickstart
azd init --template https://github.com/Azure-Samples/msdocs-python-django-webapp-quickstart
azd up
mkdir fastapi-quickstart
cd fastapi-quickstart
azd init --template https://github.com/Azure-Samples/msdocs-python-fastapi-webapp-quickstart
azd up
mkdir fastapi-quickstart
cd fastapi-quickstart
azd init --template https://github.com/Azure-Samples/msdocs-python-fastapi-webapp-quickstart
azd up
And, to delete the resources:
azd down
azd down
Sample application
This quickstart can be completed using either Flask, Django, or FastAPI. A sample application in each framework is provided to help you follow along with this quickstart. Download or clone the sample application to your local workstation.
Flask
Django
FastAPI
git clone https://github.com/Azure-Samples/msdocs-python-flask-webapp-quickstart
git clone https://github.com/Azure-Samples/msdocs-python-flask-webapp-quickstart
git clone https://github.com/Azure-Samples/msdocs-python-django-webapp-quickstart
git clone https://github.com/Azure-Samples/msdocs-python-django-webapp-quickstart
git clone https://github.com/Azure-Samples/msdocs-python-fastapi-webapp-quickstart.git
git clone https://github.com/Azure-Samples/msdocs-python-fastapi-webapp-quickstart.git
To run the application locally:
Flask
Django
FastAPI
Go to the application folder:cd msdocs-python-flask-webapp-quickstart
Go to the application folder:
cd msdocs-python-flask-webapp-quickstart
cd msdocs-python-flask-webapp-quickstart
Create a virtual environment for the app:WindowsmacOS/Linuxpy -m venv .venv
.venv\scripts\activatepython3 -m venv .venv
source .venv/bin/activate
Create a virtual environment for the app:
Windows
macOS/Linux
py -m venv .venv
.venv\scripts\activate
py -m venv .venv
.venv\scripts\activate
python3 -m venv .venv
source .venv/bin/activate
python3 -m venv .venv
source .venv/bin/activate
Install the dependencies:pip install -r requirements.txt
Install the dependencies:
pip install -r requirements.txt
pip install -r requirements.txt
Run the app:flask run
Run the app:
flask run
flask run
Browse to the sample application athttp://localhost:5000in a web browser.
Browse to the sample application athttp://localhost:5000in a web browser.
http://localhost:5000

Having issues?Let us know.
Go to the application folder:cd msdocs-python-django-webapp-quickstart
Go to the application folder:
cd msdocs-python-django-webapp-quickstart
cd msdocs-python-django-webapp-quickstart
Create a virtual environment for the app:WindowsmacOS/Linuxpy -m venv .venv
.venv\scripts\activatepython3 -m venv .venv
source .venv/bin/activate
Create a virtual environment for the app:
Windows
macOS/Linux
py -m venv .venv
.venv\scripts\activate
py -m venv .venv
.venv\scripts\activate
python3 -m venv .venv
source .venv/bin/activate
python3 -m venv .venv
source .venv/bin/activate
Install the dependencies:pip install -r requirements.txt
Install the dependencies:
pip install -r requirements.txt
pip install -r requirements.txt
Run the app:python manage.py runserver
Run the app:
python manage.py runserver
python manage.py runserver
Browse to the sample application athttp://localhost:8000in a web browser.
Browse to the sample application athttp://localhost:8000in a web browser.
http://localhost:8000

Having issues?Let us know.
Go to the application folder:cd msdocs-python-fastapi-webapp-quickstart
Go to the application folder:
cd msdocs-python-fastapi-webapp-quickstart
cd msdocs-python-fastapi-webapp-quickstart
Create a virtual environment for the app:WindowsmacOS/Linuxpy -m venv .venv
.venv\scripts\activatepython3 -m venv .venv
source .venv/bin/activate
Create a virtual environment for the app:
Windows
macOS/Linux
py -m venv .venv
.venv\scripts\activate
py -m venv .venv
.venv\scripts\activate
python3 -m venv .venv
source .venv/bin/activate
python3 -m venv .venv
source .venv/bin/activate
Install the dependencies:pip install -r requirements.txt
Install the dependencies:
pip install -r requirements.txt
pip install -r requirements.txt
Run the app:uvicorn main:app --reload
Run the app:
uvicorn main:app --reload
uvicorn main:app --reload
Browse to the sample application athttp://localhost:8000in a web browser.
Browse to the sample application athttp://localhost:8000in a web browser.
http://localhost:8000

Having issues?Let us know.
Create a web app in Azure
To host your application in Azure, you need to create an Azure App Service web app in Azure. You can create a web app using the Azure CLI,VS Code,Azure Tools extension pack, or theAzure portal.
Azure CLI
VS Code
Azure portal
Azure CLI commands can be run on a computer with theAzure CLI installed.
Azure CLI has a commandaz webapp upthat will create the necessary resources and deploy your application in a single step.
az webapp up
If necessary, log in to Azure usingaz login.
az login
az login
Create the webapp and other resources, then deploy your code to Azure usingaz webapp up.
az webapp up --runtime PYTHON:3.13 --sku B1 --logs
az webapp up --runtime PYTHON:3.13 --sku B1 --logs
The--runtimeparameter specifies what version of Python your app is running. This example uses Python 3.13. To list all available runtimes, use the commandaz webapp list-runtimes --os linux --output table.
--runtime
az webapp list-runtimes --os linux --output table
The--skuparameter defines the size (CPU, memory) and cost of the app service plan. This example uses the B1 (Basic) service plan, which will incur a small cost in your Azure subscription. For a full list of App Service plans, view theApp Service pricingpage.
--sku
The--logsflag configures default logging required to enable viewing the log stream immediately after launching the webapp.
--logs
You can optionally specify a name with the argument--name <app-name>. If you don't provide one, then a name will be automatically generated.
--name <app-name>
You can optionally include the argument--location <location-name>where<location_name>is an available Azure region. You can retrieve a list of allowable regions for your Azure account by running theaz appservice list-locationscommand.
--location <location-name>
<location_name>
az appservice list-locations
The command may take a few minutes to complete. While the command is running, it provides messages about creating the resource group, the App Service plan, and the app resource, configuring logging, and doing ZIP deployment. It then gives the message, "You can launch the app at http://<app-name>.azurewebsites.net", which is the app's URL on Azure.
The webapp '<app-name>' doesn't exist
Creating Resource group '<group-name>' ...
Resource group creation complete
Creating AppServicePlan '<app-service-plan-name>' ...
Creating webapp '<app-name>' ...
Configuring default logging for the app, if not already enabled
Creating zip with contents of dir /home/cephas/myExpressApp ...
Getting scm site credentials for zip deployment
Starting zip deployment. This operation can take a while to complete ...
Deployment endpoint responded with status code 202
You can launch the app at http://<app-name>.azurewebsites.net
{
  "URL": "http://<app-name>.azurewebsites.net",
  "appserviceplan": "<app-service-plan-name>",
  "location": "centralus",
  "name": "<app-name>",
  "os": "<os-type>",
  "resourcegroup": "<group-name>",
  "runtime_version": "python|3.13",
  "runtime_version_detected": "0.0",
  "sku": "FREE",
  "src_path": "<your-folder-location>"
}
Note
Theaz webapp upcommand does the following actions:
az webapp up
Create a defaultresource group.
Create a defaultresource group.
Create a defaultApp Service plan.
Create a defaultApp Service plan.
Create an appwith the specified name.
Create an appwith the specified name.
Zip deployall files from the current working directory,with build automation enabled.
Zip deployall files from the current working directory,with build automation enabled.
Cache the parameters locally in the.azure/configfile so that you don't need to specify them again when deploying later withaz webapp upor otheraz webappcommands from the project folder. The cached values are used automatically by default.
Cache the parameters locally in the.azure/configfile so that you don't need to specify them again when deploying later withaz webapp upor otheraz webappcommands from the project folder. The cached values are used automatically by default.
az webapp up
az webapp
To create Azure resources in VS Code, you must have theAzure Tools extension packinstalled and be signed into Azure from VS Code.
Download Azure Tools extension pack
In the application folder, open VS Code:
code .
code .
Find theRESOURCESsection and select your subscription.
Select+(Create Resource...)
https://<app-name>.azurewebsites.net
Sign in to theAzure portaland follow these steps to create your Azure App Service resources.
Enterapp servicesin the search bar at the top of the Azure portal.
Select the item labeledApp Servicesunder theServicesheading on the menu that appears below the search bar.
Resource Groupâ SelectCreate newand use a name ofmsdocs-python-webapp-quickstart.
Nameâmsdocs-python-webapp-quickstart-XYZwhere XYZ is any three random characters. This name must be unique across Azure.
Runtime stackâPython 3.13.
Regionâ Any Azure region near you.
App Service Planâ UnderPricing plan, selectExplore pricing plansto select a different App Service plan.
Having issues?Let us know.
Deploy your application code to Azure
Azure App Service supports multiple methods to deploy your application code to Azure, including GitHub Actions and all major CI/CD tools. This article focuses on how to deploy your code from your local workstation to Azure.
Deploy using Azure CLI
Deploy using VS Code
Deploy using a ZIP file
Since theaz webapp upcommand created the necessary resources and deployed your application in a single step, you can move on to the next step.
az webapp up
Since the previous step created the necessary resources and deployed your application in a single step, you can move on to the next step.
Applications can be deployed to Azure by creating and uploading a ZIP file of the application code to Azure. ZIP files can be uploaded to Azure using the Azure CLI or an HTTP client likecURL.
Enable build automation
When deploying a ZIP file of your Python code, you need to set a flag to enable Azure build automation. The build automation will install any necessary requirements and package the application to run on Azure.
Build automation in Azure is enabled by setting theSCM_DO_BUILD_DURING_DEPLOYMENTapp setting in either the Azure portal or Azure CLI.
SCM_DO_BUILD_DURING_DEPLOYMENT
Azure portal
Azure CLI
SelectConfigurationunder theSettingsheader in the left toolbar to bring up the Application settings.
UnderApplication settings, selectNew application setting.
Use theaz webapp config appsettings setcommand to set theSCM_DO_BUILD_DURING_DEPLOYMENTsetting to a value oftrue.
SCM_DO_BUILD_DURING_DEPLOYMENT
true
bash
PowerShell terminal
# Change these values to the ones used to create the App Service.
RESOURCE_GROUP_NAME='msdocs-python-webapp-quickstart'
APP_SERVICE_NAME='msdocs-python-webapp-quickstart-123'

az webapp config appsettings set \
    --resource-group $RESOURCE_GROUP_NAME \
    --name $APP_SERVICE_NAME \
    --settings SCM_DO_BUILD_DURING_DEPLOYMENT=true
# Change these values to the ones used to create the App Service.
RESOURCE_GROUP_NAME='msdocs-python-webapp-quickstart'
APP_SERVICE_NAME='msdocs-python-webapp-quickstart-123'

az webapp config appsettings set \
    --resource-group $RESOURCE_GROUP_NAME \
    --name $APP_SERVICE_NAME \
    --settings SCM_DO_BUILD_DURING_DEPLOYMENT=true
# Change these values to the ones used to create the App Service.
$resourceGroupName='msdocs-python-webapp-quickstart'
$appServiceName='msdocs-python-webapp-quickstart-123'

az webapp config appsettings set `
    --resource-group $resourceGroupName `
    --name $appServiceName `
    --settings SCM_DO_BUILD_DURING_DEPLOYMENT=true
# Change these values to the ones used to create the App Service.
$resourceGroupName='msdocs-python-webapp-quickstart'
$appServiceName='msdocs-python-webapp-quickstart-123'

az webapp config appsettings set `
    --resource-group $resourceGroupName `
    --name $appServiceName `
    --settings SCM_DO_BUILD_DURING_DEPLOYMENT=true
Create a ZIP file of your application
Next, create a ZIP file of your application. You only need to include components of the application itself. You do not need to include any files or directories that start with a dot (.) such as.venv,.gitignore,.github, or.vscode.
.
.venv
.gitignore
.github
.vscode
Windows
macOS/Linux
On Windows, use a program like 7-Zip to create a ZIP file needed to deploy the application.

On macOS or Linux, you can use the built-inziputility to create a ZIP file.
zip
zip -r <file-name>.zip . -x '.??*'
zip -r <file-name>.zip . -x '.??*'
Upload the ZIP file to Azure
Once you have a ZIP file, the file can be uploaded to Azure using either Azure CLI or an HTTP client like cURL.
Azure CLI
cURL
Theaz webapp deploycommand can be used to upload and deploy a zip file to Azure.
bash
PowerShell terminal
# Change these values to the ones used to create the App Service.
RESOURCE_GROUP_NAME='msdocs-python-webapp-quickstart'
APP_SERVICE_NAME='msdocs-python-webapp-quickstart-123'

az webapp deploy \
    --name $APP_SERVICE_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --src-path <zip-file-path>
# Change these values to the ones used to create the App Service.
RESOURCE_GROUP_NAME='msdocs-python-webapp-quickstart'
APP_SERVICE_NAME='msdocs-python-webapp-quickstart-123'

az webapp deploy \
    --name $APP_SERVICE_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --src-path <zip-file-path>
# Change these values to the ones used to create the App Service.
$resourceGroupName='msdocs-python-webapp-quickstart'
$appServiceName='msdocs-python-webapp-quickstart-123'

az webapp deploy `
    --name $appServiceName `
    --resource-group $resourceGroupName `
    --src-path <zip-file-path>
# Change these values to the ones used to create the App Service.
$resourceGroupName='msdocs-python-webapp-quickstart'
$appServiceName='msdocs-python-webapp-quickstart-123'

az webapp deploy `
    --name $appServiceName `
    --resource-group $resourceGroupName `
    --src-path <zip-file-path>
To use cURL to upload your ZIP file to Azure, you will need the deployment username and password for your App Service. These credentials can be obtained from the Azure portal.
On the page for the web app, selectDeployment centerfrom the menu on the left side of the page.
Select theFTPS credentialstab.
TheUsernameandPasswordare shown under theApplication scopeheading.  For zip file deployments, only use the part of the username after the\character that starts with a$, for example$msdocs-python-webapp-quickstart-123. These credentials will be needed in the cURL command.
\
$
$msdocs-python-webapp-quickstart-123

Run the followingcurlcommand to upload your zip file to Azure and deploy your application.  The username is the deployment username obtained in step 3.  When this command is run, you will be prompted for the deployment password.
curl
bash
PowerShell terminal
curl -X POST \
    -H 'Content-Type: application/zip' \
    -u '<deployment-user>' \
    -T <zip-file-name> \
    https://<app-name>.scm.azurewebsites.net/api/zipdeploy
curl -X POST \
    -H 'Content-Type: application/zip' \
    -u '<deployment-user>' \
    -T <zip-file-name> \
    https://<app-name>.scm.azurewebsites.net/api/zipdeploy
For PowerShell, make sure to enclose the username in single quotes so PowerShell does not try to interpret the username as a PowerShell variable.
curl -X POST `
    -H 'Content-Type: application/zip' `
    -u '<deployment-user>' `
    -T <zip-file-name> `
    https://<app-name>.scm.azurewebsites.net/api/zipdeploy
curl -X POST `
    -H 'Content-Type: application/zip' `
    -u '<deployment-user>' `
    -T <zip-file-name> `
    https://<app-name>.scm.azurewebsites.net/api/zipdeploy
Depending on your network bandwidth, files usually take between 10 and 30 seconds to upload to Azure.
Having issues? Refer first to theTroubleshooting guide. If that doesn't help,let us know.
Configure startup script
Based on the presence of certain files in a deployment, App Service automatically detects whether an app is a Django or Flask app and performs default steps to run your app. For apps based on other web frameworks like FastAPI, you need to configure a startup script for App Service to run your app; otherwise, App Service runs a default read-only app located in theopt/defaultsitefolder.
To learn more about how App Service runs Python apps and how you can configure and customize its behavior with your app, seeConfigure a Linux Python app for Azure App Service.
Azure CLI
Azure CLI
Azure CLI
VS Code
VS Code
VS Code
Azure portal
Azure portal
Azure portal
App Service automatically detects the presence of a Flask app. No additional configuration is needed for this quickstart.
App Service automatically detects the presence of a Django app. No additional configuration is needed for this quickstart.
For FastAPI, you must configure a custom startup command for App Service to run your app. The following command starts Gunicorn with 2 Uvicorn worker processes:gunicorn -w 2 -k uvicorn.workers.UvicornWorker -b 0.0.0.0:8000 main:app.
gunicorn -w 2 -k uvicorn.workers.UvicornWorker -b 0.0.0.0:8000 main:app
First, configure the startup command using theaz webapp config setcommand.
az webapp config set \
    --startup-file "gunicorn -w 2 -k uvicorn.workers.UvicornWorker -b 0.0.0.0:8000 main:app" \
    --name $APP_SERVICE_NAME \
    --resource-group $RESOURCE_GROUP_NAME
az webapp config set \
    --startup-file "gunicorn -w 2 -k uvicorn.workers.UvicornWorker -b 0.0.0.0:8000 main:app" \
    --name $APP_SERVICE_NAME \
    --resource-group $RESOURCE_GROUP_NAME
Next, restart the web app using theaz webapp restartcommand.
az webapp restart \
    --name $APP_SERVICE_NAME \
    --resource-group $RESOURCE_GROUP_NAME
az webapp restart \
    --name $APP_SERVICE_NAME \
    --resource-group $RESOURCE_GROUP_NAME
App Service automatically detects the presence of a Flask app. No additional configuration is needed for this quickstart.
App Service automatically detects the presence of a Django app. No additional configuration is needed for this quickstart.
Use Azure CLI or the Azure portal to configure the startup command.
App Service automatically detects the presence of a Flask app. No additional configuration is needed for this quickstart.
App Service automatically detects the presence of a Django app. No additional configuration is needed for this quickstart.
For FastAPI, you must configure a custom startup command for App Service to run your app. The following command starts Gunicorn with 2 Uvicorn worker processes:gunicorn -w 2 -k uvicorn.workers.UvicornWorker -b 0.0.0.0:8000 main:app.
gunicorn -w 2 -k uvicorn.workers.UvicornWorker -b 0.0.0.0:8000 main:app
SelectConfigurationunder theSettingsheading in the menu on the left side of the page.
Make sure theGeneral settingstab is selected.
In theStartup Commandfield, entergunicorn -w 2 -k uvicorn.workers.UvicornWorker -b 0.0.0.0:8000 main:app.
SelectSaveto save your changes.
Wait for the notification that the settings are updated before proceeding.
SelectOverviewin the menu on the left side of the page.
On the top menu, selectRestart.
Browse to the app
Browse to the deployed application in your web browser by using the URLhttp://<app-name>.azurewebsites.net. If you see a default app page, wait a minute and refresh the browser.
http://<app-name>.azurewebsites.net
The Python sample code is running a Linux container in App Service using a built-in image.

Congratulations!You've deployed your Python app to App Service.
Having issues? Refer first to theTroubleshooting guide. If that doesn't help,let us know.
Stream logs
Azure App Service captures all message output to the console to assist you in diagnosing issues with your application. The sample apps includeprint()statements to demonstrate this capability.
print()
Flask
Django
FastAPI
@app.route('/')
def index():
   print('Request for index page received')
   return render_template('index.html')

@app.route('/favicon.ico')
def favicon():
    return send_from_directory(os.path.join(app.root_path, 'static'),
                               'favicon.ico', mimetype='image/vnd.microsoft.icon')

@app.route('/hello', methods=['POST'])
def hello():
   name = request.form.get('name')

   if name:
       print('Request for hello page received with name=%s' % name)
       return render_template('hello.html', name = name)
   else:
       print('Request for hello page received with no name or blank name -- redirecting')
       return redirect(url_for('index'))
@app.route('/')
def index():
   print('Request for index page received')
   return render_template('index.html')

@app.route('/favicon.ico')
def favicon():
    return send_from_directory(os.path.join(app.root_path, 'static'),
                               'favicon.ico', mimetype='image/vnd.microsoft.icon')

@app.route('/hello', methods=['POST'])
def hello():
   name = request.form.get('name')

   if name:
       print('Request for hello page received with name=%s' % name)
       return render_template('hello.html', name = name)
   else:
       print('Request for hello page received with no name or blank name -- redirecting')
       return redirect(url_for('index'))
def index(request):
    print('Request for index page received')
    return render(request, 'hello_azure/index.html')

@csrf_exempt
def hello(request):
    if request.method == 'POST':
        name = request.POST.get('name')
        
        if name is None or name == '':
            print("Request for hello page received with no name or blank name -- redirecting")
            return redirect('index')
        else:
            print("Request for hello page received with name=%s" % name)
            context = {'name': name }
            return render(request, 'hello_azure/hello.html', context)
    else:
def index(request):
    print('Request for index page received')
    return render(request, 'hello_azure/index.html')

@csrf_exempt
def hello(request):
    if request.method == 'POST':
        name = request.POST.get('name')
        
        if name is None or name == '':
            print("Request for hello page received with no name or blank name -- redirecting")
            return redirect('index')
        else:
            print("Request for hello page received with name=%s" % name)
            context = {'name': name }
            return render(request, 'hello_azure/hello.html', context)
    else:
@app.get("/", response_class=HTMLResponse)
async def index(request: Request):
    print('Request for index page received')
    return templates.TemplateResponse('index.html', {"request": request})

@app.get('/favicon.ico')
async def favicon():
    file_name = 'favicon.ico'
    file_path = './static/' + file_name
    return FileResponse(path=file_path, headers={'mimetype': 'image/vnd.microsoft.icon'})

@app.post('/hello', response_class=HTMLResponse)
async def hello(request: Request, name: str = Form(...)):
    if name:
        print('Request for hello page received with name=%s' % name)
        return templates.TemplateResponse('hello.html', {"request": request, 'name':name})
    else:
        print('Request for hello page received with no name or blank name -- redirecting')
        return RedirectResponse(request.url_for("index"), status_code=status.HTTP_302_FOUND)
@app.get("/", response_class=HTMLResponse)
async def index(request: Request):
    print('Request for index page received')
    return templates.TemplateResponse('index.html', {"request": request})

@app.get('/favicon.ico')
async def favicon():
    file_name = 'favicon.ico'
    file_path = './static/' + file_name
    return FileResponse(path=file_path, headers={'mimetype': 'image/vnd.microsoft.icon'})

@app.post('/hello', response_class=HTMLResponse)
async def hello(request: Request, name: str = Form(...)):
    if name:
        print('Request for hello page received with name=%s' % name)
        return templates.TemplateResponse('hello.html', {"request": request, 'name':name})
    else:
        print('Request for hello page received with no name or blank name -- redirecting')
        return RedirectResponse(request.url_for("index"), status_code=status.HTTP_302_FOUND)
You can review the contents of the App Service diagnostic logs by using the Azure CLI, VS Code, or the Azure portal.
Azure CLI
VS Code
Azure portal
First, you need to configure Azure App Service to output logs to the App Service filesystem by using theaz webapp log configcommand.
bash
PowerShell terminal
az webapp log config \
    --web-server-logging filesystem \
    --name $APP_SERVICE_NAME \
    --resource-group $RESOURCE_GROUP_NAME
az webapp log config \
    --web-server-logging filesystem \
    --name $APP_SERVICE_NAME \
    --resource-group $RESOURCE_GROUP_NAME
az webapp log config `
    --web-server-logging 'filesystem' `
    --name $APP_SERVICE_NAME `
    --resource-group $RESOURCE_GROUP_NAME
az webapp log config `
    --web-server-logging 'filesystem' `
    --name $APP_SERVICE_NAME `
    --resource-group $RESOURCE_GROUP_NAME
To stream logs, use theaz webapp log tailcommand.
bash
PowerShell terminal
az webapp log tail \
    --name $APP_SERVICE_NAME \
    --resource-group $RESOURCE_GROUP_NAME
az webapp log tail \
    --name $APP_SERVICE_NAME \
    --resource-group $RESOURCE_GROUP_NAME
az webapp log tail `
    --name $APP_SERVICE_NAME `
    --resource-group $RESOURCE_GROUP_NAME
az webapp log tail `
    --name $APP_SERVICE_NAME `
    --resource-group $RESOURCE_GROUP_NAME
Refresh the home page in the app or attempt other requests to generate some log messages. The output should look similar to the following.
Starting Live Log Stream ---

2021-12-23T02:15:52.740703322Z Request for index page received
2021-12-23T02:15:52.740740222Z 169.254.130.1 - - [23/Dec/2021:02:15:52 +0000] "GET / HTTP/1.1" 200 1360 "https://msdocs-python-webapp-quickstart-123.azurewebsites.net/hello" "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:95.0) Gecko/20100101 Firefox/95.0"
2021-12-23T02:15:52.841043070Z 169.254.130.1 - - [23/Dec/2021:02:15:52 +0000] "GET /static/bootstrap/css/bootstrap.min.css HTTP/1.1" 200 0 "https://msdocs-python-webapp-quickstart-123.azurewebsites.net/" "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:95.0) Gecko/20100101 Firefox/95.0"
2021-12-23T02:15:52.884541951Z 169.254.130.1 - - [23/Dec/2021:02:15:52 +0000] "GET /static/images/azure-icon.svg HTTP/1.1" 200 0 "https://msdocs-python-webapp-quickstart-123.azurewebsites.net/" "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:95.0) Gecko/20100101 Firefox/95.0"
2021-12-23T02:15:53.043211176Z 169.254.130.1 - - [23/Dec/2021:02:15:53 +0000] "GET /favicon.ico HTTP/1.1" 404 232 "https://msdocs-python-webapp-quickstart-123.azurewebsites.net/" "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:95.0) Gecko/20100101 Firefox/95.0"

2021-12-23T02:16:01.304306845Z Request for hello page received with name=David
2021-12-23T02:16:01.304335945Z 169.254.130.1 - - [23/Dec/2021:02:16:01 +0000] "POST /hello HTTP/1.1" 200 695 "https://msdocs-python-webapp-quickstart-123.azurewebsites.net/" "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:95.0) Gecko/20100101 Firefox/95.0"
2021-12-23T02:16:01.398399251Z 169.254.130.1 - - [23/Dec/2021:02:16:01 +0000] "GET /static/bootstrap/css/bootstrap.min.css HTTP/1.1" 304 0 "https://msdocs-python-webapp-quickstart-123.azurewebsites.net/hello" "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:95.0) Gecko/20100101 Firefox/95.0"
2021-12-23T02:16:01.430740060Z 169.254.130.1 - - [23/Dec/2021:02:16:01 +0000] "GET /static/images/azure-icon.svg HTTP/1.1" 304 0 "https://msdocs-python-webapp-quickstart-123.azurewebsites.net/hello" "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:95.0) Gecko/20100101 Firefox/95.0"
Starting Live Log Stream ---

2021-12-23T02:15:52.740703322Z Request for index page received
2021-12-23T02:15:52.740740222Z 169.254.130.1 - - [23/Dec/2021:02:15:52 +0000] "GET / HTTP/1.1" 200 1360 "https://msdocs-python-webapp-quickstart-123.azurewebsites.net/hello" "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:95.0) Gecko/20100101 Firefox/95.0"
2021-12-23T02:15:52.841043070Z 169.254.130.1 - - [23/Dec/2021:02:15:52 +0000] "GET /static/bootstrap/css/bootstrap.min.css HTTP/1.1" 200 0 "https://msdocs-python-webapp-quickstart-123.azurewebsites.net/" "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:95.0) Gecko/20100101 Firefox/95.0"
2021-12-23T02:15:52.884541951Z 169.254.130.1 - - [23/Dec/2021:02:15:52 +0000] "GET /static/images/azure-icon.svg HTTP/1.1" 200 0 "https://msdocs-python-webapp-quickstart-123.azurewebsites.net/" "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:95.0) Gecko/20100101 Firefox/95.0"
2021-12-23T02:15:53.043211176Z 169.254.130.1 - - [23/Dec/2021:02:15:53 +0000] "GET /favicon.ico HTTP/1.1" 404 232 "https://msdocs-python-webapp-quickstart-123.azurewebsites.net/" "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:95.0) Gecko/20100101 Firefox/95.0"

2021-12-23T02:16:01.304306845Z Request for hello page received with name=David
2021-12-23T02:16:01.304335945Z 169.254.130.1 - - [23/Dec/2021:02:16:01 +0000] "POST /hello HTTP/1.1" 200 695 "https://msdocs-python-webapp-quickstart-123.azurewebsites.net/" "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:95.0) Gecko/20100101 Firefox/95.0"
2021-12-23T02:16:01.398399251Z 169.254.130.1 - - [23/Dec/2021:02:16:01 +0000] "GET /static/bootstrap/css/bootstrap.min.css HTTP/1.1" 304 0 "https://msdocs-python-webapp-quickstart-123.azurewebsites.net/hello" "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:95.0) Gecko/20100101 Firefox/95.0"
2021-12-23T02:16:01.430740060Z 169.254.130.1 - - [23/Dec/2021:02:16:01 +0000] "GET /static/images/azure-icon.svg HTTP/1.1" 304 0 "https://msdocs-python-webapp-quickstart-123.azurewebsites.net/hello" "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:95.0) Gecko/20100101 Firefox/95.0"
SelectApp Service logsunder theMonitoringheading in the menu on the left side of the page.
Change theApplication Loggingproperty fromOfftoFile System.
Enter a retention period of 30 days for the logs.
SelectSaveto save your changes.
Having issues? Refer first to theTroubleshooting guide. If that doesn't help,let us know.
Clean up resources
When you're finished with the sample app, you can remove all of the resources for the app from Azure. Removing the resource group ensures that you don't incur extra charges and helps keep your Azure subscription uncluttered. Removing the resource group also removes all resources in the resource group and is the fastest way to remove all Azure resources for your app.
Azure CLI
VS Code
Azure portal
Delete the resource group by using theaz group deletecommand.
az group delete \
    --name msdocs-python-webapp-quickstart \
    --no-wait
az group delete \
    --name msdocs-python-webapp-quickstart \
    --no-wait
The--no-waitargument allows the command to return before the operation is complete.
--no-wait
Find theRESOURCESsection.
Select theGroup Byicon and selectGroup by Resource Group.
Follow these steps while signed-in to the Azure portal to delete a resource group.
Enter the name of the resource group in the search bar at the top of the page.
Under theResource Groupsheading, select the name of the resource group to navigate to it.
Having issues?Let us know.
Next steps
Tutorial: Python (Flask) web app with PostgreSQL
Tutorial: Python (Django) web app with PostgreSQL
Configure a Python app
Add user sign-in to a Python web app
Tutorial: Run a Python app in a custom container
Secure an app with a custom domain and certificate
Feedback
Was this page helpful?
Additional resources