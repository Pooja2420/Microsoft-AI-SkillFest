Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Configure and use Azure Synapse Link for Azure Cosmos DB
Article
2024-08-14
28 contributors
In this article
APPLIES TO:NoSQLMongoDBGremlin
Azure Synapse Link for Azure Cosmos DBis a cloud-native hybrid transactional and analytical processing (HTAP) capability that enables you to run near real-time analytics over operational data in Azure Cosmos DB. Synapse Link creates a tight seamless integration between Azure Cosmos DB and Azure Synapse Analytics.
Important
Mirroring in Microsoft Fabric is now available in preview for NoSql API. This feature provides all the capabilities of Azure Synapse Link with better analytical performance, ability to unify your data estate with Fabric OneLake and open access to your data in OneLake with Delta Parquet format. If you are considering Azure Synapse Link, we recommend that you try mirroring to assess overall fit for your organization. To get started with mirroring, clickhere.
Azure Synapse Link is available for Azure Cosmos DB SQL API or for Azure Cosmos DB API for Mongo DB accounts. And it is in preview for Gremlin API, with activation via CLI commands. Use the following steps to run analytical queries with the Azure Synapse Link for Azure Cosmos DB:
Enable Azure Synapse Link for your Azure Cosmos DB accounts
Enable Azure Synapse Link for your containers
Connect your Azure Cosmos DB database to an Azure Synapse workspace
Query analytical store using Azure Synapse Analytics
Improve performance with Best Practices
Use Azure Synapse serverless SQL pool to analyze and visualize data in Power BI
You can also check the training module on how toconfigure Azure Synapse Link for Azure Cosmos DB.
Enable Azure Synapse Link for Azure Cosmos DB accounts
The first step to use Synapse Link is to enable it for your Azure Cosmos DB database account.
Note
If you want to use customer-managed keys with Azure Synapse Link, you must configure your account's managed identity in your Azure Key Vault access policy before enabling Synapse Link on your account. To learn more, see how toConfigure customer-managed keys using Azure Cosmos DB accounts' managed identitiesarticle.
Note
If you want to use Full Fidelity Schema for API for NoSQL accounts, you can't use the Azure portal to enable Synapse Link. This option can't be changed after Synapse Link is enabled in your account and to set it you must use Azure CLI or PowerShell. For more information, checkanalytical store schema representation documentation.
Note
You needContributorrole to enable Synapse Link at account level. And you need at leastOperatorto enable Synapse Link in your containers or collections.
Azure portal
Sign in to theAzure portal.
Sign in to theAzure portal.
Create a new Azure account, or select an existing Azure Cosmos DB account.
Create a new Azure account, or select an existing Azure Cosmos DB account.
Navigate to your Azure Cosmos DB account and open theAzure Synapse Linkunder Integrations in the left pane.
Navigate to your Azure Cosmos DB account and open theAzure Synapse Linkunder Integrations in the left pane.
SelectEnable. This process can take 1 to 5 minutes to complete.
SelectEnable. This process can take 1 to 5 minutes to complete.

Your account is now enabled to use Synapse Link. Next see how to create analytical store enabled containers to automatically start replicating your operational data from the transactional store to the analytical store.
Your account is now enabled to use Synapse Link. Next see how to create analytical store enabled containers to automatically start replicating your operational data from the transactional store to the analytical store.
Note
Turning on Synapse Link does not turn on the analytical store automatically. Once you enable Synapse Link on the Cosmos DB account, enable analytical store on containers to start using Synapse Link.
Note
You can also enable Synapse Link for your account using thePower BIand theSynapse Linkpane, in theIntegrationssection of the left navigation menu.
Command-Line Tools
Enable Synapse Link in your Azure Cosmos DB API for NoSQL or MongoDB account using Azure CLI or PowerShell.
Use--enable-analytical-storage truefor bothcreateorupdateoperations. You also need to choose the representation schema type. For API for NoSQL accounts you can use--analytical-storage-schema-typewith the valuesFullFidelityorWellDefined. For API for MongoDB accounts, always use--analytical-storage-schema-type FullFidelity.
--enable-analytical-storage true
--analytical-storage-schema-type
FullFidelity
WellDefined
--analytical-storage-schema-type FullFidelity
Create a new Azure Cosmos DB account with Synapse Link enabled
Update an existing Azure Cosmos DB account to enable Synapse Link
Synapse Link for Gremlin API is now in preview. You can enable Synapse Link in your new or existing graphs using Azure CLI. Use the CLI command below to enable Synapse Link for your Gremlin API account:
az cosmosdb create --capabilities EnableGremlin --name MyCosmosDBGremlinDatabaseAccount --resource-group MyResourceGroup --enable-analytical-storage true
az cosmosdb create --capabilities EnableGremlin --name MyCosmosDBGremlinDatabaseAccount --resource-group MyResourceGroup --enable-analytical-storage true
For existing Gremlin API accounts, replacecreatewithupdate.
create
update
UseEnableAnalyticalStorage truefor bothcreateorupdateoperations. You also need to choose the representation schema type. For API for NoSQL accounts you can use--analytical-storage-schema-typewith the valuesFullFidelityorWellDefined. For API for MongoDB accounts, always use-AnalyticalStorageSchemaType FullFidelity.
EnableAnalyticalStorage true
--analytical-storage-schema-type
FullFidelity
WellDefined
-AnalyticalStorageSchemaType FullFidelity
Create a new Azure Cosmos DB account with Synapse Link enabled
Update an existing Azure Cosmos DB account to enable Synapse Link
ThisAzure Resource Manager templatecreates a Synapse Link enabled Azure Cosmos DB account for SQL API. This template creates a Core (SQL) API account in one region with a container configured with analytical TTL enabled, and an option to use manual or autoscale throughput. To deploy this template, click onDeploy to Azureon the readme page.
Enable Azure Synapse Link for your containers
The second step is to enable Synapse Link for your containers or collections. This is accomplished by setting theanalytical TTLproperty to-1for infinite retention, or to a positive integer, that is the number of seconds that you want to keep in analytical store. This setting can be changed later. For more information, see theanalytical TTL supported valuesarticle.
analytical TTL
-1
Please note the following details when enabling Azure Synapse Link on your existing SQL API containers:
The same performance isolation of the analytical store auto-sync process applies to the initial sync and there is no performance impact on your OLTP workload.
A container's initial sync with analytical store total time will vary depending on the data volume and on the documents complexity. This process can take anywhere from a few seconds to multiple days. Please use the Azure portal to monitor the migration progress.
The throughput of your container, or database account, also influences the total initial sync time. Although RU/s are not used in this migration, the total RU/s available influences the performance of the process. You can temporarily increase your environment's available RUs to speed up the process.
You won't be able to query analytical store of an existing container while Synapse Link is being enabled on that container. Your OLTP workload isn't impacted and you can keep on reading data normally. Data ingested after the start of the initial sync will be merged into analytical store by the regular analytical store auto-sync process.
Note
Now you can enable Synapse Link on your existing MongoDB API collections, using Azure CLI or PowerShell.
Azure portal
Sign in to theAzure portalor theAzure Cosmos DB Explorer.
Sign in to theAzure portalor theAzure Cosmos DB Explorer.
Navigate to your Azure Cosmos DB account and open theData Explorertab.
Navigate to your Azure Cosmos DB account and open theData Explorertab.
SelectNew Containerand enter a name for your database, container, partition key and throughput details. Turn on theAnalytical storeoption. After you enable the analytical store, it creates a container withanalytical TTLproperty set to the default value of  -1 (infinite retention). This analytical store that retains all the historical versions of records and can be changed later.
SelectNew Containerand enter a name for your database, container, partition key and throughput details. Turn on theAnalytical storeoption. After you enable the analytical store, it creates a container withanalytical TTLproperty set to the default value of  -1 (infinite retention). This analytical store that retains all the historical versions of records and can be changed later.
analytical TTL

If you have previously not enabled Synapse Link on this account, it will prompt you to do so because it's a pre-requisite to create an analytical store enabled container. If prompted, selectEnable Synapse Link. This process can take 1 to 5 minutes to complete.
If you have previously not enabled Synapse Link on this account, it will prompt you to do so because it's a pre-requisite to create an analytical store enabled container. If prompted, selectEnable Synapse Link. This process can take 1 to 5 minutes to complete.
SelectOK, to create an analytical store enabled Azure Cosmos DB container.
SelectOK, to create an analytical store enabled Azure Cosmos DB container.
After the container is created, verify that analytical store has been enabled by clickingSettings, right below Documents in Data Explorer, and check if theAnalytical Store Time to Liveoption is turned on.
After the container is created, verify that analytical store has been enabled by clickingSettings, right below Documents in Data Explorer, and check if theAnalytical Store Time to Liveoption is turned on.
Sign in to theAzure portalor theAzure Cosmos DB Explorer.
Sign in to theAzure portalor theAzure Cosmos DB Explorer.
Navigate to your Azure Cosmos DB account and open theAzure Synapse Linktab.
Navigate to your Azure Cosmos DB account and open theAzure Synapse Linktab.
Under theEnable Azure Synapse Link for your containerssection select the container.
Under theEnable Azure Synapse Link for your containerssection select the container.

After the container enablement, verify that analytical store has been enabled by clickingSettings, right below Documents in Data Explorer, and check if theAnalytical Store Time to Liveoption is turned on.
After the container enablement, verify that analytical store has been enabled by clickingSettings, right below Documents in Data Explorer, and check if theAnalytical Store Time to Liveoption is turned on.
Note
You can also enable Synapse Link for your account using thePower BIand theSynapse Linkpane, in theIntegrationssection of the left navigation menu.
Command-Line Tools
The following options enable Synapse Link in a container by using Azure CLI by setting the--analytical-storage-ttlproperty.
--analytical-storage-ttl
Create or update an Azure Cosmos DB MongoDB collection
Create or update an Azure Cosmos DB SQL API container
Synapse Link for Gremlin API is now in preview. You can enable Synapse Link in your new or existing Graphs using Azure CLI. Use the CLI command below to enable Synapse Link for your Gremlin API graphs:
az cosmosdb gremlin graph create --g MyResourceGroup --a MyCosmosDBGremlinDatabaseAccount --d MyGremlinDB --n MyGraph --analytical-storage-ttl â1
az cosmosdb gremlin graph create --g MyResourceGroup --a MyCosmosDBGremlinDatabaseAccount --d MyGremlinDB --n MyGraph --analytical-storage-ttl â1
For existing graphs, replacecreatewithupdate.
create
update
The following options enable Synapse Link in a container by using Azure CLI by setting the-AnalyticalStorageTtlproperty.
-AnalyticalStorageTtl
Create or update an Azure Cosmos DB MongoDB collection
Create or update an Azure Cosmos DB SQL API container
Azure Cosmos DB SDKs - SQL API only
The following .NET code creates a Synapse Link enabled container by setting theAnalyticalStoreTimeToLiveInSecondsproperty. To update an existing container, use theContainer.ReplaceContainerAsyncmethod.
AnalyticalStoreTimeToLiveInSeconds
Container.ReplaceContainerAsync
CosmosClient cosmosClient = new CosmosClient(
    accountEndpoint: "<nosql-account-endpoint>",
    tokenCredential: new DefaultAzureCredential()
);
CosmosClient cosmosClient = new CosmosClient(
    accountEndpoint: "<nosql-account-endpoint>",
    tokenCredential: new DefaultAzureCredential()
);
// Create a container with a partition key, and analytical TTL configured to -1 (infinite retention)
ContainerProperties properties = new ContainerProperties()
{
    Id = "myContainerId",
    PartitionKeyPath = "/id",
    AnalyticalStoreTimeToLiveInSeconds = -1,
};
await cosmosClient.GetDatabase("myDatabase").CreateContainerAsync(properties);
// Create a container with a partition key, and analytical TTL configured to -1 (infinite retention)
ContainerProperties properties = new ContainerProperties()
{
    Id = "myContainerId",
    PartitionKeyPath = "/id",
    AnalyticalStoreTimeToLiveInSeconds = -1,
};
await cosmosClient.GetDatabase("myDatabase").CreateContainerAsync(properties);
The following Java code creates a Synapse Link enabled container by setting thesetAnalyticalStoreTimeToLiveInSecondsproperty. To update an existing container, use thecontainer.replaceclass.
setAnalyticalStoreTimeToLiveInSeconds
container.replace
// Create a container with a partition key and  analytical TTL configured to  -1 (infinite retention) 
CosmosContainerProperties containerProperties = new CosmosContainerProperties("myContainer", "/myPartitionKey");

containerProperties.setAnalyticalStoreTimeToLiveInSeconds(-1);

container = database.createContainerIfNotExists(containerProperties, 400).block().getContainer();
// Create a container with a partition key and  analytical TTL configured to  -1 (infinite retention) 
CosmosContainerProperties containerProperties = new CosmosContainerProperties("myContainer", "/myPartitionKey");

containerProperties.setAnalyticalStoreTimeToLiveInSeconds(-1);

container = database.createContainerIfNotExists(containerProperties, 400).block().getContainer();
The following Python code creates a Synapse Link enabled container by setting theanalytical_storage_ttlproperty. To update an existing container, use thereplace_containermethod.
analytical_storage_ttl
replace_container
# Client
client = cosmos_client.CosmosClient(HOST,  KEY )

# Database client
try:
    db = client.create_database(DATABASE)

except exceptions.CosmosResourceExistsError:
    db = client.get_database_client(DATABASE)

# Creating the container with analytical store enabled
try:
    container = db.create_container(
        id=CONTAINER,
        partition_key=PartitionKey(path='/id', kind='Hash'),analytical_storage_ttl=-1
    )
    properties = container.read()
    print('Container with id \'{0}\' created'.format(container.id))
    print('Partition Key - \'{0}\''.format(properties['partitionKey']))

except exceptions.CosmosResourceExistsError:
    print('A container with already exists')
# Client
client = cosmos_client.CosmosClient(HOST,  KEY )

# Database client
try:
    db = client.create_database(DATABASE)

except exceptions.CosmosResourceExistsError:
    db = client.get_database_client(DATABASE)

# Creating the container with analytical store enabled
try:
    container = db.create_container(
        id=CONTAINER,
        partition_key=PartitionKey(path='/id', kind='Hash'),analytical_storage_ttl=-1
    )
    properties = container.read()
    print('Container with id \'{0}\' created'.format(container.id))
    print('Partition Key - \'{0}\''.format(properties['partitionKey']))

except exceptions.CosmosResourceExistsError:
    print('A container with already exists')
Connect to a Synapse workspace
Use the instructions inConnect to Azure Synapse Linkon how to access an Azure Cosmos DB database from Azure Synapse Analytics Studio with Azure Synapse Link.
Query analytical store using Azure Synapse Analytics
Query analytical store using Apache Spark for Azure Synapse Analytics
Use the instructions in theQuery Azure Cosmos DB analytical store using Spark 3article on how to query with Synapse Spark 3. That article gives some examples on how you can interact with the analytical store from Synapse gestures. Those gestures are visible when you right-click on a container. With gestures, you can quickly generate code and tweak it to your needs. They are also perfect for discovering data with a single click.
For Spark 2 integration use the instruction in theQuery Azure Cosmos DB analytical store using Spark 2article.
Query the analytical store using serverless SQL pool in Azure Synapse Analytics
Serverless SQL pool allows you to query and analyze data in your Azure Cosmos DB containers that are enabled with Azure Synapse Link. You can analyze data in near real-time without impacting the performance of your transactional workloads. It offers a familiar T-SQL syntax to query data from the analytical store and integrated connectivity to a wide range of BI and ad-hoc querying tools via the T-SQL interface. To learn more, see theQuery analytical store using serverless SQL poolarticle.
Use serverless SQL pool to analyze and visualize data in Power BI
You can use the integrated BI experience in the Azure Cosmos DB portal, to build BI dashboards using Synapse Link with just a few clicks. To learn more, seehow to build BI dashboards using Synapse Link. This integrated experience will create simple T-SQL views in Synapse serverless SQL pools, for your Azure Cosmos DB containers. You can build BI dashboards over these views, which will query your Azure Cosmos DB containers in real-time, usingDirect Query, reflecting latest changes to your data. There is no performance or cost impact to your transactional workloads, and no complexity of managing ETL pipelines.
If you want to use advanced T-SQL views with joins across your containers or build Power BI dashboards inImport mode, seeUse serverless SQL pool to analyze Azure Cosmos DB data with Synapse Link.
Improve Performance with Best Practices
Custom Partitioning
Custom partitioning enables you to partition analytical store dataâ¯onâ¯fields that are commonly used as filters inâ¯analyticalâ¯queries,â¯resulting in improved query performance.â¯To learn more, see theintroduction to custom partitioningandhow to configure custom partitioningarticles.
Synapse SQL Serverless best practices for Azure Synapse Link for Cosmos DB
Usethismandatory best practices for your SQL serverless queries.
Getting started with Azure Synapse Link - Samples
You can find samples to get started with Azure Synapse Link onGitHub. These showcase end-to-end solutions with IoT and retail scenarios. You can also find the samples corresponding to Azure Cosmos DB for MongoDB in the same repo under theMongoDBfolder.
Next steps
To learn more, see the following docs:
Check the training module on how toconfigure Azure Synapse Link for Azure Cosmos DB.
Azure Cosmos DB analytical store overview.
Frequently asked questions about Synapse Link for Azure Cosmos DB.
Apache Spark in Azure Synapse Analytics.
Serverless SQL pool runtime support in Azure Synapse Analytics.
Feedback
Was this page helpful?
Additional resources