Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Create an Azure Kubernetes Service cluster with API Server VNet Integration (Preview)
Article
2024-11-08
14 contributors
In this article
An Azure Kubernetes Service (AKS) cluster configured with API Server VNet Integration projects the API server endpoint directly into a delegated subnet in the VNet where AKS is deployed. API Server VNet Integration enables network communication between the API server and the cluster nodes without requiring a private link or tunnel. The API server is available behind an internal load balancer VIP in the delegated subnet, which the nodes are configured to utilize. By using API Server VNet Integration, you can ensure network traffic between your API server and your node pools remains on the private network only.
API server connectivity
The control plane or API server is in an AKS-managed Azure subscription. Your cluster or node pool is in your Azure subscription. The server and the virtual machines that make up the cluster nodes can communicate with each other through the API server VIP and pod IPs that are projected into the delegated subnet.
API Server VNet Integration is supported for public or private clusters. You can add or remove public access after cluster provisioning. Unlike non-VNet integrated clusters, the agent nodes always communicate directly with the private IP address of the API server internal load balancer (ILB) IP without using DNS. All node to API server traffic is kept on private networking, and no tunnel is required for API server to node connectivity. Out-of-cluster clients needing to communicate with the API server can do so normally if public network access is enabled. If public network access is disabled, you should follow the same private DNS setup methodology as standardprivate clusters.
Region availability
API Server VNet Integration is available in all global Azure regions.
Prerequisites
Azure CLI with aks-preview extension 0.5.97 or later.
If using ARM or the REST API, the AKS API version must be 2022-04-02-preview or later.
Install the aks-preview Azure CLI extension
Important
AKS preview features are available on a self-service, opt-in basis. Previews are provided "as is" and "as available," and they're excluded from the service-level agreements and limited warranty. AKS previews are partially covered by customer support on a best-effort basis. As such, these features aren't meant for production use. For more information, see the following support articles:
AKS support policies
Azure support FAQ
Install the aks-preview extension using theaz extension addcommand.az extension add --name aks-preview
Install the aks-preview extension using theaz extension addcommand.
az extension add
az extension add --name aks-preview
az extension add --name aks-preview
Update to the latest version of the extension released using theaz extension updatecommand.az extension update --name aks-preview
Update to the latest version of the extension released using theaz extension updatecommand.
az extension update
az extension update --name aks-preview
az extension update --name aks-preview
Register the 'EnableAPIServerVnetIntegrationPreview' feature flag
Register theEnableAPIServerVnetIntegrationPreviewfeature flag using theaz feature registercommand.az feature register --namespace "Microsoft.ContainerService" --name "EnableAPIServerVnetIntegrationPreview"It takes a few minutes for the status to showRegistered.
Register theEnableAPIServerVnetIntegrationPreviewfeature flag using theaz feature registercommand.
EnableAPIServerVnetIntegrationPreview
az feature register
az feature register --namespace "Microsoft.ContainerService" --name "EnableAPIServerVnetIntegrationPreview"
az feature register --namespace "Microsoft.ContainerService" --name "EnableAPIServerVnetIntegrationPreview"
It takes a few minutes for the status to showRegistered.
Verify the registration status using theaz feature showcommand:az feature show --namespace "Microsoft.ContainerService" --name "EnableAPIServerVnetIntegrationPreview"
Verify the registration status using theaz feature showcommand:
az feature show
az feature show --namespace "Microsoft.ContainerService" --name "EnableAPIServerVnetIntegrationPreview"
az feature show --namespace "Microsoft.ContainerService" --name "EnableAPIServerVnetIntegrationPreview"
When the status reflectsRegistered, refresh the registration of theMicrosoft.ContainerServiceresource provider using theaz provider registercommand.az provider register --namespace Microsoft.ContainerService
When the status reflectsRegistered, refresh the registration of theMicrosoft.ContainerServiceresource provider using theaz provider registercommand.
az provider register
az provider register --namespace Microsoft.ContainerService
az provider register --namespace Microsoft.ContainerService
Create an AKS cluster with API Server VNet Integration using managed VNet
You can configure your AKS clusters with API Server VNet Integration in managed VNet or bring-your-own VNet mode. You can create them as public clusters (with API server access available via a public IP) or private clusters (where the API server is only accessible via private VNet connectivity). You can also toggle between a public and private state without redeploying your cluster.
Create a resource group
Create a resource group using theaz group createcommand.az group create --location westus2 --name <resource-group>
Create a resource group using theaz group createcommand.
az group create
az group create --location westus2 --name <resource-group>
az group create --location westus2 --name <resource-group>
Deploy a public cluster
Deploy a public AKS cluster with API Server VNet integration for managed VNet using theaz aks createcommand with the--enable-api-server-vnet-integrationflag.az aks create --name <cluster-name> \
    --resource-group <resource-group> \
    --location <location> \
    --network-plugin azure \
    --enable-apiserver-vnet-integration \
    --generate-ssh-keys
Deploy a public AKS cluster with API Server VNet integration for managed VNet using theaz aks createcommand with the--enable-api-server-vnet-integrationflag.
az aks create
--enable-api-server-vnet-integration
az aks create --name <cluster-name> \
    --resource-group <resource-group> \
    --location <location> \
    --network-plugin azure \
    --enable-apiserver-vnet-integration \
    --generate-ssh-keys
az aks create --name <cluster-name> \
    --resource-group <resource-group> \
    --location <location> \
    --network-plugin azure \
    --enable-apiserver-vnet-integration \
    --generate-ssh-keys
Deploy a private cluster
Deploy a private AKS cluster with API Server VNet integration for managed VNet using theaz aks createcommand with the--enable-api-server-vnet-integrationand--enable-private-clusterflags.az aks create --name <cluster-name> \
    --resource-group <resource-group> \
    --location <location> \
    --network-plugin azure \
    --enable-private-cluster \
    --enable-apiserver-vnet-integration \
    --generate-ssh-keys
Deploy a private AKS cluster with API Server VNet integration for managed VNet using theaz aks createcommand with the--enable-api-server-vnet-integrationand--enable-private-clusterflags.
az aks create
--enable-api-server-vnet-integration
--enable-private-cluster
az aks create --name <cluster-name> \
    --resource-group <resource-group> \
    --location <location> \
    --network-plugin azure \
    --enable-private-cluster \
    --enable-apiserver-vnet-integration \
    --generate-ssh-keys
az aks create --name <cluster-name> \
    --resource-group <resource-group> \
    --location <location> \
    --network-plugin azure \
    --enable-private-cluster \
    --enable-apiserver-vnet-integration \
    --generate-ssh-keys
Create a private AKS cluster with API Server VNet Integration using bring-your-own VNet
When using bring-your-own VNet, you must create and delegate an API server subnet toMicrosoft.ContainerService/managedClusters, which grants the AKS service permissions to inject the API server pods and internal load balancer into that subnet. You can't use the subnet for any other workloads, but you can use it for multiple AKS clusters located in the same virtual network. The minimum supported API server subnet size is a/28.
Microsoft.ContainerService/managedClusters
The cluster identity needs permissions to both the API server subnet and the node subnet. Lack of permissions at the API server subnet can cause a provisioning failure.
Warning
An AKS cluster reserves at least 9 IPs in the subnet address space. Running out of IP addresses may prevent API server scaling and cause an API server outage.
Create a resource group
Create a resource group using theaz group createcommand.
az group create
az group create --location <location> --name <resource-group>
az group create --location <location> --name <resource-group>
Create a virtual network
Create a virtual network using theaz network vnet createcommand.az network vnet create --name <vnet-name> \
--resource-group <resource-group> \
--location <location> \
--address-prefixes 172.19.0.0/16
Create a virtual network using theaz network vnet createcommand.
az network vnet create
az network vnet create --name <vnet-name> \
--resource-group <resource-group> \
--location <location> \
--address-prefixes 172.19.0.0/16
az network vnet create --name <vnet-name> \
--resource-group <resource-group> \
--location <location> \
--address-prefixes 172.19.0.0/16
Create an API server subnet using theaz network vnet subnet createcommand.az network vnet subnet create --resource-group <resource-group> \
--vnet-name <vnet-name> \
--name <apiserver-subnet-name> \
--delegations Microsoft.ContainerService/managedClusters \
--address-prefixes 172.19.0.0/28
Create an API server subnet using theaz network vnet subnet createcommand.
az network vnet subnet create
az network vnet subnet create --resource-group <resource-group> \
--vnet-name <vnet-name> \
--name <apiserver-subnet-name> \
--delegations Microsoft.ContainerService/managedClusters \
--address-prefixes 172.19.0.0/28
az network vnet subnet create --resource-group <resource-group> \
--vnet-name <vnet-name> \
--name <apiserver-subnet-name> \
--delegations Microsoft.ContainerService/managedClusters \
--address-prefixes 172.19.0.0/28
Create a cluster subnet using theaz network vnet subnet createcommand.az network vnet subnet create --resource-group <resource-group> \
--vnet-name <vnet-name> \
--name <cluster-subnet-name> \
--address-prefixes 172.19.1.0/24
Create a cluster subnet using theaz network vnet subnet createcommand.
az network vnet subnet create
az network vnet subnet create --resource-group <resource-group> \
--vnet-name <vnet-name> \
--name <cluster-subnet-name> \
--address-prefixes 172.19.1.0/24
az network vnet subnet create --resource-group <resource-group> \
--vnet-name <vnet-name> \
--name <cluster-subnet-name> \
--address-prefixes 172.19.1.0/24
Create a managed identity and give it permissions on the virtual network
Create a managed identity using theaz identity createcommand.az identity create --resource-group <resource-group> --name <managed-identity-name> --location <location>
Create a managed identity using theaz identity createcommand.
az identity create
az identity create --resource-group <resource-group> --name <managed-identity-name> --location <location>
az identity create --resource-group <resource-group> --name <managed-identity-name> --location <location>
Assign the Network Contributor role to the API server subnet using theaz role assignment createcommand.az role assignment create --scope <apiserver-subnet-resource-id> \
--role "Network Contributor" \
--assignee <managed-identity-client-id>
Assign the Network Contributor role to the API server subnet using theaz role assignment createcommand.
az role assignment create
az role assignment create --scope <apiserver-subnet-resource-id> \
--role "Network Contributor" \
--assignee <managed-identity-client-id>
az role assignment create --scope <apiserver-subnet-resource-id> \
--role "Network Contributor" \
--assignee <managed-identity-client-id>
Assign the Network Contributor role to the cluster subnet using theaz role assignment createcommand.az role assignment create --scope <cluster-subnet-resource-id> \
--role "Network Contributor" \
--assignee <managed-identity-client-id>
Assign the Network Contributor role to the cluster subnet using theaz role assignment createcommand.
az role assignment create
az role assignment create --scope <cluster-subnet-resource-id> \
--role "Network Contributor" \
--assignee <managed-identity-client-id>
az role assignment create --scope <cluster-subnet-resource-id> \
--role "Network Contributor" \
--assignee <managed-identity-client-id>
Deploy a public cluster
Deploy a public AKS cluster with API Server VNet integration using theaz aks createcommand with the--enable-api-server-vnet-integrationflag.az aks create --name <cluster-name> \
    --resource-group <resource-group> \
    --location <location> \
    --network-plugin azure \
    --enable-apiserver-vnet-integration \
    --vnet-subnet-id <cluster-subnet-resource-id> \
    --apiserver-subnet-id <apiserver-subnet-resource-id> \
    --assign-identity <managed-identity-resource-id> \
    --generate-ssh-keys
Deploy a public AKS cluster with API Server VNet integration using theaz aks createcommand with the--enable-api-server-vnet-integrationflag.
az aks create
--enable-api-server-vnet-integration
az aks create --name <cluster-name> \
    --resource-group <resource-group> \
    --location <location> \
    --network-plugin azure \
    --enable-apiserver-vnet-integration \
    --vnet-subnet-id <cluster-subnet-resource-id> \
    --apiserver-subnet-id <apiserver-subnet-resource-id> \
    --assign-identity <managed-identity-resource-id> \
    --generate-ssh-keys
az aks create --name <cluster-name> \
    --resource-group <resource-group> \
    --location <location> \
    --network-plugin azure \
    --enable-apiserver-vnet-integration \
    --vnet-subnet-id <cluster-subnet-resource-id> \
    --apiserver-subnet-id <apiserver-subnet-resource-id> \
    --assign-identity <managed-identity-resource-id> \
    --generate-ssh-keys
Deploy a private cluster
Deploy a private AKS cluster with API Server VNet integration using theaz aks createcommand with the--enable-api-server-vnet-integrationand--enable-private-clusterflags.az aks create --name <cluster-name> \
--resource-group <resource-group> \
--location <location> \
--network-plugin azure \
--enable-private-cluster \
--enable-apiserver-vnet-integration \
--vnet-subnet-id <cluster-subnet-resource-id> \
--apiserver-subnet-id <apiserver-subnet-resource-id> \
--assign-identity <managed-identity-resource-id> \
--generate-ssh-keys
Deploy a private AKS cluster with API Server VNet integration using theaz aks createcommand with the--enable-api-server-vnet-integrationand--enable-private-clusterflags.
az aks create
--enable-api-server-vnet-integration
--enable-private-cluster
az aks create --name <cluster-name> \
--resource-group <resource-group> \
--location <location> \
--network-plugin azure \
--enable-private-cluster \
--enable-apiserver-vnet-integration \
--vnet-subnet-id <cluster-subnet-resource-id> \
--apiserver-subnet-id <apiserver-subnet-resource-id> \
--assign-identity <managed-identity-resource-id> \
--generate-ssh-keys
az aks create --name <cluster-name> \
--resource-group <resource-group> \
--location <location> \
--network-plugin azure \
--enable-private-cluster \
--enable-apiserver-vnet-integration \
--vnet-subnet-id <cluster-subnet-resource-id> \
--apiserver-subnet-id <apiserver-subnet-resource-id> \
--assign-identity <managed-identity-resource-id> \
--generate-ssh-keys
Convert an existing AKS cluster to API Server VNet Integration
You can convert existing public/private AKS clusters to API Server VNet Integration clusters by supplying an API server subnet that meets the requirements listed earlier. These requirements include: in the same VNet as the cluster nodes, permissions granted for the AKS cluster identity, not used by other resources like private endpoint, and size of at least/28. Converting your cluster is a one-way migration. Clusters can't have API Server VNet Integration disabled after it's been enabled.
This upgrade performs a node-image version upgrade on all node pools and restarts all workloads while they undergo a rolling image upgrade.
Warning
Converting a cluster to API Server VNet Integration results in a change of the API Server IP address, though the hostname remains the same. If the IP address of the API server has been configured in any firewalls or network security group rules, those rules may need to be updated.
Update your cluster to API Server VNet Integration using theaz aks updatecommand with the--enable-apiserver-vnet-integrationflag.az aks update --name <cluster-name> \
--resource-group <resource-group> \
--enable-apiserver-vnet-integration \
--apiserver-subnet-id <apiserver-subnet-resource-id>
Update your cluster to API Server VNet Integration using theaz aks updatecommand with the--enable-apiserver-vnet-integrationflag.
az aks update
--enable-apiserver-vnet-integration
az aks update --name <cluster-name> \
--resource-group <resource-group> \
--enable-apiserver-vnet-integration \
--apiserver-subnet-id <apiserver-subnet-resource-id>
az aks update --name <cluster-name> \
--resource-group <resource-group> \
--enable-apiserver-vnet-integration \
--apiserver-subnet-id <apiserver-subnet-resource-id>
Enable or disable private cluster mode on an existing cluster with API Server VNet Integration
AKS clusters configured with API Server VNet Integration can have public network access/private cluster mode enabled or disabled without redeploying the cluster. The API server hostname doesn't change, but public DNS entries are modified or removed if necessary.
Note
--disable-private-clusteris currently in preview. For more information, seeReference and support levels.
--disable-private-cluster
Enable private cluster mode
Enable private cluster mode using theaz aks updatecommand with the--enable-private-clusterflag.az aks update --name <cluster-name> \
--resource-group <resource-group> \
--enable-private-cluster
Enable private cluster mode using theaz aks updatecommand with the--enable-private-clusterflag.
az aks update
--enable-private-cluster
az aks update --name <cluster-name> \
--resource-group <resource-group> \
--enable-private-cluster
az aks update --name <cluster-name> \
--resource-group <resource-group> \
--enable-private-cluster
Disable private cluster mode
Disable private cluster mode using theaz aks updatecommand with the--disable-private-clusterflag.az aks update --name <cluster-name> \
--resource-group <resource-group> \
--disable-private-cluster
Disable private cluster mode using theaz aks updatecommand with the--disable-private-clusterflag.
az aks update
--disable-private-cluster
az aks update --name <cluster-name> \
--resource-group <resource-group> \
--disable-private-cluster
az aks update --name <cluster-name> \
--resource-group <resource-group> \
--disable-private-cluster
Connect to cluster using kubectl
Configurekubectlto connect to your cluster using theaz aks get-credentialscommand.az aks get-credentials --resource-group <resource-group> --name <cluster-name>
Configurekubectlto connect to your cluster using theaz aks get-credentialscommand.
kubectl
az aks get-credentials
az aks get-credentials --resource-group <resource-group> --name <cluster-name>
az aks get-credentials --resource-group <resource-group> --name <cluster-name>
NSG security rules
All traffic within the VNet is allowed by default. But if you have added NSG rules to restrict traffic between different subnets, ensure that the NSG security rules permit the following types of communication:
Next steps
For associated best practices, seeBest practices for network connectivity and security in AKS.
Azure Kubernetes Service

Additional resources