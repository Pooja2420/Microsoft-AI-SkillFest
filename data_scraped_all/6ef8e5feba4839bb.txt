Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Microsoft.Compute virtualMachineScaleSets
Article
2024-12-09
2 contributors
In this article
Latest
2024-11-01
2024-07-01
2024-03-01
2023-09-01
2023-07-01
2023-03-01
2022-11-01
2022-08-01
2022-03-01
2021-11-01
2021-07-01
2021-04-01
2021-03-01
2020-12-01
2020-06-01
2019-12-01
2019-07-01
2019-03-01
2018-10-01
2018-06-01
2018-04-01
2017-12-01
2017-03-30
2016-04-30-preview
2016-03-30
2015-06-15
Bicep resource definition
The virtualMachineScaleSets resource type can be deployed with operations that target:
Resource groups- Seeresource group deployment commands
For a list of changed properties in each API version, seechange log.
Resource format
To create a Microsoft.Compute/virtualMachineScaleSets resource, add the following Bicep to your template.
resource symbolicname 'Microsoft.Compute/virtualMachineScaleSets@2024-11-01' = {
  extendedLocation: {
    name: 'string'
    type: 'string'
  }
  identity: {
    type: 'string'
    userAssignedIdentities: {
      {customized property}: {}
    }
  }
  location: 'string'
  name: 'string'
  plan: {
    name: 'string'
    product: 'string'
    promotionCode: 'string'
    publisher: 'string'
  }
  properties: {
    additionalCapabilities: {
      hibernationEnabled: bool
      ultraSSDEnabled: bool
    }
    automaticRepairsPolicy: {
      enabled: bool
      gracePeriod: 'string'
      repairAction: 'string'
    }
    constrainedMaximumCapacity: bool
    doNotRunExtensionsOnOverprovisionedVMs: bool
    hostGroup: {
      id: 'string'
    }
    orchestrationMode: 'string'
    overprovision: bool
    platformFaultDomainCount: int
    priorityMixPolicy: {
      baseRegularPriorityCount: int
      regularPriorityPercentageAboveBase: int
    }
    proximityPlacementGroup: {
      id: 'string'
    }
    resiliencyPolicy: {
      automaticZoneRebalancingPolicy: {
        enabled: bool
        rebalanceBehavior: 'string'
        rebalanceStrategy: 'string'
      }
      resilientVMCreationPolicy: {
        enabled: bool
      }
      resilientVMDeletionPolicy: {
        enabled: bool
      }
    }
    scaleInPolicy: {
      forceDeletion: bool
      prioritizeUnhealthyVMs: bool
      rules: [
        'string'
      ]
    }
    scheduledEventsPolicy: {
      scheduledEventsAdditionalPublishingTargets: {
        eventGridAndResourceGraph: {
          enable: bool
        }
      }
      userInitiatedReboot: {
        automaticallyApprove: bool
      }
      userInitiatedRedeploy: {
        automaticallyApprove: bool
      }
    }
    singlePlacementGroup: bool
    skuProfile: {
      allocationStrategy: 'string'
      vmSizes: [
        {
          name: 'string'
          rank: int
        }
      ]
    }
    spotRestorePolicy: {
      enabled: bool
      restoreTimeout: 'string'
    }
    upgradePolicy: {
      automaticOSUpgradePolicy: {
        disableAutomaticRollback: bool
        enableAutomaticOSUpgrade: bool
        osRollingUpgradeDeferral: bool
        useRollingUpgradePolicy: bool
      }
      mode: 'string'
      rollingUpgradePolicy: {
        enableCrossZoneUpgrade: bool
        maxBatchInstancePercent: int
        maxSurge: bool
        maxUnhealthyInstancePercent: int
        maxUnhealthyUpgradedInstancePercent: int
        pauseTimeBetweenBatches: 'string'
        prioritizeUnhealthyInstances: bool
        rollbackFailedInstancesOnPolicyBreach: bool
      }
    }
    virtualMachineProfile: {
      applicationProfile: {
        galleryApplications: [
          {
            configurationReference: 'string'
            enableAutomaticUpgrade: bool
            order: int
            packageReferenceId: 'string'
            tags: 'string'
            treatFailureAsDeploymentFailure: bool
          }
        ]
      }
      billingProfile: {
        maxPrice: int
      }
      capacityReservation: {
        capacityReservationGroup: {
          id: 'string'
        }
      }
      diagnosticsProfile: {
        bootDiagnostics: {
          enabled: bool
          storageUri: 'string'
        }
      }
      evictionPolicy: 'string'
      extensionProfile: {
        extensions: [
          {
            name: 'string'
            properties: {
              autoUpgradeMinorVersion: bool
              enableAutomaticUpgrade: bool
              forceUpdateTag: 'string'
              protectedSettings: any(...)
              protectedSettingsFromKeyVault: {
                secretUrl: 'string'
                sourceVault: {
                  id: 'string'
                }
              }
              provisionAfterExtensions: [
                'string'
              ]
              publisher: 'string'
              settings: any(...)
              suppressFailures: bool
              type: 'string'
              typeHandlerVersion: 'string'
            }
          }
        ]
        extensionsTimeBudget: 'string'
      }
      hardwareProfile: {
        vmSizeProperties: {
          vCPUsAvailable: int
          vCPUsPerCore: int
        }
      }
      licenseType: 'string'
      networkProfile: {
        healthProbe: {
          id: 'string'
        }
        networkApiVersion: 'string'
        networkInterfaceConfigurations: [
          {
            name: 'string'
            properties: {
              auxiliaryMode: 'string'
              auxiliarySku: 'string'
              deleteOption: 'string'
              disableTcpStateTracking: bool
              dnsSettings: {
                dnsServers: [
                  'string'
                ]
              }
              enableAcceleratedNetworking: bool
              enableFpga: bool
              enableIPForwarding: bool
              ipConfigurations: [
                {
                  name: 'string'
                  properties: {
                    applicationGatewayBackendAddressPools: [
                      {
                        id: 'string'
                      }
                    ]
                    applicationSecurityGroups: [
                      {
                        id: 'string'
                      }
                    ]
                    loadBalancerBackendAddressPools: [
                      {
                        id: 'string'
                      }
                    ]
                    loadBalancerInboundNatPools: [
                      {
                        id: 'string'
                      }
                    ]
                    primary: bool
                    privateIPAddressVersion: 'string'
                    publicIPAddressConfiguration: {
                      name: 'string'
                      properties: {
                        deleteOption: 'string'
                        dnsSettings: {
                          domainNameLabel: 'string'
                          domainNameLabelScope: 'string'
                        }
                        idleTimeoutInMinutes: int
                        ipTags: [
                          {
                            ipTagType: 'string'
                            tag: 'string'
                          }
                        ]
                        publicIPAddressVersion: 'string'
                        publicIPPrefix: {
                          id: 'string'
                        }
                      }
                      sku: {
                        name: 'string'
                        tier: 'string'
                      }
                    }
                    subnet: {
                      id: 'string'
                    }
                  }
                }
              ]
              networkSecurityGroup: {
                id: 'string'
              }
              primary: bool
            }
          }
        ]
      }
      osProfile: {
        adminPassword: 'string'
        adminUsername: 'string'
        allowExtensionOperations: bool
        computerNamePrefix: 'string'
        customData: 'string'
        linuxConfiguration: {
          disablePasswordAuthentication: bool
          enableVMAgentPlatformUpdates: bool
          patchSettings: {
            assessmentMode: 'string'
            automaticByPlatformSettings: {
              bypassPlatformSafetyChecksOnUserSchedule: bool
              rebootSetting: 'string'
            }
            patchMode: 'string'
          }
          provisionVMAgent: bool
          ssh: {
            publicKeys: [
              {
                keyData: 'string'
                path: 'string'
              }
            ]
          }
        }
        requireGuestProvisionSignal: bool
        secrets: [
          {
            sourceVault: {
              id: 'string'
            }
            vaultCertificates: [
              {
                certificateStore: 'string'
                certificateUrl: 'string'
              }
            ]
          }
        ]
        windowsConfiguration: {
          additionalUnattendContent: [
            {
              componentName: 'Microsoft-Windows-Shell-Setup'
              content: 'string'
              passName: 'OobeSystem'
              settingName: 'string'
            }
          ]
          enableAutomaticUpdates: bool
          patchSettings: {
            assessmentMode: 'string'
            automaticByPlatformSettings: {
              bypassPlatformSafetyChecksOnUserSchedule: bool
              rebootSetting: 'string'
            }
            enableHotpatching: bool
            patchMode: 'string'
          }
          provisionVMAgent: bool
          timeZone: 'string'
          winRM: {
            listeners: [
              {
                certificateUrl: 'string'
                protocol: 'string'
              }
            ]
          }
        }
      }
      priority: 'string'
      scheduledEventsProfile: {
        osImageNotificationProfile: {
          enable: bool
          notBeforeTimeout: 'string'
        }
        terminateNotificationProfile: {
          enable: bool
          notBeforeTimeout: 'string'
        }
      }
      securityPostureReference: {
        excludeExtensions: [
          'string'
        ]
        id: 'string'
        isOverridable: bool
      }
      securityProfile: {
        encryptionAtHost: bool
        encryptionIdentity: {
          userAssignedIdentityResourceId: 'string'
        }
        proxyAgentSettings: {
          enabled: bool
          imds: {
            inVMAccessControlProfileReferenceId: 'string'
            mode: 'string'
          }
          keyIncarnationId: int
          mode: 'string'
          wireServer: {
            inVMAccessControlProfileReferenceId: 'string'
            mode: 'string'
          }
        }
        securityType: 'string'
        uefiSettings: {
          secureBootEnabled: bool
          vTpmEnabled: bool
        }
      }
      serviceArtifactReference: {
        id: 'string'
      }
      storageProfile: {
        dataDisks: [
          {
            caching: 'string'
            createOption: 'string'
            deleteOption: 'string'
            diskIOPSReadWrite: int
            diskMBpsReadWrite: int
            diskSizeGB: int
            lun: int
            managedDisk: {
              diskEncryptionSet: {
                id: 'string'
              }
              securityProfile: {
                diskEncryptionSet: {
                  id: 'string'
                }
                securityEncryptionType: 'string'
              }
              storageAccountType: 'string'
            }
            name: 'string'
            writeAcceleratorEnabled: bool
          }
        ]
        diskControllerType: 'string'
        imageReference: {
          communityGalleryImageId: 'string'
          id: 'string'
          offer: 'string'
          publisher: 'string'
          sharedGalleryImageId: 'string'
          sku: 'string'
          version: 'string'
        }
        osDisk: {
          caching: 'string'
          createOption: 'string'
          deleteOption: 'string'
          diffDiskSettings: {
            option: 'string'
            placement: 'string'
          }
          diskSizeGB: int
          image: {
            uri: 'string'
          }
          managedDisk: {
            diskEncryptionSet: {
              id: 'string'
            }
            securityProfile: {
              diskEncryptionSet: {
                id: 'string'
              }
              securityEncryptionType: 'string'
            }
            storageAccountType: 'string'
          }
          name: 'string'
          osType: 'string'
          vhdContainers: [
            'string'
          ]
          writeAcceleratorEnabled: bool
        }
      }
      userData: 'string'
    }
    zonalPlatformFaultDomainAlignMode: 'string'
    zoneBalance: bool
  }
  sku: {
    capacity: int
    name: 'string'
    tier: 'string'
  }
  tags: {
    {customized property}: 'string'
  }
  zones: [
    'string'
  ]
}
resource symbolicname 'Microsoft.Compute/virtualMachineScaleSets@2024-11-01' = {
  extendedLocation: {
    name: 'string'
    type: 'string'
  }
  identity: {
    type: 'string'
    userAssignedIdentities: {
      {customized property}: {}
    }
  }
  location: 'string'
  name: 'string'
  plan: {
    name: 'string'
    product: 'string'
    promotionCode: 'string'
    publisher: 'string'
  }
  properties: {
    additionalCapabilities: {
      hibernationEnabled: bool
      ultraSSDEnabled: bool
    }
    automaticRepairsPolicy: {
      enabled: bool
      gracePeriod: 'string'
      repairAction: 'string'
    }
    constrainedMaximumCapacity: bool
    doNotRunExtensionsOnOverprovisionedVMs: bool
    hostGroup: {
      id: 'string'
    }
    orchestrationMode: 'string'
    overprovision: bool
    platformFaultDomainCount: int
    priorityMixPolicy: {
      baseRegularPriorityCount: int
      regularPriorityPercentageAboveBase: int
    }
    proximityPlacementGroup: {
      id: 'string'
    }
    resiliencyPolicy: {
      automaticZoneRebalancingPolicy: {
        enabled: bool
        rebalanceBehavior: 'string'
        rebalanceStrategy: 'string'
      }
      resilientVMCreationPolicy: {
        enabled: bool
      }
      resilientVMDeletionPolicy: {
        enabled: bool
      }
    }
    scaleInPolicy: {
      forceDeletion: bool
      prioritizeUnhealthyVMs: bool
      rules: [
        'string'
      ]
    }
    scheduledEventsPolicy: {
      scheduledEventsAdditionalPublishingTargets: {
        eventGridAndResourceGraph: {
          enable: bool
        }
      }
      userInitiatedReboot: {
        automaticallyApprove: bool
      }
      userInitiatedRedeploy: {
        automaticallyApprove: bool
      }
    }
    singlePlacementGroup: bool
    skuProfile: {
      allocationStrategy: 'string'
      vmSizes: [
        {
          name: 'string'
          rank: int
        }
      ]
    }
    spotRestorePolicy: {
      enabled: bool
      restoreTimeout: 'string'
    }
    upgradePolicy: {
      automaticOSUpgradePolicy: {
        disableAutomaticRollback: bool
        enableAutomaticOSUpgrade: bool
        osRollingUpgradeDeferral: bool
        useRollingUpgradePolicy: bool
      }
      mode: 'string'
      rollingUpgradePolicy: {
        enableCrossZoneUpgrade: bool
        maxBatchInstancePercent: int
        maxSurge: bool
        maxUnhealthyInstancePercent: int
        maxUnhealthyUpgradedInstancePercent: int
        pauseTimeBetweenBatches: 'string'
        prioritizeUnhealthyInstances: bool
        rollbackFailedInstancesOnPolicyBreach: bool
      }
    }
    virtualMachineProfile: {
      applicationProfile: {
        galleryApplications: [
          {
            configurationReference: 'string'
            enableAutomaticUpgrade: bool
            order: int
            packageReferenceId: 'string'
            tags: 'string'
            treatFailureAsDeploymentFailure: bool
          }
        ]
      }
      billingProfile: {
        maxPrice: int
      }
      capacityReservation: {
        capacityReservationGroup: {
          id: 'string'
        }
      }
      diagnosticsProfile: {
        bootDiagnostics: {
          enabled: bool
          storageUri: 'string'
        }
      }
      evictionPolicy: 'string'
      extensionProfile: {
        extensions: [
          {
            name: 'string'
            properties: {
              autoUpgradeMinorVersion: bool
              enableAutomaticUpgrade: bool
              forceUpdateTag: 'string'
              protectedSettings: any(...)
              protectedSettingsFromKeyVault: {
                secretUrl: 'string'
                sourceVault: {
                  id: 'string'
                }
              }
              provisionAfterExtensions: [
                'string'
              ]
              publisher: 'string'
              settings: any(...)
              suppressFailures: bool
              type: 'string'
              typeHandlerVersion: 'string'
            }
          }
        ]
        extensionsTimeBudget: 'string'
      }
      hardwareProfile: {
        vmSizeProperties: {
          vCPUsAvailable: int
          vCPUsPerCore: int
        }
      }
      licenseType: 'string'
      networkProfile: {
        healthProbe: {
          id: 'string'
        }
        networkApiVersion: 'string'
        networkInterfaceConfigurations: [
          {
            name: 'string'
            properties: {
              auxiliaryMode: 'string'
              auxiliarySku: 'string'
              deleteOption: 'string'
              disableTcpStateTracking: bool
              dnsSettings: {
                dnsServers: [
                  'string'
                ]
              }
              enableAcceleratedNetworking: bool
              enableFpga: bool
              enableIPForwarding: bool
              ipConfigurations: [
                {
                  name: 'string'
                  properties: {
                    applicationGatewayBackendAddressPools: [
                      {
                        id: 'string'
                      }
                    ]
                    applicationSecurityGroups: [
                      {
                        id: 'string'
                      }
                    ]
                    loadBalancerBackendAddressPools: [
                      {
                        id: 'string'
                      }
                    ]
                    loadBalancerInboundNatPools: [
                      {
                        id: 'string'
                      }
                    ]
                    primary: bool
                    privateIPAddressVersion: 'string'
                    publicIPAddressConfiguration: {
                      name: 'string'
                      properties: {
                        deleteOption: 'string'
                        dnsSettings: {
                          domainNameLabel: 'string'
                          domainNameLabelScope: 'string'
                        }
                        idleTimeoutInMinutes: int
                        ipTags: [
                          {
                            ipTagType: 'string'
                            tag: 'string'
                          }
                        ]
                        publicIPAddressVersion: 'string'
                        publicIPPrefix: {
                          id: 'string'
                        }
                      }
                      sku: {
                        name: 'string'
                        tier: 'string'
                      }
                    }
                    subnet: {
                      id: 'string'
                    }
                  }
                }
              ]
              networkSecurityGroup: {
                id: 'string'
              }
              primary: bool
            }
          }
        ]
      }
      osProfile: {
        adminPassword: 'string'
        adminUsername: 'string'
        allowExtensionOperations: bool
        computerNamePrefix: 'string'
        customData: 'string'
        linuxConfiguration: {
          disablePasswordAuthentication: bool
          enableVMAgentPlatformUpdates: bool
          patchSettings: {
            assessmentMode: 'string'
            automaticByPlatformSettings: {
              bypassPlatformSafetyChecksOnUserSchedule: bool
              rebootSetting: 'string'
            }
            patchMode: 'string'
          }
          provisionVMAgent: bool
          ssh: {
            publicKeys: [
              {
                keyData: 'string'
                path: 'string'
              }
            ]
          }
        }
        requireGuestProvisionSignal: bool
        secrets: [
          {
            sourceVault: {
              id: 'string'
            }
            vaultCertificates: [
              {
                certificateStore: 'string'
                certificateUrl: 'string'
              }
            ]
          }
        ]
        windowsConfiguration: {
          additionalUnattendContent: [
            {
              componentName: 'Microsoft-Windows-Shell-Setup'
              content: 'string'
              passName: 'OobeSystem'
              settingName: 'string'
            }
          ]
          enableAutomaticUpdates: bool
          patchSettings: {
            assessmentMode: 'string'
            automaticByPlatformSettings: {
              bypassPlatformSafetyChecksOnUserSchedule: bool
              rebootSetting: 'string'
            }
            enableHotpatching: bool
            patchMode: 'string'
          }
          provisionVMAgent: bool
          timeZone: 'string'
          winRM: {
            listeners: [
              {
                certificateUrl: 'string'
                protocol: 'string'
              }
            ]
          }
        }
      }
      priority: 'string'
      scheduledEventsProfile: {
        osImageNotificationProfile: {
          enable: bool
          notBeforeTimeout: 'string'
        }
        terminateNotificationProfile: {
          enable: bool
          notBeforeTimeout: 'string'
        }
      }
      securityPostureReference: {
        excludeExtensions: [
          'string'
        ]
        id: 'string'
        isOverridable: bool
      }
      securityProfile: {
        encryptionAtHost: bool
        encryptionIdentity: {
          userAssignedIdentityResourceId: 'string'
        }
        proxyAgentSettings: {
          enabled: bool
          imds: {
            inVMAccessControlProfileReferenceId: 'string'
            mode: 'string'
          }
          keyIncarnationId: int
          mode: 'string'
          wireServer: {
            inVMAccessControlProfileReferenceId: 'string'
            mode: 'string'
          }
        }
        securityType: 'string'
        uefiSettings: {
          secureBootEnabled: bool
          vTpmEnabled: bool
        }
      }
      serviceArtifactReference: {
        id: 'string'
      }
      storageProfile: {
        dataDisks: [
          {
            caching: 'string'
            createOption: 'string'
            deleteOption: 'string'
            diskIOPSReadWrite: int
            diskMBpsReadWrite: int
            diskSizeGB: int
            lun: int
            managedDisk: {
              diskEncryptionSet: {
                id: 'string'
              }
              securityProfile: {
                diskEncryptionSet: {
                  id: 'string'
                }
                securityEncryptionType: 'string'
              }
              storageAccountType: 'string'
            }
            name: 'string'
            writeAcceleratorEnabled: bool
          }
        ]
        diskControllerType: 'string'
        imageReference: {
          communityGalleryImageId: 'string'
          id: 'string'
          offer: 'string'
          publisher: 'string'
          sharedGalleryImageId: 'string'
          sku: 'string'
          version: 'string'
        }
        osDisk: {
          caching: 'string'
          createOption: 'string'
          deleteOption: 'string'
          diffDiskSettings: {
            option: 'string'
            placement: 'string'
          }
          diskSizeGB: int
          image: {
            uri: 'string'
          }
          managedDisk: {
            diskEncryptionSet: {
              id: 'string'
            }
            securityProfile: {
              diskEncryptionSet: {
                id: 'string'
              }
              securityEncryptionType: 'string'
            }
            storageAccountType: 'string'
          }
          name: 'string'
          osType: 'string'
          vhdContainers: [
            'string'
          ]
          writeAcceleratorEnabled: bool
        }
      }
      userData: 'string'
    }
    zonalPlatformFaultDomainAlignMode: 'string'
    zoneBalance: bool
  }
  sku: {
    capacity: int
    name: 'string'
    tier: 'string'
  }
  tags: {
    {customized property}: 'string'
  }
  zones: [
    'string'
  ]
}
Property Values
AdditionalCapabilities
AdditionalUnattendContent
ApiEntityReference
ApplicationProfile
AutomaticOSUpgradePolicy
AutomaticRepairsPolicy
AutomaticZoneRebalancingPolicy
BillingProfile
BootDiagnostics
CapacityReservationProfile
DiagnosticsProfile
DiffDiskSettings
DiskEncryptionSetParameters
EncryptionIdentity
EventGridAndResourceGraph
ExtendedLocation
HostEndpointSettings
ImageReference
KeyVaultSecretReference
LinuxConfiguration
LinuxPatchSettings
LinuxVMGuestPatchAutomaticByPlatformSettings
Microsoft.Compute/virtualMachineScaleSets
OSImageNotificationProfile
PatchSettings
Plan
PriorityMixPolicy
ProxyAgentSettings
PublicIPAddressSku
ResiliencyPolicy
ResilientVMCreationPolicy
ResilientVMDeletionPolicy
ResourceTags
RollingUpgradePolicy
ScaleInPolicy
ScheduledEventsAdditionalPublishingTargets
ScheduledEventsPolicy
ScheduledEventsProfile
SecurityPostureReference
SecurityProfile
ServiceArtifactReference
Sku
SkuProfile
SkuProfileVMSize
SpotRestorePolicy
SshConfiguration
SshPublicKey
SubResource
TerminateNotificationProfile
UefiSettings
UpgradePolicy
UserAssignedIdentities
UserAssignedIdentitiesValue
UserInitiatedReboot
UserInitiatedRedeploy
VaultCertificate
VaultSecretGroup
VirtualHardDisk
VirtualMachineScaleSetDataDisk
VirtualMachineScaleSetExtension
VirtualMachineScaleSetExtensionProfile
VirtualMachineScaleSetExtensionProperties
VirtualMachineScaleSetHardwareProfile
VirtualMachineScaleSetIdentity
VirtualMachineScaleSetIPConfiguration
VirtualMachineScaleSetIPConfigurationProperties
VirtualMachineScaleSetIpTag
VirtualMachineScaleSetManagedDiskParameters
VirtualMachineScaleSetNetworkConfiguration
VirtualMachineScaleSetNetworkConfigurationDnsSettings
VirtualMachineScaleSetNetworkConfigurationProperties
VirtualMachineScaleSetNetworkProfile
VirtualMachineScaleSetOSDisk
VirtualMachineScaleSetOSProfile
VirtualMachineScaleSetProperties
VirtualMachineScaleSetPublicIPAddressConfiguration
VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings
VirtualMachineScaleSetPublicIPAddressConfigurationProperties
VirtualMachineScaleSetStorageProfile
VirtualMachineScaleSetVMProfile
VMDiskSecurityProfile
VMGalleryApplication
VMSizeProperties
WindowsConfiguration
WindowsVMGuestPatchAutomaticByPlatformSettings
WinRMConfiguration
WinRMListener
Usage Examples
Azure Verified Modules
The followingAzure Verified Modulescan be used to deploy this resource type.
Azure Quickstart Samples
The followingAzure Quickstart templatescontain Bicep samples for deploying this resource type.
ARM template resource definition
The virtualMachineScaleSets resource type can be deployed with operations that target:
Resource groups- Seeresource group deployment commands
For a list of changed properties in each API version, seechange log.
Resource format
To create a Microsoft.Compute/virtualMachineScaleSets resource, add the following JSON to your template.
{
  "type": "Microsoft.Compute/virtualMachineScaleSets",
  "apiVersion": "2024-11-01",
  "name": "string",
  "extendedLocation": {
    "name": "string",
    "type": "string"
  },
  "identity": {
    "type": "string",
    "userAssignedIdentities": {
      "{customized property}": {
      }
    }
  },
  "location": "string",
  "plan": {
    "name": "string",
    "product": "string",
    "promotionCode": "string",
    "publisher": "string"
  },
  "properties": {
    "additionalCapabilities": {
      "hibernationEnabled": "bool",
      "ultraSSDEnabled": "bool"
    },
    "automaticRepairsPolicy": {
      "enabled": "bool",
      "gracePeriod": "string",
      "repairAction": "string"
    },
    "constrainedMaximumCapacity": "bool",
    "doNotRunExtensionsOnOverprovisionedVMs": "bool",
    "hostGroup": {
      "id": "string"
    },
    "orchestrationMode": "string",
    "overprovision": "bool",
    "platformFaultDomainCount": "int",
    "priorityMixPolicy": {
      "baseRegularPriorityCount": "int",
      "regularPriorityPercentageAboveBase": "int"
    },
    "proximityPlacementGroup": {
      "id": "string"
    },
    "resiliencyPolicy": {
      "automaticZoneRebalancingPolicy": {
        "enabled": "bool",
        "rebalanceBehavior": "string",
        "rebalanceStrategy": "string"
      },
      "resilientVMCreationPolicy": {
        "enabled": "bool"
      },
      "resilientVMDeletionPolicy": {
        "enabled": "bool"
      }
    },
    "scaleInPolicy": {
      "forceDeletion": "bool",
      "prioritizeUnhealthyVMs": "bool",
      "rules": [ "string" ]
    },
    "scheduledEventsPolicy": {
      "scheduledEventsAdditionalPublishingTargets": {
        "eventGridAndResourceGraph": {
          "enable": "bool"
        }
      },
      "userInitiatedReboot": {
        "automaticallyApprove": "bool"
      },
      "userInitiatedRedeploy": {
        "automaticallyApprove": "bool"
      }
    },
    "singlePlacementGroup": "bool",
    "skuProfile": {
      "allocationStrategy": "string",
      "vmSizes": [
        {
          "name": "string",
          "rank": "int"
        }
      ]
    },
    "spotRestorePolicy": {
      "enabled": "bool",
      "restoreTimeout": "string"
    },
    "upgradePolicy": {
      "automaticOSUpgradePolicy": {
        "disableAutomaticRollback": "bool",
        "enableAutomaticOSUpgrade": "bool",
        "osRollingUpgradeDeferral": "bool",
        "useRollingUpgradePolicy": "bool"
      },
      "mode": "string",
      "rollingUpgradePolicy": {
        "enableCrossZoneUpgrade": "bool",
        "maxBatchInstancePercent": "int",
        "maxSurge": "bool",
        "maxUnhealthyInstancePercent": "int",
        "maxUnhealthyUpgradedInstancePercent": "int",
        "pauseTimeBetweenBatches": "string",
        "prioritizeUnhealthyInstances": "bool",
        "rollbackFailedInstancesOnPolicyBreach": "bool"
      }
    },
    "virtualMachineProfile": {
      "applicationProfile": {
        "galleryApplications": [
          {
            "configurationReference": "string",
            "enableAutomaticUpgrade": "bool",
            "order": "int",
            "packageReferenceId": "string",
            "tags": "string",
            "treatFailureAsDeploymentFailure": "bool"
          }
        ]
      },
      "billingProfile": {
        "maxPrice": "int"
      },
      "capacityReservation": {
        "capacityReservationGroup": {
          "id": "string"
        }
      },
      "diagnosticsProfile": {
        "bootDiagnostics": {
          "enabled": "bool",
          "storageUri": "string"
        }
      },
      "evictionPolicy": "string",
      "extensionProfile": {
        "extensions": [
          {
            "name": "string",
            "properties": {
              "autoUpgradeMinorVersion": "bool",
              "enableAutomaticUpgrade": "bool",
              "forceUpdateTag": "string",
              "protectedSettings": {},
              "protectedSettingsFromKeyVault": {
                "secretUrl": "string",
                "sourceVault": {
                  "id": "string"
                }
              },
              "provisionAfterExtensions": [ "string" ],
              "publisher": "string",
              "settings": {},
              "suppressFailures": "bool",
              "type": "string",
              "typeHandlerVersion": "string"
            }
          }
        ],
        "extensionsTimeBudget": "string"
      },
      "hardwareProfile": {
        "vmSizeProperties": {
          "vCPUsAvailable": "int",
          "vCPUsPerCore": "int"
        }
      },
      "licenseType": "string",
      "networkProfile": {
        "healthProbe": {
          "id": "string"
        },
        "networkApiVersion": "string",
        "networkInterfaceConfigurations": [
          {
            "name": "string",
            "properties": {
              "auxiliaryMode": "string",
              "auxiliarySku": "string",
              "deleteOption": "string",
              "disableTcpStateTracking": "bool",
              "dnsSettings": {
                "dnsServers": [ "string" ]
              },
              "enableAcceleratedNetworking": "bool",
              "enableFpga": "bool",
              "enableIPForwarding": "bool",
              "ipConfigurations": [
                {
                  "name": "string",
                  "properties": {
                    "applicationGatewayBackendAddressPools": [
                      {
                        "id": "string"
                      }
                    ],
                    "applicationSecurityGroups": [
                      {
                        "id": "string"
                      }
                    ],
                    "loadBalancerBackendAddressPools": [
                      {
                        "id": "string"
                      }
                    ],
                    "loadBalancerInboundNatPools": [
                      {
                        "id": "string"
                      }
                    ],
                    "primary": "bool",
                    "privateIPAddressVersion": "string",
                    "publicIPAddressConfiguration": {
                      "name": "string",
                      "properties": {
                        "deleteOption": "string",
                        "dnsSettings": {
                          "domainNameLabel": "string",
                          "domainNameLabelScope": "string"
                        },
                        "idleTimeoutInMinutes": "int",
                        "ipTags": [
                          {
                            "ipTagType": "string",
                            "tag": "string"
                          }
                        ],
                        "publicIPAddressVersion": "string",
                        "publicIPPrefix": {
                          "id": "string"
                        }
                      },
                      "sku": {
                        "name": "string",
                        "tier": "string"
                      }
                    },
                    "subnet": {
                      "id": "string"
                    }
                  }
                }
              ],
              "networkSecurityGroup": {
                "id": "string"
              },
              "primary": "bool"
            }
          }
        ]
      },
      "osProfile": {
        "adminPassword": "string",
        "adminUsername": "string",
        "allowExtensionOperations": "bool",
        "computerNamePrefix": "string",
        "customData": "string",
        "linuxConfiguration": {
          "disablePasswordAuthentication": "bool",
          "enableVMAgentPlatformUpdates": "bool",
          "patchSettings": {
            "assessmentMode": "string",
            "automaticByPlatformSettings": {
              "bypassPlatformSafetyChecksOnUserSchedule": "bool",
              "rebootSetting": "string"
            },
            "patchMode": "string"
          },
          "provisionVMAgent": "bool",
          "ssh": {
            "publicKeys": [
              {
                "keyData": "string",
                "path": "string"
              }
            ]
          }
        },
        "requireGuestProvisionSignal": "bool",
        "secrets": [
          {
            "sourceVault": {
              "id": "string"
            },
            "vaultCertificates": [
              {
                "certificateStore": "string",
                "certificateUrl": "string"
              }
            ]
          }
        ],
        "windowsConfiguration": {
          "additionalUnattendContent": [
            {
              "componentName": "Microsoft-Windows-Shell-Setup",
              "content": "string",
              "passName": "OobeSystem",
              "settingName": "string"
            }
          ],
          "enableAutomaticUpdates": "bool",
          "patchSettings": {
            "assessmentMode": "string",
            "automaticByPlatformSettings": {
              "bypassPlatformSafetyChecksOnUserSchedule": "bool",
              "rebootSetting": "string"
            },
            "enableHotpatching": "bool",
            "patchMode": "string"
          },
          "provisionVMAgent": "bool",
          "timeZone": "string",
          "winRM": {
            "listeners": [
              {
                "certificateUrl": "string",
                "protocol": "string"
              }
            ]
          }
        }
      },
      "priority": "string",
      "scheduledEventsProfile": {
        "osImageNotificationProfile": {
          "enable": "bool",
          "notBeforeTimeout": "string"
        },
        "terminateNotificationProfile": {
          "enable": "bool",
          "notBeforeTimeout": "string"
        }
      },
      "securityPostureReference": {
        "excludeExtensions": [ "string" ],
        "id": "string",
        "isOverridable": "bool"
      },
      "securityProfile": {
        "encryptionAtHost": "bool",
        "encryptionIdentity": {
          "userAssignedIdentityResourceId": "string"
        },
        "proxyAgentSettings": {
          "enabled": "bool",
          "imds": {
            "inVMAccessControlProfileReferenceId": "string",
            "mode": "string"
          },
          "keyIncarnationId": "int",
          "mode": "string",
          "wireServer": {
            "inVMAccessControlProfileReferenceId": "string",
            "mode": "string"
          }
        },
        "securityType": "string",
        "uefiSettings": {
          "secureBootEnabled": "bool",
          "vTpmEnabled": "bool"
        }
      },
      "serviceArtifactReference": {
        "id": "string"
      },
      "storageProfile": {
        "dataDisks": [
          {
            "caching": "string",
            "createOption": "string",
            "deleteOption": "string",
            "diskIOPSReadWrite": "int",
            "diskMBpsReadWrite": "int",
            "diskSizeGB": "int",
            "lun": "int",
            "managedDisk": {
              "diskEncryptionSet": {
                "id": "string"
              },
              "securityProfile": {
                "diskEncryptionSet": {
                  "id": "string"
                },
                "securityEncryptionType": "string"
              },
              "storageAccountType": "string"
            },
            "name": "string",
            "writeAcceleratorEnabled": "bool"
          }
        ],
        "diskControllerType": "string",
        "imageReference": {
          "communityGalleryImageId": "string",
          "id": "string",
          "offer": "string",
          "publisher": "string",
          "sharedGalleryImageId": "string",
          "sku": "string",
          "version": "string"
        },
        "osDisk": {
          "caching": "string",
          "createOption": "string",
          "deleteOption": "string",
          "diffDiskSettings": {
            "option": "string",
            "placement": "string"
          },
          "diskSizeGB": "int",
          "image": {
            "uri": "string"
          },
          "managedDisk": {
            "diskEncryptionSet": {
              "id": "string"
            },
            "securityProfile": {
              "diskEncryptionSet": {
                "id": "string"
              },
              "securityEncryptionType": "string"
            },
            "storageAccountType": "string"
          },
          "name": "string",
          "osType": "string",
          "vhdContainers": [ "string" ],
          "writeAcceleratorEnabled": "bool"
        }
      },
      "userData": "string"
    },
    "zonalPlatformFaultDomainAlignMode": "string",
    "zoneBalance": "bool"
  },
  "sku": {
    "capacity": "int",
    "name": "string",
    "tier": "string"
  },
  "tags": {
    "{customized property}": "string"
  },
  "zones": [ "string" ]
}
{
  "type": "Microsoft.Compute/virtualMachineScaleSets",
  "apiVersion": "2024-11-01",
  "name": "string",
  "extendedLocation": {
    "name": "string",
    "type": "string"
  },
  "identity": {
    "type": "string",
    "userAssignedIdentities": {
      "{customized property}": {
      }
    }
  },
  "location": "string",
  "plan": {
    "name": "string",
    "product": "string",
    "promotionCode": "string",
    "publisher": "string"
  },
  "properties": {
    "additionalCapabilities": {
      "hibernationEnabled": "bool",
      "ultraSSDEnabled": "bool"
    },
    "automaticRepairsPolicy": {
      "enabled": "bool",
      "gracePeriod": "string",
      "repairAction": "string"
    },
    "constrainedMaximumCapacity": "bool",
    "doNotRunExtensionsOnOverprovisionedVMs": "bool",
    "hostGroup": {
      "id": "string"
    },
    "orchestrationMode": "string",
    "overprovision": "bool",
    "platformFaultDomainCount": "int",
    "priorityMixPolicy": {
      "baseRegularPriorityCount": "int",
      "regularPriorityPercentageAboveBase": "int"
    },
    "proximityPlacementGroup": {
      "id": "string"
    },
    "resiliencyPolicy": {
      "automaticZoneRebalancingPolicy": {
        "enabled": "bool",
        "rebalanceBehavior": "string",
        "rebalanceStrategy": "string"
      },
      "resilientVMCreationPolicy": {
        "enabled": "bool"
      },
      "resilientVMDeletionPolicy": {
        "enabled": "bool"
      }
    },
    "scaleInPolicy": {
      "forceDeletion": "bool",
      "prioritizeUnhealthyVMs": "bool",
      "rules": [ "string" ]
    },
    "scheduledEventsPolicy": {
      "scheduledEventsAdditionalPublishingTargets": {
        "eventGridAndResourceGraph": {
          "enable": "bool"
        }
      },
      "userInitiatedReboot": {
        "automaticallyApprove": "bool"
      },
      "userInitiatedRedeploy": {
        "automaticallyApprove": "bool"
      }
    },
    "singlePlacementGroup": "bool",
    "skuProfile": {
      "allocationStrategy": "string",
      "vmSizes": [
        {
          "name": "string",
          "rank": "int"
        }
      ]
    },
    "spotRestorePolicy": {
      "enabled": "bool",
      "restoreTimeout": "string"
    },
    "upgradePolicy": {
      "automaticOSUpgradePolicy": {
        "disableAutomaticRollback": "bool",
        "enableAutomaticOSUpgrade": "bool",
        "osRollingUpgradeDeferral": "bool",
        "useRollingUpgradePolicy": "bool"
      },
      "mode": "string",
      "rollingUpgradePolicy": {
        "enableCrossZoneUpgrade": "bool",
        "maxBatchInstancePercent": "int",
        "maxSurge": "bool",
        "maxUnhealthyInstancePercent": "int",
        "maxUnhealthyUpgradedInstancePercent": "int",
        "pauseTimeBetweenBatches": "string",
        "prioritizeUnhealthyInstances": "bool",
        "rollbackFailedInstancesOnPolicyBreach": "bool"
      }
    },
    "virtualMachineProfile": {
      "applicationProfile": {
        "galleryApplications": [
          {
            "configurationReference": "string",
            "enableAutomaticUpgrade": "bool",
            "order": "int",
            "packageReferenceId": "string",
            "tags": "string",
            "treatFailureAsDeploymentFailure": "bool"
          }
        ]
      },
      "billingProfile": {
        "maxPrice": "int"
      },
      "capacityReservation": {
        "capacityReservationGroup": {
          "id": "string"
        }
      },
      "diagnosticsProfile": {
        "bootDiagnostics": {
          "enabled": "bool",
          "storageUri": "string"
        }
      },
      "evictionPolicy": "string",
      "extensionProfile": {
        "extensions": [
          {
            "name": "string",
            "properties": {
              "autoUpgradeMinorVersion": "bool",
              "enableAutomaticUpgrade": "bool",
              "forceUpdateTag": "string",
              "protectedSettings": {},
              "protectedSettingsFromKeyVault": {
                "secretUrl": "string",
                "sourceVault": {
                  "id": "string"
                }
              },
              "provisionAfterExtensions": [ "string" ],
              "publisher": "string",
              "settings": {},
              "suppressFailures": "bool",
              "type": "string",
              "typeHandlerVersion": "string"
            }
          }
        ],
        "extensionsTimeBudget": "string"
      },
      "hardwareProfile": {
        "vmSizeProperties": {
          "vCPUsAvailable": "int",
          "vCPUsPerCore": "int"
        }
      },
      "licenseType": "string",
      "networkProfile": {
        "healthProbe": {
          "id": "string"
        },
        "networkApiVersion": "string",
        "networkInterfaceConfigurations": [
          {
            "name": "string",
            "properties": {
              "auxiliaryMode": "string",
              "auxiliarySku": "string",
              "deleteOption": "string",
              "disableTcpStateTracking": "bool",
              "dnsSettings": {
                "dnsServers": [ "string" ]
              },
              "enableAcceleratedNetworking": "bool",
              "enableFpga": "bool",
              "enableIPForwarding": "bool",
              "ipConfigurations": [
                {
                  "name": "string",
                  "properties": {
                    "applicationGatewayBackendAddressPools": [
                      {
                        "id": "string"
                      }
                    ],
                    "applicationSecurityGroups": [
                      {
                        "id": "string"
                      }
                    ],
                    "loadBalancerBackendAddressPools": [
                      {
                        "id": "string"
                      }
                    ],
                    "loadBalancerInboundNatPools": [
                      {
                        "id": "string"
                      }
                    ],
                    "primary": "bool",
                    "privateIPAddressVersion": "string",
                    "publicIPAddressConfiguration": {
                      "name": "string",
                      "properties": {
                        "deleteOption": "string",
                        "dnsSettings": {
                          "domainNameLabel": "string",
                          "domainNameLabelScope": "string"
                        },
                        "idleTimeoutInMinutes": "int",
                        "ipTags": [
                          {
                            "ipTagType": "string",
                            "tag": "string"
                          }
                        ],
                        "publicIPAddressVersion": "string",
                        "publicIPPrefix": {
                          "id": "string"
                        }
                      },
                      "sku": {
                        "name": "string",
                        "tier": "string"
                      }
                    },
                    "subnet": {
                      "id": "string"
                    }
                  }
                }
              ],
              "networkSecurityGroup": {
                "id": "string"
              },
              "primary": "bool"
            }
          }
        ]
      },
      "osProfile": {
        "adminPassword": "string",
        "adminUsername": "string",
        "allowExtensionOperations": "bool",
        "computerNamePrefix": "string",
        "customData": "string",
        "linuxConfiguration": {
          "disablePasswordAuthentication": "bool",
          "enableVMAgentPlatformUpdates": "bool",
          "patchSettings": {
            "assessmentMode": "string",
            "automaticByPlatformSettings": {
              "bypassPlatformSafetyChecksOnUserSchedule": "bool",
              "rebootSetting": "string"
            },
            "patchMode": "string"
          },
          "provisionVMAgent": "bool",
          "ssh": {
            "publicKeys": [
              {
                "keyData": "string",
                "path": "string"
              }
            ]
          }
        },
        "requireGuestProvisionSignal": "bool",
        "secrets": [
          {
            "sourceVault": {
              "id": "string"
            },
            "vaultCertificates": [
              {
                "certificateStore": "string",
                "certificateUrl": "string"
              }
            ]
          }
        ],
        "windowsConfiguration": {
          "additionalUnattendContent": [
            {
              "componentName": "Microsoft-Windows-Shell-Setup",
              "content": "string",
              "passName": "OobeSystem",
              "settingName": "string"
            }
          ],
          "enableAutomaticUpdates": "bool",
          "patchSettings": {
            "assessmentMode": "string",
            "automaticByPlatformSettings": {
              "bypassPlatformSafetyChecksOnUserSchedule": "bool",
              "rebootSetting": "string"
            },
            "enableHotpatching": "bool",
            "patchMode": "string"
          },
          "provisionVMAgent": "bool",
          "timeZone": "string",
          "winRM": {
            "listeners": [
              {
                "certificateUrl": "string",
                "protocol": "string"
              }
            ]
          }
        }
      },
      "priority": "string",
      "scheduledEventsProfile": {
        "osImageNotificationProfile": {
          "enable": "bool",
          "notBeforeTimeout": "string"
        },
        "terminateNotificationProfile": {
          "enable": "bool",
          "notBeforeTimeout": "string"
        }
      },
      "securityPostureReference": {
        "excludeExtensions": [ "string" ],
        "id": "string",
        "isOverridable": "bool"
      },
      "securityProfile": {
        "encryptionAtHost": "bool",
        "encryptionIdentity": {
          "userAssignedIdentityResourceId": "string"
        },
        "proxyAgentSettings": {
          "enabled": "bool",
          "imds": {
            "inVMAccessControlProfileReferenceId": "string",
            "mode": "string"
          },
          "keyIncarnationId": "int",
          "mode": "string",
          "wireServer": {
            "inVMAccessControlProfileReferenceId": "string",
            "mode": "string"
          }
        },
        "securityType": "string",
        "uefiSettings": {
          "secureBootEnabled": "bool",
          "vTpmEnabled": "bool"
        }
      },
      "serviceArtifactReference": {
        "id": "string"
      },
      "storageProfile": {
        "dataDisks": [
          {
            "caching": "string",
            "createOption": "string",
            "deleteOption": "string",
            "diskIOPSReadWrite": "int",
            "diskMBpsReadWrite": "int",
            "diskSizeGB": "int",
            "lun": "int",
            "managedDisk": {
              "diskEncryptionSet": {
                "id": "string"
              },
              "securityProfile": {
                "diskEncryptionSet": {
                  "id": "string"
                },
                "securityEncryptionType": "string"
              },
              "storageAccountType": "string"
            },
            "name": "string",
            "writeAcceleratorEnabled": "bool"
          }
        ],
        "diskControllerType": "string",
        "imageReference": {
          "communityGalleryImageId": "string",
          "id": "string",
          "offer": "string",
          "publisher": "string",
          "sharedGalleryImageId": "string",
          "sku": "string",
          "version": "string"
        },
        "osDisk": {
          "caching": "string",
          "createOption": "string",
          "deleteOption": "string",
          "diffDiskSettings": {
            "option": "string",
            "placement": "string"
          },
          "diskSizeGB": "int",
          "image": {
            "uri": "string"
          },
          "managedDisk": {
            "diskEncryptionSet": {
              "id": "string"
            },
            "securityProfile": {
              "diskEncryptionSet": {
                "id": "string"
              },
              "securityEncryptionType": "string"
            },
            "storageAccountType": "string"
          },
          "name": "string",
          "osType": "string",
          "vhdContainers": [ "string" ],
          "writeAcceleratorEnabled": "bool"
        }
      },
      "userData": "string"
    },
    "zonalPlatformFaultDomainAlignMode": "string",
    "zoneBalance": "bool"
  },
  "sku": {
    "capacity": "int",
    "name": "string",
    "tier": "string"
  },
  "tags": {
    "{customized property}": "string"
  },
  "zones": [ "string" ]
}
Property Values
AdditionalCapabilities
AdditionalUnattendContent
ApiEntityReference
ApplicationProfile
AutomaticOSUpgradePolicy
AutomaticRepairsPolicy
AutomaticZoneRebalancingPolicy
BillingProfile
BootDiagnostics
CapacityReservationProfile
DiagnosticsProfile
DiffDiskSettings
DiskEncryptionSetParameters
EncryptionIdentity
EventGridAndResourceGraph
ExtendedLocation
HostEndpointSettings
ImageReference
KeyVaultSecretReference
LinuxConfiguration
LinuxPatchSettings
LinuxVMGuestPatchAutomaticByPlatformSettings
Microsoft.Compute/virtualMachineScaleSets
OSImageNotificationProfile
PatchSettings
Plan
PriorityMixPolicy
ProxyAgentSettings
PublicIPAddressSku
ResiliencyPolicy
ResilientVMCreationPolicy
ResilientVMDeletionPolicy
ResourceTags
RollingUpgradePolicy
ScaleInPolicy
ScheduledEventsAdditionalPublishingTargets
ScheduledEventsPolicy
ScheduledEventsProfile
SecurityPostureReference
SecurityProfile
ServiceArtifactReference
Sku
SkuProfile
SkuProfileVMSize
SpotRestorePolicy
SshConfiguration
SshPublicKey
SubResource
TerminateNotificationProfile
UefiSettings
UpgradePolicy
UserAssignedIdentities
UserAssignedIdentitiesValue
UserInitiatedReboot
UserInitiatedRedeploy
VaultCertificate
VaultSecretGroup
VirtualHardDisk
VirtualMachineScaleSetDataDisk
VirtualMachineScaleSetExtension
VirtualMachineScaleSetExtensionProfile
VirtualMachineScaleSetExtensionProperties
VirtualMachineScaleSetHardwareProfile
VirtualMachineScaleSetIdentity
VirtualMachineScaleSetIPConfiguration
VirtualMachineScaleSetIPConfigurationProperties
VirtualMachineScaleSetIpTag
VirtualMachineScaleSetManagedDiskParameters
VirtualMachineScaleSetNetworkConfiguration
VirtualMachineScaleSetNetworkConfigurationDnsSettings
VirtualMachineScaleSetNetworkConfigurationProperties
VirtualMachineScaleSetNetworkProfile
VirtualMachineScaleSetOSDisk
VirtualMachineScaleSetOSProfile
VirtualMachineScaleSetProperties
VirtualMachineScaleSetPublicIPAddressConfiguration
VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings
VirtualMachineScaleSetPublicIPAddressConfigurationProperties
VirtualMachineScaleSetStorageProfile
VirtualMachineScaleSetVMProfile
VMDiskSecurityProfile
VMGalleryApplication
VMSizeProperties
WindowsConfiguration
WindowsVMGuestPatchAutomaticByPlatformSettings
WinRMConfiguration
WinRMListener
Usage Examples
Azure Quickstart Templates
The followingAzure Quickstart templatesdeploy this resource type.
Terraform (AzAPI provider) resource definition
The virtualMachineScaleSets resource type can be deployed with operations that target:
Resource groups
For a list of changed properties in each API version, seechange log.
Resource format
To create a Microsoft.Compute/virtualMachineScaleSets resource, add the following Terraform to your template.
resource "azapi_resource" "symbolicname" {
  type = "Microsoft.Compute/virtualMachineScaleSets@2024-11-01"
  name = "string"
  identity = {
    type = "string"
    userAssignedIdentities = {
      {customized property} = {
      }
    }
  }
  location = "string"
  tags = {
    {customized property} = "string"
  }
  body = {
    extendedLocation = {
      name = "string"
      type = "string"
    }
    plan = {
      name = "string"
      product = "string"
      promotionCode = "string"
      publisher = "string"
    }
    properties = {
      additionalCapabilities = {
        hibernationEnabled = bool
        ultraSSDEnabled = bool
      }
      automaticRepairsPolicy = {
        enabled = bool
        gracePeriod = "string"
        repairAction = "string"
      }
      constrainedMaximumCapacity = bool
      doNotRunExtensionsOnOverprovisionedVMs = bool
      hostGroup = {
        id = "string"
      }
      orchestrationMode = "string"
      overprovision = bool
      platformFaultDomainCount = int
      priorityMixPolicy = {
        baseRegularPriorityCount = int
        regularPriorityPercentageAboveBase = int
      }
      proximityPlacementGroup = {
        id = "string"
      }
      resiliencyPolicy = {
        automaticZoneRebalancingPolicy = {
          enabled = bool
          rebalanceBehavior = "string"
          rebalanceStrategy = "string"
        }
        resilientVMCreationPolicy = {
          enabled = bool
        }
        resilientVMDeletionPolicy = {
          enabled = bool
        }
      }
      scaleInPolicy = {
        forceDeletion = bool
        prioritizeUnhealthyVMs = bool
        rules = [
          "string"
        ]
      }
      scheduledEventsPolicy = {
        scheduledEventsAdditionalPublishingTargets = {
          eventGridAndResourceGraph = {
            enable = bool
          }
        }
        userInitiatedReboot = {
          automaticallyApprove = bool
        }
        userInitiatedRedeploy = {
          automaticallyApprove = bool
        }
      }
      singlePlacementGroup = bool
      skuProfile = {
        allocationStrategy = "string"
        vmSizes = [
          {
            name = "string"
            rank = int
          }
        ]
      }
      spotRestorePolicy = {
        enabled = bool
        restoreTimeout = "string"
      }
      upgradePolicy = {
        automaticOSUpgradePolicy = {
          disableAutomaticRollback = bool
          enableAutomaticOSUpgrade = bool
          osRollingUpgradeDeferral = bool
          useRollingUpgradePolicy = bool
        }
        mode = "string"
        rollingUpgradePolicy = {
          enableCrossZoneUpgrade = bool
          maxBatchInstancePercent = int
          maxSurge = bool
          maxUnhealthyInstancePercent = int
          maxUnhealthyUpgradedInstancePercent = int
          pauseTimeBetweenBatches = "string"
          prioritizeUnhealthyInstances = bool
          rollbackFailedInstancesOnPolicyBreach = bool
        }
      }
      virtualMachineProfile = {
        applicationProfile = {
          galleryApplications = [
            {
              configurationReference = "string"
              enableAutomaticUpgrade = bool
              order = int
              packageReferenceId = "string"
              tags = "string"
              treatFailureAsDeploymentFailure = bool
            }
          ]
        }
        billingProfile = {
          maxPrice = int
        }
        capacityReservation = {
          capacityReservationGroup = {
            id = "string"
          }
        }
        diagnosticsProfile = {
          bootDiagnostics = {
            enabled = bool
            storageUri = "string"
          }
        }
        evictionPolicy = "string"
        extensionProfile = {
          extensions = [
            {
              name = "string"
              properties = {
                autoUpgradeMinorVersion = bool
                enableAutomaticUpgrade = bool
                forceUpdateTag = "string"
                protectedSettings = ?
                protectedSettingsFromKeyVault = {
                  secretUrl = "string"
                  sourceVault = {
                    id = "string"
                  }
                }
                provisionAfterExtensions = [
                  "string"
                ]
                publisher = "string"
                settings = ?
                suppressFailures = bool
                type = "string"
                typeHandlerVersion = "string"
              }
            }
          ]
          extensionsTimeBudget = "string"
        }
        hardwareProfile = {
          vmSizeProperties = {
            vCPUsAvailable = int
            vCPUsPerCore = int
          }
        }
        licenseType = "string"
        networkProfile = {
          healthProbe = {
            id = "string"
          }
          networkApiVersion = "string"
          networkInterfaceConfigurations = [
            {
              name = "string"
              properties = {
                auxiliaryMode = "string"
                auxiliarySku = "string"
                deleteOption = "string"
                disableTcpStateTracking = bool
                dnsSettings = {
                  dnsServers = [
                    "string"
                  ]
                }
                enableAcceleratedNetworking = bool
                enableFpga = bool
                enableIPForwarding = bool
                ipConfigurations = [
                  {
                    name = "string"
                    properties = {
                      applicationGatewayBackendAddressPools = [
                        {
                          id = "string"
                        }
                      ]
                      applicationSecurityGroups = [
                        {
                          id = "string"
                        }
                      ]
                      loadBalancerBackendAddressPools = [
                        {
                          id = "string"
                        }
                      ]
                      loadBalancerInboundNatPools = [
                        {
                          id = "string"
                        }
                      ]
                      primary = bool
                      privateIPAddressVersion = "string"
                      publicIPAddressConfiguration = {
                        name = "string"
                        properties = {
                          deleteOption = "string"
                          dnsSettings = {
                            domainNameLabel = "string"
                            domainNameLabelScope = "string"
                          }
                          idleTimeoutInMinutes = int
                          ipTags = [
                            {
                              ipTagType = "string"
                              tag = "string"
                            }
                          ]
                          publicIPAddressVersion = "string"
                          publicIPPrefix = {
                            id = "string"
                          }
                        }
                        sku = {
                          name = "string"
                          tier = "string"
                        }
                      }
                      subnet = {
                        id = "string"
                      }
                    }
                  }
                ]
                networkSecurityGroup = {
                  id = "string"
                }
                primary = bool
              }
            }
          ]
        }
        osProfile = {
          adminPassword = "string"
          adminUsername = "string"
          allowExtensionOperations = bool
          computerNamePrefix = "string"
          customData = "string"
          linuxConfiguration = {
            disablePasswordAuthentication = bool
            enableVMAgentPlatformUpdates = bool
            patchSettings = {
              assessmentMode = "string"
              automaticByPlatformSettings = {
                bypassPlatformSafetyChecksOnUserSchedule = bool
                rebootSetting = "string"
              }
              patchMode = "string"
            }
            provisionVMAgent = bool
            ssh = {
              publicKeys = [
                {
                  keyData = "string"
                  path = "string"
                }
              ]
            }
          }
          requireGuestProvisionSignal = bool
          secrets = [
            {
              sourceVault = {
                id = "string"
              }
              vaultCertificates = [
                {
                  certificateStore = "string"
                  certificateUrl = "string"
                }
              ]
            }
          ]
          windowsConfiguration = {
            additionalUnattendContent = [
              {
                componentName = "Microsoft-Windows-Shell-Setup"
                content = "string"
                passName = "OobeSystem"
                settingName = "string"
              }
            ]
            enableAutomaticUpdates = bool
            patchSettings = {
              assessmentMode = "string"
              automaticByPlatformSettings = {
                bypassPlatformSafetyChecksOnUserSchedule = bool
                rebootSetting = "string"
              }
              enableHotpatching = bool
              patchMode = "string"
            }
            provisionVMAgent = bool
            timeZone = "string"
            winRM = {
              listeners = [
                {
                  certificateUrl = "string"
                  protocol = "string"
                }
              ]
            }
          }
        }
        priority = "string"
        scheduledEventsProfile = {
          osImageNotificationProfile = {
            enable = bool
            notBeforeTimeout = "string"
          }
          terminateNotificationProfile = {
            enable = bool
            notBeforeTimeout = "string"
          }
        }
        securityPostureReference = {
          excludeExtensions = [
            "string"
          ]
          id = "string"
          isOverridable = bool
        }
        securityProfile = {
          encryptionAtHost = bool
          encryptionIdentity = {
            userAssignedIdentityResourceId = "string"
          }
          proxyAgentSettings = {
            enabled = bool
            imds = {
              inVMAccessControlProfileReferenceId = "string"
              mode = "string"
            }
            keyIncarnationId = int
            mode = "string"
            wireServer = {
              inVMAccessControlProfileReferenceId = "string"
              mode = "string"
            }
          }
          securityType = "string"
          uefiSettings = {
            secureBootEnabled = bool
            vTpmEnabled = bool
          }
        }
        serviceArtifactReference = {
          id = "string"
        }
        storageProfile = {
          dataDisks = [
            {
              caching = "string"
              createOption = "string"
              deleteOption = "string"
              diskIOPSReadWrite = int
              diskMBpsReadWrite = int
              diskSizeGB = int
              lun = int
              managedDisk = {
                diskEncryptionSet = {
                  id = "string"
                }
                securityProfile = {
                  diskEncryptionSet = {
                    id = "string"
                  }
                  securityEncryptionType = "string"
                }
                storageAccountType = "string"
              }
              name = "string"
              writeAcceleratorEnabled = bool
            }
          ]
          diskControllerType = "string"
          imageReference = {
            communityGalleryImageId = "string"
            id = "string"
            offer = "string"
            publisher = "string"
            sharedGalleryImageId = "string"
            sku = "string"
            version = "string"
          }
          osDisk = {
            caching = "string"
            createOption = "string"
            deleteOption = "string"
            diffDiskSettings = {
              option = "string"
              placement = "string"
            }
            diskSizeGB = int
            image = {
              uri = "string"
            }
            managedDisk = {
              diskEncryptionSet = {
                id = "string"
              }
              securityProfile = {
                diskEncryptionSet = {
                  id = "string"
                }
                securityEncryptionType = "string"
              }
              storageAccountType = "string"
            }
            name = "string"
            osType = "string"
            vhdContainers = [
              "string"
            ]
            writeAcceleratorEnabled = bool
          }
        }
        userData = "string"
      }
      zonalPlatformFaultDomainAlignMode = "string"
      zoneBalance = bool
    }
    sku = {
      capacity = int
      name = "string"
      tier = "string"
    }
    zones = [
      "string"
    ]
  }
}
resource "azapi_resource" "symbolicname" {
  type = "Microsoft.Compute/virtualMachineScaleSets@2024-11-01"
  name = "string"
  identity = {
    type = "string"
    userAssignedIdentities = {
      {customized property} = {
      }
    }
  }
  location = "string"
  tags = {
    {customized property} = "string"
  }
  body = {
    extendedLocation = {
      name = "string"
      type = "string"
    }
    plan = {
      name = "string"
      product = "string"
      promotionCode = "string"
      publisher = "string"
    }
    properties = {
      additionalCapabilities = {
        hibernationEnabled = bool
        ultraSSDEnabled = bool
      }
      automaticRepairsPolicy = {
        enabled = bool
        gracePeriod = "string"
        repairAction = "string"
      }
      constrainedMaximumCapacity = bool
      doNotRunExtensionsOnOverprovisionedVMs = bool
      hostGroup = {
        id = "string"
      }
      orchestrationMode = "string"
      overprovision = bool
      platformFaultDomainCount = int
      priorityMixPolicy = {
        baseRegularPriorityCount = int
        regularPriorityPercentageAboveBase = int
      }
      proximityPlacementGroup = {
        id = "string"
      }
      resiliencyPolicy = {
        automaticZoneRebalancingPolicy = {
          enabled = bool
          rebalanceBehavior = "string"
          rebalanceStrategy = "string"
        }
        resilientVMCreationPolicy = {
          enabled = bool
        }
        resilientVMDeletionPolicy = {
          enabled = bool
        }
      }
      scaleInPolicy = {
        forceDeletion = bool
        prioritizeUnhealthyVMs = bool
        rules = [
          "string"
        ]
      }
      scheduledEventsPolicy = {
        scheduledEventsAdditionalPublishingTargets = {
          eventGridAndResourceGraph = {
            enable = bool
          }
        }
        userInitiatedReboot = {
          automaticallyApprove = bool
        }
        userInitiatedRedeploy = {
          automaticallyApprove = bool
        }
      }
      singlePlacementGroup = bool
      skuProfile = {
        allocationStrategy = "string"
        vmSizes = [
          {
            name = "string"
            rank = int
          }
        ]
      }
      spotRestorePolicy = {
        enabled = bool
        restoreTimeout = "string"
      }
      upgradePolicy = {
        automaticOSUpgradePolicy = {
          disableAutomaticRollback = bool
          enableAutomaticOSUpgrade = bool
          osRollingUpgradeDeferral = bool
          useRollingUpgradePolicy = bool
        }
        mode = "string"
        rollingUpgradePolicy = {
          enableCrossZoneUpgrade = bool
          maxBatchInstancePercent = int
          maxSurge = bool
          maxUnhealthyInstancePercent = int
          maxUnhealthyUpgradedInstancePercent = int
          pauseTimeBetweenBatches = "string"
          prioritizeUnhealthyInstances = bool
          rollbackFailedInstancesOnPolicyBreach = bool
        }
      }
      virtualMachineProfile = {
        applicationProfile = {
          galleryApplications = [
            {
              configurationReference = "string"
              enableAutomaticUpgrade = bool
              order = int
              packageReferenceId = "string"
              tags = "string"
              treatFailureAsDeploymentFailure = bool
            }
          ]
        }
        billingProfile = {
          maxPrice = int
        }
        capacityReservation = {
          capacityReservationGroup = {
            id = "string"
          }
        }
        diagnosticsProfile = {
          bootDiagnostics = {
            enabled = bool
            storageUri = "string"
          }
        }
        evictionPolicy = "string"
        extensionProfile = {
          extensions = [
            {
              name = "string"
              properties = {
                autoUpgradeMinorVersion = bool
                enableAutomaticUpgrade = bool
                forceUpdateTag = "string"
                protectedSettings = ?
                protectedSettingsFromKeyVault = {
                  secretUrl = "string"
                  sourceVault = {
                    id = "string"
                  }
                }
                provisionAfterExtensions = [
                  "string"
                ]
                publisher = "string"
                settings = ?
                suppressFailures = bool
                type = "string"
                typeHandlerVersion = "string"
              }
            }
          ]
          extensionsTimeBudget = "string"
        }
        hardwareProfile = {
          vmSizeProperties = {
            vCPUsAvailable = int
            vCPUsPerCore = int
          }
        }
        licenseType = "string"
        networkProfile = {
          healthProbe = {
            id = "string"
          }
          networkApiVersion = "string"
          networkInterfaceConfigurations = [
            {
              name = "string"
              properties = {
                auxiliaryMode = "string"
                auxiliarySku = "string"
                deleteOption = "string"
                disableTcpStateTracking = bool
                dnsSettings = {
                  dnsServers = [
                    "string"
                  ]
                }
                enableAcceleratedNetworking = bool
                enableFpga = bool
                enableIPForwarding = bool
                ipConfigurations = [
                  {
                    name = "string"
                    properties = {
                      applicationGatewayBackendAddressPools = [
                        {
                          id = "string"
                        }
                      ]
                      applicationSecurityGroups = [
                        {
                          id = "string"
                        }
                      ]
                      loadBalancerBackendAddressPools = [
                        {
                          id = "string"
                        }
                      ]
                      loadBalancerInboundNatPools = [
                        {
                          id = "string"
                        }
                      ]
                      primary = bool
                      privateIPAddressVersion = "string"
                      publicIPAddressConfiguration = {
                        name = "string"
                        properties = {
                          deleteOption = "string"
                          dnsSettings = {
                            domainNameLabel = "string"
                            domainNameLabelScope = "string"
                          }
                          idleTimeoutInMinutes = int
                          ipTags = [
                            {
                              ipTagType = "string"
                              tag = "string"
                            }
                          ]
                          publicIPAddressVersion = "string"
                          publicIPPrefix = {
                            id = "string"
                          }
                        }
                        sku = {
                          name = "string"
                          tier = "string"
                        }
                      }
                      subnet = {
                        id = "string"
                      }
                    }
                  }
                ]
                networkSecurityGroup = {
                  id = "string"
                }
                primary = bool
              }
            }
          ]
        }
        osProfile = {
          adminPassword = "string"
          adminUsername = "string"
          allowExtensionOperations = bool
          computerNamePrefix = "string"
          customData = "string"
          linuxConfiguration = {
            disablePasswordAuthentication = bool
            enableVMAgentPlatformUpdates = bool
            patchSettings = {
              assessmentMode = "string"
              automaticByPlatformSettings = {
                bypassPlatformSafetyChecksOnUserSchedule = bool
                rebootSetting = "string"
              }
              patchMode = "string"
            }
            provisionVMAgent = bool
            ssh = {
              publicKeys = [
                {
                  keyData = "string"
                  path = "string"
                }
              ]
            }
          }
          requireGuestProvisionSignal = bool
          secrets = [
            {
              sourceVault = {
                id = "string"
              }
              vaultCertificates = [
                {
                  certificateStore = "string"
                  certificateUrl = "string"
                }
              ]
            }
          ]
          windowsConfiguration = {
            additionalUnattendContent = [
              {
                componentName = "Microsoft-Windows-Shell-Setup"
                content = "string"
                passName = "OobeSystem"
                settingName = "string"
              }
            ]
            enableAutomaticUpdates = bool
            patchSettings = {
              assessmentMode = "string"
              automaticByPlatformSettings = {
                bypassPlatformSafetyChecksOnUserSchedule = bool
                rebootSetting = "string"
              }
              enableHotpatching = bool
              patchMode = "string"
            }
            provisionVMAgent = bool
            timeZone = "string"
            winRM = {
              listeners = [
                {
                  certificateUrl = "string"
                  protocol = "string"
                }
              ]
            }
          }
        }
        priority = "string"
        scheduledEventsProfile = {
          osImageNotificationProfile = {
            enable = bool
            notBeforeTimeout = "string"
          }
          terminateNotificationProfile = {
            enable = bool
            notBeforeTimeout = "string"
          }
        }
        securityPostureReference = {
          excludeExtensions = [
            "string"
          ]
          id = "string"
          isOverridable = bool
        }
        securityProfile = {
          encryptionAtHost = bool
          encryptionIdentity = {
            userAssignedIdentityResourceId = "string"
          }
          proxyAgentSettings = {
            enabled = bool
            imds = {
              inVMAccessControlProfileReferenceId = "string"
              mode = "string"
            }
            keyIncarnationId = int
            mode = "string"
            wireServer = {
              inVMAccessControlProfileReferenceId = "string"
              mode = "string"
            }
          }
          securityType = "string"
          uefiSettings = {
            secureBootEnabled = bool
            vTpmEnabled = bool
          }
        }
        serviceArtifactReference = {
          id = "string"
        }
        storageProfile = {
          dataDisks = [
            {
              caching = "string"
              createOption = "string"
              deleteOption = "string"
              diskIOPSReadWrite = int
              diskMBpsReadWrite = int
              diskSizeGB = int
              lun = int
              managedDisk = {
                diskEncryptionSet = {
                  id = "string"
                }
                securityProfile = {
                  diskEncryptionSet = {
                    id = "string"
                  }
                  securityEncryptionType = "string"
                }
                storageAccountType = "string"
              }
              name = "string"
              writeAcceleratorEnabled = bool
            }
          ]
          diskControllerType = "string"
          imageReference = {
            communityGalleryImageId = "string"
            id = "string"
            offer = "string"
            publisher = "string"
            sharedGalleryImageId = "string"
            sku = "string"
            version = "string"
          }
          osDisk = {
            caching = "string"
            createOption = "string"
            deleteOption = "string"
            diffDiskSettings = {
              option = "string"
              placement = "string"
            }
            diskSizeGB = int
            image = {
              uri = "string"
            }
            managedDisk = {
              diskEncryptionSet = {
                id = "string"
              }
              securityProfile = {
                diskEncryptionSet = {
                  id = "string"
                }
                securityEncryptionType = "string"
              }
              storageAccountType = "string"
            }
            name = "string"
            osType = "string"
            vhdContainers = [
              "string"
            ]
            writeAcceleratorEnabled = bool
          }
        }
        userData = "string"
      }
      zonalPlatformFaultDomainAlignMode = "string"
      zoneBalance = bool
    }
    sku = {
      capacity = int
      name = "string"
      tier = "string"
    }
    zones = [
      "string"
    ]
  }
}
Property Values
AdditionalCapabilities
AdditionalUnattendContent
ApiEntityReference
ApplicationProfile
AutomaticOSUpgradePolicy
AutomaticRepairsPolicy
AutomaticZoneRebalancingPolicy
BillingProfile
BootDiagnostics
CapacityReservationProfile
DiagnosticsProfile
DiffDiskSettings
DiskEncryptionSetParameters
EncryptionIdentity
EventGridAndResourceGraph
ExtendedLocation
HostEndpointSettings
ImageReference
KeyVaultSecretReference
LinuxConfiguration
LinuxPatchSettings
LinuxVMGuestPatchAutomaticByPlatformSettings
Microsoft.Compute/virtualMachineScaleSets
OSImageNotificationProfile
PatchSettings
Plan
PriorityMixPolicy
ProxyAgentSettings
PublicIPAddressSku
ResiliencyPolicy
ResilientVMCreationPolicy
ResilientVMDeletionPolicy
ResourceTags
RollingUpgradePolicy
ScaleInPolicy
ScheduledEventsAdditionalPublishingTargets
ScheduledEventsPolicy
ScheduledEventsProfile
SecurityPostureReference
SecurityProfile
ServiceArtifactReference
Sku
SkuProfile
SkuProfileVMSize
SpotRestorePolicy
SshConfiguration
SshPublicKey
SubResource
TerminateNotificationProfile
UefiSettings
UpgradePolicy
UserAssignedIdentities
UserAssignedIdentitiesValue
UserInitiatedReboot
UserInitiatedRedeploy
VaultCertificate
VaultSecretGroup
VirtualHardDisk
VirtualMachineScaleSetDataDisk
VirtualMachineScaleSetExtension
VirtualMachineScaleSetExtensionProfile
VirtualMachineScaleSetExtensionProperties
VirtualMachineScaleSetHardwareProfile
VirtualMachineScaleSetIdentity
VirtualMachineScaleSetIPConfiguration
VirtualMachineScaleSetIPConfigurationProperties
VirtualMachineScaleSetIpTag
VirtualMachineScaleSetManagedDiskParameters
VirtualMachineScaleSetNetworkConfiguration
VirtualMachineScaleSetNetworkConfigurationDnsSettings
VirtualMachineScaleSetNetworkConfigurationProperties
VirtualMachineScaleSetNetworkProfile
VirtualMachineScaleSetOSDisk
VirtualMachineScaleSetOSProfile
VirtualMachineScaleSetProperties
VirtualMachineScaleSetPublicIPAddressConfiguration
VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings
VirtualMachineScaleSetPublicIPAddressConfigurationProperties
VirtualMachineScaleSetStorageProfile
VirtualMachineScaleSetVMProfile
VMDiskSecurityProfile
VMGalleryApplication
VMSizeProperties
WindowsConfiguration
WindowsVMGuestPatchAutomaticByPlatformSettings
WinRMConfiguration
WinRMListener
Usage Examples
Azure Verified Modules
The followingAzure Verified Modulescan be used to deploy this resource type.
Feedback
Was this page helpful?
Additional resources