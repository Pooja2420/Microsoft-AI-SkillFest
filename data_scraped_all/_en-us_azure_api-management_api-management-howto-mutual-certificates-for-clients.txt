Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
How to secure APIs using client certificate authentication in API Management
Article
2024-11-20
15 contributors
In this article
APPLIES TO: All API Management tiers
API Management provides the capability to secure access to APIs (that is, client to API Management) using client certificates and mutual TLS authentication. You can validate certificates presented by the connecting client and check certificate properties against desired values using policy expressions.
For information about securing access to the backend service of an API using client certificates (that is, API Management to backend), seeHow to secure back-end services using client certificate authentication.
For a conceptual overview of API authorization, seeAuthentication and authorization to APIs in API Management.
Certificate options
For certificate validation, API Management can check against certificates managed in your API Management instance. If you choose to use API Management to manage client certificates, you have the following options:
Reference a certificate managed inAzure Key Vault
Add a certificate file directly in API Management
Using key vault certificates is recommended because it helps improve API Management security:
Certificates stored in key vaults can be reused across services
Granularaccess policiescan be applied to certificates stored in key vaults
Certificates updated in the key vault are automatically rotated in API Management. After update in the key vault, a certificate in API Management is updated within 4 hours. You can also manually refresh the certificate using the Azure portal or via the management REST API.
Prerequisites
If you have not created an API Management service instance yet, seeCreate an API Management service instance.
If you have not created an API Management service instance yet, seeCreate an API Management service instance.
You need access to the certificate and the password for management in an Azure key vault or upload to the API Management service. The certificate must be in either CER or PFX format. Self-signed certificates are allowed.If you use a self-signed certificate, also install trusted root and intermediateCA certificatesin your API Management instance.NoteCA certificates for certificate validation are not supported in the Consumption tier.
You need access to the certificate and the password for management in an Azure key vault or upload to the API Management service. The certificate must be in either CER or PFX format. Self-signed certificates are allowed.
If you use a self-signed certificate, also install trusted root and intermediateCA certificatesin your API Management instance.
Note
CA certificates for certificate validation are not supported in the Consumption tier.
Prerequisites for key vault integration
Note
Currently, this feature isn't available inworkspaces.
If you don't already have a key vault, create one. For steps to create a key vault, seeQuickstart: Create a key vault using the Azure portal.To create or import a certificate to the key vault, seeQuickstart: Set and retrieve a certificate from Azure Key Vault using the Azure portal.
If you don't already have a key vault, create one. For steps to create a key vault, seeQuickstart: Create a key vault using the Azure portal.
To create or import a certificate to the key vault, seeQuickstart: Set and retrieve a certificate from Azure Key Vault using the Azure portal.
Enable a system-assigned or user-assignedmanaged identityin the API Management instance.
Enable a system-assigned or user-assignedmanaged identityin the API Management instance.
Configure access to key vault
In the portal, navigate to your key vault.
In the left menu, selectAccess configuration, and note thePermission modelthat is configured.
Depending on the permission model, configure either akey vault access policyorAzure RBAC accessfor an API Management managed identity.
To add a key vault access policy:
In the left menu, selectAccess policies.
On theAccess policiespage, select+ Create.
On thePermissionstab, underSecret permissions, selectGetandList, then selectNext.
On thePrincipaltab,Select principal, search for  the resource name of your managed identity, and then selectNext.
If you're using a system-assigned identity, the principal is the name of your API Management instance.
SelectNextagain. On theReview + createtab, selectCreate.
IfKey Vault firewallis enabled on your key vault, the following are additional requirements:
You must use the API Management instance'ssystem-assignedmanaged identity to access the key vault.
You must use the API Management instance'ssystem-assignedmanaged identity to access the key vault.
In Key Vault firewall, enable theAllow Trusted Microsoft Services to bypass this firewalloption.
In Key Vault firewall, enable theAllow Trusted Microsoft Services to bypass this firewalloption.
Ensure that your local client IP address is allowed to access the key vault temporarily while you select a certificate or secret to add to Azure API Management. For more information, seeConfigure Azure Key Vault networking settings.After completing the configuration, you may block your client address in the key vault firewall.
Ensure that your local client IP address is allowed to access the key vault temporarily while you select a certificate or secret to add to Azure API Management. For more information, seeConfigure Azure Key Vault networking settings.
After completing the configuration, you may block your client address in the key vault firewall.
If the API Management instance is deployed in a virtual network, also configure the following network settings:
Enable aservice endpointto Azure Key Vault on the API Management subnet.
Configure a network security group (NSG) rule to allow outbound traffic to the AzureKeyVault and AzureActiveDirectoryservice tags.
For details, seeNetwork configuration when setting up Azure API Management in a VNet.
Add a key vault certificate
SeePrerequisites for key vault integration.
Important
When adding a key vault certificate to your API Management instance, you must have permissions to list secrets from the key vault.
Caution
When using a key vault certificate in API Management, be careful not to delete the certificate, key vault, or managed identity used to access the key vault.
To add a key vault certificate to API Management:
In theAzure portal, navigate to your API Management instance.
In theAzure portal, navigate to your API Management instance.
UnderSecurity, selectCertificates.
UnderSecurity, selectCertificates.
SelectCertificates>+ Add.
SelectCertificates>+ Add.
InId, enter a name of your choice.
InId, enter a name of your choice.
InCertificate, selectKey vault.
InCertificate, selectKey vault.
Enter the identifier of a key vault certificate, or chooseSelectto select a certificate from a key vault.ImportantIf you enter a key vault certificate identifier yourself, ensure that it doesn't have version information. Otherwise, the certificate won't rotate automatically in API Management after an update in the key vault.
Enter the identifier of a key vault certificate, or chooseSelectto select a certificate from a key vault.
Important
If you enter a key vault certificate identifier yourself, ensure that it doesn't have version information. Otherwise, the certificate won't rotate automatically in API Management after an update in the key vault.
InClient identity, select a system-assigned or an existing user-assigned managed identity. Learn how toadd or modify managed identities in your API Management service.NoteThe identity needs permissions to get and list certificate from the key vault. If you haven't already configured access to the key vault, API Management prompts you so it can automatically configure the identity with the necessary permissions.
InClient identity, select a system-assigned or an existing user-assigned managed identity. Learn how toadd or modify managed identities in your API Management service.
Note
The identity needs permissions to get and list certificate from the key vault. If you haven't already configured access to the key vault, API Management prompts you so it can automatically configure the identity with the necessary permissions.
SelectAdd.
SelectAdd.

SelectSave.
SelectSave.
Upload a certificate
To upload a client certificate to API Management:
In theAzure portal, navigate to your API Management instance.
In theAzure portal, navigate to your API Management instance.
UnderSecurity, selectCertificates.
UnderSecurity, selectCertificates.
SelectCertificates>+ Add.
SelectCertificates>+ Add.
InId, enter a name of your choice.
InId, enter a name of your choice.
InCertificate, selectCustom.
InCertificate, selectCustom.
Browse to select the certificate .pfx file, and enter its password.
Browse to select the certificate .pfx file, and enter its password.
SelectAdd.
SelectAdd.

SelectSave.
SelectSave.
Note
If you only wish to use the certificate to authenticate the client with API Management, you can upload a CER file.
Enable API Management instance to receive and verify client certificates
Developer, Basic, Standard, or Premium tier
To receive and verify client certificates over HTTP/2 in the Developer, Basic, Standard, or Premium tiers, you must enable theNegotiate client certificatesetting on theCustom domainblade as shown below.

Consumption, Basic v2, Standard v2, or Premium v2 tier
To receive and verify client certificates in the Consumption, Basic v2, Standard v2, or Premium v2 tier, you must enable theRequest client certificatesetting on theCustom domainsblade as shown below.

Policy to validate client certificates
Use thevalidate-client-certificatepolicy to validate one or more attributes of a client certificate used to access APIs hosted in your API Management instance.
Configure the policy to validate one or more attributes including certificate issuer, subject, thumbprint, whether the certificate is validated against online revocation list, and others.
Certificate validation with context variables
You can also create policy expressions with thecontextvariableto check client certificates. Examples in the following sections show expressions using thecontext.Request.Certificateproperty and othercontextproperties.
context
context.Request.Certificate
context
Note
Mutual certificate authentication might not function correctly when the API Management gateway endpoint is exposed through the Application Gateway. This is because Application Gateway functions as a Layer 7 load balancer, establishing a distinct SSL connection with the backend API Management service. Consequently, the certificate attached by the client in the initial HTTP request will not be forwarded to APIM. However, as a workaround, you can transmit the certificate using the server variables option. For detailed instructions, refer toMutual Authentication Server Variables.
Important
Starting May 2021, thecontext.Request.Certificateproperty only requests the certificate when the API Management instance'shostnameConfigurationsets thenegotiateClientCertificateproperty to True. By default,negotiateClientCertificateis set to False.
context.Request.Certificate
hostnameConfiguration
negotiateClientCertificate
negotiateClientCertificate
If TLS renegotiation is disabled in your client, you may see TLS errors when requesting the certificate using thecontext.Request.Certificateproperty. If this occurs, enable TLS renegotiation settings in the client.
context.Request.Certificate
Certification renegotiation is not supported in the API Management v2 tiers.
Checking the issuer and subject
Below policies can be configured to check the issuer and subject of a client certificate:
<choose>
    <when condition="@(context.Request.Certificate == null || !context.Request.Certificate.Verify() || context.Request.Certificate.Issuer != "trusted-issuer" || context.Request.Certificate.SubjectName.Name != "expected-subject-name")" >
        <return-response>
            <set-status code="403" reason="Invalid client certificate" />
        </return-response>
    </when>
</choose>
<choose>
    <when condition="@(context.Request.Certificate == null || !context.Request.Certificate.Verify() || context.Request.Certificate.Issuer != "trusted-issuer" || context.Request.Certificate.SubjectName.Name != "expected-subject-name")" >
        <return-response>
            <set-status code="403" reason="Invalid client certificate" />
        </return-response>
    </when>
</choose>
Note
To disable checking certificate revocation list, usecontext.Request.Certificate.VerifyNoRevocation()instead ofcontext.Request.Certificate.Verify().
If client certificate is self-signed, root (or intermediate) CA certificate(s) must beuploadedto API Management forcontext.Request.Certificate.Verify()andcontext.Request.Certificate.VerifyNoRevocation()to work.
context.Request.Certificate.VerifyNoRevocation()
context.Request.Certificate.Verify()
context.Request.Certificate.Verify()
context.Request.Certificate.VerifyNoRevocation()
Checking the thumbprint
Below policies can be configured to check the thumbprint of a client certificate:
<choose>
    <when condition="@(context.Request.Certificate == null || !context.Request.Certificate.Verify() || context.Request.Certificate.Thumbprint != "DESIRED-THUMBPRINT-IN-UPPER-CASE")" >
        <return-response>
            <set-status code="403" reason="Invalid client certificate" />
        </return-response>
    </when>
</choose>
<choose>
    <when condition="@(context.Request.Certificate == null || !context.Request.Certificate.Verify() || context.Request.Certificate.Thumbprint != "DESIRED-THUMBPRINT-IN-UPPER-CASE")" >
        <return-response>
            <set-status code="403" reason="Invalid client certificate" />
        </return-response>
    </when>
</choose>
Note
To disable checking certificate revocation list, usecontext.Request.Certificate.VerifyNoRevocation()instead ofcontext.Request.Certificate.Verify().
If client certificate is self-signed, root (or intermediate) CA certificate(s) must beuploadedto API Management forcontext.Request.Certificate.Verify()andcontext.Request.Certificate.VerifyNoRevocation()to work.
context.Request.Certificate.VerifyNoRevocation()
context.Request.Certificate.Verify()
context.Request.Certificate.Verify()
context.Request.Certificate.VerifyNoRevocation()
Checking a thumbprint against certificates uploaded to API Management
The following example shows how to check the thumbprint of a client certificate against certificates uploaded to API Management:
<choose>
    <when condition="@(context.Request.Certificate == null || !context.Request.Certificate.Verify()  || !context.Deployment.Certificates.Any(c => c.Value.Thumbprint == context.Request.Certificate.Thumbprint))" >
        <return-response>
            <set-status code="403" reason="Invalid client certificate" />
        </return-response>
    </when>
</choose>
<choose>
    <when condition="@(context.Request.Certificate == null || !context.Request.Certificate.Verify()  || !context.Deployment.Certificates.Any(c => c.Value.Thumbprint == context.Request.Certificate.Thumbprint))" >
        <return-response>
            <set-status code="403" reason="Invalid client certificate" />
        </return-response>
    </when>
</choose>
Note
To disable checking certificate revocation list, usecontext.Request.Certificate.VerifyNoRevocation()instead ofcontext.Request.Certificate.Verify().
If client certificate is self-signed, root (or intermediate) CA certificate(s) must beuploadedto API Management forcontext.Request.Certificate.Verify()andcontext.Request.Certificate.VerifyNoRevocation()to work.
context.Request.Certificate.VerifyNoRevocation()
context.Request.Certificate.Verify()
context.Request.Certificate.Verify()
context.Request.Certificate.VerifyNoRevocation()
Tip
Client certificate deadlock issue described in thisarticlecan manifest itself in several ways, e.g. requests freeze, requests result in403 Forbiddenstatus code after timing out,context.Request.Certificateisnull. This problem usually affectsPOSTandPUTrequests with content length of approximately 60KB or larger.
To prevent this issue from occurring turn on "Negotiate client certificate" setting for desired hostnames on the "Custom domains" blade as shown in the first image of this document. This feature is not available in the Consumption tier.
403 Forbidden
context.Request.Certificate
null
POST
PUT
Related content
How to secure backend services using client certificate authentication
How to add a custom CA certificate in Azure API Management
Learn aboutpolicies in API Management
Feedback
Was this page helpful?
Additional resources