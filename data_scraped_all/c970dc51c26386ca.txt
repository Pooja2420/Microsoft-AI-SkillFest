Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Authorize database access to SQL Database, SQL Managed Instance, and Azure Synapse Analytics
Article
2024-05-09
17 contributors
In this article
Applies to:Azure SQL DatabaseAzure SQL Managed InstanceAzure Synapse Analytics
In this article, you learn about:
Configuration options for Azure SQL Database, Azure SQL Managed Instance, and Azure Synapse Analytics that enable users to perform administrative tasks and to access data stored in these databases.
Access and authorization configuration after a new server is initially created.
How to add logins and user accounts in themasterdatabase and then grant these accounts administrative permissions.
master
How to add user accounts in user databases, either associated with logins or as contained user accounts.
Configure user accounts with permissions in user databases by using database roles and explicit permissions.
Important
Databases in Azure SQL Database, Azure SQL Managed Instance, and Azure Synapse are referred to collectively in the remainder of this article as databases, and the server is referring to thelogical serverthat manages databases for Azure SQL Database and Azure Synapse.
Note
Microsoft Entra IDwas previously known as Azure Active Directory (Azure AD).
Authentication and authorization
Authenticationis the process of proving the user is who they claim to be. A user connects to a database using a user account.
When a user attempts to connect to a database, they provide a user account and authentication information. The user is authenticated using one of the following two authentication methods:
SQL authenticationWith this authentication method, the user submits a user account name and associated password to establish a connection. This password is stored in themasterdatabase for user accounts linked to a login or stored in the database containing the user accountsnotlinked to a login.NoteAzure SQL Database only enforcespassword complexityforpassword policy. For password policy in Azure SQL Managed Instance, seeAzure SQL Managed Instance frequently asked questions (FAQ).
SQL authentication
With this authentication method, the user submits a user account name and associated password to establish a connection. This password is stored in themasterdatabase for user accounts linked to a login or stored in the database containing the user accountsnotlinked to a login.
master
Note
Azure SQL Database only enforcespassword complexityforpassword policy. For password policy in Azure SQL Managed Instance, seeAzure SQL Managed Instance frequently asked questions (FAQ).
Microsoft Entra authenticationWith this authentication method, the user submits a user account name and requests that the service uses the credential information stored in Microsoft Entra ID (formerly Azure Active Directory).
Microsoft Entra authentication
With this authentication method, the user submits a user account name and requests that the service uses the credential information stored in Microsoft Entra ID (formerly Azure Active Directory).
Logins and users: A user account in a database can be associated with a login that is stored in themasterdatabase or can be a user name that is stored in an individual database.
master
Aloginis an individual account in themasterdatabase, to which a user account in one or more databases can be linked. With a login, the credential information for the user account is stored with the login.
master
Auser accountis an individual account in any database that might be, but does not have to be, linked to a login. With a user account that is not linked to a login, the credential information is stored with the user account.
Authorizationto access data and perform various actions are managed using database roles and explicit permissions. Authorization refers to the permissions assigned to a user, and determines what that user is allowed to do. Authorization is controlled by your user account's databaserole membershipsandobject-level permissions. As a best practice, you should grant users the least privileges necessary.
Existing logins and user accounts after creating a new database
When you first deploy Azure SQL, you can specify a login name and a  password for a special type of administrative login, theServer admin. The following configuration of logins and users in the master and user databases occurs during deployment:
A SQL login with administrative privileges is created using the login name you specified. Aloginis an individual account for logging in to SQL Database, SQL Managed Instance, and Azure Synapse.
This login is granted full administrative permissions on all databases as aserver-level principal. The login has all available permissions and can't be limited. In a SQL Managed Instance, this login is added to thesysadmin fixed server role(this role does not exist in Azure SQL Database).
When this account signs into a database, they are matched to the special user accountdbo(user account, which exists in each user database. Thedbouser has all database permissions in the database and is member of thedb_ownerfixed database role. Additional fixed database roles are discussed later in this article.
dbo
db_owner
To identify theServer adminaccount, open the Azure portal, and navigate to thePropertiestab of your logical server or managed instance:


Important
The name of theServer adminaccount can't be changed after it has been created. To reset the password for the server admin, go to theAzure portal, selectSQL Servers, select the server from the list, and then selectReset Password. To reset the password for the SQL Managed Instance, go to the Azure portal, select the instance, and selectReset password. You can also use PowerShell or the Azure CLI.
Create additional logins and users having administrative permissions
At this point, your server or managed instance is only configured for access using a single SQL login and user account. To create additional logins with full or partial administrative permissions, you have the following options (depending on your deployment mode):
Create a Microsoft Entra administrator account with full administrative permissionsEnable Microsoft Entra authentication and add aMicrosoft Entra admin. One Microsoft Entra account can be configured as an administrator of the Azure SQL deployment with full administrative permissions. This account can be either an individual or security group account. AMicrosoft Entra adminmustbe configured if you want to use Microsoft Entra accounts to connect to SQL Database, SQL Managed Instance, or Azure Synapse. For detailed information on enabling Microsoft Entra authentication for all Azure SQL deployment types, see the following articles:Use Microsoft Entra authentication with SQLConfigure and manage Microsoft Entra authentication with SQL
Create a Microsoft Entra administrator account with full administrative permissions
Enable Microsoft Entra authentication and add aMicrosoft Entra admin. One Microsoft Entra account can be configured as an administrator of the Azure SQL deployment with full administrative permissions. This account can be either an individual or security group account. AMicrosoft Entra adminmustbe configured if you want to use Microsoft Entra accounts to connect to SQL Database, SQL Managed Instance, or Azure Synapse. For detailed information on enabling Microsoft Entra authentication for all Azure SQL deployment types, see the following articles:
Use Microsoft Entra authentication with SQL
Configure and manage Microsoft Entra authentication with SQL
In SQL Managed Instance, create SQL logins with full administrative permissionsCreate an additional SQL login in themasterdatabase.Add the login to thesysadmin fixed server roleusing theALTER SERVER ROLEstatement. This login will have full administrative permissions.Alternatively, create aMicrosoft Entra loginusing theCREATE LOGINsyntax.NoteThedbmanagerandloginmanagerroles donotpertain to Azure SQL Managed Instance deployments.
In SQL Managed Instance, create SQL logins with full administrative permissions
Create an additional SQL login in themasterdatabase.
master
Add the login to thesysadmin fixed server roleusing theALTER SERVER ROLEstatement. This login will have full administrative permissions.
Alternatively, create aMicrosoft Entra loginusing theCREATE LOGINsyntax.
Note
Thedbmanagerandloginmanagerroles donotpertain to Azure SQL Managed Instance deployments.
dbmanager
loginmanager
In SQL Database, create SQL logins with limited administrative permissionsCreate an additional SQL login in themasterdatabase.Add the Login to the##MS_DatabaseManager##,##MS_LoginManager##and##MS_DatabaseConnector##server level rolesusing theALTER SERVER ROLEstatement.Members ofspecialmasterdatabase rolesfor Azure SQL Database have authority to create and manage databases or to create and manage logins. In databases created by a user that is a member of thedbmanagerrole, the member is mapped to thedb_ownerfixed database role and can log into and manage that database using thedbouser account. These roles have no explicit permissions outside of themasterdatabase.ImportantYou can't create an additional SQL login with full administrative permissions in Azure SQL Database. Only the server admin account or the Microsoft Entra admin account (which can be a Microsoft Entra group) can add or remove other logins to or from server roles. This is specific to Azure SQL Database.
In SQL Database, create SQL logins with limited administrative permissions
Create an additional SQL login in themasterdatabase.
master
Add the Login to the##MS_DatabaseManager##,##MS_LoginManager##and##MS_DatabaseConnector##server level rolesusing theALTER SERVER ROLEstatement.
##MS_DatabaseManager##
##MS_LoginManager##
##MS_DatabaseConnector##
Members ofspecialmasterdatabase rolesfor Azure SQL Database have authority to create and manage databases or to create and manage logins. In databases created by a user that is a member of thedbmanagerrole, the member is mapped to thedb_ownerfixed database role and can log into and manage that database using thedbouser account. These roles have no explicit permissions outside of themasterdatabase.
master
dbmanager
db_owner
dbo
master
Important
You can't create an additional SQL login with full administrative permissions in Azure SQL Database. Only the server admin account or the Microsoft Entra admin account (which can be a Microsoft Entra group) can add or remove other logins to or from server roles. This is specific to Azure SQL Database.
In Azure Synapse dedicated SQL pool, create SQL logins with limited administrative permissionsCreate an additional SQL login in themasterdatabase.Create a user account in themasterdatabase associated with this new login.Add the user account to thedbmanager, theloginmanagerrole, or both in themasterdatabase using thesp_addrolememberstatement.
In Azure Synapse dedicated SQL pool, create SQL logins with limited administrative permissions
Create an additional SQL login in themasterdatabase.
master
Create a user account in themasterdatabase associated with this new login.
master
Add the user account to thedbmanager, theloginmanagerrole, or both in themasterdatabase using thesp_addrolememberstatement.
dbmanager
loginmanager
master
In Azure Synapse serverless SQL pool, create SQL logins with limited administrative permissionsCreate an additional SQL login in themasterdatabase.Add the SQL login to thesysadmin fixed server roleusing theALTER SERVER ROLEstatement.Alternatively, create aMicrosoft Entra loginusing theCREATE LOGINsyntax.
In Azure Synapse serverless SQL pool, create SQL logins with limited administrative permissions
Create an additional SQL login in themasterdatabase.
master
Add the SQL login to thesysadmin fixed server roleusing theALTER SERVER ROLEstatement.
Alternatively, create aMicrosoft Entra loginusing theCREATE LOGINsyntax.
Create accounts for non-administrator users
You can create accounts for non-administrative users using one of two methods:
Create a loginCreate a SQL login in themasterdatabase. Then create a user account in each database to which that user needs access and associate the user account with that login. This approach is preferred when the user must access multiple databases and you wish to keep the passwords synchronized. However, this approach has complexities when used with geo-replication as the login must be created on both the primary server and the secondary server(s). For more information, seeConfigure and manage Azure SQL Database security for geo-restore or failover.
Create a login
Create a SQL login in themasterdatabase. Then create a user account in each database to which that user needs access and associate the user account with that login. This approach is preferred when the user must access multiple databases and you wish to keep the passwords synchronized. However, this approach has complexities when used with geo-replication as the login must be created on both the primary server and the secondary server(s). For more information, seeConfigure and manage Azure SQL Database security for geo-restore or failover.
master
Create a user accountCreate a user account in the database to which a user needs access (also called acontained user).With SQL Database, you can always create this type of user account.With SQL Managed Instance supportingMicrosoft Entra server principals, you can create user accounts to authenticate to the SQL Managed Instance without requiring database users to be created as a contained database user.With this approach, the user authentication information is stored in each database, and replicated to geo-replicated databases automatically. However, if the same account exists in multiple databases and you are using SQL authentication, you must keep the passwords synchronized manually. Additionally, if a user has an account in different databases with different passwords, remembering those passwords can become a problem.
Create a user account
Create a user account in the database to which a user needs access (also called acontained user).
With SQL Database, you can always create this type of user account.
With SQL Managed Instance supportingMicrosoft Entra server principals, you can create user accounts to authenticate to the SQL Managed Instance without requiring database users to be created as a contained database user.
With this approach, the user authentication information is stored in each database, and replicated to geo-replicated databases automatically. However, if the same account exists in multiple databases and you are using SQL authentication, you must keep the passwords synchronized manually. Additionally, if a user has an account in different databases with different passwords, remembering those passwords can become a problem.
Important
To create contained users mapped to Microsoft Entra identities, you must be logged in using a Microsoft Entra account in the database in Azure SQL Database. In SQL Managed Instance, a SQL login withsysadminpermissions can also create a Microsoft Entra login or user.
sysadmin
For examples showing how to create logins and users, see:
Create login for Azure SQL Database
Create login for Azure SQL Managed Instance
Create login for Azure Synapse
Create user
Creating Microsoft Entra contained users
Tip
For a security tutorial that includes creating users in Azure SQL Database, seeTutorial: Secure Azure SQL Database.
Using fixed and custom database roles
After creating a user account in a database, either based on a login or as a contained user, you can authorize that user to perform various actions and to access data in a particular database. You can use the following methods to authorize access:
Fixed database rolesAdd the user account to afixed database role. There are 9 fixed database roles, each with a defined set of permissions. The most common fixed database roles are:db_owner,db_ddladmin,db_datawriter,db_datareader,db_denydatawriter, anddb_denydatareader.db_owneris commonly used to grant full permission to only a few users. The other fixed database roles are useful for getting a simple database in development quickly, but are not recommended for most production databases. For example, thedb_datareaderfixed database role grants read access to every table in the database, which is more than is strictly necessary.To add a user to a fixed database role:In Azure SQL Database and Azure Synapse serverless SQL pool, use theALTER ROLEstatement. For examples, seeALTER ROLE examplesIn Azure Synapse dedicated SQL pool, use thesp_addrolememberstatement. For examples, seesp_addrolemember examples.
Fixed database roles
Add the user account to afixed database role. There are 9 fixed database roles, each with a defined set of permissions. The most common fixed database roles are:db_owner,db_ddladmin,db_datawriter,db_datareader,db_denydatawriter, anddb_denydatareader.db_owneris commonly used to grant full permission to only a few users. The other fixed database roles are useful for getting a simple database in development quickly, but are not recommended for most production databases. For example, thedb_datareaderfixed database role grants read access to every table in the database, which is more than is strictly necessary.
To add a user to a fixed database role:In Azure SQL Database and Azure Synapse serverless SQL pool, use theALTER ROLEstatement. For examples, seeALTER ROLE examplesIn Azure Synapse dedicated SQL pool, use thesp_addrolememberstatement. For examples, seesp_addrolemember examples.
To add a user to a fixed database role:
In Azure SQL Database and Azure Synapse serverless SQL pool, use theALTER ROLEstatement. For examples, seeALTER ROLE examples
In Azure Synapse dedicated SQL pool, use thesp_addrolememberstatement. For examples, seesp_addrolemember examples.
Custom database roleCreate a custom database role using theCREATE ROLEstatement. A custom role enables you to create your own user-defined database roles and carefully grant each role the least permissions necessary for the business need. You can then add users to the custom role. When a user is a member of multiple roles, they aggregate the permissions of them all.
Custom database role
Create a custom database role using theCREATE ROLEstatement. A custom role enables you to create your own user-defined database roles and carefully grant each role the least permissions necessary for the business need. You can then add users to the custom role. When a user is a member of multiple roles, they aggregate the permissions of them all.
Grant permissions directlyGrant the user accountpermissionsdirectly. There are over 100 permissions that can be individually granted or denied in SQL Database. Many of these permissions are nested. For example, theUPDATEpermission on a schema includes theUPDATEpermission on each table within that schema. As in most permission systems, the denial of a permission overrides a grant. Because of the nested nature and the number of permissions, it can take careful study to design an appropriate permission system to properly protect your database. Start with the list of permissions atPermissions (Database Engine)and review theposter size graphicof the permissions.
Grant permissions directly
Grant the user accountpermissionsdirectly. There are over 100 permissions that can be individually granted or denied in SQL Database. Many of these permissions are nested. For example, theUPDATEpermission on a schema includes theUPDATEpermission on each table within that schema. As in most permission systems, the denial of a permission overrides a grant. Because of the nested nature and the number of permissions, it can take careful study to design an appropriate permission system to properly protect your database. Start with the list of permissions atPermissions (Database Engine)and review theposter size graphicof the permissions.
UPDATE
UPDATE
Using groups
Efficient access management uses permissions assigned to Active Directory security groups and fixed or custom roles instead of to individual users.
When using Microsoft Entra authentication, put Microsoft Entra users into a Microsoft Entra security group. Create a contained database user for the group. Add one or more database users as a member to custom or builtin database roles with the specific permissions appropriate to that group of users.
When using Microsoft Entra authentication, put Microsoft Entra users into a Microsoft Entra security group. Create a contained database user for the group. Add one or more database users as a member to custom or builtin database roles with the specific permissions appropriate to that group of users.
When using SQL authentication, create contained database users in the database. Place one or more database users into a custom database role with specific permissions appropriate to that group of users.NoteYou can also use groups for non-contained database users.
When using SQL authentication, create contained database users in the database. Place one or more database users into a custom database role with specific permissions appropriate to that group of users.
Note
You can also use groups for non-contained database users.
You should familiarize yourself with the following features that can be used to limit or elevate permissions:
Impersonationandmodule-signingcan be used to securely elevate permissions temporarily.
Row-Level Securitycan be used to limit which rows a user can access.
Data Maskingcan be used to limit exposure of sensitive data.
Stored procedurescan be used to limit the actions that can be taken on the database.
Next step
Security overview
Feedback
Was this page helpful?
Additional resources