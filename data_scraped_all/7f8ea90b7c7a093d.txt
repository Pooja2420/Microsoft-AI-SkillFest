Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Connect to and query Azure SQL Database using .NET and the Microsoft.Data.SqlClient library
Article
2024-09-17
9 contributors
In this article
Applies to:Azure SQL Database
This quickstart describes how to connect an application to a database in Azure SQL Database and perform queries using .NET and theMicrosoft.Data.SqlClientlibrary. This quickstart follows the recommended passwordless approach to connect to the database. You can learn more about passwordless connections on thepasswordless hub.
Prerequisites
AnAzure subscription.
An Azure SQL database configured for authentication with Microsoft Entra ID (formerly Azure Active Directory). You can create one using theCreate database quickstart.
The latest version of theAzure CLI.
Visual Studioor later with theASP.NET and web developmentworkload.
.NET 7.0or later.
Configure the database
Secure, passwordless connections to Azure SQL Database require certain database configurations. Verify the following settings on yourlogical server in Azureto properly connect to Azure SQL Database in both local and hosted environments:
For local development connections, make sure your logical server is configured to allow your local machine IP address and other Azure services to connect:Navigate to theNetworkingpage of your server.Toggle theSelected networksradio button to show additional configuration options.SelectAdd your client IPv4 address(xx.xx.xx.xx)to add a firewall rule that will enable connections from your local machine IPv4 address. Alternatively, you can also select+ Add a firewall ruleto enter a specific IP address of your choice.Make sure theAllow Azure services and resources to access this servercheckbox is selected.WarningEnabling theAllow Azure services and resources to access this serversetting is not a recommended security practice for production scenarios. Real applications should implement more secure approaches, such as stronger firewall restrictions or virtual network configurations.You can read more about database security configurations on the following resources:Configure Azure SQL Database firewall rules.Configure a virtual network with private endpoints.
For local development connections, make sure your logical server is configured to allow your local machine IP address and other Azure services to connect:
Navigate to theNetworkingpage of your server.
Navigate to theNetworkingpage of your server.
Toggle theSelected networksradio button to show additional configuration options.
Toggle theSelected networksradio button to show additional configuration options.
SelectAdd your client IPv4 address(xx.xx.xx.xx)to add a firewall rule that will enable connections from your local machine IPv4 address. Alternatively, you can also select+ Add a firewall ruleto enter a specific IP address of your choice.
SelectAdd your client IPv4 address(xx.xx.xx.xx)to add a firewall rule that will enable connections from your local machine IPv4 address. Alternatively, you can also select+ Add a firewall ruleto enter a specific IP address of your choice.
Make sure theAllow Azure services and resources to access this servercheckbox is selected.WarningEnabling theAllow Azure services and resources to access this serversetting is not a recommended security practice for production scenarios. Real applications should implement more secure approaches, such as stronger firewall restrictions or virtual network configurations.You can read more about database security configurations on the following resources:Configure Azure SQL Database firewall rules.Configure a virtual network with private endpoints.
Make sure theAllow Azure services and resources to access this servercheckbox is selected.

Warning
Enabling theAllow Azure services and resources to access this serversetting is not a recommended security practice for production scenarios. Real applications should implement more secure approaches, such as stronger firewall restrictions or virtual network configurations.
You can read more about database security configurations on the following resources:
Configure Azure SQL Database firewall rules.
Configure a virtual network with private endpoints.
The server must also have Microsoft Entra authentication enabled and have a Microsoft Entra admin account assigned. For local development connections, the Microsoft Entra admin account should be an account you can also log into Visual Studio or the Azure CLI with locally. You can verify whether your server has Microsoft Entra authentication enabled on theMicrosoft Entra IDpage of your logical server.
The server must also have Microsoft Entra authentication enabled and have a Microsoft Entra admin account assigned. For local development connections, the Microsoft Entra admin account should be an account you can also log into Visual Studio or the Azure CLI with locally. You can verify whether your server has Microsoft Entra authentication enabled on theMicrosoft Entra IDpage of your logical server.

If you're using a personal Azure account, make sure you haveMicrosoft Entra setup and configured for Azure SQL Databasein order to assign your account as a server admin. If you're using a corporate account, Microsoft Entra ID will most likely already be configured for you.
If you're using a personal Azure account, make sure you haveMicrosoft Entra setup and configured for Azure SQL Databasein order to assign your account as a server admin. If you're using a corporate account, Microsoft Entra ID will most likely already be configured for you.
Create the project
For the steps ahead, create a .NET Minimal Web API using either the .NET CLI or Visual Studio 2022.
Visual Studio
.NET CLI
In the Visual Studio menu, navigate toFile>New>Project...
In the Visual Studio menu, navigate toFile>New>Project...
In the dialog window, enterASP.NETinto the project template search box and select the ASP.NET Core Web API result. ChooseNextat the bottom of the dialog.
In the dialog window, enterASP.NETinto the project template search box and select the ASP.NET Core Web API result. ChooseNextat the bottom of the dialog.
For theProject Name, enterDotNetSQL. Leave the default values for the rest of the fields and selectNext.
For theProject Name, enterDotNetSQL. Leave the default values for the rest of the fields and selectNext.
For theFramework, select .NET 7.0 and uncheckUse controllers (uncheck to use minimal APIs). This quickstart uses a Minimal API template to streamline endpoint creation and configuration.
For theFramework, select .NET 7.0 and uncheckUse controllers (uncheck to use minimal APIs). This quickstart uses a Minimal API template to streamline endpoint creation and configuration.
ChooseCreate. The new project opens inside the Visual Studio environment.
ChooseCreate. The new project opens inside the Visual Studio environment.
In a console window (such as cmd, PowerShell, or Bash), use thedotnet newcommand to create a new Web API app with the nameDotNetSQL. This command creates a simple "Hello World" C# project with a single source file:Program.cs.dotnet new web -o DotNetSQL
In a console window (such as cmd, PowerShell, or Bash), use thedotnet newcommand to create a new Web API app with the nameDotNetSQL. This command creates a simple "Hello World" C# project with a single source file:Program.cs.
dotnet new
dotnet new web -o DotNetSQL
dotnet new web -o DotNetSQL
Navigate into the newly createdDotNetSQLdirectory and open the project in Visual Studio.
Navigate into the newly createdDotNetSQLdirectory and open the project in Visual Studio.
Add the Microsoft.Data.SqlClient library
To connect to Azure SQL Database by using .NET, installMicrosoft.Data.SqlClient. This package acts as a data provider for connecting to databases, executing commands, and retrieving results.
Microsoft.Data.SqlClient
Note
Make sure to installMicrosoft.Data.SqlClientand notSystem.Data.SqlClient.Microsoft.Data.SqlClientis a newer version of the SQL client library that provides additional capabilities.
Microsoft.Data.SqlClient
System.Data.SqlClient
Microsoft.Data.SqlClient
Visual Studio
.NET CLI
In theSolution Explorerwindow, right-click the project'sDependenciesnode and selectManage NuGet Packages.
In theSolution Explorerwindow, right-click the project'sDependenciesnode and selectManage NuGet Packages.
In the resulting window, search forSqlClient. Locate theMicrosoft.Data.SqlClientresult and selectInstall.
In the resulting window, search forSqlClient. Locate theMicrosoft.Data.SqlClientresult and selectInstall.
Microsoft.Data.SqlClient
Use the following command to install theMicrosoft.Data.SqlClientpackage:
Microsoft.Data.SqlClient
dotnet add package Microsoft.Data.SqlClient
dotnet add package Microsoft.Data.SqlClient
Configure the connection string
Passwordless (Recommended)
SQL Authentication
For local development with passwordless connections to Azure SQL Database, add the followingConnectionStringssection to theappsettings.jsonfile. Replace the<database-server-name>and<database-name>placeholders with your own values.
ConnectionStrings
appsettings.json
<database-server-name>
<database-name>
"ConnectionStrings": {
    "AZURE_SQL_CONNECTIONSTRING": "Server=tcp:<database-server-name>.database.windows.net,1433;Initial Catalog=<database-name>;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;Authentication=\"Active Directory Default\";"
}
"ConnectionStrings": {
    "AZURE_SQL_CONNECTIONSTRING": "Server=tcp:<database-server-name>.database.windows.net,1433;Initial Catalog=<database-name>;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;Authentication=\"Active Directory Default\";"
}
The passwordless connection string sets a configuration value ofAuthentication="Active Directory Default", which instructs theMicrosoft.Data.SqlClientlibrary to connect to Azure SQL Database using a class calledDefaultAzureCredential.DefaultAzureCredentialenables passwordless connections to Azure services and is provided by the Azure Identity library on which the SQL client library depends.DefaultAzureCredentialsupports multiple authentication methods and determines which to use at runtime for different environments.
Authentication="Active Directory Default"
Microsoft.Data.SqlClient
DefaultAzureCredential
DefaultAzureCredential
DefaultAzureCredential
For example, when the app runs locally,DefaultAzureCredentialauthenticates via the user you're signed into Visual Studio with, or other local tools like the Azure CLI. Once the app deploys to Azure, the same code discovers and applies the managed identity that is associated with the hosted app, which you'll configure later. TheAzure Identity library overviewexplains the order and locations in whichDefaultAzureCredentiallooks for credentials.
DefaultAzureCredential
DefaultAzureCredential
Note
Passwordless connection strings are safe to commit to source control, since they don't contain secrets such as usernames, passwords, or access keys.
For local development with SQL Authentication to Azure SQL Database, add the followingConnectionStringssection to theappsettings.jsonfile. Replace the<database-server-name>,<database-name>,<user-id>, and<password>placeholders with your own values.
ConnectionStrings
appsettings.json
<database-server-name>
<database-name>
<user-id>
<password>
"ConnectionStrings": {
    "AZURE_SQL_CONNECTIONSTRING": "Server=tcp:<database-server-name>.database.windows.net,1433;Initial Catalog=<database-name>;Persist Security Info=False;User ID=<user-id>;Password=<password>;MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;"
}
"ConnectionStrings": {
    "AZURE_SQL_CONNECTIONSTRING": "Server=tcp:<database-server-name>.database.windows.net,1433;Initial Catalog=<database-name>;Persist Security Info=False;User ID=<user-id>;Password=<password>;MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;"
}
Warning
Use caution when managing connection strings that contain secrets such as usernames, passwords, or access keys. These secrets shouldn't be committed to source control or placed in unsecure locations where they might be accessed by unintended users. During local development, on a real app, you'll generally connect to a local database that doesn't require storing secrets or connecting directly to Azure.
Add the code to connect to Azure SQL Database
Replace the contents of theProgram.csfile with the following code, which performs the following important steps:
Program.cs
Retrieves the passwordless connection string fromappsettings.json
appsettings.json
Creates aPersonstable in the database during startup (for testing scenarios only)
Persons
Creates an HTTP GET endpoint to retrieve all records stored in thePersonstable
Persons
Creates an HTTP POST endpoint to add new records to thePersonstable
Persons
using Microsoft.Data.SqlClient;

var builder = WebApplication.CreateBuilder(args);

builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

var app = builder.Build();

// For production scenarios, consider keeping Swagger configurations behind the environment check
// if (app.Environment.IsDevelopment())
// {
    app.UseSwagger();
    app.UseSwaggerUI();
// }

app.UseHttpsRedirection();

string connectionString = app.Configuration.GetConnectionString("AZURE_SQL_CONNECTIONSTRING")!;

try
{
    // Table would be created ahead of time in production
    using var conn = new SqlConnection(connectionString);
    conn.Open();

    var command = new SqlCommand(
        "CREATE TABLE Persons (ID int NOT NULL PRIMARY KEY IDENTITY, FirstName varchar(255), LastName varchar(255));",
        conn);
    using SqlDataReader reader = command.ExecuteReader();
}
catch (Exception e)
{
    // Table may already exist
    Console.WriteLine(e.Message);
}

app.MapGet("/Person", () => {
    var rows = new List<string>();

    using var conn = new SqlConnection(connectionString);
    conn.Open();

    var command = new SqlCommand("SELECT * FROM Persons", conn);
    using SqlDataReader reader = command.ExecuteReader();

    if (reader.HasRows)
    {
        while (reader.Read())
        {
            rows.Add($"{reader.GetInt32(0)}, {reader.GetString(1)}, {reader.GetString(2)}");
        }
    }

    return rows;
})
.WithName("GetPersons")
.WithOpenApi();

app.MapPost("/Person", (Person person) => {
    using var conn = new SqlConnection(connectionString);
    conn.Open();

    var command = new SqlCommand(
        "INSERT INTO Persons (firstName, lastName) VALUES (@firstName, @lastName)",
        conn);

    command.Parameters.Clear();
    command.Parameters.AddWithValue("@firstName", person.FirstName);
    command.Parameters.AddWithValue("@lastName", person.LastName);

    using SqlDataReader reader = command.ExecuteReader();
})
.WithName("CreatePerson")
.WithOpenApi();

app.Run();
using Microsoft.Data.SqlClient;

var builder = WebApplication.CreateBuilder(args);

builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

var app = builder.Build();

// For production scenarios, consider keeping Swagger configurations behind the environment check
// if (app.Environment.IsDevelopment())
// {
    app.UseSwagger();
    app.UseSwaggerUI();
// }

app.UseHttpsRedirection();

string connectionString = app.Configuration.GetConnectionString("AZURE_SQL_CONNECTIONSTRING")!;

try
{
    // Table would be created ahead of time in production
    using var conn = new SqlConnection(connectionString);
    conn.Open();

    var command = new SqlCommand(
        "CREATE TABLE Persons (ID int NOT NULL PRIMARY KEY IDENTITY, FirstName varchar(255), LastName varchar(255));",
        conn);
    using SqlDataReader reader = command.ExecuteReader();
}
catch (Exception e)
{
    // Table may already exist
    Console.WriteLine(e.Message);
}

app.MapGet("/Person", () => {
    var rows = new List<string>();

    using var conn = new SqlConnection(connectionString);
    conn.Open();

    var command = new SqlCommand("SELECT * FROM Persons", conn);
    using SqlDataReader reader = command.ExecuteReader();

    if (reader.HasRows)
    {
        while (reader.Read())
        {
            rows.Add($"{reader.GetInt32(0)}, {reader.GetString(1)}, {reader.GetString(2)}");
        }
    }

    return rows;
})
.WithName("GetPersons")
.WithOpenApi();

app.MapPost("/Person", (Person person) => {
    using var conn = new SqlConnection(connectionString);
    conn.Open();

    var command = new SqlCommand(
        "INSERT INTO Persons (firstName, lastName) VALUES (@firstName, @lastName)",
        conn);

    command.Parameters.Clear();
    command.Parameters.AddWithValue("@firstName", person.FirstName);
    command.Parameters.AddWithValue("@lastName", person.LastName);

    using SqlDataReader reader = command.ExecuteReader();
})
.WithName("CreatePerson")
.WithOpenApi();

app.Run();
Finally, add thePersonclass to the bottom of theProgram.csfile. This class represents a single record in the database'sPersonstable.
Person
Program.cs
Persons
public class Person
{
    public required string FirstName { get; set; }
    public required string LastName { get; set; }
}
public class Person
{
    public required string FirstName { get; set; }
    public required string LastName { get; set; }
}
Run and test the app locally
The app is ready to be tested locally. Make sure you're signed in to Visual Studio or the Azure CLI with the same account you set as the admin for your database.
Press the run button at the top of Visual Studio to launch the API project.
Press the run button at the top of Visual Studio to launch the API project.
On the Swagger UI page, expand the POST method and selectTry it.
On the Swagger UI page, expand the POST method and selectTry it.
Modify the sample JSON to include values for thefirstandlastname. SelectExecuteto add a new record to the database. The API returns a successful response.
Modify the sample JSON to include values for thefirstandlastname. SelectExecuteto add a new record to the database. The API returns a successful response.
first
last

Expand theGETmethod on the Swagger UI page and selectTry it. ChooseExecute, and the person you just created is returned.
Expand theGETmethod on the Swagger UI page and selectTry it. ChooseExecute, and the person you just created is returned.
Deploy to Azure App Service
The app is ready to be deployed to Azure. Visual Studio can create an Azure App Service and deploy your application in a single workflow.
Make sure the app is stopped and builds successfully.
Make sure the app is stopped and builds successfully.
In Visual Studio'sSolution Explorerwindow, right-click on the top-level project node and selectPublish.
In Visual Studio'sSolution Explorerwindow, right-click on the top-level project node and selectPublish.
In the publishing dialog, selectAzureas the deployment target, and then selectNext.
In the publishing dialog, selectAzureas the deployment target, and then selectNext.
For the specific target, selectAzure App Service (Windows), and then selectNext.
For the specific target, selectAzure App Service (Windows), and then selectNext.
Select the+icon to create a new App Service to deploy to and enter the following values:Name: Leave the default value.Subscription name: Select the subscription to deploy to.Resource group: SelectNewand create a new resource group calledmsdocs-dotnet-sql.Hosting Plan: SelectNewto open the hosting plan dialog. Leave the default values and selectOK.SelectCreateto close the original dialog. Visual Studio creates the App Service resource in Azure.
Select the+icon to create a new App Service to deploy to and enter the following values:
Name: Leave the default value.
Name: Leave the default value.
Subscription name: Select the subscription to deploy to.
Subscription name: Select the subscription to deploy to.
Resource group: SelectNewand create a new resource group calledmsdocs-dotnet-sql.
Resource group: SelectNewand create a new resource group calledmsdocs-dotnet-sql.
Hosting Plan: SelectNewto open the hosting plan dialog. Leave the default values and selectOK.
Hosting Plan: SelectNewto open the hosting plan dialog. Leave the default values and selectOK.
SelectCreateto close the original dialog. Visual Studio creates the App Service resource in Azure.
SelectCreateto close the original dialog. Visual Studio creates the App Service resource in Azure.

Once the resource is created, make sure it's selected in the list of app services, and then selectNext.
Once the resource is created, make sure it's selected in the list of app services, and then selectNext.
On theAPI Managementstep, select theSkip this stepcheckbox at the bottom and then chooseFinish.
On theAPI Managementstep, select theSkip this stepcheckbox at the bottom and then chooseFinish.
On the Finish step, selectCloseif the dialog doesn't close automatically.
On the Finish step, selectCloseif the dialog doesn't close automatically.
SelectPublishin the upper right of the publishing profile summary to deploy the app to Azure.
SelectPublishin the upper right of the publishing profile summary to deploy the app to Azure.
When the deployment finishes, Visual Studio launches the browser to display the hosted app, but at this point the app doesn't work correctly on Azure. You still need to configure the secure connection between the App Service and the SQL database to retrieve your data.
Connect the App Service to Azure SQL Database
Passwordless (Recommended)
SQL Authentication
The following steps are required to create a passwordless connection between the App Service instance and Azure SQL Database:
Create a managed identity for the App Service. TheMicrosoft.Data.SqlClientlibrary included in your app will automatically discover the managed identity, just like it discovered your local Visual Studio user.
Microsoft.Data.SqlClient
Create a SQL database user and associate it with the App Service managed identity.
Assign SQL roles to the database user that allow for read, write, and potentially other permissions.
There are multiple tools available to implement these steps:
Service Connector (Recommended)
Azure portal
Service Connector is a tool that streamlines authenticated connections between different services in Azure. Service Connector currently supports connecting an App Service to a SQL database via the Azure CLI using theaz webapp connection create sqlcommand. This single command completes the three steps mentioned above for you.
az webapp connection create sql
az webapp connection create sql \
    -g <app-service-resource-group> \
    -n <app-service-name> \
    --tg <database-server-resource-group> \
    --server <database-server-name> \
    --database <database-name> \
    --system-identity
az webapp connection create sql \
    -g <app-service-resource-group> \
    -n <app-service-name> \
    --tg <database-server-resource-group> \
    --server <database-server-name> \
    --database <database-name> \
    --system-identity
You can verify the changes made by Service Connector on the App Service settings.
Navigate to theIdentitypage for your App Service. Under theSystem assignedtab, theStatusshould be set toOn. This value means that a system-assigned managed identity was enabled for your app.
Navigate to theIdentitypage for your App Service. Under theSystem assignedtab, theStatusshould be set toOn. This value means that a system-assigned managed identity was enabled for your app.
Navigate to theConfigurationpage for your App Service. Under theConnection stringstab, you should see a connection string calledAZURE_SQL_CONNECTIONSTRING. Select theClick to show valuetext to view the generated passwordless connection string. The name of this connection string matches the one you configured in your app, so it will be discovered automatically when running in Azure.
Navigate to theConfigurationpage for your App Service. Under theConnection stringstab, you should see a connection string calledAZURE_SQL_CONNECTIONSTRING. Select theClick to show valuetext to view the generated passwordless connection string. The name of this connection string matches the one you configured in your app, so it will be discovered automatically when running in Azure.
The Azure portal allows you to work with managed identities and run queries against Azure SQL Database. Complete the following steps to create a passwordless connection from your App Service instance to Azure SQL Database:
Create the managed identity
In the Azure portal, navigate to your App Service and selectIdentityon the left navigation.
In the Azure portal, navigate to your App Service and selectIdentityon the left navigation.
On theIdentitypage'sSystem assignedtab, make sure theStatustoggle is set toOn. When this setting is enabled, a system-assigned managed identity is created with the same name as your App Service. System-assigned identities are tied to the service instance and are destroyed with the app when it's deleted.
On theIdentitypage'sSystem assignedtab, make sure theStatustoggle is set toOn. When this setting is enabled, a system-assigned managed identity is created with the same name as your App Service. System-assigned identities are tied to the service instance and are destroyed with the app when it's deleted.
Create the database user and assign roles
In the Azure portal, browse to your SQL database and selectQuery editor (preview).
In the Azure portal, browse to your SQL database and selectQuery editor (preview).
SelectContinue as<your-username>on the right side of the screen to sign into the database using your account.
SelectContinue as<your-username>on the right side of the screen to sign into the database using your account.
<your-username>
On the query editor view, run the following T-SQL commands:CREATE USER <your-app-service-name> FROM EXTERNAL PROVIDER;
ALTER ROLE db_datareader ADD MEMBER <your-app-service-name>;
ALTER ROLE db_datawriter ADD MEMBER <your-app-service-name>;
ALTER ROLE db_ddladmin ADD MEMBER <your-app-service-name>;
GOThis SQL script creates a SQL database user that maps back to the managed identity of your App Service instance. It also assigns the necessary SQL roles to the user to allow your app to read, write, and modify the data and schema of your database. After this step is completed, your services are connected.
On the query editor view, run the following T-SQL commands:
CREATE USER <your-app-service-name> FROM EXTERNAL PROVIDER;
ALTER ROLE db_datareader ADD MEMBER <your-app-service-name>;
ALTER ROLE db_datawriter ADD MEMBER <your-app-service-name>;
ALTER ROLE db_ddladmin ADD MEMBER <your-app-service-name>;
GO
CREATE USER <your-app-service-name> FROM EXTERNAL PROVIDER;
ALTER ROLE db_datareader ADD MEMBER <your-app-service-name>;
ALTER ROLE db_datawriter ADD MEMBER <your-app-service-name>;
ALTER ROLE db_ddladmin ADD MEMBER <your-app-service-name>;
GO

This SQL script creates a SQL database user that maps back to the managed identity of your App Service instance. It also assigns the necessary SQL roles to the user to allow your app to read, write, and modify the data and schema of your database. After this step is completed, your services are connected.
Important
Although this solution provides a simple approach for getting started, it's not a best practice for production-grade environments. In those scenarios, the app shouldn't perform all operations using a single, elevated identity. You should try to implement the principle of least privilege by configuring multiple identities with specific permissions for specific tasks.
You can read more about configuring database roles and security on the following resources:
Tutorial: Secure a database in Azure SQL Database
Authorize database access to SQL Database
No additional steps are required to connect the App Service to Azure SQL Database using SQL Authentication. The connection string you configured in theappsettings.jsonfile includes the necessary credentials to authenticate.
appsettings.json
Warning
Use caution when managing connection strings that contain secrets such as usernames, passwords, or access keys. These secrets shouldn't be committed to source control or placed in unsecure locations where they might be accessed by unintended users. For a real application in a production-grade Azure environment, you can store connection strings in a secure location such as App Service configuration settings or Azure Key Vault. During local development, you'll generally connect to a local database that doesn't require storing secrets or connecting directly to Azure.
Test the deployed application
Select theBrowsebutton at the top of App Service overview page to launch the root url of your app.
Select theBrowsebutton at the top of App Service overview page to launch the root url of your app.
Append the/swagger/index.htmlpath to the URL to load the same Swagger test page you used locally.
Append the/swagger/index.htmlpath to the URL to load the same Swagger test page you used locally.
/swagger/index.html
Execute test GET and POST requests to verify that the endpoints work as expected.
Execute test GET and POST requests to verify that the endpoints work as expected.
Tip
If you receive a 500 Internal Server error while testing, it might be due to your database networking configurations. Verify that your logical server is configured with the settings outlined in theConfigure the databasesection.
Your application is now connected to Azure SQL Database in both local and hosted environments.
Clean up the resources
When you are finished working with the Azure SQL Database, delete the resource to avoid unintended costs.
Azure portal
Azure CLI
In the Azure portal search bar, search forAzure SQLand select the matching result.
In the Azure portal search bar, search forAzure SQLand select the matching result.
Locate and select your database in the list of databases.
Locate and select your database in the list of databases.
On theOverviewpage of your Azure SQL Database, selectDelete.
On theOverviewpage of your Azure SQL Database, selectDelete.
On theAzure you sure you want to delete...page that opens, type the name of your database to confirm, and then selectDelete.
On theAzure you sure you want to delete...page that opens, type the name of your database to confirm, and then selectDelete.
Delete your database by using theaz sql db deletecommand. Replace the placeholder parameters with your own values.
az sql db delete
az sql db delete --name <database-name> --resource-group <resource-group-name> --server <logical-server-name>
az sql db delete --name <database-name> --resource-group <resource-group-name> --server <logical-server-name>
Related content
Quickstart: Create an Azure SQL Database single database
Feedback
Was this page helpful?
Additional resources