Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Quickstart: Create a confidential VM with the Azure CLI
Article
2023-12-06
7 contributors
In this article
Applies to:âï¸ Linux VMs âï¸ Windows VMs
This quickstart shows you how to use the Azure Command-Line Interface (Azure CLI) to deploy a confidential virtual machine (confidential VM) in Azure. The Azure CLI is used to create and manage Azure resources via either the command line or scripts.
Prerequisites
If you don't have an Azure subscription,create a free Azure accountbefore you begin.
Launch Azure Cloud Shell
Azure Cloud Shell is a free interactive shell that you can use to run the steps in this article. It has common Azure tools preinstalled and configured to use with your account.
To open the Cloud Shell, just selectTry itfrom the upper right corner of a code block. You can also open Cloud Shell in a separate browser tab by going tohttps://shell.azure.com/bash. SelectCopyto copy the blocks of code, paste it into the Cloud Shell, and selectEnterto run it.
If you prefer to install and use the CLI locally, this quickstart requires Azure CLI version 2.38.0 or later. Runaz --versionto find the version. If you need to install or upgrade, seeInstall Azure CLI.
az --version
Create a resource group
Create a resource group with theaz group createcommand. An Azure resource group is a logical container into which Azure resources are deployed and managed. The following example creates a resource group namedmyResourceGroupin thenortheuropelocation:
Note
Confidential VMs are not available in all locations. For currently supported locations, see whichVM products are available by Azure region.
az group create --name myResourceGroup --location northeurope
az group create --name myResourceGroup --location northeurope
Create Confidential virtual machine using a platform-managed key
Create a VM with theaz vm createcommand.
The following example creates a VM namedmyVMand adds a user account namedazureuser. The--generate-ssh-keysparameter is used to automatically generate an SSH key, and put it in the default key location(~/.ssh). To use a specific set of keys instead, use the--ssh-key-valuesoption.
Forsize, select a confidential VM size. For more information, seesupported confidential VM families.
--generate-ssh-keys
--ssh-key-values
size
ChooseVMGuestStateOnlyfor no OS disk confidential encryption. Or, chooseDiskWithVMGuestStatefor OS disk confidential encryption with a platform-managed key. Secure Boot is enabled by default, but is optional forVMGuestStateOnly. For more information, seesecure boot and vTPM. For more information on disk encryption and encryption at host, seeconfidential OS disk encryptionandencryption at host.
VMGuestStateOnly
DiskWithVMGuestState
VMGuestStateOnly
az vm create \
  --resource-group myResourceGroup \
  --name myVM \
  --size Standard_DC4es_v5 \
  --admin-username <azure-username> \
  --admin-password <azure-password> \
  --enable-vtpm true \
  --image "Canonical:0001-com-ubuntu-confidential-vm-jammy:22_04-lts-cvm:latest" \
  --public-ip-sku Standard \
  --security-type ConfidentialVM \
  --os-disk-security-encryption-type VMGuestStateOnly \
  --enable-secure-boot true
az vm create \
  --resource-group myResourceGroup \
  --name myVM \
  --size Standard_DC4es_v5 \
  --admin-username <azure-username> \
  --admin-password <azure-password> \
  --enable-vtpm true \
  --image "Canonical:0001-com-ubuntu-confidential-vm-jammy:22_04-lts-cvm:latest" \
  --public-ip-sku Standard \
  --security-type ConfidentialVM \
  --os-disk-security-encryption-type VMGuestStateOnly \
  --enable-secure-boot true
It takes a few minutes to create the VM and supporting resources. The following example output shows the VM create operation was successful.
{
  "fqdns": "",
  "id": "/subscriptions/<guid>/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM",
  "location": "northeurope",
  "macAddress": "<MAC-address>",
  "powerState": "VM running",
  "privateIpAddress": "10.20.255.255",
  "publicIpAddress": "192.168.255.255",
  "resourceGroup": "myResourceGroup",
  "zones": ""
}
{
  "fqdns": "",
  "id": "/subscriptions/<guid>/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM",
  "location": "northeurope",
  "macAddress": "<MAC-address>",
  "powerState": "VM running",
  "privateIpAddress": "10.20.255.255",
  "publicIpAddress": "192.168.255.255",
  "resourceGroup": "myResourceGroup",
  "zones": ""
}
Make a note of thepublicIpAddressto use later.
publicIpAddress
Create Confidential virtual machine using a Customer Managed Key
To create a confidentialdisk encryption set, you have two options: UsingAzure Key VaultorAzure Key Vault managed Hardware Security Module (HSM). Based on your security and compliance needs you can choose either option. However, it is important to note that the standard SKU is not supported. The following example uses Azure Key Vault Premium.
Grant confidential VM Service PrincipalConfidential VM Orchestratorto tenant.
For this step you need to be a Global Admin or you need to have the User Access Administrator RBAC role.Install Microsoft Graph SDKto execute the commands below.
Confidential VM Orchestrator
Connect-Graph -Tenant "your tenant ID" Application.ReadWrite.All
New-MgServicePrincipal -AppId bf7b6499-ff71-4aa2-97a4-f372087be7f0 -DisplayName "Confidential VM Orchestrator"
Connect-Graph -Tenant "your tenant ID" Application.ReadWrite.All
New-MgServicePrincipal -AppId bf7b6499-ff71-4aa2-97a4-f372087be7f0 -DisplayName "Confidential VM Orchestrator"
Create an Azure Key Vault using theaz keyvault createcommand. For the pricing tier, select Premium (includes support for HSM backed keys). Make sure that you have an owner role in this key vault.
az keyvault create -n keyVaultName -g myResourceGroup --enabled-for-disk-encryption true --sku premium --enable-purge-protection true --enable-rbac-authorization false
az keyvault create -n keyVaultName -g myResourceGroup --enabled-for-disk-encryption true --sku premium --enable-purge-protection true --enable-rbac-authorization false
GiveConfidential VM Orchestratorpermissions togetandreleasethe key vault.
Confidential VM Orchestrator
get
release
$cvmAgent = az ad sp show --id "bf7b6499-ff71-4aa2-97a4-f372087be7f0" | Out-String | ConvertFrom-Json
az keyvault set-policy --name keyVaultName --object-id $cvmAgent.Id --key-permissions get release
$cvmAgent = az ad sp show --id "bf7b6499-ff71-4aa2-97a4-f372087be7f0" | Out-String | ConvertFrom-Json
az keyvault set-policy --name keyVaultName --object-id $cvmAgent.Id --key-permissions get release
Create a key in the key vault usingaz keyvault key create. For the key type, use RSA-HSM.
az keyvault key create --name mykey --vault-name keyVaultName --default-cvm-policy --exportable --kty RSA-HSM
az keyvault key create --name mykey --vault-name keyVaultName --default-cvm-policy --exportable --kty RSA-HSM
Create the disk encryption set usingaz disk-encryption-set create. Set the encryption type toConfidentialVmEncryptedWithCustomerKey.
ConfidentialVmEncryptedWithCustomerKey
$keyVaultKeyUrl=(az keyvault key show --vault-name keyVaultName --name mykey--query [key.kid] -o tsv)

az disk-encryption-set create --resource-group myResourceGroup --name diskEncryptionSetName --key-url $keyVaultKeyUrl  --encryption-type ConfidentialVmEncryptedWithCustomerKey
$keyVaultKeyUrl=(az keyvault key show --vault-name keyVaultName --name mykey--query [key.kid] -o tsv)

az disk-encryption-set create --resource-group myResourceGroup --name diskEncryptionSetName --key-url $keyVaultKeyUrl  --encryption-type ConfidentialVmEncryptedWithCustomerKey
Grant the disk encryption set resource access to the key vault usingaz key vault set-policy.
$desIdentity=(az disk-encryption-set show -n diskEncryptionSetName -g myResourceGroup --query [identity.principalId] -o tsv)

az keyvault set-policy -n keyVaultName -g myResourceGroup --object-id $desIdentity --key-permissions wrapkey unwrapkey get
$desIdentity=(az disk-encryption-set show -n diskEncryptionSetName -g myResourceGroup --query [identity.principalId] -o tsv)

az keyvault set-policy -n keyVaultName -g myResourceGroup --object-id $desIdentity --key-permissions wrapkey unwrapkey get
Use the disk encryption set ID to create the VM.
$diskEncryptionSetID=(az disk-encryption-set show -n diskEncryptionSetName -g myResourceGroup --query [id] -o tsv)
$diskEncryptionSetID=(az disk-encryption-set show -n diskEncryptionSetName -g myResourceGroup --query [id] -o tsv)
Create a VM with theaz vm createcommand. ChooseDiskWithVMGuestStatefor OS disk confidential encryption with a customer-managed key. Enabling secure boot is optional, but recommended.  For more information, seesecure boot and vTPM. For more information on disk encryption, seeconfidential OS disk encryption.
DiskWithVMGuestState
az vm create \
--resource-group myResourceGroup \
--name myVM \
--size Standard_DC4as_v5 \
--admin-username <azure-user> \
--admin-password <azure-password> \
--enable-vtpm true \
--enable-secure-boot true \
--image "Canonical:0001-com-ubuntu-confidential-vm-focal:20_04-lts-cvm:latest" \
--public-ip-sku Standard \
--security-type ConfidentialVM \
--os-disk-security-encryption-type DiskWithVMGuestState \
--os-disk-secure-vm-disk-encryption-set $diskEncryptionSetID \
az vm create \
--resource-group myResourceGroup \
--name myVM \
--size Standard_DC4as_v5 \
--admin-username <azure-user> \
--admin-password <azure-password> \
--enable-vtpm true \
--enable-secure-boot true \
--image "Canonical:0001-com-ubuntu-confidential-vm-focal:20_04-lts-cvm:latest" \
--public-ip-sku Standard \
--security-type ConfidentialVM \
--os-disk-security-encryption-type DiskWithVMGuestState \
--os-disk-secure-vm-disk-encryption-set $diskEncryptionSetID \
It takes a few minutes to create the VM and supporting resources. The following example output shows the VM create operation was successful.
{
  "fqdns": "",
  "id": "/subscriptions/<guid>/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM",
  "location": "eastus",
  "macAddress": "<MAC-address>",
  "powerState": "VM running",
  "privateIpAddress": "10.20.255.255",
  "publicIpAddress": "192.168.255.255",
  "resourceGroup": "myResourceGroup",
  "zones": ""
}
{
  "fqdns": "",
  "id": "/subscriptions/<guid>/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM",
  "location": "eastus",
  "macAddress": "<MAC-address>",
  "powerState": "VM running",
  "privateIpAddress": "10.20.255.255",
  "publicIpAddress": "192.168.255.255",
  "resourceGroup": "myResourceGroup",
  "zones": ""
}
Make a note of thepublicIpAddressto use later.
publicIpAddress
Connect and attest the AMD-based CVM through Microsoft Azure Attestation Sample App
To use a sample application in C++ for use with the guest attestation APIs, use the following steps. This example uses a Linux confidential virtual machine. For Windows, seebuild instructions for Windows.
Sign in to your confidential VM using its public IP address.
Sign in to your confidential VM using its public IP address.
Clone thesample Linux application.
Clone thesample Linux application.
Install thebuild-essentialpackage. This package installs everything required for compiling the sample application.
Install thebuild-essentialpackage. This package installs everything required for compiling the sample application.
build-essential
sudo apt-get install build-essential
sudo apt-get install build-essential
Install theâ¯packages below.
sudo apt-get install libcurl4-openssl-dev
sudo apt-get install libjsoncpp-dev
sudo apt-get install libboost-all-dev
sudo apt install nlohmann-json3-dev
sudo apt-get install libcurl4-openssl-dev
sudo apt-get install libjsoncpp-dev
sudo apt-get install libboost-all-dev
sudo apt install nlohmann-json3-dev
Download theattestation package.
Download theattestation package.
Install the attestation package. Make sure to replace<version>with the version that you downloaded.
Install the attestation package. Make sure to replace<version>with the version that you downloaded.
<version>
sudo dpkg -i azguestattestation1_<latest-version>_amd64.deb
sudo dpkg -i azguestattestation1_<latest-version>_amd64.deb
Once the above packages have been installed, use the below steps to build and run the app.
cd confidential-computing-cvm-guest-attestation/cvm-attestation-sample-app
sudo cmake . && make
sudo ./AttestationClient -o token
cd confidential-computing-cvm-guest-attestation/cvm-attestation-sample-app
sudo cmake . && make
sudo ./AttestationClient -o token
To convert the web token to a JSON, use the steps below.
sudo ./AttestationClient -o token>> /attestation_output

JWT=$(cat /attestation_output)

echo -n $JWT | cut -d "." -f 1 | base64 -d 2>/dev/null | jq .
echo -n $JWT | cut -d "." -f 2 | base64 -d 2>/dev/null | jq .
sudo ./AttestationClient -o token>> /attestation_output

JWT=$(cat /attestation_output)

echo -n $JWT | cut -d "." -f 1 | base64 -d 2>/dev/null | jq .
echo -n $JWT | cut -d "." -f 2 | base64 -d 2>/dev/null | jq .
Next steps
Create a confidential VM with an ARM template
Feedback
Was this page helpful?
Additional resources