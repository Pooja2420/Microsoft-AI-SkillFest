Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Choose an Azure container service
Article
2025-02-03
9 contributors
In this article
Azure offers a range of container hosting services that are designed to accommodate various workloads, architectures, and business requirements. This container service selection guide can help you understand which Azure container service is best suited to your workload scenarios and requirements.
Note
In this guide, the termworkloadrefers to a collection of application resources that support a business goal or the execution of a business process. A workload uses multiple services, like APIs and data stores, that work together to deliver specific end-to-end functionality.
How to use this guide
This guide includes two articles: this introduction article and another article aboutconsiderations that are sharedacross all workload types.
Note
If you aren't yet committed to containerization, seeChoose an Azure compute servicefor information about other compute options that you can use to host your workload.
This introduction article describes the Azure container services that are in scope for this guide and how the service models compare in terms of tradeoffs between configurability and opinionated solutions, such as customer-managed versus Microsoft-managed approaches. After you identify candidate services based on your service model preferences, the next step is to evaluate the options against your workload requirements by reviewing the article onshared considerationsfor networking, security, operations, and reliability.
This guide takes into consideration tradeoffs that you might need to make, based on the technical requirements, size, and complexity of your workload and the expertise of your workload's team.
Azure container services in scope for this guide
This guide focuses on a subset of the container services that Azure currently offers. This subset provides a mature feature set for web applications and APIs, networking, observability, developer tools, and operations. These container services are compared:

Azure Container Appsis a fully managed platform that allows you to run containerized applications without worrying about orchestration or infrastructure. For more information, seeAzure Container Apps documentation.

Azure Kubernetes Service (AKS)is a managed Kubernetes service for running containerized applications. With AKS, you can take advantage of managedadd-ons and extensionsfor additional capabilities while preserving the broadest level of configurability. For more information, seeAKS documentation.

Web App for Containersis a feature of Azure App Service, a fully managed service for hosting HTTP-based web apps with built-in infrastructure maintenance, security patching, scaling, and diagnostic tooling. For more information, seeApp Service documentation.
For a complete list of all Azure container services, seethe container services product category page.
Service model considerations
The service model provides the broadest insight into the level of flexibility and control that any Azure container service provides, in exchange for its overall simplicity and ease of use.
For a general introduction into the terminology and concepts around service models, including infrastructure as a service (IaaS) and platform as a service (PaaS), seeShared responsibility in the cloud.
Comparing the service models of Azure container solutions
As a hybrid of IaaS and PaaS, AKS prioritizes control over simplicity, leveraging the de facto standard for container orchestration: Kubernetes. Though AKS streamlines the management of the underlying core infrastructure, this VM-based platform is still exposed to your applications and requires appropriate guardrails and processes, like patching, to ensure security and business continuity. The compute infrastructure is supported by additional Azure resources that are hosted directly in your subscription, like Azure load balancers.
AKS also provides access to the Kubernetes API server, which enables you to customize the container orchestration and thus deploy projects from the Cloud Native Computing Foundation (CNCF). Consequently, there's a significant learning curve for workload teams that are new to Kubernetes. If you're new to containerized solutions, this learning curve must be taken in consideration. The following PaaS solutions offer a lower barrier to entry. You can move to Kubernetes when your requirements dictate that move.
AKS Automaticsimplifies the adoption of Kubernetes by automating complex cluster management tasks, reducing the need for deep Kubernetes expertise. It offers a more streamlined, PaaS-like experience while retaining the flexibility and extensibility of Kubernetes. Azure handles cluster setup, node provisioning, scaling, security patching, and applies some best-practice configurations by default. This reduces operational effort but comes with a restricted set of available topology options.
Note
This guide will distinguish between AKS Standard and AKS Automatic where applicable. It can otherwise be assumed that functionality described has parity between both Standard and Automatic offerings.
Azure Container Apps is an abstraction layer on top of Kubernetes which allows your apps to run and scale without you having to directly manage the underlying infrastructure. Container Apps offers both serverless and dedicated compute options, giving you full control over the type and amount of compute resources available to your applications. While abstracting away the container orchestration APIs, Container Apps still gives you out-of-the-box access to a key features like Layer 7 ingress, traffic splitting, A/B testing, and application lifecycle management.
Web App for Containers is also a PaaS offering, but it provides more simplicity, and less control, than Container Apps. It abstracts away container orchestration but still provides appropriate scaling, application lifecycle management, traffic splitting, network integration, and observability.
Hosting model considerations
You can use Azure resources, like AKS clusters, to host multiple workloads. Doing so can help you streamline operations and thereby reduce overall cost. If you choose this path, here are a few important considerations:
AKSis commonly used to host multiple workloads or disparate workload components. You can isolate these workloads and components by using Kubernetes native functionality, like namespaces, access controls, and network controls, to meet security requirements.You can also use AKS in single-workload scenarios if you need the additional functionality that the Kubernetes API provides and your workload team has enough experience to operate a Kubernetes cluster. Teams with less Kubernetes experience can still successfully operate their own clusters by taking advantage of Azure managedadd-onsand features, likecluster auto-upgrade, to reduce operational effort.
AKSis commonly used to host multiple workloads or disparate workload components. You can isolate these workloads and components by using Kubernetes native functionality, like namespaces, access controls, and network controls, to meet security requirements.
You can also use AKS in single-workload scenarios if you need the additional functionality that the Kubernetes API provides and your workload team has enough experience to operate a Kubernetes cluster. Teams with less Kubernetes experience can still successfully operate their own clusters by taking advantage of Azure managedadd-onsand features, likecluster auto-upgrade, to reduce operational effort.
Container Appsshould be used to host a single workload with a shared security boundary. Container Apps has a single top-level logical boundary called aContainer Apps environment, which also serves as an enhanced-security boundary. There are no mechanisms for additional granular access control. For example, intra-environment communication is unrestricted, and all applications share a single Log Analytics workspace.If the workload has multiple components and multiple security boundaries, deploy multiple Container Apps environments, or consider AKS instead.
Container Appsshould be used to host a single workload with a shared security boundary. Container Apps has a single top-level logical boundary called aContainer Apps environment, which also serves as an enhanced-security boundary. There are no mechanisms for additional granular access control. For example, intra-environment communication is unrestricted, and all applications share a single Log Analytics workspace.
If the workload has multiple components and multiple security boundaries, deploy multiple Container Apps environments, or consider AKS instead.
Web App for Containersis a feature of App Service. App Service groups applications into a billing boundary called anApp Service plan. Because you can scope role-based access control (RBAC) at the application level, it might be tempting to host multiple workloads in a single plan. However, we recommend that you host a single workload per plan to avoid the Noisy Neighbor problem. All apps in a single App Service plan share the same allocated compute, memory, and storage.When you consider hardware isolation, you need to be aware that App Service plans generally run on infrastructure that's shared with other Azure customers. You can choose Dedicated tiers for dedicated VMs or Isolated tiers for dedicated VMs in a dedicated virtual network.
Web App for Containersis a feature of App Service. App Service groups applications into a billing boundary called anApp Service plan. Because you can scope role-based access control (RBAC) at the application level, it might be tempting to host multiple workloads in a single plan. However, we recommend that you host a single workload per plan to avoid the Noisy Neighbor problem. All apps in a single App Service plan share the same allocated compute, memory, and storage.
When you consider hardware isolation, you need to be aware that App Service plans generally run on infrastructure that's shared with other Azure customers. You can choose Dedicated tiers for dedicated VMs or Isolated tiers for dedicated VMs in a dedicated virtual network.
In general, all Azure container services can host multiple applications that have multiple components. However, Container Apps and Web App for Containers are better suited for a single-workload component or multiple highly related workload components that share a similar lifecycle, where a single team owns and runs the applications.
If you need to host disparate, potentially unrelated application components or workloads on one host, consider AKS.
The tradeoff between control and ease of use
AKS provides the most configurability, but this configurability requires more operational effort, as compared to the other services. Although Container Apps and Web App for Containers are both PaaS services that have similar levels of Microsoft-managed features, Web App for Containers emphasizes simplicity to cater to its target audience: existing Azure PaaS customers, who find the interface familiar.
Rule of thumb
Generally, services that offer more simplicity tend to suit customers who prefer to focus on feature development rather than infrastructure management. Services that offer more control tend to suit customers who need more configurability and have the skills, resources, and business justification necessary to manage their own infrastructure.
Shared considerations across all workloads
Although a workload team might prefer a particular service model, that model might not meet the requirements of the organization as a whole. For example, developers might prefer less operational effort, but security teams might consider this type of overhead necessary to meet compliance requirements. Teams need to collaborate to make the appropriate tradeoffs.
Be aware that shared considerations are broad. Only a subset might be relevant to you, depending not just on the workload type but also on your role within the organization.
The following table provides a high-level overview of considerations, including service feature comparisons. Review the considerations in each category and compare them against your workload's requirements.
After reviewing the preceding considerations, you still might not have found the perfect fit. That's perfectly normal.
Evaluating tradeoffs
Choosing a cloud service isn't a straightforward exercise. Given the complexity of cloud computing, the collaboration between many teams, and resource constraints involving people, budgets, and time, every solution has tradeoffs.
Be aware that, for any given workload, some requirements might be more critical than others. For example, an application team might prefer a PaaS solution like Container Apps but choose AKS because their security team requires deny-by-default network controls between colocated workload components, which is an AKS-only feature that uses Kubernetes network policies.
Finally, note that the preceding shared considerations include the most common requirements but aren't comprehensive. It's the workload team's responsibility to investigate every requirement against the preferred service's feature set before confirming a decision.
Conclusion
This guide describes the most common considerations that you face when you choose an Azure container service. It's designed to guide workload teams in making informed decisions. The process starts with choosing a cloud service model, which involves determining the desired level of control. Control comes at the expense of simplicity. In other words, it's a process of finding the right balance between a self-managed infrastructure and one that's managed by Microsoft.
Many workload teams can choose an Azure container service solely based on the preferred service model: PaaS versus IaaS. Other teams need to investigate further to determine how service-specific features address workload or organizational requirements.
All workload teams should use this guide in addition to incorporating due diligence to avoid difficult-to-reverse decisions. Be aware, however, that the decision isn't confirmed until developers try the service and decide based on experience rather than theory.
Contributors
This article is maintained by Microsoft. It was originally written by the following contributors.
Principal authors:
Andre Dewes| Senior Customer Engineer
Marcos Martinez| Senior Service Engineer
Julie Ng| Senior Engineer
Other contributors:
Mick Alberts| Technical Writer
Martin Gjoshevski| Senior Customer Engineer
Don High|  Principal Customer Engineer
Nelly Kiboi| Service Engineer
Xuhong Liu| Senior Service Engineer
Faisal Mustafa|  Senior Customer Engineer
Walter Myers| Principal Customer Engineering Manager
Sonalika Roy| Senior Customer Engineer
Paolo Salvatori|  Principal Customer Engineer
Victor Santana|  Principal Customer Engineer
Next step
Learn more about shared architectural considerations for the services mentioned in this article.
Shared architectural considerations
Feedback
Was this page helpful?
Additional resources