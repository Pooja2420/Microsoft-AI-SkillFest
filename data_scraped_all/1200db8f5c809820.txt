Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Author policies for array properties on Azure resources
Article
2025-03-04
9 contributors
In this article
Azure Resource Manager properties are commonly defined as strings and booleans. When a one-to-many relationship exists, complex properties are instead defined as arrays. In Azure Policy, arrays are used in several different ways:
The type of adefinition parameter, to provide multiple options.
Part of apolicy ruleusing the conditionsinornotIn.
in
notIn
Part of a policy rule that counts how many array members satisfy a condition.
In theappendandmodifyeffects to update an existing array
This article covers each use by Azure Policy and provides several example definitions.
Parameter arrays
Define a parameter array
Defining a parameter as an array allows the policy flexibility when more than one value is needed. This policy definition allows any single location for the parameterallowedLocationsand defaults toeastus2:
allowedLocations
"parameters": {
  "allowedLocations": {
    "type": "string",
    "metadata": {
      "description": "The list of allowed locations for resources.",
      "displayName": "Allowed locations",
      "strongType": "location"
    },
    "defaultValue": "eastus2"
  }
}
"parameters": {
  "allowedLocations": {
    "type": "string",
    "metadata": {
      "description": "The list of allowed locations for resources.",
      "displayName": "Allowed locations",
      "strongType": "location"
    },
    "defaultValue": "eastus2"
  }
}
Astypewasstring, only one value can be set when assigning the policy. If this policy is assigned, resources in scope are only allowed within a single Azure region. Most policies definitions need to allow for a list of approved options, such as allowingeastus2,eastus, andwestus2.
type
To create the policy definition to allow multiple options, use thearraytype. The same policy can be rewritten as follows:
type
"parameters": {
  "allowedLocations": {
    "type": "array",
    "metadata": {
      "description": "The list of allowed locations for resources.",
      "displayName": "Allowed locations",
      "strongType": "location"
    },
    "defaultValue": [
      "eastus2"
    ],
    "allowedValues": [
      "eastus2",
      "eastus",
      "westus2"
    ]
  }
}
"parameters": {
  "allowedLocations": {
    "type": "array",
    "metadata": {
      "description": "The list of allowed locations for resources.",
      "displayName": "Allowed locations",
      "strongType": "location"
    },
    "defaultValue": [
      "eastus2"
    ],
    "allowedValues": [
      "eastus2",
      "eastus",
      "westus2"
    ]
  }
}
Note
Once a policy definition is saved, thetypeproperty on a parameter can't be changed.
type
This new parameter definition takes more than one value during policy assignment. With the array propertyallowedValuesdefined, the values available during assignment are further limited to the predefined list of choices. Use ofallowedValuesis optional.
allowedValues
allowedValues
Pass values to a parameter array during assignment
When you assign the policy through the Azure portal, a parameter oftypearrayis displayed as a single textbox. The hint saysUse ; to separate values. (e.g. London;New York). To pass the allowed location values ofeastus2,eastus, andwestus2to the parameter, use the following string:
type
Use ; to separate values. (e.g. London;New York)
eastus2;eastus;westus2
eastus2;eastus;westus2
The format for the parameter value is different when using Azure CLI, Azure PowerShell, or the REST API. The values are passed through a JSON string that also includes the name of the parameter.
{
  "allowedLocations": {
    "value": [
      "eastus2",
      "eastus",
      "westus2"
    ]
  }
}
{
  "allowedLocations": {
    "value": [
      "eastus2",
      "eastus",
      "westus2"
    ]
  }
}
To use this string with each SDK, use the following commands:
Azure CLI: Commandaz policy assignment createwith parameterparams.
params
Azure PowerShell: CmdletNew-AzPolicyAssignmentwith parameterPolicyParameter.
PolicyParameter
REST API: In thePUTcreateoperation as part of the Request Body as the value of theproperties.parametersproperty.
properties.parameters
Using arrays in conditions
In and notIn
TheinandnotInconditions only work with array values. They check the existence of a value in an array. The array can be a literal JSON array or a reference to an array parameter. For example:
in
notIn
{
  "field": "tags.environment",
  "in": [
    "dev",
    "test"
  ]
}
{
  "field": "tags.environment",
  "in": [
    "dev",
    "test"
  ]
}
{
  "field": "location",
  "notIn": "[parameters('allowedLocations')]"
}
{
  "field": "location",
  "notIn": "[parameters('allowedLocations')]"
}
Value count
Thevalue countexpression count how many array members meet a condition. It provides a way to evaluate the same condition multiple times, using different values on each iteration. For example, the following condition checks whether the resource name matches any pattern from an array of patterns:
{
  "count": {
    "value": [
      "test*",
      "dev*",
      "prod*"
    ],
    "name": "pattern",
    "where": {
      "field": "name",
      "like": "[current('pattern')]"
    }
  },
  "greater": 0
}
{
  "count": {
    "value": [
      "test*",
      "dev*",
      "prod*"
    ],
    "name": "pattern",
    "where": {
      "field": "name",
      "like": "[current('pattern')]"
    }
  },
  "greater": 0
}
In order to evaluate the expression, Azure Policy evaluates thewherecondition three times, once for each member of[ "test*", "dev*", "prod*" ], counting how many times it was evaluated totrue. On every iteration, the value of the current array member is paired with thepatternindex name defined bycount.name. This value can then be referenced inside thewherecondition by calling a special template function:current('pattern').
where
[ "test*", "dev*", "prod*" ]
true
pattern
count.name
where
current('pattern')
current('pattern')
"test*"
"dev*"
"prod*"
The condition is true only if the resulted count is greater than 0.
To make the previous condition more generic, use aparametersreference instead of a literal array:
parameters
{
  "count": {
    "value": "[parameters('patterns')]",
    "name": "pattern",
    "where": {
      "field": "name",
      "like": "[current('pattern')]"
    }
  },
  "greater": 0
}
{
  "count": {
    "value": "[parameters('patterns')]",
    "name": "pattern",
    "where": {
      "field": "name",
      "like": "[current('pattern')]"
    }
  },
  "greater": 0
}
When thevalue countexpression isn't under any othercountexpression,count.nameis optional and thecurrent()function can be used without any arguments:
value count
count
count.name
current()
{
  "count": {
    "value": "[parameters('patterns')]",
    "where": {
      "field": "name",
      "like": "[current()]"
    }
  },
  "greater": 0
}
{
  "count": {
    "value": "[parameters('patterns')]",
    "where": {
      "field": "name",
      "like": "[current()]"
    }
  },
  "greater": 0
}
Thevalue countalso support arrays of complex objects, allowing for more complex conditions. For example, the following condition defines a desired tag value for each name pattern and checks whether the resource name matches the pattern, but doesn't have the required tag value:
value count
{
  "count": {
    "value": [
      {
        "pattern": "test*",
        "envTag": "dev"
      },
      {
        "pattern": "dev*",
        "envTag": "dev"
      },
      {
        "pattern": "prod*",
        "envTag": "prod"
      },
    ],
    "name": "namePatternRequiredTag",
    "where": {
      "allOf": [
        {
          "field": "name",
          "like": "[current('namePatternRequiredTag').pattern]"
        },
        {
          "field": "tags.env",
          "notEquals": "[current('namePatternRequiredTag').envTag]"
        }
      ]
    }
  },
  "greater": 0
}
{
  "count": {
    "value": [
      {
        "pattern": "test*",
        "envTag": "dev"
      },
      {
        "pattern": "dev*",
        "envTag": "dev"
      },
      {
        "pattern": "prod*",
        "envTag": "prod"
      },
    ],
    "name": "namePatternRequiredTag",
    "where": {
      "allOf": [
        {
          "field": "name",
          "like": "[current('namePatternRequiredTag').pattern]"
        },
        {
          "field": "tags.env",
          "notEquals": "[current('namePatternRequiredTag').envTag]"
        }
      ]
    }
  },
  "greater": 0
}
For useful examples, seevalue count examples.
Referencing array resource properties
Many use cases require working with array properties in the evaluated resource. Some scenarios require referencing an entire array (for example, checking its length). Others require applying a condition to each individual array member (for example, ensure that all firewall rule block access from the internet). Understanding the different ways Azure Policy can reference resource properties, and how these references behave when they refer to array properties is the key for writing conditions that cover these scenarios.
Referencing resource properties
Resource properties can be referenced by Azure Policy usingaliasesThere are two ways to reference the values of a resource property within Azure Policy:
Usefieldcondition to check whether all selected resource properties meet a condition. Example:{
  "field": "Microsoft.Test/resourceType/property",
  "equals": "value"
}
Usefieldcondition to check whether all selected resource properties meet a condition. Example:
{
  "field": "Microsoft.Test/resourceType/property",
  "equals": "value"
}
{
  "field": "Microsoft.Test/resourceType/property",
  "equals": "value"
}
Usefield()function to access the value of a property. Example:{
  "value": "[take(field('Microsoft.Test/resourceType/property'), 7)]",
  "equals": "prefix_"
}
Usefield()function to access the value of a property. Example:
field()
{
  "value": "[take(field('Microsoft.Test/resourceType/property'), 7)]",
  "equals": "prefix_"
}
{
  "value": "[take(field('Microsoft.Test/resourceType/property'), 7)]",
  "equals": "prefix_"
}
The field condition has an implicitallOfbehavior. If the alias represents a collection of values, it checks whether all individual values meet the condition. Thefield()function returns the values represented by the alias as-is, which can then be manipulated by other template functions.
allOf
field()
Referencing array fields
Array resource properties are represented by two different types of aliases. One normal alias andarray aliasesthat have[*]attached to it:
[*]
Microsoft.Test/resourceType/stringArray
Microsoft.Test/resourceType/stringArray
Microsoft.Test/resourceType/stringArray[*]
Microsoft.Test/resourceType/stringArray[*]
The first alias represents a single value, the value ofstringArrayproperty from the request content. Since the value of that property is an array, it isn't useful in policy conditions. For example:
stringArray
{
  "field": "Microsoft.Test/resourceType/stringArray",
  "equals": "..."
}
{
  "field": "Microsoft.Test/resourceType/stringArray",
  "equals": "..."
}
This condition compares the entirestringArrayarray to a single string value. Most conditions, includingequals, only accept string values, so there's not much use in comparing an array to a string. The main scenario where referencing the array property is useful is when checking whether it exists:
stringArray
equals
{
  "field": "Microsoft.Test/resourceType/stringArray",
  "exists": "true"
}
{
  "field": "Microsoft.Test/resourceType/stringArray",
  "exists": "true"
}
With thefield()function, the returned value is the array from the request content, which can then be used with any of thesupported template functionsthat accept array arguments. For example, the following condition checks whether the length ofstringArrayis greater than 0:
field()
stringArray
{
  "value": "[length(field('Microsoft.Test/resourceType/stringArray'))]",
  "greater": 0
}
{
  "value": "[length(field('Microsoft.Test/resourceType/stringArray'))]",
  "greater": 0
}
Aliases that use the[*]syntax represent a collection of property values selected from an array property, which is different than selecting the array property itself. For example,Microsoft.Test/resourceType/stringArray[*]returns a collection that has all of the members ofstringArray. As mentioned previously, afieldcondition checks that all selected resource properties meet the condition, therefore the following condition is true only if all the members ofstringArrayare equal to"value".
[*]
Microsoft.Test/resourceType/stringArray[*]
stringArray
field
stringArray
"value"
{
  "field": "Microsoft.Test/resourceType/stringArray[*]",
  "equals": "value"
}
{
  "field": "Microsoft.Test/resourceType/stringArray[*]",
  "equals": "value"
}
If the array is empty, the condition evaluates to true because no member of the array is in violation. In this scenario, the recommendation is to use thecount expressioninstead. If the array contains objects, a[*]alias can be used to select the value of a specific property from each array member. Example:
[*]
{
  "field": "Microsoft.Test/resourceType/objectArray[*].property",
  "equals": "value"
}
{
  "field": "Microsoft.Test/resourceType/objectArray[*].property",
  "equals": "value"
}
This condition is true if the values of allpropertyproperties inobjectArrayare equal to"value". For more examples, seeMore alias examples.
property
objectArray
"value"
When using thefield()function to reference an array alias, the returned value is an array of all the selected values. This behavior means that the common use case of thefield()function, the ability to apply template functions to resource property values, is limited. The only template functions that can be used in this case are the ones that accept array arguments. For example, it's possible to get the length of the array with[length(field('Microsoft.Test/resourceType/objectArray[*].property'))]. However, more complex scenarios like applying template function to each array member and comparing it to a desired value are only possible when using thecountexpression. For more information, seeField count expression.
field()
field()
[length(field('Microsoft.Test/resourceType/objectArray[*].property'))]
count
To summarize, see the following example resource content and the selected values returned by various aliases:
{
  "tags": {
    "env": "prod"
  },
  "properties": {
    "stringArray": [
      "a",
      "b",
      "c"
    ],
    "objectArray": [
      {
        "property": "value1",
        "nestedArray": [
          1,
          2
        ]
      },
      {
        "property": "value2",
        "nestedArray": [
          3,
          4
        ]
      }
    ]
  }
}
{
  "tags": {
    "env": "prod"
  },
  "properties": {
    "stringArray": [
      "a",
      "b",
      "c"
    ],
    "objectArray": [
      {
        "property": "value1",
        "nestedArray": [
          1,
          2
        ]
      },
      {
        "property": "value2",
        "nestedArray": [
          3,
          4
        ]
      }
    ]
  }
}
When you use the field condition on the example resource content, the results are as follows:
Microsoft.Test/resourceType/missingArray
null
Microsoft.Test/resourceType/missingArray[*]
Microsoft.Test/resourceType/missingArray[*].property
Microsoft.Test/resourceType/stringArray
["a", "b", "c"]
Microsoft.Test/resourceType/stringArray[*]
"a"
"b"
"c"
Microsoft.Test/resourceType/objectArray[*]
{ "property": "value1", "nestedArray": [ 1, 2 ] }
{ "property": "value2", "nestedArray": [ 3, 4 ] }
Microsoft.Test/resourceType/objectArray[*].property
"value1"
"value2"
Microsoft.Test/resourceType/objectArray[*].nestedArray
[ 1, 2 ]
[ 3, 4 ]
Microsoft.Test/resourceType/objectArray[*].nestedArray[*]
1
2
3
4
When you use thefield()function on the example resource content, the results are as follows:
field()
[field('Microsoft.Test/resourceType/missingArray')]
""
[field('Microsoft.Test/resourceType/missingArray[*]')]
[]
[field('Microsoft.Test/resourceType/missingArray[*].property')]
[]
[field('Microsoft.Test/resourceType/stringArray')]
["a", "b", "c"]
[field('Microsoft.Test/resourceType/stringArray[*]')]
["a", "b", "c"]
[field('Microsoft.Test/resourceType/objectArray[*]')]
[{ "property": "value1", "nestedArray": [ 1, 2 ] }, { "property": "value2", "nestedArray": [ 3, 4 ] }]
[field('Microsoft.Test/resourceType/objectArray[*].property')]
["value1", "value2"]
[field('Microsoft.Test/resourceType/objectArray[*].nestedArray')]
[[ 1, 2 ], [ 3, 4 ]]
[field('Microsoft.Test/resourceType/objectArray[*].nestedArray[*]')]
[1, 2, 3, 4]
Field count expressions
Field countexpressions count how many array members meet a condition and compare the count to a target value.Countis more intuitive and versatile for evaluating arrays compared tofieldconditions. The syntax is:
Count
field
{
  "count": {
    "field": <[*
    ] alias>,
    "where": <optional policy condition expression>
  },
  "equals|greater|less|any other operator": <target value>
}
{
  "count": {
    "field": <[*
    ] alias>,
    "where": <optional policy condition expression>
  },
  "equals|greater|less|any other operator": <target value>
}
When used without awherecondition,countsimply returns the length of an array. With the example resource content from the previous section, the followingcountexpression is evaluated totruesincestringArrayhas three members:
where
count
count
true
stringArray
{
  "count": {
    "field": "Microsoft.Test/resourceType/stringArray[*]"
  },
  "equals": 3
}
{
  "count": {
    "field": "Microsoft.Test/resourceType/stringArray[*]"
  },
  "equals": 3
}
This behavior also works with nested arrays. For example, the followingcountexpression is evaluated totruesince there are four array members in thenestedArrayarrays:
count
true
nestedArray
{
  "count": {
    "field": "Microsoft.Test/resourceType/objectArray[*].nestedArray[*]"
  },
  "greaterOrEquals": 4
}
{
  "count": {
    "field": "Microsoft.Test/resourceType/objectArray[*].nestedArray[*]"
  },
  "greaterOrEquals": 4
}
The power ofcountis in thewherecondition. Whencountis specified, Azure Policy enumerates the array members and evaluates each against the condition, counting how many array members evaluated totrue. Specifically, in each iteration of thewherecondition evaluation, Azure Policy selects a single array memberiand evaluate the resource content against thewhereconditionas ifiis the only member of the array. Having only one array member available in each iteration provides a way to apply complex conditions on each individual array member.
count
where
count
true
where
i
where
i
Example:
{
  "count": {
    "field": "Microsoft.Test/resourceType/stringArray[*]",
    "where": {
      "field": "Microsoft.Test/resourceType/stringArray[*]",
      "equals": "a"
    }
  },
  "equals": 1
}
{
  "count": {
    "field": "Microsoft.Test/resourceType/stringArray[*]",
    "where": {
      "field": "Microsoft.Test/resourceType/stringArray[*]",
      "equals": "a"
    }
  },
  "equals": 1
}
In order to evaluate thecountexpression, Azure Policy evaluates thewherecondition three times, once for each member ofstringArray, counting how many times it was evaluated totrue. When thewherecondition refers to theMicrosoft.Test/resourceType/stringArray[*]array members, instead of selecting all the members ofstringArray, it selects only a single array member every time:
count
where
stringArray
true
where
Microsoft.Test/resourceType/stringArray[*]
stringArray
Microsoft.Test/resourceType/stringArray[*]
where
"a"
true
"b"
false
"c"
false
Thecountreturns1.
count
1
Here's a more complex expression:
{
  "count": {
    "field": "Microsoft.Test/resourceType/objectArray[*]",
    "where": {
      "allOf": [
        {
          "field": "Microsoft.Test/resourceType/objectArray[*].property",
          "equals": "value2"
        },
        {
          "field": "Microsoft.Test/resourceType/objectArray[*].nestedArray[*]",
          "greater": 2
        }
      ]
    }
  },
  "equals": 1
}
{
  "count": {
    "field": "Microsoft.Test/resourceType/objectArray[*]",
    "where": {
      "allOf": [
        {
          "field": "Microsoft.Test/resourceType/objectArray[*].property",
          "equals": "value2"
        },
        {
          "field": "Microsoft.Test/resourceType/objectArray[*].nestedArray[*]",
          "greater": 2
        }
      ]
    }
  },
  "equals": 1
}
where
Microsoft.Test/resourceType/objectArray[*].property
"value1"
Microsoft.Test/resourceType/objectArray[*].nestedArray[*]
1
2
false
Microsoft.Test/resourceType/objectArray[*].property
"value2"
Microsoft.Test/resourceType/objectArray[*].nestedArray[*]
3
4
true
Thecountreturns1.
count
1
The fact that thewhereexpression is evaluated against theentirerequest content (with changes only to the array member that is currently being enumerated) means that thewherecondition can also refer to fields outside the array:
where
where
{
  "count": {
    "field": "Microsoft.Test/resourceType/objectArray[*]",
    "where": {
      "field": "tags.env",
      "equals": "prod"
    }
  },
  "equals": 0
}
{
  "count": {
    "field": "Microsoft.Test/resourceType/objectArray[*]",
    "where": {
      "field": "tags.env",
      "equals": "prod"
    }
  },
  "equals": 0
}
where
tags.env
"prod"
true
tags.env
"prod"
true
Nested count expressions can be used to apply conditions to nested array fields. For example, the following condition checks that theobjectArray[*]array has exactly two members withnestedArray[*]that contains one or more members:
objectArray[*]
nestedArray[*]
{
  "count": {
    "field": "Microsoft.Test/resourceType/objectArray[*]",
    "where": {
      "count": {
        "field": "Microsoft.Test/resourceType/objectArray[*].nestedArray[*]"
      },
      "greaterOrEquals": 1
    }
  },
  "equals": 2
}
{
  "count": {
    "field": "Microsoft.Test/resourceType/objectArray[*]",
    "where": {
      "count": {
        "field": "Microsoft.Test/resourceType/objectArray[*].nestedArray[*]"
      },
      "greaterOrEquals": 1
    }
  },
  "equals": 2
}
Microsoft.Test/resourceType/objectArray[*].nestedArray[*]
1
2
nestedArray[*]
true
Microsoft.Test/resourceType/objectArray[*].nestedArray[*]
3
4
nestedArray[*]
true
Since both members ofobjectArray[*]have a child arraynestedArray[*]with two members, the outer count expression returns2.
objectArray[*]
nestedArray[*]
2
More complex example: check that theobjectArray[*]array has exactly two members withnestedArray[*]with any members equal to2or3:
objectArray[*]
nestedArray[*]
2
3
{
  "count": {
    "field": "Microsoft.Test/resourceType/objectArray[*]",
    "where": {
      "count": {
        "field": "Microsoft.Test/resourceType/objectArray[*].nestedArray[*]",
        "where": {
          "field": "Microsoft.Test/resourceType/objectArray[*].nestedArray[*]",
          "in": [
            2,
            3
          ]
        }
      },
      "greaterOrEquals": 1
    }
  },
  "equals": 2
}
{
  "count": {
    "field": "Microsoft.Test/resourceType/objectArray[*]",
    "where": {
      "count": {
        "field": "Microsoft.Test/resourceType/objectArray[*].nestedArray[*]",
        "where": {
          "field": "Microsoft.Test/resourceType/objectArray[*].nestedArray[*]",
          "in": [
            2,
            3
          ]
        }
      },
      "greaterOrEquals": 1
    }
  },
  "equals": 2
}
Microsoft.Test/resourceType/objectArray[*].nestedArray[*]
1
2
nestedArray[*]
2
true
Microsoft.Test/resourceType/objectArray[*].nestedArray[*]
3
4
nestedArray[*]
3
true
Since both members ofobjectArray[*]have a child arraynestedArray[*]that contains either2or3, the outer count expression returns2.
objectArray[*]
nestedArray[*]
2
3
2
Note
Nested field count expressions can only refer to nested arrays. For example, count expression
referring toMicrosoft.Test/resourceType/objectArray[*]can have a nested count targeting the
nested arrayMicrosoft.Test/resourceType/objectArray[*].nestedArray[*], but it can't have a
nested count expression targetingMicrosoft.Test/resourceType/stringArray[*].
Microsoft.Test/resourceType/objectArray[*]
Microsoft.Test/resourceType/objectArray[*].nestedArray[*]
Microsoft.Test/resourceType/stringArray[*]
When using template functions, use thecurrent()function to access the value of the current array member or the values of any of its properties. To access the value of the current array member, pass the alias defined incount.fieldor any of its child aliases as an argument to thecurrent()function. For example:
current()
count.field
current()
{
  "count": {
    "field": "Microsoft.Test/resourceType/objectArray[*]",
    "where": {
      "value": "[current('Microsoft.Test/resourceType/objectArray[*].property')]",
      "like": "value*"
    }
  },
  "equals": 2
}
{
  "count": {
    "field": "Microsoft.Test/resourceType/objectArray[*]",
    "where": {
      "value": "[current('Microsoft.Test/resourceType/objectArray[*].property')]",
      "like": "value*"
    }
  },
  "equals": 2
}
current()
where
property
objectArray[*]
value1
true
property
objectArray[*]
value2
true
Thefield()function can also be used to access the value of the current array member as long as thecountexpression isn't inside anexistence condition(field()function always refer to the resource evaluated in theifcondition). The behavior offield()when referring to the evaluated array is based on the following concepts:
field()
field()
field()
Array aliases are resolved into a collection of values selected from all array members.
field()functions referencing array aliases return an array with the selected values.
field()
Referencing the counted array alias inside thewherecondition returns a collection with a single value selected from the array member that is evaluated in the current iteration.
where
This behavior means that when referring to the counted array member with afield()function inside thewherecondition,it returns an array with a single member. While this behavior might not be intuitive, it's consistent with the idea that array aliases always return a collection of selected properties. Here's an example:
field()
where
{
  "count": {
    "field": "Microsoft.Test/resourceType/stringArray[*]",
    "where": {
      "field": "Microsoft.Test/resourceType/stringArray[*]",
      "equals": "[field('Microsoft.Test/resourceType/stringArray[*]')]"
    }
  },
  "equals": 0
}
{
  "count": {
    "field": "Microsoft.Test/resourceType/stringArray[*]",
    "where": {
      "field": "Microsoft.Test/resourceType/stringArray[*]",
      "equals": "[field('Microsoft.Test/resourceType/stringArray[*]')]"
    }
  },
  "equals": 0
}
where
Microsoft.Test/resourceType/stringArray[*]
"a"
[field('Microsoft.Test/resourceType/stringArray[*]')]
[ "a" ]
false
Microsoft.Test/resourceType/stringArray[*]
"b"
[field('Microsoft.Test/resourceType/stringArray[*]')]
[ "b" ]
false
Microsoft.Test/resourceType/stringArray[*]
"c"
[field('Microsoft.Test/resourceType/stringArray[*]')]
[ "c" ]
false
Therefore, when there's a need to access the value of the counted array alias with afield()function, the way to do so is to wrap it with afirst()template function:
field()
first()
{
  "count": {
    "field": "Microsoft.Test/resourceType/stringArray[*]",
    "where": {
      "field": "Microsoft.Test/resourceType/stringArray[*]",
      "equals": "[first(field('Microsoft.Test/resourceType/stringArray[*]'))]"
    }
  }
}
{
  "count": {
    "field": "Microsoft.Test/resourceType/stringArray[*]",
    "where": {
      "field": "Microsoft.Test/resourceType/stringArray[*]",
      "equals": "[first(field('Microsoft.Test/resourceType/stringArray[*]'))]"
    }
  }
}
where
Microsoft.Test/resourceType/stringArray[*]
"a"
[first(field('Microsoft.Test/resourceType/stringArray[*]'))]
"a"
true
Microsoft.Test/resourceType/stringArray[*]
"b"
[first(field('Microsoft.Test/resourceType/stringArray[*]'))]
"b"
true
Microsoft.Test/resourceType/stringArray[*]
"c"
[first(field('Microsoft.Test/resourceType/stringArray[*]'))]
"c"
true
For useful examples, seeField count examples.
Modifying arrays
Theappendandmodifyalter properties on a resource during creation or update. When you work with array properties, the behavior of these effects depends on whether the operation is trying to modify the[*]alias or not:
[*]
Note
Using themodifyeffect with aliases is currently inpreview.
modify
Microsoft.Storage/storageAccounts/networkAcls.ipRules
append
Microsoft.Storage/storageAccounts/networkAcls.ipRules
modify
add
Microsoft.Storage/storageAccounts/networkAcls.ipRules
modify
addOrReplace
Microsoft.Storage/storageAccounts/networkAcls.ipRules[*]
append
Microsoft.Storage/storageAccounts/networkAcls.ipRules[*]
modify
add
Microsoft.Storage/storageAccounts/networkAcls.ipRules[*]
modify
addOrReplace
Microsoft.Storage/storageAccounts/networkAcls.ipRules[*].action
append
action
Microsoft.Storage/storageAccounts/networkAcls.ipRules[*].action
modify
add
action
Microsoft.Storage/storageAccounts/networkAcls.ipRules[*].action
modify
addOrReplace
action
For more information, see theappend examples.
More alias examples
The recommendation is to use thefield count expressionsto check whetherallOforanyOfthe members of an array in the request content meet a condition. For some simple conditions, it's possible to achieve the same result by using a field accessor with an array alias as described inReferencing the array members collection. This pattern can be useful in policy rules that exceed the limit of allowedcountexpressions. Here are examples for common use cases:
allOf
anyOf
count
The example policy rule for the following scenario table:
"policyRule": {
  "if": {
    "allOf": [
      {
        "field": "Microsoft.Storage/storageAccounts/networkAcls.ipRules",
        "exists": "true"
      },
            <-- Condition (see table below) -->
    ]
  },
  "then": {
    "effect": "[parameters('effectType')]"
  }
}
"policyRule": {
  "if": {
    "allOf": [
      {
        "field": "Microsoft.Storage/storageAccounts/networkAcls.ipRules",
        "exists": "true"
      },
            <-- Condition (see table below) -->
    ]
  },
  "then": {
    "effect": "[parameters('effectType')]"
  }
}
TheipRulesarray is as follows for the following scenario table:
ipRules
"ipRules": [
  {
    "value": "127.0.0.1",
    "action": "Allow"
  },
  {
    "value": "192.168.1.1",
    "action": "Allow"
  }
]
"ipRules": [
  {
    "value": "127.0.0.1",
    "action": "Allow"
  },
  {
    "value": "192.168.1.1",
    "action": "Allow"
  }
]
For each of the following condition examples, replace<field>with"field": "Microsoft.Storage/storageAccounts/networkAcls.ipRules[*].value".
<field>
"field": "Microsoft.Storage/storageAccounts/networkAcls.ipRules[*].value"
The following outcomes are the result of the combination of the condition and the example policy rule and array of previous existing values:
{<field>,"notEquals":"127.0.0.1"}
127.0.0.1 != 127.0.0.1
127.0.0.1 != 192.168.1.1
notEquals
{<field>,"notEquals":"10.0.4.1"}
10.0.4.1 != 127.0.0.1 and 10.0.4.1 != 192.168.1.1
notEquals
"not":{<field>,"notEquals":"127.0.0.1" }
127.0.0.1 != 127.0.0.1
127.0.0.1 != 192.168.1.1
notEquals
"not":{<field>,"notEquals":"10.0.4.1"}
10.0.4.1 != 127.0.0.1 and 10.0.4.1 != 192.168.1.1
notEquals
"not":{<field>,"Equals":"127.0.0.1"}
127.0.0.1 == 127.0.0.1
127.0.0.1 == 192.168.1.1
Equals
"not":{<field>,"Equals":"10.0.4.1"}
10.0.4.1 == 127.0.0.1 and 10.0.4.1 == 192.168.1.1
Equals
{<field>,"Equals":"127.0.0.1"}
127.0.0.1 == 127.0.0.1
127.0.0.1 == 192.168.1.1
Equals
{<field>,"Equals":"10.0.4.1"}
10.0.4.1 == 127.0.0.1 and 10.0.4.1 == 192.168.1.1
Equals
Next steps
Review examples atAzure Policy samples.
Review theAzure Policy definition structure.
ReviewUnderstanding policy effects.
Understand how toprogrammatically create policies.
Learn how toremediate non-compliant resources.
Review what a management group is withOrganize your resources with Azure management groups.
Feedback
Was this page helpful?
Additional resources