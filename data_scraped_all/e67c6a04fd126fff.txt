Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Quickstart: Create a Python function in Azure from the command line
Article
2024-03-05
21 contributors
In this article
In this article, you use command-line tools to create a Python function that responds to HTTP requests. After testing the code locally, you deploy it to the serverless environment of Azure Functions.
This article uses the Python v2 programming model for Azure Functions, which provides a decorator-based approach for creating functions. To learn more about the Python v2 programming model, see theDeveloper Reference Guide
Completing this quickstart incurs a small cost of a few USD cents or less in your Azure account.
There's also aVisual Studio Code-based versionof this article.
Configure your local environment
Before you begin, you must have the following requirements in place:
An Azure account with an active subscription.Create an account for free.
An Azure account with an active subscription.Create an account for free.
One of the following tools for creating Azure resources:Azure CLIversion 2.4 or later.The AzureAz PowerShell moduleversion 5.9.0 or later.
One of the following tools for creating Azure resources:
Azure CLIversion 2.4 or later.
Azure CLIversion 2.4 or later.
The AzureAz PowerShell moduleversion 5.9.0 or later.
The AzureAz PowerShell moduleversion 5.9.0 or later.
A Python version supported by Azure Functions.
A Python version supported by Azure Functions.
TheAzurite storage emulator. While you can also use an actual Azure Storage account, the article assumes you're using this emulator.
TheAzurite storage emulator. While you can also use an actual Azure Storage account, the article assumes you're using this emulator.
Install the Azure Functions Core Tools
The recommended way to install Core Tools depends on the operating system of your local development computer.
Windows
macOS
Linux
The following steps use a Windows installer (MSI) to install Core Tools v4.x. For more information about other package-based installers, see theCore Tools readme.
Download and run the Core Tools installer, based on your version of Windows:
v4.x - Windows 64-bit(Recommended.Visual Studio Code debuggingrequires 64-bit.)
v4.x - Windows 32-bit
If you previously used Windows installer (MSI) to install Core Tools on Windows, you should uninstall the old version from Add Remove Programs before installing the latest version.
The following steps use Homebrew to install the Core Tools on macOS.
InstallHomebrew, if it's not already installed.
InstallHomebrew, if it's not already installed.
Install the Core Tools package:brew tap azure/functions
brew install azure-functions-core-tools@4
# if upgrading on a machine that has 2.x or 3.x installed:
brew link --overwrite azure-functions-core-tools@4
Install the Core Tools package:
brew tap azure/functions
brew install azure-functions-core-tools@4
# if upgrading on a machine that has 2.x or 3.x installed:
brew link --overwrite azure-functions-core-tools@4
brew tap azure/functions
brew install azure-functions-core-tools@4
# if upgrading on a machine that has 2.x or 3.x installed:
brew link --overwrite azure-functions-core-tools@4
The following steps useAPTto install Core Tools on your Ubuntu/Debian Linux distribution. For other Linux distributions, see theCore Tools readme.
Install the Microsoft package repository GPG key, to validate package integrity:curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg
sudo mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg
Install the Microsoft package repository GPG key, to validate package integrity:
curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg
sudo mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg
curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg
sudo mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg
Set up the APT source list before doing an APT update.Ubuntusudo sh -c 'echo "deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-ubuntu-$(lsb_release -cs 2>/dev/null)-prod $(lsb_release -cs 2>/dev/null) main" > /etc/apt/sources.list.d/dotnetdev.list'Debiansudo sh -c 'echo "deb [arch=amd64] https://packages.microsoft.com/debian/$(lsb_release -rs 2>/dev/null | cut -d'.' -f 1)/prod $(lsb_release -cs 2>/dev/null) main" > /etc/apt/sources.list.d/dotnetdev.list'
Set up the APT source list before doing an APT update.
sudo sh -c 'echo "deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-ubuntu-$(lsb_release -cs 2>/dev/null)-prod $(lsb_release -cs 2>/dev/null) main" > /etc/apt/sources.list.d/dotnetdev.list'
sudo sh -c 'echo "deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-ubuntu-$(lsb_release -cs 2>/dev/null)-prod $(lsb_release -cs 2>/dev/null) main" > /etc/apt/sources.list.d/dotnetdev.list'
sudo sh -c 'echo "deb [arch=amd64] https://packages.microsoft.com/debian/$(lsb_release -rs 2>/dev/null | cut -d'.' -f 1)/prod $(lsb_release -cs 2>/dev/null) main" > /etc/apt/sources.list.d/dotnetdev.list'
sudo sh -c 'echo "deb [arch=amd64] https://packages.microsoft.com/debian/$(lsb_release -rs 2>/dev/null | cut -d'.' -f 1)/prod $(lsb_release -cs 2>/dev/null) main" > /etc/apt/sources.list.d/dotnetdev.list'
Check the/etc/apt/sources.list.d/dotnetdev.listfile for one of the appropriate Linux version strings in the following table:Linux distributionVersionDebian 12bookwormDebian 11bullseyeDebian 10busterDebian 9stretchUbuntu 24.04nobleUbuntu 22.04jammyUbuntu 20.04focalUbuntu 19.04discoUbuntu 18.10cosmicUbuntu 18.04bionicUbuntu 17.04zestyUbuntu 16.04/Linux Mint 18xenial
Check the/etc/apt/sources.list.d/dotnetdev.listfile for one of the appropriate Linux version strings in the following table:
/etc/apt/sources.list.d/dotnetdev.list
bookworm
bullseye
buster
stretch
noble
jammy
focal
disco
cosmic
bionic
zesty
xenial
Start the APT source update:sudo apt-get update
Start the APT source update:
sudo apt-get update
sudo apt-get update
Install the Core Tools package:sudo apt-get install azure-functions-core-tools-4
Install the Core Tools package:
sudo apt-get install azure-functions-core-tools-4
sudo apt-get install azure-functions-core-tools-4
Use thefunc --versioncommand to make sure your version of Core Tools is at least4.0.5530.
func --version
4.0.5530
Create and activate a virtual environment
In a suitable folder, run the following commands to create and activate a virtual environment named.venv. Make sure that you're using aversion of Python supported by Azure Functions.
.venv
bash
PowerShell
Cmd
python -m venv .venv
python -m venv .venv
source .venv/bin/activate
source .venv/bin/activate
If Python didn't install the venv package on your Linux distribution, run the following command:
sudo apt-get install python3-venv
sudo apt-get install python3-venv
py -m venv .venv
py -m venv .venv
.venv\scripts\activate
.venv\scripts\activate
py -m venv .venv
py -m venv .venv
.venv\scripts\activate
.venv\scripts\activate
You run all subsequent commands in this activated virtual environment.
Create a local function
In Azure Functions, a function project is a container for one or more individual functions that each responds to a specific trigger. All functions in a project share the same local and hosting configurations.
In this section, you create a function project and add an HTTP triggered function.
Run thefunc initcommand as follows to create a Python v2 functions project in the virtual environment.func init --pythonThe environment now contains various files for the project, including configuration files namedlocal.settings.jsonandhost.json. Becauselocal.settings.jsoncan contain secrets downloaded from Azure, the file is excluded from source control by default in the.gitignorefile.
Run thefunc initcommand as follows to create a Python v2 functions project in the virtual environment.
func init
func init --python
func init --python
The environment now contains various files for the project, including configuration files namedlocal.settings.jsonandhost.json. Becauselocal.settings.jsoncan contain secrets downloaded from Azure, the file is excluded from source control by default in the.gitignorefile.
Add a function to your project by using the following command, where the--nameargument is the unique name of your function (HttpExample) and the--templateargument specifies the function's trigger (HTTP).func new --name HttpExample --template "HTTP trigger" --authlevel "anonymous"If prompted, choose theANONYMOUSoption.func newadds an HTTP trigger endpoint namedHttpExampleto thefunction_app.pyfile, which is accessible without authentication.
Add a function to your project by using the following command, where the--nameargument is the unique name of your function (HttpExample) and the--templateargument specifies the function's trigger (HTTP).
--name
--template
func new --name HttpExample --template "HTTP trigger" --authlevel "anonymous"
func new --name HttpExample --template "HTTP trigger" --authlevel "anonymous"
If prompted, choose theANONYMOUSoption.func newadds an HTTP trigger endpoint namedHttpExampleto thefunction_app.pyfile, which is accessible without authentication.
func new
HttpExample
function_app.py
Run the function locally
Run your function by starting the local Azure Functions runtime host from theLocalFunctionProjfolder.func startToward the end of the output, the following lines must appear:NoteIf HttpExample doesn't appear as shown above, you likely started the host from outside the root folder of the project. In that case, useCtrl+Cto stop the host, go to the project's root folder, and run the previous command again.
Run your function by starting the local Azure Functions runtime host from theLocalFunctionProjfolder.
func start
func start
Toward the end of the output, the following lines must appear:

Note
If HttpExample doesn't appear as shown above, you likely started the host from outside the root folder of the project. In that case, useCtrl+Cto stop the host, go to the project's root folder, and run the previous command again.
Copy the URL of your HTTP function from this output to a browser and append the query string?name=<YOUR_NAME>, making the full URL likehttp://localhost:7071/api/HttpExample?name=Functions. The browser should display a response message that echoes back your query string value. The terminal in which you started your project also shows log output as you make requests.
Copy the URL of your HTTP function from this output to a browser and append the query string?name=<YOUR_NAME>, making the full URL likehttp://localhost:7071/api/HttpExample?name=Functions. The browser should display a response message that echoes back your query string value. The terminal in which you started your project also shows log output as you make requests.
?name=<YOUR_NAME>
http://localhost:7071/api/HttpExample?name=Functions
When you're done, pressCtrl + Cand typeyto stop the functions host.
When you're done, pressCtrl + Cand typeyto stop the functions host.
y
Create supporting Azure resources for your function
Before you can deploy your function code to Azure, you need to create three resources:
A resource group, which is a logical container for related resources.
A storage account, which maintains the state and other information about your projects.
A function app, which provides the environment for executing your function code. A function app maps to your local function project and lets you group functions as a logical unit for easier management, deployment, and sharing of resources.
Use the following commands to create these items. Both Azure CLI and PowerShell are supported.
If needed, sign in to Azure.Azure CLIAzure PowerShellaz loginTheaz logincommand signs you into your Azure account.Connect-AzAccountTheConnect-AzAccountcmdlet signs you into your Azure account.
If needed, sign in to Azure.
Azure CLI
Azure PowerShell
az login
az login
Theaz logincommand signs you into your Azure account.
az login
Connect-AzAccount
Connect-AzAccount
TheConnect-AzAccountcmdlet signs you into your Azure account.
Create a resource group namedAzureFunctionsQuickstart-rgin your chosen region.Azure CLIAzure PowerShellaz group create --name AzureFunctionsQuickstart-rg --location <REGION>Theaz group createcommand creates a resource group. In the above command, replace<REGION>with a region near you, using an available region code returned from theaz account list-locationscommand.New-AzResourceGroup -Name AzureFunctionsQuickstart-rg -Location '<REGION>'TheNew-AzResourceGroupcommand creates a resource group. You generally create your resource group and resources in a region near you, using an available region returned from theGet-AzLocationcmdlet.NoteYou can't host Linux and Windows apps in the same resource group. If you have an existing resource group namedAzureFunctionsQuickstart-rgwith a Windows function app or web app, you must use a different resource group.
Create a resource group namedAzureFunctionsQuickstart-rgin your chosen region.
AzureFunctionsQuickstart-rg
Azure CLI
Azure PowerShell
az group create --name AzureFunctionsQuickstart-rg --location <REGION>
az group create --name AzureFunctionsQuickstart-rg --location <REGION>
Theaz group createcommand creates a resource group. In the above command, replace<REGION>with a region near you, using an available region code returned from theaz account list-locationscommand.
<REGION>
New-AzResourceGroup -Name AzureFunctionsQuickstart-rg -Location '<REGION>'
New-AzResourceGroup -Name AzureFunctionsQuickstart-rg -Location '<REGION>'
TheNew-AzResourceGroupcommand creates a resource group. You generally create your resource group and resources in a region near you, using an available region returned from theGet-AzLocationcmdlet.
Note
You can't host Linux and Windows apps in the same resource group. If you have an existing resource group namedAzureFunctionsQuickstart-rgwith a Windows function app or web app, you must use a different resource group.
AzureFunctionsQuickstart-rg
Create a general-purpose storage account in your resource group and region.Azure CLIAzure PowerShellaz storage account create --name <STORAGE_NAME> --location <REGION> --resource-group AzureFunctionsQuickstart-rg --sku Standard_LRSTheaz storage account createcommand creates the storage account.New-AzStorageAccount -ResourceGroupName AzureFunctionsQuickstart-rg -Name <STORAGE_NAME> -SkuName Standard_LRS -Location <REGION>TheNew-AzStorageAccountcmdlet creates the storage account.In the previous example, replace<STORAGE_NAME>with a name that's appropriate to you and unique in Azure Storage. Names must contain 3 to 24 characters numbers and lowercase letters only.Standard_LRSspecifies a general-purpose accountsupported by Functions.The storage account incurs only a few cents (USD) for this quickstart.
Create a general-purpose storage account in your resource group and region.
Azure CLI
Azure PowerShell
az storage account create --name <STORAGE_NAME> --location <REGION> --resource-group AzureFunctionsQuickstart-rg --sku Standard_LRS
az storage account create --name <STORAGE_NAME> --location <REGION> --resource-group AzureFunctionsQuickstart-rg --sku Standard_LRS
Theaz storage account createcommand creates the storage account.
New-AzStorageAccount -ResourceGroupName AzureFunctionsQuickstart-rg -Name <STORAGE_NAME> -SkuName Standard_LRS -Location <REGION>
New-AzStorageAccount -ResourceGroupName AzureFunctionsQuickstart-rg -Name <STORAGE_NAME> -SkuName Standard_LRS -Location <REGION>
TheNew-AzStorageAccountcmdlet creates the storage account.
In the previous example, replace<STORAGE_NAME>with a name that's appropriate to you and unique in Azure Storage. Names must contain 3 to 24 characters numbers and lowercase letters only.Standard_LRSspecifies a general-purpose accountsupported by Functions.
<STORAGE_NAME>
Standard_LRS
The storage account incurs only a few cents (USD) for this quickstart.
Create the function app in Azure.Azure CLIAzure PowerShellaz functionapp create --resource-group AzureFunctionsQuickstart-rg --consumption-plan-location westeurope --runtime python --runtime-version <PYTHON_VERSION> --functions-version 4 --name <APP_NAME> --os-type linux --storage-account <STORAGE_NAME>Theaz functionapp createcommand creates the function app in Azure. You must supply--os-type linuxbecause Python functions only run on Linux.New-AzFunctionApp -Name <APP_NAME> -ResourceGroupName AzureFunctionsQuickstart-rg -StorageAccountName <STORAGE_NAME> -FunctionsVersion 4 -RuntimeVersion <PYTHON_VERSION> -Runtime python -Location '<REGION>'TheNew-AzFunctionAppcmdlet creates the function app in Azure.In the previous example, replace<APP_NAME>with a globally unique name appropriate to you. The<APP_NAME>is also the default subdomain for the function app. Make sure that the value you set for<PYTHON_VERSION>is aversion supported by Functionsand is the same version you used during local development.This command creates a function app running in your specified language runtime under theAzure Functions Consumption Plan, which is free for the amount of usage you incur here. The command also creates an associated Azure Application Insights instance in the same resource group, with which you can monitor your function app and view logs. For more information, seeMonitor Azure Functions. The instance incurs no costs until you activate it.
Create the function app in Azure.
Azure CLI
Azure PowerShell
az functionapp create --resource-group AzureFunctionsQuickstart-rg --consumption-plan-location westeurope --runtime python --runtime-version <PYTHON_VERSION> --functions-version 4 --name <APP_NAME> --os-type linux --storage-account <STORAGE_NAME>
az functionapp create --resource-group AzureFunctionsQuickstart-rg --consumption-plan-location westeurope --runtime python --runtime-version <PYTHON_VERSION> --functions-version 4 --name <APP_NAME> --os-type linux --storage-account <STORAGE_NAME>
Theaz functionapp createcommand creates the function app in Azure. You must supply--os-type linuxbecause Python functions only run on Linux.
--os-type linux
New-AzFunctionApp -Name <APP_NAME> -ResourceGroupName AzureFunctionsQuickstart-rg -StorageAccountName <STORAGE_NAME> -FunctionsVersion 4 -RuntimeVersion <PYTHON_VERSION> -Runtime python -Location '<REGION>'
New-AzFunctionApp -Name <APP_NAME> -ResourceGroupName AzureFunctionsQuickstart-rg -StorageAccountName <STORAGE_NAME> -FunctionsVersion 4 -RuntimeVersion <PYTHON_VERSION> -Runtime python -Location '<REGION>'
TheNew-AzFunctionAppcmdlet creates the function app in Azure.
In the previous example, replace<APP_NAME>with a globally unique name appropriate to you. The<APP_NAME>is also the default subdomain for the function app. Make sure that the value you set for<PYTHON_VERSION>is aversion supported by Functionsand is the same version you used during local development.
<APP_NAME>
<APP_NAME>
<PYTHON_VERSION>
This command creates a function app running in your specified language runtime under theAzure Functions Consumption Plan, which is free for the amount of usage you incur here. The command also creates an associated Azure Application Insights instance in the same resource group, with which you can monitor your function app and view logs. For more information, seeMonitor Azure Functions. The instance incurs no costs until you activate it.
Deploy the function project to Azure
After you've successfully created your function app in Azure, you're now ready to deploy your local functions project by using thefunc azure functionapp publishcommand.
func azure functionapp publish
In your root project folder, run thisfunc azure functionapp publishcommand:
func azure functionapp publish
func azure functionapp publish <APP_NAME>
func azure functionapp publish <APP_NAME>
In this example, replace<APP_NAME>with the name of your app. A successful deployment shows results similar to the following output (truncated for simplicity):
<APP_NAME>
...

Getting site publishing info...
Creating archive for current directory...
Performing remote build for functions project.

...

Deployment successful.
Remote build succeeded!
Syncing triggers...
Functions in msdocs-azurefunctions-qs:
    HttpExample - [httpTrigger]
        Invoke url: https://msdocs-azurefunctions-qs.azurewebsites.net/api/httpexample
Invoke the function on Azure
Because your function uses an HTTP trigger, you invoke it by making an HTTP request to its URL in the browser or with a tool like curl.
Browser
curl
Copy the completeInvoke URLshown in the output of thepublishcommand into a browser address bar, appending the query parameter?name=Functions. The browser should display similar output as when you ran the function locally.
publish
?name=Functions
Runcurlwith theInvoke URLshown in the output of thepublishcommand, appending the parameter?name=Functions. The output of the command should be the text, "Hello Functions."
curl
publish
?name=Functions
Clean up resources
If you continue to thenext stepand add an Azure Storage queue output binding, keep all your resources in place as you'll build on what you've already done.
Otherwise, use the following command to delete the resource group and all its contained resources to avoid incurring further costs.
Azure CLI
Azure PowerShell
az group delete --name AzureFunctionsQuickstart-rg
az group delete --name AzureFunctionsQuickstart-rg
Remove-AzResourceGroup -Name AzureFunctionsQuickstart-rg
Remove-AzResourceGroup -Name AzureFunctionsQuickstart-rg
Next steps
Connect to Azure Cosmos DB
Connect to an Azure Storage queue
Having issues with this article?
Troubleshoot Python function apps in Azure Functions
Let us know
Feedback
Was this page helpful?
Additional resources