Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
YAML vs Classic Pipelines
Article
2024-08-29
18 contributors
In this article
Azure DevOps Services | Azure DevOps Server 2022 - Azure DevOps Server 2019
Azure Pipelines enables developers to automate a wide variety of tasks, ranging from executing a batch file to setting up a complete continuous integration (CI) and continuous delivery (CD) solution for their applications.
Azure Pipelines supports a wide range of languages, platforms, and tools, and offers two types of pipelines to choose from:YAML-basedandClassic pipelineeditors.
Note
If you are new to Azure Pipelines, it is recommended to start with YAML pipelines. For existing Classic pipelines, you can choose to continue using them ormigrate to YAML pipelines.
Define pipelines using YAML
Your pipeline configuration resides in a YAML file namedazure-pipelines.yml, alongside your application.
azure-pipelines.yml
The YAML file is versioned alongside your application code, adhering to the same branching structure.
The YAML file is versioned alongside your application code, adhering to the same branching structure.
Each branch can customize the pipeline by editing theazure-pipelines.ymlfile.
Each branch can customize the pipeline by editing theazure-pipelines.ymlfile.
azure-pipelines.yml
Keeping the pipeline configuration in version control ensures that any changes that cause issues or unexpected outcomes can be easily identified within your codebase.
Keeping the pipeline configuration in version control ensures that any changes that cause issues or unexpected outcomes can be easily identified within your codebase.
For instructions, seeCreate your first pipelinefor a step by step guide to building a sample application from a Git repository.
Define pipelines using the Classic interface
Classic pipelines are created in the Azure DevOps web portal with the Classic user interface editor. You can define apipelineto build, test your code, and then publish your artifact (binary). Additionally, you can define arelease pipelineto consume your binary (artifact) and deploy it to specific targets.
For instructions, seebuildanddeployfor step by step guides to building and deploying your application with Classic Pipelines.
Feature availability
Next steps
Sign up for Azure PipelinesCreate your first pipelineCustomize your pipeline
Feedback
Was this page helpful?
Additional resources