Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Import an OpenAPI specification
Article
2025-03-13
9 contributors
In this article
APPLIES TO: All API Management tiers
This article shows how to import an "OpenAPI specification" backend API to Azure API Management using various tools. The article also shows how to test the API in API Management.
In this article, you learn how to:
Import an OpenAPI specification using the Azure portal, Azure CLI, or Azure PowerShell
Test the API in the Azure portal
Note
API import limitations are documented inAPI import restrictions and known issues.
Prerequisites
An API Management instance. If you don't already have one, complete the following quickstart:Create an Azure API Management instance.
An API Management instance. If you don't already have one, complete the following quickstart:Create an Azure API Management instance.
Azure CLIUse the Bash environment inAzure Cloud Shell. For more information, seeGet started with Azure Cloud Shell.If you prefer to run CLI reference commands locally,installthe Azure CLI. If you're running on Windows or macOS, consider running Azure CLI in a Docker container. For more information, seeHow to run the Azure CLI in a Docker container.If you're using a local installation, sign in to the Azure CLI by using theaz logincommand. To finish the authentication process, follow the steps displayed in your terminal. For other sign-in options, seeAuthenticate to Azure using Azure CLI.When you're prompted, install the Azure CLI extension on first use. For more information about extensions, seeUse and manage extensions with the Azure CLI.Runaz versionto find the version and dependent libraries that are installed. To upgrade to the latest version, runaz upgrade.
Azure CLI
Use the Bash environment inAzure Cloud Shell. For more information, seeGet started with Azure Cloud Shell.
Use the Bash environment inAzure Cloud Shell. For more information, seeGet started with Azure Cloud Shell.

If you prefer to run CLI reference commands locally,installthe Azure CLI. If you're running on Windows or macOS, consider running Azure CLI in a Docker container. For more information, seeHow to run the Azure CLI in a Docker container.If you're using a local installation, sign in to the Azure CLI by using theaz logincommand. To finish the authentication process, follow the steps displayed in your terminal. For other sign-in options, seeAuthenticate to Azure using Azure CLI.When you're prompted, install the Azure CLI extension on first use. For more information about extensions, seeUse and manage extensions with the Azure CLI.Runaz versionto find the version and dependent libraries that are installed. To upgrade to the latest version, runaz upgrade.
If you prefer to run CLI reference commands locally,installthe Azure CLI. If you're running on Windows or macOS, consider running Azure CLI in a Docker container. For more information, seeHow to run the Azure CLI in a Docker container.
If you're using a local installation, sign in to the Azure CLI by using theaz logincommand. To finish the authentication process, follow the steps displayed in your terminal. For other sign-in options, seeAuthenticate to Azure using Azure CLI.
If you're using a local installation, sign in to the Azure CLI by using theaz logincommand. To finish the authentication process, follow the steps displayed in your terminal. For other sign-in options, seeAuthenticate to Azure using Azure CLI.
When you're prompted, install the Azure CLI extension on first use. For more information about extensions, seeUse and manage extensions with the Azure CLI.
When you're prompted, install the Azure CLI extension on first use. For more information about extensions, seeUse and manage extensions with the Azure CLI.
Runaz versionto find the version and dependent libraries that are installed. To upgrade to the latest version, runaz upgrade.
Runaz versionto find the version and dependent libraries that are installed. To upgrade to the latest version, runaz upgrade.
Azure PowerShellIf you choose to use Azure PowerShell locally:Install the latest version of the Az PowerShell module.Connect to your Azure account using theConnect-AzAccountcmdlet.If you choose to use Azure Cloud Shell:SeeOverview of Azure Cloud Shellfor more information.
Azure PowerShell
If you choose to use Azure PowerShell locally:Install the latest version of the Az PowerShell module.Connect to your Azure account using theConnect-AzAccountcmdlet.
Install the latest version of the Az PowerShell module.
Connect to your Azure account using theConnect-AzAccountcmdlet.
If you choose to use Azure Cloud Shell:SeeOverview of Azure Cloud Shellfor more information.
SeeOverview of Azure Cloud Shellfor more information.
Import a backend API
For this example, you import theOpenAPI specificationfor the open sourcePetstore API, but you can substitute an OpenAPI specification of your choice.
Portal
Azure CLI
PowerShell
In theAzure portal, navigate to your API Management instance.
In theAzure portal, navigate to your API Management instance.
In the left menu, selectAPIs>+ Add API.
In the left menu, selectAPIs>+ Add API.
UnderCreate from definition, selectOpenAPI.
UnderCreate from definition, selectOpenAPI.

Enter API settings. You can set the values during creation or configure them later by going to theSettingstab. The settings are explained in theImport and publish your first APItutorial.
Enter API settings. You can set the values during creation or configure them later by going to theSettingstab. The settings are explained in theImport and publish your first APItutorial.
SelectCreate.
SelectCreate.
The following example uses theaz apim api importcommand to import an OpenAPI specification from the specified URL to an API Management instance namedapim-hello-world. To import using a path to a specification instead of a URL, use the--specification-pathparameter.
--specification-path
# API Management service-specific details
APIMServiceName="apim-hello-world"
ResourceGroupName="myResourceGroup"

# API-specific details
APIId="swagger-petstore"
APIPath="store"
SpecificationFormat="OpenAPI"
SpecificationURL="https://petstore3.swagger.io/api/v3/openapi.json"

# Import API
az apim api import --path $APIPath --resource-group $ResourceGroupName \
    --service-name $APIMServiceName --api-id $APIId \
    --specification-format $SpecificationFormat --specification-url $SpecificationURL
# API Management service-specific details
APIMServiceName="apim-hello-world"
ResourceGroupName="myResourceGroup"

# API-specific details
APIId="swagger-petstore"
APIPath="store"
SpecificationFormat="OpenAPI"
SpecificationURL="https://petstore3.swagger.io/api/v3/openapi.json"

# Import API
az apim api import --path $APIPath --resource-group $ResourceGroupName \
    --service-name $APIMServiceName --api-id $APIId \
    --specification-format $SpecificationFormat --specification-url $SpecificationURL
After importing the API, if needed, you can update the settings by using theaz apim api updatecommand.
The following example uses theImport-AzApiManagementApiAzure PowerShell cmdlet to import an OpenAPI specification from the specified URL to an API Management instance namedapim-hello-world. To import using a path to a specification instead of a URL, use the-SpecificationPathparameter.
-SpecificationPath
# API Management service-specific details
$apimServiceName = "apim-hello-world"
$resourceGroupName = "myResourceGroup"

# API-specific details
$apiId = "swagger-petstore"
$apiPath = "store"
$specificationFormat = "OpenAPI"
$specificationUrl = "https://petstore3.swagger.io/api/v3/openapi.json"

# Get context of the API Management instance. 
$context = New-AzApiManagementContext -ResourceGroupName $resourceGroupName -ServiceName $apimServiceName

# Import API
Import-AzApiManagementApi -Context $context -ApiId $apiId -SpecificationFormat $specificationFormat -SpecificationUrl $specificationUrl -Path $apiPath
# API Management service-specific details
$apimServiceName = "apim-hello-world"
$resourceGroupName = "myResourceGroup"

# API-specific details
$apiId = "swagger-petstore"
$apiPath = "store"
$specificationFormat = "OpenAPI"
$specificationUrl = "https://petstore3.swagger.io/api/v3/openapi.json"

# Get context of the API Management instance. 
$context = New-AzApiManagementContext -ResourceGroupName $resourceGroupName -ServiceName $apimServiceName

# Import API
Import-AzApiManagementApi -Context $context -ApiId $apiId -SpecificationFormat $specificationFormat -SpecificationUrl $specificationUrl -Path $apiPath
After importing the API, if needed, you can update the settings by using theSet-AzApiManagementApicmdlet.
View and edit OpenAPI specification
In the portal, use the OpenAPI specification editor to view, validate, or edit the specification for the API that you imported.
To use the OpenAPI specification editor:
In the Azure portal, navigate to your API Management instance.
In the left menu, underAPIs, selectAPIs><your API>>All operations.
On theDesigntab, inFrontend, selectOpenAPI Specification editor(pencil icon). You can open the specification in JSON or YAML format.
Review or edit the specification as needed.Saveyour changes.
Validate against an OpenAPI specification schema
You can configure API Managementvalidation policiesto validate requests and responses (or elements of them) against the schema in an OpenAPI specification. For example, use thevalidate-contentpolicy to validate the size or content of a request or response body.
Test the new API in the portal
Operations can be called directly from the portal, which provides a convenient way for administrators to view and test the operations of an API.
Select the API you created in the previous step.
Select the API you created in the previous step.
Select theTesttab.
Select theTesttab.
Select an operation.
The page displays fields for query parameters and fields for the headers.NoteIn the test console, API Management automatically populates anOcp-Apim-Subscription-Keyheader, and configures the subscription key of the built-inall-access subscription. This key enables access to every API in the API Management instance. Optionally display theOcp-Apim-Subscription-Keyheader by selecting the "eye" icon next to theHTTP Request.
Select an operation.
The page displays fields for query parameters and fields for the headers.
Note
In the test console, API Management automatically populates anOcp-Apim-Subscription-Keyheader, and configures the subscription key of the built-inall-access subscription. This key enables access to every API in the API Management instance. Optionally display theOcp-Apim-Subscription-Keyheader by selecting the "eye" icon next to theHTTP Request.
Depending on the operation, enter query parameter values, header values, or a request body. SelectSend.When the test is successful, the backend responds with a successful HTTP response code and some data.TipBy default, the test console sends a request to API Management's CORS proxy, which forwards the request to the API Management instance, which then forwards it to the backend. This proxy uses public IP address 13.91.254.72 and can only reach public endpoints. If you want to send a request directly from the browser to the API Management service, selectBypass CORS proxy. Use this option when you want to use the test console and your API Management gateway is network-isolated or doesn't allow traffic from the CORS proxy.
Depending on the operation, enter query parameter values, header values, or a request body. SelectSend.
When the test is successful, the backend responds with a successful HTTP response code and some data.
Tip
By default, the test console sends a request to API Management's CORS proxy, which forwards the request to the API Management instance, which then forwards it to the backend. This proxy uses public IP address 13.91.254.72 and can only reach public endpoints. If you want to send a request directly from the browser to the API Management service, selectBypass CORS proxy. Use this option when you want to use the test console and your API Management gateway is network-isolated or doesn't allow traffic from the CORS proxy.
To debug an API, seeTutorial: Debug your APIs using request tracing.
Append other APIs
You can compose an API out of APIs that are exposed by different services, including:
An OpenAPI specification
A SOAP API
A GraphQL API
A Web App that's hosted in Azure App Service
Azure Functions
Azure Logic Apps
Azure Service Fabric
Note
When you import an API, the operations are appended to your current API.
To append an API to an existing API:
Go to your Azure API Management instance in the Azure portal:
Go to your Azure API Management instance in the Azure portal:

SelectAPIson theOverviewpage or selectAPIs>APIsin the menu on the left.
SelectAPIson theOverviewpage or selectAPIs>APIsin the menu on the left.

Select the ellipsis (...) next to the API that you want to append another API to.
Select the ellipsis (...) next to the API that you want to append another API to.
SelectImportfrom the drop-down menu:
SelectImportfrom the drop-down menu:

Select a service from which to import an API.
Select a service from which to import an API.
Related content
API import limitations
Import an OpenAPI specification
Import a SOAP API
Import a SOAP API and convert it to REST
Import an App Service API
Import a Container App API
Import a WebSocket API
Import a GraphQL API
Import a GraphQL schema and set up field resolvers
Import an Azure Function App API
Import an Azure Logic App API
Import a Service Fabric service
Import an Azure OpenAI API
Import an OData API
Import SAP OData metadata
Import a gRPC API
Edit an API
Feedback
Was this page helpful?
Additional resources