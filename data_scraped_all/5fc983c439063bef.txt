Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Authenticate Azure-hosted Java applications
Article
2024-10-18
2 contributors
In this article
This article looks at how the Azure Identity library supports Microsoft Entra token authentication for applications hosted on Azure. This support is made possible through a set ofTokenCredentialimplementations, which are discussed in this article.
TokenCredential
This article covers the following subjects:
DefaultAzureCredential
ManagedIdentityCredential
For troubleshooting authentication issues related to Azure-hosted applications, seeTroubleshoot Azure-hosted application authentication.
DefaultAzureCredential
DefaultAzureCredentialcombines credentials that are commonly used to authenticate when deployed, with credentials that are used to authenticate in a development environment. For more information, seeDefaultAzureCredential overview.
DefaultAzureCredential
Configure DefaultAzureCredential
DefaultAzureCredentialsupports a set of configurations through setters on theDefaultAzureCredentialBuilderor environment variables.
DefaultAzureCredential
DefaultAzureCredentialBuilder
Setting the environment variablesAZURE_CLIENT_ID,AZURE_CLIENT_SECRET, andAZURE_TENANT_IDas defined inEnvironment variablesconfiguresDefaultAzureCredentialto authenticate as the service principal specified by the values.
AZURE_CLIENT_ID
AZURE_CLIENT_SECRET
AZURE_TENANT_ID
DefaultAzureCredential
Setting.managedIdentityClientId(String)on the builder or the environment variableAZURE_CLIENT_IDconfiguresDefaultAzureCredentialto authenticate as a user-assigned managed identity, while leaving them empty configures it to authenticate as a system-assigned managed identity.
.managedIdentityClientId(String)
AZURE_CLIENT_ID
DefaultAzureCredential
Setting.tenantId(String)on the builder or the environment variableAZURE_TENANT_IDconfiguresDefaultAzureCredentialto authenticate to a specific tenant for either the shared token cache or IntelliJ IDEA.
.tenantId(String)
AZURE_TENANT_ID
DefaultAzureCredential
Setting the environment variableAZURE_USERNAMEconfiguresDefaultAzureCredentialto pick the corresponding cached token from the shared token cache.
AZURE_USERNAME
DefaultAzureCredential
Authenticate with DefaultAzureCredential
The following example demonstrates authenticating theSecretClientfrom theazure-security-keyvault-secretsclient library usingDefaultAzureCredential:
SecretClient
DefaultAzureCredential
// Azure SDK client builders accept the credential as a parameter.
SecretClient client = new SecretClientBuilder()
  .vaultUrl("https://<KEY_VAULT_NAME>.vault.azure.net")
  .credential(new DefaultAzureCredentialBuilder().build())
  .buildClient();
// Azure SDK client builders accept the credential as a parameter.
SecretClient client = new SecretClientBuilder()
  .vaultUrl("https://<KEY_VAULT_NAME>.vault.azure.net")
  .credential(new DefaultAzureCredentialBuilder().build())
  .buildClient();
Authenticate a user-assigned managed identity with DefaultAzureCredential
The following example demonstrates authenticating theSecretClientfrom theazure-security-keyvault-secretsclient library usingDefaultAzureCredentialdeployed to an Azure resource with a user-assigned managed identity configured.
SecretClient
DefaultAzureCredential
/**
 * DefaultAzureCredential uses the user-assigned managed identity with the specified client ID.
 */
DefaultAzureCredential credential = new DefaultAzureCredentialBuilder()
  .managedIdentityClientId("<CLIENT_ID>")
  .build();

// Azure SDK client builders accept the credential as a parameter.
SecretClient client = new SecretClientBuilder()
  .vaultUrl("https://<KEY_VAULT_NAME>.vault.azure.net")
  .credential(credential)
  .buildClient();
/**
 * DefaultAzureCredential uses the user-assigned managed identity with the specified client ID.
 */
DefaultAzureCredential credential = new DefaultAzureCredentialBuilder()
  .managedIdentityClientId("<CLIENT_ID>")
  .build();

// Azure SDK client builders accept the credential as a parameter.
SecretClient client = new SecretClientBuilder()
  .vaultUrl("https://<KEY_VAULT_NAME>.vault.azure.net")
  .credential(credential)
  .buildClient();
ManagedIdentityCredential
ManagedIdentityCredentialauthenticates the managed identity (system-assigned or user-assigned) of an Azure resource. So, if the application is running inside an Azure resource that supports managed identity throughIDENTITY/MSI,IMDSendpoints, or both, then this credential gets your application authenticated, and offers a secretless authentication experience.
IDENTITY/MSI
IMDS
For more information, seeWhat are managed identities for Azure resources?.
Authenticate in Azure with managed identity
The following example demonstrates authenticating theSecretClientfrom theazure-security-keyvault-secretsclient library using theManagedIdentityCredentialin a Virtual Machine, App Service, Functions app, Cloud Shell, Service Fabric, Arc, or AKS environment on Azure, with system-assigned or user-assigned managed identity enabled.
SecretClient
ManagedIdentityCredential
/**
 * Authenticate with a user-assigned managed identity.
 */
ManagedIdentityCredential credential = new ManagedIdentityCredentialBuilder()
  .clientId("<CLIENT_ID>") // required only for user-assigned
  .build();

// Azure SDK client builders accept the credential as a parameter.
SecretClient client = new SecretClientBuilder()
  .vaultUrl("https://<KEY_VAULT_NAME>.vault.azure.net")
  .credential(credential)
  .buildClient();
/**
 * Authenticate with a user-assigned managed identity.
 */
ManagedIdentityCredential credential = new ManagedIdentityCredentialBuilder()
  .clientId("<CLIENT_ID>") // required only for user-assigned
  .build();

// Azure SDK client builders accept the credential as a parameter.
SecretClient client = new SecretClientBuilder()
  .vaultUrl("https://<KEY_VAULT_NAME>.vault.azure.net")
  .credential(credential)
  .buildClient();
Environment variables
You can configureDefaultAzureCredentialandEnvironmentCredentialwith environment variables. Each type of authentication requires values for specific variables:
DefaultAzureCredential
EnvironmentCredential
Service principal with secret
AZURE_CLIENT_ID
AZURE_TENANT_ID
AZURE_CLIENT_SECRET
Service principal with certificate
AZURE_CLIENT_ID
AZURE_TENANT_ID
AZURE_CLIENT_CERTIFICATE_PATH
AZURE_CLIENT_CERTIFICATE_PASSWORD
AZURE_CLIENT_SEND_CERTIFICATE_CHAIN
Username and password
AZURE_CLIENT_ID
AZURE_TENANT_ID
AZURE_USERNAME
AZURE_PASSWORD
Configuration is attempted in this order. For example, if values for a client secret and certificate are both present, the client secret is used.
Next steps
This article covered authentication for applications hosted in Azure. This form of authentication is one of multiple ways you can authenticate in the Azure SDK for Java. The following articles describe other ways:
Azure authentication in development environments
Authentication with service principals
Authentication with user credentials
If you run into issues related to Azure-hosted application authentication, seeTroubleshoot Azure-hosted application authentication.
After you've mastered authentication, seeConfigure logging in the Azure SDK for Javafor information on the logging functionality provided by the SDK.
Feedback
Was this page helpful?
Additional resources