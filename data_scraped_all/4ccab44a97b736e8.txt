Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Tutorial: Implement CI/CD with GitOps (Flux v2)
Article
2025-01-16
9 contributors
In this article
In this tutorial, you set up a CI/CD solution usingGitOps with Flux v2and Azure Arc-enabled Kubernetes or Azure Kubernetes Service (AKS) clusters. Using the sample Azure Vote app, you can:
Connect your application and GitOps repositories to Azure Devops (Azure Repos) or GitHub.
Implement CI/CD flow with either Azure Pipelines or GitHub.
Connect your Azure Container Registry to Azure DevOps and Kubernetes.
Create environment variable groups or secrets.
Deploy thedevandstageenvironments.
dev
stage
Test the application environments.
If you don't have an Azure subscription, create afree accountbefore you begin.
Prerequisites
Complete theprevious tutorialto learn how to deploy GitOps for your CI/CD environment.
Complete theprevious tutorialto learn how to deploy GitOps for your CI/CD environment.
Understand thebenefits and architectureof this feature.
Understand thebenefits and architectureof this feature.
Verify you have:Aconnected Azure Arc-enabled Kubernetes clusternamedarc-cicd-cluster.A connected Azure Container Registry with eitherAKS integrationornon-AKS cluster authentication.
Verify you have:
Aconnected Azure Arc-enabled Kubernetes clusternamedarc-cicd-cluster.
A connected Azure Container Registry with eitherAKS integrationornon-AKS cluster authentication.
Install the latest versions of these Azure Arc-enabled Kubernetes and Kubernetes Configuration CLI extensions:az extension add --name connectedk8s
az extension add --name k8s-configuration
Install the latest versions of these Azure Arc-enabled Kubernetes and Kubernetes Configuration CLI extensions:
az extension add --name connectedk8s
az extension add --name k8s-configuration
az extension add --name connectedk8s
az extension add --name k8s-configuration
Or to update these extensions to the latest version, run the following commands:az extension update --name connectedk8s
az extension update --name k8s-configuration
Or to update these extensions to the latest version, run the following commands:
az extension update --name connectedk8s
az extension update --name k8s-configuration
az extension update --name connectedk8s
az extension update --name k8s-configuration
Connect Azure Container Registry to Kubernetes
Enable your Kubernetes cluster to pull images from your Azure Container Registry. If it's private, authentication is required.
Integrate an existing Azure Container Registry with existing AKS clusters using the following command:
az aks update -n arc-cicd-cluster -g myResourceGroup --attach-acr arc-demo-acr
az aks update -n arc-cicd-cluster -g myResourceGroup --attach-acr arc-demo-acr
To connect non-AKS and local clusters to your Azure Container Registry, create an image pull secret. Kubernetes uses image pull secrets to store information needed to authenticate your registry.
Create an image pull secret with the followingkubectlcommand. Repeat for both thedevandstagenamespaces.
kubectl
dev
stage
kubectl create secret docker-registry <secret-name> \
    --namespace <namespace> \
    --docker-server=<container-registry-name>.azurecr.io \
    --docker-username=<service-principal-ID> \
    --docker-password=<service-principal-password>
kubectl create secret docker-registry <secret-name> \
    --namespace <namespace> \
    --docker-server=<container-registry-name>.azurecr.io \
    --docker-username=<service-principal-ID> \
    --docker-password=<service-principal-password>
To avoid having to set an imagePullSecret for every Pod, consider adding the imagePullSecret to the Service account in thedevandstagenamespaces. For more information, see theKubernetes tutorial.
dev
stage
Depending on the CI/CD orchestrator you prefer, you can proceed with instructions either for Azure DevOps or for GitHub.
Implement CI/CD with Azure DevOps
This tutorial assumes familiarity with Azure DevOps, Azure Repos and Pipelines, and Azure CLI.
Make sure to complete the following steps first:
Sign intoAzure DevOps Services.
Verify you have "Build Admin" and "Project Admin" permissions forAzure ReposandAzure Pipelines.
Import application and GitOps repositories into Azure Repos
Import anapplication repositoryand aGitOps repositoryinto Azure Repos. For this tutorial, use the following example repositories:
arc-cicd-demo-srcapplication repositoryURL:https://github.com/Azure/arc-cicd-demo-srcContains the example Azure Vote App to deploy using GitOps.Import the repository with namearc-cicd-demo-src
arc-cicd-demo-srcapplication repository
URL:https://github.com/Azure/arc-cicd-demo-src
Contains the example Azure Vote App to deploy using GitOps.
Import the repository with namearc-cicd-demo-src
arc-cicd-demo-src
arc-cicd-demo-gitopsGitOps repositoryURL:https://github.com/Azure/arc-cicd-demo-gitopsWorks as a base for your cluster resources that house the Azure Vote App.Import the repository with namearc-cicd-demo-gitops
arc-cicd-demo-gitopsGitOps repository
URL:https://github.com/Azure/arc-cicd-demo-gitops
Works as a base for your cluster resources that house the Azure Vote App.
Import the repository with namearc-cicd-demo-gitops
arc-cicd-demo-gitops
Learn more aboutimporting Git repositories.
Note
Importing and using two separate repositories for application and GitOps repositories can improve security and simplicity. The application and GitOps repositories' permissions and visibility can be tuned individually.
For example, the cluster administrator may not find the changes in application code relevant to the desired state of the cluster. Conversely, an application developer doesn't need to know the specific parameters for each environment - a set of test values that provide coverage for the parameters may be sufficient.
Connect the GitOps repository
To continuously deploy your app, connect the application repository to your cluster using GitOps. Yourarc-cicd-demo-gitopsGitOps repository contains the basic resources to get your app up and running on yourarc-cicd-clustercluster.
The initial GitOps repository contains only amanifestthat creates thedevandstagenamespaces corresponding to the deployment environments.
The GitOps connection that you create automatically syncs the manifests in the manifest directory and updates the cluster state.
The CI/CD workflow populates the manifest directory with extra manifests to deploy the app.
Create a new GitOps connectionto your newly importedarc-cicd-demo-gitopsrepository in Azure Repos.az k8s-configuration flux create \
   --name cluster-config \
   --cluster-name arc-cicd-cluster \
   --namespace flux-system \
   --resource-group myResourceGroup \
   -u https://dev.azure.com/<Your organization>/<Your project>/_git/arc-cicd-demo-gitops \
   --https-user <Azure Repos username> \
   --https-key <Azure Repos PAT token> \
   --scope cluster \
   --cluster-type connectedClusters \
   --branch master \
   --kustomization name=cluster-config prune=true path=arc-cicd-cluster/manifestsTipFor an AKS cluster (rather than an Arc-enabled cluster), use-cluster-type managedClusters.
Create a new GitOps connectionto your newly importedarc-cicd-demo-gitopsrepository in Azure Repos.
az k8s-configuration flux create \
   --name cluster-config \
   --cluster-name arc-cicd-cluster \
   --namespace flux-system \
   --resource-group myResourceGroup \
   -u https://dev.azure.com/<Your organization>/<Your project>/_git/arc-cicd-demo-gitops \
   --https-user <Azure Repos username> \
   --https-key <Azure Repos PAT token> \
   --scope cluster \
   --cluster-type connectedClusters \
   --branch master \
   --kustomization name=cluster-config prune=true path=arc-cicd-cluster/manifests
az k8s-configuration flux create \
   --name cluster-config \
   --cluster-name arc-cicd-cluster \
   --namespace flux-system \
   --resource-group myResourceGroup \
   -u https://dev.azure.com/<Your organization>/<Your project>/_git/arc-cicd-demo-gitops \
   --https-user <Azure Repos username> \
   --https-key <Azure Repos PAT token> \
   --scope cluster \
   --cluster-type connectedClusters \
   --branch master \
   --kustomization name=cluster-config prune=true path=arc-cicd-cluster/manifests
Tip
For an AKS cluster (rather than an Arc-enabled cluster), use-cluster-type managedClusters.
-cluster-type managedClusters
Check the state of the deployment in Azure portal.If successful, you see bothdevandstagenamespaces created in your cluster.You can also confirm that on the Azure portal page of your cluster, a configurationcluster-configis created on theGitOpstab.
Check the state of the deployment in Azure portal.
If successful, you see bothdevandstagenamespaces created in your cluster.
dev
stage
You can also confirm that on the Azure portal page of your cluster, a configurationcluster-configis created on theGitOpstab.
cluster-config
GitOps
Import the CI/CD pipelines
Now that you synced a GitOps connection, you need to import the CI/CD pipelines that create the manifests.
The application repository contains a.pipelinefolder with pipelines used for PRs, CI, and CD. Import and rename the three pipelines provided in the sample repository:
.pipeline
.pipelines/az-vote-pr-pipeline.yaml
.pipelines/az-vote-ci-pipeline.yaml
.pipelines/az-vote-cd-pipeline.yaml
Connect Azure Container Registry to Azure DevOps
During the CI process, you deploy your application containers to a registry. Start by creating anAzure service connection:
In Azure DevOps, open theService connectionspage from the project settings page. In TFS, open theServicespage from thesettingsicon in the top menu bar.
Choose+ New service connectionand select the type of service connection you need.
Fill in the parameters for the service connection. For this tutorial:Name the service connectionarc-demo-acr.SelectmyResourceGroupas the resource group.
Name the service connectionarc-demo-acr.
SelectmyResourceGroupas the resource group.
Select theGrant access permission to all pipelines.This option authorizes YAML pipeline files for service connections.
This option authorizes YAML pipeline files for service connections.
ChooseSaveto create the connection.
Configure PR service connection
The CD pipeline manipulates pull requests (PRs) in the GitOps repository, which requires a service connection. To configure this connection:
In Azure DevOps, open theService connectionspage from the project settings page. In TFS, open theServicespage from thesettingsicon in the top menu bar.
Choose+ New service connectionand selectGenerictype.
Generic
Fill in the parameters for the service connection. For this tutorial:Server URLhttps://dev.azure.com/<Your organization>/<Your project>/_apis/git/repositories/arc-cicd-demo-gitopsLeave Username and Password blank.Name the service connectionazdo-pr-connection.
Server URLhttps://dev.azure.com/<Your organization>/<Your project>/_apis/git/repositories/arc-cicd-demo-gitops
https://dev.azure.com/<Your organization>/<Your project>/_apis/git/repositories/arc-cicd-demo-gitops
Leave Username and Password blank.
Name the service connectionazdo-pr-connection.
Select theGrant access permission to all pipelines.This option authorizes YAML pipeline files for service connections.
This option authorizes YAML pipeline files for service connections.
ChooseSaveto create the connection.
Install GitOps Connector
Add GitOps Connector repository to Helm repositories:helm repo add gitops-connector https://azure.github.io/gitops-connector/
Add GitOps Connector repository to Helm repositories:
helm repo add gitops-connector https://azure.github.io/gitops-connector/
helm repo add gitops-connector https://azure.github.io/gitops-connector/
Install the connector to the cluster:helm upgrade -i gitops-connector gitops-connector/gitops-connector \
      --namespace flux-system \
      --set gitRepositoryType=AZDO \
      --set ciCdOrchestratorType=AZDO \
      --set gitOpsOperatorType=FLUX \
      --set azdoGitOpsRepoName=arc-cicd-demo-gitops \
      --set azdoOrgUrl=https://dev.azure.com/<Your organization>/<Your project> \
      --set gitOpsAppURL=https://dev.azure.com/<Your organization>/<Your project>/_git/arc-cicd-demo-gitops \
      --set orchestratorPAT=<Azure Repos PAT token>NoteAzure Repos PAT tokenshould haveBuild: Read & executeandCode: Fullpermissions.
Install the connector to the cluster:
helm upgrade -i gitops-connector gitops-connector/gitops-connector \
      --namespace flux-system \
      --set gitRepositoryType=AZDO \
      --set ciCdOrchestratorType=AZDO \
      --set gitOpsOperatorType=FLUX \
      --set azdoGitOpsRepoName=arc-cicd-demo-gitops \
      --set azdoOrgUrl=https://dev.azure.com/<Your organization>/<Your project> \
      --set gitOpsAppURL=https://dev.azure.com/<Your organization>/<Your project>/_git/arc-cicd-demo-gitops \
      --set orchestratorPAT=<Azure Repos PAT token>
helm upgrade -i gitops-connector gitops-connector/gitops-connector \
      --namespace flux-system \
      --set gitRepositoryType=AZDO \
      --set ciCdOrchestratorType=AZDO \
      --set gitOpsOperatorType=FLUX \
      --set azdoGitOpsRepoName=arc-cicd-demo-gitops \
      --set azdoOrgUrl=https://dev.azure.com/<Your organization>/<Your project> \
      --set gitOpsAppURL=https://dev.azure.com/<Your organization>/<Your project>/_git/arc-cicd-demo-gitops \
      --set orchestratorPAT=<Azure Repos PAT token>
Note
Azure Repos PAT tokenshould haveBuild: Read & executeandCode: Fullpermissions.
Azure Repos PAT token
Build: Read & execute
Code: Full
Configure Flux to send notifications to GitOps connector:cat <<EOF | kubectl apply -f -
apiVersion: notification.toolkit.fluxcd.io/v1beta1
kind: Alert
metadata:
  name: gitops-connector
  namespace: flux-system
spec:
  eventSeverity: info
  eventSources:
  - kind: GitRepository
    name: cluster-config
  - kind: Kustomization
    name: cluster-config-cluster-config 
  providerRef:
    name: gitops-connector
---
apiVersion: notification.toolkit.fluxcd.io/v1beta1
kind: Provider
metadata:
  name: gitops-connector
  namespace: flux-system
spec:
  type: generic
  address: http://gitops-connector:8080/gitopsphase
EOF
Configure Flux to send notifications to GitOps connector:
cat <<EOF | kubectl apply -f -
apiVersion: notification.toolkit.fluxcd.io/v1beta1
kind: Alert
metadata:
  name: gitops-connector
  namespace: flux-system
spec:
  eventSeverity: info
  eventSources:
  - kind: GitRepository
    name: cluster-config
  - kind: Kustomization
    name: cluster-config-cluster-config 
  providerRef:
    name: gitops-connector
---
apiVersion: notification.toolkit.fluxcd.io/v1beta1
kind: Provider
metadata:
  name: gitops-connector
  namespace: flux-system
spec:
  type: generic
  address: http://gitops-connector:8080/gitopsphase
EOF
cat <<EOF | kubectl apply -f -
apiVersion: notification.toolkit.fluxcd.io/v1beta1
kind: Alert
metadata:
  name: gitops-connector
  namespace: flux-system
spec:
  eventSeverity: info
  eventSources:
  - kind: GitRepository
    name: cluster-config
  - kind: Kustomization
    name: cluster-config-cluster-config 
  providerRef:
    name: gitops-connector
---
apiVersion: notification.toolkit.fluxcd.io/v1beta1
kind: Provider
metadata:
  name: gitops-connector
  namespace: flux-system
spec:
  type: generic
  address: http://gitops-connector:8080/gitopsphase
EOF
For details about installation, see theGitOps Connectorrepository.
Create environment variable groups
Create avariable groupnamedaz-vote-app-dev. Set the following values:
AZURE_SUBSCRIPTION
AZ_ACR_NAME
ENVIRONMENT_NAME
MANIFESTS_BRANCH
master
MANIFESTS_REPO
arc-cicd-demo-gitops
ORGANIZATION_NAME
PROJECT_NAME
REPO_URL
SRC_FOLDER
azure-vote
TARGET_CLUSTER
arc-cicd-cluster
TARGET_NAMESPACE
dev
VOTE_APP_TITLE
AKS_RESOURCE_GROUP
AKS_NAME
Clone theaz-vote-app-devvariable group.
Clone theaz-vote-app-devvariable group.
Change the name toaz-vote-app-stage.
Change the name toaz-vote-app-stage.
Ensure the following values for the corresponding variables:VariableValueENVIRONMENT_NAMEStageTARGET_NAMESPACEstage
Ensure the following values for the corresponding variables:
ENVIRONMENT_NAME
TARGET_NAMESPACE
stage
You're now ready to deploy to thedevandstageenvironments.
dev
stage
In your Azure DevOps project, createDevandStageenvironments. For details, seeCreate and target environments.
Dev
Stage
Give more permissions to the build service
The CD pipeline uses the security token of the running build to authenticate to the GitOps repository. More permissions are needed for the pipeline to create a new branch, push changes, and create PRs. To enable these permissions:
In Azure DevOps, openProject settings.
UnderRepositories, selectRepos.
SelectSecurity.
Find<Project Name> Build Service (<Organization Name>)andProject Collection Build Service (<Organization Name>)(use search if you don't see them), and allowContribute,Contribute to pull requests, andCreate branch.
<Project Name> Build Service (<Organization Name>)
Project Collection Build Service (<Organization Name>)
UnderPipelines, selectSettings.
Turn off theProtect access to repositories in YAML pipelinesoption.
For more information, seeGrant version control permissions to the build serviceandManage build service account permissions.
Deploy the dev environment for the first time
With the CI and CD pipelines created, run the CI pipeline to deploy the app for the first time.
During the initial CI pipeline run, if you see a resource authorization error in reading the service connection name, do the following:
Verify the variable being accessed is AZURE_SUBSCRIPTION.
Authorize the use.
Rerun the pipeline.
The CI pipeline:
Ensures the application change passes all automated quality checks for deployment.
Does any extra validation that couldn't be completed in the PR pipeline. Specific to GitOps, the pipeline also publishes the artifacts for the commit that will be deployed by the CD pipeline.
Verifies the Docker image has changed and the new image is pushed.
During the initial CD pipeline run, you need to give the pipeline access to the GitOps repository. SelectViewwhen prompted that the pipeline needs permission to access a resource. Then, selectPermitto grant permission to use the GitOps repository for the current and future runs of the pipeline.
The successful CI pipeline run triggers the CD pipeline to complete the deployment process. You deploy to each environment incrementally.
Tip
If the CD pipeline does not automatically trigger:
Verify the name matches the branch trigger in.pipelines/az-vote-cd-pipeline.yamlIt should bearc-cicd-demo-src CI.
.pipelines/az-vote-cd-pipeline.yaml
It should bearc-cicd-demo-src CI.
arc-cicd-demo-src CI
Rerun the CI pipeline.
Once the template and manifest changes to the GitOps repository are generated, the CD pipeline creates a commit, pushes it, and creates a PR for approval.
Find the PR created by the pipeline to the GitOps repository.
Find the PR created by the pipeline to the GitOps repository.
Verify the changes to the GitOps repository. You should see:High-level Helm template changes.Low-level Kubernetes manifests that show the underlying changes to the desired state. Flux deploys these manifests.
Verify the changes to the GitOps repository. You should see:
High-level Helm template changes.
Low-level Kubernetes manifests that show the underlying changes to the desired state. Flux deploys these manifests.
If everything looks good, approve and complete the PR.
If everything looks good, approve and complete the PR.
After a few minutes, Flux picks up the change and starts the deployment.
After a few minutes, Flux picks up the change and starts the deployment.
Monitor thegit commitstatus on theCommit historytab. Once it issucceeded, the CD pipeline starts automated testing.
Monitor thegit commitstatus on theCommit historytab. Once it issucceeded, the CD pipeline starts automated testing.
git commit
succeeded
Forward the port locally usingkubectland ensure the app works correctly using:kubectl port-forward -n dev svc/azure-vote-front 8080:80
Forward the port locally usingkubectland ensure the app works correctly using:
kubectl
kubectl port-forward -n dev svc/azure-vote-front 8080:80
kubectl port-forward -n dev svc/azure-vote-front 8080:80
View the Azure Vote app in your browser athttp://localhost:8080/.
View the Azure Vote app in your browser athttp://localhost:8080/.
http://localhost:8080/
Vote for your favorites and get ready to make some changes to the app.
Vote for your favorites and get ready to make some changes to the app.
Set up environment approvals
Upon app deployment, you can make changes to the code or templates, but you can also unintentionally put the cluster into a bad state.
If the dev environment reveals a break after deployment, enabling environment approvals helps keep the problem from later environments.
In your Azure DevOps project, go to the environment that needs to be protected.
Navigate toApprovals and Checksfor the resource.
SelectCreate.
Provide the approvers and an optional message.
SelectCreateagain to complete the addition of the manual approval check.
For more information, seeDefine approval and checks.
Next time the CD pipeline runs, the pipeline will pause after the GitOps PR creation. Verify that the change is properly synced and passes basic functionality. Approve the check from the pipeline to let the change flow to the next environment.
Make an application change
With this baseline set of templates and manifests representing the state on the cluster, you make a small change to the app.
In thearc-cicd-demo-srcrepository, editazure-vote/src/azure-vote-front/config_file.cfgfile.
In thearc-cicd-demo-srcrepository, editazure-vote/src/azure-vote-front/config_file.cfgfile.
azure-vote/src/azure-vote-front/config_file.cfg
Since "Cats vs Dogs" isn't getting enough votes, change it to "Tabs vs Spaces" to drive up the vote count.
Since "Cats vs Dogs" isn't getting enough votes, change it to "Tabs vs Spaces" to drive up the vote count.
Commit the change in a new branch, push it, and create a pull request. This sequence of steps is the typical developer flow that starts the CI/CD lifecycle.
Commit the change in a new branch, push it, and create a pull request. This sequence of steps is the typical developer flow that starts the CI/CD lifecycle.
PR validation pipeline
The PR pipeline is the first line of defense against a faulty change. Usual application code quality checks include linting and static analysis. From a GitOps perspective, you also need to assure the same quality for the resulting infrastructure to be deployed.
The application's Dockerfile and Helm charts can use linting in a similar way to the application.
Errors found during linting range from incorrectly formatted YAML files, to best practice suggestions, such as setting CPU and Memory limits for your application.
Note
To get the best coverage from Helm linting in a real application, substitute values that are reasonably similar to values that would be used in a real environment.
Errors found during pipeline execution appear in the test results section of the run. From here, you can:
Track the useful statistics on the error types.
Find the first commit on which they were detected.
Stack trace style links to the code sections that caused the error.
The pipeline run finishes, confirming the quality of the application code and the template that deploys it. You can now approve and complete the PR. The CI runs again, regenerating the templates and manifests, before triggering the CD pipeline.
Tip
In a real environment, be sure to set branch policies to ensure the PR passes your quality checks. For more information, seeBranch policies and settings.
CD process approvals
A successful CI pipeline run triggers the CD pipeline to complete the deployment process. This time, the pipeline requires you to approve each deployment environment.
Approve the deployment to thedevenvironment.
dev
Once the template and manifest changes to the GitOps repository have been generated, the CD pipeline creates a commit, pushes it, and creates a PR for approval.
Verify the changes to the GitOps repository. You should see:High-level Helm template changes.Low-level Kubernetes manifests that show the underlying changes to the desired state.
High-level Helm template changes.
Low-level Kubernetes manifests that show the underlying changes to the desired state.
If everything looks good, approve and complete the PR.
Wait for the deployment to complete.
As a basic smoke test, navigate to the application page and verify the voting app now displaysTabs vs Spaces.Forward the port locally usingkubectland ensure the app works correctly using:kubectl port-forward -n dev svc/azure-vote-front 8080:80View the Azure Vote app in your browser athttp://localhost:8080/and verify the voting choices have changed to Tabs vs Spaces.
Forward the port locally usingkubectland ensure the app works correctly using:kubectl port-forward -n dev svc/azure-vote-front 8080:80
kubectl
kubectl port-forward -n dev svc/azure-vote-front 8080:80
View the Azure Vote app in your browser athttp://localhost:8080/and verify the voting choices have changed to Tabs vs Spaces.
http://localhost:8080/
Repeat steps 1-7 for thestageenvironment.
stage
The deployment is now complete.
For a detailed overview of all the steps and techniques implemented in the CI/CD workflows used in this tutorial, see theAzure DevOps GitOps Flow diagram.
Implement CI/CD with GitHub
This tutorial assumes familiarity with GitHub, GitHub Actions.
Fork application and GitOps repositories
Fork anapplication repositoryand aGitOps repository. For this tutorial, use the following example repositories:
arc-cicd-demo-srcapplication repositoryURL:https://github.com/Azure/arc-cicd-demo-srcContains the example Azure Vote App to deploy using GitOps.
arc-cicd-demo-srcapplication repository
URL:https://github.com/Azure/arc-cicd-demo-src
Contains the example Azure Vote App to deploy using GitOps.
arc-cicd-demo-gitopsGitOps repositoryURL:https://github.com/Azure/arc-cicd-demo-gitopsWorks as a base for your cluster resources that house the Azure Vote App.
arc-cicd-demo-gitopsGitOps repository
URL:https://github.com/Azure/arc-cicd-demo-gitops
Works as a base for your cluster resources that house the Azure Vote App.
Connect the GitOps repository
To continuously deploy your app, connect the application repository to your cluster using GitOps. Yourarc-cicd-demo-gitopsGitOps repository contains the basic resources to get your app up and running on yourarc-cicd-clustercluster.
The initial GitOps repository contains only amanifestthat creates thedevandstagenamespaces corresponding to the deployment environments.
The GitOps connection that you create automatically:
Sync the manifests in the manifest directory.
Update the cluster state.
The CI/CD workflow populates the manifest directory with extra manifests to deploy the app.
Create a new GitOps connectionto your newly forkedarc-cicd-demo-gitopsrepository in GitHub.az k8s-configuration flux create \
   --name cluster-config \
   --cluster-name arc-cicd-cluster \
   --namespace cluster-config \
   --resource-group myResourceGroup \
   -u  https://github.com/<Your organization>/arc-cicd-demo-gitops.git \
   --https-user <Azure Repos username> \
   --https-key <Azure Repos PAT token> \
   --scope cluster \
   --cluster-type connectedClusters \
   --branch master \
   --kustomization name=cluster-config prune=true path=arc-cicd-cluster/manifests
Create a new GitOps connectionto your newly forkedarc-cicd-demo-gitopsrepository in GitHub.
az k8s-configuration flux create \
   --name cluster-config \
   --cluster-name arc-cicd-cluster \
   --namespace cluster-config \
   --resource-group myResourceGroup \
   -u  https://github.com/<Your organization>/arc-cicd-demo-gitops.git \
   --https-user <Azure Repos username> \
   --https-key <Azure Repos PAT token> \
   --scope cluster \
   --cluster-type connectedClusters \
   --branch master \
   --kustomization name=cluster-config prune=true path=arc-cicd-cluster/manifests
az k8s-configuration flux create \
   --name cluster-config \
   --cluster-name arc-cicd-cluster \
   --namespace cluster-config \
   --resource-group myResourceGroup \
   -u  https://github.com/<Your organization>/arc-cicd-demo-gitops.git \
   --https-user <Azure Repos username> \
   --https-key <Azure Repos PAT token> \
   --scope cluster \
   --cluster-type connectedClusters \
   --branch master \
   --kustomization name=cluster-config prune=true path=arc-cicd-cluster/manifests
Check the state of the deployment in Azure portal.If successful, you see bothdevandstagenamespaces created in your cluster.
Check the state of the deployment in Azure portal.
If successful, you see bothdevandstagenamespaces created in your cluster.
dev
stage
Install GitOps Connector
Add GitOps Connector repository to Helm repositories:helm repo add gitops-connector https://azure.github.io/gitops-connector/
Add GitOps Connector repository to Helm repositories:
helm repo add gitops-connector https://azure.github.io/gitops-connector/
helm repo add gitops-connector https://azure.github.io/gitops-connector/
Install the connector to the cluster:helm upgrade -i gitops-connector gitops-connector/gitops-connector \
      --namespace flux-system \
      --set gitRepositoryType=GITHUB \
      --set ciCdOrchestratorType=GITHUB \
      --set gitOpsOperatorType=FLUX \
      --set gitHubGitOpsRepoName=arc-cicd-demo-src \
      --set gitHubGitOpsManifestsRepoName=arc-cicd-demo-gitops \
      --set gitHubOrgUrl=https://api.github.com/repos/<Your organization> \
      --set gitOpsAppURL=https://github.com/<Your organization>/arc-cicd-demo-gitops/commit \
      --set orchestratorPAT=<GitHub PAT token>
Install the connector to the cluster:
helm upgrade -i gitops-connector gitops-connector/gitops-connector \
      --namespace flux-system \
      --set gitRepositoryType=GITHUB \
      --set ciCdOrchestratorType=GITHUB \
      --set gitOpsOperatorType=FLUX \
      --set gitHubGitOpsRepoName=arc-cicd-demo-src \
      --set gitHubGitOpsManifestsRepoName=arc-cicd-demo-gitops \
      --set gitHubOrgUrl=https://api.github.com/repos/<Your organization> \
      --set gitOpsAppURL=https://github.com/<Your organization>/arc-cicd-demo-gitops/commit \
      --set orchestratorPAT=<GitHub PAT token>
helm upgrade -i gitops-connector gitops-connector/gitops-connector \
      --namespace flux-system \
      --set gitRepositoryType=GITHUB \
      --set ciCdOrchestratorType=GITHUB \
      --set gitOpsOperatorType=FLUX \
      --set gitHubGitOpsRepoName=arc-cicd-demo-src \
      --set gitHubGitOpsManifestsRepoName=arc-cicd-demo-gitops \
      --set gitHubOrgUrl=https://api.github.com/repos/<Your organization> \
      --set gitOpsAppURL=https://github.com/<Your organization>/arc-cicd-demo-gitops/commit \
      --set orchestratorPAT=<GitHub PAT token>
Configure Flux to send notifications to GitOps connector:cat <<EOF | kubectl apply -f -
apiVersion: notification.toolkit.fluxcd.io/v1beta1
kind: Alert
metadata:
  name: gitops-connector
  namespace: flux-system
spec:
  eventSeverity: info
  eventSources:
  - kind: GitRepository
    name: cluster-config
  - kind: Kustomization
    name: cluster-config-cluster-config
  providerRef:
    name: gitops-connector
---
apiVersion: notification.toolkit.fluxcd.io/v1beta1
kind: Provider
metadata:
  name: gitops-connector
  namespace: flux-system
spec:
  type: generic
  address: http://gitops-connector:8080/gitopsphase
EOF
Configure Flux to send notifications to GitOps connector:
cat <<EOF | kubectl apply -f -
apiVersion: notification.toolkit.fluxcd.io/v1beta1
kind: Alert
metadata:
  name: gitops-connector
  namespace: flux-system
spec:
  eventSeverity: info
  eventSources:
  - kind: GitRepository
    name: cluster-config
  - kind: Kustomization
    name: cluster-config-cluster-config
  providerRef:
    name: gitops-connector
---
apiVersion: notification.toolkit.fluxcd.io/v1beta1
kind: Provider
metadata:
  name: gitops-connector
  namespace: flux-system
spec:
  type: generic
  address: http://gitops-connector:8080/gitopsphase
EOF
cat <<EOF | kubectl apply -f -
apiVersion: notification.toolkit.fluxcd.io/v1beta1
kind: Alert
metadata:
  name: gitops-connector
  namespace: flux-system
spec:
  eventSeverity: info
  eventSources:
  - kind: GitRepository
    name: cluster-config
  - kind: Kustomization
    name: cluster-config-cluster-config
  providerRef:
    name: gitops-connector
---
apiVersion: notification.toolkit.fluxcd.io/v1beta1
kind: Provider
metadata:
  name: gitops-connector
  namespace: flux-system
spec:
  type: generic
  address: http://gitops-connector:8080/gitopsphase
EOF
For the details on installation, refer to theGitOps Connectorrepository.
Create GitHub secrets
The next step is to create GitHub repository and environment secrets.
Use the following values for your GitHub repository secrets:
AZURE_CREDENTIALS
AZ_ACR_NAME
MANIFESTS_BRANCH
master
MANIFESTS_FOLDER
arc-cicd-cluster
MANIFESTS_REPO
https://github.com/your-organization/arc-cicd-demo-gitops
VOTE_APP_TITLE
AKS_RESOURCE_GROUP
AKS_NAME
PAT
Createaz-vote-app-devenvironment with the following secrets:
az-vote-app-dev
ENVIRONMENT_NAME
TARGET_NAMESPACE
dev
Createaz-vote-app-stageenvironment with the following secrets:
az-vote-app-stage
ENVIRONMENT_NAME
TARGET_NAMESPACE
stage
You're now ready to deploy to thedevandstageenvironments.
dev
stage
To start the CI/CD Dev workflow, change the source code. In the application repository, update values in.azure-vote/src/azure-vote-front/config_file.cfgfile and push the changes to the repository.
.azure-vote/src/azure-vote-front/config_file.cfg
The CI/CD Dev workflow:
Ensures the application change passes all automated quality checks for deployment.
Does any extra validation that couldn't be completed in the PR pipeline.
Verifies the Docker image has changed and the new image is pushed.
Publishes the artifacts (Docker image tags, Manifest templates, Utils) that are used by the following CD stages.
Deploys the application to Dev environment.Generates manifests to the GitOps repository.Creates a PR to the GitOps repository for approval.
Generates manifests to the GitOps repository.
Creates a PR to the GitOps repository for approval.
Once these steps are completed:
Find the PR created by the pipeline to the GitOps repository.
Find the PR created by the pipeline to the GitOps repository.
Verify the changes to the GitOps repository. You should see:High-level Helm template changes.Low-level Kubernetes manifests that show the underlying changes to the desired state. Flux deploys these manifests.
Verify the changes to the GitOps repository. You should see:
High-level Helm template changes.
Low-level Kubernetes manifests that show the underlying changes to the desired state. Flux deploys these manifests.
If everything looks good, approve and complete the PR.
If everything looks good, approve and complete the PR.
After a few minutes, Flux picks up the change and starts the deployment.
After a few minutes, Flux picks up the change and starts the deployment.
Monitor thegit commitstatus on the Commit history tab. Once it issucceeded, theCD Stageworkflow starts.
Monitor thegit commitstatus on the Commit history tab. Once it issucceeded, theCD Stageworkflow starts.
git commit
succeeded
CD Stage
Forward the port locally usingkubectland ensure the app works correctly using:kubectl port-forward -n dev svc/azure-vote-front 8080:80
Forward the port locally usingkubectland ensure the app works correctly using:
kubectl
kubectl port-forward -n dev svc/azure-vote-front 8080:80
kubectl port-forward -n dev svc/azure-vote-front 8080:80
View the Azure Vote app in your browser athttp://localhost:8080/.
View the Azure Vote app in your browser athttp://localhost:8080/.
http://localhost:8080/
Vote for your favorites and get ready to make some changes to the app.
Vote for your favorites and get ready to make some changes to the app.
The CD Stage workflow starts automatically once Flux successfully deploys the application to dev environment and notifies GitHub actions via GitOps Connector.
The CD Stage workflow:
Runs application smoke tests against Dev environment
Deploys the application to Stage environment.Generates manifests to the GitOps repositoryCreates a PR to the GitOps repository for approval
Generates manifests to the GitOps repository
Creates a PR to the GitOps repository for approval
Once the manifests PR to the Stage environment is merged and Flux successfully applies all the changes, the Git commit status is updated in the GitOps repository. The deployment is now complete.
For a detailed overview of all the steps and techniques implemented in the CI/CD workflows used in this tutorial, see theGitHub GitOps Flow diagram.
Clean up resources
If you're not going to continue to use this application, delete any resources with the following steps:
Delete the Azure Arc GitOps configuration connection:az k8s-configuration flux delete \
      --name cluster-config \
      --cluster-name arc-cicd-cluster \
      --resource-group myResourceGroup \
      -t connectedClusters --yes
Delete the Azure Arc GitOps configuration connection:
az k8s-configuration flux delete \
      --name cluster-config \
      --cluster-name arc-cicd-cluster \
      --resource-group myResourceGroup \
      -t connectedClusters --yes
az k8s-configuration flux delete \
      --name cluster-config \
      --cluster-name arc-cicd-cluster \
      --resource-group myResourceGroup \
      -t connectedClusters --yes
Delete GitOps Connector:helm uninstall gitops-connector -n flux-system
kubectl delete alerts.notification.toolkit.fluxcd.io gitops-connector -n flux-system
kubectl delete providers.notification.toolkit.fluxcd.io  gitops-connector -n flux-system
Delete GitOps Connector:
helm uninstall gitops-connector -n flux-system
kubectl delete alerts.notification.toolkit.fluxcd.io gitops-connector -n flux-system
kubectl delete providers.notification.toolkit.fluxcd.io  gitops-connector -n flux-system
helm uninstall gitops-connector -n flux-system
kubectl delete alerts.notification.toolkit.fluxcd.io gitops-connector -n flux-system
kubectl delete providers.notification.toolkit.fluxcd.io  gitops-connector -n flux-system
Next steps
In this tutorial, you set up a full CI/CD workflow that implements DevOps from application development through deployment. Changes to the app automatically trigger validation and deployment, gated by manual approvals.
Advance to our conceptual article to learn more about GitOps and configurations with Azure Arc-enabled Kubernetes.
Concept: CD process with GitOpsSample implementation: Explore CI/CD flow with GitOps
Feedback
Was this page helpful?
Additional resources