Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Azure Cosmos DB trigger and bindings for Azure Functions 2.x and higher overview
Article
2023-09-27
29 contributors
In this article
Version 1
Version 2 and higher
This set of articles explains how to work withAzure Cosmos DBbindings in Azure Functions 2.x and higher. Azure Functions supports trigger, input, and output bindings for Azure Cosmos DB.
Note
This reference is forAzure Functions version 2.x and higher.  For information about how to use these bindings in Functions 1.x, seeAzure Cosmos DB bindings for Azure Functions 1.x.
This binding was originally named DocumentDB. In Azure Functions version 2.x and higher, the trigger, bindings, and package are all named Azure Cosmos DB.
Supported APIs
Azure Cosmos DB bindings are only supported for use with Azure Cosmos DB for NoSQL. Support for Azure Cosmos DB for Table is provided by using theTable storage bindings, starting with extension 5.x. For all other Azure Cosmos DB APIs, you should access the database from your function by using the static client for your API, includingAzure Cosmos DB for MongoDB,Azure Cosmos DB for Cassandra, andAzure Cosmos DB for Apache Gremlin.
Install extension
The extension NuGet package you install depends on the C# mode you're using in your function app:
Isolated worker model
In-process model
Functions execute in an isolated C# worker process. To learn more, seeGuide for running C# Azure Functions in an isolated worker process.
Important
Support will end for the in-process model on November 10, 2026. We highly recommend that youmigrate your apps to the isolated worker modelfor full support.
Functions execute in the same process as the Functions host. To learn more, seeDevelop C# class library functions using Azure Functions.
In a variation of this model, Functions can be run usingC# scripting, which is supported primarily for C# portal editing. To update existing binding extensions for C# script apps running in the portal without having to republish your function app, seeUpdate your extensions.
The process for installing the extension varies depending on the extension version:
Extension 4.x+
Functions 2.x+
Extension 4.x+
Functions 2.x+
This section describes using aclass library. ForC# scripting, you would need to insteadinstall the extension bundle, version 4.x.
This version of the Azure Cosmos DB bindings extension introduces the ability toconnect using an identity instead of a secret. For a tutorial on configuring your function apps with managed identities, see thecreating a function app with identity-based connections tutorial.
This version also changes the types that you can bind to, replacing the types from the v2 SDKMicrosoft.Azure.DocumentDBwith newer types from the v3 SDKMicrosoft.Azure.Cosmos. Learn more about how these new types are different and how to migrate to them from theSDK migration guide,trigger,input binding, andoutput bindingexamples.
Microsoft.Azure.DocumentDB
This extension version is available as aNuGet package, version 4.x.
This section describes using aclass library. ForC# scripting, you would need to insteadinstall the extension bundle, version 2.x or 3.x.
Working with the trigger and bindings requires that you reference the appropriate NuGet package. Install theNuGet package, version 3.x.
This version of the Azure Cosmos DB bindings extension introduces the ability toconnect using an identity instead of a secret. For a tutorial on configuring your function apps with managed identities, see thecreating a function app with identity-based connections tutorial.
Add the extension to your project by installing theNuGet package, version 4.x.
If you're writing your application using F#, you must also configure this extension as part of the app'sstartup configuration. In the call toConfigureFunctionsWorkerDefaults()orConfigureFunctionsWebApplication(), add a delegate that takes anIFunctionsWorkerApplicationparameter. Then within the body of that delegate, callConfigureCosmosDBExtension()on the object:
ConfigureFunctionsWorkerDefaults()
ConfigureFunctionsWebApplication()
IFunctionsWorkerApplication
ConfigureCosmosDBExtension()
let hostBuilder = new HostBuilder()
hostBuilder.ConfigureFunctionsWorkerDefaults(fun (context: HostBuilderContext) (appBuilder: IFunctionsWorkerApplicationBuilder) ->
    appBuilder.ConfigureCosmosDBExtension() |> ignore
) |> ignore
let hostBuilder = new HostBuilder()
hostBuilder.ConfigureFunctionsWorkerDefaults(fun (context: HostBuilderContext) (appBuilder: IFunctionsWorkerApplicationBuilder) ->
    appBuilder.ConfigureCosmosDBExtension() |> ignore
) |> ignore
Add the extension to your project by installing theNuGet package, version 3.x.
Install bundle
The Azure Cosmos DB bindings extension is part of anextension bundle, which is specified in yourhost.jsonproject file. You may need to modify this bundle to change the version of the binding, or if bundles aren't already installed. To learn more, seeextension bundle.
Because of schema changes in the Azure Cosmos DB SDK, version 4.x of the Azure Cosmos DB extension requiresazure-functions-java-library V3.0.0for Java functions.
Bundle v4.x
Bundle v2.x and v3.x
This version of the bundle contains version 4.x of the Azure Cosmos DB bindings extension that introduces the ability toconnect using an identity instead of a secret. For a tutorial on configuring your function apps with managed identities, see thecreating a function app with identity-based connections tutorial.
You can add this version of the extension from the preview extension bundle v4 by adding or replacing the following code in yourhost.jsonfile:
host.json
{
  "version": "2.0",
  "extensionBundle": {
    "id": "Microsoft.Azure.Functions.ExtensionBundle.Preview",
    "version": "[4.0.0, 5.0.0)"
  }
}
{
  "version": "2.0",
  "extensionBundle": {
    "id": "Microsoft.Azure.Functions.ExtensionBundle.Preview",
    "version": "[4.0.0, 5.0.0)"
  }
}
To learn more, seeUpdate your extensions.
You can install this version of the extension in your function app by registering theextension bundle, version 2.x or 3.x.
{
    "version": "2.0",
    "extensionBundle": {
        "id": "Microsoft.Azure.Functions.ExtensionBundle",
        "version": "[3.3.0, 4.0.0)"
    }
}
{
    "version": "2.0",
    "extensionBundle": {
        "id": "Microsoft.Azure.Functions.ExtensionBundle",
        "version": "[3.3.0, 4.0.0)"
    }
}
Binding types
The binding types supported for .NET depend on both the extension version and C# execution mode, which can be one of the following:
Isolated worker model
In-process model
An isolated worker process class library compiled C# function runs in a process isolated from the runtime.
An in-process class library is a compiled C# function runs in the same process as the Functions runtime.
Choose a version to see binding type details for the mode and version.
Extension 4.x+
Functions 2.x+
Extension 4.x+
Functions 2.x+
The Azure Cosmos DB extension supports parameter types according to the table below.
IEnumerable<T>
T
IEnumerable<T>
T
ICollector<T>
IAsyncCollector<T>
T
1Documents containing JSON data can be deserialized into known plain-old CLR object (POCO) types.
Earlier versions of the extension exposed types from the now deprecatedMicrosoft.Azure.Documentsnamespace. Newer types fromMicrosoft.Azure.Cosmosare exclusive toextension 4.x and higher.
The isolated worker process supports parameter types according to the tables below. Support for binding to types fromMicrosoft.Azure.Cosmosis in preview.
Cosmos DB trigger
When you want the function to process a single document, the Cosmos DB trigger can bind to the following types:
When you want the function to process a batch of documents, the Cosmos DB trigger can bind to the following types:
IEnumerable<T>
T
Cosmos DB input binding
When you want the function to process a single document, the Cosmos DB input binding can bind to the following types:
When you want the function to process multiple documents from a query, the Cosmos DB input binding can bind to the following types:
IEnumerable<T>
T
1To use these types, you need to referenceMicrosoft.Azure.Functions.Worker.Extensions.CosmosDB 4.4.0 or laterand thecommon dependencies for SDK type bindings.
Cosmos DB output binding
When you want the function to write to a single document, the Cosmos DB output binding can bind to the following types:
When you want the function to write to multiple documents, the Cosmos DB output binding can bind to the following types:
T[]
T
For other output scenarios, create and use aCosmosClientwith other types fromMicrosoft.Azure.Cosmosdirectly. SeeRegister Azure clientsfor an example of using dependency injection to create a client type from the Azure SDK.
Earlier versions of extensions in the isolated worker process only support binding to JSON serializable types. Additional options are available toextension 4.x and higher.
Exceptions and return codes

host.json settings
This section describes the configuration settings available for this binding in version 2.x and later. Settings in the host.json file apply to all functions in a function app instance. The following example host.json file contains only the version 2.x+ settings for this binding. For more information about function app configuration settings in version 2.x and later, seehost.json reference for Azure Functions.
Extension 4.x+
Functions 2.x+
{
    "version": "2.0",
    "extensions": {
        "cosmosDB": {
            "connectionMode": "Gateway",
            "userAgentSuffix": "MyDesiredUserAgentStamp"
        }
    }
}
{
    "version": "2.0",
    "extensions": {
        "cosmosDB": {
            "connectionMode": "Gateway",
            "userAgentSuffix": "MyDesiredUserAgentStamp"
        }
    }
}
Gateway
Direct
Gateway
User Agent
{
    "version": "2.0",
    "extensions": {
        "cosmosDB": {
            "connectionMode": "Gateway",
            "protocol": "Https",
            "leaseOptions": {
                "leasePrefix": "prefix1"
            }
        }
    }
}
{
    "version": "2.0",
    "extensions": {
        "cosmosDB": {
            "connectionMode": "Gateway",
            "protocol": "Https",
            "leaseOptions": {
                "leasePrefix": "prefix1"
            }
        }
    }
}
Gateway
Direct
Gateway
Https
Next steps
Run a function when an Azure Cosmos DB document is created or modified (Trigger)
Read an Azure Cosmos DB document (Input binding)
Save changes to an Azure Cosmos DB document (Output binding)
Feedback
Was this page helpful?
Additional resources