Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Deploy applications consistently at scale using Flux v2 configurations and Azure Policy
Article
2025-02-14
2 contributors
In this article
You can useAzure Policyto apply Flux v2 configurations (Microsoft.KubernetesConfiguration/fluxConfigurationsresource type) at scale on Azure Arc-enabled Kubernetes (Microsoft.Kubernetes/connectedClusters) or Azure Kubernetes Service (AKS) (Microsoft.ContainerService/managedClusters) clusters. To use Azure Policy, you select a built-in policy definition andcreate a policy assignment.
Microsoft.KubernetesConfiguration/fluxConfigurations
Microsoft.Kubernetes/connectedClusters
Microsoft.ContainerService/managedClusters
Before you assign the policy that creates Flux configurations, you must ensure that the Flux extension is deployed to your clusters. You can assign a policy to ensure the extension is deployed to all clusters in the selected scope (all resource groups in a subscription or management group, or to specific resource groups). Then, when creating the policy assignment to deploy configurations, you set parameters for the Flux configuration to be applied to the clusters in that scope.
To enable separation of concerns, you can create multiple policy assignments, each with a different Flux v2 configuration pointing to a different source. For example, cluster admins can use one Git repository, while application teams use another.
Built-in policy definitions
The followingbuilt-in policy definitionsprovide support for these scenarios:
Configure installation of Flux extension on Kubernetes cluster
Configure Kubernetes clusters with Flux v2 configuration using public Git repository
Configure Kubernetes clusters with Flux v2 configuration using Git repository and SSH secrets
Configure Kubernetes clusters with Flux v2 configuration using Git repository and HTTPS secrets
Configure Kubernetes clusters with Flux v2 configuration using Git repository and HTTPS CA Certificate
Configure Kubernetes clusters with Flux v2 configuration using Git repository and local secrets
Configure Kubernetes clusters with Flux v2 configuration using Bucket source and secrets in KeyVault
Configure Kubernetes clusters with specified Flux v2 Bucket source using local secrets
To find all of the Flux v2 policy definitions, search forflux. For direct links to these policies, seeAzure policy built-in definitions for Azure Arc-enabled Kubernetes.
Prerequisites
One or more Arc-enabled Kubernetes clusters and/or AKS clusters.
Microsoft.Authorization/policyAssignments/writepermissions on the scope (subscription or resource group) to create the policy assignments.
Microsoft.Authorization/policyAssignments/write
Create a policy assignment to install the Flux extension
In order for a policy to apply Flux v2 configurations to a cluster, the Flux extension must be installed on the cluster. To ensure that the extension is installed on each of your clusters, assign theConfigure installation of Flux extension on Kubernetes clusterpolicy definition to the desired scope.
In the Azure portal, navigate toPolicy.
In the service menu, underAuthoring, selectDefinitions.
Find theConfigure installation of Flux extension on Kubernetes clusterbuilt-in policy definition, and select it.
SelectAssign policy.
Set theScopeto the management group, subscription, or resource group to which the policy assignment will apply. If you want to exclude any resources from the policy assignment scope, setExclusions.
Give the policy assignment an easily identifiableAssignment nameandDescription.
EnsurePolicy enforcementis set toEnabled.
SelectReview + create, then selectCreate.
Create a policy assignment to apply Flux configurations
Next, return to theDefinitionslist (in theAuthoringsection ofPolicy) to apply the configuration policy definition to the same scope.
Find and select theConfigure Kubernetes clusters with Flux v2 configuration using public Git repositorybuilt-in policy definition, or one of the other policy definitions that applies Flux configurations.
Find and select theConfigure Kubernetes clusters with Flux v2 configuration using public Git repositorybuilt-in policy definition, or one of the other policy definitions that applies Flux configurations.
SelectAssign policy.
SelectAssign policy.
Set theScopeto the same scope that you selected when assigning the first policy, including any exclusions.
Set theScopeto the same scope that you selected when assigning the first policy, including any exclusions.
Give the policy assignment an easily identifiableAssignment nameandDescription.
Give the policy assignment an easily identifiableAssignment nameandDescription.
EnsurePolicy enforcementis set toEnabled.
EnsurePolicy enforcementis set toEnabled.
SelectNextto open theParameterstab.
SelectNextto open theParameterstab.
Set the parameter values to be used, using the parameter names from the policy definition.For more information about parameters, seeGitOps (Flux v2) supported parameters.When creating Flux configurations via policy, you must provide a value for one (and only one) of these parameters:repositoryRefBranch,repositoryRefTag,repositoryRefSemver,repositoryRefCommit.
Set the parameter values to be used, using the parameter names from the policy definition.
For more information about parameters, seeGitOps (Flux v2) supported parameters.
When creating Flux configurations via policy, you must provide a value for one (and only one) of these parameters:repositoryRefBranch,repositoryRefTag,repositoryRefSemver,repositoryRefCommit.
repositoryRefBranch
repositoryRefTag
repositoryRefSemver
repositoryRefCommit
SelectNextto open theRemediationtask.
SelectNextto open theRemediationtask.
EnableCreate a remediation task.
EnableCreate a remediation task.
Verify thatCreate a Managed Identityis checked, and thatContributoris listed in thePermissionssection. For more information, seeQuickstart: Create a policy assignment to identify non-compliant resourcesandRemediate non-compliant resources with Azure Policy.
Verify thatCreate a Managed Identityis checked, and thatContributoris listed in thePermissionssection. For more information, seeQuickstart: Create a policy assignment to identify non-compliant resourcesandRemediate non-compliant resources with Azure Policy.
SelectReview + create, then selectCreate.
SelectReview + create, then selectCreate.
The configuration is then applied to new clusters created within the scope of policy assignment.
For existing clusters, you might need to manually run a remediation task. The policy assignment will take effect after the remediation task finishes running (typically 10 to 20 minutes).
Verify the policy assignment
In the Azure portal, navigate to an Azure Arc-enabled Kubernetes or AKS cluster that's within the scope of the policy assignment.
In the service menu, underSettings, selectGitOps. In theConfigurationslist, you should see the configuration created by the policy assignment.
In the service menu, underKubernetes resources (preview), selectNamespaces. You should see the namespace that was created by the Flux configuration.
Customize a policy
The built-in policies cover the main scenarios for using GitOps with Flux v2 in your Kubernetes clusters. However, due to the limit of 20 parameters allowed in Azure Policy assignments, not all parameters are included in the built-in policies. Also, to fit within this 20-parameter limit, only a single kustomization can be created with the built-in policies.
If you have a scenario that differs from the built-in policies, you can overcome these limitations by creatingcustom policy definitionsusing the built-in policies as templates. To work around the 20-parameter limit, create custom policies that contain only the parameters you need and hard-code the rest.
Next steps
Learn more aboutdeploying applications using GitOps with Flux v2.
Set up Azure Monitor for Containers with Azure Arc-enabled Kubernetes clusters.
Feedback
Was this page helpful?
Additional resources