Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Deploy the Azure Blob Storage on IoT Edge module to your device
Article
2024-10-16
10 contributors
In this article
Applies to:IoT Edge 1.5
Important
IoT Edge 1.5 LTS is thesupported release. IoT Edge 1.4 LTS is end of life as of November 12, 2024. If you are on an earlier release, seeUpdate IoT Edge.
There are several ways to deploy modules to an IoT Edge device and all of them work for Azure Blob Storage on IoT Edge modules. The two simplest methods are to use the Azure portal or Visual Studio Code templates.
Prerequisites
AnIoT hubin your Azure subscription.
AnIoT hubin your Azure subscription.
An IoT Edge device.If you don't have an IoT Edge device set up, you can create one in an Azure virtual machine. Follow the steps in one of the quickstart articles toCreate a virtual Linux deviceorCreate a virtual Windows device.
An IoT Edge device.
If you don't have an IoT Edge device set up, you can create one in an Azure virtual machine. Follow the steps in one of the quickstart articles toCreate a virtual Linux deviceorCreate a virtual Windows device.
Visual Studio Code.
Visual Studio Code.
Azure IoT Edgeextension. TheAzure IoT Edge tools for Visual Studio Codeextension is inmaintenance mode.
Azure IoT Edgeextension. TheAzure IoT Edge tools for Visual Studio Codeextension is inmaintenance mode.
Azure IoT Hubextension if deploying from Visual Studio Code.
Azure IoT Hubextension if deploying from Visual Studio Code.
Deploy from the Azure portal
The Azure portal guides you through creating a deployment manifest and pushing the deployment to an IoT Edge device.
Select your device
Sign in to theAzure portaland navigate to your IoT hub.
SelectDevicesunder theDevice managementmenu.
Select the target IoT Edge device from the list.
SelectSet Modules.
Configure a deployment manifest
A deployment manifest is a JSON document that describes which modules to deploy, how data flows between the modules, and desired properties of the module twins. The Azure portal has a wizard that walks you through creating a deployment manifest. It has three steps organized into tabs:Modules,Routes, andReview + Create.
In theIoT Edge Modulessection of the page, select theAdddropdown and selectIoT Edge Moduleto display theAdd IoT Edge Modulepage.
In theIoT Edge Modulessection of the page, select theAdddropdown and selectIoT Edge Moduleto display theAdd IoT Edge Modulepage.
On theSettingstab, provide a name for the module and then specify the container image URI:IoT Edge Module Name:azureblobstorageoniotedgeImage URI:mcr.microsoft.com/azure-blob-storage:latestDon't selectAdduntil you've specified values on theModule Settings,Container Create Options, andModule Twin Settingstabs as described in this procedure.ImportantAzure IoT Edge is case-sensitive when you make calls to modules, and the Storage SDK also defaults to lowercase. Changing the name to lowercase helps to ensure that your connections to the Azure Blob Storage on IoT Edge module aren't interrupted.
On theSettingstab, provide a name for the module and then specify the container image URI:
IoT Edge Module Name:azureblobstorageoniotedge
azureblobstorageoniotedge
Image URI:mcr.microsoft.com/azure-blob-storage:latest
mcr.microsoft.com/azure-blob-storage:latest

Don't selectAdduntil you've specified values on theModule Settings,Container Create Options, andModule Twin Settingstabs as described in this procedure.
Important
Azure IoT Edge is case-sensitive when you make calls to modules, and the Storage SDK also defaults to lowercase. Changing the name to lowercase helps to ensure that your connections to the Azure Blob Storage on IoT Edge module aren't interrupted.
Open theContainer Create Optionstab.
Open theContainer Create Optionstab.
Copy and paste the following JSON into the box, to provide storage account information and a mount for the storage on your device.{
  "Env":[
    "LOCAL_STORAGE_ACCOUNT_NAME=<local storage account name>",
    "LOCAL_STORAGE_ACCOUNT_KEY=<local storage account key>"
  ],
  "HostConfig":{
    "Binds":[
        "<mount>"
    ],
    "PortBindings":{
      "11002/tcp":[{"HostPort":"11002"}]
    }
  }
}
Copy and paste the following JSON into the box, to provide storage account information and a mount for the storage on your device.
{
  "Env":[
    "LOCAL_STORAGE_ACCOUNT_NAME=<local storage account name>",
    "LOCAL_STORAGE_ACCOUNT_KEY=<local storage account key>"
  ],
  "HostConfig":{
    "Binds":[
        "<mount>"
    ],
    "PortBindings":{
      "11002/tcp":[{"HostPort":"11002"}]
    }
  }
}
{
  "Env":[
    "LOCAL_STORAGE_ACCOUNT_NAME=<local storage account name>",
    "LOCAL_STORAGE_ACCOUNT_KEY=<local storage account key>"
  ],
  "HostConfig":{
    "Binds":[
        "<mount>"
    ],
    "PortBindings":{
      "11002/tcp":[{"HostPort":"11002"}]
    }
  }
}

Update the JSON that you copied intoContainer Create Optionswith the following information:Replace<local storage account name>with a name that you can remember. Account names should be 3 to 24 characters long, with lowercase letters and numbers. No spaces.Replace<local storage account key>with a 64-byte base64 key. You can generate a key with tools likeBase64 Generator. You use these credentials to access the blob storage from other modules.Replace<mount>according to your container operating system. Provide the name of avolumeor the absolute path to an existing directory on your IoT Edge device where the blob module stores its data. The storage mount maps a location on your device that you provide to a set location in the module.For Linux containers, the format is<your storage path or volume>:/blobroot. For example:Usevolume mount:my-volume:/blobrootUsebind mount:/srv/containerdata:/blobroot. Make sure to follow the steps togrant directory access to the container userImportantDo not change the second half of the storage mount value, which points to a specific location in the Blob Storage on IoT Edge module. The storage mount must always end with:/blobrootfor Linux containers.IoT Edge does not remove volumes attached to module containers. This behavior is by design, as it allows persisting the data across container instances such as upgrade scenarios. However, if these volumes are left unused, then it may lead to disk space exhaustion and subsequent system errors. If you use docker volumes in your scenario, then we encourage you to use docker tools such asdocker volume pruneanddocker volume rmto remove the unused volumes, especially for production scenarios.
Update the JSON that you copied intoContainer Create Optionswith the following information:
Replace<local storage account name>with a name that you can remember. Account names should be 3 to 24 characters long, with lowercase letters and numbers. No spaces.
Replace<local storage account name>with a name that you can remember. Account names should be 3 to 24 characters long, with lowercase letters and numbers. No spaces.
<local storage account name>
Replace<local storage account key>with a 64-byte base64 key. You can generate a key with tools likeBase64 Generator. You use these credentials to access the blob storage from other modules.
Replace<local storage account key>with a 64-byte base64 key. You can generate a key with tools likeBase64 Generator. You use these credentials to access the blob storage from other modules.
<local storage account key>
Replace<mount>according to your container operating system. Provide the name of avolumeor the absolute path to an existing directory on your IoT Edge device where the blob module stores its data. The storage mount maps a location on your device that you provide to a set location in the module.
Replace<mount>according to your container operating system. Provide the name of avolumeor the absolute path to an existing directory on your IoT Edge device where the blob module stores its data. The storage mount maps a location on your device that you provide to a set location in the module.
<mount>
For Linux containers, the format is<your storage path or volume>:/blobroot. For example:
Usevolume mount:my-volume:/blobroot
my-volume:/blobroot
Usebind mount:/srv/containerdata:/blobroot. Make sure to follow the steps togrant directory access to the container user
/srv/containerdata:/blobroot
Important
Do not change the second half of the storage mount value, which points to a specific location in the Blob Storage on IoT Edge module. The storage mount must always end with:/blobrootfor Linux containers.
Do not change the second half of the storage mount value, which points to a specific location in the Blob Storage on IoT Edge module. The storage mount must always end with:/blobrootfor Linux containers.
IoT Edge does not remove volumes attached to module containers. This behavior is by design, as it allows persisting the data across container instances such as upgrade scenarios. However, if these volumes are left unused, then it may lead to disk space exhaustion and subsequent system errors. If you use docker volumes in your scenario, then we encourage you to use docker tools such asdocker volume pruneanddocker volume rmto remove the unused volumes, especially for production scenarios.
IoT Edge does not remove volumes attached to module containers. This behavior is by design, as it allows persisting the data across container instances such as upgrade scenarios. However, if these volumes are left unused, then it may lead to disk space exhaustion and subsequent system errors. If you use docker volumes in your scenario, then we encourage you to use docker tools such asdocker volume pruneanddocker volume rmto remove the unused volumes, especially for production scenarios.
On theModule Twin Settingstab, copy the following JSON and paste it into the box.{
  "deviceAutoDeleteProperties": {
    "deleteOn": <true, false>,
    "deleteAfterMinutes": <timeToLiveInMinutes>,
    "retainWhileUploading": <true,false>
  },
  "deviceToCloudUploadProperties": {
    "uploadOn": <true, false>,
    "uploadOrder": "<NewestFirst, OldestFirst>",
    "cloudStorageConnectionString": "DefaultEndpointsProtocol=https;AccountName=<your Azure Storage Account Name>;AccountKey=<your Azure Storage Account Key>; EndpointSuffix=<your end point suffix>",
    "storageContainersForUpload": {
      "<source container name1>": {
        "target": "<your-target-container-name>"
      }
    },
    "deleteAfterUpload": <true,false>
  }
}
On theModule Twin Settingstab, copy the following JSON and paste it into the box.
{
  "deviceAutoDeleteProperties": {
    "deleteOn": <true, false>,
    "deleteAfterMinutes": <timeToLiveInMinutes>,
    "retainWhileUploading": <true,false>
  },
  "deviceToCloudUploadProperties": {
    "uploadOn": <true, false>,
    "uploadOrder": "<NewestFirst, OldestFirst>",
    "cloudStorageConnectionString": "DefaultEndpointsProtocol=https;AccountName=<your Azure Storage Account Name>;AccountKey=<your Azure Storage Account Key>; EndpointSuffix=<your end point suffix>",
    "storageContainersForUpload": {
      "<source container name1>": {
        "target": "<your-target-container-name>"
      }
    },
    "deleteAfterUpload": <true,false>
  }
}
{
  "deviceAutoDeleteProperties": {
    "deleteOn": <true, false>,
    "deleteAfterMinutes": <timeToLiveInMinutes>,
    "retainWhileUploading": <true,false>
  },
  "deviceToCloudUploadProperties": {
    "uploadOn": <true, false>,
    "uploadOrder": "<NewestFirst, OldestFirst>",
    "cloudStorageConnectionString": "DefaultEndpointsProtocol=https;AccountName=<your Azure Storage Account Name>;AccountKey=<your Azure Storage Account Key>; EndpointSuffix=<your end point suffix>",
    "storageContainersForUpload": {
      "<source container name1>": {
        "target": "<your-target-container-name>"
      }
    },
    "deleteAfterUpload": <true,false>
  }
}
Configure each property with an appropriate value, as indicated by the placeholders. If you're using the IoT Edge simulator, set the values to the related environment variables for these properties as described bydeviceToCloudUploadPropertiesanddeviceAutoDeleteProperties.TipThe name for yourtargetcontainer has naming restrictions, for example using a$prefix is unsupported. To see all restrictions, viewContainer Names.NoteIf your container target is unnamed or null withinstorageContainersForUpload, a default name will be assigned to the target. If you wanted to stop uploading to a container, it must be removed completely fromstorageContainersForUpload. For more information, see thedeviceToCloudUploadPropertiessection ofStore data at the edge with Azure Blob Storage on IoT Edge.For information on configuring deviceToCloudUploadProperties and deviceAutoDeleteProperties after your module is deployed, seeEdit the Module Twin. For more information about desired properties, seeDefine or update desired properties.
Configure each property with an appropriate value, as indicated by the placeholders. If you're using the IoT Edge simulator, set the values to the related environment variables for these properties as described bydeviceToCloudUploadPropertiesanddeviceAutoDeleteProperties.
Tip
The name for yourtargetcontainer has naming restrictions, for example using a$prefix is unsupported. To see all restrictions, viewContainer Names.
target
$
Note
If your container target is unnamed or null withinstorageContainersForUpload, a default name will be assigned to the target. If you wanted to stop uploading to a container, it must be removed completely fromstorageContainersForUpload. For more information, see thedeviceToCloudUploadPropertiessection ofStore data at the edge with Azure Blob Storage on IoT Edge.
storageContainersForUpload
storageContainersForUpload
deviceToCloudUploadProperties

For information on configuring deviceToCloudUploadProperties and deviceAutoDeleteProperties after your module is deployed, seeEdit the Module Twin. For more information about desired properties, seeDefine or update desired properties.
SelectAdd.
SelectAdd.
SelectNext: Routesto continue to the routes section.
SelectNext: Routesto continue to the routes section.
Keep the default routes and selectNext: Review + createto continue to the review section.
The review section shows you the JSON deployment manifest that was created based on your selections in the previous two sections. There are also two modules declared that you didn't add:$edgeAgentand$edgeHub. These two modules make up theIoT Edge runtimeand are required defaults in every deployment.
Review your deployment information, then selectCreate.
Verify your deployment
After you create the deployment, you return to theDevicespage of your IoT hub.
Select the IoT Edge device that you targeted with the deployment to open its details.
In the device details, verify that the blob storage module is listed as bothSpecified in deploymentandReported by device.
It might take a few moments for the module to be started on the device and then reported back to IoT Hub. Refresh the page to see an updated status.
Deploy from Visual Studio Code
Azure IoT Edge provides templates in Visual Studio Code to help you develop edge solutions. Use the following steps to create a new IoT Edge solution with a blob storage module and to configure the deployment manifest.
Important
The Azure IoT Edge Visual Studio Code extension is inmaintenance mode.
SelectView>Command Palette.
SelectView>Command Palette.
In the command palette, enter and run the commandAzure IoT Edge: New IoT Edge solution.Follow the prompts in the command palette to create your solution.FieldValueSelect folderChoose the location on your development machine for Visual Studio Code to create the solution files.Provide a solution nameEnter a descriptive name for your solution or accept the defaultEdgeSolution.Select module templateChooseExisting Module (Enter full image URL).Provide a module nameEnter an all-lowercase name for your module, likeazureblobstorageoniotedge.It's important to use a lowercase name for the Azure Blob Storage on IoT Edge module. IoT Edge is case-sensitive when referring to modules, and the Storage SDK defaults to lowercase.Provide Docker image for the moduleProvide the image URI:mcr.microsoft.com/azure-blob-storage:latestVisual Studio Code takes the information you provided, creates an IoT Edge solution, and then loads it in a new window. The solution template creates a deployment manifest template that includes your blob storage module image, but you need to configure the module's create options.
In the command palette, enter and run the commandAzure IoT Edge: New IoT Edge solution.

Follow the prompts in the command palette to create your solution.
Visual Studio Code takes the information you provided, creates an IoT Edge solution, and then loads it in a new window. The solution template creates a deployment manifest template that includes your blob storage module image, but you need to configure the module's create options.
Opendeployment.template.jsonin your new solution workspace and find themodulessection. Make the following configuration changes:Copy and paste the following code into thecreateOptionsfield for the blob storage module:```json
"Env":[
 "LOCAL_STORAGE_ACCOUNT_NAME=<local storage account name>",
 "LOCAL_STORAGE_ACCOUNT_KEY=<local storage account key>"
],
"HostConfig":{
  "Binds": ["<mount>"],
  "PortBindings":{
    "11002/tcp": [{"HostPort":"11002"}]
  }
}
Opendeployment.template.jsonin your new solution workspace and find themodulessection. Make the following configuration changes:
Copy and paste the following code into thecreateOptionsfield for the blob storage module:```json
"Env":[
 "LOCAL_STORAGE_ACCOUNT_NAME=<local storage account name>",
 "LOCAL_STORAGE_ACCOUNT_KEY=<local storage account key>"
],
"HostConfig":{
  "Binds": ["<mount>"],
  "PortBindings":{
    "11002/tcp": [{"HostPort":"11002"}]
  }
}
Copy and paste the following code into thecreateOptionsfield for the blob storage module:
createOptions
```json
"Env":[
 "LOCAL_STORAGE_ACCOUNT_NAME=<local storage account name>",
 "LOCAL_STORAGE_ACCOUNT_KEY=<local storage account key>"
],
"HostConfig":{
  "Binds": ["<mount>"],
  "PortBindings":{
    "11002/tcp": [{"HostPort":"11002"}]
  }
}
```json
"Env":[
 "LOCAL_STORAGE_ACCOUNT_NAME=<local storage account name>",
 "LOCAL_STORAGE_ACCOUNT_KEY=<local storage account key>"
],
"HostConfig":{
  "Binds": ["<mount>"],
  "PortBindings":{
    "11002/tcp": [{"HostPort":"11002"}]
  }
}

Replace<local storage account name>with a name that you can remember. Account names should be 3 to 24 characters long, with lowercase letters and numbers. No spaces.
Replace<local storage account name>with a name that you can remember. Account names should be 3 to 24 characters long, with lowercase letters and numbers. No spaces.
<local storage account name>
Replace<local storage account key>with a 64-byte base64 key. You can generate a key with tools likeBase64 Generator. You use these credentials to access the blob storage from other modules.
Replace<local storage account key>with a 64-byte base64 key. You can generate a key with tools likeBase64 Generator. You use these credentials to access the blob storage from other modules.
<local storage account key>
Replace<mount>according to your container operating system. Provide the name of avolumeor the absolute path to a directory on your IoT Edge device where you want the blob module to store its data. The storage mount maps a location on your device that you provide to a set location in the module.For Linux containers, the format is<your storage path or volume>:/blobroot. For example:Usevolume mount:my-volume:/blobrootUsebind mount:/srv/containerdata:/blobroot. Make sure to follow the steps togrant directory access to the container userImportantDo not change the second half of the storage mount value, which points to a specific location in the Blob Storage on IoT Edge module. The storage mount must always end with:/blobrootfor Linux containers.IoT Edge does not remove volumes attached to module containers. This behavior is by design, as it allows persisting the data across container instances such as upgrade scenarios. However, if these volumes are left unused, then it may lead to disk space exhaustion and subsequent system errors. If you use docker volumes in your scenario, then we encourage you to use docker tools such asdocker volume pruneanddocker volume rmto remove the unused volumes, especially for production scenarios.
Replace<mount>according to your container operating system. Provide the name of avolumeor the absolute path to a directory on your IoT Edge device where you want the blob module to store its data. The storage mount maps a location on your device that you provide to a set location in the module.
<mount>
For Linux containers, the format is<your storage path or volume>:/blobroot. For example:
Usevolume mount:my-volume:/blobroot
my-volume:/blobroot
Usebind mount:/srv/containerdata:/blobroot. Make sure to follow the steps togrant directory access to the container user
/srv/containerdata:/blobroot
Important
Do not change the second half of the storage mount value, which points to a specific location in the Blob Storage on IoT Edge module. The storage mount must always end with:/blobrootfor Linux containers.
Do not change the second half of the storage mount value, which points to a specific location in the Blob Storage on IoT Edge module. The storage mount must always end with:/blobrootfor Linux containers.
IoT Edge does not remove volumes attached to module containers. This behavior is by design, as it allows persisting the data across container instances such as upgrade scenarios. However, if these volumes are left unused, then it may lead to disk space exhaustion and subsequent system errors. If you use docker volumes in your scenario, then we encourage you to use docker tools such asdocker volume pruneanddocker volume rmto remove the unused volumes, especially for production scenarios.
IoT Edge does not remove volumes attached to module containers. This behavior is by design, as it allows persisting the data across container instances such as upgrade scenarios. However, if these volumes are left unused, then it may lead to disk space exhaustion and subsequent system errors. If you use docker volumes in your scenario, then we encourage you to use docker tools such asdocker volume pruneanddocker volume rmto remove the unused volumes, especially for production scenarios.
ConfiguredeviceToCloudUploadPropertiesanddeviceAutoDeletePropertiesfor your module by adding the following JSON to thedeployment.template.jsonfile. Configure each property with an appropriate value and save the file. If you're using the IoT Edge simulator, set the values to the related environment variables for these properties, which you can find in the explanation section ofdeviceToCloudUploadPropertiesanddeviceAutoDeleteProperties"<your azureblobstorageoniotedge module name>":{
  "properties.desired": {
    "deviceAutoDeleteProperties": {
      "deleteOn": <true, false>,
      "deleteAfterMinutes": <timeToLiveInMinutes>,
      "retainWhileUploading": <true, false>
    },
    "deviceToCloudUploadProperties": {
      "uploadOn": <true, false>,
      "uploadOrder": "<NewestFirst, OldestFirst>",
      "cloudStorageConnectionString": "DefaultEndpointsProtocol=https;AccountName=<your Azure Storage Account Name>;AccountKey=<your Azure Storage Account Key>;EndpointSuffix=<your end point suffix>",
      "storageContainersForUpload": {
        "<source container name1>": {
          "target": "<target container name1>"
        }
      },
      "deleteAfterUpload": <true, false>
    }
  }
}For information on configuring deviceToCloudUploadProperties and deviceAutoDeleteProperties after your module is deployed, seeEdit the Module Twin. For more information about container create options, restart policy, and desired status, seeEdgeAgent desired properties.
ConfiguredeviceToCloudUploadPropertiesanddeviceAutoDeletePropertiesfor your module by adding the following JSON to thedeployment.template.jsonfile. Configure each property with an appropriate value and save the file. If you're using the IoT Edge simulator, set the values to the related environment variables for these properties, which you can find in the explanation section ofdeviceToCloudUploadPropertiesanddeviceAutoDeleteProperties
"<your azureblobstorageoniotedge module name>":{
  "properties.desired": {
    "deviceAutoDeleteProperties": {
      "deleteOn": <true, false>,
      "deleteAfterMinutes": <timeToLiveInMinutes>,
      "retainWhileUploading": <true, false>
    },
    "deviceToCloudUploadProperties": {
      "uploadOn": <true, false>,
      "uploadOrder": "<NewestFirst, OldestFirst>",
      "cloudStorageConnectionString": "DefaultEndpointsProtocol=https;AccountName=<your Azure Storage Account Name>;AccountKey=<your Azure Storage Account Key>;EndpointSuffix=<your end point suffix>",
      "storageContainersForUpload": {
        "<source container name1>": {
          "target": "<target container name1>"
        }
      },
      "deleteAfterUpload": <true, false>
    }
  }
}
"<your azureblobstorageoniotedge module name>":{
  "properties.desired": {
    "deviceAutoDeleteProperties": {
      "deleteOn": <true, false>,
      "deleteAfterMinutes": <timeToLiveInMinutes>,
      "retainWhileUploading": <true, false>
    },
    "deviceToCloudUploadProperties": {
      "uploadOn": <true, false>,
      "uploadOrder": "<NewestFirst, OldestFirst>",
      "cloudStorageConnectionString": "DefaultEndpointsProtocol=https;AccountName=<your Azure Storage Account Name>;AccountKey=<your Azure Storage Account Key>;EndpointSuffix=<your end point suffix>",
      "storageContainersForUpload": {
        "<source container name1>": {
          "target": "<target container name1>"
        }
      },
      "deleteAfterUpload": <true, false>
    }
  }
}

For information on configuring deviceToCloudUploadProperties and deviceAutoDeleteProperties after your module is deployed, seeEdit the Module Twin. For more information about container create options, restart policy, and desired status, seeEdgeAgent desired properties.
Save thedeployment.template.jsonfile.
Save thedeployment.template.jsonfile.
Right-clickdeployment.template.jsonand selectGenerate IoT Edge deployment manifest.
Right-clickdeployment.template.jsonand selectGenerate IoT Edge deployment manifest.
Visual Studio Code takes the information that you provided indeployment.template.jsonand uses it to create a new deployment manifest file. The deployment manifest is created in a newconfigfolder in your solution workspace. Once you have that file, you can follow the steps inDeploy Azure IoT Edge modules with Azure CLI 2.0.
Visual Studio Code takes the information that you provided indeployment.template.jsonand uses it to create a new deployment manifest file. The deployment manifest is created in a newconfigfolder in your solution workspace. Once you have that file, you can follow the steps inDeploy Azure IoT Edge modules with Azure CLI 2.0.
Deploy multiple module instances
If you want to deploy multiple instances of the Azure Blob Storage on IoT Edge module, you need to provide a different storage path and change theHostPortvalue that the module binds to. The blob storage modules always expose port 11002 in the container, but you can declare which port it's bound to on the host.
HostPort
EditContainer Create Options(in the Azure portal) or thecreateOptionsfield (in thedeployment.template.jsonfile in Visual Studio Code) to change theHostPortvalue:
HostPort
"PortBindings":{
  "11002/tcp": [{"HostPort":"<port number>"}]
}
"PortBindings":{
  "11002/tcp": [{"HostPort":"<port number>"}]
}
When you connect to additional blob storage modules, change the endpoint to point to the updated host port.
Configure proxy support
If your organization is using a proxy server, you need to configure proxy support for the edgeAgent and edgeHub runtime modules. This process involves two tasks:
Configure the runtime daemons and the IoT Edge agent on the device.
Set the HTTPS_PROXY environment variable for modules in the deployment manifest JSON file.
This process is described inConfigure an IoT Edge device to communicate through a proxy server.
In addition, a blob storage module also requires the HTTPS_PROXY setting in the manifest deployment file. You can directly edit the deployment manifest file, or use the Azure portal.
Navigate to your IoT Hub in the Azure portal and selectDevicesunder theDevice managementmenu
Navigate to your IoT Hub in the Azure portal and selectDevicesunder theDevice managementmenu
Select the device with the module to configure.
Select the device with the module to configure.
SelectSet Modules.
SelectSet Modules.
In theIoT Edge Modulessection of the page, select the blob storage module.
In theIoT Edge Modulessection of the page, select the blob storage module.
On theUpdate IoT Edge Modulepage, select theEnvironment Variablestab.
On theUpdate IoT Edge Modulepage, select theEnvironment Variablestab.
AddHTTPS_PROXYfor theNameand your proxy URL for theValue.
AddHTTPS_PROXYfor theNameand your proxy URL for theValue.
HTTPS_PROXY

SelectUpdate, thenReview + Create.
SelectUpdate, thenReview + Create.
See the proxy is added to the module in deployment manifest and selectCreate.
See the proxy is added to the module in deployment manifest and selectCreate.
Verify the setting by selecting the module from the device details page, and on the lower part of theIoT Edge Modules Detailspage select theEnvironment Variablestab.
Verify the setting by selecting the module from the device details page, and on the lower part of theIoT Edge Modules Detailspage select theEnvironment Variablestab.

Next steps
Learn more aboutAzure Blob Storage on IoT Edge.
For more information about how deployment manifests work and how to create them, seeUnderstand how IoT Edge modules can be used, configured, and reused.
Feedback
Was this page helpful?
Additional resources