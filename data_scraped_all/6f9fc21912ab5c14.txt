Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Monitor Azure Cache for Redis
Article
2025-03-31
2 contributors
Applies to: â Azure Managed Redis, â Azure Cache for Redis
In this article
This article describes:
The types of monitoring data you can collect for this service.
Ways to analyze that data.
Note
If you're already familiar with this service and/or Azure Monitor and just want to know how to analyze monitoring data, see theAnalyzesection near the end of this article.
When you have critical applications and business processes that rely on Azure resources, you need to monitor and get alerts for your system. The Azure Monitor service collects and aggregates metrics and logs from every component of your system. Azure Monitor provides you with a view of availability, performance, and resilience, and notifies you of issues. You can use the Azure portal, PowerShell, Azure CLI, REST API, or client libraries to set up and view monitoring data.
For more information on Azure Monitor, see theAzure Monitor overview.
For more information on how to monitor Azure resources in general, seeMonitor Azure resources with Azure Monitor.
Insights
Some services in Azure have a built-in monitoring dashboard in the Azure portal that provides a starting point for monitoring your service. These dashboards are calledinsights, and you can find them in theInsights Hubof Azure Monitor in the Azure portal.
Insights for Azure Cache for Redis deliver the following experience:
At scale perspectiveof your Azure Cache for Redis resources across subscriptions. You can selectively scope to only the subscriptions and resources you want to evaluate.
Drill-down analysisof an Azure Cache for Redis resource. To diagnose problems, you can see detailed analysis of utilization, failures, capacity, and operations, or see an in-depth view of relevant information.
Customizationbuilt on Azure Monitor workbook templates. You can change what metrics are displayed and modify or set thresholds that align with your limits. You can save the changes in a custom workbook and then pin workbook charts to Azure dashboards.
Insights for Azure Cache for Redis don't require you to enable or configure anything. Azure Cache for Redis information is collected by default, and there's no extra charge to access insights.
To learn how to view, configure, and customize insights for Azure Cache for Redis, see [Azure Monitor insights for Azure Cache for Redis]/azure-cache-for-redis/cache-insights-overview.md).
Resource types
Azure uses the concept of resource types and IDs to identify everything in a subscription. Resource types are also part of the resource IDs for every resource running in Azure. For example, one resource type for a virtual machine isMicrosoft.Compute/virtualMachines. For a list of services and their associated resource types, seeResource providers.
Microsoft.Compute/virtualMachines
Azure Monitor similarly organizes core monitoring data into metrics and logs based on resource types, also callednamespaces. Different metrics and logs are available for different resource types. Your service might be associated with more than one resource type.
For more information about the resource types for Azure Cache for Redis, seeAzure Cache for Redis monitoring data reference.

Data storage
For Azure Monitor:
Metrics data is stored in the Azure Monitor metrics database.
Log data is stored in the Azure Monitor logs store. Log Analytics is a tool in the Azure portal that can query this store.
The Azure activity log is a separate store with its own interface in the Azure portal.
You can optionally route metric and activity log data to the Azure Monitor logs store. You can then use Log Analytics to query the data and correlate it with other log data.
Many services can use diagnostic settings to send metric and log data to other storage locations outside Azure Monitor. Examples include Azure Storage,hosted partner systems, andnon-Azure partner systems, by using Event Hubs.
For detailed information on how Azure Monitor stores data, seeAzure Monitor data platform.

Azure Monitor platform metrics
Azure Monitor provides platform metrics for most services. These metrics are:
Individually defined for each namespace.
Stored in the Azure Monitor time-series metrics database.
Lightweight and capable of supporting near real-time alerting.
Used to track the performance of a resource over time.
Collection:Azure Monitor collects platform metrics automatically. No configuration is required.
Routing:You can also route some platform metrics to Azure Monitor Logs / Log Analytics so you can query them with other log data. Check theDS exportsetting for each metric to see if you can use a diagnostic setting to route the metric to Azure Monitor Logs / Log Analytics.
For more information, see theMetrics diagnostic setting.
To configure diagnostic settings for a service, seeCreate diagnostic settings in Azure Monitor.
For a list of all metrics it's possible to gather for all resources in Azure Monitor, seeSupported metrics in Azure Monitor.
For a list of available metrics for Azure Cache for Redis, seeAzure Cache for Redis monitoring data reference.

Azure Monitor resource logs
Resource logs provide insight into operations that were done by an Azure resource. Logs are generated automatically, but you must route them to Azure Monitor logs to save or query them. Logs are organized in categories. A given namespace might have multiple resource log categories.
Collection:Resource logs aren't collected and stored until you create adiagnostic settingand route the logs to one or more locations. When you create a diagnostic setting, you specify which categories of logs to collect. There are multiple ways to create and maintain diagnostic settings, including the Azure portal, programmatically, and though Azure Policy.
Routing:The suggested default is to route resource logs to Azure Monitor Logs so you can query them with other log data. Other locations such as Azure Storage, Azure Event Hubs, and certain Microsoft monitoring partners are also available. For more information, seeAzure resource logsandResource log destinations.
For detailed information about collecting, storing, and routing resource logs, seeDiagnostic settings in Azure Monitor.
For a list of all available resource log categories in Azure Monitor, seeSupported resource logs in Azure Monitor.
All resource logs in Azure Monitor have the same header fields, followed by service-specific fields. The common schema is outlined inAzure Monitor resource log schema.
For the available resource log categories, their associated Log Analytics tables, and the logs schemas for Azure Cache for Redis, seeAzure Cache for Redis monitoring data reference.
Azure Cache for Redis resource logs
In Azure Cache for Redis, two options are available to log:
Cache Metrics("AllMetrics")logs metrics from Azure Monitor
Connection Logslogs connections to the cache for security and diagnostic purposes.
Cache metrics
Azure Cache for Redis emits many metrics such asServer LoadandConnections per Secondthat are useful to log. Selecting theAllMetricsoption allows these and other cache metrics to be logged. You can configure how long to retain the metrics.
Server Load
Connections per Second
Connection logs
Azure Cache for Redis uses Azure diagnostic settings to log information on client connections to your cache. Logging and analyzing this diagnostic setting helps you understand who is connecting to your caches and the timestamp of those connections. The log data could be used to identify the scope of a security breach and for security auditing purposes.
The connection logs have slightly different implementations, contents, and setup procedures for the different Azure Cache for Redis tiers. For details, see [Azure Monitor diagnostic settings]/azure-cache-for-redis/cache-monitor-diagnostic-settings.md).
Azure activity log
The activity log contains subscription-level events that track operations for each Azure resource as seen from outside that resource; for example, creating a new resource or starting a virtual machine.
Collection:Activity log events are automatically generated and collected in a separate store for viewing in the Azure portal.
Routing:You can send activity log data to Azure Monitor Logs so you can analyze it alongside other log data. Other locations such as Azure Storage, Azure Event Hubs, and certain Microsoft monitoring partners are also available. For more information on how to route the activity log, seeOverview of the Azure activity log.
Analyze monitoring data
There are many tools for analyzing monitoring data.
Azure Monitor tools
Azure Monitor supports the following basic tools:
Metrics explorer, a tool in the Azure portal that allows you to view and analyze metrics for Azure resources. For more information, seeAnalyze metrics with Azure Monitor metrics explorer.
Metrics explorer, a tool in the Azure portal that allows you to view and analyze metrics for Azure resources. For more information, seeAnalyze metrics with Azure Monitor metrics explorer.
Log Analytics, a tool in the Azure portal that allows you to query and analyze log data by using theKusto query language (KQL). For more information, seeGet started with log queries in Azure Monitor.
Log Analytics, a tool in the Azure portal that allows you to query and analyze log data by using theKusto query language (KQL). For more information, seeGet started with log queries in Azure Monitor.
Theactivity log, which has a user interface in the Azure portal for viewing and basic searches. To do more in-depth analysis, you have to route the data to Azure Monitor logs and run more complex queries in Log Analytics.
Theactivity log, which has a user interface in the Azure portal for viewing and basic searches. To do more in-depth analysis, you have to route the data to Azure Monitor logs and run more complex queries in Log Analytics.
Tools that allow more complex visualization include:
Dashboardsthat let you combine different kinds of data into a single pane in the Azure portal.
Workbooks, customizable reports that you can create in the Azure portal. Workbooks can include text, metrics, and log queries.
Grafana, an open platform tool that excels in operational dashboards. You can use Grafana to create dashboards that include data from multiple sources other than Azure Monitor.
Power BI, a business analytics service that provides interactive visualizations across various data sources. You can configure Power BI to automatically import log data from Azure Monitor to take advantage of these visualizations.

Azure Monitor export tools
You can get data out of Azure Monitor into other tools by using the following methods:
Metrics:Use theREST API for metricsto extract metric data from the Azure Monitor metrics database. The API supports filter expressions to refine the data retrieved. For more information, seeAzure Monitor REST API reference.
Metrics:Use theREST API for metricsto extract metric data from the Azure Monitor metrics database. The API supports filter expressions to refine the data retrieved. For more information, seeAzure Monitor REST API reference.
Logs:Use the REST API or theassociated client libraries.
Logs:Use the REST API or theassociated client libraries.
Another option is theworkspace data export.
Another option is theworkspace data export.
To get started with the REST API for Azure Monitor, seeAzure monitoring REST API walkthrough.
Azure Cache for Redis metrics
Metrics for Azure Cache for Redis instances are collected using the RedisINFOcommand. Metrics are collected approximately two times per minute so they can be displayed in the metrics charts and evaluated by alert rules. To learn how long data is retained and how to configure a different retention policy, seeData retention and archive in Azure Monitor Logs.
INFO
The metrics are reported using several reporting intervals, includingPast hour,Today,Past week, andCustom. Each metrics chart displays the average, minimum, and maximum values for each metric in the chart, and some metrics display a total for the reporting interval.
Each metric includes two versions: One metric measures performance for the entire cache, and for caches that use clustering. A second version of the metric, which includes(Shard 0-9)in the name, measures performance for a single shard in a cache. For example if a cache has four shards,Cache Hitsis the total number of hits for the entire cache, andCache Hits (Shard 3)measures just the hits for that shard of the cache.
(Shard 0-9)
Cache Hits
Cache Hits (Shard 3)

View cache metrics
You can view Azure Monitor metrics for Azure Cache for Redis directly from an Azure Cache for Redis resource in theAzure portal.
Select your Azure Cache for Redis instancein the portal. TheOverviewpage shows the predefinedMemory UsageandRedis Server Loadmonitoring charts. These charts are useful summaries that allow you to take a quick look at the state of your cache.

For more in-depth information, you can monitor the following useful Azure Cache for Redis metrics from theMonitoringsection of the Resource menu.

Create your own metrics
You can create your own custom chart to track the metrics you want to see. Cache metrics are reported using several reporting intervals, includingPast hour,Today,Past week, andCustom. On the left, select theMetricin theMonitoringsection. Each metrics chart displays the average, minimum, and maximum values for each metric in the chart, and some metrics display a total for the reporting interval.
Each metric includes two versions: One metric measures performance for the entire cache, and for caches that use clustering. A second version of the metric, which includes(Shard 0-9)in the name, measures performance for a single shard in a cache. For example if a cache has four shards,Cache Hitsis the total number of hits for the entire cache, andCache Hits (Shard 3)measures just the hits for that shard of the cache.
(Shard 0-9)
Cache Hits
Cache Hits (Shard 3)
In the Resource menu on the left, selectMetricsunderMonitoring. Here, you design your own chart for your cache, defining the metric type and aggregation type.

For general information about aggregation types, seeConfigure aggregation.
Under normal cache conditions,AverageandMaxare similar because only the primary node emits these metrics. In a scenario where the number of connected clients changes rapidly,Max,Average, andMinshow different values, which is also expected behavior.
The typesCountandSumcan be misleading for certain metrics, such as connected clients. Instead, it's best to look at theAveragemetrics and not theSummetrics.
Note
Even when the cache is idle with no connected active client applications, you might see some cache activity, such as connected clients, memory usage, and operations being performed. The activity is normal in the operation of the cache.
For nonclustered caches, it's best to use the metrics without the suffixInstance Based. For example, to check server load for your cache instance, use the metricServer Load.
Instance Based
In contrast, for clustered caches, use the metrics with the suffixInstance Based. Then, add a split or filter onShardId. For example, to check the server load of shard 1, use the metricServer Load (Instance Based), then apply filterShardId = 1.
Instance Based
ShardId

Kusto queries
You can analyze monitoring data in the Azure Monitor Logs / Log Analytics store by using the Kusto query language (KQL).
Important
When you selectLogsfrom the service's menu in the portal, Log Analytics opens with the query scope set to the current service. This scope means that log queries will only include data from that type of resource. If you want to run a query that includes data from other Azure services, selectLogsfrom theAzure Monitormenu. SeeLog query scope and time range in Azure Monitor Log Analyticsfor details.
For a list of common queries for any service, see theLog Analytics queries interface.
Log Analytics queries
Note
For a tutorial on how to use Azure Log Analytics, seeOverview of Log Analytics in Azure Monitor. Remember that it may take up to 90 minutes before logs show up in Log Analytics.
Here are some basic queries to use as models.
Queries for Basic, Standard, and Premium tiers
Queries for Enterprise and Enterprise Flash tiers
Azure Cache for Redis client connections per hour within the specified IP address range:
let IpRange = "10.1.1.0/24";
ACRConnectedClientList
// For particular datetime filtering, add '| where TimeGenerated between (StartTime .. EndTime)'
| where ipv4_is_in_range(ClientIp, IpRange)
| summarize ConnectionCount = sum(ClientCount) by TimeRange = bin(TimeGenerated, 1h)
let IpRange = "10.1.1.0/24";
ACRConnectedClientList
// For particular datetime filtering, add '| where TimeGenerated between (StartTime .. EndTime)'
| where ipv4_is_in_range(ClientIp, IpRange)
| summarize ConnectionCount = sum(ClientCount) by TimeRange = bin(TimeGenerated, 1h)
Unique Redis client IP addresses that have connected to the cache:
ACRConnectedClientList
| summarize count() by ClientIp
ACRConnectedClientList
| summarize count() by ClientIp
Azure Cache for Redis connections per hour within the specified IP address range:
REDConnectionEvents
// For particular datetime filtering, add '| where EventTime between (StartTime .. EndTime)'
// For particular IP range filtering, add '| where ipv4_is_in_range(ClientIp, IpRange)'
// IP range can be defined like this 'let IpRange = "10.1.1.0/24";' at the top of query.
| extend EventTime = unixtime_seconds_todatetime(EventEpochTime)
| where EventType == "new_conn"
| summarize ConnectionCount = count() by TimeRange = bin(EventTime, 1h)
REDConnectionEvents
// For particular datetime filtering, add '| where EventTime between (StartTime .. EndTime)'
// For particular IP range filtering, add '| where ipv4_is_in_range(ClientIp, IpRange)'
// IP range can be defined like this 'let IpRange = "10.1.1.0/24";' at the top of query.
| extend EventTime = unixtime_seconds_todatetime(EventEpochTime)
| where EventType == "new_conn"
| summarize ConnectionCount = count() by TimeRange = bin(EventTime, 1h)
Azure Cache for Redis authentication requests per hour within the specified IP address range:
REDConnectionEvents
| extend EventTime = unixtime_seconds_todatetime(EventEpochTime)
// For particular datetime filtering, add '| where EventTime between (StartTime .. EndTime)'
// For particular IP range filtering, add '| where ipv4_is_in_range(ClientIp, IpRange)'
// IP range can be defined like this 'let IpRange = "10.1.1.0/24";' at the top of query.
| where EventType == "auth"
| summarize AuthenticationRequestsCount = count() by TimeRange = bin(EventTime, 1h)
REDConnectionEvents
| extend EventTime = unixtime_seconds_todatetime(EventEpochTime)
// For particular datetime filtering, add '| where EventTime between (StartTime .. EndTime)'
// For particular IP range filtering, add '| where ipv4_is_in_range(ClientIp, IpRange)'
// IP range can be defined like this 'let IpRange = "10.1.1.0/24";' at the top of query.
| where EventType == "auth"
| summarize AuthenticationRequestsCount = count() by TimeRange = bin(EventTime, 1h)
Unique Redis client IP addresses that have connected to the cache:
REDConnectionEvents
// https://docs.redis.com/latest/rs/security/audit-events/#status-result-codes
// EventStatus :
// 0    AUTHENTICATION_FAILED    -    Invalid username and/or password.
// 1    AUTHENTICATION_FAILED_TOO_LONG    -    Username or password are too long.
// 2    AUTHENTICATION_NOT_REQUIRED    -    Client tried to authenticate, but authentication isnât necessary.
// 3    AUTHENTICATION_DIRECTORY_PENDING    -    Attempting to receive authentication info from the directory in async mode.
// 4    AUTHENTICATION_DIRECTORY_ERROR    -    Authentication attempt failed because there was a directory connection error.
// 5    AUTHENTICATION_SYNCER_IN_PROGRESS    -    Syncer SASL handshake. Return SASL response and wait for the next request.
// 6    AUTHENTICATION_SYNCER_FAILED    -    Syncer SASL handshake. Returned SASL response and closed the connection.
// 7    AUTHENTICATION_SYNCER_OK    -    Syncer authenticated. Returned SASL response.
// 8    AUTHENTICATION_OK    -    Client successfully authenticated.
| where EventType == "auth" and EventStatus == 2 or EventStatus == 8 or EventStatus == 7
| summarize count() by ClientIp
REDConnectionEvents
// https://docs.redis.com/latest/rs/security/audit-events/#status-result-codes
// EventStatus :
// 0    AUTHENTICATION_FAILED    -    Invalid username and/or password.
// 1    AUTHENTICATION_FAILED_TOO_LONG    -    Username or password are too long.
// 2    AUTHENTICATION_NOT_REQUIRED    -    Client tried to authenticate, but authentication isnât necessary.
// 3    AUTHENTICATION_DIRECTORY_PENDING    -    Attempting to receive authentication info from the directory in async mode.
// 4    AUTHENTICATION_DIRECTORY_ERROR    -    Authentication attempt failed because there was a directory connection error.
// 5    AUTHENTICATION_SYNCER_IN_PROGRESS    -    Syncer SASL handshake. Return SASL response and wait for the next request.
// 6    AUTHENTICATION_SYNCER_FAILED    -    Syncer SASL handshake. Returned SASL response and closed the connection.
// 7    AUTHENTICATION_SYNCER_OK    -    Syncer authenticated. Returned SASL response.
// 8    AUTHENTICATION_OK    -    Client successfully authenticated.
| where EventType == "auth" and EventStatus == 2 or EventStatus == 8 or EventStatus == 7
| summarize count() by ClientIp
Unsuccessful authentication attempts to the cache
REDConnectionEvents
// https://docs.redis.com/latest/rs/security/audit-events/#status-result-codes
// EventStatus : 
// 0    AUTHENTICATION_FAILED    -    Invalid username and/or password.
// 1    AUTHENTICATION_FAILED_TOO_LONG    -    Username or password are too long.
// 2    AUTHENTICATION_NOT_REQUIRED    -    Client tried to authenticate, but authentication isnât necessary.
// 3    AUTHENTICATION_DIRECTORY_PENDING    -    Attempting to receive authentication info from the directory in async mode.
// 4    AUTHENTICATION_DIRECTORY_ERROR    -    Authentication attempt failed because there was a directory connection error.
// 5    AUTHENTICATION_SYNCER_IN_PROGRESS    -    Syncer SASL handshake. Return SASL response and wait for the next request.
// 6    AUTHENTICATION_SYNCER_FAILED    -    Syncer SASL handshake. Returned SASL response and closed the connection.
// 7    AUTHENTICATION_SYNCER_OK    -    Syncer authenticated. Returned SASL response.
// 8    AUTHENTICATION_OK    -    Client successfully authenticated.
| where EventType == "auth" and EventStatus != 2 and EventStatus != 8 and EventStatus != 7
| project ClientIp, EventStatus, ConnectionId
REDConnectionEvents
// https://docs.redis.com/latest/rs/security/audit-events/#status-result-codes
// EventStatus : 
// 0    AUTHENTICATION_FAILED    -    Invalid username and/or password.
// 1    AUTHENTICATION_FAILED_TOO_LONG    -    Username or password are too long.
// 2    AUTHENTICATION_NOT_REQUIRED    -    Client tried to authenticate, but authentication isnât necessary.
// 3    AUTHENTICATION_DIRECTORY_PENDING    -    Attempting to receive authentication info from the directory in async mode.
// 4    AUTHENTICATION_DIRECTORY_ERROR    -    Authentication attempt failed because there was a directory connection error.
// 5    AUTHENTICATION_SYNCER_IN_PROGRESS    -    Syncer SASL handshake. Return SASL response and wait for the next request.
// 6    AUTHENTICATION_SYNCER_FAILED    -    Syncer SASL handshake. Returned SASL response and closed the connection.
// 7    AUTHENTICATION_SYNCER_OK    -    Syncer authenticated. Returned SASL response.
// 8    AUTHENTICATION_OK    -    Client successfully authenticated.
| where EventType == "auth" and EventStatus != 2 and EventStatus != 8 and EventStatus != 7
| project ClientIp, EventStatus, ConnectionId
Alerts
Azure Monitor alerts proactively notify you when specific conditions are found in your monitoring data. Alerts allow you to identify and address issues in your system before your customers notice them. For more information, seeAzure Monitor alerts.
There are many sources of common alerts for Azure resources. For examples of common alerts for Azure resources, seeSample log alert queries. TheAzure Monitor Baseline Alerts (AMBA)site provides a semi-automated method of implementing important platform metric alerts, dashboards, and guidelines. The site applies to a continually expanding subset of Azure services, including all services that are part of the Azure Landing Zone (ALZ).
The common alert schema standardizes the consumption of Azure Monitor alert notifications. For more information, seeCommon alert schema.
Types of alerts
You can alert on any metric or log data source in the Azure Monitor data platform. There are many different types of alerts depending on the services you're monitoring and the monitoring data you're collecting. Different types of alerts have various benefits and drawbacks. For more information, seeChoose the right monitoring alert type.
The following list describes the types of Azure Monitor alerts you can create:
Metric alertsevaluate resource metrics at regular intervals. Metrics can be platform metrics, custom metrics, logs from Azure Monitor converted to metrics, or Application Insights metrics. Metric alerts can also apply multiple conditions and dynamic thresholds.
Log alertsallow users to use a Log Analytics query to evaluate resource logs at a predefined frequency.
Activity log alertstrigger when a new activity log event occurs that matches defined conditions. Resource Health alerts and Service Health alerts are activity log alerts that report on your service and resource health.
Some Azure services also supportsmart detection alerts,Prometheus alerts, orrecommended alert rules.
For some services, you can monitor at scale by applying the same metric alert rule to multiple resources of the same type that exist in the same Azure region. Individual notifications are sent for each monitored resource. For supported Azure services and clouds, seeMonitor multiple resources with one alert rule.
Create alerts
You can configure to receive alerts based on metrics and activity logs. Azure Monitor allows you to configure an alert to do the following when it triggers:
Send an email notification
Call a webhook
Invoke an Azure Logic App
To configure alerts for your cache, selectAlertsunderMonitoringon the Resource menu.

Azure Cache for Redis common alert rules
The following table lists common and recommended alert rules for Azure Cache for Redis.
PING
Server Load
Cache Read
Cache Write
Advisor recommendations
For some services, if critical conditions or imminent changes occur during resource operations, an alert displays on the serviceOverviewpage in the portal. You can find more information and recommended fixes for the alert inAdvisor recommendationsunderMonitoringin the left menu. During normal operations, no advisor recommendations display.
For more information on Azure Advisor, seeAzure Advisor overview.
The following screenshot shows an advisor recommendation for an Azure Cache for Redis alert:

To upgrade your cache, selectUpgrade nowto change the pricing tier andscaleyour cache. For more information on choosing a pricing tier, seeChoosing the right tier.
Related content
SeeAzure Cache for Redis monitoring data referencefor a reference of the metrics, logs, and other important values created for Azure Cache for Redis.
SeeMonitoring Azure resources with Azure Monitorfor general details on monitoring Azure resources.
Feedback
Was this page helpful?
Additional resources