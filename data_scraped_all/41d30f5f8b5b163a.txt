Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Enable stateful mode for stateless built-in connectors in Azure Logic Apps
Article
2025-03-19
5 contributors
In this article
Applies to:Azure Logic Apps (Standard)
In Standard logic app workflows, the following built-in, service provider-based connectors are stateless, by default:
Azure Service Bus
SAP
IBM MQ
To run these connector operations in stateful mode, you must enable this capability. This how-to guide shows how to enable stateful mode for these connectors.
Prerequisites
An Azure account and subscription. If you don't have a subscription,sign up for a free Azure account.
An Azure account and subscription. If you don't have a subscription,sign up for a free Azure account.
The Standard logic app resource where you plan to create the workflow that uses the stateful mode-enabled connector operations. If you don't have this resource,create your Standard logic app resource now.
The Standard logic app resource where you plan to create the workflow that uses the stateful mode-enabled connector operations. If you don't have this resource,create your Standard logic app resource now.
An Azure virtual network with a subnet to integrate with your logic app. If you don't have these items, see the following documentation:Quickstart: Create a virtual network with the Azure portalAdd, change, or delete a virtual network subnet
An Azure virtual network with a subnet to integrate with your logic app. If you don't have these items, see the following documentation:
Quickstart: Create a virtual network with the Azure portal
Add, change, or delete a virtual network subnet
Enable stateful mode in the Azure portal
If you use network security groups in your virtual network, stateful mode requires that you openports 20,000 to 30,000.
In theAzure portal, open the Standard logic app resource where you want to enable stateful mode for these connector operations.
In theAzure portal, open the Standard logic app resource where you want to enable stateful mode for these connector operations.
To enable virtual network integration for your logic app, and add your logic app to the previously created subnet, follow these steps:On the logic app menu resource, underSettings, selectNetworking.In theOutbound traffic configurationsection, next toVirtual network integration, selectNot configured>Add virtual network integration.On theAdd virtual network integrationpane that opens, select your Azure subscription and your virtual network.From theSubnetlist, select the subnet where you want to add your logic app.When you're done, selectConnect, and return to theNetworkingpage.TheVirtual network integrationproperty is now set to the selected virtual network and subnet, for example:For general information about enabling virtual network integration with your app, seeEnable virtual network integration in Azure App Service.
To enable virtual network integration for your logic app, and add your logic app to the previously created subnet, follow these steps:
On the logic app menu resource, underSettings, selectNetworking.
On the logic app menu resource, underSettings, selectNetworking.
In theOutbound traffic configurationsection, next toVirtual network integration, selectNot configured>Add virtual network integration.
In theOutbound traffic configurationsection, next toVirtual network integration, selectNot configured>Add virtual network integration.
On theAdd virtual network integrationpane that opens, select your Azure subscription and your virtual network.
On theAdd virtual network integrationpane that opens, select your Azure subscription and your virtual network.
From theSubnetlist, select the subnet where you want to add your logic app.
From theSubnetlist, select the subnet where you want to add your logic app.
When you're done, selectConnect, and return to theNetworkingpage.TheVirtual network integrationproperty is now set to the selected virtual network and subnet, for example:
When you're done, selectConnect, and return to theNetworkingpage.
TheVirtual network integrationproperty is now set to the selected virtual network and subnet, for example:

For general information about enabling virtual network integration with your app, seeEnable virtual network integration in Azure App Service.
Next, update your logic app's underlying website configuration (<logic-app-name>.azurewebsites.net) by using either of the following tools:
Next, update your logic app's underlying website configuration (<logic-app-name>.azurewebsites.net) by using either of the following tools:
Update website configuration for logic app
After you enable virtual network integration for your logic app, you must update your logic app's underlying website configuration (<logic-app-name>.azurewebsites.net) by using one the following methods:
Azure portal(bearer token not required)
Azure Resource Management API(bearer token required)
Azure PowerShell(bearer tokennotrequired)
Azure portal
To configure virtual network private ports using the Azure portal, follow these steps:
In theAzure portal, find and open your Standard logic app resource.
In theAzure portal, find and open your Standard logic app resource.
On the logic app menu, underSettings, selectConfiguration.
On the logic app menu, underSettings, selectConfiguration.
On theConfigurationpage, selectGeneral settings.
On theConfigurationpage, selectGeneral settings.

UnderPlatform settings, in theVNet Private Portsbox, enter the ports that you want to use.
UnderPlatform settings, in theVNet Private Portsbox, enter the ports that you want to use.

Azure Resource Management API
To complete this task with theAzure Resource Management API - Update By Id, review the following requirements, syntax, and parameter values.
OAuth authorization and the bearer token are required. To get the bearer token, follow these steps
While you're signed in to the Azure portal, open your web browser's developer tools (F12).
While you're signed in to the Azure portal, open your web browser's developer tools (F12).
Get the token by sending any management request, for example, by saving a workflow in your Standard logic app.
Get the token by sending any management request, for example, by saving a workflow in your Standard logic app.
Updates a resource by using the specified resource ID:
PATCH https://management.azure.com/<resource-ID>?api-version=2021-04-01
PATCH https://management.azure.com/<resource-ID>?api-version=2021-04-01
subscriptions/<Azure-subscription-ID>/resourcegroups/<resource-group>/providers/Microsoft.Web/sites/<website-name>/config/web
{"properties": {"vnetPrivatePortsCount": "2"}}
https://management.azure.com/subscriptions/<Azure-subscription-ID>/resourcegroups/My-Standard-RG/providers/Microsoft.Web/sites/mystandardlogicapp/config/web?api-version=2021-02-01
https://management.azure.com/subscriptions/<Azure-subscription-ID>/resourcegroups/My-Standard-RG/providers/Microsoft.Web/sites/mystandardlogicapp/config/web?api-version=2021-02-01
Azure PowerShell
To complete this task with Azure PowerShell, review the following requirements, syntax, and values. This method doesn't require that you manually get the bearer token.
Set-AzContext -Subscription <Azure-subscription-ID>
$webConfig = Get-AzResource -ResourceId <resource-ID>
$webConfig.Properties.vnetPrivatePortsCount = 2
$webConfig | Set-AzResource -ResourceId <resource-ID>
Set-AzContext -Subscription <Azure-subscription-ID>
$webConfig = Get-AzResource -ResourceId <resource-ID>
$webConfig.Properties.vnetPrivatePortsCount = 2
$webConfig | Set-AzResource -ResourceId <resource-ID>
For more information, see the following documentation:
Set-AzContext
Get-AzResource
Set-AzResource
subscriptions/<Azure-subscription-ID>/resourcegroups/<resource-group>/providers/Microsoft.Web/sites/<website-name>/config/web
https://management.azure.com/subscriptions/<Azure-subscription-ID>/resourcegroups/My-Standard-RG/providers/Microsoft.Web/sites/mystandardlogicapp/config/web?api-version=2021-02-01
https://management.azure.com/subscriptions/<Azure-subscription-ID>/resourcegroups/My-Standard-RG/providers/Microsoft.Web/sites/mystandardlogicapp/config/web?api-version=2021-02-01
If you get an error that saysReserved instance count is invalid, use the following workaround:
$webConfig.Properties.preWarmedInstanceCount = $webConfig.Properties.reservedInstanceCount
$webConfig.Properties.reservedInstanceCount = $null
$webConfig | Set-AzResource -ResourceId <resource-ID>
$webConfig.Properties.preWarmedInstanceCount = $webConfig.Properties.reservedInstanceCount
$webConfig.Properties.reservedInstanceCount = $null
$webConfig | Set-AzResource -ResourceId <resource-ID>
Error example:
Set-AzResource :
{
   "Code":"BadRequest",
   "Message":"siteConfig.ReservedInstanceCount is invalid. Please use the new property siteConfig.PreWarmedInstanceCount.",
   "Target": null,
   "Details":
   [
      {
         "Message":"siteConfig.ReservedInstanceCount is invalid. Please use the new property siteConfig.PreWarmedInstanceCount."
      },
      {
         "Code":"BadRequest"
      },
      {
         "ErrorEntity":
         {
            "ExtendedCode":"51021",
            "MessageTemplate":"{0} is invalid. {1}",
            "Parameters":
            [
               "siteConfig.ReservedInstanceCount", "Please use the new property siteConfig.PreWarmedInstanceCount."
            ],
            "Code":"BadRequest",
            "Message":"siteConfig.ReservedInstanceCount is invalid. Please use the new property siteConfig.PreWarmedInstanceCount."
         }
      }
   ],
   "Innererror": null
}
Set-AzResource :
{
   "Code":"BadRequest",
   "Message":"siteConfig.ReservedInstanceCount is invalid. Please use the new property siteConfig.PreWarmedInstanceCount.",
   "Target": null,
   "Details":
   [
      {
         "Message":"siteConfig.ReservedInstanceCount is invalid. Please use the new property siteConfig.PreWarmedInstanceCount."
      },
      {
         "Code":"BadRequest"
      },
      {
         "ErrorEntity":
         {
            "ExtendedCode":"51021",
            "MessageTemplate":"{0} is invalid. {1}",
            "Parameters":
            [
               "siteConfig.ReservedInstanceCount", "Please use the new property siteConfig.PreWarmedInstanceCount."
            ],
            "Code":"BadRequest",
            "Message":"siteConfig.ReservedInstanceCount is invalid. Please use the new property siteConfig.PreWarmedInstanceCount."
         }
      }
   ],
   "Innererror": null
}
Prevent context loss during resource scale-in events
Resource scale-in events might cause the loss of context for built-in connectors with stateful mode enabled. To prevent this potential loss before such events can happen, fix the number of instances available for your logic app resource. This way, no scale-in events can happen to cause this potential context loss.
On your logic app resource menu, underSettings, selectScale out (App Service plan).
On your logic app resource menu, underSettings, selectScale out (App Service plan).
On theScale out (App Service plan)page, in theApp Scale outsection, follow these steps:SetEnforce Scale Out LimittoYes, which shows theMaximum Scale Out Limitproperty.SetAlways Ready Instancesto the same number asMaximum Scale Out LimitandMaximum Burst, which appears in thePlan Scale outsection, for example:
On theScale out (App Service plan)page, in theApp Scale outsection, follow these steps:
SetEnforce Scale Out LimittoYes, which shows theMaximum Scale Out Limitproperty.
SetEnforce Scale Out LimittoYes, which shows theMaximum Scale Out Limitproperty.
SetAlways Ready Instancesto the same number asMaximum Scale Out LimitandMaximum Burst, which appears in thePlan Scale outsection, for example:
SetAlways Ready Instancesto the same number asMaximum Scale Out LimitandMaximum Burst, which appears in thePlan Scale outsection, for example:

When you're done, on theScale outtoolbar, selectSave.
When you're done, on theScale outtoolbar, selectSave.
Next steps
Connect to Azure Service Bus
Connect to SAP
Connect to IBM MQ
Feedback
Was this page helpful?
Additional resources