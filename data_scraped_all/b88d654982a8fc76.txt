Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Tutorial: Learn common operators
Article
2024-12-04
7 contributors
In this article
Applies to: âMicrosoft FabricâAzure Data ExplorerâAzure MonitorâMicrosoft Sentinel
Kusto Query Language (KQL)is used to write queries inAzure Data Explorer,Azure Monitor Log Analytics,Azure Sentinel, and more. This tutorial is an introduction to the essential KQL operators used to access and analyze your data.
For more specific guidance on how to query logs in Azure Monitor, seeGet started with log queries.
Note
Can't find what you're looking for? This article was recently split, as follows:
Learn common operators (this article)
Use aggregation functions
Join data from multiple tables
Create geospatial visualizations
In this tutorial, you'll learn how to:
Count rows
See a sample of data
Select a subset of columns
List unique values
Filter by condition
Filter by time range
Sort results
Get the topnrows
Create calculated columns
Map values from one set to another
The examples in this tutorial use theStormEventstable, which is publicly available in thehelpcluster. To explore with your own data,create your own free cluster.
StormEvents
The examples in this tutorial use theStormEventstable, which is publicly available in theWeather analyticssample data.
StormEvents
Prerequisites
To run the following queries, you need a query environment with access to the sample data. You can use one of the following:
A Microsoft account or Microsoft Entra user identity to sign in to thehelp cluster
A Microsoft account or Microsoft Entra user identity
AFabric workspacewith a Microsoft Fabric-enabledcapacity
Count rows
Begin by using thecountoperator to find the number of storm records in theStormEventstable.
StormEvents
Run the query
StormEvents 
| count
StormEvents 
| count
Output
See a sample of data
To get a sense of the data, use thetakeoperator to view a sample of records. This operator returns a specified number of arbitrary rows from the table, which can be useful for previewing the general data structure and contents.
Run the query
StormEvents 
| take 5
StormEvents 
| take 5
The following table shows only five of the 22 returned columns. To see the full output, run the query.
Select a subset of columns
Use theprojectoperator to simplify the view and select a specific subset of columns. Usingprojectis often more efficient and easier to read than viewing all columns.
project
Run the query
StormEvents
| take 5
| project State, EventType, DamageProperty
StormEvents
| take 5
| project State, EventType, DamageProperty
Output
List unique values
It appears that there are multiple types of storms based on the results of the previous query. Use thedistinctoperator to list all of the unique storm types.
Run the query
StormEvents 
| distinct EventType
StormEvents 
| distinct EventType
There are 46 types of storms in the table. Here's a sample of 10 of them.
Sort results
To view the top floods in Texas that caused the most damage, use thesortoperator to arrange the rows in descending order based on theDamagePropertycolumn. The default sort order is descending. To sort in ascending order, specifyasc.
DamageProperty
asc
Run the query
StormEvents
| where State == 'TEXAS' and EventType == 'Flood'
| sort by DamageProperty
| project StartTime, EndTime, State, EventType, DamageProperty
StormEvents
| where State == 'TEXAS' and EventType == 'Flood'
| sort by DamageProperty
| project StartTime, EndTime, State, EventType, DamageProperty
Output
Filter by condition
Thewhereoperator filters rows of data based on certain criteria.
The following query looks for storm events in a specificStateof a specificEventType.
State
EventType
Run the query
StormEvents
| where State == 'TEXAS' and EventType == 'Flood'
| project StartTime, EndTime, State, EventType, DamageProperty
StormEvents
| where State == 'TEXAS' and EventType == 'Flood'
| project StartTime, EndTime, State, EventType, DamageProperty
There are 146 events that match these conditions. Here's a sample of 5 of them.
Filter by date and time range
Use thebetween operatorto filter data based on a specific time range.
The following query finds all storm events between August 1, 2007 and August 30, 2007, along with their states, event types, start and end times. The results are then sorted in ascending order by start time.
Run the query
StormEvents
| where StartTime between (datetime(2007-08-01 00:00:00) .. datetime(2007-08-30 23:59:59))
| project State, EventType, StartTime, EndTime
| sort by StartTime asc
StormEvents
| where StartTime between (datetime(2007-08-01 00:00:00) .. datetime(2007-08-30 23:59:59))
| project State, EventType, StartTime, EndTime
| sort by StartTime asc
Output
Get the topnrows
Thetopoperator returns the firstnrows sorted by the specified column.
The following query returns the five Texas floods that caused the most damaged property.
Run the query
StormEvents
| where State == 'TEXAS' and EventType == 'Flood'
| top 5 by DamageProperty
| project StartTime, EndTime, State, EventType, DamageProperty
StormEvents
| where State == 'TEXAS' and EventType == 'Flood'
| top 5 by DamageProperty
| project StartTime, EndTime, State, EventType, DamageProperty
Output
Note
The order of the operators is important. If you puttopbeforewherehere, you'll get different results. This is because the data is transformed by each operator in order. To learn more, seetabular expression statements.
top
where
Create calculated columns
Theprojectandextendoperators can both create calculated columns.
Useprojectto specify only the columns you want to view, and useextendto append the calculated column to the end of the table.
project
extend
The following query creates a calculatedDurationcolumn with the difference between theStartTimeandEndTime. Since we only want to view a few select columns, usingprojectis the better choice in this case.
Duration
StartTime
EndTime
project
Run the query
StormEvents
| where State == 'TEXAS' and EventType == 'Flood'
| top 5 by DamageProperty desc
| project StartTime, EndTime, Duration = EndTime - StartTime, DamageProperty
StormEvents
| where State == 'TEXAS' and EventType == 'Flood'
| top 5 by DamageProperty desc
| project StartTime, EndTime, Duration = EndTime - StartTime, DamageProperty
Output
If you take a look at the computedDurationcolumn, you may notice that the flood that caused the most damage was also the longest flood.
Duration
Useextendto view the calculatedDurationcolumn along with all of the other columns. TheDurationcolumn is added as the last column.
extend
Duration
Duration
Run the query
StormEvents
| where State == 'TEXAS' and EventType == 'Flood'
| top 5 by DamageProperty desc
| extend Duration = EndTime - StartTime
StormEvents
| where State == 'TEXAS' and EventType == 'Flood'
| top 5 by DamageProperty desc
| extend Duration = EndTime - StartTime
Output
Map values from one set to another
Static mapping is a useful technique for changing the presentation of your results. In KQL, one way to perform static mapping is by using a dynamic dictionary and accessors to map values from one set to another.
Run the query
let sourceMapping = dynamic(
  {
    "Emergency Manager" : "Public",
    "Utility Company" : "Private"
  });
StormEvents
| where Source == "Emergency Manager" or Source == "Utility Company"
| project EventId, Source, FriendlyName = sourceMapping[Source]
let sourceMapping = dynamic(
  {
    "Emergency Manager" : "Public",
    "Utility Company" : "Private"
  });
StormEvents
| where Source == "Emergency Manager" or Source == "Utility Company"
| project EventId, Source, FriendlyName = sourceMapping[Source]
Output
Next step
Now that you're familiar with the essentials of writing Kusto queries, go on to the next tutorial and learn how to use aggregation functions to gain deeper insight into your data.
Use aggregation functions
Feedback
Was this page helpful?
Additional resources