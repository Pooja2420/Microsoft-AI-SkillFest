Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Manage public content with Azure Container Registry
Article
2025-02-28
6 contributors
In this article
This article provides an overview of practices and workflows to use a local registry, such as anAzure container registryto maintain copies of public content, including container images in Docker Hub.
Risks with public content
Your environment might depend on public content, such as public container images,Helm charts,Open Policy Agent(OPA) policies, or other artifacts. For example, you might runnginxfor service routing ordocker build FROM alpineby pulling images directly from Docker Hub or another public registry.
docker build FROM alpine
Without proper controls, having dependencies on public registry content can introduce risks to your image development and deployment workflows. To mitigate the risks, keep local copies of public content when possible. For details, see theOpen Container Initiative blog.
Authenticate with Docker Hub
If you currently pull public images from Docker Hub as part of a build or deployment workflow, we recommend that youauthenticate using a Docker Hub accountinstead of making an anonymous pull request.
When you make frequent anonymous pull requests, you might see Docker errors similar toERROR: toomanyrequests: Too Many Requests.orYou have reached your pull rate limit.Authenticate to Docker Hub to prevent these errors.
ERROR: toomanyrequests: Too Many Requests.
You have reached your pull rate limit.
Note
Effective November 2, 2020,download rate limitsapply to anonymous and authenticated requests to Docker Hub from Docker Free Plan accounts. These limits are enforced by IP address and Docker ID, respectively.
To estimate your number of pull requests, keep in mind that when using cloud provider services or working behind a corporate NAT, multiple users appear to Docker Hub as a subset of IP addresses. By adding Docker paid account authentication to requests made to Docker Hub, you can avoid potential service disruptions caused by rate-limit throttling.
For details, seeDocker pricing and subscriptionsand theDocker Terms of Service.
Docker Hub access token
Docker Hub supportspersonal access tokensas alternatives to a Docker password when authenticating to Docker Hub. Tokens are recommended for automated services that pull images from Docker Hub. You can generate multiple tokens for different users or services, and revoke tokens when no longer needed.
To authenticate withdocker loginusing a token, omit the password on the command line. When prompted for a password, enter the token instead. If you enabled two-factor authentication for your Docker Hub account, you must use a personal access token when logging in from the Docker CLI.
docker login
Authenticate from Azure services
Several Azure services, including App Service and Azure Container Instances, support pulling images from public registries such as Docker Hub for container deployments. If you need to deploy an image from Docker Hub, we recommend that you configure settings to authenticate using a Docker Hub account. Examples:
App Service
Image source: Docker Hub
Repository access: Private
Login: <Docker Hub username>
Password: <Docker Hub token>
For details, seeDocker Hub authenticated pulls on App Service.
Azure Container Instances
Image source: Docker Hub or other registry
Image type: Private
Image registry login server: docker.io
Image registry user name: <Docker Hub username>
Image registry password: <Docker Hub token>
Image: docker.io/<repo name>:<tag>
Configure Artifact Cache to consume public content
The best practice for consuming public content is to combine registry authentication and the Artifact Cache feature. Use Artifact Cache to cache your container artifacts into your Azure Container Registry even in private networks. Using Artifact Cache not only protects you from registry rate limits, but also dramatically increases pull reliability when combined with Geo-replicated ACR to pull artifacts from the region closest to your Azure resource. In addition, you can use all the security features ACR offers, including private networks, firewall configuration, Service Principals, and more. For complete information on using public content with ACR Artifact Cache, see theArtifact Cachetutorial.
Import images to an Azure container registry
To manage copies of public images, create an Azure container registry if you don't already have one. Use theAzure CLI,Azure portal,Azure PowerShell, or other tools to create a registry.
Azure CLI
Azure PowerShell
As a recommended one-time step,importbase images and other public content to your Azure container registry. Theaz acr importcommand in the Azure CLI supports importing images from public registries, such as Docker Hub and Microsoft Container Registry, and from private container registries.
az acr importdoesn't require a local Docker installation. You can run it with a local installation of the Azure CLI or directly in Azure Cloud Shell. It supports images of any OS type, multi-architecture images, or OCI artifacts such as Helm charts.
az acr import
Depending on your organization's needs, you can import to a dedicated registry or a repository in a shared registry.
az acr import \
  --name myregistry \
  --source docker.io/library/hello-world:latest \
  --image hello-world:latest \
  --username <Docker Hub username> \
  --password <Docker Hub token>
az acr import \
  --name myregistry \
  --source docker.io/library/hello-world:latest \
  --image hello-world:latest \
  --username <Docker Hub username> \
  --password <Docker Hub token>
As a recommended one-time step,importbase images and other public content to your Azure container registry. TheImport-AzContainerRegistryImagecommand in the Azure PowerShell supports image import from public registries such as Docker Hub and Microsoft Container Registry and from other private container registries.
Import-AzContainerRegistryImagedoesn't require a local Docker installation. You can run it with a local installation of the Azure PowerShell or directly in Azure Cloud Shell. It supports images of any OS type, multi-architecture images, or OCI artifacts such as Helm charts.
Import-AzContainerRegistryImage
Depending on your organization's needs, you can import to a dedicated registry or a repository in a shared registry.
$Params = @{
   SourceImage       = 'library/busybox:latest' 
   ResourceGroupName = $resourceGroupName 
   RegistryName      = $RegistryName 
   SourceRegistryUri = 'docker.io'
   TargetTag         = 'busybox:latest'
}
Import-AzContainerRegistryImage @Params
$Params = @{
   SourceImage       = 'library/busybox:latest' 
   ResourceGroupName = $resourceGroupName 
   RegistryName      = $RegistryName 
   SourceRegistryUri = 'docker.io'
   TargetTag         = 'busybox:latest'
}
Import-AzContainerRegistryImage @Params
Credentials are required if the source registry isn't publicly available or the admin user is disabled.
Update image references
Developers of application images should ensure that their code references local content under their control.
Update image references to use the private registry. For example, update aFROM baseimage:v1statement in a Dockerfile toFROM myregistry.azurecr.io/mybaseimage:v1.
FROM baseimage:v1
FROM myregistry.azurecr.io/mybaseimage:v1
Configure credentials or an authentication mechanism to use the private registry. The exact mechanism depends on the tools you use to access the registry and how you manage user access.If you use a Kubernetes cluster or Azure Kubernetes Service to access the registry, see theauthentication scenarios.Learn more aboutoptions to authenticatewith an Azure container registry.
If you use a Kubernetes cluster or Azure Kubernetes Service to access the registry, see theauthentication scenarios.
Learn more aboutoptions to authenticatewith an Azure container registry.
Automate application image updates
To automate application image builds when base images are updated, set up anAzure Container Registry task. This approach expands on image import. An automated build task can track bothbase image updatesandsource code updates.
For a detailed example, seeHow to consume and maintain public content with Azure Container Registry Tasks.
Note
A single preconfigured task can automatically rebuild every application image that references a dependent base image.
Next steps
Learn more aboutACR Tasksto build, run, push, and patch container images in Azure.
SeeHow to consume and maintain public content with Azure Container Registry Tasksfor an automated gating workflow to update base images to your environment.
See theACR Tasks tutorialsfor more examples to automate image builds and updates.
Feedback
Was this page helpful?
Additional resources