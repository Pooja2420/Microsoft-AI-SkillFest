Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Create and target Azure DevOps environments
Article
2025-04-15
21 contributors
In this article
Azure DevOps Services | Azure DevOps Server 2022 | Azure DevOps Server 2020
This article explains how to create and target Azure Pipelines environments. An environment is a group ofresourcesthat you can target with deployments from a pipeline.
An environment represents a logical target where your pipeline deploys software. Common environment names include Dev, Test, QA, Staging, and Production.
Note
Azure DevOps environments aren't available in Classic pipelines. For Classic pipelines,deployment groupsprovide similar functionality.
Environments provide the following benefits:
Deployment history. Pipeline name and run details are recorded for deployments to an environment and its resources. In the context of multiple pipelines targeting the same environment or resource, you can usedeployment historyof an environment to identify the source of changes.
Deployment history. Pipeline name and run details are recorded for deployments to an environment and its resources. In the context of multiple pipelines targeting the same environment or resource, you can usedeployment historyof an environment to identify the source of changes.
Traceability of commits and work items. You can view jobs within the pipeline run that target an environment. You can also view thecommits and work itemsthat were newly deployed to the environment. Traceability also lets you track whether a code change commit or feature/bug-fix work item reached an environment.
Traceability of commits and work items. You can view jobs within the pipeline run that target an environment. You can also view thecommits and work itemsthat were newly deployed to the environment. Traceability also lets you track whether a code change commit or feature/bug-fix work item reached an environment.
Diagnostic resource health. You can validate whether the application is functioning at its desired state.
Diagnostic resource health. You can validate whether the application is functioning at its desired state.
Security. You can secure environments by specifying which users and pipelines are allowed to target an environment.
Security. You can secure environments by specifying which users and pipelines are allowed to target an environment.
An environment is a grouping of resources where the resources themselves represent actual deployment targets. Azure Pipelines environments currently support theKubernetesandvirtual machineresource types.
If a YAML pipeline refers to an environment that doesn't exist:
When the user performing the operation is known and permissions can be assigned, Azure Pipelines automatically creates the environment.
When the user performing the operation is known and permissions can be assigned, Azure Pipelines automatically creates the environment.
When Azure Pipelines doesn't have information about the user performing the operation, for example in a YAML update from an external code editor, the pipeline fails.
When Azure Pipelines doesn't have information about the user performing the operation, for example in a YAML update from an external code editor, the pipeline fails.
Prerequisites
Create an environment
To create your first environment:
Sign in to your Azure DevOps organization athttps://dev.azure.com/{yourorganization}and open your project.
Sign in to your Azure DevOps organization athttps://dev.azure.com/{yourorganization}and open your project.
https://dev.azure.com/{yourorganization}
SelectPipelines>Environments>Create environment.
SelectPipelines>Environments>Create environment.

Enter information for the environment, and then selectCreate. You can add resources to an existing environment later.
Enter information for the environment, and then selectCreate. You can add resources to an existing environment later.

Tip
Create an empty environment and reference it from deployment jobs to record deployment history against the environment.
To programmatically create and manage environments, use theAzure DevOps Environments REST API.
You can use Azure Pipelines to deploy to environments. For more information, seeBuild and deploy to Azure Kubernetes Service with Azure Pipelines.
Target an environment from a deployment job
Adeployment jobcontains steps that run sequentially. You can use a deployment job to target an entire environment group of resources, as shown in the following example YAML snippet. The pipeline runs on themyVMmachine because that resource name is specified.
myVM
- stage: deploy
  jobs:
  - deployment: DeployWeb
    displayName: deploy Web App
    pool:
      vmImage: 'Ubuntu-latest'
    # creates an environment if it doesn't exist
    environment: 
      name: 'smarthotel-dev'
      resourceName: myVM
      resourceType: virtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - script: echo Hello world
- stage: deploy
  jobs:
  - deployment: DeployWeb
    displayName: deploy Web App
    pool:
      vmImage: 'Ubuntu-latest'
    # creates an environment if it doesn't exist
    environment: 
      name: 'smarthotel-dev'
      resourceName: myVM
      resourceType: virtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - script: echo Hello world
Target a specific environment resource from a deployment job
You can scope the deployment target to a particular resource within the environment, so you can record deployment history on the specific resource. The steps of the deployment job automatically inherit the service connection details from the resource the deployment job targets.
In the following example, the value for thekubernetesServiceConnectionautomatically passes down to the task from theenvironment.resourceinput.
kubernetesServiceConnection
environment.resource
environment: 
  name: 'smarthotel-dev.bookings'
strategy: 
 runOnce:
   deploy:
     steps:
     - task: KubernetesManifest@0
       displayName: Deploy to Kubernetes cluster
       inputs:
         action: deploy
         namespace: $(k8sNamespace)
         manifests: $(System.ArtifactsDirectory)/manifests/*
         imagePullSecrets: $(imagePullSecret)
         containers: $(containerRegistry)/$(imageRepository):$(tag)
environment: 
  name: 'smarthotel-dev.bookings'
strategy: 
 runOnce:
   deploy:
     steps:
     - task: KubernetesManifest@0
       displayName: Deploy to Kubernetes cluster
       inputs:
         action: deploy
         namespace: $(k8sNamespace)
         manifests: $(System.ArtifactsDirectory)/manifests/*
         imagePullSecrets: $(imagePullSecret)
         containers: $(containerRegistry)/$(imageRepository):$(tag)
Note
If you're using a private AKS cluster, make sure you're connected to the cluster's virtual network as the API server endpoint isn't exposed through a public IP address.
Azure Pipelines recommends setting up a self-hosted agent within a VNET that has access to the cluster's virtual network. SeeOptions for connecting to the private clusterfor details.
Use manual approval checks
To control deployments to production environments, Azure Pipelines supports manual approval checks. These checks allow resource owners to control when a stage in a pipeline consumes the resource. Resource owners can define approvals and checks that must be satisfied before a stage consuming that resource can begin.
The environmentCreator,Administrator, andUserroles, but not theReaderrole, can manage approvals and checks. As an environment owner, you can manually control when a stage should run by using approval checks. For more information, seeDefine approvals and checks.
See environments in run details
Under theEnvironmentstab of the pipeline run details, you can see all environments that were targeted by deployment jobs of a pipeline run.

Note
If you're using an Azure Kubernetes Service (AKS) private cluster, theEnvironmentstab isn't available.
View deployment history
You can select theDeploymentstab in the Azure PipelinesEnvironmentssection to view deployment history.
View jobs from all pipelines that target a specific environment. For example, two microservices that each have their own pipeline can deploy to the same environment. The deployment history helps identify all pipelines that affect the environment, and also helps visualize the sequence of deployments by each pipeline.
View jobs from all pipelines that target a specific environment. For example, two microservices that each have their own pipeline can deploy to the same environment. The deployment history helps identify all pipelines that affect the environment, and also helps visualize the sequence of deployments by each pipeline.

To drill down into the job details, select theChangesandWork itemstabs on a deployment page. The tabs show lists of commits and work items that deployed to the environment. Each list item represents new items in that deployment.On theChangestab, the first listing includes all the commits to that point, and the following listings include just the changes for that job. If multiple commits are tied to the same job, there are multiple results on theChangestab.
To drill down into the job details, select theChangesandWork itemstabs on a deployment page. The tabs show lists of commits and work items that deployed to the environment. Each list item represents new items in that deployment.
On theChangestab, the first listing includes all the commits to that point, and the following listings include just the changes for that job. If multiple commits are tied to the same job, there are multiple results on theChangestab.

If multiple work items are tied to the same job, there are multiple results on theWork itemstab.
If multiple work items are tied to the same job, there are multiple results on theWork itemstab.

Security
You can secure your environments by setting user permissions and pipeline permissions.
User permissions
You can control who can create, view, use, and manage environments with user permissions. There are four roles:Creatorwith a scope of all environments,Reader,User, andAdministrator.
To add a user by using an environment'sUser permissionspanel, go to the specificEnvironmentyou want to authorize, select theMore actionsicon, and selectSecurity.
In theUser permissionspanel of theSecuritypage, selectAddand then select aUser or groupand suitableRole.
In theUser permissionspanel, you can also set the permissions that are inherited, and override the roles for your environment.
Important
When you create an environment, only the creator has the administrator role.
Pipeline permissions
Use thePipeline permissionspanel of theSecuritypage to authorize all or selected pipelines for deployment to the environment.
To remove open access on the environment or resource, selectRestrict permissioninPipeline permissions.
To remove open access on the environment or resource, selectRestrict permissioninPipeline permissions.
When permissions are restricted, you can allow specific pipelines to deploy to the environment or to a specific resource. Select+and choose from the list of pipelines to allow.
When permissions are restricted, you can allow specific pipelines to deploy to the environment or to a specific resource. Select+and choose from the list of pipelines to allow.
FAQ
Why do I get an error message when I try to create an environment?
If you see the messageAccess denied: {User} needs Create permissions to do the action, go toOrganization Settings>Usersto check if you have theStakeholderrole. TheStakeholderrole can't create environments because stakeholders don't have access to the repository.
Change your access level and then check to see if you can create environments. For more information, seeUser and permissions management FAQ.
Why do I get an error that an environment can't be found?
If you see the messageJob XXXX: Environment XXXX could not be found. The environment does not exist or has not been authorized for use., there are several possible reasons for the failure.
Runtime parametersdon't work when creating environments, because the parameters are expanded only at run time. You can usevariablesto create an environment or usetemplateContext to pass properties to templates.When you refer to an environment that doesn't exist in a YAML pipeline file, Azure Pipelines automatically creates the environment in the following cases:You use the YAML pipeline creation wizard in the Azure Pipelines web experience and refer to an environment that isn't created yet.You update the YAML file by using the Azure Pipelines web editor and save the pipeline after adding the reference to the environment.In the following cases, Azure Pipelines doesn't have information about the user creating the environment, so the pipeline fails:You update the YAML file by using another external code editor.You add a reference to an environment that doesn't exist, and then cause a manual or continuous integration pipeline to be triggered.Previously, Azure Pipelines handled these cases by adding all the project contributors to the administrator role of the environment. Any member of the project could then change these permissions and prevent others from accessing the environment. To prevent this outcome, Azure Pipelines now fails these jobs.
Runtime parametersdon't work when creating environments, because the parameters are expanded only at run time. You can usevariablesto create an environment or usetemplateContext to pass properties to templates.
When you refer to an environment that doesn't exist in a YAML pipeline file, Azure Pipelines automatically creates the environment in the following cases:
You use the YAML pipeline creation wizard in the Azure Pipelines web experience and refer to an environment that isn't created yet.
You update the YAML file by using the Azure Pipelines web editor and save the pipeline after adding the reference to the environment.
In the following cases, Azure Pipelines doesn't have information about the user creating the environment, so the pipeline fails:
You update the YAML file by using another external code editor.
You add a reference to an environment that doesn't exist, and then cause a manual or continuous integration pipeline to be triggered.
Previously, Azure Pipelines handled these cases by adding all the project contributors to the administrator role of the environment. Any member of the project could then change these permissions and prevent others from accessing the environment. To prevent this outcome, Azure Pipelines now fails these jobs.
Related articles
Define approvals and checks
Define variables
Define resources in YAML
Feedback
Was this page helpful?
Additional resources