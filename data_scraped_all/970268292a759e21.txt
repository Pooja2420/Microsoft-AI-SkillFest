Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Set up SQL database storage for Standard logic apps in single-tenant Azure Logic Apps (preview)
Article
2024-08-06
4 contributors
In this article
Applies to:Azure Logic Apps (Standard)
Important
This capability is in preview and is subject to theSupplemental Terms of Use for Microsoft Azure Previews.
When you choose theLogic App (Standard)resource type to create workflows that run in single-tenant Azure Logic Apps, App Service Environment v3, or outside Azure, you also need to create an Azure Storage account to save workflow-related artifacts, states, and runtime data. However, if you want more flexibility and control over your logic app workflows' runtime environment, throughput, scaling, performance, and management, you can use the SQL Storage Provider instead of Azure Storage for workflow-related storage transactions.
This article provides an overview for why you might want to use SQL storage as the primary storage provider for Azure Logic Apps as an alternative to Azure Storage and shows how to set up SQL for storage use either during logic app creation in the Azure portal or during logic app deployment from Visual Studio Code.
If you're new to logic apps, review the following documentation:
What is Azure Logic Apps
Single-tenant versus multitenant in Azure Logic Apps

Why use SQL
As an alternative storage option available for single-tenant Azure Logic Apps, SQL provides the following benefits:

When to use SQL
The following table describes some reasons why you might want to use SQL:
Prerequisites
An Azure account and active subscription. If you don't have one already,â¯sign up for a free account.
An Azure account and active subscription. If you don't have one already,â¯sign up for a free account.
A SQL environment to use with your logic app. However, before you set up your environment, complete the following steps:Create a SQL server instance.Supported types includeâ¯SQL Server,Azure SQL database,â¯Azure SQL Managed Instance, and others.If your SQL server is hosted on Azure using one of the supported types, make sure to set up the following permissions:InAzure portal, go to your SQL server resource.On the resource navigation menu, underSecurity, selectFirewalls and virtual networks.On the pane that opens, underAllow Azure services and resources to access this server, selectYes.Save your changes.If your SQL server isn't hosted on Azure, make sure that any firewalls or network settings on your server allow Azure services and resources to access your server and database.If you're using SQL Express for local development, connect to the default named instanceâ¯localhost\SQLExpress.Create or use an existing database.You have to have a usable database before you can set up the SQL Storage Provider.Now you can follow thesteps to set up your SQL environmentin this article.
A SQL environment to use with your logic app. However, before you set up your environment, complete the following steps:
Create a SQL server instance.Supported types includeâ¯SQL Server,Azure SQL database,â¯Azure SQL Managed Instance, and others.If your SQL server is hosted on Azure using one of the supported types, make sure to set up the following permissions:InAzure portal, go to your SQL server resource.On the resource navigation menu, underSecurity, selectFirewalls and virtual networks.On the pane that opens, underAllow Azure services and resources to access this server, selectYes.Save your changes.If your SQL server isn't hosted on Azure, make sure that any firewalls or network settings on your server allow Azure services and resources to access your server and database.If you're using SQL Express for local development, connect to the default named instanceâ¯localhost\SQLExpress.
Create a SQL server instance.
Supported types includeâ¯SQL Server,Azure SQL database,â¯Azure SQL Managed Instance, and others.
If your SQL server is hosted on Azure using one of the supported types, make sure to set up the following permissions:InAzure portal, go to your SQL server resource.On the resource navigation menu, underSecurity, selectFirewalls and virtual networks.On the pane that opens, underAllow Azure services and resources to access this server, selectYes.Save your changes.
If your SQL server is hosted on Azure using one of the supported types, make sure to set up the following permissions:
InAzure portal, go to your SQL server resource.
InAzure portal, go to your SQL server resource.
On the resource navigation menu, underSecurity, selectFirewalls and virtual networks.
On the resource navigation menu, underSecurity, selectFirewalls and virtual networks.
On the pane that opens, underAllow Azure services and resources to access this server, selectYes.
On the pane that opens, underAllow Azure services and resources to access this server, selectYes.
Save your changes.
Save your changes.
If your SQL server isn't hosted on Azure, make sure that any firewalls or network settings on your server allow Azure services and resources to access your server and database.
If your SQL server isn't hosted on Azure, make sure that any firewalls or network settings on your server allow Azure services and resources to access your server and database.
If you're using SQL Express for local development, connect to the default named instanceâ¯localhost\SQLExpress.
If you're using SQL Express for local development, connect to the default named instanceâ¯localhost\SQLExpress.
localhost\SQLExpress
Create or use an existing database.You have to have a usable database before you can set up the SQL Storage Provider.
Create or use an existing database.
You have to have a usable database before you can set up the SQL Storage Provider.
Now you can follow thesteps to set up your SQL environmentin this article.
Now you can follow thesteps to set up your SQL environmentin this article.
For local development,Visual Studio Codeinstalled on your local computer.NoteMake sure that you install thelatest version for the Azure Functions Core Toolsto ensure SQL support by using the Microsoft Installer (MSI) version, which isfunc-cli-X.X.XXXX-x*.msi.
For more information about Visual Studio Code installation requirements, reviewCreate integration workflows with single-tenant Azure Logic Apps (Standard) in Visual Studio Code.
For local development,Visual Studio Codeinstalled on your local computer.
Note
Make sure that you install thelatest version for the Azure Functions Core Toolsto ensure SQL support by using the Microsoft Installer (MSI) version, which isfunc-cli-X.X.XXXX-x*.msi.
For more information about Visual Studio Code installation requirements, reviewCreate integration workflows with single-tenant Azure Logic Apps (Standard) in Visual Studio Code.
func-cli-X.X.XXXX-x*.msi

Set up your SQL environment
Before you set up SQL Storage Provider, complete the required steps in thePrerequisites.
Before you set up SQL Storage Provider, complete the required steps in thePrerequisites.
Set up permissions for your SQL server.Currently, the SQL Storage Provider supports SQL authentication in connection strings. You can also use Windows Authentication for local development and testing. At this time, support for Microsoft Entra ID and managed identities isn't available.You must use an identity that has permissions to create and manage workflow-related artifacts in the target SQL database. For example, an administrator has all the required permissions to create and manage these artifacts. The following list describes the artifacts that the single-tenant Azure Logic Apps runtime tries to create using the SQL connection string that you provide. Make sure that the identity used in the SQL connection string has the necessary permissions to create the following artifacts:Create and delete the following schemas:â¯dt,â¯dc, andâ¯dq.Add, alter, and delete tables in these schemas.Add, alter, and delete user-defined table types in these schemas.For more information about targeted permissions, seeSQL server permissions in the Database Engine.ImportantWhen you have sensitive information, such as connection strings that include usernames and passwords,
make sure to use the most secure authentication flow available. Microsoft recommends that you
authenticate access to Azure resources with amanaged identitywhen possible, and assign a role that has the least privilege necessary.If this capability is unavailable, make sure to secure connection strings through other measures, such asAzure Key Vault, which you can use withapp settings.
You can thendirectly reference secure strings, such as connection
strings and keys. Similar to ARM templates, where you can define environment variables at deployment time, you can define
app settings within yourlogic app workflow definition.
You can then capture dynamically generated infrastructure values, such as connection endpoints, storage strings, and more.
For more information, seeApplication types for the Microsoft identity platform.
Set up permissions for your SQL server.
Currently, the SQL Storage Provider supports SQL authentication in connection strings. You can also use Windows Authentication for local development and testing. At this time, support for Microsoft Entra ID and managed identities isn't available.
You must use an identity that has permissions to create and manage workflow-related artifacts in the target SQL database. For example, an administrator has all the required permissions to create and manage these artifacts. The following list describes the artifacts that the single-tenant Azure Logic Apps runtime tries to create using the SQL connection string that you provide. Make sure that the identity used in the SQL connection string has the necessary permissions to create the following artifacts:
Create and delete the following schemas:â¯dt,â¯dc, andâ¯dq.
dt
dc
dq
Add, alter, and delete tables in these schemas.
Add, alter, and delete user-defined table types in these schemas.
For more information about targeted permissions, seeSQL server permissions in the Database Engine.
Important
When you have sensitive information, such as connection strings that include usernames and passwords,
make sure to use the most secure authentication flow available. Microsoft recommends that you
authenticate access to Azure resources with amanaged identitywhen possible, and assign a role that has the least privilege necessary.
If this capability is unavailable, make sure to secure connection strings through other measures, such asAzure Key Vault, which you can use withapp settings.
You can thendirectly reference secure strings, such as connection
strings and keys. Similar to ARM templates, where you can define environment variables at deployment time, you can define
app settings within yourlogic app workflow definition.
You can then capture dynamically generated infrastructure values, such as connection endpoints, storage strings, and more.
For more information, seeApplication types for the Microsoft identity platform.
Connect to SQL.Make sure your SQL database allows necessary access for development.If you're usingâ¯Azure SQL database, complete the following requirements:For local development and testing, explicitly allow connections from your local computer's IP address. You canâ¯set your IP firewall rules in Azure SQL Server.In theAzure portal, permit your logic app resource to access the SQL database with a provided connection string byâ¯allowing Azure services.Set up any otherâ¯SQL database network access controlsâ¯as necessary for your scenario.If you're usingâ¯Azure SQL Managed Instance, allow Azure services (logicapp) toconnect to yourâ¯SQL database through secured public endpoints.
Connect to SQL.
Make sure your SQL database allows necessary access for development.
Make sure your SQL database allows necessary access for development.
If you're usingâ¯Azure SQL database, complete the following requirements:For local development and testing, explicitly allow connections from your local computer's IP address. You canâ¯set your IP firewall rules in Azure SQL Server.In theAzure portal, permit your logic app resource to access the SQL database with a provided connection string byâ¯allowing Azure services.Set up any otherâ¯SQL database network access controlsâ¯as necessary for your scenario.
If you're usingâ¯Azure SQL database, complete the following requirements:
For local development and testing, explicitly allow connections from your local computer's IP address. You canâ¯set your IP firewall rules in Azure SQL Server.
For local development and testing, explicitly allow connections from your local computer's IP address. You canâ¯set your IP firewall rules in Azure SQL Server.
In theAzure portal, permit your logic app resource to access the SQL database with a provided connection string byâ¯allowing Azure services.
In theAzure portal, permit your logic app resource to access the SQL database with a provided connection string byâ¯allowing Azure services.
Set up any otherâ¯SQL database network access controlsâ¯as necessary for your scenario.
Set up any otherâ¯SQL database network access controlsâ¯as necessary for your scenario.
If you're usingâ¯Azure SQL Managed Instance, allow Azure services (logicapp) toconnect to yourâ¯SQL database through secured public endpoints.
If you're usingâ¯Azure SQL Managed Instance, allow Azure services (logicapp) toconnect to yourâ¯SQL database through secured public endpoints.
logicapp

Set up SQL during creation in the Azure portal
When you create your logic app using theLogic App (Standard)resource type in Azure, you can set up SQL as your storage provider.
In theAzure portal, sign in with your Azure account.
In theAzure portal, sign in with your Azure account.
In the Azure portal search box, enterlogic apps, and selectLogic apps.
In the Azure portal search box, enterlogic apps, and selectLogic apps.
logic apps

On theLogic appspage, selectAdd.
On theLogic appspage, selectAdd.
On theCreate Logic Apppage, on theBasicstab, provide the following information about your logic app resource:PropertyRequiredValueDescriptionSubscriptionYes<Azure-subscription-name>The Azure subscription to use for your logic app.Resource GroupYes<Azure-resource-group-name>The Azure resource group where you create your logic app and related resources. This resource name must be unique across regions and can contain only letters, numbers, hyphens (-), underscores (_), parentheses (()), and periods (.).This example creates a resource group namedFabrikam-Workflows-RG.TypeYesStandardThis logic app resource type runs in the single-tenant Azure Logic Apps environment and uses theStandard usage, billing, and pricing model.Logic App nameYes<logic-app-name>The name to use for your logic app. This resource name must be unique across regions and can contain only letters, numbers, hyphens (-), underscores (_), parentheses (()), and periods (.).This example creates a logic app namedFabrikam-Workflows.Note: Your logic app's name automatically gets the suffix,.azurewebsites.net, because theLogic App (Standard)resource is powered by the single-tenant Azure Logic Apps runtime, which uses the Azure Functions extensibility model and is hosted as an extension on the Azure Functions runtime. Azure Functions uses the same app naming convention.PublishYes<deployment-environment>The deployment destination for your logic app. By default,Workflowis selected for deployment to single-tenant Azure Logic Apps. Azure creates an empty logic app resource where you have to add your first workflow.Note: Currently, theDocker Containeroption requires acustom locationon an Azure Arc enabled Kubernetes cluster, which you can use withAzure Arc enabled Logic Apps (Preview). The resource locations for your logic app, custom location, and cluster must all be the same.RegionYes<Azure-region>The location to use for creating your resource group and resources. This example deploys the sample logic app to Azure and usesWest US.- If you selectedDocker Container, select your custom location.- To deploy to anASEv3resource, which must first exist, select that environment resource from theRegionlist.The following example shows theCreate Logic Apppage with theBasicstab:
On theCreate Logic Apppage, on theBasicstab, provide the following information about your logic app resource:

This example creates a resource group namedFabrikam-Workflows-RG.
Fabrikam-Workflows-RG

This example creates a logic app namedFabrikam-Workflows.
Fabrikam-Workflows

Note: Your logic app's name automatically gets the suffix,.azurewebsites.net, because theLogic App (Standard)resource is powered by the single-tenant Azure Logic Apps runtime, which uses the Azure Functions extensibility model and is hosted as an extension on the Azure Functions runtime. Azure Functions uses the same app naming convention.
.azurewebsites.net

Note: Currently, theDocker Containeroption requires acustom locationon an Azure Arc enabled Kubernetes cluster, which you can use withAzure Arc enabled Logic Apps (Preview). The resource locations for your logic app, custom location, and cluster must all be the same.
- If you selectedDocker Container, select your custom location.
- To deploy to anASEv3resource, which must first exist, select that environment resource from theRegionlist.
The following example shows theCreate Logic Apppage with theBasicstab:

When you're ready, selectNext: Hosting. On theHostingtab, provide the following information about the storage solution and hosting plan to use for your logic app.PropertyRequiredValueDescriptionStorage typeYesSQL and Azure StorageThe storage type that you want to use for workflow-related artifacts and data.- If you previously selected a custom location as your region, selectSQL.- If you previously selected an Azure region or ASEv3 location, selectSQL and Azure Storage.Note: If you're deploying to an Azure region, you still need an Azure Storage account, which is used to complete the one-time hosting of the logic app's configuration on the Azure Logic Apps platform. The workflow's definition, state, run history, and other runtime artifacts are stored in your SQL database.For deployments to a custom location that's hosted on an Azure Arc cluster, you only need SQL as your storage provider.Storage accountYes<Azure-storage-account-name>TheAzure Storage accountto use for storage transactions.This resource name must be unique across regions and have 3-24 characters with only numbers and lowercase letters. Either select an existing account or create a new account.This example creates a storage account namedfabrikamstorageacct.SQL connection stringYes<sql-connection-string>Your SQL connection string, which currently supports only SQL authentication, not OAuth or managed identity authentication.Note: Make sure that you enter a correct connection string because Azure portal won't validate this string for you.Plan typeYes<hosting-plan>The hosting plan to use for deploying your logic app.For more information, reviewHosting plans and pricing tiers.Windows PlanYes<plan-name>The plan name to use. Either select an existing plan name or provide a name for a new plan.This example uses the nameFabrikam-Service-Plan.SKU and sizeYes<pricing-tier>Thepricing tierto use for your logic app. Your selection affects the pricing, compute, memory, and storage that your logic app and workflows use.To change the default pricing tier, selectChange size. You can then select other pricing tiers, based on the workload that you need.For more information, reviewHosting plans and pricing tiers.The following example shows theCreate Logic Apppage with theHostingtab:
When you're ready, selectNext: Hosting. On theHostingtab, provide the following information about the storage solution and hosting plan to use for your logic app.

- If you previously selected a custom location as your region, selectSQL.

- If you previously selected an Azure region or ASEv3 location, selectSQL and Azure Storage.

Note: If you're deploying to an Azure region, you still need an Azure Storage account, which is used to complete the one-time hosting of the logic app's configuration on the Azure Logic Apps platform. The workflow's definition, state, run history, and other runtime artifacts are stored in your SQL database.

For deployments to a custom location that's hosted on an Azure Arc cluster, you only need SQL as your storage provider.

This resource name must be unique across regions and have 3-24 characters with only numbers and lowercase letters. Either select an existing account or create a new account.

This example creates a storage account namedfabrikamstorageacct.
fabrikamstorageacct

Note: Make sure that you enter a correct connection string because Azure portal won't validate this string for you.

For more information, reviewHosting plans and pricing tiers.

This example uses the nameFabrikam-Service-Plan.
Fabrikam-Service-Plan

To change the default pricing tier, selectChange size. You can then select other pricing tiers, based on the workload that you need.

For more information, reviewHosting plans and pricing tiers.
The following example shows theCreate Logic Apppage with theHostingtab:

Finish the remaining creation steps inCreate an integration workflow with single-tenant Azure Logic Apps (Standard) in the Azure portal.
Finish the remaining creation steps inCreate an integration workflow with single-tenant Azure Logic Apps (Standard) in the Azure portal.
When you're done, your new logic app resource and workflow is live in Azure and uses your SQL database as a storage provider.

Set up SQL for local development in Visual Studio Code
The following steps show how to set up SQL as a storage provider for local development and testing in Visual Studio Code:
Set up your development environment to work with single-tenant Azure Logic Apps.Meet theprerequisitesto work in Visual Studio Code with the Azure Logic Apps (Standard) extension.Set up Visual Studio Codeto work with the Azure Logic Apps (Standard) extension.In Visual Studio Code,connect to your Azure accountandcreate a blank logic app project.
Set up your development environment to work with single-tenant Azure Logic Apps.
Meet theprerequisitesto work in Visual Studio Code with the Azure Logic Apps (Standard) extension.
Meet theprerequisitesto work in Visual Studio Code with the Azure Logic Apps (Standard) extension.
Set up Visual Studio Codeto work with the Azure Logic Apps (Standard) extension.
Set up Visual Studio Codeto work with the Azure Logic Apps (Standard) extension.
In Visual Studio Code,connect to your Azure accountandcreate a blank logic app project.
In Visual Studio Code,connect to your Azure accountandcreate a blank logic app project.
In Visual Studio Code, open the Explorer pane, if not already open.
In Visual Studio Code, open the Explorer pane, if not already open.
In the Explorer pane, at your logic app project's root, move your mouse pointer over any blank area under all the project's files and folders, open the shortcut menu, and selectUse SQL storage for your Logic App project.
In the Explorer pane, at your logic app project's root, move your mouse pointer over any blank area under all the project's files and folders, open the shortcut menu, and selectUse SQL storage for your Logic App project.

When the prompt appears, enter your SQL connection string. You can opt to use a local SQL Express instance or any other SQL database that you have.After confirmation, Visual Studio Code creates the following setting in your project'slocal.settings.jsonfile. You can update this setting at any time.
When the prompt appears, enter your SQL connection string. You can opt to use a local SQL Express instance or any other SQL database that you have.

After confirmation, Visual Studio Code creates the following setting in your project'slocal.settings.jsonfile. You can update this setting at any time.


Set up SQL during deployment from Visual Studio Code
You can directly publish your logic app project from Visual Studio Code to Azure. This action deploys your logic app project using theâ¯Logic App (Standard)â¯resource type.
If you're publishing project as a newLogic App (Standard)resource in Azure, and you want to use SQL as a storage provider, enter your SQL connection string when you publish your app. For complete steps, followSet up SQL for new logic app deployment.
If you're publishing project as a newLogic App (Standard)resource in Azure, and you want to use SQL as a storage provider, enter your SQL connection string when you publish your app. For complete steps, followSet up SQL for new logic app deployment.
If you already set up your SQL settings, you can publish your logic app project to an already deployedLogic App (Standard)resource in Azure. This action overwrites your existing logic app.NoteLocal SQL Express won't work with logic apps deployed and hosted in Azure.
If you already set up your SQL settings, you can publish your logic app project to an already deployedLogic App (Standard)resource in Azure. This action overwrites your existing logic app.
Note
Local SQL Express won't work with logic apps deployed and hosted in Azure.

Set up SQL for new Logic App (Standard) resource deployment
On the Visual Studio Code Activity Bar, select the Azure icon.
On the Visual Studio Code Activity Bar, select the Azure icon.
On theâ¯Azure: Logic Apps (Standard)â¯pane toolbar, selectâ¯Deploy to Logic App.
On theâ¯Azure: Logic Apps (Standard)â¯pane toolbar, selectâ¯Deploy to Logic App.

If prompted, select the Azure subscription to use for your logic app deployment.
If prompted, select the Azure subscription to use for your logic app deployment.
From the list that Visual Studio Code opens, make sure to select the advanced option forCreate new Logic App (Standard) in Azure Advanced. Otherwise, you're not prompted to set up SQL.
From the list that Visual Studio Code opens, make sure to select the advanced option forCreate new Logic App (Standard) in Azure Advanced. Otherwise, you're not prompted to set up SQL.

When prompted, provide a globally unique name for your new logic app, which is the name to use for theâ¯Logic App (Standard)â¯resource. This example usesâ¯Fabrikam-Workflows-App.
When prompted, provide a globally unique name for your new logic app, which is the name to use for theâ¯Logic App (Standard)â¯resource. This example usesâ¯Fabrikam-Workflows-App.
Fabrikam-Workflows-App

Select a location for your logic app. You can also start typing to filter the list.To deploy to Azure, select the Azure region where you want to deploy. If you previously created an App Service Environment v3 (ASEv3) resource and want to deploy there, select your ASEv3.To deploy to Azure Arc enabled Logic Apps, select your previously configured custom location.The following example shows the location list filtered toWest US.
Select a location for your logic app. You can also start typing to filter the list.
To deploy to Azure, select the Azure region where you want to deploy. If you previously created an App Service Environment v3 (ASEv3) resource and want to deploy there, select your ASEv3.
To deploy to Azure, select the Azure region where you want to deploy. If you previously created an App Service Environment v3 (ASEv3) resource and want to deploy there, select your ASEv3.
To deploy to Azure Arc enabled Logic Apps, select your previously configured custom location.
To deploy to Azure Arc enabled Logic Apps, select your previously configured custom location.
The following example shows the location list filtered toWest US.

Select the hosting plan type for your new logic app.If you selected an ASEv3 as your app's location, selectApp Service Plan, and then select your ASEv3 resource. Otherwise, selectWorkflow Standard.Either create a name for your plan, or select an existing plan.This example selectsâ¯Create new App Service Planas no existing plans are available.
Select the hosting plan type for your new logic app.
If you selected an ASEv3 as your app's location, selectApp Service Plan, and then select your ASEv3 resource. Otherwise, selectWorkflow Standard.
If you selected an ASEv3 as your app's location, selectApp Service Plan, and then select your ASEv3 resource. Otherwise, selectWorkflow Standard.

Either create a name for your plan, or select an existing plan.This example selectsâ¯Create new App Service Planas no existing plans are available.
Either create a name for your plan, or select an existing plan.
This example selectsâ¯Create new App Service Planas no existing plans are available.

Provide a name for your hosting plan, and then select a pricing tier for your selected plan.For more information, reviewHosting plans and pricing tiers.
Provide a name for your hosting plan, and then select a pricing tier for your selected plan.
For more information, reviewHosting plans and pricing tiers.
When you're prompted for an Azure resource group, for optimal performance, select the same Azure resource group as your project for your deployment.NoteAlthough you can create or use a different resource group, doing so might affect performance.
If you create or choose a different resource group, but cancel after the confirmation prompt appears,
your deployment is also canceled.
When you're prompted for an Azure resource group, for optimal performance, select the same Azure resource group as your project for your deployment.
Note
Although you can create or use a different resource group, doing so might affect performance.
If you create or choose a different resource group, but cancel after the confirmation prompt appears,
your deployment is also canceled.
When you're prompted to select a storage account for your logic app, choose one of the following options:If you previously selected a custom location, select theSQLoption.If you want to deploy to Azure, select theSQL and Azure Storageoption.NoteThis option is required only for Azure deployments. In Azure, Azure Storage is required to complete
a one-time hosting of the logic app's configuration on the Azure Logic Apps platform. The ongoing
workflow state, run history, and other runtime artifacts are stored in your SQL database.For deployments to a custom location that's hosted on an Azure Arc cluster, you only
need SQL as your storage provider.
When you're prompted to select a storage account for your logic app, choose one of the following options:
If you previously selected a custom location, select theSQLoption.
If you previously selected a custom location, select theSQLoption.
If you want to deploy to Azure, select theSQL and Azure Storageoption.NoteThis option is required only for Azure deployments. In Azure, Azure Storage is required to complete
a one-time hosting of the logic app's configuration on the Azure Logic Apps platform. The ongoing
workflow state, run history, and other runtime artifacts are stored in your SQL database.For deployments to a custom location that's hosted on an Azure Arc cluster, you only
need SQL as your storage provider.
If you want to deploy to Azure, select theSQL and Azure Storageoption.
Note
This option is required only for Azure deployments. In Azure, Azure Storage is required to complete
a one-time hosting of the logic app's configuration on the Azure Logic Apps platform. The ongoing
workflow state, run history, and other runtime artifacts are stored in your SQL database.
For deployments to a custom location that's hosted on an Azure Arc cluster, you only
need SQL as your storage provider.
When prompted, selectCreate new storage accountor an existing storage account, if available.
When prompted, selectCreate new storage accountor an existing storage account, if available.

At SQL storage confirmation prompt, selectYes. At the connection string prompt, enter your SQL connection string.NoteMake sure that you enter a correct connection string because Visual Studio Code won't validate this string for you.
At SQL storage confirmation prompt, selectYes. At the connection string prompt, enter your SQL connection string.
Note
Make sure that you enter a correct connection string because Visual Studio Code won't validate this string for you.

Finish the remaining deployment steps inPublish to a new Logic App (Standard) resource.
Finish the remaining deployment steps inPublish to a new Logic App (Standard) resource.
When you're done, your new logic app resource and workflow is live in Azure and uses your SQL database as a storage provider.
Validate deployments
After you deploy yourLogic App (Standard)resource to Azure, you can check whether your settings are correct:
In theAzure portal, open your logic app resource.
In theAzure portal, open your logic app resource.
On the resource navigation menu, underSettings, selectConfiguration.
On the resource navigation menu, underSettings, selectConfiguration.
On theConfigurationpane, underApplication settings, find theWorkflows.Sql.ConnectionStringapp setting, and confirm that your SQL connection string appears and is correct.
On theConfigurationpane, underApplication settings, find theWorkflows.Sql.ConnectionStringapp setting, and confirm that your SQL connection string appears and is correct.
In your SQL environment, confirm that the SQL tables were created with the schema name starting with 'dt' and 'dq'.
In your SQL environment, confirm that the SQL tables were created with the schema name starting with 'dt' and 'dq'.
For example, the following screenshot shows the tables that the single-tenant Azure Logic Apps runtime created for a logic app resource with a single workflow:

The single-tenant Azure Logic Apps service also creates user-defined table types. For example, the following screenshot shows user-defined table types that the single-tenant Azure Logic Apps runtime created for a logic app resource with a single workflow:

Next steps
Create integration workflows with single-tenant Azure Logic Apps (Standard) in Visual Studio Code
Edit host and app settings for logic apps in single-tenant Azure Logic Apps
Feedback
Was this page helpful?
Additional resources