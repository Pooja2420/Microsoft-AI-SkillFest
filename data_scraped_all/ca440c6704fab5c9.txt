Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Quickstart: Create a Java function in Azure from the command line
Article
2023-08-24
13 contributors
In this article
C#
Java
JavaScript
PowerShell
Python
TypeScript
In this article, you use command-line tools to create a Java function that responds to HTTP requests. After testing the code locally, you deploy it to the serverless environment of Azure Functions.
If Maven isn't your preferred development tool, check out our similar tutorials for Java developers:
Gradle
IntelliJ IDEA
Visual Studio Code
Completing this quickstart incurs a small cost of a few USD cents or less in your Azure account.
Configure your local environment
Before you begin, you must have the following:
An Azure account with an active subscription.Create an account for free.
An Azure account with an active subscription.Create an account for free.
TheAzure CLIversion 2.4 or later.
TheAzure CLIversion 2.4 or later.
TheJava Developer Kit, version 8, 11, 17, 21(Linux only). TheJAVA_HOMEenvironment variable must be set to the install location of the correct version of the JDK.
TheJava Developer Kit, version 8, 11, 17, 21(Linux only). TheJAVA_HOMEenvironment variable must be set to the install location of the correct version of the JDK.
JAVA_HOME
Apache Maven, version 3.0 or above.
Apache Maven, version 3.0 or above.
Install the Azure Functions Core Tools
The recommended way to install Core Tools depends on the operating system of your local development computer.
Windows
macOS
Linux
The following steps use a Windows installer (MSI) to install Core Tools v4.x. For more information about other package-based installers, see theCore Tools readme.
Download and run the Core Tools installer, based on your version of Windows:
v4.x - Windows 64-bit(Recommended.Visual Studio Code debuggingrequires 64-bit.)
v4.x - Windows 32-bit
If you previously used Windows installer (MSI) to install Core Tools on Windows, you should uninstall the old version from Add Remove Programs before installing the latest version.
The following steps use Homebrew to install the Core Tools on macOS.
InstallHomebrew, if it's not already installed.
InstallHomebrew, if it's not already installed.
Install the Core Tools package:brew tap azure/functions
brew install azure-functions-core-tools@4
# if upgrading on a machine that has 2.x or 3.x installed:
brew link --overwrite azure-functions-core-tools@4
Install the Core Tools package:
brew tap azure/functions
brew install azure-functions-core-tools@4
# if upgrading on a machine that has 2.x or 3.x installed:
brew link --overwrite azure-functions-core-tools@4
brew tap azure/functions
brew install azure-functions-core-tools@4
# if upgrading on a machine that has 2.x or 3.x installed:
brew link --overwrite azure-functions-core-tools@4
The following steps useAPTto install Core Tools on your Ubuntu/Debian Linux distribution. For other Linux distributions, see theCore Tools readme.
Install the Microsoft package repository GPG key, to validate package integrity:curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg
sudo mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg
Install the Microsoft package repository GPG key, to validate package integrity:
curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg
sudo mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg
curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg
sudo mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg
Set up the APT source list before doing an APT update.Ubuntusudo sh -c 'echo "deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-ubuntu-$(lsb_release -cs 2>/dev/null)-prod $(lsb_release -cs 2>/dev/null) main" > /etc/apt/sources.list.d/dotnetdev.list'Debiansudo sh -c 'echo "deb [arch=amd64] https://packages.microsoft.com/debian/$(lsb_release -rs 2>/dev/null | cut -d'.' -f 1)/prod $(lsb_release -cs 2>/dev/null) main" > /etc/apt/sources.list.d/dotnetdev.list'
Set up the APT source list before doing an APT update.
sudo sh -c 'echo "deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-ubuntu-$(lsb_release -cs 2>/dev/null)-prod $(lsb_release -cs 2>/dev/null) main" > /etc/apt/sources.list.d/dotnetdev.list'
sudo sh -c 'echo "deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-ubuntu-$(lsb_release -cs 2>/dev/null)-prod $(lsb_release -cs 2>/dev/null) main" > /etc/apt/sources.list.d/dotnetdev.list'
sudo sh -c 'echo "deb [arch=amd64] https://packages.microsoft.com/debian/$(lsb_release -rs 2>/dev/null | cut -d'.' -f 1)/prod $(lsb_release -cs 2>/dev/null) main" > /etc/apt/sources.list.d/dotnetdev.list'
sudo sh -c 'echo "deb [arch=amd64] https://packages.microsoft.com/debian/$(lsb_release -rs 2>/dev/null | cut -d'.' -f 1)/prod $(lsb_release -cs 2>/dev/null) main" > /etc/apt/sources.list.d/dotnetdev.list'
Check the/etc/apt/sources.list.d/dotnetdev.listfile for one of the appropriate Linux version strings in the following table:Linux distributionVersionDebian 12bookwormDebian 11bullseyeDebian 10busterDebian 9stretchUbuntu 24.04nobleUbuntu 22.04jammyUbuntu 20.04focalUbuntu 19.04discoUbuntu 18.10cosmicUbuntu 18.04bionicUbuntu 17.04zestyUbuntu 16.04/Linux Mint 18xenial
Check the/etc/apt/sources.list.d/dotnetdev.listfile for one of the appropriate Linux version strings in the following table:
/etc/apt/sources.list.d/dotnetdev.list
bookworm
bullseye
buster
stretch
noble
jammy
focal
disco
cosmic
bionic
zesty
xenial
Start the APT source update:sudo apt-get update
Start the APT source update:
sudo apt-get update
sudo apt-get update
Install the Core Tools package:sudo apt-get install azure-functions-core-tools-4
Install the Core Tools package:
sudo apt-get install azure-functions-core-tools-4
sudo apt-get install azure-functions-core-tools-4
Create a local function project
In Azure Functions, a function project is a container for one or more individual functions that each responds to a specific trigger. All functions in a project share the same local and hosting configurations. In this section, you create a function project that contains a single function.
In an empty folder, run the following command to generate the Functions project from aMaven archetype.BashPowerShellCmdmvn archetype:generate -DarchetypeGroupId=com.microsoft.azure -DarchetypeArtifactId=azure-functions-archetype -DjavaVersion=8mvn archetype:generate "-DarchetypeGroupId=com.microsoft.azure" "-DarchetypeArtifactId=azure-functions-archetype" "-DjavaVersion=8"mvn archetype:generate "-DarchetypeGroupId=com.microsoft.azure" "-DarchetypeArtifactId=azure-functions-archetype" "-DjavaVersion=8"ImportantUse-DjavaVersion=11if you want your functions to run on Java 11. To learn more, seeJava versions.TheJAVA_HOMEenvironment variable must be set to the install location of the correct version of the JDK to complete this article.
In an empty folder, run the following command to generate the Functions project from aMaven archetype.
Bash
PowerShell
Cmd
mvn archetype:generate -DarchetypeGroupId=com.microsoft.azure -DarchetypeArtifactId=azure-functions-archetype -DjavaVersion=8
mvn archetype:generate -DarchetypeGroupId=com.microsoft.azure -DarchetypeArtifactId=azure-functions-archetype -DjavaVersion=8
mvn archetype:generate "-DarchetypeGroupId=com.microsoft.azure" "-DarchetypeArtifactId=azure-functions-archetype" "-DjavaVersion=8"
mvn archetype:generate "-DarchetypeGroupId=com.microsoft.azure" "-DarchetypeArtifactId=azure-functions-archetype" "-DjavaVersion=8"
mvn archetype:generate "-DarchetypeGroupId=com.microsoft.azure" "-DarchetypeArtifactId=azure-functions-archetype" "-DjavaVersion=8"
mvn archetype:generate "-DarchetypeGroupId=com.microsoft.azure" "-DarchetypeArtifactId=azure-functions-archetype" "-DjavaVersion=8"
Important
Use-DjavaVersion=11if you want your functions to run on Java 11. To learn more, seeJava versions.
-DjavaVersion=11
TheJAVA_HOMEenvironment variable must be set to the install location of the correct version of the JDK to complete this article.
JAVA_HOME
Maven asks you for values needed to finish generating the project on deployment.Provide the following values when prompted:PromptValueDescriptiongroupIdcom.fabrikamA value that uniquely identifies your project across all projects, following thepackage naming rulesfor Java.artifactIdfabrikam-functionsA value that is the name of the jar, without a version number.version1.0-SNAPSHOTChoose the default value.packagecom.fabrikamA value that is the Java package for the generated function code. Use the default.
Maven asks you for values needed to finish generating the project on deployment.Provide the following values when prompted:
com.fabrikam
fabrikam-functions
1.0-SNAPSHOT
com.fabrikam
TypeYor press Enter to confirm.Maven creates the project files in a new folder with a name ofartifactId, which in this example isfabrikam-functions.
TypeYor press Enter to confirm.
Y
Maven creates the project files in a new folder with a name ofartifactId, which in this example isfabrikam-functions.
fabrikam-functions
Navigate into the project folder:cd fabrikam-functionsThis folder contains various files for the project, including configurations files namedlocal.settings.jsonandhost.json. Becauselocal.settings.jsoncan contain secrets downloaded from Azure, the file is excluded from source control by default in the.gitignorefile.
Navigate into the project folder:
cd fabrikam-functions
cd fabrikam-functions
This folder contains various files for the project, including configurations files namedlocal.settings.jsonandhost.json. Becauselocal.settings.jsoncan contain secrets downloaded from Azure, the file is excluded from source control by default in the.gitignorefile.
(Optional) Examine the file contents
If desired, you can skip toRun the function locallyand examine the file contents later.
Function.javacontains arunmethod that receives request data in therequestvariable is anHttpRequestMessagethat's decorated with theHttpTriggerannotation, which defines the trigger behavior.
run
request
package com.fabrikam;

import com.microsoft.azure.functions.ExecutionContext;
import com.microsoft.azure.functions.HttpMethod;
import com.microsoft.azure.functions.HttpRequestMessage;
import com.microsoft.azure.functions.HttpResponseMessage;
import com.microsoft.azure.functions.HttpStatus;
import com.microsoft.azure.functions.annotation.AuthorizationLevel;
import com.microsoft.azure.functions.annotation.FunctionName;
import com.microsoft.azure.functions.annotation.HttpTrigger;

import java.util.Optional;

/**
 * Azure Functions with HTTP Trigger.
 */
public class Function {
    /**
     * This function listens at endpoint "/api/HttpExample". Two ways to invoke it using "curl" command in bash:
     * 1. curl -d "HTTP Body" {your host}/api/HttpExample
     * 2. curl "{your host}/api/HttpExample?name=HTTP%20Query"
     */
    @FunctionName("HttpExample")
    public HttpResponseMessage run(
            @HttpTrigger(
                name = "req",
                methods = {HttpMethod.GET, HttpMethod.POST},
                authLevel = AuthorizationLevel.ANONYMOUS)
                HttpRequestMessage<Optional<String>> request,
            final ExecutionContext context) {
        context.getLogger().info("Java HTTP trigger processed a request.");

        // Parse query parameter
        final String query = request.getQueryParameters().get("name");
        final String name = request.getBody().orElse(query);

        if (name == null) {
            return request.createResponseBuilder(HttpStatus.BAD_REQUEST).body("Please pass a name on the query string or in the request body").build();
        } else {
            return request.createResponseBuilder(HttpStatus.OK).body("Hello, " + name).build();
        }
    }
}
package com.fabrikam;

import com.microsoft.azure.functions.ExecutionContext;
import com.microsoft.azure.functions.HttpMethod;
import com.microsoft.azure.functions.HttpRequestMessage;
import com.microsoft.azure.functions.HttpResponseMessage;
import com.microsoft.azure.functions.HttpStatus;
import com.microsoft.azure.functions.annotation.AuthorizationLevel;
import com.microsoft.azure.functions.annotation.FunctionName;
import com.microsoft.azure.functions.annotation.HttpTrigger;

import java.util.Optional;

/**
 * Azure Functions with HTTP Trigger.
 */
public class Function {
    /**
     * This function listens at endpoint "/api/HttpExample". Two ways to invoke it using "curl" command in bash:
     * 1. curl -d "HTTP Body" {your host}/api/HttpExample
     * 2. curl "{your host}/api/HttpExample?name=HTTP%20Query"
     */
    @FunctionName("HttpExample")
    public HttpResponseMessage run(
            @HttpTrigger(
                name = "req",
                methods = {HttpMethod.GET, HttpMethod.POST},
                authLevel = AuthorizationLevel.ANONYMOUS)
                HttpRequestMessage<Optional<String>> request,
            final ExecutionContext context) {
        context.getLogger().info("Java HTTP trigger processed a request.");

        // Parse query parameter
        final String query = request.getQueryParameters().get("name");
        final String name = request.getBody().orElse(query);

        if (name == null) {
            return request.createResponseBuilder(HttpStatus.BAD_REQUEST).body("Please pass a name on the query string or in the request body").build();
        } else {
            return request.createResponseBuilder(HttpStatus.OK).body("Hello, " + name).build();
        }
    }
}
The response message is generated by theHttpResponseMessage.BuilderAPI.
Settings for the Azure resources created to host your app are defined in theconfigurationelement of the plugin with agroupIdofcom.microsoft.azurein the generated pom.xml file. For example, the configuration element below instructs a Maven-based deployment to create a function app in thejava-functions-groupresource group in thewestusregion. The function app itself runs on Windows hosted in thejava-functions-app-service-planplan, which by default is a serverless Consumption plan.
com.microsoft.azure
java-functions-group
westus
java-functions-app-service-plan
<plugin>
    <groupId>com.microsoft.azure</groupId>
    <artifactId>azure-functions-maven-plugin</artifactId>
    <version>${azure.functions.maven.plugin.version}</version>
    <configuration>
        <!-- function app name -->
        <appName>${functionAppName}</appName>
        <!-- function app resource group -->
        <resourceGroup>java-functions-group</resourceGroup>
        <!-- function app service plan name -->
        <appServicePlanName>java-functions-app-service-plan</appServicePlanName>
        <!-- function app region-->
        <!-- refers https://github.com/microsoft/azure-maven-plugins/wiki/Azure-Functions:-Configuration-Details#supported-regions for all valid values -->
        <region>westus</region>
        <!-- function pricingTier, default to be consumption if not specified -->
        <!-- refers https://github.com/microsoft/azure-maven-plugins/wiki/Azure-Functions:-Configuration-Details#supported-pricing-tiers for all valid values -->
        <!-- <pricingTier></pricingTier> -->
        <!-- Whether to disable application insights, default is false -->
        <!-- refers https://github.com/microsoft/azure-maven-plugins/wiki/Azure-Functions:-Configuration-Details for all valid configurations for application insights-->
        <!-- <disableAppInsights></disableAppInsights> -->
        <runtime>
            <!-- runtime os, could be windows, linux or docker-->
            <os>windows</os>
            <javaVersion>8</javaVersion>
        </runtime>
        <appSettings>
            <property>
                <name>FUNCTIONS_EXTENSION_VERSION</name>
                <value>~4</value>
            </property>
        </appSettings>
    </configuration>
    <executions>
        <execution>
            <id>package-functions</id>
            <goals>
                <goal>package</goal>
            </goals>
        </execution>
    </executions>
</plugin>
<plugin>
    <groupId>com.microsoft.azure</groupId>
    <artifactId>azure-functions-maven-plugin</artifactId>
    <version>${azure.functions.maven.plugin.version}</version>
    <configuration>
        <!-- function app name -->
        <appName>${functionAppName}</appName>
        <!-- function app resource group -->
        <resourceGroup>java-functions-group</resourceGroup>
        <!-- function app service plan name -->
        <appServicePlanName>java-functions-app-service-plan</appServicePlanName>
        <!-- function app region-->
        <!-- refers https://github.com/microsoft/azure-maven-plugins/wiki/Azure-Functions:-Configuration-Details#supported-regions for all valid values -->
        <region>westus</region>
        <!-- function pricingTier, default to be consumption if not specified -->
        <!-- refers https://github.com/microsoft/azure-maven-plugins/wiki/Azure-Functions:-Configuration-Details#supported-pricing-tiers for all valid values -->
        <!-- <pricingTier></pricingTier> -->
        <!-- Whether to disable application insights, default is false -->
        <!-- refers https://github.com/microsoft/azure-maven-plugins/wiki/Azure-Functions:-Configuration-Details for all valid configurations for application insights-->
        <!-- <disableAppInsights></disableAppInsights> -->
        <runtime>
            <!-- runtime os, could be windows, linux or docker-->
            <os>windows</os>
            <javaVersion>8</javaVersion>
        </runtime>
        <appSettings>
            <property>
                <name>FUNCTIONS_EXTENSION_VERSION</name>
                <value>~4</value>
            </property>
        </appSettings>
    </configuration>
    <executions>
        <execution>
            <id>package-functions</id>
            <goals>
                <goal>package</goal>
            </goals>
        </execution>
    </executions>
</plugin>
You can change these settings to control how resources are created in Azure, such as by changingruntime.osfromwindowstolinuxbefore initial deployment. For a complete list of settings supported by the Maven plug-in, see theconfiguration details.
runtime.os
windows
linux
The archetype also generates a unit test for your function. When you change your function to add bindings or add new functions to the project, you'll also need to modify the tests in theFunctionTest.javafile.
Run the function locally
Run your function by starting the local Azure Functions runtime host from theLocalFunctionProjfolder:mvn clean package
mvn azure-functions:runToward the end of the output, the following lines should appear:...

 Now listening on: http://0.0.0.0:7071
 Application started. Press Ctrl+C to shut down.

 Http Functions:

         HttpExample: [GET,POST] http://localhost:7071/api/HttpExample
 ...NoteIf HttpExample doesn't appear as shown above, you likely started the host from outside the root folder of the project. In that case, useCtrl+Cto stop the host, navigate to the project's root folder, and run the previous command again.
Run your function by starting the local Azure Functions runtime host from theLocalFunctionProjfolder:
mvn clean package
mvn azure-functions:run
mvn clean package
mvn azure-functions:run
Toward the end of the output, the following lines should appear:
...

 Now listening on: http://0.0.0.0:7071
 Application started. Press Ctrl+C to shut down.

 Http Functions:

         HttpExample: [GET,POST] http://localhost:7071/api/HttpExample
 ...
Note
If HttpExample doesn't appear as shown above, you likely started the host from outside the root folder of the project. In that case, useCtrl+Cto stop the host, navigate to the project's root folder, and run the previous command again.
Copy the URL of yourHttpExamplefunction from this output to a browser and append the query string?name=<YOUR_NAME>, making the full URL likehttp://localhost:7071/api/HttpExample?name=Functions. The browser should display a message that echoes back your query string value. The terminal in which you started your project also shows log output as you make requests.
Copy the URL of yourHttpExamplefunction from this output to a browser and append the query string?name=<YOUR_NAME>, making the full URL likehttp://localhost:7071/api/HttpExample?name=Functions. The browser should display a message that echoes back your query string value. The terminal in which you started your project also shows log output as you make requests.
HttpExample
?name=<YOUR_NAME>
http://localhost:7071/api/HttpExample?name=Functions
When you're done, useCtrl+Cand chooseyto stop the functions host.
When you're done, useCtrl+Cand chooseyto stop the functions host.
y
Deploy the function project to Azure
A function app and related resources are created in Azure when you first deploy your functions project. Settings for the Azure resources created to host your app are defined in thepom.xml file. In this article, you'll accept the defaults.
Tip
To create a function app running on Linux instead of Windows, change theruntime.oselement in the pom.xml file fromwindowstolinux. Running Linux in a consumption plan is supported inthese regions. You can't have apps that run on Linux and apps that run on Windows in the same resource group.
runtime.os
windows
linux
Before you can deploy, sign in to your Azure subscription using either Azure CLI or Azure PowerShell.Azure CLIAzure PowerShellaz loginTheaz logincommand signs you into your Azure account.Connect-AzAccountTheConnect-AzAccountcmdlet signs you into your Azure account.
Before you can deploy, sign in to your Azure subscription using either Azure CLI or Azure PowerShell.
Azure CLI
Azure PowerShell
az login
az login
Theaz logincommand signs you into your Azure account.
Connect-AzAccount
Connect-AzAccount
TheConnect-AzAccountcmdlet signs you into your Azure account.
Use the following command to deploy your project to a new function app.mvn azure-functions:deployThis creates the following resources in Azure:Resource group. Named asjava-functions-group.Storage account. Required by Functions. The name is generated randomly based on Storage account name requirements.Hosting plan. Serverless hosting for your function app in thewestusregion. The name isjava-functions-app-service-plan.Function app. A function app is the deployment and execution unit for your functions. The name is randomly generated based on yourartifactId, appended with a randomly generated number.The deployment packages the project files and deploys them to the new function app usingzip deployment. The code runs from the deployment package in Azure.
Use the following command to deploy your project to a new function app.
mvn azure-functions:deploy
mvn azure-functions:deploy
This creates the following resources in Azure:
Resource group. Named asjava-functions-group.
Storage account. Required by Functions. The name is generated randomly based on Storage account name requirements.
Hosting plan. Serverless hosting for your function app in thewestusregion. The name isjava-functions-app-service-plan.
Function app. A function app is the deployment and execution unit for your functions. The name is randomly generated based on yourartifactId, appended with a randomly generated number.
The deployment packages the project files and deploys them to the new function app usingzip deployment. The code runs from the deployment package in Azure.
Important
The storage account is used to store important app data, sometimes including the application code itself. You should limit access from other apps and users to the storage account.
Invoke the function on Azure
Because your function uses an HTTP trigger, you invoke it by making an HTTP request to its URL in the browser or with a tool like curl.
Browser
curl
Copy the completeInvoke URLshown in the output of the publish command into a browser address bar, appending the query parameter?name=Functions. The browser should display similar output as when you ran the function locally.
?name=Functions

Runcurlwith theInvoke URL, appending the parameter?name=Functions. The output of the command should be the text, "Hello Functions."
curl
?name=Functions

Run the following command to view near real-time streaming logs:
func azure functionapp logstream <APP_NAME>
func azure functionapp logstream <APP_NAME>
In a separate terminal window or in the browser, call the remote function again. A verbose log of the function execution in Azure is shown in the terminal.
Clean up resources
If you continue to thenext stepand add an Azure Storage queue output binding, keep all your resources in place as you'll build on what you've already done.
Otherwise, use the following command to delete the resource group and all its contained resources to avoid incurring further costs.
Azure CLI
Azure PowerShell
az group delete --name java-functions-group
az group delete --name java-functions-group
Remove-AzResourceGroup -Name java-functions-group
Remove-AzResourceGroup -Name java-functions-group
Next steps
Connect to an Azure Storage queue
Feedback
Was this page helpful?
Additional resources