Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Manage costs with budgets
Article
2025-01-07
9 contributors
In this article
Cost control is a critical component to maximizing the value of your investment in the cloud. There are several scenarios where cost visibility, reporting, and cost-based orchestration are critical to continued business operations.Cost Management APIsprovide a set of APIs to support each of these scenarios. The APIs provide usage details, allowing you to view granular instance level costs.
Budgets are commonly used as part of cost control. Budgets can be scoped in Azure. For instance, you could narrow your budget view based on subscription, resource groups, or a collection of resources. Besides using the budgets API to send email notifications when a budget threshold is reached, you can also useAzure Monitor action groups. Action groups trigger a coordinated set of actions in response to a budget event.
A typical budget scenario for a customer running a noncritical workload is to manage spending against a budget and achieve predictable costs when reviewing the monthly invoice. This scenario requires some cost-based orchestration of resources that are part of the Azure environment. In this scenario, a monthly budget of $1,000 for the subscription is set. Also, notification thresholds are set to trigger a few orchestrations. This scenario starts with an 80% cost threshold, which stops all virtual machines (VM) in the resource groupOptional. Then, at the 100% cost threshold, all VM instances are stopped.
To configure this scenario, you complete the following actions by using the steps provided in each section of this tutorial.
These actions included in this tutorial allow you to:
Create an Azure Automation Runbook to stop VMs by using webhooks.
Create an Azure Logic App to be triggered based on the budget threshold value and call the runbook with the right parameters.
Create an Azure Monitor Action Group that is configured to trigger the Azure Logic App when the budget threshold is met.
Create the budget with the wanted thresholds and wire it to the action group.
Create an Azure Automation Runbook
Azure Automationis a service that enables you to script most of your resource management tasks and run those tasks as either scheduled or on-demand. As part of this scenario, you create anAzure Automation runbookthat stops VMs. You use theStop Azure V2 VMsgraphical runbook from theAzure Automation galleryto build this scenario. By importing this runbook into your Azure account and publishing it, you can stop VMs when a budget threshold is reached.
Note
You can create a budget in Azure Cost Management and link it to an Azure Automation runbook to automatically stop resources when a specified threshold is reached.
Create an Azure Automation account
Sign in to theAzure portalwith your Azure account credentials.
Select theCreate a resourcebutton found on the upper left corner of Azure.
SelectManagement Tools>Automation.NoteIf you don't have an Azure account, you can create afree account.
Note
If you don't have an Azure account, you can create afree account.
Enter your account information. ForCreate Azure Run As account, chooseYesto automatically enable the settings needed to simplify authentication to Azure.
When complete, selectCreate, to start the Automation account deployment.
Import the Stop Azure V2 VMs runbook
Using anAzure Automation runbook, import theStop Azure V2 VMsgraphical runbook from the gallery.
Sign in to theAzure portalwith your Azure account credentials.
Open your Automation account by selectingAll services>Automation Accounts. Then, select your Automation Account.
SelectRunbooks galleryfrom theProcess Automationsection.
Set theGallery SourcetoScript Centerand selectOK.
Locate and select theStop Azure V2 VMsgallery item within the Azure portal.
SelectImportto display theImportarea and selectOK. The runbook overview area gets displayed.
Once the runbook completes the import process, selectEditto display the graphical runbook editor and publishing option.
SelectPublishto publish the runbook and then selectYeswhen prompted. When you publish a runbook, you override any existing published version with the draft version. In this case, you have no published version because you created the runbook.
For more information about publishing a runbook, seeCreate a graphical runbook.
Create webhooks for the runbook
Using theStop Azure V2 VMsgraphical runbook, you create two Webhooks to start the runbook in Azure Automation through a single HTTP request. The first webhook invokes the runbook at an 80% budget threshold with the resource group name as a parameter, allowing the optional VMs to be stopped. Then, the second webhook invokes the runbook with no parameters (at 100%), which stops all remaining VM instances.
From theRunbookspage in theAzure portal, select theStopAzureV2Vmrunbook that displays the runbook's overview area.
SelectWebhookat the top of the page to open theAdd Webhookarea.
SelectCreate new webhookto open theCreate a new webhookarea.
Set theNameof the Webhook toOptional. TheEnabledproperty must beYes. You don't need to change theExpiresvalue. For more information about Webhook properties, seeWebhook properties.
Next to the URL value, select the copy icon to copy the URL of the webhook.ImportantSave the URL of the webhook namedOptionalin a safe place. You'll use the URL later in this tutorial. For security reasons, once you create the webhook, you cannot view or retrieve the URL again.
Important
Save the URL of the webhook namedOptionalin a safe place. You'll use the URL later in this tutorial. For security reasons, once you create the webhook, you cannot view or retrieve the URL again.
SelectOKto create the new webhook.
SelectConfigure parameters and run settingsto view parameter values for the runbook.NoteIf the runbook has mandatory parameters, then you are not able to create the webhook unless values are provided.
Note
If the runbook has mandatory parameters, then you are not able to create the webhook unless values are provided.
SelectOKto accept the webhook parameter values.
SelectCreateto create the webhook.
Next, follow the preceding steps to create a second webhook namedComplete.ImportantBe sure to save both webhook URLs to use later in this tutorial. For security reasons, once you create the webhook, you cannot view or retrieve the URL again.
Important
Be sure to save both webhook URLs to use later in this tutorial. For security reasons, once you create the webhook, you cannot view or retrieve the URL again.
You should now have two configured webhooks that are each available using the URLs that you saved.

You completed the Azure Automation setup. You can test the webhooks with a simple API test to validate that the webhook works. Some popular ways to query the API are:
Visual Studio
Insomnia
Bruno
PowerShellâsInvoke-RestMethod
Curl
Next, you must create the Logic App for orchestration.
Create an Azure Logic App for orchestration
Logic Apps helps you build, schedule, and automate processes as workflows so you can integrate apps, data, systems, and services across enterprises or organizations. In this scenario, theLogic Appyou create does a little more than just call the automation webhook you created.
Budgets can be set up to trigger a notification when a specified threshold is met. You can provide multiple thresholds to be notified at and the Logic App demonstrates the ability for you to perform different actions based on the threshold met. In this example, you set up a scenario where you get a couple of notifications. The first notification is for when 80% of the budget is reached. The second notification is when 100% of the budget is reached. The logic app is used to shut down all VMs in the resource group. First, theOptionalthreshold is reached at 80%, then the second threshold is reached where all VMs in the subscription get shutdown.
Logic apps allow you to provide a sample schema for the HTTP trigger, but require you to set theContent-Typeheader. Because the action group doesn't have custom headers for the webhook, you must parse out the payload in a separate step. You use theParseaction and provide it with a sample payload.
Create the logic app
The logic app performs several actions. The following list provides a high-level set of actions that the logic app performs:
Recognizes when an HTTP request is received
Parse the passed in JSON data to determine the threshold value that is reached
Use a conditional statement to check whether the threshold amount reached 80% or more of the budget range, but not greater than or equal to 100%.If this threshold amount is reached, send an HTTP POST using the webhook namedOptional. This action shuts down the VMs in the "Optional" group.
If this threshold amount is reached, send an HTTP POST using the webhook namedOptional. This action shuts down the VMs in the "Optional" group.
Use a conditional statement to check whether the threshold amount reached or exceeded 100% of the budget value.If the threshold amount is reached, send an HTTP POST using the webhook namedComplete. This action shuts down all remaining VMs.
If the threshold amount is reached, send an HTTP POST using the webhook namedComplete. This action shuts down all remaining VMs.
The following steps are needed to create the logic app that performs the preceding steps:
In theAzure portal, selectCreate a resource>Integration>Logic App.
In theCreate logic apparea, provide the details need to create your logic app, selectPin to dashboard, and selectCreate.
After Azure deploys your logic app, theLogic Apps Designeropens and shows an area with an introduction video and commonly used triggers.
Add a trigger
Every logic app must start with a trigger, which fires when a specific event happens or when a specific condition is met. Each time the trigger fires, the Logic Apps engine creates a logic app instance that starts and runs your workflow. Actions are all the steps that happen after the trigger.
UnderTemplatesof theLogic Apps Designerarea, chooseBlank Logic App.
Add atriggerby entering "http request" in theLogic Apps Designersearch box to find and select the trigger namedRequest â When an HTTP request is received.
SelectNew step>Add an action.
Search for "parse JSON" in theLogic Apps Designersearch box to find and select theData Operations - Parse JSONaction.
Enter "Payload" as theContentname for the Parse JSON payload or use the "Body" tag from dynamic content.
Select theUse sample payload to generate schemaoption in theParse JSONbox.
Paste the following JSON sample payload into the textbox:{"schemaId":"AIP Budget Notification","data":{"SubscriptionName":"CCM - Microsoft Azure Enterprise - 1","SubscriptionId":"<GUID>","SpendingAmount":"100","BudgetStartDate":"6/1/2018","Budget":"50","Unit":"USD","BudgetCreator":"email@contoso.com","BudgetName":"BudgetName","BudgetType":"Cost","ResourceGroup":"","NotificationThresholdAmount":"0.8"}}The textbox appears as:
{"schemaId":"AIP Budget Notification","data":{"SubscriptionName":"CCM - Microsoft Azure Enterprise - 1","SubscriptionId":"<GUID>","SpendingAmount":"100","BudgetStartDate":"6/1/2018","Budget":"50","Unit":"USD","BudgetCreator":"email@contoso.com","BudgetName":"BudgetName","BudgetType":"Cost","ResourceGroup":"","NotificationThresholdAmount":"0.8"}}
SelectDone.
Add the first conditional action
Use a conditional statement to check whether the threshold amount reached 80% or more of the budget range, but not greater than or equal to 100%. If this threshold amount is reached, send an HTTP POST using the webhook namedOptional. This action shuts down the VMs in theOptionalgroup.
SelectNew step>Add a condition.
SelectNew step>Add a condition.
In theConditionbox, select the textbox containingChoose a valueto display a list of available values.
In theConditionbox, select the textbox containingChoose a valueto display a list of available values.
Choose a value
SelectExpressionat the top of the list and enter the following expression in the expression editor:float()
SelectExpressionat the top of the list and enter the following expression in the expression editor:float()
float()
SelectDynamic content, place the cursor inside the parenthesis (), and selectNotificationThresholdAmountfrom the list to populate the complete expression.
The expression is:float(body('Parse_JSON')?['data']?['NotificationThresholdAmount'])
SelectDynamic content, place the cursor inside the parenthesis (), and selectNotificationThresholdAmountfrom the list to populate the complete expression.
The expression is:float(body('Parse_JSON')?['data']?['NotificationThresholdAmount'])
float(body('Parse_JSON')?['data']?['NotificationThresholdAmount'])
SelectOKto set the expression.
SelectOKto set the expression.
Selectis greater than or equal toin the dropdown box of theCondition.
Selectis greater than or equal toin the dropdown box of theCondition.
In theChoose a valuebox of the condition, enter.8.
In theChoose a valuebox of the condition, enter.8.
.8
SelectAdd>Add rowwithin the Condition box to add another part of the condition.
SelectAdd>Add rowwithin the Condition box to add another part of the condition.
In theConditionbox, select the textbox containingChoose a value.
In theConditionbox, select the textbox containingChoose a value.
Choose a value
SelectExpressionat the top of the list and enter the following expression in the expression editor:float()
SelectExpressionat the top of the list and enter the following expression in the expression editor:float()
float()
SelectDynamic content, place the cursor inside the parenthesis (), and selectNotificationThresholdAmountfrom the list to populate the complete expression.
SelectDynamic content, place the cursor inside the parenthesis (), and selectNotificationThresholdAmountfrom the list to populate the complete expression.
SelectOKto set the expression.
SelectOKto set the expression.
Selectis less thanin the dropdown box of theCondition.
Selectis less thanin the dropdown box of theCondition.
In theChoose a valuebox of the condition, enter1.
In theChoose a valuebox of the condition, enter1.
1
In theIf truebox, selectAdd an action. You add an HTTP POST action that shuts down optional VMs.
In theIf truebox, selectAdd an action. You add an HTTP POST action that shuts down optional VMs.
EnterHTTPto search for the HTTP action and select theHTTP â HTTPaction.
EnterHTTPto search for the HTTP action and select theHTTP â HTTPaction.
SelectPostfor theMethodvalue.
SelectPostfor theMethodvalue.
Enter the URL for the webhook namedOptionalthat you created earlier in this tutorial as theUrivalue.
Enter the URL for the webhook namedOptionalthat you created earlier in this tutorial as theUrivalue.
SelectAdd an actionin theIf truebox. You add an email action that sends an email notifying the recipient that the optional VMs were shut down.
SelectAdd an actionin theIf truebox. You add an email action that sends an email notifying the recipient that the optional VMs were shut down.
Search for "send email" and select asend emailaction based on the email service you use.For personal Microsoft accounts, selectOutlook.com. For Azure work or school accounts, selectOffice 365 Outlook. If you don't already have a connection, you get asked to sign in to your email account. Logic Apps creates a connection to your email account.
You need to allow the Logic App to access your email information.
Search for "send email" and select asend emailaction based on the email service you use.
For personal Microsoft accounts, selectOutlook.com. For Azure work or school accounts, selectOffice 365 Outlook. If you don't already have a connection, you get asked to sign in to your email account. Logic Apps creates a connection to your email account.
You need to allow the Logic App to access your email information.
Add theTo,Subject, andBodytext for the email that notifies the recipient that the optional VMs were shut down. Use theBudgetNameand theNotificationThresholdAmountdynamic content to populate the subject and body fields.
Add theTo,Subject, andBodytext for the email that notifies the recipient that the optional VMs were shut down. Use theBudgetNameand theNotificationThresholdAmountdynamic content to populate the subject and body fields.
Add the second conditional action
Use a conditional statement to check whether the threshold amount reached or exceeded 100% of the budget value. If the threshold amount is reached, send an HTTP POST using the webhook namedComplete. This action shuts down all remaining VMs.
SelectNew step>Add a Condition.
In theConditionbox, select the textbox containingChoose a valueto display a list of available values.
Choose a value
SelectExpressionat the top of the list and enter the following expression in the expression editor:float()
float()
SelectDynamic content, place the cursor inside the parenthesis (), and selectNotificationThresholdAmountfrom the list to populate the complete expression.
The expression resembles:float(body('Parse_JSON')?['data']?['NotificationThresholdAmount'])
float(body('Parse_JSON')?['data']?['NotificationThresholdAmount'])
SelectOKto set the expression.
Selectis greater than or equal toin the dropdown box of theCondition.
In theChoose a value boxfor the condition, enter1.
1
In theIf truebox, selectAdd an action. You add an HTTP POST action that shuts down all the remaining VMs.
EnterHTTPto search for the HTTP action and select theHTTP â HTTPaction.
SelectPostas theMethodvalue.
Enter the URL for the webhook namedCompletethat you created earlier in this tutorial as theUrivalue.
SelectAdd an actionin theIf truebox. You add an email action that sends an email notifying the recipient that the remaining VMs were shut down.
Search for "send email" and select asend emailaction based on the email service you use.
Add theTo,Subject, andBodytext for the email that notifies the recipient that the optional VMs were shut down. Use theBudgetNameand theNotificationThresholdAmountdynamic content to populate the subject and body fields.
SelectSaveat the top of theLogic App Designerarea.
Logic App summary
Here's what your Logic App looks like when done. In the most basic of scenarios where you don't need any threshold-based orchestration, you could directly call the automation script fromMonitorand skip theLogic Appstep.

When you saved your logic app, a URL was generated that you can call. You use this URL in the next section of this tutorial.
Create an Azure Monitor Action Group
An action group is a collection of notification preferences that you define. When an alert is triggered, a specific action group can receive the alert by being notified. An Azure alert proactively raises a notification based on specific conditions and provides the opportunity to take action. An alert can use data from multiple sources, including metrics and logs.
Action groups are the only endpoint that you integrate with your budget. You can set up notifications in many channels, but for this scenario you focus on the Logic App you created earlier in this tutorial.
Create an action group in Azure Monitor
When you create the action group, you point to the Logic App that you created earlier in this tutorial.
If you aren't already signed-in to theAzure portal, sign in and selectAll services>Monitor.
SelectAlertsthen selectManage actions.
SelectAdd an action groupfrom theAction groupsarea.
Add and verify the following items:Action group nameShort nameSubscriptionResource group
Action group name
Short name
Subscription
Resource group
Within theAdd action grouppane, add a LogicApp action. Name the actionBudget-BudgetLA. In theLogic Apppane, select theSubscriptionand theResource group. Then, select theLogic appthat you created earlier in this tutorial.
SelectOKto set the Logic App. Then, selectOKin theAdd action grouppane to create the action group.
You completed all the supporting components that are needed to effectively orchestrate your budget. Now all you need to do is create the budget and configure it to use the action group you created.
Create the budget
You can create a budget in the Azure portal using theBudget featurein Cost Management. Or, you can create a budget using REST APIs, PowerShell cmdlets, or use the CLI. The following procedure uses the REST API. Before calling the REST API, you need an authorization token. To create an authorization token, you can use theARMClientproject. TheARMClientallows you to authenticate yourself to the Azure Resource Manager and get a token to call the APIs.
Create an authentication token
Navigate to theARMClientproject on GitHub.
Navigate to theARMClientproject on GitHub.
Clone the repo to get a local copy.
Clone the repo to get a local copy.
Open the project in Visual Studio and build it.
Open the project in Visual Studio and build it.
Once the build is successful, the executable should be in the\bin\debugfolder.
Once the build is successful, the executable should be in the\bin\debugfolder.
Run the ARMClient. Open a command prompt and navigate to the\bin\debugfolder from the project root.
Run the ARMClient. Open a command prompt and navigate to the\bin\debugfolder from the project root.
To sign in and authenticate, enter the following command at the command prompt:ARMClient login prod
To sign in and authenticate, enter the following command at the command prompt:ARMClient login prod
ARMClient login prod
Copy thesubscription guidfrom the output.
Copy thesubscription guidfrom the output.
To copy an authorization token to your clipboard, enter the following command at the command prompt, but sure to use the copied subscription ID from the preceding step:ARMClient token <subscription GUID from previous step>When you complete the preceding step, you see:Token copied to clipboard successfully.
To copy an authorization token to your clipboard, enter the following command at the command prompt, but sure to use the copied subscription ID from the preceding step:ARMClient token <subscription GUID from previous step>
ARMClient token <subscription GUID from previous step>
When you complete the preceding step, you see:Token copied to clipboard successfully.
Save the token to be used for steps in the next section of this tutorial.
Save the token to be used for steps in the next section of this tutorial.
Create the Budget
Next, you create a budget by calling the Azure Consumption REST APIs. You need a way to interact with APIs. Some popular ways to query the API are:
Visual Studio
Insomnia
Bruno
PowerShellâsInvoke-RestMethod
Curl
You need to import both environment and collection files into your API client. The collection contains grouped definitions of HTTP requests that call Azure Consumption REST APIs. The environment file contains variables that are used by the collection.
In your API client, create a new request.
In your API client, create a new request.
Save the new request so that it has nothing in it.
Save the new request so that it has nothing in it.
Change the request from aGetto aPutaction.
Change the request from aGetto aPutaction.
Get
Put
Modify the following URL by replacing{subscriptionId}with theSubscription IDthat you used in the previous section of this tutorial. Also, modify the URL to include "SampleBudget" as the value for{budgetName}:https://management.azure.com/subscriptions/{subscriptionId}/providers/Microsoft.Consumption/budgets/{budgetName}?api-version=2018-03-31
Modify the following URL by replacing{subscriptionId}with theSubscription IDthat you used in the previous section of this tutorial. Also, modify the URL to include "SampleBudget" as the value for{budgetName}:https://management.azure.com/subscriptions/{subscriptionId}/providers/Microsoft.Consumption/budgets/{budgetName}?api-version=2018-03-31
{subscriptionId}
{budgetName}
https://management.azure.com/subscriptions/{subscriptionId}/providers/Microsoft.Consumption/budgets/{budgetName}?api-version=2018-03-31
Select Headers in your API client.
Select Headers in your API client.
Add a newKeynamed "Authorization".
Add a newKeynamed "Authorization".
Set theValueto the token that was created using the ArmClient at the end of the last section.
Set theValueto the token that was created using the ArmClient at the end of the last section.
Select Body in your API client.
Select Body in your API client.
Select therawoption in your API client.
Select therawoption in your API client.
In the text area in your API client, paste the following sample budget definition. You must replace thesubscriptionID,resourcegroupname, andactiongroupnameparameters with your subscription ID, a unique name for your resource group, and the action group name you created in both the URL and the request body:{
        "properties": {
            "category": "Cost",
            "amount": 100.00,
            "timeGrain": "Monthly",
            "timePeriod": {
            "startDate": "2018-06-01T00:00:00Z",
            "endDate": "2018-10-31T00:00:00Z"
            },
            "filters": {},
        "notifications": {
            "Actual_GreaterThan_80_Percent": {
                "enabled": true,
                "operator": "GreaterThan",
                "threshold": 80,
                "contactEmails": [],
                "contactRoles": [],
                "contactGroups": [
                    "/subscriptions/{subscriptionid}/resourceGroups/{resourcegroupname}/providers/microsoft.insights/actionGroups/{actiongroupname}"
                ]
            },
           "Actual_EqualTo_100_Percent": {
                   "operator": "EqualTo",
                   "threshold": 100,
                   "contactGroups": [
                       "/subscriptions/{subscriptionid}/resourceGroups/{resourcegroupname}/providers/microsoft.insights/actionGroups/{actiongroupname}"
                   ]
               }
           }
        }
    }
In the text area in your API client, paste the following sample budget definition. You must replace thesubscriptionID,resourcegroupname, andactiongroupnameparameters with your subscription ID, a unique name for your resource group, and the action group name you created in both the URL and the request body:
subscriptionID
resourcegroupname
actiongroupname
{
        "properties": {
            "category": "Cost",
            "amount": 100.00,
            "timeGrain": "Monthly",
            "timePeriod": {
            "startDate": "2018-06-01T00:00:00Z",
            "endDate": "2018-10-31T00:00:00Z"
            },
            "filters": {},
        "notifications": {
            "Actual_GreaterThan_80_Percent": {
                "enabled": true,
                "operator": "GreaterThan",
                "threshold": 80,
                "contactEmails": [],
                "contactRoles": [],
                "contactGroups": [
                    "/subscriptions/{subscriptionid}/resourceGroups/{resourcegroupname}/providers/microsoft.insights/actionGroups/{actiongroupname}"
                ]
            },
           "Actual_EqualTo_100_Percent": {
                   "operator": "EqualTo",
                   "threshold": 100,
                   "contactGroups": [
                       "/subscriptions/{subscriptionid}/resourceGroups/{resourcegroupname}/providers/microsoft.insights/actionGroups/{actiongroupname}"
                   ]
               }
           }
        }
    }
{
        "properties": {
            "category": "Cost",
            "amount": 100.00,
            "timeGrain": "Monthly",
            "timePeriod": {
            "startDate": "2018-06-01T00:00:00Z",
            "endDate": "2018-10-31T00:00:00Z"
            },
            "filters": {},
        "notifications": {
            "Actual_GreaterThan_80_Percent": {
                "enabled": true,
                "operator": "GreaterThan",
                "threshold": 80,
                "contactEmails": [],
                "contactRoles": [],
                "contactGroups": [
                    "/subscriptions/{subscriptionid}/resourceGroups/{resourcegroupname}/providers/microsoft.insights/actionGroups/{actiongroupname}"
                ]
            },
           "Actual_EqualTo_100_Percent": {
                   "operator": "EqualTo",
                   "threshold": 100,
                   "contactGroups": [
                       "/subscriptions/{subscriptionid}/resourceGroups/{resourcegroupname}/providers/microsoft.insights/actionGroups/{actiongroupname}"
                   ]
               }
           }
        }
    }
Send the request.
Send the request.
You now have all the pieces you need to call thebudgets API. The budgets API reference has more details on the specific requests, including:
budgetName- Multiple budgets are supported. Budget names must be unique.
category- Must be eitherCostorUsage. The API supports both cost and usage budgets.
timeGrain- A monthly, quarterly, or yearly budget. The amount resets at the end of the period.
filters- Filters allow you to narrow the budget to a specific set of resources within the selected scope. For example, a filter could be a collection of resource groups for a subscription level budget.
notificationsâ Determines the notification details and thresholds. You can set up multiple thresholds and provide an email address or an action group to receive a notification.
Summary
By using this tutorial, you learned:
How to create an Azure Automation Runbook to stop VMs.
How to create an Azure Logic App that is triggered based on the budget threshold values and call the related runbook with the right parameters.
How to create an Azure Monitor Action Group that was configured to trigger the Azure Logic App when the budget threshold is met.
How to create the budget with the desired thresholds and wire it to the action group.
You now have a fully functional budget for your subscription that shuts down your VMs when you reach your configured budget thresholds.
Next steps
For more information about Azure billing scenarios, seeBilling and cost management automation scenarios.
Feedback
Was this page helpful?
Additional resources