Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Quickstart: Create your first C# function in Azure using Visual Studio
Article
2024-07-18
30 contributors
In this article
Azure Functions lets you use Visual Studio to create local C# function projects and then easily publish this project to run in a scalable serverless environment in Azure. If you prefer to develop your C# apps locally using Visual Studio Code, you should instead consider theVisual Studio Code-based versionof this article.
By default, this article shows you how to create C# functions that run on .NET 8 in anisolated worker process. Function apps that run in an isolated worker process are supported on all versions of .NET that are supported by Functions. For more information, seeSupported versions.
In this article, you learn how to:
Use Visual Studio to create a C# class library project.
Create a function that responds to HTTP requests.
Run your code locally to verify function behavior.
Deploy your code project to Azure Functions.
Completing this quickstart incurs a small cost of a few USD cents or less in your Azure account.
This video shows you how to create a C# function in Azure.
The steps in the video are also described in the following sections.
Prerequisites
Visual Studio 2022. Make sure to select theAzure developmentworkload during installation.
Visual Studio 2022. Make sure to select theAzure developmentworkload during installation.
Azure subscription. If you don't already have an account,create a free onebefore you begin.
Azure subscription. If you don't already have an account,create a free onebefore you begin.
Create a function app project
The Azure Functions project template in Visual Studio creates a C# class library project that you can publish to a function app in Azure. You can use a function app to group functions as a logical unit for easier management, deployment, scaling, and sharing of resources.
From the Visual Studio menu, selectFile>New>Project.
From the Visual Studio menu, selectFile>New>Project.
InCreate a new project, enterfunctionsin the search box, choose theAzure Functionstemplate, and then selectNext.
InCreate a new project, enterfunctionsin the search box, choose theAzure Functionstemplate, and then selectNext.
InConfigure your new project, enter aProject namefor your project, and then selectNext. The function app name must be valid as a C# namespace, so don't use underscores, hyphens, or any other nonalphanumeric characters.
InConfigure your new project, enter aProject namefor your project, and then selectNext. The function app name must be valid as a C# namespace, so don't use underscores, hyphens, or any other nonalphanumeric characters.
For the remainingAdditional informationsettings,SettingValueDescriptionFunctions worker.NET 8.0 Isolated (Long Term Support)Your functions run on .NET 8 in an isolated worker process.FunctionHTTP triggerThis value creates a function triggered by an HTTP request.Use Azurite for runtime storage account (AzureWebJobsStorage)EnableBecause a function app in Azure requires a storage account, one is assigned or created when you publish your project to Azure. An HTTP trigger doesn't use an Azure Storage account connection string; all other trigger types require a valid Azure Storage account connection string. When you select this option, theAzurite emulatoris used.Authorization levelAnonymousThe created function can be triggered by any client without providing a key. This authorization setting makes it easy to test your new function. For more information, seeAuthorization level.Make sure you set theAuthorization leveltoAnonymous. If you choose the default level ofFunction, you're required to present thefunction keyin requests to access your function endpoint in Azure.
For the remainingAdditional informationsettings,

Make sure you set theAuthorization leveltoAnonymous. If you choose the default level ofFunction, you're required to present thefunction keyin requests to access your function endpoint in Azure.
SelectCreateto create the function project and HTTP trigger function.
SelectCreateto create the function project and HTTP trigger function.
Visual Studio creates a project and class that contains boilerplate code for the HTTP trigger function type. The boilerplate code sends an HTTP response that includes a value from the request body or query string. TheHttpTriggerattribute specifies that the function is triggered by an HTTP request.
HttpTrigger
Rename the function
TheFunctionmethod attribute sets the name of the function, which by default is generated asFunction1. Since the tooling doesn't let you override the default function name when you create your project, take a minute to create a better name for the function class, file, and metadata.
Function
Function1
InFile Explorer, right-click the Function1.cs file and rename it toHttpExample.cs.
InFile Explorer, right-click the Function1.cs file and rename it toHttpExample.cs.
HttpExample.cs
In the code, rename the Function1 class toHttpExample.
In the code, rename the Function1 class toHttpExample.
HttpExample
In the method namedRun, rename theFunctionmethod attribute toHttpExample.
In the method namedRun, rename theFunctionmethod attribute toHttpExample.
Run
Function
HttpExample
Your function definition should now look like the following code:
[Function("HttpExample")]
public IActionResult Run([HttpTrigger(AuthorizationLevel.Anonymous, "get", "post")] HttpRequest req)
{
    return new OkObjectResult("Hello, functions");
}
[Function("HttpExample")]
public IActionResult Run([HttpTrigger(AuthorizationLevel.Anonymous, "get", "post")] HttpRequest req)
{
    return new OkObjectResult("Hello, functions");
}
Now that you've renamed the function, you can test it on your local computer.
Run the function locally
Visual Studio integrates with Azure Functions Core Tools so that you can test your functions locally using the full Azure Functions runtime.
To run your function, pressF5in Visual Studio. You might need to enable a firewall exception so that the tools can handle HTTP requests. Authorization levels are never enforced when you run a function locally.
To run your function, pressF5in Visual Studio. You might need to enable a firewall exception so that the tools can handle HTTP requests. Authorization levels are never enforced when you run a function locally.
Copy the URL of your function from the Azure Functions runtime output.
Copy the URL of your function from the Azure Functions runtime output.

Paste the URL for the HTTP request into your browser's address bar and run the request. The following image shows the response in the browser to the local GET request returned by the function:
Paste the URL for the HTTP request into your browser's address bar and run the request. The following image shows the response in the browser to the local GET request returned by the function:

To stop debugging, pressShift+F5in Visual Studio.
To stop debugging, pressShift+F5in Visual Studio.
After you've verified that the function runs correctly on your local computer, it's time to publish the project to Azure.
Publish the project to Azure
Visual Studio can publish your local project to Azure. Before you can publish your project, you must have a function app in your Azure subscription. If you don't already have a function app in Azure, Visual Studio publishing creates one for you the first time you publish your project. In this article, you create a function app and related Azure resources.
InSolution Explorer, right-click the project and selectPublish. InTarget, selectAzure, and then selectNext.
InSolution Explorer, right-click the project and selectPublish. InTarget, selectAzure, and then selectNext.

OnSpecific target, selectAzure Function App (Windows). A function app that runs on Windows is created. SelectNext.
OnSpecific target, selectAzure Function App (Windows). A function app that runs on Windows is created. SelectNext.

OnFunctions instance, selectCreate a new Azure Function.
OnFunctions instance, selectCreate a new Azure Function.

Create a new instance by using the values specified in the following table:SettingValueDescriptionNameGlobally unique nameName that uniquely identifies your new function app. Accept this name or enter a new name. Valid characters are:a-z,0-9, and-.SubscriptionYour subscriptionThe Azure subscription to use. Accept this subscription or select a new one from the dropdown list.Resource groupName of your resource groupThe resource group in which you want to create your function app. SelectNewto create a new resource group. You can also choose to use an existing resource group from the dropdown list.Plan TypeConsumptionWhen you publish your project to a function app that runs in aConsumption plan, you pay only for executions of your functions app. Other hosting plans incur higher costs.LocationLocation of the app serviceSelect aLocationin anAzure regionnear you or other services your functions access.Azure StorageGeneral-purpose storage accountAn Azure storage account is required by the Functions runtime. SelectNewto configure a general-purpose storage account. You can also choose to use an existing account that meets thestorage account requirements.Application InsightsApplication Insights instanceYou should enable Azure Application Insights integration for your function app. SelectNewto create a new instance, either in a new or in an existing Log Analytics workspace. You can also choose to use an existing instance.
Create a new instance by using the values specified in the following table:
a-z
0-9
-

SelectCreateto create a function app and its related resources in Azure. The status of resource creation is shown in the lower-left corner of the window.
SelectCreateto create a function app and its related resources in Azure. The status of resource creation is shown in the lower-left corner of the window.
OnFunctions instance, make sure that theRun from package filecheckbox is selected. Your function app is deployed by usingZip DeploywithRun-From-Packagemode enabled. Zip Deploy is the recommended deployment method for your functions project for better performance.
OnFunctions instance, make sure that theRun from package filecheckbox is selected. Your function app is deployed by usingZip DeploywithRun-From-Packagemode enabled. Zip Deploy is the recommended deployment method for your functions project for better performance.

SelectFinish, and on thePublishpane, selectPublishto deploy the package that contains your project files to your new function app in Azure.When deployment is completed, the root URL of the function app in Azure is shown on thePublishtab.
SelectFinish, and on thePublishpane, selectPublishto deploy the package that contains your project files to your new function app in Azure.
When deployment is completed, the root URL of the function app in Azure is shown on thePublishtab.
On thePublishtab, in theHostingsection, selectOpen in Azure portal. The new function app Azure resource opens in the Azure portal.
On thePublishtab, in theHostingsection, selectOpen in Azure portal. The new function app Azure resource opens in the Azure portal.

Verify your function in Azure
In the Azure portal, you should be in theOverviewpage for your new functions app.
In the Azure portal, you should be in theOverviewpage for your new functions app.
UnderFunctions, select your new function namedHttpExample, then in the function page selectGet function URLand then theCopy to clipboard icon.
UnderFunctions, select your new function namedHttpExample, then in the function page selectGet function URLand then theCopy to clipboard icon.
In the address bar in your browser, paste the URL you just copied and run the request.The URL that calls your HTTP trigger function is in the following format:https://<APP_NAME>.azurewebsites.net/api/HttpExample?name=Functions
In the address bar in your browser, paste the URL you just copied and run the request.
The URL that calls your HTTP trigger function is in the following format:
https://<APP_NAME>.azurewebsites.net/api/HttpExample?name=Functions
https://<APP_NAME>.azurewebsites.net/api/HttpExample?name=Functions
Go to this URL and you see a response in the browser to the remote GET request returned by the function, which looks like the following example:
Go to this URL and you see a response in the browser to the remote GET request returned by the function, which looks like the following example:

Clean up resources
Resourcesin Azure refer to function apps, functions, storage accounts, and so forth. They're grouped intoresource groups, and you can delete everything in a group by deleting the group.
You created Azure resources to complete this quickstart. You may be billed for these resources, depending on youraccount statusandservice pricing. Other quickstarts in this collection build upon this quickstart. If you plan to work with subsequent quickstarts, tutorials, or with any of the services you've created in this quickstart, don't clean up the resources.
Use the following steps to delete the function app and its related resources to avoid incurring any further costs.
In the Visual Studio Publish dialogue, in the Hosting section, selectOpen in Azure portal.
In the Visual Studio Publish dialogue, in the Hosting section, selectOpen in Azure portal.
In the function app page, select theOverviewtab and then select the link underResource group.
In the function app page, select theOverviewtab and then select the link underResource group.

In theResource grouppage, review the list of included resources, and verify that they're the ones you want to delete.
In theResource grouppage, review the list of included resources, and verify that they're the ones you want to delete.
SelectDelete resource group, and follow the instructions.Deletion may take a couple of minutes. When it's done, a notification appears for a few seconds. You can also select the bell icon at the top of the page to view the notification.
SelectDelete resource group, and follow the instructions.
Deletion may take a couple of minutes. When it's done, a notification appears for a few seconds. You can also select the bell icon at the top of the page to view the notification.
Next steps
In this quickstart, you used Visual Studio to create and publish a C# function app in Azure with a simple HTTP trigger function.
To learn more about working with C# functions that run in an isolated worker process, see theGuide for running C# Azure Functions in an isolated worker process. Check out.NET supported versionsto see other versions of supported .NET versions in an isolated worker process.
Advance to the next article to learn how to add an Azure Storage queue binding to your function:
Add an Azure Storage queue binding to your function
Feedback
Was this page helpful?
Additional resources