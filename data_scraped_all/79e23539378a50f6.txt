Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Use Azure ultra disks on Azure Kubernetes Service
Article
2024-08-01
17 contributors
In this article
Azure ultra disksoffer high throughput, high IOPS, and consistent low latency disk storage for your stateful applications. One major benefit of ultra disks is the ability to dynamically change the performance of the SSD along with your workloads without the need to restart your agent nodes. Ultra disks are suited for data-intensive workloads.
This article describes how to configure a new or existing AKS cluster to use Azure ultra disks.
Before you begin
This feature can only be set at cluster creation or when creating a node pool.
Limitations
Azure ultra disks require node pools deployed in availability zones and regions that support these disks, and are only supported by specific VM series. Review the corresponding table under theUltra disk limitationssection for more information.
Ultra disks can't be used with some features and functionality, such as availability sets or Azure Disk Encryption. Review theUltra disk limitationsfor the latest information.
Create a cluster that can use ultra disks
Create an AKS cluster that is able to leverage Azure ultra Disks by using the following CLI commands. Use the--enable-ultra-ssdparameter to set theEnableUltraSSDfeature.
--enable-ultra-ssd
EnableUltraSSD
az aks create \
    --resource-group MyResourceGroup \
    --name myAKSCluster \
    --location westus2 \
    --node-vm-size Standard_D2s_v3 \
    --zones 1 2 \
    --node-count 2 \
    --enable-ultra-ssd \
    --generate-ssh-keys
az aks create \
    --resource-group MyResourceGroup \
    --name myAKSCluster \
    --location westus2 \
    --node-vm-size Standard_D2s_v3 \
    --zones 1 2 \
    --node-count 2 \
    --enable-ultra-ssd \
    --generate-ssh-keys
If you want to create a cluster without ultra disk support, you can do so by omitting the--enable-ultra-ssdparameter.
--enable-ultra-ssd
Enable ultra disks on an existing cluster
You can enable ultra disks on an existing cluster by adding a new node pool to your cluster that support ultra disks. Configure a new node pool to use ultra disks by using the--enable-ultra-ssdparameter with theaz aks nodepool addcommand.
--enable-ultra-ssd
az aks nodepool add
If you want to create new node pools without support for ultra disks, you can do so by excluding the--enable-ultra-ssdparameter.
--enable-ultra-ssd
Use ultra disks dynamically with a storage class
To use ultra disks in your deployments or stateful sets, you can use astorage class for dynamic provisioning.
Create the storage class
A storage class is used to define how a unit of storage is dynamically created with a persistent volume. For more information on Kubernetes storage classes, seeKubernetes storage classes. In this example, we'll create a storage class that references ultra disks.
Create a file namedazure-ultra-disk-sc.yamland copy in the following manifest:kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: ultra-disk-sc
provisioner: disk.csi.azure.com # replace with "kubernetes.io/azure-disk" if aks version is less than 1.21
volumeBindingMode: WaitForFirstConsumer # optional, but recommended if you want to wait until the pod that will use this disk is created 
parameters:
  skuname: UltraSSD_LRS
  kind: managed
  cachingMode: None
  diskIopsReadWrite: "2000"  # minimum value: 2 IOPS/GiB 
  diskMbpsReadWrite: "320"   # minimum value: 0.032/GiB
Create a file namedazure-ultra-disk-sc.yamland copy in the following manifest:
azure-ultra-disk-sc.yaml
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: ultra-disk-sc
provisioner: disk.csi.azure.com # replace with "kubernetes.io/azure-disk" if aks version is less than 1.21
volumeBindingMode: WaitForFirstConsumer # optional, but recommended if you want to wait until the pod that will use this disk is created 
parameters:
  skuname: UltraSSD_LRS
  kind: managed
  cachingMode: None
  diskIopsReadWrite: "2000"  # minimum value: 2 IOPS/GiB 
  diskMbpsReadWrite: "320"   # minimum value: 0.032/GiB
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: ultra-disk-sc
provisioner: disk.csi.azure.com # replace with "kubernetes.io/azure-disk" if aks version is less than 1.21
volumeBindingMode: WaitForFirstConsumer # optional, but recommended if you want to wait until the pod that will use this disk is created 
parameters:
  skuname: UltraSSD_LRS
  kind: managed
  cachingMode: None
  diskIopsReadWrite: "2000"  # minimum value: 2 IOPS/GiB 
  diskMbpsReadWrite: "320"   # minimum value: 0.032/GiB
Create the storage class using thekubectl applycommand and specify yourazure-ultra-disk-sc.yamlfile.kubectl apply -f azure-ultra-disk-sc.yamlYour output should resemble the following example output:storageclass.storage.k8s.io/ultra-disk-sc created
Create the storage class using thekubectl applycommand and specify yourazure-ultra-disk-sc.yamlfile.
kubectl apply
azure-ultra-disk-sc.yaml
kubectl apply -f azure-ultra-disk-sc.yaml
kubectl apply -f azure-ultra-disk-sc.yaml
Your output should resemble the following example output:
storageclass.storage.k8s.io/ultra-disk-sc created
storageclass.storage.k8s.io/ultra-disk-sc created
Create a persistent volume claim
A persistent volume claim (PVC) is used to automatically provision storage based on a storage class. In this case, a PVC can use the previously created storage class to create an ultra disk.
Create a file namedazure-ultra-disk-pvc.yamland copy in the following manifest:apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ultra-disk
spec:
  accessModes:
 - ReadWriteOnce
  storageClassName: ultra-disk-sc
  resources:
    requests:
      storage: 1000GiThe claim requests a disk namedultra-diskthat is1000 GBin size withReadWriteOnceaccess. Theultra-disk-scstorage class is specified as the storage class.
Create a file namedazure-ultra-disk-pvc.yamland copy in the following manifest:
azure-ultra-disk-pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ultra-disk
spec:
  accessModes:
 - ReadWriteOnce
  storageClassName: ultra-disk-sc
  resources:
    requests:
      storage: 1000Gi
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ultra-disk
spec:
  accessModes:
 - ReadWriteOnce
  storageClassName: ultra-disk-sc
  resources:
    requests:
      storage: 1000Gi
The claim requests a disk namedultra-diskthat is1000 GBin size withReadWriteOnceaccess. Theultra-disk-scstorage class is specified as the storage class.
ultra-disk
Create the persistent volume claim using thekubectl applycommand and specify yourazure-ultra-disk-pvc.yamlfile.kubectl apply -f azure-ultra-disk-pvc.yamlYour output should resemble the following example output:persistentvolumeclaim/ultra-disk created
Create the persistent volume claim using thekubectl applycommand and specify yourazure-ultra-disk-pvc.yamlfile.
kubectl apply
azure-ultra-disk-pvc.yaml
kubectl apply -f azure-ultra-disk-pvc.yaml
kubectl apply -f azure-ultra-disk-pvc.yaml
Your output should resemble the following example output:
persistentvolumeclaim/ultra-disk created
persistentvolumeclaim/ultra-disk created
Use the persistent volume
Once the persistent volume claim has been created and the disk successfully provisioned, a pod can be created with access to the disk. The following manifest creates a basic NGINX pod that uses the persistent volume claim namedultra-diskto mount the Azure disk at the path/mnt/azure.
/mnt/azure
Create a file namednginx-ultra.yamland copy in the following manifest:kind: Pod
apiVersion: v1
metadata:
  name: nginx-ultra
spec:
  containers:
 - name: nginx-ultra
    image: mcr.microsoft.com/oss/nginx/nginx:1.15.5-alpine
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        cpu: 250m
        memory: 256Mi
    volumeMounts:
    - mountPath: "/mnt/azure"
      name: volume
  volumes:
    - name: volume
      persistentVolumeClaim:
        claimName: ultra-disk
Create a file namednginx-ultra.yamland copy in the following manifest:
nginx-ultra.yaml
kind: Pod
apiVersion: v1
metadata:
  name: nginx-ultra
spec:
  containers:
 - name: nginx-ultra
    image: mcr.microsoft.com/oss/nginx/nginx:1.15.5-alpine
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        cpu: 250m
        memory: 256Mi
    volumeMounts:
    - mountPath: "/mnt/azure"
      name: volume
  volumes:
    - name: volume
      persistentVolumeClaim:
        claimName: ultra-disk
kind: Pod
apiVersion: v1
metadata:
  name: nginx-ultra
spec:
  containers:
 - name: nginx-ultra
    image: mcr.microsoft.com/oss/nginx/nginx:1.15.5-alpine
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        cpu: 250m
        memory: 256Mi
    volumeMounts:
    - mountPath: "/mnt/azure"
      name: volume
  volumes:
    - name: volume
      persistentVolumeClaim:
        claimName: ultra-disk
Create the pod usingkubectl applycommand and specify yournginx-ultra.yamlfile.kubectl apply -f nginx-ultra.yamlYour output should resemble the following example output:pod/nginx-ultra createdYou now have a running pod with your Azure disk mounted in the/mnt/azuredirectory.
Create the pod usingkubectl applycommand and specify yournginx-ultra.yamlfile.
kubectl apply
nginx-ultra.yaml
kubectl apply -f nginx-ultra.yaml
kubectl apply -f nginx-ultra.yaml
Your output should resemble the following example output:
pod/nginx-ultra created
pod/nginx-ultra created
You now have a running pod with your Azure disk mounted in the/mnt/azuredirectory.
/mnt/azure
See your configuration details using thekubectl describe podcommand and specify yournginx-ultra.yamlfile.kubectl describe pod nginx-ultraYour output should resemble the following example output:[...]
Volumes:
  volume:
    Type:       PersistentVolumeClaim (a reference to a PersistentVolumeClaim in the same namespace)
    ClaimName:  azure-managed-disk
    ReadOnly:   false
  default-token-smm2n:
    Type:        Secret (a volume populated by a Secret)
    SecretName:  default-token-smm2n
    Optional:    false
[...]
Events:
  Type    Reason                 Age   From                               Message
  ----    ------                 ----  ----                               -------
  Normal  Scheduled              2m    default-scheduler                  Successfully assigned mypod to aks-nodepool1-79590246-0
  Normal  SuccessfulMountVolume  2m    kubelet, aks-nodepool1-79590246-0  MountVolume.SetUp succeeded for volume "default-token-smm2n"
  Normal  SuccessfulMountVolume  1m    kubelet, aks-nodepool1-79590246-0  MountVolume.SetUp succeeded for volume "pvc-faf0f176-8b8d-11e8-923b-deb28c58d242"
[...]
See your configuration details using thekubectl describe podcommand and specify yournginx-ultra.yamlfile.
kubectl describe pod
nginx-ultra.yaml
kubectl describe pod nginx-ultra
kubectl describe pod nginx-ultra
Your output should resemble the following example output:
[...]
Volumes:
  volume:
    Type:       PersistentVolumeClaim (a reference to a PersistentVolumeClaim in the same namespace)
    ClaimName:  azure-managed-disk
    ReadOnly:   false
  default-token-smm2n:
    Type:        Secret (a volume populated by a Secret)
    SecretName:  default-token-smm2n
    Optional:    false
[...]
Events:
  Type    Reason                 Age   From                               Message
  ----    ------                 ----  ----                               -------
  Normal  Scheduled              2m    default-scheduler                  Successfully assigned mypod to aks-nodepool1-79590246-0
  Normal  SuccessfulMountVolume  2m    kubelet, aks-nodepool1-79590246-0  MountVolume.SetUp succeeded for volume "default-token-smm2n"
  Normal  SuccessfulMountVolume  1m    kubelet, aks-nodepool1-79590246-0  MountVolume.SetUp succeeded for volume "pvc-faf0f176-8b8d-11e8-923b-deb28c58d242"
[...]
[...]
Volumes:
  volume:
    Type:       PersistentVolumeClaim (a reference to a PersistentVolumeClaim in the same namespace)
    ClaimName:  azure-managed-disk
    ReadOnly:   false
  default-token-smm2n:
    Type:        Secret (a volume populated by a Secret)
    SecretName:  default-token-smm2n
    Optional:    false
[...]
Events:
  Type    Reason                 Age   From                               Message
  ----    ------                 ----  ----                               -------
  Normal  Scheduled              2m    default-scheduler                  Successfully assigned mypod to aks-nodepool1-79590246-0
  Normal  SuccessfulMountVolume  2m    kubelet, aks-nodepool1-79590246-0  MountVolume.SetUp succeeded for volume "default-token-smm2n"
  Normal  SuccessfulMountVolume  1m    kubelet, aks-nodepool1-79590246-0  MountVolume.SetUp succeeded for volume "pvc-faf0f176-8b8d-11e8-923b-deb28c58d242"
[...]
Next steps
For more about ultra disks, seeUsing Azure ultra disks.
For more about storage best practices, seeBest practices for storage and backups in AKS.
Azure Kubernetes Service

Additional resources