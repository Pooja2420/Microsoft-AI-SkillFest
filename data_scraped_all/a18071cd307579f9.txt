Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Custom certificate authority (CA) in Azure Kubernetes Service (AKS)
Article
2025-04-15
8 contributors
In this article
Custom Certificate Authority (CA) allows you to add up to 10 base64-encoded certificates to your node's trust store. This feature is often needed when CAs are required to be present on the node, for example when connecting to a private registry.
This article shows you how to create custom CAs and apply them to your AKS clusters.
Prerequisites
An Azure subscription. If you don't have an Azure subscription, create afree account.
Custom Certificate Authority is available as GA in the2025-01-01 GA API. It isn't yet available in the CLI until May 2025. To use the GA feature in CLI before release, you can use theaz restcommand to add custom certificates during cluster creation.
az rest
A base64 encoded certificate string or a text file with certificate.
Limitations
Windows node pools aren't supported.
Installing different CAs in the same cluster isn't supported.
Install CAs on your node's trust store
Create a file containing CAs.Create a text file containing up to 10 blank line separated certificates. When this file is passed to your cluster, these certificates are installed in your node's trust stores.Example text file:-----BEGIN CERTIFICATE-----
    cert1
    -----END CERTIFICATE-----

    -----BEGIN CERTIFICATE-----
    cert2
    -----END CERTIFICATE-----Before proceeding to the next step, make sure that there are no blank spaces in your text file. These blank spaces will result in an error in the next step if not removed.
Create a file containing CAs.
Create a text file containing up to 10 blank line separated certificates. When this file is passed to your cluster, these certificates are installed in your node's trust stores.
Example text file:
-----BEGIN CERTIFICATE-----
    cert1
    -----END CERTIFICATE-----

    -----BEGIN CERTIFICATE-----
    cert2
    -----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
    cert1
    -----END CERTIFICATE-----

    -----BEGIN CERTIFICATE-----
    cert2
    -----END CERTIFICATE-----
Before proceeding to the next step, make sure that there are no blank spaces in your text file. These blank spaces will result in an error in the next step if not removed.
Pass certificates to your cluster.NoteCustom Certificate Authority is available as GA in the2025-01-01 GA API. It isn't yet available in the CLI until May 2025. To use the GA feature in CLI before release, you can use theaz restcommand to add custom certificates during cluster creation.
Pass certificates to your cluster.
Note
Custom Certificate Authority is available as GA in the2025-01-01 GA API. It isn't yet available in the CLI until May 2025. To use the GA feature in CLI before release, you can use theaz restcommand to add custom certificates during cluster creation.
az rest
Create an AKS clusterusing theaz aks createcommand.
Create an AKS clusterusing theaz aks createcommand.
az aks create
Save the configuration of your cluster in a JSON file:az rest --method get \
  --url "/subscriptions/<subscription-id>/resourceGroups/<resource-grou-name>/providers/Microsoft.ContainerService/managedClusters/<cluster-name>?api-version=2025-01-01" > body.json
Save the configuration of your cluster in a JSON file:
az rest --method get \
  --url "/subscriptions/<subscription-id>/resourceGroups/<resource-grou-name>/providers/Microsoft.ContainerService/managedClusters/<cluster-name>?api-version=2025-01-01" > body.json
az rest --method get \
  --url "/subscriptions/<subscription-id>/resourceGroups/<resource-grou-name>/providers/Microsoft.ContainerService/managedClusters/<cluster-name>?api-version=2025-01-01" > body.json
Modify the json file to add customCATrustCertificates to the security profile of that cluster."securityProfile": {
    "azureKeyVaultKms": null,
    "customCaTrustCertificates": [
        "values"
Modify the json file to add customCATrustCertificates to the security profile of that cluster.
"securityProfile": {
    "azureKeyVaultKms": null,
    "customCaTrustCertificates": [
        "values"
"securityProfile": {
    "azureKeyVaultKms": null,
    "customCaTrustCertificates": [
        "values"
Pass the updated JSON file to add the certificates to the node's trust storeaz rest --method put \
  --url "/subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/Microsoft.ContainerService/managedClusters/<cluster-name>?api-version=2025-01-01" --body @body.jsonYou can use theaz aks createoraz aks updateto pass certificates to your cluster. Once the operation completes, the certificates are installed in your node's trust stores.Install CAs during cluster creation using theaz aks createcommand and specifying your text file for the--custom-ca-trust-certificatesparameter.az aks create \
    --resource-group <resource-group-name> \
    --name <cluster-name> \
    --node-count 2 \
    --custom-ca-trust-certificates FileWithCAs \
    --generate-ssh-keysInstall CAs during cluster update using theaz aks updatecommand and specifying your text file for the--custom-ca-trust-certificatesparameter.az aks update \
    --resource-group <resource-group-name> \
    --name <cluster-name> \
    --custom-ca-trust-certificates <path-to-ca-file>NoteThis operation triggers a model update to ensure all existing nodes have the same CAs installed for correct provisioning. AKS creates new nodes, drains existing nodes, deletes existing nodes, and replaces them with nodes that have the new set of CAs installed.
Pass the updated JSON file to add the certificates to the node's trust store
az rest --method put \
  --url "/subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/Microsoft.ContainerService/managedClusters/<cluster-name>?api-version=2025-01-01" --body @body.json
az rest --method put \
  --url "/subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/Microsoft.ContainerService/managedClusters/<cluster-name>?api-version=2025-01-01" --body @body.json
You can use theaz aks createoraz aks updateto pass certificates to your cluster. Once the operation completes, the certificates are installed in your node's trust stores.
az aks create
az aks update
Install CAs during cluster creation using theaz aks createcommand and specifying your text file for the--custom-ca-trust-certificatesparameter.az aks create \
    --resource-group <resource-group-name> \
    --name <cluster-name> \
    --node-count 2 \
    --custom-ca-trust-certificates FileWithCAs \
    --generate-ssh-keys
Install CAs during cluster creation using theaz aks createcommand and specifying your text file for the--custom-ca-trust-certificatesparameter.
az aks create
--custom-ca-trust-certificates
az aks create \
    --resource-group <resource-group-name> \
    --name <cluster-name> \
    --node-count 2 \
    --custom-ca-trust-certificates FileWithCAs \
    --generate-ssh-keys
az aks create \
    --resource-group <resource-group-name> \
    --name <cluster-name> \
    --node-count 2 \
    --custom-ca-trust-certificates FileWithCAs \
    --generate-ssh-keys
Install CAs during cluster update using theaz aks updatecommand and specifying your text file for the--custom-ca-trust-certificatesparameter.az aks update \
    --resource-group <resource-group-name> \
    --name <cluster-name> \
    --custom-ca-trust-certificates <path-to-ca-file>
Install CAs during cluster update using theaz aks updatecommand and specifying your text file for the--custom-ca-trust-certificatesparameter.
az aks update
--custom-ca-trust-certificates
az aks update \
    --resource-group <resource-group-name> \
    --name <cluster-name> \
    --custom-ca-trust-certificates <path-to-ca-file>
az aks update \
    --resource-group <resource-group-name> \
    --name <cluster-name> \
    --custom-ca-trust-certificates <path-to-ca-file>
Note
This operation triggers a model update to ensure all existing nodes have the same CAs installed for correct provisioning. AKS creates new nodes, drains existing nodes, deletes existing nodes, and replaces them with nodes that have the new set of CAs installed.
Check that CAs are installed.
Check that CAs are installed.
Use theaz aks showcommand to check that CAs are installed.
az aks show
az aks show -g <resource-group-name> -n <cluster-name> | grep securityProfile -A 4
az aks show -g <resource-group-name> -n <cluster-name> | grep securityProfile -A 4
The securityProfile output should include your Custom CA Trust Certificates.
"securityProfile": {
    "azureKeyVaultKms": null,
    "customCaTrustCertificates": [
        "values"
"securityProfile": {
    "azureKeyVaultKms": null,
    "customCaTrustCertificates": [
        "values"
Troubleshooting
Formatting error
Adding certificates to a cluster can result in an error if the file with the certificates isn't formatted properly.
failed to decode one of SecurityProfile.CustomCATrustCertificates to PEM after base64 decoding
failed to decode one of SecurityProfile.CustomCATrustCertificates to PEM after base64 decoding
If you encounter this error, you should check that your input file has no extra new lines, white spaces, or data other than correctly formatted certificates as shown in the example file.
Feature is enabled and secret with CAs is added, but operations are failing with X.509 Certificate Signed by Unknown Authority error
AKS requires certs passed in the user-created secret to be properly formatted and base64 encoded. Make sure the CAs you passed are properly base64 encoded and that files with CAs don't have CRLF line breaks.
Certificates passed to--custom-ca-trust-certificatesshouldn't be base64 encoded.
--custom-ca-trust-certificates
From the node's shell, runsystemctl restart containerd. Once containerd is restarts, the new certs will be picked up by the container runtime.
systemctl restart containerd
Next steps
For more information on AKS security best practices, seeBest practices for cluster security and upgrades in Azure Kubernetes Service (AKS).
Azure Kubernetes Service

Additional resources