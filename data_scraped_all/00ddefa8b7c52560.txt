Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Quickstart: Deploy an Azure Kubernetes Service (AKS) cluster using Azure portal
Article
2024-08-09
12 contributors
In this article
Azure Kubernetes Service (AKS) is a managed Kubernetes service that lets you quickly deploy and manage clusters. In this quickstart, you:
Deploy an AKS cluster using the Azure portal.
Run a sample multi-container application with a group of microservices and web front ends simulating a retail scenario.
Note
To get started with quickly provisioning an AKS cluster, this article includes steps to deploy a cluster with default settings for evaluation purposes only. Before deploying a production-ready cluster, we recommend that you familiarize yourself with ourbaseline reference architectureto consider how it aligns with your business requirements.
Before you begin
This quickstart assumes a basic understanding of Kubernetes concepts. For more information, seeKubernetes core concepts for Azure Kubernetes Service (AKS).
If you don't have anAzure subscription, create anAzure free accountbefore you begin.
If you're unfamiliar with the Azure Cloud Shell, reviewOverview of Azure Cloud Shell.
Make sure that the identity you use to create your cluster has the appropriate minimum permissions. For more details on access and identity for AKS, seeAccess and identity options for Azure Kubernetes Service (AKS).
Note
The Azure Linux node pool is now generally available (GA). To learn about the benefits and deployment steps, see theIntroduction to the Azure Linux Container Host for AKS.
Create an AKS cluster
Sign in to theAzure portal.
Sign in to theAzure portal.
On the Azure portal home page, selectCreate a resource.
On the Azure portal home page, selectCreate a resource.
In theCategoriessection, selectContainers>Azure Kubernetes Service (AKS).
In theCategoriessection, selectContainers>Azure Kubernetes Service (AKS).
On theBasicstab, configure the following settings:UnderProject details:Subscription: Select the Azure subscription you want to use for this AKS cluster.Resource group: SelectCreate new, enter a resource group name, such asmyResourceGroup, and then selectOk. While you can select an existing resource group, for testing or evaluation purposes, we recommend creating a resource group to temporarily host these resources and avoid impacting your production or development workloads.UnderCluster details:Cluster preset configuration: SelectDev/Test. For more details on preset configurations, seeCluster configuration presets in the Azure portal.NoteYou can change the preset configuration when creating your cluster by selectingCompare presetsand choosing a different option.Kubernetes cluster name: Enter a cluster name, such asmyAKSCluster.Region: Select a region, such asEast US 2.Availability zones: SelectNone.AKS pricing tier: SelectFree.Leave the default values for the remaining settings, and selectNext.
On theBasicstab, configure the following settings:
UnderProject details:Subscription: Select the Azure subscription you want to use for this AKS cluster.Resource group: SelectCreate new, enter a resource group name, such asmyResourceGroup, and then selectOk. While you can select an existing resource group, for testing or evaluation purposes, we recommend creating a resource group to temporarily host these resources and avoid impacting your production or development workloads.
Subscription: Select the Azure subscription you want to use for this AKS cluster.
Resource group: SelectCreate new, enter a resource group name, such asmyResourceGroup, and then selectOk. While you can select an existing resource group, for testing or evaluation purposes, we recommend creating a resource group to temporarily host these resources and avoid impacting your production or development workloads.
UnderCluster details:Cluster preset configuration: SelectDev/Test. For more details on preset configurations, seeCluster configuration presets in the Azure portal.NoteYou can change the preset configuration when creating your cluster by selectingCompare presetsand choosing a different option.Kubernetes cluster name: Enter a cluster name, such asmyAKSCluster.Region: Select a region, such asEast US 2.Availability zones: SelectNone.AKS pricing tier: SelectFree.Leave the default values for the remaining settings, and selectNext.
Cluster preset configuration: SelectDev/Test. For more details on preset configurations, seeCluster configuration presets in the Azure portal.NoteYou can change the preset configuration when creating your cluster by selectingCompare presetsand choosing a different option.
Cluster preset configuration: SelectDev/Test. For more details on preset configurations, seeCluster configuration presets in the Azure portal.
Note
You can change the preset configuration when creating your cluster by selectingCompare presetsand choosing a different option.
Kubernetes cluster name: Enter a cluster name, such asmyAKSCluster.
Kubernetes cluster name: Enter a cluster name, such asmyAKSCluster.
Region: Select a region, such asEast US 2.
Region: Select a region, such asEast US 2.
Availability zones: SelectNone.
Availability zones: SelectNone.
AKS pricing tier: SelectFree.
AKS pricing tier: SelectFree.
Leave the default values for the remaining settings, and selectNext.
Leave the default values for the remaining settings, and selectNext.

On theNode poolstab, configure the following settings:SelectAdd node pooland enter aNode pool name, such asnplinux.Mode: SelectUser.OS SKU: SelectUbuntu Linux.Availability zones: SelectNone.Leave theEnable Azure Spot instancescheckbox unchecked.Node size: SelectChoose a size. On theSelect a VM sizepage, selectD2s_v3, and then selectSelect.Leave the default values for the remaining settings, and selectAdd.
On theNode poolstab, configure the following settings:
SelectAdd node pooland enter aNode pool name, such asnplinux.
SelectAdd node pooland enter aNode pool name, such asnplinux.
Mode: SelectUser.
Mode: SelectUser.
OS SKU: SelectUbuntu Linux.
OS SKU: SelectUbuntu Linux.
Availability zones: SelectNone.
Availability zones: SelectNone.
Leave theEnable Azure Spot instancescheckbox unchecked.
Leave theEnable Azure Spot instancescheckbox unchecked.
Node size: SelectChoose a size. On theSelect a VM sizepage, selectD2s_v3, and then selectSelect.
Node size: SelectChoose a size. On theSelect a VM sizepage, selectD2s_v3, and then selectSelect.
Leave the default values for the remaining settings, and selectAdd.
Leave the default values for the remaining settings, and selectAdd.

SelectReview + createto run validation on the cluster configuration. After validation completes, selectCreate.It takes a few minutes to create the AKS cluster. When your deployment is complete, navigate to your resource by selectingGo to resource, or by browsing to the AKS cluster resource group and selecting the AKS resource.
SelectReview + createto run validation on the cluster configuration. After validation completes, selectCreate.
It takes a few minutes to create the AKS cluster. When your deployment is complete, navigate to your resource by selectingGo to resource, or by browsing to the AKS cluster resource group and selecting the AKS resource.
Connect to the cluster
You use the Kubernetes command-line client,kubectl, to manage Kubernetes clusters.kubectlis already installed if you use Azure Cloud Shell. If you're unfamiliar with the Cloud Shell, reviewOverview of Azure Cloud Shell.
kubectl
If you're using Cloud Shell, open it with the>_button on the top of the Azure portal. If you're using PowerShell locally, connect to Azure via theConnect-AzAccountcommand. If you're using Azure CLI locally, connect to Azure via theaz logincommand.
>_
Connect-AzAccount
az login
Azure CLI
Azure PowerShell
Configurekubectlto connect to your Kubernetes cluster using theaz aks get-credentialscommand. This command downloads credentials and configures the Kubernetes CLI to use them.az aks get-credentials --resource-group myResourceGroup --name myAKSCluster
Configurekubectlto connect to your Kubernetes cluster using theaz aks get-credentialscommand. This command downloads credentials and configures the Kubernetes CLI to use them.
kubectl
az aks get-credentials
az aks get-credentials --resource-group myResourceGroup --name myAKSCluster
az aks get-credentials --resource-group myResourceGroup --name myAKSCluster
Verify the connection to your cluster usingkubectl getto return a list of the cluster nodes.kubectl get nodesThe following example output shows the single node created in the previous steps. Make sure the node status isReady.NAME                       STATUS   ROLES   AGE     VERSION
aks-nodepool1-31718369-0   Ready    agent   6m44s   v1.15.10
Verify the connection to your cluster usingkubectl getto return a list of the cluster nodes.
kubectl get
kubectl get nodes
kubectl get nodes
The following example output shows the single node created in the previous steps. Make sure the node status isReady.
NAME                       STATUS   ROLES   AGE     VERSION
aks-nodepool1-31718369-0   Ready    agent   6m44s   v1.15.10
NAME                       STATUS   ROLES   AGE     VERSION
aks-nodepool1-31718369-0   Ready    agent   6m44s   v1.15.10
Configurekubectlto connect to your Kubernetes cluster using theImport-AzAksCredentialcmdlet. This command downloads credentials and configures the Kubernetes CLI to use them.Import-AzAksCredential -ResourceGroupName myResourceGroup -Name myAKSCluster
Configurekubectlto connect to your Kubernetes cluster using theImport-AzAksCredentialcmdlet. This command downloads credentials and configures the Kubernetes CLI to use them.
kubectl
Import-AzAksCredential
Import-AzAksCredential -ResourceGroupName myResourceGroup -Name myAKSCluster
Import-AzAksCredential -ResourceGroupName myResourceGroup -Name myAKSCluster
Verify the connection to your cluster usingkubectl getto return a list of the cluster nodes.kubectl get nodesThe following example output shows the single node created in the previous steps. Make sure the node status isReady.NAME                       STATUS  ROLES   AGE     VERSION
aks-nodepool1-31718369-0   Ready   agent   6m44s   v1.15.10
Verify the connection to your cluster usingkubectl getto return a list of the cluster nodes.
kubectl get
kubectl get nodes
kubectl get nodes
The following example output shows the single node created in the previous steps. Make sure the node status isReady.
NAME                       STATUS  ROLES   AGE     VERSION
aks-nodepool1-31718369-0   Ready   agent   6m44s   v1.15.10
NAME                       STATUS  ROLES   AGE     VERSION
aks-nodepool1-31718369-0   Ready   agent   6m44s   v1.15.10
Deploy the application
You use a manifest file to create all the objects required to run theAKS Store application. A Kubernetes manifest file defines a cluster's desired state, such as which container images to run. The manifest includes the following Kubernetes deployments and services:

Store front: Web application for customers to view products and place orders.
Product service: Shows product information.
Order service: Places orders.
Rabbit MQ: Message queue for an order queue.
Note
We don't recommend running stateful containers, such as Rabbit MQ, without persistent storage for production. These are used here for simplicity, but we recommend using managed services, such as Azure CosmosDB or Azure Service Bus.
In the Cloud Shell, open an editor and create a file namedaks-store-quickstart.yaml.
In the Cloud Shell, open an editor and create a file namedaks-store-quickstart.yaml.
aks-store-quickstart.yaml
Paste the following manifest into the editor:apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: rabbitmq
spec:
  serviceName: rabbitmq
  replicas: 1
  selector:
    matchLabels:
      app: rabbitmq
  template:
    metadata:
      labels:
        app: rabbitmq
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: rabbitmq
        image: mcr.microsoft.com/mirror/docker/library/rabbitmq:3.10-management-alpine
        ports:
        - containerPort: 5672
          name: rabbitmq-amqp
        - containerPort: 15672
          name: rabbitmq-http
        env:
        - name: RABBITMQ_DEFAULT_USER
          value: "username"
        - name: RABBITMQ_DEFAULT_PASS
          value: "password"
        resources:
          requests:
            cpu: 10m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        volumeMounts:
        - name: rabbitmq-enabled-plugins
          mountPath: /etc/rabbitmq/enabled_plugins
          subPath: enabled_plugins
      volumes:
      - name: rabbitmq-enabled-plugins
        configMap:
          name: rabbitmq-enabled-plugins
          items:
          - key: rabbitmq_enabled_plugins
            path: enabled_plugins
---
apiVersion: v1
data:
  rabbitmq_enabled_plugins: |
    [rabbitmq_management,rabbitmq_prometheus,rabbitmq_amqp1_0].
kind: ConfigMap
metadata:
  name: rabbitmq-enabled-plugins            
---
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq
spec:
  selector:
    app: rabbitmq
  ports:
    - name: rabbitmq-amqp
      port: 5672
      targetPort: 5672
    - name: rabbitmq-http
      port: 15672
      targetPort: 15672
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: order-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: order-service
  template:
    metadata:
      labels:
        app: order-service
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: order-service
        image: ghcr.io/azure-samples/aks-store-demo/order-service:latest
        ports:
        - containerPort: 3000
        env:
        - name: ORDER_QUEUE_HOSTNAME
          value: "rabbitmq"
        - name: ORDER_QUEUE_PORT
          value: "5672"
        - name: ORDER_QUEUE_USERNAME
          value: "username"
        - name: ORDER_QUEUE_PASSWORD
          value: "password"
        - name: ORDER_QUEUE_NAME
          value: "orders"
        - name: FASTIFY_ADDRESS
          value: "0.0.0.0"
        resources:
          requests:
            cpu: 1m
            memory: 50Mi
          limits:
            cpu: 75m
            memory: 128Mi
        startupProbe:
          httpGet:
            path: /health
            port: 3000
          failureThreshold: 5
          initialDelaySeconds: 20
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          failureThreshold: 3
          initialDelaySeconds: 3
          periodSeconds: 5
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          failureThreshold: 5
          initialDelaySeconds: 3
          periodSeconds: 3
      initContainers:
      - name: wait-for-rabbitmq
        image: busybox
        command: ['sh', '-c', 'until nc -zv rabbitmq 5672; do echo waiting for rabbitmq; sleep 2; done;']
        resources:
          requests:
            cpu: 1m
            memory: 50Mi
          limits:
            cpu: 75m
            memory: 128Mi    
---
apiVersion: v1
kind: Service
metadata:
  name: order-service
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 3000
    targetPort: 3000
  selector:
    app: order-service
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: product-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: product-service
  template:
    metadata:
      labels:
        app: product-service
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: product-service
        image: ghcr.io/azure-samples/aks-store-demo/product-service:latest
        ports:
        - containerPort: 3002
        env: 
        - name: AI_SERVICE_URL
          value: "http://ai-service:5001/"
        resources:
          requests:
            cpu: 1m
            memory: 1Mi
          limits:
            cpu: 2m
            memory: 20Mi
        readinessProbe:
          httpGet:
            path: /health
            port: 3002
          failureThreshold: 3
          initialDelaySeconds: 3
          periodSeconds: 5
        livenessProbe:
          httpGet:
            path: /health
            port: 3002
          failureThreshold: 5
          initialDelaySeconds: 3
          periodSeconds: 3
---
apiVersion: v1
kind: Service
metadata:
  name: product-service
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 3002
    targetPort: 3002
  selector:
    app: product-service
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: store-front
spec:
  replicas: 1
  selector:
    matchLabels:
      app: store-front
  template:
    metadata:
      labels:
        app: store-front
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: store-front
        image: ghcr.io/azure-samples/aks-store-demo/store-front:latest
        ports:
        - containerPort: 8080
          name: store-front
        env: 
        - name: VUE_APP_ORDER_SERVICE_URL
          value: "http://order-service:3000/"
        - name: VUE_APP_PRODUCT_SERVICE_URL
          value: "http://product-service:3002/"
        resources:
          requests:
            cpu: 1m
            memory: 200Mi
          limits:
            cpu: 1000m
            memory: 512Mi
        startupProbe:
          httpGet:
            path: /health
            port: 8080
          failureThreshold: 3
          initialDelaySeconds: 5
          periodSeconds: 5
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          failureThreshold: 3
          initialDelaySeconds: 3
          periodSeconds: 3
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          failureThreshold: 5
          initialDelaySeconds: 3
          periodSeconds: 3
---
apiVersion: v1
kind: Service
metadata:
  name: store-front
spec:
  ports:
  - port: 80
    targetPort: 8080
  selector:
    app: store-front
  type: LoadBalancerFor a breakdown of YAML manifest files, seeDeployments and YAML manifests.If you create and save the YAML file locally, then you can upload the manifest file to your default directory in CloudShell by selecting theUpload/Download filesbutton and selecting the file from your local file system.
Paste the following manifest into the editor:
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: rabbitmq
spec:
  serviceName: rabbitmq
  replicas: 1
  selector:
    matchLabels:
      app: rabbitmq
  template:
    metadata:
      labels:
        app: rabbitmq
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: rabbitmq
        image: mcr.microsoft.com/mirror/docker/library/rabbitmq:3.10-management-alpine
        ports:
        - containerPort: 5672
          name: rabbitmq-amqp
        - containerPort: 15672
          name: rabbitmq-http
        env:
        - name: RABBITMQ_DEFAULT_USER
          value: "username"
        - name: RABBITMQ_DEFAULT_PASS
          value: "password"
        resources:
          requests:
            cpu: 10m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        volumeMounts:
        - name: rabbitmq-enabled-plugins
          mountPath: /etc/rabbitmq/enabled_plugins
          subPath: enabled_plugins
      volumes:
      - name: rabbitmq-enabled-plugins
        configMap:
          name: rabbitmq-enabled-plugins
          items:
          - key: rabbitmq_enabled_plugins
            path: enabled_plugins
---
apiVersion: v1
data:
  rabbitmq_enabled_plugins: |
    [rabbitmq_management,rabbitmq_prometheus,rabbitmq_amqp1_0].
kind: ConfigMap
metadata:
  name: rabbitmq-enabled-plugins            
---
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq
spec:
  selector:
    app: rabbitmq
  ports:
    - name: rabbitmq-amqp
      port: 5672
      targetPort: 5672
    - name: rabbitmq-http
      port: 15672
      targetPort: 15672
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: order-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: order-service
  template:
    metadata:
      labels:
        app: order-service
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: order-service
        image: ghcr.io/azure-samples/aks-store-demo/order-service:latest
        ports:
        - containerPort: 3000
        env:
        - name: ORDER_QUEUE_HOSTNAME
          value: "rabbitmq"
        - name: ORDER_QUEUE_PORT
          value: "5672"
        - name: ORDER_QUEUE_USERNAME
          value: "username"
        - name: ORDER_QUEUE_PASSWORD
          value: "password"
        - name: ORDER_QUEUE_NAME
          value: "orders"
        - name: FASTIFY_ADDRESS
          value: "0.0.0.0"
        resources:
          requests:
            cpu: 1m
            memory: 50Mi
          limits:
            cpu: 75m
            memory: 128Mi
        startupProbe:
          httpGet:
            path: /health
            port: 3000
          failureThreshold: 5
          initialDelaySeconds: 20
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          failureThreshold: 3
          initialDelaySeconds: 3
          periodSeconds: 5
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          failureThreshold: 5
          initialDelaySeconds: 3
          periodSeconds: 3
      initContainers:
      - name: wait-for-rabbitmq
        image: busybox
        command: ['sh', '-c', 'until nc -zv rabbitmq 5672; do echo waiting for rabbitmq; sleep 2; done;']
        resources:
          requests:
            cpu: 1m
            memory: 50Mi
          limits:
            cpu: 75m
            memory: 128Mi    
---
apiVersion: v1
kind: Service
metadata:
  name: order-service
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 3000
    targetPort: 3000
  selector:
    app: order-service
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: product-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: product-service
  template:
    metadata:
      labels:
        app: product-service
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: product-service
        image: ghcr.io/azure-samples/aks-store-demo/product-service:latest
        ports:
        - containerPort: 3002
        env: 
        - name: AI_SERVICE_URL
          value: "http://ai-service:5001/"
        resources:
          requests:
            cpu: 1m
            memory: 1Mi
          limits:
            cpu: 2m
            memory: 20Mi
        readinessProbe:
          httpGet:
            path: /health
            port: 3002
          failureThreshold: 3
          initialDelaySeconds: 3
          periodSeconds: 5
        livenessProbe:
          httpGet:
            path: /health
            port: 3002
          failureThreshold: 5
          initialDelaySeconds: 3
          periodSeconds: 3
---
apiVersion: v1
kind: Service
metadata:
  name: product-service
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 3002
    targetPort: 3002
  selector:
    app: product-service
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: store-front
spec:
  replicas: 1
  selector:
    matchLabels:
      app: store-front
  template:
    metadata:
      labels:
        app: store-front
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: store-front
        image: ghcr.io/azure-samples/aks-store-demo/store-front:latest
        ports:
        - containerPort: 8080
          name: store-front
        env: 
        - name: VUE_APP_ORDER_SERVICE_URL
          value: "http://order-service:3000/"
        - name: VUE_APP_PRODUCT_SERVICE_URL
          value: "http://product-service:3002/"
        resources:
          requests:
            cpu: 1m
            memory: 200Mi
          limits:
            cpu: 1000m
            memory: 512Mi
        startupProbe:
          httpGet:
            path: /health
            port: 8080
          failureThreshold: 3
          initialDelaySeconds: 5
          periodSeconds: 5
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          failureThreshold: 3
          initialDelaySeconds: 3
          periodSeconds: 3
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          failureThreshold: 5
          initialDelaySeconds: 3
          periodSeconds: 3
---
apiVersion: v1
kind: Service
metadata:
  name: store-front
spec:
  ports:
  - port: 80
    targetPort: 8080
  selector:
    app: store-front
  type: LoadBalancer
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: rabbitmq
spec:
  serviceName: rabbitmq
  replicas: 1
  selector:
    matchLabels:
      app: rabbitmq
  template:
    metadata:
      labels:
        app: rabbitmq
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: rabbitmq
        image: mcr.microsoft.com/mirror/docker/library/rabbitmq:3.10-management-alpine
        ports:
        - containerPort: 5672
          name: rabbitmq-amqp
        - containerPort: 15672
          name: rabbitmq-http
        env:
        - name: RABBITMQ_DEFAULT_USER
          value: "username"
        - name: RABBITMQ_DEFAULT_PASS
          value: "password"
        resources:
          requests:
            cpu: 10m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        volumeMounts:
        - name: rabbitmq-enabled-plugins
          mountPath: /etc/rabbitmq/enabled_plugins
          subPath: enabled_plugins
      volumes:
      - name: rabbitmq-enabled-plugins
        configMap:
          name: rabbitmq-enabled-plugins
          items:
          - key: rabbitmq_enabled_plugins
            path: enabled_plugins
---
apiVersion: v1
data:
  rabbitmq_enabled_plugins: |
    [rabbitmq_management,rabbitmq_prometheus,rabbitmq_amqp1_0].
kind: ConfigMap
metadata:
  name: rabbitmq-enabled-plugins            
---
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq
spec:
  selector:
    app: rabbitmq
  ports:
    - name: rabbitmq-amqp
      port: 5672
      targetPort: 5672
    - name: rabbitmq-http
      port: 15672
      targetPort: 15672
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: order-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: order-service
  template:
    metadata:
      labels:
        app: order-service
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: order-service
        image: ghcr.io/azure-samples/aks-store-demo/order-service:latest
        ports:
        - containerPort: 3000
        env:
        - name: ORDER_QUEUE_HOSTNAME
          value: "rabbitmq"
        - name: ORDER_QUEUE_PORT
          value: "5672"
        - name: ORDER_QUEUE_USERNAME
          value: "username"
        - name: ORDER_QUEUE_PASSWORD
          value: "password"
        - name: ORDER_QUEUE_NAME
          value: "orders"
        - name: FASTIFY_ADDRESS
          value: "0.0.0.0"
        resources:
          requests:
            cpu: 1m
            memory: 50Mi
          limits:
            cpu: 75m
            memory: 128Mi
        startupProbe:
          httpGet:
            path: /health
            port: 3000
          failureThreshold: 5
          initialDelaySeconds: 20
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          failureThreshold: 3
          initialDelaySeconds: 3
          periodSeconds: 5
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          failureThreshold: 5
          initialDelaySeconds: 3
          periodSeconds: 3
      initContainers:
      - name: wait-for-rabbitmq
        image: busybox
        command: ['sh', '-c', 'until nc -zv rabbitmq 5672; do echo waiting for rabbitmq; sleep 2; done;']
        resources:
          requests:
            cpu: 1m
            memory: 50Mi
          limits:
            cpu: 75m
            memory: 128Mi    
---
apiVersion: v1
kind: Service
metadata:
  name: order-service
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 3000
    targetPort: 3000
  selector:
    app: order-service
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: product-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: product-service
  template:
    metadata:
      labels:
        app: product-service
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: product-service
        image: ghcr.io/azure-samples/aks-store-demo/product-service:latest
        ports:
        - containerPort: 3002
        env: 
        - name: AI_SERVICE_URL
          value: "http://ai-service:5001/"
        resources:
          requests:
            cpu: 1m
            memory: 1Mi
          limits:
            cpu: 2m
            memory: 20Mi
        readinessProbe:
          httpGet:
            path: /health
            port: 3002
          failureThreshold: 3
          initialDelaySeconds: 3
          periodSeconds: 5
        livenessProbe:
          httpGet:
            path: /health
            port: 3002
          failureThreshold: 5
          initialDelaySeconds: 3
          periodSeconds: 3
---
apiVersion: v1
kind: Service
metadata:
  name: product-service
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 3002
    targetPort: 3002
  selector:
    app: product-service
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: store-front
spec:
  replicas: 1
  selector:
    matchLabels:
      app: store-front
  template:
    metadata:
      labels:
        app: store-front
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: store-front
        image: ghcr.io/azure-samples/aks-store-demo/store-front:latest
        ports:
        - containerPort: 8080
          name: store-front
        env: 
        - name: VUE_APP_ORDER_SERVICE_URL
          value: "http://order-service:3000/"
        - name: VUE_APP_PRODUCT_SERVICE_URL
          value: "http://product-service:3002/"
        resources:
          requests:
            cpu: 1m
            memory: 200Mi
          limits:
            cpu: 1000m
            memory: 512Mi
        startupProbe:
          httpGet:
            path: /health
            port: 8080
          failureThreshold: 3
          initialDelaySeconds: 5
          periodSeconds: 5
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          failureThreshold: 3
          initialDelaySeconds: 3
          periodSeconds: 3
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          failureThreshold: 5
          initialDelaySeconds: 3
          periodSeconds: 3
---
apiVersion: v1
kind: Service
metadata:
  name: store-front
spec:
  ports:
  - port: 80
    targetPort: 8080
  selector:
    app: store-front
  type: LoadBalancer
For a breakdown of YAML manifest files, seeDeployments and YAML manifests.
If you create and save the YAML file locally, then you can upload the manifest file to your default directory in CloudShell by selecting theUpload/Download filesbutton and selecting the file from your local file system.
Deploy the application using thekubectl applycommand and specify the name of your YAML manifest:kubectl apply -f aks-store-quickstart.yamlThe following example output shows the deployments and services:deployment.apps/rabbitmq created
service/rabbitmq created
deployment.apps/order-service created
service/order-service created
deployment.apps/product-service created
service/product-service created
deployment.apps/store-front created
service/store-front created
Deploy the application using thekubectl applycommand and specify the name of your YAML manifest:
kubectl apply
kubectl apply -f aks-store-quickstart.yaml
kubectl apply -f aks-store-quickstart.yaml
The following example output shows the deployments and services:
deployment.apps/rabbitmq created
service/rabbitmq created
deployment.apps/order-service created
service/order-service created
deployment.apps/product-service created
service/product-service created
deployment.apps/store-front created
service/store-front created
deployment.apps/rabbitmq created
service/rabbitmq created
deployment.apps/order-service created
service/order-service created
deployment.apps/product-service created
service/product-service created
deployment.apps/store-front created
service/store-front created
Test the application
When the application runs, a Kubernetes service exposes the application front end to the internet. This process can take a few minutes to complete.
Check the status of the deployed pods using thekubectl get podscommand. Make sure all pods areRunningbefore proceeding.kubectl get pods
Check the status of the deployed pods using thekubectl get podscommand. Make sure all pods areRunningbefore proceeding.
kubectl get pods
Running
kubectl get pods
kubectl get pods
Check for a public IP address for thestore-frontapplication. Monitor progress using thekubectl get servicecommand with the--watchargument.kubectl get service store-front --watchTheEXTERNAL-IPoutput for thestore-frontservice initially shows aspending:NAME          TYPE           CLUSTER-IP    EXTERNAL-IP   PORT(S)        AGE
store-front   LoadBalancer   10.0.100.10   <pending>     80:30025/TCP   4h4mOnce theEXTERNAL-IPaddress changes frompendingto an actual public IP address, useCTRL-Cto stop thekubectlwatch process.The following example output shows a valid public IP address assigned to the service:NAME          TYPE           CLUSTER-IP    EXTERNAL-IP    PORT(S)        AGE
store-front   LoadBalancer   10.0.100.10   20.62.159.19   80:30025/TCP   4h5m
Check for a public IP address for thestore-frontapplication. Monitor progress using thekubectl get servicecommand with the--watchargument.
store-front
kubectl get service
--watch
kubectl get service store-front --watch
kubectl get service store-front --watch
TheEXTERNAL-IPoutput for thestore-frontservice initially shows aspending:
store-front
NAME          TYPE           CLUSTER-IP    EXTERNAL-IP   PORT(S)        AGE
store-front   LoadBalancer   10.0.100.10   <pending>     80:30025/TCP   4h4m
NAME          TYPE           CLUSTER-IP    EXTERNAL-IP   PORT(S)        AGE
store-front   LoadBalancer   10.0.100.10   <pending>     80:30025/TCP   4h4m
Once theEXTERNAL-IPaddress changes frompendingto an actual public IP address, useCTRL-Cto stop thekubectlwatch process.
CTRL-C
kubectl
The following example output shows a valid public IP address assigned to the service:
NAME          TYPE           CLUSTER-IP    EXTERNAL-IP    PORT(S)        AGE
store-front   LoadBalancer   10.0.100.10   20.62.159.19   80:30025/TCP   4h5m
NAME          TYPE           CLUSTER-IP    EXTERNAL-IP    PORT(S)        AGE
store-front   LoadBalancer   10.0.100.10   20.62.159.19   80:30025/TCP   4h5m
Open a web browser to the external IP address of your service to see the Azure Store app in action.
Open a web browser to the external IP address of your service to see the Azure Store app in action.

Delete the cluster
If you don't plan on going through theAKS tutorial series, clean up unnecessary resources to avoid Azure charges.
In the Azure portal, navigate to your AKS cluster resource group.
In the Azure portal, navigate to your AKS cluster resource group.
SelectDelete resource group.
SelectDelete resource group.
Enter the name of the resource group to delete, and then selectDelete>Delete.NoteThe AKS cluster was created with a system-assigned managed identity. This identity is managed by the platform and doesn't require removal.
Enter the name of the resource group to delete, and then selectDelete>Delete.
Note
The AKS cluster was created with a system-assigned managed identity. This identity is managed by the platform and doesn't require removal.
Next steps
In this quickstart, you deployed a Kubernetes cluster, and then deployed a simple multi-container application to it. This sample application is for demo purposes only and doesn't represent all the best practices for Kubernetes applications. For guidance on creating full solutions with AKS for production, seeAKS solution guidance.
To learn more about AKS and walk through a complete code-to-deployment example, continue to the Kubernetes cluster tutorial series.
AKS tutorial series
Azure Kubernetes Service

Additional resources