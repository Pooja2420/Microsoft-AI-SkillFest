Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Connection resilience
Article
2024-04-22
5 contributors
Applies to: â Azure Cache for Redis
In this article
Retry commands
Configure your client connections to retry commands with exponential backoff. For more information, seeretry guidelines.
Test resiliency
Test your system's resiliency to connection breaks using arebootto simulate a patch. For more information on testing your performance, seePerformance testing.
TCP settings for Linux-hosted client applications
The default TCP settings in some Linux versions can cause Redis server connections to fail for 13 minutes or more. The default settings can prevent the client application from detecting closed connections and restoring them automatically if the connection wasn't closed gracefully.
The failure to reestablish a connection can happen in situations where the network connection is disrupted or the Redis server goes offline for unplanned maintenance.
We recommend these TCP settings:
net.ipv4.tcp_retries2
For more information about the scenario, seeConnection does not re-establish for 15 minutes when running on Linux. While this discussion is about theStackExchange.Redislibrary, other client libraries running on Linux are affected as well. The explanation is still useful and you can generalize to other libraries.
Using ForceReconnect with StackExchange.Redis
In rare cases,StackExchange.Redisfails to reconnect after a connection is dropped. In these cases, restarting the client or creating a newConnectionMultiplexerfixes the issue. We recommend using a singletonConnectionMultiplexerpattern while allowing apps to force a reconnection periodically. Take a look at the quickstart sample project that best matches the framework and platform your application uses. You can see an example of this code pattern in ourquickstarts.
ConnectionMultiplexer
ConnectionMultiplexer
Users of theConnectionMultiplexermust handle anyObjectDisposedExceptionerrors that might occur as a result of disposing the old one.
ConnectionMultiplexer
ObjectDisposedException
CallForceReconnectAsync()forRedisConnectionExceptionsandRedisSocketExceptions. You can also callForceReconnectAsync()forRedisTimeoutExceptions, but only if you're using generousReconnectMinIntervalandReconnectErrorThreshold. Otherwise, establishing new connections can cause a cascade failure on a server that's timing out because it's already overloaded.
ForceReconnectAsync()
RedisConnectionExceptions
RedisSocketExceptions
ForceReconnectAsync()
RedisTimeoutExceptions
ReconnectMinInterval
ReconnectErrorThreshold
In an ASP.NET application, you can use integrated implementation in theMicrosoft.Extensions.Caching.StackExchangeRedispackage instead of using theStackExchange.Redispackage directly. If you're usingMicrosoft.Extensions.Caching.StackExchangeRedisin an ASP.NET application rather than usingStackExchange.Redisdirectly, you can set theUseForceReconnectproperty to true:
UseForceReconnect
Microsoft.AspNetCore.Caching.StackExchangeRedis.UseForceReconnect = true
Microsoft.AspNetCore.Caching.StackExchangeRedis.UseForceReconnect = true
Configure appropriate timeouts
Two timeout values are important to consider in connection resiliency:connect timeoutandcommand timeout.
Connect timeout
Theconnect timeoutis the time your client waits to establish a connection with Redis server. Configure your client library to use aconnect timeoutof five seconds, giving the system sufficient time to connect even under higher CPU conditions.
connect timeout
connect timeout
A smallconnection timeoutvalue doesn't guarantee a connection is established in that time frame. If something goes wrong (high client CPU, high server CPU, and so on), then a shortconnection timeoutvalue causes the connection attempt to fail. This behavior often makes a bad situation worse. Instead of helping, shorter timeouts aggravate the problem by forcing the system to restart the process of trying to reconnect, which can lead to aconnect -> fail -> retryloop.
connection timeout
connection timeout
Command timeout
Most client libraries have another timeout configuration forcommand timeouts, which is the time the client waits for a response from Redis server. Although we recommend an initial setting of less than five seconds, consider setting thecommand timeouthigher or lower depending on your scenario and the sizes of the values that are stored in your cache.
command timeouts
command timeout
If thecommand timeoutis too small, the connection can look unstable. However, if thecommand timeoutis too large, your application might have to wait for a long time to find out whether the command is going to time out or not.
command timeout
command timeout
Avoid client connection spikes
Avoid creating many connections at the same time when reconnecting after a connection loss. Similar to the way thatshort connect timeoutscan result in longer outages, starting many reconnect attempts at the same time can also increase server load and extend how long it takes for all clients to reconnect successfully.
If you're reconnecting many client instances, consider staggering the new connections to avoid a steep spike in the number of connected clients.
Note
When you use theStackExchange.Redisclient library, setabortConnecttofalsein your connection string.  We recommend letting theConnectionMultiplexerhandle reconnection. For more information, seeStackExchange.Redisbest practices.
abortConnect
false
ConnectionMultiplexer
Avoid leftover connections
Caches have limits on the number of client connections per cache tier. Ensure that when your client application recreates connections that it closes and removes the old connections.
Advance maintenance notification
Use notifications to learn of upcoming maintenance. For more information, seeCan I be notified in advance of a planned maintenance.
Schedule maintenance window
Adjust your cache settings to accommodate maintenance. For more information about creating a maintenance window to reduce any negative effects to your cache, seeUpdate channel and Schedule updates.
More design patterns for resilience
Apply design patterns for resiliency. For more information, seeHow do I make my application resilient.
Idle timeout
Azure Cache for Redis has a 10-minute timeout for idle connections. The 10-minute timeout allows the server to automatically clean up leaky connections or connections orphaned by a client application. Most Redis client libraries have a built-in capability to sendheartbeatorkeepalivecommands periodically to prevent connections from being closed even if there are no requests from the client application.
heartbeat
keepalive
If there's any risk of your connections being idle for 10 minutes, configure thekeepaliveinterval to a value less than 10 minutes. If your application is using a client library that doesn't have native support forkeepalivefunctionality, you can implement it in your application by periodically sending aPINGcommand.
keepalive
keepalive
PING
Related content
Best practices for development
Azure Cache for Redis development FAQ
Failover and patching
Feedback
Was this page helpful?
Additional resources