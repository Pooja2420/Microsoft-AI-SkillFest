Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Azure resource providers and types
Article
2025-02-12
7 contributors
In this article
An Azure resource provider is a set of REST operations that support functionality for a specific Azure service. For example, the Azure Key Vault service consists of a resource provider namedMicrosoft.KeyVault. The resource provider definesREST operationsfor managing vaults, secrets, keys, and certificates.
The resource provider defines the Azure resources you can deploy to your account. A resource type's name follows the format:{resource-provider}/{resource-type}. The resource type for a key vault isMicrosoft.KeyVault/vaults.
In this article, you learn how to:
View all resource providers in Azure.
Check registration status of a resource provider.
Register a resource provider.
View resource types for a resource provider.
View valid locations for a resource type.
View valid API versions for a resource type.
For a list that maps resource providers to Azure services, seeAzure resource providers and types.
Register resource provider
Before you use a resource provider, make sure your Azure subscription is registered for the resource provider. Registration configures your subscription to work with the resource provider.
Important
Register a resource provider only when you're ready to use it. This registration step helps maintain least privileges within your subscription. A malicious user can't use unregistered resource providers.
When you register a resource provider, Microsoft adds an app for the resource provider. Registering unnecessary resource providers can cause apps that you don't recognize to appear in your Microsoft Entra tenant. The Windows Azure Service Management API typically adds these apps. To limit unnecessary apps in your tenant, only register the resource providers that you need.
Some resource providers are registered by default. For a list of examples, seeResource providers for Azure services.
When you take certain actions, Azure automatically registers other resource providers. When you create a resource in the Azure portal, the portal typically registers the resource provider for you. When you deploy an Azure Resource Manager template or Bicep file, Azure automatically registers the resource providers defined in the template. Sometimes, a resource in the template requires supporting resources that aren't in the template. Common examples are monitoring or security resources. You need to register those resource providers manually.
You might need to manually register a resource provider during other scenarios.
Important
Your application codeshouldn't block the creation of resourcesfor a resource provider that's in theregisteringstate. When you register the resource provider, the operation is done individually for each supported region. To create resources in a region, the registration only needs to be completed in that region. When your application doesn't block a resource provider in the registering state, it can continue sooner than waiting for all regions to complete.
You must have permission to do the/register/actionoperation for the resource provider. The permission is included in the Contributor and Owner roles.
/register/action
You can't unregister a resource provider when you still have resource types from that resource provider in your subscription.
Reregister a resource provider when the resource provider supports new locations that you need to use.
Azure portal
Register resource provider
To see all resource providers and the registration status for your subscription:
Sign in to theAzure portal.
Sign in to theAzure portal.
On the Azure portal menu, search forSubscriptions. Select it from the available options.
On the Azure portal menu, search forSubscriptions. Select it from the available options.

Select the subscription you want to view.
Select the subscription you want to view.
On the left menu and underSettings, selectResource providers.
On the left menu and underSettings, selectResource providers.

Find the resource provider you want to register.
Find the resource provider you want to register.

Select the resource provider to see the details of the resource provider.
Select the resource provider to see the details of the resource provider.

Select the resource provider, and selectRegister. To maintain least privileges in your subscription, only register the resource providers that you're ready to use.ImportantAsnoted earlier,don't block the creation of resourcesfor a resource provider that's in theregisteringstate. When your application doesn't block a resource provider in the registering state, it can continue sooner than waiting for all regions to complete.
Select the resource provider, and selectRegister. To maintain least privileges in your subscription, only register the resource providers that you're ready to use.

Important
Asnoted earlier,don't block the creation of resourcesfor a resource provider that's in theregisteringstate. When your application doesn't block a resource provider in the registering state, it can continue sooner than waiting for all regions to complete.
Re-registera resource provider to use locations that you added since the previous registration.
Re-registera resource provider to use locations that you added since the previous registration.

View resource provider
To see information for a particular resource provider:
Sign in to theAzure portal.
Sign in to theAzure portal.
SelectAll servicesin the Azure portal menu.
SelectAll servicesin the Azure portal menu.
In theAll servicesbox, enterresource explorer, and selectResource Explorer.
In theAll servicesbox, enterresource explorer, and selectResource Explorer.

Select the right arrow to expandProviders.
Select the right arrow to expandProviders.

Expand the resource provider and resource type that you want to view.
Expand the resource provider and resource type that you want to view.
Resource Manager is supported in all regions, but the resources you deploy might not be supported in all regions. Also, there might be limitations on your subscription that prevent you from using some regions that support the resource. Resource Explorer displays valid locations for the resource type.
Resource Manager is supported in all regions, but the resources you deploy might not be supported in all regions. Also, there might be limitations on your subscription that prevent you from using some regions that support the resource. Resource Explorer displays valid locations for the resource type.

The API version corresponds to a version of the resource provider's REST API operations. As a resource provider enables new features, it releases a new version of the REST API. Resource Explorer displays valid API versions for the resource type.
The API version corresponds to a version of the resource provider's REST API operations. As a resource provider enables new features, it releases a new version of the REST API. Resource Explorer displays valid API versions for the resource type.

Azure PowerShell
To see all resource providers in Azure and the registration status for your subscription, use:
Get-AzResourceProvider -ListAvailable | Select-Object ProviderNamespace, RegistrationState
Get-AzResourceProvider -ListAvailable | Select-Object ProviderNamespace, RegistrationState
The command returns:
ProviderNamespace                RegistrationState
-------------------------------- ------------------
Microsoft.ClassicCompute         Registered
Microsoft.ClassicNetwork         Registered
Microsoft.ClassicStorage         Registered
Microsoft.CognitiveServices      Registered
...
ProviderNamespace                RegistrationState
-------------------------------- ------------------
Microsoft.ClassicCompute         Registered
Microsoft.ClassicNetwork         Registered
Microsoft.ClassicStorage         Registered
Microsoft.CognitiveServices      Registered
...
To see all registered resource providers for your subscription, use:
Get-AzResourceProvider -ListAvailable | Where-Object RegistrationState -eq "Registered" | Select-Object ProviderNamespace, RegistrationState | Sort-Object ProviderNamespace
Get-AzResourceProvider -ListAvailable | Where-Object RegistrationState -eq "Registered" | Select-Object ProviderNamespace, RegistrationState | Sort-Object ProviderNamespace
To maintain least privileges in your subscription, only register those resource providers that you're ready to use. To register a resource provider, use:
Register-AzResourceProvider -ProviderNamespace Microsoft.Batch
Register-AzResourceProvider -ProviderNamespace Microsoft.Batch
The command returns:
ProviderNamespace : Microsoft.Batch
RegistrationState : Registering
ResourceTypes     : {batchAccounts, operations, locations, locations/quotas}
Locations         : {West Europe, East US, East US 2, West US...}
ProviderNamespace : Microsoft.Batch
RegistrationState : Registering
ResourceTypes     : {batchAccounts, operations, locations, locations/quotas}
Locations         : {West Europe, East US, East US 2, West US...}
Important
Asnoted earlier,don't block the creation of resourcesfor a resource provider that's in theregisteringstate. When your application doesn't block a resource provider in the registering state, it can continue sooner than waiting for all regions to complete.
To use locations that Azure added since the previous registration, register a resource provider again. To reregister, run the registration command again.
To see information for a particular resource provider, use:
Get-AzResourceProvider -ProviderNamespace Microsoft.Batch
Get-AzResourceProvider -ProviderNamespace Microsoft.Batch
The command returns:
{ProviderNamespace : Microsoft.Batch
RegistrationState : Registered
ResourceTypes     : {batchAccounts}
Locations         : {West Europe, East US, East US 2, West US...}

...
{ProviderNamespace : Microsoft.Batch
RegistrationState : Registered
ResourceTypes     : {batchAccounts}
Locations         : {West Europe, East US, East US 2, West US...}

...
To see the resource types for a resource provider, use:
(Get-AzResourceProvider -ProviderNamespace Microsoft.Batch).ResourceTypes.ResourceTypeName
(Get-AzResourceProvider -ProviderNamespace Microsoft.Batch).ResourceTypes.ResourceTypeName
The command returns:
batchAccounts
operations
locations
locations/quotas
batchAccounts
operations
locations
locations/quotas
The API version corresponds to a version of the resource provider's REST API operations. As a resource provider enables new features, it releases a new version of the REST API.
To get the available API versions for a resource type, use:
((Get-AzResourceProvider -ProviderNamespace Microsoft.Batch).ResourceTypes | Where-Object ResourceTypeName -eq batchAccounts).ApiVersions
((Get-AzResourceProvider -ProviderNamespace Microsoft.Batch).ResourceTypes | Where-Object ResourceTypeName -eq batchAccounts).ApiVersions
The command returns:
2023-05-01
2022-10-01
2022-06-01
2022-01-01
2021-06-01
2021-01-01
...
2023-05-01
2022-10-01
2022-06-01
2022-01-01
2021-06-01
2021-01-01
...
Resource Manager is supported in all regions, but the resources you deploy might not be supported in all regions. Also, there might be limitations on your subscription that prevent you from using some regions that support the resource.
To get the supported locations for a resource type, use:
((Get-AzResourceProvider -ProviderNamespace Microsoft.Batch).ResourceTypes | Where-Object ResourceTypeName -eq batchAccounts).Locations
((Get-AzResourceProvider -ProviderNamespace Microsoft.Batch).ResourceTypes | Where-Object ResourceTypeName -eq batchAccounts).Locations
The command returns:
West Europe
East US
East US 2
West US
...
West Europe
East US
East US 2
West US
...
Azure CLI
To see all resource providers in Azure and the registration status for your subscription, use:
az provider list --query "[].{Provider:namespace, Status:registrationState}" --out table
az provider list --query "[].{Provider:namespace, Status:registrationState}" --out table
The command returns:
Provider                         Status
-------------------------------- ----------------
Microsoft.ClassicCompute         Registered
Microsoft.ClassicNetwork         Registered
Microsoft.ClassicStorage         Registered
Microsoft.CognitiveServices      Registered
...
Provider                         Status
-------------------------------- ----------------
Microsoft.ClassicCompute         Registered
Microsoft.ClassicNetwork         Registered
Microsoft.ClassicStorage         Registered
Microsoft.CognitiveServices      Registered
...
To see all registered resource providers for your subscription, use:
az provider list --query "sort_by([?registrationState=='Registered'].{Provider:namespace, Status:registrationState}, &Provider)" --out table
az provider list --query "sort_by([?registrationState=='Registered'].{Provider:namespace, Status:registrationState}, &Provider)" --out table
To maintain least privileges in your subscription, only register those resource providers that you're ready to use. To register a resource provider, use:
az provider register --namespace Microsoft.Batch
az provider register --namespace Microsoft.Batch
The command returns a message that registration is ongoing.
To see information for a particular resource provider, use:
az provider show --namespace Microsoft.Batch
az provider show --namespace Microsoft.Batch
The command returns:
{
    "id": "/subscriptions/####-####/providers/Microsoft.Batch",
    "namespace": "Microsoft.Batch",
    "registrationsState": "Registering",
    "resourceTypes:" [
        ...
    ]
}
{
    "id": "/subscriptions/####-####/providers/Microsoft.Batch",
    "namespace": "Microsoft.Batch",
    "registrationsState": "Registering",
    "resourceTypes:" [
        ...
    ]
}
Important
Asnoted earlier,don't block the creation of resourcesfor a resource provider that's in theregisteringstate. When your application doesn't block a resource provider in the registering state, it can continue sooner than waiting for all regions to complete.
To see the resource types for a resource provider, use:
az provider show --namespace Microsoft.Batch --query "resourceTypes[*].resourceType" --out table
az provider show --namespace Microsoft.Batch --query "resourceTypes[*].resourceType" --out table
The command returns:
Result
---------------
batchAccounts
operations
locations
locations/quotas
Result
---------------
batchAccounts
operations
locations
locations/quotas
The API version corresponds to a version of the resource provider's REST API operations. As a resource provider enables new features, it releases a new version of the REST API.
To get the available API versions for a resource type, use:
az provider show --namespace Microsoft.Batch --query "resourceTypes[?resourceType=='batchAccounts'].apiVersions | [0]" --out table
az provider show --namespace Microsoft.Batch --query "resourceTypes[?resourceType=='batchAccounts'].apiVersions | [0]" --out table
The command returns:
Result
---------------
2023-05-01
2022-10-01
2022-06-01
2022-01-01
...
Result
---------------
2023-05-01
2022-10-01
2022-06-01
2022-01-01
...
Resource Manager is supported in all regions, but the resources you deploy might not be supported in all regions. Also, there might be limitations on your subscription that prevent you from using some regions that support the resource.
To get the supported locations for a resource type, use:
az provider show --namespace Microsoft.Batch --query "resourceTypes[?resourceType=='batchAccounts'].locations | [0]" --out table
az provider show --namespace Microsoft.Batch --query "resourceTypes[?resourceType=='batchAccounts'].locations | [0]" --out table
The command returns:
Result
---------------
West Europe
East US
East US 2
West US
...
Result
---------------
West Europe
East US
East US 2
West US
...
Python
To see all resource providers in Azure and the registration status for your subscription, use:
import os  
from azure.identity import DefaultAzureCredential  
from azure.mgmt.resource import ResourceManagementClient  
  
# Authentication  
credential = DefaultAzureCredential()  
subscription_id = os.environ["AZURE_SUBSCRIPTION_ID"]  
  
# Initialize Resource Management client  
resource_management_client = ResourceManagementClient(credential, subscription_id)  
  
# List available resource providers and select ProviderNamespace and RegistrationState  
providers = resource_management_client.providers.list()  
  
for provider in providers:  
    print(f"ProviderNamespace: {provider.namespace}, RegistrationState: {provider.registration_state}")
import os  
from azure.identity import DefaultAzureCredential  
from azure.mgmt.resource import ResourceManagementClient  
  
# Authentication  
credential = DefaultAzureCredential()  
subscription_id = os.environ["AZURE_SUBSCRIPTION_ID"]  
  
# Initialize Resource Management client  
resource_management_client = ResourceManagementClient(credential, subscription_id)  
  
# List available resource providers and select ProviderNamespace and RegistrationState  
providers = resource_management_client.providers.list()  
  
for provider in providers:  
    print(f"ProviderNamespace: {provider.namespace}, RegistrationState: {provider.registration_state}")
The command returns:
ProviderNamespace: Microsoft.AlertsManagement, RegistrationState: Registered
ProviderNamespace: Microsoft.AnalysisServices, RegistrationState: Registered
ProviderNamespace: Microsoft.ApiManagement, RegistrationState: Registered
ProviderNamespace: Microsoft.Authorization, RegistrationState: Registered
ProviderNamespace: Microsoft.Batch, RegistrationState: Registered
...
ProviderNamespace: Microsoft.AlertsManagement, RegistrationState: Registered
ProviderNamespace: Microsoft.AnalysisServices, RegistrationState: Registered
ProviderNamespace: Microsoft.ApiManagement, RegistrationState: Registered
ProviderNamespace: Microsoft.Authorization, RegistrationState: Registered
ProviderNamespace: Microsoft.Batch, RegistrationState: Registered
...
To see all registered resource providers for your subscription, use:
# List available resource providers with RegistrationState "Registered" and select ProviderNamespace and RegistrationState  
providers = resource_management_client.providers.list()  
registered_providers = [provider for provider in providers if provider.registration_state == "Registered"]  
  
# Sort by ProviderNamespace  
sorted_registered_providers = sorted(registered_providers, key=lambda x: x.namespace)  
  
for provider in sorted_registered_providers:  
    print(f"ProviderNamespace: {provider.namespace}, RegistrationState: {provider.registration_state}")
# List available resource providers with RegistrationState "Registered" and select ProviderNamespace and RegistrationState  
providers = resource_management_client.providers.list()  
registered_providers = [provider for provider in providers if provider.registration_state == "Registered"]  
  
# Sort by ProviderNamespace  
sorted_registered_providers = sorted(registered_providers, key=lambda x: x.namespace)  
  
for provider in sorted_registered_providers:  
    print(f"ProviderNamespace: {provider.namespace}, RegistrationState: {provider.registration_state}")
To maintain least privileges in your subscription, only register those resource providers that you're ready to use. To register a resource provider, use:
import os  
from azure.identity import DefaultAzureCredential  
from azure.mgmt.resource import ResourceManagementClient  
  
# Authentication  
credential = DefaultAzureCredential()  
subscription_id = os.environ["AZURE_SUBSCRIPTION_ID"]  
  
# Initialize Resource Management client  
resource_management_client = ResourceManagementClient(credential, subscription_id)  
  
# Register resource provider  
provider_namespace = "Microsoft.Batch"  
registration_result = resource_management_client.providers.register(provider_namespace)  
  
print(f"ProviderNamespace: {registration_result.namespace}, RegistrationState: {registration_result.registration_state}")
import os  
from azure.identity import DefaultAzureCredential  
from azure.mgmt.resource import ResourceManagementClient  
  
# Authentication  
credential = DefaultAzureCredential()  
subscription_id = os.environ["AZURE_SUBSCRIPTION_ID"]  
  
# Initialize Resource Management client  
resource_management_client = ResourceManagementClient(credential, subscription_id)  
  
# Register resource provider  
provider_namespace = "Microsoft.Batch"  
registration_result = resource_management_client.providers.register(provider_namespace)  
  
print(f"ProviderNamespace: {registration_result.namespace}, RegistrationState: {registration_result.registration_state}")
The command returns:
ProviderNamespace: Microsoft.Batch, RegistrationState: Registered
ProviderNamespace: Microsoft.Batch, RegistrationState: Registered
Important
Asnoted earlier,don't block the creation of resourcesfor a resource provider that's in theregisteringstate. When your application doesn't block a resource provider in the registering state, it can continue sooner than waiting for all regions to complete.
Reregister a resource provider to use locations that Azure added since the previous registration. To reregister, run the registration command again.
To see information for a particular resource provider, use:
import os  
from azure.identity import DefaultAzureCredential  
from azure.mgmt.resource import ResourceManagementClient  
  
# Authentication  
credential = DefaultAzureCredential()  
subscription_id = os.environ["AZURE_SUBSCRIPTION_ID"]  
  
# Initialize Resource Management client  
resource_management_client = ResourceManagementClient(credential, subscription_id)  
  
# Get resource provider by ProviderNamespace  
provider_namespace = "Microsoft.Batch"  
provider = resource_management_client.providers.get(provider_namespace)  
  
print(f"ProviderNamespace: {provider.namespace}, RegistrationState: {provider.registration_state}\n")  
  
# Add resource types, locations, and API versions with new lines to separate results  
for resource_type in provider.resource_types:  
    print(f"ResourceType: {resource_type.resource_type}\nLocations: {', '.join(resource_type.locations)}\nAPIVersions: {', '.join(resource_type.api_versions)}\n")
import os  
from azure.identity import DefaultAzureCredential  
from azure.mgmt.resource import ResourceManagementClient  
  
# Authentication  
credential = DefaultAzureCredential()  
subscription_id = os.environ["AZURE_SUBSCRIPTION_ID"]  
  
# Initialize Resource Management client  
resource_management_client = ResourceManagementClient(credential, subscription_id)  
  
# Get resource provider by ProviderNamespace  
provider_namespace = "Microsoft.Batch"  
provider = resource_management_client.providers.get(provider_namespace)  
  
print(f"ProviderNamespace: {provider.namespace}, RegistrationState: {provider.registration_state}\n")  
  
# Add resource types, locations, and API versions with new lines to separate results  
for resource_type in provider.resource_types:  
    print(f"ResourceType: {resource_type.resource_type}\nLocations: {', '.join(resource_type.locations)}\nAPIVersions: {', '.join(resource_type.api_versions)}\n")
The command returns:
ProviderNamespace: Microsoft.Batch, RegistrationState: Registered

ResourceType: batchAccounts
Locations: West Europe, East US, East US 2, West US, North Central US, Brazil South, North Europe, Central US, East Asia, Japan East, Australia Southeast, Japan West, Korea South, Korea Central, Southeast Asia, South Central US, Australia East, Jio India West, South India, Central India, West India, Canada Central, Canada East, UK South, UK West, West Central US, West US 2, France Central, South Africa North, UAE North, Australia Central, Germany West Central, Switzerland North, Norway East, Brazil Southeast, West US 3, Sweden Central, Qatar Central, Poland Central, East US 2 EUAP, Central US EUAP
APIVersions: 2023-05-01, 2022-10-01, 2022-06-01, 2022-01-01, 2021-06-01, 2021-01-01, 2020-09-01, 2020-05-01, 2020-03-01-preview, 2020-03-01, 2019-08-01, 2019-04-01, 2018-12-01, 2017-09-01, 2017-05-01, 2017-01-01, 2015-12-01, 2015-09-01, 2015-07-01, 2014-05-01-privatepreview

...
ProviderNamespace: Microsoft.Batch, RegistrationState: Registered

ResourceType: batchAccounts
Locations: West Europe, East US, East US 2, West US, North Central US, Brazil South, North Europe, Central US, East Asia, Japan East, Australia Southeast, Japan West, Korea South, Korea Central, Southeast Asia, South Central US, Australia East, Jio India West, South India, Central India, West India, Canada Central, Canada East, UK South, UK West, West Central US, West US 2, France Central, South Africa North, UAE North, Australia Central, Germany West Central, Switzerland North, Norway East, Brazil Southeast, West US 3, Sweden Central, Qatar Central, Poland Central, East US 2 EUAP, Central US EUAP
APIVersions: 2023-05-01, 2022-10-01, 2022-06-01, 2022-01-01, 2021-06-01, 2021-01-01, 2020-09-01, 2020-05-01, 2020-03-01-preview, 2020-03-01, 2019-08-01, 2019-04-01, 2018-12-01, 2017-09-01, 2017-05-01, 2017-01-01, 2015-12-01, 2015-09-01, 2015-07-01, 2014-05-01-privatepreview

...
To see the resource types for a resource provider, use:
# Get resource provider by ProviderNamespace  
provider_namespace = "Microsoft.Batch"  
provider = resource_management_client.providers.get(provider_namespace)  
  
# Get ResourceTypeName of the resource types  
resource_type_names = [resource_type.resource_type for resource_type in provider.resource_types]  
  
for resource_type_name in resource_type_names:  
    print(resource_type_name)
# Get resource provider by ProviderNamespace  
provider_namespace = "Microsoft.Batch"  
provider = resource_management_client.providers.get(provider_namespace)  
  
# Get ResourceTypeName of the resource types  
resource_type_names = [resource_type.resource_type for resource_type in provider.resource_types]  
  
for resource_type_name in resource_type_names:  
    print(resource_type_name)
The command returns:
batchAccounts
batchAccounts/pools
batchAccounts/detectors
batchAccounts/certificates
operations
locations
locations/quotas
locations/checkNameAvailability
locations/accountOperationResults
locations/virtualMachineSkus
locations/cloudServiceSkus
batchAccounts
batchAccounts/pools
batchAccounts/detectors
batchAccounts/certificates
operations
locations
locations/quotas
locations/checkNameAvailability
locations/accountOperationResults
locations/virtualMachineSkus
locations/cloudServiceSkus
The API version corresponds to a version of the resource provider's REST API operations. As a resource provider enables new features, it releases a new version of the REST API.
To get the available API versions for a resource type, use:
# Get resource provider by ProviderNamespace  
provider_namespace = "Microsoft.Batch"  
provider = resource_management_client.providers.get(provider_namespace)  
  
# Filter resource type by ResourceTypeName and get its ApiVersions  
resource_type_name = "batchAccounts"  
api_versions = [  
    resource_type.api_versions  
    for resource_type in provider.resource_types  
    if resource_type.resource_type == resource_type_name  
]  
  
for api_version in api_versions[0]:  
    print(api_version)
# Get resource provider by ProviderNamespace  
provider_namespace = "Microsoft.Batch"  
provider = resource_management_client.providers.get(provider_namespace)  
  
# Filter resource type by ResourceTypeName and get its ApiVersions  
resource_type_name = "batchAccounts"  
api_versions = [  
    resource_type.api_versions  
    for resource_type in provider.resource_types  
    if resource_type.resource_type == resource_type_name  
]  
  
for api_version in api_versions[0]:  
    print(api_version)
The command returns:
2023-05-01
2022-10-01
2022-06-01
2022-01-01
...
2023-05-01
2022-10-01
2022-06-01
2022-01-01
...
Resource Manager is supported in all regions, but the resources you deploy might not be supported in all regions. Also, there might be limitations on your subscription that prevent you from using some regions that support the resource.
To get the supported locations for a resource type, use:
# Get resource provider by ProviderNamespace  
provider_namespace = "Microsoft.Batch"  
provider = resource_management_client.providers.get(provider_namespace)  
  
# Filter resource type by ResourceTypeName and get its Locations  
resource_type_name = "batchAccounts"  
locations = [  
    resource_type.locations  
    for resource_type in provider.resource_types  
    if resource_type.resource_type == resource_type_name  
]  
  
for location in locations[0]:  
    print(location)
# Get resource provider by ProviderNamespace  
provider_namespace = "Microsoft.Batch"  
provider = resource_management_client.providers.get(provider_namespace)  
  
# Filter resource type by ResourceTypeName and get its Locations  
resource_type_name = "batchAccounts"  
locations = [  
    resource_type.locations  
    for resource_type in provider.resource_types  
    if resource_type.resource_type == resource_type_name  
]  
  
for location in locations[0]:  
    print(location)
The command returns:
West Europe
East US
East US 2
West US
...
West Europe
East US
East US 2
West US
...
Next steps
To learn about creating Resource Manager templates, seeUnderstand the structure and syntax of ARM templates.
To view the template schemas for resource providers, seeDefine resources with Bicep, ARM templates, and Terraform AzAPI provider.
For a list that maps resource providers to Azure services, seeResource providers for Azure services.
To view the operations for a resource provider, seeAzure REST API.
Feedback
Was this page helpful?
Additional resources