Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Partitioning policy
Article
2024-09-10
10 contributors
In this article
Applies to: 창혵Microsoft Fabric창혵Azure Data Explorer
The partitioning policy defines if and howextents (data shards)should be partitioned for a specific table or amaterialized view.
The policy triggers an additional background process that takes place after the creation of extents, following data ingestion. This process includes reingesting data from the source extents and producinghomogeneousextents, in which all values of the column designated as thepartition keyreside within a single partition.
The primary objective of the partitioning policy is to enhance query performance in specificsupported scenarios.
Note
By default, when a data partitioning policy isn't defined (isnull), extents are partitioned by time of creation (ingestion). In most cases there's no need to set a data partitioning policy.
null
Supported scenarios
The following are the only scenarios in which setting a data partitioning policy is recommended. In all other scenarios, setting the policy isn't advised.
Frequent filters on a medium or high cardinalitystringorguidcolumn:For example: multitenant solutions, or a metrics table where most or all queries filter on a column of typestringorguid, such as theTenantIdor theMetricId.Medium cardinality is at least 10,000 distinct values.Set thehash partition keyto be thestringorguidcolumn, and set thePartitionAssignmentModepropertytouniform.
string
guid
For example: multitenant solutions, or a metrics table where most or all queries filter on a column of typestringorguid, such as theTenantIdor theMetricId.
string
guid
TenantId
MetricId
Medium cardinality is at least 10,000 distinct values.
Set thehash partition keyto be thestringorguidcolumn, and set thePartitionAssignmentModepropertytouniform.
string
guid
PartitionAssignmentMode
uniform
Frequent aggregations or joins on a high cardinalitystringorguidcolumn:For example, IoT information from many different sensors, or academic records of many different students.High cardinality is at least 1,000,000 distinct values, where the distribution of values in the column is approximately even.In this case, set thehash partition keyto be the column frequently grouped-by or joined-on, and set thePartitionAssignmentModepropertytoByPartition.
string
guid
For example, IoT information from many different sensors, or academic records of many different students.
High cardinality is at least 1,000,000 distinct values, where the distribution of values in the column is approximately even.
In this case, set thehash partition keyto be the column frequently grouped-by or joined-on, and set thePartitionAssignmentModepropertytoByPartition.
PartitionAssignmentMode
ByPartition
Out-of-order data ingestion:Data ingested into a table might not be ordered and partitioned into extents (shards) according to a specificdatetimecolumn that represents the data creation time and is commonly used to filter data. This could be due to a backfill from heterogeneous source files that include datetime values over a large time span.In this case, set theuniform range datetime partition keyto be thedatetimecolumn.If you need retention and caching policies to align with the datetime values in the column, instead of aligning with the time of ingestion, set theOverrideCreationTimeproperty totrue.
Data ingested into a table might not be ordered and partitioned into extents (shards) according to a specificdatetimecolumn that represents the data creation time and is commonly used to filter data. This could be due to a backfill from heterogeneous source files that include datetime values over a large time span.
datetime
In this case, set theuniform range datetime partition keyto be thedatetimecolumn.
datetime
If you need retention and caching policies to align with the datetime values in the column, instead of aligning with the time of ingestion, set theOverrideCreationTimeproperty totrue.
OverrideCreationTime
true
Caution
There are no hard-coded limits set on the number of tables with the partitioning policy defined. But, every additional table adds overhead to the background data partitioning process. Setting a policy on more tables will result in more resources being used, and higher cost due to underlying storage transactions. For more information, seecapacity.
It isn't recommended to set a partitioning policy if the compressed size of data per partition is expected to be less than 1GB.
The partitioning process results in residual storage artifacts for all the extents replaced during the partitioning process and during the merge process. Most of the residual storage artifacts are expected to be deleted during the automatic cleanup process. Increasing the value of theMaxPartitionCountproperty increases the number of residual storage artifacts and can reduce the cleanup performance.
MaxPartitionCount
Before applying a partitioning policy on a materialized view, review the recommendations formaterialized views partitioning policy.
Partition keys
The following kinds of partition keys are supported.
string
guid
Function
MaxPartitionCount
Seed
PartitionAssignmentMode
Function
ColumnName
MaxPartitionCount
Seed
datetime
RangeSize
Reference
OverrideCreationTime
bin_at
ColumnName
RangeSize
Reference
Hash partition key
If the policy includes a hash partition key, all homogeneous extents that belong to the same partition will be assigned to the same data node.
Note
The data partitioning operation adds significant processing load. We recommend applying a hash partition key on a table only under the following conditions:
If the majority of queries use equality filters (==,in()).
==
in()
The majority of queries aggregate/join on a specific column of typestringorguidwhich is oflarge-dimension(cardinality of 10M or higher), such as andevice_ID, oruser_ID.
string
guid
device_ID
user_ID
The usage pattern of the partitioned tables is in high concurrency query load, such as in monitoring or dashboarding applications.
A hash-modulo function is used to partition the data.
Data in homogeneous (partitioned) extents is ordered by the hash partition key.You don't need to include the hash partition key in therow order policy, if one is defined on the table.
You don't need to include the hash partition key in therow order policy, if one is defined on the table.
Queries that use theshuffle strategy, and in which theshuffle keyused injoin,summarizeormake-seriesis the table's hash partition key, are expected to perform better because the amount of data required to move across nodes is reduced.
shuffle key
join
summarize
make-series
Function
XxHash64
MaxPartitionCount
(1,2048]
128
Seed
1
PartitionAssignmentMode
ByPartition
Uniform
Uniform
ByPartition
A hash partition key over astring-typed column namedtenant_id.
It uses theXxHash64hash function, withMaxPartitionCountset to the recommended value128, and the defaultSeedof1.
string
tenant_id
XxHash64
MaxPartitionCount
128
Seed
1
{
  "ColumnName": "tenant_id",
  "Kind": "Hash",
  "Properties": {
    "Function": "XxHash64",
    "MaxPartitionCount": 128,
    "Seed": 1,
    "PartitionAssignmentMode": "Uniform"
  }
}
{
  "ColumnName": "tenant_id",
  "Kind": "Hash",
  "Properties": {
    "Function": "XxHash64",
    "MaxPartitionCount": 128,
    "Seed": 1,
    "PartitionAssignmentMode": "Uniform"
  }
}
Uniform range datetime partition key
Note
Only apply a uniform range datetime partition key on adatetime-typed column in a table when data ingested into the table is unlikely to be ordered according to this column.
datetime
In these cases, you can reshuffle the data between extents so that each extent includes records from a limited time range. This process results in filters on thedatetimecolumn being more effective at query time.
datetime
The partition function used isbin_at()and isn't customizable.
RangeSize
timespan
1.00:00:00
Reference
datetime
1970-01-01 00:00:00
null
Reference
OverrideCreationTime
bool
false
true
OverrideCreationTime
true
Lookback
Lookback
HotCache
The snippet shows a uniform datetime range partition key over adatetimetyped column namedtimestamp.
It usesdatetime(2021-01-01)as its reference point, with a size of7dfor each partition, and doesn't
override the extents' creation times.
datetime
timestamp
datetime(2021-01-01)
7d
{
  "ColumnName": "timestamp",
  "Kind": "UniformRange",
  "Properties": {
    "Reference": "2021-01-01T00:00:00",
    "RangeSize": "7.00:00:00",
    "OverrideCreationTime": false
  }
}
{
  "ColumnName": "timestamp",
  "Kind": "UniformRange",
  "Properties": {
    "Reference": "2021-01-01T00:00:00",
    "RangeSize": "7.00:00:00",
    "OverrideCreationTime": false
  }
}
The policy object
By default, a table's data partitioning policy isnull, in which case data in the table won't be repartitioned after it's ingested.
null
The data partitioning policy has the following main properties:
PartitionKeys:A collection ofpartition keysthat define how to partition the data in the table.A table can have up to2partition keys, with one of the following options:Onehash partition key.Oneuniform range datetime partition key.Onehash partition keyand oneuniform range datetime partition key.Each partition key has the following properties:ColumnName:string- The name of the column according to which the data will be partitioned.Kind:string- The data partitioning kind to apply (HashorUniformRange).Properties:property bag- Defines parameters according to which partitioning is done.
PartitionKeys:
A collection ofpartition keysthat define how to partition the data in the table.
A table can have up to2partition keys, with one of the following options:Onehash partition key.Oneuniform range datetime partition key.Onehash partition keyand oneuniform range datetime partition key.
2
Onehash partition key.
Oneuniform range datetime partition key.
Onehash partition keyand oneuniform range datetime partition key.
Each partition key has the following properties:ColumnName:string- The name of the column according to which the data will be partitioned.Kind:string- The data partitioning kind to apply (HashorUniformRange).Properties:property bag- Defines parameters according to which partitioning is done.
ColumnName:string- The name of the column according to which the data will be partitioned.
ColumnName
string
Kind:string- The data partitioning kind to apply (HashorUniformRange).
Kind
string
Hash
UniformRange
Properties:property bag- Defines parameters according to which partitioning is done.
Properties
property bag
EffectiveDateTime:The UTC datetime from which the policy is effective.This property is optional. If it isn't specified, the policy will take effect for data ingested after the policy was applied.
EffectiveDateTime:
The UTC datetime from which the policy is effective.
This property is optional. If it isn't specified, the policy will take effect for data ingested after the policy was applied.
Caution
You can set a datetime value in the past and partition already-ingested data. However, this practice may significantly increase resources used in the partitioning process.
In most cases, it is recommended to only have newly ingested data partitioned, and to avoid partitioning large amounts of historical data.
If you choose to partition historical data, consider doing so gradually, by setting theEffectiveDateTimeto a previousdatetimein steps of up to a few days each time you alter the policy.
datetime
Data partitioning example
Data partitioning policy object with two partition keys.
A hash partition key over astring-typed column namedtenant_id.It uses theXxHash64hash function, withMaxPartitionCountset to the recommended value128, and the defaultSeedof1.
string
tenant_id
It uses theXxHash64hash function, withMaxPartitionCountset to the recommended value128, and the defaultSeedof1.
XxHash64
MaxPartitionCount
128
Seed
1
A uniform datetime range partition key over adatetimetype column namedtimestamp.It usesdatetime(2021-01-01)as its reference point, with a size of7dfor each partition.
datetime
timestamp
It usesdatetime(2021-01-01)as its reference point, with a size of7dfor each partition.
datetime(2021-01-01)
7d
{
  "PartitionKeys": [
    {
      "ColumnName": "tenant_id",
      "Kind": "Hash",
      "Properties": {
        "Function": "XxHash64",
        "MaxPartitionCount": 128,
        "Seed": 1,
        "PartitionAssignmentMode": "Uniform"
      }
    },
    {
      "ColumnName": "timestamp",
      "Kind": "UniformRange",
      "Properties": {
        "Reference": "2021-01-01T00:00:00",
        "RangeSize": "7.00:00:00",
        "OverrideCreationTime": false
      }
    }
  ]
}
{
  "PartitionKeys": [
    {
      "ColumnName": "tenant_id",
      "Kind": "Hash",
      "Properties": {
        "Function": "XxHash64",
        "MaxPartitionCount": 128,
        "Seed": 1,
        "PartitionAssignmentMode": "Uniform"
      }
    },
    {
      "ColumnName": "timestamp",
      "Kind": "UniformRange",
      "Properties": {
        "Reference": "2021-01-01T00:00:00",
        "RangeSize": "7.00:00:00",
        "OverrideCreationTime": false
      }
    }
  ]
}
Additional properties
The following properties can be defined as part of the policy. These properties are optional and we recommend not changing them.
0
0
0
The data partitioning process
Data partitioning runs as a post-ingestion background process.A table that is continuously ingested into is expected to always have a "tail" of data that is yet to be partitioned (nonhomogeneous extents).
A table that is continuously ingested into is expected to always have a "tail" of data that is yet to be partitioned (nonhomogeneous extents).
Data partitioning runs only on hot extents, regardless of the value of theEffectiveDateTimeproperty in the policy.If partitioning cold extents is required, you need to temporarily adjust thecaching policy.
EffectiveDateTime
If partitioning cold extents is required, you need to temporarily adjust thecaching policy.
You can monitor the partitioning status of tables with defined policies in a database by using the.show database extents partitioning statisticscommand andpartitioning metrics.
Partitioning capacity
The data partitioning process results in the creation of more extents. Theextents merge capacitymay gradually increase, so that the process ofmerging extentscan keep up.
The data partitioning process results in the creation of more extents. Theextents merge capacitymay gradually increase, so that the process ofmerging extentscan keep up.
If there's a high ingestion throughput, or a large enough number of tables that have a partitioning policy defined, then theExtents partition capacitymay gradually increase, so thatthe process of partitioning extentscan keep up.
If there's a high ingestion throughput, or a large enough number of tables that have a partitioning policy defined, then theExtents partition capacitymay gradually increase, so thatthe process of partitioning extentscan keep up.
To avoid consuming too many resources, these dynamic increases are capped. You may be required to gradually and linearly increase them beyond the cap, if they're used up entirely.If increasing the capacities causes a significant increase in the use of the cluster's resources, you can scale the clusterup/out, either manually, or by enabling autoscale.
If increasing the capacities causes a significant increase in the use of the cluster's resources, you can scale the clusterup/out, either manually, or by enabling autoscale.
Limitations
Attempts to partition data in a database that already has more than 5,000,000 extents will be throttled.In such cases, theEffectiveDateTimeproperty of partitioning policies of tables in the database will be automatically delayed by several hours, so that you can reevaluate your configuration and policies.
In such cases, theEffectiveDateTimeproperty of partitioning policies of tables in the database will be automatically delayed by several hours, so that you can reevaluate your configuration and policies.
EffectiveDateTime
Outliers in partitioned columns
The following situations can contribute to imbalanced distribution of data across nodes, and degrade query performance:If a hash partition key includes values that are much more prevalent than others, for example, an empty string, or a generic value (such asnullorN/A).The values represent an entity (such astenant_id) that is more prevalent in the dataset.
If a hash partition key includes values that are much more prevalent than others, for example, an empty string, or a generic value (such asnullorN/A).
null
N/A
The values represent an entity (such astenant_id) that is more prevalent in the dataset.
tenant_id
If a uniform range datetime partition key has a large enough percentage of values that are "far" from the majority of the values in the column, the overhead of the data partitioning process is increased and may lead to many small extents to keep track of. An example of such a situation is datetime values from the distant past or future.
In both of these cases, either "fix" the data, or filter out any irrelevant records in the data before or at ingestion time, to reduce the overhead of the data partitioning. For example, use anupdate policy.
Related content
Partitioning policy management commands
Feedback
Was this page helpful?
Additional resources