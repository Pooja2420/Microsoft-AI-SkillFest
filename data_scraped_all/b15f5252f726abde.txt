Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Receive and respond to inbound HTTPS calls to workflows in Azure Logic Apps
Article
2024-01-10
13 contributors
In this article
Applies to:Azure Logic Apps (Consumption + Standard)
This how-to guide shows create a logic app workflow that can receive and handle an inbound HTTPS request or call from another service using the Request built-in trigger. When your workflow uses this trigger, you can then respond to the HTTPS request by using the Response built-in action.
Note
The Response action works only when you use theRequesttrigger.
For example, this list describes some tasks that your workflow can perform when you use theRequesttrigger and Response action:
Receive and respond to an HTTPS request for data in an on-premises database.
Receive and respond to an HTTPS request for data in an on-premises database.
Receive and respond to an HTTPS request sent from another logic app workflow.
Receive and respond to an HTTPS request sent from another logic app workflow.
Trigger a workflow run when an external webhook event happens.
Trigger a workflow run when an external webhook event happens.
To run your workflow by sending an outgoing or outbound request instead, use theHTTP built-in trigger or HTTP built-in action.
Prerequisites
An Azure account and subscription. If you don't have a subscription, you cansign up for a free Azure account.
An Azure account and subscription. If you don't have a subscription, you cansign up for a free Azure account.
The logic app workflow where you want to receive the inbound HTTPS request. To start your workflow with aRequesttrigger, you have to start with a blank workflow. To use the Response action, your workflow must start with theRequesttrigger.
The logic app workflow where you want to receive the inbound HTTPS request. To start your workflow with aRequesttrigger, you have to start with a blank workflow. To use the Response action, your workflow must start with theRequesttrigger.
Install or use a tool that can send HTTP requests to test your solution, for example:Visual Studio Codewith anextension from Visual Studio MarketplacePowerShell Invoke-RestMethodMicrosoft Edge - Network Console toolBrunocurlCautionFor scenarios where you have sensitive data, such as credentials, secrets, access tokens, API keys, and other
similar information, make sure to use a tool that protects your data with the necessary security features.
The tool should work offline or locally, and not require sign in to an online account or sync data to the cloud.
When you use a tool with these characteristics, you reduce the risk of exposing sensitive data to the public.
Install or use a tool that can send HTTP requests to test your solution, for example:
Visual Studio Codewith anextension from Visual Studio Marketplace
PowerShell Invoke-RestMethod
Microsoft Edge - Network Console tool
Bruno
curl
Caution
For scenarios where you have sensitive data, such as credentials, secrets, access tokens, API keys, and other
similar information, make sure to use a tool that protects your data with the necessary security features.
The tool should work offline or locally, and not require sign in to an online account or sync data to the cloud.
When you use a tool with these characteristics, you reduce the risk of exposing sensitive data to the public.

Add a Request trigger
TheRequesttrigger creates a manually callable endpoint that handlesonlyinbound requests over HTTPS. When the caller sends a request to this endpoint, theRequesttrigger fires and runs the workflow. For information about how to call this trigger, reviewCall, trigger, or nest workflows with HTTPS endpoints in Azure Logic Apps.
Consumption
Standard
In theAzure portal, open your Consumption logic app and blank workflow in the designer.
In theAzure portal, open your Consumption logic app and blank workflow in the designer.
On the designer,follow these general steps to find and add the Request built-in trigger namedWhen a HTTP request is received.
On the designer,follow these general steps to find and add the Request built-in trigger namedWhen a HTTP request is received.
After the trigger information box appears, provide the following information as required:Property nameJSON property nameRequiredDescriptionHTTP POST URL{none}YesThe endpoint URL that's generated after you save your workflow and is used for sending a request that triggers your workflow.Request Body JSON SchemaschemaNoThe JSON schema that describes the properties and values in the incoming request body. The designer uses this schema to generate tokens for the properties in the request. That way, your workflow can parse, consume, and pass along outputs from theRequesttrigger into your workflow.If you don't have a JSON schema, you can generate the schema from a sample payload by using theUse sample payload to generate schemacapability.The following example shows a sample JSON schema:The following example shows the complete sample JSON schema:{
   "type": "object",
   "properties": {
      "account": {
         "type": "object",
         "properties": {
            "name": {
               "type": "string"
            },
            "ID": {
               "type": "string"
            },
            "address": {
               "type": "object",
               "properties": {
                  "number": {
                     "type": "string"
                  },
                  "street": {
                     "type": "string"
                  },
                  "city": {
                     "type": "string"
                  },
                  "state": {
                     "type": "string"
                  },
                  "country": {
                     "type": "string"
                  },
                  "postalCode": {
                     "type": "string"
                  }
               }
            }
         }
      }
   }
}When you enter a JSON schema, the designer shows a reminder to include theContent-Typeheader in your request and set that header value toapplication/json. For more information, seeHandle content types.The following example shows how theContent-Typeheader appears in JSON format:{
   "Content-Type": "application/json"
}To generate a JSON schema that's based on the expected payload (data), you can use a tool such asJSONSchema.net, or you can follow these steps:In theRequesttrigger, selectUse sample payload to generate schema.Enter the sample payload, and selectDone.The following example shows the sample payload:{
   "account": {
      "name": "Contoso",
      "ID": "12345",
      "address": {
         "number": "1234",
         "street": "Anywhere Street",
         "city": "AnyTown",
         "state": "AnyState",
         "country": "USA",
         "postalCode": "11111"
      }
   }
}
After the trigger information box appears, provide the following information as required:
schema
The following example shows a sample JSON schema:

The following example shows the complete sample JSON schema:
{
   "type": "object",
   "properties": {
      "account": {
         "type": "object",
         "properties": {
            "name": {
               "type": "string"
            },
            "ID": {
               "type": "string"
            },
            "address": {
               "type": "object",
               "properties": {
                  "number": {
                     "type": "string"
                  },
                  "street": {
                     "type": "string"
                  },
                  "city": {
                     "type": "string"
                  },
                  "state": {
                     "type": "string"
                  },
                  "country": {
                     "type": "string"
                  },
                  "postalCode": {
                     "type": "string"
                  }
               }
            }
         }
      }
   }
}
{
   "type": "object",
   "properties": {
      "account": {
         "type": "object",
         "properties": {
            "name": {
               "type": "string"
            },
            "ID": {
               "type": "string"
            },
            "address": {
               "type": "object",
               "properties": {
                  "number": {
                     "type": "string"
                  },
                  "street": {
                     "type": "string"
                  },
                  "city": {
                     "type": "string"
                  },
                  "state": {
                     "type": "string"
                  },
                  "country": {
                     "type": "string"
                  },
                  "postalCode": {
                     "type": "string"
                  }
               }
            }
         }
      }
   }
}
When you enter a JSON schema, the designer shows a reminder to include theContent-Typeheader in your request and set that header value toapplication/json. For more information, seeHandle content types.

The following example shows how theContent-Typeheader appears in JSON format:
{
   "Content-Type": "application/json"
}
{
   "Content-Type": "application/json"
}
To generate a JSON schema that's based on the expected payload (data), you can use a tool such asJSONSchema.net, or you can follow these steps:
In theRequesttrigger, selectUse sample payload to generate schema.
In theRequesttrigger, selectUse sample payload to generate schema.

Enter the sample payload, and selectDone.The following example shows the sample payload:{
   "account": {
      "name": "Contoso",
      "ID": "12345",
      "address": {
         "number": "1234",
         "street": "Anywhere Street",
         "city": "AnyTown",
         "state": "AnyState",
         "country": "USA",
         "postalCode": "11111"
      }
   }
}
Enter the sample payload, and selectDone.

The following example shows the sample payload:
{
   "account": {
      "name": "Contoso",
      "ID": "12345",
      "address": {
         "number": "1234",
         "street": "Anywhere Street",
         "city": "AnyTown",
         "state": "AnyState",
         "country": "USA",
         "postalCode": "11111"
      }
   }
}
{
   "account": {
      "name": "Contoso",
      "ID": "12345",
      "address": {
         "number": "1234",
         "street": "Anywhere Street",
         "city": "AnyTown",
         "state": "AnyState",
         "country": "USA",
         "postalCode": "11111"
      }
   }
}
To check that the inbound call has a request body that matches your specified schema, follow these steps:To enforce the inbound message to have the same exact fields that your schema describes, in your schema, add therequiredproperty and specify the required fields. Add theadditionalPropertiesproperty, and set the value tofalse.For example, the following schema specifies that the inbound message must have themsgfield and not any other fields:{
   "properties": {
     "msg": {
        "type": "string"
     }
   },
   "type": "object",
   "required": ["msg"],
   "additionalProperties": false
}In theRequesttrigger's title bar, select the ellipses button (...).In the trigger's settings, turn onSchema Validation, and selectDone.If the inbound call's request body doesn't match your schema, the trigger returns anHTTP 400 Bad Requesterror.
To check that the inbound call has a request body that matches your specified schema, follow these steps:
To enforce the inbound message to have the same exact fields that your schema describes, in your schema, add therequiredproperty and specify the required fields. Add theadditionalPropertiesproperty, and set the value tofalse.For example, the following schema specifies that the inbound message must have themsgfield and not any other fields:{
   "properties": {
     "msg": {
        "type": "string"
     }
   },
   "type": "object",
   "required": ["msg"],
   "additionalProperties": false
}
To enforce the inbound message to have the same exact fields that your schema describes, in your schema, add therequiredproperty and specify the required fields. Add theadditionalPropertiesproperty, and set the value tofalse.
required
additionalProperties
false
For example, the following schema specifies that the inbound message must have themsgfield and not any other fields:
msg
{
   "properties": {
     "msg": {
        "type": "string"
     }
   },
   "type": "object",
   "required": ["msg"],
   "additionalProperties": false
}
{
   "properties": {
     "msg": {
        "type": "string"
     }
   },
   "type": "object",
   "required": ["msg"],
   "additionalProperties": false
}
In theRequesttrigger's title bar, select the ellipses button (...).
In theRequesttrigger's title bar, select the ellipses button (...).
In the trigger's settings, turn onSchema Validation, and selectDone.If the inbound call's request body doesn't match your schema, the trigger returns anHTTP 400 Bad Requesterror.
In the trigger's settings, turn onSchema Validation, and selectDone.
If the inbound call's request body doesn't match your schema, the trigger returns anHTTP 400 Bad Requesterror.
To add other properties or parameters to the trigger, open theAdd new parameterlist, and select the parameters that you want to add.Property nameJSON property nameRequiredDescriptionMethodmethodNoThe method that the incoming request must use to call the logic appRelative pathrelativePathNoThe relative path for the parameter that the logic app's endpoint URL can acceptThe following example adds theMethodproperty:TheMethodproperty appears in the trigger so that you can select a method from the list.
To add other properties or parameters to the trigger, open theAdd new parameterlist, and select the parameters that you want to add.
method
relativePath
The following example adds theMethodproperty:

TheMethodproperty appears in the trigger so that you can select a method from the list.

When you're ready, save your workflow. On the designer toolbar, selectSave.This step generates the URL that you can use to send a request that triggers the workflow.
When you're ready, save your workflow. On the designer toolbar, selectSave.
This step generates the URL that you can use to send a request that triggers the workflow.
To copy the generated URL, select the copy icon next to the URL.NoteIf you want to include the hash or pound symbol (#) in the URI
when making a call to theRequesttrigger, use this encoded version instead:%25%23
To copy the generated URL, select the copy icon next to the URL.

Note
If you want to include the hash or pound symbol (#) in the URI
when making a call to theRequesttrigger, use this encoded version instead:%25%23
%25%23
In theAzure portal, open your Standard logic app resource and blank workflow in the designer.
In theAzure portal, open your Standard logic app resource and blank workflow in the designer.
On the designer,follow these general steps to find and add the Request built-in trigger namedWhen a HTTP request is received.
On the designer,follow these general steps to find and add the Request built-in trigger namedWhen a HTTP request is received.
After the trigger information box appears, provide the following information as required:Property nameJSON property nameRequiredDescriptionHTTP POST URL{none}YesThe endpoint URL that's generated after you save your workflow and is used for sending a request that triggers your workflow.Request Body JSON SchemaschemaNoThe JSON schema that describes the properties and values in the incoming request body. The designer uses this schema to generate tokens for the properties in the request. That way, your workflow can parse, consume, and pass along outputs from theRequesttrigger into your workflow.If you don't have a JSON schema, you can generate the schema from a sample payload by using theUse sample payload to generate schemacapability.The following example shows a sample JSON schema:The following example shows the complete sample JSON schema:{
   "type": "object",
   "properties": {
      "account": {
         "type": "object",
         "properties": {
            "name": {
               "type": "string"
            },
            "ID": {
               "type": "string"
            },
            "address": {
               "type": "object",
               "properties": {
                  "number": {
                     "type": "string"
                  },
                  "street": {
                     "type": "string"
                  },
                  "city": {
                     "type": "string"
                  },
                  "state": {
                     "type": "string"
                  },
                  "country": {
                     "type": "string"
                  },
                  "postalCode": {
                     "type": "string"
                  }
               }
            }
         }
      }
   }
}When you enter a JSON schema, the designer shows a reminder to include theContent-Typeheader in your request and set that header value toapplication/json. For more information, seeHandle content types.The following example shows how theContent-Typeheader appears in JSON format:{
   "Content-Type": "application/json"
}To generate a JSON schema that's based on the expected payload (data), you can use a tool such asJSONSchema.net, or you can follow these steps:In theRequesttrigger, selectUse sample payload to generate schema.Enter the sample payload, and selectDone.The following example shows the sample payload:{
   "account": {
      "name": "Contoso",
      "ID": "12345",
      "address": {
         "number": "1234",
         "street": "Anywhere Street",
         "city": "AnyTown",
         "state": "AnyState",
         "country": "USA",
         "postalCode": "11111"
      }
   }
}
After the trigger information box appears, provide the following information as required:
schema
The following example shows a sample JSON schema:

The following example shows the complete sample JSON schema:
{
   "type": "object",
   "properties": {
      "account": {
         "type": "object",
         "properties": {
            "name": {
               "type": "string"
            },
            "ID": {
               "type": "string"
            },
            "address": {
               "type": "object",
               "properties": {
                  "number": {
                     "type": "string"
                  },
                  "street": {
                     "type": "string"
                  },
                  "city": {
                     "type": "string"
                  },
                  "state": {
                     "type": "string"
                  },
                  "country": {
                     "type": "string"
                  },
                  "postalCode": {
                     "type": "string"
                  }
               }
            }
         }
      }
   }
}
{
   "type": "object",
   "properties": {
      "account": {
         "type": "object",
         "properties": {
            "name": {
               "type": "string"
            },
            "ID": {
               "type": "string"
            },
            "address": {
               "type": "object",
               "properties": {
                  "number": {
                     "type": "string"
                  },
                  "street": {
                     "type": "string"
                  },
                  "city": {
                     "type": "string"
                  },
                  "state": {
                     "type": "string"
                  },
                  "country": {
                     "type": "string"
                  },
                  "postalCode": {
                     "type": "string"
                  }
               }
            }
         }
      }
   }
}
When you enter a JSON schema, the designer shows a reminder to include theContent-Typeheader in your request and set that header value toapplication/json. For more information, seeHandle content types.

The following example shows how theContent-Typeheader appears in JSON format:
{
   "Content-Type": "application/json"
}
{
   "Content-Type": "application/json"
}
To generate a JSON schema that's based on the expected payload (data), you can use a tool such asJSONSchema.net, or you can follow these steps:
In theRequesttrigger, selectUse sample payload to generate schema.
In theRequesttrigger, selectUse sample payload to generate schema.

Enter the sample payload, and selectDone.The following example shows the sample payload:{
   "account": {
      "name": "Contoso",
      "ID": "12345",
      "address": {
         "number": "1234",
         "street": "Anywhere Street",
         "city": "AnyTown",
         "state": "AnyState",
         "country": "USA",
         "postalCode": "11111"
      }
   }
}
Enter the sample payload, and selectDone.

The following example shows the sample payload:
{
   "account": {
      "name": "Contoso",
      "ID": "12345",
      "address": {
         "number": "1234",
         "street": "Anywhere Street",
         "city": "AnyTown",
         "state": "AnyState",
         "country": "USA",
         "postalCode": "11111"
      }
   }
}
{
   "account": {
      "name": "Contoso",
      "ID": "12345",
      "address": {
         "number": "1234",
         "street": "Anywhere Street",
         "city": "AnyTown",
         "state": "AnyState",
         "country": "USA",
         "postalCode": "11111"
      }
   }
}
To check that the inbound call has a request body that matches your specified schema, follow these steps:To enforce the inbound message to have the same exact fields that your schema describes, in your schema, add therequiredproperty and specify the required fields. Add theadditionalPropertiesproperty, and set the value tofalse.For example, the following schema specifies that the inbound message must have themsgfield and not any other fields:{
   "properties": {
     "msg": {
        "type": "string"
     }
   },
   "type": "object",
   "required": ["msg"],
   "additionalProperties": false
}On the designer, select theRequesttrigger. On the information pane that opens, select theSettingstab.ExpandData Handling, and setSchema ValidationtoOn.If the inbound call's request body doesn't match your schema, the trigger returns anHTTP 400 Bad Requesterror.
To check that the inbound call has a request body that matches your specified schema, follow these steps:
To enforce the inbound message to have the same exact fields that your schema describes, in your schema, add therequiredproperty and specify the required fields. Add theadditionalPropertiesproperty, and set the value tofalse.For example, the following schema specifies that the inbound message must have themsgfield and not any other fields:{
   "properties": {
     "msg": {
        "type": "string"
     }
   },
   "type": "object",
   "required": ["msg"],
   "additionalProperties": false
}
To enforce the inbound message to have the same exact fields that your schema describes, in your schema, add therequiredproperty and specify the required fields. Add theadditionalPropertiesproperty, and set the value tofalse.
required
additionalProperties
false
For example, the following schema specifies that the inbound message must have themsgfield and not any other fields:
msg
{
   "properties": {
     "msg": {
        "type": "string"
     }
   },
   "type": "object",
   "required": ["msg"],
   "additionalProperties": false
}
{
   "properties": {
     "msg": {
        "type": "string"
     }
   },
   "type": "object",
   "required": ["msg"],
   "additionalProperties": false
}
On the designer, select theRequesttrigger. On the information pane that opens, select theSettingstab.
On the designer, select theRequesttrigger. On the information pane that opens, select theSettingstab.
ExpandData Handling, and setSchema ValidationtoOn.If the inbound call's request body doesn't match your schema, the trigger returns anHTTP 400 Bad Requesterror.
ExpandData Handling, and setSchema ValidationtoOn.
If the inbound call's request body doesn't match your schema, the trigger returns anHTTP 400 Bad Requesterror.
To add other properties or parameters to the trigger, select theParameterstab, open theAdd new parameterlist, and select the parameters that you want to add.Property nameJSON property nameRequiredDescriptionMethodmethodNoThe method that the incoming request must use to call the logic appRelative pathrelativePathNoThe relative path for the parameter that the logic app's endpoint URL can acceptThe following example adds theMethodproperty:TheMethodproperty appears in the trigger so that you can select a method from the list.
To add other properties or parameters to the trigger, select theParameterstab, open theAdd new parameterlist, and select the parameters that you want to add.
method
relativePath
The following example adds theMethodproperty:

TheMethodproperty appears in the trigger so that you can select a method from the list.

When you're ready, save your workflow. On the designer toolbar, selectSave.This step generates the URL that you can use to send a request that triggers the workflow.
When you're ready, save your workflow. On the designer toolbar, selectSave.
This step generates the URL that you can use to send a request that triggers the workflow.
To copy the generated URL, select the copy icon next to the URL.NoteIf you want to include the hash or pound symbol (#) in the URI
when making a call to theRequesttrigger, use this encoded version instead:%25%23The URL for theRequesttrigger is associated with your workflow's storage account. This URL
changes if the storage account changes. For example, with Standard logic apps, if you manually
change your storage account and copy your workflow to the new storage account, the URL for
theRequesttrigger also changes to reflect the new storage account. The same workflow has a different URL.
To copy the generated URL, select the copy icon next to the URL.

Note
If you want to include the hash or pound symbol (#) in the URI
when making a call to theRequesttrigger, use this encoded version instead:%25%23
%25%23
The URL for theRequesttrigger is associated with your workflow's storage account. This URL
changes if the storage account changes. For example, with Standard logic apps, if you manually
change your storage account and copy your workflow to the new storage account, the URL for
theRequesttrigger also changes to reflect the new storage account. The same workflow has a different URL.
Schema validation for stateless workflows
To enable schema validation for stateless workflows, make sure that thehost.jsonfile in the logic app resource or project has the followinghost setting:
"extensions": {
   "workflow": {
      "Settings": {
         "Runtime.StatelessFlowEvaluateTriggerCondition": "true"
      }
   }
}
"extensions": {
   "workflow": {
      "Settings": {
         "Runtime.StatelessFlowEvaluateTriggerCondition": "true"
      }
   }
}
Now, continue building your workflow by adding another action as the next step. For example, you can respond to the request byadding a Response action, which you can use to return a customized response and is described later in this article.
Note
Your workflow keeps an inbound request open only for alimited time.
Assuming that your workflow also includes a Response action, if your workflow doesn't return a response to the caller
after this time expires, your workflow returns the504 GATEWAY TIMEOUTstatus to the caller. If your workflow
doesn't include a Response action, your workflow immediately returns the202 ACCEPTEDstatus to the caller.
For information about security, authentication, and encryption for inbound calls to your workflow, such asTransport Layer Security (TLS), previously known as Secure Sockets Layer (SSL),OAuth with Microsoft Entra ID,Shared Access Signatures (SAS), exposing your logic app resource with Azure API Management, or restricting the IP addresses that originate inbound calls, seeSecure access and data - Access for inbound calls to request-based triggers.
Trigger outputs
The following table lists the outputs from theRequesttrigger:

Add a Response action
When you use theRequesttrigger to receive inbound requests, you can model the response and send the payload results back to the caller by using the Response built-in action, which worksonlywith theRequesttrigger. This combination with theRequesttrigger and Response action creates therequest-response pattern. Except for inside Foreach loops and Until loops, and parallel branches, you can add the Response action anywhere in your workflow.
Important
If your Response action includes the following headers, Azure Logic Apps automatically
removes these headers from the generated response message without showing any warning
or error. Azure Logic Apps won't include these headers, although the service won't
stop you from saving workflows that have a Response action with these headers.AllowContent-*headers except forContent-Disposition,Content-Encoding, andContent-Typewhen you use POST and PUT operations, but are not included for GET operationsCookieExpiresLast-ModifiedSet-CookieTransfer-Encoding
If your Response action includes the following headers, Azure Logic Apps automatically
removes these headers from the generated response message without showing any warning
or error. Azure Logic Apps won't include these headers, although the service won't
stop you from saving workflows that have a Response action with these headers.
Allow
Allow
Content-*headers except forContent-Disposition,Content-Encoding, andContent-Typewhen you use POST and PUT operations, but are not included for GET operations
Content-*
Content-Disposition
Content-Encoding
Content-Type
Cookie
Cookie
Expires
Expires
Last-Modified
Last-Modified
Set-Cookie
Set-Cookie
Transfer-Encoding
Transfer-Encoding
If you have one or more Response actions in a complex workflow with branches, make sure that the workflow
processes at least one Response action during runtime. Otherwise, if all Response actions are skipped,
the caller receives a502 Bad Gatewayerror, even if the workflow finishes successfully.
If you have one or more Response actions in a complex workflow with branches, make sure that the workflow
processes at least one Response action during runtime. Otherwise, if all Response actions are skipped,
the caller receives a502 Bad Gatewayerror, even if the workflow finishes successfully.
In a Standard logic appstatelessworkflow, the Response action must appear last in your workflow. If the action appears
anywhere else, Azure Logic Apps still won't run the action until all other actions finish running.
In a Standard logic appstatelessworkflow, the Response action must appear last in your workflow. If the action appears
anywhere else, Azure Logic Apps still won't run the action until all other actions finish running.
Consumption
Standard
On the workflow designer,follow these general steps to find and add the Response built-in action namedResponse.For simplicity, the following examples show a collapsedRequesttrigger.
On the workflow designer,follow these general steps to find and add the Response built-in action namedResponse.
For simplicity, the following examples show a collapsedRequesttrigger.
In the action information box, add the required values for the response message.Property nameJSON property nameRequiredDescriptionStatus CodestatusCodeYesThe status code to return in the responseHeadersheadersNoA JSON object that describes one or more headers to include in the responseBodybodyNoThe response bodyWhen you select inside any text fields, the dynamic content list automatically opens. You can then select tokens that represent any available outputs from previous steps in the workflow. The properties from the schema that you specify also appear in this dynamic content list. You can select these properties to use in your workflow.For example, in theHeadersfield, includeContent-Typeas the key name, and set the key value toapplication/jsonas mentioned earlier in this article. For theBodybox, you can select the trigger body output from the dynamic content list.To view the headers in JSON format, selectSwitch to text view.
In the action information box, add the required values for the response message.
statusCode
headers
body
When you select inside any text fields, the dynamic content list automatically opens. You can then select tokens that represent any available outputs from previous steps in the workflow. The properties from the schema that you specify also appear in this dynamic content list. You can select these properties to use in your workflow.
For example, in theHeadersfield, includeContent-Typeas the key name, and set the key value toapplication/jsonas mentioned earlier in this article. For theBodybox, you can select the trigger body output from the dynamic content list.

To view the headers in JSON format, selectSwitch to text view.

To add more properties for the action, such as a JSON schema for the response body, from theAdd new parameterlist, select the parameters that you want to add.
To add more properties for the action, such as a JSON schema for the response body, from theAdd new parameterlist, select the parameters that you want to add.
When you're done, save your workflow. On the designer toolbar, selectSave.
When you're done, save your workflow. On the designer toolbar, selectSave.
On the workflow designer,follow these general steps to find and add the Response built-in action namedResponse.
On the workflow designer,follow these general steps to find and add the Response built-in action namedResponse.
In the action information box, add the required values for the response message:Property nameJSON property nameRequiredDescriptionStatus CodestatusCodeYesThe status code to return in the responseHeadersheadersNoA JSON object that describes one or more headers to include in the responseBodybodyNoThe response bodyWhen you select inside any text fields, you get the option to open the dynamic content list (lightning icon). You can then select tokens that represent any available outputs from previous steps in the workflow. The properties from the schema that you specify also appear in this dynamic content list. You can select these properties to use in your workflow.For example, for theHeadersbox, enterContent-Typeas the key name, and set the key value toapplication/jsonas mentioned earlier in this article. For theBodybox, you can select the trigger body output from the dynamic content list.To view the headers in JSON format, selectSwitch to text view.
In the action information box, add the required values for the response message:
statusCode
headers
body
When you select inside any text fields, you get the option to open the dynamic content list (lightning icon). You can then select tokens that represent any available outputs from previous steps in the workflow. The properties from the schema that you specify also appear in this dynamic content list. You can select these properties to use in your workflow.
For example, for theHeadersbox, enterContent-Typeas the key name, and set the key value toapplication/jsonas mentioned earlier in this article. For theBodybox, you can select the trigger body output from the dynamic content list.

To view the headers in JSON format, selectSwitch to text view.

To add more properties for the action, such as a JSON schema for the response body, open theAdd new parameterlist, and select the parameters that you want to add.
To add more properties for the action, such as a JSON schema for the response body, open theAdd new parameterlist, and select the parameters that you want to add.
When you're done, save your workflow. On the designer toolbar, selectSave.
When you're done, save your workflow. On the designer toolbar, selectSave.
Test your workflow
To trigger your workflow, send an HTTP request to the URL generated for theRequesttrigger, including the method that theRequesttrigger expects, by using your HTTP request tool and its instructions.
For more information about the trigger's underlying JSON definition and how to call this trigger, see these topics,Requesttrigger typeandCall, trigger, or nest workflows with HTTP endpoints in Azure Logic Apps.
Security and authentication
In a Standard logic app workflow that starts with theRequesttrigger (but not a webhook trigger), you can use the Azure Functions provision for authenticating inbound calls sent to the endpoint created by that trigger by using a managed identity. This provision is also known as "Easy Auth". For more information, reviewTrigger workflows in Standard logic apps with Easy Auth.
For more information about security, authorization, and encryption for inbound calls to your logic app workflow, such asTransport Layer Security (TLS), previously known as Secure Sockets Layer (SSL),Microsoft Entra ID Open Authentication (Microsoft Entra ID OAuth), exposing your logic app with Azure API Management, or restricting the IP addresses that originate inbound calls, seeSecure access and data - Access for inbound calls to request-based triggers.
Next steps
Secure access and data - Access for inbound calls to request-based triggers
Managed or Azure-hosted connectors in Azure Logic Apps
Feedback
Was this page helpful?
Additional resources