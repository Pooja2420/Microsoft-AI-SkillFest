Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Manage credentials in Azure Automation
Article
2024-09-10
7 contributors
In this article
An Automation credential asset holds an object that contains security credentials, such as a user name and a password. Runbooks and DSC configurations use cmdlets that accept aPSCredentialobject for authentication. Alternatively, they can extract the user name and password of thePSCredentialobject to provide to some application or service requiring authentication.
PSCredential
Note
Secure assets in Azure Automation include credentials, certificates, connections, and encrypted variables. These assets are encrypted and stored in Azure Automation using a unique key that is generated for each Automation account. Azure Automation stores the key in the system-managed Key Vault. Before storing a secure asset, Automation loads the key from Key Vault and then uses it to encrypt the asset.
Note
For information about viewing or deleting personal data, seeGeneral Data Subject Requests for the GDPR,Azure Data Subject Requests for the GDPR, orWindows Data Subject Requests for the GDPR, depending on your specific area and needs. For more information about GDPR, see theGDPR section of the Microsoft Trust Centerand theGDPR section of the Service Trust portal.
PowerShell cmdlets used to access credentials
The cmdlets in the following table create and manage Automation credentials with PowerShell. They ship as part of the Az modules.
PSCredential
Other cmdlets used to access credentials
The cmdlets in the following table are used to access credentials in your runbooks and DSC configurations.
Get-AutomationPSCredential
PSCredential
Get-AzAutomationCredential
To retrievePSCredentialobjects in your code, you must import theOrchestrator.AssetManagement.Cmdletsmodule. For more information, seeManage modules in Azure Automation.
PSCredential
Orchestrator.AssetManagement.Cmdlets
Import-Module Orchestrator.AssetManagement.Cmdlets -ErrorAction SilentlyContinue
Import-Module Orchestrator.AssetManagement.Cmdlets -ErrorAction SilentlyContinue
Note
You should avoid using variables in theNameparameter ofGet-AutomationPSCredential. Their use can complicate discovery of dependencies between runbooks or DSC configurations and credential assets at design time.
Name
Get-AutomationPSCredential
Python functions that access credentials
The function in the following table is used to access credentials in a Python 2 and 3 runbook. Python 3 runbooks are currently in preview.
automationassets.get_automation_credential
Note
Import theautomationassetsmodule at the top of your Python runbook to access the asset functions.
automationassets
Create a new credential asset
You can create a new credential asset using the Azure portal or using Windows PowerShell.
Create a new credential asset with the Azure portal
From your Automation account, on the left-hand pane selectCredentialsunderShared Resources.
From your Automation account, on the left-hand pane selectCredentialsunderShared Resources.
On theCredentialspage, selectAdd a credential.
On theCredentialspage, selectAdd a credential.
In the New Credential pane, enter an appropriate credential name following your naming standards.
In the New Credential pane, enter an appropriate credential name following your naming standards.
Type your access ID in theUser namefield.
Type your access ID in theUser namefield.
For both password fields, enter your secret access key.
For both password fields, enter your secret access key.

If the multifactor authentication box is checked, uncheck it.
If the multifactor authentication box is checked, uncheck it.
ClickCreateto save the new credential asset.
ClickCreateto save the new credential asset.
Note
Azure Automation does not support user accounts that use multifactor authentication.
Create a new credential asset with Windows PowerShell
The following example shows how to create a new Automation credential asset. APSCredentialobject is first created with the name and password, and then used to create the credential asset. Instead, you can use theGet-Credentialcmdlet to prompt the user to type in a name and password.
PSCredential
Get-Credential
$user = "MyDomain\MyUser"
$pw = ConvertTo-SecureString "PassWord!" -AsPlainText -Force
$cred = New-Object âTypeName System.Management.Automation.PSCredential âArgumentList $user, $pw
New-AzureAutomationCredential -AutomationAccountName "MyAutomationAccount" -Name "MyCredential" -Value $cred
$user = "MyDomain\MyUser"
$pw = ConvertTo-SecureString "PassWord!" -AsPlainText -Force
$cred = New-Object âTypeName System.Management.Automation.PSCredential âArgumentList $user, $pw
New-AzureAutomationCredential -AutomationAccountName "MyAutomationAccount" -Name "MyCredential" -Value $cred
Get a credential asset
A runbook or DSC configuration retrieves a credential asset with the internalGet-AutomationPSCredentialcmdlet. This cmdlet gets aPSCredentialobject that you can use with a cmdlet that requires a credential. You can also retrieve the properties of the credential object to use individually. The object has properties for the user name and the secure password.
Get-AutomationPSCredential
PSCredential
Note
TheGet-AzAutomationCredentialcmdlet does not retrieve aPSCredentialobject that can be used for authentication. It only provides information about the credential. If you need to use a credential in a runbook, you must retrieve it as aPSCredentialobject usingGet-AutomationPSCredential.
Get-AzAutomationCredential
PSCredential
PSCredential
Get-AutomationPSCredential
Alternatively, you can use theGetNetworkCredentialmethod to retrieve aNetworkCredentialobject that represents an unsecured version of the password.
Textual runbook example
PowerShell
Python 2
Python 3
The following example shows how to use a PowerShell credential in a runbook. It retrieves the credential and assigns its user name and password to variables.
$myCredential = Get-AutomationPSCredential -Name 'MyCredential'
$userName = $myCredential.UserName
$securePassword = $myCredential.Password
$password = $myCredential.GetNetworkCredential().Password
$myCredential = Get-AutomationPSCredential -Name 'MyCredential'
$userName = $myCredential.UserName
$securePassword = $myCredential.Password
$password = $myCredential.GetNetworkCredential().Password
You can also use a credential to authenticate to Azure withConnect-AzAccountafter first connecting with amanaged identity. This example uses asystem-assigned managed identity.
# Ensures you do not inherit an AzContext in your runbook
Disable-AzContextAutosave -Scope Process

# Connect to Azure with system-assigned managed identity
$AzureContext = (Connect-AzAccount -Identity).context

# set and store context
$AzureContext = Set-AzContext -SubscriptionName $AzureContext.Subscription -DefaultProfile $AzureContext

# Get credential
$myCred = Get-AutomationPSCredential -Name "MyCredential"
$userName = $myCred.UserName
$securePassword = $myCred.Password
$password = $myCred.GetNetworkCredential().Password

$myPsCred = New-Object System.Management.Automation.PSCredential ($userName,$securePassword)

# Connect to Azure with credential
$AzureContext = (Connect-AzAccount -Credential $myPsCred -TenantId $AzureContext.Subscription.TenantId).context

# set and store context
$AzureContext = Set-AzContext -SubscriptionName $AzureContext.Subscription `
    -TenantId $AzureContext.Subscription.TenantId `
    -DefaultProfile $AzureContext
# Ensures you do not inherit an AzContext in your runbook
Disable-AzContextAutosave -Scope Process

# Connect to Azure with system-assigned managed identity
$AzureContext = (Connect-AzAccount -Identity).context

# set and store context
$AzureContext = Set-AzContext -SubscriptionName $AzureContext.Subscription -DefaultProfile $AzureContext

# Get credential
$myCred = Get-AutomationPSCredential -Name "MyCredential"
$userName = $myCred.UserName
$securePassword = $myCred.Password
$password = $myCred.GetNetworkCredential().Password

$myPsCred = New-Object System.Management.Automation.PSCredential ($userName,$securePassword)

# Connect to Azure with credential
$AzureContext = (Connect-AzAccount -Credential $myPsCred -TenantId $AzureContext.Subscription.TenantId).context

# set and store context
$AzureContext = Set-AzContext -SubscriptionName $AzureContext.Subscription `
    -TenantId $AzureContext.Subscription.TenantId `
    -DefaultProfile $AzureContext
The following example shows an example of accessing credentials in Python 2 runbooks.
import automationassets
from automationassets import AutomationAssetNotFound

# get a credential
cred = automationassets.get_automation_credential("credtest")
print cred["username"]
print cred["password"]
import automationassets
from automationassets import AutomationAssetNotFound

# get a credential
cred = automationassets.get_automation_credential("credtest")
print cred["username"]
print cred["password"]
The following example shows an example of accessing credentials in Python 3 runbooks (preview).
import automationassets
from automationassets import AutomationAssetNotFound

# get a credential
cred = automationassets.get_automation_credential("credtest")
print (cred["username"])
print (cred["password"])
import automationassets
from automationassets import AutomationAssetNotFound

# get a credential
cred = automationassets.get_automation_credential("credtest")
print (cred["username"])
print (cred["password"])
Graphical runbook example
You can add an activity for the internalGet-AutomationPSCredentialcmdlet to a graphical runbook by right-clicking on the credential in the Library pane of the graphical editor and selectingAdd to canvas.
Get-AutomationPSCredential

The following image shows an example of using a credential in a graphical runbook. In this case, the credential provides authentication for a runbook to Azure resources, as described inUse Microsoft Entra ID in Azure Automation to authenticate to Azure. The first activity retrieves the credential that has access to the Azure subscription. The account connection activity then uses this credential to provide authentication for any activities that come after it. Apipeline linkis used here sinceGet-AutomationPSCredentialis expecting a single object.
Get-AutomationPSCredential

Use credentials in a DSC configuration
While DSC configurations in Azure Automation can work with credential assets usingGet-AutomationPSCredential, they can also pass credential assets via parameters. For more information, seeCompiling configurations in Azure Automation DSC.
Get-AutomationPSCredential
Next steps
To learn more about the cmdlets used to access certificates, seeManage modules in Azure Automation.
For general information about runbooks, seeRunbook execution in Azure Automation.
For details of DSC configurations, seeAzure Automation State Configuration overview.
Feedback
Was this page helpful?
Additional resources