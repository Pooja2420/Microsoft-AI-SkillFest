Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Microsoft.Web sites
Article
2024-12-09
2 contributors
In this article
Latest
2024-04-01
2023-12-01
2023-01-01
2022-09-01
2022-03-01
2021-03-01
2021-02-01
2021-01-15
2021-01-01
2020-12-01
2020-10-01
2020-09-01
2020-06-01
2019-08-01
2018-11-01
2018-02-01
2016-08-01
2015-08-01
Bicep resource definition
The sites resource type can be deployed with operations that target:
Resource groups- Seeresource group deployment commands
For a list of changed properties in each API version, seechange log.
Resource format
To create a Microsoft.Web/sites resource, add the following Bicep to your template.
resource symbolicname 'Microsoft.Web/sites@2024-04-01' = {
  extendedLocation: {
    name: 'string'
  }
  identity: {
    type: 'string'
    userAssignedIdentities: {
      {customized property}: {}
    }
  }
  kind: 'string'
  location: 'string'
  name: 'string'
  properties: {
    autoGeneratedDomainNameLabelScope: 'string'
    clientAffinityEnabled: bool
    clientCertEnabled: bool
    clientCertExclusionPaths: 'string'
    clientCertMode: 'string'
    cloningInfo: {
      appSettingsOverrides: {
        {customized property}: 'string'
      }
      cloneCustomHostNames: bool
      cloneSourceControl: bool
      configureLoadBalancing: bool
      correlationId: 'string'
      hostingEnvironment: 'string'
      overwrite: bool
      sourceWebAppId: 'string'
      sourceWebAppLocation: 'string'
      trafficManagerProfileId: 'string'
      trafficManagerProfileName: 'string'
    }
    containerSize: int
    customDomainVerificationId: 'string'
    dailyMemoryTimeQuota: int
    daprConfig: {
      appId: 'string'
      appPort: int
      enableApiLogging: bool
      enabled: bool
      httpMaxRequestSize: int
      httpReadBufferSize: int
      logLevel: 'string'
    }
    dnsConfiguration: {
      dnsAltServer: 'string'
      dnsMaxCacheTimeout: int
      dnsRetryAttemptCount: int
      dnsRetryAttemptTimeout: int
      dnsServers: [
        'string'
      ]
    }
    enabled: bool
    endToEndEncryptionEnabled: bool
    functionAppConfig: {
      deployment: {
        storage: {
          authentication: {
            storageAccountConnectionStringName: 'string'
            type: 'string'
            userAssignedIdentityResourceId: 'string'
          }
          type: 'string'
          value: 'string'
        }
      }
      runtime: {
        name: 'string'
        version: 'string'
      }
      scaleAndConcurrency: {
        alwaysReady: [
          {
            instanceCount: int
            name: 'string'
          }
        ]
        instanceMemoryMB: int
        maximumInstanceCount: int
        triggers: {
          http: {
            perInstanceConcurrency: int
          }
        }
      }
    }
    hostingEnvironmentProfile: {
      id: 'string'
    }
    hostNamesDisabled: bool
    hostNameSslStates: [
      {
        hostType: 'string'
        name: 'string'
        sslState: 'string'
        thumbprint: 'string'
        toUpdate: bool
        virtualIP: 'string'
      }
    ]
    httpsOnly: bool
    hyperV: bool
    ipMode: 'string'
    isXenon: bool
    keyVaultReferenceIdentity: 'string'
    managedEnvironmentId: 'string'
    publicNetworkAccess: 'string'
    redundancyMode: 'string'
    reserved: bool
    resourceConfig: {
      cpu: int
      memory: 'string'
    }
    scmSiteAlsoStopped: bool
    serverFarmId: 'string'
    siteConfig: {
      acrUseManagedIdentityCreds: bool
      acrUserManagedIdentityID: 'string'
      alwaysOn: bool
      apiDefinition: {
        url: 'string'
      }
      apiManagementConfig: {
        id: 'string'
      }
      appCommandLine: 'string'
      appSettings: [
        {
          name: 'string'
          value: 'string'
        }
      ]
      autoHealEnabled: bool
      autoHealRules: {
        actions: {
          actionType: 'string'
          customAction: {
            exe: 'string'
            parameters: 'string'
          }
          minProcessExecutionTime: 'string'
        }
        triggers: {
          privateBytesInKB: int
          requests: {
            count: int
            timeInterval: 'string'
          }
          slowRequests: {
            count: int
            path: 'string'
            timeInterval: 'string'
            timeTaken: 'string'
          }
          slowRequestsWithPath: [
            {
              count: int
              path: 'string'
              timeInterval: 'string'
              timeTaken: 'string'
            }
          ]
          statusCodes: [
            {
              count: int
              path: 'string'
              status: int
              subStatus: int
              timeInterval: 'string'
              win32Status: int
            }
          ]
          statusCodesRange: [
            {
              count: int
              path: 'string'
              statusCodes: 'string'
              timeInterval: 'string'
            }
          ]
        }
      }
      autoSwapSlotName: 'string'
      azureStorageAccounts: {
        {customized property}: {
          accessKey: 'string'
          accountName: 'string'
          mountPath: 'string'
          protocol: 'string'
          shareName: 'string'
          type: 'string'
        }
      }
      connectionStrings: [
        {
          connectionString: 'string'
          name: 'string'
          type: 'string'
        }
      ]
      cors: {
        allowedOrigins: [
          'string'
        ]
        supportCredentials: bool
      }
      defaultDocuments: [
        'string'
      ]
      detailedErrorLoggingEnabled: bool
      documentRoot: 'string'
      elasticWebAppScaleLimit: int
      experiments: {
        rampUpRules: [
          {
            actionHostName: 'string'
            changeDecisionCallbackUrl: 'string'
            changeIntervalInMinutes: int
            changeStep: int
            maxReroutePercentage: int
            minReroutePercentage: int
            name: 'string'
            reroutePercentage: int
          }
        ]
      }
      ftpsState: 'string'
      functionAppScaleLimit: int
      functionsRuntimeScaleMonitoringEnabled: bool
      handlerMappings: [
        {
          arguments: 'string'
          extension: 'string'
          scriptProcessor: 'string'
        }
      ]
      healthCheckPath: 'string'
      http20Enabled: bool
      httpLoggingEnabled: bool
      ipSecurityRestrictions: [
        {
          action: 'string'
          description: 'string'
          headers: {
            {customized property}: [
              'string'
            ]
          }
          ipAddress: 'string'
          name: 'string'
          priority: int
          subnetMask: 'string'
          subnetTrafficTag: int
          tag: 'string'
          vnetSubnetResourceId: 'string'
          vnetTrafficTag: int
        }
      ]
      ipSecurityRestrictionsDefaultAction: 'string'
      javaContainer: 'string'
      javaContainerVersion: 'string'
      javaVersion: 'string'
      keyVaultReferenceIdentity: 'string'
      limits: {
        maxDiskSizeInMb: int
        maxMemoryInMb: int
        maxPercentageCpu: int
      }
      linuxFxVersion: 'string'
      loadBalancing: 'string'
      localMySqlEnabled: bool
      logsDirectorySizeLimit: int
      managedPipelineMode: 'string'
      managedServiceIdentityId: int
      metadata: [
        {
          name: 'string'
          value: 'string'
        }
      ]
      minimumElasticInstanceCount: int
      minTlsCipherSuite: 'string'
      minTlsVersion: 'string'
      netFrameworkVersion: 'string'
      nodeVersion: 'string'
      numberOfWorkers: int
      phpVersion: 'string'
      powerShellVersion: 'string'
      preWarmedInstanceCount: int
      publicNetworkAccess: 'string'
      publishingUsername: 'string'
      push: {
        kind: 'string'
        properties: {
          dynamicTagsJson: 'string'
          isPushEnabled: bool
          tagsRequiringAuth: 'string'
          tagWhitelistJson: 'string'
        }
      }
      pythonVersion: 'string'
      remoteDebuggingEnabled: bool
      remoteDebuggingVersion: 'string'
      requestTracingEnabled: bool
      requestTracingExpirationTime: 'string'
      scmIpSecurityRestrictions: [
        {
          action: 'string'
          description: 'string'
          headers: {
            {customized property}: [
              'string'
            ]
          }
          ipAddress: 'string'
          name: 'string'
          priority: int
          subnetMask: 'string'
          subnetTrafficTag: int
          tag: 'string'
          vnetSubnetResourceId: 'string'
          vnetTrafficTag: int
        }
      ]
      scmIpSecurityRestrictionsDefaultAction: 'string'
      scmIpSecurityRestrictionsUseMain: bool
      scmMinTlsVersion: 'string'
      scmType: 'string'
      tracingOptions: 'string'
      use32BitWorkerProcess: bool
      virtualApplications: [
        {
          physicalPath: 'string'
          preloadEnabled: bool
          virtualDirectories: [
            {
              physicalPath: 'string'
              virtualPath: 'string'
            }
          ]
          virtualPath: 'string'
        }
      ]
      vnetName: 'string'
      vnetPrivatePortsCount: int
      vnetRouteAllEnabled: bool
      websiteTimeZone: 'string'
      webSocketsEnabled: bool
      windowsFxVersion: 'string'
      xManagedServiceIdentityId: int
    }
    storageAccountRequired: bool
    virtualNetworkSubnetId: 'string'
    vnetBackupRestoreEnabled: bool
    vnetContentShareEnabled: bool
    vnetImagePullEnabled: bool
    vnetRouteAllEnabled: bool
    workloadProfileName: 'string'
  }
  tags: {
    {customized property}: 'string'
  }
}
resource symbolicname 'Microsoft.Web/sites@2024-04-01' = {
  extendedLocation: {
    name: 'string'
  }
  identity: {
    type: 'string'
    userAssignedIdentities: {
      {customized property}: {}
    }
  }
  kind: 'string'
  location: 'string'
  name: 'string'
  properties: {
    autoGeneratedDomainNameLabelScope: 'string'
    clientAffinityEnabled: bool
    clientCertEnabled: bool
    clientCertExclusionPaths: 'string'
    clientCertMode: 'string'
    cloningInfo: {
      appSettingsOverrides: {
        {customized property}: 'string'
      }
      cloneCustomHostNames: bool
      cloneSourceControl: bool
      configureLoadBalancing: bool
      correlationId: 'string'
      hostingEnvironment: 'string'
      overwrite: bool
      sourceWebAppId: 'string'
      sourceWebAppLocation: 'string'
      trafficManagerProfileId: 'string'
      trafficManagerProfileName: 'string'
    }
    containerSize: int
    customDomainVerificationId: 'string'
    dailyMemoryTimeQuota: int
    daprConfig: {
      appId: 'string'
      appPort: int
      enableApiLogging: bool
      enabled: bool
      httpMaxRequestSize: int
      httpReadBufferSize: int
      logLevel: 'string'
    }
    dnsConfiguration: {
      dnsAltServer: 'string'
      dnsMaxCacheTimeout: int
      dnsRetryAttemptCount: int
      dnsRetryAttemptTimeout: int
      dnsServers: [
        'string'
      ]
    }
    enabled: bool
    endToEndEncryptionEnabled: bool
    functionAppConfig: {
      deployment: {
        storage: {
          authentication: {
            storageAccountConnectionStringName: 'string'
            type: 'string'
            userAssignedIdentityResourceId: 'string'
          }
          type: 'string'
          value: 'string'
        }
      }
      runtime: {
        name: 'string'
        version: 'string'
      }
      scaleAndConcurrency: {
        alwaysReady: [
          {
            instanceCount: int
            name: 'string'
          }
        ]
        instanceMemoryMB: int
        maximumInstanceCount: int
        triggers: {
          http: {
            perInstanceConcurrency: int
          }
        }
      }
    }
    hostingEnvironmentProfile: {
      id: 'string'
    }
    hostNamesDisabled: bool
    hostNameSslStates: [
      {
        hostType: 'string'
        name: 'string'
        sslState: 'string'
        thumbprint: 'string'
        toUpdate: bool
        virtualIP: 'string'
      }
    ]
    httpsOnly: bool
    hyperV: bool
    ipMode: 'string'
    isXenon: bool
    keyVaultReferenceIdentity: 'string'
    managedEnvironmentId: 'string'
    publicNetworkAccess: 'string'
    redundancyMode: 'string'
    reserved: bool
    resourceConfig: {
      cpu: int
      memory: 'string'
    }
    scmSiteAlsoStopped: bool
    serverFarmId: 'string'
    siteConfig: {
      acrUseManagedIdentityCreds: bool
      acrUserManagedIdentityID: 'string'
      alwaysOn: bool
      apiDefinition: {
        url: 'string'
      }
      apiManagementConfig: {
        id: 'string'
      }
      appCommandLine: 'string'
      appSettings: [
        {
          name: 'string'
          value: 'string'
        }
      ]
      autoHealEnabled: bool
      autoHealRules: {
        actions: {
          actionType: 'string'
          customAction: {
            exe: 'string'
            parameters: 'string'
          }
          minProcessExecutionTime: 'string'
        }
        triggers: {
          privateBytesInKB: int
          requests: {
            count: int
            timeInterval: 'string'
          }
          slowRequests: {
            count: int
            path: 'string'
            timeInterval: 'string'
            timeTaken: 'string'
          }
          slowRequestsWithPath: [
            {
              count: int
              path: 'string'
              timeInterval: 'string'
              timeTaken: 'string'
            }
          ]
          statusCodes: [
            {
              count: int
              path: 'string'
              status: int
              subStatus: int
              timeInterval: 'string'
              win32Status: int
            }
          ]
          statusCodesRange: [
            {
              count: int
              path: 'string'
              statusCodes: 'string'
              timeInterval: 'string'
            }
          ]
        }
      }
      autoSwapSlotName: 'string'
      azureStorageAccounts: {
        {customized property}: {
          accessKey: 'string'
          accountName: 'string'
          mountPath: 'string'
          protocol: 'string'
          shareName: 'string'
          type: 'string'
        }
      }
      connectionStrings: [
        {
          connectionString: 'string'
          name: 'string'
          type: 'string'
        }
      ]
      cors: {
        allowedOrigins: [
          'string'
        ]
        supportCredentials: bool
      }
      defaultDocuments: [
        'string'
      ]
      detailedErrorLoggingEnabled: bool
      documentRoot: 'string'
      elasticWebAppScaleLimit: int
      experiments: {
        rampUpRules: [
          {
            actionHostName: 'string'
            changeDecisionCallbackUrl: 'string'
            changeIntervalInMinutes: int
            changeStep: int
            maxReroutePercentage: int
            minReroutePercentage: int
            name: 'string'
            reroutePercentage: int
          }
        ]
      }
      ftpsState: 'string'
      functionAppScaleLimit: int
      functionsRuntimeScaleMonitoringEnabled: bool
      handlerMappings: [
        {
          arguments: 'string'
          extension: 'string'
          scriptProcessor: 'string'
        }
      ]
      healthCheckPath: 'string'
      http20Enabled: bool
      httpLoggingEnabled: bool
      ipSecurityRestrictions: [
        {
          action: 'string'
          description: 'string'
          headers: {
            {customized property}: [
              'string'
            ]
          }
          ipAddress: 'string'
          name: 'string'
          priority: int
          subnetMask: 'string'
          subnetTrafficTag: int
          tag: 'string'
          vnetSubnetResourceId: 'string'
          vnetTrafficTag: int
        }
      ]
      ipSecurityRestrictionsDefaultAction: 'string'
      javaContainer: 'string'
      javaContainerVersion: 'string'
      javaVersion: 'string'
      keyVaultReferenceIdentity: 'string'
      limits: {
        maxDiskSizeInMb: int
        maxMemoryInMb: int
        maxPercentageCpu: int
      }
      linuxFxVersion: 'string'
      loadBalancing: 'string'
      localMySqlEnabled: bool
      logsDirectorySizeLimit: int
      managedPipelineMode: 'string'
      managedServiceIdentityId: int
      metadata: [
        {
          name: 'string'
          value: 'string'
        }
      ]
      minimumElasticInstanceCount: int
      minTlsCipherSuite: 'string'
      minTlsVersion: 'string'
      netFrameworkVersion: 'string'
      nodeVersion: 'string'
      numberOfWorkers: int
      phpVersion: 'string'
      powerShellVersion: 'string'
      preWarmedInstanceCount: int
      publicNetworkAccess: 'string'
      publishingUsername: 'string'
      push: {
        kind: 'string'
        properties: {
          dynamicTagsJson: 'string'
          isPushEnabled: bool
          tagsRequiringAuth: 'string'
          tagWhitelistJson: 'string'
        }
      }
      pythonVersion: 'string'
      remoteDebuggingEnabled: bool
      remoteDebuggingVersion: 'string'
      requestTracingEnabled: bool
      requestTracingExpirationTime: 'string'
      scmIpSecurityRestrictions: [
        {
          action: 'string'
          description: 'string'
          headers: {
            {customized property}: [
              'string'
            ]
          }
          ipAddress: 'string'
          name: 'string'
          priority: int
          subnetMask: 'string'
          subnetTrafficTag: int
          tag: 'string'
          vnetSubnetResourceId: 'string'
          vnetTrafficTag: int
        }
      ]
      scmIpSecurityRestrictionsDefaultAction: 'string'
      scmIpSecurityRestrictionsUseMain: bool
      scmMinTlsVersion: 'string'
      scmType: 'string'
      tracingOptions: 'string'
      use32BitWorkerProcess: bool
      virtualApplications: [
        {
          physicalPath: 'string'
          preloadEnabled: bool
          virtualDirectories: [
            {
              physicalPath: 'string'
              virtualPath: 'string'
            }
          ]
          virtualPath: 'string'
        }
      ]
      vnetName: 'string'
      vnetPrivatePortsCount: int
      vnetRouteAllEnabled: bool
      websiteTimeZone: 'string'
      webSocketsEnabled: bool
      windowsFxVersion: 'string'
      xManagedServiceIdentityId: int
    }
    storageAccountRequired: bool
    virtualNetworkSubnetId: 'string'
    vnetBackupRestoreEnabled: bool
    vnetContentShareEnabled: bool
    vnetImagePullEnabled: bool
    vnetRouteAllEnabled: bool
    workloadProfileName: 'string'
  }
  tags: {
    {customized property}: 'string'
  }
}
Property Values
ApiDefinitionInfo
ApiManagementConfig
AutoHealActions
AutoHealCustomAction
AutoHealRules
AutoHealTriggers
AzureStorageInfoValue
CloningInfo
^[0-9a-fA-F]{8}-([0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12}$
CloningInfoAppSettingsOverrides
ConnStringInfo
CorsSettings
DaprConfig
Experiments
ExtendedLocation
FunctionAppConfig
FunctionsAlwaysReadyConfig
FunctionsDeployment
FunctionsDeploymentStorage
FunctionsDeploymentStorageAuthentication
FunctionsRuntime
FunctionsScaleAndConcurrency
FunctionsScaleAndConcurrencyTriggers
FunctionsScaleAndConcurrencyTriggersHttp
HandlerMapping
HostingEnvironmentProfile
HostNameSslState
IpSecurityRestriction
IpSecurityRestrictionHeaders
ManagedServiceIdentity
ManagedServiceIdentityUserAssignedIdentities
Microsoft.Web/sites
NameValuePair
PushSettings
PushSettingsProperties
RampUpRule
RequestsBasedTrigger
ResourceConfig
ResourceTags
SiteConfig
SiteConfigAzureStorageAccounts
SiteDnsConfig
SiteLimits
SiteProperties
SlowRequestsBasedTrigger
StatusCodesBasedTrigger
StatusCodesRangeBasedTrigger
UserAssignedIdentity
VirtualApplication
VirtualDirectory
Usage Examples
Azure Verified Modules
The followingAzure Verified Modulescan be used to deploy this resource type.
Azure Quickstart Samples
The followingAzure Quickstart templatescontain Bicep samples for deploying this resource type.
ARM template resource definition
The sites resource type can be deployed with operations that target:
Resource groups- Seeresource group deployment commands
For a list of changed properties in each API version, seechange log.
Resource format
To create a Microsoft.Web/sites resource, add the following JSON to your template.
{
  "type": "Microsoft.Web/sites",
  "apiVersion": "2024-04-01",
  "name": "string",
  "extendedLocation": {
    "name": "string"
  },
  "identity": {
    "type": "string",
    "userAssignedIdentities": {
      "{customized property}": {
      }
    }
  },
  "kind": "string",
  "location": "string",
  "properties": {
    "autoGeneratedDomainNameLabelScope": "string",
    "clientAffinityEnabled": "bool",
    "clientCertEnabled": "bool",
    "clientCertExclusionPaths": "string",
    "clientCertMode": "string",
    "cloningInfo": {
      "appSettingsOverrides": {
        "{customized property}": "string"
      },
      "cloneCustomHostNames": "bool",
      "cloneSourceControl": "bool",
      "configureLoadBalancing": "bool",
      "correlationId": "string",
      "hostingEnvironment": "string",
      "overwrite": "bool",
      "sourceWebAppId": "string",
      "sourceWebAppLocation": "string",
      "trafficManagerProfileId": "string",
      "trafficManagerProfileName": "string"
    },
    "containerSize": "int",
    "customDomainVerificationId": "string",
    "dailyMemoryTimeQuota": "int",
    "daprConfig": {
      "appId": "string",
      "appPort": "int",
      "enableApiLogging": "bool",
      "enabled": "bool",
      "httpMaxRequestSize": "int",
      "httpReadBufferSize": "int",
      "logLevel": "string"
    },
    "dnsConfiguration": {
      "dnsAltServer": "string",
      "dnsMaxCacheTimeout": "int",
      "dnsRetryAttemptCount": "int",
      "dnsRetryAttemptTimeout": "int",
      "dnsServers": [ "string" ]
    },
    "enabled": "bool",
    "endToEndEncryptionEnabled": "bool",
    "functionAppConfig": {
      "deployment": {
        "storage": {
          "authentication": {
            "storageAccountConnectionStringName": "string",
            "type": "string",
            "userAssignedIdentityResourceId": "string"
          },
          "type": "string",
          "value": "string"
        }
      },
      "runtime": {
        "name": "string",
        "version": "string"
      },
      "scaleAndConcurrency": {
        "alwaysReady": [
          {
            "instanceCount": "int",
            "name": "string"
          }
        ],
        "instanceMemoryMB": "int",
        "maximumInstanceCount": "int",
        "triggers": {
          "http": {
            "perInstanceConcurrency": "int"
          }
        }
      }
    },
    "hostingEnvironmentProfile": {
      "id": "string"
    },
    "hostNamesDisabled": "bool",
    "hostNameSslStates": [
      {
        "hostType": "string",
        "name": "string",
        "sslState": "string",
        "thumbprint": "string",
        "toUpdate": "bool",
        "virtualIP": "string"
      }
    ],
    "httpsOnly": "bool",
    "hyperV": "bool",
    "ipMode": "string",
    "isXenon": "bool",
    "keyVaultReferenceIdentity": "string",
    "managedEnvironmentId": "string",
    "publicNetworkAccess": "string",
    "redundancyMode": "string",
    "reserved": "bool",
    "resourceConfig": {
      "cpu": "int",
      "memory": "string"
    },
    "scmSiteAlsoStopped": "bool",
    "serverFarmId": "string",
    "siteConfig": {
      "acrUseManagedIdentityCreds": "bool",
      "acrUserManagedIdentityID": "string",
      "alwaysOn": "bool",
      "apiDefinition": {
        "url": "string"
      },
      "apiManagementConfig": {
        "id": "string"
      },
      "appCommandLine": "string",
      "appSettings": [
        {
          "name": "string",
          "value": "string"
        }
      ],
      "autoHealEnabled": "bool",
      "autoHealRules": {
        "actions": {
          "actionType": "string",
          "customAction": {
            "exe": "string",
            "parameters": "string"
          },
          "minProcessExecutionTime": "string"
        },
        "triggers": {
          "privateBytesInKB": "int",
          "requests": {
            "count": "int",
            "timeInterval": "string"
          },
          "slowRequests": {
            "count": "int",
            "path": "string",
            "timeInterval": "string",
            "timeTaken": "string"
          },
          "slowRequestsWithPath": [
            {
              "count": "int",
              "path": "string",
              "timeInterval": "string",
              "timeTaken": "string"
            }
          ],
          "statusCodes": [
            {
              "count": "int",
              "path": "string",
              "status": "int",
              "subStatus": "int",
              "timeInterval": "string",
              "win32Status": "int"
            }
          ],
          "statusCodesRange": [
            {
              "count": "int",
              "path": "string",
              "statusCodes": "string",
              "timeInterval": "string"
            }
          ]
        }
      },
      "autoSwapSlotName": "string",
      "azureStorageAccounts": {
        "{customized property}": {
          "accessKey": "string",
          "accountName": "string",
          "mountPath": "string",
          "protocol": "string",
          "shareName": "string",
          "type": "string"
        }
      },
      "connectionStrings": [
        {
          "connectionString": "string",
          "name": "string",
          "type": "string"
        }
      ],
      "cors": {
        "allowedOrigins": [ "string" ],
        "supportCredentials": "bool"
      },
      "defaultDocuments": [ "string" ],
      "detailedErrorLoggingEnabled": "bool",
      "documentRoot": "string",
      "elasticWebAppScaleLimit": "int",
      "experiments": {
        "rampUpRules": [
          {
            "actionHostName": "string",
            "changeDecisionCallbackUrl": "string",
            "changeIntervalInMinutes": "int",
            "changeStep": "int",
            "maxReroutePercentage": "int",
            "minReroutePercentage": "int",
            "name": "string",
            "reroutePercentage": "int"
          }
        ]
      },
      "ftpsState": "string",
      "functionAppScaleLimit": "int",
      "functionsRuntimeScaleMonitoringEnabled": "bool",
      "handlerMappings": [
        {
          "arguments": "string",
          "extension": "string",
          "scriptProcessor": "string"
        }
      ],
      "healthCheckPath": "string",
      "http20Enabled": "bool",
      "httpLoggingEnabled": "bool",
      "ipSecurityRestrictions": [
        {
          "action": "string",
          "description": "string",
          "headers": {
            "{customized property}": [ "string" ]
          },
          "ipAddress": "string",
          "name": "string",
          "priority": "int",
          "subnetMask": "string",
          "subnetTrafficTag": "int",
          "tag": "string",
          "vnetSubnetResourceId": "string",
          "vnetTrafficTag": "int"
        }
      ],
      "ipSecurityRestrictionsDefaultAction": "string",
      "javaContainer": "string",
      "javaContainerVersion": "string",
      "javaVersion": "string",
      "keyVaultReferenceIdentity": "string",
      "limits": {
        "maxDiskSizeInMb": "int",
        "maxMemoryInMb": "int",
        "maxPercentageCpu": "int"
      },
      "linuxFxVersion": "string",
      "loadBalancing": "string",
      "localMySqlEnabled": "bool",
      "logsDirectorySizeLimit": "int",
      "managedPipelineMode": "string",
      "managedServiceIdentityId": "int",
      "metadata": [
        {
          "name": "string",
          "value": "string"
        }
      ],
      "minimumElasticInstanceCount": "int",
      "minTlsCipherSuite": "string",
      "minTlsVersion": "string",
      "netFrameworkVersion": "string",
      "nodeVersion": "string",
      "numberOfWorkers": "int",
      "phpVersion": "string",
      "powerShellVersion": "string",
      "preWarmedInstanceCount": "int",
      "publicNetworkAccess": "string",
      "publishingUsername": "string",
      "push": {
        "kind": "string",
        "properties": {
          "dynamicTagsJson": "string",
          "isPushEnabled": "bool",
          "tagsRequiringAuth": "string",
          "tagWhitelistJson": "string"
        }
      },
      "pythonVersion": "string",
      "remoteDebuggingEnabled": "bool",
      "remoteDebuggingVersion": "string",
      "requestTracingEnabled": "bool",
      "requestTracingExpirationTime": "string",
      "scmIpSecurityRestrictions": [
        {
          "action": "string",
          "description": "string",
          "headers": {
            "{customized property}": [ "string" ]
          },
          "ipAddress": "string",
          "name": "string",
          "priority": "int",
          "subnetMask": "string",
          "subnetTrafficTag": "int",
          "tag": "string",
          "vnetSubnetResourceId": "string",
          "vnetTrafficTag": "int"
        }
      ],
      "scmIpSecurityRestrictionsDefaultAction": "string",
      "scmIpSecurityRestrictionsUseMain": "bool",
      "scmMinTlsVersion": "string",
      "scmType": "string",
      "tracingOptions": "string",
      "use32BitWorkerProcess": "bool",
      "virtualApplications": [
        {
          "physicalPath": "string",
          "preloadEnabled": "bool",
          "virtualDirectories": [
            {
              "physicalPath": "string",
              "virtualPath": "string"
            }
          ],
          "virtualPath": "string"
        }
      ],
      "vnetName": "string",
      "vnetPrivatePortsCount": "int",
      "vnetRouteAllEnabled": "bool",
      "websiteTimeZone": "string",
      "webSocketsEnabled": "bool",
      "windowsFxVersion": "string",
      "xManagedServiceIdentityId": "int"
    },
    "storageAccountRequired": "bool",
    "virtualNetworkSubnetId": "string",
    "vnetBackupRestoreEnabled": "bool",
    "vnetContentShareEnabled": "bool",
    "vnetImagePullEnabled": "bool",
    "vnetRouteAllEnabled": "bool",
    "workloadProfileName": "string"
  },
  "tags": {
    "{customized property}": "string"
  }
}
{
  "type": "Microsoft.Web/sites",
  "apiVersion": "2024-04-01",
  "name": "string",
  "extendedLocation": {
    "name": "string"
  },
  "identity": {
    "type": "string",
    "userAssignedIdentities": {
      "{customized property}": {
      }
    }
  },
  "kind": "string",
  "location": "string",
  "properties": {
    "autoGeneratedDomainNameLabelScope": "string",
    "clientAffinityEnabled": "bool",
    "clientCertEnabled": "bool",
    "clientCertExclusionPaths": "string",
    "clientCertMode": "string",
    "cloningInfo": {
      "appSettingsOverrides": {
        "{customized property}": "string"
      },
      "cloneCustomHostNames": "bool",
      "cloneSourceControl": "bool",
      "configureLoadBalancing": "bool",
      "correlationId": "string",
      "hostingEnvironment": "string",
      "overwrite": "bool",
      "sourceWebAppId": "string",
      "sourceWebAppLocation": "string",
      "trafficManagerProfileId": "string",
      "trafficManagerProfileName": "string"
    },
    "containerSize": "int",
    "customDomainVerificationId": "string",
    "dailyMemoryTimeQuota": "int",
    "daprConfig": {
      "appId": "string",
      "appPort": "int",
      "enableApiLogging": "bool",
      "enabled": "bool",
      "httpMaxRequestSize": "int",
      "httpReadBufferSize": "int",
      "logLevel": "string"
    },
    "dnsConfiguration": {
      "dnsAltServer": "string",
      "dnsMaxCacheTimeout": "int",
      "dnsRetryAttemptCount": "int",
      "dnsRetryAttemptTimeout": "int",
      "dnsServers": [ "string" ]
    },
    "enabled": "bool",
    "endToEndEncryptionEnabled": "bool",
    "functionAppConfig": {
      "deployment": {
        "storage": {
          "authentication": {
            "storageAccountConnectionStringName": "string",
            "type": "string",
            "userAssignedIdentityResourceId": "string"
          },
          "type": "string",
          "value": "string"
        }
      },
      "runtime": {
        "name": "string",
        "version": "string"
      },
      "scaleAndConcurrency": {
        "alwaysReady": [
          {
            "instanceCount": "int",
            "name": "string"
          }
        ],
        "instanceMemoryMB": "int",
        "maximumInstanceCount": "int",
        "triggers": {
          "http": {
            "perInstanceConcurrency": "int"
          }
        }
      }
    },
    "hostingEnvironmentProfile": {
      "id": "string"
    },
    "hostNamesDisabled": "bool",
    "hostNameSslStates": [
      {
        "hostType": "string",
        "name": "string",
        "sslState": "string",
        "thumbprint": "string",
        "toUpdate": "bool",
        "virtualIP": "string"
      }
    ],
    "httpsOnly": "bool",
    "hyperV": "bool",
    "ipMode": "string",
    "isXenon": "bool",
    "keyVaultReferenceIdentity": "string",
    "managedEnvironmentId": "string",
    "publicNetworkAccess": "string",
    "redundancyMode": "string",
    "reserved": "bool",
    "resourceConfig": {
      "cpu": "int",
      "memory": "string"
    },
    "scmSiteAlsoStopped": "bool",
    "serverFarmId": "string",
    "siteConfig": {
      "acrUseManagedIdentityCreds": "bool",
      "acrUserManagedIdentityID": "string",
      "alwaysOn": "bool",
      "apiDefinition": {
        "url": "string"
      },
      "apiManagementConfig": {
        "id": "string"
      },
      "appCommandLine": "string",
      "appSettings": [
        {
          "name": "string",
          "value": "string"
        }
      ],
      "autoHealEnabled": "bool",
      "autoHealRules": {
        "actions": {
          "actionType": "string",
          "customAction": {
            "exe": "string",
            "parameters": "string"
          },
          "minProcessExecutionTime": "string"
        },
        "triggers": {
          "privateBytesInKB": "int",
          "requests": {
            "count": "int",
            "timeInterval": "string"
          },
          "slowRequests": {
            "count": "int",
            "path": "string",
            "timeInterval": "string",
            "timeTaken": "string"
          },
          "slowRequestsWithPath": [
            {
              "count": "int",
              "path": "string",
              "timeInterval": "string",
              "timeTaken": "string"
            }
          ],
          "statusCodes": [
            {
              "count": "int",
              "path": "string",
              "status": "int",
              "subStatus": "int",
              "timeInterval": "string",
              "win32Status": "int"
            }
          ],
          "statusCodesRange": [
            {
              "count": "int",
              "path": "string",
              "statusCodes": "string",
              "timeInterval": "string"
            }
          ]
        }
      },
      "autoSwapSlotName": "string",
      "azureStorageAccounts": {
        "{customized property}": {
          "accessKey": "string",
          "accountName": "string",
          "mountPath": "string",
          "protocol": "string",
          "shareName": "string",
          "type": "string"
        }
      },
      "connectionStrings": [
        {
          "connectionString": "string",
          "name": "string",
          "type": "string"
        }
      ],
      "cors": {
        "allowedOrigins": [ "string" ],
        "supportCredentials": "bool"
      },
      "defaultDocuments": [ "string" ],
      "detailedErrorLoggingEnabled": "bool",
      "documentRoot": "string",
      "elasticWebAppScaleLimit": "int",
      "experiments": {
        "rampUpRules": [
          {
            "actionHostName": "string",
            "changeDecisionCallbackUrl": "string",
            "changeIntervalInMinutes": "int",
            "changeStep": "int",
            "maxReroutePercentage": "int",
            "minReroutePercentage": "int",
            "name": "string",
            "reroutePercentage": "int"
          }
        ]
      },
      "ftpsState": "string",
      "functionAppScaleLimit": "int",
      "functionsRuntimeScaleMonitoringEnabled": "bool",
      "handlerMappings": [
        {
          "arguments": "string",
          "extension": "string",
          "scriptProcessor": "string"
        }
      ],
      "healthCheckPath": "string",
      "http20Enabled": "bool",
      "httpLoggingEnabled": "bool",
      "ipSecurityRestrictions": [
        {
          "action": "string",
          "description": "string",
          "headers": {
            "{customized property}": [ "string" ]
          },
          "ipAddress": "string",
          "name": "string",
          "priority": "int",
          "subnetMask": "string",
          "subnetTrafficTag": "int",
          "tag": "string",
          "vnetSubnetResourceId": "string",
          "vnetTrafficTag": "int"
        }
      ],
      "ipSecurityRestrictionsDefaultAction": "string",
      "javaContainer": "string",
      "javaContainerVersion": "string",
      "javaVersion": "string",
      "keyVaultReferenceIdentity": "string",
      "limits": {
        "maxDiskSizeInMb": "int",
        "maxMemoryInMb": "int",
        "maxPercentageCpu": "int"
      },
      "linuxFxVersion": "string",
      "loadBalancing": "string",
      "localMySqlEnabled": "bool",
      "logsDirectorySizeLimit": "int",
      "managedPipelineMode": "string",
      "managedServiceIdentityId": "int",
      "metadata": [
        {
          "name": "string",
          "value": "string"
        }
      ],
      "minimumElasticInstanceCount": "int",
      "minTlsCipherSuite": "string",
      "minTlsVersion": "string",
      "netFrameworkVersion": "string",
      "nodeVersion": "string",
      "numberOfWorkers": "int",
      "phpVersion": "string",
      "powerShellVersion": "string",
      "preWarmedInstanceCount": "int",
      "publicNetworkAccess": "string",
      "publishingUsername": "string",
      "push": {
        "kind": "string",
        "properties": {
          "dynamicTagsJson": "string",
          "isPushEnabled": "bool",
          "tagsRequiringAuth": "string",
          "tagWhitelistJson": "string"
        }
      },
      "pythonVersion": "string",
      "remoteDebuggingEnabled": "bool",
      "remoteDebuggingVersion": "string",
      "requestTracingEnabled": "bool",
      "requestTracingExpirationTime": "string",
      "scmIpSecurityRestrictions": [
        {
          "action": "string",
          "description": "string",
          "headers": {
            "{customized property}": [ "string" ]
          },
          "ipAddress": "string",
          "name": "string",
          "priority": "int",
          "subnetMask": "string",
          "subnetTrafficTag": "int",
          "tag": "string",
          "vnetSubnetResourceId": "string",
          "vnetTrafficTag": "int"
        }
      ],
      "scmIpSecurityRestrictionsDefaultAction": "string",
      "scmIpSecurityRestrictionsUseMain": "bool",
      "scmMinTlsVersion": "string",
      "scmType": "string",
      "tracingOptions": "string",
      "use32BitWorkerProcess": "bool",
      "virtualApplications": [
        {
          "physicalPath": "string",
          "preloadEnabled": "bool",
          "virtualDirectories": [
            {
              "physicalPath": "string",
              "virtualPath": "string"
            }
          ],
          "virtualPath": "string"
        }
      ],
      "vnetName": "string",
      "vnetPrivatePortsCount": "int",
      "vnetRouteAllEnabled": "bool",
      "websiteTimeZone": "string",
      "webSocketsEnabled": "bool",
      "windowsFxVersion": "string",
      "xManagedServiceIdentityId": "int"
    },
    "storageAccountRequired": "bool",
    "virtualNetworkSubnetId": "string",
    "vnetBackupRestoreEnabled": "bool",
    "vnetContentShareEnabled": "bool",
    "vnetImagePullEnabled": "bool",
    "vnetRouteAllEnabled": "bool",
    "workloadProfileName": "string"
  },
  "tags": {
    "{customized property}": "string"
  }
}
Property Values
ApiDefinitionInfo
ApiManagementConfig
AutoHealActions
AutoHealCustomAction
AutoHealRules
AutoHealTriggers
AzureStorageInfoValue
CloningInfo
^[0-9a-fA-F]{8}-([0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12}$
CloningInfoAppSettingsOverrides
ConnStringInfo
CorsSettings
DaprConfig
Experiments
ExtendedLocation
FunctionAppConfig
FunctionsAlwaysReadyConfig
FunctionsDeployment
FunctionsDeploymentStorage
FunctionsDeploymentStorageAuthentication
FunctionsRuntime
FunctionsScaleAndConcurrency
FunctionsScaleAndConcurrencyTriggers
FunctionsScaleAndConcurrencyTriggersHttp
HandlerMapping
HostingEnvironmentProfile
HostNameSslState
IpSecurityRestriction
IpSecurityRestrictionHeaders
ManagedServiceIdentity
ManagedServiceIdentityUserAssignedIdentities
Microsoft.Web/sites
NameValuePair
PushSettings
PushSettingsProperties
RampUpRule
RequestsBasedTrigger
ResourceConfig
ResourceTags
SiteConfig
SiteConfigAzureStorageAccounts
SiteDnsConfig
SiteLimits
SiteProperties
SlowRequestsBasedTrigger
StatusCodesBasedTrigger
StatusCodesRangeBasedTrigger
UserAssignedIdentity
VirtualApplication
VirtualDirectory
Usage Examples
Azure Quickstart Templates
The followingAzure Quickstart templatesdeploy this resource type.
Terraform (AzAPI provider) resource definition
The sites resource type can be deployed with operations that target:
Resource groups
For a list of changed properties in each API version, seechange log.
Resource format
To create a Microsoft.Web/sites resource, add the following Terraform to your template.
resource "azapi_resource" "symbolicname" {
  type = "Microsoft.Web/sites@2024-04-01"
  name = "string"
  identity = {
    type = "string"
    userAssignedIdentities = {
      {customized property} = {
      }
    }
  }
  location = "string"
  tags = {
    {customized property} = "string"
  }
  body = {
    extendedLocation = {
      name = "string"
    }
    kind = "string"
    properties = {
      autoGeneratedDomainNameLabelScope = "string"
      clientAffinityEnabled = bool
      clientCertEnabled = bool
      clientCertExclusionPaths = "string"
      clientCertMode = "string"
      cloningInfo = {
        appSettingsOverrides = {
          {customized property} = "string"
        }
        cloneCustomHostNames = bool
        cloneSourceControl = bool
        configureLoadBalancing = bool
        correlationId = "string"
        hostingEnvironment = "string"
        overwrite = bool
        sourceWebAppId = "string"
        sourceWebAppLocation = "string"
        trafficManagerProfileId = "string"
        trafficManagerProfileName = "string"
      }
      containerSize = int
      customDomainVerificationId = "string"
      dailyMemoryTimeQuota = int
      daprConfig = {
        appId = "string"
        appPort = int
        enableApiLogging = bool
        enabled = bool
        httpMaxRequestSize = int
        httpReadBufferSize = int
        logLevel = "string"
      }
      dnsConfiguration = {
        dnsAltServer = "string"
        dnsMaxCacheTimeout = int
        dnsRetryAttemptCount = int
        dnsRetryAttemptTimeout = int
        dnsServers = [
          "string"
        ]
      }
      enabled = bool
      endToEndEncryptionEnabled = bool
      functionAppConfig = {
        deployment = {
          storage = {
            authentication = {
              storageAccountConnectionStringName = "string"
              type = "string"
              userAssignedIdentityResourceId = "string"
            }
            type = "string"
            value = "string"
          }
        }
        runtime = {
          name = "string"
          version = "string"
        }
        scaleAndConcurrency = {
          alwaysReady = [
            {
              instanceCount = int
              name = "string"
            }
          ]
          instanceMemoryMB = int
          maximumInstanceCount = int
          triggers = {
            http = {
              perInstanceConcurrency = int
            }
          }
        }
      }
      hostingEnvironmentProfile = {
        id = "string"
      }
      hostNamesDisabled = bool
      hostNameSslStates = [
        {
          hostType = "string"
          name = "string"
          sslState = "string"
          thumbprint = "string"
          toUpdate = bool
          virtualIP = "string"
        }
      ]
      httpsOnly = bool
      hyperV = bool
      ipMode = "string"
      isXenon = bool
      keyVaultReferenceIdentity = "string"
      managedEnvironmentId = "string"
      publicNetworkAccess = "string"
      redundancyMode = "string"
      reserved = bool
      resourceConfig = {
        cpu = int
        memory = "string"
      }
      scmSiteAlsoStopped = bool
      serverFarmId = "string"
      siteConfig = {
        acrUseManagedIdentityCreds = bool
        acrUserManagedIdentityID = "string"
        alwaysOn = bool
        apiDefinition = {
          url = "string"
        }
        apiManagementConfig = {
          id = "string"
        }
        appCommandLine = "string"
        appSettings = [
          {
            name = "string"
            value = "string"
          }
        ]
        autoHealEnabled = bool
        autoHealRules = {
          actions = {
            actionType = "string"
            customAction = {
              exe = "string"
              parameters = "string"
            }
            minProcessExecutionTime = "string"
          }
          triggers = {
            privateBytesInKB = int
            requests = {
              count = int
              timeInterval = "string"
            }
            slowRequests = {
              count = int
              path = "string"
              timeInterval = "string"
              timeTaken = "string"
            }
            slowRequestsWithPath = [
              {
                count = int
                path = "string"
                timeInterval = "string"
                timeTaken = "string"
              }
            ]
            statusCodes = [
              {
                count = int
                path = "string"
                status = int
                subStatus = int
                timeInterval = "string"
                win32Status = int
              }
            ]
            statusCodesRange = [
              {
                count = int
                path = "string"
                statusCodes = "string"
                timeInterval = "string"
              }
            ]
          }
        }
        autoSwapSlotName = "string"
        azureStorageAccounts = {
          {customized property} = {
            accessKey = "string"
            accountName = "string"
            mountPath = "string"
            protocol = "string"
            shareName = "string"
            type = "string"
          }
        }
        connectionStrings = [
          {
            connectionString = "string"
            name = "string"
            type = "string"
          }
        ]
        cors = {
          allowedOrigins = [
            "string"
          ]
          supportCredentials = bool
        }
        defaultDocuments = [
          "string"
        ]
        detailedErrorLoggingEnabled = bool
        documentRoot = "string"
        elasticWebAppScaleLimit = int
        experiments = {
          rampUpRules = [
            {
              actionHostName = "string"
              changeDecisionCallbackUrl = "string"
              changeIntervalInMinutes = int
              changeStep = int
              maxReroutePercentage = int
              minReroutePercentage = int
              name = "string"
              reroutePercentage = int
            }
          ]
        }
        ftpsState = "string"
        functionAppScaleLimit = int
        functionsRuntimeScaleMonitoringEnabled = bool
        handlerMappings = [
          {
            arguments = "string"
            extension = "string"
            scriptProcessor = "string"
          }
        ]
        healthCheckPath = "string"
        http20Enabled = bool
        httpLoggingEnabled = bool
        ipSecurityRestrictions = [
          {
            action = "string"
            description = "string"
            headers = {
              {customized property} = [
                "string"
              ]
            }
            ipAddress = "string"
            name = "string"
            priority = int
            subnetMask = "string"
            subnetTrafficTag = int
            tag = "string"
            vnetSubnetResourceId = "string"
            vnetTrafficTag = int
          }
        ]
        ipSecurityRestrictionsDefaultAction = "string"
        javaContainer = "string"
        javaContainerVersion = "string"
        javaVersion = "string"
        keyVaultReferenceIdentity = "string"
        limits = {
          maxDiskSizeInMb = int
          maxMemoryInMb = int
          maxPercentageCpu = int
        }
        linuxFxVersion = "string"
        loadBalancing = "string"
        localMySqlEnabled = bool
        logsDirectorySizeLimit = int
        managedPipelineMode = "string"
        managedServiceIdentityId = int
        metadata = [
          {
            name = "string"
            value = "string"
          }
        ]
        minimumElasticInstanceCount = int
        minTlsCipherSuite = "string"
        minTlsVersion = "string"
        netFrameworkVersion = "string"
        nodeVersion = "string"
        numberOfWorkers = int
        phpVersion = "string"
        powerShellVersion = "string"
        preWarmedInstanceCount = int
        publicNetworkAccess = "string"
        publishingUsername = "string"
        push = {
          kind = "string"
          properties = {
            dynamicTagsJson = "string"
            isPushEnabled = bool
            tagsRequiringAuth = "string"
            tagWhitelistJson = "string"
          }
        }
        pythonVersion = "string"
        remoteDebuggingEnabled = bool
        remoteDebuggingVersion = "string"
        requestTracingEnabled = bool
        requestTracingExpirationTime = "string"
        scmIpSecurityRestrictions = [
          {
            action = "string"
            description = "string"
            headers = {
              {customized property} = [
                "string"
              ]
            }
            ipAddress = "string"
            name = "string"
            priority = int
            subnetMask = "string"
            subnetTrafficTag = int
            tag = "string"
            vnetSubnetResourceId = "string"
            vnetTrafficTag = int
          }
        ]
        scmIpSecurityRestrictionsDefaultAction = "string"
        scmIpSecurityRestrictionsUseMain = bool
        scmMinTlsVersion = "string"
        scmType = "string"
        tracingOptions = "string"
        use32BitWorkerProcess = bool
        virtualApplications = [
          {
            physicalPath = "string"
            preloadEnabled = bool
            virtualDirectories = [
              {
                physicalPath = "string"
                virtualPath = "string"
              }
            ]
            virtualPath = "string"
          }
        ]
        vnetName = "string"
        vnetPrivatePortsCount = int
        vnetRouteAllEnabled = bool
        websiteTimeZone = "string"
        webSocketsEnabled = bool
        windowsFxVersion = "string"
        xManagedServiceIdentityId = int
      }
      storageAccountRequired = bool
      virtualNetworkSubnetId = "string"
      vnetBackupRestoreEnabled = bool
      vnetContentShareEnabled = bool
      vnetImagePullEnabled = bool
      vnetRouteAllEnabled = bool
      workloadProfileName = "string"
    }
  }
}
resource "azapi_resource" "symbolicname" {
  type = "Microsoft.Web/sites@2024-04-01"
  name = "string"
  identity = {
    type = "string"
    userAssignedIdentities = {
      {customized property} = {
      }
    }
  }
  location = "string"
  tags = {
    {customized property} = "string"
  }
  body = {
    extendedLocation = {
      name = "string"
    }
    kind = "string"
    properties = {
      autoGeneratedDomainNameLabelScope = "string"
      clientAffinityEnabled = bool
      clientCertEnabled = bool
      clientCertExclusionPaths = "string"
      clientCertMode = "string"
      cloningInfo = {
        appSettingsOverrides = {
          {customized property} = "string"
        }
        cloneCustomHostNames = bool
        cloneSourceControl = bool
        configureLoadBalancing = bool
        correlationId = "string"
        hostingEnvironment = "string"
        overwrite = bool
        sourceWebAppId = "string"
        sourceWebAppLocation = "string"
        trafficManagerProfileId = "string"
        trafficManagerProfileName = "string"
      }
      containerSize = int
      customDomainVerificationId = "string"
      dailyMemoryTimeQuota = int
      daprConfig = {
        appId = "string"
        appPort = int
        enableApiLogging = bool
        enabled = bool
        httpMaxRequestSize = int
        httpReadBufferSize = int
        logLevel = "string"
      }
      dnsConfiguration = {
        dnsAltServer = "string"
        dnsMaxCacheTimeout = int
        dnsRetryAttemptCount = int
        dnsRetryAttemptTimeout = int
        dnsServers = [
          "string"
        ]
      }
      enabled = bool
      endToEndEncryptionEnabled = bool
      functionAppConfig = {
        deployment = {
          storage = {
            authentication = {
              storageAccountConnectionStringName = "string"
              type = "string"
              userAssignedIdentityResourceId = "string"
            }
            type = "string"
            value = "string"
          }
        }
        runtime = {
          name = "string"
          version = "string"
        }
        scaleAndConcurrency = {
          alwaysReady = [
            {
              instanceCount = int
              name = "string"
            }
          ]
          instanceMemoryMB = int
          maximumInstanceCount = int
          triggers = {
            http = {
              perInstanceConcurrency = int
            }
          }
        }
      }
      hostingEnvironmentProfile = {
        id = "string"
      }
      hostNamesDisabled = bool
      hostNameSslStates = [
        {
          hostType = "string"
          name = "string"
          sslState = "string"
          thumbprint = "string"
          toUpdate = bool
          virtualIP = "string"
        }
      ]
      httpsOnly = bool
      hyperV = bool
      ipMode = "string"
      isXenon = bool
      keyVaultReferenceIdentity = "string"
      managedEnvironmentId = "string"
      publicNetworkAccess = "string"
      redundancyMode = "string"
      reserved = bool
      resourceConfig = {
        cpu = int
        memory = "string"
      }
      scmSiteAlsoStopped = bool
      serverFarmId = "string"
      siteConfig = {
        acrUseManagedIdentityCreds = bool
        acrUserManagedIdentityID = "string"
        alwaysOn = bool
        apiDefinition = {
          url = "string"
        }
        apiManagementConfig = {
          id = "string"
        }
        appCommandLine = "string"
        appSettings = [
          {
            name = "string"
            value = "string"
          }
        ]
        autoHealEnabled = bool
        autoHealRules = {
          actions = {
            actionType = "string"
            customAction = {
              exe = "string"
              parameters = "string"
            }
            minProcessExecutionTime = "string"
          }
          triggers = {
            privateBytesInKB = int
            requests = {
              count = int
              timeInterval = "string"
            }
            slowRequests = {
              count = int
              path = "string"
              timeInterval = "string"
              timeTaken = "string"
            }
            slowRequestsWithPath = [
              {
                count = int
                path = "string"
                timeInterval = "string"
                timeTaken = "string"
              }
            ]
            statusCodes = [
              {
                count = int
                path = "string"
                status = int
                subStatus = int
                timeInterval = "string"
                win32Status = int
              }
            ]
            statusCodesRange = [
              {
                count = int
                path = "string"
                statusCodes = "string"
                timeInterval = "string"
              }
            ]
          }
        }
        autoSwapSlotName = "string"
        azureStorageAccounts = {
          {customized property} = {
            accessKey = "string"
            accountName = "string"
            mountPath = "string"
            protocol = "string"
            shareName = "string"
            type = "string"
          }
        }
        connectionStrings = [
          {
            connectionString = "string"
            name = "string"
            type = "string"
          }
        ]
        cors = {
          allowedOrigins = [
            "string"
          ]
          supportCredentials = bool
        }
        defaultDocuments = [
          "string"
        ]
        detailedErrorLoggingEnabled = bool
        documentRoot = "string"
        elasticWebAppScaleLimit = int
        experiments = {
          rampUpRules = [
            {
              actionHostName = "string"
              changeDecisionCallbackUrl = "string"
              changeIntervalInMinutes = int
              changeStep = int
              maxReroutePercentage = int
              minReroutePercentage = int
              name = "string"
              reroutePercentage = int
            }
          ]
        }
        ftpsState = "string"
        functionAppScaleLimit = int
        functionsRuntimeScaleMonitoringEnabled = bool
        handlerMappings = [
          {
            arguments = "string"
            extension = "string"
            scriptProcessor = "string"
          }
        ]
        healthCheckPath = "string"
        http20Enabled = bool
        httpLoggingEnabled = bool
        ipSecurityRestrictions = [
          {
            action = "string"
            description = "string"
            headers = {
              {customized property} = [
                "string"
              ]
            }
            ipAddress = "string"
            name = "string"
            priority = int
            subnetMask = "string"
            subnetTrafficTag = int
            tag = "string"
            vnetSubnetResourceId = "string"
            vnetTrafficTag = int
          }
        ]
        ipSecurityRestrictionsDefaultAction = "string"
        javaContainer = "string"
        javaContainerVersion = "string"
        javaVersion = "string"
        keyVaultReferenceIdentity = "string"
        limits = {
          maxDiskSizeInMb = int
          maxMemoryInMb = int
          maxPercentageCpu = int
        }
        linuxFxVersion = "string"
        loadBalancing = "string"
        localMySqlEnabled = bool
        logsDirectorySizeLimit = int
        managedPipelineMode = "string"
        managedServiceIdentityId = int
        metadata = [
          {
            name = "string"
            value = "string"
          }
        ]
        minimumElasticInstanceCount = int
        minTlsCipherSuite = "string"
        minTlsVersion = "string"
        netFrameworkVersion = "string"
        nodeVersion = "string"
        numberOfWorkers = int
        phpVersion = "string"
        powerShellVersion = "string"
        preWarmedInstanceCount = int
        publicNetworkAccess = "string"
        publishingUsername = "string"
        push = {
          kind = "string"
          properties = {
            dynamicTagsJson = "string"
            isPushEnabled = bool
            tagsRequiringAuth = "string"
            tagWhitelistJson = "string"
          }
        }
        pythonVersion = "string"
        remoteDebuggingEnabled = bool
        remoteDebuggingVersion = "string"
        requestTracingEnabled = bool
        requestTracingExpirationTime = "string"
        scmIpSecurityRestrictions = [
          {
            action = "string"
            description = "string"
            headers = {
              {customized property} = [
                "string"
              ]
            }
            ipAddress = "string"
            name = "string"
            priority = int
            subnetMask = "string"
            subnetTrafficTag = int
            tag = "string"
            vnetSubnetResourceId = "string"
            vnetTrafficTag = int
          }
        ]
        scmIpSecurityRestrictionsDefaultAction = "string"
        scmIpSecurityRestrictionsUseMain = bool
        scmMinTlsVersion = "string"
        scmType = "string"
        tracingOptions = "string"
        use32BitWorkerProcess = bool
        virtualApplications = [
          {
            physicalPath = "string"
            preloadEnabled = bool
            virtualDirectories = [
              {
                physicalPath = "string"
                virtualPath = "string"
              }
            ]
            virtualPath = "string"
          }
        ]
        vnetName = "string"
        vnetPrivatePortsCount = int
        vnetRouteAllEnabled = bool
        websiteTimeZone = "string"
        webSocketsEnabled = bool
        windowsFxVersion = "string"
        xManagedServiceIdentityId = int
      }
      storageAccountRequired = bool
      virtualNetworkSubnetId = "string"
      vnetBackupRestoreEnabled = bool
      vnetContentShareEnabled = bool
      vnetImagePullEnabled = bool
      vnetRouteAllEnabled = bool
      workloadProfileName = "string"
    }
  }
}
Property Values
ApiDefinitionInfo
ApiManagementConfig
AutoHealActions
AutoHealCustomAction
AutoHealRules
AutoHealTriggers
AzureStorageInfoValue
CloningInfo
^[0-9a-fA-F]{8}-([0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12}$
CloningInfoAppSettingsOverrides
ConnStringInfo
CorsSettings
DaprConfig
Experiments
ExtendedLocation
FunctionAppConfig
FunctionsAlwaysReadyConfig
FunctionsDeployment
FunctionsDeploymentStorage
FunctionsDeploymentStorageAuthentication
FunctionsRuntime
FunctionsScaleAndConcurrency
FunctionsScaleAndConcurrencyTriggers
FunctionsScaleAndConcurrencyTriggersHttp
HandlerMapping
HostingEnvironmentProfile
HostNameSslState
IpSecurityRestriction
IpSecurityRestrictionHeaders
ManagedServiceIdentity
ManagedServiceIdentityUserAssignedIdentities
Microsoft.Web/sites
NameValuePair
PushSettings
PushSettingsProperties
RampUpRule
RequestsBasedTrigger
ResourceConfig
ResourceTags
SiteConfig
SiteConfigAzureStorageAccounts
SiteDnsConfig
SiteLimits
SiteProperties
SlowRequestsBasedTrigger
StatusCodesBasedTrigger
StatusCodesRangeBasedTrigger
UserAssignedIdentity
VirtualApplication
VirtualDirectory
Usage Examples
Azure Verified Modules
The followingAzure Verified Modulescan be used to deploy this resource type.
Feedback
Was this page helpful?
Additional resources