Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
HTTP proxy support in Azure Kubernetes Service (AKS)
Article
2025-04-15
15 contributors
In this article
In this article, you learn how to configure Azure Kubernetes Service (AKS) clusters to use an HTTP proxy for outbound internet access.
AKS clusters deployed into managed or custom virtual networks have certain outbound dependencies that are necessary to function properly, which created problems in environments requiring internet access to be routed through HTTP proxies. Nodes had no way of bootstrapping the configuration, environment variables, and certificates necessary to access internet services.
The HTTP proxy feature adds HTTP proxy support to AKS clusters, exposing a straightforward interface that you can use to secure AKS-required network traffic in proxy-dependent environments. With this feature, both AKS nodes and pods are configured to use the HTTP proxy. The feature also enables installation of a trusted certificate authority onto the nodes as part of bootstrapping a cluster. More complex solutions might require creating a chain of trust to establish secure communications across the network.
Limitations and considerations
The following scenarios arenotsupported:
Different proxy configurations per node pool
User/Password authentication
Custom certificate authorities (CAs) for API server communication
AKS clusters with Windows node pools
Node pools using Virtual Machine Availability Sets (VMAS)
Using * as wildcard attached to a domain suffix for noProxy
httpProxy,httpsProxy, andtrustedCahave no value by default. Pods are injected with the following environment variables:
httpProxy
httpsProxy
trustedCa
HTTP_PROXY
HTTP_PROXY
http_proxy
http_proxy
HTTPS_PROXY
HTTPS_PROXY
https_proxy
https_proxy
NO_PROXY
NO_PROXY
no_proxy
no_proxy
To disable the injection of the proxy environment variables, you need to annotate the Pod with"kubernetes.azure.com/no-http-proxy-vars":"true".
"kubernetes.azure.com/no-http-proxy-vars":"true"
Before you begin
You need the latest version of the Azure CLI. Runaz --versionto find the version, and runaz upgradeto upgrade the version. If you need to install or upgrade, seeInstall Azure CLI.
az --version
az upgrade
Check for available AKS cluster upgradesto ensure you're running the latest version of AKS. If you need to upgrade, seeUpgrade an AKS cluster.
Configure an HTTP proxy using the Azure CLI
Configure an HTTP proxy using an Azure Resource Manager (ARM) template
Istio Add-On HTTP Proxy for External Services
You can configure an AKS cluster with an HTTP proxy during cluster creation using theaz aks createcommand and passing in configuration as a JSON file.
az aks create
Create a file and provide values forhttpProxy,httpsProxy, andnoProxy. If your environment requires it, provide a value fortrustedCa.
httpProxy
httpsProxy
noProxy
trustedCa
The schema for the config file looks like this:
{
  "httpProxy": "string",
  "httpsProxy": "string",
  "noProxy": [
    "string"
  ],
  "trustedCa": "string"
}
{
  "httpProxy": "string",
  "httpsProxy": "string",
  "noProxy": [
    "string"
  ],
  "trustedCa": "string"
}
Review requirements for each parameter:
httpProxy: A proxy URL to use for creating HTTP connections outside the cluster. The URL scheme must behttp.
httpProxy
http
httpsProxy: A proxy URL to use for creating HTTPS connections outside the cluster. If not specified, thenhttpProxyis used for both HTTP and HTTPS connections.
httpsProxy
httpProxy
noProxy: A list of destination domain names, domains, IP addresses, or other network CIDRs to exclude proxying.
noProxy
trustedCa: A string containing thebase64 encodedalternative CA certificate content. Currently only thePEMformat is supported.
trustedCa
base64 encoded
PEM
Important
For compatibility with Go-based components that are part of the Kubernetes system, the certificatemustsupportSubject Alternative Names(SANs)instead of the deprecated Common Name certs.
Subject Alternative Names(SANs)
There are differences in applications on how to comply with the environment variablehttp_proxy,https_proxy, andno_proxy. Curl and Python don't support CIDR inno_proxy, but Ruby does.
http_proxy
https_proxy
no_proxy
no_proxy
Example input:
{
  "httpProxy": "http://myproxy.server.com:8080/", 
  "httpsProxy": "https://myproxy.server.com:8080/", 
  "noProxy": [
    "localhost",
    "127.0.0.1"
  ],
  "trustedCA": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUgvVENDQmVXZ0F3SUJB...b3Rpbk15RGszaWFyCkYxMFlscWNPbWVYMXVGbUtiZGkvWG9yR2xrQ29NRjNURHg4cm1wOURCaUIvCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0="
}
{
  "httpProxy": "http://myproxy.server.com:8080/", 
  "httpsProxy": "https://myproxy.server.com:8080/", 
  "noProxy": [
    "localhost",
    "127.0.0.1"
  ],
  "trustedCA": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUgvVENDQmVXZ0F3SUJB...b3Rpbk15RGszaWFyCkYxMFlscWNPbWVYMXVGbUtiZGkvWG9yR2xrQ29NRjNURHg4cm1wOURCaUIvCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0="
}
Create a cluster using theaz aks createcommand with the--http-proxy-configparameter set to the file you created.
az aks create
--http-proxy-config
az aks create \
    --name $clusterName \
    --resource-group $resourceGroup \
    --http-proxy-config aks-proxy-config.json \
    --generate-ssh-keys
az aks create \
    --name $clusterName \
    --resource-group $resourceGroup \
    --http-proxy-config aks-proxy-config.json \
    --generate-ssh-keys
Your cluster should initialize with the HTTP proxy configured on the nodes.
You can deploy an AKS cluster with an HTTP proxy using an ARM template.
In your template, provide values forhttpProxy,httpsProxy, andnoProxy. If necessary, provide a value fortrustedCa.
httpProxy
httpsProxy
noProxy
trustedCa
The same schema used for CLI deployment exists in theMicrosoft.ContainerService/managedClustersdefinition under"properties", as shown in the following example:
Microsoft.ContainerService/managedClusters
"properties"
"properties": {
    ...,
    "httpProxyConfig": {
        "httpProxy": "string",
        "httpsProxy": "string",
        "noProxy": [
            "string"
        ],
        "trustedCa": "string"
    }
}
"properties": {
    ...,
    "httpProxyConfig": {
        "httpProxy": "string",
        "httpsProxy": "string",
        "noProxy": [
            "string"
        ],
        "trustedCa": "string"
    }
}
Deploy your ARM template with the HTTP Proxy configuration
Next, you can deploy the template. Your cluster should initialize with your HTTP proxy configured on the nodes.
If you are using theIstio-based service mesh add-on for AKS, you must create a Service Entry to enable your applications in the mesh to access non-cluster or external resources via the HTTP proxy. For example:
apiVersion: networking.istio.io/v1
kind: ServiceEntry
metadata:
  name: proxy
spec:
  hosts:
  - my-company-proxy.com # ignored
  addresses:
  - $PROXY_IP/32
  ports:
  - number: $PROXY_PORT
    name: tcp
    protocol: TCP
  location: MESH_EXTERNAL
apiVersion: networking.istio.io/v1
kind: ServiceEntry
metadata:
  name: proxy
spec:
  hosts:
  - my-company-proxy.com # ignored
  addresses:
  - $PROXY_IP/32
  ports:
  - number: $PROXY_PORT
    name: tcp
    protocol: TCP
  location: MESH_EXTERNAL
Create a file and provide values forPROXY_IPandPROXY_PORT.
Create a file and provide values forPROXY_IPandPROXY_PORT.
PROXY_IP
PROXY_PORT
You can deploy the Service Entry using:
You can deploy the Service Entry using:
kubectl apply -f service_proxy.yaml
kubectl apply -f service_proxy.yaml
Update cluster to enable or update http proxy configuration
Note
If switching to a new proxy, the new proxy must already exist for the update to be successful. After the upgrade is completed, you can delete the old proxy.
HTTP Proxy configuration can be enabled or updated on an existing cluster using theaz aks updatecommand. The--http-proxy-configparameter should be set to a new JSON file with updated values forhttpProxy,httpsProxy,noProxy, andtrustedCaif necessary. The update injects new environment variables into pods with the newhttpProxy,httpsProxy, ornoProxyvalues.
az aks update
--http-proxy-config
httpProxy
httpsProxy
noProxy
trustedCa
httpProxy
httpsProxy
noProxy
Caution
AKS will automatically reimage all node pools in the cluster when you update the proxy configuration on your cluster using theaz aks updatecommand. You can usePod Disruption Budgets (PDBs)to safeguard disruption to critical pods during reimage.
az aks update
For example, let's say you created a new file with the base64 encoded string of the new CA cert calledaks-proxy-config-2.json. You can update the proxy configuration on your cluster with the following command:
az aks update --name $clusterName --resource-group $resourceGroup --http-proxy-config aks-proxy-config-2.json
az aks update --name $clusterName --resource-group $resourceGroup --http-proxy-config aks-proxy-config-2.json
Monitoring add-on configuration
HTTP proxy with the monitoring add-on supports the following configurations:
Outbound proxy without authentication
Outbound proxy with username & password authentication
Outbound proxy with trusted cert for Log Analytics endpoint
The following configurations aren't supported:
Custom Metrics and Recommended Alerts features when using a proxy with trusted certificates
Next steps
For more information regarding the network requirements of AKS clusters, seeControl egress traffic for cluster nodes in AKS.
Azure Kubernetes Service

Additional resources