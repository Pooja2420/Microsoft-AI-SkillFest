Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Quickstart: Azure Key Vault secret client library for .NET
Article
2024-10-04
16 contributors
In this article
Get started with the Azure Key Vault secret client library for .NET.Azure Key Vaultis a cloud service that provides a secure store for secrets. You can securely store keys, passwords, certificates, and other secrets. Azure key vaults may be created and managed through the Azure portal. In this quickstart, you learn how to create, retrieve, and delete secrets from an Azure key vault using the .NET client library
Key Vault client library resources:
API reference documentation|Library source code|Package (NuGet)
For more information about Key Vault and secrets, see:
Key Vault Overview
Secrets Overview.
Prerequisites
An Azure subscription -create one for free
.NET 6 SDK or later
Azure CLIorAzure PowerShell
A Key Vault - you can create one usingAzure portal,Azure CLI, orAzure PowerShell
This quickstart is usingdotnetand Azure CLI or Azure PowerShell.
dotnet
Setup
Azure CLI
Azure PowerShell
This quickstart is using Azure Identity library with Azure CLI to authenticate user to Azure Services. Developers can also use Visual Studio or Visual Studio Code to authenticate their calls, for more information, seeAuthenticate the client with Azure Identity client library.
Sign in to Azure
Run theaz logincommand.az loginIf the CLI can open your default browser, it will do so and load an Azure sign-in page.Otherwise, open a browser page athttps://aka.ms/deviceloginand enter the
authorization code displayed in your terminal.
Run theaz logincommand.
az login
az login
az login
If the CLI can open your default browser, it will do so and load an Azure sign-in page.
Otherwise, open a browser page athttps://aka.ms/deviceloginand enter the
authorization code displayed in your terminal.
Sign in with your account credentials in the browser.
Sign in with your account credentials in the browser.
Grant access to your key vault
To gain permissions to your key vault throughRole-Based Access Control (RBAC), assign a role to your "User Principal Name" (UPN) using the Azure CLI commandaz role assignment create.
az role assignment create --role "Key Vault Secrets Officer" --assignee "<upn>" --scope "/subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/Microsoft.KeyVault/vaults/<your-unique-keyvault-name>"
az role assignment create --role "Key Vault Secrets Officer" --assignee "<upn>" --scope "/subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/Microsoft.KeyVault/vaults/<your-unique-keyvault-name>"
Replace <upn>, <subscription-id>, <resource-group-name> and <your-unique-keyvault-name> with your actual values. Your UPN will typically be in the format of an email address (e.g., username@domain.com).
This quickstart is using Azure Identity library with Azure PowerShell to authenticate user to Azure Services. Developers can also use Visual Studio or Visual Studio Code to authenticate their calls, for more information, seeAuthenticate the client with Azure Identity client library.
Sign in to Azure
Run theConnect-AzAccountcommand.Connect-AzAccountIf the PowerShell can open your default browser, it will do so and load an Azure sign-in page.Otherwise, open a browser page athttps://aka.ms/deviceloginand enter the
authorization code displayed in your terminal.
Run theConnect-AzAccountcommand.
Connect-AzAccount
Connect-AzAccount
Connect-AzAccount
If the PowerShell can open your default browser, it will do so and load an Azure sign-in page.
Otherwise, open a browser page athttps://aka.ms/deviceloginand enter the
authorization code displayed in your terminal.
Sign in with your account credentials in the browser.
Sign in with your account credentials in the browser.
Grant access to your key vault
Azure CLI
Azure PowerShell
To grant your application permissions to your key vault through Role-Based Access Control (RBAC), assign a role using the Azure CLI commandaz role assignment create.
az role assignment create --role "Key Vault Secrets User" --assignee "<app-id>" --scope "/subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/Microsoft.KeyVault/vaults/<your-unique-keyvault-name>"
az role assignment create --role "Key Vault Secrets User" --assignee "<app-id>" --scope "/subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/Microsoft.KeyVault/vaults/<your-unique-keyvault-name>"
To grant your application permissions to your key vault through Role-Based Access Control (RBAC), assign a role using the Azure PowerShell cmdletNew-AzRoleAssignment.
New-AzRoleAssignment -ObjectId "<app-id>" -RoleDefinitionName "Key Vault Secrets User" -Scope "/subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/Microsoft.KeyVault/vaults/<your-unique-keyvault-name>"
New-AzRoleAssignment -ObjectId "<app-id>" -RoleDefinitionName "Key Vault Secrets User" -Scope "/subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/Microsoft.KeyVault/vaults/<your-unique-keyvault-name>"
Replace<app-id>,<subscription-id>,<resource-group-name>and<your-unique-keyvault-name>with your actual values.<app-id>is the Application (client) ID of your registered application in Microsoft Entra.
<app-id>
<subscription-id>
<resource-group-name>
<your-unique-keyvault-name>
<app-id>
Create new .NET console app
In a command shell, run the following command to create a project namedkey-vault-console-app:dotnet new console --name key-vault-console-app
In a command shell, run the following command to create a project namedkey-vault-console-app:
key-vault-console-app
dotnet new console --name key-vault-console-app
dotnet new console --name key-vault-console-app
Change to the newly createdkey-vault-console-appdirectory, and run the following command to build the project:dotnet buildThe build output should contain no warnings or errors.Build succeeded.
 0 Warning(s)
 0 Error(s)
Change to the newly createdkey-vault-console-appdirectory, and run the following command to build the project:
dotnet build
dotnet build
The build output should contain no warnings or errors.
Build succeeded.
 0 Warning(s)
 0 Error(s)
Build succeeded.
 0 Warning(s)
 0 Error(s)
Install the packages
From the command shell, install the Azure Key Vault secret client library for .NET:
dotnet add package Azure.Security.KeyVault.Secrets
dotnet add package Azure.Security.KeyVault.Secrets
For this quickstart, you'll also need to install the Azure Identity client library:
dotnet add package Azure.Identity
dotnet add package Azure.Identity
This application is using key vault name as an environment variable calledKEY_VAULT_NAME.
KEY_VAULT_NAME
Windows
set KEY_VAULT_NAME=<your-key-vault-name>
set KEY_VAULT_NAME=<your-key-vault-name>
Windows PowerShell
$Env:KEY_VAULT_NAME="<your-key-vault-name>"
$Env:KEY_VAULT_NAME="<your-key-vault-name>"
macOS or Linux
export KEY_VAULT_NAME=<your-key-vault-name>
export KEY_VAULT_NAME=<your-key-vault-name>
Object model
The Azure Key Vault secret client library for .NET allows you to manage secrets. TheCode examplessection shows how to create a client, set a secret, retrieve a secret, and delete a secret.
Code examples
Add directives
Add the following directives to the top ofProgram.cs:
using System;
using Azure.Identity;
using Azure.Security.KeyVault.Secrets;
using System;
using Azure.Identity;
using Azure.Security.KeyVault.Secrets;
Authenticate and create a client
Application requests to most Azure services must be authorized. Using theDefaultAzureCredentialclass provided by theAzure Identity client libraryis the recommended approach for implementing passwordless connections to Azure services in your code.DefaultAzureCredentialsupports multiple authentication methods and determines which method should be used at runtime. This approach enables your app to use different authentication methods in different environments (local vs. production) without implementing environment-specific code.
DefaultAzureCredential
In this quickstart,DefaultAzureCredentialauthenticates to key vault using the credentials of the local development user logged into the Azure CLI. When the application is deployed to Azure, the sameDefaultAzureCredentialcode can automatically discover and use a managed identity that is assigned to an App Service, Virtual Machine, or other services. For more information, seeManaged Identity Overview.
DefaultAzureCredential
DefaultAzureCredential
In this example, the name of your key vault is expanded to the key vault URI, in the formathttps://<your-key-vault-name>.vault.azure.net. For more information about authenticating to key vault, seeDeveloper's Guide.
https://<your-key-vault-name>.vault.azure.net
string keyVaultName = Environment.GetEnvironmentVariable("KEY_VAULT_NAME");
var kvUri = "https://" + keyVaultName + ".vault.azure.net";

var client = new SecretClient(new Uri(kvUri), new DefaultAzureCredential());
string keyVaultName = Environment.GetEnvironmentVariable("KEY_VAULT_NAME");
var kvUri = "https://" + keyVaultName + ".vault.azure.net";

var client = new SecretClient(new Uri(kvUri), new DefaultAzureCredential());
Save a secret
Now that the console app is authenticated, add a secret to the key vault. For this task, use theSetSecretAsyncmethod.
The method's first parameter accepts a name for the secret. In this sample, the variablesecretNamestores the string "mySecret".
secretName
The method's second parameter accepts a value for the secret. In this sample, the secret is input by the user via the commandline and stored in the variablesecretValue.
secretValue
await client.SetSecretAsync(secretName, secretValue);
await client.SetSecretAsync(secretName, secretValue);
Note
If secret name exists, the code will create new version of that secret.
Retrieve a secret
You can now retrieve the previously set value with theGetSecretAsyncmethod.
var secret = await client.GetSecretAsync(secretName);
var secret = await client.GetSecretAsync(secretName);
Your secret is now saved assecret.Value.
secret.Value
Delete a secret
Finally, let's delete the secret from your key vault with theStartDeleteSecretAsyncandPurgeDeletedSecretAsyncmethods.
var operation = await client.StartDeleteSecretAsync(secretName);
// You only need to wait for completion if you want to purge or recover the key.
await operation.WaitForCompletionAsync();

await client.PurgeDeletedSecretAsync(secretName);
var operation = await client.StartDeleteSecretAsync(secretName);
// You only need to wait for completion if you want to purge or recover the key.
await operation.WaitForCompletionAsync();

await client.PurgeDeletedSecretAsync(secretName);
Sample code
Modify the .NET console app to interact with the Key Vault by completing the following steps:
Replace the code inProgram.cswith the following code:using System;
using System.Threading.Tasks;
using Azure.Identity;
using Azure.Security.KeyVault.Secrets;

namespace key_vault_console_app
{
    class Program
    {
        static async Task Main(string[] args)
        {
            const string secretName = "mySecret";
            var keyVaultName = Environment.GetEnvironmentVariable("KEY_VAULT_NAME");
            var kvUri = $"https://{keyVaultName}.vault.azure.net";

            var client = new SecretClient(new Uri(kvUri), new DefaultAzureCredential());

            Console.Write("Input the value of your secret > ");
            var secretValue = Console.ReadLine();

            Console.Write($"Creating a secret in {keyVaultName} called '{secretName}' with the value '{secretValue}' ...");
            await client.SetSecretAsync(secretName, secretValue);
            Console.WriteLine(" done.");

            Console.WriteLine("Forgetting your secret.");
            secretValue = string.Empty;
            Console.WriteLine($"Your secret is '{secretValue}'.");

            Console.WriteLine($"Retrieving your secret from {keyVaultName}.");
            var secret = await client.GetSecretAsync(secretName);
            Console.WriteLine($"Your secret is '{secret.Value.Value}'.");

            Console.Write($"Deleting your secret from {keyVaultName} ...");
            DeleteSecretOperation operation = await client.StartDeleteSecretAsync(secretName);
            // You only need to wait for completion if you want to purge or recover the secret.
            await operation.WaitForCompletionAsync();
            Console.WriteLine(" done.");

            Console.Write($"Purging your secret from {keyVaultName} ...");
            await client.PurgeDeletedSecretAsync(secretName);
            Console.WriteLine(" done.");
        }
    }
}
Replace the code inProgram.cswith the following code:
using System;
using System.Threading.Tasks;
using Azure.Identity;
using Azure.Security.KeyVault.Secrets;

namespace key_vault_console_app
{
    class Program
    {
        static async Task Main(string[] args)
        {
            const string secretName = "mySecret";
            var keyVaultName = Environment.GetEnvironmentVariable("KEY_VAULT_NAME");
            var kvUri = $"https://{keyVaultName}.vault.azure.net";

            var client = new SecretClient(new Uri(kvUri), new DefaultAzureCredential());

            Console.Write("Input the value of your secret > ");
            var secretValue = Console.ReadLine();

            Console.Write($"Creating a secret in {keyVaultName} called '{secretName}' with the value '{secretValue}' ...");
            await client.SetSecretAsync(secretName, secretValue);
            Console.WriteLine(" done.");

            Console.WriteLine("Forgetting your secret.");
            secretValue = string.Empty;
            Console.WriteLine($"Your secret is '{secretValue}'.");

            Console.WriteLine($"Retrieving your secret from {keyVaultName}.");
            var secret = await client.GetSecretAsync(secretName);
            Console.WriteLine($"Your secret is '{secret.Value.Value}'.");

            Console.Write($"Deleting your secret from {keyVaultName} ...");
            DeleteSecretOperation operation = await client.StartDeleteSecretAsync(secretName);
            // You only need to wait for completion if you want to purge or recover the secret.
            await operation.WaitForCompletionAsync();
            Console.WriteLine(" done.");

            Console.Write($"Purging your secret from {keyVaultName} ...");
            await client.PurgeDeletedSecretAsync(secretName);
            Console.WriteLine(" done.");
        }
    }
}
using System;
using System.Threading.Tasks;
using Azure.Identity;
using Azure.Security.KeyVault.Secrets;

namespace key_vault_console_app
{
    class Program
    {
        static async Task Main(string[] args)
        {
            const string secretName = "mySecret";
            var keyVaultName = Environment.GetEnvironmentVariable("KEY_VAULT_NAME");
            var kvUri = $"https://{keyVaultName}.vault.azure.net";

            var client = new SecretClient(new Uri(kvUri), new DefaultAzureCredential());

            Console.Write("Input the value of your secret > ");
            var secretValue = Console.ReadLine();

            Console.Write($"Creating a secret in {keyVaultName} called '{secretName}' with the value '{secretValue}' ...");
            await client.SetSecretAsync(secretName, secretValue);
            Console.WriteLine(" done.");

            Console.WriteLine("Forgetting your secret.");
            secretValue = string.Empty;
            Console.WriteLine($"Your secret is '{secretValue}'.");

            Console.WriteLine($"Retrieving your secret from {keyVaultName}.");
            var secret = await client.GetSecretAsync(secretName);
            Console.WriteLine($"Your secret is '{secret.Value.Value}'.");

            Console.Write($"Deleting your secret from {keyVaultName} ...");
            DeleteSecretOperation operation = await client.StartDeleteSecretAsync(secretName);
            // You only need to wait for completion if you want to purge or recover the secret.
            await operation.WaitForCompletionAsync();
            Console.WriteLine(" done.");

            Console.Write($"Purging your secret from {keyVaultName} ...");
            await client.PurgeDeletedSecretAsync(secretName);
            Console.WriteLine(" done.");
        }
    }
}
Test and verify
Execute the following command to run the app.dotnet run
Execute the following command to run the app.
dotnet run
dotnet run
When prompted, enter a secret value. For example, mySecretPassword.
When prompted, enter a secret value. For example, mySecretPassword.
A variation of the following output appears:
Input the value of your secret > mySecretPassword
Creating a secret in <your-unique-keyvault-name> called 'mySecret' with the value 'mySecretPassword' ... done.
Forgetting your secret.
Your secret is ''.
Retrieving your secret from <your-unique-keyvault-name>.
Your secret is 'mySecretPassword'.
Deleting your secret from <your-unique-keyvault-name> ... done.    
Purging your secret from <your-unique-keyvault-name> ... done.
Input the value of your secret > mySecretPassword
Creating a secret in <your-unique-keyvault-name> called 'mySecret' with the value 'mySecretPassword' ... done.
Forgetting your secret.
Your secret is ''.
Retrieving your secret from <your-unique-keyvault-name>.
Your secret is 'mySecretPassword'.
Deleting your secret from <your-unique-keyvault-name> ... done.    
Purging your secret from <your-unique-keyvault-name> ... done.
Next steps
To learn more about Key Vault and how to integrate it with your apps, see the following articles:
Read anOverview of Azure Key Vault
See anAccess Key Vault from App Service Application Tutorial
See anAccess Key Vault from Virtual Machine Tutorial
See theAzure Key Vault developer's guide
Review theKey Vault security overview
Feedback
Was this page helpful?
Additional resources