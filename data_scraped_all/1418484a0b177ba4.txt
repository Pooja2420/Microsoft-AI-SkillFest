Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
DownloadSecureFile@1 - Download secure file v1 task
Article
2025-04-08
5 contributors
In this article
Use this task to download a secure file to the agent machine.
Syntax
# Download secure file v1
# Download a secure file to the agent machine.
- task: DownloadSecureFile@1
  inputs:
    secureFile: # string. Required. Secure File. 
    #retryCount: '8' # string. Retry Count. Default: 8.
    #socketTimeout: # string. Socket Timeout.
# Download secure file v1
# Download a secure file to the agent machine.
- task: DownloadSecureFile@1
  inputs:
    secureFile: # string. Required. Secure File. 
    #retryCount: '8' # string. Retry Count. Default: 8.
    #socketTimeout: # string. Socket Timeout.
# Download secure file v1
# Download a secure file to the agent machine.
- task: DownloadSecureFile@1
  inputs:
    secureFile: # string. Required. Secure File. 
    #retryCount: '5' # string. Retry Count. Default: 5.
# Download secure file v1
# Download a secure file to the agent machine.
- task: DownloadSecureFile@1
  inputs:
    secureFile: # string. Required. Secure File. 
    #retryCount: '5' # string. Retry Count. Default: 5.
Inputs
secureFile-Secure Filestring. Required.
secureFile
string
Specifies the name or unique identifier (GUID) of the secure file that is downloaded to the agent machine. The file is deleted when the pipeline job completes.
retryCount-Retry Countstring. Default value:8.
retryCount
string
8
Optional. Specifies the number of times to retry downloading a secure file if the download fails.
retryCount-Retry Countstring. Default value:5.
retryCount
string
5
Optional. Specifies the number of times to retry downloading a secure file if the download fails.
socketTimeout-Socket Timeoutstring.
socketTimeout
string
Optional. When downloading a secure file request in Microsoft, this input specifies the timeout for a socket.
Task control options
All tasks have control options in addition to their task inputs. For more information, seeControl options and common task properties.
Output variables
This task defines the followingoutput variables, which you can consume in downstream steps, jobs, and stages.
secureFilePathSpecifies the location of the secure file that was downloaded.
secureFilePath
Remarks
Use this task in a pipeline to download asecure fileto the agent machine. When specifying the name of the file (using thesecureFileinput), use the name you specified when uploading it, rather than the actual file name.
secureFile
Note
This task runs at the beginning of its stage, regardless of where it is located within its job.
Once downloaded, use thenamevalue that is set on the task (or "Reference name" in the classic editor) to reference the path to the secure file on the agent machine. For example, if the task is given the namemySecureFile, its path can be referenced in the pipeline as$(mySecureFile.secureFilePath). Alternatively, downloaded secure files can be found in the directory given by$(Agent.TempDirectory). See a full examplebelow.
name
mySecureFile
$(mySecureFile.secureFilePath)
$(Agent.TempDirectory)
When the pipeline job completes, whether it succeeds, fails, or is canceled, the secure file is deleted from its download location.
It is unnecessary to use this task with theInstall Apple CertificateorInstall Apple Provisioning Profiletasks because they automatically download, install, and delete (at the end of the pipeline job) the secure file.
This task currently supports only one file task per instance.
Examples
Linux
Windows
This example downloads a secure certificate file and installs it to a trusted certificate authority (CA) directory on Linux:
- task: DownloadSecureFile@1
  name: caCertificate
  displayName: 'Download CA certificate'
  inputs:
    secureFile: 'myCACertificate.pem'

- script: |
    echo Installing $(caCertificate.secureFilePath) to the trusted CA directory...
    sudo chown root:root $(caCertificate.secureFilePath)
    sudo chmod a+r $(caCertificate.secureFilePath)
    sudo ln -s $(caCertificate.secureFilePath) /etc/ssl/certs/
- task: DownloadSecureFile@1
  name: caCertificate
  displayName: 'Download CA certificate'
  inputs:
    secureFile: 'myCACertificate.pem'

- script: |
    echo Installing $(caCertificate.secureFilePath) to the trusted CA directory...
    sudo chown root:root $(caCertificate.secureFilePath)
    sudo chmod a+r $(caCertificate.secureFilePath)
    sudo ln -s $(caCertificate.secureFilePath) /etc/ssl/certs/
Import certificate to CurrentUser root store:- task: DownloadSecureFile@1
  displayName: 'Download certificate'
  inputs:
    secureFile: 'myCACertificate.pem'

- powershell: |
    $certPath = '$(caCertificate.secureFilePath)'
    $certStoreLocation = 'Cert:\CurrentUser\Root'

    Write-Host "Importing certificate $certPath to $certStoreLocation..."
    $params = @{
        FilePath = $certPath
        CertStoreLocation = $certStoreLocation
    }
    Import-Certificate @params
  displayName: 'Import CA certificate to CurrentUser root store'
Import certificate to CurrentUser root store:
- task: DownloadSecureFile@1
  displayName: 'Download certificate'
  inputs:
    secureFile: 'myCACertificate.pem'

- powershell: |
    $certPath = '$(caCertificate.secureFilePath)'
    $certStoreLocation = 'Cert:\CurrentUser\Root'

    Write-Host "Importing certificate $certPath to $certStoreLocation..."
    $params = @{
        FilePath = $certPath
        CertStoreLocation = $certStoreLocation
    }
    Import-Certificate @params
  displayName: 'Import CA certificate to CurrentUser root store'
- task: DownloadSecureFile@1
  displayName: 'Download certificate'
  inputs:
    secureFile: 'myCACertificate.pem'

- powershell: |
    $certPath = '$(caCertificate.secureFilePath)'
    $certStoreLocation = 'Cert:\CurrentUser\Root'

    Write-Host "Importing certificate $certPath to $certStoreLocation..."
    $params = @{
        FilePath = $certPath
        CertStoreLocation = $certStoreLocation
    }
    Import-Certificate @params
  displayName: 'Import CA certificate to CurrentUser root store'
Import certificate to LocalMachine root store:- task: DownloadSecureFile@1
  displayName: 'Download certificate'
  inputs:
    secureFile: 'myCACertificate.pem'

- powershell: |
    $certPath = '$(caCertificate.secureFilePath)'
    $certStoreLocation = 'Cert:\LocalMachine\Root'

    Write-Host "Importing certificate $certPath to $certStoreLocation..."
    $params = @{
        FilePath = $certPath
        CertStoreLocation = $certStoreLocation
    }
    Import-Certificate @params
  displayName: 'Import CA certificate to LocalMachine root store'
Import certificate to LocalMachine root store:
- task: DownloadSecureFile@1
  displayName: 'Download certificate'
  inputs:
    secureFile: 'myCACertificate.pem'

- powershell: |
    $certPath = '$(caCertificate.secureFilePath)'
    $certStoreLocation = 'Cert:\LocalMachine\Root'

    Write-Host "Importing certificate $certPath to $certStoreLocation..."
    $params = @{
        FilePath = $certPath
        CertStoreLocation = $certStoreLocation
    }
    Import-Certificate @params
  displayName: 'Import CA certificate to LocalMachine root store'
- task: DownloadSecureFile@1
  displayName: 'Download certificate'
  inputs:
    secureFile: 'myCACertificate.pem'

- powershell: |
    $certPath = '$(caCertificate.secureFilePath)'
    $certStoreLocation = 'Cert:\LocalMachine\Root'

    Write-Host "Importing certificate $certPath to $certStoreLocation..."
    $params = @{
        FilePath = $certPath
        CertStoreLocation = $certStoreLocation
    }
    Import-Certificate @params
  displayName: 'Import CA certificate to LocalMachine root store'
Requirements
Feedback
Was this page helpful?
Additional resources