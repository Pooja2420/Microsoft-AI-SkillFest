Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Tutorial: Use Circuit Breaker Dashboard with Azure Spring Apps
Article
2024-11-21
2 contributors
In this article
Warning
Hystrix is no longer in active development and is currently in maintenance mode.
Note
TheBasic,Standard, andEnterpriseplans entered a retirement period on March 17, 2025. For more information, see theAzure Spring Apps retirement announcement.
TheStandard consumption and dedicatedplan entered a retirement period on September 30, 2024, with a complete shutdown by the end of March 2025. For more information, seeMigrate Azure Spring Apps Standard consumption and dedicated plan to Azure Container Apps.
This article applies to:â Java â C#
This article applies to:â Basic/Standard â Enterprise
This article shows you how to use Netflix Turbine and Netflix Hystrix on Azure Spring Apps. Spring CloudNetflix Turbineis widely used to aggregate multipleNetflix Hystrixmetrics streams so that streams can be monitored in a single view using Hystrix dashboard.
Note
Netflix Hystrix is widely used in many existing Spring apps but it's no longer in active development. If you're developing a new project, you should use Spring Cloud Circuit Breaker implementations likeresilience4jinstead. Different from Turbine shown in this tutorial, the new Spring Cloud Circuit Breaker framework unifies all implementations of its metrics data pipeline into Micrometer, which is also supported by Azure Spring Apps. For more information, seeCollect Spring Cloud Resilience4J Circuit Breaker Metrics with Micrometer (Preview).
Prepare your sample applications
The sample is forked from thisrepository.
Clone the sample repository to your develop environment:
git clone https://github.com/Azure-Samples/azure-spring-apps-samples.git
cd azure-spring-apps-samples/hystrix-turbine-sample
git clone https://github.com/Azure-Samples/azure-spring-apps-samples.git
cd azure-spring-apps-samples/hystrix-turbine-sample
Build the three applications that are in this tutorial:
user-service: A simple REST service that has a single endpoint of /personalized/{id}
recommendation-service: A simple REST service that has a single endpoint of /recommendations, which is called by user-service.
hystrix-turbine: A Hystrix dashboard service to display Hystrix streams and a Turbine service aggregating Hystrix metrics stream from other services.
mvn clean package -D skipTests -f user-service/pom.xml
mvn clean package -D skipTests -f recommendation-service/pom.xml
mvn clean package -D skipTests -f hystrix-turbine/pom.xml
mvn clean package -D skipTests -f user-service/pom.xml
mvn clean package -D skipTests -f recommendation-service/pom.xml
mvn clean package -D skipTests -f hystrix-turbine/pom.xml
Provision your Azure Spring Apps instance
Follow the steps in theProvision an instance of Azure Spring Appssection ofQuickstart: Deploy your first application to Azure Spring Apps.
Deploy your applications to Azure Spring Apps
These apps don't useConfig Server, so there's no need to set upConfig Serverfor Azure Spring Apps.  Create and deploy as follows:
az configure --defaults \
    group=<resource-group-name> \
    spring=<Azure-Spring-Apps-instance-name>

az spring app create --name user-service --assign-endpoint
az spring app create --name recommendation-service
az spring app create --name hystrix-turbine --assign-endpoint

az spring app deploy \
    --name user-service \
    --artifact-path user-service/target/user-service.jar
az spring app deploy \
    --name recommendation-service \
    --artifact-path recommendation-service/target/recommendation-service.jar
az spring app deploy \
    --name hystrix-turbine \
    --artifact-path hystrix-turbine/target/hystrix-turbine.jar
az configure --defaults \
    group=<resource-group-name> \
    spring=<Azure-Spring-Apps-instance-name>

az spring app create --name user-service --assign-endpoint
az spring app create --name recommendation-service
az spring app create --name hystrix-turbine --assign-endpoint

az spring app deploy \
    --name user-service \
    --artifact-path user-service/target/user-service.jar
az spring app deploy \
    --name recommendation-service \
    --artifact-path recommendation-service/target/recommendation-service.jar
az spring app deploy \
    --name hystrix-turbine \
    --artifact-path hystrix-turbine/target/hystrix-turbine.jar
Verify your apps
After all the apps are running and discoverable, accessuser-servicewith the pathhttps://<Azure-Spring-Apps-instance-name>-user-service.azuremicroservices.io/personalized/1from your browser. If the user-service can accessrecommendation-service, you should get the following output. Refresh the web page a few times if it doesn't work.
user-service
https://<Azure-Spring-Apps-instance-name>-user-service.azuremicroservices.io/personalized/1
recommendation-service
[{"name":"Product1","description":"Description1","detailsLink":"link1"},{"name":"Product2","description":"Description2","detailsLink":"link3"},{"name":"Product3","description":"Description3","detailsLink":"link3"}]
[{"name":"Product1","description":"Description1","detailsLink":"link1"},{"name":"Product2","description":"Description2","detailsLink":"link3"},{"name":"Product3","description":"Description3","detailsLink":"link3"}]
Access your Hystrix dashboard and metrics stream
Verify using public endpoints or private test endpoints.
Using public endpoints
Access hystrix-turbine with the pathhttps://<SERVICE-NAME>-hystrix-turbine.azuremicroservices.io/hystrixfrom your browser.  The following figure shows the Hystrix dashboard running in this app.
https://<SERVICE-NAME>-hystrix-turbine.azuremicroservices.io/hystrix

Copy the Turbine stream urlhttps://<SERVICE-NAME>-hystrix-turbine.azuremicroservices.io/turbine.stream?cluster=defaultinto the text box, and selectMonitor Stream.  This action displays the dashboard. If nothing shows in the viewer, hit theuser-serviceendpoints to generate streams.
https://<SERVICE-NAME>-hystrix-turbine.azuremicroservices.io/turbine.stream?cluster=default
user-service

Note
In production, the Hystrix dashboard and metrics stream should not be exposed to the Internet.
Using private test endpoints
Hystrix metrics streams are also accessible fromtest-endpoint. As a backend service, we didn't assign a public end-point forrecommendation-service, but we can show its metrics with test-endpoint athttps://primary:<KEY>@<SERVICE-NAME>.test.azuremicroservices.io/recommendation-service/default/actuator/hystrix.stream
test-endpoint
recommendation-service
https://primary:<KEY>@<SERVICE-NAME>.test.azuremicroservices.io/recommendation-service/default/actuator/hystrix.stream

As a web app, Hystrix dashboard should be working ontest-endpoint. If it isn't working properly, there may be two reasons: first, usingtest-endpointchanged the base URL from/to/<APP-NAME>/<DEPLOYMENT-NAME>, or, second, the web app is using absolute path for static resource. To get it working ontest-endpoint, you might need to manually edit the<base>in the front-end files.
test-endpoint
test-endpoint
/
/<APP-NAME>/<DEPLOYMENT-NAME>
test-endpoint
<base>
Next steps
Provision an instance of Azure Spring Appssection ofQuickstart: Deploy your first application to Azure Spring Apps.
Prepare a Java Spring application for deployment in Azure Spring Apps
Feedback
Was this page helpful?
Additional resources