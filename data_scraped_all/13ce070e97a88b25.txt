Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Use an alert to trigger an Azure Automation runbook
Article
2024-10-22
17 contributors
In this article
You can useAzure Monitorto monitor base-level metrics and logs for most services in Azure. You can call Azure Automation runbooks by usingaction groupsto automate tasks based on alerts. This article shows you how to configure and run a runbook by using alerts.
Prerequisites
An Azure Automation account with at least one user-assigned managed identity. For more information, seeUsing a user-assigned managed identity for an Azure Automation account.
Az modules:Az.AccountsandAz.Computeimported into the Automation account. For more information, seeImport Az modules.
Az.Accounts
Az.Compute
AnAzure virtual machine.
TheAzure Az PowerShell moduleinstalled on your machine. To install or upgrade, seeHow to install the Azure Az PowerShell module.
A general familiarity withAutomation runbooks.
Alert types
You can use automation runbooks with three alert types:
Common alerts
Activity log alerts
Near-real-time metric alerts
Note
The common alert schema standardizes the consumption experience for alert notifications in Azure. Historically, the three alert types in Azure (metric, log, and activity log) have had their own email templates, webhook schemas, etc. To learn more, seeCommon alert schema.
When an alert calls a runbook, the actual call is an HTTP POST request to the webhook. The body of the POST request contains a JSON-formatted object that has useful properties that are related to the alert. The following table lists links to the payload schema for each alert type:
Delete VM
Because the data that's provided by each type of alert is different, each alert type is handled differently. In the next section, you learn how to create a runbook to handle different types of alerts.
Assign permissions to managed identities
Assign permissions to the appropriatemanaged identityto allow it to stop a virtual machine. The runbook can use either the Automation account's system-assigned managed identity or a user-assigned managed identity. Steps are provided to assign permissions to each identity. The steps below use PowerShell. If you prefer using the Portal, seeAssign Azure roles using the Azure portal.
Sign in to Azure interactively using theConnect-AzAccountcmdlet and follow the instructions.# Sign in to your Azure subscription
$sub = Get-AzSubscription -ErrorAction SilentlyContinue
if(-not($sub))
{
    Connect-AzAccount
}

# If you have multiple subscriptions, set the one to use
# Select-AzSubscription -SubscriptionId <SUBSCRIPTIONID>
Sign in to Azure interactively using theConnect-AzAccountcmdlet and follow the instructions.
# Sign in to your Azure subscription
$sub = Get-AzSubscription -ErrorAction SilentlyContinue
if(-not($sub))
{
    Connect-AzAccount
}

# If you have multiple subscriptions, set the one to use
# Select-AzSubscription -SubscriptionId <SUBSCRIPTIONID>
# Sign in to your Azure subscription
$sub = Get-AzSubscription -ErrorAction SilentlyContinue
if(-not($sub))
{
    Connect-AzAccount
}

# If you have multiple subscriptions, set the one to use
# Select-AzSubscription -SubscriptionId <SUBSCRIPTIONID>
Provide an appropriate value for the variables below and then execute the script.$resourceGroup = "resourceGroup"
$automationAccount = "AutomationAccount"
$userAssignedManagedIdentity = "userAssignedManagedIdentity"
Provide an appropriate value for the variables below and then execute the script.
$resourceGroup = "resourceGroup"
$automationAccount = "AutomationAccount"
$userAssignedManagedIdentity = "userAssignedManagedIdentity"
$resourceGroup = "resourceGroup"
$automationAccount = "AutomationAccount"
$userAssignedManagedIdentity = "userAssignedManagedIdentity"
Use PowerShell cmdletNew-AzRoleAssignmentto assign a role to the system-assigned managed identity.$SAMI = (Get-AzAutomationAccount -ResourceGroupName $resourceGroup -Name $automationAccount).Identity.PrincipalId
New-AzRoleAssignment `
    -ObjectId $SAMI `
    -ResourceGroupName $resourceGroup `
    -RoleDefinitionName "DevTest Labs User"
Use PowerShell cmdletNew-AzRoleAssignmentto assign a role to the system-assigned managed identity.
$SAMI = (Get-AzAutomationAccount -ResourceGroupName $resourceGroup -Name $automationAccount).Identity.PrincipalId
New-AzRoleAssignment `
    -ObjectId $SAMI `
    -ResourceGroupName $resourceGroup `
    -RoleDefinitionName "DevTest Labs User"
$SAMI = (Get-AzAutomationAccount -ResourceGroupName $resourceGroup -Name $automationAccount).Identity.PrincipalId
New-AzRoleAssignment `
    -ObjectId $SAMI `
    -ResourceGroupName $resourceGroup `
    -RoleDefinitionName "DevTest Labs User"
Assign a role to a user-assigned managed identity.$UAMI = (Get-AzUserAssignedIdentity -ResourceGroupName $resourceGroup -Name $userAssignedManagedIdentity)
New-AzRoleAssignment `
    -ObjectId $UAMI.PrincipalId `
    -ResourceGroupName $resourceGroup `
    -RoleDefinitionName "DevTest Labs User"
Assign a role to a user-assigned managed identity.
$UAMI = (Get-AzUserAssignedIdentity -ResourceGroupName $resourceGroup -Name $userAssignedManagedIdentity)
New-AzRoleAssignment `
    -ObjectId $UAMI.PrincipalId `
    -ResourceGroupName $resourceGroup `
    -RoleDefinitionName "DevTest Labs User"
$UAMI = (Get-AzUserAssignedIdentity -ResourceGroupName $resourceGroup -Name $userAssignedManagedIdentity)
New-AzRoleAssignment `
    -ObjectId $UAMI.PrincipalId `
    -ResourceGroupName $resourceGroup `
    -RoleDefinitionName "DevTest Labs User"
For the system-assigned managed identity, showClientIdand record the value for later use.$UAMI.ClientId
For the system-assigned managed identity, showClientIdand record the value for later use.
ClientId
$UAMI.ClientId
$UAMI.ClientId
Create a runbook to handle alerts
To use Automation with alerts, you need a runbook that manages the alert JSON payload that's passed to the runbook. The following example runbook must be called from an Azure alert.
As described in the preceding section, each type of alert has a different schema. The script takes the webhook data from an alert in theWebhookDatarunbook input parameter. Then, the script evaluates the JSON payload to determine which alert type is being used.
WebhookData
This example utilizes an alert from an Azure virtual machine (VM). It extracts the VM data from the payload, specifically from the target resource of the triggered alert, and then utilizes that information to stop the VM. The connection must be set up in the Automation account where the runbook is run. When using alerts to trigger runbooks, it's important to check the alert status in the runbook that is triggered. The runbook triggers each time the alert changes state. Alerts have multiple states, with the two most common being Activated and Resolved. Check for state in your runbook logic to ensure the runbook doesn't run more than once. The example in this article shows how to look for alerts with state Activated only.
The runbook uses the Automation accountsystem-assigned managed identityto authenticate with Azure to perform the management action against the VM. The runbook can be easily modified to use a user-assigned managed identity.
Note
We recommend that you use public network access as it isn't possible to use an Azure alert (metric, log, and activity log) to trigger an Automation webhook when the Automation account is using private links and configured withPublic accessset toDisable.
Use this example to create a runbook calledStop-AzureVmInResponsetoVMAlert. You can modify the PowerShell script, and use it with many different resources.
Sign in to theAzure portal, and navigate to your Automation account.
Sign in to theAzure portal, and navigate to your Automation account.
UnderProcess Automation, selectRunbooks.
UnderProcess Automation, selectRunbooks.
Select+ Create a runbook.Name the runbookStop-AzureVmInResponsetoVMAlert.From theRunbook typedrop-down list, selectPowerShell.SelectCreate.
Select+ Create a runbook.
Name the runbookStop-AzureVmInResponsetoVMAlert.
Stop-AzureVmInResponsetoVMAlert
From theRunbook typedrop-down list, selectPowerShell.
SelectCreate.
In the runbook editor, paste the following code:[OutputType("PSAzureOperationResponse")]
param
(
    [Parameter (Mandatory=$false)]
    [object] $WebhookData
)
$ErrorActionPreference = "stop"

if ($WebhookData)
{
    # Get the data object from WebhookData
    $WebhookBody = (ConvertFrom-Json -InputObject $WebhookData.RequestBody)

    # Get the info needed to identify the VM (depends on the payload schema)
    $schemaId = $WebhookBody.schemaId
    Write-Verbose "schemaId: $schemaId" -Verbose
    if ($schemaId -eq "azureMonitorCommonAlertSchema") {
        # This is the common Metric Alert schema (released March 2019)
        $Essentials = [object] ($WebhookBody.data).essentials
        # Get the first target only as this script doesn't handle multiple
        $alertTargetIdArray = (($Essentials.alertTargetIds)[0]).Split("/")
        $SubId = ($alertTargetIdArray)[2]
        $ResourceGroupName = ($alertTargetIdArray)[4]
        $ResourceType = ($alertTargetIdArray)[6] + "/" + ($alertTargetIdArray)[7]
        $ResourceName = ($alertTargetIdArray)[-1]
        $status = $Essentials.monitorCondition
    }
    elseif ($schemaId -eq "AzureMonitorMetricAlert") {
        # This is the near-real-time Metric Alert schema
        $AlertContext = [object] ($WebhookBody.data).context
        $SubId = $AlertContext.subscriptionId
        $ResourceGroupName = $AlertContext.resourceGroupName
        $ResourceType = $AlertContext.resourceType
        $ResourceName = $AlertContext.resourceName
        $status = ($WebhookBody.data).status
    }
    elseif ($schemaId -eq "Microsoft.Insights/activityLogs") {
        # This is the Activity Log Alert schema
        $AlertContext = [object] (($WebhookBody.data).context).activityLog
        $SubId = $AlertContext.subscriptionId
        $ResourceGroupName = $AlertContext.resourceGroupName
        $ResourceType = $AlertContext.resourceType
        $ResourceName = (($AlertContext.resourceId).Split("/"))[-1]
        $status = ($WebhookBody.data).status
    }
    elseif ($schemaId -eq $null) {
        # This is the original Metric Alert schema
        $AlertContext = [object] $WebhookBody.context
        $SubId = $AlertContext.subscriptionId
        $ResourceGroupName = $AlertContext.resourceGroupName
        $ResourceType = $AlertContext.resourceType
        $ResourceName = $AlertContext.resourceName
        $status = $WebhookBody.status
    }
    else {
        # Schema not supported
        Write-Error "The alert data schema - $schemaId - is not supported."
    }

    Write-Verbose "status: $status" -Verbose
    if (($status -eq "Activated") -or ($status -eq "Fired"))
    {
        Write-Verbose "resourceType: $ResourceType" -Verbose
        Write-Verbose "resourceName: $ResourceName" -Verbose
        Write-Verbose "resourceGroupName: $ResourceGroupName" -Verbose
        Write-Verbose "subscriptionId: $SubId" -Verbose

        # Determine code path depending on the resourceType
        if ($ResourceType -eq "Microsoft.Compute/virtualMachines")
        {
            # This is an Resource Manager VM
            Write-Verbose "This is an Resource Manager VM." -Verbose

            # Ensures you do not inherit an AzContext in your runbook
            Disable-AzContextAutosave -Scope Process

            # Connect to Azure with system-assigned managed identity
            $AzureContext = (Connect-AzAccount -Identity).context

            # set and store context
            $AzureContext = Set-AzContext -SubscriptionName $AzureContext.Subscription -DefaultProfile $AzureContext

            # Stop the Resource Manager VM
            Write-Verbose "Stopping the VM - $ResourceName - in resource group - $ResourceGroupName -" -Verbose
            Stop-AzVM -Name $ResourceName -ResourceGroupName $ResourceGroupName -DefaultProfile $AzureContext -Force
            # [OutputType(PSAzureOperationResponse")]
        }
        else {
            # ResourceType not supported
            Write-Error "$ResourceType is not a supported resource type for this runbook."
        }
    }
    else {
        # The alert status was not 'Activated' or 'Fired' so no action taken
        Write-Verbose ("No action taken. Alert status: " + $status) -Verbose
    }
}
else {
    # Error
    Write-Error "This runbook is meant to be started from an Azure alert webhook only."
}
In the runbook editor, paste the following code:
[OutputType("PSAzureOperationResponse")]
param
(
    [Parameter (Mandatory=$false)]
    [object] $WebhookData
)
$ErrorActionPreference = "stop"

if ($WebhookData)
{
    # Get the data object from WebhookData
    $WebhookBody = (ConvertFrom-Json -InputObject $WebhookData.RequestBody)

    # Get the info needed to identify the VM (depends on the payload schema)
    $schemaId = $WebhookBody.schemaId
    Write-Verbose "schemaId: $schemaId" -Verbose
    if ($schemaId -eq "azureMonitorCommonAlertSchema") {
        # This is the common Metric Alert schema (released March 2019)
        $Essentials = [object] ($WebhookBody.data).essentials
        # Get the first target only as this script doesn't handle multiple
        $alertTargetIdArray = (($Essentials.alertTargetIds)[0]).Split("/")
        $SubId = ($alertTargetIdArray)[2]
        $ResourceGroupName = ($alertTargetIdArray)[4]
        $ResourceType = ($alertTargetIdArray)[6] + "/" + ($alertTargetIdArray)[7]
        $ResourceName = ($alertTargetIdArray)[-1]
        $status = $Essentials.monitorCondition
    }
    elseif ($schemaId -eq "AzureMonitorMetricAlert") {
        # This is the near-real-time Metric Alert schema
        $AlertContext = [object] ($WebhookBody.data).context
        $SubId = $AlertContext.subscriptionId
        $ResourceGroupName = $AlertContext.resourceGroupName
        $ResourceType = $AlertContext.resourceType
        $ResourceName = $AlertContext.resourceName
        $status = ($WebhookBody.data).status
    }
    elseif ($schemaId -eq "Microsoft.Insights/activityLogs") {
        # This is the Activity Log Alert schema
        $AlertContext = [object] (($WebhookBody.data).context).activityLog
        $SubId = $AlertContext.subscriptionId
        $ResourceGroupName = $AlertContext.resourceGroupName
        $ResourceType = $AlertContext.resourceType
        $ResourceName = (($AlertContext.resourceId).Split("/"))[-1]
        $status = ($WebhookBody.data).status
    }
    elseif ($schemaId -eq $null) {
        # This is the original Metric Alert schema
        $AlertContext = [object] $WebhookBody.context
        $SubId = $AlertContext.subscriptionId
        $ResourceGroupName = $AlertContext.resourceGroupName
        $ResourceType = $AlertContext.resourceType
        $ResourceName = $AlertContext.resourceName
        $status = $WebhookBody.status
    }
    else {
        # Schema not supported
        Write-Error "The alert data schema - $schemaId - is not supported."
    }

    Write-Verbose "status: $status" -Verbose
    if (($status -eq "Activated") -or ($status -eq "Fired"))
    {
        Write-Verbose "resourceType: $ResourceType" -Verbose
        Write-Verbose "resourceName: $ResourceName" -Verbose
        Write-Verbose "resourceGroupName: $ResourceGroupName" -Verbose
        Write-Verbose "subscriptionId: $SubId" -Verbose

        # Determine code path depending on the resourceType
        if ($ResourceType -eq "Microsoft.Compute/virtualMachines")
        {
            # This is an Resource Manager VM
            Write-Verbose "This is an Resource Manager VM." -Verbose

            # Ensures you do not inherit an AzContext in your runbook
            Disable-AzContextAutosave -Scope Process

            # Connect to Azure with system-assigned managed identity
            $AzureContext = (Connect-AzAccount -Identity).context

            # set and store context
            $AzureContext = Set-AzContext -SubscriptionName $AzureContext.Subscription -DefaultProfile $AzureContext

            # Stop the Resource Manager VM
            Write-Verbose "Stopping the VM - $ResourceName - in resource group - $ResourceGroupName -" -Verbose
            Stop-AzVM -Name $ResourceName -ResourceGroupName $ResourceGroupName -DefaultProfile $AzureContext -Force
            # [OutputType(PSAzureOperationResponse")]
        }
        else {
            # ResourceType not supported
            Write-Error "$ResourceType is not a supported resource type for this runbook."
        }
    }
    else {
        # The alert status was not 'Activated' or 'Fired' so no action taken
        Write-Verbose ("No action taken. Alert status: " + $status) -Verbose
    }
}
else {
    # Error
    Write-Error "This runbook is meant to be started from an Azure alert webhook only."
}
[OutputType("PSAzureOperationResponse")]
param
(
    [Parameter (Mandatory=$false)]
    [object] $WebhookData
)
$ErrorActionPreference = "stop"

if ($WebhookData)
{
    # Get the data object from WebhookData
    $WebhookBody = (ConvertFrom-Json -InputObject $WebhookData.RequestBody)

    # Get the info needed to identify the VM (depends on the payload schema)
    $schemaId = $WebhookBody.schemaId
    Write-Verbose "schemaId: $schemaId" -Verbose
    if ($schemaId -eq "azureMonitorCommonAlertSchema") {
        # This is the common Metric Alert schema (released March 2019)
        $Essentials = [object] ($WebhookBody.data).essentials
        # Get the first target only as this script doesn't handle multiple
        $alertTargetIdArray = (($Essentials.alertTargetIds)[0]).Split("/")
        $SubId = ($alertTargetIdArray)[2]
        $ResourceGroupName = ($alertTargetIdArray)[4]
        $ResourceType = ($alertTargetIdArray)[6] + "/" + ($alertTargetIdArray)[7]
        $ResourceName = ($alertTargetIdArray)[-1]
        $status = $Essentials.monitorCondition
    }
    elseif ($schemaId -eq "AzureMonitorMetricAlert") {
        # This is the near-real-time Metric Alert schema
        $AlertContext = [object] ($WebhookBody.data).context
        $SubId = $AlertContext.subscriptionId
        $ResourceGroupName = $AlertContext.resourceGroupName
        $ResourceType = $AlertContext.resourceType
        $ResourceName = $AlertContext.resourceName
        $status = ($WebhookBody.data).status
    }
    elseif ($schemaId -eq "Microsoft.Insights/activityLogs") {
        # This is the Activity Log Alert schema
        $AlertContext = [object] (($WebhookBody.data).context).activityLog
        $SubId = $AlertContext.subscriptionId
        $ResourceGroupName = $AlertContext.resourceGroupName
        $ResourceType = $AlertContext.resourceType
        $ResourceName = (($AlertContext.resourceId).Split("/"))[-1]
        $status = ($WebhookBody.data).status
    }
    elseif ($schemaId -eq $null) {
        # This is the original Metric Alert schema
        $AlertContext = [object] $WebhookBody.context
        $SubId = $AlertContext.subscriptionId
        $ResourceGroupName = $AlertContext.resourceGroupName
        $ResourceType = $AlertContext.resourceType
        $ResourceName = $AlertContext.resourceName
        $status = $WebhookBody.status
    }
    else {
        # Schema not supported
        Write-Error "The alert data schema - $schemaId - is not supported."
    }

    Write-Verbose "status: $status" -Verbose
    if (($status -eq "Activated") -or ($status -eq "Fired"))
    {
        Write-Verbose "resourceType: $ResourceType" -Verbose
        Write-Verbose "resourceName: $ResourceName" -Verbose
        Write-Verbose "resourceGroupName: $ResourceGroupName" -Verbose
        Write-Verbose "subscriptionId: $SubId" -Verbose

        # Determine code path depending on the resourceType
        if ($ResourceType -eq "Microsoft.Compute/virtualMachines")
        {
            # This is an Resource Manager VM
            Write-Verbose "This is an Resource Manager VM." -Verbose

            # Ensures you do not inherit an AzContext in your runbook
            Disable-AzContextAutosave -Scope Process

            # Connect to Azure with system-assigned managed identity
            $AzureContext = (Connect-AzAccount -Identity).context

            # set and store context
            $AzureContext = Set-AzContext -SubscriptionName $AzureContext.Subscription -DefaultProfile $AzureContext

            # Stop the Resource Manager VM
            Write-Verbose "Stopping the VM - $ResourceName - in resource group - $ResourceGroupName -" -Verbose
            Stop-AzVM -Name $ResourceName -ResourceGroupName $ResourceGroupName -DefaultProfile $AzureContext -Force
            # [OutputType(PSAzureOperationResponse")]
        }
        else {
            # ResourceType not supported
            Write-Error "$ResourceType is not a supported resource type for this runbook."
        }
    }
    else {
        # The alert status was not 'Activated' or 'Fired' so no action taken
        Write-Verbose ("No action taken. Alert status: " + $status) -Verbose
    }
}
else {
    # Error
    Write-Error "This runbook is meant to be started from an Azure alert webhook only."
}
If you want the runbook to execute with the system-assigned managed identity, leave the code as-is. If you prefer to use a user-assigned managed identity, then:From line 78, remove$AzureContext = (Connect-AzAccount -Identity).context,Replace it with$AzureContext = (Connect-AzAccount -Identity -AccountId <ClientId>).context, andEnter the Client ID you obtained earlier.
If you want the runbook to execute with the system-assigned managed identity, leave the code as-is. If you prefer to use a user-assigned managed identity, then:
From line 78, remove$AzureContext = (Connect-AzAccount -Identity).context,
$AzureContext = (Connect-AzAccount -Identity).context
Replace it with$AzureContext = (Connect-AzAccount -Identity -AccountId <ClientId>).context, and
$AzureContext = (Connect-AzAccount -Identity -AccountId <ClientId>).context
Enter the Client ID you obtained earlier.
SelectSave,Publishand thenYeswhen prompted.
SelectSave,Publishand thenYeswhen prompted.
Close theRunbookpage to return to theAutomation Accountpage.
Close theRunbookpage to return to theAutomation Accountpage.
Create the alert
Alerts use action groups, which are collections of actions that are triggered by the alert. Runbooks are just one of the many actions that you can use with action groups.
In your Automation account, underMonitoring, selectAlerts.
In your Automation account, underMonitoring, selectAlerts.
Select+ New Alert Ruleto open theCreate alert rulepage.
Select+ New Alert Ruleto open theCreate alert rulepage.

UnderScope, selectEdit resource.
UnderScope, selectEdit resource.
On theSelect a resourcepage, from theFilter by resource typedrop-down list, selectVirtual machines.
On theSelect a resourcepage, from theFilter by resource typedrop-down list, selectVirtual machines.
Check the box next to the virtual machine(s) you want monitored. Then selectDoneto return to theCreate alert rulepage.
Check the box next to the virtual machine(s) you want monitored. Then selectDoneto return to theCreate alert rulepage.
UnderCondition, selectAdd condition.
UnderCondition, selectAdd condition.
On theSelect a signalpage, enterPercentage CPUin the search text box, and then selectPercentage CPUfrom the results.
On theSelect a signalpage, enterPercentage CPUin the search text box, and then selectPercentage CPUfrom the results.
Percentage CPU
On theConfigure signal logicpage, underThreshold valueenter an initial low value for testing purposes, such as5. You can go back and update this value once you've confirmed the alert works as expected. Then selectDoneto return to theCreate alert rulepage.
On theConfigure signal logicpage, underThreshold valueenter an initial low value for testing purposes, such as5. You can go back and update this value once you've confirmed the alert works as expected. Then selectDoneto return to theCreate alert rulepage.
5

UnderActions, selectAdd action groups, and then+Create action group.
UnderActions, selectAdd action groups, and then+Create action group.

On theCreate action grouppage:On theBasicstab, enter anAction group nameandDisplay name.On theActionstab, in theNametext box, enter a name. Then from theAction typedrop-down list, selectAutomation Runbookto open theConfigure Runbookpage.For theRunbook sourceitem, selectUser.From theSubscriptiondrop-down list, select your subscription.From theAutomation accountdrop-down list, select your Automation account.From theRunbookdrop-down list, selectStop-AzureVmInResponsetoVMAlert.For theEnable the common alert schemaitem, selectYes.SelectOKto return to theCreate action grouppage.SelectReview + createand thenCreateto return to theCreate alert rulepage.
On theCreate action grouppage:
On theBasicstab, enter anAction group nameandDisplay name.
On theBasicstab, enter anAction group nameandDisplay name.
On theActionstab, in theNametext box, enter a name. Then from theAction typedrop-down list, selectAutomation Runbookto open theConfigure Runbookpage.For theRunbook sourceitem, selectUser.From theSubscriptiondrop-down list, select your subscription.From theAutomation accountdrop-down list, select your Automation account.From theRunbookdrop-down list, selectStop-AzureVmInResponsetoVMAlert.For theEnable the common alert schemaitem, selectYes.SelectOKto return to theCreate action grouppage.
On theActionstab, in theNametext box, enter a name. Then from theAction typedrop-down list, selectAutomation Runbookto open theConfigure Runbookpage.
For theRunbook sourceitem, selectUser.
For theRunbook sourceitem, selectUser.
From theSubscriptiondrop-down list, select your subscription.
From theSubscriptiondrop-down list, select your subscription.
From theAutomation accountdrop-down list, select your Automation account.
From theAutomation accountdrop-down list, select your Automation account.
From theRunbookdrop-down list, selectStop-AzureVmInResponsetoVMAlert.
From theRunbookdrop-down list, selectStop-AzureVmInResponsetoVMAlert.
For theEnable the common alert schemaitem, selectYes.
For theEnable the common alert schemaitem, selectYes.
SelectOKto return to theCreate action grouppage.
SelectOKto return to theCreate action grouppage.

SelectReview + createand thenCreateto return to theCreate alert rulepage.
SelectReview + createand thenCreateto return to theCreate alert rulepage.
UnderAlert rule details, for theAlert rule nametext box.
UnderAlert rule details, for theAlert rule nametext box.
SelectCreate alert rule.  You can use the action group in theactivity log alertsandnear real-time alertsthat you create.
SelectCreate alert rule.  You can use the action group in theactivity log alertsandnear real-time alertsthat you create.
Verification
Ensure your VM is running. Navigate to the runbookStop-AzureVmInResponsetoVMAlertand watch for theRecent Jobslist to populate. Once a completed job appears, select the job and review the output. Also check to see if your VM stopped.

Common Azure VM management operations
Azure Automation provides scripts for common Azure VM management operations like restart VM, stop VM, delete VM, scale up and down scenarios in Runbook gallery. The scripts can also be found in the Azure AutomationGitHub repositoryYou can also use these scripts as mentioned in the above steps.
Next steps
Learn more on how tocreate budget and associate it with Automation runbook.
Discover different ways to start a runbook, seeStart a runbook.
Create an activity log alert, seeCreate activity log alerts.
Learn how to create a near real-time alert, seeCreate an alert rule in the Azure portal.
Feedback
Was this page helpful?
Additional resources