Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Azure Automation runbook types
Article
2024-09-09
23 contributors
In this article
The Azure Automation Process Automation feature supports several types of runbooks, as defined in the following table. To learn about the process automation environment, seeRunbook execution in Azure Automation.
Note
Azure Automation will follow the support lifecycle of PowerShell and Python language versions in accordance with the timelines published by parent productsPowerShellandPythonrespectively. We recommend that you to use runbooks with supported language versions.
Take into account the following considerations when determining which type to use for a particular runbook.
You can't convert runbooks from graphical to text type, or the other way around.
There are limitations when using runbooks of different types as child runbooks. For more information, seeChild runbooks in Azure Automation.
PowerShell runbooks
PowerShell runbooks are based on Windows PowerShell. You directly edit the code of the runbook using the text editor in the Azure portal. You can also use any offline text editor andimport the runbookinto Azure Automation.
The PowerShell version is determined by theRuntime versionspecified (that is version 7.2, 7.1 (preview) or 5.1).
The same Azure sandbox and Hybrid Runbook Worker can execute multiplePowerShellrunbooks targeting different runtime versions side by side.
Note
Currently, PowerShell 7.2 runtime version is supported for both Cloud and Hybrid jobs in all Public regions except Central India, UAE Central, Israel Central, Italy North, and Germany North.
At the time of runbook execution, if you selectRuntime Versionas7.2, PowerShell modules targeting 7.2 runtime version are used and if you selectRuntime Versionas5.1, PowerShell modules targeting 5.1 runtime version are used. This applies for PowerShell 7.1 (preview) modules and runbooks.
Ensure that you select the right Runtime Version for modules.
For example: if you're executing a runbook for a SharePoint automation scenario inRuntime version7.1 (preview), then import the module inRuntime version7.1 (preview); if you're executing a runbook for a SharePoint automation scenario inRuntime version5.1, then import the module inRuntime version5.1. In this case, you would see two entries for the module, one forRuntime Version7.1(preview)and other for5.1.

Note
Currently, PowerShell 5.1, PowerShell 7.1 (preview) and PowerShell 7.2 are supported.
Advantages
Implement all complex logic with PowerShell code without the other complexities of PowerShell Workflow.
Start faster than PowerShell Workflow runbooks, since they don't need to be compiled before running.
Run in Azure and on Hybrid Runbook Workers for both Windows and Linux.
Limitations and Known issues
The following are the current limitations and known issues with PowerShell runbooks:
PowerShell 7.2
PowerShell 5.1
PowerShell 7.1
Limitations
Note
Currently, PowerShell 7.2 runtime version is supported for both Cloud and Hybrid jobs in all Public regions except Central India, UAE Central, Israel  Central, Italy North, and Germany North.
For the PowerShell 7.2 runtime version, the module activities aren't extracted for the imported modules. UseAzure Automation extension for VS Codeto simplify runbook authoring experience.
PowerShell 7.x doesn't support workflows. For more information, seePowerShell workflowfor more details.
PowerShell 7.x currently doesn't support signed runbooks.
Source control integration doesn't support PowerShell 7.2. Also, PowerShell 7.2 runbooks in source control get created in Automation account as Runtime 5.1.
Az module 8.3.0 is installed by default. The complete list of component modules of selected Az module version is shown once Az version is configured again using Azure portal or API.
The imported PowerShell 7.2 module would be validated during job execution. Ensure that all dependencies for the selected module are also imported for successful job execution.
Azure runbook doesn't supportStart-Jobwith-credential.
Start-Job
-credential
Azure doesn't support all PowerShell input parameters.Learn more.
Known issues
Runbooks taking dependency on internal file paths such asC:\modulesmight fail due to changes in service backend infrastructure. Change runbook code to ensure there are no dependencies on internal file paths and useGet-ChildItemto get the required module information.
Runbooks taking dependency on internal file paths such asC:\modulesmight fail due to changes in service backend infrastructure. Change runbook code to ensure there are no dependencies on internal file paths and useGet-ChildItemto get the required module information.
C:\modules
Get-AzStorageAccountcmdlet might fail with an error:TheGet-AzStorageAccountcommand was found in the moduleAz.Storage, but the module could not be loaded.
Get-AzStorageAccountcmdlet might fail with an error:TheGet-AzStorageAccountcommand was found in the moduleAz.Storage, but the module could not be loaded.
Get-AzStorageAccount
Get-AzStorageAccount
Az.Storage
Executing child scripts using.\child-runbook.ps1is not supported.Workaround: UseStart-AutomationRunbook(internal cmdlet) orStart-AzAutomationRunbook(fromAz.Automationmodule) to start another runbook from parent runbook.
Executing child scripts using.\child-runbook.ps1is not supported.Workaround: UseStart-AutomationRunbook(internal cmdlet) orStart-AzAutomationRunbook(fromAz.Automationmodule) to start another runbook from parent runbook.
.\child-runbook.ps1
Start-AutomationRunbook
Start-AzAutomationRunbook
When you useExchangeOnlineManagementmodule version: 3.0.0 or higher, you can experience errors. To resolve the issue, ensure that you explicitly uploadPowerShellGetandPackageManagementmodules.
When you useExchangeOnlineManagementmodule version: 3.0.0 or higher, you can experience errors. To resolve the issue, ensure that you explicitly uploadPowerShellGetandPackageManagementmodules.
When you utilize theâ¯New-AzAutomationVariableâ¯ cmdlet within Az.Automation Module to upload a variable of typeobject, the operation doesn't function as expected.Workaround: Convert the object to a JSON string using theâ¯ConvertTo-Jsonâ¯cmdlet and then upload the variable with the JSON string as its value. This workaround ensures proper handling of the variable within the Azure Automation environment as a JSON string.Exampleâ¯- Create a PowerShell object that has stored information around Azure VMs# Retrieve Azure virtual machines with status information for the 'northeurope' region 
  $AzVM = Get-AzVM -Status | Where-Object {$_.Location -eq "northeurope"} 

  $VMstopatch = @($AzVM).Id 
  # Create an Azure Automation variable (This cmdlet will not fail, but the variable may not work as intended when used in the runbook.) 
  New-AzAutomationVariable -ResourceGroupName "mrg" -AutomationAccountName "mAutomationAccount2" -Name "complex1" -Encrypted $false -Value $VMstopatch 

  # Convert the object to a JSON string 
  $jsonString = $VMstopatch | ConvertTo-Json 

  # Create an Azure Automation variable with a JSON string value (works effectively within the automation runbook) 
  New-AzAutomationVariable -ResourceGroupName "mrg" -AutomationAccountName "mAutomationAccount2" -Name "complex1" -Encrypted $false -Value $jsonString
When you utilize theâ¯New-AzAutomationVariableâ¯ cmdlet within Az.Automation Module to upload a variable of typeobject, the operation doesn't function as expected.
New-AzAutomationVariable
Workaround: Convert the object to a JSON string using theâ¯ConvertTo-Jsonâ¯cmdlet and then upload the variable with the JSON string as its value. This workaround ensures proper handling of the variable within the Azure Automation environment as a JSON string.
Exampleâ¯- Create a PowerShell object that has stored information around Azure VMs
# Retrieve Azure virtual machines with status information for the 'northeurope' region 
  $AzVM = Get-AzVM -Status | Where-Object {$_.Location -eq "northeurope"} 

  $VMstopatch = @($AzVM).Id 
  # Create an Azure Automation variable (This cmdlet will not fail, but the variable may not work as intended when used in the runbook.) 
  New-AzAutomationVariable -ResourceGroupName "mrg" -AutomationAccountName "mAutomationAccount2" -Name "complex1" -Encrypted $false -Value $VMstopatch 

  # Convert the object to a JSON string 
  $jsonString = $VMstopatch | ConvertTo-Json 

  # Create an Azure Automation variable with a JSON string value (works effectively within the automation runbook) 
  New-AzAutomationVariable -ResourceGroupName "mrg" -AutomationAccountName "mAutomationAccount2" -Name "complex1" -Encrypted $false -Value $jsonString
# Retrieve Azure virtual machines with status information for the 'northeurope' region 
  $AzVM = Get-AzVM -Status | Where-Object {$_.Location -eq "northeurope"} 

  $VMstopatch = @($AzVM).Id 
  # Create an Azure Automation variable (This cmdlet will not fail, but the variable may not work as intended when used in the runbook.) 
  New-AzAutomationVariable -ResourceGroupName "mrg" -AutomationAccountName "mAutomationAccount2" -Name "complex1" -Encrypted $false -Value $VMstopatch 

  # Convert the object to a JSON string 
  $jsonString = $VMstopatch | ConvertTo-Json 

  # Create an Azure Automation variable with a JSON string value (works effectively within the automation runbook) 
  New-AzAutomationVariable -ResourceGroupName "mrg" -AutomationAccountName "mAutomationAccount2" -Name "complex1" -Encrypted $false -Value $jsonString
Limitations
Runbooks can't useparallel processingto execute multiple actions in parallel.
Runbooks can't usecheckpointsto resume runbook if there's an error.
You can include only PowerShell, PowerShell Workflow runbooks, and graphical runbooks as child runbooks by using theStart-AzAutomationRunbookcmdlet, which creates a new job.
Runbooks can't use the PowerShell#Requiresstatement, it isn't supported in Azure sandbox or on Hybrid Runbook Workers and might cause the job to fail.
Azure runbook doesn't supportStart-Jobwith-credential.
Start-Job
-credential
Azure doesn't support all PowerShell input parameters.Learn more.
Known issues
Runbooks taking dependency on internal file paths such asC:\modulesmight fail due to changes in service backend infrastructure. Change runbook code to ensure there are no dependencies on internal file paths and useGet-ChildItemto get the required module information.Sample script# Get information about module "Microsoft.Graph.Authentication"
$ModuleName = "Microsoft.Graph.Authentication"

$NewPath = "C:\usr\src\PSModules\$ModuleName"
$OldPath = "C:\Modules\User\$ModuleName"

if (Test-Path -Path $NewPath -PathType Container) {
    Get-ChildItem -Path $NewPath
} elseif (Test-Path -Path $OldPath -PathType Container) {
    Get-ChildItem -Path $OldPath
} else {
    Write-Output "Module $ModuleName not present."
}
# Getting the path to the Temp folder, if needed.
$tmp = $env:TEMP
Runbooks taking dependency on internal file paths such asC:\modulesmight fail due to changes in service backend infrastructure. Change runbook code to ensure there are no dependencies on internal file paths and useGet-ChildItemto get the required module information.
C:\modules
Sample script
# Get information about module "Microsoft.Graph.Authentication"
$ModuleName = "Microsoft.Graph.Authentication"

$NewPath = "C:\usr\src\PSModules\$ModuleName"
$OldPath = "C:\Modules\User\$ModuleName"

if (Test-Path -Path $NewPath -PathType Container) {
    Get-ChildItem -Path $NewPath
} elseif (Test-Path -Path $OldPath -PathType Container) {
    Get-ChildItem -Path $OldPath
} else {
    Write-Output "Module $ModuleName not present."
}
# Getting the path to the Temp folder, if needed.
$tmp = $env:TEMP
# Get information about module "Microsoft.Graph.Authentication"
$ModuleName = "Microsoft.Graph.Authentication"

$NewPath = "C:\usr\src\PSModules\$ModuleName"
$OldPath = "C:\Modules\User\$ModuleName"

if (Test-Path -Path $NewPath -PathType Container) {
    Get-ChildItem -Path $NewPath
} elseif (Test-Path -Path $OldPath -PathType Container) {
    Get-ChildItem -Path $OldPath
} else {
    Write-Output "Module $ModuleName not present."
}
# Getting the path to the Temp folder, if needed.
$tmp = $env:TEMP
Get-AzStorageAccountcmdlet might fail with an error:TheGet-AzStorageAccountcommand was found in the moduleAz.Storage, but the module could not be loaded.
Get-AzStorageAccountcmdlet might fail with an error:TheGet-AzStorageAccountcommand was found in the moduleAz.Storage, but the module could not be loaded.
Get-AzStorageAccount
Get-AzStorageAccount
Az.Storage
PowerShell runbooks can't retrieve an unencryptedvariable assetwith a null value.
PowerShell runbooks can't retrieve an unencryptedvariable assetwith a null value.
PowerShell runbooks can't retrieve a variable asset with*~*in the name.
PowerShell runbooks can't retrieve a variable asset with*~*in the name.
*~*
AGet-Processoperation in a loop in a PowerShell runbook can crash after about 80 iterations.
AGet-Processoperation in a loop in a PowerShell runbook can crash after about 80 iterations.
A PowerShell runbook can fail if it tries to write a large amount of data to the output stream at once. You can typically work around this issue by having the runbook output just the information needed  to work with large objects. For example, instead of usingGet-Processwith no limitations, you can have the cmdlet output just the required parameters as inGet-Process | Select ProcessName, CPU.
A PowerShell runbook can fail if it tries to write a large amount of data to the output stream at once. You can typically work around this issue by having the runbook output just the information needed  to work with large objects. For example, instead of usingGet-Processwith no limitations, you can have the cmdlet output just the required parameters as inGet-Process | Select ProcessName, CPU.
Get-Process
Get-Process | Select ProcessName, CPU
When you useExchangeOnlineManagementmodule version: 3.0.0 or higher, you may experience errors. To resolve the issue, ensure that you explicitly uploadPowerShellGetandPackageManagementmodules as well.
When you useExchangeOnlineManagementmodule version: 3.0.0 or higher, you may experience errors. To resolve the issue, ensure that you explicitly uploadPowerShellGetandPackageManagementmodules as well.
If you import module Az.Accounts with version 2.12.3 or newer, ensure that you import theNewtonsoft.Jsonv10 module explicitly if PowerShell 5.1 runbooks have a dependency on this version of the module. The workaround for this issue is to use PowerShell 7.2 runbooks.
If you import module Az.Accounts with version 2.12.3 or newer, ensure that you import theNewtonsoft.Jsonv10 module explicitly if PowerShell 5.1 runbooks have a dependency on this version of the module. The workaround for this issue is to use PowerShell 7.2 runbooks.
When you utilize theâ¯New-AzAutomationVariablecmdlet within Az.Automation Module to upload a variable of typeobject, the operation doesn't function as expected.Workaround: Convert the object to a JSON string using theâ¯ConvertTo-Jsonâ¯cmdlet and then upload the variable with the JSON string as its value. This workaround ensures proper handling of the variable within the Azure Automation environment as a JSON string.Exampleâ¯- Create a PowerShell object that has stored information around Azure VMs# Retrieve Azure virtual machines with status information for the 'northeurope' region 
  $AzVM = Get-AzVM -Status | Where-Object {$_.Location -eq "northeurope"} 

  $VMstopatch = @($AzVM).Id 
  # Create an Azure Automation variable (This cmdlet will not fail, but the variable may not work as intended when used in the runbook.) 
  New-AzAutomationVariable -ResourceGroupName "mrg" -AutomationAccountName "mAutomationAccount2" -Name "complex1" -Encrypted $false -Value $VMstopatch 

  # Convert the object to a JSON string 
  $jsonString = $VMstopatch | ConvertTo-Json 

  # Create an Azure Automation variable with a JSON string value (works effectively within the automation runbook) 
  New-AzAutomationVariable -ResourceGroupName "mrg" -AutomationAccountName "mAutomationAccount2" -Name "complex1" -Encrypted $false -Value $jsonString
When you utilize theâ¯New-AzAutomationVariablecmdlet within Az.Automation Module to upload a variable of typeobject, the operation doesn't function as expected.
New-AzAutomationVariable
Workaround: Convert the object to a JSON string using theâ¯ConvertTo-Jsonâ¯cmdlet and then upload the variable with the JSON string as its value. This workaround ensures proper handling of the variable within the Azure Automation environment as a JSON string.
Exampleâ¯- Create a PowerShell object that has stored information around Azure VMs
# Retrieve Azure virtual machines with status information for the 'northeurope' region 
  $AzVM = Get-AzVM -Status | Where-Object {$_.Location -eq "northeurope"} 

  $VMstopatch = @($AzVM).Id 
  # Create an Azure Automation variable (This cmdlet will not fail, but the variable may not work as intended when used in the runbook.) 
  New-AzAutomationVariable -ResourceGroupName "mrg" -AutomationAccountName "mAutomationAccount2" -Name "complex1" -Encrypted $false -Value $VMstopatch 

  # Convert the object to a JSON string 
  $jsonString = $VMstopatch | ConvertTo-Json 

  # Create an Azure Automation variable with a JSON string value (works effectively within the automation runbook) 
  New-AzAutomationVariable -ResourceGroupName "mrg" -AutomationAccountName "mAutomationAccount2" -Name "complex1" -Encrypted $false -Value $jsonString
# Retrieve Azure virtual machines with status information for the 'northeurope' region 
  $AzVM = Get-AzVM -Status | Where-Object {$_.Location -eq "northeurope"} 

  $VMstopatch = @($AzVM).Id 
  # Create an Azure Automation variable (This cmdlet will not fail, but the variable may not work as intended when used in the runbook.) 
  New-AzAutomationVariable -ResourceGroupName "mrg" -AutomationAccountName "mAutomationAccount2" -Name "complex1" -Encrypted $false -Value $VMstopatch 

  # Convert the object to a JSON string 
  $jsonString = $VMstopatch | ConvertTo-Json 

  # Create an Azure Automation variable with a JSON string value (works effectively within the automation runbook) 
  New-AzAutomationVariable -ResourceGroupName "mrg" -AutomationAccountName "mAutomationAccount2" -Name "complex1" -Encrypted $false -Value $jsonString
Limitations
PowerShell 7.1is no longer supported by parent product PowerShell. We recommend you to create new runbooks in PowerShell 7.2 for a long term support and update the outdated runbooks.
The Azure Automation internal PowerShell cmdlets aren't supported on a Linux Hybrid Runbook Worker. You must import theautomationassetsmodule at the beginning of your PowerShell runbook to access the Automation account shared resources (assets) functions.
automationassets
For the PowerShell 7 runtime version, the module activities aren't extracted for the imported modules.
PSCredentialrunbook parameter type isn't supported in PowerShell 7 runtime version.
PowerShell 7.x doesn't support workflows. For more information, seePowerShell Workflowfor more details.
PowerShell 7.x currently doesn't support signed runbooks.
Source control integration doesn't support PowerShell 7.1 (preview) Also, PowerShell 7.1 (preview) runbooks in source control gets created in Automation account as Runtime 5.1.
PowerShell 7.1 module management isn't supported throughGet-AzAutomationModulecmdlets.
Get-AzAutomationModule
Runbook fails with no log trace if the input value contains the character '.
Azure runbook doesn't supportStart-Jobwith-credential.
Start-Job
-credential
Azure doesn't support all PowerShell input parameters.Learn more.
Known issues
Runbooks taking dependency on internal file paths such asC:\modulesmight fail due to changes in service backend infrastructure. Change runbook code to ensure there are no dependencies on internal file paths and useGet-ChildItemto get the required module information.Sample script# Get information about module "Microsoft.Graph.Authentication"
$ModuleName = "Microsoft.Graph.Authentication"

$NewPath = "C:\usr\src\PSModules\$ModuleName"
$OldPath = "C:\Modules\User\$ModuleName"

if (Test-Path -Path $NewPath -PathType Container) {
    Get-ChildItem -Path $NewPath
} elseif (Test-Path -Path $OldPath -PathType Container) {
    Get-ChildItem -Path $OldPath
} else {
    Write-Output "Module $ModuleName not present."
}
# Getting the path to the Temp folder, if needed.
$tmp = $env:TEMP
Runbooks taking dependency on internal file paths such asC:\modulesmight fail due to changes in service backend infrastructure. Change runbook code to ensure there are no dependencies on internal file paths and useGet-ChildItemto get the required module information.
C:\modules
Sample script
# Get information about module "Microsoft.Graph.Authentication"
$ModuleName = "Microsoft.Graph.Authentication"

$NewPath = "C:\usr\src\PSModules\$ModuleName"
$OldPath = "C:\Modules\User\$ModuleName"

if (Test-Path -Path $NewPath -PathType Container) {
    Get-ChildItem -Path $NewPath
} elseif (Test-Path -Path $OldPath -PathType Container) {
    Get-ChildItem -Path $OldPath
} else {
    Write-Output "Module $ModuleName not present."
}
# Getting the path to the Temp folder, if needed.
$tmp = $env:TEMP
# Get information about module "Microsoft.Graph.Authentication"
$ModuleName = "Microsoft.Graph.Authentication"

$NewPath = "C:\usr\src\PSModules\$ModuleName"
$OldPath = "C:\Modules\User\$ModuleName"

if (Test-Path -Path $NewPath -PathType Container) {
    Get-ChildItem -Path $NewPath
} elseif (Test-Path -Path $OldPath -PathType Container) {
    Get-ChildItem -Path $OldPath
} else {
    Write-Output "Module $ModuleName not present."
}
# Getting the path to the Temp folder, if needed.
$tmp = $env:TEMP
Get-AzStorageAccountcmdlet might fail with an error:TheGet-AzStorageAccountcommand was found in the moduleAz.Storage, but the module could not be loaded.
Get-AzStorageAccountcmdlet might fail with an error:TheGet-AzStorageAccountcommand was found in the moduleAz.Storage, but the module could not be loaded.
Get-AzStorageAccount
Get-AzStorageAccount
Az.Storage
Executing child scripts using.\child-runbook.ps1isn't supported in this preview.Workaround: UseStart-AutomationRunbook(internal cmdlet) orStart-AzAutomationRunbook(fromAz.Automationmodule) to start another runbook from parent runbook.
Executing child scripts using.\child-runbook.ps1isn't supported in this preview.Workaround: UseStart-AutomationRunbook(internal cmdlet) orStart-AzAutomationRunbook(fromAz.Automationmodule) to start another runbook from parent runbook.
.\child-runbook.ps1
Start-AutomationRunbook
Start-AzAutomationRunbook
Az.Automation
Runbook properties defining logging preference isn't supported in PowerShell 7 runtime.Workaround: Explicitly set the preference at the start of the runbook as following -$VerbosePreference = "Continue"

    $ProgressPreference = "Continue"
Runbook properties defining logging preference isn't supported in PowerShell 7 runtime.Workaround: Explicitly set the preference at the start of the runbook as following -
$VerbosePreference = "Continue"

    $ProgressPreference = "Continue"
$VerbosePreference = "Continue"

    $ProgressPreference = "Continue"
Avoid importingAz.Accountsmodule to version 2.4.0 version for PowerShell 7 runtime as there can be an unexpected behavior using this version in Azure Automation.
Avoid importingAz.Accountsmodule to version 2.4.0 version for PowerShell 7 runtime as there can be an unexpected behavior using this version in Azure Automation.
Az.Accounts
You might encounter formatting problems with error output streams for the job running in PowerShell 7 runtime.
You might encounter formatting problems with error output streams for the job running in PowerShell 7 runtime.
When you import a PowerShell 7.1 module that's dependent on other modules, you may find that the import button is gray even when PowerShell 7.1 version of the dependent module is installed. For example, Az PowerShell module.Compute version 4.20.0, has a dependency on Az.Accounts being >= 2.6.0. This issue occurs when an equivalent dependent module in PowerShell 5.1 doesn't meet the version requirements. For example, 5.1 version of Az.Accounts were < 2.6.0.
When you import a PowerShell 7.1 module that's dependent on other modules, you may find that the import button is gray even when PowerShell 7.1 version of the dependent module is installed. For example, Az PowerShell module.Compute version 4.20.0, has a dependency on Az.Accounts being >= 2.6.0. This issue occurs when an equivalent dependent module in PowerShell 5.1 doesn't meet the version requirements. For example, 5.1 version of Az.Accounts were < 2.6.0.
When you start PowerShell 7 runbook using the webhook, it auto-converts the webhook input parameter to an invalid JSON.
When you start PowerShell 7 runbook using the webhook, it auto-converts the webhook input parameter to an invalid JSON.
We recommend that you useExchangeOnlineManagementmodule version: 3.0.0 or lower because version: 3.0.0 or higher may lead to job failures.
We recommend that you useExchangeOnlineManagementmodule version: 3.0.0 or lower because version: 3.0.0 or higher may lead to job failures.
If you import module Az.Accounts with version 2.12.3 or newer, ensure that you import theNewtonsoft.Jsonv10 module explicitly if PowerShell 7.1 runbooks have a dependency on this version of the module. The workaround for this issue is to use PowerShell 7.2 runbooks.
If you import module Az.Accounts with version 2.12.3 or newer, ensure that you import theNewtonsoft.Jsonv10 module explicitly if PowerShell 7.1 runbooks have a dependency on this version of the module. The workaround for this issue is to use PowerShell 7.2 runbooks.
When you utilize theâ¯New-AzAutomationVariableâ¯ cmdlet within Az.Automation Module to upload a variable of typeobject, the operation doesn't function as expected.Workaround: Convert the object to a JSON string using theâ¯ConvertTo-Jsonâ¯cmdlet and then upload the variable with the JSON string as its value. This workaround ensures proper handling of the variable within the Azure Automation environment as a JSON string.Exampleâ¯- Create a PowerShell object that has stored information around Azure VMs# Retrieve Azure virtual machines with status information for the 'northeurope' region 
  $AzVM = Get-AzVM -Status | Where-Object {$_.Location -eq "northeurope"} 

  $VMstopatch = @($AzVM).Id 
  # Create an Azure Automation variable (This cmdlet will not fail, but the variable may not work as intended when used in the runbook.) 
  New-AzAutomationVariable -ResourceGroupName "mrg" -AutomationAccountName "mAutomationAccount2" -Name "complex1" -Encrypted $false -Value $VMstopatch 

  # Convert the object to a JSON string 
  $jsonString = $VMstopatch | ConvertTo-Json 

  # Create an Azure Automation variable with a JSON string value (works effectively within the automation runbook) 
  New-AzAutomationVariable -ResourceGroupName "mrg" -AutomationAccountName "mAutomationAccount2" -Name "complex1" -Encrypted $false -Value $jsonString
When you utilize theâ¯New-AzAutomationVariableâ¯ cmdlet within Az.Automation Module to upload a variable of typeobject, the operation doesn't function as expected.
New-AzAutomationVariable
Workaround: Convert the object to a JSON string using theâ¯ConvertTo-Jsonâ¯cmdlet and then upload the variable with the JSON string as its value. This workaround ensures proper handling of the variable within the Azure Automation environment as a JSON string.
Exampleâ¯- Create a PowerShell object that has stored information around Azure VMs
# Retrieve Azure virtual machines with status information for the 'northeurope' region 
  $AzVM = Get-AzVM -Status | Where-Object {$_.Location -eq "northeurope"} 

  $VMstopatch = @($AzVM).Id 
  # Create an Azure Automation variable (This cmdlet will not fail, but the variable may not work as intended when used in the runbook.) 
  New-AzAutomationVariable -ResourceGroupName "mrg" -AutomationAccountName "mAutomationAccount2" -Name "complex1" -Encrypted $false -Value $VMstopatch 

  # Convert the object to a JSON string 
  $jsonString = $VMstopatch | ConvertTo-Json 

  # Create an Azure Automation variable with a JSON string value (works effectively within the automation runbook) 
  New-AzAutomationVariable -ResourceGroupName "mrg" -AutomationAccountName "mAutomationAccount2" -Name "complex1" -Encrypted $false -Value $jsonString
# Retrieve Azure virtual machines with status information for the 'northeurope' region 
  $AzVM = Get-AzVM -Status | Where-Object {$_.Location -eq "northeurope"} 

  $VMstopatch = @($AzVM).Id 
  # Create an Azure Automation variable (This cmdlet will not fail, but the variable may not work as intended when used in the runbook.) 
  New-AzAutomationVariable -ResourceGroupName "mrg" -AutomationAccountName "mAutomationAccount2" -Name "complex1" -Encrypted $false -Value $VMstopatch 

  # Convert the object to a JSON string 
  $jsonString = $VMstopatch | ConvertTo-Json 

  # Create an Azure Automation variable with a JSON string value (works effectively within the automation runbook) 
  New-AzAutomationVariable -ResourceGroupName "mrg" -AutomationAccountName "mAutomationAccount2" -Name "complex1" -Encrypted $false -Value $jsonString
PowerShell Workflow runbooks
PowerShell Workflow runbooks are text runbooks based onWindows PowerShell Workflow. You directly edit the code of the runbook using the text editor in the Azure portal. You can also use any offline text editor andimport the runbookinto Azure Automation.
Note
PowerShell 7.1 (preview) and PowerShell 7.2  do not support Workflow runbooks.
Advantages
Implement all complex logic with PowerShell Workflow code.
Usecheckpointsto resume operation if there's an error.
Useparallel processingto do multiple actions in parallel.
Can include other graphical runbooks and PowerShell Workflow runbooks as child runbooks to create high-level workflows.
Limitations
PowerShell workflow isn't supported in PowerShell 7+ versions. Hence, the outdated runbooks can't be upgraded.
Inefficient handling of parallel execution compared to newer PowerShell 7+ versions.
PowerShell Workflow internally works using multiple processes. Hence, modules available in one process may not be available in another and cause exceptions likecommand not found.
Runbooks must deal with the additional complexity of PowerShell Workflow, such asdeserialized objects.
Runbooks take longer to start than PowerShell runbooks since they must be compiled before running.
You can only include PowerShell runbooks as child runbooks by using theStart-AzAutomationRunbookcmdlet.
Start-AzAutomationRunbook
Runbooks can't run on a Linux Hybrid Runbook Worker.
Python runbooks
Python runbooks compile under Python 2.7(GA), Python 3.8 (GA) and Python 3.10 (preview). You can directly edit the code of the runbook using the text editor in the Azure portal. You can also use an offline text editor andimport the runbookinto Azure Automation.
Currently, Python 3.10 (preview) runtime version is supported for both Cloud and Hybrid jobs in all Public regions except Australia Central2, Korea South, Sweden South, Jio India Central, Brazil SouthEast, Central India, West India, UAE Central, and Gov clouds.
Advantages
Note
Importing a Python package may take several minutes.
Uses the robust Python libraries.
Can run in Azure or on Hybrid Runbook Workers.
For Python 2.7, Windows Hybrid Runbook Workers are supported withpython 2.7installed.
For Python 3.8 Cloud Jobs, Python 3.8 version is supported. Scripts and packages from any 3.x version might work if the code is compatible across different versions.
For Python 3.8 Hybrid jobs on Windows machines, you can choose to install any 3.x version you may want to use.
For Python 3.8 Hybrid jobs on Linux machines, we depend on the Python 3 version installed on the machine to run DSC OMSConfig and the Linux Hybrid Worker. Different versions should work if there are no breaking changes in method signatures or contracts between versions of Python 3.
Limitations
Following are the limitations of Python runbooks
Python 3.10 (preview)
Python 3.8 (GA)
Python 2.7
For Python 3.10 (preview) modules, currently, only the wheel files targeting cp310 Linux OS are supported.Learn more
Source control integration isn't supported.
Custom packages for Python 3.10 (preview) are only validated during job runtime. Job is expected to fail if the package is not compatible in the runtime or if required dependencies of packages aren't imported into automation account.
Currently, Python 3.10 (preview) runbooks are only supported from Azure portal. Rest API and PowerShell aren't supported.
You must be familiar with Python scripting.
Source control integration isn't supported.
For Python 3.8 modules, use wheel files targeting cp38-amd64.
To use third-party libraries, you mustimport the packagesinto the Automation account.
UsingStart-AutomationRunbookâ¯cmdlet in PowerShell/PowerShell Workflowâ¯to start a Python 3.8 runbook doesn't work. You can useâ¯Start-AzAutomationRunbookcmdlet from Az.Automation moduleâ¯orâ¯Start-AzureRmAutomationRunbookcmdlet from AzureRm.Automationâ¯module to work around this limitation.â¯
Azure Automation doesn't supportâ¯sys.stderr.
The Pythonautomationassetspackage isn't available on pypi.org, so it's not available for import onto a Windows machine.
Python 2.7is no longer supported by parent product Python. We recommend you to create new runbooks in the supported versions and update the outdated runbooks.
You must be familiar with Python scripting.
For Python 2.7.12 modules, use wheel files cp27-amd6.
To use third-party libraries, you mustimport the packagesinto the Automation account.
Azure Automation doesn't supportâ¯sys.stderr.
The Pythonautomationassetspackage isn't available on pypi.org, so it's not available for import onto a Windows machine.
Multiple Python versions
It's applicable for Windows Hybrid workers. For a Windows Runbook Worker, when running a Python 2 runbook it looks for the environment variablePYTHON_2_PATHfirst and validates whether it points to a valid executable file. For example, if the installation folder isC:\Python2, it would check ifC:\Python2\python.exeis a valid path. If not found, then it looks for thePATHenvironment variable to do a similar check.
PYTHON_2_PATH
C:\Python2
C:\Python2\python.exe
PATH
For Python 3, it looks for thePYTHON_3_PATHenv variable first and then falls back to thePATHenvironment variable.
PYTHON_3_PATH
PATH
When using only one version of Python, you can add the installation path to thePATHvariable. If you want to use both versions on the Runbook Worker, setPYTHON_2_PATHandPYTHON_3_PATHto the location of the module for those versions.
PATH
PYTHON_2_PATH
PYTHON_3_PATH
Known issues
For cloud jobs, Python 3.8 jobs sometimes fail with an exception messageinvalid interpreter executable path. You might see this exception if the job is delayed, starting more than 10 minutes, or usingStart-AutomationRunbookto start Python 3.8 runbooks. If the job is delayed, restarting the runbook should be sufficient.
invalid interpreter executable path
Graphical runbooks
You can create and edit graphical and graphical PowerShell Workflow runbooks using the graphical editor in the Azure portal. However, you can't create or edit this type of runbook with another tool. Main features of graphical runbooks:
Exported to files in your Automation account and then imported into another Automation account.
Generate PowerShell code.
Converted to or from graphical PowerShell Workflow runbooks during import.
Advantages
Use visual insert-link-configure authoring model.
Focus on how data flows through the process.
Visually represent management processes.
Include other runbooks as child runbooks to create high-level workflows.
Encourage modular programming.
Limitations
Can't create or edit outside the Azure portal.
Might require a code activity containing PowerShell code to execute complex logic.
Can't convert to one of thetext formats, nor can you convert a text runbook to graphical format.
Can't view or directly edit PowerShell code that the graphical workflow creates. You can view the code you create in any code activities.
Can't run runbooks on a Linux Hybrid Runbook Worker. SeeAutomate resources in your datacenter or cloud by using Hybrid Runbook Worker.
Graphical runbooks can't be digitally signed.
Next steps
To learn about PowerShell runbooks, seeTutorial: Create a PowerShell runbook.
To learn about PowerShell Workflow runbooks, seeTutorial: Create a PowerShell Workflow runbook.
To learn about graphical runbooks, seeTutorial: Create a graphical runbook.
To learn about Python runbooks, seeTutorial: Create a Python runbook.
Feedback
Was this page helpful?
Additional resources