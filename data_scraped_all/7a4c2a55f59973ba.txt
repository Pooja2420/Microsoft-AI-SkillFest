Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Tutorial: Microservices communication using Dapr Publish and Subscribe
Article
2024-08-05
1 contributor
In this article
In this tutorial, you create publisher and subscriber microservices that leveragethe Dapr Pub/sub APIto communicate using messages for event-driven architectures. You'll:
Create a publisher microservice and a subscriber microservice that leverage theDapr pub/sub APIto communicate using messages for event-driven architectures.
Deploy the application to Azure Container Apps via the Azure Developer CLI with provided Bicep.
The sample pub/sub project includes:
A message generatorcheckoutservice (publisher) that generates messages of a specific topic.
checkout
Anorder-processorservice (subscriber) that listens for messages from thecheckoutservice of a specific topic.
order-processor
checkout

Prerequisites
InstallAzure Developer CLI
InstallandinitDapr
Docker Desktop
InstallGit
Run the Node.js applications locally
Before deploying the application to Azure Container Apps, run theorder-processorandcheckoutservices locally with Dapr and Azure Service Bus.
order-processor
checkout
Prepare the project
Clone thesample applicationto your local machine.git clone https://github.com/Azure-Samples/pubsub-dapr-nodejs-servicebus.git
Clone thesample applicationto your local machine.
git clone https://github.com/Azure-Samples/pubsub-dapr-nodejs-servicebus.git
git clone https://github.com/Azure-Samples/pubsub-dapr-nodejs-servicebus.git
Navigate into the sample's root directory.cd pubsub-dapr-nodejs-servicebus
Navigate into the sample's root directory.
cd pubsub-dapr-nodejs-servicebus
cd pubsub-dapr-nodejs-servicebus
Run the applications using the Dapr CLI
Start by running theorder-processorsubscriber service.
order-processor
From the sample's root directory, change directories toorder-processor.cd order-processor
From the sample's root directory, change directories toorder-processor.
order-processor
cd order-processor
cd order-processor
Install the dependencies.npm install
Install the dependencies.
npm install
npm install
Run theorder-processorservice.dapr run --app-port 5001 --app-id order-processing --app-protocol http --dapr-http-port 3501 --resources-path ../components -- npm run start
Run theorder-processorservice.
order-processor
dapr run --app-port 5001 --app-id order-processing --app-protocol http --dapr-http-port 3501 --resources-path ../components -- npm run start
dapr run --app-port 5001 --app-id order-processing --app-protocol http --dapr-http-port 3501 --resources-path ../components -- npm run start
In a new terminal window, from the sample's root directory, navigate to thecheckoutpublisher service.cd checkout
In a new terminal window, from the sample's root directory, navigate to thecheckoutpublisher service.
checkout
cd checkout
cd checkout
Install the dependencies.npm install
Install the dependencies.
npm install
npm install
Run thecheckoutservice.dapr run --app-id checkout --app-protocol http --resources-path ../components -- npm run startExpected outputIn both terminals, thecheckoutservice publishes 10 messages received by theorder-processorservice before exiting.checkoutoutput:== APP == Published data: {"orderId":1}
== APP == Published data: {"orderId":2}
== APP == Published data: {"orderId":3}
== APP == Published data: {"orderId":4}
== APP == Published data: {"orderId":5}
== APP == Published data: {"orderId":6}
== APP == Published data: {"orderId":7}
== APP == Published data: {"orderId":8}
== APP == Published data: {"orderId":9}
== APP == Published data: {"orderId":10}order-processoroutput:== APP == Subscriber received: {"orderId":1}
== APP == Subscriber received: {"orderId":2}
== APP == Subscriber received: {"orderId":3}
== APP == Subscriber received: {"orderId":4}
== APP == Subscriber received: {"orderId":5}
== APP == Subscriber received: {"orderId":6}
== APP == Subscriber received: {"orderId":7}
== APP == Subscriber received: {"orderId":8}
== APP == Subscriber received: {"orderId":9}
== APP == Subscriber received: {"orderId":10}
Run thecheckoutservice.
checkout
dapr run --app-id checkout --app-protocol http --resources-path ../components -- npm run start
dapr run --app-id checkout --app-protocol http --resources-path ../components -- npm run start
In both terminals, thecheckoutservice publishes 10 messages received by theorder-processorservice before exiting.
checkout
order-processor
checkoutoutput:
checkout
== APP == Published data: {"orderId":1}
== APP == Published data: {"orderId":2}
== APP == Published data: {"orderId":3}
== APP == Published data: {"orderId":4}
== APP == Published data: {"orderId":5}
== APP == Published data: {"orderId":6}
== APP == Published data: {"orderId":7}
== APP == Published data: {"orderId":8}
== APP == Published data: {"orderId":9}
== APP == Published data: {"orderId":10}
== APP == Published data: {"orderId":1}
== APP == Published data: {"orderId":2}
== APP == Published data: {"orderId":3}
== APP == Published data: {"orderId":4}
== APP == Published data: {"orderId":5}
== APP == Published data: {"orderId":6}
== APP == Published data: {"orderId":7}
== APP == Published data: {"orderId":8}
== APP == Published data: {"orderId":9}
== APP == Published data: {"orderId":10}
order-processoroutput:
order-processor
== APP == Subscriber received: {"orderId":1}
== APP == Subscriber received: {"orderId":2}
== APP == Subscriber received: {"orderId":3}
== APP == Subscriber received: {"orderId":4}
== APP == Subscriber received: {"orderId":5}
== APP == Subscriber received: {"orderId":6}
== APP == Subscriber received: {"orderId":7}
== APP == Subscriber received: {"orderId":8}
== APP == Subscriber received: {"orderId":9}
== APP == Subscriber received: {"orderId":10}
== APP == Subscriber received: {"orderId":1}
== APP == Subscriber received: {"orderId":2}
== APP == Subscriber received: {"orderId":3}
== APP == Subscriber received: {"orderId":4}
== APP == Subscriber received: {"orderId":5}
== APP == Subscriber received: {"orderId":6}
== APP == Subscriber received: {"orderId":7}
== APP == Subscriber received: {"orderId":8}
== APP == Subscriber received: {"orderId":9}
== APP == Subscriber received: {"orderId":10}
Make sure both applications have stopped by running the following commands. In the checkout terminal:dapr stop --app-id checkoutIn the order-processor terminal:dapr stop --app-id order-processor
Make sure both applications have stopped by running the following commands. In the checkout terminal:
dapr stop --app-id checkout
dapr stop --app-id checkout
In the order-processor terminal:
dapr stop --app-id order-processor
dapr stop --app-id order-processor
Deploy the application template using Azure Developer CLI
Deploy the application to Azure Container Apps usingazd.
azd
Prepare the project
In a new terminal window, navigate into thesample'sroot directory.
cd pubsub-dapr-nodejs-servicebus
cd pubsub-dapr-nodejs-servicebus
Provision and deploy using Azure Developer CLI
Runazd initto initialize the project.azd init
Runazd initto initialize the project.
azd init
azd init
azd init
When prompted in the terminal, provide the following parameters.ParameterDescriptionEnvironment NamePrefix for the resource group created to hold all Azure resources.Azure LocationThe Azure location for your resources.Azure SubscriptionThe Azure subscription for your resources.
When prompted in the terminal, provide the following parameters.
Runazd upto provision the infrastructure and deploy the application to Azure Container Apps in a single command.azd upThis process may take some time to complete. As theazd upcommand completes, the CLI output displays two Azure portal links to monitor the deployment progress. The output also demonstrates howazd up:Creates and configures all necessary Azure resources via the provided Bicep files in the./infradirectory usingazd provision. Once provisioned by Azure Developer CLI, you can access these resources via the Azure portal. The files that provision the Azure resources include:main.parameters.jsonmain.bicepAnappresources directory organized by functionalityAcorereference library that contains the Bicep modules used by theazdtemplateDeploys the code usingazd deployExpected outputInitializing a new project (azd init)


Provisioning Azure resources (azd provision)
Provisioning Azure resources can take some time

  You can view detailed progress in the Azure Portal:
  https://portal.azure.com

  (â) Done: Resource group: resource-group-name
  (â) Done: Application Insights: app-insights-name
  (â) Done: Portal dashboard: portal-dashboard-name
  (â) Done: Log Analytics workspace: log-analytics-name
  (â) Done: Key vault: key-vault-name
  (â) Done: Container Apps Environment: ca-env-name
  (â) Done: Container App: ca-checkout-name
  (â) Done: Container App: ca-orders-name


Deploying services (azd deploy)

  (â) Done: Deploying service checkout
  (â) Done: Deploying service orders
  - Endpoint: https://ca-orders-name.endpoint.region.azurecontainerapps.io/

SUCCESS: Your Azure app has been deployed!
You can view the resources created under the resource group resource-group-name in Azure Portal:
https://portal.azure.com/#@/resource/subscriptions/subscription-id/resourceGroups/resource-group-name/overview
Runazd upto provision the infrastructure and deploy the application to Azure Container Apps in a single command.
azd up
azd up
azd up
This process may take some time to complete. As theazd upcommand completes, the CLI output displays two Azure portal links to monitor the deployment progress. The output also demonstrates howazd up:
azd up
azd up
Creates and configures all necessary Azure resources via the provided Bicep files in the./infradirectory usingazd provision. Once provisioned by Azure Developer CLI, you can access these resources via the Azure portal. The files that provision the Azure resources include:main.parameters.jsonmain.bicepAnappresources directory organized by functionalityAcorereference library that contains the Bicep modules used by theazdtemplate
./infra
azd provision
main.parameters.json
main.parameters.json
main.bicep
main.bicep
Anappresources directory organized by functionality
app
Acorereference library that contains the Bicep modules used by theazdtemplate
core
azd
Deploys the code usingazd deploy
azd deploy
Initializing a new project (azd init)


Provisioning Azure resources (azd provision)
Provisioning Azure resources can take some time

  You can view detailed progress in the Azure Portal:
  https://portal.azure.com

  (â) Done: Resource group: resource-group-name
  (â) Done: Application Insights: app-insights-name
  (â) Done: Portal dashboard: portal-dashboard-name
  (â) Done: Log Analytics workspace: log-analytics-name
  (â) Done: Key vault: key-vault-name
  (â) Done: Container Apps Environment: ca-env-name
  (â) Done: Container App: ca-checkout-name
  (â) Done: Container App: ca-orders-name


Deploying services (azd deploy)

  (â) Done: Deploying service checkout
  (â) Done: Deploying service orders
  - Endpoint: https://ca-orders-name.endpoint.region.azurecontainerapps.io/

SUCCESS: Your Azure app has been deployed!
You can view the resources created under the resource group resource-group-name in Azure Portal:
https://portal.azure.com/#@/resource/subscriptions/subscription-id/resourceGroups/resource-group-name/overview
Initializing a new project (azd init)


Provisioning Azure resources (azd provision)
Provisioning Azure resources can take some time

  You can view detailed progress in the Azure Portal:
  https://portal.azure.com

  (â) Done: Resource group: resource-group-name
  (â) Done: Application Insights: app-insights-name
  (â) Done: Portal dashboard: portal-dashboard-name
  (â) Done: Log Analytics workspace: log-analytics-name
  (â) Done: Key vault: key-vault-name
  (â) Done: Container Apps Environment: ca-env-name
  (â) Done: Container App: ca-checkout-name
  (â) Done: Container App: ca-orders-name


Deploying services (azd deploy)

  (â) Done: Deploying service checkout
  (â) Done: Deploying service orders
  - Endpoint: https://ca-orders-name.endpoint.region.azurecontainerapps.io/

SUCCESS: Your Azure app has been deployed!
You can view the resources created under the resource group resource-group-name in Azure Portal:
https://portal.azure.com/#@/resource/subscriptions/subscription-id/resourceGroups/resource-group-name/overview
Confirm successful deployment
In the Azure portal, verify thecheckoutservice is publishing messages to the Azure Service Bus topic.
checkout
Copy thecheckoutcontainer app name from the terminal output.
Copy thecheckoutcontainer app name from the terminal output.
checkout
Sign in to theAzure portaland search for the container app resource by name.
Sign in to theAzure portaland search for the container app resource by name.
In the Container Apps dashboard, selectMonitoring>Log stream.
In the Container Apps dashboard, selectMonitoring>Log stream.

Confirm thecheckoutcontainer is logging the same output as in the terminal earlier.
Confirm thecheckoutcontainer is logging the same output as in the terminal earlier.
checkout

Do the same for theorder-processorservice.
Do the same for theorder-processorservice.
order-processor

What happened?
Upon successful completion of theazd upcommand:
azd up
Azure Developer CLI provisioned the Azure resources referenced in thesample project's./infradirectoryto the Azure subscription you specified. You can now view those Azure resources via the Azure portal.
./infra
The app deployed to Azure Container Apps. From the portal, you can browse to the fully functional app.
Run the Python applications locally
Before deploying the application to Azure Container Apps, run theorder-processorandcheckoutservices locally with Dapr and Azure Service Bus.
order-processor
checkout
Prepare the project
Clone thesample applicationto your local machine.git clone https://github.com/Azure-Samples/pubsub-dapr-python-servicebus.git
Clone thesample applicationto your local machine.
git clone https://github.com/Azure-Samples/pubsub-dapr-python-servicebus.git
git clone https://github.com/Azure-Samples/pubsub-dapr-python-servicebus.git
Navigate into the sample's root directory.cd pubsub-dapr-python-servicebus
Navigate into the sample's root directory.
cd pubsub-dapr-python-servicebus
cd pubsub-dapr-python-servicebus
Run the applications using the Dapr CLI
Start by running theorder-processorsubscriber service.
order-processor
From the sample's root directory, change directories toorder-processor.cd order-processor
From the sample's root directory, change directories toorder-processor.
order-processor
cd order-processor
cd order-processor
Install the dependencies.pip3 install -r requirements.txt
Install the dependencies.
pip3 install -r requirements.txt
pip3 install -r requirements.txt
Run theorder-processorservice.WindowsLinuxdapr run --app-id order-processor --resources-path ../components/ --app-port 5001 -- python app.pydapr run --app-id order-processor --resources-path ../components/ --app-port 5001 -- python3 app.py
Run theorder-processorservice.
order-processor
Windows
Linux
dapr run --app-id order-processor --resources-path ../components/ --app-port 5001 -- python app.py
dapr run --app-id order-processor --resources-path ../components/ --app-port 5001 -- python app.py
dapr run --app-id order-processor --resources-path ../components/ --app-port 5001 -- python3 app.py
dapr run --app-id order-processor --resources-path ../components/ --app-port 5001 -- python3 app.py
In a new terminal window, from the sample's root directory, navigate to thecheckoutpublisher service.cd checkout
In a new terminal window, from the sample's root directory, navigate to thecheckoutpublisher service.
checkout
cd checkout
cd checkout
Install the dependencies.pip3 install -r requirements.txt
Install the dependencies.
pip3 install -r requirements.txt
pip3 install -r requirements.txt
Run thecheckoutservice.WindowsLinuxdapr run --app-id checkout --resources-path ../components/ -- python app.pydapr run --app-id checkout --resources-path ../components/ -- python3 app.py
Run thecheckoutservice.
checkout
Windows
Linux
dapr run --app-id checkout --resources-path ../components/ -- python app.py
dapr run --app-id checkout --resources-path ../components/ -- python app.py
dapr run --app-id checkout --resources-path ../components/ -- python3 app.py
dapr run --app-id checkout --resources-path ../components/ -- python3 app.py
In both terminals, thecheckoutservice publishes 10 messages received by theorder-processorservice before exiting.
checkout
order-processor
checkoutoutput:
checkout
== APP == Published data: {"orderId":1}
== APP == Published data: {"orderId":2}
== APP == Published data: {"orderId":3}
== APP == Published data: {"orderId":4}
== APP == Published data: {"orderId":5}
== APP == Published data: {"orderId":6}
== APP == Published data: {"orderId":7}
== APP == Published data: {"orderId":8}
== APP == Published data: {"orderId":9}
== APP == Published data: {"orderId":10}
== APP == Published data: {"orderId":1}
== APP == Published data: {"orderId":2}
== APP == Published data: {"orderId":3}
== APP == Published data: {"orderId":4}
== APP == Published data: {"orderId":5}
== APP == Published data: {"orderId":6}
== APP == Published data: {"orderId":7}
== APP == Published data: {"orderId":8}
== APP == Published data: {"orderId":9}
== APP == Published data: {"orderId":10}
order-processoroutput:
order-processor
== APP == Subscriber received: {"orderId":1}
== APP == Subscriber received: {"orderId":2}
== APP == Subscriber received: {"orderId":3}
== APP == Subscriber received: {"orderId":4}
== APP == Subscriber received: {"orderId":5}
== APP == Subscriber received: {"orderId":6}
== APP == Subscriber received: {"orderId":7}
== APP == Subscriber received: {"orderId":8}
== APP == Subscriber received: {"orderId":9}
== APP == Subscriber received: {"orderId":10}
== APP == Subscriber received: {"orderId":1}
== APP == Subscriber received: {"orderId":2}
== APP == Subscriber received: {"orderId":3}
== APP == Subscriber received: {"orderId":4}
== APP == Subscriber received: {"orderId":5}
== APP == Subscriber received: {"orderId":6}
== APP == Subscriber received: {"orderId":7}
== APP == Subscriber received: {"orderId":8}
== APP == Subscriber received: {"orderId":9}
== APP == Subscriber received: {"orderId":10}
Make sure both applications have stopped by running the following commands. In the checkout terminal:dapr stop --app-id checkoutIn the order-processor terminal:dapr stop --app-id order-processor
Make sure both applications have stopped by running the following commands. In the checkout terminal:
dapr stop --app-id checkout
dapr stop --app-id checkout
In the order-processor terminal:
dapr stop --app-id order-processor
dapr stop --app-id order-processor
Deploy the application template using Azure Developer CLI
Deploy the application to Azure Container Apps usingazd.
azd
Prepare the project
In a new terminal window, navigate into thesample'sroot directory.
cd pubsub-dapr-python-servicebus
cd pubsub-dapr-python-servicebus
Provision and deploy using Azure Developer CLI
Runazd initto initialize the project.azd init
Runazd initto initialize the project.
azd init
azd init
azd init
When prompted in the terminal, provide the following parameters.ParameterDescriptionEnvironment NamePrefix for the resource group created to hold all Azure resources.Azure LocationThe Azure location for your resources.Azure SubscriptionThe Azure subscription for your resources.
When prompted in the terminal, provide the following parameters.
Runazd upto provision the infrastructure and deploy the application to Azure Container Apps in a single command.azd upThis process may take some time to complete. As theazd upcommand completes, the CLI output displays two Azure portal links to monitor the deployment progress. The output also demonstrates howazd up:Creates and configures all necessary Azure resources via the provided Bicep files in the./infradirectory usingazd provision. Once provisioned by Azure Developer CLI, you can access these resources via the Azure portal. The files that provision the Azure resources include:main.parameters.jsonmain.bicepAnappresources directory organized by functionalityAcorereference library that contains the Bicep modules used by theazdtemplateDeploys the code usingazd deployExpected outputInitializing a new project (azd init)


Provisioning Azure resources (azd provision)
Provisioning Azure resources can take some time

  You can view detailed progress in the Azure Portal:
  https://portal.azure.com

  (â) Done: Resource group: resource-group-name
  (â) Done: Application Insights: app-insights-name
  (â) Done: Portal dashboard: portal-dashboard-name
  (â) Done: Log Analytics workspace: log-analytics-name
  (â) Done: Key vault: key-vault-name
  (â) Done: Container Apps Environment: ca-env-name
  (â) Done: Container App: ca-checkout-name
  (â) Done: Container App: ca-orders-name


Deploying services (azd deploy)

  (â) Done: Deploying service checkout
  (â) Done: Deploying service orders
  - Endpoint: https://ca-orders-name.endpoint.region.azurecontainerapps.io/

SUCCESS: Your Azure app has been deployed!
You can view the resources created under the resource group resource-group-name in Azure Portal:
https://portal.azure.com/#@/resource/subscriptions/subscription-id/resourceGroups/resource-group-name/overview
Runazd upto provision the infrastructure and deploy the application to Azure Container Apps in a single command.
azd up
azd up
azd up
This process may take some time to complete. As theazd upcommand completes, the CLI output displays two Azure portal links to monitor the deployment progress. The output also demonstrates howazd up:
azd up
azd up
Creates and configures all necessary Azure resources via the provided Bicep files in the./infradirectory usingazd provision. Once provisioned by Azure Developer CLI, you can access these resources via the Azure portal. The files that provision the Azure resources include:main.parameters.jsonmain.bicepAnappresources directory organized by functionalityAcorereference library that contains the Bicep modules used by theazdtemplate
./infra
azd provision
main.parameters.json
main.parameters.json
main.bicep
main.bicep
Anappresources directory organized by functionality
app
Acorereference library that contains the Bicep modules used by theazdtemplate
core
azd
Deploys the code usingazd deploy
azd deploy
Initializing a new project (azd init)


Provisioning Azure resources (azd provision)
Provisioning Azure resources can take some time

  You can view detailed progress in the Azure Portal:
  https://portal.azure.com

  (â) Done: Resource group: resource-group-name
  (â) Done: Application Insights: app-insights-name
  (â) Done: Portal dashboard: portal-dashboard-name
  (â) Done: Log Analytics workspace: log-analytics-name
  (â) Done: Key vault: key-vault-name
  (â) Done: Container Apps Environment: ca-env-name
  (â) Done: Container App: ca-checkout-name
  (â) Done: Container App: ca-orders-name


Deploying services (azd deploy)

  (â) Done: Deploying service checkout
  (â) Done: Deploying service orders
  - Endpoint: https://ca-orders-name.endpoint.region.azurecontainerapps.io/

SUCCESS: Your Azure app has been deployed!
You can view the resources created under the resource group resource-group-name in Azure Portal:
https://portal.azure.com/#@/resource/subscriptions/subscription-id/resourceGroups/resource-group-name/overview
Initializing a new project (azd init)


Provisioning Azure resources (azd provision)
Provisioning Azure resources can take some time

  You can view detailed progress in the Azure Portal:
  https://portal.azure.com

  (â) Done: Resource group: resource-group-name
  (â) Done: Application Insights: app-insights-name
  (â) Done: Portal dashboard: portal-dashboard-name
  (â) Done: Log Analytics workspace: log-analytics-name
  (â) Done: Key vault: key-vault-name
  (â) Done: Container Apps Environment: ca-env-name
  (â) Done: Container App: ca-checkout-name
  (â) Done: Container App: ca-orders-name


Deploying services (azd deploy)

  (â) Done: Deploying service checkout
  (â) Done: Deploying service orders
  - Endpoint: https://ca-orders-name.endpoint.region.azurecontainerapps.io/

SUCCESS: Your Azure app has been deployed!
You can view the resources created under the resource group resource-group-name in Azure Portal:
https://portal.azure.com/#@/resource/subscriptions/subscription-id/resourceGroups/resource-group-name/overview
Confirm successful deployment
In the Azure portal, verify thecheckoutservice is publishing messages to the Azure Service Bus topic.
checkout
Copy thecheckoutcontainer app name from the terminal output.
Copy thecheckoutcontainer app name from the terminal output.
checkout
Sign in to theAzure portaland search for the container app resource by name.
Sign in to theAzure portaland search for the container app resource by name.
In the Container Apps dashboard, selectMonitoring>Log stream.
In the Container Apps dashboard, selectMonitoring>Log stream.

Confirm thecheckoutcontainer is logging the same output as in the terminal earlier.
Confirm thecheckoutcontainer is logging the same output as in the terminal earlier.
checkout

Do the same for theorder-processorservice.
Do the same for theorder-processorservice.
order-processor

What happened?
Upon successful completion of theazd upcommand:
azd up
Azure Developer CLI provisioned the Azure resources referenced in thesample project's./infradirectoryto the Azure subscription you specified. You can now view those Azure resources via the Azure portal.
./infra
The app deployed to Azure Container Apps. From the portal, you can browse to the fully functional app.
Run the .NET applications locally
Before deploying the application to Azure Container Apps, run theorder-processorandcheckoutservices locally with Dapr and Azure Service Bus.
order-processor
checkout
Prepare the project
Clone thesample applicationto your local machine.git clone https://github.com/Azure-Samples/pubsub-dapr-csharp-servicebus.git
Clone thesample applicationto your local machine.
git clone https://github.com/Azure-Samples/pubsub-dapr-csharp-servicebus.git
git clone https://github.com/Azure-Samples/pubsub-dapr-csharp-servicebus.git
Navigate into the sample's root directory.cd pubsub-dapr-csharp-servicebus
Navigate into the sample's root directory.
cd pubsub-dapr-csharp-servicebus
cd pubsub-dapr-csharp-servicebus
Run the applications using the Dapr CLI
Start by running theorder-processorsubscriber service
order-processor
From the sample's root directory, change directories toorder-processor.cd order-processor
From the sample's root directory, change directories toorder-processor.
order-processor
cd order-processor
cd order-processor
Install the dependencies.dotnet build
Install the dependencies.
dotnet build
dotnet build
Run theorder-processorservice.dapr run --app-id order-processor --resources-path ../components/ --app-port 7001 -- dotnet run --project .
Run theorder-processorservice.
order-processor
dapr run --app-id order-processor --resources-path ../components/ --app-port 7001 -- dotnet run --project .
dapr run --app-id order-processor --resources-path ../components/ --app-port 7001 -- dotnet run --project .
In a new terminal window, from the sample's root directory, navigate to thecheckoutpublisher service.cd checkout
In a new terminal window, from the sample's root directory, navigate to thecheckoutpublisher service.
checkout
cd checkout
cd checkout
Install the dependencies.dotnet build
Install the dependencies.
dotnet build
dotnet build
Run thecheckoutservice.dapr run --app-id checkout --resources-path ../components/ -- dotnet run --project .Expected outputIn both terminals, thecheckoutservice publishes 10 messages received by theorder-processorservice before exiting.checkoutoutput:== APP == Published data: {"orderId":1}
== APP == Published data: {"orderId":2}
== APP == Published data: {"orderId":3}
== APP == Published data: {"orderId":4}
== APP == Published data: {"orderId":5}
== APP == Published data: {"orderId":6}
== APP == Published data: {"orderId":7}
== APP == Published data: {"orderId":8}
== APP == Published data: {"orderId":9}
== APP == Published data: {"orderId":10}order-processoroutput:== APP == Subscriber received: {"orderId":1}
== APP == Subscriber received: {"orderId":2}
== APP == Subscriber received: {"orderId":3}
== APP == Subscriber received: {"orderId":4}
== APP == Subscriber received: {"orderId":5}
== APP == Subscriber received: {"orderId":6}
== APP == Subscriber received: {"orderId":7}
== APP == Subscriber received: {"orderId":8}
== APP == Subscriber received: {"orderId":9}
== APP == Subscriber received: {"orderId":10}
Run thecheckoutservice.
checkout
dapr run --app-id checkout --resources-path ../components/ -- dotnet run --project .
dapr run --app-id checkout --resources-path ../components/ -- dotnet run --project .
In both terminals, thecheckoutservice publishes 10 messages received by theorder-processorservice before exiting.
checkout
order-processor
checkoutoutput:
checkout
== APP == Published data: {"orderId":1}
== APP == Published data: {"orderId":2}
== APP == Published data: {"orderId":3}
== APP == Published data: {"orderId":4}
== APP == Published data: {"orderId":5}
== APP == Published data: {"orderId":6}
== APP == Published data: {"orderId":7}
== APP == Published data: {"orderId":8}
== APP == Published data: {"orderId":9}
== APP == Published data: {"orderId":10}
== APP == Published data: {"orderId":1}
== APP == Published data: {"orderId":2}
== APP == Published data: {"orderId":3}
== APP == Published data: {"orderId":4}
== APP == Published data: {"orderId":5}
== APP == Published data: {"orderId":6}
== APP == Published data: {"orderId":7}
== APP == Published data: {"orderId":8}
== APP == Published data: {"orderId":9}
== APP == Published data: {"orderId":10}
order-processoroutput:
order-processor
== APP == Subscriber received: {"orderId":1}
== APP == Subscriber received: {"orderId":2}
== APP == Subscriber received: {"orderId":3}
== APP == Subscriber received: {"orderId":4}
== APP == Subscriber received: {"orderId":5}
== APP == Subscriber received: {"orderId":6}
== APP == Subscriber received: {"orderId":7}
== APP == Subscriber received: {"orderId":8}
== APP == Subscriber received: {"orderId":9}
== APP == Subscriber received: {"orderId":10}
== APP == Subscriber received: {"orderId":1}
== APP == Subscriber received: {"orderId":2}
== APP == Subscriber received: {"orderId":3}
== APP == Subscriber received: {"orderId":4}
== APP == Subscriber received: {"orderId":5}
== APP == Subscriber received: {"orderId":6}
== APP == Subscriber received: {"orderId":7}
== APP == Subscriber received: {"orderId":8}
== APP == Subscriber received: {"orderId":9}
== APP == Subscriber received: {"orderId":10}
Make sure both applications have stopped by running the following commands. In the checkout terminal.dapr stop --app-id checkoutIn the order-processor terminal:dapr stop --app-id order-processor
Make sure both applications have stopped by running the following commands. In the checkout terminal.
dapr stop --app-id checkout
dapr stop --app-id checkout
In the order-processor terminal:
dapr stop --app-id order-processor
dapr stop --app-id order-processor
Deploy the application template using Azure Developer CLI
Deploy the application to Azure Container Apps usingazd.
azd
Prepare the project
In a new terminal window, navigate into thesample'sroot directory.
cd pubsub-dapr-csharp-servicebus
cd pubsub-dapr-csharp-servicebus
Provision and deploy using Azure Developer CLI
Runazd initto initialize the project.azd init
Runazd initto initialize the project.
azd init
azd init
azd init
When prompted in the terminal, provide the following parameters.ParameterDescriptionEnvironment NamePrefix for the resource group created to hold all Azure resources.Azure LocationThe Azure location for your resources.Azure SubscriptionThe Azure subscription for your resources.
When prompted in the terminal, provide the following parameters.
Runazd upto provision the infrastructure and deploy the application to Azure Container Apps in a single command.azd upThis process may take some time to complete. As theazd upcommand completes, the CLI output displays two Azure portal links to monitor the deployment progress. The output also demonstrates howazd up:Creates and configures all necessary Azure resources via the provided Bicep files in the./infradirectory usingazd provision. Once provisioned by Azure Developer CLI, you can access these resources via the Azure portal. The files that provision the Azure resources include:main.parameters.jsonmain.bicepAnappresources directory organized by functionalityAcorereference library that contains the Bicep modules used by theazdtemplateDeploys the code usingazd deployExpected outputInitializing a new project (azd init)


Provisioning Azure resources (azd provision)
Provisioning Azure resources can take some time

  You can view detailed progress in the Azure Portal:
  https://portal.azure.com

  (â) Done: Resource group: resource-group-name
  (â) Done: Application Insights: app-insights-name
  (â) Done: Portal dashboard: portal-dashboard-name
  (â) Done: Log Analytics workspace: log-analytics-name
  (â) Done: Key vault: key-vault-name
  (â) Done: Container Apps Environment: ca-env-name
  (â) Done: Container App: ca-checkout-name
  (â) Done: Container App: ca-orders-name


Deploying services (azd deploy)

  (â) Done: Deploying service checkout
  (â) Done: Deploying service orders
  - Endpoint: https://ca-orders-name.endpoint.region.azurecontainerapps.io/

SUCCESS: Your Azure app has been deployed!
You can view the resources created under the resource group resource-group-name in Azure Portal:
https://portal.azure.com/#@/resource/subscriptions/subscription-id/resourceGroups/resource-group-name/overview
Runazd upto provision the infrastructure and deploy the application to Azure Container Apps in a single command.
azd up
azd up
azd up
This process may take some time to complete. As theazd upcommand completes, the CLI output displays two Azure portal links to monitor the deployment progress. The output also demonstrates howazd up:
azd up
azd up
Creates and configures all necessary Azure resources via the provided Bicep files in the./infradirectory usingazd provision. Once provisioned by Azure Developer CLI, you can access these resources via the Azure portal. The files that provision the Azure resources include:main.parameters.jsonmain.bicepAnappresources directory organized by functionalityAcorereference library that contains the Bicep modules used by theazdtemplate
./infra
azd provision
main.parameters.json
main.parameters.json
main.bicep
main.bicep
Anappresources directory organized by functionality
app
Acorereference library that contains the Bicep modules used by theazdtemplate
core
azd
Deploys the code usingazd deploy
azd deploy
Initializing a new project (azd init)


Provisioning Azure resources (azd provision)
Provisioning Azure resources can take some time

  You can view detailed progress in the Azure Portal:
  https://portal.azure.com

  (â) Done: Resource group: resource-group-name
  (â) Done: Application Insights: app-insights-name
  (â) Done: Portal dashboard: portal-dashboard-name
  (â) Done: Log Analytics workspace: log-analytics-name
  (â) Done: Key vault: key-vault-name
  (â) Done: Container Apps Environment: ca-env-name
  (â) Done: Container App: ca-checkout-name
  (â) Done: Container App: ca-orders-name


Deploying services (azd deploy)

  (â) Done: Deploying service checkout
  (â) Done: Deploying service orders
  - Endpoint: https://ca-orders-name.endpoint.region.azurecontainerapps.io/

SUCCESS: Your Azure app has been deployed!
You can view the resources created under the resource group resource-group-name in Azure Portal:
https://portal.azure.com/#@/resource/subscriptions/subscription-id/resourceGroups/resource-group-name/overview
Initializing a new project (azd init)


Provisioning Azure resources (azd provision)
Provisioning Azure resources can take some time

  You can view detailed progress in the Azure Portal:
  https://portal.azure.com

  (â) Done: Resource group: resource-group-name
  (â) Done: Application Insights: app-insights-name
  (â) Done: Portal dashboard: portal-dashboard-name
  (â) Done: Log Analytics workspace: log-analytics-name
  (â) Done: Key vault: key-vault-name
  (â) Done: Container Apps Environment: ca-env-name
  (â) Done: Container App: ca-checkout-name
  (â) Done: Container App: ca-orders-name


Deploying services (azd deploy)

  (â) Done: Deploying service checkout
  (â) Done: Deploying service orders
  - Endpoint: https://ca-orders-name.endpoint.region.azurecontainerapps.io/

SUCCESS: Your Azure app has been deployed!
You can view the resources created under the resource group resource-group-name in Azure Portal:
https://portal.azure.com/#@/resource/subscriptions/subscription-id/resourceGroups/resource-group-name/overview
Confirm successful deployment
In the Azure portal, verify thecheckoutservice is publishing messages to the Azure Service Bus topic.
checkout
Copy thecheckoutcontainer app name from the terminal output.
Copy thecheckoutcontainer app name from the terminal output.
checkout
Sign in to theAzure portaland search for the container app resource by name.
Sign in to theAzure portaland search for the container app resource by name.
In the Container Apps dashboard, selectMonitoring>Log stream.
In the Container Apps dashboard, selectMonitoring>Log stream.

Confirm thecheckoutcontainer is logging the same output as in the terminal earlier.
Confirm thecheckoutcontainer is logging the same output as in the terminal earlier.
checkout

Do the same for theorder-processorservice.
Do the same for theorder-processorservice.
order-processor

What happened?
Upon successful completion of theazd upcommand:
azd up
Azure Developer CLI provisioned the Azure resources referenced in thesample project's./infradirectoryto the Azure subscription you specified. You can now view those Azure resources via the Azure portal.
./infra
The app deployed to Azure Container Apps. From the portal, you can browse to the fully functional app.
Clean up resources
If you're not going to continue to use this application, delete the Azure resources you've provisioned with the following command:
azd down
azd down
Next steps
Learn more aboutdeploying applications to Azure Container Apps.
Enable token authentication for Dapr requests.
Learn more aboutAzure Developer CLIandmaking your applications compatible withazd.
azd
Scale your applications using KEDA scalers
Feedback
Was this page helpful?
Additional resources