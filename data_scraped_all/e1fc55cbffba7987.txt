Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Service Bus messaging exceptions (deprecated)
Article
2024-02-23
10 contributors
In this article
This article lists the .NET exceptions generated by .NET Framework APIs.
On 30 September 2026, we'll retire the Azure Service Bus SDK libraries WindowsAzure.ServiceBus, Microsoft.Azure.ServiceBus, and com.microsoft.azure.servicebus, which don't conform to Azure SDK guidelines. We'll also end support of the SBMP protocol, so you'll no longer be able to use this protocol after 30 September 2026. Migrate to the latest Azure SDK libraries, which offer critical security updates and improved capabilities, before that date.
Although the older libraries can still be used beyond 30 September 2026, they'll no longer receive official support and updates from Microsoft. For more information, see thesupport retirement announcement.
Exception categories
The messaging APIs generate exceptions that can fall into the following categories, along with the associated action you can take to try to fix them. The meaning and causes of an exception can vary depending on the type of messaging entity:
User coding error (System.ArgumentException,System.InvalidOperationException,System.OperationCanceledException,System.Runtime.Serialization.SerializationException). General action: try to fix the code before proceeding.
Setup/configuration error (Microsoft.ServiceBus.Messaging.MessagingEntityNotFoundException,System.UnauthorizedAccessException. General action: review your configuration and change if necessary.
Transient exceptions (Microsoft.ServiceBus.Messaging.MessagingException,Microsoft.ServiceBus.Messaging.ServerBusyException,Microsoft.ServiceBus.Messaging.MessagingCommunicationException). General action: retry the operation or notify users. TheRetryPolicyclass in the client SDK can be configured to handle retries automatically. For more information, seeRetry guidance.
RetryPolicy
Other exceptions (System.Transactions.TransactionException,System.TimeoutException,Microsoft.ServiceBus.Messaging.MessageLockLostException,Microsoft.ServiceBus.Messaging.SessionLockLostException). General action: specific to the exception type; refer to the table in the following section:
Important
Azure Service Bus doesn't retry an operation in case of an exception when the operation is in a transaction scope.
For retry guidance specific to Azure Service Bus, seeRetry guidance for Service Bus.
Exception types
The following table lists messaging exception types, and their causes, and notes suggested action you can take.
If your code runs in an environment with a firewall/proxy, ensure that the traffic to the Service Bus domain/IP address and ports isn't blocked.
An attempt is made to create aQueueClientusing a name or path that belongs to a different entity type (for example, a topic).
An attempt is made to send a message larger than 256 KB.

The request was terminated because the entity is being throttled. Error code: 50001, 50002, 50008.
Check the documentation for the supported value types of the properties and only use supported types.
Check theIsTransientproperty. If it'strue, you can retry the operation.
Transaction.Current
QuotaExceededException
QuotaExceededExceptionindicates that a quota for a specific entity has been exceeded.
Note
For Service Bus quotas, seeQuotas.
Queues and topics
For queues and topics, it's often the size of the queue. The error message property contains further details, as in the following example:
Microsoft.ServiceBus.Messaging.QuotaExceededException
Message: The maximum entity size has been reached or exceeded for Topic: 'xxx-xxx-xxx'. 
    Size of entity in bytes:1073742326, Max entity size in bytes:
1073741824..TrackingId:xxxxxxxxxxxxxxxxxxxxxxxxxx, TimeStamp:3/15/2013 7:50:18 AM
Microsoft.ServiceBus.Messaging.QuotaExceededException
Message: The maximum entity size has been reached or exceeded for Topic: 'xxx-xxx-xxx'. 
    Size of entity in bytes:1073742326, Max entity size in bytes:
1073741824..TrackingId:xxxxxxxxxxxxxxxxxxxxxxxxxx, TimeStamp:3/15/2013 7:50:18 AM
The message states that the topic exceeded its size limit, in this case 1 GB (the default size limit).
Namespaces
For namespaces,QuotaExceededExceptioncan indicate that an application has exceeded the maximum number of connections to a namespace. For example:
Microsoft.ServiceBus.Messaging.QuotaExceededException: ConnectionsQuotaExceeded for namespace xxx.
<tracking-id-guid>_G12 ---> 
System.ServiceModel.FaultException`1[System.ServiceModel.ExceptionDetail]: 
ConnectionsQuotaExceeded for namespace xxx.
Microsoft.ServiceBus.Messaging.QuotaExceededException: ConnectionsQuotaExceeded for namespace xxx.
<tracking-id-guid>_G12 ---> 
System.ServiceModel.FaultException`1[System.ServiceModel.ExceptionDetail]: 
ConnectionsQuotaExceeded for namespace xxx.
Common causes
There are two common causes for this error: the dead-letter queue, and nonfunctioning message receivers.
Dead-letter queueA reader is failing to complete messages and the messages are returned to the queue/topic when the lock expires. It can happen if the reader encounters an exception that prevents it from callingBrokeredMessage.Complete. After a message has been read 10 times, it moves to the dead-letter queue by default. This behavior is controlled by theQueueDescription.MaxDeliveryCountproperty and has a default value of 10. As messages pile up in the dead letter queue, they take up space.To resolve the issue, read and complete the messages from the dead-letter queue, as you would from any other queue. You can use theFormatDeadLetterPathmethod to help format the dead-letter queue path.
Dead-letter queueA reader is failing to complete messages and the messages are returned to the queue/topic when the lock expires. It can happen if the reader encounters an exception that prevents it from callingBrokeredMessage.Complete. After a message has been read 10 times, it moves to the dead-letter queue by default. This behavior is controlled by theQueueDescription.MaxDeliveryCountproperty and has a default value of 10. As messages pile up in the dead letter queue, they take up space.
To resolve the issue, read and complete the messages from the dead-letter queue, as you would from any other queue. You can use theFormatDeadLetterPathmethod to help format the dead-letter queue path.
Receiver stopped. A receiver has stopped receiving messages from a queue or subscription. The way to identify this is to look at theQueueDescription.MessageCountDetailsproperty, which shows the full breakdown of the messages. If theActiveMessageCountproperty is high or growing, then the messages aren't being read as fast as they're being written.
Receiver stopped. A receiver has stopped receiving messages from a queue or subscription. The way to identify this is to look at theQueueDescription.MessageCountDetailsproperty, which shows the full breakdown of the messages. If theActiveMessageCountproperty is high or growing, then the messages aren't being read as fast as they're being written.
TimeoutException
ATimeoutExceptionindicates that a user-initiated operation is taking longer than the operation timeout.
You should check the value of theServicePointManager.DefaultConnectionLimitproperty, as hitting this limit can also cause aTimeoutException.
Timeouts are expected to happen during or in-between maintenance operations such as Service Bus service updates (or) OS updates on resources that run the service. During OS updates, entities are moved around and nodes are updated or rebooted, which can cause timeouts. For service level agreement (SLA) details for the Azure Service Bus service, seeSLA for Service Bus.
Queues and topics
For queues and topics, the timeout is specified either in theMessagingFactorySettings.OperationTimeoutproperty, as part of the connection string, or throughServiceBusConnectionStringBuilder. The error message itself might vary, but it always contains the timeout value specified for the current operation.
MessageLockLostException
Cause
TheMessageLockLostExceptionis thrown when a message is received using thePeekLockReceive mode and the lock held by the client expires on the service side.
The lock on a message might expire due to various reasons:
The lock timer has expired before it was renewed by the client application.
The client application acquired the lock, saved it to a persistent store and then restarted. Once it restarted, the client application looked at the inflight messages and tried to complete these.
You might also receive this exception in the following scenarios:
Service Update
OS update
Changing properties on the entity (queue, topic, subscription) while holding the lock.
Resolution
When a client application receivesMessageLockLostException, it can no longer process the message. The client application might optionally consider logging the exception for analysis, but the clientmustdispose off the message.
Since the lock on the message has expired, it would go back on the Queue (or Subscription) and can be processed by the next client application that calls receive.
If the MaxDeliveryCount has exceeded, then the message might be moved to theDeadLetterQueue.
SessionLockLostException
Cause
TheSessionLockLostExceptionis thrown when a session is accepted and the lock held by the client expires on the service side.
The lock on a session might expire due to various reasons:
The lock timer has expired before it was renewed by the client application.
The client application acquired the lock, saved it to a persistent store and then restarted. Once it restarted, the client application looked at the inflight sessions and tried to process the messages in those sessions.
You might also receive this exception in the following scenarios:
Service Update
OS update
Changing properties on the entity (queue, topic, subscription) while holding the lock.
Resolution
When a client application receivesSessionLockLostException, it can no longer process the messages on the session. The client application might consider logging the exception for analysis, but the clientmustdispose off the message.
Since the lock on the session has expired, it would go back on the Queue (or Subscription) and can be locked by the next client application that accepts the session. Since the session lock is held by a single client application at any given time, the in-order processing is guaranteed.
SocketException
Cause
ASocketExceptionis thrown in the following cases:
When a connection attempt fails because the host didn't properly respond after a specified time (TCP error code 10060).
An established connection failed because connected host has failed to respond.
There was an error processing the message or the timeout is exceeded by the remote host.
Underlying network resource issue.
Resolution
TheSocketExceptionerrors indicate that the VM hosting the applications is unable to convert the name<mynamespace>.servicebus.windows.netto the corresponding IP address.
<mynamespace>.servicebus.windows.net
Check to see if the following command succeeds in mapping to an IP address.
PS C:\> nslookup <mynamespace>.servicebus.windows.net
PS C:\> nslookup <mynamespace>.servicebus.windows.net
Which should provide an output like:
Name:    <cloudappinstance>.cloudapp.net
Address:  XX.XX.XXX.240
Aliases:  <mynamespace>.servicebus.windows.net
Name:    <cloudappinstance>.cloudapp.net
Address:  XX.XX.XXX.240
Aliases:  <mynamespace>.servicebus.windows.net
If the above namedoes not resolveto an IP and the namespace alias, check with the network administrator to investigate further. Name resolution is done through a DNS server typically a resource in the customer network. If the DNS resolution is done by Azure DNS, contact Azure support.
If name resolutionworks as expected, check if connections to Azure Service Bus is allowedhere.
MessagingException
Cause
MessagingExceptionis a generic exception that might be thrown for various reasons. Some of the reasons are:
An attempt is made to create aQueueClienton aTopicor aSubscription.
The size of the message sent is greater than the limit for the given tier. Read more about the Service Busquotas and limits.
Specific data plane request (send, receive, complete, abandon) was terminated due to throttling.
Transient issues caused due to service upgrades and restarts.
Note
The above list of exceptions is not exhaustive.
Resolution
The resolution steps depend on what caused theMessagingExceptionto be thrown.
Fortransient issues(whereisTransientis set totrue) or forthrottling issues, retrying the operation might resolve it. The default retry policy on the SDK can be used for this.
For other issues, the details in the exception indicate the issue and resolution steps can be deduced from the same.
StorageQuotaExceededException
Cause
TheStorageQuotaExceededExceptionis generated when the total size of entities in a premium namespace exceeds the limit of 1 TB permessaging unit.
Resolution
Increase the number of messaging units assigned to the premium namespace
If you're already using maximum allowed messaging units for a namespace, create a separate namespace.
Next steps
For the complete Service Bus .NET API reference, see theAzure .NET API reference.
For troubleshooting tips, see theTroubleshooting guide.
Feedback
Was this page helpful?
Additional resources