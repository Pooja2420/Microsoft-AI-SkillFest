Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Manage Azure resources by using the REST API
Article
2025-02-10
4 contributors
In this article
Learn how to use the REST API forAzure Resource Managerto manage your Azure resources. For a comprehensive reference of how to structure Azure REST calls, seeGetting Started with REST. View theResource Management REST API referencefor more details on the available operations.
Obtain an access token
To make a REST API call to Azure, you first need to obtain an access token. Include this access token in the headers of your Azure REST API calls using theAuthorizationheader and setting the value toBearer {access-token}.
Authorization
Bearer {access-token}
If you need to programmatically retrieve new tokens as part of your application, you can obtain an access token byRegistering your client application with Microsoft Entra ID.
To test Azure REST APIs using your individual token, retrieve your current access token with either Azure PowerShell or Azure CLI.
Azure CLI
Azure PowerShell
token=$(az account get-access-token --query accessToken --output tsv)
token=$(az account get-access-token --query accessToken --output tsv)
$token = (Get-AzAccessToken).Token
$token = (Get-AzAccessToken).Token
Operation scope
You can call many Azure Resource Manager operations at different scopes:
providers/Microsoft.Management/managementGroups/{managementGroupId}
subscriptions/{subscriptionId}
subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}
subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderName}/{resourceType}/{resourceName}
List resources
The following REST operation returns the resources within a provided resource group.
GET /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/resources?api-version=2021-04-01 HTTP/1.1
Authorization: Bearer <bearer-token>
Host: management.azure.com
GET /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/resources?api-version=2021-04-01 HTTP/1.1
Authorization: Bearer <bearer-token>
Host: management.azure.com
Here's an example cURL command that you can use to list all resources in a resource group using the Azure Resource Manager API:
curl  -H "Authorization: Bearer $token" -H 'Content-Type: application/json' -X GET 'https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/resources?api-version=2021-04-01'
curl  -H "Authorization: Bearer $token" -H 'Content-Type: application/json' -X GET 'https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/resources?api-version=2021-04-01'
With the authentication step, this example looks like:
Azure CLI
Azure PowerShell
token=$(az account get-access-token --query accessToken --output tsv)
curl  -H "Authorization: Bearer $token" -H 'Content-Type: application/json' -X GET 'https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/resources?api-version=2021-04-01'
token=$(az account get-access-token --query accessToken --output tsv)
curl  -H "Authorization: Bearer $token" -H 'Content-Type: application/json' -X GET 'https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/resources?api-version=2021-04-01'
$token = (Get-AzAccessToken).Token
$headers = @{Authorization="Bearer $token"}
Invoke-WebRequest -Method GET -Headers $headers -Uri 'https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/resources?api-version=2021-04-01'
$token = (Get-AzAccessToken).Token
$headers = @{Authorization="Bearer $token"}
Invoke-WebRequest -Method GET -Headers $headers -Uri 'https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/resources?api-version=2021-04-01'
Deploy resources to an existing resource group
You can deploy Azure resources directly by using the REST API, or deploy a Resource Manager template to create Azure resources.
Deploy a resource
The following REST operation creates a storage account. To see this example in more detail, seeCreate an Azure Storage account with the REST API. Complete reference documentation and samples for the Storage Resource Provider are available in theStorage Resource Provider REST API Reference.
PUT /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}?api-version=2018-02-01 HTTP/1.1
Authorization: Bearer <bearer-token>
Content-Type: application/json
Host: management.azure.com

{
  "sku": {
    "name": "Standard_GRS"
  },
  "kind": "StorageV2",
  "location": "eastus2",
}
PUT /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}?api-version=2018-02-01 HTTP/1.1
Authorization: Bearer <bearer-token>
Content-Type: application/json
Host: management.azure.com

{
  "sku": {
    "name": "Standard_GRS"
  },
  "kind": "StorageV2",
  "location": "eastus2",
}
Deploy a template
The following operations deploy a Quickstart template to create a storage account. For more information, seeQuickstart: Create Azure Resource Manager templates by using Visual Studio Code. For the API reference of this call, seeDeployments - Create Or Update.
PUT /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/my-deployment?api-version=2021-04-01 HTTP/1.1
Authorization: Bearer <bearer-token>
Content-Type: application/json
Host: management.azure.com

{
  "properties": {
    "templateLink": {
      "uri": "https://example.com/azuretemplates/azuredeploy.json"
    },
    "parametersLink": {
        "uri": "https://example.com/azuretemplates/azuredeploy.parameters.json"
    },
    "mode": "Incremental"
  }
}
PUT /subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Resources/deployments/my-deployment?api-version=2021-04-01 HTTP/1.1
Authorization: Bearer <bearer-token>
Content-Type: application/json
Host: management.azure.com

{
  "properties": {
    "templateLink": {
      "uri": "https://example.com/azuretemplates/azuredeploy.json"
    },
    "parametersLink": {
        "uri": "https://example.com/azuretemplates/azuredeploy.parameters.json"
    },
    "mode": "Incremental"
  }
}
For the REST APIs, the value ofurican't be a local file or a file that is only available on your local network. Azure Resource Manager must access the template. Provide a URI value that is downloadable as HTTP or HTTPS.
For more information, seeDeploy resources with Resource Manager templates and Azure PowerShell.
uri
Deploy a resource group and resources
You can create a resource group and deploy resources to the group by using a template. For more information, seeCreate resource group and deploy resources.
Deploy resources to multiple subscriptions or resource groups
Typically, you deploy all the resources in your template to a single resource group. However, there are scenarios where you want to deploy a set of resources together but place them in different resource groups or subscriptions. For more information, seeDeploy Azure resources to multiple subscriptions or resource groups.
Delete resources
The following operation shows how to delete a storage account.
DELETE /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}?api-version=2022-09-01 HTTP/1.1
Authorization: Bearer <bearer-token>
Host: management.azure.com
DELETE /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}?api-version=2022-09-01 HTTP/1.1
Authorization: Bearer <bearer-token>
Host: management.azure.com
For more information about how Azure Resource Manager orders the deletion of resources, seeAzure Resource Manager resource group deletion.
Manage access to resources
Azure role-based access control (Azure RBAC)is the way that you manage access to resources in Azure. For more information, seeAdd or remove Azure role assignments using REST.
Next steps
To learn Azure Resource Manager, seeAzure Resource Manager overview.
To learn more about Azure Resource Manager's supported REST operations, seeAzure Resource Manager REST reference.
To learn the Resource Manager template syntax, seeUnderstand the structure and syntax of Azure Resource Manager templates.
To learn how to develop templates, see thestep-by-step tutorials.
To view the Azure Resource Manager template schemas, seetemplate reference.
Feedback
Was this page helpful?
Additional resources