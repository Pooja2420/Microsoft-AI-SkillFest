Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Microsoft.KubernetesConfiguration fluxConfigurations
Article
2024-12-09
2 contributors
In this article
Latest
2025-04-01
2024-11-01
Bicep resource definition
The fluxConfigurations resource type can be deployed with operations that target:
For a list of changed properties in each API version, seechange log.
Resource format
To create a Microsoft.KubernetesConfiguration/fluxConfigurations resource, add the following Bicep to your template.
resource symbolicname 'Microsoft.KubernetesConfiguration/fluxConfigurations@2025-04-01' = {
  scope: resourceSymbolicName or scope
  name: 'string'
  properties: {
    azureBlob: {
      accountKey: 'string'
      containerName: 'string'
      localAuthRef: 'string'
      managedIdentity: {
        clientId: 'string'
      }
      sasToken: 'string'
      servicePrincipal: {
        clientCertificate: 'string'
        clientCertificatePassword: 'string'
        clientCertificateSendChain: bool
        clientId: 'string'
        clientSecret: 'string'
        tenantId: 'string'
      }
      syncIntervalInSeconds: int
      timeoutInSeconds: int
      url: 'string'
    }
    bucket: {
      accessKey: 'string'
      bucketName: 'string'
      insecure: bool
      localAuthRef: 'string'
      syncIntervalInSeconds: int
      timeoutInSeconds: int
      url: 'string'
    }
    configurationProtectedSettings: {
      {customized property}: 'string'
    }
    gitRepository: {
      httpsCACert: 'string'
      httpsUser: 'string'
      localAuthRef: 'string'
      provider: 'string'
      repositoryRef: {
        branch: 'string'
        commit: 'string'
        semver: 'string'
        tag: 'string'
      }
      sshKnownHosts: 'string'
      syncIntervalInSeconds: int
      timeoutInSeconds: int
      url: 'string'
    }
    kustomizations: {
      {customized property}: {
        dependsOn: [
          'string'
        ]
        force: bool
        path: 'string'
        postBuild: {
          substitute: {
            {customized property}: 'string'
          }
          substituteFrom: [
            {
              kind: 'string'
              name: 'string'
              optional: bool
            }
          ]
        }
        prune: bool
        retryIntervalInSeconds: int
        syncIntervalInSeconds: int
        timeoutInSeconds: int
        wait: bool
      }
    }
    namespace: 'string'
    ociRepository: {
      insecure: bool
      layerSelector: {
        mediaType: 'string'
        operation: 'string'
      }
      localAuthRef: 'string'
      repositoryRef: {
        digest: 'string'
        semver: 'string'
        tag: 'string'
      }
      serviceAccountName: 'string'
      syncIntervalInSeconds: int
      timeoutInSeconds: int
      tlsConfig: {
        caCertificate: 'string'
        clientCertificate: 'string'
        privateKey: 'string'
      }
      url: 'string'
      useWorkloadIdentity: bool
      verify: {
        matchOidcIdentity: [
          {
            issuer: 'string'
            subject: 'string'
          }
        ]
        provider: 'string'
        verificationConfig: {
          {customized property}: 'string'
        }
      }
    }
    reconciliationWaitDuration: 'string'
    scope: 'string'
    sourceKind: 'string'
    suspend: bool
    waitForReconciliation: bool
  }
}
resource symbolicname 'Microsoft.KubernetesConfiguration/fluxConfigurations@2025-04-01' = {
  scope: resourceSymbolicName or scope
  name: 'string'
  properties: {
    azureBlob: {
      accountKey: 'string'
      containerName: 'string'
      localAuthRef: 'string'
      managedIdentity: {
        clientId: 'string'
      }
      sasToken: 'string'
      servicePrincipal: {
        clientCertificate: 'string'
        clientCertificatePassword: 'string'
        clientCertificateSendChain: bool
        clientId: 'string'
        clientSecret: 'string'
        tenantId: 'string'
      }
      syncIntervalInSeconds: int
      timeoutInSeconds: int
      url: 'string'
    }
    bucket: {
      accessKey: 'string'
      bucketName: 'string'
      insecure: bool
      localAuthRef: 'string'
      syncIntervalInSeconds: int
      timeoutInSeconds: int
      url: 'string'
    }
    configurationProtectedSettings: {
      {customized property}: 'string'
    }
    gitRepository: {
      httpsCACert: 'string'
      httpsUser: 'string'
      localAuthRef: 'string'
      provider: 'string'
      repositoryRef: {
        branch: 'string'
        commit: 'string'
        semver: 'string'
        tag: 'string'
      }
      sshKnownHosts: 'string'
      syncIntervalInSeconds: int
      timeoutInSeconds: int
      url: 'string'
    }
    kustomizations: {
      {customized property}: {
        dependsOn: [
          'string'
        ]
        force: bool
        path: 'string'
        postBuild: {
          substitute: {
            {customized property}: 'string'
          }
          substituteFrom: [
            {
              kind: 'string'
              name: 'string'
              optional: bool
            }
          ]
        }
        prune: bool
        retryIntervalInSeconds: int
        syncIntervalInSeconds: int
        timeoutInSeconds: int
        wait: bool
      }
    }
    namespace: 'string'
    ociRepository: {
      insecure: bool
      layerSelector: {
        mediaType: 'string'
        operation: 'string'
      }
      localAuthRef: 'string'
      repositoryRef: {
        digest: 'string'
        semver: 'string'
        tag: 'string'
      }
      serviceAccountName: 'string'
      syncIntervalInSeconds: int
      timeoutInSeconds: int
      tlsConfig: {
        caCertificate: 'string'
        clientCertificate: 'string'
        privateKey: 'string'
      }
      url: 'string'
      useWorkloadIdentity: bool
      verify: {
        matchOidcIdentity: [
          {
            issuer: 'string'
            subject: 'string'
          }
        ]
        provider: 'string'
        verificationConfig: {
          {customized property}: 'string'
        }
      }
    }
    reconciliationWaitDuration: 'string'
    scope: 'string'
    sourceKind: 'string'
    suspend: bool
    waitForReconciliation: bool
  }
}
Property Values
AzureBlobDefinition
BucketDefinition
FluxConfigurationProperties
FluxConfigurationPropertiesConfigurationProtectedSettings
FluxConfigurationPropertiesKustomizations
GitRepositoryDefinition
KustomizationDefinition
LayerSelectorDefinition
ManagedIdentityDefinition
MatchOidcIdentityDefinition
Microsoft.KubernetesConfiguration/fluxConfigurations
OCIRepositoryDefinition
OCIRepositoryRefDefinition
PostBuildDefinition
PostBuildDefinitionSubstitute
RepositoryRefDefinition
ServicePrincipalDefinition
SubstituteFromDefinition
TlsConfigDefinition
VerifyDefinition
VerifyDefinitionVerificationConfig
Usage Examples
Azure Verified Modules
The followingAzure Verified Modulescan be used to deploy this resource type.
ARM template resource definition
The fluxConfigurations resource type can be deployed with operations that target:
For a list of changed properties in each API version, seechange log.
Resource format
To create a Microsoft.KubernetesConfiguration/fluxConfigurations resource, add the following JSON to your template.
{
  "type": "Microsoft.KubernetesConfiguration/fluxConfigurations",
  "apiVersion": "2025-04-01",
  "name": "string",
  "properties": {
    "azureBlob": {
      "accountKey": "string",
      "containerName": "string",
      "localAuthRef": "string",
      "managedIdentity": {
        "clientId": "string"
      },
      "sasToken": "string",
      "servicePrincipal": {
        "clientCertificate": "string",
        "clientCertificatePassword": "string",
        "clientCertificateSendChain": "bool",
        "clientId": "string",
        "clientSecret": "string",
        "tenantId": "string"
      },
      "syncIntervalInSeconds": "int",
      "timeoutInSeconds": "int",
      "url": "string"
    },
    "bucket": {
      "accessKey": "string",
      "bucketName": "string",
      "insecure": "bool",
      "localAuthRef": "string",
      "syncIntervalInSeconds": "int",
      "timeoutInSeconds": "int",
      "url": "string"
    },
    "configurationProtectedSettings": {
      "{customized property}": "string"
    },
    "gitRepository": {
      "httpsCACert": "string",
      "httpsUser": "string",
      "localAuthRef": "string",
      "provider": "string",
      "repositoryRef": {
        "branch": "string",
        "commit": "string",
        "semver": "string",
        "tag": "string"
      },
      "sshKnownHosts": "string",
      "syncIntervalInSeconds": "int",
      "timeoutInSeconds": "int",
      "url": "string"
    },
    "kustomizations": {
      "{customized property}": {
        "dependsOn": [ "string" ],
        "force": "bool",
        "path": "string",
        "postBuild": {
          "substitute": {
            "{customized property}": "string"
          },
          "substituteFrom": [
            {
              "kind": "string",
              "name": "string",
              "optional": "bool"
            }
          ]
        },
        "prune": "bool",
        "retryIntervalInSeconds": "int",
        "syncIntervalInSeconds": "int",
        "timeoutInSeconds": "int",
        "wait": "bool"
      }
    },
    "namespace": "string",
    "ociRepository": {
      "insecure": "bool",
      "layerSelector": {
        "mediaType": "string",
        "operation": "string"
      },
      "localAuthRef": "string",
      "repositoryRef": {
        "digest": "string",
        "semver": "string",
        "tag": "string"
      },
      "serviceAccountName": "string",
      "syncIntervalInSeconds": "int",
      "timeoutInSeconds": "int",
      "tlsConfig": {
        "caCertificate": "string",
        "clientCertificate": "string",
        "privateKey": "string"
      },
      "url": "string",
      "useWorkloadIdentity": "bool",
      "verify": {
        "matchOidcIdentity": [
          {
            "issuer": "string",
            "subject": "string"
          }
        ],
        "provider": "string",
        "verificationConfig": {
          "{customized property}": "string"
        }
      }
    },
    "reconciliationWaitDuration": "string",
    "scope": "string",
    "sourceKind": "string",
    "suspend": "bool",
    "waitForReconciliation": "bool"
  }
}
{
  "type": "Microsoft.KubernetesConfiguration/fluxConfigurations",
  "apiVersion": "2025-04-01",
  "name": "string",
  "properties": {
    "azureBlob": {
      "accountKey": "string",
      "containerName": "string",
      "localAuthRef": "string",
      "managedIdentity": {
        "clientId": "string"
      },
      "sasToken": "string",
      "servicePrincipal": {
        "clientCertificate": "string",
        "clientCertificatePassword": "string",
        "clientCertificateSendChain": "bool",
        "clientId": "string",
        "clientSecret": "string",
        "tenantId": "string"
      },
      "syncIntervalInSeconds": "int",
      "timeoutInSeconds": "int",
      "url": "string"
    },
    "bucket": {
      "accessKey": "string",
      "bucketName": "string",
      "insecure": "bool",
      "localAuthRef": "string",
      "syncIntervalInSeconds": "int",
      "timeoutInSeconds": "int",
      "url": "string"
    },
    "configurationProtectedSettings": {
      "{customized property}": "string"
    },
    "gitRepository": {
      "httpsCACert": "string",
      "httpsUser": "string",
      "localAuthRef": "string",
      "provider": "string",
      "repositoryRef": {
        "branch": "string",
        "commit": "string",
        "semver": "string",
        "tag": "string"
      },
      "sshKnownHosts": "string",
      "syncIntervalInSeconds": "int",
      "timeoutInSeconds": "int",
      "url": "string"
    },
    "kustomizations": {
      "{customized property}": {
        "dependsOn": [ "string" ],
        "force": "bool",
        "path": "string",
        "postBuild": {
          "substitute": {
            "{customized property}": "string"
          },
          "substituteFrom": [
            {
              "kind": "string",
              "name": "string",
              "optional": "bool"
            }
          ]
        },
        "prune": "bool",
        "retryIntervalInSeconds": "int",
        "syncIntervalInSeconds": "int",
        "timeoutInSeconds": "int",
        "wait": "bool"
      }
    },
    "namespace": "string",
    "ociRepository": {
      "insecure": "bool",
      "layerSelector": {
        "mediaType": "string",
        "operation": "string"
      },
      "localAuthRef": "string",
      "repositoryRef": {
        "digest": "string",
        "semver": "string",
        "tag": "string"
      },
      "serviceAccountName": "string",
      "syncIntervalInSeconds": "int",
      "timeoutInSeconds": "int",
      "tlsConfig": {
        "caCertificate": "string",
        "clientCertificate": "string",
        "privateKey": "string"
      },
      "url": "string",
      "useWorkloadIdentity": "bool",
      "verify": {
        "matchOidcIdentity": [
          {
            "issuer": "string",
            "subject": "string"
          }
        ],
        "provider": "string",
        "verificationConfig": {
          "{customized property}": "string"
        }
      }
    },
    "reconciliationWaitDuration": "string",
    "scope": "string",
    "sourceKind": "string",
    "suspend": "bool",
    "waitForReconciliation": "bool"
  }
}
Property Values
AzureBlobDefinition
BucketDefinition
FluxConfigurationProperties
FluxConfigurationPropertiesConfigurationProtectedSettings
FluxConfigurationPropertiesKustomizations
GitRepositoryDefinition
KustomizationDefinition
LayerSelectorDefinition
ManagedIdentityDefinition
MatchOidcIdentityDefinition
Microsoft.KubernetesConfiguration/fluxConfigurations
OCIRepositoryDefinition
OCIRepositoryRefDefinition
PostBuildDefinition
PostBuildDefinitionSubstitute
RepositoryRefDefinition
ServicePrincipalDefinition
SubstituteFromDefinition
TlsConfigDefinition
VerifyDefinition
VerifyDefinitionVerificationConfig
Usage Examples
Terraform (AzAPI provider) resource definition
The fluxConfigurations resource type can be deployed with operations that target:
For a list of changed properties in each API version, seechange log.
Resource format
To create a Microsoft.KubernetesConfiguration/fluxConfigurations resource, add the following Terraform to your template.
resource "azapi_resource" "symbolicname" {
  type = "Microsoft.KubernetesConfiguration/fluxConfigurations@2025-04-01"
  name = "string"
  parent_id = "string"
  body = {
    properties = {
      azureBlob = {
        accountKey = "string"
        containerName = "string"
        localAuthRef = "string"
        managedIdentity = {
          clientId = "string"
        }
        sasToken = "string"
        servicePrincipal = {
          clientCertificate = "string"
          clientCertificatePassword = "string"
          clientCertificateSendChain = bool
          clientId = "string"
          clientSecret = "string"
          tenantId = "string"
        }
        syncIntervalInSeconds = int
        timeoutInSeconds = int
        url = "string"
      }
      bucket = {
        accessKey = "string"
        bucketName = "string"
        insecure = bool
        localAuthRef = "string"
        syncIntervalInSeconds = int
        timeoutInSeconds = int
        url = "string"
      }
      configurationProtectedSettings = {
        {customized property} = "string"
      }
      gitRepository = {
        httpsCACert = "string"
        httpsUser = "string"
        localAuthRef = "string"
        provider = "string"
        repositoryRef = {
          branch = "string"
          commit = "string"
          semver = "string"
          tag = "string"
        }
        sshKnownHosts = "string"
        syncIntervalInSeconds = int
        timeoutInSeconds = int
        url = "string"
      }
      kustomizations = {
        {customized property} = {
          dependsOn = [
            "string"
          ]
          force = bool
          path = "string"
          postBuild = {
            substitute = {
              {customized property} = "string"
            }
            substituteFrom = [
              {
                kind = "string"
                name = "string"
                optional = bool
              }
            ]
          }
          prune = bool
          retryIntervalInSeconds = int
          syncIntervalInSeconds = int
          timeoutInSeconds = int
          wait = bool
        }
      }
      namespace = "string"
      ociRepository = {
        insecure = bool
        layerSelector = {
          mediaType = "string"
          operation = "string"
        }
        localAuthRef = "string"
        repositoryRef = {
          digest = "string"
          semver = "string"
          tag = "string"
        }
        serviceAccountName = "string"
        syncIntervalInSeconds = int
        timeoutInSeconds = int
        tlsConfig = {
          caCertificate = "string"
          clientCertificate = "string"
          privateKey = "string"
        }
        url = "string"
        useWorkloadIdentity = bool
        verify = {
          matchOidcIdentity = [
            {
              issuer = "string"
              subject = "string"
            }
          ]
          provider = "string"
          verificationConfig = {
            {customized property} = "string"
          }
        }
      }
      reconciliationWaitDuration = "string"
      scope = "string"
      sourceKind = "string"
      suspend = bool
      waitForReconciliation = bool
    }
  }
}
resource "azapi_resource" "symbolicname" {
  type = "Microsoft.KubernetesConfiguration/fluxConfigurations@2025-04-01"
  name = "string"
  parent_id = "string"
  body = {
    properties = {
      azureBlob = {
        accountKey = "string"
        containerName = "string"
        localAuthRef = "string"
        managedIdentity = {
          clientId = "string"
        }
        sasToken = "string"
        servicePrincipal = {
          clientCertificate = "string"
          clientCertificatePassword = "string"
          clientCertificateSendChain = bool
          clientId = "string"
          clientSecret = "string"
          tenantId = "string"
        }
        syncIntervalInSeconds = int
        timeoutInSeconds = int
        url = "string"
      }
      bucket = {
        accessKey = "string"
        bucketName = "string"
        insecure = bool
        localAuthRef = "string"
        syncIntervalInSeconds = int
        timeoutInSeconds = int
        url = "string"
      }
      configurationProtectedSettings = {
        {customized property} = "string"
      }
      gitRepository = {
        httpsCACert = "string"
        httpsUser = "string"
        localAuthRef = "string"
        provider = "string"
        repositoryRef = {
          branch = "string"
          commit = "string"
          semver = "string"
          tag = "string"
        }
        sshKnownHosts = "string"
        syncIntervalInSeconds = int
        timeoutInSeconds = int
        url = "string"
      }
      kustomizations = {
        {customized property} = {
          dependsOn = [
            "string"
          ]
          force = bool
          path = "string"
          postBuild = {
            substitute = {
              {customized property} = "string"
            }
            substituteFrom = [
              {
                kind = "string"
                name = "string"
                optional = bool
              }
            ]
          }
          prune = bool
          retryIntervalInSeconds = int
          syncIntervalInSeconds = int
          timeoutInSeconds = int
          wait = bool
        }
      }
      namespace = "string"
      ociRepository = {
        insecure = bool
        layerSelector = {
          mediaType = "string"
          operation = "string"
        }
        localAuthRef = "string"
        repositoryRef = {
          digest = "string"
          semver = "string"
          tag = "string"
        }
        serviceAccountName = "string"
        syncIntervalInSeconds = int
        timeoutInSeconds = int
        tlsConfig = {
          caCertificate = "string"
          clientCertificate = "string"
          privateKey = "string"
        }
        url = "string"
        useWorkloadIdentity = bool
        verify = {
          matchOidcIdentity = [
            {
              issuer = "string"
              subject = "string"
            }
          ]
          provider = "string"
          verificationConfig = {
            {customized property} = "string"
          }
        }
      }
      reconciliationWaitDuration = "string"
      scope = "string"
      sourceKind = "string"
      suspend = bool
      waitForReconciliation = bool
    }
  }
}
Property Values
AzureBlobDefinition
BucketDefinition
FluxConfigurationProperties
FluxConfigurationPropertiesConfigurationProtectedSettings
FluxConfigurationPropertiesKustomizations
GitRepositoryDefinition
KustomizationDefinition
LayerSelectorDefinition
ManagedIdentityDefinition
MatchOidcIdentityDefinition
Microsoft.KubernetesConfiguration/fluxConfigurations
OCIRepositoryDefinition
OCIRepositoryRefDefinition
PostBuildDefinition
PostBuildDefinitionSubstitute
RepositoryRefDefinition
ServicePrincipalDefinition
SubstituteFromDefinition
TlsConfigDefinition
VerifyDefinition
VerifyDefinitionVerificationConfig
Feedback
Was this page helpful?
Additional resources