Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Discover and register your Spring Boot applications
Article
2025-01-31
3 contributors
In this article
Note
TheBasic,Standard, andEnterpriseplans entered a retirement period on March 17, 2025. For more information, see theAzure Spring Apps retirement announcement.
TheStandard consumption and dedicatedplan entered a retirement period on September 30, 2024, with a complete shutdown by the end of March 2025. For more information, seeMigrate Azure Spring Apps Standard consumption and dedicated plan to Azure Container Apps.
This article applies to:â Standard consumption and dedicated (Preview) â Basic/Standard â Enterprise
This article shows you how to register your application using Spring Cloud Service Registry.
Service registration and discovery are key requirements for maintaining a list of live app instances to call, and routing and load balancing inbound requests. Configuring each client manually takes time and introduces the possibility of human error. Azure Spring Apps provides two options for you to solve this problem:
Note
To use service registry in the Standard consumption and dedicated plan, you must enable it first. For more information, seeEnable and disable Eureka Server in Azure Spring Apps.
Use Kubernetes Service Discovery approach to invoke calls among your apps.Azure Spring Apps creates a corresponding Kubernetes service for every app running in it using the app name as the Kubernetes service name. You can invoke calls from one app to another app by using the app name in an HTTP/HTTPS request such ashttp(s)://{app name}/path. This approach is also suitable for the Enterprise plan. For more information, see theKubernetes registry code sample.NoteThis approach isn't suitable for Standard consumption and dedicated (Preview).
Use Kubernetes Service Discovery approach to invoke calls among your apps.
Azure Spring Apps creates a corresponding Kubernetes service for every app running in it using the app name as the Kubernetes service name. You can invoke calls from one app to another app by using the app name in an HTTP/HTTPS request such ashttp(s)://{app name}/path. This approach is also suitable for the Enterprise plan. For more information, see theKubernetes registry code sample.
http(s)://{app name}/path
Note
This approach isn't suitable for Standard consumption and dedicated (Preview).
Use Managed Spring Cloud Service Registry (OSS) in Azure Spring Apps.After configuration, a Service Registry server will control service registration and discovery for your applications. The Service Registry server maintains a registry of live app instances, enables client-side load-balancing, and decouples service providers from clients without relying on DNS.
Use Managed Spring Cloud Service Registry (OSS) in Azure Spring Apps.
After configuration, a Service Registry server will control service registration and discovery for your applications. The Service Registry server maintains a registry of live app instances, enables client-side load-balancing, and decouples service providers from clients without relying on DNS.
For information about how to set up service registration for a Steeltoe app, seePrepare a Java Spring application for deployment in Azure Spring Apps.
Register your application using Spring Cloud Service Registry
Before your application can manage service registration and discovery using Spring Cloud Service Registry, you must include the following dependency forspring-cloud-starter-netflix-eureka-clientin yourpom.xmlfile:
spring-cloud-starter-netflix-eureka-client
<dependency>
    <groupId>org.springframework.cloud</groupId>
    <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
</dependency>
<dependency>
    <groupId>org.springframework.cloud</groupId>
    <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
</dependency>
Update the top level class
Finally, add an annotation to the top level class of your application, as shown in the following example:
package foo.bar;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.netflix.eureka.EnableEurekaClient;

@SpringBootApplication
@EnableEurekaClient
public class DemoApplication {

    public static void main(String[] args) {
        SpringApplication.run(DemoApplication.class, args);
    }
}
package foo.bar;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.netflix.eureka.EnableEurekaClient;

@SpringBootApplication
@EnableEurekaClient
public class DemoApplication {

    public static void main(String[] args) {
        SpringApplication.run(DemoApplication.class, args);
    }
}
The Spring Cloud Service Registry server endpoint is injected as an environment variable in your application. Applications can register themselves with the Service Registry server and discover other dependent applications.
Note
It can take a few minutes for the changes to propagate from the server to all applications.
Next steps
In this article, you learned how to register your application using Spring Cloud Service Registry. To learn how to access the Spring Cloud Service Registry using Microsoft Entra role-based access control (RBAC), seeAccess Config Server and Service Registry.
Feedback
Was this page helpful?
Additional resources