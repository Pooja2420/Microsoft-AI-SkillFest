Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Manage Azure resource groups by using Azure PowerShell
Article
2025-02-10
7 contributors
In this article
Learn how to use Azure PowerShell withAzure Resource Managerto manage your Azure resource groups.
Prerequisites
Azure PowerShell. For more information, seeInstall the Azure Az PowerShell module.
Azure PowerShell. For more information, seeInstall the Azure Az PowerShell module.
An authenticated account. After installing Azure PowerShell, sign in for the first time. For more information, seeSign in.
An authenticated account. After installing Azure PowerShell, sign in for the first time. For more information, seeSign in.
What is a resource group
A resource group is a container that holds related resources for an Azure solution. The resource group can include all the resources for the solution, or only those resources that you want to manage as a group. You decide how to add resources to resource groups based on what makes the most sense for your organization. Generally, add resources that share the same lifecycle to the same resource group so you can easily deploy, update, and delete them as a group.
The resource group stores metadata about the resources. When you specify a location for the resource group, you're specifying where that metadata is stored. For compliance reasons, you might need to ensure that your data is stored in a particular region.
Create resource groups
To create a resource group, useNew-AzResourceGroup.
New-AzResourceGroup -Name exampleGroup -Location westus
New-AzResourceGroup -Name exampleGroup -Location westus
List resource groups
To list the resource groups in your subscription, useGet-AzResourceGroup.
Get-AzResourceGroup
Get-AzResourceGroup
To get one resource group, provide the name of the resource group.
Get-AzResourceGroup -Name exampleGroup
Get-AzResourceGroup -Name exampleGroup
Delete resource groups
To delete a resource group, useRemove-AzResourceGroup.
Remove-AzResourceGroup -Name exampleGroup
Remove-AzResourceGroup -Name exampleGroup
For more information about how Azure Resource Manager orders the deletion of resources, seeAzure Resource Manager resource group deletion.
Deploy resources
You can deploy Azure resources by using Azure PowerShell, or by deploying an Azure Resource Manager (ARM) template or Bicep file.
Deploy resources by using storage operations
The following example creates a storage account. The name you provide for the storage account must be unique across Azure.
New-AzStorageAccount -ResourceGroupName exampleGroup -Name examplestore -Location westus -SkuName "Standard_LRS"
New-AzStorageAccount -ResourceGroupName exampleGroup -Name examplestore -Location westus -SkuName "Standard_LRS"
Deploy resources by using an ARM template or Bicep file
To deploy an ARM template or Bicep file, useNew-AzResourceGroupDeployment.
New-AzResourceGroupDeployment -ResourceGroupName exampleGroup -TemplateFile storage.bicep
New-AzResourceGroupDeployment -ResourceGroupName exampleGroup -TemplateFile storage.bicep
The following example shows the Bicep file namedstorage.bicepthat you're deploying:
storage.bicep
@minLength(3)
@maxLength(11)
param storagePrefix string

var uniqueStorageName = concat(storagePrefix, uniqueString(resourceGroup().id))

resource uniqueStorage 'Microsoft.Storage/storageAccounts@2022-09-01' = {
  name: uniqueStorageName
  location: 'eastus'
  sku: {
    name: 'Standard_LRS'
  }
  kind: 'StorageV2'
  properties: {
    supportsHttpsTrafficOnly: true
  }
}
@minLength(3)
@maxLength(11)
param storagePrefix string

var uniqueStorageName = concat(storagePrefix, uniqueString(resourceGroup().id))

resource uniqueStorage 'Microsoft.Storage/storageAccounts@2022-09-01' = {
  name: uniqueStorageName
  location: 'eastus'
  sku: {
    name: 'Standard_LRS'
  }
  kind: 'StorageV2'
  properties: {
    supportsHttpsTrafficOnly: true
  }
}
For more information about deploying an ARM template, seeDeploy resources with ARM templates and Azure PowerShell.
For more information about deploying a Bicep file, seeDeploy resources with Bicep and Azure PowerShell.
Lock resource groups
Locking prevents other users in your organization from accidentally deleting or modifying critical resources.
To prevent a resource group and its resources from being deleted, useNew-AzResourceLock.
New-AzResourceLock -LockName LockGroup -LockLevel CanNotDelete -ResourceGroupName exampleGroup
New-AzResourceLock -LockName LockGroup -LockLevel CanNotDelete -ResourceGroupName exampleGroup
To get the locks for a resource group, useGet-AzResourceLock.
Get-AzResourceLock -ResourceGroupName exampleGroup
Get-AzResourceLock -ResourceGroupName exampleGroup
To delete a lock, useRemove-AzResourceLock.
$lockId = (Get-AzResourceLock -ResourceGroupName exampleGroup).LockId
Remove-AzResourceLock -LockId $lockId
$lockId = (Get-AzResourceLock -ResourceGroupName exampleGroup).LockId
Remove-AzResourceLock -LockId $lockId
For more information, seeLock resources with Azure Resource Manager.
Tag resource groups
To logically organize your assets, you can apply tags to resource groups and resources. For more information, seeUsing tags to organize your Azure resources.
Export resource groups to templates
To assist with creating ARM templates, you can export a template from existing resources. For more information, seeUse Azure PowerShell to export a template.
Manage access to resource groups
Azure role-based access control (Azure RBAC)is the way that you manage access to resources in Azure. For more information, seeAdd or remove Azure role assignments using Azure PowerShell.
Next steps
To manage Azure resources, seeManage Azure resources by using Azure PowerShell.
To learn Azure Resource Manager, seeAzure Resource Manager overview.
To learn the Resource Manager template syntax, seeUnderstand the structure and syntax of Azure Resource Manager templates.
Feedback
Was this page helpful?
Additional resources