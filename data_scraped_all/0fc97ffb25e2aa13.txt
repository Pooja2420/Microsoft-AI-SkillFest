Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Quickstart: Azure Queue Storage client library for .NET
Article
2023-06-29
11 contributors
In this article
Get started with the Azure Queue Storage client library for .NET. Azure Queue Storage is a service for storing large numbers of messages for later retrieval and processing. Follow these steps to install the package and try out example code for basic tasks.
API reference documentation|Library source code|Package (NuGet)|Samples
Use the Azure Queue Storage client library for .NET to:
Create a queue
Add messages to a queue
Peek at messages in a queue
Update a message in a queue
Get the queue length
Receive messages from a queue
Delete messages from a queue
Delete a queue
Prerequisites
Azure subscription -create one for free
Azure Storage account -create a storage account
Current.NET SDKfor your operating system. Be sure to get the SDK and not the runtime.
Setting up
This section walks you through preparing a project to work with the Azure Queue Storage client library for .NET.
Create the project
Create a .NET application namedQueuesQuickstart.
QueuesQuickstart
In a console window (such as cmd, PowerShell, or Bash), use thedotnet newcommand to create a new console app with the nameQueuesQuickstart. This command creates a simple "hello world" C# project with a single source file namedProgram.cs.dotnet new console -n QueuesQuickstart
In a console window (such as cmd, PowerShell, or Bash), use thedotnet newcommand to create a new console app with the nameQueuesQuickstart. This command creates a simple "hello world" C# project with a single source file namedProgram.cs.
dotnet new
QueuesQuickstart
dotnet new console -n QueuesQuickstart
dotnet new console -n QueuesQuickstart
Switch to the newly createdQueuesQuickstartdirectory.cd QueuesQuickstart
Switch to the newly createdQueuesQuickstartdirectory.
QueuesQuickstart
cd QueuesQuickstart
cd QueuesQuickstart
Install the packages
While still in the application directory, install the Azure Queue Storage client library for .NET package by using thedotnet add packagecommand.
dotnet add package
dotnet add package Azure.Storage.Queues
dotnet add package Azure.Storage.Queues
The Azure Identity client library package is also needed for passwordless connections to Azure services.
dotnet add package Azure.Identity
dotnet add package Azure.Identity
Set up the app framework
Open the project in your editor of choice
Open theProgram.csfile
Update the existing code to match the following:
using Azure;
using Azure.Identity;
using Azure.Storage.Queues;
using Azure.Storage.Queues.Models;
using System;
using System.Threading.Tasks;

Console.WriteLine("Azure Queue Storage client library - .NET quickstart sample");

// Quickstart code goes here
using Azure;
using Azure.Identity;
using Azure.Storage.Queues;
using Azure.Storage.Queues.Models;
using System;
using System.Threading.Tasks;

Console.WriteLine("Azure Queue Storage client library - .NET quickstart sample");

// Quickstart code goes here
Authenticate to Azure
Application requests to most Azure services must be authorized. Using theDefaultAzureCredentialclass provided by the Azure Identity client library is the recommended approach for implementing passwordless connections to Azure services in your code.
DefaultAzureCredential
You can also authorize requests to Azure services using passwords, connection strings, or other credentials directly. However, this approach should be used with caution. Developers must be diligent to never expose these secrets in an unsecure location. Anyone who gains access to the password or secret key is able to authenticate.DefaultAzureCredentialoffers improved management and security benefits over the account key to allow passwordless authentication. Both options are demonstrated in the following example.
DefaultAzureCredential
Passwordless (Recommended)
Connection String
DefaultAzureCredentialis a class provided by the Azure Identity client library for .NET. To learn more aboutDefaultAzureCredential, see theDefaultAzureCredential overview.DefaultAzureCredentialsupports multiple authentication methods and determines which method should be used at runtime. This approach enables your app to use different authentication methods in different environments (local vs. production) without implementing environment-specific code.
DefaultAzureCredential
DefaultAzureCredential
DefaultAzureCredential
For example, your app can authenticate using your Visual Studio sign-in credentials when developing locally, and then use amanaged identityonce it has been deployed to Azure. No code changes are required for this transition.
When developing locally, make sure that the user account that is accessing the queue data has the correct permissions. You'll needStorage Queue Data Contributorto read and write queue data. To assign yourself this role, you'll need to be assigned theUser Access Administratorrole, or another role that includes theMicrosoft.Authorization/roleAssignments/writeaction. You can assign Azure RBAC roles to a user using the Azure portal, Azure CLI, or Azure PowerShell. You can learn more about the available scopes for role assignments on thescope overviewpage.
In this scenario, you'll assign permissions to your user account, scoped to the storage account, to follow thePrinciple of Least Privilege. This practice gives users only the minimum permissions needed and creates more secure production environments.
The following example will assign theStorage Queue Data Contributorrole to your user account, which provides both read and write access to queue data in your storage account.
Important
In most cases it will take a minute or two for the role assignment to propagate in Azure, but in rare cases it may take up to eight minutes. If you receive authentication errors when you first run your code, wait a few moments and try again.
Azure portal
Azure CLI
PowerShell
In the Azure portal, locate your storage account using the main search bar or left navigation.
In the Azure portal, locate your storage account using the main search bar or left navigation.
On the storage account overview page, selectAccess control (IAM)from the left-hand menu.
On the storage account overview page, selectAccess control (IAM)from the left-hand menu.
On theAccess control (IAM)page, select theRole assignmentstab.
On theAccess control (IAM)page, select theRole assignmentstab.
Select+ Addfrom the top menu and thenAdd role assignmentfrom the resulting drop-down menu.
Select+ Addfrom the top menu and thenAdd role assignmentfrom the resulting drop-down menu.

Use the search box to filter the results to the desired role. For this example, search forStorage Queue Data Contributorand select the matching result and then chooseNext.
Use the search box to filter the results to the desired role. For this example, search forStorage Queue Data Contributorand select the matching result and then chooseNext.
UnderAssign access to, selectUser, group, or service principal, and then choose+ Select members.
UnderAssign access to, selectUser, group, or service principal, and then choose+ Select members.
In the dialog, search for your Microsoft Entra username (usually youruser@domainemail address) and then chooseSelectat the bottom of the dialog.
In the dialog, search for your Microsoft Entra username (usually youruser@domainemail address) and then chooseSelectat the bottom of the dialog.
SelectReview + assignto go to the final page, and thenReview + assignagain to complete the process.
SelectReview + assignto go to the final page, and thenReview + assignagain to complete the process.
To assign a role at the resource level using the Azure CLI, you first must retrieve the resource id using theaz storage account showcommand. You can filter the output properties using the--queryparameter.
az storage account show
--query
az storage account show --resource-group '<your-resource-group-name>' --name '<your-storage-account-name>' --query id
az storage account show --resource-group '<your-resource-group-name>' --name '<your-storage-account-name>' --query id
Copy the outputIdfrom the preceding command. You can then assign roles using theaz rolecommand of the Azure CLI.
Id
az role assignment create --assignee "<user@domain>" \
    --role "Storage Queue Data Contributor" \
    --scope "<your-resource-id>"
az role assignment create --assignee "<user@domain>" \
    --role "Storage Queue Data Contributor" \
    --scope "<your-resource-id>"
To assign a role at the resource level using Azure PowerShell, you first must retrieve the resource ID using theGet-AzResourcecommand.
Get-AzResource
Get-AzResource -ResourceGroupName "<yourResourceGroupname>" -Name "<yourStorageAccountName>"
Get-AzResource -ResourceGroupName "<yourResourceGroupname>" -Name "<yourStorageAccountName>"
Copy theIdvalue from the preceding command output. You can then assign roles using theNew-AzRoleAssignmentcommand in PowerShell.
Id
New-AzRoleAssignment -SignInName <user@domain> `
    -RoleDefinitionName "Storage Queue Data Contributor" `
    -Scope <yourStorageAccountId>
New-AzRoleAssignment -SignInName <user@domain> `
    -RoleDefinitionName "Storage Queue Data Contributor" `
    -Scope <yourStorageAccountId>
Copy your credentials from the Azure portal
When the sample application makes a request to Azure Storage, it must be authorized. To authorize a request, add your storage account credentials to the application as a connection string. To view your storage account credentials, follow these steps:
Sign in to theAzure portal.
Sign in to theAzure portal.
Locate your storage account.
Locate your storage account.
In the storage account menu pane, underSecurity + networking, selectAccess keys. Here, you can view the account access keys and the complete connection string for each key.
In the storage account menu pane, underSecurity + networking, selectAccess keys. Here, you can view the account access keys and the complete connection string for each key.

In theAccess keyspane, selectShow keys.
In theAccess keyspane, selectShow keys.
In thekey1section, locate theConnection stringvalue. Select theCopy to clipboardicon to copy the connection string. You'll add the connection string value to an environment variable in the next section.
In thekey1section, locate theConnection stringvalue. Select theCopy to clipboardicon to copy the connection string. You'll add the connection string value to an environment variable in the next section.

Configure your storage connection string
After you copy the connection string, write it to a new environment variable on the local machine running the application. To set the environment variable, open a console window, and follow the instructions for your operating system. Replace<yourconnectionstring>with your actual connection string.
<yourconnectionstring>
Windows
Linux and macOS
setx AZURE_STORAGE_CONNECTION_STRING "<yourconnectionstring>"
setx AZURE_STORAGE_CONNECTION_STRING "<yourconnectionstring>"
export AZURE_STORAGE_CONNECTION_STRING="<yourconnectionstring>"
export AZURE_STORAGE_CONNECTION_STRING="<yourconnectionstring>"
After you add the environment variable in Windows, you must start a new instance of the command window.
After you add the environment variable, restart any running programs that will need to read the environment variable. For example, restart your development environment or editor before you continue.
Important
The account access key should be used with caution. If your account access key is lost or accidentally placed in an insecure location, your service may become vulnerable. Anyone who has the access key is able to authorize requests against the storage account, and effectively has access to all the data.DefaultAzureCredentialprovides enhanced security features and benefits and is the recommended approach for managing authorization to Azure services.
DefaultAzureCredential
Object model
Azure Queue Storage is a service for storing large numbers of messages. A queue message can be up to 64 KB in size. A queue may contain millions of messages, up to the total capacity limit of a storage account. Queues are commonly used to create a backlog of work to process asynchronously. Queue Storage offers three types of resources:
Storage account: All access to Azure Storage is done through a storage account. For more information about storage accounts, seeStorage account overview
Queue: A queue contains a set of messages. All messages must be in a queue. Note that the queue name must be all lowercase. For information on naming queues, seeNaming Queues and Metadata.
Message: A message, in any format, of up to 64 KB. A message can remain in the queue for a maximum of 7 days. For version 2017-07-29 or later, the maximum time-to-live can be any positive number, or -1 indicating that the message doesn't expire. If this parameter is omitted, the default time-to-live is seven days.
The following diagram shows the relationship between these resources.

Use the following .NET classes to interact with these resources:
QueueServiceClient: TheQueueServiceClientallows you to manage the all queues in your storage account.
QueueServiceClient
QueueServiceClient
QueueClient: TheQueueClientclass allows you to manage and manipulate an individual queue and its messages.
QueueClient
QueueClient
QueueMessage: TheQueueMessageclass represents the individual objects returned when callingReceiveMessageson a queue.
QueueMessage
QueueMessage
ReceiveMessages
Code examples
These example code snippets show you how to perform the following actions with the Azure Queue Storage client library for .NET:
Authorize access and create a client object
Create a queue
Add messages to a queue
Peek at messages in a queue
Update a message in a queue
Get the queue length
Receive messages from a queue
Delete messages from a queue
Delete a queue
Passwordless (Recommended)
Connection String
Authorize access and create a client object
For local development, make sure you're authenticated with the same Microsoft Entra account you assigned the role to. You can authenticate via popular development tools, such as the Azure CLI or Azure PowerShell. The development tools with which you can authenticate vary across languages.
Azure CLI
Visual Studio
Visual Studio Code
PowerShell
Sign-in to Azure through the Azure CLI using the following command:
az login
az login
Select theSign inbutton in the top right of Visual Studio.

Sign-in using the Microsoft Entra account you assigned a role to previously.

You will need toinstall the Azure CLIto work withDefaultAzureCredentialthrough Visual Studio Code.
DefaultAzureCredential
On the main menu of Visual Studio Code, navigate toTerminal > New Terminal.
Sign-in to Azure through the Azure CLI using the following command:
az login
az login
Sign-in to Azure using PowerShell via the following command:
Connect-AzAccount
Connect-AzAccount
Once authenticated, you can create and authorize aQueueClientobject usingDefaultAzureCredentialto access queue data in the storage account.DefaultAzureCredentialautomatically discovers and uses the account you signed in with in the previous step.
QueueClient
DefaultAzureCredential
DefaultAzureCredential
To authorize usingDefaultAzureCredential, make sure you've added theAzure.Identitypackage, as described inInstall the packages. Also, be sure to add a using directive for theAzure.Identitynamespace in theProgram.csfile:
DefaultAzureCredential
Azure.Identity
using Azure.Identity;
using Azure.Identity;
Next, decide on a name for the queue and create an instance of theQueueClientclass, usingDefaultAzureCredentialfor authorization. We use this client object to create and interact with the queue resource in the storage account.
QueueClient
DefaultAzureCredential
Important
Queue names may only contain lowercase letters, numbers, and hyphens, and must begin with a letter or a number. Each hyphen must be preceded and followed by a non-hyphen character. The name must also be between 3 and 63 characters long. For more information, seeNaming queues and metadata.
Add the following code to the end of theProgram.csfile. Make sure to replace the<storage-account-name>placeholder value:
<storage-account-name>
// Create a unique name for the queue
// TODO: Replace the <storage-account-name> placeholder 
string queueName = "quickstartqueues-" + Guid.NewGuid().ToString();
string storageAccountName = "<storage-account-name>";

// Instantiate a QueueClient to create and interact with the queue
QueueClient queueClient = new QueueClient(
    new Uri($"https://{storageAccountName}.queue.core.windows.net/{queueName}"),
    new DefaultAzureCredential());
// Create a unique name for the queue
// TODO: Replace the <storage-account-name> placeholder 
string queueName = "quickstartqueues-" + Guid.NewGuid().ToString();
string storageAccountName = "<storage-account-name>";

// Instantiate a QueueClient to create and interact with the queue
QueueClient queueClient = new QueueClient(
    new Uri($"https://{storageAccountName}.queue.core.windows.net/{queueName}"),
    new DefaultAzureCredential());
Get the connection string and create a client
The following code retrieves the connection string for the storage account. The connection string is stored in the environment variable created in theConfigure your storage connection stringsection.
Add this code to the end of theProgram.csfile:
// Retrieve the connection string for use with the application. The storage
// connection string is stored in an environment variable called
// AZURE_STORAGE_CONNECTION_STRING on the machine running the application.
// If the environment variable is created after the application is launched
// in a console or with Visual Studio, the shell or application needs to be
// closed and reloaded to take the environment variable into account.
string connectionString = Environment.GetEnvironmentVariable("AZURE_STORAGE_CONNECTION_STRING");
// Retrieve the connection string for use with the application. The storage
// connection string is stored in an environment variable called
// AZURE_STORAGE_CONNECTION_STRING on the machine running the application.
// If the environment variable is created after the application is launched
// in a console or with Visual Studio, the shell or application needs to be
// closed and reloaded to take the environment variable into account.
string connectionString = Environment.GetEnvironmentVariable("AZURE_STORAGE_CONNECTION_STRING");
Decide on a name for the queue and create an instance of theQueueClientclass, using the connection string for authorization. We use this client object to create and interact with the queue resource in the storage account.
QueueClient
Important
Queue names may only contain lowercase letters, numbers, and hyphens, and must begin with a letter or a number. Each hyphen must be preceded and followed by a non-hyphen character. The name must also be between 3 and 63 characters long. For more information, seeNaming queues and metadata.
Add this code to the end of theProgram.csfile:
// Create a unique name for the queue
string queueName = "quickstartqueues-" + Guid.NewGuid().ToString();

// Instantiate a QueueClient to create and interact with the queue
QueueClient queueClient = new QueueClient(connectionString, queueName);
// Create a unique name for the queue
string queueName = "quickstartqueues-" + Guid.NewGuid().ToString();

// Instantiate a QueueClient to create and interact with the queue
QueueClient queueClient = new QueueClient(connectionString, queueName);
Note
Messages sent using theQueueClientclass must be in a format that can be included in an XML request with UTF-8 encoding. You can optionally set theMessageEncodingoption toBase64to handle non-compliant messages.
QueueClient
Create a queue
Using theQueueClientobject, call theCreateAsyncmethod to create the queue in your storage account.
QueueClient
CreateAsync
Add this code to the end of theProgram.csmethod:
Console.WriteLine($"Creating queue: {queueName}");

// Create the queue
await queueClient.CreateAsync();
Console.WriteLine($"Creating queue: {queueName}");

// Create the queue
await queueClient.CreateAsync();
Add messages to a queue
The following code snippet asynchronously adds messages to queue by calling theSendMessageAsyncmethod. It also saves aSendReceiptreturned from aSendMessageAsynccall. The receipt is used to update the message later in the program.
SendMessageAsync
SendReceipt
SendMessageAsync
Add this code to the end of theProgram.csfile:
Console.WriteLine("\nAdding messages to the queue...");

// Send several messages to the queue
await queueClient.SendMessageAsync("First message");
await queueClient.SendMessageAsync("Second message");

// Save the receipt so we can update this message later
SendReceipt receipt = await queueClient.SendMessageAsync("Third message");
Console.WriteLine("\nAdding messages to the queue...");

// Send several messages to the queue
await queueClient.SendMessageAsync("First message");
await queueClient.SendMessageAsync("Second message");

// Save the receipt so we can update this message later
SendReceipt receipt = await queueClient.SendMessageAsync("Third message");
Peek at messages in a queue
Peek at the messages in the queue by calling thePeekMessagesAsyncmethod. This method retrieves one or more messages from the front of the queue but doesn't alter the visibility of the message.
PeekMessagesAsync
Add this code to the end of theProgram.csfile:
Console.WriteLine("\nPeek at the messages in the queue...");

// Peek at messages in the queue
PeekedMessage[] peekedMessages = await queueClient.PeekMessagesAsync(maxMessages: 10);

foreach (PeekedMessage peekedMessage in peekedMessages)
{
    // Display the message
    Console.WriteLine($"Message: {peekedMessage.MessageText}");
}
Console.WriteLine("\nPeek at the messages in the queue...");

// Peek at messages in the queue
PeekedMessage[] peekedMessages = await queueClient.PeekMessagesAsync(maxMessages: 10);

foreach (PeekedMessage peekedMessage in peekedMessages)
{
    // Display the message
    Console.WriteLine($"Message: {peekedMessage.MessageText}");
}
Update a message in a queue
Update the contents of a message by calling theUpdateMessageAsyncmethod. This method can change a message's visibility timeout and contents. The message content must be a UTF-8 encoded string that is up to 64 KB in size. Along with the new content for the message, pass in the values from theSendReceiptthat was saved earlier in the code. TheSendReceiptvalues identify which message to update.
UpdateMessageAsync
SendReceipt
SendReceipt
Console.WriteLine("\nUpdating the third message in the queue...");

// Update a message using the saved receipt from sending the message
await queueClient.UpdateMessageAsync(receipt.MessageId, receipt.PopReceipt, "Third message has been updated");
Console.WriteLine("\nUpdating the third message in the queue...");

// Update a message using the saved receipt from sending the message
await queueClient.UpdateMessageAsync(receipt.MessageId, receipt.PopReceipt, "Third message has been updated");
Get the queue length
You can get an estimate of the number of messages in a queue. TheGetPropertiesmethod returns queue properties including the message count. TheApproximateMessagesCountproperty contains the approximate number of messages in the queue. This number isn't lower than the actual number of messages in the queue, but could be higher.
GetProperties
ApproximateMessagesCount
Add this code to the end of theProgram.csfile:
QueueProperties properties = queueClient.GetProperties();

// Retrieve the cached approximate message count
int cachedMessagesCount = properties.ApproximateMessagesCount;

// Display number of messages
Console.WriteLine($"Number of messages in queue: {cachedMessagesCount}");
QueueProperties properties = queueClient.GetProperties();

// Retrieve the cached approximate message count
int cachedMessagesCount = properties.ApproximateMessagesCount;

// Display number of messages
Console.WriteLine($"Number of messages in queue: {cachedMessagesCount}");
Receive messages from a queue
Download previously added messages by calling theReceiveMessagesAsyncmethod.
ReceiveMessagesAsync
Add this code to the end of theProgram.csfile:
Console.WriteLine("\nReceiving messages from the queue...");

// Get messages from the queue
QueueMessage[] messages = await queueClient.ReceiveMessagesAsync(maxMessages: 10);
Console.WriteLine("\nReceiving messages from the queue...");

// Get messages from the queue
QueueMessage[] messages = await queueClient.ReceiveMessagesAsync(maxMessages: 10);
You can optionally specify a value formaxMessages, which is the number of messages to retrieve from the queue. The default is 1 message and the maximum is 32 messages. You can also specify a value forvisibilityTimeout, which hides the messages from other operations for the timeout period. The default is 30 seconds.
maxMessages
visibilityTimeout
Delete messages from a queue
Delete messages from the queue after they've been processed. In this case, processing is just displaying the message on the console.
The app pauses for user input by callingConsole.ReadLinebefore it processes and deletes the messages. Verify in yourAzure portalthat the resources were created correctly, before they're deleted. Any messages not explicitly deleted eventually become visible in the queue again for another chance to process them.
Console.ReadLine
Add this code to the end of theProgram.csfile:
Console.WriteLine("\nPress Enter key to 'process' messages and delete them from the queue...");
Console.ReadLine();

// Process and delete messages from the queue
foreach (QueueMessage message in messages)
{
    // "Process" the message
    Console.WriteLine($"Message: {message.MessageText}");

    // Let the service know we're finished with
    // the message and it can be safely deleted.
    await queueClient.DeleteMessageAsync(message.MessageId, message.PopReceipt);
}
Console.WriteLine("\nPress Enter key to 'process' messages and delete them from the queue...");
Console.ReadLine();

// Process and delete messages from the queue
foreach (QueueMessage message in messages)
{
    // "Process" the message
    Console.WriteLine($"Message: {message.MessageText}");

    // Let the service know we're finished with
    // the message and it can be safely deleted.
    await queueClient.DeleteMessageAsync(message.MessageId, message.PopReceipt);
}
Delete a queue
The following code cleans up the resources the app created by deleting the queue using theDeleteAsyncmethod.
DeleteAsync
Add this code to the end of theProgram.csfile:
Console.WriteLine("\nPress Enter key to delete the queue...");
Console.ReadLine();

// Clean up
Console.WriteLine($"Deleting queue: {queueClient.Name}");
await queueClient.DeleteAsync();

Console.WriteLine("Done");
Console.WriteLine("\nPress Enter key to delete the queue...");
Console.ReadLine();

// Clean up
Console.WriteLine($"Deleting queue: {queueClient.Name}");
await queueClient.DeleteAsync();

Console.WriteLine("Done");
Run the code
This app creates and adds three messages to an Azure queue. The code lists the messages in the queue, then retrieves and deletes them, before finally deleting the queue.
In your console window, navigate to your application directory, then build and run the application.
dotnet build
dotnet build
dotnet run
dotnet run
The output of the app is similar to the following example:
Azure Queue Storage client library - .NET quickstart sample

Creating queue: quickstartqueues-5c72da2c-30cc-4f09-b05c-a95d9da52af2

Adding messages to the queue...

Peek at the messages in the queue...
Message: First message
Message: Second message
Message: Third message

Updating the third message in the queue...

Receiving messages from the queue...

Press Enter key to 'process' messages and delete them from the queue...

Message: First message
Message: Second message
Message: Third message has been updated

Press Enter key to delete the queue...

Deleting queue: quickstartqueues-5c72da2c-30cc-4f09-b05c-a95d9da52af2
Done
Azure Queue Storage client library - .NET quickstart sample

Creating queue: quickstartqueues-5c72da2c-30cc-4f09-b05c-a95d9da52af2

Adding messages to the queue...

Peek at the messages in the queue...
Message: First message
Message: Second message
Message: Third message

Updating the third message in the queue...

Receiving messages from the queue...

Press Enter key to 'process' messages and delete them from the queue...

Message: First message
Message: Second message
Message: Third message has been updated

Press Enter key to delete the queue...

Deleting queue: quickstartqueues-5c72da2c-30cc-4f09-b05c-a95d9da52af2
Done
When the app pauses before receiving messages, check your storage account in theAzure portal. Verify the messages are in the queue.
Press theEnterkey to receive and delete the messages. When prompted, press theEnterkey again to delete the queue and finish the demo.
Enter
Enter
Next steps
In this quickstart, you learned how to create a queue and add messages to it using asynchronous .NET code. Then you learned to peek, retrieve, and delete messages. Finally, you learned how to delete a message queue.
For tutorials, samples, quick starts and other documentation, visit:
Azure for .NET and .NET Core developers
For related code samples using deprecated .NET version 11.x SDKs, seeCode samples using .NET version 11.x.
To learn more, see theAzure Storage libraries for .NET.
For more Azure Queue Storage sample apps, seeAzure Queue Storage client library for .NET samples.
To learn more about .NET Core, seeGet started with .NET in 10 minutes.
Feedback
Was this page helpful?
Additional resources