Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Quickstart: Create, download, and list blobs with Azure CLI
Article
2023-10-12
24 contributors
In this article
The Azure CLI is Azure's command-line experience for managing Azure resources. You can use it in your browser with Azure Cloud Shell. You can also install it on macOS, Linux, or Windows and run it from the command line. In this quickstart, you learn to use the Azure CLI to upload and download data to and from Azure Blob storage.
Prerequisites
To access Azure Storage, you'll need an Azure subscription. If you don't already have a subscription, create afree accountbefore you begin.
All access to Azure Storage takes place through a storage account. For this quickstart, create a storage account using theAzure portal, Azure PowerShell, or Azure CLI. For help creating a storage account, seeCreate a storage account.
Prepare your environment for the Azure CLI
Use the Bash environment inAzure Cloud Shell. For more information, seeGet started with Azure Cloud Shell.
Use the Bash environment inAzure Cloud Shell. For more information, seeGet started with Azure Cloud Shell.

If you prefer to run CLI reference commands locally,installthe Azure CLI. If you're running on Windows or macOS, consider running Azure CLI in a Docker container. For more information, seeHow to run the Azure CLI in a Docker container.If you're using a local installation, sign in to the Azure CLI by using theaz logincommand. To finish the authentication process, follow the steps displayed in your terminal. For other sign-in options, seeAuthenticate to Azure using Azure CLI.When you're prompted, install the Azure CLI extension on first use. For more information about extensions, seeUse and manage extensions with the Azure CLI.Runaz versionto find the version and dependent libraries that are installed. To upgrade to the latest version, runaz upgrade.
If you prefer to run CLI reference commands locally,installthe Azure CLI. If you're running on Windows or macOS, consider running Azure CLI in a Docker container. For more information, seeHow to run the Azure CLI in a Docker container.
If you're using a local installation, sign in to the Azure CLI by using theaz logincommand. To finish the authentication process, follow the steps displayed in your terminal. For other sign-in options, seeAuthenticate to Azure using Azure CLI.
If you're using a local installation, sign in to the Azure CLI by using theaz logincommand. To finish the authentication process, follow the steps displayed in your terminal. For other sign-in options, seeAuthenticate to Azure using Azure CLI.
When you're prompted, install the Azure CLI extension on first use. For more information about extensions, seeUse and manage extensions with the Azure CLI.
When you're prompted, install the Azure CLI extension on first use. For more information about extensions, seeUse and manage extensions with the Azure CLI.
Runaz versionto find the version and dependent libraries that are installed. To upgrade to the latest version, runaz upgrade.
Runaz versionto find the version and dependent libraries that are installed. To upgrade to the latest version, runaz upgrade.
This article requires version 2.0.46 or later of the Azure CLI. If using Azure Cloud Shell, the latest version is already installed.
Authorize access to Blob storage
You can authorize access to Blob storage from the Azure CLI either with Microsoft Entra credentials or by using the storage account access key. Using Microsoft Entra credentials is recommended. This article shows how to authorize Blob storage operations using Microsoft Entra ID.
Azure CLI commands for data operations against Blob storage support the--auth-modeparameter, which enables you to specify how to authorize a given operation. Set the--auth-modeparameter tologinto authorize with Microsoft Entra credentials. For more information, seeAuthorize access to blob or queue data with Azure CLI.
--auth-mode
--auth-mode
login
Only Blob storage data operations support the--auth-modeparameter. Management operations, such as creating a resource group or storage account, automatically use Microsoft Entra credentials for authorization.
--auth-mode
To begin, sign-in to to your Azure account with theaz login.
az login
az login
Create a resource group
Create an Azure resource group with theaz group createcommand. A resource group is a logical container into which Azure resources are deployed and managed.
Remember to replace placeholder values in angle brackets with your own values:
az group create \
    --name <resource-group> \
    --location <location>
az group create \
    --name <resource-group> \
    --location <location>
Create a storage account
Create a general-purpose storage account with theaz storage account createcommand. The general-purpose storage account can be used for all four services: blobs, files, tables, and queues.
Remember to replace placeholder values in angle brackets with your own values:
az storage account create \
    --name <storage-account> \
    --resource-group <resource-group> \
    --location <location> \
    --sku Standard_ZRS \
    --encryption-services blob
az storage account create \
    --name <storage-account> \
    --resource-group <resource-group> \
    --location <location> \
    --sku Standard_ZRS \
    --encryption-services blob
Create a container
Blobs are always uploaded into a container. You can organize groups of blobs in containers similar to the way you organize your files on your computer in folders. Create a container for storing blobs with theaz storage container createcommand.
The following example uses your Microsoft Entra account to authorize the operation to create the container. Before you create the container, assign theStorage Blob Data Contributorrole to yourself. Even if you are the account owner, you need explicit permissions to perform data operations against the storage account. For more information about assigning Azure roles, seeAssign an Azure role for access to blob data.
Remember to replace placeholder values in angle brackets with your own values:
az ad signed-in-user show --query id -o tsv | az role assignment create \
    --role "Storage Blob Data Contributor" \
    --assignee @- \
    --scope "/subscriptions/<subscription>/resourceGroups/<resource-group>/providers/Microsoft.Storage/storageAccounts/<storage-account>"

az storage container create \
    --account-name <storage-account> \
    --name <container> \
    --auth-mode login
az ad signed-in-user show --query id -o tsv | az role assignment create \
    --role "Storage Blob Data Contributor" \
    --assignee @- \
    --scope "/subscriptions/<subscription>/resourceGroups/<resource-group>/providers/Microsoft.Storage/storageAccounts/<storage-account>"

az storage container create \
    --account-name <storage-account> \
    --name <container> \
    --auth-mode login
Important
Azure role assignments may take a few minutes to propagate.
You can also use the storage account key to authorize the operation to create the container. For more information about authorizing data operations with Azure CLI, seeAuthorize access to blob or queue data with Azure CLI.
Upload a blob
Blob storage supports block blobs, append blobs, and page blobs. The examples in this quickstart show how to work with block blobs.
First, create a file to upload to a block blob. If you're using Azure Cloud Shell, use the following command to create a file:
vi helloworld
vi helloworld
When the file opens, pressinsert. TypeHello world, then pressEsc. Next, type:x, then pressEnter.
In this example, you upload a blob to the container you created in the last step using theaz storage blob uploadcommand. It's not necessary to specify a file path since the file was created at the root directory. Remember to replace placeholder values in angle brackets with your own values:
az storage blob upload \
    --account-name <storage-account> \
    --container-name <container> \
    --name myFile.txt \
    --file myFile.txt \
    --auth-mode login
az storage blob upload \
    --account-name <storage-account> \
    --container-name <container> \
    --name myFile.txt \
    --file myFile.txt \
    --auth-mode login
This operation creates the blob if it doesn't already exist, and overwrites it if it does. Upload as many files as you like before continuing.
When you upload a blob using the Azure CLI, it issues respectiveREST API callsvia http and https protocols.
To upload multiple files at the same time, you can use theaz storage blob upload-batchcommand.
List the blobs in a container
List the blobs in the container with theaz storage blob listcommand. Remember to replace placeholder values in angle brackets with your own values:
az storage blob list \
    --account-name <storage-account> \
    --container-name <container> \
    --output table \
    --auth-mode login
az storage blob list \
    --account-name <storage-account> \
    --container-name <container> \
    --output table \
    --auth-mode login
Download a blob
Use theaz storage blob downloadcommand to download the blob you uploaded earlier. Remember to replace placeholder values in angle brackets with your own values:
az storage blob download \
    --account-name <storage-account> \
    --container-name <container> \
    --name myFile.txt \
    --file <~/destination/path/for/file> \
    --auth-mode login
az storage blob download \
    --account-name <storage-account> \
    --container-name <container> \
    --name myFile.txt \
    --file <~/destination/path/for/file> \
    --auth-mode login
Data transfer with AzCopy
The AzCopy command-line utility offers high-performance, scriptable data transfer for Azure Storage. You can use AzCopy to transfer data to and from Blob storage and Azure Files. For more information about AzCopy v10, the latest version of AzCopy, seeGet started with AzCopy. To learn about using AzCopy v10 with Blob storage, seeTransfer data with AzCopy and Blob storage.
The following example uses AzCopy to upload a local file to a blob. Remember to replace the sample values with your own values:
azcopy login
azcopy copy 'C:\myDirectory\myFile.txt' 'https://mystorageaccount.blob.core.windows.net/mycontainer/myFile.txt'
azcopy login
azcopy copy 'C:\myDirectory\myFile.txt' 'https://mystorageaccount.blob.core.windows.net/mycontainer/myFile.txt'
Clean up resources
If you want to delete the resources you created as part of this quickstart, including the storage account, delete the resource group by using theaz group deletecommand. Remember to replace placeholder values in angle brackets with your own values:
az group delete \
    --name <resource-group> \
    --no-wait
az group delete \
    --name <resource-group> \
    --no-wait
Next steps
In this quickstart, you learned how to transfer files between a local file system and a container in Azure Blob storage. To learn more about working with Blob storage by using Azure CLI, select an option below.
Manage block blobs with Azure CLI
Azure CLI samples for Blob storage
Feedback
Was this page helpful?
Additional resources