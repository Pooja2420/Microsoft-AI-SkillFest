Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Use cluster connect to securely connect to Azure Arc-enabled Kubernetes clusters
Article
2025-01-24
16 contributors
In this article
With cluster connect, you can securely connect to Azure Arc-enabled Kubernetes clusters from anywhere without requiring any inbound port to be enabled on the firewall.
Access to theapiserverof the Azure Arc-enabled Kubernetes cluster enables the following scenarios:
apiserver
Interactive debugging and troubleshooting.
Cluster access to Azure services forcustom locationsand other resources created on top of it.
Before you begin, review theconceptual overview of the cluster connect feature.
Prerequisites
An Azure account with an active subscription.Create an account for free.
An Azure account with an active subscription.Create an account for free.
An existing Azure Arc-enabled Kubernetes connected cluster.If you haven't connected a cluster yet, use ourquickstart.Upgrade your agentsto the latest version.
An existing Azure Arc-enabled Kubernetes connected cluster.
If you haven't connected a cluster yet, use ourquickstart.
Upgrade your agentsto the latest version.
Enable thenetwork requirements for Arc-enabled Kubernetes, including all endpoints listed as required for cluster connect.
Enable thenetwork requirements for Arc-enabled Kubernetes, including all endpoints listed as required for cluster connect.
Azure CLI
Azure PowerShell
InstallorupdateAzure CLI to the latest version.
InstallorupdateAzure CLI to the latest version.
Install the latest version of theconnectedk8sAzure CLI extension:az extension add --name connectedk8sIf you've already installed theconnectedk8sextension, update the extension to the latest version:az extension update --name connectedk8s
Install the latest version of theconnectedk8sAzure CLI extension:
connectedk8s
az extension add --name connectedk8s
az extension add --name connectedk8s
If you've already installed theconnectedk8sextension, update the extension to the latest version:
connectedk8s
az extension update --name connectedk8s
az extension update --name connectedk8s
Replace the placeholders and run the below command to set the environment variables used in this document:CLUSTER_NAME=<cluster-name>
RESOURCE_GROUP=<resource-group-name>
ARM_ID_CLUSTER=$(az connectedk8s show -n $CLUSTER_NAME -g $RESOURCE_GROUP --query id -o tsv)
Replace the placeholders and run the below command to set the environment variables used in this document:
CLUSTER_NAME=<cluster-name>
RESOURCE_GROUP=<resource-group-name>
ARM_ID_CLUSTER=$(az connectedk8s show -n $CLUSTER_NAME -g $RESOURCE_GROUP --query id -o tsv)
CLUSTER_NAME=<cluster-name>
RESOURCE_GROUP=<resource-group-name>
ARM_ID_CLUSTER=$(az connectedk8s show -n $CLUSTER_NAME -g $RESOURCE_GROUP --query id -o tsv)
Installthe latest version of Azure PowerShell.
Installthe latest version of Azure PowerShell.
Replace the placeholders and run the below command to set the environment variables used in this document:$CLUSTER_NAME = <cluster-name>
$RESOURCE_GROUP = <resource-group-name>
$ARM_ID_CLUSTER = (Get-AzConnectedKubernetes -ResourceGroupName $RESOURCE_GROUP -Name $CLUSTER_NAME).Id
Replace the placeholders and run the below command to set the environment variables used in this document:
$CLUSTER_NAME = <cluster-name>
$RESOURCE_GROUP = <resource-group-name>
$ARM_ID_CLUSTER = (Get-AzConnectedKubernetes -ResourceGroupName $RESOURCE_GROUP -Name $CLUSTER_NAME).Id
$CLUSTER_NAME = <cluster-name>
$RESOURCE_GROUP = <resource-group-name>
$ARM_ID_CLUSTER = (Get-AzConnectedKubernetes -ResourceGroupName $RESOURCE_GROUP -Name $CLUSTER_NAME).Id
Set up authentication
On the existing Arc-enabled cluster, create the ClusterRoleBinding with either Microsoft Entra authentication or service account token.

Microsoft Entra authentication option
Azure CLI
Azure PowerShell
Get theobjectIdassociated with your Microsoft Entra entity. For single user accounts, get the user principal name (UPN) associated with your Microsoft Entra entity.For a Microsoft Entra group account:AAD_ENTITY_ID=$(az ad signed-in-user show --query id -o tsv)For a Microsoft Entra single user account:AAD_ENTITY_ID=$(az ad signed-in-user show --query userPrincipalName -o tsv)For a Microsoft Entra application:AAD_ENTITY_ID=$(az ad sp show --id <id> --query id -o tsv)
Get theobjectIdassociated with your Microsoft Entra entity. For single user accounts, get the user principal name (UPN) associated with your Microsoft Entra entity.
objectId
For a Microsoft Entra group account:AAD_ENTITY_ID=$(az ad signed-in-user show --query id -o tsv)
For a Microsoft Entra group account:
AAD_ENTITY_ID=$(az ad signed-in-user show --query id -o tsv)
AAD_ENTITY_ID=$(az ad signed-in-user show --query id -o tsv)
For a Microsoft Entra single user account:AAD_ENTITY_ID=$(az ad signed-in-user show --query userPrincipalName -o tsv)
For a Microsoft Entra single user account:
AAD_ENTITY_ID=$(az ad signed-in-user show --query userPrincipalName -o tsv)
AAD_ENTITY_ID=$(az ad signed-in-user show --query userPrincipalName -o tsv)
For a Microsoft Entra application:AAD_ENTITY_ID=$(az ad sp show --id <id> --query id -o tsv)
For a Microsoft Entra application:
AAD_ENTITY_ID=$(az ad sp show --id <id> --query id -o tsv)
AAD_ENTITY_ID=$(az ad sp show --id <id> --query id -o tsv)
Authorize the entity with appropriate permissions.If you use Kubernetes native ClusterRoleBinding or RoleBinding for authorization checks on the cluster, with thekubeconfigfile pointing to theapiserverof your cluster for direct access, you can create one mapped to the Microsoft Entra entity that needs to access this cluster. For example:kubectl create clusterrolebinding demo-user-binding --clusterrole cluster-admin --user=$AAD_ENTITY_IDIf you use Azure RBAC for authorization checks on the cluster, you can create an applicableAzure role assignmentmapped to the Microsoft Entra entity. For example:az role assignment create --role "Azure Arc Kubernetes Viewer" --assignee $AAD_ENTITY_ID --scope $ARM_ID_CLUSTER
az role assignment create --role "Azure Arc Enabled Kubernetes Cluster User Role" --assignee $AAD_ENTITY_ID --scope $ARM_ID_CLUSTER
Authorize the entity with appropriate permissions.
If you use Kubernetes native ClusterRoleBinding or RoleBinding for authorization checks on the cluster, with thekubeconfigfile pointing to theapiserverof your cluster for direct access, you can create one mapped to the Microsoft Entra entity that needs to access this cluster. For example:kubectl create clusterrolebinding demo-user-binding --clusterrole cluster-admin --user=$AAD_ENTITY_ID
If you use Kubernetes native ClusterRoleBinding or RoleBinding for authorization checks on the cluster, with thekubeconfigfile pointing to theapiserverof your cluster for direct access, you can create one mapped to the Microsoft Entra entity that needs to access this cluster. For example:
kubeconfig
apiserver
kubectl create clusterrolebinding demo-user-binding --clusterrole cluster-admin --user=$AAD_ENTITY_ID
kubectl create clusterrolebinding demo-user-binding --clusterrole cluster-admin --user=$AAD_ENTITY_ID
If you use Azure RBAC for authorization checks on the cluster, you can create an applicableAzure role assignmentmapped to the Microsoft Entra entity. For example:az role assignment create --role "Azure Arc Kubernetes Viewer" --assignee $AAD_ENTITY_ID --scope $ARM_ID_CLUSTER
az role assignment create --role "Azure Arc Enabled Kubernetes Cluster User Role" --assignee $AAD_ENTITY_ID --scope $ARM_ID_CLUSTER
If you use Azure RBAC for authorization checks on the cluster, you can create an applicableAzure role assignmentmapped to the Microsoft Entra entity. For example:
az role assignment create --role "Azure Arc Kubernetes Viewer" --assignee $AAD_ENTITY_ID --scope $ARM_ID_CLUSTER
az role assignment create --role "Azure Arc Enabled Kubernetes Cluster User Role" --assignee $AAD_ENTITY_ID --scope $ARM_ID_CLUSTER
az role assignment create --role "Azure Arc Kubernetes Viewer" --assignee $AAD_ENTITY_ID --scope $ARM_ID_CLUSTER
az role assignment create --role "Azure Arc Enabled Kubernetes Cluster User Role" --assignee $AAD_ENTITY_ID --scope $ARM_ID_CLUSTER
Get theobjectIdassociated with your Microsoft Entra entity. For single user accounts, get the user principal name (UPN) associated with your Microsoft Entra entity.For a Microsoft Entra group account:$AAD_ENTITY_ID = (az ad signed-in-user show --query id -o tsv)For a Microsoft Entra single user account:$AAD_ENTITY_ID = (az ad signed-in-user show --query userPrincipalName -o tsv)For a Microsoft Entra application:$AAD_ENTITY_ID = (az ad sp show --id <id> --query objectId -o tsv)
Get theobjectIdassociated with your Microsoft Entra entity. For single user accounts, get the user principal name (UPN) associated with your Microsoft Entra entity.
objectId
For a Microsoft Entra group account:$AAD_ENTITY_ID = (az ad signed-in-user show --query id -o tsv)
For a Microsoft Entra group account:
$AAD_ENTITY_ID = (az ad signed-in-user show --query id -o tsv)
$AAD_ENTITY_ID = (az ad signed-in-user show --query id -o tsv)
For a Microsoft Entra single user account:$AAD_ENTITY_ID = (az ad signed-in-user show --query userPrincipalName -o tsv)
For a Microsoft Entra single user account:
$AAD_ENTITY_ID = (az ad signed-in-user show --query userPrincipalName -o tsv)
$AAD_ENTITY_ID = (az ad signed-in-user show --query userPrincipalName -o tsv)
For a Microsoft Entra application:$AAD_ENTITY_ID = (az ad sp show --id <id> --query objectId -o tsv)
For a Microsoft Entra application:
$AAD_ENTITY_ID = (az ad sp show --id <id> --query objectId -o tsv)
$AAD_ENTITY_ID = (az ad sp show --id <id> --query objectId -o tsv)
Authorize the entity with appropriate permissions.If you use native Kubernetes ClusterRoleBinding or RoleBinding for authorization checks on the cluster, with thekubeconfigfile pointing to theapiserverof your cluster for direct access, you can create one mapped to the Microsoft Entra entity that needs to access this cluster. For example:kubectl create clusterrolebinding demo-user-binding --clusterrole cluster-admin --user=$AAD_ENTITY_IDIf you useAzure RBAC for authorization checkson the cluster, you can create an applicableAzure role assignmentmapped to the Microsoft Entra entity. For example:az role assignment create --role "Azure Arc Kubernetes Viewer" --assignee $AAD_ENTITY_ID --scope $ARM_ID_CLUSTER
az role assignment create --role "Azure Arc Enabled Kubernetes Cluster User Role" --assignee $AAD_ENTITY_ID --scope $ARM_ID_CLUSTER
Authorize the entity with appropriate permissions.
If you use native Kubernetes ClusterRoleBinding or RoleBinding for authorization checks on the cluster, with thekubeconfigfile pointing to theapiserverof your cluster for direct access, you can create one mapped to the Microsoft Entra entity that needs to access this cluster. For example:kubectl create clusterrolebinding demo-user-binding --clusterrole cluster-admin --user=$AAD_ENTITY_ID
If you use native Kubernetes ClusterRoleBinding or RoleBinding for authorization checks on the cluster, with thekubeconfigfile pointing to theapiserverof your cluster for direct access, you can create one mapped to the Microsoft Entra entity that needs to access this cluster. For example:
kubeconfig
apiserver
kubectl create clusterrolebinding demo-user-binding --clusterrole cluster-admin --user=$AAD_ENTITY_ID
kubectl create clusterrolebinding demo-user-binding --clusterrole cluster-admin --user=$AAD_ENTITY_ID
If you useAzure RBAC for authorization checkson the cluster, you can create an applicableAzure role assignmentmapped to the Microsoft Entra entity. For example:az role assignment create --role "Azure Arc Kubernetes Viewer" --assignee $AAD_ENTITY_ID --scope $ARM_ID_CLUSTER
az role assignment create --role "Azure Arc Enabled Kubernetes Cluster User Role" --assignee $AAD_ENTITY_ID --scope $ARM_ID_CLUSTER
If you useAzure RBAC for authorization checkson the cluster, you can create an applicableAzure role assignmentmapped to the Microsoft Entra entity. For example:
az role assignment create --role "Azure Arc Kubernetes Viewer" --assignee $AAD_ENTITY_ID --scope $ARM_ID_CLUSTER
az role assignment create --role "Azure Arc Enabled Kubernetes Cluster User Role" --assignee $AAD_ENTITY_ID --scope $ARM_ID_CLUSTER
az role assignment create --role "Azure Arc Kubernetes Viewer" --assignee $AAD_ENTITY_ID --scope $ARM_ID_CLUSTER
az role assignment create --role "Azure Arc Enabled Kubernetes Cluster User Role" --assignee $AAD_ENTITY_ID --scope $ARM_ID_CLUSTER
Service account token authentication option
Azure CLI
Azure PowerShell
With thekubeconfigfile pointing to theapiserverof your Kubernetes cluster, run this command to create a service account. This example creates the service account in the default namespace, but you can substitute any other namespace fordefault.kubectl create serviceaccount demo-user -n default
With thekubeconfigfile pointing to theapiserverof your Kubernetes cluster, run this command to create a service account. This example creates the service account in the default namespace, but you can substitute any other namespace fordefault.
kubeconfig
apiserver
default
kubectl create serviceaccount demo-user -n default
kubectl create serviceaccount demo-user -n default
Create a ClusterRoleBinding togrant this service account the appropriate permissions on the cluster. If you used a different namespace in the first command, substitute it here fordefault.kubectl create clusterrolebinding demo-user-binding --clusterrole cluster-admin --serviceaccount default:demo-user
Create a ClusterRoleBinding togrant this service account the appropriate permissions on the cluster. If you used a different namespace in the first command, substitute it here fordefault.
default
kubectl create clusterrolebinding demo-user-binding --clusterrole cluster-admin --serviceaccount default:demo-user
kubectl create clusterrolebinding demo-user-binding --clusterrole cluster-admin --serviceaccount default:demo-user
Create a service account token:kubectl apply -f - <<EOF
apiVersion: v1
kind: Secret
metadata:
  name: demo-user-secret
  annotations:
    kubernetes.io/service-account.name: demo-user
type: kubernetes.io/service-account-token
EOFTOKEN=$(kubectl get secret demo-user-secret -o jsonpath='{$.data.token}' | base64 -d | sed 's/$/\n/g')
Create a service account token:
kubectl apply -f - <<EOF
apiVersion: v1
kind: Secret
metadata:
  name: demo-user-secret
  annotations:
    kubernetes.io/service-account.name: demo-user
type: kubernetes.io/service-account-token
EOF
kubectl apply -f - <<EOF
apiVersion: v1
kind: Secret
metadata:
  name: demo-user-secret
  annotations:
    kubernetes.io/service-account.name: demo-user
type: kubernetes.io/service-account-token
EOF
TOKEN=$(kubectl get secret demo-user-secret -o jsonpath='{$.data.token}' | base64 -d | sed 's/$/\n/g')
TOKEN=$(kubectl get secret demo-user-secret -o jsonpath='{$.data.token}' | base64 -d | sed 's/$/\n/g')
Get the token to output to consoleecho $TOKEN
Get the token to output to console
echo $TOKEN
echo $TOKEN
With thekubeconfigfile pointing to theapiserverof your Kubernetes cluster, run this command to create a service account. This example creates the service account in the default namespace, but you can substitute any other namespace fordefault.kubectl create serviceaccount demo-user -n default
With thekubeconfigfile pointing to theapiserverof your Kubernetes cluster, run this command to create a service account. This example creates the service account in the default namespace, but you can substitute any other namespace fordefault.
kubeconfig
apiserver
default
kubectl create serviceaccount demo-user -n default
kubectl create serviceaccount demo-user -n default
Create a ClusterRoleBinding or RoleBinding togrant this service account the appropriate permissions on the cluster. If you used a different namespace in the first command, substitute it here fordefault.kubectl create clusterrolebinding demo-user-binding --clusterrole cluster-admin --serviceaccount default:demo-user
Create a ClusterRoleBinding or RoleBinding togrant this service account the appropriate permissions on the cluster. If you used a different namespace in the first command, substitute it here fordefault.
default
kubectl create clusterrolebinding demo-user-binding --clusterrole cluster-admin --serviceaccount default:demo-user
kubectl create clusterrolebinding demo-user-binding --clusterrole cluster-admin --serviceaccount default:demo-user
Create a service account token. Create ademo-user-secret.yamlfile with the following content:apiVersion: v1
kind: Secret
metadata:
  name: demo-user-secret
  annotations:
    kubernetes.io/service-account.name: demo-user
type: kubernetes.io/service-account-tokenThen run these commands:kubectl apply -f demo-user-secret.yaml$TOKEN = ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String((kubectl get secret demo-user-secret -o jsonpath='{$.data.token}'))))
Create a service account token. Create ademo-user-secret.yamlfile with the following content:
demo-user-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: demo-user-secret
  annotations:
    kubernetes.io/service-account.name: demo-user
type: kubernetes.io/service-account-token
apiVersion: v1
kind: Secret
metadata:
  name: demo-user-secret
  annotations:
    kubernetes.io/service-account.name: demo-user
type: kubernetes.io/service-account-token
Then run these commands:
kubectl apply -f demo-user-secret.yaml
kubectl apply -f demo-user-secret.yaml
$TOKEN = ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String((kubectl get secret demo-user-secret -o jsonpath='{$.data.token}'))))
$TOKEN = ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String((kubectl get secret demo-user-secret -o jsonpath='{$.data.token}'))))
Get the token to output to console.echo $TOKEN
Get the token to output to console.
echo $TOKEN
echo $TOKEN
Access your cluster from a client device
Now you can access the cluster from a different client. Run the following steps on another client device.
Sign in using either Microsoft Entra authentication or service account token authentication.
Sign in using either Microsoft Entra authentication or service account token authentication.
Get the cluster connectkubeconfigneeded to communicate with the cluster from anywhere (even outside the firewall surrounding the cluster), based on the authentication option used:For Microsoft Entra authentication:az connectedk8s proxy -n $CLUSTER_NAME -g $RESOURCE_GROUPFor service account token authentication:az connectedk8s proxy -n $CLUSTER_NAME -g $RESOURCE_GROUP --token $TOKENNoteThis command opens the proxy and blocks the current shell.
Get the cluster connectkubeconfigneeded to communicate with the cluster from anywhere (even outside the firewall surrounding the cluster), based on the authentication option used:
kubeconfig
For Microsoft Entra authentication:az connectedk8s proxy -n $CLUSTER_NAME -g $RESOURCE_GROUP
For Microsoft Entra authentication:
az connectedk8s proxy -n $CLUSTER_NAME -g $RESOURCE_GROUP
az connectedk8s proxy -n $CLUSTER_NAME -g $RESOURCE_GROUP
For service account token authentication:az connectedk8s proxy -n $CLUSTER_NAME -g $RESOURCE_GROUP --token $TOKENNoteThis command opens the proxy and blocks the current shell.
For service account token authentication:
az connectedk8s proxy -n $CLUSTER_NAME -g $RESOURCE_GROUP --token $TOKEN
az connectedk8s proxy -n $CLUSTER_NAME -g $RESOURCE_GROUP --token $TOKEN
Note
This command opens the proxy and blocks the current shell.
In a different shell session, usekubectlto send requests to the cluster:kubectl get pods -A
In a different shell session, usekubectlto send requests to the cluster:
kubectl
kubectl get pods -A
kubectl get pods -A
You should now see a response from the cluster containing the list of all pods under thedefaultnamespace.
default
Known limitations
When making requests to the Kubernetes cluster, if the Microsoft Entra service principal used is a part of more than 200 groups, you might see the following error:
Overage claim (users with more than 200 group membership) for SPN is currently not supported. For troubleshooting, please refer to aka.ms/overageclaimtroubleshoot
Overage claim (users with more than 200 group membership) for SPN is currently not supported. For troubleshooting, please refer to aka.ms/overageclaimtroubleshoot
This is a known limitation. To get past this error:
Create aservice principal, which is less likely to be a member of more than 200 groups.
Sign into Azure CLI with the service principal before running theaz connectedk8s proxycommand.
az connectedk8s proxy
Next steps
Set upMicrosoft Entra RBACon your clusters.
Deploy and managecluster extensions.
Feedback
Was this page helpful?
Additional resources