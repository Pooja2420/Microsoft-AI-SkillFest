Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Azure Blob storage bindings for Azure Functions overview
Article
2023-09-27
50 contributors
In this article
Azure Functions integrates withAzure Storageviatriggers and bindings. Integrating with Blob storage allows you to build functions that react to changes in blob data as well as read and write values.
Install extension
The extension NuGet package you install depends on the C# mode you're using in your function app:
Isolated worker model
In-process model
Functions execute in an isolated C# worker process. To learn more, seeGuide for running C# Azure Functions in an isolated worker process.
Important
Support will end for the in-process model on November 10, 2026. We highly recommend that youmigrate your apps to the isolated worker modelfor full support.
Functions execute in the same process as the Functions host. To learn more, seeDevelop C# class library functions using Azure Functions.
In a variation of this model, Functions can be run usingC# scripting, which is supported primarily for C# portal editing. To update existing binding extensions for C# script apps running in the portal without having to republish your function app, seeUpdate your extensions.
The functionality of the extension varies depending on the extension version:
Extension 5.x and higher
Functions 2.x and higher
Functions 1.x
Extension 5.x and higher
Functions 2.x and higher
Functions 1.x
This section describes using aclass library. ForC# scripting, you would need to insteadinstall the extension bundle, version 4.x.
This version introduces the ability toconnect using an identity instead of a secret. For a tutorial on configuring your function apps with managed identities, see thecreating a function app with identity-based connections tutorial.
This version allows you to bind to types fromAzure.Storage.Blobs. Learn more about how these new types are different fromWindowsAzure.StorageandMicrosoft.Azure.Storageand how to migrate to them from theAzure.Storage.Blobs Migration Guide.
WindowsAzure.Storage
Microsoft.Azure.Storage
This extension is available by installing theMicrosoft.Azure.WebJobs.Extensions.Storage.Blobs NuGet package, version 5.x.
Using the .NET CLI:
dotnet add package Microsoft.Azure.WebJobs.Extensions.Storage.Blobs --version 5.0.0
dotnet add package Microsoft.Azure.WebJobs.Extensions.Storage.Blobs --version 5.0.0
Note
Azure Blobs, Azure Queues, and Azure Tables now use separate extensions and are referenced individually. For example, to use the triggers and bindings for all three services in your .NET in-process app, you should add the following packages to your project:
Microsoft.Azure.WebJobs.Extensions.Storage.Blobs
Microsoft.Azure.WebJobs.Extensions.Storage.Queues
Microsoft.Azure.WebJobs.Extensions.Tables
Previously, the extensions shipped together asMicrosoft.Azure.WebJobs.Extensions.Storage, version 4.x. This same package also has a5.x version, which references the split packages for blobs and queues only. When upgrading your package references from older versions, you may therefore need to additionally reference the newMicrosoft.Azure.WebJobs.Extensions.TablesNuGet package. Also, when referencing these newer split packages, make sure you are not referencing an older version of the combined storage package, as this will result in conflicts from two definitions of the same bindings.
This section describes using aclass library. ForC# scripting, you would need to insteadinstall the extension bundle, version 2.x.
Working with the trigger and bindings requires that you reference the appropriate NuGet package. Install theMicrosoft.Azure.WebJobs.Extensions.Storage NuGet package, version 4.x. The package is used for .NET class libraries while the extension bundle is used for all other application types.
Important
Support will end for version 1.x of the Azure Functions runtime on September 14, 2026. We highly recommend that youmigrate your apps to version 4.xfor full support.
Functions 1.x apps automatically have a reference theMicrosoft.Azure.WebJobsNuGet package, version 2.x.
In Functions 1.x, the Storage triggers and bindings use version 7.2.1 of the Azure Storage SDK (WindowsAzure.StorageNuGet package). If you reference a different version of the Storage SDK, and you bind to a Storage SDK type in your function signature, the Functions runtime may report that it can't bind to that type. The solution is to make sure your project referencesWindowsAzure.Storage 7.2.1.
This version introduces the ability toconnect using an identity instead of a secret. For a tutorial on configuring your function apps with managed identities, see thecreating a function app with identity-based connections tutorial.
This version allows you to bind to types fromAzure.Storage.Blobs. Learn more about how these new types are different fromWindowsAzure.StorageandMicrosoft.Azure.Storageand how to migrate to them from theAzure.Storage.Blobs Migration Guide.
WindowsAzure.Storage
Microsoft.Azure.Storage
This version supports configuration of triggers and bindings through.NET Aspire integration.
Add the extension to your project by installing theMicrosoft.Azure.Functions.Worker.Extensions.Storage.Blobs NuGet package, version 5.x or later.
Using the .NET CLI:
dotnet add package Microsoft.Azure.Functions.Worker.Extensions.Storage.Blobs
dotnet add package Microsoft.Azure.Functions.Worker.Extensions.Storage.Blobs
Note
Azure Blobs, Azure Queues, and Azure Tables now use separate extensions and are referenced individually. For example, to use the triggers and bindings for all three services in your .NET isolated-process app, you should add the following packages to your project:
Microsoft.Azure.Functions.Worker.Extensions.Storage.Blobs
Microsoft.Azure.Functions.Worker.Extensions.Storage.Queues
Microsoft.Azure.Functions.Worker.Extensions.Tables
Previously, the extensions shipped together asMicrosoft.Azure.Functions.Worker.Extensions.Storage, version 4.x. This same package also has a5.x version, which references the split packages for blobs and queues only. When upgrading your package references from older versions, you may therefore need to additionally reference the newMicrosoft.Azure.Functions.Worker.Extensions.TablesNuGet package. Also, when referencing these newer split packages, make sure you are not referencing an older version of the combined storage package, as this will result in conflicts from two definitions of the same bindings.
If you're writing your application using F#, you must also configure this extension as part of the app'sstartup configuration. In the call toConfigureFunctionsWorkerDefaults()orConfigureFunctionsWebApplication(), add a delegate that takes anIFunctionsWorkerApplicationparameter. Then within the body of that delegate, callConfigureBlobStorageExtension()on the object:
ConfigureFunctionsWorkerDefaults()
ConfigureFunctionsWebApplication()
IFunctionsWorkerApplication
ConfigureBlobStorageExtension()
let hostBuilder = new HostBuilder()
hostBuilder.ConfigureFunctionsWorkerDefaults(fun (context: HostBuilderContext) (appBuilder: IFunctionsWorkerApplicationBuilder) ->
    appBuilder.ConfigureBlobStorageExtension() |> ignore
) |> ignore
let hostBuilder = new HostBuilder()
hostBuilder.ConfigureFunctionsWorkerDefaults(fun (context: HostBuilderContext) (appBuilder: IFunctionsWorkerApplicationBuilder) ->
    appBuilder.ConfigureBlobStorageExtension() |> ignore
) |> ignore
Add the extension to your project by installing theMicrosoft.Azure.Functions.Worker.Extensions.Storage NuGet package, version 4.x.
Functions version 1.x doesn't support isolated worker process.
Install bundle
The Blob storage binding is part of anextension bundle, which is specified in your host.json project file. You may need to modify this bundle to change the version of the binding, or if bundles aren't already installed. To learn more, seeextension bundle.
Bundle v3.x
Bundle v2.x
Functions 1.x
This version introduces the ability toconnect using an identity instead of a secret. For a tutorial on configuring your function apps with managed identities, see thecreating a function app with identity-based connections tutorial.
You can add this version of the extension from the extension bundle v3 by adding or replacing the following code in yourhost.jsonfile:
host.json
{
    "version": "2.0",
    "extensionBundle": {
        "id": "Microsoft.Azure.Functions.ExtensionBundle",
        "version": "[3.3.0, 4.0.0)"
    }
}
{
    "version": "2.0",
    "extensionBundle": {
        "id": "Microsoft.Azure.Functions.ExtensionBundle",
        "version": "[3.3.0, 4.0.0)"
    }
}
To learn more, seeUpdate your extensions.
You can install this version of the extension in your function app by registering theextension bundle, version 2.x.
Functions 1.x apps automatically have a reference to the extension.
Binding types
The binding types supported for .NET depend on both the extension version and C# execution mode, which can be one of the following:
Isolated worker model
In-process model
An isolated worker process class library compiled C# function runs in a process isolated from the runtime.
An in-process class library is a compiled C# function runs in the same process as the Functions runtime.
Choose a version to see binding type details for the mode and version.
Extension 5.x and higher
Functions 2.x and higher
Functions 1.x
Extension 5.x and higher
Functions 2.x and higher
Functions 1.x
The Azure Blobs extension supports parameter types according to the table below.
TextReader
string
byte[]
TextReader
string
byte[]
IEnumerable<T>
T
TextWriter
string
byte[]
ICollector<T>
IAsyncCollector<T>
T
1The client types require theAccessproperty of the attribute to be set toFileAccess.ReadWrite.
Access
FileAccess.ReadWrite
For examples using these types, seethe GitHub repository for the extension. Learn more about types from the Azure SDK, how they are different from earlier versions, and how to migrate to them from theAzure.Storage.Blobs Migration Guide.
Earlier versions of the extension exposed types from the now deprecatedMicrosoft.Azure.Storage.Blobnamespace. Newer types fromAzure.Storage.Blobsare exclusive toextension 5.x and higher.
This version of the Azure Blobs extension supports parameter types according to the table below.
TextReader
string
byte[]
TextReader
string
byte[]
TextWriter
string
byte[]
1These types require theAccessproperty of the attribute to be set toFileAccess.ReadWrite.
Access
FileAccess.ReadWrite
2IEnumerable<T>provides an enumeration of blobs in the container. Here,Tcan be any of the other supported types.
IEnumerable<T>
T
Functions 1.x exposed types from the deprecatedMicrosoft.WindowsAzure.Storagenamespace. Newer types fromAzure.Storage.Blobsare exclusive toExtension 5.x and higher. To use these, you will need toupgrade your application to Functions 4.x.
The isolated worker process supports parameter types according to the tables below.
Blob trigger
The blob trigger can bind to the following types:
string
byte[]
1To use these types, you need to referenceMicrosoft.Azure.Functions.Worker.Extensions.Storage.Blobs 6.0.0 or laterand thecommon dependencies for SDK type bindings.
Blob input binding
When you want the function to process a single blob, the blob input binding can bind to the following types:
string
byte[]
When you want the function to process multiple blobs from a container, the blob input binding can bind to the following types:
T[]
List<T>
T
IEnumerable<T>
1To use these types, you need to referenceMicrosoft.Azure.Functions.Worker.Extensions.Storage.Blobs 6.0.0 or laterand thecommon dependencies for SDK type bindings.
Blob output binding
When you want the function to write to a single blob, the blob output binding can bind to the following types:
string
byte[]
When you want the function to write to multiple blobs, the blob output binding can bind to the following types:
T[]
T
For other output scenarios, create and use aBlobClientorBlobContainerClientwith other types fromAzure.Storage.Blobsdirectly. SeeRegister Azure clientsfor an example of using dependency injection to create a client type from the Azure SDK.
Earlier versions of extensions in the isolated worker process only support binding to string parameters. Additional options are available toextension 5.x and higher.
Functions version 1.x doesn't support isolated worker process. To use the isolated worker model,upgrade your application to Functions 4.x.
host.json settings
This section describes the function app configuration settings available for functions that use this binding. These settings only apply when using extension version 5.0.0 and higher. The example host.json file below contains only the version 2.x+ settings for this binding. For more information about function app configuration settings in versions 2.x and later versions, seehost.json reference for Azure Functions.
Note
This section doesn't apply to extension versions before 5.0.0. For those earlier versions, there aren't any function app-wide configuration settings for blobs.
{
    "version": "2.0",
    "extensions": {
        "blobs": {
            "maxDegreeOfParallelism": 4,
            "poisonBlobThreshold": 1
        }
    }
}
{
    "version": "2.0",
    "extensions": {
        "blobs": {
            "maxDegreeOfParallelism": 4,
            "poisonBlobThreshold": 1
        }
    }
}
Next steps
Run a function when blob storage data changes
Read blob storage data when a function runs
Write blob storage data from a function
Feedback
Was this page helpful?
Additional resources