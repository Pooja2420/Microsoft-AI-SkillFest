Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Git version control for notebooks (legacy)
Article
2024-04-24
2 contributors
In this article
Important
Legacy notebook Git integration support was removed on January 31st, 2024. Databricks recommends that you use Databricks Git folders to sync your work in Databricks with a remote Git repository.
This article describes how to set up Git version control for notebooks (legacy feature). You can also use theDatabricks CLIorWorkspace APIto import and export notebooks and to perform Git operations in your local development environment.
Enable and disable Git versioning
By default version control is enabled. To toggle this setting:
Go toSettings>Workspace settings.
In theAdvancedsection, deselect theNotebook Git Versioningtoggle.
Configure version control
To configure version control, create access credentials in your Git provider, then add those credentials to Azure Databricks.
Work with notebook versions
You work with notebook versions in the history panel. Open the history panel by clickingin the right sidebar.

Note
You cannot modify a notebook while the history panel is open.
Link a notebook to GitHub
Clickin the right sidebar. The Git status bar displaysGit: Not linked.
Clickin the right sidebar. The Git status bar displaysGit: Not linked.

ClickGit: Not linked.The Git Preferences dialog appears. The first time you open your notebook, the Status isUnlink, because the notebook is not in GitHub.
ClickGit: Not linked.
The Git Preferences dialog appears. The first time you open your notebook, the Status isUnlink, because the notebook is not in GitHub.

In the Status field, clickLink.
In the Status field, clickLink.
In the Link field, paste the URL of the GitHub repository.
In the Link field, paste the URL of the GitHub repository.
Click theBranchdrop-down and select a branch or type the name of a new branch.
Click theBranchdrop-down and select a branch or type the name of a new branch.
In the Path in Git folder field, specify where in the repository to store your file.Python notebooks have the suggested default file extension.py. If you use.ipynb, your notebook will save in iPython notebook format. If the file already exists on GitHub, you can directly copy and paste the URL of the file.
In the Path in Git folder field, specify where in the repository to store your file.
Python notebooks have the suggested default file extension.py. If you use.ipynb, your notebook will save in iPython notebook format. If the file already exists on GitHub, you can directly copy and paste the URL of the file.
.py
.ipynb
ClickSaveto finish linking your notebook. If this file did not previously exist, a prompt with the optionSave this file to your GitHub repodisplays.
ClickSaveto finish linking your notebook. If this file did not previously exist, a prompt with the optionSave this file to your GitHub repodisplays.
Type a message and clickSave.
Type a message and clickSave.
Save a notebook to GitHub
While the changes that you make to your notebook are saved automatically to the Azure Databricks version history, changes do not automatically persist to GitHub.
Clickin the right sidebar to open the history panel.
Clickin the right sidebar to open the history panel.

ClickSave Nowto save your notebook to GitHub. The Save Notebook Version dialog appears.
ClickSave Nowto save your notebook to GitHub. The Save Notebook Version dialog appears.
Optionally, enter a message to describe your change.
Optionally, enter a message to describe your change.
Make sure thatAlso commit to Gitis selected.
Make sure thatAlso commit to Gitis selected.

ClickSave.
ClickSave.
Revert or update a notebook to a version from GitHub
Once you link a notebook, Azure Databricks syncs your history with Git every time you re-open the history panel. Versions that sync to Git have commit hashes as part of the entry.
Clickin the right sidebar to open the history panel.
Clickin the right sidebar to open the history panel.

Choose an entry in the history panel. Azure Databricks displays that version.
Choose an entry in the history panel. Azure Databricks displays that version.
ClickRestore this version.
ClickRestore this version.
ClickConfirmto confirm that you want to restore that version.
ClickConfirmto confirm that you want to restore that version.
Unlink a notebook
Clickin the right sidebar to open the history panel.
Clickin the right sidebar to open the history panel.
The Git status bar displaysGit: Synced.
The Git status bar displaysGit: Synced.

ClickGit: Synced.
ClickGit: Synced.

In the Git Preferences dialog, clickUnlink.
In the Git Preferences dialog, clickUnlink.
ClickSave.
ClickSave.
ClickConfirmto confirm that you want to unlink the notebook from version control.
ClickConfirmto confirm that you want to unlink the notebook from version control.
Use branches
You can work on any branch of your repository and create new branches inside Azure Databricks.
Create a branch
Clickin the right sidebar to open the history panel.
Clickin the right sidebar to open the history panel.
Click the Git status bar to open the GitHub panel.
Click the Git status bar to open the GitHub panel.
Click theBranchdropdown.
Click theBranchdropdown.
Enter a branch name.
Enter a branch name.

Select theCreate Branchoption at the bottom of the dropdown. The parent branch is indicated. You always branch from your current selected branch.
Select theCreate Branchoption at the bottom of the dropdown. The parent branch is indicated. You always branch from your current selected branch.
Create a pull request
Clickin the right sidebar to open the history panel.
Clickin the right sidebar to open the history panel.
Click the Git status bar to open the GitHub panel.
Click the Git status bar to open the GitHub panel.

ClickCreate PR. GitHub opens to a pull request page for the branch.
ClickCreate PR. GitHub opens to a pull request page for the branch.
Rebase a branch
You can also rebase your branch inside Azure Databricks. TheRebaselink displays if new commits are available in the parent branch. Only rebasing on top of the default branch of the parent repository is supported.

For example, assume that you are working ondatabricks/reference-apps. You fork it into your own account (for example,brkyvz) and start working on a branch calledmy-branch. If a new update is pushed todatabricks:master, then theRebasebutton displays, and you will be able to pull the changes into your branchbrkyvz:my-branch.
databricks/reference-apps
brkyvz
my-branch
databricks:master
Rebase
brkyvz:my-branch
Rebasing works a little differently in Azure Databricks. Assume the following branch structure:

After a rebase, the branch structure looks like:

Whatâs different here is that Commits C5 and C6 do not apply on top of C4. They appear as local changes in your notebook. Merge conflicts show up as follows:

You can then commit to GitHub once again using theSave Nowbutton.
What happens if someone branched off from my branch that I just rebased?
If your branch (for example,branch-a) was the base for another branch (branch-b), and you rebase, you need not worry! Once a user also rebasesbranch-b, everything will work out. The best practice in this situation is to use separate branches for separate notebooks.
branch-a
branch-b
branch-b
Best practices for code reviews
Azure Databricks supports Git branching.
You can link a notebook to any branch in a repository. Azure Databricks recommends using a separate branch for each notebook.
During development, you can link a notebook to a fork of a repository or to a non-default branch in the main repository. To integrate your changes upstream, you can use theCreate PRlink in theGit Preferencesdialog in Azure Databricks to create a GitHub pull request. The Create PR link displays only if youâre not working on the default branch of the parent repository.
Troubleshooting
If you receive errors related to syncing GitHub history, verify the following:
You can only link a notebook to an initialized Git repository that isnât empty. Test the URL in a web browser.
The GitHub personal access token must be active.
To use a private GitHub repository, you must have permission to read the repository.
If a notebook is linked to a GitHub branch that is renamed, the change is not automatically reflected in Azure Databricks. You must re-link the notebook to the branch manually.
Migrate to Databricks Git folders
Users that need to migrate to Databricks Git folders from the legacy Git version control can use the following guide:
Switching to Databricks Git folders from Legacy Git integration
Feedback
Was this page helpful?
Additional resources