Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Cloud design patterns
Article
2025-04-04
33 contributors
In this article
Architects design workloads by integrating platform services, functionality, and code to meet both functional and nonfunctional requirements. To design effective workloads, you must understand these requirements and select topologies and methodologies that address the challenges of your workload's constraints. Cloud design patterns provide solutions to many common challenges.
System design heavily relies on established design patterns. You can design infrastructure, code, and distributed systems by using a combination of these patterns. These patterns are crucial for building reliable, highly secure, cost-optimized, operationally efficient, and high-performing applications in the cloud.
The following cloud design patterns are technology-agnostic, which makes them suitable for any distributed system. You can apply these patterns across Azure, other cloud platforms, on-premises setups, and hybrid environments.
How cloud design patterns enhance the design process
Cloud workloads are vulnerable to thefallacies of distributed computing, which are common but incorrect assumptions about how distributed systems operate. Examples of these fallacies include:
The network is reliable.
Latency is zero.
Bandwidth is infinite.
The network is secure.
Topology doesn't change.
There's one administrator.
Component versioning is simple.
Observability implementation can be delayed.
These misconceptions can result in flawed workload designs. Design patterns don't eliminate these misconceptions but help raise awareness, provide compensation strategies, and provide mitigations. Each cloud design pattern has trade-offs. Focus on why you should choose a specific pattern instead of how to implement it.
Consider how to use these industry-standard design patterns as the core building blocks for a well-architected workload design. Each design pattern in the Azure Well-Architected Framework represents one or more of its pillars. Some patterns might introduce trade-offs that affect the goals of other pillars.
Pattern catalog
Each pattern in this catalog describes the problem that it addresses, considerations for applying the pattern, and an example based on Microsoft Azure services and tools. Some patterns include code samples or snippets that show how to implement the pattern on Azure.
Next steps
Review the design patterns from the perspective of the Well-Architected Framework pillar that the pattern aims to optimize.
Design patterns to support the Reliability pillar
Design patterns to support the Security pillar
Design patterns to support the Cost Optimization pillar
Design patterns to support the Operational Excellence pillar
Design patterns to support the Performance Efficiency pillar
Feedback
Was this page helpful?
Additional resources