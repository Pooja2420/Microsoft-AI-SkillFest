Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Share your code with Git
Article
2025-02-05
11 contributors
In this article
Azure DevOps Services | Azure DevOps Server 2022 - Azure DevOps Server 2019
Share your code with others in Azure DevOps when you use a Git repository.
Prerequisites
1. Clone the repo to your computer
To work with a Git repo, clone it to your computer, which creates a complete local copy of the repo. Your code might be in one of several places.
Complete the following step that's applicable to your scenario:IfYou don't have any code yet, firstCreate a new Git repo in your project, and then complete the next step.Ifthe code is in another Git repo, such as a GitHub repo or a different Azure Repo instance,import it into a new or existing empty Git repo, and then complete the next step.Ifthe code is on your local computer and not yet in version control, eithercreate a new Git repo in your projector add your code to an existing repository.
Complete the following step that's applicable to your scenario:
IfYou don't have any code yet, firstCreate a new Git repo in your project, and then complete the next step.
Ifthe code is in another Git repo, such as a GitHub repo or a different Azure Repo instance,import it into a new or existing empty Git repo, and then complete the next step.
Ifthe code is on your local computer and not yet in version control, eithercreate a new Git repo in your projector add your code to an existing repository.
From your web browser, open the team project for your organization and selectRepos>Files.
From your web browser, open the team project for your organization and selectRepos>Files.

SelectClone.
SelectClone.

Copythe URL.
Copythe URL.

Open the Git command window (Git Bash on Git for Windows). Go to the folder where you want the code from the repo stored on your computer, and rungit clone, followed by the path copied fromClone URLin the previous step. See the following example:git clone https://FabrikamFiber01@dev.azure.com/FabrikamFiber01/FabrikamFiber01-01/_git/FabrikamFiber01-01Git downloads a copy of the code, including allcommits, andbranchesfrom the repo, into a new folder for you to work with.
Open the Git command window (Git Bash on Git for Windows). Go to the folder where you want the code from the repo stored on your computer, and rungit clone, followed by the path copied fromClone URLin the previous step. See the following example:
git clone
git clone https://FabrikamFiber01@dev.azure.com/FabrikamFiber01/FabrikamFiber01-01/_git/FabrikamFiber01-01
git clone https://FabrikamFiber01@dev.azure.com/FabrikamFiber01/FabrikamFiber01-01/_git/FabrikamFiber01-01
Git downloads a copy of the code, including allcommits, andbranchesfrom the repo, into a new folder for you to work with.
Switch your directory to the repository that you cloned.cd fabrikam-webKeep this command window open to work in a branch.
Switch your directory to the repository that you cloned.
cd fabrikam-web
cd fabrikam-web
Keep this command window open to work in a branch.
2. Work in a branch
Gitbranchesisolate your changes from other work being done in the project. We recommend using theGit workflow, which uses a new branch for every feature or fix that you work on. For our examples, we use the branch,users/jamal/feature1.
users/jamal/feature1
Create a branch with thebranchcommand.git branch users/jamal/feature1This command creates a reference in Git for the new branch. It also creates a pointer back to the parent commit so Git can keep a history of changes as you add commits to the branch.If you're working with a previously cloned repository, ensure you checked out the right branch (git checkout main) and that it's up to date (git pull origin main) before you create your new branch.
Create a branch with thebranchcommand.
branch
git branch users/jamal/feature1
git branch users/jamal/feature1
This command creates a reference in Git for the new branch. It also creates a pointer back to the parent commit so Git can keep a history of changes as you add commits to the branch.
If you're working with a previously cloned repository, ensure you checked out the right branch (git checkout main) and that it's up to date (git pull origin main) before you create your new branch.
git checkout main
git pull origin main
Usecheckoutto switch to that branch.git checkout users/jamal/feature1Git changes the files on your computer to match the latest commit on the checked-out branch.TipWhen you create a branch from the command line, the branch is based on the currently checked-out branch. When you clone the repository, the default branch (typicallymain) gets checked out. Because you cloned, your local copy ofmainhas the latest changes.git checkout main
git pull origin main
git branch users/jamal/feature1
git checkout users/jamal/feature1You can replace the first three commands in the previous example with the following command, which creates a new branch namedusers/jamal/feature1based on the latestmainbranch.git pull origin main:users/jamal/feature1Switch back to the Git Bash window that you used in the previous section. Run the following commands to create and check out a new branch based on the main branch.git pull origin main:users/jamal/feature1
git checkout feature1
Usecheckoutto switch to that branch.
checkout
git checkout users/jamal/feature1
git checkout users/jamal/feature1
Git changes the files on your computer to match the latest commit on the checked-out branch.
Tip
When you create a branch from the command line, the branch is based on the currently checked-out branch. When you clone the repository, the default branch (typicallymain) gets checked out. Because you cloned, your local copy ofmainhas the latest changes.
main
main
git checkout main
git pull origin main
git branch users/jamal/feature1
git checkout users/jamal/feature1
git checkout main
git pull origin main
git branch users/jamal/feature1
git checkout users/jamal/feature1
You can replace the first three commands in the previous example with the following command, which creates a new branch namedusers/jamal/feature1based on the latestmainbranch.
users/jamal/feature1
main
git pull origin main:users/jamal/feature1
git pull origin main:users/jamal/feature1
Switch back to the Git Bash window that you used in the previous section. Run the following commands to create and check out a new branch based on the main branch.
git pull origin main:users/jamal/feature1
git checkout feature1
git pull origin main:users/jamal/feature1
git checkout feature1
3. Work with the code
In the following steps, we make a change to the files on your computer, commit the changes locally, and then push the commit to the repo stored on the server.
Browse to the folder on your computer where you cloned the repo, open theREADME.mdfile in your editor of choice, and make some changes. Then,Saveand close the file.
Browse to the folder on your computer where you cloned the repo, open theREADME.mdfile in your editor of choice, and make some changes. Then,Saveand close the file.
README.md
In the Git command window, go to thecontoso-demodirectory by entering the following command:cd contoso-demo
In the Git command window, go to thecontoso-demodirectory by entering the following command:
contoso-demo
cd contoso-demo
cd contoso-demo
Commit your changes by entering the following commands in the Git command window:git add .
git commit -m "My first commit"Thegit add .command stages any new or changed files, andgit commit -mcreates a commit with the specified commit message.Check which branch you're working on before you commit, so that you don't commit changes to the wrong branch. Git always adds new commits to the current local branch.
Commit your changes by entering the following commands in the Git command window:
git add .
git commit -m "My first commit"
git add .
git commit -m "My first commit"
Thegit add .command stages any new or changed files, andgit commit -mcreates a commit with the specified commit message.
git add .
git commit -m
Check which branch you're working on before you commit, so that you don't commit changes to the wrong branch. Git always adds new commits to the current local branch.
Push your changes to the Git repo on the server. Enter the following command into the Git command window:git push origin users/jamal/feature1
Push your changes to the Git repo on the server. Enter the following command into the Git command window:
git push origin users/jamal/feature1
git push origin users/jamal/feature1
Your code is now shared to the remote repository, in a branch namedusers/jamal/feature1. To merge the code from your working branch into themainbranch, use a pull request.
users/jamal/feature1
main
4. Merge your changes with a pull request
Pull requests combine the review and merge of your code into a single collaborative process. After youâre done fixing a bug or new feature in a branch, create a new pull request. Add the members of the team to the pull request so they can review and vote on your changes. Use pull requests to review works in progress and get early feedback on changes. Thereâs no commitment to merge the changes because you can abandon the pull request at any time.
The following example shows the basic steps of creating and completing a pull request.
Open the team project for your organization in your web browser and selectRepos>Files. If you kept your browser open after getting the clone URL, you can just switch back to it.
Open the team project for your organization in your web browser and selectRepos>Files. If you kept your browser open after getting the clone URL, you can just switch back to it.
SelectCreate a pull requestin the upper-right corner of theFileswindow. If you don't see a message likeYou updated users/jamal/feature1 just now, refresh your browser.New pull requests are configured to merge your branch into the default branch, which in this example ismain. The title and description are prepopulated with your commit message.You canadd reviewersandlink work itemsto your pull request.You can review the files included in the pull request at the bottom of theNew Pull Requestwindow.
SelectCreate a pull requestin the upper-right corner of theFileswindow. If you don't see a message likeYou updated users/jamal/feature1 just now, refresh your browser.

New pull requests are configured to merge your branch into the default branch, which in this example ismain. The title and description are prepopulated with your commit message.
main

You canadd reviewersandlink work itemsto your pull request.
You can review the files included in the pull request at the bottom of theNew Pull Requestwindow.

SelectCreate.View the details of your pull request from theOverviewtab. You can also view the changed files, updates, and commits in your pull request from the other tabs.
SelectCreate.
View the details of your pull request from theOverviewtab. You can also view the changed files, updates, and commits in your pull request from the other tabs.
SelectCompleteto begin the process of completing the pull request.
SelectCompleteto begin the process of completing the pull request.

SelectComplete mergeto complete the pull request and merge your code into themainbranch.NoteThis example shows the basic steps of creating and completing a pull request. For more information, seeCreate, view, and manage pull requests.
SelectComplete mergeto complete the pull request and merge your code into themainbranch.
main

Note
This example shows the basic steps of creating and completing a pull request. For more information, seeCreate, view, and manage pull requests.
Your changes are now merged into themainbranch, and yourusers/jamal/feature1branch is deleted on the remote repository.
main
users/jamal/feature1
View history
Switch back to the web portal and selectHistoryfrom theCodepage to view your new commit.
Switch back to the web portal and selectHistoryfrom theCodepage to view your new commit.

Switch to theFilestab, and select the README file to view your changes.
Switch to theFilestab, and select the README file to view your changes.

Clean up
To delete your local copy of the branch, switch back to your Git Bash command prompt and run the following command:
git checkout main
git pull origin main
git branch -d users/jamal/feature1
git checkout main
git pull origin main
git branch -d users/jamal/feature1
This action completes the following tasks:
Thegit checkout maincommand switches you to themainbranch.
git checkout main
main
Thegit pull origin maincommand pulls down the latest version of the code in the main branch, including your changes and the fact thatusers/jamal/feature1was merged.
git pull origin main
users/jamal/feature1
Thegit branch -d users/jamal/feature1command deletes your local copy of that branch.
git branch -d users/jamal/feature1
Next steps
Set up continuous integration & delivery
Related articles
Understand key concepts for new users to Azure Pipelines
Discover what Azure Repos is
Learn how to work with a Git repo
Explore what source control is
Feedback
Was this page helpful?
Additional resources