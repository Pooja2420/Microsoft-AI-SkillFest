Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Logging commands
Article
2025-02-04
25 contributors
In this article
Azure DevOps Services | Azure DevOps Server 2022 - Azure DevOps Server 2019
Logging commands are howtasksand scripts communicate with the agent.
They cover actions like creating newvariables, marking a step as failed, and uploadingartifacts. Logging commands are useful when you're troubleshooting a pipeline.
Important
We make an effort to mask secrets from appearing in Azure Pipelines output, but you still need to take precautions. Never echo secrets as output.
Some operating systems log command line arguments. Never pass secrets on the command line.
Instead, we suggest that you map your secrets into environment variables.
We never mask substrings of secrets. If, for example, "abc123" is set as a secret, "abc" isn't masked from the logs.
This is to avoid masking secrets at too granular of a level, making the logs unreadable.
For this reason, secrets shouldn't contain structured data. If, for example, "{ "foo": "bar" }" is set as a secret,
"bar" isn't masked from the logs.
Logging command format
The general format for a logging command is:
##vso[area.action property1=value;property2=value;...]message
##vso[area.action property1=value;property2=value;...]message
There are also a few formatting commands with a slightly different syntax:
##[command]message
##[command]message
To invoke a logging command, echo the command via standard output.
Bash
PowerShell
#!/bin/bash
echo "##vso[task.setvariable variable=testvar;]testvalue"
#!/bin/bash
echo "##vso[task.setvariable variable=testvar;]testvalue"
Write-Host "##vso[task.setvariable variable=testvar;]testvalue"
Write-Host "##vso[task.setvariable variable=testvar;]testvalue"
File paths should be given as absolute paths: rooted to a drive on Windows, or beginning with/on Linux and macOS.
/
Note
Note that you can't use theset -xcommand before a logging command when you're using Linux or macOS. Seetroubleshooting, to learn how to disableset -xtemporarily for Bash.
set -x
set -x
Formatting commands
Note
Use UTF-8 encoding for logging commands.
These commands are messages to the log formatter in Azure Pipelines.
They mark specific log lines as errors, warnings, collapsible sections, and so on.
The formatting commands are:
##[group]Beginning of a group
##[warning]Warning message
##[error]Error message
##[section]Start of a section
##[debug]Debug text
##[command]Command-line being run
##[endgroup]
##[group]Beginning of a group
##[warning]Warning message
##[error]Error message
##[section]Start of a section
##[debug]Debug text
##[command]Command-line being run
##[endgroup]
You can use the formatting commands in a bash or PowerShell task.
Bash
PowerShell
steps:
- bash: |
    echo "##[group]Beginning of a group"
    echo "##[warning]Warning message"
    echo "##[error]Error message"
    echo "##[section]Start of a section"
    echo "##[debug]Debug text"
    echo "##[command]Command-line being run"
    echo "##[endgroup]"
steps:
- bash: |
    echo "##[group]Beginning of a group"
    echo "##[warning]Warning message"
    echo "##[error]Error message"
    echo "##[section]Start of a section"
    echo "##[debug]Debug text"
    echo "##[command]Command-line being run"
    echo "##[endgroup]"
steps:
- powershell: |
    Write-Host "##[group]Beginning of a group"
    Write-Host "##[warning]Warning message"
    Write-Host "##[error]Error message"
    Write-Host "##[section]Start of a section"
    Write-Host "##[debug]Debug text"
    Write-Host "##[command]Command-line being run"
    Write-Host "##[endgroup]"
steps:
- powershell: |
    Write-Host "##[group]Beginning of a group"
    Write-Host "##[warning]Warning message"
    Write-Host "##[error]Error message"
    Write-Host "##[section]Start of a section"
    Write-Host "##[debug]Debug text"
    Write-Host "##[command]Command-line being run"
    Write-Host "##[endgroup]"
Those commands render in the logs like this:

That block of commands can also be collapsed, and looks like this:

Task commands
LogIssue: Log an error or warning
##vso[task.logissue]error/warning message
##vso[task.logissue]error/warning message
Log an error or warning message in the timeline record of the current task.
type=errororwarning(Required)
type
error
warning
sourcepath= source file location
sourcepath
linenumber= line number
linenumber
columnnumber= column number
columnnumber
code= error or warning code
code
Bash
PowerShell
#!/bin/bash
echo "##vso[task.logissue type=error]Something went very wrong."
exit 1
#!/bin/bash
echo "##vso[task.logissue type=error]Something went very wrong."
exit 1
Write-Host "##vso[task.logissue type=error]Something went very wrong."
exit 1
Write-Host "##vso[task.logissue type=error]Something went very wrong."
exit 1
Tip
exit 1is optional, but is often a command you'll issue soon after an error is logged. If you selectControl Options: Continue on error, then theexit 1will result in a partially successful build instead of a failed build. As an alternative, you can also usetask.logissue type=error.
exit 1
exit 1
task.logissue type=error
Bash
PowerShell
#!/bin/bash
echo "##vso[task.logissue type=warning;sourcepath=consoleapp/main.cs;linenumber=1;columnnumber=1;code=100;]Found something that could be a problem."
#!/bin/bash
echo "##vso[task.logissue type=warning;sourcepath=consoleapp/main.cs;linenumber=1;columnnumber=1;code=100;]Found something that could be a problem."
Write-Host "##vso[task.logissue type=warning;sourcepath=consoleapp/main.cs;linenumber=1;columnnumber=1;code=100;]Found something that could be a problem."
Write-Host "##vso[task.logissue type=warning;sourcepath=consoleapp/main.cs;linenumber=1;columnnumber=1;code=100;]Found something that could be a problem."
SetProgress: Show percentage completed
##vso[task.setprogress]current operation
##vso[task.setprogress]current operation
Set progress and current operation for the current task.
value= percentage of completion
value
Bash
PowerShell
echo "Begin a lengthy process..."
for i in {0..100..10}
do
   sleep 1
   echo "##vso[task.setprogress value=$i;]Sample Progress Indicator"
done
echo "Lengthy process is complete."
echo "Begin a lengthy process..."
for i in {0..100..10}
do
   sleep 1
   echo "##vso[task.setprogress value=$i;]Sample Progress Indicator"
done
echo "Lengthy process is complete."
Write-Host "Begin a lengthy process..."
$i=0
While ($i -le 100)
{
   Start-Sleep 1
   Write-Host "##vso[task.setprogress value=$i;]Sample Progress Indicator"
   $i += 10
}
Write-Host "Lengthy process is complete."
Write-Host "Begin a lengthy process..."
$i=0
While ($i -le 100)
{
   Start-Sleep 1
   Write-Host "##vso[task.setprogress value=$i;]Sample Progress Indicator"
   $i += 10
}
Write-Host "Lengthy process is complete."
To see how it looks, save and queue the build, and then watch the build run. Observe that a progress indicator changes when the task runs this script.
Complete: Finish timeline
##vso[task.complete]current operation
##vso[task.complete]current operation
Finish the timeline record for the current task, set task result and current operation. When result not provided, set result to succeeded.
result=SucceededThe task succeeded.SucceededWithIssuesThe task ran into problems. The build will be completed as partially succeeded at best.FailedThe build will be completed as failed. (If theControl Options: Continue on erroroption is selected, the build will be completed as partially succeeded at best.)
result
SucceededThe task succeeded.
Succeeded
SucceededWithIssuesThe task ran into problems. The build will be completed as partially succeeded at best.
SucceededWithIssues
FailedThe build will be completed as failed. (If theControl Options: Continue on erroroption is selected, the build will be completed as partially succeeded at best.)
Failed
Log a task as succeeded.
##vso[task.complete result=Succeeded;]DONE
##vso[task.complete result=Succeeded;]DONE
Set a task as failed. As an alternative, you can also useexit 1.
exit 1
- bash: |
    if [ -z "$SOLUTION" ]; then
      echo "##vso[task.logissue type=error;]Missing template parameter \"solution\""
      echo "##vso[task.complete result=Failed;]"
    fi
- bash: |
    if [ -z "$SOLUTION" ]; then
      echo "##vso[task.logissue type=error;]Missing template parameter \"solution\""
      echo "##vso[task.complete result=Failed;]"
    fi
LogDetail: Create or update a timeline record for a task
##vso[task.logdetail]current operation
##vso[task.logdetail]current operation
Creates and updates timeline records.
This is primarily used internally by Azure Pipelines to report about steps, jobs, and stages.
While customers can add entries to the timeline, they won't typically be shown in the UI.
The first time we see##vso[task.detail]during a step, we create a "detail timeline" record for the step. We can create and update nested timeline records base onidandparentid.
##vso[task.detail]
id
parentid
Task authors must remember which GUID they used for each timeline record.
The logging system keeps track of the GUID for each timeline record, so any new GUID results a new timeline record.
id= Timeline record GUID (Required)
id
parentid= Parent timeline record GUID
parentid
type= Record type (Required for first time, can't overwrite)
type
name= Record name (Required for first time, can't overwrite)
name
order= order of timeline record (Required for first time, can't overwrite)
order
starttime=Datetime
starttime
Datetime
finishtime=Datetime
finishtime
Datetime
progress= percentage of completion
progress
state=Unknown|Initialized|InProgress|Completed
state
Unknown
Initialized
InProgress
Completed
result=Succeeded|SucceededWithIssues|Failed
result
Succeeded
SucceededWithIssues
Failed
Create new root timeline record:
##vso[task.logdetail id=new guid;name=project1;type=build;order=1]create new timeline record
##vso[task.logdetail id=new guid;name=project1;type=build;order=1]create new timeline record
Create new nested timeline record:
##vso[task.logdetail id=new guid;parentid=exist timeline record guid;name=project1;type=build;order=1]create new nested timeline record
##vso[task.logdetail id=new guid;parentid=exist timeline record guid;name=project1;type=build;order=1]create new nested timeline record
Update exist timeline record:
##vso[task.logdetail id=existing timeline record guid;progress=15;state=InProgress;]update timeline record
##vso[task.logdetail id=existing timeline record guid;progress=15;state=InProgress;]update timeline record
SetVariable: Initialize or modify the value of a variable
##vso[task.setvariable]value
##vso[task.setvariable]value
Sets a variable in the variable service of taskcontext. The first task can set a variable, and following tasks are able to use the variable. The variable is exposed to the following tasks as an environment variable.
WhenisSecretis set totrue, the value of the variable will be saved as secret and masked out from log. Secret variables aren't passed into tasks as environment variables and must instead be passed as inputs.
isSecret
true
WhenisOutputis set totruethe syntax to reference the set variable varies based on whether you're accessing that variable in the same job, a future job, or a future stage. Additionally, ifisOutputis set tofalsethe syntax for using that variable within the same job is distinct. Seelevels of output variablesto determine the appropriate syntax for each use case.
isOutput
true
isOutput
false
For more information about output variables, seeset variables in scriptsanddefine variables.
variable= variable name (Required)
variable
isSecret= boolean (Optional, defaults to false)
isSecret
isOutput= boolean (Optional, defaults to false)
isOutput
isReadOnly= boolean (Optional, defaults to false)
isReadOnly
Bash
PowerShell
Set the variables:
- bash: |
    echo "##vso[task.setvariable variable=sauce;]crushed tomatoes"
    echo "##vso[task.setvariable variable=secretSauce;isSecret=true]crushed tomatoes with garlic"
    echo "##vso[task.setvariable variable=outputSauce;isOutput=true]canned goods"
  name: SetVars
- bash: |
    echo "##vso[task.setvariable variable=sauce;]crushed tomatoes"
    echo "##vso[task.setvariable variable=secretSauce;isSecret=true]crushed tomatoes with garlic"
    echo "##vso[task.setvariable variable=outputSauce;isOutput=true]canned goods"
  name: SetVars
Read the variables:
- bash: |
    echo "Non-secrets automatically mapped in, sauce is $SAUCE"
    echo "Secrets are not automatically mapped in, secretSauce is $SECRETSAUCE"
    echo "You can use macro replacement to get secrets, and they'll be masked in the log: $(secretSauce)"
- bash: |
    echo "Non-secrets automatically mapped in, sauce is $SAUCE"
    echo "Secrets are not automatically mapped in, secretSauce is $SECRETSAUCE"
    echo "You can use macro replacement to get secrets, and they'll be masked in the log: $(secretSauce)"
Set the variables:
- pwsh: |
    Write-Host "##vso[task.setvariable variable=sauce;]crushed tomatoes"
    Write-Host "##vso[task.setvariable variable=secretSauce;isSecret=true]crushed tomatoes with garlic"
    Write-Host "##vso[task.setvariable variable=outputSauce;isOutput=true]canned goods"
  name: SetVars
- pwsh: |
    Write-Host "##vso[task.setvariable variable=sauce;]crushed tomatoes"
    Write-Host "##vso[task.setvariable variable=secretSauce;isSecret=true]crushed tomatoes with garlic"
    Write-Host "##vso[task.setvariable variable=outputSauce;isOutput=true]canned goods"
  name: SetVars
Read the variables:
- pwsh: |
    Write-Host "Non-secrets automatically mapped in, sauce is $env:SAUCE"
    Write-Host "Secrets are not automatically mapped in, secretSauce is $env:SECRETSAUCE"
    Write-Host "You can use macro replacement to get secrets, and they'll be masked in the log: $(secretSauce)"
    Write-Host "Future jobs can also see $env:SETVARS_OUTPUTSAUCE"
    write-Host "Future jobs can also see $(SetVars.outputSauce)"
- pwsh: |
    Write-Host "Non-secrets automatically mapped in, sauce is $env:SAUCE"
    Write-Host "Secrets are not automatically mapped in, secretSauce is $env:SECRETSAUCE"
    Write-Host "You can use macro replacement to get secrets, and they'll be masked in the log: $(secretSauce)"
    Write-Host "Future jobs can also see $env:SETVARS_OUTPUTSAUCE"
    write-Host "Future jobs can also see $(SetVars.outputSauce)"
Console output:
Non-secrets automatically mapped in, sauce is crushed tomatoes
Secrets are not automatically mapped in, secretSauce is 
You can use macro replacement to get secrets, and they'll be masked in the log: ***
Future jobs can also see canned goods
Future jobs can also see canned goods
Non-secrets automatically mapped in, sauce is crushed tomatoes
Secrets are not automatically mapped in, secretSauce is 
You can use macro replacement to get secrets, and they'll be masked in the log: ***
Future jobs can also see canned goods
Future jobs can also see canned goods
SetSecret: Register a value as a secret
##vso[task.setsecret]value
##vso[task.setsecret]value
The value is registered as a secret for the duration of the job. The value will be masked out from the logs from this point forward. This command is useful when a secret is transformed (for example, base64 encoded) or derived.
Note: Previous occurrences of the secret value won't be masked.
Bash
PowerShell
Set the variables:
- bash: |
    NEWSECRET=$(echo $OLDSECRET|base64)
    echo "##vso[task.setsecret]$NEWSECRET"
  name: SetSecret
  env:
    OLDSECRET: "SeCrEtVaLuE"
- bash: |
    NEWSECRET=$(echo $OLDSECRET|base64)
    echo "##vso[task.setsecret]$NEWSECRET"
  name: SetSecret
  env:
    OLDSECRET: "SeCrEtVaLuE"
Read the variables:
- bash: |
    echo "Transformed and derived secrets will be masked: $(echo $OLDSECRET|base64)"
  env:
    OLDSECRET: "SeCrEtVaLuE"
- bash: |
    echo "Transformed and derived secrets will be masked: $(echo $OLDSECRET|base64)"
  env:
    OLDSECRET: "SeCrEtVaLuE"
Set the variables:
- pwsh: |
    $NewSecret = [convert]::ToBase64String([Text.Encoding]::UTF8.GetBytes($env:OLDSECRET))
    Write-Host "##vso[task.setsecret]$NewSecret"
  name: SetSecret
  env:
    OLDSECRET: "SeCrEtVaLuE"
- pwsh: |
    $NewSecret = [convert]::ToBase64String([Text.Encoding]::UTF8.GetBytes($env:OLDSECRET))
    Write-Host "##vso[task.setsecret]$NewSecret"
  name: SetSecret
  env:
    OLDSECRET: "SeCrEtVaLuE"
Read the variables:
- pwsh: |
    Write-Host "Transformed and derived secrets will be masked: $([convert]::ToBase64String([Text.Encoding]::UTF8.GetBytes($env:OLDSECRET)))"
  env:
    OLDSECRET: "SeCrEtVaLuE"
- pwsh: |
    Write-Host "Transformed and derived secrets will be masked: $([convert]::ToBase64String([Text.Encoding]::UTF8.GetBytes($env:OLDSECRET)))"
  env:
    OLDSECRET: "SeCrEtVaLuE"
Console output:
Transformed and derived secrets will be masked: ***
Transformed and derived secrets will be masked: ***
SetEndpoint: Modify a service connection field
##vso[task.setendpoint]value
##vso[task.setendpoint]value
Set a service connection field with given value.
Value updated will be retained in the endpoint for the subsequent tasks that execute within the same job.
id= service connection ID (Required)
id
field= field type, one ofauthParameter,dataParameter, orurl(Required)
field
authParameter
dataParameter
url
key= key (Required, unlessfield=url)
key
field
url
##vso[task.setendpoint id=000-0000-0000;field=authParameter;key=AccessToken]testvalue
##vso[task.setendpoint id=000-0000-0000;field=dataParameter;key=userVariable]testvalue
##vso[task.setendpoint id=000-0000-0000;field=url]https://example.com/service
##vso[task.setendpoint id=000-0000-0000;field=authParameter;key=AccessToken]testvalue
##vso[task.setendpoint id=000-0000-0000;field=dataParameter;key=userVariable]testvalue
##vso[task.setendpoint id=000-0000-0000;field=url]https://example.com/service
AddAttachment: Attach a file to the build
##vso[task.addattachment]value
##vso[task.addattachment]value
Upload and attach attachment to current timeline record. These files aren't available for download with logs. These can only be referred to by extensions using the type or name values.
type= attachment type (Required)
type
name= attachment name (Required)
name
##vso[task.addattachment type=myattachmenttype;name=myattachmentname;]c:\myattachment.txt
##vso[task.addattachment type=myattachmenttype;name=myattachmentname;]c:\myattachment.txt
UploadSummary: Add some Markdown content to the build summary
##vso[task.uploadsummary]local file path
##vso[task.uploadsummary]local file path
Upload and attach summary Markdown from an .md file in the repository to current timeline record. This summary shall be added to the build/release summary and not available for download with logs. The summary should be in UTF-8 or ASCII format. The summary appears on theExtensionstab of your pipeline run. Markdown rendering on the Extensions tab is different from Azure DevOps wiki rendering. For more information on Markdown syntax, see theMarkdown Guide.
##vso[task.uploadsummary]$(System.DefaultWorkingDirectory)/testsummary.md
##vso[task.uploadsummary]$(System.DefaultWorkingDirectory)/testsummary.md
It's a short hand form for the command
##vso[task.addattachment type=Distributedtask.Core.Summary;name=testsummaryname;]c:\testsummary.md
##vso[task.addattachment type=Distributedtask.Core.Summary;name=testsummaryname;]c:\testsummary.md
UploadFile: Upload a file that can be downloaded with task logs
##vso[task.uploadfile]local file path
##vso[task.uploadfile]local file path
Upload user interested file as additional log information to the current timeline record. The file shall be available for download along with task logs.
##vso[task.uploadfile]c:\additionalfile.log
##vso[task.uploadfile]c:\additionalfile.log
PrependPath: Prepend a path to the  PATH environment variable
##vso[task.prependpath]local file path
##vso[task.prependpath]local file path
Update the PATH environment variable by prepending to the PATH.
The updated environment variable will be reflected in subsequent tasks.
##vso[task.prependpath]c:\my\directory\path
##vso[task.prependpath]c:\my\directory\path
Artifact commands
Artifact publishing is not supported in Classic release pipelines.
Associate: Initialize an artifact
##vso[artifact.associate]artifact location
##vso[artifact.associate]artifact location
Create a link to an existing Artifact. Artifact location must be a file container path, VC path or UNC share path.
artifactname= artifact name (Required)
artifactname
type= artifact type (Required)container|filepath|versioncontrol|gitref|tfvclabel
type
container
filepath
versioncontrol
gitref
tfvclabel
container##vso[artifact.associate type=container;artifactname=MyServerDrop]#/1/build
container
##vso[artifact.associate type=container;artifactname=MyServerDrop]#/1/build
##vso[artifact.associate type=container;artifactname=MyServerDrop]#/1/build
filepath##vso[artifact.associate type=filepath;artifactname=MyFileShareDrop]\\MyShare\MyDropLocation
filepath
##vso[artifact.associate type=filepath;artifactname=MyFileShareDrop]\\MyShare\MyDropLocation
##vso[artifact.associate type=filepath;artifactname=MyFileShareDrop]\\MyShare\MyDropLocation
versioncontrol##vso[artifact.associate type=versioncontrol;artifactname=MyTfvcPath]$/MyTeamProj/MyFolder
versioncontrol
##vso[artifact.associate type=versioncontrol;artifactname=MyTfvcPath]$/MyTeamProj/MyFolder
##vso[artifact.associate type=versioncontrol;artifactname=MyTfvcPath]$/MyTeamProj/MyFolder
gitref##vso[artifact.associate type=gitref;artifactname=MyTag]refs/tags/MyGitTag
gitref
##vso[artifact.associate type=gitref;artifactname=MyTag]refs/tags/MyGitTag
##vso[artifact.associate type=gitref;artifactname=MyTag]refs/tags/MyGitTag
tfvclabel##vso[artifact.associate type=tfvclabel;artifactname=MyTag]MyTfvcLabel
tfvclabel
##vso[artifact.associate type=tfvclabel;artifactname=MyTag]MyTfvcLabel
##vso[artifact.associate type=tfvclabel;artifactname=MyTag]MyTfvcLabel
Custom Artifact##vso[artifact.associate artifactname=myDrop;artifacttype=myartifacttype]https://downloads.visualstudio.com/foo/bar/package.zip
Custom Artifact
##vso[artifact.associate artifactname=myDrop;artifacttype=myartifacttype]https://downloads.visualstudio.com/foo/bar/package.zip
##vso[artifact.associate artifactname=myDrop;artifacttype=myartifacttype]https://downloads.visualstudio.com/foo/bar/package.zip
Upload: Upload an artifact
##vso[artifact.upload]local file path
##vso[artifact.upload]local file path
Upload a local file into a file container folder, and optionally publish an artifact asartifactname.
artifactname
containerfolder= folder that the file will upload to, folder will be created if needed.
containerfolder
artifactname= artifact name. (Required)
artifactname
##vso[artifact.upload containerfolder=testresult;artifactname=uploadedresult]c:\testresult.trx
##vso[artifact.upload containerfolder=testresult;artifactname=uploadedresult]c:\testresult.trx
Note
The difference between Artifact.associate and Artifact.upload is that the first can be used to create a link to an existing artifact, while the latter can be used to upload/publish a new Artifact.
Build commands
UploadLog: Upload a log
##vso[build.uploadlog]local file path
##vso[build.uploadlog]local file path
Upload user interested log to build's container "logs\tool" folder.
logs\tool
##vso[build.uploadlog]c:\msbuild.log
##vso[build.uploadlog]c:\msbuild.log
UpdateBuildNumber: Override the automatically generated build number
##vso[build.updatebuildnumber]build number
##vso[build.updatebuildnumber]build number
You can automatically generate a build number from tokens you specify in thepipeline options. However, if you want to use your own logic to set the build number, then you can use this logging command.
##vso[build.updatebuildnumber]my-new-build-number
##vso[build.updatebuildnumber]my-new-build-number
AddBuildTag: Add a tag to the build
##vso[build.addbuildtag]build tag
##vso[build.addbuildtag]build tag
Add a tag for current build. You can expand the tag with a predefined or user-defined variable. For example, here a new tag gets added in a Bash task with the valuelast_scanned-$(currentDate). You can't use a colon with AddBuildTag.
last_scanned-$(currentDate)
- task: Bash@3
    inputs:
    targetType: 'inline'
    script: |
        last_scanned="last_scanned-$(currentDate)"
        echo "##vso[build.addbuildtag]$last_scanned"
    displayName: 'Apply last scanned tag'
- task: Bash@3
    inputs:
    targetType: 'inline'
    script: |
        last_scanned="last_scanned-$(currentDate)"
        echo "##vso[build.addbuildtag]$last_scanned"
    displayName: 'Apply last scanned tag'
Release commands
UpdateReleaseName: Rename current release
##vso[release.updatereleasename]release name
##vso[release.updatereleasename]release name
Update the release name for the running release.
Note
Supported in Azure DevOps and Azure DevOps Server beginning in version 2020.
##vso[release.updatereleasename]my-new-release-name
##vso[release.updatereleasename]my-new-release-name
Feedback
Was this page helpful?
Additional resources