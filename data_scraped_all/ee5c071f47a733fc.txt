Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Rehydrate an archived blob to an online tier
Article
2023-03-10
6 contributors
In this article
To read a blob that is in the archive tier, you must first rehydrate the blob to an online (hot, cool, or cold) tier. You can rehydrate a blob in one of two ways:
By copying it to a new blob in the hot, cool, or cold tier with theCopy Bloboperation.
By changing its tier from archive to hot, cool, or cold tier with theSet Blob Tieroperation.
When you rehydrate a blob, you can specify the priority for the operation to either standard priority or high priority. A standard-priority rehydration operation may take up to 15 hours to complete. A high-priority operation is prioritized over standard-priority requests and may complete in less than one hour for objects under 10 GB in size. You can change the rehydration priority fromStandardtoHighwhile the operation is pending.
You can configure Azure Event Grid to fire an event when rehydration is complete and run application code in response. To learn how to handle an event that runs an Azure Function when the blob rehydration operation is complete, seeRun an Azure Function in response to a blob rehydration event.
For more information about rehydrating a blob, seeBlob rehydration from the archive tier.
Rehydrate a blob with a copy operation
To rehydrate a blob from the archive tier by copying it to an online tier, use the Azure portal, PowerShell, Azure CLI, or one of the Azure Storage client libraries. Keep in mind that when you copy an archived blob to an online tier, the source and destination blobs must have different names.
Copying an archived blob to an online destination tier is supported within the same storage account. Beginning with service version 2021-02-12, you can copy an archived blob to a different storage account, as long as the destination account is in the same region as the source account.
After the copy operation is complete, the destination blob appears in the archive tier. The destination blob is then rehydrated to the online tier that you specified in the copy operation. When the destination blob is fully rehydrated, it becomes available in the new online tier.
Rehydrate a blob to the same storage account
The following examples show how to copy an archived blob to a blob in the hot tier in the same storage account.
Portal
PowerShell
Azure CLI
AzCopy
Navigate to the source storage account in the Azure portal.
Navigate to the source storage account in the Azure portal.
In the navigation pane for the storage account, selectStorage browser.
In the navigation pane for the storage account, selectStorage browser.

In storage browser, navigate to the location of the archived blob, select the checkbox that appears beside the blob, and then select theCopybutton.
In storage browser, navigate to the location of the archived blob, select the checkbox that appears beside the blob, and then select theCopybutton.

Navigate to the container where you would like to place the rehydrated blob, and then select thePastebutton.ThePaste archive blobdialog box appears.NoteIf you select thePastebutton while in the same location as the source blob, then the default name that appears in theDestination blob namefield contains a numeric suffix. This ensures that the source and destination blobs have different names. You can change this name if you want as long as the name is different than the name of the source blob.
Navigate to the container where you would like to place the rehydrated blob, and then select thePastebutton.
ThePaste archive blobdialog box appears.

Note
If you select thePastebutton while in the same location as the source blob, then the default name that appears in theDestination blob namefield contains a numeric suffix. This ensures that the source and destination blobs have different names. You can change this name if you want as long as the name is different than the name of the source blob.
In thePaste archive blobdialog box, choose an access tier and a rehydration priority. Then, selectPasteto rehydrate the blob.ImportantDon't delete the source blob while it is rehydrating.
In thePaste archive blobdialog box, choose an access tier and a rehydration priority. Then, selectPasteto rehydrate the blob.
Important
Don't delete the source blob while it is rehydrating.
To copy an archived blob to an online tier with PowerShell, call theStart-AzStorageBlobCopycommand and specify the target tier and the rehydration priority. Remember to replace placeholders in angle brackets with your own values:
# Initialize these variables with your values.
$rgName = "<resource-group>"
$accountName = "<storage-account>"
$srcContainerName = "<source-container>"
$destContainerName = "<dest-container>"
$srcBlobName = "<source-blob>"
$destBlobName = "<dest-blob>"

# Get the storage account context
$ctx = (Get-AzStorageAccount `
        -ResourceGroupName $rgName `
        -Name $accountName).Context

# Copy the source blob to a new destination blob in hot tier with Standard priority.
Start-AzStorageBlobCopy -SrcContainer $srcContainerName `
    -SrcBlob $srcBlobName `
    -DestContainer $destContainerName `
    -DestBlob $destBlobName `
    -StandardBlobTier Hot `
    -RehydratePriority Standard `
    -Context $ctx
# Initialize these variables with your values.
$rgName = "<resource-group>"
$accountName = "<storage-account>"
$srcContainerName = "<source-container>"
$destContainerName = "<dest-container>"
$srcBlobName = "<source-blob>"
$destBlobName = "<dest-blob>"

# Get the storage account context
$ctx = (Get-AzStorageAccount `
        -ResourceGroupName $rgName `
        -Name $accountName).Context

# Copy the source blob to a new destination blob in hot tier with Standard priority.
Start-AzStorageBlobCopy -SrcContainer $srcContainerName `
    -SrcBlob $srcBlobName `
    -DestContainer $destContainerName `
    -DestBlob $destBlobName `
    -StandardBlobTier Hot `
    -RehydratePriority Standard `
    -Context $ctx
To copy an archived blob to an online tier with Azure CLI, call theaz storage blob copy startcommand and specify the target tier and the rehydration priority. Remember to replace placeholders in angle brackets with your own values:
az storage blob copy start \
    --source-container <source-container> \
    --source-blob <source-blob> \
    --destination-container <dest-container> \
    --destination-blob <dest-blob> \
    --account-name <storage-account> \
    --tier hot \
    --rehydrate-priority standard \
    --auth-mode login
az storage blob copy start \
    --source-container <source-container> \
    --source-blob <source-blob> \
    --destination-container <dest-container> \
    --destination-blob <dest-blob> \
    --account-name <storage-account> \
    --tier hot \
    --rehydrate-priority standard \
    --auth-mode login
N/A
Rehydrate a blob to a different storage account in the same region
The following examples show how to copy an archived blob to a blob in the hot tier in a different storage account.
Note
The destination and source account must be in the same region.
Portal
PowerShell
Azure CLI
AzCopy
Navigate to the source storage account in the Azure portal.
Navigate to the source storage account in the Azure portal.
In the navigation pane for the storage account, selectStorage browser.
In the navigation pane for the storage account, selectStorage browser.

In storage browser, navigate to the location of the archived blob, select the checkbox that appears beside the blob, and then select theCopybutton.
In storage browser, navigate to the location of the archived blob, select the checkbox that appears beside the blob, and then select theCopybutton.

Navigate to the destination storage account, and in the navigation pane, selectStorage browser.
Navigate to the destination storage account, and in the navigation pane, selectStorage browser.

Navigate to the container where you would like to place the rehydrated blob, and then select thePastebutton.ThePaste archive blobdialog box appears.
Navigate to the container where you would like to place the rehydrated blob, and then select thePastebutton.

ThePaste archive blobdialog box appears.

In thePaste archive blobdialog box, choose an access tier and a rehydration priority. Then, selectPasteto rehydrate the blob.ImportantDon't delete the source blob while it is rehydrating.
In thePaste archive blobdialog box, choose an access tier and a rehydration priority. Then, selectPasteto rehydrate the blob.
Important
Don't delete the source blob while it is rehydrating.
To copy an archived blob to a blob in an online tier in a different storage account with PowerShell, make sure you've installed theAz.Storagemodule, version 4.4.0 or higher. Next, call theStart-AzStorageBlobCopycommand and specify the target online tier and the rehydration priority. You must specify a shared access signature (SAS) with read permissions for the archived source blob.
The following example shows how to copy an archived blob to the hot tier in a different storage account. Remember to replace placeholders in angle brackets with your own values:
$rgName = "<resource-group>"
$srcAccount = "<source-account>"
$destAccount = "<dest-account>"
$srcContainer = "<source-container>"
$destContainer = "<dest-container>" 
$srcBlob = "<source-blob>"
$destBlob = "<destination-blob>"

# Get the destination account context
$destCtx = New-AzStorageContext -StorageAccountName $destAccount -UseConnectedAccount

# Get the source account context
$srcCtx = New-AzStorageContext -StorageAccountName $srcAccount -UseConnectedAccount

# Get the SAS URI for the source blob
$srcBlobUri = New-AzStorageBlobSASToken -Container $srcContainer `
    -Blob $srcBlob `
    -Permission rwd `
    -ExpiryTime (Get-Date).AddDays(1) `
    -FullUri `
    -Context $srcCtx

# Start the cross-account copy operation
Start-AzStorageBlobCopy -AbsoluteUri $srcBlobUri `
    -DestContainer $destContainer `
    -DestBlob $destBlob `
    -DestContext $destCtx `
    -StandardBlobTier Hot `
    -RehydratePriority Standard
$rgName = "<resource-group>"
$srcAccount = "<source-account>"
$destAccount = "<dest-account>"
$srcContainer = "<source-container>"
$destContainer = "<dest-container>" 
$srcBlob = "<source-blob>"
$destBlob = "<destination-blob>"

# Get the destination account context
$destCtx = New-AzStorageContext -StorageAccountName $destAccount -UseConnectedAccount

# Get the source account context
$srcCtx = New-AzStorageContext -StorageAccountName $srcAccount -UseConnectedAccount

# Get the SAS URI for the source blob
$srcBlobUri = New-AzStorageBlobSASToken -Container $srcContainer `
    -Blob $srcBlob `
    -Permission rwd `
    -ExpiryTime (Get-Date).AddDays(1) `
    -FullUri `
    -Context $srcCtx

# Start the cross-account copy operation
Start-AzStorageBlobCopy -AbsoluteUri $srcBlobUri `
    -DestContainer $destContainer `
    -DestBlob $destBlob `
    -DestContext $destCtx `
    -StandardBlobTier Hot `
    -RehydratePriority Standard
To copy an archived blob to a blob in an online tier in a different storage account with the Azure CLI, make sure you have installed version 2.35.0 or higher. Next, call theaz storage blob copy startcommand and specify the target online tier and the rehydration priority. You must specify a shared access signature (SAS) with read permissions for the archived source blob.
The following example shows how to copy an archived blob to the hot tier in a different storage account. Remember to replace placeholders in angle brackets with your own values:
# Specify the expiry interval
end=`date -u -d "1 day" '+%Y-%m-%dT%H:%MZ'`

# Get a SAS for the source blob
srcBlobUri=$(az storage blob generate-sas \
            --account-name <source-account> \ 
            --container <source-container> \
            --name <archived-source-blob> \
            --permissions rwd \
            --expiry $end \
            --https-only \
            --full-uri \
            --as-user \
            --auth-mode login | tr -d '"')

# Copy to the destination blob in the hot tier
az storage blob copy start \
    --source-uri $srcBlobUri \
    --account-name <dest-account> \
    --destination-container <dest-container> \
    --destination-blob <dest-blob> \
    --tier Hot \
    --rehydrate-priority Standard \
    --auth-mode login
# Specify the expiry interval
end=`date -u -d "1 day" '+%Y-%m-%dT%H:%MZ'`

# Get a SAS for the source blob
srcBlobUri=$(az storage blob generate-sas \
            --account-name <source-account> \ 
            --container <source-container> \
            --name <archived-source-blob> \
            --permissions rwd \
            --expiry $end \
            --https-only \
            --full-uri \
            --as-user \
            --auth-mode login | tr -d '"')

# Copy to the destination blob in the hot tier
az storage blob copy start \
    --source-uri $srcBlobUri \
    --account-name <dest-account> \
    --destination-container <dest-container> \
    --destination-blob <dest-blob> \
    --tier Hot \
    --rehydrate-priority Standard \
    --auth-mode login
N/A
If you've configured your storage account to use read-access geo-redundant storage (RA-GRS), then you can copy an archived blob that is located in a secondary region to an online tier in a different storage account that is located in that same secondary region.
To rehydrate from a secondary region, use the same guidance that is presented in the previous section (Rehydrate a blob to a different storage account in the same region. Append the suffix-secondaryto the account name of the source endpoint. For example, if your primary endpoint for Blob storage ismyaccount.blob.core.windows.net, then the secondary endpoint ismyaccount-secondary.blob.core.windows.net. The account access keys for your storage account are the same for both the primary and secondary endpoints.
-secondary
myaccount.blob.core.windows.net
myaccount-secondary.blob.core.windows.net
To learn more about obtaining read access to secondary regions, seeRead access to data in the secondary region.
Rehydrate a blob by changing its tier
To rehydrate a blob by changing its tier from archive to hot or cool, use the Azure portal, PowerShell, or Azure CLI.
Portal
PowerShell
Azure CLI
AzCopy
To change a blob's tier from archive to hot or cool in the Azure portal, follow these steps:
Locate the blob to rehydrate in the Azure portal.
Locate the blob to rehydrate in the Azure portal.
Select theMorebutton on the right side of the page.
Select theMorebutton on the right side of the page.
SelectChange tier.
SelectChange tier.
Select the target access tier from theAccess tierdropdown.
Select the target access tier from theAccess tierdropdown.
From theRehydrate prioritydropdown, select the desired rehydration priority. Keep in mind that setting the rehydration priority toHightypically results in a faster rehydration, but also incurs a greater cost.
From theRehydrate prioritydropdown, select the desired rehydration priority. Keep in mind that setting the rehydration priority toHightypically results in a faster rehydration, but also incurs a greater cost.

Select theSavebutton.
Select theSavebutton.
To change a blob's tier from archive to hot or cool with PowerShell, use the blob'sBlobClientproperty to return a .NET reference to the blob, then call theSetAccessTiermethod on that reference. Remember to replace placeholders in angle brackets with your own values:
# Initialize these variables with your values.
$rgName = "<resource-group>"
$accountName = "<storage-account>"
$containerName = "<container>"
$blobName = "<archived-blob>"

# Get the storage account context
$ctx = (Get-AzStorageAccount `
        -ResourceGroupName $rgName `
        -Name $accountName).Context

# Change the blob's access tier to hot with Standard priority.
$blob = Get-AzStorageBlob -Container $containerName -Blob $blobName -Context $ctx
$blob.BlobClient.SetAccessTier("Hot", $null, "Standard")
# Initialize these variables with your values.
$rgName = "<resource-group>"
$accountName = "<storage-account>"
$containerName = "<container>"
$blobName = "<archived-blob>"

# Get the storage account context
$ctx = (Get-AzStorageAccount `
        -ResourceGroupName $rgName `
        -Name $accountName).Context

# Change the blob's access tier to hot with Standard priority.
$blob = Get-AzStorageBlob -Container $containerName -Blob $blobName -Context $ctx
$blob.BlobClient.SetAccessTier("Hot", $null, "Standard")
To change a blob's tier from archive to hot or cool with Azure CLI, call theaz storage blob set-tiercommand. Remember to replace placeholders in angle brackets with your own values:
az storage blob set-tier \
    --account-name <storage-account> \
    --container-name <container> \
    --name <archived-blob> \
    --tier Hot \
    --rehydrate-priority Standard \
    --auth-mode login
az storage blob set-tier \
    --account-name <storage-account> \
    --container-name <container> \
    --name <archived-blob> \
    --tier Hot \
    --rehydrate-priority Standard \
    --auth-mode login
To change a blob's tier from archive to hot or cool with AzCopy, use theazcopy set-propertiescommand and set the-block-blob-tierparameter to the desired tier, and the--rehydrate-prioritytostandardorhigh. By default, this parameter is set tostandard. To learn more about the trade offs of each option, seeRehydration priority.
-block-blob-tier
--rehydrate-priority
standard
high
standard
Important
The ability to change a blob's tier by using AzCopy is currently in PREVIEW.
See theSupplemental Terms of Use for Microsoft Azure Previewsfor legal terms that apply to Azure features that are in beta, preview, or otherwise not yet released into general availability.
Note
This example encloses path arguments with single quotes (''). Use single quotes in all command shells except for the Windows Command Shell (cmd.exe). If you're using a Windows Command Shell (cmd.exe), enclose path arguments with double quotes ("") instead of single quotes ('').This example also contains no SAS token because it assumes that you've provided authorization credentials by using Microsoft Entra ID.  See theGet started with AzCopyarticle to learn about the ways that you can provide authorization credentials to the storage service.
azcopy set-properties 'https://<storage-account-name>.blob.core.windows.net/<container-name>/<blob-name>' --block-blob-tier=hot --rehydrate-priority=high
azcopy set-properties 'https://<storage-account-name>.blob.core.windows.net/<container-name>/<blob-name>' --block-blob-tier=hot --rehydrate-priority=high
Bulk rehydrate a set of blobs
To rehydrate archived blobs in a container or folder to the hot or cool tier, enumerate through the blobs and call the Set Blob Tier operation on each one. The following example shows you how to perform this operation:
Portal
PowerShell
Azure CLI
AzCopy
N/A
# Initialize these variables with your values.
    $rgName = "<resource-group>"
    $accountName = "<storage-account>"
    $containerName = "<container>"
    $folderName = "<folder>/"
    
    $ctx = (Get-AzStorageAccount -ResourceGroupName $rgName -Name $accountName).Context
    
    $blobCount = 0
    $Token = $Null
    $MaxReturn = 5000
    
    do {
        $Blobs = Get-AzStorageBlob -Context $ctx -Container $containerName -Prefix $folderName -MaxCount $MaxReturn -ContinuationToken $Token
        if($Blobs -eq $Null) { break }
        #Set-StrictMode will cause Get-AzureStorageBlob returns result in different data types when there is only one blob
        if($Blobs.GetType().Name -eq "AzureStorageBlob")
        {
            $Token = $Null
        }
        else
        {
            $Token = $Blobs[$Blobs.Count - 1].ContinuationToken;
        }
        $Blobs | ForEach-Object {
                if(($_.BlobType -eq "BlockBlob") -and ($_.AccessTier -eq "Archive") ) {
                    $_.BlobClient.SetAccessTier("Hot", $null, "Standard")
                }
            }
    }
    While ($Token -ne $Null)
# Initialize these variables with your values.
    $rgName = "<resource-group>"
    $accountName = "<storage-account>"
    $containerName = "<container>"
    $folderName = "<folder>/"
    
    $ctx = (Get-AzStorageAccount -ResourceGroupName $rgName -Name $accountName).Context
    
    $blobCount = 0
    $Token = $Null
    $MaxReturn = 5000
    
    do {
        $Blobs = Get-AzStorageBlob -Context $ctx -Container $containerName -Prefix $folderName -MaxCount $MaxReturn -ContinuationToken $Token
        if($Blobs -eq $Null) { break }
        #Set-StrictMode will cause Get-AzureStorageBlob returns result in different data types when there is only one blob
        if($Blobs.GetType().Name -eq "AzureStorageBlob")
        {
            $Token = $Null
        }
        else
        {
            $Token = $Blobs[$Blobs.Count - 1].ContinuationToken;
        }
        $Blobs | ForEach-Object {
                if(($_.BlobType -eq "BlockBlob") -and ($_.AccessTier -eq "Archive") ) {
                    $_.BlobClient.SetAccessTier("Hot", $null, "Standard")
                }
            }
    }
    While ($Token -ne $Null)
az storage blob list --account-name $accountName --account-key $key \
    --container-name $containerName --prefix $folderName \
    --query "[?properties.blobTier == 'Archive'].name" --output tsv \
    | xargs -I {} -P 10 \
    az storage blob set-tier --account-name $accountName --account-key $key \
    --container-name $containerName --tier Hot --name "{}"
az storage blob list --account-name $accountName --account-key $key \
    --container-name $containerName --prefix $folderName \
    --query "[?properties.blobTier == 'Archive'].name" --output tsv \
    | xargs -I {} -P 10 \
    az storage blob set-tier --account-name $accountName --account-key $key \
    --container-name $containerName --tier Hot --name "{}"
N/A
To rehydrate a large number of blobs at one time, call theBlob Batchoperation to callSet Blob Tieras a bulk operation.
For a code example that shows how to perform the batch operation, seeAzBulkSetBlobTier.
Check the status of a rehydration operation
While the blob is rehydrating, you can check its status and rehydration priority using the Azure portal, PowerShell, or Azure CLI. The status property may returnrehydrate-pending-to-hotorrehydrate-pending-to-cool, depending on the target tier for the rehydration operation. The rehydration priority property returns eitherStandardorHigh.
Keep in mind that rehydration of an archived blob may take up to 15 hours, and repeatedly polling the blob's status to determine whether rehydration is complete is inefficient. Using Azure Event Grid to capture the event that fires when rehydration is complete offers better performance and cost optimization. To learn how to run an Azure Function when an event fires on blob rehydration, seeRun an Azure Function in response to a blob rehydration event.
Portal
PowerShell
Azure CLI
AzCopy
To check the status and priority of a pending rehydration operation in the Azure portal, display theChange tierdialog for the blob:

When the rehydration is complete, you can see in the Azure portal that the fully rehydrated blob now appears in the targeted online tier.

To check the status and priority of a pending rehydration operation with PowerShell, call theGet-AzStorageBlobcommand, and check theArchiveStatusandRehydratePriorityproperties of the blob. If the rehydration is a copy operation, check these properties on the destination blob. Remember to replace placeholders in angle brackets with your own values:
$rehydratingBlob = Get-AzStorageBlob -Container $containerName -Blob $blobName -Context $ctx
$rehydratingBlob.BlobProperties.ArchiveStatus
$rehydratingBlob.BlobProperties.RehydratePriority
$rehydratingBlob = Get-AzStorageBlob -Container $containerName -Blob $blobName -Context $ctx
$rehydratingBlob.BlobProperties.ArchiveStatus
$rehydratingBlob.BlobProperties.RehydratePriority
To check the status and priority of a pending rehydration operation with Azure CLI, call theaz storage blob showcommand, and check therehydrationStatusandrehydratePriorityproperties of the destination blob. Remember to replace placeholders in angle brackets with your own values:
az storage blob show \
    --account-name <storage-account> \
    --container-name <container> \
    --name <blob> \
    --query '[rehydratePriority, properties.rehydrationStatus]' \
    --output tsv \
    --auth-mode login
az storage blob show \
    --account-name <storage-account> \
    --container-name <container> \
    --name <blob> \
    --query '[rehydratePriority, properties.rehydrationStatus]' \
    --output tsv \
    --auth-mode login
N/A
Change the rehydration priority of a pending operation
While a standard-priority rehydration operation is pending, you can change the rehydration priority setting for a blob fromStandardtoHighto rehydrate that blob more quickly.
The rehydration priority setting can't be lowered fromHightoStandardfor a pending operation. Also keep in mind that changing the rehydration priority may have a billing impact. For more information, seeBlob rehydration from the archive tier.
Change the rehydration priority for a pending Set Blob Tier operation
To change the rehydration priority while a standard-prioritySet Blob Tieroperation is pending, use the Azure portal, PowerShell, Azure CLI, or one of the Azure Storage client libraries.
Portal
PowerShell
Azure CLI
AzCopy
To change the rehydration priority for a pending operation with the Azure portal, follow these steps:
Navigate to the blob for which you want to change the rehydration priority, and select the blob.
Navigate to the blob for which you want to change the rehydration priority, and select the blob.
Select theChange tierbutton.
Select theChange tierbutton.
In theChange tierdialog, set the access tier to the target online access tier for the rehydrating blob (hot or cool). TheArchive statusfield shows the target online tier.
In theChange tierdialog, set the access tier to the target online access tier for the rehydrating blob (hot or cool). TheArchive statusfield shows the target online tier.
In theRehydrate prioritydropdown, set the priority toHigh.
In theRehydrate prioritydropdown, set the priority toHigh.
SelectSave.
SelectSave.

To change the rehydration priority for a pending operation with PowerShell, make sure that you've installed theAz.Storagemodule, version 3.12.0 or later. Next, get the blob's properties from the service. This step is necessary to ensure that you have an object with the most recent property settings. Finally, use the blob'sBlobClientproperty to return a .NET reference to the blob, then call theSetAccessTiermethod on that reference.
# Get the blob from the service.
$rehydratingBlob = Get-AzStorageBlob -Container $containerName -Blob $blobName -Context $ctx

# Verify that the current rehydration priority is Standard. 
if ($rehydratingBlob.BlobProperties.RehydratePriority -eq "Standard")
{
    # Change rehydration priority to High, using the same target tier.
    if ($rehydratingBlob.BlobProperties.ArchiveStatus -eq "rehydrate-pending-to-hot")
    {
        $rehydratingBlob.BlobClient.SetAccessTier("Hot", $null, "High")
        "Changing rehydration priority to High for blob moving to hot tier."
    }
    
    if ($rehydratingBlob.BlobProperties.ArchiveStatus -eq "rehydrate-pending-to-cool")
    {
        $rehydratingBlob.BlobClient.SetAccessTier("Cool", $null, "High")
        "Changing rehydration priority to High for blob moving to cool tier."
    }
}
# Get the blob from the service.
$rehydratingBlob = Get-AzStorageBlob -Container $containerName -Blob $blobName -Context $ctx

# Verify that the current rehydration priority is Standard. 
if ($rehydratingBlob.BlobProperties.RehydratePriority -eq "Standard")
{
    # Change rehydration priority to High, using the same target tier.
    if ($rehydratingBlob.BlobProperties.ArchiveStatus -eq "rehydrate-pending-to-hot")
    {
        $rehydratingBlob.BlobClient.SetAccessTier("Hot", $null, "High")
        "Changing rehydration priority to High for blob moving to hot tier."
    }
    
    if ($rehydratingBlob.BlobProperties.ArchiveStatus -eq "rehydrate-pending-to-cool")
    {
        $rehydratingBlob.BlobClient.SetAccessTier("Cool", $null, "High")
        "Changing rehydration priority to High for blob moving to cool tier."
    }
}
To change the rehydration priority for a pending operation with Azure CLI, first make sure that you've installed the Azure CLI, version 2.29.2 or later. For more information about installing the Azure CLI, seeHow to install the Azure CLI.
Next, call theaz storage blob set-tiercommand with the--rehydrate-priorityparameter set toHigh. The target tier (hot or cool) must be the same tier that you originally specified for the rehydration operation. Remember to replace placeholders in angle brackets with your own values:
--rehydrate-priority
# Update the rehydration priority for a blob moving to the hot tier.
az storage blob set-tier \
    --account-name <storage-account> \
    --container-name <container> \
    --name <blob> \
    --tier Hot \
    --rehydrate-priority High \
    --auth-mode login

# Show the updated property values.
az storage blob show \
    --account-name <storage-account> \
    --container-name <container> \
    --name <blob> \
    --query '[rehydratePriority, properties.rehydrationStatus]' \
    --output tsv \
    --auth-mode login
# Update the rehydration priority for a blob moving to the hot tier.
az storage blob set-tier \
    --account-name <storage-account> \
    --container-name <container> \
    --name <blob> \
    --tier Hot \
    --rehydrate-priority High \
    --auth-mode login

# Show the updated property values.
az storage blob show \
    --account-name <storage-account> \
    --container-name <container> \
    --name <blob> \
    --query '[rehydratePriority, properties.rehydrationStatus]' \
    --output tsv \
    --auth-mode login
N/A
Change the rehydration priority for a pending Copy Blob operation
When you rehydrate a blob by copying the archived blob to an online tier, Azure Storage immediately creates the destination blob in the archive tier. The destination blob is then rehydrated to the target tier with the priority specified on the copy operation. For more information on rehydrating an archived blob with a copy operation, seeCopy an archived blob to an online tier.
To perform the copy operation from the archive tier to an online tier with Standard priority, use PowerShell, Azure CLI, or one of the Azure Storage client libraries. For more information, seeRehydrate a blob with a copy operation. Next, to change the rehydration priority fromStandardtoHighfor the pending rehydration, callSet Blob Tieron the destination blob and specify the target tier.
Portal
PowerShell
Azure CLI
AzCopy
After you've initiated the copy operation, you'll see in the Azure portal, that both the source and destination blob are in the archive tier. The destination blob is rehydrating with Standard priority.

To change the rehydration priority for the destination blob, follow these steps:
Select the destination blob.
Select theChange tierbutton.
In theChange tierdialog, set the access tier to the target online access tier for the rehydrating blob (hot or cool). TheArchive statusfield shows the target online tier.
In theRehydrate prioritydropdown, set the priority toHigh.
SelectSave.
The destination blob's properties page now shows that it's rehydrating with High priority.

After you've initiated the copy operation, check the properties of the destination blob. You'll see that the destination blob is in the archive tier and is rehydrating with Standard priority.
# Initialize these variables with your values.
$rgName = "<resource-group>"
$accountName = "<storage-account>"
$destContainerName = "<container>"
$destBlobName = "<destination-blob>"

# Get the storage account context
$ctx = (Get-AzStorageAccount `
        -ResourceGroupName $rgName `
        -Name $accountName).Context

# Get properties for the destination blob.
$destinationBlob = Get-AzStorageBlob -Container $destContainerName `
    -Blob $destBlobName `
    -Context $ctx

$destinationBlob.BlobProperties.AccessTier
$destinationBlob.BlobProperties.ArchiveStatus
$destinationBlob.BlobProperties.RehydratePriority
# Initialize these variables with your values.
$rgName = "<resource-group>"
$accountName = "<storage-account>"
$destContainerName = "<container>"
$destBlobName = "<destination-blob>"

# Get the storage account context
$ctx = (Get-AzStorageAccount `
        -ResourceGroupName $rgName `
        -Name $accountName).Context

# Get properties for the destination blob.
$destinationBlob = Get-AzStorageBlob -Container $destContainerName `
    -Blob $destBlobName `
    -Context $ctx

$destinationBlob.BlobProperties.AccessTier
$destinationBlob.BlobProperties.ArchiveStatus
$destinationBlob.BlobProperties.RehydratePriority
Next, call theSetAccessTiermethod via PowerShell to change the rehydration priority for the destination blob toHigh, as described inChange the rehydration priority for a pending Set Blob Tier operation. The target tier (hot or cool) must be the same tier that you originally specified for the rehydration operation. Check the properties again to verify that the blob is now rehydrating with High priority.
After you've initiated the copy operation, check the properties of the destination blob. You'll see that the destination blob is in the archive tier and is rehydrating with Standard priority.
az storage blob show \
    --account-name <storage-account> \
    --container-name <container> \
    --name <blob> \
    --query '[rehydratePriority, properties.rehydrationStatus]' \
    --output tsv \
    --auth-mode login
az storage blob show \
    --account-name <storage-account> \
    --container-name <container> \
    --name <blob> \
    --query '[rehydratePriority, properties.rehydrationStatus]' \
    --output tsv \
    --auth-mode login
Next, call theaz storage blob set-tiercommand with the--rehydrate-priorityparameter set toHigh, as described inChange the rehydration priority for a pending Set Blob Tier operation. The target tier (hot or cool) must be the same tier that you originally specified for the rehydration operation. Check the properties again to verify that the blob is now rehydrating with High priority.
--rehydrate-priority
N/A
See also
hot, cool, and archive access tiers for blob data.
Overview of blob rehydration from the archive tier
Run an Azure Function in response to a blob rehydration event
Reacting to Blob storage events
Feedback
Was this page helpful?
Additional resources