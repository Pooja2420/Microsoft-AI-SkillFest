Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Manage system node pools in Azure Kubernetes Service (AKS)
Article
2024-08-01
22 contributors
In this article
In Azure Kubernetes Service (AKS), nodes of the same configuration are grouped together intonode pools. Node pools contain the underlying VMs that run your applications. System node pools and user node pools are two different node pool modes for your AKS clusters. System node pools serve the primary purpose of hosting critical system pods such asCoreDNSandmetrics-server. User node pools serve the primary purpose of hosting your application pods. However, application pods can be scheduled on system node pools if you wish to only have one pool in your AKS cluster. Every AKS cluster must contain at least one system node pool with at least two nodes.
CoreDNS
metrics-server
Important
If you run a single system node pool for your AKS cluster in a production environment, we recommend you use at least three nodes for the node pool.
This article explains how to manage system node pools in AKS. For information about how to use multiple node pools, seeuse multiple node pools.
Before you begin
Azure CLI
Azure PowerShell
You need the Azure CLI version 2.3.1 or later installed and configured. Runaz --versionto find the version. If you need to install or upgrade, seeInstall Azure CLI.
az --version
You need the Azure PowerShell version 7.5.0 or later installed and configured. RunGet-InstalledModule -Name Azto find the version. If you need to install or upgrade, seeInstall Azure PowerShell.
Get-InstalledModule -Name Az
Limitations
The following limitations apply when you create and manage AKS clusters that support system node pools.
SeeQuotas, VM size restrictions, and region availability in AKS.
An API version of 2020-03-01 or greater must be used to set a node pool mode. Clusters created on API versions older than 2020-03-01 contain only user node pools, but can be migrated to contain system node pools by followingupdate pool mode steps.
The name of a node pool may only contain lowercase alphanumeric characters and must begin with a lowercase letter. For Linux node pools, the length must be between 1 and 12 characters. For Windows node pools, the length must be between one and six characters.
The mode of a node pool is a required property and must be explicitly set when using ARM templates or direct API calls.
System and user node pools
For a system node pool, AKS automatically assigns the labelkubernetes.azure.com/mode: systemto its nodes. This causes AKS to prefer scheduling system pods on node pools that contain this label. This label doesn't prevent you from scheduling application pods on system node pools. However, we recommend you isolate critical system pods from your application pods to prevent misconfigured or rogue application pods from accidentally deleting system pods.
You can enforce this behavior by creating a dedicated system node pool. Use theCriticalAddonsOnly=true:NoScheduletaint to prevent application pods from being scheduled on system node pools.
CriticalAddonsOnly=true:NoSchedule
System node pools have the following restrictions:
System node pools must support at least 30 pods as described by theminimum and maximum value formula for pods.
System pools osType must be Linux.
User node pools osType may be Linux or Windows.
System pools must contain at least two nodes, and user node pools may contain zero or more nodes.
System node pools require a VM SKU of at least 4 vCPUs and 4GB memory.
B series VMsare not supported for system node pools.
A minimum of three nodes of 8 vCPUs or two nodes of at least 16 vCPUs is recommended (for example, Standard_DS4_v2), especially for large clusters (Multiple CoreDNS Pod replicas, 3-4+ add-ons, etc.).
Spot node pools require user node pools.
Adding another system node pool or changing which node pool is a system node pooldoes notautomatically move system pods. System pods can continue to run on the same node pool, even if you change it to a user node pool. If you delete or scale down a node pool running system pods that were previously a system node pool, those system pods are redeployed with preferred scheduling to the new system node pool.
You can do the following operations with node pools:
Create a dedicated system node pool (prefer scheduling of system pods to node pools ofmode:system)
mode:system
Change a system node pool to be a user node pool, provided you have another system node pool to take its place in the AKS cluster.
Change a user node pool to be a system node pool.
Delete user node pools.
You can delete system node pools, provided you have another system node pool to take its place in the AKS cluster.
An AKS cluster may have multiple system node pools and requires at least one system node pool.
If you want to change various immutable settings on existing node pools, you can create new node pools to replace them. One example is to add a new node pool with a new maxPods setting and delete the old node pool.
Usenode affinitytorequireorpreferwhich nodes can be scheduled based on node labels. You can setkeytokubernetes.azure.com,operatortoIn, andvaluesof eitheruserorsystemto your YAML, applying this definition usingkubectl apply -f yourYAML.yaml.
key
kubernetes.azure.com
operator
In
values
user
system
kubectl apply -f yourYAML.yaml
Create a new AKS cluster with a system node pool
Azure CLI
Azure PowerShell
When you create a new AKS cluster, the initial node pool defaults to a mode of typesystem. When you create new node pools withaz aks nodepool add, those node pools are user node pools unless you explicitly specify the mode parameter.
system
az aks nodepool add
The following example creates a resource group namedmyResourceGroupin theeastusregion.
az group create --name myResourceGroup --location eastus
az group create --name myResourceGroup --location eastus
Use theaz aks createcommand to create an AKS cluster. The following example creates a cluster namedmyAKSClusterwith one dedicated system pool containing two nodes. For your production workloads, ensure you're using system node pools with at least three nodes. This operation may take several minutes to complete.
# Create a new AKS cluster with a single system pool
az aks create --resource-group myResourceGroup --name myAKSCluster --node-count 2 --generate-ssh-keys
# Create a new AKS cluster with a single system pool
az aks create --resource-group myResourceGroup --name myAKSCluster --node-count 2 --generate-ssh-keys
When you create a new AKS cluster, the initial node pool defaults to a mode of typesystem. When you create new node pools withNew-AzAksNodePool, those node pools are user node pools. A node pool's mode can beupdated at any time.
system
New-AzAksNodePool
The following example creates a resource group namedmyResourceGroupin theeastusregion.
New-AzResourceGroup -ResourceGroupName myResourceGroup -Location eastus
New-AzResourceGroup -ResourceGroupName myResourceGroup -Location eastus
Use theNew-AzAksClustercmdlet to create an AKS cluster. The following example creates a cluster namedmyAKSClusterwith one dedicated system pool containing two nodes. For your production workloads, ensure you're using system node pools with at least three nodes. The create operation may take several minutes to complete.
# Create a new AKS cluster with a single system pool
New-AzAksCluster -ResourceGroupName myResourceGroup -Name myAKSCluster -NodeCount 2 -GenerateSshKey
# Create a new AKS cluster with a single system pool
New-AzAksCluster -ResourceGroupName myResourceGroup -Name myAKSCluster -NodeCount 2 -GenerateSshKey
Add a dedicated system node pool to an existing AKS cluster
Azure CLI
Azure PowerShell
You can add one or more system node pools to existing AKS clusters. It's recommended to schedule your application pods on user node pools, and dedicate system node pools to only critical system pods. This prevents rogue application pods from accidentally deleting system pods. Enforce this behavior with theCriticalAddonsOnly=true:NoScheduletaintfor your system node pools.
CriticalAddonsOnly=true:NoSchedule
The following command adds a dedicated node pool of mode type system with a default count of three nodes.
az aks nodepool add \
    --resource-group myResourceGroup \
    --cluster-name myAKSCluster \
    --name systempool \
    --node-count 3 \
    --node-taints CriticalAddonsOnly=true:NoSchedule \
    --mode System
az aks nodepool add \
    --resource-group myResourceGroup \
    --cluster-name myAKSCluster \
    --name systempool \
    --node-count 3 \
    --node-taints CriticalAddonsOnly=true:NoSchedule \
    --mode System
You can add one or more system node pools to existing AKS clusters. It's recommended to schedule your application pods on user node pools, and dedicate system node pools to only critical system pods. Adding more system node pools prevents rogue application pods from accidentally deleting system pods. Enforce the behavior with theCriticalAddonsOnly=true:NoScheduletaintfor your system node pools.
CriticalAddonsOnly=true:NoSchedule
The following command adds a dedicated node pool of mode type system with a default count of three nodes.
# By default, New-AzAksNodePool creates a user node pool
# We need to update the node pool's mode to System later
New-AzAksNodePool -ResourceGroupName myResourceGroup -ClusterName myAKSCluster -Name systempool -Count 3

# Update the node pool's mode to System and add the 'CriticalAddonsOnly=true:NoSchedule' taint
$myAKSCluster = Get-AzAksCluster -ResourceGroupName myResourceGroup2 -Name myAKSCluster
$systemPool = $myAKSCluster.AgentPoolProfiles | Where-Object Name -eq 'systempool'
$systemPool.Mode = 'System'
$nodeTaints = [System.Collections.Generic.List[string]]::new()
$NodeTaints.Add('CriticalAddonsOnly=true:NoSchedule')
$systemPool.NodeTaints = $NodeTaints
$myAKSCluster | Set-AzAksCluster
# By default, New-AzAksNodePool creates a user node pool
# We need to update the node pool's mode to System later
New-AzAksNodePool -ResourceGroupName myResourceGroup -ClusterName myAKSCluster -Name systempool -Count 3

# Update the node pool's mode to System and add the 'CriticalAddonsOnly=true:NoSchedule' taint
$myAKSCluster = Get-AzAksCluster -ResourceGroupName myResourceGroup2 -Name myAKSCluster
$systemPool = $myAKSCluster.AgentPoolProfiles | Where-Object Name -eq 'systempool'
$systemPool.Mode = 'System'
$nodeTaints = [System.Collections.Generic.List[string]]::new()
$NodeTaints.Add('CriticalAddonsOnly=true:NoSchedule')
$systemPool.NodeTaints = $NodeTaints
$myAKSCluster | Set-AzAksCluster
Show details for your node pool
You can check the details of your node pool with the following command.
Azure CLI
Azure PowerShell
az aks nodepool show --resource-group myResourceGroup --cluster-name myAKSCluster --name systempool
az aks nodepool show --resource-group myResourceGroup --cluster-name myAKSCluster --name systempool
A mode of typeSystemis defined for system node pools, and a mode of typeUseris defined for user node pools. For a system pool, verify the taint is set toCriticalAddonsOnly=true:NoSchedule, which will prevent application pods from beings scheduled on this node pool.
CriticalAddonsOnly=true:NoSchedule
{
  "agentPoolType": "VirtualMachineScaleSets",
  "availabilityZones": null,
  "count": 3,
  "enableAutoScaling": null,
  "enableNodePublicIp": false,
  "id": "/subscriptions/yourSubscriptionId/resourcegroups/myResourceGroup/providers/Microsoft.ContainerService/managedClusters/myAKSCluster/agentPools/systempool",
  "maxCount": null,
  "maxPods": 110,
  "minCount": null,
  "mode": "System",
  "name": "systempool",
  "nodeImageVersion": "AKSUbuntu-1604-2020.06.30",
  "nodeLabels": {},
  "nodeTaints": [
    "CriticalAddonsOnly=true:NoSchedule"
  ],
  "orchestratorVersion": "1.16.10",
  "osDiskSizeGb": 128,
  "osType": "Linux",
  "provisioningState": "Succeeded",
  "proximityPlacementGroupId": null,
  "resourceGroup": "myResourceGroup",
  "scaleSetEvictionPolicy": null,
  "scaleSetPriority": null,
  "spotMaxPrice": null,
  "tags": null,
  "type": "Microsoft.ContainerService/managedClusters/agentPools",
  "upgradeSettings": {
    "maxSurge": null
  },
  "vmSize": "Standard_DS2_v2",
  "vnetSubnetId": null
}
{
  "agentPoolType": "VirtualMachineScaleSets",
  "availabilityZones": null,
  "count": 3,
  "enableAutoScaling": null,
  "enableNodePublicIp": false,
  "id": "/subscriptions/yourSubscriptionId/resourcegroups/myResourceGroup/providers/Microsoft.ContainerService/managedClusters/myAKSCluster/agentPools/systempool",
  "maxCount": null,
  "maxPods": 110,
  "minCount": null,
  "mode": "System",
  "name": "systempool",
  "nodeImageVersion": "AKSUbuntu-1604-2020.06.30",
  "nodeLabels": {},
  "nodeTaints": [
    "CriticalAddonsOnly=true:NoSchedule"
  ],
  "orchestratorVersion": "1.16.10",
  "osDiskSizeGb": 128,
  "osType": "Linux",
  "provisioningState": "Succeeded",
  "proximityPlacementGroupId": null,
  "resourceGroup": "myResourceGroup",
  "scaleSetEvictionPolicy": null,
  "scaleSetPriority": null,
  "spotMaxPrice": null,
  "tags": null,
  "type": "Microsoft.ContainerService/managedClusters/agentPools",
  "upgradeSettings": {
    "maxSurge": null
  },
  "vmSize": "Standard_DS2_v2",
  "vnetSubnetId": null
}
Get-AzAksNodePool -ResourceGroupName myResourceGroup -ClusterName myAKSCluster -Name systempool
Get-AzAksNodePool -ResourceGroupName myResourceGroup -ClusterName myAKSCluster -Name systempool
A mode of typeSystemis defined for system node pools, and a mode of typeUseris defined for user node pools. For a system pool, verify the taint is set toCriticalAddonsOnly=true:NoSchedule, which will prevent application pods from beings scheduled on this node pool.
CriticalAddonsOnly=true:NoSchedule
Count                  : 3
VmSize                 : Standard_D2_v2
OsDiskSizeGB           : 128
VnetSubnetID           :
MaxPods                : 30
OsType                 : Linux
MaxCount               :
MinCount               :
EnableAutoScaling      :
AgentPoolType          : VirtualMachineScaleSets
OrchestratorVersion    : 1.23.3
ProvisioningState      : Succeeded
AvailabilityZones      : {}
EnableNodePublicIP     :
ScaleSetPriority       :
ScaleSetEvictionPolicy :
NodeTaints             : {CriticalAddonsOnly=true:NoSchedule}
Id                     : /subscriptions/yourSubscriptionId/resourcegroups/myResourceGroup/providers
                         /Microsoft.ContainerService/managedClusters/myAKSCluster/agentPools/systempool
Name                   : systempool
Type                   : Microsoft.ContainerService/managedClusters/agentPools
Count                  : 3
VmSize                 : Standard_D2_v2
OsDiskSizeGB           : 128
VnetSubnetID           :
MaxPods                : 30
OsType                 : Linux
MaxCount               :
MinCount               :
EnableAutoScaling      :
AgentPoolType          : VirtualMachineScaleSets
OrchestratorVersion    : 1.23.3
ProvisioningState      : Succeeded
AvailabilityZones      : {}
EnableNodePublicIP     :
ScaleSetPriority       :
ScaleSetEvictionPolicy :
NodeTaints             : {CriticalAddonsOnly=true:NoSchedule}
Id                     : /subscriptions/yourSubscriptionId/resourcegroups/myResourceGroup/providers
                         /Microsoft.ContainerService/managedClusters/myAKSCluster/agentPools/systempool
Name                   : systempool
Type                   : Microsoft.ContainerService/managedClusters/agentPools
Update existing cluster system and user node pools
Azure CLI
Azure PowerShell
Note
An API version of 2020-03-01 or greater must be used to set a system node pool mode. Clusters created on API versions older than 2020-03-01 contain only user node pools as a result. To receive system node pool functionality and benefits on older clusters, update the mode of existing node pools with the following commands on the latest Azure CLI version.
You can change modes for both system and user node pools. You can change a system node pool to a user pool only if another system node pool already exists on the AKS cluster.
This command changes a system node pool to a user node pool.
az aks nodepool update --resource-group myResourceGroup --cluster-name myAKSCluster --name mynodepool --mode user
az aks nodepool update --resource-group myResourceGroup --cluster-name myAKSCluster --name mynodepool --mode user
This command changes a user node pool to a system node pool.
az aks nodepool update --resource-group myResourceGroup --cluster-name myAKSCluster --name mynodepool --mode system
az aks nodepool update --resource-group myResourceGroup --cluster-name myAKSCluster --name mynodepool --mode system
Note
An API version of 2020-03-01 or greater must be used to set a system node pool mode. Clusters created on API versions older than 2020-03-01 contain only user node pools as a result. To receive system node pool functionality and benefits on older clusters, update the mode of existing node pools with the following commands on the latest Azure PowerShell version.
You can change modes for both system and user node pools. You can change a system node pool to a user pool only if another system node pool already exists on the AKS cluster.
This command changes a system node pool to a user node pool.
$myAKSCluster = Get-AzAksCluster -ResourceGroupName myResourceGroup -Name myAKSCluster
($myAKSCluster.AgentPoolProfiles | Where-Object Name -eq 'mynodepool').Mode = 'User'
$myAKSCluster | Set-AzAksCluster
$myAKSCluster = Get-AzAksCluster -ResourceGroupName myResourceGroup -Name myAKSCluster
($myAKSCluster.AgentPoolProfiles | Where-Object Name -eq 'mynodepool').Mode = 'User'
$myAKSCluster | Set-AzAksCluster
This command changes a user node pool to a system node pool.
$myAKSCluster = Get-AzAksCluster -ResourceGroupName myResourceGroup -Name myAKSCluster
($myAKSCluster.AgentPoolProfiles | Where-Object Name -eq 'mynodepool').Mode = 'System'
$myAKSCluster | Set-AzAksCluster
$myAKSCluster = Get-AzAksCluster -ResourceGroupName myResourceGroup -Name myAKSCluster
($myAKSCluster.AgentPoolProfiles | Where-Object Name -eq 'mynodepool').Mode = 'System'
$myAKSCluster | Set-AzAksCluster
Delete a system node pool
Note
To use system node pools on AKS clusters before API version 2020-03-02, add a new system node pool, then delete the original default node pool.
You must have at least two system node pools on your AKS cluster before you can delete one of them.
Azure CLI
Azure PowerShell
az aks nodepool delete --resource-group myResourceGroup --cluster-name myAKSCluster --name mynodepool
az aks nodepool delete --resource-group myResourceGroup --cluster-name myAKSCluster --name mynodepool
Remove-AzAksNodePool -ResourceGroupName myResourceGroup -ClusterName myAKSCluster -Name mynodepool
Remove-AzAksNodePool -ResourceGroupName myResourceGroup -ClusterName myAKSCluster -Name mynodepool
Clean up resources
Azure CLI
Azure PowerShell
To delete the cluster, use theaz group deletecommand to delete the AKS resource group:
az group delete --name myResourceGroup --yes --no-wait
az group delete --name myResourceGroup --yes --no-wait
To delete the cluster, use theRemove-AzResourceGroupcommand to delete the AKS resource group:
Remove-AzResourceGroup -Name myResourceGroup
Remove-AzResourceGroup -Name myResourceGroup
Next steps
In this article, you learned how to create and manage system node pools in an AKS cluster. For information about how to start and stop AKS node pools, seestart and stop AKS node pools.
Azure Kubernetes Service

Additional resources