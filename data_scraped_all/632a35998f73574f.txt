Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Use Azure role-based access control (RBAC) for Kubernetes authorization
Article
2025-04-08
1 contributor
In this article
Applies to: AKS on Azure Local
Infrastructure administrators can use Azure role-based access control (Azure RBAC) to control who can access thekubeconfigfile and the permissions they have. Kubernetes operators can interact with Kubernetes clusters using thekubectltool based on the given permissions. Azure CLI provides an easy way to get the access credentials and kubeconfig configuration file to connect to your AKS clusters usingkubectl.
When you use integrated authentication between Microsoft Entra ID and AKS, you can use Microsoft Entra users, groups, or service principals as subjects inKubernetes role-based access control (Kubernetes RBAC). This feature frees you from having to separately manage user identities and credentials for Kubernetes. However, you still must set up and manage Azure RBAC and Kubernetes RBAC separately.
This article describes how to use Azure RBAC for Kubernetes cluster authorization with Microsoft Entra ID and Azure role assignments.
For a conceptual overview, seeAzure RBAC for Kubernetes Authorizationfor AKS enabled by Azure Arc.
Before you begin
Before you begin, make sure you have the following prerequisites:
AKS on Azure Local currently supports enabling Azure RBAC only during Kubernetes cluster creation. You can't enable Azure RBAC after the Kubernetes cluster is created.
AKS on Azure Local currently supports enabling Azure RBAC only during Kubernetes cluster creation. You can't enable Azure RBAC after the Kubernetes cluster is created.
Install the latest version of theaksarcandconnectedk8sAzure CLI extensions. Note that you need to run theaksarcextension version 1.1.1 or later to enable Azure RBAC. Runaz --versionto find the current version. If you need to install or upgrade Azure CLI, seeInstall Azure CLI.az extension add --name aksarc
az extension add --name connectedk8sIf you already installed theaksarcextension, update the extension to the latest version:az extension update --name aksarc
az extension update --name connectedk8s
Install the latest version of theaksarcandconnectedk8sAzure CLI extensions. Note that you need to run theaksarcextension version 1.1.1 or later to enable Azure RBAC. Runaz --versionto find the current version. If you need to install or upgrade Azure CLI, seeInstall Azure CLI.
az --version
az extension add --name aksarc
az extension add --name connectedk8s
az extension add --name aksarc
az extension add --name connectedk8s
If you already installed theaksarcextension, update the extension to the latest version:
aksarc
az extension update --name aksarc
az extension update --name connectedk8s
az extension update --name aksarc
az extension update --name connectedk8s
To interact with Kubernetes clusters, you must installkubectlandkubelogin.
To interact with Kubernetes clusters, you must installkubectlandkubelogin.
The following permissions are required to enable Azure RBAC when creating a Kubernetes cluster:To create a Kubernetes cluster, theAzure Kubernetes Service Arc Contributorrole is required.To use the--enable-azure-rbacparameter, theRole Based Access Control Administratorrole is required for access to theMicrosoft.Authorization/roleAssignments/writepermission.To assign these roles, use theaz role assignment createCLI command, or followAssign Azure roles using Azure CLI:az role assignment create --assignee <assignee-object-id> --role <role-name-or-id> --scope $ARM_IDNew role assignments can take up to five minutes to propagate and be updated by the authorization server.
The following permissions are required to enable Azure RBAC when creating a Kubernetes cluster:
To create a Kubernetes cluster, theAzure Kubernetes Service Arc Contributorrole is required.
To create a Kubernetes cluster, theAzure Kubernetes Service Arc Contributorrole is required.
To use the--enable-azure-rbacparameter, theRole Based Access Control Administratorrole is required for access to theMicrosoft.Authorization/roleAssignments/writepermission.
To use the--enable-azure-rbacparameter, theRole Based Access Control Administratorrole is required for access to theMicrosoft.Authorization/roleAssignments/writepermission.
--enable-azure-rbac
To assign these roles, use theaz role assignment createCLI command, or followAssign Azure roles using Azure CLI:az role assignment create --assignee <assignee-object-id> --role <role-name-or-id> --scope $ARM_ID
To assign these roles, use theaz role assignment createCLI command, or followAssign Azure roles using Azure CLI:
az role assignment create --assignee <assignee-object-id> --role <role-name-or-id> --scope $ARM_ID
az role assignment create --assignee <assignee-object-id> --role <role-name-or-id> --scope $ARM_ID
New role assignments can take up to five minutes to propagate and be updated by the authorization server.
New role assignments can take up to five minutes to propagate and be updated by the authorization server.
Once Azure RBAC is enabled, you can access your Kubernetes cluster with the given permissions using either direct mode or proxy mode.To access the Kubernetes cluster directly using theaz aksarc get-credentialscommand, you need theMicrosoft.HybridContainerService/provisionedClusterInstances/listUserKubeconfig/action, which is included in theAzure Kubernetes Service Arc Cluster Userrole permission.To access the Kubernetes cluster from anywhere with a proxy mode using theaz connectedk8s proxycommand, or from the Azure portal, you need theMicrosoft.Kubernetes/connectedClusters/listClusterUserCredential/actionaction, which is included in theAzure Arc enabled Kubernetes Cluster Userrole permission. Meanwhile, you must verify that the agents and the machine performing the onboarding process meet the network requirements specified inAzure Arc-enabled Kubernetes network requirements.
Once Azure RBAC is enabled, you can access your Kubernetes cluster with the given permissions using either direct mode or proxy mode.
To access the Kubernetes cluster directly using theaz aksarc get-credentialscommand, you need theMicrosoft.HybridContainerService/provisionedClusterInstances/listUserKubeconfig/action, which is included in theAzure Kubernetes Service Arc Cluster Userrole permission.
az aksarc get-credentials
To access the Kubernetes cluster from anywhere with a proxy mode using theaz connectedk8s proxycommand, or from the Azure portal, you need theMicrosoft.Kubernetes/connectedClusters/listClusterUserCredential/actionaction, which is included in theAzure Arc enabled Kubernetes Cluster Userrole permission. Meanwhile, you must verify that the agents and the machine performing the onboarding process meet the network requirements specified inAzure Arc-enabled Kubernetes network requirements.
az connectedk8s proxy
To usekubectl, you can access it using either Azure RBAC or the AAD Admin Group.To use kubectl with Azure RBAC, you need theAzure Arc Kubernetes Viewerrole scoped to the connected cluster resource.To use kubectl with the AAD Admin Group, you don't need any specific role, but you must ensure you are in one of the groups in theadd-admin-grouplist of the connected cluster resource.
To usekubectl, you can access it using either Azure RBAC or the AAD Admin Group.
To use kubectl with Azure RBAC, you need theAzure Arc Kubernetes Viewerrole scoped to the connected cluster resource.
To use kubectl with the AAD Admin Group, you don't need any specific role, but you must ensure you are in one of the groups in theadd-admin-grouplist of the connected cluster resource.
Step 1: Create an Azure RBAC-enabled Kubernetes cluster
You can create an Azure RBAC-enabled Kubernetes cluster for authorization and a Microsoft Entra ID for authentication.
az aksarc create -n $aks_cluster_name -g $resource_group_name --custom-location $customlocation_ID --vnet-ids $logicnet_Id --generate-ssh-keys --enable-azure-rbac
az aksarc create -n $aks_cluster_name -g $resource_group_name --custom-location $customlocation_ID --vnet-ids $logicnet_Id --generate-ssh-keys --enable-azure-rbac
After a few minutes, the command completes and returns JSON-formatted information about the cluster.
Step 2: Create role assignments for users to access the cluster
AKS enabled by Arc provides the following five built-in roles. They are similar to theKubernetes built-in roleswith a few differences, such as supporting CRDs. See the full list of actions allowed by eachAzure built-in role.
You can use theaz role assignment createcommand to create role assignments.
az role assignment create
First, get the$ARM-IDfor the target cluster to which you want to assign a role.
$ARM-ID
$ARM_ID = (az connectedk8s show -g "$resource_group_name" -n $aks_cluster_name --query id -o tsv)
$ARM_ID = (az connectedk8s show -g "$resource_group_name" -n $aks_cluster_name --query id -o tsv)
Then, use theaz role assignment createcommand to assign roles to your Kubernetes cluster. You must provide the$ARM_IDfrom the first step and theassignee-object-idfor this step. Theassignee-object-idcan be a Microsoft Entra ID or a service principal client ID.
az role assignment create
$ARM_ID
assignee-object-id
assignee-object-id
The following example assigns theAzure Arc Kubernetes Viewerrole to the Kubernetes cluster:
az role assignment create --role "Azure Arc Kubernetes Viewer" --assignee <assignee-object-id> --scope $ARM_ID
az role assignment create --role "Azure Arc Kubernetes Viewer" --assignee <assignee-object-id> --scope $ARM_ID
In this example, the scope is the Azure Resource Manager ID of the cluster. It can also be the resource group containing the Kubernetes cluster.
Create custom role definitions
You can choose to create your own role definition for use in role assignments.
The following example shows a role definition that allows a user to only read deployments. For more information, seethe full list of data actions that you can use to construct a role definition. For more information about creating a custom role, seeSteps to create a custom role
To create your own custom role definitions, copy the following JSON object into a file calledcustom-role.json. Replace the<subscription-id>placeholder with the actual subscription ID. The custom role uses one of the data actions and lets you view all deployments in the scope (cluster or namespace) where the role assignment is created.
<subscription-id>
{
    "Name": "AKS Arc Deployment Reader",
    "Description": "Lets you view all deployments in cluster/namespace.",
    "Actions": [],
    "NotActions": [],
    "DataActions": [
        "Microsoft.Kubernetes/connectedClusters/apps/deployments/read"
    ],
    "NotDataActions": [],
    "assignableScopes": [
        "/subscriptions/<YOUR SUBSCRIPTION ID>"
    ]
}
{
    "Name": "AKS Arc Deployment Reader",
    "Description": "Lets you view all deployments in cluster/namespace.",
    "Actions": [],
    "NotActions": [],
    "DataActions": [
        "Microsoft.Kubernetes/connectedClusters/apps/deployments/read"
    ],
    "NotDataActions": [],
    "assignableScopes": [
        "/subscriptions/<YOUR SUBSCRIPTION ID>"
    ]
}
For information about custom roles and how to author them, seeAzure custom roles.
Create the role definition using theaz role definition createcommand, setting the--role-definitionparameter to thedeploy-view.jsonfile you created in the previous step:
az role definition create
--role-definition
az role definition create --role-definition @deploy-view.json
az role definition create --role-definition @deploy-view.json
Assign the role definition to a user or other identity using theaz role assignment createcommand:
az role assignment create
az role assignment create --role "AKS Arc Deployment Reader" --assignee <assignee-object-id> --scope $ARM_ID
az role assignment create --role "AKS Arc Deployment Reader" --assignee <assignee-object-id> --scope $ARM_ID
Step 3: Access Kubernetes cluster
You can now access your Kubernetes cluster with the given permissions, using either direct mode or proxy mode.
Access your cluster with kubectl (direct mode)
To access the Kubernetes cluster with the given permissions, the Kubernetes operator needs the Microsoft Entrakubeconfig, which you can get using theaz aksarc get-credentialscommand. This command provides access to the admin-based kubeconfig, as well as a user-based kubeconfig. The admin-based kubeconfig file contains secrets and should be securely stored and rotated periodically. On the other hand, the user-based Microsoft Entra ID kubeconfig doesn't contain secrets and can be distributed to users who connect from their client machines.
az aksarc get-credentials
To run this Azure CLI command, you need theMicrosoft.HybridContainerService/provisionedClusterInstances/listUserKubeconfig/action, which is included in theAzure Kubernetes Service Arc Cluster Userrole permission:
az aksarc get-credentials -g "$resource_group_name" -n $aks_cluster_name --file <file-name>
az aksarc get-credentials -g "$resource_group_name" -n $aks_cluster_name --file <file-name>
Now you can use kubectl manage your cluster. For example, you can list the nodes in your cluster usingkubectl get nodes. The first time you run it, you must sign in, as shown in the following example:
kubectl get nodes
kubectl get nodes
kubectl get nodes
Access your cluster from a client device (proxy mode)
To access the Kubernetes cluster from anywhere with a proxy mode usingaz connectedk8s proxycommand, you need theMicrosoft.Kubernetes/connectedClusters/listClusterUserCredential/action, which is included inAzure Arc enabled Kubernetes Cluster Userrole permission.
az connectedk8s proxy
Run the following steps on another client device:
Sign in using Microsoft Entra authentication
Sign in using Microsoft Entra authentication
Get the cluster connectkubeconfigneeded to communicate with the cluster from anywhere (even from outside the firewall surrounding the cluster):az connectedk8s proxy -n $CLUSTER_NAME -g $RESOURCE_GROUPNoteThis command opens the proxy and blocks the current shell.
Get the cluster connectkubeconfigneeded to communicate with the cluster from anywhere (even from outside the firewall surrounding the cluster):
az connectedk8s proxy -n $CLUSTER_NAME -g $RESOURCE_GROUP
az connectedk8s proxy -n $CLUSTER_NAME -g $RESOURCE_GROUP
Note
This command opens the proxy and blocks the current shell.
In a different shell session, usekubectlto send requests to the cluster:kubectl get pods -A
In a different shell session, usekubectlto send requests to the cluster:
kubectl
kubectl get pods -A
kubectl get pods -A
You should now see a response from the cluster containing the list of all pods under thedefaultnamespace.
default
For more information, seeAccess your cluster from a client device.
Clean up resources
Delete role assignment
# List role assignments
az role assignment list --scope $ARM_ID --query [].id -o tsv

# Delete role assignments
az role assignment delete --ids <LIST OF ASSIGNMENT IDS>
# List role assignments
az role assignment list --scope $ARM_ID --query [].id -o tsv

# Delete role assignments
az role assignment delete --ids <LIST OF ASSIGNMENT IDS>
Delete role definition
az role definition delete -n "AKS Arc Deployment Reader"
az role definition delete -n "AKS Arc Deployment Reader"
Next steps
Azure role-based access control (Azure RBAC)
Access and identity optionsfor AKS enabled by Azure Arc
Create an Azure service principal with Azure CLI
Available Azure permissions forHybrid + Multicloud
Feedback
Was this page helpful?
Additional resources