Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Quickstart: Run Resource Graph query using REST API
Article
2024-07-18
7 contributors
In this article
This quickstart describes how to run an Azure Resource Graph query with REST API and view the results. The REST API elements are a URI that includes the API version and request body that contains the query. The examples use Azure CLI to sign into Azure and that authenticates your account to runaz restcommands.
az rest
If you're unfamiliar with REST API, start by reviewingAzure REST API Referenceto get a general understanding of REST API, specifically request URI and request body. For the Azure Resource Graph specifications, seeAzure Resource Graph REST API.
Prerequisites
If you don't have an Azure account, create afree accountbefore you begin.
Latest version ofPowerShellor Bash shell like Git Bash.
Latest version ofAzure CLI.
Visual Studio Code.
Connect to Azure
From a Visual Studio Code terminal session, connect to Azure. If you have more than one subscription, run the commands to set context to your subscription. Replace{subscriptionID}with your Azure subscription ID.
{subscriptionID}
az login

# Run these commands if you have multiple subscriptions
az account list --output table
az account set --subscription {subscriptionID}
az login

# Run these commands if you have multiple subscriptions
az account list --output table
az account set --subscription {subscriptionID}
Useaz logineven if you're using PowerShell because the examples use Azure CLIaz restcommands.
az login
Review the REST API syntax
There are two elements to run REST API commands: the REST API URI and the request body. For information, go toResources. To query bymanagement group, usemanagementGroupsinstead ofsubscriptions. To query the entire tenant, omit both themanagementGroupsandsubscriptionsproperties from the request body.
managementGroups
subscriptions
managementGroups
subscriptions
The following example shows the REST API URI syntax to run a query for an Azure subscription.
POST https://management.azure.com/providers/Microsoft.ResourceGraph/resources?api-version=2022-10-01
POST https://management.azure.com/providers/Microsoft.ResourceGraph/resources?api-version=2022-10-01
A request body is needed to run a query with REST API. The following example is the JSON to create a request body file.
{
  "subscriptions": [
    "{subscriptionID}"
  ],
  "query": "Resources | project name, type | limit 5"
}
{
  "subscriptions": [
    "{subscriptionID}"
  ],
  "query": "Resources | project name, type | limit 5"
}
Run Resource Graph query
The examples use the sameaz restcommand but you change the request body to get different results. The examples list resources, order resources by thenameproperty, and order resources by thenameproperty and limit the number of results.
az rest
name
name
To run all the query examples, use the followingaz restcommand for your shell environment:
az rest
PowerShell
Bash
az rest --method post --uri https://management.azure.com/providers/Microsoft.ResourceGraph/resources?api-version=2022-10-01 --body `@request-body.json
az rest --method post --uri https://management.azure.com/providers/Microsoft.ResourceGraph/resources?api-version=2022-10-01 --body `@request-body.json
In PowerShell, the backtick (`) is needed to escape theat sign(@) to specify a filename for the request body.
`
at sign
@
az rest --method post --uri https://management.azure.com/providers/Microsoft.ResourceGraph/resources?api-version=2022-10-01 --body @request-body.json
az rest --method post --uri https://management.azure.com/providers/Microsoft.ResourceGraph/resources?api-version=2022-10-01 --body @request-body.json
In a Bash shell like Git Bash, the backtick isn't needed to escape theat sign(@)  to specify a filename for the request body.
at sign
@
In each request body example, replace{subscriptionID}with your Azure subscription ID. Run the following command to get your Azure subscription ID for the request body:
{subscriptionID}
az account show --query id --output tsv
az account show --query id --output tsv
List resources
In Visual Studio Code, create a new file namedrequest-body.json. Copy and paste the following JSON into the file and save the file.
The query returns five Azure resources with thenameandresource typeof each resource.
name
resource type
{
  "subscriptions": [
    "{subscriptionID}"
  ],
  "query": "Resources | project name, type | limit 5"
}
{
  "subscriptions": [
    "{subscriptionID}"
  ],
  "query": "Resources | project name, type | limit 5"
}
Because this query example doesn't provide a sort modifier likeorder by, running this query multiple times yields a different set of resources per request.
order by
Order by name property
Updaterequest-body.jsonwith the following code that changes the query toorder bythenameproperty. Save the file and use theaz restcommand to run the query.
order by
name
az rest
{
  "subscriptions": [
    "{subscriptionID}"
  ],
  "query": "Resources | project name, type | limit 5 | order by name asc"
}
{
  "subscriptions": [
    "{subscriptionID}"
  ],
  "query": "Resources | project name, type | limit 5 | order by name asc"
}
If you run this query multiple times, it yields a different set of resources per request.
The order of the query commands is important. In this example, theorder bycomes after thelimit. This command order limits the query results to five resources and then orders them.
order by
limit
Order by name property and limit results
Updaterequest-body.jsonwith the following code toorder bythenameproperty and thenlimitto the top five results. Save the file and use the sameaz restcommand to run the query.
order by
name
limit
az rest
{
  "subscriptions": [
    "{subscriptionID}"
  ],
  "query": "Resources | project name, type | order by name asc | limit 5"
}
{
  "subscriptions": [
    "{subscriptionID}"
  ],
  "query": "Resources | project name, type | order by name asc | limit 5"
}
If the query is run several times, assuming that nothing in your environment changed, the results returned are consistent and ordered by thenameproperty, but limited to the top five results.
name
Clean up resources
Sign out of your Azure CLI session.
az logout
az logout
Next steps
In this quickstart, you used the Azure Resource Graph REST API endpoint to run a query. To learn more about the Resource Graph language, continue to the query language details page.
Understanding the Azure Resource Graph query language
Feedback
Was this page helpful?
Additional resources