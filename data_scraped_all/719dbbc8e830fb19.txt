Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Migrate custom software to Azure App Service using a custom container
Article
2024-09-15
21 contributors
In this article
Azure App Serviceprovides pre-defined application stacks, like ASP.NET or Node.js, on Windows. These application stacks run on IIS. The preconfigured Windows environment locks down the operating system from:
Administrative access.
Software installations.
Changes to the global assembly cache.
For more information, seeOperating system functionality on Azure App Service.
You can deploy a custom-configured Windows image from Visual Studio to make OS changes that your app needs. This makes it easy to migrate an on-premises app that requires a custom OS and software configuration. This tutorial demonstrates how to migrate to App Service an ASP.NET app that uses custom fonts installed in the Windows font library. You deploy a custom-configured Windows image from Visual Studio toAzure Container Registryand then run it in App Service.

Prerequisites
To complete this tutorial:
Sign up for a Docker Hub account.
Install Docker for Windows.
Configure Docker to run Windows containers.
Install Visual Studio 2022with theASP.NET and web developmentandAzure developmentworkloads. If you've installed Visual Studio 2022 already:Install the latest updates in Visual Studio by selectingHelp>Check for Updates.Add the workloads in Visual Studio by selectingTools>Get Tools and Features.
Install the latest updates in Visual Studio by selectingHelp>Check for Updates.
Add the workloads in Visual Studio by selectingTools>Get Tools and Features.
Set up the app locally
Download the sample
In this step, you set up the local .NET project.
Download the sample project.
Extract (unzip) thecustom-font-win-container-master.zipfile.
The sample project contains a simple ASP.NET application that uses a custom font that's installed into the Windows font library. It's not necessary to install fonts. However, the sample is an example of an app that's integrated with the underlying OS. To migrate such an app to App Service, you either rearchitect your code to remove the integration, or migrate it as-is in a custom Windows container.
Install the font
In Windows Explorer, navigate tocustom-font-win-container-master/CustomFontSample, right-clickFrederickatheGreat-Regular.ttf, and selectInstall.
This font is publicly available fromGoogle Fonts.
Run the app
Open thecustom-font-win-container-master/CustomFontSample.slnfile in Visual Studio.
SelectCtrl+F5to run the app without debugging. The app is displayed in your default browser.

As the app uses an installed font, the app can't run in the App Service sandbox. However, you can deploy it using a Windows container instead, because you can install the font in the Windows container.
Configure Windows container
In Solution Explorer, right-click theCustomFontSampleproject and selectAdd>Container Orchestration Support.

SelectDocker Compose>OK.
Your project is now set to run in a Windows container. ADockerfileis added to theCustomFontSampleproject, and adocker-composeproject is added to the solution.
Dockerfile
From the Solution Explorer, openDockerfile.
You need to use asupported parent image. Change the parent image by replacing theFROMline with the following code:
FROM
FROM mcr.microsoft.com/dotnet/framework/aspnet:4.7.2-windowsservercore-ltsc2019
FROM mcr.microsoft.com/dotnet/framework/aspnet:4.7.2-windowsservercore-ltsc2019
At the end of the file, add the following line and save the file:
RUN ${source:-obj/Docker/publish/InstallFont.ps1}
RUN ${source:-obj/Docker/publish/InstallFont.ps1}
You can findInstallFont.ps1in theCustomFontSampleproject. It's a simple script that installs the font. You can find a more complex version of the script in thePowerShell Gallery.
Note
To test the Windows container locally, ensure that Docker is started on your local machine.
Publish to Azure Container Registry
Azure Container Registrycan store your images for container deployments. You can configure App Service to use images that are hosted in Azure Container Registry.
Open the publish wizard
In the Solution Explorer, right-click theCustomFontSampleproject and selectPublish.

Create and publish the registry
In the publish wizard, selectContainer Registry>Create New Azure Container Registry>Publish.

Sign in with an Azure account
In theCreate a new Azure Container Registrydialog, selectAdd an account, and then sign in to your Azure subscription. If you're already signed in, select the account containing the desired subscription from the dropdown.

Configure the registry
Configure the new container registry by using the suggested values in the following table as a guide. When finished, selectCreate.

A terminal window opens and displays the image deployment progress. Wait for the deployment to complete.
Sign in to Azure
Sign in to theAzure portal.
Create a web app
From the left menu, selectCreate a resource>Web>Web App for Containers.
Configure app basics
On theBasicstab, configure the settings according to the following table. Then selectNext: Docker.
https://<app-name>.azurewebsites.net
<app-name>
YourBasicstab should look like this:

Configure the Windows container
On theDockertab, configure your custom Windows container as shown in the following table, and then selectReview + create.
Complete app creation
SelectCreateand wait for Azure to create the required resources.
Browse to the web app
When the deployment is complete, a notification box is displayed.

SelectGo to resource.
SelectGo to resource.
In the app page, select the link underURL.
In the app page, select the link underURL.
A new browser page is opened to the following page:

Wait a few minutes and try again, until you get the homepage with the font you expect:

Congratulations!You've migrated an ASP.NET application to Azure App Service in a Windows container.
View the container start-up logs
It might take some time for the Windows container to load. To see the progress, go to the following URL. (Replace <app-name> with the name of your app.)
https://<app-name>.scm.azurewebsites.net/api/logstream
https://<app-name>.scm.azurewebsites.net/api/logstream
The streamed logs look like this:
14/09/2018 23:16:19.889 INFO - Site: fonts-win-container - Creating container for image: customfontsample20180914115836.azurecr.io/customfontsample:latest.
14/09/2018 23:16:19.928 INFO - Site: fonts-win-container - Create container for image: customfontsample20180914115836.azurecr.io/customfontsample:latest succeeded. Container Id 329ecfedbe370f1d99857da7352a7633366b878607994ff1334461e44e6f5418
14/09/2018 23:17:23.405 INFO - Site: fonts-win-container - Start container succeeded. Container: 329ecfedbe370f1d99857da7352a7633366b878607994ff1334461e44e6f5418
14/09/2018 23:17:28.637 INFO - Site: fonts-win-container - Container ready
14/09/2018 23:17:28.637 INFO - Site: fonts-win-container - Configuring container
14/09/2018 23:18:03.823 INFO - Site: fonts-win-container - Container ready
14/09/2018 23:18:03.823 INFO - Site: fonts-win-container - Container start-up and configuration completed successfully
14/09/2018 23:16:19.889 INFO - Site: fonts-win-container - Creating container for image: customfontsample20180914115836.azurecr.io/customfontsample:latest.
14/09/2018 23:16:19.928 INFO - Site: fonts-win-container - Create container for image: customfontsample20180914115836.azurecr.io/customfontsample:latest succeeded. Container Id 329ecfedbe370f1d99857da7352a7633366b878607994ff1334461e44e6f5418
14/09/2018 23:17:23.405 INFO - Site: fonts-win-container - Start container succeeded. Container: 329ecfedbe370f1d99857da7352a7633366b878607994ff1334461e44e6f5418
14/09/2018 23:17:28.637 INFO - Site: fonts-win-container - Container ready
14/09/2018 23:17:28.637 INFO - Site: fonts-win-container - Configuring container
14/09/2018 23:18:03.823 INFO - Site: fonts-win-container - Container ready
14/09/2018 23:18:03.823 INFO - Site: fonts-win-container - Container start-up and configuration completed successfully
Azure App Service uses the Docker container technology to host both built-in images and custom images. To see a list of built-in images, run the Azure CLI command,'az webapp list-runtimes --os linux'. If those images don't satisfy your needs, you can build and deploy a custom image.
Note
Your container should target the x86-64 architecture. ARM64 is not supported.
In this tutorial, you learn how to:
Push a custom Docker image to Azure Container Registry.
Deploy the custom image to App Service.
Configure environment variables.
Pull the image into App Service by using a managed identity.
Access diagnostic logs.
Enable CI/CD from Azure Container Registry to App Service.
Connect to the container by using SSH.
Completing this tutorial incurs a small charge in your Azure account for the container registry and can incur more costs if you host the container for longer than a month.
Set up your initial environment
This tutorial requires version 2.0.80 or later of the Azure CLI. If you're using Azure Cloud Shell, the latest version is already installed.
Have an Azure account with an active subscription.Create an account for free.
Use the Bash environment inAzure Cloud Shell. For more information, seeGet started with Azure Cloud Shell.
Use the Bash environment inAzure Cloud Shell. For more information, seeGet started with Azure Cloud Shell.

If you prefer to run CLI reference commands locally,installthe Azure CLI. If you're running on Windows or macOS, consider running Azure CLI in a Docker container. For more information, seeHow to run the Azure CLI in a Docker container.If you're using a local installation, sign in to the Azure CLI by using theaz logincommand. To finish the authentication process, follow the steps displayed in your terminal. For other sign-in options, seeAuthenticate to Azure using Azure CLI.When you're prompted, install the Azure CLI extension on first use. For more information about extensions, seeUse and manage extensions with the Azure CLI.Runaz versionto find the version and dependent libraries that are installed. To upgrade to the latest version, runaz upgrade.
If you prefer to run CLI reference commands locally,installthe Azure CLI. If you're running on Windows or macOS, consider running Azure CLI in a Docker container. For more information, seeHow to run the Azure CLI in a Docker container.
If you're using a local installation, sign in to the Azure CLI by using theaz logincommand. To finish the authentication process, follow the steps displayed in your terminal. For other sign-in options, seeAuthenticate to Azure using Azure CLI.
If you're using a local installation, sign in to the Azure CLI by using theaz logincommand. To finish the authentication process, follow the steps displayed in your terminal. For other sign-in options, seeAuthenticate to Azure using Azure CLI.
When you're prompted, install the Azure CLI extension on first use. For more information about extensions, seeUse and manage extensions with the Azure CLI.
When you're prompted, install the Azure CLI extension on first use. For more information about extensions, seeUse and manage extensions with the Azure CLI.
Runaz versionto find the version and dependent libraries that are installed. To upgrade to the latest version, runaz upgrade.
Runaz versionto find the version and dependent libraries that are installed. To upgrade to the latest version, runaz upgrade.
InstallDocker, which you use to build Docker images. Installing Docker might require a computer restart.
After installing Docker, open a terminal window and verify that the docker is installed:
docker --version
docker --version
Clone or download the sample app
You can obtain the sample for this tutorial via git clone or download.
Clone with Git
Clone the sample repository:
git clone https://github.com/Azure-Samples/docker-django-webapp-linux.git --config core.autocrlf=input
git clone https://github.com/Azure-Samples/docker-django-webapp-linux.git --config core.autocrlf=input
Ensure that you include the--config core.autocrlf=inputargument to guarantee proper line endings in files that are used inside the Linux container.
--config core.autocrlf=input
Then navigate to the folder:
cd docker-django-webapp-linux
cd docker-django-webapp-linux
Download from GitHub
Instead of using git clone, you can visithttps://github.com/Azure-Samples/docker-django-webapp-linuxand selectCode>Local>Download ZIP.
Unpack the ZIP file into a folder nameddocker-django-webapp-linux.
Then open a terminal window in thedocker-django-webapp-linuxfolder.
(Optional) Examine the Docker file
This is the file in the sample that's namedDockerfile. It describes the Docker image and contains configuration instructions.
FROM tiangolo/uwsgi-nginx-flask:python3.6

RUN mkdir /code
WORKDIR /code
ADD requirements.txt /code/
RUN pip install -r requirements.txt --no-cache-dir
ADD . /code/

# ssh
ENV SSH_PASSWD "root:Docker!"
RUN apt-get update \
        && apt-get install -y --no-install-recommends dialog \
        && apt-get update \
 && apt-get install -y --no-install-recommends openssh-server \
 && echo "$SSH_PASSWD" | chpasswd 

COPY sshd_config /etc/ssh/
COPY init.sh /usr/local/bin/

RUN chmod u+x /usr/local/bin/init.sh
EXPOSE 8000 2222

#CMD ["python", "/code/manage.py", "runserver", "0.0.0.0:8000"]
ENTRYPOINT ["init.sh"]
FROM tiangolo/uwsgi-nginx-flask:python3.6

RUN mkdir /code
WORKDIR /code
ADD requirements.txt /code/
RUN pip install -r requirements.txt --no-cache-dir
ADD . /code/

# ssh
ENV SSH_PASSWD "root:Docker!"
RUN apt-get update \
        && apt-get install -y --no-install-recommends dialog \
        && apt-get update \
 && apt-get install -y --no-install-recommends openssh-server \
 && echo "$SSH_PASSWD" | chpasswd 

COPY sshd_config /etc/ssh/
COPY init.sh /usr/local/bin/

RUN chmod u+x /usr/local/bin/init.sh
EXPOSE 8000 2222

#CMD ["python", "/code/manage.py", "runserver", "0.0.0.0:8000"]
ENTRYPOINT ["init.sh"]
The first group of commands installs the app's requirements in the environment.
The second group of commands creates anSSHserver to provide improved-security communication between the container and the host.
The last line,ENTRYPOINT ["init.sh"], invokesinit.shto start the SSH service and Python server.
ENTRYPOINT ["init.sh"]
init.sh
Build and test the image locally
Note
Docker Hub hasquotas on the number of anonymous pulls per IP and the number of authenticated pulls per free user.If you notice your pulls from Docker Hub are being limited, trydocker loginif you're not already logged in.
docker login
Run the following command to build the image:docker build --tag appsvc-tutorial-custom-image .
Run the following command to build the image:
docker build --tag appsvc-tutorial-custom-image .
docker build --tag appsvc-tutorial-custom-image .
Test that the build works by running the Docker container locally:docker run -it -p 8000:8000 appsvc-tutorial-custom-imageThisdocker runcommand specifies the port with the-pargument and includes the name of the image.-itlets you stop it withCtrl+C.TipIf you're running on Windows and see the errorstandard_init_linux.go:211: exec user process caused "no such file or directory", theinit.shfile contains CRLF line endings instead of the expected LF endings. This error happens if you used Git to clone the sample repository but omitted the--config core.autocrlf=inputparameter. In this case, clone the repository again with the--configargument. You might also see the error if you editedinit.shand saved it with CRLF endings. In this case, save the file again with LF endings only.
Test that the build works by running the Docker container locally:
docker run -it -p 8000:8000 appsvc-tutorial-custom-image
docker run -it -p 8000:8000 appsvc-tutorial-custom-image
Thisdocker runcommand specifies the port with the-pargument and includes the name of the image.-itlets you stop it withCtrl+C.
docker run
-p
-it
Tip
If you're running on Windows and see the errorstandard_init_linux.go:211: exec user process caused "no such file or directory", theinit.shfile contains CRLF line endings instead of the expected LF endings. This error happens if you used Git to clone the sample repository but omitted the--config core.autocrlf=inputparameter. In this case, clone the repository again with the--configargument. You might also see the error if you editedinit.shand saved it with CRLF endings. In this case, save the file again with LF endings only.
--config core.autocrlf=input
--config
Browse tohttp://localhost:8000to verify that the web app and container are functioning correctly.
Browse tohttp://localhost:8000to verify that the web app and container are functioning correctly.
http://localhost:8000

I. Create a user-assigned managed identity
App Service can use either a default managed identity or a user-assigned managed identity to authenticate with a container registry. In this tutorial, you'll use a user-assigned managed identity.
Azure CLI
Azure portal
Run theaz group createcommand to create a resource group:az group create --name msdocs-custom-container-tutorial --location westeuropeYou can change the--locationvalue to specify a region near you.
Run theaz group createcommand to create a resource group:
az group create --name msdocs-custom-container-tutorial --location westeurope
az group create --name msdocs-custom-container-tutorial --location westeurope
You can change the--locationvalue to specify a region near you.
--location
Create a managed identity in the resource group:az identity create --name myID --resource-group msdocs-custom-container-tutorial
Create a managed identity in the resource group:
az identity create --name myID --resource-group msdocs-custom-container-tutorial
az identity create --name myID --resource-group msdocs-custom-container-tutorial
I.A.In the Azure portal:
Type "Managed Identities" in the search bar at the top of the Azure portal.
Select the item labeledManaged Identitiesunder theServicesheading.
SelectCreate.
You can also navigate to thecreation wizarddirectly.

I.B.In the create wizard:
InSubscription, select the subscription you want to create your resources in.
InResource group, selectCreate new, type the namemsdocs-custom-container-tutorialfor the resource group, then selectOK.
InRegion, selectWest Europe, or a region near you.
InName, typemyID.

I.C.
Select theReview + createtab.
SelectCreate.

I.D.When the creation of the identity is complete, you can open its management page by selectingGo to resource.

II. Create a container registry
Azure CLI
Azure portal
Create a container registry by using the followingaz acr createcommand. Replace<registry-name>with a unique name for your registry. The name must contain only letters and numbers, and must be unique across all of Azure.az acr create --name <registry-name> --resource-group msdocs-custom-container-tutorial --sku Basic --admin-enabled trueThe--admin-enabledparameter lets you push images to the registry using administrative credentials.
Create a container registry by using the followingaz acr createcommand. Replace<registry-name>with a unique name for your registry. The name must contain only letters and numbers, and must be unique across all of Azure.
az acr create
<registry-name>
az acr create --name <registry-name> --resource-group msdocs-custom-container-tutorial --sku Basic --admin-enabled true
az acr create --name <registry-name> --resource-group msdocs-custom-container-tutorial --sku Basic --admin-enabled true
The--admin-enabledparameter lets you push images to the registry using administrative credentials.
--admin-enabled
Retrieve the administrative credentials by running theaz credential acr showcommand:az acr credential show --resource-group msdocs-custom-container-tutorial --name <registry-name>The JSON output of this command provides two passwords along with the registry's user name.
Retrieve the administrative credentials by running theaz credential acr showcommand:
az credential acr show
az acr credential show --resource-group msdocs-custom-container-tutorial --name <registry-name>
az acr credential show --resource-group msdocs-custom-container-tutorial --name <registry-name>
The JSON output of this command provides two passwords along with the registry's user name.
II.A.In the Azure portal:
Type "Container registries" in the search bar at the top of the Azure portal.
Select the item labeledContainer registriesunder theServicesheading.
SelectCreate.
You can also navigate to thecreation wizarddirectly.

II.B.In the creation wizard:
InSubscription, select the subscription you used earlier.
InResource group, selectmsdocs-custom-container-tutorial.
InRegistry name, type a unique name for your container registry.
InLocation, selectWest Europe, or the same region as your managed identity.
InSKU, selectBasic.

II.C.
Select theReview + createtab.
SelectCreate.

II.D.When the creation of the container registry is complete, open its management page by selectingGo to resource.

II.E.In the left navigation menu:
SelectAccess keys.
InAdmin user, selectEnabled.
Copy the values forLogin server,Username, andpassword. You'll use them in the next step to sign into the registry and push a docker image.

III. Push the sample image to Azure Container Registry
In this section, you push the image to Azure Container Registry, which will be used by App Service later.
From the local terminal where you built the sample image, use thedocker logincommand to sign in to the container registry:docker login <registry-name>.azurecr.io --username <registry-username>Replace<registry-name>and<registry-username>with values from the previous steps. When prompted, type in one of the passwords from the previous section.You use the same registry name in all the remaining steps of this section.
From the local terminal where you built the sample image, use thedocker logincommand to sign in to the container registry:
docker login
docker login <registry-name>.azurecr.io --username <registry-username>
docker login <registry-name>.azurecr.io --username <registry-username>
Replace<registry-name>and<registry-username>with values from the previous steps. When prompted, type in one of the passwords from the previous section.
<registry-name>
<registry-username>
You use the same registry name in all the remaining steps of this section.
When the sign-in is successful, tag your local Docker image to the registry:docker tag appsvc-tutorial-custom-image <registry-name>.azurecr.io/appsvc-tutorial-custom-image:latest
When the sign-in is successful, tag your local Docker image to the registry:
docker tag appsvc-tutorial-custom-image <registry-name>.azurecr.io/appsvc-tutorial-custom-image:latest
docker tag appsvc-tutorial-custom-image <registry-name>.azurecr.io/appsvc-tutorial-custom-image:latest
Use thedocker pushcommand to push the image to the registry:docker push <registry-name>.azurecr.io/appsvc-tutorial-custom-image:latestUploading the image the first time might take a few minutes because it includes the base image. Subsequent uploads are typically faster.While you're waiting, you can complete the steps in the next section to configure App Service to deploy from the registry.
Use thedocker pushcommand to push the image to the registry:
docker push
docker push <registry-name>.azurecr.io/appsvc-tutorial-custom-image:latest
docker push <registry-name>.azurecr.io/appsvc-tutorial-custom-image:latest
Uploading the image the first time might take a few minutes because it includes the base image. Subsequent uploads are typically faster.
While you're waiting, you can complete the steps in the next section to configure App Service to deploy from the registry.
IV. Authorize the managed identity for your registry
The managed identity you created doesn't have authorization to pull from the container registry yet. In this step, you enable the authorization.
Azure CLI
Azure portal
Retrieve the principal ID for the managed identity:principalId=$(az identity show --resource-group msdocs-custom-container-tutorial --name myID --query principalId --output tsv)
Retrieve the principal ID for the managed identity:
principalId=$(az identity show --resource-group msdocs-custom-container-tutorial --name myID --query principalId --output tsv)
principalId=$(az identity show --resource-group msdocs-custom-container-tutorial --name myID --query principalId --output tsv)
Retrieve the resource ID for the container registry:registryId=$(az acr show --resource-group msdocs-custom-container-tutorial --name <registry-name> --query id --output tsv)
Retrieve the resource ID for the container registry:
registryId=$(az acr show --resource-group msdocs-custom-container-tutorial --name <registry-name> --query id --output tsv)
registryId=$(az acr show --resource-group msdocs-custom-container-tutorial --name <registry-name> --query id --output tsv)
Grant the managed identity permission to access the container registry:az role assignment create --assignee $principalId --scope $registryId --role "AcrPull"For more information about these permissions, seeWhat is Azure role-based access control?.
Grant the managed identity permission to access the container registry:
az role assignment create --assignee $principalId --scope $registryId --role "AcrPull"
az role assignment create --assignee $principalId --scope $registryId --role "AcrPull"
For more information about these permissions, seeWhat is Azure role-based access control?.
IV.A.Back in the management page for the container registry:
In the left navigation menu, selectAccess control (IAM).
SelectAdd role assignment.

IV.B.SelectAcrPullin the list of roles.

IV.C.
Select theMemberstab.
UnderAssign access to, selectManaged identity.
UnderMembers, selectSelect members.

IV.D.
InManaged identity, selectUser-assigned managed identity.
UnderSelect, selectmyID.

IV.E.
Select theReview + assigntab.
SelectReview + assignat the bottom.

V. Create the web app
Azure CLI
Azure portal
Create an App Service plan using theaz appservice plan createcommand:az appservice plan create --name myAppServicePlan --resource-group msdocs-custom-container-tutorial --is-linuxAn App Service plan corresponds to the virtual machine that hosts the web app. By default, the previous command uses an inexpensiveB1 pricing tierthat's free for the first month. You can specify the tier by using the--skuparameter.
Create an App Service plan using theaz appservice plan createcommand:
az appservice plan create
az appservice plan create --name myAppServicePlan --resource-group msdocs-custom-container-tutorial --is-linux
az appservice plan create --name myAppServicePlan --resource-group msdocs-custom-container-tutorial --is-linux
An App Service plan corresponds to the virtual machine that hosts the web app. By default, the previous command uses an inexpensiveB1 pricing tierthat's free for the first month. You can specify the tier by using the--skuparameter.
--sku
Create the web app with theaz webapp createcommand:az webapp create --resource-group msdocs-custom-container-tutorial --plan myAppServicePlan --name <app-name> --deployment-container-image-name <registry-name>.azurecr.io/appsvc-tutorial-custom-image:latestReplace<app-name>with a name for the web app. The name must be unique across all of Azure. Also replace<registry-name>with the name of your registry from the previous section.TipYou can retrieve the web app's container settings at any time with the commandaz webapp config container show --name <app-name> --resource-group msdocs-custom-container-tutorial. The image is specified in the propertyDOCKER_CUSTOM_IMAGE_NAME. When the web app is deployed through Azure DevOps or Azure Resource Manager templates, the image can also appear in a property namedLinuxFxVersion. Both properties serve the same purpose. If both are present in the web app's configuration,LinuxFxVersiontakes precedence.
Create the web app with theaz webapp createcommand:
az webapp create
az webapp create --resource-group msdocs-custom-container-tutorial --plan myAppServicePlan --name <app-name> --deployment-container-image-name <registry-name>.azurecr.io/appsvc-tutorial-custom-image:latest
az webapp create --resource-group msdocs-custom-container-tutorial --plan myAppServicePlan --name <app-name> --deployment-container-image-name <registry-name>.azurecr.io/appsvc-tutorial-custom-image:latest
Replace<app-name>with a name for the web app. The name must be unique across all of Azure. Also replace<registry-name>with the name of your registry from the previous section.
<app-name>
<registry-name>
Tip
You can retrieve the web app's container settings at any time with the commandaz webapp config container show --name <app-name> --resource-group msdocs-custom-container-tutorial. The image is specified in the propertyDOCKER_CUSTOM_IMAGE_NAME. When the web app is deployed through Azure DevOps or Azure Resource Manager templates, the image can also appear in a property namedLinuxFxVersion. Both properties serve the same purpose. If both are present in the web app's configuration,LinuxFxVersiontakes precedence.
az webapp config container show --name <app-name> --resource-group msdocs-custom-container-tutorial
DOCKER_CUSTOM_IMAGE_NAME
LinuxFxVersion
LinuxFxVersion
V.A.In the Azure portal:
Type "app" in the search bar at the top of the Azure portal.
Select the item labeledApp Servicesunder theServicesheading.
SelectCreate.
You can also navigate to thecreation wizarddirectly.

V.B.In the create wizard:
InSubscription, select the subscription you used earlier.
InResource group, selectmsdocs-custom-container-tutorial.
InName, type a unique app name, which will be used in your app's default hostname<app-name>.azurewebsites.net.
<app-name>.azurewebsites.net
InPublish, selectDocker Container.
InOperating System, selectLinux.
InRegion, selectWest Europe, or a region near you.
InLinux Plan (West Europe), selectCreate new, type a plan name, and selectOK.
InPricing plan, selectChange size.

V.C.In the Spec Picker:
SelectDev / Test.
SelectB1.
SelectApply.

V.D.Back in the app creation wizard:
Select theDockertab.
InImage Source, selectAzure Container Registry.
InRegistry, select the container registry you created earlier.
InImage, selectappsvc-tutorial-custom-image.
InTag, selectlatest.

V.E.
Select theReview + createtab.
SelectCreate.

V.F.When the creation of the web app is complete, you can open its management page by selectingGo to resource.

VI. Configure the web app
In this step, you configure the web app as follows:
Configure the app to send requests to port 8000. The sample container is listening on port 8000 for web requests.
Tell your app to use the managed identity to pull images from your container registry.
Configure continuous deployment from the container registry (every image push to the registry will trigger your app to pull the new image). This part isn't needed for your web app to pull from your container registry, but it can let your web app know when a new image is pushed to the registry. Without it, you must manually trigger an image pull by restarting the web app.
Azure CLI
Azure portal
Useaz webapp config appsettings setto set theWEBSITES_PORTenvironment variable as expected by the app code:az webapp config appsettings set --resource-group msdocs-custom-container-tutorial --name <app-name> --settings WEBSITES_PORT=8000Replace<app-name>with the name you used in the previous step.
Useaz webapp config appsettings setto set theWEBSITES_PORTenvironment variable as expected by the app code:
az webapp config appsettings set
WEBSITES_PORT
az webapp config appsettings set --resource-group msdocs-custom-container-tutorial --name <app-name> --settings WEBSITES_PORT=8000
az webapp config appsettings set --resource-group msdocs-custom-container-tutorial --name <app-name> --settings WEBSITES_PORT=8000
Replace<app-name>with the name you used in the previous step.
<app-name>
Enable the user-assigned managed identity in the web app with theaz webapp identity assigncommand:id=$(az identity show --resource-group msdocs-custom-container-tutorial --name myID --query id --output tsv)
az webapp identity assign --resource-group msdocs-custom-container-tutorial --name <app-name> --identities $idReplace<app-name>with the name you used in the previous step.
Enable the user-assigned managed identity in the web app with theaz webapp identity assigncommand:
az webapp identity assign
id=$(az identity show --resource-group msdocs-custom-container-tutorial --name myID --query id --output tsv)
az webapp identity assign --resource-group msdocs-custom-container-tutorial --name <app-name> --identities $id
id=$(az identity show --resource-group msdocs-custom-container-tutorial --name myID --query id --output tsv)
az webapp identity assign --resource-group msdocs-custom-container-tutorial --name <app-name> --identities $id
Replace<app-name>with the name you used in the previous step.
<app-name>
Configure your app to pull from Azure Container Registry by using managed identities.appConfig=$(az webapp config show --resource-group msdocs-custom-container-tutorial --name <app-name> --query id --output tsv)
az resource update --ids $appConfig --set properties.acrUseManagedIdentityCreds=TrueReplace<app-name>with the name you used in the previous step.
Configure your app to pull from Azure Container Registry by using managed identities.
appConfig=$(az webapp config show --resource-group msdocs-custom-container-tutorial --name <app-name> --query id --output tsv)
az resource update --ids $appConfig --set properties.acrUseManagedIdentityCreds=True
appConfig=$(az webapp config show --resource-group msdocs-custom-container-tutorial --name <app-name> --query id --output tsv)
az resource update --ids $appConfig --set properties.acrUseManagedIdentityCreds=True
Replace<app-name>with the name you used in the previous step.
<app-name>
Set the client ID your web app uses to pull from Azure Container Registry. This step isn't needed if you use the system-assigned managed identity.clientId=$(az identity show --resource-group msdocs-custom-container-tutorial --name myID --query clientId --output tsv)
az resource update --ids $appConfig --set properties.AcrUserManagedIdentityID=$clientId
Set the client ID your web app uses to pull from Azure Container Registry. This step isn't needed if you use the system-assigned managed identity.
clientId=$(az identity show --resource-group msdocs-custom-container-tutorial --name myID --query clientId --output tsv)
az resource update --ids $appConfig --set properties.AcrUserManagedIdentityID=$clientId
clientId=$(az identity show --resource-group msdocs-custom-container-tutorial --name myID --query clientId --output tsv)
az resource update --ids $appConfig --set properties.AcrUserManagedIdentityID=$clientId
Enable CI/CD in App Service.cicdUrl=$(az webapp deployment container config --enable-cd true --name <app-name> --resource-group msdocs-custom-container-tutorial --query CI_CD_URL --output tsv)CI_CD_URLis a URL that App Service generates for you. Your registry should use this URL to notify App Service that an image push occurred. It doesn't actually create the webhook for you.
Enable CI/CD in App Service.
cicdUrl=$(az webapp deployment container config --enable-cd true --name <app-name> --resource-group msdocs-custom-container-tutorial --query CI_CD_URL --output tsv)
cicdUrl=$(az webapp deployment container config --enable-cd true --name <app-name> --resource-group msdocs-custom-container-tutorial --query CI_CD_URL --output tsv)
CI_CD_URLis a URL that App Service generates for you. Your registry should use this URL to notify App Service that an image push occurred. It doesn't actually create the webhook for you.
CI_CD_URL
Create a webhook in your container registry using the CI_CD_URL you got from the last step.az acr webhook create --name appserviceCD --registry <registry-name> --uri $cicdUrl --actions push --scope appsvc-tutorial-custom-image:latest
Create a webhook in your container registry using the CI_CD_URL you got from the last step.
az acr webhook create --name appserviceCD --registry <registry-name> --uri $cicdUrl --actions push --scope appsvc-tutorial-custom-image:latest
az acr webhook create --name appserviceCD --registry <registry-name> --uri $cicdUrl --actions push --scope appsvc-tutorial-custom-image:latest
To test if your webhook is configured properly, ping the webhook and see if you get a 200 OK response.eventId=$(az acr webhook ping --name appserviceCD --registry <registry-name> --query id --output tsv)
az acr webhook list-events --name appserviceCD --registry <registry-name> --query "[?id=='$eventId'].eventResponseMessage"TipTo see all information about all webhook events, remove the--queryparameter.If you're streaming the container log, you should see aStarting container for sitemessage after the webhook ping because the webhook triggers the app to restart.
To test if your webhook is configured properly, ping the webhook and see if you get a 200 OK response.
eventId=$(az acr webhook ping --name appserviceCD --registry <registry-name> --query id --output tsv)
az acr webhook list-events --name appserviceCD --registry <registry-name> --query "[?id=='$eventId'].eventResponseMessage"
eventId=$(az acr webhook ping --name appserviceCD --registry <registry-name> --query id --output tsv)
az acr webhook list-events --name appserviceCD --registry <registry-name> --query "[?id=='$eventId'].eventResponseMessage"
Tip
To see all information about all webhook events, remove the--queryparameter.
--query
If you're streaming the container log, you should see aStarting container for sitemessage after the webhook ping because the webhook triggers the app to restart.
Starting container for site
VI.A.On your web app's management page, selectConfiguration.

VI.B.On the Configuration page:
SelectNew application setting.
InName, typeWEBSITES_PORT.
InValue, type8000.
SelectOK.
SelectSavein the top menu, then selectContinue.
TheWEBSITES_PORTsetting specifies the container port to forward web requests to. For more information, seecustom container app settings.
WEBSITES_PORT

VI.C.In the left navigation menu, selectIdentity. Then do the following on the Identity page:
Select theUser assignedtab.
SelectAdd.

VI.D.
SelectmyID.
SelectAdd.

VI.E.In the left navigation menu, selectDeployment Center. Then do the following on the Deployment Center page:
InAuthentication, selectManaged Identity.
InIdentity, selectmyID.
InContinuous deployment, selectOn.
SelectSavein the top menu.
When you turn on continuous deployment to a container registry, a webhook is automatically added to the registry for your web app.

VI.F.On the Deployment Center page, select theLogstab. Here, you can see log messages for pulling the image and starting the container. Later, you'll learn how to see generated console messages  from within the container.

VII. Browse to the web app
Azure CLI
Azure portal
To test the app, browse tohttps://<app-name>.azurewebsites.net. Replace<app-name>with the name of your web app.
https://<app-name>.azurewebsites.net
<app-name>
VII.A.On the App Service page:
In the left navigation menu, selectOverview.
InURL, select the link.

The first time you attempt to access the app, it might take some time for the app to respond because App Service must pull the entire image from the registry. If the browser times out, just refresh the page. Once the initial image is pulled, subsequent tests will run much faster.

VIII. Access diagnostic logs
Azure CLI
Azure portal
While you're waiting for the App Service to pull in the image, it's helpful to see exactly what App Service is doing by streaming the container logs to your terminal.
Turn on container logging:az webapp log config --name <app-name> --resource-group msdocs-custom-container-tutorial --docker-container-logging filesystem
Turn on container logging:
az webapp log config --name <app-name> --resource-group msdocs-custom-container-tutorial --docker-container-logging filesystem
az webapp log config --name <app-name> --resource-group msdocs-custom-container-tutorial --docker-container-logging filesystem
Enable the log stream:az webapp log tail --name <app-name> --resource-group msdocs-custom-container-tutorialIf you don't see console logs immediately, check again in 30 seconds.You can also inspect the log files from the browser athttps://<app-name>.scm.azurewebsites.net/api/logs/docker.
Enable the log stream:
az webapp log tail --name <app-name> --resource-group msdocs-custom-container-tutorial
az webapp log tail --name <app-name> --resource-group msdocs-custom-container-tutorial
If you don't see console logs immediately, check again in 30 seconds.
You can also inspect the log files from the browser athttps://<app-name>.scm.azurewebsites.net/api/logs/docker.
https://<app-name>.scm.azurewebsites.net/api/logs/docker
To stop log streaming at any time, selectCtrl+C.
To stop log streaming at any time, selectCtrl+C.
On the Deployment Center page, you can already see the log messages for pulling and starting the container. In this step, you enable logging of the console output from within the container.
VIII.A.On the App Service page:
In the left navigation menu, selectApp Service logs.
InApplication logging, selectFile System.
SelectSave.

VIII.B.In the left navigation menu, selectLog stream. You should now start to see the container's console output in the log stream.

IX. Modify the app code and redeploy
In this section, you make a change to the web app code, rebuild the image, and then push it to your container registry. App Service then automatically pulls the updated image from the registry to update the running web app.
In your localdocker-django-webapp-linuxfolder, open the fileapp/templates/app/index.html.
In your localdocker-django-webapp-linuxfolder, open the fileapp/templates/app/index.html.
Change the first HTML element to match the following code.<nav class="navbar navbar-inverse navbar-fixed-top">
  <div class="container">
    <div class="navbar-header">
      <a class="navbar-brand" href="#">Azure App Service - Updated Here!</a>
    </div>
  </div>
</nav>
Change the first HTML element to match the following code.
<nav class="navbar navbar-inverse navbar-fixed-top">
  <div class="container">
    <div class="navbar-header">
      <a class="navbar-brand" href="#">Azure App Service - Updated Here!</a>
    </div>
  </div>
</nav>
<nav class="navbar navbar-inverse navbar-fixed-top">
  <div class="container">
    <div class="navbar-header">
      <a class="navbar-brand" href="#">Azure App Service - Updated Here!</a>
    </div>
  </div>
</nav>
Save your changes.
Save your changes.
Change to thedocker-django-webapp-linuxfolder and rebuild the image:docker build --tag appsvc-tutorial-custom-image .
Change to thedocker-django-webapp-linuxfolder and rebuild the image:
docker build --tag appsvc-tutorial-custom-image .
docker build --tag appsvc-tutorial-custom-image .
Update the image's tag tolatest:docker tag appsvc-tutorial-custom-image <registry-name>.azurecr.io/appsvc-tutorial-custom-image:latestReplace<registry-name>with the name of your registry.
Update the image's tag tolatest:
latest
docker tag appsvc-tutorial-custom-image <registry-name>.azurecr.io/appsvc-tutorial-custom-image:latest
docker tag appsvc-tutorial-custom-image <registry-name>.azurecr.io/appsvc-tutorial-custom-image:latest
Replace<registry-name>with the name of your registry.
<registry-name>
Push the image to the registry:docker push <registry-name>.azurecr.io/appsvc-tutorial-custom-image:latest
Push the image to the registry:
docker push <registry-name>.azurecr.io/appsvc-tutorial-custom-image:latest
docker push <registry-name>.azurecr.io/appsvc-tutorial-custom-image:latest
When the image push is complete, the webhook notifies App Service about the push, and App Service tries to pull in the updated image. Wait a few minutes, and then verify that the update has been deployed by browsing tohttps://<app-name>.azurewebsites.net.
When the image push is complete, the webhook notifies App Service about the push, and App Service tries to pull in the updated image. Wait a few minutes, and then verify that the update has been deployed by browsing tohttps://<app-name>.azurewebsites.net.
https://<app-name>.azurewebsites.net
X. Connect to the container using SSH
SSH enables improved-security communication between a container and a client. To enable an SSH connection to your container, you must configure your custom image for it. When the container is running, you can open an SSH connection.
Configure the container for SSH
The sample app used in this tutorial already has the necessary configuration in theDockerfile, which installs the SSH server and also sets the sign-in credentials. This section is informational only. To connect to the container, skip to the next section.
ENV SSH_PASSWD "root:Docker!"
RUN apt-get update \
        && apt-get install -y --no-install-recommends dialog \
        && apt-get update \
  && apt-get install -y --no-install-recommends openssh-server \
  && echo "$SSH_PASSWD" | chpasswd
ENV SSH_PASSWD "root:Docker!"
RUN apt-get update \
        && apt-get install -y --no-install-recommends dialog \
        && apt-get update \
  && apt-get install -y --no-install-recommends openssh-server \
  && echo "$SSH_PASSWD" | chpasswd
Note
This configuration doesn't allow external connections to the container. SSH is available only through the Kudu/SCM Site. The Kudu/SCM site is authenticated with your Azure account.root:Docker!should not be altered when you use SSH. SCM/KUDU will use your Azure portal credentials. Changing this value will result in an error when you use SSH.
root:Docker!
TheDockerfilealso copies thesshd_configfile to the/etc/ssh/folder and exposes port 2222 on the container:
COPY sshd_config /etc/ssh/

# ...

EXPOSE 8000 2222
COPY sshd_config /etc/ssh/

# ...

EXPOSE 8000 2222
Port 2222 is an internal port accessible only by containers within the bridge network of a private virtual network.
Finally, the entry script,init.sh, starts the SSH server.
#!/bin/bash
service ssh start
#!/bin/bash
service ssh start
Open the SSH connection to the container
Azure CLI
Azure portal
Browse tohttps://<app-name>.scm.azurewebsites.net/webssh/hostand sign in with your Azure account. Replace<app-name>with the name of your web app.
Browse tohttps://<app-name>.scm.azurewebsites.net/webssh/hostand sign in with your Azure account. Replace<app-name>with the name of your web app.
https://<app-name>.scm.azurewebsites.net/webssh/host
<app-name>
When you sign in, you're redirected to an informational page for the web app. SelectSSHat the top of the page to open the shell and use commands.For example, you can examine the processes running within the app by using thetopcommand.
When you sign in, you're redirected to an informational page for the web app. SelectSSHat the top of the page to open the shell and use commands.
For example, you can examine the processes running within the app by using thetopcommand.
top
X.A.On the App Service page:
In the left navigation menu, selectSSH.
SelectGo.

X.B.The SSH session is opened in a new browser tab. Wait for the status bar at the bottom to show a green `SSH CONNECTION ESTABLISHED message. You can then run commands from within the container. Configuration changes made to your container aren't persisted across app restarts.

XI. Clean up resources
Azure CLI
Azure portal
The resources you created in this article might incur ongoing costs. To clean up the resources, you only need to delete the resource group that contains them:
az group delete --name msdocs-custom-container-tutorial
az group delete --name msdocs-custom-container-tutorial
XI.A.In the search bar at the top of the Azure portal:
Enter the resource group name.
Select the resource group.

XI.B.On the resource group page, selectDelete resource group.

XI.C.
Enter the resource group name to confirm your deletion.
SelectDelete.

Next steps
What you learned:
Deploy a custom image to a private container registry.
Deploy and the custom image in App Service.
Update and redeploy the image.
Access diagnostic logs.
Connect to the container by using SSH.
Push a custom Docker image to Azure Container Registry.
Deploy the custom image to App Service.
Configure environment variables.
Pull the image into App Service by using a managed identity.
Access diagnostic logs.
Enable CI/CD from Azure Container Registry to App Service.
Connect to the container by using SSH.
In the next tutorial, you learn how to provide security for your app with a custom domain and certificate.
Provide security with custom domain and certificate
Or, check out other resources:
Configure a custom container
Tutorial: Configure a sidecar container for custom container in Azure App Service (preview)
Feedback
Was this page helpful?
Additional resources