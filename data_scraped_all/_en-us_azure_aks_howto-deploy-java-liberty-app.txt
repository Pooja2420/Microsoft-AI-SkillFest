Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Deploy a Java application with Open Liberty or WebSphere Liberty on an Azure Kubernetes Service (AKS) cluster
Article
2024-11-19
24 contributors
In this article
This article demonstrates how to:
Run your Java, Java EE, Jakarta EE, or MicroProfile application on theOpen LibertyorIBM WebSphere Libertyruntime.
Build the application's Docker image withaz acr buildby using Open Liberty or WebSphere Liberty container images.
az acr build
Deploy the containerized application to an Azure Kubernetes Service (AKS) cluster by using the Open Liberty Operator or WebSphere Liberty Operator.
The Open Liberty Operator simplifies the deployment and management of applications running on Kubernetes clusters. With the Open Liberty Operator or WebSphere Liberty Operator, you can also perform more advanced operations, such as gathering traces and dumps.
This article uses the Azure Marketplace offer for Open Liberty or WebSphere Liberty to accelerate your journey to AKS. The offer automatically provisions some Azure resources, including:
An Azure Container Registry instance.
An AKS cluster.
An Application Gateway Ingress Controller (AGIC) instance.
The Open Liberty Operator and WebSphere Liberty Operator.
Optionally, a container image that includes Liberty and your application.
If you prefer manual step-by-step guidance for running Liberty on AKS, seeManually deploy a Java application with Open Liberty or WebSphere Liberty on an Azure Kubernetes Service (AKS) cluster.
This article is intended to help you quickly get to deployment. Before you go to production, you should explore theIBM documentation about tuning Liberty.
If you're interested in providing feedback or working closely on your migration scenarios with the engineering team developing WebSphere on Azure solutions, fill out this shortsurvey on WebSphere migrationand include your contact information. The team of program managers, architects, and engineers will promptly get in touch with you to initiate close collaboration.
Prerequisites
An Azure subscription. If you don't have anAzure subscription, create anAzure free accountbefore you begin.
Prepare a local machine with Unix-like operating system installed - for example, Ubuntu, Azure Linux, macOS, or Windows Subsystem for Linux.
Install theAzure CLIto run Azure CLI commands.Sign in to the Azure CLI by using theaz logincommand. To finish the authentication process, follow the steps displayed in your terminal. For other sign-in options, seeSign into Azure with Azure CLI.When you're prompted, install the Azure CLI extension on first use. For more information about extensions, seeUse and manage extensions with the Azure CLI.Runaz versionto find the version and dependent libraries that are installed. To upgrade to the latest version, runaz upgrade. This article requires at least version 2.61.0 of Azure CLI.
Sign in to the Azure CLI by using theaz logincommand. To finish the authentication process, follow the steps displayed in your terminal. For other sign-in options, seeSign into Azure with Azure CLI.
az login
When you're prompted, install the Azure CLI extension on first use. For more information about extensions, seeUse and manage extensions with the Azure CLI.
Runaz versionto find the version and dependent libraries that are installed. To upgrade to the latest version, runaz upgrade. This article requires at least version 2.61.0 of Azure CLI.
az version
az upgrade
Install a Java Standard Edition (SE) implementation, version 17 (for example,Eclipse Open J9).
InstallMaven3.9.8 or higher.
EnsureGitis installed.
Make sure you're assigned either theOwnerrole or theContributorandUser Access Administratorroles in the subscription. You can verify it by following steps inList role assignments for a user or group.
Owner
Contributor
User Access Administrator
Create a Liberty on AKS deployment using the portal
The following steps guide you to create a Liberty runtime on AKS. After you complete these steps, you'll have a Container Registry instance and an AKS cluster for deploying your containerized application.
Go to theAzure portal. In the search box at the top of the page, enterWebSphere Liberty/Open Liberty on Kubernetes. When the suggestions appear, select the one and only match in theMarketplacesection.If you prefer, you cango directly to the offer.
Go to theAzure portal. In the search box at the top of the page, enterWebSphere Liberty/Open Liberty on Kubernetes. When the suggestions appear, select the one and only match in theMarketplacesection.
If you prefer, you cango directly to the offer.
SelectCreate.
SelectCreate.
On theBasicspane:Create a new resource group. Because resource groups must be unique within a subscription, choose a unique name. An easy way to have unique names is to use a combination of your initials, today's date, and some identifier (for example,ejb0913-java-liberty-project-rg). Save aside the resource group name for later use in this article.ForRegion, select a region that's close to you. For example, selectEast US 2.
On theBasicspane:
Create a new resource group. Because resource groups must be unique within a subscription, choose a unique name. An easy way to have unique names is to use a combination of your initials, today's date, and some identifier (for example,ejb0913-java-liberty-project-rg). Save aside the resource group name for later use in this article.
ejb0913-java-liberty-project-rg
ForRegion, select a region that's close to you. For example, selectEast US 2.
SelectNext. On theAKSpane, you can optionally select an existing AKS cluster and Container Registry instance, instead of causing the deployment to create new ones. This choice enables you to use the sidecar pattern, as shown in theAzure Architecture Center. You can also adjust the settings for the size and number of the virtual machines in the AKS node pool.For the purposes of this article, just keep all the defaults on this pane.
SelectNext. On theAKSpane, you can optionally select an existing AKS cluster and Container Registry instance, instead of causing the deployment to create new ones. This choice enables you to use the sidecar pattern, as shown in theAzure Architecture Center. You can also adjust the settings for the size and number of the virtual machines in the AKS node pool.
For the purposes of this article, just keep all the defaults on this pane.
SelectNext. On theLoad Balancingpane, next toConnect to Azure Application Gateway?, selectYes. In this section, you can customize the following deployment options:ForVirtual networkandSubnet, you can optionally customize the virtual network and subnet into which the deployment places the resources. You don't need to change the remaining values from their defaults.ForTLS/SSL certificate, you can provide the TLS/SSL certificate from Azure Application Gateway. Leave the values at their defaults to cause the offer to generate a self-signed certificate.Don't go to production with a self-signed certificate. For more information about self-signed certificates, seeCreate a self-signed public certificate to authenticate your application.You can selectEnable cookie based affinity, also known as sticky sessions. This article uses sticky sessions, so be sure to select this option.
SelectNext. On theLoad Balancingpane, next toConnect to Azure Application Gateway?, selectYes. In this section, you can customize the following deployment options:
ForVirtual networkandSubnet, you can optionally customize the virtual network and subnet into which the deployment places the resources. You don't need to change the remaining values from their defaults.
ForVirtual networkandSubnet, you can optionally customize the virtual network and subnet into which the deployment places the resources. You don't need to change the remaining values from their defaults.
ForTLS/SSL certificate, you can provide the TLS/SSL certificate from Azure Application Gateway. Leave the values at their defaults to cause the offer to generate a self-signed certificate.Don't go to production with a self-signed certificate. For more information about self-signed certificates, seeCreate a self-signed public certificate to authenticate your application.
ForTLS/SSL certificate, you can provide the TLS/SSL certificate from Azure Application Gateway. Leave the values at their defaults to cause the offer to generate a self-signed certificate.
Don't go to production with a self-signed certificate. For more information about self-signed certificates, seeCreate a self-signed public certificate to authenticate your application.
You can selectEnable cookie based affinity, also known as sticky sessions. This article uses sticky sessions, so be sure to select this option.
You can selectEnable cookie based affinity, also known as sticky sessions. This article uses sticky sessions, so be sure to select this option.
SelectNext. On theOperator and applicationpane, this article uses all the defaults. However, you can customize the following deployment options:You can deploy WebSphere Liberty Operator by selectingYesfor the optionIBM supported?. Leaving the defaultNodeploys Open Liberty Operator.You can deploy an application for your selected operator by selectingYesfor the optionDeploy an application?. Leaving the defaultNodoesn't deploy any application.
SelectNext. On theOperator and applicationpane, this article uses all the defaults. However, you can customize the following deployment options:
You can deploy WebSphere Liberty Operator by selectingYesfor the optionIBM supported?. Leaving the defaultNodeploys Open Liberty Operator.
You can deploy an application for your selected operator by selectingYesfor the optionDeploy an application?. Leaving the defaultNodoesn't deploy any application.
SelectReview + createto validate your selected options. On theReview + createpane, when you seeCreatebecome available after validation passes, select it.The deployment can take up to 20 minutes. While you wait for the deployment to finish, you can follow the steps in the sectionCreate an Azure SQL Database instance. After you complete that section, come back here and continue.
SelectReview + createto validate your selected options. On theReview + createpane, when you seeCreatebecome available after validation passes, select it.
The deployment can take up to 20 minutes. While you wait for the deployment to finish, you can follow the steps in the sectionCreate an Azure SQL Database instance. After you complete that section, come back here and continue.
Capture selected information from the deployment
If you moved away from theDeployment is in progresspane, the following steps show you how to get back to that pane. If you're still on the pane that showsYour deployment is complete, go to the newly created resource group and skip to the third step.
In the corner of any portal page, select the menu button, and then selectResource groups.
In the corner of any portal page, select the menu button, and then selectResource groups.
In the box with the textFilter for any field, enter the first few characters of the resource group that you created previously. If you followed the recommended convention, enter your initials, and then select the appropriate resource group.
In the box with the textFilter for any field, enter the first few characters of the resource group that you created previously. If you followed the recommended convention, enter your initials, and then select the appropriate resource group.
In the list of resources in the resource group, select the resource with theTypevalue ofContainer registry.
In the list of resources in the resource group, select the resource with theTypevalue ofContainer registry.
On the navigation pane, underSettings, selectAccess keys.
On the navigation pane, underSettings, selectAccess keys.
Save aside the values forRegistry nameandLogin server. You can use the copy icon next to each field to copy the value to the system clipboard.NoteThis article uses theaz acr buildcommand to build  and push the Docker image to the Container Registry, without usingusernameandpasswordof the Container Registry. It's still possible to use username and password withdocker loginanddocker push. Using username and password is less secure than passwordless authentication.
Save aside the values forRegistry nameandLogin server. You can use the copy icon next to each field to copy the value to the system clipboard.
Note
This article uses theaz acr buildcommand to build  and push the Docker image to the Container Registry, without usingusernameandpasswordof the Container Registry. It's still possible to use username and password withdocker loginanddocker push. Using username and password is less secure than passwordless authentication.
az acr build
username
password
docker login
docker push
Go back to the resource group into which you deployed the resources.
Go back to the resource group into which you deployed the resources.
In theSettingssection, selectDeployments.
In theSettingssection, selectDeployments.
Select the bottom-most deployment in the list. TheDeployment namevalue matches the publisher ID of the offer. It contains the stringibm.
Select the bottom-most deployment in the list. TheDeployment namevalue matches the publisher ID of the offer. It contains the stringibm.
ibm
On the navigation pane, selectOutputs.
On the navigation pane, selectOutputs.
By using the same copy technique as with the preceding values, save aside the values for the following outputs:cmdToConnectToClusterappDeploymentTemplateYamlif the deployment doesn't include an application. That is, you selectedNoforDeploy an application?when you deployed the Marketplace offer. This article selectedNo. However, if you selectedYes, save aside the value ofappDeploymentYaml, which includes the application deployment.BashPowerShellPaste the value ofappDeploymentTemplateYamlorappDeploymentYamlinto a Bash shell, and run the command.Paste the value ofappDeploymentTemplateYamlorappDeploymentYamlinto PowerShell (excluding the| base64portion), append| ForEach-Object { [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($_)) }, and run the command.The output of this command is the application deployment YAML. Look for the ingress TLS secret with keywordsecretName, such as- secretName: secret785e2c. Save aside thesecretNamevalue.
By using the same copy technique as with the preceding values, save aside the values for the following outputs:
cmdToConnectToCluster
cmdToConnectToCluster
cmdToConnectToCluster
appDeploymentTemplateYamlif the deployment doesn't include an application. That is, you selectedNoforDeploy an application?when you deployed the Marketplace offer. This article selectedNo. However, if you selectedYes, save aside the value ofappDeploymentYaml, which includes the application deployment.BashPowerShellPaste the value ofappDeploymentTemplateYamlorappDeploymentYamlinto a Bash shell, and run the command.Paste the value ofappDeploymentTemplateYamlorappDeploymentYamlinto PowerShell (excluding the| base64portion), append| ForEach-Object { [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($_)) }, and run the command.The output of this command is the application deployment YAML. Look for the ingress TLS secret with keywordsecretName, such as- secretName: secret785e2c. Save aside thesecretNamevalue.
appDeploymentTemplateYamlif the deployment doesn't include an application. That is, you selectedNoforDeploy an application?when you deployed the Marketplace offer. This article selectedNo. However, if you selectedYes, save aside the value ofappDeploymentYaml, which includes the application deployment.
appDeploymentTemplateYaml
appDeploymentYaml
Bash
PowerShell
Paste the value ofappDeploymentTemplateYamlorappDeploymentYamlinto a Bash shell, and run the command.
appDeploymentTemplateYaml
appDeploymentYaml
Paste the value ofappDeploymentTemplateYamlorappDeploymentYamlinto PowerShell (excluding the| base64portion), append| ForEach-Object { [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($_)) }, and run the command.
appDeploymentTemplateYaml
appDeploymentYaml
| base64
| ForEach-Object { [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($_)) }
The output of this command is the application deployment YAML. Look for the ingress TLS secret with keywordsecretName, such as- secretName: secret785e2c. Save aside thesecretNamevalue.
secretName
- secretName: secret785e2c
secretName
Run the following commands to set the environment variables that you captured in the previous steps. These environment variables are used later in this article.
Bash
PowerShell
export RESOURCE_GROUP_NAME=<your-resource-group-name>
export REGISTRY_NAME=<your-registry-nam-of-container-registry>
export LOGIN_SERVER=<your-login-server-of-container-registry>
export INGRESS_TLS_SECRET=<your-ingress-tls-secret-name>
export RESOURCE_GROUP_NAME=<your-resource-group-name>
export REGISTRY_NAME=<your-registry-nam-of-container-registry>
export LOGIN_SERVER=<your-login-server-of-container-registry>
export INGRESS_TLS_SECRET=<your-ingress-tls-secret-name>
$Env:RESOURCE_GROUP_NAME="<your-resource-group-name>"
$Env:REGISTRY_NAME="<your-registry-nam-of-container-registry>"
$Env:LOGIN_SERVER="<your-login-server-of-container-registry>"
$Env:INGRESS_TLS_SECRET="<your-ingress-tls-secret-name>"
$Env:RESOURCE_GROUP_NAME="<your-resource-group-name>"
$Env:REGISTRY_NAME="<your-registry-nam-of-container-registry>"
$Env:LOGIN_SERVER="<your-login-server-of-container-registry>"
$Env:INGRESS_TLS_SECRET="<your-ingress-tls-secret-name>"
Create an Azure SQL Database instance
In this section, you create an Azure SQL Database single database for use with your app.
Bash
PowerShell
First, set database-related environment variables. Replace<your-unique-sql-server-name>with a unique name for your Azure SQL Database server.
<your-unique-sql-server-name>
export SQL_SERVER_NAME=<your-unique-sql-server-name>
export DB_NAME=demodb
export SQL_SERVER_NAME=<your-unique-sql-server-name>
export DB_NAME=demodb
Run the following command in your terminal to create a single database in Azure SQL Database and set the current signed-in user as a Microsoft Entra admin. For more information, seeQuickstart: Create a single database - Azure SQL Database.
export ENTRA_ADMIN_NAME=$(az account show --query user.name --output tsv)

az sql server create \
    --name $SQL_SERVER_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --enable-ad-only-auth \
    --external-admin-principal-type User \
    --external-admin-name $ENTRA_ADMIN_NAME \
    --external-admin-sid $(az ad signed-in-user show --query id --output tsv)
az sql db create \
    --resource-group $RESOURCE_GROUP_NAME \
    --server $SQL_SERVER_NAME \
    --name $DB_NAME \
    --edition GeneralPurpose \
    --compute-model Serverless \
    --family Gen5 \
    --capacity 2
export ENTRA_ADMIN_NAME=$(az account show --query user.name --output tsv)

az sql server create \
    --name $SQL_SERVER_NAME \
    --resource-group $RESOURCE_GROUP_NAME \
    --enable-ad-only-auth \
    --external-admin-principal-type User \
    --external-admin-name $ENTRA_ADMIN_NAME \
    --external-admin-sid $(az ad signed-in-user show --query id --output tsv)
az sql db create \
    --resource-group $RESOURCE_GROUP_NAME \
    --server $SQL_SERVER_NAME \
    --name $DB_NAME \
    --edition GeneralPurpose \
    --compute-model Serverless \
    --family Gen5 \
    --capacity 2
Then, add the local IP address to the Azure SQL Database server firewall rules to allow your local machine to connect to the database for local testing later.
export AZ_LOCAL_IP_ADDRESS=$(curl -s https://whatismyip.akamai.com)
az sql server firewall-rule create \
    --resource-group $RESOURCE_GROUP_NAME \
    --server $SQL_SERVER_NAME \
    --name AllowLocalIP \
    --start-ip-address $AZ_LOCAL_IP_ADDRESS \
    --end-ip-address $AZ_LOCAL_IP_ADDRESS
export AZ_LOCAL_IP_ADDRESS=$(curl -s https://whatismyip.akamai.com)
az sql server firewall-rule create \
    --resource-group $RESOURCE_GROUP_NAME \
    --server $SQL_SERVER_NAME \
    --name AllowLocalIP \
    --start-ip-address $AZ_LOCAL_IP_ADDRESS \
    --end-ip-address $AZ_LOCAL_IP_ADDRESS
First, set database-related environment variables. Replace<your-unique-sql-server-name>with a unique name for your Azure SQL Database server.
<your-unique-sql-server-name>
$Env:SQL_SERVER_NAME = "<your-unique-sql-server-name>"
$Env:DB_NAME = "demodb"
$Env:SQL_SERVER_NAME = "<your-unique-sql-server-name>"
$Env:DB_NAME = "demodb"
Run the following command in your terminal to create a single database in Azure SQL Database and set the current signed-in user as Microsoft Entra admin. For more information, seeQuickstart: Create a single database - Azure SQL Database.
$Env:ENTRA_ADMIN_NAME = $(az account show --query user.name --output tsv)

az sql server create --name $Env:SQL_SERVER_NAME --resource-group $Env:RESOURCE_GROUP_NAME --enable-ad-only-auth --external-admin-principal-type User --external-admin-name $Env:ENTRA_ADMIN_NAME --external-admin-sid $(az ad signed-in-user show --query id --output tsv)
az sql db create --resource-group $Env:RESOURCE_GROUP_NAME --server $Env:SQL_SERVER_NAME --name $Env:DB_NAME --edition GeneralPurpose --compute-model Serverless --family Gen5 --capacity 2
$Env:ENTRA_ADMIN_NAME = $(az account show --query user.name --output tsv)

az sql server create --name $Env:SQL_SERVER_NAME --resource-group $Env:RESOURCE_GROUP_NAME --enable-ad-only-auth --external-admin-principal-type User --external-admin-name $Env:ENTRA_ADMIN_NAME --external-admin-sid $(az ad signed-in-user show --query id --output tsv)
az sql db create --resource-group $Env:RESOURCE_GROUP_NAME --server $Env:SQL_SERVER_NAME --name $Env:DB_NAME --edition GeneralPurpose --compute-model Serverless --family Gen5 --capacity 2
Then, add the local IP address to the Azure SQL Database server firewall rules to allow your local machine to connect to the database for local testing later.
$Env:AZ_LOCAL_IP_ADDRESS = (Invoke-WebRequest https://whatismyip.akamai.com).Content
az sql server firewall-rule create --resource-group $Env:RESOURCE_GROUP_NAME --server $Env:SQL_SERVER_NAME --name AllowLocalIP --start-ip-address $Env:AZ_LOCAL_IP_ADDRESS --end-ip-address $Env:AZ_LOCAL_IP_ADDRESS
$Env:AZ_LOCAL_IP_ADDRESS = (Invoke-WebRequest https://whatismyip.akamai.com).Content
az sql server firewall-rule create --resource-group $Env:RESOURCE_GROUP_NAME --server $Env:SQL_SERVER_NAME --name AllowLocalIP --start-ip-address $Env:AZ_LOCAL_IP_ADDRESS --end-ip-address $Env:AZ_LOCAL_IP_ADDRESS
Note
This article disables SQL authentication to illustrate security best practices. Microsoft Entra ID is used to authenticate the connection to the server. If you need to enable SQL authentication, seeaz sql server create.
az sql server create
Create a service connection in AKS with Service Connector
In this section, you create a service connection between the AKS cluster and the Azure SQL Database using Microsoft Entra Workload ID with Service Connector. This connection allows the AKS cluster to access the Azure SQL Database without using SQL authentication.
First, grant appAzure Service Connector Resource Providerpermissions to the Application Gateway deployed before. This step is required to successfully create a service connection between the AKS cluster and the Azure SQL Database.
Go to the Azure portal and navigate to the resource group that you created earlier.
In the list of resources in the resource group, select the resource with theTypevalue ofApplication gateway.
SelectAccess control (IAM). Then, expandAddand selectAdd role assignment.
InRoletab, selectPrivileged administrator roles. Then, selectContributor. SelectNext.
InMemberstab, selectSelect members. Then, search for theAzure Service Connector Resource Providerapp. Select the app and selectSelect. SelectNext.
SelectReview + assign. Wait for a few seconds for the role assignment to complete.
Then, run the following commands to create a connection between the AKS cluster and the SQL database using Microsoft Entra Workload ID with Service Connector. For more information, seeCreate a service connection in AKS with Service Connector (preview).
Bash
PowerShell
# Register the Service Connector and Kubernetes Configuration resource providers
az provider register --namespace Microsoft.ServiceLinker --wait
az provider register --namespace Microsoft.KubernetesConfiguration --wait

# Install the Service Connector passwordless extension
az extension add --name serviceconnector-passwordless

# Retrieve the AKS cluster and Azure SQL Server resource IDs
export AKS_CLUSTER_RESOURCE_ID=$(az aks show \
    --resource-group $RESOURCE_GROUP_NAME \
    --name $CLUSTER_NAME \
    --query id \
    --output tsv)
export AZURE_SQL_SERVER_RESOURCE_ID=$(az sql server show \
    --resource-group $RESOURCE_GROUP_NAME \
    --name $SQL_SERVER_NAME \
    --query id \
    --output tsv)

# Create a user-assigned managed identity used for workload identity
export USER_ASSIGNED_IDENTITY_NAME=workload-identity-uami
az identity create \
    --resource-group ${RESOURCE_GROUP_NAME} \
    --name ${USER_ASSIGNED_IDENTITY_NAME}

# Retrieve the user-assigned managed identity resource ID
export UAMI_RESOURCE_ID=$(az identity show \
    --resource-group ${RESOURCE_GROUP_NAME} \
    --name ${USER_ASSIGNED_IDENTITY_NAME} \
    --query id \
    --output tsv)

# Create a service connection between your AKS cluster and your SQL database using Microsoft Entra Workload ID
az aks connection create sql \
    --connection akssqlconn \
    --client-type java \
    --source-id $AKS_CLUSTER_RESOURCE_ID \
    --target-id $AZURE_SQL_SERVER_RESOURCE_ID/databases/$DB_NAME \
    --workload-identity $UAMI_RESOURCE_ID
# Register the Service Connector and Kubernetes Configuration resource providers
az provider register --namespace Microsoft.ServiceLinker --wait
az provider register --namespace Microsoft.KubernetesConfiguration --wait

# Install the Service Connector passwordless extension
az extension add --name serviceconnector-passwordless

# Retrieve the AKS cluster and Azure SQL Server resource IDs
export AKS_CLUSTER_RESOURCE_ID=$(az aks show \
    --resource-group $RESOURCE_GROUP_NAME \
    --name $CLUSTER_NAME \
    --query id \
    --output tsv)
export AZURE_SQL_SERVER_RESOURCE_ID=$(az sql server show \
    --resource-group $RESOURCE_GROUP_NAME \
    --name $SQL_SERVER_NAME \
    --query id \
    --output tsv)

# Create a user-assigned managed identity used for workload identity
export USER_ASSIGNED_IDENTITY_NAME=workload-identity-uami
az identity create \
    --resource-group ${RESOURCE_GROUP_NAME} \
    --name ${USER_ASSIGNED_IDENTITY_NAME}

# Retrieve the user-assigned managed identity resource ID
export UAMI_RESOURCE_ID=$(az identity show \
    --resource-group ${RESOURCE_GROUP_NAME} \
    --name ${USER_ASSIGNED_IDENTITY_NAME} \
    --query id \
    --output tsv)

# Create a service connection between your AKS cluster and your SQL database using Microsoft Entra Workload ID
az aks connection create sql \
    --connection akssqlconn \
    --client-type java \
    --source-id $AKS_CLUSTER_RESOURCE_ID \
    --target-id $AZURE_SQL_SERVER_RESOURCE_ID/databases/$DB_NAME \
    --workload-identity $UAMI_RESOURCE_ID
# Register the Service Connector and Kubernetes Configuration resource providers
az provider register --namespace Microsoft.ServiceLinker --wait
az provider register --namespace Microsoft.KubernetesConfiguration --wait

# Install the Service Connector passwordless extension
az extension add --name serviceconnector-passwordless

# Retrieve the AKS cluster and Azure SQL Server resource IDs
$Env:AKS_CLUSTER_RESOURCE_ID = $(az aks show --resource-group $Env:RESOURCE_GROUP_NAME --name $Env:CLUSTER_NAME --query id --output tsv)
$Env:AZURE_SQL_SERVER_RESOURCE_ID = $(az sql server show --resource-group $Env:RESOURCE_GROUP_NAME --name $Env:SQL_SERVER_NAME --query id --output tsv)

# Create a user-assigned managed identity used for workload identity
$Env:USER_ASSIGNED_IDENTITY_NAME = "workload-identity-uami"
az identity create --resource-group $Env:RESOURCE_GROUP_NAME --name $Env:USER_ASSIGNED_IDENTITY_NAME

# Retrieve the user-assigned managed identity resource ID
$Env:UAMI_RESOURCE_ID = $(az identity show --resource-group $Env:RESOURCE_GROUP_NAME --name $Env:USER_ASSIGNED_IDENTITY_NAME --query id --output tsv)

# Create a service connection between your AKS cluster and your SQL database using Microsoft Entra Workload ID
az aks connection create sql --connection akssqlconn --client-type java --source-id $Env:AKS_CLUSTER_RESOURCE_ID --target-id $Env:AZURE_SQL_SERVER_RESOURCE_ID/databases/$Env:DB_NAME --workload-identity $Env:UAMI_RESOURCE_ID
# Register the Service Connector and Kubernetes Configuration resource providers
az provider register --namespace Microsoft.ServiceLinker --wait
az provider register --namespace Microsoft.KubernetesConfiguration --wait

# Install the Service Connector passwordless extension
az extension add --name serviceconnector-passwordless

# Retrieve the AKS cluster and Azure SQL Server resource IDs
$Env:AKS_CLUSTER_RESOURCE_ID = $(az aks show --resource-group $Env:RESOURCE_GROUP_NAME --name $Env:CLUSTER_NAME --query id --output tsv)
$Env:AZURE_SQL_SERVER_RESOURCE_ID = $(az sql server show --resource-group $Env:RESOURCE_GROUP_NAME --name $Env:SQL_SERVER_NAME --query id --output tsv)

# Create a user-assigned managed identity used for workload identity
$Env:USER_ASSIGNED_IDENTITY_NAME = "workload-identity-uami"
az identity create --resource-group $Env:RESOURCE_GROUP_NAME --name $Env:USER_ASSIGNED_IDENTITY_NAME

# Retrieve the user-assigned managed identity resource ID
$Env:UAMI_RESOURCE_ID = $(az identity show --resource-group $Env:RESOURCE_GROUP_NAME --name $Env:USER_ASSIGNED_IDENTITY_NAME --query id --output tsv)

# Create a service connection between your AKS cluster and your SQL database using Microsoft Entra Workload ID
az aks connection create sql --connection akssqlconn --client-type java --source-id $Env:AKS_CLUSTER_RESOURCE_ID --target-id $Env:AZURE_SQL_SERVER_RESOURCE_ID/databases/$Env:DB_NAME --workload-identity $Env:UAMI_RESOURCE_ID
Note
We recommend using Microsoft Entra Workload ID for secure access to your Azure SQL Database without using SQL authentication. If you need to use SQL authentication, ignore the previous steps in this section and use the username and password to connect to the Azure SQL Database.
Get service account and secret created by Service Connector
To authenticate to the Azure SQL Database, you need to get the service account and secret created by Service Connector. Follow the instructions in theUpdate your containersection ofTutorial: Connect an AKS app to Azure SQL Database. Take the optionDirectly create a deployment using the YAML sample code snippet providedand use the following steps:
From the highlighted sections in the sample Kubernetes deployment YAML, copy theserviceAccountNameandsecretRef.namevalues, as shown in the following example:serviceAccountName: <service-account-name>
containers:
- name: raw-linux
   envFrom:
      - secretRef:
         name: <secret-name>
From the highlighted sections in the sample Kubernetes deployment YAML, copy theserviceAccountNameandsecretRef.namevalues, as shown in the following example:
serviceAccountName
secretRef.name
serviceAccountName: <service-account-name>
containers:
- name: raw-linux
   envFrom:
      - secretRef:
         name: <secret-name>
serviceAccountName: <service-account-name>
containers:
- name: raw-linux
   envFrom:
      - secretRef:
         name: <secret-name>
Use the following commands to define environment variables. Replace<service-account-name>and<secret-name>with the values you copied in the previous step.BashPowerShellexport SERVICE_ACCOUNT_NAME=<service-account-name>
export SECRET_NAME=<secret-name>$Env:SERVICE_ACCOUNT_NAME = "<service-account-name>"
$Env:SECRET_NAME = "<secret-name>"These values are used in the next section to deploy the Liberty application to the AKS cluster.
Use the following commands to define environment variables. Replace<service-account-name>and<secret-name>with the values you copied in the previous step.
<service-account-name>
<secret-name>
Bash
PowerShell
export SERVICE_ACCOUNT_NAME=<service-account-name>
export SECRET_NAME=<secret-name>
export SERVICE_ACCOUNT_NAME=<service-account-name>
export SECRET_NAME=<secret-name>
$Env:SERVICE_ACCOUNT_NAME = "<service-account-name>"
$Env:SECRET_NAME = "<secret-name>"
$Env:SERVICE_ACCOUNT_NAME = "<service-account-name>"
$Env:SECRET_NAME = "<secret-name>"
These values are used in the next section to deploy the Liberty application to the AKS cluster.
Note
The secret created by Service Connector contains theAZURE_SQL_CONNECTIONSTRING, which is a password free connection string to the Azure SQL Database. For more information, see the sample value in theUser-assigned managed identity authenticationsection ofIntegrate Azure SQL Database with Service Connector.
AZURE_SQL_CONNECTIONSTRING
Now that you set up the database and AKS cluster, you can proceed to preparing AKS to host your Open Liberty application.
Configure and deploy the sample application
Follow the steps in this section to deploy the sample application on the Liberty runtime. These steps use Maven.
Check out the application
Clone the sample code for this article. The sample is onGitHub.
There are a few samples in the repository. This article usesjava-app. Run the following commands to get the sample:
Bash
PowerShell
git clone https://github.com/Azure-Samples/open-liberty-on-aks.git
cd open-liberty-on-aks
export BASE_DIR=$PWD
git checkout 20241107
git clone https://github.com/Azure-Samples/open-liberty-on-aks.git
cd open-liberty-on-aks
export BASE_DIR=$PWD
git checkout 20241107
git clone https://github.com/Azure-Samples/open-liberty-on-aks.git
cd open-liberty-on-aks
$Env:BASE_DIR=$PWD.Path
git checkout 20241107
git clone https://github.com/Azure-Samples/open-liberty-on-aks.git
cd open-liberty-on-aks
$Env:BASE_DIR=$PWD.Path
git checkout 20241107
If you see a message about being in "detached HEAD" state, you can safely ignore it. The message just means that you checked out a tag.
Here's the file structure of the application, with important files and directories:
java-app
ââ src/main/
â  ââ aks/
â  â  ââ openlibertyapplication-agic-passwordless-db.yaml
â  ââ docker/
â  â  ââ Dockerfile
â  â  ââ Dockerfile-wlp
â  ââ liberty/config/
â  â  ââ server.xml
â  ââ java/
â  ââ resources/
â  ââ webapp/
ââ pom.xml
ââ pom-azure-identity.xml
java-app
ââ src/main/
â  ââ aks/
â  â  ââ openlibertyapplication-agic-passwordless-db.yaml
â  ââ docker/
â  â  ââ Dockerfile
â  â  ââ Dockerfile-wlp
â  ââ liberty/config/
â  â  ââ server.xml
â  ââ java/
â  ââ resources/
â  ââ webapp/
ââ pom.xml
ââ pom-azure-identity.xml
The directoriesjava,resources, andwebappcontain the source code of the sample application. The code declares and uses a data source namedjdbc/JavaEECafeDB.
jdbc/JavaEECafeDB
In theaksdirectory, the fileopenlibertyapplication-agic-passwordless-db.yamlis used to deploy the application image with AGIC and passwordless connection to the Azure SQL Database. This article assumes that you use this file.
In thedockerdirectory, there are two files to create the application image with either Open Liberty or WebSphere Liberty.
In the directoryliberty/config, theserver.xmlfile is used to configure the database connection for the Open Liberty and WebSphere Liberty cluster. It defines a variableazure.sql.connectionstringthat is used to connect to the Azure SQL Database.
azure.sql.connectionstring
Thepom.xmlfile is the Maven project object model (POM) file that contains the configuration information for the project. Thepom-azure-identity.xmlfile declares a dependency onazure-identity. This file is used to authenticate to Azure services using Microsoft Entra ID.
azure-identity
Note
This sample uses theazure-identitylibrary to authenticate to Azure SQL Database using Microsoft Entra authentication. If you need to use SQL authentication in your Liberty application, seeRelational database connections with JDBC.
azure-identity
Build the project
Now that you gathered the necessary properties, build the application. The POM file for the project reads many variables from the environment. As part of the Maven build, these variables are used to populate values in the YAML files located insrc/main/aks. You can do something similar for your application outside Maven if you prefer.
Bash
PowerShell
cd $BASE_DIR/java-app
# The following variables are used for deployment file generation into the target.
export LOGIN_SERVER=${LOGIN_SERVER}
export SC_SERVICE_ACCOUNT_NAME=${SERVICE_ACCOUNT_NAME}
export SC_SECRET_NAME=${SECRET_NAME}
export INGRESS_TLS_SECRET=${INGRESS_TLS_SECRET}

mvn clean install
mvn dependency:copy-dependencies -f pom-azure-identity.xml -DoutputDirectory=target/liberty/wlp/usr/shared/resources
cd $BASE_DIR/java-app
# The following variables are used for deployment file generation into the target.
export LOGIN_SERVER=${LOGIN_SERVER}
export SC_SERVICE_ACCOUNT_NAME=${SERVICE_ACCOUNT_NAME}
export SC_SECRET_NAME=${SECRET_NAME}
export INGRESS_TLS_SECRET=${INGRESS_TLS_SECRET}

mvn clean install
mvn dependency:copy-dependencies -f pom-azure-identity.xml -DoutputDirectory=target/liberty/wlp/usr/shared/resources
cd $env:BASE_DIR\java-app

# The following variables are used for deployment file generation into the target.
$Env:LOGIN_SERVER=$Env:LOGIN_SERVER
$Env:SC_SERVICE_ACCOUNT_NAME=$Env:SERVICE_ACCOUNT_NAME
$Env:SC_SECRET_NAME=$Env:SECRET_NAME
$Env:INGRESS_TLS_SECRET=$Env:INGRESS_TLS_SECRET

mvn clean install
mvn dependency:copy-dependencies -f pom-azure-identity.xml -DoutputDirectory=target/liberty/wlp/usr/shared/resources
cd $env:BASE_DIR\java-app

# The following variables are used for deployment file generation into the target.
$Env:LOGIN_SERVER=$Env:LOGIN_SERVER
$Env:SC_SERVICE_ACCOUNT_NAME=$Env:SERVICE_ACCOUNT_NAME
$Env:SC_SECRET_NAME=$Env:SECRET_NAME
$Env:INGRESS_TLS_SECRET=$Env:INGRESS_TLS_SECRET

mvn clean install
mvn dependency:copy-dependencies -f pom-azure-identity.xml -DoutputDirectory=target/liberty/wlp/usr/shared/resources
Test your project locally
Run and test the project locally before deploying to Azure. For convenience, this article usesliberty-maven-plugin. To learn more aboutliberty-maven-plugin, see the Open Liberty articleBuilding a web application with Maven.
liberty-maven-plugin
liberty-maven-plugin
Note
If you selected a "serverless" database deployment, verify that your SQL database has not entered pause mode. One way to do this is to log in to the database query editor as described inQuickstart: Use the Azure portal query editor (preview) to query Azure SQL Database.
Start the application by usingliberty:run.BashPowerShellcd $BASE_DIR/java-app

# The value of environment variable AZURE_SQL_CONNECTIONSTRING is read by configuration variable `azure.sql.connectionstring` in server.xml
export AZURE_SQL_CONNECTIONSTRING="jdbc:sqlserver://$SQL_SERVER_NAME.database.windows.net:1433;databaseName=$DB_NAME;authentication=ActiveDirectoryDefault"
mvn liberty:runcd $env:BASE_DIR\java-app

# The value of environment variable AZURE_SQL_CONNECTIONSTRING is read by configuration variable `azure.sql.connectionstring` in server.xml
$Env:AZURE_SQL_CONNECTIONSTRING = "jdbc:sqlserver://$Env:SQL_SERVER_NAME.database.windows.net:1433;databaseName=$Env:DB_NAME;authentication=ActiveDirectoryDefault"
mvn liberty:run
Start the application by usingliberty:run.
liberty:run
Bash
PowerShell
cd $BASE_DIR/java-app

# The value of environment variable AZURE_SQL_CONNECTIONSTRING is read by configuration variable `azure.sql.connectionstring` in server.xml
export AZURE_SQL_CONNECTIONSTRING="jdbc:sqlserver://$SQL_SERVER_NAME.database.windows.net:1433;databaseName=$DB_NAME;authentication=ActiveDirectoryDefault"
mvn liberty:run
cd $BASE_DIR/java-app

# The value of environment variable AZURE_SQL_CONNECTIONSTRING is read by configuration variable `azure.sql.connectionstring` in server.xml
export AZURE_SQL_CONNECTIONSTRING="jdbc:sqlserver://$SQL_SERVER_NAME.database.windows.net:1433;databaseName=$DB_NAME;authentication=ActiveDirectoryDefault"
mvn liberty:run
cd $env:BASE_DIR\java-app

# The value of environment variable AZURE_SQL_CONNECTIONSTRING is read by configuration variable `azure.sql.connectionstring` in server.xml
$Env:AZURE_SQL_CONNECTIONSTRING = "jdbc:sqlserver://$Env:SQL_SERVER_NAME.database.windows.net:1433;databaseName=$Env:DB_NAME;authentication=ActiveDirectoryDefault"
mvn liberty:run
cd $env:BASE_DIR\java-app

# The value of environment variable AZURE_SQL_CONNECTIONSTRING is read by configuration variable `azure.sql.connectionstring` in server.xml
$Env:AZURE_SQL_CONNECTIONSTRING = "jdbc:sqlserver://$Env:SQL_SERVER_NAME.database.windows.net:1433;databaseName=$Env:DB_NAME;authentication=ActiveDirectoryDefault"
mvn liberty:run
Verify the application works as expected. You should see a message similar to[INFO] [AUDIT   ] CWWKZ0001I: Application javaee-cafe started in 18.235 seconds.in the command output. Go tohttp://localhost:9080/in your browser and verify that the application is accessible and all functions are working.
Verify the application works as expected. You should see a message similar to[INFO] [AUDIT   ] CWWKZ0001I: Application javaee-cafe started in 18.235 seconds.in the command output. Go tohttp://localhost:9080/in your browser and verify that the application is accessible and all functions are working.
[INFO] [AUDIT   ] CWWKZ0001I: Application javaee-cafe started in 18.235 seconds.
http://localhost:9080/
PressCtrl+Cto stop. PressYif you're asked to terminate the batch job.
PressCtrl+Cto stop. PressYif you're asked to terminate the batch job.
When you're finished, delete the firewall rule that allows your local IP address to access the Azure SQL Database by using the following command:
Bash
PowerShell
az sql server firewall-rule delete \
    --resource-group $RESOURCE_GROUP_NAME \
    --server $SQL_SERVER_NAME \
    --name AllowLocalIP
az sql server firewall-rule delete \
    --resource-group $RESOURCE_GROUP_NAME \
    --server $SQL_SERVER_NAME \
    --name AllowLocalIP
az sql server firewall-rule delete --resource-group $Env:RESOURCE_GROUP_NAME --server $Env:SQL_SERVER_NAME --name AllowLocalIP
az sql server firewall-rule delete --resource-group $Env:RESOURCE_GROUP_NAME --server $Env:SQL_SERVER_NAME --name AllowLocalIP
Build the image for AKS deployment
You can now run theaz acr buildcommand to build the image, as shown in the following example:
az acr build
Bash
PowerShell
cd $BASE_DIR/java-app/target

az acr build \
    --registry ${REGISTRY_NAME} \
    --image javaee-cafe:v1 \
    .
cd $BASE_DIR/java-app/target

az acr build \
    --registry ${REGISTRY_NAME} \
    --image javaee-cafe:v1 \
    .
cd $Env:BASE_DIR/java-app/target

az acr build --registry $Env:REGISTRY_NAME --image javaee-cafe:v1 .
cd $Env:BASE_DIR/java-app/target

az acr build --registry $Env:REGISTRY_NAME --image javaee-cafe:v1 .
Theaz acr buildcommand uploads the artifacts specified in the Dockerfile to the Container Registry instance, builds the image, and stores it in the Container Registry instance.
az acr build
Deploy the application to the AKS cluster
Use the following steps to deploy the Liberty application on the AKS cluster:
Connect to the AKS cluster.Paste the value ofcmdToConnectToClusterinto a shell and run the command.
Connect to the AKS cluster.
Paste the value ofcmdToConnectToClusterinto a shell and run the command.
cmdToConnectToCluster
Apply the deployment file by running the following commands:BashPowerShellcd $BASE_DIR/java-app/target

# Apply deployment file
kubectl apply -f openlibertyapplication-agic-passwordless-db.yamlcd $Env:BASE_DIR/java-app/target

# Apply deployment file
kubectl apply -f openlibertyapplication-agic-passwordless-db.yaml
Apply the deployment file by running the following commands:
Bash
PowerShell
cd $BASE_DIR/java-app/target

# Apply deployment file
kubectl apply -f openlibertyapplication-agic-passwordless-db.yaml
cd $BASE_DIR/java-app/target

# Apply deployment file
kubectl apply -f openlibertyapplication-agic-passwordless-db.yaml
cd $Env:BASE_DIR/java-app/target

# Apply deployment file
kubectl apply -f openlibertyapplication-agic-passwordless-db.yaml
cd $Env:BASE_DIR/java-app/target

# Apply deployment file
kubectl apply -f openlibertyapplication-agic-passwordless-db.yaml
Wait until all pods are restarted successfully by using the following command:BashPowerShellkubectl get pods --watchkubectl get pods --watchOutput similar to the following example indicates that all the pods are running:NAME                                       READY   STATUS    RESTARTS   AGE
javaee-cafe-cluster-agic-67cdc95bc-2j2gr   1/1     Running   0          29s
javaee-cafe-cluster-agic-67cdc95bc-fgtt8   1/1     Running   0          29s
javaee-cafe-cluster-agic-67cdc95bc-h47qm   1/1     Running   0          29s
Wait until all pods are restarted successfully by using the following command:
Bash
PowerShell
kubectl get pods --watch
kubectl get pods --watch
kubectl get pods --watch
kubectl get pods --watch
Output similar to the following example indicates that all the pods are running:
NAME                                       READY   STATUS    RESTARTS   AGE
javaee-cafe-cluster-agic-67cdc95bc-2j2gr   1/1     Running   0          29s
javaee-cafe-cluster-agic-67cdc95bc-fgtt8   1/1     Running   0          29s
javaee-cafe-cluster-agic-67cdc95bc-h47qm   1/1     Running   0          29s
NAME                                       READY   STATUS    RESTARTS   AGE
javaee-cafe-cluster-agic-67cdc95bc-2j2gr   1/1     Running   0          29s
javaee-cafe-cluster-agic-67cdc95bc-fgtt8   1/1     Running   0          29s
javaee-cafe-cluster-agic-67cdc95bc-h47qm   1/1     Running   0          29s
Test the application
When the pods are running, you can test the application by using the public IP address of the Application Gateway instance.
Run the following command to get and display the public IP address of the Application Gateway instance, exposed by the ingress resource created by AGIC:
Bash
PowerShell
export APP_URL=https://$(kubectl get ingress | grep javaee-cafe-cluster-agic-ingress | cut -d " " -f14)/
echo $APP_URL
export APP_URL=https://$(kubectl get ingress | grep javaee-cafe-cluster-agic-ingress | cut -d " " -f14)/
echo $APP_URL
$APP_URL = "https://$(kubectl get ingress | Select-String 'javaee-cafe-cluster-agic-ingress' | ForEach-Object { $_.Line.Split(' ')[13] })/"
$APP_URL
$APP_URL = "https://$(kubectl get ingress | Select-String 'javaee-cafe-cluster-agic-ingress' | ForEach-Object { $_.Line.Split(' ')[13] })/"
$APP_URL
Copy the URL and open it in your browser to see the application home page. If the webpage doesn't render correctly or returns a502 Bad Gatewayerror, the app is still starting in the background. Wait for a few minutes and then try again.
502 Bad Gateway

Clean up resources
To avoid Azure charges, you should clean up unnecessary resources. When you no longer need the cluster, use theaz group deletecommand to remove the resource group, the container service, the container registry, the database, and all related resources:
az group delete
Bash
PowerShell
az group delete --name $RESOURCE_GROUP_NAME --yes --no-wait
az group delete --name $RESOURCE_GROUP_NAME --yes --no-wait
az group delete --name $Env:RESOURCE_GROUP_NAME --yes --no-wait
az group delete --name $Env:RESOURCE_GROUP_NAME --yes --no-wait
Next steps
You can learn more from the following references:
Azure Kubernetes Service
Tutorial: Connect an AKS app to Azure SQL Database
Integrate Azure SQL Database with Service Connector
Connect using Microsoft Entra authentication
Open Liberty
Open Liberty Operator
Open Liberty server configuration
Liberty Maven Plugin
Open Liberty Container Images
WebSphere Liberty Container Images
For more information about deploying the IBM WebSphere family on Azure, seeWhat are solutions to run the WebSphere family of products on Azure?.
Azure Kubernetes Service

Additional resources