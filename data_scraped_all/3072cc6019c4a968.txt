Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Quickstart: Deploy Bicep files by using GitHub Actions
Article
2025-02-19
10 contributors
In this article
GitHub Actionsis a suite of features in GitHub to automate your software development workflows. In this quickstart, you use theGitHub Actions for Azure Resource Manager deploymentto automate deploying a Bicep file to Azure.
It provides a short introduction to GitHub actions and Bicep files. If you want more detailed steps on setting up the GitHub actions and project, seeDeploy Azure resources by using Bicep and GitHub Actions.
Prerequisites
An Azure account with an active subscription.Create an account for free.
A GitHub account. If you don't have one, sign up forfree.
A GitHub repository to store your Bicep files and your workflow files. To create one, seeCreating a new repository.
Create resource group
Create a resource group. Later in this quickstart, you deploy your Bicep file to this resource group.
CLI
PowerShell
az group create -n exampleRG -l westus
az group create -n exampleRG -l westus
New-AzResourceGroup -Name exampleRG -Location westus
New-AzResourceGroup -Name exampleRG -Location westus
Generate deployment credentials
OpenID Connect
Service principal
To useAzure Login actionwith OIDC, you need to configure a federated identity credential on a Microsoft Entra application or a user-assigned managed identity.
Option 1: Microsoft Entra application
Create a Microsoft Entra application with a service principal byAzure portal,Azure CLI, orAzure PowerShell.
Copy the values forClient ID,Subscription ID, andDirectory (tenant) IDto use later in your GitHub Actions workflow.
Assign an appropriate role to your service principal byAzure portal,Azure CLI, orAzure PowerShell.
Configure a federated identity credential on a Microsoft Entra applicationto trust tokens issued by GitHub Actions to your GitHub repository.
Option 2: User-assigned managed identity
Create a user-assigned managed identity.
Copy the values forClient ID,Subscription ID, andDirectory (tenant) IDto use later in your GitHub Actions workflow.
Assign an appropriate role to your user-assigned managed identity.
Configure a federated identity credential on a user-assigned managed identityto trust tokens issued by GitHub Actions to your GitHub repository.
Create a Microsoft Entra application with a service principal byAzure portal,Azure CLI, orAzure PowerShell.
Create a client secret for your service principal byAzure portal,Azure CLI, orAzure PowerShell.
Copy the values forClient ID,Client Secret,Subscription ID, andDirectory (tenant) IDto use later in your GitHub Actions workflow.
Assign an appropriate role to your service principal byAzure portal,Azure CLI, orAzure PowerShell.
Configure the GitHub secrets
OpenID Connect
Service principal
You need to provide your application'sClient ID,Directory (tenant) ID, andSubscription IDto the login action. These values can either be provided directly in the workflow or can be stored in GitHub secrets and referenced in your workflow. Saving the values as GitHub secrets is the more secure option.
InGitHub, go to your repository.
InGitHub, go to your repository.
SelectSecurity > Secrets and variables > Actions.
SelectSecurity > Secrets and variables > Actions.

SelectNew repository secret.NoteTo enhance workflow security in public repositories, useenvironment secretsinstead of repository secrets. If the environment requires approval, a job cannot access environment secrets until one of the required reviewers approves it.
SelectNew repository secret.
Note
To enhance workflow security in public repositories, useenvironment secretsinstead of repository secrets. If the environment requires approval, a job cannot access environment secrets until one of the required reviewers approves it.
Create secrets forAZURE_CLIENT_ID,AZURE_TENANT_ID, andAZURE_SUBSCRIPTION_ID. Copy these values from your Microsoft Entra application or user-assigned managed identity for your GitHub secrets:GitHub secretMicrosoft Entra application or user-assigned managed identityAZURE_CLIENT_IDClient IDAZURE_SUBSCRIPTION_IDSubscription IDAZURE_TENANT_IDDirectory (tenant) IDNoteFor security reasons, we recommend using GitHub Secrets rather than passing values directly to the workflow.
Create secrets forAZURE_CLIENT_ID,AZURE_TENANT_ID, andAZURE_SUBSCRIPTION_ID. Copy these values from your Microsoft Entra application or user-assigned managed identity for your GitHub secrets:
AZURE_CLIENT_ID
AZURE_TENANT_ID
AZURE_SUBSCRIPTION_ID
Note
For security reasons, we recommend using GitHub Secrets rather than passing values directly to the workflow.
InGitHub, go to your repository.
InGitHub, go to your repository.
Go toSettingsin the navigation menu.
Go toSettingsin the navigation menu.
SelectSecurity > Secrets and variables > Actions.
SelectSecurity > Secrets and variables > Actions.

SelectNew repository secret.
SelectNew repository secret.
Paste the entire JSON output from the Azure CLI command into the secret's value field. Give the secret the nameAZURE_CREDENTIALS.
Paste the entire JSON output from the Azure CLI command into the secret's value field. Give the secret the nameAZURE_CREDENTIALS.
AZURE_CREDENTIALS
SelectAdd secret.
SelectAdd secret.
Add a Bicep file
Add a Bicep file to your GitHub repository. The following Bicep file creates a storage account:
@minLength(3)
@maxLength(11)
param storagePrefix string

@allowed([
  'Standard_LRS'
  'Standard_GRS'
  'Standard_RAGRS'
  'Standard_ZRS'
  'Premium_LRS'
  'Premium_ZRS'
  'Standard_GZRS'
  'Standard_RAGZRS'
])
param storageSKU string = 'Standard_LRS'

param location string = resourceGroup().location

var uniqueStorageName = '${storagePrefix}${uniqueString(resourceGroup().id)}'

resource stg 'Microsoft.Storage/storageAccounts@2023-04-01' = {
  name: uniqueStorageName
  location: location
  sku: {
    name: storageSKU
  }
  kind: 'StorageV2'
  properties: {
    supportsHttpsTrafficOnly: true
  }
}

output storageEndpoint object = stg.properties.primaryEndpoints
@minLength(3)
@maxLength(11)
param storagePrefix string

@allowed([
  'Standard_LRS'
  'Standard_GRS'
  'Standard_RAGRS'
  'Standard_ZRS'
  'Premium_LRS'
  'Premium_ZRS'
  'Standard_GZRS'
  'Standard_RAGZRS'
])
param storageSKU string = 'Standard_LRS'

param location string = resourceGroup().location

var uniqueStorageName = '${storagePrefix}${uniqueString(resourceGroup().id)}'

resource stg 'Microsoft.Storage/storageAccounts@2023-04-01' = {
  name: uniqueStorageName
  location: location
  sku: {
    name: storageSKU
  }
  kind: 'StorageV2'
  properties: {
    supportsHttpsTrafficOnly: true
  }
}

output storageEndpoint object = stg.properties.primaryEndpoints
The Bicep file requires one parameter calledstoragePrefixwith 3 to 11 characters.
You can put the file anywhere in the repository. The workflow sample in the next section assumes the Bicep file is namedmain.bicep, and it's stored at the root of your repository.
Create workflow
A workflow defines the steps to execute when triggered. It's a YAML (.yml) file in the.github/workflows/path of your repository. The workflow file extension can be either.ymlor.yaml.
To create a workflow, take the following steps:
From your GitHub repository, selectActionsfrom the top menu.
From your GitHub repository, selectActionsfrom the top menu.
SelectNew workflow.
SelectNew workflow.
Selectset up a workflow yourself.
Selectset up a workflow yourself.
Rename the workflow file if you prefer a different name other thanmain.yml. For example:deployBicepFile.yml.
Rename the workflow file if you prefer a different name other thanmain.yml. For example:deployBicepFile.yml.
Replace the content of the yml file with the following code:OpenID ConnectService principalon: [push]
name: Azure ARM
permissions:
  id-token: write
  contents: read
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:

      # Checkout code
    - uses: actions/checkout@main

      # Log into Azure
    - uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Deploy Bicep file
    - name: deploy
      uses: azure/arm-deploy@v1
      with:
        subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
        resourceGroupName: ${{ secrets.AZURE_RG }}
        template: ./main.bicep
        parameters: 'storagePrefix=mystore storageSKU=Standard_LRS'
        failOnStdErr: falsename: Deploy Bicep file
on: [push]
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:

    - name: Checkout code
      uses: actions/checkout@main

    - name: Log into Azure
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy Bicep file
      uses: azure/arm-deploy@v1
      with:
        subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
        resourceGroupName: ${{ secrets.AZURE_RG }}
        template: ./main.bicep
        parameters: 'storagePrefix=mystore storageSKU=Standard_LRS'
        failOnStdErr: falseReplacemystorewith your own storage account name prefix.NoteYou can specify a JSON format parameters file instead in the ARM Deploy action (example:.azuredeploy.parameters.json).The first section of the workflow file includes:name: The name of the workflow.on: The name of the GitHub events that triggers the workflow. The workflow is triggered when there's a push event on the main branch.
Replace the content of the yml file with the following code:
OpenID Connect
Service principal
on: [push]
name: Azure ARM
permissions:
  id-token: write
  contents: read
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:

      # Checkout code
    - uses: actions/checkout@main

      # Log into Azure
    - uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Deploy Bicep file
    - name: deploy
      uses: azure/arm-deploy@v1
      with:
        subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
        resourceGroupName: ${{ secrets.AZURE_RG }}
        template: ./main.bicep
        parameters: 'storagePrefix=mystore storageSKU=Standard_LRS'
        failOnStdErr: false
on: [push]
name: Azure ARM
permissions:
  id-token: write
  contents: read
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:

      # Checkout code
    - uses: actions/checkout@main

      # Log into Azure
    - uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Deploy Bicep file
    - name: deploy
      uses: azure/arm-deploy@v1
      with:
        subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
        resourceGroupName: ${{ secrets.AZURE_RG }}
        template: ./main.bicep
        parameters: 'storagePrefix=mystore storageSKU=Standard_LRS'
        failOnStdErr: false
name: Deploy Bicep file
on: [push]
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:

    - name: Checkout code
      uses: actions/checkout@main

    - name: Log into Azure
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy Bicep file
      uses: azure/arm-deploy@v1
      with:
        subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
        resourceGroupName: ${{ secrets.AZURE_RG }}
        template: ./main.bicep
        parameters: 'storagePrefix=mystore storageSKU=Standard_LRS'
        failOnStdErr: false
name: Deploy Bicep file
on: [push]
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:

    - name: Checkout code
      uses: actions/checkout@main

    - name: Log into Azure
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy Bicep file
      uses: azure/arm-deploy@v1
      with:
        subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
        resourceGroupName: ${{ secrets.AZURE_RG }}
        template: ./main.bicep
        parameters: 'storagePrefix=mystore storageSKU=Standard_LRS'
        failOnStdErr: false
Replacemystorewith your own storage account name prefix.
mystore
Note
You can specify a JSON format parameters file instead in the ARM Deploy action (example:.azuredeploy.parameters.json).
.azuredeploy.parameters.json
The first section of the workflow file includes:
name: The name of the workflow.
on: The name of the GitHub events that triggers the workflow. The workflow is triggered when there's a push event on the main branch.
SelectCommit changes.
SelectCommit changes.
SelectCommit directly to the main branch.
SelectCommit directly to the main branch.
SelectCommit new file(orCommit changes).
SelectCommit new file(orCommit changes).
Updating either the workflow file or Bicep file triggers the workflow. The workflow starts right after you commit the changes.
Check workflow status
Select theActionstab. You see aCreate deployBicepFile.ymlworkflow listed. It takes 1-2 minutes to run the workflow.
Select the workflow to open it, and verify theStatusisSuccess.
Status
Success
Clean up resources
When your resource group and repository are no longer needed, clean up the resources you deployed by deleting the resource group and your GitHub repository.
CLI
PowerShell
az group delete --name exampleRG
az group delete --name exampleRG
Remove-AzResourceGroup -Name exampleRG
Remove-AzResourceGroup -Name exampleRG
Next steps
Bicep file structure and syntax
Feedback
Was this page helpful?
Additional resources