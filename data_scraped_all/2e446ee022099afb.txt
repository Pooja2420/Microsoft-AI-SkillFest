Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Manage expiration of web content in Azure Content Delivery Network
Article
2025-03-31
2 contributors
In this article
Important
Azure CDN Standard from Microsoft (classic) will be retired onSeptember 30, 2027. To avoid any service disruption, it's important that youmigrate your Azure CDN Standard from Microsoft (classic) profilesto Azure Front Door Standard or Premium tier by September 30, 2027. For more information, seeAzure CDN Standard from Microsoft (classic) retirement.
Azure CDN from Edgio was retired onJanuary 15, 2025. For more information, seeAzure CDN from Edgio retirement FAQ.
Azure web content
Azure Blob storage
Files from publicly accessible origin web servers can be cached in Azure Content Delivery Network until their time to live (TTL) elapses. The TTL gets determined by theCache-Controlheader in the HTTP response from the origin server. This article describes how to setCache-Controlheaders for the Web Apps feature of Microsoft Azure App Service, Azure Cloud Services, ASP.NET applications, and Internet Information Services (IIS) sites, all of which are configured similarly. You can set theCache-Controlheader either by using configuration files or programmatically.
Cache-Control
Cache-Control
Cache-Control
You can also control cache settings from the Azure portal by settingcontent delivery network caching rules. If you create one or more caching rules and set their caching behavior toOverrideorBypass cache, the origin-provided caching settings discussed in this article are ignored. For information about general caching concepts, seeHow caching works.
Tip
You can choose to set no TTL on a file. In this case, Azure Content Delivery Network automatically applies a default TTL of seven days, unless you've set up caching rules in the Azure portal. This default TTL applies only to general web delivery optimizations. For large file optimizations, the default TTL is one day, and for media streaming optimizations, the default TTL is one year.
For more information about how Azure Content Delivery Network works to speed up access to files and other resources, seeOverview of the Azure Content Delivery Network.

Setting Cache-Control headers by using content delivery network caching rules
The preferred method for setting a web server'sCache-Controlheader is to use caching rules in the Azure portal. For more information about content delivery network caching rules, seeControl Azure Content Delivery Network caching behavior with caching rules.
Cache-Control
To navigate to the CDN caching rules page:
In the Azure portal, select a content delivery network profile, then select the endpoint for the web server.
In the Azure portal, select a content delivery network profile, then select the endpoint for the web server.
In the left pane under Settings, selectCaching rules.TheCaching rulespage appears.
In the left pane under Settings, selectCaching rules.
TheCaching rulespage appears.
To set a web server's Cache-Control headers by using global caching rules:
UnderGlobal caching rules, setQuery string caching behaviortoIgnore query stringsand setCaching behaviortoOverride.
UnderGlobal caching rules, setQuery string caching behaviortoIgnore query stringsand setCaching behaviortoOverride.
ForCache expiration duration, enter 3600 in theSecondsbox or 1 in theHoursbox.This global caching rule sets a cache duration of one hour and affects all requests to the endpoint. It overrides anyCache-ControlorExpiresHTTP headers that get sent by the origin server specified by the endpoint.
ForCache expiration duration, enter 3600 in theSecondsbox or 1 in theHoursbox.

This global caching rule sets a cache duration of one hour and affects all requests to the endpoint. It overrides anyCache-ControlorExpiresHTTP headers that get sent by the origin server specified by the endpoint.
Cache-Control
Expires
SelectSave.
SelectSave.
To set a web server file's Cache-Control headers by using custom caching rules:
UnderCustom caching rules, create two match conditions:For the first match condition, setMatch conditiontoPathand enter/webfolder1/*forMatch value. SetCaching behaviortoOverrideand enter 4 in theDaysbox.For the second match condition, setMatch conditiontoPathand enter/webfolder1/file1.txtforMatch value. SetCaching behaviortoOverrideand enter 2 in theDaysbox.The first custom caching rule sets a cache duration of four days for any files in the/webfolder1folder on the origin server specified by your endpoint. The second rule overrides the first rule for thefile1.txtfile only and sets a cache duration of two days for it.
UnderCustom caching rules, create two match conditions:
For the first match condition, setMatch conditiontoPathand enter/webfolder1/*forMatch value. SetCaching behaviortoOverrideand enter 4 in theDaysbox.
For the first match condition, setMatch conditiontoPathand enter/webfolder1/*forMatch value. SetCaching behaviortoOverrideand enter 4 in theDaysbox.
/webfolder1/*
For the second match condition, setMatch conditiontoPathand enter/webfolder1/file1.txtforMatch value. SetCaching behaviortoOverrideand enter 2 in theDaysbox.
For the second match condition, setMatch conditiontoPathand enter/webfolder1/file1.txtforMatch value. SetCaching behaviortoOverrideand enter 2 in theDaysbox.
/webfolder1/file1.txt

The first custom caching rule sets a cache duration of four days for any files in the/webfolder1folder on the origin server specified by your endpoint. The second rule overrides the first rule for thefile1.txtfile only and sets a cache duration of two days for it.
/webfolder1
file1.txt
SelectSave.
SelectSave.
Setting Cache-Control headers by using configuration files
For static content, such as images and style sheets, you can control the update frequency by modifying theapplicationHost.configorWeb.configconfiguration files for your web application. To set theCache-Controlheader for your content, use the<system.webServer>/<staticContent>/<clientCache>element in either file.
Cache-Control
<system.webServer>/<staticContent>/<clientCache>
Using ApplicationHost.config files
TheApplicationHost.configfile is the root file of the IIS configuration system. The configuration settings in anApplicationHost.configfile affect all applications on the site, but are overridden by the settings of anyWeb.configfiles that exist for a web application.
Using Web.config files
With aWeb.configfile, you can customize the way your entire web application or a specific directory on your web application behaves. Typically, you have at least oneWeb.configfile in the root folder of your web application. For eachWeb.configfile in a specific folder, the configuration settings affect everything in that folder and its subfolders, unless they're overridden at the subfolder level by anotherWeb.configfile.
For example, you can set a<clientCache>element in aWeb.configfile in the root folder of your web application to cache all static content on your web application for three days. You can also add aWeb.configfile in a subfolder with more variable content (for example,\frequent) and set its<clientCache>element to cache the subfolder's content for six hours. The net result is that content on the entire web site is cached for three days, except for any content in the\frequentdirectory, which is cached for only six hours.
<clientCache>
\frequent
<clientCache>
\frequent
The following XML configuration file example shows how to set the<clientCache>element to specify a maximum age of three days:
<clientCache>
<configuration>
    <system.webServer>
        <staticContent>
            <clientCache cacheControlMode="UseMaxAge" cacheControlMaxAge="3.00:00:00" />
        </staticContent>
    </system.webServer>
</configuration>
<configuration>
    <system.webServer>
        <staticContent>
            <clientCache cacheControlMode="UseMaxAge" cacheControlMaxAge="3.00:00:00" />
        </staticContent>
    </system.webServer>
</configuration>
To use thecacheControlMaxAgeattribute, you must set the value of thecacheControlModeattribute toUseMaxAge. This setting caused the HTTP header and directive,Cache-Control: max-age=<nnn>, to be added to the response. The format of the timespan value for thecacheControlMaxAgeattribute is<days>.<hours>:<min>:<sec>. Its value is converted to seconds and is used as the value of theCache-Controlmax-agedirective. For more information about the<clientCache>element, seeClient Cache <clientCache>.
UseMaxAge
Cache-Control: max-age=<nnn>
<days>.<hours>:<min>:<sec>
Cache-Control
max-age
<clientCache>
Setting Cache-Control headers programmatically
For ASP.NET applications, you control the content delivery network caching behavior programmatically by setting theHttpResponse.Cacheproperty of the .NET API. For information about theHttpResponse.Cacheproperty, seeHttpResponse.Cache PropertyandHttpCachePolicy Class.
To programmatically cache application content in ASP.NET, follow these steps:
Verify that the content is marked as cacheable by settingHttpCacheabilitytoPublic.
HttpCacheability
Public
Set a cache validator by calling one of the followingHttpCachePolicymethods:CallSetLastModifiedto set a timestamp value for theLast-Modifiedheader.CallSetETagto set a value for theETagheader.
HttpCachePolicy
CallSetLastModifiedto set a timestamp value for theLast-Modifiedheader.
SetLastModified
Last-Modified
CallSetETagto set a value for theETagheader.
SetETag
ETag
Optionally, specify a cache expiration time by callingSetExpiresto set a value for theExpiresheader. Otherwise, the default cache heuristics described previously in this document apply.
SetExpires
Expires
For example, to cache content for one hour, add the following C# code:
// Set the caching parameters.
Response.Cache.SetExpires(DateTime.Now.AddHours(1));
Response.Cache.SetCacheability(HttpCacheability.Public);
Response.Cache.SetLastModified(DateTime.Now);
// Set the caching parameters.
Response.Cache.SetExpires(DateTime.Now.AddHours(1));
Response.Cache.SetCacheability(HttpCacheability.Public);
Response.Cache.SetLastModified(DateTime.Now);
Testing the Cache-Control header
You can easily verify the TTL settings of your web content. With your browser's developer tools, test that your web content includes theCache-Controlresponse header. You can also use a tool such aswgetorFiddlerto examine the response headers.
Cache-Control
Next Steps
Read details about theclientCacheelement
Read the documentation for theHttpResponse.CacheProperty
Read the documentation for theHttpCachePolicy Class
learn aboutcaching concepts
Additional resources