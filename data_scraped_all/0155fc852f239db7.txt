Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Tutorial: Integrate Azure Functions with an Azure virtual network by using private endpoints
Article
2023-03-30
16 contributors
In this article
This tutorial shows you how to use Azure Functions to connect to resources in an Azure virtual network by using private endpoints. You create a new function app using a new storage account that's locked behind a virtual network via the Azure portal. The virtual network uses a Service Bus queue trigger.
In this tutorial, you'll:
Create a function app in the Elastic Premium plan with virtual network integration and private endpoints.
Create Azure resources, such as the Service Bus
Lock down your Service Bus behind a private endpoint.
Deploy a function app that uses both the Service Bus and HTTP triggers.
Test to see that your function app is secure inside the virtual network.
Clean up resources.
Create a function app in a Premium plan
You create a C# function app in anElastic Premium plan, which supports networking capabilities such as virtual network integration on create along with serverless scale. This tutorial uses C# and Windows. Other languages and Linux are also supported.
On the Azure portal menu or theHomepage, selectCreate a resource.
On the Azure portal menu or theHomepage, selectCreate a resource.
On theNewpage, selectCompute>Function App.
On theNewpage, selectCompute>Function App.
On theBasicspage, use the following table to configure the function app settings.SettingSuggested valueDescriptionSubscriptionYour subscriptionSubscription under which this new function app is created.Resource GroupmyResourceGroupName for the new resource group where you create your function app.Function App nameGlobally unique nameName that identifies your new function app. Valid characters area-z(case insensitive),0-9, and-.PublishCodeChoose to publish code files or a Docker container.Runtime stack.NETThis tutorial uses .NET.Version6 (LTS)This tutorial uses .NET 6.0 runningin the same process as the Functions host.RegionPreferred regionChoose aregionnear you or near other services that your functions access.Operating systemWindowsThis tutorial uses Windows but also works for Linux.PlanFunctions PremiumHosting plan that defines how resources are allocated to your function app. By default, when you selectPremium, a new App Service plan is created. The defaultSku and sizeisEP1, whereEPstands forelastic premium. For more information, see the list ofPremium SKUs.When you run JavaScript functions on a Premium plan, choose an instance that has fewer vCPUs. For more information, seeChoose single-core Premium plans.
On theBasicspage, use the following table to configure the function app settings.
a-z
0-9
-
SelectNext: Storage. On theStoragepage, enter the following settings.SettingSuggested valueDescriptionStorage accountGlobally unique nameCreate a storage account used by your function app. Storage account names must be between 3 and 24 characters long. They may contain numbers and lowercase letters only. You can also use an existing account that isn't restricted by firewall rules and meets thestorage account requirements. When using Functions with a locked down storage account, a v2 storage account is needed. This is the default storage version created when creating a function app with networking capabilities through the create blade.
SelectNext: Storage. On theStoragepage, enter the following settings.
SelectNext: Networking. On theNetworkingpage, enter the following settings.NoteSome of these settings aren't visible until other options are selected.SettingSuggested valueDescriptionEnable public accessOffDeny public network access will block all incoming traffic except thatÂ comes from private endpoints.Enable network injectionOnThe ability to configure your application with VNet integration at creation appears in the portal window after this option is switched toOn.Virtual NetworkCreate NewSelect theCreate Newfield. In the pop-out screen, provide a name for your virtual network and selectOk. Options to restrict inbound and outbound access to your function app on create are displayed. You must explicitly enable VNet integration in theOutbound accessportion of the window to restrict outbound access.Enter the following settings for theInbound accesssection. This step creates a private endpoint on your function app.TipTo continue interacting with your function app from portal, you'll need to add your local computer to the virtual network. If you don't wish to restrict inbound access, skip this step.SettingSuggested valueDescriptionEnable private endpointsOnThe ability to configure your application with VNet integration at creation appears in the portal after this option is enabled.Private endpoint namemyInboundPrivateEndpointNameName that identifies your new function app private endpoint.Inbound subnetCreate NewThis option creates a new subnet for your inbound private endpoint. Multiple private endpoints may be added to a singular subnet. Provide aSubnet Name. TheSubnet Address Blockmay be left at the default value. SelectOk. To learn more about subnet sizing, seeSubnets.DNSAzure Private DNS ZoneThis value indicates which DNS server your private endpoint uses. In most cases if you're working within Azure, Azure Private DNS Zone is the DNS zone you should use as usingManualfor custom DNS zones have increased complexity.Enter the following settings for theOutbound accesssection. This step integrates your function app with a virtual network on creation. It also exposes options to create private endpoints on your storage account and restrict your storage account from network access on create. When function app is vnet integrated, all outbound traffic by default goesthrough the vnet..SettingSuggested valueDescriptionEnable VNet IntegrationOnThis integrates your function app with a VNet on create and direct all outbound traffic through the VNet.Outbound subnetCreate newThis creates a new subnet for your function app's VNet integration. A function app can only be VNet integrated with an empty subnet. Provide aSubnet Name. TheSubnet Address Blockmay be left at the default value. If you wish to configure it, please learn more about Subnet sizing here. SelectOk. The option to createStorage private endpointsis displayed. To use your function app with virtual networks, you need to join it to a subnet.Enter the following settings for theStorage private endpointsection. This step creates private endpoints for the blob, queue, file, and table endpoints on your storage account on create. This effectively integrates your storage account with the VNet.SettingSuggested valueDescriptionAdd storage private endpointOnThe ability to configure your application with VNet integration at creation is displayed in the portal after this option is enabled.Private endpoint namemyInboundPrivateEndpointNameName that identifies your storage account private endpoint.Private endpoint subnetCreate NewThis creates a new subnet for your inbound private endpoint on the storage account. Multiple private endpoints may be added to a singular subnet. Provide aSubnet Name. TheSubnet Address Blockmay be left at the default value. If you wish to configure it, please learn more about Subnet sizing here. SelectOk.DNSAzure Private DNS ZoneThis value indicates which DNS server your private endpoint uses. In most cases if you're working within Azure, Azure Private DNS Zone is the DNS zone you should use as usingManualfor custom DNS zones will have increased complexity.
SelectNext: Networking. On theNetworkingpage, enter the following settings.
Note
Some of these settings aren't visible until other options are selected.
Enter the following settings for theInbound accesssection. This step creates a private endpoint on your function app.
Tip
To continue interacting with your function app from portal, you'll need to add your local computer to the virtual network. If you don't wish to restrict inbound access, skip this step.
Enter the following settings for theOutbound accesssection. This step integrates your function app with a virtual network on creation. It also exposes options to create private endpoints on your storage account and restrict your storage account from network access on create. When function app is vnet integrated, all outbound traffic by default goesthrough the vnet..
Enter the following settings for theStorage private endpointsection. This step creates private endpoints for the blob, queue, file, and table endpoints on your storage account on create. This effectively integrates your storage account with the VNet.
SelectNext: Monitoring. On theMonitoringpage, enter the following settings.SettingSuggested valueDescriptionApplication InsightsDefaultCreate an Application Insights resource of the same app name in the nearest supported region. Expand this setting if you need to change theNew resource nameor store your data in a differentLocationin anAzure geography.
SelectNext: Monitoring. On theMonitoringpage, enter the following settings.
SelectReview + createto review the app configuration selections.
SelectReview + createto review the app configuration selections.
On theReview + createpage, review your settings. Then selectCreateto create and deploy the function app.
On theReview + createpage, review your settings. Then selectCreateto create and deploy the function app.
In the upper-right corner of the portal, select theNotificationsicon and watch for theDeployment succeededmessage.
In the upper-right corner of the portal, select theNotificationsicon and watch for theDeployment succeededmessage.
SelectGo to resourceto view your new function app. You can also selectPin to dashboard. Pinning makes it easier to return to this function app resource from your dashboard.
SelectGo to resourceto view your new function app. You can also selectPin to dashboard. Pinning makes it easier to return to this function app resource from your dashboard.
Congratulations! You've successfully created your premium function app.
Note
Some deployments may occasionally fail to create the private endpoints in the storage account with the error 'StorageAccountOperationInProgress'. This failure occurs even though the function app itself gets created successfully. When you encounter such an error, delete the function app and retry the operation. You can instead create the private endpoints on the storage account manually.
Create a Service Bus
Next, you create a Service Bus instance that is used to test the functionality of your function app's network capabilities in this tutorial.
On the Azure portal menu or theHomepage, selectCreate a resource.
On the Azure portal menu or theHomepage, selectCreate a resource.
On theNewpage, search forService Bus. Then selectCreate.
On theNewpage, search forService Bus. Then selectCreate.
On theBasicstab, use the following table to configure the Service Bus settings. All other settings can use the default values.SettingSuggested valueDescriptionSubscriptionYour subscriptionThe subscription in which your resources are created.Resource groupmyResourceGroupThe resource group you created with your function app.Namespace namemyServiceBusThe name of the Service Bus instance for which the private endpoint is enabled.LocationmyFunctionRegionThe region where you created your function app.Pricing tierPremiumChoose this tier to use private endpoints with Azure Service Bus.
On theBasicstab, use the following table to configure the Service Bus settings. All other settings can use the default values.
SelectReview + create. After validation finishes, selectCreate.
SelectReview + create. After validation finishes, selectCreate.
Lock down your Service Bus
Create the private endpoint to lock down your Service Bus:
In your new Service Bus, in the menu on the left, selectNetworking.
In your new Service Bus, in the menu on the left, selectNetworking.
On thePrivate endpoint connectionstab, selectPrivate endpoint.
On thePrivate endpoint connectionstab, selectPrivate endpoint.

On theBasicstab, use the private endpoint settings shown in the following table.SettingSuggested valueDescriptionSubscriptionYour subscriptionThe subscription in which your resources are created.Resource groupmyResourceGroupThe resource group you created with your function app.Namesb-endpointThe name of the private endpoint for the service bus.RegionmyFunctionRegionThe region where you created your storage account.
On theBasicstab, use the private endpoint settings shown in the following table.
On theResourcetab, use the private endpoint settings shown in the following table.SettingSuggested valueDescriptionSubscriptionYour subscriptionThe subscription under which your resources are created.Resource typeMicrosoft.ServiceBus/namespacesThe resource type for the Service Bus.ResourcemyServiceBusThe Service Bus you created earlier in the tutorial.Target subresourcenamespaceThe private endpoint that is used for the namespace from the Service Bus.
On theResourcetab, use the private endpoint settings shown in the following table.
On theVirtual Networktab, for theSubnetsetting, choosedefault.
On theVirtual Networktab, for theSubnetsetting, choosedefault.
SelectReview + create. After validation finishes, selectCreate.
SelectReview + create. After validation finishes, selectCreate.
After the private endpoint is created, return to theNetworkingsection of your Service Bus namespace and check thePublic Accesstab.
After the private endpoint is created, return to theNetworkingsection of your Service Bus namespace and check thePublic Accesstab.
EnsureSelected networksis selected.
EnsureSelected networksis selected.
Select+ Add existing virtual networkto add the recently created virtual network.
Select+ Add existing virtual networkto add the recently created virtual network.
On theAdd networkstab, use the network settings from the following table:SettingSuggested valueDescriptionSubscriptionYour subscriptionThe subscription under which your resources are created.Virtual networksmyVirtualNetThe name of the virtual network to which your function app connects.SubnetsfunctionsThe name of the subnet to which your function app connects.
On theAdd networkstab, use the network settings from the following table:
SelectAdd your client IP addressto give your current client IP access to the namespace.NoteAllowing your client IP address is necessary to enable the Azure portal topublish messages to the queue later in this tutorial.
SelectAdd your client IP addressto give your current client IP access to the namespace.
Note
Allowing your client IP address is necessary to enable the Azure portal topublish messages to the queue later in this tutorial.
SelectEnableto enable the service endpoint.
SelectEnableto enable the service endpoint.
SelectAddto add the selected virtual network and subnet to the firewall rules for the Service Bus.
SelectAddto add the selected virtual network and subnet to the firewall rules for the Service Bus.
SelectSaveto save the updated firewall rules.
SelectSaveto save the updated firewall rules.
Resources in the virtual network can now communicate with the Service Bus using the private endpoint.
Create a queue
Create the queue where your Azure Functions Service Bus trigger gets events:
In your Service Bus, in the menu on the left, selectQueues.
In your Service Bus, in the menu on the left, selectQueues.
SelectQueue. For the purposes of this tutorial, provide the namequeueas the name of the new queue.
SelectQueue. For the purposes of this tutorial, provide the namequeueas the name of the new queue.

SelectCreate.
SelectCreate.
Important
This tutorial currently shows you how to connect to Service Bus using a connection string, which requires you to handle a share secret. For improved security, you should instead use managed identities when connecting to Service Bus from your app. For more information, seeIdentity-based connectionsin the Service Bus binding reference article.
Get a Service Bus connection string
In your Service Bus, in the menu on the left, selectShared access policies.
In your Service Bus, in the menu on the left, selectShared access policies.
SelectRootManageSharedAccessKey. Copy and save thePrimary Connection String. You need this connection string when you configure the app settings.
SelectRootManageSharedAccessKey. Copy and save thePrimary Connection String. You need this connection string when you configure the app settings.

Configure your function app settings
In your function app, in the menu on the left, selectConfiguration.
In your function app, in the menu on the left, selectConfiguration.
To use your function app with virtual networks and service bus, update the app settings shown in the following table. To add or edit a setting, select+ New application settingor theEditicon in the rightmost column of the app settings table. When you finish, selectSave.SettingSuggested valueDescriptionSERVICEBUS_CONNECTIONmyServiceBusConnectionStringCreate this app setting for the connection string of your Service Bus. This storage connection string is from theGet a Service Bus connection stringsection.WEBSITE_CONTENTOVERVNET1Create this app setting. A value of 1 enables your function app to scale when your storage account is restricted to a virtual network.
To use your function app with virtual networks and service bus, update the app settings shown in the following table. To add or edit a setting, select+ New application settingor theEditicon in the rightmost column of the app settings table. When you finish, selectSave.
Since you're using an Elastic Premium hosting plan, In theConfigurationview, select theFunction runtime settingstab. SetRuntime Scale MonitoringtoOn. Then selectSave. Runtime-driven scaling allows you to connect non-HTTP trigger functions to services that run inside your virtual network.
Since you're using an Elastic Premium hosting plan, In theConfigurationview, select theFunction runtime settingstab. SetRuntime Scale MonitoringtoOn. Then selectSave. Runtime-driven scaling allows you to connect non-HTTP trigger functions to services that run inside your virtual network.

Note
Runtime scaling isn't needed for function apps hosted in a Dedicated App Service plan.
Deploy a Service Bus trigger and HTTP trigger
Note
Enabling private endpoints on a function app also makes the Source Control Manager (SCM) site publicly inaccessible. The following instructions give deployment directions using the Deployment Center within the function app. Alternatively, usezip deployorself-hostedagents that are deployed into a subnet on the virtual network.
In GitHub, go to the following sample repository. It contains a function app and two functions, an HTTP trigger, and a Service Bus queue trigger.https://github.com/Azure-Samples/functions-vnet-tutorial
In GitHub, go to the following sample repository. It contains a function app and two functions, an HTTP trigger, and a Service Bus queue trigger.
https://github.com/Azure-Samples/functions-vnet-tutorial
At the top of the page, selectForkto create a fork of this repository in your own GitHub account or organization.
At the top of the page, selectForkto create a fork of this repository in your own GitHub account or organization.
In your function app, in the menu on the left, selectDeployment Center. Then selectSettings.
In your function app, in the menu on the left, selectDeployment Center. Then selectSettings.
On theSettingstab, use the deployment settings shown in the following table.SettingSuggested valueDescriptionSourceGitHubYou should have created a GitHub repository for the sample code in step 2.OrganizationmyOrganizationThe organization your repo is checked into. It's usually your account.Repositoryfunctions-vnet-tutorialThe repository forked fromhttps://github.com/Azure-Samples/functions-vnet-tutorial.BranchmainThe main branch of the repository you created.Runtime stack.NETThe sample code is in C#.Version.NET Core 3.1The runtime version.
On theSettingstab, use the deployment settings shown in the following table.
SelectSave.
SelectSave.

Your initial deployment might take a few minutes. When your app is successfully deployed, on theLogstab, you see aSuccess (Active)status message. If necessary, refresh the page.
Your initial deployment might take a few minutes. When your app is successfully deployed, on theLogstab, you see aSuccess (Active)status message. If necessary, refresh the page.
Congratulations! You've successfully deployed your sample function app.
Test your locked-down function app
In your function app, in the menu on the left, selectFunctions.
In your function app, in the menu on the left, selectFunctions.
SelectServiceBusQueueTrigger.
SelectServiceBusQueueTrigger.
In the menu on the left, selectMonitor.
In the menu on the left, selectMonitor.
You see that you can't monitor your app. Your browser doesn't have access to the virtual network, so it can't directly access resources within the virtual network.
Here's an alternative way to monitor your function by using Application Insights:
In your function app, in the menu on the left, selectApplication Insights. Then selectView Application Insights data.
In your function app, in the menu on the left, selectApplication Insights. Then selectView Application Insights data.

In the menu on the left, selectLive metrics.
In the menu on the left, selectLive metrics.
Open a new tab. In your Service Bus, in the menu on the left, selectQueues.
Open a new tab. In your Service Bus, in the menu on the left, selectQueues.
Select your queue.
Select your queue.
In the menu on the left, selectService Bus Explorer. UnderSend, forContent Type, chooseText/Plain. Then enter a message.
In the menu on the left, selectService Bus Explorer. UnderSend, forContent Type, chooseText/Plain. Then enter a message.
SelectSendto send the message.
SelectSendto send the message.

On theLive metricstab, you should see that your Service Bus queue trigger has fired. If it hasn't, resend the message fromService Bus Explorer.
On theLive metricstab, you should see that your Service Bus queue trigger has fired. If it hasn't, resend the message fromService Bus Explorer.

Congratulations! You've successfully tested your function app setup with private endpoints.
Understand private DNS zones
You've used a private endpoint to connect to Azure resources. You're connecting to a private IP address instead of the public endpoint. Existing Azure services are configured to use an existing DNS to connect to the public endpoint. You must override the DNS configuration to connect to the private endpoint.
A private DNS zone is created for each Azure resource that was configured with a private endpoint. A DNS record is created for each private IP address associated with the private endpoint.
The following DNS zones were created in this tutorial:
privatelink.file.core.windows.net
privatelink.blob.core.windows.net
privatelink.servicebus.windows.net
privatelink.azurewebsites.net
Clean up resources
In the preceding steps, you created Azure resources in a resource group. If you don't expect to need these resources in the future, you can delete them by deleting the resource group.
From the Azure portal menu orHomepage, selectResource groups. Then, on theResource groupspage, selectmyResourceGroup.
On themyResourceGrouppage, make sure that the listed resources are the ones you want to delete.
SelectDelete resource group, typemyResourceGroupin the text box to confirm, and then selectDelete.
Next steps
In this tutorial, you created a Premium function app, storage account, and Service Bus. You secured all of these resources behind private endpoints.
Use the following links to learn more Azure Functions networking options and private endpoints:
How to configure Azure Functions with a virtual network
Networking options in Azure Functions
Azure Functions Premium plan
Service Bus private endpoints
Azure Storage private endpoints
Feedback
Was this page helpful?
Additional resources