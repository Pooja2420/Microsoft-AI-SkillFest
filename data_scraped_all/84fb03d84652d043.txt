Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Administer your Azure cloud estate
Article
2025-04-01
8 contributors
In this article
This article explains how to administer your Azure cloud estate to ensure operational health. You need strong administrative control over your cloud operations to ensure the cloud aligns with your business objectives.

Identify your management scope
Management responsibilities vary by deployment model. Use the following table to identify your management responsibilities for infrastructure (IaaS), platform (PaaS), software (SaaS), and on-premises deployments.
Manage change
Change is the most common source of problems in the cloud. As a result, you need a change management approach that tracks changes and their approvals. It should also detect unapproved changes and revert them to a desired state. Follow these steps:
Develop a change request process.Use a formal system, such as a ticketing tool, pull request (GitHub or Azure DevOps), or designated forms. The change request process must capture key details like the type of change, requester identity, target environment, scope, and the reason. Keep separate procedures for routine service requests like password resets.
Develop a change request process.Use a formal system, such as a ticketing tool, pull request (GitHub or Azure DevOps), or designated forms. The change request process must capture key details like the type of change, requester identity, target environment, scope, and the reason. Keep separate procedures for routine service requests like password resets.
Assess the risk associated with the change.Assign clear risk categories (high, medium, low) to balance deployment speed with risk management. Evaluate each change according to criteria like downtime tolerance (error budget) and workload criticality. To help determine the appropriate approval workflow, use the following table as an example:Risk levelDowntime allowanceWorkload criticalityApproval processExample changesHighNo downtime allowedThese changes affect mission-critical systems that require continuous availability with zero tolerance for any downtime.Multiple senior engineer reviews, automated pipeline alerts,fast canary release, and active monitoring.Critical infrastructure updatesMediumShort downtime allowedThese changes affect important systems with limited tolerance for downtime.Automated pipeline flags the change. Quick review by engineers if monitoring raises an alert.Noncritical system updates, feature enhancements during short maintenance windowsLowAmple downtime allowedThese changes affect noncritical systems where extended downtime is acceptable without affecting overall operations.Fully automated deployment via CI/CD runs predeployment tests and monitoring.Routine updates, minor policy updates
Assess the risk associated with the change.Assign clear risk categories (high, medium, low) to balance deployment speed with risk management. Evaluate each change according to criteria like downtime tolerance (error budget) and workload criticality. To help determine the appropriate approval workflow, use the following table as an example:
Standardize approval clearly.Define approval criteria and authority required at each risk level. Specify who must review each change, whether it's a single approver or a review board, and clarify how reviewers must provide and resolve feedback.
Standardize approval clearly.Define approval criteria and authority required at each risk level. Specify who must review each change, whether it's a single approver or a review board, and clarify how reviewers must provide and resolve feedback.
Standardize the deployment process.Clearly outline the procedures for building, testing, and deploying approved changes to production. For details, seeManage cloud resources.
Standardize the deployment process.Clearly outline the procedures for building, testing, and deploying approved changes to production. For details, seeManage cloud resources.
Standardize the post-deployment process.To confirm successful changes, implement monitoring and validation steps. Include a clear rollback strategy to quickly restore service if a change introduces problems.
Standardize the post-deployment process.To confirm successful changes, implement monitoring and validation steps. Include a clear rollback strategy to quickly restore service if a change introduces problems.
Prevent and detect unauthorized change.UseChange Analysisto detect configuration changes and explain their underlying causes. Use Azure Policy to deny and audit changes using effects likeDeny,DenyAction,Audit, andauditIfNotExists. If you use Bicep, consider usingBicep deployment stacksto prevent unauthorized changes.
Prevent and detect unauthorized change.UseChange Analysisto detect configuration changes and explain their underlying causes. Use Azure Policy to deny and audit changes using effects likeDeny,DenyAction,Audit, andauditIfNotExists. If you use Bicep, consider usingBicep deployment stacksto prevent unauthorized changes.
Manage security
Identity is your security perimeter. You must verify identities, restrict permissions, and maintain secure resource configurations. Follow these steps:
Manage identities.UseMicrosoft Entra IDas your unified identity management solution. Clearly define permissions by applyingrole-based access control (RBAC). UseMicrosoft Entra ID Governanceto control access request workflows, access reviews, and identity lifecycle management. EnablePrivileged Identity Managementto grant just-in-time privileged access. This strategy reduces unnecessary elevated access. Manage all three identity types (user, application, device) consistently to ensure proper authentication and authorization.
Manage identities.UseMicrosoft Entra IDas your unified identity management solution. Clearly define permissions by applyingrole-based access control (RBAC). UseMicrosoft Entra ID Governanceto control access request workflows, access reviews, and identity lifecycle management. EnablePrivileged Identity Managementto grant just-in-time privileged access. This strategy reduces unnecessary elevated access. Manage all three identity types (user, application, device) consistently to ensure proper authentication and authorization.
Manage access.Use Azurerole-based access control(RBAC) andattribute-based access control(ABAC) to grant the least permission to accomplish the job. To limit management overhead, prefer role assignments based ongroups. Grant permissions at the lowest requiredscope, such as subscriptions, resource groups, or individual resources. Avoid overly broad permission scopes to prevent unintended privilege escalation. Assign only the necessary permissions for each user's role.
Manage access.Use Azurerole-based access control(RBAC) andattribute-based access control(ABAC) to grant the least permission to accomplish the job. To limit management overhead, prefer role assignments based ongroups. Grant permissions at the lowest requiredscope, such as subscriptions, resource groups, or individual resources. Avoid overly broad permission scopes to prevent unintended privilege escalation. Assign only the necessary permissions for each user's role.
Manage resource configurations.Useinfrastructure as code(IaC) to ensure consistent and reproducible configuration of resources. Then useAzure Policyto enforce secure configurations of specific Azure services. Reference theSecurity baselinesfor guidance on available security capabilities and optimal security configurations. As an add-on feature, use security policies inDefender for Cloudto align with common security standards.
Manage resource configurations.Useinfrastructure as code(IaC) to ensure consistent and reproducible configuration of resources. Then useAzure Policyto enforce secure configurations of specific Azure services. Reference theSecurity baselinesfor guidance on available security capabilities and optimal security configurations. As an add-on feature, use security policies inDefender for Cloudto align with common security standards.
Manage authentication.Ensure users adopt strong authentication through multifactor authentication (MFA) and useMicrosoft Entra multifactor authentication (MFA). Always requireConditional Accessto enforce authentication based on user identity, device health, and access context. Configureself-service password resetandeliminate weak passwords.
Manage authentication.Ensure users adopt strong authentication through multifactor authentication (MFA) and useMicrosoft Entra multifactor authentication (MFA). Always requireConditional Accessto enforce authentication based on user identity, device health, and access context. Configureself-service password resetandeliminate weak passwords.
Manage security information.UseMicrosoft Sentinelfor security information and even management (SIEM) and security orchestration, automation, and response (SOAR).
Manage security information.UseMicrosoft Sentinelfor security information and even management (SIEM) and security orchestration, automation, and response (SOAR).
Control workload security.For workload security recommendations, see the Well-Architected Framework'ssecurity checklistandAzure service guides(start with the Security section).
Control workload security.For workload security recommendations, see the Well-Architected Framework'ssecurity checklistandAzure service guides(start with the Security section).
Manage compliance
Compliance management ensures that Azure operations remain aligned with established governance policies and regulatory standards. You must reduce risk by safeguarding the environment from potential violations and misconfigurations. Follow these steps:
Understand your governance policies.Governance policies define the high-level constraints that your teams must follow to remain compliant. Review your organization's policies and map each requirement to your operational processes. If you don't have governance policies, firstdocument governance policies.
Understand your governance policies.Governance policies define the high-level constraints that your teams must follow to remain compliant. Review your organization's policies and map each requirement to your operational processes. If you don't have governance policies, firstdocument governance policies.
Manage compliance.Enforcing compliance ensures your environment remains aligned with both organizational and regulatory standards. See the following table for policy recommendations.RecommendationDetailsStart withGeneral policy definitionsBegin with Azure Policy's general definitions, including allowed locations, disallowed resource types, and audit custom RBAC roles.Align withregulatory standardsUse Azure Policy's free, built-in definitions aligned with regulatory standards such asISO 27001,NIST SP 800-53,PCI DSS,EU GDPR
Manage compliance.Enforcing compliance ensures your environment remains aligned with both organizational and regulatory standards. See the following table for policy recommendations.
For more information, seeEnforcing compliance in Azure.
Manage data
Managing data in cloud operations involves actively classifying, segmenting, securing access, and protecting against deletion. You must safeguard sensitive information, maintains compliance, and ensures data reliability during operational changes. Follow these steps:
Discover and classify data.Identify and categorize data according to sensitivity and importance. This classification guides tailored controls for each data type. UseMicrosoft Purviewfor data governance. For more information, seeData sources that connect to Microsoft Purview Data Map.
Discover and classify data.Identify and categorize data according to sensitivity and importance. This classification guides tailored controls for each data type. UseMicrosoft Purviewfor data governance. For more information, seeData sources that connect to Microsoft Purview Data Map.
Control data residency.Select regions within yourgeography, such as the United States or Europe, to meet data residency requirements. Verify any exceptions becausecertain Azure servicesmight store data outside your selected region. Regularly review Azure data residency settings and compliance requirements to maintain full control over your customer data.
Control data residency.Select regions within yourgeography, such as the United States or Europe, to meet data residency requirements. Verify any exceptions becausecertain Azure servicesmight store data outside your selected region. Regularly review Azure data residency settings and compliance requirements to maintain full control over your customer data.
Isolate internal (âCorpâ) and internet-facing (âOnlineâ) workloads.Use management groups to separate internal and external workloads. Internal workloads typically require connectivity or hybrid connectivity to your corporate network. External workloads usually don't require corporate network connectivity and might need direct inbound or outbound internet access. For an example, review the "Corp" (internal) and "Online" (internet-facing) management groups inAzure landing zone.
Isolate internal (âCorpâ) and internet-facing (âOnlineâ) workloads.Use management groups to separate internal and external workloads. Internal workloads typically require connectivity or hybrid connectivity to your corporate network. External workloads usually don't require corporate network connectivity and might need direct inbound or outbound internet access. For an example, review the "Corp" (internal) and "Online" (internet-facing) management groups inAzure landing zone.
Enforce access control.Implement robust access controls, such asAzure RBACandAzure ABAC, to ensure only authorized personnel access sensitive data based on defined classifications.
Enforce access control.Implement robust access controls, such asAzure RBACandAzure ABAC, to ensure only authorized personnel access sensitive data based on defined classifications.
Protect data from deletion.Use features such as soft delete, data versioning, and immutability where available. Implement database versioning and prepare rollback procedures. Use Azure Policy to deny datastore deletions withDenyandDenyActioneffects or audit changes withAuditandauditIfNotExistsany changes. If you use Bicep, consider usingBicep deployment stacksto prevent unauthorized changes. Only useresource locksstrictly to prevent unintended modifications or deletions of critical data. Avoid using resource locks to protect configurations, as resource locks complicate IaC deployments.
Protect data from deletion.Use features such as soft delete, data versioning, and immutability where available. Implement database versioning and prepare rollback procedures. Use Azure Policy to deny datastore deletions withDenyandDenyActioneffects or audit changes withAuditandauditIfNotExistsany changes. If you use Bicep, consider usingBicep deployment stacksto prevent unauthorized changes. Only useresource locksstrictly to prevent unintended modifications or deletions of critical data. Avoid using resource locks to protect configurations, as resource locks complicate IaC deployments.
Manage workload data.See the Well-Architected Framework's recommendations onData classification.
Manage workload data.See the Well-Architected Framework's recommendations onData classification.
For more information, seeEnforce data governance.
Manage costs
Managing costs in cloud operations means tracking spending actively both centrally and per workload. Cost control should provide visibility into expenditures and encourage responsible spending. Follow these steps:
Manage and review costs.Use Microsoft Cost Management tools tomonitor cloud costs. Azure lacks a subscription-wide mechanism to cap spending at a certain threshold. Some services, likeAzure Log Analytics workspace, have spending caps. Your cost monitoring strategy serves as your primary tool for managing expenses.
Manage and review costs.Use Microsoft Cost Management tools tomonitor cloud costs. Azure lacks a subscription-wide mechanism to cap spending at a certain threshold. Some services, likeAzure Log Analytics workspace, have spending caps. Your cost monitoring strategy serves as your primary tool for managing expenses.
Manage workload costs.Grant billing access to workload teams. Have these teams use the Well-Architected Framework's Cost Optimizationchecklist.
Manage workload costs.Grant billing access to workload teams. Have these teams use the Well-Architected Framework's Cost Optimizationchecklist.
Manage code and runtime
Managing code and runtime are workload responsibilities. Have your workload teams use the Well-Architected Framework'sOperational Excellence checklist, which outlines 12 recommendations to control code and runtime.
Manage cloud resources
Establish clear deployment protocols and proactive drift and sprawl detection strategies to maintain consistency across environments This section covers:
Portal deployments
Code deployments
Configuration drift
Resource sprawl
Manage portal deployments
Define protocols and limits for portal deployments to minimize the potential for production problems. Follow these steps:
Define portal deployment policy.Ensure significant portal-based changes adhere to established change management processes. Use portal deployments primarily for rapid prototyping, troubleshooting, or minor adjustments in development and testing environments. Avoid unstructured portal changes because these changes lead to drift, misconfigurations, and compliance issues. Instead, rely on version-controlled infrastructure-as-code (IaC) templates for consistency. For more information, seemanage code deployments.
Define portal deployment policy.Ensure significant portal-based changes adhere to established change management processes. Use portal deployments primarily for rapid prototyping, troubleshooting, or minor adjustments in development and testing environments. Avoid unstructured portal changes because these changes lead to drift, misconfigurations, and compliance issues. Instead, rely on version-controlled infrastructure-as-code (IaC) templates for consistency. For more information, seemanage code deployments.
Differentiate environments.Limit portal-based changes strictly to nonproduction environments. Allow rapid prototyping exclusively in dedicated development or testing environments and enforce stringent controls in production.
Differentiate environments.Limit portal-based changes strictly to nonproduction environments. Allow rapid prototyping exclusively in dedicated development or testing environments and enforce stringent controls in production.
Restrict portal permissions.Limit deployment capabilities from the portal using role-based access control (RBAC). Assign read-only permissions by default, and escalate privileges only when necessary.Grant just-in-time access.UsePrivileged Identity Management (PIM)for accessing Azure and Microsoft Entra resources. Require sequential approvals from multiple individuals or groups for activating PIM. Reserve privileged roles (âA0â super admin roles) exclusively for emergency scenarios.Structure RBAC based on the operating model.Design RBAC policies tailored to operational teams, including support levels, security operations, platforms, networking, and workloads.Audit all activities.Monitor and record all actions in your system. Use Azure Policy to audit (AuditorauditIfNotExists) changes. Additionally, configurealert in Azure Monitorto notify stakeholders when someone deletes an Azure resource. If you use Bicep, consider usingBicep deployment stacksto prevent unauthorized changes.
Restrict portal permissions.Limit deployment capabilities from the portal using role-based access control (RBAC). Assign read-only permissions by default, and escalate privileges only when necessary.
Grant just-in-time access.UsePrivileged Identity Management (PIM)for accessing Azure and Microsoft Entra resources. Require sequential approvals from multiple individuals or groups for activating PIM. Reserve privileged roles (âA0â super admin roles) exclusively for emergency scenarios.
Grant just-in-time access.UsePrivileged Identity Management (PIM)for accessing Azure and Microsoft Entra resources. Require sequential approvals from multiple individuals or groups for activating PIM. Reserve privileged roles (âA0â super admin roles) exclusively for emergency scenarios.
Structure RBAC based on the operating model.Design RBAC policies tailored to operational teams, including support levels, security operations, platforms, networking, and workloads.
Structure RBAC based on the operating model.Design RBAC policies tailored to operational teams, including support levels, security operations, platforms, networking, and workloads.
Audit all activities.Monitor and record all actions in your system. Use Azure Policy to audit (AuditorauditIfNotExists) changes. Additionally, configurealert in Azure Monitorto notify stakeholders when someone deletes an Azure resource. If you use Bicep, consider usingBicep deployment stacksto prevent unauthorized changes.
Audit all activities.Monitor and record all actions in your system. Use Azure Policy to audit (AuditorauditIfNotExists) changes. Additionally, configurealert in Azure Monitorto notify stakeholders when someone deletes an Azure resource. If you use Bicep, consider usingBicep deployment stacksto prevent unauthorized changes.
Use version-controlled templates.Limit portal use to emergency scenarios if employing IaC deployments. Portal changes result in configuration drift from IaC templates. Replicate all portal-based changes immediately in version-controlled IaC templates, such asBicep,Terraform, orARMtemplates. Regularly export Azure resource configurations and store them as IaC to maintain production environments aligned with approved, traceable configurations. See guidance on how export Azure configurations asBicep,Terraform, orARM templates. Considertemplate specsif using ARM templates.ToolUse CaseBicepManageable, readable Azure-specific IaCTerraformMulticloud solution, broader community supportARM templatesFull control, comfortable with JSON
Use version-controlled templates.Limit portal use to emergency scenarios if employing IaC deployments. Portal changes result in configuration drift from IaC templates. Replicate all portal-based changes immediately in version-controlled IaC templates, such asBicep,Terraform, orARMtemplates. Regularly export Azure resource configurations and store them as IaC to maintain production environments aligned with approved, traceable configurations. See guidance on how export Azure configurations asBicep,Terraform, orARM templates. Considertemplate specsif using ARM templates.
Manage code deployments
Adopt best practices to automate and control changes to code and infrastructure. Follow these steps:
Standardize tooling.Use a consistent toolset to minimize context switching. Choose developer tools (VS Code, Visual Studio), a code repository (GitHub,Azure DevOps), a CI/CD pipeline (GitHub Actions,Azure Pipelines), and an IaC solution (Bicep,Terraform, orARMtemplates) that work together.
Standardize tooling.Use a consistent toolset to minimize context switching. Choose developer tools (VS Code, Visual Studio), a code repository (GitHub,Azure DevOps), a CI/CD pipeline (GitHub Actions,Azure Pipelines), and an IaC solution (Bicep,Terraform, orARMtemplates) that work together.
Use version control.Maintain a single source of truth for your code. Use version control to reduce configuration drift and simplify rollback procedures.
Use version control.Maintain a single source of truth for your code. Use version control to reduce configuration drift and simplify rollback procedures.
Use deployment pipelines.ACI/CD pipelineautomates the build process, runs tests, and scans code for quality and security issues with each pull request. UseGitHub ActionsorAzure Pipelinesto build and deploy application code and IaC files. Enforce precommit hooks and automated scans to catch unauthorized or high-risk changes early.
Use deployment pipelines.ACI/CD pipelineautomates the build process, runs tests, and scans code for quality and security issues with each pull request. UseGitHub ActionsorAzure Pipelinesto build and deploy application code and IaC files. Enforce precommit hooks and automated scans to catch unauthorized or high-risk changes early.
Test deployments.Stage approvals within your CI/CD pipelines to validate deployments progressively. Follow this sequence: development, build verification, integration tests, performance tests, user acceptance testing (UAT), staging, canary releases, preproduction, and finally, production.
Test deployments.Stage approvals within your CI/CD pipelines to validate deployments progressively. Follow this sequence: development, build verification, integration tests, performance tests, user acceptance testing (UAT), staging, canary releases, preproduction, and finally, production.
Use infrastructure as code (IaC).Use IaC to ensure consistency and manage deployments through version control. Move from Azure portal-based proof-of-concepts to IaC for production environments. UseBicep,Terraform, orARMtemplates to define resources. For Bicep, usemodulesand considerdeployment stacks. For ARM template, consider usetemplate specsfor versioned deployment.
Use infrastructure as code (IaC).Use IaC to ensure consistency and manage deployments through version control. Move from Azure portal-based proof-of-concepts to IaC for production environments. UseBicep,Terraform, orARMtemplates to define resources. For Bicep, usemodulesand considerdeployment stacks. For ARM template, consider usetemplate specsfor versioned deployment.
Apply code repository best practices.Following these standards reduces errors, streamlines code reviews, and avoids integration issues. For high-priority production environments:RequirementDescriptionDisable direct pushesBlock direct commits to the main branchRequire pull requestsRequire all changes to pass through a pull requestRequire code reviewsEnsure someone other than the author reviews every pull requestEnforce code coverage thresholdsEnsure a minimum percentage of code passes automated tests for all pull requestsUse validation pipelinesConfigure branch protection rules to run a validation pipeline for pull requests
Apply code repository best practices.Following these standards reduces errors, streamlines code reviews, and avoids integration issues. For high-priority production environments:
Require workload team onboarding checks.Verify that new codebases and teams align with business goals, standards, and best practices. Use a checklist to confirm code repository structure, naming standards, coding standards, and CI/CD pipeline configurations.
Require workload team onboarding checks.Verify that new codebases and teams align with business goals, standards, and best practices. Use a checklist to confirm code repository structure, naming standards, coding standards, and CI/CD pipeline configurations.
Manage configuration drift
Manage configuration drift by identifying and correcting discrepancies between your intended configuration and the live environment. Follow these best practices:
Prevent and detect change.UseChange Analysisto detect configuration changes and explain their underlying causes. Use Azure Policy to deny and audit changes using effects likeDeny,DenyAction,Audit, andauditIfNotExists. If you use Bicep, consider usingBicep deployment stacksto prevent unauthorized changes.
Prevent and detect change.UseChange Analysisto detect configuration changes and explain their underlying causes. Use Azure Policy to deny and audit changes using effects likeDeny,DenyAction,Audit, andauditIfNotExists. If you use Bicep, consider usingBicep deployment stacksto prevent unauthorized changes.
Detect IaC configuration drift.Drift occurs when someone updates the IaC file (intentional, unintentional) or makes a change in the Azure portal. Regularly compare the live environment with your desired configuration to detect drift:Store desired and last-known-good configurations.Save your desired configuration file in a version-controlled repository. This file shows the original, intended configuration. Maintain a last-known-good configuration as a reliable rollback reference and drift detection baseline.Detect configuration drift before deployment.Preview potential changes before deployment usingTerraform plan,Bicep what-if, orARM template what-if. Investigate discrepancies thoroughly to ensure proposed changes align with the desired state.Detect drift post deployment.Regularly compare live environments with desired configurations through regular drift checks. Integrate these checks into your CI/CD pipelines or conduct them manually to maintain consistency. See an example withAzure Policy and Azure Pipelines.Rollback to last-known-good configuration.Develop clear rollback strategies that use automated procedures within your CI/CD pipeline. Utilize your last-known-good configuration to quickly revert undesired changes and minimize downtime.Minimize portal-driven changes.Minimize non-IaC changes to emergency scenarios only. Enforce strict access controls such as Privileged Identity Management. Promptly update IaC files if manual adjustments are necessary to preserve the accuracy of your desired configuration.
Detect IaC configuration drift.Drift occurs when someone updates the IaC file (intentional, unintentional) or makes a change in the Azure portal. Regularly compare the live environment with your desired configuration to detect drift:
Store desired and last-known-good configurations.Save your desired configuration file in a version-controlled repository. This file shows the original, intended configuration. Maintain a last-known-good configuration as a reliable rollback reference and drift detection baseline.
Store desired and last-known-good configurations.Save your desired configuration file in a version-controlled repository. This file shows the original, intended configuration. Maintain a last-known-good configuration as a reliable rollback reference and drift detection baseline.
Detect configuration drift before deployment.Preview potential changes before deployment usingTerraform plan,Bicep what-if, orARM template what-if. Investigate discrepancies thoroughly to ensure proposed changes align with the desired state.
Detect configuration drift before deployment.Preview potential changes before deployment usingTerraform plan,Bicep what-if, orARM template what-if. Investigate discrepancies thoroughly to ensure proposed changes align with the desired state.
Detect drift post deployment.Regularly compare live environments with desired configurations through regular drift checks. Integrate these checks into your CI/CD pipelines or conduct them manually to maintain consistency. See an example withAzure Policy and Azure Pipelines.
Detect drift post deployment.Regularly compare live environments with desired configurations through regular drift checks. Integrate these checks into your CI/CD pipelines or conduct them manually to maintain consistency. See an example withAzure Policy and Azure Pipelines.
Rollback to last-known-good configuration.Develop clear rollback strategies that use automated procedures within your CI/CD pipeline. Utilize your last-known-good configuration to quickly revert undesired changes and minimize downtime.
Rollback to last-known-good configuration.Develop clear rollback strategies that use automated procedures within your CI/CD pipeline. Utilize your last-known-good configuration to quickly revert undesired changes and minimize downtime.
Minimize portal-driven changes.Minimize non-IaC changes to emergency scenarios only. Enforce strict access controls such as Privileged Identity Management. Promptly update IaC files if manual adjustments are necessary to preserve the accuracy of your desired configuration.
Minimize portal-driven changes.Minimize non-IaC changes to emergency scenarios only. Enforce strict access controls such as Privileged Identity Management. Promptly update IaC files if manual adjustments are necessary to preserve the accuracy of your desired configuration.
Manage resource sprawl
Resource sprawl describes the uncontrolled growth of cloud resources. This growth increases costs, security risks, and management complexity. Follow these steps:
Implement governance policies.UseAzure Policyto enforce standards forresource provisioningandtaggingacross your organization. Create a clearnaming strategyfor easier resource visibility.
Implement governance policies.UseAzure Policyto enforce standards forresource provisioningandtaggingacross your organization. Create a clearnaming strategyfor easier resource visibility.
Organize resources effectively.Structure resources hierarchically with management groups and subscriptions aligned to your organization's needs. This structure improves visibility and resource management. Refer to theAzure landing zoneguidance for proven best practices.
Organize resources effectively.Structure resources hierarchically with management groups and subscriptions aligned to your organization's needs. This structure improves visibility and resource management. Refer to theAzure landing zoneguidance for proven best practices.
Restrict deployment permissions.Implement role-based access control (RBAC) best practices outlined inAzure RBACandMicrosoft Entra RBAC. Assign appropriate permissions to users. Use reader roles to minimize unauthorized resource creation risks.
Restrict deployment permissions.Implement role-based access control (RBAC) best practices outlined inAzure RBACandMicrosoft Entra RBAC. Assign appropriate permissions to users. Use reader roles to minimize unauthorized resource creation risks.
Conduct regular audits.UseAzure Advisorto identify unused or underutilized Azure resources. UseCost Managementto analyze your cloud spending and remove orphaned resources causing unnecessary costs. Keep in mind not all Azure resources incur charges. Run queries inAzure Resource Graphto maintain an accurate resource inventory.
Conduct regular audits.UseAzure Advisorto identify unused or underutilized Azure resources. UseCost Managementto analyze your cloud spending and remove orphaned resources causing unnecessary costs. Keep in mind not all Azure resources incur charges. Run queries inAzure Resource Graphto maintain an accurate resource inventory.
Manage relocation
Periodically evaluate your current Azure regions to determine if relocating workloads elsewhere improves efficiency, reduces costs, or enhances performance.
Understand relocation drivers.Understanding relocation drivers ensures each relocation has valid business justification, given relocation involves risk and cost. Common business justifications for relocation include business expansion, regulatory compliance requirements, and proximity to end users.
Understand relocation drivers.Understanding relocation drivers ensures each relocation has valid business justification, given relocation involves risk and cost. Common business justifications for relocation include business expansion, regulatory compliance requirements, and proximity to end users.
Manage relocation risks.Managing relocation risks prevents disruption and maintains compliance. Define acceptable downtime windows, communicate impacts to stakeholders, and ensure adherence to organizational policies and industry regulations.
Manage relocation risks.Managing relocation risks prevents disruption and maintains compliance. Define acceptable downtime windows, communicate impacts to stakeholders, and ensure adherence to organizational policies and industry regulations.
Manage relocation costs.Managing relocation costs prevents unnecessary spending during migration. Transfer data once, remove duplicate environments, and compare regional Azure prices. Review theAzure bandwidth pricing.
Manage relocation costs.Managing relocation costs prevents unnecessary spending during migration. Transfer data once, remove duplicate environments, and compare regional Azure prices. Review theAzure bandwidth pricing.
Manage relocation projects.Small teams should migrate workloads one at a time with focused execution. Large teams should relocate multiple workloads simultaneously to achieve efficiency through coordinated planning.
Manage relocation projects.Small teams should migrate workloads one at a time with focused execution. Large teams should relocate multiple workloads simultaneously to achieve efficiency through coordinated planning.
For more information, seeRelocate workloads.
Manage operating systems
Where you use virtual machines, you need to also manage the operating system. Follow these steps:
Automate virtual machine maintenance.In Azure, useautomation toolsto create and manage Azure virtual machines. UseAzure Machine Configurationto audit or configure operating system settings as code for machines running in Azure and hybrid.
Automate virtual machine maintenance.In Azure, useautomation toolsto create and manage Azure virtual machines. UseAzure Machine Configurationto audit or configure operating system settings as code for machines running in Azure and hybrid.
Update operating systems.You need tomanage guest updates and host maintenanceto ensure the operating systems are up to date for security purposes.
Update operating systems.You need tomanage guest updates and host maintenanceto ensure the operating systems are up to date for security purposes.
Monitor in-guest operations.Use theAzure Change Tracking and Inventory serviceto enhance the auditing and governance for in-guest operations. It monitors changes and provides detailed inventory logs for servers across Azure, on-premises, and other cloud environments.
Monitor in-guest operations.Use theAzure Change Tracking and Inventory serviceto enhance the auditing and governance for in-guest operations. It monitors changes and provides detailed inventory logs for servers across Azure, on-premises, and other cloud environments.
Azure management tools
Next steps
Monitor your Azure cloud estate
CAF Manage checklist
Feedback
Was this page helpful?
Additional resources