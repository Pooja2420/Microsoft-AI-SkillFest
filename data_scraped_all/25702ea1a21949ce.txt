Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Move from Azure Cache for Redis to Azure Managed Redis (preview)
Article
2025-03-31
1 contributor
Applies to: â Azure Managed Redis, â Azure Cache for Redis
In this article
In this article, you learn to migrate from Azure Cache for Redis instance to an Azure Managed Redis (preview) instance.
Important
Azure Managed Redis is currently in PREVIEW.
See theSupplemental Terms of Use for Microsoft Azure Previewsfor legal terms that apply to Azure features that are in beta, preview, or otherwise not yet released into general availability.
Prerequisites
Azure subscription -create one for free
An instance of any Azure Cache for Redis
Feature comparison between Azure Cache for Redis and Azure Managed Redis (preview)
Here are some other differences that aren't covered by the previous mapping. Consider these client application changes:
.redis.cache.windows.net
<region>.redis.azure.net
Regional availability for Azure Managed Redis
Azure Managed Redis is current supported in the following regions. This list is updated regularly. Eventually, Azure Managed Redis will be supported all regions in Azure. Work with your sales contact to raise requests on regions where you need support.
Migrate your Azure Cache for Redis instance to Azure Managed Redis
Note
Make sure to update the rest of your application and related Azure resources as needed to use the cache.
Select the cache you want to move from the Azure portal
Note
Use non High Availability option of Azure Managed Redis for Migrating Basic SKUs
*This option is for cost efficiency. Ensure the peak of total used memory in the past month is less than the suggested Azure Managed Redis memory to choose this option.
** This option is for abundant memory consumption.
For sharded cluster, choose a Memory Optimized tier that has equivalent total memory.
For clusters with more than one read replica, choose a Compute Optimized tier with equivalent total memory as the primary replica.
Migration options
Client applications should be able to use an Azure Managed Redis instance that has different clustering modes and endpoints. Azure Cache for Redis and Azure Managed Redis (preview) are compatible so no application code changes other than connection configurations are required for most scenarios.
Learn more at:
Scale an Azure Managed Redis (preview) instance
This approach technically isn't a migration. If losing data isn't a concern, the easiest way to move to Azure Managed Redis tier is to create new cache instance and connect your application to it. For example, if you use Redis as a look-aside cache of database records, you can easily rebuild the cache from scratch.
General steps to implement this option are:
Create a new Azure Managed Redis instance.
Update your application to use the new instance.
Delete the old Azure Cache for Redis instance.
This option is applicable only to premium tier caches. Open-source Redis defines a standard mechanism for taking a snapshot of a cache's in-memory dataset and saving it to a file. Another Redis cache can read the RDB file that was exported.Azure Cache for Redis premium tiersupports exporting data from a cache instance via RDB files. You can use an RDB file to transfer data from an existing Azure Cache for Redis instance to Azure Managed Redis instance.
General steps to implement this option are:
Create a new Azure Managed Redis instance that is the same size (or bigger than) the existing Azure Cache for Redis instance.
Export the RDB file from existing Azure Cache for Redis instance using theseexport instructionsor thePowerShell Export cmdlet
Import the RDB file into new Azure Managed Redis instance using these import instructions or the PowerShell Import cmdlet
Update your application to use the new Azure Managed Redis instance connection string.
Export Data:
az redis export --resource-group <ResourceGroupName> --name <Azure Cache for Redis instance name> --prefix <BlobPrefix> --container <ContainerName> --file-format <FileFormat>
az redis export --resource-group <ResourceGroupName> --name <Azure Cache for Redis instance name> --prefix <BlobPrefix> --container <ContainerName> --file-format <FileFormat>
Import Data:
az redis import --resource-group <ResourceGroupName> --name <Azure Managed Redis instance name> --files <BlobUris>
az redis import --resource-group <ResourceGroupName> --name <Azure Managed Redis instance name> --files <BlobUris>
ReplaceResourceGroupName,CacheName,BlobPrefix,ContainerName, andFileFormatwith your specific values. The--file-format_ can be either RDB or AOF.
Rather than moving data directly between caches, you can use your application to write data to both an existing cache and a new one you're setting up. The application still reads data from the existing cache initially. When the new cache has the necessary data, you switch the application to that cache and retire the old one. Let's say, for example, you use Redis as a session store and the application sessions are valid for seven days. After writing to the two caches for a week, you'll be certain the new cache contains all nonexpired session information. You can safely rely on it from that point onward without concern over data loss.
General steps to implement this option are:
Create a new Azure Managed Redis instance that is the same size as (or bigger than) the existing Azure Cache for Redis instance.
Modify application code to write to both the new and the original instances.
Continue reading data from the original instance until the new instance is sufficiently populated with data.
Update the application code to reading and writing from the new instance only.
Delete the original instance.
Create a custom migration process by programmatically reading data from an existing Azure Cache for Redis instance and writing them into Azure Managed Redis instance. There are two open source tools you can try:
Redis-copyThis open-source tool can be used to copy data from one Azure Cache for Redis instance to another. This tool is useful for moving data between cache instances in different Azure Cache regions. Acompiled versionis available as well. You can also find the source code to be a useful guide for writing your own migration tool.
This open-source tool can be used to copy data from one Azure Cache for Redis instance to another. This tool is useful for moving data between cache instances in different Azure Cache regions. Acompiled versionis available as well. You can also find the source code to be a useful guide for writing your own migration tool.
RIOTRIOT is another popular migration tool tested by Redis community. It's a command-line utility designed to help you get data in and out of Redis.
RIOT is another popular migration tool tested by Redis community. It's a command-line utility designed to help you get data in and out of Redis.
Note
This tool isn't officially supported by Microsoft.
General steps to implement this option are:
Create a VM in the region where the existing cache is located. If your dataset is large, choose a relatively powerful VM to reduce copying time.
Create a new Azure Managed Redis instance.
Flush data from the new cache to ensure that it's empty. This step is required because the copy tool itself doesn't overwrite any existing key in the target cache.
Important: Make sure to NOT flush from the source cache.
Use an application such as the open-source tool mentioned previously to automate the copying of data from the source cache to the target. Remember that the copy process could take a while to complete depending on the size of your dataset.
Related content
What is Azure Managed Redis?
Feedback
Was this page helpful?
Additional resources