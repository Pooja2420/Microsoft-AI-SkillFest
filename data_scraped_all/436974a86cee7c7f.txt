Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Get started with log queries in Azure Monitor Logs
Article
2025-01-24
11 contributors
In this article
This article explains the fundamentals of writing log queries in Azure Monitor Logs, including how to:
Structure a query.
Sort query results.
Filter query results.
Specify a time range.
Include or exclude columns in query results.
Define and use custom fields.
Aggregate and group results.
Where applicable, the article provides examples of querying data using both Kusto Query Language (KQL) andLog Analytics simple mode.
Note
If you're collecting data from at least one virtual machine, you can work through this exercise in your own environment. For other scenarios, use ourdemo environment, which includes plenty of sample data.
Tutorial video
Note
This video shows an earlier version of the user interface, but the screenshots throughout this article are up to date and reflect the current UI.
Permissions required
You must haveMicrosoft.OperationalInsights/workspaces/query/*/readpermissions to the Log Analytics workspaces you query, as provided by theLog Analytics Reader built-in role, for example.
Microsoft.OperationalInsights/workspaces/query/*/read
Structure a query
Queries can start with either a table name or thesearchcommand. It's a good idea to start with a table name because it defines a clear scope for the query. It also improves query performance and the relevance of the results.
search
Note
KQL, which is used by Azure Monitor, is case sensitive. Language keywords are usually written in lowercase. When you use names of tables or columns in a query, be sure to use the correct case, as shown on the schema pane.
Table-based queries
Azure Monitor organizes log data in tables, each composed of multiple columns. All tables and columns are shown on the schema pane in Log Analytics in the Azure portal.
Identify a table that you're interested in, then take a look at a bit of data:
SecurityEvent
| take 10
SecurityEvent
| take 10
The preceding query returns 10 results from theSecurityEventtable, in no specific order. This common way to get a glance at a table helps you to understand its structure and content. Let's examine how it's built:
SecurityEvent
The query starts with the table nameSecurityEvent, which defines the scope of the query.
SecurityEvent
The pipe (|) character separates commands, so the output of the first command is the input of the next. You can add any number of piped elements.
Following the pipe is thetakeoperator. We could run the query even without adding| take 10. The command would still be valid, but it could return up to 30,000 results.
take
| take 10
Search queries
Search queries are less structured. They're best suited for finding records that include a specific value in any of the columns of a certain table.
KQL mode
Simple mode
This query searches theSecurityEventtable for records that contain the phrase "Cryptographic." Of those records, 10 records are returned and displayed:
SecurityEvent
search in (SecurityEvent) "Cryptographic"
| take 10
search in (SecurityEvent) "Cryptographic"
| take 10
If you omit thein (SecurityEvent)part and run onlysearch "Cryptographic", the search goes overalltables. The process would then take longer and be less efficient.
in (SecurityEvent)
search "Cryptographic"
Important
Search queries are ordinarily slower than table-based queries because they have to process more data.
To search for records that include a specific value in any of their columns:
Select a tableand choseSecurityEvent.
Select a tableand choseSecurityEvent.
SecurityEvent
OpenAdd>Search in table.
OpenAdd>Search in table.

EnterCryptographic, then selectApply.
EnterCryptographic, then selectApply.

To only show 10 results, seeLimit results.
To only show 10 results, seeLimit results.
Important
We recommend usingFilterif you know which column holds the data you're searching for. Thesearch operator is substantially less performantthan filtering, and might not function well on large volumes of data.
Limit results
KQL mode
Simple mode
Use thetakeoperator to view a small sample of records by returning up to the specified number of records. For example:
take
SecurityEvent
| take 10
SecurityEvent
| take 10
The selected results are arbitrary and displayed in no particular order. If you need to return results in a particular order, use thesortandtopoperators.
sort
top
To return up to a specific number of records, you can limit the results:
SelectShowto open theShow resultswindow.
SelectShowto open theShow resultswindow.
Pick one of the preset limits or enter a custom limit, then selectApply.
Pick one of the preset limits or enter a custom limit, then selectApply.

Sort results
This section describes thesortandtopoperators and theirdescandascarguments. Althoughtakeis useful for getting a few records, you can't select or sort the results in any particular order. To get an ordered view, usesortandtop.
sort
top
desc
asc
take
sort
top
Sort
KQL mode
Simple mode
You can use thesortoperatorto sort the query results by the column you specify. However,sortdoesn't limit the number of records that are returned by the query.
sort
sort
For example, the following query returns all available records for theSecurityEventtable, which is up to a maximum of 30,000 records, and sorts them by the TimeGenerated column.
SecurityEvent
SecurityEvent	
| sort by TimeGenerated
SecurityEvent	
| sort by TimeGenerated
The preceding query could return too many results. Also, it might also take some time to return the results. The query sorts the entireSecurityEventtable by theTimeGeneratedcolumn. The Analytics portal then limits the display to only 30,000 records. This approach isn't optimal. The best way to only get the latest records is to use thetopoperator.
SecurityEvent
TimeGenerated
top
Use thedescargument to sort records in descending order. Descending is the default sorting order forsortandtop, so you can usually omit thedescargument.
desc
sort
top
desc
For example, the data returned by both of the following queries is sorted by theTimeGenerated column, in descending order:
SecurityEvent	
| sort by TimeGenerated desc
SecurityEvent	
| sort by TimeGenerated desc
SecurityEvent	
| sort by TimeGenerated desc
SecurityEvent	
| sort by TimeGenerated
SecurityEvent	
| sort by TimeGenerated
SecurityEvent	
| sort by TimeGenerated
To sort in ascending order, specifyasc.
asc
To sort your results:
OpenAdd>Sort.
OpenAdd>Sort.

Pick a column to sort by.
Pick a column to sort by.
ChooseAscendingorDescending, then selectApply.
ChooseAscendingorDescending, then selectApply.

OpenAdd>Sortagain to sort by another column.
OpenAdd>Sortagain to sort by another column.
Top
KQL mode
Simple mode
Use thetopoperatorto sort the entire table on the server side and then only return the top records.
top
For example, the following query returns the latest 10 records:
SecurityEvent
| top 10 by TimeGenerated
SecurityEvent
| top 10 by TimeGenerated
The output looks like this example:

In simple mode, there's no direct equivalent to thetopoperator. Instead, you can sort a column and then limit the results.
top
Filter results
Filtering is the most common way to limit query results to relevant information.
KQL mode
Simple mode
To add a filter to a query, use thewhereoperatorfollowed by one or more conditions. For example, the following query returns onlySecurityEventrecords whereLevel equals _8:
where
SecurityEvent
Level equals _8
SecurityEvent
| where Level == 8
SecurityEvent
| where Level == 8
When you write filter conditions, you can use the following expressions:
Level == 8
EventSourceName =~ "microsoft-windows-security-auditing"
Level != 4
and
or
Level == 16 or CommandLine != ""
To filter results in theSecurityEventtable to only show records where theLevelequals8:
SecurityEvent
Level
8
OpenAddand choose the columnLevel.
OpenAddand choose the columnLevel.
Level

In theOperatordropdown list, chooseEquals. Enter the number8in the field below, then selectApply.
In theOperatordropdown list, chooseEquals. Enter the number8in the field below, then selectApply.
8

Filter by multiple conditions
KQL mode
Simple mode
To filter by multiple conditions, you can use either of the following approaches:
Useand, as shown here:
and
SecurityEvent
| where Level == 8 and EventID == 4672
SecurityEvent
| where Level == 8 and EventID == 4672
Pipe multiplewhereelements, one after the other, as shown here:
where
SecurityEvent
| where Level == 8 
| where EventID == 4672
SecurityEvent
| where Level == 8 
| where EventID == 4672
Note
Values can have different types, so you might need to cast them to perform comparisons on the correct type. For example, theSecurityEvent Levelcolumn is of type String, so you must cast it to a numerical type, such asintorlong, before you can use numerical operators on it, as shown here:SecurityEvent | where toint(Level) >= 10
SecurityEvent Level
int
long
SecurityEvent | where toint(Level) >= 10
To filter by multiple conditions, you can add additional filters:
OpenAddand choose the columnEventID.
OpenAddand choose the columnEventID.
EventID
In theOperatordropdown list, chooseEquals. Enter the number4672in the field below, then selectApply.
In theOperatordropdown list, chooseEquals. Enter the number4672in the field below, then selectApply.
4672
Specify a time range
KQL mode
Simple mode
You can specify a time range by using the time picker or a time filter.
Note
If you include a time range in the query, the time picker automatically changes toSet in query. If you manually change the time picker to a different value, Log Analytics applies the smaller of the two time ranges.
Use the time picker
The time picker is displayed next to theRunbutton and indicates that you're querying records from only the last 24 hours. This default time range is applied to all queries. To get records from only the last hour, selectLast hourand then run the query again.

Add a time filter to the query
You can also define your own time range by adding a time filter to the query.
It's best to place the time filter immediately after the table name:
SecurityEvent
| where TimeGenerated > ago(30m) 
| where toint(Level) >= 10
SecurityEvent
| where TimeGenerated > ago(30m) 
| where toint(Level) >= 10
In the preceding time filter,ago(30m)means "30 minutes ago." This query returns records from only the last 30 minutes, which is expressed as, for example, 30m. Other units of time include days (for example, 2d) and seconds (for example, 10s).
ago(30m)
The time picker is displayed next to theRunbutton and indicates that you're querying records from only the last 24 hours. This default time range is applied to all queries. To get records from only the last hour, selectLast hourand then run the query again.

Include or exclude columns in query results
KQL mode
Simple mode
Useprojectto select specific columns to include in the results:
project
SecurityEvent 
| top 10 by TimeGenerated 
| project TimeGenerated, Computer, Activity
SecurityEvent 
| top 10 by TimeGenerated 
| project TimeGenerated, Computer, Activity
The preceding example generates the following output:

You can also useprojectto rename columns and define new ones. The next example usesprojectto do the following:
project
project
Select only theComputerandTimeGeneratedoriginal columns.
Computer
TimeGenerated
Display theActivitycolumn asEventDetails.
Activity
EventDetails
Create a new column namedEventCode. Thesubstring()function is used to get only the first four characters from theActivityfield.
EventCode
substring()
Activity
SecurityEvent
| top 10 by TimeGenerated 
| project Computer, TimeGenerated, EventDetails=Activity, EventCode=substring(Activity, 0, 4)
SecurityEvent
| top 10 by TimeGenerated 
| project Computer, TimeGenerated, EventDetails=Activity, EventCode=substring(Activity, 0, 4)
You can manually select the columns you want to show in your results:
OpenAdd>Show columns.
OpenAdd>Show columns.

DeselectAll, then select the columnsTimeGenerated,Computer, andActivity.
DeselectAll, then select the columnsTimeGenerated,Computer, andActivity.
All
TimeGenerated
Computer
Activity

SelectApply.
SelectApply.
Define and use custom fields
KQL mode
Simple mode
You can useextendto keep all original columns in the result set and define other ones. The following query usesextendto add theEventCodecolumn. This column might not be displayed at the end of the table results. You would need to expand the details of a record to view it.
extend
extend
EventCode
SecurityEvent
| top 10 by TimeGenerated
| extend EventCode=substring(Activity, 0, 4)
SecurityEvent
| top 10 by TimeGenerated
| extend EventCode=substring(Activity, 0, 4)
Note
Use theextendoperator for ad hoc computations in queries. Useingestion-time transformationsorsummary rulesto transform or aggregate data at ingestion time for more efficient queries.
extend
In simple mode, there's no direct equivalent to theextendoperator.
extend
Aggregate and group results
Aggregate groups of rows
KQL mode
Simple mode
Usesummarizeto identify groups of records according to one or more columns and apply aggregations to them. The most common use ofsummarizeiscount, which returns the number of results in each group.
summarize
summarize
count
The following query reviews allPerfrecords from the last hour, groups them byObjectName, and counts the records in each group:
Perf
ObjectName
Perf
| where TimeGenerated > ago(1h)
| summarize count() by ObjectName
Perf
| where TimeGenerated > ago(1h)
| summarize count() by ObjectName
To review allPerfrecords from the last, group them byObjectName, and count the records in each group:
Perf
ObjectName
OpenTime rangeand change it toLast hour.
OpenTime rangeand change it toLast hour.
OpenAdd>Aggregate, then make the following selection and selectApply:Select column:ObjectNameOperator:count
OpenAdd>Aggregate, then make the following selection and selectApply:
Select column:ObjectName
Operator:count

Group unique combinations of values in multiple columns
KQL mode
Simple mode
Sometimes it makes sense to define groups by multiple dimensions. Each unique combination of these values defines a separate group:
Perf
| where TimeGenerated > ago(1h)
| summarize count() by ObjectName, CounterName
Perf
| where TimeGenerated > ago(1h)
| summarize count() by ObjectName, CounterName
Currently, it's not possible to define groups by multiple dimensions in simple mode.
Perform mathematical or statistical calculations
KQL mode
Simple mode
Another common use is to perform mathematical or statistical calculations on each group. The following example calculates the averageCounterValuefor each computer:
CounterValue
Perf
| where TimeGenerated > ago(1h)
| summarize avg(CounterValue) by Computer
Perf
| where TimeGenerated > ago(1h)
| summarize avg(CounterValue) by Computer
Unfortunately, the results of this query are meaningless because we mixed together different performance counters. To make the results more meaningful, calculate the average separately for each combination ofCounterNameandComputer:
CounterName
Computer
Perf
| where TimeGenerated > ago(1h)
| summarize avg(CounterValue) by Computer, CounterName
Perf
| where TimeGenerated > ago(1h)
| summarize avg(CounterValue) by Computer, CounterName
To calculate the averageCounterValuefor each computer:
CounterValue
OpenTime rangeand change it toLast hour.
OpenTime rangeand change it toLast hour.
OpenAdd>Aggregate, then make the following selection and selectApply:Select column:ComputerOperator:avgAverage:CounterValue
OpenAdd>Aggregate, then make the following selection and selectApply:
Select column:Computer
Operator:avg
Average:CounterValue

Unfortunately, the results of this query are meaningless because we mixed together different performance counters. To make the results more meaningful, you could calculate the average separately for each combination ofCounterNameandComputer.
CounterName
Computer
However, it's currently not possible to define groups by multiple dimensions in simple mode. Switch to the KQL mode tab to see how this can be done using a Kusto query.
Summarize by a time column
Grouping results can also be based on a time column or another continuous value. Simply summarizingby TimeGenerated, though, would create groups for every single millisecond over the time range because these values are unique.
by TimeGenerated
KQL mode
Simple mode
To create groups based on continuous values, it's best to break the range into manageable units by usingbin. The following query analyzesPerfrecords that measure free memory (Available MBytes) on a specific computer. It calculates the average value of each 1-hour period over the last 7 days:
bin
Perf
Available MBytes
Perf 
| where TimeGenerated > ago(7d)
| where Computer == "DC01.na.contosohotels.com" 
| where CounterName == "Available MBytes" 
| summarize avg(CounterValue) by bin(TimeGenerated, 1h)
Perf 
| where TimeGenerated > ago(7d)
| where Computer == "DC01.na.contosohotels.com" 
| where CounterName == "Available MBytes" 
| summarize avg(CounterValue) by bin(TimeGenerated, 1h)
To make the output clearer, you can select to display it as a time chart, which shows the available memory over time. To do so, switch toChartview, open theChart formattingsidebar to the right and selectLineforChart type:

Select thePerftable.
Select thePerftable.
Perf
OpenTime rangeand change it toLast 7 days.
OpenTime rangeand change it toLast 7 days.
OpenAdd, selectComputer, then checkDC01.na.contosohotels.comand selectApply.NoteIfDC01.na.contosohotels.comdoesn't show, increase the shown results from 1000 (standard) to a higher number.
OpenAdd, selectComputer, then checkDC01.na.contosohotels.comand selectApply.
Computer
DC01.na.contosohotels.com
Note
IfDC01.na.contosohotels.comdoesn't show, increase the shown results from 1000 (standard) to a higher number.
DC01.na.contosohotels.com
OpenAddand selectCounterName, then checkAvailable MBytesand selectApply.
OpenAddand selectCounterName, then checkAvailable MBytesand selectApply.
CounterName
Available MBytes
OpenAdd>Aggregateand make the following selection, then selectApply.Select column:TimeGeneratedOperator:avgAverage:CounterValue
OpenAdd>Aggregateand make the following selection, then selectApply.
Select column:TimeGenerated
Operator:avg
Average:CounterValue
Switch toChartview, open theChart formattingsidebar to the right and selectLineforChart type:
Switch toChartview, open theChart formattingsidebar to the right and selectLineforChart type:

Frequently asked questions
This section provides answers to common questions.
Why am I seeing duplicate records in Azure Monitor Logs?
Occasionally, you might notice duplicate records in Azure Monitor Logs. This duplication is typically from one of the following two conditions:
Components in the pipeline have retries to ensure reliable delivery at the destination. Occasionally, this capability might result in duplicates for a small percentage of telemetry items.
If the duplicate records come from a virtual machine, you might have both the Log Analytics agent and Azure Monitor Agent installed. If you still need the Log Analytics agent installed, configure the Log Analytics workspace to no longer collect data that's also being collected by the data collection rule used by Azure Monitor Agent.
Next steps
To learn more about using string data in a log query, seeWork with strings in Azure Monitor log queries.
To learn more about aggregating data in a log query, seeAdvanced aggregations in Azure Monitor log queries.
To learn how to join data from multiple tables, seeJoins in Azure Monitor log queries.
Get documentation on the entire Kusto Query Language in theKQL language reference.
Feedback
Was this page helpful?
Additional resources