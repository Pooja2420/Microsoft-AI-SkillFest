Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Tutorial: Deploy an ASP.NET app to Azure with Azure SQL Database
Article
2022-09-21
20 contributors
In this article
Azure App Serviceprovides a highly scalable, self-patching web hosting service. This tutorial shows you how to deploy a data-driven ASP.NET app in App Service and connect it toAzure SQL Database. When you're finished, you have an ASP.NET app running in Azure and connected to SQL Database.

In this tutorial, you learn how to:
Create a database in Azure SQL Database
Connect an ASP.NET app to SQL Database
Deploy the app to Azure
Update the data model and redeploy the app
Stream logs from Azure to your terminal
If you don't have anAzure subscription, create anAzure free accountbefore you begin.
Prerequisites
To complete this tutorial:
InstallVisual Studio 2022with theASP.NET and web developmentandAzure developmentworkloads.
If you've installed Visual Studio already, add the workloads in Visual Studio by clickingTools>Get Tools and Features.
Download the sample
Download the sample project.
Download the sample project.
Extract (unzip) thedotnet-sqldb-tutorial-master.zipfile.
Extract (unzip) thedotnet-sqldb-tutorial-master.zipfile.
The sample project contains a basicASP.NET MVCcreate-read-update-delete (CRUD) app usingEntity Framework Code First.
Run the app
Open thedotnet-sqldb-tutorial-master/DotNetAppSqlDb.slnfile in Visual Studio.
Open thedotnet-sqldb-tutorial-master/DotNetAppSqlDb.slnfile in Visual Studio.
TypeF5to run the app. The app is displayed in your default browser.NoteIf you only installed Visual Studio and the prerequisites, you may have toinstall missing packages via NuGet.
TypeF5to run the app. The app is displayed in your default browser.
F5
Note
If you only installed Visual Studio and the prerequisites, you may have toinstall missing packages via NuGet.
Select theCreate Newlink and create a coupleto-doitems.
Select theCreate Newlink and create a coupleto-doitems.

Test theEdit,Details, andDeletelinks.
Test theEdit,Details, andDeletelinks.
The app uses a database context to connect with the database. In this sample, the database context uses a connection string namedMyDbConnection. The connection string is set in theWeb.configfile and referenced in theModels/MyDatabaseContext.csfile. The connection string name is used later in the tutorial to connect the Azure app to an Azure SQL Database.
MyDbConnection
Publish ASP.NET application to Azure
In theSolution Explorer, right-click yourDotNetAppSqlDbproject and selectPublish.
In theSolution Explorer, right-click yourDotNetAppSqlDbproject and selectPublish.

SelectAzureas your target and clickNext.
SelectAzureas your target and clickNext.
Make sure thatAzure App Service (Windows)is selected and clickNext.
Make sure thatAzure App Service (Windows)is selected and clickNext.
In thePublishdialog, clickSign In.
In thePublishdialog, clickSign In.
Sign in to your Azure subscription. If you're already signed into a Microsoft account, make sure that account holds your Azure subscription. If the signed-in Microsoft account doesn't have your Azure subscription, click it to add the correct account.
Sign in to your Azure subscription. If you're already signed into a Microsoft account, make sure that account holds your Azure subscription. If the signed-in Microsoft account doesn't have your Azure subscription, click it to add the correct account.
In theApp Service instancespane, click+.
In theApp Service instancespane, click+.

You can keep the generated web app name, or change it to another unique name (valid characters area-z,0-9, and-). The web app name is used as part of the default URL for your app (<app_name>.azurewebsites.net, where<app_name>is your web app name). The web app name needs to be unique across all apps in Azure.
a-z
0-9
-
<app_name>.azurewebsites.net
<app_name>
Note
Don't selectCreateyet.

Aresource groupis a logical container into which Azure resources, such as web apps, databases, and storage accounts, are deployed and managed. For example, you can choose to delete the entire resource group in one simple step later.
Next toResource Group, clickNew.
Next toResource Group, clickNew.

Name the resource groupmyResourceGroup.
Name the resource groupmyResourceGroup.
AnApp Service planspecifies the location, size, and features of the web server farm that hosts your app. You can save money when you host multiple apps by configuring the web apps to share a single App Service plan.
App Service plans define:
Region (for example: North Europe, East US, or Southeast Asia)
Instance size (small, medium, or large)
Scale count (1 to 20 instances)
SKU (Free, Shared, Basic, Standard, or Premium)
Next toHosting Plan, clickNew.
Next toHosting Plan, clickNew.
In theConfigure App Service Plandialog, configure the new App Service plan with the following settings and clickOK:SettingSuggested valueFor more informationApp Service PlanmyAppServicePlanApp Service plansLocationWest EuropeAzure regionsSizeFreePricing tiers
In theConfigure App Service Plandialog, configure the new App Service plan with the following settings and clickOK:

ClickCreateand wait for the Azure resources to be created.
ClickCreateand wait for the Azure resources to be created.
ThePublishdialog shows the resources you've configured. ClickFinish.
ThePublishdialog shows the resources you've configured. ClickFinish.

Before creating a database, you need alogical SQL server. A logical SQL server is a logical construct that contains a group of databases managed as a group.
In thePublishdialog, scroll down to theService Dependenciessection. Next toSQL Server Database, clickConfigure.NoteBe sure to configure the SQL Database from thePublishpage instead of theConnected Servicespage.
In thePublishdialog, scroll down to theService Dependenciessection. Next toSQL Server Database, clickConfigure.
Note
Be sure to configure the SQL Database from thePublishpage instead of theConnected Servicespage.

SelectAzure SQL Databaseand clickNext.
SelectAzure SQL Databaseand clickNext.
In theConfigure Azure SQL Databasedialog, click+.
In theConfigure Azure SQL Databasedialog, click+.
Next toDatabase server, clickNew.The server name is used as part of the default URL for your server,<server_name>.database.windows.net. It must be unique across all servers in Azure SQL. Change the server name to a value you want.
Next toDatabase server, clickNew.
The server name is used as part of the default URL for your server,<server_name>.database.windows.net. It must be unique across all servers in Azure SQL. Change the server name to a value you want.
<server_name>.database.windows.net
Add an administrator username and password. For password complexity requirements, seePassword Policy.Remember this username and password. You need them to manage the server later.ImportantEven though your password in the connection strings is masked (in Visual Studio and also in App Service), the fact that it's maintained somewhere adds to the attack surface of your app. App Service can usemanaged service identitiesto eliminate this risk by removing the need to maintain secrets in your code or app configuration at all. For more information, seeNext steps.
Add an administrator username and password. For password complexity requirements, seePassword Policy.
Remember this username and password. You need them to manage the server later.

Important
Even though your password in the connection strings is masked (in Visual Studio and also in App Service), the fact that it's maintained somewhere adds to the attack surface of your app. App Service can usemanaged service identitiesto eliminate this risk by removing the need to maintain secrets in your code or app configuration at all. For more information, seeNext steps.
ClickOK.
ClickOK.
In theAzure SQL Databasedialog, keep the default generatedDatabase Name. SelectCreateand wait for the database resources to be created.
In theAzure SQL Databasedialog, keep the default generatedDatabase Name. SelectCreateand wait for the database resources to be created.

When the wizard finishes creating the database resources, clickNext.
When the wizard finishes creating the database resources, clickNext.
In theDatabase connection string Name, typeMyDbConnection. This name must match the connection string that is referenced inModels/MyDatabaseContext.cs.
In theDatabase connection string Name, typeMyDbConnection. This name must match the connection string that is referenced inModels/MyDatabaseContext.cs.
InDatabase connection user nameandDatabase connection password, type the administrator username and password you used inCreate a server.
InDatabase connection user nameandDatabase connection password, type the administrator username and password you used inCreate a server.
Make sureAzure App Settingsis selected and clickFinish.NoteIf you seeLocal user secrets filesinstead, you must have configured SQL Database from theConnected Servicespage instead of thePublishpage.
Make sureAzure App Settingsis selected and clickFinish.
Note
If you seeLocal user secrets filesinstead, you must have configured SQL Database from theConnected Servicespage instead of thePublishpage.

Wait for configuration wizard to finish and clickClose.
Wait for configuration wizard to finish and clickClose.
In thePublishtab, scroll back up to the top and clickPublish. Once your ASP.NET app is deployed to Azure. Your default browser is launched with the URL to the deployed app.
In thePublishtab, scroll back up to the top and clickPublish. Once your ASP.NET app is deployed to Azure. Your default browser is launched with the URL to the deployed app.
Add a few to-do items.Congratulations! Your data-driven ASP.NET application is running live in Azure App Service.
Add a few to-do items.

Congratulations! Your data-driven ASP.NET application is running live in Azure App Service.
Access the database locally
Visual Studio lets you explore and manage your new database in Azure easily in theSQL Server Object Explorer. The new database already opened its firewall to the App Service app that you created. But to access it from your local computer (such as from Visual Studio), you must open a firewall for your local machine's public IP address. If your internet service provider changes your public IP address, you need to reconfigure the firewall to access the Azure database again.
From theViewmenu, selectSQL Server Object Explorer.
From theViewmenu, selectSQL Server Object Explorer.
At the top ofSQL Server Object Explorer, click theAdd SQL Serverbutton.
At the top ofSQL Server Object Explorer, click theAdd SQL Serverbutton.
In theConnectdialog, expand theAzurenode. All your SQL Database instances in Azure are listed here.
In theConnectdialog, expand theAzurenode. All your SQL Database instances in Azure are listed here.
Select the database that you created earlier. The connection you created earlier is automatically filled at the bottom.
Select the database that you created earlier. The connection you created earlier is automatically filled at the bottom.
Type the database administrator password you created earlier and clickConnect.
Type the database administrator password you created earlier and clickConnect.

TheCreate a new firewall ruledialog is opened. By default, a server only allows connections to its databases from Azure services, such as your Azure app. To connect to your database from outside of Azure, create a firewall rule at the server level. The firewall rule allows the public IP address of your local computer.
The dialog is already filled with your computer's public IP address.
Make sure thatAdd my client IPis selected and clickOK.Once Visual Studio finishes creating the firewall setting for your SQL Database instance, your connection shows up inSQL Server Object Explorer.Here, you can perform the most common database operations, such as run queries, create views and stored procedures, and more.
Make sure thatAdd my client IPis selected and clickOK.

Once Visual Studio finishes creating the firewall setting for your SQL Database instance, your connection shows up inSQL Server Object Explorer.
Here, you can perform the most common database operations, such as run queries, create views and stored procedures, and more.
Expand your connection >Databases><your database>>Tables. Right-click on theTodoestable and selectView Data.
Expand your connection >Databases><your database>>Tables. Right-click on theTodoestable and selectView Data.
Todoes

Update app with Code First Migrations
You can use the familiar tools in Visual Studio to update your database and app in Azure. In this step, you use Code First Migrations in Entity Framework to make a change to your database schema and publish it to Azure.
For more information about using Entity Framework Code First Migrations, seeGetting Started with Entity Framework 6 Code First using MVC 5.
OpenModels\Todo.csin the code editor. Add the following property to theToDoclass:
ToDo
public bool Done { get; set; }
public bool Done { get; set; }
Run a few commands to make updates to your local database.
From theToolsmenu, clickNuGet Package Manager>Package Manager Console.
From theToolsmenu, clickNuGet Package Manager>Package Manager Console.
In the Package Manager Console window, enable Code First Migrations:Enable-Migrations
In the Package Manager Console window, enable Code First Migrations:
Enable-Migrations
Enable-Migrations
Add a migration:Add-Migration AddProperty
Add a migration:
Add-Migration AddProperty
Add-Migration AddProperty
Update the local database:Update-Database
Update the local database:
Update-Database
Update-Database
TypeCtrl+F5to run the app. Test the edit, details, and create links.
TypeCtrl+F5to run the app. Test the edit, details, and create links.
Ctrl+F5
If the application loads without errors, then Code First Migrations has succeeded. However, your page still looks the same because your application logic isn't using this new property yet.
Make some changes in your code to use theDoneproperty. For simplicity in this tutorial, you're only going to change theIndexandCreateviews to see the property in action.
Done
Index
Create
OpenControllers\TodosController.cs.
OpenControllers\TodosController.cs.
Find theCreate()method on line 52 and addDoneto the list of properties in theBindattribute. When you're done, yourCreate()method signature looks like the following code:public ActionResult Create([Bind(Include = "Description,CreatedDate,Done")] Todo todo)
Find theCreate()method on line 52 and addDoneto the list of properties in theBindattribute. When you're done, yourCreate()method signature looks like the following code:
Create()
Done
Bind
Create()
public ActionResult Create([Bind(Include = "Description,CreatedDate,Done")] Todo todo)
public ActionResult Create([Bind(Include = "Description,CreatedDate,Done")] Todo todo)
OpenViews\Todos\Create.cshtml.
OpenViews\Todos\Create.cshtml.
In the Razor code, you should see a<div class="form-group">element that usesmodel.Description, and then another<div class="form-group">element that usesmodel.CreatedDate. Immediately following these two elements, add another<div class="form-group">element that usesmodel.Done:<div class="form-group">
    @Html.LabelFor(model => model.Done, htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-10">
        <div class="checkbox">
            @Html.EditorFor(model => model.Done)
            @Html.ValidationMessageFor(model => model.Done, "", new { @class = "text-danger" })
        </div>
    </div>
</div>
In the Razor code, you should see a<div class="form-group">element that usesmodel.Description, and then another<div class="form-group">element that usesmodel.CreatedDate. Immediately following these two elements, add another<div class="form-group">element that usesmodel.Done:
<div class="form-group">
model.Description
<div class="form-group">
model.CreatedDate
<div class="form-group">
model.Done
<div class="form-group">
    @Html.LabelFor(model => model.Done, htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-10">
        <div class="checkbox">
            @Html.EditorFor(model => model.Done)
            @Html.ValidationMessageFor(model => model.Done, "", new { @class = "text-danger" })
        </div>
    </div>
</div>
<div class="form-group">
    @Html.LabelFor(model => model.Done, htmlAttributes: new { @class = "control-label col-md-2" })
    <div class="col-md-10">
        <div class="checkbox">
            @Html.EditorFor(model => model.Done)
            @Html.ValidationMessageFor(model => model.Done, "", new { @class = "text-danger" })
        </div>
    </div>
</div>
OpenViews\Todos\Index.cshtml.
OpenViews\Todos\Index.cshtml.
Search for the empty<th></th>element. Just above this element, add the following Razor code:<th>
    @Html.DisplayNameFor(model => model.Done)
</th>
Search for the empty<th></th>element. Just above this element, add the following Razor code:
<th></th>
<th>
    @Html.DisplayNameFor(model => model.Done)
</th>
<th>
    @Html.DisplayNameFor(model => model.Done)
</th>
Find the<td>element that contains theHtml.ActionLink()helper methods.Abovethis<td>, add another<td>element with the following Razor code:<td>
    @Html.DisplayFor(modelItem => item.Done)
</td>That's all you need to see the changes in theIndexandCreateviews.
Find the<td>element that contains theHtml.ActionLink()helper methods.Abovethis<td>, add another<td>element with the following Razor code:
<td>
Html.ActionLink()
<td>
<td>
<td>
    @Html.DisplayFor(modelItem => item.Done)
</td>
<td>
    @Html.DisplayFor(modelItem => item.Done)
</td>
That's all you need to see the changes in theIndexandCreateviews.
Index
Create
TypeCtrl+F5to run the app.
TypeCtrl+F5to run the app.
Ctrl+F5
You can now add a to-do item and checkDone. Then it should show up in your homepage as a completed item. Remember that theEditview doesn't show theDonefield, because you didn't change theEditview.
Edit
Done
Edit
Now that your code change works, including database migration, you publish it to your Azure app and update your SQL Database with Code First Migrations too.
Just like before, right-click your project and selectPublish.
Just like before, right-click your project and selectPublish.
ClickMore actions>Editto open the publish settings.
ClickMore actions>Editto open the publish settings.

In theMyDatabaseContextdropdown, select the database connection for your Azure SQL Database.
In theMyDatabaseContextdropdown, select the database connection for your Azure SQL Database.
SelectExecute Code First Migrations (runs on application start), then clickSave.
SelectExecute Code First Migrations (runs on application start), then clickSave.

Now that you enabled Code First Migrations in your Azure app, publish your code changes.
In the publish page, clickPublish.
In the publish page, clickPublish.
Try adding to-do items again and selectDone, and they should show up in your homepage as a completed item.
Try adding to-do items again and selectDone, and they should show up in your homepage as a completed item.

All your existing to-do items are still displayed. When you republish your ASP.NET application, existing data in your SQL Database isn't lost. Also, Code First Migrations only changes the data schema and leaves your existing data intact.
Stream application logs
You can stream tracing messages directly from your Azure app to Visual Studio.
OpenControllers\TodosController.cs.
Each action starts with aTrace.WriteLine()method. This code is added to show you how to add trace messages to your Azure app.
Trace.WriteLine()
In the publish page, scroll down to theHostingsection.
In the publish page, scroll down to theHostingsection.
At the right-hand corner, click...>View Streaming Logs.The logs are now streamed into theOutputwindow.However, you don't see any of the trace messages yet. That's because when you first selectView Streaming Logs, your Azure app sets the trace level toError, which only logs error events (with theTrace.TraceError()method).
At the right-hand corner, click...>View Streaming Logs.

The logs are now streamed into theOutputwindow.

However, you don't see any of the trace messages yet. That's because when you first selectView Streaming Logs, your Azure app sets the trace level toError, which only logs error events (with theTrace.TraceError()method).
Error
Trace.TraceError()
To change the trace levels to output other trace messages, go back to the publish page.
To change the trace levels to output other trace messages, go back to the publish page.
In theHostingsection, click...>Open in Azure portal.
In theHostingsection, click...>Open in Azure portal.
In the portal management page for your app, from the left menu, selectApp Service logs.
In the portal management page for your app, from the left menu, selectApp Service logs.
UnderApplication Logging (File System), selectVerboseinLevel. ClickSave.TipYou can experiment with different trace levels to see what types of messages are displayed for each level. For example, theInformationlevel includes all logs created byTrace.TraceInformation(),Trace.TraceWarning(), andTrace.TraceError(), but not logs created byTrace.WriteLine().
UnderApplication Logging (File System), selectVerboseinLevel. ClickSave.
Tip
You can experiment with different trace levels to see what types of messages are displayed for each level. For example, theInformationlevel includes all logs created byTrace.TraceInformation(),Trace.TraceWarning(), andTrace.TraceError(), but not logs created byTrace.WriteLine().
Trace.TraceInformation()
Trace.TraceWarning()
Trace.TraceError()
Trace.WriteLine()
In your browser, navigate to your app again athttp://<your app name>.azurewebsites.net, then try clicking around the to-do list application in Azure. The trace messages are now streamed to theOutputwindow in Visual Studio.Application: 2017-04-06T23:30:41  PID[8132] Verbose     GET /Todos/Index
Application: 2017-04-06T23:30:43  PID[8132] Verbose     GET /Todos/Create
Application: 2017-04-06T23:30:53  PID[8132] Verbose     POST /Todos/Create
Application: 2017-04-06T23:30:54  PID[8132] Verbose     GET /Todos/Index
In your browser, navigate to your app again athttp://<your app name>.azurewebsites.net, then try clicking around the to-do list application in Azure. The trace messages are now streamed to theOutputwindow in Visual Studio.
Application: 2017-04-06T23:30:41  PID[8132] Verbose     GET /Todos/Index
Application: 2017-04-06T23:30:43  PID[8132] Verbose     GET /Todos/Create
Application: 2017-04-06T23:30:53  PID[8132] Verbose     POST /Todos/Create
Application: 2017-04-06T23:30:54  PID[8132] Verbose     GET /Todos/Index
Application: 2017-04-06T23:30:41  PID[8132] Verbose     GET /Todos/Index
Application: 2017-04-06T23:30:43  PID[8132] Verbose     GET /Todos/Create
Application: 2017-04-06T23:30:53  PID[8132] Verbose     POST /Todos/Create
Application: 2017-04-06T23:30:54  PID[8132] Verbose     GET /Todos/Index
To stop the log-streaming service, click theStop monitoringbutton in theOutputwindow.

Clean up resources
In the preceding steps, you created Azure resources in a resource group. If you don't expect to need these resources in the future, you can delete them by deleting the resource group.
From your web app'sOverviewpage in the Azure portal, select themyResourceGrouplink underResource group.
On the resource group page, make sure that the listed resources are the ones you want to delete.
SelectDelete resource group, typemyResourceGroupin the text box, and then selectDelete.
Confirm again by selectingDelete.
Next steps
In this tutorial, you learned how to:
Create a database in Azure SQL Database
Connect an ASP.NET app to SQL Database
Deploy the app to Azure
Update the data model and redeploy the app
Stream logs from Azure to your terminal
Advance to the next tutorial to learn how to easily improve the security of your connection Azure SQL Database.
Tutorial: Connect to SQL Database from App Service without secrets using a managed identity
More resources:
Configure ASP.NET app
Want to optimize and save on your cloud spending?
Start analyzing costs with Cost Management
Feedback
Was this page helpful?
Additional resources