Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Connect to an app instance for troubleshooting
Article
2025-02-26
2 contributors
In this article
Note
TheBasic,Standard, andEnterpriseplans entered a retirement period on March 17, 2025. For more information, see theAzure Spring Apps retirement announcement.
TheStandard consumption and dedicatedplan entered a retirement period on September 30, 2024, with a complete shutdown by the end of March 2025. For more information, seeMigrate Azure Spring Apps Standard consumption and dedicated plan to Azure Container Apps.
This article applies to:â Basic/Standard â Enterprise
This article describes how to access the shell environment inside your application instances to do advanced troubleshooting.
Although Azure Spring Apps offers various managed troubleshooting approaches, you may want to do advanced troubleshooting using the shell environment. For example, you may want to accomplish the following troubleshooting tasks:
Directly use Java Development Kit (JDK) tools.
Diagnose against an app's back-end services for network connection and API call latency for both virtual-network and non-virtual-network instances.
Diagnose storage capacity, performance, and CPU/memory issues.
Prerequisites
Azure CLIwith the Azure Spring Apps extension. Use the following command to remove previous versions and install the latest extension. If you previously installed thespring-cloudextension, uninstall it to avoid configuration and version mismatches.az extension remove --name spring
az extension add --name spring
az extension remove --name spring-cloud
Azure CLIwith the Azure Spring Apps extension. Use the following command to remove previous versions and install the latest extension. If you previously installed thespring-cloudextension, uninstall it to avoid configuration and version mismatches.
spring-cloud
az extension remove --name spring
az extension add --name spring
az extension remove --name spring-cloud
az extension remove --name spring
az extension add --name spring
az extension remove --name spring-cloud
A deployed application in Azure Spring Apps.
A deployed application in Azure Spring Apps.
If you've deployed a custom container, a shell program. The default is/bin/sh.
If you've deployed a custom container, a shell program. The default is/bin/sh.
/bin/sh
Assign an Azure role
Before connecting to an app instance, you must be granted the roleAzure Spring Apps Connect Role. Connecting to an app instance requires the data action permissionMicrosoft.AppPlatform/Spring/apps/deployments/connect/action.
Microsoft.AppPlatform/Spring/apps/deployments/connect/action
You can assign an Azure role using the Azure portal or Azure CLI.
Azure portal
Azure CLI
Use the following steps to assign an Azure role using the Azure portal.
Open theAzure portal.
Open theAzure portal.
Open your existing Azure Spring Apps service instance.
Open your existing Azure Spring Apps service instance.
SelectAccess Control (IAM)from the left menu.
SelectAccess Control (IAM)from the left menu.
SelectAddin the command bar, and then selectAdd role assignment.
SelectAddin the command bar, and then selectAdd role assignment.

Search forAzure Spring Apps Connect Rolein the list, and then selectNext.
Search forAzure Spring Apps Connect Rolein the list, and then selectNext.

SelectSelect members, and then search for your username.
SelectSelect members, and then search for your username.
SelectReview + assign.
SelectReview + assign.
Use the following command to assign theAzure Spring Apps Connect Rolerole using the Azure CLI:
az role assignment create \
    --role 'Azure Spring Apps Connect Role' \
    --scope '<service-instance-resource-id>' \
    --assignee '<your-identity>'
az role assignment create \
    --role 'Azure Spring Apps Connect Role' \
    --scope '<service-instance-resource-id>' \
    --assignee '<your-identity>'
Note
The role assignment may take several minutes.
Connect to an app instance
You can connect to an app instance using the Azure portal or Azure CLI.
Azure portal
Azure CLI
Use the following steps to connect to an app instance using the Azure portal.
Open theAzure portal.
Open theAzure portal.
Open your existing Azure Spring Apps service instance.
Open your existing Azure Spring Apps service instance.
SelectAppsfrom left the menu, then select one of your apps.
SelectAppsfrom left the menu, then select one of your apps.
SelectConsolefrom the left menu.
SelectConsolefrom the left menu.
Select an application instance.
Select an application instance.

Select or input a shell to run in the container.
Select or input a shell to run in the container.

SelectConnect.
SelectConnect.

If your app contains only one instance, use the following command to connect to the instance using the Azure CLI:
az spring app connect \
    --service <your-service-instance> \
    --resource-group <your-resource-group> \
    --name <app-name>
az spring app connect \
    --service <your-service-instance> \
    --resource-group <your-resource-group> \
    --name <app-name>
Otherwise, use the following command to specify the instance:
az spring app connect \
    --service <your-service-instance> \
    --resource-group <your-resource-group> \
    --name <app-name> \
    --instance <instance_name>
az spring app connect \
    --service <your-service-instance> \
    --resource-group <your-resource-group> \
    --name <app-name> \
    --instance <instance_name>
Use the following command to specify another deployment of the app:
az spring app connect \
    --service <your-service-instance> \
    --resource-group <your-resource-group> \
    --name <app-name> \
    --deployment green
az spring app connect \
    --service <your-service-instance> \
    --resource-group <your-resource-group> \
    --name <app-name> \
    --deployment green
By default, Azure Spring Apps launches the app instance with/bin/shbundled in the base image of the container. Use the following command to switch to another bundled shell such as/bin/bash:
/bin/sh
/bin/bash
az spring app connect \
    --service <your-service-instance> \
    --resource-group <your-resource-group> \
    --name <app-name> \
    --shell-cmd /bin/bash
az spring app connect \
    --service <your-service-instance> \
    --resource-group <your-resource-group> \
    --name <app-name> \
    --shell-cmd /bin/bash
If your app is deployed with a custom image and shell, you can also use the--shell-cmdparameter to specify your shell.
--shell-cmd
Troubleshoot your app instance
After you connect to an app instance, you can check the status of the heap memory.
Use the following command to find the Java process ID, which is usually1:
1
jps
jps
The output should look like the following example:

Then use the following command to run the JDK tool to check the result:
jstat -gc 1
jstat -gc 1
The output should look like the following example:

Disconnect from your app instance
When you're done troubleshooting, use theexitcommand to disconnect from the app instance, or pressCtrl+d.
exit
Troubleshooting tools
The following list describes some of the pre-installed tools that you can use for troubleshooting:
lsof- Lists open files.
lsof
top- Displays system summary information and current utilization.
top
ps- Gets a snapshot of the running process.
ps
netstat- Prints network connections and interface statistics.
netstat
nslookup- Queries internet name servers interactively.
nslookup
ping- Tests whether a network host can be reached.
ping
nc- Reads from and writes to network connections using TCP or UDP.
nc
wget- Lets you download files and interact with REST APIs.
wget
df- Displays the amount of available disk space.
df
You can also use JDK-bundled tools such asjps,jcmd, andjstat.
jps
jcmd
jstat
The following list shows the tools available, which depend on your service plan and type of app deployment:
Source Code, JAR, and artifacts deployment:Basic, Standard, and Standard Consumption & Dedicated Plan:Common tools - YesJDK tools - Yes, for Java workloads only.Enterprise Plan:Common tools - Depends on which OS Stack you've chosen in yourbuilder. Yes, for full OS Stack. No, for base OS Stack.JDK tools - Yes, for Java workloads only.
Basic, Standard, and Standard Consumption & Dedicated Plan:Common tools - YesJDK tools - Yes, for Java workloads only.
Common tools - Yes
JDK tools - Yes, for Java workloads only.
Enterprise Plan:Common tools - Depends on which OS Stack you've chosen in yourbuilder. Yes, for full OS Stack. No, for base OS Stack.JDK tools - Yes, for Java workloads only.
Common tools - Depends on which OS Stack you've chosen in yourbuilder. Yes, for full OS Stack. No, for base OS Stack.
JDK tools - Yes, for Java workloads only.
Custom image deployment: Depends on the installed tool set in your image.
Note
JDK tools aren't included in the path for the source code deployment type. Runexport PATH="$PATH:/layers/tanzu-buildpacks_microsoft-openjdk/jdk/bin"before running any JDK commands.
export PATH="$PATH:/layers/tanzu-buildpacks_microsoft-openjdk/jdk/bin"
Limitations
Using the shell environment inside your application instances has the following limitations:
Because the app is running as a non-root user, you can't execute some actions requiring root permission. For example, you can't install new tools by using the system package managerapt / yum.
Because the app is running as a non-root user, you can't execute some actions requiring root permission. For example, you can't install new tools by using the system package managerapt / yum.
apt / yum
Because some Linux capabilities are prohibited, tools that require special privileges, such astcpdump, don't work.
Because some Linux capabilities are prohibited, tools that require special privileges, such astcpdump, don't work.
tcpdump
Next steps
Self-diagnose and solve problems in Azure Spring Apps
Feedback
Was this page helpful?
Additional resources