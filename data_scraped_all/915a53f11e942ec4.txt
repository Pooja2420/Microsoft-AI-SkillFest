Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Use Spring Data with Azure Cosmos DB for MongoDB API
Article
2024-08-28
14 contributors
In this article
This article demonstrates creating a sample application that usesSpring Datato store and retrieve information usingAzure Cosmos DB for MongoDB.
Prerequisites
An Azure subscription -create one for free.
An Azure subscription -create one for free.
Java Development Kit (JDK), version 8 or higher.
Java Development Kit (JDK), version 8 or higher.
Apache Maven.
Apache Maven.
Azure CLI.
Azure CLI.
AGitclient.
Create an Azure Cosmos DB account
Create an Azure Cosmos DB account using the Azure portal
Note
You can read more detailed information about creating accounts in theAzure Cosmos DB documentation.
Browse to the Azure portal athttps://portal.azure.com/and sign in.
Browse to the Azure portal athttps://portal.azure.com/and sign in.
SelectCreate a resource, thenDatabases, thenAzure Cosmos DB.
SelectCreate a resource, thenDatabases, thenAzure Cosmos DB.
On theSelect API optionscreen, selectAzure Cosmos DB for MongoDB.
On theSelect API optionscreen, selectAzure Cosmos DB for MongoDB.

Specify the following information:Subscription: Specify your Azure subscription to use.Resource group: Specify whether to create a new resource group, or choose an existing resource group.Account name: Choose a unique name for your Azure Cosmos DB account; this will be used to create a fully-qualified domain name likewingtiptoysmongodb.documents.azure.com.API: SpecifyAzure Cosmos DB for MongoDB APIfor this tutorial.Location: Specify the closest geographic region for your database.
Specify the following information:
Subscription: Specify your Azure subscription to use.
Resource group: Specify whether to create a new resource group, or choose an existing resource group.
Account name: Choose a unique name for your Azure Cosmos DB account; this will be used to create a fully-qualified domain name likewingtiptoysmongodb.documents.azure.com.
API: SpecifyAzure Cosmos DB for MongoDB APIfor this tutorial.
Azure Cosmos DB for MongoDB API
Location: Specify the closest geographic region for your database.
When you've entered all of the above information, clickReview + create.
When you've entered all of the above information, clickReview + create.
If everything looks correct on the review page, clickCreate.
If everything looks correct on the review page, clickCreate.

Retrieve the connection string for your Azure Cosmos DB account
Browse to the Azure portal athttps://portal.azure.com/and sign in.
Browse to the Azure portal athttps://portal.azure.com/and sign in.
ClickAll Resources, then click the Azure Cosmos DB account you just created.
ClickAll Resources, then click the Azure Cosmos DB account you just created.
ClickConnection strings, and copy the value for thePrimary Connection Stringfield; you'll use that value to configure your application later.
ClickConnection strings, and copy the value for thePrimary Connection Stringfield; you'll use that value to configure your application later.

Configure the sample application
Open a command shell and clone the sample project using a git command like the following example:git clone https://github.com/spring-guides/gs-accessing-data-mongodb.git
Open a command shell and clone the sample project using a git command like the following example:
git clone https://github.com/spring-guides/gs-accessing-data-mongodb.git
git clone https://github.com/spring-guides/gs-accessing-data-mongodb.git
Create aresourcesdirectory in the<project root>/complete/src/maindirectory of the sample project, and create anapplication.propertiesfile in theresourcesdirectory.
Create aresourcesdirectory in the<project root>/complete/src/maindirectory of the sample project, and create anapplication.propertiesfile in theresourcesdirectory.
Open theapplication.propertiesfile in a text editor, and add the following lines in the file, and replace the sample values with the appropriate values from earlier:spring.data.mongodb.database=wingtiptoysmongodb
spring.data.mongodb.uri=mongodb://wingtiptoysmongodb:AbCdEfGhIjKlMnOpQrStUvWxYz==@wingtiptoysmongodb.documents.azure.com:10255/?ssl=true&replicaSet=globaldbWhere:ParameterDescriptionspring.data.mongodb.databaseSpecifies the name of your Azure Cosmos DB account from earlier in this article.spring.data.mongodb.uriSpecifies thePrimary Connection Stringfrom earlier in this article.
Open theapplication.propertiesfile in a text editor, and add the following lines in the file, and replace the sample values with the appropriate values from earlier:
spring.data.mongodb.database=wingtiptoysmongodb
spring.data.mongodb.uri=mongodb://wingtiptoysmongodb:AbCdEfGhIjKlMnOpQrStUvWxYz==@wingtiptoysmongodb.documents.azure.com:10255/?ssl=true&replicaSet=globaldb
spring.data.mongodb.database=wingtiptoysmongodb
spring.data.mongodb.uri=mongodb://wingtiptoysmongodb:AbCdEfGhIjKlMnOpQrStUvWxYz==@wingtiptoysmongodb.documents.azure.com:10255/?ssl=true&replicaSet=globaldb
Where:
spring.data.mongodb.database
spring.data.mongodb.uri
Save and close theapplication.propertiesfile.
Save and close theapplication.propertiesfile.
Package and test the sample application
To build the application, browse to the directory/gs-accessing-data-mongodb/complete, which contains thepom.xmlfile.
Build the sample application with Maven, and configure Maven to skip tests; for example:mvn clean package -DskipTests
Build the sample application with Maven, and configure Maven to skip tests; for example:
mvn clean package -DskipTests
mvn clean package -DskipTests
Start the sample application; for example:java -jar target/accessing-data-mongodb-complete-0.0.1-SNAPSHOT.jarYour application should return values like the following:Customers found with findAll():
-------------------------------
Customer[id=5c1b4ae4d0b5080ac105cc13, firstName='Alice', lastName='Smith']
Customer[id=5c1b4ae4d0b5080ac105cc14, firstName='Bob', lastName='Smith']

Customer found with findByFirstName('Alice'):
--------------------------------
Customer[id=5c1b4ae4d0b5080ac105cc13, firstName='Alice', lastName='Smith']
Customers found with findByLastName('Smith'):
--------------------------------
Customer[id=5c1b4ae4d0b5080ac105cc13, firstName='Alice', lastName='Smith']
Customer[id=5c1b4ae4d0b5080ac105cc14, firstName='Bob', lastName='Smith']
Start the sample application; for example:
java -jar target/accessing-data-mongodb-complete-0.0.1-SNAPSHOT.jar
java -jar target/accessing-data-mongodb-complete-0.0.1-SNAPSHOT.jar
Your application should return values like the following:
Customers found with findAll():
-------------------------------
Customer[id=5c1b4ae4d0b5080ac105cc13, firstName='Alice', lastName='Smith']
Customer[id=5c1b4ae4d0b5080ac105cc14, firstName='Bob', lastName='Smith']

Customer found with findByFirstName('Alice'):
--------------------------------
Customer[id=5c1b4ae4d0b5080ac105cc13, firstName='Alice', lastName='Smith']
Customers found with findByLastName('Smith'):
--------------------------------
Customer[id=5c1b4ae4d0b5080ac105cc13, firstName='Alice', lastName='Smith']
Customer[id=5c1b4ae4d0b5080ac105cc14, firstName='Bob', lastName='Smith']
Customers found with findAll():
-------------------------------
Customer[id=5c1b4ae4d0b5080ac105cc13, firstName='Alice', lastName='Smith']
Customer[id=5c1b4ae4d0b5080ac105cc14, firstName='Bob', lastName='Smith']

Customer found with findByFirstName('Alice'):
--------------------------------
Customer[id=5c1b4ae4d0b5080ac105cc13, firstName='Alice', lastName='Smith']
Customers found with findByLastName('Smith'):
--------------------------------
Customer[id=5c1b4ae4d0b5080ac105cc13, firstName='Alice', lastName='Smith']
Customer[id=5c1b4ae4d0b5080ac105cc14, firstName='Bob', lastName='Smith']
Summary
In this tutorial, you created a sample Java application that uses Spring Data to store and retrieve information using Azure Cosmos DB for MongoDB.
Clean up resources
When no longer needed, use theAzure portalto delete the resources created in this article to avoid unexpected charges.
Next steps
To learn more about Spring and Azure, continue to the Spring on Azure documentation center.
Spring on Azure
See also
For more information about using Azure with Java, see theAzure for Java Developersand theWorking with Azure DevOps and Java.
Feedback
Was this page helpful?
Additional resources