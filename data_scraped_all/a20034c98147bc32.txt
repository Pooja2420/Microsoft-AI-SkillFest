Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Access Config Server and Service Registry
Article
2025-01-30
5 contributors
In this article
Note
TheBasic,Standard, andEnterpriseplans entered a retirement period on March 17, 2025. For more information, see theAzure Spring Apps retirement announcement.
TheStandard consumption and dedicatedplan entered a retirement period on September 30, 2024, with a complete shutdown by the end of March 2025. For more information, seeMigrate Azure Spring Apps Standard consumption and dedicated plan to Azure Container Apps.
This article applies to:â Basic/Standard â Enterprise
This article explains how to access the Spring Cloud Config Server and Spring Cloud Service Registry managed by Azure Spring Apps using Microsoft Entra role-based access control (RBAC).
Note
Applications deployed and running inside the Azure Spring Apps service are automatically wired up with certificate-based authentication and authorization when accessing the managed Spring Cloud Config Server and Service Registry. You don't need to follow this guidance for these applications. The related certificates are fully managed by the Azure Spring Apps platform, and are automatically injected in your application when connected to Config Server and Service Registry.

Assign role to Microsoft Entra user/group, MSI, or service principal
Assign the role to the [user | group | service-principal | managed-identity] at [management-group | subscription | resource-group | resource] scope.
For detailed steps, seeAssign Azure roles using the Azure portal.
Access Config Server and Service Registry Endpoints
After the role is assigned, the assignee can access the Spring Cloud Config Server and the Spring Cloud Service Registry endpoints using the following procedures:
Get an access token. After a Microsoft Entra user is assigned the role, they can use the following commands to sign in to Azure CLI with user, service principal, or managed identity to get an access token. For details, seeAuthenticate Azure CLI.az login
az account get-access-token
Get an access token. After a Microsoft Entra user is assigned the role, they can use the following commands to sign in to Azure CLI with user, service principal, or managed identity to get an access token. For details, seeAuthenticate Azure CLI.
az login
az account get-access-token
az login
az account get-access-token
Compose the endpoint. We support the default endpoints of the Spring Cloud Config Server and Spring Cloud Service Registry managed by Azure Spring Apps.https://SERVICE_NAME.svc.azuremicroservices.io/eureka/<path>https://SERVICE_NAME.svc.azuremicroservices.io/config/<path>NoteIf you're using Microsoft Azure operated by 21Vianet, replace*.azuremicroservices.iowith*.microservices.azure.cn. For more information, see the sectionCheck endpoints in Azurein theMicrosoft Azure operated by 21Vianet developer guide.
Compose the endpoint. We support the default endpoints of the Spring Cloud Config Server and Spring Cloud Service Registry managed by Azure Spring Apps.
https://SERVICE_NAME.svc.azuremicroservices.io/eureka/<path>
https://SERVICE_NAME.svc.azuremicroservices.io/eureka/<path>
https://SERVICE_NAME.svc.azuremicroservices.io/config/<path>
https://SERVICE_NAME.svc.azuremicroservices.io/config/<path>
Note
If you're using Microsoft Azure operated by 21Vianet, replace*.azuremicroservices.iowith*.microservices.azure.cn. For more information, see the sectionCheck endpoints in Azurein theMicrosoft Azure operated by 21Vianet developer guide.
*.azuremicroservices.io
*.microservices.azure.cn
Access the composed endpoint with the access token. Put the access token in a header to provide authorization:--header 'Authorization: Bearer {TOKEN_FROM_PREVIOUS_STEP}'.For example:a. Access an endpoint likehttps://SERVICE_NAME.svc.azuremicroservices.io/config/actuator/healthto see the health status of Config Server.b. Access an endpoint likehttps://SERVICE_NAME.svc.azuremicroservices.io/eureka/eureka/appsto see the registered apps in Spring Cloud Service Registry (Eureka here).If the response is401 Unauthorized, check to see if the role is successfully assigned. It will take several minutes for the role to take effect or to verify that the access token has not expired.
Access the composed endpoint with the access token. Put the access token in a header to provide authorization:--header 'Authorization: Bearer {TOKEN_FROM_PREVIOUS_STEP}'.
--header 'Authorization: Bearer {TOKEN_FROM_PREVIOUS_STEP}'
For example:
a. Access an endpoint likehttps://SERVICE_NAME.svc.azuremicroservices.io/config/actuator/healthto see the health status of Config Server.
https://SERVICE_NAME.svc.azuremicroservices.io/config/actuator/health
b. Access an endpoint likehttps://SERVICE_NAME.svc.azuremicroservices.io/eureka/eureka/appsto see the registered apps in Spring Cloud Service Registry (Eureka here).
https://SERVICE_NAME.svc.azuremicroservices.io/eureka/eureka/apps
If the response is401 Unauthorized, check to see if the role is successfully assigned. It will take several minutes for the role to take effect or to verify that the access token has not expired.
401 Unauthorized
For more information about actuator endpoint, seeProduction ready endpoints.
For Eureka endpoints, seeEureka-REST-operations
For config server endpoints and detailed path information, seeResourceController.javaandEncryptionController.java.
Register Spring Boot apps to Spring Cloud Config Server and Service Registry managed by Azure Spring Apps
After the role is assigned, you can register Spring Boot apps to Spring Cloud Config Server and Service Registry managed by Azure Spring Apps with Microsoft Entra token authentication. Both Config Server and Service Registry supportcustom REST templateto inject the bearer token for authentication.
For more information, see the samplesAccess Azure Spring Apps managed Config ServerandAccess Azure Spring Apps managed Service Registry. The following sections explain some important details in these samples.
InAccessTokenManager.java:
AccessTokenManageris responsible for getting an access token from Microsoft Entra ID. Configure the service principal's sign-in information in theapplication.propertiesfile and initializeApplicationTokenCredentialsto get the token. You can find this file in both samples.
AccessTokenManager
ApplicationTokenCredentials
prop.load(in);
tokenClientId = prop.getProperty("access.token.clientId");
String tenantId = prop.getProperty("access.token.tenantId");
String secret = prop.getProperty("access.token.secret");
String clientId = prop.getProperty("access.token.clientId");
credentials = new ApplicationTokenCredentials(
    clientId, tenantId, secret, AzureEnvironment.AZURE);
prop.load(in);
tokenClientId = prop.getProperty("access.token.clientId");
String tenantId = prop.getProperty("access.token.tenantId");
String secret = prop.getProperty("access.token.secret");
String clientId = prop.getProperty("access.token.clientId");
credentials = new ApplicationTokenCredentials(
    clientId, tenantId, secret, AzureEnvironment.AZURE);
InCustomConfigServiceBootstrapConfiguration.java:
CustomConfigServiceBootstrapConfigurationimplements the custom REST template for Config Server and injects the token from Microsoft Entra ID asAuthorizationheaders. You can find this file in theConfig Server sample.
CustomConfigServiceBootstrapConfiguration
Authorization
public class RequestResponseHandlerInterceptor implements ClientHttpRequestInterceptor {

    @Override
    public ClientHttpResponse intercept(HttpRequest request, byte[] body, ClientHttpRequestExecution execution) throws IOException {
        String accessToken = AccessTokenManager.getToken();
        request.getHeaders().remove(AUTHORIZATION);
        request.getHeaders().add(AUTHORIZATION, "Bearer " + accessToken);

        ClientHttpResponse response = execution.execute(request, body);
        return response;
    }

}
public class RequestResponseHandlerInterceptor implements ClientHttpRequestInterceptor {

    @Override
    public ClientHttpResponse intercept(HttpRequest request, byte[] body, ClientHttpRequestExecution execution) throws IOException {
        String accessToken = AccessTokenManager.getToken();
        request.getHeaders().remove(AUTHORIZATION);
        request.getHeaders().add(AUTHORIZATION, "Bearer " + accessToken);

        ClientHttpResponse response = execution.execute(request, body);
        return response;
    }

}
InCustomRestTemplateTransportClientFactories.java:
The previous two classes are for the implementation of the custom REST template for Spring Cloud Service Registry. Theinterceptpart is the same as in the Config Server above. Be sure to addfactory.mappingJacksonHttpMessageConverter()to the message converters. You can find this file in theSpring Cloud Service Registry sample.
intercept
factory.mappingJacksonHttpMessageConverter()
private RestTemplate customRestTemplate() {
    /*
     * Inject your custom rest template
     */
    RestTemplate restTemplate = new RestTemplate();
    restTemplate.getInterceptors()
        .add(new RequestResponseHandlerInterceptor());
    RestTemplateTransportClientFactory factory = new RestTemplateTransportClientFactory();

    restTemplate.getMessageConverters().add(0, factory.mappingJacksonHttpMessageConverter());

    return restTemplate;
}
private RestTemplate customRestTemplate() {
    /*
     * Inject your custom rest template
     */
    RestTemplate restTemplate = new RestTemplate();
    restTemplate.getInterceptors()
        .add(new RequestResponseHandlerInterceptor());
    RestTemplateTransportClientFactory factory = new RestTemplateTransportClientFactory();

    restTemplate.getMessageConverters().add(0, factory.mappingJacksonHttpMessageConverter());

    return restTemplate;
}
If you're running applications on a Kubernetes cluster, we recommend that you use an IP address to register Spring Cloud Service Registry for access.
eureka.instance.prefer-ip-address=true
eureka.instance.prefer-ip-address=true
Next steps
Authenticate Azure CLI
Production ready endpoints
Create roles and permissions
Feedback
Was this page helpful?
Additional resources