Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Tutorial: Connect virtual networks with virtual network peering
Article
2024-11-20
1 contributor
In this article
You can connect virtual networks to each other with virtual network peering. These virtual networks can be in the same region or different regions (also known as global virtual network peering). Once virtual networks are peered, resources in both virtual networks can communicate with each other over a low-latency, high-bandwidth connection using Microsoft backbone network.

In this tutorial, you learn how to:
Create virtual networks
Connect two virtual networks with a virtual network peering
Deploy a virtual machine (VM) into each virtual network
Communicate between VMs
Prerequisites
Portal
PowerShell
CLI
An Azure account with an active subscription. You cancreate an account for free.
An Azure account with an active subscription. You cancreate an account for free.
Azure Cloud Shell
Azure hosts Azure Cloud Shell, an interactive shell environment that you can use through your browser. You can use either Bash or PowerShell with Cloud Shell to work with Azure services. You can use the Cloud Shell preinstalled commands to run the code in this article, without having to install anything on your local environment.
To start Azure Cloud Shell:
To use Azure Cloud Shell:
Start Cloud Shell.
Start Cloud Shell.
Select theCopybutton on a code block (or command block) to copy the code or command.
Select theCopybutton on a code block (or command block) to copy the code or command.
Paste the code or command into the Cloud Shell session by selectingCtrl+Shift+Von Windows and Linux, or by selectingCmd+Shift+Von macOS.
Paste the code or command into the Cloud Shell session by selectingCtrl+Shift+Von Windows and Linux, or by selectingCmd+Shift+Von macOS.
SelectEnterto run the code or command.
SelectEnterto run the code or command.
If you choose to install and use PowerShell locally, this article requires the Azure PowerShell module version 1.0.0 or later. RunGet-Module -ListAvailable Azto find the installed version. If you need to upgrade, seeInstall Azure PowerShell module. If you're running PowerShell locally, you also need to runConnect-AzAccountto create a connection with Azure.
Get-Module -ListAvailable Az
Connect-AzAccount
If you don't have anAzure subscription, create anAzure free accountbefore you begin.
Use the Bash environment inAzure Cloud Shell. For more information, seeGet started with Azure Cloud Shell.
Use the Bash environment inAzure Cloud Shell. For more information, seeGet started with Azure Cloud Shell.

If you prefer to run CLI reference commands locally,installthe Azure CLI. If you're running on Windows or macOS, consider running Azure CLI in a Docker container. For more information, seeHow to run the Azure CLI in a Docker container.If you're using a local installation, sign in to the Azure CLI by using theaz logincommand. To finish the authentication process, follow the steps displayed in your terminal. For other sign-in options, seeAuthenticate to Azure using Azure CLI.When you're prompted, install the Azure CLI extension on first use. For more information about extensions, seeUse and manage extensions with the Azure CLI.Runaz versionto find the version and dependent libraries that are installed. To upgrade to the latest version, runaz upgrade.
If you prefer to run CLI reference commands locally,installthe Azure CLI. If you're running on Windows or macOS, consider running Azure CLI in a Docker container. For more information, seeHow to run the Azure CLI in a Docker container.
If you're using a local installation, sign in to the Azure CLI by using theaz logincommand. To finish the authentication process, follow the steps displayed in your terminal. For other sign-in options, seeAuthenticate to Azure using Azure CLI.
If you're using a local installation, sign in to the Azure CLI by using theaz logincommand. To finish the authentication process, follow the steps displayed in your terminal. For other sign-in options, seeAuthenticate to Azure using Azure CLI.
When you're prompted, install the Azure CLI extension on first use. For more information about extensions, seeUse and manage extensions with the Azure CLI.
When you're prompted, install the Azure CLI extension on first use. For more information about extensions, seeUse and manage extensions with the Azure CLI.
Runaz versionto find the version and dependent libraries that are installed. To upgrade to the latest version, runaz upgrade.
Runaz versionto find the version and dependent libraries that are installed. To upgrade to the latest version, runaz upgrade.
This article requires version 2.0.28 or later of the Azure CLI. If using Azure Cloud Shell, the latest version is already installed.
Portal
PowerShell
CLI
Create a virtual network and an Azure Bastion host
The following procedure creates a virtual network with a resource subnet, an Azure Bastion subnet, and a Bastion host:
In the portal, search for and selectVirtual networks.
In the portal, search for and selectVirtual networks.
On theVirtual networkspage, select+ Create.
On theVirtual networkspage, select+ Create.
On theBasicstab ofCreate virtual network, enter, or select the following information:SettingValueProject detailsSubscriptionSelect your subscription.Resource groupSelectCreate new.Entertest-rgfor the name.SelectOK.Instance detailsNameEntervnet-1.RegionSelectEast US 2.
On theBasicstab ofCreate virtual network, enter, or select the following information:

SelectNextto proceed to theSecuritytab.
SelectNextto proceed to theSecuritytab.
In theAzure Bastionsection, selectEnable Azure Bastion.Bastion uses your browser to connect to VMs in your virtual network over Secure Shell (SSH) or Remote Desktop Protocol (RDP) by using their private IP addresses. The VMs don't need public IP addresses, client software, or special configuration. For more information, seeWhat is Azure Bastion?.NoteHourly pricing starts from the moment that Bastion is deployed, regardless of outbound data usage. For more information, seePricingandSKUs. If you're deploying Bastion as part of a tutorial or test, we recommend that you delete this resource after you finish using it.
In theAzure Bastionsection, selectEnable Azure Bastion.
Bastion uses your browser to connect to VMs in your virtual network over Secure Shell (SSH) or Remote Desktop Protocol (RDP) by using their private IP addresses. The VMs don't need public IP addresses, client software, or special configuration. For more information, seeWhat is Azure Bastion?.
Note
Hourly pricing starts from the moment that Bastion is deployed, regardless of outbound data usage. For more information, seePricingandSKUs. If you're deploying Bastion as part of a tutorial or test, we recommend that you delete this resource after you finish using it.
InAzure Bastion, enter or select the following information:SettingValueAzure Bastion host nameEnterbastion.Azure Bastion public IP addressSelectCreate a public IP address.Enterpublic-ip-bastionin Name.SelectOK.
InAzure Bastion, enter or select the following information:

SelectNextto proceed to theIP Addressestab.
SelectNextto proceed to theIP Addressestab.
In the address space box inSubnets, select thedefaultsubnet.
In the address space box inSubnets, select thedefaultsubnet.
InEdit subnet, enter or select the following information:SettingValueSubnet purposeLeave the default ofDefault.NameEntersubnet-1.IPv4IPv4 address rangeLeave the default of10.0.0.0/16.Starting addressLeave the default of10.0.0.0.SizeLeave the default of/24 (256 addresses).
InEdit subnet, enter or select the following information:

SelectSave.
SelectSave.
SelectReview + createat the bottom of the window. When validation passes, selectCreate.
SelectReview + createat the bottom of the window. When validation passes, selectCreate.
Repeat the previous steps to create a second virtual network with the following values:
Note
The second virtual network can be in the same region as the first virtual network or in a different region. You can skip theSecuritytab and the Bastion deployment for the second virtual network. After the network peer, you can connect to both virtual machines with the same Bastion deployment.
Before creating a virtual network, you have to create a resource group for the virtual network, and all other resources created in this article. Create a resource group withNew-AzResourceGroup. The following example creates a resource group namedtest-rgin theeastuslocation.
$resourceGroup = @{
    Name = "test-rg"
    Location = "EastUS2"
}
New-AzResourceGroup @resourceGroup
$resourceGroup = @{
    Name = "test-rg"
    Location = "EastUS2"
}
New-AzResourceGroup @resourceGroup
Create a virtual network withNew-AzVirtualNetwork. The following example creates a virtual network namedvnet-1with the address prefix10.0.0.0/16.
$vnet1 = @{
    ResourceGroupName = "test-rg"
    Location = "EastUS2"
    Name = "vnet-1"
    AddressPrefix = "10.0.0.0/16"
}
$virtualNetwork1 = New-AzVirtualNetwork @vnet1
$vnet1 = @{
    ResourceGroupName = "test-rg"
    Location = "EastUS2"
    Name = "vnet-1"
    AddressPrefix = "10.0.0.0/16"
}
$virtualNetwork1 = New-AzVirtualNetwork @vnet1
Create a subnet configuration withAdd-AzVirtualNetworkSubnetConfig. The following example creates a subnet configuration with a10.0.0.0/24address prefix:
$subConfig = @{
    Name = "subnet-1"
    AddressPrefix = "10.0.0.0/24"
    VirtualNetwork = $virtualNetwork1
}
$subnetConfig1 = Add-AzVirtualNetworkSubnetConfig @subConfig
$subConfig = @{
    Name = "subnet-1"
    AddressPrefix = "10.0.0.0/24"
    VirtualNetwork = $virtualNetwork1
}
$subnetConfig1 = Add-AzVirtualNetworkSubnetConfig @subConfig
Create a subnet configuration for Azure Bastion withAdd-AzVirtualNetworkSubnetConfig. The following example creates a subnet configuration with a10.0.1.0/24address prefix:
$subBConfig = @{
    Name = "AzureBastionSubnet"
    AddressPrefix = "10.0.1.0/24"
    VirtualNetwork = $virtualNetwork1
}
$subnetConfig2 = Add-AzVirtualNetworkSubnetConfig @subBConfig
$subBConfig = @{
    Name = "AzureBastionSubnet"
    AddressPrefix = "10.0.1.0/24"
    VirtualNetwork = $virtualNetwork1
}
$subnetConfig2 = Add-AzVirtualNetworkSubnetConfig @subBConfig
Write the subnet configuration to the virtual network withSet-AzVirtualNetwork, which creates the subnet:
$virtualNetwork1 | Set-AzVirtualNetwork
$virtualNetwork1 | Set-AzVirtualNetwork
Create Azure Bastion
Create a public IP address for the Azure Bastion host withNew-AzPublicIpAddress. The following example creates a public IP address namedpublic-ip-bastionin thevnet-1virtual network.
$publicIpParams = @{
    ResourceGroupName = "test-rg"
    Name = "public-ip-bastion"
    Location = "EastUS2"
    AllocationMethod = "Static"
    Sku = "Standard"
}
New-AzPublicIpAddress @publicIpParams
$publicIpParams = @{
    ResourceGroupName = "test-rg"
    Name = "public-ip-bastion"
    Location = "EastUS2"
    AllocationMethod = "Static"
    Sku = "Standard"
}
New-AzPublicIpAddress @publicIpParams
Create an Azure Bastion host withNew-AzBastion. The following example creates an Azure Bastion host namedbastionin theAzureBastionSubnetsubnet of thevnet-1virtual network. Azure Bastion is used to securely connect Azure virtual machines without exposing them to the public internet.
$bastionParams = @{
    ResourceGroupName = "test-rg"
    Name = "bastion"
    VirtualNetworkName = "vnet-1"
    PublicIpAddressName = "public-ip-bastion"
    PublicIpAddressRgName = "test-rg"
    VirtualNetworkRgName = "test-rg"
}
New-AzBastion @bastionParams -AsJob
$bastionParams = @{
    ResourceGroupName = "test-rg"
    Name = "bastion"
    VirtualNetworkName = "vnet-1"
    PublicIpAddressName = "public-ip-bastion"
    PublicIpAddressRgName = "test-rg"
    VirtualNetworkRgName = "test-rg"
}
New-AzBastion @bastionParams -AsJob
Create a second virtual network
Create a second virtual network withNew-AzVirtualNetwork. The following example creates a virtual network namedvnet-2with the address prefix10.1.0.0/16.
Note
The second virtual network can be in the same region as the first virtual network or in a different region. You don't need a Bastion deployment for the second virtual network. After the network peer, you can connect to both virtual machines with the same Bastion deployment.
$vnet2 = @{
    ResourceGroupName = "test-rg"
    Location = "EastUS2"
    Name = "vnet-2"
    AddressPrefix = "10.1.0.0/16"
}
$virtualNetwork2 = New-AzVirtualNetwork @vnet2
$vnet2 = @{
    ResourceGroupName = "test-rg"
    Location = "EastUS2"
    Name = "vnet-2"
    AddressPrefix = "10.1.0.0/16"
}
$virtualNetwork2 = New-AzVirtualNetwork @vnet2
Create a subnet configuration withAdd-AzVirtualNetworkSubnetConfig. The following example creates a subnet configuration with a10.1.0.0/24address prefix:
$subConfig = @{
    Name = "subnet-1"
    AddressPrefix = "10.1.0.0/24"
    VirtualNetwork = $virtualNetwork2
}
$subnetConfig = Add-AzVirtualNetworkSubnetConfig @subConfig
$subConfig = @{
    Name = "subnet-1"
    AddressPrefix = "10.1.0.0/24"
    VirtualNetwork = $virtualNetwork2
}
$subnetConfig = Add-AzVirtualNetworkSubnetConfig @subConfig
Write the subnet configuration to the virtual network withSet-AzVirtualNetwork, which creates the subnet:
$virtualNetwork2 | Set-AzVirtualNetwork
$virtualNetwork2 | Set-AzVirtualNetwork
Before creating a virtual network, you have to create a resource group for the virtual network, and all other resources created in this article. Create a resource group withaz group create. The following example creates a resource group namedtest-rgin theeastuslocation.
az group create \
    --name test-rg \
    --location eastus2
az group create \
    --name test-rg \
    --location eastus2
Create a virtual network withaz network vnet create. The following example creates a virtual network namedvnet-1with the address prefix10.0.0.0/16.
az network vnet create \
    --name vnet-1 \
    --resource-group test-rg \
    --address-prefixes 10.0.0.0/16 \
    --subnet-name subnet-1 \
    --subnet-prefix 10.0.0.0/24
az network vnet create \
    --name vnet-1 \
    --resource-group test-rg \
    --address-prefixes 10.0.0.0/16 \
    --subnet-name subnet-1 \
    --subnet-prefix 10.0.0.0/24
Create the Bastion subnet withaz network vnet subnet create.
# Create a bastion subnet.
az network vnet subnet create \
    --vnet-name vnet-1 \
    --resource-group test-rg \
    --name AzureBastionSubnet \
    --address-prefix 10.0.1.0/24
# Create a bastion subnet.
az network vnet subnet create \
    --vnet-name vnet-1 \
    --resource-group test-rg \
    --name AzureBastionSubnet \
    --address-prefix 10.0.1.0/24
Create Azure Bastion
Create a public IP address for the Azure Bastion host withaz network public-ip create. The following example creates a public IP address namedpublic-ip-bastionin thevnet-1virtual network.
az network public-ip create \
    --resource-group test-rg \
    --name public-ip-bastion \
    --location eastus2 \
    --allocation-method Static \
    --sku Standard
az network public-ip create \
    --resource-group test-rg \
    --name public-ip-bastion \
    --location eastus2 \
    --allocation-method Static \
    --sku Standard
Create an Azure Bastion host withaz network bastion create. The following example creates an Azure Bastion host namedbastionin theAzureBastionSubnetsubnet of thevnet-1virtual network. Azure Bastion is used to securely connect Azure virtual machines without exposing them to the public internet.
az network bastion create \
    --resource-group test-rg \
    --name bastion \
    --vnet-name vnet-1 \
    --public-ip-address public-ip-bastion \
    --location eastus2 \
    --no-wait
az network bastion create \
    --resource-group test-rg \
    --name bastion \
    --vnet-name vnet-1 \
    --public-ip-address public-ip-bastion \
    --location eastus2 \
    --no-wait
Create a second virtual network
Create a second virtual network withaz network vnet create. The following example creates a virtual network namedvnet-2with the address prefix10.1.0.0/16.
Note
The second virtual network can be in the same region as the first virtual network or in a different region. You don't need a Bastion deployment for the second virtual network. After the network peer, you can connect to both virtual machines with the same Bastion deployment.
az network vnet create \
    --name vnet-2 \
    --resource-group test-rg \
    --address-prefixes 10.1.0.0/16 \
    --subnet-name subnet-1 \
    --subnet-prefix 10.1.0.0/24
az network vnet create \
    --name vnet-2 \
    --resource-group test-rg \
    --address-prefixes 10.1.0.0/16 \
    --subnet-name subnet-1 \
    --subnet-prefix 10.1.0.0/24
Portal
PowerShell
CLI

Create virtual network peer
Use the following steps to create a two way network peer betweenvnet1andvnet2.
In the search box at the top of the portal, enterVirtual network. SelectVirtual networksin the search results.
In the search box at the top of the portal, enterVirtual network. SelectVirtual networksin the search results.
Selectvnet-1.
Selectvnet-1.
InSettingsselectPeerings.
InSettingsselectPeerings.
Select+ Add.
Select+ Add.
Enter or select the following information inAdd peering:SettingValueRemote virtual network summaryPeering link nameEntervnet-2-to-vnet-1.Virtual network deployment modelLeave the default ofResource Manager.SubscriptionSelect your subscription.Virtual networkSelectvnet-2.Remote virtual network peering settingsAllow 'vnet-2' to access 'vnet-1'Leave the default of selected.Allow 'vnet-2' to receive forwarded traffic from 'vnet-1'Select the checkbox.Allow gateway or route server in 'vnet-2' to forward traffic to 'vnet-1'Leave the default of cleared.Enable 'vnet-2' to use 'vnet-1's' remote gateway or route serverLeave the default of cleared.Local virtual network peering summaryPeering link nameEntervnet-1-to-vnet-2.Local virtual network peering settingsAllow 'vnet-1' to access 'vnet-2'Leave the default of selected.Allow 'vnet-1' to receive forwarded traffic from 'vnet-2'Select the checkbox.Allow gateway or route server in 'vnet-1' to forward traffic to 'vnet-2'Leave the default of cleared.Enable 'vnet-1' to use 'vnet-2's' remote gateway or route serverLeave the default of cleared.
Enter or select the following information inAdd peering:

SelectAdd.
SelectAdd.
Peer virtual networks
Create a peering withAdd-AzVirtualNetworkPeering. The following example peersvnet-1tovnet-2.
$peerConfig1 = @{
    Name = "vnet-1-to-vnet-2"
    VirtualNetwork = $virtualNetwork1
    RemoteVirtualNetworkId = $virtualNetwork2.Id
}
Add-AzVirtualNetworkPeering @peerConfig1
$peerConfig1 = @{
    Name = "vnet-1-to-vnet-2"
    VirtualNetwork = $virtualNetwork1
    RemoteVirtualNetworkId = $virtualNetwork2.Id
}
Add-AzVirtualNetworkPeering @peerConfig1
In the output returned after the previous command executes, you see that thePeeringStateisInitiated. The peering remains in theInitiatedstate until you create the peering fromvnet-2tovnet-1. Create a peering fromvnet-2tovnet-1.
$peerConfig2 = @{
    Name = "vnet-2-to-vnet-1"
    VirtualNetwork = $virtualNetwork2
    RemoteVirtualNetworkId = $virtualNetwork1.Id
}
Add-AzVirtualNetworkPeering @peerConfig2
$peerConfig2 = @{
    Name = "vnet-2-to-vnet-1"
    VirtualNetwork = $virtualNetwork2
    RemoteVirtualNetworkId = $virtualNetwork1.Id
}
Add-AzVirtualNetworkPeering @peerConfig2
In the output returned after the previous command executes, you see that thePeeringStateisConnected. Azure also changed the peering state of thevnet-1-to-vnet-2peering toConnected. Confirm that the peering state for thevnet-1-to-vnet-2peering changed toConnectedwithGet-AzVirtualNetworkPeering.
$peeringState = @{
    ResourceGroupName = "test-rg"
    VirtualNetworkName = "vnet-1"
}
Get-AzVirtualNetworkPeering @peeringState | Select PeeringState
$peeringState = @{
    ResourceGroupName = "test-rg"
    VirtualNetworkName = "vnet-1"
}
Get-AzVirtualNetworkPeering @peeringState | Select PeeringState
Resources in one virtual network can't communicate with resources in the other virtual network until thePeeringStatefor the peerings in both virtual networks isConnected.
Peer virtual networks
Peerings are established between virtual network IDs. Obtain the ID of each virtual network withaz network vnet showand store the ID in a variable.
# Get the id for vnet-1.
vNet1Id=$(az network vnet show \
  --resource-group test-rg \
  --name vnet-1 \
  --query id --out tsv)

# Get the id for vnet-2.
vNet2Id=$(az network vnet show \
  --resource-group test-rg \
  --name vnet-2 \
  --query id \
  --out tsv)
# Get the id for vnet-1.
vNet1Id=$(az network vnet show \
  --resource-group test-rg \
  --name vnet-1 \
  --query id --out tsv)

# Get the id for vnet-2.
vNet2Id=$(az network vnet show \
  --resource-group test-rg \
  --name vnet-2 \
  --query id \
  --out tsv)
Create a peering fromvnet-1tovnet-2withaz network vnet peering create. If the--allow-vnet-accessparameter isn't specified, a peering is established, but no communication can flow through it.
--allow-vnet-access
az network vnet peering create \
  --name vnet-1-to-vnet-2 \
  --resource-group test-rg \
  --vnet-name vnet-1 \
  --remote-vnet $vNet2Id \
  --allow-vnet-access
az network vnet peering create \
  --name vnet-1-to-vnet-2 \
  --resource-group test-rg \
  --vnet-name vnet-1 \
  --remote-vnet $vNet2Id \
  --allow-vnet-access
In the output returned after the previous command executes, you see that thepeeringStateisInitiated. The peering remains in theInitiatedstate until you create the peering fromvnet-2tovnet-1. Create a peering fromvnet-2tovnet-1.
az network vnet peering create \
  --name vnet-2-to-vnet-1 \
  --resource-group test-rg \
  --vnet-name vnet-2 \
  --remote-vnet $vNet1Id \
  --allow-vnet-access
az network vnet peering create \
  --name vnet-2-to-vnet-1 \
  --resource-group test-rg \
  --vnet-name vnet-2 \
  --remote-vnet $vNet1Id \
  --allow-vnet-access
In the output returned after the previous command executes, you see that thepeeringStateisConnected. Azure also changed the peering state of thevnet-1-to-vnet-2peering toConnected. Confirm that the peering state for thevnet-1-to-vnet-2peering changed toConnectedwithaz network vnet peering show.
az network vnet peering show \
  --name vnet-1-to-vnet-2 \
  --resource-group test-rg \
  --vnet-name vnet-1 \
  --query peeringState
az network vnet peering show \
  --name vnet-1-to-vnet-2 \
  --resource-group test-rg \
  --vnet-name vnet-1 \
  --query peeringState
Resources in one virtual network can't communicate with resources in the other virtual network until thepeeringStatefor the peerings in both virtual networks isConnected.
Create virtual machines
Test the communication between the virtual machines by creating a virtual machine in each virtual network. The virtual machines can communicate with each other over the virtual network peering.
Portal
PowerShell
CLI
Create test virtual machine
The following procedure creates a test virtual machine (VM) namedvm-1in the virtual network.
In the portal, search for and selectVirtual machines.
In the portal, search for and selectVirtual machines.
InVirtual machines, select+ Create, thenAzure virtual machine.
InVirtual machines, select+ Create, thenAzure virtual machine.
On theBasicstab ofCreate a virtual machine, enter or select the following information:SettingValueProject detailsSubscriptionSelect your subscription.Resource groupSelecttest-rg.Instance detailsVirtual machine nameEntervm-1.RegionSelectEast US 2.Availability optionsSelectNo infrastructure redundancy required.Security typeLeave the default ofStandard.ImageSelectUbuntu Server 22.04 LTS - x64 Gen2.VM architectureLeave the default ofx64.SizeSelect a size.Administrator accountAuthentication typeSelectPassword.UsernameEnterazureuser.PasswordEnter a password.Confirm passwordReenter the password.Inbound port rulesPublic inbound portsSelectNone.
On theBasicstab ofCreate a virtual machine, enter or select the following information:
Select theNetworkingtab at the top of the page.
Select theNetworkingtab at the top of the page.
Enter or select the following information in theNetworkingtab:SettingValueNetwork interfaceVirtual networkSelectvnet-1.SubnetSelectsubnet-1 (10.0.0.0/24).Public IPSelectNone.NIC network security groupSelectAdvanced.Configure network security groupSelectCreate new.Enternsg-1for the name.Leave the rest at the defaults and selectOK.
Enter or select the following information in theNetworkingtab:
Leave the rest of the settings at the defaults and selectReview + create.
Leave the rest of the settings at the defaults and selectReview + create.
Review the settings and selectCreate.
Review the settings and selectCreate.
Note
Virtual machines in a virtual network with a bastion host don't need public IP addresses. Bastion provides the public IP, and the VMs use private IPs to communicate within the network. You can remove the public IPs from any VMs in bastion hosted virtual networks. For more information, seeDissociate a public IP address from an Azure VM.
Note
Azure provides a default outbound access IP for VMs that either aren't assigned a public IP address or are in the backend pool of an internal basic Azure load balancer. The default outbound access IP mechanism provides an outbound IP address that isn't configurable.
The default outbound access IP is disabled when one of the following events happens:
A public IP address is assigned to the VM.
The VM is placed in the backend pool of a standard load balancer, with or without outbound rules.
AnAzure NAT Gatewayresource is assigned to the subnet of the VM.
VMs that you create by using virtual machine scale sets in flexible orchestration mode don't have default outbound access.
For more information about outbound connections in Azure, seeDefault outbound access in AzureandUse Source Network Address Translation (SNAT) for outbound connections.
Repeat the previous steps to create a second virtual machine in the second virtual network with the following values:
Create the first virtual machine
Create a VM withNew-AzVM. The following example creates a VM namedvm-1in thevnet-1virtual network. When prompted, enter the username and password for the virtual machine.
# Create a credential object
$cred = Get-Credential

# Define the VM parameters
$vmParams = @{
    ResourceGroupName = "test-rg"
    Location = "EastUS2"
    Name = "vm-1"
    ImageName = "Canonical:ubuntu-24_04-lts:server-gen1:latest"
    Size = "Standard_DS1_v2"
    Credential = $cred
    VirtualNetworkName = "vnet-1"
    SubnetName = "subnet-1"
    PublicIpAddressName = $null  # No public IP address
}

# Create the VM
New-AzVM @vmParams
# Create a credential object
$cred = Get-Credential

# Define the VM parameters
$vmParams = @{
    ResourceGroupName = "test-rg"
    Location = "EastUS2"
    Name = "vm-1"
    ImageName = "Canonical:ubuntu-24_04-lts:server-gen1:latest"
    Size = "Standard_DS1_v2"
    Credential = $cred
    VirtualNetworkName = "vnet-1"
    SubnetName = "subnet-1"
    PublicIpAddressName = $null  # No public IP address
}

# Create the VM
New-AzVM @vmParams
Create the second VM
# Create a credential object
$cred = Get-Credential

# Define the VM parameters
$vmParams = @{
    ResourceGroupName = "test-rg"
    Location = "EastUS2"
    Name = "vm-2"
    ImageName = "Canonical:ubuntu-24_04-lts:server-gen1:latest"
    Size = "Standard_DS1_v2"
    Credential = $cred
    VirtualNetworkName = "vnet-2"
    SubnetName = "subnet-1"
    PublicIpAddressName = $null  # No public IP address
}

# Create the VM
New-AzVM @vmParams
# Create a credential object
$cred = Get-Credential

# Define the VM parameters
$vmParams = @{
    ResourceGroupName = "test-rg"
    Location = "EastUS2"
    Name = "vm-2"
    ImageName = "Canonical:ubuntu-24_04-lts:server-gen1:latest"
    Size = "Standard_DS1_v2"
    Credential = $cred
    VirtualNetworkName = "vnet-2"
    SubnetName = "subnet-1"
    PublicIpAddressName = $null  # No public IP address
}

# Create the VM
New-AzVM @vmParams
Create the first VM
Create a VM withaz vm create. The following example creates a VM namedvm-1in thevnet-1virtual network. If SSH keys don't already exist in a default key location, the command creates them. The--no-waitoption creates the VM in the background, so you can continue to the next step.
--no-wait
az vm create \
    --resource-group test-rg \
    --name vm-1 \
    --image Ubuntu2204 \
    --vnet-name vnet-1 \
    --subnet subnet-1 \
    --admin-username azureuser \
    --authentication-type password \
    --no-wait
az vm create \
    --resource-group test-rg \
    --name vm-1 \
    --image Ubuntu2204 \
    --vnet-name vnet-1 \
    --subnet subnet-1 \
    --admin-username azureuser \
    --authentication-type password \
    --no-wait
Create the second VM
Create a VM in thevnet-2virtual network.
az vm create \
    --resource-group test-rg \
    --name vm-2 \
    --image Ubuntu2204 \
    --vnet-name vnet-2 \
    --subnet subnet-1 \
    --admin-username azureuser \
    --authentication-type password
az vm create \
    --resource-group test-rg \
    --name vm-2 \
    --image Ubuntu2204 \
    --vnet-name vnet-2 \
    --subnet subnet-1 \
    --admin-username azureuser \
    --authentication-type password
The VM takes a few minutes to create.
Wait for the virtual machines to be created before continuing with the next steps.
Connect to a virtual machine
Usepingto test the communication between the virtual machines. Sign-in to the Azure portal to complete the following steps.
ping
In the portal, search for and selectVirtual machines.
In the portal, search for and selectVirtual machines.
On theVirtual machinespage, selectvm-1.
On theVirtual machinespage, selectvm-1.
In theOverviewofvm-1, selectConnect.
In theOverviewofvm-1, selectConnect.
In theConnect to virtual machinepage, select theBastiontab.
In theConnect to virtual machinepage, select theBastiontab.
SelectUse Bastion.
SelectUse Bastion.
Enter the username and password you created when you created the VM, and then selectConnect.
Enter the username and password you created when you created the VM, and then selectConnect.
Communicate between VMs
At the bash prompt forvm-1, enterping -c 4 10.1.0.4.You get a reply similar to the following message:azureuser@vm-1:~$ ping -c 4 10.1.0.4
PING 10.1.0.4 (10.1.0.4) 56(84) bytes of data.
64 bytes from 10.1.0.4: icmp_seq=1 ttl=64 time=2.29 ms
64 bytes from 10.1.0.4: icmp_seq=2 ttl=64 time=1.06 ms
64 bytes from 10.1.0.4: icmp_seq=3 ttl=64 time=1.30 ms
64 bytes from 10.1.0.4: icmp_seq=4 ttl=64 time=0.998 ms

--- 10.1.0.4 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3004ms
rtt min/avg/max/mdev = 0.998/1.411/2.292/0.520 ms
At the bash prompt forvm-1, enterping -c 4 10.1.0.4.
ping -c 4 10.1.0.4
You get a reply similar to the following message:
azureuser@vm-1:~$ ping -c 4 10.1.0.4
PING 10.1.0.4 (10.1.0.4) 56(84) bytes of data.
64 bytes from 10.1.0.4: icmp_seq=1 ttl=64 time=2.29 ms
64 bytes from 10.1.0.4: icmp_seq=2 ttl=64 time=1.06 ms
64 bytes from 10.1.0.4: icmp_seq=3 ttl=64 time=1.30 ms
64 bytes from 10.1.0.4: icmp_seq=4 ttl=64 time=0.998 ms

--- 10.1.0.4 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3004ms
rtt min/avg/max/mdev = 0.998/1.411/2.292/0.520 ms
azureuser@vm-1:~$ ping -c 4 10.1.0.4
PING 10.1.0.4 (10.1.0.4) 56(84) bytes of data.
64 bytes from 10.1.0.4: icmp_seq=1 ttl=64 time=2.29 ms
64 bytes from 10.1.0.4: icmp_seq=2 ttl=64 time=1.06 ms
64 bytes from 10.1.0.4: icmp_seq=3 ttl=64 time=1.30 ms
64 bytes from 10.1.0.4: icmp_seq=4 ttl=64 time=0.998 ms

--- 10.1.0.4 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3004ms
rtt min/avg/max/mdev = 0.998/1.411/2.292/0.520 ms
Close the Bastion connection tovm-1.
Close the Bastion connection tovm-1.
Repeat the steps inConnect to a virtual machineto connect tovm-2.
Repeat the steps inConnect to a virtual machineto connect tovm-2.
At the bash prompt forvm-2, enterping -c 4 10.0.0.4.You get a reply similar to the following message:azureuser@vm-2:~$ ping -c 4 10.0.0.4
PING 10.0.0.4 (10.0.0.4) 56(84) bytes of data.
64 bytes from 10.0.0.4: icmp_seq=1 ttl=64 time=1.81 ms
64 bytes from 10.0.0.4: icmp_seq=2 ttl=64 time=3.35 ms
64 bytes from 10.0.0.4: icmp_seq=3 ttl=64 time=0.811 ms
64 bytes from 10.0.0.4: icmp_seq=4 ttl=64 time=1.28 ms
At the bash prompt forvm-2, enterping -c 4 10.0.0.4.
ping -c 4 10.0.0.4
You get a reply similar to the following message:
azureuser@vm-2:~$ ping -c 4 10.0.0.4
PING 10.0.0.4 (10.0.0.4) 56(84) bytes of data.
64 bytes from 10.0.0.4: icmp_seq=1 ttl=64 time=1.81 ms
64 bytes from 10.0.0.4: icmp_seq=2 ttl=64 time=3.35 ms
64 bytes from 10.0.0.4: icmp_seq=3 ttl=64 time=0.811 ms
64 bytes from 10.0.0.4: icmp_seq=4 ttl=64 time=1.28 ms
azureuser@vm-2:~$ ping -c 4 10.0.0.4
PING 10.0.0.4 (10.0.0.4) 56(84) bytes of data.
64 bytes from 10.0.0.4: icmp_seq=1 ttl=64 time=1.81 ms
64 bytes from 10.0.0.4: icmp_seq=2 ttl=64 time=3.35 ms
64 bytes from 10.0.0.4: icmp_seq=3 ttl=64 time=0.811 ms
64 bytes from 10.0.0.4: icmp_seq=4 ttl=64 time=1.28 ms
Close the Bastion connection tovm-2.
Close the Bastion connection tovm-2.
Portal
PowerShell
CLI
When you finish using the resources that you created, you can delete the resource group and all its resources.
In the Azure portal, search for and selectResource groups.
In the Azure portal, search for and selectResource groups.
On theResource groupspage, select thetest-rgresource group.
On theResource groupspage, select thetest-rgresource group.
On thetest-rgpage, selectDelete resource group.
On thetest-rgpage, selectDelete resource group.
Entertest-rginEnter resource group name to confirm deletion, and then selectDelete.
Entertest-rginEnter resource group name to confirm deletion, and then selectDelete.
When no longer needed, useRemove-AzResourcegroupto remove the resource group and all of the resources it contains.
$rgParams = @{
    Name = "test-rg"
}
Remove-AzResourceGroup @rgParams -Force
$rgParams = @{
    Name = "test-rg"
}
Remove-AzResourceGroup @rgParams -Force
When no longer needed, useaz group deleteto remove the resource group and all of the resources it contains.
az group delete \
    --name test-rg \
    --yes \
    --no-wait
az group delete \
    --name test-rg \
    --yes \
    --no-wait
Next steps
In this tutorial, you:
Created virtual network peering between two virtual networks.
Created virtual network peering between two virtual networks.
Tested the communication between two virtual machines over the virtual network peering withping.
Tested the communication between two virtual machines over the virtual network peering withping.
ping
To learn more about a virtual network peering:
Virtual network peering
Feedback
Was this page helpful?
Additional resources