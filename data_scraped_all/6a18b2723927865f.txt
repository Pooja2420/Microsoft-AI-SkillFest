Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Tutorial: Add Azure Content Delivery Network to an Azure App Service web app
Article
2025-03-31
11 contributors
In this article
Important
Azure CDN Standard from Microsoft (classic) will be retired onSeptember 30, 2027. To avoid any service disruption, it's important that youmigrate your Azure CDN Standard from Microsoft (classic) profilesto Azure Front Door Standard or Premium tier by September 30, 2027. For more information, seeAzure CDN Standard from Microsoft (classic) retirement.
Azure CDN from Edgio was retired onJanuary 15, 2025. For more information, seeAzure CDN from Edgio retirement FAQ.
This tutorial shows how to addAzure Content Delivery Networkto aweb app in Azure App Service. Web apps are services for hosting web applications, REST APIs, and mobile back ends.
Here's the home page of the sample static HTML site that you work with:

What you learn:
Create a content delivery network endpoint.
Refresh cached assets.
Use query strings to control cached versions.
Prerequisites
To complete this tutorial:
Install Git
Install the Azure CLI
If you don't have anAzure subscription, create anAzure free accountbefore you begin.
Create the web app
To create the web app that you work with, follow thestatic HTML quickstartthrough theBrowse to the appstep.
Sign in to the Azure portal
Open a browser and sign in to theAzure portal.
Dynamic site acceleration optimization
If you want to optimize your content delivery network endpoint for dynamic site acceleration (DSA), you should use thecontent delivery network portalto create your profile and endpoint. WithDSA optimization, the performance of web pages with dynamic content is measurably improved. For instructions about how to optimize a content delivery network endpoint for DSA from the content delivery network portal, seecontent delivery network endpoint configuration to accelerate delivery of dynamic files.
Otherwise, if you don't want to optimize your new endpoint, you can use the web app portal to create it by following the steps in the next section.

Create a content delivery network profile and endpoint
In the left navigation, selectApp Services, and then select the app that you created in thestatic HTML quickstart.
In the left navigation, selectApp Services, and then select the app that you created in thestatic HTML quickstart.
In theApp Servicepage, in theSettingssection, selectNetworking > Azure CDN.
In theApp Servicepage, in theSettingssection, selectNetworking > Azure CDN.

In theAzure Content Delivery Networkpage, provide theNew endpointsettings as specified in the table.SettingSuggested valueDescriptioncontent delivery network profilemyCDNProfileA content delivery network profile is a collection of content delivery network endpoints with the same pricing tier.Pricing tierMicrosoft content delivery network (classic)Thepricing tierspecifies the provider and available features.content delivery network endpoint nameAny name that is unique in the azureedge.net domainYou access your cached resources at the domain<endpointname>.azureedge.net.
In theAzure Content Delivery Networkpage, provide theNew endpointsettings as specified in the table.
SelectCreateto create a content delivery network profile. Azure creates the profile and endpoint. The new endpoint appears in theEndpointslist, and when it's provisioned, the status isRunning.
SelectCreateto create a content delivery network profile. Azure creates the profile and endpoint. The new endpoint appears in theEndpointslist, and when it's provisioned, the status isRunning.


Test the content delivery network endpoint
Because it takes time for the registration to propagate, the endpoint isn't immediately available for use. ForAzure CDN Standard from Microsoft (classic)profiles, propagation usually completes within 10 minutes.
The sample app has anindex.htmlfile andcss,img, andjsfolders that contain other static assets. The content paths for all of these files are the same at the content delivery network endpoint. For example, both of the following URLs access thebootstrap.cssfile in thecssfolder:
http://<appname>.azurewebsites.net/css/bootstrap.css
http://<appname>.azurewebsites.net/css/bootstrap.css
http://<endpointname>.azureedge.net/css/bootstrap.css
http://<endpointname>.azureedge.net/css/bootstrap.css
Navigate a browser to the following URL:
http://<endpointname>.azureedge.net/index.html
http://<endpointname>.azureedge.net/index.html

You see the same page that you ran earlier in an Azure web app. Azure Content Delivery Network has retrieved the origin web app's assets and is serving them from the content delivery network endpoint
To ensure that this page is cached in the content delivery network, refresh the page. Two requests for the same asset are sometimes required for the content delivery network to cache the requested content.
For more information about creating Azure Content Delivery Network profiles and endpoints, seeGetting started with Azure Content Delivery Network.

Purge the content delivery network
The content delivery network periodically refreshes its resources from the origin web app based on the time to live (TTL) configuration. The default TTL is seven days.
At times you might need to refresh the content delivery network before the TTL expiration; for example, when you deploy updated content to the web app. To trigger a refresh, manually purge the content delivery network resources.
In this section of the tutorial, you deploy a change to the web app and purge the content delivery network to trigger the content delivery network to refresh its cache.
Deploy a change to the web app
Open theindex.htmlfile and add- V2to the H1 heading, as shown in the following example:
<h1>Azure App Service - Sample Static HTML Site - V2</h1>
<h1>Azure App Service - Sample Static HTML Site - V2</h1>
Commit your change and deploy it to the web app.
git commit -am "version 2"
git push azure main
git commit -am "version 2"
git push azure main
Once deployment has completed, browse to the web app URL to see the change.
http://<appname>.azurewebsites.net/index.html
http://<appname>.azurewebsites.net/index.html

If you browse to the content delivery network endpoint URL for the home page, you don't see the changes because the cached version in the content delivery network hasn't expired yet.
http://<endpointname>.azureedge.net/index.html
http://<endpointname>.azureedge.net/index.html


Purge the content delivery network in the portal
To trigger the content delivery network to update its cached version, purge the content delivery network.
In the portal left navigation, selectResource groups, and then select the resource group that you created for your web app (myResourceGroup).
In the portal left navigation, selectResource groups, and then select the resource group that you created for your web app (myResourceGroup).
In the list of resources, select your content delivery network endpoint.
In the list of resources, select your content delivery network endpoint.
At the top of theEndpointpage, selectPurge.
At the top of theEndpointpage, selectPurge.

Enter the content paths you want to purge. You can pass a complete file path to purge an individual file, or a path segment to purge and refresh all content in a folder. Because you changedindex.html, ensure that is in one of the paths. At the bottom of the page, selectPurge.
Enter the content paths you want to purge. You can pass a complete file path to purge an individual file, or a path segment to purge and refresh all content in a folder. Because you changedindex.html, ensure that is in one of the paths. At the bottom of the page, selectPurge.


Verify that the content delivery network is updated
Wait until the purge request finishes processing, which is typically a couple of minutes. To see the current status, select the bell icon at the top of the page.

When you browse to the content delivery network endpoint URL forindex.html, you see theV2that you added to the title on the home page, which indicates that the content delivery network cache has been refreshed.
http://<endpointname>.azureedge.net/index.html
http://<endpointname>.azureedge.net/index.html

For more information, seePurge an Azure Content Delivery Network endpoint.
Use query strings to version content
Azure Content Delivery Network offers the following caching behavior options:
Ignore query strings
Bypass caching for query strings
Cache every unique URL
The first option is the default, which means there's only one cached version of an asset regardless of the query string in the URL.
In this section of the tutorial, you change the caching behavior to cache every unique URL.
Change the cache behavior
In the Azure portalCDN Endpointpage, selectCache.
In the Azure portalCDN Endpointpage, selectCache.
SelectCache every unique URLfrom theQuery string caching behaviordropdown list.
SelectCache every unique URLfrom theQuery string caching behaviordropdown list.
SelectSave.
SelectSave.

Verify that unique URLs are cached separately
In a browser, navigate to the home page at the content delivery network endpoint, and include a query string:
http://<endpointname>.azureedge.net/index.html?q=1
http://<endpointname>.azureedge.net/index.html?q=1
Azure Content Delivery Network returns the current web app content, which includesV2in the heading.
To ensure that this page is cached in the content delivery network, refresh the page.
Openindex.html, changeV2toV3, then deploy the change.
git commit -am "version 3"
git push azure main
git commit -am "version 3"
git push azure main
In a browser, go to the content delivery network endpoint URL with a new query string, such asq=2. Azure Content Delivery Network gets the currentindex.htmlfile and displaysV3. However, if you navigate to the content delivery network endpoint with theq=1query string, you seeV2.
q=2
q=1
http://<endpointname>.azureedge.net/index.html?q=2
http://<endpointname>.azureedge.net/index.html?q=2

http://<endpointname>.azureedge.net/index.html?q=1
http://<endpointname>.azureedge.net/index.html?q=1

This output shows that each query string is treated differently:
q=1 was used before, so cached contents are returned (V2).
q=2 is new, so the latest web app contents are retrieved and returned (V3).
For more information, seeControl Azure Content Delivery Network caching behavior with query strings.
Clean up resources
In the preceding steps, you created Azure resources in a resource group. If you don't expect to need these resources in the future, delete the resource group by running the following command in the Cloud Shell:
az group delete --name myResourceGroup
az group delete --name myResourceGroup
This command may take a minute to run.
Next steps
What you learned:
Create a content delivery network endpoint.
Refresh cached assets.
Use query strings to control cached versions.
Learn how to optimize content delivery network performance in the following articles:
Tutorial: Optimize Azure Content Delivery Network for the type of content delivery.
Feedback
Was this page helpful?
Additional resources