Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Tutorial: Connect to SQL Database from .NET App Service without secrets using a managed identity
Article
2024-04-17
16 contributors
In this article
App Serviceprovides a highly scalable, self-patching web hosting service in Azure. It also provides amanaged identityfor your app, which is a turn-key solution for securing access toAzure SQL Databaseand other Azure services. Managed identities in App Service make your app more secure by eliminating secrets from your app, such as credentials in the connection strings. In this tutorial, you add managed identity to the sample web app you built in one of the following tutorials:
Tutorial: Build an ASP.NET app in Azure with Azure SQL Database
Tutorial: Build an ASP.NET Core and Azure SQL Database app in Azure App Service
When you're finished, your sample app will connect to SQL Database securely without the need of username and passwords.

Note
The steps covered in this tutorial support the following versions:
.NET Framework 4.8 and above
.NET 6.0 and above
For guidance for Azure Database for MySQL or Azure Database for PostgreSQL in other language frameworks (Node.js, Python, and Java), seeTutorial: Connect to Azure databases from App Service without secrets using a managed identity.
What you will learn:
Enable managed identities
Grant SQL Database access to the managed identity
Configure Entity Framework to use Microsoft Entra authentication with SQL Database
Connect to SQL Database from Visual Studio using Microsoft Entra authentication
Note
Microsoft Entra authentication isdifferentfromIntegrated Windows authenticationin on-premises Active Directory (AD DS). AD DS and Microsoft Entra ID use completely different authentication protocols. For more information, seeMicrosoft Entra Domain Services documentation.
If you don't have anAzure subscription, create anAzure free accountbefore you begin.
Prerequisites
This article continues where you left off in either one of the following tutorials:
Tutorial: Build an ASP.NET app in Azure with SQL Database
Tutorial: Build an ASP.NET Core and SQL Database app in Azure App Service.
If you haven't already, follow one of the two tutorials first. Alternatively, you can adapt the steps for your own .NET app with SQL Database.
To debug your app using SQL Database as the back end, make sure that you've allowed client connection from your computer. If not, add the client IP by following the steps atManage server-level IP firewall rules using the Azure portal.
Prepare your environment for the Azure CLI.
Use the Bash environment inAzure Cloud Shell. For more information, seeGet started with Azure Cloud Shell.
Use the Bash environment inAzure Cloud Shell. For more information, seeGet started with Azure Cloud Shell.

If you prefer to run CLI reference commands locally,installthe Azure CLI. If you're running on Windows or macOS, consider running Azure CLI in a Docker container. For more information, seeHow to run the Azure CLI in a Docker container.If you're using a local installation, sign in to the Azure CLI by using theaz logincommand. To finish the authentication process, follow the steps displayed in your terminal. For other sign-in options, seeAuthenticate to Azure using Azure CLI.When you're prompted, install the Azure CLI extension on first use. For more information about extensions, seeUse and manage extensions with the Azure CLI.Runaz versionto find the version and dependent libraries that are installed. To upgrade to the latest version, runaz upgrade.
If you prefer to run CLI reference commands locally,installthe Azure CLI. If you're running on Windows or macOS, consider running Azure CLI in a Docker container. For more information, seeHow to run the Azure CLI in a Docker container.
If you're using a local installation, sign in to the Azure CLI by using theaz logincommand. To finish the authentication process, follow the steps displayed in your terminal. For other sign-in options, seeAuthenticate to Azure using Azure CLI.
If you're using a local installation, sign in to the Azure CLI by using theaz logincommand. To finish the authentication process, follow the steps displayed in your terminal. For other sign-in options, seeAuthenticate to Azure using Azure CLI.
When you're prompted, install the Azure CLI extension on first use. For more information about extensions, seeUse and manage extensions with the Azure CLI.
When you're prompted, install the Azure CLI extension on first use. For more information about extensions, seeUse and manage extensions with the Azure CLI.
Runaz versionto find the version and dependent libraries that are installed. To upgrade to the latest version, runaz upgrade.
Runaz versionto find the version and dependent libraries that are installed. To upgrade to the latest version, runaz upgrade.

1. Grant database access to Microsoft Entra user
First, enable Microsoft Entra authentication to SQL Database by assigning a Microsoft Entra user as the admin of the server. This user is different from the Microsoft account you used to sign up for your Azure subscription. It must be a user that you created, imported, synced, or invited into Microsoft Entra ID. For more information on allowed Microsoft Entra users, seeMicrosoft Entra features and limitations in SQL Database.
If your Microsoft Entra tenant doesn't have a user yet, create one by following the steps atAdd or delete users using Microsoft Entra ID.
If your Microsoft Entra tenant doesn't have a user yet, create one by following the steps atAdd or delete users using Microsoft Entra ID.
Find the object ID of the Microsoft Entra user using theaz ad user listand replace<user-principal-name>. The result is saved to a variable.$azureaduser=(az ad user list --filter "userPrincipalName eq '<user-principal-name>'" --query '[].id' --output tsv)TipTo see the list of all user principal names in Microsoft Entra ID, runaz ad user list --query '[].userPrincipalName'.
Find the object ID of the Microsoft Entra user using theaz ad user listand replace<user-principal-name>. The result is saved to a variable.
az ad user list
$azureaduser=(az ad user list --filter "userPrincipalName eq '<user-principal-name>'" --query '[].id' --output tsv)
$azureaduser=(az ad user list --filter "userPrincipalName eq '<user-principal-name>'" --query '[].id' --output tsv)
Tip
To see the list of all user principal names in Microsoft Entra ID, runaz ad user list --query '[].userPrincipalName'.
az ad user list --query '[].userPrincipalName'
Add this Microsoft Entra user as an Active Directory admin usingaz sql server ad-admin createcommand in the Cloud Shell. In the following command, replace<server-name>with the server name (without the.database.windows.netsuffix).az sql server ad-admin create --resource-group myResourceGroup --server-name <server-name> --display-name ADMIN --object-id $azureaduser
Add this Microsoft Entra user as an Active Directory admin usingaz sql server ad-admin createcommand in the Cloud Shell. In the following command, replace<server-name>with the server name (without the.database.windows.netsuffix).
az sql server ad-admin create
.database.windows.net
az sql server ad-admin create --resource-group myResourceGroup --server-name <server-name> --display-name ADMIN --object-id $azureaduser
az sql server ad-admin create --resource-group myResourceGroup --server-name <server-name> --display-name ADMIN --object-id $azureaduser
For more information on adding an Active Directory admin, seeProvision a Microsoft Entra administrator for your server
2. Set up your dev environment
Visual Studio Windows
Visual Studio for macOS
Visual Studio Code
Azure CLI
Azure PowerShell
Visual Studio for Windows is integrated with Microsoft Entra authentication. To enable development and debugging in Visual Studio, add your Microsoft Entra user in Visual Studio by selectingFile>Account Settingsfrom the menu, and selectSign inorAdd.
Visual Studio for Windows is integrated with Microsoft Entra authentication. To enable development and debugging in Visual Studio, add your Microsoft Entra user in Visual Studio by selectingFile>Account Settingsfrom the menu, and selectSign inorAdd.
To set the Microsoft Entra user for Azure service authentication, selectTools>Optionsfrom the menu, then selectAzure Service Authentication>Account Selection. Select the Microsoft Entra user you added and selectOK.
To set the Microsoft Entra user for Azure service authentication, selectTools>Optionsfrom the menu, then selectAzure Service Authentication>Account Selection. Select the Microsoft Entra user you added and selectOK.
Visual Studio for Mac isnotintegrated with Microsoft Entra authentication. However, the Azure Identity client library that you'll use later can use tokens from Azure CLI. To enable development and debugging in Visual Studio,install Azure CLIon your local machine.
Visual Studio for Mac isnotintegrated with Microsoft Entra authentication. However, the Azure Identity client library that you'll use later can use tokens from Azure CLI. To enable development and debugging in Visual Studio,install Azure CLIon your local machine.
Sign in to Azure CLI with the following command using your Microsoft Entra user:az login --allow-no-subscriptions
Sign in to Azure CLI with the following command using your Microsoft Entra user:
az login --allow-no-subscriptions
az login --allow-no-subscriptions
Visual Studio Code is integrated with Microsoft Entra authentication through the Azure extension. Install theAzure Toolsextension in Visual Studio Code.
Visual Studio Code is integrated with Microsoft Entra authentication through the Azure extension. Install theAzure Toolsextension in Visual Studio Code.
In Visual Studio Code, in theActivity Bar, select theAzurelogo.
In Visual Studio Code, in theActivity Bar, select theAzurelogo.
In theApp Serviceexplorer, selectSign in to Azure...and follow the instructions.
In theApp Serviceexplorer, selectSign in to Azure...and follow the instructions.
The Azure Identity client library that you'll use later can use tokens from Azure CLI. To enable command-line based development,install Azure CLIon your local machine.
The Azure Identity client library that you'll use later can use tokens from Azure CLI. To enable command-line based development,install Azure CLIon your local machine.
Sign in to Azure with the following command using your Microsoft Entra user:az login --allow-no-subscriptions
Sign in to Azure with the following command using your Microsoft Entra user:
az login --allow-no-subscriptions
az login --allow-no-subscriptions
The Azure Identity client library that you'll use later can use tokens from Azure PowerShell. To enable command-line based development,install Azure PowerShellon your local machine.
The Azure Identity client library that you'll use later can use tokens from Azure PowerShell. To enable command-line based development,install Azure PowerShellon your local machine.
Sign in to Azure CLI with the following cmdlet using your Microsoft Entra user:Connect-AzAccount
Sign in to Azure CLI with the following cmdlet using your Microsoft Entra user:
Connect-AzAccount
Connect-AzAccount
For more information about setting up your dev environment for Microsoft Entra authentication, seeAzure Identity client library for .NET.
You're now ready to develop and debug your app with the SQL Database as the back end, using Microsoft Entra authentication.
3. Modify your project
Note
Microsoft.Azure.Services.AppAuthenticationis no longer recommended to use with new Azure SDK.
It is replaced with newAzure Identity client libraryavailable for .NET, Java, TypeScript and Python and should be used for all new development.
Information about how to migrate toAzure Identitycan be found here:AppAuthentication to Azure.Identity Migration Guidance.
Azure Identity
The steps you follow for your project depends on whether you're usingEntity Framework Core(default for ASP.NET Core) orEntity Framework(default for ASP.NET).
Entity Framework Core
Entity Framework
In Visual Studio, open the Package Manager Console and add the NuGet packageMicrosoft.Data.SqlClient:Install-Package Microsoft.Data.SqlClient -Version 5.1.0
In Visual Studio, open the Package Manager Console and add the NuGet packageMicrosoft.Data.SqlClient:
Install-Package Microsoft.Data.SqlClient -Version 5.1.0
Install-Package Microsoft.Data.SqlClient -Version 5.1.0
In theASP.NET Core and SQL Database tutorial, theMyDbConnectionconnection string inappsettings.jsonisn't used at all yet. The local environment and the Azure environment both get connection strings from their respective environment variables in order to keep connection secrets out of the source file. But now with Active Directory authentication, there are no more secrets. Inappsettings.json, replace the value of theMyDbConnectionconnection string with:"Server=tcp:<server-name>.database.windows.net;Authentication=Active Directory Default; Database=<database-name>;"NoteTheActive Directory Defaultauthentication type can be used both on your local machine and in Azure App Service. The driver attempts to acquire a token from Microsoft Entra ID using various means. If the app is deployed, it gets a token from the app's system-assigned managed identity. It can also authenticate with a user-assigned managed identity if you include:User Id=<client-id-of-user-assigned-managed-identity>;in your connection string. If the app is running locally, it tries to get a token from Visual Studio, Visual Studio Code, and Azure CLI.That's everything you need to connect to SQL Database. When you debug in Visual Studio, your code uses the Microsoft Entra user you configured in2. Set up your dev environment. You'll set up SQL Database later to allow connection from the managed identity of your App Service app. TheDefaultAzureCredentialclass caches the token in memory and retrieves it from Microsoft Entra ID just before expiration. You don't need any custom code to refresh the token.
In theASP.NET Core and SQL Database tutorial, theMyDbConnectionconnection string inappsettings.jsonisn't used at all yet. The local environment and the Azure environment both get connection strings from their respective environment variables in order to keep connection secrets out of the source file. But now with Active Directory authentication, there are no more secrets. Inappsettings.json, replace the value of theMyDbConnectionconnection string with:
MyDbConnection
MyDbConnection
"Server=tcp:<server-name>.database.windows.net;Authentication=Active Directory Default; Database=<database-name>;"
"Server=tcp:<server-name>.database.windows.net;Authentication=Active Directory Default; Database=<database-name>;"
Note
TheActive Directory Defaultauthentication type can be used both on your local machine and in Azure App Service. The driver attempts to acquire a token from Microsoft Entra ID using various means. If the app is deployed, it gets a token from the app's system-assigned managed identity. It can also authenticate with a user-assigned managed identity if you include:User Id=<client-id-of-user-assigned-managed-identity>;in your connection string. If the app is running locally, it tries to get a token from Visual Studio, Visual Studio Code, and Azure CLI.
User Id=<client-id-of-user-assigned-managed-identity>;
That's everything you need to connect to SQL Database. When you debug in Visual Studio, your code uses the Microsoft Entra user you configured in2. Set up your dev environment. You'll set up SQL Database later to allow connection from the managed identity of your App Service app. TheDefaultAzureCredentialclass caches the token in memory and retrieves it from Microsoft Entra ID just before expiration. You don't need any custom code to refresh the token.
DefaultAzureCredential
TypeCtrl+F5to run the app again. The same CRUD app in your browser is now connecting to the Azure SQL Database directly, using Microsoft Entra authentication. This setup lets you run database migrations from Visual Studio.
TypeCtrl+F5to run the app again. The same CRUD app in your browser is now connecting to the Azure SQL Database directly, using Microsoft Entra authentication. This setup lets you run database migrations from Visual Studio.
Ctrl+F5
In Visual Studio, open the Package Manager Console and add the NuGet packageAzure.Identityand update Entity Framework:Install-Package Azure.Identity
Update-Package EntityFrameworkNoteThe token caching feature for Managed Identity is available starting from Azure.Identity version 1.8.0. To help reduce network port usage, consider updating Azure.Identity to this version or later.
In Visual Studio, open the Package Manager Console and add the NuGet packageAzure.Identityand update Entity Framework:
Install-Package Azure.Identity
Update-Package EntityFramework
Install-Package Azure.Identity
Update-Package EntityFramework
Note
The token caching feature for Managed Identity is available starting from Azure.Identity version 1.8.0. To help reduce network port usage, consider updating Azure.Identity to this version or later.
In your DbContext object (inModels/MyDbContext.cs), add the following code to the default constructor.Azure.Identity.DefaultAzureCredential credential;
var managedIdentityClientId = ConfigurationManager.AppSettings["ManagedIdentityClientId"];
if(managedIdentityClientId != null ) {
    //User-assigned managed identity Client ID is passed in via ManagedIdentityClientId
    var defaultCredentialOptions = new DefaultAzureCredentialOptions { ManagedIdentityClientId = managedIdentityClientId };
    credential = new Azure.Identity.DefaultAzureCredential(defaultCredentialOptions);
}
else {
    //System-assigned managed identity or logged-in identity of Visual Studio, Visual Studio Code, Azure CLI or Azure PowerShell
    credential = new Azure.Identity.DefaultAzureCredential();
}
var conn = (System.Data.SqlClient.SqlConnection)Database.Connection;
var token = credential.GetToken(new Azure.Core.TokenRequestContext(new[] { "https://database.windows.net/.default" }));
conn.AccessToken = token.Token;This code usesAzure.Identity.DefaultAzureCredentialto get a useable token for SQL Database from Microsoft Entra ID and then adds it to the database connection. While you can customizeDefaultAzureCredential, by default it's already versatile. When it runs in App Service, it uses the app's system-assigned managed identity by default. If you prefer to use a user-assigned managed identity, add a new App setting namedManagedIdentityClientIdand enter theClient IdGUID from your user-assigned managed identity in thevaluefield.   When it runs locally, it can get a token using the logged-in identity of Visual Studio, Visual Studio Code, Azure CLI, and Azure PowerShell.
In your DbContext object (inModels/MyDbContext.cs), add the following code to the default constructor.
Azure.Identity.DefaultAzureCredential credential;
var managedIdentityClientId = ConfigurationManager.AppSettings["ManagedIdentityClientId"];
if(managedIdentityClientId != null ) {
    //User-assigned managed identity Client ID is passed in via ManagedIdentityClientId
    var defaultCredentialOptions = new DefaultAzureCredentialOptions { ManagedIdentityClientId = managedIdentityClientId };
    credential = new Azure.Identity.DefaultAzureCredential(defaultCredentialOptions);
}
else {
    //System-assigned managed identity or logged-in identity of Visual Studio, Visual Studio Code, Azure CLI or Azure PowerShell
    credential = new Azure.Identity.DefaultAzureCredential();
}
var conn = (System.Data.SqlClient.SqlConnection)Database.Connection;
var token = credential.GetToken(new Azure.Core.TokenRequestContext(new[] { "https://database.windows.net/.default" }));
conn.AccessToken = token.Token;
Azure.Identity.DefaultAzureCredential credential;
var managedIdentityClientId = ConfigurationManager.AppSettings["ManagedIdentityClientId"];
if(managedIdentityClientId != null ) {
    //User-assigned managed identity Client ID is passed in via ManagedIdentityClientId
    var defaultCredentialOptions = new DefaultAzureCredentialOptions { ManagedIdentityClientId = managedIdentityClientId };
    credential = new Azure.Identity.DefaultAzureCredential(defaultCredentialOptions);
}
else {
    //System-assigned managed identity or logged-in identity of Visual Studio, Visual Studio Code, Azure CLI or Azure PowerShell
    credential = new Azure.Identity.DefaultAzureCredential();
}
var conn = (System.Data.SqlClient.SqlConnection)Database.Connection;
var token = credential.GetToken(new Azure.Core.TokenRequestContext(new[] { "https://database.windows.net/.default" }));
conn.AccessToken = token.Token;
This code usesAzure.Identity.DefaultAzureCredentialto get a useable token for SQL Database from Microsoft Entra ID and then adds it to the database connection. While you can customizeDefaultAzureCredential, by default it's already versatile. When it runs in App Service, it uses the app's system-assigned managed identity by default. If you prefer to use a user-assigned managed identity, add a new App setting namedManagedIdentityClientIdand enter theClient IdGUID from your user-assigned managed identity in thevaluefield.   When it runs locally, it can get a token using the logged-in identity of Visual Studio, Visual Studio Code, Azure CLI, and Azure PowerShell.
DefaultAzureCredential
ManagedIdentityClientId
Client Id
value
InWeb.config, find the connection string calledMyDbConnectionand replace itsconnectionStringvalue with"server=tcp:<server-name>.database.windows.net;database=<db-name>;". Replace<server-name>and<db-name>with your server name and database name. This connection string is used by the default constructor inModels/MyDbContext.cs.That's every thing you need to connect to SQL Database. When you debug in Visual Studio, your code uses the Microsoft Entra user you configured in2. Set up your dev environment. You'll set up SQL Database later to allow connection from the managed identity of your App Service app.
InWeb.config, find the connection string calledMyDbConnectionand replace itsconnectionStringvalue with"server=tcp:<server-name>.database.windows.net;database=<db-name>;". Replace<server-name>and<db-name>with your server name and database name. This connection string is used by the default constructor inModels/MyDbContext.cs.
MyDbConnection
connectionString
"server=tcp:<server-name>.database.windows.net;database=<db-name>;"
That's every thing you need to connect to SQL Database. When you debug in Visual Studio, your code uses the Microsoft Entra user you configured in2. Set up your dev environment. You'll set up SQL Database later to allow connection from the managed identity of your App Service app.
TypeCtrl+F5to run the app again. The same CRUD app in your browser is now connecting to the Azure SQL Database directly, using Microsoft Entra authentication. This setup lets you run database migrations from Visual Studio.
TypeCtrl+F5to run the app again. The same CRUD app in your browser is now connecting to the Azure SQL Database directly, using Microsoft Entra authentication. This setup lets you run database migrations from Visual Studio.
Ctrl+F5
4. Use managed identity connectivity
Next, you configure your App Service app to connect to SQL Database with a system-assigned managed identity.
Note
The instructions in this section are for a system-assigned identity, To use a user-assigned identity, seeTutorial: Connect to Azure databases from App Service without secrets using a managed identity.
Enable managed identity on app
To enable a managed identity for your Azure app, use theaz webapp identity assigncommand in the Cloud Shell. In the following command, replace<app-name>.
az webapp identity assign --resource-group myResourceGroup --name <app-name>
az webapp identity assign --resource-group myResourceGroup --name <app-name>
Note
To enable managed identity for adeployment slot, add--slot <slot-name>and use the name of the slot in<slot-name>.
--slot <slot-name>
Here's an example of the output:
{
  "additionalProperties": {},
  "principalId": "aaaaaaaa-bbbb-cccc-1111-222222222222",
  "tenantId": "aaaabbbb-0000-cccc-1111-dddd2222eeee",
  "type": "SystemAssigned"
}
Grant permissions to managed identity
Note
If you want, you can add the identity to anMicrosoft Entra group, then grant SQL Database access to the Microsoft Entra group instead of the identity. For example, the following commands add the managed identity from the previous step to a new group calledmyAzureSQLDBAccessGroup:
$groupid=(az ad group create --display-name myAzureSQLDBAccessGroup --mail-nickname myAzureSQLDBAccessGroup --query objectId --output tsv)
$msiobjectid=(az webapp identity show --resource-group myResourceGroup --name <app-name> --query principalId --output tsv)
az ad group member add --group $groupid --member-id $msiobjectid
az ad group member list -g $groupid
$groupid=(az ad group create --display-name myAzureSQLDBAccessGroup --mail-nickname myAzureSQLDBAccessGroup --query objectId --output tsv)
$msiobjectid=(az webapp identity show --resource-group myResourceGroup --name <app-name> --query principalId --output tsv)
az ad group member add --group $groupid --member-id $msiobjectid
az ad group member list -g $groupid
In the Cloud Shell, sign in to SQL Database by using the SQLCMD command. Replace<server-name>with your server name,<db-name>with the database name your app uses, and<aad-user-name>and<aad-password>with your Microsoft Entra user's credentials.sqlcmd -S <server-name>.database.windows.net -d <db-name> -U <aad-user-name> -P "<aad-password>" -G -l 30
In the Cloud Shell, sign in to SQL Database by using the SQLCMD command. Replace<server-name>with your server name,<db-name>with the database name your app uses, and<aad-user-name>and<aad-password>with your Microsoft Entra user's credentials.
sqlcmd -S <server-name>.database.windows.net -d <db-name> -U <aad-user-name> -P "<aad-password>" -G -l 30
sqlcmd -S <server-name>.database.windows.net -d <db-name> -U <aad-user-name> -P "<aad-password>" -G -l 30
In the SQL prompt for the database you want, run the following commands to grant the minimum permissions your app needs. For example,CREATE USER [<identity-name>] FROM EXTERNAL PROVIDER With OBJECT_ID='xxx';
ALTER ROLE db_datareader ADD MEMBER [<identity-name>];
ALTER ROLE db_datawriter ADD MEMBER [<identity-name>];
ALTER ROLE db_ddladmin ADD MEMBER [<identity-name>];
GO<identity-name>is the name of the managed identity in Microsoft Entra ID. If the identity is system-assigned, the name is always the same as the name of your App Service app. For adeployment slot, the name of its system-assigned identity is<app-name>/slots/<slot-name>. To grant permissions for a Microsoft Entra group, use the group's display name instead (for example,myAzureSQLDBAccessGroup).
In the SQL prompt for the database you want, run the following commands to grant the minimum permissions your app needs. For example,
CREATE USER [<identity-name>] FROM EXTERNAL PROVIDER With OBJECT_ID='xxx';
ALTER ROLE db_datareader ADD MEMBER [<identity-name>];
ALTER ROLE db_datawriter ADD MEMBER [<identity-name>];
ALTER ROLE db_ddladmin ADD MEMBER [<identity-name>];
GO
CREATE USER [<identity-name>] FROM EXTERNAL PROVIDER With OBJECT_ID='xxx';
ALTER ROLE db_datareader ADD MEMBER [<identity-name>];
ALTER ROLE db_datawriter ADD MEMBER [<identity-name>];
ALTER ROLE db_ddladmin ADD MEMBER [<identity-name>];
GO
<identity-name>is the name of the managed identity in Microsoft Entra ID. If the identity is system-assigned, the name is always the same as the name of your App Service app. For adeployment slot, the name of its system-assigned identity is<app-name>/slots/<slot-name>. To grant permissions for a Microsoft Entra group, use the group's display name instead (for example,myAzureSQLDBAccessGroup).
TypeEXITto return to the Cloud Shell prompt.NoteThe back-end services of managed identities alsomaintains a token cachethat updates the token for a target resource only when it expires. If you make a mistake configuring your SQL Database permissions and try to modify the permissionsaftertrying to get a token with your app, you don't actually get a new token with the updated permissions until the cached token expires.NoteMicrosoft Entra ID and managed identities are not supported for on-premises SQL Server.
TypeEXITto return to the Cloud Shell prompt.
EXIT
Note
The back-end services of managed identities alsomaintains a token cachethat updates the token for a target resource only when it expires. If you make a mistake configuring your SQL Database permissions and try to modify the permissionsaftertrying to get a token with your app, you don't actually get a new token with the updated permissions until the cached token expires.
Note
Microsoft Entra ID and managed identities are not supported for on-premises SQL Server.
Modify connection string
Remember that the same changes you made inWeb.configorappsettings.jsonworks with the managed identity, so the only thing to do is to remove the existing connection string in App Service, which Visual Studio created deploying your app the first time. Use the following command, but replace<app-name>with the name of your app.
az webapp config connection-string delete --resource-group myResourceGroup --name <app-name> --setting-names MyDbConnection
az webapp config connection-string delete --resource-group myResourceGroup --name <app-name> --setting-names MyDbConnection
5. Publish your changes
All that's left now is to publish your changes to Azure.
ASP.NET
ASP.NET Core
If you came fromTutorial: Build an ASP.NET app in Azure with SQL Database, publish your changes in Visual Studio. In theSolution Explorer, right-click yourDotNetAppSqlDbproject and selectPublish.
If you came fromTutorial: Build an ASP.NET app in Azure with SQL Database, publish your changes in Visual Studio. In theSolution Explorer, right-click yourDotNetAppSqlDbproject and selectPublish.

In the publish page, selectPublish.ImportantEnsure that your app service name doesn't match with any existingApp Registrations. This will lead to Principal ID conflicts.
In the publish page, selectPublish.
Important
Ensure that your app service name doesn't match with any existingApp Registrations. This will lead to Principal ID conflicts.
If you came fromTutorial: Build an ASP.NET Core and SQL Database app in Azure App Service, publish your changes using Git, with the following commands:
git commit -am "configure managed identity"
git push azure main
git commit -am "configure managed identity"
git push azure main
When the new webpage shows your to-do list, your app is connecting to the database using the managed identity.

You should now be able to edit the to-do list as before.
Clean up resources
In the preceding steps, you created Azure resources in a resource group. If you don't expect to need these resources in the future, delete the resource group by running the following command in the Cloud Shell:
az group delete --name myResourceGroup
az group delete --name myResourceGroup
This command may take a minute to run.
Next steps
What you learned:
Enable managed identities
Grant SQL Database access to the managed identity
Configure Entity Framework to use Microsoft Entra authentication with SQL Database
Connect to SQL Database from Visual Studio using Microsoft Entra authentication
Secure with custom domain and certificate
Tutorial: Connect an App Service app to SQL Database on behalf of the signed-in user
Tutorial: Connect to Azure databases from App Service without secrets using a managed identity
Tutorial: Connect to Azure services that don't support managed identities (using Key Vault)
Tutorial: Isolate back-end communication with Virtual Network integration
Feedback
Was this page helpful?
Additional resources