Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Deploy an Azure API Management gateway on Azure Arc (preview)
Article
2023-06-16
4 contributors
In this article
APPLIES TO: Developer | Premium
With the integration between Azure API Management andAzure Arc on Kubernetes, you can deploy the API Management gateway component as anextension in an Azure Arc-enabled Kubernetes cluster.
Deploying the API Management gateway on an Azure Arc-enabled Kubernetes cluster expands API Management support for hybrid and multicloud environments. Enable the deployment using a cluster extension to make managing and applying policies to your Azure Arc-enabled cluster a consistent experience.
Important
API Management self-hosted gateway on Azure Arc is currently in preview. During preview, the API Management gateway extension is available in the following regions:
Asia (East, Southeast)
Australia (Central, Central 2, East & Southeast)
Brazil (South & Southeast)
Canada (Central, East)
Europe (North, West)
France (Central & South)
Germany (North & West Central)
India (Central, South, West, Jio central & Jio West)
Japan (East & West)
Korea (Central & South)
Norway (East & West)
South Africa (North & West)
Sweden (Central)
Switzerland (North & West)
United Arab Emirates (UAE - Central & North)
United Kingdom (UK -South)
United States (US - Central, Central EUAP, East, East 2, East 2 EUAP, North Central, South Central, West Central, West, West 2, West 3)
Note
You can also deploy the self-hosted gatewaydirectly to Kubernetes.
Prerequisites
Connect your Kubernetes clusterwithin a supported Azure Arc region.
Connect your Kubernetes clusterwithin a supported Azure Arc region.
Install thek8s-extensionAzure CLI extension:az extension add --name k8s-extensionIf you've already installed thek8s-extensionmodule, update to the latest version:az extension update --name k8s-extension
Install thek8s-extensionAzure CLI extension:
k8s-extension
az extension add --name k8s-extension
az extension add --name k8s-extension
If you've already installed thek8s-extensionmodule, update to the latest version:
k8s-extension
az extension update --name k8s-extension
az extension update --name k8s-extension
Create an Azure API Management instance.
Create an Azure API Management instance.
Provision a gateway resource in your Azure API Management instance.
Provision a gateway resource in your Azure API Management instance.
Deploy the API Management gateway extension using Azure CLI
In the Azure portal, navigate to your API Management instance.
In the Azure portal, navigate to your API Management instance.
SelectGatewaysfrom the side navigation menu.
SelectGatewaysfrom the side navigation menu.
Select and open your provisioned gateway resource from the list.
Select and open your provisioned gateway resource from the list.
In your provisioned gateway resource, clickDeploymentfrom the side navigation menu.
In your provisioned gateway resource, clickDeploymentfrom the side navigation menu.
Make note of theTokenandConfiguration URLvalues for the next step.
Make note of theTokenandConfiguration URLvalues for the next step.
In Azure CLI, deploy the gateway extension using theaz k8s-extension createcommand. Fill in thetokenandconfiguration URLvalues.The following example uses theservice.type='LoadBalancer'extension configuration. See moreavailable extension configurations.az k8s-extension create --cluster-type connectedClusters --cluster-name <cluster-name> \
    --resource-group <rg-name> --name <extension-name> --extension-type Microsoft.ApiManagement.Gateway \
    --scope namespace --target-namespace <namespace> \
    --configuration-settings gateway.configuration.uri='<Configuration URL>' \
    --config-protected-settings gateway.auth.token='<token>' \
    --configuration-settings service.type='LoadBalancer' --release-train previewTip-protected-flag forgateway.auth.tokenis optional, but recommended.
In Azure CLI, deploy the gateway extension using theaz k8s-extension createcommand. Fill in thetokenandconfiguration URLvalues.
az k8s-extension create
token
configuration URL
The following example uses theservice.type='LoadBalancer'extension configuration. See moreavailable extension configurations.
service.type='LoadBalancer'
az k8s-extension create --cluster-type connectedClusters --cluster-name <cluster-name> \
    --resource-group <rg-name> --name <extension-name> --extension-type Microsoft.ApiManagement.Gateway \
    --scope namespace --target-namespace <namespace> \
    --configuration-settings gateway.configuration.uri='<Configuration URL>' \
    --config-protected-settings gateway.auth.token='<token>' \
    --configuration-settings service.type='LoadBalancer' --release-train preview
az k8s-extension create --cluster-type connectedClusters --cluster-name <cluster-name> \
    --resource-group <rg-name> --name <extension-name> --extension-type Microsoft.ApiManagement.Gateway \
    --scope namespace --target-namespace <namespace> \
    --configuration-settings gateway.configuration.uri='<Configuration URL>' \
    --config-protected-settings gateway.auth.token='<token>' \
    --configuration-settings service.type='LoadBalancer' --release-train preview
Tip
-protected-flag forgateway.auth.tokenis optional, but recommended.
-protected-
gateway.auth.token
Verify deployment status using the following CLI command:az k8s-extension show --cluster-type connectedClusters --cluster-name <cluster-name> --resource-group <rg-name> --name <extension-name>
Verify deployment status using the following CLI command:
az k8s-extension show --cluster-type connectedClusters --cluster-name <cluster-name> --resource-group <rg-name> --name <extension-name>
az k8s-extension show --cluster-type connectedClusters --cluster-name <cluster-name> --resource-group <rg-name> --name <extension-name>
Navigate back to theGatewayslist to verify the gateway status shows a green check mark with a node count. This status means the deployed self-hosted gateway pods:Are successfully communicating with the API Management service.Have a regular "heartbeat".
Navigate back to theGatewayslist to verify the gateway status shows a green check mark with a node count. This status means the deployed self-hosted gateway pods:
Are successfully communicating with the API Management service.
Have a regular "heartbeat".
Deploy the API Management gateway extension using Azure portal
In the Azure portal, navigate to your Azure Arc-connected cluster.
In the Azure portal, navigate to your Azure Arc-connected cluster.
In the left menu, selectExtensions>+ Add>API Management gateway (preview).
In the left menu, selectExtensions>+ Add>API Management gateway (preview).
SelectCreate.
SelectCreate.
In theInstall API Management gatewaywindow, configure the gateway extension:Select the subscription and resource group for your API Management instance.InGateway details, select theAPI Management instanceandGateway name. Enter aNamespacescope for your extension and optionally a number ofReplicas, if supported in your API Management service tier.InKubernetes configuration, select the default configuration or a different configuration for your cluster. For options, seeavailable extension configurations.
In theInstall API Management gatewaywindow, configure the gateway extension:
Select the subscription and resource group for your API Management instance.
InGateway details, select theAPI Management instanceandGateway name. Enter aNamespacescope for your extension and optionally a number ofReplicas, if supported in your API Management service tier.
InKubernetes configuration, select the default configuration or a different configuration for your cluster. For options, seeavailable extension configurations.

On theMonitoringtab, optionally enable monitoring to upload metrics tracking requests to the gateway and backend. If enabled, select an existingLog Analyticsworkspace.
On theMonitoringtab, optionally enable monitoring to upload metrics tracking requests to the gateway and backend. If enabled, select an existingLog Analyticsworkspace.
SelectReview + installand thenInstall.
SelectReview + installand thenInstall.
Available extension configurations
The self-hosted gateway extension for Azure Arc provides many configuration settings to customize the extension for your environment. This section lists required deployment settings and optional settings for integration with Log Analytics. For a complete list of settings, see the self-hosted gateway extensionreference.
Required settings
The following extension configurations arerequired.
gateway.configuration.uri
gateway.auth.token
GatewayKey
service.type
LoadBalancer
NodePort
ClusterIP
Log Analytics settings
To enable monitoring of the self-hosted gateway, configure the following Log Analytics settings:
monitoring.customResourceId
monitoring.workspaceId
monitoring.ingestionKey
Note
If you haven't enabled Log Analytics:
Walk through theCreate a Log Analytics workspacequickstart.
Learn where to find theLog Analytics agent settings.
Related content
To learn more about the self-hosted gateway, seeAzure API Management self-hosted gateway overview.
Learn more about theobservability capabilities of the Azure API Management gateways.
Discover allAzure Arc-enabled Kubernetes extensions.
Learn more aboutAzure Arc-enabled Kubernetes.
Learn more about guidance torun the self-hosted gateway on Kubernetes in production.
For configuration options, see the self-hosted gateway extensionreference.
Feedback
Was this page helpful?
Additional resources