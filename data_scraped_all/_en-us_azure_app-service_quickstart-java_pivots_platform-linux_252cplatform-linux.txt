Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Quickstart: Create a Java app on Azure App Service
Article
2025-04-24
18 contributors
In this article
In this quickstart, you'll use theMaven Plugin for Azure App Service Web Appsto deploy a Java web application to a Linux Tomcat server inAzure App Service. App Service provides a highly scalable, self-patching web app hosting service. Use the tabs to switch between Tomcat, JBoss, or embedded server (Java SE) instructions.

If Maven isn't your preferred development tool, check out our similar tutorials for Java developers:
Gradle
IntelliJ IDEA
Eclipse
Visual Studio Code
If you don't have anAzure subscription, create anAzure free accountbefore you begin.
1 - Use Azure Cloud Shell
Azure hosts Azure Cloud Shell, an interactive shell environment that you can use through your browser. You can use either Bash or PowerShell with Cloud Shell to work with Azure services. You can use the Cloud Shell preinstalled commands to run the code in this article, without having to install anything on your local environment.
To start Azure Cloud Shell:
To use Azure Cloud Shell:
Start Cloud Shell.
Start Cloud Shell.
Select theCopybutton on a code block (or command block) to copy the code or command.
Select theCopybutton on a code block (or command block) to copy the code or command.
Paste the code or command into the Cloud Shell session by selectingCtrl+Shift+Von Windows and Linux, or by selectingCmd+Shift+Von macOS.
Paste the code or command into the Cloud Shell session by selectingCtrl+Shift+Von Windows and Linux, or by selectingCmd+Shift+Von macOS.
SelectEnterto run the code or command.
SelectEnterto run the code or command.
2 - Create a Java app
Execute the following Maven command in the Cloud Shell prompt to create a new app namedhelloworld:
helloworld
mvn archetype:generate "-DgroupId=example.demo" "-DartifactId=helloworld" "-DarchetypeArtifactId=maven-archetype-webapp" "-DarchetypeVersion=1.4" "-Dversion=1.0-SNAPSHOT"
mvn archetype:generate "-DgroupId=example.demo" "-DartifactId=helloworld" "-DarchetypeArtifactId=maven-archetype-webapp" "-DarchetypeVersion=1.4" "-Dversion=1.0-SNAPSHOT"
Then change your working directory to the project folder:
cd helloworld
cd helloworld
3 - Configure the Maven plugin
The deployment process to Azure App Service uses your Azure credentials from the Azure CLI automatically. If the Azure CLI isn't installed locally, then the Maven plugin authenticates with OAuth or device sign-in. For more information, seeauthentication with Maven plugins.
Run the Maven command shown next to configure the deployment. This command helps you to set up the App Service operating system, Java version, and Tomcat version.
mvn com.microsoft.azure:azure-webapp-maven-plugin:2.14.1:config
mvn com.microsoft.azure:azure-webapp-maven-plugin:2.14.1:config
ForCreate new run configuration, typeY, thenEnter.
ForCreate new run configuration, typeY, thenEnter.
ForDefine value for OS, type1for Windows, or2for Linux, thenEnter.
ForDefine value for OS, type1for Windows, or2for Linux, thenEnter.
ForDefine value for javaVersion, type1for Java 21, thenEnter.
ForDefine value for javaVersion, type1for Java 21, thenEnter.
ForDefine value for webContainer, type1for Tomcat 10.1, thenEnter.
ForDefine value for webContainer, type1for Tomcat 10.1, thenEnter.
ForDefine value for pricingTier, type3for P1V2, thenEnter.
ForDefine value for pricingTier, type3for P1V2, thenEnter.
ForConfirm, typeY, thenEnter.Please confirm webapp properties
AppName : helloworld-1745408005556
ResourceGroup : helloworld-1745408005556-rg
Region : centralus
PricingTier : P1V2
OS : Linux
Java Version: Java 21
Web server stack: Tomcat 10.1
Deploy to slot : false
Confirm (Y/N) [Y]: 
[INFO] Saving configuration to pom.
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  01:36 min
[INFO] Finished at: 2025-04-23T11:34:44Z
[INFO] ------------------------------------------------------------------------
ForConfirm, typeY, thenEnter.
Please confirm webapp properties
AppName : helloworld-1745408005556
ResourceGroup : helloworld-1745408005556-rg
Region : centralus
PricingTier : P1V2
OS : Linux
Java Version: Java 21
Web server stack: Tomcat 10.1
Deploy to slot : false
Confirm (Y/N) [Y]: 
[INFO] Saving configuration to pom.
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  01:36 min
[INFO] Finished at: 2025-04-23T11:34:44Z
[INFO] ------------------------------------------------------------------------
Please confirm webapp properties
AppName : helloworld-1745408005556
ResourceGroup : helloworld-1745408005556-rg
Region : centralus
PricingTier : P1V2
OS : Linux
Java Version: Java 21
Web server stack: Tomcat 10.1
Deploy to slot : false
Confirm (Y/N) [Y]: 
[INFO] Saving configuration to pom.
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  01:36 min
[INFO] Finished at: 2025-04-23T11:34:44Z
[INFO] ------------------------------------------------------------------------
After you've confirmed your choices, the plugin adds the above plugin element and requisite settings to your project'spom.xmlfile that configure your web app to run in Azure App Service.
pom.xml
The relevant portion of thepom.xmlfile should look similar to the following example.
pom.xml
<build>
    <plugins>
        <plugin>
            <groupId>com.microsoft.azure</groupId>
            <artifactId>>azure-webapp-maven-plugin</artifactId>
            <version>x.xx.x</version>
            <configuration>
                <schemaVersion>v2</schemaVersion>
                <resourceGroup>your-resourcegroup-name</resourceGroup>
                <appName>your-app-name</appName>
            ...
            </configuration>
        </plugin>
    </plugins>
</build>
<build>
    <plugins>
        <plugin>
            <groupId>com.microsoft.azure</groupId>
            <artifactId>>azure-webapp-maven-plugin</artifactId>
            <version>x.xx.x</version>
            <configuration>
                <schemaVersion>v2</schemaVersion>
                <resourceGroup>your-resourcegroup-name</resourceGroup>
                <appName>your-app-name</appName>
            ...
            </configuration>
        </plugin>
    </plugins>
</build>
You can modify the configurations for App Service directly in yourpom.xml.
pom.xml
For the complete list of configurations, seeCommon Configurations.
For configurations specific to App Service, seeAzure Web App: Configuration Details.
Be careful about the values of<appName>and<resourceGroup>(helloworld-1745408005556andhelloworld-1745408005556-rgaccordingly in the demo). They're used later.
<appName>
<resourceGroup>
helloworld-1745408005556
helloworld-1745408005556-rg
4 - Deploy the app
With all the configuration ready in yourpom.xmlfile, you can deploy your Java app to Azure with one single command.
mvn package azure-webapp:deploy
mvn package azure-webapp:deploy
Once you select from a list of available subscriptions, Maven deploys to Azure App Service. When deployment completes, your application is ready athttp://<appName>.azurewebsites.net/(http://helloworld-1745408005556.azurewebsites.netin the demo). Open the URL with your local web browser, you should see
http://<appName>.azurewebsites.net/
http://helloworld-1745408005556.azurewebsites.net

Congratulations!You've deployed your first Java app to App Service.
5 - Clean up resources
In the preceding steps, you created Azure resources in a resource group. If you don't need the resources in the future, delete the resource group from portal, or by running the following command in the Cloud Shell:
az group delete --name <your resource group name; for example: helloworld-1745408005556-rg> --yes
az group delete --name <your resource group name; for example: helloworld-1745408005556-rg> --yes
This command may take a minute to run.
In this quickstart, you use theMaven Plugin for Azure App Service Web Appsto deploy a Java web application with an embedded server toAzure App Service. App Service provides a highly scalable, self-patching web app hosting service. Use the tabs to switch between Tomcat, JBoss, or embedded server (Java SE) instructions.
The quickstart deploys either a Spring Boot app, Quarkus app, or embedded Tomcat using theazure-webapp-maven-pluginplugin.
Spring Boot
Quarkus
Embedded Tomcat



If Maven isn't your preferred development tool, check out our similar tutorials for Java developers:
Gradle
IntelliJ IDEA
Eclipse
Visual Studio Code
If you don't have anAzure subscription, create anAzure free accountbefore you begin.
1 - Use Azure Cloud Shell
Azure hosts Azure Cloud Shell, an interactive shell environment that you can use through your browser. You can use either Bash or PowerShell with Cloud Shell to work with Azure services. You can use the Cloud Shell preinstalled commands to run the code in this article, without having to install anything on your local environment.
To start Azure Cloud Shell:
To use Azure Cloud Shell:
Start Cloud Shell.
Start Cloud Shell.
Select theCopybutton on a code block (or command block) to copy the code or command.
Select theCopybutton on a code block (or command block) to copy the code or command.
Paste the code or command into the Cloud Shell session by selectingCtrl+Shift+Von Windows and Linux, or by selectingCmd+Shift+Von macOS.
Paste the code or command into the Cloud Shell session by selectingCtrl+Shift+Von Windows and Linux, or by selectingCmd+Shift+Von macOS.
SelectEnterto run the code or command.
SelectEnterto run the code or command.
2 - Get the sample app
Spring Boot
Quarkus
Embedded Tomcat
Download and extract thedefault Spring Boot web application template. This repository is cloned for you when you run theSpring CLIcommandspring boot new my-webapp.git clone https://github.com/rd-1-2022/rest-service my-webapp
Download and extract thedefault Spring Boot web application template. This repository is cloned for you when you run theSpring CLIcommandspring boot new my-webapp.
spring boot new my-webapp
git clone https://github.com/rd-1-2022/rest-service my-webapp
git clone https://github.com/rd-1-2022/rest-service my-webapp
Change your working directory to the project folder:cd my-webapp
Change your working directory to the project folder:
cd my-webapp
cd my-webapp
Generate a new Quarkus app namedquarkus-hello-azurewith the following Maven command:mvn io.quarkus.platform:quarkus-maven-plugin:3.21.3:create \
    -DprojectGroupId=org.acme \
    -DprojectArtifactId=quarkus-hello-azure  \
    -Dextensions='resteasy-reactive'
Generate a new Quarkus app namedquarkus-hello-azurewith the following Maven command:
quarkus-hello-azure
mvn io.quarkus.platform:quarkus-maven-plugin:3.21.3:create \
    -DprojectGroupId=org.acme \
    -DprojectArtifactId=quarkus-hello-azure  \
    -Dextensions='resteasy-reactive'
mvn io.quarkus.platform:quarkus-maven-plugin:3.21.3:create \
    -DprojectGroupId=org.acme \
    -DprojectArtifactId=quarkus-hello-azure  \
    -Dextensions='resteasy-reactive'
Change your working directory to the project folder:cd quarkus-hello-azure
Change your working directory to the project folder:
cd quarkus-hello-azure
cd quarkus-hello-azure
Download and extract theembeddedTomcatExamplerepository, or clone it locally by runninggit clone:git clone https://github.com/Azure-Samples/java-docs-embedded-tomcat
Download and extract theembeddedTomcatExamplerepository, or clone it locally by runninggit clone:
git clone
git clone https://github.com/Azure-Samples/java-docs-embedded-tomcat
git clone https://github.com/Azure-Samples/java-docs-embedded-tomcat
Change your working directory to the project folder:cd java-docs-embedded-tomcatThe application is run using the standardTomcatclass (seeMain.javain the sample).
Change your working directory to the project folder:
cd java-docs-embedded-tomcat
cd java-docs-embedded-tomcat
The application is run using the standardTomcatclass (seeMain.javain the sample).
3 - Configure the Maven plugin
The deployment process to Azure App Service uses your Azure credentials from the Azure CLI automatically. If the Azure CLI isn't installed locally, then the Maven plugin authenticates with OAuth or device sign-in. For more information, seeauthentication with Maven plugins.
Run the Maven command shown next to configure the deployment. This command helps you to set up the App Service operating system, Java version, and Tomcat version.
mvn com.microsoft.azure:azure-webapp-maven-plugin:2.14.1:config
mvn com.microsoft.azure:azure-webapp-maven-plugin:2.14.1:config
ForCreate new run configuration, typeY, thenEnter.
ForCreate new run configuration, typeY, thenEnter.
ForDefine value for OS, type2for Linux, thenEnter.
ForDefine value for OS, type2for Linux, thenEnter.
ForDefine value for javaVersion, type1for Java 21, thenEnter.
ForDefine value for javaVersion, type1for Java 21, thenEnter.
ForDefine value for pricingTier, type3for P1v2, thenEnter.
ForDefine value for pricingTier, type3for P1v2, thenEnter.
ForConfirm, typeY, thenEnter.Please confirm webapp properties
AppName : <generated-app-name>
ResourceGroup : <generated-app-name>-rg
Region : centralus
PricingTier : P1v2
OS : Linux
Java Version: Java 21
Web server stack: Java SE
Deploy to slot : false
Confirm (Y/N) [Y]: 
[INFO] Saving configuration to pom.
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  47.533 s
[INFO] Finished at: 2025-04-23T12:20:08Z
[INFO] ------------------------------------------------------------------------
ForConfirm, typeY, thenEnter.
Please confirm webapp properties
AppName : <generated-app-name>
ResourceGroup : <generated-app-name>-rg
Region : centralus
PricingTier : P1v2
OS : Linux
Java Version: Java 21
Web server stack: Java SE
Deploy to slot : false
Confirm (Y/N) [Y]: 
[INFO] Saving configuration to pom.
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  47.533 s
[INFO] Finished at: 2025-04-23T12:20:08Z
[INFO] ------------------------------------------------------------------------
Please confirm webapp properties
AppName : <generated-app-name>
ResourceGroup : <generated-app-name>-rg
Region : centralus
PricingTier : P1v2
OS : Linux
Java Version: Java 21
Web server stack: Java SE
Deploy to slot : false
Confirm (Y/N) [Y]: 
[INFO] Saving configuration to pom.
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  47.533 s
[INFO] Finished at: 2025-04-23T12:20:08Z
[INFO] ------------------------------------------------------------------------
After you confirm your choices, the plugin adds the above plugin element and requisite settings to your project'spom.xmlfile that configure your web app to run in Azure App Service.
pom.xml
The relevant portion of thepom.xmlfile should look similar to the following example.
pom.xml
<build>
    <plugins>
        <plugin>
            <groupId>com.microsoft.azure</groupId>
            <artifactId>>azure-webapp-maven-plugin</artifactId>
            <version>x.xx.x</version>
            <configuration>
                <schemaVersion>v2</schemaVersion>
                <resourceGroup>your-resourcegroup-name</resourceGroup>
                <appName>your-app-name</appName>
            ...
            </configuration>
        </plugin>
    </plugins>
</build>
<build>
    <plugins>
        <plugin>
            <groupId>com.microsoft.azure</groupId>
            <artifactId>>azure-webapp-maven-plugin</artifactId>
            <version>x.xx.x</version>
            <configuration>
                <schemaVersion>v2</schemaVersion>
                <resourceGroup>your-resourcegroup-name</resourceGroup>
                <appName>your-app-name</appName>
            ...
            </configuration>
        </plugin>
    </plugins>
</build>
You can modify the configurations for App Service directly in yourpom.xml.
pom.xml
For the complete list of configurations, seeCommon Configurations.
For configurations specific to App Service, seeAzure Web App: Configuration Details.
Be careful about the values of<appName>and<resourceGroup>. They're used later.
<appName>
<resourceGroup>
4 - Deploy the app
With all the configuration ready in yourpom.xmlfile, you can deploy your Java app to Azure with one single command.
Build the JAR file using the following command(s):Spring BootQuarkusEmbedded Tomcatmvn clean packageTipSpring Boot produces two JAR files withmvn package, butazure-webapp-maven-pluginpicks the right JAR file to deploy automatically.echo "%prod.quarkus.http.port=80" >> src/main/resources/application.properties
mvn clean package -Dquarkus.package.jar.type=uber-jarIn these commands:You set the Quarkus port in theapplication.propertiesfile to match the default port that the Linux Java container uses.quarkus.package.jar.type=uber-jartells Maven togenerate an Uber-Jar, which includes all dependencies in the JAR file.TipQuarkus produces two JAR files withmvn package, butazure-webapp-maven-pluginpicks the right JAR file to deploy automatically.mvn clean packageTo make the application it deployable usingazure-webapp-maven-plugin, and running on Azure App Service, the sample configures thepackagegoal as follows:Build a single uber JAR file, which contains everything the application needs to run.Create anexecutable JARby specifying the Tomcat class as the start-up class.Replace the original artifact with the uber JAR to ensure that the deploy step deploys the right file.
Build the JAR file using the following command(s):
Spring Boot
Quarkus
Embedded Tomcat
mvn clean package
mvn clean package
Tip
Spring Boot produces two JAR files withmvn package, butazure-webapp-maven-pluginpicks the right JAR file to deploy automatically.
mvn package
azure-webapp-maven-plugin
echo "%prod.quarkus.http.port=80" >> src/main/resources/application.properties
mvn clean package -Dquarkus.package.jar.type=uber-jar
echo "%prod.quarkus.http.port=80" >> src/main/resources/application.properties
mvn clean package -Dquarkus.package.jar.type=uber-jar
In these commands:
You set the Quarkus port in theapplication.propertiesfile to match the default port that the Linux Java container uses.
quarkus.package.jar.type=uber-jartells Maven togenerate an Uber-Jar, which includes all dependencies in the JAR file.
quarkus.package.jar.type=uber-jar
Tip
Quarkus produces two JAR files withmvn package, butazure-webapp-maven-pluginpicks the right JAR file to deploy automatically.
mvn package
azure-webapp-maven-plugin
mvn clean package
mvn clean package
To make the application it deployable usingazure-webapp-maven-plugin, and running on Azure App Service, the sample configures thepackagegoal as follows:
package
Build a single uber JAR file, which contains everything the application needs to run.
Create anexecutable JARby specifying the Tomcat class as the start-up class.
Replace the original artifact with the uber JAR to ensure that the deploy step deploys the right file.
Deploy to Azure by using the following command:mvn azure-webapp:deployOnce you select from a list of available subscriptions, Maven deploys to Azure App Service. When the deployment completes, you see the following output:[INFO] Successfully deployed the artifact to https://<app-name>.azurewebsites.net
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  02:20 min
[INFO] Finished at: 2023-07-26T12:47:50Z
[INFO] ------------------------------------------------------------------------Your application is ready athttp://<appName>.azurewebsites.net/.
Deploy to Azure by using the following command:
mvn azure-webapp:deploy
mvn azure-webapp:deploy
Once you select from a list of available subscriptions, Maven deploys to Azure App Service. When the deployment completes, you see the following output:
[INFO] Successfully deployed the artifact to https://<app-name>.azurewebsites.net
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  02:20 min
[INFO] Finished at: 2023-07-26T12:47:50Z
[INFO] ------------------------------------------------------------------------
[INFO] Successfully deployed the artifact to https://<app-name>.azurewebsites.net
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  02:20 min
[INFO] Finished at: 2023-07-26T12:47:50Z
[INFO] ------------------------------------------------------------------------
Your application is ready athttp://<appName>.azurewebsites.net/.
http://<appName>.azurewebsites.net/
Spring Boot
Quarkus
Embedded Tomcat
Open the URLhttp://<appName>.azurewebsites.net/greetingwith your local web browser (note the/greetingpath), and you should see:
http://<appName>.azurewebsites.net/greeting
/greeting

Open the URLhttp://<appName>.azurewebsites.net/hellowith your local web browser (note the/hellopath), and you should see:
http://<appName>.azurewebsites.net/hello
/hello

Open the URLl with your local web browser, and you should see:

Congratulations!You deployed your first Java app to App Service.
5 - Clean up resources
In the preceding steps, you created Azure resources in a resource group. If you don't need the resources in the future, delete the resource group from portal, or by running the following command in the Cloud Shell:
az group delete --name <your resource group name; for example: quarkus-hello-azure-1690375364238-rg> --yes
az group delete --name <your resource group name; for example: quarkus-hello-azure-1690375364238-rg> --yes
This command might take a minute to run.
In this quickstart, you'll use theMaven Plugin for Azure App Service Web Appsto deploy a Java web application to a Linux JBoss EAP server inAzure App Service. App Service provides a highly scalable, self-patching web app hosting service. Use the tabs to switch between Tomcat, JBoss, or embedded server (Java SE) instructions.

If Maven isn't your preferred development tool, check out our similar tutorials for Java developers:
Gradle
IntelliJ IDEA
Eclipse
Visual Studio Code
If you don't have anAzure subscription, create anAzure free accountbefore you begin.
1 - Use Azure Cloud Shell
Azure hosts Azure Cloud Shell, an interactive shell environment that you can use through your browser. You can use either Bash or PowerShell with Cloud Shell to work with Azure services. You can use the Cloud Shell preinstalled commands to run the code in this article, without having to install anything on your local environment.
To start Azure Cloud Shell:
To use Azure Cloud Shell:
Start Cloud Shell.
Start Cloud Shell.
Select theCopybutton on a code block (or command block) to copy the code or command.
Select theCopybutton on a code block (or command block) to copy the code or command.
Paste the code or command into the Cloud Shell session by selectingCtrl+Shift+Von Windows and Linux, or by selectingCmd+Shift+Von macOS.
Paste the code or command into the Cloud Shell session by selectingCtrl+Shift+Von Windows and Linux, or by selectingCmd+Shift+Von macOS.
SelectEnterto run the code or command.
SelectEnterto run the code or command.
2 - Create a Java app
Clone the Pet Store demo application.
git clone https://github.com/Azure-Samples/app-service-java-quickstart
git clone https://github.com/Azure-Samples/app-service-java-quickstart
Change directory to the completed pet store project and build it.
Tip
Thepetstore-ee7sample requiresJava 11 or newer. Thebooty-duke-app-servicesample project requiresJava 17. If your installed version of Java is less than 17, run the build from within thepetstore-ee7directory, rather than at the top level.
petstore-ee7
booty-duke-app-service
petstore-ee7
cd app-service-java-quickstart
git checkout 20230308
cd petstore-ee7
mvn clean install
cd app-service-java-quickstart
git checkout 20230308
cd petstore-ee7
mvn clean install
If you see a message about being indetached HEADstate, this message is safe to ignore. Because you won't make any Git commit in this quickstart, detached HEAD state is appropriate.
3 - Configure the Maven plugin
The deployment process to Azure App Service uses your Azure credentials from the Azure CLI automatically. If the Azure CLI isn't installed locally, then the Maven plugin authenticates with OAuth or device sign-in. For more information, seeauthentication with Maven plugins.
Run the Maven command shown next to configure the deployment. This command helps you to set up the App Service operating system, Java version, and Tomcat version.
mvn com.microsoft.azure:azure-webapp-maven-plugin:2.14.1:config
mvn com.microsoft.azure:azure-webapp-maven-plugin:2.14.1:config
ForCreate new run configuration, typeY, thenEnter.
ForCreate new run configuration, typeY, thenEnter.
ForDefine value for OS, type2for Linux, thenEnter.
ForDefine value for OS, type2for Linux, thenEnter.
ForDefine value for javaVersion, type2for Java 17, thenEnter. If you select Java 21, you won't see Jbosseap as an option later.
ForDefine value for javaVersion, type2for Java 17, thenEnter. If you select Java 21, you won't see Jbosseap as an option later.
ForDefine value for webContainer, type4for Jbosseap 7, thenEnter.
ForDefine value for webContainer, type4for Jbosseap 7, thenEnter.
ForDefine value for pricingTier, type1for P1v3, thenEnter.
ForDefine value for pricingTier, type1for P1v3, thenEnter.
ForConfirm, typeY, thenEnter.Please confirm webapp properties
AppName : petstoreee7-1745409173307
ResourceGroup : petstoreee7-1745409173307-rg
Region : centralus
PricingTier : P1v3
OS : Linux
Java Version: Java 17
Web server stack: Jbosseap 4
Deploy to slot : false
Confirm (Y/N) [Y]: 
[INFO] Saving configuration to pom.
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  01:36 min
[INFO] Finished at: 2025-04-23T11:54:22Z
[INFO] ------------------------------------------------------------------------
ForConfirm, typeY, thenEnter.
Please confirm webapp properties
AppName : petstoreee7-1745409173307
ResourceGroup : petstoreee7-1745409173307-rg
Region : centralus
PricingTier : P1v3
OS : Linux
Java Version: Java 17
Web server stack: Jbosseap 4
Deploy to slot : false
Confirm (Y/N) [Y]: 
[INFO] Saving configuration to pom.
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  01:36 min
[INFO] Finished at: 2025-04-23T11:54:22Z
[INFO] ------------------------------------------------------------------------
Please confirm webapp properties
AppName : petstoreee7-1745409173307
ResourceGroup : petstoreee7-1745409173307-rg
Region : centralus
PricingTier : P1v3
OS : Linux
Java Version: Java 17
Web server stack: Jbosseap 4
Deploy to slot : false
Confirm (Y/N) [Y]: 
[INFO] Saving configuration to pom.
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  01:36 min
[INFO] Finished at: 2025-04-23T11:54:22Z
[INFO] ------------------------------------------------------------------------
After you've confirmed your choices, the plugin adds the above plugin element and requisite settings to your project'spom.xmlfile that configure your web app to run in Azure App Service.
pom.xml
The relevant portion of thepom.xmlfile should look similar to the following example.
pom.xml
<build>
    <plugins>
        <plugin>
            <groupId>com.microsoft.azure</groupId>
            <artifactId>>azure-webapp-maven-plugin</artifactId>
            <version>x.xx.x</version>
            <configuration>
                <schemaVersion>v2</schemaVersion>
                <resourceGroup>your-resourcegroup-name</resourceGroup>
                <appName>your-app-name</appName>
            ...
            </configuration>
        </plugin>
    </plugins>
</build>
<build>
    <plugins>
        <plugin>
            <groupId>com.microsoft.azure</groupId>
            <artifactId>>azure-webapp-maven-plugin</artifactId>
            <version>x.xx.x</version>
            <configuration>
                <schemaVersion>v2</schemaVersion>
                <resourceGroup>your-resourcegroup-name</resourceGroup>
                <appName>your-app-name</appName>
            ...
            </configuration>
        </plugin>
    </plugins>
</build>
You can modify the configurations for App Service directly in yourpom.xml.
pom.xml
For the complete list of configurations, seeCommon Configurations.
For configurations specific to App Service, seeAzure Web App: Configuration Details.
Be careful about the values of<appName>and<resourceGroup>(petstoreee7-1745409173307andpetstoreee7-1745409173307-rgaccordingly in the demo). They're used later.
<appName>
<resourceGroup>
petstoreee7-1745409173307
petstoreee7-1745409173307-rg
4 - Deploy the app
With all the configuration ready in yourpom.xmlfile, you can deploy your Java app to Azure with one single command.
# Disable testing, as it requires Wildfly to be installed locally.
mvn package azure-webapp:deploy -DskipTests
# Disable testing, as it requires Wildfly to be installed locally.
mvn package azure-webapp:deploy -DskipTests
Once you select from a list of available subscriptions, Maven deploys to Azure App Service. When deployment completes, your application is ready athttp://<appName>.azurewebsites.net/(http://petstoreee7-1745409173307.azurewebsites.netin the demo). Open the URL with your local web browser, you should see
http://<appName>.azurewebsites.net/
http://petstoreee7-1745409173307.azurewebsites.net

Congratulations!You've deployed your first Java app to App Service.
5 - Clean up resources
In the preceding steps, you created Azure resources in a resource group. If you don't need the resources in the future, delete the resource group from portal, or by running the following command in the Cloud Shell:
az group delete --name <your resource group name; for example: petstoreee7-1745409173307-rg> --yes
az group delete --name <your resource group name; for example: petstoreee7-1745409173307-rg> --yes
This command may take a minute to run.
Next steps
Tutorial: Build a Tomcat web app with Azure App Service on Linux and MySQL
Tutorial: Build a Java Spring Boot web app with Azure App Service on Linux and Azure Cosmos DB
Set up CI/CD
Pricing Information
Aggregate Logs and Metrics
Scale up
Azure for Java Developers Resources
Configure your Java app
Secure with custom domain and certificate
Feedback
Was this page helpful?
Additional resources