Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Customize alert notifications by using Logic Apps
Article
2025-03-10
9 contributors
In this article
This article shows you how to create a logic app and integrate it with an Azure Monitor alert.
You can useAzure Logic Appsto build and customize workflows for integration. Use Logic Apps to customize your alert notifications. You can:
Customize the alerts email by using your own email subject and body format.
Customize the alerts email by using your own email subject and body format.
Customize the alert metadata by looking up tags for affected resources or fetching a log query search result. For information on how to access the search result rows that contain alerts data, see:Azure Monitor Log Analytics API response formatQuery/management HTTP response
Customize the alert metadata by looking up tags for affected resources or fetching a log query search result. For information on how to access the search result rows that contain alerts data, see:
Azure Monitor Log Analytics API response format
Query/management HTTP response
Integrate with external services by using existing connectors like Outlook, Microsoft Teams, Slack, and PagerDuty. You can also configure the logic app for your own services.
Integrate with external services by using existing connectors like Outlook, Microsoft Teams, Slack, and PagerDuty. You can also configure the logic app for your own services.
This example creates a logic app that uses thecommon alerts schemato send details from the alert.
Create a logic app
In theAzure portal, create a new logic app. In theSearchbar at the top of the page, enterLogic appsand select it from the drop-down menu.
In theAzure portal, create a new logic app. In theSearchbar at the top of the page, enterLogic appsand select it from the drop-down menu.
On theLogic appspage, selectAdd.
On theLogic appspage, selectAdd.
UnderConsumption, selectMulti-tenant.
UnderConsumption, selectMulti-tenant.
On the next page, select theSubscriptionandResource groupfor your logic app.
On the next page, select theSubscriptionandResource groupfor your logic app.
Set aLogic App nameand choose aRegion.
Set aLogic App nameand choose aRegion.
SelectReview + create>Create.
SelectReview + create>Create.

SelectGo to resourceafter the deployment is finished.
SelectGo to resourceafter the deployment is finished.
Set up a trigger
On theLogic apppage, selectEditin the top action bar.
On theLogic apppage, selectEditin the top action bar.
SelectAdd a trigger, search forWhen a HTTP request is received, and select it from the search results.
SelectAdd a trigger, search forWhen a HTTP request is received, and select it from the search results.

Paste the common alert schema into theRequest Body JSON Schemafield from the following JSON:{
    "type": "object",
    "properties": {
        "schemaId": {
            "type": "string"
        },
        "data": {
            "type": "object",
            "properties": {
                "essentials": {
                    "type": "object",
                    "properties": {
                        "alertId": {
                            "type": "string"
                        },
                        "alertRule": {
                            "type": "string"
                        },
                        "severity": {
                            "type": "string"
                        },
                        "signalType": {
                            "type": "string"
                        },
                        "monitorCondition": {
                            "type": "string"
                        },
                        "monitoringService": {
                            "type": "string"
                        },
                        "alertTargetIDs": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "originAlertId": {
                            "type": "string"
                        },
                        "firedDateTime": {
                            "type": "string"
                        },
                        "resolvedDateTime": {
                            "type": "string"
                        },
                        "description": {
                            "type": "string"
                        },
                        "essentialsVersion": {
                            "type": "string"
                        },
                        "alertContextVersion": {
                            "type": "string"
                        }
                    }
                },
                "alertContext": {
                    "type": "object",
                    "properties": {}
                }
            }
        }
    }
}
Paste the common alert schema into theRequest Body JSON Schemafield from the following JSON:
{
    "type": "object",
    "properties": {
        "schemaId": {
            "type": "string"
        },
        "data": {
            "type": "object",
            "properties": {
                "essentials": {
                    "type": "object",
                    "properties": {
                        "alertId": {
                            "type": "string"
                        },
                        "alertRule": {
                            "type": "string"
                        },
                        "severity": {
                            "type": "string"
                        },
                        "signalType": {
                            "type": "string"
                        },
                        "monitorCondition": {
                            "type": "string"
                        },
                        "monitoringService": {
                            "type": "string"
                        },
                        "alertTargetIDs": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "originAlertId": {
                            "type": "string"
                        },
                        "firedDateTime": {
                            "type": "string"
                        },
                        "resolvedDateTime": {
                            "type": "string"
                        },
                        "description": {
                            "type": "string"
                        },
                        "essentialsVersion": {
                            "type": "string"
                        },
                        "alertContextVersion": {
                            "type": "string"
                        }
                    }
                },
                "alertContext": {
                    "type": "object",
                    "properties": {}
                }
            }
        }
    }
}
{
    "type": "object",
    "properties": {
        "schemaId": {
            "type": "string"
        },
        "data": {
            "type": "object",
            "properties": {
                "essentials": {
                    "type": "object",
                    "properties": {
                        "alertId": {
                            "type": "string"
                        },
                        "alertRule": {
                            "type": "string"
                        },
                        "severity": {
                            "type": "string"
                        },
                        "signalType": {
                            "type": "string"
                        },
                        "monitorCondition": {
                            "type": "string"
                        },
                        "monitoringService": {
                            "type": "string"
                        },
                        "alertTargetIDs": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "originAlertId": {
                            "type": "string"
                        },
                        "firedDateTime": {
                            "type": "string"
                        },
                        "resolvedDateTime": {
                            "type": "string"
                        },
                        "description": {
                            "type": "string"
                        },
                        "essentialsVersion": {
                            "type": "string"
                        },
                        "alertContextVersion": {
                            "type": "string"
                        }
                    }
                },
                "alertContext": {
                    "type": "object",
                    "properties": {}
                }
            }
        }
    }
}

(Optional). You can customize the alert notification by extracting information about the affected resource on which the alert fired, for example, the resource's tags. You can then include those resource tags in the alert payload and use the information in your logical expressions for sending the notifications. To do this step, we will:Create a variable for the affected resource IDs.Split the resource ID into an array so that we can use its various elements (for example, subscription and resource group).Use the Azure Resource Manager connector to read the resource's metadata.Fetch the resource's tags, which can then be used in subsequent steps of the logic app.Select+>Add an actionto insert a new step.In theSearchfield, search for and selectInitialize variable.In theNamefield, enter the name of the variable, such asAffectedResource.In theTypefield, selectArray.In theValuefield, selectfxto open the Function pop-up window. Enter the stringsplit(triggerBody()?['data']?['essentials']?['alertTargetIDs'][0], '/')in the empty field at the top and selectAdd.Select+>Add an actionto insert another step.In theSearchfield, search for and selectAzure Resource Manager>See more>Read a resource.Select anAuthenticationmethod andSign in.Populate the fields of theRead a resourceaction with the array values from theAffectedResourcevariable. In each of the fields, select the field and scroll down toEnter a custom value. Selectfxto open the Function pop-up window. Enter the corresponding string from this table in the empty field at the top and selectAdd.FieldString valueSubscriptionvariables('AffectedResource')[2]Resource Groupvariables('AffectedResource')[4]Resource Providervariables('AffectedResource')[6]Short Resource IDconcat(variables('AffectedResource')[7], '/', variables('AffectedResource')[8])Client Api VersionResource type's API versionTo find your resource type's API version, select theJSON viewlink on the top right-hand side of the resource overview page.TheResource JSONpage is displayed with theResourceIDandAPI versionat the top of the page.The dynamic content now includes tags from the affected resource. You can use those tags when you configure your notifications as described in the following steps.
(Optional). You can customize the alert notification by extracting information about the affected resource on which the alert fired, for example, the resource's tags. You can then include those resource tags in the alert payload and use the information in your logical expressions for sending the notifications. To do this step, we will:
Create a variable for the affected resource IDs.
Split the resource ID into an array so that we can use its various elements (for example, subscription and resource group).
Use the Azure Resource Manager connector to read the resource's metadata.
Fetch the resource's tags, which can then be used in subsequent steps of the logic app.
Select+>Add an actionto insert a new step.
Select+>Add an actionto insert a new step.
In theSearchfield, search for and selectInitialize variable.
In theSearchfield, search for and selectInitialize variable.
In theNamefield, enter the name of the variable, such asAffectedResource.
In theNamefield, enter the name of the variable, such asAffectedResource.
In theTypefield, selectArray.
In theTypefield, selectArray.
In theValuefield, selectfxto open the Function pop-up window. Enter the stringsplit(triggerBody()?['data']?['essentials']?['alertTargetIDs'][0], '/')in the empty field at the top and selectAdd.
In theValuefield, selectfxto open the Function pop-up window. Enter the stringsplit(triggerBody()?['data']?['essentials']?['alertTargetIDs'][0], '/')in the empty field at the top and selectAdd.
split(triggerBody()?['data']?['essentials']?['alertTargetIDs'][0], '/')

Select+>Add an actionto insert another step.
Select+>Add an actionto insert another step.
In theSearchfield, search for and selectAzure Resource Manager>See more>Read a resource.
In theSearchfield, search for and selectAzure Resource Manager>See more>Read a resource.
Select anAuthenticationmethod andSign in.
Select anAuthenticationmethod andSign in.
Populate the fields of theRead a resourceaction with the array values from theAffectedResourcevariable. In each of the fields, select the field and scroll down toEnter a custom value. Selectfxto open the Function pop-up window. Enter the corresponding string from this table in the empty field at the top and selectAdd.FieldString valueSubscriptionvariables('AffectedResource')[2]Resource Groupvariables('AffectedResource')[4]Resource Providervariables('AffectedResource')[6]Short Resource IDconcat(variables('AffectedResource')[7], '/', variables('AffectedResource')[8])Client Api VersionResource type's API versionTo find your resource type's API version, select theJSON viewlink on the top right-hand side of the resource overview page.TheResource JSONpage is displayed with theResourceIDandAPI versionat the top of the page.
Populate the fields of theRead a resourceaction with the array values from theAffectedResourcevariable. In each of the fields, select the field and scroll down toEnter a custom value. Selectfxto open the Function pop-up window. Enter the corresponding string from this table in the empty field at the top and selectAdd.
AffectedResource
variables('AffectedResource')[2]
variables('AffectedResource')[4]
variables('AffectedResource')[6]
concat(variables('AffectedResource')[7], '/', variables('AffectedResource')[8])
To find your resource type's API version, select theJSON viewlink on the top right-hand side of the resource overview page.
TheResource JSONpage is displayed with theResourceIDandAPI versionat the top of the page.
The dynamic content now includes tags from the affected resource. You can use those tags when you configure your notifications as described in the following steps.
Set up an action
Select+>Add an actionto insert a new step.
Send an email
Post a Teams message
In the search field, search forSend an email (V2).
In the search field, search forSend an email (V2).
UnderOffice 365 Outlook, selectSend an email (V2)from the list of actions.
UnderOffice 365 Outlook, selectSend an email (V2)from the list of actions.

Sign in to Office 365 when you're prompted to create a connection.
Sign in to Office 365 when you're prompted to create a connection.
Enter the email address to send the alert to theTofield.
Enter the email address to send the alert to theTofield.
In theSubjectfield, create the subject text by entering static text and including content taken from the alert payload by choosing fields from theDynamic contentlist.For example:Alert:SelectalertRulefrom theDynamic contentlist.with severity:Selectseverityfrom theDynamic contentlist.has condition:SelectmonitorConditionfrom theDynamic contentlist.
In theSubjectfield, create the subject text by entering static text and including content taken from the alert payload by choosing fields from theDynamic contentlist.
For example:
Alert:SelectalertRulefrom theDynamic contentlist.
with severity:Selectseverityfrom theDynamic contentlist.
has condition:SelectmonitorConditionfrom theDynamic contentlist.
Create the emailBodyby entering static text and including content taken from the alert payload by choosing fields from theDynamic contentlist.For example:Monitoring condition:SelectmonitorConditionfrom theDynamic contentlist.Date fired:SelectfiredDateTimefrom theDynamic contentlist.Affected resources:SelectalertTargetIDsfrom theDynamic contentlist.
Create the emailBodyby entering static text and including content taken from the alert payload by choosing fields from theDynamic contentlist.
For example:
Monitoring condition:SelectmonitorConditionfrom theDynamic contentlist.
Date fired:SelectfiredDateTimefrom theDynamic contentlist.
Affected resources:SelectalertTargetIDsfrom theDynamic contentlist.
SelectSave.
SelectSave.

You created a logic app that sends an email to the specified address, with details from the alert that triggered it.
The next step is to create an action group to trigger your logic app.
In the search field, search forPost message in a chat or channel.
In the search field, search forPost message in a chat or channel.
UnderMicrosoft Teams, selectPost message in a chat or channelfrom the list of actions.
UnderMicrosoft Teams, selectPost message in a chat or channelfrom the list of actions.

Sign in to Teams when you're prompted to create a connection.
Sign in to Teams when you're prompted to create a connection.
SelectUserfrom thePost asdropdown.
SelectUserfrom thePost asdropdown.
SelectGroup chatfrom thePost indropdown.
SelectGroup chatfrom thePost indropdown.
Select your group from theGroup chatdropdown.
Select your group from theGroup chatdropdown.
Create the message text in theMessagefield by entering static text and including content taken from the alert payload by choosing fields from theDynamic contentlist.For example:Alert:SelectalertRulefrom theDynamic contentlist.with severity:Selectseverityfrom theDynamic contentlist.was fired at:SelectfiredDateTimefrom theDynamic contentlist.Add more fields according to your requirements.
Create the message text in theMessagefield by entering static text and including content taken from the alert payload by choosing fields from theDynamic contentlist.
For example:
Alert:SelectalertRulefrom theDynamic contentlist.
with severity:Selectseverityfrom theDynamic contentlist.
was fired at:SelectfiredDateTimefrom theDynamic contentlist.
Add more fields according to your requirements.
SelectSave.
SelectSave.

You created a logic app that sends a Teams message to the specified group, with details from the alert that triggered it.
The next step is to create an action group to trigger your logic app.
Create an action group
To trigger your logic app, create an action group. Then create an alert that uses that action group.
Go to theAzure Monitorpage and selectAlertsfrom the pane on the left.
Go to theAzure Monitorpage and selectAlertsfrom the pane on the left.
SelectAction groups>Create.
SelectAction groups>Create.
Select values forSubscription,Resource group, andRegion.
Select values forSubscription,Resource group, andRegion.
Enter a name forAction group nameandDisplay name.
Enter a name forAction group nameandDisplay name.
Select theActionstab.
Select theActionstab.

On theActionstab underAction type, selectLogic App.
On theActionstab underAction type, selectLogic App.
In theLogic Appsection, select your logic app from the dropdown.
In theLogic Appsection, select your logic app from the dropdown.
SetEnable common alert schematoYes. If you selectNo, the alert type determines which alert schema is used. For more information about alert schemas, seeContext-specific alert schemas.
SetEnable common alert schematoYes. If you selectNo, the alert type determines which alert schema is used. For more information about alert schemas, seeContext-specific alert schemas.
SelectOK.
SelectOK.
Enter a name in theNamefield.
Enter a name in theNamefield.
SelectReview + create>Create.
SelectReview + create>Create.

Test your action group
Go to theAzure Monitorpage and selectAlertsfrom the pane on the left.
Go to theAzure Monitorpage and selectAlertsfrom the pane on the left.
Go toAction groupsand select your logic app.
Go toAction groupsand select your logic app.
SelectTestin the top action bar.
SelectTestin the top action bar.
Select a sample alert type from theSelect sample typedropdown.
Select a sample alert type from theSelect sample typedropdown.
SelectTest.The following email is sent to the specified account:
SelectTest.

The following email is sent to the specified account:

Create a rule by using your action group
Create an alert rulefor one of your resources.
Create an alert rulefor one of your resources.
On theActionstab of your rule, chooseUse action groups.
On theActionstab of your rule, chooseUse action groups.
Select your action group from the list.
Select your action group from the list.
ChooseSelect.
ChooseSelect.
Finish the creation of your rule.
Finish the creation of your rule.

Next steps
Learn more about action groups
Learn more about the common alert schema
Feedback
Was this page helpful?
Additional resources