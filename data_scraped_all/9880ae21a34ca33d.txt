Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Docker Content Trust
Article
2022-08-03
11 contributors
In this article
Azure DevOps Services
Docker Content Trust (DCT) lets you use digital signatures for data sent to and received from remote Docker registries. These signatures allow client-side or runtime verification of the integrity and publisher of specific image tags.
Note
A prerequisite for signing an image is a Docker Registry with a Notary server attached (examples includeDocker HuborAzure Container Registry)
Signing images in Azure Pipelines
Prerequisites on development machine
Use Docker trust's built-in generator or manually generate delegation key pair. If thebuilt-in generatoris used, the delegation private key is imported into the local Docker trust store. Else, the private key will need to be manually imported into the local Docker trust store. SeeManually Generating Keysfor details.
Using the delegation key generated from the step above, upload the first key to a delegation andinitiate the repository
Tip
To view the list of local Delegation keys, use the Notary CLI to run the following command:$ notary key list.
$ notary key list
Set up pipeline for signing images
Grab the delegation private key, which is in the local Docker trust store of your development machine used earlier, and add the same as asecure filein Pipelines.
Grab the delegation private key, which is in the local Docker trust store of your development machine used earlier, and add the same as asecure filein Pipelines.
Authorize this secure filefor use in all pipelines.
Authorize this secure filefor use in all pipelines.
The service principal associated withcontainerRegistryServiceConnectionmust have the AcrImageSigner role in the target container registry.
The service principal associated withcontainerRegistryServiceConnectionmust have the AcrImageSigner role in the target container registry.
containerRegistryServiceConnection
Create a pipeline based on the following YAML snippet:pool:
  vmImage: 'Ubuntu 16.04'

variables:
  system.debug: true
  containerRegistryServiceConnection: serviceConnectionName
  imageRepository: foobar/content-trust
  tag: test

steps:
- task: Docker@2
  inputs:
    command: login
    containerRegistry: $(containerRegistryServiceConnection)

- task: DownloadSecureFile@1
  name: privateKey
  inputs:
    secureFile: cc8f3c6f998bee63fefaaabc5a2202eab06867b83f491813326481f56a95466f.key
- script: |
    mkdir -p $(DOCKER_CONFIG)/trust/private
    cp $(privateKey.secureFilePath) $(DOCKER_CONFIG)/trust/private

- task: Docker@2
  inputs:
    command: build
    Dockerfile: '**/Dockerfile'
    containerRegistry: $(containerRegistryServiceConnection)
    repository: $(imageRepository)
    tags: |
      $(tag)
    arguments: '--disable-content-trust=false'

- task: Docker@2
  inputs: 
    command: push
    containerRegistry: $(containerRegistryServiceConnection)
    repository: $(imageRepository)
    tags: |
      $(tag)
    arguments: '--disable-content-trust=false'
  env:
    DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE: $(DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE)In the previous example, theDOCKER_CONFIGvariable is set by thelogincommand in the Docker task. We recommend that you set upDOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASEas asecret variablefor your pipeline. The alternative approach of using a pipeline variable in YAML exposes the passphrase in plain text.DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASEin this example refers to the private key's passphrase (not the repository passphrase). We only need the private key's passphrase in this example because the repository has been initiated already (prerequisites).
Create a pipeline based on the following YAML snippet:
pool:
  vmImage: 'Ubuntu 16.04'

variables:
  system.debug: true
  containerRegistryServiceConnection: serviceConnectionName
  imageRepository: foobar/content-trust
  tag: test

steps:
- task: Docker@2
  inputs:
    command: login
    containerRegistry: $(containerRegistryServiceConnection)

- task: DownloadSecureFile@1
  name: privateKey
  inputs:
    secureFile: cc8f3c6f998bee63fefaaabc5a2202eab06867b83f491813326481f56a95466f.key
- script: |
    mkdir -p $(DOCKER_CONFIG)/trust/private
    cp $(privateKey.secureFilePath) $(DOCKER_CONFIG)/trust/private

- task: Docker@2
  inputs:
    command: build
    Dockerfile: '**/Dockerfile'
    containerRegistry: $(containerRegistryServiceConnection)
    repository: $(imageRepository)
    tags: |
      $(tag)
    arguments: '--disable-content-trust=false'

- task: Docker@2
  inputs: 
    command: push
    containerRegistry: $(containerRegistryServiceConnection)
    repository: $(imageRepository)
    tags: |
      $(tag)
    arguments: '--disable-content-trust=false'
  env:
    DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE: $(DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE)
pool:
  vmImage: 'Ubuntu 16.04'

variables:
  system.debug: true
  containerRegistryServiceConnection: serviceConnectionName
  imageRepository: foobar/content-trust
  tag: test

steps:
- task: Docker@2
  inputs:
    command: login
    containerRegistry: $(containerRegistryServiceConnection)

- task: DownloadSecureFile@1
  name: privateKey
  inputs:
    secureFile: cc8f3c6f998bee63fefaaabc5a2202eab06867b83f491813326481f56a95466f.key
- script: |
    mkdir -p $(DOCKER_CONFIG)/trust/private
    cp $(privateKey.secureFilePath) $(DOCKER_CONFIG)/trust/private

- task: Docker@2
  inputs:
    command: build
    Dockerfile: '**/Dockerfile'
    containerRegistry: $(containerRegistryServiceConnection)
    repository: $(imageRepository)
    tags: |
      $(tag)
    arguments: '--disable-content-trust=false'

- task: Docker@2
  inputs: 
    command: push
    containerRegistry: $(containerRegistryServiceConnection)
    repository: $(imageRepository)
    tags: |
      $(tag)
    arguments: '--disable-content-trust=false'
  env:
    DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE: $(DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE)
In the previous example, theDOCKER_CONFIGvariable is set by thelogincommand in the Docker task. We recommend that you set upDOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASEas asecret variablefor your pipeline. The alternative approach of using a pipeline variable in YAML exposes the passphrase in plain text.DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASEin this example refers to the private key's passphrase (not the repository passphrase). We only need the private key's passphrase in this example because the repository has been initiated already (prerequisites).
DOCKER_CONFIG
login
DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE
DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE
Feedback
Was this page helpful?
Additional resources