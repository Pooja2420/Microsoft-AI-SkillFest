Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Spring Cloud Azure authentication
Article
2025-02-21
9 contributors
Applies to: â Version 4.20.0, â Version 5.22.0
In this article
This article describes all the Spring Cloud Azure authentication methods.

Authentication and authorization with Microsoft Entra ID
With Microsoft Entra ID, you can use Azure role-based access control (Azure RBAC) to grant permissions to a security principal, which may be a user or an application service principal. When a security principal (a user or an application) attempts to access an Azure resource, for example an Event Hubs resource, the request must be authorized. With Microsoft Entra ID, access to a resource is a two-step process:
First, the security principal's identity is authenticated, and an OAuth 2.0 token is returned.
Next, the token is passed as part of a request to the Azure service to authorize access to the specified resource.
Credential types
Spring Cloud Azure enables you to configure different credential types for authentication, includingDefaultAzureCredential,WorkloadIdentityCredential,ManagedIdentityCredential,ClientSecretCredential,AzureCliCredential, and so on.
DefaultAzureCredential
WorkloadIdentityCredential
ManagedIdentityCredential
ClientSecretCredential
AzureCliCredential
DefaultAzureCredentialis appropriate for most scenarios where the application is intended to run in the Azure Cloud, because it combines the following credentials:
DefaultAzureCredential
Credentials commonly used to authenticate when deployed.
Credentials used to authenticate in a development environment.
Note
DefaultAzureCredentialis intended to simplify getting started with the Azure SDK by handling common scenarios with reasonable default behaviors. If you want more control or the default settings don't support your scenario, you should use other credential types.
DefaultAzureCredential
DefaultAzureCredentialattempts to authenticate via the following mechanisms in order:
DefaultAzureCredential

Environment -DefaultAzureCredentialtries to read account information specified via environment variables and use it to authenticate.
DefaultAzureCredential
Managed Identity - If the application is deployed to an Azure host with Managed Identity enabled,DefaultAzureCredentialtries to authenticate with that account.
DefaultAzureCredential
Workload Identity - If the application is deployed to a virtual machines (VM),DefaultAzureCredentialtries to authenticate with that account.
DefaultAzureCredential
Shared Token Cache - If you authenticated via Visual Studio,DefaultAzureCredentialtries to authenticate with that account.
DefaultAzureCredential
IntelliJ - If you authenticated via Azure Toolkit for IntelliJ,DefaultAzureCredentialtries to authenticate with that account.
DefaultAzureCredential
Azure CLI - If you authenticated an account via the Azure CLIaz logincommand,DefaultAzureCredentialtries to authenticate with that account.
az login
DefaultAzureCredential
Azure PowerShell - If you authenticated via Azure PowerShell,DefaultAzureCredentialtries to authenticate with that account.
DefaultAzureCredential
Azure Developer CLI - If you authenticated via the Azure Developer CLI,DefaultAzureCredentialtries to authenticate with that account.
DefaultAzureCredential
Tip
Be sure the security principal has sufficient permission to access the Azure resource. For more information, seeAuthorize access with Microsoft Entra ID.
Note
Since Spring Cloud Azure AutoConfigure 4.1.0, you must register aThreadPoolTaskExecutorbean namedspringCloudAzureCredentialTaskExecutorto manage all threads created by Azure Identity. The name of each thread managed by this thread pool is prefixed withaz-identity-. ThisThreadPoolTaskExecutorbean is independent of theExecutorbean provided by Spring Boot.
ThreadPoolTaskExecutor
springCloudAzureCredentialTaskExecutor
az-identity-
ThreadPoolTaskExecutor
Executor
A common challenge is the management of secrets and credentials used to secure communication between different components making up a solution. Managed identities eliminate the need to manage credentials. Managed identities provide an identity for applications to use when connecting to resources that support Microsoft Entra authentication. Applications may use the managed identity to obtain Microsoft Entra tokens. For example, an application may use a managed identity to access resources like Azure Key Vault where you can store credentials in a secure manner or to access storage accounts.
We encourage using managed identity instead of using connection string or key in your application because it's more secure and saves the trouble of managing secrets and credentials. In this case,DefaultAzureCredentialcould better serve the scenario of developing locally using account information stored locally, then deploying the application to Azure Cloud and using managed identity.
DefaultAzureCredential
There are two types of managed identities:
System-assigned- Some Azure services allow you to enable a managed identity directly on a service instance. When you enable a system-assigned managed identity, an identity is created in Microsoft Entra that's bound to the lifecycle of that service instance. So when the resource is deleted, Azure automatically deletes the identity for you. By design, only that Azure resource can use this identity to request tokens from Microsoft Entra ID.
User-assigned- You may also create a managed identity as a standalone Azure resource. You can create a user-assigned managed identity and assign it to one or more instances of an Azure service. With user-assigned managed identities, the identity is managed separately from the resources that use it.
Note
When using a user-assigned managed identity, you can specify the client ID viaspring.cloud.azure.credential.client-idorspring.cloud.azure.<azure-service>.credential.client-id. You don't need credential configuration if you use a system-assigned managed identity.
spring.cloud.azure.credential.client-id
spring.cloud.azure.<azure-service>.credential.client-id
Tip
In order to access the Azure resource, be sure the security principal has sufficient permission. For more information, seeAuthorize access with Microsoft Entra ID.
For more information about managed identity, seeWhat are managed identities for Azure resources?.
If you want more control than what's provided byDefaultAzureCredential, or the default settings don't support your scenario, you should use other credential types.
DefaultAzureCredential

Authenticate with Microsoft Entra ID
To connect applications to resources that support Microsoft Entra authentication, you can set the following configurations with the prefixspring.cloud.azure.credentialorspring.cloud.azure.<azure-service>.credential
spring.cloud.azure.credential
spring.cloud.azure.<azure-service>.credential
The following table lists authentication properties:
TokenCredential
Tip
For the list of all Spring Cloud Azure configuration properties, seeSpring Cloud Azure configuration properties.
The application looks in several places to find an available credential. Each Azure SDK client builder factory adopts a custom bean of typeTokenCredentialfirst if the propertytoken-credential-bean-nameis specified, and falls back to useDefaultAzureCredentialif no credential properties are configured.
TokenCredential
token-credential-bean-name
DefaultAzureCredential
The following example shows you how to define a customTokenCredentialbean to do the authentication:
TokenCredential
@Bean
TokenCredential myTokenCredential() {
    // Your concrete TokenCredential instance
}
@Bean
TokenCredential myTokenCredential() {
    // Your concrete TokenCredential instance
}
spring.cloud.azure:
  credential:
    token-credential-bean-name: myTokenCredential
spring.cloud.azure:
  credential:
    token-credential-bean-name: myTokenCredential
The following example shows you how to authenticate using a system-assigned managed identity:
spring.cloud.azure:
  credential:
    managed-identity-enabled: true
spring.cloud.azure:
  credential:
    managed-identity-enabled: true
The following example shows you how to authenticate using a user-assigned managed identity:
spring.cloud.azure:
  credential:
    managed-identity-enabled: true
    client-id: ${AZURE_CLIENT_ID}
spring.cloud.azure:
  credential:
    managed-identity-enabled: true
    client-id: ${AZURE_CLIENT_ID}
The following example shows you how to authenticate using a service principal with a client secret:
spring.cloud.azure:
  credential:
    client-id: ${AZURE_CLIENT_ID}
    client-secret: ${AZURE_CLIENT_SECRET}
  profile:
    tenant-id: <tenant>
spring.cloud.azure:
  credential:
    client-id: ${AZURE_CLIENT_ID}
    client-secret: ${AZURE_CLIENT_SECRET}
  profile:
    tenant-id: <tenant>
Note
The values allowed fortenant-idare:common,organizations,consumers, or the tenant ID. For more information about these values, see theUsed the wrong endpoint (personal and organization accounts)section ofError AADSTS50020 - User account from identity provider doesn't exist in tenant. For information on converting your single-tenant app, seeConvert single-tenant app to multitenant on Microsoft Entra ID.
tenant-id
common
organizations
consumers
The following example shows you how to authenticate using a service principal with a client PFX certificate:
spring.cloud.azure:
  credential:
    client-id: ${AZURE_CLIENT_ID}
    client-certificate-path: ${AZURE_CLIENT_CERTIFICATE_PATH}
    client-certificate-password: ${AZURE_CLIENT_CERTIFICATE_PASSWORD}
  profile:
    tenant-id: <tenant>
spring.cloud.azure:
  credential:
    client-id: ${AZURE_CLIENT_ID}
    client-certificate-path: ${AZURE_CLIENT_CERTIFICATE_PATH}
    client-certificate-password: ${AZURE_CLIENT_CERTIFICATE_PASSWORD}
  profile:
    tenant-id: <tenant>
Note
The values allowed fortenant-idare:common,organizations,consumers, or the tenant ID. For more information about these values, see theUsed the wrong endpoint (personal and organization accounts)section ofError AADSTS50020 - User account from identity provider doesn't exist in tenant. For information on converting your single-tenant app, seeConvert single-tenant app to multitenant on Microsoft Entra ID.
tenant-id
common
organizations
consumers
The following example shows you how to authenticate using a service principal with client PEM certificate:
spring.cloud.azure:
  credential:
    client-id: ${AZURE_CLIENT_ID}
    client-certificate-path: ${AZURE_CLIENT_CERTIFICATE_PATH}
  profile:
    tenant-id: <tenant>
spring.cloud.azure:
  credential:
    client-id: ${AZURE_CLIENT_ID}
    client-certificate-path: ${AZURE_CLIENT_CERTIFICATE_PATH}
  profile:
    tenant-id: <tenant>
Note
The values allowed fortenant-idare:common,organizations,consumers, or the tenant ID. For more information about these values, see theUsed the wrong endpoint (personal and organization accounts)section ofError AADSTS50020 - User account from identity provider doesn't exist in tenant. For information on converting your single-tenant app, seeConvert single-tenant app to multitenant on Microsoft Entra ID.
tenant-id
common
organizations
consumers
The following example shows you how to authenticate using a user credential:
spring.cloud.azure:
  credential:
    client-id: ${AZURE_CLIENT_ID}
    username: ${AZURE_USER_USERNAME}
    password: ${AZURE_USER_PASSWORD}
spring.cloud.azure:
  credential:
    client-id: ${AZURE_CLIENT_ID}
    username: ${AZURE_USER_USERNAME}
    password: ${AZURE_USER_PASSWORD}
The following example shows you how to authenticate with Key Vault using a different service principal. This example configures the application with two credentials: one system-assigned managed identity and one service principal. The Key Vault Secret client uses the service principal, but any other components use managed identity instead.
spring.cloud.azure:
  credential:
    managed-identity-enabled: true
  keyvault.secret:
    credential:
      client-id: ${AZURE_CLIENT_ID}
      client-secret: ${AZURE_CLIENT_SECRET}
    profile:
      tenant-id: <tenant>
spring.cloud.azure:
  credential:
    managed-identity-enabled: true
  keyvault.secret:
    credential:
      client-id: ${AZURE_CLIENT_ID}
      client-secret: ${AZURE_CLIENT_SECRET}
    profile:
      tenant-id: <tenant>
Note
The values allowed fortenant-idare:common,organizations,consumers, or the tenant ID. For more information about these values, see theUsed the wrong endpoint (personal and organization accounts)section ofError AADSTS50020 - User account from identity provider doesn't exist in tenant. For information on converting your single-tenant app, seeConvert single-tenant app to multitenant on Microsoft Entra ID.
tenant-id
common
organizations
consumers

Authorize access with Microsoft Entra ID
The authorization step requires that one or more Azure roles be assigned to the security principal. The roles that are assigned to a security principal determine the permissions that the principal has.
Tip
For the list of all Azure built-in roles, seeAzure built-in roles.
The following table lists the Azure built-in roles for authorizing access to Azure services supported in Spring Cloud Azure:
Note
When using Spring Cloud Azure Resource Manager to get the connection strings for Event Hubs, Service Bus, and Storage Queue, or the properties of Cache for Redis, assign the Azure built-in roleContributor. Azure Cache for Redis is special, and you can also assign theRedis Cache Contributorrole to get the Redis properties.
Contributor
Redis Cache Contributor
Note
A Key Vault access policy determines whether a given security principal, namely a user, application or user group, can perform different operations on Key Vault secrets, keys, and certificates. You can assign access policies using the Azure portal, the Azure CLI, or Azure PowerShell. For more information, seeAssign a Key Vault access policy.
Important
Azure Cosmos DB exposes two built-in role definitions:Cosmos DB Built-in Data ReaderandCosmos DB Built-in Data Contributor. However, Azure portal support for role management isn't available yet. For more information about the permission model, role definitions, and role assignment, seeConfigure role-based access control with Microsoft Entra ID for your Azure Cosmos DB account.
Cosmos DB Built-in Data Reader
Cosmos DB Built-in Data Contributor
Authenticate using SAS tokens
You can also configure services for authentication with Shared Access Signature (SAS).spring.cloud.azure.<azure-service>.sas-tokenis the property to configure. For example, usespring.cloud.azure.storage.blob.sas-tokento authenticate to Storage Blob service.
spring.cloud.azure.<azure-service>.sas-token
spring.cloud.azure.storage.blob.sas-token
Authenticate using connection strings
Some Azure services support connection string to provide connection information and credentials. To connect to those Azure services using connection string, just configurespring.cloud.azure.<azure-service>.connection-string. For example, configurespring.cloud.azure.eventhubs.connection-stringto connect to the Event Hubs service.
spring.cloud.azure.<azure-service>.connection-string
spring.cloud.azure.eventhubs.connection-string
Feedback
Was this page helpful?
Additional resources