Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Use the Linux diagnostic extension 4.0 to monitor metrics and logs
Article
2024-08-22
30 contributors
In this article
Caution
This article references CentOS, a Linux distribution that is End Of Life (EOL) status. Please consider your use and plan accordingly. For more information, see theCentOS End Of Life guidance.
This article describes the latest versions of the Linux diagnostic extension (LAD).
Important
For information about version 3.x, seeUse the Linux diagnostic extension 3.0 to monitor metrics and logs.
For information about version 2.3 and earlier, seeMonitor the performance and diagnostic data of a Linux VM.
The Linux diagnostic extension helps you monitor the health of a Linux VM on Microsoft Azure. It has the following capabilities:
This extension works with both Azure deployment models: Azure Resource Manager and classic.
Prerequisites
Azure Linux agent version 2.2.0 or later. Most Azure VM Linux gallery images include version 2.2.7 or later. Run/usr/sbin/waagent -versionto confirm the version installed on the VM. If the VM runs an older version of the guest agent,update the Linux agent.
/usr/sbin/waagent -version
Azure CLI.Set up the Azure CLIenvironment on your machine.
Thewgetcommand. If you don't already have it, install it using the corresponding package manager.
wget
An Azure subscription and general purpose storage accountto store the data.  General purpose storage accounts support table storage, which is required.  A blob storage account doesn't work.
Python 2.
Supported Linux distributions
SeeSupported agent operating systems.
Python requirement
The Linux diagnostic extension requires Python 2. If your virtual machine uses a distribution that doesn't include Python 2, install it.
Note
We are currently planning to converge all versions of the Linux Diagnostic Extensions (LAD) with the new Azure Monitoring Agent, which already supports Python 3. The LAD will be scheduled for deprecation pending announcement and approval.
To install Python 2, run one of the following sample commands:
Red Hat, CentOS, Oracle:yum install -y python2
yum install -y python2
Ubuntu, Debian:apt-get install -y python2
apt-get install -y python2
SUSE:zypper install -y python2
zypper install -y python2
Thepython2executable file must be aliased topython.
python2
python
Run the following command to remove any existing aliases.sudo update-alternatives --remove-all python
Run the following command to remove any existing aliases.
sudo update-alternatives --remove-all python
sudo update-alternatives --remove-all python
Run the following command to create the new alias.sudo update-alternatives --install /usr/bin/python python /usr/bin/python2 1
Run the following command to create the new alias.
sudo update-alternatives --install /usr/bin/python python /usr/bin/python2 1
sudo update-alternatives --install /usr/bin/python python /usr/bin/python2 1
Install the extension
You can enable this extension for your VM and Virtual Machine Scale Set by using the Azure PowerShell cmdlets, Azure CLI scripts, Azure Resource Manager templates (ARM templates), or the Azure portal. For more information, seeVirtual machine extensions and features for Linux.
Note
Some components of the Linux Diagnostic VM extension are also shipped in theLog Analytics VM extension. Conflicts can arise if both extensions are instantiated in the same ARM template.
To avoid install-time conflicts, use thedependsOndirectiveto install the extensions sequentially. The extensions can be installed in either order.
dependsOn
Use the installation instructions and adownloadable sample configurationto configure LAD 4.0 to:
Capture and store the same metrics that LAD versions 2.3 and 3.x provided.
Send metrics to the Azure Monitor sink along with the usual sink to Azure Storage. This functionality is new in LAD 4.0.
Capture a useful set of file system metrics, as in LAD 3.0.
Capture the default syslog collection enabled by LAD 2.3.
Enable the Azure portal experience for charting and alerting on VM metrics.
The downloadable configuration is just an example. Modify it to suit your needs.
Installation
You can install and configure LAD 4.0 in the Azure CLI or in Azure PowerShell.
Azure CLI
Azure PowerShell
If your protected settings are in the fileProtectedSettings.jsonand your public configuration information is inPublicSettings.json, run this command:
az vm extension set --publisher Microsoft.Azure.Diagnostics \
  --name LinuxDiagnostic --version 4.0 --resource-group <resource_group_name> \
  --vm-name <vm_name> --protected-settings ProtectedSettings.json \
  --settings PublicSettings.json
az vm extension set --publisher Microsoft.Azure.Diagnostics \
  --name LinuxDiagnostic --version 4.0 --resource-group <resource_group_name> \
  --vm-name <vm_name> --protected-settings ProtectedSettings.json \
  --settings PublicSettings.json
The command assumes that you're using the Azure Resource Management mode of the Azure CLI. To configure LAD for classic deployment model VMs, switch to Service Management mode (azure config mode asm) and omit the resource group name in the command.
azure config mode asm
For more information, see thecross-platform CLI documentation.
If your protected settings are in the$protectedSettingsvariable and your public configuration information is in the$publicSettingsvariable, run this command:
$protectedSettings
$publicSettings
Set-AzVMExtension -ResourceGroupName <resource_group_name> -VMName <vm_name> `
  -Location <vm_location> -ExtensionType LinuxDiagnostic `
  -Publisher Microsoft.Azure.Diagnostics -Name LinuxDiagnostic `
  -SettingString $publicSettings -ProtectedSettingString $protectedSettings `
  -TypeHandlerVersion 4.0
Set-AzVMExtension -ResourceGroupName <resource_group_name> -VMName <vm_name> `
  -Location <vm_location> -ExtensionType LinuxDiagnostic `
  -Publisher Microsoft.Azure.Diagnostics -Name LinuxDiagnostic `
  -SettingString $publicSettings -ProtectedSettingString $protectedSettings `
  -TypeHandlerVersion 4.0
Enable auto update
To enable automatic update of the agent, we recommend that you enable theAutomatic Extension Upgradefeature:
Azure CLI
Azure PowerShell
az vm extension set --publisher Microsoft.Azure.Diagnostics --name LinuxDiagnostic \
  --version 4.0 --resource-group <resource_group_name> --vm-name <vm_name> \
  --protected-settings ProtectedSettings.json --settings PublicSettings.json \
  --enable-auto-upgrade true
az vm extension set --publisher Microsoft.Azure.Diagnostics --name LinuxDiagnostic \
  --version 4.0 --resource-group <resource_group_name> --vm-name <vm_name> \
  --protected-settings ProtectedSettings.json --settings PublicSettings.json \
  --enable-auto-upgrade true
Set-AzVMExtension -ResourceGroupName <resource_group_name> -VMName <vm_name> `
  -Location <vm_location> -ExtensionType LinuxDiagnostic `
  -Publisher Microsoft.Azure.Diagnostics -Name LinuxDiagnostic `
  -SettingString $publicSettings -ProtectedSettingString $protectedSettings `
  -TypeHandlerVersion 4.0 -EnableAutomaticUpgrade $true
Set-AzVMExtension -ResourceGroupName <resource_group_name> -VMName <vm_name> `
  -Location <vm_location> -ExtensionType LinuxDiagnostic `
  -Publisher Microsoft.Azure.Diagnostics -Name LinuxDiagnostic `
  -SettingString $publicSettings -ProtectedSettingString $protectedSettings `
  -TypeHandlerVersion 4.0 -EnableAutomaticUpgrade $true
Sample installation
In these examples, the sample configuration collects a set of standard data and sends it to table storage. The URL for the sample configuration and its contents can change.
Note
For the following samples, fill in the appropriate values for the variables in the first section before you run the code.
In most cases, you should download a copy of the portal settings JSON file and customize it for your needs. Use templates or your own automation to use a customized version of the configuration file rather than downloading from the URL each time.
When you enable the new Azure Monitor sink, the VMs need to have system-assigned identity enabled to generate Managed Service Identity (MSI) authentication tokens. You can add these settings during or after VM creation. For instructions for the Azure portal, the Azure CLI, PowerShell, and Azure Resource Manager, seeConfigure managed identities.
Azure CLI
Azure PowerShell
# Set your Azure VM diagnostic variables.
my_subscription_id=<your_azure_subscription_id>
my_resource_group=<your_azure_resource_group_name_containing_your_azure_linux_vm>
my_linux_vm=<your_azure_linux_vm_name>
my_diagnostic_storage_account=<your_azure_storage_account_for_storing_vm_diagnostic_data>

# Login to Azure before you do anything else.
az login

# Select the subscription that contains the storage account.
az account set --subscription $my_subscription_id

# Enable system-assigned identity on the existing VM.
az vm identity assign --resource-group $my_resource_group --name $my_linux_vm

# Download the sample public settings. You could instead use curl or any web browser.
wget https://raw.githubusercontent.com/Azure/azure-linux-extensions/master/Diagnostic/tests/lad_2_3_compatible_portal_pub_settings.json -O portal_public_settings.json

# Build the VM resource ID. Replace the storage account name and resource ID in the public settings.
my_vm_resource_id=$(az vm show --resource-group $my_resource_group \
  --name $my_linux_vm --query "id" -o tsv)
sed -i "s#__DIAGNOSTIC_STORAGE_ACCOUNT__#$my_diagnostic_storage_account#g" portal_public_settings.json
sed -i "s#__VM_RESOURCE_ID__#$my_vm_resource_id#g" portal_public_settings.json

# Build the protected settings (storage account SAS token).
my_diagnostic_storage_account_sastoken=$(az storage account generate-sas \
  --account-name $my_diagnostic_storage_account --expiry 2037-12-31T23:59:00Z \
  --permissions wlacu --resource-types co --services bt -o tsv)
my_lad_protected_settings="{'storageAccountName': '$my_diagnostic_storage_account', \
  'storageAccountSasToken': '$my_diagnostic_storage_account_sastoken'}"

# Finally, tell Azure to install and enable the extension.
az vm extension set --publisher Microsoft.Azure.Diagnostics --name LinuxDiagnostic \
  --version 4.0 --resource-group $my_resource_group --vm-name $my_linux_vm \
  --protected-settings "${my_lad_protected_settings}" --settings portal_public_settings.json
# Set your Azure VM diagnostic variables.
my_subscription_id=<your_azure_subscription_id>
my_resource_group=<your_azure_resource_group_name_containing_your_azure_linux_vm>
my_linux_vm=<your_azure_linux_vm_name>
my_diagnostic_storage_account=<your_azure_storage_account_for_storing_vm_diagnostic_data>

# Login to Azure before you do anything else.
az login

# Select the subscription that contains the storage account.
az account set --subscription $my_subscription_id

# Enable system-assigned identity on the existing VM.
az vm identity assign --resource-group $my_resource_group --name $my_linux_vm

# Download the sample public settings. You could instead use curl or any web browser.
wget https://raw.githubusercontent.com/Azure/azure-linux-extensions/master/Diagnostic/tests/lad_2_3_compatible_portal_pub_settings.json -O portal_public_settings.json

# Build the VM resource ID. Replace the storage account name and resource ID in the public settings.
my_vm_resource_id=$(az vm show --resource-group $my_resource_group \
  --name $my_linux_vm --query "id" -o tsv)
sed -i "s#__DIAGNOSTIC_STORAGE_ACCOUNT__#$my_diagnostic_storage_account#g" portal_public_settings.json
sed -i "s#__VM_RESOURCE_ID__#$my_vm_resource_id#g" portal_public_settings.json

# Build the protected settings (storage account SAS token).
my_diagnostic_storage_account_sastoken=$(az storage account generate-sas \
  --account-name $my_diagnostic_storage_account --expiry 2037-12-31T23:59:00Z \
  --permissions wlacu --resource-types co --services bt -o tsv)
my_lad_protected_settings="{'storageAccountName': '$my_diagnostic_storage_account', \
  'storageAccountSasToken': '$my_diagnostic_storage_account_sastoken'}"

# Finally, tell Azure to install and enable the extension.
az vm extension set --publisher Microsoft.Azure.Diagnostics --name LinuxDiagnostic \
  --version 4.0 --resource-group $my_resource_group --vm-name $my_linux_vm \
  --protected-settings "${my_lad_protected_settings}" --settings portal_public_settings.json
$storageAccountName = "yourStorageAccountName"
$storageAccountResourceGroup = "yourStorageAccountResourceGroupName"
$vmName = "yourVMName"
$VMresourceGroup = "yourVMResourceGroupName"

# Get the VM object
$vm = Get-AzVM -Name $vmName -ResourceGroupName $VMresourceGroup

# Enable system-assigned identity on an existing VM
Update-AzVM -ResourceGroupName $VMresourceGroup -VM $vm -IdentityType SystemAssigned

# Get the public settings template from GitHub and update the templated values for the storage account and resource ID
$publicSettings = (Invoke-WebRequest -Uri https://raw.githubusercontent.com/Azure/azure-linux-extensions/master/Diagnostic/tests/lad_2_3_compatible_portal_pub_settings.json).Content
$publicSettings = $publicSettings.Replace('__DIAGNOSTIC_STORAGE_ACCOUNT__', $storageAccountName)
$publicSettings = $publicSettings.Replace('__VM_RESOURCE_ID__', $vm.Id)

# If you have your own customized public settings, you can inline those rather than using the preceding template: $publicSettings = '{"ladCfg":  { ... },}'

# Generate a SAS token for the agent to use to authenticate with the storage account
$sasToken = New-AzStorageAccountSASToken -Service Blob,Table `
  -ResourceType Service,Container,Object -Permission "racwdlup" `
  -Context (Get-AzStorageAccount -ResourceGroupName $storageAccountResourceGroup `
  -AccountName $storageAccountName).Context -ExpiryTime $([System.DateTime]::Now.AddYears(10))

# Build the protected settings (storage account SAS token)
$protectedSettings="{'storageAccountName': '$storageAccountName', `
  'storageAccountSasToken': '$sasToken'}"

# Finally, install the extension with the settings you built
Set-AzVMExtension -ResourceGroupName $VMresourceGroup -VMName $vmName `
  -Location $vm.Location -ExtensionType LinuxDiagnostic `
  -Publisher Microsoft.Azure.Diagnostics -Name LinuxDiagnostic `
  -SettingString $publicSettings -ProtectedSettingString $protectedSettings `
  -TypeHandlerVersion 4.0
$storageAccountName = "yourStorageAccountName"
$storageAccountResourceGroup = "yourStorageAccountResourceGroupName"
$vmName = "yourVMName"
$VMresourceGroup = "yourVMResourceGroupName"

# Get the VM object
$vm = Get-AzVM -Name $vmName -ResourceGroupName $VMresourceGroup

# Enable system-assigned identity on an existing VM
Update-AzVM -ResourceGroupName $VMresourceGroup -VM $vm -IdentityType SystemAssigned

# Get the public settings template from GitHub and update the templated values for the storage account and resource ID
$publicSettings = (Invoke-WebRequest -Uri https://raw.githubusercontent.com/Azure/azure-linux-extensions/master/Diagnostic/tests/lad_2_3_compatible_portal_pub_settings.json).Content
$publicSettings = $publicSettings.Replace('__DIAGNOSTIC_STORAGE_ACCOUNT__', $storageAccountName)
$publicSettings = $publicSettings.Replace('__VM_RESOURCE_ID__', $vm.Id)

# If you have your own customized public settings, you can inline those rather than using the preceding template: $publicSettings = '{"ladCfg":  { ... },}'

# Generate a SAS token for the agent to use to authenticate with the storage account
$sasToken = New-AzStorageAccountSASToken -Service Blob,Table `
  -ResourceType Service,Container,Object -Permission "racwdlup" `
  -Context (Get-AzStorageAccount -ResourceGroupName $storageAccountResourceGroup `
  -AccountName $storageAccountName).Context -ExpiryTime $([System.DateTime]::Now.AddYears(10))

# Build the protected settings (storage account SAS token)
$protectedSettings="{'storageAccountName': '$storageAccountName', `
  'storageAccountSasToken': '$sasToken'}"

# Finally, install the extension with the settings you built
Set-AzVMExtension -ResourceGroupName $VMresourceGroup -VMName $vmName `
  -Location $vm.Location -ExtensionType LinuxDiagnostic `
  -Publisher Microsoft.Azure.Diagnostics -Name LinuxDiagnostic `
  -SettingString $publicSettings -ProtectedSettingString $protectedSettings `
  -TypeHandlerVersion 4.0
# Set your Azure virtual machine scale set diagnostic variables.
my_subscription_id=<your_azure_subscription_id>
my_resource_group=<your_azure_resource_group_name_containing_your_azure_linux_vm>
my_linux_vmss=<your_azure_linux_vmss_name>
my_diagnostic_storage_account=<your_azure_storage_account_for_storing_vm_diagnostic_data>

# Login to Azure before you do anything else.
az login

# Select the subscription that contains the storage account.
az account set --subscription $my_subscription_id

# Enable system-assigned identity on the existing virtual machine scale set.
az vmss identity assign --resource-group $my_resource_group --name $my_linux_vmss

# Download the sample public settings. You could also use curl or any web browser.
wget https://raw.githubusercontent.com/Azure/azure-linux-extensions/master/Diagnostic/tests/lad_2_3_compatible_portal_pub_settings.json -O portal_public_settings.json

# Build the virtual machine scale set resource ID. Replace the storage account name and resource ID in the public settings.
my_vmss_resource_id=$(az vmss show --resource-group $my_resource_group \
  --name $my_linux_vmss --query "id" -o tsv)
sed -i "s#__DIAGNOSTIC_STORAGE_ACCOUNT__#$my_diagnostic_storage_account#g" portal_public_settings.json
sed -i "s#__VM_RESOURCE_ID__#$my_vmss_resource_id#g" portal_public_settings.json

# Build the protected settings (storage account SAS token).
my_diagnostic_storage_account_sastoken=$(az storage account generate-sas \
  --account-name $my_diagnostic_storage_account --expiry 2037-12-31T23:59:00Z \
  --permissions wlacu --resource-types co --services bt -o tsv)
my_lad_protected_settings="{'storageAccountName': '$my_diagnostic_storage_account', 'storageAccountSasToken': '$my_diagnostic_storage_account_sastoken'}"

# Finally, tell Azure to install and enable the extension.
az vmss extension set --publisher Microsoft.Azure.Diagnostics --name LinuxDiagnostic
  --version 4.0 --resource-group $my_resource_group --vmss-name $my_linux_vmss \
  --protected-settings "${my_lad_protected_settings}" --settings portal_public_settings.json
# Set your Azure virtual machine scale set diagnostic variables.
my_subscription_id=<your_azure_subscription_id>
my_resource_group=<your_azure_resource_group_name_containing_your_azure_linux_vm>
my_linux_vmss=<your_azure_linux_vmss_name>
my_diagnostic_storage_account=<your_azure_storage_account_for_storing_vm_diagnostic_data>

# Login to Azure before you do anything else.
az login

# Select the subscription that contains the storage account.
az account set --subscription $my_subscription_id

# Enable system-assigned identity on the existing virtual machine scale set.
az vmss identity assign --resource-group $my_resource_group --name $my_linux_vmss

# Download the sample public settings. You could also use curl or any web browser.
wget https://raw.githubusercontent.com/Azure/azure-linux-extensions/master/Diagnostic/tests/lad_2_3_compatible_portal_pub_settings.json -O portal_public_settings.json

# Build the virtual machine scale set resource ID. Replace the storage account name and resource ID in the public settings.
my_vmss_resource_id=$(az vmss show --resource-group $my_resource_group \
  --name $my_linux_vmss --query "id" -o tsv)
sed -i "s#__DIAGNOSTIC_STORAGE_ACCOUNT__#$my_diagnostic_storage_account#g" portal_public_settings.json
sed -i "s#__VM_RESOURCE_ID__#$my_vmss_resource_id#g" portal_public_settings.json

# Build the protected settings (storage account SAS token).
my_diagnostic_storage_account_sastoken=$(az storage account generate-sas \
  --account-name $my_diagnostic_storage_account --expiry 2037-12-31T23:59:00Z \
  --permissions wlacu --resource-types co --services bt -o tsv)
my_lad_protected_settings="{'storageAccountName': '$my_diagnostic_storage_account', 'storageAccountSasToken': '$my_diagnostic_storage_account_sastoken'}"

# Finally, tell Azure to install and enable the extension.
az vmss extension set --publisher Microsoft.Azure.Diagnostics --name LinuxDiagnostic
  --version 4.0 --resource-group $my_resource_group --vmss-name $my_linux_vmss \
  --protected-settings "${my_lad_protected_settings}" --settings portal_public_settings.json
Update the extension settings
After you change your protected or public settings, run the same command to deploy them to the VM. If any settings changed, the updates are sent to the extension. LAD reloads the configuration and restarts itself.
Migrate from previous versions of the extension
The latest version of the extension is 4.0,which is currently in public preview. Older versions of 3.x are still supported. 2.x versions have been deprecated since July 31, 2018.
Important
To migrate from 3.x to the newest version of the extension, uninstall the old extension. Then install version 4, which includes the updated configuration for system-assigned identity and sinks for sending metrics to the Azure Monitor sink.
When you install the new extension, enable automatic minor version upgrades:
On Azure Resource Manager deployment model VMs, include"autoUpgradeMinorVersion": truein the VM deployment template.
"autoUpgradeMinorVersion": true
On classic deployment model VMs, specify version4.*if you're installing the extension through the Azure CLI or PowerShell.
4.*
You can use the same storage account you used for LAD 3.x.
Protected settings
This set of configuration information contains sensitive information that should be protected from public view. It contains, for example, storage credentials. The settings are transmitted to the extension, which stores them in encrypted form.
{
    "storageAccountName" : "the storage account to receive data",
    "storageAccountEndPoint": "the hostname suffix for the cloud for this account",
    "storageAccountSasToken": "SAS access token",
    "mdsdHttpProxy": "HTTP proxy settings",
    "sinksConfig": { ... }
}
{
    "storageAccountName" : "the storage account to receive data",
    "storageAccountEndPoint": "the hostname suffix for the cloud for this account",
    "storageAccountSasToken": "SAS access token",
    "mdsdHttpProxy": "HTTP proxy settings",
    "sinksConfig": { ... }
}
https://core.windows.net
ss='bt'
srt='co'
sp='acluw'
To get a SAS token within an ARM template, use thelistAccountSasfunction. For an example template, seeList function example.
listAccountSas
You can construct the required shared access signature token through the Azure portal:
Select the general-purpose storage account to which you want the extension to write.
In the menu on the left, underSecurity + networking, selectShared access signature.
Make the selections as previously described.
SelectGenerate SAS and connection string.

Copy the generated shared access signature into thestorageAccountSasTokenfield. Remove the leading question mark (?).
storageAccountSasToken
sinksConfig
Note
Both public and protected settings have an optionalsinksConfigsection. ThesinksConfigsection in theprotectedsettings only holdsEventHubandJsonBlobsink configurations, due to the inclusion of secrets likesasURLs.AzMonSinksink configurationscannotbe included in your protected settings.
sinksConfig
sinksConfig
EventHub
JsonBlob
sasURL
AzMonSink
"sinksConfig": {
    "sink": [
        {
            "name": "sinkname",
            "type": "sinktype",
            ...
        },
        ...
    ]
},
"sinksConfig": {
    "sink": [
        {
            "name": "sinkname",
            "type": "sinktype",
            ...
        },
        ...
    ]
},
ThesinksConfigoptional section defines more destinations to which the extension sends collected information. The"sink"array contains an object for each extra data sink. The"type"attribute determines the other attributes in the object.
sinksConfig
"sink"
"type"
The Linux diagnostic extension 4.0 supports two protected sink types:EventHubandJsonBlob.
EventHub
JsonBlob
"sink": [
    {
        "name": "sinkname",
        "type": "EventHub",
        "sasURL": "https SAS URL"
    },
    ...
]
"sink": [
    {
        "name": "sinkname",
        "type": "EventHub",
        "sasURL": "https SAS URL"
    },
    ...
]
The"sasURL"entry contains the full URL, including the shared access signature token, for the event hub to which data should be published. LAD requires a shared access signature to name a policy that enables the send claim. Here's an example:
"sasURL"
Create an Event Hubs namespace calledcontosohub.
contosohub
Create an event hub in the namespace calledsyslogmsgs.
syslogmsgs
Create a shared access policy on the event hub namedwriterthat enables the send claim.
writer
If you create a SAS that's good until midnight UTC on January 1, 2018, thesasURLvalue might be like the following example.
sasURL
https://contosohub.servicebus.windows.net/syslogmsgs?sr=contosohub.servicebus.windows.net%2fsyslogmsgs&sig=xxxxxxxxxxxxxxxxxxxxxxxxx&se=1514764800&skn=writer
https://contosohub.servicebus.windows.net/syslogmsgs?sr=contosohub.servicebus.windows.net%2fsyslogmsgs&sig=xxxxxxxxxxxxxxxxxxxxxxxxx&se=1514764800&skn=writer
For more information about generating and retrieving information on SAS tokens for Event Hubs, seeGenerate a SAS token.
"sink": [
    {
        "name": "sinkname",
        "type": "JsonBlob"
    },
    ...
]
"sink": [
    {
        "name": "sinkname",
        "type": "JsonBlob"
    },
    ...
]
Data directed to aJsonBlobsink is stored in blobs in Azure Storage. Each instance of LAD creates a blob every hour for each sink name. Each blob always contains a syntactically valid JSON array of objects. New entries are atomically added to the array.
JsonBlob
Blobs are stored in a container that has the same name as the sink. The Azure Storage rules for blob container names apply to the names ofJsonBlobsinks. Names must have between 3 and 63 lowercase alphanumeric ASCII characters or dashes.
JsonBlob
Public settings
The public settings structure contains various blocks of settings that control the information that the extension collects. Each setting, exceptladCfg, is optional. If you specify metric or syslog collection inladCfg, you must also specifyStorageAccount. You must specify thesinksConfigelement to enable the Azure Monitor sink for metrics from LAD 4.0.
ladCfg
ladCfg
StorageAccount
sinksConfig
{
    "ladCfg":  { ... },
    "fileLogs": { ... },
    "StorageAccount": "the storage account to receive data",
    "sinksConfig": { ... },
    "mdsdHttpProxy" : ""
}
{
    "ladCfg":  { ... },
    "fileLogs": { ... },
    "StorageAccount": "the storage account to receive data",
    "sinksConfig": { ... },
    "mdsdHttpProxy" : ""
}
The following sections provide details about the remaining elements.
ladCfg
"ladCfg": {
    "diagnosticMonitorConfiguration": {
        "eventVolume": "Medium",
        "metrics": { ... },
        "performanceCounters": { ... },
        "syslogEvents": { ... }
    },
    "sampleRateInSeconds": 15
}
"ladCfg": {
    "diagnosticMonitorConfiguration": {
        "eventVolume": "Medium",
        "metrics": { ... },
        "performanceCounters": { ... },
        "syslogEvents": { ... }
    },
    "sampleRateInSeconds": 15
}
TheladCfgstructure controls the gathering of metrics and logs for delivery to the Azure Monitor Metrics service and to other data sinks. Specify eitherperformanceCountersorsyslogEventsor both. Also specify themetricsstructure.
ladCfg
performanceCounters
syslogEvents
metrics
If you don't want to enable syslog or metrics collection, specify an empty structure for theladCfgelement:
ladCfg
"ladCfg": {
    "diagnosticMonitorConfiguration": {}
}
"ladCfg": {
    "diagnosticMonitorConfiguration": {}
}
"Large"
"Medium"
"Small"
"Medium"
15
"metrics": {
    "resourceId": "/subscriptions/...",
    "metricAggregation" : [
        { "scheduledTransferPeriod" : "PT1H" },
        { "scheduledTransferPeriod" : "PT5M" }
    ]
}
"metrics": {
    "resourceId": "/subscriptions/...",
    "metricAggregation" : [
        { "scheduledTransferPeriod" : "PT1H" },
        { "scheduledTransferPeriod" : "PT5M" }
    ]
}
JsonBlob
scheduledTransferPeriod
Samples of the metrics specified in theperformanceCounterssection are collected every 15 seconds or at the sample rate explicitly defined for the counter. If multiplescheduledTransferPeriodfrequencies appear, as in the example, each aggregation is computed independently.
performanceCounters
scheduledTransferPeriod
"performanceCounters": {
    "sinks": "",
    "performanceCounterConfiguration": [
        {
            "type": "builtin",
            "class": "Processor",
            "counter": "PercentIdleTime",
            "counterSpecifier": "/builtin/Processor/PercentIdleTime",
            "condition": "IsAggregate=TRUE",
            "sampleRate": "PT15S",
            "unit": "Percent",
            "annotation": [
                {
                    "displayName" : "cpu idle time",
                    "locale" : "en-us"
                }
            ]
        }
    ]
}
"performanceCounters": {
    "sinks": "",
    "performanceCounterConfiguration": [
        {
            "type": "builtin",
            "class": "Processor",
            "counter": "PercentIdleTime",
            "counterSpecifier": "/builtin/Processor/PercentIdleTime",
            "condition": "IsAggregate=TRUE",
            "sampleRate": "PT15S",
            "unit": "Percent",
            "annotation": [
                {
                    "displayName" : "cpu idle time",
                    "locale" : "en-us"
                }
            ]
        }
    ]
}
TheperformanceCountersoptional section controls the collection of metrics. Raw samples are aggregated for eachscheduledTransferPeriodto produce these values:
performanceCounters
Mean
Minimum
Maximum
Last-collected value
Count of raw samples used to compute the aggregate
"MyEventHubSink, MyJsonSink, MyAzMonSink"
sinksConfig
sinksConfig
"counter"
"class"
sampleRateInSeconds
"Count"
"Bytes"
"Seconds"
"Percent"
"CountPerSecond"
"BytesPerSecond"
"Millisecond"
Guest (classic)
azure.vm.linux.guestmetrics
AzMonSink
ThecounterSpecifieris an arbitrary identifier. Consumers of metrics, like the Azure portal charting and alerting feature, usecounterSpecifieras the key that identifies a metric or an instance of a metric.
counterSpecifier
counterSpecifier
Forbuiltinmetrics, we recommendcounterSpecifiervalues that begin with/builtin/. To collect a specific instance of a metric, attach the identifier of the instance to thecounterSpecifiervalue. Here are some examples:
builtin
counterSpecifier
/builtin/
counterSpecifier
/builtin/Processor/PercentIdleTime. Idle time averaged across all vCPUs
/builtin/Processor/PercentIdleTime
/builtin/Disk/FreeSpace(/mnt). Free space for the/mntfile system
/builtin/Disk/FreeSpace(/mnt)
/mnt
/builtin/Disk/FreeSpace. Free space averaged across all mounted file systems
/builtin/Disk/FreeSpace
LAD and the Azure portal don't expect thecounterSpecifiervalue to match any pattern. Be consistent in how you constructcounterSpecifiervalues.
counterSpecifier
counterSpecifier
When you specifyperformanceCounters, LAD always writes data to a table in Azure Storage. The same data can be written to JSON blobs or Event Hubs or both. You can't disable storing data to a table.
performanceCounters
All instances of LAD that use the same storage account name and endpoint add their metrics and logs to the same table. If too many VMs write to the same table partition, Azure can throttle writes to that partition.
TheeventVolumesetting causes entries to be spread across 1 (small), 10 (medium), or 100 (large) partitions. Usually, medium partitions are sufficient to avoid traffic throttling.
eventVolume
The Azure Monitor Metrics feature of the Azure portal uses the data in this table to produce graphs or to trigger alerts. The table name is the concatenation of these strings:
WADMetrics
WADMetrics
The"scheduledTransferPeriod"for the aggregated values stored in the table
"scheduledTransferPeriod"
P10DV2S
P10DV2S
A date, in the formYYYYMMDD, which changes every 10 days
Examples includeWADMetricsPT1HP10DV2S20170410andWADMetricsPT1MP10DV2S20170609.
WADMetricsPT1HP10DV2S20170410
WADMetricsPT1MP10DV2S20170609
"syslogEvents": {
    "sinks": "",
    "syslogEventConfiguration": {
        "facilityName1": "minSeverity",
        "facilityName2": "minSeverity",
        ...
    }
}
"syslogEvents": {
    "sinks": "",
    "syslogEventConfiguration": {
        "facilityName1": "minSeverity",
        "facilityName2": "minSeverity",
        ...
    }
}
ThesyslogEventsoptional section controls the collection of log events from syslog. If the section is omitted, syslog events aren't captured at all.
syslogEvents
ThesyslogEventConfigurationcollection has one entry for each syslog facility of interest. IfminSeverityis"NONE"for a particular facility, or if that facility doesn't appear in the element at all, no events from that facility are captured.
syslogEventConfiguration
minSeverity
"NONE"
syslogEventConfiguration
"EHforsyslog"
"LOG_USER"
"LOG_LOCAL0"
"LOG_ERR"
"LOG_INFO"
When you specifysyslogEvents, LAD always writes data to a table named LinuxSyslogVer2v0 in Azure Storage. The same data can be written to JSON blobs or Event Hubs or both. You can't disable storing data to a table.
syslogEvents
sinksConfig
The optional publicsinksConfigsection enables sending metrics to the Azure Monitor sink in addition to the Storage account and the default Guest Metrics view.
sinksConfig
Note
Both public and protected settings have an optionalsinksConfigsection. ThesinksConfigsection in thepublicsettings only holds theAzMonSinksink configuration.EventHubandJsonBlobsink configurationscannotbe included in your public settings.
sinksConfig
sinksConfig
AzMonSink
EventHub
JsonBlob
Note
ThesinksConfigsection requires system-assigned identity to be enabled on the VMs or virtual machine scale set.
You can enable system-assigned identity through the Azure portal, CLI, PowerShell, or Azure Resource Manager. Follow thedetailed instructionsor see the previous installations samples in this article.
sinksConfig
"sinksConfig": {
    "sink": [
      {
        "name": "AzMonSink",
        "type": "AzMonSink",
        "AzureMonitor": {}
      }
    ]
  },
"sinksConfig": {
    "sink": [
      {
        "name": "AzMonSink",
        "type": "AzMonSink",
        "AzureMonitor": {}
      }
    ]
  },
fileLogs
ThefileLogssection controls the capture of log files. LAD captures new text lines as they're written to the file. It writes them to table rows and any specified sinks, such asJsonBlobandEventHub.
fileLogs
JsonBlob
EventHub
Note
ThefileLogsare captured by a subcomponent of LAD calledomsagent. To collectfileLogs, ensure that theomsagentuser has read permissions on the files you specify. It must also have execute permissions on all directories in the path to that file. After LAD is installed, to check permissions, runsudo su omsagent -c 'cat /path/to/file'.
fileLogs
omsagent
fileLogs
omsagent
sudo su omsagent -c 'cat /path/to/file'
"fileLogs": [
    {
        "file": "/var/log/mydaemonlog",
        "table": "MyDaemonEvents",
        "sinks": ""
    }
]
"fileLogs": [
    {
        "file": "/var/log/mydaemonlog",
        "table": "MyDaemonEvents",
        "sinks": ""
    }
]
omsagent
Either"table"or"sinks"or both must be specified.
"table"
"sinks"
Metrics supported by the builtin provider
The default metrics that LAD supports are aggregated across all file systems, disks, or names. For nonaggregated metrics, refer to the newer Azure Monitor sink metrics support.
Note
The display names for each metric differ depending on the metrics namespace to which it belongs:
Guest (classic)populated from your storage account: the specifieddisplayNamein theperformanceCounterssection, or the default display name as seen in Azure Portal. For the VM, underMonitoring>Diagnostic settings, selectMetricstab.
Guest (classic)
displayName
performanceCounters
azure.vm.linux.guestmetricspopulated fromAzMonSink, if configured: the "azure.vm.linux.guestmetricsDisplay Name" specified in the following tables.
azure.vm.linux.guestmetrics
AzMonSink
azure.vm.linux.guestmetrics
The metric values betweenGuest (classic)andazure.vm.linux.guestmetricsversions differ. While the classic metrics had certain aggregations applied in the agent, the new metrics are unaggregated counters, giving customers the flexibility to aggregate as desired at viewing/alerting time.
Guest (classic)
azure.vm.linux.guestmetrics
Thebuiltinmetric provider is a source of metrics that are the most interesting to a broad set of users. These metrics fall into five broad classes:
builtin
Processor
Memory
Network
File system
Disk
builtin metrics for the Processor class
The Processor class of metrics provides information about processor usage in the VM. When percentages are aggregated, the result is the average across all CPUs.
In a two-vCPU VM, if one vCPU is 100 percent busy and the other is 100 percent idle, the reportedPercentIdleTimeis 50. If each vCPU is 50 percent busy for the same period, the reported result is also 50. In a four-vCPU VM, when one vCPU is 100 percent busy and the others are idle, the reportedPercentIdleTimeis 75.
PercentIdleTime
PercentIdleTime
cpu idle time
cpu percentage guest os
cpu io wait time
cpu interrupt time
cpu user time
cpu nice time
cpu privileged time
The first four counters should sum to 100 percent. The last three counters also sum to 100 percent. These three counters subdivide the sum ofPercentProcessorTime,PercentIOWaitTime, andPercentInterruptTime.
PercentProcessorTime
PercentIOWaitTime
PercentInterruptTime
builtin metrics for the Memory class
The Memory class of metrics provides information about memory use, paging, and swapping.
memory available
mem. percent available
memory used
memory percentage
pages
page reads
page writes
swap available
swap percent available
swap used
swap percent used
This class of metrics has only one instance. The"condition"attribute has no useful settings and should be omitted.
"condition"
builtin metrics for the Network class
The Network class of metrics provides information about network activity on an individual network interface since the startup.
LAD doesn't expose bandwidth metrics. You can get these metrics from host metrics.
network out guest os
network in guest os
network total bytes
packets sent
packets received
packets received errors
packets sent errors
network collisions
builtin metrics for the File system class
The File system class of metrics provides information about file system usage. Absolute and percentage values are reported as they would be displayed to an ordinary user, not root.
filesystem free space
filesystem used space
filesystem % free space
filesystem % used space
filesystem % free inodes
filesystem % used inodes
filesystem read bytes/sec
filesystem write bytes/sec
filesystem bytes/sec
filesystem reads/sec
filesystem writes/sec
filesystem transfers/sec
builtin metrics for the Disk class
The Disk class of metrics provides information about disk device usage. These statistics apply to the entire drive.
When a device has multiple file systems, the counters for that device are, effectively, aggregated across all file systems.
disk reads
disk writes
disk transfers
disk read time
disk write time
disk transfer time
disk queue length
disk read guest os
disk write guest os
disk total bytes
Example LAD 4.0 configuration
Based on the preceding definitions, this section provides a sample LAD 4.0 extension configuration and some explanation. To apply this sample, use your own storage account name, account shared access signature token, and Event Hubs SAS tokens.
Note
Depending on whether you use the Azure CLI or Azure PowerShell to install LAD, the method for providing public and protected settings differs:
If you're using the Azure CLI, save the following settings toProtectedSettings.jsonandPublicSettings.jsonto use the preceding sample command.
If you're using PowerShell, run$protectedSettings = '{ ... }'and$publicSettings = '{ ... }'to save the following settings to$protectedSettingsand$publicSettings.
$protectedSettings = '{ ... }'
$publicSettings = '{ ... }'
$protectedSettings
$publicSettings
Protected settings configuration
The protected settings configure:
A storage account.
A matching account shared access signature token.
Several sinks:JsonBloborEventHubwith SAS tokens.
JsonBlob
EventHub
{
  "storageAccountName": "yourdiagstgacct",
  "storageAccountSasToken": "sv=xxxx-xx-xx&ss=bt&srt=co&sp=wlacu&st=yyyy-yy-yyT21%3A22%3A00Z&se=zzzz-zz-zzT21%3A22%3A00Z&sig=fake_signature",
  "sinksConfig": {
    "sink": [
      {
        "name": "SyslogJsonBlob",
        "type": "JsonBlob"
      },
      {
        "name": "FilelogJsonBlob",
        "type": "JsonBlob"
      },
      {
        "name": "LinuxCpuJsonBlob",
        "type": "JsonBlob"
      },
      {
        "name": "MyJsonMetricsBlob",
        "type": "JsonBlob"
      },
      {
        "name": "LinuxCpuEventHub",
        "type": "EventHub",
        "sasURL": "https://youreventhubnamespace.servicebus.windows.net/youreventhubpublisher?sr=https%3a%2f%2fyoureventhubnamespace.servicebus.windows.net%2fyoureventhubpublisher%2f&sig=fake_signature&se=1808096361&skn=yourehpolicy"
      },
      {
        "name": "MyMetricEventHub",
        "type": "EventHub",
        "sasURL": "https://youreventhubnamespace.servicebus.windows.net/youreventhubpublisher?sr=https%3a%2f%2fyoureventhubnamespace.servicebus.windows.net%2fyoureventhubpublisher%2f&sig=yourehpolicy&skn=yourehpolicy"
      },
      {
        "name": "LoggingEventHub",
        "type": "EventHub",
        "sasURL": "https://youreventhubnamespace.servicebus.windows.net/youreventhubpublisher?sr=https%3a%2f%2fyoureventhubnamespace.servicebus.windows.net%2fyoureventhubpublisher%2f&sig=yourehpolicy&se=1808096361&skn=yourehpolicy"
      }
    ]
  }
}
{
  "storageAccountName": "yourdiagstgacct",
  "storageAccountSasToken": "sv=xxxx-xx-xx&ss=bt&srt=co&sp=wlacu&st=yyyy-yy-yyT21%3A22%3A00Z&se=zzzz-zz-zzT21%3A22%3A00Z&sig=fake_signature",
  "sinksConfig": {
    "sink": [
      {
        "name": "SyslogJsonBlob",
        "type": "JsonBlob"
      },
      {
        "name": "FilelogJsonBlob",
        "type": "JsonBlob"
      },
      {
        "name": "LinuxCpuJsonBlob",
        "type": "JsonBlob"
      },
      {
        "name": "MyJsonMetricsBlob",
        "type": "JsonBlob"
      },
      {
        "name": "LinuxCpuEventHub",
        "type": "EventHub",
        "sasURL": "https://youreventhubnamespace.servicebus.windows.net/youreventhubpublisher?sr=https%3a%2f%2fyoureventhubnamespace.servicebus.windows.net%2fyoureventhubpublisher%2f&sig=fake_signature&se=1808096361&skn=yourehpolicy"
      },
      {
        "name": "MyMetricEventHub",
        "type": "EventHub",
        "sasURL": "https://youreventhubnamespace.servicebus.windows.net/youreventhubpublisher?sr=https%3a%2f%2fyoureventhubnamespace.servicebus.windows.net%2fyoureventhubpublisher%2f&sig=yourehpolicy&skn=yourehpolicy"
      },
      {
        "name": "LoggingEventHub",
        "type": "EventHub",
        "sasURL": "https://youreventhubnamespace.servicebus.windows.net/youreventhubpublisher?sr=https%3a%2f%2fyoureventhubnamespace.servicebus.windows.net%2fyoureventhubpublisher%2f&sig=yourehpolicy&se=1808096361&skn=yourehpolicy"
      }
    ]
  }
}
Public settings configuration
The public settings cause LAD to:
Upload percent-processor-time metrics and used-disk-space metrics to theWADMetrics*table.
WADMetrics*
Upload messages from syslog facility"user"and severity"info"to theLinuxSyslog*table.
"user"
"info"
LinuxSyslog*
Upload appended lines in file/var/log/myladtestlogto theMyLadTestLogtable.
/var/log/myladtestlog
MyLadTestLog
In each case, data is also uploaded to:
Azure Blob Storage. The container name is as defined in theJsonBlobsink.
JsonBlob
An Event Hubs endpoint, as specified in theEventHubsink.
EventHub
{
  "StorageAccount": "yourdiagstgacct",
  "ladCfg": {
    "sampleRateInSeconds": 15,
    "diagnosticMonitorConfiguration": {
      "performanceCounters": {
        "sinks": "MyMetricEventHub,MyJsonMetricsBlob",
        "performanceCounterConfiguration": [
          {
            "unit": "Percent",
            "type": "builtin",
            "counter": "PercentProcessorTime",
            "counterSpecifier": "/builtin/Processor/PercentProcessorTime",
            "annotation": [
              {
                "locale": "en-us",
                "displayName": "cpu percentage guest os"
              }
            ],
            "condition": "IsAggregate=TRUE",
            "class": "Processor"
          },
          {
            "unit": "Bytes",
            "type": "builtin",
            "counter": "UsedSpace",
            "counterSpecifier": "/builtin/FileSystem/UsedSpace",
            "annotation": [
              {
                "locale": "en-us",
                "displayName": "Used disfilesystem used space"
              }
            ],
            "condition": "Name=\"/\"",
            "class": "Filesystem"
          }
        ]
      },
      "metrics": {
        "metricAggregation": [
          {
            "scheduledTransferPeriod": "PT1H"
          },
          {
            "scheduledTransferPeriod": "PT1M"
          }
        ],
        "resourceId": "/subscriptions/your_azure_subscription_id/resourceGroups/your_resource_group_name/providers/Microsoft.Compute/virtualMachines/your_vm_name"
      },
      "eventVolume": "Large",
      "syslogEvents": {
        "sinks": "SyslogJsonBlob,LoggingEventHub",
        "syslogEventConfiguration": {
          "LOG_USER": "LOG_INFO"
        }
      }
    }
  },
  "sinksConfig": {
    "sink": [
      {
        "name": "AzMonSink",
        "type": "AzMonSink",
        "AzureMonitor": {}
      }
    ]
  },
  "fileLogs": [
    {
      "file": "/var/log/myladtestlog",
      "table": "MyLadTestLog",
      "sinks": "FilelogJsonBlob,LoggingEventHub"
    }
  ]
}
{
  "StorageAccount": "yourdiagstgacct",
  "ladCfg": {
    "sampleRateInSeconds": 15,
    "diagnosticMonitorConfiguration": {
      "performanceCounters": {
        "sinks": "MyMetricEventHub,MyJsonMetricsBlob",
        "performanceCounterConfiguration": [
          {
            "unit": "Percent",
            "type": "builtin",
            "counter": "PercentProcessorTime",
            "counterSpecifier": "/builtin/Processor/PercentProcessorTime",
            "annotation": [
              {
                "locale": "en-us",
                "displayName": "cpu percentage guest os"
              }
            ],
            "condition": "IsAggregate=TRUE",
            "class": "Processor"
          },
          {
            "unit": "Bytes",
            "type": "builtin",
            "counter": "UsedSpace",
            "counterSpecifier": "/builtin/FileSystem/UsedSpace",
            "annotation": [
              {
                "locale": "en-us",
                "displayName": "Used disfilesystem used space"
              }
            ],
            "condition": "Name=\"/\"",
            "class": "Filesystem"
          }
        ]
      },
      "metrics": {
        "metricAggregation": [
          {
            "scheduledTransferPeriod": "PT1H"
          },
          {
            "scheduledTransferPeriod": "PT1M"
          }
        ],
        "resourceId": "/subscriptions/your_azure_subscription_id/resourceGroups/your_resource_group_name/providers/Microsoft.Compute/virtualMachines/your_vm_name"
      },
      "eventVolume": "Large",
      "syslogEvents": {
        "sinks": "SyslogJsonBlob,LoggingEventHub",
        "syslogEventConfiguration": {
          "LOG_USER": "LOG_INFO"
        }
      }
    }
  },
  "sinksConfig": {
    "sink": [
      {
        "name": "AzMonSink",
        "type": "AzMonSink",
        "AzureMonitor": {}
      }
    ]
  },
  "fileLogs": [
    {
      "file": "/var/log/myladtestlog",
      "table": "MyLadTestLog",
      "sinks": "FilelogJsonBlob,LoggingEventHub"
    }
  ]
}
TheresourceIdin the configuration must match that of the VM or the Virtual Machine Scale Set.
resourceId
Azure platform metrics charting and alerting knows theresourceIdof the VM you're working on. It expects to find the data for your VM by using theresourceIdas the lookup key.
resourceId
resourceId
If you use Azure autoscale, theresourceIdin the autoscale configuration must match theresourceIdthat LAD uses.
resourceId
resourceId
TheresourceIdis built in to the names of JSON blobs written by LAD.
resourceId
View your data
Use the Azure portal to view performance data or set alerts:

TheperformanceCountersdata is always stored in an Azure Storage table. Azure Storage APIs are available for many languages and platforms.
performanceCounters
Data sent toJsonBlobsinks is stored in blobs in the storage account named in theprotected settings. You can consume the blob data in any Azure Blob Storage API.
JsonBlob
You also can use these UI tools to access the data in Azure Storage:
Visual Studio Server Explorer
Azure Storage Explorer
The following screenshot of an Azure Storage Explorer session shows the generated Azure Storage tables and containers from a correctly configured LAD 4.0 extension on a test VM. The image doesn't exactly match thesample LAD 4.0 configuration.

For more information about how to consume messages published to an Event Hubs endpoint, see the relevantEvent Hubs documentation.
Next steps
InAzure Monitor, create alerts for the metrics you collect.
Create monitoring chartsfor your metrics.
Create a Virtual Machine Scale Setby using your metrics to control autoscaling.
Feedback
Was this page helpful?
Additional resources