Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Create diagnostic settings at scale using Azure Policies and Initiatives
Article
2025-04-17
2 contributors
In this article
In order to monitor Azure resources, it's necessary to creatediagnostic settingsfor each resource. This process can be difficult to manage when you have many resources. To simplify the process of creating and applying diagnostic settings at scale, use Azure Policy to automatically generate diagnostic settings for both new and existing resources.
Each Azure resource type has a unique set of categories listed in the diagnostic settings. Each resource type therefore requires a separate policy definition. Some resource types have built-in policy definitions that you can assign without modification. For other resource types, you can create a custom definition.
Log category groups
Log category groups, group together similar types of logs. Category groups make it easy to refer to multiple logs in a single command. AnallLogscategory group exists containing all of the logs. There's also anauditcategory group that includes all audit logs. By using to a category group, you can define a policy that dynamically updates as new log categories are added to group.
Built-in policy definitions for Azure Monitor
There are generally three built-in policy definitions for each resource type, corresponding to the three destinations to send diagnostics to:
Log Analytics workspaces
Azure Storage accounts
Event hubs
Assign the policies for the resource type according to which destinations you need.
A set of policies built-in policies and initiatives based on the audit log category groups exist to help you apply diagnostics settings with only a few steps. For more information, seeEnable Diagnostics settings by category group using built-in policies.
For a complete list of built-in policies for Azure Monitor, seeAzure Policy built-in definitions for Azure Monitor
Custom policy definitions
For resource types that don't have a built-in policy, you need to create a custom policy definition. You could do create a new policy manually in the Azure portal by copying an existing built-in policy and then modifying it for your resource type. Alternatively, create the policy programmatically by using a script in the PowerShell Gallery.
The scriptCreate-AzDiagPolicycreates policy files for a particular resource type that you can install by using PowerShell or the Azure CLI. Use the following procedure to create a custom policy definition for diagnostic settings:
Ensure that you haveAzure PowerShellinstalled.
Ensure that you haveAzure PowerShellinstalled.
Install the script by using the following command:Install-Script -Name Create-AzDiagPolicy
Install the script by using the following command:
Install-Script -Name Create-AzDiagPolicy
Install-Script -Name Create-AzDiagPolicy
Run the script by using the parameters to specify where to send the logs. Specify a subscription and resource type at the prompt.For example, to create a policy definition that sends logs to a Log Analytics workspace and an event hub, use the following command:Create-AzDiagPolicy.ps1 -ExportLA -ExportEH -ExportDir ".\PolicyFiles"Alternatively, you can specify a subscription and resource type in the command. For example, to create a policy definition that sends logs to a Log Analytics workspace and an event hub for SQL Server databases, use the following command:Create-AzDiagPolicy.ps1 -SubscriptionID <subscription id> -ResourceType Microsoft.Sql/servers/databases -ExportLA -ExportEH -ExportDir ".\PolicyFiles"
Run the script by using the parameters to specify where to send the logs. Specify a subscription and resource type at the prompt.
For example, to create a policy definition that sends logs to a Log Analytics workspace and an event hub, use the following command:
Create-AzDiagPolicy.ps1 -ExportLA -ExportEH -ExportDir ".\PolicyFiles"
Create-AzDiagPolicy.ps1 -ExportLA -ExportEH -ExportDir ".\PolicyFiles"
Alternatively, you can specify a subscription and resource type in the command. For example, to create a policy definition that sends logs to a Log Analytics workspace and an event hub for SQL Server databases, use the following command:
Create-AzDiagPolicy.ps1 -SubscriptionID <subscription id> -ResourceType Microsoft.Sql/servers/databases -ExportLA -ExportEH -ExportDir ".\PolicyFiles"
Create-AzDiagPolicy.ps1 -SubscriptionID <subscription id> -ResourceType Microsoft.Sql/servers/databases -ExportLA -ExportEH -ExportDir ".\PolicyFiles"
The script creates separate folders for each policy definition. Each folder contains three files namedazurepolicy.json,azurepolicy.rules.json, andazurepolicy.parameters.json. If you want to create the policy manually in the Azure portal, you can copy and paste the contents ofazurepolicy.jsonbecause it includes the entire policy definition. Use the other two files with PowerShell or the Azure CLI to create the policy definition from a command line.The following examples show how to install the policy definition from both PowerShell and the Azure CLI. Each example includes metadata to specify a category ofMonitoringto group the new policy definition with the built-in policy definitions.New-AzPolicyDefinition -name "Deploy Diagnostic Settings for SQL Server database to Log Analytics workspace" -policy .\Apply-Diag-Settings-LA-Microsoft.Sql-servers-databases\azurepolicy.rules.json -parameter .\Apply-Diag-Settings-LA-Microsoft.Sql-servers-databases\azurepolicy.parameters.json -mode All -Metadata '{"category":"Monitoring"}'az policy definition create --name 'deploy-diag-setting-sql-database--workspace' --display-name 'Deploy Diagnostic Settings for SQL Server database to Log Analytics workspace'  --rules 'Apply-Diag-Settings-LA-Microsoft.Sql-servers-databases\azurepolicy.rules.json' --params 'Apply-Diag-Settings-LA-Microsoft.Sql-servers-databases\azurepolicy.parameters.json' --subscription 'AzureMonitor_Docs' --mode All
The script creates separate folders for each policy definition. Each folder contains three files namedazurepolicy.json,azurepolicy.rules.json, andazurepolicy.parameters.json. If you want to create the policy manually in the Azure portal, you can copy and paste the contents ofazurepolicy.jsonbecause it includes the entire policy definition. Use the other two files with PowerShell or the Azure CLI to create the policy definition from a command line.
The following examples show how to install the policy definition from both PowerShell and the Azure CLI. Each example includes metadata to specify a category ofMonitoringto group the new policy definition with the built-in policy definitions.
New-AzPolicyDefinition -name "Deploy Diagnostic Settings for SQL Server database to Log Analytics workspace" -policy .\Apply-Diag-Settings-LA-Microsoft.Sql-servers-databases\azurepolicy.rules.json -parameter .\Apply-Diag-Settings-LA-Microsoft.Sql-servers-databases\azurepolicy.parameters.json -mode All -Metadata '{"category":"Monitoring"}'
New-AzPolicyDefinition -name "Deploy Diagnostic Settings for SQL Server database to Log Analytics workspace" -policy .\Apply-Diag-Settings-LA-Microsoft.Sql-servers-databases\azurepolicy.rules.json -parameter .\Apply-Diag-Settings-LA-Microsoft.Sql-servers-databases\azurepolicy.parameters.json -mode All -Metadata '{"category":"Monitoring"}'
az policy definition create --name 'deploy-diag-setting-sql-database--workspace' --display-name 'Deploy Diagnostic Settings for SQL Server database to Log Analytics workspace'  --rules 'Apply-Diag-Settings-LA-Microsoft.Sql-servers-databases\azurepolicy.rules.json' --params 'Apply-Diag-Settings-LA-Microsoft.Sql-servers-databases\azurepolicy.parameters.json' --subscription 'AzureMonitor_Docs' --mode All
az policy definition create --name 'deploy-diag-setting-sql-database--workspace' --display-name 'Deploy Diagnostic Settings for SQL Server database to Log Analytics workspace'  --rules 'Apply-Diag-Settings-LA-Microsoft.Sql-servers-databases\azurepolicy.rules.json' --params 'Apply-Diag-Settings-LA-Microsoft.Sql-servers-databases\azurepolicy.parameters.json' --subscription 'AzureMonitor_Docs' --mode All
Initiative
Rather than create an assignment for each policy definition, a common strategy is to create an initiative that includes the policy definitions to create diagnostic settings for each Azure service. Create an assignment between the initiative and a management group, subscription, or resource group, depending on how you manage your environment. This strategy offers the following benefits:
Create a single assignment for the initiative instead of multiple assignments for each resource type. Use the same initiative for multiple monitoring groups, subscriptions, or resource groups.
Modify the initiative when you need to add a new resource type or destination. For example, your initial requirements might be to send data only to a Log Analytics workspace, but later you want to add an event hub. Modify the initiative instead of creating new assignments.
For details on creating an initiative, seeCreate and assign an initiative definition. Consider the following recommendations:
SetCategorytoMonitoringto group it with related built-in and custom policy definitions.
Instead of specifying the details for the Log Analytics workspace and the event hub for policy definitions included in the initiative, use a common initiative parameter. This parameter allows you to easily specify a common value for all policy definitions and change that value if necessary.

Assignment
Assign the initiative to an Azure management group, subscription, or resource group, depending on the scope of your resources to monitor. Amanagement groupis useful for scoping policy, especially if your organization has multiple subscriptions.

By using initiative parameters, you can specify the workspace or any other details once for all of the policy definitions in the initiative.

Remediation
The initiative is applied to each virtual machine as it's created. Aremediation taskdeploys the policy definitions in the initiative to existing resources, so you can create diagnostic settings for any resources that were already created.
When you create the assignment by using the Azure portal, you have the option of creating a remediation task at the same time. SeeRemediate noncompliant resources with Azure Policyfor details on the remediation.

Troubleshooting
Metric category isn't supported
When deploying a diagnostic setting, you receive an error message, similar toMetric category 'xxxx' is not supported. You may receive this error even though your previous deployment succeeded.
The problem occurs when using a Resource Manager template, REST API, Azure CLI, or Azure PowerShell. Diagnostic settings created via the Azure portal aren't affected as only the supported category names are presented.
Metric categories other thanAllMetricsaren't supported except for a limited number of Azure services. Previously other category names were ignored when deploying a diagnostic setting, redirecting them toAllMetrics. As of February 2021, the metric category provided is validated. This change caused some deployments to fail.
AllMetrics
AllMetrics
To fix this issue, update your deployments to remove any metric category names other thanAllMetrics. If the deployment adds multiple categories, use only oneAllMetricscategory. If you continue to have the problem, contact Azure support through the Azure portal.
AllMetrics
AllMetrics
Setting disappears due to non-ASCII characters in resourceID
Diagnostic settings don't support resourceIDs with non-ASCII characters (for example, PreproduccÃ³n). Since you can't rename resources in Azure, you must create a new resource without the non-ASCII characters. If the characters are in a resource group, you can move the resources to a new group.
Possibility of duplicated or dropped data
Every effort is made to ensure all log data is sent correctly to your destinations, however it's not possible to guarantee 100% data transfer of logs between endpoints. Retries and other mechanisms are in place to work around these issues and attempt to ensure log data arrives at the endpoint.
Inactive resources
When a resource is inactive and exporting zero-value metrics, the diagnostic settings export mechanism backs off incrementally to avoid unnecessary costs of exporting and storing zero values. The back-off may lead to a delay in the export of the next non-zero value.
When a resource is inactive for one hour, the export mechanism backs off to 15 minutes. This means that there is a potential latency of up to 15 minutes for the next nonzero value to be exported. The maximum backoff time of two hours is reached after seven days of inactivity. Once the resource starts exporting nonzero values, the export mechanism reverts to the original export latency of three minutes.
This behavior only applies to exported metrics and doesn't affect metrics-based alerts or autoscale.
Next steps
Read more about Azure Monitor data sources and data collection methods
Read more about diagnostic settings
Export metrics using data collection rules
Feedback
Was this page helpful?
Additional resources