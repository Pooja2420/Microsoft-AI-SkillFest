Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Protect an API in Azure API Management using OAuth 2.0 authorization with Microsoft Entra ID
Article
2025-03-13
35 contributors
In this article
APPLIES TO: All API Management tiers
In this article, you'll learn high level steps to configure yourAzure API Managementinstance to protect an API, by using theOAuth 2.0 protocol with Microsoft Entra ID.
For a conceptual overview of API authorization, seeAuthentication and authorization to APIs in API Management.
Prerequisites
Prior to following the steps in this article, you must have:
An API Management instance
A published API using the API Management instance
A Microsoft Entra tenant
Overview
Follow these steps to protect an API in API Management, using OAuth 2.0 authorization with Microsoft Entra ID.
Register an application (calledbackend-appin this article) in Microsoft Entra ID to protect access to the API.To access the API, users or applications will acquire and present a valid OAuth token granting access to this app with each API request.
Register an application (calledbackend-appin this article) in Microsoft Entra ID to protect access to the API.
To access the API, users or applications will acquire and present a valid OAuth token granting access to this app with each API request.
Configure thevalidate-jwtpolicy in API Management to validate the OAuth token presented in each incoming API request. Valid requests can be passed to the API.
Configure thevalidate-jwtpolicy in API Management to validate the OAuth token presented in each incoming API request. Valid requests can be passed to the API.
Details about OAuth authorization flows and how to generate the required OAuth tokens are beyond the scope of this article. Typically, a separate client app is used to acquire tokens from Microsoft Entra ID that authorize access to the API. For links to more information, see therelated content.

Register an application in Microsoft Entra ID to represent the API
Using the Azure portal, protect an API with Microsoft Entra ID by first registering an application that represents the API.
For details about app registration, seeQuickstart: Configure an application to expose a web API.
In theAzure portal, search for and selectApp registrations.
In theAzure portal, search for and selectApp registrations.
SelectNew registration.
SelectNew registration.
When theRegister an application pageappears, enter your application's registration information:In theNamesection, enter a meaningful application name that will be displayed to users of the app, such asbackend-app.In theSupported account typessection, select an option that suits your scenario.
When theRegister an application pageappears, enter your application's registration information:
In theNamesection, enter a meaningful application name that will be displayed to users of the app, such asbackend-app.
In theSupported account typessection, select an option that suits your scenario.
Leave theRedirect URIsection empty.
Leave theRedirect URIsection empty.
SelectRegisterto create the application.
SelectRegisterto create the application.
On the appOverviewpage, find theApplication (client) IDvalue and record it for later.
On the appOverviewpage, find theApplication (client) IDvalue and record it for later.
Under theManagesection of the side menu, selectExpose an APIand set theApplication ID URIwith the default value. If you're developing a separate client app to obtain OAuth 2.0 tokens for access to the backend-app, record this value for later.
Under theManagesection of the side menu, selectExpose an APIand set theApplication ID URIwith the default value. If you're developing a separate client app to obtain OAuth 2.0 tokens for access to the backend-app, record this value for later.
Select theAdd a scopebutton to display theAdd a scopepage:Enter a newScope name,Admin consent display name, andAdmin consent description.Make sure theEnabledscope state is selected.
Select theAdd a scopebutton to display theAdd a scopepage:
Enter a newScope name,Admin consent display name, andAdmin consent description.
Make sure theEnabledscope state is selected.
Select theAdd scopebutton to create the scope.
Select theAdd scopebutton to create the scope.
Repeat the previous two steps to add all scopes supported by your API.
Repeat the previous two steps to add all scopes supported by your API.
Once the scopes are created, make a note of them for use later.
Once the scopes are created, make a note of them for use later.
Configure a JWT validation policy to pre-authorize requests
The following example policy, when added to the<inbound>policy section, checks the value of the audience claim in an access token obtained from Microsoft Entra ID that is presented in the Authorization header. It returns an error message if the token is not valid. Configure this policy at a policy scope that's appropriate for your scenario.
<inbound>
In theopenid-configURL, theaad-tenantis the tenant ID in Microsoft Entra ID. Find this value in the Azure portal, for example, on theOverviewpage of your Microsoft Entra resource. The example shown assumes a single-tenant Microsoft Entra app and a v2 configuration endpoint.
openid-config
aad-tenant
The value of theclaimis the client ID of the backend-app you registered in Microsoft Entra ID.
claim
<validate-jwt header-name="Authorization" failed-validation-httpcode="401" failed-validation-error-message="Unauthorized. Access token is missing or invalid.">
    <openid-config url="https://login.microsoftonline.com/{aad-tenant}/v2.0/.well-known/openid-configuration" />
    <audiences>
        <audience>{audience-value - (ex:api://guid)}</audience>
    </audiences>
    <issuers>
        <issuer>{issuer-value - (ex: https://sts.windows.net/{tenant id}/)}</issuer>
    </issuers>
    <required-claims>
        <claim name="aud">
            <value>{backend-app-client-id}</value>
        </claim>
    </required-claims>
</validate-jwt>
<validate-jwt header-name="Authorization" failed-validation-httpcode="401" failed-validation-error-message="Unauthorized. Access token is missing or invalid.">
    <openid-config url="https://login.microsoftonline.com/{aad-tenant}/v2.0/.well-known/openid-configuration" />
    <audiences>
        <audience>{audience-value - (ex:api://guid)}</audience>
    </audiences>
    <issuers>
        <issuer>{issuer-value - (ex: https://sts.windows.net/{tenant id}/)}</issuer>
    </issuers>
    <required-claims>
        <claim name="aud">
            <value>{backend-app-client-id}</value>
        </claim>
    </required-claims>
</validate-jwt>
Note
The precedingopenid-configURL corresponds to the v2 endpoint. For the v1openid-configendpoint, usehttps://login.microsoftonline.com/{aad-tenant}/.well-known/openid-configuration.
openid-config
openid-config
https://login.microsoftonline.com/{aad-tenant}/.well-known/openid-configuration
For information on how to configure policies, seeSet or edit policies. Refer to thevalidate-jwtreference for more customization on JWT validations. To validate a JWT that was provided by the Microsoft Entra service, API Management also provides thevalidate-azure-ad-tokenpolicy.
validate-azure-ad-token
Authorization workflow
A user or application acquires a token from Microsoft Entra ID with permissions that grant access to the backend-app. If you use the v2 endpoint, ensure that the accessTokenAcceptedVersion property is set to 2 in the application manifest of the back end app and any client app that you configure.
A user or application acquires a token from Microsoft Entra ID with permissions that grant access to the backend-app. If you use the v2 endpoint, ensure that the accessTokenAcceptedVersion property is set to 2 in the application manifest of the back end app and any client app that you configure.
The token is added in the Authorization header of API requests to API Management.
The token is added in the Authorization header of API requests to API Management.
API Management validates the token by using thevalidate-jwtpolicy.If a request doesn't have a valid token, API Management blocks it.If a request is accompanied by a valid token, the gateway can forward the request to the API.
API Management validates the token by using thevalidate-jwtpolicy.
validate-jwt
If a request doesn't have a valid token, API Management blocks it.
If a request doesn't have a valid token, API Management blocks it.
If a request is accompanied by a valid token, the gateway can forward the request to the API.
If a request is accompanied by a valid token, the gateway can forward the request to the API.
Related content
To learn more about how to build an application and implement OAuth 2.0, seeMicrosoft Entra code samples.
To learn more about how to build an application and implement OAuth 2.0, seeMicrosoft Entra code samples.
For an end-to-end example of configuring OAuth 2.0 user authorization in the API Management developer portal, seeHow to authorize test console of developer portal by configuring OAuth 2.0 user authorization.
For an end-to-end example of configuring OAuth 2.0 user authorization in the API Management developer portal, seeHow to authorize test console of developer portal by configuring OAuth 2.0 user authorization.
Learn more aboutMicrosoft Entra ID and OAuth2.0.
Learn more aboutMicrosoft Entra ID and OAuth2.0.
For other ways to secure your back-end service, seeMutual certificate authentication.
For other ways to secure your back-end service, seeMutual certificate authentication.
Feedback
Was this page helpful?
Additional resources