Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Enable and view enhanced telemetry in Application Insights for Standard workflows in Azure Logic Apps
Article
2024-12-16
3 contributors
In this article
Applies to:Azure Logic Apps (Standard)
In Application Insights, you can enable enhanced telemetry collection for your Standard logic app resource and then view the collected data after your workflow finishes a run. This capability gives you a simplified experience to discover insights about your workflows and more control over filtering events at the data source, which helps you reduce storage costs. These improvements focus on real-time performance metrics that provide insights into your system's health and behavior. This can help you with proactively detecting and resolving issues earlier.
With your logic app connected to Application Insights, you can view log data and other metrics in near real time through the Azure portal by usingLive Metrics Stream.
You also have visualizations to help you plot incoming requests, outgoing requests, and overall health and access to a table of trace level diagnostics.
The following list describes some example telemetry improvements:
Trigger and action events now include the trigger or action type and the API name, which lets you query for specific connector use.
Make retry events easier to track.
Capture exceptions for trigger and action failures.
More control over filtering non-workflow related events.
Advanced filtering that gives you more control over how events are emitted, including triggers and actions.
This guide shows how to turn on enhanced telemetry collection in Application Insights for your Standard logic app.
Prerequisites
An Azure account and subscription. If you don't have a subscription,sign up for a free Azure account.
An Azure account and subscription. If you don't have a subscription,sign up for a free Azure account.
AnApplication Insightsinstance. You create this resourcein advance, when you create your Standard logic app, or after logic app deployment.
AnApplication Insightsinstance. You create this resourcein advance, when you create your Standard logic app, or after logic app deployment.
A Standard logic app and workflow, either in the Azure portal or in Visual Studio Code.Your logic app resource or project must use the Azure Functions v4 runtime, which is enabled by default.Your logic app musthave enabled Application Insightsfor diagnostics logging and tracing. You can do so either when you create your logic app or after deployment.
A Standard logic app and workflow, either in the Azure portal or in Visual Studio Code.
Your logic app resource or project must use the Azure Functions v4 runtime, which is enabled by default.
Your logic app resource or project must use the Azure Functions v4 runtime, which is enabled by default.
Your logic app musthave enabled Application Insightsfor diagnostics logging and tracing. You can do so either when you create your logic app or after deployment.
Your logic app musthave enabled Application Insightsfor diagnostics logging and tracing. You can do so either when you create your logic app or after deployment.
Enable enhanced telemetry in Application Insights
Portal
Visual Studio Code
In theAzure portal, open your Standard logic app resource.
In theAzure portal, open your Standard logic app resource.
On the logic app menu, underDevelopment Tools, selectAdvanced Tools. On theAdvanced Toolspage, selectGo, which opens the Kudu tools.
On the logic app menu, underDevelopment Tools, selectAdvanced Tools. On theAdvanced Toolspage, selectGo, which opens the Kudu tools.
On theKudupage, from theDebug consolemenu, selectCMD. In the folder directory table, browse to the following file and selectEdit:site/wwwroot/host.json
On theKudupage, from theDebug consolemenu, selectCMD. In the folder directory table, browse to the following file and selectEdit:site/wwwroot/host.json
In thehost.jsonfile, add the following JSON code:{
   "version": "2.0",
   "extensionBundle": {
      "id": "Microsoft.Azure.Functions.ExtensionBundle.Workflows",
      "version": "[1, 2.00]"
   },
   "extensions": {
      "workflow": {
         "Settings": {
            "Runtime.ApplicationInsightTelemetryVersion": "v2"
         }
      }
   }
}This configuration enables the default level of verbosity. For other options, seeApply filtering at the source.
In thehost.jsonfile, add the following JSON code:
{
   "version": "2.0",
   "extensionBundle": {
      "id": "Microsoft.Azure.Functions.ExtensionBundle.Workflows",
      "version": "[1, 2.00]"
   },
   "extensions": {
      "workflow": {
         "Settings": {
            "Runtime.ApplicationInsightTelemetryVersion": "v2"
         }
      }
   }
}
{
   "version": "2.0",
   "extensionBundle": {
      "id": "Microsoft.Azure.Functions.ExtensionBundle.Workflows",
      "version": "[1, 2.00]"
   },
   "extensions": {
      "workflow": {
         "Settings": {
            "Runtime.ApplicationInsightTelemetryVersion": "v2"
         }
      }
   }
}
This configuration enables the default level of verbosity. For other options, seeApply filtering at the source.
In Visual Studio Code, open your logic app project, and then open the project'shost.jsonfile.
In Visual Studio Code, open your logic app project, and then open the project'shost.jsonfile.
In thehost.jsonfile, add the following JSON code:{
   "version": "2.0",
   "extensionBundle": {
      "id": "Microsoft.Azure.Functions.ExtensionBundle.Workflows",
      "version": "[1, 2.00]"
   },
   "extensions": {
      "workflow": {
         "Settings": {
            "Runtime.ApplicationInsightTelemetryVersion": "v2"
         }
      }
   }
}This configuration enables the default level of verbosity. For other options, seeApply filtering at the source.
In thehost.jsonfile, add the following JSON code:
{
   "version": "2.0",
   "extensionBundle": {
      "id": "Microsoft.Azure.Functions.ExtensionBundle.Workflows",
      "version": "[1, 2.00]"
   },
   "extensions": {
      "workflow": {
         "Settings": {
            "Runtime.ApplicationInsightTelemetryVersion": "v2"
         }
      }
   }
}
{
   "version": "2.0",
   "extensionBundle": {
      "id": "Microsoft.Azure.Functions.ExtensionBundle.Workflows",
      "version": "[1, 2.00]"
   },
   "extensions": {
      "workflow": {
         "Settings": {
            "Runtime.ApplicationInsightTelemetryVersion": "v2"
         }
      }
   }
}
This configuration enables the default level of verbosity. For other options, seeApply filtering at the source.

Open Application Insights
After your workflow finishes a run and a few minutes pass, open your Application Insights resource.
In theAzure portal, on your logic app menu, underSettings, selectApplication Insights.
In theAzure portal, on your logic app menu, underSettings, selectApplication Insights.
On the Application Insights resource menu, underMonitoring, selectLogs.
On the Application Insights resource menu, underMonitoring, selectLogs.

View enhanced logs in Application Insights
The following sections describe the tables in Application Insights where you can find and view the enhanced telemetry generated from your workflow run.
Requests table
The Requests table contains fields that track data about the following events in Standard workflow runs:
Trigger and action events
Retry attempts
Connector usage
To show how data gets into these fields, suppose you have the following example Standard workflow that starts with theRequesttrigger followed by theComposeaction and theResponseaction.

The trigger's settings have a parameter namedCustom Tracking Id. The parameter value is set to an expression that pulls theorderIdproperty value from the body of an incoming message:

Next, the workflow'sComposeaction settings has an added tracked property namedsolutionName. The property value is set to the name of the logic app resource.

TheComposeaction is followed by aResponseaction that returns a response to the caller.
The following list has example queries that you can create and run against the Requests table:

After the workflow runs and a few minutes pass, you can create a query against the Requests table to view all the operation events.
If necessary, select the time range that you want to review. By default, this value is the last 24 hours.
If necessary, select the time range that you want to review. By default, this value is the last 24 hours.
To view all trigger and action events, create and run the following query:requests
| sort by timestamp desc
| take 10The following example shows theResultstab with the noted columns and data in each row:ColumnDescriptionExamplenameWorkflow operation nameFor this example, the rows showmanual(Request trigger),Compose, andResponse.successOperation execution statusFor this example, all the rows showTruefor a successful execution. If an error happened, the value isFalse.resultCodeOperation execution status codeFor this example, all the rows showSucceeded(200).durationOperation execution durationVaries for each operation.
To view all trigger and action events, create and run the following query:
requests
| sort by timestamp desc
| take 10
requests
| sort by timestamp desc
| take 10
The following example shows theResultstab with the noted columns and data in each row:

To view the details for a specific operation, expand the row for the trigger or action:The following example shows the expanded details for theRequesttrigger:PropertyDescriptionExampleCategoryOperation category, which is always eitherWorkflow.Operations.TriggersorWorkflow.Operations.Actions, based on the operationWorkflow.Operations.Triggers.clientTrackingIdCustom tracking ID, if specified123456runIdID for the workflow run instance08585358375819913417237801890CU00triggerNameTrigger namemanualworkflowIdID for the workflow that ran the triggerc7711d107e6647179c2e15fe2c2720ceworkflowNameName for the workflow that ran the triggerRequest-Response-Workflowoperation_NameName for the operation that ran the trigger. In this case, this name is the same as the workflow name.Request-Response-Workflowoperation_IdID for the component or workflow that just ran. This ID is the same as therunIdvalue for the workflow run instance. If exceptions or dependencies exist, this value transcends tables so you can link this trigger record to those exceptions or dependencies.08585358375819913417237801890CU00operation_ParentIdLinkable ID for the workflow that called the triggerf95138daff8ab129The following example shows the expanded details for theComposeaction:PropertyDescriptionExampleCategoryOperation category, which is always eitherWorkflow.Operations.TriggersorWorkflow.Operations.Actions, based on the operationWorkflow.Operations.ActionsclientTrackingIdCustom tracking ID, if specified123456actionNameAction nameComposerunIdID for the workflow run instance08585358375819913417237801890CU00workflowIdID for the workflow that ran the actionc7711d107e6647179c2e15fe2c2720ceworkflowNameName for the workflow that ran the actionRequest-Response-WorkflowsolutionNameTracked property name, if specifiedLA-AppInsightsoperation_NameName for the operation that ran the action. In this case, this name is the same as the workflow name.Request-Response-Workflowoperation_IdID for the component or workflow that just ran. This ID is the same as therunIdvalue for the workflow run instance. If exceptions or dependencies exist, this value transcends tables so you can link this action record to those exceptions or dependencies.08585358375819913417237801890CU00operation_ParentIdLinkable ID for the workflow that called the actionf95138daff8ab129
To view the details for a specific operation, expand the row for the trigger or action:
The following example shows the expanded details for theRequesttrigger:

The following example shows the expanded details for theComposeaction:


You can create a query against the Requests table to view a subset of operation events, based on operation category and the workflow name.
If necessary, select the time range that you want to review. By default, this value is the last 24 hours.
If necessary, select the time range that you want to review. By default, this value is the last 24 hours.
To view all trigger events in a specific workflow, create and run a query with thecustomDimensions.Categoryproperty value set toWorkflow.Operations.Triggersandoperation_Nameset to the workflow name, for example:requests
| where customDimensions.Category == "Workflow.Operations.Triggers" and operation_Name == "Request-Response-Workflow"
To view all trigger events in a specific workflow, create and run a query with thecustomDimensions.Categoryproperty value set toWorkflow.Operations.Triggersandoperation_Nameset to the workflow name, for example:
requests
| where customDimensions.Category == "Workflow.Operations.Triggers" and operation_Name == "Request-Response-Workflow"
requests
| where customDimensions.Category == "Workflow.Operations.Triggers" and operation_Name == "Request-Response-Workflow"

To view all action events in a specific workflow, create a query with thecustomDimensions.Categoryproperty value set toWorkflow.Operations.Actionsandoperation_Nameset to the workflow name, for example:requests
| where customDimensions.Category == "Workflow.Operations.Actions" and operation_Name == "Request-Response-Workflow"
To view all action events in a specific workflow, create a query with thecustomDimensions.Categoryproperty value set toWorkflow.Operations.Actionsandoperation_Nameset to the workflow name, for example:
requests
| where customDimensions.Category == "Workflow.Operations.Actions" and operation_Name == "Request-Response-Workflow"
requests
| where customDimensions.Category == "Workflow.Operations.Actions" and operation_Name == "Request-Response-Workflow"


You can create a query against the Requests table to view events for a specific trigger or action type.
If necessary, select the time range that you want to review. By default, this value is the last 24 hours.
If necessary, select the time range that you want to review. By default, this value is the last 24 hours.
To view all operation events with a specific trigger type, create and run a query with thecustomDimensions.triggerTypevalue set to the trigger type you want, for example:requests
| where customDimensions.triggerType == "Request"
To view all operation events with a specific trigger type, create and run a query with thecustomDimensions.triggerTypevalue set to the trigger type you want, for example:
requests
| where customDimensions.triggerType == "Request"
requests
| where customDimensions.triggerType == "Request"

To view all operation events with a specific action type, create and run a query with thecustomDimensions.actionTypevalue set to the action type you want, for example:requests
| where customDimensions.actionType == "Compose"
To view all operation events with a specific action type, create and run a query with thecustomDimensions.actionTypevalue set to the action type you want, for example:
requests
| where customDimensions.actionType == "Compose"
requests
| where customDimensions.actionType == "Compose"


You can create a query against the Requests table to view a subset of operation events, based on the workflow run ID. This workflow run ID is the same ID that you can find in the workflow's run history.
If necessary, select the time range that you want to review. By default, this value is the last 24 hours.
If necessary, select the time range that you want to review. By default, this value is the last 24 hours.
To view all operation events with a specific workflow run ID, create and run a query with theoperation_Idvalue set to the workflow run ID, for example:requests
| where operation_Id == "08585287554177334956853859655CU00"
To view all operation events with a specific workflow run ID, create and run a query with theoperation_Idvalue set to the workflow run ID, for example:
requests
| where operation_Id == "08585287554177334956853859655CU00"
requests
| where operation_Id == "08585287554177334956853859655CU00"


You can create a query against the Requests table to view a subset of operation events, based on the workflow name and client tracking ID.
If necessary, select the time range that you want to review. By default, this value is the last 24 hours.
If necessary, select the time range that you want to review. By default, this value is the last 24 hours.
To view all operation events with a specific client tracking ID in a specific workflow, create and run a query with theoperation_Namevalue set to the workflow name and theclientTrackingIdproperty value set to the value you want, for example:requests
| where operation_Name == "Request-Response-Workflow"
| extend correlation = todynamic(tostring(customDimensions.correlation))
| where correlation.clientTrackingId == "123456"
To view all operation events with a specific client tracking ID in a specific workflow, create and run a query with theoperation_Namevalue set to the workflow name and theclientTrackingIdproperty value set to the value you want, for example:
requests
| where operation_Name == "Request-Response-Workflow"
| extend correlation = todynamic(tostring(customDimensions.correlation))
| where correlation.clientTrackingId == "123456"
requests
| where operation_Name == "Request-Response-Workflow"
| extend correlation = todynamic(tostring(customDimensions.correlation))
| where correlation.clientTrackingId == "123456"


You can create a query against the Requests table to view a subset of operation events, based on the workflow name and solution name.
If necessary, select the time range that you want to review. By default, this value is the last 24 hours.
If necessary, select the time range that you want to review. By default, this value is the last 24 hours.
To view all operation events with a specific client tracking ID in a specific workflow, create and run a query with theoperation_Namevalue set to the workflow name and thesolutionNameproperty value set to the value you want, for example:requests
| where operation_Name == "Request-Response-Workflow" and customDimensions has "trackedProperties"
| extend trackedProperties = todynamic(tostring(customDimensions.trackedProperties))
| where trackedProperties.solutionName == "LA-AppInsights"
To view all operation events with a specific client tracking ID in a specific workflow, create and run a query with theoperation_Namevalue set to the workflow name and thesolutionNameproperty value set to the value you want, for example:
requests
| where operation_Name == "Request-Response-Workflow" and customDimensions has "trackedProperties"
| extend trackedProperties = todynamic(tostring(customDimensions.trackedProperties))
| where trackedProperties.solutionName == "LA-AppInsights"
requests
| where operation_Name == "Request-Response-Workflow" and customDimensions has "trackedProperties"
| extend trackedProperties = todynamic(tostring(customDimensions.trackedProperties))
| where trackedProperties.solutionName == "LA-AppInsights"

To show how this data gets into the Requests table, the following example Standard workflow uses anHTTPaction that calls a URL, which doesn't resolve. The workflow also has a retry policy that is set to a fixed interval that retries three times, once every 60 seconds.


You can create a query against the Requests table to view a subset of operation events with retry attempts.
If necessary, select the time range that you want to review. By default, this value is the last 24 hours.
If necessary, select the time range that you want to review. By default, this value is the last 24 hours.
To view only trigger and action events with retry history, create and run the following query in Application Insights:requests
| extend retryHistory = tostring(tostring(customDimensions.retryHistory))
| where isnotempty(retryHistory)
To view only trigger and action events with retry history, create and run the following query in Application Insights:
requests
| extend retryHistory = tostring(tostring(customDimensions.retryHistory))
| where isnotempty(retryHistory)
requests
| extend retryHistory = tostring(tostring(customDimensions.retryHistory))
| where isnotempty(retryHistory)
To view the retry attempts for a specific operation with a retry policy, expand the row for that operation.The following example shows the expanded details for theHTTPaction:ThesuccessandresultCodeproperty values indicate that theHTTPaction failed. Along with the properties described inQuery the Requests table for all trigger and action events, the record contains the following information, which include three retry attempts:PropertyDescriptionExampleretryHistoryHistory details for one or more retry attemptscodeError type for a specific retry attempterrorDetails about the specific error that happened
To view the retry attempts for a specific operation with a retry policy, expand the row for that operation.
The following example shows the expanded details for theHTTPaction:

ThesuccessandresultCodeproperty values indicate that theHTTPaction failed. Along with the properties described inQuery the Requests table for all trigger and action events, the record contains the following information, which include three retry attempts:

You can create a query against the Requests table to view a subset of operation events, based on specific connector usage.
If necessary, select the time range that you want to review. By default, this value is the last 24 hours.
If necessary, select the time range that you want to review. By default, this value is the last 24 hours.
To view all trigger events using a specific connector type, create and run a query with the following properties and values:requests
| where customDimensions.Category == "Workflow.Operations.Triggers" and customDimensions.triggerType =="ApiConnectionWebhook" and customDimensions.apiName =="commondataservice"PropertyExample valuecustomDimensions.CategoryWorkflow.Operations.TriggerscustomDimensions.triggerTypeThe operation type, for example,ApiConnectionWebhookcustomDimensions.apiNameThe connector's API name in JSON format, for example,commondataservicefor the Microsoft Dataverse connector
To view all trigger events using a specific connector type, create and run a query with the following properties and values:
requests
| where customDimensions.Category == "Workflow.Operations.Triggers" and customDimensions.triggerType =="ApiConnectionWebhook" and customDimensions.apiName =="commondataservice"
requests
| where customDimensions.Category == "Workflow.Operations.Triggers" and customDimensions.triggerType =="ApiConnectionWebhook" and customDimensions.apiName =="commondataservice"

To view all action events with specific connector usage, create and run a query with thecustomDimensions.Categoryvalue set toWorkflow.Operations.Actions, thecustomDimensions.triggerTypevalue set to the operation type, and thecustomDimensions.apiNameset to the connector's API name in JSON format, for example:PropertyExample valuecustomDimensions.CategoryWorkflow.Operations.ActionscustomDimensions.triggerTypeThe operation type, for example,ApiConnectioncustomDimensions.apiNameThe connector's API name in JSON format, for example,office365for the Microsoft Office 365 Outlook connectorrequests
| where customDimensions.Category == "Workflow.Operations.Actions" and customDimensions.actionType == "ApiConnection" and customDimensions.apiName == "office365"
To view all action events with specific connector usage, create and run a query with thecustomDimensions.Categoryvalue set toWorkflow.Operations.Actions, thecustomDimensions.triggerTypevalue set to the operation type, and thecustomDimensions.apiNameset to the connector's API name in JSON format, for example:
requests
| where customDimensions.Category == "Workflow.Operations.Actions" and customDimensions.actionType == "ApiConnection" and customDimensions.apiName == "office365"
requests
| where customDimensions.Category == "Workflow.Operations.Actions" and customDimensions.actionType == "ApiConnection" and customDimensions.apiName == "office365"

For both triggers and actions, Application Insights differentiates between the types of connections that exist. You might see different values in theactionTypeandtriggerTypefields based on whether the connection hasApiConnection,ApiConnectionWebhook, the built-in basic type such asRequest, or the built-in service provider-basedServiceProvidertype.
Traces table
The Traces table contains fields that track data about the following events in Standard workflow runs:
Workflow start and end eventsThis information is represented as two distinct events due to the potential for long-running workflow executions.
Workflow start and end events
This information is represented as two distinct events due to the potential for long-running workflow executions.
Batch send and receive eventsFor more information, seeUsing Built-In Batch Operations in Azure Logic Apps (Standard)
Batch send and receive events
For more information, seeUsing Built-In Batch Operations in Azure Logic Apps (Standard)
The following list has example queries that you can create and run against the Traces table:

You can create a query against the Traces table to view all the start and end events for all workflow runs.
If necessary, select the time range that you want to review. By default, this value is the last 24 hours.
If necessary, select the time range that you want to review. By default, this value is the last 24 hours.
Create and run a query with thecustomDimensions.Categoryvalue set toWorkflow.Operations.Runs, for example:traces
| where customDimensions.Category == "Workflow.Operations.Runs"
Create and run a query with thecustomDimensions.Categoryvalue set toWorkflow.Operations.Runs, for example:
traces
| where customDimensions.Category == "Workflow.Operations.Runs"
traces
| where customDimensions.Category == "Workflow.Operations.Runs"


You can create a query against the Traces table to view the start and end events for a specific workflow run.
If necessary, select the time range that you want to review. By default, this value is the last 24 hours.
If necessary, select the time range that you want to review. By default, this value is the last 24 hours.
Create and run a query with thecustomDimensions.Categoryvalue set toWorkflow.Operations.Runsand theoperation_Idvalue set to the workflow run ID, for example:traces
| where customDimensions.Category == "Workflow.Operations.Runs"
| and operation_Id == "08585287571846573488078100997CU00"
Create and run a query with thecustomDimensions.Categoryvalue set toWorkflow.Operations.Runsand theoperation_Idvalue set to the workflow run ID, for example:
traces
| where customDimensions.Category == "Workflow.Operations.Runs"
| and operation_Id == "08585287571846573488078100997CU00"
traces
| where customDimensions.Category == "Workflow.Operations.Runs"
| and operation_Id == "08585287571846573488078100997CU00"


You can create a query against the Traces table to view the batch send and batch receive events in all workflow runs.
If necessary, select the time range that you want to review. By default, this value is the last 24 hours.
If necessary, select the time range that you want to review. By default, this value is the last 24 hours.
Create and run a query with thecustomDimensions.Categoryvalue set toWorkflow.Operations.Runsand theoperation_Idvalue set to the workflow run ID, for example:traces
| where customDimensions.Category == "Workflow.Operations.Batch"
Create and run a query with thecustomDimensions.Categoryvalue set toWorkflow.Operations.Runsand theoperation_Idvalue set to the workflow run ID, for example:
traces
| where customDimensions.Category == "Workflow.Operations.Batch"
traces
| where customDimensions.Category == "Workflow.Operations.Batch"

Exceptions table
The Exceptions table contains fields that track data about exception events in Standard workflow runs. To show how data gets into these fields, suppose you have the following example Standard workflow that starts with theRequesttrigger followed by theComposeaction and theResponseaction. TheComposeaction uses an expression that divides a value by zero, which generates an exception:


You can create a query against the Exceptions table to view the exception events in all workflow runs.
If necessary, select the time range that you want to review. By default, this value is the last 24 hours.
If necessary, select the time range that you want to review. By default, this value is the last 24 hours.
To view all exception events, create and run the following query in Application Insights:exceptions
| sort by timestamp desc
To view all exception events, create and run the following query in Application Insights:
exceptions
| sort by timestamp desc
exceptions
| sort by timestamp desc
To view the details for a specific exception, expand the row for that exception:The following example shows the expanded exception for theComposeaction and details about the exception:PropertyDescriptionproblemIdException type, or a short description about the exception that happenedouterMessageMore detailed description about the exceptiondetailsVerbose and most complete information about the exceptionclientTrackingIdClient tracking ID, if specifiedworkflowIdID for the workflow that experienced the exceptionworkflowNameName for the workflow that experienced the exceptionrunIdID for the workflow run instanceactionNameName for the action that failed with the exceptionoperation_NameName for the workflow that experienced the exceptionoperation_IdID for the component or workflow that just ran. This ID is the same as therunIdvalue for the workflow run instance. This value transcends tables so you can link this exception record with the workflow run instance.operation_ParentIdID for the workflow that called the action, which you can link to the action's ID in the Requests table
To view the details for a specific exception, expand the row for that exception:
The following example shows the expanded exception for theComposeaction and details about the exception:

To view the exceptions for a specific workflow, create and run the following query:exceptions
| where operation_Name contains "Request-Response-Workflow-Exception"
To view the exceptions for a specific workflow, create and run the following query:
exceptions
| where operation_Name contains "Request-Response-Workflow-Exception"
exceptions
| where operation_Name contains "Request-Response-Workflow-Exception"
Dependencies table
The Dependencies table contains fields that track data about dependency events in Standard workflow runs. These events are emitted when one resource calls another resource and when both resources use Application Insights. Examples for Azure Logic Apps include a service calling another service over HTTP, a database, or file system. Application Insights measures the duration of dependency calls and whether those calls succeed or fail, along with information, such as the dependency name. You can investigate specific dependency calls and correlate them to requests and exceptions.
To show how data gets into these fields, suppose you have the following example Standard parent workflow that calls a child workflow over HTTP using theHTTPaction:


You can create a query against the Dependencies table to view the dependency events in a specific workflow run.
If necessary, select the time range that you want to review. By default, this value is the last 24 hours.
If necessary, select the time range that you want to review. By default, this value is the last 24 hours.
To view dependency events between the parent workflow and the child workflow, create and run the following query:union requests, dependencies
| where operation_Id contains "<runId>"This query uses theunionoperatorto return records from the Requests table and Dependencies table. The query also uses theoperation_Idproperty value to provide the link between records by specifying the workflowrunIdvalue you want, for example:union requests, dependencies
| where operation_Id contains "08585355753671110236506928546CU00"The following example shows a dependency event for the specified workflow, including records for the operation events in the parent workflow from the Requests table and then a dependency record from the Dependencies table:For the operation event records, theitemTypecolumn shows their record types asrequest. For the dependency record, theitemTypecolumn indicates the record type asdependency.PropertyDescriptionrunIdID for the workflow run instanceactionNameName for the action where the dependency event happensoperation_IdID for the specified workflow. This ID is the same as therunIdvalue for the workflow run instance. This value transcends tables so you can link this dependency record with the workflow run instance.operation_ParentIdID for the action where the dependency event happens, which also links the operation event record and dependency event record together
To view dependency events between the parent workflow and the child workflow, create and run the following query:
union requests, dependencies
| where operation_Id contains "<runId>"
union requests, dependencies
| where operation_Id contains "<runId>"
This query uses theunionoperatorto return records from the Requests table and Dependencies table. The query also uses theoperation_Idproperty value to provide the link between records by specifying the workflowrunIdvalue you want, for example:
union requests, dependencies
| where operation_Id contains "08585355753671110236506928546CU00"
union requests, dependencies
| where operation_Id contains "08585355753671110236506928546CU00"
The following example shows a dependency event for the specified workflow, including records for the operation events in the parent workflow from the Requests table and then a dependency record from the Dependencies table:

For the operation event records, theitemTypecolumn shows their record types asrequest. For the dependency record, theitemTypecolumn indicates the record type asdependency.
With your query, you can also visualize the dependency call from a parent workflow to a child workflow when you use the application map in Application Insights. Theoperation_Idvalue in your query provides the link that makes this visualization possible.
To open the application map, on the Application Insights resource menu, underInvestigate, selectApplication map.


Filter events
In Application Insights, you can filter events in the following ways:
Create and run queries as described in earlier sections.
Create and run queries as described in earlier sections.
Filter at the source by specifying criteria to evaluate before emitting events.By applying filters at the source, you can reduce the amount of necessary storage and as a result, operating costs.
Filter at the source by specifying criteria to evaluate before emitting events.
By applying filters at the source, you can reduce the amount of necessary storage and as a result, operating costs.

Apply filtering at the source
In the Requests table or Traces table, a record has a node namedcustomDimensions, which contains aCategoryproperty. For example, in the Requests table, the request record for a Batch trigger event looks similar to the following sample:

In the Requests table, the followingCategoryproperty values can help you differentiate and associate different verbosity levels:
For eachCategoryvalue, you can independently set the verbosity level in thehost.jsonfile for your logic app resource or project. For example, to return only the records for trigger or action events that have errors, in thehost.jsonfile, you can add the followingloggingJSON object, which contains alogLevelJSON object with the verbosity levels you want:
{
   "logging": {
      "logLevel": {
         "Workflow.Operations.Actions": "Error",
         "Workflow.Operations.Triggers": "Error"
      }
   }
}
{
   "logging": {
      "logLevel": {
         "Workflow.Operations.Actions": "Error",
         "Workflow.Operations.Triggers": "Error"
      }
   }
}
For Traces table records, the following examples show ways that you can change the verbosity level for events:
{
   "logging": {
      "logLevel": {
         "Workflow.Host": "Warning",
         "Workflow.Jobs": "Warning",
         "Workflow.Runtime": "Warning"
      }
   }
}
{
   "logging": {
      "logLevel": {
         "Workflow.Host": "Warning",
         "Workflow.Jobs": "Warning",
         "Workflow.Runtime": "Warning"
      }
   }
}
The following example sets the log's default verbosity level toWarning, but keeps the verbosity level atInformationfor trigger, action, and workflow run events:
{
   "logging": {
      "logLevel": {
         "default": "Warning",
         "Workflow.Operations.Actions": "Information",
         "Workflow.Operations.Runs": "Information",
         "Workflow.Operations.Triggers": "Information"
      }
   }
}
{
   "logging": {
      "logLevel": {
         "default": "Warning",
         "Workflow.Operations.Actions": "Information",
         "Workflow.Operations.Runs": "Information",
         "Workflow.Operations.Triggers": "Information"
      }
   }
}
If you don't specify anylogLevelvalues, the default verbosity level isInformation. For more information, seeConfigure log levels.
Remove storage dependency errors
To filter out storage dependency errors, such as404 Not Founderrors and412 Precondition Failederrors, set theHost.Workflowlog level toNone, for example:
{
   "logging": {
      "logLevel": {
         "Workflow.Host": "Warning",
         "Workflow.Jobs": "Warning",
         "Workflow.Runtime": "Warning",
         "Host.Workflow": "None"
      }
   }
}
{
   "logging": {
      "logLevel": {
         "Workflow.Host": "Warning",
         "Workflow.Jobs": "Warning",
         "Workflow.Runtime": "Warning",
         "Host.Workflow": "None"
      }
   }
}
Portal
Visual Studio Code
In theAzure portal, open your Standard logic app resource.
In theAzure portal, open your Standard logic app resource.
On the logic app menu, underDevelopment Tools, selectAdvanced Tools. On theAdvanced Toolspage, selectGo, which opens the Kudu tools.
On the logic app menu, underDevelopment Tools, selectAdvanced Tools. On theAdvanced Toolspage, selectGo, which opens the Kudu tools.
On theKudupage, from theDebug consolemenu, selectCMD. In the folder directory table, browse to the following file and selectEdit:site/wwwroot/host.json
On theKudupage, from theDebug consolemenu, selectCMD. In the folder directory table, browse to the following file and selectEdit:site/wwwroot/host.json
In thehost.jsonfile, add theloggingJSON object with thelogLevelvalues set to the verbosity levels that you want:{
   "logging": {
      "logLevel": {
         "Workflow.Operations.Actions": "<verbosity-level>",
         "Workflow.Operations.Triggers": "<verbosity-level>"
      }
   }
}
In thehost.jsonfile, add theloggingJSON object with thelogLevelvalues set to the verbosity levels that you want:
{
   "logging": {
      "logLevel": {
         "Workflow.Operations.Actions": "<verbosity-level>",
         "Workflow.Operations.Triggers": "<verbosity-level>"
      }
   }
}
{
   "logging": {
      "logLevel": {
         "Workflow.Operations.Actions": "<verbosity-level>",
         "Workflow.Operations.Triggers": "<verbosity-level>"
      }
   }
}
In Visual Studio Code, open your logic app project, and then open the project'shost.jsonfile.
In Visual Studio Code, open your logic app project, and then open the project'shost.jsonfile.
In thehost.jsonfile, add theloggingJSON object with thelogLevelvalues set to the verbosity levels that you want:{
   "logging": {
      "logLevel": {
         "Workflow.Operations.Actions": "<verbosity-level>",
         "Workflow.Operations.Triggers": "<verbosity-level>"
      }
   }
}
In thehost.jsonfile, add theloggingJSON object with thelogLevelvalues set to the verbosity levels that you want:
{
   "logging": {
      "logLevel": {
         "Workflow.Operations.Actions": "<verbosity-level>",
         "Workflow.Operations.Triggers": "<verbosity-level>"
      }
   }
}
{
   "logging": {
      "logLevel": {
         "Workflow.Operations.Actions": "<verbosity-level>",
         "Workflow.Operations.Triggers": "<verbosity-level>"
      }
   }
}

View workflow metrics in Application Insights
With the telemetry enhancements in Application Insights, you also get workflow insights in the Metrics dashboard.

Open the Metrics dashboard and set up basic filters
In the Azure portal, open your Application Insights resource, if not opened already.
In the Azure portal, open your Application Insights resource, if not opened already.
On your Application Insights resource menu, underMonitoring, selectMetrics.
On your Application Insights resource menu, underMonitoring, selectMetrics.
From theScopelist, select your Application Insights instance.
From theScopelist, select your Application Insights instance.
From theMetric Namespacelist, selectworkflow.operations.
From theMetric Namespacelist, selectworkflow.operations.
From theMetriclist, select a metric, for example,Runs Completed.
From theMetriclist, select a metric, for example,Runs Completed.
From theAggregationlist, select a type, for example,CountorAvg.When you're done, the Metrics dashboard shows a chart with your finished workflow executions.
From theAggregationlist, select a type, for example,CountorAvg.
When you're done, the Metrics dashboard shows a chart with your finished workflow executions.


Filter based on a specific workflow
When you enable multidimensional metrics in the Metrics dashboard, you can target a subset of the overall events captured in Application Insights and filter events based on a specific workflow.
On your Application Insights resource,enable multidimensional metrics.
On your Application Insights resource,enable multidimensional metrics.
In Application Insights,open the Metrics dashboard.
In Application Insights,open the Metrics dashboard.
On the chart toolbar, selectAdd filter.
On the chart toolbar, selectAdd filter.
From thePropertylist, selectWorkflow.
From thePropertylist, selectWorkflow.
From theOperatorlist, select the equal sign (=).
From theOperatorlist, select the equal sign (=).
From theValueslist, select the workflows you want.
From theValueslist, select the workflows you want.


View "live" log data and metrics
With Application Insights enhanced telemetry enabled, you can view near real-time log data and other metrics from your Application Insights instance in the Azure portal. You can use this visualization to plot inbound requests, outbound requests, and overall health. You also get a table for trace level diagnostics.
In the Azure portal, open your Application Insights resource, if not opened already.
In the Azure portal, open your Application Insights resource, if not opened already.
On your Application Insights resource menu, underInvestigate, selectLive metrics.TheLive metricspage shows the log data and other metrics, for example:
On your Application Insights resource menu, underInvestigate, selectLive metrics.
TheLive metricspage shows the log data and other metrics, for example:

For more information, seeLive Metrics: Monitor and diagnose with 1-second latency.
Note
As Standard logic app workflows are based on Azure Functions,Live Metricssupports these logic app workflows.

Stream and view debug output from application log files
With Application Insights enhanced telemetry enabled, you can stream verbose debugging information in the Azure portal for your application's log files. This information is equivalent to the output generated from debugging your workflow in your local Visual Studio Code environment.
In the Azure portal, open your Standard logic app resource.
In the Azure portal, open your Standard logic app resource.
On your logic app resource menu, underMonitoring, selectLog stream.TheLog streampage connects to your Application Insights instance and shows the debugging output. For example, the following output includes request and response calls among other information:
On your logic app resource menu, underMonitoring, selectLog stream.
TheLog streampage connects to your Application Insights instance and shows the debugging output. For example, the following output includes request and response calls among other information:

Next steps
Enable or open Application Insights
Feedback
Was this page helpful?
Additional resources