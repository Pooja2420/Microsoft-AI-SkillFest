Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
New Boards Hubs public preview
Article
2022-10-04
2 contributors
In this article
New Boards Hubs is now available in public preview. The web platform has been updated to provide a new modern design, responsive reflows, accessibility compliance, and improved page performance.
Check out the release notes for details.
General
Auditing is now an opt-in feature for your organization
Guest users will only see public user data
Azure Boards
New Boards Hubs now available in public preview
Azure Pipelines
Extended YAML Pipelines templates can now be passed context information for stages, jobs, and deployments
Updated retirement date for Windows 2016 hosted images
General
Auditing is now an opt-in feature for your organization
Auditing has now been made an opt-in feature on Azure DevOps. If your organization does not actively use Auditing today (i.e. have visited Auditing logs at least twice in the past 90 days or have a configured Auditing stream), you will have to explicitly turnOnthe auditing feature for your organization to start doing so. After turningOn, auditing events will be included in your organizationâs audit log. For organizations that are active users of Auditing, the feature will remainOn.
You can enable Auditing on your organization from yourOrganization settingspage.
On the right-hand sidebar, you will seePoliciesunderneath the Security header. Assuming your organization is backed by Azure Active Directory, you should see that one of the available security policies to enable isLog Audit Events. MSA-backed organizations will no longer have the Auditing features available to them.

Simply toggle this policyOnand Auditing should now be available (if it does not immediately appear, refresh the page and it should be available). If you no longer want to receive Auditing events, toggle the button toOff. When the button is toggled off, the Auditing page will no longer appear in the sidebar and the Auditing Logs page will be unavailable. All configured audit streams will stop receiving events.
Guest users will only see public user data
When theExternal guest accesspolicy isdisabledand theAllow public projectspolicy isenabled, guest users will only be able to see public user data, like display name, etc., for members of public projects. This is the same experience granted for anonymous users. This applies to any personal data available through the web experience (e.g. in the Identity Picker that appears when a user tries to mention another user or assign work items) and any personal data available through our REST APIs.
Azure Boards
New Boards Hubs now available in public preview
For the last several months our team has been focused on modernizing the user experience for the Azure Boards Hubs. The UI has been updated to provide a faster user interface, consistency with other parts of the product, and improved accessibility. The team is excited to finally announce the public preview for the new Azure Boards experience.
The functionality remains the same, but you can expect the following:
Modern design
Responsive reflows
Improved performance
Accessibility compliance
To opt-in to the public preview, in the preview features section toggle the feature namedNew Boards Hubsto On.

If for some reason theNew Boards Hubsare causing you a blocking issue, you can turn off the preview. But please try the new experience andsend us your feedback. Be sure to let us know if anything is missing or not working as expected.
Azure Pipelines
Extended YAML Pipelines templates can now be passed context information for stages, jobs, and deployments
With this update, we are adding a newtemplateContextproperty forjob,deployment, andstageYAML pipeline components meant to be used in conjunction with templates.
templateContext
job
deployment
stage
Here is a scenario for usingtemplateContext:
templateContext
You use templates to reduce code duplication or toimprove the security of your pipelines
You use templates to reduce code duplication or toimprove the security of your pipelines
Your template takes as parameter a list ofstages,jobs, ordeployments
Your template takes as parameter a list ofstages,jobs, ordeployments
stages
jobs
deployments
The template processes the input list and performs some transformations on each of the stages, jobs, or deployments. For example, it sets the environment in which each job runs or adds additional steps to enforce compliance
The template processes the input list and performs some transformations on each of the stages, jobs, or deployments. For example, it sets the environment in which each job runs or adds additional steps to enforce compliance
The processing requires additional information to be passed by the pipeline author into the template for each stage, job, or deployment in the list
The processing requires additional information to be passed by the pipeline author into the template for each stage, job, or deployment in the list
Let's look at an example. Say you are authoring a pipeline that runs end-to-end tests for pull request validation. Your goal is to test only one component of your system, but, because you plan to run end-to-end tests, you need an environment where more of the system's components are available, and you need to specify their behavior.
You realize other teams will have similar needs, so you decide to extract the steps for setting up the environment into a template. Its code looks like the following:
testing-template.yml
testing-template.yml
parameters: 
- name: testSet
  type: jobList

jobs:
- ${{ each testJob in parameters.testSet }}:
  - ${{ if eq(testJob.templateContext.expectedHTTPResponseCode, 200) }}:
    - job:
      steps:
        - script: ./createSuccessfulEnvironment.sh ${{ testJob.templateContext.requiredComponents }}
        - ${{ testJob.steps }}
  - ${{ if eq(testJob.templateContext.expectedHTTPResponseCode, 500) }}:
    - job:
      steps:
        - script: ./createRuntimeErrorEnvironment.sh ${{ testJob.templateContext.requiredComponents }}
        - ${{ testJob.steps }}
parameters: 
- name: testSet
  type: jobList

jobs:
- ${{ each testJob in parameters.testSet }}:
  - ${{ if eq(testJob.templateContext.expectedHTTPResponseCode, 200) }}:
    - job:
      steps:
        - script: ./createSuccessfulEnvironment.sh ${{ testJob.templateContext.requiredComponents }}
        - ${{ testJob.steps }}
  - ${{ if eq(testJob.templateContext.expectedHTTPResponseCode, 500) }}:
    - job:
      steps:
        - script: ./createRuntimeErrorEnvironment.sh ${{ testJob.templateContext.requiredComponents }}
        - ${{ testJob.steps }}
What the template does is, for each job in thetestSetparameter, it sets the response of the system's components specified by ${{ testJob.templateContext.requiredComponents }} to return ${{ testJob.templateContext.expectedHTTPResponseCode }}.
testSet
Then, you can create your own pipeline that extendstesting-template.ymllike in the following example.
testing-template.yml
sizeapi.pr_validation.yml
sizeapi.pr_validation.yml
trigger: none

pool:
  vmImage: ubuntu-latest

extends:
  template: testing-template.yml
  parameters:
    testSet:
    - job: positive_test
      templateContext:
        expectedHTTPResponseCode: 200
        requiredComponents: dimensionsapi
      steps:
      - script: ./runPositiveTest.sh
    - job: negative_test
      templateContext:
        expectedHTTPResponseCode: 500
        requiredComponents: dimensionsapi
      steps:
      - script: ./runNegativeTest.sh
trigger: none

pool:
  vmImage: ubuntu-latest

extends:
  template: testing-template.yml
  parameters:
    testSet:
    - job: positive_test
      templateContext:
        expectedHTTPResponseCode: 200
        requiredComponents: dimensionsapi
      steps:
      - script: ./runPositiveTest.sh
    - job: negative_test
      templateContext:
        expectedHTTPResponseCode: 500
        requiredComponents: dimensionsapi
      steps:
      - script: ./runNegativeTest.sh
This pipeline runs two tests, a positive and a negative one. Both tests require thedimensionsapicomponent be available. Thepositive_testjob expects thedimensionsapireturn HTTP code 200, whilenegative_testexpects it return HTTP code 500.
dimensionsapi
positive_test
dimensionsapi
negative_test
Updated retirement date for Windows 2016 hosted images
We have moved the retirement date for Windows 2016 images from April 1 to June 30. While most customers using this image have updated their pipelines, there are still customers who are using this image. To verify if your organization is using Windows 2016, usethese instructionsto identity pipelines using deprecated images.
To help customers identify pipelines, we will continue to perform brownouts. These are 24 hour periods in which the image will not be available, causing pipeline jobs that run during this time to fail. The brownouts will happen on:
Monday April 18
Tuesday April 26
Wednesday May 4
Thursday May 12
Friday May 20
Monday May 23
Tuesday May 31
Wednesday June 8
Thursday June 16
Friday June 24
Monday June 27
Next steps
Note
These features will roll out over the next two to three weeks.
Head over to Azure DevOps and take a look.
Go to Azure DevOps
How to provide feedback
We would love to hear what you think about these features. Use the help menu to report a problem or provide a suggestion.

You can also get advice and your questions answered by the community onStack Overflow.
Thanks,
Aaron Hallberg
Feedback
Was this page helpful?
Additional resources