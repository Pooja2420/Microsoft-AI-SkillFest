Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Troubleshoot Azure SQL Edge deployments
Article
2024-09-21
5 contributors
In this article
Important
Azure SQL Edge will be retired on September 30, 2025. For more information and migration options, see theRetirement notice.
Note
Azure SQL Edge no longer supports the ARM64 platform.
This article provides information about possible errors seen when deploying and using Azure SQL Edge containers, and provides troubleshooting techniques to help resolve these issues.
Azure SQL Edge supports two deployment models:
Connected deployment through Azure IoT Edge: Azure SQL Edge can be deployed as a module forAzure IoT Edge. For more information, seeDeploy Azure SQL Edge.
Connected deployment through Azure IoT Edge: Azure SQL Edge can be deployed as a module forAzure IoT Edge. For more information, seeDeploy Azure SQL Edge.
Disconnected deployment: Azure SQL Edge container images can be pulled from Docker hub and deployed either as a standalone container or on a Kubernetes cluster. For more information, seeDeploy Azure SQL Edge with DockerandDeploy an Azure SQL Edge container in Kubernetes.
Disconnected deployment: Azure SQL Edge container images can be pulled from Docker hub and deployed either as a standalone container or on a Kubernetes cluster. For more information, seeDeploy Azure SQL Edge with DockerandDeploy an Azure SQL Edge container in Kubernetes.
Troubleshoot IoT Edge device and deployments
If you get error while deploying SQL Edge through Azure IoT Edge, make sure that theiotedgeservice is properly configured and running. The following documents can be helpful when troubleshooting issues related to Azure IoT Edge:
iotedge
Common issues and resolutions for Azure IoT Edge.
Troubleshoot your IoT Edge device
Docker command errors
If you get errors for anydockercommands, make sure that the Docker service is running, and try to run with elevated permissions.
docker
For example, on Linux, you might get the following error when runningdockercommands:
docker
Cannot connect to the Docker daemon. Is the docker daemon running on this host?
Cannot connect to the Docker daemon. Is the docker daemon running on this host?
If you get this error on Linux, try running the same commands prefaced withsudo. If that fails, verify the Docker service is running, and start it if necessary.
sudo
sudo systemctl status docker
sudo systemctl start docker
sudo systemctl status docker
sudo systemctl start docker
On Windows, verify that you're launching PowerShell or your command-prompt as an Administrator.
Azure SQL Edge container startup errors
If the SQL Edge container fails to run, try the following tests:
If you're using Azure IoT Edge, make sure that the module images were downloaded successfully, and that the environment variables and container create options are correctly specified in the module manifest.
If you're using Azure IoT Edge, make sure that the module images were downloaded successfully, and that the environment variables and container create options are correctly specified in the module manifest.
If you're using Docker or Kubernetes based deployment, make sure that thedocker runcommand is correctly formed. For more information, seeDeploy Azure SQL Edge with DockerandDeploy an Azure SQL Edge container in Kubernetes.
If you're using Docker or Kubernetes based deployment, make sure that thedocker runcommand is correctly formed. For more information, seeDeploy Azure SQL Edge with DockerandDeploy an Azure SQL Edge container in Kubernetes.
docker run
If you get an error such asfailed to create endpoint CONTAINER_NAME on network bridge. Error starting proxy: listen tcp 0.0.0.0:1433 bind: address already in use., you're attempting to map the container port 1433 to a port that is already in use. This can happen if you're running SQL Edge locally on the host machine. It can also happen if you start two SQL Edge containers and try to map them both to the same host port. If this happens, use the-pparameter to map the container port 1433 to a different host port. For example:sudo docker run --cap-add SYS_PTRACE -e 'ACCEPT_EULA=1' -e 'MSSQL_SA_PASSWORD=<password>' -p 1433:1433 --name azuresqledge -d mcr.microsoft.com/azure-sql-edge-developer.
If you get an error such asfailed to create endpoint CONTAINER_NAME on network bridge. Error starting proxy: listen tcp 0.0.0.0:1433 bind: address already in use., you're attempting to map the container port 1433 to a port that is already in use. This can happen if you're running SQL Edge locally on the host machine. It can also happen if you start two SQL Edge containers and try to map them both to the same host port. If this happens, use the-pparameter to map the container port 1433 to a different host port. For example:
failed to create endpoint CONTAINER_NAME on network bridge. Error starting proxy: listen tcp 0.0.0.0:1433 bind: address already in use.
-p
sudo docker run --cap-add SYS_PTRACE -e 'ACCEPT_EULA=1' -e 'MSSQL_SA_PASSWORD=<password>' -p 1433:1433 --name azuresqledge -d mcr.microsoft.com/azure-sql-edge-developer.
sudo docker run --cap-add SYS_PTRACE -e 'ACCEPT_EULA=1' -e 'MSSQL_SA_PASSWORD=<password>' -p 1433:1433 --name azuresqledge -d mcr.microsoft.com/azure-sql-edge-developer.
If you get an error such asGot permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get http://%2Fvar%2Frun%2Fdocker.sock/v1.30tdout=1&tail=all: dial unix /var/run/docker.sock: connect: permission deniedwhen trying to start a container, then add your user to the docker group in Ubuntu. Then sign out and sign back in again, as this change affects new sessions.usermod -aG docker $USER
If you get an error such asGot permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get http://%2Fvar%2Frun%2Fdocker.sock/v1.30tdout=1&tail=all: dial unix /var/run/docker.sock: connect: permission deniedwhen trying to start a container, then add your user to the docker group in Ubuntu. Then sign out and sign back in again, as this change affects new sessions.
Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get http://%2Fvar%2Frun%2Fdocker.sock/v1.30tdout=1&tail=all: dial unix /var/run/docker.sock: connect: permission denied
usermod -aG docker $USER
usermod -aG docker $USER
Check to see if there are any error messages from container.docker logs e69e056c702d
Check to see if there are any error messages from container.
docker logs e69e056c702d
docker logs e69e056c702d
If you're using any container management software, make sure it supports container processes running as root. The sqlservr process in the container runs as root.
If you're using any container management software, make sure it supports container processes running as root. The sqlservr process in the container runs as root.
By default Azure SQL Edge containers run as a non-root user namedmssql. If you're using mount points or data volumes to persist data, ensure that themssqluser has appropriate permissions on the volume. For more information, seeRun as non-root userandPersist Data.
By default Azure SQL Edge containers run as a non-root user namedmssql. If you're using mount points or data volumes to persist data, ensure that themssqluser has appropriate permissions on the volume. For more information, seeRun as non-root userandPersist Data.
mssql
mssql
If your SQL Edge Docker container exits immediately after starting, check your docker logs. If you're using PowerShell on Windows with thedocker runcommand, use double quotes instead of single quotes. With PowerShell Core, use single quotes.
If your SQL Edge Docker container exits immediately after starting, check your docker logs. If you're using PowerShell on Windows with thedocker runcommand, use double quotes instead of single quotes. With PowerShell Core, use single quotes.
docker run
Review theSQL Edge error logs.
Review theSQL Edge error logs.
SQL Edge connection failures
If you can't connect to the SQL Edge instance running in your container, try the following tests:
Make sure that your SQL Edge container is running by looking at theSTATUScolumn of thedocker ps -aoutput. If not, usedocker start <Container ID>to start it.
Make sure that your SQL Edge container is running by looking at theSTATUScolumn of thedocker ps -aoutput. If not, usedocker start <Container ID>to start it.
STATUS
docker ps -a
docker start <Container ID>
If you mapped to a non-default host port (not 1433), make sure you're specifying the port in your connection string. You can see your port mapping in thePORTScolumn of thedocker ps -aoutput. For more information on connecting to Azure SQL Edge, seeConnect and query Azure SQL Edge.
If you mapped to a non-default host port (not 1433), make sure you're specifying the port in your connection string. You can see your port mapping in thePORTScolumn of thedocker ps -aoutput. For more information on connecting to Azure SQL Edge, seeConnect and query Azure SQL Edge.
PORTS
docker ps -a
If you previously deployed SQL Edge with a mapped data volume or data volume container, and now use the existing mapped data volume or data volume container, SQL Edge ignores the value ofMSSQL_SA_PASSWORDenvironment variable. Instead, the previously configured SA user password is used. This happens because SQL Edge reuses the existingmasterdatabases files in the mapped volume or data volume container. If you run into this issue, you can use the following options:Connect using the previously used password, if it's still available.Configure SQL Edge to use a different mapped volume or data volume container.Remove the existingmasterdatabase files (master.mdfandmastlog.mdf) from the mapped volume or data volume container.
If you previously deployed SQL Edge with a mapped data volume or data volume container, and now use the existing mapped data volume or data volume container, SQL Edge ignores the value ofMSSQL_SA_PASSWORDenvironment variable. Instead, the previously configured SA user password is used. This happens because SQL Edge reuses the existingmasterdatabases files in the mapped volume or data volume container. If you run into this issue, you can use the following options:
MSSQL_SA_PASSWORD
master
Connect using the previously used password, if it's still available.
Configure SQL Edge to use a different mapped volume or data volume container.
Remove the existingmasterdatabase files (master.mdfandmastlog.mdf) from the mapped volume or data volume container.
master
master.mdf
mastlog.mdf
Review theSQL Edge error logs.
Review theSQL Edge error logs.
SQL Edge setup and error logs
By default, SQL Edge error logs are present in the/var/opt/mssql/logdirectory within the container and can be accessed using any of the following ways:
/var/opt/mssql/log
If you mounted a host directory to/var/opt/mssqlwhen you created your container, you can instead look in thelogsubdirectory on the mapped path on the host.
If you mounted a host directory to/var/opt/mssqlwhen you created your container, you can instead look in thelogsubdirectory on the mapped path on the host.
/var/opt/mssql
log
By using an interactive command-prompt to connect to the container. If the container isn't running, first start the container. Then use an interactive command-prompt to inspect the logs. You can get the container ID by running the commanddocker ps.docker start <ContainerID>
docker exec -it <ContainerID> "/bin/bash"From the bash session inside your container, run the following commands:cd /var/opt/mssql/log
cat errorlog
By using an interactive command-prompt to connect to the container. If the container isn't running, first start the container. Then use an interactive command-prompt to inspect the logs. You can get the container ID by running the commanddocker ps.
docker ps
docker start <ContainerID>
docker exec -it <ContainerID> "/bin/bash"
docker start <ContainerID>
docker exec -it <ContainerID> "/bin/bash"
From the bash session inside your container, run the following commands:
cd /var/opt/mssql/log
cat errorlog
cd /var/opt/mssql/log
cat errorlog
If the SQL Edge container is up and running and you're able to connect to the instance using client tools, then you can use the stored proceduresp_readerrorlogto read the contents of the SQL Edge error log.
If the SQL Edge container is up and running and you're able to connect to the instance using client tools, then you can use the stored proceduresp_readerrorlogto read the contents of the SQL Edge error log.
sp_readerrorlog
Execute commands in a container
If you have a running container, you can execute commands within the container from a host terminal.
To get the container ID run:
docker ps -a
docker ps -a
To start a bash terminal in the container run:
docker exec -it <Container ID> /bin/bash
docker exec -it <Container ID> /bin/bash
Now you can run commands as though you're running them at the terminal inside the container. When finished, typeexit. This exits in the interactive command session, but your container continues to run.
exit
Enable verbose logging
If the default log level for the streaming engine doesn't provide enough information, debug logging for the streaming engine can be enabled in SQL Edge. To enable debug logging, add theRuntimeLogLevel=debugenvironment variable to your SQL Edge deployment. After enabling debug logging, attempt to reproduce the problem and check the logs for any relevant messages or exceptions.
RuntimeLogLevel=debug
Note
The Verbose Logging option should only be used for troubleshooting and not for regular production workload.
Related content
Machine Learning and Artificial Intelligence with ONNX in SQL Edge
Data Streaming in Azure SQL Edge
Data Retention and cleanup
Filling time gaps and imputing missing values
Feedback
Was this page helpful?
Additional resources