Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Transform XML in workflows with Azure Logic Apps
Article
2024-02-08
6 contributors
In this article
Applies to:Azure Logic Apps (Consumption + Standard)
In enterprise integration business-to-business (B2B) scenarios, you might have to convert XML between formats. Your logic app workflow can transform XML by using theTransform XMLaction and a predefinedmap.
For example, suppose you regularly receive B2B orders or invoices from a customer that uses the YearMonthDay date format (YYYYMMDD). However, your organization uses the MonthDayYear date format (MMDDYYYY). You can create and use a map that transforms the YearMonthDay format to the MonthDayYear format before storing the order or invoice details in your customer activity database.
Prerequisites
An Azure account and subscription. If you don't have a subscription yet,sign up for a free Azure account.
An Azure account and subscription. If you don't have a subscription yet,sign up for a free Azure account.
A logic app workflow that already starts with a trigger so that you can add theTransform XMLaction where necessary in your workflow.
A logic app workflow that already starts with a trigger so that you can add theTransform XMLaction where necessary in your workflow.
Anintegration account resourcewhere you define and store artifacts, such as trading partners, agreements, certificates, and so on, for use in your enterprise integration and B2B workflows. This resource has to meet the following requirements:Is associated with the same Azure subscription as your logic app resource.Exists in the same location or Azure region as your logic app resource where you plan to use theTransform XMLaction.If you're working on aConsumption logic app resource and workflow, your integration account requires the following items:Themapto use for transforming XML content.Alink to your logic app resource.If you're working on aStandard logic app resource and workflow, you can link your integration account to your logic app resource, upload maps directly to your logic app resource, or both, based on the following scenarios:If you already have an integration account with the artifacts that you need or want to use, you can link your integration account to multiple Standard logic app resources where you want to use the artifacts. That way, you don't have to upload maps to each individual logic app. For more information, reviewLink your logic app resource to your integration account.If you don't have an integration account or only plan to use your artifacts across multiple workflows within thesame logic app resource, you candirectly add maps to your logic app resourceusing either the Azure portal or Visual Studio Code.NoteThe Liquid built-in connector lets you select a map that you previously uploaded to your logic app resource or to a linked integration account, but not both.So, if you don't have or need an integration account, you can use the upload option. Otherwise, you can use the linking option. Either way, you can use these artifacts across all child workflows within the same logic app resource.You still need an integration account to store other artifacts, such as partners, agreements, and certificates, along with using theAS2,X12, andEDIFACToperations.
Anintegration account resourcewhere you define and store artifacts, such as trading partners, agreements, certificates, and so on, for use in your enterprise integration and B2B workflows. This resource has to meet the following requirements:
Is associated with the same Azure subscription as your logic app resource.
Is associated with the same Azure subscription as your logic app resource.
Exists in the same location or Azure region as your logic app resource where you plan to use theTransform XMLaction.
Exists in the same location or Azure region as your logic app resource where you plan to use theTransform XMLaction.
If you're working on aConsumption logic app resource and workflow, your integration account requires the following items:Themapto use for transforming XML content.Alink to your logic app resource.
If you're working on aConsumption logic app resource and workflow, your integration account requires the following items:
Themapto use for transforming XML content.
Themapto use for transforming XML content.
Alink to your logic app resource.
Alink to your logic app resource.
If you're working on aStandard logic app resource and workflow, you can link your integration account to your logic app resource, upload maps directly to your logic app resource, or both, based on the following scenarios:If you already have an integration account with the artifacts that you need or want to use, you can link your integration account to multiple Standard logic app resources where you want to use the artifacts. That way, you don't have to upload maps to each individual logic app. For more information, reviewLink your logic app resource to your integration account.If you don't have an integration account or only plan to use your artifacts across multiple workflows within thesame logic app resource, you candirectly add maps to your logic app resourceusing either the Azure portal or Visual Studio Code.NoteThe Liquid built-in connector lets you select a map that you previously uploaded to your logic app resource or to a linked integration account, but not both.So, if you don't have or need an integration account, you can use the upload option. Otherwise, you can use the linking option. Either way, you can use these artifacts across all child workflows within the same logic app resource.
If you're working on aStandard logic app resource and workflow, you can link your integration account to your logic app resource, upload maps directly to your logic app resource, or both, based on the following scenarios:
If you already have an integration account with the artifacts that you need or want to use, you can link your integration account to multiple Standard logic app resources where you want to use the artifacts. That way, you don't have to upload maps to each individual logic app. For more information, reviewLink your logic app resource to your integration account.
If you already have an integration account with the artifacts that you need or want to use, you can link your integration account to multiple Standard logic app resources where you want to use the artifacts. That way, you don't have to upload maps to each individual logic app. For more information, reviewLink your logic app resource to your integration account.
If you don't have an integration account or only plan to use your artifacts across multiple workflows within thesame logic app resource, you candirectly add maps to your logic app resourceusing either the Azure portal or Visual Studio Code.NoteThe Liquid built-in connector lets you select a map that you previously uploaded to your logic app resource or to a linked integration account, but not both.
If you don't have an integration account or only plan to use your artifacts across multiple workflows within thesame logic app resource, you candirectly add maps to your logic app resourceusing either the Azure portal or Visual Studio Code.
Note
The Liquid built-in connector lets you select a map that you previously uploaded to your logic app resource or to a linked integration account, but not both.
So, if you don't have or need an integration account, you can use the upload option. Otherwise, you can use the linking option. Either way, you can use these artifacts across all child workflows within the same logic app resource.
You still need an integration account to store other artifacts, such as partners, agreements, and certificates, along with using theAS2,X12, andEDIFACToperations.
Add Transform XML action
Standard
Consumption
In theAzure portal, open your Standard logic app and workflow in the designer.
In theAzure portal, open your Standard logic app and workflow in the designer.
If you have a blank workflow that doesn't have a trigger,follow these general steps to add any trigger you want. Otherwise, continue to the next step.This example uses theRequesttrigger.
If you have a blank workflow that doesn't have a trigger,follow these general steps to add any trigger you want. Otherwise, continue to the next step.
This example uses theRequesttrigger.
Under the step in your workflow where you want to add theTransform XMLaction,follow these general steps to add the action namedTransform XML.
Under the step in your workflow where you want to add theTransform XMLaction,follow these general steps to add the action namedTransform XML.
In theContentbox, specify the XML content that you want to transform using any XML data that you receive in the HTTP request.To select outputs from previous operations in the workflow, in theTransform XMLaction, click inside theContentbox, and select the dynamic content list option (lightning icon).From the dynamic content list, select the token for the content that you want to transform.This example selects theBodytoken from the trigger.NoteMake sure that you select XML content. If the content isn't XML or is base64-encoded,
you must specify an expression that processes the content. For example, you can useexpression functions,
such asbase64ToBinary()to decode content orxml()to process the content as XML.
In theContentbox, specify the XML content that you want to transform using any XML data that you receive in the HTTP request.
To select outputs from previous operations in the workflow, in theTransform XMLaction, click inside theContentbox, and select the dynamic content list option (lightning icon).
To select outputs from previous operations in the workflow, in theTransform XMLaction, click inside theContentbox, and select the dynamic content list option (lightning icon).
From the dynamic content list, select the token for the content that you want to transform.This example selects theBodytoken from the trigger.NoteMake sure that you select XML content. If the content isn't XML or is base64-encoded,
you must specify an expression that processes the content. For example, you can useexpression functions,
such asbase64ToBinary()to decode content orxml()to process the content as XML.
From the dynamic content list, select the token for the content that you want to transform.

This example selects theBodytoken from the trigger.
Note
Make sure that you select XML content. If the content isn't XML or is base64-encoded,
you must specify an expression that processes the content. For example, you can useexpression functions,
such asbase64ToBinary()to decode content orxml()to process the content as XML.
base64ToBinary()
xml()
From theMap Sourcelist, select the location where you uploaded your map, either yourLogicAppresource or yourIntegrationAccount.
From theMap Sourcelist, select the location where you uploaded your map, either yourLogicAppresource or yourIntegrationAccount.
From theMaplist, select your map.
From theMaplist, select your map.
When you're done, save your workflow.You're now finished setting up yourTransform XMLaction. In a real world app, you might want to store the transformed data in a line-of-business (LOB) app such as SalesForce. To send the transformed output to Salesforce, add a Salesforce action.
When you're done, save your workflow.
You're now finished setting up yourTransform XMLaction. In a real world app, you might want to store the transformed data in a line-of-business (LOB) app such as SalesForce. To send the transformed output to Salesforce, add a Salesforce action.
To test your transformation action, trigger and run your workflow. For example, for the Request trigger, send a request to the trigger's endpoint URL.TheTransform XMLaction runs after your workflow is triggered and when XML content is available for transformation.
To test your transformation action, trigger and run your workflow. For example, for the Request trigger, send a request to the trigger's endpoint URL.
TheTransform XMLaction runs after your workflow is triggered and when XML content is available for transformation.
In theAzure portal, open your Consumption logic app and workflow in the designer.
In theAzure portal, open your Consumption logic app and workflow in the designer.
If you have a blank workflow that doesn't have a trigger,follow these general steps to add any trigger you want. Otherwise, continue to the next step.This example uses theRequesttrigger.
If you have a blank workflow that doesn't have a trigger,follow these general steps to add any trigger you want. Otherwise, continue to the next step.
This example uses theRequesttrigger.
Under the step in your workflow where you want to add theTransform XMLaction,follow these general steps to add the action namedTransform XML.
Under the step in your workflow where you want to add theTransform XMLaction,follow these general steps to add the action namedTransform XML.
In theContentbox, specify the XML content that you want to transform using any XML data that you receive in the HTTP request.To select outputs from previous operations in the workflow, in theTransform XMLaction, click inside theContentbox, which opens the dynamic content list.From the dynamic content list, select the token for the content that you want to transform.This example selects theBodytoken from the trigger.NoteMake sure that you select XML content. If the content isn't XML or is base64-encoded,
you must specify an expression that processes the content. For example, you can useexpression functions,
such asbase64ToBinary()to decode content orxml()to process the content as XML.
In theContentbox, specify the XML content that you want to transform using any XML data that you receive in the HTTP request.
To select outputs from previous operations in the workflow, in theTransform XMLaction, click inside theContentbox, which opens the dynamic content list.
To select outputs from previous operations in the workflow, in theTransform XMLaction, click inside theContentbox, which opens the dynamic content list.
From the dynamic content list, select the token for the content that you want to transform.
From the dynamic content list, select the token for the content that you want to transform.

This example selects theBodytoken from the trigger.
Note
Make sure that you select XML content. If the content isn't XML or is base64-encoded,
you must specify an expression that processes the content. For example, you can useexpression functions,
such asbase64ToBinary()to decode content orxml()to process the content as XML.
base64ToBinary()
xml()
From theMaplist, select your map.
From theMaplist, select your map.
When you're done, save your workflow.You're now finished setting up yourTransform XMLaction. In a real world app, you might want to store the transformed data in a line-of-business (LOB) app such as SalesForce. To send the transformed output to Salesforce, add a Salesforce action.
When you're done, save your workflow.
You're now finished setting up yourTransform XMLaction. In a real world app, you might want to store the transformed data in a line-of-business (LOB) app such as SalesForce. To send the transformed output to Salesforce, add a Salesforce action.
To test your transformation action, trigger and run your workflow. For example, for the Request trigger, send a request to the trigger's endpoint URL.TheTransform XMLaction runs after your workflow is triggered and when XML content is available for transformation.
To test your transformation action, trigger and run your workflow. For example, for the Request trigger, send a request to the trigger's endpoint URL.
TheTransform XMLaction runs after your workflow is triggered and when XML content is available for transformation.
Advanced capabilities
Reference assemblies or call custom code from maps
TheTransform XMLaction supports referencing external assemblies from maps, which enable directly calling custom .NET code from XSLT maps. For more information, seeAdd XSLT maps for workflows in Azure Logic Apps.
Reference extension objects
In Standard workflows, theTransform XMLaction supports specifying an XML extension object to use with your map.
In theTransform XMLaction, open theAdvanced parameterslist, and selectXML Extension Object, which adds the parameter to the action.
In theTransform XMLaction, open theAdvanced parameterslist, and selectXML Extension Object, which adds the parameter to the action.
In theXML Extension Objectbox, specify your extension object, for example:
In theXML Extension Objectbox, specify your extension object, for example:

Byte order mark
By default, the response from the transformation starts with a byte order mark (BOM). You can access this functionality only when you work in the code view editor. To disable this functionality, set thetransformOptionsproperty todisableByteOrderMark:
transformOptions
disableByteOrderMark
"Transform_XML": {
    "inputs": {
        "content": "@{triggerBody()}",
        "integrationAccount": {
            "map": {
                "name": "TestMap"
            }
        },
        "transformOptions": "disableByteOrderMark"
    },
    "runAfter": {},
    "type": "Xslt"
}
"Transform_XML": {
    "inputs": {
        "content": "@{triggerBody()}",
        "integrationAccount": {
            "map": {
                "name": "TestMap"
            }
        },
        "transformOptions": "disableByteOrderMark"
    },
    "runAfter": {},
    "type": "Xslt"
}
Next steps
Add XSLT maps for XML transformation in Azure Logic Apps
Validate XML for workflows in Azure Logic Apps
Feedback
Was this page helpful?
Additional resources