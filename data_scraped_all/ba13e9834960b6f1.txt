Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Enable Azure Monitor OpenTelemetry for .NET, Node.js, Python, and Java applications
Article
2025-03-23
29 contributors
In this article
This article describes how to enable and configure OpenTelemetry-based data collection withinAzure Monitor Application Insights. The Azure Monitor OpenTelemetry Distro:
Provides anOpenTelemetry distributionwhich includes support for features specific to Azure Monitor.
Enablesautomatictelemetry by including OpenTelemetry instrumentation libraries for collecting traces, metrics, logs, and exceptions.
Allows collectingcustomtelemetry.
SupportsLive Metricsto monitor and collect more telemetry from live, in-production web applications.
For more information about the advantages of using the Azure Monitor OpenTelemetry Distro, seeWhy should I use the Azure Monitor OpenTelemetry Distro.
To learn more about collecting data using OpenTelemetry, check outData Collection Basicsor theOpenTelemetry FAQ.
OpenTelemetry release status
OpenTelemetry offerings are available for .NET, Node.js, Python, and Java applications. For a feature-by-feature release status, see theFAQ.
Enable OpenTelemetry with Application Insights
Follow the steps in this section to instrument your application with OpenTelemetry. Select a tab for langauge-specific instructions.
Note
.NET covers multiple scenarios, including classic ASP.NET, console apps, Windows Forms (WinForms), and more.
Prerequisites
Azure subscription:Create an Azure subscription for free
Application Insights resource:Create an Application Insights resource
ASP.NET Core
.NET
Java
Java native
Node.js
Python
ASP.NET Core Applicationusing an officially supported version of.NET
Tip
If you're migrating from the Application Insights Classic API, see ourmigration documentation.
Application using asupported versionof.NETor.NET Framework4.6.2 and later.
Tip
If you're migrating from the Application Insights Classic API, see ourmigration documentation.
A Java application using Java 8+
A Java application using GraalVM 17+
Application using an officiallysupported versionof Node.js runtime:â¢OpenTelemetry supported runtimesâ¢Azure Monitor OpenTelemetry Exporter supported runtimes
Note
If you don't rely on any properties listed in thenot-supported table, theApplicationInsights shimwill be your easiest path forward once out of beta.
If you rely on any of those properties, proceed with the Azure Monitor OpenTelemetry Distro. We'll provide a migration guide soon.
Tip
If you're migrating from the Application Insights Classic API, see ourmigration documentation.
Python Application using Python 3.8+
Tip
If you're migrating from OpenCensus, see ourmigration documentation.
Install the client library
ASP.NET Core
.NET
Java
Java native
Node.js
Python
Install the latestAzure.Monitor.OpenTelemetry.AspNetCoreNuGet package:
Azure.Monitor.OpenTelemetry.AspNetCore
dotnet add package Azure.Monitor.OpenTelemetry.AspNetCore
dotnet add package Azure.Monitor.OpenTelemetry.AspNetCore
Install the latestAzure.Monitor.OpenTelemetry.ExporterNuGet package:
Azure.Monitor.OpenTelemetry.Exporter
dotnet add package Azure.Monitor.OpenTelemetry.Exporter
dotnet add package Azure.Monitor.OpenTelemetry.Exporter
Download the latestapplicationinsights-agent-3.7.1.jarfile.
Warning
If you are upgrading from an earlier 3.x version, you may be impacted by changing defaults or slight differences in the data we collect. For more information, see the migration section in the release notes.3.5.0,3.4.0,3.3.0,3.2.0, and3.1.0
ForSpring Bootnative applications:
Import the OpenTelemetry Bills of Materials (BOM).
Add theSpring Cloud Azure Starter Monitordependency.
Followthese instructionsfor the Azure SDK JAR (Java Archive) files.
ForQuarkusnative applications:
Add theQuarkus OpenTelemetry Exporter for Azuredependency.
Install the latest@azure/monitor-opentelemetrypackage:
npm install @azure/monitor-opentelemetry
npm install @azure/monitor-opentelemetry
The following packages are also used for some specific scenarios described later in this article:
@opentelemetry/api
@opentelemetry/sdk-metrics
@opentelemetry/resources
@opentelemetry/semantic-conventions
@opentelemetry/sdk-trace-base
npm install @opentelemetry/api
npm install @opentelemetry/sdk-metrics
npm install @opentelemetry/resources
npm install @opentelemetry/semantic-conventions
npm install @opentelemetry/sdk-trace-base
npm install @opentelemetry/api
npm install @opentelemetry/sdk-metrics
npm install @opentelemetry/resources
npm install @opentelemetry/semantic-conventions
npm install @opentelemetry/sdk-trace-base
Install the latestazure-monitor-opentelemetryPyPI package:
pip install azure-monitor-opentelemetry
pip install azure-monitor-opentelemetry
Modify your application
ASP.NET Core
.NET
Java
Java native
Node.js
Python
Import theAzure.Monitor.OpenTelemetry.AspNetCorenamespace, add OpenTelemetry, and configure it to use Azure Monitor in yourprogram.csclass:
Azure.Monitor.OpenTelemetry.AspNetCore
program.cs
// Import the Azure.Monitor.OpenTelemetry.AspNetCore namespace.
using Azure.Monitor.OpenTelemetry.AspNetCore;

var builder = WebApplication.CreateBuilder(args);

// Add OpenTelemetry and configure it to use Azure Monitor.
builder.Services.AddOpenTelemetry().UseAzureMonitor();

var app = builder.Build();

app.Run();
// Import the Azure.Monitor.OpenTelemetry.AspNetCore namespace.
using Azure.Monitor.OpenTelemetry.AspNetCore;

var builder = WebApplication.CreateBuilder(args);

// Add OpenTelemetry and configure it to use Azure Monitor.
builder.Services.AddOpenTelemetry().UseAzureMonitor();

var app = builder.Build();

app.Run();
Add the Azure Monitor Exporter to each OpenTelemetry signal in theprogram.csclass:
program.cs
// Create a new tracer provider builder and add an Azure Monitor trace exporter to the tracer provider builder.
// It is important to keep the TracerProvider instance active throughout the process lifetime.
// See https://github.com/open-telemetry/opentelemetry-dotnet/tree/main/docs/trace#tracerprovider-management
var tracerProvider = Sdk.CreateTracerProviderBuilder()
    .AddAzureMonitorTraceExporter();

// Add an Azure Monitor metric exporter to the metrics provider builder.
// It is important to keep the MetricsProvider instance active throughout the process lifetime.
// See https://github.com/open-telemetry/opentelemetry-dotnet/tree/main/docs/metrics#meterprovider-management
var metricsProvider = Sdk.CreateMeterProviderBuilder()
    .AddAzureMonitorMetricExporter();

// Create a new logger factory.
// It is important to keep the LoggerFactory instance active throughout the process lifetime.
// See https://github.com/open-telemetry/opentelemetry-dotnet/tree/main/docs/logs#logger-management
var loggerFactory = LoggerFactory.Create(builder =>
{
    builder.AddOpenTelemetry(logging =>
    {
        logging.AddAzureMonitorLogExporter();
    });
});
// Create a new tracer provider builder and add an Azure Monitor trace exporter to the tracer provider builder.
// It is important to keep the TracerProvider instance active throughout the process lifetime.
// See https://github.com/open-telemetry/opentelemetry-dotnet/tree/main/docs/trace#tracerprovider-management
var tracerProvider = Sdk.CreateTracerProviderBuilder()
    .AddAzureMonitorTraceExporter();

// Add an Azure Monitor metric exporter to the metrics provider builder.
// It is important to keep the MetricsProvider instance active throughout the process lifetime.
// See https://github.com/open-telemetry/opentelemetry-dotnet/tree/main/docs/metrics#meterprovider-management
var metricsProvider = Sdk.CreateMeterProviderBuilder()
    .AddAzureMonitorMetricExporter();

// Create a new logger factory.
// It is important to keep the LoggerFactory instance active throughout the process lifetime.
// See https://github.com/open-telemetry/opentelemetry-dotnet/tree/main/docs/logs#logger-management
var loggerFactory = LoggerFactory.Create(builder =>
{
    builder.AddOpenTelemetry(logging =>
    {
        logging.AddAzureMonitorLogExporter();
    });
});
Note
For more information, see thegetting-started tutorial for OpenTelemetry .NET
Autoinstrumentation is enabled through configuration changes.No code changes are required.
Point the Java virtual machine (JVM) to the jar file by adding-javaagent:"path/to/applicationinsights-agent-3.7.1.jar"to your application's JVM args.
-javaagent:"path/to/applicationinsights-agent-3.7.1.jar"
Note
Sampling is enabled by default at a rate of 5 requests per second, aiding in cost management. Telemetry data may be missing in scenarios exceeding this rate. For more information on modifying sampling configuration, seesampling overrides.
If you're seeing unexpected charges or high costs in Application Insights, this guide can help. It covers common causes like high telemetry volume, data ingestion spikes, and misconfigured sampling. It's especially useful if you're troubleshooting issues related to cost spikes, telemetry volume, sampling not working, data caps, high ingestion, or unexpected billing. To get started, seeTroubleshoot high data ingestion in Application Insights.
Tip
For scenario-specific guidance, seeGet Started (Supplemental).
Tip
If you develop a Spring Boot application, you can optionally replace the JVM argument by a programmatic configuration. For more information, seeUsing Azure Monitor Application Insights with Spring Boot.
Autoinstrumentation is enabled through configuration changes.No code changes are required.
// Import the `useAzureMonitor()` function from the `@azure/monitor-opentelemetry` package.
const { useAzureMonitor } = require("@azure/monitor-opentelemetry");

// Call the `useAzureMonitor()` function to configure OpenTelemetry to use Azure Monitor.
useAzureMonitor();
// Import the `useAzureMonitor()` function from the `@azure/monitor-opentelemetry` package.
const { useAzureMonitor } = require("@azure/monitor-opentelemetry");

// Call the `useAzureMonitor()` function to configure OpenTelemetry to use Azure Monitor.
useAzureMonitor();
import logging
# Import the `configure_azure_monitor()` function from the
# `azure.monitor.opentelemetry` package.
from azure.monitor.opentelemetry import configure_azure_monitor

# Configure OpenTelemetry to use Azure Monitor with the 
# APPLICATIONINSIGHTS_CONNECTION_STRING environment variable.
configure_azure_monitor(
    logger_name="<your_logger_namespace>",  # Set the namespace for the logger in which you would like to collect telemetry for if you are collecting logging telemetry. This is imperative so you do not collect logging telemetry from the SDK itself.
)
logger = logging.getLogger("<your_logger_namespace>")  # Logging telemetry will be collected from logging calls made with this logger and all of it's children loggers.
import logging
# Import the `configure_azure_monitor()` function from the
# `azure.monitor.opentelemetry` package.
from azure.monitor.opentelemetry import configure_azure_monitor

# Configure OpenTelemetry to use Azure Monitor with the 
# APPLICATIONINSIGHTS_CONNECTION_STRING environment variable.
configure_azure_monitor(
    logger_name="<your_logger_namespace>",  # Set the namespace for the logger in which you would like to collect telemetry for if you are collecting logging telemetry. This is imperative so you do not collect logging telemetry from the SDK itself.
)
logger = logging.getLogger("<your_logger_namespace>")  # Logging telemetry will be collected from logging calls made with this logger and all of it's children loggers.
Copy the connection string from your Application Insights resource
The connection string is unique and specifies where the Azure Monitor OpenTelemetry Distro sends the telemetry it collects.
Tip
If you don't already have an Application Insights resource, create one followingthis guide. We recommend you create a new resource rather thanusing an existing one.
To copy the connection string:
Go to theOverviewpane of your Application Insights resource.
Find yourconnection string.
Hover over the connection string and select theCopy to clipboardicon.

Paste the connection string in your environment
To paste your connection string, select from the following options:
Important
We recommend setting the connection string through code only in local development and test environments.
For production, use an environment variable or configuration file (Java only).
Set via environment variable-recommendedReplace<Your connection string>in the following command with your connection string.APPLICATIONINSIGHTS_CONNECTION_STRING=<Your connection string>
Set via environment variable-recommended
Replace<Your connection string>in the following command with your connection string.
<Your connection string>
APPLICATIONINSIGHTS_CONNECTION_STRING=<Your connection string>
APPLICATIONINSIGHTS_CONNECTION_STRING=<Your connection string>
Set via configuration file-Java onlyCreate a configuration file namedapplicationinsights.json, and place it in the same directory asapplicationinsights-agent-3.7.1.jarwith the following content:{
  "connectionString": "<Your connection string>"
}Replace<Your connection string>in the preceding JSON withyourunique connection string.
Set via configuration file-Java only
Create a configuration file namedapplicationinsights.json, and place it in the same directory asapplicationinsights-agent-3.7.1.jarwith the following content:
applicationinsights.json
applicationinsights-agent-3.7.1.jar
{
  "connectionString": "<Your connection string>"
}
{
  "connectionString": "<Your connection string>"
}
Replace<Your connection string>in the preceding JSON withyourunique connection string.
<Your connection string>
Set via code-ASP.NET Core, Node.js, and Python onlySeeconnection string configurationfor an example of setting connection string via code.
Set via code-ASP.NET Core, Node.js, and Python only
Seeconnection string configurationfor an example of setting connection string via code.
Note
If you set the connection string in multiple places, the environment variable will be prioritized in the following order:
Code
Environment variable
Configuration file
Confirm data is flowing
Run your application, then open Application Insights in the Azure portal. It might take a few minutes for data to show up.

Application Insights is now enabled for your application. The following steps are optional and allow for further customization.
Important
If you have two or more services that emit telemetry to the same Application Insights resource, you're required toset Cloud Role Namesto represent them properly on the Application Map.
As part of using Application Insights instrumentation, we collect and send diagnostic data to Microsoft. This data helps us run and improve Application Insights. To learn more, seeStatsbeat in Azure Application Insights.
Sample applications
Azure Monitor OpenTelemetry sample applications are available for all supported languages:
ASP.NET Core sample app
NET sample app
Java sample apps
Java GraalVM native sample apps
Node.js sample app
Python sample apps
Next steps
ASP.NET Core
.NET
Java
Java native
Node.js
Python
For details on adding and modifying Azure Monitor OpenTelemetry, seeAdd and modify Azure Monitor OpenTelemetry.
To further configure the OpenTelemetry distro, seeAzure Monitor OpenTelemetry configuration.
To review the source code, see theAzure Monitor AspNetCore GitHub repository.
To install the NuGet package, check for updates, or view release notes, see theAzure Monitor AspNetCore NuGet Packagepage.
To become more familiar with Azure Monitor and OpenTelemetry, see theAzure Monitor Example Application.
To learn more about OpenTelemetry and its community, see theOpenTelemetry .NET GitHub repository.
To enable usage experiences,enable web or browser user monitoring.
To review frequently asked questions, troubleshooting steps, support options, or to provide OpenTelemetry feedback, seeOpenTelemetry help, support, and feedback for Azure Monitor Application Insights.
For details on adding and modifying Azure Monitor OpenTelemetry, seeAdd and modify Azure Monitor OpenTelemetry.
To further configure the OpenTelemetry distro, seeAzure Monitor OpenTelemetry configuration.
To review the source code, see theAzure Monitor Exporter GitHub repository.
To install the NuGet package, check for updates, or view release notes, see theAzure Monitor Exporter NuGet Packagepage.
To become more familiar with Azure Monitor and OpenTelemetry, see theAzure Monitor Example Application.
To learn more about OpenTelemetry and its community, see theOpenTelemetry .NET GitHub repository.
To enable usage experiences,enable web or browser user monitoring.
To review frequently asked questions, troubleshooting steps, support options, or to provide OpenTelemetry feedback, seeOpenTelemetry help, support, and feedback for Azure Monitor Application Insights.
SeeAdd and modify Azure Monitor OpenTelemetryfor details on adding and modifying Azure Monitor OpenTelemetry.
ReviewJava autoinstrumentation configuration options.
Review the source code in theAzure Monitor Java autoinstrumentation GitHub repository.
Learn more about OpenTelemetry and its community in theOpenTelemetry Java GitHub repository.
Enable usage experiences by seeingEnable web or browser user monitoring.
Review therelease noteson GitHub.
To review frequently asked questions, troubleshooting steps, support options, or to provide OpenTelemetry feedback, seeOpenTelemetry help, support, and feedback for Azure Monitor Application Insights.
SeeAdd and modify Azure Monitor OpenTelemetryfor details on adding and modifying Azure Monitor OpenTelemetry.
Review the source code in theAzure Monitor OpenTelemetry Distro in Spring Boot native image Java applicationandQuarkus OpenTelemetry Exporter for Azure.
Learn more about OpenTelemetry and its community in theOpenTelemetry Java GitHub repository.
Learn more features for Spring Boot native image applications inOpenTelemetry SpringBoot starter
Learn more features for Quarkus native applications inQuarkus OpenTelemetry Exporter for Azure.
Review therelease noteson GitHub.
To review frequently asked questions, troubleshooting steps, support options, or to provide OpenTelemetry feedback, seeOpenTelemetry help, support, and feedback for Azure Monitor Application Insights.
For details on adding and modifying Azure Monitor OpenTelemetry, seeAdd and modify Azure Monitor OpenTelemetry.
To review the source code, see theAzure Monitor OpenTelemetry GitHub repository.
To install the npm package and check for updates, see the@azure/monitor-opentelemetrynpm Packagepage.
@azure/monitor-opentelemetry
To become more familiar with Azure Monitor Application Insights and OpenTelemetry, see theAzure Monitor Example Application.
To learn more about OpenTelemetry and its community, see theOpenTelemetry JavaScript GitHub repository.
To enable usage experiences,enable web or browser user monitoring.
To review frequently asked questions, troubleshooting steps, support options, or to provide OpenTelemetry feedback, seeOpenTelemetry help, support, and feedback for Azure Monitor Application Insights.
SeeAdd and modify Azure Monitor OpenTelemetryfor details on adding and modifying Azure Monitor OpenTelemetry.
Review the source code and extra documentation in theAzure Monitor Distro GitHub repository.
See extra samples and use cases inAzure Monitor Distro samples.
Review thechangelogon GitHub.
Install the PyPI package, check for updates, or view release notes on theAzure Monitor Distro PyPI Packagepage.
Become more familiar with Azure Monitor Application Insights and OpenTelemetry in theAzure Monitor Example Application.
Learn more about OpenTelemetry and its community in theOpenTelemetry Python GitHub repository.
See available OpenTelemetry instrumentations and components in theOpenTelemetry Contributor Python GitHub repository.
Enable usage experiences byenabling web or browser user monitoring.
To review frequently asked questions, troubleshooting steps, support options, or to provide OpenTelemetry feedback, seeOpenTelemetry help, support, and feedback for Azure Monitor Application Insights.
Feedback
Was this page helpful?
Additional resources