Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Configure a failover group for Azure SQL Managed Instance
Article
2024-09-08
8 contributors
In this article
Applies to:Azure SQL Managed Instance
Azure SQL Database
Azure SQL Managed Instance
This article teaches you how to configure afailover groupforAzure SQL Managed Instanceby using the Azure portal and Azure PowerShell.
For an end-to-end PowerShell script to create both instances within a failover group, reviewAdd instance to a failover group with PowerShell.
Prerequisites
To configure a failover group, you should already have properpermissionsand a SQL managed instance you intend to use as the primary. ReviewCreate instanceto get started.
Be sure to review thelimitationsbefore creating your secondary instance and failover group.
Configuration requirements
To configure a failover group between a primary and secondary SQL Managed Instance, consider the following requirements:
The secondary managed instance must be empty, without any user databases.
The two instances need to be the same service tier, and have the same storage size. While not required, it's strongly recommended that both instances have equal compute sizes to ensure the secondary instance can sustainably process changes replicated from the primary instance, including during periods of peak activity.
The IPaddress rangefor the virtual network of the primary instance must not overlap with the address range of the virtual network for the secondary managed instance, or any other virtual network peered with either the primary or secondary virtual network.
Both instances must be in the same DNS zone. When you create your secondary managed instance, you must specify the primary instance's DNS zone ID. If you don't, the zone ID is generated as a random string when the first instance is created in each virtual network and the same ID is assigned to all other instances in the same subnet. Once assigned, the DNS zone can't be modified.
Network Security Groups (NSG) rules for the subnets of both instances must have open inbound and outbound TCP connections for port 5022 and port range 11000-11999 to facilitate communication between the two instances.
Managed instances should be deployed topaired regionsfor performance reasons. Managed instances that reside in geo-paired regions benefit from a significantly higher geo-replication speed compared to unpaired regions.
Both instances must use the sameupdate policy.
Create the secondary instance
When you create the secondary instance, you must use a virtual network that has an IP address space that doesn't overlap with the IP address space range of the primary instance. Additionally, when you configure the new secondary instance, you must specify the zone ID of the primary instance.
You can configure the secondary virtual network, and create the secondary instance by using the Azure portal and PowerShell.
Azure portal
PowerShell
Create virtual network
To create virtual network for your secondary instance in the Azure portal, follow these steps:
Check the address space for the primary instance. Go to the virtual network resource for the primary instance in the Azure portal and underSettings, selectAddress space. Check the range underAddress range:
Check the address space for the primary instance. Go to the virtual network resource for the primary instance in the Azure portal and underSettings, selectAddress space. Check the range underAddress range:

Create a new virtual network that you plan to use for the secondary instance by going to theCreate virtual networkpage.
Create a new virtual network that you plan to use for the secondary instance by going to theCreate virtual networkpage.
On theBasicstab of theCreate virtual networkpage:Select theResource Groupyou intend to use for the secondary instance. Create a new one if it doesn't exist yet.Provide a name for your virtual network, such asvnet-sql-mi-secondary.Select a region that'spairedwith the region where the primary instance is.
On theBasicstab of theCreate virtual networkpage:
Select theResource Groupyou intend to use for the secondary instance. Create a new one if it doesn't exist yet.
Provide a name for your virtual network, such asvnet-sql-mi-secondary.
vnet-sql-mi-secondary
Select a region that'spairedwith the region where the primary instance is.
On theIP addressestab of theCreate virtual networkpage:UseDelete address spaceto delete the existing IPv4 address space.After the address space is deleted, selectAdd IPv4 address spaceto add a new space, and then provide an IP address space that is different to the address space used by the virtual network of the primary instance. For example, if your current primary instance uses an address space of 10.0.0.16, then enter10.1.0.0/16for the address space of the virtual network you intend to use for the secondary instance.Use+ Add a subnetto add a default subnet with default values.Use+ Add a subnetto add an empty subnet namedManagedInstancethat will be dedicated to the secondary instance, using an address range different to the default subnet. For example, if your primary instance uses an address range of 10.0.0.0 - 10.0.255.255, then provide a subnet range of10.1.1.0 - 10.1.1.255for the subnet of the secondary instance.
On theIP addressestab of theCreate virtual networkpage:
UseDelete address spaceto delete the existing IPv4 address space.
After the address space is deleted, selectAdd IPv4 address spaceto add a new space, and then provide an IP address space that is different to the address space used by the virtual network of the primary instance. For example, if your current primary instance uses an address space of 10.0.0.16, then enter10.1.0.0/16for the address space of the virtual network you intend to use for the secondary instance.
10.1.0.0/16
Use+ Add a subnetto add a default subnet with default values.
Use+ Add a subnetto add an empty subnet namedManagedInstancethat will be dedicated to the secondary instance, using an address range different to the default subnet. For example, if your primary instance uses an address range of 10.0.0.0 - 10.0.255.255, then provide a subnet range of10.1.1.0 - 10.1.1.255for the subnet of the secondary instance.
ManagedInstance
10.1.1.0 - 10.1.1.255

UseReview + Createto review your settings and then useCreateto create your new virtual network.
UseReview + Createto review your settings and then useCreateto create your new virtual network.
Create secondary instance
After your virtual network is ready, follow these steps to create your secondary instance in the Azure portal:
Go to theCreate Azure SQL Managed Instancein the Azure portal.
Go to theCreate Azure SQL Managed Instancein the Azure portal.
On theBasicstab of theCreate Azure SQL Managed Instancepage:Choose a region for your secondary instance that'spairedwith the primary instance.Choose a service tier that matches the service tier of the primary instance.
On theBasicstab of theCreate Azure SQL Managed Instancepage:
Choose a region for your secondary instance that'spairedwith the primary instance.
Choose a service tier that matches the service tier of the primary instance.
On theNetworkingtab of theCreate Azure SQL Managed Instancepage, use the dropdown list underVirtual network / subnetto select the virtual network and subnet you previously created:
On theNetworkingtab of theCreate Azure SQL Managed Instancepage, use the dropdown list underVirtual network / subnetto select the virtual network and subnet you previously created:

On theAdditional settingstab of theCreate Azure SQL Managed Instancepage, selectYestoUse as failover secondaryand then choose the appropriate primary instance from the dropdown list.
On theAdditional settingstab of theCreate Azure SQL Managed Instancepage, selectYestoUse as failover secondaryand then choose the appropriate primary instance from the dropdown list.

Configure the rest of the instance according to your business needs, and then create it by usingReview + Create.
Configure the rest of the instance according to your business needs, and then create it by usingReview + Create.
You can create both your virtual network, and your secondary instance by using PowerShell. For a full PowerShell script sample that does both, reviewAdd instance to failover group with PowerShell.
When you create your secondary instance with Azure PowerShell, be sure to specify theDnsZonePartnervalue with the zone ID of the primary instance.
DnsZonePartner
You can use theGet-AzSqlInstancecommand to parameterize the DNS zone ID of the primary instance, and then pass it to theDnsZonePartnerparameter of theNew-AzSqlInstancecommand:
DnsZonePartner
# Get the DNS zone ID of the primary instance
$primaryManagedInstanceId = Get-AzSqlInstance -Name $primaryInstance -ResourceGroupName $resourceGroupName | Select-Object Id
# Get the DNS zone ID of the primary instance
$primaryManagedInstanceId = Get-AzSqlInstance -Name $primaryInstance -ResourceGroupName $resourceGroupName | Select-Object Id
Establish connectivity between the instances
For uninterrupted geo-replication traffic flow, you must establish connectivity between the virtual network subnets that host the primary and secondary instances. There are multiple ways to connect managed instances in different Azure regions, including:
Global virtual network peering
Azure ExpressRoute
VPN gateways
Global virtual network peeringisrecommendedas the most performant and robust way to establish connectivity between instances in a failover group. Global virtual network peering provides a low-latency, high-bandwidth private connection between peered virtual networks using the Microsoft backbone infrastructure. No public internet, gateways, or additional encryption is required in the communication between the peered virtual networks.
Important
Alternative ways of connecting instances that involve additional networking devices can complicate troubleshooting connectivity or replication speed issues, possibly requiring active involvement of network administrators, and potentially significantly prolonging resolution time.
If you use a mechanism to establish connectivity between the instances other than the recommendedglobal virtual network peering, ensure the following:
Networking device, like firewalls or network virtual appliances (NVAs), don't block traffic on inbound and outbound connections for port 5022 (TCP) and port range 11000-11999.
Routing is properly configured, and asymmetric routing is avoided.
If you deploy failover groups in a hub-and-spoke network topology cross-region, to avoid connectivity and replication speed issues, replication traffic should go directly between the two managed instance subnets rather than directed through the hub networks.
This article guides you to configure global virtual network peering between the networks of the two instances by using the Azure portal and PowerShell.
Azure portal
PowerShell
In theAzure portal, go to theVirtual networkresource for your primary managed instance.
In theAzure portal, go to theVirtual networkresource for your primary managed instance.
SelectPeeringsunderSettingsto open thePeeringspage and then use+ Addfrom the command bar to open theAdd peeringpage.
SelectPeeringsunderSettingsto open thePeeringspage and then use+ Addfrom the command bar to open theAdd peeringpage.

On theAdd peeringpage, enter or select values for the following settings:SettingsDescriptionRemote virtual network summaryPeering link nameThe name for the peering must be unique within the virtual network. This article usesFog-peering.Virtual network deployment modelSelectResource manager.I know my resource IDYou can leave this box unchecked, unless you know the resource ID.SubscriptionSelect the subscription from the dropdown list.Virtual networkSelect the virtual network for the secondary instance from the dropdown list.Remote virtual network peering settingsAllow 'secondary virtual network' to access 'primary virtual network'Check the box to allow communication between the two networks. Enabling communication between virtual networks allows resources that are connected to either virtual network to communicate with each other with the same bandwidth and latency as if they were connected to the same virtual network. All communication between resources in the two virtual networks is over the Azure private network.Allow 'secondary virtual network' to receive forwarded traffic from 'primary virtual network'You can either check or uncheck this box, either works for this guide. For more information, seeCreate a peering.Allow gateway or route server in 'secondary virtual network' to forward traffic to 'primary virtual network'You can either check or uncheck this box, either works for this guide. For more information, seeCreate a peering.Enable 'secondary virtual network' to use 'primary virtual network's remote gateway or route serverLeave this box unchecked. For more information about the other options available, seeCreate a peering.Local virtual network summaryPeering link nameThe name of the same peering used for the remote virtual network. This article usesFog-peering.Allow 'primary virtual network' to access 'secondary virtual network'Check the box to allow communication between the two networks. Enabling communication between virtual networks allows resources that are connected to either virtual network to communicate with each other with the same bandwidth and latency as if they were connected to the same virtual network. All communication between resources in the two virtual networks is over the Azure private network.Allow 'primary virtual network' to receive forwarded traffic from 'secondary virtual network'You can either check or uncheck this box, either works for this guide. For more information, seeCreate a peering.Allow gateway or route server in 'primary virtual network' to forward traffic to 'secondary virtual network'You can either check or uncheck this box, either works for this guide. For more information, seeCreate a peering.Enable 'primary virtual network' to use 'secondary virtual network's remote gateway or route serverLeave this box unchecked. For more information about the other options available, seeCreate a peering.
On theAdd peeringpage, enter or select values for the following settings:
Fog-peering
Fog-peering
UseAddto configure peering with the virtual network you selected, and automatically navigate back to thePeeringspage, which shows the two networks are connected:
UseAddto configure peering with the virtual network you selected, and automatically navigate back to thePeeringspage, which shows the two networks are connected:

Configure global virtual network peering between the virtual networks of the primary and secondary managed instances:
# Create global virtual network peering
$primaryVirtualNetwork  = Get-AzVirtualNetwork `
                  -Name $primaryVNet `
                  -ResourceGroupName $resourceGroupName

$secondaryVirtualNetwork = Get-AzVirtualNetwork `
                  -Name $secondaryVNet `
                  -ResourceGroupName $resourceGroupName
                  
Write-host "Peering primary VNet to secondary VNet..."
Add-AzVirtualNetworkPeering `
 -Name primaryVnet-secondaryVNet1 `
 -VirtualNetwork $primaryVirtualNetwork `
 -RemoteVirtualNetworkId $secondaryVirtualNetwork.Id
 Write-host "Primary VNet peered to secondary VNet successfully."

Write-host "Peering secondary VNet to primary VNet..."
Add-AzVirtualNetworkPeering `
 -Name secondaryVNet-primaryVNet `
 -VirtualNetwork $secondaryVirtualNetwork `
 -RemoteVirtualNetworkId $primaryVirtualNetwork.Id
Write-host "Secondary VNet peered to primary VNet successfully."

Write-host "Checking peering state on the primary virtual network..."
Get-AzVirtualNetworkPeering `
-ResourceGroupName $resourceGroupName `
-VirtualNetworkName $primaryVNet `
| Select PeeringState

Write-host "Checking peering state on the secondary virtual network..."
Get-AzVirtualNetworkPeering `
-ResourceGroupName $resourceGroupName `
-VirtualNetworkName $secondaryVNet `
| Select PeeringState
# Create global virtual network peering
$primaryVirtualNetwork  = Get-AzVirtualNetwork `
                  -Name $primaryVNet `
                  -ResourceGroupName $resourceGroupName

$secondaryVirtualNetwork = Get-AzVirtualNetwork `
                  -Name $secondaryVNet `
                  -ResourceGroupName $resourceGroupName
                  
Write-host "Peering primary VNet to secondary VNet..."
Add-AzVirtualNetworkPeering `
 -Name primaryVnet-secondaryVNet1 `
 -VirtualNetwork $primaryVirtualNetwork `
 -RemoteVirtualNetworkId $secondaryVirtualNetwork.Id
 Write-host "Primary VNet peered to secondary VNet successfully."

Write-host "Peering secondary VNet to primary VNet..."
Add-AzVirtualNetworkPeering `
 -Name secondaryVNet-primaryVNet `
 -VirtualNetwork $secondaryVirtualNetwork `
 -RemoteVirtualNetworkId $primaryVirtualNetwork.Id
Write-host "Secondary VNet peered to primary VNet successfully."

Write-host "Checking peering state on the primary virtual network..."
Get-AzVirtualNetworkPeering `
-ResourceGroupName $resourceGroupName `
-VirtualNetworkName $primaryVNet `
| Select PeeringState

Write-host "Checking peering state on the secondary virtual network..."
Get-AzVirtualNetworkPeering `
-ResourceGroupName $resourceGroupName `
-VirtualNetworkName $secondaryVNet `
| Select PeeringState
This code snippet uses the following commands:
Configure ports and NSG rules
Regardless of the chosen connectivity mechanism between the two instances, your networks must meet the following requirements for the flow of geo-replication traffic:
The route table and network security groups assigned to the managed instance subnets aren't shared across the two peered virtual networks.
The Network Security Group (NSG) rules on both subnets that host each instance allows both inbound and outbound traffic to the other instance on port 5022, and the port range 11000-11999.
You can configure your port communication and NSG rules by using the Azure portal and PowerShell.
Azure portal
PowerShell
To open Network Security Group (NSG) ports in the Azure portal, follow these steps:
Go to the Network security group resource for the primary instance.
Go to the Network security group resource for the primary instance.
UnderSettings, selectInbound security rules. Check to see if you already have rules that allow traffic for port 5022, and the range 11000-11999. If you do, and the source meets your business needs, skip this step. If the rules don't exist, or if you want to use a different source (such as the more secure IP address) delete the existing rule, and then select+ Addfrom the command bar to open theAdd inbound security rulepane:
UnderSettings, selectInbound security rules. Check to see if you already have rules that allow traffic for port 5022, and the range 11000-11999. If you do, and the source meets your business needs, skip this step. If the rules don't exist, or if you want to use a different source (such as the more secure IP address) delete the existing rule, and then select+ Addfrom the command bar to open theAdd inbound security rulepane:

On theAdd inbound security rulepane, enter, or select values for the following settings:SettingsRecommended valueDescriptionSourceIP addresses or Service TagThe filter for the source of the communication. IP address is the most secure, and recommended for production environments. Service tag is appropriate for nonproduction environments.Source service tagIf you selectedService tagas the source, then provideVirtualNetworkas the source tag.Default tags are predefined identifiers that represent a category of IP addresses. The VirtualNetwork tag denotes all virtual and local network address spaces.Source IP addressesIf you selectedIP addressesas the source, then provide the IP address of the secondary instance.Provide an address range using CIDR notation (e.g. 192.168.99.0/24 or 2001:1234::/64), or an IP address (e.g. 192.168.99.0 or 2001:1234::). You can also provide a comma-separated list of IP addresses or address ranges using either IPv4 or IPv6.Source port ranges5022This specifies on which ports traffic will be allowed this rule.ServiceCustomThe service specifies the destination protocol and port range for this rule.Destination port ranges5022This specifies on which ports traffic will be allowed this rule. This port should match the source port range.ActionAllowAllow communication on the specified port.ProtocolTCPDetermines the protocol for port communication.Priority1200Rules are processed in priority order; the lower the number, the higher the priority.Nameallow_geodr_inboundThe name of the rule.DescriptionOptionalYou can choose to provide a description, or leave this field blank.SelectAddto save your settings and add your new rule.
On theAdd inbound security rulepane, enter, or select values for the following settings:
VirtualNetwork
SelectAddto save your settings and add your new rule.
Repeat these steps to add another inbound security rule for the port range11000-11999with a name such asallow_redirect_inboundand a priority slightly higher than the 5022 rule, such as1100.
Repeat these steps to add another inbound security rule for the port range11000-11999with a name such asallow_redirect_inboundand a priority slightly higher than the 5022 rule, such as1100.
11000-11999
1100
UnderSettings, selectOutbound security rules. Check to see if you already have rules that allow traffic for port 5022, and the range 11000-11999. If you do, and the source meets your business needs, skip this step. If the rules don't exist, or if you want to use a different source (such as the more secure IP address) delete the existing rule, and then select+ Addfrom the command bar to open theAdd outbound security rulepane.
UnderSettings, selectOutbound security rules. Check to see if you already have rules that allow traffic for port 5022, and the range 11000-11999. If you do, and the source meets your business needs, skip this step. If the rules don't exist, or if you want to use a different source (such as the more secure IP address) delete the existing rule, and then select+ Addfrom the command bar to open theAdd outbound security rulepane.
On theAdd outbound security rulepane, use the same configuration for port 5022, and the range11000-11999as you did for the inbound ports.
On theAdd outbound security rulepane, use the same configuration for port 5022, and the range11000-11999as you did for the inbound ports.
11000-11999
Go to the Network security group for the secondary instance, and repeat these steps so thatboth network security groupshave the following rules:Allow inbound traffic on port 5022Allow inbound traffic on port range11000-11999Allow outbound traffic on port 5022Allow outbound traffic on port range11000-11999
Go to the Network security group for the secondary instance, and repeat these steps so thatboth network security groupshave the following rules:
Allow inbound traffic on port 5022
Allow inbound traffic on port range11000-11999
11000-11999
Allow outbound traffic on port 5022
Allow outbound traffic on port range11000-11999
11000-11999
You can configure the NSG rules for both virtual networks by using theAdd-AzNetworkSecurityRuleConfigPowerShell command to modify the existing network security group. For a full PowerShell script sample that configures both networks, reviewAdd instance to failover group with PowerShell.
Create the failover group
Create the failover group for your managed instances by using the Azure portal or PowerShell.
Portal
PowerShell
Create the failover group for your SQL Managed Instances by using the Azure portal.
SelectAzure SQLin the left-hand menu of theAzure portal. IfAzure SQLisn't in the list, selectAll services, then type Azure SQL in the search box. (Optional) Select the star next toAzure SQLto add it as a favorite item to the left-hand navigation.
SelectAzure SQLin the left-hand menu of theAzure portal. IfAzure SQLisn't in the list, selectAll services, then type Azure SQL in the search box. (Optional) Select the star next toAzure SQLto add it as a favorite item to the left-hand navigation.
Select the primary managed instance you want to add to the failover group.
Select the primary managed instance you want to add to the failover group.
UnderData Management, selectFailover groupsand then useAdd groupto open theInstance Failover Grouppage:
UnderData Management, selectFailover groupsand then useAdd groupto open theInstance Failover Grouppage:

On theInstance Failover Grouppage:ThePrimary managed instanceis preselected.UnderFailover group nameenter a name for the failover group.UnderSecondary managed instance, select the managed instance you want to use as the secondary in the failover group.Choose aRead/Write failover policyfrom the dropdown list.Manualis recommended to give you control over failover.LeaveEnable failover rightstoOff, unless you intend to use this replica fordisaster recovery only.UseCreateto save your settings and create your failover group.
On theInstance Failover Grouppage:
ThePrimary managed instanceis preselected.
UnderFailover group nameenter a name for the failover group.
UnderSecondary managed instance, select the managed instance you want to use as the secondary in the failover group.
Choose aRead/Write failover policyfrom the dropdown list.Manualis recommended to give you control over failover.
LeaveEnable failover rightstoOff, unless you intend to use this replica fordisaster recovery only.
UseCreateto save your settings and create your failover group.

After failover group deployment starts, you're taken back to theFailover groupspage. The page refreshes to show you the new failover group after deployment completes.
After failover group deployment starts, you're taken back to theFailover groupspage. The page refreshes to show you the new failover group after deployment completes.
UseNew-AzSqlDatabaseInstanceFailoverGroupto create the failover group for your managed instances by using PowerShell.
# Create failover group
Write-host "Creating the failover group..."
$failoverGroup = New-AzSqlDatabaseInstanceFailoverGroup -Name $failoverGroupName `
     -Location $location -ResourceGroupName $resourceGroupName -PrimaryManagedInstanceName $primaryInstance `
     -PartnerRegion $drLocation -PartnerManagedInstanceName $secondaryInstance `
     -FailoverPolicy Manual -GracePeriodWithDataLossHours 1
$failoverGroup
# Create failover group
Write-host "Creating the failover group..."
$failoverGroup = New-AzSqlDatabaseInstanceFailoverGroup -Name $failoverGroupName `
     -Location $location -ResourceGroupName $resourceGroupName -PrimaryManagedInstanceName $primaryInstance `
     -PartnerRegion $drLocation -PartnerManagedInstanceName $secondaryInstance `
     -FailoverPolicy Manual -GracePeriodWithDataLossHours 1
$failoverGroup
Test failover
Test failover of your failover group by using the Azure portal or PowerShell.
Note
If the instances are in different subscriptions, or resource groups, initiate the failover from the secondary instance.
Azure portal
PowerShell
Test failover of your failover group using the Azure portal.
Go to either the primary or secondary managed instance within theAzure portal.
Go to either the primary or secondary managed instance within theAzure portal.
UnderData management, selectFailover groups.
UnderData management, selectFailover groups.
On theFailover groupspane, note which instance is the primary instance, and which instance is the secondary instance.
On theFailover groupspane, note which instance is the primary instance, and which instance is the secondary instance.
On theFailover groupspane, selectFailoverfrom the command bar. SelectYeson the warning about TDS sessions being disconnected, and note the licensing implication.
On theFailover groupspane, selectFailoverfrom the command bar. SelectYeson the warning about TDS sessions being disconnected, and note the licensing implication.

On theFailover groupspane, after failover succeeds, the instances switch roles so the previous secondary becomes the new primary and the previous primary becomes the new secondary.ImportantIf roles didn't switch, check connectivity between the instances and related NSG and firewall rules. Proceed with the next step only after roles switch.
On theFailover groupspane, after failover succeeds, the instances switch roles so the previous secondary becomes the new primary and the previous primary becomes the new secondary.
Important
If roles didn't switch, check connectivity between the instances and related NSG and firewall rules. Proceed with the next step only after roles switch.
(Optional) On theFailover groupspane, useFailoverto switch the roles back so the original primary becomes primary again.
(Optional) On theFailover groupspane, useFailoverto switch the roles back so the original primary becomes primary again.
Test planned failover by failing over to the secondary replica with PowerShell, and then failing back.
Verify the roles of each instance
Use theGet-AzSqlDatabaseInstanceFailoverGroupcommand to confirm the roles of each instance:
# Verify the current primary role
Get-AzSqlDatabaseInstanceFailoverGroup -ResourceGroupName $resourceGroupName `
    -Location $location -Name $failoverGroupName
# Verify the current primary role
Get-AzSqlDatabaseInstanceFailoverGroup -ResourceGroupName $resourceGroupName `
    -Location $location -Name $failoverGroupName
Fail over to the secondary instance
Use theSwitch-AzSqlDatabaseFailoverGroupto fail over to the secondary instance.
# Failover the primary managed instance to the secondary role
Write-host "Failing primary over to the secondary location"
Get-AzSqlDatabaseInstanceFailoverGroup -ResourceGroupName $resourceGroupName `
    -Location $drLocation -Name $failoverGroupName | Switch-AzSqlDatabaseInstanceFailoverGroup
Write-host "Successfully failed failover group to secondary location"

# Verify the current primary role
Get-AzSqlDatabaseInstanceFailoverGroup -ResourceGroupName $resourceGroupName `
    -Location $drLocation -Name $failoverGroupName
# Failover the primary managed instance to the secondary role
Write-host "Failing primary over to the secondary location"
Get-AzSqlDatabaseInstanceFailoverGroup -ResourceGroupName $resourceGroupName `
    -Location $drLocation -Name $failoverGroupName | Switch-AzSqlDatabaseInstanceFailoverGroup
Write-host "Successfully failed failover group to secondary location"

# Verify the current primary role
Get-AzSqlDatabaseInstanceFailoverGroup -ResourceGroupName $resourceGroupName `
    -Location $drLocation -Name $failoverGroupName
Verify the roles of each instance
Use theGet-AzSqlDatabaseInstanceFailoverGroupcommand to confirm the roles of each instance:
# Verify the current primary role
Get-AzSqlDatabaseInstanceFailoverGroup -ResourceGroupName $resourceGroupName `
    -Location $location -Name $failoverGroupName
# Verify the current primary role
Get-AzSqlDatabaseInstanceFailoverGroup -ResourceGroupName $resourceGroupName `
    -Location $location -Name $failoverGroupName
Revert failover group back to the primary server
Optionally, use theSwitch-AzSqlDatabaseFailoverGroupcommand to fail back to the primary instance.
# Fail primary managed instance back to primary role
Write-host "Failing primary back to primary role"
Get-AzSqlDatabaseInstanceFailoverGroup -ResourceGroupName $resourceGroupName `
    -Location $location -Name $failoverGroupName | Switch-AzSqlDatabaseInstanceFailoverGroup
Write-host "Successfully failed failover group to primary location"

# Verify the current primary role
Get-AzSqlDatabaseInstanceFailoverGroup -ResourceGroupName $resourceGroupName `
    -Location $location -Name $failoverGroupName
# Fail primary managed instance back to primary role
Write-host "Failing primary back to primary role"
Get-AzSqlDatabaseInstanceFailoverGroup -ResourceGroupName $resourceGroupName `
    -Location $location -Name $failoverGroupName | Switch-AzSqlDatabaseInstanceFailoverGroup
Write-host "Successfully failed failover group to primary location"

# Verify the current primary role
Get-AzSqlDatabaseInstanceFailoverGroup -ResourceGroupName $resourceGroupName `
    -Location $location -Name $failoverGroupName
Modify existing failover group
You can modify an existing failover group, such as to change thefailover policy, by using the Azure portal, PowerShell, Azure CLI and the REST APIs.
Azure portal
PowerShell
Azure CLI
REST API
To modify an existing failover group by using the Azure portal, follow these steps:
Go to yourSQL managed instancein the Azure portal.
Go to yourSQL managed instancein the Azure portal.
UnderData management, selectFailover groupsto open theFailover groupspane.
UnderData management, selectFailover groupsto open theFailover groupspane.
On theFailover groupspane, selectEdit configurationsfrom the command bar to open theEdit failover grouppane:
On theFailover groupspane, selectEdit configurationsfrom the command bar to open theEdit failover grouppane:

To modify an existing failover group use theSet-AzSqlDatabaseInstanceFailoverGroupPowerShell command to modify failover group configuration settings.
To modify an existing failover group, use theaz sql instance-failover-group updateAzure CLI command to modify failover group configuration settings.
To modify an existing failover group, use theCreate or Update Failover GroupREST API call to modify failover group configuration settings.
Locate listener endpoint
After your failover group is configured, update the connection string for your application to point to theRead/write listener endpointso that your application continues to connect to whichever instance is primary after failover. By using the listener endpoint, you don't have to manually update your connection string every time your failover group fails over since traffic is always routed to the current primary. You can also point read-only workload to theRead-onlylistener endpoint.
Important
While connecting to an instance in a failover group using the instance-specific connection string is supported, it's strongly discouraged. Use the listener endpoints instead.
To locate the listener endpoint in the Azure portal, go to your SQL managed instance and underData management, selectFailover groups.
Scroll down to find the listener endpoints:
TheRead/writelistener endpoint, in the form offog-name.dns-zone.database.windows.net, routes traffic to the primary instance.
fog-name.dns-zone.database.windows.net
TheRead-onlylistener endpoint, in the form offog-name.secondary.dns-zone.database.windows.net, routes traffic to the secondary instance.
fog-name.secondary.dns-zone.database.windows.net

Create failover group between instances in different subscriptions
You can create a failover group between SQL Managed Instances in two different subscriptions, as long as subscriptions are associated to the sameMicrosoft Entra tenant.
When using PowerShell API, you can do it by specifying thePartnerSubscriptionIdparameter for the secondary SQL Managed Instance.
PartnerSubscriptionId
When using REST API, each instance ID included in theproperties.managedInstancePairsparameter can have its own Subscription ID.
properties.managedInstancePairs
Azure portal doesn't support creating failover groups across different subscriptions.
Important
Azure portal does not support creation of failover groups across different subscriptions. For failover groups across different subscriptions and/or resource groups, failover can't be initiated manually via the Azure portal from the primary SQL managed instance. Initiate it from the geo-secondary instance instead.
Prevent loss of critical data
Due to the high latency of wide area networks, geo-replication uses an asynchronous replication mechanism. Asynchronous replication makes the possibility of data loss unavoidable if the primary fails. To protect critical transactions from data loss, an application developer can call thesp_wait_for_database_copy_syncstored procedure immediately after committing the transaction. Callingsp_wait_for_database_copy_syncblocks the calling thread until the last committed transaction has been transmitted and hardened in the transaction log of the secondary database. However, it doesn't wait for the transmitted transactions to be replayed (redone) on the secondary.sp_wait_for_database_copy_syncis scoped to a specific geo-replication link. Any user with the connection rights to the primary database can call this procedure.
sp_wait_for_database_copy_sync
sp_wait_for_database_copy_sync
Note
sp_wait_for_database_copy_syncprevents data loss after geo-failover for specific transactions, but does not guarantee full synchronization for read access. The delay caused by asp_wait_for_database_copy_syncprocedure call can be significant and depends on the size of the not yet transmitted transaction log on the primary at the time of the call.
sp_wait_for_database_copy_sync
sp_wait_for_database_copy_sync
Change the secondary region
Let's assume that instance A is the primary instance, instance B is the existing secondary instance, and instance C is the new secondary instance in the third region. To make the transition, follow these steps:
Create instance C with same size as A and in the same DNS zone.
Delete the failover group between instances A and B. At this point, attempts to sign in start to fail because the SQL aliases for the failover group listeners have been deleted and the gateway won't recognize the failover group name. The secondary databases are disconnected from the primaries and become read-write databases.
Create a failover group with the same name between instance A and C. Follow the instructions inconfigure failover group guide. This is a size-of-data operation and completes when all databases from instance A are seeded and synchronized.
Delete instance B if not needed to avoid unnecessary charges.
Note
After step 2 and until step 3 is completed the databases in instance A will remain unprotected from a catastrophic failure of instance A.
Change the primary region
Let's assume instance A is the primary instance, instance B is the existing secondary instance, and instance C is the new primary instance in the third region. To make the transition, follow these steps:
Create instance C with same size as B and in the same DNS zone.
Initiate a manual failover from instance B to make it the new primary. Instance A becomes the new secondary instance automatically.
Delete the failover group between instances A and B. At this point, sign in attempts using failover group endpoints start to fail. The secondary databases on A are disconnected from the primaries and become read-write databases.
Create a failover groupwith the same name between instance B and C. This is a size-of-data operation and completes when all databases from instance B are seeded and synchronized with instance C. At this point, sign in attempts stop failing.
Manually fail over to switch the C instance to the primary role. Instance B becomes the new secondary instance automatically.
Delete instance A if not needed to avoid unnecessary charges.
Caution
After step 3 and until step 4 is completed, the databases in instance A will remain unprotected from a catastrophic failure of instance A.
Important
When the failover group is deleted, the DNS records for the listener endpoints are also deleted. At that point, there's a non-zero probability of somebody else creating a failover group with the same name. Because failover group names must be globally unique, this will prevent you from using the same name again. To minimize this risk, don't use generic failover group names.
Change update policy
Instances in a failover group must have matchingupdate policies. To enable theAlways-up-to-dateupdate policy on instances that are part of a failover group, first enable theAlways-up-to-dateupdate policy on the secondary instance, wait for the change to take effect, and then update the policy for the primary instance.
While changing the update policy on the primary instance in the failover group causes the instance to fail over to another local node (similar tomanagement operationson instances that aren't part of a failover group), it doesn't cause the failover group to failover, keeping the primary instance in the primary role.
Caution
Once the updated policy is changed toAlways-up-to-date, changing it back to theSQL Server 2022update policy is no longer possible.
Enable scenarios dependent on objects from the system databases
System databases arenotreplicated to the secondary instance in a failover group. To enable scenarios that depend on objects from the system databases, make sure to create the same objects on the secondary instance and keep them synchronized with the primary instance.
For example, if you plan to use the same logins on the secondary instance, make sure to create them with the identical SID.
-- Code to create login on the secondary instance
CREATE LOGIN foo WITH PASSWORD = '<enterStrongPasswordHere>', SID = <login_sid>;
-- Code to create login on the secondary instance
CREATE LOGIN foo WITH PASSWORD = '<enterStrongPasswordHere>', SID = <login_sid>;
To learn more, seeReplication of logins and agent jobs.
Synchronize instance properties and retention policies instances
Instances in a failover group remain separate Azure resources, and no changes made to the configuration of the primary instance will be automatically replicated to the secondary instance. Make sure to perform all relevant changes both on primaryandsecondary instance. For example, if you change backup storage redundancy or long-term backup retention policy on primary instance, make sure to change it on secondary instance as well.
Scaling instances
You can scale the primary and secondary instance up or down to a different compute size within the same service tier or to a different service tier. When scaling up within the same service tier, first scale up the geo-secondary first, and then scale up the primary. When scaling down within the same service tier, reverse the order: scale down the primary first, and then scale down the secondary. Follow the same sequence when you scale an instance to a different service tier.
This sequence is recommended to avoid problems from the geo-secondary, at a lower SKU, getting overloaded and having to reseed during an upgrade or downgrade process.
Permissions
Permissions for a failover group are managed viaAzure role-based access control (Azure RBAC).
TheSQL Managed Instance Contributorrole, scoped to theresource groupsof the primary and the secondary managed instance, is sufficient to perform all management operations on failover groups.
The following table provides granular view ofminimal required permissionsand their respectiveminimal required scope levelsfor management operations on failover groups:
Microsoft.Sql/locations/instanceFailoverGroups/write
Microsoft.Sql/managedInstances/write
Microsoft.Sql/locations/instanceFailoverGroups/failover/action
Microsoft.Sql/locations/instanceFailoverGroups/forceFailoverAllowDataLoss/action
Microsoft.Sql/locations/instanceFailoverGroups/delete
Limitations
When creating a new failover group, consider the following limitations:
Failover groups can't be created between two instances in thesameAzure region.
An instance can participate only in one failover group at any moment.
A failover group can't be created between two instances that belong to different Azure tenants.
Creating a failover group between two instances in different resource groups or subscriptions is only supported with Azure PowerShell, or the REST API, and not the Azure portal or the Azure CLI. Once the failover group is created, it's visible in the Azure portal, and all operations are supported in the Azure portal or with the Azure CLI. Failover must be initiated from the secondary instance.
If initial seeding of all databases doesn't complete within 7 days, creating the failover group fails and all successfully replicated databases are deleted from the secondary instance.
Creating a failover group with an instance configured with amanaged instance linkis currently unsupported.
Failover groups can't be created between instances if any of them are in an instance pool.
Databases migrated to Azure SQL Managed Instance by using theLog Replay Service (LRS)can't be added to a failover group until the cutover step is executed.
When using failover groups, consider the following limitations:
Failover groups can't be renamed. You'll need to delete the group and re-create it with a different name.
A failover group contains exactly two managed instances. Adding additional instances to the failover group is unsupported.
Full backups are automatically taken:before initial seeding and can noticeably delay the start of the initial seeding process.after failover, and can delay or prevent a subsequent failover.
before initial seeding and can noticeably delay the start of the initial seeding process.
after failover, and can delay or prevent a subsequent failover.
Database rename isn't supported for databases in failover group. You'll need to temporarily delete the failover group to be able to rename a database.
System databases aren't replicated to the secondary instance in a failover group. Therefore, scenarios that depend on objects from the system databases such as Server Logins and Agent jobs, require objects to be manually created on the secondary instances and also manually kept in sync after any changes made on primary instance. The only exception is Service master Key (SMK) for SQL Managed Instance that is replicated automatically to secondary instance during creation of failover group. Any subsequent changes of SMK on the primary instance however won't be replicated to secondary instance. To learn more, see how toEnable scenarios dependent on objects from the system databases.
For instances inside of a failover group, changing the service tier to, or from, the Next-gen General Purpose tier isn't supported. You must first delete the failover group before modifying either replica, and then re-create the failover group after the change takes effect.
SQL managed instances in a failover group must have the sameupdate policy, though it's possible tochange the update policyfor instances within a failover group.
Programmatically manage failover groups
Failover groups can also be managed programmatically using Azure PowerShell, Azure CLI, and REST API. The following tables describe the set of commands available. Failover groups include a set of Azure Resource Manager APIs for management, including theAzure SQL Database REST APIandAzure PowerShell cmdlets. These APIs require the use of resource groups and support Azure role-based access control (Azure RBAC). For more information on how to implement access roles, seeAzure role-based access control (Azure RBAC).
PowerShell
Azure CLI
REST API
Related content
Add a managed instance to a failover group
Failover groups
Configure standby replica
Feedback
Was this page helpful?
Additional resources