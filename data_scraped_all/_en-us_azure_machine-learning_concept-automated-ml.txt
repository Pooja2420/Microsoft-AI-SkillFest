Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
What is automated machine learning (AutoML)?
Article
2025-03-08
30 contributors
In this article
APPLIES TO:Python SDK azure-ai-mlv2 (current)
Automated machine learning, also referred to as automated ML or AutoML, is the process of automating the time-consuming, iterative tasks of machine learning model development. It allows data scientists, analysts, and developers to build ML models with high scale, efficiency, and productivity all while sustaining model quality. Automated ML in Azure Machine Learning is based on a breakthrough from theMicrosoft Research division.
For code-experienced customers, install theAzure Machine Learning Python SDK. Get started withTutorial: Train an object detection model (preview) with AutoML and Python.
How does AutoML work?
During training, Azure Machine Learning creates many pipelines in parallel that try different algorithms and parameters for you. The service iterates through ML algorithms paired with feature selections, where each iteration produces a model with a training score. The better the score for the metric you want to optimize for, the better the model is considered to "fit" your data. It stops once it hits the exit criteria defined in the experiment.
UsingAzure Machine Learning, you can design and run your automated ML training experiments with these steps:
Identify the ML problemto be solved: classification, forecasting, regression, computer vision, or NLP.
Identify the ML problemto be solved: classification, forecasting, regression, computer vision, or NLP.
Choose whether you want a code-first experience or a no-code studio web experience: Users who prefer a code-first experience can use theAzure Machine Learning SDKv2or theAzure Machine Learning CLIv2. Get started withTutorial: Train an object detection model with AutoML and Python. Users who prefer a limited or no-code experience can use theweb interfacein Azure Machine Learning studio athttps://ml.azure.com. Get started withTutorial: Create a classification model with automated ML in Azure Machine Learning.
Choose whether you want a code-first experience or a no-code studio web experience: Users who prefer a code-first experience can use theAzure Machine Learning SDKv2or theAzure Machine Learning CLIv2. Get started withTutorial: Train an object detection model with AutoML and Python. Users who prefer a limited or no-code experience can use theweb interfacein Azure Machine Learning studio athttps://ml.azure.com. Get started withTutorial: Create a classification model with automated ML in Azure Machine Learning.
Specify the source of the labeled training data: You can bring your data to Azure Machine Learning inmany different ways.
Specify the source of the labeled training data: You can bring your data to Azure Machine Learning inmany different ways.
Configure the automated machine learning parametersthat determine how many iterations over different models, hyperparameter settings, advanced preprocessing/featurization, and what metrics to look at when determining the best model.
Configure the automated machine learning parametersthat determine how many iterations over different models, hyperparameter settings, advanced preprocessing/featurization, and what metrics to look at when determining the best model.
Submit the training job.
Submit the training job.
Review the results.
Review the results.
The following diagram illustrates this process.
You can also inspect the logged job information, whichcontains metricsgathered during the job. The training job produces a Python serialized object (.pklfile) that contains the model and data preprocessing.
.pkl
While model building is automated, you can alsolearn how important or relevant features areto the generated models.
When to use AutoML: classification, regression, forecasting, computer vision, & NLP
Apply automated ML when you want Azure Machine Learning to train and tune a model for you using the target metric you specify. Automated ML democratizes the machine learning model development process and empowers its users, no matter their data science expertise, to identify an end-to-end machine learning pipeline for any problem.
ML professionals and developers across industries can use automated ML to:
Implement ML solutions without extensive programming knowledge
Save time and resources
Apply data science best practices
Provide agile problem-solving
Classification
Classification is a type of supervised learning in which models learn to use training data and apply those learnings to new data. Azure Machine Learning offers featurizations specifically for these tasks, such as deep neural network text featurizers for classification. For more information about featurization options, seeData featurization. You can also find the list of algorithms supported by AutoML atSupported algorithms.
The main goal of classification models is to predict which categories new data fall into based on learnings from its training data. Common classification examples include fraud detection, handwriting recognition, and object detection.
See an example of classification and automated machine learning in this Python notebook:Bank Marketing.
Regression
Similar to classification, regression tasks are also a common supervised learning task. Azure Machine Learning offers featurization specific to regression problems. Learn more aboutfeaturization options. You can also find the list of algorithms supported by AutoML atSupported algorithms.
Different from classification where predicted output values are categorical, regression models predict numerical output values based on independent predictors. In regression, the objective is to help establish the relationship among those independent predictor variables by estimating how one variable impacts the others. For example, the model might predict automobile price based on features like gas mileage and safety rating.
See an example of regression and automated machine learning for predictions in these Python notebooks:Hardware Performance.
Time-series forecasting
Building forecasts is an integral part of any business, whether it's revenue, inventory, sales, or customer demand. You can use automated ML to combine techniques and approaches and get a recommended, high-quality time-series forecast. You can find the list of algorithms supported by AutoML atSupported algorithms.
An automated time-series experiment is treated as a multivariate regression problem. Past time-series values are "pivoted" to become more dimensions for the regressor together with other predictors. This approach, unlike classical time-series methods, has an advantage of naturally incorporating multiple contextual variables and their relationship to one another during training. Automated ML learns a single, but often internally branched, model for all items in the dataset and prediction horizons. More data is thus available to estimate model parameters and it becomes possible to generalize to unseen series.
Advanced forecasting configuration includes:
Holiday detection and featurization
Time-series and DNN learners (Auto-ARIMA, Prophet, ForecastTCN)
Many models support through grouping
Rolling-origin cross validation
Configurable lags
Rolling window aggregate features
See an example of forecasting and automated machine learning in this Python notebook:Energy Demand.
Computer vision
Support for computer vision tasks allows you to easily generate models trained on image data for scenarios like image classification and object detection.
With this capability you can:
Seamlessly integrate with theAzure Machine Learning data labelingcapability.
Use labeled data for generating image models.
Optimize model performance by specifying the model algorithm and tuning the hyperparameters.
Download or deploy the resulting model as a web service in Azure Machine Learning.
Operationalize at scale, leveraging Azure Machine LearningMLOpsandML Pipelinescapabilities.
Authoring AutoML models for vision tasks is supported via the Azure Machine Learning Python SDK. The resulting experimentation jobs, models, and outputs can be accessed from the Azure Machine Learning studio UI.
Learn how toset up AutoML training for computer vision models.
Image from:http://cs231n.stanford.edu/slides/2021/lecture_15.pdf
Automated ML for images supports the following computer vision tasks:

Natural language processing: NLP
Support for natural language processing (NLP) tasks in automated ML allows you to easily generate models trained on text data for text classification and named entity recognition scenarios. Authoring automated ML trained NLP models is supported via the Azure Machine Learning Python SDK. The resulting experimentation jobs, models, and outputs can be accessed from the Azure Machine Learning studio UI.
The NLP capability supports:
End-to-end deep neural network NLP training with the latest pre-trained BERT models
Seamless integration withAzure Machine Learning data labeling
Use labeled data for generating NLP models
Multi-lingual support with 104 languages
Distributed training with Horovod
Learn how toset up AutoML training for NLP models.
Training, validation, and test data
With automated ML, you provide thetraining datato train ML models, and you can specify what type of model validation to perform. Automated ML performs model validation as part of training. That is, automated ML usesvalidation datato tune model hyperparameters based on the applied algorithm to find the combination that best fits the training data. However, the same validation data is used for each iteration of tuning, which introduces model evaluation bias since the model continues to improve and fit to the validation data.
To help confirm that such bias isn't applied to the final recommended model, automated ML supports the use oftest datato evaluate the final model that automated ML recommends at the end of your experiment. When you provide test data as part of your AutoML experiment configuration, this recommended model is tested by default at the end of your experiment (preview).
Important
Testing your models with a test dataset to evaluate generated models is a preview feature. This capability is anexperimentalpreview feature, and might change at any time.
Learn how toconfigure AutoML experiments to use test data (preview) with the SDKor with theAzure Machine Learning studio.
Feature engineering
Feature engineering is the process of using domain knowledge of the data to create features that help ML algorithms learn better. In Azure Machine Learning, scaling and normalization techniques are applied to facilitate feature engineering. Collectively, these techniques and feature engineering are referred to asfeaturization.
For automated machine learning experiments, featurization is applied automatically, but can also be customized based on your data.Learn more about what featurization is included (SDK v1)and how AutoML helpsprevent over-fitting and imbalanced datain your models.
Note
Automated machine learning featurization steps (for example, feature normalization, handling missing data,
and converting text to numeric) become part of the underlying model. When using the model for
predictions, the same featurization steps applied during training are applied to
your input data automatically.
Customize featurization
Additional feature engineering techniques, such as encoding and transforms, are also available.
Enable this setting with:
Azure Machine Learning studio: EnableAutomatic featurizationin theView additional configurationsectionwith these steps.
Azure Machine Learning studio: EnableAutomatic featurizationin theView additional configurationsectionwith these steps.
Python SDK: Specify featurization in yourAutoML Jobobject. Learn more aboutenabling featurization.
Python SDK: Specify featurization in yourAutoML Jobobject. Learn more aboutenabling featurization.
Ensemble models
Automated machine learning supports ensemble models, which are enabled by default. Ensemble learning improves machine learning results and predictive performance by combining multiple models as opposed to using single models. The ensemble iterations appear as the final iterations of your job. Automated machine learning uses both voting and stacking ensemble methods for combining models:
Voting: Predicts based on the weighted average of predicted class probabilities (for classification tasks) or predicted regression targets (for regression tasks).
Stacking: Combines heterogenous models and trains a meta-model based on the output from the individual models. The current default meta-models are LogisticRegression for classification tasks and ElasticNet for regression/forecasting tasks.
TheCaruana ensemble selection algorithmwith sorted ensemble initialization is used to decide which models to use within the ensemble. At a high level, this algorithm initializes the ensemble with up to five models with the best individual scores, and verifies that these models are within 5% threshold of the best score to avoid a poor initial ensemble. Then for each ensemble iteration, a new model is added to the existing ensemble and the resulting score is calculated. If a new model improved the existing ensemble score, the ensemble is updated to include the new model.
See theAutoML packagefor changing default ensemble settings in automated machine learning.

AutoML & ONNX
With Azure Machine Learning, you can use automated ML to build a Python model and have it converted to the ONNX format. Once the models are in the ONNX format, they can be run on various platforms and devices. Learn more aboutaccelerating ML models with ONNX.
See how to convert to ONNX formatin this Jupyter notebook example. Learn whichalgorithms are supported in ONNX.
The ONNX runtime also supports C#, so you can use the model built automatically in your C# apps without any need for recoding or any of the network latencies that REST endpoints introduce. Learn more aboutusing an AutoML ONNX model in a .NET application with ML.NETandinferencing ONNX models with the ONNX runtime C# API.
Next steps
There are multiple resources to get you up and running with AutoML.
Tutorials/ how-tos
Tutorials are end-to-end introductory examples of AutoML scenarios.
For a code first experience, followTutorial: Train an object detection model with AutoML and Python
For a code first experience, followTutorial: Train an object detection model with AutoML and Python
For a low or no-code experience, seeTutorial: Train a classification model with no-code AutoML in Azure Machine Learning studio.
For a low or no-code experience, seeTutorial: Train a classification model with no-code AutoML in Azure Machine Learning studio.
How-to articles provide more detail into what functionality automated ML offers. For example,
Configure the settings for automatic training experimentsWithout code in the Azure Machine Learning studio.With the Python SDK.
Configure the settings for automatic training experiments
Without code in the Azure Machine Learning studio.
With the Python SDK.
Learn how totrain computer vision models with Python.
Learn how totrain computer vision models with Python.
Learn how toview the generated code from your automated ML models (SDK v1).
Learn how toview the generated code from your automated ML models (SDK v1).
Jupyter notebook samples
Review detailed code examples and use cases in theGitHub notebook repository for automated machine learning samples.
Python SDK reference
Deepen your expertise of SDK design patterns and class specifications with theAutoML Job class reference documentation.
Note
Automated machine learning capabilities are also available in other Microsoft solutions, such asML.NET,HDInsight,Power BI, andSQL Server.
Feedback
Was this page helpful?
Additional resources