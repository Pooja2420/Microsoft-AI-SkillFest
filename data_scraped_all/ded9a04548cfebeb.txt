Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Deployment technologies in Azure Functions
Article
2024-11-07
28 contributors
In this article
You can use a few different technologies to deploy your Azure Functions project code to Azure. This article provides an overview of the deployment methods available to you and recommendations for the best method to use in various scenarios. It also provides an exhaustive list of and key details about the underlying deployment technologies.
Deployment methods
The deployment technology you use to publish code to your function app in Azure depends on your specific needs and the point in the development cycle. For example, during development and testing you may deploy directly from your development tool, such as Visual Studio Code. When your app is in production, you're more likely to publish continuously from source control or by using an automated publishing pipeline, which can include validation and testing.
The following table describes the available deployment methods for your code project.
Specific deployments should use the best technology based on the specific scenario. Many of the deployment methods are based onzip deployment, which is recommended for deployment.
Deployment technology availability
The deployment method also depends on the hosting plan and operating system on which you run your function app.
Currently, Functions offers five options for hosting your function apps:
Flex Consumption plan
Consumption
Elastic Premium plan
Dedicated (App Service) plan
Azure Container Apps
Each plan has different behaviors. Not all deployment technologies are available for each hosting plan and operating system. This chart provides information on the supported deployment technologies:
1Deployment technologies that require you tomanually sync triggersaren't recommended.2In-portal editing is disabled when code is deployed to your function app from outside the portal. For more information, including language support details for in-portal editing, seeLanguage support details.
Key concepts
Some key concepts are critical to understanding how deployments work in Azure Functions.
Trigger syncing
When you change any of your triggers, the Functions infrastructure must be aware of the changes. Synchronization happens automatically for many deployment technologies. However, in some cases, you must manually sync your triggers.
You must manually sync triggers when using these deployment options:
External package URL
Local Git
FTPS
You can sync triggers in one of these ways:
Restart your function app in the Azure portal.
Restart your function app in the Azure portal.
Use theaz restcommand to send an HTTP POST request that calls thesyncfunctiontriggersAPI, as in this example:az rest --method post --url https://management.azure.com/subscriptions/<SUBSCRIPTION_ID>/resourceGroups/<RESOURCE_GROUP>/providers/Microsoft.Web/sites/<APP_NAME>/syncfunctiontriggers?api-version=2016-08-01
Use theaz restcommand to send an HTTP POST request that calls thesyncfunctiontriggersAPI, as in this example:
az rest
syncfunctiontriggers
az rest --method post --url https://management.azure.com/subscriptions/<SUBSCRIPTION_ID>/resourceGroups/<RESOURCE_GROUP>/providers/Microsoft.Web/sites/<APP_NAME>/syncfunctiontriggers?api-version=2016-08-01
az rest --method post --url https://management.azure.com/subscriptions/<SUBSCRIPTION_ID>/resourceGroups/<RESOURCE_GROUP>/providers/Microsoft.Web/sites/<APP_NAME>/syncfunctiontriggers?api-version=2016-08-01
When you deploy an updated version of the deployment package and maintain the same external package URL, you need to manually restart your function app. This indicates to the host that it should synchronize and redeploy your updates from the same package URL.
The Functions host also performs a background trigger sync after the application has started. However, for the Consumption and Elastic Premium hosting plans you should alsomanually sync triggersin these scenarios:
Deployments using an external package URL with either ARM Templates or Terraform.
When updating the deployment package at the same external package URL.
Remote build
You can request Azure Functions to perform a remote build of your code project during deployment. In these scenarios, you should request a remote build instead of building locally:
You're deploying an app to a Linux-based function app that was developed on a Windows computer. This is commonly the case for Python app development. You can end up with incorrect libraries being used when building the deployment package locally on Windows.
Your project has dependencies on acustom package index.
You want to reduce the size of your deployment package.
How you request a remote build depends on whether your app runs in Azure on Windows or Linux.
Windows
Linux
All function apps running on Windows have a small management app, thescmsite provided byKudu. This site handles much of the deployment and build logic for Azure Functions.
scm
When an app is deployed to Windows, language-specific commands, likedotnet restore(C#) ornpm install(JavaScript) are run.
dotnet restore
npm install
To enable remote build on Linux Consumption, Elastic Premium, and App Service plans, you must set these application settings:
ENABLE_ORYX_BUILD=true
ENABLE_ORYX_BUILD=true
SCM_DO_BUILD_DURING_DEPLOYMENT=true
SCM_DO_BUILD_DURING_DEPLOYMENT=true
By default, bothAzure Functions Core Toolsand theAzure Functions Extension for Visual Studio Codeperform remote builds when deploying to Linux. Because of this, both tools automatically create these settings for you in Azure.
When apps are built remotely on Linux, theyrun from the deployment package.
When deploying to the Flex Consumption plan, you don't need to set any application settings to request a remote build. You instead pass a remote build parameter when you start deployment. How you pass this parameter depends on the deployment tool you are using. For Core Tools and Visual Studio Code, a remote build is always requested when deploying a Python app.
The following considerations apply when using remote builds during deployment:
Remote builds are supported for function apps running on Linux in the Consumption plan. However, deployment options are limited for these apps because they don't have anscm(Kudu) site.
scm
Function apps running on Linux in aPremium planor in aDedicated (App Service) plando have anscm(Kudu) site, but it's limited compared to Windows.
scm
Remote builds aren't performed when an app is usingrun-from-package. To learn how to use remote build in these cases, seeZip deploy.
You may have issues with remote build when your app was created before the feature was made available (August 1, 2019). For older apps, either create a new function app or runaz functionapp update --resource-group <RESOURCE_GROUP_NAME> --name <APP_NAME>to update your function app. This command might take two tries to succeed.
az functionapp update --resource-group <RESOURCE_GROUP_NAME> --name <APP_NAME>
App content storage
Package-based deployment methods store the package in the storage account associated with the function app, which is defined in theAzureWebJobsStoragesetting. When available, Consumption and Elastic Premium plan apps try to use the Azure Files content share from this account, but you can also maintain the package in another location. Flex Consumption plan apps instead use a storage container in default storage account, unless youconfigure a different storage account to use for deployment. For more information, review the details inWhere app content is storedin each deployment technology covered in the next section.
Important
The storage account is used to store important app data, sometimes including the application code itself. You should limit access from other apps and users to the storage account.
Deployment technology details
The following deployment methods are available in Azure Functions. Refer to thedeployment technology availabilitytable to determine which technologies each hosting plan supports.
One deploy
One deploy is the only deployment technology supported for apps on the Flex Consumption plan. The end result is a ready-to-run .zip package that your function app runs on.
How to use it:Deploy with theVisual Studio Codepublish feature, or from the command line usingAzure Functions Core Toolsor theAzure CLI. OurAzure Dev Ops TaskandGitHub Actionsimilarly leverage one deploy when they detect that a Flex Consumption app is being deployed to.
When you create a Flex Consumption app, you will need to specify a deployment storage (blob) container as well as an authentication method to it. By default the same storage account as theAzureWebJobsStorageconnection is used, with a connection string as the authentication method. Thus, yourdeployment settingsare configured during app create time without any need of application settings.
AzureWebJobsStorage
When to use it:One deploy is the only deployment technology available for function apps running on the Flex Consumption plan.
Where app content is stored:When you create a Flex Consumption function app, you specify adeployment storage container. This is a blob container where the platform will upload the app content you deployed. To change the location, you can visit the Deployment Settings blade in the Azure portal or use theAzure CLI.
Zip deploy
Zip deploy is the default and recommended deployment technology for function apps on the Consumption, Elastic Premium, and App Service (Dedicated) plans. The end result a ready-to-run .zip package that your function app runs on. It differs fromexternal package URLin that our platform is responsible for remote building and storing your app content.
How to use it:Deploy by using your favorite client tool:Visual Studio Code,Visual Studio, or from the command line usingAzure Functions Core Toolsor theAzure CLI. OurAzure Dev Ops TaskandGitHub Actionsimilarly leverage zip deploy.
When you deploy by using zip deploy, you can set your app torun from package. To run from package, set theWEBSITE_RUN_FROM_PACKAGEapplication setting value to1. We recommend zip deployment. It yields faster loading times for your applications, and it's the default for VS Code, Visual Studio, and the Azure CLI.
WEBSITE_RUN_FROM_PACKAGE
1
When to use it:Zip deploy is the default and recommended deployment technology for function apps on the Windows Consumption, Windows and Linux Elastic Premium, and Windows and Linux App Service (Dedicated) plans.
Where app content is stored:App content from a zip deploy by default is stored on the file system, which may be backed by Azure Files from the storage account specified when the function app was created. In Linux Consumption, the app content is instead persisted on a blob in the storage account specified by theAzureWebJobsStorageapp setting, and the app settingWEBSITE_RUN_FROM_PACKAGEwill take on the value of the blob URL.
AzureWebJobsStorage
WEBSITE_RUN_FROM_PACKAGE
External package URL
External package URL is an option if you want to manually control how deployments are performed. You take responsibility for uploading a ready-to-run .zip package containing your built app content to blob storage and referencing this external URL as an application setting on your function app. Whenever your app restarts, it fetches the package, mounts it, and runs inRun From Packagemode.
How to use it:AddWEBSITE_RUN_FROM_PACKAGEto your application settings. The value of this setting should be a blob URL pointing to the location of the specific package you want your app to run. You can add settings eitherin the portalorby using the Azure CLI.
WEBSITE_RUN_FROM_PACKAGE
If you use Azure Blob Storage, your Function app can access the container either by using a managed identity-based connection or with ashared access signature (SAS). The option you choose affects what kind of URL you use as the value for WEBSITE_RUN_FROM_PACKAGE. Managed identity is recommended for overall security and because SAS tokens expire and must be manually maintained.
Whenever you deploy the package file that a function app references, you mustmanually sync triggers, including the initial deployment. When you change the contents of the package file and not the URL itself, you must also restart your function app to sync triggers. Refer to ourhow-to guideon configuring this deployment technology.
When to use it:External package URL is the only supported deployment method for apps running on the Linux Consumption plan when you don't want aremote buildto occur. This method is also the recommended deployment technology when youcreate your app without Azure Files. For scalable apps running on Linux, you should instead considerFlex Consumption planhosting.
Where app content is stored:You are responsible for uploading your app content to blob storage. You may use any blob storage account, though Azure Blob Storage is recommended.
Docker container
You can deploy a function app running in a Linux container.
How to use it:Create your functions in a Linux containerthen deploy the container to a Premium or Dedicated plan in Azure Functions or another container host. Use theAzure Functions Core Toolsto create a customized Dockerfile for your project that you use to build a containerized function app. You can use the container in the following deployments:
Deploy to Azure Functions resources you create in the Azure portal. For more information, seeAzure portal create using containers.
Deploy to Azure Functions resources you create from the command line. Requires either a Premium or Dedicated (App Service) plan. To learn how, seeCreate your first containerized Azure Functions.
Deploy to Azure Container Apps. To learn how, seeCreate your first containerized Azure Functions on Azure Container Apps.
Deploy to Azure Arc (preview). To learn how, seeWorking with containers and Azure Functions.
Deploy to a Kubernetes cluster. You can deploy to a cluster usingAzure Functions Core Tools. Use thefunc kubernetes deploycommand.
func kubernetes deploy
When to use it:Use the Docker container option when you need more control over the Linux environment where your function app runs and where the container is hosted. This deployment mechanism is available only for functions running on Linux.
Where app content is stored:App content is stored in the specified container registry as a part of the image.
Source control
You can enable continuous integration between your function app and a source code repository. With source control enabled, an update to code in the connected source repository triggers deployment of the latest code from the repository. For more information, see theContinuous deployment for Azure Functions.
How to use it:The easiest way to set up publishing from source control is from the Deployment Center in the Functions area of the portal. For more information, seeContinuous deployment for Azure Functions.
When to use it:Using source control is the best practice for teams that collaborate on their function apps. Source control is a good deployment option that enables more sophisticated deployment pipelines. Source control is usually enabled on a staging slot, which can be swapped into production after validation of updates from the repository. For more information, seeAzure Functions deployment slots.
Where app content is stored:The app content is in the source control system, but a locally cloned and built app content from is stored on the app file system, which may be backed by Azure Files from the storage account specified when the function app was created.
Local Git
You can use local Git to push code from your local machine to Azure Functions by using Git.
How to use it:Follow the instructions inLocal Git deployment to Azure App Service.
When to use it:To reduce the chance of errors, you should avoid using deployment methods that require the additional step ofmanually syncing triggers. Usezip deploymentwhen possible.
Where app content is stored:App content is stored on the file system, which may be backed by Azure Files from the storage account specified when the function app was created.
FTP/S
You can use FTP/S to directly transfer files to Azure Functions, although this deployment method isn't recommended. When you're not planning on using FTP, you should disable it. If you do choose to use FTP, you should enforce FTPS. To learn how in the Azure portal, seeEnforce FTPS.
How to use it:Follow the instructions inFTPS deployment settingsto get the URL and credentials you can use to deploy to your function app using FTPS.
When to use it:To reduce the chance of errors, you should avoid using deployment methods that require the additional step ofmanually syncing triggers. Usezip deploymentwhen possible.
Where app content is stored:App content is stored on the file system, which may be backed by Azure Files from the storage account specified when the function app was created.
Portal editing
In the portal-based editor, you can directly edit the files that are in your function app (essentially deploying every time you save your changes).
How to use it:To be able to edit your functions in theAzure portal, you must havecreated your functions in the portal. To preserve a single source of truth, using any other deployment method makes your function read-only and prevents continued portal editing. To return to a state in which you can edit your files in the Azure portal, you can manually turn the edit mode back toRead/Writeand remove any deployment-related application settings (likeWEBSITE_RUN_FROM_PACKAGE).
Read/Write
WEBSITE_RUN_FROM_PACKAGE
When to use it:The portal is a good way to get started with Azure Functions. Because ofdevelopment limitations in the Azure portal, you should use one of the following client tools more advanced development work:
Visual Studio Code
Azure Functions Core Tools (command line)
Visual Studio
Where app content is stored:App content is stored on the file system, which may be backed by Azure Files from the storage account specified when the function app was created.
Deployment behaviors
When you deploy updates to your function app code, currently executing functions are terminated. After deployment completes, the new code is loaded to begin processing requests. ReviewImprove the performance and reliability of Azure Functionsto learn how to write stateless and defensive functions.
If you need more control over this transition, you should use deployment slots.
Deployment slots
When you deploy your function app to Azure, you can deploy to a separate deployment slot instead of directly to production. Deploying to a deployment slot and then swapping into production after verification is the recommended way to configurecontinuous deployment.
The way that you deploy to a slot depends on the specific deployment tool you use. For example, when using Azure Functions Core Tools, you include the--slotoption to indicate the name of a specific slot for thefunc azure functionapp publishcommand.
--slot
func azure functionapp publish
For more information on deployment slots, see theAzure Functions Deployment Slotsdocumentation for details.
Next steps
Read these articles to learn more about deploying your function apps:
Continuous deployment for Azure Functions
Continuous delivery by using Azure Pipelines
Zip deployments for Azure Functions
Run your Azure Functions from a package file
Automate resource deployment for your function app in Azure Functions
Feedback
Was this page helpful?
Additional resources