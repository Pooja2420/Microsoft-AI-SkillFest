Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Manage VM resources in environments
Article
2024-07-12
18 contributors
In this article
Azure DevOps Services | Azure DevOps Server 2022 | Azure DevOps Server 2020
This article describes how to use virtual machine (VM) resources in environments to manage Azure Pipelines deployments across multiple machines. You can also install agents on your own servers for rolling deployments.
VM resources can exist inenvironments, such as Development, Test, or Production. After you define an environment, you can add VMs to target with deployments. The environment's deployment history provides traceability from each VM to your pipeline.
Prerequisites
Linux
Windows
Access to a source repository that's connected to your pipeline.
Access and permission to download and run executable scripts on the VMs you want to connect to the environment.
Project Administrator or Build Administratorpermissionsin the Azure DevOps project that contains the environment. For more information, seePipeline security resources.
Administrator rolefor thedeployment pool, or set of target servers available to the organization. For more information, seedeployment pool and environment permissions.
Access to a source repository that's connected to your pipeline.
Access to and PowerShell administrator permissions on VMs you want to connect to the environment.
Project Administrator or Build Administratorpermissionsin the Azure DevOps project that contains the environment. For more information, seePipeline security resources.
Administrator rolefor thedeployment pool, or set of target servers available to the organization. For more information, seedeployment pool and environment permissions.
Note
To configure a deployment group agent, or if you see an error when registering a VM environment resource, make sure you set your personal access token (PAT) scope toAll accessible organizations.
Create the environment
Use the following procedure to add a VM resource to an environment. You can use the same process to set up physical machines.
Add a VM resource
In your Azure DevOps project, go toPipelines>Environmentsand then selectCreate environmentorNew environment.
In your Azure DevOps project, go toPipelines>Environmentsand then selectCreate environmentorNew environment.
On the firstNew environmentscreen, add aNameand an optionalDescription.
On the firstNew environmentscreen, add aNameand an optionalDescription.
UnderResource, selectVirtual machines, and then selectNext.
UnderResource, selectVirtual machines, and then selectNext.

Copy the registration script
The agent scripts for VM resources are like the scripts for self-hosted agents, and use the same commands. The scripts include an Azure DevOps Personal Access Token (PAT) for the signed-in user, which expires three hours after the script is generated.
Linux
Windows
On the nextNew environmentscreen, choose Linux underOperating system.
On the nextNew environmentscreen, choose Linux underOperating system.
Copy the Linux registration script.
Copy the Linux registration script.

The script is the same for all the Linux VMs added to the environment. For more information about installing the agent script, seeSelf-hosted Linux agents.
On the nextNew environmentscreen, choose Windows underOperating system.
On the nextNew environmentscreen, choose Windows underOperating system.
Copy thePowerShellregistration script.
Copy thePowerShellregistration script.

The script is the same for all the Windows VMs added to the environment. For more information about installing the agent script, seeSelf-hosted Windows agents.
Run the copied script
SelectClose, and note that the new environment is created. To copy the script again, for example if your PAT expires, selectAdd resource.
SelectClose, and note that the new environment is created. To copy the script again, for example if your PAT expires, selectAdd resource.

Run the copied script on each target VM that you want to register with the environment.NoteIf the VM already has another agent running on it, provide a unique name foragentto register with the environment.
Run the copied script on each target VM that you want to register with the environment.
Note
If the VM already has another agent running on it, provide a unique name foragentto register with the environment.
Once the VM is registered, it appears as a resource under theResourcestab of the environment.

Use VMs in pipelines
In your YAML pipeline, you can target VMs by referencing their environment. By default, the job targets all the VMs registered for that environment'sresourceName.
resourceName
Note
When you retry a stage, the deployment reruns on all VMs, not just failed targets.
trigger: 
- main

pool: 
   vmImage: ubuntu-latest

jobs:
- deployment: VMDeploy
  displayName: Deploy to VM
  environment: 
   name: VMenv
   resourceName: VMenv
   resourceType: virtualMachine
  strategy:
     runOnce:
        deploy:   
          steps:
            - script: echo "Hello world"
trigger: 
- main

pool: 
   vmImage: ubuntu-latest

jobs:
- deployment: VMDeploy
  displayName: Deploy to VM
  environment: 
   name: VMenv
   resourceName: VMenv
   resourceType: virtualMachine
  strategy:
     runOnce:
        deploy:   
          steps:
            - script: echo "Hello world"
Note
TheresourceTypevalues likevirtualMachineare case sensitive. Incorrect casing results in no matching resources found.
resourceType
virtualMachine
You can deploy to specific VMs in the environment by specifying them inresourceName. The following example deploys only to the VM resource namedRESOURCE-PCin theVMenvenvironment.
resourceName
RESOURCE-PC
VMenv
trigger: 
- main

pool: 
   vmImage: ubuntu-latest

jobs:
- deployment: VMDeploy
  displayName: Deploy to VM
  environment: 
    name: VMenv
    resourceType: virtualMachine
    resourceName: RESOURCE-PC # only deploy to the VM resource named RESOURCE-PC
  strategy:
    runOnce:
      deploy:   
          steps:
          - script: echo "Hello world"
trigger: 
- main

pool: 
   vmImage: ubuntu-latest

jobs:
- deployment: VMDeploy
  displayName: Deploy to VM
  environment: 
    name: VMenv
    resourceType: virtualMachine
    resourceName: RESOURCE-PC # only deploy to the VM resource named RESOURCE-PC
  strategy:
    runOnce:
      deploy:   
          steps:
          - script: echo "Hello world"
For more information about YAML pipeline deployment jobs, see theYAML pipelines schema.
Add and manage tags
Tags are a way to target a specific set of VMs in an environment for deployment. Tags are limited to 256 characters each. There's no limit to the number of tags that you can use.
You can add tags or remove tags for VMs in the interactive registration script or through the UI by selectingMore actionsfor a VM resource.

If you specify multiple tags, the pipeline uses only VMs that include all the tags. The following example targets only VMs that have both thewindowsandprodtags. VMs that have only one or none of the tags aren't targeted.
windows
prod
trigger: 
- main

pool: 
   vmImage: ubuntu-latest

jobs:
- deployment: VMDeploy
  displayName: Deploy to VM
  environment: 
    name: VMenv
    resourceType: virtualMachine
    tags: windows,prod # only deploy to VMs with both windows and prod tags
  strategy:
    runOnce:
      deploy:   
          steps:
          - script: echo "Hello world"
trigger: 
- main

pool: 
   vmImage: ubuntu-latest

jobs:
- deployment: VMDeploy
  displayName: Deploy to VM
  environment: 
    name: VMenv
    resourceType: virtualMachine
    tags: windows,prod # only deploy to VMs with both windows and prod tags
  strategy:
    runOnce:
      deploy:   
          steps:
          - script: echo "Hello world"
Apply deployment strategy
You can apply a deploymentstrategyto define how to roll out your application. VMs support both therunOnceand therollingstrategies. For more information about deployment strategies and lifecycle hooks, seeDeployment strategies.
strategy
runOnce
rolling
View deployment history
Select theDeploymentstab for complete traceability of commits and work items, and a cross-pipeline deployment history per environment and resource.

Remove a VM from an environment
Linux
Windows
To remove a VM from a Linux environment, run the following command on each machine.
./config.sh remove
./config.sh remove
To remove VMs from a Windows environment, run the following command. Make sure you run the command:
On each machine.
From an administrator PowerShell command prompt.
In the same folder path as the environment registration command.
./config.cmd remove
./config.cmd remove
Related content
Create and target environments
Deployment jobs
YAML pipelines schema reference
Feedback
Was this page helpful?
Additional resources