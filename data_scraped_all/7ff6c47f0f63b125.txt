Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Use deployment scripts in ARM templates
Article
2024-06-14
20 contributors
In this article
Learn how to use deployment scripts in Azure Resource Manager (ARM) templates. With thedeploymentScriptsresource, users can execute scripts in ARM deployments and review execution results.
deploymentScripts
Tip
We recommendBicepbecause it offers the same capabilities as ARM templates and the syntax is easier to use. To learn more, seeDeployment script.
These scripts can be used for performing custom steps such as:
Add users to a directory.
Perform data plane operations, for example, copy blobs or seed database.
Look up and validate a license key.
Create a self-signed certificate.
Create an object in Microsoft Entra ID.
Look up IP Address blocks from custom system.
The benefits of deployment script:
Easy to code, use, and debug. You can develop deployment scripts in your favorite development environments. The scripts can be embedded in templates or in external script files.
You can specify the script language and platform. Currently, Azure PowerShell and Azure CLI deployment scripts on the Linux environment are supported.
Allow passing command-line arguments to the script.
Can specify script outputs and pass them back to the deployment.
The deployment script resource is only available in the regions where Azure Container Instance is available.  SeeResource availability for Azure Container Instances in Azure regions. Currently, deployment script only uses public networking.
Important
The deployment script service requires two supporting resources for script execution and troubleshooting: a storage account and a container instance. You can specify an existing storage account, otherwise the script service creates one for you. The two automatically-created supporting resources are usually deleted by the script service when the deployment script execution gets in a terminal state. You are billed for the supporting resources until they are deleted. For the price information, seeContainer Instances pricingandAzure Storage pricing. To learn more, seeClean-up deployment script resources.
Note
Retry logic for Azure sign in is now built in to the wrapper script. If you grant permissions in the same template as your deployment scripts, the deployment script service retries sign in for 10 minutes with 10-second interval until the managed identity role assignment is replicated.
Training resources
If you would rather learn about deployment scripts through step-by-step guidance, seeExtend ARM templates by using deployment scripts.
Configure the minimum permissions
For deployment script API version 2020-10-01 or later, there are two principals involved in deployment script execution:
Deployment principal(the principal used to deploy the template): this principal is used to create underlying resources required for the deployment script resource to execute â a storage account and an Azure container instance. To configure the least-privilege permissions, assign a custom role with the following properties to the deployment principal:{
  "roleName": "deployment-script-minimum-privilege-for-deployment-principal",
  "description": "Configure least privilege for the deployment principal in deployment script",
  "type": "customRole",
  "IsCustom": true,
  "permissions": [
    {
      "actions": [
        "Microsoft.Storage/storageAccounts/*",
        "Microsoft.ContainerInstance/containerGroups/*",
        "Microsoft.Resources/deployments/*",
        "Microsoft.Resources/deploymentScripts/*"
      ],
     "dataActions": [
        "Microsoft.Storage/storageAccounts/fileServices/*"
      ]
    }
  ],
  "assignableScopes": [
    "[subscription().id]"
  ]
}If the Azure Storage and the Azure Container Instance resource providers haven't been registered, you also need to addMicrosoft.Storage/register/actionandMicrosoft.ContainerInstance/register/action.
Deployment principal(the principal used to deploy the template): this principal is used to create underlying resources required for the deployment script resource to execute â a storage account and an Azure container instance. To configure the least-privilege permissions, assign a custom role with the following properties to the deployment principal:
{
  "roleName": "deployment-script-minimum-privilege-for-deployment-principal",
  "description": "Configure least privilege for the deployment principal in deployment script",
  "type": "customRole",
  "IsCustom": true,
  "permissions": [
    {
      "actions": [
        "Microsoft.Storage/storageAccounts/*",
        "Microsoft.ContainerInstance/containerGroups/*",
        "Microsoft.Resources/deployments/*",
        "Microsoft.Resources/deploymentScripts/*"
      ],
     "dataActions": [
        "Microsoft.Storage/storageAccounts/fileServices/*"
      ]
    }
  ],
  "assignableScopes": [
    "[subscription().id]"
  ]
}
{
  "roleName": "deployment-script-minimum-privilege-for-deployment-principal",
  "description": "Configure least privilege for the deployment principal in deployment script",
  "type": "customRole",
  "IsCustom": true,
  "permissions": [
    {
      "actions": [
        "Microsoft.Storage/storageAccounts/*",
        "Microsoft.ContainerInstance/containerGroups/*",
        "Microsoft.Resources/deployments/*",
        "Microsoft.Resources/deploymentScripts/*"
      ],
     "dataActions": [
        "Microsoft.Storage/storageAccounts/fileServices/*"
      ]
    }
  ],
  "assignableScopes": [
    "[subscription().id]"
  ]
}
If the Azure Storage and the Azure Container Instance resource providers haven't been registered, you also need to addMicrosoft.Storage/register/actionandMicrosoft.ContainerInstance/register/action.
Microsoft.Storage/register/action
Microsoft.ContainerInstance/register/action
Deployment script principal: This principal is only required if the deployment script needs to authenticate to Azure and call Azure CLI/PowerShell. There are two ways to specify the deployment script principal:Specify a user-assigned managed identity in theidentityproperty (seeSample templates). When specified, the script service callsConnect-AzAccount -Identitybefore invoking the deployment script. The managed identity must have the required access to complete the operation in the script. Currently, only user-assigned managed identity is supported for theidentityproperty. To log in with a different identity, use the second method in this list.Pass the service principal credentials as secure environment variables, and then can callConnect-AzAccountoraz loginin the deployment script.If a managed identity is used, the deployment principal needs theManaged Identity Operatorrole (a built-in role) assigned to the managed identity resource.
Deployment script principal: This principal is only required if the deployment script needs to authenticate to Azure and call Azure CLI/PowerShell. There are two ways to specify the deployment script principal:
Specify a user-assigned managed identity in theidentityproperty (seeSample templates). When specified, the script service callsConnect-AzAccount -Identitybefore invoking the deployment script. The managed identity must have the required access to complete the operation in the script. Currently, only user-assigned managed identity is supported for theidentityproperty. To log in with a different identity, use the second method in this list.
identity
Connect-AzAccount -Identity
identity
Pass the service principal credentials as secure environment variables, and then can callConnect-AzAccountoraz loginin the deployment script.
If a managed identity is used, the deployment principal needs theManaged Identity Operatorrole (a built-in role) assigned to the managed identity resource.
Sample templates
The following JSON is an example. For more information, see the latesttemplate schema.
{
  "type": "Microsoft.Resources/deploymentScripts",
  "apiVersion": "2020-10-01",
  "name": "runPowerShellInline",
  "location": "[resourceGroup().location]",
  "tags": {
    "tagName1": "tagValue1",
    "tagName2": "tagValue2"
  },
  "kind": "AzurePowerShell", // or "AzureCLI"
  "identity": {
    "type": "userAssigned",
    "userAssignedIdentities": {
      "/subscriptions/aaaabbbb-0000-cccc-1111-dddd2222eeee/resourceGroups/myResourceGroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myID": {}
    }
  },
  "properties": {
    "forceUpdateTag": "1",
    "containerSettings": {
      "containerGroupName": "mycustomaci"
    },
    "storageAccountSettings": {
      "storageAccountName": "myStorageAccount",
      "storageAccountKey": "myKey"
    },
    "azPowerShellVersion": "9.7",  // or "azCliVersion": "2.47.0",
    "arguments": "-name \\\"John Dole\\\"",
    "environmentVariables": [
      {
        "name": "UserName",
        "value": "jdole"
      },
      {
        "name": "Password",
        "secureValue": "jDolePassword"
      }
    ],
    "scriptContent": "
      param([string] $name)
      $output = 'Hello {0}. The username is {1}, the password is {2}.' -f $name,${Env:UserName},${Env:Password}
      Write-Output $output
      $DeploymentScriptOutputs = @{}
      $DeploymentScriptOutputs['text'] = $output
    ", // or "primaryScriptUri": "https://raw.githubusercontent.com/Azure/azure-docs-json-samples/master/deployment-script/deploymentscript-helloworld.ps1",
    "supportingScriptUris":[],
    "timeout": "PT30M",
    "cleanupPreference": "OnSuccess",
    "retentionInterval": "P1D"
  }
}
{
  "type": "Microsoft.Resources/deploymentScripts",
  "apiVersion": "2020-10-01",
  "name": "runPowerShellInline",
  "location": "[resourceGroup().location]",
  "tags": {
    "tagName1": "tagValue1",
    "tagName2": "tagValue2"
  },
  "kind": "AzurePowerShell", // or "AzureCLI"
  "identity": {
    "type": "userAssigned",
    "userAssignedIdentities": {
      "/subscriptions/aaaabbbb-0000-cccc-1111-dddd2222eeee/resourceGroups/myResourceGroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myID": {}
    }
  },
  "properties": {
    "forceUpdateTag": "1",
    "containerSettings": {
      "containerGroupName": "mycustomaci"
    },
    "storageAccountSettings": {
      "storageAccountName": "myStorageAccount",
      "storageAccountKey": "myKey"
    },
    "azPowerShellVersion": "9.7",  // or "azCliVersion": "2.47.0",
    "arguments": "-name \\\"John Dole\\\"",
    "environmentVariables": [
      {
        "name": "UserName",
        "value": "jdole"
      },
      {
        "name": "Password",
        "secureValue": "jDolePassword"
      }
    ],
    "scriptContent": "
      param([string] $name)
      $output = 'Hello {0}. The username is {1}, the password is {2}.' -f $name,${Env:UserName},${Env:Password}
      Write-Output $output
      $DeploymentScriptOutputs = @{}
      $DeploymentScriptOutputs['text'] = $output
    ", // or "primaryScriptUri": "https://raw.githubusercontent.com/Azure/azure-docs-json-samples/master/deployment-script/deploymentscript-helloworld.ps1",
    "supportingScriptUris":[],
    "timeout": "PT30M",
    "cleanupPreference": "OnSuccess",
    "retentionInterval": "P1D"
  }
}
Note
The example is for demonstration purposes. The propertiesscriptContentandprimaryScriptUrican't coexist in a template.
scriptContent
primaryScriptUri
Note
ThescriptContentshows a script with multiple lines.  The Azure portal and Azure DevOps pipeline can't parse a deployment script with multiple lines. You can either chain the PowerShell commands (by using semicolons or\r\nor\n) into one line, or use theprimaryScriptUriproperty with an external script file. There are many free JSON string escape/unescape tools available. For example,https://www.freeformatter.com/json-escape.html.
primaryScriptUri
Property value details:
identity: For deployment script API version 2020-10-01 or later, a user-assigned managed identity is optional unless you need to perform any Azure-specific actions in the script.  For the API version 2019-10-01-preview, a managed identity is required as the deployment script service uses it to execute the scripts. When the identity property is specified, the script service callsConnect-AzAccount -Identitybefore invoking the user script. Currently, only user-assigned managed identity is supported. To log in with a different identity, you can callConnect-AzAccountin the script.
identity: For deployment script API version 2020-10-01 or later, a user-assigned managed identity is optional unless you need to perform any Azure-specific actions in the script.  For the API version 2019-10-01-preview, a managed identity is required as the deployment script service uses it to execute the scripts. When the identity property is specified, the script service callsConnect-AzAccount -Identitybefore invoking the user script. Currently, only user-assigned managed identity is supported. To log in with a different identity, you can callConnect-AzAccountin the script.
identity
Connect-AzAccount -Identity
tags: Deployment script tags. If the deployment script service generates a storage account and a container instance, the tags are passed to both resources, which can be used to identify them. Another way to identify these resources is through their suffixes, which contain "azscripts". For more information, seeMonitor and troubleshoot deployment scripts.
tags: Deployment script tags. If the deployment script service generates a storage account and a container instance, the tags are passed to both resources, which can be used to identify them. Another way to identify these resources is through their suffixes, which contain "azscripts". For more information, seeMonitor and troubleshoot deployment scripts.
tags
kind: Specify the type of script. Currently, Azure PowerShell and Azure CLI scripts are supported. The values areAzurePowerShellandAzureCLI.
kind: Specify the type of script. Currently, Azure PowerShell and Azure CLI scripts are supported. The values areAzurePowerShellandAzureCLI.
kind
forceUpdateTag: Changing this value between template deployments forces the deployment script to re-execute. If you use thenewGuid()or theutcNow()functions, both functions can only be used in the default value for a parameter. To learn more, seeRun script more than once.
forceUpdateTag: Changing this value between template deployments forces the deployment script to re-execute. If you use thenewGuid()or theutcNow()functions, both functions can only be used in the default value for a parameter. To learn more, seeRun script more than once.
forceUpdateTag
newGuid()
utcNow()
containerSettings: Specify the settings to customize Azure Container Instance. Deployment script requires a new Azure Container Instance. You can't specify an existing Azure Container Instance. However, you can customize the container group name by usingcontainerGroupName. If not specified, the group name is automatically generated.
containerSettings: Specify the settings to customize Azure Container Instance. Deployment script requires a new Azure Container Instance. You can't specify an existing Azure Container Instance. However, you can customize the container group name by usingcontainerGroupName. If not specified, the group name is automatically generated.
containerSettings
containerGroupName
storageAccountSettings: Specify the settings to use an existing storage account. IfstorageAccountNameisn't specified, a storage account is automatically created. SeeUse an existing storage account.
storageAccountSettings: Specify the settings to use an existing storage account. IfstorageAccountNameisn't specified, a storage account is automatically created. SeeUse an existing storage account.
storageAccountSettings
storageAccountName
azPowerShellVersion/azCliVersion: Specify the module version to be used. See a list ofsupported Azure PowerShell versions. The version determines which container image to use:Az version greater than or equal to 9uses Ubuntu 22.04.Az version greater than or equal to 6 but less than 9uses Ubuntu 20.04.Az version less than 6uses Ubuntu 18.04.ImportantIt is advisable to upgrade to the latest version of Ubuntu, as Ubuntu 18.04 is nearing its end of life and will no longer receive security updates beyondMay 31st, 2023.See a list ofsupported Azure CLI versions.ImportantDeployment script uses the available CLI images from Microsoft Container Registry (MCR). It typically takes approximatedly one month to certify a CLI image for deployment script. Don't use the CLI versions that were released within 30 days. To find the release dates for the images, seeAzure CLI release notes. If an unsupported version is used, the error message lists the supported versions.
azPowerShellVersion/azCliVersion: Specify the module version to be used. See a list ofsupported Azure PowerShell versions. The version determines which container image to use:
azPowerShellVersion
azCliVersion
Az version greater than or equal to 9uses Ubuntu 22.04.
Az version greater than or equal to 6 but less than 9uses Ubuntu 20.04.
Az version less than 6uses Ubuntu 18.04.
Important
It is advisable to upgrade to the latest version of Ubuntu, as Ubuntu 18.04 is nearing its end of life and will no longer receive security updates beyondMay 31st, 2023.
See a list ofsupported Azure CLI versions.
Important
Deployment script uses the available CLI images from Microsoft Container Registry (MCR). It typically takes approximatedly one month to certify a CLI image for deployment script. Don't use the CLI versions that were released within 30 days. To find the release dates for the images, seeAzure CLI release notes. If an unsupported version is used, the error message lists the supported versions.
arguments: Specify the parameter values. The values are separated by spaces.Deployment Scripts splits the arguments into an array of strings by invoking theCommandLineToArgvWsystem call. This step is necessary because the arguments are passed as acommand propertyto Azure Container Instance, and the command property is an array of string.If the arguments contain escaped characters, useJsonEscaperto double escaped the characters. Paste your original escaped string into the tool, and then selectEscape.  The tool outputs a double escaped string. For example, in the previous sample template, The argument is-name \"John Dole\". The escaped string is-name \\\"John Dole\\\".To pass an ARM template parameter of type object as an argument, convert the object to a string by using thestring()function, and then use thereplace()function to replace any\"into\\\". For example:replace(string(parameters('tables')), '\"', '\\\"')For more information, see thesample template.
arguments: Specify the parameter values. The values are separated by spaces.
arguments
Deployment Scripts splits the arguments into an array of strings by invoking theCommandLineToArgvWsystem call. This step is necessary because the arguments are passed as acommand propertyto Azure Container Instance, and the command property is an array of string.
If the arguments contain escaped characters, useJsonEscaperto double escaped the characters. Paste your original escaped string into the tool, and then selectEscape.  The tool outputs a double escaped string. For example, in the previous sample template, The argument is-name \"John Dole\". The escaped string is-name \\\"John Dole\\\".
-name \"John Dole\"
-name \\\"John Dole\\\"
To pass an ARM template parameter of type object as an argument, convert the object to a string by using thestring()function, and then use thereplace()function to replace any\"into\\\". For example:
\"
\\\"
replace(string(parameters('tables')), '\"', '\\\"')
replace(string(parameters('tables')), '\"', '\\\"')
For more information, see thesample template.
environmentVariables: Specify the environment variables to pass over to the script. For more information, seeDevelop deployment scripts.
environmentVariables: Specify the environment variables to pass over to the script. For more information, seeDevelop deployment scripts.
environmentVariables
scriptContent: Specify the script content. To run an external script, useprimaryScriptUriinstead. For examples, seeUse inline scriptandUse external script.
scriptContent: Specify the script content. To run an external script, useprimaryScriptUriinstead. For examples, seeUse inline scriptandUse external script.
scriptContent
primaryScriptUri
primaryScriptUri: Specify a publicly accessible URL to the primary deployment script with supported file extensions. For more information, seeUse external scripts.
primaryScriptUri: Specify a publicly accessible URL to the primary deployment script with supported file extensions. For more information, seeUse external scripts.
primaryScriptUri
supportingScriptUris: Specify an array of publicly accessible URLs to supporting files that are called in eitherscriptContentorprimaryScriptUri. For more information, seeUse external scripts.
supportingScriptUris: Specify an array of publicly accessible URLs to supporting files that are called in eitherscriptContentorprimaryScriptUri. For more information, seeUse external scripts.
supportingScriptUris
scriptContent
primaryScriptUri
timeout: Specify the maximum allowed script execution time specified in theISO 8601 format. Default value isP1D.
timeout: Specify the maximum allowed script execution time specified in theISO 8601 format. Default value isP1D.
timeout
cleanupPreference. Specify the preference of cleaning up the two supporting deployment resources, the storage account and the container instance, when the script execution gets in a terminal state. Default setting isAlways, which means deleting the supporting resources despite the terminal state (Succeeded, Failed, Canceled). To learn more, seeClean up deployment script resources.
cleanupPreference. Specify the preference of cleaning up the two supporting deployment resources, the storage account and the container instance, when the script execution gets in a terminal state. Default setting isAlways, which means deleting the supporting resources despite the terminal state (Succeeded, Failed, Canceled). To learn more, seeClean up deployment script resources.
cleanupPreference
retentionInterval: Specify the interval for which the service retains the deployment script resource after the deployment script execution reaches a terminal state. The deployment script resource is deleted when this duration expires. Duration is based on theISO 8601 pattern. The retention interval is between 1 and 26 hours (PT26H). This property is used whencleanupPreferenceis set toOnExpiration. To learn more, seeClean up deployment script resources.
retentionInterval: Specify the interval for which the service retains the deployment script resource after the deployment script execution reaches a terminal state. The deployment script resource is deleted when this duration expires. Duration is based on theISO 8601 pattern. The retention interval is between 1 and 26 hours (PT26H). This property is used whencleanupPreferenceis set toOnExpiration. To learn more, seeClean up deployment script resources.
retentionInterval
cleanupPreference
More samples
Sample 1: create a key vault and use deployment script to assign a certificate to the key vault.
Sample 2: create a resource group at the subscription level, create a key vault in the resource group, and then use deployment script to assign a certificate to the key vault.
Sample 3: create a user-assigned managed identity, assign the contributor role to the identity at the resource group level, create a key vault, and then use deployment script to assign a certificate to the key vault.
Sample 4: it is the same scenario as Sample 1 in this list. A new resource group is created to run the deployment script. This template is a subscription level template.
Sample 5: it is the same scenario as Sample 4. This template is a resource group level template.
Sample 6: manually create a user-assigned managed identity and assign it permission to use the Microsoft Graph API to create Microsoft Entra applications; in the ARM template, use a deployment script to create a Microsoft Entra application and service principal, and output the object IDs and client ID.
Use inline scripts
The following template has one resource defined with theMicrosoft.Resources/deploymentScriptstype. The highlighted part is the inline script.
Microsoft.Resources/deploymentScripts
{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "name": {
      "type": "string",
      "defaultValue": "\\\"John Dole\\\""
    },
    "utcValue": {
      "type": "string",
      "defaultValue": "[utcNow()]"
    }
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2020-10-01",
      "name": "runPowerShellInlineWithOutput",
      "location": "[resourceGroup().location]",
      "kind": "AzurePowerShell",
      "properties": {
        "forceUpdateTag": "[parameters('utcValue')]",
        "azPowerShellVersion": "8.3",
        "scriptContent": "
          param([string] $name)
          $output = \"Hello {0}\" -f $name
          Write-Output $output
          $DeploymentScriptOutputs = @{}
          $DeploymentScriptOutputs['text'] = $output
        ",
        "arguments": "[concat('-name', ' ', parameters('name'))]",
        "timeout": "PT1H",
        "cleanupPreference": "OnSuccess",
        "retentionInterval": "P1D"
      }
    }
  ],
  "outputs": {
    "result": {
      "value": "[reference('runPowerShellInlineWithOutput').outputs.text]",
      "type": "string"
    }
  }
}
{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "name": {
      "type": "string",
      "defaultValue": "\\\"John Dole\\\""
    },
    "utcValue": {
      "type": "string",
      "defaultValue": "[utcNow()]"
    }
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2020-10-01",
      "name": "runPowerShellInlineWithOutput",
      "location": "[resourceGroup().location]",
      "kind": "AzurePowerShell",
      "properties": {
        "forceUpdateTag": "[parameters('utcValue')]",
        "azPowerShellVersion": "8.3",
        "scriptContent": "
          param([string] $name)
          $output = \"Hello {0}\" -f $name
          Write-Output $output
          $DeploymentScriptOutputs = @{}
          $DeploymentScriptOutputs['text'] = $output
        ",
        "arguments": "[concat('-name', ' ', parameters('name'))]",
        "timeout": "PT1H",
        "cleanupPreference": "OnSuccess",
        "retentionInterval": "P1D"
      }
    }
  ],
  "outputs": {
    "result": {
      "value": "[reference('runPowerShellInlineWithOutput').outputs.text]",
      "type": "string"
    }
  }
}
Note
Because the inline deployment scripts are enclosed in double quotes, the strings inside the deployment scripts need to be escaped by using a backslash (\) or enclosed in single quotes. You can also consider using string substitution as it is shown in the previous JSON sample.
The script takes one parameter, and output the parameter value.DeploymentScriptOutputsis used for storing outputs. In the outputs section, thevalueline shows how to access the stored values.Write-Outputis used for debugging purpose. To learn how to access the output file, seeMonitor and troubleshoot deployment scripts. For the property descriptions, seeSample templates.
DeploymentScriptOutputs
value
Write-Output
To run the script, selectTry itto open the Cloud Shell, and then paste the following code into the shell pane.
$resourceGroupName = Read-Host -Prompt "Enter the name of the resource group to be created"
$location = Read-Host -Prompt "Enter the location (i.e. centralus)"

New-AzResourceGroup -Name $resourceGroupName -Location $location

New-AzResourceGroupDeployment -ResourceGroupName $resourceGroupName -TemplateUri "https://raw.githubusercontent.com/Azure/azure-docs-json-samples/master/deployment-script/deploymentscript-helloworld.json"

Write-Host "Press [ENTER] to continue ..."
$resourceGroupName = Read-Host -Prompt "Enter the name of the resource group to be created"
$location = Read-Host -Prompt "Enter the location (i.e. centralus)"

New-AzResourceGroup -Name $resourceGroupName -Location $location

New-AzResourceGroupDeployment -ResourceGroupName $resourceGroupName -TemplateUri "https://raw.githubusercontent.com/Azure/azure-docs-json-samples/master/deployment-script/deploymentscript-helloworld.json"

Write-Host "Press [ENTER] to continue ..."
The output looks like:

Use external scripts
In addition to inline scripts, you can also use external script files. Only primary PowerShell scripts with theps1file extension are supported. For CLI scripts, the primary scripts can have any extensions (or without an extension), as long as the scripts are valid bash scripts. To use external script files, replacescriptContentwithprimaryScriptUri. For example:
scriptContent
primaryScriptUri
"primaryScriptUri": "https://raw.githubusercontent.com/Azure/azure-docs-json-samples/master/deployment-script/deploymentscript-helloworld.ps1",
"primaryScriptUri": "https://raw.githubusercontent.com/Azure/azure-docs-json-samples/master/deployment-script/deploymentscript-helloworld.ps1",
For more information, see theexample template.
The external script files must be accessible. To secure your script files that are stored in Azure storage accounts, generate a SAS token and include it in the URI for the template. Set the expiry time to allow enough time to complete the deployment. For more information, seeDeploy private ARM template with SAS token.
You're responsible for ensuring the integrity of the scripts that are referenced by deployment script, eitherprimaryScriptUriorsupportingScriptUris. Reference only scripts that you trust.
primaryScriptUri
supportingScriptUris
Use supporting scripts
You can separate complicated logics into one or more supporting script files. ThesupportingScriptUrisproperty allows you to provide an array of URIs to the supporting script files if needed:
supportingScriptUris
"scriptContent": "
    ...
    ./Create-Cert.ps1
    ...
"

"supportingScriptUris": [
  "https://raw.githubusercontent.com/Azure/azure-docs-json-samples/master/deployment-script/create-cert.ps1"
],
"scriptContent": "
    ...
    ./Create-Cert.ps1
    ...
"

"supportingScriptUris": [
  "https://raw.githubusercontent.com/Azure/azure-docs-json-samples/master/deployment-script/create-cert.ps1"
],
Supporting script files can be called from both inline scripts and primary script files. Supporting script files have no restrictions on the file extension.
The supporting files are copied toazscripts/azscriptinputat the runtime. Use relative path to reference the supporting files from inline scripts and primary script files.
azscripts/azscriptinput
Work with outputs from PowerShell scripts
The following template shows how to pass values between twodeploymentScriptsresources:
deploymentScripts
{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "name": {
      "type": "string",
      "defaultValue": "John Dole"
    },
    "utcValue": {
      "type": "string",
      "defaultValue": "[utcNow()]"
    }
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2020-10-01",
      "name": "scriptInTemplate1",
      "location": "[resourceGroup().location]",
      "kind": "AzurePowerShell",
      "properties": {
        "forceUpdateTag": "[parameters('utcValue')]",
        "azPowerShellVersion": "8.3",
        "timeout": "PT1H",
        "arguments": "[concat('-name', ' ', concat('\\\"', parameters('name'), '\\\"'))]",
        "scriptContent": "
          param([string] $name)
          $output = 'Hello {0}' -f $name
          Write-Output $output
          $DeploymentScriptOutputs = @{}
          $DeploymentScriptOutputs['text'] = $output
        ",
        "cleanupPreference": "Always",
        "retentionInterval": "P1D"
      }
    },
    {
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2020-10-01",
      "name": "scriptInTemplate2",
      "location": "[resourceGroup().location]",
      "kind": "AzurePowerShell",
      "dependsOn": [
        "scriptInTemplate1"
      ],
      "properties": {
        "forceUpdateTag": "[parameters('utcValue')]",
        "azPowerShellVersion": "8.3",
        "timeout": "PT1H",
        "arguments": "[concat('-textToEcho', ' ', concat('\\\"', reference('scriptInTemplate1').outputs.text, '\\\"'))]",
        "scriptContent": "
          param([string] $textToEcho)
          Write-Output $textToEcho
          $DeploymentScriptOutputs = @{}
          $DeploymentScriptOutputs['text'] = $textToEcho
        ",
        "cleanupPreference": "Always",
        "retentionInterval": "P1D"
      }
    }
  ],
  "outputs": {
    "result": {
      "value": "[reference('scriptInTemplate2').outputs.text]",
      "type": "string"
    }
  }
}
{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "name": {
      "type": "string",
      "defaultValue": "John Dole"
    },
    "utcValue": {
      "type": "string",
      "defaultValue": "[utcNow()]"
    }
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2020-10-01",
      "name": "scriptInTemplate1",
      "location": "[resourceGroup().location]",
      "kind": "AzurePowerShell",
      "properties": {
        "forceUpdateTag": "[parameters('utcValue')]",
        "azPowerShellVersion": "8.3",
        "timeout": "PT1H",
        "arguments": "[concat('-name', ' ', concat('\\\"', parameters('name'), '\\\"'))]",
        "scriptContent": "
          param([string] $name)
          $output = 'Hello {0}' -f $name
          Write-Output $output
          $DeploymentScriptOutputs = @{}
          $DeploymentScriptOutputs['text'] = $output
        ",
        "cleanupPreference": "Always",
        "retentionInterval": "P1D"
      }
    },
    {
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2020-10-01",
      "name": "scriptInTemplate2",
      "location": "[resourceGroup().location]",
      "kind": "AzurePowerShell",
      "dependsOn": [
        "scriptInTemplate1"
      ],
      "properties": {
        "forceUpdateTag": "[parameters('utcValue')]",
        "azPowerShellVersion": "8.3",
        "timeout": "PT1H",
        "arguments": "[concat('-textToEcho', ' ', concat('\\\"', reference('scriptInTemplate1').outputs.text, '\\\"'))]",
        "scriptContent": "
          param([string] $textToEcho)
          Write-Output $textToEcho
          $DeploymentScriptOutputs = @{}
          $DeploymentScriptOutputs['text'] = $textToEcho
        ",
        "cleanupPreference": "Always",
        "retentionInterval": "P1D"
      }
    }
  ],
  "outputs": {
    "result": {
      "value": "[reference('scriptInTemplate2').outputs.text]",
      "type": "string"
    }
  }
}
In the first resource, you define a variable called$DeploymentScriptOutputs, and use it to store the output values. To access the output value from another resource within the template, use:
$DeploymentScriptOutputs
reference('<ResourceName>').outputs.text
reference('<ResourceName>').outputs.text
Work with outputs from CLI scripts
In contrast to the Azure PowerShell deployment scripts, CLI/bash doesn't expose a common variable for storing script outputs. Instead, it utilizes an environment variable namedAZ_SCRIPTS_OUTPUT_PATHto indicate the location of the script outputs file. When executing a deployment script within an ARM template, the Bash shell automatically configures this environment variable for you. Its predefined value is set as/mnt/azscripts/azscriptoutput/scriptoutputs.json. The outputs are required to conform to a valid JSON string object structure. The file's contents should be formatted as a key-value pair. For instance, an array of strings should be saved as { "MyResult": [ "foo", "bar"] }. Storing only the array results, such as [ "foo", "bar" ], is considered invalid.
AZ_SCRIPTS_OUTPUT_PATH
{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "identity": {
      "type": "string"
    },
    "utcValue": {
      "type": "string",
      "defaultValue": "[utcNow()]"
    }
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2020-10-01",
      "name": "runBashWithOutputs",
      "location": "[resourceGroup().location]",
      "kind": "AzureCLI",
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[parameters('identity')]": {
          }
        }
      },
      "properties": {
        "forceUpdateTag": "[parameters('utcValue')]",
        "AzCliVersion": "2.40.0",
        "timeout": "PT30M",
        "arguments": "'foo' 'bar'",
        "environmentVariables": [
          {
            "name": "UserName",
            "value": "jdole"
          },
          {
            "name": "Password",
            "secureValue": "jDolePassword"
          }
        ],
        "scriptContent": "result=$(az keyvault list); echo \"arg1 is: $1\"; echo \"arg2 is: $2\"; echo \"Username is: $UserName\"; echo \"password is: $Password\"; echo $result | jq -c '{Result: map({id: .id})}' > $AZ_SCRIPTS_OUTPUT_PATH",
        "cleanupPreference": "OnExpiration",
        "retentionInterval": "P1D"
{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "identity": {
      "type": "string"
    },
    "utcValue": {
      "type": "string",
      "defaultValue": "[utcNow()]"
    }
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2020-10-01",
      "name": "runBashWithOutputs",
      "location": "[resourceGroup().location]",
      "kind": "AzureCLI",
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[parameters('identity')]": {
          }
        }
      },
      "properties": {
        "forceUpdateTag": "[parameters('utcValue')]",
        "AzCliVersion": "2.40.0",
        "timeout": "PT30M",
        "arguments": "'foo' 'bar'",
        "environmentVariables": [
          {
            "name": "UserName",
            "value": "jdole"
          },
          {
            "name": "Password",
            "secureValue": "jDolePassword"
          }
        ],
        "scriptContent": "result=$(az keyvault list); echo \"arg1 is: $1\"; echo \"arg2 is: $2\"; echo \"Username is: $UserName\"; echo \"password is: $Password\"; echo $result | jq -c '{Result: map({id: .id})}' > $AZ_SCRIPTS_OUTPUT_PATH",
        "cleanupPreference": "OnExpiration",
        "retentionInterval": "P1D"
jqis used in the previous sample. It comes with the container images. SeeConfigure development environment.
Use existing storage account
A storage account and a container instance are needed for script execution and troubleshooting. You have the options to specify an existing storage account, otherwise the storage account along with the container instance are automatically created by the script service. The requirements for using an existing storage account:
Supported storage account kinds are:SKUSupported KindPremium_LRSFileStoragePremium_ZRSFileStorageStandard_GRSStorage, StorageV2Standard_GZRSStorageV2Standard_LRSStorage, StorageV2Standard_RAGRSStorage, StorageV2Standard_RAGZRSStorageV2Standard_ZRSStorageV2These combinations support file shares. For more information, seeCreate an Azure file shareandTypes of storage accounts.
Supported storage account kinds are:
These combinations support file shares. For more information, seeCreate an Azure file shareandTypes of storage accounts.
Storage account firewall rules aren't supported yet. For more information, seeConfigure Azure Storage firewalls and virtual networks.
Storage account firewall rules aren't supported yet. For more information, seeConfigure Azure Storage firewalls and virtual networks.
Deployment principal must have permissions to manage the storage account, which includes read, create, delete file shares.
Deployment principal must have permissions to manage the storage account, which includes read, create, delete file shares.
TheallowSharedKeyAccessproperty of the storage account must be set totrue. The only way to mount a storage account in Azure Container Instance(ACI) is via an access key.
TheallowSharedKeyAccessproperty of the storage account must be set totrue. The only way to mount a storage account in Azure Container Instance(ACI) is via an access key.
allowSharedKeyAccess
true
To specify an existing storage account, add the following JSON to the property element ofMicrosoft.Resources/deploymentScripts:
Microsoft.Resources/deploymentScripts
"storageAccountSettings": {
  "storageAccountName": "myStorageAccount",
  "storageAccountKey": "myKey"
},
"storageAccountSettings": {
  "storageAccountName": "myStorageAccount",
  "storageAccountKey": "myKey"
},
storageAccountName: specify the name of the storage account.
storageAccountName: specify the name of the storage account.
storageAccountName
storageAccountKey: specify one of the storage account keys. You can use thelistKeys()function to retrieve the key. For example:"storageAccountSettings": {
    "storageAccountName": "[variables('storageAccountName')]",
    "storageAccountKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2019-06-01').keys[0].value]"
}
storageAccountKey: specify one of the storage account keys. You can use thelistKeys()function to retrieve the key. For example:
storageAccountKey
"storageAccountSettings": {
    "storageAccountName": "[variables('storageAccountName')]",
    "storageAccountKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2019-06-01').keys[0].value]"
}
"storageAccountSettings": {
    "storageAccountName": "[variables('storageAccountName')]",
    "storageAccountKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2019-06-01').keys[0].value]"
}
SeeSample templatesfor a completeMicrosoft.Resources/deploymentScriptsdefinition sample.
Microsoft.Resources/deploymentScripts
When an existing storage account is used, the script service creates a file share with a unique name. SeeClean up deployment script resourcesfor how the script service cleans up the file share.
Develop deployment scripts
Handle nonterminating errors
You can control how PowerShell responds to nonterminating errors by using the$ErrorActionPreferencevariable in your deployment script. If the variable isn't set in your deployment script, the script service uses the default valueContinue.
$ErrorActionPreference
The script service sets the resource provisioning state toFailedwhen the script encounters an error despite the setting of$ErrorActionPreference.
$ErrorActionPreference
Use environment variables
Deployment script uses these environment variables:
For more information about usingAZ_SCRIPTS_OUTPUT_PATH, seeWork with outputs from CLI script.
AZ_SCRIPTS_OUTPUT_PATH
Pass secured strings to deployment script
Setting environment variables (EnvironmentVariable) in your container instances allows you to provide dynamic configuration of the application or script run by the container. Deployment script handles nonsecured and secured environment variables in the same way as Azure Container Instance. For more information, seeSet environment variables in container instances. For an example, seeSample templates.
The max allowed size for environment variables is 64 KB.
Monitor and troubleshoot deployment scripts
The script service creates astorage account(unless you specify an existing storage account) and acontainer instancefor script execution. If these resources are automatically created by the script service, both resources have theazscriptssuffix in the resource names.
azscripts

The user script, the execution results, and the stdout file are stored in the files shares of the storage account. There's a folder calledazscripts. In the folder, there are two more folders for the input and the output files:azscriptinputandazscriptoutput.
azscripts
azscriptinput
azscriptoutput
The output folder contains aexecutionresult.jsonand the script output file. You can see the script execution error message inexecutionresult.json. The output file is created only when the script is executed successfully. The input folder contains a system PowerShell script file and the user deployment script files. You can replace the user deployment script file with a revised one, and rerun the deployment script from the Azure container instance.
Use the Azure portal
After you deploy a deployment script resource, the resource is listed under the resource group in the Azure portal. The following screenshot shows theOverviewpage of a deployment script resource:

The overview page displays some important information of the resource, such asProvisioning state,Storage account,Container instance, andLogs.
From the left menu, you can view the deployment script content, the arguments passed to the script, and the output. You can also export a template for the deployment script including the deployment script.
Use PowerShell
Using Azure PowerShell, you can manage deployment scripts at subscription or resource group scope:
Get-AzDeploymentScript: Gets or lists deployment scripts.
Get-AzDeploymentScriptLog: Gets the log of a deployment script execution.
Remove-AzDeploymentScript: Removes a deployment script and its associated resources.
Save-AzDeploymentScriptLog: Saves the log of a deployment script execution to disk.
TheGet-AzDeploymentScriptoutput is similar to:
Get-AzDeploymentScript
Name                : runPowerShellInlineWithOutput
Id                  : /subscriptions/aaaabbbb-0000-cccc-1111-dddd2222eeee/resourceGroups/myds0618rg/providers/Microsoft.Resources/deploymentScripts/runPowerShellInlineWithOutput
ResourceGroupName   : myds0618rg
Location            : centralus
SubscriptionId      : aaaabbbb-0000-cccc-1111-dddd2222eeee
ProvisioningState   : Succeeded
Identity            : /subscriptions/aaaabbbb-0000-cccc-1111-dddd2222eeee/resourceGroups/mydentity1008rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myuami
ScriptKind          : AzurePowerShell
AzPowerShellVersion : 9.7
StartTime           : 5/11/2023 7:46:45 PM
EndTime             : 5/11/2023 7:49:45 PM
ExpirationDate      : 5/12/2023 7:49:45 PM
CleanupPreference   : OnSuccess
StorageAccountId    : /subscriptions/aaaabbbb-0000-cccc-1111-dddd2222eeee/resourceGroups/myds0618rg/providers/Microsoft.Storage/storageAccounts/ftnlvo6rlrvo2azscripts
ContainerInstanceId : /subscriptions/aaaabbbb-0000-cccc-1111-dddd2222eeee/resourceGroups/myds0618rg/providers/Microsoft.ContainerInstance/containerGroups/ftnlvo6rlrvo2azscripts
Outputs             :
                      Key                 Value
                      ==================  ==================
                      text                Hello John Dole

RetentionInterval   : P1D
Timeout             : PT1H
Name                : runPowerShellInlineWithOutput
Id                  : /subscriptions/aaaabbbb-0000-cccc-1111-dddd2222eeee/resourceGroups/myds0618rg/providers/Microsoft.Resources/deploymentScripts/runPowerShellInlineWithOutput
ResourceGroupName   : myds0618rg
Location            : centralus
SubscriptionId      : aaaabbbb-0000-cccc-1111-dddd2222eeee
ProvisioningState   : Succeeded
Identity            : /subscriptions/aaaabbbb-0000-cccc-1111-dddd2222eeee/resourceGroups/mydentity1008rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myuami
ScriptKind          : AzurePowerShell
AzPowerShellVersion : 9.7
StartTime           : 5/11/2023 7:46:45 PM
EndTime             : 5/11/2023 7:49:45 PM
ExpirationDate      : 5/12/2023 7:49:45 PM
CleanupPreference   : OnSuccess
StorageAccountId    : /subscriptions/aaaabbbb-0000-cccc-1111-dddd2222eeee/resourceGroups/myds0618rg/providers/Microsoft.Storage/storageAccounts/ftnlvo6rlrvo2azscripts
ContainerInstanceId : /subscriptions/aaaabbbb-0000-cccc-1111-dddd2222eeee/resourceGroups/myds0618rg/providers/Microsoft.ContainerInstance/containerGroups/ftnlvo6rlrvo2azscripts
Outputs             :
                      Key                 Value
                      ==================  ==================
                      text                Hello John Dole

RetentionInterval   : P1D
Timeout             : PT1H
Use Azure CLI
Using Azure CLI, you can manage deployment scripts at subscription or resource group scope:
az deployment-scripts delete: Delete a deployment script.
az deployment-scripts list: List all deployment scripts.
az deployment-scripts show: Retrieve a deployment script.
az deployment-scripts show-log: Show deployment script logs.
The list command output is similar to:
[
  {
    "arguments": "'foo' 'bar'",
    "azCliVersion": "2.40.0",
    "cleanupPreference": "OnExpiration",
    "containerSettings": {
      "containerGroupName": null
    },
    "environmentVariables": null,
    "forceUpdateTag": "20231101T163748Z",
    "id": "/subscriptions/aaaabbbb-0000-cccc-1111-dddd2222eeee/resourceGroups/myds0624rg/providers/Microsoft.Resources/deploymentScripts/runBashWithOutputs",
    "identity": {
      "tenantId": "aaaabbbb-0000-cccc-1111-dddd2222eeee",
      "type": "userAssigned",
      "userAssignedIdentities": {
        "/subscriptions/aaaabbbb-0000-cccc-1111-dddd2222eeee/resourcegroups/myidentity/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myuami": {
          "clientId": "00001111-aaaa-2222-bbbb-3333cccc4444",
          "principalId": "aaaabbbb-0000-cccc-1111-dddd2222eeee"
        }
      }
    },
    "kind": "AzureCLI",
    "location": "centralus",
    "name": "runBashWithOutputs",
    "outputs": {
      "Result": [
        {
          "id": "/subscriptions/aaaabbbb-0000-cccc-1111-dddd2222eeee/resourceGroups/mytest/providers/Microsoft.KeyVault/vaults/mykv1027",
          "resourceGroup": "mytest"
        }
      ]
    },
    "primaryScriptUri": null,
    "provisioningState": "Succeeded",
    "resourceGroup": "mytest",
    "retentionInterval": "1 day, 0:00:00",
    "scriptContent": "result=$(az keyvault list); echo \"arg1 is: $1\"; echo $result | jq -c '{Result: map({id: .id})}' > $AZ_SCRIPTS_OUTPUT_PATH",
    "status": {
      "containerInstanceId": "/subscriptions/aaaabbbb-0000-cccc-1111-dddd2222eeee/resourceGroups/mytest/providers/Microsoft.ContainerInstance/containerGroups/eg6n7wvuyxn7iazscripts",
      "endTime": "2023-11-01T16:39:12.080950+00:00",
      "error": null,
      "expirationTime": "2023-11-02T16:39:12.080950+00:00",
      "startTime": "2023-11-01T16:37:53.139700+00:00",
      "storageAccountId": null
    },
    "storageAccountSettings": {
      "storageAccountKey": null,
      "storageAccountName": "dsfruro267qwb4i"
    },
    "supportingScriptUris": null,
    "systemData": {
      "createdAt": "2023-10-31T19:06:57.060909+00:00",
      "createdBy": "someone@contoso.com",
      "createdByType": "User",
      "lastModifiedAt": "2023-11-01T16:37:51.859570+00:00",
      "lastModifiedBy": "someone@contoso.com",
      "lastModifiedByType": "User"
    },
    "tags": null,
    "timeout": "0:30:00",
    "type": "Microsoft.Resources/deploymentScripts"
  }
]
[
  {
    "arguments": "'foo' 'bar'",
    "azCliVersion": "2.40.0",
    "cleanupPreference": "OnExpiration",
    "containerSettings": {
      "containerGroupName": null
    },
    "environmentVariables": null,
    "forceUpdateTag": "20231101T163748Z",
    "id": "/subscriptions/aaaabbbb-0000-cccc-1111-dddd2222eeee/resourceGroups/myds0624rg/providers/Microsoft.Resources/deploymentScripts/runBashWithOutputs",
    "identity": {
      "tenantId": "aaaabbbb-0000-cccc-1111-dddd2222eeee",
      "type": "userAssigned",
      "userAssignedIdentities": {
        "/subscriptions/aaaabbbb-0000-cccc-1111-dddd2222eeee/resourcegroups/myidentity/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myuami": {
          "clientId": "00001111-aaaa-2222-bbbb-3333cccc4444",
          "principalId": "aaaabbbb-0000-cccc-1111-dddd2222eeee"
        }
      }
    },
    "kind": "AzureCLI",
    "location": "centralus",
    "name": "runBashWithOutputs",
    "outputs": {
      "Result": [
        {
          "id": "/subscriptions/aaaabbbb-0000-cccc-1111-dddd2222eeee/resourceGroups/mytest/providers/Microsoft.KeyVault/vaults/mykv1027",
          "resourceGroup": "mytest"
        }
      ]
    },
    "primaryScriptUri": null,
    "provisioningState": "Succeeded",
    "resourceGroup": "mytest",
    "retentionInterval": "1 day, 0:00:00",
    "scriptContent": "result=$(az keyvault list); echo \"arg1 is: $1\"; echo $result | jq -c '{Result: map({id: .id})}' > $AZ_SCRIPTS_OUTPUT_PATH",
    "status": {
      "containerInstanceId": "/subscriptions/aaaabbbb-0000-cccc-1111-dddd2222eeee/resourceGroups/mytest/providers/Microsoft.ContainerInstance/containerGroups/eg6n7wvuyxn7iazscripts",
      "endTime": "2023-11-01T16:39:12.080950+00:00",
      "error": null,
      "expirationTime": "2023-11-02T16:39:12.080950+00:00",
      "startTime": "2023-11-01T16:37:53.139700+00:00",
      "storageAccountId": null
    },
    "storageAccountSettings": {
      "storageAccountKey": null,
      "storageAccountName": "dsfruro267qwb4i"
    },
    "supportingScriptUris": null,
    "systemData": {
      "createdAt": "2023-10-31T19:06:57.060909+00:00",
      "createdBy": "someone@contoso.com",
      "createdByType": "User",
      "lastModifiedAt": "2023-11-01T16:37:51.859570+00:00",
      "lastModifiedBy": "someone@contoso.com",
      "lastModifiedByType": "User"
    },
    "tags": null,
    "timeout": "0:30:00",
    "type": "Microsoft.Resources/deploymentScripts"
  }
]
Use REST API
You can get the deployment script resource deployment information at the resource group level and the subscription level by using REST API:
/subscriptions/<SubscriptionID>/resourcegroups/<ResourceGroupName>/providers/microsoft.resources/deploymentScripts/<DeploymentScriptResourceName>?api-version=2020-10-01
/subscriptions/<SubscriptionID>/resourcegroups/<ResourceGroupName>/providers/microsoft.resources/deploymentScripts/<DeploymentScriptResourceName>?api-version=2020-10-01
/subscriptions/<SubscriptionID>/providers/microsoft.resources/deploymentScripts?api-version=2020-10-01
/subscriptions/<SubscriptionID>/providers/microsoft.resources/deploymentScripts?api-version=2020-10-01
The following example usesARMClient:
armclient login
armclient get /subscriptions/aaaabbbb-0000-cccc-1111-dddd2222eeee/resourcegroups/myrg/providers/microsoft.resources/deploymentScripts/myDeployementScript?api-version=2020-10-01
armclient login
armclient get /subscriptions/aaaabbbb-0000-cccc-1111-dddd2222eeee/resourcegroups/myrg/providers/microsoft.resources/deploymentScripts/myDeployementScript?api-version=2020-10-01
The output is similar to:
{
  "kind": "AzurePowerShell",
  "identity": {
    "type": "userAssigned",
    "tenantId": "aaaabbbb-0000-cccc-1111-dddd2222eeee",
    "userAssignedIdentities": {
      "/subscriptions/aaaabbbb-0000-cccc-1111-dddd2222eeee/resourceGroups/myidentity1008rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myuami": {
        "principalId": "aaaabbbb-0000-cccc-1111-dddd2222eeee",
        "clientId": "00001111-aaaa-2222-bbbb-3333cccc4444"
      }
    }
  },
  "location": "centralus",
  "systemData": {
    "createdBy": "someone@contoso.com",
    "createdByType": "User",
    "createdAt": "2023-05-11T02:59:04.7501955Z",
    "lastModifiedBy": "someone@contoso.com",
    "lastModifiedByType": "User",
    "lastModifiedAt": "2023-05-11T02:59:04.7501955Z"
  },
  "properties": {
    "provisioningState": "Succeeded",
    "forceUpdateTag": "20220625T025902Z",
    "azPowerShellVersion": "9.7",
    "scriptContent": "\r\n          param([string] $name)\r\n          $output = \"Hello {0}\" -f $name\r\n          Write-Output $output\r\n          $DeploymentScriptOutputs = @{}\r\n          $DeploymentScriptOutputs['text'] = $output\r\n        ",
    "arguments": "-name \\\"John Dole\\\"",
    "retentionInterval": "P1D",
    "timeout": "PT1H",
    "containerSettings": {},
    "status": {
      "containerInstanceId": "/subscriptions/aaaabbbb-0000-cccc-1111-dddd2222eeee/resourceGroups/myds0624rg/providers/Microsoft.ContainerInstance/containerGroups/64lxews2qfa5uazscripts",
      "storageAccountId": "/subscriptions/aaaabbbb-0000-cccc-1111-dddd2222eeee/resourceGroups/myds0624rg/providers/Microsoft.Storage/storageAccounts/64lxews2qfa5uazscripts",
      "startTime": "2023-05-11T02:59:07.5951401Z",
      "endTime": "2023-05-11T03:00:16.7969234Z",
      "expirationTime": "2023-05-12T03:00:16.7969234Z"
    },
    "outputs": {
      "text": "Hello John Dole"
    },
    "cleanupPreference": "OnSuccess"
  },
  "id": "/subscriptions/aaaabbbb-0000-cccc-1111-dddd2222eeee/resourceGroups/myds0624rg/providers/Microsoft.Resources/deploymentScripts/runPowerShellInlineWithOutput",
  "type": "Microsoft.Resources/deploymentScripts",
  "name": "runPowerShellInlineWithOutput"
}
{
  "kind": "AzurePowerShell",
  "identity": {
    "type": "userAssigned",
    "tenantId": "aaaabbbb-0000-cccc-1111-dddd2222eeee",
    "userAssignedIdentities": {
      "/subscriptions/aaaabbbb-0000-cccc-1111-dddd2222eeee/resourceGroups/myidentity1008rg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myuami": {
        "principalId": "aaaabbbb-0000-cccc-1111-dddd2222eeee",
        "clientId": "00001111-aaaa-2222-bbbb-3333cccc4444"
      }
    }
  },
  "location": "centralus",
  "systemData": {
    "createdBy": "someone@contoso.com",
    "createdByType": "User",
    "createdAt": "2023-05-11T02:59:04.7501955Z",
    "lastModifiedBy": "someone@contoso.com",
    "lastModifiedByType": "User",
    "lastModifiedAt": "2023-05-11T02:59:04.7501955Z"
  },
  "properties": {
    "provisioningState": "Succeeded",
    "forceUpdateTag": "20220625T025902Z",
    "azPowerShellVersion": "9.7",
    "scriptContent": "\r\n          param([string] $name)\r\n          $output = \"Hello {0}\" -f $name\r\n          Write-Output $output\r\n          $DeploymentScriptOutputs = @{}\r\n          $DeploymentScriptOutputs['text'] = $output\r\n        ",
    "arguments": "-name \\\"John Dole\\\"",
    "retentionInterval": "P1D",
    "timeout": "PT1H",
    "containerSettings": {},
    "status": {
      "containerInstanceId": "/subscriptions/aaaabbbb-0000-cccc-1111-dddd2222eeee/resourceGroups/myds0624rg/providers/Microsoft.ContainerInstance/containerGroups/64lxews2qfa5uazscripts",
      "storageAccountId": "/subscriptions/aaaabbbb-0000-cccc-1111-dddd2222eeee/resourceGroups/myds0624rg/providers/Microsoft.Storage/storageAccounts/64lxews2qfa5uazscripts",
      "startTime": "2023-05-11T02:59:07.5951401Z",
      "endTime": "2023-05-11T03:00:16.7969234Z",
      "expirationTime": "2023-05-12T03:00:16.7969234Z"
    },
    "outputs": {
      "text": "Hello John Dole"
    },
    "cleanupPreference": "OnSuccess"
  },
  "id": "/subscriptions/aaaabbbb-0000-cccc-1111-dddd2222eeee/resourceGroups/myds0624rg/providers/Microsoft.Resources/deploymentScripts/runPowerShellInlineWithOutput",
  "type": "Microsoft.Resources/deploymentScripts",
  "name": "runPowerShellInlineWithOutput"
}
The following REST API returns the log:
/subscriptions/<SubscriptionID>/resourcegroups/<ResourceGroupName>/providers/microsoft.resources/deploymentScripts/<DeploymentScriptResourceName>/logs?api-version=2020-10-01
/subscriptions/<SubscriptionID>/resourcegroups/<ResourceGroupName>/providers/microsoft.resources/deploymentScripts/<DeploymentScriptResourceName>/logs?api-version=2020-10-01
It only works before the deployment script resources are deleted.
To see the deploymentScripts resource in the portal, selectShow hidden types:

Clean up deployment script resources
The two automatically created supporting resources can never outlive thedeploymentScriptresource, unless there are failures deleting them. The life cycle of the supporting resources is controlled by thecleanupPreferenceproperty, the life cycle of thedeploymentScriptresource is controlled by theretentionIntervalproperty:
deploymentScript
cleanupPreference
deploymentScript
retentionInterval
cleanupPreference: Specify the clean-up preference of the two supporting resources when the script execution gets in a terminal state. The supported values are:Always: Delete the two supporting resources once script execution gets in a terminal state. If an existing storage account is used, the script service deletes the file share created by the service. Because thedeploymentScriptsresource might still be present after the supporting resources are cleaned up, the script service persists the script execution results, for example, stdout, outputs, and return value before the resources are deleted.OnSuccess: Delete the two supporting resources only when the script execution is successful. If an existing storage account is used, the script service removes the file share only when the script execution is successful.If the script execution isn't successful, the script service waits until theretentionIntervalexpires before it cleans up the supporting resources and then the deployment script resource.OnExpiration: Delete the two supporting resources only when theretentionIntervalsetting is expired. If an existing storage account is used, the script service removes the file share, but retains the storage account.The container instance and storage account are deleted according to thecleanupPreference. However, if the script fails andcleanupPreferenceisn't set toAlways, the deployment process automatically keeps the container running for one hour or until the container is cleaned up. You can use the time to troubleshoot the script. If you want to keep the container running after successful deployments, add a sleep step to your script. For example, addStart-Sleepto the end of your script. If you don't add the sleep step, the container is set to a terminal state and can't be accessed even if it hasn't been deleted yet.
cleanupPreference: Specify the clean-up preference of the two supporting resources when the script execution gets in a terminal state. The supported values are:
cleanupPreference
Always: Delete the two supporting resources once script execution gets in a terminal state. If an existing storage account is used, the script service deletes the file share created by the service. Because thedeploymentScriptsresource might still be present after the supporting resources are cleaned up, the script service persists the script execution results, for example, stdout, outputs, and return value before the resources are deleted.
Always: Delete the two supporting resources once script execution gets in a terminal state. If an existing storage account is used, the script service deletes the file share created by the service. Because thedeploymentScriptsresource might still be present after the supporting resources are cleaned up, the script service persists the script execution results, for example, stdout, outputs, and return value before the resources are deleted.
deploymentScripts
OnSuccess: Delete the two supporting resources only when the script execution is successful. If an existing storage account is used, the script service removes the file share only when the script execution is successful.If the script execution isn't successful, the script service waits until theretentionIntervalexpires before it cleans up the supporting resources and then the deployment script resource.
OnSuccess: Delete the two supporting resources only when the script execution is successful. If an existing storage account is used, the script service removes the file share only when the script execution is successful.
If the script execution isn't successful, the script service waits until theretentionIntervalexpires before it cleans up the supporting resources and then the deployment script resource.
retentionInterval
OnExpiration: Delete the two supporting resources only when theretentionIntervalsetting is expired. If an existing storage account is used, the script service removes the file share, but retains the storage account.
OnExpiration: Delete the two supporting resources only when theretentionIntervalsetting is expired. If an existing storage account is used, the script service removes the file share, but retains the storage account.
retentionInterval
The container instance and storage account are deleted according to thecleanupPreference. However, if the script fails andcleanupPreferenceisn't set toAlways, the deployment process automatically keeps the container running for one hour or until the container is cleaned up. You can use the time to troubleshoot the script. If you want to keep the container running after successful deployments, add a sleep step to your script. For example, addStart-Sleepto the end of your script. If you don't add the sleep step, the container is set to a terminal state and can't be accessed even if it hasn't been deleted yet.
cleanupPreference
cleanupPreference
retentionInterval: Specify the time interval that adeploymentScriptresource will be retained and after which will be expired and deleted.
retentionInterval: Specify the time interval that adeploymentScriptresource will be retained and after which will be expired and deleted.
retentionInterval
deploymentScript
Note
It isn't recommended to use the storage account and the container instance that are generated by the script service for other purposes. The two resources might be removed depending on the script life cycle.
The automatically created storage account and container instance can't be deleted if the deployment script is deployed to a resource group with aCanNotDelete lock. To solve this problem, you can deploy the deployment script to another resource group without locks. See Sample 4 and Sample 5 inSample templates.
Run script more than once
Deployment script execution is an idempotent operation. If none of thedeploymentScriptsresource properties (including the inline script) are changed, the script doesn't execute when you redeploy the template. The deployment script service compares the resource names in the template with the existing resources in the same resource group. There are two options if you want to execute the same deployment script multiple times:
deploymentScripts
Change the name of yourdeploymentScriptsresource. For example, use theutcNowtemplate function as the resource name or as a part of the resource name. Changing the resource name creates a newdeploymentScriptsresource. It's good for keeping a history of script execution.NoteTheutcNowfunction can only be used in the default value for a parameter.
Change the name of yourdeploymentScriptsresource. For example, use theutcNowtemplate function as the resource name or as a part of the resource name. Changing the resource name creates a newdeploymentScriptsresource. It's good for keeping a history of script execution.
deploymentScripts
deploymentScripts
Note
TheutcNowfunction can only be used in the default value for a parameter.
utcNow
Specify a different value in theforceUpdateTagtemplate property. For example, useutcNowas the value.
Specify a different value in theforceUpdateTagtemplate property. For example, useutcNowas the value.
forceUpdateTag
utcNow
Note
Write the deployment scripts that are idempotent. This ensures that if they run again accidentally, it will not cause system changes. For example, if the deployment script is used to create an Azure resource, verify the resource doesn't exist before creating it, so the script will succeed or you don't create the resource again.
Configure development environment
You can use a preconfigured container image as your deployment script development environment. For more information, seeConfigure development environment for deployment scripts in templates.
After the script is tested successfully, you can use it as a deployment script in your templates.
Deployment script error codes
Use Microsoft Graph within a deployment script
A deployment script can useMicrosoft Graphto create and work with objects in Microsoft Entra ID.
Commands
When you use Azure CLI deployment scripts, you can use commands within theaz adcommand group to work with applications, service principals, groups, and users. You can also directly invoke Microsoft Graph APIs by using theaz restcommand.
az ad
az rest
When you use Azure PowerShell deployment scripts, you can use theInvoke-RestMethodcmdlet to directly invoke the Microsoft Graph APIs.
Invoke-RestMethod
Permissions
The identity that your deployment script uses needs to be authorized to work with the Microsoft Graph API, with the appropriate permissions for the operations it performs. You must authorize the identity outside of your template deployment, such as by precreating a user-assigned managed identity and assigning it an app role for Microsoft Graph. For more information,see this quickstart example.
Access private virtual network
With Microsoft.Resources/deploymentScripts version 2023-08-01, you can run deployment scripts in private networks with some additional configurations.
Create a user-assigned managed identity, and specify it in theidentityproperty. To assign the identity, seeIdentity.
Create a user-assigned managed identity, and specify it in theidentityproperty. To assign the identity, seeIdentity.
identity
Create a storage account withallowSharedKeyAccessset totrue, and specify the deployment script to use the existing storage account. To specify an existing storage account, seeUse existing storage account. Some additional configuration is required for the storage account.Open the storage account in theAzure portal.From the left menu, selectAccess Control (IAM), and then select theRole assignmentstab.Add theStorage File Data Privileged Contributorrole to the user-assignment managed identity.From the left menu, underSecurity + networking, selectNetworking, and then selectFirewalls and virtual networks.SelectEnabled from selected virtual networks and IP addresses.UnderVirtual networks, add a subnet. On the screenshot, the subnet is calleddspvnVnet.UnderExceptions, selectAllow Azure services on the trusted services list to access this storage account.
Create a storage account withallowSharedKeyAccessset totrue, and specify the deployment script to use the existing storage account. To specify an existing storage account, seeUse existing storage account. Some additional configuration is required for the storage account.
allowSharedKeyAccess
true
Open the storage account in theAzure portal.
Open the storage account in theAzure portal.
From the left menu, selectAccess Control (IAM), and then select theRole assignmentstab.
From the left menu, selectAccess Control (IAM), and then select theRole assignmentstab.
Add theStorage File Data Privileged Contributorrole to the user-assignment managed identity.
Add theStorage File Data Privileged Contributorrole to the user-assignment managed identity.
Storage File Data Privileged Contributor
From the left menu, underSecurity + networking, selectNetworking, and then selectFirewalls and virtual networks.
From the left menu, underSecurity + networking, selectNetworking, and then selectFirewalls and virtual networks.
SelectEnabled from selected virtual networks and IP addresses.
SelectEnabled from selected virtual networks and IP addresses.

UnderVirtual networks, add a subnet. On the screenshot, the subnet is calleddspvnVnet.
UnderVirtual networks, add a subnet. On the screenshot, the subnet is calleddspvnVnet.
UnderExceptions, selectAllow Azure services on the trusted services list to access this storage account.
UnderExceptions, selectAllow Azure services on the trusted services list to access this storage account.
The following ARM template shows how to configure the environment for running a deployment script:
{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "prefix": {
      "type": "string",
      "maxLength": 10
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]"
    },
    "userAssignedIdentityName": {
      "type": "string",
      "defaultValue": "[format('{0}Identity', parameters('prefix'))]"
    },
    "storageAccountName": {
      "type": "string",
      "defaultValue": "[format('{0}stg{1}', parameters('prefix'), uniqueString(resourceGroup().id))]"
    },
    "vnetName": {
      "type": "string",
      "defaultValue": "[format('{0}Vnet', parameters('prefix'))]"
    },
    "subnetName": {
      "type": "string",
      "defaultValue": "[format('{0}Subnet', parameters('prefix'))]"
    }
  },
  "resources": [
    {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2023-09-01",
      "name": "[parameters('vnetName')]",
      "location": "[parameters('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "10.0.0.0/16"
          ]
        },
        "enableDdosProtection": false,
        "subnets": [
          {
            "name": "[parameters('subnetName')]",
            "properties": {
              "addressPrefix": "10.0.0.0/24",
              "serviceEndpoints": [
                {
                  "service": "Microsoft.Storage"
                }
              ],
              "delegations": [
                {
                  "name": "Microsoft.ContainerInstance.containerGroups",
                  "properties": {
                    "serviceName": "Microsoft.ContainerInstance/containerGroups"
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2023-01-01",
      "name": "[parameters('storageAccountName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2",
      "properties": {
        "networkAcls": {
          "bypass": "AzureServices",
          "virtualNetworkRules": [
            {
              "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]",
              "action": "Allow",
              "state": "Succeeded"
            }
          ],
          "defaultAction": "Deny"
        },
        "allowSharedKeyAccess": true
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
      ]
    },
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2023-07-31-preview",
      "name": "[parameters('userAssignedIdentityName')]",
      "location": "[parameters('location')]"
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
      "name": "[guid(tenantResourceId('Microsoft.Authorization/roleDefinitions', '69566ab7-960f-475b-8e7c-b3118f30c6bd'), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')))]",
      "properties": {
        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName')), '2023-07-31-preview').principalId]",
        "roleDefinitionId": "[tenantResourceId('Microsoft.Authorization/roleDefinitions', '69566ab7-960f-475b-8e7c-b3118f30c6bd')]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName'))]"
      ]
    }
  ]
}
{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "prefix": {
      "type": "string",
      "maxLength": 10
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]"
    },
    "userAssignedIdentityName": {
      "type": "string",
      "defaultValue": "[format('{0}Identity', parameters('prefix'))]"
    },
    "storageAccountName": {
      "type": "string",
      "defaultValue": "[format('{0}stg{1}', parameters('prefix'), uniqueString(resourceGroup().id))]"
    },
    "vnetName": {
      "type": "string",
      "defaultValue": "[format('{0}Vnet', parameters('prefix'))]"
    },
    "subnetName": {
      "type": "string",
      "defaultValue": "[format('{0}Subnet', parameters('prefix'))]"
    }
  },
  "resources": [
    {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2023-09-01",
      "name": "[parameters('vnetName')]",
      "location": "[parameters('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "10.0.0.0/16"
          ]
        },
        "enableDdosProtection": false,
        "subnets": [
          {
            "name": "[parameters('subnetName')]",
            "properties": {
              "addressPrefix": "10.0.0.0/24",
              "serviceEndpoints": [
                {
                  "service": "Microsoft.Storage"
                }
              ],
              "delegations": [
                {
                  "name": "Microsoft.ContainerInstance.containerGroups",
                  "properties": {
                    "serviceName": "Microsoft.ContainerInstance/containerGroups"
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2023-01-01",
      "name": "[parameters('storageAccountName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2",
      "properties": {
        "networkAcls": {
          "bypass": "AzureServices",
          "virtualNetworkRules": [
            {
              "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]",
              "action": "Allow",
              "state": "Succeeded"
            }
          ],
          "defaultAction": "Deny"
        },
        "allowSharedKeyAccess": true
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
      ]
    },
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2023-07-31-preview",
      "name": "[parameters('userAssignedIdentityName')]",
      "location": "[parameters('location')]"
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
      "name": "[guid(tenantResourceId('Microsoft.Authorization/roleDefinitions', '69566ab7-960f-475b-8e7c-b3118f30c6bd'), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName')), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')))]",
      "properties": {
        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName')), '2023-07-31-preview').principalId]",
        "roleDefinitionId": "[tenantResourceId('Microsoft.Authorization/roleDefinitions', '69566ab7-960f-475b-8e7c-b3118f30c6bd')]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName'))]"
      ]
    }
  ]
}
You can use the following ARM template to test the deployment:
{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "prefix": {
      "type": "string"
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]"
    },
    "utcValue": {
      "type": "string",
      "defaultValue": "[utcNow()]"
    },
    "storageAccountName": {
      "type": "string"
    },
    "vnetName": {
      "type": "string"
    },
    "subnetName": {
      "type": "string"
    },
    "userAssignedIdentityName": {
      "type": "string"
    }
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2023-08-01",
      "name": "[format('{0}DS', parameters('prefix'))]",
      "location": "[parameters('location')]",
      "identity": {
        "type": "userAssigned",
        "userAssignedIdentities": {
          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName')))]": {}
        }
      },
      "kind": "AzureCLI",
      "properties": {
        "forceUpdateTag": "[parameters('utcValue')]",
        "azCliVersion": "2.47.0",
        "storageAccountSettings": {
          "storageAccountName": "[parameters('storageAccountName')]"
        },
        "containerSettings": {
          "subnetIds": [
            {
              "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]"
            }
          ]
        },
        "scriptContent": "echo \"Hello world!\"",
        "retentionInterval": "P1D",
        "cleanupPreference": "OnExpiration"
      }
    }
  ]
}
{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "prefix": {
      "type": "string"
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]"
    },
    "utcValue": {
      "type": "string",
      "defaultValue": "[utcNow()]"
    },
    "storageAccountName": {
      "type": "string"
    },
    "vnetName": {
      "type": "string"
    },
    "subnetName": {
      "type": "string"
    },
    "userAssignedIdentityName": {
      "type": "string"
    }
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2023-08-01",
      "name": "[format('{0}DS', parameters('prefix'))]",
      "location": "[parameters('location')]",
      "identity": {
        "type": "userAssigned",
        "userAssignedIdentities": {
          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName')))]": {}
        }
      },
      "kind": "AzureCLI",
      "properties": {
        "forceUpdateTag": "[parameters('utcValue')]",
        "azCliVersion": "2.47.0",
        "storageAccountSettings": {
          "storageAccountName": "[parameters('storageAccountName')]"
        },
        "containerSettings": {
          "subnetIds": [
            {
              "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]"
            }
          ]
        },
        "scriptContent": "echo \"Hello world!\"",
        "retentionInterval": "P1D",
        "cleanupPreference": "OnExpiration"
      }
    }
  ]
}
Next steps
In this article, you learned how to use deployment scripts. To walk through a deployment script tutorial:
Tutorial: Use deployment scripts in Azure Resource Manager templates
Learn module: Extend ARM templates by using deployment scripts
Feedback
Was this page helpful?
Additional resources