Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Databricks Utilities (dbutils) reference
dbutils
Article
2024-12-31
8 contributors
In this article
This article contains reference for Databricks Utilities (dbutils). The utilities provide commands that enable you to work with your Databricks environment from notebooks. For example, you can manage files and object storage, and work with secrets.dbutilsare available in Python, R, and Scala notebooks.
dbutils
dbutils
Note
dbutilsonly supports compute environments that use DBFS.
dbutils
Utility modules
The following table lists the Databricks Utilities modules, which you can retrieve usingdbutils.help().
dbutils.help()
Command help
To list commands for a utility module along with a short description of each command, append.help()after the name of the utility module. The following example lists available commands for the notebook utility:
.help()
dbutils.notebook.help()
dbutils.notebook.help()
The notebook module.

exit(value: String): void -> This method lets you exit a notebook with a value
run(path: String, timeoutSeconds: int, arguments: Map): String -> This method runs a notebook and returns its exit value
The notebook module.

exit(value: String): void -> This method lets you exit a notebook with a value
run(path: String, timeoutSeconds: int, arguments: Map): String -> This method runs a notebook and returns its exit value
To output help for a command, rundbutils.<utility-name>.help("<command-name>"). The following example displays help for the file system utilities copy command,dbutils.fs.cp:
dbutils.<utility-name>.help("<command-name>")
dbutils.fs.cp
dbutils.fs.help("cp")
dbutils.fs.help("cp")
/**
* Copies a file or directory, possibly across FileSystems.
*
* Example: cp("/mnt/my-folder/a", "dbfs:/a/b")
*
* @param from FileSystem URI of the source file or directory
* @param to FileSystem URI of the destination file or directory
* @param recurse if true, all files and directories will be recursively copied
* @return true if all files were successfully copied
*/
cp(from: java.lang.String, to: java.lang.String, recurse: boolean = false): boolean
/**
* Copies a file or directory, possibly across FileSystems.
*
* Example: cp("/mnt/my-folder/a", "dbfs:/a/b")
*
* @param from FileSystem URI of the source file or directory
* @param to FileSystem URI of the destination file or directory
* @param recurse if true, all files and directories will be recursively copied
* @return true if all files were successfully copied
*/
cp(from: java.lang.String, to: java.lang.String, recurse: boolean = false): boolean
Data utility (dbutils.data)
Important
This feature is inPublic Preview.
Note
Available in Databricks Runtime 9.0 and above.
The data utility allows you to understand and interact with datasets.
The following table lists the available commands for this utility, which you can retrieve usingdbutils.data.help().
dbutils.data.help()
summarize command (dbutils.data.summarize)
Note
This feature is inPublic Preview.
summarize(df: Object, precise: boolean): void
summarize(df: Object, precise: boolean): void
Calculates and displays summary statistics of an Apache Spark DataFrame or pandas DataFrame. This command is available for Python, Scala and R.
Important
This command analyzes the complete contents of the DataFrame. Running this command for very large DataFrames can be very expensive.
To display complete help for this command, run:
dbutils.data.help("summarize")
dbutils.data.help("summarize")
In Databricks Runtime 10.4 LTS and above, you can use the additionalpreciseparameter to adjust the precision of the computed statistics.
precise
Whenpreciseis set to false (the default), some returned statistics include approximations to reduce run time.The number of distinct values for categorical columns may have ~5% relative error for high-cardinality columns.The frequent value counts may have an error of up to 0.01% when the number of distinct values is greater than 10000.The histograms and percentile estimates may have an error of up to 0.01% relative to the total number of rows.
precise
The number of distinct values for categorical columns may have ~5% relative error for high-cardinality columns.
The frequent value counts may have an error of up to 0.01% when the number of distinct values is greater than 10000.
The histograms and percentile estimates may have an error of up to 0.01% relative to the total number of rows.
Whenpreciseis set to true, the statistics are computed with higher precision. All statistics except for the histograms and percentiles for numeric columns are now exact.The histograms and percentile estimates may have an error of up to 0.0001% relative to the total number of rows.
precise
The histograms and percentile estimates may have an error of up to 0.0001% relative to the total number of rows.
The tooltip at the top of the data summary output indicates the mode of the current run.
This example displays summary statistics for an Apache Spark DataFrame with approximations enabled by default. To see the
results, run this command in a notebook. This example is based onSample datasets.
df = spark.read.format('csv').load(
  '/databricks-datasets/Rdatasets/data-001/csv/ggplot2/diamonds.csv',
  header=True,
  inferSchema=True
)
dbutils.data.summarize(df)
df = spark.read.format('csv').load(
  '/databricks-datasets/Rdatasets/data-001/csv/ggplot2/diamonds.csv',
  header=True,
  inferSchema=True
)
dbutils.data.summarize(df)
df <- read.df("/databricks-datasets/Rdatasets/data-001/csv/ggplot2/diamonds.csv", source = "csv", header="true", inferSchema = "true")
dbutils.data.summarize(df)
df <- read.df("/databricks-datasets/Rdatasets/data-001/csv/ggplot2/diamonds.csv", source = "csv", header="true", inferSchema = "true")
dbutils.data.summarize(df)
val df = spark.read.format("csv")
  .option("inferSchema", "true")
  .option("header", "true")
  .load("/databricks-datasets/Rdatasets/data-001/csv/ggplot2/diamonds.csv")
dbutils.data.summarize(df)
val df = spark.read.format("csv")
  .option("inferSchema", "true")
  .option("header", "true")
  .load("/databricks-datasets/Rdatasets/data-001/csv/ggplot2/diamonds.csv")
dbutils.data.summarize(df)
The visualization usesSI notationto concisely render numerical values smaller than 0.01 or larger than 10000. As an example, the numerical value1.25e-15will be rendered as1.25f. One exception: the visualization uses âBâ for1.0e9(giga) instead of âGâ.
1.25e-15
1.25f
B
1.0e9
G
File system utility (dbutils.fs)
The file system utility allows you to accessWhat is DBFS?. To accessworkspace files, use shell commands such as%sh ls, as there are somelimitationswhen usingdbutils.fscommands with workspace files.
%sh ls
dbutils.fs
Warning
The Python implementation of alldbutils.fsmethods usessnake_caserather thancamelCasefor keyword formatting.
dbutils.fs
snake_case
camelCase
For example,dbutils.fs.help()displays the optionextraConfigsfordbutils.fs.mount(). However, in Python you would use the keywordextra_configs.
dbutils.fs.help()
extraConfigs
dbutils.fs.mount()
extra_configs
The following table lists the available commands for this utility, which you can retrieve usingdbutils.fs.help().
dbutils.fs.help()
Tip
In notebooks, you can use the%fsmagic command to access DBFS. For example,%fs ls /Volumes/main/default/my-volume/is the same asdbutils.fs.ls("/Volumes/main/default/my-volume/"). Seemagic commands.
%fs
%fs ls /Volumes/main/default/my-volume/
dbutils.fs.ls("/Volumes/main/default/my-volume/")
cp command (dbutils.fs.cp)
cp(from: String, to: String, recurse: boolean = false): boolean
cp(from: String, to: String, recurse: boolean = false): boolean
Copies a file or directory, possibly across filesystems.
To display complete help for this command, run:
dbutils.fs.help("cp")
dbutils.fs.help("cp")
This example copies the file nameddata.csvfrom/Volumes/main/default/my-volume/tonew-data.csvin the same volume.
data.csv
/Volumes/main/default/my-volume/
new-data.csv
dbutils.fs.cp("/Volumes/main/default/my-volume/data.csv", "/Volumes/main/default/my-volume/new-data.csv")

# Out[4]: True
dbutils.fs.cp("/Volumes/main/default/my-volume/data.csv", "/Volumes/main/default/my-volume/new-data.csv")

# Out[4]: True
dbutils.fs.cp("/Volumes/main/default/my-volume/data.csv", "/Volumes/main/default/my-volume/new-data.csv")

# [1] TRUE
dbutils.fs.cp("/Volumes/main/default/my-volume/data.csv", "/Volumes/main/default/my-volume/new-data.csv")

# [1] TRUE
dbutils.fs.cp("/Volumes/main/default/my-volume/data.csv", "/Volumes/main/default/my-volume/new-data.csv")

// res3: Boolean = true
dbutils.fs.cp("/Volumes/main/default/my-volume/data.csv", "/Volumes/main/default/my-volume/new-data.csv")

// res3: Boolean = true
head command (dbutils.fs.head)
head(file: String, maxBytes: int = 65536): String
head(file: String, maxBytes: int = 65536): String
Returns up to the specified maximum number of bytes in the given file. The bytes are returned as a UTF-8 encoded string.
To display complete help for this command, run:
dbutils.fs.help("head")
dbutils.fs.help("head")
This example displays the first 25 bytes of the filedata.csvlocated in/Volumes/main/default/my-volume/.
data.csv
/Volumes/main/default/my-volume/
dbutils.fs.head("/Volumes/main/default/my-volume/data.csv", 25)

# [Truncated to first 25 bytes]
# Out[12]: 'Year,First Name,County,Se'
dbutils.fs.head("/Volumes/main/default/my-volume/data.csv", 25)

# [Truncated to first 25 bytes]
# Out[12]: 'Year,First Name,County,Se'
dbutils.fs.head("/Volumes/main/default/my-volume/data.csv", 25)

# [1] "Year,First Name,County,Se"
dbutils.fs.head("/Volumes/main/default/my-volume/data.csv", 25)

# [1] "Year,First Name,County,Se"
dbutils.fs.head("/Volumes/main/default/my-volume/data.csv", 25)

// [Truncated to first 25 bytes]
// res4: String =
// "Year,First Name,County,Se"
dbutils.fs.head("/Volumes/main/default/my-volume/data.csv", 25)

// [Truncated to first 25 bytes]
// res4: String =
// "Year,First Name,County,Se"
ls command (dbutils.fs.ls)
ls(dir: String): Seq
ls(dir: String): Seq
Lists the contents of a directory.
To display complete help for this command, run:
dbutils.fs.help("ls")
dbutils.fs.help("ls")
This example displays information about the contents of/Volumes/main/default/my-volume/. ThemodificationTimefield is available in Databricks Runtime 10.4 LTS and above. In R,modificationTimeis returned as a string.
/Volumes/main/default/my-volume/
modificationTime
modificationTime
dbutils.fs.ls("/Volumes/main/default/my-volume/")

# Out[13]: [FileInfo(path='dbfs:/Volumes/main/default/my-volume/data.csv', name='data.csv', size=2258987, modificationTime=1711357839000)]
dbutils.fs.ls("/Volumes/main/default/my-volume/")

# Out[13]: [FileInfo(path='dbfs:/Volumes/main/default/my-volume/data.csv', name='data.csv', size=2258987, modificationTime=1711357839000)]
dbutils.fs.ls("/Volumes/main/default/my-volume/")

# For prettier results from dbutils.fs.ls(<dir>), please use `%fs ls <dir>`

# [[1]]
# [[1]]$path
# [1] "/Volumes/main/default/my-volume/data.csv"

# [[1]]$name
# [1] "data.csv"

# [[1]]$size
# [1] 2258987

# [[1]]$isDir
# [1] FALSE

# [[1]]$isFile
# [1] TRUE

# [[1]]$modificationTime
# [1] "1711357839000"
dbutils.fs.ls("/Volumes/main/default/my-volume/")

# For prettier results from dbutils.fs.ls(<dir>), please use `%fs ls <dir>`

# [[1]]
# [[1]]$path
# [1] "/Volumes/main/default/my-volume/data.csv"

# [[1]]$name
# [1] "data.csv"

# [[1]]$size
# [1] 2258987

# [[1]]$isDir
# [1] FALSE

# [[1]]$isFile
# [1] TRUE

# [[1]]$modificationTime
# [1] "1711357839000"
dbutils.fs.ls("/tmp")

// res6: Seq[com.databricks.backend.daemon.dbutils.FileInfo] = WrappedArray(FileInfo(/Volumes/main/default/my-volume/data.csv, 2258987, 1711357839000))
dbutils.fs.ls("/tmp")

// res6: Seq[com.databricks.backend.daemon.dbutils.FileInfo] = WrappedArray(FileInfo(/Volumes/main/default/my-volume/data.csv, 2258987, 1711357839000))
mkdirs command (dbutils.fs.mkdirs)
mkdirs(dir: String): boolean
mkdirs(dir: String): boolean
Creates the given directory if it does not exist. Also creates any necessary parent directories.
To display complete help for this command, run:
dbutils.fs.help("mkdirs")
dbutils.fs.help("mkdirs")
This example creates the directorymy-datawithin/Volumes/main/default/my-volume/.
my-data
/Volumes/main/default/my-volume/
dbutils.fs.mkdirs("/Volumes/main/default/my-volume/my-data")

# Out[15]: True
dbutils.fs.mkdirs("/Volumes/main/default/my-volume/my-data")

# Out[15]: True
dbutils.fs.mkdirs("/Volumes/main/default/my-volume/my-data")

# [1] TRUE
dbutils.fs.mkdirs("/Volumes/main/default/my-volume/my-data")

# [1] TRUE
dbutils.fs.mkdirs("/Volumes/main/default/my-volume/my-data")

// res7: Boolean = true
dbutils.fs.mkdirs("/Volumes/main/default/my-volume/my-data")

// res7: Boolean = true
mount command (dbutils.fs.mount)
mount(source: String, mountPoint: String, encryptionType: String = "",owner: String = null, extraConfigs: Map = Map.empty[String, String]): boolean
mount(source: String, mountPoint: String, encryptionType: String = "",
owner: String = null, extraConfigs: Map = Map.empty[String, String]): boolean
Mounts the specified source directory into DBFS at the specified mount point.
To display complete help for this command, run:
dbutils.fs.help("mount")
dbutils.fs.help("mount")
dbutils.fs.mount(
  source = "wasbs://<container-name>@<storage-account-name>.blob.core.windows.net",
  mount_point = "/mnt/<mount-name>",
  extra_configs = {"<conf-key>":dbutils.secrets.get(scope = "<scope-name>", key = "<key-name>")})
dbutils.fs.mount(
  source = "wasbs://<container-name>@<storage-account-name>.blob.core.windows.net",
  mount_point = "/mnt/<mount-name>",
  extra_configs = {"<conf-key>":dbutils.secrets.get(scope = "<scope-name>", key = "<key-name>")})
dbutils.fs.mount(
  source = "wasbs://<container-name>@<storage-account-name>.blob.core.windows.net/<directory-name>",
  mountPoint = "/mnt/<mount-name>",
  extraConfigs = Map("<conf-key>" -> dbutils.secrets.get(scope = "<scope-name>", key = "<key-name>")))
dbutils.fs.mount(
  source = "wasbs://<container-name>@<storage-account-name>.blob.core.windows.net/<directory-name>",
  mountPoint = "/mnt/<mount-name>",
  extraConfigs = Map("<conf-key>" -> dbutils.secrets.get(scope = "<scope-name>", key = "<key-name>")))
For additional code examples, seeConnect to Azure Data Lake Storage and Blob Storage.
mounts command (dbutils.fs.mounts)
mounts: Seq
mounts: Seq
Displays information about what is currently mounted within DBFS.
To display complete help for this command, run:
dbutils.fs.help("mounts")
dbutils.fs.help("mounts")
Warning
Calldbutils.fs.refreshMounts()on all other running clusters to propagate the new mount. SeerefreshMounts command (dbutils.fs.refreshMounts).
dbutils.fs.refreshMounts()
dbutils.fs.mounts()
dbutils.fs.mounts()
dbutils.fs.mounts()
dbutils.fs.mounts()
For additional code examples, seeConnect to Azure Data Lake Storage and Blob Storage.
mv command (dbutils.fs.mv)
mv(from: String, to: String, recurse: boolean = false): boolean
mv(from: String, to: String, recurse: boolean = false): boolean
Moves a file or directory, possibly across filesystems. A move is a copy followed by a delete, even for moves within filesystems.
To display complete help for this command, run:
dbutils.fs.help("mv")
dbutils.fs.help("mv")
This example moves the filerows.csvfrom/Volumes/main/default/my-volume/to/Volumes/main/default/my-volume/my-data/.
rows.csv
/Volumes/main/default/my-volume/
/Volumes/main/default/my-volume/my-data/
dbutils.fs.mv("/Volumes/main/default/my-volume/rows.csv", "/Volumes/main/default/my-volume/my-data/")

# Out[2]: True
dbutils.fs.mv("/Volumes/main/default/my-volume/rows.csv", "/Volumes/main/default/my-volume/my-data/")

# Out[2]: True
dbutils.fs.mv("/Volumes/main/default/my-volume/rows.csv", "/Volumes/main/default/my-volume/my-data/")

# [1] TRUE
dbutils.fs.mv("/Volumes/main/default/my-volume/rows.csv", "/Volumes/main/default/my-volume/my-data/")

# [1] TRUE
dbutils.fs.mv("/Volumes/main/default/my-volume/rows.csv", "/Volumes/main/default/my-volume/my-data/")

// res1: Boolean = true
dbutils.fs.mv("/Volumes/main/default/my-volume/rows.csv", "/Volumes/main/default/my-volume/my-data/")

// res1: Boolean = true
put command (dbutils.fs.put)
put(file: String, contents: String, overwrite: boolean = false): boolean
put(file: String, contents: String, overwrite: boolean = false): boolean
Writes the specified string to a file. The string is UTF-8 encoded.
To display complete help for this command, run:
dbutils.fs.help("put")
dbutils.fs.help("put")
This example writes the stringHello, Databricks!to a file namedhello.txtin/Volumes/main/default/my-volume/. If the file exists, it will be overwritten.
Hello, Databricks!
hello.txt
/Volumes/main/default/my-volume/
dbutils.fs.put("/Volumes/main/default/my-volume/hello.txt", "Hello, Databricks!", True)

# Wrote 2258987 bytes.
# Out[6]: True
dbutils.fs.put("/Volumes/main/default/my-volume/hello.txt", "Hello, Databricks!", True)

# Wrote 2258987 bytes.
# Out[6]: True
dbutils.fs.put("/Volumes/main/default/my-volume/hello.txt", "Hello, Databricks!", TRUE)

# [1] TRUE
dbutils.fs.put("/Volumes/main/default/my-volume/hello.txt", "Hello, Databricks!", TRUE)

# [1] TRUE
dbutils.fs.put("/Volumes/main/default/my-volume/hello.txt", "Hello, Databricks!", true)

// Wrote 2258987 bytes.
// res2: Boolean = true
dbutils.fs.put("/Volumes/main/default/my-volume/hello.txt", "Hello, Databricks!", true)

// Wrote 2258987 bytes.
// res2: Boolean = true
refreshMounts command (dbutils.fs.refreshMounts)
refreshMounts: boolean
refreshMounts: boolean
Forces all machines in the cluster to refresh their mount cache, ensuring they receive the most recent information.
To display complete help for this command, run:
dbutils.fs.help("refreshMounts")
dbutils.fs.help("refreshMounts")
dbutils.fs.refreshMounts()
dbutils.fs.refreshMounts()
dbutils.fs.refreshMounts()
dbutils.fs.refreshMounts()
For additiional code examples, seeConnect to Azure Data Lake Storage and Blob Storage.
rm command (dbutils.fs.rm)
rm(dir: String, recurse: boolean = false): boolean
rm(dir: String, recurse: boolean = false): boolean
Removes a file or directory and, optionally, all of its contents. If a file is specified, therecurseparameter is ignored. If a directory is specified, an error occurs whenrecurseis disabled and the directory is not empty.
recurse
recurse
To display complete help for this command, run:
dbutils.fs.help("rm")
dbutils.fs.help("rm")
This example removes the entire directory/Volumes/main/default/my-volume/my-data/including its contents.
/Volumes/main/default/my-volume/my-data/
dbutils.fs.rm("/Volumes/main/default/my-volume/my-data/", True)

# Out[8]: True
dbutils.fs.rm("/Volumes/main/default/my-volume/my-data/", True)

# Out[8]: True
dbutils.fs.rm("/Volumes/main/default/my-volume/my-data/", TRUE)

# [1] TRUE
dbutils.fs.rm("/Volumes/main/default/my-volume/my-data/", TRUE)

# [1] TRUE
dbutils.fs.rm("/Volumes/main/default/my-volume/my-data/", true)

// res6: Boolean = true
dbutils.fs.rm("/Volumes/main/default/my-volume/my-data/", true)

// res6: Boolean = true
unmount command (dbutils.fs.unmount)
unmount(mountPoint: String): boolean
unmount(mountPoint: String): boolean
Deletes a DBFS mount point.
Warning
To avoid errors, never modify a mount point while other jobs are reading or writing to it. After modifying a mount, always rundbutils.fs.refreshMounts()on all other running clusters to propagate any mount updates. SeerefreshMounts command (dbutils.fs.refreshMounts).
dbutils.fs.refreshMounts()
To display complete help for this command, run:
dbutils.fs.help("unmount")
dbutils.fs.help("unmount")
dbutils.fs.unmount("/mnt/<mount-name>")
dbutils.fs.unmount("/mnt/<mount-name>")
For additional code examples, seeConnect to Azure Data Lake Storage and Blob Storage.
updateMount command (dbutils.fs.updateMount)
updateMount(source: String, mountPoint: String, encryptionType: String = "",owner: String = null, extraConfigs: Map = Map.empty[String, String]): boolean
updateMount(source: String, mountPoint: String, encryptionType: String = "",
owner: String = null, extraConfigs: Map = Map.empty[String, String]): boolean
Similar to thedbutils.fs.mountcommand, but updates an existing mount point instead of creating a new one. Returns an error if the mount point is not present.
dbutils.fs.mount
Warning
To avoid errors, never modify a mount point while other jobs are reading or writing to it. After modifying a mount, always rundbutils.fs.refreshMounts()on all other running clusters to propagate any mount updates. SeerefreshMounts command (dbutils.fs.refreshMounts).
dbutils.fs.refreshMounts()
This command is available in Databricks Runtime 10.4 LTS and above.
To display complete help for this command, run:
dbutils.fs.help("updateMount")
dbutils.fs.help("updateMount")
dbutils.fs.updateMount(
  source = "wasbs://<container-name>@<storage-account-name>.blob.core.windows.net",
  mount_point = "/mnt/<mount-name>",
  extra_configs = {"<conf-key>":dbutils.secrets.get(scope = "<scope-name>", key = "<key-name>")})
dbutils.fs.updateMount(
  source = "wasbs://<container-name>@<storage-account-name>.blob.core.windows.net",
  mount_point = "/mnt/<mount-name>",
  extra_configs = {"<conf-key>":dbutils.secrets.get(scope = "<scope-name>", key = "<key-name>")})
dbutils.fs.updateMount(
  source = "wasbs://<container-name>@<storage-account-name>.blob.core.windows.net/<directory-name>",
  mountPoint = "/mnt/<mount-name>",
  extraConfigs = Map("<conf-key>" -> dbutils.secrets.get(scope = "<scope-name>", key = "<key-name>")))
dbutils.fs.updateMount(
  source = "wasbs://<container-name>@<storage-account-name>.blob.core.windows.net/<directory-name>",
  mountPoint = "/mnt/<mount-name>",
  extraConfigs = Map("<conf-key>" -> dbutils.secrets.get(scope = "<scope-name>", key = "<key-name>")))
Jobs utility (dbutils.jobs)
Provides utilities for leveraging jobs features.
Note
This utility is available only for Python.
The following table lists the available modules for this utility, which you can retrieve usingdbutils.jobs.help().
dbutils.jobs.help()
taskValues subutility (dbutils.jobs.taskValues)
Note
This subutility is available only for Python.
Provides commands for leveraging job task values.
Use this sub-utility to set and get arbitrary values during a job run. These values are calledtask values. Any task can get values set by upstream tasks and set values for downstream tasks to use.
Each task value has a unique key within the same task. This unique key is known as the task valueâs key. A task value is accessed with the task name and the task valueâs key. You can use this to pass information downstream from task to task within the same job run. For example, you can pass identifiers or metrics, such as information about the evaluation of a machine learning model, between different tasks within a job run.
The following table lists available commands for this subutility, which you can retrieve usingdbutils.jobs.taskValues.help().
dbutils.jobs.taskValues.help()
Note
This command is available only for Python.
On Databricks Runtime 10.4 and earlier, ifgetcannot find the task, aPy4JJavaErroris raised instead of aValueError.
get
ValueError
get(taskKey: String, key: String, default: int, debugValue: int): Seq
get(taskKey: String, key: String, default: int, debugValue: int): Seq
Gets the contents of the specified task value for the specified task in the current job run.
To display complete help for this command, run:
dbutils.jobs.taskValues.help("get")
dbutils.jobs.taskValues.help("get")
For example:
dbutils.jobs.taskValues.get(taskKey    = "my-task", \
                            key        = "my-key", \
                            default    = 7, \
                            debugValue = 42)
dbutils.jobs.taskValues.get(taskKey    = "my-task", \
                            key        = "my-key", \
                            default    = 7, \
                            debugValue = 42)
In the preceding example:
taskKeyis the name of the task that sets the task value. If the command cannot find this task, aValueErroris raised.
taskKey
ValueError
keyis the name of the task valueâs key that you set with theset command (dbutils.jobs.taskValues.set). If the command cannot find this task valueâs key, aValueErroris raised (unlessdefaultis specified).
key
ValueError
default
defaultis an optional value that is returned ifkeycannot be found.defaultcannot beNone.
default
key
default
None
debugValueis an optional value that is returned if you try to get the task value from within a notebook that is running outside of a job. This can be useful during debugging when you want to run your notebook manually and return some value instead of raising aTypeErrorby default.debugValuecannot beNone.
debugValue
TypeError
debugValue
None
If you try to get a task value from within a notebook that is running outside of a job, this command raises aTypeErrorby default. However, if thedebugValueargument is specified in the command, the value ofdebugValueis returned instead of raising aTypeError.
TypeError
debugValue
debugValue
TypeError
Note
This command is available only for Python.
set(key: String, value: String): boolean
set(key: String, value: String): boolean
Sets or updates a task value. You can set up to 250 task values for a job run.
To display complete help for this command, run:
dbutils.jobs.taskValues.help("set")
dbutils.jobs.taskValues.help("set")
Some examples include:
dbutils.jobs.taskValues.set(key   = "my-key", \
                            value = 5)

dbutils.jobs.taskValues.set(key   = "my-other-key", \
                            value = "my other value")
dbutils.jobs.taskValues.set(key   = "my-key", \
                            value = 5)

dbutils.jobs.taskValues.set(key   = "my-other-key", \
                            value = "my other value")
In the preceding examples:
keyis the task valueâs key. This key must be unique to the task. That is, if two different tasks each set a task value with keyK, these are two different task values that have the same keyK.
key
K
K
valueis the value for this task valueâs key. This command must be able to represent the value internally in JSON format. The size of the JSON representation of the value cannot exceed 48 KiB.
value
If you try to set a task value from within a notebook that is running outside of a job, this command does nothing.
Library utility (dbutils.library)
Most methods in thedbutils.librarysubmodule are deprecated. SeeLibrary utility (dbutils.library) (legacy).
dbutils.library
You might need to programmatically restart the Python process on Azure Databricks to ensure that locally installed or upgraded libraries function correctly in the Python kernel for your current SparkSession. To do this, run thedbutils.library.restartPythoncommand. SeeRestart the Python process on Azure Databricks.
dbutils.library.restartPython
Notebook utility (dbutils.notebook)
The notebook utility allows you to chain together notebooks and act on their results. SeeOrchestrate notebooks and modularize code in notebooks.
The following table lists the available commands for this utility, which you can retrieve usingdbutils.notebook.help().
dbutils.notebook.help()
exit command (dbutils.notebook.exit)
exit(value: String): void
exit(value: String): void
Exits a notebook with a value.
To display complete help for this command, run:
dbutils.notebook.help("exit")
dbutils.notebook.help("exit")
This example exits the notebook with the valueExiting from My Other Notebook.
Exiting from My Other Notebook
dbutils.notebook.exit("Exiting from My Other Notebook")

# Notebook exited: Exiting from My Other Notebook
dbutils.notebook.exit("Exiting from My Other Notebook")

# Notebook exited: Exiting from My Other Notebook
dbutils.notebook.exit("Exiting from My Other Notebook")

# Notebook exited: Exiting from My Other Notebook
dbutils.notebook.exit("Exiting from My Other Notebook")

# Notebook exited: Exiting from My Other Notebook
dbutils.notebook.exit("Exiting from My Other Notebook")

// Notebook exited: Exiting from My Other Notebook
dbutils.notebook.exit("Exiting from My Other Notebook")

// Notebook exited: Exiting from My Other Notebook
Note
If the run has a query withstructured streamingrunning in the background, callingdbutils.notebook.exit()does not terminate the run. The run will continue to execute for as long as the query is executing in the background. You can stop the query running in the background by clickingCancelin the cell of the query or by runningquery.stop(). When the query stops, you can terminate the run withdbutils.notebook.exit().
dbutils.notebook.exit()
query.stop()
dbutils.notebook.exit()
run command (dbutils.notebook.run)
run(path: String, timeoutSeconds: int, arguments: Map): String
run(path: String, timeoutSeconds: int, arguments: Map): String
Runs a notebook and returns its exit value. The notebook will run in the current cluster by default.
Note
The maximum length of the string value returned from theruncommand is 5 MB. SeeGet the output for a single run(GET /jobs/runs/get-output).
run
GET /jobs/runs/get-output
To display complete help for this command, run:
dbutils.notebook.help("run")
dbutils.notebook.help("run")
This example runs a notebook namedMy Other Notebookin the same location as the calling notebook. The called notebook ends with the line of codedbutils.notebook.exit("Exiting from My Other Notebook"). If the called notebook does not finish running within 60 seconds, an exception is thrown.
My Other Notebook
dbutils.notebook.exit("Exiting from My Other Notebook")
dbutils.notebook.run("My Other Notebook", 60)

# Out[14]: 'Exiting from My Other Notebook'
dbutils.notebook.run("My Other Notebook", 60)

# Out[14]: 'Exiting from My Other Notebook'
dbutils.notebook.run("My Other Notebook", 60)

// res2: String = Exiting from My Other Notebook
dbutils.notebook.run("My Other Notebook", 60)

// res2: String = Exiting from My Other Notebook
Secrets utility (dbutils.secrets)
The secrets utility allows you to store and access sensitive credential information without making them visible in notebooks. SeeSecret managementandStep 3: Use the secrets in a notebook.
The following table lists the available commands for this utility, which you can retrieve usingdbutils.secrets.help().
dbutils.secrets.help()
get command (dbutils.secrets.get)
get(scope: String, key: String): String
get(scope: String, key: String): String
Gets the string representation of a secret value for the specified secrets scope and key.
Warning
Administrators, secret creators, and users grantedpermissioncan read Azure Databricks secrets. While
Azure Databricks makes an effort to redact secret values that might be displayed in notebooks, it is not possible to prevent such users from reading secrets. For more information, seeSecret redaction.
To display complete help for this command, run:
dbutils.secrets.help("get")
dbutils.secrets.help("get")
This example gets the string representation of the secret value for the scope namedmy-scopeand the key namedmy-key.
my-scope
my-key
dbutils.secrets.get(scope="my-scope", key="my-key")

# Out[14]: '[REDACTED]'
dbutils.secrets.get(scope="my-scope", key="my-key")

# Out[14]: '[REDACTED]'
dbutils.secrets.get(scope="my-scope", key="my-key")

# [1] "[REDACTED]"
dbutils.secrets.get(scope="my-scope", key="my-key")

# [1] "[REDACTED]"
dbutils.secrets.get(scope="my-scope", key="my-key")

// res0: String = [REDACTED]
dbutils.secrets.get(scope="my-scope", key="my-key")

// res0: String = [REDACTED]
getBytes command (dbutils.secrets.getBytes)
getBytes(scope: String, key: String): byte[]
getBytes(scope: String, key: String): byte[]
Gets the bytes representation of a secret value for the specified scope and key.
To display complete help for this command, run:
dbutils.secrets.help("getBytes")
dbutils.secrets.help("getBytes")
This example gets the byte representation of the secret value (in this example,a1!b2@c3#) for the scope namedmy-scopeand the key namedmy-key.
a1!b2@c3#
my-scope
my-key
dbutils.secrets.getBytes(scope="my-scope", key="my-key")

# Out[1]: b'a1!b2@c3#'
dbutils.secrets.getBytes(scope="my-scope", key="my-key")

# Out[1]: b'a1!b2@c3#'
dbutils.secrets.getBytes(scope="my-scope", key="my-key")

# [1] 61 31 21 62 32 40 63 33 23
dbutils.secrets.getBytes(scope="my-scope", key="my-key")

# [1] 61 31 21 62 32 40 63 33 23
dbutils.secrets.getBytes(scope="my-scope", key="my-key")

// res1: Array[Byte] = Array(97, 49, 33, 98, 50, 64, 99, 51, 35)
dbutils.secrets.getBytes(scope="my-scope", key="my-key")

// res1: Array[Byte] = Array(97, 49, 33, 98, 50, 64, 99, 51, 35)
list command (dbutils.secrets.list)
list(scope: String): Seq
list(scope: String): Seq
Lists the metadata for secrets within the specified scope.
To display complete help for this command, run:
dbutils.secrets.help("list")
dbutils.secrets.help("list")
This example lists the metadata for secrets within the scope namedmy-scope.
my-scope
dbutils.secrets.list("my-scope")

# Out[10]: [SecretMetadata(key='my-key')]
dbutils.secrets.list("my-scope")

# Out[10]: [SecretMetadata(key='my-key')]
dbutils.secrets.list("my-scope")

# [[1]]
# [[1]]$key
# [1] "my-key"
dbutils.secrets.list("my-scope")

# [[1]]
# [[1]]$key
# [1] "my-key"
dbutils.secrets.list("my-scope")

// res2: Seq[com.databricks.dbutils_v1.SecretMetadata] = ArrayBuffer(SecretMetadata(my-key))
dbutils.secrets.list("my-scope")

// res2: Seq[com.databricks.dbutils_v1.SecretMetadata] = ArrayBuffer(SecretMetadata(my-key))
listScopes command (dbutils.secrets.listScopes)
listScopes: Seq
listScopes: Seq
Lists the available scopes.
To display complete help for this command, run:
dbutils.secrets.help("listScopes")
dbutils.secrets.help("listScopes")
This example lists the available scopes.
dbutils.secrets.listScopes()

# Out[14]: [SecretScope(name='my-scope')]
dbutils.secrets.listScopes()

# Out[14]: [SecretScope(name='my-scope')]
dbutils.secrets.listScopes()

# [[1]]
# [[1]]$name
# [1] "my-scope"
dbutils.secrets.listScopes()

# [[1]]
# [[1]]$name
# [1] "my-scope"
dbutils.secrets.listScopes()

// res3: Seq[com.databricks.dbutils_v1.SecretScope] = ArrayBuffer(SecretScope(my-scope))
dbutils.secrets.listScopes()

// res3: Seq[com.databricks.dbutils_v1.SecretScope] = ArrayBuffer(SecretScope(my-scope))
Widgets utility (dbutils.widgets)
The widgets utility allows you to parameterize notebooks. SeeDatabricks widgets.
The following table lists the available commands for this utility, which you can retrieve usingdbutils.widgets.help().
dbutils.widgets.help()
combobox command (dbutils.widgets.combobox)
combobox(name: String, defaultValue: String, choices: Seq, label: String): void
combobox(name: String, defaultValue: String, choices: Seq, label: String): void
Creates and displays a combobox widget with the specified programmatic name, default value, choices, and optional label.
To display complete help for this command, run:
dbutils.widgets.help("combobox")
dbutils.widgets.help("combobox")
This example creates and displays a combobox widget with the programmatic namefruits_combobox. It offers the choicesapple,banana,coconut, anddragon fruitand is set to the initial value ofbanana. This combobox widget has an accompanying labelFruits. This example ends by printing the initial value of the combobox widget,banana.
fruits_combobox
apple
banana
coconut
dragon fruit
banana
Fruits
banana
dbutils.widgets.combobox(
  name='fruits_combobox',
  defaultValue='banana',
  choices=['apple', 'banana', 'coconut', 'dragon fruit'],
  label='Fruits'
)

print(dbutils.widgets.get("fruits_combobox"))

# banana
dbutils.widgets.combobox(
  name='fruits_combobox',
  defaultValue='banana',
  choices=['apple', 'banana', 'coconut', 'dragon fruit'],
  label='Fruits'
)

print(dbutils.widgets.get("fruits_combobox"))

# banana
dbutils.widgets.combobox(
  name='fruits_combobox',
  defaultValue='banana',
  choices=list('apple', 'banana', 'coconut', 'dragon fruit'),
  label='Fruits'
)

print(dbutils.widgets.get("fruits_combobox"))

# [1] "banana"
dbutils.widgets.combobox(
  name='fruits_combobox',
  defaultValue='banana',
  choices=list('apple', 'banana', 'coconut', 'dragon fruit'),
  label='Fruits'
)

print(dbutils.widgets.get("fruits_combobox"))

# [1] "banana"
dbutils.widgets.combobox(
  "fruits_combobox",
  "banana",
  Array("apple", "banana", "coconut", "dragon fruit"),
  "Fruits"
)

print(dbutils.widgets.get("fruits_combobox"))

// banana
dbutils.widgets.combobox(
  "fruits_combobox",
  "banana",
  Array("apple", "banana", "coconut", "dragon fruit"),
  "Fruits"
)

print(dbutils.widgets.get("fruits_combobox"))

// banana
CREATE WIDGET COMBOBOX fruits_combobox DEFAULT "banana" CHOICES SELECT * FROM (VALUES ("apple"), ("banana"), ("coconut"), ("dragon fruit"))

SELECT :fruits_combobox

-- banana
CREATE WIDGET COMBOBOX fruits_combobox DEFAULT "banana" CHOICES SELECT * FROM (VALUES ("apple"), ("banana"), ("coconut"), ("dragon fruit"))

SELECT :fruits_combobox

-- banana
dropdown command (dbutils.widgets.dropdown)
dropdown(name: String, defaultValue: String, choices: Seq, label: String): void
dropdown(name: String, defaultValue: String, choices: Seq, label: String): void
Creates and displays a dropdown widget with the specified programmatic name, default value, choices, and optional label.
To display complete help for this command, run:
dbutils.widgets.help("dropdown")
dbutils.widgets.help("dropdown")
This example creates and displays a dropdown widget with the programmatic nametoys_dropdown. It offers the choicesalphabet blocks,basketball,cape, anddolland is set to the initial value ofbasketball. This dropdown widget has an accompanying labelToys. This example ends by printing the initial value of the dropdown widget,basketball.
toys_dropdown
alphabet blocks
basketball
cape
doll
basketball
Toys
basketball
dbutils.widgets.dropdown(
  name='toys_dropdown',
  defaultValue='basketball',
  choices=['alphabet blocks', 'basketball', 'cape', 'doll'],
  label='Toys'
)

print(dbutils.widgets.get("toys_dropdown"))

# basketball
dbutils.widgets.dropdown(
  name='toys_dropdown',
  defaultValue='basketball',
  choices=['alphabet blocks', 'basketball', 'cape', 'doll'],
  label='Toys'
)

print(dbutils.widgets.get("toys_dropdown"))

# basketball
dbutils.widgets.dropdown(
  name='toys_dropdown',
  defaultValue='basketball',
  choices=list('alphabet blocks', 'basketball', 'cape', 'doll'),
  label='Toys'
)

print(dbutils.widgets.get("toys_dropdown"))

# [1] "basketball"
dbutils.widgets.dropdown(
  name='toys_dropdown',
  defaultValue='basketball',
  choices=list('alphabet blocks', 'basketball', 'cape', 'doll'),
  label='Toys'
)

print(dbutils.widgets.get("toys_dropdown"))

# [1] "basketball"
dbutils.widgets.dropdown(
  "toys_dropdown",
  "basketball",
  Array("alphabet blocks", "basketball", "cape", "doll"),
  "Toys"
)

print(dbutils.widgets.get("toys_dropdown"))

// basketball
dbutils.widgets.dropdown(
  "toys_dropdown",
  "basketball",
  Array("alphabet blocks", "basketball", "cape", "doll"),
  "Toys"
)

print(dbutils.widgets.get("toys_dropdown"))

// basketball
CREATE WIDGET DROPDOWN toys_dropdown DEFAULT "basketball" CHOICES SELECT * FROM (VALUES ("alphabet blocks"), ("basketball"), ("cape"), ("doll"))

SELECT :toys_dropdown

-- basketball
CREATE WIDGET DROPDOWN toys_dropdown DEFAULT "basketball" CHOICES SELECT * FROM (VALUES ("alphabet blocks"), ("basketball"), ("cape"), ("doll"))

SELECT :toys_dropdown

-- basketball
get command (dbutils.widgets.get)
get(name: String): String
get(name: String): String
Gets the current value of the widget with the specified programmatic name. This programmatic name can be either:
The name of a custom widget in the notebook, for example,fruits_comboboxortoys_dropdown.
fruits_combobox
toys_dropdown
The name of a custom parameter passed to the notebook as part of a notebook task, for examplenameorage. For more information, see the coverage ofparameters for notebook tasksin the jobs UI or thenotebook_paramsfield in theTrigger a new job run(POST /jobs/run-now) operation in the Jobs API.
name
age
notebook_params
POST /jobs/run-now
To display complete help for this command, run:
dbutils.widgets.help("get")
dbutils.widgets.help("get")
This example gets the value of the widget that has the programmatic namefruits_combobox.
fruits_combobox
dbutils.widgets.get('fruits_combobox')

# banana
dbutils.widgets.get('fruits_combobox')

# banana
dbutils.widgets.get('fruits_combobox')

# [1] "banana"
dbutils.widgets.get('fruits_combobox')

# [1] "banana"
dbutils.widgets.get("fruits_combobox")

// res6: String = banana
dbutils.widgets.get("fruits_combobox")

// res6: String = banana
SELECT :fruits_combobox

-- banana
SELECT :fruits_combobox

-- banana
This example gets the value of the notebook task parameter that has the programmatic nameage. This parameter was set to35when the related notebook task was run.
age
35
dbutils.widgets.get('age')

# 35
dbutils.widgets.get('age')

# 35
dbutils.widgets.get('age')

# [1] "35"
dbutils.widgets.get('age')

# [1] "35"
dbutils.widgets.get("age")

// res6: String = 35
dbutils.widgets.get("age")

// res6: String = 35
SELECT :age

-- 35
SELECT :age

-- 35
getAll command (dbutils.widgets.getAll)
getAll: map
getAll: map
Gets a mapping of all current widget names and values. This can be especially useful to quickly pass widget values to aspark.sql()query.
spark.sql()
This command is available in Databricks Runtime 13.3 LTS and above. It is only available for Python and Scala.
To display complete help for this command, run:
dbutils.widgets.help("getAll")
dbutils.widgets.help("getAll")
This example gets the map of widget values and passes it as parameter arguments in a Spark SQL query.
df = spark.sql("SELECT * FROM table where col1 = :param", dbutils.widgets.getAll())
df.show()

# Query output
df = spark.sql("SELECT * FROM table where col1 = :param", dbutils.widgets.getAll())
df.show()

# Query output
val df = spark.sql("SELECT * FROM table where col1 = :param", dbutils.widgets.getAll())
df.show()

// res6: Query output
val df = spark.sql("SELECT * FROM table where col1 = :param", dbutils.widgets.getAll())
df.show()

// res6: Query output
getArgument command (dbutils.widgets.getArgument)
getArgument(name: String, optional: String): String
getArgument(name: String, optional: String): String
Gets the current value of the widget with the specified programmatic name. If the widget does not exist, an optional message can be returned.
Note
This command is deprecated. Usedbutils.widgets.getinstead.
To display complete help for this command, run:
dbutils.widgets.help("getArgument")
dbutils.widgets.help("getArgument")
This example gets the value of the widget that has the programmatic namefruits_combobox. If this widget does not exist, the messageError: Cannot find fruits comboboxis returned.
fruits_combobox
Error: Cannot find fruits combobox
dbutils.widgets.getArgument('fruits_combobox', 'Error: Cannot find fruits combobox')

# Deprecation warning: Use dbutils.widgets.text() or dbutils.widgets.dropdown() to create a widget and dbutils.widgets.get() to get its bound value.
# Out[3]: 'banana'
dbutils.widgets.getArgument('fruits_combobox', 'Error: Cannot find fruits combobox')

# Deprecation warning: Use dbutils.widgets.text() or dbutils.widgets.dropdown() to create a widget and dbutils.widgets.get() to get its bound value.
# Out[3]: 'banana'
dbutils.widgets.getArgument('fruits_combobox', 'Error: Cannot find fruits combobox')

# Deprecation warning: Use dbutils.widgets.text() or dbutils.widgets.dropdown() to create a widget and dbutils.widgets.get() to get its bound value.
# [1] "banana"
dbutils.widgets.getArgument('fruits_combobox', 'Error: Cannot find fruits combobox')

# Deprecation warning: Use dbutils.widgets.text() or dbutils.widgets.dropdown() to create a widget and dbutils.widgets.get() to get its bound value.
# [1] "banana"
dbutils.widgets.getArgument("fruits_combobox", "Error: Cannot find fruits combobox")

// command-1234567890123456:1: warning: method getArgument in trait WidgetsUtils is deprecated: Use dbutils.widgets.text() or dbutils.widgets.dropdown() to create a widget and dbutils.widgets.get() to get its bound value.
// dbutils.widgets.getArgument("fruits_combobox", "Error: Cannot find fruits combobox")
//                 ^
// res7: String = banana
dbutils.widgets.getArgument("fruits_combobox", "Error: Cannot find fruits combobox")

// command-1234567890123456:1: warning: method getArgument in trait WidgetsUtils is deprecated: Use dbutils.widgets.text() or dbutils.widgets.dropdown() to create a widget and dbutils.widgets.get() to get its bound value.
// dbutils.widgets.getArgument("fruits_combobox", "Error: Cannot find fruits combobox")
//                 ^
// res7: String = banana
multiselect command (dbutils.widgets.multiselect)
multiselect(name: String, defaultValue: String, choices: Seq, label: String): void
multiselect(name: String, defaultValue: String, choices: Seq, label: String): void
Creates and displays a multiselect widget with the specified programmatic name, default value, choices, and optional label.
To display complete help for this command, run:
dbutils.widgets.help("multiselect")
dbutils.widgets.help("multiselect")
This example creates and displays a multiselect widget with the programmatic namedays_multiselect. It offers the choicesMondaythroughSundayand is set to the initial value ofTuesday. This multiselect widget has an accompanying labelDays of the Week. This example ends by printing the initial value of the multiselect widget,Tuesday.
days_multiselect
Monday
Sunday
Tuesday
Days of the Week
Tuesday
dbutils.widgets.multiselect(
  name='days_multiselect',
  defaultValue='Tuesday',
  choices=['Monday', 'Tuesday', 'Wednesday', 'Thursday',
    'Friday', 'Saturday', 'Sunday'],
  label='Days of the Week'
)

print(dbutils.widgets.get("days_multiselect"))

# Tuesday
dbutils.widgets.multiselect(
  name='days_multiselect',
  defaultValue='Tuesday',
  choices=['Monday', 'Tuesday', 'Wednesday', 'Thursday',
    'Friday', 'Saturday', 'Sunday'],
  label='Days of the Week'
)

print(dbutils.widgets.get("days_multiselect"))

# Tuesday
dbutils.widgets.multiselect(
  name='days_multiselect',
  defaultValue='Tuesday',
  choices=list('Monday', 'Tuesday', 'Wednesday', 'Thursday',
    'Friday', 'Saturday', 'Sunday'),
  label='Days of the Week'
)

print(dbutils.widgets.get("days_multiselect"))

# [1] "Tuesday"
dbutils.widgets.multiselect(
  name='days_multiselect',
  defaultValue='Tuesday',
  choices=list('Monday', 'Tuesday', 'Wednesday', 'Thursday',
    'Friday', 'Saturday', 'Sunday'),
  label='Days of the Week'
)

print(dbutils.widgets.get("days_multiselect"))

# [1] "Tuesday"
dbutils.widgets.multiselect(
  "days_multiselect",
  "Tuesday",
  Array("Monday", "Tuesday", "Wednesday", "Thursday",
    "Friday", "Saturday", "Sunday"),
  "Days of the Week"
)

print(dbutils.widgets.get("days_multiselect"))

// Tuesday
dbutils.widgets.multiselect(
  "days_multiselect",
  "Tuesday",
  Array("Monday", "Tuesday", "Wednesday", "Thursday",
    "Friday", "Saturday", "Sunday"),
  "Days of the Week"
)

print(dbutils.widgets.get("days_multiselect"))

// Tuesday
CREATE WIDGET MULTISELECT days_multiselect DEFAULT "Tuesday" CHOICES SELECT * FROM (VALUES ("Monday"), ("Tuesday"), ("Wednesday"), ("Thursday"), ("Friday"), ("Saturday"), ("Sunday"))

SELECT :days_multiselect

-- Tuesday
CREATE WIDGET MULTISELECT days_multiselect DEFAULT "Tuesday" CHOICES SELECT * FROM (VALUES ("Monday"), ("Tuesday"), ("Wednesday"), ("Thursday"), ("Friday"), ("Saturday"), ("Sunday"))

SELECT :days_multiselect

-- Tuesday
remove command (dbutils.widgets.remove)
remove(name: String): void
remove(name: String): void
Removes the widget with the specified programmatic name.
To display complete help for this command, run:
dbutils.widgets.help("remove")
dbutils.widgets.help("remove")
Important
If you add a command to remove a widget, you cannot add a subsequent command to create a widget in the same cell. You must create the widget in another cell.
This example removes the widget with the programmatic namefruits_combobox.
fruits_combobox
dbutils.widgets.remove('fruits_combobox')
dbutils.widgets.remove('fruits_combobox')
dbutils.widgets.remove('fruits_combobox')
dbutils.widgets.remove('fruits_combobox')
dbutils.widgets.remove("fruits_combobox")
dbutils.widgets.remove("fruits_combobox")
REMOVE WIDGET fruits_combobox
REMOVE WIDGET fruits_combobox
removeAll command (dbutils.widgets.removeAll)
removeAll: void
removeAll: void
Removes all widgets from the notebook.
To display complete help for this command, run:
dbutils.widgets.help("removeAll")
dbutils.widgets.help("removeAll")
Important
If you add a command to remove all widgets, you cannot add a subsequent command to create any widgets in the same cell. You must create the widgets in another cell.
This example removes all widgets from the notebook.
dbutils.widgets.removeAll()
dbutils.widgets.removeAll()
dbutils.widgets.removeAll()
dbutils.widgets.removeAll()
dbutils.widgets.removeAll()
dbutils.widgets.removeAll()
text command (dbutils.widgets.text)
text(name: String, defaultValue: String, label: String): void
text(name: String, defaultValue: String, label: String): void
Creates and displays a text widget with the specified programmatic name, default value, and optional label.
To display complete help for this command, run:
dbutils.widgets.help("text")
dbutils.widgets.help("text")
This example creates and displays a text widget with the programmatic nameyour_name_text. It is set to the initial value ofEnter your name. This text widget has an accompanying labelYour name. This example ends by printing the initial value of the text widget,Enter your name.
your_name_text
Enter your name
Your name
Enter your name
dbutils.widgets.text(
  name='your_name_text',
  defaultValue='Enter your name',
  label='Your name'
)

print(dbutils.widgets.get("your_name_text"))

# Enter your name
dbutils.widgets.text(
  name='your_name_text',
  defaultValue='Enter your name',
  label='Your name'
)

print(dbutils.widgets.get("your_name_text"))

# Enter your name
dbutils.widgets.text(
  name='your_name_text',
  defaultValue='Enter your name',
  label='Your name'
)

print(dbutils.widgets.get("your_name_text"))

# [1] "Enter your name"
dbutils.widgets.text(
  name='your_name_text',
  defaultValue='Enter your name',
  label='Your name'
)

print(dbutils.widgets.get("your_name_text"))

# [1] "Enter your name"
dbutils.widgets.text(
  "your_name_text",
  "Enter your name",
  "Your name"
)

print(dbutils.widgets.get("your_name_text"))

// Enter your name
dbutils.widgets.text(
  "your_name_text",
  "Enter your name",
  "Your name"
)

print(dbutils.widgets.get("your_name_text"))

// Enter your name
CREATE WIDGET TEXT your_name_text DEFAULT "Enter your name"

SELECT :your_name_text

-- Enter your name
CREATE WIDGET TEXT your_name_text DEFAULT "Enter your name"

SELECT :your_name_text

-- Enter your name
Databricks Utilities API library
Important
The Databricks Utilities API (dbutils-api) library isdeprecated. Databricks recommends that you use one of the following instead:
dbutils-api
Databricks Utilities for Python
Databricks Utilities for Scala, with Java
Databricks Utilities for Scala, with Scala
To accelerate application development, it can be helpful to compile, build, and test applications before you deploy them as production jobs. To enable you to compile against Databricks Utilities, Databricks provides thedbutils-apilibrary. You can download thedbutils-apilibrary from theDBUtils APIwebpage on the Maven Repository website or include the library by adding a dependency to your build file:
dbutils-api
dbutils-api
SBTlibraryDependencies += "com.databricks" % "dbutils-api_TARGET" % "VERSION"
SBT
libraryDependencies += "com.databricks" % "dbutils-api_TARGET" % "VERSION"
libraryDependencies += "com.databricks" % "dbutils-api_TARGET" % "VERSION"
Maven<dependency>
    <groupId>com.databricks</groupId>
    <artifactId>dbutils-api_TARGET</artifactId>
    <version>VERSION</version>
</dependency>
Maven
<dependency>
    <groupId>com.databricks</groupId>
    <artifactId>dbutils-api_TARGET</artifactId>
    <version>VERSION</version>
</dependency>
<dependency>
    <groupId>com.databricks</groupId>
    <artifactId>dbutils-api_TARGET</artifactId>
    <version>VERSION</version>
</dependency>
Gradlecompile 'com.databricks:dbutils-api_TARGET:VERSION'
Gradle
compile 'com.databricks:dbutils-api_TARGET:VERSION'
compile 'com.databricks:dbutils-api_TARGET:VERSION'
ReplaceTARGETwith the desired target (for example,2.12) andVERSIONwith the desired version (for example,0.0.5). For a list of available targets and versions, see theDBUtils APIwebpage on the Maven Repository website.
TARGET
2.12
VERSION
0.0.5
Once you build your application against this library, you can deploy the application.
Important
Thedbutils-apilibrary only allows you to locally compile an application that usesdbutils, not to run it. To run the application, you must deploy it in Azure Databricks.
dbutils-api
dbutils
Limitations
Callingdbutilsinside of executors can produce unexpected results or errors.
dbutils
If you need to run file system operations on executors usingdbutils, refer toParallelize filesystem operations.
dbutils
For information about executors, seeCluster Mode Overviewon the Apache Spark website.
Feedback
Was this page helpful?
Additional resources