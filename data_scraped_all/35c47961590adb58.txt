Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Tutorial: Deploy applications using GitOps with Flux v2
Article
2025-03-26
16 contributors
In this article
This tutorial describes how to use GitOps in a Kubernetes cluster. GitOps with Flux v2 is enabled as acluster extensionin Azure Arc-enabled Kubernetes clusters or Azure Kubernetes Service (AKS) clusters. After themicrosoft.fluxcluster extension is installed, you can create one or morefluxConfigurationsresources that sync your Git repository sources to the cluster and reconcile the cluster to the desired state. With GitOps, you can use your Git repository as the source of truth for cluster configuration and application deployment.
microsoft.flux
fluxConfigurations
In this tutorial, we use an example GitOps configuration with twokustomizations, so that you can see how one kustomization can have a dependency on another. You can add more kustomizations and dependencies as needed, depending on your scenario.
Before you dive in, take a moment tolearn how GitOps with Flux works conceptually.
Tip
While the source in this tutorial is a Git repository, Flux also provides support for other common file sources such as Helm repositories, Buckets, and Azure Blob Storage.
You can also create Flux configurations by using Bicep, ARM templates, or Terraform AzAPI provider. For more information, seeMicrosoft.KubernetesConfiguration fluxConfigurations.
Consider alternatively trying out using the newMicrosoft GitOps ArgoCD extension. Argo CD is a popular open-source GitOps tool that provides a different set of features and capabilities compared to Flux v2.
Prerequisites
To deploy applications using GitOps with Flux v2, you need:
Azure CLI
Azure portal
An Azure Arc-enabled Kubernetes connected cluster that's up and running. Arm64-based clusters are supported starting withmicrosoft.fluxversion 1.7.0.Learn how to connect a Kubernetes cluster to  Azure Arc. If you need to connect through an outbound proxy, then assure youinstall the Arc agents with proxy settings.
An Azure Arc-enabled Kubernetes connected cluster that's up and running. Arm64-based clusters are supported starting withmicrosoft.fluxversion 1.7.0.
microsoft.flux
Learn how to connect a Kubernetes cluster to  Azure Arc. If you need to connect through an outbound proxy, then assure youinstall the Arc agents with proxy settings.
Read and write permissions on theMicrosoft.Kubernetes/connectedClustersresource type.
Read and write permissions on theMicrosoft.Kubernetes/connectedClustersresource type.
Microsoft.Kubernetes/connectedClusters
An MSI-based AKS cluster that's up and running.ImportantEnsure that the AKS cluster is created with MSI (not SPN), because themicrosoft.fluxextension doesn't work with SPN-based AKS clusters.
For new AKS clusters created withaz aks create, the cluster is MSI-based by default. To convert SPN-based clusters to MSI, runaz aks update -g $RESOURCE_GROUP -n $CLUSTER_NAME --enable-managed-identity. For more information, seeUse a managed identity in AKS.
An MSI-based AKS cluster that's up and running.
Important
Ensure that the AKS cluster is created with MSI (not SPN), because themicrosoft.fluxextension doesn't work with SPN-based AKS clusters.
For new AKS clusters created withaz aks create, the cluster is MSI-based by default. To convert SPN-based clusters to MSI, runaz aks update -g $RESOURCE_GROUP -n $CLUSTER_NAME --enable-managed-identity. For more information, seeUse a managed identity in AKS.
microsoft.flux
az aks create
az aks update -g $RESOURCE_GROUP -n $CLUSTER_NAME --enable-managed-identity
Read and write permissions on theMicrosoft.ContainerService/managedClustersresource type.
Read and write permissions on theMicrosoft.ContainerService/managedClustersresource type.
Microsoft.ContainerService/managedClusters
Read and write permissions on these resource types:Microsoft.KubernetesConfiguration/extensionsMicrosoft.KubernetesConfiguration/fluxConfigurations
Read and write permissions on these resource types:
Microsoft.KubernetesConfiguration/extensions
Microsoft.KubernetesConfiguration/extensions
Microsoft.KubernetesConfiguration/fluxConfigurations
Microsoft.KubernetesConfiguration/fluxConfigurations
Azure CLI version 2.15 or later.Install the Azure CLIor use the following commands to update to the latest version:az version
az upgrade
Azure CLI version 2.15 or later.Install the Azure CLIor use the following commands to update to the latest version:
az version
az upgrade
az version
az upgrade
The Kubernetes command-line client,kubectl.kubectlis already installed if you use Azure Cloud Shell.Installkubectllocally using theaz aks install-clicommand:az aks install-cli
The Kubernetes command-line client,kubectl.kubectlis already installed if you use Azure Cloud Shell.
kubectl
Installkubectllocally using theaz aks install-clicommand:
kubectl
az aks install-cli
az aks install-cli
az aks install-cli
Registration of the following Azure resource providers:az provider register --namespace Microsoft.Kubernetes
az provider register --namespace Microsoft.ContainerService
az provider register --namespace Microsoft.KubernetesConfigurationRegistration is an asynchronous process and should finish within 10 minutes. To monitor the registration process, use the following command:az provider show -n Microsoft.KubernetesConfiguration -o table

Namespace                          RegistrationPolicy    RegistrationState
---------------------------------  --------------------  -------------------
Microsoft.KubernetesConfiguration  RegistrationRequired  Registered
Registration of the following Azure resource providers:
az provider register --namespace Microsoft.Kubernetes
az provider register --namespace Microsoft.ContainerService
az provider register --namespace Microsoft.KubernetesConfiguration
az provider register --namespace Microsoft.Kubernetes
az provider register --namespace Microsoft.ContainerService
az provider register --namespace Microsoft.KubernetesConfiguration
Registration is an asynchronous process and should finish within 10 minutes. To monitor the registration process, use the following command:
az provider show -n Microsoft.KubernetesConfiguration -o table

Namespace                          RegistrationPolicy    RegistrationState
---------------------------------  --------------------  -------------------
Microsoft.KubernetesConfiguration  RegistrationRequired  Registered
az provider show -n Microsoft.KubernetesConfiguration -o table

Namespace                          RegistrationPolicy    RegistrationState
---------------------------------  --------------------  -------------------
Microsoft.KubernetesConfiguration  RegistrationRequired  Registered
GitOps is currently supported inall regions that Azure Arc-enabled Kubernetes supports. GitOps is currently supported in a subset of the regions that AKS supports. The GitOps service is adding new supported regions on a regular cadence.
The most recent version of the Flux v2 extension and the two previous versions (N-2) are supported. We generally recommend that you use the most recent version of the extension.
The GitOps agents require outbound (egress) TCP to the repo source on either port 22 (SSH) or port 443 (HTTPS) to function. The agents also require access to the following outbound URLs:
https://management.azure.com
https://<region>.dp.kubernetesconfiguration.azure.com
<region>
https://login.microsoftonline.com
https://mcr.microsoft.com
Enable CLI extensions
Install the latestk8s-configurationandk8s-extensionCLI extension packages:
k8s-configuration
k8s-extension
az extension add -n k8s-configuration
az extension add -n k8s-extension
az extension add -n k8s-configuration
az extension add -n k8s-extension
To update these packages to the latest versions:
az extension update -n k8s-configuration
az extension update -n k8s-extension
az extension update -n k8s-configuration
az extension update -n k8s-extension
To see a list of all installed Azure CLI extensions and their versions, use the following command:
az extension list -o table

Experimental   ExtensionType   Name                   Path                                                       Preview   Version
-------------  --------------  -----------------      -----------------------------------------------------      --------  --------
False          whl             connectedk8s           C:\Users\somename\.azure\cliextensions\connectedk8s         False     1.2.7
False          whl             k8s-configuration      C:\Users\somename\.azure\cliextensions\k8s-configuration    False     1.5.0
False          whl             k8s-extension          C:\Users\somename\.azure\cliextensions\k8s-extension        False     1.1.0
az extension list -o table

Experimental   ExtensionType   Name                   Path                                                       Preview   Version
-------------  --------------  -----------------      -----------------------------------------------------      --------  --------
False          whl             connectedk8s           C:\Users\somename\.azure\cliextensions\connectedk8s         False     1.2.7
False          whl             k8s-configuration      C:\Users\somename\.azure\cliextensions\k8s-configuration    False     1.5.0
False          whl             k8s-extension          C:\Users\somename\.azure\cliextensions\k8s-extension        False     1.1.0
Tip
For help resolving any errors, see the GitOps (Flux v2) section ofTroubleshoot extension issues for Azure Arc-enabled Kubernetes clusters.
An Azure Arc-enabled Kubernetes connected cluster that's up and running. Arm64-based clusters are supported starting withmicrosoft.fluxversion 1.7.0.Learn how to connect a Kubernetes cluster to  Azure Arc. If you need to connect through an outbound proxy, then assure youinstall the Arc agents with proxy settings.
An Azure Arc-enabled Kubernetes connected cluster that's up and running. Arm64-based clusters are supported starting withmicrosoft.fluxversion 1.7.0.
microsoft.flux
Learn how to connect a Kubernetes cluster to  Azure Arc. If you need to connect through an outbound proxy, then assure youinstall the Arc agents with proxy settings.
Read and write permissions on theMicrosoft.Kubernetes/connectedClustersresource type.
Read and write permissions on theMicrosoft.Kubernetes/connectedClustersresource type.
Microsoft.Kubernetes/connectedClusters
An MSI-based AKS cluster that's up and running.ImportantEnsure that the AKS cluster is created with MSI (not SPN), because themicrosoft.fluxextension doesn't work with SPN-based AKS clusters.
For new AKS clusters created withaz aks create, the cluster is MSI-based by default. For already created SPN-based clusters that need to be converted to MSI, runaz aks update -g $RESOURCE_GROUP -n $CLUSTER_NAME --enable-managed-identity. For more information, seeUse a managed identity in AKS.
An MSI-based AKS cluster that's up and running.
Important
Ensure that the AKS cluster is created with MSI (not SPN), because themicrosoft.fluxextension doesn't work with SPN-based AKS clusters.
For new AKS clusters created withaz aks create, the cluster is MSI-based by default. For already created SPN-based clusters that need to be converted to MSI, runaz aks update -g $RESOURCE_GROUP -n $CLUSTER_NAME --enable-managed-identity. For more information, seeUse a managed identity in AKS.
microsoft.flux
az aks create
az aks update -g $RESOURCE_GROUP -n $CLUSTER_NAME --enable-managed-identity
Read and write permissions on theMicrosoft.ContainerService/managedClustersresource type.
Read and write permissions on theMicrosoft.ContainerService/managedClustersresource type.
Microsoft.ContainerService/managedClusters
Read and write permissions on these resource types:Microsoft.KubernetesConfiguration/extensionsMicrosoft.KubernetesConfiguration/fluxConfigurations
Read and write permissions on these resource types:
Microsoft.KubernetesConfiguration/extensions
Microsoft.KubernetesConfiguration/extensions
Microsoft.KubernetesConfiguration/fluxConfigurations
Microsoft.KubernetesConfiguration/fluxConfigurations
Registrationof the following Azure resource providers:Microsoft.ContainerServiceMicrosoft.KubernetesMicrosoft.KubernetesConfiguration
Registrationof the following Azure resource providers:
Microsoft.ContainerService
Microsoft.Kubernetes
Microsoft.KubernetesConfiguration
GitOps is currently supported inall regions that Azure Arc-enabled Kubernetes supports. GitOps is currently supported in a subset of the regions that AKS supports. The GitOps service is adding new supported regions on a regular cadence.
The most recent version of the Flux v2 extension and the two previous versions (N-2) are supported. We generally recommend that you use the most recent version of the extension.
The GitOps agents require outbound (egress) TCP to the repo source on either port 22 (SSH) or port 443 (HTTPS) to function. The agents also require access to the following outbound URLs:
https://management.azure.com
https://<region>.dp.kubernetesconfiguration.azure.com
<region>
https://login.microsoftonline.com
https://mcr.microsoft.com
Apply a Flux configuration
Use thek8s-configurationAzure CLI extension or the Azure portal to enable GitOps in an AKS or Arc-enabled Kubernetes cluster. For a demonstration, use the publicgitops-flux2-kustomize-helm-mtrepository.
k8s-configuration
Important
The demonstration repo is designed to simplify your use of this tutorial and illustrate key principles. To keep up to date, the repo can occasionally get breaking changes from version upgrades. These changes don't affect new use of this tutorial, only previous applications. For more information, see thebreaking change disclaimer.
Azure CLI
Azure portal
The following example uses theaz k8s-configuration flux createcommand to apply a Flux configuration to a cluster, using the following values and settings:
az k8s-configuration flux create
The resource group that contains the cluster isflux-demo-rg.
flux-demo-rg
The name of the Azure Arc cluster isflux-demo-arc.
flux-demo-arc
The cluster type is Azure Arc (-t connectedClusters), but this example also works with AKS (-t managedClusters).
-t connectedClusters
-t managedClusters
The name of the Flux configuration iscluster-config.
cluster-config
The namespace for configuration installation iscluster-config.
cluster-config
The URL for the public Git repository ishttps://github.com/Azure/gitops-flux2-kustomize-helm-mt.
https://github.com/Azure/gitops-flux2-kustomize-helm-mt
The Git repository branch ismain.
main
The scope of the configuration iscluster. This scope gives the operators permissions to make changes throughout cluster. To usenamespacescope with this tutorial,see the changes needed.
cluster
namespace
Two kustomizations are specified with namesinfraandapps. Each is associated with a path in the repository.
infra
apps
Theappskustomization depends on theinfrakustomization. (Theinfrakustomization must finish before theappskustomization runs.)
apps
infra
infra
apps
Setprune=trueon both kustomizations. This setting ensures that the objects that Flux deployed to the cluster are cleaned up if they're removed from the repository, or if the Flux configuration or kustomizations are deleted.
prune=true
az k8s-configuration flux create -g flux-demo-rg \
-c flux-demo-arc \
-n cluster-config \
--namespace cluster-config \
-t connectedClusters \
--scope cluster \
-u https://github.com/Azure/gitops-flux2-kustomize-helm-mt \
--branch main  \
--kustomization name=infra path=./infrastructure prune=true \
--kustomization name=apps path=./apps/staging prune=true dependsOn=\["infra"\]
az k8s-configuration flux create -g flux-demo-rg \
-c flux-demo-arc \
-n cluster-config \
--namespace cluster-config \
-t connectedClusters \
--scope cluster \
-u https://github.com/Azure/gitops-flux2-kustomize-helm-mt \
--branch main  \
--kustomization name=infra path=./infrastructure prune=true \
--kustomization name=apps path=./apps/staging prune=true dependsOn=\["infra"\]
Themicrosoft.fluxextension is installed on the cluster (if it wasn't already installed in a previous GitOps deployment).
microsoft.flux
Tip
Theaz k8s-configuration flux createcommand deploys themicrosoft.fluxextension to the cluster and creates the configuration. In some scenarios, you may want to create the flux extension instance separately before you create your configuration resources. To do so, use theaz k8s-extension createcommand tocreate an instance of the extension on your cluster.
az k8s-configuration flux create
microsoft.flux
az k8s-extension create
When the flux configuration is first installed, the initial compliance state may bePendingorNon-compliantbecause reconciliation is still ongoing. After a minute or so, query the configuration again to see the final compliance state.
Pending
Non-compliant
az k8s-configuration flux show -g flux-demo-rg -c flux-demo-arc -n cluster-config -t connectedClusters
az k8s-configuration flux show -g flux-demo-rg -c flux-demo-arc -n cluster-config -t connectedClusters
To confirm that the deployment was successful, run the following command:
az k8s-configuration flux show -g flux-demo-rg -c flux-demo-arc -n cluster-config -t connectedClusters
az k8s-configuration flux show -g flux-demo-rg -c flux-demo-arc -n cluster-config -t connectedClusters
With a successful deployment the following namespaces are created:
flux-system: Holds the Flux extension controllers.
flux-system
cluster-config: Holds the Flux configuration objects.
cluster-config
nginx,podinfo,redis: Namespaces for workloads described in manifests in the Git repository.
nginx
podinfo
redis
To confirm the namespaces, run the following command:
kubectl get namespaces
kubectl get namespaces
Theflux-systemnamespace contains the Flux extension objects:
flux-system
Azure Flux controllers:fluxconfig-agent,fluxconfig-controller
fluxconfig-agent
fluxconfig-controller
OSS Flux controllers:source-controller,kustomize-controller,helm-controller,notification-controller
source-controller
kustomize-controller
helm-controller
notification-controller
The Flux agent and controller pods should be in a running state. Confirm this using the following command:
kubectl get pods -n flux-system

NAME                                      READY   STATUS    RESTARTS   AGE
fluxconfig-agent-9554ffb65-jqm8g          2/2     Running   0          21m
fluxconfig-controller-9d99c54c8-nztg8     2/2     Running   0          21m
helm-controller-59cc74dbc5-77772          1/1     Running   0          21m
kustomize-controller-5fb7d7b9d5-cjdhx     1/1     Running   0          21m
notification-controller-7d45678bc-fvlvr   1/1     Running   0          21m
source-controller-df7dc97cd-4drh2         1/1     Running   0          21m
kubectl get pods -n flux-system

NAME                                      READY   STATUS    RESTARTS   AGE
fluxconfig-agent-9554ffb65-jqm8g          2/2     Running   0          21m
fluxconfig-controller-9d99c54c8-nztg8     2/2     Running   0          21m
helm-controller-59cc74dbc5-77772          1/1     Running   0          21m
kustomize-controller-5fb7d7b9d5-cjdhx     1/1     Running   0          21m
notification-controller-7d45678bc-fvlvr   1/1     Running   0          21m
source-controller-df7dc97cd-4drh2         1/1     Running   0          21m
The namespacecluster-confighas the Flux configuration objects.
cluster-config
kubectl get crds

NAME                                                   CREATED AT
alerts.notification.toolkit.fluxcd.io                  2022-04-06T17:15:48Z
arccertificates.clusterconfig.azure.com                2022-03-28T21:45:19Z
azureclusteridentityrequests.clusterconfig.azure.com   2022-03-28T21:45:19Z
azureextensionidentities.clusterconfig.azure.com       2022-03-28T21:45:19Z
buckets.source.toolkit.fluxcd.io                       2022-04-06T17:15:48Z
connectedclusters.arc.azure.com                        2022-03-28T21:45:19Z
customlocationsettings.clusterconfig.azure.com         2022-03-28T21:45:19Z
extensionconfigs.clusterconfig.azure.com               2022-03-28T21:45:19Z
fluxconfigs.clusterconfig.azure.com                    2022-04-06T17:15:48Z
gitconfigs.clusterconfig.azure.com                     2022-03-28T21:45:19Z
gitrepositories.source.toolkit.fluxcd.io               2022-04-06T17:15:48Z
helmcharts.source.toolkit.fluxcd.io                    2022-04-06T17:15:48Z
helmreleases.helm.toolkit.fluxcd.io                    2022-04-06T17:15:48Z
helmrepositories.source.toolkit.fluxcd.io              2022-04-06T17:15:48Z
imagepolicies.image.toolkit.fluxcd.io                  2022-04-06T17:15:48Z
imagerepositories.image.toolkit.fluxcd.io              2022-04-06T17:15:48Z
imageupdateautomations.image.toolkit.fluxcd.io         2022-04-06T17:15:48Z
kustomizations.kustomize.toolkit.fluxcd.io             2022-04-06T17:15:48Z
providers.notification.toolkit.fluxcd.io               2022-04-06T17:15:48Z
receivers.notification.toolkit.fluxcd.io               2022-04-06T17:15:48Z
volumesnapshotclasses.snapshot.storage.k8s.io          2022-03-28T21:06:12Z
volumesnapshotcontents.snapshot.storage.k8s.io         2022-03-28T21:06:12Z
volumesnapshots.snapshot.storage.k8s.io                2022-03-28T21:06:12Z
websites.extensions.example.com                        2022-03-30T23:42:32Z
kubectl get crds

NAME                                                   CREATED AT
alerts.notification.toolkit.fluxcd.io                  2022-04-06T17:15:48Z
arccertificates.clusterconfig.azure.com                2022-03-28T21:45:19Z
azureclusteridentityrequests.clusterconfig.azure.com   2022-03-28T21:45:19Z
azureextensionidentities.clusterconfig.azure.com       2022-03-28T21:45:19Z
buckets.source.toolkit.fluxcd.io                       2022-04-06T17:15:48Z
connectedclusters.arc.azure.com                        2022-03-28T21:45:19Z
customlocationsettings.clusterconfig.azure.com         2022-03-28T21:45:19Z
extensionconfigs.clusterconfig.azure.com               2022-03-28T21:45:19Z
fluxconfigs.clusterconfig.azure.com                    2022-04-06T17:15:48Z
gitconfigs.clusterconfig.azure.com                     2022-03-28T21:45:19Z
gitrepositories.source.toolkit.fluxcd.io               2022-04-06T17:15:48Z
helmcharts.source.toolkit.fluxcd.io                    2022-04-06T17:15:48Z
helmreleases.helm.toolkit.fluxcd.io                    2022-04-06T17:15:48Z
helmrepositories.source.toolkit.fluxcd.io              2022-04-06T17:15:48Z
imagepolicies.image.toolkit.fluxcd.io                  2022-04-06T17:15:48Z
imagerepositories.image.toolkit.fluxcd.io              2022-04-06T17:15:48Z
imageupdateautomations.image.toolkit.fluxcd.io         2022-04-06T17:15:48Z
kustomizations.kustomize.toolkit.fluxcd.io             2022-04-06T17:15:48Z
providers.notification.toolkit.fluxcd.io               2022-04-06T17:15:48Z
receivers.notification.toolkit.fluxcd.io               2022-04-06T17:15:48Z
volumesnapshotclasses.snapshot.storage.k8s.io          2022-03-28T21:06:12Z
volumesnapshotcontents.snapshot.storage.k8s.io         2022-03-28T21:06:12Z
volumesnapshots.snapshot.storage.k8s.io                2022-03-28T21:06:12Z
websites.extensions.example.com                        2022-03-30T23:42:32Z
Confirm other details of the configuration by using the following commands.
kubectl get fluxconfigs -A

NAMESPACE        NAME             SCOPE     URL                                                       PROVISION   AGE
cluster-config   cluster-config   cluster   https://github.com/Azure/gitops-flux2-kustomize-helm-mt   Succeeded   44m
kubectl get fluxconfigs -A

NAMESPACE        NAME             SCOPE     URL                                                       PROVISION   AGE
cluster-config   cluster-config   cluster   https://github.com/Azure/gitops-flux2-kustomize-helm-mt   Succeeded   44m
kubectl get gitrepositories -A

NAMESPACE        NAME             URL                                                       READY   STATUS                                                            AGE
cluster-config   cluster-config   https://github.com/Azure/gitops-flux2-kustomize-helm-mt   True    Fetched revision: main/4f1bdad4d0a54b939a5e3d52c51464f67e474fcf   45m
kubectl get gitrepositories -A

NAMESPACE        NAME             URL                                                       READY   STATUS                                                            AGE
cluster-config   cluster-config   https://github.com/Azure/gitops-flux2-kustomize-helm-mt   True    Fetched revision: main/4f1bdad4d0a54b939a5e3d52c51464f67e474fcf   45m
kubectl get helmreleases -A

NAMESPACE        NAME      READY   STATUS                             AGE
cluster-config   nginx     True    Release reconciliation succeeded   66m
cluster-config   podinfo   True    Release reconciliation succeeded   66m
cluster-config   redis     True    Release reconciliation succeeded   66m
kubectl get helmreleases -A

NAMESPACE        NAME      READY   STATUS                             AGE
cluster-config   nginx     True    Release reconciliation succeeded   66m
cluster-config   podinfo   True    Release reconciliation succeeded   66m
cluster-config   redis     True    Release reconciliation succeeded   66m
kubectl get kustomizations -A


NAMESPACE        NAME                   READY   STATUS                                                            AGE
cluster-config   cluster-config-apps    True    Applied revision: main/4f1bdad4d0a54b939a5e3d52c51464f67e474fcf   65m
cluster-config   cluster-config-infra   True    Applied revision: main/4f1bdad4d0a54b939a5e3d52c51464f67e474fcf   65m
kubectl get kustomizations -A


NAMESPACE        NAME                   READY   STATUS                                                            AGE
cluster-config   cluster-config-apps    True    Applied revision: main/4f1bdad4d0a54b939a5e3d52c51464f67e474fcf   65m
cluster-config   cluster-config-infra   True    Applied revision: main/4f1bdad4d0a54b939a5e3d52c51464f67e474fcf   65m
Workloads are deployed from manifests in the Git repository.
kubectl get deploy -n nginx

NAME                                       READY   UP-TO-DATE   AVAILABLE   AGE
nginx-ingress-controller                   1/1     1            1           67m
nginx-ingress-controller-default-backend   1/1     1            1           67m

kubectl get deploy -n podinfo

NAME      READY   UP-TO-DATE   AVAILABLE   AGE
podinfo   1/1     1            1           68m

kubectl get all -n redis

NAME                 READY   STATUS    RESTARTS   AGE
pod/redis-master-0   1/1     Running   0          68m

NAME                     TYPE        CLUSTER-IP    EXTERNAL-IP   PORT(S)    AGE
service/redis-headless   ClusterIP   None          <none>        6379/TCP   68m
service/redis-master     ClusterIP   10.0.13.182   <none>        6379/TCP   68m

NAME                            READY   AGE
statefulset.apps/redis-master   1/1     68m
kubectl get deploy -n nginx

NAME                                       READY   UP-TO-DATE   AVAILABLE   AGE
nginx-ingress-controller                   1/1     1            1           67m
nginx-ingress-controller-default-backend   1/1     1            1           67m

kubectl get deploy -n podinfo

NAME      READY   UP-TO-DATE   AVAILABLE   AGE
podinfo   1/1     1            1           68m

kubectl get all -n redis

NAME                 READY   STATUS    RESTARTS   AGE
pod/redis-master-0   1/1     Running   0          68m

NAME                     TYPE        CLUSTER-IP    EXTERNAL-IP   PORT(S)    AGE
service/redis-headless   ClusterIP   None          <none>        6379/TCP   68m
service/redis-master     ClusterIP   10.0.13.182   <none>        6379/TCP   68m

NAME                            READY   AGE
statefulset.apps/redis-master   1/1     68m
For some scenarios, you may wish to change which Flux controllers are installed with the Flux cluster extension.
Thesource,helm,kustomize, andnotificationFlux controllers are installed by default. Theimage-automationandimage-reflectorcontrollers, used to update a Git repository when new container images are available,  must be enabled explicitly.
source
helm
kustomize
notification
image-automation
image-reflector
You can use thek8s-extensioncommand to change the default options:
k8s-extension
--config source-controller.enabled=<true/false>(defaulttrue)
--config source-controller.enabled=<true/false>
true
--config helm-controller.enabled=<true/false>(defaulttrue)
--config helm-controller.enabled=<true/false>
true
--config kustomize-controller.enabled=<true/false>(defaulttrue)
--config kustomize-controller.enabled=<true/false>
true
--config notification-controller.enabled=<true/false>(defaulttrue)
--config notification-controller.enabled=<true/false>
true
--config image-automation-controller.enabled=<true/false>(defaultfalse)
--config image-automation-controller.enabled=<true/false>
false
--config image-reflector-controller.enabled=<true/false>(defaultfalse)
--config image-reflector-controller.enabled=<true/false>
false
For instance, to disable notifications, you can setnotification-controller.enabledtofalse.
notification-controller.enabled
false
This example command installs theimage-reflectorandimage-automationcontrollers. If the Flux extension was created automatically when a Flux configuration was first created, the extension name isflux.
image-reflector
image-automation
flux
az k8s-extension create -g <cluster_resource_group> -c <cluster_name> -t <connectedClusters or managedClusters or provisionedClusters> --name flux --extension-type microsoft.flux --config image-automation-controller.enabled=true image-reflector-controller.enabled=true
az k8s-extension create -g <cluster_resource_group> -c <cluster_name> -t <connectedClusters or managedClusters or provisionedClusters> --name flux --extension-type microsoft.flux --config image-automation-controller.enabled=true image-reflector-controller.enabled=true
For AKS clusters, one of the authentication options to use is kubelet identity. By default, AKS creates its own kubelet identity in the managed resource group. If you prefer, you can use aprecreated kubelet managed identity. To do so, add the parameter--config useKubeletIdentity=trueat the time of Flux extension installation.
--config useKubeletIdentity=true
az k8s-extension create --resource-group <resource-group> --cluster-name <cluster-name> --cluster-type managedClusters --name flux --extension-type microsoft.flux --config useKubeletIdentity=true
az k8s-extension create --resource-group <resource-group> --cluster-name <cluster-name> --cluster-type managedClusters --name flux --extension-type microsoft.flux --config useKubeletIdentity=true
Flux controllers require anonrootSecurity Context Constraintto properly provision pods on the cluster. These constraints must be added to the cluster before deploying themicrosoft.fluxextension.
microsoft.flux
NS="flux-system"
oc adm policy add-scc-to-user nonroot system:serviceaccount:$NS:kustomize-controller
oc adm policy add-scc-to-user nonroot system:serviceaccount:$NS:helm-controller
oc adm policy add-scc-to-user nonroot system:serviceaccount:$NS:source-controller
oc adm policy add-scc-to-user nonroot system:serviceaccount:$NS:notification-controller
oc adm policy add-scc-to-user nonroot system:serviceaccount:$NS:image-automation-controller
oc adm policy add-scc-to-user nonroot system:serviceaccount:$NS:image-reflector-controller
NS="flux-system"
oc adm policy add-scc-to-user nonroot system:serviceaccount:$NS:kustomize-controller
oc adm policy add-scc-to-user nonroot system:serviceaccount:$NS:helm-controller
oc adm policy add-scc-to-user nonroot system:serviceaccount:$NS:source-controller
oc adm policy add-scc-to-user nonroot system:serviceaccount:$NS:notification-controller
oc adm policy add-scc-to-user nonroot system:serviceaccount:$NS:image-automation-controller
oc adm policy add-scc-to-user nonroot system:serviceaccount:$NS:image-reflector-controller
For more information on OpenShift guidance for onboarding Flux, see theFlux documentation.
The Azure portal is useful for managing GitOps configurations and the Flux extension in Azure Arc-enabled Kubernetes or AKS clusters. In the Azure portal, you can see all of the Flux configurations associated with each cluster and get detailed information, including the overall compliance state of each cluster.
Note
Some options aren't currently supported in the Azure portal, such as suspending continuous reconciliation, controlling which controllers are deployed with the Flux cluster extension, and using Kubelet identity as authentication method for AKS clusters. To use these options, see the Azure CLI steps.
Follow these steps to apply a sample Flux configuration to a cluster. As part of this process, Azure installs themicrosoft.fluxextension on the cluster, if it wasn't already installed in a previous deployment.
microsoft.flux
Navigate to your cluster in the Azure portal.
Navigate to your cluster in the Azure portal.
From the service menu, underSettings, selectGitOps.
From the service menu, underSettings, selectGitOps.
SelectCreate.
SelectCreate.
In theBasicssection:Enter a name for the configuration.Enter the namespace within which to install the Flux custom resources. You can use an existing namespace, or specify a new one to be created when the configuration is deployed.UnderScope, selectClusterso that the Flux operator has access to apply the configuration to all namespaces in the cluster. To usenamespacescope with this tutorial,see the changes needed.SelectNextto continue to theSourcesection.
In theBasicssection:
Enter a name for the configuration.
Enter the namespace within which to install the Flux custom resources. You can use an existing namespace, or specify a new one to be created when the configuration is deployed.
UnderScope, selectClusterso that the Flux operator has access to apply the configuration to all namespaces in the cluster. To usenamespacescope with this tutorial,see the changes needed.
namespace
SelectNextto continue to theSourcesection.

In theSourcesection:InSource type, selectGit Repository.Enter the URL for the repository where the Kubernetes manifests are located:https://github.com/Azure/gitops-flux2-kustomize-helm-mt.For reference type, selectBranch. LeaveBranchset tomain.ForRepository type, selectPublic.Leave the other options set to the default, then selectNext.
In theSourcesection:
InSource type, selectGit Repository.
Enter the URL for the repository where the Kubernetes manifests are located:https://github.com/Azure/gitops-flux2-kustomize-helm-mt.
https://github.com/Azure/gitops-flux2-kustomize-helm-mt
For reference type, selectBranch. LeaveBranchset tomain.
ForRepository type, selectPublic.
Leave the other options set to the default, then selectNext.

In theKustomizationssection, create twokustomizations:infrastructureandstaging. These kustomizations are Flux resources, each associated with a path in the repository, that represent the set of manifests that Flux should reconcile to the cluster.SelectCreate.In theCreate a Kustomizationscreen:ForInstance name, enterinfrastructure.ForPath, enter./infrastructure.Check the box forPrune. This setting ensures that the objects that Flux deployed to the cluster are cleaned up if they're removed from the repository, or if the Flux configuration or kustomizations are deleted.Leave the other options as is, then selectSaveto create theinfrastructurekustomization.Theinfrastructurekustomization now appears in theKustomizationssection. To create the next kustomization, selectCreateagain.In theCreate a Kustomizationscreen:ForInstance name, enterstaging.ForPath, enter./apps/staging.Check the box forPrune.In theDepends onbox, selectinfrastructure.Leave the other options as is, then selectSaveto create thestagingkustomization.You now should see both kustomizations shown in theKustomizationssection. SelectNextto continue.
In theKustomizationssection, create twokustomizations:infrastructureandstaging. These kustomizations are Flux resources, each associated with a path in the repository, that represent the set of manifests that Flux should reconcile to the cluster.
infrastructure
staging
SelectCreate.
SelectCreate.
In theCreate a Kustomizationscreen:ForInstance name, enterinfrastructure.ForPath, enter./infrastructure.Check the box forPrune. This setting ensures that the objects that Flux deployed to the cluster are cleaned up if they're removed from the repository, or if the Flux configuration or kustomizations are deleted.Leave the other options as is, then selectSaveto create theinfrastructurekustomization.
In theCreate a Kustomizationscreen:
ForInstance name, enterinfrastructure.
ForInstance name, enterinfrastructure.
ForPath, enter./infrastructure.
ForPath, enter./infrastructure.
Check the box forPrune. This setting ensures that the objects that Flux deployed to the cluster are cleaned up if they're removed from the repository, or if the Flux configuration or kustomizations are deleted.
Check the box forPrune. This setting ensures that the objects that Flux deployed to the cluster are cleaned up if they're removed from the repository, or if the Flux configuration or kustomizations are deleted.
Leave the other options as is, then selectSaveto create theinfrastructurekustomization.
Leave the other options as is, then selectSaveto create theinfrastructurekustomization.
infrastructure

Theinfrastructurekustomization now appears in theKustomizationssection. To create the next kustomization, selectCreateagain.
Theinfrastructurekustomization now appears in theKustomizationssection. To create the next kustomization, selectCreateagain.
infrastructure
In theCreate a Kustomizationscreen:ForInstance name, enterstaging.ForPath, enter./apps/staging.Check the box forPrune.In theDepends onbox, selectinfrastructure.Leave the other options as is, then selectSaveto create thestagingkustomization.
In theCreate a Kustomizationscreen:
ForInstance name, enterstaging.
ForInstance name, enterstaging.
ForPath, enter./apps/staging.
ForPath, enter./apps/staging.
Check the box forPrune.
Check the box forPrune.
In theDepends onbox, selectinfrastructure.
In theDepends onbox, selectinfrastructure.
Leave the other options as is, then selectSaveto create thestagingkustomization.
Leave the other options as is, then selectSaveto create thestagingkustomization.
staging

You now should see both kustomizations shown in theKustomizationssection. SelectNextto continue.
You now should see both kustomizations shown in theKustomizationssection. SelectNextto continue.
Review the options you selected in the previous steps. Then selectCreateto finish creating your GitOps configuration.
Review the options you selected in the previous steps. Then selectCreateto finish creating your GitOps configuration.
To view all of the configurations for a cluster, navigate to the cluster and selectGitOpsfrom the service menu.
Select the name of a configuration to view more details such as the configuration's status, properties, and source. You can then selectConfiguration objectsto view all of the objects that were created to enable the GitOps configuration, including the compliance state and other details about each object.
Tosee other Kubernetes resources deployed on the cluster, return to the cluster overview page and selectKubernetes resources (preview)from the service menu.
To view detailed conditions for a configuration object, select its name.

For more information, seeMonitor GitOps (Flux v2) status and activity.
Work with parameters
Flux supports many parameters to enable various scenarios. For a description of all parameters that Flux supports, see theofficial Flux documentation. Flux in Azure doesn't support all parameters yet. Let us know if a parameter you need is missing from the Azure implementation.
For information about available parameters and how to use them, seeGitOps (Flux v2) supported parameters.
Work with local secret authentication reference
To use a local secret authentication reference, the secret must exist within the same namespace where thefluxConfigurationis deployed. The secret must also contain all of the authentication parameters needed for the source.
fluxConfiguration
For information on creating secrets for variousfluxConfigurationsources, seeLocal secret for authentication with source.
fluxConfiguration
Manage cluster configuration by using the Flux Kustomize controller
TheFlux Kustomize controlleris installed as part of themicrosoft.fluxcluster extension. It allows the declarative management of cluster configuration and application deployment by using Kubernetes manifests synced from a Git repository. These Kubernetes manifests can optionally include akustomize.yamlfile.
microsoft.flux
For usage details, see the following resources:
Flux Kustomize controller
Kustomize reference documents
The kustomization file
Kustomize project
Kustomize guides
Manage Helm chart releases by using the Flux Helm controller
The Flux Helm controller is installed as part of themicrosoft.fluxcluster extension. It allows you to declaratively manage Helm chart releases with Kubernetes manifests that you maintain in your Git repository.
microsoft.flux
For usage details, see the following resources:
Flux for Helm users
Manage Helm releases
Migrate to the Helm controller
Helm controller
Tip
Because of how Helm handles index files, processing Helm charts is an expensive operation and can have a high memory footprint. As a result, reconciling a large number of Helm charts at once can cause memory spikes andOOMKillederrors. By default, the controller sets its memory limit at 1Gi and its memory requests at 64Mi. To increase this limit and requests due to a high number of large Helm chart reconciliations, run the following command after installing the microsoft.flux extension:
OOMKilled
az k8s-extension update -g <resource-group> -c <cluster-name> -n flux -t connectedClusters --config source-controller.resources.limits.memory=2Gi source-controller.resources.requests.memory=300Mi
az k8s-extension update -g <resource-group> -c <cluster-name> -n flux -t connectedClusters --config source-controller.resources.limits.memory=2Gi source-controller.resources.requests.memory=300Mi
Use the GitRepository source for Helm charts
If your Helm charts are stored in theGitRepositorysource that you configure as part of thefluxConfigurationsresource, you can indicate that the configured source should be used as the source of the Helm charts by addingclusterconfig.azure.com/use-managed-source: "true"to your HelmRelease.yaml file, as shown in the following example:
GitRepository
fluxConfigurations
clusterconfig.azure.com/use-managed-source: "true"
---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: somename
  namespace: somenamespace
  annotations:
    clusterconfig.azure.com/use-managed-source: "true"
spec:
  ...
---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: somename
  namespace: somenamespace
  annotations:
    clusterconfig.azure.com/use-managed-source: "true"
spec:
  ...
When you use this annotation, the deployed HelmRelease is patched with the reference to the configured source. Currently, onlyGitRepositorysource is supported.
GitRepository
Helm drift detection
Drift detection for Helm releasesisn't enabled by default. Starting withmicrosoft.fluxv1.7.5, you can enable Helm drift detection by running the following command:
microsoft.flux
az k8s-extension update --resource-group <resource-group> --cluster-name <cluster-name> --name flux --cluster-type <cluster-type> --config helm-controller.detectDrift=true
az k8s-extension update --resource-group <resource-group> --cluster-name <cluster-name> --name flux --cluster-type <cluster-type> --config helm-controller.detectDrift=true
Strict post-build variable substitution
Strict post-build variable substitutionis available starting withmicrosoft.fluxv1.13.1.
microsoft.flux
To create a Flux extension with strict substitution policy enabled, run this command:
az k8s-extension create --resource-group <resource-group> --cluster-name <cluster-name> --cluster-type <cluster-type> --name flux --extension-type microsoft.flux --config kustomize-controller.strict-substitution-mode=true
az k8s-extension create --resource-group <resource-group> --cluster-name <cluster-name> --cluster-type <cluster-type> --name flux --extension-type microsoft.flux --config kustomize-controller.strict-substitution-mode=true
To update an existing Flux extension to enable strict substitution policy, run this command:
az k8s-extension update --resource-group <resource-group> --cluster-name <cluster-name> --cluster-type <cluster-type> --name flux --config kustomize-controller.strict-substitution-mode=true
az k8s-extension update --resource-group <resource-group> --cluster-name <cluster-name> --cluster-type <cluster-type> --name flux --config kustomize-controller.strict-substitution-mode=true
Vertical scaling
Support for vertical scaling is available starting withmicrosoft.fluxv1.12.0. Currently, only specific parameters described in theFlux vertical scaling documentationare natively supported. Other parameters may be manually applied to the cluster.
microsoft.flux
To increase resource limits on controllers beyond thecurrent limits, run this command, changing the specific resource type and value as needed:
az k8s-extension update --resource-group <resource-group> --cluster-name <cluster-name> --cluster-type <cluster-type> --name flux --config kustomize-controller.resources.limits.memory=2Gi kustomize-controller.resources.limits.cpu=2000m
az k8s-extension update --resource-group <resource-group> --cluster-name <cluster-name> --cluster-type <cluster-type> --name flux --config kustomize-controller.resources.limits.memory=2Gi kustomize-controller.resources.limits.cpu=2000m
To increase the number of reconciliations that can be performed in parallel, run this command:
az k8s-extension update --resource-group <resource-group> --cluster-name <cluster-name> --cluster-type <cluster-type> --name flux --config kustomize-controller.concurrent=6 kustomize-controller.requeue-dependency=50s
az k8s-extension update --resource-group <resource-group> --cluster-name <cluster-name> --cluster-type <cluster-type> --name flux --config kustomize-controller.concurrent=6 kustomize-controller.requeue-dependency=50s
To enable in-memory build, run this command:
az k8s-extension update --resource-group <resource-group> --cluster-name <cluster-name> --cluster-type <cluster-type> --name flux --config kustomize-controller.enable-in-memory-build=true
az k8s-extension update --resource-group <resource-group> --cluster-name <cluster-name> --cluster-type <cluster-type> --name flux --config kustomize-controller.enable-in-memory-build=true
Helm OOM watch
Starting withmicrosoft.fluxv1.7.5], you can enable Helm OOM watch. For more information, seeEnable Helm near OOM detection.
microsoft.flux
Be sure to review potentialremediation strategiesand apply them as needed when enabling this feature.
To enable OOM watch, run the following command:
az k8s-extension update --resource-group <resource-group> --cluster-name <cluster-name> --name flux --cluster-type <cluster-type> --config helm-controller.outOfMemoryWatch.enabled=true helm-controller.outOfMemoryWatch.memoryThreshold=70 helm-controller.outOfMemoryWatch.interval=700ms
az k8s-extension update --resource-group <resource-group> --cluster-name <cluster-name> --name flux --cluster-type <cluster-type> --config helm-controller.outOfMemoryWatch.enabled=true helm-controller.outOfMemoryWatch.memoryThreshold=70 helm-controller.outOfMemoryWatch.interval=700ms
If you don't specify values formemoryThresholdandoutOfMemoryWatch, the default memory threshold is set to 95%, with the interval at which to check the memory utilization set to 500 ms.
memoryThreshold
outOfMemoryWatch
Configurable log-level parameters
By default, thelog-levelfor Flux controllers is set toinfo. Starting withmicrosoft.fluxv1.8.3, you can modify these default settings using thek8s-extensioncommand as follows:
log-level
info
microsoft.flux
k8s-extension
--config helm-controller.log-level=<info/error/debug>
--config source-controller.log-level=<info/error/debug>
--config kustomize-controller.log-level=<info/error/debug>
--config notification-controller.log-level=<info/error/debug>
--config image-automation-controller.log-level=<info/error/debug>
--config image-reflector-controller.log-level=<info/error/debug>
--config helm-controller.log-level=<info/error/debug>
--config source-controller.log-level=<info/error/debug>
--config kustomize-controller.log-level=<info/error/debug>
--config notification-controller.log-level=<info/error/debug>
--config image-automation-controller.log-level=<info/error/debug>
--config image-reflector-controller.log-level=<info/error/debug>
Valid values aredebug,info, orerror. For instance, to change thelog-levelfor thesource-controllerandkustomize-controller, use the following command:
debug
info
error
log-level
source-controller
kustomize-controller
az k8s-extension update --resource-group <resource-group> --cluster-name <cluster-name> --cluster-type <cluster-type> --name flux --config source-controller.log-level=error kustomize-controller.log-level=error
az k8s-extension update --resource-group <resource-group> --cluster-name <cluster-name> --cluster-type <cluster-type> --name flux --config source-controller.log-level=error kustomize-controller.log-level=error
Starting withmicrosoft.fluxv1.9.1,fluxconfig-agentandfluxconfig-controllersupportinfoanderrorlog levels (but notdebug). To modify these options, use thek8s-extensioncommand:
microsoft.flux
fluxconfig-agent
fluxconfig-controller
info
error
debug
k8s-extension
--config fluxconfig-agent.log-level=<info/error>
--config fluxconfig-controller.log-level=<info/error>
--config fluxconfig-agent.log-level=<info/error>
--config fluxconfig-controller.log-level=<info/error>
For example, the following command changeslog-leveltoerror:
log-level
error
az k8s-extension update --resource-group <resource-group> --cluster-name <cluster-name> --cluster-type <cluster-type> --name flux --config fluxconfig-agent.log-level=error fluxconfig-controller.log-level=error
az k8s-extension update --resource-group <resource-group> --cluster-name <cluster-name> --cluster-type <cluster-type> --name flux --config fluxconfig-agent.log-level=error fluxconfig-controller.log-level=error
Configure annotation on Flux extension pods
When configuring a solution other than Azure Firewall,network and FQDN/application rulesare required for an AKS cluster. Starting withmicrosoft.fluxv1.11.1, Flux controller pods can now set the annotationkubernetes.azure.com/set-kube-service-host-fqdnin their pod specifications. This annotation allows traffic to the API Server's domain name even when a Layer 7 firewall is present, facilitating deployments during extension installation. To configure this annotation when using the Flux extension, use the following commands.
microsoft.flux
kubernetes.azure.com/set-kube-service-host-fqdn
# Create flux extension with annotation

az k8s-extension create --resource-group <resource-group> --cluster-name <cluster-name> --cluster-type <cluster-type> --name flux --extension-type microsoft.flux --config setKubeServiceHostFqdn=true
    
# Update flux extension with annotation

az k8s-extension update --resource-group <resource-group> --cluster-name <cluster-name> --cluster-type <cluster-type> --name flux --config setKubeServiceHostFqdn=true
# Create flux extension with annotation

az k8s-extension create --resource-group <resource-group> --cluster-name <cluster-name> --cluster-type <cluster-type> --name flux --extension-type microsoft.flux --config setKubeServiceHostFqdn=true
    
# Update flux extension with annotation

az k8s-extension update --resource-group <resource-group> --cluster-name <cluster-name> --cluster-type <cluster-type> --name flux --config setKubeServiceHostFqdn=true
Workload identity in Arc-enabled Kubernetes clusters and AKS clusters
You can create Flux configurations in clusters with workload identity enabled. Flux configurations inAKS clusters with workload identity enabledare supported starting withmicrosoft.fluxv1.8.0, and inAzure Arc-enabled clusters with workload identity enabledstarting withmicrosoft.fluxv.1.15.1.
microsoft.flux
microsoft.flux
To create Flux configurations in clusters with workload identity enabled, modify the extension as shown in the following steps.
Retrieve the OIDC issuer URL for yourAKS clusterorArc-enabled Kubernetes cluster.
Retrieve the OIDC issuer URL for yourAKS clusterorArc-enabled Kubernetes cluster.
Create amanaged identityand note its client ID and tenant ID.
Create amanaged identityand note its client ID and tenant ID.
Create the flux extension on the cluster, using the following command:az k8s-extension create --resource-group <resource_group_name> --cluster-name <aks_cluster_name> --cluster-type managedClusters --name flux --extension-type microsoft.flux --config workloadIdentity.enable=true workloadIdentity.azureClientId=<user_assigned_client_id> workloadIdentity.azureTenantId=<tenant_id>
Create the flux extension on the cluster, using the following command:
az k8s-extension create --resource-group <resource_group_name> --cluster-name <aks_cluster_name> --cluster-type managedClusters --name flux --extension-type microsoft.flux --config workloadIdentity.enable=true workloadIdentity.azureClientId=<user_assigned_client_id> workloadIdentity.azureTenantId=<tenant_id>
az k8s-extension create --resource-group <resource_group_name> --cluster-name <aks_cluster_name> --cluster-type managedClusters --name flux --extension-type microsoft.flux --config workloadIdentity.enable=true workloadIdentity.azureClientId=<user_assigned_client_id> workloadIdentity.azureTenantId=<tenant_id>
Establish a federated identity credential for yourAKS clusterorArc-enabled Kubernetes cluster. For example:# For source-controller
az identity federated-credential create --name ${FEDERATED_IDENTITY_CREDENTIAL_NAME} --identity-name "${USER_ASSIGNED_IDENTITY_NAME}" --resource-group "${RESOURCE_GROUP}" --issuer "${OIDC_ISSUER}" --subject system:serviceaccount:"flux-system":"source-controller" --audience api://AzureADTokenExchange

# For image-reflector controller if you plan to enable it during extension creation, it is not deployed by default
az identity federated-credential create --name ${FEDERATED_IDENTITY_CREDENTIAL_NAME} --identity-name "${USER_ASSIGNED_IDENTITY_NAME}" --resource-group "${RESOURCE_GROUP}" --issuer "${OIDC_ISSUER}" --subject system:serviceaccount:"flux-system":"image-reflector-controller" --audience api://AzureADTokenExchange

# For image-automation controller if you plan to enable it during extension creation, it is not deployed by default
az identity federated-credential create --name ${FEDERATED_IDENTITY_CREDENTIAL_NAME} --identity-name "${USER_ASSIGNED_IDENTITY_NAME}" --resource-group "${RESOURCE_GROUP}" --issuer "${OIDC_ISSUER}" --subject system:serviceaccount:"flux-system":"image-automation-controller" --audience api://AzureADTokenExchange

# For kustomize-controller
az identity federated-credential create --name ${FEDERATED_IDENTITY_CREDENTIAL_NAME} --identity-name "${USER_ASSIGNED_IDENTITY_NAME}" --resource-group "${RESOURCE_GROUP}" --issuer "${OIDC_ISSUER}" --subject system:serviceaccount:"flux-system":"kustomize-controller" --audience api://AzureADTokenExchange
Establish a federated identity credential for yourAKS clusterorArc-enabled Kubernetes cluster. For example:
# For source-controller
az identity federated-credential create --name ${FEDERATED_IDENTITY_CREDENTIAL_NAME} --identity-name "${USER_ASSIGNED_IDENTITY_NAME}" --resource-group "${RESOURCE_GROUP}" --issuer "${OIDC_ISSUER}" --subject system:serviceaccount:"flux-system":"source-controller" --audience api://AzureADTokenExchange

# For image-reflector controller if you plan to enable it during extension creation, it is not deployed by default
az identity federated-credential create --name ${FEDERATED_IDENTITY_CREDENTIAL_NAME} --identity-name "${USER_ASSIGNED_IDENTITY_NAME}" --resource-group "${RESOURCE_GROUP}" --issuer "${OIDC_ISSUER}" --subject system:serviceaccount:"flux-system":"image-reflector-controller" --audience api://AzureADTokenExchange

# For image-automation controller if you plan to enable it during extension creation, it is not deployed by default
az identity federated-credential create --name ${FEDERATED_IDENTITY_CREDENTIAL_NAME} --identity-name "${USER_ASSIGNED_IDENTITY_NAME}" --resource-group "${RESOURCE_GROUP}" --issuer "${OIDC_ISSUER}" --subject system:serviceaccount:"flux-system":"image-automation-controller" --audience api://AzureADTokenExchange

# For kustomize-controller
az identity federated-credential create --name ${FEDERATED_IDENTITY_CREDENTIAL_NAME} --identity-name "${USER_ASSIGNED_IDENTITY_NAME}" --resource-group "${RESOURCE_GROUP}" --issuer "${OIDC_ISSUER}" --subject system:serviceaccount:"flux-system":"kustomize-controller" --audience api://AzureADTokenExchange
# For source-controller
az identity federated-credential create --name ${FEDERATED_IDENTITY_CREDENTIAL_NAME} --identity-name "${USER_ASSIGNED_IDENTITY_NAME}" --resource-group "${RESOURCE_GROUP}" --issuer "${OIDC_ISSUER}" --subject system:serviceaccount:"flux-system":"source-controller" --audience api://AzureADTokenExchange

# For image-reflector controller if you plan to enable it during extension creation, it is not deployed by default
az identity federated-credential create --name ${FEDERATED_IDENTITY_CREDENTIAL_NAME} --identity-name "${USER_ASSIGNED_IDENTITY_NAME}" --resource-group "${RESOURCE_GROUP}" --issuer "${OIDC_ISSUER}" --subject system:serviceaccount:"flux-system":"image-reflector-controller" --audience api://AzureADTokenExchange

# For image-automation controller if you plan to enable it during extension creation, it is not deployed by default
az identity federated-credential create --name ${FEDERATED_IDENTITY_CREDENTIAL_NAME} --identity-name "${USER_ASSIGNED_IDENTITY_NAME}" --resource-group "${RESOURCE_GROUP}" --issuer "${OIDC_ISSUER}" --subject system:serviceaccount:"flux-system":"image-automation-controller" --audience api://AzureADTokenExchange

# For kustomize-controller
az identity federated-credential create --name ${FEDERATED_IDENTITY_CREDENTIAL_NAME} --identity-name "${USER_ASSIGNED_IDENTITY_NAME}" --resource-group "${RESOURCE_GROUP}" --issuer "${OIDC_ISSUER}" --subject system:serviceaccount:"flux-system":"kustomize-controller" --audience api://AzureADTokenExchange
Make sure the custom resource that needs to use workload identity sets.spec.providervalue toazurein the manifest. For example:apiVersion: source.toolkit.fluxcd.io/v1beta2
kind: HelmRepository
metadata:
  name: acrrepo
spec:
  interval: 10m0s
  type: <helm_repository_type>
  url: <helm_repository_link>
  provider: azure
Make sure the custom resource that needs to use workload identity sets.spec.providervalue toazurein the manifest. For example:
.spec.provider
azure
apiVersion: source.toolkit.fluxcd.io/v1beta2
kind: HelmRepository
metadata:
  name: acrrepo
spec:
  interval: 10m0s
  type: <helm_repository_type>
  url: <helm_repository_link>
  provider: azure
apiVersion: source.toolkit.fluxcd.io/v1beta2
kind: HelmRepository
metadata:
  name: acrrepo
spec:
  interval: 10m0s
  type: <helm_repository_type>
  url: <helm_repository_link>
  provider: azure
Be sure to provide proper permissions for workload identity for the resource that you want source-controller or image-reflector controller to pull. For example, if using Azure Container Registry,AcrPullpermissions are required.
Be sure to provide proper permissions for workload identity for the resource that you want source-controller or image-reflector controller to pull. For example, if using Azure Container Registry,AcrPullpermissions are required.
AcrPull
Use workload identity with Azure DevOps
To use workload identity with Azure DevOps, enable the following prerequisites:
Ensure that your Azure DevOps Organization isconnected to Microsoft Entra.
Confirm that workload identity is properly set up on your cluster, following the steps forAKS clustersorArc-enabled Kubernetes clusters.
Create a managed identity and federated credentials, and enable workload identity on the Flux extension's flux controller pods, as described earlier in this section.
Add the managed identity to the Azure DevOps organization as a user, ensuring that it has permissions to access the Azure DevOps repository. For detailed steps, seeUse service principals & managed identities in Azure DevOps.
Next, set the flux configuration'sgitRepositoryprovider to "azure" to enable credential-free authentication. This can be configured by using Bicep, ARM templates, or Azure CLI. For example, to set the provider using Azure CLI, run the following command:
gitRepository
az k8s-configuration flux update --cluster-name <cluster-name> --resource-group <resource-group> --cluster-type <cluster-type> --name flux --provider "azure"
az k8s-configuration flux update --cluster-name <cluster-name> --resource-group <resource-group> --cluster-type <cluster-type> --name flux --provider "azure"
Azure DevOps SSH-RSA deprecation
Azure DevOpsannounced the deprecation of SSH-RSAas a supported encryption method for connecting to Azure repositories using SSH. If you use SSH keys to connect to Azure repositories in Flux configurations, we recommend moving to more secure RSA-SHA2-256 or RSA-SHA2-512 keys.
When reconciling Flux configurations, you might see an error message indicating ssh-rsa is about to be deprecated or is unsupported. If so, update the host key algorithm used to establish SSH connections to Azure DevOps repositories from the Fluxsource-controllerandimage-automation-controller(if enabled) by using theaz k8s-extension updatecommand. For example:
source-controller
image-automation-controller
az k8s-extension update
az k8s-extension update --cluster-name <cluster-name> --resource-group <resource-group> --cluster-type <cluster-type> --name flux --config source-controller.ssh-host-key-args="--ssh-hostkey-algos=rsa-sha2-512,rsa-sha2-256"

az k8s-extension update --cluster-name <cluster-name> --resource-group <resource-group> --cluster-type <cluster-type> --name flux --config image-automation-controller.ssh-host-key-args="--ssh-hostkey-algos=rsa-sha2-512,rsa-sha2-256"
az k8s-extension update --cluster-name <cluster-name> --resource-group <resource-group> --cluster-type <cluster-type> --name flux --config source-controller.ssh-host-key-args="--ssh-hostkey-algos=rsa-sha2-512,rsa-sha2-256"

az k8s-extension update --cluster-name <cluster-name> --resource-group <resource-group> --cluster-type <cluster-type> --name flux --config image-automation-controller.ssh-host-key-args="--ssh-hostkey-algos=rsa-sha2-512,rsa-sha2-256"
For more information on Azure DevOps SSH-RSA deprecation,  seeEnd of SSH-RSA support for Azure Repos.
Delete the Flux configuration and extension
Use the following commands to delete your Flux configurations and, if desired, the Flux extension itself.
Azure CLI
Azure portal
The following command deletes both thefluxConfigurationsresource in Azure and the Flux configuration objects in the cluster. Because the Flux configuration was originally created with theprune=trueparameter for the kustomization, all of the objects created in the cluster based on manifests in the Git repository are removed when the Flux configuration is removed. However, this command doesn't remove the Flux extension itself.
fluxConfigurations
prune=true
az k8s-configuration flux delete -g flux-demo-rg -c flux-demo-arc -n cluster-config -t connectedClusters --yes
az k8s-configuration flux delete -g flux-demo-rg -c flux-demo-arc -n cluster-config -t connectedClusters --yes
When you delete the Flux extension, both themicrosoft.fluxextension resource in Azure and the Flux extension objects in the cluster are removed.
microsoft.flux
Important
Be sure to delete all Flux configurations in the cluster before you delete the Flux extension. Deleting the extension without first deleting the Flux configurations may leave your cluster in an unstable condition.
If the Flux extension was created automatically when the Flux configuration was first created, the extension name isflux.
flux
az k8s-extension delete -g flux-demo-rg -c flux-demo-arc -n flux -t connectedClusters --yes
az k8s-extension delete -g flux-demo-rg -c flux-demo-arc -n flux -t connectedClusters --yes
Tip
These commands use-t connectedClusters, which is appropriate for an Azure Arc-enabled Kubernetes cluster. For an AKS cluster, use-t managedClustersinstead.
-t connectedClusters
-t managedClusters
To delete a Flux configuration, navigate to the cluster where the configuration was created. In the service menu, underSettings, selectGitOps. Select the configuration you want to delete. From the top of the page, selectDelete, then selectDeleteagain when prompted to confirm.
When you delete a Flux configuration, all of the Flux configuration objects in the cluster are deleted. However, this action doesn't delete themicrosoft.fluxextension itself.
microsoft.flux
When you delete the Flux extension, both themicrosoft.fluxextension resource in Azure and the Flux extension objects in the cluster are removed.
microsoft.flux
Important
Be sure to delete all Flux configurations in the cluster before you delete the Flux extension. Deleting the extension without first deleting the Flux configurations may leave your cluster in an unstable condition.
For an Azure Arc-enabled Kubernetes cluster, navigate to the cluster. In the service menu, underSettings, selectExtensions. Select thefluxextension and selectUninstall, then confirm the deletion.
flux
For AKS clusters, you can't use the Azure portal to delete the extension. Instead, use the following Azure CLI command:
az k8s-extension delete -g <resource-group> -c <cluster-name> -n flux -t managedClusters --yes
az k8s-extension delete -g <resource-group> -c <cluster-name> -n flux -t managedClusters --yes
Next steps
Read more aboutconfigurations and GitOps.
Learn how touse Azure Policy to enforce GitOps at scale.
Learn aboutmonitoring GitOps (Flux v2) status and activity.
Feedback
Was this page helpful?
Additional resources