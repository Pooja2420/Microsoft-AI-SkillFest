Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Query JSON files using serverless SQL pool in Azure Synapse Analytics
Article
2023-04-24
13 contributors
In this article
In this article, you'll learn how to write a query using serverless SQL pool in Azure Synapse Analytics. The query's objective is to read JSON files usingOPENROWSET.
Standard JSON files where multiple JSON documents are stored as a JSON array.
Line-delimited JSON files, where JSON documents are separated with new-line character. Common extensions for these types of files arejsonl,ldjson, andndjson.
jsonl
ldjson
ndjson
Read JSON documents
The easiest way to see to the content of your JSON file is to provide the file URL to theOPENROWSETfunction, specify csvFORMAT, and set values0x0bforfieldterminatorandfieldquote. If you need to read line-delimited JSON files, then this is enough. If you have classic JSON file, you would need to set values0x0bforrowterminator.OPENROWSETfunction will parse JSON and return every document in the following format:
OPENROWSET
FORMAT
0x0b
fieldterminator
fieldquote
0x0b
rowterminator
OPENROWSET
If the file is publicly available, or if your Microsoft Entra identity can access this file, you should see the content of the file using the query like the one shown in the following examples.
Read JSON files
The following sample query reads JSON and line-delimited JSON files, and returns every document as a separate row.
select top 10 *
from openrowset(
        bulk 'https://pandemicdatalake.blob.core.windows.net/public/curated/covid-19/ecdc_cases/latest/ecdc_cases.jsonl',
        format = 'csv',
        fieldterminator ='0x0b',
        fieldquote = '0x0b'
    ) with (doc nvarchar(max)) as rows
go
select top 10 *
from openrowset(
        bulk 'https://pandemicdatalake.blob.core.windows.net/public/curated/covid-19/ecdc_cases/latest/ecdc_cases.json',
        format = 'csv',
        fieldterminator ='0x0b',
        fieldquote = '0x0b',
        rowterminator = '0x0b' --> You need to override rowterminator to read classic JSON
    ) with (doc nvarchar(max)) as rows
select top 10 *
from openrowset(
        bulk 'https://pandemicdatalake.blob.core.windows.net/public/curated/covid-19/ecdc_cases/latest/ecdc_cases.jsonl',
        format = 'csv',
        fieldterminator ='0x0b',
        fieldquote = '0x0b'
    ) with (doc nvarchar(max)) as rows
go
select top 10 *
from openrowset(
        bulk 'https://pandemicdatalake.blob.core.windows.net/public/curated/covid-19/ecdc_cases/latest/ecdc_cases.json',
        format = 'csv',
        fieldterminator ='0x0b',
        fieldquote = '0x0b',
        rowterminator = '0x0b' --> You need to override rowterminator to read classic JSON
    ) with (doc nvarchar(max)) as rows
The JSON document in the preceding sample query includes an array of objects. The query returns each object as a separate row in the result set. Make sure that you can access this file. If your file is protected with SAS key or custom identity, you would need to set upserver level credential for sql login.
Data source usage
The previous example uses full path to the file. As an alternative, you can create an external data source with the location that points to the root folder of the storage, and use that data source and the relative path to the file in theOPENROWSETfunction:
OPENROWSET
create external data source covid
with ( location = 'https://pandemicdatalake.blob.core.windows.net/public/curated/covid-19/ecdc_cases' );
go
select top 10 *
from openrowset(
        bulk 'latest/ecdc_cases.jsonl',
        data_source = 'covid',
        format = 'csv',
        fieldterminator ='0x0b',
        fieldquote = '0x0b'
    ) with (doc nvarchar(max)) as rows
go
select top 10 *
from openrowset(
        bulk 'latest/ecdc_cases.json',
        data_source = 'covid',
        format = 'csv',
        fieldterminator ='0x0b',
        fieldquote = '0x0b',
        rowterminator = '0x0b' --> You need to override rowterminator to read classic JSON
    ) with (doc nvarchar(max)) as rows
create external data source covid
with ( location = 'https://pandemicdatalake.blob.core.windows.net/public/curated/covid-19/ecdc_cases' );
go
select top 10 *
from openrowset(
        bulk 'latest/ecdc_cases.jsonl',
        data_source = 'covid',
        format = 'csv',
        fieldterminator ='0x0b',
        fieldquote = '0x0b'
    ) with (doc nvarchar(max)) as rows
go
select top 10 *
from openrowset(
        bulk 'latest/ecdc_cases.json',
        data_source = 'covid',
        format = 'csv',
        fieldterminator ='0x0b',
        fieldquote = '0x0b',
        rowterminator = '0x0b' --> You need to override rowterminator to read classic JSON
    ) with (doc nvarchar(max)) as rows
If a data source is protected with SAS key or custom identity, you can configuredata source with database scoped credential.
In the following sections, you can see how to query various types of JSON files.
Parse JSON documents
The queries in the previous examples return every JSON document as a single string in a separate row of the result set. You can use functionsJSON_VALUEandOPENJSONto parse the values in JSON documents and return them as relational values, as it's shown in the following example:
JSON_VALUE
OPENJSON
Sample JSON document
The query examples readjsonfiles containing documents with following structure:
{
    "date_rep":"2020-07-24",
    "day":24,"month":7,"year":2020,
    "cases":13,"deaths":0,
    "countries_and_territories":"Afghanistan",
    "geo_id":"AF",
    "country_territory_code":"AFG",
    "continent_exp":"Asia",
    "load_date":"2020-07-25 00:05:14",
    "iso_country":"AF"
}
{
    "date_rep":"2020-07-24",
    "day":24,"month":7,"year":2020,
    "cases":13,"deaths":0,
    "countries_and_territories":"Afghanistan",
    "geo_id":"AF",
    "country_territory_code":"AFG",
    "continent_exp":"Asia",
    "load_date":"2020-07-25 00:05:14",
    "iso_country":"AF"
}
Note
If these documents are stored as line-delimited JSON, you need to setFIELDTERMINATORandFIELDQUOTEto 0x0b. If you have standard JSON format you need to setROWTERMINATORto 0x0b.
FIELDTERMINATOR
FIELDQUOTE
ROWTERMINATOR
Query JSON files using JSON_VALUE
The query below shows you how to useJSON_VALUEto retrieve scalar values (date_rep,countries_and_territories,cases) from a JSON documents:
date_rep
countries_and_territories
cases
select
    JSON_VALUE(doc, '$.date_rep') AS date_reported,
    JSON_VALUE(doc, '$.countries_and_territories') AS country,
    CAST(JSON_VALUE(doc, '$.deaths') AS INT) as fatal,
    JSON_VALUE(doc, '$.cases') as cases,
    doc
from openrowset(
        bulk 'latest/ecdc_cases.jsonl',
        data_source = 'covid',
        format = 'csv',
        fieldterminator ='0x0b',
        fieldquote = '0x0b'
    ) with (doc nvarchar(max)) as rows
order by JSON_VALUE(doc, '$.geo_id') desc
select
    JSON_VALUE(doc, '$.date_rep') AS date_reported,
    JSON_VALUE(doc, '$.countries_and_territories') AS country,
    CAST(JSON_VALUE(doc, '$.deaths') AS INT) as fatal,
    JSON_VALUE(doc, '$.cases') as cases,
    doc
from openrowset(
        bulk 'latest/ecdc_cases.jsonl',
        data_source = 'covid',
        format = 'csv',
        fieldterminator ='0x0b',
        fieldquote = '0x0b'
    ) with (doc nvarchar(max)) as rows
order by JSON_VALUE(doc, '$.geo_id') desc
Once you extract JSON properties from a JSON document, you can define column aliases and optionally cast the textual value to some type.
Query JSON files using OPENJSON
The following query usesOPENJSON. It will retrieve COVID statistics reported in Serbia:
select
    *
from openrowset(
        bulk 'latest/ecdc_cases.jsonl',
        data_source = 'covid',
        format = 'csv',
        fieldterminator ='0x0b',
        fieldquote = '0x0b'
    ) with (doc nvarchar(max)) as rows
    cross apply openjson (doc)
        with (  date_rep datetime2,
                cases int,
                fatal int '$.deaths',
                country varchar(100) '$.countries_and_territories')
where country = 'Serbia'
order by country, date_rep desc;
select
    *
from openrowset(
        bulk 'latest/ecdc_cases.jsonl',
        data_source = 'covid',
        format = 'csv',
        fieldterminator ='0x0b',
        fieldquote = '0x0b'
    ) with (doc nvarchar(max)) as rows
    cross apply openjson (doc)
        with (  date_rep datetime2,
                cases int,
                fatal int '$.deaths',
                country varchar(100) '$.countries_and_territories')
where country = 'Serbia'
order by country, date_rep desc;
The results are functionally same as the results returned using theJSON_VALUEfunction. In some cases,OPENJSONmight have advantage overJSON_VALUE:
JSON_VALUE
OPENJSON
JSON_VALUE
In theWITHclause you can explicitly set the column aliases and the types for every property. You don't need to put theCASTfunction in every column inSELECTlist.
WITH
CAST
SELECT
OPENJSONmight be faster if you are returning a large number of properties. If you are returning just 1-2 properties, theOPENJSONfunction might be overhead.
OPENJSON
OPENJSON
You must use theOPENJSONfunction if you need to parse the array from each document, and join it with the parent row.
OPENJSON
Next steps
The next articles in this series will demonstrate how to:
Querying folders and multiple files
Create and use views
Feedback
Was this page helpful?
Additional resources