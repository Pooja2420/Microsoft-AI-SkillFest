Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Microsoft.MachineLearningServices workspaces/computes
Article
2025-02-18
2 contributors
In this article
Latest
2025-01-01-preview
2024-10-01
2024-10-01-preview
2024-07-01-preview
2024-04-01
2024-04-01-preview
2024-01-01-preview
2023-10-01
2023-08-01-preview
2023-06-01-preview
2023-04-01
2023-04-01-preview
2023-02-01-preview
2022-12-01-preview
2022-10-01
2022-10-01-preview
2022-06-01-preview
2022-05-01
2022-02-01-preview
2022-01-01-preview
2021-07-01
2021-04-01
2021-03-01-preview
2021-01-01
2020-09-01-preview
2020-08-01
2020-06-01
2020-05-15-preview
2020-05-01-preview
2020-04-01
2020-03-01
2020-02-18-preview
2020-01-01
2019-11-01
2019-06-01
2019-05-01
2018-11-19
2018-03-01-preview
Bicep resource definition
The workspaces/computes resource type can be deployed with operations that target:
Resource groups- Seeresource group deployment commands
For a list of changed properties in each API version, seechange log.
Resource format
To create a Microsoft.MachineLearningServices/workspaces/computes resource, add the following Bicep to your template.
resource symbolicname 'Microsoft.MachineLearningServices/workspaces/computes@2025-01-01-preview' = {
  parent: resourceSymbolicName
  identity: {
    type: 'string'
    userAssignedIdentities: {
      {customized property}: {}
    }
  }
  location: 'string'
  name: 'string'
  properties: {
    computeLocation: 'string'
    description: 'string'
    disableLocalAuth: bool
    resourceId: 'string'
    computeType: 'string'
    // For remaining properties, see Compute objects
  }
  sku: {
    capacity: int
    family: 'string'
    name: 'string'
    size: 'string'
    tier: 'string'
  }
  tags: {
    {customized property}: 'string'
  }
}
resource symbolicname 'Microsoft.MachineLearningServices/workspaces/computes@2025-01-01-preview' = {
  parent: resourceSymbolicName
  identity: {
    type: 'string'
    userAssignedIdentities: {
      {customized property}: {}
    }
  }
  location: 'string'
  name: 'string'
  properties: {
    computeLocation: 'string'
    description: 'string'
    disableLocalAuth: bool
    resourceId: 'string'
    computeType: 'string'
    // For remaining properties, see Compute objects
  }
  sku: {
    capacity: int
    family: 'string'
    name: 'string'
    size: 'string'
    tier: 'string'
  }
  tags: {
    {customized property}: 'string'
  }
}
Compute objects
Set thecomputeTypeproperty to specify the type of object.
ForAKS, use:
{
  computeType: 'AKS'
  properties: {
    agentCount: int
    agentVmSize: 'string'
    aksNetworkingConfiguration: {
      dnsServiceIP: 'string'
      dockerBridgeCidr: 'string'
      serviceCidr: 'string'
      subnetId: 'string'
    }
    clusterFqdn: 'string'
    clusterPurpose: 'string'
    loadBalancerSubnet: 'string'
    loadBalancerType: 'string'
    sslConfiguration: {
      cert: 'string'
      cname: 'string'
      key: 'string'
      leafDomainLabel: 'string'
      overwriteExistingDomain: bool
      status: 'string'
    }
  }
}
{
  computeType: 'AKS'
  properties: {
    agentCount: int
    agentVmSize: 'string'
    aksNetworkingConfiguration: {
      dnsServiceIP: 'string'
      dockerBridgeCidr: 'string'
      serviceCidr: 'string'
      subnetId: 'string'
    }
    clusterFqdn: 'string'
    clusterPurpose: 'string'
    loadBalancerSubnet: 'string'
    loadBalancerType: 'string'
    sslConfiguration: {
      cert: 'string'
      cname: 'string'
      key: 'string'
      leafDomainLabel: 'string'
      overwriteExistingDomain: bool
      status: 'string'
    }
  }
}
ForAmlCompute, use:
{
  computeType: 'AmlCompute'
  properties: {
    enableNodePublicIp: bool
    isolatedNetwork: bool
    osType: 'string'
    propertyBag: any(...)
    remoteLoginPortPublicAccess: 'string'
    scaleSettings: {
      maxNodeCount: int
      minNodeCount: int
      nodeIdleTimeBeforeScaleDown: 'string'
    }
    subnet: {
      id: 'string'
    }
    userAccountCredentials: {
      adminUserName: 'string'
      adminUserPassword: 'string'
      adminUserSshPublicKey: 'string'
    }
    virtualMachineImage: {
      id: 'string'
    }
    vmPriority: 'string'
    vmSize: 'string'
  }
}
{
  computeType: 'AmlCompute'
  properties: {
    enableNodePublicIp: bool
    isolatedNetwork: bool
    osType: 'string'
    propertyBag: any(...)
    remoteLoginPortPublicAccess: 'string'
    scaleSettings: {
      maxNodeCount: int
      minNodeCount: int
      nodeIdleTimeBeforeScaleDown: 'string'
    }
    subnet: {
      id: 'string'
    }
    userAccountCredentials: {
      adminUserName: 'string'
      adminUserPassword: 'string'
      adminUserSshPublicKey: 'string'
    }
    virtualMachineImage: {
      id: 'string'
    }
    vmPriority: 'string'
    vmSize: 'string'
  }
}
ForComputeInstance, use:
{
  computeType: 'ComputeInstance'
  properties: {
    applicationSharingPolicy: 'string'
    autologgerSettings: {
      mlflowAutologger: 'string'
    }
    computeInstanceAuthorizationType: 'string'
    customServices: [
      {
        docker: {
          privileged: bool
        }
        endpoints: [
          {
            hostIp: 'string'
            name: 'string'
            protocol: 'string'
            published: int
            target: int
          }
        ]
        environmentVariables: {
          {customized property}: {
            type: 'string'
            value: 'string'
          }
        }
        image: {
          reference: 'string'
          type: 'string'
          version: 'string'
        }
        kernel: {
          argv: [
            'string'
          ]
          displayName: 'string'
          language: 'string'
        }
        name: 'string'
        volumes: [
          {
            bind: {
              createHostPath: bool
              propagation: 'string'
              selinux: 'string'
            }
            consistency: 'string'
            readOnly: bool
            source: 'string'
            target: 'string'
            tmpfs: {
              size: int
            }
            type: 'string'
            volume: {
              nocopy: bool
            }
          }
        ]
      }
    ]
    enableNodePublicIp: bool
    enableOSPatching: bool
    enableRootAccess: bool
    enableSSO: bool
    idleTimeBeforeShutdown: 'string'
    personalComputeInstanceSettings: {
      assignedUser: {
        objectId: 'string'
        tenantId: 'string'
      }
    }
    releaseQuotaOnStop: bool
    schedules: {
      computeStartStop: [
        {
          action: 'string'
          cron: {
            expression: 'string'
            startTime: 'string'
            timeZone: 'string'
          }
          recurrence: {
            frequency: 'string'
            interval: int
            schedule: {
              hours: [
                int
              ]
              minutes: [
                int
              ]
              monthDays: [
                int
              ]
              weekDays: [
                'string'
              ]
            }
            startTime: 'string'
            timeZone: 'string'
          }
          schedule: {
            id: 'string'
            provisioningStatus: 'string'
            status: 'string'
          }
          status: 'string'
          triggerType: 'string'
        }
      ]
    }
    setupScripts: {
      scripts: {
        creationScript: {
          scriptArguments: 'string'
          scriptData: 'string'
          scriptSource: 'string'
          timeout: 'string'
        }
        startupScript: {
          scriptArguments: 'string'
          scriptData: 'string'
          scriptSource: 'string'
          timeout: 'string'
        }
      }
    }
    sshSettings: {
      adminPublicKey: 'string'
      sshPublicAccess: 'string'
    }
    subnet: {
      id: 'string'
    }
    vmSize: 'string'
  }
}
{
  computeType: 'ComputeInstance'
  properties: {
    applicationSharingPolicy: 'string'
    autologgerSettings: {
      mlflowAutologger: 'string'
    }
    computeInstanceAuthorizationType: 'string'
    customServices: [
      {
        docker: {
          privileged: bool
        }
        endpoints: [
          {
            hostIp: 'string'
            name: 'string'
            protocol: 'string'
            published: int
            target: int
          }
        ]
        environmentVariables: {
          {customized property}: {
            type: 'string'
            value: 'string'
          }
        }
        image: {
          reference: 'string'
          type: 'string'
          version: 'string'
        }
        kernel: {
          argv: [
            'string'
          ]
          displayName: 'string'
          language: 'string'
        }
        name: 'string'
        volumes: [
          {
            bind: {
              createHostPath: bool
              propagation: 'string'
              selinux: 'string'
            }
            consistency: 'string'
            readOnly: bool
            source: 'string'
            target: 'string'
            tmpfs: {
              size: int
            }
            type: 'string'
            volume: {
              nocopy: bool
            }
          }
        ]
      }
    ]
    enableNodePublicIp: bool
    enableOSPatching: bool
    enableRootAccess: bool
    enableSSO: bool
    idleTimeBeforeShutdown: 'string'
    personalComputeInstanceSettings: {
      assignedUser: {
        objectId: 'string'
        tenantId: 'string'
      }
    }
    releaseQuotaOnStop: bool
    schedules: {
      computeStartStop: [
        {
          action: 'string'
          cron: {
            expression: 'string'
            startTime: 'string'
            timeZone: 'string'
          }
          recurrence: {
            frequency: 'string'
            interval: int
            schedule: {
              hours: [
                int
              ]
              minutes: [
                int
              ]
              monthDays: [
                int
              ]
              weekDays: [
                'string'
              ]
            }
            startTime: 'string'
            timeZone: 'string'
          }
          schedule: {
            id: 'string'
            provisioningStatus: 'string'
            status: 'string'
          }
          status: 'string'
          triggerType: 'string'
        }
      ]
    }
    setupScripts: {
      scripts: {
        creationScript: {
          scriptArguments: 'string'
          scriptData: 'string'
          scriptSource: 'string'
          timeout: 'string'
        }
        startupScript: {
          scriptArguments: 'string'
          scriptData: 'string'
          scriptSource: 'string'
          timeout: 'string'
        }
      }
    }
    sshSettings: {
      adminPublicKey: 'string'
      sshPublicAccess: 'string'
    }
    subnet: {
      id: 'string'
    }
    vmSize: 'string'
  }
}
ForDataFactory, use:
{
  computeType: 'DataFactory'
}
{
  computeType: 'DataFactory'
}
ForDataLakeAnalytics, use:
{
  computeType: 'DataLakeAnalytics'
  properties: {
    dataLakeStoreAccountName: 'string'
  }
}
{
  computeType: 'DataLakeAnalytics'
  properties: {
    dataLakeStoreAccountName: 'string'
  }
}
ForDatabricks, use:
{
  computeType: 'Databricks'
  properties: {
    databricksAccessToken: 'string'
    workspaceUrl: 'string'
  }
}
{
  computeType: 'Databricks'
  properties: {
    databricksAccessToken: 'string'
    workspaceUrl: 'string'
  }
}
ForHDInsight, use:
{
  computeType: 'HDInsight'
  properties: {
    address: 'string'
    administratorAccount: {
      password: 'string'
      privateKeyData: 'string'
      publicKeyData: 'string'
      username: 'string'
    }
    sshPort: int
  }
}
{
  computeType: 'HDInsight'
  properties: {
    address: 'string'
    administratorAccount: {
      password: 'string'
      privateKeyData: 'string'
      publicKeyData: 'string'
      username: 'string'
    }
    sshPort: int
  }
}
ForKubernetes, use:
{
  computeType: 'Kubernetes'
  properties: {
    defaultInstanceType: 'string'
    extensionInstanceReleaseTrain: 'string'
    extensionPrincipalId: 'string'
    instanceTypes: {
      {customized property}: {
        nodeSelector: {
          {customized property}: 'string'
        }
        resources: {
          limits: {
            {customized property}: 'string'
          }
          requests: {
            {customized property}: 'string'
          }
        }
      }
    }
    namespace: 'string'
    relayConnectionString: 'string'
    serviceBusConnectionString: 'string'
    vcName: 'string'
  }
}
{
  computeType: 'Kubernetes'
  properties: {
    defaultInstanceType: 'string'
    extensionInstanceReleaseTrain: 'string'
    extensionPrincipalId: 'string'
    instanceTypes: {
      {customized property}: {
        nodeSelector: {
          {customized property}: 'string'
        }
        resources: {
          limits: {
            {customized property}: 'string'
          }
          requests: {
            {customized property}: 'string'
          }
        }
      }
    }
    namespace: 'string'
    relayConnectionString: 'string'
    serviceBusConnectionString: 'string'
    vcName: 'string'
  }
}
ForSynapseSpark, use:
{
  computeType: 'SynapseSpark'
  properties: {
    autoPauseProperties: {
      delayInMinutes: int
      enabled: bool
    }
    autoScaleProperties: {
      enabled: bool
      maxNodeCount: int
      minNodeCount: int
    }
    nodeCount: int
    nodeSize: 'string'
    nodeSizeFamily: 'string'
    poolName: 'string'
    resourceGroup: 'string'
    sparkVersion: 'string'
    subscriptionId: 'string'
    workspaceName: 'string'
  }
}
{
  computeType: 'SynapseSpark'
  properties: {
    autoPauseProperties: {
      delayInMinutes: int
      enabled: bool
    }
    autoScaleProperties: {
      enabled: bool
      maxNodeCount: int
      minNodeCount: int
    }
    nodeCount: int
    nodeSize: 'string'
    nodeSizeFamily: 'string'
    poolName: 'string'
    resourceGroup: 'string'
    sparkVersion: 'string'
    subscriptionId: 'string'
    workspaceName: 'string'
  }
}
ForVirtualMachine, use:
{
  computeType: 'VirtualMachine'
  properties: {
    address: 'string'
    administratorAccount: {
      password: 'string'
      privateKeyData: 'string'
      publicKeyData: 'string'
      username: 'string'
    }
    isNotebookInstanceCompute: bool
    notebookServerPort: int
    sshPort: int
    virtualMachineSize: 'string'
  }
}
{
  computeType: 'VirtualMachine'
  properties: {
    address: 'string'
    administratorAccount: {
      password: 'string'
      privateKeyData: 'string'
      publicKeyData: 'string'
      username: 'string'
    }
    isNotebookInstanceCompute: bool
    notebookServerPort: int
    sshPort: int
    virtualMachineSize: 'string'
  }
}
Property Values
AKS
AksNetworkingConfiguration
^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$
^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$
^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$
AKSSchemaProperties
AmlCompute
AmlComputeProperties
AssignedUser
AutoPauseProperties
AutoScaleProperties
BindOptions
Compute
ComputeInstance
ComputeInstanceAutologgerSettings
ComputeInstanceProperties
ComputeInstanceSshSettings
ComputeRecurrenceSchedule
ComputeResourceTags
ComputeSchedules
ComputeStartStopSchedule
Cron
CustomService
CustomServiceEnvironmentVariables
Databricks
DatabricksProperties
DataFactory
DataLakeAnalytics
DataLakeAnalyticsSchemaProperties
Docker
Endpoint
EnvironmentVariable
HDInsight
HDInsightProperties
Image
InstanceResourceSchema
InstanceResourceSchema
InstanceTypeSchema
InstanceTypeSchemaNodeSelector
InstanceTypeSchemaResources
JupyterKernelConfig
Kubernetes
KubernetesProperties
KubernetesPropertiesInstanceTypes
ManagedServiceIdentity
Microsoft.MachineLearningServices/workspaces/computes
^[a-zA-Z](?![a-zA-Z0-9-]*-\d+$)[a-zA-Z0-9\-]{2,23}$
PersonalComputeInstanceSettings
Recurrence
ResourceId
ScaleSettings
ScheduleBase
ScriptReference
ScriptsToExecute
SetupScripts
Sku
SslConfiguration
SynapseSpark
SynapseSparkProperties
TmpfsOptions
UserAccountCredentials
UserAssignedIdentities
UserAssignedIdentity
VirtualMachine
VirtualMachineImage
VirtualMachineSchemaProperties
VirtualMachineSshCredentials
VolumeDefinition
VolumeOptions
Usage Examples
Azure Quickstart Samples
The followingAzure Quickstart templatescontain Bicep samples for deploying this resource type.
ARM template resource definition
The workspaces/computes resource type can be deployed with operations that target:
Resource groups- Seeresource group deployment commands
For a list of changed properties in each API version, seechange log.
Resource format
To create a Microsoft.MachineLearningServices/workspaces/computes resource, add the following JSON to your template.
{
  "type": "Microsoft.MachineLearningServices/workspaces/computes",
  "apiVersion": "2025-01-01-preview",
  "name": "string",
  "identity": {
    "type": "string",
    "userAssignedIdentities": {
      "{customized property}": {
      }
    }
  },
  "location": "string",
  "properties": {
    "computeLocation": "string",
    "description": "string",
    "disableLocalAuth": "bool",
    "resourceId": "string",
    "computeType": "string"
    // For remaining properties, see Compute objects
  },
  "sku": {
    "capacity": "int",
    "family": "string",
    "name": "string",
    "size": "string",
    "tier": "string"
  },
  "tags": {
    "{customized property}": "string"
  }
}
{
  "type": "Microsoft.MachineLearningServices/workspaces/computes",
  "apiVersion": "2025-01-01-preview",
  "name": "string",
  "identity": {
    "type": "string",
    "userAssignedIdentities": {
      "{customized property}": {
      }
    }
  },
  "location": "string",
  "properties": {
    "computeLocation": "string",
    "description": "string",
    "disableLocalAuth": "bool",
    "resourceId": "string",
    "computeType": "string"
    // For remaining properties, see Compute objects
  },
  "sku": {
    "capacity": "int",
    "family": "string",
    "name": "string",
    "size": "string",
    "tier": "string"
  },
  "tags": {
    "{customized property}": "string"
  }
}
Compute objects
Set thecomputeTypeproperty to specify the type of object.
ForAKS, use:
{
  "computeType": "AKS",
  "properties": {
    "agentCount": "int",
    "agentVmSize": "string",
    "aksNetworkingConfiguration": {
      "dnsServiceIP": "string",
      "dockerBridgeCidr": "string",
      "serviceCidr": "string",
      "subnetId": "string"
    },
    "clusterFqdn": "string",
    "clusterPurpose": "string",
    "loadBalancerSubnet": "string",
    "loadBalancerType": "string",
    "sslConfiguration": {
      "cert": "string",
      "cname": "string",
      "key": "string",
      "leafDomainLabel": "string",
      "overwriteExistingDomain": "bool",
      "status": "string"
    }
  }
}
{
  "computeType": "AKS",
  "properties": {
    "agentCount": "int",
    "agentVmSize": "string",
    "aksNetworkingConfiguration": {
      "dnsServiceIP": "string",
      "dockerBridgeCidr": "string",
      "serviceCidr": "string",
      "subnetId": "string"
    },
    "clusterFqdn": "string",
    "clusterPurpose": "string",
    "loadBalancerSubnet": "string",
    "loadBalancerType": "string",
    "sslConfiguration": {
      "cert": "string",
      "cname": "string",
      "key": "string",
      "leafDomainLabel": "string",
      "overwriteExistingDomain": "bool",
      "status": "string"
    }
  }
}
ForAmlCompute, use:
{
  "computeType": "AmlCompute",
  "properties": {
    "enableNodePublicIp": "bool",
    "isolatedNetwork": "bool",
    "osType": "string",
    "propertyBag": {},
    "remoteLoginPortPublicAccess": "string",
    "scaleSettings": {
      "maxNodeCount": "int",
      "minNodeCount": "int",
      "nodeIdleTimeBeforeScaleDown": "string"
    },
    "subnet": {
      "id": "string"
    },
    "userAccountCredentials": {
      "adminUserName": "string",
      "adminUserPassword": "string",
      "adminUserSshPublicKey": "string"
    },
    "virtualMachineImage": {
      "id": "string"
    },
    "vmPriority": "string",
    "vmSize": "string"
  }
}
{
  "computeType": "AmlCompute",
  "properties": {
    "enableNodePublicIp": "bool",
    "isolatedNetwork": "bool",
    "osType": "string",
    "propertyBag": {},
    "remoteLoginPortPublicAccess": "string",
    "scaleSettings": {
      "maxNodeCount": "int",
      "minNodeCount": "int",
      "nodeIdleTimeBeforeScaleDown": "string"
    },
    "subnet": {
      "id": "string"
    },
    "userAccountCredentials": {
      "adminUserName": "string",
      "adminUserPassword": "string",
      "adminUserSshPublicKey": "string"
    },
    "virtualMachineImage": {
      "id": "string"
    },
    "vmPriority": "string",
    "vmSize": "string"
  }
}
ForComputeInstance, use:
{
  "computeType": "ComputeInstance",
  "properties": {
    "applicationSharingPolicy": "string",
    "autologgerSettings": {
      "mlflowAutologger": "string"
    },
    "computeInstanceAuthorizationType": "string",
    "customServices": [
      {
        "docker": {
          "privileged": "bool"
        },
        "endpoints": [
          {
            "hostIp": "string",
            "name": "string",
            "protocol": "string",
            "published": "int",
            "target": "int"
          }
        ],
        "environmentVariables": {
          "{customized property}": {
            "type": "string",
            "value": "string"
          }
        },
        "image": {
          "reference": "string",
          "type": "string",
          "version": "string"
        },
        "kernel": {
          "argv": [ "string" ],
          "displayName": "string",
          "language": "string"
        },
        "name": "string",
        "volumes": [
          {
            "bind": {
              "createHostPath": "bool",
              "propagation": "string",
              "selinux": "string"
            },
            "consistency": "string",
            "readOnly": "bool",
            "source": "string",
            "target": "string",
            "tmpfs": {
              "size": "int"
            },
            "type": "string",
            "volume": {
              "nocopy": "bool"
            }
          }
        ]
      }
    ],
    "enableNodePublicIp": "bool",
    "enableOSPatching": "bool",
    "enableRootAccess": "bool",
    "enableSSO": "bool",
    "idleTimeBeforeShutdown": "string",
    "personalComputeInstanceSettings": {
      "assignedUser": {
        "objectId": "string",
        "tenantId": "string"
      }
    },
    "releaseQuotaOnStop": "bool",
    "schedules": {
      "computeStartStop": [
        {
          "action": "string",
          "cron": {
            "expression": "string",
            "startTime": "string",
            "timeZone": "string"
          },
          "recurrence": {
            "frequency": "string",
            "interval": "int",
            "schedule": {
              "hours": [ "int" ],
              "minutes": [ "int" ],
              "monthDays": [ "int" ],
              "weekDays": [ "string" ]
            },
            "startTime": "string",
            "timeZone": "string"
          },
          "schedule": {
            "id": "string",
            "provisioningStatus": "string",
            "status": "string"
          },
          "status": "string",
          "triggerType": "string"
        }
      ]
    },
    "setupScripts": {
      "scripts": {
        "creationScript": {
          "scriptArguments": "string",
          "scriptData": "string",
          "scriptSource": "string",
          "timeout": "string"
        },
        "startupScript": {
          "scriptArguments": "string",
          "scriptData": "string",
          "scriptSource": "string",
          "timeout": "string"
        }
      }
    },
    "sshSettings": {
      "adminPublicKey": "string",
      "sshPublicAccess": "string"
    },
    "subnet": {
      "id": "string"
    },
    "vmSize": "string"
  }
}
{
  "computeType": "ComputeInstance",
  "properties": {
    "applicationSharingPolicy": "string",
    "autologgerSettings": {
      "mlflowAutologger": "string"
    },
    "computeInstanceAuthorizationType": "string",
    "customServices": [
      {
        "docker": {
          "privileged": "bool"
        },
        "endpoints": [
          {
            "hostIp": "string",
            "name": "string",
            "protocol": "string",
            "published": "int",
            "target": "int"
          }
        ],
        "environmentVariables": {
          "{customized property}": {
            "type": "string",
            "value": "string"
          }
        },
        "image": {
          "reference": "string",
          "type": "string",
          "version": "string"
        },
        "kernel": {
          "argv": [ "string" ],
          "displayName": "string",
          "language": "string"
        },
        "name": "string",
        "volumes": [
          {
            "bind": {
              "createHostPath": "bool",
              "propagation": "string",
              "selinux": "string"
            },
            "consistency": "string",
            "readOnly": "bool",
            "source": "string",
            "target": "string",
            "tmpfs": {
              "size": "int"
            },
            "type": "string",
            "volume": {
              "nocopy": "bool"
            }
          }
        ]
      }
    ],
    "enableNodePublicIp": "bool",
    "enableOSPatching": "bool",
    "enableRootAccess": "bool",
    "enableSSO": "bool",
    "idleTimeBeforeShutdown": "string",
    "personalComputeInstanceSettings": {
      "assignedUser": {
        "objectId": "string",
        "tenantId": "string"
      }
    },
    "releaseQuotaOnStop": "bool",
    "schedules": {
      "computeStartStop": [
        {
          "action": "string",
          "cron": {
            "expression": "string",
            "startTime": "string",
            "timeZone": "string"
          },
          "recurrence": {
            "frequency": "string",
            "interval": "int",
            "schedule": {
              "hours": [ "int" ],
              "minutes": [ "int" ],
              "monthDays": [ "int" ],
              "weekDays": [ "string" ]
            },
            "startTime": "string",
            "timeZone": "string"
          },
          "schedule": {
            "id": "string",
            "provisioningStatus": "string",
            "status": "string"
          },
          "status": "string",
          "triggerType": "string"
        }
      ]
    },
    "setupScripts": {
      "scripts": {
        "creationScript": {
          "scriptArguments": "string",
          "scriptData": "string",
          "scriptSource": "string",
          "timeout": "string"
        },
        "startupScript": {
          "scriptArguments": "string",
          "scriptData": "string",
          "scriptSource": "string",
          "timeout": "string"
        }
      }
    },
    "sshSettings": {
      "adminPublicKey": "string",
      "sshPublicAccess": "string"
    },
    "subnet": {
      "id": "string"
    },
    "vmSize": "string"
  }
}
ForDataFactory, use:
{
  "computeType": "DataFactory"
}
{
  "computeType": "DataFactory"
}
ForDataLakeAnalytics, use:
{
  "computeType": "DataLakeAnalytics",
  "properties": {
    "dataLakeStoreAccountName": "string"
  }
}
{
  "computeType": "DataLakeAnalytics",
  "properties": {
    "dataLakeStoreAccountName": "string"
  }
}
ForDatabricks, use:
{
  "computeType": "Databricks",
  "properties": {
    "databricksAccessToken": "string",
    "workspaceUrl": "string"
  }
}
{
  "computeType": "Databricks",
  "properties": {
    "databricksAccessToken": "string",
    "workspaceUrl": "string"
  }
}
ForHDInsight, use:
{
  "computeType": "HDInsight",
  "properties": {
    "address": "string",
    "administratorAccount": {
      "password": "string",
      "privateKeyData": "string",
      "publicKeyData": "string",
      "username": "string"
    },
    "sshPort": "int"
  }
}
{
  "computeType": "HDInsight",
  "properties": {
    "address": "string",
    "administratorAccount": {
      "password": "string",
      "privateKeyData": "string",
      "publicKeyData": "string",
      "username": "string"
    },
    "sshPort": "int"
  }
}
ForKubernetes, use:
{
  "computeType": "Kubernetes",
  "properties": {
    "defaultInstanceType": "string",
    "extensionInstanceReleaseTrain": "string",
    "extensionPrincipalId": "string",
    "instanceTypes": {
      "{customized property}": {
        "nodeSelector": {
          "{customized property}": "string"
        },
        "resources": {
          "limits": {
            "{customized property}": "string"
          },
          "requests": {
            "{customized property}": "string"
          }
        }
      }
    },
    "namespace": "string",
    "relayConnectionString": "string",
    "serviceBusConnectionString": "string",
    "vcName": "string"
  }
}
{
  "computeType": "Kubernetes",
  "properties": {
    "defaultInstanceType": "string",
    "extensionInstanceReleaseTrain": "string",
    "extensionPrincipalId": "string",
    "instanceTypes": {
      "{customized property}": {
        "nodeSelector": {
          "{customized property}": "string"
        },
        "resources": {
          "limits": {
            "{customized property}": "string"
          },
          "requests": {
            "{customized property}": "string"
          }
        }
      }
    },
    "namespace": "string",
    "relayConnectionString": "string",
    "serviceBusConnectionString": "string",
    "vcName": "string"
  }
}
ForSynapseSpark, use:
{
  "computeType": "SynapseSpark",
  "properties": {
    "autoPauseProperties": {
      "delayInMinutes": "int",
      "enabled": "bool"
    },
    "autoScaleProperties": {
      "enabled": "bool",
      "maxNodeCount": "int",
      "minNodeCount": "int"
    },
    "nodeCount": "int",
    "nodeSize": "string",
    "nodeSizeFamily": "string",
    "poolName": "string",
    "resourceGroup": "string",
    "sparkVersion": "string",
    "subscriptionId": "string",
    "workspaceName": "string"
  }
}
{
  "computeType": "SynapseSpark",
  "properties": {
    "autoPauseProperties": {
      "delayInMinutes": "int",
      "enabled": "bool"
    },
    "autoScaleProperties": {
      "enabled": "bool",
      "maxNodeCount": "int",
      "minNodeCount": "int"
    },
    "nodeCount": "int",
    "nodeSize": "string",
    "nodeSizeFamily": "string",
    "poolName": "string",
    "resourceGroup": "string",
    "sparkVersion": "string",
    "subscriptionId": "string",
    "workspaceName": "string"
  }
}
ForVirtualMachine, use:
{
  "computeType": "VirtualMachine",
  "properties": {
    "address": "string",
    "administratorAccount": {
      "password": "string",
      "privateKeyData": "string",
      "publicKeyData": "string",
      "username": "string"
    },
    "isNotebookInstanceCompute": "bool",
    "notebookServerPort": "int",
    "sshPort": "int",
    "virtualMachineSize": "string"
  }
}
{
  "computeType": "VirtualMachine",
  "properties": {
    "address": "string",
    "administratorAccount": {
      "password": "string",
      "privateKeyData": "string",
      "publicKeyData": "string",
      "username": "string"
    },
    "isNotebookInstanceCompute": "bool",
    "notebookServerPort": "int",
    "sshPort": "int",
    "virtualMachineSize": "string"
  }
}
Property Values
AKS
AksNetworkingConfiguration
^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$
^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$
^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$
AKSSchemaProperties
AmlCompute
AmlComputeProperties
AssignedUser
AutoPauseProperties
AutoScaleProperties
BindOptions
Compute
ComputeInstance
ComputeInstanceAutologgerSettings
ComputeInstanceProperties
ComputeInstanceSshSettings
ComputeRecurrenceSchedule
ComputeResourceTags
ComputeSchedules
ComputeStartStopSchedule
Cron
CustomService
CustomServiceEnvironmentVariables
Databricks
DatabricksProperties
DataFactory
DataLakeAnalytics
DataLakeAnalyticsSchemaProperties
Docker
Endpoint
EnvironmentVariable
HDInsight
HDInsightProperties
Image
InstanceResourceSchema
InstanceResourceSchema
InstanceTypeSchema
InstanceTypeSchemaNodeSelector
InstanceTypeSchemaResources
JupyterKernelConfig
Kubernetes
KubernetesProperties
KubernetesPropertiesInstanceTypes
ManagedServiceIdentity
Microsoft.MachineLearningServices/workspaces/computes
^[a-zA-Z](?![a-zA-Z0-9-]*-\d+$)[a-zA-Z0-9\-]{2,23}$
PersonalComputeInstanceSettings
Recurrence
ResourceId
ScaleSettings
ScheduleBase
ScriptReference
ScriptsToExecute
SetupScripts
Sku
SslConfiguration
SynapseSpark
SynapseSparkProperties
TmpfsOptions
UserAccountCredentials
UserAssignedIdentities
UserAssignedIdentity
VirtualMachine
VirtualMachineImage
VirtualMachineSchemaProperties
VirtualMachineSshCredentials
VolumeDefinition
VolumeOptions
Usage Examples
Azure Quickstart Templates
The followingAzure Quickstart templatesdeploy this resource type.
Terraform (AzAPI provider) resource definition
The workspaces/computes resource type can be deployed with operations that target:
Resource groups
For a list of changed properties in each API version, seechange log.
Resource format
To create a Microsoft.MachineLearningServices/workspaces/computes resource, add the following Terraform to your template.
resource "azapi_resource" "symbolicname" {
  type = "Microsoft.MachineLearningServices/workspaces/computes@2025-01-01-preview"
  name = "string"
  identity = {
    type = "string"
    userAssignedIdentities = {
      {customized property} = {
      }
    }
  }
  location = "string"
  tags = {
    {customized property} = "string"
  }
  body = {
    properties = {
      computeLocation = "string"
      description = "string"
      disableLocalAuth = bool
      resourceId = "string"
      computeType = "string"
      // For remaining properties, see Compute objects
    }
    sku = {
      capacity = int
      family = "string"
      name = "string"
      size = "string"
      tier = "string"
    }
  }
}
resource "azapi_resource" "symbolicname" {
  type = "Microsoft.MachineLearningServices/workspaces/computes@2025-01-01-preview"
  name = "string"
  identity = {
    type = "string"
    userAssignedIdentities = {
      {customized property} = {
      }
    }
  }
  location = "string"
  tags = {
    {customized property} = "string"
  }
  body = {
    properties = {
      computeLocation = "string"
      description = "string"
      disableLocalAuth = bool
      resourceId = "string"
      computeType = "string"
      // For remaining properties, see Compute objects
    }
    sku = {
      capacity = int
      family = "string"
      name = "string"
      size = "string"
      tier = "string"
    }
  }
}
Compute objects
Set thecomputeTypeproperty to specify the type of object.
ForAKS, use:
{
  computeType = "AKS"
  properties = {
    agentCount = int
    agentVmSize = "string"
    aksNetworkingConfiguration = {
      dnsServiceIP = "string"
      dockerBridgeCidr = "string"
      serviceCidr = "string"
      subnetId = "string"
    }
    clusterFqdn = "string"
    clusterPurpose = "string"
    loadBalancerSubnet = "string"
    loadBalancerType = "string"
    sslConfiguration = {
      cert = "string"
      cname = "string"
      key = "string"
      leafDomainLabel = "string"
      overwriteExistingDomain = bool
      status = "string"
    }
  }
}
{
  computeType = "AKS"
  properties = {
    agentCount = int
    agentVmSize = "string"
    aksNetworkingConfiguration = {
      dnsServiceIP = "string"
      dockerBridgeCidr = "string"
      serviceCidr = "string"
      subnetId = "string"
    }
    clusterFqdn = "string"
    clusterPurpose = "string"
    loadBalancerSubnet = "string"
    loadBalancerType = "string"
    sslConfiguration = {
      cert = "string"
      cname = "string"
      key = "string"
      leafDomainLabel = "string"
      overwriteExistingDomain = bool
      status = "string"
    }
  }
}
ForAmlCompute, use:
{
  computeType = "AmlCompute"
  properties = {
    enableNodePublicIp = bool
    isolatedNetwork = bool
    osType = "string"
    propertyBag = ?
    remoteLoginPortPublicAccess = "string"
    scaleSettings = {
      maxNodeCount = int
      minNodeCount = int
      nodeIdleTimeBeforeScaleDown = "string"
    }
    subnet = {
      id = "string"
    }
    userAccountCredentials = {
      adminUserName = "string"
      adminUserPassword = "string"
      adminUserSshPublicKey = "string"
    }
    virtualMachineImage = {
      id = "string"
    }
    vmPriority = "string"
    vmSize = "string"
  }
}
{
  computeType = "AmlCompute"
  properties = {
    enableNodePublicIp = bool
    isolatedNetwork = bool
    osType = "string"
    propertyBag = ?
    remoteLoginPortPublicAccess = "string"
    scaleSettings = {
      maxNodeCount = int
      minNodeCount = int
      nodeIdleTimeBeforeScaleDown = "string"
    }
    subnet = {
      id = "string"
    }
    userAccountCredentials = {
      adminUserName = "string"
      adminUserPassword = "string"
      adminUserSshPublicKey = "string"
    }
    virtualMachineImage = {
      id = "string"
    }
    vmPriority = "string"
    vmSize = "string"
  }
}
ForComputeInstance, use:
{
  computeType = "ComputeInstance"
  properties = {
    applicationSharingPolicy = "string"
    autologgerSettings = {
      mlflowAutologger = "string"
    }
    computeInstanceAuthorizationType = "string"
    customServices = [
      {
        docker = {
          privileged = bool
        }
        endpoints = [
          {
            hostIp = "string"
            name = "string"
            protocol = "string"
            published = int
            target = int
          }
        ]
        environmentVariables = {
          {customized property} = {
            type = "string"
            value = "string"
          }
        }
        image = {
          reference = "string"
          type = "string"
          version = "string"
        }
        kernel = {
          argv = [
            "string"
          ]
          displayName = "string"
          language = "string"
        }
        name = "string"
        volumes = [
          {
            bind = {
              createHostPath = bool
              propagation = "string"
              selinux = "string"
            }
            consistency = "string"
            readOnly = bool
            source = "string"
            target = "string"
            tmpfs = {
              size = int
            }
            type = "string"
            volume = {
              nocopy = bool
            }
          }
        ]
      }
    ]
    enableNodePublicIp = bool
    enableOSPatching = bool
    enableRootAccess = bool
    enableSSO = bool
    idleTimeBeforeShutdown = "string"
    personalComputeInstanceSettings = {
      assignedUser = {
        objectId = "string"
        tenantId = "string"
      }
    }
    releaseQuotaOnStop = bool
    schedules = {
      computeStartStop = [
        {
          action = "string"
          cron = {
            expression = "string"
            startTime = "string"
            timeZone = "string"
          }
          recurrence = {
            frequency = "string"
            interval = int
            schedule = {
              hours = [
                int
              ]
              minutes = [
                int
              ]
              monthDays = [
                int
              ]
              weekDays = [
                "string"
              ]
            }
            startTime = "string"
            timeZone = "string"
          }
          schedule = {
            id = "string"
            provisioningStatus = "string"
            status = "string"
          }
          status = "string"
          triggerType = "string"
        }
      ]
    }
    setupScripts = {
      scripts = {
        creationScript = {
          scriptArguments = "string"
          scriptData = "string"
          scriptSource = "string"
          timeout = "string"
        }
        startupScript = {
          scriptArguments = "string"
          scriptData = "string"
          scriptSource = "string"
          timeout = "string"
        }
      }
    }
    sshSettings = {
      adminPublicKey = "string"
      sshPublicAccess = "string"
    }
    subnet = {
      id = "string"
    }
    vmSize = "string"
  }
}
{
  computeType = "ComputeInstance"
  properties = {
    applicationSharingPolicy = "string"
    autologgerSettings = {
      mlflowAutologger = "string"
    }
    computeInstanceAuthorizationType = "string"
    customServices = [
      {
        docker = {
          privileged = bool
        }
        endpoints = [
          {
            hostIp = "string"
            name = "string"
            protocol = "string"
            published = int
            target = int
          }
        ]
        environmentVariables = {
          {customized property} = {
            type = "string"
            value = "string"
          }
        }
        image = {
          reference = "string"
          type = "string"
          version = "string"
        }
        kernel = {
          argv = [
            "string"
          ]
          displayName = "string"
          language = "string"
        }
        name = "string"
        volumes = [
          {
            bind = {
              createHostPath = bool
              propagation = "string"
              selinux = "string"
            }
            consistency = "string"
            readOnly = bool
            source = "string"
            target = "string"
            tmpfs = {
              size = int
            }
            type = "string"
            volume = {
              nocopy = bool
            }
          }
        ]
      }
    ]
    enableNodePublicIp = bool
    enableOSPatching = bool
    enableRootAccess = bool
    enableSSO = bool
    idleTimeBeforeShutdown = "string"
    personalComputeInstanceSettings = {
      assignedUser = {
        objectId = "string"
        tenantId = "string"
      }
    }
    releaseQuotaOnStop = bool
    schedules = {
      computeStartStop = [
        {
          action = "string"
          cron = {
            expression = "string"
            startTime = "string"
            timeZone = "string"
          }
          recurrence = {
            frequency = "string"
            interval = int
            schedule = {
              hours = [
                int
              ]
              minutes = [
                int
              ]
              monthDays = [
                int
              ]
              weekDays = [
                "string"
              ]
            }
            startTime = "string"
            timeZone = "string"
          }
          schedule = {
            id = "string"
            provisioningStatus = "string"
            status = "string"
          }
          status = "string"
          triggerType = "string"
        }
      ]
    }
    setupScripts = {
      scripts = {
        creationScript = {
          scriptArguments = "string"
          scriptData = "string"
          scriptSource = "string"
          timeout = "string"
        }
        startupScript = {
          scriptArguments = "string"
          scriptData = "string"
          scriptSource = "string"
          timeout = "string"
        }
      }
    }
    sshSettings = {
      adminPublicKey = "string"
      sshPublicAccess = "string"
    }
    subnet = {
      id = "string"
    }
    vmSize = "string"
  }
}
ForDataFactory, use:
{
  computeType = "DataFactory"
}
{
  computeType = "DataFactory"
}
ForDataLakeAnalytics, use:
{
  computeType = "DataLakeAnalytics"
  properties = {
    dataLakeStoreAccountName = "string"
  }
}
{
  computeType = "DataLakeAnalytics"
  properties = {
    dataLakeStoreAccountName = "string"
  }
}
ForDatabricks, use:
{
  computeType = "Databricks"
  properties = {
    databricksAccessToken = "string"
    workspaceUrl = "string"
  }
}
{
  computeType = "Databricks"
  properties = {
    databricksAccessToken = "string"
    workspaceUrl = "string"
  }
}
ForHDInsight, use:
{
  computeType = "HDInsight"
  properties = {
    address = "string"
    administratorAccount = {
      password = "string"
      privateKeyData = "string"
      publicKeyData = "string"
      username = "string"
    }
    sshPort = int
  }
}
{
  computeType = "HDInsight"
  properties = {
    address = "string"
    administratorAccount = {
      password = "string"
      privateKeyData = "string"
      publicKeyData = "string"
      username = "string"
    }
    sshPort = int
  }
}
ForKubernetes, use:
{
  computeType = "Kubernetes"
  properties = {
    defaultInstanceType = "string"
    extensionInstanceReleaseTrain = "string"
    extensionPrincipalId = "string"
    instanceTypes = {
      {customized property} = {
        nodeSelector = {
          {customized property} = "string"
        }
        resources = {
          limits = {
            {customized property} = "string"
          }
          requests = {
            {customized property} = "string"
          }
        }
      }
    }
    namespace = "string"
    relayConnectionString = "string"
    serviceBusConnectionString = "string"
    vcName = "string"
  }
}
{
  computeType = "Kubernetes"
  properties = {
    defaultInstanceType = "string"
    extensionInstanceReleaseTrain = "string"
    extensionPrincipalId = "string"
    instanceTypes = {
      {customized property} = {
        nodeSelector = {
          {customized property} = "string"
        }
        resources = {
          limits = {
            {customized property} = "string"
          }
          requests = {
            {customized property} = "string"
          }
        }
      }
    }
    namespace = "string"
    relayConnectionString = "string"
    serviceBusConnectionString = "string"
    vcName = "string"
  }
}
ForSynapseSpark, use:
{
  computeType = "SynapseSpark"
  properties = {
    autoPauseProperties = {
      delayInMinutes = int
      enabled = bool
    }
    autoScaleProperties = {
      enabled = bool
      maxNodeCount = int
      minNodeCount = int
    }
    nodeCount = int
    nodeSize = "string"
    nodeSizeFamily = "string"
    poolName = "string"
    resourceGroup = "string"
    sparkVersion = "string"
    subscriptionId = "string"
    workspaceName = "string"
  }
}
{
  computeType = "SynapseSpark"
  properties = {
    autoPauseProperties = {
      delayInMinutes = int
      enabled = bool
    }
    autoScaleProperties = {
      enabled = bool
      maxNodeCount = int
      minNodeCount = int
    }
    nodeCount = int
    nodeSize = "string"
    nodeSizeFamily = "string"
    poolName = "string"
    resourceGroup = "string"
    sparkVersion = "string"
    subscriptionId = "string"
    workspaceName = "string"
  }
}
ForVirtualMachine, use:
{
  computeType = "VirtualMachine"
  properties = {
    address = "string"
    administratorAccount = {
      password = "string"
      privateKeyData = "string"
      publicKeyData = "string"
      username = "string"
    }
    isNotebookInstanceCompute = bool
    notebookServerPort = int
    sshPort = int
    virtualMachineSize = "string"
  }
}
{
  computeType = "VirtualMachine"
  properties = {
    address = "string"
    administratorAccount = {
      password = "string"
      privateKeyData = "string"
      publicKeyData = "string"
      username = "string"
    }
    isNotebookInstanceCompute = bool
    notebookServerPort = int
    sshPort = int
    virtualMachineSize = "string"
  }
}
Property Values
AKS
AksNetworkingConfiguration
^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$
^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$
^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$
AKSSchemaProperties
AmlCompute
AmlComputeProperties
AssignedUser
AutoPauseProperties
AutoScaleProperties
BindOptions
Compute
ComputeInstance
ComputeInstanceAutologgerSettings
ComputeInstanceProperties
ComputeInstanceSshSettings
ComputeRecurrenceSchedule
ComputeResourceTags
ComputeSchedules
ComputeStartStopSchedule
Cron
CustomService
CustomServiceEnvironmentVariables
Databricks
DatabricksProperties
DataFactory
DataLakeAnalytics
DataLakeAnalyticsSchemaProperties
Docker
Endpoint
EnvironmentVariable
HDInsight
HDInsightProperties
Image
InstanceResourceSchema
InstanceResourceSchema
InstanceTypeSchema
InstanceTypeSchemaNodeSelector
InstanceTypeSchemaResources
JupyterKernelConfig
Kubernetes
KubernetesProperties
KubernetesPropertiesInstanceTypes
ManagedServiceIdentity
Microsoft.MachineLearningServices/workspaces/computes
^[a-zA-Z](?![a-zA-Z0-9-]*-\d+$)[a-zA-Z0-9\-]{2,23}$
PersonalComputeInstanceSettings
Recurrence
ResourceId
ScaleSettings
ScheduleBase
ScriptReference
ScriptsToExecute
SetupScripts
Sku
SslConfiguration
SynapseSpark
SynapseSparkProperties
TmpfsOptions
UserAccountCredentials
UserAssignedIdentities
UserAssignedIdentity
VirtualMachine
VirtualMachineImage
VirtualMachineSchemaProperties
VirtualMachineSshCredentials
VolumeDefinition
VolumeOptions
Feedback
Was this page helpful?
Additional resources