Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Quickstart: Build a Cassandra app with Node.js SDK and Azure Cosmos DB
Article
2024-08-14
5 contributors
In this article
APPLIES TO:Cassandra
.NET
.NET Core
Java v3
Java v4
Node.js
Python
Golang
In this quickstart, you create an Azure Cosmos DB for Apache Cassandra account, and use a Cassandra Node.js app cloned from GitHub to create a Cassandra database and container. Azure Cosmos DB is a multi-model database service that lets you quickly create and query document, table, key-value, and graph databases with global distribution and horizontal scale capabilities.
Prerequisites
If you don't have anAzure subscription, create anAzure free accountbefore you begin. Alternatively, you canTry Azure Cosmos DB for freewithout an Azure subscription, free of charge and commitments.
In addition, you need:
Node.jsversion v0.10.29 or higher
Git
Create a database account
Before you can create a document database, you need to create a Cassandra account with Azure Cosmos DB.
From the Azure portal menu or theHome page, selectCreate a resource.
From the Azure portal menu or theHome page, selectCreate a resource.
On theNewpage, search for and selectAzure Cosmos DB.
On theNewpage, search for and selectAzure Cosmos DB.
On theAzure Cosmos DBpage, selectCreate.
On theAzure Cosmos DBpage, selectCreate.
On theAPIpage, selectCreateunder theCassandrasection.The API determines the type of account to create. Azure Cosmos DB provides five APIs: NoSQL for document databases, Gremlin for graph databases, MongoDB for document databases, Azure Table, and Cassandra. You must create a separate account for each API.SelectCassandra, because in this quickstart you are creating a table that works with the API for Cassandra.Learn more about the API for Cassandra.
On theAPIpage, selectCreateunder theCassandrasection.
The API determines the type of account to create. Azure Cosmos DB provides five APIs: NoSQL for document databases, Gremlin for graph databases, MongoDB for document databases, Azure Table, and Cassandra. You must create a separate account for each API.
SelectCassandra, because in this quickstart you are creating a table that works with the API for Cassandra.
Learn more about the API for Cassandra.
In theCreate Azure Cosmos DB Accountpage, enter the basic settings for the new Azure Cosmos DB account.SettingValueDescriptionSubscriptionYour subscriptionSelect the Azure subscription that you want to use for this Azure Cosmos DB account.Resource GroupCreate newThen enter the same name as Account NameSelectCreate new. Then enter a new resource group name for your account. For simplicity, use the same name as your Azure Cosmos DB account name.Account NameEnter a unique nameEnter a unique name to identify your Azure Cosmos DB account. Your account URI will becassandra.cosmos.azure.comappended to your unique account name.The account name can use only lowercase letters, numbers, and hyphens (-), and must be between 3 and 31 characters long.LocationThe region closest to your usersSelect a geographic location to host your Azure Cosmos DB account. Use the location that is closest to your users to give them the fastest access to the data.Capacity modeProvisioned throughput or ServerlessSelectProvisioned throughputto create an account inprovisioned throughputmode. SelectServerlessto create an account inserverlessmode.Apply Azure Cosmos DB free tier discountApplyorDo not applyWith Azure Cosmos DB free tier, you will get the first 1000 RU/s and 25 GB of storage for free in an account. Learn more aboutfree tier.Limit total account throughputSelect to limit throughput of the accountThis is useful if you want to limit the total throughput of the account to a specific value.NoteYou can have up to one free tier Azure Cosmos DB account per Azure subscription and must opt-in when creating the account. If you do not see the option to apply the free tier discount, this means another account in the subscription has already been enabled with free tier.
In theCreate Azure Cosmos DB Accountpage, enter the basic settings for the new Azure Cosmos DB account.
Note
You can have up to one free tier Azure Cosmos DB account per Azure subscription and must opt-in when creating the account. If you do not see the option to apply the free tier discount, this means another account in the subscription has already been enabled with free tier.

In theGlobal Distributiontab, configure the following details. You can leave the default values for the purpose of this quickstart:SettingValueDescriptionGeo-RedundancyDisableEnable or disable global distribution on your account by pairing your region with a pair region. You can add more regions to your account later.Multi-region WritesDisableMulti-region writes capability allows you to take advantage of the provisioned throughput for your databases and containers across the globe.Availability ZonesDisableAvailability Zones are isolated locations within an Azure region. Each zone is made up of one or more datacenters equipped with independent power, cooling, and networking.NoteThe following options are not available if you selectServerlessas theCapacity mode:Apply Free Tier DiscountGeo-redundancyMulti-region Writes
In theGlobal Distributiontab, configure the following details. You can leave the default values for the purpose of this quickstart:
Note
The following options are not available if you selectServerlessas theCapacity mode:
Apply Free Tier Discount
Geo-redundancy
Multi-region Writes
Optionally you can configure additional details in the following tabs:Networking- Configureaccess from a virtual network.Backup Policy- Configure eitherperiodicorcontinuousbackup policy.Encryption- Use either service-managed key or acustomer-managed key.Tags- Tags are name/value pairs that enable you to categorize resources and view consolidated billing by applying the same tag to multiple resources and resource groups.
Optionally you can configure additional details in the following tabs:
Networking- Configureaccess from a virtual network.
Backup Policy- Configure eitherperiodicorcontinuousbackup policy.
Encryption- Use either service-managed key or acustomer-managed key.
Tags- Tags are name/value pairs that enable you to categorize resources and view consolidated billing by applying the same tag to multiple resources and resource groups.
SelectReview + create.
SelectReview + create.
Review the account settings, and then selectCreate. It takes a few minutes to create the account. Wait for the portal page to displayYour deployment is complete.
Review the account settings, and then selectCreate. It takes a few minutes to create the account. Wait for the portal page to displayYour deployment is complete.

SelectGo to resourceto go to the Azure Cosmos DB account page.
SelectGo to resourceto go to the Azure Cosmos DB account page.
Clone the sample application
Clone a API for Cassandra app from GitHub, set the connection string, and run it.
Open a Command Prompt window. Create a new folder namedgit-samples. Then, close the window.md "C:\git-samples"
Open a Command Prompt window. Create a new folder namedgit-samples. Then, close the window.
git-samples
md "C:\git-samples"
md "C:\git-samples"
Open a git terminal window, such as git bash. Use thecdcommand to change to the new folder to install the sample app.cd "C:\git-samples"
Open a git terminal window, such as git bash. Use thecdcommand to change to the new folder to install the sample app.
cd
cd "C:\git-samples"
cd "C:\git-samples"
Run the following command to clone the sample repository. This command creates a copy of the sample app on your computer.git clone https://github.com/Azure-Samples/azure-cosmos-db-cassandra-nodejs-getting-started.git
Run the following command to clone the sample repository. This command creates a copy of the sample app on your computer.
git clone https://github.com/Azure-Samples/azure-cosmos-db-cassandra-nodejs-getting-started.git
git clone https://github.com/Azure-Samples/azure-cosmos-db-cassandra-nodejs-getting-started.git
Install the Node.js dependencies withnpm.npm install
Install the Node.js dependencies withnpm.
npm
npm install
npm install
Review the code
This step is optional. If you're interested to learn how the code creates the database resources, you can review the following snippets. The snippets are all taken from theuprofile.jsfile in theC:\git-samples\azure-cosmos-db-cassandra-nodejs-getting-startedfolder. Otherwise, skip ahead toUpdate your connection string.
uprofile.js
C:\git-samples\azure-cosmos-db-cassandra-nodejs-getting-started
The username and password values were set using the connection string page in the Azure portal.let authProvider = new cassandra.auth.PlainTextAuthProvider(
    config.username,
    config.password
);
The username and password values were set using the connection string page in the Azure portal.
let authProvider = new cassandra.auth.PlainTextAuthProvider(
    config.username,
    config.password
);
let authProvider = new cassandra.auth.PlainTextAuthProvider(
    config.username,
    config.password
);
Theclientis initialized with contactPoint information. The contactPoint is retrieved from the Azure portal.let client = new cassandra.Client({
    contactPoints: [`${config.contactPoint}:10350`],
    authProvider: authProvider,
    localDataCenter: config.localDataCenter,
    sslOptions: {
        secureProtocol: "TLSv1_2_method"
    },
});
Theclientis initialized with contactPoint information. The contactPoint is retrieved from the Azure portal.
client
let client = new cassandra.Client({
    contactPoints: [`${config.contactPoint}:10350`],
    authProvider: authProvider,
    localDataCenter: config.localDataCenter,
    sslOptions: {
        secureProtocol: "TLSv1_2_method"
    },
});
let client = new cassandra.Client({
    contactPoints: [`${config.contactPoint}:10350`],
    authProvider: authProvider,
    localDataCenter: config.localDataCenter,
    sslOptions: {
        secureProtocol: "TLSv1_2_method"
    },
});
Theclientconnects to the Azure Cosmos DB for Apache Cassandra.client.connect();
Theclientconnects to the Azure Cosmos DB for Apache Cassandra.
client
client.connect();
client.connect();
A new keyspace is created.var query =
    `CREATE KEYSPACE IF NOT EXISTS ${config.keySpace} WITH replication = {'class': 'NetworkTopologyStrategy', 'datacenter' : '1' }`;
await client.execute(query);
A new keyspace is created.
var query =
    `CREATE KEYSPACE IF NOT EXISTS ${config.keySpace} WITH replication = {'class': 'NetworkTopologyStrategy', 'datacenter' : '1' }`;
await client.execute(query);
var query =
    `CREATE KEYSPACE IF NOT EXISTS ${config.keySpace} WITH replication = {'class': 'NetworkTopologyStrategy', 'datacenter' : '1' }`;
await client.execute(query);
A new table is created.query =
    `CREATE TABLE IF NOT EXISTS ${config.keySpace}.user (user_id int PRIMARY KEY, user_name text, user_bcity text)`;
await client.execute(query);
A new table is created.
query =
    `CREATE TABLE IF NOT EXISTS ${config.keySpace}.user (user_id int PRIMARY KEY, user_name text, user_bcity text)`;
await client.execute(query);
query =
    `CREATE TABLE IF NOT EXISTS ${config.keySpace}.user (user_id int PRIMARY KEY, user_name text, user_bcity text)`;
await client.execute(query);
Key/value entities are inserted.const arr = [
    `INSERT INTO  ${config.keySpace}.user (user_id, user_name , user_bcity) VALUES (1, 'AdrianaS', 'Seattle')`,
    `INSERT INTO  ${config.keySpace}.user (user_id, user_name , user_bcity) VALUES (2, 'JiriK', 'Toronto')`,
    `INSERT INTO  ${config.keySpace}.user (user_id, user_name , user_bcity) VALUES (3, 'IvanH', 'Mumbai')`,
    `INSERT INTO  ${config.keySpace}.user (user_id, user_name , user_bcity) VALUES (4, 'IvanH', 'Seattle')`,
    `INSERT INTO  ${config.keySpace}.user (user_id, user_name , user_bcity) VALUES (5, 'IvanaV', 'Belgaum')`,
    `INSERT INTO  ${config.keySpace}.user (user_id, user_name , user_bcity) VALUES (6, 'LiliyaB', 'Seattle')`,
    `INSERT INTO  ${config.keySpace}.user (user_id, user_name , user_bcity) VALUES (7, 'JindrichH', 'Buenos Aires')`,
    `INSERT INTO  ${config.keySpace}.user (user_id, user_name , user_bcity) VALUES (8, 'AdrianaS', 'Seattle')`,
    `INSERT INTO  ${config.keySpace}.user (user_id, user_name , user_bcity) VALUES (9, 'JozefM', 'Seattle')`,
];
for (const element of arr) {
    await client.execute(element);
}
Key/value entities are inserted.
const arr = [
    `INSERT INTO  ${config.keySpace}.user (user_id, user_name , user_bcity) VALUES (1, 'AdrianaS', 'Seattle')`,
    `INSERT INTO  ${config.keySpace}.user (user_id, user_name , user_bcity) VALUES (2, 'JiriK', 'Toronto')`,
    `INSERT INTO  ${config.keySpace}.user (user_id, user_name , user_bcity) VALUES (3, 'IvanH', 'Mumbai')`,
    `INSERT INTO  ${config.keySpace}.user (user_id, user_name , user_bcity) VALUES (4, 'IvanH', 'Seattle')`,
    `INSERT INTO  ${config.keySpace}.user (user_id, user_name , user_bcity) VALUES (5, 'IvanaV', 'Belgaum')`,
    `INSERT INTO  ${config.keySpace}.user (user_id, user_name , user_bcity) VALUES (6, 'LiliyaB', 'Seattle')`,
    `INSERT INTO  ${config.keySpace}.user (user_id, user_name , user_bcity) VALUES (7, 'JindrichH', 'Buenos Aires')`,
    `INSERT INTO  ${config.keySpace}.user (user_id, user_name , user_bcity) VALUES (8, 'AdrianaS', 'Seattle')`,
    `INSERT INTO  ${config.keySpace}.user (user_id, user_name , user_bcity) VALUES (9, 'JozefM', 'Seattle')`,
];
for (const element of arr) {
    await client.execute(element);
}
const arr = [
    `INSERT INTO  ${config.keySpace}.user (user_id, user_name , user_bcity) VALUES (1, 'AdrianaS', 'Seattle')`,
    `INSERT INTO  ${config.keySpace}.user (user_id, user_name , user_bcity) VALUES (2, 'JiriK', 'Toronto')`,
    `INSERT INTO  ${config.keySpace}.user (user_id, user_name , user_bcity) VALUES (3, 'IvanH', 'Mumbai')`,
    `INSERT INTO  ${config.keySpace}.user (user_id, user_name , user_bcity) VALUES (4, 'IvanH', 'Seattle')`,
    `INSERT INTO  ${config.keySpace}.user (user_id, user_name , user_bcity) VALUES (5, 'IvanaV', 'Belgaum')`,
    `INSERT INTO  ${config.keySpace}.user (user_id, user_name , user_bcity) VALUES (6, 'LiliyaB', 'Seattle')`,
    `INSERT INTO  ${config.keySpace}.user (user_id, user_name , user_bcity) VALUES (7, 'JindrichH', 'Buenos Aires')`,
    `INSERT INTO  ${config.keySpace}.user (user_id, user_name , user_bcity) VALUES (8, 'AdrianaS', 'Seattle')`,
    `INSERT INTO  ${config.keySpace}.user (user_id, user_name , user_bcity) VALUES (9, 'JozefM', 'Seattle')`,
];
for (const element of arr) {
    await client.execute(element);
}
Query to get all key values.query = `SELECT * FROM ${config.keySpace}.user`;
const resultSelect = await client.execute(query);

for (const row of resultSelect.rows) {
    console.log(
        "Obtained row: %d | %s | %s ",
        row.user_id,
        row.user_name,
        row.user_bcity
    );
}
Query to get all key values.
query = `SELECT * FROM ${config.keySpace}.user`;
const resultSelect = await client.execute(query);

for (const row of resultSelect.rows) {
    console.log(
        "Obtained row: %d | %s | %s ",
        row.user_id,
        row.user_name,
        row.user_bcity
    );
}
query = `SELECT * FROM ${config.keySpace}.user`;
const resultSelect = await client.execute(query);

for (const row of resultSelect.rows) {
    console.log(
        "Obtained row: %d | %s | %s ",
        row.user_id,
        row.user_name,
        row.user_bcity
    );
}
Query to get a key-value.query = `SELECT * FROM ${config.keySpace}.user where user_id=1`;
const resultSelectWhere = await client.execute(query);

for (const row of resultSelectWhere.rows) {
    console.log(
        "Obtained row: %d | %s | %s ",
        row.user_id,
        row.user_name,
        row.user_bcity
    );
}
Query to get a key-value.
query = `SELECT * FROM ${config.keySpace}.user where user_id=1`;
const resultSelectWhere = await client.execute(query);

for (const row of resultSelectWhere.rows) {
    console.log(
        "Obtained row: %d | %s | %s ",
        row.user_id,
        row.user_name,
        row.user_bcity
    );
}
query = `SELECT * FROM ${config.keySpace}.user where user_id=1`;
const resultSelectWhere = await client.execute(query);

for (const row of resultSelectWhere.rows) {
    console.log(
        "Obtained row: %d | %s | %s ",
        row.user_id,
        row.user_name,
        row.user_bcity
    );
}
Close connection.client.shutdown();
Close connection.
client.shutdown();
client.shutdown();
Update your connection string
Go to the Azure portal to get your connection string information and copy it into the app. The connection string enables your app to communicate with your hosted database.
In your Azure Cosmos DB account in theAzure portal, selectConnection String.
In your Azure Cosmos DB account in theAzure portal, selectConnection String.
Use thebutton on the right side of the screen to copy the top value,CONTACT POINT.
Use thebutton on the right side of the screen to copy the top value,CONTACT POINT.

Open theconfig.jsfile.
Open theconfig.jsfile.
Paste theCONTACT POINTvalue from the portal overCONTACT-POINTon line 9.Line 9 should now look similar to this value:contactPoint: "cosmos-db-quickstarts.cassandra.cosmosdb.azure.com",
Paste theCONTACT POINTvalue from the portal overCONTACT-POINTon line 9.
CONTACT-POINT
Line 9 should now look similar to this value:
contactPoint: "cosmos-db-quickstarts.cassandra.cosmosdb.azure.com",
contactPoint: "cosmos-db-quickstarts.cassandra.cosmosdb.azure.com",
Copy theUSERNAMEvalue from the portal and paste it over<FillMEIN>on line 2.Line 2 should now look similar to this value:username: 'cosmos-db-quickstart',
Copy theUSERNAMEvalue from the portal and paste it over<FillMEIN>on line 2.
<FillMEIN>
Line 2 should now look similar to this value:
username: 'cosmos-db-quickstart',
username: 'cosmos-db-quickstart',
Copy thePASSWORDvalue from the portal and paste it overUSERNAMEon line 8.Line 8 should now look similar to this value:password: '2Ggkr662ifxz2Mg==',
Copy thePASSWORDvalue from the portal and paste it overUSERNAMEon line 8.
USERNAME
Line 8 should now look similar to this value:
password: '2Ggkr662ifxz2Mg==',
password: '2Ggkr662ifxz2Mg==',
ReplaceREGIONwith the Azure region you created this resource in.
ReplaceREGIONwith the Azure region you created this resource in.
Save theconfig.jsfile.
Save theconfig.jsfile.
Run the Node.js app
In the bash terminal window, ensure you are in the sample directory you cloned earlier:cd azure-cosmos-db-cassandra-nodejs-getting-started
In the bash terminal window, ensure you are in the sample directory you cloned earlier:
cd azure-cosmos-db-cassandra-nodejs-getting-started
cd azure-cosmos-db-cassandra-nodejs-getting-started
Run your node application:npm start
Run your node application:
npm start
npm start
Verify the results as expected from the command line.PressCtrl+Cto stop the program and close the console window.
Verify the results as expected from the command line.

PressCtrl+Cto stop the program and close the console window.
In the Azure portal, openData Explorerto query, modify, and work with this new data.
In the Azure portal, openData Explorerto query, modify, and work with this new data.

Review SLAs in the Azure portal
The Azure portal monitors your Azure Cosmos DB account throughput, storage, availability, latency, and consistency. Charts for metrics associated with anAzure Cosmos DB Service Level Agreement (SLA)show the SLA value compared to actual performance. This suite of metrics makes monitoring your SLAs transparent.
To review metrics and SLAs:
SelectMetricsin your Azure Cosmos DB account's navigation menu.
SelectMetricsin your Azure Cosmos DB account's navigation menu.
Select a tab such asLatency, and select a timeframe on the right. Compare theActualandSLAlines on the charts.
Select a tab such asLatency, and select a timeframe on the right. Compare theActualandSLAlines on the charts.

Review the metrics on the other tabs.
Review the metrics on the other tabs.
Clean up resources
When you're done with your app and Azure Cosmos DB account, you can delete the Azure resources you created so you don't incur more charges. To delete the resources:
In the Azure portal Search bar, search for and selectResource groups.
In the Azure portal Search bar, search for and selectResource groups.
From the list, select the resource group you created for this quickstart.
From the list, select the resource group you created for this quickstart.

On the resource groupOverviewpage, selectDelete resource group.
On the resource groupOverviewpage, selectDelete resource group.

In the next window, enter the name of the resource group to delete, and then selectDelete.
In the next window, enter the name of the resource group to delete, and then selectDelete.
Next steps
In this quickstart, you learned how to create an Azure Cosmos DB account with API for Cassandra, and run a Cassandra Node.js app that creates a Cassandra database and container. You can now import more data into your Azure Cosmos DB account.
Import Cassandra data into Azure Cosmos DB
Feedback
Was this page helpful?
Additional resources