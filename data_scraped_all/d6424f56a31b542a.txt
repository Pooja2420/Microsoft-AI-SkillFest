Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Self-host the API Management developer portal
Article
2024-04-03
1 contributor
In this article
APPLIES TO: Developer | Basic | Standard | Premium
This tutorial describes how to self-host theAPI Management developer portal. Self-hosting is one of several options toextend the functionalityof the developer portal. For example, you can self-host multiple portals for your API Management instance, with different features. When you self-host a portal, you become its maintainer and you're responsible for its upgrades.
Important
Consider self-hosting the developer portal only when you need to modify the core of the developer portal's codebase. This option requires advanced configuration, including:
Deployment to a hosting platform, optionally fronted by a solution such as CDN for increased availability and performance
Maintaining and managing hosting infrastructure
Manual updates, including for security patches, which may require you to resolve code conflicts when upgrading the codebase
Note
The self-hosted portal does not support visibility and access controls that are available in the managed developer portal.
If you have already uploaded or modified media files in the managed portal, seeMove from managed to self-hosted, later in this article.
Prerequisites
To set up a local development environment, you need to have:
An API Management service instance. If you don't have one, seeQuickstart - Create an Azure API Management instance.
An Azure storage account withthe static websites featureenabled. SeeCreate a storage account.
Git on your machine. Install it by followingthis Git tutorial.
Node.js (LTS version,v10.15.0or later) and npm on your machine. SeeDownloading and installing Node.js and npm.
v10.15.0
Azure CLI. Followthe Azure CLI installation steps.
Step 1: Set up local environment
To set up your local environment, you'll have to clone the repository, switch to the latest release of the developer portal, and install npm packages.
Clone theapi-management-developer-portalrepo from GitHub:git clone https://github.com/Azure/api-management-developer-portal.git
Clone theapi-management-developer-portalrepo from GitHub:
git clone https://github.com/Azure/api-management-developer-portal.git
git clone https://github.com/Azure/api-management-developer-portal.git
Go to your local copy of the repo:cd api-management-developer-portal
Go to your local copy of the repo:
cd api-management-developer-portal
cd api-management-developer-portal
Check out the latest release of the portal.Before you run the following code, check the current release tag in theReleases section of the repositoryand replace<current-release-tag>value with the latest release tag.git checkout <current-release-tag>
Check out the latest release of the portal.
Before you run the following code, check the current release tag in theReleases section of the repositoryand replace<current-release-tag>value with the latest release tag.
<current-release-tag>
git checkout <current-release-tag>
git checkout <current-release-tag>
Install any available npm packages:npm install
Install any available npm packages:
npm install
npm install
Tip
Always use thelatest portal releaseand keep your forked portal up-to-date. The Software Engineers use themasterbranch of this repository for daily development purposes. It has unstable versions of the software.
master
Step 2: Configure JSON files, static website, and CORS settings
The developer portal requires the API Management REST API to manage the content.
config.design.json file
Go to thesrcfolder and open theconfig.design.jsonfile.
src
config.design.json
{
  "environment": "development",
  "managementApiUrl": "https://<service-name>.management.azure-api.net",
  "managementApiAccessToken": "SharedAccessSignature ...",
  "backendUrl": "https://<service-name>.developer.azure-api.net",
  "useHipCaptcha": false,
  "integration": {
      "googleFonts": {
          "apiKey": "..."
      }
  }
}
{
  "environment": "development",
  "managementApiUrl": "https://<service-name>.management.azure-api.net",
  "managementApiAccessToken": "SharedAccessSignature ...",
  "backendUrl": "https://<service-name>.developer.azure-api.net",
  "useHipCaptcha": false,
  "integration": {
      "googleFonts": {
          "apiKey": "..."
      }
  }
}
Configure the file:
In themanagementApiUrlvalue, replace<service-name>with the name of your API Management instance. If you configured acustom domain, use it instead (for example,https://management.contoso.com).{
...
"managementApiUrl": "https://contoso-api.management.azure-api.net"
...
In themanagementApiUrlvalue, replace<service-name>with the name of your API Management instance. If you configured acustom domain, use it instead (for example,https://management.contoso.com).
managementApiUrl
<service-name>
https://management.contoso.com
{
...
"managementApiUrl": "https://contoso-api.management.azure-api.net"
...
{
...
"managementApiUrl": "https://contoso-api.management.azure-api.net"
...
Manually create a SAS tokento enable the direct REST API access to your API Management instance.
Manually create a SAS tokento enable the direct REST API access to your API Management instance.
Copy the generated token and paste it as themanagementApiAccessTokenvalue.
Copy the generated token and paste it as themanagementApiAccessTokenvalue.
managementApiAccessToken
In thebackendUrlvalue, replace<service-name>with the name of your API Management instance. If you configured acustom domain, use it instead (for example,https://portal.contoso.com).{
...
"backendUrl": "https://contoso-api.developer.azure-api.net"
...
In thebackendUrlvalue, replace<service-name>with the name of your API Management instance. If you configured acustom domain, use it instead (for example,https://portal.contoso.com).
backendUrl
<service-name>
https://portal.contoso.com
{
...
"backendUrl": "https://contoso-api.developer.azure-api.net"
...
{
...
"backendUrl": "https://contoso-api.developer.azure-api.net"
...
If you'd like to enable CAPTCHA in your developer portal, set"useHipCaptcha": true. Make sure toconfigure CORS settings for developer portal backend.
If you'd like to enable CAPTCHA in your developer portal, set"useHipCaptcha": true. Make sure toconfigure CORS settings for developer portal backend.
"useHipCaptcha": true
Inintegration, undergoogleFonts, optionally setapiKeyto a Google API key that allows access to the Web Fonts Developer API. This key is only needed if you want to add Google fonts in the Styles section of the developer portal editor.If you don't already have a key, you can configure one using the Google Cloud console. Follow these steps:Open theGoogle Cloud console.Check whether theWeb Fonts Developer APIis enabled. If it isn't,enable it.SelectCreate credentials>API key.In the open dialog, copy the generated key and paste it as the value ofapiKeyin theconfig.design.jsonfile.SelectEdit API keyto open the key editor.In the editor, underAPI restrictions, selectRestrict key. In the dropdown, selectWeb Fonts Developer API.SelectSave.
Inintegration, undergoogleFonts, optionally setapiKeyto a Google API key that allows access to the Web Fonts Developer API. This key is only needed if you want to add Google fonts in the Styles section of the developer portal editor.
integration
googleFonts
apiKey
If you don't already have a key, you can configure one using the Google Cloud console. Follow these steps:
Open theGoogle Cloud console.
Check whether theWeb Fonts Developer APIis enabled. If it isn't,enable it.
SelectCreate credentials>API key.
In the open dialog, copy the generated key and paste it as the value ofapiKeyin theconfig.design.jsonfile.
apiKey
config.design.json
SelectEdit API keyto open the key editor.
In the editor, underAPI restrictions, selectRestrict key. In the dropdown, selectWeb Fonts Developer API.
SelectSave.
config.publish.json file
Go to thesrcfolder and open theconfig.publish.jsonfile.
src
config.publish.json
{
  "environment": "publishing",
  "managementApiUrl": "https://<service-name>.management.azure-api.net",
  "managementApiAccessToken": "SharedAccessSignature...",
  "useHipCaptcha": false
}
{
  "environment": "publishing",
  "managementApiUrl": "https://<service-name>.management.azure-api.net",
  "managementApiAccessToken": "SharedAccessSignature...",
  "useHipCaptcha": false
}
Configure the file:
Copy and paste themanagementApiUrlandmanagementApiAccessTokenvalues from the previous configuration file.
Copy and paste themanagementApiUrlandmanagementApiAccessTokenvalues from the previous configuration file.
managementApiUrl
managementApiAccessToken
If you'd like to enable CAPTCHA in your developer portal, set"useHipCaptcha": true. Make sure toconfigure CORS settings for developer portal backend.
If you'd like to enable CAPTCHA in your developer portal, set"useHipCaptcha": true. Make sure toconfigure CORS settings for developer portal backend.
"useHipCaptcha": true
config.runtime.json file
Go to thesrcfolder and open theconfig.runtime.jsonfile.
src
config.runtime.json
{
  "environment": "runtime",
  "managementApiUrl": "https://<service-name>.management.azure-api.net",
  "backendUrl": "https://<service-name>.developer.azure-api.net"
}
{
  "environment": "runtime",
  "managementApiUrl": "https://<service-name>.management.azure-api.net",
  "backendUrl": "https://<service-name>.developer.azure-api.net"
}
Configure the file:
Copy and paste themanagementApiUrlvalue from the previous configuration file.
Copy and paste themanagementApiUrlvalue from the previous configuration file.
managementApiUrl
In thebackendUrlvalue, replace<service-name>with the name of your API Management instance. If you configured acustom domain, use it instead (for example.https://portal.contoso.com).{
...
"backendUrl": "https://contoso-api.developer.azure-api.net"
...
In thebackendUrlvalue, replace<service-name>with the name of your API Management instance. If you configured acustom domain, use it instead (for example.https://portal.contoso.com).
backendUrl
<service-name>
https://portal.contoso.com
{
...
"backendUrl": "https://contoso-api.developer.azure-api.net"
...
{
...
"backendUrl": "https://contoso-api.developer.azure-api.net"
...
Configure the static website
Configure theStatic websitefeature in your storage account by providing routes to the index and error pages:
Go to your storage account in the Azure portal and selectStatic websitefrom the menu on the left.
Go to your storage account in the Azure portal and selectStatic websitefrom the menu on the left.
On theStatic websitepage, selectEnabled.
On theStatic websitepage, selectEnabled.
In theIndex document namefield, enterindex.html.
In theIndex document namefield, enterindex.html.
In theError document pathfield, enter404/index.html.
In theError document pathfield, enter404/index.html.
SelectSave.
SelectSave.
Configure CORS settings for storage account
Configure the Cross-Origin Resource Sharing (CORS) settings for the storage account:
Go to your storage account in the Azure portal and selectCORSfrom the menu on the left.
Go to your storage account in the Azure portal and selectCORSfrom the menu on the left.
In theBlob servicetab, configure the following rules:RuleValueAllowed origins*Allowed methodsSelect all the HTTP verbs.Allowed headers*Exposed headers*Max age0
In theBlob servicetab, configure the following rules:
SelectSave.
SelectSave.
Configure CORS settings for developer portal backend
Configure CORS settings for the developer portal backend to allow requests originating through your self-hosted developer portal. The self-hosted developer portal relies on the developer portal's backend endpoint (set inbackendUrlin the portal configuration files) to enable several features, including:
backendUrl
CAPTCHA verification
OAuth 2.0 authorizationin the test console
Delegationof user authentication and product subscription
To add CORS settings:
Go to your API Management instance in the Azure portal, and selectDeveloper portal>Portal settingsfrom the menu on the left.
On theSelf-hosted portal configurationtab, add one or moreOrigindomain values. For example:The domain where the self-hosted portal is hosted, such ashttps://www.contoso.comlocalhostfor local development (if applicable), such ashttp://localhost:8080orhttps://localhost:8080
The domain where the self-hosted portal is hosted, such ashttps://www.contoso.com
https://www.contoso.com
localhostfor local development (if applicable), such ashttp://localhost:8080orhttps://localhost:8080
localhost
http://localhost:8080
https://localhost:8080
SelectSave.
Step 3: Run the portal
Now you can build and run a local portal instance in the development mode. In development mode, all the optimizations are turned off and the source maps are turned on.
Run the following command:
npm start
npm start
After a short time, the default browser automatically opens with your local developer portal instance. The default address ishttp://localhost:8080, but the port can change if8080is already occupied. Any changes to the codebase of the project triggers a rebuild and refresh your browser window.
http://localhost:8080
8080
Step 4: Edit through the visual editor
Use the visual editor to carry out these tasks:
Customize your portal
Author content
Organize the structure of the website
Stylize its appearance
SeeTutorial: Access and customize the developer portal. It covers the basics of the administrative user interface and lists recommended changes to the default content. Save all changes in the local environment, and pressCtrl+Cto close it.
Step 5: Publish locally
The portal data originates in the form of strong-typed objects. The following command translates them into static files and places the output in the./dist/websitedirectory:
./dist/website
npm run publish
npm run publish
Step 6: Upload static files to a blob
Use Azure CLI to upload the locally generated static files to a blob, and make sure your visitors can get to them:
Open Windows Command Prompt, PowerShell, or other command shell.
Open Windows Command Prompt, PowerShell, or other command shell.
Run the following Azure CLI command.Replace<account-connection-string>with the connection string of your storage account. You can get it from theAccess keyssection of your storage account.az storage blob upload-batch --source dist/website \
    --destination '$web' \
    --connection-string <account-connection-string>
Run the following Azure CLI command.
Replace<account-connection-string>with the connection string of your storage account. You can get it from theAccess keyssection of your storage account.
<account-connection-string>
az storage blob upload-batch --source dist/website \
    --destination '$web' \
    --connection-string <account-connection-string>
az storage blob upload-batch --source dist/website \
    --destination '$web' \
    --connection-string <account-connection-string>
Step 7: Go to your website
Your website is now live under the hostname specified in your Azure Storage properties (Primary endpointinStatic websites).
Step 8: Change API Management notification templates
Replace the developer portal URL in the API Management notification templates to point to your self-hosted portal. SeeHow to configure notifications and email templates in Azure API Management.
In particular, carry out the following changes to the default templates:
Note
The values in the followingUpdatedsections assume that you're hosting the portal athttps://portal.contoso.com/.
Email change confirmation
Update the developer portal URL in theEmail change confirmationnotification template:
Original content
<a id="confirmUrl" href="$ConfirmUrl" style="text-decoration:none">
  <strong>$ConfirmUrl</strong></a>
<a id="confirmUrl" href="$ConfirmUrl" style="text-decoration:none">
  <strong>$ConfirmUrl</strong></a>
Updated
<a id="confirmUrl" href="https://portal.contoso.com/signup?$ConfirmQuery" style="text-decoration:none">
  <strong>https://portal.contoso.com/signup?$ConfirmQuery</strong></a>
<a id="confirmUrl" href="https://portal.contoso.com/signup?$ConfirmQuery" style="text-decoration:none">
  <strong>https://portal.contoso.com/signup?$ConfirmQuery</strong></a>
New developer account confirmation
Update the developer portal URL in theNew developer account confirmationnotification template:
Original content
<a id="confirmUrl" href="$ConfirmUrl" style="text-decoration:none">
  <strong>$ConfirmUrl</strong></a>
<a id="confirmUrl" href="$ConfirmUrl" style="text-decoration:none">
  <strong>$ConfirmUrl</strong></a>
Updated
<a id="confirmUrl" href="https://portal.contoso.com/signup?$ConfirmQuery" style="text-decoration:none">
  <strong>https://portal.contoso.com/signup?$ConfirmQuery</strong></a>
<a id="confirmUrl" href="https://portal.contoso.com/signup?$ConfirmQuery" style="text-decoration:none">
  <strong>https://portal.contoso.com/signup?$ConfirmQuery</strong></a>
Invite user
Update the developer portal URL in theInvite usernotification template:
Original content
<a href="$ConfirmUrl">$ConfirmUrl</a>
<a href="$ConfirmUrl">$ConfirmUrl</a>
Updated
<a href="https://portal.contoso.com/confirm-v2/identities/basic/invite?$ConfirmQuery">https://portal.contoso.com/confirm-v2/identities/basic/invite?$ConfirmQuery</a>
<a href="https://portal.contoso.com/confirm-v2/identities/basic/invite?$ConfirmQuery">https://portal.contoso.com/confirm-v2/identities/basic/invite?$ConfirmQuery</a>
New subscription activated
Update the developer portal URL in theNew subscription activatednotification template:
Original content
Thank you for subscribing to the <a href="http://$DevPortalUrl/products/$ProdId"><strong>$ProdName</strong></a> and welcome to the $OrganizationName developer community. We are delighted to have you as part of the team and are looking forward to the amazing applications you will build using our API!
Thank you for subscribing to the <a href="http://$DevPortalUrl/products/$ProdId"><strong>$ProdName</strong></a> and welcome to the $OrganizationName developer community. We are delighted to have you as part of the team and are looking forward to the amazing applications you will build using our API!
Updated
Thank you for subscribing to the <a href="https://portal.contoso.com/product#product=$ProdId"><strong>$ProdName</strong></a> and welcome to the $OrganizationName developer community. We are delighted to have you as part of the team and are looking forward to the amazing applications you will build using our API!
Thank you for subscribing to the <a href="https://portal.contoso.com/product#product=$ProdId"><strong>$ProdName</strong></a> and welcome to the $OrganizationName developer community. We are delighted to have you as part of the team and are looking forward to the amazing applications you will build using our API!
Original content
Visit the developer <a href="http://$DevPortalUrl/developer">profile area</a> to manage your subscription and subscription keys
Visit the developer <a href="http://$DevPortalUrl/developer">profile area</a> to manage your subscription and subscription keys
Updated
Visit the developer <a href="https://portal.contoso.com/profile">profile area</a> to manage your subscription and subscription keys
Visit the developer <a href="https://portal.contoso.com/profile">profile area</a> to manage your subscription and subscription keys
Original content
<a href="http://$DevPortalUrl/docs/services?product=$ProdId">Learn about the API</a>
<a href="http://$DevPortalUrl/docs/services?product=$ProdId">Learn about the API</a>
Updated
<a href="https://portal.contoso.com/product#product=$ProdId">Learn about the API</a>
<a href="https://portal.contoso.com/product#product=$ProdId">Learn about the API</a>
Original content
<p style="font-size:12pt;font-family:'Segoe UI'">
  <strong>
    <a href="http://$DevPortalUrl/applications">Feature your app in the app gallery</a>
  </strong>
</p>
<p style="font-size:12pt;font-family:'Segoe UI'">You can publish your application on our gallery for increased visibility to potential new users.</p>
<p style="font-size:12pt;font-family:'Segoe UI'">
  <strong>
    <a href="http://$DevPortalUrl/issues">Stay in touch</a>
  </strong>
</p>
<p style="font-size:12pt;font-family:'Segoe UI'">
      If you have an issue, a question, a suggestion, a request, or if you just want to tell us something, go to the <a href="http://$DevPortalUrl/issues">Issues</a> page on the developer portal and create a new topic.
</p>
<p style="font-size:12pt;font-family:'Segoe UI'">
  <strong>
    <a href="http://$DevPortalUrl/applications">Feature your app in the app gallery</a>
  </strong>
</p>
<p style="font-size:12pt;font-family:'Segoe UI'">You can publish your application on our gallery for increased visibility to potential new users.</p>
<p style="font-size:12pt;font-family:'Segoe UI'">
  <strong>
    <a href="http://$DevPortalUrl/issues">Stay in touch</a>
  </strong>
</p>
<p style="font-size:12pt;font-family:'Segoe UI'">
      If you have an issue, a question, a suggestion, a request, or if you just want to tell us something, go to the <a href="http://$DevPortalUrl/issues">Issues</a> page on the developer portal and create a new topic.
</p>
Updated
<!--Remove the entire block of HTML code above.-->
<!--Remove the entire block of HTML code above.-->
Password change confirmation
Update the developer portal URL in thePassword change confirmationnotification template:
Original content
<a href="$DevPortalUrl">$DevPortalUrl</a>
<a href="$DevPortalUrl">$DevPortalUrl</a>
Updated
<a href="https://portal.contoso.com/confirm-password?$ConfirmQuery">https://portal.contoso.com/confirm-password?$ConfirmQuery</a>
<a href="https://portal.contoso.com/confirm-password?$ConfirmQuery">https://portal.contoso.com/confirm-password?$ConfirmQuery</a>
All templates
Update the developer portal URL in any template that has a link in the footer:
Original content
<a href="$DevPortalUrl">$DevPortalUrl</a>
<a href="$DevPortalUrl">$DevPortalUrl</a>
Updated
<a href="https://portal.contoso.com/">https://portal.contoso.com/</a>
<a href="https://portal.contoso.com/">https://portal.contoso.com/</a>
Move from managed to self-hosted developer portal
Over time, your business requirements may change. You can end up in a situation where the managed version of the API Management developer portal no longer satisfies your needs. For example, a new requirement may force you to build a custom widget that integrates with a third-party data provider. Unlike the manged version, the self-hosted version of the portal offers you full flexibility and extensibility.
Transition process
You can transition from the managed version to a self-hosted version within the same API Management service instance. The process preserves the modifications that you've carried out in the managed version of the portal. Make sure you back up the portal's content beforehand. You can find the backup script in thescriptsfolder of the API Management developer portalGitHub repo.
scripts
The conversion process is almost identical to setting up a generic self-hosted portal, as shown in previous steps in this article. There is one exception in the configuration step. The storage account in theconfig.design.jsonfile needs to be the same as the storage account of the managed version of the portal. SeeTutorial: Use a Linux VM system-assigned identity to access Azure Storage via a SAS credentialfor instructions on how to retrieve the SAS URL.
config.design.json
Tip
We recommend using a separate storage account in theconfig.publish.jsonfile. This approach gives you more control and simplifies the management of the hosting service of your portal.
config.publish.json
Related content
Learn aboutAlternative approaches to self-hosting
Feedback
Was this page helpful?
Additional resources