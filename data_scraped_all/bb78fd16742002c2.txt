Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Use JMS in Spring to access Azure Service Bus
Article
2025-04-18
18 contributors
In this article
This tutorial demonstrates how to use Spring Boot Starter for Azure Service Bus JMS to send messages to and receive messages from Service Busqueuesandtopics.
queues
topics
Azure provides an asynchronous messaging platform calledAzure Service Bus("Service Bus") that is based on theAdvanced Message Queueing Protocol 1.0("AMQP 1.0") standard. You can use Service Bus across the range of supported Azure platforms.
The Spring Boot Starter for Azure Service Bus JMS provides Spring JMS integration with Service Bus.
The following video describes how to integrate Spring JMS applications with Azure Service Bus using JMS 2.0.
In this tutorial, we include two authentication methods:Microsoft Entra authenticationandShared Access Signatures (SAS) authentication. ThePasswordlesstab shows the Microsoft Entra authentication and theConnection stringtab shows the SAS authentication.
Microsoft Entra authentication is a mechanism for connecting to Azure Service Bus JMS using identities defined in Microsoft Entra ID. With Microsoft Entra authentication, you can manage database user identities and other Microsoft services in a central location, which simplifies permission management.
SAS authentication uses the connection string of your Azure Service Bus namespace for the delegated access to Service Bus JMS. If you choose to use Shared Access Signatures as credentials, you need to manage the connection string by yourself.
Prerequisites
An Azure subscription -create one for free.
An Azure subscription -create one for free.
Java Development Kit (JDK)version 8 or higher.
Java Development Kit (JDK)version 8 or higher.
Apache Maven, version 3.2 or higher.
Apache Maven, version 3.2 or higher.
A queue or topic for Azure Service Bus. If you don't have one, seeUse Azure portal to create a Service Bus namespace and a queueorUse the Azure portal to create a Service Bus topic and subscriptions to the topic.
A queue or topic for Azure Service Bus. If you don't have one, seeUse Azure portal to create a Service Bus namespace and a queueorUse the Azure portal to create a Service Bus topic and subscriptions to the topic.
A Spring Boot application. If you don't have one, create a Maven project with theSpring Initializr. Be sure to selectMaven Projectand, underDependencies, add theSpring Webdependency, then select Java version 8 or higher.
A Spring Boot application. If you don't have one, create a Maven project with theSpring Initializr. Be sure to selectMaven Projectand, underDependencies, add theSpring Webdependency, then select Java version 8 or higher.
Important
Spring Boot version 2.5 or higher is required to complete the steps in this tutorial.
Send and receive messages from Azure Service Bus
With a queue or topic for Azure Service Bus, you can send and receive messages using Spring Cloud Azure Service Bus JMS.
To install the Spring Cloud Azure Service Bus JMS Starter module, add the following dependencies to yourpom.xmlfile:
The Spring Cloud Azure Bill of Materials (BOM):<dependencyManagement>
  <dependencies>
    <dependency>
      <groupId>com.azure.spring</groupId>
      <artifactId>spring-cloud-azure-dependencies</artifactId>
      <version>5.22.0</version>
      <type>pom</type>
      <scope>import</scope>
    </dependency>
  </dependencies>
</dependencyManagement>NoteIf you're using Spring Boot 2.x, be sure to set thespring-cloud-azure-dependenciesversion to4.20.0.
This Bill of Material (BOM) should be configured in the<dependencyManagement>section of yourpom.xmlfile. This ensures that all Spring Cloud Azure dependencies are using the same version.
For more information about the version used for this BOM, seeWhich Version of Spring Cloud Azure Should I Use.
The Spring Cloud Azure Bill of Materials (BOM):
<dependencyManagement>
  <dependencies>
    <dependency>
      <groupId>com.azure.spring</groupId>
      <artifactId>spring-cloud-azure-dependencies</artifactId>
      <version>5.22.0</version>
      <type>pom</type>
      <scope>import</scope>
    </dependency>
  </dependencies>
</dependencyManagement>
<dependencyManagement>
  <dependencies>
    <dependency>
      <groupId>com.azure.spring</groupId>
      <artifactId>spring-cloud-azure-dependencies</artifactId>
      <version>5.22.0</version>
      <type>pom</type>
      <scope>import</scope>
    </dependency>
  </dependencies>
</dependencyManagement>
Note
If you're using Spring Boot 2.x, be sure to set thespring-cloud-azure-dependenciesversion to4.20.0.
This Bill of Material (BOM) should be configured in the<dependencyManagement>section of yourpom.xmlfile. This ensures that all Spring Cloud Azure dependencies are using the same version.
For more information about the version used for this BOM, seeWhich Version of Spring Cloud Azure Should I Use.
spring-cloud-azure-dependencies
4.20.0
<dependencyManagement>
The Spring Cloud Azure Service Bus JMS Starter artifact:<dependency>
  <groupId>com.azure.spring</groupId>
  <artifactId>spring-cloud-azure-starter-servicebus-jms</artifactId>
</dependency>
The Spring Cloud Azure Service Bus JMS Starter artifact:
<dependency>
  <groupId>com.azure.spring</groupId>
  <artifactId>spring-cloud-azure-starter-servicebus-jms</artifactId>
</dependency>
<dependency>
  <groupId>com.azure.spring</groupId>
  <artifactId>spring-cloud-azure-starter-servicebus-jms</artifactId>
</dependency>
Code the application
Use the following steps to configure your application to use a Service Bus queue or topic to send and receive messages.
Configure the Service Bus credentials by adding the following properties to yourapplication.propertiesfile.Use a Service Bus queueUse a Service Bus topicPasswordless (Recommended)Connection stringNoteAzure Service Bus JMS supports using Microsoft Entra ID to authorize requests to Service Bus resources. With Microsoft Entra ID, you can useAzure role-based access control (Azure RBAC)to grant permissions to asecurity principal, which may be a user or an application service principal.ImportantBefore you start, ensure that you've assigned theAzure Service Bus Data Ownerrole to the Microsoft Entra account you're currently using. For more information, seeAssign Azure roles using the Azure portal.spring.jms.servicebus.namespace=<ServiceBusNamespace>
spring.jms.servicebus.pricing-tier=<ServiceBusPricingTier>
spring.jms.servicebus.passwordless-enabled=true
spring.jms.listener.receive-timeout=60000The following table describes the fields in the configuration:FieldDescriptionspring.jms.servicebus.namespaceSpecify the namespace you obtained in your Service Bus service instance from the Azure portal.spring.jms.servicebus.pricing-tierSpecify the pricing tier of your service bus. Supported values arepremiumandstandard. Premium tier uses Java Message Service (JMS) 2.0, while standard tier use JMS 1.1 to interact with Azure Service Bus.spring.jms.servicebus.passwordless-enabledSpecify whether to use passwordless.spring.jms.listener.receive-timeoutBy default the receive timeout value is 1000. We recommend that you set it to 60000spring.jms.servicebus.connection-string=<ServiceBusNamespaceConnectionString>
spring.jms.servicebus.pricing-tier=<ServiceBusPricingTier>
spring.jms.listener.receive-timeout=60000The following table describes the fields in the configuration:FieldDescriptionspring.jms.servicebus.connection-stringSpecify the connection string you obtained in your Service Bus namespace from the Azure portal.spring.jms.servicebus.pricing-tierSpecify the pricing tier of your service bus. Supported values arepremiumandstandard. Premium tier uses Java Message Service (JMS) 2.0, while standard tier use JMS 1.1 to interact with Azure Service Bus.spring.jms.listener.receive-timeoutBy default the receive timeout value is 1000. We recommend that you set it to 60000Passwordless (Recommended)Connection stringNoteAzure Service Bus JMS supports using Microsoft Entra ID to authorize requests to Service Bus resources. With Microsoft Entra ID, you can useAzure role-based access control (Azure RBAC)to grant permissions to asecurity principal, which may be a user or an application service principal.ImportantBefore you start, ensure that you've assigned theAzure Service Bus Data Ownerrole to the Microsoft Entra account you're currently using. For more information, seeAssign Azure roles using the Azure portal.spring.jms.servicebus.namespace=<ServiceBusNamespace>
spring.jms.servicebus.topic-client-id=<ServiceBusSubscriptionID>
spring.jms.servicebus.pricing-tier=<ServiceBusPricingTier>
spring.jms.servicebus.passwordless-enabled=true
spring.jms.listener.receive-timeout=60000The following table describes the fields in the configuration:FieldDescriptionspring.jms.servicebus.namespaceSpecify the namespace you obtained in your Service Bus service instance from the Azure portal.spring.jms.servicebus.pricing-tierSpecify the pricing tier of your service bus. Supported values arepremiumandstandard. Premium tier uses Java Message Service (JMS) 2.0, while standard tier use JMS 1.1 to interact with Azure Service Bus.spring.jms.servicebus.topic-client-idSpecify the JMS client ID, which is your Service Bus subscription ID in the Azure portal.spring.jms.servicebus.passwordless-enabledSpecify whether to use passwordless.spring.jms.listener.receive-timeoutBy default the receive timeout value is 1000. We recommend that you set it to 60000spring.jms.servicebus.connection-string=<ServiceBusNamespaceConnectionString>
spring.jms.servicebus.topic-client-id=<ServiceBusSubscriptionID>
spring.jms.servicebus.pricing-tier=<ServiceBusPricingTier>
spring.jms.listener.receive-timeout=60000The following table describes the fields in the configuration:FieldDescriptionspring.jms.servicebus.connection-stringSpecify the connection string you obtained in your Service Bus namespace from the Azure portal.spring.jms.servicebus.pricing-tierSpecify the pricing tier of your service bus. Supported values arepremiumandstandard. Premium tier uses Java Message Service (JMS) 2.0, while standard tier use JMS 1.1 to interact with Azure Service Bus.spring.jms.servicebus.topic-client-idSpecify the JMS client ID, which is your Service Bus subscription ID in the Azure portal.spring.jms.listener.receive-timeoutBy default the receive timeout value is 1000. We recommend that you set it to 60000
Configure the Service Bus credentials by adding the following properties to yourapplication.propertiesfile.
Use a Service Bus queue
Use a Service Bus topic
Passwordless (Recommended)
Connection string
Note
Azure Service Bus JMS supports using Microsoft Entra ID to authorize requests to Service Bus resources. With Microsoft Entra ID, you can useAzure role-based access control (Azure RBAC)to grant permissions to asecurity principal, which may be a user or an application service principal.
Important
Before you start, ensure that you've assigned theAzure Service Bus Data Ownerrole to the Microsoft Entra account you're currently using. For more information, seeAssign Azure roles using the Azure portal.
spring.jms.servicebus.namespace=<ServiceBusNamespace>
spring.jms.servicebus.pricing-tier=<ServiceBusPricingTier>
spring.jms.servicebus.passwordless-enabled=true
spring.jms.listener.receive-timeout=60000
spring.jms.servicebus.namespace=<ServiceBusNamespace>
spring.jms.servicebus.pricing-tier=<ServiceBusPricingTier>
spring.jms.servicebus.passwordless-enabled=true
spring.jms.listener.receive-timeout=60000
The following table describes the fields in the configuration:
spring.jms.servicebus.namespace
spring.jms.servicebus.pricing-tier
premium
standard
spring.jms.servicebus.passwordless-enabled
spring.jms.listener.receive-timeout
spring.jms.servicebus.connection-string=<ServiceBusNamespaceConnectionString>
spring.jms.servicebus.pricing-tier=<ServiceBusPricingTier>
spring.jms.listener.receive-timeout=60000
spring.jms.servicebus.connection-string=<ServiceBusNamespaceConnectionString>
spring.jms.servicebus.pricing-tier=<ServiceBusPricingTier>
spring.jms.listener.receive-timeout=60000
The following table describes the fields in the configuration:
spring.jms.servicebus.connection-string
spring.jms.servicebus.pricing-tier
premium
standard
spring.jms.listener.receive-timeout
Passwordless (Recommended)
Connection string
Note
Azure Service Bus JMS supports using Microsoft Entra ID to authorize requests to Service Bus resources. With Microsoft Entra ID, you can useAzure role-based access control (Azure RBAC)to grant permissions to asecurity principal, which may be a user or an application service principal.
Important
Before you start, ensure that you've assigned theAzure Service Bus Data Ownerrole to the Microsoft Entra account you're currently using. For more information, seeAssign Azure roles using the Azure portal.
spring.jms.servicebus.namespace=<ServiceBusNamespace>
spring.jms.servicebus.topic-client-id=<ServiceBusSubscriptionID>
spring.jms.servicebus.pricing-tier=<ServiceBusPricingTier>
spring.jms.servicebus.passwordless-enabled=true
spring.jms.listener.receive-timeout=60000
spring.jms.servicebus.namespace=<ServiceBusNamespace>
spring.jms.servicebus.topic-client-id=<ServiceBusSubscriptionID>
spring.jms.servicebus.pricing-tier=<ServiceBusPricingTier>
spring.jms.servicebus.passwordless-enabled=true
spring.jms.listener.receive-timeout=60000
The following table describes the fields in the configuration:
spring.jms.servicebus.namespace
spring.jms.servicebus.pricing-tier
premium
standard
spring.jms.servicebus.topic-client-id
spring.jms.servicebus.passwordless-enabled
spring.jms.listener.receive-timeout
spring.jms.servicebus.connection-string=<ServiceBusNamespaceConnectionString>
spring.jms.servicebus.topic-client-id=<ServiceBusSubscriptionID>
spring.jms.servicebus.pricing-tier=<ServiceBusPricingTier>
spring.jms.listener.receive-timeout=60000
spring.jms.servicebus.connection-string=<ServiceBusNamespaceConnectionString>
spring.jms.servicebus.topic-client-id=<ServiceBusSubscriptionID>
spring.jms.servicebus.pricing-tier=<ServiceBusPricingTier>
spring.jms.listener.receive-timeout=60000
The following table describes the fields in the configuration:
spring.jms.servicebus.connection-string
spring.jms.servicebus.pricing-tier
premium
standard
spring.jms.servicebus.topic-client-id
spring.jms.listener.receive-timeout
Add@EnableJmsto enable support for JMS listener annotated endpoints. UseJmsTemplateto send messages and@JmsListenerto receive messages, as shown in the following example:Use a Service Bus queueUse a Service Bus topicimport org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.jms.annotation.EnableJms;
import org.springframework.boot.CommandLineRunner;
import org.springframework.jms.annotation.JmsListener;
import org.springframework.jms.core.JmsTemplate;

@SpringBootApplication
@EnableJms
public class ServiceBusJMSQueueApplication implements CommandLineRunner {

    private static final Logger LOGGER = LoggerFactory.getLogger(ServiceBusJMSQueueApplication.class);
    private static final String QUEUE_NAME = "<QueueName>";

    @Autowired
    private JmsTemplate jmsTemplate;

    public static void main(String[] args) {
        SpringApplication.run(ServiceBusJMSQueueApplication.class, args);
    }

    @Override
    public void run(String... args) {
        LOGGER.info("Sending message");
        jmsTemplate.convertAndSend(QUEUE_NAME, "Hello World");
    }

    @JmsListener(destination = QUEUE_NAME, containerFactory = "jmsListenerContainerFactory")
    public void receiveMessage(String message) {
        LOGGER.info("Message received: {}", message);
    }

}Replace<QueueName>with your own queue name configured in your Service Bus namespace.import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.jms.annotation.EnableJms;
import org.springframework.jms.annotation.JmsListener;
import org.springframework.jms.core.JmsTemplate;

@SpringBootApplication
@EnableJms
public class ServiceBusJMSTopicApplication implements CommandLineRunner {

    private static final Logger LOGGER = LoggerFactory.getLogger(ServiceBusJMSTopicApplication.class);
    private static final String TOPIC_NAME = "<TopicName>";
    private static final String SUBSCRIPTION_NAME = "<SubscriptionName>";

    @Autowired
    private JmsTemplate jmsTemplate;

    public static void main(String[] args) {
        SpringApplication.run(ServiceBusJMSTopicApplication.class, args);
    }

    @Override
    public void run(String... args) {
        LOGGER.info("Sending message");
        jmsTemplate.convertAndSend(TOPIC_NAME, "Hello World");
    }

    @JmsListener(destination = TOPIC_NAME, containerFactory = "topicJmsListenerContainerFactory",
        subscription = SUBSCRIPTION_NAME)
    public void receiveMessage(String message) {
        LOGGER.info("Message received: {}", message);
    }

}Replace the<TopicName>placeholder with your own topic name configured in your Service Bus namespace. Replace the<SubscriptionName>placeholder with your own subscription name for your Service Bus topic.TipIn this tutorial, there are no authentication operations in the configurations or the code. However, connecting to Azure services requires authentication. To complete the authentication, you need to use Azure Identity. Spring Cloud Azure usesDefaultAzureCredential, which the Azure Identity library provides to help you get credentials without any code changes.DefaultAzureCredentialsupports multiple authentication methods and determines which method to use at runtime. This approach enables your app to use different authentication methods in different environments (such as local and production environments) without implementing environment-specific code. For more information, seeDefaultAzureCredential.To complete the authentication in local development environments, you can use Azure CLI, Visual Studio Code, PowerShell, or other methods. For more information, seeAzure authentication in Java development environments. To complete the authentication in Azure hosting environments, we recommend using user-assigned managed identity. For more information, seeWhat are managed identities for Azure resources?
Add@EnableJmsto enable support for JMS listener annotated endpoints. UseJmsTemplateto send messages and@JmsListenerto receive messages, as shown in the following example:
@EnableJms
JmsTemplate
@JmsListener
Use a Service Bus queue
Use a Service Bus topic
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.jms.annotation.EnableJms;
import org.springframework.boot.CommandLineRunner;
import org.springframework.jms.annotation.JmsListener;
import org.springframework.jms.core.JmsTemplate;

@SpringBootApplication
@EnableJms
public class ServiceBusJMSQueueApplication implements CommandLineRunner {

    private static final Logger LOGGER = LoggerFactory.getLogger(ServiceBusJMSQueueApplication.class);
    private static final String QUEUE_NAME = "<QueueName>";

    @Autowired
    private JmsTemplate jmsTemplate;

    public static void main(String[] args) {
        SpringApplication.run(ServiceBusJMSQueueApplication.class, args);
    }

    @Override
    public void run(String... args) {
        LOGGER.info("Sending message");
        jmsTemplate.convertAndSend(QUEUE_NAME, "Hello World");
    }

    @JmsListener(destination = QUEUE_NAME, containerFactory = "jmsListenerContainerFactory")
    public void receiveMessage(String message) {
        LOGGER.info("Message received: {}", message);
    }

}
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.jms.annotation.EnableJms;
import org.springframework.boot.CommandLineRunner;
import org.springframework.jms.annotation.JmsListener;
import org.springframework.jms.core.JmsTemplate;

@SpringBootApplication
@EnableJms
public class ServiceBusJMSQueueApplication implements CommandLineRunner {

    private static final Logger LOGGER = LoggerFactory.getLogger(ServiceBusJMSQueueApplication.class);
    private static final String QUEUE_NAME = "<QueueName>";

    @Autowired
    private JmsTemplate jmsTemplate;

    public static void main(String[] args) {
        SpringApplication.run(ServiceBusJMSQueueApplication.class, args);
    }

    @Override
    public void run(String... args) {
        LOGGER.info("Sending message");
        jmsTemplate.convertAndSend(QUEUE_NAME, "Hello World");
    }

    @JmsListener(destination = QUEUE_NAME, containerFactory = "jmsListenerContainerFactory")
    public void receiveMessage(String message) {
        LOGGER.info("Message received: {}", message);
    }

}
Replace<QueueName>with your own queue name configured in your Service Bus namespace.
<QueueName>
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.jms.annotation.EnableJms;
import org.springframework.jms.annotation.JmsListener;
import org.springframework.jms.core.JmsTemplate;

@SpringBootApplication
@EnableJms
public class ServiceBusJMSTopicApplication implements CommandLineRunner {

    private static final Logger LOGGER = LoggerFactory.getLogger(ServiceBusJMSTopicApplication.class);
    private static final String TOPIC_NAME = "<TopicName>";
    private static final String SUBSCRIPTION_NAME = "<SubscriptionName>";

    @Autowired
    private JmsTemplate jmsTemplate;

    public static void main(String[] args) {
        SpringApplication.run(ServiceBusJMSTopicApplication.class, args);
    }

    @Override
    public void run(String... args) {
        LOGGER.info("Sending message");
        jmsTemplate.convertAndSend(TOPIC_NAME, "Hello World");
    }

    @JmsListener(destination = TOPIC_NAME, containerFactory = "topicJmsListenerContainerFactory",
        subscription = SUBSCRIPTION_NAME)
    public void receiveMessage(String message) {
        LOGGER.info("Message received: {}", message);
    }

}
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.jms.annotation.EnableJms;
import org.springframework.jms.annotation.JmsListener;
import org.springframework.jms.core.JmsTemplate;

@SpringBootApplication
@EnableJms
public class ServiceBusJMSTopicApplication implements CommandLineRunner {

    private static final Logger LOGGER = LoggerFactory.getLogger(ServiceBusJMSTopicApplication.class);
    private static final String TOPIC_NAME = "<TopicName>";
    private static final String SUBSCRIPTION_NAME = "<SubscriptionName>";

    @Autowired
    private JmsTemplate jmsTemplate;

    public static void main(String[] args) {
        SpringApplication.run(ServiceBusJMSTopicApplication.class, args);
    }

    @Override
    public void run(String... args) {
        LOGGER.info("Sending message");
        jmsTemplate.convertAndSend(TOPIC_NAME, "Hello World");
    }

    @JmsListener(destination = TOPIC_NAME, containerFactory = "topicJmsListenerContainerFactory",
        subscription = SUBSCRIPTION_NAME)
    public void receiveMessage(String message) {
        LOGGER.info("Message received: {}", message);
    }

}
Replace the<TopicName>placeholder with your own topic name configured in your Service Bus namespace. Replace the<SubscriptionName>placeholder with your own subscription name for your Service Bus topic.
<TopicName>
<SubscriptionName>
Tip
In this tutorial, there are no authentication operations in the configurations or the code. However, connecting to Azure services requires authentication. To complete the authentication, you need to use Azure Identity. Spring Cloud Azure usesDefaultAzureCredential, which the Azure Identity library provides to help you get credentials without any code changes.
DefaultAzureCredential
DefaultAzureCredentialsupports multiple authentication methods and determines which method to use at runtime. This approach enables your app to use different authentication methods in different environments (such as local and production environments) without implementing environment-specific code. For more information, seeDefaultAzureCredential.
DefaultAzureCredential
To complete the authentication in local development environments, you can use Azure CLI, Visual Studio Code, PowerShell, or other methods. For more information, seeAzure authentication in Java development environments. To complete the authentication in Azure hosting environments, we recommend using user-assigned managed identity. For more information, seeWhat are managed identities for Azure resources?
Start the application. You should seeSending messageandHello Worldposted to your application log, as shown in the following example output:Sending message
Message received: Hello World
Start the application. You should seeSending messageandHello Worldposted to your application log, as shown in the following example output:
Sending message
Hello World
Sending message
Message received: Hello World
Sending message
Message received: Hello World
Deploy to Azure Spring Apps
Now that you have the Spring Boot application running locally, it's time to move it to production.Azure Spring Appsmakes it easy to deploy Spring Boot applications to Azure without any code changes. The service manages the infrastructure of Spring applications so developers can focus on their code. Azure Spring Apps provides lifecycle management using comprehensive monitoring and diagnostics, configuration management, service discovery, CI/CD integration, blue-green deployments, and more. To deploy your application to Azure Spring Apps, seeDeploy your first application to Azure Spring Apps.
Next steps
Azure for Spring developersSpring Cloud Azure Service Bus JMS Samples
Feedback
Was this page helpful?
Additional resources