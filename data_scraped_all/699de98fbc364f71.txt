Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Release and work item insights
Article
2025-01-31
7 contributors
In this article
Release and work item insights are crucial for optimizing the software development lifecycle. As applications evolve, it's vital to monitor each release and its work items closely. These insights highlight performance bottlenecks and let teams address issues proactively, ensuring smooth deployment and user experience. They equip developers and stakeholders to make decisions, adjust processes, and deliver high-quality software.
Continuous monitoring
Release annotations
Work item integration
Azure Pipelines integrates with Application Insights to allow continuous monitoring of your Azure DevOps release pipeline throughout the software development lifecycle.
With continuous monitoring, release pipelines can incorporate monitoring data from Application Insights and other Azure resources. When the release pipeline detects an Application Insights alert, the pipeline can gate or roll back the deployment until the alert is resolved. If all checks pass, deployments can proceed automatically from test all the way to production, without the need for manual intervention.
Configure continuous monitoring
InAzure DevOps, select an organization and project.
InAzure DevOps, select an organization and project.
On the left menu of the project page, selectPipelines>Releases.
On the left menu of the project page, selectPipelines>Releases.
Select the dropdown arrow next toNewand selectNew release pipeline. Or, if you don't have a pipeline yet, selectNew pipelineon the page that appears.
Select the dropdown arrow next toNewand selectNew release pipeline. Or, if you don't have a pipeline yet, selectNew pipelineon the page that appears.
On theSelect a templatepane, search for and selectAzure App Service deployment with continuous monitoring, and then selectApply.
On theSelect a templatepane, search for and selectAzure App Service deployment with continuous monitoring, and then selectApply.

In theStage 1box, select the hyperlink toView stage tasks.
In theStage 1box, select the hyperlink toView stage tasks.

In theStage 1configuration pane, fill in the following fields:ParameterValueStage nameProvide a stage name or leave it atStage 1.Azure subscriptionSelect the dropdown arrow and select the linked Azure subscription you want to use.App typeSelect the dropdown arrow and select your app type.App Service nameEnter the name of your Azure App Service.Resource Group name for Application InsightsSelect the dropdown arrow and select the resource group you want to use.Application Insights resource nameSelect the dropdown arrow and select the Application Insights resource for the resource group you selected.
In theStage 1configuration pane, fill in the following fields:
To save the pipeline with default alert rule settings, selectSavein the upper-right corner of the Azure DevOps window. Enter a descriptive comment and selectOK.
To save the pipeline with default alert rule settings, selectSavein the upper-right corner of the Azure DevOps window. Enter a descriptive comment and selectOK.
Modify alert rules
Out of the box, theAzure App Service deployment with continuous monitoringtemplate has four alert rules:Availability,Failed requests,Server response time, andServer exceptions. You can add more rules or change the rule settings to meet your service level needs.
To modify alert rule settings:
In the left pane of the release pipeline page, selectConfigure Application Insights Alerts.
The four default alert rules are created via an Inline script:
$subscription = az account show --query "id";$subscription.Trim("`"");$resource="/subscriptions/$subscription/resourcegroups/"+"$(Parameters.AppInsightsResourceGroupName)"+"/providers/microsoft.insights/components/" + "$(Parameters.ApplicationInsightsResourceName)";
az monitor metrics alert create -n 'Availability_$(Release.DefinitionName)' -g $(Parameters.AppInsightsResourceGroupName) --scopes $resource --condition 'avg availabilityResults/availabilityPercentage < 99' --description "created from Azure DevOps";
az monitor metrics alert create -n 'FailedRequests_$(Release.DefinitionName)' -g $(Parameters.AppInsightsResourceGroupName) --scopes $resource --condition 'count requests/failed > 5' --description "created from Azure DevOps";
az monitor metrics alert create -n 'ServerResponseTime_$(Release.DefinitionName)' -g $(Parameters.AppInsightsResourceGroupName) --scopes $resource --condition 'avg requests/duration > 5' --description "created from Azure DevOps";
az monitor metrics alert create -n 'ServerExceptions_$(Release.DefinitionName)' -g $(Parameters.AppInsightsResourceGroupName) --scopes $resource --condition 'count exceptions/server > 5' --description "created from Azure DevOps";
$subscription = az account show --query "id";$subscription.Trim("`"");$resource="/subscriptions/$subscription/resourcegroups/"+"$(Parameters.AppInsightsResourceGroupName)"+"/providers/microsoft.insights/components/" + "$(Parameters.ApplicationInsightsResourceName)";
az monitor metrics alert create -n 'Availability_$(Release.DefinitionName)' -g $(Parameters.AppInsightsResourceGroupName) --scopes $resource --condition 'avg availabilityResults/availabilityPercentage < 99' --description "created from Azure DevOps";
az monitor metrics alert create -n 'FailedRequests_$(Release.DefinitionName)' -g $(Parameters.AppInsightsResourceGroupName) --scopes $resource --condition 'count requests/failed > 5' --description "created from Azure DevOps";
az monitor metrics alert create -n 'ServerResponseTime_$(Release.DefinitionName)' -g $(Parameters.AppInsightsResourceGroupName) --scopes $resource --condition 'avg requests/duration > 5' --description "created from Azure DevOps";
az monitor metrics alert create -n 'ServerExceptions_$(Release.DefinitionName)' -g $(Parameters.AppInsightsResourceGroupName) --scopes $resource --condition 'count exceptions/server > 5' --description "created from Azure DevOps";
You can modify the script and add more alert rules. You can also modify the alert conditions. And you can remove alert rules that don't make sense for your deployment purposes.
Add deployment conditions
When you add deployment gates to your release pipeline, an alert that exceeds the thresholds you set prevents unwanted release promotion. After you resolve the alert, the deployment can proceed automatically.
To add deployment gates:
On the main pipeline page, underStages, select thePre-deployment conditionsorPost-deployment conditionssymbol, depending on which stage needs a continuous monitoring gate.
On the main pipeline page, underStages, select thePre-deployment conditionsorPost-deployment conditionssymbol, depending on which stage needs a continuous monitoring gate.

In thePre-deployment conditionsconfiguration pane, setGatestoEnabled.
In thePre-deployment conditionsconfiguration pane, setGatestoEnabled.
Next toDeployment gates, selectAdd.
Next toDeployment gates, selectAdd.
SelectQuery Azure Monitor alertsfrom the dropdown menu. This option lets you access both Azure Monitor and Application Insights alerts.
SelectQuery Azure Monitor alertsfrom the dropdown menu. This option lets you access both Azure Monitor and Application Insights alerts.

UnderEvaluation options, enter the values you want for settings likeThe time between re-evaluation of gatesandThe timeout after which gates fail.
UnderEvaluation options, enter the values you want for settings likeThe time between re-evaluation of gatesandThe timeout after which gates fail.
View release logs
You can see deployment gate behavior and other release steps in the release logs. To open the logs:
SelectReleasesfrom the left menu of the pipeline page.
SelectReleasesfrom the left menu of the pipeline page.
Select any release.
Select any release.
UnderStages, select any stage to view a release summary.
UnderStages, select any stage to view a release summary.
To view logs, selectView logsin the release summary, select theSucceededorFailedhyperlink in any stage, or hover over any stage and selectLogs.
To view logs, selectView logsin the release summary, select theSucceededorFailedhyperlink in any stage, or hover over any stage and selectLogs.

Annotations show where you deployed a new build or other significant events. Annotations make it easy to see whether your changes had any effect on your application's performance. They can be created automatically by theAzure Pipelinesbuild system. You can also create annotations to flag any event you want by creating them from PowerShell.
Release annotations with Azure Pipelines build
Release annotations are a feature of the cloud-based Azure Pipelines service of Azure DevOps.
If all the following criteria are met, the deployment task creates the release annotation automatically:
The resource to which you're deploying is linked to Application Insights via theAPPINSIGHTS_INSTRUMENTATIONKEYapp setting.
The resource to which you're deploying is linked to Application Insights via theAPPINSIGHTS_INSTRUMENTATIONKEYapp setting.
APPINSIGHTS_INSTRUMENTATIONKEY
The Application Insights resource is in the same subscription as the resource to which you're deploying.
The Application Insights resource is in the same subscription as the resource to which you're deploying.
You're using one of the following Azure DevOps pipeline tasks:Task codeTask nameVersionsAzureAppServiceSettingsAzure App Service SettingsAnyAzureRmWebAppDeploymentAzure App Service deployV3 and aboveAzureFunctionAppAzure FunctionsAnyAzureFunctionAppContainerAzure Functions for containerAnyAzureWebAppContainerAzure Web App for ContainersAnyAzureWebAppAzure Web AppAny
You're using one of the following Azure DevOps pipeline tasks:
Note
If you're still using the Application Insights annotation deployment task, you should delete it.
Configure release annotations
If you can't use one of the deployment tasks in the previous section, you need to add an inline script task in your deployment pipeline.
Go to a new or existing pipeline and select a task.
Go to a new or existing pipeline and select a task.

Add a new task and selectAzure CLI.
Add a new task and selectAzure CLI.

Specify the relevant Azure subscription. ChangeScript TypetoPowerShellandScript LocationtoInline.
Specify the relevant Azure subscription. ChangeScript TypetoPowerShellandScript LocationtoInline.
Add thePowerShell script from step 2 in the next sectiontoInline Script.
Add thePowerShell script from step 2 in the next sectiontoInline Script.
Add the following arguments. Replace the angle-bracketed placeholders with your values toScript Arguments. The-releasePropertiesare optional.-aiResourceId "<aiResourceId>" `
    -releaseName "<releaseName>" `
    -releaseProperties @{"ReleaseDescription"="<a description>";
         "TriggerBy"="<Your name>" }The following example shows metadata you can set in the optionalreleasePropertiesargument by usingbuildandreleasevariables.-releaseProperties @{
 "BuildNumber"="$(Build.BuildNumber)";
 "BuildRepositoryName"="$(Build.Repository.Name)";
 "BuildRepositoryProvider"="$(Build.Repository.Provider)";
 "ReleaseDefinitionName"="$(Build.DefinitionName)";
 "ReleaseDescription"="Triggered by $(Build.DefinitionName) $(Build.BuildNumber)";
 "ReleaseEnvironmentName"="$(Release.EnvironmentName)";
 "ReleaseId"="$(Release.ReleaseId)";
 "ReleaseName"="$(Release.ReleaseName)";
 "ReleaseRequestedFor"="$(Release.RequestedFor)";
 "ReleaseWebUrl"="$(Release.ReleaseWebUrl)";
 "SourceBranch"="$(Build.SourceBranch)";
 "TeamFoundationCollectionUri"="$(System.TeamFoundationCollectionUri)" }
Add the following arguments. Replace the angle-bracketed placeholders with your values toScript Arguments. The-releasePropertiesare optional.
-releaseProperties
-aiResourceId "<aiResourceId>" `
    -releaseName "<releaseName>" `
    -releaseProperties @{"ReleaseDescription"="<a description>";
         "TriggerBy"="<Your name>" }
-aiResourceId "<aiResourceId>" `
    -releaseName "<releaseName>" `
    -releaseProperties @{"ReleaseDescription"="<a description>";
         "TriggerBy"="<Your name>" }

The following example shows metadata you can set in the optionalreleasePropertiesargument by usingbuildandreleasevariables.
releaseProperties
-releaseProperties @{
 "BuildNumber"="$(Build.BuildNumber)";
 "BuildRepositoryName"="$(Build.Repository.Name)";
 "BuildRepositoryProvider"="$(Build.Repository.Provider)";
 "ReleaseDefinitionName"="$(Build.DefinitionName)";
 "ReleaseDescription"="Triggered by $(Build.DefinitionName) $(Build.BuildNumber)";
 "ReleaseEnvironmentName"="$(Release.EnvironmentName)";
 "ReleaseId"="$(Release.ReleaseId)";
 "ReleaseName"="$(Release.ReleaseName)";
 "ReleaseRequestedFor"="$(Release.RequestedFor)";
 "ReleaseWebUrl"="$(Release.ReleaseWebUrl)";
 "SourceBranch"="$(Build.SourceBranch)";
 "TeamFoundationCollectionUri"="$(System.TeamFoundationCollectionUri)" }
-releaseProperties @{
 "BuildNumber"="$(Build.BuildNumber)";
 "BuildRepositoryName"="$(Build.Repository.Name)";
 "BuildRepositoryProvider"="$(Build.Repository.Provider)";
 "ReleaseDefinitionName"="$(Build.DefinitionName)";
 "ReleaseDescription"="Triggered by $(Build.DefinitionName) $(Build.BuildNumber)";
 "ReleaseEnvironmentName"="$(Release.EnvironmentName)";
 "ReleaseId"="$(Release.ReleaseId)";
 "ReleaseName"="$(Release.ReleaseName)";
 "ReleaseRequestedFor"="$(Release.RequestedFor)";
 "ReleaseWebUrl"="$(Release.ReleaseWebUrl)";
 "SourceBranch"="$(Build.SourceBranch)";
 "TeamFoundationCollectionUri"="$(System.TeamFoundationCollectionUri)" }
SelectSave.
SelectSave.
Create release annotations with the Azure CLI
You can use theCreateReleaseAnnotationPowerShell script to create annotations from any process you want without using Azure DevOps.
CreateReleaseAnnotation
Sign in to theAzure CLI.
Sign in to theAzure CLI.
Make a local copy of the following script and call itCreateReleaseAnnotation.ps1.param(
    [parameter(Mandatory = $true)][string]$aiResourceId,
    [parameter(Mandatory = $true)][string]$releaseName,
    [parameter(Mandatory = $false)]$releaseProperties = @()
)

# Function to ensure all Unicode characters in a JSON string are properly escaped
function Convert-UnicodeToEscapeHex {
  param (
    [parameter(Mandatory = $true)][string]$JsonString
  )
  $JsonObject = ConvertFrom-Json -InputObject $JsonString
  foreach ($property in $JsonObject.PSObject.Properties) {
    $name = $property.Name
    $value = $property.Value
    if ($value -is [string]) {
      $value = [regex]::Unescape($value)
      $OutputString = ""
      foreach ($char in $value.ToCharArray()) {
        $dec = [int]$char
        if ($dec -gt 127) {
          $hex = [convert]::ToString($dec, 16)
          $hex = $hex.PadLeft(4, '0')
          $OutputString += "\u$hex"
        }
        else {
          $OutputString += $char
        }
      }
      $JsonObject.$name = $OutputString
    }
  }
  return ConvertTo-Json -InputObject $JsonObject -Compress
}

$annotation = @{
    Id = [GUID]::NewGuid();
    AnnotationName = $releaseName;
    EventTime = (Get-Date).ToUniversalTime().GetDateTimeFormats("s")[0];
    Category = "Deployment"; #Application Insights only displays annotations from the "Deployment" Category
    Properties = ConvertTo-Json $releaseProperties -Compress
}

$annotation = ConvertTo-Json $annotation -Compress
$annotation = Convert-UnicodeToEscapeHex -JsonString $annotation  

$accessToken = (az account get-access-token | ConvertFrom-Json).accessToken
$headers = @{
    "Authorization" = "Bearer $accessToken"
    "Accept"        = "application/json"
    "Content-Type"  = "application/json"
}
$params = @{
    Headers = $headers
    Method  = "Put"
    Uri     = "https://management.azure.com$($aiResourceId)/Annotations?api-version=2015-05-01"
    Body    = $annotation
}
Invoke-RestMethod @paramsNoteYour annotations must haveCategoryset toDeploymentto appear in the Azure portal.If you receive an error, "The request contains an entity body but no Content-Type header", try removing the replace parameters in the following line.$body = (ConvertTo-Json $annotation -Compress)
Make a local copy of the following script and call itCreateReleaseAnnotation.ps1.
CreateReleaseAnnotation.ps1
param(
    [parameter(Mandatory = $true)][string]$aiResourceId,
    [parameter(Mandatory = $true)][string]$releaseName,
    [parameter(Mandatory = $false)]$releaseProperties = @()
)

# Function to ensure all Unicode characters in a JSON string are properly escaped
function Convert-UnicodeToEscapeHex {
  param (
    [parameter(Mandatory = $true)][string]$JsonString
  )
  $JsonObject = ConvertFrom-Json -InputObject $JsonString
  foreach ($property in $JsonObject.PSObject.Properties) {
    $name = $property.Name
    $value = $property.Value
    if ($value -is [string]) {
      $value = [regex]::Unescape($value)
      $OutputString = ""
      foreach ($char in $value.ToCharArray()) {
        $dec = [int]$char
        if ($dec -gt 127) {
          $hex = [convert]::ToString($dec, 16)
          $hex = $hex.PadLeft(4, '0')
          $OutputString += "\u$hex"
        }
        else {
          $OutputString += $char
        }
      }
      $JsonObject.$name = $OutputString
    }
  }
  return ConvertTo-Json -InputObject $JsonObject -Compress
}

$annotation = @{
    Id = [GUID]::NewGuid();
    AnnotationName = $releaseName;
    EventTime = (Get-Date).ToUniversalTime().GetDateTimeFormats("s")[0];
    Category = "Deployment"; #Application Insights only displays annotations from the "Deployment" Category
    Properties = ConvertTo-Json $releaseProperties -Compress
}

$annotation = ConvertTo-Json $annotation -Compress
$annotation = Convert-UnicodeToEscapeHex -JsonString $annotation  

$accessToken = (az account get-access-token | ConvertFrom-Json).accessToken
$headers = @{
    "Authorization" = "Bearer $accessToken"
    "Accept"        = "application/json"
    "Content-Type"  = "application/json"
}
$params = @{
    Headers = $headers
    Method  = "Put"
    Uri     = "https://management.azure.com$($aiResourceId)/Annotations?api-version=2015-05-01"
    Body    = $annotation
}
Invoke-RestMethod @params
param(
    [parameter(Mandatory = $true)][string]$aiResourceId,
    [parameter(Mandatory = $true)][string]$releaseName,
    [parameter(Mandatory = $false)]$releaseProperties = @()
)

# Function to ensure all Unicode characters in a JSON string are properly escaped
function Convert-UnicodeToEscapeHex {
  param (
    [parameter(Mandatory = $true)][string]$JsonString
  )
  $JsonObject = ConvertFrom-Json -InputObject $JsonString
  foreach ($property in $JsonObject.PSObject.Properties) {
    $name = $property.Name
    $value = $property.Value
    if ($value -is [string]) {
      $value = [regex]::Unescape($value)
      $OutputString = ""
      foreach ($char in $value.ToCharArray()) {
        $dec = [int]$char
        if ($dec -gt 127) {
          $hex = [convert]::ToString($dec, 16)
          $hex = $hex.PadLeft(4, '0')
          $OutputString += "\u$hex"
        }
        else {
          $OutputString += $char
        }
      }
      $JsonObject.$name = $OutputString
    }
  }
  return ConvertTo-Json -InputObject $JsonObject -Compress
}

$annotation = @{
    Id = [GUID]::NewGuid();
    AnnotationName = $releaseName;
    EventTime = (Get-Date).ToUniversalTime().GetDateTimeFormats("s")[0];
    Category = "Deployment"; #Application Insights only displays annotations from the "Deployment" Category
    Properties = ConvertTo-Json $releaseProperties -Compress
}

$annotation = ConvertTo-Json $annotation -Compress
$annotation = Convert-UnicodeToEscapeHex -JsonString $annotation  

$accessToken = (az account get-access-token | ConvertFrom-Json).accessToken
$headers = @{
    "Authorization" = "Bearer $accessToken"
    "Accept"        = "application/json"
    "Content-Type"  = "application/json"
}
$params = @{
    Headers = $headers
    Method  = "Put"
    Uri     = "https://management.azure.com$($aiResourceId)/Annotations?api-version=2015-05-01"
    Body    = $annotation
}
Invoke-RestMethod @params
Note
Your annotations must haveCategoryset toDeploymentto appear in the Azure portal.
If you receive an error, "The request contains an entity body but no Content-Type header", try removing the replace parameters in the following line.
$body = (ConvertTo-Json $annotation -Compress)
$body = (ConvertTo-Json $annotation -Compress)
Call the PowerShell script with the following code. Replace the angle-bracketed placeholders with your values. The-releasePropertiesare optional..\CreateReleaseAnnotation.ps1 `
      -aiResourceId "<aiResourceId>" `
      -releaseName "<releaseName>" `
      -releaseProperties @{"ReleaseDescription"="<a description>";
          "TriggerBy"="<Your name>" }ArgumentDefinitionNoteaiResourceIdThe resource ID to the target Application Insights resource.Example:/subscriptions/aaaa0a0a-bb1b-cc2c-dd3d-eeeeee4e4e4e/resourceGroups/MyRGName/providers/microsoft.insights/components/MyResourceNamereleaseNameThe name to give the created release annotation.releasePropertiesUsed to attach custom metadata to the annotation.Optional
Call the PowerShell script with the following code. Replace the angle-bracketed placeholders with your values. The-releasePropertiesare optional.
-releaseProperties
.\CreateReleaseAnnotation.ps1 `
      -aiResourceId "<aiResourceId>" `
      -releaseName "<releaseName>" `
      -releaseProperties @{"ReleaseDescription"="<a description>";
          "TriggerBy"="<Your name>" }
.\CreateReleaseAnnotation.ps1 `
      -aiResourceId "<aiResourceId>" `
      -releaseName "<releaseName>" `
      -releaseProperties @{"ReleaseDescription"="<a description>";
          "TriggerBy"="<Your name>" }
aiResourceId
releaseName
releaseProperties
View annotations
Note
Release annotations aren't currently available in theMetricspane of Application Insights.
Whenever you use the release template to deploy a new release, an annotation is sent to Application Insights. You can view annotations in the following locations:
Performance:
Performance:

Failures:
Failures:

Usage:
Usage:

Workbooks:In any log-based workbook query where the visualization displays time along the x-axis:
Workbooks:
In any log-based workbook query where the visualization displays time along the x-axis:

To enable annotations in your workbook, go toAdvanced Settingsand selectShow annotations.

Select any annotation marker to open details about the release, including requestor, source control branch, release pipeline, and environment.
Release annotations by using API keys
Release annotations are a feature of the cloud-based Azure Pipelines service of Azure DevOps.
Important
Annotations using API keys are deprecated. We recommend using theAzure CLIinstead.
Install the annotations extension (one time)
To create release annotations, install one of the many Azure DevOps extensions available in Visual Studio Marketplace.
Sign in to yourAzure DevOpsproject.
Sign in to yourAzure DevOpsproject.
On theVisual Studio MarketplaceRelease Annotations extensionpage, select your Azure DevOps organization. SelectInstallto add the extension to your Azure DevOps organization.
On theVisual Studio MarketplaceRelease Annotations extensionpage, select your Azure DevOps organization. SelectInstallto add the extension to your Azure DevOps organization.

You only need to install the extension once for your Azure DevOps organization. You can now configure release annotations for any project in your organization.
Configure release annotations by using API keys
Create a separate API key for each of your Azure Pipelines release templates.
Sign in to theAzure portaland open the Application Insights resource that monitors your application. Or if you don't have one,create a new Application Insights resource.
Sign in to theAzure portaland open the Application Insights resource that monitors your application. Or if you don't have one,create a new Application Insights resource.
Open theAPI Accesstab and copy theApplication Insights ID.
Open theAPI Accesstab and copy theApplication Insights ID.

In a separate browser window, open or create the release template that manages your Azure Pipelines deployments.
In a separate browser window, open or create the release template that manages your Azure Pipelines deployments.
SelectAdd taskand then select theApplication Insights Release Annotationtask from the menu.NoteThe Release Annotation task currently supports only Windows-based agents. It doesn't run on Linux, macOS, or other types of agents.
SelectAdd taskand then select theApplication Insights Release Annotationtask from the menu.

Note
The Release Annotation task currently supports only Windows-based agents. It doesn't run on Linux, macOS, or other types of agents.
UnderApplication ID, paste the Application Insights ID you copied from theAPI Accesstab.
UnderApplication ID, paste the Application Insights ID you copied from theAPI Accesstab.

Back in the Application InsightsAPI Accesswindow, selectCreate API Key.
Back in the Application InsightsAPI Accesswindow, selectCreate API Key.

In theCreate API keywindow, enter a description, selectWrite annotations, and then selectGenerate key. Copy the new key.
In theCreate API keywindow, enter a description, selectWrite annotations, and then selectGenerate key. Copy the new key.

In the release template window, on theVariablestab, selectAddto create a variable definition for the new API key.
In the release template window, on theVariablestab, selectAddto create a variable definition for the new API key.
UnderName, enterApiKey. UnderValue, paste the API key you copied from theAPI Accesstab.
UnderName, enterApiKey. UnderValue, paste the API key you copied from theAPI Accesstab.

SelectSavein the main release template window to save the template.NoteLimits for API keys are described in theREST API rate limits documentation.
SelectSavein the main release template window to save the template.
Note
Limits for API keys are described in theREST API rate limits documentation.
Transition to the new release annotation
To use the new release annotations:
Remove the Release Annotations extension.
Remove the Application Insights Release Annotation task in your Azure Pipelines deployment.
Create new release annotations withAzure Pipelinesor theAzure CLI.
Work item integration functionality allows you to easily create work items in GitHub or Azure DevOps that have relevant Application Insights data embedded in them.
The new work item integration offers the following features overclassic:
Advanced fields like assignee, projects, or milestones.
Repo icons so you can differentiate between GitHub & Azure DevOps workbooks.
Multiple configurations for any number of repositories or work items.
Deployment through Azure Resource Manager templates.
Pre-built & customizable Keyword Query Language (KQL) queries to add Application Insights data to your work items.
Customizable workbook templates.
Create and configure a work item template
To create a work item template, go to your Application Insights resource and on the left underConfigureselectWork Itemsthen at the top selectCreate a new templateYou can also create a work item template from the end-to-end transaction details tab, if no template currently exists. Select an event and on the right selectCreate a work item, thenStart with a workbook template.
To create a work item template, go to your Application Insights resource and on the left underConfigureselectWork Itemsthen at the top selectCreate a new template

You can also create a work item template from the end-to-end transaction details tab, if no template currently exists. Select an event and on the right selectCreate a work item, thenStart with a workbook template.

After you selectcreate a new template, you can choose your tracking systems, name your workbook, link to your selected tracking system, and choose a region to storage the template (the default is the region your Application Insights resource is located in). The URL parameters are the default URL for your repository, for example,https://github.com/myusername/reponameorhttps://dev.azure.com/{org}/{project}.You can set specific work item properties directly from the template itself. This includes the assignee, iteration path, projects, & more depending on your version control provider.NoteFor on-premises Azure DevOps environments, a sample URL such ashttps://dev.azure.com/test/testcan be used as a placeholder for the Azure DevOps Project URL. Once the work item template is created, you can modify the URL and its validation rule within the generatedAzure workbook.
After you selectcreate a new template, you can choose your tracking systems, name your workbook, link to your selected tracking system, and choose a region to storage the template (the default is the region your Application Insights resource is located in). The URL parameters are the default URL for your repository, for example,https://github.com/myusername/reponameorhttps://dev.azure.com/{org}/{project}.
https://github.com/myusername/reponame
https://dev.azure.com/{org}/{project}

You can set specific work item properties directly from the template itself. This includes the assignee, iteration path, projects, & more depending on your version control provider.
Note
For on-premises Azure DevOps environments, a sample URL such ashttps://dev.azure.com/test/testcan be used as a placeholder for the Azure DevOps Project URL. Once the work item template is created, you can modify the URL and its validation rule within the generatedAzure workbook.
Create a work item
You can access your new template from any End-to-end transaction details that you can access from Performance, Failures, Availability, or other tabs.
To create a work item go to End-to-end transaction details, select an event then selectCreate work itemand choose your work item template.
To create a work item go to End-to-end transaction details, select an event then selectCreate work itemand choose your work item template.

A new tab in your browser opens up to your select tracking system. In Azure DevOps you can create a bug or task, and in GitHub you can create a new issue in your repository. A new work item is automatically create with contextual information provided by Application Insights.
A new tab in your browser opens up to your select tracking system. In Azure DevOps you can create a bug or task, and in GitHub you can create a new issue in your repository. A new work item is automatically create with contextual information provided by Application Insights.


Edit a template
To edit your template, go to theWork Itemstab underConfigureand select the pencil icon next to the workbook you would like to update.

Select editin the top toolbar.

You can create more than one work item configuration and have a custom workbook to meet each scenario. The workbooks can also be deployed with Azure Resource Manager ensuring standard implementations across your environments.
Classic work item integration
In your Application Insights resource underConfigureselectWork Items.
In your Application Insights resource underConfigureselectWork Items.
SelectSwitch to Classic, fill out the fields with your information, and authorize.
SelectSwitch to Classic, fill out the fields with your information, and authorize.

Create a work item by going to the end-to-end transaction details, select an event then selectCreate work item (Classic).
Create a work item by going to the end-to-end transaction details, select an event then selectCreate work item (Classic).
Migrate to new work item integration
To migrate, delete your classic work item configuration thencreate and configure a work item templateto recreate your integration.
To delete, go to in your Application Insights resource underConfigureselectWork Itemsthen selectSwitch to Classicand *Deleteat the top.
See also
Azure Pipelines documentation
Create work items
Automation with PowerShell
Availability test
Feedback
Was this page helpful?
Additional resources