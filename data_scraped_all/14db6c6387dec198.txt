Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Manage environment variables
Article
2024-09-17
2 contributors
In this article
Environment variables influence how resources are provisioned and deployed to Azure. This is especially useful when running azd in CI/CD workflow scenarios.
Input Parameters Substitution
Environment variables can be referenced in parameter files (*.parameters.jsonfor Bicep,*.tfvars.jsonfor Terraform) as part of provisioning. When an environment variable substitution syntax is encountered,azdautomatically substitutes the reference with the actual environment variable value set. Substitution also occurs for certain configuration settings inazure.yaml(properties documented with 'Supports environment variable substitution'), and in deployment configuration files, such as deployment manifests foraks.
*.parameters.json
*.tfvars.json
azd
azure.yaml
aks
Input parameter substitution example (Bicep)
Suppose that you have the environment variableAZURE_LOCATIONset:
AZURE_LOCATION
export AZURE_LOCATION=westus3
export AZURE_LOCATION=westus3
$env:AZURE_LOCATION='westus3'
$env:AZURE_LOCATION='westus3'
In themain.parameters.jsonfile, you can referenceAZURE_LOCATIONand allow for environment substitution using the following syntax:
main.parameters.json
AZURE_LOCATION
{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "location": {
      "value": "${AZURE_LOCATION}"
    }
  }
}
{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "location": {
      "value": "${AZURE_LOCATION}"
    }
  }
}
Environment-specific.envfile
.env
Outputs for infrastructure provisioning are automatically stored as environment variables in an.envfile, located under.azure/<environment name>/.env. This setup allows for a local application, or deployment scripts, to use variables stored in the.envfile to reference Azure-hosted resources if needed. To see these outputs, runazd env get-values, orazd env get-values --output jsonfor JSON output.
.env
.azure/<environment name>/.env
.env
azd env get-values
azd env get-values --output json
Environment variables provided byazd
azd
The following are variables that are automatically provided byazd:
azd
AZURE_ENV_NAME
todo-app-dev
AZURE_LOCATION
eastus2
AZURE_PRINCIPAL_ID
925cff12-ffff-4e9f-9580-8c06239dcaa4
AZURE_SUBSCRIPTION_ID
925cff12-ffff-4e9f-9580-8c06239dcaa4
SERVICE_<service>_IMAGE_NAME
todoapp/web-dev:azdev-deploy-1664988805
containerapp
User-provided environment variables
User-provided variables can be declared as an infrastructure output parameter (which is automatically stored in.env) in themain.bicepfile, or set directly by the user in the environment (azd env set <key> <value>).azdreads the values as configuration and perform differently.
.env
main.bicep
azd env set <key> <value>
azd
AZURE_AKS_CLUSTER_NAME
aks-my-cluster
aks
AZURE_RESOURCE_GROUP
rg-todo-dev
azd
azd
AZURE_CONTAINER_REGISTRY_ENDPOINT
myexampleacr.azurecr.io
containerapp
aks
SERVICE_<service>_ENDPOINTS
array
list-equivalent
['endpoint1', 'endpoint2']
*.azurewebsites.net
appservice
Enable demo mode
azdincludes a demo mode that hides your subscription ID in the console output. This feature is useful for scenarios where you want to demo or presentazdcommands in a public setting.
azd
azd
The demo mode introduces the environment variable:AZD_DEMO_MODE. To enable demo mode, run:
AZD_DEMO_MODE
export AZD_DEMO_MODE true
export AZD_DEMO_MODE true
If you want demo mode to persist across reboots, you can also run:
setx AZD_DEMO_MODE true
setx AZD_DEMO_MODE true
or in PowerShell:
$env:AZD_DEMO_MODE="true"
$env:AZD_DEMO_MODE="true"
Feedback
Was this page helpful?
Additional resources