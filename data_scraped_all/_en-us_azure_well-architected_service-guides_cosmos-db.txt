Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Architecture best practices for Azure Cosmos DB for NoSQL
Article
2023-11-14
4 contributors
In this article
This article describes the best practices for Azure Cosmos DB for NoSQL. These best practices ensure that you can deploy solutions on Azure Cosmos DB that are efficient, reliable, secure, optimized for cost, and operationally excellent. This guidance focuses on the five pillars of architecture excellence in theWell-Architected Framework:
Reliability
Security
Cost Optimization
Operational Excellence
Performance Efficiency
This review guide assumes that you have a working knowledge of Azure Cosmos DB and are well versed with its features. For more information, seeAzure Cosmos DB for NoSQL.
Prerequisites
Understanding the Well-Architected Framework pillars can help produce a high-quality, stable, and efficient cloud architecture. We recommend that you start by reviewing your workload using theAzure Well-Architected Framework Review assessment.
For more context, review various reference architectures that reflect the considerations from this guide in their design. These architectures include, but aren't limited to:
Globally distributed mission-critical applications using Azure Cosmos DB
Serverless apps using Azure Cosmos DB
Multi-region web app with Azure Cosmos DB replication
Reliability
As with any cloud service, failures can occur both on the service and the workload side. It's impossible to prevent all potential failures, but it's a better goal to minimize the effects a single failing component can have on your entire workload. This section includes considerations and recommendations to minimize the consequences of a one-off failure.
Design checklist
Consider how your selectedconsistency leveland replication modeimpacts the Recovery point objective (RPO)in a region-wide outage.
Design your database account deployment so it spans at least two regions in Azure. Additionally, distribute your account across multiple availability zones when offered within your Azure region.
Evaluate the multi-region and single-region write strategies for your workload. For single-region write, design your workload to have at least a second read region for failover. Enable auto-failover for single-region write and multi-region read scenarios. For multi-region write, compare the tradeoffs in complexity and consistency against the advantages of writing to multiple regions. Reviewexpectations during a regional outage for single-region and multi-region write accounts.
Enableservice-managed failoverfor your account.
Design an end-to-end test of high availability for your application.
Walk throughcommon backup processesincluding, but not limited to; point-in-time restore, recovering from accidental destructive operations, restoring deleted resources, and restoring to another region at a point-in-time. Configure account withcontinuous backup, choosing the appropriate retention period based on your business requirements.
Explore thedesigning resilient applications guide, review thedefault retry policyfor the SDKs, and plan forcustom handling for specific transient errors. These guides will give best practices to make application code resilient to transient errors.
Recommendations
Azure Policy definitions
Policy: Require at least two regions
Policy: Enable service-managed failover
Policy: Require specific deployment regions
Security
Security is a critical part of any architecture that can be easily overlooked for convenience. Bolster the security of your final workload by considering various security best practices up-front before the first resource or proof of concept is created. This section includes considerations and recommendations to reduce the number of security vulnerabilities for your final workload.
Design checklist
Reduce surface attack area by designing to use private endpoints in accordance with thesecurity baselinefor Azure Cosmos DB.
Create roles, groups, and assignments for control-plane and data-plane access to your account per the principle ofleast-privilege access. Considerdisabling key-based authentication.
Assess service-levelcomplianceandcertificationsin the context of current global personal data requirements.
Encrypt dataat-rest or in-motion using service-managed keys or customer-managed keys (CMKs).
Audit user access, security breaches, and resource operations withcontrol plane logs..
Monitor data egress, data changes, usage, and latency withdata plane metrics.
Recommendations
Azure Policy definitions
Policy: Enable Microsoft Defender
Policy: Require a virtual network service endpoint
Policy: Disable local authentication
Policy: Require firewall rules
Cost optimization
Your workload's characteristics and the implementation of your solution can influence the final cost of running in Azure. Consider main drivers like your partitioning strategy, consistency level, replication, and write type when designing your workload. When sizing your workload, consider the read/write nature of your data, the size of average items, normalization, and TTL. This section includes considerations and recommendations to streamline costs for your workload.
Design an indexing policy that's considers the operations and queries you commonly make in your workload.
Determine a partition key or set of partition keys which have a value  that has high cardinality and does not change. Use theexisting guidance and best practicesto help select an appropriate partition key. Also, consider yourindexing policywhen determining a partition key.
Select a throughput allocation schema that's appropriate for your workload. Review the benefits of standard and autoscale throughput distributed at the database or container level. Also, consider serverless when appropriate.Review your workload's traffic patternsin the context of selecting a throughput allocation scheme.
Consider consistency levels as they relate to your workload. Also, consider if client sessions should alter the default consistency level.
Calculate the expected overall data storage for your workload. The size of items and indexes all influence your data storage cost. Calcuate the impact of replication and backup on storage costs.
Create a strategy to automatically remove older items that are no longer used or necessary. If required, export these items to a lower-cost storage solution before they are removed.
Evaluate your most common queries that minimize cross-partition lookups. Use this information to inform the process of selecting a partition key or customizing an indexing policy.
Recommendations
Azure Policy definitions
Policy: Restrict the maximum allowed throughput
Operational excellence
Workloads must be monitored after they're deployed to make sure they perform as intended. Further, monitoring of workloads can help unlock new efficiencies not immediately obvious during the planning phase. In catastrophic scenarios, diagnostic data is the key to uncovering why a high severity incident might have occurred. This section includes considerations and recommendations to monitor events and characteristics of your workloads.
Design checklist
Draft a log and metrics monitoring strategy to differentiate between different workloads, flag exceptional scenarios, track patterns in exceptions/errors, and track host machine performance.
Design large workloads to use bulk operations whenever possible.
Define multiple alerts to monitor throttling, analyze throughput allocation, and track the size of your data.
Design a monitoring strategy for availability of your solution across regions.
Create and enforce best practices for automating the deployment of your Azure Cosmos DB for NoSQL account and resources.
Plan expected metric thresholds based on partition and index design. Ensure that there's a plan to monitor those metrics to determine how close they are to the planned thresholds.
Recommendations
Azure Policy definitions
Policy: Email notification for high severity alerts
Performance efficiency
Define a performance baseline for your application. Measure how many concurrent users and transactions you might need to handle. Consider workload characteristics such as your average user flow, common operations, and spikes in usage.
Research your most common and most complex queries. Identify queries that use multiple lookups, joins, or aggregates. Consider these queries in any design considerations for the partition key or indexing policy.
For the most common queries, determine the number of results you expect per page. This number will help formalize a buffered item count for prefetched results.
Research your target users. Determine which Azure regions are closest to them.
Identify queries that use one or more ordering fields. Also, identify operations that impact multiple fields. Include these fields explicitly in the indexing policy design.
Design items so their corresponding JSON documents are as small as possible. Considering splitting data cross multiple items if necessary.
Identify queries on child arrays and determine if they are candidates formore efficient subqueries.
Determine if your workload requires an analytical store. Consider analytical stores and services likeAzure Synapse Linkfor extremely complex queries.
ORDER BY
CosmosClient
Azure Policy definitions
Policy: Enable auditing of Azure Synapse Analytics
Extra resources
Consider more resources related to Azure Cosmos DB for NoSQL.
Azure Architecture Center guidance
Multitenancy and Azure Cosmos DB
Visual search in retail with Azure Cosmos DB
Gaming using Azure Cosmos DB
Serverless apps using Azure Cosmos DB
Personalization using Azure Cosmos DB
Cloud Adoption Framework guidance
Batch Data application with Azure Cosmos DB
Next steps
Deploy an Azure Cosmos DB for NoSQL account using the a Bicep template
Feedback
Was this page helpful?
Additional resources