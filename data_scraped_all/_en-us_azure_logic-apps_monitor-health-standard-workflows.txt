Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Monitor health for Standard workflows in Azure Logic Apps with Health Check (Preview)
Article
2025-04-15
2 contributors
In this article
Applies to:Azure Logic Apps (Standard)
Note
This capability is in preview and is subject to theSupplemental Terms of Use for Microsoft Azure Previews.
To help your Standard logic app workflows run with high availability and performance, set up the Health Check feature on your logic app to monitor workflow health. This feature makes sure that your app stays resilient by providing the following benefits:
Proactive monitoring so you can find and address issues before they impact your customers.
Proactive monitoring so you can find and address issues before they impact your customers.
Increased availability by removing unhealthy instances from the load balancer in Azure.
Increased availability by removing unhealthy instances from the load balancer in Azure.
Automatic recovery by replacing unhealthy instances.
Automatic recovery by replacing unhealthy instances.
How does Health Check work in Azure Logic Apps?
Health Check is an Azure App Service platform feature that redirects requests away from unhealthy instances and replaces those instances if they stay unhealthy. For a Standard logic app, you can specify a path to a "health" workflow that you create for this purpose and for the App Service platform to ping at regular intervals. For example, the following sample shows the basic minimum workflow:

After you enable Health Check, the App Service platform pings the specified workflow path for all logic app instances at 1-minute intervals. If the logic app requires scale out, Azure immediately creates a new instance. The App Service platform pings the workflow path again to make sure that the new instance is ready.
If a workflow running on an instance doesn't respond to the ping after 10 requests, the App Service platform determines that the instance is unhealthy and removes the instance for that specific logic app from the load balancer in Azure. With a two-request minimum, you can specify the required number of failed requests to determine that an instance is unhealthy. For more information about overriding default behavior, seeConfiguration: Monitor App Service instances using Health Check.
After Health Check removes the unhealthy instance, the feature continues to ping the instance. If the instance responds with a healthy status code, inclusively ranging from 200 to 299, Health Check returns the instance to the load balancer. However, if the instance remains unhealthy for one hour, Health Check replaces the instance with a new one. For more information, seeWhat App Service does with health checks.
Prerequisites
An Azure account and subscription. If you don't have a subscription,sign up for a free Azure account.
An Azure account and subscription. If you don't have a subscription,sign up for a free Azure account.
A Standard logic app resource with the following attributes:An App Service plan that is scaled to two or more instances.A "health" workflow that specifically runs the health check and the following elements:Starts with theRequesttrigger namedWhen a HTTP request is received.Includes theRequestaction namedResponse. Set this action to return a status code inclusively between200to299.You can also optionally have this workflow run other checks to make sure that dependent services are available and work as expected. As a best practice, make sure that the Health Check path monitors critical components in your workflow. For example, if your app depends on a database and messaging system, make sure that Health Check can access those components.
A Standard logic app resource with the following attributes:
An App Service plan that is scaled to two or more instances.
An App Service plan that is scaled to two or more instances.
A "health" workflow that specifically runs the health check and the following elements:Starts with theRequesttrigger namedWhen a HTTP request is received.Includes theRequestaction namedResponse. Set this action to return a status code inclusively between200to299.You can also optionally have this workflow run other checks to make sure that dependent services are available and work as expected. As a best practice, make sure that the Health Check path monitors critical components in your workflow. For example, if your app depends on a database and messaging system, make sure that Health Check can access those components.
A "health" workflow that specifically runs the health check and the following elements:
Starts with theRequesttrigger namedWhen a HTTP request is received.
Starts with theRequesttrigger namedWhen a HTTP request is received.
Includes theRequestaction namedResponse. Set this action to return a status code inclusively between200to299.
Includes theRequestaction namedResponse. Set this action to return a status code inclusively between200to299.
You can also optionally have this workflow run other checks to make sure that dependent services are available and work as expected. As a best practice, make sure that the Health Check path monitors critical components in your workflow. For example, if your app depends on a database and messaging system, make sure that Health Check can access those components.
Limitations
The specified path length must have fewer than 65 characters.
The specified path length must have fewer than 65 characters.
Changes in the specified path for Health Check cause your logic app to restart. To reduce the impact on production apps,set up and use deployment slots.
Changes in the specified path for Health Check cause your logic app to restart. To reduce the impact on production apps,set up and use deployment slots.
Health Check doesn't follow redirects for the302status code So, avoid redirects, and make sure to select a valid path that exists in your app.
Health Check doesn't follow redirects for the302status code So, avoid redirects, and make sure to select a valid path that exists in your app.
Set up Health Check
In theAzure portal, go to your Standard logic app resource.
In theAzure portal, go to your Standard logic app resource.
On the logic app menu, under Monitoring**, selectHealth check. On theHealth checkpage, on theHealth checktab, selectEnable.
On the logic app menu, under Monitoring**, selectHealth check. On theHealth checkpage, on theHealth checktab, selectEnable.

UnderHealth probe path, in thePathbox, enter a valid URL path for your workflow, for example:/api/<workflow-name>/triggers/<request-trigger-name>/invoke?api-version=2022-05-01
UnderHealth probe path, in thePathbox, enter a valid URL path for your workflow, for example:
/api/<workflow-name>/triggers/<request-trigger-name>/invoke?api-version=2022-05-01
/api/<workflow-name>/triggers/<request-trigger-name>/invoke?api-version=2022-05-01
Save your changes. On the toolbar, selectSave.
Save your changes. On the toolbar, selectSave.
In your logic app resource, update thehost.jsonfile by following these steps:On the logic app menu, underDevelopment Tools, selectAdvanced Tools>Go.On theKuduPlustoolbar, from theDebug consolemenu, selectCMD.Browse to thesite/wwwrootfolder, and next to thehost.jsonfile, selectEdit.In thehost.jsonfile editor, add theWorkflows.HealthCheckWorkflowNameproperty and your health workflow name to enable health check authentication and authorization, for example:"extensions": {
    "workflow": {
        "settings": {
            "Workflows.HealthCheckWorkflowName" : "<workflow-name>"
        }
    }
}When you finish, selectSave.
In your logic app resource, update thehost.jsonfile by following these steps:
On the logic app menu, underDevelopment Tools, selectAdvanced Tools>Go.
On the logic app menu, underDevelopment Tools, selectAdvanced Tools>Go.
On theKuduPlustoolbar, from theDebug consolemenu, selectCMD.
On theKuduPlustoolbar, from theDebug consolemenu, selectCMD.
Browse to thesite/wwwrootfolder, and next to thehost.jsonfile, selectEdit.
Browse to thesite/wwwrootfolder, and next to thehost.jsonfile, selectEdit.
In thehost.jsonfile editor, add theWorkflows.HealthCheckWorkflowNameproperty and your health workflow name to enable health check authentication and authorization, for example:"extensions": {
    "workflow": {
        "settings": {
            "Workflows.HealthCheckWorkflowName" : "<workflow-name>"
        }
    }
}
In thehost.jsonfile editor, add theWorkflows.HealthCheckWorkflowNameproperty and your health workflow name to enable health check authentication and authorization, for example:
"extensions": {
    "workflow": {
        "settings": {
            "Workflows.HealthCheckWorkflowName" : "<workflow-name>"
        }
    }
}
"extensions": {
    "workflow": {
        "settings": {
            "Workflows.HealthCheckWorkflowName" : "<workflow-name>"
        }
    }
}
When you finish, selectSave.
When you finish, selectSave.
Troubleshooting
After I set the health path, my health workflow doesn't trigger.
On the logic app menu, selectDiagnose and solve problems.
On the logic app menu, selectDiagnose and solve problems.
UnderTroubleshooting categories, selectAvailability and Performance.
UnderTroubleshooting categories, selectAvailability and Performance.

Find and review the status code section.If the status code is401, check the following items:Confirm that theWorkflows.HealthCheckWorkflowNameproperty and your health workflow name appear correctly.Confirm that the specified path matches the workflow andRequesttrigger name.
Find and review the status code section.
If the status code is401, check the following items:
Confirm that theWorkflows.HealthCheckWorkflowNameproperty and your health workflow name appear correctly.
Confirm that theWorkflows.HealthCheckWorkflowNameproperty and your health workflow name appear correctly.
Confirm that the specified path matches the workflow andRequesttrigger name.
Confirm that the specified path matches the workflow andRequesttrigger name.
Common health problems
My logic app resource doesn't have any workflows, but the resource still scales out to multiple instances, which incur costs.
This behavior can happen if the logic app resource isn't healthy, or typically, when the resource can't access the associated storage account. Try checking whether the storage account has a networking setting that blocks access, or whether you have a networking firewall policy that blocks access.
My logic app resource has workflows, but they aren't running or running a lot. However, the resource still scales out to multiple instances, which incur costs.
Check whether the resource can access the associated storage account.For example, does the storage account have a networking setting that blocks access? Do you have a networking firewall policy that blocks access?
Check whether the resource can access the associated storage account.
For example, does the storage account have a networking setting that blocks access? Do you have a networking firewall policy that blocks access?
If your workflow starts with aservice provider-based trigger, make sure that the trigger successfully works as expected.A failed service provider-based trigger might create unnecessary scaling, which can dramatically increase costs.For example, a common oversight is setting a trigger without giving your logic app permission or access to the destination, such as a Service Bus queue, Storage blob container, and so on.Make sure to monitor such triggers at all times, so that you can promptly detect and fix any issues.
If your workflow starts with aservice provider-based trigger, make sure that the trigger successfully works as expected.
A failed service provider-based trigger might create unnecessary scaling, which can dramatically increase costs.For example, a common oversight is setting a trigger without giving your logic app permission or access to the destination, such as a Service Bus queue, Storage blob container, and so on.
A failed service provider-based trigger might create unnecessary scaling, which can dramatically increase costs.
For example, a common oversight is setting a trigger without giving your logic app permission or access to the destination, such as a Service Bus queue, Storage blob container, and so on.
Make sure to monitor such triggers at all times, so that you can promptly detect and fix any issues.
Make sure to monitor such triggers at all times, so that you can promptly detect and fix any issues.
My workflow intermittently stops processing messages for hours but runs well most other times.
If your Standard logic app uses the hosting option namedWorkflow Service Planand isn't hosted in an App Service Environment, make sure thatRuntime Scale Monitoringis turned on and thatAlways Ready Instancesis set to at least1.
In theAzure portal, find and open your logic app, if not already open.
In theAzure portal, find and open your logic app, if not already open.
On the logic app menu, underSettings, selectConfiguration.
On the logic app menu, underSettings, selectConfiguration.
On theWorkflow runtime settingstab, next toRuntime Scale Monitoring, selectOn.
On theWorkflow runtime settingstab, next toRuntime Scale Monitoring, selectOn.
On theConfigurationpage toolbar, selectSave.
On theConfigurationpage toolbar, selectSave.
On the logic app menu, underSettings, selectScale out (App Service plan).
On the logic app menu, underSettings, selectScale out (App Service plan).
UnderApp Scale out, make sure that theAlways Ready Instancesvalueisn't setto0.
UnderApp Scale out, make sure that theAlways Ready Instancesvalueisn't setto0.
Related content
Monitor and collect diagnostic data for workflows
Enable and view enhanced telemetry for Standard workflows
View health and performance metrics
Feedback
Was this page helpful?
Additional resources