Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Create a trigger that runs a pipeline on a schedule
Article
2025-02-13
28 contributors
In this article
APPLIES TO:Azure Data FactoryAzure Synapse Analytics
Tip
Try outData Factory in Microsoft Fabric, an all-in-one analytics solution for enterprises.Microsoft Fabriccovers everything from data movement to data science, real-time analytics, business intelligence, and reporting. Learn how tostart a new trialfor free!
This article provides information about the schedule trigger and the steps to create, start, and monitor a schedule trigger. For other types of triggers, seePipeline execution and triggers.
When you create aschedule trigger, you specify a schedule like a start date, recurrence, or end date for the trigger and associate it with a pipeline. Pipelines and triggers have a many-to-many relationship. Multiple triggers can kick off a single pipeline. A single trigger can kick off multiple pipelines.
The following sections provide steps to create a schedule trigger in different ways.
Azure Data Factory and Azure Synapse portal experience
You can create a schedule trigger to schedule a pipeline to run periodically, such as hourly or daily.
Note
For a complete walkthrough of creating a pipeline and a schedule trigger, which associates the trigger with the pipeline and runs and monitors the pipeline, seeQuickstart: Create a data factory by using Data Factory UI.
Switch to theEdittab in Data Factory or theIntegratetab in Azure Synapse.Azure Data FactoryAzure Synapse
Switch to theEdittab in Data Factory or theIntegratetab in Azure Synapse.
Azure Data Factory
Azure Synapse


SelectTriggeron the menu, and then selectNew/Edit.
SelectTriggeron the menu, and then selectNew/Edit.

On theAdd triggerspage, selectChoose trigger, and then selectNew.
On theAdd triggerspage, selectChoose trigger, and then selectNew.

On theNew triggerpage:Confirm thatScheduleis selected forType.Specify the start datetime of the trigger forStart Date. It's set to the current datetime in Coordinated Universal Time (UTC) by default.Specify the time zone in which the trigger is created. The time zone setting applies toStart Date,End Date, andSchedule Execution TimesinAdvanced recurrence options. Changing theTime Zonesetting doesn't automatically change your start date. Make sure the start date is correct in the specified time zone. TheScheduled Execution time of Triggeris considered post the start date. (Ensure that the start date is at least 1 minute less than the execution time or else it triggers the pipeline in the next recurrence.)NoteFor time zones that observe daylight saving, trigger time auto-adjusts for the twice-a-year change, if the recurrence is set toDaysor above. To opt out of the daylight saving change, select a time zone that doesn't observe daylight saving, for instance, UTC.Daylight saving adjustment only happens for a trigger with the recurrence set toDaysor above. If the trigger is set toHoursorMinutesfrequency, it continues to fire at regular intervals.SpecifyRecurrencefor the trigger. Select one of the values from the dropdown list (Every minute,Hourly,Daily,Weekly, orMonthly). Enter the multiplier in the text box. For example, if you want the trigger to run once for every 15 minutes, you selectEvery Minuteand enter15in the text box.UnderRecurrence, if you chooseDay(s),Week(s), orMonth(s)from the dropdown list, you can seeAdvanced recurrence options.To specify an end-date time, selectSpecify an end date. Specify theEnds Oninformation, and then selectOK.A cost is associated with each pipeline run. If you're testing, you might want to ensure that the pipeline is triggered only a couple of times. However, ensure that there's enough time for the pipeline to run between the publish time and the end time. The trigger comes into effect only after you publish the solution, not when you save the trigger in the UI.
On theNew triggerpage:
Confirm thatScheduleis selected forType.
Confirm thatScheduleis selected forType.
Specify the start datetime of the trigger forStart Date. It's set to the current datetime in Coordinated Universal Time (UTC) by default.
Specify the start datetime of the trigger forStart Date. It's set to the current datetime in Coordinated Universal Time (UTC) by default.
Specify the time zone in which the trigger is created. The time zone setting applies toStart Date,End Date, andSchedule Execution TimesinAdvanced recurrence options. Changing theTime Zonesetting doesn't automatically change your start date. Make sure the start date is correct in the specified time zone. TheScheduled Execution time of Triggeris considered post the start date. (Ensure that the start date is at least 1 minute less than the execution time or else it triggers the pipeline in the next recurrence.)NoteFor time zones that observe daylight saving, trigger time auto-adjusts for the twice-a-year change, if the recurrence is set toDaysor above. To opt out of the daylight saving change, select a time zone that doesn't observe daylight saving, for instance, UTC.Daylight saving adjustment only happens for a trigger with the recurrence set toDaysor above. If the trigger is set toHoursorMinutesfrequency, it continues to fire at regular intervals.
Specify the time zone in which the trigger is created. The time zone setting applies toStart Date,End Date, andSchedule Execution TimesinAdvanced recurrence options. Changing theTime Zonesetting doesn't automatically change your start date. Make sure the start date is correct in the specified time zone. TheScheduled Execution time of Triggeris considered post the start date. (Ensure that the start date is at least 1 minute less than the execution time or else it triggers the pipeline in the next recurrence.)
Note
For time zones that observe daylight saving, trigger time auto-adjusts for the twice-a-year change, if the recurrence is set toDaysor above. To opt out of the daylight saving change, select a time zone that doesn't observe daylight saving, for instance, UTC.
Daylight saving adjustment only happens for a trigger with the recurrence set toDaysor above. If the trigger is set toHoursorMinutesfrequency, it continues to fire at regular intervals.
SpecifyRecurrencefor the trigger. Select one of the values from the dropdown list (Every minute,Hourly,Daily,Weekly, orMonthly). Enter the multiplier in the text box. For example, if you want the trigger to run once for every 15 minutes, you selectEvery Minuteand enter15in the text box.
SpecifyRecurrencefor the trigger. Select one of the values from the dropdown list (Every minute,Hourly,Daily,Weekly, orMonthly). Enter the multiplier in the text box. For example, if you want the trigger to run once for every 15 minutes, you selectEvery Minuteand enter15in the text box.
UnderRecurrence, if you chooseDay(s),Week(s), orMonth(s)from the dropdown list, you can seeAdvanced recurrence options.
UnderRecurrence, if you chooseDay(s),Week(s), orMonth(s)from the dropdown list, you can seeAdvanced recurrence options.

To specify an end-date time, selectSpecify an end date. Specify theEnds Oninformation, and then selectOK.A cost is associated with each pipeline run. If you're testing, you might want to ensure that the pipeline is triggered only a couple of times. However, ensure that there's enough time for the pipeline to run between the publish time and the end time. The trigger comes into effect only after you publish the solution, not when you save the trigger in the UI.
To specify an end-date time, selectSpecify an end date. Specify theEnds Oninformation, and then selectOK.
A cost is associated with each pipeline run. If you're testing, you might want to ensure that the pipeline is triggered only a couple of times. However, ensure that there's enough time for the pipeline to run between the publish time and the end time. The trigger comes into effect only after you publish the solution, not when you save the trigger in the UI.


In theNew Triggerwindow, selectYesin theActivatedoption, and then selectOK. You can use this checkbox to deactivate the trigger later.
In theNew Triggerwindow, selectYesin theActivatedoption, and then selectOK. You can use this checkbox to deactivate the trigger later.

In theNew Triggerwindow, review the warning message and then selectOK.
In theNew Triggerwindow, review the warning message and then selectOK.

SelectPublish allto publish the changes. Until you publish the changes, the trigger doesn't start triggering the pipeline runs.
SelectPublish allto publish the changes. Until you publish the changes, the trigger doesn't start triggering the pipeline runs.

Switch to thePipeline runstab on the left, and then selectRefreshto refresh the list. You see the pipeline runs triggered by the scheduled trigger. Notice the values in theTriggered Bycolumn. If you use theTrigger Nowoption, you see the manual trigger run in the list.Azure Data FactoryAzure Synapse
Switch to thePipeline runstab on the left, and then selectRefreshto refresh the list. You see the pipeline runs triggered by the scheduled trigger. Notice the values in theTriggered Bycolumn. If you use theTrigger Nowoption, you see the manual trigger run in the list.
Azure Data Factory
Azure Synapse


Switch to theTrigger runs>Scheduleview.Azure Data FactoryAzure Synapse
Switch to theTrigger runs>Scheduleview.
Azure Data Factory
Azure Synapse


Azure PowerShell
Note
We recommend that you use the Azure Az PowerShell module to interact with Azure. To get started, seeInstall Azure PowerShell. To learn how to migrate to the Az PowerShell module, seeMigrate Azure PowerShell from AzureRM to Az.
This section shows you how to use Azure PowerShell to create, start, and monitor a schedule trigger. To see this sample working, first go throughQuickstart: Create a data factory by using Azure PowerShell. Then, add the following code to the main method, which creates and starts a schedule trigger that runs every 15 minutes. The trigger is associated with a pipeline namedAdfv2QuickStartPipelinethat you create as part of the quickstart.
Adfv2QuickStartPipeline
Prerequisites
Azure subscription. If you don't have an Azure subscription,create a free accountbefore you begin.
Azure PowerShell. Follow the instructions inInstall Azure PowerShell on Windows with PowerShellGet.
Sample code
Create a JSON file namedMyTrigger.jsonin the *C:\ADFv2QuickStartPSH* folder with the following content:ImportantBefore you save the JSON file, set the value of thestartTimeelement to the current UTC time. Set the value of theendTimeelement to one hour past the current UTC time.{
    "properties": {
        "name": "MyTrigger",
        "type": "ScheduleTrigger",
        "typeProperties": {
            "recurrence": {
                "frequency": "Minute",
                "interval": 15,
                "startTime": "2017-12-08T00:00:00Z",
                "endTime": "2017-12-08T01:00:00Z",
                "timeZone": "UTC"
            }
        },
        "pipelines": [{
                "pipelineReference": {
                    "type": "PipelineReference",
                    "referenceName": "Adfv2QuickStartPipeline"
                },
                "parameters": {
                    "inputPath": "adftutorial/input",
                    "outputPath": "adftutorial/output"
                }
            }
        ]
    }
}In the JSON snippet:Thetypeelement of the trigger is set toScheduleTrigger.Thefrequencyelement is set toMinuteand theintervalelement is set to15. As such, the trigger runs the pipeline every 15 minutes between the start and end times.ThetimeZoneelement specifies the time zone in which the trigger is created. This setting affects bothstartTimeandendTime.TheendTimeelement is one hour after the value of thestartTimeelement. As such, the trigger runs the pipeline 15 minutes, 30 minutes, and 45 minutes after the start time. Don't forget to update the start time to the current UTC time and the end time to one hour past the start time.ImportantFor the UTC time zone,startTimeandendTimeneed to follow the formatyyyy-MM-ddTHH:mm:ssZ. For other time zones,startTimeandendTimefollow theyyyy-MM-ddTHH:mm:ssformat.Per the ISO 8601 standard, theZsuffix is used to timestamp mark the datetime to the UTC time zone and render thetimeZonefield useless. If theZsuffix for the UTC time zone is missing, the result is an error upon triggeractivation.The trigger is associated with theAdfv2QuickStartPipelinepipeline. To associate multiple pipelines with a trigger, add morepipelineReferencesections.The pipeline in the quickstart takes twoparametersvalues:inputPathandoutputPath. You pass values for these parameters from the trigger.
Create a JSON file namedMyTrigger.jsonin the *C:\ADFv2QuickStartPSH* folder with the following content:
Important
Before you save the JSON file, set the value of thestartTimeelement to the current UTC time. Set the value of theendTimeelement to one hour past the current UTC time.
startTime
endTime
{
    "properties": {
        "name": "MyTrigger",
        "type": "ScheduleTrigger",
        "typeProperties": {
            "recurrence": {
                "frequency": "Minute",
                "interval": 15,
                "startTime": "2017-12-08T00:00:00Z",
                "endTime": "2017-12-08T01:00:00Z",
                "timeZone": "UTC"
            }
        },
        "pipelines": [{
                "pipelineReference": {
                    "type": "PipelineReference",
                    "referenceName": "Adfv2QuickStartPipeline"
                },
                "parameters": {
                    "inputPath": "adftutorial/input",
                    "outputPath": "adftutorial/output"
                }
            }
        ]
    }
}
{
    "properties": {
        "name": "MyTrigger",
        "type": "ScheduleTrigger",
        "typeProperties": {
            "recurrence": {
                "frequency": "Minute",
                "interval": 15,
                "startTime": "2017-12-08T00:00:00Z",
                "endTime": "2017-12-08T01:00:00Z",
                "timeZone": "UTC"
            }
        },
        "pipelines": [{
                "pipelineReference": {
                    "type": "PipelineReference",
                    "referenceName": "Adfv2QuickStartPipeline"
                },
                "parameters": {
                    "inputPath": "adftutorial/input",
                    "outputPath": "adftutorial/output"
                }
            }
        ]
    }
}
In the JSON snippet:
Thetypeelement of the trigger is set toScheduleTrigger.
Thetypeelement of the trigger is set toScheduleTrigger.
type
ScheduleTrigger
Thefrequencyelement is set toMinuteand theintervalelement is set to15. As such, the trigger runs the pipeline every 15 minutes between the start and end times.
Thefrequencyelement is set toMinuteand theintervalelement is set to15. As such, the trigger runs the pipeline every 15 minutes between the start and end times.
frequency
Minute
interval
15
ThetimeZoneelement specifies the time zone in which the trigger is created. This setting affects bothstartTimeandendTime.
ThetimeZoneelement specifies the time zone in which the trigger is created. This setting affects bothstartTimeandendTime.
timeZone
startTime
endTime
TheendTimeelement is one hour after the value of thestartTimeelement. As such, the trigger runs the pipeline 15 minutes, 30 minutes, and 45 minutes after the start time. Don't forget to update the start time to the current UTC time and the end time to one hour past the start time.ImportantFor the UTC time zone,startTimeandendTimeneed to follow the formatyyyy-MM-ddTHH:mm:ssZ. For other time zones,startTimeandendTimefollow theyyyy-MM-ddTHH:mm:ssformat.Per the ISO 8601 standard, theZsuffix is used to timestamp mark the datetime to the UTC time zone and render thetimeZonefield useless. If theZsuffix for the UTC time zone is missing, the result is an error upon triggeractivation.
TheendTimeelement is one hour after the value of thestartTimeelement. As such, the trigger runs the pipeline 15 minutes, 30 minutes, and 45 minutes after the start time. Don't forget to update the start time to the current UTC time and the end time to one hour past the start time.
endTime
startTime
Important
For the UTC time zone,startTimeandendTimeneed to follow the formatyyyy-MM-ddTHH:mm:ssZ. For other time zones,startTimeandendTimefollow theyyyy-MM-ddTHH:mm:ssformat.
startTime
endTime
yyyy-MM-ddTHH:mm:ss
startTime
endTime
yyyy-MM-ddTHH:mm:ss
Per the ISO 8601 standard, theZsuffix is used to timestamp mark the datetime to the UTC time zone and render thetimeZonefield useless. If theZsuffix for the UTC time zone is missing, the result is an error upon triggeractivation.
Z
timeZone
Z
The trigger is associated with theAdfv2QuickStartPipelinepipeline. To associate multiple pipelines with a trigger, add morepipelineReferencesections.
The trigger is associated with theAdfv2QuickStartPipelinepipeline. To associate multiple pipelines with a trigger, add morepipelineReferencesections.
Adfv2QuickStartPipeline
pipelineReference
The pipeline in the quickstart takes twoparametersvalues:inputPathandoutputPath. You pass values for these parameters from the trigger.
The pipeline in the quickstart takes twoparametersvalues:inputPathandoutputPath. You pass values for these parameters from the trigger.
parameters
inputPath
outputPath
Create a trigger by using theSet-AzDataFactoryV2Triggercmdlet:Set-AzDataFactoryV2Trigger -ResourceGroupName $ResourceGroupName -DataFactoryName $DataFactoryName -Name "MyTrigger" -DefinitionFile "C:\ADFv2QuickStartPSH\MyTrigger.json"
Create a trigger by using theSet-AzDataFactoryV2Triggercmdlet:
Set-AzDataFactoryV2Trigger -ResourceGroupName $ResourceGroupName -DataFactoryName $DataFactoryName -Name "MyTrigger" -DefinitionFile "C:\ADFv2QuickStartPSH\MyTrigger.json"
Set-AzDataFactoryV2Trigger -ResourceGroupName $ResourceGroupName -DataFactoryName $DataFactoryName -Name "MyTrigger" -DefinitionFile "C:\ADFv2QuickStartPSH\MyTrigger.json"
Confirm that the status of the trigger isStoppedby using theGet-AzDataFactoryV2Triggercmdlet:Get-AzDataFactoryV2Trigger -ResourceGroupName $ResourceGroupName -DataFactoryName $DataFactoryName -Name "MyTrigger"
Confirm that the status of the trigger isStoppedby using theGet-AzDataFactoryV2Triggercmdlet:
Get-AzDataFactoryV2Trigger -ResourceGroupName $ResourceGroupName -DataFactoryName $DataFactoryName -Name "MyTrigger"
Get-AzDataFactoryV2Trigger -ResourceGroupName $ResourceGroupName -DataFactoryName $DataFactoryName -Name "MyTrigger"
Start the trigger by using theStart-AzDataFactoryV2Triggercmdlet:Start-AzDataFactoryV2Trigger -ResourceGroupName $ResourceGroupName -DataFactoryName $DataFactoryName -Name "MyTrigger"
Start the trigger by using theStart-AzDataFactoryV2Triggercmdlet:
Start-AzDataFactoryV2Trigger -ResourceGroupName $ResourceGroupName -DataFactoryName $DataFactoryName -Name "MyTrigger"
Start-AzDataFactoryV2Trigger -ResourceGroupName $ResourceGroupName -DataFactoryName $DataFactoryName -Name "MyTrigger"
Confirm that the status of the trigger isStartedby using theGet-AzDataFactoryV2Triggercmdlet:Get-AzDataFactoryV2Trigger -ResourceGroupName $ResourceGroupName -DataFactoryName $DataFactoryName -Name "MyTrigger"
Confirm that the status of the trigger isStartedby using theGet-AzDataFactoryV2Triggercmdlet:
Get-AzDataFactoryV2Trigger -ResourceGroupName $ResourceGroupName -DataFactoryName $DataFactoryName -Name "MyTrigger"
Get-AzDataFactoryV2Trigger -ResourceGroupName $ResourceGroupName -DataFactoryName $DataFactoryName -Name "MyTrigger"
Get the trigger runs in Azure PowerShell by using theGet-AzDataFactoryV2TriggerRuncmdlet. To get the information about the trigger runs, execute the following command periodically. Update theTriggerRunStartedAfterandTriggerRunStartedBeforevalues to match the values in your trigger definition:Get-AzDataFactoryV2TriggerRun -ResourceGroupName $ResourceGroupName -DataFactoryName $DataFactoryName -TriggerName "MyTrigger" -TriggerRunStartedAfter "2017-12-08T00:00:00" -TriggerRunStartedBefore "2017-12-08T01:00:00"NoteThe trigger time of schedule triggers are specified in the UTC timestamp.TriggerRunStartedAfterandTriggerRunStartedBeforealso expect the UTC timestamp.To monitor the trigger runs and pipeline runs in the Azure portal, seeMonitor pipeline runs.
Get the trigger runs in Azure PowerShell by using theGet-AzDataFactoryV2TriggerRuncmdlet. To get the information about the trigger runs, execute the following command periodically. Update theTriggerRunStartedAfterandTriggerRunStartedBeforevalues to match the values in your trigger definition:
TriggerRunStartedAfter
TriggerRunStartedBefore
Get-AzDataFactoryV2TriggerRun -ResourceGroupName $ResourceGroupName -DataFactoryName $DataFactoryName -TriggerName "MyTrigger" -TriggerRunStartedAfter "2017-12-08T00:00:00" -TriggerRunStartedBefore "2017-12-08T01:00:00"
Get-AzDataFactoryV2TriggerRun -ResourceGroupName $ResourceGroupName -DataFactoryName $DataFactoryName -TriggerName "MyTrigger" -TriggerRunStartedAfter "2017-12-08T00:00:00" -TriggerRunStartedBefore "2017-12-08T01:00:00"
Note
The trigger time of schedule triggers are specified in the UTC timestamp.TriggerRunStartedAfterandTriggerRunStartedBeforealso expect the UTC timestamp.
TriggerRunStartedAfter
TriggerRunStartedBefore
To monitor the trigger runs and pipeline runs in the Azure portal, seeMonitor pipeline runs.
Azure CLI
This section shows you how to use the Azure CLI to create, start, and monitor a schedule trigger. To see this sample working, first go throughQuickstart: Create an Azure Data Factory by using the Azure CLI. Then, follow the steps to create and start a schedule trigger that runs every 15 minutes. The trigger is associated with a pipeline namedAdfv2QuickStartPipelinethat you create as part of the quickstart.
Adfv2QuickStartPipeline
Prerequisites
Use the Bash environment inAzure Cloud Shell. For more information, seeGet started with Azure Cloud Shell.
Use the Bash environment inAzure Cloud Shell. For more information, seeGet started with Azure Cloud Shell.

If you prefer to run CLI reference commands locally,installthe Azure CLI. If you're running on Windows or macOS, consider running Azure CLI in a Docker container. For more information, seeHow to run the Azure CLI in a Docker container.If you're using a local installation, sign in to the Azure CLI by using theaz logincommand. To finish the authentication process, follow the steps displayed in your terminal. For other sign-in options, seeAuthenticate to Azure using Azure CLI.When you're prompted, install the Azure CLI extension on first use. For more information about extensions, seeUse and manage extensions with the Azure CLI.Runaz versionto find the version and dependent libraries that are installed. To upgrade to the latest version, runaz upgrade.
If you prefer to run CLI reference commands locally,installthe Azure CLI. If you're running on Windows or macOS, consider running Azure CLI in a Docker container. For more information, seeHow to run the Azure CLI in a Docker container.
If you're using a local installation, sign in to the Azure CLI by using theaz logincommand. To finish the authentication process, follow the steps displayed in your terminal. For other sign-in options, seeAuthenticate to Azure using Azure CLI.
If you're using a local installation, sign in to the Azure CLI by using theaz logincommand. To finish the authentication process, follow the steps displayed in your terminal. For other sign-in options, seeAuthenticate to Azure using Azure CLI.
When you're prompted, install the Azure CLI extension on first use. For more information about extensions, seeUse and manage extensions with the Azure CLI.
When you're prompted, install the Azure CLI extension on first use. For more information about extensions, seeUse and manage extensions with the Azure CLI.
Runaz versionto find the version and dependent libraries that are installed. To upgrade to the latest version, runaz upgrade.
Runaz versionto find the version and dependent libraries that are installed. To upgrade to the latest version, runaz upgrade.
Sample code
In your working directory, create a JSON file namedMyTrigger.jsonwith the trigger's properties. For this example, use the following content:ImportantBefore you save the JSON file, set the value of thestartTimeelement to the current UTC time. Set the value of theendTimeelement to one hour past the current UTC time.{
    "name": "MyTrigger",
    "type": "ScheduleTrigger",
    "typeProperties": {
        "recurrence": {
            "frequency": "Minute",
            "interval": 15,
            "startTime": "2017-12-08T00:00:00Z",
            "endTime": "2017-12-08T01:00:00Z",
            "timeZone": "UTC"
        }
    },
    "pipelines": [{
            "pipelineReference": {
                "type": "PipelineReference",
                "referenceName": "Adfv2QuickStartPipeline"
            },
            "parameters": {
                "inputPath": "adftutorial/input",
                "outputPath": "adftutorial/output"
            }
        }
    ]
}In the JSON snippet:Thetypeelement of the trigger is set toScheduleTrigger.Thefrequencyelement is set toMinuteand theintervalelement is set to15. As such, the trigger runs the pipeline every 15 minutes between the start and end times.ThetimeZoneelement specifies the time zone in which the trigger is created. This setting affects bothstartTimeandendTime.TheendTimeelement is one hour after the value of thestartTimeelement. As such, the trigger runs the pipeline 15 minutes, 30 minutes, and 45 minutes after the start time. Don't forget to update the start time to the current UTC time and the end time to one hour past the start time.ImportantFor the UTC time zone, thestartTimeand endTime need to follow the formatyyyy-MM-ddTHH:mm:ssZ. For other time zones,startTimeandendTimefollow theyyyy-MM-ddTHH:mm:ssformat.Per the ISO 8601 standard, theZsuffix is used to timestamp mark the datetime to the UTC time zone and render thetimeZonefield useless. If theZsuffix is missing for the UTC time zone, the result is an error upon triggeractivation.The trigger is associated with theAdfv2QuickStartPipelinepipeline. To associate multiple pipelines with a trigger, add morepipelineReferencesections.The pipeline in the quickstart takes twoparametersvalues:inputPathandoutputPath. You pass values for these parameters from the trigger.
In your working directory, create a JSON file namedMyTrigger.jsonwith the trigger's properties. For this example, use the following content:
Important
Before you save the JSON file, set the value of thestartTimeelement to the current UTC time. Set the value of theendTimeelement to one hour past the current UTC time.
startTime
endTime
{
    "name": "MyTrigger",
    "type": "ScheduleTrigger",
    "typeProperties": {
        "recurrence": {
            "frequency": "Minute",
            "interval": 15,
            "startTime": "2017-12-08T00:00:00Z",
            "endTime": "2017-12-08T01:00:00Z",
            "timeZone": "UTC"
        }
    },
    "pipelines": [{
            "pipelineReference": {
                "type": "PipelineReference",
                "referenceName": "Adfv2QuickStartPipeline"
            },
            "parameters": {
                "inputPath": "adftutorial/input",
                "outputPath": "adftutorial/output"
            }
        }
    ]
}
{
    "name": "MyTrigger",
    "type": "ScheduleTrigger",
    "typeProperties": {
        "recurrence": {
            "frequency": "Minute",
            "interval": 15,
            "startTime": "2017-12-08T00:00:00Z",
            "endTime": "2017-12-08T01:00:00Z",
            "timeZone": "UTC"
        }
    },
    "pipelines": [{
            "pipelineReference": {
                "type": "PipelineReference",
                "referenceName": "Adfv2QuickStartPipeline"
            },
            "parameters": {
                "inputPath": "adftutorial/input",
                "outputPath": "adftutorial/output"
            }
        }
    ]
}
In the JSON snippet:
Thetypeelement of the trigger is set toScheduleTrigger.
Thetypeelement of the trigger is set toScheduleTrigger.
type
ScheduleTrigger
Thefrequencyelement is set toMinuteand theintervalelement is set to15. As such, the trigger runs the pipeline every 15 minutes between the start and end times.
Thefrequencyelement is set toMinuteand theintervalelement is set to15. As such, the trigger runs the pipeline every 15 minutes between the start and end times.
frequency
Minute
interval
15
ThetimeZoneelement specifies the time zone in which the trigger is created. This setting affects bothstartTimeandendTime.
ThetimeZoneelement specifies the time zone in which the trigger is created. This setting affects bothstartTimeandendTime.
timeZone
startTime
endTime
TheendTimeelement is one hour after the value of thestartTimeelement. As such, the trigger runs the pipeline 15 minutes, 30 minutes, and 45 minutes after the start time. Don't forget to update the start time to the current UTC time and the end time to one hour past the start time.ImportantFor the UTC time zone, thestartTimeand endTime need to follow the formatyyyy-MM-ddTHH:mm:ssZ. For other time zones,startTimeandendTimefollow theyyyy-MM-ddTHH:mm:ssformat.Per the ISO 8601 standard, theZsuffix is used to timestamp mark the datetime to the UTC time zone and render thetimeZonefield useless. If theZsuffix is missing for the UTC time zone, the result is an error upon triggeractivation.
TheendTimeelement is one hour after the value of thestartTimeelement. As such, the trigger runs the pipeline 15 minutes, 30 minutes, and 45 minutes after the start time. Don't forget to update the start time to the current UTC time and the end time to one hour past the start time.
endTime
startTime
Important
For the UTC time zone, thestartTimeand endTime need to follow the formatyyyy-MM-ddTHH:mm:ssZ. For other time zones,startTimeandendTimefollow theyyyy-MM-ddTHH:mm:ssformat.
startTime
yyyy-MM-ddTHH:mm:ss
startTime
endTime
yyyy-MM-ddTHH:mm:ss
Per the ISO 8601 standard, theZsuffix is used to timestamp mark the datetime to the UTC time zone and render thetimeZonefield useless. If theZsuffix is missing for the UTC time zone, the result is an error upon triggeractivation.
timeZone
The trigger is associated with theAdfv2QuickStartPipelinepipeline. To associate multiple pipelines with a trigger, add morepipelineReferencesections.
The trigger is associated with theAdfv2QuickStartPipelinepipeline. To associate multiple pipelines with a trigger, add morepipelineReferencesections.
Adfv2QuickStartPipeline
pipelineReference
The pipeline in the quickstart takes twoparametersvalues:inputPathandoutputPath. You pass values for these parameters from the trigger.
The pipeline in the quickstart takes twoparametersvalues:inputPathandoutputPath. You pass values for these parameters from the trigger.
parameters
inputPath
outputPath
Create a trigger by using theaz datafactory trigger createcommand:az datafactory trigger create --resource-group "ADFQuickStartRG" --factory-name "ADFTutorialFactory"  --name "MyTrigger" --properties @MyTrigger.json
Create a trigger by using theaz datafactory trigger createcommand:
az datafactory trigger create --resource-group "ADFQuickStartRG" --factory-name "ADFTutorialFactory"  --name "MyTrigger" --properties @MyTrigger.json
az datafactory trigger create --resource-group "ADFQuickStartRG" --factory-name "ADFTutorialFactory"  --name "MyTrigger" --properties @MyTrigger.json
Confirm that the status of the trigger isStoppedby using theaz datafactory trigger showcommand:az datafactory trigger show --resource-group "ADFQuickStartRG" --factory-name "ADFTutorialFactory" --name "MyTrigger"
Confirm that the status of the trigger isStoppedby using theaz datafactory trigger showcommand:
az datafactory trigger show --resource-group "ADFQuickStartRG" --factory-name "ADFTutorialFactory" --name "MyTrigger"
az datafactory trigger show --resource-group "ADFQuickStartRG" --factory-name "ADFTutorialFactory" --name "MyTrigger"
Start the trigger by using theaz datafactory trigger startcommand:az datafactory trigger start --resource-group "ADFQuickStartRG" --factory-name "ADFTutorialFactory" --name "MyTrigger"
Start the trigger by using theaz datafactory trigger startcommand:
az datafactory trigger start --resource-group "ADFQuickStartRG" --factory-name "ADFTutorialFactory" --name "MyTrigger"
az datafactory trigger start --resource-group "ADFQuickStartRG" --factory-name "ADFTutorialFactory" --name "MyTrigger"
Confirm that the status of the trigger isStartedby using theaz datafactory trigger showcommand:az datafactory trigger show --resource-group "ADFQuickStartRG" --factory-name "ADFTutorialFactory" --name "MyTrigger"
Confirm that the status of the trigger isStartedby using theaz datafactory trigger showcommand:
az datafactory trigger show --resource-group "ADFQuickStartRG" --factory-name "ADFTutorialFactory" --name "MyTrigger"
az datafactory trigger show --resource-group "ADFQuickStartRG" --factory-name "ADFTutorialFactory" --name "MyTrigger"
Get the trigger runs in the Azure CLI by using theaz datafactory trigger-run query-by-factorycommand. To get information about the trigger runs, execute the following command periodically. Update thelast-updated-afterandlast-updated-beforevalues to match the values in your trigger definition:az datafactory trigger-run query-by-factory --resource-group "ADFQuickStartRG" --factory-name "ADFTutorialFactory" --filters operand="TriggerName" operator="Equals" values="MyTrigger" --last-updated-after "2017-12-08T00:00:00" --last-updated-before "2017-12-08T01:00:00"NoteThe trigger times of schedule triggers are specified in the UTC timestamp.last-updated-afterandlast-updated-beforealso expects the UTC timestamp.To monitor the trigger runs and pipeline runs in the Azure portal, seeMonitor pipeline runs.
Get the trigger runs in the Azure CLI by using theaz datafactory trigger-run query-by-factorycommand. To get information about the trigger runs, execute the following command periodically. Update thelast-updated-afterandlast-updated-beforevalues to match the values in your trigger definition:
last-updated-after
last-updated-before
az datafactory trigger-run query-by-factory --resource-group "ADFQuickStartRG" --factory-name "ADFTutorialFactory" --filters operand="TriggerName" operator="Equals" values="MyTrigger" --last-updated-after "2017-12-08T00:00:00" --last-updated-before "2017-12-08T01:00:00"
az datafactory trigger-run query-by-factory --resource-group "ADFQuickStartRG" --factory-name "ADFTutorialFactory" --filters operand="TriggerName" operator="Equals" values="MyTrigger" --last-updated-after "2017-12-08T00:00:00" --last-updated-before "2017-12-08T01:00:00"
Note
The trigger times of schedule triggers are specified in the UTC timestamp.last-updated-afterandlast-updated-beforealso expects the UTC timestamp.
To monitor the trigger runs and pipeline runs in the Azure portal, seeMonitor pipeline runs.
.NET SDK
This section shows you how to use the .NET SDK to create, start, and monitor a trigger. To see this sample working, first go throughQuickstart: Create a data factory by using the .NET SDK. Then, add the following code to the main method, which creates and starts a schedule trigger that runs every 15 minutes. The trigger is associated with a pipeline namedAdfv2QuickStartPipelinethat you create as part of the quickstart.
Adfv2QuickStartPipeline
To create and start a schedule trigger that runs every 15 minutes, add the following code to the main method:
// Create the trigger
            Console.WriteLine("Creating the trigger");

            // Set the start time to the current UTC time
            DateTime startTime = DateTime.UtcNow;

            // Specify values for the inputPath and outputPath parameters
            Dictionary<string, object> pipelineParameters = new Dictionary<string, object>();
            pipelineParameters.Add("inputPath", "adftutorial/input");
            pipelineParameters.Add("outputPath", "adftutorial/output");

            // Create a schedule trigger
            string triggerName = "MyTrigger";
            ScheduleTrigger myTrigger = new ScheduleTrigger()
            {
                Pipelines = new List<TriggerPipelineReference>()
                {
                    // Associate the Adfv2QuickStartPipeline pipeline with the trigger
                    new TriggerPipelineReference()
                    {
                        PipelineReference = new PipelineReference(pipelineName),
                        Parameters = pipelineParameters,
                    }
                },
                Recurrence = new ScheduleTriggerRecurrence()
                {
                    // Set the start time to the current UTC time and the end time to one hour after the start time
                    StartTime = startTime,
                    TimeZone = "UTC",
                    EndTime = startTime.AddHours(1),
                    Frequency = RecurrenceFrequency.Minute,
                    Interval = 15,
                }
            };

            // Now, create the trigger by invoking the CreateOrUpdate method
            TriggerResource triggerResource = new TriggerResource()
            {
                Properties = myTrigger
            };
            client.Triggers.CreateOrUpdate(resourceGroup, dataFactoryName, triggerName, triggerResource);

            // Start the trigger
            Console.WriteLine("Starting the trigger");
            client.Triggers.Start(resourceGroup, dataFactoryName, triggerName);
// Create the trigger
            Console.WriteLine("Creating the trigger");

            // Set the start time to the current UTC time
            DateTime startTime = DateTime.UtcNow;

            // Specify values for the inputPath and outputPath parameters
            Dictionary<string, object> pipelineParameters = new Dictionary<string, object>();
            pipelineParameters.Add("inputPath", "adftutorial/input");
            pipelineParameters.Add("outputPath", "adftutorial/output");

            // Create a schedule trigger
            string triggerName = "MyTrigger";
            ScheduleTrigger myTrigger = new ScheduleTrigger()
            {
                Pipelines = new List<TriggerPipelineReference>()
                {
                    // Associate the Adfv2QuickStartPipeline pipeline with the trigger
                    new TriggerPipelineReference()
                    {
                        PipelineReference = new PipelineReference(pipelineName),
                        Parameters = pipelineParameters,
                    }
                },
                Recurrence = new ScheduleTriggerRecurrence()
                {
                    // Set the start time to the current UTC time and the end time to one hour after the start time
                    StartTime = startTime,
                    TimeZone = "UTC",
                    EndTime = startTime.AddHours(1),
                    Frequency = RecurrenceFrequency.Minute,
                    Interval = 15,
                }
            };

            // Now, create the trigger by invoking the CreateOrUpdate method
            TriggerResource triggerResource = new TriggerResource()
            {
                Properties = myTrigger
            };
            client.Triggers.CreateOrUpdate(resourceGroup, dataFactoryName, triggerName, triggerResource);

            // Start the trigger
            Console.WriteLine("Starting the trigger");
            client.Triggers.Start(resourceGroup, dataFactoryName, triggerName);
To create triggers in a different time zone, other than UTC, the following settings are required:
<<ClientInstance>>.SerializationSettings.DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat;
<<ClientInstance>>.SerializationSettings.DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Unspecified;
<<ClientInstance>>.SerializationSettings.DateParseHandling = DateParseHandling.None;
<<ClientInstance>>.DeserializationSettings.DateParseHandling = DateParseHandling.None;
<<ClientInstance>>.DeserializationSettings.DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat;
<<ClientInstance>>.DeserializationSettings.DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Unspecified;
<<ClientInstance>>.SerializationSettings.DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat;
<<ClientInstance>>.SerializationSettings.DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Unspecified;
<<ClientInstance>>.SerializationSettings.DateParseHandling = DateParseHandling.None;
<<ClientInstance>>.DeserializationSettings.DateParseHandling = DateParseHandling.None;
<<ClientInstance>>.DeserializationSettings.DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat;
<<ClientInstance>>.DeserializationSettings.DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Unspecified;
To monitor a trigger run, add the following code before the lastConsole.WriteLinestatement in the sample:
Console.WriteLine
// Check that the trigger runs every 15 minutes
            Console.WriteLine("Trigger runs. You see the output every 15 minutes");

            for (int i = 0; i < 3; i++)
            {
                System.Threading.Thread.Sleep(TimeSpan.FromMinutes(15));
                List<TriggerRun> triggerRuns = client.Triggers.ListRuns(resourceGroup, dataFactoryName, triggerName, DateTime.UtcNow.AddMinutes(-15 * (i + 1)), DateTime.UtcNow.AddMinutes(2)).ToList();
                Console.WriteLine("{0} trigger runs found", triggerRuns.Count);

                foreach (TriggerRun run in triggerRuns)
                {
                    foreach (KeyValuePair<string, string> triggeredPipeline in run.TriggeredPipelines)
                    {
                        PipelineRun triggeredPipelineRun = client.PipelineRuns.Get(resourceGroup, dataFactoryName, triggeredPipeline.Value);
                        Console.WriteLine("Pipeline run ID: {0}, Status: {1}", triggeredPipelineRun.RunId, triggeredPipelineRun.Status);
                        List<ActivityRun> runs = client.ActivityRuns.ListByPipelineRun(resourceGroup, dataFactoryName, triggeredPipelineRun.RunId, run.TriggerRunTimestamp.Value, run.TriggerRunTimestamp.Value.AddMinutes(20)).ToList();
                    }
                }
            }
// Check that the trigger runs every 15 minutes
            Console.WriteLine("Trigger runs. You see the output every 15 minutes");

            for (int i = 0; i < 3; i++)
            {
                System.Threading.Thread.Sleep(TimeSpan.FromMinutes(15));
                List<TriggerRun> triggerRuns = client.Triggers.ListRuns(resourceGroup, dataFactoryName, triggerName, DateTime.UtcNow.AddMinutes(-15 * (i + 1)), DateTime.UtcNow.AddMinutes(2)).ToList();
                Console.WriteLine("{0} trigger runs found", triggerRuns.Count);

                foreach (TriggerRun run in triggerRuns)
                {
                    foreach (KeyValuePair<string, string> triggeredPipeline in run.TriggeredPipelines)
                    {
                        PipelineRun triggeredPipelineRun = client.PipelineRuns.Get(resourceGroup, dataFactoryName, triggeredPipeline.Value);
                        Console.WriteLine("Pipeline run ID: {0}, Status: {1}", triggeredPipelineRun.RunId, triggeredPipelineRun.Status);
                        List<ActivityRun> runs = client.ActivityRuns.ListByPipelineRun(resourceGroup, dataFactoryName, triggeredPipelineRun.RunId, run.TriggerRunTimestamp.Value, run.TriggerRunTimestamp.Value.AddMinutes(20)).ToList();
                    }
                }
            }
To monitor the trigger runs and pipeline runs in the Azure portal, seeMonitor pipeline runs.
Python SDK
This section shows you how to use the Python SDK to create, start, and monitor a trigger. To see this sample working, first go throughQuickstart: Create a data factory by using the Python SDK. Then, add the following code block after themonitor the pipeline runcode block in the Python script. This code creates a schedule trigger that runs every 15 minutes between the specified start and end times. Update thestart_timevariable to the current UTC time and theend_timevariable to one hour past the current UTC time.
monitor the pipeline run
start_time
end_time
# Create a trigger
    tr_name = 'mytrigger'
    scheduler_recurrence = ScheduleTriggerRecurrence(frequency='Minute', interval='15',start_time='2017-12-12T04:00:00Z', end_time='2017-12-12T05:00:00Z', time_zone='UTC')
    pipeline_parameters = {'inputPath':'adftutorial/input', 'outputPath':'adftutorial/output'}
    pipelines_to_run = []
    pipeline_reference = PipelineReference('copyPipeline')
    pipelines_to_run.append(TriggerPipelineReference(pipeline_reference, pipeline_parameters))
    tr_properties = TriggerResource(properties=ScheduleTrigger(description='My scheduler trigger', pipelines = pipelines_to_run, recurrence=scheduler_recurrence))
    adf_client.triggers.create_or_update(rg_name, df_name, tr_name, tr_properties)

    # Start the trigger
    adf_client.triggers.start(rg_name, df_name, tr_name)
# Create a trigger
    tr_name = 'mytrigger'
    scheduler_recurrence = ScheduleTriggerRecurrence(frequency='Minute', interval='15',start_time='2017-12-12T04:00:00Z', end_time='2017-12-12T05:00:00Z', time_zone='UTC')
    pipeline_parameters = {'inputPath':'adftutorial/input', 'outputPath':'adftutorial/output'}
    pipelines_to_run = []
    pipeline_reference = PipelineReference('copyPipeline')
    pipelines_to_run.append(TriggerPipelineReference(pipeline_reference, pipeline_parameters))
    tr_properties = TriggerResource(properties=ScheduleTrigger(description='My scheduler trigger', pipelines = pipelines_to_run, recurrence=scheduler_recurrence))
    adf_client.triggers.create_or_update(rg_name, df_name, tr_name, tr_properties)

    # Start the trigger
    adf_client.triggers.start(rg_name, df_name, tr_name)
To monitor the trigger runs and pipeline runs in the Azure portal, seeMonitor pipeline runs.
Azure Resource Manager template
You can use an Azure Resource Manager template to create a trigger. For step-by-step instructions, seeCreate an Azure data factory by using an Azure Resource Manager template.
Pass the trigger start time to a pipeline
Azure Data Factory version 1 supports reading or writing partitioned data by using the system variablesSliceStart,SliceEnd,WindowStart, andWindowEnd. In the current version of Data Factory and Azure Synapse pipelines, you can achieve this behavior by using a pipeline parameter. The start time and scheduled time for the trigger are set as the value for the pipeline parameter. In the following example, the scheduled time for the trigger is passed as a value to the pipelinescheduledRunTimeparameter:
SliceStart
SliceEnd
WindowStart
WindowEnd
scheduledRunTime
"parameters": {
    "scheduledRunTime": "@trigger().scheduledTime"
}
"parameters": {
    "scheduledRunTime": "@trigger().scheduledTime"
}
JSON schema
The following JSON definition shows you how to create a schedule trigger with scheduling and recurrence:
{
  "properties": {
    "type": "ScheduleTrigger",
    "typeProperties": {
      "recurrence": {
        "frequency": <<Minute, Hour, Day, Week, Month>>,
        "interval": <<int>>,             // Optional, specifies how often to fire (default to 1)
        "startTime": <<datetime>>,
        "endTime": <<datetime - optional>>,
        "timeZone": "UTC"
        "schedule": {                    // Optional (advanced scheduling specifics)
          "hours": [<<0-23>>],
          "weekDays": [<<Monday-Sunday>>],
          "minutes": [<<0-59>>],
          "monthDays": [<<1-31>>],
          "monthlyOccurrences": [
               {
                    "day": <<Monday-Sunday>>,
                    "occurrence": <<1-5>>
               }
           ]
        }
      }
    },
   "pipelines": [
            {
                "pipelineReference": {
                    "type": "PipelineReference",
                    "referenceName": "<Name of your pipeline>"
                },
                "parameters": {
                    "<parameter 1 Name>": {
                        "type": "Expression",
                        "value": "<parameter 1 Value>"
                    },
                    "<parameter 2 Name>" : "<parameter 2 Value>"
                }
           }
      ]
  }
}
{
  "properties": {
    "type": "ScheduleTrigger",
    "typeProperties": {
      "recurrence": {
        "frequency": <<Minute, Hour, Day, Week, Month>>,
        "interval": <<int>>,             // Optional, specifies how often to fire (default to 1)
        "startTime": <<datetime>>,
        "endTime": <<datetime - optional>>,
        "timeZone": "UTC"
        "schedule": {                    // Optional (advanced scheduling specifics)
          "hours": [<<0-23>>],
          "weekDays": [<<Monday-Sunday>>],
          "minutes": [<<0-59>>],
          "monthDays": [<<1-31>>],
          "monthlyOccurrences": [
               {
                    "day": <<Monday-Sunday>>,
                    "occurrence": <<1-5>>
               }
           ]
        }
      }
    },
   "pipelines": [
            {
                "pipelineReference": {
                    "type": "PipelineReference",
                    "referenceName": "<Name of your pipeline>"
                },
                "parameters": {
                    "<parameter 1 Name>": {
                        "type": "Expression",
                        "value": "<parameter 1 Value>"
                    },
                    "<parameter 2 Name>" : "<parameter 2 Value>"
                }
           }
      ]
  }
}
Important
Theparametersproperty is a mandatory property of thepipelineselement. If your pipeline doesn't take any parameters, you must include an empty JSON definition for theparametersproperty.
parameters
pipelines
parameters
Schema overview
The following table provides a high-level overview of the major schema elements that are related to recurrence and scheduling of a trigger.
startTime
startTime
startTime
'yyyy-MM-ddTHH:mm:ssZ'
yyyy-MM-ddTHH:mm:ss
endTime
'yyyy-MM-ddTHH:mm:ssZ'
yyyy-MM-ddTHH:mm:ss
timeZone
startTime
endTime
schedule
recurrence
frequency
interval
endTime
count
schedule
frequency
frequency
minute,
hour,
day
week
month
interval
frequency
interval
3
frequency
week
schedule
frequency
schedule
Important
For the UTC time zone,startTimeandendTimeneed to follow the formatyyyy-MM-ddTHH:mm:ssZ. For other time zones,startTimeandendTimefollow theyyyy-MM-ddTHH:mm:ssformat.
startTime
endTime
yyyy-MM-ddTHH:mm:ss
startTime
endTime
yyyy-MM-ddTHH:mm:ss
Per the ISO 8601 standard, theZsuffix is used to timestamp mark the datetime to the UTC time zone and render thetimeZonefield useless. If theZsuffix is missing for the UTC time zone, the result is an error upon triggeractivation.
timeZone
Schema defaults, limits, and examples
startTime
"startTime" : "2013-01-09T09:30:00-08:00Z"
"2013-01-09T09:30:00-08:00"
timeZone
"UTC"
recurrence
"recurrence" : { "frequency" : "monthly", "interval" : 1 }
interval
"interval":10
endTime
"endTime" : "2013-02-09T09:30:00-08:00Z"
"endTime" : "2013-02-09T09:30:00-08:00"
schedule
"schedule" : { "minute" : [30], "hour" : [8,17] }
Time zone option
Here are some of the time zones supported for schedule triggers.
UTC
'yyyy-MM-ddTHH:mm:ssZ'
Pacific Standard Time
'yyyy-MM-ddTHH:mm:ss'
Central Standard Time
'yyyy-MM-ddTHH:mm:ss'
Eastern Standard Time
'yyyy-MM-ddTHH:mm:ss'
GMT Standard Time
'yyyy-MM-ddTHH:mm:ss'
W. Europe Standard Time
'yyyy-MM-ddTHH:mm:ss'
India Standard Time
'yyyy-MM-ddTHH:mm:ss'
China Standard Time
'yyyy-MM-ddTHH:mm:ss'
This list is incomplete. For a complete list of time-zone options, see theTrigger creation pagein the portal.
startTime property
The following table shows you how thestartTimeproperty controls a trigger run.
startTime
Let's see an example of what happens when the start time is in the past, with a recurrence, but no schedule. Assume that the current time is2017-04-08 13:00, the start time is2017-04-07 14:00, and the recurrence is every two days. (Therecurrencevalue is defined by setting thefrequencyproperty todayand theintervalproperty to2.) Notice that thestartTimevalue is in the past and occurs before the current time.
2017-04-08 13:00
2017-04-07 14:00
recurrence
frequency
day
interval
2
startTime
Under these conditions, the first execution is at2017-04-09at14:00. The Scheduler engine calculates execution occurrences from the start time. Any instances in the past are discarded. The engine uses the next instance that occurs in the future. In this scenario, the start time is2017-04-07at2:00pm, so the next instance is two days from that time, which is2017-04-09at2:00pm.
2017-04-09
14:00
2017-04-07
2:00pm
2017-04-09
2:00pm
The first execution time is the same even if thestartTimevalue is2017-04-05 14:00or2017-04-01 14:00. After the first execution, subsequent executions are calculated by using the schedule. Therefore, the subsequent executions are at2017-04-11at2:00pm, then2017-04-13at2:00pm, then2017-04-15at2:00pm, and so on.
startTime
2017-04-05 14:00
2017-04-01 14:00
2017-04-11
2:00pm
2017-04-13
2:00pm
2017-04-15
2:00pm
Finally, when the hours or minutes aren't set in the schedule for a trigger, the hours or minutes of the first execution are used as the defaults.
schedule property
The use of a schedule can limit the number of trigger executions. For example, if a trigger with a monthly frequency is scheduled to run only on day 31, the trigger runs only in those months that have a 31st day.
A schedule can also expand the number of trigger executions. For example, a trigger with a monthly frequency that's scheduled to run on month days 1 and 2, runs on the first and second days of the month, rather than once a month.
If multiplescheduleelements are specified, the order of evaluation is from the largest to the smallest schedule setting. The evaluation starts with the week number, and then the month day, weekday, hour, and finally, minute.
schedule
The following table describes thescheduleelements in detail.
schedule
minutes
Integer
Array of integers
hours
Integer
Array of integers
weekDays
Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday.
Array of day values (maximum array size is 7).
Day values aren't case sensitive.
monthlyOccurrences
Array ofmonthlyOccurrencesobjects:{ "day": day,  "occurrence": occurrence }.
monthlyOccurrences
{ "day": day,  "occurrence": occurrence }
Thedayattribute is the day of the week on which the trigger runs. For example, amonthlyOccurrencesproperty with adayvalue of{Sunday}means every Sunday of the month. Thedayattribute is required.
day
monthlyOccurrences
day
{Sunday}
day
Theoccurrenceattribute is the occurrence of the specifieddayduring the month. For example, amonthlyOccurrencesproperty withdayandoccurrencevalues of{Sunday, -1}means the last Sunday of the month. Theoccurrenceattribute is optional.
occurrence
day
monthlyOccurrences
day
occurrence
{Sunday, -1}
occurrence
monthDays
Any value <= -1 and >= -31
Any value >= 1 and <= 31
Array of values
Examples of trigger recurrence schedules
This section provides examples of recurrence schedules and focuses on thescheduleobject and its elements.
schedule
The examples assume that theintervalvalue is1and that thefrequencyvalue is correct according to the schedule definition. For example, you can't have afrequencyvalue ofdayand also have amonthDaysmodification in thescheduleobject. Restrictions such as these are mentioned in the table in the previous section.
interval
1
frequency
frequency
day
monthDays
schedule
{"hours":[5]}
{"minutes":[15], "hours":[5]}
{"minutes":[15], "hours":[5,17]}
{"minutes":[15,45], "hours":[5,17]}
{"minutes":[0,15,30,45]}
{hours":[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]}
startTime
frequency
hour
interval
1
schedule
frequency
interval
frequency
month
frequency
day
{"minutes":[0]}
frequency
hour
startTime
schedule
frequency
day
frequency
week
month
{"minutes":[15]}
{"hours":[17], "weekDays":["saturday"]}
{"hours":[17], "weekDays":["monday", "wednesday", "friday"]}
{"minutes":[15,45], "hours":[17], "weekDays":["monday", "wednesday", "friday"]}
{"minutes":[0,15,30,45], "weekDays":["monday", "tuesday", "wednesday", "thursday", "friday"]}
{"minutes":[0,15,30,45], "hours": [9, 10, 11, 12, 13, 14, 15, 16] "weekDays":["monday", "tuesday", "wednesday", "thursday", "friday"]}
{"weekDays":["tuesday", "thursday"]}
{"minutes":[0], "hours":[6], "monthDays":[28]}
frequency
month
{"minutes":[0], "hours":[6], "monthDays":[-1]}
{"minutes":[0], "hours":[6], "monthDays":[1,-1]}
{monthDays":[1,14]}
{"minutes":[0], "hours":[5], "monthlyOccurrences":[{"day":"friday", "occurrence":1}]}
{"monthlyOccurrences":[{"day":"friday", "occurrence":1}]}
{"monthlyOccurrences":[{"day":"friday", "occurrence":-3}]}
{"minutes":[15], "hours":[5], "monthlyOccurrences":[{"day":"friday", "occurrence":1},{"day":"friday", "occurrence":-1}]}
{"monthlyOccurrences":[{"day":"friday", "occurrence":1},{"day":"friday", "occurrence":-1}]}
{"monthlyOccurrences":[{"day":"friday", "occurrence":5}]}
occurrence
{"minutes":[0,15,30,45], "monthlyOccurrences":[{"day":"friday", "occurrence":-1}]}
{"minutes":[15,45], "hours":[5,17], "monthlyOccurrences":[{"day":"wednesday", "occurrence":3}]}
Related content
For more information about triggers, seePipeline execution and triggers.
To learn how to reference trigger metadata in pipeline, seeReference trigger metadata in pipeline runs.
Feedback
Was this page helpful?
Additional resources