Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Interactive R development
Article
2025-03-21
6 contributors
In this article
APPLIES TO:Azure CLI ml extension v2 (current)Python SDK azure-ai-ml v2 (current)
This article shows how to use R in Azure Machine Learning studio on a compute instance that runs an R kernel in a Jupyter notebook.
The popular RStudio IDE also works. You can install RStudio or Posit Workbench in a custom container on a compute instance. However, this has limitations in reading and writing to your Azure Machine Learning workspace.
Important
The code shown in this article works on an Azure Machine Learning compute instance. The compute instance has an environment and configuration file necessary for the code to run successfully.
Prerequisites
If you don't have an Azure subscription, create a free account before you begin. Try thefree or paid version of Azure Machine Learningtoday
AnAzure Machine Learning workspace and a compute instance
A basic understand of using Jupyter notebooks in Azure Machine Learning studio. Visit theModel development on a cloud workstationresource for more information.
Run R in a notebook in studio
You'll use a notebook in your Azure Machine Learning workspace, on a compute instance.
Sign in toAzure Machine Learning studio
Sign in toAzure Machine Learning studio
Open your workspace if it isn't already open
Open your workspace if it isn't already open
On the left navigation, selectNotebooks
On the left navigation, selectNotebooks
Create a new notebook, namedRunR.ipynbTipIf you're not sure how to create and work with notebooks in studio, reviewRun Jupyter notebooks in your workspace
Create a new notebook, namedRunR.ipynb
Tip
If you're not sure how to create and work with notebooks in studio, reviewRun Jupyter notebooks in your workspace
Select the notebook.
Select the notebook.
On the notebook toolbar, make sure your compute instance is running. If not, start it now.
On the notebook toolbar, make sure your compute instance is running. If not, start it now.
On the notebook toolbar, switch the kernel toR.
On the notebook toolbar, switch the kernel toR.

Your notebook is now ready to run R commands.
Access data
You can upload files to your workspace file storage resource, and then access those files in R. However, for files stored in Azuredata assetsor data fromdatastores, you must install some packages.
This section describes how to use Python and thereticulatepackage to load your data assets and datastores into R, from an interactive session. You use theazureml-fsspecPython package and thereticulateR package to read tabular data as Pandas DataFrames. This section also includes an example of reading data assets and datastores into an Rdata.frame.
reticulate
azureml-fsspec
reticulate
data.frame
To install these packages:
Create a new file on the compute instance, calledsetup.sh.
Create a new file on the compute instance, calledsetup.sh.
Copy this code into the file:#!/bin/bash

set -e

# Installs azureml-fsspec in default conda environment 
# Does not need to run as sudo

eval "$(conda shell.bash hook)"
conda activate azureml_py310_sdkv2
pip install azureml-fsspec
conda deactivate

# Checks that version 1.26 of reticulate is installed (needs to be done as sudo)

sudo -u azureuser -i <<'EOF'
R -e "if (packageVersion('reticulate') >= 1.26) message('Version OK') else install.packages('reticulate')"
EOF
Copy this code into the file:
#!/bin/bash

set -e

# Installs azureml-fsspec in default conda environment 
# Does not need to run as sudo

eval "$(conda shell.bash hook)"
conda activate azureml_py310_sdkv2
pip install azureml-fsspec
conda deactivate

# Checks that version 1.26 of reticulate is installed (needs to be done as sudo)

sudo -u azureuser -i <<'EOF'
R -e "if (packageVersion('reticulate') >= 1.26) message('Version OK') else install.packages('reticulate')"
EOF
#!/bin/bash

set -e

# Installs azureml-fsspec in default conda environment 
# Does not need to run as sudo

eval "$(conda shell.bash hook)"
conda activate azureml_py310_sdkv2
pip install azureml-fsspec
conda deactivate

# Checks that version 1.26 of reticulate is installed (needs to be done as sudo)

sudo -u azureuser -i <<'EOF'
R -e "if (packageVersion('reticulate') >= 1.26) message('Version OK') else install.packages('reticulate')"
EOF
SelectSave and run script in terminalto run the script
SelectSave and run script in terminalto run the script
The install script handles these steps:
pipinstallsazureml-fsspecin the default conda environment for the compute instance
pip
azureml-fsspec
Installs the Rreticulatepackage if necessary (version must be 1.26 or greater)
reticulate
Read tabular data from registered data assets or datastores
For data stored in a data assetcreated in Azure Machine Learning, use these steps to read that tabular file into a Pandas DataFrame or an Rdata.frame:
data.frame
Note
Reading a file withreticulateonly works with tabular data.
reticulate
Ensure you have the correct version ofreticulate. For a version less than 1.26, try to use a newer compute instance.packageVersion("reticulate")
Ensure you have the correct version ofreticulate. For a version less than 1.26, try to use a newer compute instance.
reticulate
packageVersion("reticulate")
packageVersion("reticulate")
Loadreticulateand set the conda environment whereazureml-fsspecwas installedlibrary(reticulate)
use_condaenv("azureml_py310_sdkv2")
print("Environment is set")
Loadreticulateand set the conda environment whereazureml-fsspecwas installed
reticulate
azureml-fsspec
library(reticulate)
use_condaenv("azureml_py310_sdkv2")
print("Environment is set")
library(reticulate)
use_condaenv("azureml_py310_sdkv2")
print("Environment is set")
Find the URI path to the data file.First, get a handle to your workspacepy_code <- "from azure.identity import DefaultAzureCredential
from azure.ai.ml import MLClient
credential = DefaultAzureCredential()
ml_client = MLClient.from_config(credential=credential)"

py_run_string(py_code)
print("ml_client is configured")Use this code to retrieve the asset. Make sure to replace<MY_NAME>and<MY_VERSION>with the name and number of your data asset.TipIn studio, selectDatain the left navigation to find the name and version number of your data asset.# Replace <MY_NAME> and <MY_VERSION> with your values
py_code <- "my_name = '<MY_NAME>'
my_version = '<MY_VERSION>'
data_asset = ml_client.data.get(name=my_name, version=my_version)
data_uri = data_asset.path"To retrieve the URI, run the code.py_run_string(py_code)
print(paste("URI path is", py$data_uri))
Find the URI path to the data file.
First, get a handle to your workspacepy_code <- "from azure.identity import DefaultAzureCredential
from azure.ai.ml import MLClient
credential = DefaultAzureCredential()
ml_client = MLClient.from_config(credential=credential)"

py_run_string(py_code)
print("ml_client is configured")
First, get a handle to your workspace
py_code <- "from azure.identity import DefaultAzureCredential
from azure.ai.ml import MLClient
credential = DefaultAzureCredential()
ml_client = MLClient.from_config(credential=credential)"

py_run_string(py_code)
print("ml_client is configured")
py_code <- "from azure.identity import DefaultAzureCredential
from azure.ai.ml import MLClient
credential = DefaultAzureCredential()
ml_client = MLClient.from_config(credential=credential)"

py_run_string(py_code)
print("ml_client is configured")
Use this code to retrieve the asset. Make sure to replace<MY_NAME>and<MY_VERSION>with the name and number of your data asset.TipIn studio, selectDatain the left navigation to find the name and version number of your data asset.# Replace <MY_NAME> and <MY_VERSION> with your values
py_code <- "my_name = '<MY_NAME>'
my_version = '<MY_VERSION>'
data_asset = ml_client.data.get(name=my_name, version=my_version)
data_uri = data_asset.path"
Use this code to retrieve the asset. Make sure to replace<MY_NAME>and<MY_VERSION>with the name and number of your data asset.
<MY_NAME>
<MY_VERSION>
Tip
In studio, selectDatain the left navigation to find the name and version number of your data asset.
# Replace <MY_NAME> and <MY_VERSION> with your values
py_code <- "my_name = '<MY_NAME>'
my_version = '<MY_VERSION>'
data_asset = ml_client.data.get(name=my_name, version=my_version)
data_uri = data_asset.path"
# Replace <MY_NAME> and <MY_VERSION> with your values
py_code <- "my_name = '<MY_NAME>'
my_version = '<MY_VERSION>'
data_asset = ml_client.data.get(name=my_name, version=my_version)
data_uri = data_asset.path"
To retrieve the URI, run the code.py_run_string(py_code)
print(paste("URI path is", py$data_uri))
To retrieve the URI, run the code.
py_run_string(py_code)
print(paste("URI path is", py$data_uri))
py_run_string(py_code)
print(paste("URI path is", py$data_uri))
Use Pandas read functions to read the file or files into the R environment.pd <- import("pandas")
cc <- pd$read_csv(py$data_uri)
head(cc)
Use Pandas read functions to read the file or files into the R environment.
pd <- import("pandas")
cc <- pd$read_csv(py$data_uri)
head(cc)
pd <- import("pandas")
cc <- pd$read_csv(py$data_uri)
head(cc)
Install R packages
A compute instance has many preinstalled R packages.
To install other packages, you must explicitly state the location and dependencies.
Tip
When you create or use a different compute instance, you must re-install any packages you've installed.
For example, to install thetsibblepackage:
tsibble
install.packages("tsibble", 
                 dependencies = TRUE,
                 lib = "/home/azureuser")
install.packages("tsibble", 
                 dependencies = TRUE,
                 lib = "/home/azureuser")
Note
If you install packages within an R session that runs in a Jupyter notebook,dependencies = TRUEis required. Otherwise, dependent packages will not automatically install. The lib location is also required to install in the correct compute instance location.
dependencies = TRUE
Load R libraries
Add/home/azureuserto the R library path.
/home/azureuser
.libPaths("/home/azureuser")
.libPaths("/home/azureuser")
Tip
You must update the.libPathsin each interactive R script to access user installed libraries. Add this code to the top of each interactive R script or notebook.
.libPaths
Once the libPath is updated, load libraries as usual.
library('tsibble')
library('tsibble')
Use R in the notebook
Beyond the issues described earlier, use R as you would in any other environment, including your local workstation. In your notebook or script, you can read and write to the path where the notebook/script is stored.
Note
From an interactive R session, you can only write to the workspace file system.
From an interactive R session, you cannot interact with MLflow (such as log model or query registry).
Feedback
Was this page helpful?
Additional resources