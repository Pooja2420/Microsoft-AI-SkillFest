Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
SQL Authentication in Azure Synapse Analytics
Article
2024-11-07
14 contributors
In this article
Azure Synapse Analytics has two SQL form-factors that enable you to control your resource consumption. This article explains how the two form-factors control the user authentication.
To authenticate to Synapse SQL, you can use two options:
Microsoft Entra authentication
SQL authentication
SQL authentication enables legacy applications to connect to Azure Synapse SQL in a familiar way, with a user name and password. However, Microsoft Entra authentication allows you to centrally manage access to Azure Synapse resources, such as SQL pools. Azure Synapse Analytics supports disabling local authentication, such as SQL authentication, both during and after workspace creation. Once disabled, local authentication can be enabled at any time by authorized users. For more information on Microsoft Entra-only authentication, seeDisabling local authentication in Azure Synapse Analytics.
Administrative accounts
There are two administrative accounts (SQL admin usernameandMicrosoft Entra admin) that act as administrators. To identify these administrator accounts for your SQL pools open the Azure portal, and navigate to the Properties tab of your Synapse workspace.

SQL admin usernameWhen you create an Azure Synapse Analytics, you must name aServer admin login. SQL server creates that account as a login in themasterdatabase. This account connects using SQL Server authentication (user name and password). Only one of these accounts can exist.
SQL admin username
When you create an Azure Synapse Analytics, you must name aServer admin login. SQL server creates that account as a login in themasterdatabase. This account connects using SQL Server authentication (user name and password). Only one of these accounts can exist.
master
Microsoft Entra adminOne Microsoft Entra account, either an individual or security group account, can also be configured as an administrator. It's optional to configure a Microsoft Entra administrator, but a Microsoft Entra administratormustbe configured if you want to use Microsoft Entra accounts to connect to Synapse SQL.The Microsoft Entra admin account controls access to dedicated SQL pools, while Synapse RBAC roles can be used to control access to serverless pools, for example, with theSynapse AdministratorandSynapse SQL Administratorrole.
Microsoft Entra admin
One Microsoft Entra account, either an individual or security group account, can also be configured as an administrator. It's optional to configure a Microsoft Entra administrator, but a Microsoft Entra administratormustbe configured if you want to use Microsoft Entra accounts to connect to Synapse SQL.
The Microsoft Entra admin account controls access to dedicated SQL pools, while Synapse RBAC roles can be used to control access to serverless pools, for example, with theSynapse AdministratorandSynapse SQL Administratorrole.
TheSQL admin usernameandMicrosoft Entra adminaccounts have the following characteristics:
Are the only accounts that can automatically connect to any SQL Database on the server. (To connect to a user database, other accounts must either be the owner of the database, or have a user account in the user database.)
These accounts enter user databases as thedbouser and they have all the permissions in the user databases. (The owner of a user database also enters the database as thedbouser.)
dbo
dbo
Don't enter themasterdatabase as thedbouser, and have limited permissions in themasterdatabase.
master
dbo
master
Arenotmembers of the standard SQL Serversysadminfixed server role, which is not available in SQL Database.
sysadmin
Can create, alter, and drop databases, logins, users in themasterdatabase, and server-level IP firewall rules.
master
Can add and remove members to thedbmanagerandloginmanagerroles.
dbmanager
loginmanager
Can view thesys.sql_loginssystem table.
sys.sql_logins
Note
If a user is configured as an Microsoft Entra admin and Synapse Administrator, and then removed from the Microsoft Entra admin role, then the user will lose access to the dedicated SQL pools in Synapse. They must be removed and then added to the Synapse Administrator role to regain access to dedicated SQL pools.
Serverless SQL pool
Dedicated SQL pool
To manage the users having access to serverless SQL pool, you can use the instructions below.
To create a login to serverless SQL pool, use the following syntax:
CREATE LOGIN Mary WITH PASSWORD = '<strong_password>';
-- or
CREATE LOGIN [Mary@domainname.net] FROM EXTERNAL PROVIDER;
CREATE LOGIN Mary WITH PASSWORD = '<strong_password>';
-- or
CREATE LOGIN [Mary@domainname.net] FROM EXTERNAL PROVIDER;
When the login exists, you can create users in the individual databases within the serverless SQL pool endpoint and grant required permissions to these users. To create a user, you can use the following syntax:
CREATE USER Mary FROM LOGIN Mary;
-- or
CREATE USER Mary FROM LOGIN Mary@domainname.net;
-- or
CREATE USER [mike@contoso.com] FROM EXTERNAL PROVIDER;
CREATE USER Mary FROM LOGIN Mary;
-- or
CREATE USER Mary FROM LOGIN Mary@domainname.net;
-- or
CREATE USER [mike@contoso.com] FROM EXTERNAL PROVIDER;
Once login and user are created, you can use the regular SQL Server syntax to grant rights.
Administrator access path
When the workspace-level firewall is properly configured, theSQL admin usernameand theSQL Microsoft Entra admincan connect using client tools such as SQL Server Management Studio or SQL Server Data Tools. Only the latest tools provide all the features and capabilities.
The following diagram shows a typical configuration for the two administrator accounts:

When using an open port in the server-level firewall, administrators can connect to any SQL Database.
Database creators
One of these administrative roles is thedbmanagerrole. Members of this role can create new databases. To use this role, you create a user in themasterdatabase and then add the user to thedbmanagerdatabase role.
master
To create a database, the user must be a user based on a SQL Server login in themasterdatabase or contained database user based on a Microsoft Entra user.
master
Using an administrator account, connect to themasterdatabase.
Using an administrator account, connect to themasterdatabase.
master
Create a SQL Server authentication login, using theCREATE LOGINstatement. Sample statement:CREATE LOGIN Mary WITH PASSWORD = '<strong_password>';NoteUse a strong password when creating a login or contained database user. For more information, seeStrong Passwords.To improve performance, logins (server-level principals) are temporarily cached at the database level. To refresh the authentication cache, seeDBCC FLUSHAUTHCACHE.
Create a SQL Server authentication login, using theCREATE LOGINstatement. Sample statement:
CREATE LOGIN Mary WITH PASSWORD = '<strong_password>';
CREATE LOGIN Mary WITH PASSWORD = '<strong_password>';
Note
Use a strong password when creating a login or contained database user. For more information, seeStrong Passwords.
To improve performance, logins (server-level principals) are temporarily cached at the database level. To refresh the authentication cache, seeDBCC FLUSHAUTHCACHE.
Create a databases user by using theCREATE USERstatement. The user can be a Microsoft Entra authentication contained database user (if you've configured your environment for Microsoft Entra authentication), or a SQL Server authentication contained database user, or a SQL Server authentication user based on a SQL Server authentication login (created in the previous step.)Sample statements:Create a user with Microsoft Entra ID:CREATE USER [mike@contoso.com] FROM EXTERNAL PROVIDER;Create a SQL Database contained database user:CREATE USER Ann WITH PASSWORD = '<strong_password>';Create a SQL Server user based on a SQL Server authentication login:CREATE USER Mary FROM LOGIN Mary;
Create a databases user by using theCREATE USERstatement. The user can be a Microsoft Entra authentication contained database user (if you've configured your environment for Microsoft Entra authentication), or a SQL Server authentication contained database user, or a SQL Server authentication user based on a SQL Server authentication login (created in the previous step.)
Sample statements:
Create a user with Microsoft Entra ID:
CREATE USER [mike@contoso.com] FROM EXTERNAL PROVIDER;
CREATE USER [mike@contoso.com] FROM EXTERNAL PROVIDER;
Create a SQL Database contained database user:
CREATE USER Ann WITH PASSWORD = '<strong_password>';
CREATE USER Ann WITH PASSWORD = '<strong_password>';
Create a SQL Server user based on a SQL Server authentication login:
CREATE USER Mary FROM LOGIN Mary;
CREATE USER Mary FROM LOGIN Mary;
Add the new user, to thedbmanagerdatabase role inmasterusing thesp_addrolememberprocedure (note thatALTER ROLEstatement is not supported in SQL provisioned). Sample statements:EXEC sp_addrolemember 'dbmanager', 'Mary'; 
EXEC sp_addrolemember 'dbmanager', 'mike@contoso.com]';NoteThedbmanageris a database role inmasterdatabase so you can only add a database user to thedbmanagerrole. You cannot add a server-level login to database-level role.
Add the new user, to thedbmanagerdatabase role inmasterusing thesp_addrolememberprocedure (note thatALTER ROLEstatement is not supported in SQL provisioned). Sample statements:
master
EXEC sp_addrolemember 'dbmanager', 'Mary'; 
EXEC sp_addrolemember 'dbmanager', 'mike@contoso.com]';
EXEC sp_addrolemember 'dbmanager', 'Mary'; 
EXEC sp_addrolemember 'dbmanager', 'mike@contoso.com]';
Note
Thedbmanageris a database role inmasterdatabase so you can only add a database user to thedbmanagerrole. You cannot add a server-level login to database-level role.
master
If necessary, configure a firewall rule to allow the new user to connect. (The new user might be covered by an existing firewall rule.)
If necessary, configure a firewall rule to allow the new user to connect. (The new user might be covered by an existing firewall rule.)
Now the user can connect to themasterdatabase and can create new databases. The account creating the database becomes the owner of the database.
master
Login managers
The other administrative role is the login manager role. Members of this role can create new logins in themasterdatabase. If you wish, you can complete the same steps (create a login and user, and add a user to theloginmanagerrole) to enable a user to create new logins in the master. Usually logins aren't necessary as Microsoft recommends using contained database users, which authenticate at the database-level instead of using users based on logins. For more information, seeContained Database Users - Making Your Database Portable.
master
Non-administrator users
Generally, non-administrator accounts don't need access to themasterdatabase. Create contained database users at the database level using theCREATE USER (Transact-SQL)statement.
master
The user can be a Microsoft Entra authentication contained database user (if you have configured your environment for Microsoft Entra authentication), or a SQL Server authentication contained database user, or a SQL Server authentication user based on a SQL Server authentication login (created in the previous step.)
To create users, connect to the database, and execute statements similar to the following examples:
CREATE USER Mary FROM LOGIN Mary;
CREATE USER [mike@contoso.com] FROM EXTERNAL PROVIDER;
CREATE USER Mary FROM LOGIN Mary;
CREATE USER [mike@contoso.com] FROM EXTERNAL PROVIDER;
Initially, only one of the administrators or the owner of the database can create users. To authorize additional users to create new users, grant that selected user theALTER ANY USERpermission, by using a statement such as:
ALTER ANY USER
GRANT ALTER ANY USER TO Mary;
GRANT ALTER ANY USER TO Mary;
To give additional users full control of the database, make them a member of thedb_ownerfixed database role.
In Azure SQL Database or synapse serverless, use theALTER ROLEstatement.
ALTER ROLE
ALTER ROLE db_owner ADD MEMBER Mary;
ALTER ROLE db_owner ADD MEMBER Mary;
In dedicated SQL pool useEXEC sp_addrolemember.
EXEC sp_addrolemember 'db_owner', 'Mary';
EXEC sp_addrolemember 'db_owner', 'Mary';
Note
One common reason to create a database user based on a server login is for users that need access to multiple databases. Since contained database users are individual entities, each database maintains its own user and its own password. This can cause overhead as the user must then remember each password for each database, and it can become untenable when having to change multiple passwords for many databases.
Groups and roles
Efficient access management uses permissions assigned to groups and roles instead of individual users.
When using Microsoft Entra authentication, put Microsoft Entra users into a Microsoft Entra group. Create a contained database user for the group. Place one or more database users into adatabase roleand then assignpermissionsto the database role.
When using Microsoft Entra authentication, put Microsoft Entra users into a Microsoft Entra group. Create a contained database user for the group. Place one or more database users into adatabase roleand then assignpermissionsto the database role.
When using SQL Server authentication, create contained database users in the database. Place one or more database users into adatabase roleand then assignpermissionsto the database role.
When using SQL Server authentication, create contained database users in the database. Place one or more database users into adatabase roleand then assignpermissionsto the database role.
The database roles can be the built-in roles such asdb_owner,db_ddladmin,db_datawriter,db_datareader,db_denydatawriter, anddb_denydatareader.db_owneris commonly used to grant full permission to only a few users. The other fixed database roles are useful for getting a simple database in development quickly, but are not recommended for most production databases.
For example, thedb_datareaderfixed database role grants read access to every table in the database, which is usually more than is strictly necessary.
It's far better to use theCREATE ROLEstatement to create your own user-defined database roles and carefully grant each role the least permissions necessary for the business need. When a user is a member of multiple roles, they aggregate the permissions of them all.
Permissions
There are over 100 permissions that can be individually granted or denied in SQL Database. Many of these permissions are nested. For example, theUPDATEpermission on a schema includes theUPDATEpermission on each table within that schema. As in most permission systems, the denial of a permission overrides a grant.
UPDATE
UPDATE
Because of the nested nature and the number of permissions, it can take careful study to design an appropriate permission system to properly protect your database.
Start with the list of permissions atPermissions (Database Engine)and review theposter size graphic of database engine permissions.
Considerations and restrictions
When managing logins and users in SQL Database, consider the following points:
You must be connected to themasterdatabase when executing theCREATE/ALTER/DROP DATABASEstatements.
master
CREATE/ALTER/DROP DATABASE
The database user corresponding to theServer adminlogin can't be altered or dropped.
Server adminwill be disabled if Microsoft Entra-only authentication is enabled.
US-English is the default language of theServer adminlogin.
Only the administrators (Server adminlogin or Microsoft Entra administrator) and the members of thedbmanagerdatabase role in themasterdatabase have permission to execute theCREATE DATABASEandDROP DATABASEstatements.
master
CREATE DATABASE
DROP DATABASE
You must be connected to themasterdatabase when executing theCREATE/ALTER/DROP LOGINstatements. However, using logins is discouraged. Use contained database users instead. For more information, seeContained Database Users - Making Your Database Portable.
master
CREATE/ALTER/DROP LOGIN
To connect to a user database, you must provide the name of the database in the connection string.
Only the server-level principal login and the members of theloginmanagerdatabase role in themasterdatabase have permission to execute theCREATE LOGIN,ALTER LOGIN, andDROP LOGINstatements.
master
CREATE LOGIN
ALTER LOGIN
DROP LOGIN
When executing theCREATE/ALTER/DROP LOGINandCREATE/ALTER/DROP DATABASEstatements in an ADO.NET application, using parameterized commands isn't allowed. For more information, seeCommands and Parameters.
CREATE/ALTER/DROP LOGIN
CREATE/ALTER/DROP DATABASE
When executing theCREATE USERstatement with theFOR/FROM LOGINoption, it must be the only statement in a Transact-SQL batch.
CREATE USER
FOR/FROM LOGIN
When executing theALTER USERstatement with theWITH LOGINoption, it must be the only statement in a Transact-SQL batch.
ALTER USER
WITH LOGIN
CREATE/ALTER/DROP LOGINandCREATE/ALTER/DROP USERstatements are not supported when Microsoft Entra-only authentication is enabled for the Azure Synapse workspace.
CREATE/ALTER/DROP LOGIN
CREATE/ALTER/DROP USER
ToCREATE/ALTER/DROPa user requires theALTER ANY USERpermission on the database.
CREATE/ALTER/DROP
ALTER ANY USER
When the owner of a database role tries to add or remove another database user to or from that database role, the following error may occur:User or role 'Name' does not exist in this database.This error occurs because the user isn't visible to the owner. To resolve this issue, grant the role owner theVIEW DEFINITIONpermission on the user.
VIEW DEFINITION
Related content
For more information, seeContained Database Users - Making Your Database Portable.
Feedback
Was this page helpful?
Additional resources