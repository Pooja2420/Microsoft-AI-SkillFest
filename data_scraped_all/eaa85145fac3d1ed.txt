Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Add an Azure Spot node pool to an Azure Kubernetes Service (AKS) cluster
Article
2024-08-01
12 contributors
In this article
In this article, you add a secondary Spot node pool to an existing Azure Kubernetes Service (AKS) cluster.
A Spot node pool is a node pool backed by anAzure Spot Virtual Machine scale set. With Spot VMs in your AKS cluster, you can take advantage of unutilized Azure capacity with significant cost savings. The amount of available unutilized capacity varies based on many factors, such as node size, region, and time of day.
When you deploy a Spot node pool, Azure allocates the Spot nodes if there's capacity available and deploys a Spot scale set that backs the Spot node pool in a single default domain. There's no SLA for the Spot nodes. There are no high availability guarantees. If Azure needs capacity back, the Azure infrastructure evicts the Spot nodes.
Spot nodes are great for workloads that can handle interruptions, early terminations, or evictions. For example, workloads such as batch processing jobs, development and testing environments, and large compute workloads might be good candidates to schedule on a Spot node pool.
Before you begin
This article assumes a basic understanding of Kubernetes and Azure Load Balancer concepts. For more information, seeKubernetes core concepts for Azure Kubernetes Service (AKS).
If you don't have an Azure subscription, create afree accountbefore you begin.
When you create a cluster to use a Spot node pool, the cluster must use Virtual Machine Scale Sets for node pools and theStandardSKU load balancer. You must also add another node pool after you create your cluster, which is covered in this tutorial.
This article requires that you're running the Azure CLI version 2.14 or later. Runaz --versionto find the version. If you need to install or upgrade, seeInstall Azure CLI.
az --version
Limitations
The following limitations apply when you create and manage AKS clusters with a Spot node pool:
A Spot node pool can't be a default node pool, it can only be used as a secondary pool.
You can't upgrade the control plane and node pools at the same time. You must upgrade them separately or remove the Spot node pool to upgrade the control plane and remaining node pools at the same time.
A Spot node pool must use Virtual Machine Scale Sets.
You can't changeScaleSetPriorityorSpotMaxPriceafter creation.
ScaleSetPriority
SpotMaxPrice
When settingSpotMaxPrice, the value must be-1or apositive value with up to five decimal places.
SpotMaxPrice
A Spot node pool has thekubernetes.azure.com/scalesetpriority:spotlabel, thekubernetes.azure.com/scalesetpriority=spot:NoScheduletaint, and the system pods have anti-affinity.
kubernetes.azure.com/scalesetpriority:spot
kubernetes.azure.com/scalesetpriority=spot:NoSchedule
You must add acorresponding tolerationand affinity to schedule workloads on a Spot node pool.
Add a Spot node pool to an AKS cluster
When adding a Spot node pool to an existing cluster, it must be a cluster with multiple node pools enabled. When you create an AKS cluster with multiple node pools enabled, you create a node pool with apriorityofRegularby default. To add a Spot node pool, you must specifySpotas the value forpriority. For more details on creating an AKS cluster with multiple node pools, seeuse multiple node pools.
priority
Regular
Spot
priority
Create a node pool with apriorityofSpotusing theaz aks nodepool addcommand.az aks nodepool add \
    --resource-group myResourceGroup \
    --cluster-name myAKSCluster \
    --name spotnodepool \
    --priority Spot \
    --eviction-policy Delete \
    --spot-max-price -1 \
    --enable-cluster-autoscaler \
    --min-count 1 \
    --max-count 3 \
    --no-wait
Create a node pool with apriorityofSpotusing theaz aks nodepool addcommand.
priority
Spot
az aks nodepool add
az aks nodepool add \
    --resource-group myResourceGroup \
    --cluster-name myAKSCluster \
    --name spotnodepool \
    --priority Spot \
    --eviction-policy Delete \
    --spot-max-price -1 \
    --enable-cluster-autoscaler \
    --min-count 1 \
    --max-count 3 \
    --no-wait
az aks nodepool add \
    --resource-group myResourceGroup \
    --cluster-name myAKSCluster \
    --name spotnodepool \
    --priority Spot \
    --eviction-policy Delete \
    --spot-max-price -1 \
    --enable-cluster-autoscaler \
    --min-count 1 \
    --max-count 3 \
    --no-wait
In the previous command, thepriorityofSpotmakes the node pool a Spot node pool. Theeviction-policyparameter is set toDelete, which is the default value. When you set theeviction policytoDelete, nodes in the underlying scale set of the node pool are deleted when they're evicted.
priority
Spot
eviction-policy
Delete
Delete
You can also set the eviction policy toDeallocate, which means that the nodes in the underlying scale set are set to thestopped-deallocatedstate upon eviction. Nodes in thestopped-deallocatedstate count against your compute quota and can cause issues with cluster scaling or upgrading. Thepriorityandeviction-policyvalues can only be set during node pool creation. Those values can't be updated later.
Deallocate
priority
eviction-policy
The previous command also enables thecluster autoscaler, which we recommend using with Spot node pools. Based on the workloads running in your cluster, the cluster autoscaler scales the number of nodes up and down. For Spot node pools, the cluster autoscaler will scale up the number of nodes after an eviction if more nodes are still needed. If you change the maximum number of nodes a node pool can have, you also need to adjust themaxCountvalue associated with the cluster autoscaler. If you don't use a cluster autoscaler, upon eviction, the Spot pool will eventually decrease to0and require manual operation to receive any additional Spot nodes.
maxCount
Important
Only schedule workloads on Spot node pools that can handle interruptions, such as batch processing jobs and testing environments. We recommend you set uptaints and tolerationson your Spot node pool to ensure that only workloads that can handle node evictions are scheduled on a Spot node pool. For example, the above command adds a taint ofkubernetes.azure.com/scalesetpriority=spot:NoSchedule, so only pods with a corresponding toleration are scheduled on this node.
kubernetes.azure.com/scalesetpriority=spot:NoSchedule
Verify the Spot node pool
Verify your node pool was added using theaz aks nodepool showcommand and confirming thescaleSetPriorityisSpot.az aks nodepool show --resource-group myResourceGroup --cluster-name myAKSCluster --name spotnodepool
Verify your node pool was added using theaz aks nodepool showcommand and confirming thescaleSetPriorityisSpot.
az aks nodepool show
scaleSetPriority
Spot
az aks nodepool show --resource-group myResourceGroup --cluster-name myAKSCluster --name spotnodepool
az aks nodepool show --resource-group myResourceGroup --cluster-name myAKSCluster --name spotnodepool
Schedule a pod to run on the Spot node
To schedule a pod to run on a Spot node, you can add a toleration and node affinity that corresponds to the taint applied to your Spot node.
The following example shows a portion of a YAML file that defines a toleration corresponding to thekubernetes.azure.com/scalesetpriority=spot:NoScheduletaint and a node affinity corresponding to thekubernetes.azure.com/scalesetpriority=spotlabel used in the previous step withrequiredDuringSchedulingIgnoredDuringExecutionandpreferredDuringSchedulingIgnoredDuringExecutionnode affinity rules:
kubernetes.azure.com/scalesetpriority=spot:NoSchedule
kubernetes.azure.com/scalesetpriority=spot
requiredDuringSchedulingIgnoredDuringExecution
preferredDuringSchedulingIgnoredDuringExecution
spec:
  containers:
  - name: spot-example
  tolerations:
  - key: "kubernetes.azure.com/scalesetpriority"
    operator: "Equal"
    value: "spot"
    effect: "NoSchedule"
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: "kubernetes.azure.com/scalesetpriority"
            operator: In
            values:
            - "spot"
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 1
        preference:
          matchExpressions:
          - key: another-node-label-key
            operator: In
            values:
            - another-node-label-value
spec:
  containers:
  - name: spot-example
  tolerations:
  - key: "kubernetes.azure.com/scalesetpriority"
    operator: "Equal"
    value: "spot"
    effect: "NoSchedule"
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: "kubernetes.azure.com/scalesetpriority"
            operator: In
            values:
            - "spot"
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 1
        preference:
          matchExpressions:
          - key: another-node-label-key
            operator: In
            values:
            - another-node-label-value
When you deploy a pod with this toleration and node affinity, Kubernetes successfully schedules the pod on the nodes with the taint and label applied. In this example, the following rules apply:
The nodemusthave a label with the keykubernetes.azure.com/scalesetpriority, and the value of that labelmustbespot.
kubernetes.azure.com/scalesetpriority
spot
The nodepreferablyhas a label with the keyanother-node-label-key, and the value of that labelmustbeanother-node-label-value.
another-node-label-key
another-node-label-value
For more information, seeAssigning pods to nodes.
Upgrade a Spot node pool
When you upgrade a Spot node pool, AKS internally issues a cordon and an eviction notice, but no drain is applied. There are no surge nodes available for Spot node pool upgrades. Outside of these changes, the behavior when upgrading Spot node pools is consistent with that of other node pool types.
For more information on upgrading, seeUpgrade an AKS cluster.
Max price for a Spot pool
Pricing for Spot instances is variable, based on region and SKU. For more information, see pricing information forLinuxandWindows.
With variable pricing, you have the option to set a max price, in US dollars (USD) using up to five decimal places. For example, the value0.98765would be a max price of$0.98765 USD per hour. If you set the max price to-1, the instance won't be evicted based on price. As long as there's capacity and quota available, the price for the instance will be the lower price of either the current price for a Spot instance or for a standard instance.
Next steps
In this article, you learned how to add a Spot node pool to an AKS cluster. For more information about how to control pods across node pools, seeBest practices for advanced scheduler features in AKS.
Azure Kubernetes Service

Additional resources