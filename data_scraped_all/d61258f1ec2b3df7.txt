Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Deploy resources with ARM templates and Azure PowerShell
Article
2024-06-14
12 contributors
In this article
This article explains how to use Azure PowerShell with Azure Resource Manager templates (ARM templates) to deploy your resources to Azure. If you aren't familiar with the concepts of deploying and managing your Azure solutions, seetemplate deployment overview.
Tip
We recommendBicepbecause it offers the same capabilities as ARM templates and the syntax is easier to use. To learn more, seeDeploy resources with Bicep and Azure PowerShell.
Prerequisites
You need a template to deploy. If you don't already have one, download and save anexample templatefrom the Azure Quickstart templates repo. The local file name used in this article isC:\MyTemplates\azuredeploy.json.
You need to install Azure PowerShell and connect to Azure:
Install Azure PowerShell cmdlets on your local computer.For more information, seeGet started with Azure PowerShell.
Connect to Azure by usingConnect-AZAccount. If you have multiple Azure subscriptions, you might also need to runSet-AzContext. For more information, seeUse multiple Azure subscriptions.
If you don't have PowerShell installed, you can use Azure Cloud Shell. For more information, seeDeploy ARM templates from Azure Cloud Shell.
Required permissions
To deploy a Bicep file or ARM template, you need write access on the resources you're deploying and access to all operations on the Microsoft.Resources/deployments resource type. For example, to deploy a virtual machine, you needMicrosoft.Compute/virtualMachines/writeandMicrosoft.Resources/deployments/*permissions.  The what-if operation has the same permission requirements.
Microsoft.Compute/virtualMachines/write
Microsoft.Resources/deployments/*
For a list of roles and permissions, seeAzure built-in roles.
Deployment scope
You can target your deployment to a resource group, subscription, management group, or tenant. Depending on the scope of the deployment, you use different commands.
To deploy to aresource group, useNew-AzResourceGroupDeployment:New-AzResourceGroupDeployment -ResourceGroupName <resource-group-name> -TemplateFile <path-to-template>
To deploy to aresource group, useNew-AzResourceGroupDeployment:
New-AzResourceGroupDeployment -ResourceGroupName <resource-group-name> -TemplateFile <path-to-template>
New-AzResourceGroupDeployment -ResourceGroupName <resource-group-name> -TemplateFile <path-to-template>
To deploy to asubscription, useNew-AzSubscriptionDeploymentwhich is an alias of theNew-AzDeploymentcmdlet:New-AzSubscriptionDeployment -Location <location> -TemplateFile <path-to-template>For more information about subscription level deployments, seeCreate resource groups and resources at the subscription level.
To deploy to asubscription, useNew-AzSubscriptionDeploymentwhich is an alias of theNew-AzDeploymentcmdlet:
New-AzDeployment
New-AzSubscriptionDeployment -Location <location> -TemplateFile <path-to-template>
New-AzSubscriptionDeployment -Location <location> -TemplateFile <path-to-template>
For more information about subscription level deployments, seeCreate resource groups and resources at the subscription level.
To deploy to amanagement group, useNew-AzManagementGroupDeployment.New-AzManagementGroupDeployment -Location <location> -TemplateFile <path-to-template>For more information about management group level deployments, seeCreate resources at the management group level.
To deploy to amanagement group, useNew-AzManagementGroupDeployment.
New-AzManagementGroupDeployment -Location <location> -TemplateFile <path-to-template>
New-AzManagementGroupDeployment -Location <location> -TemplateFile <path-to-template>
For more information about management group level deployments, seeCreate resources at the management group level.
To deploy to atenant, useNew-AzTenantDeployment.New-AzTenantDeployment -Location <location> -TemplateFile <path-to-template>For more information about tenant level deployments, seeCreate resources at the tenant level.
To deploy to atenant, useNew-AzTenantDeployment.
New-AzTenantDeployment -Location <location> -TemplateFile <path-to-template>
New-AzTenantDeployment -Location <location> -TemplateFile <path-to-template>
For more information about tenant level deployments, seeCreate resources at the tenant level.
For every scope, the user deploying the template must have the required permissions to create resources.
Deployment name
When deploying an ARM template, you can give the deployment a name. This name can help you retrieve the deployment from the deployment history. If you don't provide a name for the deployment, the name of the template file is used. For example, if you deploy a template namedazuredeploy.jsonand don't specify a deployment name, the deployment is namedazuredeploy.
azuredeploy.json
azuredeploy
Every time you run a deployment, an entry is added to the resource group's deployment history with the deployment name. If you run another deployment and give it the same name, the earlier entry is replaced with the current deployment. If you want to maintain unique entries in the deployment history, give each deployment a unique name.
To create a unique name, you can assign a random number.
$suffix = Get-Random -Maximum 1000
$deploymentName = "ExampleDeployment" + $suffix
$suffix = Get-Random -Maximum 1000
$deploymentName = "ExampleDeployment" + $suffix
Or, add a date value.
$today=Get-Date -Format "MM-dd-yyyy"
$deploymentName="ExampleDeployment"+"$today"
$today=Get-Date -Format "MM-dd-yyyy"
$deploymentName="ExampleDeployment"+"$today"
If you run concurrent deployments to the same resource group with the same deployment name, only the last deployment is completed. Any deployments with the same name that haven't finished are replaced by the last deployment. For example, if you run a deployment namednewStoragethat deploys a storage account namedstorage1, and at the same time run another deployment namednewStoragethat deploys a storage account namedstorage2, you deploy only one storage account. The resulting storage account is namedstorage2.
newStorage
storage1
newStorage
storage2
storage2
However, if you run a deployment namednewStoragethat deploys a storage account namedstorage1, and immediately after it completes you run another deployment namednewStoragethat deploys a storage account namedstorage2, then you have two storage accounts. One is namedstorage1, and the other is namedstorage2. But, you only have one entry in the deployment history.
newStorage
storage1
newStorage
storage2
storage1
storage2
When you specify a unique name for each deployment, you can run them concurrently without conflict. If you run a deployment namednewStorage1that deploys a storage account namedstorage1, and at the same time run another deployment namednewStorage2that deploys a storage account namedstorage2, then you have two storage accounts and two entries in the deployment history.
newStorage1
storage1
newStorage2
storage2
To avoid conflicts with concurrent deployments and to ensure unique entries in the deployment history, give each deployment a unique name.
Deploy local template
You can deploy a template from your local machine or one that is stored externally. This section describes deploying a local template.
If you're deploying to a resource group that doesn't exist, create the resource group. The name of the resource group can only include alphanumeric characters, periods, underscores, hyphens, and parenthesis. It can be up to 90 characters. The name can't end in a period.
New-AzResourceGroup -Name ExampleGroup -Location "Central US"
New-AzResourceGroup -Name ExampleGroup -Location "Central US"
To deploy a local template, use the-TemplateFileparameter in the deployment command. The following example also shows how to set a parameter value that comes from the template.
-TemplateFile
New-AzResourceGroupDeployment `
  -Name ExampleDeployment `
  -ResourceGroupName ExampleGroup `
  -TemplateFile <path-to-template>
New-AzResourceGroupDeployment `
  -Name ExampleDeployment `
  -ResourceGroupName ExampleGroup `
  -TemplateFile <path-to-template>
The deployment can take several minutes to complete.
Deploy remote template
Instead of storing ARM templates on your local machine, you may prefer to store them in an external location. You can store templates in a source control repository (such as GitHub). Or, you can store them in an Azure storage account for shared access in your organization.
Note
To deploy a template or reference a linked template that is stored in a private GitHub repo, see a custom solution documented inCreating a Custom and Secure Azure Portal Offering. You can create anAzure functionthat pulls the GitHub token out of Azure Key Vault.
If you're deploying to a resource group that doesn't exist, create the resource group. The name of the resource group can only include alphanumeric characters, periods, underscores, hyphens, and parenthesis. It can be up to 90 characters. The name can't end in a period.
New-AzResourceGroup -Name ExampleGroup -Location "Central US"
New-AzResourceGroup -Name ExampleGroup -Location "Central US"
To deploy an external template, use the-TemplateUriparameter.
-TemplateUri
New-AzResourceGroupDeployment `
  -Name remoteTemplateDeployment `
  -ResourceGroupName ExampleGroup `
  -TemplateUri https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/quickstarts/microsoft.storage/storage-account-create/azuredeploy.json
New-AzResourceGroupDeployment `
  -Name remoteTemplateDeployment `
  -ResourceGroupName ExampleGroup `
  -TemplateUri https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/quickstarts/microsoft.storage/storage-account-create/azuredeploy.json
The preceding example requires a publicly accessible URI for the template, which works for most scenarios because your template shouldn't include sensitive data. If you need to specify sensitive data (like an admin password), pass that value as a secure parameter. However, if you want to manage access to the template, consider usingtemplate specs.
To deploy remote linked templates with relative path that are stored in a storage account, useQueryStringto specify the SAS token:
QueryString
New-AzResourceGroupDeployment `
  -Name linkedTemplateWithRelativePath `
  -ResourceGroupName "myResourceGroup" `
  -TemplateUri "https://stage20210126.blob.core.windows.net/template-staging/mainTemplate.json" `
  -QueryString "$sasToken"
New-AzResourceGroupDeployment `
  -Name linkedTemplateWithRelativePath `
  -ResourceGroupName "myResourceGroup" `
  -TemplateUri "https://stage20210126.blob.core.windows.net/template-staging/mainTemplate.json" `
  -QueryString "$sasToken"
For more information, seeUse relative path for linked templates.
Deploy template spec
Instead of deploying a local or remote template, you can create atemplate spec. The template spec is a resource in your Azure subscription that contains an ARM template. It makes it easy to securely share the template with users in your organization. You use Azure role-based access control (Azure RBAC) to grant access to the template spec. This feature is currently in preview.
The following examples show how to create and deploy a template spec.
First, create the template spec by providing the ARM template.
New-AzTemplateSpec `
  -Name storageSpec `
  -Version 1.0 `
  -ResourceGroupName templateSpecsRg `
  -Location westus2 `
  -TemplateJsonFile ./mainTemplate.json
New-AzTemplateSpec `
  -Name storageSpec `
  -Version 1.0 `
  -ResourceGroupName templateSpecsRg `
  -Location westus2 `
  -TemplateJsonFile ./mainTemplate.json
Then, get the ID for template spec and deploy it.
$id = (Get-AzTemplateSpec -Name storageSpec -ResourceGroupName templateSpecsRg -Version 1.0).Versions.Id

New-AzResourceGroupDeployment `
  -ResourceGroupName demoRG `
  -TemplateSpecId $id
$id = (Get-AzTemplateSpec -Name storageSpec -ResourceGroupName templateSpecsRg -Version 1.0).Versions.Id

New-AzResourceGroupDeployment `
  -ResourceGroupName demoRG `
  -TemplateSpecId $id
For more information, seeAzure Resource Manager template specs.
Preview changes
Before deploying your template, you can preview the changes the template will make to your environment. Use thewhat-if operationto verify that the template makes the changes that you expect. What-if also validates the template for errors.
Pass parameter values
To pass parameter values, you can use either inline parameters or a parameters file. The parameter file can be either aBicep parameters fileor aJSON parameters file.
Inline parameters
To pass inline parameters, provide the names of the parameter with theNew-AzResourceGroupDeploymentcommand. For example, to pass a string and array to a template, use:
New-AzResourceGroupDeployment
$arrayParam = "value1", "value2"
New-AzResourceGroupDeployment -ResourceGroupName testgroup `
  -TemplateFile <path-to-template> `
  -exampleString "inline string" `
  -exampleArray $arrayParam
$arrayParam = "value1", "value2"
New-AzResourceGroupDeployment -ResourceGroupName testgroup `
  -TemplateFile <path-to-template> `
  -exampleString "inline string" `
  -exampleArray $arrayParam
You can use theTemplateParameterObjectparameter to pass through a hashtable that contains the parameters for the template.
TemplateParameterObject
$params = @{
  exampleString = "inline string"
  exampleArray = "value1", "value2"
}

New-AzResourceGroupDeployment -ResourceGroupName testgroup `
  -TemplateFile <path-to-bicep> `
  -TemplateParameterObject $params
$params = @{
  exampleString = "inline string"
  exampleArray = "value1", "value2"
}

New-AzResourceGroupDeployment -ResourceGroupName testgroup `
  -TemplateFile <path-to-bicep> `
  -TemplateParameterObject $params
You can also get the contents of file and provide that content as an inline parameter.
$arrayParam = "value1", "value2"
New-AzResourceGroupDeployment -ResourceGroupName testgroup `
  -TemplateFile <path-to-template> `
  -exampleString $(Get-Content -Path c:\MyTemplates\stringcontent.txt -Raw) `
  -exampleArray $arrayParam
$arrayParam = "value1", "value2"
New-AzResourceGroupDeployment -ResourceGroupName testgroup `
  -TemplateFile <path-to-template> `
  -exampleString $(Get-Content -Path c:\MyTemplates\stringcontent.txt -Raw) `
  -exampleArray $arrayParam
Getting a parameter value from a file is helpful when you need to provide configuration values. For example, you can providecloud-init values for a Linux virtual machine.
If you need to pass in an array of objects, create hash tables in PowerShell and add them to an array. Pass that array as a parameter during deployment.
$hash1 = @{ Name = "firstSubnet"; AddressPrefix = "10.0.0.0/24"}
$hash2 = @{ Name = "secondSubnet"; AddressPrefix = "10.0.1.0/24"}
$subnetArray = $hash1, $hash2
New-AzResourceGroupDeployment -ResourceGroupName testgroup `
  -TemplateFile <path-to-template> `
  -exampleArray $subnetArray
$hash1 = @{ Name = "firstSubnet"; AddressPrefix = "10.0.0.0/24"}
$hash2 = @{ Name = "secondSubnet"; AddressPrefix = "10.0.1.0/24"}
$subnetArray = $hash1, $hash2
New-AzResourceGroupDeployment -ResourceGroupName testgroup `
  -TemplateFile <path-to-template> `
  -exampleArray $subnetArray
JSON parameter files
Rather than passing parameters as inline values in your script, you may find it easier to use a JSON file that contains the parameter values. The parameter file can be a local file or an external file with an accessible URI.
For more information about the parameter file, seeCreate Resource Manager parameter file.
To pass a local parameter file, use theTemplateParameterFileparameter:
TemplateParameterFile
New-AzResourceGroupDeployment `
  -Name ExampleDeployment `
  -ResourceGroupName ExampleResourceGroup `
  -TemplateFile <path-to-template> `
  -TemplateParameterFile c:\MyTemplates\storage.parameters.json
New-AzResourceGroupDeployment `
  -Name ExampleDeployment `
  -ResourceGroupName ExampleResourceGroup `
  -TemplateFile <path-to-template> `
  -TemplateParameterFile c:\MyTemplates\storage.parameters.json
To pass an external parameter file, use theTemplateParameterUriparameter:
TemplateParameterUri
New-AzResourceGroupDeployment `
  -Name ExampleDeployment `
  -ResourceGroupName ExampleResourceGroup `
  -TemplateUri https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/quickstarts/microsoft.storage/storage-account-create/azuredeploy.json `
  -TemplateParameterUri https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/quickstarts/microsoft.storage/storage-account-create/azuredeploy.parameters.json
New-AzResourceGroupDeployment `
  -Name ExampleDeployment `
  -ResourceGroupName ExampleResourceGroup `
  -TemplateUri https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/quickstarts/microsoft.storage/storage-account-create/azuredeploy.json `
  -TemplateParameterUri https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/quickstarts/microsoft.storage/storage-account-create/azuredeploy.parameters.json
For more information about parameters file, seeCreate Resource Manager parameters file.
Bicep parameter files
With Azure PowerShell version 10.4.0 or later, and Bicep CLI version 0.22.6 or later, you can deploy an ARM template file by utilizing aBicep parameter file. With theusingstatement within the Bicep parameters file, there is no need to provide the-TemplateFileswitch when specifying a Bicep parameter file for the-TemplateParameterFileswitch.
using
-TemplateFile
-TemplateParameterFile
The following example shows a parameters file namedstorage.bicepparam. The file is in the same directory where the command is run.
New-AzResourceGroupDeployment `
  -Name ExampleDeployment `
  -ResourceGroupName ExampleResourceGroup `
  -TemplateParameterFile storage.bicepparam
New-AzResourceGroupDeployment `
  -Name ExampleDeployment `
  -ResourceGroupName ExampleResourceGroup `
  -TemplateParameterFile storage.bicepparam
For more information about Bicep parameters file, seeBicep parameters file.
Next steps
To roll back to a successful deployment when you get an error, seeRollback on error to successful deployment.
To specify how to handle resources that exist in the resource group but aren't defined in the template, seeAzure Resource Manager deployment modes.
To understand how to define parameters in your template, seeUnderstand the structure and syntax of ARM templates.
For information about deploying a template that requires a SAS token, seeDeploy private ARM template with SAS token.
Feedback
Was this page helpful?
Additional resources