Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Microsoft.Network applicationGateways
Article
2024-12-09
2 contributors
In this article
Latest
2024-05-01
2024-03-01
2024-01-01
2023-11-01
2023-09-01
2023-06-01
2023-05-01
2023-04-01
2023-02-01
2022-11-01
2022-09-01
2022-07-01
2022-05-01
2022-01-01
2021-08-01
2021-05-01
2021-03-01
2021-02-01
2020-11-01
2020-08-01
2020-07-01
2020-06-01
2020-05-01
2020-04-01
2020-03-01
2019-12-01
2019-11-01
2019-09-01
2019-08-01
2019-07-01
2019-06-01
2019-04-01
2019-02-01
2018-12-01
2018-11-01
2018-10-01
2018-08-01
2018-07-01
2018-06-01
2018-04-01
2018-02-01
2018-01-01
2017-11-01
2017-10-01
2017-09-01
2017-08-01
2017-06-01
2017-03-30
2017-03-01
2016-12-01
2016-09-01
2016-06-01
2016-03-30
2015-06-15
2015-05-01-preview
Bicep resource definition
The applicationGateways resource type can be deployed with operations that target:
Resource groups- Seeresource group deployment commands
For a list of changed properties in each API version, seechange log.
Resource format
To create a Microsoft.Network/applicationGateways resource, add the following Bicep to your template.
resource symbolicname 'Microsoft.Network/applicationGateways@2024-05-01' = {
  identity: {
    type: 'string'
    userAssignedIdentities: {
      {customized property}: {}
    }
  }
  location: 'string'
  name: 'string'
  properties: {
    authenticationCertificates: [
      {
        id: 'string'
        name: 'string'
        properties: {
          data: 'string'
        }
      }
    ]
    autoscaleConfiguration: {
      maxCapacity: int
      minCapacity: int
    }
    backendAddressPools: [
      {
        id: 'string'
        name: 'string'
        properties: {
          backendAddresses: [
            {
              fqdn: 'string'
              ipAddress: 'string'
            }
          ]
        }
      }
    ]
    backendHttpSettingsCollection: [
      {
        id: 'string'
        name: 'string'
        properties: {
          affinityCookieName: 'string'
          authenticationCertificates: [
            {
              id: 'string'
            }
          ]
          connectionDraining: {
            drainTimeoutInSec: int
            enabled: bool
          }
          cookieBasedAffinity: 'string'
          hostName: 'string'
          path: 'string'
          pickHostNameFromBackendAddress: bool
          port: int
          probe: {
            id: 'string'
          }
          probeEnabled: bool
          protocol: 'string'
          requestTimeout: int
          trustedRootCertificates: [
            {
              id: 'string'
            }
          ]
        }
      }
    ]
    backendSettingsCollection: [
      {
        id: 'string'
        name: 'string'
        properties: {
          hostName: 'string'
          pickHostNameFromBackendAddress: bool
          port: int
          probe: {
            id: 'string'
          }
          protocol: 'string'
          timeout: int
          trustedRootCertificates: [
            {
              id: 'string'
            }
          ]
        }
      }
    ]
    customErrorConfigurations: [
      {
        customErrorPageUrl: 'string'
        statusCode: 'string'
      }
    ]
    enableFips: bool
    enableHttp2: bool
    firewallPolicy: {
      id: 'string'
    }
    forceFirewallPolicyAssociation: bool
    frontendIPConfigurations: [
      {
        id: 'string'
        name: 'string'
        properties: {
          privateIPAddress: 'string'
          privateIPAllocationMethod: 'string'
          privateLinkConfiguration: {
            id: 'string'
          }
          publicIPAddress: {
            id: 'string'
          }
          subnet: {
            id: 'string'
          }
        }
      }
    ]
    frontendPorts: [
      {
        id: 'string'
        name: 'string'
        properties: {
          port: int
        }
      }
    ]
    gatewayIPConfigurations: [
      {
        id: 'string'
        name: 'string'
        properties: {
          subnet: {
            id: 'string'
          }
        }
      }
    ]
    globalConfiguration: {
      enableRequestBuffering: bool
      enableResponseBuffering: bool
    }
    httpListeners: [
      {
        id: 'string'
        name: 'string'
        properties: {
          customErrorConfigurations: [
            {
              customErrorPageUrl: 'string'
              statusCode: 'string'
            }
          ]
          firewallPolicy: {
            id: 'string'
          }
          frontendIPConfiguration: {
            id: 'string'
          }
          frontendPort: {
            id: 'string'
          }
          hostName: 'string'
          hostNames: [
            'string'
          ]
          protocol: 'string'
          requireServerNameIndication: bool
          sslCertificate: {
            id: 'string'
          }
          sslProfile: {
            id: 'string'
          }
        }
      }
    ]
    listeners: [
      {
        id: 'string'
        name: 'string'
        properties: {
          frontendIPConfiguration: {
            id: 'string'
          }
          frontendPort: {
            id: 'string'
          }
          hostNames: [
            'string'
          ]
          protocol: 'string'
          sslCertificate: {
            id: 'string'
          }
          sslProfile: {
            id: 'string'
          }
        }
      }
    ]
    loadDistributionPolicies: [
      {
        id: 'string'
        name: 'string'
        properties: {
          loadDistributionAlgorithm: 'string'
          loadDistributionTargets: [
            {
              id: 'string'
              name: 'string'
              properties: {
                backendAddressPool: {
                  id: 'string'
                }
                weightPerServer: int
              }
            }
          ]
        }
      }
    ]
    privateLinkConfigurations: [
      {
        id: 'string'
        name: 'string'
        properties: {
          ipConfigurations: [
            {
              id: 'string'
              name: 'string'
              properties: {
                primary: bool
                privateIPAddress: 'string'
                privateIPAllocationMethod: 'string'
                subnet: {
                  id: 'string'
                }
              }
            }
          ]
        }
      }
    ]
    probes: [
      {
        id: 'string'
        name: 'string'
        properties: {
          host: 'string'
          interval: int
          match: {
            body: 'string'
            statusCodes: [
              'string'
            ]
          }
          minServers: int
          path: 'string'
          pickHostNameFromBackendHttpSettings: bool
          pickHostNameFromBackendSettings: bool
          port: int
          protocol: 'string'
          timeout: int
          unhealthyThreshold: int
        }
      }
    ]
    redirectConfigurations: [
      {
        id: 'string'
        name: 'string'
        properties: {
          includePath: bool
          includeQueryString: bool
          pathRules: [
            {
              id: 'string'
            }
          ]
          redirectType: 'string'
          requestRoutingRules: [
            {
              id: 'string'
            }
          ]
          targetListener: {
            id: 'string'
          }
          targetUrl: 'string'
          urlPathMaps: [
            {
              id: 'string'
            }
          ]
        }
      }
    ]
    requestRoutingRules: [
      {
        id: 'string'
        name: 'string'
        properties: {
          backendAddressPool: {
            id: 'string'
          }
          backendHttpSettings: {
            id: 'string'
          }
          httpListener: {
            id: 'string'
          }
          loadDistributionPolicy: {
            id: 'string'
          }
          priority: int
          redirectConfiguration: {
            id: 'string'
          }
          rewriteRuleSet: {
            id: 'string'
          }
          ruleType: 'string'
          urlPathMap: {
            id: 'string'
          }
        }
      }
    ]
    rewriteRuleSets: [
      {
        id: 'string'
        name: 'string'
        properties: {
          rewriteRules: [
            {
              actionSet: {
                requestHeaderConfigurations: [
                  {
                    headerName: 'string'
                    headerValue: 'string'
                    headerValueMatcher: {
                      ignoreCase: bool
                      negate: bool
                      pattern: 'string'
                    }
                  }
                ]
                responseHeaderConfigurations: [
                  {
                    headerName: 'string'
                    headerValue: 'string'
                    headerValueMatcher: {
                      ignoreCase: bool
                      negate: bool
                      pattern: 'string'
                    }
                  }
                ]
                urlConfiguration: {
                  modifiedPath: 'string'
                  modifiedQueryString: 'string'
                  reroute: bool
                }
              }
              conditions: [
                {
                  ignoreCase: bool
                  negate: bool
                  pattern: 'string'
                  variable: 'string'
                }
              ]
              name: 'string'
              ruleSequence: int
            }
          ]
        }
      }
    ]
    routingRules: [
      {
        id: 'string'
        name: 'string'
        properties: {
          backendAddressPool: {
            id: 'string'
          }
          backendSettings: {
            id: 'string'
          }
          listener: {
            id: 'string'
          }
          priority: int
          ruleType: 'string'
        }
      }
    ]
    sku: {
      capacity: int
      family: 'string'
      name: 'string'
      tier: 'string'
    }
    sslCertificates: [
      {
        id: 'string'
        name: 'string'
        properties: {
          data: 'string'
          keyVaultSecretId: 'string'
          password: 'string'
        }
      }
    ]
    sslPolicy: {
      cipherSuites: [
        'string'
      ]
      disabledSslProtocols: [
        'string'
      ]
      minProtocolVersion: 'string'
      policyName: 'string'
      policyType: 'string'
    }
    sslProfiles: [
      {
        id: 'string'
        name: 'string'
        properties: {
          clientAuthConfiguration: {
            verifyClientCertIssuerDN: bool
            verifyClientRevocation: 'string'
          }
          sslPolicy: {
            cipherSuites: [
              'string'
            ]
            disabledSslProtocols: [
              'string'
            ]
            minProtocolVersion: 'string'
            policyName: 'string'
            policyType: 'string'
          }
          trustedClientCertificates: [
            {
              id: 'string'
            }
          ]
        }
      }
    ]
    trustedClientCertificates: [
      {
        id: 'string'
        name: 'string'
        properties: {
          data: 'string'
        }
      }
    ]
    trustedRootCertificates: [
      {
        id: 'string'
        name: 'string'
        properties: {
          data: 'string'
          keyVaultSecretId: 'string'
        }
      }
    ]
    urlPathMaps: [
      {
        id: 'string'
        name: 'string'
        properties: {
          defaultBackendAddressPool: {
            id: 'string'
          }
          defaultBackendHttpSettings: {
            id: 'string'
          }
          defaultLoadDistributionPolicy: {
            id: 'string'
          }
          defaultRedirectConfiguration: {
            id: 'string'
          }
          defaultRewriteRuleSet: {
            id: 'string'
          }
          pathRules: [
            {
              id: 'string'
              name: 'string'
              properties: {
                backendAddressPool: {
                  id: 'string'
                }
                backendHttpSettings: {
                  id: 'string'
                }
                firewallPolicy: {
                  id: 'string'
                }
                loadDistributionPolicy: {
                  id: 'string'
                }
                paths: [
                  'string'
                ]
                redirectConfiguration: {
                  id: 'string'
                }
                rewriteRuleSet: {
                  id: 'string'
                }
              }
            }
          ]
        }
      }
    ]
    webApplicationFirewallConfiguration: {
      disabledRuleGroups: [
        {
          ruleGroupName: 'string'
          rules: [
            int
          ]
        }
      ]
      enabled: bool
      exclusions: [
        {
          matchVariable: 'string'
          selector: 'string'
          selectorMatchOperator: 'string'
        }
      ]
      fileUploadLimitInMb: int
      firewallMode: 'string'
      maxRequestBodySize: int
      maxRequestBodySizeInKb: int
      requestBodyCheck: bool
      ruleSetType: 'string'
      ruleSetVersion: 'string'
    }
  }
  tags: {
    {customized property}: 'string'
  }
  zones: [
    'string'
  ]
}
resource symbolicname 'Microsoft.Network/applicationGateways@2024-05-01' = {
  identity: {
    type: 'string'
    userAssignedIdentities: {
      {customized property}: {}
    }
  }
  location: 'string'
  name: 'string'
  properties: {
    authenticationCertificates: [
      {
        id: 'string'
        name: 'string'
        properties: {
          data: 'string'
        }
      }
    ]
    autoscaleConfiguration: {
      maxCapacity: int
      minCapacity: int
    }
    backendAddressPools: [
      {
        id: 'string'
        name: 'string'
        properties: {
          backendAddresses: [
            {
              fqdn: 'string'
              ipAddress: 'string'
            }
          ]
        }
      }
    ]
    backendHttpSettingsCollection: [
      {
        id: 'string'
        name: 'string'
        properties: {
          affinityCookieName: 'string'
          authenticationCertificates: [
            {
              id: 'string'
            }
          ]
          connectionDraining: {
            drainTimeoutInSec: int
            enabled: bool
          }
          cookieBasedAffinity: 'string'
          hostName: 'string'
          path: 'string'
          pickHostNameFromBackendAddress: bool
          port: int
          probe: {
            id: 'string'
          }
          probeEnabled: bool
          protocol: 'string'
          requestTimeout: int
          trustedRootCertificates: [
            {
              id: 'string'
            }
          ]
        }
      }
    ]
    backendSettingsCollection: [
      {
        id: 'string'
        name: 'string'
        properties: {
          hostName: 'string'
          pickHostNameFromBackendAddress: bool
          port: int
          probe: {
            id: 'string'
          }
          protocol: 'string'
          timeout: int
          trustedRootCertificates: [
            {
              id: 'string'
            }
          ]
        }
      }
    ]
    customErrorConfigurations: [
      {
        customErrorPageUrl: 'string'
        statusCode: 'string'
      }
    ]
    enableFips: bool
    enableHttp2: bool
    firewallPolicy: {
      id: 'string'
    }
    forceFirewallPolicyAssociation: bool
    frontendIPConfigurations: [
      {
        id: 'string'
        name: 'string'
        properties: {
          privateIPAddress: 'string'
          privateIPAllocationMethod: 'string'
          privateLinkConfiguration: {
            id: 'string'
          }
          publicIPAddress: {
            id: 'string'
          }
          subnet: {
            id: 'string'
          }
        }
      }
    ]
    frontendPorts: [
      {
        id: 'string'
        name: 'string'
        properties: {
          port: int
        }
      }
    ]
    gatewayIPConfigurations: [
      {
        id: 'string'
        name: 'string'
        properties: {
          subnet: {
            id: 'string'
          }
        }
      }
    ]
    globalConfiguration: {
      enableRequestBuffering: bool
      enableResponseBuffering: bool
    }
    httpListeners: [
      {
        id: 'string'
        name: 'string'
        properties: {
          customErrorConfigurations: [
            {
              customErrorPageUrl: 'string'
              statusCode: 'string'
            }
          ]
          firewallPolicy: {
            id: 'string'
          }
          frontendIPConfiguration: {
            id: 'string'
          }
          frontendPort: {
            id: 'string'
          }
          hostName: 'string'
          hostNames: [
            'string'
          ]
          protocol: 'string'
          requireServerNameIndication: bool
          sslCertificate: {
            id: 'string'
          }
          sslProfile: {
            id: 'string'
          }
        }
      }
    ]
    listeners: [
      {
        id: 'string'
        name: 'string'
        properties: {
          frontendIPConfiguration: {
            id: 'string'
          }
          frontendPort: {
            id: 'string'
          }
          hostNames: [
            'string'
          ]
          protocol: 'string'
          sslCertificate: {
            id: 'string'
          }
          sslProfile: {
            id: 'string'
          }
        }
      }
    ]
    loadDistributionPolicies: [
      {
        id: 'string'
        name: 'string'
        properties: {
          loadDistributionAlgorithm: 'string'
          loadDistributionTargets: [
            {
              id: 'string'
              name: 'string'
              properties: {
                backendAddressPool: {
                  id: 'string'
                }
                weightPerServer: int
              }
            }
          ]
        }
      }
    ]
    privateLinkConfigurations: [
      {
        id: 'string'
        name: 'string'
        properties: {
          ipConfigurations: [
            {
              id: 'string'
              name: 'string'
              properties: {
                primary: bool
                privateIPAddress: 'string'
                privateIPAllocationMethod: 'string'
                subnet: {
                  id: 'string'
                }
              }
            }
          ]
        }
      }
    ]
    probes: [
      {
        id: 'string'
        name: 'string'
        properties: {
          host: 'string'
          interval: int
          match: {
            body: 'string'
            statusCodes: [
              'string'
            ]
          }
          minServers: int
          path: 'string'
          pickHostNameFromBackendHttpSettings: bool
          pickHostNameFromBackendSettings: bool
          port: int
          protocol: 'string'
          timeout: int
          unhealthyThreshold: int
        }
      }
    ]
    redirectConfigurations: [
      {
        id: 'string'
        name: 'string'
        properties: {
          includePath: bool
          includeQueryString: bool
          pathRules: [
            {
              id: 'string'
            }
          ]
          redirectType: 'string'
          requestRoutingRules: [
            {
              id: 'string'
            }
          ]
          targetListener: {
            id: 'string'
          }
          targetUrl: 'string'
          urlPathMaps: [
            {
              id: 'string'
            }
          ]
        }
      }
    ]
    requestRoutingRules: [
      {
        id: 'string'
        name: 'string'
        properties: {
          backendAddressPool: {
            id: 'string'
          }
          backendHttpSettings: {
            id: 'string'
          }
          httpListener: {
            id: 'string'
          }
          loadDistributionPolicy: {
            id: 'string'
          }
          priority: int
          redirectConfiguration: {
            id: 'string'
          }
          rewriteRuleSet: {
            id: 'string'
          }
          ruleType: 'string'
          urlPathMap: {
            id: 'string'
          }
        }
      }
    ]
    rewriteRuleSets: [
      {
        id: 'string'
        name: 'string'
        properties: {
          rewriteRules: [
            {
              actionSet: {
                requestHeaderConfigurations: [
                  {
                    headerName: 'string'
                    headerValue: 'string'
                    headerValueMatcher: {
                      ignoreCase: bool
                      negate: bool
                      pattern: 'string'
                    }
                  }
                ]
                responseHeaderConfigurations: [
                  {
                    headerName: 'string'
                    headerValue: 'string'
                    headerValueMatcher: {
                      ignoreCase: bool
                      negate: bool
                      pattern: 'string'
                    }
                  }
                ]
                urlConfiguration: {
                  modifiedPath: 'string'
                  modifiedQueryString: 'string'
                  reroute: bool
                }
              }
              conditions: [
                {
                  ignoreCase: bool
                  negate: bool
                  pattern: 'string'
                  variable: 'string'
                }
              ]
              name: 'string'
              ruleSequence: int
            }
          ]
        }
      }
    ]
    routingRules: [
      {
        id: 'string'
        name: 'string'
        properties: {
          backendAddressPool: {
            id: 'string'
          }
          backendSettings: {
            id: 'string'
          }
          listener: {
            id: 'string'
          }
          priority: int
          ruleType: 'string'
        }
      }
    ]
    sku: {
      capacity: int
      family: 'string'
      name: 'string'
      tier: 'string'
    }
    sslCertificates: [
      {
        id: 'string'
        name: 'string'
        properties: {
          data: 'string'
          keyVaultSecretId: 'string'
          password: 'string'
        }
      }
    ]
    sslPolicy: {
      cipherSuites: [
        'string'
      ]
      disabledSslProtocols: [
        'string'
      ]
      minProtocolVersion: 'string'
      policyName: 'string'
      policyType: 'string'
    }
    sslProfiles: [
      {
        id: 'string'
        name: 'string'
        properties: {
          clientAuthConfiguration: {
            verifyClientCertIssuerDN: bool
            verifyClientRevocation: 'string'
          }
          sslPolicy: {
            cipherSuites: [
              'string'
            ]
            disabledSslProtocols: [
              'string'
            ]
            minProtocolVersion: 'string'
            policyName: 'string'
            policyType: 'string'
          }
          trustedClientCertificates: [
            {
              id: 'string'
            }
          ]
        }
      }
    ]
    trustedClientCertificates: [
      {
        id: 'string'
        name: 'string'
        properties: {
          data: 'string'
        }
      }
    ]
    trustedRootCertificates: [
      {
        id: 'string'
        name: 'string'
        properties: {
          data: 'string'
          keyVaultSecretId: 'string'
        }
      }
    ]
    urlPathMaps: [
      {
        id: 'string'
        name: 'string'
        properties: {
          defaultBackendAddressPool: {
            id: 'string'
          }
          defaultBackendHttpSettings: {
            id: 'string'
          }
          defaultLoadDistributionPolicy: {
            id: 'string'
          }
          defaultRedirectConfiguration: {
            id: 'string'
          }
          defaultRewriteRuleSet: {
            id: 'string'
          }
          pathRules: [
            {
              id: 'string'
              name: 'string'
              properties: {
                backendAddressPool: {
                  id: 'string'
                }
                backendHttpSettings: {
                  id: 'string'
                }
                firewallPolicy: {
                  id: 'string'
                }
                loadDistributionPolicy: {
                  id: 'string'
                }
                paths: [
                  'string'
                ]
                redirectConfiguration: {
                  id: 'string'
                }
                rewriteRuleSet: {
                  id: 'string'
                }
              }
            }
          ]
        }
      }
    ]
    webApplicationFirewallConfiguration: {
      disabledRuleGroups: [
        {
          ruleGroupName: 'string'
          rules: [
            int
          ]
        }
      ]
      enabled: bool
      exclusions: [
        {
          matchVariable: 'string'
          selector: 'string'
          selectorMatchOperator: 'string'
        }
      ]
      fileUploadLimitInMb: int
      firewallMode: 'string'
      maxRequestBodySize: int
      maxRequestBodySizeInKb: int
      requestBodyCheck: bool
      ruleSetType: 'string'
      ruleSetVersion: 'string'
    }
  }
  tags: {
    {customized property}: 'string'
  }
  zones: [
    'string'
  ]
}
Property Values
ApplicationGatewayAuthenticationCertificate
ApplicationGatewayAuthenticationCertificatePropertiesFormat
ApplicationGatewayAutoscaleConfiguration
ApplicationGatewayBackendAddress
ApplicationGatewayBackendAddressPool
ApplicationGatewayBackendAddressPoolPropertiesFormat
ApplicationGatewayBackendHttpSettings
ApplicationGatewayBackendHttpSettingsPropertiesFormat
ApplicationGatewayBackendSettings
ApplicationGatewayBackendSettingsPropertiesFormat
ApplicationGatewayClientAuthConfiguration
ApplicationGatewayConnectionDraining
ApplicationGatewayCustomError
ApplicationGatewayFirewallDisabledRuleGroup
ApplicationGatewayFirewallExclusion
ApplicationGatewayFrontendIPConfiguration
ApplicationGatewayFrontendIPConfigurationPropertiesFormat
ApplicationGatewayFrontendPort
ApplicationGatewayFrontendPortPropertiesFormat
ApplicationGatewayGlobalConfiguration
ApplicationGatewayHeaderConfiguration
ApplicationGatewayHttpListener
ApplicationGatewayHttpListenerPropertiesFormat
ApplicationGatewayIPConfiguration
ApplicationGatewayIPConfigurationPropertiesFormat
ApplicationGatewayListener
ApplicationGatewayListenerPropertiesFormat
ApplicationGatewayLoadDistributionPolicy
ApplicationGatewayLoadDistributionPolicyPropertiesFormat
ApplicationGatewayLoadDistributionTarget
ApplicationGatewayLoadDistributionTargetPropertiesFormat
ApplicationGatewayPathRule
ApplicationGatewayPathRulePropertiesFormat
ApplicationGatewayPrivateLinkConfiguration
ApplicationGatewayPrivateLinkConfigurationProperties
ApplicationGatewayPrivateLinkIpConfiguration
ApplicationGatewayPrivateLinkIpConfigurationProperties
ApplicationGatewayProbe
ApplicationGatewayProbeHealthResponseMatch
ApplicationGatewayProbePropertiesFormat
ApplicationGatewayPropertiesFormat
ApplicationGatewayRedirectConfiguration
ApplicationGatewayRedirectConfigurationPropertiesFormat
ApplicationGatewayRequestRoutingRule
ApplicationGatewayRequestRoutingRulePropertiesFormat
ApplicationGatewayRewriteRule
ApplicationGatewayRewriteRuleActionSet
ApplicationGatewayRewriteRuleCondition
ApplicationGatewayRewriteRuleSet
ApplicationGatewayRewriteRuleSetPropertiesFormat
ApplicationGatewayRoutingRule
ApplicationGatewayRoutingRulePropertiesFormat
ApplicationGatewaySku
ApplicationGatewaySslCertificate
ApplicationGatewaySslCertificatePropertiesFormat
ApplicationGatewaySslPolicy
ApplicationGatewaySslProfile
ApplicationGatewaySslProfilePropertiesFormat
ApplicationGatewayTrustedClientCertificate
ApplicationGatewayTrustedClientCertificatePropertiesFormat
ApplicationGatewayTrustedRootCertificate
ApplicationGatewayTrustedRootCertificatePropertiesFormat
ApplicationGatewayUrlConfiguration
ApplicationGatewayUrlPathMap
ApplicationGatewayUrlPathMapPropertiesFormat
ApplicationGatewayWebApplicationFirewallConfiguration
Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties
HeaderValueMatcher
ManagedServiceIdentity
ManagedServiceIdentityUserAssignedIdentities
Microsoft.Network/applicationGateways
ResourceTags
SubResource
Usage Examples
Azure Verified Modules
The followingAzure Verified Modulescan be used to deploy this resource type.
Azure Quickstart Samples
The followingAzure Quickstart templatescontain Bicep samples for deploying this resource type.
ARM template resource definition
The applicationGateways resource type can be deployed with operations that target:
Resource groups- Seeresource group deployment commands
For a list of changed properties in each API version, seechange log.
Resource format
To create a Microsoft.Network/applicationGateways resource, add the following JSON to your template.
{
  "type": "Microsoft.Network/applicationGateways",
  "apiVersion": "2024-05-01",
  "name": "string",
  "identity": {
    "type": "string",
    "userAssignedIdentities": {
      "{customized property}": {
      }
    }
  },
  "location": "string",
  "properties": {
    "authenticationCertificates": [
      {
        "id": "string",
        "name": "string",
        "properties": {
          "data": "string"
        }
      }
    ],
    "autoscaleConfiguration": {
      "maxCapacity": "int",
      "minCapacity": "int"
    },
    "backendAddressPools": [
      {
        "id": "string",
        "name": "string",
        "properties": {
          "backendAddresses": [
            {
              "fqdn": "string",
              "ipAddress": "string"
            }
          ]
        }
      }
    ],
    "backendHttpSettingsCollection": [
      {
        "id": "string",
        "name": "string",
        "properties": {
          "affinityCookieName": "string",
          "authenticationCertificates": [
            {
              "id": "string"
            }
          ],
          "connectionDraining": {
            "drainTimeoutInSec": "int",
            "enabled": "bool"
          },
          "cookieBasedAffinity": "string",
          "hostName": "string",
          "path": "string",
          "pickHostNameFromBackendAddress": "bool",
          "port": "int",
          "probe": {
            "id": "string"
          },
          "probeEnabled": "bool",
          "protocol": "string",
          "requestTimeout": "int",
          "trustedRootCertificates": [
            {
              "id": "string"
            }
          ]
        }
      }
    ],
    "backendSettingsCollection": [
      {
        "id": "string",
        "name": "string",
        "properties": {
          "hostName": "string",
          "pickHostNameFromBackendAddress": "bool",
          "port": "int",
          "probe": {
            "id": "string"
          },
          "protocol": "string",
          "timeout": "int",
          "trustedRootCertificates": [
            {
              "id": "string"
            }
          ]
        }
      }
    ],
    "customErrorConfigurations": [
      {
        "customErrorPageUrl": "string",
        "statusCode": "string"
      }
    ],
    "enableFips": "bool",
    "enableHttp2": "bool",
    "firewallPolicy": {
      "id": "string"
    },
    "forceFirewallPolicyAssociation": "bool",
    "frontendIPConfigurations": [
      {
        "id": "string",
        "name": "string",
        "properties": {
          "privateIPAddress": "string",
          "privateIPAllocationMethod": "string",
          "privateLinkConfiguration": {
            "id": "string"
          },
          "publicIPAddress": {
            "id": "string"
          },
          "subnet": {
            "id": "string"
          }
        }
      }
    ],
    "frontendPorts": [
      {
        "id": "string",
        "name": "string",
        "properties": {
          "port": "int"
        }
      }
    ],
    "gatewayIPConfigurations": [
      {
        "id": "string",
        "name": "string",
        "properties": {
          "subnet": {
            "id": "string"
          }
        }
      }
    ],
    "globalConfiguration": {
      "enableRequestBuffering": "bool",
      "enableResponseBuffering": "bool"
    },
    "httpListeners": [
      {
        "id": "string",
        "name": "string",
        "properties": {
          "customErrorConfigurations": [
            {
              "customErrorPageUrl": "string",
              "statusCode": "string"
            }
          ],
          "firewallPolicy": {
            "id": "string"
          },
          "frontendIPConfiguration": {
            "id": "string"
          },
          "frontendPort": {
            "id": "string"
          },
          "hostName": "string",
          "hostNames": [ "string" ],
          "protocol": "string",
          "requireServerNameIndication": "bool",
          "sslCertificate": {
            "id": "string"
          },
          "sslProfile": {
            "id": "string"
          }
        }
      }
    ],
    "listeners": [
      {
        "id": "string",
        "name": "string",
        "properties": {
          "frontendIPConfiguration": {
            "id": "string"
          },
          "frontendPort": {
            "id": "string"
          },
          "hostNames": [ "string" ],
          "protocol": "string",
          "sslCertificate": {
            "id": "string"
          },
          "sslProfile": {
            "id": "string"
          }
        }
      }
    ],
    "loadDistributionPolicies": [
      {
        "id": "string",
        "name": "string",
        "properties": {
          "loadDistributionAlgorithm": "string",
          "loadDistributionTargets": [
            {
              "id": "string",
              "name": "string",
              "properties": {
                "backendAddressPool": {
                  "id": "string"
                },
                "weightPerServer": "int"
              }
            }
          ]
        }
      }
    ],
    "privateLinkConfigurations": [
      {
        "id": "string",
        "name": "string",
        "properties": {
          "ipConfigurations": [
            {
              "id": "string",
              "name": "string",
              "properties": {
                "primary": "bool",
                "privateIPAddress": "string",
                "privateIPAllocationMethod": "string",
                "subnet": {
                  "id": "string"
                }
              }
            }
          ]
        }
      }
    ],
    "probes": [
      {
        "id": "string",
        "name": "string",
        "properties": {
          "host": "string",
          "interval": "int",
          "match": {
            "body": "string",
            "statusCodes": [ "string" ]
          },
          "minServers": "int",
          "path": "string",
          "pickHostNameFromBackendHttpSettings": "bool",
          "pickHostNameFromBackendSettings": "bool",
          "port": "int",
          "protocol": "string",
          "timeout": "int",
          "unhealthyThreshold": "int"
        }
      }
    ],
    "redirectConfigurations": [
      {
        "id": "string",
        "name": "string",
        "properties": {
          "includePath": "bool",
          "includeQueryString": "bool",
          "pathRules": [
            {
              "id": "string"
            }
          ],
          "redirectType": "string",
          "requestRoutingRules": [
            {
              "id": "string"
            }
          ],
          "targetListener": {
            "id": "string"
          },
          "targetUrl": "string",
          "urlPathMaps": [
            {
              "id": "string"
            }
          ]
        }
      }
    ],
    "requestRoutingRules": [
      {
        "id": "string",
        "name": "string",
        "properties": {
          "backendAddressPool": {
            "id": "string"
          },
          "backendHttpSettings": {
            "id": "string"
          },
          "httpListener": {
            "id": "string"
          },
          "loadDistributionPolicy": {
            "id": "string"
          },
          "priority": "int",
          "redirectConfiguration": {
            "id": "string"
          },
          "rewriteRuleSet": {
            "id": "string"
          },
          "ruleType": "string",
          "urlPathMap": {
            "id": "string"
          }
        }
      }
    ],
    "rewriteRuleSets": [
      {
        "id": "string",
        "name": "string",
        "properties": {
          "rewriteRules": [
            {
              "actionSet": {
                "requestHeaderConfigurations": [
                  {
                    "headerName": "string",
                    "headerValue": "string",
                    "headerValueMatcher": {
                      "ignoreCase": "bool",
                      "negate": "bool",
                      "pattern": "string"
                    }
                  }
                ],
                "responseHeaderConfigurations": [
                  {
                    "headerName": "string",
                    "headerValue": "string",
                    "headerValueMatcher": {
                      "ignoreCase": "bool",
                      "negate": "bool",
                      "pattern": "string"
                    }
                  }
                ],
                "urlConfiguration": {
                  "modifiedPath": "string",
                  "modifiedQueryString": "string",
                  "reroute": "bool"
                }
              },
              "conditions": [
                {
                  "ignoreCase": "bool",
                  "negate": "bool",
                  "pattern": "string",
                  "variable": "string"
                }
              ],
              "name": "string",
              "ruleSequence": "int"
            }
          ]
        }
      }
    ],
    "routingRules": [
      {
        "id": "string",
        "name": "string",
        "properties": {
          "backendAddressPool": {
            "id": "string"
          },
          "backendSettings": {
            "id": "string"
          },
          "listener": {
            "id": "string"
          },
          "priority": "int",
          "ruleType": "string"
        }
      }
    ],
    "sku": {
      "capacity": "int",
      "family": "string",
      "name": "string",
      "tier": "string"
    },
    "sslCertificates": [
      {
        "id": "string",
        "name": "string",
        "properties": {
          "data": "string",
          "keyVaultSecretId": "string",
          "password": "string"
        }
      }
    ],
    "sslPolicy": {
      "cipherSuites": [ "string" ],
      "disabledSslProtocols": [ "string" ],
      "minProtocolVersion": "string",
      "policyName": "string",
      "policyType": "string"
    },
    "sslProfiles": [
      {
        "id": "string",
        "name": "string",
        "properties": {
          "clientAuthConfiguration": {
            "verifyClientCertIssuerDN": "bool",
            "verifyClientRevocation": "string"
          },
          "sslPolicy": {
            "cipherSuites": [ "string" ],
            "disabledSslProtocols": [ "string" ],
            "minProtocolVersion": "string",
            "policyName": "string",
            "policyType": "string"
          },
          "trustedClientCertificates": [
            {
              "id": "string"
            }
          ]
        }
      }
    ],
    "trustedClientCertificates": [
      {
        "id": "string",
        "name": "string",
        "properties": {
          "data": "string"
        }
      }
    ],
    "trustedRootCertificates": [
      {
        "id": "string",
        "name": "string",
        "properties": {
          "data": "string",
          "keyVaultSecretId": "string"
        }
      }
    ],
    "urlPathMaps": [
      {
        "id": "string",
        "name": "string",
        "properties": {
          "defaultBackendAddressPool": {
            "id": "string"
          },
          "defaultBackendHttpSettings": {
            "id": "string"
          },
          "defaultLoadDistributionPolicy": {
            "id": "string"
          },
          "defaultRedirectConfiguration": {
            "id": "string"
          },
          "defaultRewriteRuleSet": {
            "id": "string"
          },
          "pathRules": [
            {
              "id": "string",
              "name": "string",
              "properties": {
                "backendAddressPool": {
                  "id": "string"
                },
                "backendHttpSettings": {
                  "id": "string"
                },
                "firewallPolicy": {
                  "id": "string"
                },
                "loadDistributionPolicy": {
                  "id": "string"
                },
                "paths": [ "string" ],
                "redirectConfiguration": {
                  "id": "string"
                },
                "rewriteRuleSet": {
                  "id": "string"
                }
              }
            }
          ]
        }
      }
    ],
    "webApplicationFirewallConfiguration": {
      "disabledRuleGroups": [
        {
          "ruleGroupName": "string",
          "rules": [ "int" ]
        }
      ],
      "enabled": "bool",
      "exclusions": [
        {
          "matchVariable": "string",
          "selector": "string",
          "selectorMatchOperator": "string"
        }
      ],
      "fileUploadLimitInMb": "int",
      "firewallMode": "string",
      "maxRequestBodySize": "int",
      "maxRequestBodySizeInKb": "int",
      "requestBodyCheck": "bool",
      "ruleSetType": "string",
      "ruleSetVersion": "string"
    }
  },
  "tags": {
    "{customized property}": "string"
  },
  "zones": [ "string" ]
}
{
  "type": "Microsoft.Network/applicationGateways",
  "apiVersion": "2024-05-01",
  "name": "string",
  "identity": {
    "type": "string",
    "userAssignedIdentities": {
      "{customized property}": {
      }
    }
  },
  "location": "string",
  "properties": {
    "authenticationCertificates": [
      {
        "id": "string",
        "name": "string",
        "properties": {
          "data": "string"
        }
      }
    ],
    "autoscaleConfiguration": {
      "maxCapacity": "int",
      "minCapacity": "int"
    },
    "backendAddressPools": [
      {
        "id": "string",
        "name": "string",
        "properties": {
          "backendAddresses": [
            {
              "fqdn": "string",
              "ipAddress": "string"
            }
          ]
        }
      }
    ],
    "backendHttpSettingsCollection": [
      {
        "id": "string",
        "name": "string",
        "properties": {
          "affinityCookieName": "string",
          "authenticationCertificates": [
            {
              "id": "string"
            }
          ],
          "connectionDraining": {
            "drainTimeoutInSec": "int",
            "enabled": "bool"
          },
          "cookieBasedAffinity": "string",
          "hostName": "string",
          "path": "string",
          "pickHostNameFromBackendAddress": "bool",
          "port": "int",
          "probe": {
            "id": "string"
          },
          "probeEnabled": "bool",
          "protocol": "string",
          "requestTimeout": "int",
          "trustedRootCertificates": [
            {
              "id": "string"
            }
          ]
        }
      }
    ],
    "backendSettingsCollection": [
      {
        "id": "string",
        "name": "string",
        "properties": {
          "hostName": "string",
          "pickHostNameFromBackendAddress": "bool",
          "port": "int",
          "probe": {
            "id": "string"
          },
          "protocol": "string",
          "timeout": "int",
          "trustedRootCertificates": [
            {
              "id": "string"
            }
          ]
        }
      }
    ],
    "customErrorConfigurations": [
      {
        "customErrorPageUrl": "string",
        "statusCode": "string"
      }
    ],
    "enableFips": "bool",
    "enableHttp2": "bool",
    "firewallPolicy": {
      "id": "string"
    },
    "forceFirewallPolicyAssociation": "bool",
    "frontendIPConfigurations": [
      {
        "id": "string",
        "name": "string",
        "properties": {
          "privateIPAddress": "string",
          "privateIPAllocationMethod": "string",
          "privateLinkConfiguration": {
            "id": "string"
          },
          "publicIPAddress": {
            "id": "string"
          },
          "subnet": {
            "id": "string"
          }
        }
      }
    ],
    "frontendPorts": [
      {
        "id": "string",
        "name": "string",
        "properties": {
          "port": "int"
        }
      }
    ],
    "gatewayIPConfigurations": [
      {
        "id": "string",
        "name": "string",
        "properties": {
          "subnet": {
            "id": "string"
          }
        }
      }
    ],
    "globalConfiguration": {
      "enableRequestBuffering": "bool",
      "enableResponseBuffering": "bool"
    },
    "httpListeners": [
      {
        "id": "string",
        "name": "string",
        "properties": {
          "customErrorConfigurations": [
            {
              "customErrorPageUrl": "string",
              "statusCode": "string"
            }
          ],
          "firewallPolicy": {
            "id": "string"
          },
          "frontendIPConfiguration": {
            "id": "string"
          },
          "frontendPort": {
            "id": "string"
          },
          "hostName": "string",
          "hostNames": [ "string" ],
          "protocol": "string",
          "requireServerNameIndication": "bool",
          "sslCertificate": {
            "id": "string"
          },
          "sslProfile": {
            "id": "string"
          }
        }
      }
    ],
    "listeners": [
      {
        "id": "string",
        "name": "string",
        "properties": {
          "frontendIPConfiguration": {
            "id": "string"
          },
          "frontendPort": {
            "id": "string"
          },
          "hostNames": [ "string" ],
          "protocol": "string",
          "sslCertificate": {
            "id": "string"
          },
          "sslProfile": {
            "id": "string"
          }
        }
      }
    ],
    "loadDistributionPolicies": [
      {
        "id": "string",
        "name": "string",
        "properties": {
          "loadDistributionAlgorithm": "string",
          "loadDistributionTargets": [
            {
              "id": "string",
              "name": "string",
              "properties": {
                "backendAddressPool": {
                  "id": "string"
                },
                "weightPerServer": "int"
              }
            }
          ]
        }
      }
    ],
    "privateLinkConfigurations": [
      {
        "id": "string",
        "name": "string",
        "properties": {
          "ipConfigurations": [
            {
              "id": "string",
              "name": "string",
              "properties": {
                "primary": "bool",
                "privateIPAddress": "string",
                "privateIPAllocationMethod": "string",
                "subnet": {
                  "id": "string"
                }
              }
            }
          ]
        }
      }
    ],
    "probes": [
      {
        "id": "string",
        "name": "string",
        "properties": {
          "host": "string",
          "interval": "int",
          "match": {
            "body": "string",
            "statusCodes": [ "string" ]
          },
          "minServers": "int",
          "path": "string",
          "pickHostNameFromBackendHttpSettings": "bool",
          "pickHostNameFromBackendSettings": "bool",
          "port": "int",
          "protocol": "string",
          "timeout": "int",
          "unhealthyThreshold": "int"
        }
      }
    ],
    "redirectConfigurations": [
      {
        "id": "string",
        "name": "string",
        "properties": {
          "includePath": "bool",
          "includeQueryString": "bool",
          "pathRules": [
            {
              "id": "string"
            }
          ],
          "redirectType": "string",
          "requestRoutingRules": [
            {
              "id": "string"
            }
          ],
          "targetListener": {
            "id": "string"
          },
          "targetUrl": "string",
          "urlPathMaps": [
            {
              "id": "string"
            }
          ]
        }
      }
    ],
    "requestRoutingRules": [
      {
        "id": "string",
        "name": "string",
        "properties": {
          "backendAddressPool": {
            "id": "string"
          },
          "backendHttpSettings": {
            "id": "string"
          },
          "httpListener": {
            "id": "string"
          },
          "loadDistributionPolicy": {
            "id": "string"
          },
          "priority": "int",
          "redirectConfiguration": {
            "id": "string"
          },
          "rewriteRuleSet": {
            "id": "string"
          },
          "ruleType": "string",
          "urlPathMap": {
            "id": "string"
          }
        }
      }
    ],
    "rewriteRuleSets": [
      {
        "id": "string",
        "name": "string",
        "properties": {
          "rewriteRules": [
            {
              "actionSet": {
                "requestHeaderConfigurations": [
                  {
                    "headerName": "string",
                    "headerValue": "string",
                    "headerValueMatcher": {
                      "ignoreCase": "bool",
                      "negate": "bool",
                      "pattern": "string"
                    }
                  }
                ],
                "responseHeaderConfigurations": [
                  {
                    "headerName": "string",
                    "headerValue": "string",
                    "headerValueMatcher": {
                      "ignoreCase": "bool",
                      "negate": "bool",
                      "pattern": "string"
                    }
                  }
                ],
                "urlConfiguration": {
                  "modifiedPath": "string",
                  "modifiedQueryString": "string",
                  "reroute": "bool"
                }
              },
              "conditions": [
                {
                  "ignoreCase": "bool",
                  "negate": "bool",
                  "pattern": "string",
                  "variable": "string"
                }
              ],
              "name": "string",
              "ruleSequence": "int"
            }
          ]
        }
      }
    ],
    "routingRules": [
      {
        "id": "string",
        "name": "string",
        "properties": {
          "backendAddressPool": {
            "id": "string"
          },
          "backendSettings": {
            "id": "string"
          },
          "listener": {
            "id": "string"
          },
          "priority": "int",
          "ruleType": "string"
        }
      }
    ],
    "sku": {
      "capacity": "int",
      "family": "string",
      "name": "string",
      "tier": "string"
    },
    "sslCertificates": [
      {
        "id": "string",
        "name": "string",
        "properties": {
          "data": "string",
          "keyVaultSecretId": "string",
          "password": "string"
        }
      }
    ],
    "sslPolicy": {
      "cipherSuites": [ "string" ],
      "disabledSslProtocols": [ "string" ],
      "minProtocolVersion": "string",
      "policyName": "string",
      "policyType": "string"
    },
    "sslProfiles": [
      {
        "id": "string",
        "name": "string",
        "properties": {
          "clientAuthConfiguration": {
            "verifyClientCertIssuerDN": "bool",
            "verifyClientRevocation": "string"
          },
          "sslPolicy": {
            "cipherSuites": [ "string" ],
            "disabledSslProtocols": [ "string" ],
            "minProtocolVersion": "string",
            "policyName": "string",
            "policyType": "string"
          },
          "trustedClientCertificates": [
            {
              "id": "string"
            }
          ]
        }
      }
    ],
    "trustedClientCertificates": [
      {
        "id": "string",
        "name": "string",
        "properties": {
          "data": "string"
        }
      }
    ],
    "trustedRootCertificates": [
      {
        "id": "string",
        "name": "string",
        "properties": {
          "data": "string",
          "keyVaultSecretId": "string"
        }
      }
    ],
    "urlPathMaps": [
      {
        "id": "string",
        "name": "string",
        "properties": {
          "defaultBackendAddressPool": {
            "id": "string"
          },
          "defaultBackendHttpSettings": {
            "id": "string"
          },
          "defaultLoadDistributionPolicy": {
            "id": "string"
          },
          "defaultRedirectConfiguration": {
            "id": "string"
          },
          "defaultRewriteRuleSet": {
            "id": "string"
          },
          "pathRules": [
            {
              "id": "string",
              "name": "string",
              "properties": {
                "backendAddressPool": {
                  "id": "string"
                },
                "backendHttpSettings": {
                  "id": "string"
                },
                "firewallPolicy": {
                  "id": "string"
                },
                "loadDistributionPolicy": {
                  "id": "string"
                },
                "paths": [ "string" ],
                "redirectConfiguration": {
                  "id": "string"
                },
                "rewriteRuleSet": {
                  "id": "string"
                }
              }
            }
          ]
        }
      }
    ],
    "webApplicationFirewallConfiguration": {
      "disabledRuleGroups": [
        {
          "ruleGroupName": "string",
          "rules": [ "int" ]
        }
      ],
      "enabled": "bool",
      "exclusions": [
        {
          "matchVariable": "string",
          "selector": "string",
          "selectorMatchOperator": "string"
        }
      ],
      "fileUploadLimitInMb": "int",
      "firewallMode": "string",
      "maxRequestBodySize": "int",
      "maxRequestBodySizeInKb": "int",
      "requestBodyCheck": "bool",
      "ruleSetType": "string",
      "ruleSetVersion": "string"
    }
  },
  "tags": {
    "{customized property}": "string"
  },
  "zones": [ "string" ]
}
Property Values
ApplicationGatewayAuthenticationCertificate
ApplicationGatewayAuthenticationCertificatePropertiesFormat
ApplicationGatewayAutoscaleConfiguration
ApplicationGatewayBackendAddress
ApplicationGatewayBackendAddressPool
ApplicationGatewayBackendAddressPoolPropertiesFormat
ApplicationGatewayBackendHttpSettings
ApplicationGatewayBackendHttpSettingsPropertiesFormat
ApplicationGatewayBackendSettings
ApplicationGatewayBackendSettingsPropertiesFormat
ApplicationGatewayClientAuthConfiguration
ApplicationGatewayConnectionDraining
ApplicationGatewayCustomError
ApplicationGatewayFirewallDisabledRuleGroup
ApplicationGatewayFirewallExclusion
ApplicationGatewayFrontendIPConfiguration
ApplicationGatewayFrontendIPConfigurationPropertiesFormat
ApplicationGatewayFrontendPort
ApplicationGatewayFrontendPortPropertiesFormat
ApplicationGatewayGlobalConfiguration
ApplicationGatewayHeaderConfiguration
ApplicationGatewayHttpListener
ApplicationGatewayHttpListenerPropertiesFormat
ApplicationGatewayIPConfiguration
ApplicationGatewayIPConfigurationPropertiesFormat
ApplicationGatewayListener
ApplicationGatewayListenerPropertiesFormat
ApplicationGatewayLoadDistributionPolicy
ApplicationGatewayLoadDistributionPolicyPropertiesFormat
ApplicationGatewayLoadDistributionTarget
ApplicationGatewayLoadDistributionTargetPropertiesFormat
ApplicationGatewayPathRule
ApplicationGatewayPathRulePropertiesFormat
ApplicationGatewayPrivateLinkConfiguration
ApplicationGatewayPrivateLinkConfigurationProperties
ApplicationGatewayPrivateLinkIpConfiguration
ApplicationGatewayPrivateLinkIpConfigurationProperties
ApplicationGatewayProbe
ApplicationGatewayProbeHealthResponseMatch
ApplicationGatewayProbePropertiesFormat
ApplicationGatewayPropertiesFormat
ApplicationGatewayRedirectConfiguration
ApplicationGatewayRedirectConfigurationPropertiesFormat
ApplicationGatewayRequestRoutingRule
ApplicationGatewayRequestRoutingRulePropertiesFormat
ApplicationGatewayRewriteRule
ApplicationGatewayRewriteRuleActionSet
ApplicationGatewayRewriteRuleCondition
ApplicationGatewayRewriteRuleSet
ApplicationGatewayRewriteRuleSetPropertiesFormat
ApplicationGatewayRoutingRule
ApplicationGatewayRoutingRulePropertiesFormat
ApplicationGatewaySku
ApplicationGatewaySslCertificate
ApplicationGatewaySslCertificatePropertiesFormat
ApplicationGatewaySslPolicy
ApplicationGatewaySslProfile
ApplicationGatewaySslProfilePropertiesFormat
ApplicationGatewayTrustedClientCertificate
ApplicationGatewayTrustedClientCertificatePropertiesFormat
ApplicationGatewayTrustedRootCertificate
ApplicationGatewayTrustedRootCertificatePropertiesFormat
ApplicationGatewayUrlConfiguration
ApplicationGatewayUrlPathMap
ApplicationGatewayUrlPathMapPropertiesFormat
ApplicationGatewayWebApplicationFirewallConfiguration
Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties
HeaderValueMatcher
ManagedServiceIdentity
ManagedServiceIdentityUserAssignedIdentities
Microsoft.Network/applicationGateways
ResourceTags
SubResource
Usage Examples
Azure Quickstart Templates
The followingAzure Quickstart templatesdeploy this resource type.
Terraform (AzAPI provider) resource definition
The applicationGateways resource type can be deployed with operations that target:
Resource groups
For a list of changed properties in each API version, seechange log.
Resource format
To create a Microsoft.Network/applicationGateways resource, add the following Terraform to your template.
resource "azapi_resource" "symbolicname" {
  type = "Microsoft.Network/applicationGateways@2024-05-01"
  name = "string"
  identity = {
    type = "string"
    userAssignedIdentities = {
      {customized property} = {
      }
    }
  }
  location = "string"
  tags = {
    {customized property} = "string"
  }
  body = {
    properties = {
      authenticationCertificates = [
        {
          id = "string"
          name = "string"
          properties = {
            data = "string"
          }
        }
      ]
      autoscaleConfiguration = {
        maxCapacity = int
        minCapacity = int
      }
      backendAddressPools = [
        {
          id = "string"
          name = "string"
          properties = {
            backendAddresses = [
              {
                fqdn = "string"
                ipAddress = "string"
              }
            ]
          }
        }
      ]
      backendHttpSettingsCollection = [
        {
          id = "string"
          name = "string"
          properties = {
            affinityCookieName = "string"
            authenticationCertificates = [
              {
                id = "string"
              }
            ]
            connectionDraining = {
              drainTimeoutInSec = int
              enabled = bool
            }
            cookieBasedAffinity = "string"
            hostName = "string"
            path = "string"
            pickHostNameFromBackendAddress = bool
            port = int
            probe = {
              id = "string"
            }
            probeEnabled = bool
            protocol = "string"
            requestTimeout = int
            trustedRootCertificates = [
              {
                id = "string"
              }
            ]
          }
        }
      ]
      backendSettingsCollection = [
        {
          id = "string"
          name = "string"
          properties = {
            hostName = "string"
            pickHostNameFromBackendAddress = bool
            port = int
            probe = {
              id = "string"
            }
            protocol = "string"
            timeout = int
            trustedRootCertificates = [
              {
                id = "string"
              }
            ]
          }
        }
      ]
      customErrorConfigurations = [
        {
          customErrorPageUrl = "string"
          statusCode = "string"
        }
      ]
      enableFips = bool
      enableHttp2 = bool
      firewallPolicy = {
        id = "string"
      }
      forceFirewallPolicyAssociation = bool
      frontendIPConfigurations = [
        {
          id = "string"
          name = "string"
          properties = {
            privateIPAddress = "string"
            privateIPAllocationMethod = "string"
            privateLinkConfiguration = {
              id = "string"
            }
            publicIPAddress = {
              id = "string"
            }
            subnet = {
              id = "string"
            }
          }
        }
      ]
      frontendPorts = [
        {
          id = "string"
          name = "string"
          properties = {
            port = int
          }
        }
      ]
      gatewayIPConfigurations = [
        {
          id = "string"
          name = "string"
          properties = {
            subnet = {
              id = "string"
            }
          }
        }
      ]
      globalConfiguration = {
        enableRequestBuffering = bool
        enableResponseBuffering = bool
      }
      httpListeners = [
        {
          id = "string"
          name = "string"
          properties = {
            customErrorConfigurations = [
              {
                customErrorPageUrl = "string"
                statusCode = "string"
              }
            ]
            firewallPolicy = {
              id = "string"
            }
            frontendIPConfiguration = {
              id = "string"
            }
            frontendPort = {
              id = "string"
            }
            hostName = "string"
            hostNames = [
              "string"
            ]
            protocol = "string"
            requireServerNameIndication = bool
            sslCertificate = {
              id = "string"
            }
            sslProfile = {
              id = "string"
            }
          }
        }
      ]
      listeners = [
        {
          id = "string"
          name = "string"
          properties = {
            frontendIPConfiguration = {
              id = "string"
            }
            frontendPort = {
              id = "string"
            }
            hostNames = [
              "string"
            ]
            protocol = "string"
            sslCertificate = {
              id = "string"
            }
            sslProfile = {
              id = "string"
            }
          }
        }
      ]
      loadDistributionPolicies = [
        {
          id = "string"
          name = "string"
          properties = {
            loadDistributionAlgorithm = "string"
            loadDistributionTargets = [
              {
                id = "string"
                name = "string"
                properties = {
                  backendAddressPool = {
                    id = "string"
                  }
                  weightPerServer = int
                }
              }
            ]
          }
        }
      ]
      privateLinkConfigurations = [
        {
          id = "string"
          name = "string"
          properties = {
            ipConfigurations = [
              {
                id = "string"
                name = "string"
                properties = {
                  primary = bool
                  privateIPAddress = "string"
                  privateIPAllocationMethod = "string"
                  subnet = {
                    id = "string"
                  }
                }
              }
            ]
          }
        }
      ]
      probes = [
        {
          id = "string"
          name = "string"
          properties = {
            host = "string"
            interval = int
            match = {
              body = "string"
              statusCodes = [
                "string"
              ]
            }
            minServers = int
            path = "string"
            pickHostNameFromBackendHttpSettings = bool
            pickHostNameFromBackendSettings = bool
            port = int
            protocol = "string"
            timeout = int
            unhealthyThreshold = int
          }
        }
      ]
      redirectConfigurations = [
        {
          id = "string"
          name = "string"
          properties = {
            includePath = bool
            includeQueryString = bool
            pathRules = [
              {
                id = "string"
              }
            ]
            redirectType = "string"
            requestRoutingRules = [
              {
                id = "string"
              }
            ]
            targetListener = {
              id = "string"
            }
            targetUrl = "string"
            urlPathMaps = [
              {
                id = "string"
              }
            ]
          }
        }
      ]
      requestRoutingRules = [
        {
          id = "string"
          name = "string"
          properties = {
            backendAddressPool = {
              id = "string"
            }
            backendHttpSettings = {
              id = "string"
            }
            httpListener = {
              id = "string"
            }
            loadDistributionPolicy = {
              id = "string"
            }
            priority = int
            redirectConfiguration = {
              id = "string"
            }
            rewriteRuleSet = {
              id = "string"
            }
            ruleType = "string"
            urlPathMap = {
              id = "string"
            }
          }
        }
      ]
      rewriteRuleSets = [
        {
          id = "string"
          name = "string"
          properties = {
            rewriteRules = [
              {
                actionSet = {
                  requestHeaderConfigurations = [
                    {
                      headerName = "string"
                      headerValue = "string"
                      headerValueMatcher = {
                        ignoreCase = bool
                        negate = bool
                        pattern = "string"
                      }
                    }
                  ]
                  responseHeaderConfigurations = [
                    {
                      headerName = "string"
                      headerValue = "string"
                      headerValueMatcher = {
                        ignoreCase = bool
                        negate = bool
                        pattern = "string"
                      }
                    }
                  ]
                  urlConfiguration = {
                    modifiedPath = "string"
                    modifiedQueryString = "string"
                    reroute = bool
                  }
                }
                conditions = [
                  {
                    ignoreCase = bool
                    negate = bool
                    pattern = "string"
                    variable = "string"
                  }
                ]
                name = "string"
                ruleSequence = int
              }
            ]
          }
        }
      ]
      routingRules = [
        {
          id = "string"
          name = "string"
          properties = {
            backendAddressPool = {
              id = "string"
            }
            backendSettings = {
              id = "string"
            }
            listener = {
              id = "string"
            }
            priority = int
            ruleType = "string"
          }
        }
      ]
      sku = {
        capacity = int
        family = "string"
        name = "string"
        tier = "string"
      }
      sslCertificates = [
        {
          id = "string"
          name = "string"
          properties = {
            data = "string"
            keyVaultSecretId = "string"
            password = "string"
          }
        }
      ]
      sslPolicy = {
        cipherSuites = [
          "string"
        ]
        disabledSslProtocols = [
          "string"
        ]
        minProtocolVersion = "string"
        policyName = "string"
        policyType = "string"
      }
      sslProfiles = [
        {
          id = "string"
          name = "string"
          properties = {
            clientAuthConfiguration = {
              verifyClientCertIssuerDN = bool
              verifyClientRevocation = "string"
            }
            sslPolicy = {
              cipherSuites = [
                "string"
              ]
              disabledSslProtocols = [
                "string"
              ]
              minProtocolVersion = "string"
              policyName = "string"
              policyType = "string"
            }
            trustedClientCertificates = [
              {
                id = "string"
              }
            ]
          }
        }
      ]
      trustedClientCertificates = [
        {
          id = "string"
          name = "string"
          properties = {
            data = "string"
          }
        }
      ]
      trustedRootCertificates = [
        {
          id = "string"
          name = "string"
          properties = {
            data = "string"
            keyVaultSecretId = "string"
          }
        }
      ]
      urlPathMaps = [
        {
          id = "string"
          name = "string"
          properties = {
            defaultBackendAddressPool = {
              id = "string"
            }
            defaultBackendHttpSettings = {
              id = "string"
            }
            defaultLoadDistributionPolicy = {
              id = "string"
            }
            defaultRedirectConfiguration = {
              id = "string"
            }
            defaultRewriteRuleSet = {
              id = "string"
            }
            pathRules = [
              {
                id = "string"
                name = "string"
                properties = {
                  backendAddressPool = {
                    id = "string"
                  }
                  backendHttpSettings = {
                    id = "string"
                  }
                  firewallPolicy = {
                    id = "string"
                  }
                  loadDistributionPolicy = {
                    id = "string"
                  }
                  paths = [
                    "string"
                  ]
                  redirectConfiguration = {
                    id = "string"
                  }
                  rewriteRuleSet = {
                    id = "string"
                  }
                }
              }
            ]
          }
        }
      ]
      webApplicationFirewallConfiguration = {
        disabledRuleGroups = [
          {
            ruleGroupName = "string"
            rules = [
              int
            ]
          }
        ]
        enabled = bool
        exclusions = [
          {
            matchVariable = "string"
            selector = "string"
            selectorMatchOperator = "string"
          }
        ]
        fileUploadLimitInMb = int
        firewallMode = "string"
        maxRequestBodySize = int
        maxRequestBodySizeInKb = int
        requestBodyCheck = bool
        ruleSetType = "string"
        ruleSetVersion = "string"
      }
    }
    zones = [
      "string"
    ]
  }
}
resource "azapi_resource" "symbolicname" {
  type = "Microsoft.Network/applicationGateways@2024-05-01"
  name = "string"
  identity = {
    type = "string"
    userAssignedIdentities = {
      {customized property} = {
      }
    }
  }
  location = "string"
  tags = {
    {customized property} = "string"
  }
  body = {
    properties = {
      authenticationCertificates = [
        {
          id = "string"
          name = "string"
          properties = {
            data = "string"
          }
        }
      ]
      autoscaleConfiguration = {
        maxCapacity = int
        minCapacity = int
      }
      backendAddressPools = [
        {
          id = "string"
          name = "string"
          properties = {
            backendAddresses = [
              {
                fqdn = "string"
                ipAddress = "string"
              }
            ]
          }
        }
      ]
      backendHttpSettingsCollection = [
        {
          id = "string"
          name = "string"
          properties = {
            affinityCookieName = "string"
            authenticationCertificates = [
              {
                id = "string"
              }
            ]
            connectionDraining = {
              drainTimeoutInSec = int
              enabled = bool
            }
            cookieBasedAffinity = "string"
            hostName = "string"
            path = "string"
            pickHostNameFromBackendAddress = bool
            port = int
            probe = {
              id = "string"
            }
            probeEnabled = bool
            protocol = "string"
            requestTimeout = int
            trustedRootCertificates = [
              {
                id = "string"
              }
            ]
          }
        }
      ]
      backendSettingsCollection = [
        {
          id = "string"
          name = "string"
          properties = {
            hostName = "string"
            pickHostNameFromBackendAddress = bool
            port = int
            probe = {
              id = "string"
            }
            protocol = "string"
            timeout = int
            trustedRootCertificates = [
              {
                id = "string"
              }
            ]
          }
        }
      ]
      customErrorConfigurations = [
        {
          customErrorPageUrl = "string"
          statusCode = "string"
        }
      ]
      enableFips = bool
      enableHttp2 = bool
      firewallPolicy = {
        id = "string"
      }
      forceFirewallPolicyAssociation = bool
      frontendIPConfigurations = [
        {
          id = "string"
          name = "string"
          properties = {
            privateIPAddress = "string"
            privateIPAllocationMethod = "string"
            privateLinkConfiguration = {
              id = "string"
            }
            publicIPAddress = {
              id = "string"
            }
            subnet = {
              id = "string"
            }
          }
        }
      ]
      frontendPorts = [
        {
          id = "string"
          name = "string"
          properties = {
            port = int
          }
        }
      ]
      gatewayIPConfigurations = [
        {
          id = "string"
          name = "string"
          properties = {
            subnet = {
              id = "string"
            }
          }
        }
      ]
      globalConfiguration = {
        enableRequestBuffering = bool
        enableResponseBuffering = bool
      }
      httpListeners = [
        {
          id = "string"
          name = "string"
          properties = {
            customErrorConfigurations = [
              {
                customErrorPageUrl = "string"
                statusCode = "string"
              }
            ]
            firewallPolicy = {
              id = "string"
            }
            frontendIPConfiguration = {
              id = "string"
            }
            frontendPort = {
              id = "string"
            }
            hostName = "string"
            hostNames = [
              "string"
            ]
            protocol = "string"
            requireServerNameIndication = bool
            sslCertificate = {
              id = "string"
            }
            sslProfile = {
              id = "string"
            }
          }
        }
      ]
      listeners = [
        {
          id = "string"
          name = "string"
          properties = {
            frontendIPConfiguration = {
              id = "string"
            }
            frontendPort = {
              id = "string"
            }
            hostNames = [
              "string"
            ]
            protocol = "string"
            sslCertificate = {
              id = "string"
            }
            sslProfile = {
              id = "string"
            }
          }
        }
      ]
      loadDistributionPolicies = [
        {
          id = "string"
          name = "string"
          properties = {
            loadDistributionAlgorithm = "string"
            loadDistributionTargets = [
              {
                id = "string"
                name = "string"
                properties = {
                  backendAddressPool = {
                    id = "string"
                  }
                  weightPerServer = int
                }
              }
            ]
          }
        }
      ]
      privateLinkConfigurations = [
        {
          id = "string"
          name = "string"
          properties = {
            ipConfigurations = [
              {
                id = "string"
                name = "string"
                properties = {
                  primary = bool
                  privateIPAddress = "string"
                  privateIPAllocationMethod = "string"
                  subnet = {
                    id = "string"
                  }
                }
              }
            ]
          }
        }
      ]
      probes = [
        {
          id = "string"
          name = "string"
          properties = {
            host = "string"
            interval = int
            match = {
              body = "string"
              statusCodes = [
                "string"
              ]
            }
            minServers = int
            path = "string"
            pickHostNameFromBackendHttpSettings = bool
            pickHostNameFromBackendSettings = bool
            port = int
            protocol = "string"
            timeout = int
            unhealthyThreshold = int
          }
        }
      ]
      redirectConfigurations = [
        {
          id = "string"
          name = "string"
          properties = {
            includePath = bool
            includeQueryString = bool
            pathRules = [
              {
                id = "string"
              }
            ]
            redirectType = "string"
            requestRoutingRules = [
              {
                id = "string"
              }
            ]
            targetListener = {
              id = "string"
            }
            targetUrl = "string"
            urlPathMaps = [
              {
                id = "string"
              }
            ]
          }
        }
      ]
      requestRoutingRules = [
        {
          id = "string"
          name = "string"
          properties = {
            backendAddressPool = {
              id = "string"
            }
            backendHttpSettings = {
              id = "string"
            }
            httpListener = {
              id = "string"
            }
            loadDistributionPolicy = {
              id = "string"
            }
            priority = int
            redirectConfiguration = {
              id = "string"
            }
            rewriteRuleSet = {
              id = "string"
            }
            ruleType = "string"
            urlPathMap = {
              id = "string"
            }
          }
        }
      ]
      rewriteRuleSets = [
        {
          id = "string"
          name = "string"
          properties = {
            rewriteRules = [
              {
                actionSet = {
                  requestHeaderConfigurations = [
                    {
                      headerName = "string"
                      headerValue = "string"
                      headerValueMatcher = {
                        ignoreCase = bool
                        negate = bool
                        pattern = "string"
                      }
                    }
                  ]
                  responseHeaderConfigurations = [
                    {
                      headerName = "string"
                      headerValue = "string"
                      headerValueMatcher = {
                        ignoreCase = bool
                        negate = bool
                        pattern = "string"
                      }
                    }
                  ]
                  urlConfiguration = {
                    modifiedPath = "string"
                    modifiedQueryString = "string"
                    reroute = bool
                  }
                }
                conditions = [
                  {
                    ignoreCase = bool
                    negate = bool
                    pattern = "string"
                    variable = "string"
                  }
                ]
                name = "string"
                ruleSequence = int
              }
            ]
          }
        }
      ]
      routingRules = [
        {
          id = "string"
          name = "string"
          properties = {
            backendAddressPool = {
              id = "string"
            }
            backendSettings = {
              id = "string"
            }
            listener = {
              id = "string"
            }
            priority = int
            ruleType = "string"
          }
        }
      ]
      sku = {
        capacity = int
        family = "string"
        name = "string"
        tier = "string"
      }
      sslCertificates = [
        {
          id = "string"
          name = "string"
          properties = {
            data = "string"
            keyVaultSecretId = "string"
            password = "string"
          }
        }
      ]
      sslPolicy = {
        cipherSuites = [
          "string"
        ]
        disabledSslProtocols = [
          "string"
        ]
        minProtocolVersion = "string"
        policyName = "string"
        policyType = "string"
      }
      sslProfiles = [
        {
          id = "string"
          name = "string"
          properties = {
            clientAuthConfiguration = {
              verifyClientCertIssuerDN = bool
              verifyClientRevocation = "string"
            }
            sslPolicy = {
              cipherSuites = [
                "string"
              ]
              disabledSslProtocols = [
                "string"
              ]
              minProtocolVersion = "string"
              policyName = "string"
              policyType = "string"
            }
            trustedClientCertificates = [
              {
                id = "string"
              }
            ]
          }
        }
      ]
      trustedClientCertificates = [
        {
          id = "string"
          name = "string"
          properties = {
            data = "string"
          }
        }
      ]
      trustedRootCertificates = [
        {
          id = "string"
          name = "string"
          properties = {
            data = "string"
            keyVaultSecretId = "string"
          }
        }
      ]
      urlPathMaps = [
        {
          id = "string"
          name = "string"
          properties = {
            defaultBackendAddressPool = {
              id = "string"
            }
            defaultBackendHttpSettings = {
              id = "string"
            }
            defaultLoadDistributionPolicy = {
              id = "string"
            }
            defaultRedirectConfiguration = {
              id = "string"
            }
            defaultRewriteRuleSet = {
              id = "string"
            }
            pathRules = [
              {
                id = "string"
                name = "string"
                properties = {
                  backendAddressPool = {
                    id = "string"
                  }
                  backendHttpSettings = {
                    id = "string"
                  }
                  firewallPolicy = {
                    id = "string"
                  }
                  loadDistributionPolicy = {
                    id = "string"
                  }
                  paths = [
                    "string"
                  ]
                  redirectConfiguration = {
                    id = "string"
                  }
                  rewriteRuleSet = {
                    id = "string"
                  }
                }
              }
            ]
          }
        }
      ]
      webApplicationFirewallConfiguration = {
        disabledRuleGroups = [
          {
            ruleGroupName = "string"
            rules = [
              int
            ]
          }
        ]
        enabled = bool
        exclusions = [
          {
            matchVariable = "string"
            selector = "string"
            selectorMatchOperator = "string"
          }
        ]
        fileUploadLimitInMb = int
        firewallMode = "string"
        maxRequestBodySize = int
        maxRequestBodySizeInKb = int
        requestBodyCheck = bool
        ruleSetType = "string"
        ruleSetVersion = "string"
      }
    }
    zones = [
      "string"
    ]
  }
}
Property Values
ApplicationGatewayAuthenticationCertificate
ApplicationGatewayAuthenticationCertificatePropertiesFormat
ApplicationGatewayAutoscaleConfiguration
ApplicationGatewayBackendAddress
ApplicationGatewayBackendAddressPool
ApplicationGatewayBackendAddressPoolPropertiesFormat
ApplicationGatewayBackendHttpSettings
ApplicationGatewayBackendHttpSettingsPropertiesFormat
ApplicationGatewayBackendSettings
ApplicationGatewayBackendSettingsPropertiesFormat
ApplicationGatewayClientAuthConfiguration
ApplicationGatewayConnectionDraining
ApplicationGatewayCustomError
ApplicationGatewayFirewallDisabledRuleGroup
ApplicationGatewayFirewallExclusion
ApplicationGatewayFrontendIPConfiguration
ApplicationGatewayFrontendIPConfigurationPropertiesFormat
ApplicationGatewayFrontendPort
ApplicationGatewayFrontendPortPropertiesFormat
ApplicationGatewayGlobalConfiguration
ApplicationGatewayHeaderConfiguration
ApplicationGatewayHttpListener
ApplicationGatewayHttpListenerPropertiesFormat
ApplicationGatewayIPConfiguration
ApplicationGatewayIPConfigurationPropertiesFormat
ApplicationGatewayListener
ApplicationGatewayListenerPropertiesFormat
ApplicationGatewayLoadDistributionPolicy
ApplicationGatewayLoadDistributionPolicyPropertiesFormat
ApplicationGatewayLoadDistributionTarget
ApplicationGatewayLoadDistributionTargetPropertiesFormat
ApplicationGatewayPathRule
ApplicationGatewayPathRulePropertiesFormat
ApplicationGatewayPrivateLinkConfiguration
ApplicationGatewayPrivateLinkConfigurationProperties
ApplicationGatewayPrivateLinkIpConfiguration
ApplicationGatewayPrivateLinkIpConfigurationProperties
ApplicationGatewayProbe
ApplicationGatewayProbeHealthResponseMatch
ApplicationGatewayProbePropertiesFormat
ApplicationGatewayPropertiesFormat
ApplicationGatewayRedirectConfiguration
ApplicationGatewayRedirectConfigurationPropertiesFormat
ApplicationGatewayRequestRoutingRule
ApplicationGatewayRequestRoutingRulePropertiesFormat
ApplicationGatewayRewriteRule
ApplicationGatewayRewriteRuleActionSet
ApplicationGatewayRewriteRuleCondition
ApplicationGatewayRewriteRuleSet
ApplicationGatewayRewriteRuleSetPropertiesFormat
ApplicationGatewayRoutingRule
ApplicationGatewayRoutingRulePropertiesFormat
ApplicationGatewaySku
ApplicationGatewaySslCertificate
ApplicationGatewaySslCertificatePropertiesFormat
ApplicationGatewaySslPolicy
ApplicationGatewaySslProfile
ApplicationGatewaySslProfilePropertiesFormat
ApplicationGatewayTrustedClientCertificate
ApplicationGatewayTrustedClientCertificatePropertiesFormat
ApplicationGatewayTrustedRootCertificate
ApplicationGatewayTrustedRootCertificatePropertiesFormat
ApplicationGatewayUrlConfiguration
ApplicationGatewayUrlPathMap
ApplicationGatewayUrlPathMapPropertiesFormat
ApplicationGatewayWebApplicationFirewallConfiguration
Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties
HeaderValueMatcher
ManagedServiceIdentity
ManagedServiceIdentityUserAssignedIdentities
Microsoft.Network/applicationGateways
ResourceTags
SubResource
Usage Examples
Azure Verified Modules
The followingAzure Verified Modulescan be used to deploy this resource type.
Feedback
Was this page helpful?
Additional resources