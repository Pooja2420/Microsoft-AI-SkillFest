Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Secret management
Article
2025-04-17
7 contributors
In this article
When accessing external data sources through JDBC, authentication is often required. Rather than entering credentials directly into notebooks, you can securely store credentials using Databricks secrets and reference them in your notebooks and jobs. This approach enhances security and simplifies credential management. This page provides an overview of Databricks secrets.
Note
Databricks recommends using Unity Catalog to configure access to data in cloud storage. SeeConnect to cloud object storage and services using Unity Catalog.
Secrets overview
To configure and use secrets you:
Create a secret scope. A secret scope is collection of secrets identified by a name.
Add secrets to the scope
Assign permissions on the secret scope.
Reference secrets in your code.
For an end-to-end example of how to use secrets in your workflows, seeTutorial: Create and use a Databricks secret. To use a secret in a Spark configuration property or environment variable, seeUse a secret in a Spark configuration property or environment variable.
Warning
Workspace admins, secret creators, and users who have been granted permission can access and read Databricks secrets. Although Databricks attempts to redact secret values in notebook outputs, it is not possible to fully prevent these users from viewing secret contents. Always assign secret access permissions carefully to protect sensitive information.
Manage secret scopes
A secret scope is collection of secrets identified by a name. Databricks recommends aligning secret scopes to roles or applications rather than individuals.
There are two types of secret scope:
Azure Key Vault-backed: You can reference secrets stored in anAzure Key Vaultusing Azure Key Vault-backed secret scopes. Azure Key Vault-backed secret scope is a read-only interface to the Key Vault. You must manage secrets in Azure Key Vault-backed secret scopes in Azure.
Databricks-backed: A Databricks-backed secret scope is stored in an encrypted database owned and managed by Azure Databricks.
After creating a secret scope, you can assign permissions to grant users access to read, write, and manage secret scopes.
Create an Azure Key Vault-backed secret scope
This section describes how to create an Azure Key Vault-backed secret scope using the Azure portal and the Azure Databricks workspace UI. You can also create an Azure Key Vault-backed secret scope using theDatabricks CLI.
You must have an Azure key vault instance. If you do not have a key vault instance, follow the instructions inCreate a Key Vault using the Azure portal.
You must have the Key Vault Contributor, Contributor, or Owner role on the Azure key vault instance that you want to use to back the secret scope.
Note
Creating an Azure Key Vault-backed secret scope requires the Contributor or Owner role on the Azure key vault instance even if the Azure Databricks service has previously been granted access to the key vault.
If the key vault exists in a different tenant than the Azure Databricks workspace, the Azure AD user who creates the secret scope must havepermission to create service principalsin the key vaultâs tenant. Otherwise, the following error occurs:
Unable to grant read/list permission to Databricks service principal to KeyVault 'https://xxxxx.vault.azure.net/': Status code 403, {"odata.error":{"code":"Authorization_RequestDenied","message":{"lang":"en","value":"Insufficient privileges to complete the operation."},"requestId":"XXXXX","date":"YYYY-MM-DDTHH:MM:SS"}}
Unable to grant read/list permission to Databricks service principal to KeyVault 'https://xxxxx.vault.azure.net/': Status code 403, {"odata.error":{"code":"Authorization_RequestDenied","message":{"lang":"en","value":"Insufficient privileges to complete the operation."},"requestId":"XXXXX","date":"YYYY-MM-DDTHH:MM:SS"}}
Log in to the Azure Portal, find and select the Azure key vault instance.
Log in to the Azure Portal, find and select the Azure key vault instance.
UnderSettings, click theAccess configurationtab.
UnderSettings, click theAccess configurationtab.
SetPermission modeltoVault access policy.NoteCreating an Azure Key Vault-backed secret scope role grants theGetandListpermissions to the application ID for the Azure Databricks service using key vault access policies. The Azure role-based access control permission model is not supported with Azure Databricks.
SetPermission modeltoVault access policy.
Note
Creating an Azure Key Vault-backed secret scope role grants theGetandListpermissions to the application ID for the Azure Databricks service using key vault access policies. The Azure role-based access control permission model is not supported with Azure Databricks.
UnderSettings, selectNetworking.
UnderSettings, selectNetworking.
InFirewalls and virtual networkssetAllow access from:toAllow public access from specific virtual networks and IP addresses.UnderException, checkAllow trusted Microsoft services to bypass this firewall.NoteYou can also setAllow access from:toAllow public access from all networks.
InFirewalls and virtual networkssetAllow access from:toAllow public access from specific virtual networks and IP addresses.
UnderException, checkAllow trusted Microsoft services to bypass this firewall.
Note
You can also setAllow access from:toAllow public access from all networks.
Go tohttps://<databricks-instance>#secrets/createScope. Replace<databricks-instance>with theworkspace URLof your Azure Databricks deployment. This URL is case sensitive. For example,scopeincreateScopemust use an uppercaseS).
Go tohttps://<databricks-instance>#secrets/createScope. Replace<databricks-instance>with theworkspace URLof your Azure Databricks deployment. This URL is case sensitive. For example,scopeincreateScopemust use an uppercaseS).
https://<databricks-instance>#secrets/createScope
<databricks-instance>
scope
createScope
S

Enter the name of the secret scope. Secret scope names are case insensitive.
Enter the name of the secret scope. Secret scope names are case insensitive.
InManage PrincipalselectCreatororAll workspace usersto specify which users have the MANAGE permission on the secret scope.The MANAGE permission allows users to read, write, and grant permissions on the scope. Your account must have thePremium planto chooseCreator.
InManage PrincipalselectCreatororAll workspace usersto specify which users have the MANAGE permission on the secret scope.
The MANAGE permission allows users to read, write, and grant permissions on the scope. Your account must have thePremium planto chooseCreator.
Enter theDNS Name(for example,https://databrickskv.vault.azure.net/) andResource ID, for example:/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourcegroups/databricks-rg/providers/Microsoft.KeyVault/vaults/databricksKVThese properties are available from theSettings > Propertiestab of an Azure Key Vault in your Azure portal.
Enter theDNS Name(for example,https://databrickskv.vault.azure.net/) andResource ID, for example:
https://databrickskv.vault.azure.net/
/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourcegroups/databricks-rg/providers/Microsoft.KeyVault/vaults/databricksKV
/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourcegroups/databricks-rg/providers/Microsoft.KeyVault/vaults/databricksKV
These properties are available from theSettings > Propertiestab of an Azure Key Vault in your Azure portal.
ClickCreate.
ClickCreate.
Use theDatabricks CLIdatabricks secrets list-scopescommand to verify that the scope was created successfully.
Use theDatabricks CLIdatabricks secrets list-scopescommand to verify that the scope was created successfully.
databricks secrets list-scopes
Create a Databricks-backed secret scope
This section describes how to create a secret scope using theDatabricks CLI(version 0.205 and above). You can also use theSecrets API.
Secret scope names:
Must be unique within a workspace.
Must consist of alphanumeric characters, dashes, underscores,@, and periods, and can not exceed 128 characters.
@
Are case insensitive.
Secret scope names are considered non-sensitive and are readable by all users in the workspace.
To create a scope using the Databricks CLI:
databricks secrets create-scope <scope-name>
databricks secrets create-scope <scope-name>
By default, scopes are created with MANAGE permission for the user who created the scope. After you have created a Databricks-backed secret scope, you can add secrets to it.
List secret scopes
To list the existing scopes in a workspace using the CLI:
databricks secrets list-scopes
databricks secrets list-scopes
You can also list secret scopes using theSecrets API.
Delete a secret scope
Deleting a secret scope deletes all secrets and ACLs applied to the scope. To delete a scope using the CLI, run the following:
databricks secrets delete-scope <scope-name>
databricks secrets delete-scope <scope-name>
You can also delete a secret scope using theSecrets API.
Manage secrets
A secret is a key-value pair that stores sensitive material using a key name that is unique within a secret scope.
This section describes how to create a secret scope using theDatabricks CLI(version 0.205 and above). You can also use theSecrets API. Secret names are case insensitive.
Create a secret
The method for creating a secret depends on whether you are using an Azure Key Vault-backed scope or a Databricks-backed scope.
To create a secret in Azure Key Vault you use the Azure portal or AzureSet SecretREST API. For an example, seeStep 4: Add the client secret to Azure Key Vault.
Create a secret in a Databricks-backed scope
This section describes how to create a secret using theDatabricks CLI(version 0.205 and above) or in a notebook using theDatabricks SDK for Python. You can also use theSecrets API. Secret names are case insensitive.
When you create a secret in a Databricks-backed scope, you can specify the secret value in one of three ways:
Specify the value as a string using the âstring-value flag.
Input the secret when prompted interactively (single-line secrets).
Pass the secret using standard input (multi-line secrets).
For example:
databricks secrets put-secret --json '{
  "scope": "<scope-name>",
  "key": "<key-name>",
  "string_value": "<secret>"
}'
databricks secrets put-secret --json '{
  "scope": "<scope-name>",
  "key": "<key-name>",
  "string_value": "<secret>"
}'
If you are creating a multi-line secret, you can pass the secret using standard input. For example:
(cat << EOF
this
is
a
multi
line
secret
EOF
) | databricks secrets put-secret <scope-name> <key-name>
(cat << EOF
this
is
a
multi
line
secret
EOF
) | databricks secrets put-secret <scope-name> <key-name>
from databricks.sdk import WorkspaceClient

w = WorkspaceClient()

w.secrets.put_secret("<secret_scope>","<key-name>",string_value ="<secret>")
from databricks.sdk import WorkspaceClient

w = WorkspaceClient()

w.secrets.put_secret("<secret_scope>","<key-name>",string_value ="<secret>")
Read a secret
This section describes how to read a secret using theDatabricks CLI(version 0.205 and above) or in a notebook usingSecrets utility (dbutils.secrets).
In order to read the value of a secret using the Databricks CLI, you must decode the base64 encoded value. You can usejqto extract the value andbase --decodeto decode it:
jq
base --decode
databricks secrets get-secret <scope-name> <key-name> | jq -r .value | base64 --decode
databricks secrets get-secret <scope-name> <key-name> | jq -r .value | base64 --decode
password = dbutils.secrets.get(scope = "<scope-name>", key = "<key-name>")
password = dbutils.secrets.get(scope = "<scope-name>", key = "<key-name>")
List secrets
To list secrets in a given scope:
databricks secrets list-secrets <scope-name>
databricks secrets list-secrets <scope-name>
The response displays metadata information about the secrets, such as the secretsâ key names. You use theSecrets utility (dbutils.secrets)in a notebook or job to list this metadata. For example:
dbutils.secrets.list('my-scope')
dbutils.secrets.list('my-scope')
Delete a secret
To delete a secret from a scope with the Databricks CLI:
databricks secrets delete-secret <scope-name> <key-name>
databricks secrets delete-secret <scope-name> <key-name>
You can also use theSecrets API.
To delete a secret from a scope backed by Azure Key Vault, use the AzureSetSecretREST API or Azure portal UI.
Manage secret scope permissions
By default, the user that creates the secret scopes is granted the MANAGE permission. This allows the scope creator to read secrets in the scope, write secrets to the scope, and manage permissions on the scope.
Note
Secret ACLs are at the scope level. If you use Azure Key Vault-backed scopes, users that are granted access to the scope have access to all secrets in the Azure Key Vault. To restrict access, use separate Azure key vault instances.
This section describes how to manage secret access control using theDatabricks CLI(version 0.205 and above). You can also use theSecrets API. For secret permission levels, seeSecret ACLs
Grant a user permissions on a secret scope
To grant a user permissions on a secret scope using the Databricks CLI:
databricks secrets put-acl <scope-name> <principal> <permission>
databricks secrets put-acl <scope-name> <principal> <permission>
Making a put request for a principal that already has an applied permission overwrites the existing permission level.
Theprincipalfield specifies an existing Azure Databricks principal. A user is specified using their email address, a service principal using itsapplicationIdvalue, and a group using its group name. For more information, seePrincipal.
principal
applicationId
View secret scope permissions
To view all secret scope permissions for a given secret scope:
databricks secrets list-acls <scope-name>
databricks secrets list-acls <scope-name>
To get the secret scope permissions applied to a principal for a given secret scope:
databricks secrets get-acl <scope-name> <principal>
databricks secrets get-acl <scope-name> <principal>
If no ACL exists for the given principal and scope, this request fails.
Delete a secret scope permission
To delete a secret scope permission applied to a principal for a given secret scope:
databricks secrets delete-acl <scope-name> <principal>
databricks secrets delete-acl <scope-name> <principal>
Secret redaction
Storing credentials as Azure Databricks secrets makes it easy to protect your credentials when you run notebooks and jobs. However, it is easy to accidentally print a secret to standard output buffers or display the value during variable assignment.
To prevent this, Azure Databricks redacts all secret values that are read usingdbutils.secrets.get(). When displayed in notebook cell output, the secret values are replaced with[REDACTED].
dbutils.secrets.get()
[REDACTED]
For example, if you set a variable to a secret value usingdbutils.secrets.get()and then print that variable, that variable is replaced with[REDACTED].
dbutils.secrets.get()
[REDACTED]
Warning
Secret redaction for notebook cell output applies only to literals. The secret redaction functionality does not prevent deliberate and arbitrary transformations of a secret literal. To ensure the proper control of secrets, you should useaccess control liststo limit permissions to run commands. This prevents unauthorized access to shared notebook contexts.
Feedback
Was this page helpful?
Additional resources