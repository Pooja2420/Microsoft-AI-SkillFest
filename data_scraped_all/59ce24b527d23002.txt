Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Azure Policy initiative definition structure
Article
2025-03-04
7 contributors
In this article
Initiatives enable you to group several related policy definitions to simplify assignments and
management because you work with a group as a single item. For example, you can group related
tagging policy definitions into a single initiative. Rather than assigning each policy individually,
you apply the initiative.
You use JSON to create a policy initiative definition. The policy initiative definition contains
elements for:
display name
description
metadata
version
parameters
policy definitions
policy groups (this property is part of theRegulatory Compliance (Preview) feature)
The following example illustrates how to create an initiative for handling two tags:costCenterandproductName. It uses two built-in policies to apply the default tag value.
costCenter
productName
{
    "properties": {
        "displayName": "Billing Tags Policy",
        "policyType": "Custom",
        "description": "Specify cost Center tag and product name tag",
        "version" : "1.0.0",
        "metadata": {
            "version": "1.0.0",
            "category": "Tags"
        },
        "parameters": {
            "costCenterValue": {
                "type": "String",
                "metadata": {
                    "description": "required value for Cost Center tag"
                },
                "defaultValue": "DefaultCostCenter"
            },
            "productNameValue": {
                "type": "String",
                "metadata": {
                    "description": "required value for product Name tag"
                },
                "defaultValue": "DefaultProduct"
            }
        },
        "policyDefinitions": [{
                "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/1e30110a-5ceb-460c-a204-c1c3969c6d62",
                "definitionVersion": "1.*.*"
                "parameters": {
                    "tagName": {
                        "value": "costCenter"
                    },
                    "tagValue": {
                        "value": "[parameters('costCenterValue')]"
                    }
                }
            },
            {
                "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/2a0e14a6-b0a6-4fab-991a-187a4f81c498",
                "parameters": {
                    "tagName": {
                        "value": "costCenter"
                    },
                    "tagValue": {
                        "value": "[parameters('costCenterValue')]"
                    }
                }
            },
            {
                "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/1e30110a-5ceb-460c-a204-c1c3969c6d62",
                "parameters": {
                    "tagName": {
                        "value": "productName"
                    },
                    "tagValue": {
                        "value": "[parameters('productNameValue')]"
                    }
                }
            },
            {
                "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/2a0e14a6-b0a6-4fab-991a-187a4f81c498",
                "parameters": {
                    "tagName": {
                        "value": "productName"
                    },
                    "tagValue": {
                        "value": "[parameters('productNameValue')]"
                    }
                }
            }
        ]
    }
}
{
    "properties": {
        "displayName": "Billing Tags Policy",
        "policyType": "Custom",
        "description": "Specify cost Center tag and product name tag",
        "version" : "1.0.0",
        "metadata": {
            "version": "1.0.0",
            "category": "Tags"
        },
        "parameters": {
            "costCenterValue": {
                "type": "String",
                "metadata": {
                    "description": "required value for Cost Center tag"
                },
                "defaultValue": "DefaultCostCenter"
            },
            "productNameValue": {
                "type": "String",
                "metadata": {
                    "description": "required value for product Name tag"
                },
                "defaultValue": "DefaultProduct"
            }
        },
        "policyDefinitions": [{
                "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/1e30110a-5ceb-460c-a204-c1c3969c6d62",
                "definitionVersion": "1.*.*"
                "parameters": {
                    "tagName": {
                        "value": "costCenter"
                    },
                    "tagValue": {
                        "value": "[parameters('costCenterValue')]"
                    }
                }
            },
            {
                "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/2a0e14a6-b0a6-4fab-991a-187a4f81c498",
                "parameters": {
                    "tagName": {
                        "value": "costCenter"
                    },
                    "tagValue": {
                        "value": "[parameters('costCenterValue')]"
                    }
                }
            },
            {
                "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/1e30110a-5ceb-460c-a204-c1c3969c6d62",
                "parameters": {
                    "tagName": {
                        "value": "productName"
                    },
                    "tagValue": {
                        "value": "[parameters('productNameValue')]"
                    }
                }
            },
            {
                "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/2a0e14a6-b0a6-4fab-991a-187a4f81c498",
                "parameters": {
                    "tagName": {
                        "value": "productName"
                    },
                    "tagValue": {
                        "value": "[parameters('productNameValue')]"
                    }
                }
            }
        ]
    }
}
Azure Policy built-ins and patterns are atAzure Policy samples.
Metadata
The optionalmetadataproperty stores information about the policy initiative definition.
Customers can define any properties and values useful to their organization inmetadata. However,
there are somecommonproperties used by Azure Policy and in built-ins.
metadata
metadata
Common metadata properties
version(string): Tracks details about the version of the contents of a policy initiative
definition. For built-ins, this metadata version follows the version property of the built-in. It's recommended to use the version property over this metadata version.
version(string): Tracks details about the version of the contents of a policy initiative
definition. For built-ins, this metadata version follows the version property of the built-in. It's recommended to use the version property over this metadata version.
version
category(string): Determines under which category in the Azure portal the policy definition is
displayed.NoteFor aRegulatory Complianceinitiative, thecategorymust beRegulatory Compliance.
category(string): Determines under which category in the Azure portal the policy definition is
displayed.
category
Note
For aRegulatory Complianceinitiative, thecategorymust beRegulatory Compliance.
category
preview(boolean): True or false flag for if the policy initiative definition ispreview.
preview(boolean): True or false flag for if the policy initiative definition ispreview.
preview
deprecated(boolean): True or false flag for if the policy initiative definition has been marked
asdeprecated.
deprecated(boolean): True or false flag for if the policy initiative definition has been marked
asdeprecated.
deprecated
Version (preview)
Built-in policy initiatives can host multiple versions with the samedefinitionID. If no version number is specified, all experiences will show the latest version of the definition. To see a specific version of a built-in, it must be specified in API, SDK or UI. To reference a specific version of a definition within an assignment, seedefinition version within assignment
definitionID
The Azure Policy service usesversion,preview, anddeprecatedproperties to convey state and level of change to a built-in policy definition or initiative. The format ofversionis:{Major}.{Minor}.{Patch}. When a policy definition is in preview state, the suffixpreviewis appended to theversionproperty and treated as aboolean. When a policy definition is deprecated, the deprecation is captured as a boolean in the definition's metadata using"deprecated": "true".
version
preview
deprecated
version
{Major}.{Minor}.{Patch}
version
"deprecated": "true"
Major Version (example: 2.0.0): introduce breaking changes such as major rule logic changes, removing parameters, adding an enforcement effect by default.
Minor Version (example: 2.1.0): introduce changes such as minor rule logic changes, adding new parameter allowed values, change to role definitionIds, adding or removing definitions within an initiative.
Patch Version (example: 2.1.4): introduce string or metadata changes and break glass security scenarios (rare).
Built-in initiatives are versioned, and specific versions of built-in policy definitions can be referenced within built-in or custom initiatives as well. For more information, seereference definition and versions.
While in preview, when creating an initiative through the portal, you will not be able to specify versions for built-in policy definition references. All built-in policy references in custom initiatives created through the portal will instead default to the latest version of the policy definition.
For more information about
Azure Policy versions built-ins, seeBuilt-in versioning.
To learn more about what it means for a policy to bedeprecatedor inpreview, seePreview and deprecated policies.
Parameters
Parameters help simplify your policy management by reducing the number of policy definitions. Think
of parameters like the fields on a form -name,address,city,state. These parameters
always stay the same, however their values change based on the individual filling out the form.
Parameters work the same way when building policy initiatives. By including parameters in a policy
initiative definition, you can reuse that parameter in the included policies.
name
address
city
state
Note
Once an initiative is assigned, initiative level parameters can't be altered. Due to this, the
recommendation is to set adefaultValuewhen defining the parameter.
Parameter properties
A parameter has the following properties that are used in the policy initiative definition:
name: The name of your parameter. Used by theparametersdeployment function within the policy
rule. For more information, seeusing a parameter value.
name
parameters
type: Determines if the parameter is astring,array,object,boolean,integer,float, ordatetime.
type
metadata: Defines subproperties primarily used by the Azure portal to display user-friendly
information:description: (Optional) The explanation of what the parameter is used for. Can be used to provide
examples of acceptable values.displayName: The friendly name shown in the portal for the parameter.strongType: (Optional) Used when assigning the policy definition through the portal. Provides
a context aware list. For more information, seestrongType.
metadata
description: (Optional) The explanation of what the parameter is used for. Can be used to provide
examples of acceptable values.
description
displayName: The friendly name shown in the portal for the parameter.
displayName
strongType: (Optional) Used when assigning the policy definition through the portal. Provides
a context aware list. For more information, seestrongType.
strongType
defaultValue: (Optional) Sets the value of the parameter in an assignment if no value is given.
defaultValue
allowedValues: (Optional) Provides an array of values that the parameter accepts during
assignment.
allowedValues
As an example, you could define a policy initiative definition to limit the locations of resources
in the various included policy definitions. A parameter for that policy initiative definition could
beallowedLocations. The parameter is then available to each included policy definition and
defined during assignment of the policy initiative.
"parameters": {
    "init_allowedLocations": {
        "type": "array",
        "metadata": {
            "description": "The list of allowed locations for resources.",
            "displayName": "Allowed locations",
            "strongType": "location"
        },
        "defaultValue": [ "westus2" ],
        "allowedValues": [
            "eastus2",
            "westus2",
            "westus"
        ]
    }
}
"parameters": {
    "init_allowedLocations": {
        "type": "array",
        "metadata": {
            "description": "The list of allowed locations for resources.",
            "displayName": "Allowed locations",
            "strongType": "location"
        },
        "defaultValue": [ "westus2" ],
        "allowedValues": [
            "eastus2",
            "westus2",
            "westus"
        ]
    }
}
Passing a parameter value to a policy definition
You declare which initiative parameters you pass to which included policy definitions in thepolicyDefinitionsarray of the initiative definition. While the parameter
name can be the same, using different names in the initiatives than in the policy definitions
simplifies code readability.
For example, theinit_allowedLocationsinitiative parameter defined previously can be passed to
several included policy definitions and their parameters,sql_locationsandvm_locations,
like this:
"policyDefinitions": [
    {
        "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/0ec8fc28-d5b7-4603-8fec-39044f00a92b",
        "policyDefinitionReferenceId": "allowedLocationsSQL",
        "parameters": {
            "sql_locations": {
                "value": "[parameters('init_allowedLocations')]"
            }
        }
    },
    {
        "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/aa09bd0f-aa5f-4343-b6ab-a33a6a6304f3",
        "policyDefinitionReferenceId": "allowedLocationsVMs",
        "parameters": {
            "vm_locations": {
                "value": "[parameters('init_allowedLocations')]"
            }
        }
    }
]
"policyDefinitions": [
    {
        "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/0ec8fc28-d5b7-4603-8fec-39044f00a92b",
        "policyDefinitionReferenceId": "allowedLocationsSQL",
        "parameters": {
            "sql_locations": {
                "value": "[parameters('init_allowedLocations')]"
            }
        }
    },
    {
        "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/aa09bd0f-aa5f-4343-b6ab-a33a6a6304f3",
        "policyDefinitionReferenceId": "allowedLocationsVMs",
        "parameters": {
            "vm_locations": {
                "value": "[parameters('init_allowedLocations')]"
            }
        }
    }
]
This sample references theinit_allowedLocationsparameter that was demonstrated inparameter
properties.
strongType
Within themetadataproperty, you can usestrongTypeto provide a multiselect list of options
within the Azure portal.strongTypecan be a supportedresource typeor an allowed value. To
determine whether aresource typeis valid forstrongType, useGet-AzResourceProvider.
metadata
Some resource types not returned byGet-AzResourceProviderare supported. Those resource types
are:
Microsoft.RecoveryServices/vaults/backupPolicies
Microsoft.RecoveryServices/vaults/backupPolicies
The non-resource type allowed values forstrongTypeare:
location
location
resourceTypes
resourceTypes
storageSkus
storageSkus
vmSKUs
vmSKUs
existingResourceGroups
existingResourceGroups
Policy definitions
ThepolicyDefinitionsportion of the initiative definition is anarrayof which existing policy
definitions are included in the initiative. As mentioned inPassing a parameter value to a policy definition,
this property is whereinitiative parametersare passed to the policy definition.
policyDefinitions
Policy definition properties
Eacharrayelement that represents a policy definition has the following properties:
policyDefinitionId(string): The ID of the custom or built-in policy definition to include.
policyDefinitionId
policyDefinitionReferenceId(string): A short name for the included policy definition.
policyDefinitionReferenceId
parameters: (Optional) The name/value pairs for passing an initiative parameter to the
included policy definition as a property in that policy definition. For more information, seeParameters.
parameters
definitionVersion: (Optional) The version of the built-in definition to refer to. If none is specified, it refers to the latest major version at assignment time and autoingest any minor updates. For more information, seedefinition version
definitionVersion
groupNames(array of strings): (Optional) The group the policy definition is a member of. For
more information, seePolicy groups.
groupNames
Here's an example ofpolicyDefinitionsthat has two included policy definitions that are each
passed the same initiative parameter:
policyDefinitions
"policyDefinitions": [
    {
        "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/0ec8fc28-d5b7-4603-8fec-39044f00a92b",
        "policyDefinitionReferenceId": "allowedLocationsSQL",
        "definitionVersion": "1.2.*"
        "parameters": {
            "sql_locations": {
                "value": "[parameters('init_allowedLocations')]"
            }
        }
    },
    {
        "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/aa09bd0f-aa5f-4343-b6ab-a33a6a6304f3",
        "policyDefinitionReferenceId": "allowedLocationsVMs",
        "parameters": {
            "vm_locations": {
                "value": "[parameters('init_allowedLocations')]"
            }
        }
    }
]
"policyDefinitions": [
    {
        "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/0ec8fc28-d5b7-4603-8fec-39044f00a92b",
        "policyDefinitionReferenceId": "allowedLocationsSQL",
        "definitionVersion": "1.2.*"
        "parameters": {
            "sql_locations": {
                "value": "[parameters('init_allowedLocations')]"
            }
        }
    },
    {
        "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/aa09bd0f-aa5f-4343-b6ab-a33a6a6304f3",
        "policyDefinitionReferenceId": "allowedLocationsVMs",
        "parameters": {
            "vm_locations": {
                "value": "[parameters('init_allowedLocations')]"
            }
        }
    }
]
Policy definition groups
Policy definitions in an initiative definition can be grouped and categorized. Azure Policy'sRegulatory Compliance(preview) feature uses this property to group
definitions intocontrolsandcompliance domains. This information is defined in thepolicyDefinitionGroupsarrayproperty. More grouping details may be found in apolicyMetadataobject created by Microsoft. For information, seemetadata objects.
policyDefinitionGroups
Policy definition groups parameters
Eacharrayelement inpolicyDefinitionGroupsmust have both of the following properties:
policyDefinitionGroups
name(string) [required]: The short name for thegroup. In Regulatory Compliance, thecontrol. The value of this property is used bygroupNamesinpolicyDefinitions.
name(string) [required]: The short name for thegroup. In Regulatory Compliance, thecontrol. The value of this property is used bygroupNamesinpolicyDefinitions.
name
groupNames
policyDefinitions
category(string): The hierarchy the group belongs to. In Regulatory Compliance, thecompliance domainof the control.
category(string): The hierarchy the group belongs to. In Regulatory Compliance, thecompliance domainof the control.
category
displayName(string): The friendly name for thegrouporcontrol. Used by the portal.
displayName(string): The friendly name for thegrouporcontrol. Used by the portal.
displayName
description(string): A description of what thegrouporcontrolcovers.
description(string): A description of what thegrouporcontrolcovers.
description
additionalMetadataId(string): The location of thepolicyMetadataobject
that has additional details about thecontrolandcompliance domain.NoteCustomers may point to an existingpolicyMetadataobject. However, these
objects areread-onlyand only created by Microsoft.
additionalMetadataId(string): The location of thepolicyMetadataobject
that has additional details about thecontrolandcompliance domain.
additionalMetadataId
Note
Customers may point to an existingpolicyMetadataobject. However, these
objects areread-onlyand only created by Microsoft.
An example of thepolicyDefinitionGroupsproperty from the NIST built-in initiative definition
looks like this:
policyDefinitionGroups
"policyDefinitionGroups": [
    {
        "name": "NIST_SP_800-53_R4_AC-1",
        "additionalMetadataId": "/providers/Microsoft.PolicyInsights/policyMetadata/NIST_SP_800-53_R4_AC-1"
    }
]
"policyDefinitionGroups": [
    {
        "name": "NIST_SP_800-53_R4_AC-1",
        "additionalMetadataId": "/providers/Microsoft.PolicyInsights/policyMetadata/NIST_SP_800-53_R4_AC-1"
    }
]
Metadata objects
Regulatory Compliance built-ins created by Microsoft have additional information about each control.
This information is:
Displayed in the Azure portal on the overview of acontrolon a Regulatory Compliance
initiative.
Available via REST API. See theMicrosoft.PolicyInsightsresource provider and thepolicyMetadata operation group.
Microsoft.PolicyInsights
Available via Azure CLI. See theaz policy metadatacommand.
Important
Metadata objects for Regulatory Compliance areread-onlyand can't be created by customers.
The metadata for a policy grouping has the following information in thepropertiesnode:
properties
metadataId: TheControl IDthe grouping relates to.
metadataId
category(required): Thecompliance domainthecontrolbelongs to.
category
title(required): The friendly name of theControl ID.
title
owner(required): Identifies who has responsibility for the control in Azure:Customer,Microsoft,Shared.
owner
description: Additional information about the control.
description
requirements: Details about responsibility of the implementation of the control.
requirements
additionalContentUrl: A link to more information about the control. This property is typically a
link to the section of documentation that covers this control in the compliance standard.
additionalContentUrl
Below is an example of thepolicyMetadataobject. This example metadata belongs to theNIST SP
800-53 R4 AC-1control.
{
  "properties": {
    "metadataId": "NIST SP 800-53 R4 AC-1",
    "category": "Access Control",
    "title": "Access Control Policy and Procedures",
    "owner": "Shared",
    "description": "**The organization:**    \na. Develops, documents, and disseminates to [Assignment: organization-defined personnel or roles]:  \n1. An access control policy that addresses purpose, scope, roles, responsibilities, management commitment, coordination among organizational entities, and compliance; and  \n2. Procedures to facilitate the implementation of the access control policy and associated access controls; and  \n
\nb. Reviews and updates the current:  \n1. Access control policy [Assignment: organization-defined frequency]; and  \n2. Access control procedures [Assignment: organization-defined frequency].",
    "requirements": "**a.**  The customer is responsible for developing, documenting, and disseminating access control policies and procedures. The customer access control policies and procedures address access to all customer-deployed resources and customer system access (e.g., access to customer-deployed virtual machines, access to customer-built applications).  \n**b.**  The customer is responsible for reviewing and updating access control policies and procedures in accordance with FedRAMP requirements.",
    "additionalContentUrl": "https://nvd.nist.gov/800-53/Rev4/control/AC-1"
  },
  "id": "/providers/Microsoft.PolicyInsights/policyMetadata/NIST_SP_800-53_R4_AC-1",
  "name": "NIST_SP_800-53_R4_AC-1",
  "type": "Microsoft.PolicyInsights/policyMetadata"
}
{
  "properties": {
    "metadataId": "NIST SP 800-53 R4 AC-1",
    "category": "Access Control",
    "title": "Access Control Policy and Procedures",
    "owner": "Shared",
    "description": "**The organization:**    \na. Develops, documents, and disseminates to [Assignment: organization-defined personnel or roles]:  \n1. An access control policy that addresses purpose, scope, roles, responsibilities, management commitment, coordination among organizational entities, and compliance; and  \n2. Procedures to facilitate the implementation of the access control policy and associated access controls; and  \n
\nb. Reviews and updates the current:  \n1. Access control policy [Assignment: organization-defined frequency]; and  \n2. Access control procedures [Assignment: organization-defined frequency].",
    "requirements": "**a.**  The customer is responsible for developing, documenting, and disseminating access control policies and procedures. The customer access control policies and procedures address access to all customer-deployed resources and customer system access (e.g., access to customer-deployed virtual machines, access to customer-built applications).  \n**b.**  The customer is responsible for reviewing and updating access control policies and procedures in accordance with FedRAMP requirements.",
    "additionalContentUrl": "https://nvd.nist.gov/800-53/Rev4/control/AC-1"
  },
  "id": "/providers/Microsoft.PolicyInsights/policyMetadata/NIST_SP_800-53_R4_AC-1",
  "name": "NIST_SP_800-53_R4_AC-1",
  "type": "Microsoft.PolicyInsights/policyMetadata"
}
Next steps
See thedefinition structure
Review examples atAzure Policy samples.
ReviewUnderstanding policy effects.
Understand how toprogrammatically create policies.
Learn how toget compliance data.
Learn how toremediate non-compliant resources.
Review what a management group is withOrganize your resources with Azure management groups.
Feedback
Was this page helpful?
Additional resources