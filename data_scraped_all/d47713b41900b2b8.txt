Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Quickstart: Run a custom container in Azure
Article
2025-02-20
13 contributors
In this article
Azure App Serviceprovides predefined application stacks on Windows, like ASP.NET or Node.js, that run on IIS. The preconfigured application stackslock down the operating system and prevent low-level access. Custom Windows containers don't have these restrictions. They let developers fully customize the containers and give containerized applications full access to Windows functionality.
This quickstart shows how to deploy an ASP.NET app in a Windows image toAzure Container Registryfrom Visual Studio. You run the app in a custom container in Azure App Service.
Prerequisites
Install Docker for Windows
Install Docker for Windows
Switch Docker to run Windows containers
Switch Docker to run Windows containers
Install Visual Studio 2022with theASP.NET and web developmentandAzure developmentworkloads. InVisual Studio 2022 Community, ensure that.NET Framework project and item templatescomponent is selected withASP.NET and web development workload. If you installed Visual Studio 2022 already:Install the latest updates in Visual Studio by selectingHelp>Check for Updates.Add the workloads in Visual Studio by selectingTools>Get Tools and Features.
Install Visual Studio 2022with theASP.NET and web developmentandAzure developmentworkloads. InVisual Studio 2022 Community, ensure that.NET Framework project and item templatescomponent is selected withASP.NET and web development workload. If you installed Visual Studio 2022 already:
Install the latest updates in Visual Studio by selectingHelp>Check for Updates.
Add the workloads in Visual Studio by selectingTools>Get Tools and Features.
Create an ASP.NET web app
Create an ASP.NET web app by following these steps:
Open Visual Studio and then selectCreate a new project.
Open Visual Studio and then selectCreate a new project.
InCreate a new project, selectASP.NET Web Application (.NET Framework)for C#, then selectNext.
InCreate a new project, selectASP.NET Web Application (.NET Framework)for C#, then selectNext.

InConfigure your new project, underProject name, name the applicationmyfirstazurewebapp. UnderFramework, select.NET Framework 4.8and then selectCreate.
InConfigure your new project, underProject name, name the applicationmyfirstazurewebapp. UnderFramework, select.NET Framework 4.8and then selectCreate.

You can deploy any type of ASP.NET web app to Azure. For this quickstart, choose theMVCtemplate.
You can deploy any type of ASP.NET web app to Azure. For this quickstart, choose theMVCtemplate.
UnderAuthentication, selectNone. UnderAdvanced, selectContainer supportand uncheckConfigure for HTTPS. SelectCreate.
UnderAuthentication, selectNone. UnderAdvanced, selectContainer supportand uncheckConfigure for HTTPS. SelectCreate.

If theDockerfilefile isn't opened automatically, open it from theSolution Explorer.
If theDockerfilefile isn't opened automatically, open it from theSolution Explorer.
You need asupported parent image. Change the parent image by replacing theFROMline with the following code and save the file:FROM mcr.microsoft.com/dotnet/framework/aspnet:4.8-windowsservercore-ltsc2019
You need asupported parent image. Change the parent image by replacing theFROMline with the following code and save the file:
FROM
FROM mcr.microsoft.com/dotnet/framework/aspnet:4.8-windowsservercore-ltsc2019
FROM mcr.microsoft.com/dotnet/framework/aspnet:4.8-windowsservercore-ltsc2019
From the Visual Studio menu, selectDebug>Start Without Debuggingto run the web app locally.
From the Visual Studio menu, selectDebug>Start Without Debuggingto run the web app locally.

Publish to Azure Container Registry
InSolution Explorer, right-click themyfirstazurewebappproject and selectPublish.
InSolution Explorer, right-click themyfirstazurewebappproject and selectPublish.
InTarget, selectDocker Container Registry, and then selectNext.
InTarget, selectDocker Container Registry, and then selectNext.

InSpecific Target, selectAzure Container Registry, and then selectNext.
InSpecific Target, selectAzure Container Registry, and then selectNext.

InPublish, choose the correct subscription. InContainer registriesselectCreate newto create a new Azure Container Registry.
InPublish, choose the correct subscription. InContainer registriesselectCreate newto create a new Azure Container Registry.

InCreate new, select the correct subscription. UnderResource group, selectNewand typemyResourceGroupfor the name, and selectOK. UnderSKU, selectBasic. UnderRegistry location, select a location of the registry then selectCreate.
InCreate new, select the correct subscription. UnderResource group, selectNewand typemyResourceGroupfor the name, and selectOK. UnderSKU, selectBasic. UnderRegistry location, select a location of the registry then selectCreate.

InPublish, underContainer Registry, select the registry you created, and then selectFinish.Wait for the deployment to complete. ThePublishpage now shows the repository name. Select thecopy buttonto copy theRepositoryname for later.
InPublish, underContainer Registry, select the registry you created, and then selectFinish.

Wait for the deployment to complete. ThePublishpage now shows the repository name. Select thecopy buttonto copy theRepositoryname for later.

Create a Windows custom container
Sign in to theAzure portal.
Sign in to theAzure portal.
ChooseCreate a resourcein the upper left-hand corner of the Azure portal.
ChooseCreate a resourcein the upper left-hand corner of the Azure portal.
UnderPopular services, selectCreateunderWeb App.
UnderPopular services, selectCreateunderWeb App.
InCreate Web App, choose your subscription and aResource Group. You can create a new resource group if needed.
InCreate Web App, choose your subscription and aResource Group. You can create a new resource group if needed.
Provide an app name, such aswin-container-demo. ForPublish, selectContainer. ForOperating System, selectWindows.
Provide an app name, such aswin-container-demo. ForPublish, selectContainer. ForOperating System, selectWindows.

SelectNext: Database, thenNext: Containerto continue.
SelectNext: Database, thenNext: Containerto continue.
ForImage Source, chooseDocker Huband forImage and tag, enter the repository name you copied inPublish to Azure Container Registry.If you have a custom image elsewhere for your web application, such as inAzure Container Registryor in any other private repository, you can configure it here. SelectReview + Createto continue.
ForImage Source, chooseDocker Huband forImage and tag, enter the repository name you copied inPublish to Azure Container Registry.

If you have a custom image elsewhere for your web application, such as inAzure Container Registryor in any other private repository, you can configure it here. SelectReview + Createto continue.
Verify all the details and then selectCreate.Wait for Azure to create the required resources.
Verify all the details and then selectCreate.

Wait for Azure to create the required resources.
Browse to the custom container
When the operation finishes, the Azure portal displays a notification.

SelectGo to resource.
SelectGo to resource.
In the overview of this resource, follow the link next toDefault domain.
In the overview of this resource, follow the link next toDefault domain.
A new browser page opens to the following page:

Wait a few minutes and try again, until you get the default ASP.NET home page:

Congratulations!You're running your first custom Windows container in Azure App Service.
See container start-up logs
It can take some time for the Windows container to load. To see the progress, navigate to the following URL by replacing<app_name>with the name of your app.
https://<app_name>.scm.azurewebsites.net/api/logstream
https://<app_name>.scm.azurewebsites.net/api/logstream
The streamed logs look like this:
2018-07-27T12:03:11  Welcome, you are now connected to log-streaming service.
27/07/2018 12:04:10.978 INFO - Site: win-container-demo - Start container succeeded. Container: facbf6cb214de86e58557a6d073396f640bbe2fdec88f8368695c8d1331fc94b
27/07/2018 12:04:16.767 INFO - Site: win-container-demo - Container start complete
27/07/2018 12:05:05.017 INFO - Site: win-container-demo - Container start complete
27/07/2018 12:05:05.020 INFO - Site: win-container-demo - Container started successfully
2018-07-27T12:03:11  Welcome, you are now connected to log-streaming service.
27/07/2018 12:04:10.978 INFO - Site: win-container-demo - Start container succeeded. Container: facbf6cb214de86e58557a6d073396f640bbe2fdec88f8368695c8d1331fc94b
27/07/2018 12:04:16.767 INFO - Site: win-container-demo - Container start complete
27/07/2018 12:05:05.017 INFO - Site: win-container-demo - Container start complete
27/07/2018 12:05:05.020 INFO - Site: win-container-demo - Container started successfully
Update locally and redeploy
In Visual Studio, inSolution Explorer, openViews>Home>Index.cshtml.
In Visual Studio, inSolution Explorer, openViews>Home>Index.cshtml.
Find the<div class="jumbotron">HTML tag near the top, and replace the entire element with the following code:<div class="jumbotron">
    <h1>ASP.NET in Azure!</h1>
    <p class="lead">This is a simple app that we've built that demonstrates how to deploy a .NET app to Azure App Service.</p>
</div>
Find the<div class="jumbotron">HTML tag near the top, and replace the entire element with the following code:
<div class="jumbotron">
<div class="jumbotron">
    <h1>ASP.NET in Azure!</h1>
    <p class="lead">This is a simple app that we've built that demonstrates how to deploy a .NET app to Azure App Service.</p>
</div>
<div class="jumbotron">
    <h1>ASP.NET in Azure!</h1>
    <p class="lead">This is a simple app that we've built that demonstrates how to deploy a .NET app to Azure App Service.</p>
</div>
To redeploy to Azure, right-click themyfirstazurewebappproject inSolution Explorerand choosePublish.
To redeploy to Azure, right-click themyfirstazurewebappproject inSolution Explorerand choosePublish.
On the publish page, selectPublishand wait for publishing to complete.
On the publish page, selectPublishand wait for publishing to complete.
To tell App Service to pull in the new image from Docker Hub, restart the app. In the app page in the Azure portal, selectRestart>Yes.
To tell App Service to pull in the new image from Docker Hub, restart the app. In the app page in the Azure portal, selectRestart>Yes.

Browse to the custom containeragain. As you refresh the webpage, the app should revert to the "Starting up" page at first, then display the updated webpage.

Clean up resources
In the preceding steps, you created Azure resources in a resource group. If you don't expect to need these resources in the future, you can delete them by deleting the resource group.
From the Azure portal menu orHomepage, selectResource groups. Then, on theResource groupspage, selectmyResourceGroup.
On themyResourceGrouppage, make sure that the listed resources are the ones you want to delete.
SelectDelete resource group, typemyResourceGroupin the text box to confirm, and then selectDelete.
Related content
Configure custom container
How to use managed identities for App Service and Azure Functions
Application monitoring for Azure App Service overview
Azure Monitor overview
Secure with custom domain and certificate
Integrate your app with an Azure virtual network
Use Private Endpoints for App Service apps
Use Azure Container Registry with Private Link
Migrate to Windows container in Azure
Deploy a container with Azure Pipelines
Deploy a container with GitHub Actions
Azure App Serviceon Linux provides predefined application stacks on Linux with support for languages such as .NET, Java, Node.js, and PHP. You can also use a custom Docker image to run your web app on an application stack that isn't already defined in Azure. This quickstart shows you how to deploy an image from anAzure Container Registry (ACR)to App Service.
For more information about containerized applications in a serverless environment, seeContainer Apps.
Prerequisites
AnAzure account.
Docker.
Visual Studio Code.
TheAzure App Service extension for VS Code. You can use this extension to create, manage, and deploy Linux Web Apps on the Azure Platform as a Service (PaaS).
TheDocker extension for VS Code. You can use this extension to simplify the management of local Docker images and commands and to deploy built app images to Azure.
Create a container registry
This quickstart uses Azure Container Registry as the registry. You can use other registries, but the steps might differ slightly.
Create a container registry by following the instructions inQuickstart: Create a private container registry using the Azure portal.
Important
Be sure to set theAdmin Useroption toEnablewhen you create the Azure container registry. You can also set it from theAccess keyssection of your registry page in the Azure portal. This setting is required for App Service access. For managed identity, seeDeploy from ACR tutorial.
Sign in
Launch Visual Studio Code.
Launch Visual Studio Code.
Select theAzurelogo in theActivity Bar, navigate toACCOUNTS & TENANTS. SelectSign in to Azureand follow the instructions.
Select theAzurelogo in theActivity Bar, navigate toACCOUNTS & TENANTS. SelectSign in to Azureand follow the instructions.

In theStatus Barat the bottom, verify your Azure account email address. In theAPP SERVICEexplorer, your subscription should be displayed.
In theStatus Barat the bottom, verify your Azure account email address. In theAPP SERVICEexplorer, your subscription should be displayed.
In the Activity Bar, select theDockerlogo. In theREGISTRIESexplorer, verify that the container registry you created appears.
In the Activity Bar, select theDockerlogo. In theREGISTRIESexplorer, verify that the container registry you created appears.

Check prerequisites
Verify that Docker is installed and running. The following command displays the Docker version if it's running.
docker --version
docker --version
Create and build image
In Visual Studio Code, open an empty folder and add a file calledDockerfile. In the Dockerfile, paste the content based on your desired language framework:.NETJavaNode.jsPythonIn this Dockerfile, the parent image is one of the built-in .NET containers of App Service.FROM mcr.microsoft.com/appsvc/dotnetcore:lts

ENV PORT 8080
EXPOSE 8080

ENV ASPNETCORE_URLS "http://*:${PORT}"

ENTRYPOINT ["dotnet", "/defaulthome/hostingstart/hostingstart.dll"]In this Dockerfile, the parent image is one of the built-in Java containers of App Service. You can find the source files for it atjava/tree/dev/java11-alpine.
ItsDockerfilecopies a simple Java app into/tmp/appservice. Your Dockerfile starts
that app.FROM mcr.microsoft.com/azure-app-service/java:11-java11_stable

ENV PORT 80
EXPOSE 80

ENTRYPOINT ["java", "-Dserver.port=80", "-jar", "/tmp/appservice/parkingpage.jar"]In this Dockerfile, the parent image is one of the built-in Node.js containers of App Service.FROM mcr.microsoft.com/appsvc/node:10-lts

ENV HOST 0.0.0.0
ENV PORT 8080
EXPOSE 8080

ENTRYPOINT ["pm2", "start", "--no-daemon", "/opt/startup/default-static-site.js"]In this Dockerfile, the parent image is one of the built-in Python containers of App Service.FROM mcr.microsoft.com/appsvc/python:latest

ENV PORT 8080
EXPOSE 8080

ENTRYPOINT ["gunicorn", "--timeout", "600", "--access-logfile", "'-'", "--error-logfile", "'-'", "--chdir=/opt/defaultsite", "application:app"]
In Visual Studio Code, open an empty folder and add a file calledDockerfile. In the Dockerfile, paste the content based on your desired language framework:
.NET
Java
Node.js
Python
In this Dockerfile, the parent image is one of the built-in .NET containers of App Service.
FROM mcr.microsoft.com/appsvc/dotnetcore:lts

ENV PORT 8080
EXPOSE 8080

ENV ASPNETCORE_URLS "http://*:${PORT}"

ENTRYPOINT ["dotnet", "/defaulthome/hostingstart/hostingstart.dll"]
FROM mcr.microsoft.com/appsvc/dotnetcore:lts

ENV PORT 8080
EXPOSE 8080

ENV ASPNETCORE_URLS "http://*:${PORT}"

ENTRYPOINT ["dotnet", "/defaulthome/hostingstart/hostingstart.dll"]
In this Dockerfile, the parent image is one of the built-in Java containers of App Service. You can find the source files for it atjava/tree/dev/java11-alpine.
ItsDockerfilecopies a simple Java app into/tmp/appservice. Your Dockerfile starts
that app.
/tmp/appservice
FROM mcr.microsoft.com/azure-app-service/java:11-java11_stable

ENV PORT 80
EXPOSE 80

ENTRYPOINT ["java", "-Dserver.port=80", "-jar", "/tmp/appservice/parkingpage.jar"]
FROM mcr.microsoft.com/azure-app-service/java:11-java11_stable

ENV PORT 80
EXPOSE 80

ENTRYPOINT ["java", "-Dserver.port=80", "-jar", "/tmp/appservice/parkingpage.jar"]
In this Dockerfile, the parent image is one of the built-in Node.js containers of App Service.
FROM mcr.microsoft.com/appsvc/node:10-lts

ENV HOST 0.0.0.0
ENV PORT 8080
EXPOSE 8080

ENTRYPOINT ["pm2", "start", "--no-daemon", "/opt/startup/default-static-site.js"]
FROM mcr.microsoft.com/appsvc/node:10-lts

ENV HOST 0.0.0.0
ENV PORT 8080
EXPOSE 8080

ENTRYPOINT ["pm2", "start", "--no-daemon", "/opt/startup/default-static-site.js"]
In this Dockerfile, the parent image is one of the built-in Python containers of App Service.
FROM mcr.microsoft.com/appsvc/python:latest

ENV PORT 8080
EXPOSE 8080

ENTRYPOINT ["gunicorn", "--timeout", "600", "--access-logfile", "'-'", "--error-logfile", "'-'", "--chdir=/opt/defaultsite", "application:app"]
FROM mcr.microsoft.com/appsvc/python:latest

ENV PORT 8080
EXPOSE 8080

ENTRYPOINT ["gunicorn", "--timeout", "600", "--access-logfile", "'-'", "--error-logfile", "'-'", "--chdir=/opt/defaultsite", "application:app"]
Open the Command Palette, and typeDocker Images: Build Image. SelectEnterto run the command.
Open the Command Palette, and typeDocker Images: Build Image. SelectEnterto run the command.
In the image tag box, specify the tag you want in the following format:<acr-name>.azurecr.io/<image-name>:<tag>, where<acr-name>is the name of the container registry you created. SelectEnter.
In the image tag box, specify the tag you want in the following format:<acr-name>.azurecr.io/<image-name>:<tag>, where<acr-name>is the name of the container registry you created. SelectEnter.
<acr-name>.azurecr.io/<image-name>:<tag>
<acr-name>
When the image finishes building, selectRefreshat the top of theIMAGESexplorer and verify that the image built successfully.
When the image finishes building, selectRefreshat the top of theIMAGESexplorer and verify that the image built successfully.

Deploy to container registry
In the Activity Bar, select theDockericon. In theIMAGESexplorer, find the image you built.
In the Activity Bar, select theDockericon. In theIMAGESexplorer, find the image you built.
Expand the image, right-click on the tag you want, and selectPush.
Expand the image, right-click on the tag you want, and selectPush.
Make sure the image tag begins with<acr-name>.azurecr.ioand pressEnter.
Make sure the image tag begins with<acr-name>.azurecr.ioand pressEnter.
<acr-name>.azurecr.io
When Visual Studio Code finishes pushing the image to your container registry, selectRefreshat the top of theREGISTRIESexplorer and verify that the image is pushed successfully.
When Visual Studio Code finishes pushing the image to your container registry, selectRefreshat the top of theREGISTRIESexplorer and verify that the image is pushed successfully.

Deploy to App Service
In theREGISTRIESexplorer, expand the image, right-click the tag, and selectDeploy Image to Azure App Service.
Follow the prompts to choose a subscription, a globally unique app name, a resource group, and an App Service plan. ChooseB1 Basicfor the pricing tier, and a region near you.
After deployment, your app is available athttp://<app-name>.azurewebsites.net.
http://<app-name>.azurewebsites.net
AResource Groupis a named collection of all your application's resources in Azure. For example, a Resource Group can contain a reference to a website, a database, and an Azure Function.
AnApp Service Plandefines the physical resources that to use to host your website. This quickstart uses aBasichosting plan onLinuxinfrastructure, which means the site is hosted on a Linux machine alongside other websites. If you start with theBasicplan, you can use the Azure portal to scale up so that yours is the only site running on a machine. For pricing, seeApp Service pricing.
Browse the website
TheOutputpanel shows the status of the deployment operations. When the operation completes, selectOpen Sitein the pop-up notification to open the site in your browser.
I ran into an issue
Clean up resources
In the preceding steps, you created Azure resources in a resource group. If you don't expect to need these resources in the future, you can delete them by deleting the resource group.
From the Azure portal menu orHomepage, selectResource groups. Then, on theResource groupspage, selectmyResourceGroup.
On themyResourceGrouppage, make sure that the listed resources are the ones you want to delete.
SelectDelete resource group, typemyResourceGroupin the text box to confirm, and then selectDelete.
Related content
Congratulations, you successfully completed this quickstart!
The App Service app pulls from the container registry every time it starts. If you rebuild your image, you just need to push it to your container registry, and the app pulls in the updated image when it restarts. To tell your app to pull in the updated image immediately, restart it.
Secure with custom domain and certificate
Migrate to Windows container in Azure
Integrate your app with an Azure virtual network
Use Private Endpoints for App Service apps
Azure Monitor overview
Application monitoring for Azure App Service overview
How to use managed identities for App Service and Azure Functions
Configure custom container
Sidecar container tutorial
Other Azure extensions:
Azure Cosmos DB
Azure Functions
Azure CLI Tools
Azure Resource Manager Tools
Azure Toolsextension pack includes all the extensions in this list.
Azure App Serviceon Linux provides predefined application stacks on Linux with support for languages such as .NET, Java, Node.js, and PHP. You can also use a custom Docker image to run your web app on an application stack that isn't already defined in Azure. This quickstart shows you how to deploy an image from Azure Container Registry to Azure App Service.
For more information about containerized applications in a serverless environment, seeContainer Apps.
Prerequisites
AnAzure account
AnAzure container registry
Azure CLI
Docker
Clone the sample repository
Clone thethe .NET 6.0 sample appwith the following command:
git clone https://github.com/Azure-Samples/dotnetcore-docs-hello-world.git
git clone https://github.com/Azure-Samples/dotnetcore-docs-hello-world.git
Push the image to Azure Container Registry
Make sure you are in the cloned repository's root folder. This repository contains aDockerfile.linuxfile.
Sign in to the Azure CLI.az login
Sign in to the Azure CLI.
az login
az login
Sign in to Azure Container Registry.az acr login -n <your_registry_name>
Sign in to Azure Container Registry.
az acr login -n <your_registry_name>
az acr login -n <your_registry_name>
Build the container image. This example uses the image namedotnetcore-docs-hello-world-linux.docker build -f Dockerfile.linux -t <your_registry_name>.azurecr.io/dotnetcore-docs-hello-world-linux .
Build the container image. This example uses the image namedotnetcore-docs-hello-world-linux.
docker build -f Dockerfile.linux -t <your_registry_name>.azurecr.io/dotnetcore-docs-hello-world-linux .
docker build -f Dockerfile.linux -t <your_registry_name>.azurecr.io/dotnetcore-docs-hello-world-linux .
Push the container image to Azure Container Registry.docker push <your_registry_name>.azurecr.io/dotnetcore-docs-hello-world-linux:latestNoteThe Dockerfile sets the port number to 80 internally. For more information about configuring the container, seeConfigure custom container.
Push the container image to Azure Container Registry.
docker push <your_registry_name>.azurecr.io/dotnetcore-docs-hello-world-linux:latest
docker push <your_registry_name>.azurecr.io/dotnetcore-docs-hello-world-linux:latest
Note
The Dockerfile sets the port number to 80 internally. For more information about configuring the container, seeConfigure custom container.
Deploy to Azure
Sign in to Azure portal
Sign in to theAzure portal.
Create Azure resources
Typeapp servicesin the search. UnderServices, selectApp Services.
Typeapp servicesin the search. UnderServices, selectApp Services.

In theApp Servicespage, selectCreate>Web App.
In theApp Servicespage, selectCreate>Web App.
In theBasicstab, underProject details, select the correct subscription. SelectCreate newresource group. TypemyResourceGroupfor the name.
In theBasicstab, underProject details, select the correct subscription. SelectCreate newresource group. TypemyResourceGroupfor the name.

UnderInstance details:Enter a globally unique name for your web app.SelectContainer.For theOperating System, selectLinux.Select aRegionthat you want to serve your app from.
UnderInstance details:
Enter a globally unique name for your web app.
SelectContainer.
For theOperating System, selectLinux.
Select aRegionthat you want to serve your app from.

UnderApp Service Plan, selectCreate newApp Service Plan. EntermyAppServicePlanfor the name. To change to the Free tier, selectChange size, select theDev/Testtab, selectF1. SelectApply.
UnderApp Service Plan, selectCreate newApp Service Plan. EntermyAppServicePlanfor the name. To change to the Free tier, selectChange size, select theDev/Testtab, selectF1. SelectApply.

At the top of the page, select theContainertab.
At the top of the page, select theContainertab.
In theContainertab, forImage Source, selectAzure Container Registry. UnderAzure container registry options, set the following values:Registry: Select your Azure Container Registry.Image: Selectdotnetcore-docs-hello-world-linux.Tag: Selectlatest.
In theContainertab, forImage Source, selectAzure Container Registry. UnderAzure container registry options, set the following values:
Registry: Select your Azure Container Registry.
Image: Selectdotnetcore-docs-hello-world-linux.
Tag: Selectlatest.

SelectReview + createat the bottom of the page.
SelectReview + createat the bottom of the page.

After validation runs, selectCreate.
After validation runs, selectCreate.
After deployment finishes, selectGo to resource.
After deployment finishes, selectGo to resource.

Browse to the app
Browse to the deployed application in your web browser at the URLhttp://<app-name>.azurewebsites.net.
http://<app-name>.azurewebsites.net

Clean up resources
In the preceding steps, you created Azure resources in a resource group. If you don't expect to need these resources in the future, you can delete them by deleting the resource group.
From the Azure portal menu orHomepage, selectResource groups. Then, on theResource groupspage, selectmyResourceGroup.
On themyResourceGrouppage, make sure that the listed resources are the ones you want to delete.
SelectDelete resource group, typemyResourceGroupin the text box to confirm, and then selectDelete.
Related content
Congratulations, you've successfully completed this quickstart.
The App Service app pulls from the container registry each time it starts. If you rebuild your image, just push it to your container registry. The app pulls in the updated image when it restarts. To tell your app to pull in the updated image immediately, restart it.
Secure with custom domain and certificate
Migrate to Windows container in Azure
Integrate your app with an Azure virtual network
Use Private Endpoints for App Service apps
Azure Monitor overview
Application monitoring for Azure App Service overview
How to use managed identities for App Service and Azure Functions
Configure custom container
Sidecar container tutorial
Azure App Serviceprovides predefined application stacks on Windows, like ASP.NET or Node.js, that run on IIS. The preconfigured application stackslock down the operating system and prevent low-level access. Custom Windows containers don't have these restrictions. They let developers fully customize the containers and give containerized applications full access to Windows functionality.
This quickstart shows you how to deploy an ASP.NET app in a Windows image from Azure Container Registry to Azure App Service.
Prerequisites
AnAzure account
AnAzure container registry
Azure CLI
Install Docker for Windows
Switch Docker to run Windows containers
Clone the sample repository
Clone thethe .NET 6.0 sample appwith the following command:
git clone https://github.com/Azure-Samples/dotnetcore-docs-hello-world.git
git clone https://github.com/Azure-Samples/dotnetcore-docs-hello-world.git
Push the image to Azure Container Registry
Make sure you are in the cloned repository's root folder. This repository contains aDockerfile.windowsfile. This article uses Windows Nano Server Long Term Servicing Channel (LTSC) 2022 as the base operating system, explicitly calling out our Windows base.
Note
Even though this container is a Windows container, the paths still need to use forward slashes. For more information, seeWrite a Dockerfile.
Sign in to the Azure CLI.az login
Sign in to the Azure CLI.
az login
az login
Sign in to Azure Container Registry.az acr login -n <your_registry_name>
Sign in to Azure Container Registry.
az acr login -n <your_registry_name>
az acr login -n <your_registry_name>
Build the container image. This example uses the image namedotnetcore-docs-hello-world-windows.docker build -f Dockerfile.windows -t <your_registry_name>.azurecr.io/dotnetcore-docs-hello-world-windows .
Build the container image. This example uses the image namedotnetcore-docs-hello-world-windows.
docker build -f Dockerfile.windows -t <your_registry_name>.azurecr.io/dotnetcore-docs-hello-world-windows .
docker build -f Dockerfile.windows -t <your_registry_name>.azurecr.io/dotnetcore-docs-hello-world-windows .
Push the container image to Azure Container Registry.docker push <your_registry_name>.azurecr.io/dotnetcore-docs-hello-world-windows:latestNoteThe Dockerfile sets the port number to 80 internally. For more information about configuring the container, seeConfigure custom container.
Push the container image to Azure Container Registry.
docker push <your_registry_name>.azurecr.io/dotnetcore-docs-hello-world-windows:latest
docker push <your_registry_name>.azurecr.io/dotnetcore-docs-hello-world-windows:latest
Note
The Dockerfile sets the port number to 80 internally. For more information about configuring the container, seeConfigure custom container.
Deploy to Azure
Sign in to Azure portal
Sign in to theAzure portal.
Create Azure resources
Typeapp servicesin the search. UnderServices, selectApp Services.
Typeapp servicesin the search. UnderServices, selectApp Services.

In theApp Servicespage, selectCreate>Web App.
In theApp Servicespage, selectCreate>Web App.
In theBasicstab, underProject details, select the correct subscription. SelectCreate newresource group. TypemyResourceGroupfor the name.
In theBasicstab, underProject details, select the correct subscription. SelectCreate newresource group. TypemyResourceGroupfor the name.

UnderInstance details:Enter a globally unique name for your web app.SelectContainer.For theOperating System, selectLinux.Select aRegionthat you want to serve your app from.
UnderInstance details:
Enter a globally unique name for your web app.
SelectContainer.
For theOperating System, selectLinux.
Select aRegionthat you want to serve your app from.

UnderApp Service Plan, selectCreate newApp Service Plan. EntermyAppServicePlanfor the name. To change tier, selectExplore pricing plans, select a plan, and chooseSelectat the bottom of the page.
UnderApp Service Plan, selectCreate newApp Service Plan. EntermyAppServicePlanfor the name. To change tier, selectExplore pricing plans, select a plan, and chooseSelectat the bottom of the page.

At the top of the page, select theContainertab.
At the top of the page, select theContainertab.
In theContainertab, forImage Source, selectAzure Container Registry. UnderAzure container registry options, set the following values:Registry: Select your Azure Container Registry.Image: Selectdotnetcore-docs-hello-world-linux.Tag: Selectlatest.
In theContainertab, forImage Source, selectAzure Container Registry. UnderAzure container registry options, set the following values:
Registry: Select your Azure Container Registry.
Image: Selectdotnetcore-docs-hello-world-linux.
Tag: Selectlatest.

SelectReview + createat the bottom of the page.
SelectReview + createat the bottom of the page.

After validation runs, selectCreate.
After validation runs, selectCreate.
After deployment finishes, selectGo to resource.
After deployment finishes, selectGo to resource.

Browse to the app
Browse to the deployed application in your web browser at the URLhttp://<app-name>.azurewebsites.net.
http://<app-name>.azurewebsites.net

The Host operating system appears in the footer, which confirms that it runs in a Windows container.
Clean up resources
In the preceding steps, you created Azure resources in a resource group. If you don't expect to need these resources in the future, you can delete them by deleting the resource group.
From the Azure portal menu orHomepage, selectResource groups. Then, on theResource groupspage, selectmyResourceGroup.
On themyResourceGrouppage, make sure that the listed resources are the ones you want to delete.
SelectDelete resource group, typemyResourceGroupin the text box to confirm, and then selectDelete.
Related content
Congratulations, you've successfully completed this quickstart.
The App Service app pulls from the container registry each time it starts. If you rebuild your image, just push it to your container registry. The app pulls in the updated image when it restarts. To tell your app to pull in the updated image immediately, restart it.
Configure custom container
How to use managed identities for App Service and Azure Functions
Application monitoring for Azure App Service overview
Azure Monitor overview
Secure with custom domain and certificate
Integrate your app with an Azure virtual network
Use Private Endpoints for App Service apps
Use Azure container registry with Private Link
Migrate to Windows container in Azure
Deploy a container with Azure Pipelines
Deploy a container with GitHub Actions
Azure App Serviceprovides predefined application stacks on Windows, like ASP.NET or Node.js, that run on IIS. The preconfigured application stackslock down the operating system and prevent low-level access. Custom Windows containers don't have these restrictions. They let developers fully customize the containers and give containerized applications full access to Windows functionality.
This quickstart shows you how to deploy an ASP.NET app in a Windows image fromMicrosoft Artifact Registryto Azure App Service.
Prerequisites
An Azure account with an active subscription.Create an account for free.
Azure PowerShell.
Connect to Azure
Sign into your Azure account by using theConnect-AzAccountcommand and following the prompt:
Connect-AzAccount
Connect-AzAccount
Create a resource group
Create a resource group with theNew-AzResourceGroupcommand. An Azure resource group is a logical container into which Azure resources are deployed and managed.
The following example creates a resource group namedmyResourceGroupin theeastuslocation. To see all supported locations for App Service, run theGet-AzLocationcommand.
New-AzResourceGroup -Name myResourceGroup -Location eastus
New-AzResourceGroup -Name myResourceGroup -Location eastus
The command returnsLogin Succeeded.
Login Succeeded
Create your App Service Plan
Create a new App service Plan by using theNew-AzAppServicePlancommand.
The following example creates an App Service plan namedmyAppServicePlanin thePremiumV3pricing tier (-Tier PremiumV3). The-HyperVparameter specifies Windows container.
myAppServicePlan
-Tier PremiumV3
-HyperV
New-AzAppServicePlan -Name myAppServicePlan -Location eastus -ResourceGroupName myResourceGroup -Tier PremiumV3 -HyperV
New-AzAppServicePlan -Name myAppServicePlan -Location eastus -ResourceGroupName myResourceGroup -Tier PremiumV3 -HyperV
Create your web app
Create a new app by using theNew-AzWebAppcommand:
New-AzWebApp -Name myWebApp -AppServicePlan myAppServicePlan -Location eastus -ResourceGroupName myResourceGroup -ContainerImageName mcr.microsoft.com/azure-app-service/windows/parkingpage:latest
New-AzWebApp -Name myWebApp -AppServicePlan myAppServicePlan -Location eastus -ResourceGroupName myResourceGroup -ContainerImageName mcr.microsoft.com/azure-app-service/windows/parkingpage:latest
The Name parameter specifies the web app name.
The AppServicePlan parameter specifies the App Service Plan Name.
The Location parameter specifies the location.
The ResourceGroupName parameter specifies the name of the Resource Group.
The ContainerImageName parameter specifies a Container Image Name and optional tag.
The command might take a few minutes to complete.
Browse to the app
Browse to the deployed application in your web browser at the URLhttp://<app-name>.azurewebsites.net.
http://<app-name>.azurewebsites.net

Clean up resources
Remove the resource group by using theRemove-AzResourceGroupcommand:
Remove-AzResourceGroup myResourceGroup
Remove-AzResourceGroup myResourceGroup
Related content
Congratulations, you've successfully completed this quickstart.
The App Service app pulls from the container registry each time it starts. If you rebuild your image, just push it to your container registry. The app pulls in the updated image when it restarts. To tell your app to pull in the updated image immediately, restart it.
Configure custom container
How to use managed identities for App Service and Azure Functions
Application monitoring for Azure App Service overview
Azure Monitor overview
Secure with custom domain and certificate
Integrate your app with an Azure virtual network
Use Private Endpoints for App Service apps
Use Azure Container Registry with Private Link
Migrate to Windows container in Azure
Deploy a container with Azure Pipelines
Deploy a container with GitHub Actions
Azure App Serviceprovides predefined application stacks on Windows, like ASP.NET or Node.js, that run on IIS. The preconfigured application stackslock down the operating system and prevent low-level access. Custom Windows containers don't have these restrictions. They let developers fully customize the containers and give containerized applications full access to Windows functionality.
This quickstart shows you how to deploy an ASP.NET app in a Windows image fromMicrosoft Artifact Registryto Azure App Service.
Prerequisites
An Azure account with an active subscription.Create an account for free.
Azure CLI
Connect to Azure
Sign into your Azure account by using theaz logincommand and following the prompt:
az login
az login
Create a resource group
Create a resource group with theaz group createcommand. An Azure resource group is a logical container into which Azure resources are deployed and managed.
az group create
The following example creates a resource group namedmyResourceGroupin theeastuslocation. To see all supported locations for App Service, run theaz appservice list-locationscommand.
az group create --name myResourceGroup --location eastus
az group create --name myResourceGroup --location eastus
Create your App Service Plan
Create an App Service plan in the resource group with theaz appservice plan createcommand.
az appservice plan create
The following example creates an App Service plan namedmyAppServicePlanin theP1V3pricing tier (--sku P1V3).
myAppServicePlan
--sku P1V3
az appservice plan create --resource-group myResourceGroup --location eastus --name myAppServicePlan --hyper-v --sku p1v3
az appservice plan create --resource-group myResourceGroup --location eastus --name myAppServicePlan --hyper-v --sku p1v3
Note
If you run into the error,The behavior of this command has been altered by the following extension: appservice-kube, remove theappservice-kubeextension.
appservice-kube
Create your web app
Create a custom containerweb appin themyAppServicePlanApp Service plan with theaz webapp createcommand. Don't forget to replacemyContainerAppwith a unique app name (valid characters area-z,0-9, and-).
myAppServicePlan
a-z
0-9
-
az webapp create --name myContainerApp --plan myAppServicePlan --resource-group myResourceGroup --deployment-container-image-name mcr.microsoft.com/azure-app-service/windows/parkingpage:latest
az webapp create --name myContainerApp --plan myAppServicePlan --resource-group myResourceGroup --deployment-container-image-name mcr.microsoft.com/azure-app-service/windows/parkingpage:latest
The Name parameter specifies the web app name.
The AppServicePlan parameter specifies the App Service Plan Name.
The Location parameter specifies the location.
The ResourceGroupName parameter specifies the name of the Resource Group.
The deployment-container-image-name parameter specifies a container image name and optional tag.
Browse to the app
Browse to the deployed application in your web browser at the URLhttp://<app-name>.azurewebsites.net.
http://<app-name>.azurewebsites.net

Clean up resources
Remove the resource group by using theaz group deletecommand:
az group delete --no-wait --name <resource_group>
az group delete --no-wait --name <resource_group>
Related content
Congratulations, you've successfully completed this quickstart.
The App Service app pulls from the container registry each time it starts. If you rebuild your image, just push it to your container registry. The app pulls in the updated image when it restarts. To tell your app to pull in the updated image immediately, restart it.
Configure custom container
How to use managed identities for App Service and Azure Functions
Application monitoring for Azure App Service overview
Azure Monitor overview
Secure with custom domain and certificate
Integrate your app with an Azure virtual network
Use Private Endpoints for App Service apps
Use Azure Container Registry with Private Link
Migrate to Windows container in Azure
Deploy a container with Azure Pipelines
Deploy a container with GitHub Actions
Feedback
Was this page helpful?
Additional resources