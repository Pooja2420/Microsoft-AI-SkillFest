Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Add messages to an Azure Storage queue using Functions
Article
2024-07-02
10 contributors
In this article
In Azure Functions, input and output bindings provide a declarative way to make data from external services available to your code. In this article, you use an output binding to create a message in a queue when an HTTP request triggers a function. You use Azure storage container to view the queue messages that your function creates.
Prerequisites
An Azure subscription. If you don't have one, create afree accountbefore you begin.
An Azure subscription. If you don't have one, create afree accountbefore you begin.
Follow the directions inCreate your first function in the Azure portal, omitting theClean up resourcesstep, to create the function app and function to use in this article.
Follow the directions inCreate your first function in the Azure portal, omitting theClean up resourcesstep, to create the function app and function to use in this article.
Add an output binding
In this section, you use the portal UI to add an Azure Queue Storage output binding to the function you created in the prerequisites. This binding makes it possible to write minimal code to create a message in a queue. You don't need to write code for such tasks as opening a storage connection, creating a queue, or getting a reference to a queue. The Azure Functions runtime and queue output binding take care of those tasks for you.
In the Azure portal, search for and select the function app that you created inCreate your first function from the Azure portal.
In the Azure portal, search for and select the function app that you created inCreate your first function from the Azure portal.
In your function app, select the function that you created.
In your function app, select the function that you created.
SelectIntegration, and then select+ Add output.
SelectIntegration, and then select+ Add output.

Select theAzure Queue Storagebinding type and add the settings as specified in the table that follows this screenshot:SettingSuggested valuedescriptionMessage parameter nameoutputQueueItemThe name of the output binding parameter.Queue nameoutqueueThe name of the queue to connect to in your storage account.Storage account connectionAzureWebJobsStorageYou can use the existing storage account connection used by your function app or create a new one.
Select theAzure Queue Storagebinding type and add the settings as specified in the table that follows this screenshot:

SelectOKto add the binding.
SelectOKto add the binding.
Now that you have an output binding defined, you need to update the code to use the binding to add messages to a queue.
Add code that uses the output binding
In this section, you add code that writes a message to the output queue. The message includes the value passed to the HTTP trigger in the query string. For example, if the query string includesname=Azure, the queue message isName passed to the function: Azure.
name=Azure
In your function, selectCode + Testto display the function code in the editor.
In your function, selectCode + Testto display the function code in the editor.
Update the function code, according to your function language:C#JavaScriptAdd anoutputQueueItemparameter to the method signature as shown in the following example:public static async Task<IActionResult> Run(HttpRequest req,
    ICollector<string> outputQueueItem, ILogger log)
{
    ...
}In the body of the function, just before thereturnstatement, add code that uses the parameter to create a queue message:outputQueueItem.Add("Name passed to the function: " + name);To create a queue message, add code that uses the output binding on thecontext.bindingsobject:context.bindings.outputQueueItem = "Name passed to the function: " + 
            (req.query.name || req.body.name);
Update the function code, according to your function language:
C#
JavaScript
Add anoutputQueueItemparameter to the method signature as shown in the following example:
public static async Task<IActionResult> Run(HttpRequest req,
    ICollector<string> outputQueueItem, ILogger log)
{
    ...
}
public static async Task<IActionResult> Run(HttpRequest req,
    ICollector<string> outputQueueItem, ILogger log)
{
    ...
}
In the body of the function, just before thereturnstatement, add code that uses the parameter to create a queue message:
return
outputQueueItem.Add("Name passed to the function: " + name);
outputQueueItem.Add("Name passed to the function: " + name);
To create a queue message, add code that uses the output binding on thecontext.bindingsobject:
context.bindings
context.bindings.outputQueueItem = "Name passed to the function: " + 
            (req.query.name || req.body.name);
context.bindings.outputQueueItem = "Name passed to the function: " + 
            (req.query.name || req.body.name);
SelectSaveto save your changes.
SelectSaveto save your changes.
Test the function
After the code changes are saved, selectTest.
After the code changes are saved, selectTest.
Confirm that your test matches this screenshot, and then selectRun.Notice that theRequest bodycontains thenamevalueAzure. This value appears in the queue message created when the function is invoked.As an alternative to selectingRun, you can call the function by entering a URL in a browser and specifying thenamevalue in the query string. This browser method is shown inCreate your first function from the Azure portal.
Confirm that your test matches this screenshot, and then selectRun.

Notice that theRequest bodycontains thenamevalueAzure. This value appears in the queue message created when the function is invoked.
name
As an alternative to selectingRun, you can call the function by entering a URL in a browser and specifying thenamevalue in the query string. This browser method is shown inCreate your first function from the Azure portal.
name
Check the logs to make sure that the function succeeded.A new queue namedoutqueueis created in your storage account by the Functions runtime when the output binding is first used. You use storage account to verify that the queue and a message in it were created.
Check the logs to make sure that the function succeeded.
A new queue namedoutqueueis created in your storage account by the Functions runtime when the output binding is first used. You use storage account to verify that the queue and a message in it were created.
Find the storage account connected to AzureWebJobsStorage
In your function app, expandSettings, and then selectEnvironment variables.
In your function app, expandSettings, and then selectEnvironment variables.
In theApp settingstab, selectAzureWebJobsStorage.
In theApp settingstab, selectAzureWebJobsStorage.

Locate and make note of the account name.
Locate and make note of the account name.

Examine the output queue
In the resource group for your function app, select the storage account that you're using.
In the resource group for your function app, select the storage account that you're using.
UnderQueue service, selectQueues, and select the queue namedoutqueue.The queue contains the message that the queue output binding created when you ran the HTTP-triggered function. If you invoked the function with the defaultnamevalue ofAzure, the queue message isName passed to the function: Azure.
UnderQueue service, selectQueues, and select the queue namedoutqueue.
The queue contains the message that the queue output binding created when you ran the HTTP-triggered function. If you invoked the function with the defaultnamevalue ofAzure, the queue message isName passed to the function: Azure.
name
Run the function again.A new message appears in the queue.
Run the function again.
A new message appears in the queue.
Clean up resources
In the preceding steps, you created Azure resources in a resource group. If you don't expect to need these resources in the future, you can delete them by deleting the resource group.
From the Azure portal menu orHomepage, selectResource groups. Then, on theResource groupspage, selectmyResourceGroup.
On themyResourceGrouppage, make sure that the listed resources are the ones you want to delete.
SelectDelete resource group, typemyResourceGroupin the text box to confirm, and then selectDelete.
Related content
In this article, you added an output binding to an existing function. For more information about binding to Queue Storage, seeQueue Storage trigger and bindings.
Azure Functions triggers and bindings conceptsLearn how Functions integrates with other services.
Azure Functions developer referenceProvides more technical information about the Functions runtime and a reference for coding functions and defining triggers and bindings.
Code and test Azure Functions locallyDescribes the options for developing your functions locally.
Feedback
Was this page helpful?
Additional resources