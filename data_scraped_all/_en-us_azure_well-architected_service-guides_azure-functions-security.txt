Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Architecture best practices for Azure Functions
Article
2025-02-13
4 contributors
In this article
Azure Functions is a serverless compute service that you can use to run event-driven code without having to manage the infrastructure directly. Azure Functions is a function as a service offering that abstracts the underlying infrastructure. This abstraction allows you to focus on your code. Azure Functions automatically scales based on demand and charges you only for the resources consumed during operation.
This article assumes that as an architect, you've reviewed thecompute decision treeand chose Azure Functions as the compute solution for your workload. The guidance in this article provides architectural recommendations that are mapped to the principles of theWell-Architected Framework pillars.
Important
How to use this guide
Each section has adesign checklistthat presents architectural areas of concern along with design strategies localized to the technology scope.
Also included are recommendations for the technology capabilities that can help materialize those strategies. The recommendations don't represent an exhaustive list of all configurations that are available for Azure Functions. Instead, they list the key recommendations mapped to the design perspectives. Use the recommendations to build your proof-of-concept or to optimize your existing environments.
Foundational architecture that demonstrates the key recommendations:Web applications architecture design.
Technology scope
This review focuses on the interrelated decisions for the following Azure resource:
Function apps
Note
This service guide builds on guidance in theAzure App Service (Web Apps)service guide. Azure Functions is a serverless compute service. Functions are deployed on App Service plans, which provide the underlying compute infrastructure for your workload. You can choose from several hosting plans.
The Consumption plan is fully managed and doesn't support access to the associated App Service instance. The Dedicated and Premium hosting plans give you the ability to configure and manage the App Service instance. Refer to the App Service service guide for recommendations and considerations when you choose the Dedicated or Premium hosting plan.
Reliability
The purpose of the Reliability pillar is to provide continued functionality bybuilding enough resilience and the ability to recover fast from failures.
TheReliability design principlesprovide a high-level design strategy applied for individual components, system flows, and the system as a whole.
Design checklist
Start your design strategy based on thedesign review checklist for Reliability. Determine its relevance to your business requirements while keeping in mind the specific features and configurations of Azure Functions. Extend the strategy to include more approaches as needed.
Understand the triggers:Ensure that you fully understand how Azure Functions is triggered. Triggers include HTTP requests, timers, queues, and more. Choose triggers that match the reliability requirements of your application.For example, if your function processes messages from a queue, ensure that the queue itself is resilient and that messages can be reprocessed if a failure occurs.
Understand the triggers:Ensure that you fully understand how Azure Functions is triggered. Triggers include HTTP requests, timers, queues, and more. Choose triggers that match the reliability requirements of your application.
For example, if your function processes messages from a queue, ensure that the queue itself is resilient and that messages can be reprocessed if a failure occurs.
Implement retries and durable patterns:Use built-in retry policies for transient failures. For more complex workflows, consider using the Durable Functions extension of Azure Functions. It provides state management and coordination across multiple function operations.Durable Functions is particularly useful for scenarios that require reliability across long-running workflows. It supports automatic retries and durable task management.
Implement retries and durable patterns:Use built-in retry policies for transient failures. For more complex workflows, consider using the Durable Functions extension of Azure Functions. It provides state management and coordination across multiple function operations.
Durable Functions is particularly useful for scenarios that require reliability across long-running workflows. It supports automatic retries and durable task management.
Ensure proper exception handling:Implement robust exception handling to help ensure that functions fail gracefully. Log errors and consider implementing alerting mechanisms for critical failures.
Ensure proper exception handling:Implement robust exception handling to help ensure that functions fail gracefully. Log errors and consider implementing alerting mechanisms for critical failures.
Plan for scalability:Azure Functions automatically scales out based on demand. Ensure that your application is designed to handle spikes by testing its performance under load.Consider using Application Insights to monitor performance and track how your functions scale in real time.
Plan for scalability:Azure Functions automatically scales out based on demand. Ensure that your application is designed to handle spikes by testing its performance under load.
Consider using Application Insights to monitor performance and track how your functions scale in real time.
Design for idempotency:Ensure that your functions can be safely retried without causing unintended side effects. Idempotency is crucial for functions that interact with external systems or modify data.
Design for idempotency:Ensure that your functions can be safely retried without causing unintended side effects. Idempotency is crucial for functions that interact with external systems or modify data.
Use Durable Functions for long-running operations:For operations that require orchestration or long-running processes, use Durable Functions to maintain state and help ensure reliability across multiple steps.
Use Durable Functions for long-running operations:For operations that require orchestration or long-running processes, use Durable Functions to maintain state and help ensure reliability across multiple steps.
Monitor the health of your solution:Integrate your Azure Functions solution into your overall workload health monitoring and alerting system.
Monitor the health of your solution:Integrate your Azure Functions solution into your overall workload health monitoring and alerting system.
Recommendations
Security
The purpose of the Security pillar is to provideconfidentiality, integrity, and availabilityguarantees to the workload.
TheSecurity design principlesprovide a high-level design strategy for achieving those goals by applying approaches to the technical design around Azure Functions.
Design checklist
Start your design strategy based on thedesign review checklist for Securityand identify vulnerabilities and controls to improve the security posture. Extend the strategy to include more approaches as needed.
Use managed identities:Enablemanaged identitiesfor your function apps to securely access other Azure services without needing to manage credentials.
Use managed identities:Enablemanaged identitiesfor your function apps to securely access other Azure services without needing to manage credentials.
Secure your function app with Microsoft Entra ID:Restrict access to your functions by configuring Azure Functions to requireMicrosoft Entra ID authentication.
Secure your function app with Microsoft Entra ID:Restrict access to your functions by configuring Azure Functions to requireMicrosoft Entra ID authentication.
Apply network security controls:Understand the availableAzure Functions networking optionsfor your hosting model to help secure the Azure Functions networking configuration. Secure the networking to meet your requirements.
Apply network security controls:Understand the availableAzure Functions networking optionsfor your hosting model to help secure the Azure Functions networking configuration. Secure the networking to meet your requirements.
Recommendations
Cost Optimization
Cost Optimization focuses ondetecting spend patterns, prioritizing investments in critical areas, and optimizing in othersto meet the organization's budget while meeting business requirements.
TheCost Optimization design principlesprovide a high-level design strategy for achieving those goals and making tradeoffs as necessary in the technical design related to Azure Functions and its environment.
Design checklist
Start your design strategy based on thedesign review checklist for Cost Optimizationfor investments. Fine-tune the design so that the workload is aligned with the budget that's allocated for the workload. Your design should use the right Azure capabilities, monitor investments, and find opportunities to optimize over time.
Choose the right pricing plan:Azure Functions has multiple pricing plans, including the Consumption plan, Premium plan, and Dedicated (App Service) plan. Choose apricing planthat aligns with your workload and cost considerations.The Consumption plan is ideal for unpredictable workloads that have infrequent operations because you only pay for the operation time and resources consumed. When your app is idle, you aren't charged.
Choose the right pricing plan:Azure Functions has multiple pricing plans, including the Consumption plan, Premium plan, and Dedicated (App Service) plan. Choose apricing planthat aligns with your workload and cost considerations.
The Consumption plan is ideal for unpredictable workloads that have infrequent operations because you only pay for the operation time and resources consumed. When your app is idle, you aren't charged.
Optimize operation time:Reduce operation time by optimizing function code. Minimize the use of external dependencies and optimize code logic to decrease the duration of each operation.
Optimize operation time:Reduce operation time by optimizing function code. Minimize the use of external dependencies and optimize code logic to decrease the duration of each operation.
Monitor and analyze costs:Regularly monitor function app usage and costs by usingMicrosoft Cost Managementand set up alerts to detect cost anomalies.
Monitor and analyze costs:Regularly monitor function app usage and costs by usingMicrosoft Cost Managementand set up alerts to detect cost anomalies.
Recommendations
Operational Excellence
Operational Excellence primarily focuses on procedures fordevelopment practices, observability, and release management.
TheOperational Excellence design principlesprovide a high-level design strategy for achieving those goals for the operational requirements of the workload.
Design checklist
Start your design strategy based on thedesign review checklist for Operational Excellencefor defining processes for observability, testing, and deployment related to Azure Functions.
Automate deployments:Use continuous integration and continuous delivery (CI/CD) pipelines to automate the deployment of your function apps. Integrate with Azure DevOps or GitHub Actions for seamless deployment workflows.
Automate deployments:Use continuous integration and continuous delivery (CI/CD) pipelines to automate the deployment of your function apps. Integrate with Azure DevOps or GitHub Actions for seamless deployment workflows.
Implement health monitoring:Use Azure Monitor and Application Insights to track the health and performance of your functions. Set up alerts for critical metrics and use custom dashboards for real-time insights. For more information, seeMonitor Azure Functions.
Implement health monitoring:Use Azure Monitor and Application Insights to track the health and performance of your functions. Set up alerts for critical metrics and use custom dashboards for real-time insights. For more information, seeMonitor Azure Functions.
Deploy your solution safely:Understand thedeployment modelsavailable for Azure Functions and adopt the model that best meets your safe deployment practices.
Deploy your solution safely:Understand thedeployment modelsavailable for Azure Functions and adopt the model that best meets your safe deployment practices.
Plan for disaster recovery (DR):Implement DR strategiesby using cross-region DR and availability zones for critical functions.
Plan for disaster recovery (DR):Implement DR strategiesby using cross-region DR and availability zones for critical functions.
Recommendations
Performance Efficiency
Performance Efficiency is aboutmaintaining user experience even when there's an increase in loadby managing capacity. The strategy includes scaling resources, identifying and optimizing potential bottlenecks, and optimizing for peak performance.
ThePerformance Efficiency design principlesprovide a high-level design strategy for achieving those capacity goals against the expected usage.
Design checklist
Start your design strategy based on thedesign review checklist for Performance Efficiency. Define a baseline that's based on key performance indicators for Azure Functions.
Optimize cold starts:Minimize the effects of cold starts by using Premium Flex plans that provide prewarmed instances or ensure that your functions remain warm by using strategies such as the Azure Functions warmup trigger.
Optimize cold starts:Minimize the effects of cold starts by using Premium Flex plans that provide prewarmed instances or ensure that your functions remain warm by using strategies such as the Azure Functions warmup trigger.
Optimize function code:Write efficient code to reduce operation time and resource consumption. Avoid long-running operations and optimize external service calls.
Optimize function code:Write efficient code to reduce operation time and resource consumption. Avoid long-running operations and optimize external service calls.
Enable autoscaling:Leverage the autoscaling capabilities of Azure Functions to automatically scale out based on demand. Ensure that your scaling rules are well-defined and tested.
Enable autoscaling:Leverage the autoscaling capabilities of Azure Functions to automatically scale out based on demand. Ensure that your scaling rules are well-defined and tested.
Monitor performance metrics:Use Application Insights tomonitor key performance metrics, such as operation time, CPU, and memory usage. Set up alerts for performance degradation.
Monitor performance metrics:Use Application Insights tomonitor key performance metrics, such as operation time, CPU, and memory usage. Set up alerts for performance degradation.
Recommendations
Azure policies
Azure provides an extensive set of built-in policies related to Azure Functions and its dependencies. A set of Azure policies can audit some of the preceding recommendations. For example, you can check whether:
All function apps have managed identities enabled.
Function apps are using only private endpoints for network security.
Diagnostic logging is enabled for all function apps.
For comprehensive governance, review theAzure Policy built-in definitionsand other policies that might affect the security of the network layer.
Azure Advisor recommendations
Azure Advisor is a personalized cloud consultant that helps you follow best practices to optimize your Azure deployments.
For more information, seeAzure Advisor.
Next steps
Consider the following resources to further explore the recommendations highlighted in this document:
Reference architectures:Serverless web application architectureServerless event processing
Serverless web application architecture
Serverless event processing
Feedback
Was this page helpful?
Additional resources