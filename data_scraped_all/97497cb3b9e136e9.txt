Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Azure Event Hubs output binding for Azure Functions
Article
2024-04-26
16 contributors
In this article
This article explains how to work withAzure Event Hubsbindings for Azure Functions. Azure Functions supports trigger and output bindings for Event Hubs.
For information on setup and configuration details, see theoverview.
Use the Event Hubs output binding to write events to an event stream. You must have send permission to an event hub to write events to it.
Make sure the required package references are in place before you try to implement an output binding.
Important
This article uses tabs to support multiple versions of the Node.js programming model. The v4 model is generally available and is designed to have a more flexible and intuitive experience for JavaScript and TypeScript developers. For more details about how the v4 model works, refer to theAzure Functions Node.js developer guide. To learn more about the differences between v3 and v4, refer to themigration guide.
Azure Functions supports two programming models for Python. The way that you define your bindings depends on your chosen programming model.
v2
v1
The Python v2 programming model lets you define bindings using decorators directly in your Python function code. For more information, see thePython developer guide.
The Python v1 programming model requires you to define bindings in a separatefunction.jsonfile in the function folder. For more information, see thePython developer guide.
This article supports both programming models.
Example
Isolated worker model
In-process model
The following example shows aC# functionthat writes a message string to an event hub, using the method return value as the output:
[Function(nameof(EventHubFunction))]
[FixedDelayRetry(5, "00:00:10")]
[EventHubOutput("dest", Connection = "EventHubConnection")]
public string EventHubFunction(
    [EventHubTrigger("src", Connection = "EventHubConnection")] string[] input,
    FunctionContext context)
{
    _logger.LogInformation("First Event Hubs triggered message: {msg}", input[0]);

    var message = $"Output message created at {DateTime.Now}";
    return message;
}
[Function(nameof(EventHubFunction))]
[FixedDelayRetry(5, "00:00:10")]
[EventHubOutput("dest", Connection = "EventHubConnection")]
public string EventHubFunction(
    [EventHubTrigger("src", Connection = "EventHubConnection")] string[] input,
    FunctionContext context)
{
    _logger.LogInformation("First Event Hubs triggered message: {msg}", input[0]);

    var message = $"Output message created at {DateTime.Now}";
    return message;
}
Important
Support will end for the in-process model on November 10, 2026. We highly recommend that youmigrate your apps to the isolated worker modelfor full support.
The following example shows aC# functionthat writes a message to an event hub, using the method return value as the output:
[FunctionName("EventHubOutput")]
[return: EventHub("outputEventHubMessage", Connection = "EventHubConnectionAppSetting")]
public static string Run([TimerTrigger("0 */5 * * * *")] TimerInfo myTimer, ILogger log)
{
    log.LogInformation($"C# Timer trigger function executed at: {DateTime.Now}");
    return $"{DateTime.Now}";
}
[FunctionName("EventHubOutput")]
[return: EventHub("outputEventHubMessage", Connection = "EventHubConnectionAppSetting")]
public static string Run([TimerTrigger("0 */5 * * * *")] TimerInfo myTimer, ILogger log)
{
    log.LogInformation($"C# Timer trigger function executed at: {DateTime.Now}");
    return $"{DateTime.Now}";
}
The following example shows how to use theIAsyncCollectorinterface to send a batch of messages. This scenario is common when you are processing messages coming from one event hub and sending the result to another event hub.
IAsyncCollector
[FunctionName("EH2EH")]
public static async Task Run(
    [EventHubTrigger("source", Connection = "EventHubConnectionAppSetting")] EventData[] events,
    [EventHub("dest", Connection = "EventHubConnectionAppSetting")]IAsyncCollector<EventData> outputEvents,
    ILogger log)
{
    foreach (EventData eventData in events)
    {
        // Do some processing:
        string newEventBody = DoSomething(eventData);

        // Queue the message to be sent in the background by adding it to the collector.
        // If only the event is passed, an Event Hubs partition to be assigned via
        // round-robin for each batch.
        await outputEvents.AddAsync(new EventData(newEventBody));

        // If your scenario requires that certain events are grouped together in an
        // Event Hubs partition, you can specify a partition key.  Events added with 
        // the same key will always be assigned to the same partition.        
        await outputEvents.AddAsync(new EventData(newEventBody), "sample-key");
    }
}
[FunctionName("EH2EH")]
public static async Task Run(
    [EventHubTrigger("source", Connection = "EventHubConnectionAppSetting")] EventData[] events,
    [EventHub("dest", Connection = "EventHubConnectionAppSetting")]IAsyncCollector<EventData> outputEvents,
    ILogger log)
{
    foreach (EventData eventData in events)
    {
        // Do some processing:
        string newEventBody = DoSomething(eventData);

        // Queue the message to be sent in the background by adding it to the collector.
        // If only the event is passed, an Event Hubs partition to be assigned via
        // round-robin for each batch.
        await outputEvents.AddAsync(new EventData(newEventBody));

        // If your scenario requires that certain events are grouped together in an
        // Event Hubs partition, you can specify a partition key.  Events added with 
        // the same key will always be assigned to the same partition.        
        await outputEvents.AddAsync(new EventData(newEventBody), "sample-key");
    }
}
Model v4
Model v3
The following example shows a timer triggeredTypeScript functionthat sends a single message to an event hub:
import { app, InvocationContext, output, Timer } from '@azure/functions';

export async function timerTrigger1(myTimer: Timer, context: InvocationContext): Promise<string> {
    const timeStamp = new Date().toISOString();
    return `Message created at: ${timeStamp}`;
}

app.timer('timerTrigger1', {
    schedule: '0 */5 * * * *',
    return: output.eventHub({
        eventHubName: 'myeventhub',
        connection: 'MyEventHubSendAppSetting',
    }),
    handler: timerTrigger1,
});
import { app, InvocationContext, output, Timer } from '@azure/functions';

export async function timerTrigger1(myTimer: Timer, context: InvocationContext): Promise<string> {
    const timeStamp = new Date().toISOString();
    return `Message created at: ${timeStamp}`;
}

app.timer('timerTrigger1', {
    schedule: '0 */5 * * * *',
    return: output.eventHub({
        eventHubName: 'myeventhub',
        connection: 'MyEventHubSendAppSetting',
    }),
    handler: timerTrigger1,
});
To output multiple messages, return an array instead of a single object. For example:
const timeStamp = new Date().toISOString();
const message = `Message created at: ${timeStamp}`;
return [`1: ${message}`, `2: ${message}`];
const timeStamp = new Date().toISOString();
const message = `Message created at: ${timeStamp}`;
return [`1: ${message}`, `2: ${message}`];
TypeScript samples are not documented for model v3.
Model v4
Model v3
The following example shows a timer triggeredJavaScript functionthat sends a single message to an event hub:
const { app, output } = require('@azure/functions');

const eventHubOutput = output.eventHub({
    eventHubName: 'myeventhub',
    connection: 'MyEventHubSendAppSetting',
});

app.timer('timerTrigger1', {
    schedule: '0 */5 * * * *',
    return: eventHubOutput,
    handler: (myTimer, context) => {
        const timeStamp = new Date().toISOString();
        return `Message created at: ${timeStamp}`;
    },
});
const { app, output } = require('@azure/functions');

const eventHubOutput = output.eventHub({
    eventHubName: 'myeventhub',
    connection: 'MyEventHubSendAppSetting',
});

app.timer('timerTrigger1', {
    schedule: '0 */5 * * * *',
    return: eventHubOutput,
    handler: (myTimer, context) => {
        const timeStamp = new Date().toISOString();
        return `Message created at: ${timeStamp}`;
    },
});
To output multiple messages, return an array instead of a single object. For example:
const timeStamp = new Date().toISOString();
const message = `Message created at: ${timeStamp}`;
return [`1: ${message}`, `2: ${message}`];
const timeStamp = new Date().toISOString();
const message = `Message created at: ${timeStamp}`;
return [`1: ${message}`, `2: ${message}`];
The following example shows an event hub trigger binding in afunction.jsonfile and a function that uses the binding. The function writes an output message to an event hub.
The following example shows an Event Hubs binding data in thefunction.jsonfile, which is different for version 1.x of the Functions runtime compared to later versions.
{
    "type": "eventHub",
    "name": "outputEventHubMessage",
    "eventHubName": "myeventhub",
    "connection": "MyEventHubSendAppSetting",
    "direction": "out"
}
{
    "type": "eventHub",
    "name": "outputEventHubMessage",
    "eventHubName": "myeventhub",
    "connection": "MyEventHubSendAppSetting",
    "direction": "out"
}
Here's JavaScript code that sends a single message:
module.exports = function (context, myTimer) {
    var timeStamp = new Date().toISOString();
    context.log('Message created at: ', timeStamp);   
    context.bindings.outputEventHubMessage = "Message created at: " + timeStamp;
    context.done();
};
module.exports = function (context, myTimer) {
    var timeStamp = new Date().toISOString();
    context.log('Message created at: ', timeStamp);   
    context.bindings.outputEventHubMessage = "Message created at: " + timeStamp;
    context.done();
};
Here's JavaScript code that sends multiple messages:
module.exports = function(context) {
    var timeStamp = new Date().toISOString();
    var message = 'Message created at: ' + timeStamp;

    context.bindings.outputEventHubMessage = [];

    context.bindings.outputEventHubMessage.push("1 " + message);
    context.bindings.outputEventHubMessage.push("2 " + message);
    context.done();
};
module.exports = function(context) {
    var timeStamp = new Date().toISOString();
    var message = 'Message created at: ' + timeStamp;

    context.bindings.outputEventHubMessage = [];

    context.bindings.outputEventHubMessage.push("1 " + message);
    context.bindings.outputEventHubMessage.push("2 " + message);
    context.done();
};
Complete PowerShell examples are pending.
The following example shows an event hub trigger binding and a Python function that uses the binding. The function writes a message to an event hub. The example depends on whether you use thev1 or v2 Python programming model.
v2
v1
import logging
import azure.functions as func

app = func.FunctionApp()

@app.function_name(name="eventhub_output")
@app.route(route="eventhub_output")
@app.event_hub_output(arg_name="event",
                      event_hub_name="<EVENT_HUB_NAME>",
                      connection="<CONNECTION_SETTING>")
def eventhub_output(req: func.HttpRequest, event: func.Out[str]):
    body = req.get_body()
    if body is not None:
        event.set(body.decode('utf-8'))
    else:    
        logging.info('req body is none')
    return 'ok'
import logging
import azure.functions as func

app = func.FunctionApp()

@app.function_name(name="eventhub_output")
@app.route(route="eventhub_output")
@app.event_hub_output(arg_name="event",
                      event_hub_name="<EVENT_HUB_NAME>",
                      connection="<CONNECTION_SETTING>")
def eventhub_output(req: func.HttpRequest, event: func.Out[str]):
    body = req.get_body()
    if body is not None:
        event.set(body.decode('utf-8'))
    else:    
        logging.info('req body is none')
    return 'ok'
Here's Python code that sends multiple messages:
import logging
import azure.functions as func
from typing import List

app = func.FunctionApp()

@app.function_name(name="eventhub_output")
@app.route(route="eventhub_output")
@app.event_hub_output(arg_name="event",
                      event_hub_name="<EVENT_HUB_NAME>",
                      connection="<CONNECTION_SETTING>")

def eventhub_output(req: func.HttpRequest, event: func.Out[List[str]]) -> func.HttpResponse:
    my_messages=["message1", "message2","message3"]
    event.set(my_messages)
    return func.HttpResponse(f"Messages sent")
import logging
import azure.functions as func
from typing import List

app = func.FunctionApp()

@app.function_name(name="eventhub_output")
@app.route(route="eventhub_output")
@app.event_hub_output(arg_name="event",
                      event_hub_name="<EVENT_HUB_NAME>",
                      connection="<CONNECTION_SETTING>")

def eventhub_output(req: func.HttpRequest, event: func.Out[List[str]]) -> func.HttpResponse:
    my_messages=["message1", "message2","message3"]
    event.set(my_messages)
    return func.HttpResponse(f"Messages sent")
The following examples show Event Hubs binding data in thefunction.jsonfile.
{
    "type": "eventHub",
    "name": "$return",
    "eventHubName": "myeventhub",
    "connection": "MyEventHubSendAppSetting",
    "direction": "out"
}
{
    "type": "eventHub",
    "name": "$return",
    "eventHubName": "myeventhub",
    "connection": "MyEventHubSendAppSetting",
    "direction": "out"
}
Here's Python code that sends a single message:
import datetime
import logging
import azure.functions as func


def main(timer: func.TimerRequest) -> str:
    timestamp = datetime.datetime.utcnow()
    logging.info('Message created at: %s', timestamp)
    return 'Message created at: {}'.format(timestamp)
import datetime
import logging
import azure.functions as func


def main(timer: func.TimerRequest) -> str:
    timestamp = datetime.datetime.utcnow()
    logging.info('Message created at: %s', timestamp)
    return 'Message created at: {}'.format(timestamp)
Here's Python code that sends multiple messages:
import logging
from typing import List
import azure.functions as func


def main(req: func.HttpRequest, messages:func.Out[List[str]]) -> func.HttpResponse:
    logging.info('Python HTTP trigger function processed a request.')
    messages.set([{"message1"}, {"message2"}])
    return func.HttpResponse(f"Messages sent")
import logging
from typing import List
import azure.functions as func


def main(req: func.HttpRequest, messages:func.Out[List[str]]) -> func.HttpResponse:
    logging.info('Python HTTP trigger function processed a request.')
    messages.set([{"message1"}, {"message2"}])
    return func.HttpResponse(f"Messages sent")
The following example shows a Java function that writes a message containing the current time to an event hub.
@FunctionName("sendTime")
@EventHubOutput(name = "event", eventHubName = "samples-workitems", connection = "AzureEventHubConnection")
public String sendTime(
   @TimerTrigger(name = "sendTimeTrigger", schedule = "0 */5 * * * *") String timerInfo)  {
     return LocalDateTime.now().toString();
 }
@FunctionName("sendTime")
@EventHubOutput(name = "event", eventHubName = "samples-workitems", connection = "AzureEventHubConnection")
public String sendTime(
   @TimerTrigger(name = "sendTimeTrigger", schedule = "0 */5 * * * *") String timerInfo)  {
     return LocalDateTime.now().toString();
 }
In theJava functions runtime library, use the@EventHubOutputannotation on parameters whose value would be published to Event Hubs.  The parameter should be of typeOutputBinding<T>, whereTis a POJO or any native Java type.
@EventHubOutput
OutputBinding<T>
T
Attributes
Bothin-processandisolated worker processC# libraries use attribute to configure the binding. C# script instead uses a function.json configuration file as described in theC# scripting guide.
Isolated worker model
In-process model
Use the [EventHubOutputAttribute] to define an output binding to an event hub, which supports the following properties.
Use theEventHubAttributeto define an output binding to an event hub, which supports the following properties.
Decorators
Applies only to the Python v2 programming model.
For Python v2 functions defined using a decorator, these properties are supported forevent_hub_output:
event_hub_output
arg_name
event_hub_name
connection
For Python functions defined by usingfunction.json, see theConfigurationsection.
Annotations
In theJava functions runtime library, use theEventHubOutputannotation on parameters whose value would be published to Event Hubs. The following settings are supported on the annotation:
name
dataType
eventHubName
connection
Configuration
Applies only to the Python v1 programming model.
Model v4
Model v3
The following table explains the properties that you can set on theoptionsobject passed to theoutput.eventHub()method.
options
output.eventHub()
The following table explains the binding configuration properties that you set in thefunction.jsonfile.
eventHub
out
The following table explains the binding configuration properties that you set in thefunction.jsonfile, which differs by runtime version.
Functions 2.x+
Functions 1.x
eventHub
out
eventHub
out
When you're developing locally, add your application settings in thelocal.settings.json filein theValuescollection.
Values
Usage
The parameter type supported by the Event Hubs output binding depends on the Functions runtime version, the extension package version, and the C# modality used.
Extension v5.x+
Extension v3.x+
Extension v5.x+
Extension v3.x+
In-process C# class library functions supports the following types:
Azure.Messaging.EventHubs.EventData
String
Byte array
Plain-old CLR object (POCO)
This version ofEventDatadrops support for the legacyBodytype in favor ofEventBody.
Body
Send messages by using a method parameter such asout string paramName. To write multiple messages, you can useICollector<EventData>orIAsyncCollector<EventData>in place ofout string.  Partition keys may only be used withIAsyncCollector<EventData>.
out string paramName
ICollector<EventData>
IAsyncCollector<EventData>
out string
IAsyncCollector<EventData>
In-process C# class library functions supports the following types:
Microsoft.Azure.EventHubs.EventData
String
Byte array
Plain-old CLR object (POCO)
Send messages by using a method parameter such asout string paramName. To write multiple messages, you can useICollector<string>orIAsyncCollector<string>in place ofout string.
out string paramName
ICollector<string>
IAsyncCollector<string>
out string
When you want the function to write a single event, the Event Hubs output binding can bind to the following types:
string
byte[]
When you want the function to write multiple events, the Event Hubs output binding can bind to the following types:
T[]
T
For other output scenarios, create and use anEventHubProducerClientwith other types fromAzure.Messaging.EventHubsdirectly. SeeRegister Azure clientsfor an example of using dependency injection to create a client type from the Azure SDK.
Requires you to define a custom type, or use a string. Additional options are available inExtension v5.x+.
There are two options for outputting an Event Hubs message from a function by using theEventHubOutputannotation:
Return value: By applying the annotation to the function itself, the return value of the function is persisted as an Event Hubs message.
Return value: By applying the annotation to the function itself, the return value of the function is persisted as an Event Hubs message.
Imperative: To explicitly set the message value, apply the annotation to a specific parameter of the typeOutputBinding<T>, whereTis a POJO or any native Java type. With this configuration, passing a value to thesetValuemethod persists the value as an Event Hubs message.
Imperative: To explicitly set the message value, apply the annotation to a specific parameter of the typeOutputBinding<T>, whereTis a POJO or any native Java type. With this configuration, passing a value to thesetValuemethod persists the value as an Event Hubs message.
OutputBinding<T>
T
setValue
Complete PowerShell examples are pending.
Model v4
Model v3
Access the output message by returning the value directly or usingcontext.extraOutputs.set().
context.extraOutputs.set()
Access the output event by usingcontext.bindings.<name>where<name>is the value specified in thenameproperty offunction.json.
context.bindings.<name>
<name>
name
There are two options for outputting an Event Hubs message from a function:
Return value: Set thenameproperty infunction.jsonto$return. With this configuration, the function's return value is persisted as an Event Hubs message.
Return value: Set thenameproperty infunction.jsonto$return. With this configuration, the function's return value is persisted as an Event Hubs message.
name
$return
Imperative: Pass a value to thesetmethod of the parameter declared as anOuttype. The value passed tosetis persisted as an Event Hubs message.
Imperative: Pass a value to thesetmethod of the parameter declared as anOuttype. The value passed tosetis persisted as an Event Hubs message.
set
Connections
Theconnectionproperty is a reference to environment configuration which specifies how the app should connect to Event Hubs. It may specify:
connection
The name of an application setting containing aconnection string
The name of a shared prefix for multiple application settings, together defining anidentity-based connection.
If the configured value is both an exact match for a single setting and a prefix match for other settings, the exact match is used.
Connection string
Obtain this connection string by clicking theConnection Informationbutton for thenamespace, not the event hub itself. The connection string must be for an Event Hubs namespace, not the event hub itself.
When used for triggers, the connection string must have at least "read" permissions to activate the function. When used for output bindings, the connection string must have "send" permissions to send messages to the event stream.
This connection string should be stored in an application setting with a name matching the value specified by theconnectionproperty of the binding configuration.
connection
Identity-based connections
If you are usingversion 5.x or higher of the extension, instead of using a connection string with a secret, you can have the app use anMicrosoft Entra identity. To do this, you would define settings under a common prefix which maps to theconnectionproperty in the trigger and binding configuration.
connection
In this mode, the extension requires the following properties:
<CONNECTION_NAME_PREFIX>__fullyQualifiedNamespace
myeventhubns.servicebus.windows.net
Additional properties may be set to customize the connection. SeeCommon properties for identity-based connections.
Note
When usingAzure App ConfigurationorKey Vaultto provide settings for Managed Identity connections, setting names should use a valid key separator such as:or/in place of the__to ensure names are resolved correctly.
:
/
__
For example,<CONNECTION_NAME_PREFIX>:fullyQualifiedNamespace.
<CONNECTION_NAME_PREFIX>:fullyQualifiedNamespace
When hosted in the Azure Functions service, identity-based connections use amanaged identity. The system-assigned identity is used by default, although a user-assigned identity can be specified with thecredentialandclientIDproperties. Note that configuring a user-assigned identity with a resource ID isnotsupported. When run in other contexts, such as local development, your developer identity is used instead, although this can be customized. SeeLocal development with identity-based connections.
credential
clientID
Whatever identity is being used must have permissions to perform the intended actions. For most Azure services, this means you need toassign a role in Azure RBAC, using either built-in or custom roles which provide those permissions.
Important
Some permissions might be exposed by the target service that are not necessary for all contexts. Where possible, adhere to theprinciple of least privilege, granting the identity only required privileges. For example, if the app only needs to be able to read from a data source, use a role that only has permission to read. It would be inappropriate to assign a role that also allows writing to that service, as this would be excessive permission for a read operation. Similarly, you would want to ensure the role assignment is scoped only over the resources that need to be read.
You will need to create a role assignment that provides access to your event hub at runtime. The scope of the role assignment can be for an Event Hubs namespace, or the event hub itself. Management roles likeOwnerare not sufficient. The following table shows built-in roles that are recommended when using the Event Hubs extension in normal operation. Your application may require additional permissions based on the code you write.
Exceptions and return codes
Next steps
Respond to events sent to an event hub event stream (Trigger)
Feedback
Was this page helpful?
Additional resources