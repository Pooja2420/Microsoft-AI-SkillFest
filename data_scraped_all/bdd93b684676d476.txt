Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Copy data from and to Oracle by using Azure Data Factory or Azure Synapse Analytics
Article
2025-03-20
21 contributors
In this article
APPLIES TO:Azure Data FactoryAzure Synapse Analytics
Tip
Try outData Factory in Microsoft Fabric, an all-in-one analytics solution for enterprises.Microsoft Fabriccovers everything from data movement to data science, real-time analytics, business intelligence, and reporting. Learn how tostart a new trialfor free!
This article outlines how to use the copy activity in Azure Data Factory to copy data from and to an Oracle database. It builds on thecopy activity overview.
Supported capabilities
This Oracle connector is supported for the following capabilities:
â  Azure integration runtime â¡ Self-hosted integration runtime
For a list of data stores that are supported as sources or sinks by the copy activity, see theSupported data storestable.
Specifically, this Oracle connector supports:
The following versions of an Oracle database for version 2.0 (Preview):Oracle Database 19c or later
Oracle Database 19c or later
The following versions of an Oracle database for version 1.0:Oracle 19c R1 (19.1) and higherOracle 18c R1 (18.1) and higherOracle 12c R1 (12.1) and higherOracle 11g R1 (11.1) and higherOracle 10g R1 (10.1) and higherOracle 9i R2 (9.2) and higherOracle 8i R3 (8.1.7) and higherOracle Database Cloud Exadata Service
Oracle 19c R1 (19.1) and higher
Oracle 18c R1 (18.1) and higher
Oracle 12c R1 (12.1) and higher
Oracle 11g R1 (11.1) and higher
Oracle 10g R1 (10.1) and higher
Oracle 9i R2 (9.2) and higher
Oracle 8i R3 (8.1.7) and higher
Oracle Database Cloud Exadata Service
Parallel copying from an Oracle source. See theParallel copy from Oraclesection for details.
Note
Oracle proxy server isn't supported.
Prerequisites
If your data store is located inside an on-premises network, an Azure virtual network, or Amazon Virtual Private Cloud, you need to configure aself-hosted integration runtimeto connect to it.
If your data store is a managed cloud data service, you can use the Azure Integration Runtime. If the access is restricted to IPs that are approved in the firewall rules, you can addAzure Integration Runtime IPsto the allow list.
You can also use themanaged virtual network integration runtimefeature in Azure Data Factory to access the on-premises network without installing and configuring a self-hosted integration runtime.
For more information about the network security mechanisms and options supported by Data Factory, seeData access strategies.
The integration runtime provides a built-in Oracle driver. Therefore, you don't need to manually install a driver when you copy data from and to Oracle.
Get started
To perform the Copy activity with a pipeline, you can use one of the following tools or SDKs:
The Copy Data tool
The Azure portal
The .NET SDK
The Python SDK
Azure PowerShell
The REST API
The Azure Resource Manager template
Create a linked service to Oracle using UI
Use the following steps to create a linked service to Oracle in the Azure portal UI.
Browse to the Manage tab in your Azure Data Factory or Synapse workspace and select Linked Services, then click New:Azure Data FactoryAzure Synapse
Browse to the Manage tab in your Azure Data Factory or Synapse workspace and select Linked Services, then click New:
Azure Data Factory
Azure Synapse


Search for Oracle and select the Oracle connector.
Search for Oracle and select the Oracle connector.

Configure the service details, test the connection, and create the new linked service.
Configure the service details, test the connection, and create the new linked service.

Connector configuration details
The following sections provide details about properties that are used to define entities specific to the Oracle connector.
Linked service properties
The Oracle connector version 2.0 (Preview) supports TLS 1.3. Refer to thissectionto upgrade your Oracle connector version from version 1.0. For the property details, see the corresponding sections.
Version 2.0 (Preview)
Version 1.0
Version 2.0 (Preview)
The Oracle linked service supports the following properties when apply version 2.0 (Preview):
2.0
More connection properties you can set in linked service per your case:
accepted
rejected
requested
required
required
AES128
AES192
AES256
3DES112
3DES168
(AES256)
accepted
rejected
requested
required
required
SHA1
SHA256
SHA384
SHA512
(SHA512)
Example:
{
    "name": "OracleLinkedService",
    "properties": {
        "type": "Oracle",
        "version": "2.0",
        "typeProperties": {
            "server": "<server name>", 
            "username": "<user name>", 
            "password": "<password>", 
            "authenticationType": "<authentication type>"
        },
        "connectVia": {
            "referenceName": "<name of Integration Runtime>",
            "type": "IntegrationRuntimeReference"
        }
    }
}
{
    "name": "OracleLinkedService",
    "properties": {
        "type": "Oracle",
        "version": "2.0",
        "typeProperties": {
            "server": "<server name>", 
            "username": "<user name>", 
            "password": "<password>", 
            "authenticationType": "<authentication type>"
        },
        "connectVia": {
            "referenceName": "<name of Integration Runtime>",
            "type": "IntegrationRuntimeReference"
        }
    }
}
Example: store password in Azure Key Vault
{
    "name": "OracleLinkedService",
    "properties": {
        "type": "Oracle",
        "version": "2.0",
        "typeProperties": {
            "server": "<server name>", 
            "username": "<user name>", 
            "authenticationType": "<authentication type>",
            "password": { 
                "type": "AzureKeyVaultSecret", 
                "store": { 
                    "referenceName": "<Azure Key Vault linked service name>", 
                    "type": "LinkedServiceReference" 
                }, 
                "secretName": "<secretName>" 
            }
        },
        "connectVia": {
            "referenceName": "<name of Integration Runtime>",
            "type": "IntegrationRuntimeReference"
        }
    }
}
{
    "name": "OracleLinkedService",
    "properties": {
        "type": "Oracle",
        "version": "2.0",
        "typeProperties": {
            "server": "<server name>", 
            "username": "<user name>", 
            "authenticationType": "<authentication type>",
            "password": { 
                "type": "AzureKeyVaultSecret", 
                "store": { 
                    "referenceName": "<Azure Key Vault linked service name>", 
                    "type": "LinkedServiceReference" 
                }, 
                "secretName": "<secretName>" 
            }
        },
        "connectVia": {
            "referenceName": "<name of Integration Runtime>",
            "type": "IntegrationRuntimeReference"
        }
    }
}
server
Forserverproperty, you can specify it in one of the following three formats:
server
The following list shows the supported parameters used inserver. If you use parameters that are not in the following list, your connection fails.
server
When using the Azure integration runtime:HOSTPORTPROTOCOLSERVICE_NAMESIDINSTANCE_NAMESERVERCONNECT_TIMEOUTRETRY_COUNTRETRY_DELAYSSL_VERSIONSSL_SERVER_DN_MATCHSSL_SERVER_CERT_DN
When using the Azure integration runtime:
HOSTPORTPROTOCOLSERVICE_NAMESIDINSTANCE_NAMESERVERCONNECT_TIMEOUTRETRY_COUNTRETRY_DELAYSSL_VERSIONSSL_SERVER_DN_MATCHSSL_SERVER_CERT_DN
When using the self-hosted integration runtime:HOSTPORTPROTOCOLENABLEEXPIRE_TIMEFAILOVERLOAD_BALANCERECV_BUF_SIZESDUSEND_BUF_SIZESOURCE_ROUTETYPE_OF_SERVICECOLOCATION_TAGCONNECTION_ID_PREFIXFAILOVER_MODEGLOBAL_NAMEHSINSTANCE_NAMEPOOL_BOUNDARYPOOL_CONNECTION_CLASSPOOL_NAMEPOOL_PURITYRDB_DATABASESHARDING_KEYSHARDING_KEY_IDSUPER_SHARDING_KEYSERVERSERVICE_NAMESIDTUNNEL_SERVICE_NAMESSL_CLIENT_AUTHENTICATIONSSL_CERTIFICATE_ALIASSSL_CERTIFICATE_THUMBPRINTSSL_VERSIONSSL_SERVER_DN_MATCHSSL_SERVER_CERT_DNWALLET_LOCATIONCONNECT_TIMEOUTRETRY_COUNTRETRY_DELAYTRANSPORT_CONNECT_TIMEOUTRECV_TIMEOUTCOMPRESSIONCOMPRESSION_LEVELS
When using the self-hosted integration runtime:
HOSTPORTPROTOCOLENABLEEXPIRE_TIMEFAILOVERLOAD_BALANCERECV_BUF_SIZESDUSEND_BUF_SIZESOURCE_ROUTETYPE_OF_SERVICECOLOCATION_TAGCONNECTION_ID_PREFIXFAILOVER_MODEGLOBAL_NAMEHSINSTANCE_NAMEPOOL_BOUNDARYPOOL_CONNECTION_CLASSPOOL_NAMEPOOL_PURITYRDB_DATABASESHARDING_KEYSHARDING_KEY_IDSUPER_SHARDING_KEYSERVERSERVICE_NAMESIDTUNNEL_SERVICE_NAMESSL_CLIENT_AUTHENTICATIONSSL_CERTIFICATE_ALIASSSL_CERTIFICATE_THUMBPRINTSSL_VERSIONSSL_SERVER_DN_MATCHSSL_SERVER_CERT_DNWALLET_LOCATIONCONNECT_TIMEOUTRETRY_COUNTRETRY_DELAYTRANSPORT_CONNECT_TIMEOUTRECV_TIMEOUTCOMPRESSIONCOMPRESSION_LEVELS
Version 1.0
The Oracle linked service supports the following properties when apply version 1.0:
password
Host=<host>;Port=<port>;Sid=<sid>;User Id=<username>;Password=<password>;
Host=<host>;Port=<port>;ServiceName=<servicename>;User Id=<username>;Password=<password>;
Tip
If you get an error, "ORA-01025: UPI parameter out of range", and your Oracle version is 8i, addWireProtocolMode=1to your connection string. Then try again.
WireProtocolMode=1
If you have multiple Oracle instances for failover scenario, you can create Oracle linked service and fill in the primary host, port, user name, password, etc., and add a new "Additional connection properties" with property name asAlternateServersand value as(HostName=<secondary host>:PortNumber=<secondary port>:ServiceName=<secondary service name>)- do not miss the brackets and pay attention to the colons (:) as separator. As an example, the following value of alternate servers defines two alternate database servers for connection failover:(HostName=AccountingOracleServer:PortNumber=1521:SID=Accounting,HostName=255.201.11.24:PortNumber=1522:ServiceName=ABackup.NA.MyCompany).
AlternateServers
(HostName=<secondary host>:PortNumber=<secondary port>:ServiceName=<secondary service name>)
:
(HostName=AccountingOracleServer:PortNumber=1521:SID=Accounting,HostName=255.201.11.24:PortNumber=1522:ServiceName=ABackup.NA.MyCompany)
More connection properties you can set in connection string per your case:
ArraySize=â­10485760â¬
60000
To enable encryption on Oracle connection, you have two options:
To useTriple-DES Encryption (3DES) and Advanced Encryption Standard (AES), on the Oracle server side, go to Oracle Advanced Security (OAS) and configure the encryption settings. For details, see thisOracle documentation. The Oracle Application Development Framework (ADF) connector automatically negotiates the encryption method to use the one you configure in OAS when establishing a connection to Oracle.
To useTriple-DES Encryption (3DES) and Advanced Encryption Standard (AES), on the Oracle server side, go to Oracle Advanced Security (OAS) and configure the encryption settings. For details, see thisOracle documentation. The Oracle Application Development Framework (ADF) connector automatically negotiates the encryption method to use the one you configure in OAS when establishing a connection to Oracle.
To useTLS, set uptruststorefor SSL server authentication by applying one of the following three methods:Method 1 (recommended):Install the TLS/SSL certificate by importing it into the local certificate store. The built-in Oracle driver is able to load the needed certificate from the certificate store.In the service, configure the Oracle connection string withEncryptionMethod=1.Method 2:Get the TLS/SSL certificate information. Get the Distinguished Encoding Rules (DER)-encoded or Privacy Enhanced Mail (PEM)-encoded certificate information of your TLS/SSL cert.openssl x509 -inform (DER|PEM) -in [Full Path to the DER/PEM Certificate including the name of the DER/PEM Certificate] -textIn the service, configure the Oracle connection string withEncryptionMethod=1and the correspondingTrustStorevalue. For example,Host=<host>;Port=<port>;Sid=<sid>;User Id=<username>;Password=<password>;EncryptionMethod=1;TrustStore= data:// -----BEGIN CERTIFICATE-----<certificate content>-----END CERTIFICATE-----NoteThe value of theTrustStorefield should be prefixed withdata://.When specifying content for multiple certificates, specify the content of each certificate between-----BEGIN CERTIFICATE-----and-----END CERTIFICATE-----. The number of dashes (-----) should be the same before and after bothBEGIN CERTIFICATEandEND CERTIFICATE. For example:-----BEGIN CERTIFICATE-----<certificate content 1>-----END CERTIFICATE----------BEGIN CERTIFICATE-----<certificate content 2>-----END CERTIFICATE----------BEGIN CERTIFICATE-----<certificate content 3>-----END CERTIFICATE-----TheTrustStorefield supports content up to 8192 characters in length.Method 3:Create thetruststorefile with strong ciphers like AES256.openssl pkcs12 -in [Full Path to the DER/PEM Certificate including the name of the DER/PEM Certificate] -out [Path and name of TrustStore] -passout pass:[Keystore PWD] -keypbe AES-256-CBC -certpbe AES-256-CBC -nokeys -exportPlace thetruststorefile on the self-hosted integration runtime machine. For example, place the file atC:\MyTrustStoreFile.In the service, configure the Oracle connection string withEncryptionMethod=1and the correspondingTrustStore/TrustStorePasswordvalue. For example,Host=<host>;Port=<port>;Sid=<sid>;User Id=<username>;Password=<password>;EncryptionMethod=1;TrustStore=C:\\MyTrustStoreFile;TrustStorePassword=<trust_store_password>.
To useTLS, set uptruststorefor SSL server authentication by applying one of the following three methods:
truststore
Method 1 (recommended):Install the TLS/SSL certificate by importing it into the local certificate store. The built-in Oracle driver is able to load the needed certificate from the certificate store.In the service, configure the Oracle connection string withEncryptionMethod=1.
Method 1 (recommended):
Install the TLS/SSL certificate by importing it into the local certificate store. The built-in Oracle driver is able to load the needed certificate from the certificate store.
Install the TLS/SSL certificate by importing it into the local certificate store. The built-in Oracle driver is able to load the needed certificate from the certificate store.
In the service, configure the Oracle connection string withEncryptionMethod=1.
In the service, configure the Oracle connection string withEncryptionMethod=1.
EncryptionMethod=1
Method 2:Get the TLS/SSL certificate information. Get the Distinguished Encoding Rules (DER)-encoded or Privacy Enhanced Mail (PEM)-encoded certificate information of your TLS/SSL cert.openssl x509 -inform (DER|PEM) -in [Full Path to the DER/PEM Certificate including the name of the DER/PEM Certificate] -textIn the service, configure the Oracle connection string withEncryptionMethod=1and the correspondingTrustStorevalue. For example,Host=<host>;Port=<port>;Sid=<sid>;User Id=<username>;Password=<password>;EncryptionMethod=1;TrustStore= data:// -----BEGIN CERTIFICATE-----<certificate content>-----END CERTIFICATE-----NoteThe value of theTrustStorefield should be prefixed withdata://.When specifying content for multiple certificates, specify the content of each certificate between-----BEGIN CERTIFICATE-----and-----END CERTIFICATE-----. The number of dashes (-----) should be the same before and after bothBEGIN CERTIFICATEandEND CERTIFICATE. For example:-----BEGIN CERTIFICATE-----<certificate content 1>-----END CERTIFICATE----------BEGIN CERTIFICATE-----<certificate content 2>-----END CERTIFICATE----------BEGIN CERTIFICATE-----<certificate content 3>-----END CERTIFICATE-----TheTrustStorefield supports content up to 8192 characters in length.
Method 2:
Get the TLS/SSL certificate information. Get the Distinguished Encoding Rules (DER)-encoded or Privacy Enhanced Mail (PEM)-encoded certificate information of your TLS/SSL cert.openssl x509 -inform (DER|PEM) -in [Full Path to the DER/PEM Certificate including the name of the DER/PEM Certificate] -text
Get the TLS/SSL certificate information. Get the Distinguished Encoding Rules (DER)-encoded or Privacy Enhanced Mail (PEM)-encoded certificate information of your TLS/SSL cert.
openssl x509 -inform (DER|PEM) -in [Full Path to the DER/PEM Certificate including the name of the DER/PEM Certificate] -text
openssl x509 -inform (DER|PEM) -in [Full Path to the DER/PEM Certificate including the name of the DER/PEM Certificate] -text
In the service, configure the Oracle connection string withEncryptionMethod=1and the correspondingTrustStorevalue. For example,Host=<host>;Port=<port>;Sid=<sid>;User Id=<username>;Password=<password>;EncryptionMethod=1;TrustStore= data:// -----BEGIN CERTIFICATE-----<certificate content>-----END CERTIFICATE-----NoteThe value of theTrustStorefield should be prefixed withdata://.When specifying content for multiple certificates, specify the content of each certificate between-----BEGIN CERTIFICATE-----and-----END CERTIFICATE-----. The number of dashes (-----) should be the same before and after bothBEGIN CERTIFICATEandEND CERTIFICATE. For example:-----BEGIN CERTIFICATE-----<certificate content 1>-----END CERTIFICATE----------BEGIN CERTIFICATE-----<certificate content 2>-----END CERTIFICATE----------BEGIN CERTIFICATE-----<certificate content 3>-----END CERTIFICATE-----TheTrustStorefield supports content up to 8192 characters in length.
In the service, configure the Oracle connection string withEncryptionMethod=1and the correspondingTrustStorevalue. For example,Host=<host>;Port=<port>;Sid=<sid>;User Id=<username>;Password=<password>;EncryptionMethod=1;TrustStore= data:// -----BEGIN CERTIFICATE-----<certificate content>-----END CERTIFICATE-----
EncryptionMethod=1
TrustStore
Host=<host>;Port=<port>;Sid=<sid>;User Id=<username>;Password=<password>;EncryptionMethod=1;TrustStore= data:// -----BEGIN CERTIFICATE-----<certificate content>-----END CERTIFICATE-----
Note
The value of theTrustStorefield should be prefixed withdata://.
TrustStore
data://
When specifying content for multiple certificates, specify the content of each certificate between-----BEGIN CERTIFICATE-----and-----END CERTIFICATE-----. The number of dashes (-----) should be the same before and after bothBEGIN CERTIFICATEandEND CERTIFICATE. For example:-----BEGIN CERTIFICATE-----<certificate content 1>-----END CERTIFICATE----------BEGIN CERTIFICATE-----<certificate content 2>-----END CERTIFICATE----------BEGIN CERTIFICATE-----<certificate content 3>-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
-----END CERTIFICATE-----
-----
BEGIN CERTIFICATE
END CERTIFICATE
-----BEGIN CERTIFICATE-----<certificate content 1>-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----<certificate content 2>-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----<certificate content 3>-----END CERTIFICATE-----
TheTrustStorefield supports content up to 8192 characters in length.
TrustStore
Method 3:Create thetruststorefile with strong ciphers like AES256.openssl pkcs12 -in [Full Path to the DER/PEM Certificate including the name of the DER/PEM Certificate] -out [Path and name of TrustStore] -passout pass:[Keystore PWD] -keypbe AES-256-CBC -certpbe AES-256-CBC -nokeys -exportPlace thetruststorefile on the self-hosted integration runtime machine. For example, place the file atC:\MyTrustStoreFile.In the service, configure the Oracle connection string withEncryptionMethod=1and the correspondingTrustStore/TrustStorePasswordvalue. For example,Host=<host>;Port=<port>;Sid=<sid>;User Id=<username>;Password=<password>;EncryptionMethod=1;TrustStore=C:\\MyTrustStoreFile;TrustStorePassword=<trust_store_password>.
Method 3:
Create thetruststorefile with strong ciphers like AES256.openssl pkcs12 -in [Full Path to the DER/PEM Certificate including the name of the DER/PEM Certificate] -out [Path and name of TrustStore] -passout pass:[Keystore PWD] -keypbe AES-256-CBC -certpbe AES-256-CBC -nokeys -export
Create thetruststorefile with strong ciphers like AES256.
truststore
openssl pkcs12 -in [Full Path to the DER/PEM Certificate including the name of the DER/PEM Certificate] -out [Path and name of TrustStore] -passout pass:[Keystore PWD] -keypbe AES-256-CBC -certpbe AES-256-CBC -nokeys -export
openssl pkcs12 -in [Full Path to the DER/PEM Certificate including the name of the DER/PEM Certificate] -out [Path and name of TrustStore] -passout pass:[Keystore PWD] -keypbe AES-256-CBC -certpbe AES-256-CBC -nokeys -export
Place thetruststorefile on the self-hosted integration runtime machine. For example, place the file atC:\MyTrustStoreFile.
Place thetruststorefile on the self-hosted integration runtime machine. For example, place the file atC:\MyTrustStoreFile.
truststore
C:\MyTrustStoreFile
In the service, configure the Oracle connection string withEncryptionMethod=1and the correspondingTrustStore/TrustStorePasswordvalue. For example,Host=<host>;Port=<port>;Sid=<sid>;User Id=<username>;Password=<password>;EncryptionMethod=1;TrustStore=C:\\MyTrustStoreFile;TrustStorePassword=<trust_store_password>.
In the service, configure the Oracle connection string withEncryptionMethod=1and the correspondingTrustStore/TrustStorePasswordvalue. For example,Host=<host>;Port=<port>;Sid=<sid>;User Id=<username>;Password=<password>;EncryptionMethod=1;TrustStore=C:\\MyTrustStoreFile;TrustStorePassword=<trust_store_password>.
EncryptionMethod=1
TrustStore
TrustStorePassword
Host=<host>;Port=<port>;Sid=<sid>;User Id=<username>;Password=<password>;EncryptionMethod=1;TrustStore=C:\\MyTrustStoreFile;TrustStorePassword=<trust_store_password>
Example:
{
    "name": "OracleLinkedService",
    "properties": {
        "type": "Oracle",
        "typeProperties": {
            "connectionString": "Host=<host>;Port=<port>;Sid=<sid>;User Id=<username>;Password=<password>;"
        },
        "connectVia": {
            "referenceName": "<name of Integration Runtime>",
            "type": "IntegrationRuntimeReference"
        }
    }
}
{
    "name": "OracleLinkedService",
    "properties": {
        "type": "Oracle",
        "typeProperties": {
            "connectionString": "Host=<host>;Port=<port>;Sid=<sid>;User Id=<username>;Password=<password>;"
        },
        "connectVia": {
            "referenceName": "<name of Integration Runtime>",
            "type": "IntegrationRuntimeReference"
        }
    }
}
Example: store password in Azure Key Vault
{
    "name": "OracleLinkedService",
    "properties": {
        "type": "Oracle",
        "typeProperties": {
            "connectionString": "Host=<host>;Port=<port>;Sid=<sid>;User Id=<username>;",
            "password": { 
                "type": "AzureKeyVaultSecret", 
                "store": { 
                    "referenceName": "<Azure Key Vault linked service name>", 
                    "type": "LinkedServiceReference" 
                }, 
                "secretName": "<secretName>" 
            }
        },
        "connectVia": {
            "referenceName": "<name of Integration Runtime>",
            "type": "IntegrationRuntimeReference"
        }
    }
}
{
    "name": "OracleLinkedService",
    "properties": {
        "type": "Oracle",
        "typeProperties": {
            "connectionString": "Host=<host>;Port=<port>;Sid=<sid>;User Id=<username>;",
            "password": { 
                "type": "AzureKeyVaultSecret", 
                "store": { 
                    "referenceName": "<Azure Key Vault linked service name>", 
                    "type": "LinkedServiceReference" 
                }, 
                "secretName": "<secretName>" 
            }
        },
        "connectVia": {
            "referenceName": "<name of Integration Runtime>",
            "type": "IntegrationRuntimeReference"
        }
    }
}
Dataset properties
This section provides a list of properties supported by the Oracle dataset. For a full list of sections and properties available for defining datasets, seeDatasets.
To copy data from and to Oracle, set the type property of the dataset toOracleTable. The following properties are supported.
OracleTable
OracleTable
schema
table
Example:
{
    "name": "OracleDataset",
    "properties":
    {
        "type": "OracleTable",
        "schema": [],
        "typeProperties": {
            "schema": "<schema_name>",
            "table": "<table_name>"
        },
        "linkedServiceName": {
            "referenceName": "<Oracle linked service name>",
            "type": "LinkedServiceReference"
        }
    }
}
{
    "name": "OracleDataset",
    "properties":
    {
        "type": "OracleTable",
        "schema": [],
        "typeProperties": {
            "schema": "<schema_name>",
            "table": "<table_name>"
        },
        "linkedServiceName": {
            "referenceName": "<Oracle linked service name>",
            "type": "LinkedServiceReference"
        }
    }
}
Copy activity properties
This section provides a list of properties supported by the Oracle source and sink. For a full list of sections and properties available for defining activities, seePipelines.
Oracle as source
Tip
To load data from Oracle efficiently by using data partitioning, learn more fromParallel copy from Oracle.
To copy data from Oracle, set the source type in the copy activity toOracleSource. The following properties are supported in the copy activitysourcesection.
OracleSource
OracleSource
"SELECT * FROM MyTable"
None
parallelCopies
None
PhysicalPartitionsOfTable
?AdfTabularPartitionName
DynamicRange
?AdfRangePartitionColumnName
DynamicRange
?AdfRangePartitionUpbound
DynamicRange
?AdfRangePartitionLowbound
Example: copy data by using a basic query without partition
"activities":[
    {
        "name": "CopyFromOracle",
        "type": "Copy",
        "inputs": [
            {
                "referenceName": "<Oracle input dataset name>",
                "type": "DatasetReference"
            }
        ],
        "outputs": [
            {
                "referenceName": "<output dataset name>",
                "type": "DatasetReference"
            }
        ],
        "typeProperties": {
            "source": {
                "type": "OracleSource",
                "convertDecimalToInteger": false,
                "oracleReaderQuery": "SELECT * FROM MyTable"
            },
            "sink": {
                "type": "<sink type>"
            }
        }
    }
]
"activities":[
    {
        "name": "CopyFromOracle",
        "type": "Copy",
        "inputs": [
            {
                "referenceName": "<Oracle input dataset name>",
                "type": "DatasetReference"
            }
        ],
        "outputs": [
            {
                "referenceName": "<output dataset name>",
                "type": "DatasetReference"
            }
        ],
        "typeProperties": {
            "source": {
                "type": "OracleSource",
                "convertDecimalToInteger": false,
                "oracleReaderQuery": "SELECT * FROM MyTable"
            },
            "sink": {
                "type": "<sink type>"
            }
        }
    }
]
Oracle as sink
To copy data to Oracle, set the sink type in the copy activity toOracleSink. The following properties are supported in the copy activitysinksection.
OracleSink
OracleSink
writeBatchSize
Example:
"activities":[
    {
        "name": "CopyToOracle",
        "type": "Copy",
        "inputs": [
            {
                "referenceName": "<input dataset name>",
                "type": "DatasetReference"
            }
        ],
        "outputs": [
            {
                "referenceName": "<Oracle output dataset name>",
                "type": "DatasetReference"
            }
        ],
        "typeProperties": {
            "source": {
                "type": "<source type>"
            },
            "sink": {
                "type": "OracleSink"
            }
        }
    }
]
"activities":[
    {
        "name": "CopyToOracle",
        "type": "Copy",
        "inputs": [
            {
                "referenceName": "<input dataset name>",
                "type": "DatasetReference"
            }
        ],
        "outputs": [
            {
                "referenceName": "<Oracle output dataset name>",
                "type": "DatasetReference"
            }
        ],
        "typeProperties": {
            "source": {
                "type": "<source type>"
            },
            "sink": {
                "type": "OracleSink"
            }
        }
    }
]
Parallel copy from Oracle
The Oracle connector provides built-in data partitioning to copy data from Oracle in parallel. You can find data partitioning options on theSourcetab of the copy activity.

When you enable partitioned copy, the service runs parallel queries against your Oracle source to load data by partitions. The parallel degree is controlled by theparallelCopiessetting on the copy activity. For example, if you setparallelCopiesto four, the service concurrently generates and runs four queries based on your specified partition option and settings, and each query retrieves a portion of data from your Oracle database.
parallelCopies
parallelCopies
You are suggested to enable parallel copy with data partitioning especially when you load large amount of data from your Oracle database. The following are suggested configurations for different scenarios. When copying data into file-based data store, it's recommended to write to a folder as multiple files (only specify folder name), in which case the performance is better than writing to a single file.
SELECT * FROM <TABLENAME> PARTITION("?AdfTabularPartitionName") WHERE <your_additional_where_clause>
?AdfTabularPartitionName
SELECT * FROM <TABLENAME> WHERE ?AdfRangePartitionColumnName <= ?AdfRangePartitionUpbound AND ?AdfRangePartitionColumnName >= ?AdfRangePartitionLowbound AND <your_additional_where_clause>
?AdfRangePartitionColumnName
?AdfRangePartitionUpbound
?AdfRangePartitionLowbound
Tip
When copying data from a non-partitioned table, you can use "Dynamic range" partition option to partition against an integer column. If your source data doesn't have such type of column, you can leverageORA_HASHfunction in source query to generate a column and use it as partition column.
Example: query with physical partition
"source": {
    "type": "OracleSource",
    "query":â¯"SELECT * FROM <TABLENAME> PARTITION(\"?AdfTabularPartitionName\") WHERE <your_additional_where_clause>",
    "partitionOption": "PhysicalPartitionsOfTable",
    "partitionSettings": {
        "partitionNames": [
            "<partitionA_name>",
            "<partitionB_name>"
        ]
    }
}
"source": {
    "type": "OracleSource",
    "query":â¯"SELECT * FROM <TABLENAME> PARTITION(\"?AdfTabularPartitionName\") WHERE <your_additional_where_clause>",
    "partitionOption": "PhysicalPartitionsOfTable",
    "partitionSettings": {
        "partitionNames": [
            "<partitionA_name>",
            "<partitionB_name>"
        ]
    }
}
Example: query with dynamic range partition
"source": {
    "type": "OracleSource",
    "query":â¯"SELECT * FROM <TABLENAME> WHERE ?AdfRangePartitionColumnName <= ?AdfRangePartitionUpbound AND ?AdfRangePartitionColumnName >= ?AdfRangePartitionLowbound AND <your_additional_where_clause>",
    "partitionOption": "DynamicRange",
    "partitionSettings": {
        "partitionColumnName": "<partition_column_name>",
        "partitionUpperBound": "<upper_value_of_partition_column>",
        "partitionLowerBound": "<lower_value_of_partition_column>"
    }
}
"source": {
    "type": "OracleSource",
    "query":â¯"SELECT * FROM <TABLENAME> WHERE ?AdfRangePartitionColumnName <= ?AdfRangePartitionUpbound AND ?AdfRangePartitionColumnName >= ?AdfRangePartitionLowbound AND <your_additional_where_clause>",
    "partitionOption": "DynamicRange",
    "partitionSettings": {
        "partitionColumnName": "<partition_column_name>",
        "partitionUpperBound": "<upper_value_of_partition_column>",
        "partitionLowerBound": "<lower_value_of_partition_column>"
    }
}
Data type mapping for Oracle
When you copy data from and to Oracle, the following interim data type mappings are used within the service. To learn about how the copy activity maps the source schema and data type to the sink, seeSchema and data type mappings.
Note
NUMBER(p,s) is mapped to the appropriate interim service data type depending on the precision (p) and scale (s).
Lookup activity properties
To learn details about the properties, checkLookup activity.
Upgrade the Oracle connector
Here are steps that help you upgrade the Oracle connector:
Inâ¯Edit linked serviceâ¯page, selectâ¯2.0 (Preview)â¯underâ¯Versionâ¯and configure the linked service by referring toâ¯Linked service properties version 2.0 (Preview).For the authentication related properties including username and password, specify the original values in the corresponding fields in version 2.0 (Preview). Other connection properties such as host, port, and Oracle Service Name/Oracle SID in version 1.0 are now parameters of theserverproperty in version 2.0 (Preview).For example, if you configure the version 1.0 linked service as shown below:{ 
    "name": "OracleLinkedService", 
    "properties": { 
        "type": "Oracle", 
        "typeProperties": { 
            "connectionString": "host=oraclesample.com;port=1521;servicename=db1" 
        }, 
        "connectVia": { 
            "referenceName": "<name of Integration Runtime>", 
            "type": "IntegrationRuntimeReference" 
        } 
    } 
}The identical version 2.0 (Preview) linked service configuration usingEasy Connect (Plus) Namingis:{ 
    "name": "OracleLinkedService", 
    "properties": { 
        "type": "Oracle", 
        "version": "2.0", 
        "typeProperties": { 
            "server": "oraclesample.com:1521/db1",  
            "username": "<user name>",  
            "password": "<password>",  
            "authenticationType": "<authentication type>" 
        }, 
        "connectVia": { 
            "referenceName": "<name of Integration Runtime>", 
            "type": "IntegrationRuntimeReference" 
        } 
    } 
}The identical version 2.0 (Preview) linked service configuration usingConnector Descriptoris:{ 
    "name": "OracleLinkedService", 
    "properties": { 
        "type": "Oracle", 
        "version": "2.0", 
        "typeProperties": { 
            "server": "(DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST= oraclesample.com)(PORT=1521))(CONNECT_DATA=(SERVICE_NAME=db1)))",  
            "username": "<user name>",  
            "password": "<password>",  
            "authenticationType": "<authentication type>" 
        }, 
        "connectVia": { 
            "referenceName": "<name of Integration Runtime>", 
            "type": "IntegrationRuntimeReference" 
        } 
    } 
}TipAzure Key Vault is supported for theserverproperty. You can edit the linked service JSON to add the Azure Key Vault reference, as shown below:Note that:If you useOracle Service Namein version 1.0, you can useEasy Connect (Plus) NamingorConnector Descriptoras the server format in version 2.0 (Preview).If you useOracle SIDin version 1.0, you need to useConnector Descriptoras the server format in version 2.0 (Preview).For some additional connection properties in version 1.0, we provide alternative properties or parameters in theserverproperty in version 2.0 (Preview). You can refer to the table below to upgrade the version 1.0 properties.Version 1.0Version 2.0 (Preview)encryptionmethodPROTOCOL (parameter inserver)tnsnamesfileTNS_ADMIN (environment variable supported on the self-hosted integration runtime)servernameserverenablebulkloadValue: 1, 0enableBulkLoadValue: true, falsefetchtswtzastimestampValue: 1, 0fetchTswtzAsTimestampValue: true, falsealternateserversDESCRIPTION_LIST  (parameter inserver)arraysizefetchSizecachedcursorlimitstatementCacheSizeconnectionretrycountRETRY_COUNT (parameter inserver)initializationstringinitializationStringlogintimeoutCONNECT_TIMEOUT (parameter inserver)cryptoprotocolversionSSL_VERSION (parameter inserver)truststoreWALLET_LOCATION (parameter inserver)For example, if you usealternateserversin version 1.0, you can set theDESCRIPTION_LISTparameter in the server property in version 2.0 (Preview):Version 1.0 linked service usingalternateservers:{
    "name": "OracleV1",
    "properties": {
        "type": "Oracle",
        "typeProperties": {
            "connectionString": "host=oraclesample.com;port=1521;servicename=db1;alternateservers=(HostName= oraclesample2.com:PortNumber=1521:SID=db2,HostName=255.201.11.24:PortNumber=1522:ServiceName=db3)"
        }
    }
}Identical version 2.0 (Preview) linked service usingDESCRIPTION_LISTparameter inConnector Descriptor:{
    "name": "OracleV2",
    "properties": {
        "type": "Oracle",
        "version": "2.0",
        "typeProperties": {
            "server": "(DESCRIPTION_LIST=(DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST=oraclesample.com)(PORT=1521))(CONNECT_DATA=(SERVICE_NAME=db1)))(DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST=oraclesample2.com)(PORT=1521))(CONNECT_DATA=(SID=db2)))(DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST=255.201.11.24)(PORT=1522))(CONNECT_DATA=(SERVICE_NAME=db3))))",
            "username": "<user name>",  
            "password": "<password>",  
            "authenticationType": "<authentication type>" 
        }
    }
}
Inâ¯Edit linked serviceâ¯page, selectâ¯2.0 (Preview)â¯underâ¯Versionâ¯and configure the linked service by referring toâ¯Linked service properties version 2.0 (Preview).
For the authentication related properties including username and password, specify the original values in the corresponding fields in version 2.0 (Preview). Other connection properties such as host, port, and Oracle Service Name/Oracle SID in version 1.0 are now parameters of theserverproperty in version 2.0 (Preview).
server
For example, if you configure the version 1.0 linked service as shown below:

{ 
    "name": "OracleLinkedService", 
    "properties": { 
        "type": "Oracle", 
        "typeProperties": { 
            "connectionString": "host=oraclesample.com;port=1521;servicename=db1" 
        }, 
        "connectVia": { 
            "referenceName": "<name of Integration Runtime>", 
            "type": "IntegrationRuntimeReference" 
        } 
    } 
}
{ 
    "name": "OracleLinkedService", 
    "properties": { 
        "type": "Oracle", 
        "typeProperties": { 
            "connectionString": "host=oraclesample.com;port=1521;servicename=db1" 
        }, 
        "connectVia": { 
            "referenceName": "<name of Integration Runtime>", 
            "type": "IntegrationRuntimeReference" 
        } 
    } 
}
The identical version 2.0 (Preview) linked service configuration usingEasy Connect (Plus) Namingis:

{ 
    "name": "OracleLinkedService", 
    "properties": { 
        "type": "Oracle", 
        "version": "2.0", 
        "typeProperties": { 
            "server": "oraclesample.com:1521/db1",  
            "username": "<user name>",  
            "password": "<password>",  
            "authenticationType": "<authentication type>" 
        }, 
        "connectVia": { 
            "referenceName": "<name of Integration Runtime>", 
            "type": "IntegrationRuntimeReference" 
        } 
    } 
}
{ 
    "name": "OracleLinkedService", 
    "properties": { 
        "type": "Oracle", 
        "version": "2.0", 
        "typeProperties": { 
            "server": "oraclesample.com:1521/db1",  
            "username": "<user name>",  
            "password": "<password>",  
            "authenticationType": "<authentication type>" 
        }, 
        "connectVia": { 
            "referenceName": "<name of Integration Runtime>", 
            "type": "IntegrationRuntimeReference" 
        } 
    } 
}
The identical version 2.0 (Preview) linked service configuration usingConnector Descriptoris:

{ 
    "name": "OracleLinkedService", 
    "properties": { 
        "type": "Oracle", 
        "version": "2.0", 
        "typeProperties": { 
            "server": "(DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST= oraclesample.com)(PORT=1521))(CONNECT_DATA=(SERVICE_NAME=db1)))",  
            "username": "<user name>",  
            "password": "<password>",  
            "authenticationType": "<authentication type>" 
        }, 
        "connectVia": { 
            "referenceName": "<name of Integration Runtime>", 
            "type": "IntegrationRuntimeReference" 
        } 
    } 
}
{ 
    "name": "OracleLinkedService", 
    "properties": { 
        "type": "Oracle", 
        "version": "2.0", 
        "typeProperties": { 
            "server": "(DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST= oraclesample.com)(PORT=1521))(CONNECT_DATA=(SERVICE_NAME=db1)))",  
            "username": "<user name>",  
            "password": "<password>",  
            "authenticationType": "<authentication type>" 
        }, 
        "connectVia": { 
            "referenceName": "<name of Integration Runtime>", 
            "type": "IntegrationRuntimeReference" 
        } 
    } 
}
Tip
Azure Key Vault is supported for theserverproperty. You can edit the linked service JSON to add the Azure Key Vault reference, as shown below:
server
Note that:
If you useOracle Service Namein version 1.0, you can useEasy Connect (Plus) NamingorConnector Descriptoras the server format in version 2.0 (Preview).
If you useOracle Service Namein version 1.0, you can useEasy Connect (Plus) NamingorConnector Descriptoras the server format in version 2.0 (Preview).
If you useOracle SIDin version 1.0, you need to useConnector Descriptoras the server format in version 2.0 (Preview).
If you useOracle SIDin version 1.0, you need to useConnector Descriptoras the server format in version 2.0 (Preview).
For some additional connection properties in version 1.0, we provide alternative properties or parameters in theserverproperty in version 2.0 (Preview). You can refer to the table below to upgrade the version 1.0 properties.Version 1.0Version 2.0 (Preview)encryptionmethodPROTOCOL (parameter inserver)tnsnamesfileTNS_ADMIN (environment variable supported on the self-hosted integration runtime)servernameserverenablebulkloadValue: 1, 0enableBulkLoadValue: true, falsefetchtswtzastimestampValue: 1, 0fetchTswtzAsTimestampValue: true, falsealternateserversDESCRIPTION_LIST  (parameter inserver)arraysizefetchSizecachedcursorlimitstatementCacheSizeconnectionretrycountRETRY_COUNT (parameter inserver)initializationstringinitializationStringlogintimeoutCONNECT_TIMEOUT (parameter inserver)cryptoprotocolversionSSL_VERSION (parameter inserver)truststoreWALLET_LOCATION (parameter inserver)For example, if you usealternateserversin version 1.0, you can set theDESCRIPTION_LISTparameter in the server property in version 2.0 (Preview):Version 1.0 linked service usingalternateservers:{
    "name": "OracleV1",
    "properties": {
        "type": "Oracle",
        "typeProperties": {
            "connectionString": "host=oraclesample.com;port=1521;servicename=db1;alternateservers=(HostName= oraclesample2.com:PortNumber=1521:SID=db2,HostName=255.201.11.24:PortNumber=1522:ServiceName=db3)"
        }
    }
}Identical version 2.0 (Preview) linked service usingDESCRIPTION_LISTparameter inConnector Descriptor:{
    "name": "OracleV2",
    "properties": {
        "type": "Oracle",
        "version": "2.0",
        "typeProperties": {
            "server": "(DESCRIPTION_LIST=(DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST=oraclesample.com)(PORT=1521))(CONNECT_DATA=(SERVICE_NAME=db1)))(DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST=oraclesample2.com)(PORT=1521))(CONNECT_DATA=(SID=db2)))(DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST=255.201.11.24)(PORT=1522))(CONNECT_DATA=(SERVICE_NAME=db3))))",
            "username": "<user name>",  
            "password": "<password>",  
            "authenticationType": "<authentication type>" 
        }
    }
}
For some additional connection properties in version 1.0, we provide alternative properties or parameters in theserverproperty in version 2.0 (Preview). You can refer to the table below to upgrade the version 1.0 properties.
server
server
server
server
server
server
server
For example, if you usealternateserversin version 1.0, you can set theDESCRIPTION_LISTparameter in the server property in version 2.0 (Preview):
alternateservers
DESCRIPTION_LIST
Version 1.0 linked service usingalternateservers:
alternateservers
{
    "name": "OracleV1",
    "properties": {
        "type": "Oracle",
        "typeProperties": {
            "connectionString": "host=oraclesample.com;port=1521;servicename=db1;alternateservers=(HostName= oraclesample2.com:PortNumber=1521:SID=db2,HostName=255.201.11.24:PortNumber=1522:ServiceName=db3)"
        }
    }
}
{
    "name": "OracleV1",
    "properties": {
        "type": "Oracle",
        "typeProperties": {
            "connectionString": "host=oraclesample.com;port=1521;servicename=db1;alternateservers=(HostName= oraclesample2.com:PortNumber=1521:SID=db2,HostName=255.201.11.24:PortNumber=1522:ServiceName=db3)"
        }
    }
}
Identical version 2.0 (Preview) linked service usingDESCRIPTION_LISTparameter inConnector Descriptor:
DESCRIPTION_LIST
{
    "name": "OracleV2",
    "properties": {
        "type": "Oracle",
        "version": "2.0",
        "typeProperties": {
            "server": "(DESCRIPTION_LIST=(DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST=oraclesample.com)(PORT=1521))(CONNECT_DATA=(SERVICE_NAME=db1)))(DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST=oraclesample2.com)(PORT=1521))(CONNECT_DATA=(SID=db2)))(DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST=255.201.11.24)(PORT=1522))(CONNECT_DATA=(SERVICE_NAME=db3))))",
            "username": "<user name>",  
            "password": "<password>",  
            "authenticationType": "<authentication type>" 
        }
    }
}
{
    "name": "OracleV2",
    "properties": {
        "type": "Oracle",
        "version": "2.0",
        "typeProperties": {
            "server": "(DESCRIPTION_LIST=(DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST=oraclesample.com)(PORT=1521))(CONNECT_DATA=(SERVICE_NAME=db1)))(DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST=oraclesample2.com)(PORT=1521))(CONNECT_DATA=(SID=db2)))(DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST=255.201.11.24)(PORT=1522))(CONNECT_DATA=(SERVICE_NAME=db3))))",
            "username": "<user name>",  
            "password": "<password>",  
            "authenticationType": "<authentication type>" 
        }
    }
}
The data type mapping for the Oracle linked service version 2.0 (Preview) is different from that for the version 1.0. To learn the latest data type mapping, seeâ¯Data type mapping for Oracle.An additional connection propertysupportV1DataTypesin version 2.0 (Preview) can reduce upgrade difficulties caused by data type changes. Setting this property totrueensures that the data type in version 2.0 (Preview) remains consistent with version 1.0.
The data type mapping for the Oracle linked service version 2.0 (Preview) is different from that for the version 1.0. To learn the latest data type mapping, seeâ¯Data type mapping for Oracle.
An additional connection propertysupportV1DataTypesin version 2.0 (Preview) can reduce upgrade difficulties caused by data type changes. Setting this property totrueensures that the data type in version 2.0 (Preview) remains consistent with version 1.0.
supportV1DataTypes
true
Differences between Oracle version 2.0 (Preview) and version 1.0
The Oracle connector version 2.0 (Preview) offers new functionalities and is compatible with most features of version 1.0. The following table shows the feature differences between version 2.0 (Preview) and version 1.0.
supportV1DataTypes
true
?
:paramA
:1
?
Feedback
Was this page helpful?
Additional resources