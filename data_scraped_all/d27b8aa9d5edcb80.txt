Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Managed identities in Azure Container Apps
Article
2024-06-27
10 contributors
In this article
A managed identity from Microsoft Entra ID allows your container app to access other Microsoft Entra protected resources. For more about managed identities in Microsoft Entra ID, seeManaged identities for Azure resources.
Your container app can be granted two types of identities:
Asystem-assigned identityis tied to your container app and is deleted when your container app is deleted. An app can only have one system-assigned identity.
Auser-assigned identityis a standalone Azure resource that you can assign to your container app and other resources. A container app can have multiple user-assigned identities. User-assigned identities exist until you delete them.
Why use a managed identity?
You can use a managed identity in a running container app to authenticate to anyservice that supports Microsoft Entra authentication.
With managed identities:
Your app connects to resources with the managed identity. You don't need to manage credentials in your container app.
You can use role-based access control to grant specific permissions to a managed identity.
System-assigned identities are automatically created and managed. They're deleted when your container app is deleted.
You can add and delete user-assigned identities and assign them to multiple resources. They're independent of your container app's lifecycle.
You can use managed identity toauthenticate with a private Azure Container Registrywithout a username and password to pull containers for your container app.
You can use amanaged identity to create connections for Dapr-enabled applications via Dapr components
Common use cases
System-assigned identities are best for workloads that:
are contained within a single resource
need independent identities
User-assigned identities are ideal for workloads that:
run on multiple resources and can share a single identity
need pre-authorization to a secure resource
Limitations
Init containerscan't access managed identities inconsumption-only environmentsanddedicated workload profile environments
Configure managed identities
You can configure your managed identities through:
the Azure portal
the Azure CLI
your Azure Resource Manager (ARM) template
When a managed identity is added, deleted, or modified on a running container app, the app doesn't automatically restart and a new revision isn't created.
Note
When adding a managed identity to a container app deployed before April 11, 2022, you must create a new revision.
Add a system-assigned identity
Azure portal
Azure CLI
ARM template
YAML
Bicep
Go to your container app in the Azure portal.
Go to your container app in the Azure portal.
From theSettingsgroup, selectIdentity.
From theSettingsgroup, selectIdentity.
Within theSystem assignedtab, switchStatustoOn.
Within theSystem assignedtab, switchStatustoOn.
SelectSave.
SelectSave.

Run theaz containerapp identity assigncommand to create a system-assigned identity:
az containerapp identity assign
az containerapp identity assign --name myApp --resource-group myResourceGroup --system-assigned
az containerapp identity assign --name myApp --resource-group myResourceGroup --system-assigned
An ARM template can be used to automate deployment of your container app and resources. To add a system-assigned identity, add anidentitysection to your ARM template.
identity
"identity": {
    "type": "SystemAssigned"
}
"identity": {
    "type": "SystemAssigned"
}
Adding the system-assigned type tells Azure to create and manage the identity for your application. For a complete ARM template example, seeARM API Specification.
Some Azure CLI commands, includingaz containerapp createandaz containerapp job create, support YAML files for input. To add a system-assigned identity, add anidentitysection to your YAML file.
az containerapp create
az containerapp job create
identity
identity:
  type: SystemAssigned
identity:
  type: SystemAssigned
Adding the system-assigned type tells Azure to create and manage the identity for your application. For a complete YAML template example, seeARM API Specification.
A Bicep template can be used to automate deployment of your container app and resources. To add a system-assigned identity, add anidentitysection to your Bicep template.
identity
identity: {
  type: 'SystemAssigned'
}
identity: {
  type: 'SystemAssigned'
}
Adding the system-assigned type tells Azure to create and manage the identity for your application. For a complete Bicep template example, seeMicrosoft.App containerApps Bicep, ARM template & Terraform AzAPI reference.
Add a user-assigned identity
Configuring a container app with a user-assigned identity requires that you first create the identity then add its resource identifier to your container app's configuration. You can create user-assigned identities via the Azure portal or the Azure CLI. For information on creating and managing user-assigned identities, seeManage user-assigned managed identities.
Azure portal
Azure CLI
ARM template
YAML
Bicep
First, you'll need to create a user-assigned identity resource.
Create a user-assigned managed identity resource according to the steps found inManage user-assigned managed identities.
Create a user-assigned managed identity resource according to the steps found inManage user-assigned managed identities.
Go to your container app in the Azure portal.
Go to your container app in the Azure portal.
From theSettingsgroup, selectIdentity.
From theSettingsgroup, selectIdentity.
Within theUser assignedtab, selectAdd.
Within theUser assignedtab, selectAdd.
Search for and select the identity you created earlier.
Search for and select the identity you created earlier.
SelectAdd.
SelectAdd.

Create a user-assigned identity.az identity create --resource-group <GROUP_NAME> --name <IDENTITY_NAME> --output jsonNote theidproperty of the new identity.
Create a user-assigned identity.
az identity create --resource-group <GROUP_NAME> --name <IDENTITY_NAME> --output json
az identity create --resource-group <GROUP_NAME> --name <IDENTITY_NAME> --output json
Note theidproperty of the new identity.
id
Run theaz containerapp identity assigncommand to assign the identity to the app. The identities parameter is a space separated list.az containerapp identity assign --resource-group <GROUP_NAME> --name <APP_NAME> \
    --user-assigned <IDENTITY_RESOURCE_ID>Replace<IDENTITY_RESOURCE_ID>with theidproperty of the identity. To assign more than one user-assigned identity, supply a space-separated list of identity IDs to the--user-assignedparameter.
Run theaz containerapp identity assigncommand to assign the identity to the app. The identities parameter is a space separated list.
az containerapp identity assign
az containerapp identity assign --resource-group <GROUP_NAME> --name <APP_NAME> \
    --user-assigned <IDENTITY_RESOURCE_ID>
az containerapp identity assign --resource-group <GROUP_NAME> --name <APP_NAME> \
    --user-assigned <IDENTITY_RESOURCE_ID>
Replace<IDENTITY_RESOURCE_ID>with theidproperty of the identity. To assign more than one user-assigned identity, supply a space-separated list of identity IDs to the--user-assignedparameter.
<IDENTITY_RESOURCE_ID>
id
--user-assigned
To add one or more user-assigned identities, add anidentitysection to your ARM template. Replace<IDENTITY1_RESOURCE_ID>and<IDENTITY2_RESOURCE_ID>with the resource identifiers of the identities you want to add.
identity
<IDENTITY1_RESOURCE_ID>
<IDENTITY2_RESOURCE_ID>
Specify each user-assigned identity by adding an item to theuserAssignedIdentitiesobject with the identity's resource identifier as the key. Use an empty object as the value.
userAssignedIdentities
"identity": {
    "type": "UserAssigned",
    "userAssignedIdentities": {
        "<IDENTITY1_RESOURCE_ID>": {},
        "<IDENTITY2_RESOURCE_ID>": {}
    }
}
"identity": {
    "type": "UserAssigned",
    "userAssignedIdentities": {
        "<IDENTITY1_RESOURCE_ID>": {},
        "<IDENTITY2_RESOURCE_ID>": {}
    }
}
For a complete ARM template example, seeARM API Specification.
Note
An application can have both system-assigned and user-assigned identities at the same time. In this case, the value for thetypeproperty would beSystemAssigned,UserAssigned.
type
SystemAssigned,UserAssigned
To add one or more user-assigned identities, add anidentitysection to your YAML configuration file. Replace<IDENTITY1_RESOURCE_ID>and<IDENTITY2_RESOURCE_ID>with the resource identifiers of the identities you want to add.
identity
<IDENTITY1_RESOURCE_ID>
<IDENTITY2_RESOURCE_ID>
Specify each user-assigned identity by adding an item to theuserAssignedIdentitiesobject with the identity's resource identifier as the key. Use an empty object as the value.
userAssignedIdentities
identity:
    type: UserAssigned
    userAssignedIdentities:
        <IDENTITY1_RESOURCE_ID>: {}
        <IDENTITY2_RESOURCE_ID>: {}
identity:
    type: UserAssigned
    userAssignedIdentities:
        <IDENTITY1_RESOURCE_ID>: {}
        <IDENTITY2_RESOURCE_ID>: {}
For a complete YAML template example, seeARM API Specification.
Note
An application can have both system-assigned and user-assigned identities at the same time. In this case, thetypeproperty would beSystemAssigned,UserAssigned.
type
SystemAssigned,UserAssigned
To add one or more user-assigned identities, add anidentitysection to your Bicep template. Replace<IDENTITY1_RESOURCE_ID>and<IDENTITY2_RESOURCE_ID>with the resource identifiers of the identities you want to add.
identity
<IDENTITY1_RESOURCE_ID>
<IDENTITY2_RESOURCE_ID>
Specify each user-assigned identity by adding an item to theuserAssignedIdentitiesobject with the identity's resource identifier as the key. Use an empty object as the value.
userAssignedIdentities
identity: {
  type: 'UserAssigned'
  userAssignedIdentities: {
    <IDENTITY1_RESOURCE_ID>: {}
    <IDENTITY2_RESOURCE_ID>: {}
  }
}
identity: {
  type: 'UserAssigned'
  userAssignedIdentities: {
    <IDENTITY1_RESOURCE_ID>: {}
    <IDENTITY2_RESOURCE_ID>: {}
  }
}
For a complete Bicep template example, seeMicrosoft.App containerApps Bicep, ARM template & Terraform AzAPI reference.
Note
An application can have both system-assigned and user-assigned identities at the same time. In this case, thetypeproperty would beSystemAssigned,UserAssigned.
type
SystemAssigned,UserAssigned
Configure a target resource
For some resources, you need to configure role assignments for your app's managed identity to grant access. Otherwise, calls from your app to services, such as Azure Key Vault and Azure SQL Database, are rejected even when you use a valid token for that identity. To learn more about Azure role-based access control (Azure RBAC), seeWhat is RBAC?. To learn more about which resources support Microsoft Entra tokens, seeAzure services that support Microsoft Entra authentication.
Important
The back-end services for managed identities maintain a cache per resource URI for around 24 hours. If you update the access policy of a particular target resource and immediately retrieve a token for that resource, you may continue to get a cached token with outdated permissions until that token expires. Forcing a token refresh isn't supported.
Connect to Azure services in app code
With managed identities, an app can obtain tokens to access Azure resources that use Microsoft Entra ID, such as Azure SQL Database, Azure Key Vault, and Azure Storage. These tokens represent the application accessing the resource, and not any specific user of the application.
Container Apps provides an internally accessibleREST endpointto retrieve tokens. The REST endpoint is available from within the app with a standard HTTPGETrequest, which you can send with a generic HTTP client in your preferred language. For .NET, JavaScript, Java, and Python, the Azure Identity client library provides an abstraction over this REST endpoint. You can connect to other Azure services by adding a credential object to the service-specific client.
GET
Note
When using Azure Identity client library, you need to explicitly specify the user-assigned managed identity client ID.
.NET
JavaScript
Python
Java
PowerShell
HTTP GET
Note
When connecting to Azure SQL data sources withEntity Framework Core, consider usingMicrosoft.Data.SqlClient, which provides special connection strings for managed identity connectivity.
For .NET apps, the simplest way to work with a managed identity is through theAzure Identity client library for .NET. See the following resources for more information:
Add Azure Identity client library to your project
Access Azure service with a system-assigned identity
Access Azure service with a user-assigned identity
The linked examples useDefaultAzureCredential. This object is effective in most scenarios as the same pattern works in Azure (with managed identities) and on your local machine (without managed identities).
DefaultAzureCredential
For Node.js apps, the simplest way to work with a managed identity is through theAzure Identity client library for JavaScript. See the following resources for more information:
Add Azure Identity client library to your project
Access Azure service with a system-assigned identity
Access Azure service with a user-assigned identity
The linked examples useDefaultAzureCredential. This object is effective in most scenarios as the same pattern works in Azure (with managed identities) and on your local machine (without managed identities).
DefaultAzureCredential
For more code examples of the Azure Identity client library for JavaScript, seeAzure Identity examples.
For Python apps, the simplest way to work with a managed identity is through theAzure Identity client library for Python. See the following resources for more information:
Add Azure Identity client library to your project
Access Azure service with a system-assigned identity
Access Azure service with a user-assigned identity
The linked examples useDefaultAzureCredential. This object is effective in most scenarios as the same pattern works in Azure (with managed identities) and on your local machine (without managed identities).
DefaultAzureCredential
For Java apps and functions, the simplest way to work with a managed identity is through theAzure Identity client library for Java. See the following resources for more information:
Add Azure Identity client library to your project
Access Azure service with a system-assigned identity
Access Azure service with a user-assigned identity
The linked examples useDefaultAzureCredential. This object is effective in most scenarios as the same pattern works in Azure (with managed identities) and on your local machine (without managed identities).
DefaultAzureCredential
For more code examples of the Azure Identity client library for Java, seeAzure Identity Examples.
Use the following script to retrieve a token from the local endpoint by specifying a resource URI of an Azure service. Replace the placeholder with the resource URI to obtain the token.
$resourceURI = "https://<AAD-resource-URI>"
$tokenAuthURI = $env:IDENTITY_ENDPOINT + "?resource=$resourceURI&api-version=2019-08-01"
$tokenResponse = Invoke-RestMethod -Method Get -Headers @{"X-IDENTITY-HEADER"="$env:IDENTITY_HEADER"} -Uri $tokenAuthURI
$accessToken = $tokenResponse.access_token
$resourceURI = "https://<AAD-resource-URI>"
$tokenAuthURI = $env:IDENTITY_ENDPOINT + "?resource=$resourceURI&api-version=2019-08-01"
$tokenResponse = Invoke-RestMethod -Method Get -Headers @{"X-IDENTITY-HEADER"="$env:IDENTITY_HEADER"} -Uri $tokenAuthURI
$accessToken = $tokenResponse.access_token
A raw HTTPGETrequest looks like the following example.
GET
Obtain the token endpoint URL from theIDENTITY_ENDPOINTenvironment variable.x-identity-headercontains the GUID that is stored in theIDENTITY_HEADERenvironment variable.
IDENTITY_ENDPOINT
x-identity-header
IDENTITY_HEADER
GET http://${IDENTITY_ENDPOINT}?resource=https://vault.azure.net&api-version=2019-08-01 HTTP/1.1
x-identity-header: 853b9a84-5bfa-4b22-a3f3-0b9a43d9ad8a
GET http://${IDENTITY_ENDPOINT}?resource=https://vault.azure.net&api-version=2019-08-01 HTTP/1.1
x-identity-header: 853b9a84-5bfa-4b22-a3f3-0b9a43d9ad8a
A response might look like this example:
HTTP/1.1 200 OK
Content-Type: application/json

{
    "access_token": "eyJ0eXAiâ¦",
    "expires_on": "1586984735",
    "resource": "https://vault.azure.net",
    "token_type": "Bearer",
    "client_id": "aaaaaaaaa-0000-1111-2222-bbbbbbbbbbbb"
}
HTTP/1.1 200 OK
Content-Type: application/json

{
    "access_token": "eyJ0eXAiâ¦",
    "expires_on": "1586984735",
    "resource": "https://vault.azure.net",
    "token_type": "Bearer",
    "client_id": "aaaaaaaaa-0000-1111-2222-bbbbbbbbbbbb"
}
This response is the same as theresponse for the Microsoft Entra service-to-service access token request. To access Key Vault, add the value ofaccess_tokento a client connection with the vault.
access_token
REST endpoint reference
A container app with a managed identity exposes the identity endpoint by defining two environment variables:
IDENTITY_ENDPOINT: Local URL from which your container app can request tokens.
IDENTITY_ENDPOINT
IDENTITY_HEADER: A header used to help mitigate server-side request forgery (SSRF) attacks. The value is rotated by the platform.
IDENTITY_HEADER
To get a token for a resource, make an HTTPGETrequest to the endpoint, including the following parameters:
GET
IDENTITY_HEADER
principal_id
mi_res_id
object_id
client_id
principal_id
object_id
mi_res_id
object_id
client_id
principal_id
object_id
mi_res_id
principal_id
client_id
object_id
client_id
principal_id
object_id
mi_res_id
Important
If you are attempting to obtain tokens for user-assigned identities, you must include one of the optional properties. Otherwise the token service will attempt to obtain a token for a system-assigned identity, which may or may not exist.
Use managed identity for scale rules
You can use managed identities in your scale rules to authenticate with Azure services that support managed identities. To use a managed identity in your scale rule, use theidentityproperty instead of theauthproperty in your scale rule. Acceptable values for theidentityproperty are either the Azure resource ID of a user-assigned identity, orsystemto use a system-assigned identity.
identity
auth
identity
system
Note
Managed identity authentication in scale rules is in public preview. It's available in API version2024-02-02-preview.
2024-02-02-preview
The following ARM template example shows how to use a managed identity with an Azure Queue Storage scale rule:
The queue storage account uses theaccountNameproperty to identify the storage account, while theidentityproperty specifies which managed identity to use. You do not need to use theauthproperty.
accountName
identity
auth
"scale": {
    "minReplicas": 1,
    "maxReplicas": 10,
    "rules": [{
        "name": "myQueueRule",
        "azureQueue": {
            "accountName": "mystorageaccount",
            "queueName": "myqueue",
            "queueLength": 2,
            "identity": "<IDENTITY1_RESOURCE_ID>"
        }
    }]
}
"scale": {
    "minReplicas": 1,
    "maxReplicas": 10,
    "rules": [{
        "name": "myQueueRule",
        "azureQueue": {
            "accountName": "mystorageaccount",
            "queueName": "myqueue",
            "queueLength": 2,
            "identity": "<IDENTITY1_RESOURCE_ID>"
        }
    }]
}
To learn more about using managed identity with scale rules, seeSet scaling rules in Azure Container Apps.
Control managed identity availability
Container Apps allows you to specifyinit containersand main containers. By default, both main and init containers in a consumption workload profile environment can use managed identity to access other Azure services. In consumption-only environments and dedicated workload profile environments, only main containers can use managed identity. Managed identity access tokens are available for every managed identity configured on the container app. However, in some situations only the init container or the main container require access tokens for a managed identity. Other times, you may use a managed identity only to access your Azure Container Registry to pull the container image, and your application itself doesn't need to have access to your Azure Container Registry.
Starting in API version2024-02-02-preview, you can control which managed identities are available to your container app during the init and main phases to follow the security principle of least privilege. The following options are available:
2024-02-02-preview
Init: Available only to init containers. Use this when you want to perform some initialization work that requires a managed identity, but you no longer need the managed identity in the main container. This option is currently only supported inworkload profile consumption environments
Init
Main: Available only to main containers. Use this if your init container does not need managed identity.
Main
All: Available to all containers. This value is the default setting.
All
None: Not available to any containers. Use this when you have a managed identity that is only used for ACR image pull, scale rules, or Key Vault secrets and does not need to be available to the code running in your containers.
None
The following ARM template example shows how to configure a container app on a workload profile consumption environment that:
Restricts the container app's system-assigned identity to main containers only.
Restricts a specific user-assigned identity to init containers only.
Uses a specific user-assigned identity for Azure Container Registry image pull without allowing the code in the containers to use that managed identity to access the registry. In this example, the containers themselves don't need to access the registry.
This approach limits the resources that can be accessed if a malicious actor were to gain unauthorized access to the containers.
{
    "location": "eastus2",
    "identity":{
    "type": "SystemAssigned, UserAssigned",
        "userAssignedIdentities": {
            "<IDENTITY1_RESOURCE_ID>":{},
            "<ACR_IMAGEPULL_IDENTITY_RESOURCE_ID>":{}
         }
     },
    "properties": {
        "workloadProfileName":"Consumption",
        "environmentId": "<CONTAINER_APPS_ENVIRONMENT_ID>",
        "configuration": {
            "registries": [
            {
                "server": "myregistry.azurecr.io",
                "identity": "ACR_IMAGEPULL_IDENTITY_RESOURCE_ID"
            }],
            "identitySettings":[
            {
                "identity": "ACR_IMAGEPULL_IDENTITY_RESOURCE_ID",
                "lifecycle": "None"
            },
            {
                "identity": "<IDENTITY1_RESOURCE_ID>",
                "lifecycle": "Init"
            },
            {
                "identity": "system",
                "lifecycle": "Main"
            }]
        },
        "template": {
            "containers":[
                {
                    "image":"myregistry.azurecr.io/main:1.0",
                    "name":"app-main"
                }
            ],
            "initContainers":[
                {
                    "image":"myregistry.azurecr.io/init:1.0",
                    "name":"app-init",
                }
            ]
        }
    }
}
{
    "location": "eastus2",
    "identity":{
    "type": "SystemAssigned, UserAssigned",
        "userAssignedIdentities": {
            "<IDENTITY1_RESOURCE_ID>":{},
            "<ACR_IMAGEPULL_IDENTITY_RESOURCE_ID>":{}
         }
     },
    "properties": {
        "workloadProfileName":"Consumption",
        "environmentId": "<CONTAINER_APPS_ENVIRONMENT_ID>",
        "configuration": {
            "registries": [
            {
                "server": "myregistry.azurecr.io",
                "identity": "ACR_IMAGEPULL_IDENTITY_RESOURCE_ID"
            }],
            "identitySettings":[
            {
                "identity": "ACR_IMAGEPULL_IDENTITY_RESOURCE_ID",
                "lifecycle": "None"
            },
            {
                "identity": "<IDENTITY1_RESOURCE_ID>",
                "lifecycle": "Init"
            },
            {
                "identity": "system",
                "lifecycle": "Main"
            }]
        },
        "template": {
            "containers":[
                {
                    "image":"myregistry.azurecr.io/main:1.0",
                    "name":"app-main"
                }
            ],
            "initContainers":[
                {
                    "image":"myregistry.azurecr.io/init:1.0",
                    "name":"app-init",
                }
            ]
        }
    }
}
View managed identities
You can show the system-assigned and user-assigned managed identities using the following Azure CLI command. The output shows the managed identity type, tenant IDs and principal IDs of all managed identities assigned to your container app.
az containerapp identity show --name <APP_NAME> --resource-group <GROUP_NAME>
az containerapp identity show --name <APP_NAME> --resource-group <GROUP_NAME>
Remove a managed identity
When you remove a system-assigned identity, it's deleted from Microsoft Entra ID. System-assigned identities are also automatically removed from Microsoft Entra ID when you delete the container app resource itself. Removing user-assigned managed identities from your container app doesn't remove them from Microsoft Entra ID.
Azure portal
Azure CLI
ARM template
YAML
Bicep
In the left navigation of your app's page, scroll down to theSettingsgroup.
In the left navigation of your app's page, scroll down to theSettingsgroup.
SelectIdentity. Then follow the steps based on the identity type:System-assigned identity: Within theSystem assignedtab, switchStatustoOff. SelectSave.User-assigned identity: Select theUser assignedtab, select the checkbox for the identity, and selectRemove. SelectYesto confirm.
SelectIdentity. Then follow the steps based on the identity type:
System-assigned identity: Within theSystem assignedtab, switchStatustoOff. SelectSave.
User-assigned identity: Select theUser assignedtab, select the checkbox for the identity, and selectRemove. SelectYesto confirm.
To remove the system-assigned identity:
az containerapp identity remove --name <APP_NAME> --resource-group <GROUP_NAME> --system-assigned
az containerapp identity remove --name <APP_NAME> --resource-group <GROUP_NAME> --system-assigned
To remove one or more user-assigned identities:
az containerapp identity remove --name <APP_NAME> --resource-group <GROUP_NAME> \
    --user-assigned <IDENTITY1_RESOURCE_ID> <IDENTITY2_RESOURCE_ID>
az containerapp identity remove --name <APP_NAME> --resource-group <GROUP_NAME> \
    --user-assigned <IDENTITY1_RESOURCE_ID> <IDENTITY2_RESOURCE_ID>
To remove all user-assigned identities:
az containerapp identity remove --name <APP_NAME> --resource-group <GROUP_NAME> \
    --user-assigned <IDENTITY1_RESOURCE_ID> <IDENTITY2_RESOURCE_ID>
az containerapp identity remove --name <APP_NAME> --resource-group <GROUP_NAME> \
    --user-assigned <IDENTITY1_RESOURCE_ID> <IDENTITY2_RESOURCE_ID>
To remove all identities, set thetypeof the container app's identity toNonein the ARM template:
type
None
"identity": {
    "type": "None"
}
"identity": {
    "type": "None"
}
To remove all identities, set thetypeof the container app's identity toNonein the YAML configuration file:
type
None
identity:
    type: None
identity:
    type: None
To remove all identities, set thetypeof the container app's identity toNonein the Bicep template:
type
None
identity: {
  type: 'None'
}
identity: {
  type: 'None'
}
Next steps
Monitor an app
Feedback
Was this page helpful?
Additional resources