Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Publish Python packages with Azure Pipelines
Article
2024-12-13
20 contributors
In this article
Azure DevOps Services | Azure DevOps Server 2022 - Azure DevOps Server 2019
Azure Pipelines enables developers to publish Python packages to Azure Artifacts feeds and public registries such as PyPi. This article will guide you through how to publish Python packages to your Azure Artifacts feed.
Prerequisites
An Azure DevOps organization and a project. Create anorganizationor aprojectif you haven't already.
An Azure DevOps organization and a project. Create anorganizationor aprojectif you haven't already.
An Azure Artifacts feed.Create a feedif you don't have one already.
An Azure Artifacts feed.Create a feedif you don't have one already.
Authenticate with a feed
To publish Python packages using twine, you must first authenticate with your Azure Artifacts feed. TheTwineAuthenticate taskprovides twine credentials to aPYPIRC_PATHenvironment variable. This variable is then used bytwineto publish packages directly from your pipeline.
PYPIRC_PATH
twine
Important
The credentials stored in thePYPIRC_PATHenvironment variable take precedence over those in the.iniand.conffiles.
PYPIRC_PATH
.ini
.conf
If you add multipleTwineAuthenticatetasks at different stages in your pipeline, each task execution will extend(not override)the existingPYPIRC_PATHenvironment variable.
PYPIRC_PATH
YAML
Classic
Sign in to your Azure DevOps organization, and then navigate to your project.
Sign in to your Azure DevOps organization, and then navigate to your project.
SelectPipelines, and then select your pipeline definition.
SelectPipelines, and then select your pipeline definition.
SelectEdit, and then add the following snippet to your YAML pipeline.steps:
- task: UsePythonVersion@0
  displayName: 'Use Python 3.x'

- task: TwineAuthenticate@1
  inputs:
    artifactFeed: <PROJECT_NAME/FEED_NAME>     ## For an organization-scoped feed, use: artifactFeed: <FEED_NAME>
SelectEdit, and then add the following snippet to your YAML pipeline.
steps:
- task: UsePythonVersion@0
  displayName: 'Use Python 3.x'

- task: TwineAuthenticate@1
  inputs:
    artifactFeed: <PROJECT_NAME/FEED_NAME>     ## For an organization-scoped feed, use: artifactFeed: <FEED_NAME>
steps:
- task: UsePythonVersion@0
  displayName: 'Use Python 3.x'

- task: TwineAuthenticate@1
  inputs:
    artifactFeed: <PROJECT_NAME/FEED_NAME>     ## For an organization-scoped feed, use: artifactFeed: <FEED_NAME>
Sign in to your Azure DevOps organization, and then navigate to your project.
Sign in to your Azure DevOps organization, and then navigate to your project.
SelectPipelines, select your pipeline definition, and then selectEdit.
SelectPipelines, select your pipeline definition, and then selectEdit.
Select the+sign to add a new task, then add theUse Python versionand thePython twine upload authenticatetasks to your pipeline definition. You can leave theUsePythonVersion@0task with the default settings and configure theTwineAuthenticate@1as follows:Select your feed from theMy feed namedropdown menu. To authenticate with a feed outside your organization, select aFeed from external organizationsand create a new service connection.
Select the+sign to add a new task, then add theUse Python versionand thePython twine upload authenticatetasks to your pipeline definition. You can leave theUsePythonVersion@0task with the default settings and configure theTwineAuthenticate@1as follows:
+
Select your feed from theMy feed namedropdown menu. To authenticate with a feed outside your organization, select aFeed from external organizationsand create a new service connection.

Publish Python packages to a feed
Note
To publish your packages to a feed using Azure Pipelines, make sure that both theProject Collection Build Serviceand your project'sBuild Serviceidentities are assigned theFeed Publisher (Contributor)role in your feed settings. SeeManage permissionsfor details.
YAML
Classic
Sign in to your Azure DevOps organization, and then navigate to your project.
Sign in to your Azure DevOps organization, and then navigate to your project.
SelectPipelines, and then select your pipeline definition.
SelectPipelines, and then select your pipeline definition.
SelectEdit, and then add the following snippet to your YAML pipeline.steps:
- task: UsePythonVersion@0
  displayName: 'Use Python 3.x'

- script: |
    pip install build
    pip install twine
  displayName: 'Install build and twine'

- script: |
    python -m build -w
  displayName: 'Python build'

- task: TwineAuthenticate@1
  inputs:
    artifactFeed: <PROJECT_NAME/FEED_NAME>                ## For an organization-scoped feed, use: artifactFeed: <FEED_NAME>
  displayName: 'Twine Authenticate'

- script: |
    python -m twine upload -r <FEED_NAME> --config-file $(PYPIRC_PATH) dist/*.whl
  displayName: 'Upload to feed'
SelectEdit, and then add the following snippet to your YAML pipeline.
steps:
- task: UsePythonVersion@0
  displayName: 'Use Python 3.x'

- script: |
    pip install build
    pip install twine
  displayName: 'Install build and twine'

- script: |
    python -m build -w
  displayName: 'Python build'

- task: TwineAuthenticate@1
  inputs:
    artifactFeed: <PROJECT_NAME/FEED_NAME>                ## For an organization-scoped feed, use: artifactFeed: <FEED_NAME>
  displayName: 'Twine Authenticate'

- script: |
    python -m twine upload -r <FEED_NAME> --config-file $(PYPIRC_PATH) dist/*.whl
  displayName: 'Upload to feed'
steps:
- task: UsePythonVersion@0
  displayName: 'Use Python 3.x'

- script: |
    pip install build
    pip install twine
  displayName: 'Install build and twine'

- script: |
    python -m build -w
  displayName: 'Python build'

- task: TwineAuthenticate@1
  inputs:
    artifactFeed: <PROJECT_NAME/FEED_NAME>                ## For an organization-scoped feed, use: artifactFeed: <FEED_NAME>
  displayName: 'Twine Authenticate'

- script: |
    python -m twine upload -r <FEED_NAME> --config-file $(PYPIRC_PATH) dist/*.whl
  displayName: 'Upload to feed'
Sign in to your Azure DevOps organization, and then navigate to your project.
Sign in to your Azure DevOps organization, and then navigate to your project.
SelectPipelines, select your pipeline definition, and then selectEdit.
SelectPipelines, select your pipeline definition, and then selectEdit.
Select the+sign to add a new task, then add theUse Python versiontask to your pipeline. In this example we're setting theVersion specto>= 3.7.
Select the+sign to add a new task, then add theUse Python versiontask to your pipeline. In this example we're setting theVersion specto>= 3.7.
+
Add theCommand linetask to your pipeline, and paste the following commands into theScripttextbox to installbuildandtwineon your agent:pip install build
pip install twine
Add theCommand linetask to your pipeline, and paste the following commands into theScripttextbox to installbuildandtwineon your agent:
pip install build
pip install twine
pip install build
pip install twine
Add anotherCommand linetask to your pipeline, and then paste the following command into theScripttextbox to build your project:python -m build -w
Add anotherCommand linetask to your pipeline, and then paste the following command into theScripttextbox to build your project:
python -m build -w
python -m build -w
Add for theTwine Authenticatetask to your pipeline, and select your feed from theMy feed namedropdown menu.
Add for theTwine Authenticatetask to your pipeline, and select your feed from theMy feed namedropdown menu.
Add anotherCommand linetask to your pipeline, and paste the following command into theScripttextbox to publish your package to your feed, replacing the placeholder with your feed's name:python -m twine upload -r <FEED_NAME> --config-file $(PYPIRC_PATH) dist/*.whl
Add anotherCommand linetask to your pipeline, and paste the following command into theScripttextbox to publish your package to your feed, replacing the placeholder with your feed's name:
python -m twine upload -r <FEED_NAME> --config-file $(PYPIRC_PATH) dist/*.whl
python -m twine upload -r <FEED_NAME> --config-file $(PYPIRC_PATH) dist/*.whl

Related content
Publish and download pipeline artifacts
Set up upstream sources
Use the .artifactignore file
Feedback
Was this page helpful?
Additional resources