Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
union operator
Article
2024-08-12
3 contributors
In this article
Applies to: âMicrosoft FabricâAzure Data ExplorerâAzure MonitorâMicrosoft Sentinel
Takes two or more tables and returns the rows of all of them.
Syntax
[T|]union[UnionParameters] [kind=inner|outer] [withsource=ColumnName] [isfuzzy=true|false]Tables
|
union
kind=
inner
outer
withsource=
isfuzzy=
true
false
[T|]union[kind=inner|outer] [withsource=ColumnName] [isfuzzy=true|false]Tables
|
union
kind=
inner
outer
withsource=
isfuzzy=
true
false
Learn more aboutsyntax conventions.
Note
The operation of theunionoperator can be altered by setting thebest_effortrequest property totrue, using either aset statementor throughclient request properties. When this property is set totrue, theunionoperator will disregard fuzzy resolution and connectivity failures to execute any of the sub-expressions being âunionedâ and yield a warning in the query status results.
union
best_effort
true
true
union
Parameters
string
string
=
kind
string
inner
outer
inner
outer
null
outer
outer
withsource=
string
isfuzzy
bool
true
false
isfuzzy=true
union
string
E*
E
Supported union parameters
hint.concurrency
int
union
hint.spread
int
union
string
kind
string
inner
outer
inner
outer
null
outer
outer
withsource=
string
isfuzzy
bool
true
false
isfuzzy=true
union
string
E*
E
Note
Theunionscope can includelet statementsif attributed with theviewkeyword.
union
view
Theunionscope will not includefunctions. To include a function, define alet statementwith theviewkeyword.
union
view
There's no guarantee of the order in which the union legs will appear, but if each leg has anorder byoperator, then each leg will be sorted.
order by
Returns
A table with as many rows as there are in all the input tables.
Examples
Tables with string in name or column
union K* | where * has "Kusto"
union K* | where * has "Kusto"
Rows from all tables in the database whose name starts withK, and in which any column includes the wordKusto.
K
Kusto
Distinct count
union withsource=SourceTable kind=outer Query, Command
| where Timestamp > ago(1d)
| summarize dcount(UserId)
union withsource=SourceTable kind=outer Query, Command
| where Timestamp > ago(1d)
| summarize dcount(UserId)
The number of distinct users that have produced
either aQueryevent or aCommandevent over the past day. In the result, the 'SourceTable' column will indicate either "Query" or "Command".
Query
Command
Query
| where Timestamp > ago(1d)
| union withsource=SourceTable kind=outer 
   (Command | where Timestamp > ago(1d))
| summarize dcount(UserId)
Query
| where Timestamp > ago(1d)
| union withsource=SourceTable kind=outer 
   (Command | where Timestamp > ago(1d))
| summarize dcount(UserId)
This more efficient version produces the same result. It filters each table before creating the union.
Usingisfuzzy=true
isfuzzy=true
// Using union isfuzzy=true to access non-existing view:                                     
let View_1 = view () { print x=1 };
let View_2 = view () { print x=1 };
let OtherView_1 = view () { print x=1 };
union isfuzzy=true
(View_1 | where x > 0), 
(View_2 | where x > 0),
(View_3 | where x > 0)
| count
// Using union isfuzzy=true to access non-existing view:                                     
let View_1 = view () { print x=1 };
let View_2 = view () { print x=1 };
let OtherView_1 = view () { print x=1 };
union isfuzzy=true
(View_1 | where x > 0), 
(View_2 | where x > 0),
(View_3 | where x > 0)
| count
Output
Observing Query Status - the following warning returned:Failed to resolve entity 'View_3'
Failed to resolve entity 'View_3'
// Using union isfuzzy=true and wildcard access:
let View_1 = view () { print x=1 };
let View_2 = view () { print x=1 };
let OtherView_1 = view () { print x=1 };
union isfuzzy=true View*, SomeView*, OtherView*
| count
// Using union isfuzzy=true and wildcard access:
let View_1 = view () { print x=1 };
let View_2 = view () { print x=1 };
let OtherView_1 = view () { print x=1 };
union isfuzzy=true View*, SomeView*, OtherView*
| count
Output
Observing Query Status - the following warning returned:Failed to resolve entity 'SomeView*'
Failed to resolve entity 'SomeView*'
Source columns types mismatch
let View_1 = view () { print x=1 };
let View_2 = view () { print x=toint(2) };
union withsource=TableName View_1, View_2
let View_1 = view () { print x=1 };
let View_2 = view () { print x=toint(2) };
union withsource=TableName View_1, View_2
Output
let View_1 = view () { print x=1 };
let View_2 = view () { print x=toint(2) };
let View_3 = view () { print x_long=3 };
union withsource=TableName View_1, View_2, View_3
let View_1 = view () { print x=1 };
let View_2 = view () { print x=toint(2) };
let View_3 = view () { print x_long=3 };
union withsource=TableName View_1, View_2, View_3
Output
ColumnxfromView_1received the suffix_long, and as a column namedx_longalready exists in the result schema, the column names were de-duplicated, producing a new column-x_long1
x
View_1
_long
x_long
x_long1
Feedback
Was this page helpful?
Additional resources