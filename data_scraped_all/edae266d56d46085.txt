Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Azure Functions Flex Consumption plan hosting
Article
2025-02-04
11 contributors
In this article
Flex Consumption is a Linux-based Azure Functions hosting plan that builds on the Consumptionpay for what you useserverless billing model. It gives you more flexibility and customizability by introducing private networking, instance memory size selection, and fast/large scale-out features still based on aserverlessmodel.
You can review end-to-end samples that feature the Flex Consumption plan in theFlex Consumption plan samples repository.
Benefits
The Flex Consumption plan builds on the strengths of the Consumption plan, which include dynamic scaling and execution-based billing. With Flex Consumption, you also get these extra features:
Always-ready instances
Virtual network integration
Fast scaling based on concurrency for both HTTP and non-HTTP apps
Multiple choices for instance memory sizes
This table helps you directly compare the features of Flex Consumption with the Consumption hosting plan:
For a complete comparison of the Flex Consumption plan against the Consumption plan and all other plan and hosting types, seefunction scale and hosting options.
Virtual network integration
Flex Consumption expands on the traditional benefits of Consumption plan by adding support forvirtual network integration. When your apps run in a Flex Consumption plan, they can connect to other Azure services secured inside a virtual network. All while still allowing you to take advantage of serverless billing and scale, together with the scale and throughput benefits of the Flex Consumption plan. For more information, seeEnable virtual network integration.
Instance memory
When you create your function app in a Flex Consumption plan, you can select the memory size of the instances on which your app runs. SeeBillingto learn how instance memory sizes affect the costs of your function app.
Currently, Flex Consumption offers instance memory size options of both 2,048 MB and 4,096 MB.
When deciding on which instance memory size to use with your apps, here are some things to consider:
The 2,048-MB instance memory size is the default and should be used for most scenarios. Use the 4,096-MB instance memory size for scenarios where your app requires more concurrency or higher processing power. For more information, seeConfigure instance memory.
You can change the instance memory size at any time. For more information, seeConfigure instance memory.
Instance resources are shared between your function code and the Functions host.
The larger the instance memory size, the more each instance can handle as far as concurrent executions or more intensive CPU or memory workloads. Specific scale decisions are workload-specific.
The default concurrency of HTTP triggers depends on the instance memory size. For more information, seeHTTP trigger concurrency.
Available CPUs and network bandwidth are provided proportional to a specific instance size.
Per-function scaling
Concurrencyis a key factor that determines how Flex Consumption function apps scale. To improve the scale performance of apps with various trigger types, the Flex Consumption plan provides a more deterministic way of scaling your app on a per-function basis.
Thisper-function scalingbehavior is a part of the hosting platform, so you don't need to configure your app or change the code. For more information, seePer-function scalingin the Event-driven scaling article.
In per-function scaling, decisions are made for certain function triggers based on group aggregations. This table shows the defined set of function scale groups:
http
blob
durable
All other functions in the app are scaled individually in their own set of instances, which are referenced using the conventionfunction:<NAMED_FUNCTION>.
function:<NAMED_FUNCTION>
Always ready instances
Flex Consumption includes analways readyfeature that lets you choose instances that are always running and assigned to each of your per-function scale groups or functions. Always ready is a great option for scenarios where you need to have a minimum number of instances always ready to handle requests. For example, to reduce your application's cold start latency. The default is 0 (zero).
For example, if you set always ready to 2 for your HTTP group of functions, the platform keeps two instances always running and assigned to your app for your HTTP functions in the app. Those instances are processing your function executions, but depending on concurrency settings, the platform scales beyond those two instances with on-demand instances.
To learn how to configure always ready instances, seeSet always ready instance counts.
Concurrency
Concurrency refers to the number of parallel executions of a function on an instance of your app. You can set a maximum number of concurrent executions that each instance should handle at any given time. Concurrency has a direct effect on how your app scales because at lower concurrency levels, you need more instances to handle the event-driven demand for a function. While you can control and fine tune the concurrency, we provide defaults that work for most cases.
To learn how to set concurrency limits for HTTP trigger functions, seeSet HTTP concurrency limits. To learn how to set concurrency limits for non-HTTP trigger functions, seeTarget Base Scaling.
Deployment
Deployments in the Flex Consumption plan follow a single path, and there's no longer the need for app settings to influence deployment behavior. After your project code is built and zipped into an application package, it's deployed to a blob storage container. On startup, your app gets the package and runs your function code from this package. By default, the same storage account used to store internal host metadata (AzureWebJobsStorage) is also used as the deployment container. However, you can use an alternative storage account or choose your preferred authentication method byconfiguring your app's deployment settings.
Billing
There are two modes by which your costs are determined when running your apps in the Flex Consumption plan. Each mode is determined on a per-instance basis.
For the most up-to-date information on execution pricing, always ready baseline costs, and free grants for on demand executions, see theAzure Functions pricing page.
The minimum billable execution period for both execution modes is 1,000 ms. Past that, the billable activity period is rounded up to the nearest 100 ms. You can find details on the Flex Consumption plan billing meters in theMonitoring reference.
For details about how costs are calculated when you run in a Flex Consumption plan, including examples, seeConsumption-based costs.
Supported language stack versions
This table shows the language stack versions that are currently supported for Flex Consumption apps:
1C# in-process modeisn't supported. You instead need tomigrate your .NET code project to run in the isolated worker model.2Requires version1.20.0or later ofMicrosoft.Azure.Functions.Workerand version1.16.2or later ofMicrosoft.Azure.Functions.Worker.Sdk.
1.20.0
1.16.2
Regional subscription memory quotas
Currently, each region in a given subscription has a memory limit of512,000 MBfor all instances of apps running on Flex Consumption plans. This quota means that, in a given subscription and region, you could have any combination of instance memory sizes and counts, as long as they stay under the quota limit. For example, each the following examples would mean the quota is reached and the apps would stop scaling:
512,000 MB
You have one 2,048 MB app scaled to 100 and a second 2,048 MB app scaled to 150 instances
You have one 2,048 MB app that scaled out to 250 instances
You have one 4,096 MB app that scaled out to 125 instances
You have one 4,096 MB app scaled to 100 and one 2,048 MB app scaled to 50 instances
Flex Consumption apps scaled to zero, or instances marked to be scaled in and deleted, don't count against the quota. This quota can be increased to allow your Flex Consumption apps to scale further, depending on your requirements. If your apps require a larger quota, create a support ticket.
Deprecated properties and settings
In Flex Consumption many of the standard application settings and site configuration properties are deprecated or have moved and shouldn't be used when automating function app resource creation. For more information, seeFlex Consumption plan deprecations.
Considerations
Keep these other considerations in mind when using Flex Consumption plan:
Host: There's a 30-second time out for app initialization. When your function app takes longer than 30 seconds to start, you might see gRPC-relatedSystem.TimeoutExceptionentries logged. You can't currently configure this time out. For more information, seethis host work item.
System.TimeoutException
Durable Functions: Azure Storage is currently the only supportedstorage providerfor Durable Functions when hosted in the Flex Consumption plan. Seerecommendationswhen hosting Durable Functions in the Flex Consumption plan.
Virtual network integrationEnsure that theMicrosoft.AppAzure resource provider is enabled for your subscription byfollowing these instructions. The subnet delegation required by Flex Consumption apps isMicrosoft.App/environments.
Microsoft.App
Microsoft.App/environments
Triggers: All triggers are fully supported except for Kafka and Azure SQL triggers. The Blob storage trigger only supports theEvent Grid source. Non-C# function apps must use version[4.0.0, 5.0.0)of theextension bundle, or a later version.
[4.0.0, 5.0.0)
Regions: Not all regions are currently supported. To learn more, seeView currently supported regions.
Deployments: Deployment slots aren't currently supported.
Scale: The lowest maximum scale is currently40. The highest currently supported value is1000.
40
1000
Managed dependencies:Managed dependencies in PowerShellaren't supported by Flex Consumption. You must insteadupload modules with app content.
Diagnostic settings: Diagnostic settings aren't currently supported.
Certificates: Loading certificates with the WEBSITE_LOAD_CERTIFICATES app setting, managed certificates, app service certificates, and other platform certificate-based features are currently not supported.
Key Vault and App Configuration References: You can't currently useAzure Key VaultorAzure App Configurationreferences in your Flex Consumption plan app settings when these services are network access restricted. This limitation applies even when the function app has Virtual Network integration enabled. If you must use restricted Key Vault or App Configuration instances, you must use client SDKs to manually retrieve values from references in these services. Functions binding extensions also can't access these references, which means you must also use Azure client SDKs for accessing remote service data from your function code.
Timezones:WEBSITE_TIME_ZONEandTZapp settings are not currently supported when running on Flex Consumption plan.
WEBSITE_TIME_ZONE
TZ
Related articles
Azure Functions hosting optionsCreate and manage function apps in the Flex Consumption plan
Feedback
Was this page helpful?
Additional resources