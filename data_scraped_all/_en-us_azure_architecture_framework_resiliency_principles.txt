Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Reliability design principles
Article
2023-11-15
4 contributors
In this article
Outages and malfunctions are serious concerns for all workloads. A reliable workload must survive those events andcontinue to consistently provide its intended functionality. It must beresilientso that it can detect, withstand, and recover from failures within an acceptable time period. It must also beavailableso that users can access the workload during the promised time period at the promised quality level.
It's not realistic to assume failures won't occur, especially when the workload is built to run on distributed systems. Some components might fail while others continue to operate. At some point, the user experience might be affected, which compromises business goals.
Workload architectures should havereliability assurances in application code, infrastructure, and operations. Design choices shouldn't change the intent that's specified by business requirements. Such changes should be considered significant tradeoffs.
Thedesign principlesare intended to provide guidance for aspects of reliability that you should consider throughout the development lifecycle. Start with the recommended approaches andjustify the benefits for a set of requirements. After you set your strategy, drive actions by using theReliability checklist.
If you don't apply these principles to your design, the workload most likely won't be prepared toanticipate or handle problems in production. The outcome might be service disruptions that lead to financial loss. In the case of critical workloads, failing to apply these principles could jeopardize safety.
Design for business requirements
Requirements must cover user experience, data, workflows, and characteristics that are unique to the workload. The outcome ofthe requirements process must clearly state the expectations. The goals must be achievable and negotiated with the team, given a specified investment. They must be documented to drive technological choices, implementations, and operations.
Design for resilience
You should expect that component malfunctions, platform outages, performance degradations, limited resource availability, and other faults will occur. Build resiliency in the system so that it'sfault-tolerant and can degrade gracefully.
Design for recovery
Even highly resilient systems needdisaster preparedness approaches, in both architecture design and workload operations. On the data layer, you should have strategies that can repair workload state in case of corruption.
Design for operations
Test failures early and oftenin the development lifecycle, and determine the impact of performance on reliability. For the sake of root cause analysis and postmortems, you need to have shared visibility, across teams, of dependency status and ongoing failures.Insights, diagnostics, and alerts from observable systems are fundamentalto effective incident management and continuous improvement.
Keep it simple
It's often what you remove rather than what you add that leads to the most reliable solutions.Simplicity reduces the surface area for control, minimizing inefficiencies and potential misconfigurations or unexpected interactions. On the other hand, oversimplification can introduce single points of failure. Maintain a balanced approach.
Next steps
Reliability checklist
Feedback
Was this page helpful?
Additional resources