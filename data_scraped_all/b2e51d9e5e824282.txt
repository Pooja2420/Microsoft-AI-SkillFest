Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Memory management
Article
2025-04-22
6 contributors
Applies to: â Azure Cache for Redis
In this article
This article describes best practices for memory management in Azure Cache for Redis.
Choose the right eviction policy
Choose aneviction policythat works for your application. The default policy for Azure Cache for Redis isvolatile-lru, which means that only keys that have a time to live (TTL) value set with a command likeEXPIREare eligible for eviction. If no keys have a TTL value, the system doesn't evict any keys. If you want the system to allow any key to be evicted if under memory pressure, consider theallkeys-lrupolicy.
volatile-lru
allkeys-lru
Set a keys expiration date
Eviction due to memory pressure can cause more load on your server. Set an expiration value on your keys to remove keys proactively instead of waiting until there's memory pressure. For more information, see the documentation for the RedisEXPIREandEXPIREATcommands.
Minimize memory fragmentation
Large key values can leave memory fragmented on eviction and might lead to high memory usage and server load.
Monitor memory usage
Monitor memory usageto ensure that you don't run out of memory.Create alertsto give you a chance to scale your cache before issues occur.
Configure your maxmemory-reserved setting
Configure yourmaxmemory-reserved settingsto maximize system responsiveness. Sufficient reservation settings are especially important for write-heavy workloads, or if you're storing values of 100 KB or more in your cache.
Themaxmemory-reservedsetting configures the amount of memory, in MB per instance in a cluster, reserved for noncache operations such as replication during failover. Setting this value allows you to have a more consistent Redis server experience when your load varies.
Themaxmemory-reservedsetting configures the amount of memory, in MB per instance in a cluster, reserved for noncache operations such as replication during failover. Setting this value allows you to have a more consistent Redis server experience when your load varies.
maxmemory-reserved
Themaxfragmentationmemory-reservedsetting configures the amount of memory, in MB per instance in a cluster, reserved to accommodate memory fragmentation. When you set this value, the Redis server experience is more consistent when the cache is full or close to full and the fragmentation ratio is high.
Themaxfragmentationmemory-reservedsetting configures the amount of memory, in MB per instance in a cluster, reserved to accommodate memory fragmentation. When you set this value, the Redis server experience is more consistent when the cache is full or close to full and the fragmentation ratio is high.
maxfragmentationmemory-reserved
When memory is reserved for these operations, it's unavailable for storing cached data. By default when you create a cache, approximately 10% of the available memory is reserved formaxmemory-reserved, and another 10% is reserved formaxfragmentationmemory-reserved. You can increase the amounts reserved if you have write-heavy loads.
maxmemory-reserved
maxfragmentationmemory-reserved
The allowed ranges formaxmemory-reservedand formaxfragmentationmemory-reservedare 10%-60% ofmaxmemory. If you try to set these values lower than 10% or higher than 60%, they're reevaluated and set to the 10% minimum and 60% maximum.
maxmemory-reserved
maxfragmentationmemory-reserved
maxmemory
When you scale a cache up or down, bothmaxmemory-reservedandmaxfragmentationmemory-reservedsettings automatically scale in proportion to the cache size. For example, ifmaxmemory-reservedis set to 3 GB on a 6-GB cache, and you scale to a 12-GB cache, the setting automatically updates to 6 GB during scaling. If you scale down, the reverse happens.
maxmemory-reserved
maxfragmentationmemory-reserved
maxmemory-reserved
Consider how changing amaxmemory-reservedormaxfragmentationmemory-reservedmemory reservation value might affect a cache with a large amount of data in it that is already running. For instance, if you have a 53-GB cache with the reserved values set to the 10% minimums, the maximum available memory for the system is approximately 42 GB. If either your currentused_memoryorused_memory_rssvalues are higher than 42 GB, the system must evict data until bothused_memoryandused_memory_rssare below 42 GB.
maxmemory-reserved
maxfragmentationmemory-reserved
used_memory
used_memory_rss
used_memory
used_memory_rss
Eviction can increase server load and memory fragmentation. For more information on cache metrics such asused_memoryandused_memory_rss, seeCreate your own metrics.
used_memory
used_memory_rss
Note
When you scale a cache up or down programmatically by using Azure PowerShell, Azure CLI, or REST API, any includedmaxmemory-reservedormaxfragmentationmemory-reservedsettings are ignored as part of the update request. Only your scaling change is honored. You can update the memory settings after the scaling operation completes.
maxmemory-reserved
maxfragmentationmemory-reserved
Related content
Memory policies
Troubleshoot high memory usage
Best practices for scaling
Best practices for development
Azure Cache for Redis development FAQs
Feedback
Was this page helpful?
Additional resources