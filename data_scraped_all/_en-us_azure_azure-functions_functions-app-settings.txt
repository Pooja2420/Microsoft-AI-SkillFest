Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
App settings reference for Azure Functions
Article
2024-07-11
45 contributors
In this article
Application settings in a function app contain configuration options that affect all functions for that function app. These settings are accessed as environment variables. This article lists the app settings that are available in function apps.
There are several ways that you can add, update, and delete function app settings:
In the Azure portal.
By using the Azure CLI.
By using Azure PowerShell.
Changes to function app settings require your function app to be restarted.
In this article, example connection string values are truncated for readability.
Because Azure Functions uses the Azure App Service platform for hosting, you might find some settings relevant to your function app hosting documented inEnvironment variables and app settings in Azure App Service.
App setting considerations
When using app settings, you should be aware of the following considerations:
Changes to function app settings require your function app to be restarted.
Changes to function app settings require your function app to be restarted.
In setting names, double-underscore (__) and colon (:) are considered reserved values. Double-underscores are interpreted as hierarchical delimiters on both Windows and Linux, and colons are interpreted in the same way only on Windows. For example, the settingAzureFunctionsWebHost__hostid=somehost_123456would be interpreted as the following JSON object:"AzureFunctionsWebHost": {
    "hostid": "somehost_123456"
}In this article, only double-underscores are used, since they're supported on both operating systems. Most of the settings that support managed identity connections use double-underscores.
In setting names, double-underscore (__) and colon (:) are considered reserved values. Double-underscores are interpreted as hierarchical delimiters on both Windows and Linux, and colons are interpreted in the same way only on Windows. For example, the settingAzureFunctionsWebHost__hostid=somehost_123456would be interpreted as the following JSON object:
__
:
AzureFunctionsWebHost__hostid=somehost_123456
"AzureFunctionsWebHost": {
    "hostid": "somehost_123456"
}
"AzureFunctionsWebHost": {
    "hostid": "somehost_123456"
}
In this article, only double-underscores are used, since they're supported on both operating systems. Most of the settings that support managed identity connections use double-underscores.
When Functions runs locally, app settings are specified in theValuescollection in thelocal.settings.json.
When Functions runs locally, app settings are specified in theValuescollection in thelocal.settings.json.
Values
There are other function app configuration options in thehost.jsonfile and in thelocal.settings.jsonfile.
There are other function app configuration options in thehost.jsonfile and in thelocal.settings.jsonfile.
You can use application settings to override host.json setting values without having to change the host.json file itself. This is helpful for scenarios where you need to configure or modify specific host.json settings for a specific environment. This also lets you change host.json settings without having to republish your project. To learn more, see thehost.json reference article.
You can use application settings to override host.json setting values without having to change the host.json file itself. This is helpful for scenarios where you need to configure or modify specific host.json settings for a specific environment. This also lets you change host.json settings without having to republish your project. To learn more, see thehost.json reference article.
This article documents the settings that are most relevant to your function apps. Because Azure Functions runs on App Service, other application settings are also supported. For more information, seeEnvironment variables and app settings in Azure App Service.
This article documents the settings that are most relevant to your function apps. Because Azure Functions runs on App Service, other application settings are also supported. For more information, seeEnvironment variables and app settings in Azure App Service.
Some scenarios also require you to work with settings documented inApp Service site settings.
Some scenarios also require you to work with settings documented inApp Service site settings.
Changing anyread-onlyApp Service application settingscan put your function app into an unresponsive state.
Changing anyread-onlyApp Service application settingscan put your function app into an unresponsive state.
Take care when updating application settings by using REST APIs, including ARM templates. Because these APIs replace the existing application settings, you must include all existing settings when adding or modifying settings using REST APIs or ARM templates. When possible use Azure CLI or Azure PowerShell to programmatically work with application settings. For more information, seeWork with application settings.
Take care when updating application settings by using REST APIs, including ARM templates. Because these APIs replace the existing application settings, you must include all existing settings when adding or modifying settings using REST APIs or ARM templates. When possible use Azure CLI or Azure PowerShell to programmatically work with application settings. For more information, seeWork with application settings.
APPINSIGHTS_INSTRUMENTATIONKEY
The instrumentation key for Application Insights. Don't use bothAPPINSIGHTS_INSTRUMENTATIONKEYandAPPLICATIONINSIGHTS_CONNECTION_STRING. When possible, useAPPLICATIONINSIGHTS_CONNECTION_STRING. When Application Insights runs in a sovereign cloud, you must useAPPLICATIONINSIGHTS_CONNECTION_STRING. For more information, seeHow to configure monitoring for Azure Functions.
APPINSIGHTS_INSTRUMENTATIONKEY
APPLICATIONINSIGHTS_CONNECTION_STRING
APPLICATIONINSIGHTS_CONNECTION_STRING
APPLICATIONINSIGHTS_CONNECTION_STRING
55555555-af77-484b-9032-64f83bb83bb
Don't use bothAPPINSIGHTS_INSTRUMENTATIONKEYandAPPLICATIONINSIGHTS_CONNECTION_STRING. Use ofAPPLICATIONINSIGHTS_CONNECTION_STRINGis recommended.
APPINSIGHTS_INSTRUMENTATIONKEY
APPLICATIONINSIGHTS_CONNECTION_STRING
APPLICATIONINSIGHTS_CONNECTION_STRING
APPLICATIONINSIGHTS_AUTHENTICATION_STRING
Enables access to Application Insights by using Microsoft Entra authentication. Use this setting when you must connect to your Application Insights workspace by using Microsoft Entra authentication. For more information, seeMicrosoft Entra authentication for Application Insights.
When you useAPPLICATIONINSIGHTS_AUTHENTICATION_STRING, the specific value that you set depends on the type of managed identity:
APPLICATIONINSIGHTS_AUTHENTICATION_STRING
Authorization=AAD
Authorization=AAD;ClientId=<USER_ASSIGNED_CLIENT_ID>
This authentication requirement is applied to connections from the Functions host, snapshot debugger, profiler, and any language-specific agents. To use this setting, the managed identity must already be available to the function app, with an assigned role equivalent toMonitoring Metrics Publisher.
Note
When usingAPPLICATIONINSIGHTS_AUTHENTICATION_STRINGto connect to Application Insights using Microsoft Entra authentication, you should alsoDisable local authentication for Application Insights. This configuration requires Microsoft Entra authentication in order for telemetry to be ingested into your workspace.
APPLICATIONINSIGHTS_AUTHENTICATION_STRING
APPLICATIONINSIGHTS_CONNECTION_STRING
The connection string for Application Insights. Don't use bothAPPINSIGHTS_INSTRUMENTATIONKEYandAPPLICATIONINSIGHTS_CONNECTION_STRING. While the use ofAPPLICATIONINSIGHTS_CONNECTION_STRINGis recommended in all cases, it's required in the following cases:
APPINSIGHTS_INSTRUMENTATIONKEY
APPLICATIONINSIGHTS_CONNECTION_STRING
APPLICATIONINSIGHTS_CONNECTION_STRING
When your function app requires the added customizations supported by using the connection string
When your Application Insights instance runs in a sovereign cloud, which requires a custom endpoint
For more information, seeConnection strings.
InstrumentationKey=...
To connect to Application Insights with Microsoft Entra authentication, you should useAPPLICATIONINSIGHTS_AUTHENTICATION_STRING.
APPLICATIONINSIGHTS_AUTHENTICATION_STRING
AZURE_FUNCTION_PROXY_DISABLE_LOCAL_CALL
Important
Azure Functions proxies is a legacy feature forversions 1.x through 3.xof the Azure Functions runtime. For more information about legacy support in version 4.x, seeFunctions proxies.
By default, Functions proxies use a shortcut to send API calls from proxies directly to functions in the same function app. This shortcut is used instead of creating a new HTTP request. This setting allows you to disable that shortcut behavior.
true
false
false
AZURE_FUNCTION_PROXY_BACKEND_URL_DECODE_SLASHES
Important
Azure Functions proxies is a legacy feature forversions 1.x through 3.xof the Azure Functions runtime. For more information about legacy support in version 4.x, seeFunctions proxies.
This setting controls whether the characters%2Fare decoded as slashes in route parameters when they're inserted into the backend URL.
%2F
true
false
For example, consider the proxies.json file for a function app at themyfunction.comdomain.
myfunction.com
{
    "$schema": "http://json.schemastore.org/proxies",
    "proxies": {
        "root": {
            "matchCondition": {
                "route": "/{*all}"
            },
            "backendUri": "example.com/{all}"
        }
    }
}
{
    "$schema": "http://json.schemastore.org/proxies",
    "proxies": {
        "root": {
            "matchCondition": {
                "route": "/{*all}"
            },
            "backendUri": "example.com/{all}"
        }
    }
}
WhenAZURE_FUNCTION_PROXY_BACKEND_URL_DECODE_SLASHESis set totrue, the URLexample.com/api%2ftestresolves toexample.com/api/test. By default, the URL remains unchanged asexample.com/test%2fapi. For more information, seeFunctions proxies.
AZURE_FUNCTION_PROXY_BACKEND_URL_DECODE_SLASHES
true
example.com/api%2ftest
example.com/api/test
example.com/test%2fapi
AZURE_FUNCTIONS_ENVIRONMENT
Configures the runtimehosting environmentof the function app when running in Azure. This value is read during initialization, and only these values are honored by the runtime:
Production
AZURE_FUNCTIONS_ENVIRONMENT
Staging
Development
AZURE_FUNCTIONS_ENVIRONMENT
Development
Use this setting instead ofASPNETCORE_ENVIRONMENTwhen you need to change the runtime environment in Azure to something other thanProduction. For more information, seeEnvironment-based Startup class and methods.
ASPNETCORE_ENVIRONMENT
Production
This setting isn't available in version 1.x of the Functions runtime.
AzureFunctionsJobHost__*
In version 2.x and later versions of the Functions runtime, application settings can overridehost.jsonsettings in the current environment. These overrides are expressed as application settings namedAzureFunctionsJobHost__path__to__setting. For more information, seeOverride host.json values.
AzureFunctionsJobHost__path__to__setting
AzureFunctionsWebHost__hostid
Sets the host ID for a given function app, which should be a unique ID. This setting overrides the automatically generated host ID value for your app. Use this setting only when you need to prevent host ID collisions between function apps that share the same storage account.
A host ID must meet the following requirements:
Be between 1 and 32 characters
contain only lowercase letters, numbers, and dashes
Not start or end with a dash
Not contain consecutive dashes
An easy way to generate an ID is to take a GUID, remove the dashes, and make it lower case, such as by converting the GUID1835D7B5-5C98-4790-815D-072CC94C6F71to the value1835d7b55c984790815d072cc94c6f71.
1835D7B5-5C98-4790-815D-072CC94C6F71
1835d7b55c984790815d072cc94c6f71
myuniquefunctionappname123456789
For more information, seeHost ID considerations.
AzureWebJobsDashboard
This setting is deprecated and is only supported when running on version 1.x of the Azure Functions runtime.
Optional storage account connection string for storing logs and displaying them in theMonitortab in the portal. The storage account must be a general-purpose one that supports blobs, queues, and tables. To learn more, seeStorage account requirements.
DefaultEndpointsProtocol=https;AccountName=...
AzureWebJobsDisableHomepage
A value oftruedisables the default landing page that is shown for the root URL of a function app. The default value isfalse.
true
false
true
When this app setting is omitted or set tofalse, a page similar to the following example is displayed in response to the URL<functionappname>.azurewebsites.net.
false
<functionappname>.azurewebsites.net

AzureWebJobsDotNetReleaseCompilation
truemeans useReleasemode when compiling .NET code;falsemeans use Debug mode. Default istrue.
true
Release
false
true
true
AzureWebJobsFeatureFlags
A comma-delimited list of beta features to enable. Beta features enabled by these flags aren't production ready, but can be enabled for experimental use before they go live.
feature1,feature2,EnableProxies
AddEnableProxiesto this list to re-enable proxies on version 4.x of the Functions runtime while you plan your migration to Azure API Management. For more information, seeRe-enable proxies in Functions v4.x.
EnableProxies
AzureWebJobsKubernetesSecretName
Indicates the Kubernetes Secrets resource used for storing keys. Supported only when running in Kubernetes. This setting requires you to setAzureWebJobsSecretStorageTypetokubernetes. WhenAzureWebJobsKubernetesSecretNameisn't set, the repository is considered read only. In this case, the values must be generated before deployment. TheAzure Functions Core Toolsgenerates the values automatically when deploying to Kubernetes.
AzureWebJobsSecretStorageType
kubernetes
AzureWebJobsKubernetesSecretName
<SECRETS_RESOURCE>
To learn more, seeManage key storage.
AzureWebJobsSecretStorageKeyVaultClientId
The client ID of the user-assigned managed identity or the app registration used to access the vault where keys are stored. This setting requires you to setAzureWebJobsSecretStorageTypetokeyvault. Supported in version 4.x and later versions of the Functions runtime.
AzureWebJobsSecretStorageType
keyvault
<CLIENT_ID>
To learn more, seeManage key storage.
AzureWebJobsSecretStorageKeyVaultClientSecret
The secret for client ID of the user-assigned managed identity or the app registration used to access the vault where keys are stored. This setting requires you to setAzureWebJobsSecretStorageTypetokeyvault. Supported in version 4.x and later versions of the Functions runtime.
AzureWebJobsSecretStorageType
keyvault
<CLIENT_SECRET>
To learn more, seeManage key storage.
AzureWebJobsSecretStorageKeyVaultName
This setting is deprecated and was only used when running on version 3.x of the Azure Functions runtime.
The name of a key vault instance used to store keys. This setting was only used in version 3.x of the Functions runtime, which is no longer supported. For version 4.x, instead useAzureWebJobsSecretStorageKeyVaultUri. This setting requires you to setAzureWebJobsSecretStorageTypetokeyvault.
AzureWebJobsSecretStorageKeyVaultUri
AzureWebJobsSecretStorageType
keyvault
The vault must have an access policy corresponding to the system-assigned managed identity of the hosting resource. The access policy should grant the identity the following secret permissions:Get,Set,List, andDelete.When your functions run locally, the developer identity is used, and settings must be in thelocal.settings.json file.
Get
Set
List
Delete
<VAULT_NAME>
To learn more, seeManage key storage.
AzureWebJobsSecretStorageKeyVaultTenantId
The tenant ID of the app registration used to access the vault where keys are stored. This setting requires you to setAzureWebJobsSecretStorageTypetokeyvault. Supported in version 4.x and later versions of the Functions runtime. To learn more, seeManage key storage.
AzureWebJobsSecretStorageType
keyvault
<TENANT_ID>
AzureWebJobsSecretStorageKeyVaultUri
The URI of a key vault instance used to store keys. Supported in version 4.x and later versions of the Functions runtime. This is the recommended setting for using a key vault instance for key storage. This setting requires you to setAzureWebJobsSecretStorageTypetokeyvault.
AzureWebJobsSecretStorageType
keyvault
TheAzureWebJobsSecretStorageKeyVaultUrivalue should be the full value ofVault URIdisplayed in theKey Vault overviewtab, includinghttps://.
AzureWebJobsSecretStorageKeyVaultUri
https://
The vault must have an access policy corresponding to the system-assigned managed identity of the hosting resource. The access policy should grant the identity the following secret permissions:Get,Set,List, andDelete.When your functions run locally, the developer identity is used, and settings must be in thelocal.settings.json file.
Get
Set
List
Delete
https://<VAULT_NAME>.vault.azure.net
To learn more, seeUse Key Vault references for Azure Functions.
AzureWebJobsSecretStorageSas
A Blob Storage SAS URL for a second storage account used for key storage. By default, Functions uses the account set inAzureWebJobsStorage. When using this secret storage option, make sure thatAzureWebJobsSecretStorageTypeisn't explicitly set or is set toblob. To learn more, seeManage key storage.
AzureWebJobsStorage
AzureWebJobsSecretStorageType
blob
<BLOB_SAS_URL>
AzureWebJobsSecretStorageType
Specifies the repository or provider to use for key storage. Keys are always encrypted before being stored using a secret unique to your function app.
blob
AzureWebJobsStorage
AzureWebJobsSecretStorageType
AzureWebJobsSecretStorageSas
files
keyvault
AzureWebJobsSecretStorageKeyVaultName
kubernetes
AzureWebJobsKubernetesSecretName
To learn more, seeManage key storage.
AzureWebJobsStorage
Specifies the connection string for an Azure Storage account that the Functions runtime uses for normal operations. Some uses of this storage account by Functions include key management, timer trigger management, and Event Hubs checkpoints. The storage account must be a general-purpose one that supports blobs, queues, and tables. For more information, seeStorage account requirements.
DefaultEndpointsProtocol=https;AccountName=...
Instead of a connection string, you can use an identity-based connection for this storage account. For more information, seeConnecting to host storage with an identity.
AzureWebJobsStorage__accountName
When using an identity-based storage connection, sets the account name of the storage account instead of using the connection string inAzureWebJobsStorage. This syntax is unique toAzureWebJobsStorageand can't be used for other identity-based connections.
AzureWebJobsStorage
AzureWebJobsStorage
<STORAGE_ACCOUNT_NAME>
For sovereign clouds or when using a custom DNS, you must instead use the service-specificAzureWebJobsStorage__*ServiceUrisettings.
AzureWebJobsStorage__*ServiceUri
AzureWebJobsStorage__blobServiceUri
When using an identity-based storage connection, sets the data plane URI of the blob service of the storage account.
https://<STORAGE_ACCOUNT_NAME>.blob.core.windows.net
Use this setting instead ofAzureWebJobsStorage__accountNamein sovereign clouds or when using a custom DNS. For more information, seeConnecting to host storage with an identity.
AzureWebJobsStorage__accountName
AzureWebJobsStorage__queueServiceUri
When using an identity-based storage connection, sets the data plane URI of the queue service of the storage account.
https://<STORAGE_ACCOUNT_NAME>.queue.core.windows.net
Use this setting instead ofAzureWebJobsStorage__accountNamein sovereign clouds or when using a custom DNS. For more information, seeConnecting to host storage with an identity.
AzureWebJobsStorage__accountName
AzureWebJobsStorage__tableServiceUri
When using an identity-based storage connection, sets data plane URI of a table service of the storage account.
https://<STORAGE_ACCOUNT_NAME>.table.core.windows.net
Use this setting instead ofAzureWebJobsStorage__accountNamein sovereign clouds or when using a custom DNS. For more information, seeConnecting to host storage with an identity.
AzureWebJobsStorage__accountName
AzureWebJobs_TypeScriptPath
Path to the compiler used for TypeScript. Allows you to override the default if you need to.
%HOME%\typescript
DOCKER_REGISTRY_SERVER_PASSWORD
Indicates the password used to access a private container registry. This setting is only required when deploying your containerized function app from a private container registry. For more information, seeEnvironment variables and app settings in Azure App Service.
DOCKER_REGISTRY_SERVER_URL
Indicates the URL of a private container registry. This setting is only required when deploying your containerized function app from a private container registry. For more information, seeEnvironment variables and app settings in Azure App Service.
DOCKER_REGISTRY_SERVER_USERNAME
Indicates the account used to access a private container registry. This setting is only required when deploying your containerized function app from a private container registry. For more information, seeEnvironment variables and app settings in Azure App Service.
DOCKER_SHM_SIZE
Sets the shared memory size (in bytes) when the Python worker is using shared memory. To learn more, seeShared memory.
268435456
The value above sets a shared memory size of ~256 MB.
Requires thatFUNCTIONS_WORKER_SHARED_MEMORY_DATA_TRANSFER_ENABLEDbe set to1.
FUNCTIONS_WORKER_SHARED_MEMORY_DATA_TRANSFER_ENABLED
1
ENABLE_ORYX_BUILD
Indicates whether theOryx build systemis used during deployment.ENABLE_ORYX_BUILDmust be set totruewhen doing remote build deployments to Linux. For more information, seeRemote build.
ENABLE_ORYX_BUILD
true
true
FUNCTION_APP_EDIT_MODE
Indicates whether you're able to edit your function app in the Azure portal. Valid values arereadwriteandreadonly.
readwrite
readonly
readonly
The value is set by the runtime based on the language stack and deployment status of your function app. For more information, seeDevelopment limitations in the Azure portal.
FUNCTIONS_EXTENSION_VERSION
The version of the Functions runtime that hosts your function app. A tilde (~) with major version means use the latest version of that major version (for example,~4). When new minor versions of the same major version are available, they're automatically installed in the function app.
~
~4
~4
The following major runtime version values are supported:
~4
~1
A value of~4means that your app runs on version 4.x of the runtime. A value of~1pins your app to version 1.x of the runtime. Runtime versions 2.x and 3.x are no longer supported. For more information, seeAzure Functions runtime versions overview.
If requested by support to pin your app to a specific minor version, use the full version number (for example,4.0.12345). For more information, seeHow to target Azure Functions runtime versions.
~4
~1
4.0.12345
FUNCTIONS_INPROC_NET8_ENABLED
Indicates whether to an app can use .NET 8 on the in-process model. To use .NET 8 on the in-process model, this value must be set to1. SeeUpdating to target .NET 8for complete instructions, including other required configuration values.
1
1
Set to0to disable support for .NET 8 on the in-process model.
0
FUNCTIONS_NODE_BLOCK_ON_ENTRY_POINT_ERROR
This app setting is a temporary way for Node.js apps to enable a breaking change that makes entry point errors easier to troubleshoot on Node.js v18 or lower. It's highly recommended to usetrue, especially for programming model v4 apps, which always use entry point files. The behavior without the breaking change (false) ignores entry point errors and doesn't log them in Application Insights.
true
false
Starting with Node.js v20, the app setting has no effect and the breaking change behavior is always enabled.
For Node.js v18 or lower, the app setting is used, and the default behavior depends on if the error happens before or after a model v4 function has been registered:
If the error is thrown before (for example if you're using model v3 or your entry point file doesn't exist), the default behavior matchesfalse.
false
If the error is thrown after (for example if you try to register duplicate model v4 functions), the default behavior matchestrue.
true
true
false
FUNCTIONS_REQUEST_BODY_SIZE_LIMIT
Overrides the default limit on the body size of requests sent to HTTP endpoints. The value is given in bytes, with a default maximum request size of 104,857,600 bytes.
250000000
FUNCTIONS_V2_COMPATIBILITY_MODE
Important
This setting is no longer supported. It was originally provided to enable a short-term workaround for apps that targeted the v2.x runtime to be able to instead run on the v3.x runtime while it was still supported. Except for legacy apps that run on version 1.x, all function apps must run on version 4.x of the Functions runtime:FUNCTIONS_EXTENSION_VERSION=~4. For more information, seeAzure Functions runtime versions overview.
FUNCTIONS_EXTENSION_VERSION=~4
FUNCTIONS_WORKER_PROCESS_COUNT
Specifies the maximum number of language worker processes, with a default value of1. The maximum value allowed is10. Function invocations are evenly distributed among language worker processes. Language worker processes are spawned every 10 seconds until the count set byFUNCTIONS_WORKER_PROCESS_COUNTis reached. Using multiple language worker processes isn't the same asscaling. Consider using this setting when your workload has a mix of CPU-bound and I/O-bound invocations. This setting applies to all language runtimes, except for .NET running in process (FUNCTIONS_WORKER_RUNTIME=dotnet).
1
10
FUNCTIONS_WORKER_PROCESS_COUNT
FUNCTIONS_WORKER_RUNTIME=dotnet
2
FUNCTIONS_WORKER_RUNTIME
The language or language stack of the worker runtime to load in the function app. This corresponds to the language being used in your application (for example,python). Starting with version 2.x of the Azure Functions runtime, a given function app can only support a single language.
python
node
Valid values:
dotnet
dotnet-isolated
java
node
powershell
python
custom
FUNCTIONS_WORKER_SHARED_MEMORY_DATA_TRANSFER_ENABLED
This setting enables the Python worker to use shared memory to improve throughput. Enable shared memory when your Python function app is hitting memory bottlenecks.
1
With this setting enabled, you can use theDOCKER_SHM_SIZEsetting to set the shared memory size. To learn more, seeShared memory.
JAVA_OPTS
Used to customize the Java virtual machine (JVM) used to run your Java functions when running on aPremium planorDedicated plan. When running on a Consumption plan, instead uselanguageWorkers__java__arguments. For more information, seeCustomize JVM.
languageWorkers__java__arguments
languageWorkers__java__arguments
Used to customize the Java virtual machine (JVM) used to run your Java functions when running on aConsumption plan. This setting does increase the cold start times for Java functions running in a Consumption plan. For a Premium or Dedicated plan, instead useJAVA_OPTS. For more information, seeCustomize JVM.
JAVA_OPTS
MDMaxBackgroundUpgradePeriod
Controls the managed dependencies background update period for PowerShell function apps, with a default value of7.00:00:00(weekly).
7.00:00:00
Each PowerShell worker process initiates checking for module upgrades on the PowerShell Gallery on process start and everyMDMaxBackgroundUpgradePeriodafter that. When a new module version is available in the PowerShell Gallery, it's installed to the file system and made available to PowerShell workers. Decreasing this value lets your function app get newer module versions sooner, but it also increases the app resource usage (network I/O, CPU, storage). Increasing this value decreases the app's resource usage, but it can also delay delivering new module versions to your app.
MDMaxBackgroundUpgradePeriod
7.00:00:00
To learn more, seeDependency management.
MDNewSnapshotCheckPeriod
Specifies how often each PowerShell worker checks whether managed dependency upgrades have been installed. The default frequency is01:00:00(hourly).
01:00:00
After new module versions are installed to the file system, every PowerShell worker process must be restarted. Restarting PowerShell workers affects your app availability as it can interrupt current function execution. Until all PowerShell worker processes are restarted, function invocations can use either the old or the new module versions. Restarting all PowerShell workers completes withinMDNewSnapshotCheckPeriod.
MDNewSnapshotCheckPeriod
Within everyMDNewSnapshotCheckPeriod, the PowerShell worker checks whether or not managed dependency upgrades have been installed. When upgrades have been installed, a restart is initiated. Increasing this value decreases the frequency of interruptions because of restarts. However, the increase might also increase the time during which function invocations could use either the old or the new module versions, nondeterministically.
MDNewSnapshotCheckPeriod
01:00:00
To learn more, seeDependency management.
MDMinBackgroundUpgradePeriod
The period of time after a previous managed dependency upgrade check before another upgrade check is started, with a default of1.00:00:00(daily).
1.00:00:00
To avoid excessive module upgrades on frequent Worker restarts, checking for module upgrades isn't performed when any worker has already initiated that check in the lastMDMinBackgroundUpgradePeriod.
MDMinBackgroundUpgradePeriod
1.00:00:00
To learn more, seeDependency management.
PIP_INDEX_URL
This setting lets you override the base URL of the Python Package Index, which by default ishttps://pypi.org/simple. Use this setting when you need to run a remote build using custom dependencies. These custom dependencies can be in a package index repository compliant with PEP 503 (the simple repository API) or in a local directory that follows the same format.
https://pypi.org/simple
http://my.custom.package.repo/simple
To learn more, seepipdocumentation for--index-urland usingCustom dependenciesin the Python developer reference.
pip
--index-url
PIP_EXTRA_INDEX_URL
The value for this setting indicates an extra index URL for custom packages for Python apps, to use in addition to the--index-url. Use this setting when you need to run a remote build using custom dependencies that are found in an extra package index. Should follow the same rules as--index-url.
--index-url
--index-url
http://my.custom.package.repo/simple
To learn more, seepipdocumentation for--extra-index-urlandCustom dependenciesin the Python developer reference.
pip
--extra-index-url
PROJECT
Acontinuous deploymentsetting that tells the Kudu deployment service the folder in a connected repository to location the deployable project.
WebProject/WebProject.csproj
PYTHON_ISOLATE_WORKER_DEPENDENCIES
The configuration is specific to Python function apps. It defines the prioritization of module loading order. By default, this value is set to0.
0
0
1
PYTHON_ENABLE_DEBUG_LOGGING
Enables debug-level logging in a Python function app. A value of1enables debug-level logging. Without this setting or with a value of0, only information and higher-level logs are sent from the Python worker to the Functions host. Use this setting when debugging or tracing your Python function executions.
1
0
When debugging Python functions, make sure to also set a debug or tracelogging levelin the host.json file, as needed. To learn more, seeHow to configure monitoring for Azure Functions.
PYTHON_ENABLE_WORKER_EXTENSIONS
The configuration is specific to Python function apps. Setting this to1allows the worker to load inPython worker extensionsdefined in requirements.txt. It enables your function app to access new features provided by third-party packages. It can also change the behavior of function load and invocation in your app. Ensure the extension you choose is trustworthy as you bear the risk of using it. Azure Functions gives no express warranties to any extensions. For how to use an extension, visit the extension's manual page or readme doc. By default, this value sets to0.
1
0
0
1
PYTHON_THREADPOOL_THREAD_COUNT
Specifies the maximum number of threads that a Python language worker would use to execute function invocations, with a default value of1for Python version3.8and below. For Python version3.9and above, the value is set toNone. This setting doesn't guarantee the number of threads that would be set during executions. The setting allows Python to expand the number of threads to the specified value. The setting only applies to Python functions apps. Additionally, the setting applies to synchronous functions invocation and not for coroutines.
1
3.8
3.9
None
SCALE_CONTROLLER_LOGGING_ENABLED
This setting is currently in preview.
This setting controls logging from the Azure Functions scale controller. For more information, seeScale controller logs.
AppInsights:Verbose
The value for this key is supplied in the format<DESTINATION>:<VERBOSITY>, which is defined as follows:
<DESTINATION>:<VERBOSITY>
<DESTINATION>
AppInsights
Blob
AppInsights
Blob
azure-functions-scale-controller
AzureWebJobsStorage
<VERBOSITY>
None
Warning
Verbose
Verbose
Tip
Keep in mind that while you leave scale controller logging enabled, it impacts thepotential costs of monitoring your function app. Consider enabling logging until you have collected enough data to understand how the scale controller is behaving, and then disabling it.
SCM_DO_BUILD_DURING_DEPLOYMENT
Controls remote build behavior during deployment. WhenSCM_DO_BUILD_DURING_DEPLOYMENTis set totrue, the project is built remotely during deployment.
SCM_DO_BUILD_DURING_DEPLOYMENT
true
true
SCM_LOGSTREAM_TIMEOUT
Controls the timeout, in seconds, when connected to streaming logs. The default value is 7200 (2 hours).
1800
The above sample value of1800sets a timeout of 30 minutes. For more information, seeEnable streaming execution logs in Azure Functions.
1800
WEBSITE_CONTENTAZUREFILECONNECTIONSTRING
Connection string for storage account where the function app code and configuration are stored in event-driven scaling plans. For more information, seeStorage account connection setting.
DefaultEndpointsProtocol=https;AccountName=...
This setting is required for Consumption and Elastic Premium plan apps running on both Windows and Linux. It's not required for Dedicated plan apps, which aren't dynamically scaled by Functions.
Changing or removing this setting can cause your function app to not start. To learn more, seethis troubleshooting article.
Azure Files doesn't support using managed identity when accessing the file share. For more information, seeAzure Files supported authentication scenarios.
WEBSITE_CONTENTOVERVNET
Important
WEBSITE_CONTENTOVERVNET is a legacy app setting that has been replaced by thevnetContentShareEnabledsite property.
A value of1enables your function app to scale when you have your storage account restricted to a virtual network. You should enable this setting when restricting your storage account to a virtual network. Only required when usingWEBSITE_CONTENTSHAREandWEBSITE_CONTENTAZUREFILECONNECTIONSTRING. To learn more, seeRestrict your storage account to a virtual network.
1
WEBSITE_CONTENTSHARE
WEBSITE_CONTENTAZUREFILECONNECTIONSTRING
1
This app setting is required on theElastic PremiumandDedicated (App Service) plans(Standard and higher). Not supported when running on aConsumption plan.
Note
You must take special care when routing to the content share in a storage account shared by multiple function apps in the same plan. For more information, seeConsistent routing through virtual networksin the Storage considerations article.
WEBSITE_CONTENTSHARE
The name of the file share that Functions uses to store function app code and configuration files. This content is required by event-driven scaling plans. Used withWEBSITE_CONTENTAZUREFILECONNECTIONSTRING. Default is a unique string generated by the runtime, which begins with the function app name. For more information, seeStorage account connection setting.
WEBSITE_CONTENTAZUREFILECONNECTIONSTRING
functionapp091999e2
This setting is required for Consumption and Premium plan apps on both Windows and Linux. It's not required for Dedicated plan apps, which aren't dynamically scaled by Functions.
The share is created when your function app is created. Changing or removing this setting can cause your function app to not start. To learn more, seethis troubleshooting article.
The following considerations apply when using an Azure Resource Manager (ARM) template or Bicep file to create a function app during deployment:
When you don't set aWEBSITE_CONTENTSHAREvalue for the main function app or any apps in slots, unique share values are generated for you. Not settingWEBSITE_CONTENTSHAREis the recommended approachfor an ARM template deployment.
WEBSITE_CONTENTSHARE
WEBSITE_CONTENTSHARE
There are scenarios where you must set theWEBSITE_CONTENTSHAREvalue to a predefined value, such as when youuse a secured storage account in a virtual network. In this case, you must set a unique share name for the main function app and the app for each deployment slot. In the case of a storage account secured by a virtual network, you must also create the share itself as part of your automated deployment. For more information, seeSecured deployments.
WEBSITE_CONTENTSHARE
Don't makeWEBSITE_CONTENTSHAREa slot setting.
WEBSITE_CONTENTSHARE
When you specifyWEBSITE_CONTENTSHARE, the value must followthis guidance for share names.
WEBSITE_CONTENTSHARE
WEBSITE_DNS_SERVER
Sets the DNS server used by an app when resolving IP addresses. This setting is often required when using certain networking functionality, such asAzure DNS private zonesandprivate endpoints.
168.63.129.16
WEBSITE_ENABLE_BROTLI_ENCODING
Controls whether Brotli encoding is used for compression instead of the default gzip compression. WhenWEBSITE_ENABLE_BROTLI_ENCODINGis set to1, Brotli encoding is used; otherwise gzip encoding is used.
WEBSITE_ENABLE_BROTLI_ENCODING
1
WEBSITE_FUNCTIONS_ARMCACHE_ENABLED
Disables caching when deploying function apps using Azure Resource Manager (ARM) templates.
WEBSITE_MAX_DYNAMIC_APPLICATION_SCALE_OUT
The maximum number of instances that the app can scale out to. Default is no limit.
Important
This setting is in preview.  Anapp property for function max scale outhas been added and is the recommended way to limit scale out.
5
WEBSITE_NODE_DEFAULT_VERSION
Windows only.Sets the version of Node.js to use when running your function app on Windows. You should use a tilde (~) to have the runtime use the latest available version of the targeted major version. For example, when set to~18, the latest version of Node.js 18 is used. When a major version is targeted with a tilde, you don't have to manually update the minor version.
~18
~18
WEBSITE_OVERRIDE_STICKY_DIAGNOSTICS_SETTINGS
When performinga slot swapon a function app running on a Premium plan, the swap can fail when the dedicated storage account used by the app is network restricted. This failure is caused by a legacyapplication logging feature, which is shared by both Functions and App Service. This setting overrides that legacy logging feature and allows the swap to occur.
0
AddWEBSITE_OVERRIDE_STICKY_DIAGNOSTICS_SETTINGSwith a value of0to all slots to make sure that legacy diagnostic settings don't block your swaps. You can also add this setting and value to just the production slot as adeployment slot (sticky) setting.
WEBSITE_OVERRIDE_STICKY_DIAGNOSTICS_SETTINGS
0
WEBSITE_OVERRIDE_STICKY_EXTENSION_VERSIONS
By default, the version settings for function apps are specific to each slot. This setting is used when upgrading functions by usingdeployment slots. This prevents unanticipated behavior due to changing versions after a swap. Set to0in production and in the slot to make sure that all version settings are also swapped. For more information, seeUpgrade using slots.
0
0
WEBSITE_RUN_FROM_PACKAGE
Enables your function app to run from a package file, which can be locally mounted or deployed to an external URL.
1
Valid values are either a URL that resolves to the location of an external deployment package file, or1. When set to1, the package must be in thed:\home\data\SitePackagesfolder. When you use zip deployment withWEBSITE_RUN_FROM_PACKAGEenabled, the package is automatically uploaded to this location. In preview, this setting was namedWEBSITE_RUN_FROM_ZIP. For more information, seeRun your functions from a package file.
1
1
d:\home\data\SitePackages
WEBSITE_RUN_FROM_PACKAGE
WEBSITE_RUN_FROM_ZIP
When you deploy from an external package URL, you must also manually sync triggers. For more information, seeTrigger syncing.
WEBSITE_SKIP_CONTENTSHARE_VALIDATION
TheWEBSITE_CONTENTAZUREFILECONNECTIONSTRINGandWEBSITE_CONTENTSHAREsettings have extra validation checks to ensure that the app can be properly started. Creation of application settings fail when the function app can't properly call out to the downstream Storage Account or Key Vault due to networking constraints or other limiting factors. When WEBSITE_SKIP_CONTENTSHARE_VALIDATION is set to1, the validation check is skipped; otherwise the value defaults to0and the validation takes place.
1
0
1
If validation is skipped and either the connection string or content share isn't valid, the app won't be able to start properly. In this case, functions return HTTP 500 errors. For more information, seeTroubleshoot error: "Azure Functions Runtime is unreachable"
WEBSITE_SLOT_NAME
Read-only. Name of the current deployment slot. The name of the production slot isProduction.
Production
Production
WEBSITE_TIME_ZONE
Allows you to set the timezone for your function app.
Eastern Standard Time
America/New_York
The default time zone used with the CRON expressions is Coordinated Universal Time (UTC). To have your CRON expression based on another time zone, create an app setting for your function app namedWEBSITE_TIME_ZONE.
WEBSITE_TIME_ZONE
The value of this setting depends on the operating system and plan on which your function app runs.
tzutil.exe /L
Note
WEBSITE_TIME_ZONEandTZare not currently supported when running on Linux in a Consumption or Flex Consumption plan. In this case, settingWEBSITE_TIME_ZONEorTZcan create SSL-related issues and cause metrics to stop working for your app.
WEBSITE_TIME_ZONE
TZ
WEBSITE_TIME_ZONE
TZ
For example, Eastern Time in the US (represented byEastern Standard Time(Windows) orAmerica/New_York(Linux)) currently uses UTC-05:00 during standard time and UTC-04:00 during daylight time. To have a timer trigger fire at 10:00 AM Eastern Time every day, create an app setting for your function app namedWEBSITE_TIME_ZONE, set the value toEastern Standard Time(Windows) orAmerica/New_York(Linux), and then use the following NCRONTAB expression:
Eastern Standard Time
America/New_York
WEBSITE_TIME_ZONE
Eastern Standard Time
America/New_York
"0 0 10 * * *"
"0 0 10 * * *"
When you useWEBSITE_TIME_ZONEthe time is adjusted for time changes in the specific timezone, including daylight saving time and changes in standard time.
WEBSITE_TIME_ZONE
WEBSITE_USE_PLACEHOLDER
Indicates whether to use a specificcold startoptimization when running on theConsumption plan. Set to0to disable the cold-start optimization on the Consumption plan.
0
1
WEBSITE_USE_PLACEHOLDER_DOTNETISOLATED
Indicates whether to use a specificcold startoptimization when running .NET isolated worker process functions on theConsumption plan. Set to0to disable the cold-start optimization on the Consumption plan.
0
1
WEBSITE_VNET_ROUTE_ALL
Important
WEBSITE_VNET_ROUTE_ALL is a legacy app setting that has been replaced by thevnetRouteAllEnabledsite setting.
Indicates whether all outbound traffic from the app is routed through the virtual network. A setting value of1indicates that all application traffic is routed through the virtual network. You'll need this setting when configuringRegional virtual network integrationin the Elastic Premium and Dedicated hosting plans. It's also used when avirtual network NAT gateway is used to define a static outbound IP address.
1
1
WEBSITES_ENABLE_APP_SERVICE_STORAGE
Indicates whether the/homedirectory is shared across scaled instances, with a default value oftrue. You should set this tofalsewhen deploying your function app in a container.
/home
true
false
App Service site settings
Some configurations must be maintained at the App Service level as site settings, such as language versions. These settings are managed in the portal, by using REST APIs, or by using Azure CLI or Azure PowerShell. The following are site settings that could be required, depending on your runtime language, OS, and versions:
AcrUseManagedIdentityCreds
Indicates whether the image is obtained from an Azure Container Registry instance using managed identity authentication. A value oftruerequires that managed identity be used, which is recommended over stored authentication credentials as a security best practice.
true
AcrUserManagedIdentityID
Indicates the managed identity to use when obtaining the image from an Azure Container Registry instance. Requires thatAcrUseManagedIdentityCredsis set totrue. These are the valid values:
AcrUseManagedIdentityCreds
true
system
<USER_IDENTITY_RESOURCE_ID>
The identity that you specify must be added to theACRPullrole in the container registry. For more information, seeCreate and configure a function app on Azure with the image.
ACRPull
alwaysOn
On a function app running in aDedicated (App Service) plan, the Functions runtime goes idle after a few minutes of inactivity, a which point only requests to an HTTP triggerwakes upyour function app. To make sure that your non-HTTP triggered functions run correctly, including Timer trigger functions, enable Always On for the function app by setting thealwaysOnsite setting to a value oftrue.
alwaysOn
true
functionsRuntimeAdminIsolationEnabled
Determines whether the built-in administrator (/admin) endpoints in your function app can be accessed. When set tofalse(the default), the app allows requests to endpoints under/adminwhen those requests present amaster keyin the request. Whentrue,/adminendpoints can't be accessed, even with a master key.
/admin
false
/admin
true
/admin
This property cannot be set for apps running on the Linux Consumption SKU, and it cannot be set for apps running on version 1.x of Azure Functions. If you are using version 1.x, you must firstmigrate to version 4.x.
linuxFxVersion
For function apps running on Linux,linuxFxVersionindicates the language and version for the language-specific worker process. This information is used, along withFUNCTIONS_EXTENSION_VERSION, to determine which specific Linux container image is installed to run your function app. This setting can be set to a predefined value or a custom image URI.
linuxFxVersion
FUNCTIONS_EXTENSION_VERSION
This value is set for you when you create your Linux function app. You might need to set it for ARM template and Bicep deployments and in certain upgrade scenarios.
Valid linuxFxVersion values
You can use the following Azure CLI command to see a table of currentlinuxFxVersionvalues, by supported Functions runtime version:
linuxFxVersion
az functionapp list-runtimes --os linux --query "[].{stack:join(' ', [runtime, version]), LinuxFxVersion:linux_fx_version, SupportedFunctionsVersions:to_string(supported_functions_versions[])}" --output table
az functionapp list-runtimes --os linux --query "[].{stack:join(' ', [runtime, version]), LinuxFxVersion:linux_fx_version, SupportedFunctionsVersions:to_string(supported_functions_versions[])}" --output table
The previous command requires you to upgrade to version 2.40 of the Azure CLI.
Custom images
When you create and maintain your own custom linux container for your function app, thelinuxFxVersionvalue is instead in the formatDOCKER|<IMAGE_URI>, as in the following example:
linuxFxVersion
DOCKER|<IMAGE_URI>
linuxFxVersion = "DOCKER|contoso.com/azurefunctionsimage:v1.0.0"
linuxFxVersion = "DOCKER|contoso.com/azurefunctionsimage:v1.0.0"
This indicates the registry source of the deployed container. For more information, seeWorking with containers and Azure Functions.
Important
When creating your own containers, you're required to keep the base image of your container updated to the latest supported base image. Supported base images for Azure Functions are language-specific and are found in theAzure Functions base image repos.
The Functions team is committed to publishing monthly updates for these base images. Regular updates include the latest minor version updates and security fixes for both the Functions runtime and languages. You should regularly update your container from the latest base image and redeploy the updated version of your container. For more information, seeMaintaining custom containers.
netFrameworkVersion
Sets the specific version of .NET for C# functions. For more information, seeUpdate your function app in Azure.
powerShellVersion
Sets the specific version of PowerShell on which your functions run. For more information, seeChanging the PowerShell version.
When running locally, you instead use theFUNCTIONS_WORKER_RUNTIME_VERSIONsetting in the local.settings.json file.
FUNCTIONS_WORKER_RUNTIME_VERSION
vnetContentShareEnabled
Apps running in a Premium plan use a file share to store content. The name of this content share is stored in theWEBSITE_CONTENTSHAREapp setting and its connection string is stored inWEBSITE_CONTENTAZUREFILECONNECTIONSTRING. To route traffic between your function app and content share through a virtual network, you must also setvnetContentShareEnabledtotrue. Enabling this site property is a requirement whenrestricting your storage account to a virtual networkin the Elastic Premium and Dedicated hosting plans.
WEBSITE_CONTENTSHARE
WEBSITE_CONTENTAZUREFILECONNECTIONSTRING
vnetContentShareEnabled
true
Note
You must take special care when routing to the content share in a storage account shared by multiple function apps in the same plan. For more information, seeConsistent routing through virtual networksin the Storage considerations article.
This site property replaces the legacyWEBSITE_CONTENTOVERVNETsetting.
WEBSITE_CONTENTOVERVNET
vnetImagePullEnabled
Functionssupports function apps running in Linux containers. To connect and pull from a container registry inside a virtual network, you must setvnetImagePullEnabledtotrue. This site property is supported in the Elastic Premium and Dedicated hosting plans. The Flex Consumption plan doesn't rely on site properties or app settings to configure Networking. For more information, seeFlex Consumption plan deprecations.
vnetImagePullEnabled
true
vnetRouteAllEnabled
Indicates whether all outbound traffic from the app is routed through the virtual network. A setting value oftrueindicates that all application traffic is routed through the virtual network. Use this setting when configuringRegional virtual network integrationin the Elastic Premium and Dedicated plans. It's also used when avirtual network NAT gateway is used to define a static outbound IP address. For more information, seeConfigure application routing.
true
This site setting replaces the legacyWEBSITE_VNET_ROUTE_ALLsetting.
Flex Consumption plan deprecations
In theFlex Consumption plan, these site properties and application settings are deprecated and shouldn't be used when creating function app resources:
ENABLE_ORYX_BUILD
remoteBuild
FUNCTIONS_EXTENSION_VERSION
FUNCTIONS_WORKER_RUNTIME
name
properties.functionAppConfig.runtime
FUNCTIONS_WORKER_RUNTIME_VERSION
version
properties.functionAppConfig.runtime
FUNCTIONS_MAX_HTTP_CONCURRENCY
FUNCTIONS_WORKER_PROCESS_COUNT
FUNCTIONS_WORKER_DYNAMIC_CONCURRENCY_ENABLED
SCM_DO_BUILD_DURING_DEPLOYMENT
remoteBuild
WEBSITE_CONTENTAZUREFILECONNECTIONSTRING
WEBSITE_CONTENTOVERVNET
WEBSITE_CONTENTSHARE
WEBSITE_DNS_SERVER
WEBSITE_MAX_DYNAMIC_APPLICATION_SCALE_OUT
maximumInstanceCount
properties.functionAppConfig.scaleAndConcurrency
WEBSITE_NODE_DEFAULT_VERSION
version
properties.functionAppConfig.runtime
WEBSITE_RUN_FROM_PACKAGE
WEBSITE_SKIP_CONTENTSHARE_VALIDATION
WEBSITE_VNET_ROUTE_ALL
properties.alwaysOn
properties.containerSize
instanceMemoryMB
properties.ftpsState
properties.isReserved
properties.IsXenon
properties.javaVersion
version
properties.functionAppConfig.runtime
properties.LinuxFxVersion
properties.functionAppConfig.runtime
properties.netFrameworkVersion
version
properties.functionAppConfig.runtime
properties.powerShellVersion
version
properties.functionAppConfig.runtime
properties.siteConfig.functionAppScaleLimit
maximumInstanceCount
properties.siteConfig.preWarmedInstanceCount
alwaysReadyInstances
properties.use32BitWorkerProcess
properties.vnetBackupRestoreEnabled
properties.vnetContentShareEnabled
properties.vnetImagePullEnabled
properties.vnetRouteAllEnabled
properties.windowsFxVersion
Next steps
Learn how to update app settings
See configuration settings in the host.json file
See other app settings for App Service apps
Feedback
Was this page helpful?
Additional resources