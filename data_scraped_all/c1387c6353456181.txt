Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Quickstart: Use Azure Cache for Redis in Java with Redisson Redis client
Article
2025-03-31
2 contributors
Applies to: â Azure Managed Redis, â Azure Cache for Redis
In this article
In this quickstart, you incorporate Azure Cache for Redis into a Java app using theRedissonRedis client and JCP standard JCache API. These services give you  access to a secure, dedicated cache that is accessible from any application within Azure. This article provides two options for selecting the Azure identity to use for the Redis connection.
Skip to the code on GitHub
This quickstart uses the Maven archetype feature to generate the scaffolding for the app. The quickstart directs you to modify the generated code to arrive at the working sample app. If you want to skip straight to the completed code, see theJava quickstarton GitHub.
Prerequisites
Azure subscription -create one for free
Use Microsoft Entra ID for cache authentication
Apache Maven
Create an Azure Managed Redis (preview) instance
To create an Azure Managed Redis (preview) instance, sign in to the Azure portal and selectCreate a resource.
To create an Azure Managed Redis (preview) instance, sign in to the Azure portal and selectCreate a resource.
On theNewpage, in the search box typeAzure Cache for Redis.
On theNewpage, in the search box typeAzure Cache for Redis.
On theNew Redis Cachepage, configure the settings for your new cache.SettingChoose a valueDescriptionSubscriptionDrop down and select your subscription.The subscription under which to create this new Azure Managed Redis instance.Resource groupDrop down and select a resource group, or selectCreate newand enter a new resource group name.Name for the resource group in which to create your cache and other resources. By putting all your app resources in one resource group, you can easily manage or delete them together.DNS nameEnter a name that is unique in the region.The cache name must be a string between 1 and 63 characters whencombined with the cache's region namethat contain only numbers, letters, or hyphens. (If the cache name is fewer than 45 characters long it should work in all currently available regions.) The name must start and end with a number or letter, and can't contain consecutive hyphens. Your cache instance'shost nameis\<DNS name\>.\<Azure region\>.redis.azure.net.LocationDrop down and select a location.Azure Managed Redis is available in selected Azure regions.Cache typeDrop down and select the performance tier and cache size.The tier determines the performance of the Redis instance, while the cache size determines the memory available to store data. For guidance on choosing the right performance tier, seeChoosing the right tier
On theNew Redis Cachepage, configure the settings for your new cache.
\<DNS name\>.\<Azure region\>.redis.azure.net

SelectNext: Networkingand select either a public or private endpoint.
SelectNext: Networkingand select either a public or private endpoint.
SelectNext: Advanced.Configure anyRedis modulesyou want to add to the instance.By default, for a new managed cache:Microsoft Entra ID is enabled.Access Keys Authenticationis disabled for security reasons.ImportantFor optimal security, we recommend that you use Microsoft Entra ID with managed identities to authorize requests against your cache if possible. Authorization by using Microsoft Entra ID and managed identities provides superior security and ease of use over shared access key authorization. For more information about using managed identities with your cache, seeUse Microsoft Entra ID for cache authentication.SetClustering policytoEnterprisefor a nonclustered cache, or toOSSfor a clustered cache. For more information on choosingClustering policy, seeCluster policy.If you're usingActive geo-replication, it must be configured during creation. For more information, seeConfigure active geo-replication for Azure Managed Redis instances.ImportantYou can't change the clustering policy of an Azure Managed Redis (preview) instance after you create it. If you're usingRediSearch, the Enterprise cluster policy is required, andNoEvictionis the only eviction policy supported.ImportantIf you're using this cache instance in a geo-replication group, eviction policies cannot be changed after the instance is created. Be sure to know the eviction policies of your primary nodes before you create the cache. For more information on active geo-replication, seeActive geo-replication prerequisites.ImportantYou can't change modules after you create a cache instance. Modules must be enabled at the time you create an Azure Cache for Redis instance. There is no option to enable the configuration of a module after you create a cache.
SelectNext: Advanced.
Configure anyRedis modulesyou want to add to the instance.
By default, for a new managed cache:
Microsoft Entra ID is enabled.
Access Keys Authenticationis disabled for security reasons.
Important
For optimal security, we recommend that you use Microsoft Entra ID with managed identities to authorize requests against your cache if possible. Authorization by using Microsoft Entra ID and managed identities provides superior security and ease of use over shared access key authorization. For more information about using managed identities with your cache, seeUse Microsoft Entra ID for cache authentication.
SetClustering policytoEnterprisefor a nonclustered cache, or toOSSfor a clustered cache. For more information on choosingClustering policy, seeCluster policy.

If you're usingActive geo-replication, it must be configured during creation. For more information, seeConfigure active geo-replication for Azure Managed Redis instances.
Important
You can't change the clustering policy of an Azure Managed Redis (preview) instance after you create it. If you're usingRediSearch, the Enterprise cluster policy is required, andNoEvictionis the only eviction policy supported.
NoEviction
Important
If you're using this cache instance in a geo-replication group, eviction policies cannot be changed after the instance is created. Be sure to know the eviction policies of your primary nodes before you create the cache. For more information on active geo-replication, seeActive geo-replication prerequisites.
Important
You can't change modules after you create a cache instance. Modules must be enabled at the time you create an Azure Cache for Redis instance. There is no option to enable the configuration of a module after you create a cache.
SelectNext: Tagsand skip.
SelectNext: Tagsand skip.
SelectNext: Review + create.
SelectNext: Review + create.
Review the settings and selectCreate.It takes several minutes for the Redis instance to create. You can monitor progress on the Azure Managed RedisOverviewpage. WhenStatusshows asRunning, the cache is ready to use.
Review the settings and selectCreate.
It takes several minutes for the Redis instance to create. You can monitor progress on the Azure Managed RedisOverviewpage. WhenStatusshows asRunning, the cache is ready to use.
Create an Azure Cache for Redis instance
To create a cache, sign in to theAzure portal. On the portal menu, selectCreate a resource.
To create a cache, sign in to theAzure portal. On the portal menu, selectCreate a resource.

On theGet Startedpane, enterAzure Cache for Redisin the search bar. In the search results, findAzure Cache for Redis, and then selectCreate.
On theGet Startedpane, enterAzure Cache for Redisin the search bar. In the search results, findAzure Cache for Redis, and then selectCreate.

On theNew Redis Cachepane, on theBasicstab, configure the following settings for your cache:SettingActionDescriptionSubscriptionSelect your Azure subscription.The subscription to use to create the new instance of Azure Cache for Redis.Resource groupSelect a resource group, or selectCreate newand enter a new resource group name.A name for the resource group in which to create your cache and other resources. By putting all your app resources in one resource group, you can easily manage or delete them together.DNS nameEnter a unique name.The cache name must be a string of 1 to 63 characters that contains only numbers, letters, and hyphens. The name must start and end with a number or letter, and it can't contain consecutive hyphens. Your cache instance'shost nameis\<DNS name>.redis.cache.windows.net.LocationSelect a location.AnAzure regionthat is near other services that use your cache.Cache SKUSelect aSKU.The SKU determines the size, performance, and feature parameters that are available for the cache. For more information, seeAzure Cache for Redis overview.Cache sizeSelect a cache size.For more information, seeAzure Cache for Redis overview.
On theNew Redis Cachepane, on theBasicstab, configure the following settings for your cache:
\<DNS name>.redis.cache.windows.net
Select theNetworkingtab or selectNext: Networking.
Select theNetworkingtab or selectNext: Networking.
On theNetworkingtab, select a connectivity method to use for the cache.
On theNetworkingtab, select a connectivity method to use for the cache.
Select theAdvancedtab or selectNext: Advanced.
Select theAdvancedtab or selectNext: Advanced.
On theAdvancedpane, verify or select an authentication method based on the following information:By default, for a new Basic, Standard, or Premium cache,Microsoft Entra Authenticationis enabled andAccess Keys Authenticationis disabled.For Basic or Standard caches, you can choose the selection for a non-TLS port.For Standard and Premium caches, you can choose to enable availability zones. You can't disable availability zones after the cache is created.For a Premium cache, configure the settings for non-TLS port, clustering, managed identity, and data persistence.ImportantFor optimal security, we recommend that you use Microsoft Entra ID with managed identities to authorize requests against your cache if possible. Authorization by using Microsoft Entra ID and managed identities provides superior security and ease of use over shared access key authorization. For more information about using managed identities with your cache, seeUse Microsoft Entra ID for cache authentication.
On theAdvancedpane, verify or select an authentication method based on the following information:

By default, for a new Basic, Standard, or Premium cache,Microsoft Entra Authenticationis enabled andAccess Keys Authenticationis disabled.
For Basic or Standard caches, you can choose the selection for a non-TLS port.
For Standard and Premium caches, you can choose to enable availability zones. You can't disable availability zones after the cache is created.
For a Premium cache, configure the settings for non-TLS port, clustering, managed identity, and data persistence.
Important
For optimal security, we recommend that you use Microsoft Entra ID with managed identities to authorize requests against your cache if possible. Authorization by using Microsoft Entra ID and managed identities provides superior security and ease of use over shared access key authorization. For more information about using managed identities with your cache, seeUse Microsoft Entra ID for cache authentication.
(Optional) Select theTagstab or selectNext: Tags.
(Optional) Select theTagstab or selectNext: Tags.
(Optional) On theTagstab, enter a tag name and value if you want to categorize your cache resource.
(Optional) On theTagstab, enter a tag name and value if you want to categorize your cache resource.
Select theReview + createbutton.On theReview + createtab, Azure automatically validates your configuration.
Select theReview + createbutton.
On theReview + createtab, Azure automatically validates your configuration.
After the greenValidation passedmessage appears, selectCreate.
After the greenValidation passedmessage appears, selectCreate.
A new cache deployment occurs over several minutes. You can monitor the progress of the deployment on the Azure Cache for Redis Overview pane. WhenStatusdisplaysRunning, the cache is ready to use.
Retrieve host name, ports, and access keys from the Azure portal
To connect your Azure Cache for Redis server, the cache client needs the host name, ports, and a key for the cache. Some clients might refer to these items by slightly different names. You can get the host name, ports, and keys from theAzure portal.
To get the host name and ports for your cache, selectOverviewfrom theResourcemenu. The host name is of the form<DNS name>.redis.cache.windows.net.
To get the host name and ports for your cache, selectOverviewfrom theResourcemenu. The host name is of the form<DNS name>.redis.cache.windows.net.
<DNS name>.redis.cache.windows.net

To get the access keys, selectAuthenticationfrom theResourcemenu. Then, select theAccess keystab.
To get the access keys, selectAuthenticationfrom theResourcemenu. Then, select theAccess keystab.

Set up the working environment
The following steps show you how to set up the working environment for the Java app. You can choose to authenticate with Azure Cache for Redis using Microsoft Entra ID (recommended) or access keys.
Microsoft Entra ID authentication (recommended)
Access key authentication
export REDIS_CACHE_HOSTNAME=<your-host-name>.redis.cache.windows.net
export USER_NAME=<user-name>
export REDIS_CACHE_PORT=10000
export REDIS_CACHE_HOSTNAME=<your-host-name>.redis.cache.windows.net
export USER_NAME=<user-name>
export REDIS_CACHE_PORT=10000
export REDIS_CACHE_HOSTNAME=<your-host-name>.redis.cache.windows.net
export USER_NAME=<user-name>
export REDIS_CACHE_PORT=6380
export REDIS_CACHE_HOSTNAME=<your-host-name>.redis.cache.windows.net
export USER_NAME=<user-name>
export REDIS_CACHE_PORT=6380
Replace the placeholders with the following values:
<your-host-name>: The DNS host name. To get the host name and ports for your cache, selectOverviewfrom theResourcemenu. The host name is of the form<DNS name>.redis.cache.windows.net.
<your-host-name>: The DNS host name. To get the host name and ports for your cache, selectOverviewfrom theResourcemenu. The host name is of the form<DNS name>.redis.cache.windows.net.
<your-host-name>
<DNS name>.redis.cache.windows.net

<user-name>: Object ID of your managed identity or service principal.You can get the user name by using the following steps:In the Azure portal, navigate to your Azure Cache for Redis instance.On the navigation pane, selectData Access Configuration.On theRedis Userstab, find theUsernamecolumn.
<user-name>: Object ID of your managed identity or service principal.
<user-name>
You can get the user name by using the following steps:
In the Azure portal, navigate to your Azure Cache for Redis instance.
In the Azure portal, navigate to your Azure Cache for Redis instance.
On the navigation pane, selectData Access Configuration.
On the navigation pane, selectData Access Configuration.
On theRedis Userstab, find theUsernamecolumn.
On theRedis Userstab, find theUsernamecolumn.

export REDIS_CACHE_HOSTNAME=<your-host-name>.redis.cache.windows.net
export REDIS_CACHE_KEY=<your-primary-access-key>
export REDIS_CACHE_PORT=10000
export REDIS_CACHE_HOSTNAME=<your-host-name>.redis.cache.windows.net
export REDIS_CACHE_KEY=<your-primary-access-key>
export REDIS_CACHE_PORT=10000
export REDIS_CACHE_HOSTNAME=<your-host-name>.redis.cache.windows.net
export REDIS_CACHE_KEY=<your-primary-access-key>
export REDIS_CACHE_PORT=6380
export REDIS_CACHE_HOSTNAME=<your-host-name>.redis.cache.windows.net
export REDIS_CACHE_KEY=<your-primary-access-key>
export REDIS_CACHE_PORT=6380
Replace the placeholders with the following values:
<your-host-name>: The DNS host name.  To get the host name and ports for your cache, selectOverviewfrom theResourcemenu. The host name is of the form<DNS name>.redis.cache.windows.net.
<your-host-name>: The DNS host name.  To get the host name and ports for your cache, selectOverviewfrom theResourcemenu. The host name is of the form<DNS name>.redis.cache.windows.net.
<your-host-name>
<DNS name>.redis.cache.windows.net

<your-primary-access-key>: The primary access key. To get the access keys, selectAuthenticationfrom theResourcemenu. Then, select theAccess keystab.
<your-primary-access-key>: The primary access key. To get the access keys, selectAuthenticationfrom theResourcemenu. Then, select theAccess keystab.
<your-primary-access-key>

Create a new Java app
Use Maven to generate a new quickstart app:mvn archetype:generate \
    -DarchetypeGroupId=org.apache.maven.archetypes \
    -DarchetypeArtifactId=maven-archetype-quickstart \
    -DarchetypeVersion=1.3 \
    -DinteractiveMode=false \
    -DgroupId=example.demo \
    -DartifactId=redis-redisson-test \
    -Dversion=1.0
Use Maven to generate a new quickstart app:
mvn archetype:generate \
    -DarchetypeGroupId=org.apache.maven.archetypes \
    -DarchetypeArtifactId=maven-archetype-quickstart \
    -DarchetypeVersion=1.3 \
    -DinteractiveMode=false \
    -DgroupId=example.demo \
    -DartifactId=redis-redisson-test \
    -Dversion=1.0
mvn archetype:generate \
    -DarchetypeGroupId=org.apache.maven.archetypes \
    -DarchetypeArtifactId=maven-archetype-quickstart \
    -DarchetypeVersion=1.3 \
    -DinteractiveMode=false \
    -DgroupId=example.demo \
    -DartifactId=redis-redisson-test \
    -Dversion=1.0
Change to the newredis-redisson-testproject directory.
Change to the newredis-redisson-testproject directory.
Open thepom.xmlfile and add a dependency forRedisson:Microsoft Entra ID authentication (recommended)Access key authentication<dependency>
    <groupId>com.azure</groupId>
    <artifactId>azure-identity</artifactId>
    <version>1.15.0</version> <!-- {x-version-update;com.azure:azure-identity;dependency} -->
</dependency>

<dependency>
    <groupId>org.redisson</groupId>
    <artifactId>redisson</artifactId>
    <version>3.36.0</version> <!-- {x-version-update;org.redisson:redisson;external_dependency} -->
</dependency>ImportantMicrosoft recommends using Microsoft Entra ID authentication for the most secure authentication experience instead of using passwords or access keys. The authentication described in this section of the article uses access keys, which require a very high degree of trust in the application and carries risks not present when using Microsoft Entra ID. Use the approach in this document only when Microsoft Entra ID authentication is not viable.<dependency>
    <groupId>org.redisson</groupId>
    <artifactId>redisson</artifactId>
    <version>3.36.0</version> <!-- {x-version-update;org.redisson:redisson;external_dependency} -->
</dependency>
Open thepom.xmlfile and add a dependency forRedisson:
Microsoft Entra ID authentication (recommended)
Access key authentication
<dependency>
    <groupId>com.azure</groupId>
    <artifactId>azure-identity</artifactId>
    <version>1.15.0</version> <!-- {x-version-update;com.azure:azure-identity;dependency} -->
</dependency>

<dependency>
    <groupId>org.redisson</groupId>
    <artifactId>redisson</artifactId>
    <version>3.36.0</version> <!-- {x-version-update;org.redisson:redisson;external_dependency} -->
</dependency>
<dependency>
    <groupId>com.azure</groupId>
    <artifactId>azure-identity</artifactId>
    <version>1.15.0</version> <!-- {x-version-update;com.azure:azure-identity;dependency} -->
</dependency>

<dependency>
    <groupId>org.redisson</groupId>
    <artifactId>redisson</artifactId>
    <version>3.36.0</version> <!-- {x-version-update;org.redisson:redisson;external_dependency} -->
</dependency>
Important
Microsoft recommends using Microsoft Entra ID authentication for the most secure authentication experience instead of using passwords or access keys. The authentication described in this section of the article uses access keys, which require a very high degree of trust in the application and carries risks not present when using Microsoft Entra ID. Use the approach in this document only when Microsoft Entra ID authentication is not viable.
<dependency>
    <groupId>org.redisson</groupId>
    <artifactId>redisson</artifactId>
    <version>3.36.0</version> <!-- {x-version-update;org.redisson:redisson;external_dependency} -->
</dependency>
<dependency>
    <groupId>org.redisson</groupId>
    <artifactId>redisson</artifactId>
    <version>3.36.0</version> <!-- {x-version-update;org.redisson:redisson;external_dependency} -->
</dependency>
Save thepom.xmlfile.
Save thepom.xmlfile.
OpenApp.javaand replace the code with the following code:Microsoft Entra ID authentication (recommended)Access key authenticationpackage example.demo;

import com.azure.core.credential.TokenRequestContext;
import com.azure.identity.DefaultAzureCredential;
import com.azure.identity.DefaultAzureCredentialBuilder;
import org.redisson.Redisson;
import org.redisson.api.RedissonClient;
import org.redisson.config.Config;
import org.redisson.jcache.configuration.RedissonConfiguration;

import javax.cache.Cache;
import javax.cache.CacheManager;
import javax.cache.Caching;
import javax.cache.configuration.Configuration;
import javax.cache.configuration.MutableConfiguration;
import java.time.LocalDateTime;

/**
 * Redis test
 *
 */
public class App {
    public static void main(String[] args) {

        Config redissonconfig = getConfig();

        RedissonClient redissonClient = Redisson.create(redissonconfig);

        MutableConfiguration<String, String> jcacheConfig = new MutableConfiguration<>();
        Configuration<String, String> config = RedissonConfiguration.fromInstance(redissonClient, jcacheConfig);

        // Perform cache operations using JCache
        CacheManager manager = Caching.getCachingProvider().getCacheManager();
        Cache<String, String> map = manager.createCache("test", config);

        // Simple get and put of string data into the cache
        System.out.println("\nCache Command  : GET Message");
        System.out.println("Cache Response : " + map.get("Message"));

        System.out.println("\nCache Command  : SET Message");
        map.put("Message",
                String.format("Hello! The cache is working from Java! %s", LocalDateTime.now()));

        // Demonstrate "SET Message" executed as expected
        System.out.println("\nCache Command  : GET Message");
        System.out.println("Cache Response : " + map.get("Message"));

        redissonClient.shutdown();

    }

    private static Config getConfig() {
        //Construct a Token Credential from Identity library, e.g. DefaultAzureCredential / ClientSecretCredential / Client    CertificateCredential / ManagedIdentityCredential etc.
        DefaultAzureCredential defaultAzureCredential = new DefaultAzureCredentialBuilder().build();

        // Fetch a Microsoft Entra token to be used for authentication.
        String token = defaultAzureCredential
                .getToken(new TokenRequestContext()
                        .addScopes("https://redis.azure.com/.default")).block().getToken();

        // Connect to the Azure Cache for Redis over the TLS/SSL port using the key
        Config redissonconfig = new Config();
        redissonconfig.useSingleServer()
                .setAddress(String.format("rediss://%s:%s", System.getenv("REDIS_CACHE_HOSTNAME"),  System.getenv("REDIS_CACHE_PORT")))
                .setUsername(System.getenv("USER_NAME")) // (Required) Username is Object ID of your managed identity or service principal
                .setPassword(token); // Microsoft Entra access token as password is required.
        return redissonconfig;
    }
}package example.demo;

import org.redisson.Redisson;
import org.redisson.api.RedissonClient;
import org.redisson.config.Config;
import org.redisson.jcache.configuration.RedissonConfiguration;

import javax.cache.Cache;
import javax.cache.CacheManager;
import javax.cache.Caching;
import javax.cache.configuration.Configuration;
import javax.cache.configuration.MutableConfiguration;
import java.time.LocalDateTime;

/**
 * Redis test
 *
 */
public class App {
    public static void main(String[] args) {

       Config redissonconfig = getConfig();

        RedissonClient redissonClient = Redisson.create(redissonconfig);

        MutableConfiguration<String, String> jcacheConfig = new MutableConfiguration<>();
        Configuration<String, String> config = RedissonConfiguration.fromInstance(redissonClient, jcacheConfig);

        // Perform cache operations using JCache
        CacheManager manager = Caching.getCachingProvider().getCacheManager();
        Cache<String, String> map = manager.createCache("test", config);

        // Simple get and put of string data into the cache
        System.out.println("\nCache Command  : GET Message");
        System.out.println("Cache Response : " + map.get("Message"));

        System.out.println("\nCache Command  : SET Message");
        map.put("Message",
                String.format("Hello! The cache is working from Java! %s", LocalDateTime.now()));

        // Demonstrate "SET Message" executed as expected
        System.out.println("\nCache Command  : GET Message");
        System.out.println("Cache Response : " + map.get("Message"));

        redissonClient.shutdown();

    }

    private static Config getConfig() {
        // Connect to the Azure Cache for Redis over the TLS/SSL port using the key
        Config redissonconfig = new Config();
        redissonconfig.useSingleServer().setPassword(System.getenv("REDIS_CACHE_KEY"))
                .setAddress(String.format("rediss://%s:%s", System.getenv("REDIS_CACHE_HOSTNAME"), System.getenv("REDIS_CACHE_PORT")));
        return redissonconfig;
    }
}
OpenApp.javaand replace the code with the following code:
Microsoft Entra ID authentication (recommended)
Access key authentication
package example.demo;

import com.azure.core.credential.TokenRequestContext;
import com.azure.identity.DefaultAzureCredential;
import com.azure.identity.DefaultAzureCredentialBuilder;
import org.redisson.Redisson;
import org.redisson.api.RedissonClient;
import org.redisson.config.Config;
import org.redisson.jcache.configuration.RedissonConfiguration;

import javax.cache.Cache;
import javax.cache.CacheManager;
import javax.cache.Caching;
import javax.cache.configuration.Configuration;
import javax.cache.configuration.MutableConfiguration;
import java.time.LocalDateTime;

/**
 * Redis test
 *
 */
public class App {
    public static void main(String[] args) {

        Config redissonconfig = getConfig();

        RedissonClient redissonClient = Redisson.create(redissonconfig);

        MutableConfiguration<String, String> jcacheConfig = new MutableConfiguration<>();
        Configuration<String, String> config = RedissonConfiguration.fromInstance(redissonClient, jcacheConfig);

        // Perform cache operations using JCache
        CacheManager manager = Caching.getCachingProvider().getCacheManager();
        Cache<String, String> map = manager.createCache("test", config);

        // Simple get and put of string data into the cache
        System.out.println("\nCache Command  : GET Message");
        System.out.println("Cache Response : " + map.get("Message"));

        System.out.println("\nCache Command  : SET Message");
        map.put("Message",
                String.format("Hello! The cache is working from Java! %s", LocalDateTime.now()));

        // Demonstrate "SET Message" executed as expected
        System.out.println("\nCache Command  : GET Message");
        System.out.println("Cache Response : " + map.get("Message"));

        redissonClient.shutdown();

    }

    private static Config getConfig() {
        //Construct a Token Credential from Identity library, e.g. DefaultAzureCredential / ClientSecretCredential / Client    CertificateCredential / ManagedIdentityCredential etc.
        DefaultAzureCredential defaultAzureCredential = new DefaultAzureCredentialBuilder().build();

        // Fetch a Microsoft Entra token to be used for authentication.
        String token = defaultAzureCredential
                .getToken(new TokenRequestContext()
                        .addScopes("https://redis.azure.com/.default")).block().getToken();

        // Connect to the Azure Cache for Redis over the TLS/SSL port using the key
        Config redissonconfig = new Config();
        redissonconfig.useSingleServer()
                .setAddress(String.format("rediss://%s:%s", System.getenv("REDIS_CACHE_HOSTNAME"),  System.getenv("REDIS_CACHE_PORT")))
                .setUsername(System.getenv("USER_NAME")) // (Required) Username is Object ID of your managed identity or service principal
                .setPassword(token); // Microsoft Entra access token as password is required.
        return redissonconfig;
    }
}
package example.demo;

import com.azure.core.credential.TokenRequestContext;
import com.azure.identity.DefaultAzureCredential;
import com.azure.identity.DefaultAzureCredentialBuilder;
import org.redisson.Redisson;
import org.redisson.api.RedissonClient;
import org.redisson.config.Config;
import org.redisson.jcache.configuration.RedissonConfiguration;

import javax.cache.Cache;
import javax.cache.CacheManager;
import javax.cache.Caching;
import javax.cache.configuration.Configuration;
import javax.cache.configuration.MutableConfiguration;
import java.time.LocalDateTime;

/**
 * Redis test
 *
 */
public class App {
    public static void main(String[] args) {

        Config redissonconfig = getConfig();

        RedissonClient redissonClient = Redisson.create(redissonconfig);

        MutableConfiguration<String, String> jcacheConfig = new MutableConfiguration<>();
        Configuration<String, String> config = RedissonConfiguration.fromInstance(redissonClient, jcacheConfig);

        // Perform cache operations using JCache
        CacheManager manager = Caching.getCachingProvider().getCacheManager();
        Cache<String, String> map = manager.createCache("test", config);

        // Simple get and put of string data into the cache
        System.out.println("\nCache Command  : GET Message");
        System.out.println("Cache Response : " + map.get("Message"));

        System.out.println("\nCache Command  : SET Message");
        map.put("Message",
                String.format("Hello! The cache is working from Java! %s", LocalDateTime.now()));

        // Demonstrate "SET Message" executed as expected
        System.out.println("\nCache Command  : GET Message");
        System.out.println("Cache Response : " + map.get("Message"));

        redissonClient.shutdown();

    }

    private static Config getConfig() {
        //Construct a Token Credential from Identity library, e.g. DefaultAzureCredential / ClientSecretCredential / Client    CertificateCredential / ManagedIdentityCredential etc.
        DefaultAzureCredential defaultAzureCredential = new DefaultAzureCredentialBuilder().build();

        // Fetch a Microsoft Entra token to be used for authentication.
        String token = defaultAzureCredential
                .getToken(new TokenRequestContext()
                        .addScopes("https://redis.azure.com/.default")).block().getToken();

        // Connect to the Azure Cache for Redis over the TLS/SSL port using the key
        Config redissonconfig = new Config();
        redissonconfig.useSingleServer()
                .setAddress(String.format("rediss://%s:%s", System.getenv("REDIS_CACHE_HOSTNAME"),  System.getenv("REDIS_CACHE_PORT")))
                .setUsername(System.getenv("USER_NAME")) // (Required) Username is Object ID of your managed identity or service principal
                .setPassword(token); // Microsoft Entra access token as password is required.
        return redissonconfig;
    }
}
package example.demo;

import org.redisson.Redisson;
import org.redisson.api.RedissonClient;
import org.redisson.config.Config;
import org.redisson.jcache.configuration.RedissonConfiguration;

import javax.cache.Cache;
import javax.cache.CacheManager;
import javax.cache.Caching;
import javax.cache.configuration.Configuration;
import javax.cache.configuration.MutableConfiguration;
import java.time.LocalDateTime;

/**
 * Redis test
 *
 */
public class App {
    public static void main(String[] args) {

       Config redissonconfig = getConfig();

        RedissonClient redissonClient = Redisson.create(redissonconfig);

        MutableConfiguration<String, String> jcacheConfig = new MutableConfiguration<>();
        Configuration<String, String> config = RedissonConfiguration.fromInstance(redissonClient, jcacheConfig);

        // Perform cache operations using JCache
        CacheManager manager = Caching.getCachingProvider().getCacheManager();
        Cache<String, String> map = manager.createCache("test", config);

        // Simple get and put of string data into the cache
        System.out.println("\nCache Command  : GET Message");
        System.out.println("Cache Response : " + map.get("Message"));

        System.out.println("\nCache Command  : SET Message");
        map.put("Message",
                String.format("Hello! The cache is working from Java! %s", LocalDateTime.now()));

        // Demonstrate "SET Message" executed as expected
        System.out.println("\nCache Command  : GET Message");
        System.out.println("Cache Response : " + map.get("Message"));

        redissonClient.shutdown();

    }

    private static Config getConfig() {
        // Connect to the Azure Cache for Redis over the TLS/SSL port using the key
        Config redissonconfig = new Config();
        redissonconfig.useSingleServer().setPassword(System.getenv("REDIS_CACHE_KEY"))
                .setAddress(String.format("rediss://%s:%s", System.getenv("REDIS_CACHE_HOSTNAME"), System.getenv("REDIS_CACHE_PORT")));
        return redissonconfig;
    }
}
package example.demo;

import org.redisson.Redisson;
import org.redisson.api.RedissonClient;
import org.redisson.config.Config;
import org.redisson.jcache.configuration.RedissonConfiguration;

import javax.cache.Cache;
import javax.cache.CacheManager;
import javax.cache.Caching;
import javax.cache.configuration.Configuration;
import javax.cache.configuration.MutableConfiguration;
import java.time.LocalDateTime;

/**
 * Redis test
 *
 */
public class App {
    public static void main(String[] args) {

       Config redissonconfig = getConfig();

        RedissonClient redissonClient = Redisson.create(redissonconfig);

        MutableConfiguration<String, String> jcacheConfig = new MutableConfiguration<>();
        Configuration<String, String> config = RedissonConfiguration.fromInstance(redissonClient, jcacheConfig);

        // Perform cache operations using JCache
        CacheManager manager = Caching.getCachingProvider().getCacheManager();
        Cache<String, String> map = manager.createCache("test", config);

        // Simple get and put of string data into the cache
        System.out.println("\nCache Command  : GET Message");
        System.out.println("Cache Response : " + map.get("Message"));

        System.out.println("\nCache Command  : SET Message");
        map.put("Message",
                String.format("Hello! The cache is working from Java! %s", LocalDateTime.now()));

        // Demonstrate "SET Message" executed as expected
        System.out.println("\nCache Command  : GET Message");
        System.out.println("Cache Response : " + map.get("Message"));

        redissonClient.shutdown();

    }

    private static Config getConfig() {
        // Connect to the Azure Cache for Redis over the TLS/SSL port using the key
        Config redissonconfig = new Config();
        redissonconfig.useSingleServer().setPassword(System.getenv("REDIS_CACHE_KEY"))
                .setAddress(String.format("rediss://%s:%s", System.getenv("REDIS_CACHE_HOSTNAME"), System.getenv("REDIS_CACHE_PORT")));
        return redissonconfig;
    }
}
SaveApp.java.
SaveApp.java.
Build and run the app
Execute the following Maven command to build and run the app:
mvn compile exec:java -Dexec.mainClass=example.demo.App
mvn compile exec:java -Dexec.mainClass=example.demo.App
In the following output, you can see that theMessagekey previously had a cached value, which was set in the last run. The app updated that cached value.
Message
Cache Command  : GET Message
Cache Response : Hello! The cache is working from Java! 2023-12-05T15:13:11.398873

Cache Command  : SET Message

Cache Command  : GET Message
Cache Response : Hello! The cache is working from Java! 2023-12-05T15:45:45.748667
Cache Command  : GET Message
Cache Response : Hello! The cache is working from Java! 2023-12-05T15:13:11.398873

Cache Command  : SET Message

Cache Command  : GET Message
Cache Response : Hello! The cache is working from Java! 2023-12-05T15:45:45.748667
Clean up resources
If you plan to continue with the next tutorial, you can keep the resources created in this quickstart and reuse them.
Otherwise, if you're finished with the quickstart sample application, you can delete the Azure resources created in this quickstart to avoid charges.
Important
Deleting a resource group is irreversible and that the resource group and all the resources in it are permanently deleted. Make sure that you do not accidentally delete the wrong resource group or resources. If you created the resources for hosting this sample inside an existing resource group that contains resources you want to keep, you can delete each resource individually instead of deleting the resource group.
Sign in to theAzure portaland selectResource groups.
Sign in to theAzure portaland selectResource groups.
In theFilter by nametextbox, type the name of your resource group. The instructions for this article used a resource group namedTestResources. On your resource group in the result list, selectTest ResourcesthenDelete resource group.
In theFilter by nametextbox, type the name of your resource group. The instructions for this article used a resource group namedTestResources. On your resource group in the result list, selectTest ResourcesthenDelete resource group.
TestResources

Type the name of your resource group to confirm deletion and then selectDelete.
Type the name of your resource group to confirm deletion and then selectDelete.
After a few moments, the resource group and all of its contained resources are deleted.
Next steps
In this quickstart, you learned how to use Azure Cache for Redis from a Java application with Redisson Redis client and JCache. Continue to the next quickstart to use Azure Cache for Redis with an ASP.NET web app.
Create an ASP.NET web app that uses an Azure Cache for Redis.
Use Java with Azure Cache for Redis on Azure Kubernetes Service
Feedback
Was this page helpful?
Additional resources