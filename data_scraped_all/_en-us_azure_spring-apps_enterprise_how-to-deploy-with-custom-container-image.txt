Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Deploy an application with a custom container image
Article
2024-11-21
2 contributors
In this article
Caution
This article references CentOS, a Linux distribution that is End Of Life (EOL) status. Please consider your use and plan accordingly. For more information, see theCentOS End Of Life guidance.
Note
TheBasic,Standard, andEnterpriseplans entered a retirement period on March 17, 2025. For more information, see theAzure Spring Apps retirement announcement.
TheStandard consumption and dedicatedplan entered a retirement period on September 30, 2024, with a complete shutdown by the end of March 2025. For more information, seeMigrate Azure Spring Apps Standard consumption and dedicated plan to Azure Container Apps.
This article applies to:â Standard â Enterprise
This article explains how to deploy Spring Boot applications in Azure Spring Apps using a custom container image. Deploying an application with a custom container supports most features as when deploying a JAR application. Other Java and non-Java applications can also be deployed with the container image.
Prerequisites
A container image containing the application.
The image is pushed to an image registry. For more information, seeAzure Container Registry.
Note
The web application must listen on port1025for the Standard plan and on port8080for the Enterprise plan. The way to change the port depends on the framework of the application. For example, specifySERVER_PORT=1025for Spring Boot applications orASPNETCORE_URLS=http://+:1025/for ASP.NET Core applications. You can disable the probe for applications that don't listen on any port. For more information, seeHow to configure health probes and graceful termination periods for apps hosted in Azure Spring Apps.
1025
8080
SERVER_PORT=1025
ASPNETCORE_URLS=http://+:1025/
Deploy your application
To deploy an application to a custom container image, use the following steps:
Azure CLI
Portal
To deploy a container image, use one of the following commands:
To deploy a container image to the public Docker Hub to an app, use the following command:az spring app deploy \
   --resource-group <your-resource-group> \
   --name <your-app-name> \
   --container-image <your-container-image> \
   --service <your-service-name>
To deploy a container image to the public Docker Hub to an app, use the following command:
az spring app deploy \
   --resource-group <your-resource-group> \
   --name <your-app-name> \
   --container-image <your-container-image> \
   --service <your-service-name>
az spring app deploy \
   --resource-group <your-resource-group> \
   --name <your-app-name> \
   --container-image <your-container-image> \
   --service <your-service-name>
To deploy a container image from ACR to an app, or from another private registry to an app, use the following command:az spring app deploy \
   --resource-group <your-resource-group> \
   --name <your-app-name> \
   --container-image <your-container-image> \
   --service <your-service-name>
   --container-registry <your-container-registry> \
   --registry-password <your-password> |
   --registry-username <your-username>
To deploy a container image from ACR to an app, or from another private registry to an app, use the following command:
az spring app deploy \
   --resource-group <your-resource-group> \
   --name <your-app-name> \
   --container-image <your-container-image> \
   --service <your-service-name>
   --container-registry <your-container-registry> \
   --registry-password <your-password> |
   --registry-username <your-username>
az spring app deploy \
   --resource-group <your-resource-group> \
   --name <your-app-name> \
   --container-image <your-container-image> \
   --service <your-service-name>
   --container-registry <your-container-registry> \
   --registry-password <your-password> |
   --registry-username <your-username>
To overwrite the entry point of the image, add the following two arguments to any of the above commands:
--container-command "java" \
    --container-args "-jar /app.jar -Dkey=value"
--container-command "java" \
    --container-args "-jar /app.jar -Dkey=value"
To disable listening on a port for images that aren't web applications, add the following argument to the above commands:
--disable-probe true
--disable-probe true
Open theAzure portal.
Open theAzure portal.
Open your existing Azure Spring Apps service instance.
Open your existing Azure Spring Apps service instance.
SelectAppsfrom left the menu, then selectCreate App.
SelectAppsfrom left the menu, then selectCreate App.
Name your app, and in theRuntime platformpulldown list, selectCustom Container.
Name your app, and in theRuntime platformpulldown list, selectCustom Container.

SelectEditunderImage, then fill in the fields as shown in the following image:NoteTheCommandsandArgumentsfield are optional, which are used to overwrite thecmdandentrypointof the image.You need to also specify theLanguage Framework, which is the web framework of the container image used. Currently, onlySpring Bootis supported. For other Java applications or non-Java (polyglot) applications, selectPolyglot.
SelectEditunderImage, then fill in the fields as shown in the following image:

Note
TheCommandsandArgumentsfield are optional, which are used to overwrite thecmdandentrypointof the image.
cmd
entrypoint
You need to also specify theLanguage Framework, which is the web framework of the container image used. Currently, onlySpring Bootis supported. For other Java applications or non-Java (polyglot) applications, selectPolyglot.
SelectSave, then selectCreateto deploy your application.
SelectSave, then selectCreateto deploy your application.
Feature Support matrix
The following matrix shows what features are supported in each application type.
PATH
Note
Polyglot apps include non-Spring Boot Java, NodeJS, AngularJS, Python, and .NET apps.
Common points to be aware of when deploying with a custom container
The following points will help you address common situations when deploying with a custom image.
Trust a Certificate Authority
There are two options to trust a Certificate Authority:
Option 1: Upload via Azure Spring Apps
To load the CA certs into your apps, seeUse TLS/SSL certificates in your application in Azure Spring Apps. Then the certs will be mounted into the location/etc/azure-spring-cloud/certs/public/.
Option 2: Manual installation in the image
To trust a CA in the image, set the following variables depending on your environment:
You must import Java applications into the trust store by adding the following lines into yourDockerfile:ADD EnterpriseRootCA.crt /opt/
RUN keytool -keystore /etc/ssl/certs/java/cacerts -storepass changeit -noprompt -trustcacerts -importcert -alias EnterpriseRootCA -file /opt/EnterpriseRootCA.crt
You must import Java applications into the trust store by adding the following lines into yourDockerfile:
ADD EnterpriseRootCA.crt /opt/
RUN keytool -keystore /etc/ssl/certs/java/cacerts -storepass changeit -noprompt -trustcacerts -importcert -alias EnterpriseRootCA -file /opt/EnterpriseRootCA.crt
ADD EnterpriseRootCA.crt /opt/
RUN keytool -keystore /etc/ssl/certs/java/cacerts -storepass changeit -noprompt -trustcacerts -importcert -alias EnterpriseRootCA -file /opt/EnterpriseRootCA.crt
For Node.js applications, set theNODE_EXTRA_CA_CERTSenvironment variable:ADD EnterpriseRootCA.crt /opt/
ENV NODE_EXTRA_CA_CERTS="/opt/EnterpriseRootCA.crt"
For Node.js applications, set theNODE_EXTRA_CA_CERTSenvironment variable:
NODE_EXTRA_CA_CERTS
ADD EnterpriseRootCA.crt /opt/
ENV NODE_EXTRA_CA_CERTS="/opt/EnterpriseRootCA.crt"
ADD EnterpriseRootCA.crt /opt/
ENV NODE_EXTRA_CA_CERTS="/opt/EnterpriseRootCA.crt"
For Python, or other languages relying on the system CA store, on Debian or Ubuntu images, add the following environment variables:ADD EnterpriseRootCA.crt /usr/local/share/ca-certificates/
RUN /usr/sbin/update-ca-certificates
For Python, or other languages relying on the system CA store, on Debian or Ubuntu images, add the following environment variables:
ADD EnterpriseRootCA.crt /usr/local/share/ca-certificates/
RUN /usr/sbin/update-ca-certificates
ADD EnterpriseRootCA.crt /usr/local/share/ca-certificates/
RUN /usr/sbin/update-ca-certificates
For Python, or other languages relying on the system CA store, on CentOS or Fedora based images, add the following environment variables:ADD EnterpriseRootCA.crt /etc/pki/ca-trust/source/anchors/
RUN /usr/bin/update-ca-trust
For Python, or other languages relying on the system CA store, on CentOS or Fedora based images, add the following environment variables:
ADD EnterpriseRootCA.crt /etc/pki/ca-trust/source/anchors/
RUN /usr/bin/update-ca-trust
ADD EnterpriseRootCA.crt /etc/pki/ca-trust/source/anchors/
RUN /usr/bin/update-ca-trust
Avoid unexpected behavior when images change
When your application is restarted or scaled out, the latest image will always be pulled. If the image has been changed, the newly started application instances will use the new image while the old instances will continue to use the old image.
Note
Avoid using thelatesttag or overwrite the image without a tag change to avoid unexpected application behavior.
latest
Avoid not being able to connect to the container registry in a VNet
If you deployed the instance to a VNet, make sure you allow the network traffic to your container registry in the NSG or Azure Firewall (if used). For more information, seeCustomer responsibilities for running in VNetto add the needed security rules.
Install an APM into the image manually
The installation steps vary on different application performance monitors (APMs) and languages. The following steps are for New Relic with Java applications. You must modify theDockerfileusing the following steps:
Download and install the agent file into the image by adding the following to theDockerfile:ADD newrelic-agent.jar /opt/agents/newrelic/java/newrelic-agent.jar
Download and install the agent file into the image by adding the following to theDockerfile:
ADD newrelic-agent.jar /opt/agents/newrelic/java/newrelic-agent.jar
ADD newrelic-agent.jar /opt/agents/newrelic/java/newrelic-agent.jar
Add the environment variables required by the APM:ENV NEW_RELIC_APP_NAME=appName
ENV NEW_RELIC_LICENSE_KEY=newRelicLicenseKey
Add the environment variables required by the APM:
ENV NEW_RELIC_APP_NAME=appName
ENV NEW_RELIC_LICENSE_KEY=newRelicLicenseKey
ENV NEW_RELIC_APP_NAME=appName
ENV NEW_RELIC_LICENSE_KEY=newRelicLicenseKey
Modify the image entry point by adding:java -javaagent:/opt/agents/newrelic/java/newrelic-agent.jar
Modify the image entry point by adding:java -javaagent:/opt/agents/newrelic/java/newrelic-agent.jar
java -javaagent:/opt/agents/newrelic/java/newrelic-agent.jar
To install the agents for other languages, refer to the official documentation for the other agents:
New Relic:
Python:Install the Python agent
Node.js:Install the Node.js agent
Dynatrace:
Python:Instrument Python applications with OpenTelemetry
Node.js:Instrument Node.js applications with OpenTelemetry
AppDynamics:
Python:Install the Python Agent
Node.js:Installing the Node.js Agent
View the container logs
To view the console logs of your container application, the following CLI command can be used:
az spring app logs \
    --resource-group <your-resource-group> \
    --name <your-app-name> \
    --service <your-service-name> \
    --instance <your-instance-name>
az spring app logs \
    --resource-group <your-resource-group> \
    --name <your-app-name> \
    --service <your-service-name> \
    --instance <your-instance-name>
To view the container events logs from the Azure Monitor, enter the query:
AppPlatformContainerEventLogs
| where App == "hw-20220317-1b"
AppPlatformContainerEventLogs
| where App == "hw-20220317-1b"

Scan your image for vulnerabilities
We recommend that you use Microsoft Defender for Cloud with ACR to prevent your images from being vulnerable. For more information, seeMicrosoft Defender for Cloud
Switch between JAR deployment and container deployment
You can switch the deployment type from JAR deployment to container deployment directly by redeploying using the following command:
az spring app deploy \
    --resource-group <your-resource-group> \
    --name <your-app-name> \
    --container-image <your-container-image> \
    --service <your-service-name>
az spring app deploy \
    --resource-group <your-resource-group> \
    --name <your-app-name> \
    --container-image <your-container-image> \
    --service <your-service-name>
Or reversely:
az spring app deploy \
    --resource-group <your-resource-group> \
    --name <your-app-name> \
    --artifact-path <your-jar-file> \
    --service <your-service-name>
az spring app deploy \
    --resource-group <your-resource-group> \
    --name <your-app-name> \
    --artifact-path <your-jar-file> \
    --service <your-service-name>
Create another deployment with an existing JAR deployment
You can create another deployment using an existing JAR deployment using the following command:
az spring app deployment create \
    --resource-group <your-resource-group> \
    --name <your-deployment-name> \
    --app <your-app-name> \
    --container-image <your-container-image> \
    --service <your-service-name>
az spring app deployment create \
    --resource-group <your-resource-group> \
    --name <your-deployment-name> \
    --app <your-app-name> \
    --container-image <your-container-image> \
    --service <your-service-name>
CI/CD
Automating deployments using Azure Pipelines Tasks or GitHub Actions are supported now. For more information, seeAutomate application deployments to Azure Spring AppsandUse Azure Spring Apps CI/CD with GitHub Actions
Next steps
How to capture dumps
Feedback
Was this page helpful?
Additional resources