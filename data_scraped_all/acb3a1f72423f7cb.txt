Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Quickstart: Add feature flags to a Spring Boot app
Article
2025-01-14
18 contributors
In this article
In this quickstart, you incorporate Azure App Configuration into a Spring Boot web app to create an end-to-end implementation of feature management. You can use App Configuration to centrally store all your feature flags and control their states.
The Spring Boot Feature Management libraries extend the framework with comprehensive feature flag support. These libraries donothave a dependency on any Azure libraries. They seamlessly integrate with App Configuration through its Spring Boot configuration provider.
Prerequisites
An Azure account with an active subscription.Create one for free.
An App Configuration store.Create a store.
A supportedJava Development Kit SDKwith version 11.
Apache Mavenversion 3.0 or above.
Add a feature flag
Add a feature flag calledBetato the App Configuration store and leaveLabelandDescriptionwith their default values. For more information about how to add feature flags to a store using the Azure portal or the CLI, go toCreate a feature flag.

Create a Spring Boot app
To create a new Spring Boot project:
Browse to theSpring Initializr.
Browse to theSpring Initializr.
Specify the following options:Generate aMavenproject withJava.Specify aSpring Bootversion that's equal to or greater than 2.0.Specify theGroupandArtifactnames for your application. This article usescom.exampleanddemo.Add theSpring Webdependency.
Specify the following options:
Generate aMavenproject withJava.
Specify aSpring Bootversion that's equal to or greater than 2.0.
Specify theGroupandArtifactnames for your application. This article usescom.exampleanddemo.
com.example
demo
Add theSpring Webdependency.
After you specify the previous options, selectGenerate Project. When prompted, download the project to your local computer.
After you specify the previous options, selectGenerate Project. When prompted, download the project to your local computer.
Add feature management
After you extract the files on your local system, your Spring Boot application is ready for editing. Locatepom.xmlin the root directory of your app.
After you extract the files on your local system, your Spring Boot application is ready for editing. Locatepom.xmlin the root directory of your app.
Open thepom.xmlfile in a text editor and add the following to the list of<dependencies>:
Open thepom.xmlfile in a text editor and add the following to the list of<dependencies>:
<dependencies>
<dependency>
    <groupId>com.azure.spring</groupId>
    <artifactId>spring-cloud-azure-appconfiguration-config-web</artifactId>
</dependency>
<dependency>
    <groupId>com.azure.spring</groupId>
    <artifactId>spring-cloud-azure-feature-management-web</artifactId>
</dependency>
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-thymeleaf</artifactId>
</dependency>

<dependencyManagement>
    <dependencies>
        <dependency>
        <groupId>com.azure.spring</groupId>
        <artifactId>spring-cloud-azure-dependencies</artifactId>
        <version>5.18.0</version>
        <type>pom</type>
        <scope>import</scope>
        </dependency>
    </dependencies>
</dependencyManagement>
<dependency>
    <groupId>com.azure.spring</groupId>
    <artifactId>spring-cloud-azure-appconfiguration-config-web</artifactId>
</dependency>
<dependency>
    <groupId>com.azure.spring</groupId>
    <artifactId>spring-cloud-azure-feature-management-web</artifactId>
</dependency>
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-thymeleaf</artifactId>
</dependency>

<dependencyManagement>
    <dependencies>
        <dependency>
        <groupId>com.azure.spring</groupId>
        <artifactId>spring-cloud-azure-dependencies</artifactId>
        <version>5.18.0</version>
        <type>pom</type>
        <scope>import</scope>
        </dependency>
    </dependencies>
</dependencyManagement>
Note
There is a non-web Feature Management Library that doesn't have a dependency on spring-web. Refer to GitHub'sdocumentationfor differences.
Connect to an App Configuration store
Navigate to theresourcesdirectory of your app and open thebootstrap.propertiesorbootstrap.yamlfile. If the file does not exist, create it. Add the following line to the file.Microsoft Entra ID (recommended)Connection stringYou use theDefaultAzureCredentialto authenticate to your App Configuration store. Follow theinstructionsto assign your credential theApp Configuration Data Readerrole. Be sure to allow sufficient time for the permission to propagate before running your application. Create a new file namedAppConfigCredential.javaand add the following lines:If you are using a properties file, use the following code:spring.cloud.azure.appconfiguration.stores[0].endpoint= ${APP_CONFIGURATION_ENDPOINT}
 spring.cloud.azure.appconfiguration.stores[0].feature-flags.enabled=trueIf you are using a yaml file, use the following code:spring:
  cloud:
    azure:
      appconfiguration:
        stores[0]:
          feature-flags:
            enabled: 'true'
          connection-string: ${APP_CONFIGURATION_CONNECTION_STRING}Additionally, you need to add the following code to your project, unless you want to use Managed Identity:import org.springframework.stereotype.Component;

import com.azure.data.appconfiguration.ConfigurationClientBuilder;
import com.azure.identity.DefaultAzureCredentialBuilder;
import com.azure.spring.cloud.appconfiguration.config.ConfigurationClientCustomizer;

@Component
public class AppConfigCredential implements ConfigurationClientCustomizer {

    @Override
    public void customize(ConfigurationClientBuilder builder, String endpoint) {
        builder.credential(new DefaultAzureCredentialBuilder().build());
    }
}And add configuration Bootstrap Configuration, by creatingspring.factoriesfile underresources/META-INFdirectory and add the following lines and updatingcom.example.MyApplicationwith your application name and package:org.springframework.cloud.bootstrap.BootstrapConfiguration=\
com.example.MyApplicationIf you are using a properties file, use the following code:spring.cloud.azure.appconfiguration.stores[0].endpoint= ${APP_CONFIGURATION_CONNECTION_STRING}
 spring.cloud.azure.appconfiguration.stores[0].feature-flags.enabled=trueIf you are using a yaml file, use the following code:spring:
  cloud:
    azure:
      appconfiguration:
        stores[0]:
          feature-flags:
            enabled: 'true'
          connection-string: ${APP_CONFIGURATION_CONNECTION_STRING}
Navigate to theresourcesdirectory of your app and open thebootstrap.propertiesorbootstrap.yamlfile. If the file does not exist, create it. Add the following line to the file.
resources
bootstrap.properties
bootstrap.yaml
Microsoft Entra ID (recommended)
Connection string
You use theDefaultAzureCredentialto authenticate to your App Configuration store. Follow theinstructionsto assign your credential theApp Configuration Data Readerrole. Be sure to allow sufficient time for the permission to propagate before running your application. Create a new file namedAppConfigCredential.javaand add the following lines:
DefaultAzureCredential
If you are using a properties file, use the following code:
spring.cloud.azure.appconfiguration.stores[0].endpoint= ${APP_CONFIGURATION_ENDPOINT}
 spring.cloud.azure.appconfiguration.stores[0].feature-flags.enabled=true
spring.cloud.azure.appconfiguration.stores[0].endpoint= ${APP_CONFIGURATION_ENDPOINT}
 spring.cloud.azure.appconfiguration.stores[0].feature-flags.enabled=true
If you are using a yaml file, use the following code:
spring:
  cloud:
    azure:
      appconfiguration:
        stores[0]:
          feature-flags:
            enabled: 'true'
          connection-string: ${APP_CONFIGURATION_CONNECTION_STRING}
spring:
  cloud:
    azure:
      appconfiguration:
        stores[0]:
          feature-flags:
            enabled: 'true'
          connection-string: ${APP_CONFIGURATION_CONNECTION_STRING}
Additionally, you need to add the following code to your project, unless you want to use Managed Identity:
import org.springframework.stereotype.Component;

import com.azure.data.appconfiguration.ConfigurationClientBuilder;
import com.azure.identity.DefaultAzureCredentialBuilder;
import com.azure.spring.cloud.appconfiguration.config.ConfigurationClientCustomizer;

@Component
public class AppConfigCredential implements ConfigurationClientCustomizer {

    @Override
    public void customize(ConfigurationClientBuilder builder, String endpoint) {
        builder.credential(new DefaultAzureCredentialBuilder().build());
    }
}
import org.springframework.stereotype.Component;

import com.azure.data.appconfiguration.ConfigurationClientBuilder;
import com.azure.identity.DefaultAzureCredentialBuilder;
import com.azure.spring.cloud.appconfiguration.config.ConfigurationClientCustomizer;

@Component
public class AppConfigCredential implements ConfigurationClientCustomizer {

    @Override
    public void customize(ConfigurationClientBuilder builder, String endpoint) {
        builder.credential(new DefaultAzureCredentialBuilder().build());
    }
}
And add configuration Bootstrap Configuration, by creatingspring.factoriesfile underresources/META-INFdirectory and add the following lines and updatingcom.example.MyApplicationwith your application name and package:
spring.factories
resources/META-INF
com.example.MyApplication
org.springframework.cloud.bootstrap.BootstrapConfiguration=\
com.example.MyApplication
org.springframework.cloud.bootstrap.BootstrapConfiguration=\
com.example.MyApplication
If you are using a properties file, use the following code:
spring.cloud.azure.appconfiguration.stores[0].endpoint= ${APP_CONFIGURATION_CONNECTION_STRING}
 spring.cloud.azure.appconfiguration.stores[0].feature-flags.enabled=true
spring.cloud.azure.appconfiguration.stores[0].endpoint= ${APP_CONFIGURATION_CONNECTION_STRING}
 spring.cloud.azure.appconfiguration.stores[0].feature-flags.enabled=true
If you are using a yaml file, use the following code:
spring:
  cloud:
    azure:
      appconfiguration:
        stores[0]:
          feature-flags:
            enabled: 'true'
          connection-string: ${APP_CONFIGURATION_CONNECTION_STRING}
spring:
  cloud:
    azure:
      appconfiguration:
        stores[0]:
          feature-flags:
            enabled: 'true'
          connection-string: ${APP_CONFIGURATION_CONNECTION_STRING}
Set an environment variable.Microsoft Entra ID (recommended)Connection stringSet the environment variable namedAPP_CONFIGURATION_ENDPOINTto the endpoint of your App Configuration store found under theOverviewof your store in the Azure portal.If you use the Windows command prompt, run the following command and restart the command prompt to allow the change to take effect:setx APP_CONFIGURATION_ENDPOINT "endpoint-of-your-app-configuration-store"If you use PowerShell, run the following command:$Env:APP_CONFIGURATION_ENDPOINT = "<endpoint-of-your-app-configuration-store>"If you use macOS or Linux, run the following command:export APP_CONFIGURATION_ENDPOINT='<endpoint-of-your-app-configuration-store>'Set the environment variable namedAPP_CONFIGURATION_CONNECTION_STRINGto the read-only connection string of your App Configuration store found underAccess keysof your store in the Azure portal.If you use the Windows command prompt, run the following command and restart the command prompt to allow the change to take effect:setx APP_CONFIGURATION_CONNECTION_STRING "<connection-string-of-your-app-configuration-store>"If you use PowerShell, run the following command:$Env:APP_CONFIGURATION_CONNECTION_STRING = "<connection-string-of-your-app-configuration-store>"If you use macOS or Linux, run the following command:export APP_CONFIGURATION_CONNECTION_STRING='<connection-string-of-your-app-configuration-store>'Restart the command prompt to allow the change to take effect. Print the value of the environment variable to validate that it is set properly.
Set an environment variable.
Microsoft Entra ID (recommended)
Connection string
Set the environment variable namedAPP_CONFIGURATION_ENDPOINTto the endpoint of your App Configuration store found under theOverviewof your store in the Azure portal.
If you use the Windows command prompt, run the following command and restart the command prompt to allow the change to take effect:
setx APP_CONFIGURATION_ENDPOINT "endpoint-of-your-app-configuration-store"
setx APP_CONFIGURATION_ENDPOINT "endpoint-of-your-app-configuration-store"
If you use PowerShell, run the following command:
$Env:APP_CONFIGURATION_ENDPOINT = "<endpoint-of-your-app-configuration-store>"
$Env:APP_CONFIGURATION_ENDPOINT = "<endpoint-of-your-app-configuration-store>"
If you use macOS or Linux, run the following command:
export APP_CONFIGURATION_ENDPOINT='<endpoint-of-your-app-configuration-store>'
export APP_CONFIGURATION_ENDPOINT='<endpoint-of-your-app-configuration-store>'
Set the environment variable namedAPP_CONFIGURATION_CONNECTION_STRINGto the read-only connection string of your App Configuration store found underAccess keysof your store in the Azure portal.
If you use the Windows command prompt, run the following command and restart the command prompt to allow the change to take effect:
setx APP_CONFIGURATION_CONNECTION_STRING "<connection-string-of-your-app-configuration-store>"
setx APP_CONFIGURATION_CONNECTION_STRING "<connection-string-of-your-app-configuration-store>"
If you use PowerShell, run the following command:
$Env:APP_CONFIGURATION_CONNECTION_STRING = "<connection-string-of-your-app-configuration-store>"
$Env:APP_CONFIGURATION_CONNECTION_STRING = "<connection-string-of-your-app-configuration-store>"
If you use macOS or Linux, run the following command:
export APP_CONFIGURATION_CONNECTION_STRING='<connection-string-of-your-app-configuration-store>'
export APP_CONFIGURATION_CONNECTION_STRING='<connection-string-of-your-app-configuration-store>'
Restart the command prompt to allow the change to take effect. Print the value of the environment variable to validate that it is set properly.
Create a new Java file namedHelloController.javain the package directory of your app.package com.example.demo;

import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;

import com.azure.spring.cloud.feature.management.FeatureManager;
import org.springframework.web.bind.annotation.GetMapping;


@Controller
@ConfigurationProperties("controller")
public class HelloController {

    private FeatureManager featureManager;

    public HelloController(FeatureManager featureManager) {
        this.featureManager = featureManager;
    }

    @GetMapping("/welcome")
    public String mainWithParam(Model model) {
        model.addAttribute("Beta", featureManager.isEnabledAsync("Beta").block());
        return "welcome";
    }
}
Create a new Java file namedHelloController.javain the package directory of your app.
package com.example.demo;

import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;

import com.azure.spring.cloud.feature.management.FeatureManager;
import org.springframework.web.bind.annotation.GetMapping;


@Controller
@ConfigurationProperties("controller")
public class HelloController {

    private FeatureManager featureManager;

    public HelloController(FeatureManager featureManager) {
        this.featureManager = featureManager;
    }

    @GetMapping("/welcome")
    public String mainWithParam(Model model) {
        model.addAttribute("Beta", featureManager.isEnabledAsync("Beta").block());
        return "welcome";
    }
}
package com.example.demo;

import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;

import com.azure.spring.cloud.feature.management.FeatureManager;
import org.springframework.web.bind.annotation.GetMapping;


@Controller
@ConfigurationProperties("controller")
public class HelloController {

    private FeatureManager featureManager;

    public HelloController(FeatureManager featureManager) {
        this.featureManager = featureManager;
    }

    @GetMapping("/welcome")
    public String mainWithParam(Model model) {
        model.addAttribute("Beta", featureManager.isEnabledAsync("Beta").block());
        return "welcome";
    }
}
Create a new HTML file namedwelcome.htmlin the templates directory of your app.<!DOCTYPE html>
<html lang="en" xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>Feature Management with Spring Cloud Azure</title>

    <link rel="stylesheet" href="/css/main.css">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">

    <script src="https://code.jquery.com/jquery-3.6.0.min.js" integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=" crossorigin="anonymous"></script>
    <script src="https://unpkg.com/@popperjs/core@2"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p" crossorigin="anonymous"></script>

</head>
<body>
    <header>
    <!-- Fixed navbar -->
    <nav class="navbar navbar-expand-md navbar-dark fixed-top bg-dark">
        <a class="navbar-brand" href="#">TestFeatureFlags</a>
        <button class="navbar-toggler" aria-expanded="false" aria-controls="navbarCollapse" aria-label="Toggle navigation" type="button" data-target="#navbarCollapse" data-toggle="collapse">
        <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarCollapse">
        <ul class="navbar-nav mr-auto">
            <li class="nav-item active">
            <a class="nav-link" href="#">Home <span class="sr-only">(current)</span></a>
            </li>
            <li class="nav-item" th:if="${Beta}">
            <a class="nav-link" href="#">Beta</a>
            </li>
            <li class="nav-item">
            <a class="nav-link" href="#">Privacy</a>
            </li>
        </ul>
        </div>
    </nav>
    </header>
    <div class="container body-content">
        <h1 class="mt-5">Welcome</h1>
        <p>Learn more about <a href="https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/spring/spring-cloud-azure-feature-management/README.md">Feature Management with Spring Cloud Azure</a></p>

    </div>
    <footer class="footer">
        <div class="container">
        <span class="text-muted">&copy; 2019 - Projects</span>
    </div>

    </footer>
</body>
</html>
Create a new HTML file namedwelcome.htmlin the templates directory of your app.
<!DOCTYPE html>
<html lang="en" xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>Feature Management with Spring Cloud Azure</title>

    <link rel="stylesheet" href="/css/main.css">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">

    <script src="https://code.jquery.com/jquery-3.6.0.min.js" integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=" crossorigin="anonymous"></script>
    <script src="https://unpkg.com/@popperjs/core@2"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p" crossorigin="anonymous"></script>

</head>
<body>
    <header>
    <!-- Fixed navbar -->
    <nav class="navbar navbar-expand-md navbar-dark fixed-top bg-dark">
        <a class="navbar-brand" href="#">TestFeatureFlags</a>
        <button class="navbar-toggler" aria-expanded="false" aria-controls="navbarCollapse" aria-label="Toggle navigation" type="button" data-target="#navbarCollapse" data-toggle="collapse">
        <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarCollapse">
        <ul class="navbar-nav mr-auto">
            <li class="nav-item active">
            <a class="nav-link" href="#">Home <span class="sr-only">(current)</span></a>
            </li>
            <li class="nav-item" th:if="${Beta}">
            <a class="nav-link" href="#">Beta</a>
            </li>
            <li class="nav-item">
            <a class="nav-link" href="#">Privacy</a>
            </li>
        </ul>
        </div>
    </nav>
    </header>
    <div class="container body-content">
        <h1 class="mt-5">Welcome</h1>
        <p>Learn more about <a href="https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/spring/spring-cloud-azure-feature-management/README.md">Feature Management with Spring Cloud Azure</a></p>

    </div>
    <footer class="footer">
        <div class="container">
        <span class="text-muted">&copy; 2019 - Projects</span>
    </div>

    </footer>
</body>
</html>
<!DOCTYPE html>
<html lang="en" xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>Feature Management with Spring Cloud Azure</title>

    <link rel="stylesheet" href="/css/main.css">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">

    <script src="https://code.jquery.com/jquery-3.6.0.min.js" integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=" crossorigin="anonymous"></script>
    <script src="https://unpkg.com/@popperjs/core@2"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p" crossorigin="anonymous"></script>

</head>
<body>
    <header>
    <!-- Fixed navbar -->
    <nav class="navbar navbar-expand-md navbar-dark fixed-top bg-dark">
        <a class="navbar-brand" href="#">TestFeatureFlags</a>
        <button class="navbar-toggler" aria-expanded="false" aria-controls="navbarCollapse" aria-label="Toggle navigation" type="button" data-target="#navbarCollapse" data-toggle="collapse">
        <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarCollapse">
        <ul class="navbar-nav mr-auto">
            <li class="nav-item active">
            <a class="nav-link" href="#">Home <span class="sr-only">(current)</span></a>
            </li>
            <li class="nav-item" th:if="${Beta}">
            <a class="nav-link" href="#">Beta</a>
            </li>
            <li class="nav-item">
            <a class="nav-link" href="#">Privacy</a>
            </li>
        </ul>
        </div>
    </nav>
    </header>
    <div class="container body-content">
        <h1 class="mt-5">Welcome</h1>
        <p>Learn more about <a href="https://github.com/Azure/azure-sdk-for-java/tree/main/sdk/spring/spring-cloud-azure-feature-management/README.md">Feature Management with Spring Cloud Azure</a></p>

    </div>
    <footer class="footer">
        <div class="container">
        <span class="text-muted">&copy; 2019 - Projects</span>
    </div>

    </footer>
</body>
</html>
Create a new folder named CSS understaticand inside of it a new CSS file namedmain.css.html {
 position: relative;
 min-height: 100%;
}
body {
 margin-bottom: 60px;
}
.footer {
 position: absolute;
 bottom: 0;
 width: 100%;
 height: 60px;
 line-height: 60px;
 background-color: #f5f5f5;
}

body > .container {
 padding: 60px 15px 0;
}

.footer > .container {
 padding-right: 15px;
 padding-left: 15px;
}

code {
 font-size: 80%;
}
Create a new folder named CSS understaticand inside of it a new CSS file namedmain.css.
static
html {
 position: relative;
 min-height: 100%;
}
body {
 margin-bottom: 60px;
}
.footer {
 position: absolute;
 bottom: 0;
 width: 100%;
 height: 60px;
 line-height: 60px;
 background-color: #f5f5f5;
}

body > .container {
 padding: 60px 15px 0;
}

.footer > .container {
 padding-right: 15px;
 padding-left: 15px;
}

code {
 font-size: 80%;
}
html {
 position: relative;
 min-height: 100%;
}
body {
 margin-bottom: 60px;
}
.footer {
 position: absolute;
 bottom: 0;
 width: 100%;
 height: 60px;
 line-height: 60px;
 background-color: #f5f5f5;
}

body > .container {
 padding: 60px 15px 0;
}

.footer > .container {
 padding-right: 15px;
 padding-left: 15px;
}

code {
 font-size: 80%;
}
Build and run the app locally
Build your Spring Boot application with Maven and run it.mvn clean package
mvn spring-boot:run
Build your Spring Boot application with Maven and run it.
mvn clean package
mvn spring-boot:run
mvn clean package
mvn spring-boot:run
Open a browser window, and go to the URL:http://localhost:8080/welcome.
Open a browser window, and go to the URL:http://localhost:8080/welcome.
http://localhost:8080/welcome

In the App Configuration portal selectFeature Manager, and change the state of theBetakey toOn:KeyStateBetaOn
In the App Configuration portal selectFeature Manager, and change the state of theBetakey toOn:
Refresh the browser page to see the new configuration settings.
Refresh the browser page to see the new configuration settings.

Clean up resources
If you don't want to continue using the resources created in this article, delete the resource group you created here to avoid charges.
Important
Deleting a resource group is irreversible. The resource group and all the resources in it are permanently deleted. Ensure that you don't accidentally delete the wrong resource group or resources. If you created the resources for this article inside a resource group that contains other resources you want to keep, delete each resource individually from its respective pane instead of deleting the resource group.
Sign in to theAzure portal, and selectResource groups.
In theFilter by namebox, enter the name of your resource group.
In the result list, select the resource group name to see an overview.
SelectDelete resource group.
You're asked to confirm the deletion of the resource group. Enter the name of your resource group to confirm, and selectDelete.
After a few moments, the resource group and all its resources are deleted.
Next steps
In this quickstart, you created a new App Configuration store and used it to manage features in a Spring Boot web app via theFeature Management libraries.
Libraryreference documentation
Learn more aboutfeature management.
Manage feature flags.
Use feature flags in a Spring Boot Core app.
Feedback
Was this page helpful?
Additional resources