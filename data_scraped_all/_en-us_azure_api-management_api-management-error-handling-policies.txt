Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Error handling in API Management policies
Article
2025-01-07
11 contributors
In this article
APPLIES TO: All API Management tiers
By providing aProxyErrorobject, Azure API Management allows publishers to respond to error conditions, which may occur during processing of requests. TheProxyErrorobject is accessed through thecontext.LastErrorproperty and can be used by policies in theon-errorpolicy section. This article provides a reference for the error handling capabilities in Azure API Management.
ProxyError
ProxyError
on-error
Error handling in API Management
Policies in Azure API Management are divided intoinbound,backend,outbound, andon-errorsections as shown in the following example.
inbound
backend
outbound
on-error
<policies>
    <inbound>
        <!-- statements to be applied to the request go here -->
    </inbound>
    <backend>
        <!-- statements to be applied before the request is
             forwarded to the backend service go here -->
    </backend>
    <outbound>
        <!-- statements to be applied to the response go here -->
    </outbound>
    <on-error>
        <!-- statements to be applied if there is an error
             condition go here -->
    </on-error>
</policies>
<policies>
    <inbound>
        <!-- statements to be applied to the request go here -->
    </inbound>
    <backend>
        <!-- statements to be applied before the request is
             forwarded to the backend service go here -->
    </backend>
    <outbound>
        <!-- statements to be applied to the response go here -->
    </outbound>
    <on-error>
        <!-- statements to be applied if there is an error
             condition go here -->
    </on-error>
</policies>
During the processing of a request, built-in steps are executed along with any policies, which are in scope for the request. If an error occurs, processing immediately jumps to theon-errorpolicy section.
Theon-errorpolicy section can be used at any scope. API publishers can configure custom behavior such as logging the error to event hubs or creating a new response to return to the caller.
on-error
on-error
Note
Theon-errorsection is not present in policies by default. To add theon-errorsection to a policy, browse to the desired policy in the policy editor and add it. For more information about configuring policies, seePolicies in API Management.
on-error
on-error
If there is noon-errorsection, callers will receive 400 or 500 HTTP response messages if an error condition occurs.
on-error
Policies allowed in on-error
The following policies can be used in theon-errorpolicy section.
on-error
choose
set-variable
find-and-replace
return-response
set-header
set-method
set-status
send-request
send-one-way-request
log-to-eventhub
json-to-xml
xml-to-json
limit-concurrency
mock-response
retry
trace
LastError
When an error occurs and control jumps to theon-errorpolicy section, the error is stored incontext.LastErrorproperty, which can be accessed by policies in theon-errorsection. LastError has the following properties.
on-error
on-error
Source
Reason
Message
Scope
Section
Path
PolicyId
id
Tip
You can access the status code through context.Response.StatusCode.
Note
All policies have an optionalidattribute that can be added to the root element of the policy. If this attribute is present in a policy when an error condition occurs, the value of the attribute can be retrieved using thecontext.LastError.PolicyIdproperty.
id
context.LastError.PolicyId
Predefined errors for built-in steps
The following errors are predefined for error conditions that can occur during the evaluation of built-in processing steps.
Predefined errors for policies
The following errors are predefined for error conditions that can occur during policy evaluation.
Example
Setting an API policy to:
<policies>
    <inbound>
        <base />
    </inbound>
    <backend>
        <base />
    </backend>
    <outbound>
        <base />
    </outbound>
    <on-error>
        <set-header name="ErrorSource" exists-action="override">
            <value>@(context.LastError.Source)</value>
        </set-header>
        <set-header name="ErrorReason" exists-action="override">
            <value>@(context.LastError.Reason)</value>
        </set-header>
        <set-header name="ErrorMessage" exists-action="override">
            <value>@(context.LastError.Message)</value>
        </set-header>
        <set-header name="ErrorScope" exists-action="override">
            <value>@(context.LastError.Scope)</value>
        </set-header>
        <set-header name="ErrorSection" exists-action="override">
            <value>@(context.LastError.Section)</value>
        </set-header>
        <set-header name="ErrorPath" exists-action="override">
            <value>@(context.LastError.Path)</value>
        </set-header>
        <set-header name="ErrorPolicyId" exists-action="override">
            <value>@(context.LastError.PolicyId)</value>
        </set-header>
        <set-header name="ErrorStatusCode" exists-action="override">
            <value>@(context.Response.StatusCode.ToString())</value>
        </set-header>
        <base />
    </on-error>
</policies>
<policies>
    <inbound>
        <base />
    </inbound>
    <backend>
        <base />
    </backend>
    <outbound>
        <base />
    </outbound>
    <on-error>
        <set-header name="ErrorSource" exists-action="override">
            <value>@(context.LastError.Source)</value>
        </set-header>
        <set-header name="ErrorReason" exists-action="override">
            <value>@(context.LastError.Reason)</value>
        </set-header>
        <set-header name="ErrorMessage" exists-action="override">
            <value>@(context.LastError.Message)</value>
        </set-header>
        <set-header name="ErrorScope" exists-action="override">
            <value>@(context.LastError.Scope)</value>
        </set-header>
        <set-header name="ErrorSection" exists-action="override">
            <value>@(context.LastError.Section)</value>
        </set-header>
        <set-header name="ErrorPath" exists-action="override">
            <value>@(context.LastError.Path)</value>
        </set-header>
        <set-header name="ErrorPolicyId" exists-action="override">
            <value>@(context.LastError.PolicyId)</value>
        </set-header>
        <set-header name="ErrorStatusCode" exists-action="override">
            <value>@(context.Response.StatusCode.ToString())</value>
        </set-header>
        <base />
    </on-error>
</policies>
and sending an unauthorized request will result in the following response:

Related content
For more information about working with policies, see:
Tutorial: Transform and protect your API
Policy referencefor a full list of policy statements and their settings
Policy expressions
Set or edit policies
Reuse policy configurations
Policy snippets repo
Azure API Management policy toolkit
Get Copilot assistance to create, explain, and troubleshoot policies
Feedback
Was this page helpful?
Additional resources