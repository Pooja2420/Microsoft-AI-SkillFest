Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Azure Cosmos DB for MongoDB (4.0 server version): supported features and syntax
Article
2024-08-22
7 contributors
In this article
APPLIES TO:MongoDB
Azure Cosmos DB is Microsoft's globally distributed multi-model database service. You can communicate with the Azure Cosmos DB for MongoDB using any of the open-source MongoDB clientdrivers. The Azure Cosmos DB for MongoDB enables the use of existing client drivers by adhering to the MongoDBwire protocol.
By using the Azure Cosmos DB for MongoDB, you can enjoy the benefits of the MongoDB you're used to, with all of the enterprise capabilities that Azure Cosmos DB provides:global distribution,automatic sharding, availability and latency guarantees, encryption at rest, backups, and much more.
Protocol Support
The supported operators and any limitations or exceptions are listed below. Any client driver that understands these protocols should be able to connect to Azure Cosmos DB for MongoDB. When you create Azure Cosmos DB for MongoDB accounts, the 3.6+ versions of accounts have the endpoint in the format*.mongo.cosmos.azure.comwhereas the 3.2 version of accounts has the endpoint in the format*.documents.azure.com.
*.mongo.cosmos.azure.com
*.documents.azure.com
Note
This article only lists the supported server commands and excludes client-side wrapper functions. Client-side wrapper functions such asdeleteMany()andupdateMany()internally utilize thedelete()andupdate()server commands. Functions utilizing supported server commands are compatible with Azure Cosmos DB for MongoDB.
deleteMany()
updateMany()
delete()
update()
Query language support
Azure Cosmos DB for MongoDB provides comprehensive support for MongoDB query language constructs. Below you can find the detailed list of currently supported operations, operators, stages, commands, and options.
Database commands
Azure Cosmos DB for MongoDB supports the following database commands:
Query and write operation commands
change streams
delete
eval
find
findAndModify
getLastError
getMore
getPrevError
insert
parallelCollectionScan
resetError
update
Transaction commands
abortTransaction
commitTransaction
Authentication commands
authenticate
getnonce
logout
Administration commands
cloneCollectionAsCapped
collMod
connectionStatus
convertToCapped
copydb
create
createIndexes
currentOp
drop
dropDatabase
dropIndexes
filemd5
killCursors
killOp
listCollections
listDatabases
listIndexes
reIndex
renameCollection
Diagnostics commands
buildInfo
collStats
connPoolStats
connectionStatus
dataSize
dbHash
dbStats
explain
features
hello
hostInfo
listDatabases
listCommands
profiler
serverStatus
top
whatsmyuri
Aggregation pipeline
Aggregation commands
aggregate
count
distinct
mapReduce
Aggregation stages
addFields
bucket
bucketAuto
changeStream
collStats
count
currentOp
facet
geoNear
graphLookup
group
indexStats
limit
listLocalSessions
listSessions
lookup
match
out
project
redact
replaceRoot
replaceWith
sample
skip
sort
sortByCount
unwind
Note
$lookupdoes not yet support theuncorrelated subqueriesfeature introduced in server version 3.6. You will receive an error with a message containinglet is not supportedif you attempt to use the$lookupoperator withletandpipelinefields.
$lookup
let is not supported
$lookup
let
pipeline
Boolean expressions
and
not
or
Conversion expressions
convert
toBool
toDate
toDecimal
toDouble
toInt
toLong
toObjectId
toString
Set expressions
setEquals
setIntersection
setUnion
setDifference
setIsSubset
anyElementTrue
allElementsTrue
Comparison expressions
Note
The API for MongoDB does not support comparison expressions with an array literal in the query.
cmp
eq
gt
gte
lt
lte
ne
in
nin
Arithmetic expressions
abs
add
ceil
divide
exp
floor
ln
log
log10
mod
multiply
pow
sqrt
subtract
trunc
String expressions
concat
indexOfBytes
indexOfCP
ltrim
rtrim
trim
split
strLenBytes
strLenCP
strcasecmp
substr
substrBytes
substrCP
toLower
toUpper
Text search operator
meta
Array expressions
arrayElemAt
arrayToObject
concatArrays
filter
indexOfArray
isArray
objectToArray
range
reverseArray
reduce
size
slice
zip
in
Variable operators
map
let
System variables
$$CURRENT
$$DESCEND
$$KEEP
$$PRUNE
$$REMOVE
$$ROOT
Literal operator
literal
Date expressions
dayOfYear
dayOfMonth
dayOfWeek
year
month
week
hour
minute
second
millisecond
dateToString
isoDayOfWeek
isoWeek
dateFromParts
dateToParts
dateFromString
isoWeekYear
Conditional expressions
cond
ifNull
switch
Data type operator
type
Accumulator expressions
sum
avg
first
last
max
min
push
addToSet
stdDevPop
stdDevSamp
Merge operator
mergeObjects
Data types
Azure Cosmos DB for MongoDB supports documents encoded in MongoDB BSON format. The 4.0 API version enhances the internal usage of this format to improve performance and reduce costs. Documents written or updated through an endpoint running 4.0+ benefit from optimization.
In anupgrade scenario, documents written prior to the upgrade to version 4.0+ won't benefit from the enhanced performance until they're updated via a write operation through the 4.0+ endpoint.
16-MB document support raises the size limit for your documents from 2 MB to 16 MB. This limit only applies to collections created after this feature has been enabled. Once this feature is enabled for your database account, it can't be disabled.
Enabling 16 MB can be done in the features tab in the Azure portal or programmatically byadding the "EnableMongo16MBDocumentSupport" capability.
We recommend enabling Server Side Retry and avoiding wildcard indexes to ensure requests with larger documents succeed. If necessary, raising your DB/Collection RUs may also help performance.
Double
String
Object
Array
Binary Data
ObjectId
Boolean
Date
Null
32-bit Integer (int)
Timestamp
64-bit Integer (long)
MinKey
MaxKey
Decimal128
Regular Expression
JavaScript
JavaScript (with scope)
Undefined
Indexes and index properties
Indexes
Single Field Index
Compound Index
Multikey Index
Text Index
2dsphere
2d Index
Hashed Index
Index properties
TTL
Unique
Partial
Case Insensitive
Sparse
Background
Operators
Logical operators
or
and
not
nor
Element operators
exists
type
Evaluation query operators
expr
jsonSchema
mod
regex
text
where
In the $regex queries, left-anchored expressions allow index search. However, using 'i' modifier (case-insensitivity) and 'm' modifier (multiline) causes the collection scan in all expressions.
When there's a need to include '$' or '|', it's best to create two (or more) regex queries. For example, given the following original query:find({x:{$regex: /^abc$/}), it has to be modified as follows:
find({x:{$regex: /^abc$/})
find({x:{$regex: /^abc/, x:{$regex:/^abc$/}})
find({x:{$regex: /^abc/, x:{$regex:/^abc$/}})
The first part will use the index to restrict the search to those documents beginning with ^abc and the second part will match the exact entries. The bar operator '|' acts as an "or" function - the queryfind({x:{$regex: /^abc |^def/})matches the documents in which field 'x' has values that begin with "abc" or "def". To utilize the index, it's recommended to break the query into two different queries joined by the $or operator:find( {$or : [{x: $regex: /^abc/}, {$regex: /^def/}] }).
find({x:{$regex: /^abc |^def/})
find( {$or : [{x: $regex: /^abc/}, {$regex: /^def/}] })
Array operators
all
elemMatch
size
Comment operator
comment
Projection operators
elemMatch
meta
slice
Update operators
inc
mul
rename
setOnInsert
set
unset
min
max
currentDate
$
$[]
$[\<identifier\>]
addToSet
pop
pullAll
pull
push
pushAll
each
slice
sort
position
bit
bitsAllSet
bitsAnySet
bitsAllClear
bitsAnyClear
Geospatial operators
$geoWithin
$geoIntersects
$near
$nearSphere
$geometry
$minDistance
$maxDistance
$center
$centerSphere
$box
$polygon
Sort operations
When you use thefindOneAndUpdateoperation with API for MongoDB version 4.0, sort operations on a single field and multiple fields are supported. Sort operations on multiple fields were a limitation of previous wire protocols.
findOneAndUpdate
Indexing
The API for MongoDBsupports various indexesto enable sorting on multiple fields, improve query performance, and enforce uniqueness.
GridFS
Azure Cosmos DB supports GridFS through any GridFS-compatible Mongo driver.
Replication
Azure Cosmos DB supports automatic, native replication at the lowest layers. This logic is extended out to achieve low-latency, global replication as well. Azure Cosmos DB doesn't support manual replication commands.
Retryable Writes
Retryable writes enable MongoDB drivers to automatically retry certain write operations if there was failure, but results in more stringent requirements for certain operations, which match MongoDB protocol requirements. With this feature enabled, update operations, including deletes, in sharded collections will require the shard key to be included in the query filter or update statement.
For example, with a sharded collection, sharded on key âcountryâ: To delete all the documents with the fieldcity="NYC", the application will need to execute the operation for all shard key (country) values if Retryable writes are enabled.
"NYC"
db.coll.deleteMany({"country": "USA", "city": "NYC"})-Success
db.coll.deleteMany({"country": "USA", "city": "NYC"})
db.coll.deleteMany({"city": "NYC"})- Fails with errorShardKeyNotFound(61)
db.coll.deleteMany({"city": "NYC"})
Note
Retryable writes does not support bulk unordered writes at this time. If you would like to perform bulk writes with retryable writes enabled, perform bulk ordered writes.
To enable the feature,add the EnableMongoRetryableWrites capabilityto your database account. This feature can also be enabled in the features tab in the Azure portal.
Sharding
Azure Cosmos DB supports automatic, server-side sharding. It manages shard creation, placement, and balancing automatically. Azure Cosmos DB doesn't support manual sharding commands, which means you don't have to invoke commands such as addShard, balancerStart, moveChunk etc. You only need to specify the shard key while creating the containers or querying the data.
Sessions
Azure Cosmos DB doesn't yet support server-side sessions commands.
Time-to-live (TTL)
Azure Cosmos DB supports a time-to-live (TTL) based on the timestamp of the document. TTL can be enabled for collections from theAzure portal.
Transactions
Multi-document transactions are supported within an unsharded collection. Multi-document transactions aren't supported across collections or in sharded collections. The timeout for transactions is a fixed 5 seconds.
User and role management
Azure Cosmos DB doesn't yet support users and roles. However, Azure Cosmos DB supports Azure role-based access control (Azure RBAC) and read-write and read-only passwords/keys that can be obtained through theAzure portal(Connection String page).
Write Concern
Some applications rely on aWrite Concern, which specifies the number of responses required during a write operation. Due to how Azure Cosmos DB handles replication in the background all writes are automatically Quorum by default. Any write concern specified by the client code is ignored. Learn more inUsing consistency levels to maximize availability and performance.
Next steps
Learn how touse Studio 3Twith Azure Cosmos DB for MongoDB.
Learn how touse Robo 3Twith Azure Cosmos DB for MongoDB.
Explore MongoDBsampleswith Azure Cosmos DB for MongoDB.
Trying to do capacity planning for a migration to Azure Cosmos DB? You can use information about your existing database cluster for capacity planning.If all you know is the number of vCores and servers in your existing database cluster, read aboutestimating request units using vCores or vCPUsIf you know typical request rates for your current database workload, read aboutestimating request units using Azure Cosmos DB capacity planner
If all you know is the number of vCores and servers in your existing database cluster, read aboutestimating request units using vCores or vCPUs
If you know typical request rates for your current database workload, read aboutestimating request units using Azure Cosmos DB capacity planner
Feedback
Was this page helpful?
Additional resources