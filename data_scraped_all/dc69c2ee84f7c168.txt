Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Tutorial: Control Azure Functions outbound IP with an Azure virtual network NAT gateway
Article
2023-01-27
7 contributors
In this article
Virtual network address translation (NAT) simplifies outbound-only internet connectivity for virtual networks. When configured on a subnet, all outbound connectivity uses your specified static public IP addresses. An NAT can be useful for apps that need to consume a third-party service that uses an allowlist of IP address as a security measure. To learn more, seeWhat is Azure NAT Gateway?.
This tutorial shows you how to use NAT gateways to route outbound traffic from an HTTP triggered function. This function lets you check its own outbound IP address. During this tutorial, you'll:
Create a virtual network
Create a Premium plan function app
Create a public IP address
Create a NAT gateway
Configure function app to route outbound traffic through the NAT gateway
Topology
The following diagram shows the architecture of the solution that you create:

Functions running in the Premium plan have the same hosting capabilities as web apps in Azure App Service, which includes the VNet Integration feature. To learn more about VNet Integration, including troubleshooting and advanced configuration, seeIntegrate your app with an Azure virtual network.
Prerequisites
For this tutorial, it's important that you understand IP addressing and subnetting. You can start withthis article that covers the basics of addressing and subnetting. Many more articles and videos are available online.
If you donât have an Azure subscription, create afree accountbefore you begin.
If you've already completed theintegrate Functions with an Azure virtual networktutorial, you can skip toCreate an HTTP trigger function.
Create a virtual network
From the Azure portal menu, selectCreate a resource. From the Azure Marketplace, selectNetworking>Virtual network.
From the Azure portal menu, selectCreate a resource. From the Azure Marketplace, selectNetworking>Virtual network.
InCreate virtual network, enter or select the settings specified as shown in the following table:SettingValueSubscriptionSelect your subscription.Resource groupSelectCreate new, entermyResourceGroup, then selectOK.NameEntermyResourceGroup-vnet.LocationSelectEast US.
InCreate virtual network, enter or select the settings specified as shown in the following table:
SelectNext: IP Addresses, and forIPv4 address space, enter10.10.0.0/16.
SelectNext: IP Addresses, and forIPv4 address space, enter10.10.0.0/16.
SelectAdd subnet, then enterTutorial-NetforSubnet nameand10.10.1.0/24forSubnet address range.
SelectAdd subnet, then enterTutorial-NetforSubnet nameand10.10.1.0/24forSubnet address range.

SelectAdd, then selectReview + create. Leave the rest as default and selectCreate.
SelectAdd, then selectReview + create. Leave the rest as default and selectCreate.
InCreate virtual network, selectCreate.
InCreate virtual network, selectCreate.
Next, you create a function app in thePremium plan. This plan provides serverless scale while supporting virtual network integration.
Create a function app in a Premium plan
This tutorial shows you how to create your function app in aPremium plan. The same functionality is also available when using aDedicated (App Service) plan.
Note
For the best experience in this tutorial, choose .NET for runtime stack and choose Windows for operating system. Also, create your function app in the same region as your virtual network.
From the Azure portal menu or theHomepage, selectCreate a resource.
From the Azure portal menu or theHomepage, selectCreate a resource.
In theNewpage, selectCompute>Function App.
In theNewpage, selectCompute>Function App.
On theBasicspage, use the function app settings as specified in the following table:SettingSuggested valueDescriptionSubscriptionYour subscriptionThe subscription under which this new function app is created.Resource GroupmyResourceGroupName for the new resource group in which to create your function app.Function App nameGlobally unique nameName that identifies your new function app. Valid characters area-z(case insensitive),0-9, and-.PublishCodeOption to publish code files or a Docker container.Runtime stackPreferred languageChoose a runtime that supports your favorite function programming language. In-portal editing isn't currently supported forPython development.RegionPreferred regionChoose aregionnear you or near other services your functions access.
On theBasicspage, use the function app settings as specified in the following table:
a-z
0-9
-
SelectNext: Hosting. On theHostingpage, enter the following settings:SettingSuggested valueDescriptionStorage accountGlobally unique nameCreate a storage account used by your function app. Storage account names must be between 3 and 24 characters in length and may contain numbers and lowercase letters only. You can also use an existing account, which must meet thestorage account requirements.Operating systemPreferred operating systemAn operating system is pre-selected for you based on your runtime stack selection, but you can change the setting if necessary. Python is only supported on Linux. In-portal editing is only supported on Windows.PlanPremiumHosting plan that defines how resources are allocated to your function app. SelectPremium. By default, a new App Service plan is created. The defaultSku and sizeisEP1, where EP stands forelastic premium. To learn more, see thelist of Premium SKUs.When running JavaScript functions on a Premium plan, you should choose an instance that has fewer vCPUs. For more information, seeChoose single-core Premium plans.
SelectNext: Hosting. On theHostingpage, enter the following settings:
SelectNext: Monitoring. On theMonitoringpage, enter the following settings:SettingSuggested valueDescriptionApplication InsightsDefaultCreates an Application Insights resource of the sameApp namein the nearest supported region. By expanding this setting, you can change theNew resource nameor choose a differentLocationin anAzure geographyto store your data.
SelectNext: Monitoring. On theMonitoringpage, enter the following settings:
SelectReview + createto review the app configuration selections.
SelectReview + createto review the app configuration selections.
On theReview + createpage, review your settings, and then selectCreateto provision and deploy the function app.
On theReview + createpage, review your settings, and then selectCreateto provision and deploy the function app.
Select theNotificationsicon in the upper-right corner of the portal and watch for theDeployment succeededmessage.
Select theNotificationsicon in the upper-right corner of the portal and watch for theDeployment succeededmessage.
SelectGo to resourceto view your new function app. You can also selectPin to dashboard. Pinning makes it easier to return to this function app resource from your dashboard.
SelectGo to resourceto view your new function app. You can also selectPin to dashboard. Pinning makes it easier to return to this function app resource from your dashboard.

Connect your function app to the virtual network
You can now connect your function app to the virtual network.
In your function app, selectNetworkingin the left menu, then underVNet Integration, selectClick here to configure.
In your function app, selectNetworkingin the left menu, then underVNet Integration, selectClick here to configure.

On theVNET Integrationpage, selectAdd VNet.
On theVNET Integrationpage, selectAdd VNet.
InNetwork Feature Status, use the settings in the table below the image:SettingSuggested valueDescriptionVirtual NetworkMyResourceGroup-vnetThis virtual network is the one you created earlier.SubnetCreate New SubnetCreate a subnet in the virtual network for your function app to use. VNet Integration must be configured to use an empty subnet.Subnet nameFunction-NetName of the new subnet.Virtual network address block10.10.0.0/16You should only have one address block defined.Subnet Address Block10.10.2.0/24The subnet size restricts the total number of instances that your Premium plan function app can scale out to. This example uses a/24subnet with 254 available host addresses. This subnet is over-provisioned, but easy to calculate.
InNetwork Feature Status, use the settings in the table below the image:

/24
SelectOKto add the subnet. Close theVNet IntegrationandNetwork Feature Statuspages to return to your function app page.
SelectOKto add the subnet. Close theVNet IntegrationandNetwork Feature Statuspages to return to your function app page.
The function app can now access the virtual network. When connectivity is enabled, thevnetrouteallenabledsite setting is set to1. You must have either this site setting or the legacyWEBSITE_VNET_ROUTE_ALLapplication setting set to1.
vnetrouteallenabled
1
WEBSITE_VNET_ROUTE_ALL
1
Next, you'll add an HTTP-triggered function to the function app.
Create an HTTP trigger function
From the left menu of theFunctionswindow, selectFunctions, then selectAddfrom the top menu.
From the left menu of theFunctionswindow, selectFunctions, then selectAddfrom the top menu.
From theNew Functionwindow, selectHttp triggerand accept the default name forNew Function, or enter a new name.
From theNew Functionwindow, selectHttp triggerand accept the default name forNew Function, or enter a new name.
InCode + Test, replace the template-generated C# script (.csx) code with the following code:#r "Newtonsoft.Json"

using System.Net;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Primitives;
using Newtonsoft.Json;

public static async Task<IActionResult> Run(HttpRequest req, ILogger log)
{
    log.LogInformation("C# HTTP trigger function processed a request.");

    var client = new HttpClient();
    var response = await client.GetAsync(@"https://ifconfig.me");
    var responseMessage = await response.Content.ReadAsStringAsync();

    return new OkObjectResult(responseMessage);
}This code calls an external website that returns the IP address of the caller, which in this case is this function. This method lets you easily determine the outbound IP address being used by your function app.
InCode + Test, replace the template-generated C# script (.csx) code with the following code:
#r "Newtonsoft.Json"

using System.Net;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Primitives;
using Newtonsoft.Json;

public static async Task<IActionResult> Run(HttpRequest req, ILogger log)
{
    log.LogInformation("C# HTTP trigger function processed a request.");

    var client = new HttpClient();
    var response = await client.GetAsync(@"https://ifconfig.me");
    var responseMessage = await response.Content.ReadAsStringAsync();

    return new OkObjectResult(responseMessage);
}
#r "Newtonsoft.Json"

using System.Net;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Primitives;
using Newtonsoft.Json;

public static async Task<IActionResult> Run(HttpRequest req, ILogger log)
{
    log.LogInformation("C# HTTP trigger function processed a request.");

    var client = new HttpClient();
    var response = await client.GetAsync(@"https://ifconfig.me");
    var responseMessage = await response.Content.ReadAsStringAsync();

    return new OkObjectResult(responseMessage);
}
This code calls an external website that returns the IP address of the caller, which in this case is this function. This method lets you easily determine the outbound IP address being used by your function app.
Now you're ready to run the function and check the current outbound IPs.
Verify current outbound IPs
Now, you can run the function. But first, check in the portal and see what outbound IPs are being use by the function app.
In your function app, selectPropertiesand review theOutbound IP Addressesfield.
In your function app, selectPropertiesand review theOutbound IP Addressesfield.
Now, return to your HTTP trigger function, selectCode + Testand thenTest/Run.
Now, return to your HTTP trigger function, selectCode + Testand thenTest/Run.

SelectRunto execute the function, then switch to theOutputand verify that IP address in the HTTP response body is one of the values from the outbound IP addresses you viewed earlier.
SelectRunto execute the function, then switch to theOutputand verify that IP address in the HTTP response body is one of the values from the outbound IP addresses you viewed earlier.
Now, you can create a public IP and use a NAT gateway to modify this outbound IP address.
Create public IP
From your resource group, selectAdd, search the Azure Marketplace forPublic IP address, and selectCreate. Use the settings in the table below the image:SettingSuggested valueIP VersionIPv4SKUStandardTierRegionalNameOutbound-IPSubscriptionensure your subscription is displayedResource groupmyResourceGroup (or name you assigned to your resource group)LocationEast US (or location you assigned to your other resources)Availability ZoneNo Zone
From your resource group, selectAdd, search the Azure Marketplace forPublic IP address, and selectCreate. Use the settings in the table below the image:

SelectCreateto submit the deployment.
SelectCreateto submit the deployment.
Once the deployment completes, navigate to your newly created Public IP Address resource and view the IP Address in theOverview.
Once the deployment completes, navigate to your newly created Public IP Address resource and view the IP Address in theOverview.

Create NAT gateway
Now, let's create the NAT gateway. When you start with theprevious virtual networking tutorial,Function-Netwas the suggested subnet name andMyResourceGroup-vnetwas the suggested virtual network name in that tutorial.
Function-Net
MyResourceGroup-vnet
From your resource group, selectAdd, search the Azure Marketplace forNAT gateway, and selectCreate. Use the settings in the table below the image to populate theBasicstab:SettingSuggested valueSubscriptionYour subscriptionResource groupmyResourceGroup (or name you assigned to your resource group)NAT gateway namemyNatGatewayRegionEast US (or location you assigned to your other resources)Availability ZoneNone
From your resource group, selectAdd, search the Azure Marketplace forNAT gateway, and selectCreate. Use the settings in the table below the image to populate theBasicstab:

SelectNext: Outbound IP. In thePublic IP addressesfield, select the previously created public IP address. LeavePublic IP Prefixesunselected.
SelectNext: Outbound IP. In thePublic IP addressesfield, select the previously created public IP address. LeavePublic IP Prefixesunselected.
SelectNext: Subnet. Select themyResourceGroup-vnetresource in theVirtual networkfield andFunction-Netsubnet.
SelectNext: Subnet. Select themyResourceGroup-vnetresource in theVirtual networkfield andFunction-Netsubnet.

SelectReview + CreatethenCreateto submit the deployment.
SelectReview + CreatethenCreateto submit the deployment.
Once the deployment completes, the NAT gateway is ready to route traffic from your function app subnet to the Internet.
Verify new outbound IPs
Repeatthe steps earlierto run the function again. You should now see the outbound IP address that you configured in the NAT shown in the function output.
Clean up resources
You created resources to complete this tutorial. You'll be billed for these resources, depending on youraccount statusandservice pricing. To avoid incurring extra costs, delete the resources when you know longer need them.
In the Azure portal, go to theResource grouppage.To get to that page from the function app page, select theOverviewtab, and then select the link underResource group.To get to that page from the dashboard, selectResource groups, and then select the resource group that you used for this article.
In the Azure portal, go to theResource grouppage.
To get to that page from the function app page, select theOverviewtab, and then select the link underResource group.

To get to that page from the dashboard, selectResource groups, and then select the resource group that you used for this article.
In theResource grouppage, review the list of included resources, and verify that they're the ones you want to delete.
In theResource grouppage, review the list of included resources, and verify that they're the ones you want to delete.
SelectDelete resource groupand follow the instructions.Deletion might take a couple of minutes. When it's done, a notification appears for a few seconds. You can also select the bell icon at the top of the page to view the notification.
SelectDelete resource groupand follow the instructions.
Deletion might take a couple of minutes. When it's done, a notification appears for a few seconds. You can also select the bell icon at the top of the page to view the notification.
Next steps
Azure Functions networking options
Feedback
Was this page helpful?
Additional resources