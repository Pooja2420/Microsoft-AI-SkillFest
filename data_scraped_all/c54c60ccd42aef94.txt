Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Transactions and optimistic concurrency control
Article
2024-08-14
2 contributors
In this article
APPLIES TO:NoSQL
Database transactions provide a safe and predictable programming model to deal with concurrent changes to the data. Traditional relational databases, like SQL Server, allow you to write the business logic using stored-procedures and/or triggers, send it to the server for execution directly within the database engine. With traditional relational databases, you are required to deal with two different programming languages the (non-transactional) application programming language such as JavaScript, Python, C#, Java, etc. and the transactional programming language (such as T-SQL) that is natively executed by the database.
The database engine in Azure Cosmos DB supports full ACID (Atomicity, Consistency, Isolation, Durability) compliant transactions with snapshot isolation. All the database operations within the scope of a container'slogical partitionare transactionally executed within the database engine that is hosted by the replica of the partition. These operations include both write (updating one or more items within the logical partition) and read operations. The following table illustrates different operations and transaction types:
Multi-item transactions
Azure Cosmos DB allows you to writestored procedures, pre/post triggers, user-defined-functions (UDFs)and merge procedures in JavaScript. Azure Cosmos DB natively supports JavaScript execution inside its database engine. You can register stored procedures, pre/post triggers, user-defined-functions (UDFs) and merge procedures on a container and later execute them transactionally within the Azure Cosmos DB database engine. Writing application logic in JavaScript allows natural expression of control flow, variable scoping, assignment, and integration of exception handling primitives within the database transactions directly in the JavaScript language.
The JavaScript-based stored procedures, triggers, UDFs, and merge procedures are wrapped within an ambient ACID transaction with snapshot isolation across all items within the logical partition. During the course of its execution, if the JavaScript program throws an exception, the entire transaction is aborted and rolled-back. The resulting programming model is simple yet powerful. JavaScript developers get a durable programming model while still using their familiar language constructs and library primitives.
The ability to execute JavaScript directly within the database engine provides performance and transactional execution of database operations against the items of a container. Furthermore, since Azure Cosmos DB database engine natively supports JSON and JavaScript, there is no impedance mismatch between the type systems of an application and the database.
Optimistic concurrency control
Optimistic concurrency control allows you to prevent lost updates and deletes. Concurrent, conflicting operations are subjected to the regular pessimistic locking of the database engine hosted by the logical partition that owns the item. When two concurrent operations attempt to update the latest version of an item within a logical partition, one of them will win and the other will fail. However, if one or two operations attempting to concurrently update the same item had previously read an older value of the item, the database doesnât know if the previously read value by either or both the conflicting operations was indeed the latest value of the item. Fortunately, this situation can be detected with theOptimistic Concurrency Control (OCC)before letting the two operations enter the transaction boundary inside the database engine. OCC protects your data from accidentally overwriting changes that were made by others. It also prevents others from accidentally overwriting your own changes.
Implementing optimistic concurrency control using ETag and HTTP headers
Every item stored in an Azure Cosmos DB container has a system defined_etagproperty. The value of the_etagis automatically generated and updated by the server every time the item is updated._etagcan be used with the client suppliedif-matchrequest header to allow the server to decide whether an item can be conditionally updated. The value of theif-matchheader matches the value of the_etagat the server, the item is then updated. If the value of theif-matchrequest header is no longer current, the server rejects the operation with an "HTTP 412 Precondition failure" response message. The client then can re-fetch the item to acquire the current version of the item on the server or override the version of item in the server with its own_etagvalue for the item. In addition,_etagcan be used with theif-none-matchheader to determine whether a refetch of a resource is needed.
_etag
_etag
_etag
if-match
if-match
_etag
if-match
_etag
_etag
if-none-match
The itemâs_etagvalue changes every time the item is updated. For replace item operations,if-matchmust be explicitly expressed as a part of the request options. For an example, see the sample code inGitHub._etagvalues are implicitly checked for all written items touched by the stored procedure. If any conflict is detected, the stored procedure will roll back the transaction and throw an exception. With this method, either all or no writes within the stored procedure are applied atomically. This is a signal to the application to reapply updates and retry the original client request.
_etag
if-match
_etag
Optimistic concurrency control and global distribution
The concurrent updates of an item are subjected to the OCC by Azure Cosmos DBâs communication protocol layer. For Azure Cosmos DB accounts configured forsingle-region writes, Azure Cosmos DB ensures that the client-side version of the item that you are updating (or deleting) is the same as the version of the item in the Azure Cosmos DB container. This ensures that your writes are protected from being overwritten accidentally by the writes of others and vice versa. In a multi-user environment, the optimistic concurrency control protects you from accidentally deleting or updating wrong version of an item. As such, items are protected against the infamous "lost update" or "lost delete" problems.
In an Azure Cosmos DB account configured withmulti-region writes, data can be committed independently into secondary regions if its_etagmatches that of the data in the local region. Once new data is committed locally in a secondary region, it is then merged in the hub or primary region. If the conflict resolution policy merges the new data into the hub region, this data will then be replicated globally with the new_etag. If the conflict resolution policy rejects the new data, the secondary region will be rolled back to the original data and_etag.
_etag
_etag
_etag
Next steps
Learn more about database transactions and optimistic concurrency control in the following articles:
Working with Azure Cosmos DB databases, containers and items
Consistency levels
Conflict types and resolution policies
Using TransactionalBatch
Stored procedures, triggers, and user-defined functions
Feedback
Was this page helpful?
Additional resources