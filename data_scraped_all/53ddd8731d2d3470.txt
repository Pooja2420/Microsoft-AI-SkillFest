Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Deploy a Node.js web app in Azure
Article
2024-12-02
16 contributors
In this article

Note
Starting June 1, 2024, newly created App Service apps can generate a unique default host name that uses the naming convention<app-name>-<random-hash>.<region>.azurewebsites.net. For example:myapp-ds27dh7271aah175.westus-01.azurewebsites.net. Existing app names remain unchanged.
<app-name>-<random-hash>.<region>.azurewebsites.net
myapp-ds27dh7271aah175.westus-01.azurewebsites.net
For more information, see theblog post about creating a web app with a unique default host name.
In this quickstart, you'll learn how to create and deploy your first Node.js (Express) web app toAzure App Service. App Service supports various versions of Node.js on both Linux and Windows.
This quickstart configures an App Service app in the Free tier and incurs no cost for your Azure subscription.
This video shows you how to deploy a Node.js web app in Azure.
The steps in the video are also described in the following sections.
Set up your initial environment
Have an Azure account with an active subscription.Create an account for free.
InstallNode.js LTS. Run the commandnode --versionto verify that Node.js is installed.
node --version
InstallVisual Studio Code.
Install theAzure App Service extensionfor Visual Studio Code.
Have an Azure account with an active subscription.Create an account for free.
InstallNode.js LTS. Run the commandnode --versionto verify that Node.js is installed.
node --version
InstallAzure CLI, with which you run commands in a shell to create and configure Azure resources.
Have an Azure account with an active subscription.Create an account for free.
InstallNode.js LTS. Run the commandnode --versionto verify that Node.js is installed.
node --version
Have an FTP client (for example,FileZilla), to connect to your app.
Create your Node.js application
In this step, you create a basic Node.js application and ensure it runs on your computer.
Tip
If you have already completed theNode.js tutorial, you can skip ahead toDeploy to Azure.
Create a Node.js application using theExpress Generator, which is installed by default with Node.js and npm.npx express-generator myExpressApp --view ejsIf this is the first time you've installed the generator, npx will ask you to agree to the installation.
Create a Node.js application using theExpress Generator, which is installed by default with Node.js and npm.
npx express-generator myExpressApp --view ejs
npx express-generator myExpressApp --view ejs
If this is the first time you've installed the generator, npx will ask you to agree to the installation.
Change to the application's directory and install the npm packages.cd myExpressApp && npm install
Change to the application's directory and install the npm packages.
cd myExpressApp && npm install
cd myExpressApp && npm install
Update dependencies to the most secure version.npm audit fix --force
Update dependencies to the most secure version.
npm audit fix --force
npm audit fix --force
Start the development server with debug information.DEBUG=myexpressapp:* npm start
Start the development server with debug information.
DEBUG=myexpressapp:* npm start
DEBUG=myexpressapp:* npm start
In a browser, navigate tohttp://localhost:3000. You should see something like this:
In a browser, navigate tohttp://localhost:3000. You should see something like this:
http://localhost:3000

I ran into an issue
Deploy to Azure
Before you continue, ensure that you have all the prerequisites installed and configured.
Note
For your Node.js application to run in Azure, it needs to listen on the port provided by thePORTenvironment variable. In your generated Express app, this environment variable is already used in the startup scriptbin/www. (Search forprocess.env.PORT.)
PORT
process.env.PORT
In the terminal, ensure you're in themyExpressAppdirectory, and then start Visual Studio Code with the following command:code .
In the terminal, ensure you're in themyExpressAppdirectory, and then start Visual Studio Code with the following command:
code .
code .
In Visual Studio Code, in theActivity Bar, select the Azure logo.
In Visual Studio Code, in theActivity Bar, select the Azure logo.
In theApp Serviceexplorer, selectSign in to Azureand follow the instructions.In Visual Studio Code, you should see your Azure email address in the Status Bar and your subscription in theApp Serviceexplorer.
In theApp Serviceexplorer, selectSign in to Azureand follow the instructions.
In Visual Studio Code, you should see your Azure email address in the Status Bar and your subscription in theApp Serviceexplorer.

I ran into an issue
Select themyExpressAppfolder.
Deploy to Linux
Deploy to Windows
Right-clickApp Servicesand selectCreate new Web App. A Linux container is used by default.
Right-clickApp Servicesand selectCreate new Web App. A Linux container is used by default.
Type a globally unique name for your web app and selectEnter. The name must be unique across all of Azure and use only alphanumeric characters ('A-Z', 'a-z', and '0-9') and hyphens ('-'). Seethe note at the the start of this article.
Type a globally unique name for your web app and selectEnter. The name must be unique across all of Azure and use only alphanumeric characters ('A-Z', 'a-z', and '0-9') and hyphens ('-'). Seethe note at the the start of this article.
InSelect a runtime stack, select the Node.js version you want. An LTS version is recommended.
InSelect a runtime stack, select the Node.js version you want. An LTS version is recommended.
InSelect a pricing tier, selectFree (F1)and wait for the resources to be created in Azure.
InSelect a pricing tier, selectFree (F1)and wait for the resources to be created in Azure.
In the popupAlways deploy the workspace "myExpressApp" to <app-name>", selectYes. Doing so ensures that, as long as you're in the same workspace, Visual Studio Code deploys to the same App Service app each time.While Visual Studio Code creates the Azure resources and deploys the code, it showsprogress notifications.
In the popupAlways deploy the workspace "myExpressApp" to <app-name>", selectYes. Doing so ensures that, as long as you're in the same workspace, Visual Studio Code deploys to the same App Service app each time.
While Visual Studio Code creates the Azure resources and deploys the code, it showsprogress notifications.
Once deployment completes, selectBrowse Websitein the notification popup. The browser should display the Express default page.
Once deployment completes, selectBrowse Websitein the notification popup. The browser should display the Express default page.
Right-clickApp Servicesand selectCreate new Web App... Advanced.
Right-clickApp Servicesand selectCreate new Web App... Advanced.
Type a globally unique name for your web app and selectEnter. The name must be unique across all of Azure and use only alphanumeric characters ('A-Z', 'a-z', and '0-9') and hyphens ('-'). Seethe note at start of this article.
Type a globally unique name for your web app and selectEnter. The name must be unique across all of Azure and use only alphanumeric characters ('A-Z', 'a-z', and '0-9') and hyphens ('-'). Seethe note at start of this article.
SelectCreate a new resource group, and then enter a name for the resource group, such asAppServiceQS-rg.
SelectCreate a new resource group, and then enter a name for the resource group, such asAppServiceQS-rg.
Select the Node.js version you want. An LTS version is recommended.
Select the Node.js version you want. An LTS version is recommended.
SelectWindowsfor the operating system.
SelectWindowsfor the operating system.
Select the location you want to serve your app from. For example,West Europe.
Select the location you want to serve your app from. For example,West Europe.
SelectCreate new App Service plan, enter a name for the plan (such asAppServiceQS-plan), and then selectF1 Freefor the pricing tier.
SelectCreate new App Service plan, enter a name for the plan (such asAppServiceQS-plan), and then selectF1 Freefor the pricing tier.
ForSelect an Application Insights resource for your app, selectSkip for nowand wait for the resources to be created in Azure.
ForSelect an Application Insights resource for your app, selectSkip for nowand wait for the resources to be created in Azure.
In the popupAlways deploy the workspace "myExpressApp" to <app-name>", selectYes. Doing so ensures that, as long as you're in the same workspace, Visual Studio Code deploys to the same App Service app each time.While Visual Studio Code creates the Azure resources and deploys the code, it showsprogress notifications.NoteWhen deployment completes, your Azure app doesn't run yet because your project root doesn't have aweb.config. Follow the remaining steps to generate it automatically. For more information, seeYou do not have permission to view this directory or pageinConfigure a Node.js.
In the popupAlways deploy the workspace "myExpressApp" to <app-name>", selectYes. Doing so ensures that, as long as you're in the same workspace, Visual Studio Code deploys to the same App Service app each time.
While Visual Studio Code creates the Azure resources and deploys the code, it showsprogress notifications.
Note
When deployment completes, your Azure app doesn't run yet because your project root doesn't have aweb.config. Follow the remaining steps to generate it automatically. For more information, seeYou do not have permission to view this directory or pageinConfigure a Node.js.
In theApp Serviceexplorer in Visual Studio Code, expand the node for the new app, right-clickApplication Settings, and selectAdd New Setting:
In theApp Serviceexplorer in Visual Studio Code, expand the node for the new app, right-clickApplication Settings, and selectAdd New Setting:

EnterSCM_DO_BUILD_DURING_DEPLOYMENTfor the setting key.
EnterSCM_DO_BUILD_DURING_DEPLOYMENTfor the setting key.
SCM_DO_BUILD_DURING_DEPLOYMENT
Entertruefor the setting value.This app setting enables build automation at deploy time, which automatically detects the start script and generates theweb.configwith it.
Entertruefor the setting value.
true
This app setting enables build automation at deploy time, which automatically detects the start script and generates theweb.configwith it.
In theApp Serviceexplorer, select theDeploy to Web Appicon again, and confirm by selectingDeployagain.
In theApp Serviceexplorer, select theDeploy to Web Appicon again, and confirm by selectingDeployagain.
Wait for deployment to complete, and then selectBrowse Websitein the notification popup. The browser should display the Express default page.
Wait for deployment to complete, and then selectBrowse Websitein the notification popup. The browser should display the Express default page.
I ran into an issue
In the terminal, ensure you're in themyExpressAppdirectory, and deploy the code in your local folder (myExpressApp) using theaz webapp upcommand:
Deploy to Linux
Deploy to Windows
az webapp up --sku F1 --name <app-name>
az webapp up --sku F1 --name <app-name>
az webapp up --sku F1 --name <app-name> --os-type Windows
az webapp up --sku F1 --name <app-name> --os-type Windows
If theazcommand isn't recognized, ensure you have the Azure CLI installed as described inSet up your initial environment.
az
Replace<app_name>with a name that's unique across all of Azure. (Valid characters area-z,0-9, and-.) Seethe note at the start of this article. A good pattern is to use a combination of your company name and an app identifier.
<app_name>
a-z
0-9
-
The--sku F1argument creates the web app on the Free pricing tier, which incurs no cost.
--sku F1
You can optionally include the argument--location <location-name>where<location_name>is an available Azure region. You can retrieve a list of allowable regions for your Azure account by running theaz account list-locationscommand.
--location <location-name>
<location_name>
az account list-locations
The command creates a Linux app for Node.js by default. To create a Windows app instead, use the--os-typeargument.
--os-type
If you see the error, "Could not auto-detect the runtime stack of your app," ensure you're running the command in themyExpressAppdirectory (SeeTroubleshooting auto-detect issues with az webapp up.)
The command might take a few minutes to complete. While running, it provides messages about creating the resource group, the App Service plan, and the app resource, configuring logging, and doing Zip deployment. It then gives the message, "You can launch the app at http://<app-name>.azurewebsites.net", which is the app's URL on Azure. (Seethe note at the start of this article.)
The webapp '<app-name>' doesn't exist
Creating Resource group '<group-name>' ...
Resource group creation complete
Creating AppServicePlan '<app-service-plan-name>' ...
Creating webapp '<app-name>' ...
Configuring default logging for the app, if not already enabled
Creating zip with contents of dir /home/cephas/myExpressApp ...
Getting scm site credentials for zip deployment
Starting zip deployment. This operation can take a while to complete ...
Deployment endpoint responded with status code 202
You can launch the app at http://<app-name>.azurewebsites.net
{
  "URL": "http://<app-name>.azurewebsites.net",
  "appserviceplan": "<app-service-plan-name>",
  "location": "centralus",
  "name": "<app-name>",
  "os": "<os-type>",
  "resourcegroup": "<group-name>",
  "runtime_version": "node|10.14",
  "runtime_version_detected": "0.0",
  "sku": "FREE",
  "src_path": "//home//cephas//myExpressApp"
}
Note
Theaz webapp upcommand does the following actions:
az webapp up
Create a defaultresource group.
Create a defaultresource group.
Create a defaultApp Service plan.
Create a defaultApp Service plan.
Create an appwith the specified name.
Create an appwith the specified name.
Zip deployall files from the current working directory,with build automation enabled.
Zip deployall files from the current working directory,with build automation enabled.
Cache the parameters locally in the.azure/configfile so that you don't need to specify them again when deploying later withaz webapp upor otheraz webappcommands from the project folder. The cached values are used automatically by default.
Cache the parameters locally in the.azure/configfile so that you don't need to specify them again when deploying later withaz webapp upor otheraz webappcommands from the project folder. The cached values are used automatically by default.
az webapp up
az webapp
Sign in to Azure portal
Sign in to theAzure portal.
Create Azure resources
To start creating a Node.js app, browse tohttps://portal.azure.com/#create/Microsoft.WebSite.
To start creating a Node.js app, browse tohttps://portal.azure.com/#create/Microsoft.WebSite.
In theBasicstab, underProject Details, ensure the correct subscription is selected and then selectCreate newto create a resource group. TypemyResourceGroupfor the name.
In theBasicstab, underProject Details, ensure the correct subscription is selected and then selectCreate newto create a resource group. TypemyResourceGroupfor the name.

UnderInstance details, type a globally unique name for your web app and selectCode. (Seethe note at the start of this article.) SelectNode 18 LTSinRuntime stack, anOperating System, and aRegionyou want to serve your app from.
UnderInstance details, type a globally unique name for your web app and selectCode. (Seethe note at the start of this article.) SelectNode 18 LTSinRuntime stack, anOperating System, and aRegionyou want to serve your app from.

UnderApp Service Plan, selectCreate newto create an App Service plan. TypemyAppServicePlanfor the name. To change to the Free tier, selectChange size, selectDev/Testtab, selectF1, and then select theApplybutton at the bottom of the page.
UnderApp Service Plan, selectCreate newto create an App Service plan. TypemyAppServicePlanfor the name. To change to the Free tier, selectChange size, selectDev/Testtab, selectF1, and then select theApplybutton at the bottom of the page.

Select theReview + createbutton at the bottom of the page.
Select theReview + createbutton at the bottom of the page.

After validation runs, select theCreatebutton at the bottom of the page.
After validation runs, select theCreatebutton at the bottom of the page.
After deployment is complete, selectGo to resource.
After deployment is complete, selectGo to resource.

Get FTPS credentials
Azure App Service supportstwo types of credentialsfor FTP/S deployment. These credentials aren't the same as your Azure subscription credentials. In this section, you get the application-scope credentials to use with FileZilla.
From the App Service app page, selectDeployment Centerin the left-hand menu and then select theFTPS credentialstab.
From the App Service app page, selectDeployment Centerin the left-hand menu and then select theFTPS credentialstab.

Open FileZilla and create a new site.
Open FileZilla and create a new site.
From theFTPS credentialstab, copy theFTPS endpoint,Username, andPasswordinto FileZilla.
From theFTPS credentialstab, copy theFTPS endpoint,Username, andPasswordinto FileZilla.

SelectConnectin FileZilla.
SelectConnectin FileZilla.
Deploy files with FTPS
Copy all files and directories files to the/site/wwwroot directoryin Azure.
Copy all files and directories files to the/site/wwwroot directoryin Azure.

Browse to your app's URL to verify the app is running properly.
Browse to your app's URL to verify the app is running properly.
Redeploy updates
You can deploy changes to this app by making edits in Visual Studio Code, saving your files, and then redeploying to your Azure app. For example:
From the sample project, openviews/index.ejsand change<p>Welcome to <%= title %></p>to<p>Welcome to Azure</p>
From the sample project, openviews/index.ejsand change
<p>Welcome to <%= title %></p>
<p>Welcome to <%= title %></p>
to
<p>Welcome to Azure</p>
<p>Welcome to Azure</p>
In theApp Serviceexplorer, select theDeploy to Web Appicon again, and confirm by selectingDeployagain.
In theApp Serviceexplorer, select theDeploy to Web Appicon again, and confirm by selectingDeployagain.
Wait for deployment to complete, then selectBrowse Websitein the notification popup. You should see that theWelcome to Expressmessage has been changed toWelcome to Azure.
Wait for deployment to complete, then selectBrowse Websitein the notification popup. You should see that theWelcome to Expressmessage has been changed toWelcome to Azure.
Welcome to Express
Welcome to Azure
Save your changes, then redeploy the app using theaz webapp upcommand again with no arguments for Linux. Add--os-type Windowsfor Windows:az webapp upThis command uses values that are cached locally in the.azure/configfile, such as the app name, resource group, and App Service plan.
Save your changes, then redeploy the app using theaz webapp upcommand again with no arguments for Linux. Add--os-type Windowsfor Windows:
--os-type Windows
az webapp up
az webapp up
This command uses values that are cached locally in the.azure/configfile, such as the app name, resource group, and App Service plan.
Once deployment is complete, refresh the webpagehttp://<app-name>.azurewebsites.net. (Seethe note at the start of this article.) You should see that theWelcome to Expressmessage has been changed toWelcome to Azure.
Once deployment is complete, refresh the webpagehttp://<app-name>.azurewebsites.net. (Seethe note at the start of this article.) You should see that theWelcome to Expressmessage has been changed toWelcome to Azure.
http://<app-name>.azurewebsites.net
Welcome to Express
Welcome to Azure
Save your changes, then redeploy the app using your FTP client.
Save your changes, then redeploy the app using your FTP client.
Once deployment is complete, refresh the webpagehttp://<app-name>.azurewebsites.net. (Seenote the at the start of this article.) You should see that theWelcome to Expressmessage has been changed toWelcome to Azure.
Once deployment is complete, refresh the webpagehttp://<app-name>.azurewebsites.net. (Seenote the at the start of this article.) You should see that theWelcome to Expressmessage has been changed toWelcome to Azure.
http://<app-name>.azurewebsites.net
Welcome to Express
Welcome to Azure
Stream logs
You can stream log output (calls toconsole.log()) from the Azure app directly in the Visual Studio Code output window.
console.log()
In theApp Serviceexplorer, right-click the app node and selectStart Streaming Logs.
In theApp Serviceexplorer, right-click the app node and selectStart Streaming Logs.

If asked to restart the app, selectYes. Once the app is restarted, the Visual Studio Code output window opens with a connection to the log stream.
If asked to restart the app, selectYes. Once the app is restarted, the Visual Studio Code output window opens with a connection to the log stream.
After a few seconds, the output window shows a message indicating that you're connected to the log-streaming service. You can generate more output activity by refreshing the page in the browser.Connecting to log stream...
 2020-03-04T19:29:44  Welcome, you are now connected to log-streaming service. The default timeout is 2 hours.
 Change the timeout with the App Setting SCM_LOGSTREAM_TIMEOUT (in seconds).
After a few seconds, the output window shows a message indicating that you're connected to the log-streaming service. You can generate more output activity by refreshing the page in the browser.
Connecting to log stream...
 2020-03-04T19:29:44  Welcome, you are now connected to log-streaming service. The default timeout is 2 hours.
 Change the timeout with the App Setting SCM_LOGSTREAM_TIMEOUT (in seconds).
I ran into an issue
You can access the console logs generated from inside the app and the container in which it runs. Logs include any output generated by calls toconsole.log().
console.log()
To stream logs, run theaz webapp log tailcommand:
az webapp log tail
az webapp log tail
The command uses the resource group name cached in the.azure/configfile.
You can also include the--logsparameter with theaz webapp upcommand to automatically open the log stream on deployment.
--logs
Refresh the app in the browser to generate console logs, which include messages describing HTTP requests to the app. If no output appears immediately, try again in 30 seconds.
To stop log streaming at any time, selectCtrl+Cin the terminal.
You can access the console logs generated from inside the app and the container in which it runs. You can stream log output (calls toconsole.log()) from the Node.js app directly in the Azure portal.
console.log()
In the sameApp Servicepage for your app, use the left menu to scroll to theMonitoringsection and selectLog stream.
In the sameApp Servicepage for your app, use the left menu to scroll to theMonitoringsection and selectLog stream.

After a few seconds, the output window shows a message indicating that you're connected to the log-streaming service. You can generate more output activity by refreshing the page in the browser.Connecting...
 2021-10-26T21:04:14  Welcome, you are now connected to log-streaming service.
 Starting Log Tail -n 10 of existing logs ----
 /appsvctmp/volatile/logs/runtime/81b1b83b27ea1c3d598a1cdec28c71c4074ce66c735d0be57f15a8d07cb3178e.log
 2021-10-26T21:04:08.614384810Z: [INFO]
 2021-10-26T21:04:08.614393710Z: [INFO]  # Enter the source directory to make sure the script runs where the user expects
 2021-10-26T21:04:08.614399010Z: [INFO]  cd "/home/site/wwwroot"
 2021-10-26T21:04:08.614403210Z: [INFO]
 2021-10-26T21:04:08.614407110Z: [INFO]  export NODE_PATH=/usr/local/lib/node_modules:$NODE_PATH
 2021-10-26T21:04:08.614411210Z: [INFO]  if [ -z "$PORT" ]; then
 2021-10-26T21:04:08.614415310Z: [INFO]          export PORT=8080
 2021-10-26T21:04:08.614419610Z: [INFO]  fi
 2021-10-26T21:04:08.614423411Z: [INFO]
 2021-10-26T21:04:08.614427211Z: [INFO]  node /opt/startup/default-static-site.js
 Ending Log Tail of existing logs ---
After a few seconds, the output window shows a message indicating that you're connected to the log-streaming service. You can generate more output activity by refreshing the page in the browser.
Connecting...
 2021-10-26T21:04:14  Welcome, you are now connected to log-streaming service.
 Starting Log Tail -n 10 of existing logs ----
 /appsvctmp/volatile/logs/runtime/81b1b83b27ea1c3d598a1cdec28c71c4074ce66c735d0be57f15a8d07cb3178e.log
 2021-10-26T21:04:08.614384810Z: [INFO]
 2021-10-26T21:04:08.614393710Z: [INFO]  # Enter the source directory to make sure the script runs where the user expects
 2021-10-26T21:04:08.614399010Z: [INFO]  cd "/home/site/wwwroot"
 2021-10-26T21:04:08.614403210Z: [INFO]
 2021-10-26T21:04:08.614407110Z: [INFO]  export NODE_PATH=/usr/local/lib/node_modules:$NODE_PATH
 2021-10-26T21:04:08.614411210Z: [INFO]  if [ -z "$PORT" ]; then
 2021-10-26T21:04:08.614415310Z: [INFO]          export PORT=8080
 2021-10-26T21:04:08.614419610Z: [INFO]  fi
 2021-10-26T21:04:08.614423411Z: [INFO]
 2021-10-26T21:04:08.614427211Z: [INFO]  node /opt/startup/default-static-site.js
 Ending Log Tail of existing logs ---
Clean up resources
In the preceding steps, you created Azure resources in a resource group. The steps in this quickstart put all the resources in this resource group. To clean up, you just need to remove the resource group.
In the Azure extension of Visual Studio, expand theResource Groupsexplorer.
In the Azure extension of Visual Studio, expand theResource Groupsexplorer.
Expand the subscription, right-click the resource group you created earlier, and selectDelete.
Expand the subscription, right-click the resource group you created earlier, and selectDelete.

When prompted, confirm your deletion by entering the name of the resource group you're deleting. Once you confirm, the resource group is deleted, and you see anotificationwhen it's done.
When prompted, confirm your deletion by entering the name of the resource group you're deleting. Once you confirm, the resource group is deleted, and you see anotificationwhen it's done.
I ran into an issue
In the preceding steps, you created Azure resources in a resource group. The resource group has a name like "appsvc_rg_Linux_CentralUS," depending on your location.
If you don't expect to need these resources in the future, delete the resource group by running the following command:
az group delete --no-wait
az group delete --no-wait
The command uses the resource group name cached in the.azure/configfile.
The--no-waitargument allows the command to return before the operation is complete.
--no-wait
You can delete the resource group, App service, and all related resources when they're no longer needed.
From your App Serviceoverviewpage, select theresource groupyou created in theCreate Azure resourcesstep.
From your App Serviceoverviewpage, select theresource groupyou created in theCreate Azure resourcesstep.

From theresource grouppage, selectDelete resource group. Confirm the name of the resource group to finish deleting the resources.
From theresource grouppage, selectDelete resource group. Confirm the name of the resource group to finish deleting the resources.

Next steps
Congratulations, you've successfully completed this quickstart!
Deploy a Node.js + MongoDB web app to Azure
Configure a Node.js app
Secure your Azure App Service app with a custom domain and a managed certificate
Check out the other Azure extensions.
Azure Cosmos DB
Azure Functions
Docker Tools
Azure CLI Tools
Azure Resource Manager Tools
Or get them all by installing theNode Pack for Azureextension pack.
Feedback
Was this page helpful?
Additional resources