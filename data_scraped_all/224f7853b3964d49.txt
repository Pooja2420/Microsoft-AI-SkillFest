Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
schedules.cron definition
Article
2025-03-24
1 contributor
In this article
A scheduled trigger specifies a schedule on which branches are built.
schedules:
- cron: string # Required as first property. Cron syntax defining a schedule in UTC time.
  displayName: string # Optional friendly name given to a specific schedule.
  branches: # Branch names to include or exclude for triggering a run.
    include: [ string ] # List of items to include.
    exclude: [ string ] # List of items to exclude.
  batch: boolean # Whether to run the pipeline if the previously scheduled run is in-progress; the default is false.
  always: boolean # Whether to always run the pipeline or only if there have been source code or pipeline settings changes since the last successful scheduled run. The default is false.
schedules:
- cron: string # Required as first property. Cron syntax defining a schedule in UTC time.
  displayName: string # Optional friendly name given to a specific schedule.
  branches: # Branch names to include or exclude for triggering a run.
    include: [ string ] # List of items to include.
    exclude: [ string ] # List of items to exclude.
  batch: boolean # Whether to run the pipeline if the previously scheduled run is in-progress; the default is false.
  always: boolean # Whether to always run the pipeline or only if there have been source code or pipeline settings changes since the last successful scheduled run. The default is false.
schedules:
- cron: string # Required as first property. Cron syntax defining a schedule in UTC time.
  displayName: string # Optional friendly name given to a specific schedule.
  branches: # Branch names to include or exclude for triggering a run.
    include: [ string ] # List of items to include.
    exclude: [ string ] # List of items to exclude.
  always: boolean # Whether to always run the pipeline or only if there have been source code or pipeline settings changes since the last successful scheduled run. The default is false.
schedules:
- cron: string # Required as first property. Cron syntax defining a schedule in UTC time.
  displayName: string # Optional friendly name given to a specific schedule.
  branches: # Branch names to include or exclude for triggering a run.
    include: [ string ] # List of items to include.
    exclude: [ string ] # List of items to exclude.
  always: boolean # Whether to always run the pipeline or only if there have been source code or pipeline settings changes since the last successful scheduled run. The default is false.
Definitions that reference this definition:schedules
Properties
cronstring. Required as first property.Cron syntax defining a schedule in UTC time.
cron
displayNamestring.Optional friendly name given to a specific schedule.
displayName
branchesincludeExcludeFilters.Branch names to include or exclude for triggering a run.
branches
batchboolean.Thebatchproperty configures whether to run the pipeline if the previously scheduled run is in-progress. Whenbatchistrue, a new pipeline run won't start due to the schedule if a previous pipeline run is still in-progress. The default isfalse.
batch
batch
batch
true
false
Thebatchproperty is affected by the setting of thealwaysproperty. Whenalwaysistrue, the pipeline runs according to the cron schedule, even whenbatchistrueand there is an in-progress run.
batch
always
always
true
batch
true
false
false
false
true
true
false
true
true
alwaysboolean.Whether to always run the pipeline or only if there have been source code changes since the last successful scheduled run; the default is false.
always
Remarks
If you specify no scheduled trigger, no scheduled builds occur.
Note
If you specify anexcludeclause without anincludeclause forbranches, it is equivalent to specifying*in theincludeclause.
exclude
include
branches
*
include
Important
Scheduled triggers defined using the pipeline settings UI take precedence over YAML scheduled triggers.
If your YAML pipeline has both YAML scheduled triggers and UI defined scheduled triggers,
only the UI defined scheduled triggers are run.
To run the YAML defined scheduled triggers in your YAML pipeline,
you must remove the scheduled triggers defined in the pipeline settings UI.
Once all UI scheduled triggers are removed, a push must be made in order for the YAML
scheduled triggers to start being evaluated.
To delete UI scheduled triggers from a YAML pipeline, seeUI settings override YAML scheduled triggers.
Build.CronSchedule.DisplayName variable
When a pipeline is running due to a cron scheduled trigger, the pre-definedBuild.CronSchedule.DisplayNamevariable contains thedisplayNameof the cron schedule that triggered the pipeline run.
Build.CronSchedule.DisplayName
displayName
Your YAML pipeline may contain multiple cron schedules, and you may want your pipeline to run different stages or jobs based on which cron schedule runs. For example, you have a nightly build and a weekly build, and you want to run a certain stage only during the nightly build. You can use theBuild.CronSchedule.DisplayNamevariable in a job or stage condition to determine whether to run that job or stage.
Build.CronSchedule.DisplayName
- stage: stage1
  # Run this stage only when the pipeline is triggered by the 
  # "Daily midnight build" cron schedule
  condition: eq(variables['Build.CronSchedule.DisplayName'], 'Daily midnight build')
- stage: stage1
  # Run this stage only when the pipeline is triggered by the 
  # "Daily midnight build" cron schedule
  condition: eq(variables['Build.CronSchedule.DisplayName'], 'Daily midnight build')
For more examples, see the followingExamplessection.
Examples
The following example defines two schedules.
The first schedule,Daily midnight build, runs a pipeline at midnight every day only if the code has changed since the last successful scheduled run.
It runs the pipeline formainand allreleases/*branches, except for those branches underreleases/ancient/*.
main
releases/*
releases/ancient/*
The second schedule,Weekly Sunday build, runs a pipeline at noon on Sundays for allreleases/*branches.
It does so regardless of whether the code has changed since the last run.
releases/*
schedules:
- cron: '0 0 * * *'
  displayName: Daily midnight build
  branches:
    include:
    - main
    - releases/*
    exclude:
    - releases/ancient/*
- cron: '0 12 * * 0'
  displayName: Weekly Sunday build
  branches:
    include:
    - releases/*
  always: true
schedules:
- cron: '0 0 * * *'
  displayName: Daily midnight build
  branches:
    include:
    - main
    - releases/*
    exclude:
    - releases/ancient/*
- cron: '0 12 * * 0'
  displayName: Weekly Sunday build
  branches:
    include:
    - releases/*
  always: true
To conditionally run a stage or job based on whether it was scheduled by a scheduled trigger, use theBuild.CronSchedule.DisplayNamevariable in a condition. In this example,stage1only runs if the pipeline was triggered by theDaily midnight buildschedule, andjob3only runs if the pipeline was triggered by theWeekly Sunday buildschedule.
Build.CronSchedule.DisplayName
stage1
Daily midnight build
job3
Weekly Sunday build
stages:
- stage: stage1
  # Run this stage only when the pipeline is triggered by the 
  # "Daily midnight build" cron schedule
  condition: eq(variables['Build.CronSchedule.DisplayName'], 'Daily midnight build')
  jobs:
  - job: job1
    steps:
    - script: echo Hello from Stage 1 Job 1

- stage: stage2
  dependsOn: [] # Indicate this stage does not depend on the previous stage
  jobs:
  - job: job2
    steps:
    - script: echo Hello from Stage 2 Job 2
  - job: job3 
    # Run this job only when the pipeline is triggered by the 
    # "Weekly Sunday build" cron schedule
    condition: eq(variables['Build.CronSchedule.DisplayName'], 'Weekly Sunday build')
    steps:
    - script: echo Hello from Stage 2 Job 3
stages:
- stage: stage1
  # Run this stage only when the pipeline is triggered by the 
  # "Daily midnight build" cron schedule
  condition: eq(variables['Build.CronSchedule.DisplayName'], 'Daily midnight build')
  jobs:
  - job: job1
    steps:
    - script: echo Hello from Stage 1 Job 1

- stage: stage2
  dependsOn: [] # Indicate this stage does not depend on the previous stage
  jobs:
  - job: job2
    steps:
    - script: echo Hello from Stage 2 Job 2
  - job: job3 
    # Run this job only when the pipeline is triggered by the 
    # "Weekly Sunday build" cron schedule
    condition: eq(variables['Build.CronSchedule.DisplayName'], 'Weekly Sunday build')
    steps:
    - script: echo Hello from Stage 2 Job 3
See also
Learn more aboutscheduled triggers.
Learn more abouttriggersin general and how to specify them.
Feedback
Was this page helpful?
Additional resources