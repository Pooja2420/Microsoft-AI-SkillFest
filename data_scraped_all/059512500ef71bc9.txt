Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Using Application Health extension with Virtual Machine Scale Sets
Article
2025-04-01
17 contributors
In this article
Monitoring your application health is an important signal for managing and upgrading your deployment. Azure Virtual Machine Scale Sets provide support forRolling UpgradesincludingAutomatic OS-Image UpgradesandAutomatic VM Guest Patching, which rely on health monitoring of the individual instances to upgrade your deployment. You can also use Application Health Extension to monitor the application health of each instance in your scale set and perform instance repairs usingAutomatic Instance Repairs.
This article describes how you can use the two types of Application Health extension,Binary Health StatesorRich Health States, to monitor the health of your applications deployed on Virtual Machine Scale Sets.
Prerequisites
This article assumes that you're familiar with:
Azure virtual machineextensions
ModifyingVirtual Machine Scale Sets
Caution
Application Health Extension expects to receive a consistent probe response at the configured porttcpor request pathhttp/httpsin order to label a VM asHealthy. If no application is running on the VM, or you're unable to configure a probe response, your VM is going to show up asUnhealthy(Binary Health States) orUnknown(Rich Health States). Seeapplication health samplesfor examples of health probe responses being emitted to a local endpoint.
tcp
http/https
Note
Only one source of health monitoring can be used for a Virtual Machine Scale Set, either an Application Health Extension or a Health Probe. If you have both options enabled, you will need to remove one before using orchestration services like Instance Repairs or Automatic OS Upgrades.
When to use the Application Health extension
The Application Health Extension is deployed inside a Virtual Machine Scale Set instance and reports on application health from inside the scale set instance. The extension probes on a local application endpoint and will update the health status based on TCP/HTTP(S) responses received from the application. This health status is used by Azure to initiate repairs on unhealthy instances and to determine if an instance is eligible for upgrade operations.
The extension reports health from within a VM and can be used in situations where an external probe such as theAzure Load Balancer health probescanât be used.
Binary versus Rich Health States
Application Health Extensions has two options available:Binary Health StatesandRich Health States. The following table highlights some key differences between the two options. See the end of this section for general recommendations.
1TheUnknownstate is unavailable on TCP protocol.2Only applicable for HTTP/HTTPS protocol. TCP protocol will follow the same process of identifyingUnhealthyinstances as in Binary Health States.
In general, you should useRich Health Statesif:
You send health signals through HTTP/HTTPS protocol and can submit health information through the probe response body
You would like to use custom logic to identify and mark unhealthy instances
You would like to set aninitializinggrace period for newly created instances, so that they settle into a steady Health State before making the instance eligible for rolling upgrade or instance repairs
You're interested in having more control over the ordering and update process with rolling upgrades, by emittingcustom metrics
You should useBinary Health Statesif:
You're not interested in configuring custom logic to identify and flag an unhealthy instance
You don't require aninitializinggrace period for newly created instances
You don't need to usecustom metricswhen performing a rolling upgrade on your VMs
Rich Health States
Rich Health States reporting contains four Health States,Initializing,Healthy,Unhealthy, andUnknown. The following tables provide a brief description for how each Health State is configured.
HTTP/HTTPS Protocol
{"ApplicationHealthState": "Healthy"}
{"ApplicationHealthState": "Unhealthy"}
ApplicationHealthState
TCP Protocol
Initializing state
This state only applies to Rich Health States. TheInitializingstate only occurs once at extension start time and can be configured by the extension settingsgracePeriodandnumberOfProbes.
gracePeriod
numberOfProbes
At extension startup, the application health will remain in theInitializingstate until one of two scenarios occurs:
The same Health State (HealthyorUnhealthy) is reported a consecutive number of times as configured throughnumberOfProbes
ThegracePeriodexpires
gracePeriod
If the same Health State (HealthyorUnhealthy) is reported consecutively, the application health will transition out of theInitializingstate and into the reported Health State (HealthyorUnhealthy).
IfnumberOfProbes= 3, that would mean:
numberOfProbes
To transition fromInitializingtoHealthystate: Application health extension must receive three consecutiveHealthysignals via HTTP/HTTPS or TCP protocol
To transition fromInitializingtoUnhealthystate: Application health extension must receive three consecutiveUnhealthysignals via HTTP/HTTPS or TCP protocol
If thegracePeriodexpires before a consecutive health status is reported by the application, the instance health will be determined as follows:
gracePeriod
HTTP/HTTPS protocol: The application health will transition fromInitializingtoUnknown
TCP protocol: The application health will transition fromInitializingtoUnhealthy
Unknown state
This state only applies to Rich Health States. TheUnknownstate is only reported for "http" or "https" probes and occurs in the following scenarios:
When a non-2xx status code is returned by the application
When the probe request times out
When the application endpoint is unreachable or incorrectly configured
When a missing or invalid value is provided forApplicationHealthStatein the response body
ApplicationHealthState
When the grace period expires
An instance in anUnknownstate is treated similar to anUnhealthyinstance. If enabled, instance repairs will be carried out on anUnknowninstance while rolling upgrades will be paused until the instance falls back into aHealthystate.
The following table shows the health status interpretation forRolling UpgradesandInstance Repairs:
Extension schema for Rich Health States
The following JSON shows the schema for the Rich Health States extension. The extension requires at a minimum either an "http" or "https" request with an associated port or request path respectively. TCP probes are also supported, but won't be able to set theApplicationHealthStatethrough the probe response body and won't have access to theUnknownstate.
ApplicationHealthState
{
  "extensionProfile" : {
     "extensions" : [
      {
        "name": "HealthExtension",
        "properties": {
          "publisher": "Microsoft.ManagedServices",
          "type": "<ApplicationHealthLinux or ApplicationHealthWindows>",
          "autoUpgradeMinorVersion": true,
          "typeHandlerVersion": "2.0",
          "settings": {
            "protocol": "<protocol>",
            "port": <port>,
            "requestPath": "</requestPath>",
            "intervalInSeconds": 5,
            "numberOfProbes": 1,
            "gracePeriod": 600
          }
        }
      }
    ]
  }
}
{
  "extensionProfile" : {
     "extensions" : [
      {
        "name": "HealthExtension",
        "properties": {
          "publisher": "Microsoft.ManagedServices",
          "type": "<ApplicationHealthLinux or ApplicationHealthWindows>",
          "autoUpgradeMinorVersion": true,
          "typeHandlerVersion": "2.0",
          "settings": {
            "protocol": "<protocol>",
            "port": <port>,
            "requestPath": "</requestPath>",
            "intervalInSeconds": 5,
            "numberOfProbes": 1,
            "gracePeriod": 600
          }
        }
      }
    ]
  }
}
Property values
2018-10-01
Microsoft.ManagedServices
ApplicationHealthLinux
ApplicationHealthWindows
2.0
Settings
http
https
tcp
http
https
tcp
http
https
tcp
intervalInSeconds
numberOfProbes
Binary Health States
Binary Health State reporting contains two Health States,HealthyandUnhealthy. The following tables provide a brief description for how the Health States are configured.
HTTP/HTTPS Protocol
TCP Protocol
Some scenarios that may result in anUnhealthystate include:
When the application endpoint returns a non-200 status code
When there's no application endpoint configured inside the virtual machine instances to provide application health status
When the application endpoint is incorrectly configured
When the application endpoint isn't reachable
Extension schema for Binary Health States
The following JSON shows the schema for the Application Health extension. The extension requires at a minimum either a "tcp", "http" or "https" request with an associated port or request path respectively.
{
  "extensionProfile" : {
     "extensions" : [
      {
        "name": "HealthExtension",
        "properties": {
          "publisher": "Microsoft.ManagedServices",
          "type": "<ApplicationHealthLinux or ApplicationHealthWindows>",
          "autoUpgradeMinorVersion": true,
          "typeHandlerVersion": "1.0",
          "settings": {
            "protocol": "<protocol>",
            "port": <port>,
            "requestPath": "</requestPath>",
            "intervalInSeconds": 5,
            "numberOfProbes": 1
          }
        }
      }
    ]
  }
}
{
  "extensionProfile" : {
     "extensions" : [
      {
        "name": "HealthExtension",
        "properties": {
          "publisher": "Microsoft.ManagedServices",
          "type": "<ApplicationHealthLinux or ApplicationHealthWindows>",
          "autoUpgradeMinorVersion": true,
          "typeHandlerVersion": "1.0",
          "settings": {
            "protocol": "<protocol>",
            "port": <port>,
            "requestPath": "</requestPath>",
            "intervalInSeconds": 5,
            "numberOfProbes": 1
          }
        }
      }
    ]
  }
}
Property values
2018-10-01
Microsoft.ManagedServices
ApplicationHealthLinux
ApplicationHealthWindows
1.0
Settings
http
https
tcp
http
https
tcp
http
https
tcp
Deploy the Application Health extension
There are multiple ways of deploying the Application Health extension to your scale sets as detailed in the following examples.
Rich Health States
REST API
Azure PowerShell
Azure CLI 2.0
The following example adds theApplication Health - Rich Statesextension (with namemyHealthExtension) to theextensionProfilein the scale set model of a Windows-based scale set.
myHealthExtension
extensionProfile
You can also use this example to upgrade an existing extension from Binary to Rich Health States by making a PATCH call instead of a PUT.
PUT on `/subscriptions/subscription_id/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/myScaleSet/extensions/myHealthExtension?api-version=2018-10-01`
PUT on `/subscriptions/subscription_id/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/myScaleSet/extensions/myHealthExtension?api-version=2018-10-01`
{
  "name": "myHealthExtension",
  "location": "<location>",
  "properties": {
    "publisher": "Microsoft.ManagedServices",
    "type": "ApplicationHealthWindows",
    "autoUpgradeMinorVersion": true,
    "typeHandlerVersion": "2.0",
    "settings": {
      "protocol": "<protocol>",
      "port": <port>,
      "requestPath": "</requestPath>",
      "intervalInSeconds": <intervalInSeconds>,
      "numberOfProbes": <numberOfProbes>,
      "gracePeriod": <gracePeriod>
    }
  }
}
{
  "name": "myHealthExtension",
  "location": "<location>",
  "properties": {
    "publisher": "Microsoft.ManagedServices",
    "type": "ApplicationHealthWindows",
    "autoUpgradeMinorVersion": true,
    "typeHandlerVersion": "2.0",
    "settings": {
      "protocol": "<protocol>",
      "port": <port>,
      "requestPath": "</requestPath>",
      "intervalInSeconds": <intervalInSeconds>,
      "numberOfProbes": <numberOfProbes>,
      "gracePeriod": <gracePeriod>
    }
  }
}
UsePATCHto edit an already deployed extension.
PATCH
Upgrade the VMs to install the extension.
POST on `/subscriptions/<subscriptionId>/resourceGroups/<myResourceGroup>/providers/Microsoft.Compute/virtualMachineScaleSets/< myScaleSet >/manualupgrade?api-version=2022-08-01`
POST on `/subscriptions/<subscriptionId>/resourceGroups/<myResourceGroup>/providers/Microsoft.Compute/virtualMachineScaleSets/< myScaleSet >/manualupgrade?api-version=2022-08-01`
{
  "instanceIds": ["*"]
}
{
  "instanceIds": ["*"]
}
Use theAdd-AzVmssExtensioncmdlet to add the Application Health extension to the scale set model definition.
Update extension functionality is currently not available on PowerShell. To switch between Binary and Rich Health States, you can update the extension version using Azure CLI or REST API commands.
The following example adds theApplication Health - Rich Statesextension to theextensionProfilein the scale set model of a Windows-based scale set. The example uses the new Az PowerShell module.
extensionProfile
# Define the scale set variables
$vmScaleSetName = "myVMScaleSet"
$vmScaleSetResourceGroup = "myVMScaleSetResourceGroup"

# Define the Application Health extension properties
$publicConfig = @{"protocol" = "http"; "port" = 80; "requestPath" = "/healthEndpoint"; "gracePeriod" = 600};
$extensionName = "myHealthExtension"
$extensionType = "ApplicationHealthWindows"
$publisher = "Microsoft.ManagedServices"

# Get the scale set object
$vmScaleSet = Get-AzVmss `
  -ResourceGroupName $vmScaleSetResourceGroup `
  -VMScaleSetName $vmScaleSetName

# Add the Application Health extension to the scale set model
Add-AzVmssExtension -VirtualMachineScaleSet $vmScaleSet `
  -Name $extensionName `
  -Publisher $publisher `
  -Setting $publicConfig `
  -Type $extensionType `
  -TypeHandlerVersion "2.0" `
  -AutoUpgradeMinorVersion $True

# Update the scale set
Update-AzVmss -ResourceGroupName $vmScaleSetResourceGroup `
  -Name $vmScaleSetName `
  -VirtualMachineScaleSet $vmScaleSet
  
# Upgrade instances to install the extension
Update-AzVmssInstance -ResourceGroupName $vmScaleSetResourceGroup `
  -VMScaleSetName $vmScaleSetName `
  -InstanceId '*'
# Define the scale set variables
$vmScaleSetName = "myVMScaleSet"
$vmScaleSetResourceGroup = "myVMScaleSetResourceGroup"

# Define the Application Health extension properties
$publicConfig = @{"protocol" = "http"; "port" = 80; "requestPath" = "/healthEndpoint"; "gracePeriod" = 600};
$extensionName = "myHealthExtension"
$extensionType = "ApplicationHealthWindows"
$publisher = "Microsoft.ManagedServices"

# Get the scale set object
$vmScaleSet = Get-AzVmss `
  -ResourceGroupName $vmScaleSetResourceGroup `
  -VMScaleSetName $vmScaleSetName

# Add the Application Health extension to the scale set model
Add-AzVmssExtension -VirtualMachineScaleSet $vmScaleSet `
  -Name $extensionName `
  -Publisher $publisher `
  -Setting $publicConfig `
  -Type $extensionType `
  -TypeHandlerVersion "2.0" `
  -AutoUpgradeMinorVersion $True

# Update the scale set
Update-AzVmss -ResourceGroupName $vmScaleSetResourceGroup `
  -Name $vmScaleSetName `
  -VirtualMachineScaleSet $vmScaleSet
  
# Upgrade instances to install the extension
Update-AzVmssInstance -ResourceGroupName $vmScaleSetResourceGroup `
  -VMScaleSetName $vmScaleSetName `
  -InstanceId '*'
Useaz vmss extension setto add the Application Health extension to the scale set model definition.
The following example adds theApplication Health - Rich Statesextension to the scale set model of a Linux-based scale set.
You can also use this example to upgrade an existing extension from Binary to Rich Health States.
az vmss extension set \
  --name ApplicationHealthLinux \
  --publisher Microsoft.ManagedServices \
  --version 2.0 \
  --resource-group <myVMScaleSetResourceGroup> \
  --vmss-name <myVMScaleSet> \
  --settings ./extension.json
az vmss extension set \
  --name ApplicationHealthLinux \
  --publisher Microsoft.ManagedServices \
  --version 2.0 \
  --resource-group <myVMScaleSetResourceGroup> \
  --vmss-name <myVMScaleSet> \
  --settings ./extension.json
The extension.json file content.
{
  "protocol": "<protocol>",
  "port": <port>,
  "requestPath": "</requestPath>",
  "gracePeriod": <healthExtensionGracePeriod>
}
{
  "protocol": "<protocol>",
  "port": <port>,
  "requestPath": "</requestPath>",
  "gracePeriod": <healthExtensionGracePeriod>
}
Upgrade the VMs to install the extension.
az vmss update-instances \
  --resource-group <myVMScaleSetResourceGroup> \
  --name <myVMScaleSet> \
  --instance-ids "*"
az vmss update-instances \
  --resource-group <myVMScaleSetResourceGroup> \
  --name <myVMScaleSet> \
  --instance-ids "*"
Binary Health States
REST API
Azure PowerShell
Azure CLI 2.0
The following example adds the Application Health extension (with name myHealthExtension) to the extensionProfile in the scale set model of a Windows-based scale set.
You can also use this example to change an existing extension from Rich Health State to Binary Health by making a PATCH call instead of a PUT.
PUT on `/subscriptions/subscription_id/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/myScaleSet/extensions/myHealthExtension?api-version=2018-10-01`
PUT on `/subscriptions/subscription_id/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachineScaleSets/myScaleSet/extensions/myHealthExtension?api-version=2018-10-01`
{
  "name": "myHealthExtension",
  "location": "<location>", 
  "properties": {
    "publisher": "Microsoft.ManagedServices",
    "type": "ApplicationHealthWindows",
    "autoUpgradeMinorVersion": true,
    "typeHandlerVersion": "1.0",
    "settings": {
      "protocol": "<protocol>",
      "port": <port>,
      "requestPath": "</requestPath>"
    }
  }
}
{
  "name": "myHealthExtension",
  "location": "<location>", 
  "properties": {
    "publisher": "Microsoft.ManagedServices",
    "type": "ApplicationHealthWindows",
    "autoUpgradeMinorVersion": true,
    "typeHandlerVersion": "1.0",
    "settings": {
      "protocol": "<protocol>",
      "port": <port>,
      "requestPath": "</requestPath>"
    }
  }
}
UsePATCHto edit an already deployed extension.
PATCH
Upgrade the VMs to install the extension.
POST on `/subscriptions/<subscriptionId>/resourceGroups/<myResourceGroup>/providers/Microsoft.Compute/virtualMachineScaleSets/< myScaleSet >/manualupgrade?api-version=2022-08-01`
POST on `/subscriptions/<subscriptionId>/resourceGroups/<myResourceGroup>/providers/Microsoft.Compute/virtualMachineScaleSets/< myScaleSet >/manualupgrade?api-version=2022-08-01`
{
  "instanceIds": ["*"]
}
{
  "instanceIds": ["*"]
}
Use theAdd-AzVmssExtensioncmdlet to add the Application Health extension to the scale set model definition.
Update extension functionality is currently not available on PowerShell. To switch between Binary and Rich Health States, you can update the extension version using Azure CLI or REST API commands.
The following example adds the Application Health extension to theextensionProfilein the scale set model of a Windows-based scale set. The example uses the new Az PowerShell module.
extensionProfile
# Define the scale set variables
$vmScaleSetName = "myVMScaleSet"
$vmScaleSetResourceGroup = "myVMScaleSetResourceGroup"

# Define the Application Health extension properties
$publicConfig = @{"protocol" = "http"; "port" = 80; "requestPath" = "/healthEndpoint"};
$extensionName = "myHealthExtension"
$extensionType = "ApplicationHealthWindows"
$publisher = "Microsoft.ManagedServices"

# Get the scale set object
$vmScaleSet = Get-AzVmss `
  -ResourceGroupName $vmScaleSetResourceGroup `
  -VMScaleSetName $vmScaleSetName

# Add the Application Health extension to the scale set model
Add-AzVmssExtension -VirtualMachineScaleSet $vmScaleSet `
  -Name $extensionName `
  -Publisher $publisher `
  -Setting $publicConfig `
  -Type $extensionType `
  -TypeHandlerVersion "1.0" `
  -AutoUpgradeMinorVersion $True

# Update the scale set
Update-AzVmss -ResourceGroupName $vmScaleSetResourceGroup `
  -Name $vmScaleSetName `
  -VirtualMachineScaleSet $vmScaleSet
  
# Upgrade instances to install the extension
Update-AzVmssInstance -ResourceGroupName $vmScaleSetResourceGroup `
  -VMScaleSetName $vmScaleSetName `
  -InstanceId '*'
# Define the scale set variables
$vmScaleSetName = "myVMScaleSet"
$vmScaleSetResourceGroup = "myVMScaleSetResourceGroup"

# Define the Application Health extension properties
$publicConfig = @{"protocol" = "http"; "port" = 80; "requestPath" = "/healthEndpoint"};
$extensionName = "myHealthExtension"
$extensionType = "ApplicationHealthWindows"
$publisher = "Microsoft.ManagedServices"

# Get the scale set object
$vmScaleSet = Get-AzVmss `
  -ResourceGroupName $vmScaleSetResourceGroup `
  -VMScaleSetName $vmScaleSetName

# Add the Application Health extension to the scale set model
Add-AzVmssExtension -VirtualMachineScaleSet $vmScaleSet `
  -Name $extensionName `
  -Publisher $publisher `
  -Setting $publicConfig `
  -Type $extensionType `
  -TypeHandlerVersion "1.0" `
  -AutoUpgradeMinorVersion $True

# Update the scale set
Update-AzVmss -ResourceGroupName $vmScaleSetResourceGroup `
  -Name $vmScaleSetName `
  -VirtualMachineScaleSet $vmScaleSet
  
# Upgrade instances to install the extension
Update-AzVmssInstance -ResourceGroupName $vmScaleSetResourceGroup `
  -VMScaleSetName $vmScaleSetName `
  -InstanceId '*'
Useaz vmss extension setto add the Application Health extension to the scale set model definition.
The following example adds the Application Health extension to the scale set model of a Linux-based scale set.
You can also use this example to change an existing extension from Rich Health States to Binary Health.
az vmss extension set \
  --name ApplicationHealthLinux \
  --publisher Microsoft.ManagedServices \
  --version 1.0 \
  --resource-group <myVMScaleSetResourceGroup> \
  --vmss-name <myVMScaleSet> \
  --settings ./extension.json
az vmss extension set \
  --name ApplicationHealthLinux \
  --publisher Microsoft.ManagedServices \
  --version 1.0 \
  --resource-group <myVMScaleSetResourceGroup> \
  --vmss-name <myVMScaleSet> \
  --settings ./extension.json
The extension.json file content.
{
  "protocol": "<protocol>",
  "port": <port>,
  "requestPath": "</requestPath>"
}
{
  "protocol": "<protocol>",
  "port": <port>,
  "requestPath": "</requestPath>"
}
Upgrade the VMs to install the extension.
az vmss update-instances \
  --resource-group <myVMScaleSetResourceGroup> \
  --name <myVMScaleSet> \
  --instance-ids "*"
az vmss update-instances \
  --resource-group <myVMScaleSetResourceGroup> \
  --name <myVMScaleSet> \
  --instance-ids "*"
Troubleshoot
Need help configuring a probe response
Seeapplication health samplesfor examples of health probe responses being emitted to a local endpoint.
View VMHealth - single instance
Get-AzVmssVM 
  -InstanceView `
  -ResourceGroupName <rgName>â¯`
  -VMScaleSetName <vmssName> `
  -InstanceId <instanceId>
Get-AzVmssVM 
  -InstanceView `
  -ResourceGroupName <rgName>â¯`
  -VMScaleSetName <vmssName> `
  -InstanceId <instanceId>
View VMHealth â batch call
This is only available for Virtual Machine Scale Sets with Uniform orchestration.
GET on `/subscriptions/<subscriptionID>/resourceGroups/<resourceGroupName>/providers/Microsoft.Compute/virtualMachineScaleSets/<vmssName>/virtualMachines/?api-version=2022-03-01&$expand=instanceview`
GET on `/subscriptions/<subscriptionID>/resourceGroups/<resourceGroupName>/providers/Microsoft.Compute/virtualMachineScaleSets/<vmssName>/virtualMachines/?api-version=2022-03-01&$expand=instanceview`
Health State isn't showing up
If Health State isn't showing up in Azure portal or via GET call, check to ensure that the VM is upgraded to the latest model. If the VM isn't on the latest model, upgrade the VM and the health status will come up.
Extension execution output log
Extension execution output is logged to files found in the following directories:
C:\WindowsAzure\Logs\Plugins\Microsoft.ManagedServices.ApplicationHealthWindows\<version>\
C:\WindowsAzure\Logs\Plugins\Microsoft.ManagedServices.ApplicationHealthWindows\<version>\
/var/lib/waagent/Microsoft.ManagedServices.ApplicationHealthLinux-<extension_version>/status
/var/log/azure/applicationhealth-extension
/var/lib/waagent/Microsoft.ManagedServices.ApplicationHealthLinux-<extension_version>/status
/var/log/azure/applicationhealth-extension
The logs also periodically capture the application health status.
Next steps
Learn how todeploy your applicationon Virtual Machine Scale Sets.
Feedback
Was this page helpful?
Additional resources