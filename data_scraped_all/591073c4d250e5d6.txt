Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Azure SQL Database elastic query overview (preview)
Article
2025-01-30
13 contributors
In this article
Applies to:Azure SQL Database
The elastic query feature (in preview) enables you to run a Transact-SQL (T-SQL) query that spans multiple databases in Azure SQL Database. It allows you to perform cross-database queries to access remote tables, and to connect Microsoft and third-party tools (Excel, Power BI, Tableau, etc.) to query across data tiers with multiple databases. Using this feature, you can scale out queries to large data tiers and visualize the results in business intelligence (BI) reports.
Why use elastic queries
Azure SQL Database
Query across databases in Azure SQL Database completely in T-SQL. This allows for read-only querying of remote databases and provides an option for current SQL Server customers to migrate applications using three- and four-part names or linked server to SQL Database.
Available on all service tiers
Elastic query is supported in all service tiers of Azure SQL Database. See the section on Preview Limitations below on performance limitations for lower service tiers.
Push parameters to remote databases
Elastic queries can now push SQL parameters to the remote databases for execution.
Stored procedure execution
Execute remote stored procedure calls or remote functions usingsp_execute _remote.
Flexibility
External tables with elastic query can refer to remote tables with a different schema or table name.
Elastic query scenarios
The goal is to facilitate querying scenarios where multiple databases contribute rows into a single overall result. The query can either be composed by the user or application directly, or indirectly through tools that are connected to the database. This is especially useful when creating reports, using commercial BI or data integration tools, or any application that can't be changed. With an elastic query, you can query across several databases using the familiar SQL Server connectivity experience in tools such as Excel, Power BI, Tableau, or Cognos.
An elastic query allows easy access to an entire collection of databases through queries issued by SQL Server Management Studio or Visual Studio, and facilitates cross-database querying from Entity Framework or other ORM environments. Figure 1 shows a scenario where an existing cloud application (which uses theelastic database client library) builds on a scaled-out data tier, and an elastic query is used for cross-database reporting.
Figure 1Elastic query used on scaled-out data tier

Customer scenarios for elastic query are characterized by the following topologies:
Vertical partitioning - Cross-database queries(Topology 1): The data is partitioned vertically between several databases in a data tier. Typically, different sets of tables reside on different databases. That means that the schema is different on different databases. For instance, all tables for inventory are on one database while all accounting-related tables are on a second database. Common use cases with this topology require one to query across or to compile reports across tables in several databases.
Vertical partitioning - Cross-database queries(Topology 1): The data is partitioned vertically between several databases in a data tier. Typically, different sets of tables reside on different databases. That means that the schema is different on different databases. For instance, all tables for inventory are on one database while all accounting-related tables are on a second database. Common use cases with this topology require one to query across or to compile reports across tables in several databases.
Horizontal Partitioning - Sharding(Topology 2): Data is partitioned horizontally to distribute rows across a scaled out data tier. With this approach, the schema is identical on all participating databases. This approach is also calledsharding. Sharding can be performed and managed using (1) the elastic database tools libraries or (2) self-sharding. An elastic query is used to query or compile reports across many shards. Shards are typically databases within an elastic pool. You can think of elastic query as an efficient way for querying all databases of elastic pool at once, as long as databases share the common schema.
Horizontal Partitioning - Sharding(Topology 2): Data is partitioned horizontally to distribute rows across a scaled out data tier. With this approach, the schema is identical on all participating databases. This approach is also calledsharding. Sharding can be performed and managed using (1) the elastic database tools libraries or (2) self-sharding. An elastic query is used to query or compile reports across many shards. Shards are typically databases within an elastic pool. You can think of elastic query as an efficient way for querying all databases of elastic pool at once, as long as databases share the common schema.
Note
Elastic query works best for reporting scenarios where most of the processing (filtering, aggregation) can be performed on the external source side. It isn't suitable for ETL operations where large amount of data is being transferred from remote databases. For heavy reporting workloads or data warehousing scenarios with more complex queries, also consider usingAzure Synapse Analytics.
Vertical partitioning - cross-database queries
To begin coding, seeGetting started with cross-database query (vertical partitioning).
An elastic query can be used to make data located in a database in SQL Database available to other databases in SQL Database. This allows queries from one database to refer to tables in any other remote database in SQL Database. The first step is to define an external data source for each remote database. The external data source is defined in the local database from which you want to gain access to tables located on the remote database. No changes are necessary on the remote database. For typical vertical partitioning scenarios where different databases have different schemas, elastic queries can be used to implement common use cases such as access to reference data and cross-database querying.
Important
You must possessALTER ANY EXTERNAL DATA SOURCEpermission. This permission is included with theALTER DATABASEpermission.ALTER ANY EXTERNAL DATA SOURCEpermissions are needed to refer to the underlying data source.
ALTER ANY EXTERNAL DATA SOURCE
ALTER DATABASE
ALTER ANY EXTERNAL DATA SOURCE
Reference data: The topology is used for reference data management. In the following figure, two tables (T1 and T2) with reference data are kept on a dedicated database. Using an elastic query, you can now access tables T1 and T2 remotely from other databases, as shown in the figure. Use topology 1 if reference tables are small or remote queries into reference table have selective predicates.
Figure 2Vertical partitioning - Using elastic query to query reference data

Cross-database querying: Elastic queries enable use cases that require querying across several databases in SQL Database. Figure 3 shows four different databases: CRM, Inventory, HR, and Products. Queries performed in one of the databases also need access to one or all the other databases. Using an elastic query, you can configure your database for this case by running a few simple DDL statements on each of the four databases. After this one-time configuration, access to a remote table is as simple as referring to a local table from your T-SQL queries or from your BI tools. This approach is recommended if the remote queries don't return large results.
Figure 3Vertical partitioning - Using elastic query to query across various databases

The following steps configure elastic database queries for vertical partitioning scenarios that require access to a table located on remote databases in SQL Database with the same schema:
CREATE MASTER KEYmymasterkey
CREATE MASTER KEYmymasterkey
mymasterkey
CREATE DATABASE SCOPED CREDENTIALmycredential
CREATE DATABASE SCOPED CREDENTIALmycredential
mycredential
CREATE EXTERNAL DATA SOURCEmydatasourceof typeRDBMS
CREATE EXTERNAL DATA SOURCEmydatasourceof typeRDBMS
mydatasource
RDBMS
CREATE EXTERNAL TABLEmytable
CREATE EXTERNAL TABLEmytable
mytable
After running the DDL statements, you can access the remote tablemytableas though it were a local table. Azure SQL Database automatically opens a connection to the remote database, processes your request on the remote database, and returns the results.
mytable
Horizontal partitioning - sharding
Using elastic query to perform reporting tasks over a sharded, that is, horizontally partitioned, data tier requires anelastic database shard mapto represent the databases of the data tier. Typically, only a single shard map is used in this scenario and a dedicated database with elastic query capabilities (head node) serves as the entry point for reporting queries. Only this dedicated database needs access to the shard map. Figure 4 illustrates this topology and its configuration with the elastic query database and shard map. For more information about the elastic database client library and creating shard maps, seeShard map management.
Figure 4Horizontal partitioning - Using elastic query for reporting over sharded data tiers

Note
Elastic Query Database (head node) can be separate database, or it can be the same database that hosts the shard map.
Whatever configuration you choose, make sure that service tier and compute size of that database is high enough to handle the expected number of login/query requests.
The following steps configure elastic database queries for horizontal partitioning scenarios that require access to a set of tables located on (typically) several remote databases in SQL Database:
CREATE MASTER KEYmymasterkey
CREATE MASTER KEYmymasterkey
mymasterkey
CREATE DATABASE SCOPED CREDENTIALmycredential.
CREATE DATABASE SCOPED CREDENTIALmycredential.
mycredential
Create ashard maprepresenting your data tier using the elastic database client library.
Create ashard maprepresenting your data tier using the elastic database client library.
CREATE EXTERNAL DATA SOURCEmydatasourceof typeSHARD_MAP_MANAGER.
CREATE EXTERNAL DATA SOURCEmydatasourceof typeSHARD_MAP_MANAGER.
mydatasource
SHARD_MAP_MANAGER
CREATE EXTERNAL TABLEmytable
CREATE EXTERNAL TABLEmytable
mytable
Once you have performed these steps, you can access the horizontally partitioned tablemytableas though it were a local table. Azure SQL Database automatically opens multiple parallel connections to the remote databases where the tables are physically stored, processes the requests on the remote databases, and returns the results.
More information on the steps required for the horizontal partitioning scenario can be found inelastic query for horizontal partitioning.
mytable
To begin coding, seeGetting started with elastic query for horizontal partitioning (sharding).
Important
Successful execution of elastic query over a large set of databases relies heavily on the availability of each of databases during the query execution. If one of databases isn't available, the entire query fails. If you plan to query hundreds or thousands of databases at once, make sure your client application has retry logic embedded, or consider leveragingelastic jobsand querying smaller subsets of databases, consolidating results of each query into a single destination.
T-SQL querying
Once you have defined your external data sources and your external tables, you can use regular SQL Server connection strings to connect to the databases where you defined your external tables. You can then run T-SQL statements over your external tables on that connection with the limitations outlined later in this article. You can find more information and examples of T-SQL queries in the documentation articles forhorizontal partitioningandvertical partitioning.
Connectivity for tools
You can use regular SQL Server connection strings to connect your applications and BI or data integration tools to databases that have external tables. Make sure that SQL Server is supported as a data source for your tool. Once connected, refer to the elastic query database and the external tables in that database just like you would do with any other SQL Server database that you connect to with your tool.
Important
Elastic queries are only supported when connecting with SQL Server Authentication.
Cost
Elastic query is included in the cost of Azure SQL Database. Topologies where your remote databases are in a different data center than the elastic query endpoint are supported, but data egress from remote databases is charged regularlyAzure rates.
Preview limitations
Running your first elastic query can take up to a few minutes on smaller resources and Standard and General Purpose service tier. This time is necessary to load the elastic query functionality; loading performance improves with higher service tiers and compute sizes.
Running your first elastic query can take up to a few minutes on smaller resources and Standard and General Purpose service tier. This time is necessary to load the elastic query functionality; loading performance improves with higher service tiers and compute sizes.
Elastic query currently only supports read-only access to external tables. You can, however, use full Transact-SQL functionality on the database where the external table is defined. This can be useful to, for example, persist temporary results using, for example,SELECT <column_list> INTO <local_table>, or to define stored procedures on the elastic query database that refer to external tables.
Elastic query currently only supports read-only access to external tables. You can, however, use full Transact-SQL functionality on the database where the external table is defined. This can be useful to, for example, persist temporary results using, for example,SELECT <column_list> INTO <local_table>, or to define stored procedures on the elastic query database that refer to external tables.
SELECT <column_list> INTO <local_table>
Except fornvarchar(max), LOB types (including spatial types) aren't supported in external table definitions. As a workaround, you can create a view on the remote database that casts the LOB type intonvarchar(max), define your external table over the view instead of the base table and then cast it back into the original LOB type in your queries.
Except fornvarchar(max), LOB types (including spatial types) aren't supported in external table definitions. As a workaround, you can create a view on the remote database that casts the LOB type intonvarchar(max), define your external table over the view instead of the base table and then cast it back into the original LOB type in your queries.
Columns ofnvarchar(max)data type in result set disable advanced batching techniques used in Elastic Query implementation and might affect performance of query for an order of magnitude, or even two orders of magnitude in non-canonical use cases where large amount of non-aggregated data is being transferred as a result of query.
Columns ofnvarchar(max)data type in result set disable advanced batching techniques used in Elastic Query implementation and might affect performance of query for an order of magnitude, or even two orders of magnitude in non-canonical use cases where large amount of non-aggregated data is being transferred as a result of query.
Column statistics over external tables are currently not supported. Table statistics are supported, but need to be created manually.
Column statistics over external tables are currently not supported. Table statistics are supported, but need to be created manually.
Cursors aren't supported for external tables in Azure SQL Database.
Cursors aren't supported for external tables in Azure SQL Database.
Elastic query works with Azure SQL Database only. You can't use it for querying a SQL Server instance, Azure SQL Managed Instance, or Fabric SQL database.
Elastic query works with Azure SQL Database only. You can't use it for querying a SQL Server instance, Azure SQL Managed Instance, or Fabric SQL database.
Private links are currently not supported with elastic query for those databases that are targets of external data sources.
Private links are currently not supported with elastic query for those databases that are targets of external data sources.
Related content
Get started with cross-database queries (vertical partitioning) (preview)
Query across cloud databases with different schemas (preview)
Report across scaled-out cloud databases (preview)
Reporting across scaled-out cloud databases (preview)
sp_execute_remote (Azure SQL Database)
Feedback
Was this page helpful?
Additional resources