Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Run and build numbers
Article
2024-10-10
25 contributors
In this article
Azure DevOps Services | Azure DevOps Server 2022 - Azure DevOps Server 2019
This article explains how Azure Pipelines build numbers and run numbers are constructed, and how you can customize them in your pipelines.
The run number is used to identify a specific execution of a pipeline or build. The build number is synonymous with the run number.
If you don't specify a build name in YAML pipelines, or you leave theNamefield blank in Classic pipelines, your run gets a unique integer as its name. You can give runs more useful names that are meaningful to your team. You can use a combination of tokens, variables, and underscore characters in build names.
In YAML pipelines, the build name property is callednameand must be at the root level of a pipeline. Items specified at the root level of a YAML file arepipelineproperties.
name
Note
Thenameproperty doesn't work in template files.
name
The following example code outputs a customized build number likeproject_def_master_202408281.
name: $(TeamProject)_$(Build.DefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:r)

steps:
  - script: echo '$(Build.BuildNumber)'
name: $(TeamProject)_$(Build.DefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:r)

steps:
  - script: echo '$(Build.BuildNumber)'
Run number
The default value for a run number in Azure Pipelines is$(Date:yyyyMMdd).$(Rev:r).$(Rev:r)is a special variable format that only works in the build number field. When a build completes, if nothing else in the build number changed, theRevinteger value increases by one.
$(Date:yyyyMMdd).$(Rev:r)
$(Rev:r)
Rev
$(Rev:r)resets to1when any other part of the build number changes. For example, if you configure your build number format as$(Build.DefinitionName)_$(Date:yyyyMMdd).$(Rev:r), the build number resets when the date changes.
$(Rev:r)
1
$(Build.DefinitionName)_$(Date:yyyyMMdd).$(Rev:r)
If the previous build number wasMyBuild_20230621.1, the next build number that day isMyBuild_20230621.2. The first build number the next day isMyBuild_20230622.1.
MyBuild_20230621.1
MyBuild_20230621.2
MyBuild_20230622.1
$(Rev:r)also resets to1if you change the build number to indicate a version change. For example, if your build format is1.0.$(Rev:r)and your last build number was1.0.3, if you change the build number to1.1.$(Rev:r), the next build number is1.1.1.
$(Rev:r)
1
1.0.$(Rev:r)
1.0.3
1.1.$(Rev:r)
1.1.1
Example
Consider the following data for a build run:
Project name: Fabrikam
Pipeline name: CIBuild
Branch: main
Build ID/Run ID: 752
Date: May 6, 2024
Time: 9:07:03 PM
One run completed earlier today.
If you specify the following build number format, the second run on May 6, 2024 is namedFabrikam_CIBuild_main_20240506.2.
$(TeamProject)_$(Build.DefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd).$(Rev:r)
$(TeamProject)_$(Build.DefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd).$(Rev:r)
Tokens
The following table shows how each token resolves, based on the previous example. You can use these tokens only to define run numbers. They don't work anywhere else in a pipeline.
$(Build.DefinitionName)
$(Build.BuildId)
$(Build.BuildId)
$(DayOfMonth)
$(DayOfYear)
$(Hours)
$(Minutes)
$(Month)
$(Rev:r)
3
$(Rev:r)
$(Date:yyyyMMdd)
$(Date:MMddyy)
$(Seconds)
$(SourceBranchName)
$(TeamProject)
$(Year:yy)
$(Year:yyyy)
Important
If you want to show prefix zeros in the run number, you can add morercharacters to theRevtoken. For example, specify$(Rev:rr)if you want theRevnumber to begin with01,02, and so on.
r
Rev
$(Rev:rr)
Rev
01
02
If you use a zero-paddedRevas part of a version numbering scheme, be aware that some pipeline tasks or popular tools, like NuGet packages, remove the leading zeros. This behavior causes a version number mismatch in the artifacts that are produced.
Rev
Expressions
If you use an expression to set the build number, you can't use some tokens, because their values aren't set at the time expressions are evaluated. These tokens include$(Build.BuildId),$(Build.BuildURL), and$(Build.BuildNumber).
$(Build.BuildId)
$(Build.BuildURL)
$(Build.BuildNumber)
Variables
You can use user-defined and predefined variables in your build number. For example, if you defineMy.Variable, you can specify the following number format:
My.Variable
$(Build.DefinitionName)_$(Build.DefinitionVersion)_$(Build.RequestedFor)_$(Build.BuildId)_$(My.Variable)
$(Build.DefinitionName)_$(Build.DefinitionVersion)_$(Build.RequestedFor)_$(Build.BuildId)_$(My.Variable)
In the preceding example, the first four variables are predefined. For information on how to define user variables, seeSet variables in pipelines.
FAQ
How large can a run number be, and what characters can I use?
Run numbers can be up to 255 characters. You can't use the characters",/,\,:,<,>,',|,?,@, or*, and you can't end the number with..
"
/
\
:
<
>
'
|
?
@
*
.
What time zone are the build number time values expressed in?
The time zone is UTC.
The time zone is the same as the time zone of the operating system of the machine that runs your application tier server.
How can I set the build number dynamically with conditions?
You can use variables as part of your run number. In the following example, the variablewhyis used as part of the run number, and its value changes depending on theBuild.Reason.
why
Build.Reason
variables:
  - name: why
    ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
      value: pr
    ${{ elseif eq(variables['Build.Reason'], 'Manual' ) }}:
      value: manual
    ${{ elseif eq(variables['Build.Reason'], 'IndividualCI' ) }}:
      value: indivci
    ${{ else }}:
      value: other

name: $(TeamProject)_$(SourceBranchName)_$(why)_$(Date:yyyyMMdd).$(Rev:r)

pool:
  vmImage: 'ubuntu-latest'

steps:
- script: echo '$(Build.BuildNumber)'
variables:
  - name: why
    ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
      value: pr
    ${{ elseif eq(variables['Build.Reason'], 'Manual' ) }}:
      value: manual
    ${{ elseif eq(variables['Build.Reason'], 'IndividualCI' ) }}:
      value: indivci
    ${{ else }}:
      value: other

name: $(TeamProject)_$(SourceBranchName)_$(why)_$(Date:yyyyMMdd).$(Rev:r)

pool:
  vmImage: 'ubuntu-latest'

steps:
- script: echo '$(Build.BuildNumber)'
How can I reference the run number variable within a script?
You can define a new variable that includes the run number, or call the run number directly. In the following example,$(MyRunNumber)is a new variable that includes the run number. You can call the run number variable by usingMyRunNumberor$(Build.BuildNumber).
$(MyRunNumber)
MyRunNumber
$(Build.BuildNumber)
# Set MyRunNumber
variables: 
  MyRunNumber: '1.0.0-CI+$(Build.BuildNumber)'

steps:
- script: echo $(MyRunNumber)
- script: echo $(Build.BuildNumber)
# Set MyRunNumber
variables: 
  MyRunNumber: '1.0.0-CI+$(Build.BuildNumber)'

steps:
- script: echo $(MyRunNumber)
- script: echo $(Build.BuildNumber)
Related content
Define variables
Feedback
Was this page helpful?
Additional resources