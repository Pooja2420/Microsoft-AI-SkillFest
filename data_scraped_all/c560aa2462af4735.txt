Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Build and publish a Node.js package
Article
2025-04-16
25 contributors
In this article
Azure DevOps Services | Azure DevOps Server 2022 - Azure DevOps Server 2019
In this quickstart, you use a pipeline to create a Node.js package with Node Package Manager (npm) and publish a pipeline artifact. You learn how to use Azure Pipelines to build, deploy, and test your JavaScript apps.
Prerequisites
Fork the sample code
Fork the sample Express.js server app.
Go to thejs-e2e-express-serverrepository.
SelectForkin the upper-right corner of the page.
Select your GitHub account. By default, the fork is named the same as the parent repository, but you can name it something different.
Important
During the following procedures, you might be prompted to create aGitHub service connectionor redirected to GitHub to sign in, install Azure Pipelines, or authorize Azure Pipelines. Follow the onscreen instructions to complete the process. For more information, seeAccess to GitHub repositories.
Create your pipeline
YAML
Classic
In your Azure DevOps project, selectPipelines>Create Pipeline, and then selectGitHubas the location of your source code.
On theSelect a repositoryscreen, select your forked sample repository.
On theConfigure your pipelinescreen, selectStarter pipeline. Azure Pipelines generates a YAML file calledazure-pipelines.ymlfor your pipeline.
Select the dropdown caret next toSave and run, selectSave, and then selectSaveagain. The file is saved to your forked GitHub repository.
On the next screen, selectEdit.
Build the package and publish an artifact
Edit yourazure-pipelines.ymlfile as follows.
Replace the contents of the file with the following code. The code updates theNode.js tool installer taskto use Node.js version 16 LTS.trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: UseNode@1
  inputs:
    version: '16.x'
  displayName: 'Install Node.js'

- script: |
    npm install
  displayName: 'npm install'

- script: |
    npm run build
  displayName: 'npm build'

- script: 
    npm test
  displayname: 'npm test'
Replace the contents of the file with the following code. The code updates theNode.js tool installer taskto use Node.js version 16 LTS.
trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: UseNode@1
  inputs:
    version: '16.x'
  displayName: 'Install Node.js'

- script: |
    npm install
  displayName: 'npm install'

- script: |
    npm run build
  displayName: 'npm build'

- script: 
    npm test
  displayname: 'npm test'
trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: UseNode@1
  inputs:
    version: '16.x'
  displayName: 'Install Node.js'

- script: |
    npm install
  displayName: 'npm install'

- script: |
    npm run build
  displayName: 'npm build'

- script: 
    npm test
  displayname: 'npm test'
Add the following new tasks to the pipeline:Thecopy files taskcopies the files from thesrcandpublicfolders to the build artifact staging directory.Thepublish pipeline artifact taskgets the files from the artifact staging location and publishes them as artifacts to be output with pipeline builds.- task: CopyFiles@2
  inputs:
    sourceFolder: '$(Build.SourcesDirectory)'
    contents: |
       src/*
       public/*
    targetFolder: '$(Build.ArtifactStagingDirectory)'
  displayName: 'Copy project files'

- task: PublishPipelineArtifact@1
  inputs:
    artifactName: e2e-server
    targetPath: '$(Build.ArtifactStagingDirectory)'
    publishLocation: 'pipeline'
  displayName: 'Publish npm artifact'
Add the following new tasks to the pipeline:
Thecopy files taskcopies the files from thesrcandpublicfolders to the build artifact staging directory.
Thecopy files taskcopies the files from thesrcandpublicfolders to the build artifact staging directory.
Thepublish pipeline artifact taskgets the files from the artifact staging location and publishes them as artifacts to be output with pipeline builds.
Thepublish pipeline artifact taskgets the files from the artifact staging location and publishes them as artifacts to be output with pipeline builds.
- task: CopyFiles@2
  inputs:
    sourceFolder: '$(Build.SourcesDirectory)'
    contents: |
       src/*
       public/*
    targetFolder: '$(Build.ArtifactStagingDirectory)'
  displayName: 'Copy project files'

- task: PublishPipelineArtifact@1
  inputs:
    artifactName: e2e-server
    targetPath: '$(Build.ArtifactStagingDirectory)'
    publishLocation: 'pipeline'
  displayName: 'Publish npm artifact'
- task: CopyFiles@2
  inputs:
    sourceFolder: '$(Build.SourcesDirectory)'
    contents: |
       src/*
       public/*
    targetFolder: '$(Build.ArtifactStagingDirectory)'
  displayName: 'Copy project files'

- task: PublishPipelineArtifact@1
  inputs:
    artifactName: e2e-server
    targetPath: '$(Build.ArtifactStagingDirectory)'
    publishLocation: 'pipeline'
  displayName: 'Publish npm artifact'
Run your pipeline
SelectValidate and save, then selectSave, selectRun, and selectRunagain.
After your pipeline runs, verify that the job ran successfully and that you see a published artifact.

SelectGitHubas the source for your code.
SelectGitHubas the source for your code.
UnderRepository, select your forked repository, and selectContinue.
UnderRepository, select your forked repository, and selectContinue.
SelectEmpty pipeline, and selectApply.
SelectEmpty pipeline, and selectApply.
UnderAgent specificationin the right pane, selectubuntu-latest.
UnderAgent specificationin the right pane, selectubuntu-latest.
In the left pane, add the following tasks to the pipeline in order. For each task, select the+inAgent job 1, select the task at right and selectAdd, and configure the task if necessary.npmnpmDisplay name:npm testCommand:customCommand and arguments:testPublish Test ResultsArchive filesRoot folder or file to archive:$(System.DefaultWorkingDirectory)Prepend root folder name to archive paths:UncheckPublish build artifacts
In the left pane, add the following tasks to the pipeline in order. For each task, select the+inAgent job 1, select the task at right and selectAdd, and configure the task if necessary.
npm
npm
npmDisplay name:npm testCommand:customCommand and arguments:test
npm
Display name:npm test
Command:custom
Command and arguments:test
Publish Test Results
Publish Test Results
Archive filesRoot folder or file to archive:$(System.DefaultWorkingDirectory)Prepend root folder name to archive paths:Uncheck
Archive files
Root folder or file to archive:$(System.DefaultWorkingDirectory)
Prepend root folder name to archive paths:Uncheck
Publish build artifacts
Publish build artifacts
SelectSave & queue, and then selectSave and run.
SelectSave & queue, and then selectSave and run.

Congratulations, you successfully created and ran a pipeline that built and tested a Node.js package. You can build, test, and deploy Node.js apps as part of your Azure Pipelines continuous integration and continuous delivery (CI/CD) system.
Next steps
Configure JavaScript
Feedback
Was this page helpful?
Additional resources