Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Monitor and analyze runtime behavior with Code Optimizations
Article
2025-04-17
2 contributors
In this article
Diagnosing your application's performance issues can be difficult, especially when running on a production environment in the dynamic cloud. Slow responses in your application could be caused by infrastructure, framework, or application code handling the request in the pipeline.
Code Optimizations, an AI-based service in Azure Application Insights, works in tandem with the Application Insights Profiler for .NET to detect CPU and memory usage performance issues at a code level and provide recommendations on how to fix them.
Make informed decisions and optimize your code using real-time performance data and insights gathered from your production environment.
You can review your Code Optimizations in the Azure portal.
Code Optimizations and Application Insights Profiler for .NET
The .NET Profiler and Code Optimizations work together to provide a holistic approach to performance issue detection.
Code Optimizations
Code Optimizationsidentifies, analyzes, and resolves the profiling data collected by the Application Insights Profiler for .NET. As the .NET Profiler uploads data to Application Insights, our machine learning model analyzes some of the data to find where the application's code can be optimized. Code Optimizations:
Displays aggregated data gathered over time.
Connects data with the methods and functions in your application code.
Narrows down the culprit by finding bottlenecks within the code.
Provides code-level performance fixes based on insights.
Using theCode Optimizations consolidated overview page, you can see all Code Optimization recommendations across your Azure subscriptions and Application Insights resources in the Azure portal. Identify bottlenecks in your code and review code-level recommendations for dev, test, pre-production, and production environments.
Once your environment's data has been collected, Code Optimizations provides code-level recommendations on an hourly basis. By default, the aggregated data view shows a rolling 24-hour window of recently identified issues, with a 30-day history for you to review and analyze past events.
After identifying and analyzing the Code Optimization results, you can resolve these issues in your code using the Code OptimizationsVisual StudioandVisual Studio Codeextensions. With these extensions, interact with GitHub Copilot to receive a code fix grounded in Code Optimizations insights.
Application Insights Profiler for .NET
The .NET Profiler focuses on tracing specific requests, down to the millisecond. It provides an excellent "big picture" view of issues within your application and general best practices to address them.
With Application Insights Profiler for .NET, you can capture, identify, and view performance traces for your application running in Azure, regardless of the scenario. The .NET Profiler trace process occurs automatically, at scale, and doesn't negatively affect your users. The .NET Profiler identifies:
The median, fastest, and slowest response times for each web request made by your customers.
The "hot" code path spending the most time handling a particular web request.
Enable the Profiler for .NET on all your Azure applications to gather data with the following triggers:
Sampling trigger: Starts Profiler randomly about once an hour for two minutes.
CPU trigger: Starts Profiler when the CPU usage percentage is over 80 percent.
Memory trigger: Starts Profiler when memory usage is above 80 percent.
Each of these triggers can beconfigured, enabled, or disabled.
Cost and overhead
Code Optimizations are generated automatically afterApplication Insights Profiler for .NET is enabled. By default, Profiler actively collects traces every hour for 30 seconds or during periods of high CPU or memory usage for 30 seconds. The hourly traces (called sampling) are great for proactive tuning, while the high CPU and memory traces (called triggers) are useful for reactive troubleshooting.
Note
When the Application Insights Profiler for .NET is actively running and collecting traces, it typically adds between 5% to 15% of CPU and memory overhead to your server.
There isno additional costfor storing data captured by .NET Profiler. The data is automatically deleted after 15 days.
Some Code Optimization features (such as code-level fix suggestions) requireCopilot for GitHuband/orCopilot for Azure.
Enabling .NET Profiler
As frameworks and Azure services evolve, you can enable .NET Profiler for your .NET apps running on Azure via a number of options.
Details and examples for enabling Profiler for .NET
Azure App Service - .NET app on Windows
Azure App Service - .NET app on Linux
Containers:Azure Container AppsAzure Kubernetes ServicesAzure Container Instances
Azure Container Apps
Azure Kubernetes Services
Azure Container Instances
Azure Virtual Machines and Virtual Machine Scale Sets for Windows
Azure Functions - App Service plan
Azure Service Fabric
Note
You can also use theJava Profiler for Azure Monitor Application Insights, currently in preview.
Supported regions
Code Optimizations is available in the same regions as Application Insights. You can check the available regions using the following command:
az account list-locations -o table
az account list-locations -o table
You can set an explicit region using connection strings.Learn more about connection strings with examples.
Limitations
Profiling web apps:
Although you can use the .NET Profiler at no extra cost, your web app must be hosted in the basic tier of the Web Apps feature of Azure App Service, at minimum.
You can attach only one profiler to each web app.
Troubleshooting
ProfilerIf you've enabled the Profiler for .NET but aren't seeing traces, see theTroubleshooting guide.
Profiler
If you've enabled the Profiler for .NET but aren't seeing traces, see theTroubleshooting guide.
Code OptimizationsRunning into issues? Check theCode Optimizations troubleshooting guidefor scenario solutions.
Code Optimizations
Running into issues? Check theCode Optimizations troubleshooting guidefor scenario solutions.
Next steps
Learn how to enable the .NET Profiler with Code Optimizations on your Azure service:
ASP.NET Core application hosted in Windows on Azure App Service
ASP.NET Core application hosted in Linux on Azure App Service
Azure Functions app
Azure Service Fabric app
Azure Virtual Machines
ASP.NET Core application running in containers
Feedback
Was this page helpful?
Additional resources