Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Publish symbols with Azure Pipelines
Article
2024-02-01
14 contributors
In this article
Azure DevOps Services | Azure DevOps Server 2022 - Azure DevOps Server 2019
With Azure Pipelines, you can publish your symbols to Azure Artifacts symbol server using theIndex sources and publish symbolstask. You can use the debugger to connect and automatically retrieve the correct symbol files without knowing product names, build numbers, or package names. Using Azure Pipelines, you can also publish your symbols to files shares and portable PDBs.
Note
TheIndex sources and publish symbolstask is not supported in release pipelines.
Publish symbols to Azure Artifacts symbol server
Classic
YAML
Sign in to your Azure DevOps organization, and then navigate to your project.
Sign in to your Azure DevOps organization, and then navigate to your project.
SelectPipelines, select your pipeline, and then selectEditto modify your pipeline.
SelectPipelines, select your pipeline, and then selectEditto modify your pipeline.
From your pipeline definition, select+to add a new task.
From your pipeline definition, select+to add a new task.
+
Search for theIndex sources and publish symbolstask. SelectAddto add it to your pipeline.
Search for theIndex sources and publish symbolstask. SelectAddto add it to your pipeline.
Fill out the required fields as follows:Task version:2.\*.Display name: task display name.Path to symbols folder: path to the folder hosting the symbol files.Search pattern: the pattern used to locate the.pdbfiles in the folder you've designated underPath to symbols folder. Single-folder wildcard (*) and recursive wildcards (**) are both supported. Example: *\bin**.pdb: will search for all.pdbfiles within all subdirectories namedbin.Index sources: indicates whether to inject source server information into the PDB files.Publish symbols: indicates whether to publish the symbol files.Symbol server type: selectSymbol Server in this organization/collection (requires Azure Artifacts)to publish your symbols to Azure Artifacts symbol server.Verbose logging: include more information in your logs.
Fill out the required fields as follows:
Task version:2.\*.
Task version:2.\*.
Display name: task display name.
Display name: task display name.
Path to symbols folder: path to the folder hosting the symbol files.
Path to symbols folder: path to the folder hosting the symbol files.
Search pattern: the pattern used to locate the.pdbfiles in the folder you've designated underPath to symbols folder. Single-folder wildcard (*) and recursive wildcards (**) are both supported. Example: *\bin**.pdb: will search for all.pdbfiles within all subdirectories namedbin.
Search pattern: the pattern used to locate the.pdbfiles in the folder you've designated underPath to symbols folder. Single-folder wildcard (*) and recursive wildcards (**) are both supported. Example: *\bin**.pdb: will search for all.pdbfiles within all subdirectories namedbin.
*
**
Index sources: indicates whether to inject source server information into the PDB files.
Index sources: indicates whether to inject source server information into the PDB files.
Publish symbols: indicates whether to publish the symbol files.Symbol server type: selectSymbol Server in this organization/collection (requires Azure Artifacts)to publish your symbols to Azure Artifacts symbol server.
Publish symbols: indicates whether to publish the symbol files.
Symbol server type: selectSymbol Server in this organization/collection (requires Azure Artifacts)to publish your symbols to Azure Artifacts symbol server.
Verbose logging: include more information in your logs.
Verbose logging: include more information in your logs.

To publish your symbols to Azure Artifacts symbol server add the following snippet to your YAML pipeline:
- task: PublishSymbols@2
  inputs:
    SymbolsFolder: '$(Build.SourcesDirectory)'
    SearchPattern: '**/bin/**/*.pdb'
    IndexSources: true
    PublishSymbols: true
    SymbolServerType: 'TeamServices' 
    SymbolExpirationInDays: '36530'
    IndexableFileFormats: 'Default'
    DetailedLog: true
    SymbolsArtifactName: 'Symbols_$(BuildConfiguration)'
- task: PublishSymbols@2
  inputs:
    SymbolsFolder: '$(Build.SourcesDirectory)'
    SearchPattern: '**/bin/**/*.pdb'
    IndexSources: true
    PublishSymbols: true
    SymbolServerType: 'TeamServices' 
    SymbolExpirationInDays: '36530'
    IndexableFileFormats: 'Default'
    DetailedLog: true
    SymbolsArtifactName: 'Symbols_$(BuildConfiguration)'
Publish symbols to a file share
Aside from Azure Artifacts symbol server, you can also publish your symbols to a file share using theIndex Sources and Publish Symbolstask.
Classic
YAML
Sign in to your Azure DevOps organization, and then navigate to your project.
Sign in to your Azure DevOps organization, and then navigate to your project.
SelectPipelines, select your pipeline, and then selectEditto modify your pipeline.
SelectPipelines, select your pipeline, and then selectEditto modify your pipeline.
From your pipeline definition, select+to add a new task.
From your pipeline definition, select+to add a new task.
+
Search for theIndex sources and publish symbolstask. SelectAddto add it to your pipeline.
Search for theIndex sources and publish symbolstask. SelectAddto add it to your pipeline.
Fill out the required fields as follows:Task version:2.\*.Display name: task display name.Path to symbols folder: path to the folder hosting the symbol files.Search pattern: the pattern used to locate the.pdbfiles in the folder you've designated underPath to symbols folder.Index sources: indicates whether to inject source server information into the PDB files.Publish symbols: indicates whether to publish the symbol files.Symbol server type: selectFile shareto publish your symbols to a file share.Path to publish symbols: the file share that will host your symbols.Verbose logging: check to include more information in your logs.
Fill out the required fields as follows:
Task version:2.\*.
Task version:2.\*.
Display name: task display name.
Display name: task display name.
Path to symbols folder: path to the folder hosting the symbol files.
Path to symbols folder: path to the folder hosting the symbol files.
Search pattern: the pattern used to locate the.pdbfiles in the folder you've designated underPath to symbols folder.
Search pattern: the pattern used to locate the.pdbfiles in the folder you've designated underPath to symbols folder.
Index sources: indicates whether to inject source server information into the PDB files.
Index sources: indicates whether to inject source server information into the PDB files.
Publish symbols: indicates whether to publish the symbol files.Symbol server type: selectFile shareto publish your symbols to a file share.Path to publish symbols: the file share that will host your symbols.
Publish symbols: indicates whether to publish the symbol files.
Symbol server type: selectFile shareto publish your symbols to a file share.
Path to publish symbols: the file share that will host your symbols.
Verbose logging: check to include more information in your logs.
Verbose logging: check to include more information in your logs.

To publish your symbols to a file share add the following snippet to your YAML pipeline:
- task: PublishSymbols@2
  inputs:
    SymbolsFolder: '$(Build.SourcesDirectory)'
    SearchPattern: '**/bin/**/*.pdb'
    IndexSources: true
    PublishSymbols: true
    SymbolServerType: 'FileShare' 
    SymbolsPath: '\\server\shareName'
- task: PublishSymbols@2
  inputs:
    SymbolsFolder: '$(Build.SourcesDirectory)'
    SearchPattern: '**/bin/**/*.pdb'
    IndexSources: true
    PublishSymbols: true
    SymbolServerType: 'FileShare' 
    SymbolsPath: '\\server\shareName'
Publish portable PDBs to Azure Artifacts symbol server
Portable PDBs are symbol files that can be created and used on all platforms unlike the traditional PDBs which are used on Windows only. For portable PDBs, the build does the indexing, but you still need to use theIndex Sources and Publish Symbolstask to publish your symbols.
Source Link is a set of tools that allow developers to debug their source code by mapping from the .NET assemblies back to the source code. Check out thedotnet/sourcelinkGitHub repository to learn about the different packages included.
For projects hosted on GitHub, add theMicrosoft.SourceLink.GitHubpackage reference to your project file.<ItemGroup>
  <PackageReference Include="Microsoft.SourceLink.GitHub" Version="1.1.1" PrivateAssets="All"/>
</ItemGroup>
For projects hosted on GitHub, add theMicrosoft.SourceLink.GitHubpackage reference to your project file.
Microsoft.SourceLink.GitHub
<ItemGroup>
  <PackageReference Include="Microsoft.SourceLink.GitHub" Version="1.1.1" PrivateAssets="All"/>
</ItemGroup>
<ItemGroup>
  <PackageReference Include="Microsoft.SourceLink.GitHub" Version="1.1.1" PrivateAssets="All"/>
</ItemGroup>
For projects hosted on Azure Repos (former Visual Studio Team Services), add theMicrosoft.SourceLink.AzureRepos.Gitpackage reference to your project file.<ItemGroup>
  <PackageReference Include="Microsoft.SourceLink.AzureRepos.Git" Version="1.1.1" PrivateAssets="All"/>
</ItemGroup>
For projects hosted on Azure Repos (former Visual Studio Team Services), add theMicrosoft.SourceLink.AzureRepos.Gitpackage reference to your project file.
Microsoft.SourceLink.AzureRepos.Git
<ItemGroup>
  <PackageReference Include="Microsoft.SourceLink.AzureRepos.Git" Version="1.1.1" PrivateAssets="All"/>
</ItemGroup>
<ItemGroup>
  <PackageReference Include="Microsoft.SourceLink.AzureRepos.Git" Version="1.1.1" PrivateAssets="All"/>
</ItemGroup>
For projects hosted on Azure DevOps Server (former Team Foundation Server), add theMicrosoft.SourceLink.AzureDevOpsServer.Gitpackage reference to your project file.<ItemGroup>
  <PackageReference Include="Microsoft.SourceLink.AzureDevOpsServer.Git" Version="1.1.1" PrivateAssets="All"/>
</ItemGroup>
For projects hosted on Azure DevOps Server (former Team Foundation Server), add theMicrosoft.SourceLink.AzureDevOpsServer.Gitpackage reference to your project file.
Microsoft.SourceLink.AzureDevOpsServer.Git
<ItemGroup>
  <PackageReference Include="Microsoft.SourceLink.AzureDevOpsServer.Git" Version="1.1.1" PrivateAssets="All"/>
</ItemGroup>
<ItemGroup>
  <PackageReference Include="Microsoft.SourceLink.AzureDevOpsServer.Git" Version="1.1.1" PrivateAssets="All"/>
</ItemGroup>
The Index Sources & Publish Symbols task is used to index your source code and publish your symbols to Azure Artifacts symbols server and file shares. Because we're usingSource Link, we'll have todisable indexingin the publish task.
Classic
YAML
Sign in to your Azure DevOps organization, and then navigate to your project.
Sign in to your Azure DevOps organization, and then navigate to your project.
SelectPipelines, select your pipeline, and then selectEditto modify your pipeline.
SelectPipelines, select your pipeline, and then selectEditto modify your pipeline.
From your pipeline definition, select+to add a new task.
From your pipeline definition, select+to add a new task.
+
Search for theIndex sources and publish symbolstask. SelectAddto add it to your pipeline.
Search for theIndex sources and publish symbolstask. SelectAddto add it to your pipeline.
Fill out the required fields and selectSymbol Serverfor theSymbol server type. Make sure you uncheckIndex sourcesto disable indexing.
Fill out the required fields and selectSymbol Serverfor theSymbol server type. Make sure you uncheckIndex sourcesto disable indexing.

To publish your portable PDBs to Azure Artifacts symbol server add the following snippet to your YAML pipeline:
- task: PublishSymbols@2
  inputs:
    SymbolsFolder: '$(Build.SourcesDirectory)'
    SearchPattern: '**/bin/**/*.pdb'
    IndexSources: false
    PublishSymbols: true
    SymbolServerType: 'TeamServices' 
    SymbolExpirationInDays: '36530'
    IndexableFileFormats: 'Default'
    DetailedLog: true
    SymbolsArtifactName: 'Symbols_$(BuildConfiguration)'
- task: PublishSymbols@2
  inputs:
    SymbolsFolder: '$(Build.SourcesDirectory)'
    SearchPattern: '**/bin/**/*.pdb'
    IndexSources: false
    PublishSymbols: true
    SymbolServerType: 'TeamServices' 
    SymbolExpirationInDays: '36530'
    IndexableFileFormats: 'Default'
    DetailedLog: true
    SymbolsArtifactName: 'Symbols_$(BuildConfiguration)'
Important
To delete symbols published via theIndex Sources & Publish Symbolstask, you must first delete the build that generated those symbols. This can be accomplished by usingretention policiesor by manuallydeleting the run.
Set up Visual Studio
Note
Visual Studio for Mac does not support debugging using symbol servers.
Before starting to consume our symbols from Azure Artifacts symbol server, let's make sure that Visual Studio is set up properly:
In Visual Studio, selectToolsthenOptions.
In Visual Studio, selectToolsthenOptions.
SelectSymbolsfrom theDebuggingmenu.
SelectSymbolsfrom theDebuggingmenu.
Select the+sign to add a new symbol server location.
Select the+sign to add a new symbol server location.
+

A new dialog box will appear, select your account from the dropdown menu, and then select the organization that you wish to connect to. SelectConnectwhen you're done.
A new dialog box will appear, select your account from the dropdown menu, and then select the organization that you wish to connect to. SelectConnectwhen you're done.
SelectGeneralfrom the sameDebuggingsection. Scroll down and checkEnable Source Link supportto enable support for portable PDBs.
SelectGeneralfrom the sameDebuggingsection. Scroll down and checkEnable Source Link supportto enable support for portable PDBs.

Note
Checking theEnable source server supportoption allows you to useSource Serverin cases where the source code isn't available locally or the symbol file does not match the source code. If you want to enable debugging for third-party source code, deselect theEnable Just My Codecheckbox.
FAQs
A: A symbol file has the same retention period as the build that generated it. When you delete a build either manually or using retention policies, the symbols that were generated by that build will be deleted as well.
A: This is not possible at the moment. Source indexing is not currently supported for portable PDBs. The recommended approach is to configure your build to do the indexing.
Related articles
Debug with Visual Studio.
Debug with WinDbg.
Configure retention policies.
Feedback
Was this page helpful?
Additional resources