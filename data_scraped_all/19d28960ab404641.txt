Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Performance testing
Article
2024-11-19
7 contributors
Applies to: â Azure Cache for Redis
In this article
Testing the performance of a Redis instance can be a complicated task. The performance of a Redis instance can vary based on parameters such as the number of clients, the size of data values, and whether pipelining is being used. There also can be a tradeoff between optimizing throughput or latency.
Fortunately, several tools exist to make benchmarking Redis easier. Two of the most popular tools areredis-benchmarkandmemtier-benchmark. This article focuses on redis-benchmark.
How to use the redis-benchmark utility
Install open source Redis server to a client virtual machines (VMs) you can use for testing. The redis-benchmark utility is built into the open source Redis distribution. Follow theRedis documentationfor instructions on how to install the open source image.
Install open source Redis server to a client virtual machines (VMs) you can use for testing. The redis-benchmark utility is built into the open source Redis distribution. Follow theRedis documentationfor instructions on how to install the open source image.
The client VM used for testing should bein the same regionas your Azure Cache for Redis instance.
The client VM used for testing should bein the same regionas your Azure Cache for Redis instance.
Make sure the client VM you use hasat least as much compute and bandwidthas the cache instance being tested.
Make sure the client VM you use hasat least as much compute and bandwidthas the cache instance being tested.
Configure yournetwork isolationandfirewallsettings to ensure that the client VM is able to access your Azure Cache for Redis instance.
Configure yournetwork isolationandfirewallsettings to ensure that the client VM is able to access your Azure Cache for Redis instance.
If you're using TLS/SSL on your cache instance, you need to add the--tlsparameter to your redis-benchmark command or use a proxy likestunnel.
If you're using TLS/SSL on your cache instance, you need to add the--tlsparameter to your redis-benchmark command or use a proxy likestunnel.
--tls
Redis-benchmarkuses port 6379 by default. Use the-pparameter to override this setting. You need to do use-p, if you're using the SSL/TLS (port 6380) or are using the Enterprise tier (port 10000).
Redis-benchmarkuses port 6379 by default. Use the-pparameter to override this setting. You need to do use-p, if you're using the SSL/TLS (port 6380) or are using the Enterprise tier (port 10000).
Redis-benchmark
-p
-p
If you're using an Azure Cache for Redis instance that usesclustering, you need to add the--clusterparameter to yourredis-benchmarkcommand. Enterprise tier caches using the EnterpriseClusteringcan be treated as nonclustered caches and don't need this setting.
If you're using an Azure Cache for Redis instance that usesclustering, you need to add the--clusterparameter to yourredis-benchmarkcommand. Enterprise tier caches using the EnterpriseClusteringcan be treated as nonclustered caches and don't need this setting.
--cluster
redis-benchmark
Launchredis-benchmarkfrom the CLI or shell of the VM. For instructions on how to configure and run the tool, see theredis-benchmark documentationand theredis-benchmark examplessections.
Launchredis-benchmarkfrom the CLI or shell of the VM. For instructions on how to configure and run the tool, see theredis-benchmark documentationand theredis-benchmark examplessections.
redis-benchmark
Benchmarking recommendations
It's important to not only test the performance of your cache under steady state conditions.Test under failover conditions too, and measure the CPU/Server Load on your cache during that time. You can start a failover byrebooting the primary node. Testing under failover conditions allows you to see the throughput and latency of your application during failover conditions. Failover can happen during updates or during an unplanned event. Ideally, you don't want to see CPU/Server Load peak to more than say 80% even during a failover as that can affect performance.
It's important to not only test the performance of your cache under steady state conditions.Test under failover conditions too, and measure the CPU/Server Load on your cache during that time. You can start a failover byrebooting the primary node. Testing under failover conditions allows you to see the throughput and latency of your application during failover conditions. Failover can happen during updates or during an unplanned event. Ideally, you don't want to see CPU/Server Load peak to more than say 80% even during a failover as that can affect performance.
Consider using Enterprise and Premium tier Azure Cache for Redis instances. These cache sizes have better network latency and throughput because they're running on better hardware.
Consider using Enterprise and Premium tier Azure Cache for Redis instances. These cache sizes have better network latency and throughput because they're running on better hardware.
The Enterprise tier generally has the best performance, as Redis Enterprise allows the core Redis process to utilize multiple vCPUs. Tiers based on open source Redis, such as Standard and Premium, are only able to utilize one vCPU for the Redis process per shard.
The Enterprise tier generally has the best performance, as Redis Enterprise allows the core Redis process to utilize multiple vCPUs. Tiers based on open source Redis, such as Standard and Premium, are only able to utilize one vCPU for the Redis process per shard.
Benchmarking the Enterprise Flash tier can be difficult because some keys are stored on DRAM whiles some are stored on a NVMe flash disk. The keys on DRAM benchmark almost as fast as an Enterprise tier instance, but the keys on the NVMe flash disk are slower. Since the Enterprise Flash tier intelligently places the most-used keys into DRAM, ensure that your benchmark configuration matches the actual usage you expect. Consider using the-rparameter to randomize which keys are accessed.
Benchmarking the Enterprise Flash tier can be difficult because some keys are stored on DRAM whiles some are stored on a NVMe flash disk. The keys on DRAM benchmark almost as fast as an Enterprise tier instance, but the keys on the NVMe flash disk are slower. Since the Enterprise Flash tier intelligently places the most-used keys into DRAM, ensure that your benchmark configuration matches the actual usage you expect. Consider using the-rparameter to randomize which keys are accessed.
-r
Using TLS/SSL decreases throughput performance, which can be seen clearly in the example benchmarking data in the following tables.
Using TLS/SSL decreases throughput performance, which can be seen clearly in the example benchmarking data in the following tables.
Even though a Redis server is single-threaded, scaling up tends to improve throughput performance. System processes can use the extra vCPUs instead of sharing the vCPU being used by the Redis process. Scaling up is especially helpful on the Enterprise and Enterprise Flash tiers because Redis Enterprise isn't limited to a single thread.
Even though a Redis server is single-threaded, scaling up tends to improve throughput performance. System processes can use the extra vCPUs instead of sharing the vCPU being used by the Redis process. Scaling up is especially helpful on the Enterprise and Enterprise Flash tiers because Redis Enterprise isn't limited to a single thread.
On the Premium tier, scaling out, clustering, is typically recommended before scaling up. Clustering allows Redis server to use more vCPUs by sharding data. Throughput should increase roughly linearly when adding shards in this case.
On the Premium tier, scaling out, clustering, is typically recommended before scaling up. Clustering allows Redis server to use more vCPUs by sharding data. Throughput should increase roughly linearly when adding shards in this case.
OnC0andC1Standard caches, while internal Defender scanning is running on the VMs, you might see short spikes in server load not caused by an increase in cache requests. You see higher latency for requests while internal Defender scans are run on these tiers a couple of times a day. Caches on theC0andC1tiers only have a single core to multitask, dividing the work of serving internal Defender scanning and Redis requests. You can reduce the effect by scaling to a higher tier offering with multiple CPU cores, such asC2.The increased cache size on the higher tiers helps address any latency concerns. Also, at theC2level, you have support for as many as 2,000 client connections.
OnC0andC1Standard caches, while internal Defender scanning is running on the VMs, you might see short spikes in server load not caused by an increase in cache requests. You see higher latency for requests while internal Defender scans are run on these tiers a couple of times a day. Caches on theC0andC1tiers only have a single core to multitask, dividing the work of serving internal Defender scanning and Redis requests. You can reduce the effect by scaling to a higher tier offering with multiple CPU cores, such asC2.
The increased cache size on the higher tiers helps address any latency concerns. Also, at theC2level, you have support for as many as 2,000 client connections.
Redis-benchmark examples
Pre-test setup:
Prepare the cache instance with data required for the latency and throughput testing:
redis-benchmark -h yourcache.redis.cache.windows.net -a yourAccesskey -t SET -n 10 -d 1024
redis-benchmark -h yourcache.redis.cache.windows.net -a yourAccesskey -t SET -n 10 -d 1024
To test latency:
Test GET requests using a 1k payload:
redis-benchmark -h yourcache.redis.cache.windows.net -a yourAccesskey -t GET -d 1024 -P 50 -c 4
redis-benchmark -h yourcache.redis.cache.windows.net -a yourAccesskey -t GET -d 1024 -P 50 -c 4
To test throughput:Pipelined GET requests with 1k payload:
redis-benchmark -h yourcache.redis.cache.windows.net -a yourAccesskey -t  GET -n 1000000 -d 1024 -P 50  -c 50
redis-benchmark -h yourcache.redis.cache.windows.net -a yourAccesskey -t  GET -n 1000000 -d 1024 -P 50  -c 50
To test throughput of a Basic, Standard, or Premium tier cache using TLS:Pipelined GET requests with 1k payload:
redis-benchmark -h yourcache.redis.cache.windows.net -p 6380 -a yourAccesskey -t  GET -n 1000000 -d 1024 -P 50 -c 50 --tls
redis-benchmark -h yourcache.redis.cache.windows.net -p 6380 -a yourAccesskey -t  GET -n 1000000 -d 1024 -P 50 -c 50 --tls
To test throughput of an Enterprise or Enterprise Flash cache without TLS using OSS Cluster Mode:Pipelined GET requests with 1k payload:
redis-benchmark -h yourcache.region.redisenterprise.cache.azure.net -p 10000 -a yourAccesskey -t  GET -n 1000000 -d 1024 -P 50 -c 50 --cluster
redis-benchmark -h yourcache.region.redisenterprise.cache.azure.net -p 10000 -a yourAccesskey -t  GET -n 1000000 -d 1024 -P 50 -c 50 --cluster
Example performance benchmark data
The following tables show the maximum throughput values that were observed while testing various sizes of Standard, Premium, Enterprise, and Enterprise Flash caches. We usedredis-benchmarkandmemtier-benchmarkfrom an IaaS Azure VM against the Azure Cache for Redis endpoint. The throughput numbers are only for GET commands. Typically, SET commands have a lower throughput. These numbers are optimized for throughput. Real-world throughput under acceptable latency conditions might be lower.
redis-benchmark
memtier-benchmark
Caution
These values aren't guaranteed and there's no SLA for these numbers. We strongly recommend that you shouldperform your own performance testingto determine the right cache size for your application.
These numbers might change as we post newer results periodically.
Important
Microsoft periodically updates the underlying VM used in cache instances. This can change the performance characteristics from cache to cache and from region to region. The example benchmarking values on this page reflect older generation cache hardware in a single region. You may see better or different results in practice.
redis-benchmark
memtier-benchmark
The following configuration was used to benchmark throughput for the Basic, Standard, and Premium tiers:
redis-benchmark -h yourcache.redis.cache.windows.net -a yourAccesskey -t  GET -n 1000000 -d 1024 -P 50  -c 50
redis-benchmark -h yourcache.redis.cache.windows.net -a yourAccesskey -t  GET -n 1000000 -d 1024 -P 50  -c 50
Important
P5 instances in the China East and China North regions use 20 cores, not 32 cores.
The following configuration was used to benchmark throughput for the Basic, Standard, and Premium tiers:
memtier_benchmark -h {your-cache-name}.{region}.redis.azure.net -p 10000 -a {your-access-key} --hide-histogram --pipeline=10 -c 50 -t 6 -d 1024 --key-maximum={number-of-keys} --key-pattern=P:P --ratio=0:1 --distinct-client-seed --randomize --test-time=600 --json-out-file=test_results.json --tls --tls-skip-verify
memtier_benchmark -h {your-cache-name}.{region}.redis.azure.net -p 10000 -a {your-access-key} --hide-histogram --pipeline=10 -c 50 -t 6 -d 1024 --key-maximum={number-of-keys} --key-pattern=P:P --ratio=0:1 --distinct-client-seed --randomize --test-time=600 --json-out-file=test_results.json --tls --tls-skip-verify
Important
P5 instances in the China East and China North regions use 20 cores, not 32 cores.
redis-benchmark
memtier-benchmark
The Enterprise and Enterprise Flash tiers offer a choice of cluster policy:EnterpriseandOSS. Enterprise cluster policy is a simpler configuration that doesn't require the client to support clustering. OSS cluster policy, on the other hand, uses theRedis cluster protocolto support higher throughputs. We recommend using OSS cluster policy in most cases. For more information, seeClustering. Benchmarks for both cluster policies are shown in the following tables.
The following configuration was used to benchmark throughput for the Enterprise and Enterprise flash tiers:
redis-benchmark -h yourcache.region.redisenterprise.cache.azure.net -p 10000 -a yourAccesskey -t GET -n 10000000 -d 1024 -P 50 -c 50 --threads 32
redis-benchmark -h yourcache.region.redisenterprise.cache.azure.net -p 10000 -a yourAccesskey -t GET -n 10000000 -d 1024 -P 50 -c 50 --threads 32
Note
This configuration is nearly identical to the one used to benchmark the Basic, Standard, and Premium tiers. The previous configuration, however, did not fully utilize the greater compute performance of the Enterprise tiers. Additional requests and threads were added to this configuration in order to demonstrate full performance.
GET
GET
GET
GET
In addition to scaling up by moving to larger cache size, you can boost performance byscaling out. In the Enterprise tiers, scaling out is called increasing thecapacityof the cache instance. A cache instance by default has capacity of two--meaning a primary and replica node. An Enterprise cache instance with a capacity of four indicates that the instance was scaled out by a factor of two. Scaling out provides access to more memory and vCPUs. Details on how many vCPUs are used by the core Redis process at each cache size and capacity can be found at theSharding configuration. Scaling out is most effective when using the OSS cluster policy.
The following tables show theGETrequests per second at different capacities, using SSL and a 1-kB value size.
GET
The memtier benchmarks are not yet available for the Azure Cache for Redis Enterprise tiers.
Next steps
Development
Azure Cache for Redis development FAQs
Failover and patching for Azure Cache for Redis
Feedback
Was this page helpful?
Additional resources