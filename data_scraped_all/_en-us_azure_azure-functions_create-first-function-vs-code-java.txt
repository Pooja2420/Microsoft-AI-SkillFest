Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Quickstart: Create a Java function in Azure using Visual Studio Code
Article
2024-07-18
7 contributors
In this article
C#
Java
JavaScript
PowerShell
Python
TypeScript
Other (Go/Rust)
In this article, you use Visual Studio Code to create a Java function that responds to HTTP requests. After testing the code locally, you deploy it to the serverless environment of Azure Functions.
If Visual Studio Code isn't your preferred development tool, check out our similar tutorials for Java developers:
Gradle
IntelliJ IDEA
Maven
Completing this quickstart incurs a small cost of a few USD cents or less in your Azure account.
Configure your environment
Before you get started, make sure you have the following requirements in place:
An Azure account with an active subscription.Create an account for free.
An Azure account with an active subscription.Create an account for free.
TheJava Development Kit, version 8, 11, 17 or 21(Linux).
TheJava Development Kit, version 8, 11, 17 or 21(Linux).
Apache Maven, version 3.0 or above.
Apache Maven, version 3.0 or above.
Visual Studio Codeon one of thesupported platforms.
Visual Studio Codeon one of thesupported platforms.
TheJava extension pack
TheJava extension pack
TheAzure Functions extensionfor Visual Studio Code.
TheAzure Functions extensionfor Visual Studio Code.
Install or update Core Tools
The Azure Functions extension for Visual Studio Code integrates with Azure Functions Core Tools so that you can run and debug your functions locally in Visual Studio Code using the Azure Functions runtime. Before getting started, it's a good idea to install Core Tools locally or update an existing installation to use the latest version.
In Visual Studio Code, select F1 to open the command palette, and then search for and run the commandAzure Functions: Install or Update Core Tools.
This command tries to either start a package-based installation of the latest version of Core Tools or update an existing package-based installation. If you don't have npm or Homebrew installed on your local computer, you must insteadmanually install or update Core Tools.
Create your local project
In this section, you use Visual Studio Code to create a local Azure Functions project in Java. Later in this article, you'll publish your function code to Azure.
In Visual Studio Code, pressF1to open the command palette and search for and run the commandAzure Functions: Create New Project....
In Visual Studio Code, pressF1to open the command palette and search for and run the commandAzure Functions: Create New Project....
Azure Functions: Create New Project...
Choose the directory location for your project workspace and chooseSelect. You should either create a new folder or choose an empty folder for the project workspace. Don't choose a project folder that is already part of a workspace.
Choose the directory location for your project workspace and chooseSelect. You should either create a new folder or choose an empty folder for the project workspace. Don't choose a project folder that is already part of a workspace.
Provide the following information at the prompts:PromptSelectionSelect a languageChooseJava.Select a version of JavaChooseJava 8,Java 11,Java 17orJava 21, the Java version on which your functions run in Azure. Choose a Java version that you've verified locally.Provide a group IDChoosecom.function.Provide an artifact IDChoosemyFunction.Provide a versionChoose1.0-SNAPSHOT.Provide a package nameChoosecom.function.Provide an app nameChoosemyFunction-12345.Select a template for your project's first functionChooseHTTP trigger.Select the build tool for Java projectChooseMaven.Provide a function nameEnterHttpExample.Authorization levelChooseAnonymous, which lets anyone call your function endpoint. For more information, seeAuthorization level.Select how you would like to open your projectChooseOpen in current window.
Provide the following information at the prompts:
Java
Java 8
Java 11
Java 17
Java 21
com.function
myFunction
1.0-SNAPSHOT
com.function
myFunction-12345
HTTP trigger
Maven
HttpExample
Anonymous
Open in current window
Visual Studio Code uses the provided information and generates an Azure Functions project with an HTTP trigger. You can view the local project files in the Explorer. For more information about the files that are created, seeGenerated project files.
Visual Studio Code uses the provided information and generates an Azure Functions project with an HTTP trigger. You can view the local project files in the Explorer. For more information about the files that are created, seeGenerated project files.
Run the function locally
Visual Studio Code integrates withAzure Functions Core toolsto let you run this project on your local development computer before you publish to Azure.
To start the function locally, pressF5or theRun and Debugicon in the left-hand side Activity bar. TheTerminalpanel displays the Output from Core Tools. Your app starts in theTerminalpanel. You can see the URL endpoint of your HTTP-triggered function running locally.If you have trouble running on Windows, make sure that the default terminal for Visual Studio Code isn't set toWSL Bash.
To start the function locally, pressF5or theRun and Debugicon in the left-hand side Activity bar. TheTerminalpanel displays the Output from Core Tools. Your app starts in theTerminalpanel. You can see the URL endpoint of your HTTP-triggered function running locally.

If you have trouble running on Windows, make sure that the default terminal for Visual Studio Code isn't set toWSL Bash.
With Core Tools still running inTerminal, choose the Azure icon in the activity bar. In theWorkspacearea, expandLocal Project>Functions. Right-click (Windows) orCtrl -click (macOS) the new function and chooseExecute Function Now....
With Core Tools still running inTerminal, choose the Azure icon in the activity bar. In theWorkspacearea, expandLocal Project>Functions. Right-click (Windows) orCtrl -click (macOS) the new function and chooseExecute Function Now....

InEnter request bodyyou see the request message body value of{ "name": "Azure" }. Press Enter to send this request message to your function.
InEnter request bodyyou see the request message body value of{ "name": "Azure" }. Press Enter to send this request message to your function.
{ "name": "Azure" }
When the function executes locally and returns a response, a notification is raised in Visual Studio Code. Information about the function execution is shown inTerminalpanel.
When the function executes locally and returns a response, a notification is raised in Visual Studio Code. Information about the function execution is shown inTerminalpanel.
With theTerminalpanel focused, pressCtrl + Cto stop Core Tools and disconnect the debugger.
With theTerminalpanel focused, pressCtrl + Cto stop Core Tools and disconnect the debugger.
After you've verified that the function runs correctly on your local computer, it's time to use Visual Studio Code to publish the project directly to Azure.
Sign in to Azure
Before you can create Azure resources or publish your app, you must sign in to Azure.
If you aren't already signed in, in theActivity bar, select the Azure icon. Then underResources, selectSign in to Azure.If you're already signed in and can see your existing subscriptions, go to the next section. If you don't yet have an Azure account, selectCreate an Azure Account. Students can selectCreate an Azure for Students Account.
If you aren't already signed in, in theActivity bar, select the Azure icon. Then underResources, selectSign in to Azure.

If you're already signed in and can see your existing subscriptions, go to the next section. If you don't yet have an Azure account, selectCreate an Azure Account. Students can selectCreate an Azure for Students Account.
When you are prompted in the browser, select your Azure account and sign in by using your Azure account credentials. If you create a new account, you can sign in after your account is created.
When you are prompted in the browser, select your Azure account and sign in by using your Azure account credentials. If you create a new account, you can sign in after your account is created.
After you successfully sign in, you can close the new browser window. The subscriptions that belong to your Azure account are displayed in the side bar.
After you successfully sign in, you can close the new browser window. The subscriptions that belong to your Azure account are displayed in the side bar.
Create the function app in Azure
In this section, you create a function app and related resources in your Azure subscription. Many of the resource creation decisions are made for you based on default behaviors. For more control over the created resources, you must insteadcreate your function app with advanced options.
In Visual Studio Code, select F1 to open the command palette. At the prompt (>), enter and then selectAzure Functions: Create Function App in Azure.
In Visual Studio Code, select F1 to open the command palette. At the prompt (>), enter and then selectAzure Functions: Create Function App in Azure.
>
At the prompts, provide the following information:PromptActionSelect subscriptionSelect the Azure subscription to use. The prompt doesn't appear when you have only one subscription visible underResources.Enter a globally unique name for the function appEnter a name that is valid in a URL path. The name you enter is validated to make sure that it's unique in Azure Functions.Select a runtime stackSelect the language version you currently run locally.Select a location for new resourcesSelect an Azure region. For better performance, select aregionnear you.In theAzure: Activity Logpanel, the Azure extension shows the status of individual resources as they're created in Azure.
At the prompts, provide the following information:
In theAzure: Activity Logpanel, the Azure extension shows the status of individual resources as they're created in Azure.

When the function app is created, the following related resources are created in your Azure subscription. The resources are named based on the name you entered for your function app.Aresource group, which is a logical container for related resources.A standardAzure Storage account, which maintains state and other information about your projects.A function app, which provides the environment for executing your function code. A function app lets you group functions as a logical unit for easier management, deployment, and sharing of resources within the same hosting plan.An Azure App Service plan, which defines the underlying host for your function app.An Application Insights instance that's connected to the function app, and which tracks the use of your functions in the app.A notification is displayed after your function app is created and the deployment package is applied.TipBy default, the Azure resources required by your function app are created based on the name you enter for your function app. By default, the resources are created with the function app in the same, new resource group. If you want to customize the names of the associated resources or reuse existing resources,publish the project with advanced create options.
When the function app is created, the following related resources are created in your Azure subscription. The resources are named based on the name you entered for your function app.
Aresource group, which is a logical container for related resources.
A standardAzure Storage account, which maintains state and other information about your projects.
A function app, which provides the environment for executing your function code. A function app lets you group functions as a logical unit for easier management, deployment, and sharing of resources within the same hosting plan.
An Azure App Service plan, which defines the underlying host for your function app.
An Application Insights instance that's connected to the function app, and which tracks the use of your functions in the app.
A notification is displayed after your function app is created and the deployment package is applied.
Tip
By default, the Azure resources required by your function app are created based on the name you enter for your function app. By default, the resources are created with the function app in the same, new resource group. If you want to customize the names of the associated resources or reuse existing resources,publish the project with advanced create options.
Deploy the project to Azure
Important
Deploying to an existing function app always overwrites the contents of that app in Azure.
In the command palette, enter and then selectAzure Functions: Deploy to Function App.
In the command palette, enter and then selectAzure Functions: Deploy to Function App.
Select the function app you just created. When prompted about overwriting previous deployments, selectDeployto deploy your function code to the new function app resource.
Select the function app you just created. When prompted about overwriting previous deployments, selectDeployto deploy your function code to the new function app resource.
When deployment is completed, selectView Outputto view the creation and deployment results, including the Azure resources that you created. If you miss the notification, select the bell icon in the lower-right corner to see it again.
When deployment is completed, selectView Outputto view the creation and deployment results, including the Azure resources that you created. If you miss the notification, select the bell icon in the lower-right corner to see it again.

Run the function in Azure
PressF1to display the command palette, then search for and run the commandAzure Functions:Execute Function Now.... If prompted, select your subscription.
PressF1to display the command palette, then search for and run the commandAzure Functions:Execute Function Now.... If prompted, select your subscription.
Azure Functions:Execute Function Now...
Select your new function app resource andHttpExampleas your function.
Select your new function app resource andHttpExampleas your function.
HttpExample
InEnter request bodytype{ "name": "Azure" }, then press Enter to send this request message to your function.
InEnter request bodytype{ "name": "Azure" }, then press Enter to send this request message to your function.
{ "name": "Azure" }
When the function executes in Azure, the response is displayed in the notification area. Expand the notification to review the full response.
When the function executes in Azure, the response is displayed in the notification area. Expand the notification to review the full response.
Clean up resources
When you continue to thenext stepand add an Azure Storage queue binding to your function, you'll need to keep all your resources in place to build on what you've already done.
Otherwise, you can use the following steps to delete the function app and its related resources to avoid incurring any further costs.
In Visual Studio Code, pressF1to open the command palette. In the command palette, search for and selectAzure: Open in portal.
In Visual Studio Code, pressF1to open the command palette. In the command palette, search for and selectAzure: Open in portal.
Azure: Open in portal
Choose your function app and pressEnter. The function app page opens in the Azure portal.
Choose your function app and pressEnter. The function app page opens in the Azure portal.
In theOverviewtab, select the named link next toResource group.
In theOverviewtab, select the named link next toResource group.

On theResource grouppage, review the list of included resources, and verify that they're the ones you want to delete.
On theResource grouppage, review the list of included resources, and verify that they're the ones you want to delete.
SelectDelete resource group, and follow the instructions.Deletion may take a couple of minutes. When it's done, a notification appears for a few seconds. You can also select the bell icon at the top of the page to view the notification.
SelectDelete resource group, and follow the instructions.
Deletion may take a couple of minutes. When it's done, a notification appears for a few seconds. You can also select the bell icon at the top of the page to view the notification.
For more information about Functions costs, seeEstimating Consumption plan costs.
Next steps
You have usedVisual Studio Codeto create a function app with a simple HTTP-triggered function. In the next article, you expand that function by connecting to Azure Storage. To learn more about connecting to other Azure services, seeAdd bindings to an existing function in Azure Functions.
Connect to an Azure Storage queue
Feedback
Was this page helpful?
Additional resources