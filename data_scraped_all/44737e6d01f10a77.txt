Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Add caching to improve performance in Azure API Management
Article
2024-12-04
16 contributors
In this article
APPLIES TO: Developer | Basic | Basic v2 | Standard | Standard v2 | Premium | Premium v2
APIs and operations in API Management can be configured with response caching. Response caching can significantly reduce latency for API callers and backend load for API providers.
Important
Built-in cache is volatile and is shared by all units in the same region in the same API Management service. Regardless of the cache type being used (internal or external), if the cache-related operations fail to connect to the cache due to the volatility of the cache or any other reason, the API call that uses the cache related operation doesn't raise an error, and the cache operation completes successfully. In the case of a read operation, a null value is returned to the calling policy expression. Your policy code should be designed to ensure that there's a "fallback" mechanism to retrieve data not found in the cache.
For more detailed information about caching, seeAPI Management caching policiesandCustom caching in Azure API Management.

What you'll learn:
Add response caching for your API
Verify caching in action
Note
Internal cache is not available in theConsumptiontier of Azure API Management. You canuse an external Azure Cache for Redisinstead. You can also configure an external cache in other API Management service tiers.
Prerequisites
To complete this tutorial:
Create an Azure API Management instance
Import and publish an API
Add the caching policies
With caching policies shown in this example, the first request to a test operation returns a response from the backend service. This response is cached, keyed by the specified headers and query string parameters. Subsequent calls to the operation, with matching parameters, will have the cached response returned, until the cache duration interval has expired.
Sign in to theAzure portal.
Sign in to theAzure portal.
Browse to your API Management instance.
Browse to your API Management instance.
SelectAPIs>APIsfrom the menu on the left.
SelectAPIs>APIsfrom the menu on the left.
Select an API for which you want to configure caching.
Select an API for which you want to configure caching.
On the top of the screen, selectDesigntab.
On the top of the screen, selectDesigntab.
In theInbound processingsection, select the</>icon.
In theInbound processingsection, select the</>icon.
In theinboundelement, add the following policy:<cache-lookup vary-by-developer="false" vary-by-developer-groups="false">
    <vary-by-header>Accept</vary-by-header>
    <vary-by-header>Accept-Charset</vary-by-header>
    <vary-by-header>Authorization</vary-by-header>
</cache-lookup>
In theinboundelement, add the following policy:
inbound
<cache-lookup vary-by-developer="false" vary-by-developer-groups="false">
    <vary-by-header>Accept</vary-by-header>
    <vary-by-header>Accept-Charset</vary-by-header>
    <vary-by-header>Authorization</vary-by-header>
</cache-lookup>
<cache-lookup vary-by-developer="false" vary-by-developer-groups="false">
    <vary-by-header>Accept</vary-by-header>
    <vary-by-header>Accept-Charset</vary-by-header>
    <vary-by-header>Authorization</vary-by-header>
</cache-lookup>
In theoutboundelement, add the following policy:<cache-store duration="20" />In this policy,durationspecifies the expiration interval of the cached responses. In this example, the interval is20seconds.
In theoutboundelement, add the following policy:
outbound
<cache-store duration="20" />
<cache-store duration="20" />
In this policy,durationspecifies the expiration interval of the cached responses. In this example, the interval is20seconds.
Tip
If you are using an external cache, as described inUse an external Azure Cache for Redis in Azure API Management, you may want to specify thecaching-typeattribute of the caching policies. SeeAPI Management caching policiesfor more details.
caching-type
Call an operation and test the caching
To see the caching in action, call an operation from the portal.
In the Azure portal, browse to your API Management instance.
SelectAPIs>APIsfrom the menu on the left.
Select the API to which you added caching policies.
Select an operation to test.
Select theTesttab in the top right menu.
SelectTracetwo or three times in quick succession.
UnderHTTP response, select theTracetab.
Jump to theInboundsection and scroll to thecache-lookuppolicy. You should see a message similar to the one in the following screenshot, indicating a cache hit:
cache-lookup
Related content
For more information about caching policies, seeCaching policiesin theAPI Management policy reference.
For information on caching items by key using policy expressions, seeCustom caching in Azure API Management.
For more information about using external Azure Cache for Redis or Azure Managed Redis, seeUse an external Azure Cache for Redis in Azure API Management.
Feedback
Was this page helpful?
Additional resources