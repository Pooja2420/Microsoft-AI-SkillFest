Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Quickstart: Deploy your first application to Azure Spring Apps
Article
2024-11-19
2 contributors
In this article
Note
TheBasic,Standard, andEnterpriseplans entered a retirement period on March 17, 2025. For more information, see theAzure Spring Apps retirement announcement.
TheStandard consumption and dedicatedplan entered a retirement period on September 30, 2024, with a complete shutdown by the end of March 2025. For more information, seeMigrate Azure Spring Apps Standard consumption and dedicated plan to Azure Container Apps.
This article explains how to deploy a small application to run on Azure Spring Apps.
The application code used in this tutorial is a simple app. When you complete this example, the application is accessible online, and you can manage it through the Azure portal.
This article provides the following options for deploying to Azure Spring Apps:
TheAzure portaloption is the easiest and the fastest way to create resources and deploy applications with a single click. This option is suitable for Spring developers who want to quickly deploy applications to Azure cloud services.
TheAzure portal + Maven pluginoption is a more conventional way to create resources and deploy applications step by step. This option is suitable for Spring developers using Azure cloud services for the first time.
TheAzure Developer CLIoption is a more efficient way to automatically create resources and deploy applications through simple commands. The Azure Developer CLI uses a template to provision the Azure resources needed and to deploy the application code. This option is suitable for Spring developers who are familiar with Azure cloud services.
TheAzure portaloption is the easiest and the fastest way to create resources and deploy applications with a single click. This option is suitable for Spring developers who want to quickly deploy applications to Azure cloud services.
TheAzure portal + Maven pluginoption is a more conventional way to create resources and deploy applications step by step. This option is suitable for Spring developers using Azure cloud services for the first time.
TheAzure CLIoption uses a powerful command line tool to manage Azure resources. This option is suitable for Spring developers who are familiar with Azure cloud services.
TheIntelliJoption uses a powerful Java IDE to easily manage Azure resources. This option is suitable for Spring developers who are familiar with Azure cloud services and IntelliJ IDEA.
TheVisual Studio Codeoption uses a lightweight but powerful source code editor, which can easily manage Azure resources. This option is suitable for Spring developers who are familiar with Azure cloud services and Visual Studio Code.
1. Prerequisites
Azure portal
Azure portal + Maven plugin
Azure Developer CLI
An Azure subscription. If you don't have anAzure subscription, create anAzure free accountbefore you begin.
An Azure subscription. If you don't have anAzure subscription, create anAzure free accountbefore you begin.
Git.
Java Development Kit (JDK), version 17.
An Azure subscription. If you don't have anAzure subscription, create anAzure free accountbefore you begin.
Git.
Java Development Kit (JDK), version 17.
Azure Developer CLI (AZD), version 1.2.0 or higher.
Azure portal
Azure portal + Maven plugin
Azure CLI
IntelliJ
Visual Studio Code
An Azure subscription. If you don't have anAzure subscription, create anAzure free accountbefore you begin.
If you're deploying an Azure Spring Apps Enterprise plan instance for the first time in the target subscription, see theRequirementssection ofEnterprise plan in Azure Marketplace.
An Azure subscription. If you don't have anAzure subscription, create anAzure free accountbefore you begin.
If you're deploying an Azure Spring Apps Enterprise plan instance for the first time in the target subscription, see theRequirementssection ofEnterprise plan in Azure Marketplace.
Git.
Java Development Kit (JDK), version 17.
An Azure subscription. If you don't have anAzure subscription, create anAzure free accountbefore you begin.
If you're deploying an Azure Spring Apps Enterprise plan instance for the first time in the target subscription, see theRequirementssection ofEnterprise plan in Azure Marketplace.
Git.
Java Development Kit (JDK), version 17.
Azure CLIversion 2.45.0 or higher.
An Azure subscription. If you don't have anAzure subscription, create anAzure free accountbefore you begin.
If you're deploying an Azure Spring Apps Enterprise plan instance for the first time in the target subscription, see theRequirementssection ofEnterprise plan in Azure Marketplace.
Java Development Kit (JDK), version 17.
IntelliJ IDEA.
Azure Toolkit for IntelliJ.
An Azure subscription. If you don't have anAzure subscription, create anAzure free accountbefore you begin.
If you're deploying an Azure Spring Apps Enterprise plan instance for the first time in the target subscription, see theRequirementssection ofEnterprise plan in Azure Marketplace.
Java Development Kit (JDK), version 17.
Visual Studio Code.
2. Prepare the Spring project
Azure portal
Azure portal + Maven plugin
Azure Developer CLI
TheDeploy to Azurebutton in the next section launches an Azure portal experience that downloads a JAR package from thespring-cloud-azure-tools releasespage on GitHub. No local preparation steps are needed.
Use the following steps to prepare the project:
Use the following command to clone theSpring Boot sample project for Azurefrom GitHub.git clone https://github.com/spring-guides/gs-spring-boot-for-azure.git
Use the following command to clone theSpring Boot sample project for Azurefrom GitHub.
git clone https://github.com/spring-guides/gs-spring-boot-for-azure.git
git clone https://github.com/spring-guides/gs-spring-boot-for-azure.git
Use the following command to move to the project folder:cd gs-spring-boot-for-azure/complete
Use the following command to move to the project folder:
cd gs-spring-boot-for-azure/complete
cd gs-spring-boot-for-azure/complete
Use the followingMavencommand to build the project:./mvnw clean package
Use the followingMavencommand to build the project:
./mvnw clean package
./mvnw clean package
Run the sample project locally by using the following command:./mvnw spring-boot:run
Run the sample project locally by using the following command:
./mvnw spring-boot:run
./mvnw spring-boot:run
Use the following steps to initialize the application from the Azure Developer CLI templates:
Open a terminal, create an empty folder, and then change directory into it.
Open a terminal, create an empty folder, and then change directory into it.
Use the following command to initialize the project:azd init --template spring-guides/gs-spring-boot-for-azureThe following list describes the command interactions:OAuth2 login: You need to authorize the sign in to Azure based on the OAuth2 protocol.Please enter a new environment name: Provide an environment name, which is used as a suffix for the resource group created to hold all Azure resources. This name should be unique within your Azure subscription.The console outputs messages similar to the following example:Initializing a new project (azd init)

(â) Done: Initialized git repository
(â) Done: Downloading template code to: <your-local-path>
Enter a new environment name: <your-env-name>
SUCCESS: New project initialized!
You can view the template code in your directory: <your-local-path>
Learn more about running 3rd party code on our DevHub: https://aka.ms/azd-third-party-code-notice
Use the following command to initialize the project:
azd init --template spring-guides/gs-spring-boot-for-azure
azd init --template spring-guides/gs-spring-boot-for-azure
The following list describes the command interactions:
OAuth2 login: You need to authorize the sign in to Azure based on the OAuth2 protocol.
Please enter a new environment name: Provide an environment name, which is used as a suffix for the resource group created to hold all Azure resources. This name should be unique within your Azure subscription.
The console outputs messages similar to the following example:
Initializing a new project (azd init)

(â) Done: Initialized git repository
(â) Done: Downloading template code to: <your-local-path>
Enter a new environment name: <your-env-name>
SUCCESS: New project initialized!
You can view the template code in your directory: <your-local-path>
Learn more about running 3rd party code on our DevHub: https://aka.ms/azd-third-party-code-notice
Initializing a new project (azd init)

(â) Done: Initialized git repository
(â) Done: Downloading template code to: <your-local-path>
Enter a new environment name: <your-env-name>
SUCCESS: New project initialized!
You can view the template code in your directory: <your-local-path>
Learn more about running 3rd party code on our DevHub: https://aka.ms/azd-third-party-code-notice
3. Prepare the cloud environment
This section describes how to create an Azure Spring Apps service instance and prepare the Azure cloud environment.
Azure portal
Azure portal + Maven plugin
Azure Developer CLI
This section uses aDeploy to Azurebutton to launch a deployment experience in the Azure portal. This experience uses anARM templateto create Azure resources.
3.1. Sign in to the Azure portal
Go to theAzure portaland enter your credentials to sign in to the portal. The default view is your service dashboard.
3.2. Create Azure resources
Use the following steps to create all the Azure resources that the app depends on:
Select the followingDeploy to Azurebutton to launch the deployment experience in the Azure portal:
Select the followingDeploy to Azurebutton to launch the deployment experience in the Azure portal:

Fill out the form on theBasicstab. Use the following table as a guide for completing the form:SettingSuggested valueDescriptionSubscriptionYour subscription name.The Azure subscription that you want to use for your server. If you have multiple subscriptions, choose the subscription in which you'd like to be billed for the resource.Resource groupmyresourcegroupA new resource group name or an existing one from your subscription.RegionThe region closest to your users.The region is used to create the resource group.
Fill out the form on theBasicstab. Use the following table as a guide for completing the form:
SelectReview and Createto review your selections. Then, selectCreateto deploy the app to Azure Spring Apps.
SelectReview and Createto review your selections. Then, selectCreateto deploy the app to Azure Spring Apps.
On the toolbar, select theNotificationsicon (a bell) to monitor the deployment process. After the deployment finishes, you can selectPin to dashboard, which creates a tile for this service on your Azure portal dashboard as a shortcut to the service'sOverviewpage. SelectGo to resourceto open the service'sOverviewpage.
On the toolbar, select theNotificationsicon (a bell) to monitor the deployment process. After the deployment finishes, you can selectPin to dashboard, which creates a tile for this service on your Azure portal dashboard as a shortcut to the service'sOverviewpage. SelectGo to resourceto open the service'sOverviewpage.

3.1. Sign in to the Azure portal
Go to theAzure portaland enter your credentials to sign in to the portal. The default view is your service dashboard.
3.2. Create an Azure Spring Apps instance
Use the following steps to create an Azure Spring Apps service instance:
SelectCreate a resourcein the corner of the Azure portal.
SelectCreate a resourcein the corner of the Azure portal.
SelectCompute>Azure Spring Apps.
SelectCompute>Azure Spring Apps.
Fill out theBasicsform with the following information.Use the following table as a guide for completing the form. The recommendedPlanisStandard consumption & dedicated (preview).SettingSuggested valueDescriptionSubscriptionYour subscription nameThe  Azure subscription that you want to use for your server. If you have multiple subscriptions, choose the subscription in which you'd like to be billed for the resource.Resource groupmyresourcegroupA new resource group name or an existing one from your subscription.NamemyasaA unique name that identifies your Azure Spring Apps service. The name must be between 4 and 32 characters long and can contain only lowercase letters, numbers, and hyphens. The first character of the service name must be a letter and the last character must be either a letter or a number.PlanStandard consumption & dedicated (preview)The pricing plan determines the resource and cost associated with your instance.RegionThe region closest to your usersThe location that is closest to your users.Container Apps EnvironmentmyacaenvThe environment is a secure boundary around one or more container apps that can communicate with each other and share a virtual network, logging, and Dapr configuration.
Fill out theBasicsform with the following information.
Use the following table as a guide for completing the form. The recommendedPlanisStandard consumption & dedicated (preview).
Standard consumption & dedicated (preview)
(Optional) Create a Container Apps Environment.Consumption workloadDedicated workloadFill out theBasicstab with the following information:Environment name:myacaenvPlan:ConsumptionZone redundancy:DisabledSelectCreateto create the Container Apps Environment.Fill out theBasicstab with the following information:Environment name:myacaenvPlan:(Preview) Consumption and Dedicated workload profilesZone redundancy:DisabledSelect theWorkload profiles (Preview)tab, and then selectAdd workload profileto add a workload profile.On theAdd workload profile (Preview)page, add the following information:Workload profile name:my-wlpWorkload profile size: SelectDedicated-D4Autoscaling instance count range: Select3and5SelectAdd. This selection takes you back to theAdd workload profile (Preview)page. Selectmy-wlp, and then selectCreateto create the Container Apps Environment.
(Optional) Create a Container Apps Environment.
Consumption workload
Dedicated workload
Fill out theBasicstab with the following information:Environment name:myacaenvPlan:ConsumptionZone redundancy:Disabled
Fill out theBasicstab with the following information:
Environment name:myacaenv
Plan:Consumption
Zone redundancy:Disabled
SelectCreateto create the Container Apps Environment.
SelectCreateto create the Container Apps Environment.
Fill out theBasicstab with the following information:Environment name:myacaenvPlan:(Preview) Consumption and Dedicated workload profilesZone redundancy:Disabled
Fill out theBasicstab with the following information:
Environment name:myacaenv
Plan:(Preview) Consumption and Dedicated workload profiles
Zone redundancy:Disabled
Select theWorkload profiles (Preview)tab, and then selectAdd workload profileto add a workload profile.
Select theWorkload profiles (Preview)tab, and then selectAdd workload profileto add a workload profile.
On theAdd workload profile (Preview)page, add the following information:Workload profile name:my-wlpWorkload profile size: SelectDedicated-D4Autoscaling instance count range: Select3and5
On theAdd workload profile (Preview)page, add the following information:
Workload profile name:my-wlp
Workload profile size: SelectDedicated-D4
Autoscaling instance count range: Select3and5

SelectAdd. This selection takes you back to theAdd workload profile (Preview)page. Selectmy-wlp, and then selectCreateto create the Container Apps Environment.
SelectAdd. This selection takes you back to theAdd workload profile (Preview)page. Selectmy-wlp, and then selectCreateto create the Container Apps Environment.
SelectReview and Createto review your selections. SelectCreateto provision the Azure Spring Apps instance.
SelectReview and Createto review your selections. SelectCreateto provision the Azure Spring Apps instance.
On the toolbar, select theNotificationsicon (a bell) to monitor the deployment process. After the deployment is done, you can selectPin to dashboard, which creates a tile for this service on your Azure portal dashboard as a shortcut to the service'sOverviewpage.
On the toolbar, select theNotificationsicon (a bell) to monitor the deployment process. After the deployment is done, you can selectPin to dashboard, which creates a tile for this service on your Azure portal dashboard as a shortcut to the service'sOverviewpage.

SelectGo to resourceto go to theAzure Spring Apps Overviewpage.
SelectGo to resourceto go to theAzure Spring Apps Overviewpage.
Use the following steps to create the required resources:
Use the following command to sign in to Azure with OAuth2. Ignore this step if you already signed in.azd auth loginThe console outputs messages similar to the following example:Logged in to Azure.
Use the following command to sign in to Azure with OAuth2. Ignore this step if you already signed in.
azd auth login
azd auth login
The console outputs messages similar to the following example:
Logged in to Azure.
Logged in to Azure.
Use the following command to provision the template's infrastructure to Azure:azd provisionThe following list describes the command interactions:Select an Azure Subscription to use: Use arrows to move, type to filter, then pressEnter.Select an Azure location to use: Use arrows to move, type to filter, then pressEnter.The console outputs messages similar to the following example:SUCCESS: Your application was provisioned in Azure in xx minutes xx seconds.
You can view the resources created under the resource group rg-<your-environment-name>-<random-string>> in Azure Portal:
https://portal.azure.com/#@/resource/subscriptions/<your-subscription-id>/resourceGroups/rg-<your-environment-name>/overviewNoteThis may take a while to complete. You will see a progress indicator as it provisions Azure resources.
Use the following command to provision the template's infrastructure to Azure:
azd provision
azd provision
The following list describes the command interactions:
Select an Azure Subscription to use: Use arrows to move, type to filter, then pressEnter.
Select an Azure location to use: Use arrows to move, type to filter, then pressEnter.
The console outputs messages similar to the following example:
SUCCESS: Your application was provisioned in Azure in xx minutes xx seconds.
You can view the resources created under the resource group rg-<your-environment-name>-<random-string>> in Azure Portal:
https://portal.azure.com/#@/resource/subscriptions/<your-subscription-id>/resourceGroups/rg-<your-environment-name>/overview
SUCCESS: Your application was provisioned in Azure in xx minutes xx seconds.
You can view the resources created under the resource group rg-<your-environment-name>-<random-string>> in Azure Portal:
https://portal.azure.com/#@/resource/subscriptions/<your-subscription-id>/resourceGroups/rg-<your-environment-name>/overview
Note
This may take a while to complete. You will see a progress indicator as it provisions Azure resources.
4. Deploy the app to Azure Spring Apps
Azure portal
Azure portal + Maven plugin
Azure Developer CLI
TheDeploy to Azurebutton in the previous section launches an Azure portal experience that includes application deployment, so nothing else is needed.
Use the following steps to deploy using theMaven plugin for Azure Spring Apps:
Navigate to thecompletedirectory, and then run the following command to configure the app in Azure Spring Apps:./mvnw com.microsoft.azure:azure-spring-apps-maven-plugin:1.19.0:configThe following list describes the command interactions:OAuth2 login: You need to authorize the sign in to Azure based on the OAuth2 protocol.Select subscription: Select the subscription list number of the Azure Spring Apps instance you created, which defaults to the first subscription in the list. If you use the default number, pressEnterdirectly.Use existing Azure Spring Apps in Azure: Pressyto use the existing Azure Spring Apps instance.Select Azure Spring Apps for deployment: Select the list number of the Azure Spring Apps instance you created. If you use the default number, pressEnterdirectly.Use existing app in Azure Spring Apps <your-instance-name>: Pressnto create a new app.Input the app name (demo): Provide an app name. If you use the default project artifact ID, pressEnterdirectly.Expose public access for this app (boot-for-azure): Pressy.Confirm to save all the above configurations: Pressy. If you pressn, the configuration isn't saved in the POM files.
Navigate to thecompletedirectory, and then run the following command to configure the app in Azure Spring Apps:
./mvnw com.microsoft.azure:azure-spring-apps-maven-plugin:1.19.0:config
./mvnw com.microsoft.azure:azure-spring-apps-maven-plugin:1.19.0:config
The following list describes the command interactions:
OAuth2 login: You need to authorize the sign in to Azure based on the OAuth2 protocol.
Select subscription: Select the subscription list number of the Azure Spring Apps instance you created, which defaults to the first subscription in the list. If you use the default number, pressEnterdirectly.
Use existing Azure Spring Apps in Azure: Pressyto use the existing Azure Spring Apps instance.
Select Azure Spring Apps for deployment: Select the list number of the Azure Spring Apps instance you created. If you use the default number, pressEnterdirectly.
Use existing app in Azure Spring Apps <your-instance-name>: Pressnto create a new app.
Input the app name (demo): Provide an app name. If you use the default project artifact ID, pressEnterdirectly.
Expose public access for this app (boot-for-azure): Pressy.
Confirm to save all the above configurations: Pressy. If you pressn, the configuration isn't saved in the POM files.
Use the following command to deploy the app:./mvnw azure-spring-apps:deployThe following list describes the command interaction:OAuth2 login: You need to authorize the sign in to Azure based on the OAuth2 protocol.After the command is executed, you can see from the following log messages that the deployment was successful:[INFO] Deployment(default) is successfully created
[INFO] Starting Spring App after deploying artifacts...
[INFO] Deployment Status: Running
[INFO]   InstanceName:demo--default-xxxxxxx-xxxxxxxxx-xxxxx  Status:Running Reason:null       DiscoverStatus:NONE
[INFO] Getting public url of app(demo)...
[INFO] Application url: https://demo.<unique-identifier>.<region-name>.azurecontainerapps.io
Use the following command to deploy the app:
./mvnw azure-spring-apps:deploy
./mvnw azure-spring-apps:deploy
The following list describes the command interaction:
OAuth2 login: You need to authorize the sign in to Azure based on the OAuth2 protocol.
After the command is executed, you can see from the following log messages that the deployment was successful:
[INFO] Deployment(default) is successfully created
[INFO] Starting Spring App after deploying artifacts...
[INFO] Deployment Status: Running
[INFO]   InstanceName:demo--default-xxxxxxx-xxxxxxxxx-xxxxx  Status:Running Reason:null       DiscoverStatus:NONE
[INFO] Getting public url of app(demo)...
[INFO] Application url: https://demo.<unique-identifier>.<region-name>.azurecontainerapps.io
[INFO] Deployment(default) is successfully created
[INFO] Starting Spring App after deploying artifacts...
[INFO] Deployment Status: Running
[INFO]   InstanceName:demo--default-xxxxxxx-xxxxxxxxx-xxxxx  Status:Running Reason:null       DiscoverStatus:NONE
[INFO] Getting public url of app(demo)...
[INFO] Application url: https://demo.<unique-identifier>.<region-name>.azurecontainerapps.io
Use the following steps to package the app, provision the Azure resources required by the web application, and then deploy to Azure Spring Apps:
Use the following command to package a deployable copy of your application:azd packageThe console outputs messages similar to the following example:SUCCESS: Your application was packaged for Azure in xx seconds.
Use the following command to package a deployable copy of your application:
azd package
azd package
The console outputs messages similar to the following example:
SUCCESS: Your application was packaged for Azure in xx seconds.
SUCCESS: Your application was packaged for Azure in xx seconds.
Use the following command to deploy the application code to those newly provisioned resources:azd deployThe console outputs messages similar to the following example:Deploying services (azd deploy)

(â) Done: Deploying service demo
- Endpoint: https://demo.xxx.<your-azure-location>.azurecontainerapps.io


SUCCESS: Your application was deployed to Azure in xx minutes xx seconds.
You can view the resources created under the resource group rg-<your-environment-name> in Azure Portal:
https://portal.azure.com/#@/resource/subscriptions/<your-subscription-id>/resourceGroups/rg-<your-environment-name>/overview
Use the following command to deploy the application code to those newly provisioned resources:
azd deploy
azd deploy
The console outputs messages similar to the following example:
Deploying services (azd deploy)

(â) Done: Deploying service demo
- Endpoint: https://demo.xxx.<your-azure-location>.azurecontainerapps.io


SUCCESS: Your application was deployed to Azure in xx minutes xx seconds.
You can view the resources created under the resource group rg-<your-environment-name> in Azure Portal:
https://portal.azure.com/#@/resource/subscriptions/<your-subscription-id>/resourceGroups/rg-<your-environment-name>/overview
Deploying services (azd deploy)

(â) Done: Deploying service demo
- Endpoint: https://demo.xxx.<your-azure-location>.azurecontainerapps.io


SUCCESS: Your application was deployed to Azure in xx minutes xx seconds.
You can view the resources created under the resource group rg-<your-environment-name> in Azure Portal:
https://portal.azure.com/#@/resource/subscriptions/<your-subscription-id>/resourceGroups/rg-<your-environment-name>/overview
Note
You can also useazd upto combine the previous three commands:azd provision(provisions Azure resources),azd package(packages a deployable copy of your application), andazd deploy(deploys application code). For more information, seespring-guides/gs-spring-boot-for-azure.
azd up
azd provision
azd package
azd deploy
2. Prepare the Spring project
Azure portal
Azure portal + Maven plugin
Azure Developer CLI
TheDeploy to Azurebutton in the next section launches an Azure portal experience that downloads a JAR package from thespring-cloud-azure-tools releasespage on GitHub. No local preparation steps are needed.
Use the following steps to prepare the project:
Use the following command to clone theSpring Boot sample project for Azurefrom GitHub.git clone https://github.com/spring-guides/gs-spring-boot-for-azure.git
Use the following command to clone theSpring Boot sample project for Azurefrom GitHub.
git clone https://github.com/spring-guides/gs-spring-boot-for-azure.git
git clone https://github.com/spring-guides/gs-spring-boot-for-azure.git
Use the following command to move to the project folder:cd gs-spring-boot-for-azure/complete
Use the following command to move to the project folder:
cd gs-spring-boot-for-azure/complete
cd gs-spring-boot-for-azure/complete
Use the followingMavencommand to build the project:./mvnw clean package
Use the followingMavencommand to build the project:
./mvnw clean package
./mvnw clean package
Run the sample project locally by using the following command:./mvnw spring-boot:run
Run the sample project locally by using the following command:
./mvnw spring-boot:run
./mvnw spring-boot:run
Use the following steps to initialize the application from the Azure Developer CLI templates.
Open a terminal, create an empty folder, and then change directory to it.
Open a terminal, create an empty folder, and then change directory to it.
Use the following command to initialize the project:azd init --template spring-guides/gs-spring-boot-for-azureThe following list describes the command interactions:OAuth2 login: You need to authorize the sign in to Azure based on the OAuth2 protocol.Please enter a new environment name: Provide an environment name, which is used as a suffix for the resource group created to hold all Azure resources. This name should be unique within your Azure subscription.The console outputs messages similar to the following example:Initializing a new project (azd init)

(â) Done: Initialized git repository
(â) Done: Downloading template code to: <your-local-path>
Enter a new environment name: <your-env-name>
SUCCESS: New project initialized!
You can view the template code in your directory: <your-local-path>
Learn more about running 3rd party code on our DevHub: https://aka.ms/azd-third-party-code-notice
Use the following command to initialize the project:
azd init --template spring-guides/gs-spring-boot-for-azure
azd init --template spring-guides/gs-spring-boot-for-azure
The following list describes the command interactions:
OAuth2 login: You need to authorize the sign in to Azure based on the OAuth2 protocol.
Please enter a new environment name: Provide an environment name, which is used as a suffix for the resource group created to hold all Azure resources. This name should be unique within your Azure subscription.
The console outputs messages similar to the following example:
Initializing a new project (azd init)

(â) Done: Initialized git repository
(â) Done: Downloading template code to: <your-local-path>
Enter a new environment name: <your-env-name>
SUCCESS: New project initialized!
You can view the template code in your directory: <your-local-path>
Learn more about running 3rd party code on our DevHub: https://aka.ms/azd-third-party-code-notice
Initializing a new project (azd init)

(â) Done: Initialized git repository
(â) Done: Downloading template code to: <your-local-path>
Enter a new environment name: <your-env-name>
SUCCESS: New project initialized!
You can view the template code in your directory: <your-local-path>
Learn more about running 3rd party code on our DevHub: https://aka.ms/azd-third-party-code-notice
3. Prepare the cloud environment
This section describes how to create an Azure Spring Apps service instance and prepare the Azure cloud environment.
Azure portal
Azure portal + Maven plugin
Azure Developer CLI
This section uses aDeploy to Azurebutton to launch a deployment experience in the Azure portal. This experience uses anARM templateto create Azure resources.
3.1. Sign in to the Azure portal
Go to theAzure portaland enter your credentials to sign in to the portal. The default view is your service dashboard.
3.2. Create Azure resources
Use the following steps to create all the Azure resources that the app depends on:
Select the followingDeploy to Azurebutton to launch the deployment experience in the Azure portal:
Select the followingDeploy to Azurebutton to launch the deployment experience in the Azure portal:

Fill out the form on theBasicstab. Use the following table as a guide for completing the form:SettingSuggested valueDescriptionSubscriptionYour subscription name.The Azure subscription that you want to use for your server. If you have multiple subscriptions, choose the subscription in which you'd like to be billed for the resource.Resource groupmyresourcegroupA new resource group name or an existing one from your subscription.RegionThe region closest to your users.The region is used to create the resource group.
Fill out the form on theBasicstab. Use the following table as a guide for completing the form:
SelectReview and Createto review your selections. Then, selectCreateto deploy the app to Azure Spring Apps.
SelectReview and Createto review your selections. Then, selectCreateto deploy the app to Azure Spring Apps.
On the toolbar, select theNotificationsicon (a bell) to monitor the deployment process. After the deployment finishes, you can selectPin to dashboard, which creates a tile for this service on your Azure portal dashboard as a shortcut to the service'sOverviewpage. SelectGo to resourceto open the service'sOverviewpage.
On the toolbar, select theNotificationsicon (a bell) to monitor the deployment process. After the deployment finishes, you can selectPin to dashboard, which creates a tile for this service on your Azure portal dashboard as a shortcut to the service'sOverviewpage. SelectGo to resourceto open the service'sOverviewpage.

3.1. Sign in to the Azure portal
Open your web browser and go to theAzure portal. Enter your credentials to sign in to the portal. The default view is your service dashboard.
3.2. Create an Azure Spring Apps instance
Use the following steps to create a service instance:
SelectCreate a resourcein the corner of the Azure portal.
SelectCreate a resourcein the corner of the Azure portal.
SelectCompute>Azure Spring Apps.
SelectCompute>Azure Spring Apps.
Fill out theBasicsform with the following information:SettingSuggested ValueDescriptionSubscriptionYour subscription nameThe  Azure subscription that you want to use for your server. If you have multiple subscriptions, choose the subscription in which you'd like to be billed for the resource.Resource groupmyresourcegroupA new resource group name or an existing one from your subscription.NamemyasaA unique name that identifies your Azure Spring Apps service. The name must be between 4 and 32 characters long and can contain only lowercase letters, numbers, and hyphens. The first character of the service name must be a letter and the last character must be either a letter or a number.PlanStandardThe pricing plan that determines the resource and cost associated with your instance.RegionThe region closest to your usersThe location that is closest to your users.Zone RedundantUnselectedIndicates whether to create your Azure Spring Apps service in an Azure availability zone. This feature isn't currently supported in all regions.
Fill out theBasicsform with the following information:
SelectReview and Createto review your selections. SelectCreateto provision the Azure Spring Apps instance.
SelectReview and Createto review your selections. SelectCreateto provision the Azure Spring Apps instance.
On the toolbar, select theNotificationsicon (a bell) to monitor the deployment process. After the deployment is done, you can selectPin to dashboard, which creates a tile for this service on your Azure portal dashboard as a shortcut to the service'sOverviewpage.
On the toolbar, select theNotificationsicon (a bell) to monitor the deployment process. After the deployment is done, you can selectPin to dashboard, which creates a tile for this service on your Azure portal dashboard as a shortcut to the service'sOverviewpage.

SelectGo to resourceto go to theAzure Spring Apps Overviewpage.
SelectGo to resourceto go to theAzure Spring Apps Overviewpage.
Use the following steps to create the required resources:
Use the following command to sign in to Azure with OAuth2. Ignore this step if you already signed in.azd auth loginThe console outputs messages similar to the following example:Logged in to Azure.
Use the following command to sign in to Azure with OAuth2. Ignore this step if you already signed in.
azd auth login
azd auth login
The console outputs messages similar to the following example:
Logged in to Azure.
Logged in to Azure.
Use the following command to set the template using the Standard plan:azd env set PLAN standard
Use the following command to set the template using the Standard plan:
azd env set PLAN standard
azd env set PLAN standard
Use the following command to package a deployable copy of your application, provision the template's infrastructure to Azure, and then deploy the application code to those newly provisioned resources:azd provisionThe following list describes the command interactions:Select an Azure Subscription to use: Use arrows to move, type to filter, then pressEnter.Select an Azure location to use: Use arrows to move, type to filter, then pressEnter.The console outputs messages similar to the ones in the following example:SUCCESS: Your application was provisioned in Azure in xx minutes xx seconds.
You can view the resources created under the resource group rg-<your-environment-name>-<random-string>> in Azure Portal:
https://portal.azure.com/#@/resource/subscriptions/<your-subscription-id>/resourceGroups/rg-<your-environment-name>/overviewNoteThis may take a while to complete. You see a progress indicator as it provisions Azure resources.
Use the following command to package a deployable copy of your application, provision the template's infrastructure to Azure, and then deploy the application code to those newly provisioned resources:
azd provision
azd provision
The following list describes the command interactions:
Select an Azure Subscription to use: Use arrows to move, type to filter, then pressEnter.
Select an Azure location to use: Use arrows to move, type to filter, then pressEnter.
The console outputs messages similar to the ones in the following example:
SUCCESS: Your application was provisioned in Azure in xx minutes xx seconds.
You can view the resources created under the resource group rg-<your-environment-name>-<random-string>> in Azure Portal:
https://portal.azure.com/#@/resource/subscriptions/<your-subscription-id>/resourceGroups/rg-<your-environment-name>/overview
SUCCESS: Your application was provisioned in Azure in xx minutes xx seconds.
You can view the resources created under the resource group rg-<your-environment-name>-<random-string>> in Azure Portal:
https://portal.azure.com/#@/resource/subscriptions/<your-subscription-id>/resourceGroups/rg-<your-environment-name>/overview
Note
This may take a while to complete. You see a progress indicator as it provisions Azure resources.
4. Deploy the app to Azure Spring Apps
Azure portal
Azure portal + Maven plugin
Azure Developer CLI
TheDeploy to Azurebutton in the previous section launches an Azure portal experience that includes application deployment, so nothing else is needed.
Use the following steps to deploy using theMaven plugin for Azure Spring Apps:
Navigate to thecompletedirectory, and then run the following command to configure the app in Azure Spring Apps:./mvnw com.microsoft.azure:azure-spring-apps-maven-plugin:1.19.0:configThe following list describes the command interactions:OAuth2 login: You need to authorize the sign in to Azure based on the OAuth2 protocol.Select subscription: Select the subscription list number of the Azure Spring Apps instance you created, which defaults to the first subscription in the list. If you use the default number, pressEnterdirectly.Use existing Azure Spring Apps in Azure: Pressyto use the existing Azure Spring Apps instance.Select Azure Spring Apps for deployment: Select the list number of the Azure Spring Apps instance you created. If you use the default number, pressEnterdirectly.Use existing app in Azure Spring Apps <your-instance-name>: Pressnto create a new app.Input the app name (demo): Provide an app name. If you use the default project artifact ID, pressEnterdirectly.Expose public access for this app (boot-for-azure): Pressy.Confirm to save all the above configurations: Pressy. If you pressn, the configuration isn't saved in the POM files.
Navigate to thecompletedirectory, and then run the following command to configure the app in Azure Spring Apps:
./mvnw com.microsoft.azure:azure-spring-apps-maven-plugin:1.19.0:config
./mvnw com.microsoft.azure:azure-spring-apps-maven-plugin:1.19.0:config
The following list describes the command interactions:
OAuth2 login: You need to authorize the sign in to Azure based on the OAuth2 protocol.
Select subscription: Select the subscription list number of the Azure Spring Apps instance you created, which defaults to the first subscription in the list. If you use the default number, pressEnterdirectly.
Use existing Azure Spring Apps in Azure: Pressyto use the existing Azure Spring Apps instance.
Select Azure Spring Apps for deployment: Select the list number of the Azure Spring Apps instance you created. If you use the default number, pressEnterdirectly.
Use existing app in Azure Spring Apps <your-instance-name>: Pressnto create a new app.
Input the app name (demo): Provide an app name. If you use the default project artifact ID, pressEnterdirectly.
Expose public access for this app (boot-for-azure): Pressy.
Confirm to save all the above configurations: Pressy. If you pressn, the configuration isn't saved in the POM files.
Use the following command to deploy the app:./mvnw azure-spring-apps:deployThe following list describes the command interaction:OAuth2 login: You need to authorize the sign in to Azure based on the OAuth2 protocol.After the command is executed, you can see from the following log messages that the deployment was successful:[INFO] Deployment(default) is successfully created
[INFO] Starting Spring App after deploying artifacts...
[INFO] Deployment Status: Running
[INFO]   InstanceName:demo-default-x-xxxxxxxxxx-xxxxx  Status:Running Reason:null       DiscoverStatus:UNREGISTERED
[INFO]   InstanceName:demo-default-x-xxxxxxxxx-xxxxx  Status:Terminating Reason:null       DiscoverStatus:UNREGISTERED
[INFO] Getting public url of app(demo)...
[INFO] Application url: https://<your-Azure-Spring-Apps-instance-name>-demo.azuremicroservices.io
Use the following command to deploy the app:
./mvnw azure-spring-apps:deploy
./mvnw azure-spring-apps:deploy
The following list describes the command interaction:
OAuth2 login: You need to authorize the sign in to Azure based on the OAuth2 protocol.
After the command is executed, you can see from the following log messages that the deployment was successful:
[INFO] Deployment(default) is successfully created
[INFO] Starting Spring App after deploying artifacts...
[INFO] Deployment Status: Running
[INFO]   InstanceName:demo-default-x-xxxxxxxxxx-xxxxx  Status:Running Reason:null       DiscoverStatus:UNREGISTERED
[INFO]   InstanceName:demo-default-x-xxxxxxxxx-xxxxx  Status:Terminating Reason:null       DiscoverStatus:UNREGISTERED
[INFO] Getting public url of app(demo)...
[INFO] Application url: https://<your-Azure-Spring-Apps-instance-name>-demo.azuremicroservices.io
[INFO] Deployment(default) is successfully created
[INFO] Starting Spring App after deploying artifacts...
[INFO] Deployment Status: Running
[INFO]   InstanceName:demo-default-x-xxxxxxxxxx-xxxxx  Status:Running Reason:null       DiscoverStatus:UNREGISTERED
[INFO]   InstanceName:demo-default-x-xxxxxxxxx-xxxxx  Status:Terminating Reason:null       DiscoverStatus:UNREGISTERED
[INFO] Getting public url of app(demo)...
[INFO] Application url: https://<your-Azure-Spring-Apps-instance-name>-demo.azuremicroservices.io
Use the following steps to package the app, provision the Azure resources required by the web application, and then deploy to Azure Spring Apps:
Use the following command to package a deployable copy of your application:azd packageThe console outputs messages similar to the following example:SUCCESS: Your application was packaged for Azure in xx seconds.
Use the following command to package a deployable copy of your application:
azd package
azd package
The console outputs messages similar to the following example:
SUCCESS: Your application was packaged for Azure in xx seconds.
SUCCESS: Your application was packaged for Azure in xx seconds.
Use the following command to deploy the application code to those newly provisioned resources:azd deployThe console outputs messages similar to the ones in the following example:Deploying services (azd deploy)

(â) Done: Deploying service demo
- Endpoint: https://<your-Azure-Spring-Apps-instance-name>-demo.azuremicroservices.io/


SUCCESS: Your application was deployed to Azure in xx minutes xx seconds.
You can view the resources created under the resource group rg-<your-environment-name> in Azure Portal:
https://portal.azure.com/#@/resource/subscriptions/<your-subscription-id>/resourceGroups/rg-<your-environment-name>/overview
Use the following command to deploy the application code to those newly provisioned resources:
azd deploy
azd deploy
The console outputs messages similar to the ones in the following example:
Deploying services (azd deploy)

(â) Done: Deploying service demo
- Endpoint: https://<your-Azure-Spring-Apps-instance-name>-demo.azuremicroservices.io/


SUCCESS: Your application was deployed to Azure in xx minutes xx seconds.
You can view the resources created under the resource group rg-<your-environment-name> in Azure Portal:
https://portal.azure.com/#@/resource/subscriptions/<your-subscription-id>/resourceGroups/rg-<your-environment-name>/overview
Deploying services (azd deploy)

(â) Done: Deploying service demo
- Endpoint: https://<your-Azure-Spring-Apps-instance-name>-demo.azuremicroservices.io/


SUCCESS: Your application was deployed to Azure in xx minutes xx seconds.
You can view the resources created under the resource group rg-<your-environment-name> in Azure Portal:
https://portal.azure.com/#@/resource/subscriptions/<your-subscription-id>/resourceGroups/rg-<your-environment-name>/overview
Note
You can also useazd upto combine the previous three commands:azd package(packages a deployable copy of your application),azd provision(provisions Azure resources), andazd deploy(deploys application code). For more information, seespring-guides/gs-spring-boot-for-azure.
azd up
azd package
azd provision
azd deploy
2. Prepare the Spring project
Azure portal
Azure portal + Maven plugin
Azure CLI
IntelliJ
Visual Studio Code
TheDeploy to Azurebutton in the next section launches an Azure portal experience that downloads a JAR package from thespring-cloud-azure-tools releasespage on GitHub. No local preparation steps are needed.
Use the following steps to prepare the project:
Use the following command to clone theSpring Boot sample project for Azurefrom GitHub.git clone https://github.com/spring-guides/gs-spring-boot-for-azure.git
Use the following command to clone theSpring Boot sample project for Azurefrom GitHub.
git clone https://github.com/spring-guides/gs-spring-boot-for-azure.git
git clone https://github.com/spring-guides/gs-spring-boot-for-azure.git
Use the following command to move to the project folder:cd gs-spring-boot-for-azure/complete
Use the following command to move to the project folder:
cd gs-spring-boot-for-azure/complete
cd gs-spring-boot-for-azure/complete
Use the followingMavencommand to build the project:./mvnw clean package
Use the followingMavencommand to build the project:
./mvnw clean package
./mvnw clean package
Run the sample project locally by using the following command:./mvnw spring-boot:run
Run the sample project locally by using the following command:
./mvnw spring-boot:run
./mvnw spring-boot:run
Use the following steps to prepare the project:
Use the following command to clone theSpring Boot sample project for Azurefrom GitHub.git clone https://github.com/spring-guides/gs-spring-boot-for-azure.git
Use the following command to clone theSpring Boot sample project for Azurefrom GitHub.
git clone https://github.com/spring-guides/gs-spring-boot-for-azure.git
git clone https://github.com/spring-guides/gs-spring-boot-for-azure.git
Use the following command to move to the project folder:cd gs-spring-boot-for-azure/complete
Use the following command to move to the project folder:
cd gs-spring-boot-for-azure/complete
cd gs-spring-boot-for-azure/complete
Use the followingMavencommand to build the project:./mvnw clean package
Use the followingMavencommand to build the project:
./mvnw clean package
./mvnw clean package
Run the sample project locally by using the following command:./mvnw spring-boot:run
Run the sample project locally by using the following command:
./mvnw spring-boot:run
./mvnw spring-boot:run
Use the following steps to create the project:
Use the following command to generate a sample project fromstart.spring.iowith the recommended dependencies for Azure Spring Apps:curl https://start.spring.io/starter.tgz -d dependencies=web -d baseDir=demo -d bootVersion=3.0.0 -d javaVersion=17 -d type=maven-project -d groupId=com.example -d artifactId=demo -d name=demo -d packageName=com.example.demo -d packaging=jar | tar -xzvf -
Use the following command to generate a sample project fromstart.spring.iowith the recommended dependencies for Azure Spring Apps:
start.spring.io
curl https://start.spring.io/starter.tgz -d dependencies=web -d baseDir=demo -d bootVersion=3.0.0 -d javaVersion=17 -d type=maven-project -d groupId=com.example -d artifactId=demo -d name=demo -d packageName=com.example.demo -d packaging=jar | tar -xzvf -
curl https://start.spring.io/starter.tgz -d dependencies=web -d baseDir=demo -d bootVersion=3.0.0 -d javaVersion=17 -d type=maven-project -d groupId=com.example -d artifactId=demo -d name=demo -d packageName=com.example.demo -d packaging=jar | tar -xzvf -
Create a web controller for your web application by adding the filesrc/main/java/com/example/demo/HelloController.javawith the following contents:package com.example.demo;

import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestMapping;

@RestController
public class HelloController {

    @RequestMapping("/")
    public String index() {
        return "Hello World";
     }
}
Create a web controller for your web application by adding the filesrc/main/java/com/example/demo/HelloController.javawith the following contents:
package com.example.demo;

import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestMapping;

@RestController
public class HelloController {

    @RequestMapping("/")
    public String index() {
        return "Hello World";
     }
}
package com.example.demo;

import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestMapping;

@RestController
public class HelloController {

    @RequestMapping("/")
    public String index() {
        return "Hello World";
     }
}
Use the followingMavencommand to build the project:./mvnw clean package
Use the followingMavencommand to build the project:
./mvnw clean package
./mvnw clean package
Run the sample project locally by using the following command:./mvnw spring-boot:run
Run the sample project locally by using the following command:
./mvnw spring-boot:run
./mvnw spring-boot:run
To prepare the Spring project, follow the steps in theBefore you beginsection ofJava on Azure Spring Apps.
3. Prepare the cloud environment
This section describes how to create an Azure Spring Apps service instance and prepare the Azure cloud environment.
Azure portal
Azure portal + Maven plugin
Azure CLI
IntelliJ
Visual Studio Code
This section uses aDeploy to Azurebutton to launch a deployment experience in the Azure portal. This experience uses anARM templateto create Azure resources.
3.1. Sign in to the Azure portal
Go to theAzure portaland enter your credentials to sign in to the portal. The default view is your service dashboard.
3.2. Create Azure resources
Use the following steps to create all the Azure resources that the app depends on:
Select the followingDeploy to Azurebutton to launch the deployment experience in the Azure portal:
Select the followingDeploy to Azurebutton to launch the deployment experience in the Azure portal:

Fill out the form on theBasicstab. Use the following table as a guide for completing the form:SettingSuggested valueDescriptionSubscriptionYour subscription name.The Azure subscription that you want to use for your server. If you have multiple subscriptions, choose the subscription in which you'd like to be billed for the resource.Resource groupmyresourcegroupA new resource group name or an existing one from your subscription.RegionThe region closest to your users.The region is used to create the resource group.
Fill out the form on theBasicstab. Use the following table as a guide for completing the form:
SelectReview and Createto review your selections. Then, selectCreateto deploy the app to Azure Spring Apps.
SelectReview and Createto review your selections. Then, selectCreateto deploy the app to Azure Spring Apps.
On the toolbar, select theNotificationsicon (a bell) to monitor the deployment process. After the deployment finishes, you can selectPin to dashboard, which creates a tile for this service on your Azure portal dashboard as a shortcut to the service'sOverviewpage. SelectGo to resourceto open the service'sOverviewpage.
On the toolbar, select theNotificationsicon (a bell) to monitor the deployment process. After the deployment finishes, you can selectPin to dashboard, which creates a tile for this service on your Azure portal dashboard as a shortcut to the service'sOverviewpage. SelectGo to resourceto open the service'sOverviewpage.

3.1. Sign in to the Azure portal
Go to theAzure portaland enter your credentials to sign in to the portal. The default view is your service dashboard.
3.2. Create an Azure Spring Apps instance
Use the following steps to create the service instance:
SelectCreate a resourcein the corner of the Azure portal.
SelectCreate a resourcein the corner of the Azure portal.
SelectCompute>Azure Spring Apps.
SelectCompute>Azure Spring Apps.
Fill out theBasicsform with the following information:SettingSuggested valueDescriptionSubscriptionYour subscription name.The Azure subscription that you want to use for your server. If you have multiple subscriptions, choose the subscription in which you'd like to be billed for the resource.Resource groupmyresourcegroupA new resource group name or an existing one from your subscription.NamemyasaA unique name that identifies your Azure Spring Apps service. The name must be between 4 and 32 characters long and can contain only lowercase letters, numbers, and hyphens. The first character of the service name must be a letter and the last character must be either a letter or a number.RegionThe region closest to your users.The location that is closest to your users.Hosting options and plansEnterpriseThe pricing plan that determines the resource and cost associated with your instance.Zone RedundantUnselectedThe option to create your Azure Spring Apps service in an Azure availability zone. This feature isn't currently supported in all regions.Software IP PlanPay-as-You-GoThe pricing plan that lets you pay as you go with Azure Spring Apps.Deploy sample projectUnselectedThe option to use the built-in sample application.
Fill out theBasicsform with the following information:
SelectReview and Createto review your selections. Then, selectCreateto provision the Azure Spring Apps instance.
SelectReview and Createto review your selections. Then, selectCreateto provision the Azure Spring Apps instance.
On the toolbar, select theNotificationsicon (a bell) to monitor the deployment process. After the deployment finishes, you can selectPin to dashboard, which creates a tile for this service on your Azure portal dashboard as a shortcut to the service'sOverviewpage.
On the toolbar, select theNotificationsicon (a bell) to monitor the deployment process. After the deployment finishes, you can selectPin to dashboard, which creates a tile for this service on your Azure portal dashboard as a shortcut to the service'sOverviewpage.

SelectGo to resourceto go to theAzure Spring Apps Overviewpage.
SelectGo to resourceto go to theAzure Spring Apps Overviewpage.
3.1. Provide names for each resource
Create variables to hold the resource names by using the following commands. Be sure to replace the placeholders with your own values.
export LOCATION="<region>"
export RESOURCE_GROUP="<resource-group-name>"
export SERVICE_NAME="<Azure-Spring-Apps-instance-name>"
export APP_NAME="demo"
export LOCATION="<region>"
export RESOURCE_GROUP="<resource-group-name>"
export SERVICE_NAME="<Azure-Spring-Apps-instance-name>"
export APP_NAME="demo"
3.2. Create a new resource group
Use the following steps to create a new resource group:
Use the following command to sign in to the Azure CLI:az login
Use the following command to sign in to the Azure CLI:
az login
az login
Use the following command to set the default location:az configure --defaults location=${LOCATION}
Use the following command to set the default location:
az configure --defaults location=${LOCATION}
az configure --defaults location=${LOCATION}
Use the following command to list all available subscriptions to determine the subscription ID to use:az account list --output table
Use the following command to list all available subscriptions to determine the subscription ID to use:
az account list --output table
az account list --output table
Use the following command to set the default subscription:az account set --subscription <subscription-ID>
Use the following command to set the default subscription:
az account set --subscription <subscription-ID>
az account set --subscription <subscription-ID>
Use the following command to create a resource group:az group create --resource-group ${RESOURCE_GROUP}
Use the following command to create a resource group:
az group create --resource-group ${RESOURCE_GROUP}
az group create --resource-group ${RESOURCE_GROUP}
Use the following command to set the newly created resource group as the default resource group:az configure --defaults group=${RESOURCE_GROUP}
Use the following command to set the newly created resource group as the default resource group:
az configure --defaults group=${RESOURCE_GROUP}
az configure --defaults group=${RESOURCE_GROUP}
3.3. Install extension and register namespace
Use the following commands to install the Azure Spring Apps extension for the Azure CLI and register the namespace:Microsoft.SaaS:
Microsoft.SaaS
az extension add --name spring --upgrade
az provider register --namespace Microsoft.SaaS
az extension add --name spring --upgrade
az provider register --namespace Microsoft.SaaS
3.4. Create an Azure Spring Apps instance
Use the following steps to create the service instance:
Use the following command to accept the legal terms and privacy statements for the Enterprise plan:NoteThis step is necessary only if your subscription has never been used to create an Enterprise plan instance of Azure Spring Apps.az term accept \
    --publisher vmware-inc \
    --product azure-spring-cloud-vmware-tanzu-2 \
    --plan asa-ent-hr-mtr
Use the following command to accept the legal terms and privacy statements for the Enterprise plan:
Note
This step is necessary only if your subscription has never been used to create an Enterprise plan instance of Azure Spring Apps.
az term accept \
    --publisher vmware-inc \
    --product azure-spring-cloud-vmware-tanzu-2 \
    --plan asa-ent-hr-mtr
az term accept \
    --publisher vmware-inc \
    --product azure-spring-cloud-vmware-tanzu-2 \
    --plan asa-ent-hr-mtr
Use the following command to create an Azure Spring Apps service instance:az spring create \
    --name ${SERVICE_NAME} \
    --sku Enterprise
Use the following command to create an Azure Spring Apps service instance:
az spring create \
    --name ${SERVICE_NAME} \
    --sku Enterprise
az spring create \
    --name ${SERVICE_NAME} \
    --sku Enterprise
3.5. Create an app in your Azure Spring Apps instance
AnAppis an abstraction of one business app. For more information, seeApp and deployment in Azure Spring Apps. Apps run in an Azure Spring Apps service instance, as shown in the following diagram.

Use the following command to create the app on Azure Spring Apps:
az spring app create \
    --service ${SERVICE_NAME} \
    --name ${APP_NAME} \
    --assign-endpoint true
az spring app create \
    --service ${SERVICE_NAME} \
    --name ${APP_NAME} \
    --assign-endpoint true
3.1. Sign in to the Azure portal
Open your web browser and go to theAzure portal, enter your credentials, and sign in to the portal. The default view is your service dashboard.
3.2. Create an Azure Spring Apps instance
Use the following steps to create the service instance:
SelectCreate a resourcein the corner of the Azure portal.
SelectCreate a resourcein the corner of the Azure portal.
SelectCompute>Azure Spring Apps.
SelectCompute>Azure Spring Apps.
Fill out theBasicsform with the following information:SettingSuggested valueDescriptionSubscriptionYour subscription name.The Azure subscription that you want to use for your server. If you have multiple subscriptions, choose the subscription in which you'd like to be billed for the resource.Resource groupmyresourcegroupA new resource group name or an existing one from your subscription.NamemyasaA unique name that identifies your Azure Spring Apps service. The name must be between 4 and 32 characters long and can contain only lowercase letters, numbers, and hyphens. The first character of the service name must be a letter and the last character must be either a letter or a number.RegionThe region closest to your users.The location that is closest to your users.Hosting options and plansEnterpriseThe pricing plan that determines the resource and cost associated with your instance.Zone RedundantUnselectedThe option to create your Azure Spring Apps service in an Azure availability zone. This feature isn't currently supported in all regions.Software IP PlanPay-as-You-GoThe pricing plan that lets you pay as you go with Azure Spring Apps.Deploy sample projectUnselectedThe option to use the built-in sample application.
Fill out theBasicsform with the following information:
SelectReview and Createto review your selections. Then, selectCreateto provision the Azure Spring Apps instance.
SelectReview and Createto review your selections. Then, selectCreateto provision the Azure Spring Apps instance.
On the toolbar, select theNotificationsicon (a bell) to monitor the deployment process. After the deployment finishes, you can selectPin to dashboard, which creates a tile for this service on your Azure portal dashboard as a shortcut to the service'sOverviewpage.
On the toolbar, select theNotificationsicon (a bell) to monitor the deployment process. After the deployment finishes, you can selectPin to dashboard, which creates a tile for this service on your Azure portal dashboard as a shortcut to the service'sOverviewpage.

SelectGo to resourceto go to theAzure Spring Apps Overviewpage.
SelectGo to resourceto go to theAzure Spring Apps Overviewpage.
To create an Azure Spring Apps instance, follow the steps in theCreate an app on Azure Spring Appssection ofJava on Azure Spring Apps.
4. Deploy the app to Azure Spring Apps
Azure portal
Azure portal + Maven plugin
Azure CLI
IntelliJ
Visual Studio Code
TheDeploy to Azurebutton in the previous section launches an Azure portal experience that includes application deployment, so nothing else is needed.
Use the following steps to deploy using theMaven plugin for Azure Spring Apps:
Navigate to thecompletedirectory, and then run the following command to configure the app in Azure Spring Apps:./mvnw com.microsoft.azure:azure-spring-apps-maven-plugin:1.19.0:configThe following list describes the command interactions:OAuth2 login: You need to authorize the sign in to Azure based on the OAuth2 protocol.Select subscription: Select the subscription list number of the Azure Spring Apps instance you created, which defaults to the first subscription in the list. If you use the default number, pressEnterdirectly.Use existing Azure Spring Apps in Azure: Pressyto use the existing Azure Spring Apps instance.Select Azure Spring Apps for deployment: Select the list number of the Azure Spring Apps instance you created. If you use the default number, pressEnterdirectly.Use existing app in Azure Spring Apps <your-instance-name>: Pressnto create a new app.Input the app name (demo): Provide an app name. If you use the default project artifact ID, pressEnterdirectly.Expose public access for this app (boot-for-azure): Pressy.Confirm to save all the above configurations: Pressy. If you pressn, the configuration isn't saved in the POM files.
Navigate to thecompletedirectory, and then run the following command to configure the app in Azure Spring Apps:
./mvnw com.microsoft.azure:azure-spring-apps-maven-plugin:1.19.0:config
./mvnw com.microsoft.azure:azure-spring-apps-maven-plugin:1.19.0:config
The following list describes the command interactions:
OAuth2 login: You need to authorize the sign in to Azure based on the OAuth2 protocol.
Select subscription: Select the subscription list number of the Azure Spring Apps instance you created, which defaults to the first subscription in the list. If you use the default number, pressEnterdirectly.
Use existing Azure Spring Apps in Azure: Pressyto use the existing Azure Spring Apps instance.
Select Azure Spring Apps for deployment: Select the list number of the Azure Spring Apps instance you created. If you use the default number, pressEnterdirectly.
Use existing app in Azure Spring Apps <your-instance-name>: Pressnto create a new app.
Input the app name (demo): Provide an app name. If you use the default project artifact ID, pressEnterdirectly.
Expose public access for this app (boot-for-azure): Pressy.
Confirm to save all the above configurations: Pressy. If you pressn, the configuration isn't saved in the POM files.
Use the following command to deploy the app:./mvnw azure-spring-apps:deployThe following list describes the command interaction:OAuth2 login: You need to authorize the sign in to Azure based on the OAuth2 protocol.After the command is executed, you can see from the following log messages that the deployment was successful:[INFO] Deployment(default) is successfully created
[INFO] Starting Spring App after deploying artifacts...
[INFO] Deployment Status: Running
[INFO]   InstanceName:demo-default-x-xxxxxxxxxx-xxxxx  Status:Running Reason:null       DiscoverStatus:N/A
[INFO] Getting public url of app(demo)...
[INFO] Application url: https://<your-Azure-Spring-Apps-instance-name>-demo.azuremicroservices.io
Use the following command to deploy the app:
./mvnw azure-spring-apps:deploy
./mvnw azure-spring-apps:deploy
The following list describes the command interaction:
OAuth2 login: You need to authorize the sign in to Azure based on the OAuth2 protocol.
After the command is executed, you can see from the following log messages that the deployment was successful:
[INFO] Deployment(default) is successfully created
[INFO] Starting Spring App after deploying artifacts...
[INFO] Deployment Status: Running
[INFO]   InstanceName:demo-default-x-xxxxxxxxxx-xxxxx  Status:Running Reason:null       DiscoverStatus:N/A
[INFO] Getting public url of app(demo)...
[INFO] Application url: https://<your-Azure-Spring-Apps-instance-name>-demo.azuremicroservices.io
[INFO] Deployment(default) is successfully created
[INFO] Starting Spring App after deploying artifacts...
[INFO] Deployment Status: Running
[INFO]   InstanceName:demo-default-x-xxxxxxxxxx-xxxxx  Status:Running Reason:null       DiscoverStatus:N/A
[INFO] Getting public url of app(demo)...
[INFO] Application url: https://<your-Azure-Spring-Apps-instance-name>-demo.azuremicroservices.io
Use the following command to deploy the.jarfile for the app:
az spring app deploy \
    --service ${SERVICE_NAME} \
    --name ${APP_NAME} \
    --artifact-path target/demo-0.0.1-SNAPSHOT.jar
az spring app deploy \
    --service ${SERVICE_NAME} \
    --name ${APP_NAME} \
    --artifact-path target/demo-0.0.1-SNAPSHOT.jar
Deploying the application can take a few minutes.
This section provides the steps to deploy your application to Azure Spring Apps.
4.1. Import the project
Use the following steps to import the project:
Open IntelliJ IDEA and selectOpen.
Open IntelliJ IDEA and selectOpen.
In theOpen File or Projectdialog box, select thedemofolder.
In theOpen File or Projectdialog box, select thedemofolder.

4.2. Build and deploy your app
Use the following steps to build and deploy your app:
If you didn't already install the Azure Toolkit for IntelliJ, follow the steps inInstall the Azure Toolkit for IntelliJ.NoteAzure Toolkit for IntelliJ provides four ways to log in to Azure, and the deployment can only start after logging in.
If you didn't already install the Azure Toolkit for IntelliJ, follow the steps inInstall the Azure Toolkit for IntelliJ.
Note
Azure Toolkit for IntelliJ provides four ways to log in to Azure, and the deployment can only start after logging in.
Right-click your project in the IntelliJ Project window and then selectAzure->Deploy to Azure Spring Apps.
Right-click your project in the IntelliJ Project window and then selectAzure->Deploy to Azure Spring Apps.

Accept the name for the app in theNamefield.Namerefers to the configuration, not the app name. You don't usually need to change it.
Accept the name for the app in theNamefield.Namerefers to the configuration, not the app name. You don't usually need to change it.
In theArtifacttextbox, selectMaven:demo(Java 17).
In theArtifacttextbox, selectMaven:demo(Java 17).
In theSubscriptiontextbox, verify that your subscription is correct.
In theSubscriptiontextbox, verify that your subscription is correct.
In theSpring Appstextbox, select the instance of Azure Spring Apps that you created.
In theSpring Appstextbox, select the instance of Azure Spring Apps that you created.
In theApptextbox, select the plus sign (+) to create a new app.
In theApptextbox, select the plus sign (+) to create a new app.

In theApp name:textbox underApp Basics, enterdemo, and then selectMore settings.
In theApp name:textbox underApp Basics, enterdemo, and then selectMore settings.
Select theEnablebutton next toPublic endpoint. The button changes toDisable <to be enabled>. Then, selectOK.
Select theEnablebutton next toPublic endpoint. The button changes toDisable <to be enabled>. Then, selectOK.

UnderBefore launch, selectRun Maven Goal 'demo:package', and then select the pencil icon to edit the command line.
UnderBefore launch, selectRun Maven Goal 'demo:package', and then select the pencil icon to edit the command line.

In theCommand linetextbox, enter-DskipTestsafterpackage, and then selectOK.
In theCommand linetextbox, enter-DskipTestsafterpackage, and then selectOK.

To start the deployment, select theRunbutton at the bottom of theDeploy to Azuredialog box. The plug-in runs the Maven commandpackage -DskipTestson thedemoapp and deploys the.jarfile generated by thepackagecommand.
To start the deployment, select theRunbutton at the bottom of theDeploy to Azuredialog box. The plug-in runs the Maven commandpackage -DskipTestson thedemoapp and deploys the.jarfile generated by thepackagecommand.
package -DskipTests
demo
package
Deploying the application can take a few minutes. You can see the public URL of the application in the output console log.
To deploy the app to Azure Spring Apps, follow the steps in theBuild and deploy the appsection ofJava on Azure Spring Apps.
5. Validate the app
This section describes how to validate your application.
Azure portal
Azure portal + Maven plugin
Azure Developer CLI
After the deployment finishes, find the application URL from the deployment outputs. Use the following steps to validate:
Access the application URL from theOutputspage of theDeployment. When you open the app, you get the responseHello World.
Access the application URL from theOutputspage of theDeployment. When you open the app, you get the responseHello World.
Hello World

Check the details for each resource deployment, which are useful for investigating any deployment issues.
Check the details for each resource deployment, which are useful for investigating any deployment issues.
After the deployment finishes, access the application with the output application URL. Use the following steps to check the app's logs to investigate any deployment issue:
Access the output application URL from theOutputspage of theDeployment. When you open the app, you get the responseHello World.
Access the output application URL from theOutputspage of theDeployment. When you open the app, you get the responseHello World.
Hello World

From the navigation pane of the Azure Spring Apps instanceOverviewpage, selectLogsto check the app's logs.
From the navigation pane of the Azure Spring Apps instanceOverviewpage, selectLogsto check the app's logs.

After the deployment finishes, access the application with the output endpoint. When you open the app, you get the responseHello World.
Hello World
Azure portal
Azure portal + Maven plugin
Azure Developer CLI
After the deployment finishes, use the following steps to find the application URL from the deployment outputs:
Access the application URL from theOutputspage of theDeployment. When you open the app, you get the responseHello World.
Access the application URL from theOutputspage of theDeployment. When you open the app, you get the responseHello World.
Hello World

Check the details for each resource deployment, which are useful for investigating any deployment issues.
Check the details for each resource deployment, which are useful for investigating any deployment issues.
After the deployment finishes, use the following steps to check the app's logs to investigate any deployment issue:
Access the application URL from theOutputspage of theDeployment. When you open the app, you get the responseHello World.
Access the application URL from theOutputspage of theDeployment. When you open the app, you get the responseHello World.
Hello World

From the navigation pane of the Azure Spring Apps instance overview page, selectLogsto check the app's logs.
From the navigation pane of the Azure Spring Apps instance overview page, selectLogsto check the app's logs.

After the deployment finishes, access the application with the output endpoint. When you open the app, you get the responseHello World.
Hello World
Azure portal
Azure portal + Maven plugin
Azure CLI
IntelliJ
Visual Studio Code
After the deployment finishes, use the following steps to find the application URL from the deployment outputs:
Access the application URL from theOutputspage of theDeployment. When you open the app, you get the responseHello World.
Access the application URL from theOutputspage of theDeployment. When you open the app, you get the responseHello World.
Hello World

Check the details for each resource deployment, which are useful for investigating any deployment issues.
Check the details for each resource deployment, which are useful for investigating any deployment issues.
After the deployment finishes, use the following steps to validate the app:
Access the application URL. When you open the app, you get the responseHello World.
Access the application URL. When you open the app, you get the responseHello World.
Hello World
Check the console logs, which are useful for investigating any deployment issues.
Check the console logs, which are useful for investigating any deployment issues.
After the deployment finishes, use the following steps to check the app's logs to investigate any deployment issue:
Access the application with the output application URL. When you open the app, you get the responseHello World.
Access the application with the output application URL. When you open the app, you get the responseHello World.
Hello World
Use the following command to check the app's log to investigate any deployment issue:az spring app logs \
    --service ${SERVICE_NAME} \
    --name ${APP_NAME}
Use the following command to check the app's log to investigate any deployment issue:
az spring app logs \
    --service ${SERVICE_NAME} \
    --name ${APP_NAME}
az spring app logs \
    --service ${SERVICE_NAME} \
    --name ${APP_NAME}
Use the following steps to stream your application logs:
Access the application with the output application URL. When you open the app, you get the responseHello World.
Access the application with the output application URL. When you open the app, you get the responseHello World.
Hello World
Open theAzure Explorerwindow, expand the nodeAzure, expand the service nodeAzure Spring Apps, expand the Azure Spring Apps instance you created, and then select thedemoinstance of the app you created.
Open theAzure Explorerwindow, expand the nodeAzure, expand the service nodeAzure Spring Apps, expand the Azure Spring Apps instance you created, and then select thedemoinstance of the app you created.
Right-click and selectStart Streaming Logs, then selectOKto see real-time application logs.
Right-click and selectStart Streaming Logs, then selectOKto see real-time application logs.

Use the following steps to stream your application logs:
Access the application with the output application URL. When you open the app, you get the responseHello World.
Access the application with the output application URL. When you open the app, you get the responseHello World.
Hello World
Follow the steps in theStream your application logssection ofJava on Azure Spring Apps.
Follow the steps in theStream your application logssection ofJava on Azure Spring Apps.
6. Clean up resources
If you plan to continue working with subsequent quickstarts and tutorials, you might want to leave these resources in place. When you no longer need the resources, you can clean up unnecessary resources to avoid Azure charges.
Azure portal
Azure portal + Maven plugin
Azure CLI
IntelliJ
Visual Studio Code
Use the following steps to delete the entire resource group, including the newly created service instance:
Locate your resource group in the Azure portal. On the navigation menu, selectResource groups, and then select the name of your resource group.
Use the following steps to delete the entire resource group, including the newly created service instance:
Locate your resource group in the Azure portal. On the navigation menu, selectResource groups, and then select the name of your resource group.
Use the following command to delete the resource group by using the Azure CLI:
az group delete --name ${RESOURCE_GROUP}
az group delete --name ${RESOURCE_GROUP}
Use the following steps to delete the resource group by using IntelliJ:
Go to your IntelliJ IDEA and find the name of your resource group.
Go to your IntelliJ IDEA and find the name of your resource group.
Right-click the resource group and selectDeleteto delete all related Azure resources.
Right-click the resource group and selectDeleteto delete all related Azure resources.
Use the following steps to delete the resource group by using Visual Studio Code:
Go to Visual Studio Code, selectGroup Byto enableGroup by Resource Group, and then find the name of your resource group.
Go to Visual Studio Code, selectGroup Byto enableGroup by Resource Group, and then find the name of your resource group.
Right-click the resource group and selectDelete Resource Group...to delete all related Azure resources.
Right-click the resource group and selectDelete Resource Group...to delete all related Azure resources.
Azure portal
Azure portal + Maven plugin
Azure Developer CLI
Use the following steps to delete the entire resource group, including the newly created service instance:
Locate your resource group in the Azure portal. On the navigation menu, selectResource groups, and then select the name of your resource group.
Use the following steps to delete the entire resource group, including the newly created service instance:
Locate your resource group in the Azure portal. On the navigation menu, selectResource groups, and then select the name of your resource group.
Use the following command to delete all the Azure resources used in this sample application:
azd down
azd down
The following list describes the command interaction:
Total resources to delete: <your-resources-total>, are you sure you want to continue?: Pressy.
The console outputs messages similar to the following example:
SUCCESS: Your application was removed from Azure in xx minutes xx seconds.
SUCCESS: Your application was removed from Azure in xx minutes xx seconds.
7. Next steps
Structured application log for Azure Spring Apps
Map an existing custom domain to Azure Spring Apps
Use Azure Spring Apps CI/CD with GitHub Actions
Automate application deployments to Azure Spring Apps
Use managed identities for applications in Azure Spring Apps
Quickstart: Create a service connection in Azure Spring Apps with the Azure CLI
Introduction to the sample app
Introduction to the Fitness Store sample app
For more information, see the following articles:
Azure Spring Apps Samples.
Azure for Spring developers
Spring Cloud Azure documentation
Feedback
Was this page helpful?
Additional resources