Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
CmdLine@2 - Command line v2 task
Article
2025-03-24
2 contributors
In this article
Use this task to run a command line script using Bash on Linux, macOS, and cmd.exe on Windows.
Syntax
# Command Line v2
# Run a command line script using Bash on Linux and macOS and cmd.exe on Windows.
- task: CmdLine@2
  inputs:
    script: # string. Required. Script. 
  # Advanced
    #workingDirectory: # string. Working Directory. 
    #failOnStderr: false # boolean. Fail on Standard Error. Default: false.
# Command Line v2
# Run a command line script using Bash on Linux and macOS and cmd.exe on Windows.
- task: CmdLine@2
  inputs:
    script: # string. Required. Script. 
  # Advanced
    #workingDirectory: # string. Working Directory. 
    #failOnStderr: false # boolean. Fail on Standard Error. Default: false.
Inputs
script-Scriptstring. Required. Default value:echo Write your commands here\n\necho Hello world.
script
string
echo Write your commands here\n\necho Hello world
The contents of the script you want to run.
workingDirectory-Working Directorystring.
workingDirectory
string
Specifies the working directory to run commands. If you leave it empty, the working directory is$(Build.SourcesDirectory).
failOnStderr-Fail on Standard Errorboolean. Default value:false.
failOnStderr
boolean
false
If the value is set to true, the task fails if any errors are written to the Standard Error stream.
Task control options
All tasks have control options in addition to their task inputs. For more information, seeControl options and common task properties.
Output variables
None.
Remarks
The command line has a shortcut in YAML:steps.script.
- script: # inline script
  workingDirectory: #
  displayName: #
  failOnStderr: #
  env: { string: string } # mapping of environment variables to add
- script: # inline script
  workingDirectory: #
  displayName: #
  failOnStderr: #
  env: { string: string } # mapping of environment variables to add
Running batch and .CMD files
Azure Pipelines puts your inline script contents into a temporary batch file (.cmd) in order to run it.
When you want to run a batch file from another batch file in Windows CMD, you must use thecallcommand, otherwise the first batch file is terminated.
This will result in Azure Pipelines running your intended script up until the first batch file, then running the batch file, then ending the step.
Additional lines in the first script aren't run.
You should always prependcallbefore executing a batch file in an Azure Pipelines script step.
call
call
Important
You may not realize you're running a batch file.
For example,npmon Windows, along with any tools that you install usingnpm install -g, are actually batch files.
Always usecall npm <command>to run NPM commands in a Command Line task on Windows.
npm
npm install -g
call npm <command>
Examples
steps:
- script: date /t
  displayName: Get the date
- script: dir
  workingDirectory: $(Agent.BuildDirectory)
  displayName: List contents of a folder
- script: |
    set MYVAR=foo
    set
  displayName: Set a variable and then display all
  env:
    aVarFromYaml: someValue
steps:
- script: date /t
  displayName: Get the date
- script: dir
  workingDirectory: $(Agent.BuildDirectory)
  displayName: List contents of a folder
- script: |
    set MYVAR=foo
    set
  displayName: Set a variable and then display all
  env:
    aVarFromYaml: someValue
Requirements
See also
Learn how to useverbose logsfortroubleshooting.
Feedback
Was this page helpful?
Additional resources