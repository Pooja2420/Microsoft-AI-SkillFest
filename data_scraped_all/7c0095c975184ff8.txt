Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Quickstart: Create an Azure Cosmos DB for NoSQL account using the Azure portal
Article
2024-09-18
1 contributor
In this article
APPLIES TO:NoSQL
Azure portal
Bicep
Terraform
Azure Resource Manager (JSON)
In this quickstart, you create a new Azure Cosmos DB for NoSQL account in the Azure portal. You then use the Data Explorer experience within the Azure portal to create a database and container configuring all required settings. Finally, you add sample data to the container and issue a basic query.
Prerequisites
An Azure account with an active subscription.Create an account for free.
Create an account
Start by creating a new Azure Cosmos DB for NoSQL account
Sign in to the Azure portal (https://portal.azure.com).
Sign in to the Azure portal (https://portal.azure.com).
EnterAzure Cosmos DBin the global search bar.
EnterAzure Cosmos DBin the global search bar.

WithinServices, selectAzure Cosmos DB.
WithinServices, selectAzure Cosmos DB.

In theAzure Cosmos DBpane, selectCreate, and thenAzure Cosmos DB for NoSQL.
In theAzure Cosmos DBpane, selectCreate, and thenAzure Cosmos DB for NoSQL.


Within theBasicspane, configure the following options, and then selectReview + create:ValueSubscriptionSelect your Azure subscriptionResource GroupCreate a new resource group or select an existing resource groupAccount NameProvide a globally unique nameAvailability ZonesDisableLocationSelect a supported Azure region for your subscriptionTipYou can leave any unspecified options to their default values. You can also configure the account to limit total account throughput to 1,000 request units per second (RU/s) and enable free tier to minimize your costs.
Within theBasicspane, configure the following options, and then selectReview + create:

Tip
You can leave any unspecified options to their default values. You can also configure the account to limit total account throughput to 1,000 request units per second (RU/s) and enable free tier to minimize your costs.
On theReview + createpane, wait for validation of your account to finish successfully, and then selectCreate.
On theReview + createpane, wait for validation of your account to finish successfully, and then selectCreate.

The portal automatically navigates to theDeploymentpane. Wait for the deployment to complete.
The portal automatically navigates to theDeploymentpane. Wait for the deployment to complete.

Once the deployment is complete, selectGo to resourceto navigate to the new Azure Cosmos DB for NoSQL account.
Once the deployment is complete, selectGo to resourceto navigate to the new Azure Cosmos DB for NoSQL account.

Create a database and container
Next, use the Data Explorer to create a database and container in-portal.
In the account resource pane, selectData Explorerin the service menu.
In the account resource pane, selectData Explorerin the service menu.

In theData Explorerpane, select theNew Containeroption.
In theData Explorerpane, select theNew Containeroption.

In theNew Containerdialog, configure the following values and then selectOK:ValueDatabaseCreate newDatabase idcosmicworksShare throughput across containersDon't selectContainer idemployeesPartition keydepartment/nameContainer throughput (autoscale)AutoscaleContainer Max RU/s1000
In theNew Containerdialog, configure the following values and then selectOK:
cosmicworks
employees
department/name
1000

Create a new file nameddemo.bicepparamor (demo.bicepparam).
Create a new file nameddemo.bicepparamor (demo.bicepparam).
demo.bicepparam
Observe the newly created database and container in the Data Explorer's hierarchy.TipOptionally, you can expand the container node to observe additional properties and configuration settings.
Observe the newly created database and container in the Data Explorer's hierarchy.

Tip
Optionally, you can expand the container node to observe additional properties and configuration settings.
Add and query sample data
Finally, use the Data Explorer to create a sample item and then issue a basic query to the container.
Expand the node for theemployeescontainer in the tree of the Data Explorer. Then, select theItemsoption.
Expand the node for theemployeescontainer in the tree of the Data Explorer. Then, select theItemsoption.

In the Data Explorer's menu, selectNew Item.
In the Data Explorer's menu, selectNew Item.

Now, insert the following JSON for a new item in theemployeescontainer and then selectSave:{
  "id": "aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb",
  "name": {
    "first": "Kai",
    "last": "Carter"
  },
  "email": "<kai@adventure-works.com>",
  "department": {
    "name": "Logistics"
  }
}
Now, insert the following JSON for a new item in theemployeescontainer and then selectSave:
{
  "id": "aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb",
  "name": {
    "first": "Kai",
    "last": "Carter"
  },
  "email": "<kai@adventure-works.com>",
  "department": {
    "name": "Logistics"
  }
}
{
  "id": "aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb",
  "name": {
    "first": "Kai",
    "last": "Carter"
  },
  "email": "<kai@adventure-works.com>",
  "department": {
    "name": "Logistics"
  }
}

In the Data Explorer's menu, selectNew SQL Query.
In the Data Explorer's menu, selectNew SQL Query.

Now, insert the following NoSQL query to get all items for thelogisticsdepartment using a case-insensitive search. The query then formats the output as a structured JSON object. Run the query by selectingExecute Query:SELECT VALUE {
    "name": CONCAT(e.name.last, " ", e.name.first),
    "department": e.department.name,
    "emailAddresses": [
        e.email
    ]
}
FROM
    employees e
WHERE
    STRINGEQUALS(e.department.name, "logistics", true)
Now, insert the following NoSQL query to get all items for thelogisticsdepartment using a case-insensitive search. The query then formats the output as a structured JSON object. Run the query by selectingExecute Query:
logistics
SELECT VALUE {
    "name": CONCAT(e.name.last, " ", e.name.first),
    "department": e.department.name,
    "emailAddresses": [
        e.email
    ]
}
FROM
    employees e
WHERE
    STRINGEQUALS(e.department.name, "logistics", true)
SELECT VALUE {
    "name": CONCAT(e.name.last, " ", e.name.first),
    "department": e.department.name,
    "emailAddresses": [
        e.email
    ]
}
FROM
    employees e
WHERE
    STRINGEQUALS(e.department.name, "logistics", true)

Observe the JSON array output from the query.[
  {
    "name": "Carter Kai",
    "department": "Logistics",
    "emailAddresses": [
      "kai@adventure-works.com"
    ]
  }
]
Observe the JSON array output from the query.
[
  {
    "name": "Carter Kai",
    "department": "Logistics",
    "emailAddresses": [
      "kai@adventure-works.com"
    ]
  }
]
[
  {
    "name": "Carter Kai",
    "department": "Logistics",
    "emailAddresses": [
      "kai@adventure-works.com"
    ]
  }
]

Related content
Data Explorer
NoSQL query syntax
Resource model
Feedback
Was this page helpful?
Additional resources