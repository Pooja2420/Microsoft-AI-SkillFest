Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Create a PHP web app in Azure App Service
Article
2024-01-30
16 contributors
In this article
Warning
PHP on Windows reached theend of supportin November 2022. PHP is supported only for App Service on Linux. This article is for reference only.
Azure App Serviceprovides a highly scalable, self-patching web hosting service.  This quickstart tutorial shows how to deploy a PHP app to Azure App Service on Windows.
You create the web app using theAzure CLIin Cloud Shell, and you use Git to deploy sample PHP code to the web app.

You can follow the steps here using a Mac, Windows, or Linux machine. Once the prerequisites are installed, it takes about five minutes to complete the steps.
If you don't have anAzure subscription, create anAzure free accountbefore you begin.
Note
After November 28, 2022, PHP will only be supported on App Service on Linux.
Prerequisites
To complete this quickstart:
Install Git
Install PHP
Download the sample locally
In a terminal window, run the following commands. It will clone the sample application to your local machine, and navigate to the directory containing the sample code.git clone https://github.com/Azure-Samples/php-docs-hello-world
cd php-docs-hello-world
In a terminal window, run the following commands. It will clone the sample application to your local machine, and navigate to the directory containing the sample code.
git clone https://github.com/Azure-Samples/php-docs-hello-world
cd php-docs-hello-world
git clone https://github.com/Azure-Samples/php-docs-hello-world
cd php-docs-hello-world
Make sure the default branch ismain.git branch -m mainTipThe branch name change isn't required by App Service. However, since many repositories are changing their default branch tomain, this quickstart also shows you how to deploy a repository frommain.
Make sure the default branch ismain.
main
git branch -m main
git branch -m main
Tip
The branch name change isn't required by App Service. However, since many repositories are changing their default branch tomain, this quickstart also shows you how to deploy a repository frommain.
main
main
Run the app locally
Run the application locally so that you see how it should look when you deploy it to Azure. Open a terminal window and use thephpcommand to launch the built-in PHP web server.php -S localhost:8080
Run the application locally so that you see how it should look when you deploy it to Azure. Open a terminal window and use thephpcommand to launch the built-in PHP web server.
php
php -S localhost:8080
php -S localhost:8080
Open a web browser, and navigate to the sample app athttp://localhost:8080.You see theHello World!message from the sample app displayed in the page.
Open a web browser, and navigate to the sample app athttp://localhost:8080.
http://localhost:8080
You see theHello World!message from the sample app displayed in the page.

In your terminal window, pressCtrl+Cto exit the web server.
In your terminal window, pressCtrl+Cto exit the web server.
Azure Cloud Shell
Azure hosts Azure Cloud Shell, an interactive shell environment that you can use through your browser. You can use either Bash or PowerShell with Cloud Shell to work with Azure services. You can use the Cloud Shell preinstalled commands to run the code in this article, without having to install anything on your local environment.
To start Azure Cloud Shell:
To use Azure Cloud Shell:
Start Cloud Shell.
Start Cloud Shell.
Select theCopybutton on a code block (or command block) to copy the code or command.
Select theCopybutton on a code block (or command block) to copy the code or command.
Paste the code or command into the Cloud Shell session by selectingCtrl+Shift+Von Windows and Linux, or by selectingCmd+Shift+Von macOS.
Paste the code or command into the Cloud Shell session by selectingCtrl+Shift+Von Windows and Linux, or by selectingCmd+Shift+Von macOS.
SelectEnterto run the code or command.
SelectEnterto run the code or command.
Configure a deployment user
FTP and local Git can deploy to an Azure web app by using adeployment user. Once you configure your deployment user, you can use it for all your Azure deployments. Your account-level deployment username and password are different from your Azure subscription credentials.
To configure the deployment user, run theaz webapp deployment user setcommand in Azure Cloud Shell. Replace <username> and <password> with a deployment user username and password.
The username must be unique within Azure, and for local Git pushes, must not contain the â@â symbol.
The password must be at least eight characters long, with two of the following three elements: letters, numbers, and symbols.
az webapp deployment user set --user-name <username> --password <password>
az webapp deployment user set --user-name <username> --password <password>
The JSON output shows the password asnull. If you get a'Conflict'. Details: 409error, change the username. If you get a'Bad Request'. Details: 400error, use a stronger password.
null
'Conflict'. Details: 409
'Bad Request'. Details: 400
Record your username and password to use to deploy your web apps.
Create a resource group
Aresource groupis a logical container into which Azure resources, such as web apps, databases, and storage accounts, are deployed and managed. For example, you can choose to delete the entire resource group in one simple step later.
In the Cloud Shell, create a resource group with theaz group createcommand. The following example creates a resource group namedmyResourceGroupin theWest Europelocation. To see all supported locations for App Service inFreetier, run theaz appservice list-locations --sku FREEcommand.
az group create
az appservice list-locations --sku FREE
az group create --name myResourceGroup --location "West Europe"
az group create --name myResourceGroup --location "West Europe"
You generally create your resource group and the resources in a region near you.
When the command finishes, a JSON output shows you the resource group properties.
Create an Azure App Service plan
In the Cloud Shell, create an App Service plan with theaz appservice plan createcommand.
az appservice plan create
The following example creates an App Service plan namedmyAppServicePlanin theFreepricing tier:
myAppServicePlan
az appservice plan create --name myAppServicePlan --resource-group myResourceGroup --sku FREE --is-linux
az appservice plan create --name myAppServicePlan --resource-group myResourceGroup --sku FREE --is-linux
When the App Service plan has been created, the Azure CLI shows information similar to the following example:
{ 
  "freeOfferExpirationTime": null,
  "geoRegion": "West Europe",
  "hostingEnvironmentProfile": null,
  "id": "/subscriptions/0000-0000/resourceGroups/myResourceGroup/providers/Microsoft.Web/serverfarms/myAppServicePlan",
  "kind": "linux",
  "location": "West Europe",
  "maximumNumberOfWorkers": 1,
  "name": "myAppServicePlan",
  < JSON data removed for brevity. >
  "targetWorkerSizeId": 0,
  "type": "Microsoft.Web/serverfarms",
  "workerTierName": null
}
Create a web app
In the Cloud Shell, create a web app in themyAppServicePlanApp Service plan with theaz webapp createcommand.In the following example, replace<app-name>with a globally unique app name (valid characters area-z,0-9, and-). The runtime is set toPHP|7.4. To see all supported runtimes, runaz webapp list-runtimes.az webapp create --resource-group myResourceGroup --plan myAppServicePlan --name <app-name> --runtime 'PHP|8.1' --deployment-local-gitWhen the web app has been created, the Azure CLI shows output similar to the following example:Local git is configured with url of 'https://<username>@<app-name>.scm.azurewebsites.net/<app-name>.git'
 {
   "availabilityState": "Normal",
   "clientAffinityEnabled": true,
   "clientCertEnabled": false,
   "cloningInfo": null,
   "containerSize": 0,
   "dailyMemoryTimeQuota": 0,
   "defaultHostName": "<app-name>.azurewebsites.net",
   "enabled": true,
   < JSON data removed for brevity. >
 }You've created an empty new web app, with git deployment enabled.NoteThe URL of the Git remote is shown in thedeploymentLocalGitUrlproperty, with the formathttps://<username>@<app-name>.scm.azurewebsites.net/<app-name>.git. Save this URL as you need it later.
In the Cloud Shell, create a web app in themyAppServicePlanApp Service plan with theaz webapp createcommand.
myAppServicePlan
az webapp create
In the following example, replace<app-name>with a globally unique app name (valid characters area-z,0-9, and-). The runtime is set toPHP|7.4. To see all supported runtimes, runaz webapp list-runtimes.
<app-name>
a-z
0-9
-
PHP|7.4
az webapp list-runtimes
az webapp create --resource-group myResourceGroup --plan myAppServicePlan --name <app-name> --runtime 'PHP|8.1' --deployment-local-git
az webapp create --resource-group myResourceGroup --plan myAppServicePlan --name <app-name> --runtime 'PHP|8.1' --deployment-local-git
When the web app has been created, the Azure CLI shows output similar to the following example:
Local git is configured with url of 'https://<username>@<app-name>.scm.azurewebsites.net/<app-name>.git'
 {
   "availabilityState": "Normal",
   "clientAffinityEnabled": true,
   "clientCertEnabled": false,
   "cloningInfo": null,
   "containerSize": 0,
   "dailyMemoryTimeQuota": 0,
   "defaultHostName": "<app-name>.azurewebsites.net",
   "enabled": true,
   < JSON data removed for brevity. >
 }
You've created an empty new web app, with git deployment enabled.
Note
The URL of the Git remote is shown in thedeploymentLocalGitUrlproperty, with the formathttps://<username>@<app-name>.scm.azurewebsites.net/<app-name>.git. Save this URL as you need it later.
deploymentLocalGitUrl
https://<username>@<app-name>.scm.azurewebsites.net/<app-name>.git
Browse to your newly created web app. Replace<app-name>with your unique app name created in the prior step.http://<app-name>.azurewebsites.netHere's what your new web app should look like:
Browse to your newly created web app. Replace<app-name>with your unique app name created in the prior step.
http://<app-name>.azurewebsites.net
http://<app-name>.azurewebsites.net
Here's what your new web app should look like:

Push to Azure from Git
Since you're deploying themainbranch, you need to set the default deployment branch for your App Service app tomain(seeChange deployment branch). In the Cloud Shell, set theDEPLOYMENT_BRANCHapp setting with theaz webapp config appsettings setcommand.az webapp config appsettings set --name <app-name> --resource-group myResourceGroup --settings DEPLOYMENT_BRANCH='main'
Since you're deploying themainbranch, you need to set the default deployment branch for your App Service app tomain(seeChange deployment branch). In the Cloud Shell, set theDEPLOYMENT_BRANCHapp setting with theaz webapp config appsettings setcommand.
main
main
DEPLOYMENT_BRANCH
az webapp config appsettings set
az webapp config appsettings set --name <app-name> --resource-group myResourceGroup --settings DEPLOYMENT_BRANCH='main'
az webapp config appsettings set --name <app-name> --resource-group myResourceGroup --settings DEPLOYMENT_BRANCH='main'
Back in the local terminal window, add an Azure remote to your local Git repository. Replace<deploymentLocalGitUrl-from-create-step>with the URL of the Git remote that you saved fromCreate a web app.git remote add azure <deploymentLocalGitUrl-from-create-step>
Back in the local terminal window, add an Azure remote to your local Git repository. Replace<deploymentLocalGitUrl-from-create-step>with the URL of the Git remote that you saved fromCreate a web app.
git remote add azure <deploymentLocalGitUrl-from-create-step>
git remote add azure <deploymentLocalGitUrl-from-create-step>
Push to the Azure remote to deploy your app with the following command. When Git Credential Manager prompts you for credentials, make sure you enter the credentials you created inConfigure local git deployment, not the credentials you use to sign in to the Azure portal.git push azure mainThis command might take a few minutes to run. While running, it displays information similar to the following example:
Push to the Azure remote to deploy your app with the following command. When Git Credential Manager prompts you for credentials, make sure you enter the credentials you created inConfigure local git deployment, not the credentials you use to sign in to the Azure portal.
git push azure main
git push azure main
This command might take a few minutes to run. While running, it displays information similar to the following example:
Counting objects: 2, done.
  Delta compression using up to 4 threads.
  Compressing objects: 100% (2/2), done.
  Writing objects: 100% (2/2), 352 bytes | 0 bytes/s, done.
  Total 2 (delta 1), reused 0 (delta 0)
  remote: Updating branch 'main'.
  remote: Updating submodules.
  remote: Preparing deployment for commit id '25f18051e9'.
  remote: Generating deployment script.
  remote: Running deployment command...
  remote: Handling Basic Web Site deployment.
  remote: Kudu sync from: '/home/site/repository' to: '/home/site/wwwroot'
  remote: Copying file: '.gitignore'
  remote: Copying file: 'LICENSE'
  remote: Copying file: 'README.md'
  remote: Copying file: 'index.php'
  remote: Ignoring: .git
  remote: Finished successfully.
  remote: Running post deployment command(s)...
  remote: Deployment successful.
  To https://<app-name>.scm.azurewebsites.net/<app-name>.git
      cc39b1e..25f1805  main -> main
Browse to the app
Browse to the deployed application using your web browser.
http://<app-name>.azurewebsites.net
http://<app-name>.azurewebsites.net
The PHP sample code is running in an Azure App Service web app.

Congratulations!You've deployed your first PHP app to App Service.
Update locally and redeploy the code
Using a local text editor, open theindex.phpfile within the PHP app, and make a small change to the text within the string next toecho:echo "Hello Azure!";
Using a local text editor, open theindex.phpfile within the PHP app, and make a small change to the text within the string next toecho:
index.php
echo
echo "Hello Azure!";
echo "Hello Azure!";
In the local terminal window, commit your changes in Git, and then push the code changes to Azure.git commit -am "updated output"
git push azure main
In the local terminal window, commit your changes in Git, and then push the code changes to Azure.
git commit -am "updated output"
git push azure main
git commit -am "updated output"
git push azure main
Once deployment has completed, return to the browser window that opened during theBrowse to the appstep, and refresh the page.
Once deployment has completed, return to the browser window that opened during theBrowse to the appstep, and refresh the page.

Manage your new Azure app
Go to theAzure portalto manage the web app you created. Search for and selectApp Services.
Go to theAzure portalto manage the web app you created. Search for and selectApp Services.

Select the name of your Azure app.Your web app'sOverviewpage will be displayed. Here, you can perform basic management tasks likeBrowse,Stop,Restart, andDelete.The web app menu provides different options for configuring your app.
Select the name of your Azure app.

Your web app'sOverviewpage will be displayed. Here, you can perform basic management tasks likeBrowse,Stop,Restart, andDelete.

The web app menu provides different options for configuring your app.
Clean up resources
In the preceding steps, you created Azure resources in a resource group. If you don't expect to need these resources in the future, delete the resource group by running the following command in the Cloud Shell:
az group delete --name myResourceGroup
az group delete --name myResourceGroup
This command may take a minute to run.
Azure App Serviceprovides a highly scalable, self-patching web hosting service.  This quickstart shows how to deploy a PHP app to Azure App Service on Linux.

You can follow the steps here using a Mac, Windows, or Linux machine. Once the prerequisites are installed, it takes about five minutes to complete the steps.
To complete this quickstart, you need:
An Azure account with an active subscription.Create an account for free.
Git
PHP
Azure CLIto run commands in any shell to create and configure Azure resources.
1 - Get the sample repository
Azure CLI
Portal
You can create the web app using theAzure CLIin Cloud Shell, and you use Git to deploy sample PHP code to the web app.
In a terminal window, run the following commands to clone the sample application to your local machine and navigate to the project root.git clone https://github.com/Azure-Samples/php-docs-hello-world
cd php-docs-hello-world
In a terminal window, run the following commands to clone the sample application to your local machine and navigate to the project root.
git clone https://github.com/Azure-Samples/php-docs-hello-world
cd php-docs-hello-world
git clone https://github.com/Azure-Samples/php-docs-hello-world
cd php-docs-hello-world
To run the application locally, use thephpcommand to launch the built-in PHP web server.php -S localhost:8080
To run the application locally, use thephpcommand to launch the built-in PHP web server.
php
php -S localhost:8080
php -S localhost:8080
Browse to the sample application athttp://localhost:8080in a web browser.
Browse to the sample application athttp://localhost:8080in a web browser.
http://localhost:8080

In your terminal window, pressCtrl+Cto exit the web server.
In your terminal window, pressCtrl+Cto exit the web server.
In your browser, navigate to the repository containingthe sample code.
In your browser, navigate to the repository containingthe sample code.
In the upper right corner, selectFork.
In the upper right corner, selectFork.

On theCreate a new forkscreen, confirm theOwnerandRepository namefields. SelectCreate fork.
On theCreate a new forkscreen, confirm theOwnerandRepository namefields. SelectCreate fork.

Note
This should take you to the new fork. Your fork URL will look something like this:https://github.com/YOUR_GITHUB_ACCOUNT_NAME/php-docs-hello-world
https://github.com/YOUR_GITHUB_ACCOUNT_NAME/php-docs-hello-world
2 - Deploy your application code to Azure
Azure CLI
Portal
Azure CLI has a commandaz webapp upthat creates the necessary resources and deploys your application in a single step.
az webapp up
In the terminal, deploy the code in your local folder using theaz webapp upcommand:
az webapp up
az webapp up --runtime "PHP:8.2" --os-type=linux
az webapp up --runtime "PHP:8.2" --os-type=linux
If theazcommand isn't recognized, be sure you haveAzure CLIinstalled.
az
The--runtime "PHP:8.2"argument creates the web app with PHP version 8.2.
--runtime "PHP:8.2"
The--os-type=linuxargument creates the web app on App Service on Linux.
--os-type=linux
You can optionally specify a name with the argument--name <app-name>. If you don't provide one, then a name is automatically generated.
--name <app-name>
You can optionally include the argument--location <location-name>where<location_name>is an available Azure region. You can retrieve a list of allowable regions for your Azure account by running theaz account list-locationscommand.
--location <location-name>
<location_name>
az account list-locations
If you see the error, "Could not auto-detect the runtime stack of your app," make sure you're running the command in the code directory (SeeTroubleshooting auto-detect issues with az webapp up).
The command can take a few minutes to complete. While it's running, it provides messages about creating the resource group, the App Service plan, and the app resource, configuring logging, and doing ZIP deployment. It then gives the message, "You can launch the app at http://<app-name>.azurewebsites.net", which is the app's URL on Azure.
The webapp '<app-name>' doesn't exist
Creating Resource group '<group-name>' ...
Resource group creation complete
Creating AppServicePlan '<app-service-plan-name>' ...
Creating webapp '<app-name>' ...
Configuring default logging for the app, if not already enabled
Creating zip with contents of dir /home/msangapu/myPhpApp ...
Getting scm site credentials for zip deployment
Starting zip deployment. This operation can take a while to complete ...
Deployment endpoint responded with status code 202
You can launch the app at http://<app-name>.azurewebsites.net
{
  "URL": "http://<app-name>.azurewebsites.net",
  "appserviceplan": "<app-service-plan-name>",
  "location": "centralus",
  "name": "<app-name>",
  "os": "linux",
  "resourcegroup": "<group-name>",
  "runtime_version": "php|8.2",
  "runtime_version_detected": "0.0",
  "sku": "FREE",
  "src_path": "//home//msangapu//myPhpApp"
}
Note
Theaz webapp upcommand does the following actions:
az webapp up
Create a defaultresource group.
Create a defaultresource group.
Create a defaultApp Service plan.
Create a defaultApp Service plan.
Create an appwith the specified name.
Create an appwith the specified name.
Zip deployall files from the current working directory,with build automation enabled.
Zip deployall files from the current working directory,with build automation enabled.
Cache the parameters locally in the.azure/configfile so that you don't need to specify them again when deploying later withaz webapp upor otheraz webappcommands from the project folder. The cached values are used automatically by default.
Cache the parameters locally in the.azure/configfile so that you don't need to specify them again when deploying later withaz webapp upor otheraz webappcommands from the project folder. The cached values are used automatically by default.
az webapp up
az webapp
Browse to the deployed application in your web browser at the URLhttp://<app-name>.azurewebsites.net.
http://<app-name>.azurewebsites.net
Sign into the Azure portal.
Sign into the Azure portal.
At the top of the portal, typeapp servicesin the search box. UnderServices, selectApp Services.
At the top of the portal, typeapp servicesin the search box. UnderServices, selectApp Services.

In theApp Servicespage, select+ Create.
In theApp Servicespage, select+ Create.
In theBasicstab:UnderResource group, selectCreate new. TypemyResourceGroupfor the name.UnderName, type a globally unique name for your web app.UnderPublish, selectCode.UnderRuntime stackselectPHP 8.2.UnderOperating System, selectLinux.UnderRegion, select an Azure region close to you.UnderApp Service Plan, create an app service plan namedmyAppServicePlan.UnderPricing plan, selectFree F1.
In theBasicstab:
UnderResource group, selectCreate new. TypemyResourceGroupfor the name.
UnderName, type a globally unique name for your web app.
UnderPublish, selectCode.
UnderRuntime stackselectPHP 8.2.
UnderOperating System, selectLinux.
UnderRegion, select an Azure region close to you.
UnderApp Service Plan, create an app service plan namedmyAppServicePlan.
UnderPricing plan, selectFree F1.

Select theDeploymenttab at the top of the page.
Select theDeploymenttab at the top of the page.
UnderGitHub Actions settings, setContinuous deploymenttoEnable.
UnderGitHub Actions settings, setContinuous deploymenttoEnable.
UnderGitHub Actions details, authenticate with your GitHub account, and select the following options:ForOrganizationselect the organization where you forked the demo project.ForRepositoryselect thephp-docs-hello-worldproject.ForBranchselectmaster.NoteBy default, the creation wizarddisables basic authenticationand GitHub Actions deployment is createdusing a user-assigned identity. If you get a permissions error during resource creation, your Azure account might not haveenough permissions. You canconfigure GitHub Actions deployment laterwith an identity generated for you by an Azure administrator, or you can also enable basic authentication instead.
UnderGitHub Actions details, authenticate with your GitHub account, and select the following options:
ForOrganizationselect the organization where you forked the demo project.
ForRepositoryselect thephp-docs-hello-worldproject.
ForBranchselectmaster.

Note
By default, the creation wizarddisables basic authenticationand GitHub Actions deployment is createdusing a user-assigned identity. If you get a permissions error during resource creation, your Azure account might not haveenough permissions. You canconfigure GitHub Actions deployment laterwith an identity generated for you by an Azure administrator, or you can also enable basic authentication instead.
Select theReview + createbutton at the bottom of the page.
Select theReview + createbutton at the bottom of the page.
After validation runs, select theCreatebutton at the bottom of the page.
After validation runs, select theCreatebutton at the bottom of the page.
After deployment is completed, selectGo to resource.
After deployment is completed, selectGo to resource.
Browse to the deployed application in your web browser at the URLhttp://<app-name>.azurewebsites.net.
Browse to the deployed application in your web browser at the URLhttp://<app-name>.azurewebsites.net.
http://<app-name>.azurewebsites.net
The PHP sample code is running in an Azure App Service.

Congratulations!You deployed your first PHP app to App Service using the Azure portal.
3 - Update and redeploy the app
Azure CLI
Portal
Using a local text editor, open theindex.phpfile within the PHP app, and make a small change to the text within the string next toecho:echo "Hello Azure!";
Using a local text editor, open theindex.phpfile within the PHP app, and make a small change to the text within the string next toecho:
index.php
echo
echo "Hello Azure!";
echo "Hello Azure!";
Save your changes, then redeploy the app using theaz webapp upcommand again with these arguments:az webapp up --runtime "PHP:8.2" --os-type=linux
Save your changes, then redeploy the app using theaz webapp upcommand again with these arguments:
az webapp up --runtime "PHP:8.2" --os-type=linux
az webapp up --runtime "PHP:8.2" --os-type=linux
Once deployment is completed, return to the browser window that opened during theBrowse to the appstep, and refresh the page.
Once deployment is completed, return to the browser window that opened during theBrowse to the appstep, and refresh the page.

Browse to your GitHub fork of php-docs-hello-world.
Browse to your GitHub fork of php-docs-hello-world.
On your repo page, press.to start Visual Studio Code within your browser.NoteThe URL will change from GitHub.com to GitHub.dev. This feature only works with repos that have files. This does not work on empty repos.
On your repo page, press.to start Visual Studio Code within your browser.
.

Note
The URL will change from GitHub.com to GitHub.dev. This feature only works with repos that have files. This does not work on empty repos.
Editindex.phpso that it shows "Hello Azure!" instead of "Hello World!"<?php
    echo "Hello Azure!";
?>
Editindex.phpso that it shows "Hello Azure!" instead of "Hello World!"
<?php
    echo "Hello Azure!";
?>
<?php
    echo "Hello Azure!";
?>
From theSource Controlmenu, select theStage Changesbutton to stage the change.
From theSource Controlmenu, select theStage Changesbutton to stage the change.

Enter a commit message such asHello Azure. Then, selectCommit and Push.
Enter a commit message such asHello Azure. Then, selectCommit and Push.
Hello Azure

Once deployment is completed, return to the browser window that opened during theBrowse to the appstep, and refresh the page.
Once deployment is completed, return to the browser window that opened during theBrowse to the appstep, and refresh the page.

4 - Manage your new Azure app
Go to the Azure portal to manage the web app you created. Search for and selectApp Services.
Go to the Azure portal to manage the web app you created. Search for and selectApp Services.

Select the name of your Azure app.Your web app'sOverviewpage should be displayed. Here, you can perform basic management tasks likeBrowse,Stop,Restart, andDelete.The web app menu provides different options for configuring your app.
Select the name of your Azure app.

Your web app'sOverviewpage should be displayed. Here, you can perform basic management tasks likeBrowse,Stop,Restart, andDelete.

The web app menu provides different options for configuring your app.
5 - Clean up resources
When you're finished with the sample app, you can remove all of the resources for the app from Azure. It helps you avoid extra charges and keeps your Azure subscription uncluttered. Removing the resource group also removes all resources in the resource group and is the fastest way to remove all Azure resources for your app.
Azure CLI
Portal
Delete the resource group by using theaz group deletecommand.
az group delete --name myResourceGroup
az group delete --name myResourceGroup
This command takes a minute to run.
From your App ServiceOverviewpage, select the resource group you created.
From your App ServiceOverviewpage, select the resource group you created.
From the resource group page, selectDelete resource group. Confirm the name of the resource group to finish deleting the resources.
From the resource group page, selectDelete resource group. Confirm the name of the resource group to finish deleting the resources.
Next steps
PHP with MySQL
Configure PHP app
Secure with custom domain and certificate
Feedback
Was this page helpful?
Additional resources