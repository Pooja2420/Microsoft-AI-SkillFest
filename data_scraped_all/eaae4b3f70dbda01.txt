Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Migrate JBoss EAP applications to JBoss EAP on Azure App Service
Article
2025-03-18
12 contributors
In this article
This guide describes what you should be aware of when you want to migrate an existing Red Hat JBoss Enterprise Application Platform (EAP) application to run on JBoss EAP in an Azure App Service instance.
Premigration
To ensure a successful migration, before you start, complete the assessment and inventory steps described in the following sections.
Inventory server capacity
Document the hardware (memory, CPU, disk) of the current production server(s) and the average and peak request counts and resource utilization. You'll need this information regardless of the migration path you choose. It's useful, for example, to help guide selection of the size of the VMs in your node pool, the amount of memory to be used by the container, and how many CPU shares the container needs.
It's possible to resize node pools in AKS. To learn how, seeResize node pools in Azure Kubernetes Service (AKS).
Inventory all secrets
Check all properties and configuration files on the production servers for any secrets and passwords. Be sure to checkjboss-web.xmlin your Web Application Archive (WAR) files. Configuration files that contain passwords or credentials can also be found inside your application.
Consider storing those secrets in Azure KeyVault. For more information, seeAzure Key Vault basic concepts.
You can use Key Vault secrets in your App Service instance with Key Vault references. Key Vault references allow you to use the secrets in your application while keeping them secured and encrypted at rest. For more information, seeUse Key Vault references for App Service and Azure Functions.
Inventory all certificates
Document all the certificates used for public SSL endpoints. You can view all certificates on the production server(s) by running the following command:
keytool -list -v -keystore <path to keystore>
keytool -list -v -keystore <path to keystore>
Validate that the supported Java version works correctly
JBoss EAP on App Service requires a supported version of Java. For guidance on which version of the Java Development Kit (JDK) to use, seeSupported Configurationsin the Red Hat documentation.
Note
This validation is especially important if your current server is running on an unsupported JDK (such as Oracle JDK or IBM OpenJ9).
To obtain your current Java version, sign in to your production server and run the following command:
java -version
java -version
Inventory external resources
External resources, such as data sources, Java Message Service (JMS) message brokers, and others are injected via Java Naming and Directory Interface (JNDI). Some such resources can require migration or reconfiguration.
Inspect theWEB-INF/jboss-web.xmland/orWEB-INF/web.xmlfiles. Look for<Resource>elements inside the<Context>element.
<Resource>
<Context>
Datasources are JNDI resources with thetypeattribute set tojavax.sql.DataSource. For each datasource,     document the following information:
type
javax.sql.DataSource
What is the datasource name?
What is the connection pool configuration?
Where can I find the Java Database Connectivity (JDBC) driver JAR file?
For more information, seeAbout JBoss Enterprise Application Platform (EAP) Datasourcesin the JBoss EAP documentation.
It isn't feasible to document every possible external dependency in this guide. It's your team's responsibility to verify that you can satisfy every external dependency of your application after the migration.
Determine whether and how the file system is used
Any usage of the file system on the application server requires reconfiguration or, in rare cases, architectural changes. JBoss EAP modules or your application code can use the file system. You can identify some or all of the scenarios described in the following sections.
If your application currently serves static content, you need an alternate location for it. You should consider moving static content to Azure Blob Storage and adding Azure Front Door for fast downloads globally. For more information, seeStatic website hosting in Azure StorageandIntegrate an Azure Storage account with Azure Front Door.
For files that are frequently written and read by your application (such as temporary data files), or static files that are visible only to your application, you can use local file storage associated with your app service plan. For more information, seeOperating system functionality on Azure App ServiceandUnderstanding the Azure App Service file system.
Determine whether your application relies on scheduled jobs
Scheduled jobs, such as Quartz Scheduler tasks or Unix cron jobs, should NOT be used with Azure App Service. Azure App Service will not prevent you from deploying an application containing scheduled tasks internally. However, if your application is scaled out, the same scheduled job may run more than once per scheduled period. This situation can lead to unintended consequences.
Inventory any scheduled tasks running on the production server(s), inside or outside your application code.
Determine whether a connection to on-premises is needed
If your application needs to access any of your on-premises services, you'll need to provision one of Azure's connectivity services. For more information, seeConnect an on-premises network to Azure. Alternatively, you'll need to refactor your application to use publicly available APIs that your on-premises resources expose.
Determine whether Java Message Service (JMS) Queues or Topics are in use
If your application is using JMS Queues or Topics, you'll need to migrate them to an externally hosted JMS server. Azure Service Bus and the Advanced Message Queuing Protocol (AMQP) can be a great migration strategy for those using JMS. For more information, seeUse Java Message Service 1.1 with Azure Service Bus standard and AMQP 1.0.
If JMS persistent stores have been configured, you must capture their configuration and apply it after the migration.
Determine whether JCA connectors are in use
If your application uses Java Connector Architecture (JCA) connectors, validate that you can use the JCA connector on JBoss EAP. If you can use the JCA connector on JBoss EAP, then for it to be available, you must add the Java Archive (JAR) files to the server classpath and put the necessary configuration files in the correct location in the JBoss EAP server directories.
Determine whether JAAS is in use
If your application is using JAAS, you'll need to capture how JAAS is configured. If it's using a database, you can convert it to a JAAS domain on JBoss EAP. If it's a custom implementation, you'll need to validate that it can be used on JBoss EAP.
Determine whether your application uses a Resource Adapter
If your application needs a Resource Adapter (RA), it needs to be compatible with JBoss EAP. Determine whether the RA works fine on a standalone instance of JBoss EAP by deploying it to the server and properly configuring it. If the RA works properly, you'll need to add the JARs to the server classpath of the App Service and put the necessary configuration files in the correct location in the JBoss EAP server directories for it to be available.
Determine whether your application is composed of multiple WARs
If your application is composed of multiple WARs, you should treat each of those WARs as separate applications and go through this guide for each of them.
Determine whether your application is packaged as an EAR
If your application is packaged as an EAR file, be sure to examine theapplication.xmlfile and capture the configuration.
Note
If you want to be able to scale each of your web applications independently for better use of your App Service resources, you should break up the EAR into separate web applications.
Identify all outside processes and daemons running on the production servers
If you have any processes running outside the application server, such as monitoring daemons, you'll need to eliminate them or migrate them elsewhere.
Perform in-place testing
Before creating your Web Apps, migrate your application to the JDK and JBoss EAP versions that you intend to use on App Service. Test the application thoroughly to ensure compatibility and performance.
JBoss EAP on App Service feature notes
When using JBoss EAP on App Service, be sure to take the following notes into consideration.
JBoss EAP management console: The JBoss web console isn't exposed on App Service. Instead, the Azure portal provides the management APIs for your application, and you should deploy using the Azure CLI, Azure Maven Plugin, or other Azure developer tools. Further configuration of JBoss resources can be achieved using the JBoss CLI during the application startup.
JBoss EAP management console: The JBoss web console isn't exposed on App Service. Instead, the Azure portal provides the management APIs for your application, and you should deploy using the Azure CLI, Azure Maven Plugin, or other Azure developer tools. Further configuration of JBoss resources can be achieved using the JBoss CLI during the application startup.
Transactions: The Transactions API is supported and there's support for automatic transaction recovery. For more information, seeManaging transactions on JBoss EAPin the Red Hat documentation.
Transactions: The Transactions API is supported and there's support for automatic transaction recovery. For more information, seeManaging transactions on JBoss EAPin the Red Hat documentation.
Managed domain mode: In a multi-server production environment, Managed Domain mode in JBoss EAP offers centralized managed capabilities. However with JBoss EAP on App Service, the App Service platform assumes the responsibility for configuration and management of your server instances. App Service eliminates the need for JBoss EAP's managed domain mode. Domain mode is a good choice for virtual machine-based multi-server deployments. For more information, seeAbout managed domainsin the Red Hat documentation.
Managed domain mode: In a multi-server production environment, Managed Domain mode in JBoss EAP offers centralized managed capabilities. However with JBoss EAP on App Service, the App Service platform assumes the responsibility for configuration and management of your server instances. App Service eliminates the need for JBoss EAP's managed domain mode. Domain mode is a good choice for virtual machine-based multi-server deployments. For more information, seeAbout managed domainsin the Red Hat documentation.
Server-to-server clustering: App Service fully supports JBoss EAP clustered deployments. This means you can confidently use:Stateful session beans.Distributed transactions.Similar features that require instance-to-instance communication or high availability.For more information, see theClusteringsection ofConfigure a Java app for Azure App Service.
Server-to-server clustering: App Service fully supports JBoss EAP clustered deployments. This means you can confidently use:
Stateful session beans.
Distributed transactions.
Similar features that require instance-to-instance communication or high availability.
For more information, see theClusteringsection ofConfigure a Java app for Azure App Service.
Migration
Red Hat Migration Toolkit for Apps
TheRed Hat Migration Toolkit for Applicationsis a free extension for Visual Studio Code. This extension analyzes your application code and configuration to provide recommendations for migrating to the cloud from on-premises. For more information, seeMigration Toolkit for Applications overview.
The contents of this guide help you address the other components of the migration journey, such as choosing the correct App Service Plan type, externalizing your session state, and using Azure to manage your EAP instances instead of the JBoss Management interface.
Provision Azure App Service for JBoss EAP runtime
Use the following commands to create a resource group and an Azure App Service Plan. After the App Service Plan is created, a Linux web app plan is created using the JBoss Enterprise Application Platform (EAP) runtime.
Be sure the specified environment variables have appropriate values.
az group create --resource-group $resourceGroup --location eastus
az acr create --resource-group $resourceGroup --name $acrName --sku Standard
az appservice plan create \
    --resource-group $resourceGroup \
    --name $jbossAppService \
    --is-linux \
    --sku P0v3
az webapp create \
    --resource-group $resourceGroup \
    --name $jbossWebApp \
    --plan $jbossAppServicePlan \
    --runtime "JBOSSEAP|8-java17"
    #  Or use "JBOSSEAP|8-java11" if you're using Java 11
az group create --resource-group $resourceGroup --location eastus
az acr create --resource-group $resourceGroup --name $acrName --sku Standard
az appservice plan create \
    --resource-group $resourceGroup \
    --name $jbossAppService \
    --is-linux \
    --sku P0v3
az webapp create \
    --resource-group $resourceGroup \
    --name $jbossWebApp \
    --plan $jbossAppServicePlan \
    --runtime "JBOSSEAP|8-java17"
    #  Or use "JBOSSEAP|8-java11" if you're using Java 11
Build the application
Build the application using the following Maven command.
mvn clean install -DskipTests
mvn clean install -DskipTests
Deploy the application
If your application is built from a Maven POM file, use the Webapp plugin for Maven to create the Web App and deploy your application. For more information, seeQuickstart: Create a Java app on Azure App Service.
To automate the deployment of JBoss EAP applications, you can useAzure Pipelines task for Web ApporGitHub Action for deploying to Azure WebApp.
Set up data sources
There are three core steps when registering a data source with JBoss Enterprise Application Platform (EAP): uploading the Java Database Connectivity (JDBC) driver, adding the JDBC driver as a module, and registering the module. For more information, seeDatasource Managementin the JBoss EAP documentation. App Service is a stateless hosting service, so the configuration commands for adding and registering the data source module must be scripted and applied as the container starts.
To set up data sources, use the following steps.
Obtain your database's JDBC driver.
Obtain your database's JDBC driver.
Create an XML module definition file for the JDBC driver. The example shown is a module definition for PostgreSQL. Be sure to replace theresource-root pathvalue with the path to the JDBC driver you use.<?xml version="1.0" ?>
<module xmlns="urn:jboss:module:1.1" name="org.postgres">
    <resources>
    <!-- ***** IMPORTANT: REPLACE THIS PLACEHOLDER *******-->
    <resource-root path="/home/site/deployments/tools/postgresql-42.2.12.jar" />
    </resources>
    <dependencies>
        <module name="javax.api"/>
        <module name="javax.transaction.api"/>
    </dependencies>
</module>
Create an XML module definition file for the JDBC driver. The example shown is a module definition for PostgreSQL. Be sure to replace theresource-root pathvalue with the path to the JDBC driver you use.
resource-root path
<?xml version="1.0" ?>
<module xmlns="urn:jboss:module:1.1" name="org.postgres">
    <resources>
    <!-- ***** IMPORTANT: REPLACE THIS PLACEHOLDER *******-->
    <resource-root path="/home/site/deployments/tools/postgresql-42.2.12.jar" />
    </resources>
    <dependencies>
        <module name="javax.api"/>
        <module name="javax.transaction.api"/>
    </dependencies>
</module>
<?xml version="1.0" ?>
<module xmlns="urn:jboss:module:1.1" name="org.postgres">
    <resources>
    <!-- ***** IMPORTANT: REPLACE THIS PLACEHOLDER *******-->
    <resource-root path="/home/site/deployments/tools/postgresql-42.2.12.jar" />
    </resources>
    <dependencies>
        <module name="javax.api"/>
        <module name="javax.transaction.api"/>
    </dependencies>
</module>
Put your JBoss CLI commands into a file namedjboss-cli-commands.cli. The JBoss commands must add the module and register it as a data source. The example shows the JBoss CLI commands for PostgreSQL.NoteMicrosoft recommends using the most secure authentication flow available. The authentication flow described in this procedure, such as for databases, caches, messaging, or AI services, requires a very high degree of trust in the application and carries risks not present in other flows. Use this flow only when more secure options, like managed identities for passwordless or keyless connections, are not viable. For local machine operations, prefer user identities for passwordless or keyless connections.module add --name=org.postgres --resources=/home/site/deployments/tools/postgresql-42.2.12.jar --module-xml=/home/site/deployments/tools/postgres-module.xml

/subsystem=datasources/jdbc-driver=postgres:add(driver-name="postgres",driver-module-name="org.postgres",driver-class-name=org.postgresql.Driver,driver-xa-datasource-class-name=org.postgresql.xa.PGXADataSource)

data-source add --name=postgresDS --driver-name=postgres --jndi-name=java:jboss/datasources/postgresDS --connection-url=${POSTGRES_CONNECTION_URL,env.POSTGRES_CONNECTION_URL:jdbc:postgresql://db:5432/postgres} --user-name=${POSTGRES_SERVER_ADMIN_FULL_NAME,env.POSTGRES_SERVER_ADMIN_FULL_NAME:postgres} --password=${POSTGRES_SERVER_ADMIN_PASSWORD,env.POSTGRES_SERVER_ADMIN_PASSWORD:example} --use-ccm=true --max-pool-size=5 --blocking-timeout-wait-millis=5000 --enabled=true --driver-class=org.postgresql.Driver --exception-sorter-class-name=org.jboss.jca.adapters.jdbc.extensions.postgres.PostgreSQLExceptionSorter --jta=true --use-java-context=true --valid-connection-checker-class-name=org.jboss.jca.adapters.jdbc.extensions.postgres.PostgreSQLValidConnectionChecker
Put your JBoss CLI commands into a file namedjboss-cli-commands.cli. The JBoss commands must add the module and register it as a data source. The example shows the JBoss CLI commands for PostgreSQL.
Note
Microsoft recommends using the most secure authentication flow available. The authentication flow described in this procedure, such as for databases, caches, messaging, or AI services, requires a very high degree of trust in the application and carries risks not present in other flows. Use this flow only when more secure options, like managed identities for passwordless or keyless connections, are not viable. For local machine operations, prefer user identities for passwordless or keyless connections.
module add --name=org.postgres --resources=/home/site/deployments/tools/postgresql-42.2.12.jar --module-xml=/home/site/deployments/tools/postgres-module.xml

/subsystem=datasources/jdbc-driver=postgres:add(driver-name="postgres",driver-module-name="org.postgres",driver-class-name=org.postgresql.Driver,driver-xa-datasource-class-name=org.postgresql.xa.PGXADataSource)

data-source add --name=postgresDS --driver-name=postgres --jndi-name=java:jboss/datasources/postgresDS --connection-url=${POSTGRES_CONNECTION_URL,env.POSTGRES_CONNECTION_URL:jdbc:postgresql://db:5432/postgres} --user-name=${POSTGRES_SERVER_ADMIN_FULL_NAME,env.POSTGRES_SERVER_ADMIN_FULL_NAME:postgres} --password=${POSTGRES_SERVER_ADMIN_PASSWORD,env.POSTGRES_SERVER_ADMIN_PASSWORD:example} --use-ccm=true --max-pool-size=5 --blocking-timeout-wait-millis=5000 --enabled=true --driver-class=org.postgresql.Driver --exception-sorter-class-name=org.jboss.jca.adapters.jdbc.extensions.postgres.PostgreSQLExceptionSorter --jta=true --use-java-context=true --valid-connection-checker-class-name=org.jboss.jca.adapters.jdbc.extensions.postgres.PostgreSQLValidConnectionChecker
module add --name=org.postgres --resources=/home/site/deployments/tools/postgresql-42.2.12.jar --module-xml=/home/site/deployments/tools/postgres-module.xml

/subsystem=datasources/jdbc-driver=postgres:add(driver-name="postgres",driver-module-name="org.postgres",driver-class-name=org.postgresql.Driver,driver-xa-datasource-class-name=org.postgresql.xa.PGXADataSource)

data-source add --name=postgresDS --driver-name=postgres --jndi-name=java:jboss/datasources/postgresDS --connection-url=${POSTGRES_CONNECTION_URL,env.POSTGRES_CONNECTION_URL:jdbc:postgresql://db:5432/postgres} --user-name=${POSTGRES_SERVER_ADMIN_FULL_NAME,env.POSTGRES_SERVER_ADMIN_FULL_NAME:postgres} --password=${POSTGRES_SERVER_ADMIN_PASSWORD,env.POSTGRES_SERVER_ADMIN_PASSWORD:example} --use-ccm=true --max-pool-size=5 --blocking-timeout-wait-millis=5000 --enabled=true --driver-class=org.postgresql.Driver --exception-sorter-class-name=org.jboss.jca.adapters.jdbc.extensions.postgres.PostgreSQLExceptionSorter --jta=true --use-java-context=true --valid-connection-checker-class-name=org.jboss.jca.adapters.jdbc.extensions.postgres.PostgreSQLValidConnectionChecker
Create a startup script calledstartup_script.shthat calls the JBoss CLI commands. The example shows how to call yourjboss-cli-commands.clifile. Later you configure App Service to run this script when the instance starts.$JBOSS_HOME/bin/jboss-cli.sh --connect --file=/home/site/deployments/tools/jboss-cli-commands.cli
Create a startup script calledstartup_script.shthat calls the JBoss CLI commands. The example shows how to call yourjboss-cli-commands.clifile. Later you configure App Service to run this script when the instance starts.
$JBOSS_HOME/bin/jboss-cli.sh --connect --file=/home/site/deployments/tools/jboss-cli-commands.cli
$JBOSS_HOME/bin/jboss-cli.sh --connect --file=/home/site/deployments/tools/jboss-cli-commands.cli
Using an FTP client of your choice, upload your JDBC driver,jboss-cli-commands.cli,startup_script.sh, and the module definition to/site/deployments/tools/.
Using an FTP client of your choice, upload your JDBC driver,jboss-cli-commands.cli,startup_script.sh, and the module definition to/site/deployments/tools/.
Configure your site to runstartup_script.shwhen the container starts. In the Azure portal, navigate toConfiguration > General Settings > Startup Command. Set the startup command field to/home/site/deployments/tools/startup_script.sh, then selectSave.
Configure your site to runstartup_script.shwhen the container starts. In the Azure portal, navigate toConfiguration > General Settings > Startup Command. Set the startup command field to/home/site/deployments/tools/startup_script.sh, then selectSave.
Restart the web app, which causes it to run the configuration script.
Restart the web app, which causes it to run the configuration script.
Update the Java Transaction API (JTA) datasource configuration for your application.
Open thesrc/main/resources/META-INF/persistence.xmlfile for your app and find the<jta-data-source>element. Replace its contents as shown here:<jta-data-source>java:jboss/datasources/postgresDS</jta-data-source>
Update the Java Transaction API (JTA) datasource configuration for your application.
Open thesrc/main/resources/META-INF/persistence.xmlfile for your app and find the<jta-data-source>element. Replace its contents as shown here:
<jta-data-source>
<jta-data-source>java:jboss/datasources/postgresDS</jta-data-source>
<jta-data-source>java:jboss/datasources/postgresDS</jta-data-source>
Build the application
Build the application using the following Maven command.
mvn clean install -DskipTests
mvn clean install -DskipTests
Deploy the application
If your application is built from a Maven POM file, use the Webapp plugin for Maven to create the Web App and deploy your application. For more information, seeQuickstart: Create a Java app on Azure App Service.
To automate the deployment of JBoss EAP applications, you can useAzure Pipelines task for Web ApporGitHub Action for deploying to Azure WebApp.
Post-migration
Now that you migrated your application to Azure App Service, you should verify that it works as you expect. After you do that, we have some recommendations for you that can make your application more cloud-native.
Recommendations
If you opted to use the/homedirectory for file storage, consider replacing it with Azure Storage. For more information, seeAccess Azure Storage as a network share from a container in App Service.
If you opted to use the/homedirectory for file storage, consider replacing it with Azure Storage. For more information, seeAccess Azure Storage as a network share from a container in App Service.
If you have configuration in the/homedirectory that contains connection strings, SSL keys, and other secret information, consider using Azure Key Vault and/or parameter injection with application settings where possible. For more information, seeUse Key Vault references for App Service and Azure FunctionsandConfigure an App Service app in the Azure portal.
If you have configuration in the/homedirectory that contains connection strings, SSL keys, and other secret information, consider using Azure Key Vault and/or parameter injection with application settings where possible. For more information, seeUse Key Vault references for App Service and Azure FunctionsandConfigure an App Service app in the Azure portal.
Consider using deployment slots for reliable deployments with zero downtime. For more information, seeSet up staging environments in Azure App Service.
Consider using deployment slots for reliable deployments with zero downtime. For more information, seeSet up staging environments in Azure App Service.
Design and implement a DevOps strategy. To maintain reliability while increasing your development velocity, consider automating deployments and testing with Azure Pipelines. For more information, seeBuild and deploy to a Java web app. When you use deployment slots, you canautomate deployment to a slotfollowed by the slot swap. For more information, see theDeploy to a slotsection ofDeploy an Azure Web App (Linux).
Design and implement a DevOps strategy. To maintain reliability while increasing your development velocity, consider automating deployments and testing with Azure Pipelines. For more information, seeBuild and deploy to a Java web app. When you use deployment slots, you canautomate deployment to a slotfollowed by the slot swap. For more information, see theDeploy to a slotsection ofDeploy an Azure Web App (Linux).
Design and implement a business continuity and disaster recovery strategy. For mission-critical applications, consider a multi-region deployment architecture. For more information, seeHighly available multi-region web application.
Design and implement a business continuity and disaster recovery strategy. For mission-critical applications, consider a multi-region deployment architecture. For more information, seeHighly available multi-region web application.
Feedback
Was this page helpful?
Additional resources