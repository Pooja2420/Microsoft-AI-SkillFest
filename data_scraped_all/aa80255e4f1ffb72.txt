Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
OpenTelemetry Support and Feedback for Application Insights
Article
2025-03-23
8 contributors
In this article
This document outlines available resources for assistance, support channels, and feedback mechanisms related to OpenTelemetry (OTel) integration withAzure Monitor Application Insightsfor .NET, Java, Node.js, and Python applications.
Review frequently asked questions
Take troubleshooting steps
Get support
Provide feedback
Frequently asked questions
What is OpenTelemetry?
It's a new open-source standard for observability. Learn more atOpenTelemetry.
Why is Microsoft Azure Monitor investing in OpenTelemetry?
Microsoft is investing in OpenTelemetry for the following reasons:
It's vendor-neutral and provides consistent APIs/SDKs across languages.
Over time, we believe OpenTelemetry will enable Azure Monitor customers to observe applications written in languages beyond oursupported languages.
It expands the types of data you can collect through a rich set ofinstrumentation libraries.
OpenTelemetry Software Development Kits (SDKs) tend to be more performant at scale than their predecessors, the Application Insights SDKs.
OpenTelemetry aligns with Microsoft's strategy toembrace open source.
What's the status of OpenTelemetry?
SeeOpenTelemetry Status.
What is the Azure Monitor OpenTelemetry Distro?
You can think of it as a thin wrapper that bundles together all the OpenTelemetry components for a first-class experience on Azure. This wrapper is also called adistributionin OpenTelemetry.
Why should I use the Azure Monitor OpenTelemetry Distro?
There are several advantages to using the Azure Monitor OpenTelemetry Distro over native OpenTelemetry from the community:
Reduces enablement effort
Supported by Microsoft
Brings in Azure-specific features such as:Sampling compatible with classic Application Insights SDKsMicrosoft Entra authenticationOffline Storage and Automatic RetriesStatsbeatApplication Insights Standard MetricsDetect resource metadata to autopopulateCloud Role NameandCloud Role Instanceon various Azure environmentsLive Metrics
Sampling compatible with classic Application Insights SDKs
Microsoft Entra authentication
Offline Storage and Automatic Retries
Statsbeat
Application Insights Standard Metrics
Detect resource metadata to autopopulateCloud Role NameandCloud Role Instanceon various Azure environments
Live Metrics
In the spirit of OpenTelemetry, we designed the distro to be open and extensible. For example, you can add:
An OpenTelemetry Protocol (OTLP) exporter and send to a second destination simultaneously
Other instrumentation libraries not included in the distro
Because the Distro provides anOpenTelemetry distribution, the Distro supports anything supported by OpenTelemetry. For example, you can add more telemetry processors, exporters, or instrumentation libraries, if OpenTelemetry supports them.
Note
The Distro sets the sampler to a custom, fixed-rate sampler for Application Insights. You can change this to a different sampler, but doing so might disable some of the Distro's included capabilities.
For more information about the supported sampler, see theEnable Samplingsection ofConfigure Azure Monitor OpenTelemetry.
For languages without a supported standalone OpenTelemetry exporter, the Azure Monitor OpenTelemetry Distro is the only currently supported way to use OpenTelemetry with Azure Monitor. For languages with a supported standalone OpenTelemetry exporter, you have the option of using either the Azure Monitor OpenTelemetry Distro or the appropriate standalone OpenTelemetry exporter depending on your telemetry scenario. For more information, seeWhen should I use the Azure Monitor OpenTelemetry exporter?.
How can I test out the Azure Monitor OpenTelemetry Distro?
Check out our enablement docs for.NET, Java, JavaScript (Node.js), and Python.
Should I use OpenTelemetry or the Application Insights SDK?
We recommend using the Azure Monitor OpenTelemetry Distro for new projects whenits capabilitiesalign with your monitoring needs. OpenTelemetry is an industry-standard framework that enhances cross-platform observability and provides a standardized approach to telemetry collection.
However, the Application Insights SDKs still provide certain capabilities that aren't yet fully automated in OpenTelemetry, including:
Automatic dependency tracking â OpenTelemetry supports dependency tracking, but some dependencies require additional configuration compared to the automatic tracking available in Application Insights SDKs.
Custom telemetry types, such asAvailabilityTelemetryandPageViewTelemetryâ OpenTelemetry doesn't have direct equivalents. Similar functionality can be implemented via manual instrumentation.
AvailabilityTelemetry
PageViewTelemetry
Telemetry processors and initializers â OpenTelemetry has processors and span processors, but they don't fully replace Application Insights Telemetry Processors and Initializers in all scenarios.
Extended metrics collection â While OpenTelemetry has a strong metrics system, some built-in metrics from Application Insights SDKs require manual setup in OpenTelemetry.
OpenTelemetry also provides advantages over the Application Insights SDKs, including:
Better standardization across platforms
A wider ecosystem of instrumentation libraries
Greater flexibility in data collection and processing
Improved vendor neutrality, though Azure Monitor OpenTelemetry Distro is still optimized for Azure.
Azure Monitor's OpenTelemetry integration is continuously evolving, and Microsoft continues to enhance its capabilities. If you're considering a transition, carefully evaluate whether OpenTelemetry currently meets your observability requirements or if the Application Insights SDK remains the better fit for your needs.
When should I use the Azure Monitor OpenTelemetry exporter?
For ASP.NET Core, Java, Node.js, and Python, we recommend using the Azure Monitor OpenTelemetry Distro. It's one line of code to get started.
For all other .NET scenarios, including classic ASP.NET, console apps, Windows Forms (WinForms), etc., we recommend using the .NET Azure Monitor OpenTelemetry exporter:Azure.Monitor.OpenTelemetry.Exporter.
Azure.Monitor.OpenTelemetry.Exporter
For more complex Python telemetry scenarios that require advanced configuration, we recommend using the PythonAzure Monitor OpenTelemetry Exporter.
What's the current release state of features within the Azure Monitor OpenTelemetry Distro?
The following chart breaks out OpenTelemetry feature support for each language.
Key
â This feature is available to all customers with formal support.
â ï¸ This feature is available as a public preview. SeeSupplemental terms of use for Microsoft Azure previews.
â This feature isn't available or isn't applicable.
Can OpenTelemetry be used for web browsers?
Yes, but we don't recommend it and Azure doesn't support it. OpenTelemetry JavaScript is heavily optimized for Node.js. Instead, we recommend using the Application Insights JavaScript SDK.
When can we expect the OpenTelemetry SDK to be available for use in web browsers?
The OpenTelemetry web SDK doesn't have a determined availability timeline. We're likely several years away from a browser SDK that is a viable alternative to the Application Insights JavaScript SDK.
Can I test OpenTelemetry in a web browser today?
TheOpenTelemetry web sandboxis a fork designed to make OpenTelemetry work in a browser. It's not yet possible to send telemetry to Application Insights. The SDK doesn't define general client events.
Is running Application Insights alongside competitor agents like AppDynamics, DataDog, and NewRelic supported?
This practice isn't something we plan to test or support, although our Distros allow you toexport to an OTLP endpointalongside Azure Monitor simultaneously.
Can I use preview features in production environments?
We don't recommend it. SeeSupplemental terms of use for Microsoft Azure previews.
What's the difference between manual and automatic instrumentation?
See theOpenTelemetry Overview.
Can I use the OpenTelemetry Collector?
Some customers use the OpenTelemetry Collector as an agent alternative, even though Microsoft doesn't officially support an agent-based approach for application monitoring yet. In the meantime, the open-source community contributed anOpenTelemetry Collector Azure Monitor Exporterthat some customers are using to send data to Azure Monitor Application Insights.This is not supported by Microsoft.
What's the difference between OpenCensus and OpenTelemetry?
OpenCensusis the precursor toOpenTelemetry. Microsoft helped bring togetherOpenTracingand OpenCensus to create OpenTelemetry, a single observability standard for the world. The currentproduction-recommended Python SDKfor Azure Monitor is based on OpenCensus. Microsoft is committed to making Azure Monitor based on OpenTelemetry.
In Grafana, why do I seeStatus: 500. Can't visualize trace events using the trace visualizer?
Status: 500. Can't visualize trace events using the trace visualizer
You could be trying to visualize raw text logs rather than OpenTelemetry traces.
In Application Insights, the 'Traces' table stores raw text logs for diagnostic purposes. They aid in identifying and correlating traces associated with user requests, other events, and exception reports. However, the 'Traces' table doesn't directly contribute to the end-to-end transaction view (waterfall chart) in visualization tools like Grafana.
With the growing adoption of cloud-native practices, there's an evolution in telemetry collection and terminology. OpenTelemetry became a standard for collecting and instrumenting telemetry data. In this context, the term 'Traces' took on a new meaning. Rather than raw logs, 'Traces' in OpenTelemetry refer to a richer, structured form of telemetry that includes spans, which represent individual units of work. These spans are crucial for constructing detailed transaction views, enabling better monitoring and diagnostics of cloud-native applications.
How should I instrument Blazor Apps?
To instrument a Blazor app, first identify the hosting model. Blazor Server supports fullOpenTelemetry-based instrumentation. Blazor WebAssembly runs in the browser and supports limited instrumentation through JavaScript.
Troubleshooting
ASP.NET Core
.NET
Java
Java native
Node.js
Python
For troubleshooting information, seeTroubleshoot OpenTelemetry issues in .NETandTroubleshoot missing application telemetry in Azure Monitor Application Insights.
For troubleshooting information, seeTroubleshoot OpenTelemetry issues in .NETandTroubleshoot missing application telemetry in Azure Monitor Application Insights.
For troubleshooting information, seeTroubleshoot OpenTelemetry issues in JavaandTroubleshoot missing application telemetry in Azure Monitor Application Insights.
For troubleshooting information, seeTroubleshoot OpenTelemetry issues in Spring Boot native image applicationsandTroubleshoot missing application telemetry in Azure Monitor Application Insights.
For troubleshooting information, seeTroubleshoot OpenTelemetry issues in Node.jsandTroubleshoot missing application telemetry in Azure Monitor Application Insights.
For troubleshooting information, seeTroubleshoot OpenTelemetry issues in PythonandTroubleshoot missing application telemetry in Azure Monitor Application Insights.
Support
Select a tab for the language of your choice to discover support options.
ASP.NET Core
.NET
Java
Java native
Node.js
Python
For Azure support issues, open anAzure support ticket.
For OpenTelemetry issues, contact theOpenTelemetry .NET communitydirectly.
For a list of open issues related to Azure Monitor Exporter, see theGitHub Issues Page.
For Azure support issues, open anAzure support ticket.
For OpenTelemetry issues, contact theOpenTelemetry .NET communitydirectly.
For a list of open issues related to Azure Monitor Exporter, see theGitHub Issues Page.
For Azure support issues, open anAzure support ticket.
For help with troubleshooting, review thetroubleshooting steps.
For OpenTelemetry issues, contact theOpenTelemetry communitydirectly.
For a list of open issues related to Azure Monitor Java Autoinstrumentation, see theGitHub Issues Page.
For Azure support issues, open anAzure support ticket.
For OpenTelemetry issues, contact theOpenTelemetry communitydirectly.
For a list of open issues with Spring Boot native applications, see theGitHub Issues Page.
For a list of open issues with Quarkus native applications, see theGitHub Issues Page.
For Azure support issues, open anAzure support ticket.
For OpenTelemetry issues, contact theOpenTelemetry JavaScript communitydirectly.
For a list of open issues related to Azure Monitor Exporter, see theGitHub Issues Page.
For Azure support issues, open anAzure support ticket.
For OpenTelemetry issues, contact theOpenTelemetry Python communitydirectly.
For a list of open issues related to Azure Monitor Distro, see theGitHub Issues Page.
OpenTelemetry Feedback
To provide feedback:
Fill out the OpenTelemetry community'scustomer feedback survey.
Tell Microsoft about yourself by joining theOpenTelemetry Early Adopter Community.
Engage with other Azure Monitor users in theMicrosoft Tech Community.
Make a feature request at theAzure Feedback Forum.
Feedback
Was this page helpful?
Additional resources