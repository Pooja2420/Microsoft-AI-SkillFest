Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Tutorial: Restrict network access to PaaS resources with virtual network service endpoints
Article
2024-08-16
9 contributors
In this article
Virtual network service endpoints enable you to limit network access to some Azure service resources to a virtual network subnet. You can also remove internet access to the resources. Service endpoints provide direct connection from your virtual network to supported Azure services, allowing you to use your virtual network's private address space to access the Azure services. Traffic destined to Azure resources through service endpoints always stays on the Microsoft Azure backbone network.

In this tutorial, you learn how to:
Create a virtual network with one subnet
Add a subnet and enable a service endpoint
Create an Azure resource and allow network access to it from only a subnet
Deploy a virtual machine (VM) to each subnet
Confirm access to a resource from a subnet
Confirm access is denied to a resource from a subnet and the internet
Prerequisites
Portal
PowerShell
CLI
An Azure account with an active subscription.Create one for free.
If you don't have an Azure subscription, create afree accountbefore you begin.
Azure Cloud Shell
Azure hosts Azure Cloud Shell, an interactive shell environment that you can use through your browser. You can use either Bash or PowerShell with Cloud Shell to work with Azure services. You can use the Cloud Shell preinstalled commands to run the code in this article, without having to install anything on your local environment.
To start Azure Cloud Shell:
To use Azure Cloud Shell:
Start Cloud Shell.
Start Cloud Shell.
Select theCopybutton on a code block (or command block) to copy the code or command.
Select theCopybutton on a code block (or command block) to copy the code or command.
Paste the code or command into the Cloud Shell session by selectingCtrl+Shift+Von Windows and Linux, or by selectingCmd+Shift+Von macOS.
Paste the code or command into the Cloud Shell session by selectingCtrl+Shift+Von Windows and Linux, or by selectingCmd+Shift+Von macOS.
SelectEnterto run the code or command.
SelectEnterto run the code or command.
If you choose to install and use PowerShell locally, this article requires the Azure PowerShell module version 1.0.0 or later. RunGet-Module -ListAvailable Azto find the installed version. If you need to upgrade, seeInstall Azure PowerShell module. If you're running PowerShell locally, you also need to runConnect-AzAccountto create a connection with Azure.
Get-Module -ListAvailable Az
Connect-AzAccount
If you don't have anAzure subscription, create anAzure free accountbefore you begin.
Use the Bash environment inAzure Cloud Shell. For more information, seeGet started with Azure Cloud Shell.
Use the Bash environment inAzure Cloud Shell. For more information, seeGet started with Azure Cloud Shell.

If you prefer to run CLI reference commands locally,installthe Azure CLI. If you're running on Windows or macOS, consider running Azure CLI in a Docker container. For more information, seeHow to run the Azure CLI in a Docker container.If you're using a local installation, sign in to the Azure CLI by using theaz logincommand. To finish the authentication process, follow the steps displayed in your terminal. For other sign-in options, seeAuthenticate to Azure using Azure CLI.When you're prompted, install the Azure CLI extension on first use. For more information about extensions, seeUse and manage extensions with the Azure CLI.Runaz versionto find the version and dependent libraries that are installed. To upgrade to the latest version, runaz upgrade.
If you prefer to run CLI reference commands locally,installthe Azure CLI. If you're running on Windows or macOS, consider running Azure CLI in a Docker container. For more information, seeHow to run the Azure CLI in a Docker container.
If you're using a local installation, sign in to the Azure CLI by using theaz logincommand. To finish the authentication process, follow the steps displayed in your terminal. For other sign-in options, seeAuthenticate to Azure using Azure CLI.
If you're using a local installation, sign in to the Azure CLI by using theaz logincommand. To finish the authentication process, follow the steps displayed in your terminal. For other sign-in options, seeAuthenticate to Azure using Azure CLI.
When you're prompted, install the Azure CLI extension on first use. For more information about extensions, seeUse and manage extensions with the Azure CLI.
When you're prompted, install the Azure CLI extension on first use. For more information about extensions, seeUse and manage extensions with the Azure CLI.
Runaz versionto find the version and dependent libraries that are installed. To upgrade to the latest version, runaz upgrade.
Runaz versionto find the version and dependent libraries that are installed. To upgrade to the latest version, runaz upgrade.
This article requires version 2.0.28 or later of the Azure CLI. If using Azure Cloud Shell, the latest version is already installed.
Enable a service endpoint
Portal
PowerShell
CLI
Create a virtual network and an Azure Bastion host
The following procedure creates a virtual network with a resource subnet, an Azure Bastion subnet, and a Bastion host:
In the portal, search for and selectVirtual networks.
In the portal, search for and selectVirtual networks.
On theVirtual networkspage, select+ Create.
On theVirtual networkspage, select+ Create.
On theBasicstab ofCreate virtual network, enter, or select the following information:SettingValueProject detailsSubscriptionSelect your subscription.Resource groupSelectCreate new.Entertest-rgfor the name.SelectOK.Instance detailsNameEntervnet-1.RegionSelectEast US 2.
On theBasicstab ofCreate virtual network, enter, or select the following information:

SelectNextto proceed to theSecuritytab.
SelectNextto proceed to theSecuritytab.
In theAzure Bastionsection, selectEnable Azure Bastion.Bastion uses your browser to connect to VMs in your virtual network over Secure Shell (SSH) or Remote Desktop Protocol (RDP) by using their private IP addresses. The VMs don't need public IP addresses, client software, or special configuration. For more information, seeWhat is Azure Bastion?.NoteHourly pricing starts from the moment that Bastion is deployed, regardless of outbound data usage. For more information, seePricingandSKUs. If you're deploying Bastion as part of a tutorial or test, we recommend that you delete this resource after you finish using it.
In theAzure Bastionsection, selectEnable Azure Bastion.
Bastion uses your browser to connect to VMs in your virtual network over Secure Shell (SSH) or Remote Desktop Protocol (RDP) by using their private IP addresses. The VMs don't need public IP addresses, client software, or special configuration. For more information, seeWhat is Azure Bastion?.
Note
Hourly pricing starts from the moment that Bastion is deployed, regardless of outbound data usage. For more information, seePricingandSKUs. If you're deploying Bastion as part of a tutorial or test, we recommend that you delete this resource after you finish using it.
InAzure Bastion, enter or select the following information:SettingValueAzure Bastion host nameEnterbastion.Azure Bastion public IP addressSelectCreate a public IP address.Enterpublic-ip-bastionin Name.SelectOK.
InAzure Bastion, enter or select the following information:

SelectNextto proceed to theIP Addressestab.
SelectNextto proceed to theIP Addressestab.
In the address space box inSubnets, select thedefaultsubnet.
In the address space box inSubnets, select thedefaultsubnet.
InEdit subnet, enter or select the following information:SettingValueSubnet purposeLeave the default ofDefault.NameEntersubnet-1.IPv4IPv4 address rangeLeave the default of10.0.0.0/16.Starting addressLeave the default of10.0.0.0.SizeLeave the default of/24 (256 addresses).
InEdit subnet, enter or select the following information:

SelectSave.
SelectSave.
SelectReview + createat the bottom of the window. When validation passes, selectCreate.
SelectReview + createat the bottom of the window. When validation passes, selectCreate.
Service endpoints are enabled per service, per subnet.
In the search box at the top of the portal page, search forVirtual network. SelectVirtual networksin the search results.
In the search box at the top of the portal page, search forVirtual network. SelectVirtual networksin the search results.
InVirtual networks, selectvnet-1.
InVirtual networks, selectvnet-1.
In theSettingssection ofvnet-1, selectSubnets.
In theSettingssection ofvnet-1, selectSubnets.
Select+ Subnet.
Select+ Subnet.
On theAdd subnetpage, enter, or select the following information:SettingValueNamesubnet-privateSubnet address rangeLeave the default of10.0.2.0/24.SERVICE ENDPOINTSServicesSelectMicrosoft.Storage
On theAdd subnetpage, enter, or select the following information:
SelectSave.
SelectSave.
Caution
Before enabling a service endpoint for an existing subnet that has resources in it, seeChange subnet settings.
Create a virtual network
Before creating a virtual network, you have to create a resource group for the virtual network, and all other resources created in this article. Create a resource group withNew-AzResourceGroup. The following example creates a resource group namedtest-rg:$rg = @{
    ResourceGroupName = "test-rg"
    Location = "westus2"
}
New-AzResourceGroup @rg
Before creating a virtual network, you have to create a resource group for the virtual network, and all other resources created in this article. Create a resource group withNew-AzResourceGroup. The following example creates a resource group namedtest-rg:
$rg = @{
    ResourceGroupName = "test-rg"
    Location = "westus2"
}
New-AzResourceGroup @rg
$rg = @{
    ResourceGroupName = "test-rg"
    Location = "westus2"
}
New-AzResourceGroup @rg
Create a virtual network withNew-AzVirtualNetwork. The following example creates a virtual network namedvnet-1with the address prefix10.0.0.0/16.$vnet = @{
    ResourceGroupName = "test-rg"
    Location = "westus2"
    Name = "vnet-1"
    AddressPrefix = "10.0.0.0/16"
}
$virtualNetwork = New-AzVirtualNetwork @vnet
Create a virtual network withNew-AzVirtualNetwork. The following example creates a virtual network namedvnet-1with the address prefix10.0.0.0/16.
$vnet = @{
    ResourceGroupName = "test-rg"
    Location = "westus2"
    Name = "vnet-1"
    AddressPrefix = "10.0.0.0/16"
}
$virtualNetwork = New-AzVirtualNetwork @vnet
$vnet = @{
    ResourceGroupName = "test-rg"
    Location = "westus2"
    Name = "vnet-1"
    AddressPrefix = "10.0.0.0/16"
}
$virtualNetwork = New-AzVirtualNetwork @vnet
Create a subnet configuration withNew-AzVirtualNetworkSubnetConfig. The following example creates a subnet configuration for a subnet namedsubnet-public:$subpub = @{
    Name = "subnet-public"
    AddressPrefix = "10.0.0.0/24"
    VirtualNetwork = $virtualNetwork
}
$subnetConfigPublic = Add-AzVirtualNetworkSubnetConfig @subpub
Create a subnet configuration withNew-AzVirtualNetworkSubnetConfig. The following example creates a subnet configuration for a subnet namedsubnet-public:
$subpub = @{
    Name = "subnet-public"
    AddressPrefix = "10.0.0.0/24"
    VirtualNetwork = $virtualNetwork
}
$subnetConfigPublic = Add-AzVirtualNetworkSubnetConfig @subpub
$subpub = @{
    Name = "subnet-public"
    AddressPrefix = "10.0.0.0/24"
    VirtualNetwork = $virtualNetwork
}
$subnetConfigPublic = Add-AzVirtualNetworkSubnetConfig @subpub
Create the subnet in the virtual network by writing the subnet configuration to the virtual network withSet-AzVirtualNetwork:$virtualNetwork | Set-AzVirtualNetwork
Create the subnet in the virtual network by writing the subnet configuration to the virtual network withSet-AzVirtualNetwork:
$virtualNetwork | Set-AzVirtualNetwork
$virtualNetwork | Set-AzVirtualNetwork
Create another subnet in the virtual network. In this example, a subnet namedsubnet-privateis created with a service endpoint forMicrosoft.Storage:$subpriv = @{
    Name = "subnet-private"
    AddressPrefix = "10.0.2.0/24"
    VirtualNetwork = $virtualNetwork
    ServiceEndpoint = "Microsoft.Storage"
}
$subnetConfigPrivate = Add-AzVirtualNetworkSubnetConfig @subpriv

$virtualNetwork | Set-AzVirtualNetwork
Create another subnet in the virtual network. In this example, a subnet namedsubnet-privateis created with a service endpoint forMicrosoft.Storage:
$subpriv = @{
    Name = "subnet-private"
    AddressPrefix = "10.0.2.0/24"
    VirtualNetwork = $virtualNetwork
    ServiceEndpoint = "Microsoft.Storage"
}
$subnetConfigPrivate = Add-AzVirtualNetworkSubnetConfig @subpriv

$virtualNetwork | Set-AzVirtualNetwork
$subpriv = @{
    Name = "subnet-private"
    AddressPrefix = "10.0.2.0/24"
    VirtualNetwork = $virtualNetwork
    ServiceEndpoint = "Microsoft.Storage"
}
$subnetConfigPrivate = Add-AzVirtualNetworkSubnetConfig @subpriv

$virtualNetwork | Set-AzVirtualNetwork
Deploy Azure Bastion
Azure Bastion uses your browser to connect to VMs in your virtual network over Secure Shell (SSH) or Remote Desktop Protocol (RDP) by using their private IP addresses. The VMs don't need public IP addresses, client software, or special configuration. For more information about Bastion, seeWhat is Azure Bastion?.
Hourly pricing starts from the moment that Bastion is deployed, regardless of outbound data usage. For more information, seePricingandSKUs. If you're deploying Bastion as part of a tutorial or test, we recommend that you delete this resource after you finish using it.
Configure a Bastion subnet for your virtual network. This subnet is reserved exclusively for Bastion resources and must be namedAzureBastionSubnet.$subnet = @{
    Name = 'AzureBastionSubnet'
    VirtualNetwork = $virtualNetwork
    AddressPrefix = '10.0.1.0/26'
}
$subnetConfig = Add-AzVirtualNetworkSubnetConfig @subnet
Configure a Bastion subnet for your virtual network. This subnet is reserved exclusively for Bastion resources and must be namedAzureBastionSubnet.
$subnet = @{
    Name = 'AzureBastionSubnet'
    VirtualNetwork = $virtualNetwork
    AddressPrefix = '10.0.1.0/26'
}
$subnetConfig = Add-AzVirtualNetworkSubnetConfig @subnet
$subnet = @{
    Name = 'AzureBastionSubnet'
    VirtualNetwork = $virtualNetwork
    AddressPrefix = '10.0.1.0/26'
}
$subnetConfig = Add-AzVirtualNetworkSubnetConfig @subnet
Set the configuration:$virtualNetwork | Set-AzVirtualNetwork
Set the configuration:
$virtualNetwork | Set-AzVirtualNetwork
$virtualNetwork | Set-AzVirtualNetwork
Create a public IP address for Bastion. The Bastion host uses the public IP to access SSH and RDP over port 443.$ip = @{
        ResourceGroupName = 'test-rg'
        Name = 'public-ip'
        Location = 'westus2'
        AllocationMethod = 'Static'
        Sku = 'Standard'
        Zone = 1,2,3
}
New-AzPublicIpAddress @ip
Create a public IP address for Bastion. The Bastion host uses the public IP to access SSH and RDP over port 443.
$ip = @{
        ResourceGroupName = 'test-rg'
        Name = 'public-ip'
        Location = 'westus2'
        AllocationMethod = 'Static'
        Sku = 'Standard'
        Zone = 1,2,3
}
New-AzPublicIpAddress @ip
$ip = @{
        ResourceGroupName = 'test-rg'
        Name = 'public-ip'
        Location = 'westus2'
        AllocationMethod = 'Static'
        Sku = 'Standard'
        Zone = 1,2,3
}
New-AzPublicIpAddress @ip
Use theNew-AzBastioncommand to create a new standard Bastion host inAzureBastionSubnet:$bastion = @{
    Name = 'bastion'
    ResourceGroupName = 'test-rg'
    PublicIpAddressRgName = 'test-rg'
    PublicIpAddressName = 'public-ip'
    VirtualNetworkRgName = 'test-rg'
    VirtualNetworkName = 'vnet-1'
    Sku = 'Basic'
}
New-AzBastion @bastion -AsJobIt takes about 10 minutes to deploy the Bastion resources. You can create VMs in the next section while Bastion deploys to your virtual network.
Use theNew-AzBastioncommand to create a new standard Bastion host inAzureBastionSubnet:
$bastion = @{
    Name = 'bastion'
    ResourceGroupName = 'test-rg'
    PublicIpAddressRgName = 'test-rg'
    PublicIpAddressName = 'public-ip'
    VirtualNetworkRgName = 'test-rg'
    VirtualNetworkName = 'vnet-1'
    Sku = 'Basic'
}
New-AzBastion @bastion -AsJob
$bastion = @{
    Name = 'bastion'
    ResourceGroupName = 'test-rg'
    PublicIpAddressRgName = 'test-rg'
    PublicIpAddressName = 'public-ip'
    VirtualNetworkRgName = 'test-rg'
    VirtualNetworkName = 'vnet-1'
    Sku = 'Basic'
}
New-AzBastion @bastion -AsJob
It takes about 10 minutes to deploy the Bastion resources. You can create VMs in the next section while Bastion deploys to your virtual network.
Create a virtual network
Before creating a virtual network, you have to create a resource group for the virtual network, and all other resources created in this article. Create a resource group withaz group create. The following example creates a resource group namedtest-rgin thewestus2location.az group create \
  --name test-rg \
  --location westus2
Before creating a virtual network, you have to create a resource group for the virtual network, and all other resources created in this article. Create a resource group withaz group create. The following example creates a resource group namedtest-rgin thewestus2location.
az group create \
  --name test-rg \
  --location westus2
az group create \
  --name test-rg \
  --location westus2
Create a virtual network with one subnet withaz network vnet create.az network vnet create \
  --name vnet-1 \
  --resource-group test-rg \
  --address-prefix 10.0.0.0/16 \
  --subnet-name subnet-public \
  --subnet-prefix 10.0.0.0/24
Create a virtual network with one subnet withaz network vnet create.
az network vnet create \
  --name vnet-1 \
  --resource-group test-rg \
  --address-prefix 10.0.0.0/16 \
  --subnet-name subnet-public \
  --subnet-prefix 10.0.0.0/24
az network vnet create \
  --name vnet-1 \
  --resource-group test-rg \
  --address-prefix 10.0.0.0/16 \
  --subnet-name subnet-public \
  --subnet-prefix 10.0.0.0/24
You can enable service endpoints only for services that support service endpoints. View service endpoint-enabled services available in an Azure location withaz network vnet list-endpoint-services. The following example returns a list of service-endpoint-enabled services available in thewestus2region. The list of services returned will grow over time, as more Azure services become service endpoint enabled.az network vnet list-endpoint-services \
  --location westus2 \
  --out table
You can enable service endpoints only for services that support service endpoints. View service endpoint-enabled services available in an Azure location withaz network vnet list-endpoint-services. The following example returns a list of service-endpoint-enabled services available in thewestus2region. The list of services returned will grow over time, as more Azure services become service endpoint enabled.
az network vnet list-endpoint-services \
  --location westus2 \
  --out table
az network vnet list-endpoint-services \
  --location westus2 \
  --out table
Create another subnet in the virtual network withaz network vnet subnet create. In this example, a service endpoint forMicrosoft.Storageis created for the subnet:az network vnet subnet create \
  --vnet-name vnet-1 \
  --resource-group test-rg \
  --name subnet-private \
  --address-prefix 10.0.1.0/24 \
  --service-endpoints Microsoft.Storage
Create another subnet in the virtual network withaz network vnet subnet create. In this example, a service endpoint forMicrosoft.Storageis created for the subnet:
Microsoft.Storage
az network vnet subnet create \
  --vnet-name vnet-1 \
  --resource-group test-rg \
  --name subnet-private \
  --address-prefix 10.0.1.0/24 \
  --service-endpoints Microsoft.Storage
az network vnet subnet create \
  --vnet-name vnet-1 \
  --resource-group test-rg \
  --name subnet-private \
  --address-prefix 10.0.1.0/24 \
  --service-endpoints Microsoft.Storage
Restrict network access for a subnet
Portal
PowerShell
CLI
By default, all virtual machine instances in a subnet can communicate with any resources. You can limit communication to and from all resources in a subnet by creating a network security group, and associating it to the subnet.
In the search box at the top of the portal page, search forNetwork security group. SelectNetwork security groupsin the search results.
In the search box at the top of the portal page, search forNetwork security group. SelectNetwork security groupsin the search results.
InNetwork security groups, select+ Create.
InNetwork security groups, select+ Create.
In theBasicstab ofCreate network security group, enter, or select the following information:SettingValueProject detailsSubscriptionSelect your subscription.Resource groupSelecttest-rg.Instance detailsNameEnternsg-storage.RegionSelectEast US 2.
In theBasicstab ofCreate network security group, enter, or select the following information:
SelectReview + create, then selectCreate.
SelectReview + create, then selectCreate.
Create a network security group withNew-AzNetworkSecurityGroup. The following example creates a network security group namednsg-private.$nsgpriv = @{
    ResourceGroupName = 'test-rg'
    Location = 'westus2'
    Name = 'nsg-private'
}
$nsg = New-AzNetworkSecurityGroup @nsgpriv
Create a network security group withNew-AzNetworkSecurityGroup. The following example creates a network security group namednsg-private.
$nsgpriv = @{
    ResourceGroupName = 'test-rg'
    Location = 'westus2'
    Name = 'nsg-private'
}
$nsg = New-AzNetworkSecurityGroup @nsgpriv
$nsgpriv = @{
    ResourceGroupName = 'test-rg'
    Location = 'westus2'
    Name = 'nsg-private'
}
$nsg = New-AzNetworkSecurityGroup @nsgpriv
Create a network security group withaz network nsg create. The following example creates a network security group namednsg-private.
az network nsg create \
  --resource-group test-rg \
  --name nsg-private
az network nsg create \
  --resource-group test-rg \
  --name nsg-private
Create outbound Network Security Group (NSG) rules
Portal
PowerShell
CLI
In the search box at the top of the portal page, search forNetwork security group. SelectNetwork security groupsin the search results.
In the search box at the top of the portal page, search forNetwork security group. SelectNetwork security groupsin the search results.
Selectnsg-storage.
Selectnsg-storage.
SelectOutbound security rulesinSettings.
SelectOutbound security rulesinSettings.
Select+ Add.
Select+ Add.
Create a rule that allows outbound communication to the Azure Storage service. Enter or select the following information inAdd outbound security rule:SettingValueSourceSelectService Tag.Source service tagSelectVirtualNetwork.Source port rangesLeave the default of*.DestinationSelectService Tag.Destination service tagSelectStorage.ServiceLeave default ofCustom.Destination port rangesEnter445.ProtocolSelectAny.ActionSelectAllow.PriorityLeave the default of100.NameEnterallow-storage-all.
Create a rule that allows outbound communication to the Azure Storage service. Enter or select the following information inAdd outbound security rule:
Select+ Add.
Select+ Add.
Create another outbound security rule that denies communication to the internet. This rule overrides a default rule in all network security groups that allows outbound internet communication. Complete the previous steps with the following values inAdd outbound security rule:SettingValueSourceSelectService Tag.Source service tagSelectVirtualNetwork.Source port rangesLeave the default of*.DestinationSelectService Tag.Destination service tagSelectInternet.ServiceLeave default ofCustom.Destination port rangesEnter*.ProtocolSelectAny.ActionSelectDeny.PriorityLeave the default110.NameEnterdeny-internet-all.
Create another outbound security rule that denies communication to the internet. This rule overrides a default rule in all network security groups that allows outbound internet communication. Complete the previous steps with the following values inAdd outbound security rule:
SelectAdd.
SelectAdd.
In the search box at the top of the portal page, search forNetwork security group. SelectNetwork security groupsin the search results.
In the search box at the top of the portal page, search forNetwork security group. SelectNetwork security groupsin the search results.
Selectnsg-storage.
Selectnsg-storage.
SelectSubnetsinSettings.
SelectSubnetsinSettings.
Select+ Associate.
Select+ Associate.
InAssociate subnet, selectvnet-1inVirtual network. Selectsubnet-privateinSubnet.
InAssociate subnet, selectvnet-1inVirtual network. Selectsubnet-privateinSubnet.
SelectOK.
SelectOK.
Create network security group security rules withNew-AzNetworkSecurityRuleConfig. The following rule allows outbound access to the public IP addresses assigned to the Azure Storage service:$r1 = @{
    Name = "Allow-Storage-All"
    Access = "Allow"
    DestinationAddressPrefix = "Storage"
    DestinationPortRange = "*"
    Direction = "Outbound"
    Priority = 100
    Protocol = "*"
    SourceAddressPrefix = "VirtualNetwork"
    SourcePortRange = "*"
}

$rule1 = New-AzNetworkSecurityRuleConfig @r1
Create network security group security rules withNew-AzNetworkSecurityRuleConfig. The following rule allows outbound access to the public IP addresses assigned to the Azure Storage service:
$r1 = @{
    Name = "Allow-Storage-All"
    Access = "Allow"
    DestinationAddressPrefix = "Storage"
    DestinationPortRange = "*"
    Direction = "Outbound"
    Priority = 100
    Protocol = "*"
    SourceAddressPrefix = "VirtualNetwork"
    SourcePortRange = "*"
}

$rule1 = New-AzNetworkSecurityRuleConfig @r1
$r1 = @{
    Name = "Allow-Storage-All"
    Access = "Allow"
    DestinationAddressPrefix = "Storage"
    DestinationPortRange = "*"
    Direction = "Outbound"
    Priority = 100
    Protocol = "*"
    SourceAddressPrefix = "VirtualNetwork"
    SourcePortRange = "*"
}

$rule1 = New-AzNetworkSecurityRuleConfig @r1
The following rule denies access to all public IP addresses. The previous rule overrides this rule, due to its higher priority, which allows access to the public IP addresses of Azure Storage.$r2 = @{
    Name = "Deny-Internet-All"
    Access = "Deny"
    DestinationAddressPrefix = "Internet"
    DestinationPortRange = "*"
    Direction = "Outbound"
    Priority = 110
    Protocol = "*"
    SourceAddressPrefix = "VirtualNetwork"
    SourcePortRange = "*"
}
$rule2 = New-AzNetworkSecurityRuleConfig @r2
The following rule denies access to all public IP addresses. The previous rule overrides this rule, due to its higher priority, which allows access to the public IP addresses of Azure Storage.
$r2 = @{
    Name = "Deny-Internet-All"
    Access = "Deny"
    DestinationAddressPrefix = "Internet"
    DestinationPortRange = "*"
    Direction = "Outbound"
    Priority = 110
    Protocol = "*"
    SourceAddressPrefix = "VirtualNetwork"
    SourcePortRange = "*"
}
$rule2 = New-AzNetworkSecurityRuleConfig @r2
$r2 = @{
    Name = "Deny-Internet-All"
    Access = "Deny"
    DestinationAddressPrefix = "Internet"
    DestinationPortRange = "*"
    Direction = "Outbound"
    Priority = 110
    Protocol = "*"
    SourceAddressPrefix = "VirtualNetwork"
    SourcePortRange = "*"
}
$rule2 = New-AzNetworkSecurityRuleConfig @r2
UseGet-AzNetworkSecurityGroupto retrieve the network security group object into a variable. UseSet-AzNetworkSecurityRuleConfigto add the rules to the network security group.# Retrieve the existing network security group
$nsgpriv = @{
    ResourceGroupName = 'test-rg'
    Name = 'nsg-private'
}
$nsg = Get-AzNetworkSecurityGroup @nsgpriv

# Add the new rules to the security group
$nsg.SecurityRules += $rule1
$nsg.SecurityRules += $rule2

# Update the network security group with the new rules
Set-AzNetworkSecurityGroup -NetworkSecurityGroup $nsg
UseGet-AzNetworkSecurityGroupto retrieve the network security group object into a variable. UseSet-AzNetworkSecurityRuleConfigto add the rules to the network security group.
# Retrieve the existing network security group
$nsgpriv = @{
    ResourceGroupName = 'test-rg'
    Name = 'nsg-private'
}
$nsg = Get-AzNetworkSecurityGroup @nsgpriv

# Add the new rules to the security group
$nsg.SecurityRules += $rule1
$nsg.SecurityRules += $rule2

# Update the network security group with the new rules
Set-AzNetworkSecurityGroup -NetworkSecurityGroup $nsg
# Retrieve the existing network security group
$nsgpriv = @{
    ResourceGroupName = 'test-rg'
    Name = 'nsg-private'
}
$nsg = Get-AzNetworkSecurityGroup @nsgpriv

# Add the new rules to the security group
$nsg.SecurityRules += $rule1
$nsg.SecurityRules += $rule2

# Update the network security group with the new rules
Set-AzNetworkSecurityGroup -NetworkSecurityGroup $nsg
Associate the network security group to thesubnet-privatesubnet withSet-AzVirtualNetworkSubnetConfigand then write the subnet configuration to the virtual network. The following example associates thensg-privatenetwork security group to thesubnet-privatesubnet:$subnet = @{
    VirtualNetwork = $VirtualNetwork
    Name = "subnet-private"
    AddressPrefix = "10.0.2.0/24"
    ServiceEndpoint = "Microsoft.Storage"
    NetworkSecurityGroup = $nsg
}
Set-AzVirtualNetworkSubnetConfig @subnet

$virtualNetwork | Set-AzVirtualNetwork
Associate the network security group to thesubnet-privatesubnet withSet-AzVirtualNetworkSubnetConfigand then write the subnet configuration to the virtual network. The following example associates thensg-privatenetwork security group to thesubnet-privatesubnet:
$subnet = @{
    VirtualNetwork = $VirtualNetwork
    Name = "subnet-private"
    AddressPrefix = "10.0.2.0/24"
    ServiceEndpoint = "Microsoft.Storage"
    NetworkSecurityGroup = $nsg
}
Set-AzVirtualNetworkSubnetConfig @subnet

$virtualNetwork | Set-AzVirtualNetwork
$subnet = @{
    VirtualNetwork = $VirtualNetwork
    Name = "subnet-private"
    AddressPrefix = "10.0.2.0/24"
    ServiceEndpoint = "Microsoft.Storage"
    NetworkSecurityGroup = $nsg
}
Set-AzVirtualNetworkSubnetConfig @subnet

$virtualNetwork | Set-AzVirtualNetwork
Create security rules withaz network nsg rule create. The following rule allows outbound access to the public IP addresses assigned to the Azure Storage service:az network nsg rule create \
  --resource-group test-rg \
  --nsg-name nsg-private \
  --name Allow-Storage-All \
  --access Allow \
  --protocol "*" \
  --direction Outbound \
  --priority 100 \
  --source-address-prefix "VirtualNetwork" \
  --source-port-range "*" \
  --destination-address-prefix "Storage" \
  --destination-port-range "*"
Create security rules withaz network nsg rule create. The following rule allows outbound access to the public IP addresses assigned to the Azure Storage service:
az network nsg rule create \
  --resource-group test-rg \
  --nsg-name nsg-private \
  --name Allow-Storage-All \
  --access Allow \
  --protocol "*" \
  --direction Outbound \
  --priority 100 \
  --source-address-prefix "VirtualNetwork" \
  --source-port-range "*" \
  --destination-address-prefix "Storage" \
  --destination-port-range "*"
az network nsg rule create \
  --resource-group test-rg \
  --nsg-name nsg-private \
  --name Allow-Storage-All \
  --access Allow \
  --protocol "*" \
  --direction Outbound \
  --priority 100 \
  --source-address-prefix "VirtualNetwork" \
  --source-port-range "*" \
  --destination-address-prefix "Storage" \
  --destination-port-range "*"
Each network security group contains severaldefault security rules. The rule that follows overrides a default security rule that allows outbound access to all public IP addresses. Thedestination-address-prefix "Internet"option denies outbound access to all public IP addresses. The previous rule overrides this rule, due to its higher priority, which allows access to the public IP addresses of Azure Storage.az network nsg rule create \
  --resource-group test-rg \
  --nsg-name nsg-private \
  --name Deny-Internet-All \
  --access Deny \
  --protocol "*" \
  --direction Outbound \
  --priority 110 \
  --source-address-prefix "VirtualNetwork" \
  --source-port-range "*" \
  --destination-address-prefix "Internet" \
  --destination-port-range "*"
Each network security group contains severaldefault security rules. The rule that follows overrides a default security rule that allows outbound access to all public IP addresses. Thedestination-address-prefix "Internet"option denies outbound access to all public IP addresses. The previous rule overrides this rule, due to its higher priority, which allows access to the public IP addresses of Azure Storage.
destination-address-prefix "Internet"
az network nsg rule create \
  --resource-group test-rg \
  --nsg-name nsg-private \
  --name Deny-Internet-All \
  --access Deny \
  --protocol "*" \
  --direction Outbound \
  --priority 110 \
  --source-address-prefix "VirtualNetwork" \
  --source-port-range "*" \
  --destination-address-prefix "Internet" \
  --destination-port-range "*"
az network nsg rule create \
  --resource-group test-rg \
  --nsg-name nsg-private \
  --name Deny-Internet-All \
  --access Deny \
  --protocol "*" \
  --direction Outbound \
  --priority 110 \
  --source-address-prefix "VirtualNetwork" \
  --source-port-range "*" \
  --destination-address-prefix "Internet" \
  --destination-port-range "*"
The following rule allows SSH traffic inbound to the subnet from anywhere. The rule overrides a default security rule that denies all inbound traffic from the internet. SSH is allowed to the subnet so that connectivity can be tested in a later step.az network nsg rule create \
  --resource-group test-rg \
  --nsg-name nsg-private \
  --name Allow-SSH-All \
  --access Allow \
  --protocol Tcp \
  --direction Inbound \
  --priority 120 \
  --source-address-prefix "*" \
  --source-port-range "*" \
  --destination-address-prefix "VirtualNetwork" \
  --destination-port-range "22"
The following rule allows SSH traffic inbound to the subnet from anywhere. The rule overrides a default security rule that denies all inbound traffic from the internet. SSH is allowed to the subnet so that connectivity can be tested in a later step.
az network nsg rule create \
  --resource-group test-rg \
  --nsg-name nsg-private \
  --name Allow-SSH-All \
  --access Allow \
  --protocol Tcp \
  --direction Inbound \
  --priority 120 \
  --source-address-prefix "*" \
  --source-port-range "*" \
  --destination-address-prefix "VirtualNetwork" \
  --destination-port-range "22"
az network nsg rule create \
  --resource-group test-rg \
  --nsg-name nsg-private \
  --name Allow-SSH-All \
  --access Allow \
  --protocol Tcp \
  --direction Inbound \
  --priority 120 \
  --source-address-prefix "*" \
  --source-port-range "*" \
  --destination-address-prefix "VirtualNetwork" \
  --destination-port-range "22"
Associate the network security group to thesubnet-privatesubnet withaz network vnet subnet update. The following example associates thensg-privatenetwork security group to thesubnet-privatesubnet:az network vnet subnet update \
  --vnet-name vnet-1 \
  --name subnet-private \
  --resource-group test-rg \
  --network-security-group nsg-private
Associate the network security group to thesubnet-privatesubnet withaz network vnet subnet update. The following example associates thensg-privatenetwork security group to thesubnet-privatesubnet:
az network vnet subnet update \
  --vnet-name vnet-1 \
  --name subnet-private \
  --resource-group test-rg \
  --network-security-group nsg-private
az network vnet subnet update \
  --vnet-name vnet-1 \
  --name subnet-private \
  --resource-group test-rg \
  --network-security-group nsg-private
Restrict network access to a resource
Portal
PowerShell
CLI
The steps required to restrict network access to resources created through Azure services, which are enabled for service endpoints vary across services. See the documentation for individual services for specific steps for each service. The rest of this tutorial includes steps to restrict network access for an Azure Storage account, as an example.
Create a storage account
Create an Azure Storage account for the steps in this article. If you already have a storage account, you can use it instead.
In the search box at the top of the portal, enterStorage account. SelectStorage accountsin the search results.
In the search box at the top of the portal, enterStorage account. SelectStorage accountsin the search results.
Select+ Create.
Select+ Create.
On theBasicstab ofCreate a storage account, enter or select the following information:SettingValueProject DetailsSubscriptionSelect your Azure subscription.Resource GroupSelecttest-rg.Instance detailsStorage account nameEnterstorage1. If the name is unavailable, enter a unique name.LocationSelect(US) East US 2.PerformanceLeave the defaultStandard.RedundancySelectLocally-redundant storage (LRS).
On theBasicstab ofCreate a storage account, enter or select the following information:
SelectReview.
SelectReview.
SelectCreate.
SelectCreate.
Create an Azure storage account withNew-AzStorageAccount. Replace<replace-with-your-unique-storage-account-name>with a name that is unique across all Azure locations, between 3-24 characters in length, using only numbers and lower-case letters.$storageAcctName = '<replace-with-your-unique-storage-account-name>'

$storage = @{
    Location = 'westus2'
    Name = $storageAcctName
    ResourceGroupName = 'test-rg'
    SkuName = 'Standard_LRS'
    Kind = 'StorageV2'
}
New-AzStorageAccount @storage
Create an Azure storage account withNew-AzStorageAccount. Replace<replace-with-your-unique-storage-account-name>with a name that is unique across all Azure locations, between 3-24 characters in length, using only numbers and lower-case letters.
<replace-with-your-unique-storage-account-name>
$storageAcctName = '<replace-with-your-unique-storage-account-name>'

$storage = @{
    Location = 'westus2'
    Name = $storageAcctName
    ResourceGroupName = 'test-rg'
    SkuName = 'Standard_LRS'
    Kind = 'StorageV2'
}
New-AzStorageAccount @storage
$storageAcctName = '<replace-with-your-unique-storage-account-name>'

$storage = @{
    Location = 'westus2'
    Name = $storageAcctName
    ResourceGroupName = 'test-rg'
    SkuName = 'Standard_LRS'
    Kind = 'StorageV2'
}
New-AzStorageAccount @storage
After the storage account is created, retrieve the key for the storage account into a variable withGet-AzStorageAccountKey:$storagekey = @{
  ResourceGroupName = 'test-rg'
  AccountName       = $storageAcctName
}
$storageAcctKey = (Get-AzStorageAccountKey @storagekey).Value[0]The key is used to create a file share in a later step. Enter$storageAcctKeyand note the value. You manually enter it in a later step when you map the file share to a drive in a virtual machine.
After the storage account is created, retrieve the key for the storage account into a variable withGet-AzStorageAccountKey:
$storagekey = @{
  ResourceGroupName = 'test-rg'
  AccountName       = $storageAcctName
}
$storageAcctKey = (Get-AzStorageAccountKey @storagekey).Value[0]
$storagekey = @{
  ResourceGroupName = 'test-rg'
  AccountName       = $storageAcctName
}
$storageAcctKey = (Get-AzStorageAccountKey @storagekey).Value[0]
The key is used to create a file share in a later step. Enter$storageAcctKeyand note the value. You manually enter it in a later step when you map the file share to a drive in a virtual machine.
$storageAcctKey
The steps necessary to restrict network access to resources created through Azure services enabled for service endpoints varies across services. See the documentation for individual services for specific steps for each service. The remainder of this article includes steps to restrict network access for an Azure Storage account, as an example.
Create a storage account
Create an Azure storage account withaz storage account create. Replace<replace-with-your-unique-storage-account-name>with a name that is unique across all Azure locations, between 3-24 characters in length, using only numbers and lower-case letters.storageAcctName="<replace-with-your-unique-storage-account-name>"

az storage account create \
  --name $storageAcctName \
  --resource-group test-rg \
  --sku Standard_LRS \
  --kind StorageV2
Create an Azure storage account withaz storage account create. Replace<replace-with-your-unique-storage-account-name>with a name that is unique across all Azure locations, between 3-24 characters in length, using only numbers and lower-case letters.
<replace-with-your-unique-storage-account-name>
storageAcctName="<replace-with-your-unique-storage-account-name>"

az storage account create \
  --name $storageAcctName \
  --resource-group test-rg \
  --sku Standard_LRS \
  --kind StorageV2
storageAcctName="<replace-with-your-unique-storage-account-name>"

az storage account create \
  --name $storageAcctName \
  --resource-group test-rg \
  --sku Standard_LRS \
  --kind StorageV2
After the storage account is created, retrieve the connection string for the storage account into a variable withaz storage account show-connection-string. The connection string is used to create a file share in a later step.saConnectionString=$(az storage account show-connection-string \
  --name $storageAcctName \
  --resource-group test-rg \
  --query 'connectionString' \
  --out tsv)
After the storage account is created, retrieve the connection string for the storage account into a variable withaz storage account show-connection-string. The connection string is used to create a file share in a later step.
saConnectionString=$(az storage account show-connection-string \
  --name $storageAcctName \
  --resource-group test-rg \
  --query 'connectionString' \
  --out tsv)
saConnectionString=$(az storage account show-connection-string \
  --name $storageAcctName \
  --resource-group test-rg \
  --query 'connectionString' \
  --out tsv)
Important
Microsoft recommends that you use the most secure authentication flow available. The authentication flow described in this procedure requires a very high degree of trust in the application, and carries risks that are not present in other flows. You should only use this flow when other more secure flows, such as managed identities, aren't viable.
For more information about connecting to a storage account using a managed identity, seeUse a managed identity to access Azure Storage.
Create a file share in the storage account
Portal
PowerShell
CLI
In the search box at the top of the portal, enterStorage account. SelectStorage accountsin the search results.
In the search box at the top of the portal, enterStorage account. SelectStorage accountsin the search results.
InStorage accounts, select the storage account you created in the previous step.
InStorage accounts, select the storage account you created in the previous step.
InData storage, selectFile shares.
InData storage, selectFile shares.
Select+ File share.
Select+ File share.
Enter or select the following information inNew file share:SettingValueNameEnterfile-share.TierLeave the default ofTransaction optimized.
Enter or select the following information inNew file share:
SelectNext: Backup.
SelectNext: Backup.
DeselectEnable backup.
DeselectEnable backup.
SelectReview + create, then selectCreate.
SelectReview + create, then selectCreate.
Create a context for your storage account and key withNew-AzStorageContext. The context encapsulates the storage account name and account key:$storagecontext = @{
    StorageAccountName = $storageAcctName
    StorageAccountKey = $storageAcctKey
}
$storageContext = New-AzStorageContext @storagecontext
Create a context for your storage account and key withNew-AzStorageContext. The context encapsulates the storage account name and account key:
$storagecontext = @{
    StorageAccountName = $storageAcctName
    StorageAccountKey = $storageAcctKey
}
$storageContext = New-AzStorageContext @storagecontext
$storagecontext = @{
    StorageAccountName = $storageAcctName
    StorageAccountKey = $storageAcctKey
}
$storageContext = New-AzStorageContext @storagecontext
Create a file share withNew-AzStorageShare:$fs = @{
    Name = "file-share"
    Context = $storageContext
}
$share = New-AzStorageShare @fs
Create a file share withNew-AzStorageShare:
$fs = @{
    Name = "file-share"
    Context = $storageContext
}
$share = New-AzStorageShare @fs
$fs = @{
    Name = "file-share"
    Context = $storageContext
}
$share = New-AzStorageShare @fs
Create a file share in the storage account withaz storage share create. In a later step, this file share is mounted to confirm network access to it.az storage share create \
  --name file-share \
  --quota 2048 \
  --connection-string $saConnectionString > /dev/null
Create a file share in the storage account withaz storage share create. In a later step, this file share is mounted to confirm network access to it.
az storage share create \
  --name file-share \
  --quota 2048 \
  --connection-string $saConnectionString > /dev/null
az storage share create \
  --name file-share \
  --quota 2048 \
  --connection-string $saConnectionString > /dev/null
Restrict network access to a subnet
Portal
PowerShell
CLI
By default, storage accounts accept network connections from clients in any network, including the internet. You can restrict network access from the internet, and all other subnets in all virtual networks (except thesubnet-privatesubnet in thevnet-1virtual network.)
To restrict network access to a subnet:
In the search box at the top of the portal, enterStorage account. SelectStorage accountsin the search results.
In the search box at the top of the portal, enterStorage account. SelectStorage accountsin the search results.
Select your storage account.
Select your storage account.
InSecurity + networking, selectNetworking.
InSecurity + networking, selectNetworking.
In theFirewalls and virtual networkstab, selectEnabled from selected virtual networks and IP addressesinPublic network access.
In theFirewalls and virtual networkstab, selectEnabled from selected virtual networks and IP addressesinPublic network access.
InVirtual networks, select+ Add existing virtual network.
InVirtual networks, select+ Add existing virtual network.
InAdd networks, enter or select the following information:SettingValueSubscriptionSelect your subscription.Virtual networksSelectvnet-1.SubnetsSelectsubnet-private.
InAdd networks, enter or select the following information:

SelectAdd.
SelectAdd.
SelectSaveto save the virtual network configurations.
SelectSaveto save the virtual network configurations.
By default, storage accounts accept network connections from clients in any network. To limit access to selected networks, change the default action toDenywithUpdate-AzStorageAccountNetworkRuleSet. Once network access is denied, the storage account isn't accessible from any network.$storagerule = @{
    ResourceGroupName = "test-rg"
    Name = $storageAcctName
    DefaultAction = "Deny"
}
Update-AzStorageAccountNetworkRuleSet @storagerule
By default, storage accounts accept network connections from clients in any network. To limit access to selected networks, change the default action toDenywithUpdate-AzStorageAccountNetworkRuleSet. Once network access is denied, the storage account isn't accessible from any network.
$storagerule = @{
    ResourceGroupName = "test-rg"
    Name = $storageAcctName
    DefaultAction = "Deny"
}
Update-AzStorageAccountNetworkRuleSet @storagerule
$storagerule = @{
    ResourceGroupName = "test-rg"
    Name = $storageAcctName
    DefaultAction = "Deny"
}
Update-AzStorageAccountNetworkRuleSet @storagerule
Retrieve the created virtual network withGet-AzVirtualNetworkand then retrieve the private subnet object into a variable withGet-AzVirtualNetworkSubnetConfig:$subnetpriv = @{
    ResourceGroupName = "test-rg"
    Name = "vnet-1"
}
$privateSubnet = Get-AzVirtualNetwork @subnetpriv | Get-AzVirtualNetworkSubnetConfig -Name "subnet-private"
Retrieve the created virtual network withGet-AzVirtualNetworkand then retrieve the private subnet object into a variable withGet-AzVirtualNetworkSubnetConfig:
$subnetpriv = @{
    ResourceGroupName = "test-rg"
    Name = "vnet-1"
}
$privateSubnet = Get-AzVirtualNetwork @subnetpriv | Get-AzVirtualNetworkSubnetConfig -Name "subnet-private"
$subnetpriv = @{
    ResourceGroupName = "test-rg"
    Name = "vnet-1"
}
$privateSubnet = Get-AzVirtualNetwork @subnetpriv | Get-AzVirtualNetworkSubnetConfig -Name "subnet-private"
Allow network access to the storage account from thesubnet-privatesubnet withAdd-AzStorageAccountNetworkRule.$storagenetrule = @{
    ResourceGroupName = "test-rg"
    Name = $storageAcctName
    VirtualNetworkResourceId = $privateSubnet.Id
}
Add-AzStorageAccountNetworkRule @storagenetrule
Allow network access to the storage account from thesubnet-privatesubnet withAdd-AzStorageAccountNetworkRule.
$storagenetrule = @{
    ResourceGroupName = "test-rg"
    Name = $storageAcctName
    VirtualNetworkResourceId = $privateSubnet.Id
}
Add-AzStorageAccountNetworkRule @storagenetrule
$storagenetrule = @{
    ResourceGroupName = "test-rg"
    Name = $storageAcctName
    VirtualNetworkResourceId = $privateSubnet.Id
}
Add-AzStorageAccountNetworkRule @storagenetrule
By default, storage accounts accept network connections from clients in any network. To limit access to selected networks, change the default action toDenywithaz storage account update. Once network access is denied, the storage account isn't accessible from any network.az storage account update \
  --name $storageAcctName \
  --resource-group test-rg \
  --default-action Deny
By default, storage accounts accept network connections from clients in any network. To limit access to selected networks, change the default action toDenywithaz storage account update. Once network access is denied, the storage account isn't accessible from any network.
az storage account update \
  --name $storageAcctName \
  --resource-group test-rg \
  --default-action Deny
az storage account update \
  --name $storageAcctName \
  --resource-group test-rg \
  --default-action Deny
Allow network access to the storage account from thesubnet-privatesubnet withaz storage account network-rule add.az storage account network-rule add \
  --resource-group test-rg \
  --account-name $storageAcctName \
  --vnet-name vnet-1 \
  --subnet subnet-private
Allow network access to the storage account from thesubnet-privatesubnet withaz storage account network-rule add.
az storage account network-rule add \
  --resource-group test-rg \
  --account-name $storageAcctName \
  --vnet-name vnet-1 \
  --subnet subnet-private
az storage account network-rule add \
  --resource-group test-rg \
  --account-name $storageAcctName \
  --vnet-name vnet-1 \
  --subnet subnet-private
Deploy virtual machines to subnets
Portal
PowerShell
CLI
To test network access to a storage account, deploy a virtual machine to each subnet.
Create test virtual machine
The following procedure creates a test virtual machine (VM) namedvm-1in the virtual network.
In the portal, search for and selectVirtual machines.
In the portal, search for and selectVirtual machines.
InVirtual machines, select+ Create, thenAzure virtual machine.
InVirtual machines, select+ Create, thenAzure virtual machine.
On theBasicstab ofCreate a virtual machine, enter or select the following information:SettingValueProject detailsSubscriptionSelect your subscription.Resource groupSelecttest-rg.Instance detailsVirtual machine nameEntervm-1.RegionSelectEast US 2.Availability optionsSelectNo infrastructure redundancy required.Security typeLeave the default ofStandard.ImageSelectWindows Server 2022 Datacenter - x64 Gen2.VM architectureLeave the default ofx64.SizeSelect a size.Administrator accountAuthentication typeSelectPassword.UsernameEnterazureuser.PasswordEnter a password.Confirm passwordReenter the password.Inbound port rulesPublic inbound portsSelectNone.
On theBasicstab ofCreate a virtual machine, enter or select the following information:
Select theNetworkingtab at the top of the page.
Select theNetworkingtab at the top of the page.
Enter or select the following information in theNetworkingtab:SettingValueNetwork interfaceVirtual networkSelectvnet-1.SubnetSelectsubnet-1 (10.0.0.0/24).Public IPSelectNone.NIC network security groupSelectAdvanced.Configure network security groupSelectCreate new.Enternsg-1for the name.Leave the rest at the defaults and selectOK.
Enter or select the following information in theNetworkingtab:
Leave the rest of the settings at the defaults and selectReview + create.
Leave the rest of the settings at the defaults and selectReview + create.
Review the settings and selectCreate.
Review the settings and selectCreate.
Note
Virtual machines in a virtual network with a bastion host don't need public IP addresses. Bastion provides the public IP, and the VMs use private IPs to communicate within the network. You can remove the public IPs from any VMs in bastion hosted virtual networks. For more information, seeDissociate a public IP address from an Azure VM.
Note
Azure provides a default outbound access IP for VMs that either aren't assigned a public IP address or are in the backend pool of an internal basic Azure load balancer. The default outbound access IP mechanism provides an outbound IP address that isn't configurable.
The default outbound access IP is disabled when one of the following events happens:
A public IP address is assigned to the VM.
The VM is placed in the backend pool of a standard load balancer, with or without outbound rules.
AnAzure NAT Gatewayresource is assigned to the subnet of the VM.
VMs that you create by using virtual machine scale sets in flexible orchestration mode don't have default outbound access.
For more information about outbound connections in Azure, seeDefault outbound access in AzureandUse Source Network Address Translation (SNAT) for outbound connections.
Create the second virtual machine
Create a second virtual machine repeating the steps in the previous section. Replace the following values inCreate a virtual machine:SettingValueVirtual machine nameEntervm-private.SubnetSelectsubnet-private.Public IPSelectNone.NIC network security groupSelectNone.WarningDo not continue to the next step until the deployment is completed.
Create a second virtual machine repeating the steps in the previous section. Replace the following values inCreate a virtual machine:
Warning
Do not continue to the next step until the deployment is completed.
Create the first virtual machine
Create a virtual machine in thesubnet-publicsubnet withNew-AzVM. When running the command that follows, you're prompted for credentials. The values that you enter are configured as the user name and password for the VM.
$vm1 = @{
    ResourceGroupName = "test-rg"
    Location = "westus2"
    VirtualNetworkName = "vnet-1"
    SubnetName = "subnet-public"
    Name = "vm-public"
    PublicIpAddressName  = $null
}
New-AzVm @vm1
$vm1 = @{
    ResourceGroupName = "test-rg"
    Location = "westus2"
    VirtualNetworkName = "vnet-1"
    SubnetName = "subnet-public"
    Name = "vm-public"
    PublicIpAddressName  = $null
}
New-AzVm @vm1
Create the second virtual machine
Create a virtual machine in thesubnet-privatesubnet:
$vm2 = @{
    ResourceGroupName = "test-rg"
    Location = "westus2"
    VirtualNetworkName = "vnet-1"
    SubnetName = "subnet-private"
    Name = "vm-private"
    PublicIpAddressName = $null
}
New-AzVm @vm2
$vm2 = @{
    ResourceGroupName = "test-rg"
    Location = "westus2"
    VirtualNetworkName = "vnet-1"
    SubnetName = "subnet-private"
    Name = "vm-private"
    PublicIpAddressName = $null
}
New-AzVm @vm2
It takes a few minutes for Azure to create the VM. Don't continue to the next step until Azure finishes creating the VM and returns output to PowerShell.
To test network access to a storage account, deploy a VM to each subnet.
Create the first virtual machine
Create a VM in thesubnet-publicsubnet withaz vm create. If SSH keys don't already exist in a default key location, the command creates them. To use a specific set of keys, use the--ssh-key-valueoption.
--ssh-key-value
az vm create \
  --resource-group test-rg \
  --name vm-public \
  --image Ubuntu2204 \
  --vnet-name vnet-1 \
  --subnet subnet-public \
  --admin-username azureuser \
  --generate-ssh-keys
az vm create \
  --resource-group test-rg \
  --name vm-public \
  --image Ubuntu2204 \
  --vnet-name vnet-1 \
  --subnet subnet-public \
  --admin-username azureuser \
  --generate-ssh-keys
The VM takes a few minutes to create. After the VM is created, the Azure CLI shows information similar to the following example:
{
  "fqdns": "",
  "id": "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Microsoft.Compute/virtualMachines/vm-public",
  "location": "westus2",
  "macAddress": "00-0D-3A-23-9A-49",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "203.0.113.24",
  "resourceGroup": "test-rg"
}
{
  "fqdns": "",
  "id": "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/test-rg/providers/Microsoft.Compute/virtualMachines/vm-public",
  "location": "westus2",
  "macAddress": "00-0D-3A-23-9A-49",
  "powerState": "VM running",
  "privateIpAddress": "10.0.0.4",
  "publicIpAddress": "203.0.113.24",
  "resourceGroup": "test-rg"
}
Create the second virtual machine
az vm create \
  --resource-group test-rg \
  --name vm-private \
  --image Ubuntu2204 \
  --vnet-name vnet-1 \
  --subnet subnet-private \
  --admin-username azureuser \
  --generate-ssh-keys
az vm create \
  --resource-group test-rg \
  --name vm-private \
  --image Ubuntu2204 \
  --vnet-name vnet-1 \
  --subnet subnet-private \
  --admin-username azureuser \
  --generate-ssh-keys
The VM takes a few minutes to create.
Confirm access to storage account
Portal
PowerShell
CLI
The virtual machine you created earlier that is assigned to thesubnet-privatesubnet is used to confirm access to the storage account. The virtual machine you created in the previous section that is assigned to thesubnet-1subnet is used to confirm that access to the storage account is blocked.
Get storage account access key
In the search box at the top of the portal, enterStorage account. SelectStorage accountsin the search results.
In the search box at the top of the portal, enterStorage account. SelectStorage accountsin the search results.
InStorage accounts, select your storage account.
InStorage accounts, select your storage account.
InSecurity + networking, selectAccess keys.
InSecurity + networking, selectAccess keys.
Copy the value ofkey1. You might need to select theShowbutton to display the key.
Copy the value ofkey1. You might need to select theShowbutton to display the key.

In the search box at the top of the portal, enterVirtual machine. SelectVirtual machinesin the search results.
In the search box at the top of the portal, enterVirtual machine. SelectVirtual machinesin the search results.
Selectvm-private.
Selectvm-private.
SelectBastioninOperations.
SelectBastioninOperations.
Enter the username and password you specified when creating the virtual machine. SelectConnect.
Enter the username and password you specified when creating the virtual machine. SelectConnect.
Open Windows PowerShell. Use the following script to map the Azure file share to drive Z.Replace<storage-account-key>with the key you copied in the previous step.Replace<storage-account-name>with the name of your storage account. In this example, it'sstorage8675.$key = @{
     String = "<storage-account-key>"
 }
 $acctKey = ConvertTo-SecureString @key -AsPlainText -Force

 $cred = @{
     ArgumentList = "Azure\<storage-account-name>", $acctKey
 }
 $credential = New-Object System.Management.Automation.PSCredential @cred

 $map = @{
     Name = "Z"
     PSProvider = "FileSystem"
     Root = "\\<storage-account-name>.file.core.windows.net\file-share"
     Credential = $credential
 }
 New-PSDrive @mapPowerShell returns output similar to the following example output:Name        Used (GB)     Free (GB) Provider      Root
----        ---------     --------- --------      ----
Z                                      FileSystem    \\storage8675.file.core.windows.net\f...The Azure file share successfully mapped to the Z drive.
Open Windows PowerShell. Use the following script to map the Azure file share to drive Z.
Replace<storage-account-key>with the key you copied in the previous step.
Replace<storage-account-key>with the key you copied in the previous step.
<storage-account-key>
Replace<storage-account-name>with the name of your storage account. In this example, it'sstorage8675.
Replace<storage-account-name>with the name of your storage account. In this example, it'sstorage8675.
<storage-account-name>
$key = @{
     String = "<storage-account-key>"
 }
 $acctKey = ConvertTo-SecureString @key -AsPlainText -Force

 $cred = @{
     ArgumentList = "Azure\<storage-account-name>", $acctKey
 }
 $credential = New-Object System.Management.Automation.PSCredential @cred

 $map = @{
     Name = "Z"
     PSProvider = "FileSystem"
     Root = "\\<storage-account-name>.file.core.windows.net\file-share"
     Credential = $credential
 }
 New-PSDrive @map
$key = @{
     String = "<storage-account-key>"
 }
 $acctKey = ConvertTo-SecureString @key -AsPlainText -Force

 $cred = @{
     ArgumentList = "Azure\<storage-account-name>", $acctKey
 }
 $credential = New-Object System.Management.Automation.PSCredential @cred

 $map = @{
     Name = "Z"
     PSProvider = "FileSystem"
     Root = "\\<storage-account-name>.file.core.windows.net\file-share"
     Credential = $credential
 }
 New-PSDrive @map
PowerShell returns output similar to the following example output:
Name        Used (GB)     Free (GB) Provider      Root
----        ---------     --------- --------      ----
Z                                      FileSystem    \\storage8675.file.core.windows.net\f...
Name        Used (GB)     Free (GB) Provider      Root
----        ---------     --------- --------      ----
Z                                      FileSystem    \\storage8675.file.core.windows.net\f...
The Azure file share successfully mapped to the Z drive.
Close the Bastion connection tovm-private.
Close the Bastion connection tovm-private.
The virtual machine you created earlier that is assigned to thesubnet-privatesubnet is used to confirm access to the storage account. The virtual machine you created in the previous section that is assigned to thesubnet-1subnet is used to confirm that access to the storage account is blocked.
Get storage account access key
Sign-in to theAzure portal.
Sign-in to theAzure portal.
In the search box at the top of the portal, enterStorage account. SelectStorage accountsin the search results.
In the search box at the top of the portal, enterStorage account. SelectStorage accountsin the search results.
InStorage accounts, select your storage account.
InStorage accounts, select your storage account.
InSecurity + networking, selectAccess keys.
InSecurity + networking, selectAccess keys.
Copy the value ofkey1. You might need to select theShowbutton to display the key.
Copy the value ofkey1. You might need to select theShowbutton to display the key.

In the search box at the top of the portal, enterVirtual machine. SelectVirtual machinesin the search results.
In the search box at the top of the portal, enterVirtual machine. SelectVirtual machinesin the search results.
Selectvm-private.
Selectvm-private.
SelectConnectthenConnect via BastioninOverview.
SelectConnectthenConnect via BastioninOverview.
Enter the username and password you specified when creating the virtual machine. SelectConnect.
Enter the username and password you specified when creating the virtual machine. SelectConnect.
Open Windows PowerShell. Use the following script to map the Azure file share to drive Z.Replace<storage-account-key>with the key you copied in the previous step.Replace<storage-account-name>with the name of your storage account. In this example, it'sstorage8675.$key = @{
     String = "<storage-account-key>"
 }
 $acctKey = ConvertTo-SecureString @key -AsPlainText -Force

 $cred = @{
     ArgumentList = "Azure\<storage-account-name>", $acctKey
 }
 $credential = New-Object System.Management.Automation.PSCredential @cred

 $map = @{
     Name = "Z"
     PSProvider = "FileSystem"
     Root = "\\<storage-account-name>.file.core.windows.net\file-share"
     Credential = $credential
 }
 New-PSDrive @mapPowerShell returns output similar to the following example output:Name        Used (GB)     Free (GB) Provider      Root
----        ---------     --------- --------      ----
Z                                      FileSystem    \\storage8675.file.core.windows.net\f...The Azure file share successfully mapped to the Z drive.
Open Windows PowerShell. Use the following script to map the Azure file share to drive Z.
Replace<storage-account-key>with the key you copied in the previous step.
Replace<storage-account-key>with the key you copied in the previous step.
<storage-account-key>
Replace<storage-account-name>with the name of your storage account. In this example, it'sstorage8675.
Replace<storage-account-name>with the name of your storage account. In this example, it'sstorage8675.
<storage-account-name>
$key = @{
     String = "<storage-account-key>"
 }
 $acctKey = ConvertTo-SecureString @key -AsPlainText -Force

 $cred = @{
     ArgumentList = "Azure\<storage-account-name>", $acctKey
 }
 $credential = New-Object System.Management.Automation.PSCredential @cred

 $map = @{
     Name = "Z"
     PSProvider = "FileSystem"
     Root = "\\<storage-account-name>.file.core.windows.net\file-share"
     Credential = $credential
 }
 New-PSDrive @map
$key = @{
     String = "<storage-account-key>"
 }
 $acctKey = ConvertTo-SecureString @key -AsPlainText -Force

 $cred = @{
     ArgumentList = "Azure\<storage-account-name>", $acctKey
 }
 $credential = New-Object System.Management.Automation.PSCredential @cred

 $map = @{
     Name = "Z"
     PSProvider = "FileSystem"
     Root = "\\<storage-account-name>.file.core.windows.net\file-share"
     Credential = $credential
 }
 New-PSDrive @map
PowerShell returns output similar to the following example output:
Name        Used (GB)     Free (GB) Provider      Root
----        ---------     --------- --------      ----
Z                                      FileSystem    \\storage8675.file.core.windows.net\f...
Name        Used (GB)     Free (GB) Provider      Root
----        ---------     --------- --------      ----
Z                                      FileSystem    \\storage8675.file.core.windows.net\f...
The Azure file share successfully mapped to the Z drive.
Confirm that the VM has no outbound connectivity to any other public IP addresses:ping bing.comYou receive no replies, because the network security group associated to thePrivatesubnet doesn't allow outbound access to public IP addresses other than the addresses assigned to the Azure Storage service.
Confirm that the VM has no outbound connectivity to any other public IP addresses:
ping bing.com
ping bing.com
You receive no replies, because the network security group associated to thePrivatesubnet doesn't allow outbound access to public IP addresses other than the addresses assigned to the Azure Storage service.
Close the Bastion connection tovm-private.
Close the Bastion connection tovm-private.
SSH into thevm-privateVM.
Run the following command to store the IP address of the VM as an environment variable:export IP_ADDRESS=$(az vm show --show-details --resource-group test-rg --name vm-private --query publicIps --output tsv)

ssh -o StrictHostKeyChecking=no azureuser@$IP_ADDRESS
Run the following command to store the IP address of the VM as an environment variable:
export IP_ADDRESS=$(az vm show --show-details --resource-group test-rg --name vm-private --query publicIps --output tsv)

ssh -o StrictHostKeyChecking=no azureuser@$IP_ADDRESS
export IP_ADDRESS=$(az vm show --show-details --resource-group test-rg --name vm-private --query publicIps --output tsv)

ssh -o StrictHostKeyChecking=no azureuser@$IP_ADDRESS
Create a folder for a mount point:sudo mkdir /mnt/file-share
Create a folder for a mount point:
sudo mkdir /mnt/file-share
sudo mkdir /mnt/file-share
Mount the Azure file share to the directory you created. Before running the following command, replace<storage-account-name>with the account name and<storage-account-key>with the key you retrieved inCreate a storage account.sudo mount --types cifs //<storage-account-name>.file.core.windows.net/my-file-share /mnt/file-share --options vers=3.0,username=<storage-account-name>,password=<storage-account-key>,dir_mode=0777,file_mode=0777,serverinoYou receive theuser@vm-private:~$prompt. The Azure file share successfully mounted to/mnt/file-share.
Mount the Azure file share to the directory you created. Before running the following command, replace<storage-account-name>with the account name and<storage-account-key>with the key you retrieved inCreate a storage account.
<storage-account-name>
<storage-account-key>
sudo mount --types cifs //<storage-account-name>.file.core.windows.net/my-file-share /mnt/file-share --options vers=3.0,username=<storage-account-name>,password=<storage-account-key>,dir_mode=0777,file_mode=0777,serverino
sudo mount --types cifs //<storage-account-name>.file.core.windows.net/my-file-share /mnt/file-share --options vers=3.0,username=<storage-account-name>,password=<storage-account-key>,dir_mode=0777,file_mode=0777,serverino
You receive theuser@vm-private:~$prompt. The Azure file share successfully mounted to/mnt/file-share.
user@vm-private:~$
Confirm that the VM has no outbound connectivity to any other public IP addresses:ping bing.com -c 4You receive no replies, because the network security group associated to thesubnet-privatesubnet doesn't allow outbound access to public IP addresses other than the addresses assigned to the Azure Storage service.
Confirm that the VM has no outbound connectivity to any other public IP addresses:
ping bing.com -c 4
ping bing.com -c 4
You receive no replies, because the network security group associated to thesubnet-privatesubnet doesn't allow outbound access to public IP addresses other than the addresses assigned to the Azure Storage service.
Exit the SSH session to thevm-privateVM.
Exit the SSH session to thevm-privateVM.
Confirm access is denied to storage account
Portal
PowerShell
CLI
From vm-1
In the search box at the top of the portal, enterVirtual machine. SelectVirtual machinesin the search results.
In the search box at the top of the portal, enterVirtual machine. SelectVirtual machinesin the search results.
Selectvm-1.
Selectvm-1.
SelectBastioninOperations.
SelectBastioninOperations.
Enter the username and password you specified when creating the virtual machine. SelectConnect.
Enter the username and password you specified when creating the virtual machine. SelectConnect.
Repeat the previous command to attempt to map the drive to the file share in the storage account. You might need to copy the storage account access key again for this procedure:$key = @{
    String = "<storage-account-key>"
}
$acctKey = ConvertTo-SecureString @key -AsPlainText -Force

$cred = @{
    ArgumentList = "Azure\<storage-account-name>", $acctKey
}
$credential = New-Object System.Management.Automation.PSCredential @cred

$map = @{
    Name = "Z"
    PSProvider = "FileSystem"
    Root = "\\<storage-account-name>.file.core.windows.net\file-share"
    Credential = $credential
}
New-PSDrive @map
Repeat the previous command to attempt to map the drive to the file share in the storage account. You might need to copy the storage account access key again for this procedure:
$key = @{
    String = "<storage-account-key>"
}
$acctKey = ConvertTo-SecureString @key -AsPlainText -Force

$cred = @{
    ArgumentList = "Azure\<storage-account-name>", $acctKey
}
$credential = New-Object System.Management.Automation.PSCredential @cred

$map = @{
    Name = "Z"
    PSProvider = "FileSystem"
    Root = "\\<storage-account-name>.file.core.windows.net\file-share"
    Credential = $credential
}
New-PSDrive @map
$key = @{
    String = "<storage-account-key>"
}
$acctKey = ConvertTo-SecureString @key -AsPlainText -Force

$cred = @{
    ArgumentList = "Azure\<storage-account-name>", $acctKey
}
$credential = New-Object System.Management.Automation.PSCredential @cred

$map = @{
    Name = "Z"
    PSProvider = "FileSystem"
    Root = "\\<storage-account-name>.file.core.windows.net\file-share"
    Credential = $credential
}
New-PSDrive @map
You should receive the following error message:New-PSDrive : Access is denied
At line:1 char:5
+     New-PSDrive @map
+     ~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (Z:PSDriveInfo) [New-PSDrive], Win32Exception
    + FullyQualifiedErrorId : CouldNotMapNetworkDrive,Microsoft.PowerShell.Commands.NewPSDriveCommand
You should receive the following error message:
New-PSDrive : Access is denied
At line:1 char:5
+     New-PSDrive @map
+     ~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (Z:PSDriveInfo) [New-PSDrive], Win32Exception
    + FullyQualifiedErrorId : CouldNotMapNetworkDrive,Microsoft.PowerShell.Commands.NewPSDriveCommand
New-PSDrive : Access is denied
At line:1 char:5
+     New-PSDrive @map
+     ~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (Z:PSDriveInfo) [New-PSDrive], Win32Exception
    + FullyQualifiedErrorId : CouldNotMapNetworkDrive,Microsoft.PowerShell.Commands.NewPSDriveCommand
Close the Bastion connection tovm-1.
Close the Bastion connection tovm-1.
From a local machine
In the search box at the top of the portal, enterStorage account. SelectStorage accountsin the search results.
In the search box at the top of the portal, enterStorage account. SelectStorage accountsin the search results.
InStorage accounts, select your storage account.
InStorage accounts, select your storage account.
InData storage, selectFile shares.
InData storage, selectFile shares.
Selectfile-share.
Selectfile-share.
SelectBrowsein the left-hand menu.
SelectBrowsein the left-hand menu.
You should receive the following error message:
You should receive the following error message:

Note
The access is denied because your computer isn't in thesubnet-privatesubnet of thevnet-1virtual network.
From vm-1
In the search box at the top of the portal, enterVirtual machine. SelectVirtual machinesin the search results.
In the search box at the top of the portal, enterVirtual machine. SelectVirtual machinesin the search results.
Selectvm-1.
Selectvm-1.
SelectBastioninOperations.
SelectBastioninOperations.
Enter the username and password you specified when creating the virtual machine. SelectConnect.
Enter the username and password you specified when creating the virtual machine. SelectConnect.
Repeat the previous command to attempt to map the drive to the file share in the storage account. You might need to copy the storage account access key again for this procedure:$key = @{
    String = "<storage-account-key>"
}
$acctKey = ConvertTo-SecureString @key -AsPlainText -Force

$cred = @{
    ArgumentList = "Azure\<storage-account-name>", $acctKey
}
$credential = New-Object System.Management.Automation.PSCredential @cred

$map = @{
    Name = "Z"
    PSProvider = "FileSystem"
    Root = "\\<storage-account-name>.file.core.windows.net\file-share"
    Credential = $credential
}
New-PSDrive @map
Repeat the previous command to attempt to map the drive to the file share in the storage account. You might need to copy the storage account access key again for this procedure:
$key = @{
    String = "<storage-account-key>"
}
$acctKey = ConvertTo-SecureString @key -AsPlainText -Force

$cred = @{
    ArgumentList = "Azure\<storage-account-name>", $acctKey
}
$credential = New-Object System.Management.Automation.PSCredential @cred

$map = @{
    Name = "Z"
    PSProvider = "FileSystem"
    Root = "\\<storage-account-name>.file.core.windows.net\file-share"
    Credential = $credential
}
New-PSDrive @map
$key = @{
    String = "<storage-account-key>"
}
$acctKey = ConvertTo-SecureString @key -AsPlainText -Force

$cred = @{
    ArgumentList = "Azure\<storage-account-name>", $acctKey
}
$credential = New-Object System.Management.Automation.PSCredential @cred

$map = @{
    Name = "Z"
    PSProvider = "FileSystem"
    Root = "\\<storage-account-name>.file.core.windows.net\file-share"
    Credential = $credential
}
New-PSDrive @map
You should receive the following error message:New-PSDrive : Access is denied
At line:1 char:5
+     New-PSDrive @map
+     ~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (Z:PSDriveInfo) [New-PSDrive], Win32Exception
    + FullyQualifiedErrorId : CouldNotMapNetworkDrive,Microsoft.PowerShell.Commands.NewPSDriveCommand
You should receive the following error message:
New-PSDrive : Access is denied
At line:1 char:5
+     New-PSDrive @map
+     ~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (Z:PSDriveInfo) [New-PSDrive], Win32Exception
    + FullyQualifiedErrorId : CouldNotMapNetworkDrive,Microsoft.PowerShell.Commands.NewPSDriveCommand
New-PSDrive : Access is denied
At line:1 char:5
+     New-PSDrive @map
+     ~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (Z:PSDriveInfo) [New-PSDrive], Win32Exception
    + FullyQualifiedErrorId : CouldNotMapNetworkDrive,Microsoft.PowerShell.Commands.NewPSDriveCommand
Close the Bastion connection tovm-1.
Close the Bastion connection tovm-1.
From your computer, attempt to view the file shares in the storage account with the following command:$storage = @{
    ShareName = "file-share"
    Context = $storageContext
}
Get-AzStorageFile @storageAccess is denied. You receive an output similar to the following example.Get-AzStorageFile : The remote server returned an error: (403) Forbidden. HTTP Status Code: 403 - HTTP Error Message: This request isn't authorized to perform this operationYour computer isn't in thesubnet-privatesubnet of thevnet-1virtual network.
From your computer, attempt to view the file shares in the storage account with the following command:
$storage = @{
    ShareName = "file-share"
    Context = $storageContext
}
Get-AzStorageFile @storage
$storage = @{
    ShareName = "file-share"
    Context = $storageContext
}
Get-AzStorageFile @storage
Access is denied. You receive an output similar to the following example.
Get-AzStorageFile : The remote server returned an error: (403) Forbidden. HTTP Status Code: 403 - HTTP Error Message: This request isn't authorized to perform this operation
Get-AzStorageFile : The remote server returned an error: (403) Forbidden. HTTP Status Code: 403 - HTTP Error Message: This request isn't authorized to perform this operation
Your computer isn't in thesubnet-privatesubnet of thevnet-1virtual network.
SSH into thevm-publicVM.
Run the following command to store the IP address of the VM as an environment variable:export IP_ADDRESS=$(az vm show --show-details --resource-group test-rg --name vm-public --query publicIps --output tsv)

ssh -o StrictHostKeyChecking=no azureuser@$IP_ADDRESS
Run the following command to store the IP address of the VM as an environment variable:
export IP_ADDRESS=$(az vm show --show-details --resource-group test-rg --name vm-public --query publicIps --output tsv)

ssh -o StrictHostKeyChecking=no azureuser@$IP_ADDRESS
export IP_ADDRESS=$(az vm show --show-details --resource-group test-rg --name vm-public --query publicIps --output tsv)

ssh -o StrictHostKeyChecking=no azureuser@$IP_ADDRESS
Create a directory for a mount point:sudo mkdir /mnt/file-share
Create a directory for a mount point:
sudo mkdir /mnt/file-share
sudo mkdir /mnt/file-share
Attempt to mount the Azure file share to the directory you created. This article assumes you deployed the latest version of Ubuntu. If you're using earlier versions of Ubuntu, seeMount on Linuxfor more instructions about mounting file shares. Before running the following command, replace<storage-account-name>with the account name and<storage-account-key>with the key you retrieved inCreate a storage account:sudo mount --types cifs //storage-account-name>.file.core.windows.net/file-share /mnt/file-share --options vers=3.0,username=<storage-account-name>,password=<storage-account-key>,dir_mode=0777,file_mode=0777,serverinoAccess is denied, and you receive amount error(13): Permission deniederror, because thevm-publicVM is deployed within thesubnet-publicsubnet. Thesubnet-publicsubnet doesn't have a service endpoint enabled for Azure Storage, and the storage account only allows network access from thesubnet-privatesubnet, not thesubnet-publicsubnet.
Attempt to mount the Azure file share to the directory you created. This article assumes you deployed the latest version of Ubuntu. If you're using earlier versions of Ubuntu, seeMount on Linuxfor more instructions about mounting file shares. Before running the following command, replace<storage-account-name>with the account name and<storage-account-key>with the key you retrieved inCreate a storage account:
<storage-account-name>
<storage-account-key>
sudo mount --types cifs //storage-account-name>.file.core.windows.net/file-share /mnt/file-share --options vers=3.0,username=<storage-account-name>,password=<storage-account-key>,dir_mode=0777,file_mode=0777,serverino
sudo mount --types cifs //storage-account-name>.file.core.windows.net/file-share /mnt/file-share --options vers=3.0,username=<storage-account-name>,password=<storage-account-key>,dir_mode=0777,file_mode=0777,serverino
Access is denied, and you receive amount error(13): Permission deniederror, because thevm-publicVM is deployed within thesubnet-publicsubnet. Thesubnet-publicsubnet doesn't have a service endpoint enabled for Azure Storage, and the storage account only allows network access from thesubnet-privatesubnet, not thesubnet-publicsubnet.
mount error(13): Permission denied
Exit the SSH session to thevm-publicVM.
Exit the SSH session to thevm-publicVM.
From your computer, attempt to view the shares in your storage account withaz storage share list. Replace<account-name>and<account-key>with the storage account name and key fromCreate a storage account:az storage share list \
  --account-name <account-name> \
  --account-key <account-key>Access is denied and you receive aThis request isn't authorized to perform this operationerror, because your computer isn't in thesubnet-privatesubnet of thevnet-1virtual network.
From your computer, attempt to view the shares in your storage account withaz storage share list. Replace<account-name>and<account-key>with the storage account name and key fromCreate a storage account:
<account-name>
<account-key>
az storage share list \
  --account-name <account-name> \
  --account-key <account-key>
az storage share list \
  --account-name <account-name> \
  --account-key <account-key>
Access is denied and you receive aThis request isn't authorized to perform this operationerror, because your computer isn't in thesubnet-privatesubnet of thevnet-1virtual network.
Portal
PowerShell
CLI
When you finish using the resources that you created, you can delete the resource group and all its resources.
In the Azure portal, search for and selectResource groups.
In the Azure portal, search for and selectResource groups.
On theResource groupspage, select thetest-rgresource group.
On theResource groupspage, select thetest-rgresource group.
On thetest-rgpage, selectDelete resource group.
On thetest-rgpage, selectDelete resource group.
Entertest-rginEnter resource group name to confirm deletion, and then selectDelete.
Entertest-rginEnter resource group name to confirm deletion, and then selectDelete.
When no longer needed, you can useRemove-AzResourceGroupto remove the resource group and all of the resources it contains:
$cleanup = @{
  Name  = "test-rg"
}
Remove-AzResourceGroup @cleanup -Force
$cleanup = @{
  Name  = "test-rg"
}
Remove-AzResourceGroup @cleanup -Force
Clean up resources
When no longer needed, useaz group deleteto remove the resource group and all of the resources it contains.
az group delete \
    --name test-rg \
    --yes \
    --no-wait
az group delete \
    --name test-rg \
    --yes \
    --no-wait
Next steps
In this tutorial:
You enabled a service endpoint for a virtual network subnet.
You enabled a service endpoint for a virtual network subnet.
You learned that you can enable service endpoints for resources deployed from multiple Azure services.
You learned that you can enable service endpoints for resources deployed from multiple Azure services.
You created an Azure Storage account and restricted the network access to the storage account to only resources within a virtual network subnet.
You created an Azure Storage account and restricted the network access to the storage account to only resources within a virtual network subnet.
To learn more about service endpoints, seeService endpoints overviewandManage subnets.
If you have multiple virtual networks in your account, you might want to establish connectivity between them so that resources can communicate with each other. To learn how to connect virtual networks, advance to the next tutorial.
Connect virtual networks
Feedback
Was this page helpful?
Additional resources