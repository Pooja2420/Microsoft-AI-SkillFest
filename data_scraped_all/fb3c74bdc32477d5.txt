Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Microsoft-hosted agents
Article
2025-04-11
47 contributors
In this article
Azure DevOps Services
Microsoft-hosted agents are only available with Azure DevOps Services, which is hosted in the cloud. You cannot use Microsoft-hosted agents or the Azure Pipelines agent pool with on-premises TFS or Azure DevOps Server. With these on-premises versions, you must useself-hosted agents.
Important

Select the version of this article that corresponds to your platform and version. The version selector is above the table of contents.Look up your Azure DevOps platform and version.
If your pipelines are in Azure Pipelines, then you've got a convenient option to run your jobs using aMicrosoft-hosted agent. With Microsoft-hosted agents, maintenance and upgrades are taken care of for you. You always get the latest version of the VM image you specify in your pipeline. Each time you run a pipeline, you get a fresh virtual machine for each job in the pipeline. The virtual machine is discarded after one job (which means any change that a job makes to the virtual machine file system, such as checking out code, will be unavailable to the next job). Microsoft-hosted agents can run jobsdirectly on the VMorin a container.
Azure Pipelines provides a predefined agent pool namedAzure Pipelineswith Microsoft-hosted agents.
For many teams this is the simplest way to run your jobs. You can try it first and see if it works for your build or deployment. If not, you can usescale set agentsor a self-hosted agent.
Tip
You can try a Microsoft-hosted agent for no charge.
Software
TheAzure Pipelinesagent pool offers several virtual machine images to choose from, each including a broad range of tools and software.
windows-2025
windows-latest
windows-2022
windows-2019
ubuntu-latest
ubuntu-24.04
ubuntu-22.04
ubuntu-20.04
macOS-15
macOS-latest
macOS-14
macOS-13
The default agent image for classic build pipelines iswindows-2019, and the default agent image for YAML build pipelines isubuntu-latest. For more information, seeDesignate a pool in your pipeline.
ubuntu-latest
You can see the installed software for each hosted agent by choosing theIncluded Softwarelink in the table. When using macOS images, you can manually select from tool versions.Read more.
1Theubuntu-latestlabel is in the process of transitioning fromubuntu-22.04toubuntu-24.04. Until the transition is complete, your pipelines usingubuntu-latestmight still useubuntu-22.04.
ubuntu-latest
ubuntu-22.04
ubuntu-24.04
ubuntu-latest
ubuntu-22.04
Recent updates
The windows-2025 image is available in preview
The macOS-12 Monterey image has been retired
The macOS-15 Sequoia image is available in preview
The Ubuntu-24.04 image is available
The macOS-12 Monterey image is deprecated and will be retired December 3, 2024.
The Ubuntu-22.04 image is available
The macOS-14 Sonoma image is available in preview
The macOS-11 Big Sur image is deprecated and will be retired June 28, 2024.
All Microsoft hosted agents will start using PowerShell 7.2 LTS to PowerShell 7.4 LTS starting January 28. For more information, including potential breaking changes, seeMicrosoft hosted agents use PowerShell 7.4.
The macOS 13 image is generally available
The macOS 10.15 image is fully unsupported as of 4/24/2023
The Ubuntu 18.04 image is retired
ubuntu-latestimages useubuntu-22.04.
ubuntu-latest
ubuntu-22.04
General availability of Ubuntu 22.04 for Azure Pipelines hosted pools.
The Ubuntu 18.04 image will begin deprecation on 8/8/22 and will be fully unsupported by 4/1/2023.
The macOS 10.15 image will begin deprecation on 5/31/22 and will be fully unsupported by 12/1/2022.
windows-latestimages usewindows-2022.
windows-latest
windows-2022
macOS-latestimages usemacOS-14.
macOS-latest
macOS-14
The Ubuntu 16.04 hosted image was removed September 2021.
The Windows Server 2016 with Visual Studio 2017 image is deprecated and was retired June 30 2022. Readthis blog poston how to identify pipelines using deprecated images.
In December 2021, we removed the following Azure Pipelines hosted image:macOS X Mojave 10.14 (macOS-10.14)
macOS X Mojave 10.14 (macOS-10.14)
macOS-10.14
In March 2020, we removed the following Azure Pipelines hosted images:Windows Server 2012R2 with Visual Studio 2015 (vs2015-win2012r2)macOS X High Sierra 10.13 (macOS-10.13)Windows Server Core 1803 (win1803)
Windows Server 2012R2 with Visual Studio 2015 (vs2015-win2012r2)
vs2015-win2012r2
macOS X High Sierra 10.13 (macOS-10.13)
macOS-10.13
Windows Server Core 1803 (win1803)
win1803
Customers are encouraged to migrate to newer versions or aself-hosted agent.
For more information and instructions on how to update your pipelines that use those images, seeRemoving older images in Azure Pipelines hosted pools.
Note
The Azure Pipelines hosted pool replaces the previous hosted pools that had names that mapped to the corresponding images. Any jobs you had in the previous hosted pools are automatically redirected to the correct image in the new Azure Pipelines hosted pool. In some circumstances, you may still see the old pool names, but behind the scenes the hosted jobs are run using the Azure Pipelines pool. For more information about this update, see theSingle hosted poolrelease notes from theJuly 1 2019 - Sprint 154 release notes.
Important
To request additional software to be installed on Microsoft-hosted agents, don't create a feedback request on this document or open a support ticket. Instead, open an issue on ourrepository, where we manage the scripts to generate various images.
How to identify pipelines using a deprecated hosted image
To identify pipelines that are using a deprecated image, browse to the following location in your organization:https://dev.azure.com/{organization}/{project}/_settings/agentqueues, and filter on the image name to check. The following example checks thevs2017-win2016image.
https://dev.azure.com/{organization}/{project}/_settings/agentqueues
vs2017-win2016

You can also query job history for deprecated images across projects using the script locatedhere, as shown in the following example.
./QueryJobHistoryForRetiredImages.ps1 -accountUrl https://dev.azure.com/{org} -pat {pat}
./QueryJobHistoryForRetiredImages.ps1 -accountUrl https://dev.azure.com/{org} -pat {pat}
Use a Microsoft-hosted agent
YAML
Classic
In YAML pipelines, if you do not specify a pool, pipelines default to the Azure Pipelines agent pool. You simply need to specify which virtual machine image you want to use.
jobs:
- job: Linux
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - script: echo hello from Linux
- job: macOS
  pool:
    vmImage: 'macOS-latest'
  steps:
  - script: echo hello from macOS
- job: Windows
  pool:
    vmImage: 'windows-latest'
  steps:
  - script: echo hello from Windows
jobs:
- job: Linux
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - script: echo hello from Linux
- job: macOS
  pool:
    vmImage: 'macOS-latest'
  steps:
  - script: echo hello from macOS
- job: Windows
  pool:
    vmImage: 'windows-latest'
  steps:
  - script: echo hello from Windows
Note
The specification of a pool can be done at multiple levels in a YAML file.
If you notice that your pipeline is not running on the expected image, make sure that you verify the pool specification at the pipeline, stage, and job levels.
In classic build pipelines, you first choose the Azure Pipelines pool and then specify the image to use.
Note
The specification of a pool can be done at multiple levels in a classic build pipeline - for the whole pipeline, or for each job. If you notice that your pipeline is not running on the expected image, make sure that you verify the pool specification at all levels.
Avoid hard-coded references
When you use a Microsoft-hosted agent, always usevariablesto refer to the build environment and agent resources. For example, don't
hard-code the drive letter or folder that contains the repository. The precise
layout of the hosted agents is subject to change without warning.
Hardware
Microsoft-hosted agents that run Windows and Linux images are provisioned on Azure general purpose virtual machines with a 2 core CPU, 7 GB of RAM, and 14 GB of SSD disk space. These virtual machines are co-located in the same geography as your Azure DevOps organization.
Agents that run macOS images are provisioned on Mac pros with a 3 core CPU, 14 GB of RAM, and 14 GB of SSD disk space. These agents always run in the US irrespective of the location of your Azure DevOps organization. If data sovereignty is important to you and if your organization is not in the US, then you should not use macOS images.Learn more.
All of these machines have at least 10 GB of free disk space available for your pipelines to run. This free space is consumed when your pipeline checks out source code, downloads packages, pulls docker images, or generates intermediate files.
Important
We cannot honor requests to increase disk space on Microsoft-hosted agents, or to provision more powerful machines. If the specifications of Microsoft-hosted agents do not meet your needs, then you should considerself-hosted agentsorscale set agentsorManaged DevOps Pools.

Networking
In some setups, you may need to know the range of IP addresses where agents are deployed. For instance, if you need to grant the hosted agents access through a firewall, you may wish to restrict that access by IP address. Because Azure DevOps uses the Azure global network, IP ranges vary over time. Microsoft publishes aweekly JSON filelisting IP ranges for Azure datacenters, broken out by region. This file is updated weekly with new planned IP ranges. Only the latest version of the file is available for download. If you need previous versions, you must download and archive them each week as they become available. The new IP ranges become effective the following week. We recommend that you check back frequently (at least once every week) to ensure you keep an up-to-date list. If agent jobs begin to fail, a key first troubleshooting step is to make sure your configuration matches the latest list of IP addresses. The IP address ranges for the hosted agents are listed in the weekly file underAzureCloud.<region>, such asAzureCloud.westusfor the West US region.
AzureCloud.<region>
AzureCloud.westus
Your hosted agents run in the sameAzure geographyas your organization. Each geography contains one or more regions. While your agent may run in the same region as your organization, it is not guaranteed to do so. To obtain the complete list of possible IP ranges for your agent, you must use the IP ranges from all of the regions that are contained in your geography. For example, if your organization is located in theUnited Statesgeography, you must use the IP ranges for all of the regions in that geography.
To determine your geography, navigate tohttps://dev.azure.com/<your_organization>/_settings/organizationOverview, get your region, and find the associated geography from theAzure geographytable. Once you have identified your geography, use the IP ranges from theweekly filefor all regions in that geography.
https://dev.azure.com/<your_organization>/_settings/organizationOverview
Important
You cannot use private connections such asExpressRouteor VPN to connect Microsoft-hosted agents to your corporate network. The traffic between Microsoft-hosted agents and your servers will be over public network.
To identify the possible IP ranges for Microsoft-hosted agents
Identify theregion for your organizationinOrganization settings.
Identify theAzure Geographyfor your organization's region.
Map the names of the regions in your geography to the format used in the weekly file, following the format ofAzureCloud.<region>, such asAzureCloud.westus. You can map the names of the regions from theAzure Geographylist to the format used in the weekly file by reviewing the region names passed to the constructor of the regions defined in thesource code for the Region class, from theAzure Management Libraries for .NET.NoteSince there is no API in theAzure Management Libraries for .NETto list the regions for a geography, you must list them manually as shown in the following example.
AzureCloud.<region>
AzureCloud.westus
Note
Since there is no API in theAzure Management Libraries for .NETto list the regions for a geography, you must list them manually as shown in the following example.
Retrieve the IP addresses for all regions in your geography from theweekly file. If your region isBrazil SouthorWest Europe, you must include additional IP ranges based on your fallback geography, as described in the following note.
Note
Due to capacity restrictions, some organizations in theBrazil SouthorWest Europeregions may occasionally see their hosted agents located outside their expected geography. In these cases, in addition to including the IP ranges for all the regions in your geography as described in the previous section, additional IP ranges must be included for the regions in the capacity fallback geography.
If your organization is in theBrazil Southregion, your capacity fallback geography isUnited States.
If your organization is in theWest Europeregion, the capacity fallback geography isFrance.
Our Mac IP ranges are not included in the Azure IPs above, as they are hosted in GitHub's macOS cloud. IP ranges can be retrieved using theGitHub metadata APIusing the instructions providedhere.
In the following example, the hosted agent IP address ranges for an organization in the West US region are retrieved from the weekly file. Since the West US region is in the United States geography, the IP addresses for all regions in the United States geography are included. In this example, the IP addresses are written to the console.
using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace WeeklyFileIPRanges
{
    class Program
    {
        // Path to the locally saved weekly file
        const string weeklyFilePath = @"C:\MyPath\ServiceTags_Public_20230904.json";

        static void Main(string[] args)
        {
            // United States geography has the following regions:
            // Central US, East US, East US 2, East US 3, North Central US, 
            // South Central US, West Central US, West US, West US 2, West US 3
            // This list is accurate as of 9/8/2023
            List<string> USGeographyRegions = new List<string>
            {
                "centralus",
                "eastus",
                "eastus2",
                "eastus3",
                "northcentralus",
                "southcentralus",
                "westcentralus",
                "westus",
                "westus2",
                "westus3"
            };

            // Load the weekly file
            JObject weeklyFile = JObject.Parse(File.ReadAllText(weeklyFilePath));
            JArray values = (JArray)weeklyFile["values"];

            foreach (string region in USGeographyRegions)
            {
                string tag = $"AzureCloud.{region}";
                Console.WriteLine(tag);

                var ipList =
                    from v in values
                    where tag.Equals((string)v["name"], StringComparison.OrdinalIgnoreCase)
                    select v["properties"]["addressPrefixes"];

                foreach (var ip in ipList.Children())
                {
                    Console.WriteLine(ip);
                }
            }
        }
    }
}
using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace WeeklyFileIPRanges
{
    class Program
    {
        // Path to the locally saved weekly file
        const string weeklyFilePath = @"C:\MyPath\ServiceTags_Public_20230904.json";

        static void Main(string[] args)
        {
            // United States geography has the following regions:
            // Central US, East US, East US 2, East US 3, North Central US, 
            // South Central US, West Central US, West US, West US 2, West US 3
            // This list is accurate as of 9/8/2023
            List<string> USGeographyRegions = new List<string>
            {
                "centralus",
                "eastus",
                "eastus2",
                "eastus3",
                "northcentralus",
                "southcentralus",
                "westcentralus",
                "westus",
                "westus2",
                "westus3"
            };

            // Load the weekly file
            JObject weeklyFile = JObject.Parse(File.ReadAllText(weeklyFilePath));
            JArray values = (JArray)weeklyFile["values"];

            foreach (string region in USGeographyRegions)
            {
                string tag = $"AzureCloud.{region}";
                Console.WriteLine(tag);

                var ipList =
                    from v in values
                    where tag.Equals((string)v["name"], StringComparison.OrdinalIgnoreCase)
                    select v["properties"]["addressPrefixes"];

                foreach (var ip in ipList.Children())
                {
                    Console.WriteLine(ip);
                }
            }
        }
    }
}
Service tags
Microsoft-hosted agents can't be listed by service tags. If you're trying to grant hosted agents access to your resources, you'll need to follow the IP range allow listing method.
Security
Microsoft-hosted agents run on secure Azure platform. However, you must be aware of the following security considerations.
Although Microsoft-hosted agents run on Azure public network, they are not assigned public IP addresses. So, external entities cannot target Microsoft-hosted agents.
Microsoft-hosted agents are run in individual VMs, which are re-imaged after each run. Each agent is dedicated to a single organization, and each VM hosts only a single agent.
There are several benefits to running your pipeline on Microsoft-hosted agents, from a security perspective. If you run untrusted code in your pipeline, such as contributions from forks, it is safer to run the pipeline on Microsoft-hosted agents than on self-hosted agents that reside in your corporate network.
When a pipeline needs to access your corporate resources behind a firewall, you have to allow the IP address range for the Azure geography. This may increase your exposure as the range of IP addresses is rather large and since machines in this range can belong to other customers as well. The best way to prevent this is to avoid the need to access internal resources. For information on deploying artifacts to a set of servers, seeCommunication to deploy to target servers.
Hosted images do not conform toCIS hardening benchmarks. To use CIS-hardened images, you must create either self-hosted agents or scale-set agents or Managed DevOps pools.
Capabilities and limitations
Microsoft-hosted agents:
Havethe above software. You can also add software during your build or release usingtool installer tasks.You get a freshly imaged agent for each job in your pipeline.
You get a freshly imaged agent for each job in your pipeline.
Provide 10 GB of storage for your source and build outputs.
Provide a free tier:Public project: 10 free Microsoft-hosted parallel jobs that can run for up to 360 minutes (6 hours) each time, with no overall time limit per month.Contact usto get your free tier limits increased.Private project: One free parallel job that can run for up to 60 minutes each time, until you've used 1,800 minutes (30 hours) per month. You can pay for additional capacity per parallel job. Paid parallel jobs remove the monthly time limit and allow you to run each job for up to 360 minutes (6 hours).Buy Microsoft-hosted parallel jobs.When you create a new Azure DevOps organization, you are not given these free grants by default. To request the free grant for public or private projects, submita request.
Public project: 10 free Microsoft-hosted parallel jobs that can run for up to 360 minutes (6 hours) each time, with no overall time limit per month.Contact usto get your free tier limits increased.
Private project: One free parallel job that can run for up to 60 minutes each time, until you've used 1,800 minutes (30 hours) per month. You can pay for additional capacity per parallel job. Paid parallel jobs remove the monthly time limit and allow you to run each job for up to 360 minutes (6 hours).Buy Microsoft-hosted parallel jobs.
When you create a new Azure DevOps organization, you are not given these free grants by default. To request the free grant for public or private projects, submita request.
Run on Microsoft Azure general purpose virtual machinesStandard_DS2_v2.
Run as an administrator on Windows and a passwordless sudo user on Linux.
(Linux only) Run steps in acgroupthat offers 6 GB of physical memory and 13 GB of total memory.
cgroup
Use VM images that are regularly updated (every 3 weeks).
Microsoft-hosted agents do not offer:
The ability to remotely connect.
The ability todrop artifacts to a UNC file share.
The ability to join machines directly to your corporate network.
The ability to get bigger or more powerful build machines.
The ability to pre-load custom software. You can install software during a pipeline run, such as throughtool installer tasksor in a script.
Potential performance advantages that you might get by using self-hosted agents that might start and run builds faster.Learn more
The ability to runXAML builds.
The ability to roll back to a previous VM image version. You always use the latest version.
If Microsoft-hosted agents don't meet your needs, then you can deploy your ownself-hosted agentsor usescale set agentsorManaged DevOps Pools.
FAQ
How can I see what software is included in an image?
You can see the installed software for each hosted agent by choosing theIncluded Softwarelink in theSoftwaretable.
Note
By default, the Windows agent uses the version of Git that is bundled with the agent software. Microsoft recommends using the version of Git that is bundled with the agent, but you have several options to override this default behavior and use the version of Git that the agent machine has installed in the path.
Set a pipeline variable namedSystem.PreferGitFromPathtotruein your pipelines.
System.PreferGitFromPath
true
On self-hosted agents, you can create a file named.envin the agent root directory and add aSystem.PreferGitFromPath=trueline to the file. For more information, seeHow do I set different environment variables for each individual agent?
System.PreferGitFromPath=true
To see the version of Git used by a pipeline, you can look at the logs for acheckoutstep in your pipeline, as shown in the following example.
checkout
Syncing repository: PathFilter (Git)
Prepending Path environment variable with directory containing 'git.exe'.
git version
git version 2.26.2.windows.1
Syncing repository: PathFilter (Git)
Prepending Path environment variable with directory containing 'git.exe'.
git version
git version 2.26.2.windows.1
How does Microsoft choose the software and versions to put on the image?
More information about the versions of software included on the images can be found atGuidelines for what's installed.
When are the images updated?
Images are typically updated weekly. You can check thestatus badgeswhich are in the format20200113.xwhere the first part indicates the date the image was updated.
20200113.x
What can I do if software I need is removed or replaced with a newer version?
You can let us know by filing a GitHub issue by choosing theIncluded Softwarelinks in theUse a Microsoft-hosted agenttable.
You can also use a self-hosted agent that includes the exact versions of software that you need. For more information, seeSelf-hosted agents.
What if I need a bigger machine with more processing power, memory, or disk space?
We can't increase the memory, processing power, or disk space for Microsoft-hosted agents, but you can useself-hosted agentsorscale set agentsorManaged DevOps Poolshosted on machines with your desired specifications.
I can't select a Microsoft-hosted agent and I can't queue my build or deployment. What should I do?
Microsoft-hosted agents are only available in Azure Pipelines and not in TFS or Azure DevOps Server.
By default, all project contributors in an organization have access to the Microsoft-hosted agents. But, your organization administrator may limit the access of Microsoft-hosted agents to select users or projects. Ask the owner of your Azure DevOps organization to grant you permission to use a Microsoft-hosted agent. Seeagent pool security.
My pipelines running on Microsoft-hosted agents take more time to complete. How can I speed them up?
If your pipeline has recently become slower, review ourstatus pagefor any outages. We could be having issues with our service. Or else, review any changes that you made in your application code or pipeline. Your repository size during check-out might have increased, you may be uploading larger artifacts, or you may be running more tests.
If you are just setting up a pipeline and are comparing the performance of Microsoft-hosted agents to your local machine or a self-hosted agent, then note thespecificationsof the hardware that we use to run your jobs. We are unable to provide you with bigger or powerful machines. You can consider usingself-hosted agentsorscale set agentsorManaged DevOps Poolsif this performance is not acceptable.
I need more agents. What can I do?
All Azure DevOps organizations are provided with several free parallel jobs for open-source projects, and one free parallel job and limited minutes each month for private projects. If you need additional minutes or parallel jobs for your open-source project, contactsupport. If you need additional minutes or parallel jobs for your private project, then you canbuy more.
My pipeline succeeds on self-hosted agent, but fails on Microsoft-hosted agents. What should I do?
Your self-hosted agent probably has all the right dependencies installed on it, whereas the same dependencies, tools, and software are not installed on Microsoft-hosted agents. First, carefully review the list of software that is installed on Microsoft-hosted agents by following the link toIncluded softwarein the table above. Then, compare that with the software installed on your self-hosted agent. In some cases, Microsoft-hosted agents may have the tools that you need (for example, Visual Studio), but all of the necessary optional components may not have been installed. If you find differences, then you have two options:
You can create a new issue on therepository, where we track requests for additional software. Contacting support can't help you set up new software on Microsoft-hosted agents.
You can create a new issue on therepository, where we track requests for additional software. Contacting support can't help you set up new software on Microsoft-hosted agents.
You can useself-hosted agentsorscale set agentsorManaged DevOps Pools. With these agents, you are fully in control of the images that are used to run your pipelines.
You can useself-hosted agentsorscale set agentsorManaged DevOps Pools. With these agents, you are fully in control of the images that are used to run your pipelines.
My build succeeds on my local machine, but fails on Microsoft-hosted agents. What should I do?
Your local machine probably has all the right dependencies installed on it, whereas the same dependencies, tools, and software are not installed on Microsoft-hosted agents. First, carefully review the list of software that is installed on Microsoft-hosted agents by following the link toIncluded softwarein the table above. Then, compare that with the software installed on your local machine. In some cases, Microsoft-hosted agents may have the tools that you need (e.g., Visual Studio), but all of the necessary optional components may not have been installed. If you find differences, then you have two options:
You can create a new issue on therepository, where we track requests for additional software. This is your best bet for getting new software installed. Contacting support will not help you with setting up new software on Microsoft-hosted agents.
You can create a new issue on therepository, where we track requests for additional software. This is your best bet for getting new software installed. Contacting support will not help you with setting up new software on Microsoft-hosted agents.
You can useself-hosted agentsorscale set agentsorManaged DevOps Pools. With these agents, you are fully in control of the images that are used to run your pipelines.
You can useself-hosted agentsorscale set agentsorManaged DevOps Pools. With these agents, you are fully in control of the images that are used to run your pipelines.
My pipeline fails with the error: "no space left on device".
Microsoft-hosted agents only have 10 GB of disk space available for running your job. This space is consumed when you check out source code, when you download packages, when you download docker images, or when you produce intermediate files. Unfortunately, we cannot increase the free space available on Microsoft-hosted images. You can restructure your pipeline so that it can fit into this space. Or, you can consider usingself-hosted agentsorscale set agentsorManaged DevOps Pools.
My pipeline running on Microsoft-hosted agents requires access to servers on our corporate network. How do we get a list of IP addresses to allow in our firewall?
See the sectionAgent IP ranges
Our pipeline running on Microsoft-hosted agents is unable to resolve the name of a server on our corporate network. How can we fix this?
If you refer to the server by its DNS name, then make sure that your server is publicly accessible on the Internet through its DNS name. If you refer to your server by its IP address, make sure that the IP address is publicly accessible on the Internet. In both cases, ensure that any firewall in between the agents and your corporate network has theagent IP rangesallowed.
I'm getting an SAS IP authorization error from an Azure Storage account
If you get an SAS error code, it is most likely because the IP address ranges from the Microsoft-hosted agents aren't permitted due to your Azure Storage rules. There are a few workarounds:
Manage the IP network rules for your Azure Storage accountand add theIP address ranges for your hosted agents.
In your pipeline, useAzure CLI to update the network ruleset for your Azure Storage accountright before you access storage, and then restore the previous ruleset.
Useself-hosted agentsorScale set agentsorManaged DevOps Pools.

How can I manually select versions of tools on the Hosted macOS agent?
If you use theXcode taskincluded with Azure Pipelines and TFS, you can select a version of Xcode in that task's properties. Otherwise, to manually set the Xcode version to use on theHosted macOSagent pool, before yourxcodebuildbuild task, execute this command line as part of your build, replacing the Xcode version number 13.2 as needed:
xcodebuild
/bin/bash -c "sudo xcode-select -s /Applications/Xcode_13.2.app/Contents/Developer"
/bin/bash -c "sudo xcode-select -s /Applications/Xcode_13.2.app/Contents/Developer"
Xcode versions on theHosted macOSagent pool can be foundhere.
To manually select a Mono version to use on theHosted macOSagent pool, execute this script in each job of your build before your Mono build task, specifying the symlink with the required Mono version:
SYMLINK=<symlink>
MONOPREFIX=/Library/Frameworks/Mono.framework/Versions/$SYMLINK
echo "##vso[task.setvariable variable=DYLD_FALLBACK_LIBRARY_PATH;]$MONOPREFIX/lib:/lib:/usr/lib:$DYLD_LIBRARY_FALLBACK_PATH"
echo "##vso[task.setvariable variable=PKG_CONFIG_PATH;]$MONOPREFIX/lib/pkgconfig:$MONOPREFIX/share/pkgconfig:$PKG_CONFIG_PATH"
echo "##vso[task.setvariable variable=PATH;]$MONOPREFIX/bin:$PATH"
SYMLINK=<symlink>
MONOPREFIX=/Library/Frameworks/Mono.framework/Versions/$SYMLINK
echo "##vso[task.setvariable variable=DYLD_FALLBACK_LIBRARY_PATH;]$MONOPREFIX/lib:/lib:/usr/lib:$DYLD_LIBRARY_FALLBACK_PATH"
echo "##vso[task.setvariable variable=PKG_CONFIG_PATH;]$MONOPREFIX/lib/pkgconfig:$MONOPREFIX/share/pkgconfig:$PKG_CONFIG_PATH"
echo "##vso[task.setvariable variable=PATH;]$MONOPREFIX/bin:$PATH"
Feedback
Was this page helpful?
Additional resources