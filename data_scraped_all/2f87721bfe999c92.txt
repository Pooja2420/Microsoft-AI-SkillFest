Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
How to use Azure Resource Manager (ARM) deployment templates with Azure CLI
Article
2024-09-26
15 contributors
In this article
This article explains how to use Azure CLI with Azure Resource Manager templates (ARM templates) to deploy your resources to Azure.  If you aren't familiar with the concepts of deploying and managing your Azure solutions, seetemplate deployment overview.
The deployment commands changed in Azure CLI version 2.2.0. The examples in this article requireAzure CLI version 2.20.0 or later.
To run this sample, install the latest version of theAzure CLI. To start, runaz loginto create a connection with Azure.
az login
Samples for the Azure CLI are written for thebashshell. To run this sample in Windows PowerShell or Command Prompt, you may need to change
elements of the script.
bash
If you don't have Azure CLI installed, you can use Azure Cloud Shell. For more information, seeDeploy ARM templates from Azure Cloud Shell.
Tip
We recommendBicepbecause it offers the same capabilities as ARM templates and the syntax is easier to use. To learn more, seeHow to deploy resources with Bicep and Azure CLI.
Required permissions
To deploy a Bicep file or ARM template, you need write access on the resources you're deploying and access to all operations on the Microsoft.Resources/deployments resource type. For example, to deploy a virtual machine, you needMicrosoft.Compute/virtualMachines/writeandMicrosoft.Resources/deployments/*permissions.  The what-if operation has the same permission requirements.
Microsoft.Compute/virtualMachines/write
Microsoft.Resources/deployments/*
For a list of roles and permissions, seeAzure built-in roles.
Deployment scope
You can target your Azure deployment template to a resource group, subscription, management group, or tenant. Depending on the scope of the deployment, you use different commands.
To deploy to aresource group, useaz deployment group create:az deployment group create --resource-group <resource-group-name> --template-file <path-to-template>
To deploy to aresource group, useaz deployment group create:
az deployment group create --resource-group <resource-group-name> --template-file <path-to-template>
az deployment group create --resource-group <resource-group-name> --template-file <path-to-template>
To deploy to asubscription, useaz deployment sub create:az deployment sub create --location <location> --template-file <path-to-template>For more information about subscription level deployments, seeCreate resource groups and resources at the subscription level.
To deploy to asubscription, useaz deployment sub create:
az deployment sub create --location <location> --template-file <path-to-template>
az deployment sub create --location <location> --template-file <path-to-template>
For more information about subscription level deployments, seeCreate resource groups and resources at the subscription level.
To deploy to amanagement group, useaz deployment mg create:az deployment mg create --location <location> --template-file <path-to-template>For more information about management group level deployments, seeCreate resources at the management group level.
To deploy to amanagement group, useaz deployment mg create:
az deployment mg create --location <location> --template-file <path-to-template>
az deployment mg create --location <location> --template-file <path-to-template>
For more information about management group level deployments, seeCreate resources at the management group level.
To deploy to atenant, useaz deployment tenant create:az deployment tenant create --location <location> --template-file <path-to-template>For more information about tenant level deployments, seeCreate resources at the tenant level.
To deploy to atenant, useaz deployment tenant create:
az deployment tenant create --location <location> --template-file <path-to-template>
az deployment tenant create --location <location> --template-file <path-to-template>
For more information about tenant level deployments, seeCreate resources at the tenant level.
For every scope, the user deploying the template must have the required permissions to create resources.
Deploy local template
You can deploy an ARM template from your local machine or one that is stored externally. This section describes deploying a local template.
If you're deploying to a resource group that doesn't exist, create the resource group. The name of the resource group can only include alphanumeric characters, periods, underscores, hyphens, and parenthesis. It can be up to 90 characters. The name can't end in a period.
az group create --name ExampleGroup --location "Central US"
az group create --name ExampleGroup --location "Central US"
To deploy a local template, use the--template-fileparameter in the deployment command. The following example also shows how to set a parameter value.
--template-file
az deployment group create \
  --name ExampleDeployment \
  --resource-group ExampleGroup \
  --template-file <path-to-template> \
  --parameters storageAccountType=Standard_GRS
az deployment group create \
  --name ExampleDeployment \
  --resource-group ExampleGroup \
  --template-file <path-to-template> \
  --parameters storageAccountType=Standard_GRS
The value of the--template-fileparameter must be a Bicep file or a.jsonor.jsoncfile. The.jsoncfile extension indicates the file can contain//style comments. The ARM system accepts//comments in.jsonfiles. It does not care about the file extension. For more details about comments and metadata seeUnderstand the structure and syntax of ARM templates.
--template-file
.json
.jsonc
.jsonc
//
//
.json
The Azure deployment template can take a few minutes to complete. When it finishes, you see a message that includes the result:
"provisioningState": "Succeeded",
"provisioningState": "Succeeded",
Deploy remote template
Instead of storing ARM templates on your local machine, you might prefer to store them in an external location. You can store templates in a source control repository (such as GitHub). Or, you can store them in an Azure storage account for shared access in your organization.
Note
To deploy a template or reference a linked template that is stored in a private GitHub repo, see a custom solution documented inCreating a Custom and Secure Azure Portal Offering. You can create anAzure functionthat pulls the GitHub token out of Azure Key Vault.
If you're deploying to a resource group that doesn't exist, create the resource group. The name of the resource group can only include alphanumeric characters, periods, underscores, hyphens, and parenthesis. It can be up to 90 characters. The name can't end in a period.
az group create --name ExampleGroup --location "Central US"
az group create --name ExampleGroup --location "Central US"
To deploy an external template, use thetemplate-uriparameter.
template-uri
az deployment group create \
  --name ExampleDeployment \
  --resource-group ExampleGroup \
  --template-uri "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/quickstarts/microsoft.storage/storage-account-create/azuredeploy.json" \
  --parameters storageAccountType=Standard_GRS
az deployment group create \
  --name ExampleDeployment \
  --resource-group ExampleGroup \
  --template-uri "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/quickstarts/microsoft.storage/storage-account-create/azuredeploy.json" \
  --parameters storageAccountType=Standard_GRS
The preceding example requires a publicly accessible URI for the template, which works for most scenarios because your template shouldn't include sensitive data. If you need to specify sensitive data (like an admin password), pass that value as a secure parameter. However, if you want to manage access to the template, consider usingtemplate specs.
To deploy remote linked templates with relative path that are stored in a storage account, usequery-stringto specify the SAS token:
query-string
az deployment group create \
  --name linkedTemplateWithRelativePath \
  --resource-group myResourceGroup \
  --template-uri "https://stage20210126.blob.core.windows.net/template-staging/mainTemplate.json" \
  --query-string $sasToken
az deployment group create \
  --name linkedTemplateWithRelativePath \
  --resource-group myResourceGroup \
  --template-uri "https://stage20210126.blob.core.windows.net/template-staging/mainTemplate.json" \
  --query-string $sasToken
For more information, seeUse relative path for linked templates.
Azure deployment template name
When deploying an ARM template, you can give the Azure deployment template a name. This name can help you retrieve the deployment from the deployment history. If you don't provide a name for the deployment, the name of the template file is used. For example, if you deploy a template namedazuredeploy.jsonand don't specify a deployment name, the deployment is namedazuredeploy.
azuredeploy
Every time you run a deployment, an entry is added to the resource group's deployment history with the deployment name. If you run another deployment and give it the same name, the earlier entry is replaced with the current deployment. If you want to maintain unique entries in the deployment history, give each deployment a unique name.
To create a unique name, you can assign a random number.
deploymentName='ExampleDeployment'$RANDOM
deploymentName='ExampleDeployment'$RANDOM
Or, add a date value.
deploymentName='ExampleDeployment'$(date +"%d-%b-%Y")
deploymentName='ExampleDeployment'$(date +"%d-%b-%Y")
If you run concurrent deployments to the same resource group with the same deployment name, only the last deployment is completed. Any deployments with the same name that haven't finished are replaced by the last deployment. For example, if you run a deployment namednewStoragethat deploys a storage account namedstorage1, and at the same time run another deployment namednewStoragethat deploys a storage account namedstorage2, you deploy only one storage account. The resulting storage account is namedstorage2.
newStorage
storage1
newStorage
storage2
storage2
However, if you run a deployment namednewStoragethat deploys a storage account namedstorage1, and immediately after it completes you run another deployment namednewStoragethat deploys a storage account namedstorage2, then you have two storage accounts. One is namedstorage1, and the other is namedstorage2. But, you only have one entry in the deployment history.
newStorage
storage1
newStorage
storage2
storage1
storage2
When you specify a unique name for each deployment, you can run them concurrently without conflict. If you run a deployment namednewStorage1that deploys a storage account namedstorage1, and at the same time run another deployment namednewStorage2that deploys a storage account namedstorage2, then you have two storage accounts and two entries in the deployment history.
newStorage1
storage1
newStorage2
storage2
To avoid conflicts with concurrent deployments and to ensure unique entries in the deployment history, give each deployment a unique name.
Deploy template spec
Instead of deploying a local or remote template, you can create atemplate spec. The template spec is a resource in your Azure subscription that contains an ARM template. It makes it easy to securely share the template with users in your organization. You use Azure role-based access control (Azure RBAC) to grant access to the template spec. This feature is currently in preview.
The following examples show how to create and deploy a template spec.
First, create the template spec by providing the ARM template.
az ts create \
  --name storageSpec \
  --version "1.0" \
  --resource-group templateSpecRG \
  --location "westus2" \
  --template-file "./mainTemplate.json"
az ts create \
  --name storageSpec \
  --version "1.0" \
  --resource-group templateSpecRG \
  --location "westus2" \
  --template-file "./mainTemplate.json"
Then, get the ID for template spec and deploy it.
id = $(az ts show --name storageSpec --resource-group templateSpecRG --version "1.0" --query "id")

az deployment group create \
  --resource-group demoRG \
  --template-spec $id
id = $(az ts show --name storageSpec --resource-group templateSpecRG --version "1.0" --query "id")

az deployment group create \
  --resource-group demoRG \
  --template-spec $id
For more information, seeAzure Resource Manager template specs.
Preview changes
Before deploying your ARM template, you can preview the changes the template makes to your environment. Use thewhat-if operationto verify that the template makes the changes that you expect. What-if also validates the template for errors.
Parameters
To pass parameter values, you can use either inline parameters or a parameters file. The parameter file can be either aBicep parameters fileor aJSON parameters file.
Inline parameters
To pass inline parameters, provide the values inparameters. For example, to pass a string and array to a template in a Bash shell, use:
parameters
az deployment group create \
  --resource-group testgroup \
  --template-file <path-to-template> \
  --parameters exampleString='inline string' exampleArray='("value1", "value2")'
az deployment group create \
  --resource-group testgroup \
  --template-file <path-to-template> \
  --parameters exampleString='inline string' exampleArray='("value1", "value2")'
If you're using Azure CLI with Windows Command Prompt (CMD) or PowerShell, pass the array in the format:exampleArray="['value1','value2']".
exampleArray="['value1','value2']"
You can also get the contents of file and provide that content as an inline parameter.
az deployment group create \
  --resource-group testgroup \
  --template-file <path-to-template> \
  --parameters exampleString=@stringContent.txt exampleArray=@arrayContent.json
az deployment group create \
  --resource-group testgroup \
  --template-file <path-to-template> \
  --parameters exampleString=@stringContent.txt exampleArray=@arrayContent.json
Getting a parameter value from a file is helpful when you need to provide configuration values. For example, you can providecloud-init values for a Linux virtual machine.
ThearrayContent.jsonformat is:
[
  "value1",
  "value2"
]
[
  "value1",
  "value2"
]
To pass in an object, for example, to set tags, use JSON. For example, your template might include a parameter like this one:
"resourceTags": {
  "type": "object",
  "defaultValue": {
    "Cost Center": "IT Department"
  }
}
"resourceTags": {
  "type": "object",
  "defaultValue": {
    "Cost Center": "IT Department"
  }
}
In this case, you can pass in a JSON string to set the parameter as shown in the following Bash script:
tags='{"Owner":"Contoso","Cost Center":"2345-324"}'
az deployment group create --name addstorage  --resource-group myResourceGroup \
--template-file $templateFile \
--parameters resourceName=abcdef4556 resourceTags="$tags"
tags='{"Owner":"Contoso","Cost Center":"2345-324"}'
az deployment group create --name addstorage  --resource-group myResourceGroup \
--template-file $templateFile \
--parameters resourceName=abcdef4556 resourceTags="$tags"
Use double quotes around the JSON that you want to pass into the object.
You can use a variable to contain the parameter values. In Bash, set the variable to all of the parameter values and add it to the deployment command.
params="prefix=start suffix=end"

az deployment group create \
  --resource-group testgroup \
  --template-file <path-to-template> \
  --parameters $params
params="prefix=start suffix=end"

az deployment group create \
  --resource-group testgroup \
  --template-file <path-to-template> \
  --parameters $params
However, if you're using Azure CLI with Windows Command Prompt (CMD) or PowerShell, set the variable to a JSON string. Escape the quotation marks:$params = '{ \"prefix\": {\"value\":\"start\"}, \"suffix\": {\"value\":\"end\"} }'.
$params = '{ \"prefix\": {\"value\":\"start\"}, \"suffix\": {\"value\":\"end\"} }'
JSON parameter files
Rather than passing parameters as inline values in your script, you might find it easier to use a parameters file, either a.bicepparamfile or a JSON parameters file, that contains the parameter values. The parameters file must be a local file. External parameters files aren't supported with Azure CLI.
.bicepparam
az deployment group create \
  --name ExampleDeployment \
  --resource-group ExampleGroup \
  --template-file storage.json \
  --parameters 'storage.parameters.json'
az deployment group create \
  --name ExampleDeployment \
  --resource-group ExampleGroup \
  --template-file storage.json \
  --parameters 'storage.parameters.json'
For more information about the parameter file, seeCreate Resource Manager parameter file.
Bicep parameter files
With Azure CLI version 2.53.0 or later, and Bicep CLI version 0.22.6 or later, you can deploy a Bicep file by utilizing a Bicep parameter file. With theusingstatement within the Bicep parameters file, there is no need to provide the--template-fileswitch when specifying a Bicep parameter file for the--parametersswitch. Including the--template-fileswitch results in an "Only a .bicep template is allowed with a .bicepparam file" error.
using
--template-file
--parameters
--template-file
az deployment group create \
  --name ExampleDeployment \
  --resource-group ExampleGroup \
  --parameters storage.bicepparam
az deployment group create \
  --name ExampleDeployment \
  --resource-group ExampleGroup \
  --parameters storage.bicepparam
The parameters file must be a local file. External parameters files aren't supported with Azure CLI. For more information about the parameters file, seeCreate Resource Manager parameters file.
Comments and the extended JSON format
You can include//style comments in your parameter file, but you must name the file with a.jsoncextension.
//
.jsonc
az deployment group create \
  --name ExampleDeployment \
  --resource-group ExampleGroup \
  --template-file storage.json \
  --parameters '@storage.parameters.jsonc'
az deployment group create \
  --name ExampleDeployment \
  --resource-group ExampleGroup \
  --template-file storage.json \
  --parameters '@storage.parameters.jsonc'
For more details about comments and metadata, seeUnderstand the structure and syntax of ARM templates.
If you are using Azure CLI with version 2.3.0 or older, you can deploy a template with multi-line strings or comments using the--handle-extended-json-formatswitch.  For example:
--handle-extended-json-format
{
  "type": "Microsoft.Compute/virtualMachines",
  "apiVersion": "2018-10-01",
  "name": "[variables('vmName')]", // to customize name, change it in variables
  "location": "[
    parameters('location')
    ]", //defaults to resource group location
  /*
    storage account and network interface
    must be deployed first
  */
  "dependsOn": [
    "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
    "[resourceId('Microsoft.Network/networkInterfaces/', variables('nicName'))]"
  ],
{
  "type": "Microsoft.Compute/virtualMachines",
  "apiVersion": "2018-10-01",
  "name": "[variables('vmName')]", // to customize name, change it in variables
  "location": "[
    parameters('location')
    ]", //defaults to resource group location
  /*
    storage account and network interface
    must be deployed first
  */
  "dependsOn": [
    "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
    "[resourceId('Microsoft.Network/networkInterfaces/', variables('nicName'))]"
  ],
Next steps
To roll back to a successful deployment when you get an error, seeRollback on error to successful deployment.
To specify how to handle resources that exist in the resource group but aren't defined in the template, seeAzure Resource Manager deployment modes.
To understand how to define parameters in your template, seeUnderstand the structure and syntax of ARM templates.
For tips on resolving common deployment errors, seeTroubleshoot common Azure deployment errors with Azure Resource Manager.
Feedback
Was this page helpful?
Additional resources