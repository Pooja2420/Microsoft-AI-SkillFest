Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
CORS
Article
2024-07-23
1 contributor
In this article
APPLIES TO: All API Management tiers
Thecorspolicy adds cross-origin resource sharing (CORS) support to an operation or an API to allow cross-domain calls from browser-based clients.
cors
Note
Set the policy's elements and child elements in the order provided in the policy statement. To help you configure this policy, the portal provides a guided, form-based editor. Learn more abouthow to set or edit API Management policies.
Policy statement
<cors allow-credentials="false | true" terminate-unmatched-request="true | false">
    <allowed-origins>
        <origin>origin uri</origin>
    </allowed-origins>
    <allowed-methods preflight-result-max-age="number of seconds">
        <method>HTTP verb</method>
    </allowed-methods>
    <allowed-headers>
        <header>header name</header>
    </allowed-headers>
    <expose-headers>
        <header>header name</header>
    </expose-headers>
</cors>
<cors allow-credentials="false | true" terminate-unmatched-request="true | false">
    <allowed-origins>
        <origin>origin uri</origin>
    </allowed-origins>
    <allowed-methods preflight-result-max-age="number of seconds">
        <method>HTTP verb</method>
    </allowed-methods>
    <allowed-headers>
        <header>header name</header>
    </allowed-headers>
    <expose-headers>
        <header>header name</header>
    </expose-headers>
</cors>
Attributes
Access-Control-Allow-Credentials
false
OPTIONS
Origin
true
200 OK
false
cors
cors
200 OK
GET
HEAD
Origin
true
200 OK
false
true
Elements
origin
allowed-origins
origin
*
origin
GET
POST
method
*
GET
POST
header
header
Caution
Use the*wildcard with care in policy settings. This configuration may be overly permissive and may make an API more vulnerable to certainAPI security threats.
*
allowed-origins elements
*
allowed-methods attributes
Access-Control-Max-Age
allowed-methods elements
method
allowed-methods
allowed-headers elements
header
allowed-headers
expose-headers elements
header
expose-headers
Usage
Policy sections:inbound
Policy scopes:global, workspace, product, API, operation
Gateways:classic, v2, consumption, self-hosted, workspace
Usage notes
You may configure thecorspolicy at more than one scope (for example, at the product scope and the global scope). Ensure that thebaseelement is configured at the operation, API, and product scopes to inherit needed policies at the parent scopes.
cors
base
Only thecorspolicy is evaluated on theOPTIONSrequest during preflight. Remaining configured policies are evaluated on the approved request.
cors
OPTIONS
This policy can only be used once in a policy section.
About CORS
CORSis an HTTP header-based standard that allows a browser and a server to interact and determine whether or not to allow specific cross-origin requests (XMLHttpRequestcalls made from JavaScript on a web page to other domains). This allows for more flexibility than only allowing same-origin requests, but is more secure than allowing all cross-origin requests.
XMLHttpRequest
CORS specifies two types ofcross-origin requests:
Preflighted (or "preflight") requests- The browser first sends an HTTP request using theOPTIONSmethod to the server, to determine if the actual request is permitted to send. If the server response includes theAccess-Control-Allow-Originheader that allows access, the browser follows with the actual request.
Preflighted (or "preflight") requests- The browser first sends an HTTP request using theOPTIONSmethod to the server, to determine if the actual request is permitted to send. If the server response includes theAccess-Control-Allow-Originheader that allows access, the browser follows with the actual request.
OPTIONS
Access-Control-Allow-Origin
Simple requests- These requests include one or more extraOriginheaders but don't trigger a CORS preflight. Only requests using theGETandHEADmethods and a limited set of request headers are allowed.
Simple requests- These requests include one or more extraOriginheaders but don't trigger a CORS preflight. Only requests using theGETandHEADmethods and a limited set of request headers are allowed.
Origin
GET
HEAD
corspolicy scenarios
cors
Configure thecorspolicy in API Management for the following scenarios:
cors
Enable the interactive test console in the developer portal. Refer to thedeveloper portal documentationfor details.NoteWhen you enable CORS for the interactive console, by default API Management configures thecorspolicy at the global scope.
Enable the interactive test console in the developer portal. Refer to thedeveloper portal documentationfor details.
Note
When you enable CORS for the interactive console, by default API Management configures thecorspolicy at the global scope.
cors
Enable API Management to reply to preflight requests or to pass through simple CORS requests when the backends don't provide their own CORS support.NoteIf a request matches an operation with anOPTIONSmethod defined in the API, preflight request processing logic associated with thecorspolicy will not be executed. Therefore, such operations can be used to implement custom preflight processing logic - for example, to apply thecorspolicy only under certain conditions.
Enable API Management to reply to preflight requests or to pass through simple CORS requests when the backends don't provide their own CORS support.
Note
If a request matches an operation with anOPTIONSmethod defined in the API, preflight request processing logic associated with thecorspolicy will not be executed. Therefore, such operations can be used to implement custom preflight processing logic - for example, to apply thecorspolicy only under certain conditions.
OPTIONS
cors
cors
Common configuration issues
Subscription key in header- If you configure thecorspolicy at theproductscope, and your API uses subscription key authentication, the policy won't work when the subscription key is passed in a header. As a workaround, modify requests to include a subscription key as a query parameter.
cors
API with header versioning- If you configure thecorspolicy at theAPIscope, and your API uses a header-versioning scheme, the policy won't work because the version is passed in a header. You may need to configure an alternative versioning method such as a path or query parameter.
cors
Policy order- You may experience unexpected behavior if thecorspolicy is not the first policy in the inbound section. SelectCalculate effective policyin the policy editor to check thepolicy evaluation orderat each scope. Generally, only the firstcorspolicy is applied.
cors
cors
Empty 200 OK response- In some policy configurations, certain cross-origin requests complete with an empty200 OKresponse. This response is expected whenterminate-unmatched-requestis set to its default value oftrueand an incoming request has anOriginheader that doesnât match an allowed origin configured in thecorspolicy.
200 OK
terminate-unmatched-request
true
Origin
cors
Example
This example demonstrates how to supportpreflight requests, such as those with custom headers or methods other thanGETandPOST. To support custom headers and other HTTP verbs, use theallowed-methodsandallowed-headerssections as shown in the following example.
GET
POST
allowed-methods
allowed-headers
<cors allow-credentials="true">
    <allowed-origins>
        <!-- Localhost useful for development -->
        <origin>http://localhost:8080/</origin>
        <origin>http://example.com/</origin>
    </allowed-origins>
    <allowed-methods preflight-result-max-age="300">
        <method>GET</method>
        <method>POST</method>
        <method>PATCH</method>
        <method>DELETE</method>
    </allowed-methods>
    <allowed-headers>
        <!-- Examples below show Azure Mobile Services headers -->
        <header>x-zumo-installation-id</header>
        <header>x-zumo-application</header>
        <header>x-zumo-version</header>
        <header>x-zumo-auth</header>
        <header>content-type</header>
        <header>accept</header>
    </allowed-headers>
    <expose-headers>
        <!-- Examples below show Azure Mobile Services headers -->
        <header>x-zumo-installation-id</header>
        <header>x-zumo-application</header>
    </expose-headers>
</cors>
<cors allow-credentials="true">
    <allowed-origins>
        <!-- Localhost useful for development -->
        <origin>http://localhost:8080/</origin>
        <origin>http://example.com/</origin>
    </allowed-origins>
    <allowed-methods preflight-result-max-age="300">
        <method>GET</method>
        <method>POST</method>
        <method>PATCH</method>
        <method>DELETE</method>
    </allowed-methods>
    <allowed-headers>
        <!-- Examples below show Azure Mobile Services headers -->
        <header>x-zumo-installation-id</header>
        <header>x-zumo-application</header>
        <header>x-zumo-version</header>
        <header>x-zumo-auth</header>
        <header>content-type</header>
        <header>accept</header>
    </allowed-headers>
    <expose-headers>
        <!-- Examples below show Azure Mobile Services headers -->
        <header>x-zumo-installation-id</header>
        <header>x-zumo-application</header>
    </expose-headers>
</cors>
Related policies
Cross-domain
Related content
For more information about working with policies, see:
Tutorial: Transform and protect your API
Policy referencefor a full list of policy statements and their settings
Policy expressions
Set or edit policies
Reuse policy configurations
Policy snippets repo
Azure API Management policy toolkit
Get Copilot assistance to create, explain, and troubleshoot policies
Feedback
Was this page helpful?
Additional resources