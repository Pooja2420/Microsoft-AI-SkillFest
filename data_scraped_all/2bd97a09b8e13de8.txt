Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Understanding the Azure Resource Graph query language
Article
2024-03-20
12 contributors
In this article
The query language for the Azure Resource Graph supports many operators and functions. Each
work and operate based onKusto Query Language (KQL). To learn about the
query language used by Resource Graph, start with thetutorial for KQL.
This article covers the language components supported by Resource Graph:
Understanding the Azure Resource Graph query languageResource Graph tablesExtended propertiesResource Graph custom language elementsShared query syntax (preview)Supported KQL language elementsSupported tabular/top level operatorsQuery scopeEscape charactersNext steps
Resource Graph tables
Extended properties
Resource Graph custom language elementsShared query syntax (preview)
Shared query syntax (preview)
Supported KQL language elementsSupported tabular/top level operators
Supported tabular/top level operators
Query scope
Escape characters
Next steps
Resource Graph tables
Resource Graph provides several tables for the data it stores about Azure Resource Manager resource types and their properties. Resource Graph tables can be used with thejoinoperator to get properties from related resource types.
join
Resource Graph tables support thejoinflavors:
join
innerunique
inner
leftouter
fullouter
join
Microsoft.Advisor
Microsoft.AlertsManagement
Microsoft.Web
Microsoft.Authorization
Microsoft.AwsConnector
Microsoft.AzureBusinessContinuity
Microsoft.Chaos
Microsoft.Compute
Microsoft.Compute
Microsoft.DesktopVirtualization
Microsoft.Network
Microsoft.EdgeOrder
Microsoft.ElasticSan
Microsoft.ExtendedLocation
Microsoft.Features
Microsoft.GuestConfiguration
Microsoft.Resources
Microsoft.ResourceHealth
Microsoft.Insights
Microsoft.IoTSecurity
Microsoft.IoTFirmwareDefense
Microsoft.KubernetesConfiguration
Microsoft.Kusto
Microsoft.Maintenance
Microsoft.ManagedServices
Microsoft.OffAzure
Microsoft.Network
Microsoft.Compute
Microsoft.HybridCompute
Microsoft.Compute
Microsoft.HybridCompute
Microsoft.PolicyInsights
Microsoft.DataProtection
Microsoft.RecoveryServices
Microsoft.Resources
Microsoft.Resources
Microsoft.Management/managementGroups
Microsoft.Resources/subscriptions
Microsoft.Resources/subscriptions/resourcegroups
Microsoft.Security
Microsoft.ServiceFabric
Microsoft.ResourceHealth/events
Microsoft.Compute
Microsoft.Support
Microsoft.Resources/tagnamespaces
For a list of tables that includes resource types, go toAzure Resource Graph table and resource type reference.
Note
Resourcesis the default table. While querying theResourcestable, it isn't required to
provide the table name unlessjoinorunionare used. But the recommended practice is to
always include the initial table in the query.
Resources
Resources
join
union
To discover which resource types are available in each table, use Resource Graph Explorer in the portal. As an alternative, use a query such as<tableName> | distinct typeto get a list of resource types the given Resource Graph table supports that exist in your environment.
<tableName> | distinct type
The following query shows a simplejoin. The query result blends the columns together and any
duplicate column names from the joined table,ResourceContainersin this example, are appended
with1. AsResourceContainerstable has types for both subscriptions and resource groups,
either type might be used to join to the resource fromResourcestable.
join
Resources
Resources
| join ResourceContainers on subscriptionId
| limit 1
Resources
| join ResourceContainers on subscriptionId
| limit 1
The following query shows a more complex use ofjoin. First, the query usesprojectto get the
fields fromResourcesfor the Azure Key Vault vaults resource type. The next step usesjointo
merge the results withResourceContainerswhere the type is a subscriptionona property that is
both in the first table'sprojectand the joined table'sproject. The field rename avoidsjoinadding it asname1since the property already is projected fromResources. The query result is a
single key vault displaying type, the name, location, and resource group of the key vault, along
with the name of the subscription it's in.
join
project
Resources
join
project
project
join
Resources
Resources
| where type == 'microsoft.keyvault/vaults'
| project name, type, location, subscriptionId, resourceGroup
| join (ResourceContainers | where type=='microsoft.resources/subscriptions' | project SubName=name, subscriptionId) on subscriptionId
| project type, name, location, resourceGroup, SubName
| limit 1
Resources
| where type == 'microsoft.keyvault/vaults'
| project name, type, location, subscriptionId, resourceGroup
| join (ResourceContainers | where type=='microsoft.resources/subscriptions' | project SubName=name, subscriptionId) on subscriptionId
| project type, name, location, resourceGroup, SubName
| limit 1
Note
When limiting thejoinresults withproject, the property used byjointo relate the two
tables,subscriptionIdin the above example, must be included inproject.
join
project
join
project
Extended properties
As apreviewfeature, some of the resource types in Resource Graph have more type-related
properties available to query beyond the properties provided by Azure Resource Manager. This set of
values, known asextended properties, exists on a supported resource type inproperties.extended. To show resource types withextended properties, use the following
query:
properties.extended
Resources
| where isnotnull(properties.extended)
| distinct type
| order by type asc
Resources
| where isnotnull(properties.extended)
| distinct type
| order by type asc
Example: Get count of virtual machines byinstanceView.powerState.code:
instanceView.powerState.code
Resources
| where type == 'microsoft.compute/virtualmachines'
| summarize count() by tostring(properties.extended.instanceView.powerState.code)
Resources
| where type == 'microsoft.compute/virtualmachines'
| summarize count() by tostring(properties.extended.instanceView.powerState.code)
Resource Graph custom language elements
Shared query syntax (preview)
As a preview feature, ashared querycan be accessed directly
in a Resource Graph query. This scenario makes it possible to create standard queries as shared
queries and reuse them. To call a shared query inside a Resource Graph query, use the{{shared-query-uri}}syntax. The URI of the shared query is theResource IDof the shared query
on theSettingspage for that query. In this example, our shared query URI is/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/SharedQueries/providers/Microsoft.ResourceGraph/queries/Count VMs by OS.
This URI points to the subscription, resource group, and full name of the shared query we want to
reference in another query. This query is the same as the one created inTutorial: Create and share a query.
{{shared-query-uri}}
/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/SharedQueries/providers/Microsoft.ResourceGraph/queries/Count VMs by OS
Note
You can't save a query that references a shared query as a shared query.
Example 1: Use only the shared query:
The results of this Resource Graph query are the same as the query stored in the shared query.
{{/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/SharedQueries/providers/Microsoft.ResourceGraph/queries/Count VMs by OS}}
{{/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/SharedQueries/providers/Microsoft.ResourceGraph/queries/Count VMs by OS}}
Example 2: Include the shared query as part of a larger query:
This query first uses the shared query, and then useslimitto further restrict the results.
limit
{{/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/SharedQueries/providers/Microsoft.ResourceGraph/queries/Count VMs by OS}}
| where properties_storageProfile_osDisk_osType =~ 'Windows'
{{/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/SharedQueries/providers/Microsoft.ResourceGraph/queries/Count VMs by OS}}
| where properties_storageProfile_osDisk_osType =~ 'Windows'
Supported KQL language elements
Resource Graph supports a subset of KQLdata types,scalar functions,scalar operators, andaggregation functions. Specifictabular operatorsare supported by Resource Graph, some of which have different behaviors.
Supported tabular/top level operators
Here's the list of KQL tabular operators supported by Resource Graph with specific samples:
join
join
join
join
join
take
mv-expand
mv-expand
sort
parse
order
limit
| union [kind= inner|outer] [withsource=ColumnName] Table
union
union
There's a default limit of threejoinand threemv-expandoperators in a single Resource Graph SDK query. You can request an increase in these limits for your tenant throughHelp + support.
join
mv-expand
To support theOpen Queryportal experience, Azure Resource Graph Explorer has a higher global limit than Resource Graph SDK.
Note
You can't reference a table as right table multiple times, which exceeds the limit of 1. If you do so, you would receive an error with code DisallowedMaxNumberOfRemoteTables.
Query scope
The scope of the subscriptions ormanagement groupsfrom
which resources are returned by a query defaults to a list of subscriptions based on the context of
the authorized user. If a management group or a subscription list isn't defined, the query scope is
all resources, and includesAzure Lighthousedelegated
resources.
The list of subscriptions or management groups to query can be manually defined to change the scope
of the results. For example, the REST APImanagementGroupsproperty takes the management group ID,
which is different from the name of the management group. WhenmanagementGroupsis specified,
resources from the first 10,000 subscriptions in or under the specified management group hierarchy
are included.managementGroupscan't be used at the same time assubscriptions.
managementGroups
managementGroups
managementGroups
subscriptions
Example: Query all resources within the hierarchy of the management group namedMy Management Groupwith IDmyMG.
My Management Group
myMG
REST API URIPOST https://management.azure.com/providers/Microsoft.ResourceGraph/resources?api-version=2021-03-01
REST API URI
POST https://management.azure.com/providers/Microsoft.ResourceGraph/resources?api-version=2021-03-01
POST https://management.azure.com/providers/Microsoft.ResourceGraph/resources?api-version=2021-03-01
Request Body{
  "query": "Resources | summarize count()",
  "managementGroups": ["myMG"]
}
Request Body
{
  "query": "Resources | summarize count()",
  "managementGroups": ["myMG"]
}
{
  "query": "Resources | summarize count()",
  "managementGroups": ["myMG"]
}
TheAuthorizationScopeFilterparameter enables you to list Azure Policy assignments and Azure role-based access control (Azure RBAC) role assignments in theAuthorizationResourcestable that are inherited from upper scopes. TheAuthorizationScopeFilterparameter accepts the following values for thePolicyResourcesandAuthorizationResourcestables:
AuthorizationScopeFilter
AuthorizationResources
AuthorizationScopeFilter
PolicyResources
AuthorizationResources
AtScopeAndBelow(default if not specified): Returns assignments for the given scope and all child scopes.
AtScopeAndAbove: Returns assignments for the given scope and all parent scopes, but not child scopes.
AtScopeAboveAndBelow: Returns assignments for the given scope, all parent scopes, and all child scopes.
AtScopeExact: Returns assignments only for the given scope; no parent or child scopes are included.
Note
To use theAuthorizationScopeFilterparameter, be sure to use the2021-06-01-previewor later API version in your requests.
AuthorizationScopeFilter
Example: Get all policy assignments at themyMGmanagement group and Tenant Root (parent) scopes.
REST API URIPOST https://management.azure.com/providers/Microsoft.ResourceGraph/resources?api-version=2021-06-01-preview
REST API URI
POST https://management.azure.com/providers/Microsoft.ResourceGraph/resources?api-version=2021-06-01-preview
POST https://management.azure.com/providers/Microsoft.ResourceGraph/resources?api-version=2021-06-01-preview
Request Body Sample{
  "options": {
    "authorizationScopeFilter": "AtScopeAndAbove"
  },
  "query": "PolicyResources | where type =~ 'Microsoft.Authorization/PolicyAssignments'",
  "managementGroups": ["myMG"]
}
Request Body Sample
{
  "options": {
    "authorizationScopeFilter": "AtScopeAndAbove"
  },
  "query": "PolicyResources | where type =~ 'Microsoft.Authorization/PolicyAssignments'",
  "managementGroups": ["myMG"]
}
{
  "options": {
    "authorizationScopeFilter": "AtScopeAndAbove"
  },
  "query": "PolicyResources | where type =~ 'Microsoft.Authorization/PolicyAssignments'",
  "managementGroups": ["myMG"]
}
Example: Get all policy assignments at themySubscriptionIdsubscription, management group, and Tenant Root scopes.
REST API URIPOST https://management.azure.com/providers/Microsoft.ResourceGraph/resources?api-version=2021-06-01-preview
REST API URI
POST https://management.azure.com/providers/Microsoft.ResourceGraph/resources?api-version=2021-06-01-preview
POST https://management.azure.com/providers/Microsoft.ResourceGraph/resources?api-version=2021-06-01-preview
Request Body Sample{
  "options": {
    "authorizationScopeFilter": "AtScopeAndAbove"
  },
  "query": "PolicyResources | where type =~ 'Microsoft.Authorization/PolicyAssignments'",
  "subscriptions": ["mySubscriptionId"]
}
Request Body Sample
{
  "options": {
    "authorizationScopeFilter": "AtScopeAndAbove"
  },
  "query": "PolicyResources | where type =~ 'Microsoft.Authorization/PolicyAssignments'",
  "subscriptions": ["mySubscriptionId"]
}
{
  "options": {
    "authorizationScopeFilter": "AtScopeAndAbove"
  },
  "query": "PolicyResources | where type =~ 'Microsoft.Authorization/PolicyAssignments'",
  "subscriptions": ["mySubscriptionId"]
}
Escape characters
Some property names, such as those that include a.or$, must be wrapped or escaped in the
query or the property name is interpreted incorrectly and doesn't provide the expected results.
.
$
Dot (.): Wrap the property name['propertyname.withaperiod']using brackets.Example query that wraps the propertyodata.type:where type=~'Microsoft.Insights/alertRules' | project name, properties.condition.['odata.type']
Dot (.): Wrap the property name['propertyname.withaperiod']using brackets.
.
['propertyname.withaperiod']
Example query that wraps the propertyodata.type:
where type=~'Microsoft.Insights/alertRules' | project name, properties.condition.['odata.type']
where type=~'Microsoft.Insights/alertRules' | project name, properties.condition.['odata.type']
Dollar sign ($): Escape the character in the property name. The escape character used depends on the shell that runs Resource Graph.Bash: Use a backslash (\) as the escape character.Example query that escapes the property$typein Bash:where type=~'Microsoft.Insights/alertRules' | project name, properties.condition.\$typecmd: Don't escape the dollar sign ($) character.PowerShell: Use a backtick (`) as the escape character.Example query that escapes the property$typein PowerShell:where type=~'Microsoft.Insights/alertRules' | project name, properties.condition.`$type
Dollar sign ($): Escape the character in the property name. The escape character used depends on the shell that runs Resource Graph.
$
Bash: Use a backslash (\) as the escape character.Example query that escapes the property$typein Bash:where type=~'Microsoft.Insights/alertRules' | project name, properties.condition.\$type
Bash: Use a backslash (\) as the escape character.
\
Example query that escapes the property$typein Bash:
where type=~'Microsoft.Insights/alertRules' | project name, properties.condition.\$type
where type=~'Microsoft.Insights/alertRules' | project name, properties.condition.\$type
cmd: Don't escape the dollar sign ($) character.
cmd: Don't escape the dollar sign ($) character.
$
PowerShell: Use a backtick (`) as the escape character.Example query that escapes the property$typein PowerShell:where type=~'Microsoft.Insights/alertRules' | project name, properties.condition.`$type
PowerShell: Use a backtick (`) as the escape character.
`
Example query that escapes the property$typein PowerShell:
where type=~'Microsoft.Insights/alertRules' | project name, properties.condition.`$type
where type=~'Microsoft.Insights/alertRules' | project name, properties.condition.`$type
Next steps
Azure Resource Graph query languageStarter queriesandAdvanced queries.
Learn more about how toexplore Azure resources.
Feedback
Was this page helpful?
Additional resources