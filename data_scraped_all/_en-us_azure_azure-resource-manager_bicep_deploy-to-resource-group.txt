Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Use Bicep to deploy resources to resource groups
Article
2025-03-27
5 contributors
In this article
This article describes how to set scope with Bicep when deploying to a resource group. For more information, seeUnderstand scope.
Supported resources
Most resources can be deployed to a resource group. For a list of available resources, reference the guidance forARM templates.
Set scope
A Bicep file is scoped to the resource group by default. If you want to explicitly set the scope, use:
targetScope = 'resourceGroup'
targetScope = 'resourceGroup'
However, setting the target scope to resource group isn't necessary because that scope is used by default.
Deployment commands
To deploy to a resource group, use the resource group deployment commands.
Azure CLI
Azure PowerShell
For Azure CLI, useaz deployment group create. The following example deploys a template to create a resource group. The resource group you specify in the--resource-groupparameter is thetarget resource group.
--resource-group
az deployment group create \
  --name demoRGDeployment \
  --resource-group ExampleGroup \
  --template-file main.bicep \
  --parameters storageAccountType=Standard_GRS
az deployment group create \
  --name demoRGDeployment \
  --resource-group ExampleGroup \
  --template-file main.bicep \
  --parameters storageAccountType=Standard_GRS
For the PowerShell deployment command, useNew-AzResourceGroupDeployment. The following example deploys a template to create a resource group. The resource group you specify in the-ResourceGroupNameparameter is thetarget resource group.
-ResourceGroupName
New-AzResourceGroupDeployment `
  -Name demoRGDeployment `
  -ResourceGroupName ExampleGroup `
  -TemplateFile main.bicep `
  -storageAccountType Standard_GRS `
New-AzResourceGroupDeployment `
  -Name demoRGDeployment `
  -ResourceGroupName ExampleGroup `
  -TemplateFile main.bicep `
  -storageAccountType Standard_GRS `
For more information about deployment commands and options for deploying ARM templates, see:
How to use Azure Resource Manager (ARM) deployment templates with Azure CLI
Deploy resources with ARM templates and Azure PowerShell
Deploy ARM templates from Cloud Shell
Deployment scopes
In a Bicep file, all resources declared with theresourcekeyword must be deployed at the same scope as the deployment. For a resource group deployment, this means allresourcedeclarations in the Bicep file must be deployed to the same resource group or as a child or extension resource of a resource in the same resource group as the deployment.
resource
resource
However, this restriction doesn't apply toexistingresources. You can reference existing resources at a different scope than the deployment.
existing
To deploy resources at multiple scopes within a single deployment, usemodules. Deploying a module triggers a nested deployment, allowing you to target different scopes. The user deploying the parent Bicep file must have the necessary permissions to initiate deployments at those scopes.
You can deploy a resource from within a resource-group-scope Bicep file at the following scopes:
The same resource group
Other resource groups in the same subscription
Other resource groups in other subscriptions
The subscription
The tenant
Scope to target resource group
To deploy resources to the target resource group, add those resources to the Bicep file.
// resource deployed to target resource group
resource exampleResource 'Microsoft.Storage/storageAccounts@2023-04-01' = {
  ...
}
// resource deployed to target resource group
resource exampleResource 'Microsoft.Storage/storageAccounts@2023-04-01' = {
  ...
}
For an example template, seeDeploy to target resource group.
Scope to different resource group
To deploy resources to a resource group that isn't the target resource group, add amodule. Use theresourceGroupfunctionto set thescopeproperty for that module.
resourceGroup
scope
If the resource group is in a different subscription, provide the subscription ID and the name of the resource group. If the resource group is in the same subscription as the current deployment, provide only the name of the resource group. If you don't specify a subscription in theresourceGroupfunction, the current subscription is used.
resourceGroup
The following example shows a module that targets a resource group in a different subscription:
param otherResourceGroup string
param otherSubscriptionID string

// module deployed to different subscription and resource group
module exampleModule 'module.bicep' = {
  name: 'otherSubAndRG'
  scope: resourceGroup(otherSubscriptionID, otherResourceGroup)
}
param otherResourceGroup string
param otherSubscriptionID string

// module deployed to different subscription and resource group
module exampleModule 'module.bicep' = {
  name: 'otherSubAndRG'
  scope: resourceGroup(otherSubscriptionID, otherResourceGroup)
}
The next example shows a module that targets a resource group in the same subscription:
param otherResourceGroup string

// module deployed to resource group in the same subscription
module exampleModule 'module.bicep' = {
  name: 'otherRG'
  scope: resourceGroup(otherResourceGroup)
}
param otherResourceGroup string

// module deployed to resource group in the same subscription
module exampleModule 'module.bicep' = {
  name: 'otherRG'
  scope: resourceGroup(otherResourceGroup)
}
For an example template, seeDeploy to multiple resource groups.
Scope to subscription
To deploy resources to a subscription, add a module. Use the [subscriptionfunction](bicep-functions-scope.md#subscription) to set itsscope` property.
To deploy resources to a subscription, add a module. Use the [
function](bicep-functions-scope.md#subscription) to set its
To deploy to the current subscription, use thesubscriptionfunction without a parameter.
subscription
// module deployed at subscription level
module exampleModule 'module.bicep' = {
  name: 'deployToSub'
  scope: subscription()
}
// module deployed at subscription level
module exampleModule 'module.bicep' = {
  name: 'deployToSub'
  scope: subscription()
}
To deploy to a different subscription, specify that subscription ID as a parameter in thesubscriptionfunction.
subscription
param otherSubscriptionID string

// module deployed at subscription level but in a different subscription
module exampleModule 'module.bicep' = {
  name: 'deployToSub'
  scope: subscription(otherSubscriptionID)
}
param otherSubscriptionID string

// module deployed at subscription level but in a different subscription
module exampleModule 'module.bicep' = {
  name: 'deployToSub'
  scope: subscription(otherSubscriptionID)
}
Scope to tenant
To create resources at the tenant, add a module. Use thetenantfunctionto set itsscopeproperty.
tenant
scope
The user deploying the template must have therequired access to deploy at the tenant.
The following example includes a module that deploys to the tenant:
// module deployed at tenant level
module exampleModule 'module.bicep' = {
  name: 'deployToTenant'
  scope: tenant()
}
// module deployed at tenant level
module exampleModule 'module.bicep' = {
  name: 'deployToTenant'
  scope: tenant()
}
Instead of using a module, you can set the scope totenant()for some resource types. The following example deploys a management group at the tenant:
tenant()
param mgName string = 'mg-${uniqueString(newGuid())}'

// ManagementGroup deployed at tenant
resource managementGroup 'Microsoft.Management/managementGroups@2023-04-01' = {
  scope: tenant()
  name: mgName
  properties: {}
}

output output string = mgName
param mgName string = 'mg-${uniqueString(newGuid())}'

// ManagementGroup deployed at tenant
resource managementGroup 'Microsoft.Management/managementGroups@2023-04-01' = {
  scope: tenant()
  name: mgName
  properties: {}
}

output output string = mgName
For more information, seeManagement group.
Deploy to target resource group
To deploy resources in the target resource group, define those resources in theresourcessection of the template. The following template creates a storage account in the resource group that's specified in the deployment operation:
resources
@minLength(3)
@maxLength(11)
param storagePrefix string

@allowed([
  'Standard_LRS'
  'Standard_GRS'
  'Standard_RAGRS'
  'Standard_ZRS'
  'Premium_LRS'
  'Premium_ZRS'
  'Standard_GZRS'
  'Standard_RAGZRS'
])
param storageSKU string = 'Standard_LRS'

param location string = resourceGroup().location

var uniqueStorageName = '${storagePrefix}${uniqueString(resourceGroup().id)}'

resource stg 'Microsoft.Storage/storageAccounts@2023-04-01' = {
  name: uniqueStorageName
  location: location
  sku: {
    name: storageSKU
  }
  kind: 'StorageV2'
  properties: {
    supportsHttpsTrafficOnly: true
  }
}

output storageEndpoint object = stg.properties.primaryEndpoints
@minLength(3)
@maxLength(11)
param storagePrefix string

@allowed([
  'Standard_LRS'
  'Standard_GRS'
  'Standard_RAGRS'
  'Standard_ZRS'
  'Premium_LRS'
  'Premium_ZRS'
  'Standard_GZRS'
  'Standard_RAGZRS'
])
param storageSKU string = 'Standard_LRS'

param location string = resourceGroup().location

var uniqueStorageName = '${storagePrefix}${uniqueString(resourceGroup().id)}'

resource stg 'Microsoft.Storage/storageAccounts@2023-04-01' = {
  name: uniqueStorageName
  location: location
  sku: {
    name: storageSKU
  }
  kind: 'StorageV2'
  properties: {
    supportsHttpsTrafficOnly: true
  }
}

output storageEndpoint object = stg.properties.primaryEndpoints
Deploy to multiple resource groups
You can deploy to more than one resource group in one Bicep file.
Note
You can deploy up to800 resource groupsin one deployment. Typically, this limitation means you can deploy to one resource group specified for the parent template and up to 799 resource groups in nested or linked deployments. However, if your parent template contains only nested or linked templates and doesn't itself deploy any resources, then you can include up to 800 resource groups in nested or linked deployments.
The following example deploys two storage accounts. The first storage account is deployed to the resource group specified in the deployment operation. The second storage account is deployed to the resource group specified in thesecondResourceGroupandsecondSubscriptionIDparameters:
secondResourceGroup
secondSubscriptionID
@maxLength(11)
param storagePrefix string

param firstStorageLocation string = resourceGroup().location

param secondResourceGroup string
param secondSubscriptionID string = ''
param secondStorageLocation string

var firstStorageName = '${storagePrefix}${uniqueString(resourceGroup().id)}'
var secondStorageName = '${storagePrefix}${uniqueString(secondSubscriptionID, secondResourceGroup)}'

module firstStorageAcct 'storage.bicep' = {
  name: 'storageModule1'
  params: {
    storageLocation: firstStorageLocation
    storageName: firstStorageName
  }
}

module secondStorageAcct 'storage.bicep' = {
  name: 'storageModule2'
  scope: resourceGroup(secondSubscriptionID, secondResourceGroup)
  params: {
    storageLocation: secondStorageLocation
    storageName: secondStorageName
  }
}
@maxLength(11)
param storagePrefix string

param firstStorageLocation string = resourceGroup().location

param secondResourceGroup string
param secondSubscriptionID string = ''
param secondStorageLocation string

var firstStorageName = '${storagePrefix}${uniqueString(resourceGroup().id)}'
var secondStorageName = '${storagePrefix}${uniqueString(secondSubscriptionID, secondResourceGroup)}'

module firstStorageAcct 'storage.bicep' = {
  name: 'storageModule1'
  params: {
    storageLocation: firstStorageLocation
    storageName: firstStorageName
  }
}

module secondStorageAcct 'storage.bicep' = {
  name: 'storageModule2'
  scope: resourceGroup(secondSubscriptionID, secondResourceGroup)
  params: {
    storageLocation: secondStorageLocation
    storageName: secondStorageName
  }
}
Both modules use the same Bicep file namedstorage.bicep:
param storageLocation string
param storageName string

resource storageAcct 'Microsoft.Storage/storageAccounts@2023-04-01' = {
  name: storageName
  location: storageLocation
  sku: {
    name: 'Standard_LRS'
  }
  kind: 'Storage'
  properties: {}
}
param storageLocation string
param storageName string

resource storageAcct 'Microsoft.Storage/storageAccounts@2023-04-01' = {
  name: storageName
  location: storageLocation
  sku: {
    name: 'Standard_LRS'
  }
  kind: 'Storage'
  properties: {}
}
Create resource group
For an example template and more information about creating resource groups, seeCreate resource group with Bicep.
Next steps
To learn about other scopes, see:
Subscription deployments
Management group deployments
Tenant deployments
Feedback
Was this page helpful?
Additional resources