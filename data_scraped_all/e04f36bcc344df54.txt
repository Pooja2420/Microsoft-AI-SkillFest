Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Use variables in Classic release pipelines
Article
2024-08-16
15 contributors
In this article
Azure DevOps Services | Azure DevOps Server 2022 - Azure DevOps Server 2019
Using variables in Classic release pipelines is a convenient way to exchange and transport data throughout your pipeline. Each variable is stored as a string and its value can change between pipeline runs.
UnlikeRuntime parameters, which are only available at template parsing time, variables in Classic release pipelines are accessible throughout the entire deployment process
When setting up tasks to deploy your application in each stage of your Classic release pipeline, variables can help you:
Simplify customization: Define a generic deployment pipeline once and easily adapt it for different stages. For instance, use a variable to represent a web deployment's connection string, adjusting its value as needed for each stage. These are known ascustom variables.
Simplify customization: Define a generic deployment pipeline once and easily adapt it for different stages. For instance, use a variable to represent a web deployment's connection string, adjusting its value as needed for each stage. These are known ascustom variables.
Leverage contextual information: Access details about the release context, such as astage, anartifact, or theagentrunning the deployment. For example, your scripts might require the build location for download, or the agent's working directory to create temporary files. These are referred to asdefault variables.
Leverage contextual information: Access details about the release context, such as astage, anartifact, or theagentrunning the deployment. For example, your scripts might require the build location for download, or the agent's working directory to create temporary files. These are referred to asdefault variables.
Note
For YAML pipelines, seeuser-defined variablesandpredefined variablesfor more details.
Default variables
Default variables provide essential information about the execution context to your running tasks and scripts. These variables allow you to access details about thesystem,release,stage, oragentin which they are running.
With the exception ofSystem.Debug, default variables are read-only, with their values automatically set by the system.
Some of the most significant variables are described in the following tables. To view the full list, seeView the current values of all variables.
System variables
https://fabrikam.vsrm.visualstudio.com/
https://dev.azure.com/fabrikam/
6c6f3423-1c84-4625-995a-f7f143a1e43d
1
Fabrikam
79f5c12e-3337-4151-be41-a268d2c73344
C:\agent\_work\r1\a
C:\agent\_work\r1\a
C:\agent\_work
true
Release variables
1
1
1
fabrikam-cd
Mateo Escobedo
mateo@fabrikam.com
2f435d07-769f-4e46-849d-10d1ab9ba6ab
254
127
276
Dev
vstfs://ReleaseManagement/Environment/276
InProgress
fabrikam\_web
ContinuousIntegration
Manual
None
Schedule
Critical security patch
118
Release-47
vstfs://ReleaseManagement/Release/118
https://dev.azure.com/fabrikam/f3325c6c/_release?releaseId=392&_a=release-summary
Mateo Escobedo
mateo@fabrikam.com
2f435d07-769f-4e46-849d-10d1ab9ba6ab
FALSE
fabrikam\_app
Release-stage variables
NotStarted
Agent variables
fabrikam-agent
fabrikam-agent
2.109.1
Release
C:\agent
C:\agent\_work\r1\a
C:\agent\_work
C:\agent\_work
1
Release Artifacts variables
For each artifact that is referenced in a release, you can use the following artifact variables. Note that not all variables apply to every artifact type. The table below lists default artifact variables and provides examples of their values based on the artifact type. If an example is empty, it indicates that the variable is not applicable for that artifact type.
Replace the{alias}placeholder with the value you specified for theartifact source aliasor with the default value generated for the release pipeline.
{alias}
1
fabrikam/asp
fabrikam-ci
$/fabrikam
fabrikam
fabrikam/asp (main)
20170112.1
20170112.1
Changeset 3
38629c964
38629c964
130
130
38629c964d21fe405ef830b7d0220966b82c9e11
vstfs://build-release/Build/130
https://github.com/fabrikam/asp
refs/heads/main
main
bc0044458ba1d9298cdc649cb5dcf013180706f7
Git
2f435d07-769f-4e46-849d-10d1ab9ba6ab
Mateo Escobedo
Build
Jenkins
TFVC
Git
GitHub
refs/heads/main
main
Primary Artifact variables
In Classic release pipelines, if you are using multiple artifacts, you can designate one as the primary artifact. Azure Pipelines will then populate the following variables for the designated primary artifact.
Use default variables
You can use the default variables in two ways: as parameters to tasks in a release pipeline or within your scripts.
You can use a default variable directly as an input to a task. For example, to passRelease.Artifacts.{Artifact alias}.DefinitionNameas an argument to a PowerShell task for an artifact withASPNET4.CIas its alias, you would use$(Release.Artifacts.ASPNET4.CI.DefinitionName).
Release.Artifacts.{Artifact alias}.DefinitionName
$(Release.Artifacts.ASPNET4.CI.DefinitionName)

To use a default variable in your script, you must first replace the.in the default variable names with_. For example, to print the value ofRelease.Artifacts.{Artifact alias}.DefinitionNamefor an artifact withASPNET4.CIas its alias in a PowerShell script, use$env:RELEASE_ARTIFACTS_ASPNET4_CI_DEFINITIONNAME. Note that the original alias,ASPNET4.CI, is replaced withASPNET4_CI.
.
_
Release.Artifacts.{Artifact alias}.DefinitionName
$env:RELEASE_ARTIFACTS_ASPNET4_CI_DEFINITIONNAME

Custom variables
Custom variables can be defined at various scopes.
Variable Groups: Use variable groups to share values across all definitions in a project. This is useful when you want to use the same values throughout definitions, stages, and tasks within a project, and manage them from a single location. Define and manage variable groups in thePipelines>Library.
Variable Groups: Use variable groups to share values across all definitions in a project. This is useful when you want to use the same values throughout definitions, stages, and tasks within a project, and manage them from a single location. Define and manage variable groups in thePipelines>Library.
Release Pipeline Variables: Use release pipeline variables to share values across all stages within a release pipeline. This is ideal for scenarios where you need a consistent value across stages and tasks, with the ability to update it from a single location. Define and manage these variables in theVariablestab of the release pipeline. In the Pipeline Variables page, set theScopedrop-down list toReleasewhen adding a variable.
Release Pipeline Variables: Use release pipeline variables to share values across all stages within a release pipeline. This is ideal for scenarios where you need a consistent value across stages and tasks, with the ability to update it from a single location. Define and manage these variables in theVariablestab of the release pipeline. In the Pipeline Variables page, set theScopedrop-down list toReleasewhen adding a variable.
Stage Variables: Use stage variables to share values within a specific stage of a release pipeline. This is useful for values that differ from stage to stage but are consistent across all tasks within a stage. Define and manage these variables in theVariablestab of the release pipeline. In the Pipeline Variables page, set theScopedrop-down list to appropriate environment when adding a variable.
Stage Variables: Use stage variables to share values within a specific stage of a release pipeline. This is useful for values that differ from stage to stage but are consistent across all tasks within a stage. Define and manage these variables in theVariablestab of the release pipeline. In the Pipeline Variables page, set theScopedrop-down list to appropriate environment when adding a variable.
Using custom variables at the project, release pipeline, and stage levels helps you to:
Avoid duplicating values, making it easier to update all occurrences with a single change.
Avoid duplicating values, making it easier to update all occurrences with a single change.
Secure sensitive values by preventing them from being viewed or modified by users. To mark a variable as secure (secret), select theicon next to the variable.ImportantThe values of the hidden variables (secret) are securely stored on the server and cannot be viewed by users after they are saved. During deployment, Azure Pipelines decrypts these values when referenced by tasks and passes them to the agent over a secure HTTPS channel.
Secure sensitive values by preventing them from being viewed or modified by users. To mark a variable as secure (secret), select theicon next to the variable.
Important
The values of the hidden variables (secret) are securely stored on the server and cannot be viewed by users after they are saved. During deployment, Azure Pipelines decrypts these values when referenced by tasks and passes them to the agent over a secure HTTPS channel.
Note
Creating custom variables can overwrite standard variables. For example, if you define a customPathvariable on a Windows agent, it will overwrite the$env:Pathvariable, which may prevent PowerShell from running properly.
Use custom variables
To use custom variables in your tasks, enclose the variable name in parentheses and precede it with a$character. For example, if you have a variable namedadminUserName, you can insert its current value into a task as$(adminUserName).
$(adminUserName)
Note
Variables from different groups linked to a pipeline at the same scope (e.g., job or stage) may conflict, leading to unpredictable results. To avoid this, ensure that variables across all your variable groups have unique names.
To define or modify a variable from a script, use thetask.setvariablelogging command. The updated variable value is scoped to the job being executed and doesn't persist across jobs or stages. Note that variable names are transformed to uppercase, with "." and " " replaced with "_".
task.setvariable
For example,Agent.WorkFolderbecomesAGENT_WORKFOLDER.
Agent.WorkFolder
AGENT_WORKFOLDER
On Windows, access this variable as%AGENT_WORKFOLDER%or$env:AGENT_WORKFOLDER.
%AGENT_WORKFOLDER%
$env:AGENT_WORKFOLDER
On Linux and macOS, use$AGENT_WORKFOLDER.
$AGENT_WORKFOLDER
Tip
You can run a script on:
AWindows agentusing either aBatch script taskorPowerShell task.
AmacOSorLinuxagent using aShell script task.
Batch
PowerShell
Shell
Batch script
Set thesauceandsecret.Saucevariables
sauce
secret.Sauce
@echo ##vso[task.setvariable variable=sauce]crushed tomatoes
@echo ##vso[task.setvariable variable=secret.Sauce;issecret=true]crushed tomatoes with garlic
@echo ##vso[task.setvariable variable=sauce]crushed tomatoes
@echo ##vso[task.setvariable variable=secret.Sauce;issecret=true]crushed tomatoes with garlic
Read the variables
Arguments
"$(sauce)" "$(secret.Sauce)"
"$(sauce)" "$(secret.Sauce)"
Script
@echo off
set sauceArgument=%~1
set secretSauceArgument=%~2
@echo No problem reading %sauceArgument% or %SAUCE%
@echo But I cannot read %SECRET_SAUCE%
@echo But I can read %secretSauceArgument% (but the log is redacted so I do not spoil the secret)
@echo off
set sauceArgument=%~1
set secretSauceArgument=%~2
@echo No problem reading %sauceArgument% or %SAUCE%
@echo But I cannot read %SECRET_SAUCE%
@echo But I can read %secretSauceArgument% (but the log is redacted so I do not spoil the secret)
PowerShell script
Set thesauceandsecret.Saucevariables
sauce
secret.Sauce
Write-Host "##vso[task.setvariable variable=sauce]crushed tomatoes"
Write-Host "##vso[task.setvariable variable=secret.Sauce;issecret=true]crushed tomatoes with
            garlic"
Write-Host "##vso[task.setvariable variable=sauce]crushed tomatoes"
Write-Host "##vso[task.setvariable variable=secret.Sauce;issecret=true]crushed tomatoes with
            garlic"
Read the variables
Arguments
-sauceArgument "$(sauce)" -secretSauceArgument "$(secret.Sauce)"
-sauceArgument "$(sauce)" -secretSauceArgument "$(secret.Sauce)"
Script
Param(
   [string]$sauceArgument,
   [string]$secretSauceArgument
)
Write-Host No problem reading $env:SAUCE or $sauceArgument
Write-Host But I cannot read $env:SECRET_SAUCE
Write-Host But I can read $secretSauceArgument "(but the log is redacted so I do not spoil the secret)"
Param(
   [string]$sauceArgument,
   [string]$secretSauceArgument
)
Write-Host No problem reading $env:SAUCE or $sauceArgument
Write-Host But I cannot read $env:SECRET_SAUCE
Write-Host But I can read $secretSauceArgument "(but the log is redacted so I do not spoil the secret)"
Inline PowerShell script
Use thesauceandsecret.Saucevariables in an inline script.
sauce
secret.Sauce
- pwsh: |
      Write-Host No problem reading $(sauce)
      Write-Host But I cannot read $env:SECRET_SAUCE
      Write-Host But I can read $(secret.Sauce) "(but the log is redacted so I do not spoil the secret)"
- pwsh: |
      Write-Host No problem reading $(sauce)
      Write-Host But I cannot read $env:SECRET_SAUCE
      Write-Host But I can read $(secret.Sauce) "(but the log is redacted so I do not spoil the secret)"
Set thesauceandsecret.Saucevariables
sauce
secret.Sauce
#!/bin/bash
echo "##vso[task.setvariable variable=sauce]crushed tomatoes"
echo "##vso[task.setvariable variable=secret.Sauce;issecret=true]crushed tomatoes with garlic"
#!/bin/bash
echo "##vso[task.setvariable variable=sauce]crushed tomatoes"
echo "##vso[task.setvariable variable=secret.Sauce;issecret=true]crushed tomatoes with garlic"
Read the variables
Arguments
"$(sauce)" "$(secret.Sauce)"
"$(sauce)" "$(secret.Sauce)"
Script
#!/bin/bash
echo "No problem reading $SAUCE"
echo "But I cannot read $SECRET_SAUCE"
#!/bin/bash
echo "No problem reading $SAUCE"
echo "But I cannot read $SECRET_SAUCE"
Console output from reading the variables:
No problem reading crushed tomatoes or crushed tomatoes
But I cannot read 
But I can read ******** (but the log is redacted so I do not spoil the secret)
No problem reading crushed tomatoes or crushed tomatoes
But I cannot read 
But I can read ******** (but the log is redacted so I do not spoil the secret)
View the current values of all variables
SelectPipelines>Releases, and then select your release pipeline.
SelectPipelines>Releases, and then select your release pipeline.
Open the summary view for your release, and select the stage you're interested in. In the list of steps, chooseInitialize job.
Open the summary view for your release, and select the stage you're interested in. In the list of steps, chooseInitialize job.

This opens the logs for this step. Scroll down to see the values used by the agent for this job.
This opens the logs for this step. Scroll down to see the values used by the agent for this job.

Run a release in debug mode
Running a release in debug mode can help you diagnose and resolve issues or failures by displaying additional information during the release execution. You can enable debug mode for the entire release or just for the tasks within a specific release stage.
To enable debug mode for an entire release, add a variable namedSystem.Debugwith the valuetrueto theVariablestab of the release pipeline.
To enable debug mode for an entire release, add a variable namedSystem.Debugwith the valuetrueto theVariablestab of the release pipeline.
System.Debug
true
To enable debug mode for a specific stage, open theConfigure stagedialog from the shortcut menu of the stage, and add a variable namedSystem.Debugwith the valuetrueto theVariablestab.
To enable debug mode for a specific stage, open theConfigure stagedialog from the shortcut menu of the stage, and add a variable namedSystem.Debugwith the valuetrueto theVariablestab.
System.Debug
true
Alternatively, create avariable groupcontaining a variable namedSystem.Debugwith the valuetrue, and link this variable group to the release pipeline.
Alternatively, create avariable groupcontaining a variable namedSystem.Debugwith the valuetrue, and link this variable group to the release pipeline.
System.Debug
true
Tip
If you encounter an error related to Azure ARM service connections, seeHow to: Troubleshoot Azure Resource Manager service connectionsfor more details.
Related content
Artifact sources in Classic release pipelines
Artifact sources in Classic release pipelines
Deploy pull request Artifacts
Deploy pull request Artifacts
Use variables in a variable group
Use variables in a variable group
Feedback
Was this page helpful?
Additional resources