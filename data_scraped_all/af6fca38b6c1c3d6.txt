Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Build multiple branches in Azure Pipelines
Article
2023-06-15
12 contributors
In this article
Azure DevOps Services | Azure DevOps Server 2022 - Azure DevOps Server 2019
Using Azure Pipelines, you can create triggers to build your project on every new commit and pull request to your repository. In this article, you will learn how to enable continuous integration and set up multiple branch builds for your repository.
Prerequisites
An Azure DevOps organization and a project. Create anorganizationor aprojectif you haven't already.
An Azure DevOps organization and a project. Create anorganizationor aprojectif you haven't already.
A working pipeline. Follow the instructions inCreate your first pipelineto create your pipeline.
A working pipeline. Follow the instructions inCreate your first pipelineto create your pipeline.
Enable CI trigger for a topic branch
When working with Git, it is a common practice to create temporary branches from the main branch to facilitate a streamlined workflow. These branches, often referred to as topic or feature branches, serve the purpose of isolating your work. Within this workflow, you create a branch dedicated to a specific feature or bug fix, and once completed, you merge the code back into the main branch before deleting the topic branch.
YAML
Classic
If no trigger is explicitly specified in your YAML file, any changes made to any branch will trigger a run. To add triggers for both themainbranch and anyfeature/branches, include the following snippet in your YAML file. This will ensure that any modifications made to these branches will automatically trigger a pipeline run.
trigger:
- main
- feature/*
trigger:
- main
- feature/*
YAML builds are not yet available on TFS.
Sign in to your Azure DevOps organization, and then navigate to your project.
Sign in to your Azure DevOps organization, and then navigate to your project.
SelectPipelines, and then select your classic pipeline. SelectEditto modify your pipeline.
SelectPipelines, and then select your classic pipeline. SelectEditto modify your pipeline.
SelectTriggersand then check theEnable continuous integrationcheckbox.
SelectTriggersand then check theEnable continuous integrationcheckbox.
UnderPath filtersdropdown, typefeature/*in thePath specificationtext box to trigger on any changes to all feature branches.
UnderPath filtersdropdown, typefeature/*in thePath specificationtext box to trigger on any changes to all feature branches.
feature/*
Select theSave & queuemenu and then SelectSave.
Select theSave & queuemenu and then SelectSave.

Customize build tasks based on the branch being built
The main branch is usually responsible for generating deployable artifacts, such as binaries. For short-lived feature branches, there is no need to invest time in creating and storing these artifacts. In Azure Pipelines, you can implement custom conditions to ensure that specific tasks are executed only on the main branch.
YAML
Classic
Edit theazure-pipelines.ymlfile in yourmainbranch, and add a condition to your desired task. For example, the following snippet adds a condition to thepublish pipeline artifactstask.
- task: PublishPipelineArtifact@1
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
- task: PublishPipelineArtifact@1
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
YAML builds are not yet available on TFS.
The following example adds a custom condition to thepublish build artifactstask.
Select theControl Optionssection, and then check theEnabledcheckbox.
Select theControl Optionssection, and then check theEnabledcheckbox.
Select theRun this taskdropdown menu, and then selectCustom conditions.
Select theRun this taskdropdown menu, and then selectCustom conditions.
Enter the following snippet in theCustom conditiontext box. This task will only execute if you're building the main branch.and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
Enter the following snippet in theCustom conditiontext box. This task will only execute if you're building the main branch.
and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
SelectSave & queuewhen you're done.
SelectSave & queuewhen you're done.

Validate pull requests
To ensure branch protection, you can utilize policies that mandate successful builds prior to merging pull requests. Using Azure Pipelines, you have the flexibility to configure the requirement of a new successful build for merging changes into crucial branches like the main branch.
GitHub repository
YAML
Classic
If you don't explicitly defineprtriggers in your YAML file, pull request builds will be enabled by default for all branches. However, you have the flexibility to specify the target branches for your pull request builds. As an example, if you want to run the build exclusively for pull requests targeting themainbranch and branches starting withfeature/, you can specify the following configuration:
pr:
- main
- feature/*
pr:
- main
- feature/*
YAML builds are not yet available on TFS.
Sign in to your Azure DevOps organization, and then navigate to your project.
Sign in to your Azure DevOps organization, and then navigate to your project.
SelectPipelines, and then select your classic pipeline. SelectEditto modify your pipeline.
SelectPipelines, and then select your classic pipeline. SelectEditto modify your pipeline.
SelectTriggers, and then select thePull request validation. Check theEnable pull request validationcheckbox and ensure you have themain branchin theBranch filters.
SelectTriggers, and then select thePull request validation. Check theEnable pull request validationcheckbox and ensure you have themain branchin theBranch filters.
SelectSave & queuewhen you're done, and then selectSaveone more time.
SelectSave & queuewhen you're done, and then selectSaveone more time.

Azure Repos repository
Sign in to your Azure DevOps organization, and then navigate to your project.
Sign in to your Azure DevOps organization, and then navigate to your project.
SelectReposand then selectBranches.
SelectReposand then selectBranches.
Select the ellipsis icon to the right of your branch name, and then selectBranch policies.
Select the ellipsis icon to the right of your branch name, and then selectBranch policies.
Under theBuild validationmenu, select the + sign to add a build policy.
Under theBuild validationmenu, select the + sign to add a build policy.
Select yourBuild pipelinefrom the dropdown menu and make sure thatTriggeris set to automatic and thePolicy requirementis set to required.
Select yourBuild pipelinefrom the dropdown menu and make sure thatTriggeris set to automatic and thePolicy requirementis set to required.
Enter a descriptiveDisplay nameto describe the policy.
Enter a descriptiveDisplay nameto describe the policy.
SelectSaveto create and enable the policy. SelectSave changesat the top left of your screen to save your changes.
SelectSaveto create and enable the policy. SelectSave changesat the top left of your screen to save your changes.

To test the policy navigate toRepos>Pull requestsin the Azure DevOps portal.
To test the policy navigate toRepos>Pull requestsin the Azure DevOps portal.
SelectNew pull requestand make sure that your topic branch is set to merge into your main branch, and then SelectCreate.
SelectNew pull requestand make sure that your topic branch is set to merge into your main branch, and then SelectCreate.
On your screen, you can see the currently executing policy.
On your screen, you can see the currently executing policy.
Select thepolicy nameto examine the build. If the build succeeds your pull request will be merged. If the build fails the merge will be blocked.
Select thepolicy nameto examine the build. If the build succeeds your pull request will be merged. If the build fails the merge will be blocked.
Note
Azure Pipelines no longer supports per-pipeline retention policies. We recommend using project-level retention rules.
Related articles
Deploy from multiple branches
Deploy pull request Artifacts
Configure retention policies
Feedback
Was this page helpful?
Additional resources