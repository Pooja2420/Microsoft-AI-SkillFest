Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Check out multiple repositories in your pipeline
Article
2023-05-03
16 contributors
In this article
Azure DevOps Services | Azure DevOps Server 2022 | Azure DevOps Server 2020
Pipelines often rely on multiple repositories that contain source, tools, scripts, or other items that you need to build your code. By using multiplecheckoutsteps in your pipeline, you can fetch and check out other repositories in addition to the one you use to store your YAML pipeline.
checkout
Specify multiple repositories
Repositories can be specified as arepository resource, or inline with thecheckoutstep.
checkout
The following repository types are supported.
Azure Repos Git(git)
git
Azure DevOps Server (limited to repositories in the same organization)
Azure DevOps Services
GitHub(github)
github
Azure DevOps Services
GitHubEnterprise(githubenterprise)
githubenterprise
Azure DevOps Services
Bitbucket Cloud(bitbucket)
bitbucket
Azure DevOps Services
Important
OnlyAzure Repos Git(git) repositories in the same organization as the pipeline are supported for multi-repo checkout in Azure DevOps Server.
git
Note
Azure Pipelines providesLimit job scopesettings for Azure Repos Git repositories.
To check out Azure Repos Git repositories hosted in another project,Limit job scopemust be configured to allow access. For more information, seeLimit job authorization scope.
The following combinations ofcheckoutsteps are supported.
checkout
Nocheckoutsteps
checkout
The default behavior is as ifcheckout: selfwere the first step, and the current repository is checked out.
checkout: self
A singlecheckout: nonestep
checkout: none
No repositories are synced or checked out.
A singlecheckout: selfstep
checkout: self
The current repository is checked out.
A singlecheckoutstep that isn'tselfornone
checkout
self
none
The designated repository is checked out instead ofself.
self
Multiplecheckoutsteps
checkout
Each designated repository is checked out to a folder named after the repository, unless a differentpathis specified in thecheckoutstep. To check outselfas one of the repositories, usecheckout: selfas one of thecheckoutsteps.
path
checkout
self
checkout: self
checkout
Note
When you check out Azure Repos Git repositories other than the one containing the pipeline, you may be prompted to authorize access to that resource before the pipeline runs for the first time.
For more information, seeWhy am I prompted to authorize resources the first time I try to check out a different repository?in theFAQsection.
Repository resource definition
You must use arepository resourceif your repository type requires a service connection or other extended resources field. The following repository types require a service connection.
You may use a repository resource even if your repository type doesn't require a service connection, for example if you have a repository resource defined already for templates in a different repository.
In the following example, three repositories are declared as repository resources. TheAzure Repos Git repository in another organization,GitHub, andBitbucket Cloudrepository resources requireservice connections, which are specified as theendpointfor those repository resources. This example has fourcheckoutsteps, which checks out the three repositories declared as repository resources along with the currentselfrepository that contains the pipeline YAML.
endpoint
checkout
self
resources:
  repositories:
  - repository: MyGitHubRepo # The name used to reference this repository in the checkout step
    type: github
    endpoint: MyGitHubServiceConnection
    name: MyGitHubOrgOrUser/MyGitHubRepo
  - repository: MyBitbucketRepo
    type: bitbucket
    endpoint: MyBitbucketServiceConnection
    name: MyBitbucketOrgOrUser/MyBitbucketRepo
  - repository: MyAzureReposGitRepository # In a different organization
    endpoint: MyAzureReposGitServiceConnection
    type: git
    name: OtherProject/MyAzureReposGitRepo

trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

steps:
- checkout: self
- checkout: MyGitHubRepo
- checkout: MyBitbucketRepo
- checkout: MyAzureReposGitRepository

- script: dir $(Build.SourcesDirectory)
resources:
  repositories:
  - repository: MyGitHubRepo # The name used to reference this repository in the checkout step
    type: github
    endpoint: MyGitHubServiceConnection
    name: MyGitHubOrgOrUser/MyGitHubRepo
  - repository: MyBitbucketRepo
    type: bitbucket
    endpoint: MyBitbucketServiceConnection
    name: MyBitbucketOrgOrUser/MyBitbucketRepo
  - repository: MyAzureReposGitRepository # In a different organization
    endpoint: MyAzureReposGitServiceConnection
    type: git
    name: OtherProject/MyAzureReposGitRepo

trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

steps:
- checkout: self
- checkout: MyGitHubRepo
- checkout: MyBitbucketRepo
- checkout: MyAzureReposGitRepository

- script: dir $(Build.SourcesDirectory)
If theselfrepository is namedCurrentRepo, thescriptcommand produces the following output:CurrentRepo  MyAzureReposGitRepo  MyBitbucketRepo  MyGitHubRepo. In this example, the names of the repositories (as specified by thenameproperty in the repository resource) are used for the folders, because nopathis specified in the checkout step. For more information on repository folder names and locations, see the followingCheckout pathsection.
self
CurrentRepo
script
CurrentRepo  MyAzureReposGitRepo  MyBitbucketRepo  MyGitHubRepo
name
path
Inline syntax checkout
If your repository doesn't require a service connection, you can declare it inline with yourcheckoutstep.
checkout
Note
Only Azure Repos Git repositories in the same organization can use the inline syntax. Azure Repos Git repositories in a different organization, and other supported repository types require aservice connectionand must be declared as arepository resource.
steps:
- checkout: self
- checkout: git://MyProject/MyRepo # Azure Repos Git repository in the same organization
steps:
- checkout: self
- checkout: git://MyProject/MyRepo # Azure Repos Git repository in the same organization
Note
In the previous example, theselfcheckout repository is specified in order to checkout the source of the repository associated with the pipeline.
self
If you are using the default Azure Repos Git repository (that has the same name as the project), use the format- checkout: git://MyProject/MyRepo.
- checkout: git://MyProject/MyRepo
Checkout path
Unless apathis specified in thecheckoutstep, source code is placed in a default directory. This directory is different depending on whether you are checking out a single repository or multiple repositories.
path
checkout
Single repository: If you have a singlecheckoutstep in your job, or you have no checkout step which is equivalent tocheckout: self, your source code is checked out into a directory calledslocated as a subfolder of(Agent.BuildDirectory). If(Agent.BuildDirectory)isC:\agent\_work\1, your code is checked out toC:\agent\_work\1\s.
Single repository: If you have a singlecheckoutstep in your job, or you have no checkout step which is equivalent tocheckout: self, your source code is checked out into a directory calledslocated as a subfolder of(Agent.BuildDirectory). If(Agent.BuildDirectory)isC:\agent\_work\1, your code is checked out toC:\agent\_work\1\s.
checkout
checkout: self
s
(Agent.BuildDirectory)
(Agent.BuildDirectory)
C:\agent\_work\1
C:\agent\_work\1\s
Multiple repositories: If you have multiplecheckoutsteps in your job, your source code is checked out into directories named after the repositories as a subfolder ofsin(Agent.BuildDirectory). If(Agent.BuildDirectory)isC:\agent\_work\1and your repositories are namedtoolsandcode, your code is checked out toC:\agent\_work\1\s\toolsandC:\agent\_work\1\s\code.NoteIf nopathis specified in thecheckoutstep, the name of the repository is used for the folder,
not therepositoryvalue which is used to reference the repository in thecheckoutstep.
Multiple repositories: If you have multiplecheckoutsteps in your job, your source code is checked out into directories named after the repositories as a subfolder ofsin(Agent.BuildDirectory). If(Agent.BuildDirectory)isC:\agent\_work\1and your repositories are namedtoolsandcode, your code is checked out toC:\agent\_work\1\s\toolsandC:\agent\_work\1\s\code.
checkout
s
(Agent.BuildDirectory)
(Agent.BuildDirectory)
C:\agent\_work\1
tools
code
C:\agent\_work\1\s\tools
C:\agent\_work\1\s\code
Note
If nopathis specified in thecheckoutstep, the name of the repository is used for the folder,
not therepositoryvalue which is used to reference the repository in thecheckoutstep.
path
checkout
repository
checkout
If apathis specified for acheckoutstep, that path is used, relative to(Agent.BuildDirectory).
path
checkout
(Agent.BuildDirectory)
Note
If you are using default paths, adding a second repositorycheckoutstep changes the default path of the code for the first repository. For example, the code for a repository namedtoolswould be checked out toC:\agent\_work\1\swhentoolsis the only repository, but if a second repository is added,toolswould then be checked out toC:\agent\_work\1\s\tools. If you have any steps that depend on the source code being in the original location, those steps must be updated.
checkout
tools
C:\agent\_work\1\s
tools
tools
C:\agent\_work\1\s\tools
Workspace repository
When multiplecheckoutsteps (and different paths for each) are used in your pipeline, you may want to use the root directory of one the repositories as the default working directory. If so, you can set theworkspaceRepoinput totruefor the relatedcheckoutstep.
checkout
workspaceRepo
true
checkout
- checkout: git://project/first
  path: repo/first-repo

- checkout: git://project/second
  path: repo/second-repo
  workspaceRepo: true

- pwsh: pwd
# Expected output: $(Pipeline.Workspace)/repo/second-repo
- checkout: git://project/first
  path: repo/first-repo

- checkout: git://project/second
  path: repo/second-repo
  workspaceRepo: true

- pwsh: pwd
# Expected output: $(Pipeline.Workspace)/repo/second-repo
Checking out a specific ref
The default branch is checked out unless you designate a specific ref.
If you are using inline syntax, designate the ref by appending@<ref>. For example:
@<ref>
- checkout: git://MyProject/MyRepo@features/tools # checks out the features/tools branch
- checkout: git://MyProject/MyRepo@refs/heads/features/tools # also checks out the features/tools branch
- checkout: git://MyProject/MyRepo@refs/tags/MyTag # checks out the commit referenced by MyTag.
- checkout: git://MyProject/MyRepo@features/tools # checks out the features/tools branch
- checkout: git://MyProject/MyRepo@refs/heads/features/tools # also checks out the features/tools branch
- checkout: git://MyProject/MyRepo@refs/tags/MyTag # checks out the commit referenced by MyTag.
When using a repository resource, specify the ref using therefproperty. The following example checks out thefeatures/tools/branch of the designated repository.
ref
features/tools/
resources:
  repositories:
  - repository: MyGitHubRepo
    type: github
    endpoint: MyGitHubServiceConnection
    name: MyGitHubOrgOrUser/MyGitHubRepo
    ref: features/tools

steps:
- checkout: MyGitHubRepo
resources:
  repositories:
  - repository: MyGitHubRepo
    type: github
    endpoint: MyGitHubServiceConnection
    name: MyGitHubOrgOrUser/MyGitHubRepo
    ref: features/tools

steps:
- checkout: MyGitHubRepo
The following example usestagsto check out the commit referenced byMyTag.
MyTag
resources:
  repositories:
  - repository: MyGitHubRepo
    type: github
    endpoint: MyGitHubServiceConnection
    name: MyGitHubOrgOrUser/MyGitHubRepo
    ref: refs/tags/MyTag

steps:
- checkout: MyGitHubRepo
resources:
  repositories:
  - repository: MyGitHubRepo
    type: github
    endpoint: MyGitHubServiceConnection
    name: MyGitHubOrgOrUser/MyGitHubRepo
    ref: refs/tags/MyTag

steps:
- checkout: MyGitHubRepo
Triggers
You can trigger a pipeline when an update is pushed to theselfrepository or to any of the repositories declared as resources. This is useful, for instance, in the following scenarios:
self
You consume a tool or a library from a different repository. You want to run tests for your application whenever the tool or library is updated.
You keep your YAML file in a separate repository from the application code. You want to trigger the pipeline every time an update is pushed to the application repository.
Important
Repository resource triggers only work for Azure Repos Git repositories in the same organization and when theselfrepository type is Azure Repos Git. They do not work for GitHub or Bitbucket repository resources.
self
batchis not supported in repository resource triggers.
batch
If you do not specify atriggersection in a repository resource, then the pipeline won't be triggered by changes to that repository. If you specify atriggersection, then the behavior for triggering is similar to how CI triggers work for the self repository.
trigger
trigger
If you specify atriggersection for multiple repository resources, then a change to any of them will start a new run.
trigger
When a pipeline is triggered, Azure Pipelines has to determine the version of the YAML file that should be used and a version for each repository that should be checked out. If a change to theselfrepository triggers a pipeline, then the commit that triggered the pipeline is used to determine the version of the YAML file. If a change to any other repository resource triggers the pipeline, then the latest version of YAML from thedefault branchofselfrepository is used.
self
self
When an update to one of the repositories triggers a pipeline, then the following variables are set based on triggering repository:
Build.Repository.ID
Build.Repository.ID
Build.Repository.Name
Build.Repository.Name
Build.Repository.Provider
Build.Repository.Provider
Build.Repository.Uri
Build.Repository.Uri
Build.SourceBranch
Build.SourceBranch
Build.SourceBranchName
Build.SourceBranchName
Build.SourceVersion
Build.SourceVersion
Build.SourceVersionMessage
Build.SourceVersionMessage
For the triggering repository, the commit that triggered the pipeline determines the version of the code that is checked out. For other repositories, therefdefined in the YAML for that repository resource determines the default version that is checked out.
ref
Consider the following example, where theselfrepository contains the YAML file and repositoriesAandBcontain additional source code.
self
A
B
trigger:
- main
- feature

resources:
  repositories:
  - repository: A
    type: git
    name: MyProject/A
    ref: main
    trigger:
    - main

  - repository: B
    type: git
    name: MyProject/B
    ref: release
    trigger:
    - main
    - release
steps:
- checkout: self
- checkout: A
- checkout: B
trigger:
- main
- feature

resources:
  repositories:
  - repository: A
    type: git
    name: MyProject/A
    ref: main
    trigger:
    - main

  - repository: B
    type: git
    name: MyProject/B
    ref: release
    trigger:
    - main
    - release
steps:
- checkout: self
- checkout: A
- checkout: B
The following table shows which versions are checked out for each repository by a pipeline using the above YAML file.
self
A
B
main
self
main
main
main
release
feature
self
feature
feature
main
release
main
A
main
main
main
release
main
B
main
main
main
main
release
B
main
main
main
release
You can also trigger the pipeline when you create or update a pull request in any of the repositories. To do this, declare the repository resources in the YAML files as in the examples above, and configure a branch policy in the repository (Azure Repos only).
Repository details
When you check out multiple repositories, some details about theselfrepository are available asvariables.
When you use multi-repo triggers, some of those variables have information about the triggering repository instead.
Details about all of the repositories consumed by the job are available as atemplate context objectcalledresources.repositories.
self
resources.repositories
For example, to get the ref of a non-selfrepository, you could write a pipeline like this:
self
resources:
  repositories:
  - repository: other
    type: git
    name: MyProject/OtherTools

variables:
  tools.ref: $[ resources.repositories['other'].ref ]

steps:
- checkout: self
- checkout: other
- bash: |
    echo "Tools version: $TOOLS_REF"
resources:
  repositories:
  - repository: other
    type: git
    name: MyProject/OtherTools

variables:
  tools.ref: $[ resources.repositories['other'].ref ]

steps:
- checkout: self
- checkout: other
- bash: |
    echo "Tools version: $TOOLS_REF"
FAQ
Why can't I check out a repository from another project? It used to work.
Why am I prompted to authorize resources the first time I try to check out a different repository?
Why can't I check out a repository from another project? It used to work.
Azure Pipelines provides aLimit job authorization scope to current projectsetting, that when enabled, doesn't permit the pipeline to access resources outside of the project that contains the pipeline. This setting can be set at either the organization or project level. If this setting is enabled, you won't be able to check out a repository in another project unless you explicitly grant access. For more information, seeJob authorization scope.
Why am I prompted to authorize resources the first time I try to check out a different repository?
When you check out Azure Repos Git repositories other than the one containing the pipeline, you may be prompted to authorize access to that resource before the pipeline runs for the first time. These prompts are displayed on the pipeline run summary page.


ChooseVieworAuthorize resources, and follow the prompts to authorize the resources.


For more information, seeTroubleshooting authorization for a YAML pipeline.
Feedback
Was this page helpful?
Additional resources