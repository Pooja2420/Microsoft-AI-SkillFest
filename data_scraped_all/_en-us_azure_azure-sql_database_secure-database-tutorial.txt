Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Tutorial: Secure a database in Azure SQL Database
Article
2024-01-26
19 contributors
In this article
Applies to:Azure SQL Database
In this tutorial you learn how to:
Create server-level and database-level firewall rules
Configure a Microsoft Entra administrator
Manage user access with SQL authentication, Microsoft Entra authentication, and secure connection strings
Enable security features, such as Microsoft Defender for SQL, auditing, data masking, and encryption
Note
Microsoft Entra IDwas previously known as Azure Active Directory (Azure AD).
Azure SQL Database secures data by allowing you to:
Limit access using firewall rules
Use authentication mechanisms that require identity
Use authorization with role-based memberships and permissions
Enable security features
Note
Azure SQL Managed Instance is secured using network security rules and private endpoints as described inAzure SQL Managed Instanceandconnectivity architecture.
To learn more, see theAzure SQL Database security overviewandcapabilitiesarticles.
Tip
This free Learn module shows you how toSecure your database in Azure SQL Database.
Prerequisites
To complete the tutorial, make sure you have the following prerequisites:
SQL Server Management Studio
Aserverand a single databaseCreate them with theAzure portal,CLI, orPowerShell
Create them with theAzure portal,CLI, orPowerShell
If you don't have an Azure subscription,create a free accountbefore you begin.
Sign in to the Azure portal
For all steps in the tutorial, sign in to theAzure portal
Create firewall rules
Databases in SQL Database are protected by firewalls in Azure. By default, all connections to the server and database are rejected. To learn more, seeserver-level and database-level firewall rules.
SetAllow access to Azure servicestoOFFfor the most secure configuration. Then, create areserved IP (classic deployment)for the resource that needs to connect, such as an Azure VM or cloud service, and only allow that IP address access through the firewall. If you're using theResource Managerdeployment model, a dedicated public IP address is required for each resource.
Note
SQL Database communicates over port 1433. If you're trying to connect from within a corporate network, outbound traffic over port 1433 might not be allowed by your network's firewall. If so, you can't connect to the server unless your administrator opens port 1433.
Set up server-level firewall rules
Server-level IP firewall rules apply to all databases within the same server.
To set up a server-level firewall rule:
In the Azure portal, selectSQL databasesfrom the left-hand menu, and select your database on theSQL databasespage.NoteBe sure to copy your fully qualified server name (such asyourserver.database.windows.net) for use later in the tutorial.
In the Azure portal, selectSQL databasesfrom the left-hand menu, and select your database on theSQL databasespage.

Note
Be sure to copy your fully qualified server name (such asyourserver.database.windows.net) for use later in the tutorial.
SelectNetworkingunderSettings. Choose thePublic Accesstab, and then selectSelected networksunderPublic network accessto display theFirewall rulessection.
SelectNetworkingunderSettings. Choose thePublic Accesstab, and then selectSelected networksunderPublic network accessto display theFirewall rulessection.

SelectAdd client IPon the toolbar to add your current IP address to a new IP firewall rule. An IP firewall rule can open port 1433 for a single IP address or a range of IP addresses.
SelectAdd client IPon the toolbar to add your current IP address to a new IP firewall rule. An IP firewall rule can open port 1433 for a single IP address or a range of IP addresses.
SelectOKto save your firewall settings.
SelectOKto save your firewall settings.
You can now connect to any database in the server with the specified IP address or IP address range.
Setup database firewall rules
Database-level firewall rules only apply to individual databases. The database will retain these rules during a server failover. Database-level firewall rules can only be configured using Transact-SQL (T-SQL) statements, and only after you've configured a server-level firewall rule.
To set up a database-level firewall rule:
Connect to the database, for example usingSQL Server Management Studio.
Connect to the database, for example usingSQL Server Management Studio.
InObject Explorer, right-click the database and selectNew Query.
InObject Explorer, right-click the database and selectNew Query.
In the query window, add this statement and modify the IP address to your public IP address:EXECUTE sp_set_database_firewall_rule N'Example DB Rule','0.0.0.4','0.0.0.4';
In the query window, add this statement and modify the IP address to your public IP address:
EXECUTE sp_set_database_firewall_rule N'Example DB Rule','0.0.0.4','0.0.0.4';
EXECUTE sp_set_database_firewall_rule N'Example DB Rule','0.0.0.4','0.0.0.4';
On the toolbar, selectExecuteto create the firewall rule.
On the toolbar, selectExecuteto create the firewall rule.
Note
You can also create a server-level firewall rule in SSMS by using thesp_set_firewall_rulecommand, though you must be connected to themasterdatabase.

Create a Microsoft Entra admin
Make sure you're using the appropriate Microsoft Entra ID (formerly Azure Active Directory) managed domain. To select your domain, use the upper-right corner of the Azure portal. This process confirms the same subscription is used for both Microsoft Entra ID and the logical server hosting your database or data warehouse.

To set the Microsoft Entra administrator:
In the Azure portal, on theSQL serverpage, selectMicrosoft Entra IDfrom the resource menu, then selectSet adminto open theMicrosoft Entra IDpane.ImportantYou need to be a Privileged Role Administrator or higher role to perform this task.
In the Azure portal, on theSQL serverpage, selectMicrosoft Entra IDfrom the resource menu, then selectSet adminto open theMicrosoft Entra IDpane.

Important
You need to be a Privileged Role Administrator or higher role to perform this task.
On theMicrosoft Entra IDpane, search and select the Microsoft Entra user or group and chooseSelect. All members and groups of your Microsoft Entra organization are listed, and entries grayed out arenot supported as Microsoft Entra administrators.ImportantAzure role-based access control (Azure RBAC) only applies to the portal and isn't propagated to SQL Server.
On theMicrosoft Entra IDpane, search and select the Microsoft Entra user or group and chooseSelect. All members and groups of your Microsoft Entra organization are listed, and entries grayed out arenot supported as Microsoft Entra administrators.

Important
Azure role-based access control (Azure RBAC) only applies to the portal and isn't propagated to SQL Server.
At the top of theMicrosoft Entra adminpage, selectSave.The process of changing an administrator might take several minutes. The new administrator will appear in theMicrosoft Entra adminfield.
At the top of theMicrosoft Entra adminpage, selectSave.
The process of changing an administrator might take several minutes. The new administrator will appear in theMicrosoft Entra adminfield.
Note
When setting a Microsoft Entra admin, the new admin name (user or group) cannot exist as a login or user in themasterdatabase. If present, the setup will fail and roll back changes, indicating that such an admin name already exists. Since the server login or user is not part of Microsoft Entra ID, any effort to connect the user using Microsoft Entra authentication fails.
For information about configuring Microsoft Entra ID, see:
Integrate your on-premises identities with Microsoft Entra ID
Add your own domain name to Microsoft Entra ID
Federation with Microsoft Entra ID
Administer your Microsoft Entra directory
Manage Microsoft Entra ID using PowerShell
Hybrid identity required ports and protocols
Manage database access
Manage database access by adding users to the database, or allowing user access with secure connection strings. Connection strings are useful for external applications. To learn more, seeManage logins and user accountsandMicrosoft Entra authentication.
To add users, choose the database authentication type:
SQL authentication, use a username and password for logins and are only valid in the context of a specific database within the server
SQL authentication, use a username and password for logins and are only valid in the context of a specific database within the server
Microsoft Entra authentication, use identities managed by Microsoft Entra ID
Microsoft Entra authentication, use identities managed by Microsoft Entra ID
SQL authentication
To add a user with SQL authentication:
Connect to the database, for example usingSQL Server Management Studio.
Connect to the database, for example usingSQL Server Management Studio.
InObject Explorer, right-click the database and chooseNew Query.
InObject Explorer, right-click the database and chooseNew Query.
In the query window, enter the following command:CREATE USER ApplicationUser WITH PASSWORD = 'YourStrongPassword1';
In the query window, enter the following command:
CREATE USER ApplicationUser WITH PASSWORD = 'YourStrongPassword1';
CREATE USER ApplicationUser WITH PASSWORD = 'YourStrongPassword1';
On the toolbar, selectExecuteto create the user.
On the toolbar, selectExecuteto create the user.
By default, the user can connect to the database, but has no permissions to read or write data. To grant these permissions, execute the following commands in a new query window:ALTER ROLE db_datareader ADD MEMBER ApplicationUser;
ALTER ROLE db_datawriter ADD MEMBER ApplicationUser;
By default, the user can connect to the database, but has no permissions to read or write data. To grant these permissions, execute the following commands in a new query window:
ALTER ROLE db_datareader ADD MEMBER ApplicationUser;
ALTER ROLE db_datawriter ADD MEMBER ApplicationUser;
ALTER ROLE db_datareader ADD MEMBER ApplicationUser;
ALTER ROLE db_datawriter ADD MEMBER ApplicationUser;
Note
Create non-administrator accounts at the database level, unless they need to execute administrator tasks like creating new users.

Microsoft Entra authentication
Because Azure SQL Database doesn't support Microsoft Entra server principals (logins), database users created with Microsoft Entra accounts are created as contained database users. A contained database user is not associated to a login in themasterdatabase, even if there exists a login with the same name. The Microsoft Entra identity can either be for an individual user or a group. For more information, seeContained database users, make your database portableand review theMicrosoft Entra tutorialon how to authenticate using Microsoft Entra ID.
master
Note
Database users (excluding administrators) cannot be created using the Azure portal. Microsoft Entra roles do not propagate to SQL servers, databases, or data warehouses. They are only used to manage Azure resources and do not apply to database permissions.
For example, theSQL Server Contributorrole does not grant access to connect to a database or data warehouse. This permission must be granted within the database using T-SQL statements.
Important
Special characters like colon:or ampersand&are not supported in user names in the T-SQLCREATE LOGINandCREATE USERstatements.
:
&
CREATE LOGIN
CREATE USER
To add a user with Microsoft Entra authentication:
Connect to your server in Azure using a Microsoft Entra account with at least theALTER ANY USERpermission.
Connect to your server in Azure using a Microsoft Entra account with at least theALTER ANY USERpermission.
InObject Explorer, right-click the database and selectNew Query.
InObject Explorer, right-click the database and selectNew Query.
In the query window, enter the following command and modify<Azure_AD_principal_name>to the principal name of the Microsoft Entra user or the display name of the Microsoft Entra group:CREATE USER [<Azure_AD_principal_name>] FROM EXTERNAL PROVIDER;
In the query window, enter the following command and modify<Azure_AD_principal_name>to the principal name of the Microsoft Entra user or the display name of the Microsoft Entra group:
<Azure_AD_principal_name>
CREATE USER [<Azure_AD_principal_name>] FROM EXTERNAL PROVIDER;
CREATE USER [<Azure_AD_principal_name>] FROM EXTERNAL PROVIDER;
Note
Microsoft Entra users are marked in the database metadata with typeE (EXTERNAL_USER)and typeX (EXTERNAL_GROUPS)for groups. For more information, seesys.database_principals.
E (EXTERNAL_USER)
X (EXTERNAL_GROUPS)
Secure connection strings
To ensure a secure, encrypted connection between the client application and SQL Database, a connection string must be configured to:
Request an encrypted connection
Not trust the server certificate
The connection is established using Transport Layer Security (TLS) and reduces the risk of a man-in-the-middle attack. Connection strings are available per database and are pre-configured to support client drivers such as ADO.NET, JDBC, ODBC, and PHP. For information about TLS and connectivity, seeTLS considerations.
To copy a secure connection string:
In the Azure portal, selectSQL databasesfrom the left-hand menu, and select your database on theSQL databasespage.
In the Azure portal, selectSQL databasesfrom the left-hand menu, and select your database on theSQL databasespage.
On theOverviewpage, selectShow database connection strings.
On theOverviewpage, selectShow database connection strings.
Select a driver tab and copy the complete connection string.
Select a driver tab and copy the complete connection string.

Enable security features
Azure SQL Database provides security features that are accessed using the Azure portal. These features are available for both the database and server, except for data masking, which is only available on the database. To learn more, seeMicrosoft Defender for SQL,Auditing,Dynamic data masking, andTransparent data encryption.
Microsoft Defender for SQL
The Microsoft Defender for SQL feature detects potential threats as they occur and provides security alerts on anomalous activities. Users can explore these suspicious events using the auditing feature, and determine if the event was to access, breach, or exploit data in the database. Users are also provided a security overview that includes a vulnerability assessment and the data discovery and classification tool.
Note
An example threat is SQL injection, a process where attackers inject malicious SQL into application inputs. An application can then unknowingly execute the malicious SQL and allow attackers access to breach or modify data in the database.
To enable Microsoft Defender for SQL:
In the Azure portal, selectSQL databasesfrom the left-hand menu, and select your database on theSQL databasespage.
In the Azure portal, selectSQL databasesfrom the left-hand menu, and select your database on theSQL databasespage.
On theOverviewpage, select theServer namelink. The server page will open.
On theOverviewpage, select theServer namelink. The server page will open.
On theSQL serverpage, find theSecuritysection and selectDefender for Cloud.SelectONunderMicrosoft Defender for SQLto enable the feature. Choose a storage account for saving vulnerability assessment results. Then selectSave.You can also configure emails to receive security alerts, storage details, and threat detection types.
On theSQL serverpage, find theSecuritysection and selectDefender for Cloud.
SelectONunderMicrosoft Defender for SQLto enable the feature. Choose a storage account for saving vulnerability assessment results. Then selectSave.You can also configure emails to receive security alerts, storage details, and threat detection types.
SelectONunderMicrosoft Defender for SQLto enable the feature. Choose a storage account for saving vulnerability assessment results. Then selectSave.

You can also configure emails to receive security alerts, storage details, and threat detection types.
Return to theSQL databasespage of your database and selectDefender for Cloudunder theSecuritysection. Here you'll find various security indicators available for the database.
Return to theSQL databasespage of your database and selectDefender for Cloudunder theSecuritysection. Here you'll find various security indicators available for the database.

If anomalous activities are detected, you receive an email with information on the event. This includes the nature of the activity, database, server, event time, possible causes, and recommended actions to investigate and mitigate the potential threat. If such an email is received, select theAzure SQL Auditing Loglink to launch the Azure portal and show relevant auditing records for the time of the event.

Auditing
The auditing feature tracks database events and writes events to an audit log in either Azure storage, Azure Monitor logs, or to an event hub. Auditing helps maintain regulatory compliance, understand database activity, and gain insight into discrepancies and anomalies that could indicate potential security violations.
To enable auditing:
In the Azure portal, selectSQL databasesfrom the left-hand menu, and select your database on theSQL databasespage.
In the Azure portal, selectSQL databasesfrom the left-hand menu, and select your database on theSQL databasespage.
In theSecuritysection, selectAuditing.
In theSecuritysection, selectAuditing.
UnderAuditingsettings, set the following values:SetAuditingtoON.SelectAudit log destinationas any of the following:Storage, an Azure storage account where event logs are saved and can be downloaded as.xelfilesTipUse the same storage account for all audited databases to get the most from auditing report templates.Log Analytics, which automatically stores events for query or further analysisNoteALog Analytics workspaceis required to support advanced features such as analytics, custom alert rules, and Excel or Power BI exports. Without a workspace, only the query editor is available.Event Hub, which allows events to be routed for use in other applicationsSelectSave.
UnderAuditingsettings, set the following values:
SetAuditingtoON.
SetAuditingtoON.
SelectAudit log destinationas any of the following:Storage, an Azure storage account where event logs are saved and can be downloaded as.xelfilesTipUse the same storage account for all audited databases to get the most from auditing report templates.Log Analytics, which automatically stores events for query or further analysisNoteALog Analytics workspaceis required to support advanced features such as analytics, custom alert rules, and Excel or Power BI exports. Without a workspace, only the query editor is available.Event Hub, which allows events to be routed for use in other applications
SelectAudit log destinationas any of the following:
Storage, an Azure storage account where event logs are saved and can be downloaded as.xelfilesTipUse the same storage account for all audited databases to get the most from auditing report templates.
Storage, an Azure storage account where event logs are saved and can be downloaded as.xelfiles
Tip
Use the same storage account for all audited databases to get the most from auditing report templates.
Log Analytics, which automatically stores events for query or further analysisNoteALog Analytics workspaceis required to support advanced features such as analytics, custom alert rules, and Excel or Power BI exports. Without a workspace, only the query editor is available.
Log Analytics, which automatically stores events for query or further analysis
Note
ALog Analytics workspaceis required to support advanced features such as analytics, custom alert rules, and Excel or Power BI exports. Without a workspace, only the query editor is available.
Event Hub, which allows events to be routed for use in other applications
Event Hub, which allows events to be routed for use in other applications
SelectSave.
SelectSave.

Now you can selectView audit logsto view database events data.
Now you can selectView audit logsto view database events data.

Important
SeeSQL Database auditingon how to further customize audit events using PowerShell or REST API.
Dynamic data masking
The data masking feature will automatically hide sensitive data in your database.
To enable data masking:
In the Azure portal, selectSQL databasesfrom the left-hand menu, and select your database on theSQL databasespage.
In the Azure portal, selectSQL databasesfrom the left-hand menu, and select your database on theSQL databasespage.
In theSecuritysection, selectDynamic Data Masking.
In theSecuritysection, selectDynamic Data Masking.
UnderDynamic data maskingsettings, selectAdd maskto add a masking rule. Azure will automatically populate available database schemas, tables, and columns to choose from.
UnderDynamic data maskingsettings, selectAdd maskto add a masking rule. Azure will automatically populate available database schemas, tables, and columns to choose from.

SelectSave. The selected information is now masked for privacy.
SelectSave. The selected information is now masked for privacy.

Transparent data encryption
The encryption feature automatically encrypts your data at rest, and requires no changes to applications accessing the encrypted database. For new databases, encryption is on by default. You can also encrypt data using SSMS and theAlways encryptedfeature.
To enable or verify encryption:
In the Azure portal, selectSQL databasesfrom the left-hand menu, and select your database on theSQL databasespage.
In the Azure portal, selectSQL databasesfrom the left-hand menu, and select your database on theSQL databasespage.
In theSecuritysection, selectTransparent data encryption.
In theSecuritysection, selectTransparent data encryption.
If necessary, setData encryptiontoON. SelectSave.
If necessary, setData encryptiontoON. SelectSave.

Note
To view encryption status, connect to the database usingSSMSand query theencryption_statecolumn of thesys.dm_database_encryption_keysview. A state of3indicates the database is encrypted.
encryption_state
3
Note
Some items considered customer content, such as table names, object names, and index names, might be transmitted in log files for support and troubleshooting by Microsoft.
Related content
Deploy Azure SQL Database for free
What's new in Azure SQL Database?
Configure and manage content reference - Azure SQL Database
Plan and manage costs for Azure SQL Database
Tip
Ready to start developing an .NET application?This free Learn module shows you how toDevelop and configure an ASP.NET application that queries an Azure SQL Database, including the creation of a simple database.
Next step
Advance to the next tutorial to learn how to implement geo-distribution.
Tutorial: Implement a geo-distributed database (Azure SQL Database)
Feedback
Was this page helpful?
Additional resources