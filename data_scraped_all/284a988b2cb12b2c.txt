Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Develop Azure AI services applications with Azure Key Vault
Article
2025-02-27
5 contributors
In this article
Learn how to develop Azure AI services applications securely by usingAzure Key Vault.
Key Vault reduces the risk that secrets may be accidentally leaked, because you avoid storing security information in your application.
Prerequisites
A valid Azure subscription -Create one for free
Visual Studio IDE
AnAzure Key Vault
An Azure AI services resource
A valid Azure subscription -Create one for free.
Python 3.7 or later
Azure CLIorAzure PowerShell
AnAzure Key Vault
An Azure AI services resource
A valid Azure subscription -Create one for free.
Java Development Kit (JDK) version 8 or above
Azure CLIorAzure PowerShell
AnAzure Key Vault
An Azure AI services resource
A valid Azure subscription -Create one for free.
Current Node.js v14 LTS or later
Azure CLIorAzure PowerShell
AnAzure Key Vault
An Azure AI services resource
Note
Review the documentation and quickstart articles for the Azure AI service you're using to get an understanding of:
The credentials and other information you will need to send API calls.
The packages and code you will need to run your application.
Get your credentials from your Azure AI services resource
Before you add your credential information to your Azure key vault, you need to retrieve them from your Azure AI services resource. For example, if your service needs a key and endpoint you would find them using the following steps:
Navigate to your Azure resource in theAzure portal.
Navigate to your Azure resource in theAzure portal.
From the collapsible menu on the left, selectKeys and Endpoint.
From the collapsible menu on the left, selectKeys and Endpoint.

Some Azure AI services require different information to authenticate API calls, such as a key and region. Make sure to retrieve this information before continuing on.
Add your credentials to your key vault
For your application to retrieve and use your credentials to authenticate API calls, you will need to add them to yourkey vault secrets.
Repeat these steps to generate a secret for each required resource credential. For example, a key and endpoint. These secret names will be used later to authenticate your application.
Open a new browser tab or window. Navigate to your key vault in theAzure portal.
Open a new browser tab or window. Navigate to your key vault in theAzure portal.
From the collapsible menu on the left, selectObjects>Secrets.
From the collapsible menu on the left, selectObjects>Secrets.
SelectGenerate/Import.
SelectGenerate/Import.

On theCreate a secretscreen, enter the following values:NameValueUpload optionsGenerateNameA secret name for your key or endpoint. For example: "CognitiveServicesKey" or "CognitiveServicesEndpoint"ValueYour Azure AI services resource key or endpoint.Later your application will use the secret "Name" to securely access the "Value".
On theCreate a secretscreen, enter the following values:
Later your application will use the secret "Name" to securely access the "Value".
Leave the other values as their defaults. SelectCreate.TipMake sure to remember the names that you set for your secrets, as you'll use them later in your application.
Leave the other values as their defaults. SelectCreate.
Tip
Make sure to remember the names that you set for your secrets, as you'll use them later in your application.
You should now have named secrets for your resource information.
Create an environment variable for your key vault's name
We recommend creating an environment variable for your Azure key vault's name. Your application will read this environment variable at runtime to retrieve your key and endpoint information.
To set environment variables, use one the following commands.KEY_VAULT_NAMEwith the name of the environment variable, and replaceYour-Key-Vault-Namewith the name of your key vault, which will be stored in the environment variable.
KEY_VAULT_NAME
Your-Key-Vault-Name
Azure CLI
PowerShell
Create and assign persisted environment variable, given the value.
setx KEY_VAULT_NAME "Your-Key-Vault-Name"
setx KEY_VAULT_NAME "Your-Key-Vault-Name"
In a new instance of theCommand Prompt, read the environment variable.
echo %KEY_VAULT_NAME%
echo %KEY_VAULT_NAME%
Create and assign a persisted environment variable. ReplaceYour-Key-Vault-Namewith the name of your key vault.
Your-Key-Vault-Name
[System.Environment]::SetEnvironmentVariable('KEY_VAULT_NAME', 'Your-Key-Vault-Name', 'User')
[System.Environment]::SetEnvironmentVariable('KEY_VAULT_NAME', 'Your-Key-Vault-Name', 'User')
In a new instance of theWindows PowerShell, read the environment variable.
[System.Environment]::GetEnvironmentVariable('KEY_VAULT_NAME')
[System.Environment]::GetEnvironmentVariable('KEY_VAULT_NAME')
Authenticate to Azure using Visual Studio
Developers using Visual Studio 2017 or later can authenticate a Microsoft Entra account through Visual Studio. This enables you to access secrets in your key vault by signing into your Azure subscription from within the IDE.
To authenticate in Visual Studio, selectToolsfrom the top navigation menu, and selectOptions. Navigate to theAzure Service Authenticationoption to sign in with your user name and password.
Authenticate using the command line
Before you can grant access to your key vault, you must authenticate with your Microsoft Entra user name and password.
Azure CLI
PowerShell
To authenticate with theAzure CLI, run theaz logincommand.
az login
az login
az login
On systems with a default web browser, the Azure CLI will launch the browser to authenticate. For systems without a default web browser, theaz logincommand will use the device code authentication flow. You can also force the Azure CLI to use the device code flow rather than launching a browser by specifying the--use-device-codeargument.
az login
--use-device-code
If you have multiple subscriptions, make sure toselect the Azure subscriptionthat contains your key vault.
You can also useAzure PowerShellto authenticate. Applications using theDefaultAzureCredentialor theAzurePowerShellCredentialcan then use this account to authenticate calls in their application when running locally.
DefaultAzureCredential
AzurePowerShellCredential
To authenticate with Azure PowerShell, run theConnect-AzAccountcommand. If you're running on a system with a default web browser and Azure PowerShellv5.0.0or later, it will launch the browser to authenticate the user.
Connect-AzAccount
v5.0.0
For systems without a default web browser, theConnect-AzAccountcommand will use the device code authentication flow. You can also force Azure PowerShell to use the device code flow rather than launching a browser by specifying theUseDeviceAuthenticationargument.
Connect-AzAccount
UseDeviceAuthentication
Connect-AzAccount
Connect-AzAccount
If you have multiple subscriptions, make sure toselect the Azure subscriptionthat contains your key vault.
Grant access to your key vault
Create an access policy for your key vault that grants secret permissions to your user account.
Azure CLI
PowerShell
To set the access policy, run theaz keyvault set-policycommand. ReplaceYour-Key-Vault-Namewith the name of your key vault. Replaceuser@domain.comwith your Microsoft Entra user name.
Your-Key-Vault-Name
user@domain.com
az keyvault set-policy --name Your-Key-Vault-Name --upn user@domain.com --secret-permissions delete get list set purge
az keyvault set-policy --name Your-Key-Vault-Name --upn user@domain.com --secret-permissions delete get list set purge
To set the access policy, run theSet-AzKeyVaultAccessPolicycommand. ReplaceYour-Key-Vault-Namewith the name of your key vault. Replaceuser@domain.comwith your Microsoft Entra user name.
Your-Key-Vault-Name
user@domain.com
Set-AzKeyVaultAccessPolicy -VaultName 'Your-Key-Vault-Name' -UserPrincipalName 'user@domain.com' -PermissionsToSecrets delete,get,list,set,purge -PassThru
Set-AzKeyVaultAccessPolicy -VaultName 'Your-Key-Vault-Name' -UserPrincipalName 'user@domain.com' -PermissionsToSecrets delete,get,list,set,purge -PassThru
Create a new C# application
Using the Visual Studio IDE, create a new .NET Core console app. This will create a "Hello World" project with a single C# source file:program.cs.
program.cs
Install the following client libraries by right-clicking on the solution in theSolution Explorerand selectingManage NuGet Packages. In the package manager that opens selectBrowseand search for the following libraries, and selectInstallfor each:
Azure.Security.KeyVault.Secrets
Azure.Security.KeyVault.Secrets
Azure.Identity
Azure.Identity
Import the example code
Copy the following example code into yourprogram.csfile. ReplaceYour-Key-Secret-NameandYour-Endpoint-Secret-Namewith the secret names that you set in your key vault.
program.cs
Your-Key-Secret-Name
Your-Endpoint-Secret-Name
using System;
using System.Threading.Tasks;
using Azure;
using Azure.Identity;
using Azure.Security.KeyVault.Secrets;
using System.Net;

namespace key_vault_console_app
{
    class Program
    {
        static async Task Main(string[] args)
        {
            //Name of your key vault
            var keyVaultName = Environment.GetEnvironmentVariable("KEY_VAULT_NAME");

            //variables for retrieving the key and endpoint from your key vault.
            //Set these variables to the names you created for your secrets
            const string keySecretName = "Your-Key-Secret-Name";
            const string endpointSecretName = "Your-Endpoint-Secret-Name";

            //Endpoint for accessing your key vault
            var kvUri = $"https://{keyVaultName}.vault.azure.net";

            var keyVaultClient = new SecretClient(new Uri(kvUri), new DefaultAzureCredential());

            Console.WriteLine($"Retrieving your secrets from {keyVaultName}.");

            //Key and endpoint secrets retrieved from your key vault
            var keySecret = await keyVaultClient.GetSecretAsync(keySecretName);
            var endpointSecret = await keyVaultClient.GetSecretAsync(endpointSecretName);
            Console.WriteLine($"Your key secret value is: {keySecret.Value.Value}");
            Console.WriteLine($"Your endpoint secret value is: {endpointSecret.Value.Value}");
            Console.WriteLine("Secrets retrieved successfully");

        }
    }
}
using System;
using System.Threading.Tasks;
using Azure;
using Azure.Identity;
using Azure.Security.KeyVault.Secrets;
using System.Net;

namespace key_vault_console_app
{
    class Program
    {
        static async Task Main(string[] args)
        {
            //Name of your key vault
            var keyVaultName = Environment.GetEnvironmentVariable("KEY_VAULT_NAME");

            //variables for retrieving the key and endpoint from your key vault.
            //Set these variables to the names you created for your secrets
            const string keySecretName = "Your-Key-Secret-Name";
            const string endpointSecretName = "Your-Endpoint-Secret-Name";

            //Endpoint for accessing your key vault
            var kvUri = $"https://{keyVaultName}.vault.azure.net";

            var keyVaultClient = new SecretClient(new Uri(kvUri), new DefaultAzureCredential());

            Console.WriteLine($"Retrieving your secrets from {keyVaultName}.");

            //Key and endpoint secrets retrieved from your key vault
            var keySecret = await keyVaultClient.GetSecretAsync(keySecretName);
            var endpointSecret = await keyVaultClient.GetSecretAsync(endpointSecretName);
            Console.WriteLine($"Your key secret value is: {keySecret.Value.Value}");
            Console.WriteLine($"Your endpoint secret value is: {endpointSecret.Value.Value}");
            Console.WriteLine("Secrets retrieved successfully");

        }
    }
}
Run the application
Run the application by selecting theDebugbutton at the top of Visual Studio. Your key and endpoint secrets will be retrieved from your key vault.
Send a test Language service call (optional)
If you're using a multi-service resource or Language resource, you can updateyour applicationby following these steps to send an example Named Entity Recognition call by retrieving a key and endpoint from your key vault.
Install theAzure.AI.TextAnalyticslibrary by right-clicking on the solution in theSolution Explorerand selectingManage NuGet Packages. In the package manager that opens selectBrowseand search for the following libraries, and selectInstallfor each:
Install theAzure.AI.TextAnalyticslibrary by right-clicking on the solution in theSolution Explorerand selectingManage NuGet Packages. In the package manager that opens selectBrowseand search for the following libraries, and selectInstallfor each:
Azure.AI.TextAnalytics
Add the following directive to the top of yourprogram.csfile.using Azure.AI.TextAnalytics;
Add the following directive to the top of yourprogram.csfile.
program.cs
using Azure.AI.TextAnalytics;
using Azure.AI.TextAnalytics;
Add the following code sample to your application.// Example method for extracting named entities from text 
private static void EntityRecognitionExample(string keySecret, string endpointSecret)
{
    //String to be sent for Named Entity Recognition
    var exampleString = "I had a wonderful trip to Seattle last week.";

    AzureKeyCredential azureKeyCredential = new AzureKeyCredential(keySecret);
    Uri endpoint = new Uri(endpointSecret);
    var languageServiceClient = new TextAnalyticsClient(endpoint, azureKeyCredential);

    Console.WriteLine($"Sending a Named Entity Recognition (NER) request");
    var response = languageServiceClient.RecognizeEntities(exampleString);
    Console.WriteLine("Named Entities:");
    foreach (var entity in response.Value)
    {
        Console.WriteLine($"\tText: {entity.Text},\tCategory: {entity.Category},\tSub-Category: {entity.SubCategory}");
        Console.WriteLine($"\t\tScore: {entity.ConfidenceScore:F2},\tLength: {entity.Length},\tOffset: {entity.Offset}\n");
    }
}
Add the following code sample to your application.
// Example method for extracting named entities from text 
private static void EntityRecognitionExample(string keySecret, string endpointSecret)
{
    //String to be sent for Named Entity Recognition
    var exampleString = "I had a wonderful trip to Seattle last week.";

    AzureKeyCredential azureKeyCredential = new AzureKeyCredential(keySecret);
    Uri endpoint = new Uri(endpointSecret);
    var languageServiceClient = new TextAnalyticsClient(endpoint, azureKeyCredential);

    Console.WriteLine($"Sending a Named Entity Recognition (NER) request");
    var response = languageServiceClient.RecognizeEntities(exampleString);
    Console.WriteLine("Named Entities:");
    foreach (var entity in response.Value)
    {
        Console.WriteLine($"\tText: {entity.Text},\tCategory: {entity.Category},\tSub-Category: {entity.SubCategory}");
        Console.WriteLine($"\t\tScore: {entity.ConfidenceScore:F2},\tLength: {entity.Length},\tOffset: {entity.Offset}\n");
    }
}
// Example method for extracting named entities from text 
private static void EntityRecognitionExample(string keySecret, string endpointSecret)
{
    //String to be sent for Named Entity Recognition
    var exampleString = "I had a wonderful trip to Seattle last week.";

    AzureKeyCredential azureKeyCredential = new AzureKeyCredential(keySecret);
    Uri endpoint = new Uri(endpointSecret);
    var languageServiceClient = new TextAnalyticsClient(endpoint, azureKeyCredential);

    Console.WriteLine($"Sending a Named Entity Recognition (NER) request");
    var response = languageServiceClient.RecognizeEntities(exampleString);
    Console.WriteLine("Named Entities:");
    foreach (var entity in response.Value)
    {
        Console.WriteLine($"\tText: {entity.Text},\tCategory: {entity.Category},\tSub-Category: {entity.SubCategory}");
        Console.WriteLine($"\t\tScore: {entity.ConfidenceScore:F2},\tLength: {entity.Length},\tOffset: {entity.Offset}\n");
    }
}
Add the following code to callEntityRecognitionExample()from your main method, with your key and endpoint values.EntityRecognitionExample(keySecret.Value.Value, endpointSecret.Value.Value);
Add the following code to callEntityRecognitionExample()from your main method, with your key and endpoint values.
EntityRecognitionExample()
EntityRecognitionExample(keySecret.Value.Value, endpointSecret.Value.Value);
EntityRecognitionExample(keySecret.Value.Value, endpointSecret.Value.Value);
Run the application.
Run the application.
Authenticate your application
Before you can grant access to your key vault, you must authenticate with your Microsoft Entra user name and password.
Azure CLI
PowerShell
To authenticate with theAzure CLI, run theaz logincommand.
az login
az login
az login
On systems with a default web browser, the Azure CLI will launch the browser to authenticate. For systems without a default web browser, theaz logincommand will use the device code authentication flow. You can also force the Azure CLI to use the device code flow rather than launching a browser by specifying the--use-device-codeargument.
az login
--use-device-code
If you have multiple subscriptions, make sure toselect the Azure subscriptionthat contains your key vault.
You can also useAzure PowerShellto authenticate. Applications using theDefaultAzureCredentialor theAzurePowerShellCredentialcan then use this account to authenticate calls in their application when running locally.
DefaultAzureCredential
AzurePowerShellCredential
To authenticate with Azure PowerShell, run theConnect-AzAccountcommand. If you're running on a system with a default web browser and Azure PowerShellv5.0.0or later, it will launch the browser to authenticate the user.
Connect-AzAccount
v5.0.0
For systems without a default web browser, theConnect-AzAccountcommand will use the device code authentication flow. You can also force Azure PowerShell to use the device code flow rather than launching a browser by specifying theUseDeviceAuthenticationargument.
Connect-AzAccount
UseDeviceAuthentication
Connect-AzAccount
Connect-AzAccount
If you have multiple subscriptions, make sure toselect the Azure subscriptionthat contains your key vault.
Grant access to your key vault
Create an access policy for your key vault that grants secret permissions to your user account.
Azure CLI
PowerShell
To set the access policy, run theaz keyvault set-policycommand. ReplaceYour-Key-Vault-Namewith the name of your key vault. Replaceuser@domain.comwith your Microsoft Entra user name.
Your-Key-Vault-Name
user@domain.com
az keyvault set-policy --name Your-Key-Vault-Name --upn user@domain.com --secret-permissions delete get list set purge
az keyvault set-policy --name Your-Key-Vault-Name --upn user@domain.com --secret-permissions delete get list set purge
To set the access policy, run theSet-AzKeyVaultAccessPolicycommand. ReplaceYour-Key-Vault-Namewith the name of your key vault. Replaceuser@domain.comwith your Microsoft Entra user name.
Your-Key-Vault-Name
user@domain.com
Set-AzKeyVaultAccessPolicy -VaultName 'Your-Key-Vault-Name' -UserPrincipalName 'user@domain.com' -PermissionsToSecrets delete,get,list,set,purge -PassThru
Set-AzKeyVaultAccessPolicy -VaultName 'Your-Key-Vault-Name' -UserPrincipalName 'user@domain.com' -PermissionsToSecrets delete,get,list,set,purge -PassThru
Create a Python application
Create a new folder namedkeyVaultExample. Then use your preferred code editor to create a file namedprogram.pyinside the newly created folder.
keyVaultExample
program.py
Install Key Vault and Language service packages
In a terminal or command prompt, navigate to your project folder and install the Microsoft Entra identity library:pip install azure-identity
In a terminal or command prompt, navigate to your project folder and install the Microsoft Entra identity library:
pip install azure-identity
pip install azure-identity
Install the Key Vault secrets library:pip install azure-keyvault-secrets
Install the Key Vault secrets library:
pip install azure-keyvault-secrets
pip install azure-keyvault-secrets
Import the example code
Add the following code sample to the file namedprogram.py. ReplaceYour-Key-Secret-NameandYour-Endpoint-Secret-Namewith the secret names that you set in your key vault.
program.py
Your-Key-Secret-Name
Your-Endpoint-Secret-Name
import os
from azure.keyvault.secrets import SecretClient
from azure.identity import DefaultAzureCredential
from azure.core.credentials import AzureKeyCredential

keyVaultName = os.environ["KEY_VAULT_NAME"]

# Set these variables to the names you created for your secrets
keySecretName = "Your-Key-Secret-Name"
endpointSecretName = "Your-Endpoint-Secret-Name"

# URI for accessing key vault
KVUri = f"https://{keyVaultName}.vault.azure.net"

# Instantiate the client and retrieve secrets
credential = DefaultAzureCredential()
kv_client = SecretClient(vault_url=KVUri, credential=credential)

print(f"Retrieving your secrets from {keyVaultName}.")

retrieved_key = kv_client.get_secret(keySecretName).value
retrieved_endpoint = kv_client.get_secret(endpointSecretName).value

print(f"Your secret key value is {retrieved_key}.");
print(f"Your secret endpoint value is {retrieved_endpoint}.");
import os
from azure.keyvault.secrets import SecretClient
from azure.identity import DefaultAzureCredential
from azure.core.credentials import AzureKeyCredential

keyVaultName = os.environ["KEY_VAULT_NAME"]

# Set these variables to the names you created for your secrets
keySecretName = "Your-Key-Secret-Name"
endpointSecretName = "Your-Endpoint-Secret-Name"

# URI for accessing key vault
KVUri = f"https://{keyVaultName}.vault.azure.net"

# Instantiate the client and retrieve secrets
credential = DefaultAzureCredential()
kv_client = SecretClient(vault_url=KVUri, credential=credential)

print(f"Retrieving your secrets from {keyVaultName}.")

retrieved_key = kv_client.get_secret(keySecretName).value
retrieved_endpoint = kv_client.get_secret(endpointSecretName).value

print(f"Your secret key value is {retrieved_key}.");
print(f"Your secret endpoint value is {retrieved_endpoint}.");
Run the application
Use the following command to run the application. Your key and endpoint secrets will be retrieved from your key vault.
python ./program.py
python ./program.py
Send a test Language service call (optional)
If you're using a multi-service resource or Language resource, you can updateyour applicationby following these steps to send an example Named Entity Recognition call by retrieving a key and endpoint from your key vault.
Install the Language service library:pip install azure-ai-textanalytics==5.1.0
Install the Language service library:
pip install azure-ai-textanalytics==5.1.0
pip install azure-ai-textanalytics==5.1.0
Add the following code to your applicationfrom azure.ai.textanalytics import TextAnalyticsClient
# Authenticate the key vault secrets client using your key and endpoint 
azure_key_credential = AzureKeyCredential(retrieved_key)
# Now you can use key vault credentials with the Language service
language_service_client = TextAnalyticsClient(
    endpoint=retrieved_endpoint, 
    credential=azure_key_credential)

# Example of recognizing entities from text

print("Sending NER request")

try:
    documents = ["I had a wonderful trip to Seattle last week."]
    result = language_service_client.recognize_entities(documents = documents)[0]
    print("Named Entities:\n")
    for entity in result.entities:
        print("\tText: \t", entity.text, "\tCategory: \t", entity.category, "\tSubCategory: \t", entity.subcategory,
                "\n\tConfidence Score: \t", round(entity.confidence_score, 2), "\tLength: \t", entity.length, "\tOffset: \t", entity.offset, "\n")

except Exception as err:
    print("Encountered exception. {}".format(err))
Add the following code to your application
from azure.ai.textanalytics import TextAnalyticsClient
# Authenticate the key vault secrets client using your key and endpoint 
azure_key_credential = AzureKeyCredential(retrieved_key)
# Now you can use key vault credentials with the Language service
language_service_client = TextAnalyticsClient(
    endpoint=retrieved_endpoint, 
    credential=azure_key_credential)

# Example of recognizing entities from text

print("Sending NER request")

try:
    documents = ["I had a wonderful trip to Seattle last week."]
    result = language_service_client.recognize_entities(documents = documents)[0]
    print("Named Entities:\n")
    for entity in result.entities:
        print("\tText: \t", entity.text, "\tCategory: \t", entity.category, "\tSubCategory: \t", entity.subcategory,
                "\n\tConfidence Score: \t", round(entity.confidence_score, 2), "\tLength: \t", entity.length, "\tOffset: \t", entity.offset, "\n")

except Exception as err:
    print("Encountered exception. {}".format(err))
from azure.ai.textanalytics import TextAnalyticsClient
# Authenticate the key vault secrets client using your key and endpoint 
azure_key_credential = AzureKeyCredential(retrieved_key)
# Now you can use key vault credentials with the Language service
language_service_client = TextAnalyticsClient(
    endpoint=retrieved_endpoint, 
    credential=azure_key_credential)

# Example of recognizing entities from text

print("Sending NER request")

try:
    documents = ["I had a wonderful trip to Seattle last week."]
    result = language_service_client.recognize_entities(documents = documents)[0]
    print("Named Entities:\n")
    for entity in result.entities:
        print("\tText: \t", entity.text, "\tCategory: \t", entity.category, "\tSubCategory: \t", entity.subcategory,
                "\n\tConfidence Score: \t", round(entity.confidence_score, 2), "\tLength: \t", entity.length, "\tOffset: \t", entity.offset, "\n")

except Exception as err:
    print("Encountered exception. {}".format(err))
Run the application.
Run the application.
Authenticate your application
Before you can grant access to your key vault, you must authenticate with your Microsoft Entra user name and password.
Azure CLI
PowerShell
To authenticate with theAzure CLI, run theaz logincommand.
az login
az login
az login
On systems with a default web browser, the Azure CLI will launch the browser to authenticate. For systems without a default web browser, theaz logincommand will use the device code authentication flow. You can also force the Azure CLI to use the device code flow rather than launching a browser by specifying the--use-device-codeargument.
az login
--use-device-code
If you have multiple subscriptions, make sure toselect the Azure subscriptionthat contains your key vault.
You can also useAzure PowerShellto authenticate. Applications using theDefaultAzureCredentialor theAzurePowerShellCredentialcan then use this account to authenticate calls in their application when running locally.
DefaultAzureCredential
AzurePowerShellCredential
To authenticate with Azure PowerShell, run theConnect-AzAccountcommand. If you're running on a system with a default web browser and Azure PowerShellv5.0.0or later, it will launch the browser to authenticate the user.
Connect-AzAccount
v5.0.0
For systems without a default web browser, theConnect-AzAccountcommand will use the device code authentication flow. You can also force Azure PowerShell to use the device code flow rather than launching a browser by specifying theUseDeviceAuthenticationargument.
Connect-AzAccount
UseDeviceAuthentication
Connect-AzAccount
Connect-AzAccount
If you have multiple subscriptions, make sure toselect the Azure subscriptionthat contains your key vault.
Grant access to your key vault
Create an access policy for your key vault that grants secret permissions to your user account.
Azure CLI
PowerShell
To set the access policy, run theaz keyvault set-policycommand. ReplaceYour-Key-Vault-Namewith the name of your key vault. Replaceuser@domain.comwith your Microsoft Entra user name.
Your-Key-Vault-Name
user@domain.com
az keyvault set-policy --name Your-Key-Vault-Name --upn user@domain.com --secret-permissions delete get list set purge
az keyvault set-policy --name Your-Key-Vault-Name --upn user@domain.com --secret-permissions delete get list set purge
To set the access policy, run theSet-AzKeyVaultAccessPolicycommand. ReplaceYour-Key-Vault-Namewith the name of your key vault. Replaceuser@domain.comwith your Microsoft Entra user name.
Your-Key-Vault-Name
user@domain.com
Set-AzKeyVaultAccessPolicy -VaultName 'Your-Key-Vault-Name' -UserPrincipalName 'user@domain.com' -PermissionsToSecrets delete,get,list,set,purge -PassThru
Set-AzKeyVaultAccessPolicy -VaultName 'Your-Key-Vault-Name' -UserPrincipalName 'user@domain.com' -PermissionsToSecrets delete,get,list,set,purge -PassThru
Create a java application
In your preferred IDE, create a new Java console application project, and create a class namedExample.
Example
Add dependencies
In your project, add the following dependencies to yourpom.xmlfile.
pom.xml
<dependencies>
    <dependency>
        <groupId>com.azure</groupId>
        <artifactId>azure-security-keyvault-secrets</artifactId>
        <version>4.2.3</version>
    </dependency>
    <dependency>
        <groupId>com.azure</groupId>
        <artifactId>azure-identity</artifactId>
        <version>1.2.0</version>
    </dependency>
</dependencies>
<dependencies>
    <dependency>
        <groupId>com.azure</groupId>
        <artifactId>azure-security-keyvault-secrets</artifactId>
        <version>4.2.3</version>
    </dependency>
    <dependency>
        <groupId>com.azure</groupId>
        <artifactId>azure-identity</artifactId>
        <version>1.2.0</version>
    </dependency>
</dependencies>
Import the example code
Copy the following code into a file namedExample.java. ReplaceYour-Key-Secret-NameandYour-Endpoint-Secret-Namewith the secret names that you set in your key vault.
Example.java
Your-Key-Secret-Name
Your-Endpoint-Secret-Name
import com.azure.identity.DefaultAzureCredentialBuilder;
import com.azure.security.keyvault.secrets.SecretClient;
import com.azure.security.keyvault.secrets.SecretClientBuilder;
import com.azure.core.credential.AzureKeyCredential;

public class Example {

    public static void main(String[] args) {

        String keyVaultName = System.getenv("KEY_VAULT_NAME");
        String keyVaultUri = "https://" + keyVaultName + ".vault.azure.net";

        //variables for retrieving the key and endpoint from your key vault.
        //Set these variables to the names you created for your secrets
        String keySecretName = "Your-Key-Secret-Name";
        String endpointSecretName = "Your-Endpoint-Secret-Name";

        //Create key vault secrets client
        SecretClient secretClient = new SecretClientBuilder()
                .vaultUrl(keyVaultUri)
                .credential(new DefaultAzureCredentialBuilder().build())
                .buildClient();

        //retrieve key and endpoint from key vault
        String keyValue = secretClient.getSecret(keySecretName).getValue();
        String endpointValue = secretClient.getSecret(endpointSecretName).getValue();
        System.out.printf("Your secret key value is: %s", keyValue)
        System.out.printf("Your secret endpoint value is: %s", endpointValue)
    }
}
import com.azure.identity.DefaultAzureCredentialBuilder;
import com.azure.security.keyvault.secrets.SecretClient;
import com.azure.security.keyvault.secrets.SecretClientBuilder;
import com.azure.core.credential.AzureKeyCredential;

public class Example {

    public static void main(String[] args) {

        String keyVaultName = System.getenv("KEY_VAULT_NAME");
        String keyVaultUri = "https://" + keyVaultName + ".vault.azure.net";

        //variables for retrieving the key and endpoint from your key vault.
        //Set these variables to the names you created for your secrets
        String keySecretName = "Your-Key-Secret-Name";
        String endpointSecretName = "Your-Endpoint-Secret-Name";

        //Create key vault secrets client
        SecretClient secretClient = new SecretClientBuilder()
                .vaultUrl(keyVaultUri)
                .credential(new DefaultAzureCredentialBuilder().build())
                .buildClient();

        //retrieve key and endpoint from key vault
        String keyValue = secretClient.getSecret(keySecretName).getValue();
        String endpointValue = secretClient.getSecret(endpointSecretName).getValue();
        System.out.printf("Your secret key value is: %s", keyValue)
        System.out.printf("Your secret endpoint value is: %s", endpointValue)
    }
}
Send a test Language service call (optional)
If you're using a multi-service resource or Language resource, you can updateyour applicationby following these steps to send an example Named Entity Recognition call by retrieving a key and endpoint from your key vault.
In your application, add the following dependency:<dependency>
    <groupId>com.azure</groupId>
    <artifactId>azure-ai-textanalytics</artifactId>
    <version>5.1.12</version>
</dependency>
In your application, add the following dependency:
<dependency>
    <groupId>com.azure</groupId>
    <artifactId>azure-ai-textanalytics</artifactId>
    <version>5.1.12</version>
</dependency>
<dependency>
    <groupId>com.azure</groupId>
    <artifactId>azure-ai-textanalytics</artifactId>
    <version>5.1.12</version>
</dependency>
add the following import statements to your file.import com.azure.ai.textanalytics.models.*;
import com.azure.ai.textanalytics.TextAnalyticsClientBuilder;
import com.azure.ai.textanalytics.TextAnalyticsClient;
add the following import statements to your file.
import com.azure.ai.textanalytics.models.*;
import com.azure.ai.textanalytics.TextAnalyticsClientBuilder;
import com.azure.ai.textanalytics.TextAnalyticsClient;
import com.azure.ai.textanalytics.models.*;
import com.azure.ai.textanalytics.TextAnalyticsClientBuilder;
import com.azure.ai.textanalytics.TextAnalyticsClient;
Add the following code to themain()method in your application:TextAnalyticsClient languageClient = new TextAnalyticsClientBuilder()
        .credential(new AzureKeyCredential(keyValue))
        .endpoint(endpointValue)
        .buildClient();

// Example for recognizing entities in text
String text = "I had a wonderful trip to Seattle last week.";

for (CategorizedEntity entity : languageClient.recognizeEntities(text)) {
    System.out.printf(
            "Recognized entity: %s, entity category: %s, entity sub-category: %s, score: %s, offset: %s, length: %s.%n",
            entity.getText(),
            entity.getCategory(),
            entity.getSubcategory(),
            entity.getConfidenceScore(),
            entity.getOffset(),
            entity.getLength());
}
Add the following code to themain()method in your application:
main()
TextAnalyticsClient languageClient = new TextAnalyticsClientBuilder()
        .credential(new AzureKeyCredential(keyValue))
        .endpoint(endpointValue)
        .buildClient();

// Example for recognizing entities in text
String text = "I had a wonderful trip to Seattle last week.";

for (CategorizedEntity entity : languageClient.recognizeEntities(text)) {
    System.out.printf(
            "Recognized entity: %s, entity category: %s, entity sub-category: %s, score: %s, offset: %s, length: %s.%n",
            entity.getText(),
            entity.getCategory(),
            entity.getSubcategory(),
            entity.getConfidenceScore(),
            entity.getOffset(),
            entity.getLength());
}
TextAnalyticsClient languageClient = new TextAnalyticsClientBuilder()
        .credential(new AzureKeyCredential(keyValue))
        .endpoint(endpointValue)
        .buildClient();

// Example for recognizing entities in text
String text = "I had a wonderful trip to Seattle last week.";

for (CategorizedEntity entity : languageClient.recognizeEntities(text)) {
    System.out.printf(
            "Recognized entity: %s, entity category: %s, entity sub-category: %s, score: %s, offset: %s, length: %s.%n",
            entity.getText(),
            entity.getCategory(),
            entity.getSubcategory(),
            entity.getConfidenceScore(),
            entity.getOffset(),
            entity.getLength());
}
Run your application
Run your application
Authenticate your application
Before you can grant access to your key vault, you must authenticate with your Microsoft Entra user name and password.
Azure CLI
PowerShell
To authenticate with theAzure CLI, run theaz logincommand.
az login
az login
az login
On systems with a default web browser, the Azure CLI will launch the browser to authenticate. For systems without a default web browser, theaz logincommand will use the device code authentication flow. You can also force the Azure CLI to use the device code flow rather than launching a browser by specifying the--use-device-codeargument.
az login
--use-device-code
If you have multiple subscriptions, make sure toselect the Azure subscriptionthat contains your key vault.
You can also useAzure PowerShellto authenticate. Applications using theDefaultAzureCredentialor theAzurePowerShellCredentialcan then use this account to authenticate calls in their application when running locally.
DefaultAzureCredential
AzurePowerShellCredential
To authenticate with Azure PowerShell, run theConnect-AzAccountcommand. If you're running on a system with a default web browser and Azure PowerShellv5.0.0or later, it will launch the browser to authenticate the user.
Connect-AzAccount
v5.0.0
For systems without a default web browser, theConnect-AzAccountcommand will use the device code authentication flow. You can also force Azure PowerShell to use the device code flow rather than launching a browser by specifying theUseDeviceAuthenticationargument.
Connect-AzAccount
UseDeviceAuthentication
Connect-AzAccount
Connect-AzAccount
If you have multiple subscriptions, make sure toselect the Azure subscriptionthat contains your key vault.
Grant access to your key vault
Create an access policy for your key vault that grants secret permissions to your user account.
Azure CLI
PowerShell
To set the access policy, run theaz keyvault set-policycommand. ReplaceYour-Key-Vault-Namewith the name of your key vault. Replaceuser@domain.comwith your Microsoft Entra user name.
Your-Key-Vault-Name
user@domain.com
az keyvault set-policy --name Your-Key-Vault-Name --upn user@domain.com --secret-permissions delete get list set purge
az keyvault set-policy --name Your-Key-Vault-Name --upn user@domain.com --secret-permissions delete get list set purge
To set the access policy, run theSet-AzKeyVaultAccessPolicycommand. ReplaceYour-Key-Vault-Namewith the name of your key vault. Replaceuser@domain.comwith your Microsoft Entra user name.
Your-Key-Vault-Name
user@domain.com
Set-AzKeyVaultAccessPolicy -VaultName 'Your-Key-Vault-Name' -UserPrincipalName 'user@domain.com' -PermissionsToSecrets delete,get,list,set,purge -PassThru
Set-AzKeyVaultAccessPolicy -VaultName 'Your-Key-Vault-Name' -UserPrincipalName 'user@domain.com' -PermissionsToSecrets delete,get,list,set,purge -PassThru
Create a new Node.js application
Create a Node.js application that uses your key vault.
In a terminal, create a folder namedkey-vault-js-exampleand change into that folder:
key-vault-js-example
mkdir key-vault-js-example && cd key-vault-js-example
mkdir key-vault-js-example && cd key-vault-js-example
Initialize the Node.js project:
npm init -y
npm init -y
Install Key Vault and Language service packages
Using the terminal, install the Azure Key Vault secrets library,@azure/keyvault-secretsfor Node.js.npm install @azure/keyvault-secrets
Using the terminal, install the Azure Key Vault secrets library,@azure/keyvault-secretsfor Node.js.
npm install @azure/keyvault-secrets
npm install @azure/keyvault-secrets
Install the Azure Identity library,@azure/identitypackage to authenticate to a Key Vault.npm install @azure/identity
Install the Azure Identity library,@azure/identitypackage to authenticate to a Key Vault.
npm install @azure/identity
npm install @azure/identity
Import the code sample
Add the following code sample to a file namedindex.js. ReplaceYour-Key-Secret-NameandYour-Endpoint-Secret-Namewith the secret names that you set in your key vault.
index.js
Your-Key-Secret-Name
Your-Endpoint-Secret-Name
const { SecretClient } = require("@azure/keyvault-secrets");
const { DefaultAzureCredential } = require("@azure/identity");
// Load the .env file if it exists
const dotenv = require("dotenv");
dotenv.config();

async function main() {
    const credential = new DefaultAzureCredential();

    const keyVaultName = process.env["KEY_VAULT_NAME"];
    const url = "https://" + keyVaultName + ".vault.azure.net";

    const kvClient = new SecretClient(url, credential);

    // Set these variables to the names you created for your secrets
    const keySecretName = "Your-Key-Secret-Name";
    const endpointSecretName = "Your-Endpoint-Secret-Name";

    console.log("Retrieving secrets from ", keyVaultName);
    const retrievedKey = await (await kvClient.getSecret(keySecretName)).value;
    const retrievedEndpoint = await (await kvClient.getSecret(endpointSecretName)).value;
    console.log("Your secret key value is: ", retrievedKey);
    console.log("Your secret endpoint value is: ", retrievedEndpoint);
}

main().catch((error) => {
  console.error("An error occurred:", error);
  process.exit(1);
});
const { SecretClient } = require("@azure/keyvault-secrets");
const { DefaultAzureCredential } = require("@azure/identity");
// Load the .env file if it exists
const dotenv = require("dotenv");
dotenv.config();

async function main() {
    const credential = new DefaultAzureCredential();

    const keyVaultName = process.env["KEY_VAULT_NAME"];
    const url = "https://" + keyVaultName + ".vault.azure.net";

    const kvClient = new SecretClient(url, credential);

    // Set these variables to the names you created for your secrets
    const keySecretName = "Your-Key-Secret-Name";
    const endpointSecretName = "Your-Endpoint-Secret-Name";

    console.log("Retrieving secrets from ", keyVaultName);
    const retrievedKey = await (await kvClient.getSecret(keySecretName)).value;
    const retrievedEndpoint = await (await kvClient.getSecret(endpointSecretName)).value;
    console.log("Your secret key value is: ", retrievedKey);
    console.log("Your secret endpoint value is: ", retrievedEndpoint);
}

main().catch((error) => {
  console.error("An error occurred:", error);
  process.exit(1);
});
Run the sample application
Use the following command to run the application. Your key and endpoint secrets will be retrieved from your key vault.
node index.js
node index.js
Send a test Language service call (optional)
If you're using a multi-service resource or Language resource, you can updateyour applicationby following these steps to send an example Named Entity Recognition call by retrieving a key and endpoint from your key vault.
Install the Azure AI service for Language library,@azure/ai-text-analyticsto send API requests to theLanguage service.npm install @azure/ai-text-analytics@5.1.0
Install the Azure AI service for Language library,@azure/ai-text-analyticsto send API requests to theLanguage service.
npm install @azure/ai-text-analytics@5.1.0
npm install @azure/ai-text-analytics@5.1.0
Add the following code to your application:const { TextAnalyticsClient, AzureKeyCredential } = require("@azure/ai-text-analytics");
// Authenticate the language client with your key and endpoint
const languageClient = new TextAnalyticsClient(retrievedEndpoint,  new AzureKeyCredential(retrievedKey));

// Example for recognizing entities in text
console.log("Sending NER request")
const entityInputs = [
    "I had a wonderful trip to Seattle last week."
];
const entityResults = await languageClient.recognizeEntities(entityInputs);
entityResults.forEach(document => {
    console.log(`Document ID: ${document.id}`);
    document.entities.forEach(entity => {
        console.log(`\tName: ${entity.text} \tCategory: ${entity.category} \tSubcategory: ${entity.subCategory ? entity.subCategory : "N/A"}`);
        console.log(`\tScore: ${entity.confidenceScore}`);
    });
});
Add the following code to your application:
const { TextAnalyticsClient, AzureKeyCredential } = require("@azure/ai-text-analytics");
// Authenticate the language client with your key and endpoint
const languageClient = new TextAnalyticsClient(retrievedEndpoint,  new AzureKeyCredential(retrievedKey));

// Example for recognizing entities in text
console.log("Sending NER request")
const entityInputs = [
    "I had a wonderful trip to Seattle last week."
];
const entityResults = await languageClient.recognizeEntities(entityInputs);
entityResults.forEach(document => {
    console.log(`Document ID: ${document.id}`);
    document.entities.forEach(entity => {
        console.log(`\tName: ${entity.text} \tCategory: ${entity.category} \tSubcategory: ${entity.subCategory ? entity.subCategory : "N/A"}`);
        console.log(`\tScore: ${entity.confidenceScore}`);
    });
});
const { TextAnalyticsClient, AzureKeyCredential } = require("@azure/ai-text-analytics");
// Authenticate the language client with your key and endpoint
const languageClient = new TextAnalyticsClient(retrievedEndpoint,  new AzureKeyCredential(retrievedKey));

// Example for recognizing entities in text
console.log("Sending NER request")
const entityInputs = [
    "I had a wonderful trip to Seattle last week."
];
const entityResults = await languageClient.recognizeEntities(entityInputs);
entityResults.forEach(document => {
    console.log(`Document ID: ${document.id}`);
    document.entities.forEach(entity => {
        console.log(`\tName: ${entity.text} \tCategory: ${entity.category} \tSubcategory: ${entity.subCategory ? entity.subCategory : "N/A"}`);
        console.log(`\tScore: ${entity.confidenceScore}`);
    });
});
Run the application.
Run the application.
Next steps
SeeWhat are Azure AI servicesfor available features you can develop along withAzure Key Vault.
For additional information on secure application development, see:Best practices for using Azure Key VaultAzure AI services securityAzure security baseline for Azure AI services
Best practices for using Azure Key Vault
Azure AI services security
Azure security baseline for Azure AI services
Feedback
Was this page helpful?
Additional resources