Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Quickstart: Use Azure Cosmos DB for Table with Azure SDK for Java
Article
2025-04-08
2 contributors
Applies to: â Table
In this article
.NET
Python
Node.js
Java
Go
In this quickstart, you deploy a basic Azure Cosmos DB for Table application using the Azure SDK for Java. Azure Cosmos DB for Table is a schemaless data store allowing applications to store structured table data in the cloud. You learn how to create tables, rows, and perform basic tasks within your Azure Cosmos DB resource using the Azure SDK for Java.
API reference documentation|Library source code|Package (Maven)|Azure Developer CLI
Prerequisites
Azure Developer CLI
Docker Desktop
Java 21
If you don't have an Azure account, create afree accountbefore you begin.
Initialize the project
Use the Azure Developer CLI (azd) to create an Azure Cosmos DB for Table account and deploy a containerized sample application. The sample application uses the client library to manage, create, read, and query sample data.
azd
Open a terminal in an empty directory.
Open a terminal in an empty directory.
If you're not already authenticated, authenticate to the Azure Developer CLI usingazd auth login. Follow the steps specified by the tool to authenticate to the CLI using your preferred Azure credentials.azd auth login
If you're not already authenticated, authenticate to the Azure Developer CLI usingazd auth login. Follow the steps specified by the tool to authenticate to the CLI using your preferred Azure credentials.
azd auth login
azd auth login
azd auth login
Useazd initto initialize the project.azd init --template cosmos-db-table-java-quickstart
Useazd initto initialize the project.
azd init
azd init --template cosmos-db-table-java-quickstart
azd init --template cosmos-db-table-java-quickstart
During initialization, configure a unique environment name.
During initialization, configure a unique environment name.
Deploy the Azure Cosmos DB account usingazd up. The Bicep templates also deploy a sample web application.azd up
Deploy the Azure Cosmos DB account usingazd up. The Bicep templates also deploy a sample web application.
azd up
azd up
azd up
During the provisioning process, select your subscription, desired location, and target resource group. Wait for the provisioning process to complete. The process can takeapproximately five minutes.
During the provisioning process, select your subscription, desired location, and target resource group. Wait for the provisioning process to complete. The process can takeapproximately five minutes.
Once the provisioning of your Azure resources is done, a URL to the running web application is included in the output.Deploying services (azd deploy)

  (â) Done: Deploying service web
- Endpoint: <https://[container-app-sub-domain].azurecontainerapps.io>

SUCCESS: Your application was provisioned and deployed to Azure in 5 minutes 0 seconds.
Once the provisioning of your Azure resources is done, a URL to the running web application is included in the output.
Deploying services (azd deploy)

  (â) Done: Deploying service web
- Endpoint: <https://[container-app-sub-domain].azurecontainerapps.io>

SUCCESS: Your application was provisioned and deployed to Azure in 5 minutes 0 seconds.
Deploying services (azd deploy)

  (â) Done: Deploying service web
- Endpoint: <https://[container-app-sub-domain].azurecontainerapps.io>

SUCCESS: Your application was provisioned and deployed to Azure in 5 minutes 0 seconds.
Use the URL in the console to navigate to your web application in the browser. Observe the output of the running app.
Use the URL in the console to navigate to your web application in the browser. Observe the output of the running app.

Install the client library
The client library is available through Maven, as theazure-data-tablespackage.
azure-data-tables
Navigate to the/src/webfolder and open thepom.xmlfile.cd ./src
Navigate to the/src/webfolder and open thepom.xmlfile.
/src/web
cd ./src
cd ./src
If it doesn't already exist, add an entry for theazure-data-tablespackage.<dependency>
    <groupId>com.azure</groupId>
    <artifactId>azure-data-tables</artifactId>
</dependency>
If it doesn't already exist, add an entry for theazure-data-tablespackage.
azure-data-tables
<dependency>
    <groupId>com.azure</groupId>
    <artifactId>azure-data-tables</artifactId>
</dependency>
<dependency>
    <groupId>com.azure</groupId>
    <artifactId>azure-data-tables</artifactId>
</dependency>
Import libraries
Import all of the required namespaces into your application code.
import com.azure.core.http.rest.PagedFlux;
import com.azure.data.tables.TableAsyncClient;
import com.azure.data.tables.TableClientBuilder;
import com.azure.data.tables.models.ListEntitiesOptions;
import com.azure.data.tables.models.TableEntity;
import com.azure.identity.DefaultAzureCredential;
import com.azure.identity.DefaultAzureCredentialBuilder;
import com.azure.core.http.rest.PagedFlux;
import com.azure.data.tables.TableAsyncClient;
import com.azure.data.tables.TableClientBuilder;
import com.azure.data.tables.models.ListEntitiesOptions;
import com.azure.data.tables.models.TableEntity;
import com.azure.identity.DefaultAzureCredential;
import com.azure.identity.DefaultAzureCredentialBuilder;
Object model
TableServiceAsyncClient
TableAsyncClient
Code examples
Authenticate the client
Get a table
Create an entity
Get an entity
Query entities
The sample code in the template uses a table namedcosmicworks-products. Thecosmicworks-productstable contains details such as name, category, quantity, price, a unique identifier, and a sale flag for each product. The container uses aunique identifier* as the row key andcategoryas a partition key.
cosmicworks-products
cosmicworks-products
Authenticate the client
This sample creates a new instance of theTableServiceAsyncClientclass.
TableServiceAsyncClient
DefaultAzureCredential azureTokenCredential = new DefaultAzureCredentialBuilder()
    .build();

TableServiceAsyncClient client = new TableServiceClientBuilder()
    .endpoint("<azure-cosmos-db-table-account-endpoint>")
    .credential(credential)
    .buildAsyncClient();
DefaultAzureCredential azureTokenCredential = new DefaultAzureCredentialBuilder()
    .build();

TableServiceAsyncClient client = new TableServiceClientBuilder()
    .endpoint("<azure-cosmos-db-table-account-endpoint>")
    .credential(credential)
    .buildAsyncClient();
Get a table
This sample creates an instance of theTableAsyncClientclass using theGetTableClientmethod of theTableServiceClientclass.
TableAsyncClient
GetTableClient
TableServiceClient
TableAsyncClient table = client
    .getTableClient("<azure-cosmos-db-table-name>");
TableAsyncClient table = client
    .getTableClient("<azure-cosmos-db-table-name>");
Create an entity
The easiest way to create a new entity in a table is to usecreateEntity.
createEntity
String rowKey = "aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb";
String partitionKey = "gear-surf-surfboards";

TableEntity entity = new TableEntity(partitionKey, rowKey)
        .addProperty("Name", "Yamba Surfboard")
        .addProperty("Quantity", 12)
        .addProperty("Price", 850.00)
        .addProperty("Sale", false);
String rowKey = "aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb";
String partitionKey = "gear-surf-surfboards";

TableEntity entity = new TableEntity(partitionKey, rowKey)
        .addProperty("Name", "Yamba Surfboard")
        .addProperty("Quantity", 12)
        .addProperty("Price", 850.00)
        .addProperty("Sale", false);
Create an entity in the collection usingupsertEntity.
upsertEntity
Mono<Void> response = table.upsertEntity(entity);
Mono<Void> response = table.upsertEntity(entity);
Get an entity
You can retrieve a specific entity from a table usinggetEntity.
getEntity
String rowKey = "aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb";
String partitionKey = "gear-surf-surfboards";

TableEntity entity = table.getEntity(partitionKey, rowKey);
String rowKey = "aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb";
String partitionKey = "gear-surf-surfboards";

TableEntity entity = table.getEntity(partitionKey, rowKey);
Query entities
After you insert an entity, you can also run a query to get all entities that match a specific filter by usinglistEntitiesand theListEntitiesOptionsclass. Use thesetFiltermethod to specify a string OData filter.
listEntities
ListEntitiesOptions
setFilter
ListEntitiesOptions options = new ListEntitiesOptions()
    .setFilter("PartitionKey eq 'gear-surf-surfboards'");

PagedFlux<TableEntity> tableEntities = table.listEntities(options, null, null);
ListEntitiesOptions options = new ListEntitiesOptions()
    .setFilter("PartitionKey eq 'gear-surf-surfboards'");

PagedFlux<TableEntity> tableEntities = table.listEntities(options, null, null);
Parse the paginated results of the query by using a subscription.
tableEntities
    .DoOnNext(entity -> {
        // Do something
    });
tableEntities
    .DoOnNext(entity -> {
        // Do something
    });
Clean up resources
When you no longer need the sample application or resources, remove the corresponding deployment and all resources.
azd down
azd down
Related content
.NET Quickstart
Node.js Quickstart
Python Quickstart
Go Quickstart
Feedback
Was this page helpful?
Additional resources