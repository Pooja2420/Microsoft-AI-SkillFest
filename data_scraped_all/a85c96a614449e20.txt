Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Manage storage account access keys
Article
2024-11-12
16 contributors
In this article
In this article, you learn how to view, manage, and rotate storage account access keys. When you create a storage account, Azure generates two 512-bit storage account access keys for the account. These keys can be used to authorize access to data in your storage account via Shared Key authorization, or via SAS tokens that are signed with the shared key.
Microsoft recommends that you use Azure Key Vault to manage your access keys, and that you regularly rotate and regenerate your keys. Using Azure Key Vault makes it easy to rotate your keys without interruption to your applications. You can also manually rotate your keys.
Important
For optimal security, Microsoft recommends using Microsoft Entra ID with managed identities to authorize requests against blob, queue, and table data, whenever possible. Authorization with Microsoft Entra ID and managed identities provides superior security and ease of use over Shared Key authorization. To learn more about managed identities, seeWhat are managed identities for Azure resources. For an example of how to enable and use a managed identity for a .NET application, seeAuthenticating Azure-hosted apps to Azure resources with .NET.
For resources hosted outside of Azure, such as on-premises applications, you can use managed identities through Azure Arc. For example, apps running on Azure Arc-enabled servers can use managed identities to connect to Azure services. To learn more, seeAuthenticate against Azure resources with Azure Arc-enabled servers.
For scenarios where shared access signatures (SAS) are used, Microsoft recommends using a user delegation SAS. A user delegation SAS is secured with Microsoft Entra credentials instead of the account key. To learn about shared access signatures, seeGrant limited access to data with shared access signatures. For an example of how to create and use a user delegation SAS with .NET, seeCreate a user delegation SAS for a blob with .NET.
Protect your access keys
Storage account access keys provide full access to the storage account data and the ability to generate SAS tokens. Always be careful to protect your access keys. Use Azure Key Vault to manage and rotate your keys securely. Access to the shared key grants a user full access to a storage accountâs data. Access to shared keys should be carefully limited and monitored. Use user delegation SAS tokens with limited scope of access in scenarios where Microsoft Entra ID based authorization can't be used. Avoid hard-coding access keys or saving them anywhere in plain text that is accessible to others. Rotate your keys if you believe they might have been compromised.
Important
To prevent users from accessing data in your storage account with Shared Key, you can disallow Shared Key authorization for the storage account. Granular access to data with least privileges necessary is recommended as a security best practice. Microsoft Entra ID based authorization using managed identities should be used for scenarios that support OAuth. Kerberos or SMTP should be used for Azure Files over SMB. For Azure Files over REST, SAS tokens can be used. Shared key access should be disabled if not required to prevent its inadvertent use. For more information, seePrevent Shared Key authorization for an Azure Storage account.
To protect an Azure Storage account with Microsoft Entra Conditional Access policies, you must disallow Shared Key authorization for the storage account.
If you have disabled shared key access and you are seeing Shared Key authorization reported in the diagnostic logs, this indicates that trusted access is being used to access storage. For more details, seeTrusted access for resources registered in your Microsoft Entra tenant.
View account access keys
You can view and copy your account access keys with the Azure portal, PowerShell, or Azure CLI. The Azure portal also provides a connection string for your storage account that you can copy.
Portal
PowerShell
Azure CLI
To view and copy your storage account access keys or connection string from the Azure portal:
In theAzure portal, go to your storage account.
In theAzure portal, go to your storage account.
From the resource menu underSecurity + networking, selectAccess keys. Your account access keys appear, as well as the complete connection string for each key.
From the resource menu underSecurity + networking, selectAccess keys. Your account access keys appear, as well as the complete connection string for each key.
SelectShow keysto show your access keys and connection strings and to enable buttons to copy the values.
SelectShow keysto show your access keys and connection strings and to enable buttons to copy the values.
Underkey1, find theKeyvalue. Select theCopybutton to copy the account key.
Underkey1, find theKeyvalue. Select theCopybutton to copy the account key.
Alternately, you can copy the entire connection string. Underkey1, find theConnection stringvalue. Select theCopybutton to copy the connection string.
Alternately, you can copy the entire connection string. Underkey1, find theConnection stringvalue. Select theCopybutton to copy the connection string.

To retrieve your account access keys with PowerShell, call theGet-AzStorageAccountKeycommand.
The following example retrieves the first key. To retrieve the second key, useValue[1]instead ofValue[0]. Remember to replace the placeholder values in brackets with your own values.
Value[1]
Value[0]
$storageAccountKey = `
    (Get-AzStorageAccountKey
    -ResourceGroupName <resource-group> `
    -Name <storage-account>).Value[0]
$storageAccountKey = `
    (Get-AzStorageAccountKey
    -ResourceGroupName <resource-group> `
    -Name <storage-account>).Value[0]
To list your account access keys with Azure CLI, call theaz storage account keys listcommand, as shown in the following example. Remember to replace the placeholder values in brackets with your own values.
az storage account keys list \
  --resource-group <resource-group> \
  --account-name <storage-account>
az storage account keys list \
  --resource-group <resource-group> \
  --account-name <storage-account>
You can use either of the two keys to access Azure Storage, but in general it's a good practice to use the first key, and reserve the use of the second key for when you are rotating keys.
To view or read an account's access keys, the user must either be a Service Administrator, or must be assigned an Azure role that includes theMicrosoft.Storage/storageAccounts/listkeys/action. Some Azure built-in roles that include this action are theOwner,Contributor, andStorage Account Key Operator Service Roleroles. For more information about the Service Administrator role, seeAzure roles, Microsoft Entra roles, and classic subscription administrator roles. For detailed information about built-in roles for Azure Storage, see theStoragesection inAzure built-in roles for Azure RBAC.
Use Azure Key Vault to manage your access keys
Microsoft recommends using Azure Key Vault to manage and rotate your access keys. Your application can securely access your keys in Key Vault, so that you can avoid storing them with your application code. For more information about using Key Vault for key management, see the following articles:
Manage storage account keys with Azure Key Vault and PowerShell
Manage storage account keys with Azure Key Vault and the Azure CLI
Manually rotate access keys
Microsoft recommends that you rotate your access keys periodically to help keep your storage account secure. If possible, use Azure Key Vault to manage your access keys. If you are not using Key Vault, you will need to rotate your keys manually.
Two access keys are assigned so that you can rotate your keys. Having two keys ensures that your application maintains access to Azure Storage throughout the process.
Warning
Regenerating your access keys can affect any applications or Azure services that are dependent on the storage account key. Any clients that use the account key to access the storage account must be updated to use the new key, including media services, cloud, desktop and mobile applications, and graphical user interface applications for Azure Storage, such asAzure Storage Explorer.
Additionally, rotating or regenerating access keys revokes shared access signatures (SAS) that are generated based on that key. After access key rotation, you must regenerateaccountandserviceSAS tokens to avoid disruptions to applications. Note thatuser delegationSAS tokens are secured with Microsoft Entra credentials and aren't affected by key rotation.
If you plan to manually rotate access keys, Microsoft recommends that you set a key expiration policy. For more information, seeCreate a key expiration policy.
After you create the key expiration policy, you can use Azure Policy to monitor whether a storage account's keys have been rotated within the recommended interval. For details, seeCheck for key expiration policy violations.
Portal
PowerShell
Azure CLI
To rotate your storage account access keys in the Azure portal:
Update the connection strings in your application code to reference the secondary access key for the storage account.
Navigate to your storage account in theAzure portal.
UnderSecurity + networking, selectAccess keys.
To regenerate the primary access key for your storage account, select theRegeneratebutton next to the primary access key.
Update the connection strings in your code to reference the new primary access key.
Regenerate the secondary access key in the same manner.
To rotate your storage account access keys with PowerShell:
Update the connection strings in your application code to reference the secondary access key for the storage account.
Update the connection strings in your application code to reference the secondary access key for the storage account.
Call theNew-AzStorageAccountKeycommand to regenerate the primary access key, as shown in the following example:New-AzStorageAccountKey -ResourceGroupName <resource-group> `
  -Name <storage-account> `
  -KeyName key1
Call theNew-AzStorageAccountKeycommand to regenerate the primary access key, as shown in the following example:
New-AzStorageAccountKey -ResourceGroupName <resource-group> `
  -Name <storage-account> `
  -KeyName key1
New-AzStorageAccountKey -ResourceGroupName <resource-group> `
  -Name <storage-account> `
  -KeyName key1
Update the connection strings in your code to reference the new primary access key.
Update the connection strings in your code to reference the new primary access key.
Regenerate the secondary access key in the same manner. To regenerate the secondary key, usekey2as the key name instead ofkey1.
Regenerate the secondary access key in the same manner. To regenerate the secondary key, usekey2as the key name instead ofkey1.
key2
key1
To rotate your storage account access keys with Azure CLI:
Update the connection strings in your application code to reference the secondary access key for the storage account.
Update the connection strings in your application code to reference the secondary access key for the storage account.
Call theaz storage account keys renewcommand to regenerate the primary access key, as shown in the following example:az storage account keys renew \
  --resource-group <resource-group> \
  --account-name <storage-account> \
  --key primary
Call theaz storage account keys renewcommand to regenerate the primary access key, as shown in the following example:
az storage account keys renew \
  --resource-group <resource-group> \
  --account-name <storage-account> \
  --key primary
az storage account keys renew \
  --resource-group <resource-group> \
  --account-name <storage-account> \
  --key primary
Update the connection strings in your code to reference the new primary access key.
Update the connection strings in your code to reference the new primary access key.
Regenerate the secondary access key in the same manner. To regenerate the secondary key, usesecondaryas the key name instead ofprimary.
Regenerate the secondary access key in the same manner. To regenerate the secondary key, usesecondaryas the key name instead ofprimary.
secondary
primary
Caution
Microsoft recommends using only one of the keys in all of your applications at the same time. If you use Key 1 in some places and Key 2 in others, you will not be able to rotate your keys without some application losing access.
To rotate an account's access keys, the user must either be a Service Administrator, or must be assigned an Azure role that includes theMicrosoft.Storage/storageAccounts/regeneratekey/action. Some Azure built-in roles that include this action are theOwner,Contributor, andStorage Account Key Operator Service Roleroles. For more information about the Service Administrator role, seeAzure roles, Microsoft Entra roles, and classic subscription administrator roles. For detailed information about Azure built-in roles for Azure Storage, see theStoragesection inAzure built-in roles for Azure RBAC.
Create a key expiration policy
A key expiration policy enables you to set a reminder for the rotation of the account access keys. The reminder is displayed if the specified interval has elapsed and the keys have not yet been rotated. After you create a key expiration policy, you can monitor your storage accounts for compliance to ensure that the account access keys are rotated regularly.
Note
Before you can create a key expiration policy, you may need to rotate each of your account access keys at least once.
Portal
PowerShell
Azure CLI
To create a key expiration policy in the Azure portal:
In theAzure portal, go to your storage account.
UnderSecurity + networking, selectAccess keys. Your account access keys appear, as well as the complete connection string for each key.
Select theSet rotation reminderbutton. If theSet rotation reminderbutton is grayed out, you will need to rotate each of your keys. Follow the steps described inManually rotate access keysto rotate the keys.
InSet a reminder to rotate access keys, select theEnable key rotation reminderscheckbox and set a frequency for the reminder.
SelectSave.

To create a key expiration policy with PowerShell, use theSet-AzStorageAccountcommand and set the-KeyExpirationPeriodInDayparameter to the interval in days until the access key should be rotated.
-KeyExpirationPeriodInDay
TheKeyCreationTimeproperty indicates when the account access keys were created or last rotated. Older accounts may have a null value for theKeyCreationTimeproperty because it has not yet been set. If theKeyCreationTimeproperty is null, you cannot create a key expiration policy until you rotate the keys. For this reason, it's a good idea to check theKeyCreationTimeproperty for the storage account before you attempt to set the key expiration policy.
KeyCreationTime
KeyCreationTime
KeyCreationTime
KeyCreationTime
The following example checks whether theKeyCreationTimeproperty has been set for each key. If theKeyCreationTimeproperty has a value, then a key expiration policy is created for the storage account. Remember to replace the placeholder values in brackets with your own values.
KeyCreationTime
KeyCreationTime
$rgName = "<resource-group>"
$accountName = "<account-name>"

$account = Get-AzStorageAccount -ResourceGroupName $rgName -Name $accountName

# Check whether the KeyCreationTime property has a value for each key 
# before creating the key expiration policy.
if ($account.KeyCreationTime.Key1 -eq $null -or $account.KeyCreationTime.Key2 -eq $null)
{
    Write-Host("You must regenerate both keys at least once before setting expiration policy")
}
else
{
    $account = Set-AzStorageAccount -ResourceGroupName $rgName -Name `
        $accountName  -KeyExpirationPeriodInDay 60
}
$rgName = "<resource-group>"
$accountName = "<account-name>"

$account = Get-AzStorageAccount -ResourceGroupName $rgName -Name $accountName

# Check whether the KeyCreationTime property has a value for each key 
# before creating the key expiration policy.
if ($account.KeyCreationTime.Key1 -eq $null -or $account.KeyCreationTime.Key2 -eq $null)
{
    Write-Host("You must regenerate both keys at least once before setting expiration policy")
}
else
{
    $account = Set-AzStorageAccount -ResourceGroupName $rgName -Name `
        $accountName  -KeyExpirationPeriodInDay 60
}
You can also set the key expiration policy as you create a storage account by setting the-KeyExpirationPeriodInDayparameter of theNew-AzStorageAccountcommand.
-KeyExpirationPeriodInDay
To verify that the policy has been applied, check the storage account'sKeyPolicyproperty.
KeyPolicy
$account.KeyPolicy
$account.KeyPolicy
To create a key expiration policy with Azure CLI, use theaz storage account updatecommand and set the--key-exp-daysparameter to the interval in days until the access key should be rotated.
--key-exp-days
ThekeyCreationTimeproperty indicates when the account access keys were created or last rotated. Older accounts may have a null value for thekeyCreationTimeproperty because it has not yet been set. If thekeyCreationTimeproperty is null, you cannot create a key expiration policy until you rotate the keys. For this reason, it's a good idea to check thekeyCreationTimeproperty for the storage account before you attempt to set the key expiration policy.
keyCreationTime
keyCreationTime
keyCreationTime
keyCreationTime
The following example checks whether thekeyCreationTimeproperty has been set for each key. If thekeyCreationTimeproperty has a value, then a key expiration policy is created for the storage account. Remember to replace the placeholder values in brackets with your own values.
keyCreationTime
keyCreationTime
key1_create_time=$(az storage account show \
    --name <storage-account> \
    --resource-group <resource-group> \
    --query 'keyCreationTime.key1' \
    --output tsv)
key2_create_time=$(az storage account show \
    --name <storage-account> \
    --resource-group <resource-group> \
    --query 'keyCreationTime.key2' \
    --output tsv)

if [ -z "$key1_create_time" ] || [ -z "$key2_create_time" ]; 
then
    echo "You must regenerate both keys at least once before setting expiration policy"
else
    az storage account update \
        --name <storage-account> \
        --resource-group <resource-group> \
        --key-exp-days 60
fi
key1_create_time=$(az storage account show \
    --name <storage-account> \
    --resource-group <resource-group> \
    --query 'keyCreationTime.key1' \
    --output tsv)
key2_create_time=$(az storage account show \
    --name <storage-account> \
    --resource-group <resource-group> \
    --query 'keyCreationTime.key2' \
    --output tsv)

if [ -z "$key1_create_time" ] || [ -z "$key2_create_time" ]; 
then
    echo "You must regenerate both keys at least once before setting expiration policy"
else
    az storage account update \
        --name <storage-account> \
        --resource-group <resource-group> \
        --key-exp-days 60
fi
You can also set the key expiration policy as you create a storage account by setting the--key-exp-daysparameter of theaz storage account createcommand.
--key-exp-days
To verify that the policy has been applied, call theaz storage account showcommand, and use the string{KeyPolicy:keyPolicy}for the-queryparameter.
{KeyPolicy:keyPolicy}
-query
az storage account show \
  -n <storage-account-name> \
  -g <resource-group-name> \
  --query "{KeyPolicy:keyPolicy}"
az storage account show \
  -n <storage-account-name> \
  -g <resource-group-name> \
  --query "{KeyPolicy:keyPolicy}"
The key expiration period appears in the console output.
{
  "KeyPolicy": {
    "enableAutoRotation": false,
    "keyExpirationPeriodInDays": 60
  }
}
{
  "KeyPolicy": {
    "enableAutoRotation": false,
    "keyExpirationPeriodInDays": 60
  }
}
Check for key expiration policy violations
You can monitor your storage accounts with Azure Policy to ensure that account access keys have been rotated within the recommended period. Azure Storage provides a built-in policy for ensuring that storage account access keys are not expired. For more information about the built-in policy, seeStorage account keys should not be expiredinList of built-in policy definitions.
Assign the built-in policy for a resource scope
Follow these steps to assign the built-in policy to the appropriate scope in the Azure portal:
In the Azure portal, search forPolicyto display the Azure Policy dashboard.
In the Azure portal, search forPolicyto display the Azure Policy dashboard.
In theAuthoringsection, selectAssignments.
In theAuthoringsection, selectAssignments.
ChooseAssign policy.
ChooseAssign policy.
On theBasicstab of theAssign policypage, in theScopesection, specify the scope for the policy assignment. Select theMorebutton to choose the subscription and optional resource group.
On theBasicstab of theAssign policypage, in theScopesection, specify the scope for the policy assignment. Select theMorebutton to choose the subscription and optional resource group.
For thePolicy definitionfield, select theMorebutton, and enterstorage account keysin theSearchfield. Select the policy definition namedStorage account keys should not be expired.
For thePolicy definitionfield, select theMorebutton, and enterstorage account keysin theSearchfield. Select the policy definition namedStorage account keys should not be expired.

SelectReview + createto assign the policy definition to the specified scope.
SelectReview + createto assign the policy definition to the specified scope.

Monitor compliance with the key expiration policy
To monitor your storage accounts for compliance with the key expiration policy, follow these steps:
On the Azure Policy dashboard, locate the built-in policy definition for the scope that you specified in the policy assignment. You can search forStorage account keys should not be expiredin theSearchbox to filter for the built-in policy.
On the Azure Policy dashboard, locate the built-in policy definition for the scope that you specified in the policy assignment. You can search forStorage account keys should not be expiredin theSearchbox to filter for the built-in policy.
Select the policy name with the desired scope.
Select the policy name with the desired scope.
On thePolicy assignmentpage for the built-in policy, selectView compliance. Any storage accounts in the specified subscription and resource group that do not meet the policy requirements appear in the compliance report.
On thePolicy assignmentpage for the built-in policy, selectView compliance. Any storage accounts in the specified subscription and resource group that do not meet the policy requirements appear in the compliance report.

To bring a storage account into compliance, rotate the account access keys.
Next steps
Azure storage account overview
Create a storage account
Prevent Shared Key authorization for an Azure Storage account
Feedback
Was this page helpful?
Additional resources