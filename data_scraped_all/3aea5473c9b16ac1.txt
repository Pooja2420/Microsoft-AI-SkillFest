Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Tutorial: Use identity-based connections instead of secrets with triggers and bindings
Article
2024-07-02
4 contributors
In this article
This tutorial shows you how to configure Azure Functions to connect to Azure Service Bus queues by using managed identities, instead of secrets stored in the function app settings. The tutorial is a continuation of theCreate a function app without default storage secrets in its definitiontutorial. To learn more about identity-based connections, seeConfigure an identity-based connection..
While the procedures shown work generally for all languages, this tutorial currently supports C# class library functions on Windows specifically.
In this tutorial, you learn how to:
Create a Service Bus namespace and queue.
Configure your function app with a managed identity.
Create a role assignment granting that identity permission to read from the Service Bus queue.
Create and deploy a function app with a Service Bus trigger.
Verify your identity-based connection to the Service Bus.
Prerequisite
Complete the previous tutorial:Create a function app with identity-based connections.
Create a Service Bus namespace and queue
In theAzure portal, chooseCreate a resource (+).
In theAzure portal, chooseCreate a resource (+).
On theCreate a resourcepage, search for and selectService Bus, and then selectCreate.
On theCreate a resourcepage, search for and selectService Bus, and then selectCreate.
On theBasicspage, use the following table to configure the Service Bus namespace settings. Use the default values for the remaining options.OptionSuggested valueDescriptionSubscriptionYour subscriptionThe subscription under which your resources are created.Resource groupmyResourceGroupThe resource group you created with your function app.Namespace nameGlobally unique nameThe namespace of your instance from which to trigger your function. Because the namespace is publicly accessible, you must use a name that is globally unique across Azure. The name must also be between 6 and 50 characters in length, contain only alphanumeric characters and dashes, and can't start with a number.LocationmyFunctionRegionThe region where you created your function app.Pricing tierBasicThe basic Service Bus tier.
On theBasicspage, use the following table to configure the Service Bus namespace settings. Use the default values for the remaining options.
SelectReview + create. After validation finishes, selectCreate.
SelectReview + create. After validation finishes, selectCreate.
After deployment completes, selectGo to resource.
After deployment completes, selectGo to resource.
In your new Service Bus namespace, select+ Queueto add a queue.
In your new Service Bus namespace, select+ Queueto add a queue.
Entermyinputqueueas the new queue's name and selectCreate.
Entermyinputqueueas the new queue's name and selectCreate.
Now that you have a queue, you can add a role assignment to the managed identity of your function app.
Configure your Service Bus trigger with a managed identity
To use Service Bus triggers with identity-based connections, you need to add theAzure Service Bus Data Receiverrole assignment to the managed identity in your function app. This role is required when using managed identities to trigger off of your Service Bus namespace. You can also add your own account to this role, which makes it possible to connect to the Service Bus namespace during local testing.
Note
Role requirements for using identity-based connections vary depending on the service and how you are connecting to it. Needs vary across triggers, input bindings, and output bindings. For more information about specific role requirements, see the trigger and binding documentation for the service.
In your Service Bus namespace that you created, selectAccess control (IAM). This page is where you can view and configure who has access to the resource.
In your Service Bus namespace that you created, selectAccess control (IAM). This page is where you can view and configure who has access to the resource.
Select+ Addand selectAdd role assignment.
Select+ Addand selectAdd role assignment.
Search forAzure Service Bus Data Receiver, select it, and then selectNext.
Search forAzure Service Bus Data Receiver, select it, and then selectNext.
On theMemberstab, underAssign access to, chooseManaged Identity
On theMemberstab, underAssign access to, chooseManaged Identity
SelectSelect membersto open theSelect managed identitiespanel.
SelectSelect membersto open theSelect managed identitiespanel.
Confirm that theSubscriptionis the one in which you created the resources earlier.
Confirm that theSubscriptionis the one in which you created the resources earlier.
In theManaged identityselector, chooseFunction Appfrom theSystem-assigned managed identitycategory. TheFunction Applabel might have a number in parentheses next to it, indicating the number of apps in the subscription with system-assigned identities.
In theManaged identityselector, chooseFunction Appfrom theSystem-assigned managed identitycategory. TheFunction Applabel might have a number in parentheses next to it, indicating the number of apps in the subscription with system-assigned identities.
Your app should appear in a list below the input fields. If you don't see it, you can use theSelectbox to filter the results with your app's name.
Your app should appear in a list below the input fields. If you don't see it, you can use theSelectbox to filter the results with your app's name.
Select your application. It should move down into theSelected memberssection. SelectSelect.
Select your application. It should move down into theSelected memberssection. SelectSelect.
Back on theAdd role assignmentscreen, selectReview + assign. Review the configuration, and then selectReview + assign.
Back on theAdd role assignmentscreen, selectReview + assign. Review the configuration, and then selectReview + assign.
You've granted your function app access to the Service Bus namespace using managed identities.
Connect to the Service Bus in your function app
In the portal, search for the function app you created in theprevious tutorial, or browse to it in theFunction Apppage.
In the portal, search for the function app you created in theprevious tutorial, or browse to it in theFunction Apppage.
In your function app, expandSettings, and then selectEnvironment variables.
In your function app, expandSettings, and then selectEnvironment variables.
In theApp settingstab, select+ Addto create a setting. Use the information in the following table to enter theNameandValuefor the new setting:NameValueDescriptionServiceBusConnection__fullyQualifiedNamespace<SERVICE_BUS_NAMESPACE>.servicebus.windows.netThis setting connects your function app to the Service Bus using an identity-based connection instead of secrets.
In theApp settingstab, select+ Addto create a setting. Use the information in the following table to enter theNameandValuefor the new setting:
SelectApply, and then selectApplyandConfirmto save your changes and restart the app function.
SelectApply, and then selectApplyandConfirmto save your changes and restart the app function.
Note
When you useAzure App ConfigurationorKey Vaultto provide settings for Managed Identity connections, setting names should use a valid key separator, such as:or/, in place of the__to ensure names are resolved correctly.
:
/
__
For example,ServiceBusConnection:fullyQualifiedNamespace.
ServiceBusConnection:fullyQualifiedNamespace
Now that you've prepared the function app to connect to the Service Bus namespace using a managed identity, you can add a new function that uses a Service Bus trigger to your local project.
Add a Service Bus triggered function
Run thefunc initcommand, as follows, to create a functions project in a folder named LocalFunctionProj with the specified runtime:func init LocalFunctionProj --dotnet
Run thefunc initcommand, as follows, to create a functions project in a folder named LocalFunctionProj with the specified runtime:
func init
func init LocalFunctionProj --dotnet
func init LocalFunctionProj --dotnet
Navigate to the project folder:cd LocalFunctionProj
Navigate to the project folder:
cd LocalFunctionProj
cd LocalFunctionProj
In the root project folder, run the following command:dotnet add package Microsoft.Azure.WebJobs.Extensions.ServiceBus --version 5.2.0This command replaces the default version of the Service Bus extension package with a version that supports managed identities.
In the root project folder, run the following command:
dotnet add package Microsoft.Azure.WebJobs.Extensions.ServiceBus --version 5.2.0
dotnet add package Microsoft.Azure.WebJobs.Extensions.ServiceBus --version 5.2.0
This command replaces the default version of the Service Bus extension package with a version that supports managed identities.
Run the following command to add a Service Bus triggered function to the project:func new --name ServiceBusTrigger --template ServiceBusQueueTriggerThis command adds the code for a new Service Bus trigger and a reference to the extension package. You need to add a Service Bus namespace connection setting for this trigger.
Run the following command to add a Service Bus triggered function to the project:
func new --name ServiceBusTrigger --template ServiceBusQueueTrigger
func new --name ServiceBusTrigger --template ServiceBusQueueTrigger
This command adds the code for a new Service Bus trigger and a reference to the extension package. You need to add a Service Bus namespace connection setting for this trigger.
Open the newServiceBusTrigger.csproject file and replace theServiceBusTriggerclass with the following code:public static class ServiceBusTrigger
{
    [FunctionName("ServiceBusTrigger")]
    public static void Run([ServiceBusTrigger("myinputqueue", 
        Connection = "ServiceBusConnection")]string myQueueItem, ILogger log)
    {
        log.LogInformation($"C# ServiceBus queue trigger function processed message: {myQueueItem}");
    }
}This code sample updates the queue name tomyinputqueue, which is the same name as you queue you created earlier. It also sets the name of the Service Bus connection toServiceBusConnection. This name is the Service Bus namespace used by the identity-based connectionServiceBusConnection__fullyQualifiedNamespaceyou configured in the portal.
Open the newServiceBusTrigger.csproject file and replace theServiceBusTriggerclass with the following code:
ServiceBusTrigger
public static class ServiceBusTrigger
{
    [FunctionName("ServiceBusTrigger")]
    public static void Run([ServiceBusTrigger("myinputqueue", 
        Connection = "ServiceBusConnection")]string myQueueItem, ILogger log)
    {
        log.LogInformation($"C# ServiceBus queue trigger function processed message: {myQueueItem}");
    }
}
public static class ServiceBusTrigger
{
    [FunctionName("ServiceBusTrigger")]
    public static void Run([ServiceBusTrigger("myinputqueue", 
        Connection = "ServiceBusConnection")]string myQueueItem, ILogger log)
    {
        log.LogInformation($"C# ServiceBus queue trigger function processed message: {myQueueItem}");
    }
}
This code sample updates the queue name tomyinputqueue, which is the same name as you queue you created earlier. It also sets the name of the Service Bus connection toServiceBusConnection. This name is the Service Bus namespace used by the identity-based connectionServiceBusConnection__fullyQualifiedNamespaceyou configured in the portal.
myinputqueue
ServiceBusConnection
ServiceBusConnection__fullyQualifiedNamespace
Note
If you try to run your functions now usingfunc start, you'll receive an error. This is because you don't have an identity-based connection defined locally. If you want to run your function locally, set the app settingServiceBusConnection__fullyQualifiedNamespaceinlocal.settings.jsonas you did in [the previous section](#connect-to-the service-bus-in-your-function-app). In addition, you need to assign the role to your developer identity. For more information, seelocal development with identity-based connections.
func start
ServiceBusConnection__fullyQualifiedNamespace
local.settings.json
Note
When usingAzure App ConfigurationorKey Vaultto provide settings for Managed Identity connections, setting names should use a valid key separator such as:or/in place of the__to ensure names are resolved correctly.
:
/
__
For example,ServiceBusConnection:fullyQualifiedNamespace.
ServiceBusConnection:fullyQualifiedNamespace
Publish the updated project
Run the following command to locally generate the files needed for the deployment package:dotnet publish --configuration Release
Run the following command to locally generate the files needed for the deployment package:
dotnet publish --configuration Release
dotnet publish --configuration Release
Browse to the\bin\Release\netcoreapp3.1\publishsubfolder and create a .zip file from its contents.
Browse to the\bin\Release\netcoreapp3.1\publishsubfolder and create a .zip file from its contents.
\bin\Release\netcoreapp3.1\publish
Publish the .zip file by running the following command, replacing theFUNCTION_APP_NAME,RESOURCE_GROUP_NAME, andPATH_TO_ZIPparameters as appropriate:az functionapp deploy -n FUNCTION_APP_NAME -g RESOURCE_GROUP_NAME --src-path PATH_TO_ZIP
Publish the .zip file by running the following command, replacing theFUNCTION_APP_NAME,RESOURCE_GROUP_NAME, andPATH_TO_ZIPparameters as appropriate:
FUNCTION_APP_NAME
RESOURCE_GROUP_NAME
PATH_TO_ZIP
az functionapp deploy -n FUNCTION_APP_NAME -g RESOURCE_GROUP_NAME --src-path PATH_TO_ZIP
az functionapp deploy -n FUNCTION_APP_NAME -g RESOURCE_GROUP_NAME --src-path PATH_TO_ZIP
Now that you've updated the function app with the new trigger, you can verify that it works using the identity.
Validate your changes
In the portal, search forApplication Insightsand selectApplication InsightsunderServices.
In the portal, search forApplication Insightsand selectApplication InsightsunderServices.
Application Insights
InApplication Insights, browse or search for your named instance.
InApplication Insights, browse or search for your named instance.
In your instance, selectLive MetricsunderInvestigate.
In your instance, selectLive MetricsunderInvestigate.
Keep the previous tab open, and open the Azure portal in a new tab. In your new tab, navigate to your Service Bus namespace, selectQueuesfrom the left menu.
Keep the previous tab open, and open the Azure portal in a new tab. In your new tab, navigate to your Service Bus namespace, selectQueuesfrom the left menu.
Select your queue namedmyinputqueue.
Select your queue namedmyinputqueue.
myinputqueue
SelectService Bus Explorerfrom the left menu.
SelectService Bus Explorerfrom the left menu.
Send a test message.
Send a test message.
Select your openLive Metricstab and see the Service Bus queue execution.
Select your openLive Metricstab and see the Service Bus queue execution.
Congratulations! You have successfully set up your Service Bus queue trigger with a managed identity.
Clean up resources
In the preceding steps, you created Azure resources in a resource group. If you don't expect to need these resources in the future, you can delete them by deleting the resource group.
From the Azure portal menu orHomepage, selectResource groups. Then, on theResource groupspage, selectmyResourceGroup.
On themyResourceGrouppage, make sure that the listed resources are the ones you want to delete.
SelectDelete resource group, typemyResourceGroupin the text box to confirm, and then selectDelete.
Next steps
In this tutorial, you created a function app with identity-based connections.
Advance to the next article to learn how to manage identity.
Managed identity in Azure Functions
Feedback
Was this page helpful?
Additional resources