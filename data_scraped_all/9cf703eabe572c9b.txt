Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Azure Functions runtime versions overview
Article
2025-03-25
35 contributors
In this article
Azure Functions currently supports two versions of the runtime host. The following table details the currently supported runtime versions, their support level, and when they should be used:
Important
As of December 13, 2022, function apps running on versions 2.x and 3.x of the Azure Functions runtime reached the end of extended support. For more information, seeRetired versions.
This article details some of the differences between supported versions, how you can create each version, and how to change the version on which your functions run.
Levels of support
There are two levels of support:
Generally available (GA)- Fully supported and approved for production use.
Preview- Not yet supported, but expected to reach GA status in the future.
Languages
All functions in a function app must share the same language. You choose the language of functions in your function app when you create the app. The language of your function app is maintained in theFUNCTIONS_WORKER_RUNTIMEsetting, and can't be changed when there are existing functions.
Make sure to select your preferred development language at thetop of the article.
The following table shows the .NET versions supported by Azure Functions.
The supported version of .NET depends on both your Functions runtime version and your chosen execution model:
Isolated worker model
In-process model
Your function code runs in a separate .NET worker process. Use withsupported versions of .NET and .NET Framework. To learn more, seeGuide for running C# Azure Functions in the isolated worker model.
Important
Support will end for the in-process model on November 10, 2026. We highly recommend that youmigrate your apps to the isolated worker modelfor full support.
Your function code runs in the same process as the Functions host process. Supports onlyLong Term Support (LTS) versions of .NET. To learn more, seeDevelop C# class library functions using Azure Functions.
v4.x
v1.x
v4.x
v1.x
.NET 6 was previously supported on the in-process model but reached the end of official support onNovember 12, 2024.
For more information, seeDevelop C# class library functions using Azure Functionsand theAzure Functions C# script developer reference.
Important
Support will end for version 1.x of the Azure Functions runtime on September 14, 2026. We highly recommend that youmigrate your apps to version 4.xfor full support.
For more information, seeDevelop C# class library functions using Azure Functionsand theAzure Functions C# script developer reference.
.NET 6 was previously supported on the isolated worker model but reached the end of official support onNovember 12, 2024.
.NET 7 was previously supported on the isolated worker model but reached the end of official support onMay 14, 2024.
For more information, seeGuide for running C# Azure Functions in the isolated worker model.
Running C# functions in an isolated worker process isn't supported by version 1.x of the Functions runtime. Instead choose theIn-processtab or choosev4.x.
The following table shows the language versions supported for Java functions.
For more information on developing and running Java functions, seeAzure Functions Java developer guide.
The following table shows the language versions supported for Node.js functions.
TypeScript is supported through transpiling to JavaScript. For more information, see theAzure Functions Node.js developer guide.
The following table shows the language version supported for PowerShell functions.
For more information, seeAzure Functions PowerShell developer guide.
The following table shows the language versions supported for Python functions.
For more information, seeAzure Functions Python developer guide.
For information about planned changes to language support, see theAzure roadmap updates.
For information about the language versions of previously supported versions of the Functions runtime, seeRetired runtime versions.
Run on a specific version
The version of the Functions runtime used by published apps in Azure is dictated by theFUNCTIONS_EXTENSION_VERSIONapplication setting. In some cases and for certain languages, other settings can apply.
FUNCTIONS_EXTENSION_VERSION
By default, function apps created in the Azure portal, by the Azure CLI, or from Visual Studio tools are set to version 4.x. You can modify this version if needed. You can only downgrade the runtime version to 1.x after you create your function app but before you add any functions. Updating to a later major version is allowed even with apps that have existing functions.
Migrating existing function apps
When your app has existing functions, you must take precautions before moving to a later major runtime version. The following articles detail breaking changes between major versions, including language-specific breaking changes. They also provide you with step-by-step instructions for a successful migration of your existing function app.
Migrate from runtime version 3.x to version 4.x
Migrate from runtime version 1.x to version 4.x
Changing the version of apps in Azure
The following major runtime version values are used:
~4
~1
Important
Don't arbitrarily change this app setting, because other app setting changes and changes to your function code might be required. For existing function apps, follow themigration instructions.
Pinning to a specific minor version
To resolve issues that your function app could have when running on the latest major version, you must temporarily pin your app to a specific minor version. Pinning gives you time to get your app running correctly on the latest major version. The way that you pin to a minor version differs between Windows and Linux. To learn more, seeHow to target Azure Functions runtime versions.
Older minor versions are periodically removed from Functions. For the latest news about Azure Functions releases, including the removal of specific older minor versions, monitorAzure App Service announcements.
Minimum extension versions
There's technically not a correlation between binding extension versions and the Functions runtime version. However, starting with version 4.x the Functions runtime enforces a minimum version for all trigger and binding extensions.
If you receive a warning about a package not meeting a minimum required version, you should update that NuGet package to the minimum version as you normally would. The minimum version requirements for extensions used in Functions v4.x can be found inthe linked configuration file.
For C# script, update the extension bundle reference in thehost.jsonas follows:
{
    "version": "2.0",
    "extensionBundle": {
        "id": "Microsoft.Azure.Functions.ExtensionBundle",
        "version": "[4.0.0, 5.0.0)"
    }
}
{
    "version": "2.0",
    "extensionBundle": {
        "id": "Microsoft.Azure.Functions.ExtensionBundle",
        "version": "[4.0.0, 5.0.0)"
    }
}
There's technically not a correlation between extension bundle versions and the Functions runtime version. However, starting with version 4.x the Functions runtime enforces a minimum version for extension bundles.
If you receive a warning about your extension bundle version not meeting a minimum required version, update your existing extension bundle reference in thehost.jsonas follows:
{
    "version": "2.0",
    "extensionBundle": {
        "id": "Microsoft.Azure.Functions.ExtensionBundle",
        "version": "[4.0.0, 5.0.0)"
    }
}
{
    "version": "2.0",
    "extensionBundle": {
        "id": "Microsoft.Azure.Functions.ExtensionBundle",
        "version": "[4.0.0, 5.0.0)"
    }
}
To learn more about extension bundles, seeExtension bundles.
Retired versions
Important
Support will end for version 1.x of the Azure Functions runtime on September 14, 2026. We highly recommend that youmigrate your apps to version 4.xfor full support.
These versions of the Functions runtime reached the end of extended support on December 13, 2022.
As soon as possible, you should migrate your apps to version 4.x to obtain full support. For a complete set of language-specific migration instructions, seeMigrate apps to Azure Functions version 4.x.
Apps using versions 2.x and 3.x can still be created and deployed from your CI/CD DevOps pipeline, and all existing apps continue to run without breaking changes. However, your apps aren't eligible for new features, security patches, and performance optimizations. You can only get related service support after you upgrade your apps to version 4.x.
Versions 2.x and 3.x are no longer supported due to the end of support for .NET Core 3.1, which was a core dependency. This requirement affects alllanguages supported by Azure Functions.
Locally developed application versions
You can make the following updates to function apps to locally change the targeted versions.
Visual Studio runtime versions
In Visual Studio, you select the runtime version when you create a project. Azure Functions tools for Visual Studio supports the two major runtime versions. The correct version is used when debugging and publishing based on project settings. The version settings are defined in the.csprojfile in the following properties:
Version 4.x
Version 1.x
<TargetFramework>net8.0</TargetFramework>
<AzureFunctionsVersion>v4</AzureFunctionsVersion>
<TargetFramework>net8.0</TargetFramework>
<AzureFunctionsVersion>v4</AzureFunctionsVersion>
If you're using theisolated worker model, you can choose,net8.0,net6.0, ornet48as the target framework. You can also choose to usepreview supportfornet9.0. If you're using thein-process model, you can choosenet8.0ornet6.0, and you must include theMicrosoft.NET.Sdk.Functionsextension set to at least4.4.0.
net8.0
net6.0
net48
net9.0
net8.0
net6.0
Microsoft.NET.Sdk.Functions
4.4.0
.NET 7 was previously supported on the isolated worker model but reached the end of official support onMay 14, 2024.
<TargetFramework>net48</TargetFramework>
<AzureFunctionsVersion>v1</AzureFunctionsVersion>
<TargetFramework>net48</TargetFramework>
<AzureFunctionsVersion>v1</AzureFunctionsVersion>
Visual Studio Code and Azure Functions Core Tools
Azure Functions Core Toolsis used for command-line development and also by theAzure Functions extensionfor Visual Studio Code. For more information, seeInstall the Azure Functions Core Tools.
For Visual Studio Code development, you might also need to update the user setting for theazureFunctions.projectRuntimeto match the version of the tools installed. This setting also updates the templates and languages used during function app creation.
azureFunctions.projectRuntime
Bindings
Starting with version 2.x, the runtime uses a newbinding extensibility modelthat offers these advantages:
Support for non-Microsoft binding extensions.
Support for non-Microsoft binding extensions.
Decoupling of runtime and bindings. This change allows binding extensions to be versioned and released independently. You can, for example, opt to upgrade to a version of an extension that relies on a newer version of an underlying SDK.
Decoupling of runtime and bindings. This change allows binding extensions to be versioned and released independently. You can, for example, opt to upgrade to a version of an extension that relies on a newer version of an underlying SDK.
A lighter execution environment, where only the bindings in use are known and loaded by the runtime.
A lighter execution environment, where only the bindings in use are known and loaded by the runtime.
Except for HTTP and timer triggers, all bindings must be explicitly added to the function app project, or registered in the portal. For more information, seeAzure Functions binding expression patterns.
This table shows the bindings that are supported in the major versions of the Azure Functions runtime:
Notes:
Support will end for version 1.x of the Azure Functions runtime on September 14, 2026. We highly recommend that youmigrate your apps to version 4.xfor full support.
Starting with the version 2.x runtime, all bindings except HTTP and Timer must be registered. SeeRegister binding extensions.
Triggers aren't supported in the Consumption plan. Requiresruntime-driven triggers.
Supported in Kubernetes, IoT Edge, and other self-hosted modes only.
Function app time-out duration
The time-out duration for functions in a function app is defined by thefunctionTimeoutproperty in thehost.jsonproject file. This property applies specifically to function executions. After the trigger starts function execution, the function needs to return/respond within the time-out duration. To avoid time-outs, it's important towrite robust functions. For more information, seeImprove Azure Functions performance and reliability.
functionTimeout
The following table shows the default and maximum values (in minutes) for specific plans:
Regardless of the function app time-out setting, 230 seconds is the maximum amount of time that an HTTP triggered function can take to respond to a request. This is because of thedefault idle time-out of Azure Load Balancer. For longer processing times, consider using theDurable Functions async patternordefer the actual work and return an immediate response.
There is no maximum execution time-out duration enforced. However, the grace period given to a function execution is 60 minutesduring scale infor the Flex Consumption and Premium plans, and a grace period of 10 minutes is given during platform updates.
Requires the App Service plan be set toAlways On. A grace period of 10 minutes is given during platform updates.
The default time-out for version 1.x of the Functions host runtime isunbounded.
When theminimum number of replicasis set to zero, the default time-out depends on the specific triggers used in the app.
Related content
For more information, see the following resources:
Develop Azure Functions locally using Core Tools
How to target Azure Functions runtime versions
Release notes
Feedback
Was this page helpful?
Additional resources