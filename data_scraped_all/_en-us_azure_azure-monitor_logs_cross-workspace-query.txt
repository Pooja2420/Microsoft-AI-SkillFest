Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Query data across Log Analytics workspaces, applications, and resources in Azure Monitor
Article
2024-09-26
14 contributors
In this article
There are two ways to query data from multiple workspaces, applications, and resources:
Explicitly by specifying the workspace, app, or resource information using theworkspace(),app(), orresource()expressions, as described in this article.
Implicitly by usingresource-context queries. When you query in the context of a specific resource, resource group, or a subscription, the query retrieves relevant data from all workspaces that contain data for these resources. Resource-context queries don't retrieve data from classic Application Insights resources.
This article explains how to use theworkspace(),app(), andresource()expressions to query data from multiple Log Analytics workspaces, applications, and resources.
workspace()
app()
resource()
If you manage subscriptions in other Microsoft Entra tenants throughAzure Lighthouse, you can includeLog Analytics workspaces created in those customer tenantsin your queries.
Important
If you're using aworkspace-based Application Insights resource, telemetry is stored in a Log Analytics workspace with all other log data. Use theworkspace()expression to query data from applications in multiple workspaces. You don't need a cross-workspace query to query data from multiple applications in the same workspace.
workspace()
Permissions required
Microsoft.OperationalInsights/workspaces/query/*/read
microsoft.operationalinsights/querypacks/queries/action
Limitations
Cross-resource and cross-service queries don't support parameterized functions and functions whose definition includes other cross-workspace or cross-service expressions, includingadx(),arg(),resource(),workspace(), andapp().
adx()
arg()
resource()
workspace()
app()
You can include up to 100 Log Analytics workspaces or classic Application Insights resources in a single query.
Querying across a large number of resources can substantially slow down the query.
Cross-resource queries in log search alerts are only supported in the currentscheduledQueryRules API. If you're using the legacy Log Analytics Alerts API, you'll need toswitch to the current API.
References to a cross resource, such as another workspace, should be explicit and can't be parameterized.
Query across workspaces, applications, and resources using functions
This section explains how to query workspaces, applications, and resources using functions with and without using a function.
Query without using a function
You can query multiple resources from any of your resource instances. These resources can be workspaces and apps combined.
Example for a query across three workspaces:
union 
  Update, 
  workspace("00000000-0000-0000-0000-000000000001").Update, 
  workspace("00000000-0000-0000-0000-000000000002").Update
| where TimeGenerated >= ago(1h)
| where UpdateState == "Needed"
| summarize dcount(Computer) by Classification
union 
  Update, 
  workspace("00000000-0000-0000-0000-000000000001").Update, 
  workspace("00000000-0000-0000-0000-000000000002").Update
| where TimeGenerated >= ago(1h)
| where UpdateState == "Needed"
| summarize dcount(Computer) by Classification
For more information on the union, where, and summarize operators, seeunion operator,where operator, andsummarize operator.
Query by using a function
When you use cross-resource queries to correlate data from multiple Log Analytics workspaces and Application Insights components, the query can become complex and difficult to maintain. You should make use offunctions in Azure Monitor log queriesto separate the query logic from the scoping of the query resources. This method simplifies the query structure. The following example demonstrates how you can monitor multiple Application Insights components and visualize the count of failed requests by application name.
Create a query like the following example that references the scope of Application Insights components. Thewithsource= SourceAppcommand adds a column that designates the application name that sent the log.Save the query as a functionwith the aliasapplicationsScoping.
withsource= SourceApp
applicationsScoping
// crossResource function that scopes my Application Insights components
union withsource= SourceApp
app('00000000-0000-0000-0000-000000000000').requests, 
app('00000000-0000-0000-0000-000000000001').requests,
app('00000000-0000-0000-0000-000000000002').requests,
app('00000000-0000-0000-0000-000000000003').requests,
app('00000000-0000-0000-0000-000000000004').requests
// crossResource function that scopes my Application Insights components
union withsource= SourceApp
app('00000000-0000-0000-0000-000000000000').requests, 
app('00000000-0000-0000-0000-000000000001').requests,
app('00000000-0000-0000-0000-000000000002').requests,
app('00000000-0000-0000-0000-000000000003').requests,
app('00000000-0000-0000-0000-000000000004').requests
You can nowuse this functionin a cross-resource query like the following example. The function aliasapplicationsScopingreturns the union of the requests table from all the defined applications. The query then filters for failed requests and visualizes the trends by application. Theparseoperator is optional in this example. It extracts the application name from theSourceAppproperty.
applicationsScoping
parse
SourceApp
applicationsScoping 
| where timestamp > ago(12h)
| where success == 'False'
| parse SourceApp with * '(' applicationId ')' * 
| summarize count() by applicationId, bin(timestamp, 1h) 
| render timechart
applicationsScoping 
| where timestamp > ago(12h)
| where success == 'False'
| parse SourceApp with * '(' applicationId ')' * 
| summarize count() by applicationId, bin(timestamp, 1h) 
| render timechart
Note
This method can't be used with log search alerts because the access validation of the alert rule resources, including workspaces and applications, is performed at alert creation time. Adding new resources to the function after the alert creation isn't supported. If you prefer to use a function for resource scoping in log search alerts, you must edit the alert rule in the portal or with an Azure Resource Manager template to update the scoped resources. Alternatively, you can include the list of resources in the log search alert query.
Query across Log Analytics workspaces using workspace()
Use theworkspace()expression to retrieve data from a specific workspace in the same resource group, another resource group, or another subscription. You can use this expression to include log data in an Application Insights query and to query data across multiple workspaces in a log query.
workspace()
Syntax
workspace(Identifier)
workspace(
)
Arguments
*Identifier*: Identifies the workspace by using one of the formats in the following table.
*Identifier*
Examples
workspace("00000000-0000-0000-0000-000000000000").Update | count
workspace("00000000-0000-0000-0000-000000000000").Update | count
workspace("/subscriptions/aaaa0a0a-bb1b-cc2c-dd3d-eeeeee4e4e4e/resourcegroups/Contoso/providers/Microsoft.OperationalInsights/workspaces/contosoretail").Event | count
workspace("/subscriptions/aaaa0a0a-bb1b-cc2c-dd3d-eeeeee4e4e4e/resourcegroups/Contoso/providers/Microsoft.OperationalInsights/workspaces/contosoretail").Event | count
union 
( workspace("00000000-0000-0000-0000-000000000000").Heartbeat | where Computer == "myComputer"),
(app("00000000-0000-0000-0000-000000000000").requests | where cloud_RoleInstance == "myRoleInstance")
| count
union 
( workspace("00000000-0000-0000-0000-000000000000").Heartbeat | where Computer == "myComputer"),
(app("00000000-0000-0000-0000-000000000000").requests | where cloud_RoleInstance == "myRoleInstance")
| count
union 
(workspace("00000000-0000-0000-0000-000000000000").Heartbeat), (app("00000000-0000-0000-0000-000000000000").requests) | where TimeGenerated between(todatetime("2023-03-08 15:00:00") .. todatetime("2023-04-08 15:05:00"))
union 
(workspace("00000000-0000-0000-0000-000000000000").Heartbeat), (app("00000000-0000-0000-0000-000000000000").requests) | where TimeGenerated between(todatetime("2023-03-08 15:00:00") .. todatetime("2023-04-08 15:05:00"))
Query across classic Application Insights applications using app()
Use theappexpression to retrieve data from a specific classic Application Insights resource in the same resource group, another resource group, or another subscription.  If you're using aworkspace-based Application Insights resource, telemetry is stored in a Log Analytics workspace with all other log data. Use theworkspace()expression to query data from applications in multiple workspaces. You don't need a cross-workspace query to query data from multiple applications in the same workspace.
app
workspace()
Syntax
app(Identifier)
app(
)
Arguments
*Identifier*: Identifies the app using one of the formats in the table below.
*Identifier*
Examples
app("00000000-0000-0000-0000-000000000000").requests | count
app("00000000-0000-0000-0000-000000000000").requests | count
app("/subscriptions/aaaa0a0a-bb1b-cc2c-dd3d-eeeeee4e4e4e/resourcegroups/Fabrikam/providers/microsoft.insights/components/fabrikamapp").requests | count
app("/subscriptions/aaaa0a0a-bb1b-cc2c-dd3d-eeeeee4e4e4e/resourcegroups/Fabrikam/providers/microsoft.insights/components/fabrikamapp").requests | count
union 
(workspace("00000000-0000-0000-0000-000000000000").Heartbeat | where Computer == "myComputer"),
(app("00000000-0000-0000-0000-000000000000").requests | where cloud_RoleInstance == "myColumnInstance")
| count
union 
(workspace("00000000-0000-0000-0000-000000000000").Heartbeat | where Computer == "myComputer"),
(app("00000000-0000-0000-0000-000000000000").requests | where cloud_RoleInstance == "myColumnInstance")
| count
union 
(workspace("00000000-0000-0000-0000-000000000000").Heartbeat), (app("00000000-0000-0000-0000-000000000000").requests)
| where TimeGenerated between(todatetime("2023-03-08 15:00:00") .. todatetime("2023-04-08 15:05:00"))
union 
(workspace("00000000-0000-0000-0000-000000000000").Heartbeat), (app("00000000-0000-0000-0000-000000000000").requests)
| where TimeGenerated between(todatetime("2023-03-08 15:00:00") .. todatetime("2023-04-08 15:05:00"))
Correlate data between resources using resource()
Theresourceexpression is used in a Azure Monitor queryscoped to a resourceto retrieve data from other resources.
resource
Syntax
resource(Identifier)
resource(
)
Arguments
*Identifier*: Identifies the resource, resource group, or subscription from which to correlate data.
*Identifier*
Examples
union (Heartbeat),(resource("/subscriptions/xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourcesgroups/myresourcegroup/providers/microsoft.compute/virtualmachines/myvm").Heartbeat) | summarize count() by _ResourceId, TenantId
union (Heartbeat),(resource("/subscriptions/xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourcesgroups/myresourcegroup/providers/microsoft.compute/virtualmachines/myvm").Heartbeat) | summarize count() by _ResourceId, TenantId
union (Heartbeat),(resource("/subscriptions/xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourcesgroups/myresourcegroup").Heartbeat) | summarize count() by _ResourceId, TenantId
union (Heartbeat),(resource("/subscriptions/xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourcesgroups/myresourcegroup").Heartbeat) | summarize count() by _ResourceId, TenantId
Next steps
SeeAnalyze log data in Azure Monitorfor an overview of log queries and how Azure Monitor log data is structured.
Feedback
Was this page helpful?
Additional resources