Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Connect to Azure with an Azure Resource Manager service connection
Article
2024-12-10
19 contributors
In this article
Azure DevOps Services | Azure DevOps Server 2022 - Azure DevOps Server 2019
Note
We are rolling out the new Azure service connection creation experience. Receiving it in your organization depends on various factors, and you may still see the older user experience.
An Azure Resource Manager service connection allows you to connect to Azure resources like Azure Key Vault from your pipeline. This connection lets you use a pipeline to deploy to Azure resources, such as an Azure App Service app, without needing to authenticate each time.
You have multiple authentication options for connecting to Azure with an Azure Resource Manager service connection. We recommend usingworkload identity federationwith either an app registration or managed identity. Workload identity federation eliminates the need for secrets and secret management.
Recommended options:
App registration (automatic) with workload identity federation
Managed identity that creates a workload identity federation credential and connects to anexisting user-assigned managed identity. Use this option when youdon't have permission to create an app registration.
App registration or managed identity (manual) with workload identity federation or a secret. Manual configuration is more time consuming than the automatic configuration and should only be used if you've already tried to automatic option.
Note
There are other Azure Resource Manager service connection authentication options that don't use workload identity federation. These options are available for backwards compatibility and edge cases and not recommended. If you're setting up a service connection for the first time, use workload identity federation. If you have an existing service connection, tryconverting your service connection to use workload identity federationfirst.
Automatic app registration with a secret
Agent-assigned managed identity
Publish profile

Create an app registration with workload identity federation (automatic)
You can use this approach if all the following items are true for your scenario:
You have the Owner role for your Azure subscription.
You're not connecting to theAzure Stackor theAzure US Governmentenvironments.
Any Marketplace extensions tasks that you use are updated to support workload identity federation.
With this selection, Azure DevOps automatically queries for the subscription, management group, or Machine Learning workspace that you want to connect to and creates a workload identity federation for authentication.
In the Azure DevOps project, go toProject settings>Service connections.For more information, seeOpen project settings.
In the Azure DevOps project, go toProject settings>Service connections.
For more information, seeOpen project settings.
SelectNew service connection,  then selectAzure Resource ManagerandNext.
SelectNew service connection,  then selectAzure Resource ManagerandNext.

SelectApp registration (automatic)with the credentialWorkload identity federation.
SelectApp registration (automatic)with the credentialWorkload identity federation.

Select aScope level. SelectSubscription,Management Group, orMachine Learning Workspace.Management groupsare containers that help you manage access, policy, and compliance across multiple subscriptions. AMachine Learning Workspaceis place to create machine learning artifacts.For theSubscriptionscope, enter the following parameters:ParameterDescriptionSubscriptionRequired. Select the Azure subscription.Resource groupOptional. Select the Azure resource group.For theManagement Groupscope, select theAzure management group.For theMachine Learning Workspacescope, enter the following parameters:ParameterDescriptionSubscriptionRequired. Select the Azure subscription.Resource GroupRequired. Select the resource group containing the workspace.Machine Learning WorkspaceRequired. Select the Azure Machine Learning workspace.
Select aScope level. SelectSubscription,Management Group, orMachine Learning Workspace.Management groupsare containers that help you manage access, policy, and compliance across multiple subscriptions. AMachine Learning Workspaceis place to create machine learning artifacts.
For theSubscriptionscope, enter the following parameters:ParameterDescriptionSubscriptionRequired. Select the Azure subscription.Resource groupOptional. Select the Azure resource group.
For theSubscriptionscope, enter the following parameters:
For theManagement Groupscope, select theAzure management group.
For theManagement Groupscope, select theAzure management group.
For theMachine Learning Workspacescope, enter the following parameters:ParameterDescriptionSubscriptionRequired. Select the Azure subscription.Resource GroupRequired. Select the resource group containing the workspace.Machine Learning WorkspaceRequired. Select the Azure Machine Learning workspace.
For theMachine Learning Workspacescope, enter the following parameters:
Enter aService connection name.
Enter aService connection name.
Optionally, enter a description for the service connection.
Optionally, enter a description for the service connection.
SelectGrant access permission to all pipelinesto allow all pipelines to use this service connection. If you don't select this option, you must manually grant access to each pipeline that uses this service connection.
SelectGrant access permission to all pipelinesto allow all pipelines to use this service connection. If you don't select this option, you must manually grant access to each pipeline that uses this service connection.
SelectSave.
SelectSave.
Create a service connection for an existing user-assigned managed identity
Use this option to automatically create a workload identity credential for an existing user-assigned managed identity. You need to have anexisting user-assigned managed identitybefore you start.
In the Azure DevOps project, go toProject settings>Service connections.For more information, seeOpen project settings.
In the Azure DevOps project, go toProject settings>Service connections.
For more information, seeOpen project settings.
SelectNew service connection, then selectAzure Resource ManagerandNext.
SelectNew service connection, then selectAzure Resource ManagerandNext.

SelectManaged identity.
SelectManaged identity.

InStep 1: Managed identity details:SelectSubscription for Managed Identity. This is the Azure subscription that contains your managed identity.SelectResource group for Managed Identity. This is the resource group that contains your managed identity.SelectManaged Identity. This is the managed identity within your resource group that you'll use to access resources.
InStep 1: Managed identity details:
SelectSubscription for Managed Identity. This is the Azure subscription that contains your managed identity.
SelectResource group for Managed Identity. This is the resource group that contains your managed identity.
SelectManaged Identity. This is the managed identity within your resource group that you'll use to access resources.
InStep 2: Azure Scope:Select theScope Level. SelectSubscription,Management Group, orMachine Learning Workspace.Management groupsare containers that help you manage access, policy, and compliance across multiple subscriptions. AMachine Learning Workspaceis place to create machine learning artifacts.For theSubscriptionscope, enter the following parameters:ParameterDescriptionSubscription for service connectionRequired. Select the Azure subscription name your managed identity will access.Resource group for service connectionOptional. Enter to limit managed identity access to one resource group.For theManagement Groupscope, enter the following parameters:ParameterDescriptionManagement GroupRequired. Select the Azure management group.For theMachine Learning Workspacescope, enter the following parameters:ParameterDescriptionSubscriptionRequired. Select the Azure subscription name.Resource group for service connectionOptional. Select the resource group containing the workspace.ML Workspace workspaceRequired. Enter the name of the existing Azure Machine Learning workspace.In theStep 3: Service connection details:section, enter or select the following parameters:ParameterDescriptionService Connection NameRequired. The name that you use to refer to this service connection in task properties. Not the name of your Azure subscription.Service Management ReferenceOptional. Context information from an ITSM database.DescriptionOptional. Enter a description of the service connection.In theSecuritysection, selectGrant access permission to all pipelinesto allow all pipelines to use this service connection. If you don't select this option, you must manually grant access to each pipeline that uses this service connection.SelectSaveto validate and create the service connection.
InStep 2: Azure Scope:
Select theScope Level. SelectSubscription,Management Group, orMachine Learning Workspace.Management groupsare containers that help you manage access, policy, and compliance across multiple subscriptions. AMachine Learning Workspaceis place to create machine learning artifacts.For theSubscriptionscope, enter the following parameters:ParameterDescriptionSubscription for service connectionRequired. Select the Azure subscription name your managed identity will access.Resource group for service connectionOptional. Enter to limit managed identity access to one resource group.For theManagement Groupscope, enter the following parameters:ParameterDescriptionManagement GroupRequired. Select the Azure management group.For theMachine Learning Workspacescope, enter the following parameters:ParameterDescriptionSubscriptionRequired. Select the Azure subscription name.Resource group for service connectionOptional. Select the resource group containing the workspace.ML Workspace workspaceRequired. Enter the name of the existing Azure Machine Learning workspace.
Select theScope Level. SelectSubscription,Management Group, orMachine Learning Workspace.Management groupsare containers that help you manage access, policy, and compliance across multiple subscriptions. AMachine Learning Workspaceis place to create machine learning artifacts.
For theSubscriptionscope, enter the following parameters:ParameterDescriptionSubscription for service connectionRequired. Select the Azure subscription name your managed identity will access.Resource group for service connectionOptional. Enter to limit managed identity access to one resource group.
For theSubscriptionscope, enter the following parameters:
For theManagement Groupscope, enter the following parameters:ParameterDescriptionManagement GroupRequired. Select the Azure management group.
For theManagement Groupscope, enter the following parameters:
For theMachine Learning Workspacescope, enter the following parameters:ParameterDescriptionSubscriptionRequired. Select the Azure subscription name.Resource group for service connectionOptional. Select the resource group containing the workspace.ML Workspace workspaceRequired. Enter the name of the existing Azure Machine Learning workspace.
For theMachine Learning Workspacescope, enter the following parameters:
In theStep 3: Service connection details:section, enter or select the following parameters:ParameterDescriptionService Connection NameRequired. The name that you use to refer to this service connection in task properties. Not the name of your Azure subscription.Service Management ReferenceOptional. Context information from an ITSM database.DescriptionOptional. Enter a description of the service connection.
In theStep 3: Service connection details:section, enter or select the following parameters:
In theSecuritysection, selectGrant access permission to all pipelinesto allow all pipelines to use this service connection. If you don't select this option, you must manually grant access to each pipeline that uses this service connection.
In theSecuritysection, selectGrant access permission to all pipelinesto allow all pipelines to use this service connection. If you don't select this option, you must manually grant access to each pipeline that uses this service connection.
SelectSaveto validate and create the service connection.
SelectSaveto validate and create the service connection.
Convert an existing service connection to use workload identity federation
You can quickly convert an existing Azure Resource Manager service connection to use workload identity federation for authentication instead of a secret. You can use the service connection conversion tool in Azure DevOps if your service connection meets these requirements:
Azure DevOps originally created the service connection. If you manually create your service connection, you can't convert the service connection by using the service connection conversion tool because Azure DevOps doesn't have permissions to modify its own credentials.
Only one project uses the service connection. You can't convertcross-project service connections.
To convert a service connection:
In the Azure DevOps project, go toProject settings>Service connections.For more information, seeOpen project settings.
In the Azure DevOps project, go toProject settings>Service connections.
For more information, seeOpen project settings.
Select the service connection that you want to convert to use workload identity.
Select the service connection that you want to convert to use workload identity.
SelectConvert.If you have an existing credential with an expired secret, you see a different option to convert.
SelectConvert.

If you have an existing credential with an expired secret, you see a different option to convert.

SelectConvertagain to confirm that you want to create a new service connection.The conversion might take a few minutes. If you want to revert the connection, you must revert it within seven days.
SelectConvertagain to confirm that you want to create a new service connection.
The conversion might take a few minutes. If you want to revert the connection, you must revert it within seven days.
Use a script to update multiple service connections at once to now use workload identity federation for authentication.
This example PowerShell script requires two parameters: Azure DevOps organization (example:https://dev.azure.com/fabrikam-tailspin) and Azure DevOps project (example:Space game web agent). The script then retrieves the associated service connections for your Azure DevOps project and organization.
https://dev.azure.com/fabrikam-tailspin
Space game web agent
When converting service connections to use workload identity federation, you're prompted to confirm the update for each connection not already using it. Upon confirmation, the script updates these service connections via the Azure DevOps REST API to utilize workload identity federation.
The script requiresPowerShell 7.3 or newerandAzure CLIto run. Save the script to a.ps1file and run it using PowerShell 7.
.ps1
#!/usr/bin/env pwsh
<# 
.SYNOPSIS 
    Convert multiple Azure Resource Manager service connection(s) to use Workload identity federation

.LINK
    https://aka.ms/azdo-rm-workload-identity-conversion

.EXAMPLE
    ./convert_azurerm_service_connection_to_oidc_simple.ps1 -Project <project> -OrganizationUrl https://dev.azure.com/<organization>
#> 

#Requires -Version 7.3

param ( 
    [parameter(Mandatory=$true,HelpMessage="Name of the Azure DevOps Project")]
    [string]
    [ValidateNotNullOrEmpty()]
    $Project,

    [parameter(Mandatory=$true,HelpMessage="Url of the Azure DevOps Organization")]
    [uri]
    [ValidateNotNullOrEmpty()]
    $OrganizationUrl
) 
$apiVersion = "7.1"
$PSNativeCommandArgumentPassing = "Standard" 

#-----------------------------------------------------------
# Log in to Azure
$azdoResource = "499b84ac-1321-427f-aa17-267ca6975798" # application id of Azure DevOps 
az login --allow-no-subscriptions --scope ${azdoResource}/.default
$OrganizationUrl = $OrganizationUrl.ToString().Trim('/')

#-----------------------------------------------------------
# Retrieve the service connection
$getApiUrl = "${OrganizationUrl}/${Project}/_apis/serviceendpoint/endpoints?authSchemes=ServicePrincipal&type=azurerm&includeFailed=false&includeDetails=true&api-version=${apiVersion}"
az rest --resource $azdoResource -u "${getApiUrl} " -m GET --query "sort_by(value[?authorization.scheme=='ServicePrincipal' && data.creationMode=='Automatic' && !(isShared && serviceEndpointProjectReferences[0].projectReference.name!='${Project}')],&name)" -o json `
        | Tee-Object -Variable rawResponse | ConvertFrom-Json | Tee-Object -Variable serviceEndpoints | Format-List | Out-String | Write-Debug
if (!$serviceEndpoints -or ($serviceEndpoints.count-eq 0)) {
    Write-Warning "No convertible service connections found"
    exit 1
}

foreach ($serviceEndpoint in $serviceEndpoints) {
    # Prompt user to confirm conversion
    $choices = @(
        [System.Management.Automation.Host.ChoiceDescription]::new("&Convert", "Converting service connection '$($serviceEndpoint.name)'...")
        [System.Management.Automation.Host.ChoiceDescription]::new("&Skip", "Skipping service connection '$($serviceEndpoint.name)'...")
        [System.Management.Automation.Host.ChoiceDescription]::new("&Exit", "Exit script")
    )
    $prompt = $serviceEndpoint.isShared ? "Convert shared service connection '$($serviceEndpoint.name)'?" : "Convert service connection '$($serviceEndpoint.name)'?"
    $decision = $Host.UI.PromptForChoice([string]::Empty, $prompt, $choices, $serviceEndpoint.isShared ? 1 : 0)

    if ($decision -eq 0) {

        Write-Host "$($choices[$decision].HelpMessage)"
    } elseif ($decision -eq 1) {
        Write-Host "$($PSStyle.Formatting.Warning)$($choices[$decision].HelpMessage)$($PSStyle.Reset)"
        continue 
    } elseif ($decision -ge 2) {
        Write-Host "$($PSStyle.Formatting.Warning)$($choices[$decision].HelpMessage)$($PSStyle.Reset)"
        exit 
    }

    # Prepare request body
    $serviceEndpoint.authorization.scheme = "WorkloadIdentityFederation"
    $serviceEndpoint.data.PSObject.Properties.Remove('revertSchemeDeadline')
    $serviceEndpoint | ConvertTo-Json -Depth 4 | Write-Debug
    $serviceEndpoint | ConvertTo-Json -Depth 4 -Compress | Set-Variable serviceEndpointRequest
    $putApiUrl = "${OrganizationUrl}/${Project}/_apis/serviceendpoint/endpoints/$($serviceEndpoint.id)?operation=ConvertAuthenticationScheme&api-version=${apiVersion}"
    # Convert service connection
    az rest -u "${putApiUrl} " -m PUT -b $serviceEndpointRequest --headers content-type=application/json --resource $azdoResource -o json `
            | ConvertFrom-Json | Set-Variable updatedServiceEndpoint

    $updatedServiceEndpoint | ConvertTo-Json -Depth 4 | Write-Debug
    if (!$updatedServiceEndpoint) {
        Write-Debug "Empty response"
        Write-Error "Failed to convert service connection '$($serviceEndpoint.name)'"
        exit 1
    }
    Write-Host "Successfully converted service connection '$($serviceEndpoint.name)'"
}
#!/usr/bin/env pwsh
<# 
.SYNOPSIS 
    Convert multiple Azure Resource Manager service connection(s) to use Workload identity federation

.LINK
    https://aka.ms/azdo-rm-workload-identity-conversion

.EXAMPLE
    ./convert_azurerm_service_connection_to_oidc_simple.ps1 -Project <project> -OrganizationUrl https://dev.azure.com/<organization>
#> 

#Requires -Version 7.3

param ( 
    [parameter(Mandatory=$true,HelpMessage="Name of the Azure DevOps Project")]
    [string]
    [ValidateNotNullOrEmpty()]
    $Project,

    [parameter(Mandatory=$true,HelpMessage="Url of the Azure DevOps Organization")]
    [uri]
    [ValidateNotNullOrEmpty()]
    $OrganizationUrl
) 
$apiVersion = "7.1"
$PSNativeCommandArgumentPassing = "Standard" 

#-----------------------------------------------------------
# Log in to Azure
$azdoResource = "499b84ac-1321-427f-aa17-267ca6975798" # application id of Azure DevOps 
az login --allow-no-subscriptions --scope ${azdoResource}/.default
$OrganizationUrl = $OrganizationUrl.ToString().Trim('/')

#-----------------------------------------------------------
# Retrieve the service connection
$getApiUrl = "${OrganizationUrl}/${Project}/_apis/serviceendpoint/endpoints?authSchemes=ServicePrincipal&type=azurerm&includeFailed=false&includeDetails=true&api-version=${apiVersion}"
az rest --resource $azdoResource -u "${getApiUrl} " -m GET --query "sort_by(value[?authorization.scheme=='ServicePrincipal' && data.creationMode=='Automatic' && !(isShared && serviceEndpointProjectReferences[0].projectReference.name!='${Project}')],&name)" -o json `
        | Tee-Object -Variable rawResponse | ConvertFrom-Json | Tee-Object -Variable serviceEndpoints | Format-List | Out-String | Write-Debug
if (!$serviceEndpoints -or ($serviceEndpoints.count-eq 0)) {
    Write-Warning "No convertible service connections found"
    exit 1
}

foreach ($serviceEndpoint in $serviceEndpoints) {
    # Prompt user to confirm conversion
    $choices = @(
        [System.Management.Automation.Host.ChoiceDescription]::new("&Convert", "Converting service connection '$($serviceEndpoint.name)'...")
        [System.Management.Automation.Host.ChoiceDescription]::new("&Skip", "Skipping service connection '$($serviceEndpoint.name)'...")
        [System.Management.Automation.Host.ChoiceDescription]::new("&Exit", "Exit script")
    )
    $prompt = $serviceEndpoint.isShared ? "Convert shared service connection '$($serviceEndpoint.name)'?" : "Convert service connection '$($serviceEndpoint.name)'?"
    $decision = $Host.UI.PromptForChoice([string]::Empty, $prompt, $choices, $serviceEndpoint.isShared ? 1 : 0)

    if ($decision -eq 0) {

        Write-Host "$($choices[$decision].HelpMessage)"
    } elseif ($decision -eq 1) {
        Write-Host "$($PSStyle.Formatting.Warning)$($choices[$decision].HelpMessage)$($PSStyle.Reset)"
        continue 
    } elseif ($decision -ge 2) {
        Write-Host "$($PSStyle.Formatting.Warning)$($choices[$decision].HelpMessage)$($PSStyle.Reset)"
        exit 
    }

    # Prepare request body
    $serviceEndpoint.authorization.scheme = "WorkloadIdentityFederation"
    $serviceEndpoint.data.PSObject.Properties.Remove('revertSchemeDeadline')
    $serviceEndpoint | ConvertTo-Json -Depth 4 | Write-Debug
    $serviceEndpoint | ConvertTo-Json -Depth 4 -Compress | Set-Variable serviceEndpointRequest
    $putApiUrl = "${OrganizationUrl}/${Project}/_apis/serviceendpoint/endpoints/$($serviceEndpoint.id)?operation=ConvertAuthenticationScheme&api-version=${apiVersion}"
    # Convert service connection
    az rest -u "${putApiUrl} " -m PUT -b $serviceEndpointRequest --headers content-type=application/json --resource $azdoResource -o json `
            | ConvertFrom-Json | Set-Variable updatedServiceEndpoint

    $updatedServiceEndpoint | ConvertTo-Json -Depth 4 | Write-Debug
    if (!$updatedServiceEndpoint) {
        Write-Debug "Empty response"
        Write-Error "Failed to convert service connection '$($serviceEndpoint.name)'"
        exit 1
    }
    Write-Host "Successfully converted service connection '$($serviceEndpoint.name)'"
}
Revert an existing service connection that uses a secret
You can revert a converted automatic service connection with its secret for seven days. After seven days, manually create a new secret.
If you manually create and convert your service connection, you can't revert the service connection by using the service connection conversion tool because Azure DevOps doesn't have permissions to modify its own credentials.
To revert a service connection:
In the Azure DevOps project, go toPipelines>Service connections.
In the Azure DevOps project, go toPipelines>Service connections.
Select an existing service connection to revert.
Select an existing service connection to revert.
SelectRevert conversion to the original scheme.
SelectRevert conversion to the original scheme.

SelectRevertagain to confirm your choice.
SelectRevertagain to confirm your choice.

Create a service connection that uses an existing service principal
If you want to use a predefined set of access permissions and you don't already have a service principal defined for this purpose, follow one of these tutorials to create a new service principal:
Use the portal to create a Microsoft Entra application and a service principal that can access resources
Use Azure PowerShell to create an Azure service principal that has a certificate
To create a service connection that uses an existing service principal:
In the Azure DevOps project, go toProject settings>Service connections.For more information, seeOpen project settings.
In the Azure DevOps project, go toProject settings>Service connections.
For more information, seeOpen project settings.
SelectNew service connection, then selectAzure Resource ManagerandNext.
SelectNew service connection, then selectAzure Resource ManagerandNext.

SelectService principal (manual)andNext.
SelectService principal (manual)andNext.

From theNew Azure service connectiondialog, select theEnvironment. If you selectAzure Stack, enter the environment URL, which is something likehttps://management.local.azurestack.external.
From theNew Azure service connectiondialog, select theEnvironment. If you selectAzure Stack, enter the environment URL, which is something likehttps://management.local.azurestack.external.
https://management.local.azurestack.external
Select theScope Level. SelectSubscriptionorManagement Group.Management groupsare containers that help you manage access, policy, and compliance across multiple subscriptions.For theSubscriptionscope, enter the following parameters:ParameterDescriptionSubscription IdRequired. Enter the Azure subscription ID.Subscription NameRequired. Enter the Azure subscription name.For theManagement Groupscope, enter the following parameters:ParameterDescriptionManagement Group IdRequired. Enter the Azure management group ID.Management Group NameRequired. Enter the Azure management group name.
Select theScope Level. SelectSubscriptionorManagement Group.Management groupsare containers that help you manage access, policy, and compliance across multiple subscriptions.
For theSubscriptionscope, enter the following parameters:ParameterDescriptionSubscription IdRequired. Enter the Azure subscription ID.Subscription NameRequired. Enter the Azure subscription name.
For theSubscriptionscope, enter the following parameters:
For theManagement Groupscope, enter the following parameters:ParameterDescriptionManagement Group IdRequired. Enter the Azure management group ID.Management Group NameRequired. Enter the Azure management group name.
For theManagement Groupscope, enter the following parameters:
In theAuthenticationsection, enter or select the following parameters:ParameterDescriptionService Principal IdRequired. Enter the service principal ID.CredentialSelectService Principal KeyorCertificate. If you selectedService Principal Key, enter the key (password). If you selectedCertificate, enter the certificate.Tenant IdRequired. Enter the tenant ID.VerifySelect to validate the settings you entered.
In theAuthenticationsection, enter or select the following parameters:
In the Details section, enter the following parameters:ParameterDescriptionConnection NameRequired. The name that you use to refer to this service connection in task properties. Not the name of your Azure subscription.DescriptionOptional. Enter a description of the service connection.SecuritySelectGrant access permission to all pipelinesto allow all pipelines to use this service connection. If you don't select this option, you must manually grant access to each pipeline that uses this service connection.
In the Details section, enter the following parameters:
SelectVerify and saveto validate and create the service connection.
SelectVerify and saveto validate and create the service connection.
Help and support
Exploretroubleshooting tips.
Get advice onStack Overflow.
Post your questions, search for answers, or suggest a feature in theAzure DevOps Developer Community.
Getsupport for Azure DevOps.
Feedback
Was this page helpful?
Additional resources