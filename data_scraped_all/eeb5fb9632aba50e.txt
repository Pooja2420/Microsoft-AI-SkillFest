Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Choose how to authorize access to blob data with Azure CLI
Article
2023-10-12
6 contributors
In this article
Azure Storage provides extensions for Azure CLI that enable you to specify how you want to authorize operations on blob data. You can authorize data operations in the following ways:
With a Microsoft Entra security principal. Microsoft recommends using Microsoft Entra credentials for superior security and ease of use.
With the account access key or a shared access signature (SAS) token.
Specify how data operations are authorized
Azure CLI commands for reading and writing blob data include the optional--auth-modeparameter. Specify this parameter to indicate how a data operation is to be authorized:
--auth-mode
Set the--auth-modeparameter tologinto sign in using a Microsoft Entra security principal (recommended).
--auth-mode
login
Set the--auth-modeparameter to the legacykeyvalue to attempt to retrieve the account access key to use for authorization. If you omit the--auth-modeparameter, then the Azure CLI also attempts to retrieve the access key.
--auth-mode
key
--auth-mode
To use the--auth-modeparameter, make sure that you have installed Azure CLI version 2.0.46 or later. Runaz --versionto check your installed version.
--auth-mode
az --version
Note
When a storage account is locked with an Azure Resource ManagerReadOnlylock, theList Keysoperation is not permitted for that storage account.List Keysis a POST operation, and all POST operations are prevented when aReadOnlylock is configured for the account. For this reason, when the account is locked with aReadOnlylock, users who do not already possess the account keys must use Microsoft Entra credentials to access blob data.
Important
If you omit the--auth-modeparameter or set it tokey, then the Azure CLI attempts to use the account access key for authorization. In this case, Microsoft recommends that you provide the access key either on the command or in theAZURE_STORAGE_KEYenvironment variable. For more information about environment variables, see the section titledSet environment variables for authorization parameters.
--auth-mode
key
If you do not provide the access key, then the Azure CLI attempts to call the Azure Storage resource provider to retrieve it for each operation. Performing many data operations that require a call to the resource provider may result in throttling. For more information about resource provider limits, seeScalability and performance targets for the Azure Storage resource provider.

Authorize with Microsoft Entra credentials
When you sign in to Azure CLI with Microsoft Entra credentials, an OAuth 2.0 access token is returned. That token is automatically used by Azure CLI to authorize subsequent data operations against Blob or Queue storage. For supported operations, you no longer need to pass an account key or SAS token with the command.
You can assign permissions to blob data to a Microsoft Entra security principal via Azure role-based access control (Azure RBAC). For more information about Azure roles in Azure Storage, seeAssign an Azure role for access to blob data.
Permissions for calling data operations
The Azure Storage extensions are supported for operations on blob data. Which operations you may call depends on the permissions granted to the Microsoft Entra security principal with which you sign in to Azure CLI. Permissions to Azure Storage containers are assigned via Azure RBAC. For example, if you are assigned theStorage Blob Data Readerrole, then you can run scripting commands that read data from a container. If you are assigned theStorage Blob Data Contributorrole, then you can run scripting commands that read, write, or delete a container or the data it contains.
For details about the permissions required for each Azure Storage operation on a container, seeCall storage operations with OAuth tokens.

Example: Authorize an operation to create a container with Microsoft Entra credentials
The following example shows how to create a container from Azure CLI using your Microsoft Entra credentials. To create the container, you'll need to sign in to the Azure CLI, and you'll need a resource group and a storage account. To learn how to create these resources, seeQuickstart: Create, download, and list blobs with Azure CLI.
Before you create the container, assign theStorage Blob Data Contributorrole to yourself. Even though you are the account owner, you need explicit permissions to perform data operations against the storage account. For more information about assigning Azure roles, seeAssign an Azure role for access to blob data.ImportantAzure role assignments may take a few minutes to propagate.
Before you create the container, assign theStorage Blob Data Contributorrole to yourself. Even though you are the account owner, you need explicit permissions to perform data operations against the storage account. For more information about assigning Azure roles, seeAssign an Azure role for access to blob data.
Important
Azure role assignments may take a few minutes to propagate.
Call theaz storage container createcommand with the--auth-modeparameter set tologinto create the container using your Microsoft Entra credentials. Remember to replace placeholder values in angle brackets with your own values:az storage container create \
    --account-name <storage-account> \
    --name sample-container \
    --auth-mode login
Call theaz storage container createcommand with the--auth-modeparameter set tologinto create the container using your Microsoft Entra credentials. Remember to replace placeholder values in angle brackets with your own values:
--auth-mode
login
az storage container create \
    --account-name <storage-account> \
    --name sample-container \
    --auth-mode login
az storage container create \
    --account-name <storage-account> \
    --name sample-container \
    --auth-mode login
Authorize with the account access key
If you possess the account key, you can call any Azure Storage data operation. In general, using the account key is less secure. If the account key is compromised, all data in your account may be compromised.
The following example shows how to create a container using the account access key. Specify the account key, and provide the--auth-modeparameter with thekeyvalue:
--auth-mode
key
az storage container create \
    --account-name <storage-account> \
    --name sample-container \
    --account-key <key>
    --auth-mode key
az storage container create \
    --account-name <storage-account> \
    --name sample-container \
    --account-key <key>
    --auth-mode key
Important
When a storage account is locked with an Azure Resource ManagerReadOnlylock, theList Keysoperation is not permitted for that storage account.List Keysis a POST operation, and all POST operations are prevented when aReadOnlylock is configured for the account. For this reason, when the account is locked with aReadOnlylock, users must access data with Microsoft Entra credentials.
Authorize with a SAS token
If you possess a SAS token, you can call data operations that are permitted by the SAS. The following example shows how to create a container using a SAS token:
az storage container create \
    --account-name <storage-account> \
    --name sample-container \
    --sas-token <token>
az storage container create \
    --account-name <storage-account> \
    --name sample-container \
    --sas-token <token>
Set environment variables for authorization parameters
You can specify authorization parameters in environment variables to avoid including them on every call to an Azure Storage data operation. The following table describes the available environment variables.
login
key
login
key
Next steps
Assign an Azure role for access to blob data
Authorize access to data in Azure Storage
Feedback
Was this page helpful?
Additional resources