Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Authenticate with an Azure container registry
Article
2024-09-19
27 contributors
In this article
There are several ways to authenticate with an Azure container registry, each of which is applicable to one or more registry usage scenarios.
Recommended ways include:
Authenticate to a registry directly viaindividual login
Applications and container orchestrators can perform unattended, or "headless," authentication by using a Microsoft Entraservice principal
If you use a container registry with Azure Kubernetes Service (AKS) or another Kubernetes cluster, seeScenarios to authenticate with Azure Container Registry from Kubernetes.
Authentication options
The following table lists available authentication methods and typical scenarios. See linked content for details.
az acr login
Connect-AzContainerRegistry
docker login
az acr login
Connect-AzContainerRegistry
docker login
az acr login
Connect-AzContainerRegistry
docker login
docker login
az acr login
Connect-AzContainerRegistry

Individual login with Microsoft Entra ID
Azure CLI
Azure PowerShell
When working with your registry directly, such as pulling images to and pushing images from a development workstation to a registry you created, authenticate by using your individual Azure identity. Sign in to theAzure CLIwithaz login, and then run theaz acr logincommand:
az login
az acr login --name <acrName>
az login
az acr login --name <acrName>
When you log in withaz acr login, the CLI uses the token created when you executedaz loginto seamlessly authenticate your session with your registry. To complete the authentication flow, the Docker CLI and Docker daemon must be installed and running in your environment.az acr loginuses the Docker client to set a Microsoft Entra token in thedocker.configfile. Once you've logged in this way, your credentials are cached, and subsequentdockercommands in your session do not require a username or password.
az acr login
az login
az acr login
docker.config
docker
Tip
Also useaz acr loginto authenticate an individual identity when you want to push or pull artifacts other than Docker images to your registry, such asOCI artifacts.
az acr login
For registry access, the token used byaz acr loginis valid for3 hours, so we recommend that you always log in to the registry before running adockercommand. If your token expires, you can refresh it by using theaz acr logincommand again to reauthenticate.
az acr login
docker
az acr login
Usingaz acr loginwith Azure identities providesAzure role-based access control (Azure RBAC). For some scenarios, you may want to log in to a registry with your own individual identity in Microsoft Entra ID, or configure other Azure users with specificAzure roles and permissions. For cross-service scenarios or to handle the needs of a workgroup or a development workflow where you don't want to manage individual access, you can also log in with amanaged identity for Azure resources.
az acr login
az acr login with --expose-token
In some cases, you need to authenticate withaz acr loginwhen the Docker daemon isn't running in your environment. For example, you might need to runaz acr loginin a script in Azure Cloud Shell, which provides the Docker CLI but doesn't run the Docker daemon.
az acr login
az acr login
For this scenario, runaz acr loginfirst with the--expose-tokenparameter. This option exposes an access token instead of logging in through the Docker CLI.
az acr login
--expose-token
az acr login --name <acrName> --expose-token
az acr login --name <acrName> --expose-token
Output displays the access token, abbreviated here:
{
  "accessToken": "eyJhbGciOiJSUzI1NiIs[...]24V7wA",
  "loginServer": "myregistry.azurecr.io"
}
{
  "accessToken": "eyJhbGciOiJSUzI1NiIs[...]24V7wA",
  "loginServer": "myregistry.azurecr.io"
}
For registry authentication, we recommend that you store the token credential in a safe location and follow recommended practices to managedocker logincredentials. For example, store the token value in an environment variable:
TOKEN=$(az acr login --name <acrName> --expose-token --output tsv --query accessToken)
TOKEN=$(az acr login --name <acrName> --expose-token --output tsv --query accessToken)
Then, rundocker login, passing00000000-0000-0000-0000-000000000000as the username and using the access token as password:
docker login
00000000-0000-0000-0000-000000000000
docker login myregistry.azurecr.io --username 00000000-0000-0000-0000-000000000000 --password-stdin <<< $TOKEN
docker login myregistry.azurecr.io --username 00000000-0000-0000-0000-000000000000 --password-stdin <<< $TOKEN
Likewise, you can use the token returned byaz acr loginwith thehelm registry logincommand to authenticate with the registry:
az acr login
helm registry login
echo $TOKEN | helm registry login myregistry.azurecr.io \
            --username 00000000-0000-0000-0000-000000000000 \
            --password-stdin
echo $TOKEN | helm registry login myregistry.azurecr.io \
            --username 00000000-0000-0000-0000-000000000000 \
            --password-stdin
When working with your registry directly, such as pulling images to and pushing images from a development workstation to a registry you created, authenticate by using your individual Azure identity. Sign in toAzure PowerShellwithConnect-AzAccount, and then run theConnect-AzContainerRegistrycmdlet:
Connect-AzAccount
Connect-AzContainerRegistry -Name <acrName>
Connect-AzAccount
Connect-AzContainerRegistry -Name <acrName>
When you log in withConnect-AzContainerRegistry, PowerShell uses the token created when you executedConnect-AzAccountto seamlessly authenticate your session with your registry. To complete the authentication flow, the Docker CLI and Docker daemon must be installed and running in your environment.Connect-AzContainerRegistryuses the Docker client to set a Microsoft Entra token in thedocker.configfile. Once you've logged in this way, your credentials are cached, and subsequentdockercommands in your session do not require a username or password.
Connect-AzContainerRegistry
Connect-AzAccount
Connect-AzContainerRegistry
docker.config
docker
Tip
Also useConnect-AzContainerRegistryto authenticate an individual identity when you want to push or pull artifacts other than Docker images to your registry, such asOCI artifacts.
Connect-AzContainerRegistry
For registry access, the token used byConnect-AzContainerRegistryis valid for3 hours, so we recommend that you always log in to the registry before running adockercommand. If your token expires, you can refresh it by using theConnect-AzContainerRegistrycommand again to reauthenticate.
Connect-AzContainerRegistry
docker
Connect-AzContainerRegistry
UsingConnect-AzContainerRegistrywith Azure identities providesAzure role-based access control (Azure RBAC). For some scenarios, you may want to log in to a registry with your own individual identity in Microsoft Entra ID, or configure other Azure users with specificAzure roles and permissions. For cross-service scenarios or to handle the needs of a workgroup or a development workflow where you don't want to manage individual access, you can also log in with amanaged identity for Azure resources.
Connect-AzContainerRegistry
Service principal
If you assign aservice principalto your registry, your application or service can use it for headless authentication. Service principals allowAzure role-based access control (Azure RBAC)to a registry, and you can assign multiple service principals to a registry. Multiple service principals allow you to define different access for different applications.
ACR authentication token gets created upon login to the ACR, and is refreshed upon subsequent operations. The time to live for that token is 3 hours.
The available roles for a container registry include:
AcrPull: pull
AcrPull: pull
AcrPush: pull and push
AcrPush: pull and push
Owner: pull, push, and assign roles to other users
Owner: pull, push, and assign roles to other users
For a complete list of roles, seeAzure Container Registry roles and permissions.
For CLI scripts to create a service principal for authenticating with an Azure container registry, and more guidance, seeAzure Container Registry authentication with service principals.
Admin account
Each container registry includes an admin user account, which is disabled by default. You can enable the admin user and manage its credentials in the Azure portal, or by using the Azure CLI, Azure PowerShell, or other Azure tools. The admin account has full permissions to the registry.
The admin account is currently required for some scenarios to deploy an image from a container registry to certain Azure services. For example, the admin account is needed when you use the Azure portal to deploy a container image from a registry directly toAzure Container InstancesorAzure Web Apps for Containers.
Important
The admin account is designed for a single user to access the registry, mainly for testing purposes. We do not recommend sharing the admin account credentials among multiple users. All users authenticating with the admin account appear as a single user with push and pull access to the registry. Changing or disabling this account disables registry access for all users who use its credentials. Individual identity is recommended for users and service principals for headless scenarios.
The admin account is provided with two passwords, both of which can be regenerated. New passwords created for admin accounts are available immediately. Regenerating passwords for admin accounts will take 60 seconds to replicate and be available. Two passwords allow you to maintain connection to the registry by using one password while you regenerate the other. If the admin account is enabled, you can pass the username and either password to thedocker logincommand when prompted for basic authentication to the registry. For example:
docker login
docker login myregistry.azurecr.io
docker login myregistry.azurecr.io
For recommended practices to manage login credentials, see thedocker logincommand reference.
Azure CLI
Azure PowerShell
To enable the admin user for an existing registry, you can use the--admin-enabledparameter of theaz acr updatecommand in the Azure CLI:
--admin-enabled
az acr update -n <acrName> --admin-enabled true
az acr update -n <acrName> --admin-enabled true
To enable the admin user for an existing registry, you can use theEnableAdminUserparameter of theUpdate-AzContainerRegistrycommand in Azure PowerShell:
EnableAdminUser
Update-AzContainerRegistry -Name <acrName> -ResourceGroupName myResourceGroup -EnableAdminUser
Update-AzContainerRegistry -Name <acrName> -ResourceGroupName myResourceGroup -EnableAdminUser
You can enable the admin user in the Azure portal by navigating your registry, selectingAccess keysunderSETTINGS, thenEnableunderAdmin user.

Log in with an alternative container tool instead of Docker
In some scenarios, you need to use alternative container tools likepodmaninstead of the common container tooldocker. For example:Docker is no longer available in RHEL 8 and 9, so you have to switch your container tool.
podman
docker
The default container tool is set todockerforaz acr logincommands. If you don't set the default container tool and thedockercommand is missing in your environment, the following error will be popped:
docker
az acr login
docker
az acr login --name <acrName>
2024-03-29 07:30:10.014426 An error occurred: DOCKER_COMMAND_ERROR
Please verify if Docker client is installed and running.
az acr login --name <acrName>
2024-03-29 07:30:10.014426 An error occurred: DOCKER_COMMAND_ERROR
Please verify if Docker client is installed and running.
To change the default container tool that theaz acr logincommand uses, you can set the environment variableDOCKER_COMMAND. For example:
az acr login
DOCKER_COMMAND
DOCKER_COMMAND=podman \
az acr login --name <acrName>
DOCKER_COMMAND=podman \
az acr login --name <acrName>
Note
You need the Azure CLI version 2.59.0 or later installed and configured to use this feature. Runaz --versionto find the version. If you need to install or upgrade, seeInstall Azure CLI.
az --version
Next steps
Push your first image using the Azure CLI
Push your first image using the Azure CLI
Push your first image using Azure PowerShell
Push your first image using Azure PowerShell
Feedback
Was this page helpful?
Additional resources