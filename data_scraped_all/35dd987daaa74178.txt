Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Authenticate with Azure Container Registry (ACR) from Azure Kubernetes Service (AKS)
Article
2025-01-02
28 contributors
In this article
When usingAzure Container Registry (ACR)with Azure Kubernetes Service (AKS), you need to establish an authentication mechanism. You can configure the required permissions between ACR and AKS using the Azure CLI, Azure PowerShell, or Azure portal. This article provides examples to configure authentication between these Azure services using the Azure CLI or Azure PowerShell.
The AKS to ACR integration assigns theAcrPullroleto theMicrosoft Entra IDmanaged identityassociated with the agent pool in your AKS cluster. For more information on AKS managed identities, seeSummary of managed identities.
Important
There's a latency issue with Microsoft Entra groups when attaching ACR. If theAcrPullrole is granted to a Microsoft Entra group and the kubelet identity is added to the group to complete the RBAC configuration, there may be a delay before the RBAC group takes effect. If you're running automation that requires the RBAC configuration to be complete, we recommend you useBring your own kubelet identityas a workaround. You can pre-create a user-assigned identity, add it to the Microsoft Entra group, then use the identity as the kubelet identity to create an AKS cluster. This ensures the identity is added to the Microsoft Entra group before a token is generated by kubelet, which avoids the latency issue.
Note
This article covers automatic authentication between AKS and ACR. If you need to pull an image from a private external registry, use animage pull secret.
Before you begin
You need theOwner,Azure account administrator, orAzure co-administratorrole on your Azure subscription.To avoid needing one of these roles, you can instead use an existing managed identity to authenticate ACR from AKS. For more information, seeUse an Azure managed identity to authenticate to an ACR.
To avoid needing one of these roles, you can instead use an existing managed identity to authenticate ACR from AKS. For more information, seeUse an Azure managed identity to authenticate to an ACR.
If you're using Azure CLI, this article requires that you're running Azure CLI version 2.7.0 or later. Runaz --versionto find the version. If you need to install or upgrade, seeInstall Azure CLI.
az --version
If you're using Azure PowerShell, this article requires that you're running Azure PowerShell version 5.9.0 or later. RunGet-InstalledModule -Name Azto find the version. If you need to install or upgrade, seeInstall Azure PowerShell.
Get-InstalledModule -Name Az
Examples and syntax to use Terraform for configuring ACR can be found in theTerraform reference.
Create a new ACR
Azure CLI
Azure PowerShell
If you don't already have an ACR, create one using theaz acr createcommand. The following example sets theMYACRvariable to the name of the ACR,mycontainerregistry, and uses the variable to create the registry. Your ACR name must be globally unique and use only lowercase letters.MYACR=mycontainerregistry

az acr create --name $MYACR --resource-group myContainerRegistryResourceGroup --sku basic
If you don't already have an ACR, create one using theaz acr createcommand. The following example sets theMYACRvariable to the name of the ACR,mycontainerregistry, and uses the variable to create the registry. Your ACR name must be globally unique and use only lowercase letters.
az acr create
MYACR
MYACR=mycontainerregistry

az acr create --name $MYACR --resource-group myContainerRegistryResourceGroup --sku basic
MYACR=mycontainerregistry

az acr create --name $MYACR --resource-group myContainerRegistryResourceGroup --sku basic
If you don't already have an ACR, create one using theNew-AzContainerRegistrycmdlet. The following example sets theMYACRvariable to the name of the ACR,mycontainerregistry, and uses the variable to create the registry. Your ACR name must be globally unique and use only lowercase letters.$MYACR = 'mycontainerregistry'

New-AzContainerRegistry -Name $MYACR -ResourceGroupName myContainerRegistryResourceGroup -Sku Basic
If you don't already have an ACR, create one using theNew-AzContainerRegistrycmdlet. The following example sets theMYACRvariable to the name of the ACR,mycontainerregistry, and uses the variable to create the registry. Your ACR name must be globally unique and use only lowercase letters.
New-AzContainerRegistry
MYACR
$MYACR = 'mycontainerregistry'

New-AzContainerRegistry -Name $MYACR -ResourceGroupName myContainerRegistryResourceGroup -Sku Basic
$MYACR = 'mycontainerregistry'

New-AzContainerRegistry -Name $MYACR -ResourceGroupName myContainerRegistryResourceGroup -Sku Basic
Create a new AKS cluster and integrate with an existing ACR
Azure CLI
Azure PowerShell
Create a new AKS cluster and integrate with an existing ACR using theaz aks createcommand with the--attach-acrparameter. This command allows you to authorize an existing ACR in your subscription and configures the appropriateAcrPullrole for the managed identity.MYACR=mycontainerregistry

az aks create --name myAKSCluster --resource-group myResourceGroup --generate-ssh-keys --attach-acr $MYACRThis command may take several minutes to complete.NoteIf you're using an ACR located in a different subscription from your AKS cluster or would prefer to use the ACRresource IDinstead of the ACR name, you can do so using the following syntax:az aks create -n myAKSCluster -g myResourceGroup --generate-ssh-keys --attach-acr /subscriptions/<subscription-id>/resourceGroups/myContainerRegistryResourceGroup/providers/Microsoft.ContainerRegistry/registries/myContainerRegistry
Create a new AKS cluster and integrate with an existing ACR using theaz aks createcommand with the--attach-acrparameter. This command allows you to authorize an existing ACR in your subscription and configures the appropriateAcrPullrole for the managed identity.
az aks create
--attach-acr
MYACR=mycontainerregistry

az aks create --name myAKSCluster --resource-group myResourceGroup --generate-ssh-keys --attach-acr $MYACR
MYACR=mycontainerregistry

az aks create --name myAKSCluster --resource-group myResourceGroup --generate-ssh-keys --attach-acr $MYACR
This command may take several minutes to complete.
Note
If you're using an ACR located in a different subscription from your AKS cluster or would prefer to use the ACRresource IDinstead of the ACR name, you can do so using the following syntax:
az aks create -n myAKSCluster -g myResourceGroup --generate-ssh-keys --attach-acr /subscriptions/<subscription-id>/resourceGroups/myContainerRegistryResourceGroup/providers/Microsoft.ContainerRegistry/registries/myContainerRegistry
az aks create -n myAKSCluster -g myResourceGroup --generate-ssh-keys --attach-acr /subscriptions/<subscription-id>/resourceGroups/myContainerRegistryResourceGroup/providers/Microsoft.ContainerRegistry/registries/myContainerRegistry
Create a new AKS cluster and integrate with an existing ACR using theNew-AzAksClustercmdlet with the-AcrNameToAttachparameterparameter. This command allows you to authorize an existing ACR in your subscription and configures the appropriateAcrPullrole for the managed identity.$MYACR = 'mycontainerregistry'

New-AzAksCluster -Name myAKSCluster -ResourceGroupName myResourceGroup -GenerateSshKey -AcrNameToAttach $MYACRThis command may take several minutes to complete.
Create a new AKS cluster and integrate with an existing ACR using theNew-AzAksClustercmdlet with the-AcrNameToAttachparameterparameter. This command allows you to authorize an existing ACR in your subscription and configures the appropriateAcrPullrole for the managed identity.
New-AzAksCluster
-AcrNameToAttach
$MYACR = 'mycontainerregistry'

New-AzAksCluster -Name myAKSCluster -ResourceGroupName myResourceGroup -GenerateSshKey -AcrNameToAttach $MYACR
$MYACR = 'mycontainerregistry'

New-AzAksCluster -Name myAKSCluster -ResourceGroupName myResourceGroup -GenerateSshKey -AcrNameToAttach $MYACR
This command may take several minutes to complete.
Configure ACR integration for an existing AKS cluster
Attach an ACR to an existing AKS cluster
Azure CLI
Azure PowerShell
Integrate an existing ACR with an existing AKS cluster using theaz aks updatecommand with the--attach-acrparameterand a valid value foracr-nameoracr-resource-id.# Attach using acr-name
az aks update --name myAKSCluster --resource-group myResourceGroup --attach-acr <acr-name>

# Attach using acr-resource-id
az aks update --name myAKSCluster --resource-group myResourceGroup --attach-acr <acr-resource-id>NoteTheaz aks update --attach-acrcommand uses the permissions of the user running the command to create the ACR role assignment. This role is assigned to thekubeletmanaged identity. For more information on AKS managed identities, seeSummary of managed identities.
Integrate an existing ACR with an existing AKS cluster using theaz aks updatecommand with the--attach-acrparameterand a valid value foracr-nameoracr-resource-id.
az aks update
--attach-acr
# Attach using acr-name
az aks update --name myAKSCluster --resource-group myResourceGroup --attach-acr <acr-name>

# Attach using acr-resource-id
az aks update --name myAKSCluster --resource-group myResourceGroup --attach-acr <acr-resource-id>
# Attach using acr-name
az aks update --name myAKSCluster --resource-group myResourceGroup --attach-acr <acr-name>

# Attach using acr-resource-id
az aks update --name myAKSCluster --resource-group myResourceGroup --attach-acr <acr-resource-id>
Note
Theaz aks update --attach-acrcommand uses the permissions of the user running the command to create the ACR role assignment. This role is assigned to thekubeletmanaged identity. For more information on AKS managed identities, seeSummary of managed identities.
az aks update --attach-acr
Integrate an existing ACR with an existing AKS cluster using theSet-AzAksClustercommand with the-AcrNameToAttachparameterand a valid value foracr-name.Set-AzAksCluster -Name myAKSCluster -ResourceGroupName myResourceGroup -AcrNameToAttach <acr-name>NoteRunning theSet-AzAksCluster -AcrNameToAttachcmdlet uses the permissions of the user running the command to create the role ACR assignment. This role is assigned to thekubeletmanaged identity. For more information on AKS managed identities, seeSummary of managed identities.
Integrate an existing ACR with an existing AKS cluster using theSet-AzAksClustercommand with the-AcrNameToAttachparameterand a valid value foracr-name.
Set-AzAksCluster
-AcrNameToAttach
Set-AzAksCluster -Name myAKSCluster -ResourceGroupName myResourceGroup -AcrNameToAttach <acr-name>
Set-AzAksCluster -Name myAKSCluster -ResourceGroupName myResourceGroup -AcrNameToAttach <acr-name>
Note
Running theSet-AzAksCluster -AcrNameToAttachcmdlet uses the permissions of the user running the command to create the role ACR assignment. This role is assigned to thekubeletmanaged identity. For more information on AKS managed identities, seeSummary of managed identities.
Set-AzAksCluster -AcrNameToAttach
Detach an ACR from an AKS cluster
Azure CLI
Azure PowerShell
Remove the integration between an ACR and an AKS cluster using theaz aks updatecommand with the--detach-acrparameterand a valid value foracr-nameoracr-resource-id.# Detach using acr-name
az aks update --name myAKSCluster --resource-group myResourceGroup --detach-acr <acr-name>

# Detach using acr-resource-id
az aks update --name myAKSCluster --resource-group myResourceGroup --detach-acr <acr-resource-id>
Remove the integration between an ACR and an AKS cluster using theaz aks updatecommand with the--detach-acrparameterand a valid value foracr-nameoracr-resource-id.
az aks update
--detach-acr
# Detach using acr-name
az aks update --name myAKSCluster --resource-group myResourceGroup --detach-acr <acr-name>

# Detach using acr-resource-id
az aks update --name myAKSCluster --resource-group myResourceGroup --detach-acr <acr-resource-id>
# Detach using acr-name
az aks update --name myAKSCluster --resource-group myResourceGroup --detach-acr <acr-name>

# Detach using acr-resource-id
az aks update --name myAKSCluster --resource-group myResourceGroup --detach-acr <acr-resource-id>
Remove the integration between an ACR and an AKS cluster using theSet-AzAksClustercommand with the-AcrNameToDetachparameterand a valid value foracr-name.Set-AzAksCluster -Name myAKSCluster -ResourceGroupName myResourceGroup -AcrNameToDetach <acr-name>
Remove the integration between an ACR and an AKS cluster using theSet-AzAksClustercommand with the-AcrNameToDetachparameterand a valid value foracr-name.
Set-AzAksCluster
-AcrNameToDetach
Set-AzAksCluster -Name myAKSCluster -ResourceGroupName myResourceGroup -AcrNameToDetach <acr-name>
Set-AzAksCluster -Name myAKSCluster -ResourceGroupName myResourceGroup -AcrNameToDetach <acr-name>
Working with ACR & AKS
Import an image into your ACR
Azure CLI
Azure PowerShell
Import an image from Docker Hub into your ACR using theaz acr importcommand.az acr import --name <acr-name> --source docker.io/library/nginx:latest --image nginx:v1
Import an image from Docker Hub into your ACR using theaz acr importcommand.
az acr import
az acr import --name <acr-name> --source docker.io/library/nginx:latest --image nginx:v1
az acr import --name <acr-name> --source docker.io/library/nginx:latest --image nginx:v1
Import an image from Docker Hub into your ACR using the [Import-AzContainerRegistryImage] cmdlet.Import-AzContainerRegistryImage -RegistryName <acr-name> -ResourceGroupName myResourceGroup -SourceRegistryUri docker.io -SourceImage library/nginx:latest
Import an image from Docker Hub into your ACR using the [Import-AzContainerRegistryImage] cmdlet.
Import-AzContainerRegistryImage
Import-AzContainerRegistryImage -RegistryName <acr-name> -ResourceGroupName myResourceGroup -SourceRegistryUri docker.io -SourceImage library/nginx:latest
Import-AzContainerRegistryImage -RegistryName <acr-name> -ResourceGroupName myResourceGroup -SourceRegistryUri docker.io -SourceImage library/nginx:latest
Deploy the sample image from ACR to AKS
Azure CLI
Azure PowerShell
Ensure you have the proper AKS credentials using theaz aks get-credentialscommand.az aks get-credentials --resource-group myResourceGroup --name myAKSCluster
Ensure you have the proper AKS credentials using theaz aks get-credentialscommand.
az aks get-credentials
az aks get-credentials --resource-group myResourceGroup --name myAKSCluster
az aks get-credentials --resource-group myResourceGroup --name myAKSCluster
Create a file calledacr-nginx.yamlusing the following sample YAML and replaceacr-namewith the name of your ACR.apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx0-deployment
  labels:
    app: nginx0-deployment
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nginx0
  template:
    metadata:
      labels:
        app: nginx0
    spec:
      containers:
      - name: nginx
        image: <acr-name>.azurecr.io/nginx:v1
        ports:
        - containerPort: 80
Create a file calledacr-nginx.yamlusing the following sample YAML and replaceacr-namewith the name of your ACR.
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx0-deployment
  labels:
    app: nginx0-deployment
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nginx0
  template:
    metadata:
      labels:
        app: nginx0
    spec:
      containers:
      - name: nginx
        image: <acr-name>.azurecr.io/nginx:v1
        ports:
        - containerPort: 80
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx0-deployment
  labels:
    app: nginx0-deployment
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nginx0
  template:
    metadata:
      labels:
        app: nginx0
    spec:
      containers:
      - name: nginx
        image: <acr-name>.azurecr.io/nginx:v1
        ports:
        - containerPort: 80
Run the deployment in your AKS cluster using thekubectl applycommand.kubectl apply -f acr-nginx.yaml
Run the deployment in your AKS cluster using thekubectl applycommand.
kubectl apply
kubectl apply -f acr-nginx.yaml
kubectl apply -f acr-nginx.yaml
Monitor the deployment using thekubectl get podscommand.kubectl get podsThe output should show two running pods, as shown in the following example output:NAME                                 READY   STATUS    RESTARTS   AGE
nginx0-deployment-669dfc4d4b-x74kr   1/1     Running   0          20s
nginx0-deployment-669dfc4d4b-xdpd6   1/1     Running   0          20s
Monitor the deployment using thekubectl get podscommand.
kubectl get pods
kubectl get pods
kubectl get pods
The output should show two running pods, as shown in the following example output:
NAME                                 READY   STATUS    RESTARTS   AGE
nginx0-deployment-669dfc4d4b-x74kr   1/1     Running   0          20s
nginx0-deployment-669dfc4d4b-xdpd6   1/1     Running   0          20s
NAME                                 READY   STATUS    RESTARTS   AGE
nginx0-deployment-669dfc4d4b-x74kr   1/1     Running   0          20s
nginx0-deployment-669dfc4d4b-xdpd6   1/1     Running   0          20s
Ensure you have the proper AKS credentials using theImport-AzAksCredentialcmdlet.Import-AzAksCredential -ResourceGroupName myResourceGroup -Name myAKSCluster
Ensure you have the proper AKS credentials using theImport-AzAksCredentialcmdlet.
Import-AzAksCredential
Import-AzAksCredential -ResourceGroupName myResourceGroup -Name myAKSCluster
Import-AzAksCredential -ResourceGroupName myResourceGroup -Name myAKSCluster
Create a file calledacr-nginx.yamlusing the following sample YAML and replaceacr-namewith the name of your ACR.apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx0-deployment
  labels:
    app: nginx0-deployment
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nginx0
  template:
    metadata:
      labels:
        app: nginx0
    spec:
      containers:
      - name: nginx
        image: <acr-name>.azurecr.io/nginx:v1
        ports:
        - containerPort: 80
Create a file calledacr-nginx.yamlusing the following sample YAML and replaceacr-namewith the name of your ACR.
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx0-deployment
  labels:
    app: nginx0-deployment
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nginx0
  template:
    metadata:
      labels:
        app: nginx0
    spec:
      containers:
      - name: nginx
        image: <acr-name>.azurecr.io/nginx:v1
        ports:
        - containerPort: 80
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx0-deployment
  labels:
    app: nginx0-deployment
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nginx0
  template:
    metadata:
      labels:
        app: nginx0
    spec:
      containers:
      - name: nginx
        image: <acr-name>.azurecr.io/nginx:v1
        ports:
        - containerPort: 80
Run the deployment in your AKS cluster using thekubectl applycommand.kubectl apply -f acr-nginx.yaml
Run the deployment in your AKS cluster using thekubectl applycommand.
kubectl apply
kubectl apply -f acr-nginx.yaml
kubectl apply -f acr-nginx.yaml
Monitor the deployment using thekubectl get podscommand.kubectl get podsThe output should show two running pods, as shown in the following example output:NAME                                 READY   STATUS    RESTARTS   AGE
nginx0-deployment-669dfc4d4b-x74kr   1/1     Running   0          20s
nginx0-deployment-669dfc4d4b-xdpd6   1/1     Running   0          20s
Monitor the deployment using thekubectl get podscommand.
kubectl get pods
kubectl get pods
kubectl get pods
The output should show two running pods, as shown in the following example output:
NAME                                 READY   STATUS    RESTARTS   AGE
nginx0-deployment-669dfc4d4b-x74kr   1/1     Running   0          20s
nginx0-deployment-669dfc4d4b-xdpd6   1/1     Running   0          20s
NAME                                 READY   STATUS    RESTARTS   AGE
nginx0-deployment-669dfc4d4b-x74kr   1/1     Running   0          20s
nginx0-deployment-669dfc4d4b-xdpd6   1/1     Running   0          20s
Configure ACR with private link through Azure HTTP Proxy and AKS
ACR has two endpoints:
REST endpoint:{REGISTRY_NAME}.azurecr.io
{REGISTRY_NAME}.azurecr.io
Data endpoint:{REGISTRY_NAME}.{REGISTRY_LOCATION}.data.azurecr.io
{REGISTRY_NAME}.{REGISTRY_LOCATION}.data.azurecr.io
Ensure the rest and data endpoints are added tonoProxyunder the HTTP Proxy config.
noProxy
{
  "httpProxy": "string",
  "httpsProxy": "string",
  "noProxy": [
    "{REGISTRY_NAME}.azurecr.io",
    "{REGISTRY_NAME}.{REGISTRY_LOCATION}.data.azurecr.io"
  ],
  "trustedCa": "string"
}
{
  "httpProxy": "string",
  "httpsProxy": "string",
  "noProxy": [
    "{REGISTRY_NAME}.azurecr.io",
    "{REGISTRY_NAME}.{REGISTRY_LOCATION}.data.azurecr.io"
  ],
  "trustedCa": "string"
}
Verify through logs that traffic is through private link.
Note
Both endpoints are needed otherwise some traffic will be over HTTP proxy rather than private link.
Troubleshooting
Validate the registry is accessible from the AKS cluster using theaz aks check-acrcommand.
az aks check-acr
Learn more aboutACR monitoring.
Learn more aboutACR health.
Azure Kubernetes Service

Additional resources