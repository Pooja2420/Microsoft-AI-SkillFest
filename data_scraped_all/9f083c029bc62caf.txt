Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Relocate Azure Key Vault to another region
Article
2025-04-11
2 contributors
In this article
There are various reasons why you may want to move your existing Azure resources from one region to another. You may want to:
Take advantage of a new Azure region.
Deploy features or services available in specific regions only.
Meet internal policy and governance requirements.
Align with company mergers and acquisitions
Meet capacity planning requirements.
Azure Key Vault doesn't support key vault relocation to another region.
Instead of relocation, you need to:
Create a new key vault with the relocation of the associated Azure services.
Regenerate any requiredkeys,secrets, orcertificates. In some cases, you may need to transfer the secrets or certificates from your existing key vault to the relocated key vault.

Prerequisites
Verify that your Azure subscription allows you to create key vaults in the target region.
Create a dependency map with all the Azure services used by the Key Vault. For the services that are in scope of the relocation, you must choose the appropriate relocation strategy.
Depending on your Key Vault design, you may need to deploy and configure theVirtual Networkin the target region.
Document and plan to re-configure in the Key Vault in the target region:Access Policies and Network configuration settings.Soft delete and purge protection.Autorotation settings.
Access Policies and Network configuration settings.
Soft delete and purge protection.
Autorotation settings.
Downtime
To understand the possible downtimes involved, seeCloud Adoption Framework for Azure: Select a relocation method.
Consideration for Service Endpoints
The virtual network service endpoints for Azure Key Vault restrict access to a specified virtual network. The endpoints can also restrict access to a list of IPv4 (internet protocol version 4) address ranges. Any user connecting to the Key Vault from outside those sources is denied access. If Service endpoints were configured in the source region for the Key Vault resource, the same would need to be done in the target one.
For a successful recreation of the Key Vault to the target region, the VNet and Subnet must be created beforehand. In case the move of these two resources is being carried out with the Azure Resource Mover tool, the service endpoints won't be configured automatically. Hence, they need to be configured manually, which can be done through theAzure portal, theAzure CLI, orAzure PowerShell.
Consideration for Private Endpoint
Azure Private Link provides private connectivity from a virtual network toAzure platform as a service (PaaS), customer-owned, or Microsoft partner services. Private Link simplifies the network architecture and secures the connection between endpoints in Azure by eliminating data exposure to the public internet.
For a successful recreation of the Key Vault in the target region, the VNet and Subnet must be created before the actual recreation occurs.
Consideration for Azure Private Endpoint DNS Integration
It's important to correctly configure your DNS settings to resolve the private endpoint IP address to the fully qualified domain name (FQDN) of the connection string.
Existing Microsoft Azure services might already have a DNS configuration for a public endpoint. This configuration must be overridden to connect using your private endpoint.
The network interface associated with the private endpoint contains the information to configure your DNS. The network interface information includes FQDN and private IP addresses for your private link resource.
You can use the following options to configure your DNS settings for private endpoints:
Use the host file (only recommended for testing). You can use the host file on a virtual machine to override the DNS.
Use a private DNS zone.You can use private DNS zones to override the DNS resolution for a private endpoint. A private DNS zone can be linked to your virtual network to resolve specific domains.
Use your DNS forwarder (optional).You can use your DNS forwarder to override the DNS resolution for a private link resource. Create a DNS forwarding rule to use a private DNS zone on your DNS server hosted in a virtual network.
Prepare
Portal
PowerShell
To export a template by using Azure portal:
Sign in to theAzure portal.
Sign in to theAzure portal.
SelectAll resourcesand then select your key vault.
SelectAll resourcesand then select your key vault.
Select >Automation>Export template.
Select >Automation>Export template.
ChooseDownloadin theExport templateblade.
ChooseDownloadin theExport templateblade.
Locate the .zip file that you downloaded from the portal, and unzip that file to a folder of your choice.This zip file contains the .json files that comprise the template and scripts to deploy the template.
Locate the .zip file that you downloaded from the portal, and unzip that file to a folder of your choice.
This zip file contains the .json files that comprise the template and scripts to deploy the template.
To export a template by using PowerShell:
Sign in to your Azure subscription with theConnect-AzAccountcommand and follow the on-screen directions:Connect-AzAccount
Sign in to your Azure subscription with theConnect-AzAccountcommand and follow the on-screen directions:
Connect-AzAccount
Connect-AzAccount
If your identity is associated with more than one subscription, then set your active subscription to subscription of the key vault that you want to move.$context = Get-AzSubscription -SubscriptionId <subscription-id>
Set-AzContext $context
If your identity is associated with more than one subscription, then set your active subscription to subscription of the key vault that you want to move.
$context = Get-AzSubscription -SubscriptionId <subscription-id>
Set-AzContext $context
$context = Get-AzSubscription -SubscriptionId <subscription-id>
Set-AzContext $context
Export the template of your source key vault. These commands save a json template to your current directory.$resource = Get-AzResource `
  -ResourceGroupName <resource-group-name> `
  -ResourceName <key-vault-name> `
  -ResourceType Microsoft.KeyVault/vaults `
Export-AzResourceGroup `
  -ResourceGroupName <resource-group-name> `
  -Resource $resource.ResourceId
Export the template of your source key vault. These commands save a json template to your current directory.
$resource = Get-AzResource `
  -ResourceGroupName <resource-group-name> `
  -ResourceName <key-vault-name> `
  -ResourceType Microsoft.KeyVault/vaults `
Export-AzResourceGroup `
  -ResourceGroupName <resource-group-name> `
  -Resource $resource.ResourceId
$resource = Get-AzResource `
  -ResourceGroupName <resource-group-name> `
  -ResourceName <key-vault-name> `
  -ResourceType Microsoft.KeyVault/vaults `
Export-AzResourceGroup `
  -ResourceGroupName <resource-group-name> `
  -Resource $resource.ResourceId
Keep in mind the following concepts:
Key vault names are globally unique. You can't reuse a vault name.
You need to reconfigure your access policies and network configuration settings in the new key vault.
You need to reconfigure soft-delete and purge protection in the new key vault.
The backup and restore operation doesn't preserve your autorotation settings. You might need to reconfigure the settings.
Modify the template
Modify the template by changing the key vault name and region.
Portal
PowerShell
To deploy the template by using Azure portal:
In the Azure portal, selectCreate a resource.
In the Azure portal, selectCreate a resource.
InSearch the Marketplace, typetemplate deployment, and then pressENTER.
InSearch the Marketplace, typetemplate deployment, and then pressENTER.
SelectTemplate deployment.
SelectTemplate deployment.
SelectCreate.
SelectCreate.
SelectBuild your own template in the editor.
SelectBuild your own template in the editor.
SelectLoad file, and then follow the instructions to load thetemplate.jsonfile that you downloaded in the last section.
SelectLoad file, and then follow the instructions to load thetemplate.jsonfile that you downloaded in the last section.
In thetemplate.jsonfile, name the key vault by setting the default value of the key vault name. This example sets the default value of the key vault name tomytargetaccount."$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
"contentVersion": "1.0.0.0",
"parameters": {
    "vaults_name": {
        "defaultValue": "key-vault-name",
        "type": "String"
    }
},
In thetemplate.jsonfile, name the key vault by setting the default value of the key vault name. This example sets the default value of the key vault name tomytargetaccount.
mytargetaccount
"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
"contentVersion": "1.0.0.0",
"parameters": {
    "vaults_name": {
        "defaultValue": "key-vault-name",
        "type": "String"
    }
},
"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
"contentVersion": "1.0.0.0",
"parameters": {
    "vaults_name": {
        "defaultValue": "key-vault-name",
        "type": "String"
    }
},
Edit thelocationproperty in thetemplate.jsonfile to the target region. This example sets the target region tocentralus."resources": [
   {
     "type": "Microsoft.KeyVault/vaults",
     "apiVersion": "2023-07-01",
     "name": "[parameters('vaults_name')]",
     "location": "centralus",
     ...
   },
   ...
]To obtain region location codes, seeAzure Locations. The code for a region is the region name with no spaces,Central US=centralus.
Edit thelocationproperty in thetemplate.jsonfile to the target region. This example sets the target region tocentralus.
centralus
"resources": [
   {
     "type": "Microsoft.KeyVault/vaults",
     "apiVersion": "2023-07-01",
     "name": "[parameters('vaults_name')]",
     "location": "centralus",
     ...
   },
   ...
]
"resources": [
   {
     "type": "Microsoft.KeyVault/vaults",
     "apiVersion": "2023-07-01",
     "name": "[parameters('vaults_name')]",
     "location": "centralus",
     ...
   },
   ...
]
To obtain region location codes, seeAzure Locations. The code for a region is the region name with no spaces,Central US=centralus.
Remove resources of typ private endpoint in the template.{
  "type": "Microsoft.KeyVault/vaults/privateEndpointConnections",
  ...
}
Remove resources of typ private endpoint in the template.
{
  "type": "Microsoft.KeyVault/vaults/privateEndpointConnections",
  ...
}
{
  "type": "Microsoft.KeyVault/vaults/privateEndpointConnections",
  ...
}
In case you configured a service endpoint in your key vault, in thenetworkAclsection, undervirtualNetworkRules, add the rule for the target subnet. Ensure that theignoreMissingVnetServiceEndpointflag is set to False, so that the IaC fails to deploy the Key Vault in case the service endpoint isn't configured in the target region.parameter.json{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentParameters.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "target_vnet_externalid": {
      "value": "virtualnetwork-externalid"
    },
    "target_subnet_name": {
      "value": "subnet-name"
    }
  }
}template.json"networkAcls": {
  "bypass": "AzureServices",
  "defaultAction": "Deny",
  "ipRules": [],
  "virtualNetworkRules": [
    {
        "id": "[concat(parameters('target_vnet_externalid'), concat('/subnets/', parameters('target_subnet_name')]",
        "ignoreMissingVnetServiceEndpoint": false
    }
  ]
}
In case you configured a service endpoint in your key vault, in thenetworkAclsection, undervirtualNetworkRules, add the rule for the target subnet. Ensure that theignoreMissingVnetServiceEndpointflag is set to False, so that the IaC fails to deploy the Key Vault in case the service endpoint isn't configured in the target region.
parameter.json
{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentParameters.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "target_vnet_externalid": {
      "value": "virtualnetwork-externalid"
    },
    "target_subnet_name": {
      "value": "subnet-name"
    }
  }
}
{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentParameters.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "target_vnet_externalid": {
      "value": "virtualnetwork-externalid"
    },
    "target_subnet_name": {
      "value": "subnet-name"
    }
  }
}
template.json
"networkAcls": {
  "bypass": "AzureServices",
  "defaultAction": "Deny",
  "ipRules": [],
  "virtualNetworkRules": [
    {
        "id": "[concat(parameters('target_vnet_externalid'), concat('/subnets/', parameters('target_subnet_name')]",
        "ignoreMissingVnetServiceEndpoint": false
    }
  ]
}
"networkAcls": {
  "bypass": "AzureServices",
  "defaultAction": "Deny",
  "ipRules": [],
  "virtualNetworkRules": [
    {
        "id": "[concat(parameters('target_vnet_externalid'), concat('/subnets/', parameters('target_subnet_name')]",
        "ignoreMissingVnetServiceEndpoint": false
    }
  ]
}
To deploy the template by using PowerShell:
In thetemplate.jsonfile, name the target key vault by setting the default value of the key vault name. This example sets the default value of the key vault name tokey-vault-name."$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
"contentVersion": "1.0.0.0",
"parameters": {
   "vaults_name": {
     "defaultValue": "key-vault-name",
     "type": "String"
   }
}
In thetemplate.jsonfile, name the target key vault by setting the default value of the key vault name. This example sets the default value of the key vault name tokey-vault-name.
key-vault-name
"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
"contentVersion": "1.0.0.0",
"parameters": {
   "vaults_name": {
     "defaultValue": "key-vault-name",
     "type": "String"
   }
}
"$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
"contentVersion": "1.0.0.0",
"parameters": {
   "vaults_name": {
     "defaultValue": "key-vault-name",
     "type": "String"
   }
}
Edit thelocationproperty in thetemplate.jsonfile to the target region. This example sets the target region toeastus."resources": [
   {
     "type": "Microsoft.KeyVault/vaults",
     "apiVersion": "2023-07-01",
     "name": "[parameters('vaults_name')]",
     "location": "eastus",
     ...
   },
   ...
]You can obtain region codes by running theGet-AzLocationcommand.Get-AzLocation | format-table
Edit thelocationproperty in thetemplate.jsonfile to the target region. This example sets the target region toeastus.
eastus
"resources": [
   {
     "type": "Microsoft.KeyVault/vaults",
     "apiVersion": "2023-07-01",
     "name": "[parameters('vaults_name')]",
     "location": "eastus",
     ...
   },
   ...
]
"resources": [
   {
     "type": "Microsoft.KeyVault/vaults",
     "apiVersion": "2023-07-01",
     "name": "[parameters('vaults_name')]",
     "location": "eastus",
     ...
   },
   ...
]
You can obtain region codes by running theGet-AzLocationcommand.
Get-AzLocation | format-table
Get-AzLocation | format-table
Remove resources of typ private endpoint in the template.{
  "type": "Microsoft.KeyVault/vaults/privateEndpointConnections",
  ...
}
Remove resources of typ private endpoint in the template.
{
  "type": "Microsoft.KeyVault/vaults/privateEndpointConnections",
  ...
}
{
  "type": "Microsoft.KeyVault/vaults/privateEndpointConnections",
  ...
}
In case you have configured a service endpoint in your key vault, in thenetworkAclsection, undervirtualNetworkRules, add the rule for the target subnet. Ensure that theignoreMissingVnetServiceEndpointflag is set to False, so that the IaC fails to deploy the Key Vault in case the service endpoint isn't configured in the target region.parameter.json{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentParameters.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "target_vnet_externalid": {
      "value": "virtualnetwork-externalid"
    },
    "target_subnet_name": {
      "value": "subnet-name"
    }
  }
}template.json"networkAcls": {
   "bypass": "AzureServices",
   "defaultAction": "Deny",
   "ipRules": [],
   "virtualNetworkRules": [
     {
         "id": "[concat(parameters('target_vnet_externalid'), concat('/subnets/', parameters('target_subnet_name')]",
         "ignoreMissingVnetServiceEndpoint": false
     }
   ]
}
In case you have configured a service endpoint in your key vault, in thenetworkAclsection, undervirtualNetworkRules, add the rule for the target subnet. Ensure that theignoreMissingVnetServiceEndpointflag is set to False, so that the IaC fails to deploy the Key Vault in case the service endpoint isn't configured in the target region.
parameter.json
{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentParameters.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "target_vnet_externalid": {
      "value": "virtualnetwork-externalid"
    },
    "target_subnet_name": {
      "value": "subnet-name"
    }
  }
}
{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentParameters.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "target_vnet_externalid": {
      "value": "virtualnetwork-externalid"
    },
    "target_subnet_name": {
      "value": "subnet-name"
    }
  }
}
template.json
"networkAcls": {
   "bypass": "AzureServices",
   "defaultAction": "Deny",
   "ipRules": [],
   "virtualNetworkRules": [
     {
         "id": "[concat(parameters('target_vnet_externalid'), concat('/subnets/', parameters('target_subnet_name')]",
         "ignoreMissingVnetServiceEndpoint": false
     }
   ]
}
"networkAcls": {
   "bypass": "AzureServices",
   "defaultAction": "Deny",
   "ipRules": [],
   "virtualNetworkRules": [
     {
         "id": "[concat(parameters('target_vnet_externalid'), concat('/subnets/', parameters('target_subnet_name')]",
         "ignoreMissingVnetServiceEndpoint": false
     }
   ]
}
Redeploy
Deploy the template to create a new key vault in the target region.
Portal
PowerShell
Save thetemplate.jsonfile.
Save thetemplate.jsonfile.
Enter or select the property values:Subscription: Select an Azure subscription.Resource group: SelectCreate newand give the resource group a name.Location: Select an Azure location.
Enter or select the property values:
Subscription: Select an Azure subscription.
Resource group: SelectCreate newand give the resource group a name.
Location: Select an Azure location.
SelectI agree to the terms and conditions stated above, and then selectSelect Purchase.
SelectI agree to the terms and conditions stated above, and then selectSelect Purchase.
Access Policies and Network configuration settings (private endpoints) need to be re-configured in the new Key Vault. Soft delete and purge protection need to be re-configured in the new key vault and theAutorotation settings.
Access Policies and Network configuration settings (private endpoints) need to be re-configured in the new Key Vault. Soft delete and purge protection need to be re-configured in the new key vault and theAutorotation settings.
Obtain the subscription ID where you want to deploy the target public IP withGet-AzSubscription:Get-AzSubscription
Obtain the subscription ID where you want to deploy the target public IP withGet-AzSubscription:
Get-AzSubscription
Get-AzSubscription
Use these commands to deploy your template:$resourceGroupName = Read-Host -Prompt "Enter the Resource Group name"
$location = Read-Host -Prompt "Enter the location (i.e. eastus)"

New-AzResourceGroup -Name $resourceGroupName -Location "$location"
New-AzResourceGroupDeployment -ResourceGroupName $resourceGroupName -TemplateUri "<name of your local template file>"
Use these commands to deploy your template:
$resourceGroupName = Read-Host -Prompt "Enter the Resource Group name"
$location = Read-Host -Prompt "Enter the location (i.e. eastus)"

New-AzResourceGroup -Name $resourceGroupName -Location "$location"
New-AzResourceGroupDeployment -ResourceGroupName $resourceGroupName -TemplateUri "<name of your local template file>"
$resourceGroupName = Read-Host -Prompt "Enter the Resource Group name"
$location = Read-Host -Prompt "Enter the location (i.e. eastus)"

New-AzResourceGroup -Name $resourceGroupName -Location "$location"
New-AzResourceGroupDeployment -ResourceGroupName $resourceGroupName -TemplateUri "<name of your local template file>"
Access Policies and Network configuration settings (private endpoints) need to be re-configured in the new Key Vault. Soft delete and purge protection need to be re-configured in the new key vault and as theAutorotation settings.
Access Policies and Network configuration settings (private endpoints) need to be re-configured in the new Key Vault. Soft delete and purge protection need to be re-configured in the new key vault and as theAutorotation settings.
Tip
If you receive an error which states that the XML specified is not syntactically valid, compare the JSON in your template with the schemas described in the Azure Resource Manager documentation.
Redeploy with data migration
Important
If you plan to move a Key Vault across regions but within the same geography, it's recommended that you do  abackup and restore for secrets, keys and certificatesis recommended.
Follow steps described in theredeploy approach.
Forsecrets:Copy and save the secret value in the source key vault.Recreate the secret in the target key vault and set the value to saved secret.
Copy and save the secret value in the source key vault.
Recreate the secret in the target key vault and set the value to saved secret.
Forcertificates:Export the certificate into a PFX file.Import the PFX file into the target key vault. If you can't export the private key (exportableis not set) you must generate certificate a new certificate and import it into the target key vault.
Export the certificate into a PFX file.
Import the PFX file into the target key vault. If you can't export the private key (exportableis not set) you must generate certificate a new certificate and import it into the target key vault.
exportable
With the relocation of the associated Azure service thekeysare regenerated.
Confirm that the keys have been generated for the associated service.
Verify
Before deleting your old key vault, verify that the new vault contains all of the required keys, secrets, and certificates after the relocation of the associated Azure services.
Related content
Azure Key Vault backup and restore
Moving an Azure Key Vault across resource groups
Moving an Azure Key Vault to another subscription
Feedback
Was this page helpful?
Additional resources