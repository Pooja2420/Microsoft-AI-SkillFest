Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Configure multi-region writes in your applications that use Azure Cosmos DB
Article
2024-08-14
4 contributors
In this article
APPLIES TO:NoSQL
In multiple region write scenarios, you can get a performance benefit by writing only to the region close to your application instance. Azure Cosmos DB handles the replication for you behind the scenes.
After you enable your account for multiple write regions, you must make two changes in your application to theConnectionPolicy. Within theConnectionPolicy, setUseMultipleWriteLocationstotrueand pass the name of the region where the application is deployed toApplicationRegion. This action populates thePreferredLocationsproperty based on the geo-proximity from location passed in. If a new region is later added to the account, the application doesn't have to be updated or redeployed. It automatically detects the closer region and auto-homes on to it should a regional event occur.
ConnectionPolicy
ConnectionPolicy
UseMultipleWriteLocations
true
ApplicationRegion
PreferredLocations
Note
Azure Cosmos DB accounts initially configured with single write region can be configured to multiple write regions with zero down time. To learn more see,Configure multiple-write regions.
Azure portal
To use multi-region writes, enable your Azure Cosmos DB account for multiple regions by using the Azure portal. Specify which regions your application can write to.
To enable multi-region writes, use the following steps:
Sign-in to theAzure portal.
Sign-in to theAzure portal.
Navigate to your Azure Cosmos DB account and from the menu, open theReplicate data globallypane.
Navigate to your Azure Cosmos DB account and from the menu, open theReplicate data globallypane.
Under theMulti-region writesoption, chooseenable. It automatically adds the existing regions to read and write regions.
Under theMulti-region writesoption, chooseenable. It automatically adds the existing regions to read and write regions.
You can add more regions by selecting the icons on the map or by selecting theAdd regionbutton. All the regions you add have both read and writes enabled.
You can add more regions by selecting the icons on the map or by selecting theAdd regionbutton. All the regions you add have both read and writes enabled.
After you update the region list, selectSaveto apply the changes.
After you update the region list, selectSaveto apply the changes.

.NET SDK v2
To enable multi-region writes in your application, setUseMultipleWriteLocationstotrue. Also, setSetCurrentLocationto the region in which the application is being deployed and where Azure Cosmos DB is replicated:
UseMultipleWriteLocations
true
SetCurrentLocation
ConnectionPolicy policy = new ConnectionPolicy
    {
        ConnectionMode = ConnectionMode.Direct,
        ConnectionProtocol = Protocol.Tcp,
        UseMultipleWriteLocations = true
    };
policy.SetCurrentLocation("West US 2");
ConnectionPolicy policy = new ConnectionPolicy
    {
        ConnectionMode = ConnectionMode.Direct,
        ConnectionProtocol = Protocol.Tcp,
        UseMultipleWriteLocations = true
    };
policy.SetCurrentLocation("West US 2");
.NET SDK v3
To enable multi-region writes in your application, setApplicationRegionto the region in which the application is being deployed and where Azure Cosmos DB is replicated:
ApplicationRegion
CosmosClient cosmosClient = new CosmosClient(
    "<connection-string-from-portal>", 
    new CosmosClientOptions()
    {
        ApplicationRegion = Regions.WestUS2,
    });
CosmosClient cosmosClient = new CosmosClient(
    "<connection-string-from-portal>", 
    new CosmosClientOptions()
    {
        ApplicationRegion = Regions.WestUS2,
    });
Optionally, you can use theCosmosClientBuilderandWithApplicationRegionto achieve the same result:
CosmosClientBuilder
WithApplicationRegion
CosmosClientBuilder cosmosClientBuilder = new CosmosClientBuilder("<connection-string-from-portal>")
            .WithApplicationRegion(Regions.WestUS2);
CosmosClient client = cosmosClientBuilder.Build();
CosmosClientBuilder cosmosClientBuilder = new CosmosClientBuilder("<connection-string-from-portal>")
            .WithApplicationRegion(Regions.WestUS2);
CosmosClient client = cosmosClientBuilder.Build();
Java V4 SDK
To enable multi-region writes in your application, call.multipleWriteRegionsEnabled(true)and.preferredRegions(preferredRegions)in the client builder, wherepreferredRegionsis aListof regions the data is replicated into ordered by preference - ideally the regions with shortest distance/best latency first:
.multipleWriteRegionsEnabled(true)
.preferredRegions(preferredRegions)
preferredRegions
List
Async
Sync
Java SDK V4(Mavencom.azure::azure-cosmos) Async API:
ArrayList<String> preferredRegions = new ArrayList<String>();
preferredRegions.add(region);

CosmosAsyncClient client =
        new CosmosClientBuilder()
                .endpoint(HOST)
                .key(MASTER_KEY)
                .multipleWriteRegionsEnabled(true)
                .preferredRegions(preferredRegions)
                .buildAsyncClient();
ArrayList<String> preferredRegions = new ArrayList<String>();
preferredRegions.add(region);

CosmosAsyncClient client =
        new CosmosClientBuilder()
                .endpoint(HOST)
                .key(MASTER_KEY)
                .multipleWriteRegionsEnabled(true)
                .preferredRegions(preferredRegions)
                .buildAsyncClient();
Java SDK V4(Mavencom.azure::azure-cosmos) Sync API:
ArrayList<String> preferredRegions = new ArrayList<String>();
preferredRegions.add(region);

CosmosClient client =
        new CosmosClientBuilder()
                .endpoint(HOST)
                .key(MASTER_KEY)
                .multipleWriteRegionsEnabled(true)
                .preferredRegions(preferredRegions)
                .buildClient();
ArrayList<String> preferredRegions = new ArrayList<String>();
preferredRegions.add(region);

CosmosClient client =
        new CosmosClientBuilder()
                .endpoint(HOST)
                .key(MASTER_KEY)
                .multipleWriteRegionsEnabled(true)
                .preferredRegions(preferredRegions)
                .buildClient();
Async Java V2 SDK
The Java V2 SDK used the Mavencom.microsoft.azure::azure-cosmosdb. To enable multi-region writes in your application, setpolicy.setUsingMultipleWriteLocations(true)and setpolicy.setPreferredLocationsto theListof regions the data is replicated into ordered by preference - ideally the regions with shortest distance/best latency first:
policy.setUsingMultipleWriteLocations(true)
policy.setPreferredLocations
List
ConnectionPolicy policy = new ConnectionPolicy();
policy.setUsingMultipleWriteLocations(true);
policy.setPreferredLocations(Collections.singletonList(region));

AsyncDocumentClient client =
    new AsyncDocumentClient.Builder()
        .withMasterKeyOrResourceToken(this.accountKey)
        .withServiceEndpoint(this.accountEndpoint)
        .withConsistencyLevel(ConsistencyLevel.Eventual)
        .withConnectionPolicy(policy).build();
ConnectionPolicy policy = new ConnectionPolicy();
policy.setUsingMultipleWriteLocations(true);
policy.setPreferredLocations(Collections.singletonList(region));

AsyncDocumentClient client =
    new AsyncDocumentClient.Builder()
        .withMasterKeyOrResourceToken(this.accountKey)
        .withServiceEndpoint(this.accountEndpoint)
        .withConsistencyLevel(ConsistencyLevel.Eventual)
        .withConnectionPolicy(policy).build();
Node.js, JavaScript, and TypeScript SDKs
To enable multi-region writes in your application, setconnectionPolicy.UseMultipleWriteLocationstotrue. Also, setconnectionPolicy.PreferredLocationsto the regions the data is replicated into ordered by preference - ideally the regions with shortest distance/best latency first:
connectionPolicy.UseMultipleWriteLocations
true
connectionPolicy.PreferredLocations
const connectionPolicy: ConnectionPolicy = new ConnectionPolicy();
connectionPolicy.UseMultipleWriteLocations = true;
connectionPolicy.PreferredLocations = [region];

const client = new CosmosClient({
  endpoint: config.endpoint,
  auth: { masterKey: config.key },
  connectionPolicy,
  consistencyLevel: ConsistencyLevel.Eventual
});
const connectionPolicy: ConnectionPolicy = new ConnectionPolicy();
connectionPolicy.UseMultipleWriteLocations = true;
connectionPolicy.PreferredLocations = [region];

const client = new CosmosClient({
  endpoint: config.endpoint,
  auth: { masterKey: config.key },
  connectionPolicy,
  consistencyLevel: ConsistencyLevel.Eventual
});
Python SDK
To enable multi-region writes in your application, setconnection_policy.UseMultipleWriteLocationstotrue. Also, setconnection_policy.PreferredLocationsto the regions the data is replicated into ordered by preference - ideally the regions with shortest distance/best latency first.
connection_policy.UseMultipleWriteLocations
true
connection_policy.PreferredLocations
connection_policy = documents.ConnectionPolicy()
connection_policy.UseMultipleWriteLocations = True
connection_policy.PreferredLocations = [region]

client = cosmos_client.CosmosClient(self.account_endpoint, {
                                    'masterKey': self.account_key}, connection_policy, documents.ConsistencyLevel.Session)
connection_policy = documents.ConnectionPolicy()
connection_policy.UseMultipleWriteLocations = True
connection_policy.PreferredLocations = [region]

client = cosmos_client.CosmosClient(self.account_endpoint, {
                                    'masterKey': self.account_key}, connection_policy, documents.ConsistencyLevel.Session)
Next steps
Use session tokens to manage consistency in Azure Cosmos DB
Conflict types and resolution policies in Azure Cosmos DB
Feedback
Was this page helpful?
Additional resources