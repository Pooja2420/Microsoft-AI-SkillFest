Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Deploy to Azure App Service by using Azure Pipelines
Article
2025-03-31
9 contributors
In this article
Azure DevOps Services | Azure DevOps Server 2020 | Azure DevOps Server 2019

Note
Starting June 1, 2024, newly created App Service apps can generate a unique default host name that uses the naming convention<app-name>-<random-hash>.<region>.azurewebsites.net. For example:myapp-ds27dh7271aah175.westus-01.azurewebsites.net. Existing app names remain unchanged.
<app-name>-<random-hash>.<region>.azurewebsites.net
myapp-ds27dh7271aah175.westus-01.azurewebsites.net
For more information, see theblog post about creating a web app with a unique default host name.
UseAzure Pipelinesto automatically deploy your web app toAzure App Serviceon every successful build. Azure Pipelines lets you build, test, and deploy with continuous integration and continuous delivery (CI/CD) by usingAzure DevOps.
YAML pipelines are defined by using a YAML file in your repository. A step is the smallest building block of a pipeline and can be a script or task (prepackaged script).Learn about the key concepts and components that make up a pipeline.
You use theAzure Web App task (AzureWebApp)to deploy to Azure App Service in your pipeline. For more complicated scenarios, like when you need to use XML parameters in your deployment, you can use theAzure App Service deploy taskAzureRmWebAppDeployment.
AzureWebApp
AzureRmWebAppDeployment
Prerequisites:
An Azure account with an active subscription.Create an account for free.
An Azure DevOps organization.Create one for free.
The ability to run pipelines on Microsoft-hosted agents. You can purchase aparallel jobor request a free tier.
A working Azure App Service app with the code hosted onGitHuborAzure Repos..NET:Create an ASP.NET Core web app in Azure.ASP.NET:Create an ASP.NET Framework web app in Azure.JavaScript:Create a Node.js web app in Azure App Service.Java:Create a Java app in Azure App Service.Python:Create a Python app in Azure App Service.
.NET:Create an ASP.NET Core web app in Azure.
ASP.NET:Create an ASP.NET Framework web app in Azure.
JavaScript:Create a Node.js web app in Azure App Service.
Java:Create a Java app in Azure App Service.
Python:Create a Python app in Azure App Service.
1. Create a pipeline for your stack
The code examples in this section assume that you're deploying an ASP.NET web app. You can adapt the instructions for other frameworks.
Learn more aboutAzure Pipelines ecosystem support.
YAML
Classic
Sign in to your Azure DevOps organization and go to your project.
Sign in to your Azure DevOps organization and go to your project.
Go toPipelinesand selectNew Pipeline.
Go toPipelinesand selectNew Pipeline.
When prompted, select the location of your source code: eitherAzure Repos GitorGitHub.You might be redirected to GitHub to sign in. If so, enter your GitHub credentials.
When prompted, select the location of your source code: eitherAzure Repos GitorGitHub.
You might be redirected to GitHub to sign in. If so, enter your GitHub credentials.
When the list of repositories appears, select your repository.
When the list of repositories appears, select your repository.
You might be redirected to GitHub to install the Azure Pipelines app. If so, selectApprove & install.
You might be redirected to GitHub to install the Azure Pipelines app. If so, selectApprove & install.
When theConfiguretab appears, selectASP.NET Core.
When theConfiguretab appears, selectASP.NET Core.
When your new pipeline appears, take a look at the YAML to see what it does. When you're ready, selectSave and run.
When your new pipeline appears, take a look at the YAML to see what it does. When you're ready, selectSave and run.
To get started:
Create a pipeline and select theASP.NET Coretemplate. This selection automatically adds the tasks required to build the code in the sample repository.
Create a pipeline and select theASP.NET Coretemplate. This selection automatically adds the tasks required to build the code in the sample repository.
To see it in action, save the pipeline and queue a build.TheASP.NET Corepipeline template publishes the deployment ZIP file as an Azure artifact for the deployment task in the next step.
To see it in action, save the pipeline and queue a build.
TheASP.NET Corepipeline template publishes the deployment ZIP file as an Azure artifact for the deployment task in the next step.
2. Add the deployment task
YAML
Classic
Select the end of the YAML file, and then selectShow assistant.
Select the end of the YAML file, and then selectShow assistant.
Use theTask assistantto add theAzure web apptask.Alternatively, you can add theAzure App Service deployAzureRmWebAppDeploymenttask.
Use theTask assistantto add theAzure web apptask.
Alternatively, you can add theAzure App Service deployAzureRmWebAppDeploymenttask.
AzureRmWebAppDeployment
Choose yourAzure subscription. Make sure to selectAuthorizeto authorize your connection. The authorization creates the required service connection.
Choose yourAzure subscription. Make sure to selectAuthorizeto authorize your connection. The authorization creates the required service connection.
Select theApp type,App name, andRuntime stackbased on your App Service app. Your complete YAML should look similar to the following code.variables:
  buildConfiguration: 'Release'

steps:
- task: DotNetCoreCLI@2
  inputs:
    command: 'publish'
    publishWebProjects: true
- task: AzureWebApp@1
  inputs:
    azureSubscription: '<service-connection-name>'
    appType: 'webAppLinux'
    appName: '<app-name>'
    package: '$(System.DefaultWorkingDirectory)/**/*.zip'azureSubscription: Name of the authorized service connection to your Azure subscription.appName: Name of your existing app.package: File path to the package or a folder containing your App Service contents. Wildcards are supported.
Select theApp type,App name, andRuntime stackbased on your App Service app. Your complete YAML should look similar to the following code.
variables:
  buildConfiguration: 'Release'

steps:
- task: DotNetCoreCLI@2
  inputs:
    command: 'publish'
    publishWebProjects: true
- task: AzureWebApp@1
  inputs:
    azureSubscription: '<service-connection-name>'
    appType: 'webAppLinux'
    appName: '<app-name>'
    package: '$(System.DefaultWorkingDirectory)/**/*.zip'
variables:
  buildConfiguration: 'Release'

steps:
- task: DotNetCoreCLI@2
  inputs:
    command: 'publish'
    publishWebProjects: true
- task: AzureWebApp@1
  inputs:
    azureSubscription: '<service-connection-name>'
    appType: 'webAppLinux'
    appName: '<app-name>'
    package: '$(System.DefaultWorkingDirectory)/**/*.zip'
azureSubscription: Name of the authorized service connection to your Azure subscription.
azureSubscription
appName: Name of your existing app.
appName
package: File path to the package or a folder containing your App Service contents. Wildcards are supported.
package
To get started:
Create arelease pipeline. SelectReleasesfrom the left menu and selectNew pipeline.
Create arelease pipeline. SelectReleasesfrom the left menu and selectNew pipeline.
Select theAzure App Service deploymenttemplate for your stage. This step automatically adds the necessary tasks.NoteIf you're deploying a Node.js app to App Service on Windows, select theDeployed Node.js App to Azure App Servicetemplate. The only difference between these templates is that the Node.js template configures the task to generate aweb.configfile that contains a parameter that starts theiisnodeservice.
Select theAzure App Service deploymenttemplate for your stage. This step automatically adds the necessary tasks.
Note
If you're deploying a Node.js app to App Service on Windows, select theDeployed Node.js App to Azure App Servicetemplate. The only difference between these templates is that the Node.js template configures the task to generate aweb.configfile that contains a parameter that starts theiisnodeservice.
web.config
iisnode
To link this release pipeline to the Azure artifact from the previous step, selectAdd an artifact>Build.
To link this release pipeline to the Azure artifact from the previous step, selectAdd an artifact>Build.
InSource (build pipeline), select the build pipeline you created in the previous section. Then selectAdd.
InSource (build pipeline), select the build pipeline you created in the previous section. Then selectAdd.
To see it in action, save the release pipeline and create a release.
To see it in action, save the release pipeline and create a release.
Example: Deploy a .NET app
YAML
Classic
To deploy a .zip web package (for example, from an ASP.NET web app) to an Azure web app, use the following snippet to deploy the build to an app.
variables:
  buildConfiguration: 'Release'

steps:
- task: DotNetCoreCLI@2
  inputs:
    command: 'publish'
    publishWebProjects: true
- task: AzureWebApp@1
  inputs:
    azureSubscription: '<service-connection-name>'
    appType: 'webAppLinux'
    appName: '<app-name>'
    package: '$(System.DefaultWorkingDirectory)/**/*.zip'
variables:
  buildConfiguration: 'Release'

steps:
- task: DotNetCoreCLI@2
  inputs:
    command: 'publish'
    publishWebProjects: true
- task: AzureWebApp@1
  inputs:
    azureSubscription: '<service-connection-name>'
    appType: 'webAppLinux'
    appName: '<app-name>'
    package: '$(System.DefaultWorkingDirectory)/**/*.zip'
azureSubscription: Your Azure subscription.
azureSubscription
appType: Your web app type.
appType
appName: The name of your existing app service.
appName
package: File path to the package or a folder containing your App Service contents. Wildcards are supported.
package
For classic pipelines, it's easier to define build and release stages in separate panes (PipelinesandReleases, respectively).
On thePipelinespane, build and test your app by using the template of your choice, such asASP.NET Core,Node.js with Grunt,Maven, or others. Publish an artifact.
On theReleasepane, use the genericAzure App Service deploymenttemplate to deploy the artifact.
There might be templates for specific programming languages to choose from.
Example: Deploy to a virtual application
YAML
Classic
By default, your deployment happens to the root application in the Azure web app. You can deploy to a specific virtual application by using theVirtualApplicationproperty of the Azure App Service deploy taskAzureRmWebAppDeployment:
VirtualApplication
AzureRmWebAppDeployment
- task: AzureRmWebAppDeployment@4
  inputs:
    VirtualApplication: '<name of virtual application>'
- task: AzureRmWebAppDeployment@4
  inputs:
    VirtualApplication: '<name of virtual application>'
VirtualApplication: The name of the virtual application configured in the Azure portal. For more information, seeConfigure an App Service app in the Azure portal.
VirtualApplication
By default, your deployment happens to the root application in the Azure web app. If you want to deploy to a specific virtual application, enter its name in theVirtual Applicationproperty of theAzure App Service deploytask.
Example: Deploy to a slot
YAML
Classic
The following example shows how to deploy to a staging slot, and then swap to a production slot:
- task: AzureWebApp@1
  inputs:
    azureSubscription: '<service-connection-name>'
    appType: webAppLinux
    appName: '<app-name>'
    deployToSlotOrASE: true
    resourceGroupName: '<name of resource group>'
    slotName: staging
    package: '$(Build.ArtifactStagingDirectory)/**/*.zip'

- task: AzureAppServiceManage@0
  inputs:
    azureSubscription: '<service-connection-name>'
    appType: webAppLinux
    WebAppName: '<app-name>'
    ResourceGroupName: '<name of resource group>'
    SourceSlot: staging
    SwapWithProduction: true
- task: AzureWebApp@1
  inputs:
    azureSubscription: '<service-connection-name>'
    appType: webAppLinux
    appName: '<app-name>'
    deployToSlotOrASE: true
    resourceGroupName: '<name of resource group>'
    slotName: staging
    package: '$(Build.ArtifactStagingDirectory)/**/*.zip'

- task: AzureAppServiceManage@0
  inputs:
    azureSubscription: '<service-connection-name>'
    appType: webAppLinux
    WebAppName: '<app-name>'
    ResourceGroupName: '<name of resource group>'
    SourceSlot: staging
    SwapWithProduction: true
azureSubscription: Your Azure subscription.
azureSubscription
appType: (Optional) UsewebAppLinuxto deploy to a web app on Linux.
appType
webAppLinux
appName: The name of your existing app service.
appName
deployToSlotOrASE*: Boolean. Deploy to an existing deployment slot or Azure App Service Environment.
deployToSlotOrASE*
resourceGroupName: Name of the resource group. Required ifdeployToSlotOrASEis true.
resourceGroupName
deployToSlotOrASE
slotName: Name of the slot, which defaults toproduction. Required ifdeployToSlotOrASEis true.
slotName
production
deployToSlotOrASE
package: File path to the package or a folder containing your App Service contents. Wildcards are supported.
package
SourceSlot: Slot sent to production whenSwapWithProductionis true.
SourceSlot
SwapWithProduction
SwapWithProduction: Boolean. Swap the traffic of source slot with production.
SwapWithProduction
Use the optionDeploy to Slot or App Service Environmentin theAzure Web Apptask to specify the slot to deploy to. To swap the slots, use theAzure App Service managetask.
Example: Deploy to multiple web apps
YAML
Classic
You can usejobsin your YAML file to set up a pipeline of deployments. By using jobs, you can control the order of deployment to multiple web apps.
jobs:
- job: buildandtest
  pool:
    vmImage: ubuntu-latest
 
  steps:
  # publish an artifact called drop
  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)' 
      artifactName: drop
  
  # deploy to Azure Web App staging
  - task: AzureWebApp@1
    inputs:
      azureSubscription: '<service-connection-name>'
      appType: <app type>
      appName: '<staging-app-name>'
      deployToSlotOrASE: true
      resourceGroupName: <group-name>
      slotName: 'staging'
      package: '$(Build.ArtifactStagingDirectory)/**/*.zip'

- job: deploy
  dependsOn: buildandtest
  condition: succeeded()

  pool: 
    vmImage: ubuntu-latest  
  
  steps:
    # download the artifact drop from the previous job
  - task: DownloadPipelineArtifact@2
    inputs:
      source: 'current'
      artifact: 'drop'
      path: '$(Pipeline.Workspace)'

  - task: AzureWebApp@1
    inputs:
      azureSubscription: '<service-connection-name>'
      appType: <app type>
      appName: '<production-app-name>'
      resourceGroupName: <group-name>
      package: '$(Pipeline.Workspace)/**/*.zip'
jobs:
- job: buildandtest
  pool:
    vmImage: ubuntu-latest
 
  steps:
  # publish an artifact called drop
  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)' 
      artifactName: drop
  
  # deploy to Azure Web App staging
  - task: AzureWebApp@1
    inputs:
      azureSubscription: '<service-connection-name>'
      appType: <app type>
      appName: '<staging-app-name>'
      deployToSlotOrASE: true
      resourceGroupName: <group-name>
      slotName: 'staging'
      package: '$(Build.ArtifactStagingDirectory)/**/*.zip'

- job: deploy
  dependsOn: buildandtest
  condition: succeeded()

  pool: 
    vmImage: ubuntu-latest  
  
  steps:
    # download the artifact drop from the previous job
  - task: DownloadPipelineArtifact@2
    inputs:
      source: 'current'
      artifact: 'drop'
      path: '$(Pipeline.Workspace)'

  - task: AzureWebApp@1
    inputs:
      azureSubscription: '<service-connection-name>'
      appType: <app type>
      appName: '<production-app-name>'
      resourceGroupName: <group-name>
      package: '$(Pipeline.Workspace)/**/*.zip'
To deploy to multiple web apps, add stages to your release pipeline. You can control the order of deployment. To learn more, seeStages.
Example: Deploy conditionally
YAML
Classic
To deploy conditionally in YAML, you can use one of the following techniques:
Isolate the deployment steps into a separate job, and add a condition to that job.
Add a condition to the step.
The following example shows how to use step conditions to deploy only builds that originate from the main branch:
- task: AzureWebApp@1
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  inputs:
    azureSubscription: '<service-connection-name>'
    appName: '<app-name>'
- task: AzureWebApp@1
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  inputs:
    azureSubscription: '<service-connection-name>'
    appName: '<app-name>'
To learn more about conditions, seeSpecify conditions.
In your release pipeline, you can implement various checks and conditions to control the deployment:
Setbranch filtersto configure the continuous deployment trigger on the artifact of the release pipeline.
Setpre-deployment approvalsor configuregatesas a precondition for deployment to a stage.
Specify conditions for a task to run.
To learn more, seeRelease, branch, and stage triggers,Release deployment control using approvals,Release deployment control using gates, andSpecify conditions for running a task.
Example: Deploy using Web Deploy
The Azure App Service deploy taskAzureRmWebAppDeploymentcan deploy to App Service by using Web Deploy.
AzureRmWebAppDeployment
YAML
Classic
trigger:
- main

pool:
  vmImage: windows-latest

variables:
  buildConfiguration: 'Release'

steps:
- task: DotNetCoreCLI@2
  inputs:
    command: 'publish'
    publishWebProjects: true
    arguments: '--configuration $(buildConfiguration)'
    zipAfterPublish: true
- task: AzureRmWebAppDeployment@4
  inputs:
    ConnectionType: 'AzureRM'
    azureSubscription: '<service-connection-name>'
    appType: 'webApp'
    WebAppName: '<app-name>'
    packageForLinux: '$(System.DefaultWorkingDirectory)/**/*.zip'
    enableCustomDeployment: true
    DeploymentType: 'webDeploy'
trigger:
- main

pool:
  vmImage: windows-latest

variables:
  buildConfiguration: 'Release'

steps:
- task: DotNetCoreCLI@2
  inputs:
    command: 'publish'
    publishWebProjects: true
    arguments: '--configuration $(buildConfiguration)'
    zipAfterPublish: true
- task: AzureRmWebAppDeployment@4
  inputs:
    ConnectionType: 'AzureRM'
    azureSubscription: '<service-connection-name>'
    appType: 'webApp'
    WebAppName: '<app-name>'
    packageForLinux: '$(System.DefaultWorkingDirectory)/**/*.zip'
    enableCustomDeployment: true
    DeploymentType: 'webDeploy'
If you're using theAzure App Service deploymenttemplate in the release pipeline:
Select theTaskstab, and then selectDeploy Azure App Service(theAzureRmWebAppDeploymenttask).
Select theTaskstab, and then selectDeploy Azure App Service(theAzureRmWebAppDeploymenttask).
AzureRmWebAppDeployment
In the dialog, make sure thatConnection typeis set toAzure Resource Manager.
In the dialog, make sure thatConnection typeis set toAzure Resource Manager.
In the dialog, expandAdditional Deployment Optionsand chooseSelect deployment method. Make sure thatWeb Deployis selected as the deployment method.
In the dialog, expandAdditional Deployment Optionsand chooseSelect deployment method. Make sure thatWeb Deployis selected as the deployment method.
Save the release pipeline.
Save the release pipeline.
Note
With theAzureRmWebAppDeployment@3andAzureRmWebAppDeployment@4tasks, you should use theAzure Resource Managerconnection type orAzureRMwhen you deploy withWeb Deploy. It uses publishing profiles for deployment when basic authentication is enabled for your app. Whenbasic authentication is disabled, it uses the more secure Microsoft Entra ID authentication.
AzureRmWebAppDeployment@3
AzureRmWebAppDeployment@4
AzureRM
Frequently asked questions
What's the difference between theAzureWebAppandAzureRmWebAppDeploymenttasks?
AzureWebApp
AzureRmWebAppDeployment
TheAzure Web ApptaskAzureWebAppis the simplest way to deploy to an Azure web app. By default, your deployment happens to the root application in the Azure web app.
AzureWebApp
TheAzure App Service Deploy task (AzureRmWebAppDeployment)can handle more custom scenarios, such as:
AzureRmWebAppDeployment
Deploy with Web Deploy, if you usually use the Internet Information Services (IIS) deployment process.
Deploy to virtual applications.
Deploy to other app types, like container apps, function apps, WebJobs, or API and mobile apps.
Note
The separateFile Transform taskalso supports file transforms and variable substitution for use in Azure Pipelines. You can use theFile Transformtask to apply file transformations and variable substitutions on any configuration and parameters files.
Why do I get the message "Invalid App Service package or folder path provided"?
In YAML pipelines, depending on your pipeline, there might be a mismatch between where your built web package is saved and where the deploy task is looking for it. For example, theAzureWebApptask picks up the web package for deployment. TheAzureWebApptask might look in$(System.DefaultWorkingDirectory)/**/*.zip. If the web package is deposited elsewhere, modify the value ofpackage.
AzureWebApp
AzureWebApp
$(System.DefaultWorkingDirectory)/**/*.zip
package
Why do I get the message "Publish using webdeploy options are supported only when using Windows agent"?
This error occurs in theAzureRmWebAppDeploymenttask when you configure the task to deploy usingWeb Deploy, but your agent isn't running Windows. Verify that your YAML includes something similar to the following code:
AzureRmWebAppDeployment
pool:
  vmImage: windows-latest
pool:
  vmImage: windows-latest
Why doesn't Web Deploy work when I disable basic authentication?
For troubleshooting information on getting Microsoft Entra ID authentication to work with theAzureRmWebAppDeploymenttask, seeI can't Web Deploy to my Azure App Service using Microsoft Entra ID authentication from my Windows agent.
AzureRmWebAppDeployment
Related content
Customize yourAzure DevOps pipeline.
Feedback
Was this page helpful?
Additional resources