Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Tutorial: Connect to Azure OpenAI Service in AKS using Workload Identity
Article
2025-01-30
4 contributors
In this article
In this tutorial, you learn how to create a pod in an Azure Kubernetes (AKS) cluster that communicates with Azure OpenAI Service using Microsoft Entra Workload ID and Service Connector. In this tutorial, you complete the following tasks:
Create an AKS cluster and Azure OpenAI Service withgpt-4model deployment.
gpt-4
Create a connection between the AKS cluster and Azure OpenAI with Service Connector.
Clone a sample application that will talk to the Azure OpenAI service from an AKS cluster.
Deploy the application to a pod in AKS cluster and test the connection.
Clean up resources.
Prerequisites
An Azure account with an active subscription.Create an account for free.
Use the Bash environment inAzure Cloud Shell. For more information, seeGet started with Azure Cloud Shell.If you prefer to run CLI reference commands locally,installthe Azure CLI. If you're running on Windows or macOS, consider running Azure CLI in a Docker container. For more information, seeHow to run the Azure CLI in a Docker container.If you're using a local installation, sign in to the Azure CLI by using theaz logincommand. To finish the authentication process, follow the steps displayed in your terminal. For other sign-in options, seeAuthenticate to Azure using Azure CLI.When you're prompted, install the Azure CLI extension on first use. For more information about extensions, seeUse and manage extensions with the Azure CLI.Runaz versionto find the version and dependent libraries that are installed. To upgrade to the latest version, runaz upgrade.
Use the Bash environment inAzure Cloud Shell. For more information, seeGet started with Azure Cloud Shell.
Use the Bash environment inAzure Cloud Shell. For more information, seeGet started with Azure Cloud Shell.

If you prefer to run CLI reference commands locally,installthe Azure CLI. If you're running on Windows or macOS, consider running Azure CLI in a Docker container. For more information, seeHow to run the Azure CLI in a Docker container.If you're using a local installation, sign in to the Azure CLI by using theaz logincommand. To finish the authentication process, follow the steps displayed in your terminal. For other sign-in options, seeAuthenticate to Azure using Azure CLI.When you're prompted, install the Azure CLI extension on first use. For more information about extensions, seeUse and manage extensions with the Azure CLI.Runaz versionto find the version and dependent libraries that are installed. To upgrade to the latest version, runaz upgrade.
If you prefer to run CLI reference commands locally,installthe Azure CLI. If you're running on Windows or macOS, consider running Azure CLI in a Docker container. For more information, seeHow to run the Azure CLI in a Docker container.
If you're using a local installation, sign in to the Azure CLI by using theaz logincommand. To finish the authentication process, follow the steps displayed in your terminal. For other sign-in options, seeAuthenticate to Azure using Azure CLI.
If you're using a local installation, sign in to the Azure CLI by using theaz logincommand. To finish the authentication process, follow the steps displayed in your terminal. For other sign-in options, seeAuthenticate to Azure using Azure CLI.
When you're prompted, install the Azure CLI extension on first use. For more information about extensions, seeUse and manage extensions with the Azure CLI.
When you're prompted, install the Azure CLI extension on first use. For more information about extensions, seeUse and manage extensions with the Azure CLI.
Runaz versionto find the version and dependent libraries that are installed. To upgrade to the latest version, runaz upgrade.
Runaz versionto find the version and dependent libraries that are installed. To upgrade to the latest version, runaz upgrade.
InstallDockerandkubectlto manage container image and Kubernetes resources.
A basic understanding of container and AKS. Get started frompreparing an application for AKS.
A basic understanding ofworkload identity.
Access permissions tocreate Azure OpenAI resources and to deploy models.
Create Azure resources
You start this tutorial by creating several Azure resources.
Create a resource group for this tutorial.az group create \
    --name MyResourceGroup \
    --location eastus
Create a resource group for this tutorial.
az group create \
    --name MyResourceGroup \
    --location eastus
az group create \
    --name MyResourceGroup \
    --location eastus
Create an AKS cluster with the following command, or by referring to theAKS quickstart. In this tutorial, we create the service connection and pod definition and deploy the sample application to this cluster.az aks create \
    --resource-group MyResourceGroup \
    --name MyAKSCluster \
    --enable-managed-identity \
    --node-count 1
    --generate-ssh-keys
Create an AKS cluster with the following command, or by referring to theAKS quickstart. In this tutorial, we create the service connection and pod definition and deploy the sample application to this cluster.
az aks create \
    --resource-group MyResourceGroup \
    --name MyAKSCluster \
    --enable-managed-identity \
    --node-count 1
    --generate-ssh-keys
az aks create \
    --resource-group MyResourceGroup \
    --name MyAKSCluster \
    --enable-managed-identity \
    --node-count 1
    --generate-ssh-keys
Connect to the cluster using theaz aks get-credentialscommand.az aks get-credentials \
    --resource-group MyResourceGroup \
    --name MyAKSCluster
Connect to the cluster using theaz aks get-credentialscommand.
az aks get-credentials \
    --resource-group MyResourceGroup \
    --name MyAKSCluster
az aks get-credentials \
    --resource-group MyResourceGroup \
    --name MyAKSCluster
Create an Azure OpenAI Service resource using theaz cognitiveservices account createcommand. Optionally refer tothis tutorialfor more instructions. Azure OpenAI Service is the target service that we'll connect to the AKS cluster.az cognitiveservices account create \
    --resource-group MyResourceGroup \
    --name MyOpenAIService \
    --location eastus \
    --kind OpenAI \
    --sku s0 \
    --custom-domain myopenaiservice \
    --subscription <SubscriptionID>
Create an Azure OpenAI Service resource using theaz cognitiveservices account createcommand. Optionally refer tothis tutorialfor more instructions. Azure OpenAI Service is the target service that we'll connect to the AKS cluster.
az cognitiveservices account create \
    --resource-group MyResourceGroup \
    --name MyOpenAIService \
    --location eastus \
    --kind OpenAI \
    --sku s0 \
    --custom-domain myopenaiservice \
    --subscription <SubscriptionID>
az cognitiveservices account create \
    --resource-group MyResourceGroup \
    --name MyOpenAIService \
    --location eastus \
    --kind OpenAI \
    --sku s0 \
    --custom-domain myopenaiservice \
    --subscription <SubscriptionID>
Deploy a model with theaz cognitiveservices deployment createcommand. The model is used in the sample application to test the connection.az cognitiveservices account deployment create \
    --resource-group MyResourceGroup \
    --name MyOpenAIService
    --deployment-name MyModel \
    --model-name gpt-4 \
    --model-version 0613 \
    --model-format OpenAI \
    --sku-name "Standard"
    --capacity 1
Deploy a model with theaz cognitiveservices deployment createcommand. The model is used in the sample application to test the connection.
az cognitiveservices account deployment create \
    --resource-group MyResourceGroup \
    --name MyOpenAIService
    --deployment-name MyModel \
    --model-name gpt-4 \
    --model-version 0613 \
    --model-format OpenAI \
    --sku-name "Standard"
    --capacity 1
az cognitiveservices account deployment create \
    --resource-group MyResourceGroup \
    --name MyOpenAIService
    --deployment-name MyModel \
    --model-name gpt-4 \
    --model-version 0613 \
    --model-format OpenAI \
    --sku-name "Standard"
    --capacity 1
Create an Azure Container Registry (ACR) resource with theaz acr createcommand, or referring tothis tutorial. The registry hosts the container image of the sample application, which the AKS pod definition consumes.az acr create \
    --resource-group MyResourceGroup \
    --name myregistry \
    --sku Standard
Create an Azure Container Registry (ACR) resource with theaz acr createcommand, or referring tothis tutorial. The registry hosts the container image of the sample application, which the AKS pod definition consumes.
az acr create \
    --resource-group MyResourceGroup \
    --name myregistry \
    --sku Standard
az acr create \
    --resource-group MyResourceGroup \
    --name myregistry \
    --sku Standard
Enable anonymous pull usingaz acr updatecommand so that the AKS cluster can consume the images in the registry.az acr update \
    --resource-group MyResourceGroup \
    --name MyRegistry \
    --anonymous-pull-enabled
Enable anonymous pull usingaz acr updatecommand so that the AKS cluster can consume the images in the registry.
az acr update \
    --resource-group MyResourceGroup \
    --name MyRegistry \
    --anonymous-pull-enabled
az acr update \
    --resource-group MyResourceGroup \
    --name MyRegistry \
    --anonymous-pull-enabled
Create a user-assigned managed identity with theaz identity createcommand, or by referring tothis tutorial. When the connection is created, the user-assigned managed identity is used to enable the workload identity for AKS workloads.az identity create \
    --resource-group MyResourceGroup \
    --name MyIdentity
Create a user-assigned managed identity with theaz identity createcommand, or by referring tothis tutorial. When the connection is created, the user-assigned managed identity is used to enable the workload identity for AKS workloads.
az identity create \
    --resource-group MyResourceGroup \
    --name MyIdentity
az identity create \
    --resource-group MyResourceGroup \
    --name MyIdentity
Create a service connection in AKS with Service Connector
Create a service connection between an AKS cluster and Azure OpenAI Service in the Azure portal or the Azure CLI.
Portal
Azure CLI
Refer to theAKS service connection quickstartfor instructions to create a new connection and fill in the settings referring to the examples in the following table. Leave all other settings with their default values.
Basics tab:SettingExample valueDescriptionKubernetes namespacedefaultThe Kubernetes namespace.Service typeOpenAI ServiceThe target service type.Connection nameopenai_connUse the connection name provided by Service Connector or choose your own connection name.Subscription<MySubscription>The subscription used for Azure OpenAI Service.OpenAI<MyOpenAIService>The target Azure OpenAI service you want to connect to.Client typePythonThe code language or framework you use to connect to the target service.
Basics tab:
<MySubscription>
<MyOpenAIService>
Authentication tab:Authentication SettingExample valueDescriptionAuthentication typeWorkload IdentityService Connector authentication type.Subscription<MySubscription>The subscription that contains the user-assigned managed identity.User assigned managed identity<MyIdentity>A user assigned managed identity is needed to enable workload identity.
Authentication tab:
<MySubscription>
<MyIdentity>
Once the connection is created, you can view its details in theService Connectorpane.
Create a service connection to the Azure OpenAI service in AKS by running theaz aks connection create cognitiveservicescommand in the Azure CLI.
az aks connection create cognitiveservices \
   --workload-identity <user-identity-resource-id>
az aks connection create cognitiveservices \
   --workload-identity <user-identity-resource-id>
When using the above command, Service Connector prompts you to specify the AKS resource group, AKS cluster name, target service resource group, cognitive service account name, and user-assigned identity resource ID step by step.
Alternatively, you can provide the complete command directly:
az aks connection create cognitiveservices \
   --workload-identity <user-identity-resource-id> \
   --resource-group <aks-cluster-resource-group> \
   --name <aks-cluster-name> \
   --target-resource-group <target-cognitive-services-resource-group> \
   --account <target-cognitive-services-account>
az aks connection create cognitiveservices \
   --workload-identity <user-identity-resource-id> \
   --resource-group <aks-cluster-resource-group> \
   --name <aks-cluster-name> \
   --target-resource-group <target-cognitive-services-resource-group> \
   --account <target-cognitive-services-account>
Clone sample application
Clone the sample repository:git clone https://github.com/Azure-Samples/serviceconnector-aks-samples.git
Clone the sample repository:
git clone https://github.com/Azure-Samples/serviceconnector-aks-samples.git
git clone https://github.com/Azure-Samples/serviceconnector-aks-samples.git
Go to the repository's sample folder for Azure OpenAI:cd serviceconnector-aks-samples/azure-openai-workload-identity
Go to the repository's sample folder for Azure OpenAI:
cd serviceconnector-aks-samples/azure-openai-workload-identity
cd serviceconnector-aks-samples/azure-openai-workload-identity
Replace the<MyModel>placeholder in theapp.pyfile with the model name we deployed.
Replace the<MyModel>placeholder in theapp.pyfile with the model name we deployed.
<MyModel>
app.py
Build and push container images
Build and push the images to your ACR using the Azure CLIaz acr buildcommand.az acr build --registry <MyRegistry> --image sc-demo-openai-identity:latest ./
Build and push the images to your ACR using the Azure CLIaz acr buildcommand.
az acr build --registry <MyRegistry> --image sc-demo-openai-identity:latest ./
az acr build --registry <MyRegistry> --image sc-demo-openai-identity:latest ./
View the images in your ACR instance using theaz acr repository listcommand.az acr repository list --name <MyRegistry> --output table
View the images in your ACR instance using theaz acr repository listcommand.
az acr repository list --name <MyRegistry> --output table
az acr repository list --name <MyRegistry> --output table
Run application and test connection
Replace the placeholders in thepod.yamlfile in theazure-openai-workload-identityfolder.Replace<YourContainerImage>with the name of the image we built earlier. For example,<MyRegistry>.azurecr.io/sc-demo-openai-identity:latest.Replace<ServiceAccountCreatedByServiceConnector>with the service account created by Service Connector after the connection creation. You may check the service account name in the Azure portal, in theService Connectorpane.Replace<SecretCreatedByServiceConnector>with the secret created by Service Connector after the connection creation. You may check the secret name in the Azure portal, in theService Connectorpane.
Replace the placeholders in thepod.yamlfile in theazure-openai-workload-identityfolder.
pod.yaml
azure-openai-workload-identity
Replace<YourContainerImage>with the name of the image we built earlier. For example,<MyRegistry>.azurecr.io/sc-demo-openai-identity:latest.
<YourContainerImage>
<MyRegistry>.azurecr.io/sc-demo-openai-identity:latest
Replace<ServiceAccountCreatedByServiceConnector>with the service account created by Service Connector after the connection creation. You may check the service account name in the Azure portal, in theService Connectorpane.
<ServiceAccountCreatedByServiceConnector>
Replace<SecretCreatedByServiceConnector>with the secret created by Service Connector after the connection creation. You may check the secret name in the Azure portal, in theService Connectorpane.
<SecretCreatedByServiceConnector>
Deploy the pod to your cluster with thekubectl applycommand, which creates a pod namedsc-demo-openai-identityin the default namespace of your AKS cluster. Installkubectllocally using theaz aks install-clicommand if it isn't installed.kubectl apply -f pod.yaml
Deploy the pod to your cluster with thekubectl applycommand, which creates a pod namedsc-demo-openai-identityin the default namespace of your AKS cluster. Installkubectllocally using theaz aks install-clicommand if it isn't installed.
kubectl apply
sc-demo-openai-identity
kubectl
kubectl apply -f pod.yaml
kubectl apply -f pod.yaml
Check if the deployment was successful by viewing the pod withkubectl.kubectl get pod/sc-demo-openai-identity
Check if the deployment was successful by viewing the pod withkubectl.
kubectl
kubectl get pod/sc-demo-openai-identity
kubectl get pod/sc-demo-openai-identity
Check that connection is established by viewing the logs withkubectl.kubectl logs pod/sc-demo-openai-identity
Check that connection is established by viewing the logs withkubectl.
kubectl
kubectl logs pod/sc-demo-openai-identity
kubectl logs pod/sc-demo-openai-identity
Clean up resources
If you no longer need the resources created in this tutorial, clean them up by deleting the resource group.
az group delete \
    --resource-group MyResourceGroup
az group delete \
    --resource-group MyResourceGroup
Related content
Connect to Azure AI services
Connect to Azure OpenAI Service with Service Connector
Azure AI multi-service resource integration
Feedback
Was this page helpful?
Additional resources