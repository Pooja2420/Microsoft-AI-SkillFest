Site reliability engineering documentation
Site reliability engineering is an engineering discipline devoted to helping an organization sustainably achieve the appropriate level of reliability in their systems, services, and products.
video
video
video
Improving Reliability through Modern Operations Practices
Building the foundation for modern ops: monitoring
Responding to incidents
Learning from failure
Deployment practices for greater reliability
Preparing for growth: capacity planning and scaling
SRE online courses
Introduction to site reliability engineering
Improve your reliability with modern operations practices
SRE resources
Books
Events
FAQ: SRE and coding
FAQ: SRE and DevOps
Links and digests
SRE on Azure
Documentation for SREs
Architecture
Microsoft Azure Well-Architected Framework
Azure Application Architecture Guide
Reference Architectures and Example Workloads
Microsoft Cloud Adoption Framework for Azure
Building Microservices on Azure
Azure Data Architecture Guide
Cloud Best Practices
Designing Reliable Azure applications
Cloud Design Patterns
Azure for AWS Professionals
Azure for GCP Professionals
Performance tuning
See more in the Azure Architecture Center
Monitoring
Azure Monitor overview
Metrics with Azure Monitor
Logs with Azure Monitor
Application Performance Management with Application Insights
Distributed Tracing with Azure Monitor
See more about Azure Monitor
Provisioning and Delivery
Azure Resource Manager
Terraform on Azure
GitHub Actions
Azure Pipelines
Scaling
Overview of autoscale
Autoscaling guidance
Developing for Autoscaling
Overview of the performance efficiency pillar
Design to scale out
Reliability patterns
SRE talks from Microsoft
Culture
The Evolution of Site Reliability Engineering
Building SRE: Culture from the Outside In
Cultural Nuance and Effective Collaboration for Multicultural Teams
Evolution of SRE and Rising Need of SRE Catalyzers
Feedback Loops: How SREs Benefit and What Is Needed to Realize Their Potential
Understanding Business Metrics Can Make You a Better SRE
The Never-Ending Story of Site Reliability
Every Day Is Monday in Operations
Incident Response and Post-Incident Reviews
Building Resilience: How to Learn More from Incidents
A Tale of Two Postmortems: A Human Factors View
Ironies of Automation: A Comedy in Three Parts
Against On-Call: A Polemic
One on One SRE
Monitoring and Observability
Over 600 Million Members and Hundreds of Micro Services: How We Scaled Our Monitoring System to Keep up
Off the Beaten Path: Moving Observability Focus from Your Service to Your Customer
You Get What You MeasureâWhy Metrics Are Important
Weathering the Storm: How Early Warnings Save the Farm
Capturing and Analyzing Millions of Queries without Any Overhead
Event Correlation: A Fresh Approach towards Reducing MTTR
How Robust Monitoring Powers High Availability for LinkedIn Feed
Reducing MTTR and False Escalations: Event Correlation at LinkedIn
Practices and Principles
AvailabilityâThinking beyond 9s
Mental Models for SREs
Prioritizing Trust While Creating Applications
Java Hates Linux. Deal with It.
Characterizing and Understanding Phases of SRE Practices
Security and SRE: Natural Force Multipliers
Production Improvement Review: Taking a Bite Out of Repair Debt
Ensuring Reliability of High-Performance Applications
The Service Score CardâGamifying Operational Excellence
How to Improve a Service by Roasting It
Teams and Management
Code-Yellow: Helping Operations Top-Heavy Teams the Smart Way
Leading without Managing: Becoming an SRE Technical Leader
Differences in SRE Implementations across Companies
100 Teams, 100 Ways to Fail
The Why, What, and How of Starting an SRE Engagement
Building and Running SRE Teams
College Student to SRE: Onboarding Your Entry Level Talent
LinkedIn SRE: From Inception to Global Scale
Splicing SRE DNA Sequences in the Biggest Software Company on the Planet
Transforming Tier 1 Caterpillars to Butterflies
Tools and Technologies
Azure SREBot: More than a Chatbotâan Intelligent Bot to Crush Mitigation Time
TrafficShift: Avoiding Disasters at Scale
Let's Build a Distributed File System
TCPâArchitecture, Enhancements, and Tuning
BGPâThe Backbone of the Internet
The Ops in Serverless
How We Used Kafka to Scale Database Infrastructure
Networks for SREs: What Do I Need to Know for Troubleshooting Applications
AmbryâLinkedInâs Distributed Immutable Object Store
BPerfâBing.com Cloud Profiling on Production
DNS: Old Solution for Modern Problems
Traffic Steering using Rum DNS @ LinkedIn
Scaling
Traffic Forecasting and Stress Testing Infrastructure
Learning at Scale Is Hard! Outage Pattern Analysis and Dirty Data
Scaling a Distributed Stateful System: A LinkedIn Case Study
Debugging at ScaleâGoing from Single Box to Production
Building Centralized Caching Infrastructure at Scale
Scalable CodingâFind the Error
Managing Capacity @ LinkedIn
InStream: Large Scale Distribution using BitTorrent, Python, Salt, and Kafka
Avoiding and Breaking Out of Capacity Prison
The Evolution of Global Traffic Routing and Failover