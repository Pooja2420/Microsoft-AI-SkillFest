Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Register a Microsoft Graph application
Article
2024-01-11
11 contributors
In this article
Microsoft Graphallows you to manage many of the resources within your Azure AD B2C tenant, including customer user accounts and custom policies. By writing scripts or applications that call theMicrosoft Graph API, you can automate tenant management tasks like:
Migrate an existing user store to an Azure AD B2C tenant
Deploy custom policies with an Azure Pipeline in Azure DevOps, and manage custom policy keys
Host user registration on your own page, and create user accounts in your Azure AD B2C directory behind the scenes
Automate application registration
Obtain audit logs
The following sections help you prepare for using the Microsoft Graph API to automate the management of resources in your Azure AD B2C directory.
Microsoft Graph API interaction modes
There are two modes of communication you can use when working with the Microsoft Graph API to manage resources in your Azure AD B2C tenant:
Interactive- Appropriate for run-once tasks, you use an administrator account in the B2C tenant to perform the management tasks. This mode requires an administrator to sign in using their credentials before calling the Microsoft Graph API.
Interactive- Appropriate for run-once tasks, you use an administrator account in the B2C tenant to perform the management tasks. This mode requires an administrator to sign in using their credentials before calling the Microsoft Graph API.
Automated- For scheduled or continuously run tasks, this method uses a service account that you configure with the permissions required to perform management tasks. You create the "service account" in Azure AD B2C by registering an application that your applications and scripts use for authenticating using itsApplication (Client) IDand theOAuth 2.0 client credentialsgrant. In this case, the application acts as itself to call the Microsoft Graph API, not the administrator user as in the previously described interactive method.
Automated- For scheduled or continuously run tasks, this method uses a service account that you configure with the permissions required to perform management tasks. You create the "service account" in Azure AD B2C by registering an application that your applications and scripts use for authenticating using itsApplication (Client) IDand theOAuth 2.0 client credentialsgrant. In this case, the application acts as itself to call the Microsoft Graph API, not the administrator user as in the previously described interactive method.
You enable theAutomatedinteraction scenario by creating an application registration shown in the following sections.
Azure AD B2C authentication service directly supports OAuth 2.0 client credentials grant flow (currently in public preview), but you can't use it to manage your Azure AD B2C resources via Microsoft Graph API. However, you can set upclient credential flowusing Microsoft Entra ID and the Microsoft identity platform/tokenendpoint for an application in your Azure AD B2C tenant.
/token
Register management application
Before your scripts and applications can interact with theMicrosoft Graph APIto manage Azure AD B2C resources, you need to create an application registration in your Azure AD B2C tenant that grants the required API permissions.
Sign in to theAzure portal.
If you have access to multiple tenants, select theSettingsicon in the top menu to switch to your Azure AD B2C tenant from theDirectories + subscriptionsmenu.
In the Azure portal, search for and selectAzure AD B2C.
SelectApp registrations, and then selectNew registration.
Enter aNamefor the application. For example,managementapp1.
SelectAccounts in this organizational directory only.
UnderPermissions, clear theGrant admin consent to openid and offline_access permissionscheck box.
SelectRegister.
Record theApplication (client) IDthat appears on the application overview page. You use this value in a later step.
Grant API access
For your application to access data in Microsoft Graph, grant the registered application the relevantapplication permissions. The effective permissions of your application are the full level of privileges implied by the permission. For example, tocreate,read,update, anddeleteevery user in your Azure AD B2C tenant, add theUser.ReadWrite.Allpermission.
Note
TheUser.ReadWrite.Allpermission does not include the ability update user account passwords. If your application needs to update user account passwords,grant user administrator role. When grantinguser administratorrole, theUser.ReadWrite.Allis not required. The user administrator role includes everything needed to manage users.
You can grant your application multiple application permissions. For example, if your application also needs to manage groups in your Azure AD B2C tenant, add theGroup.ReadWrite.Allpermission as well.
UnderManage, selectAPI permissions.
UnderConfigured permissions, selectAdd a permission.
Select theMicrosoft APIstab, then selectMicrosoft Graph.
SelectApplication permissions.
Expand the appropriate permission group and select the check box of the permission to grant to your management application. For example:User>User.ReadWrite.All: For user migration or user management scenarios.Group>Group.ReadWrite.All: For creating groups, read and update group memberships, and delete groups.AuditLog>AuditLog.Read.All: For reading the directory's audit logs.Policy>Policy.ReadWrite.TrustFramework: For continuous integration/continuous delivery (CI/CD) scenarios. For example, custom policy deployment with Azure Pipelines.
User>User.ReadWrite.All: For user migration or user management scenarios.
Group>Group.ReadWrite.All: For creating groups, read and update group memberships, and delete groups.
AuditLog>AuditLog.Read.All: For reading the directory's audit logs.
Policy>Policy.ReadWrite.TrustFramework: For continuous integration/continuous delivery (CI/CD) scenarios. For example, custom policy deployment with Azure Pipelines.
SelectAdd permissions. As directed, wait a few minutes before proceeding to the next step.
SelectGrant admin consent for (your tenant name).
Sign in with an account in your Azure AD B2C tenant that has theCloud Application Administratorrole assigned to it, then selectGrant admin consent for (your tenant name).
SelectRefresh, then verify that "Granted for ..." appears underStatus. It might take a few minutes for the permissions to propagate.
[Optional] Grant user administrator role
If your application or script needs to update users' passwords, you need to assign theUser administratorrole to your application. TheUser administratorrole has a fixed set of permissions you grant to your application.
To add theUser administratorrole, follow these steps:
Sign in to theAzure portal.
If you have access to multiple tenants, select theSettingsicon in the top menu to switch to your Azure AD B2C tenant from theDirectories + subscriptionsmenu.
Search for and selectAzure AD B2C.
UnderManage, selectRoles and administrators.
Select theUser administratorrole.
SelectAdd assignments.
In theSelecttext box, enter the name or the ID of the application you registered earlier, for example,managementapp1. When it appears in the search results, select your application.
SelectAdd. It might take a few minutes to for the permissions to fully propagate.
Create client secret
Your application needs a client secret to prove its identity when requesting a token. To add the client secret, follow these steps:
App registrations
Applications (Legacy)
UnderManage, selectCertificates & secrets.
SelectNew client secret.
Enter a description for the client secret in theDescriptionbox. For example,clientsecret1.
UnderExpires, select a duration for which the secret is valid, and then selectAdd.
Record the secret'sValue. You use this value for configuration in a later step.
UnderAPI ACCESS, selectKeys.
Enter a description for the key in theKey descriptionbox. For example,clientsecret1.
Select a validityDurationand then selectSave.
Record the key'sVALUE. You use this value for configuration in a later step.
Next steps
Now that you've registered your management application and have granted it the required permissions, your applications and services (for example, Azure Pipelines) can use its credentials and permissions to interact with the Microsoft Graph API.
Get an access token from Microsoft Entra ID
Use the access token to call Microsoft Graph
B2C operations supported by Microsoft Graph
Manage Azure AD B2C user accounts with Microsoft Graph
Get audit logs with the Microsoft Entra reporting API
Feedback
Was this page helpful?
Additional resources