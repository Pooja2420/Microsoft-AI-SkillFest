Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Troubleshoot pipeline runs
Article
2025-04-25
14 contributors
In this article
Azure DevOps Services | Azure DevOps Server 2022 - Azure DevOps Server 2019
If your pipeline run fails to complete, use the diagnostic information and logs on the pipeline run summary page to troubleshoot the issue. This guide provides instructions for diagnosing pipeline failures using logs, error analysis tools, and common troubleshooting techniques. Learn how to identify root causes and implement solutions to keep your pipelines running smoothly.


View logs
Select the error message to view logs for the task that didn't complete.

The logs page shows the selected error. In this example, there's an error in thecmd-linetask, where theechocommand is entered asech.
cmd-line
echo
ech

You can view the raw log for the task by choosingView raw log, and you can search the log usingFind.

Scan the logs of the failing task for error information and clues as to why the task is failing. By default, nonverbose logs are generated by a pipeline run. If the default logs don't indicate the cause of the issue, you can get more information byconfiguring verbose logs.
Error analysis page
Troubleshooting assistance is available using theError analysispage. Move the mouse over the error information line and choose theView analysisicon.


ChooseView agentfor self-hosted agents (orAbout hosted agent imagefor Microsoft-hosted agents) to view more information about the agent used to run the pipeline, andView logto view the pipeline run logs.

Choose the name of the task belowRun-time detailsto view information about the task.

In this example, you can see that there's an error in theValueof theScript. ChooseAbout this taskto view the documentation for the task.
Value
Script
If the issue isn't apparent from the pipeline run summary page or browsing the logs, check the followingCommon issuessection, and seeReview logs to diagnose pipeline issuesfor information on downloading complete logs which include more diagnostic information.

Common issues
This pipeline needs permission to access a resource before this run can continue
Job time-out
Issues downloading code
My pipeline is failing on a command-line step such as MSBUILD
File or folder in use errors
Intermittent or inconsistent MSBuild failures
Process stops responding
Line endings for multiple platforms
Variables having ' (single quote) appended
Service Connection related issues
Pipeline stopped hearing from agent
Task insights for failed pipeline runs
Azure DevOps provides aTask Insights for Failed Pipeline Runssetting, that when enabled, provides pop-up notifications of build failures with a link to view a report.

To configure this setting, navigate toPreview features, findTask Insights for Failed Pipeline Runs, and choose the desired setting.

Notifications for failed runs
Azure DevOps includes build-in notifications for failed pipeline runs. To enable notifications:
Go toProject settings>Notificationsfor your project.
Choose what type of notification you want to receive. To be notified each time a pipeline run fails, selectA build fails.

This pipeline needs permission to access a resource before this run can continue
If your pipeline doesn't seem to start, or you receive an error message likeThis pipeline needs permission to access a resource before this run can continue, check to see if the pipeline is waiting for an authorization to run by a resource, like a service connection or agent pool.
This pipeline needs permission to access a resource before this run can continue
Go to the pipelineand manually start a run.
The messageThis pipeline needs permission to access a resource before this run can continueappears. SelectViewnext to the message.
On theWaiting for reviewscreen, selectPermit, and on the confirmation screen, selectPermitagain.
This action explicitly adds the pipeline as an authorized user of the resource.
There are two ways to authorize pipelines to access your agent pool.
Authorize specific pipelines- Individually authorize specific pipelines from an Azure DevOps project to run in the pool.
Configure open access- Configure an agent pool at project level to be available for all pipelines in that project.
You can individually authorize specific pipelines to run in an agent pool by following the procedure in the previous section when you receive a message likeThis pipeline needs permission to access a resource before this run can continue.
This pipeline needs permission to access a resource before this run can continue
You can also manually add and remove pipelines from the authorized list by performing the following procedure. This procedure is performed at the project level in your Azure DevOps organization.
In Azure DevOps, go toProject settings,Agent pools, choose your self-hosted pool, and chooseSecurity.
Choose+to add a pipeline to the authorized list.
ChooseX(Revoke access)to remove a pipeline from the authorized list.
Some resources allow you to configureOpen accessso that each new pipeline definition doesn't require explicit authorization.
ConfiguringOpen accessrequiresProject administratorpermissions.
To configureOpen accessfor agent pools:
In Azure DevOps, go toProject settings,Agent pools, choose your self-hosted pool, and chooseSecurity.
ChooseMore actions,Open access, to enable open access, and chooseOpen accessagain to confirm.
To revoke open access, chooseRestrict permission.
To review whetherOpen accessis available for otherresource types, seeManage security in Azure Pipelinesand search forOpen access.
For more information onOpen accessfor agent pools, seeSet pipeline permissions for an individual agent poolandPipeline permissions.
Job time-out
A pipeline can run for a long time and then fail due to job time-out.
Job timeout closely depends on the agent being used. Free Microsoft hosted agents have a max timeout of 60 minutes per job for a private repository and 360 minutes for a public repository.
To increase the max timeout for a job, you can opt for any of the following.
Buy a Microsoft hosted agent which gives you 360 minutes for all jobs, irrespective of the repository used
Use a self-hosted agent to rule out any timeout issues due to the agent
Learn more about jobtimeout.
Note
If your Microsoft-hosted agent jobs are timing out, verify that your pipeline timeout is set to a larger value than the max timeout for a job. To check, seeTimeouts.
Issues downloading code
My pipeline is failing on a checkout step
Team Foundation Version Control (TFVC) issues
If you're using acheckoutstep on an Azure Repos Git repository in your organization that is in a different project than your pipeline, ensure that theLimit job authorization scope to current projectsetting is disabled, or follow the steps inScoped build identitiesto ensure that your pipeline has access to the repository.
checkout
When your pipeline can't access the repository due to limited job authorization scope, you'll receive the errorGit fetch failed with exit code 128and your logs contain an entry similar toRemote: TF401019: The Git repository with name or identifier <your repo name> does not exist or you do not have permissions for the operation you are attempting.
Git fetch failed with exit code 128
Remote: TF401019: The Git repository with name or identifier <your repo name> does not exist or you do not have permissions for the operation you are attempting.
If your pipeline is failing immediately withCould not find a project that corresponds with the repository, ensure that your project and repository name are correct in thecheckoutstep or the repository resource declaration.
Could not find a project that corresponds with the repository
checkout
Get sources not downloading some files
Get sources through Team Foundation Proxy
You might see a message in the log "All files up to date" from thetf getcommand. Verify the built-in service identity has permission to download the sources. Either the identityProject Collection Build ServiceorProject Build Serviceneed permission to download the sources, depending on the selected authorization scope on General tab of the build pipeline. In the version control web UI, you can browse the project files at any level of the folder hierarchy and check the security settings.
tf get
The easiest way to configure the agent to get sources through a Team Foundation Proxy is set environment variableTFSPROXYthat point to the TFVC proxy server for the agent's run as user.
TFSPROXY
Windows:
set TFSPROXY=http://tfvcproxy:8081
    setx TFSPROXY=http://tfvcproxy:8081 // If the agent service is running as NETWORKSERVICE or any service account you can't easily set user level environment variable
set TFSPROXY=http://tfvcproxy:8081
    setx TFSPROXY=http://tfvcproxy:8081 // If the agent service is running as NETWORKSERVICE or any service account you can't easily set user level environment variable
macOS/Linux:
export TFSPROXY=http://tfvcproxy:8081
export TFSPROXY=http://tfvcproxy:8081
My pipeline is failing on a command-line step such as MSBUILD
It's helpful to narrow whether a build or release failure is the result of an Azure Pipelines product issue (agent or tasks). Build and release failures might also result from external commands.
Check the logs for the exact command-line executed by the failing task. Attempting to run the command locally from the command line might reproduce the issue. It can be helpful to run the command locally from your own machine, and/or sign in to the machine and run the command as the service account.
For example, is the problem happening during the MSBuild part of your build pipeline (for example, are you using either theMSBuildorVisual Studio Buildtask)? If so, then try running the sameMSBuild commandon a local machine using the same arguments. If you can reproduce the problem on a local machine, then your next steps are to investigate theMSBuildproblem.
The location of tools, libraries, headers, and other things needed for a build might be different on the hosted agent than from your local machine.
If a build fails because it can't find one of these files, you can use the below scripts to inspect the layout on the agent.
This might help you track down the missing file.
Create a new YAML pipeline in a temporary location (for example, a new repo created for the purpose of troubleshooting).
As written, the script searches directories on your path.
You can optionally edit theSEARCH_PATH=line to search other places.
SEARCH_PATH=
# Script for Linux and macOS
pool: { vmImage: ubuntu-latest } # or whatever pool you use
steps:
- checkout: none
- bash: |
    SEARCH_PATH=$PATH  # or any colon-delimited list of paths
    IFS=':' read -r -a PathDirs <<< "$SEARCH_PATH"
    echo "##[debug] Found directories"
    for element in "${PathDirs[@]}"; do
        echo "$element"
    done;
    echo;
    echo;  
    echo "##[debug] Found files"
    for element in "${PathDirs[@]}"; do
        find "$element" -type f
    done
# Script for Linux and macOS
pool: { vmImage: ubuntu-latest } # or whatever pool you use
steps:
- checkout: none
- bash: |
    SEARCH_PATH=$PATH  # or any colon-delimited list of paths
    IFS=':' read -r -a PathDirs <<< "$SEARCH_PATH"
    echo "##[debug] Found directories"
    for element in "${PathDirs[@]}"; do
        echo "$element"
    done;
    echo;
    echo;  
    echo "##[debug] Found files"
    for element in "${PathDirs[@]}"; do
        find "$element" -type f
    done
# Script for Windows
pool: { vmImage: windows-2019 } # or whatever pool you use
steps:
- checkout: none
- powershell: |
    $SEARCH_PATH=$Env:Path
    Write-Host "##[debug] Found directories"
    ForEach ($Dir in $SEARCH_PATH -split ";") {
      Write-Host "$Dir"
    }
    Write-Host ""
    Write-Host ""
    Write-Host "##[debug] Found files"
    ForEach ($Dir in $SEARCH_PATH -split ";") {
      Get-ChildItem $Dir -File -ErrorAction Continue | ForEach-Object -Process {
        Write-Host $_.FullName
      }
    }
# Script for Windows
pool: { vmImage: windows-2019 } # or whatever pool you use
steps:
- checkout: none
- powershell: |
    $SEARCH_PATH=$Env:Path
    Write-Host "##[debug] Found directories"
    ForEach ($Dir in $SEARCH_PATH -split ";") {
      Write-Host "$Dir"
    }
    Write-Host ""
    Write-Host ""
    Write-Host "##[debug] Found files"
    ForEach ($Dir in $SEARCH_PATH -split ";") {
      Get-ChildItem $Dir -File -ErrorAction Continue | ForEach-Object -Process {
        Write-Host $_.FullName
      }
    }
Keep in mind, some differences are in effect when executing a command on a local machine and when a build or release is running on an agent. If the agent is configured to run as a service on Linux, macOS, or Windows, then it isn't running within an interactive logged-on session. Without an interactive logged-on session, UI interaction and other limitations exist.
File or folder in use errors
File or folder in useerrors are indicated by error messages such as:
File or folder in use
Access to the path [...] is denied.
Access to the path [...] is denied.
The process cannot access the file [...] because it is being used by another process.
The process cannot access the file [...] because it is being used by another process.
Access is denied.
Access is denied.
Can't move [...] to [...]
Can't move [...] to [...]
Troubleshooting steps:
Detect files and folders in use
Anti-virus exclusion
MSBuild and /nodeReuse:false
MSBuild and /maxcpucount:[n]
On Windows, tools likeProcess Monitorcan be to capture a trace of file events under a specific directory. Or, for a snapshot in time, tools likeProcess ExplorerorHandlecan be used.
Anti-virus software scanning your files can cause file or folder in use errors during a build or release. Adding an anti-virus exclusion for your agent directory and configured "work folder" can help to identify anti-virus software as the interfering process.
If you invoke MSBuild during your build, make sure to pass the argument/nodeReuse:false(short form/nr:false). Otherwise MSBuild processes continue running after the build completes. The processes remain for some time in anticipation of a potential subsequent build.
/nodeReuse:false
/nr:false
This feature of MSBuild can interfere with attempts to delete or move a directory - due to a conflict with the working directory of the MSBuild processes.
The MSBuild and Visual Studio Build tasks already add/nr:falseto the arguments passed to MSBuild. However, if you invoke MSBuild from your own script, then you would need to specify the argument.
/nr:false
By default the build tasks such asMSBuildandVisual Studio Buildrun MSBuild with the/mswitch. In some cases this can cause problems such as multiple process file access issues.
/m
Try adding the/m:1argument to your build tasks to force MSBuild to run only one process at a time.
/m:1
File-in-use issues might result when leveraging the concurrent-process feature of MSBuild. Not specifying the argument/maxcpucount:[n](short form/m:[n]) instructs MSBuild to use a single process only. If you're using the MSBuild or Visual Studio Build tasks, you might need to specify "/m:1" to override the "/m" argument that is added by default.
/maxcpucount:[n]
/m:[n]
Intermittent or inconsistent MSBuild failures
If you're experiencing intermittent or inconsistent MSBuild failures, try instructing MSBuild to use a single-process only. Intermittent or inconsistent errors might indicate that your target configuration is incompatible with the concurrent-process feature of MSBuild. SeeMSBuild and /maxcpucount:[n].
Process stops responding
Process stops responding causes and troubleshooting steps:
Waiting for Input
Process dump
WiX project
A process that stops responding might indicate that a process is waiting for input.
Running the agent from the command line of an interactive logged on session might help to identify whether a process is prompting with a dialog for input.
Running the agent as a service might help to eliminate programs from prompting for input. For example in .NET, programs might rely on the System.Environment.UserInteractive Boolean to determine whether to prompt. When the agent is running as a Windows service, the value is false.
Analyzing a dump of the process can help to identify what a deadlocked process is waiting on.
Building a WiX project when custom MSBuild loggers are enabled, can cause WiX to deadlock waiting on the output stream. Adding the additional MSBuild argument/p:RunWixToolsOutOfProc=trueworks around the issue.
/p:RunWixToolsOutOfProc=true
Line endings for multiple platforms
When you run pipelines on multiple platforms, you can sometimes encounter problems with different line endings.
Historically, Linux and macOS used linefeed (LF) characters while Windows used a carriage return plus a linefeed (CRLF).
Git tries to compensate for the difference by automatically making lines end in LF in the repo but CRLF in the working directory on Windows.
Most Windows tools are fine with LF-only endings, and this automatic behavior can cause more problems than it solves.
If you encounter issues based on line endings, we recommend you configure Git to prefer LF everywhere.
To do this, add a.gitattributesfile to the root of your repository.
In that file, add the following line:
.gitattributes
* text eol=lf
* text eol=lf
Variables having ' (single quote) appended
If your pipeline includes a Bash script that sets variables using the##vsocommand, you might see another'appended to the value of the variable you set.
This occurs because of an interaction withset -x.
The solution is to disableset -xtemporarily before setting a variable.
The Bash syntax for doing that isset +x.
##vso
'
set -x
set -x
set +x
set +x
echo ##vso[task.setvariable variable=MY_VAR]my_value
set -x
set +x
echo ##vso[task.setvariable variable=MY_VAR]my_value
set -x
Many Bash scripts include theset -xcommand to assist with debugging.
Bash traces exactly what command was executed and echo it to stdout.
This causes the agent to see the##vsocommand twice, and the second time, Bash will have added the'character to the end.
set -x
##vso
'
For instance, consider this pipeline:
steps:
- bash: |
    set -x
    echo ##vso[task.setvariable variable=MY_VAR]my_value
steps:
- bash: |
    set -x
    echo ##vso[task.setvariable variable=MY_VAR]my_value
On stdout, the agent sees two lines:
##vso[task.setvariable variable=MY_VAR]my_value
+ echo '##vso[task.setvariable variable=MY_VAR]my_value'
##vso[task.setvariable variable=MY_VAR]my_value
+ echo '##vso[task.setvariable variable=MY_VAR]my_value'
When the agent sees the first line,MY_VARwill be set to the correct value, "my_value".
However, when it sees the second line, the agent processes everything to the end of the line.MY_VARis set to "my_value'".
MY_VAR
MY_VAR
Libraries aren't installed for Python application when script executes
When a Python application is deployed, in some cases, a CI/CD pipeline runs and the code is deployed successfully, but therequirements.txtfile that's responsible for installing all dependency libraries doesn't execute.
To install the dependencies, use a post-deployment script in the App Service deployment task. The following example shows the command you must use in the post-deployment script. You can update the script for your scenario.
D:\home\python364x64\python.exe -m pip install -r requirements.txt
D:\home\python364x64\python.exe -m pip install -r requirements.txt
Service Connection related issues
To troubleshoot issues related to service connections, seeService connection troubleshooting. To specifically troubleshoot service connections using workload identity for authentication, seeTroubleshoot workload identity service connections.
Pipeline stopped hearing from agent
If your pipeline fails with a message likeWe stopped hearing from agent <agent name>. Verify the agent machine is running and has a healthy network connection., check the resource utilization of the agent to see if the agent machine is running out of resources. Starting withSprint 228,Azure Pipelines logs contain resource utilization metricsfor each step.
We stopped hearing from agent <agent name>. Verify the agent machine is running and has a healthy network connection.
When using Azure DevOps Services, you can see resource utilization in the logs, including disk usage, memory usage, and CPU utilization, by enablingverbose logs. When the pipeline completes,search the logsforAgent environment resourcesentries for each step.
Agent environment resources
2024-02-28T17:41:15.1315148Z ##[debug]Agent environment resources - Disk: D:\ Available 12342.00 MB out of 14333.00 MB, Memory: Used 1907.00 MB out of 7167.00 MB, CPU: Usage 17.23%
2024-02-28T17:41:15.1315148Z ##[debug]Agent environment resources - Disk: D:\ Available 12342.00 MB out of 14333.00 MB, Memory: Used 1907.00 MB out of 7167.00 MB, CPU: Usage 17.23%
For information on capturing additional resource utilization logs, seeCapture resource utilization details.
In this scenario, you can use theAzure File Copy taskto upload content to the website. You can use any of the tools described inUploading contentto upload content to the web container.
Next steps
Review logsto uncover additional diagnostic tools.
Feedback
Was this page helpful?
Additional resources