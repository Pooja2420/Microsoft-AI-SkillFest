Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Authenticate against Azure resources with Azure Arc-enabled servers
Article
2025-04-22
6 contributors
In this article
Applications or processes running directly on an Azure Arc-enabled server can use managed identities to access other Azure resources that support Microsoft Entra ID-based authentication. An application can obtain anaccess tokenrepresenting its identity, which is system-assigned for Azure Arc-enabled servers, and use it as a 'bearer' token to authenticate itself to another service.
Refer to themanaged identity overviewdocumentation for a detailed description of managed identities, and understand the distinction between system-assigned and user-assigned identities.
In this article, you'll learn how a server can use a system-assigned managed identity to access AzureKey Vault. Key Vault makes it possible for your client application to use a secret to access resources not secured by Microsoft Entra ID. For example, TLS/SSL certificates used by your IIS web servers can be stored in Azure Key Vault and securely deploy the certificates to Windows or Linux servers outside of Azure.
Security overview
Several actions occur when onboarding your server to Azure Arc-enabled servers to configure using a managed identity (similar to what happens for an Azure VM):
Azure Resource Manager receives a request to enable the system-assigned managed identity on the Azure Arc-enabled server.
Azure Resource Manager receives a request to enable the system-assigned managed identity on the Azure Arc-enabled server.
Azure Resource Manager creates a service principal in Microsoft Entra ID for the identity of the server. The service principal is created in the Microsoft Entra tenant that's trusted by the subscription.
Azure Resource Manager creates a service principal in Microsoft Entra ID for the identity of the server. The service principal is created in the Microsoft Entra tenant that's trusted by the subscription.
Azure Resource Manager configures the identity on the server by updating the Azure Instance Metadata Service (IMDS) identity endpoint forWindowsorLinuxwith the service principal client ID and certificate. The endpoint is a REST endpoint accessible only from within the server using a well-known, non-routable IP address. This service provides a subset of metadata information about the Azure Arc-enabled server to help manage and configure it.
Azure Resource Manager configures the identity on the server by updating the Azure Instance Metadata Service (IMDS) identity endpoint forWindowsorLinuxwith the service principal client ID and certificate. The endpoint is a REST endpoint accessible only from within the server using a well-known, non-routable IP address. This service provides a subset of metadata information about the Azure Arc-enabled server to help manage and configure it.
The environment of a managed-identity-enabled server is configured with the following variables on a Azure Arc-enabled server:
IMDS_ENDPOINT: The IMDS endpoint IP addresshttp://localhost:40342for Azure Arc-enabled servers.
IMDS_ENDPOINT: The IMDS endpoint IP addresshttp://localhost:40342for Azure Arc-enabled servers.
http://localhost:40342
IDENTITY_ENDPOINT: the localhost endpoint corresponding to service's managed identityhttp://localhost:40342/metadata/identity/oauth2/token.
IDENTITY_ENDPOINT: the localhost endpoint corresponding to service's managed identityhttp://localhost:40342/metadata/identity/oauth2/token.
http://localhost:40342/metadata/identity/oauth2/token
Your code that's running on the server can request a token from the Azure Instance Metadata service endpoint, accessible only from within the server.
The system environment variableIDENTITY_ENDPOINTis used to discover the identity endpoint by applications. Applications should try to retrieveIDENTITY_ENDPOINTandIMDS_ENDPOINTvalues and use them. Applications with any access level are allowed to make requests to the endpoints. Metadata responses are handled as normal and given to any process on the machine. However, when a request is made that would expose a token, we require the client to provide a secret to attest that they're able to access data only available to higher-privileged users.
Prerequisites
An understanding of Managed identities.
An understanding of Managed identities.
On Windows, you must be a member of the localAdministratorsgroup or theHybrid Agent Extension Applicationsgroup.
On Windows, you must be a member of the localAdministratorsgroup or theHybrid Agent Extension Applicationsgroup.
On Linux, you must be a member of thehimdsgroup.
On Linux, you must be a member of thehimdsgroup.
A server connected and registered with Azure Arc-enabled servers.
A server connected and registered with Azure Arc-enabled servers.
You're a member of theOwner groupin the subscription or resource group (in order to perform required resource creation and role management steps).
You're a member of theOwner groupin the subscription or resource group (in order to perform required resource creation and role management steps).
An Azure Key Vault to store and retrieve your credential, and assign the Azure Arc identity access to the KeyVault.If you don't have a Key Vault created, seeCreate Key Vault.To configure access by the managed identity used by the server, seeGrant access for LinuxorGrant access for Windows. For step number 5, you're going to enter the name of the Azure Arc-enabled server. To complete this using PowerShell, seeAssign an access policy using PowerShell.
An Azure Key Vault to store and retrieve your credential, and assign the Azure Arc identity access to the KeyVault.
If you don't have a Key Vault created, seeCreate Key Vault.
To configure access by the managed identity used by the server, seeGrant access for LinuxorGrant access for Windows. For step number 5, you're going to enter the name of the Azure Arc-enabled server. To complete this using PowerShell, seeAssign an access policy using PowerShell.
Acquiring an access token using REST API
The method to obtain and use a system-assigned managed identity to authenticate with Azure resources is similar to how it's performed with an Azure VM.
For an Azure Arc-enabled Windows server, using PowerShell, invoke the web request to get the token from the local host in the specific port. Specify the request using the IP address or the environmental variableIDENTITY_ENDPOINT.
$apiVersion = "2020-06-01"
$resource = "https://management.azure.com/"
$endpoint = "{0}?resource={1}&api-version={2}" -f $env:IDENTITY_ENDPOINT,$resource,$apiVersion
$secretFile = ""
try
{
    Invoke-WebRequest -Method GET -Uri $endpoint -Headers @{Metadata='True'} -UseBasicParsing
}
catch
{
    $wwwAuthHeader = $_.Exception.Response.Headers["WWW-Authenticate"]
    if ($wwwAuthHeader -match "Basic realm=.+")
    {
        $secretFile = ($wwwAuthHeader -split "Basic realm=")[1]
    }
}
Write-Host "Secret file path: " $secretFile`n
$secret = cat -Raw $secretFile
$response = Invoke-WebRequest -Method GET -Uri $endpoint -Headers @{Metadata='True'; Authorization="Basic $secret"} -UseBasicParsing
if ($response)
{
    $token = (ConvertFrom-Json -InputObject $response.Content).access_token
    Write-Host "Access token: " $token
}
$apiVersion = "2020-06-01"
$resource = "https://management.azure.com/"
$endpoint = "{0}?resource={1}&api-version={2}" -f $env:IDENTITY_ENDPOINT,$resource,$apiVersion
$secretFile = ""
try
{
    Invoke-WebRequest -Method GET -Uri $endpoint -Headers @{Metadata='True'} -UseBasicParsing
}
catch
{
    $wwwAuthHeader = $_.Exception.Response.Headers["WWW-Authenticate"]
    if ($wwwAuthHeader -match "Basic realm=.+")
    {
        $secretFile = ($wwwAuthHeader -split "Basic realm=")[1]
    }
}
Write-Host "Secret file path: " $secretFile`n
$secret = cat -Raw $secretFile
$response = Invoke-WebRequest -Method GET -Uri $endpoint -Headers @{Metadata='True'; Authorization="Basic $secret"} -UseBasicParsing
if ($response)
{
    $token = (ConvertFrom-Json -InputObject $response.Content).access_token
    Write-Host "Access token: " $token
}
The following response is an example that is returned:

For an Azure Arc-enabled Linux server, using Bash, you invoke the web request to get the token from the local host in the specific port. Specify the following request using the IP address or the environmental variableIDENTITY_ENDPOINT. To complete this step, you need an SSH client.
CHALLENGE_TOKEN_PATH=$(curl -s -D - -H Metadata:true "http://127.0.0.1:40342/metadata/identity/oauth2/token?api-version=2019-11-01&resource=https%3A%2F%2Fmanagement.azure.com" | grep Www-Authenticate | cut -d "=" -f 2 | tr -d "[:cntrl:]")
CHALLENGE_TOKEN=$(cat $CHALLENGE_TOKEN_PATH)
if [ $? -ne 0 ]; then
    echo "Could not retrieve challenge token, double check that this command is run with root privileges."
else
    curl -s -H Metadata:true -H "Authorization: Basic $CHALLENGE_TOKEN" "http://127.0.0.1:40342/metadata/identity/oauth2/token?api-version=2019-11-01&resource=https%3A%2F%2Fmanagement.azure.com"
fi
CHALLENGE_TOKEN_PATH=$(curl -s -D - -H Metadata:true "http://127.0.0.1:40342/metadata/identity/oauth2/token?api-version=2019-11-01&resource=https%3A%2F%2Fmanagement.azure.com" | grep Www-Authenticate | cut -d "=" -f 2 | tr -d "[:cntrl:]")
CHALLENGE_TOKEN=$(cat $CHALLENGE_TOKEN_PATH)
if [ $? -ne 0 ]; then
    echo "Could not retrieve challenge token, double check that this command is run with root privileges."
else
    curl -s -H Metadata:true -H "Authorization: Basic $CHALLENGE_TOKEN" "http://127.0.0.1:40342/metadata/identity/oauth2/token?api-version=2019-11-01&resource=https%3A%2F%2Fmanagement.azure.com"
fi
The following response is an example that is returned:

Note
The above example is for requesting an access token for use with ARM REST APIs when the resource variable is set tohttps://management.azure.com. If you need an access token for a different Azure service, replace the resource variable in the script with the correct resource value. To authenticate with Azure Storage, seeUsing OAuth Token with Azure Storage. To complete the configuration to authenticate to Azure Key Vault, seeAccess Key Vault with WindowsorAccess Key Vault with Linux.
https://management.azure.com
Next steps
To learn more about Azure Key Vault, seeKey Vault overview.
To learn more about Azure Key Vault, seeKey Vault overview.
Learn how to assign a managed identity access to a resourceusing PowerShellor usingthe Azure CLI.
Learn how to assign a managed identity access to a resourceusing PowerShellor usingthe Azure CLI.
Feedback
Was this page helpful?
Additional resources