Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Policies in Azure API Management
Article
2024-08-02
14 contributors
In this article
APPLIES TO: All API Management tiers
In Azure API Management, API publishers can change API behavior through configuration usingpolicies. Policies are a collection of statements that are run sequentially on the request or response of an API. API Management provides more than 50 policies out of the box that you can configure to address common API scenarios such as authentication, rate limiting, caching, and transformation of requests or responses. For a complete list, seeAPI Management policy reference.
Popular policies include:
Format conversion from XML to JSON
Call rate limiting to restrict the number of incoming calls from a developer
Filtering requests that come from certain IP addresses
Policies are applied inside the gateway between the API consumer and the managed API. While the gateway receives requests and forwards them, unaltered, to the underlying API, a policy can apply changes to both the inbound request and outbound response.
Understanding policy configuration
Policy definitions are simple XML documents that describe a sequence of statements to apply to requests and responses. To help you configure policy definitions, the portal provides these options:
A guided, form-based editor to simplify configuring popular policies without coding XML
A code editor where you can insert XML snippets or edit XML directly
For more information about configuring policies, seeSet or edit policies.
The policy XML configuration is divided intoinbound,backend,outbound, andon-errorsections. This series of specified policy statements is executed in order for a request and a response.
inbound
backend
outbound
on-error
<policies>
  <inbound>
    <!-- statements to be applied to the request go here -->
  </inbound>
  <backend>
    <!-- statements to be applied before the request is forwarded to 
         the backend service go here -->
  </backend>
  <outbound>
    <!-- statements to be applied to the response go here -->
  </outbound>
  <on-error>
    <!-- statements to be applied if there is an error condition go here -->
  </on-error>
</policies>
<policies>
  <inbound>
    <!-- statements to be applied to the request go here -->
  </inbound>
  <backend>
    <!-- statements to be applied before the request is forwarded to 
         the backend service go here -->
  </backend>
  <outbound>
    <!-- statements to be applied to the response go here -->
  </outbound>
  <on-error>
    <!-- statements to be applied if there is an error condition go here -->
  </on-error>
</policies>
For policy XML examples, seeAPI Management policy snippets repo.
Error handling
If an error occurs during the processing of a request:
Any remaining steps in theinbound,backend, oroutboundsections are skipped.
inbound
backend
outbound
Execution jumps to the statements in theon-errorsection.
on-error
By placing policy statements in theon-errorsection, you can:
on-error
Review the error using thecontext.LastErrorproperty.
context.LastError
Inspect and customize the error response using theset-bodypolicy.
set-body
Configure what happens if an error occurs.
For more information, seeError handling in API Management policies.
Policy expressions
Unless the policy specifies otherwise,policy expressionscan be used as attribute values or text values in any of the API Management policies. A policy expression is either:
a single C# statement enclosed in@(expression), or
@(expression)
a multi-statement C# code block, enclosed in@{expression}, that returns a value
@{expression}
Each expression has access to the implicitly providedcontextvariable and an allowed subset of .NET Framework types.
context
Policy expressions provide a sophisticated means to control traffic and modify API behavior without requiring you to write specialized code or modify backend services. Some policies are based on policy expressions, such asControl flowandSet variable.
Scopes
API Management allows you to define policies at the followingscopes, from most broad to most narrow:
Global (all APIs)
Workspace (all APIs associated with a selected workspace)
Product (all APIs associated with a selected product)
API (all operations in an API)
Operation (single operation in an API)
When configuring a policy, you must first select the scope at which the policy applies.

Things to know
For fine-grained control for different API consumers, you can configure policy definitions at more than one scope
For fine-grained control for different API consumers, you can configure policy definitions at more than one scope
Not all policies are supported at each scope and policy section
Not all policies are supported at each scope and policy section
When configuring policy definitions at more than one scope, you control policy inheritance and the policy evaluation order in each policy section by placement of thebaseelement
When configuring policy definitions at more than one scope, you control policy inheritance and the policy evaluation order in each policy section by placement of thebaseelement
base
Policies applied to API requests are also affected by the request context, including the presence or absence of a subscription key used in the request, the API or product scope of the subscription key, and whether the API or product requires a subscription.NoteIf you're using an API-scoped subscription, an all-APIs subscription, or the built-in all-access subscription, policies configured at the product scope aren't applied to requests from that subscription.
Policies applied to API requests are also affected by the request context, including the presence or absence of a subscription key used in the request, the API or product scope of the subscription key, and whether the API or product requires a subscription.
Note
If you're using an API-scoped subscription, an all-APIs subscription, or the built-in all-access subscription, policies configured at the product scope aren't applied to requests from that subscription.
For more information, see:
Set or edit policies
Subscriptions in API Management
GraphQL resolver policies
In API Management, aGraphQL resolveris configured using policies scoped to a specific operation type and field in aGraphQL schema.
Currently, API Management supports GraphQL resolvers that specify either HTTP API, Cosmos DB, or Azure SQL data sources. For example, configure a singlehttp-data-sourcepolicy with elements to specify a request to (and optionally response from) an HTTP data source.
http-data-source
You can't include a resolver policy in policy definitions at other scopes such as API, product, or all APIs. It also doesn't inherit policies configured at other scopes.
The gateway evaluates a resolver-scoped policyafterany configuredinboundandbackendpolicies in the policy execution pipeline.
inbound
backend
For more information, seeConfigure a GraphQL resolver.
Get Copilot assistance
Get AI assistance from Copilot to create and edit your API Management policy definitions. With Copilot, create and update policies that match your specific requirements without needing to know the XML syntax, and get explanations of existing policies. Copilot can also help you translate policies you might have configured in other API management solutions.
Microsoft Copilot in Azure- Offers policy authoring assistance with natural language prompts in the Azure portal. Author policies in API Management's policy editor, and ask Copilot to explain policy sections.
GitHub Copilot for Azure in VS Code- Provides policy authoring assistance in Visual Studio Code, accelerating policy configuration when you use theAzure API Management Extension for Visual Studio Code. Prompt Copilot Chat or Copilot Edits (preview) with natural language to create and refine policy definitions in place.
Example prompt:
Generate a policy that adds an Authorization header to the request with a Bearer token.
Generate a policy that adds an Authorization header to the request with a Bearer token.
Copilot is powered by AI, so surprises and mistakes are possible. For more information, seeCopilot general use FAQs.
Examples
Apply policies specified at different scopes
If you have a policy at the global level and a policy configured for an API, both policies can be applied whenever that particular API is used. API Management allows for deterministic ordering of combined policy statements via thebaseelement.
base
Example policy definition at API scope:
<policies>
    <inbound>
        <cross-domain />
        <base />
        <find-and-replace from="xyz" to="abc" />
    </inbound>
</policies>
<policies>
    <inbound>
        <cross-domain />
        <base />
        <find-and-replace from="xyz" to="abc" />
    </inbound>
</policies>
In the example policy definition above:
Thecross-domainstatement would execute first.
cross-domain
Thefind-and-replacepolicywould execute after any policies at a broader scope.
find-and-replace
Note
If you remove thebaseelement at the API scope, only policies configured at the API scope will be applied. Neither product nor global scope policies would be applied.
base
Use policy expressions to modify requests
The following example usespolicy expressionsand theset-headerpolicy to add user data to the incoming request. The added header includes the user ID associated with the subscription key in the request, and the region where the gateway processing the request is hosted.
set-header
<policies>
    <inbound>
        <base />
        <set-header name="x-request-context-data" exists-action="override">
            <value>@(context.User.Id)</value>
            <value>@(context.Deployment.Region)</value>
      </set-header>
    </inbound>
</policies>
<policies>
    <inbound>
        <base />
        <set-header name="x-request-context-data" exists-action="override">
            <value>@(context.User.Id)</value>
            <value>@(context.Deployment.Region)</value>
      </set-header>
    </inbound>
</policies>
Related content
For more information about working with policies, see:
Tutorial: Transform and protect your API
Policy referencefor a full list of policy statements and their settings
Policy expressions
Set or edit policies
Reuse policy configurations
Policy snippets repo
Azure API Management policy toolkit
Get Copilot assistance to create, explain, and troubleshoot policies
Feedback
Was this page helpful?
Additional resources