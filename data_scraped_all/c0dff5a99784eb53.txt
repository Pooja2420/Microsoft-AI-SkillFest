Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Quickstart: Azure Key Vault secret client library for Python
Article
2025-04-14
19 contributors
In this article
Get started with the Azure Key Vault secret client library for Python. Follow these steps to install the package and try out example code for basic tasks. By using Key Vault to store secrets, you avoid storing secrets in your code, which increases the security of your app.
API reference documentation|Library source code|Package (Python Package Index)
Prerequisites
An Azure subscription -create one for free.
Python 3.7+.
Azure CLIorAzure PowerShell.
This quickstart assumes you're runningAzure CLIorAzure PowerShellin a Linux terminal window.
Set up your local environment
This quickstart is using Azure Identity library with Azure CLI or Azure PowerShell to authenticate user to Azure Services. Developers can also use Visual Studio or Visual Studio Code to authenticate their calls, for more information, seeAuthenticate the client with Azure Identity client library.
Sign in to Azure
Azure CLI
Azure PowerShell
Run theaz logincommand.az loginIf the CLI can open your default browser, it will do so and load an Azure sign-in page.Otherwise, open a browser page athttps://aka.ms/deviceloginand enter the
authorization code displayed in your terminal.
Run theaz logincommand.
az login
az login
az login
If the CLI can open your default browser, it will do so and load an Azure sign-in page.
Otherwise, open a browser page athttps://aka.ms/deviceloginand enter the
authorization code displayed in your terminal.
Sign in with your account credentials in the browser.
Sign in with your account credentials in the browser.
Run theConnect-AzAccountcommand.Connect-AzAccountIf PowerShell can open your default browser, it will do so and load an Azure sign-in page.Otherwise, open a browser page athttps://aka.ms/deviceloginand enter the
authorization code displayed in your terminal.
Run theConnect-AzAccountcommand.
Connect-AzAccount
Connect-AzAccount
Connect-AzAccount
If PowerShell can open your default browser, it will do so and load an Azure sign-in page.
Otherwise, open a browser page athttps://aka.ms/deviceloginand enter the
authorization code displayed in your terminal.
Sign in with your account credentials in the browser.
Sign in with your account credentials in the browser.
Install the packages
In a terminal or command prompt, create a suitable project folder, and then create and activate a Python virtual environment as described onUse Python virtual environments.
In a terminal or command prompt, create a suitable project folder, and then create and activate a Python virtual environment as described onUse Python virtual environments.
Install the Microsoft Entra identity library:pip install azure-identity
Install the Microsoft Entra identity library:
pip install azure-identity
pip install azure-identity
Install the Key Vault secrets library:pip install azure-keyvault-secrets
Install the Key Vault secrets library:
pip install azure-keyvault-secrets
pip install azure-keyvault-secrets
Create a resource group and key vault
Azure CLI
Azure PowerShell
Use theaz group createcommand to create a resource group:az group create --name myResourceGroup --location eastusYou can change "eastus" to a location nearer to you, if you prefer.
Use theaz group createcommand to create a resource group:
az group create
az group create --name myResourceGroup --location eastus
az group create --name myResourceGroup --location eastus
You can change "eastus" to a location nearer to you, if you prefer.
Useaz keyvault createto create the key vault:az keyvault create --name <your-unique-keyvault-name> --resource-group myResourceGroupReplace<your-unique-keyvault-name>with a name that's unique across all of Azure. You typically use your personal or company name along with other numbers and identifiers.
Useaz keyvault createto create the key vault:
az keyvault create
az keyvault create --name <your-unique-keyvault-name> --resource-group myResourceGroup
az keyvault create --name <your-unique-keyvault-name> --resource-group myResourceGroup
Replace<your-unique-keyvault-name>with a name that's unique across all of Azure. You typically use your personal or company name along with other numbers and identifiers.
<your-unique-keyvault-name>
Use theNew-AzResourceGroupcommand to create a resource group:New-AzResourceGroup -Name myResourceGroup -Location eastusYou can change "eastus" to a location nearer to you, if you prefer.
Use theNew-AzResourceGroupcommand to create a resource group:
New-AzResourceGroup
New-AzResourceGroup -Name myResourceGroup -Location eastus
New-AzResourceGroup -Name myResourceGroup -Location eastus
You can change "eastus" to a location nearer to you, if you prefer.
UseNew-AzKeyVaultto create the key vault:New-AzKeyVault -Name <your-unique-keyvault-name> -ResourceGroupName myResourceGroup -Location eastusReplace<your-unique-keyvault-name>with a name that's unique across all of Azure. You typically use your personal or company name along with other numbers and identifiers.
UseNew-AzKeyVaultto create the key vault:
New-AzKeyVault
New-AzKeyVault -Name <your-unique-keyvault-name> -ResourceGroupName myResourceGroup -Location eastus
New-AzKeyVault -Name <your-unique-keyvault-name> -ResourceGroupName myResourceGroup -Location eastus
Replace<your-unique-keyvault-name>with a name that's unique across all of Azure. You typically use your personal or company name along with other numbers and identifiers.
<your-unique-keyvault-name>
Set the KEY_VAULT_NAME environmental variable
Our script will use the value assigned to theKEY_VAULT_NAMEenvironment variable as the name of the key vault. You must therefore set this value using the following command:
KEY_VAULT_NAME
export KEY_VAULT_NAME=<your-unique-keyvault-name>
export KEY_VAULT_NAME=<your-unique-keyvault-name>
Grant access to your key vault
To gain permissions to your key vault throughRole-Based Access Control (RBAC), assign a role to your "User Principal Name" (UPN) using the Azure CLI commandaz role assignment create.
az role assignment create --role "Key Vault Secrets Officer" --assignee "<upn>" --scope "/subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/Microsoft.KeyVault/vaults/<your-unique-keyvault-name>"
az role assignment create --role "Key Vault Secrets Officer" --assignee "<upn>" --scope "/subscriptions/<subscription-id>/resourceGroups/<resource-group-name>/providers/Microsoft.KeyVault/vaults/<your-unique-keyvault-name>"
Replace <upn>, <subscription-id>, <resource-group-name> and <your-unique-keyvault-name> with your actual values. Your UPN will typically be in the format of an email address (e.g., username@domain.com).
Create the sample code
The Azure Key Vault secret client library for Python allows you to manage secrets. The following code sample demonstrates how to create a client, set a secret, retrieve a secret, and delete a secret.
Create a file namedkv_secrets.pythat contains this code.
import os
from azure.keyvault.secrets import SecretClient
from azure.identity import DefaultAzureCredential

keyVaultName = os.environ["KEY_VAULT_NAME"]
KVUri = f"https://{keyVaultName}.vault.azure.net"

credential = DefaultAzureCredential()
client = SecretClient(vault_url=KVUri, credential=credential)

secretName = input("Input a name for your secret > ")
secretValue = input("Input a value for your secret > ")

print(f"Creating a secret in {keyVaultName} called '{secretName}' with the value '{secretValue}' ...")

client.set_secret(secretName, secretValue)

print(" done.")

print(f"Retrieving your secret from {keyVaultName}.")

retrieved_secret = client.get_secret(secretName)

print(f"Your secret is '{retrieved_secret.value}'.")
print(f"Deleting your secret from {keyVaultName} ...")

poller = client.begin_delete_secret(secretName)
deleted_secret = poller.result()

print(" done.")
import os
from azure.keyvault.secrets import SecretClient
from azure.identity import DefaultAzureCredential

keyVaultName = os.environ["KEY_VAULT_NAME"]
KVUri = f"https://{keyVaultName}.vault.azure.net"

credential = DefaultAzureCredential()
client = SecretClient(vault_url=KVUri, credential=credential)

secretName = input("Input a name for your secret > ")
secretValue = input("Input a value for your secret > ")

print(f"Creating a secret in {keyVaultName} called '{secretName}' with the value '{secretValue}' ...")

client.set_secret(secretName, secretValue)

print(" done.")

print(f"Retrieving your secret from {keyVaultName}.")

retrieved_secret = client.get_secret(secretName)

print(f"Your secret is '{retrieved_secret.value}'.")
print(f"Deleting your secret from {keyVaultName} ...")

poller = client.begin_delete_secret(secretName)
deleted_secret = poller.result()

print(" done.")
Run the code
Make sure the code in the previous section is in a file namedkv_secrets.py. Then run the code with the following command:
python kv_secrets.py
python kv_secrets.py
If you encounter permissions errors, make sure you ran theaz keyvault set-policyorSet-AzKeyVaultAccessPolicycommand.
az keyvault set-policy
Set-AzKeyVaultAccessPolicy
Rerunning the code with the same secret name may produce the error, "(Conflict) Secret <name> is currently in a deleted but recoverable state." Use a different secret name.
Code details
Authenticate and create a client
Application requests to most Azure services must be authorized. Using theDefaultAzureCredentialclass provided by theAzure Identity client libraryis the recommended approach for implementing passwordless connections to Azure services in your code.DefaultAzureCredentialsupports multiple authentication methods and determines which method should be used at runtime. This approach enables your app to use different authentication methods in different environments (local vs. production) without implementing environment-specific code.
DefaultAzureCredential
In this quickstart,DefaultAzureCredentialauthenticates to key vault using the credentials of the local development user logged into the Azure CLI. When the application is deployed to Azure, the sameDefaultAzureCredentialcode can automatically discover and use a managed identity that is assigned to an App Service, Virtual Machine, or other services. For more information, seeManaged Identity Overview.
DefaultAzureCredential
DefaultAzureCredential
In the example code, the name of your key vault is expanded using the value of theKVUrivariable, in the format: "https://<your-key-vault-name>.vault.azure.net".
KVUri
credential = DefaultAzureCredential()
client = SecretClient(vault_url=KVUri, credential=credential)
credential = DefaultAzureCredential()
client = SecretClient(vault_url=KVUri, credential=credential)
Save a secret
Once you've obtained the client object for the key vault, you can store a secret using theset_secretmethod:
client.set_secret(secretName, secretValue)
client.set_secret(secretName, secretValue)
Callingset_secretgenerates a call to the Azure REST API for the key vault.
set_secret
When Azure handles the request, it authenticates the caller's identity (the service principal) using the credential object you provided to the client.
Retrieve a secret
To read a secret from Key Vault, use theget_secretmethod:
retrieved_secret = client.get_secret(secretName)
retrieved_secret = client.get_secret(secretName)
The secret value is contained inretrieved_secret.value.
retrieved_secret.value
You can also retrieve a secret with the Azure CLI commandaz keyvault secret showor the Azure PowerShell cmdletGet-AzKeyVaultSecret.
Delete a secret
To delete a secret, use thebegin_delete_secretmethod:
poller = client.begin_delete_secret(secretName)
deleted_secret = poller.result()
poller = client.begin_delete_secret(secretName)
deleted_secret = poller.result()
Thebegin_delete_secretmethod is asynchronous and returns a poller object. Calling the poller'sresultmethod waits for its completion.
begin_delete_secret
result
You can verify that the secret had been removed with the Azure CLI commandaz keyvault secret showor the Azure PowerShell cmdletGet-AzKeyVaultSecret.
Once deleted, a secret remains in a deleted but recoverable state for a time. If you run the code again, use a different secret name.
Clean up resources
If you want to also experiment withcertificatesandkeys, you can reuse the Key Vault created in this article.
Otherwise, when you're finished with the resources created in this article, use the following command to delete the resource group and all its contained resources:
Azure CLI
Azure PowerShell
az group delete --resource-group myResourceGroup
az group delete --resource-group myResourceGroup
Remove-AzResourceGroup -Name myResourceGroup
Remove-AzResourceGroup -Name myResourceGroup
Next steps
Overview of Azure Key Vault
Azure Key Vault developer's guide
Key Vault security overview
Authenticate with Key Vault
Feedback
Was this page helpful?
Additional resources