Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Provision standard (manual) throughput on an Azure Cosmos DB container - API for NoSQL
Article
2024-08-14
2 contributors
In this article
APPLIES TO:NoSQL
This article explains how to provision standard (manual) throughput on a container in Azure Cosmos DB for NoSQL. You can provision throughput on a single container, orprovision throughput on a databaseand share it among the containers within the database. You can provision throughput on a container using Azure portal, Azure CLI, or Azure Cosmos DB SDKs.
If you are using a different API, seeAPI for MongoDB,API for Cassandra,API for Gremlinarticles to provision the throughput.
Azure portal
Sign in to theAzure portal.
Sign in to theAzure portal.
Create a new Azure Cosmos DB account, or select an existing Azure Cosmos DB account.
Create a new Azure Cosmos DB account, or select an existing Azure Cosmos DB account.
Open theData Explorerpane, and selectNew Container. Next, provide the following details:Indicate whether you are creating a new database or using an existing one.Enter aContainer Id.Enter aPartition keyvalue (for example,/ItemID).SelectAutoscaleorManualthroughput and enter the requiredContainer throughput(for example, 1000 RU/s). Enter a throughput that you want to provision (for example, 1000 RUs).SelectOK.
Open theData Explorerpane, and selectNew Container. Next, provide the following details:
Indicate whether you are creating a new database or using an existing one.
Enter aContainer Id.
Enter aPartition keyvalue (for example,/ItemID).
/ItemID
SelectAutoscaleorManualthroughput and enter the requiredContainer throughput(for example, 1000 RU/s). Enter a throughput that you want to provision (for example, 1000 RUs).
SelectOK.

Azure CLI or PowerShell
To create a container with dedicated throughput see,
Create a container using Azure CLI
Create a container using PowerShell
.NET SDK
Note
Use the Azure Cosmos DB SDKs for API for NoSQL to provision throughput for all Azure Cosmos DB APIs, except Cassandra and API for MongoDB.
.NET SDK V2
.NET SDK V3
// Create a container with a partition key and provision throughput of 400 RU/s
DocumentCollection myCollection = new DocumentCollection();
myCollection.Id = "myContainerName";
myCollection.PartitionKey.Paths.Add("/myPartitionKey");

await client.CreateDocumentCollectionAsync(
    UriFactory.CreateDatabaseUri("myDatabaseName"),
    myCollection,
    new RequestOptions { OfferThroughput = 400 });
// Create a container with a partition key and provision throughput of 400 RU/s
DocumentCollection myCollection = new DocumentCollection();
myCollection.Id = "myContainerName";
myCollection.PartitionKey.Paths.Add("/myPartitionKey");

await client.CreateDocumentCollectionAsync(
    UriFactory.CreateDatabaseUri("myDatabaseName"),
    myCollection,
    new RequestOptions { OfferThroughput = 400 });
// Create a container with a partition key and provision throughput of 1000 RU/s
string containerName = "myContainerName";
string partitionKeyPath = "/myPartitionKey";

await this.cosmosClient.GetDatabase("myDatabase").CreateContainerAsync(
    id: containerName,
    partitionKeyPath: partitionKeyPath,
    throughput: 1000);
// Create a container with a partition key and provision throughput of 1000 RU/s
string containerName = "myContainerName";
string partitionKeyPath = "/myPartitionKey";

await this.cosmosClient.GetDatabase("myDatabase").CreateContainerAsync(
    id: containerName,
    partitionKeyPath: partitionKeyPath,
    throughput: 1000);
JavaScript SDK
// Create a new Client
const client = new CosmosClient({ endpoint, key });

// Create a database
const { database } = await client.databases.createIfNotExists({ id: "databaseId" });

// Create a container with the specified throughput
const { resource } = await database.containers.createIfNotExists({
id: "containerId",
throughput: 1000
});

// To update an existing container or databases throughput, you need to user the offers API
// Get all the offers
const { resources: offers } = await client.offers.readAll().fetchAll();

// Find the offer associated with your container or the database
const offer = offers.find((_offer) => _offer.offerResourceId === resource._rid);

// Change the throughput value
offer.content.offerThroughput = 2000;

// Replace the offer.
await client.offer(offer.id).replace(offer);
// Create a new Client
const client = new CosmosClient({ endpoint, key });

// Create a database
const { database } = await client.databases.createIfNotExists({ id: "databaseId" });

// Create a container with the specified throughput
const { resource } = await database.containers.createIfNotExists({
id: "containerId",
throughput: 1000
});

// To update an existing container or databases throughput, you need to user the offers API
// Get all the offers
const { resources: offers } = await client.offers.readAll().fetchAll();

// Find the offer associated with your container or the database
const offer = offers.find((_offer) => _offer.offerResourceId === resource._rid);

// Change the throughput value
offer.content.offerThroughput = 2000;

// Replace the offer.
await client.offer(offer.id).replace(offer);
Next steps
See the following articles to learn about throughput provisioning in Azure Cosmos DB:
How to provision standard (manual) throughput on a database
How to provision autoscale throughput on a database
Request units and throughput in Azure Cosmos DB
Feedback
Was this page helpful?
Additional resources