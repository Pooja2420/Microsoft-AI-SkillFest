Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Supported languages in Azure Functions
Article
2025-03-16
11 contributors
In this article
This article explains the levels of support offered for your preferred language when using Azure Functions. It also describes strategies for creating functions using languages not natively supported.
There are two levels of support:
Generally available (GA)- Fully supported and approved for production use.
Preview- Not yet supported, but expected to reach GA status in the future.
Languages by runtime version
Make sure to select your preferred development language at thetop of the article.
The following table shows the .NET versions supported by Azure Functions.
The supported version of .NET depends on both your Functions runtime version and your chosen execution model:
Isolated worker model
In-process model
Your function code runs in a separate .NET worker process. Use withsupported versions of .NET and .NET Framework. To learn more, seeGuide for running C# Azure Functions in the isolated worker model.
Important
Support will end for the in-process model on November 10, 2026. We highly recommend that youmigrate your apps to the isolated worker modelfor full support.
Your function code runs in the same process as the Functions host process. Supports onlyLong Term Support (LTS) versions of .NET. To learn more, seeDevelop C# class library functions using Azure Functions.
v4.x
v1.x
v4.x
v1.x
.NET 6 was previously supported on the in-process model but reached the end of official support onNovember 12, 2024.
For more information, seeDevelop C# class library functions using Azure Functionsand theAzure Functions C# script developer reference.
Important
Support will end for version 1.x of the Azure Functions runtime on September 14, 2026. We highly recommend that youmigrate your apps to version 4.xfor full support.
For more information, seeDevelop C# class library functions using Azure Functionsand theAzure Functions C# script developer reference.
.NET 6 was previously supported on the isolated worker model but reached the end of official support onNovember 12, 2024.
.NET 7 was previously supported on the isolated worker model but reached the end of official support onMay 14, 2024.
For more information, seeGuide for running C# Azure Functions in the isolated worker model.
Running C# functions in an isolated worker process isn't supported by version 1.x of the Functions runtime. Instead choose theIn-processtab or choosev4.x.
The following table shows the language versions supported for Java functions.
For more information on developing and running Java functions, seeAzure Functions Java developer guide.
The following table shows the language versions supported for Node.js functions.
TypeScript is supported through transpiling to JavaScript. For more information, see theAzure Functions Node.js developer guide.
The following table shows the language version supported for PowerShell functions.
For more information, seeAzure Functions PowerShell developer guide.
The following table shows the language versions supported for Python functions.
For more information, seeAzure Functions Python developer guide.
For information about planned changes to language support, see theAzure roadmap updates.
Language support details
The following table shows which languages supported by Functions can run on Linux or Windows. It also indicates whether your language supports editing in the Azure portal. The language is based on theRuntime stackoption you choose whencreating your function app in the Azure portal. This is the same as the--worker-runtimeoption when using thefunc initcommand in Azure Functions Core Tools.
--worker-runtime
func init
For more information on operating system and language support, seeOperating system/runtime support.
When in-portal editing isn't available, you must insteaddevelop your functions locally.
To learn more about how to maintain full-support coverage while running your functions in Azure, see ourlanguage-support-policyarticle.
Language major version support
Azure Functions provides a guarantee of support for the major versions of supported programming languages. For most languages, there are minor or patch versions released to update a supported major version. Examples of minor or patch versions include such as Python 3.9.1 and Node 14.17. After new minor versions of supported languages become available, the minor versions used by your functions apps are automatically upgraded to these newer minor or patch versions.
Note
Because Azure Functions can remove the support of older minor versions at any time after a new minor version is available, you shouldn't pin your function apps to a specific minor/patch version of a programming language.
Custom handlers
Custom handlers are lightweight web servers that receive events from the Azure Functions host. Any language that supports HTTP primitives can implement a custom handler. This means that custom handlers can be used to create functions in languages that aren't officially supported. To learn more, seeAzure Functions custom handlers.
Language extensibility
Starting with version 2.x, the runtime is designed to offerlanguage extensibility. The JavaScript and Java languages in the 2.x runtime are built with this extensibility.
ODBC driver support
This table indicates the ODBC driver support for your Python functions:
Next steps
Isolated worker model
In-process model
.NET isolated worker process reference.
In-process C# developer reference
Java developer reference
Node.js developer reference
PowerShell developer reference
Python developer reference
Feedback
Was this page helpful?
Additional resources