Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Tutorial: Connect an AKS app to Azure SQL Database
Article
2025-01-28
3 contributors
In this article
In this tutorial, you learn how to connect an application deployed to AKS, to an Azure SQL Database, using service connector. You complete the following tasks:
Create an Azure SQL Database resource
Create a connection between the AKS cluster and the database with Service Connector.
Update your container
Update your application code
Clean up Azure resources.
Prerequisites
An Azure account with an active subscription.Create an account for free.
An application deployed to AKS.
Use the Bash environment inAzure Cloud Shell. For more information, seeGet started with Azure Cloud Shell.If you prefer to run CLI reference commands locally,installthe Azure CLI. If you're running on Windows or macOS, consider running Azure CLI in a Docker container. For more information, seeHow to run the Azure CLI in a Docker container.If you're using a local installation, sign in to the Azure CLI by using theaz logincommand. To finish the authentication process, follow the steps displayed in your terminal. For other sign-in options, seeAuthenticate to Azure using Azure CLI.When you're prompted, install the Azure CLI extension on first use. For more information about extensions, seeUse and manage extensions with the Azure CLI.Runaz versionto find the version and dependent libraries that are installed. To upgrade to the latest version, runaz upgrade.
Use the Bash environment inAzure Cloud Shell. For more information, seeGet started with Azure Cloud Shell.
Use the Bash environment inAzure Cloud Shell. For more information, seeGet started with Azure Cloud Shell.

If you prefer to run CLI reference commands locally,installthe Azure CLI. If you're running on Windows or macOS, consider running Azure CLI in a Docker container. For more information, seeHow to run the Azure CLI in a Docker container.If you're using a local installation, sign in to the Azure CLI by using theaz logincommand. To finish the authentication process, follow the steps displayed in your terminal. For other sign-in options, seeAuthenticate to Azure using Azure CLI.When you're prompted, install the Azure CLI extension on first use. For more information about extensions, seeUse and manage extensions with the Azure CLI.Runaz versionto find the version and dependent libraries that are installed. To upgrade to the latest version, runaz upgrade.
If you prefer to run CLI reference commands locally,installthe Azure CLI. If you're running on Windows or macOS, consider running Azure CLI in a Docker container. For more information, seeHow to run the Azure CLI in a Docker container.
If you're using a local installation, sign in to the Azure CLI by using theaz logincommand. To finish the authentication process, follow the steps displayed in your terminal. For other sign-in options, seeAuthenticate to Azure using Azure CLI.
If you're using a local installation, sign in to the Azure CLI by using theaz logincommand. To finish the authentication process, follow the steps displayed in your terminal. For other sign-in options, seeAuthenticate to Azure using Azure CLI.
When you're prompted, install the Azure CLI extension on first use. For more information about extensions, seeUse and manage extensions with the Azure CLI.
When you're prompted, install the Azure CLI extension on first use. For more information about extensions, seeUse and manage extensions with the Azure CLI.
Runaz versionto find the version and dependent libraries that are installed. To upgrade to the latest version, runaz upgrade.
Runaz versionto find the version and dependent libraries that are installed. To upgrade to the latest version, runaz upgrade.
Create an Azure SQL Database
Create a resource group to store the Azure resources you create in this tutorial using theaz group createcommand.az group create \
    --name $RESOURCE_GROUP \
    --location eastus
Create a resource group to store the Azure resources you create in this tutorial using theaz group createcommand.
az group create
az group create \
    --name $RESOURCE_GROUP \
    --location eastus
az group create \
    --name $RESOURCE_GROUP \
    --location eastus
Follow the instructions tocreate an Azure SQL Databasein the resource group you created in the previous step. Make note of the server name, database name, and the database credentials for use throughout this tutorial.
Follow the instructions tocreate an Azure SQL Databasein the resource group you created in the previous step. Make note of the server name, database name, and the database credentials for use throughout this tutorial.
Create a service connection in AKS with Service Connector
Register the Service Connector and Kubernetes Configuration resource providers
Register the Service Connector and Kubernetes Configuration resource providers using theaz provider registercommand.
az provider register
az provider register --namespace Microsoft.ServiceLinker
az provider register --namespace Microsoft.ServiceLinker
az provider register --namespace Microsoft.KubernetesConfiguration
az provider register --namespace Microsoft.KubernetesConfiguration
Tip
You can check if these resource providers are already registered using theaz provider show --namespace "Microsoft.ServiceLinker" --query registrationStateandaz provider show --namespace "Microsoft.KubernetesConfiguration" --query registrationStatecommands. If the output isRegistered, then the service provider is already registered.
az provider show --namespace "Microsoft.ServiceLinker" --query registrationState
az provider show --namespace "Microsoft.KubernetesConfiguration" --query registrationState
Registered
Create a new connection
Create a service connection between your AKS cluster and your SQL database using Microsoft Entra Workload ID
Azure portal
Azure CLI
In theAzure portal, navigate to your AKS cluster resource.
In theAzure portal, navigate to your AKS cluster resource.
SelectSettings>Service Connector>Create.
SelectSettings>Service Connector>Create.
On theBasicstab, configure the following settings:Kubernetes namespace: Selectdefault.Service type: SelectSQL Database.Connection name: Use the connection name provided by Service Connector or enter your own connection name.Subscription: Select the subscription that includes the Azure SQL Database service.SQL server: Select your SQL server.SQL database: Select your SQL database.Client type: The code language or framework you use to connect to the target service, such asPython.
On theBasicstab, configure the following settings:
Kubernetes namespace: Selectdefault.
Service type: SelectSQL Database.
Connection name: Use the connection name provided by Service Connector or enter your own connection name.
Subscription: Select the subscription that includes the Azure SQL Database service.
SQL server: Select your SQL server.
SQL database: Select your SQL database.
Client type: The code language or framework you use to connect to the target service, such asPython.

SelectNext: Authentication.  On theAuthenticationtab, selectWorkload Identityand choose oneUser assigned managed identity.
SelectNext: Authentication.  On theAuthenticationtab, selectWorkload Identityand choose oneUser assigned managed identity.
SelectNext: Networking>Next: Review + create>Create On Cloud Shell.
SelectNext: Networking>Next: Review + create>Create On Cloud Shell.
The Cloud Shell will be launched and execute the commands to create a connection. You may need to confirm some configuration changes during the command processing. Once command runs successfully, it will show connection information, and you can click refresh button inService Connectorpane to show the latest result.
The Cloud Shell will be launched and execute the commands to create a connection. You may need to confirm some configuration changes during the command processing. Once command runs successfully, it will show connection information, and you can click refresh button inService Connectorpane to show the latest result.
Create a service connection to the SQL database using theaz aks connection create sqlcommand. You can run this command in two different ways:
az aks connection create sql
generate the new connection step by step.az aks connection create sql
generate the new connection step by step.
az aks connection create sql
az aks connection create sql
generate the new connection at once. Make sure you replace the following placeholders with your own information:<source-subscription>,<source_resource_group>,<cluster>,<target-subscription>,<target_resource_group>,<server>,<database>, and<***>.az aks connection create sql \
   --source-id /subscriptions/<source-subscription>/resourceGroups/<source_resource_group>/providers/Microsoft.ContainerService/managedClusters/<cluster> \
   --target-id /subscriptions/<target-subscription>/resourceGroups/<target_resource_group>/providers/Microsoft.Sql/servers/<server>/databases/<database> \
   --workload-identity /subscriptions/<identity-subscription>/resourcegroups/<resource_group>/providers/Microsoft.ManagedIdentity/userAssignedIdentities/<identity_name>
generate the new connection at once. Make sure you replace the following placeholders with your own information:<source-subscription>,<source_resource_group>,<cluster>,<target-subscription>,<target_resource_group>,<server>,<database>, and<***>.
<source-subscription>
<source_resource_group>
<cluster>
<target-subscription>
<target_resource_group>
<server>
<database>
<***>
az aks connection create sql \
   --source-id /subscriptions/<source-subscription>/resourceGroups/<source_resource_group>/providers/Microsoft.ContainerService/managedClusters/<cluster> \
   --target-id /subscriptions/<target-subscription>/resourceGroups/<target_resource_group>/providers/Microsoft.Sql/servers/<server>/databases/<database> \
   --workload-identity /subscriptions/<identity-subscription>/resourcegroups/<resource_group>/providers/Microsoft.ManagedIdentity/userAssignedIdentities/<identity_name>
az aks connection create sql \
   --source-id /subscriptions/<source-subscription>/resourceGroups/<source_resource_group>/providers/Microsoft.ContainerService/managedClusters/<cluster> \
   --target-id /subscriptions/<target-subscription>/resourceGroups/<target_resource_group>/providers/Microsoft.Sql/servers/<server>/databases/<database> \
   --workload-identity /subscriptions/<identity-subscription>/resourcegroups/<resource_group>/providers/Microsoft.ManagedIdentity/userAssignedIdentities/<identity_name>
Warning
Microsoft recommends that you use the most secure authentication flow available. The authentication flow described in this procedure requires a very high degree of trust in the application, and carries risks that are not present in other flows. You should only use this flow when other more secure flows, such as managed identities, aren't viable. Select the authentication methodWorkload ID (Recommended).
Create a service connection between your AKS cluster and your SQL database using a connection string
Azure portal
Azure CLI
In theAzure portal, navigate to your AKS cluster resource.
In theAzure portal, navigate to your AKS cluster resource.
SelectSettings>Service Connector>Create.
SelectSettings>Service Connector>Create.
On theBasicstab, configure the following settings:Kubernetes namespace: Selectdefault.Service type: SelectSQL Database.Connection name: Use the connection name provided by Service Connector or enter your own connection name.Subscription: Select the subscription that includes the Azure SQL Database service.SQL server: Select your SQL server.SQL database: Select your SQL database.Client type: The code language or framework you use to connect to the target service, such asPython.
On theBasicstab, configure the following settings:
Kubernetes namespace: Selectdefault.
Service type: SelectSQL Database.
Connection name: Use the connection name provided by Service Connector or enter your own connection name.
Subscription: Select the subscription that includes the Azure SQL Database service.
SQL server: Select your SQL server.
SQL database: Select your SQL database.
Client type: The code language or framework you use to connect to the target service, such asPython.

SelectNext: Authentication.  On theAuthenticationtab, enter your database username and password.
SelectNext: Authentication.  On theAuthenticationtab, enter your database username and password.
SelectNext: Networking>Next: Review + create>Create.
SelectNext: Networking>Next: Review + create>Create.
Once the deployment is successful, you can view information about the new connection in theService Connectorpane.
Once the deployment is successful, you can view information about the new connection in theService Connectorpane.
Create a service connection to the SQL database using theaz aks connection create sqlcommand. You can run this command in two different ways:
az aks connection create sql
generate the new connection step by step.az aks connection create sql
generate the new connection step by step.
az aks connection create sql
az aks connection create sql
generate the new connection at once. Make sure you replace the following placeholders with your own information:<source-subscription>,<source_resource_group>,<cluster>,<target-subscription>,<target_resource_group>,<server>,<database>, and<***>.az aks connection create sql \
   --source-id /subscriptions/<source-subscription>/resourceGroups/<source_resource_group>/providers/Microsoft.ContainerService/managedClusters/<cluster> \
   --target-id /subscriptions/<target-subscription>/resourceGroups/<target_resource_group>/providers/Microsoft.Sql/servers/<server>/databases/<database> \
   --secret name=<secret-name> secret=<secret>
generate the new connection at once. Make sure you replace the following placeholders with your own information:<source-subscription>,<source_resource_group>,<cluster>,<target-subscription>,<target_resource_group>,<server>,<database>, and<***>.
<source-subscription>
<source_resource_group>
<cluster>
<target-subscription>
<target_resource_group>
<server>
<database>
<***>
az aks connection create sql \
   --source-id /subscriptions/<source-subscription>/resourceGroups/<source_resource_group>/providers/Microsoft.ContainerService/managedClusters/<cluster> \
   --target-id /subscriptions/<target-subscription>/resourceGroups/<target_resource_group>/providers/Microsoft.Sql/servers/<server>/databases/<database> \
   --secret name=<secret-name> secret=<secret>
az aks connection create sql \
   --source-id /subscriptions/<source-subscription>/resourceGroups/<source_resource_group>/providers/Microsoft.ContainerService/managedClusters/<cluster> \
   --target-id /subscriptions/<target-subscription>/resourceGroups/<target_resource_group>/providers/Microsoft.Sql/servers/<server>/databases/<database> \
   --secret name=<secret-name> secret=<secret>
Update your container
Now that you created a connection between your AKS cluster and the database, you need to retrieve the connection secrets and deploy them in your container.
In theAzure portal, navigate to your AKS cluster resource. UnderSettings, selectService Connector.
In theAzure portal, navigate to your AKS cluster resource. UnderSettings, selectService Connector.
Select the newly created connection, and then selectYAML snippet. This action opens a panel displaying a sample YAML file generated by Service Connector.
Select the newly created connection, and then selectYAML snippet. This action opens a panel displaying a sample YAML file generated by Service Connector.
To set the connection secrets as environment variables in your container, you have two options:Directly create a deployment using the YAML sample code snippet provided. The snippet includes highlighted sections showing the secret object that will be injected as the environment variables. SelectApplyto proceed with this method.Alternatively, underResource Type, selectKubernetes Workload, and then select an existing Kubernetes workload. This action sets the secret object of your new connection as the environment variables for the selected workload. After selecting the workload, selectApply.
To set the connection secrets as environment variables in your container, you have two options:
Directly create a deployment using the YAML sample code snippet provided. The snippet includes highlighted sections showing the secret object that will be injected as the environment variables. SelectApplyto proceed with this method.
Directly create a deployment using the YAML sample code snippet provided. The snippet includes highlighted sections showing the secret object that will be injected as the environment variables. SelectApplyto proceed with this method.

Alternatively, underResource Type, selectKubernetes Workload, and then select an existing Kubernetes workload. This action sets the secret object of your new connection as the environment variables for the selected workload. After selecting the workload, selectApply.
Alternatively, underResource Type, selectKubernetes Workload, and then select an existing Kubernetes workload. This action sets the secret object of your new connection as the environment variables for the selected workload. After selecting the workload, selectApply.

Update your application code
As a final step, update your application code to use your environment variables, byfollowing these instructions.
Clean up resources
If you no longer need the resources you created when following this tutorial, you can remove them by deleting the Azure resource group.
Delete your resource group using theaz group deletecommand.
az group delete
az group delete --resource-group $RESOURCE_GROUP
az group delete --resource-group $RESOURCE_GROUP
Related content
Read the following articles to learn more about Service Connector concepts and how it helps AKS connect to Azure services:
Use Service Connector to connect AKS clusters to other cloud services
Learn about Service Connector concepts
Feedback
Was this page helpful?
Additional resources