Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Microsoft identity platform and OAuth 2.0 implicit grant flow
Article
2025-01-04
28 contributors
In this article
The Microsoft identity platform supports the OAuth 2.0 implicit grant flow as described in theOAuth 2.0 Specification. The defining characteristic of the implicit grant is that tokens (ID tokens or access tokens) are returned directly from the /authorize endpoint instead of the /token endpoint. This is often used as part of theauthorization code flow, in what is called the "hybrid flow" - retrieving the ID token on the /authorize request along with an authorization code.
This article describes how to program directly against the protocol in your application to request tokens from Microsoft Entra ID. When possible, we recommend you use the supported Microsoft Authentication Libraries (MSAL) instead toacquire tokens and call secured web APIs. For a list of code samples that use MSAL refer to theMicrosoft identity platform code samples.
Warning
Microsoft recommends you donotuse the implicit grant flow. In most scenarios, more secure alternatives are available and recommended. Certain configurations of this flow requires a very high degree of trust in the application, and carries risks that are not present in other flows. You should only use this flow when other more secure flows aren't viable. For more information, see thesecurity concerns with implicit grant flow.
Protocol diagram
The following diagram shows what the entire implicit sign-in flow looks like and the sections that follow describe each step in detail.

Suitable scenarios for the OAuth2 implicit grant
The implicit grant is only reliable for the initial, interactive portion of your sign-in flow, where the lack ofthird party cookiesdoesn't impact your application. This limitation means you should use it exclusively as part of the hybrid flow, where your application requests a code and a token from the authorization endpoint. In a hybrid flow, your application receives a code that can be redeemed for a refresh token, thus ensuring your app's login session remains valid over time.
Prefer the auth code flow
With some browsersremoving support for third party cookies, theimplicit grant flow is no longer a suitable authentication method. Thesilent single sign-on (SSO) featuresof the implicit flow don't work without third party cookies, causing applications to break when they attempt to get a new token. We strongly recommend that all new applications use theauthorization code flowthat now supports single-page apps in place of the implicit flow. Existing single-page apps should alsomigrate to the authorization code flow.
Security concerns with implicit grant flow
The implicit grant flow is intended for traditional web applications where the server has control over processing POST data securely. There are two main ways to deliver tokens with the implicit grant flow: whereresponse_modeis returned as a URL fragment or as a query parameter (usingform POSTandGET). In the implicit flow whereresponse_mode=form_post, the token is delivered securely through an HTML form POST to the client's redirect URI. This method ensures that the token isn't exposed in the URL fragment, which in turn avoids the risks of token leakage through browser history or referrer headers.
response_mode
form POST
GET
response_mode=form_post
The security concerns with the implicit flow arise when tokens are delivered usingresponse_mode=fragment. The URL fragment is the part of the URL that comes after the#symbol and is not sent to the server when the browser requests a new page, but is available to JavaScript running in the browser. This means that the token is exposed to any JavaScript running on the page, which could be a security risk if the page includes third-party scripts. This security concerns for tokens in SPAs also don't apply to the implicit flow withform POST.
response_mode=fragment
#
form POST
When should you allow an access token or ID token to be issued when requested using implicit grant or hybrid flow?
The implicit grant and hybrid flow aren't as secure as other OAuth flows. Unless absolutely required, you shouldnât allow an access or ID token to be issued when requested using implicit grant or hybrid flow in your app registration. If you (or your developers) are using the MSAL in your application to implement authentication and authorization, then neither field needs to be enabled.
However, if you (or your developers) aren't using MSAL in your application, the following table outlines when access tokens or ID token should be enabled.
Send the sign-in request
To initially sign the user into your app, you can send anOpenID Connectauthentication request and get anid_tokenfrom the Microsoft identity platform.
id_token
Important
To successfully request an ID token and/or an access token, the app registration in theMicrosoft Entra admin center - App registrationspage must have the corresponding implicit grant flow enabled, by selectingID tokensandaccess tokensin theImplicit grant and hybrid flowssection. If it's not enabled, anunsupported_responseerror will be returned:
unsupported_response
The provided value for the input parameter 'response_type' is not allowed for this client. Expected value is 'code'
The provided value for the input parameter 'response_type' is not allowed for this client. Expected value is 'code'
// Line breaks for legibility only

https://login.microsoftonline.com/{tenant}/oauth2/v2.0/authorize?
client_id=00001111-aaaa-2222-bbbb-3333cccc4444
&response_type=id_token
&redirect_uri=http%3A%2F%2Flocalhost%2Fmyapp%2F
&scope=openid
&response_mode=fragment
&state=12345
&nonce=678910
// Line breaks for legibility only

https://login.microsoftonline.com/{tenant}/oauth2/v2.0/authorize?
client_id=00001111-aaaa-2222-bbbb-3333cccc4444
&response_type=id_token
&redirect_uri=http%3A%2F%2Flocalhost%2Fmyapp%2F
&scope=openid
&response_mode=fragment
&state=12345
&nonce=678910
tenant
{tenant}
common
organizations
consumers
client_id
response_type
id_token
response_type
token
token
token
scope
user.read
code
token
id_token
code
redirect_uri
scope
id_tokens
openid
email
profile
response_mode
query
fragment
form_post
state
nonce
prompt
login
none
select_account
consent
prompt=login
prompt=none
prompt=select_account
prompt=consent
login_hint
login_hint
domain_hint
At this point, the user is asked to enter their credentials and complete the authentication. The Microsoft identity platform ensures that the user has consented to the permissions indicated in thescopequery parameter. If the user has consented tononeof those permissions, it asks the user to consent to the required permissions. For more info, seepermissions, consent, and multitenant apps.
scope
Once the user authenticates and grants consent, the Microsoft identity platform returns a response to your app at the indicatedredirect_uri, using the method specified in theresponse_modeparameter.
redirect_uri
response_mode
A successful response usingresponse_mode=fragmentandresponse_type=id_token+codelooks like the following (with line breaks for legibility):
response_mode=fragment
response_type=id_token+code
GET https://localhost/myapp/#
code=0.AgAAktYV-sfpYESnQynylW_UKZmH-C9y_G1A
&id_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6Ik5HVEZ2ZEstZnl0aEV1Q...
&state=12345
GET https://localhost/myapp/#
code=0.AgAAktYV-sfpYESnQynylW_UKZmH-C9y_G1A
&id_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6Ik5HVEZ2ZEstZnl0aEV1Q...
&state=12345
code
response_type
code
access_token
response_type
token
token_type
response_type
token
Bearer
expires_in
response_type
token
scope
response_type
token
access_token
id_token
id_token reference
openid
response_type
id_tokens
state
Warning
Don't attempt to validate or read tokens for any API you don't own, including the tokens in this example, in your code. Tokens for Microsoft services can use a special format that will not validate as a JWT, and may also be encrypted for consumer (Microsoft account) users. While reading tokens is a useful debugging and learning tool, do not take dependencies on this in your code or assume specifics about tokens that aren't for an API you control.
Error response
Error responses may also be sent to theredirect_uriso the app can handle them appropriately:
redirect_uri
GET https://localhost/myapp/#
error=access_denied
&error_description=the+user+canceled+the+authentication
GET https://localhost/myapp/#
error=access_denied
&error_description=the+user+canceled+the+authentication
error
error_description
Acquire access tokens silently
Now that your user is signed into your single-page app, you can silently get access tokens for calling web APIs secured by Microsoft identity platform, such as theMicrosoft Graph. Even if you already received a token using thetokenresponse_type, you can use this method to acquire tokens to additional resources without redirecting the user to sign in again.
token
Important
This part of the implicit flow is unlikely to work for your application as it's used across different browsers due to theremoval of third party cookies by default.  While this still currently works in Chromium-based browsers that are not in Incognito, developers should reconsider using this part of the flow. In browsers that do not support third party cookies, you will receive an error indicating that no users are signed in, as the login page's session cookies were removed by the browser.
In the normal OpenID Connect/OAuth flow, you would do this by making a request to the Microsoft identity platform/tokenendpoint. You can make the request in a hidden iframe to get new tokens for other web APIs:
/token
// Line breaks for legibility only

https://login.microsoftonline.com/{tenant}/oauth2/v2.0/authorize?
client_id=00001111-aaaa-2222-bbbb-3333cccc4444&response_type=token
&redirect_uri=http%3A%2F%2Flocalhost%2Fmyapp%2F
&scope=https%3A%2F%2Fgraph.microsoft.com%2Fuser.read
&response_mode=fragment
&state=12345
&nonce=678910
&prompt=none
&login_hint=myuser@mycompany.com
// Line breaks for legibility only

https://login.microsoftonline.com/{tenant}/oauth2/v2.0/authorize?
client_id=00001111-aaaa-2222-bbbb-3333cccc4444&response_type=token
&redirect_uri=http%3A%2F%2Flocalhost%2Fmyapp%2F
&scope=https%3A%2F%2Fgraph.microsoft.com%2Fuser.read
&response_mode=fragment
&state=12345
&nonce=678910
&prompt=none
&login_hint=myuser@mycompany.com
For details on the query parameters in the URL, seesend the sign in request.
Tip
Try copy & pasting the following request into a browser tab using a realclient_idandusernamefrom your app registration. This will allow you to see the silent token request in action.
client_id
username
https://login.microsoftonline.com/common/oauth2/v2.0/authorize?client_id={your-client-id}&response_type=token&redirect_uri=http%3A%2F%2Flocalhost%2Fmyapp%2F&scope=https%3A%2F%2Fgraph.microsoft.com%2Fuser.read&response_mode=fragment&state=12345&nonce=678910&prompt=none&login_hint={username}
https://login.microsoftonline.com/common/oauth2/v2.0/authorize?client_id={your-client-id}&response_type=token&redirect_uri=http%3A%2F%2Flocalhost%2Fmyapp%2F&scope=https%3A%2F%2Fgraph.microsoft.com%2Fuser.read&response_mode=fragment&state=12345&nonce=678910&prompt=none&login_hint={username}
Note that this will work even in browsers without third party cookie support, since you're entering this directly into a browser bar as opposed to opening it within an iframe.
Thanks to theprompt=noneparameter, this request either succeeds or fails immediately and returns to your application. The response is sent to your app at the indicatedredirect_uri, using the method specified in theresponse_modeparameter.
prompt=none
redirect_uri
response_mode
Successful response
A successful response usingresponse_mode=fragmentlooks like:
response_mode=fragment
GET https://localhost/myapp/#
access_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6Ik5HVEZ2ZEstZnl0aEV1Q...
&state=12345
&token_type=Bearer
&expires_in=3599
&scope=https%3A%2F%2Fgraph.microsoft.com%2Fdirectory.read
GET https://localhost/myapp/#
access_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6Ik5HVEZ2ZEstZnl0aEV1Q...
&state=12345
&token_type=Bearer
&expires_in=3599
&scope=https%3A%2F%2Fgraph.microsoft.com%2Fdirectory.read
access_token
response_type
token
token_type
Bearer
expires_in
scope
id_token
response_type
id_token
id_token
openid
state
Error responses may also be sent to theredirect_uriso the app can handle them appropriately. Ifprompt=none, an expected error is:
redirect_uri
prompt=none
GET https://localhost/myapp/#
error=user_authentication_required
&error_description=the+request+could+not+be+completed+silently
GET https://localhost/myapp/#
error=user_authentication_required
&error_description=the+request+could+not+be+completed+silently
error
error_description
If you receive this error in the iframe request, the user must interactively sign in again to retrieve a new token. You can choose to handle this case in whatever way makes sense for your application.
Refreshing tokens
The implicit grant doesn't provide refresh tokens. Both ID tokens and access tokens will expire after a short period of time, so your app must be prepared to refresh these tokens periodically. To refresh either type of token, you can perform the same hidden iframe request previously outlined, using theprompt=noneparameter to control the identity platform's behavior. If you want to receive a new ID token, be sure to useid_tokenin theresponse_typeandscope=openid, and anonceparameter.
prompt=none
id_token
response_type
scope=openid
nonce
In browsers that don't support third party cookies, this results in an error indicating that no user is signed in.
Send a sign-out request
The OpenID Connectend_session_endpointallows your app to send a request to the Microsoft identity platform to end a user's session and clear cookies set by the Microsoft identity platform. To fully sign a user out of a web application, your app should end its own session with the user (usually by clearing a token cache or dropping cookies), and then redirect the browser to:
end_session_endpoint
https://login.microsoftonline.com/{tenant}/oauth2/v2.0/logout?post_logout_redirect_uri=https://localhost/myapp/
https://login.microsoftonline.com/{tenant}/oauth2/v2.0/logout?post_logout_redirect_uri=https://localhost/myapp/
tenant
{tenant}
common
organizations
consumers
post_logout_redirect_uri
See also
Go over theMSAL JS samplesto get started coding.
Review theauthorization code flowas a newer, better alternative to the implicit grant.
Feedback
Was this page helpful?
Additional resources