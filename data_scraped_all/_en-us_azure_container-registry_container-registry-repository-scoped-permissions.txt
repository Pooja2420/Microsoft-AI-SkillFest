Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Create a token with repository-scoped permissions
Article
2024-09-19
7 contributors
In this article
This article describes how to create tokens and scope maps to manage access to repositories in your container registry. By creating tokens, a registry owner can provide users or services with scoped, time-limited access to repositories to pull or push images or perform other actions. A token provides more fine-grained permissions than other registryauthentication options, which scope permissions to an entire registry.
Common scenarios for creating a token include:
Allow IoT devices with individual tokens to pull an image from a repository.
Provide an external organization with permissions to a repository path.
Limit repository access to different user groups in your organization. For example, provide write and read access to developers who build images that target specific repositories, and read access to teams that deploy from those repositories.
This feature is available in all the service tiers. For information about registry service tiers and limits, seeAzure Container Registry service tiers
Limitations
You can't currently assign repository-scoped permissions to a Microsoft Entra identity, such as a service principal or managed identity.
Concepts
To configure repository-scoped permissions, you create atokenwith an associatedscope map.
Atokenalong with a generated password lets the user authenticate with the registry. You can set an expiration date for a token password, or disable a token at any time.After authenticating with a token, the user or service can perform one or moreactionsscoped to one or more repositories.ActionDescriptionExamplecontent/deleteRemove data from the repositoryDelete a repository or a manifestcontent/readRead data from the repositoryPull an artifactcontent/writeWrite data to the repositoryUse withcontent/readto push an artifactmetadata/readRead metadata from the repositoryList tags or manifestsmetadata/writeWrite metadata to the repositoryEnable or disable read, write, or delete operations
Atokenalong with a generated password lets the user authenticate with the registry. You can set an expiration date for a token password, or disable a token at any time.
After authenticating with a token, the user or service can perform one or moreactionsscoped to one or more repositories.
content/delete
content/read
content/write
content/read
metadata/read
metadata/write
Note
Repository-scoped permissions do not support the ability to list the catalog of all repositories in the registry.
Ascope mapgroups the repository permissions you apply to a token and can reapply to other tokens. Every token is associated with a single scope map. With a scope map, you can:Configure multiple tokens with identical permissions to a set of repositories.Update token permissions when you add or remove repository actions in the scope map, or apply a different scope map.Azure Container Registry also provides several system-defined scope maps you can apply when creating tokens. The permissions of system-defined scope maps apply to all repositories in your registry.The individualactionscorresponds to the limit ofRepositories per scope map.
Ascope mapgroups the repository permissions you apply to a token and can reapply to other tokens. Every token is associated with a single scope map. With a scope map, you can:
Configure multiple tokens with identical permissions to a set of repositories.
Update token permissions when you add or remove repository actions in the scope map, or apply a different scope map.
Azure Container Registry also provides several system-defined scope maps you can apply when creating tokens. The permissions of system-defined scope maps apply to all repositories in your registry.The individualactionscorresponds to the limit ofRepositories per scope map.
The following image shows the relationship between tokens and scope maps.

Prerequisites
Azure CLI- Azure CLI command examples in this article require Azure CLI version 2.17.0 or later. Runaz --versionto find the version. If you need to install or upgrade, seeInstall Azure CLI.
az --version
Docker- To authenticate with the registry to pull or push images, you need a local Docker installation. Docker provides installation instructions formacOS,Windows, andLinuxsystems.
Container registry- If you don't have one, create a container registry in your Azure subscription. For example, use theAzure portalor theAzure CLI.
Create token - CLI
Create token and specify repositories
Create a token using theaz acr token createcommand. When creating a token, you can specify one or more repositories and associated actions on each repository. The repositories don't need to be in the registry yet. To create a token by specifying an existing scope map, see thenext section.
The following example creates a token in the registrymyregistrywith the following permissions on thesamples/hello-worldrepo:content/writeandcontent/read. By default, the command sets the default token status toenabled, but you can update the status todisabledat any time.
samples/hello-world
content/write
content/read
enabled
disabled
az acr token create --name MyToken --registry myregistry \
  --repository samples/hello-world \
  content/write content/read \
  --output json
az acr token create --name MyToken --registry myregistry \
  --repository samples/hello-world \
  content/write content/read \
  --output json
The output shows details about the token. By default, two passwords are generated that don't expire, but you can optionally set an expiration date. It's recommended to save the passwords in a safe place to use later for authentication. The passwords can't be retrieved again, but new ones can be generated.
{
  "creationDate": "2020-01-18T00:15:34.066221+00:00",
  "credentials": {
    "certificates": [],
    "passwords": [
      {
        "creationTime": "2020-01-18T00:15:52.837651+00:00",
        "expiry": null,
        "name": "password1",
        "value": "uH54BxxxxK7KOxxxxRbr26dAs8JXxxxx"
      },
      {
        "creationTime": "2020-01-18T00:15:52.837651+00:00",
        "expiry": null,
        "name": "password2",
        "value": "kPX6Or/xxxxLXpqowxxxxkA0idwLtmxxxx"
      }
    ],
    "username": "MyToken"
  },
  "id": "/subscriptions/aaaa0a0a-bb1b-cc2c-dd3d-eeeeee4e4e4e/resourceGroups/myresourcegroup/providers/Microsoft.ContainerRegistry/registries/myregistry/tokens/MyToken",
  "name": "MyToken",
  "objectId": null,
  "provisioningState": "Succeeded",
  "resourceGroup": "myresourcegroup",
  "scopeMapId": "/subscriptions/aaaa0a0a-bb1b-cc2c-dd3d-eeeeee4e4e4e/resourceGroups/myresourcegroup/providers/Microsoft.ContainerRegistry/registries/myregistry/scopeMaps/MyToken-scope-map",
  "status": "enabled",
  "type": "Microsoft.ContainerRegistry/registries/tokens"
}
{
  "creationDate": "2020-01-18T00:15:34.066221+00:00",
  "credentials": {
    "certificates": [],
    "passwords": [
      {
        "creationTime": "2020-01-18T00:15:52.837651+00:00",
        "expiry": null,
        "name": "password1",
        "value": "uH54BxxxxK7KOxxxxRbr26dAs8JXxxxx"
      },
      {
        "creationTime": "2020-01-18T00:15:52.837651+00:00",
        "expiry": null,
        "name": "password2",
        "value": "kPX6Or/xxxxLXpqowxxxxkA0idwLtmxxxx"
      }
    ],
    "username": "MyToken"
  },
  "id": "/subscriptions/aaaa0a0a-bb1b-cc2c-dd3d-eeeeee4e4e4e/resourceGroups/myresourcegroup/providers/Microsoft.ContainerRegistry/registries/myregistry/tokens/MyToken",
  "name": "MyToken",
  "objectId": null,
  "provisioningState": "Succeeded",
  "resourceGroup": "myresourcegroup",
  "scopeMapId": "/subscriptions/aaaa0a0a-bb1b-cc2c-dd3d-eeeeee4e4e4e/resourceGroups/myresourcegroup/providers/Microsoft.ContainerRegistry/registries/myregistry/scopeMaps/MyToken-scope-map",
  "status": "enabled",
  "type": "Microsoft.ContainerRegistry/registries/tokens"
}
Note
To regenerate token passwords and expiration periods, seeRegenerate token passwordslater in this article.
The output includes details about the scope map the command created. You can use the scope map, here namedMyToken-scope-map, to apply the same repository actions to other tokens. Or, update the scope map later to change the permissions of the associated tokens.
MyToken-scope-map
Create token and specify scope map
An alternative way to create a token is to specify an existing scope map. If you don't already have a scope map, first create one by specifying repositories and associated actions. Then, specify the scope map when creating a token.
To create a scope map, use theaz acr scope-map createcommand. The following command creates a scope map with the same permissions on thesamples/hello-worldrepository used previously.
samples/hello-world
az acr scope-map create --name MyScopeMap --registry myregistry \
  --repository samples/hello-world \
  content/write content/read \
  --description "Sample scope map"
az acr scope-map create --name MyScopeMap --registry myregistry \
  --repository samples/hello-world \
  content/write content/read \
  --description "Sample scope map"
Runaz acr token createto create a token, specifying theMyScopeMapscope map. As in the previous example, the command sets the default token status toenabled.
enabled
az acr token create --name MyToken \
  --registry myregistry \
  --scope-map MyScopeMap
az acr token create --name MyToken \
  --registry myregistry \
  --scope-map MyScopeMap
The output shows details about the token. By default, two passwords are generated. It's recommended to save the passwords in a safe place to use later for authentication. The passwords can't be retrieved again, but new ones can be generated.
Note
To regenerate token passwords and expiration periods, seeRegenerate token passwordslater in this article.
How to use scope maps to define and assign permissions for multiple repositories
A scope map allows for the use of a wildcard character to define and grant similar permissions for multiple repositories that share a common prefix. Repositories with specific permissions, repositories with a wildcard character can also be used in the same scope map. This provides flexibility in managing permissions for a multiple set of repositories in a single scope map.
Repository permissions can be created when a scope map is created and assigned to a token. Alternatively, a token can be created and directly assigned to a repository.
The following example creates a scope map with a wildcard character and then assigns it to a token.
az acr scope-map create --name MyScopeMapWildcard --registry myregistry \
  --repository samples/* \
  content/write content/read \
  --description "Sample scope map with wildcards"
az acr token create --name MyTokenWildcard \
  --registry myregistry \
  --scope-map MyScopeMapWildcard
az acr scope-map create --name MyScopeMapWildcard --registry myregistry \
  --repository samples/* \
  content/write content/read \
  --description "Sample scope map with wildcards"
az acr token create --name MyTokenWildcard \
  --registry myregistry \
  --scope-map MyScopeMapWildcard
The following example creates a token with a wildcard.
az acr token create --name MyTokenWildcard --registry myregistry \
  --repository samples/* \
  content/write content/read \
az acr token create --name MyTokenWildcard --registry myregistry \
  --repository samples/* \
  content/write content/read \
The wildcard permissions are additive, which means that when a specific repository is accessed, the resulting permissions will include the permissions for all the scope map rules that match the wildcard prefix.
In this example, the scope map defines permissions for three different types of repositories:
sample/*
content/read
sample/teamA/*
content/write
sample/teamA/projectB
content/delete
The token is assigned a scope map to grant[content/read, content/write, content/delete]permissions for accessing repositorysample/teamA/projectB. However, when the same token is used to access thesample/teamA/projectCrepository, it only has[content/read, content/write]permissions.
[content/read, content/write, content/delete]
sample/teamA/projectB
sample/teamA/projectC
[content/read, content/write]
Important
Repositories using wildcards in the scope map should always end with a/*suffix to be valid and have a single wildcard character in the repository name.
Here are some examples of invalid wildcards:
/*
sample/*/teamAwith a wildcard in the middle of the repository name.
sample/*/teamA
sample/teamA*with a wildcard does not end with `/*``.
sample/teamA*
sample/teamA/*/projectB/*with multiple wildcards in the repository name.
sample/teamA/*/projectB/*
Wildcards can also be applied at a root level. This means that any permissions assigned to the repository defined as*, will be applied registry wide.
*
The example shows how to create a token with a root level wildcard that would give the token[content/read, content/write]permissions to all repositories in the registry. This provides a simple way to grant permissions to all repositories in the registry without having to specify each repository individually.
[content/read, content/write]
az acr token create --name MyTokenWildcard --registry myregistry \
  --repository * \
  content/write content/read \
az acr token create --name MyTokenWildcard --registry myregistry \
  --repository * \
  content/write content/read \
Important
If a wildcard rule encompasses a repository that does not exist yet, the wildcard rule's permissions will still apply to that repository name.
For example, a token that is assigned to a scope map that grants[content/write, metadata/write]permissions forsample/*repositories.
Additionally, suppose the repositorysample/teamC/teamCimagedoes not exist yet.
The token will have permissions for pushing images to repositorysample/teamC/teamCimage, which will simultaneously create the repository on successful push.
[content/write, metadata/write]
sample/*
sample/teamC/teamCimage
sample/teamC/teamCimage
Create token - portal
You can use the Azure portal to create tokens and scope maps. As with theaz acr token createCLI command, you can apply an existing scope map, or create a scope map when you create a token by specifying one or more repositories and associated actions. The repositories don't need to be in the registry yet.
az acr token create
The following example creates a token, and creates a scope map with the following permissions on thesamples/hello-worldrepository:content/writeandcontent/read.
samples/hello-world
content/write
content/read
In the portal, navigate to your container registry.
In the portal, navigate to your container registry.
UnderRepository permissions, selectTokens > +Add.
UnderRepository permissions, selectTokens > +Add.

Enter a token name.
Enter a token name.
UnderScope map, selectCreate new.
UnderScope map, selectCreate new.
Configure the scope map:Enter a name and description for the scope map.UnderRepositories, entersamples/hello-world, and underPermissions, selectcontent/readandcontent/write. Then select+Add.After adding repositories and permissions, selectAddto add the scope map.
Configure the scope map:
Enter a name and description for the scope map.
Enter a name and description for the scope map.
UnderRepositories, entersamples/hello-world, and underPermissions, selectcontent/readandcontent/write. Then select+Add.
UnderRepositories, entersamples/hello-world, and underPermissions, selectcontent/readandcontent/write. Then select+Add.
samples/hello-world
content/read
content/write

After adding repositories and permissions, selectAddto add the scope map.
After adding repositories and permissions, selectAddto add the scope map.
Accept the default tokenStatusofEnabledand then selectCreate.
Accept the default tokenStatusofEnabledand then selectCreate.
After the token is validated and created, token details appear in theTokensscreen.
Add token password
To use a token created in the portal, you must generate a password. You can generate one or two passwords, and set an expiration date for each one. New passwords created for tokens are available immediately. Regenerating new passwords for tokens will take 60 seconds to replicate and be available.
In the portal, navigate to your container registry.
In the portal, navigate to your container registry.
UnderRepository permissions, selectTokens, and select a token.
UnderRepository permissions, selectTokens, and select a token.
In the token details, selectpassword1orpassword2, and select the Generate icon.
In the token details, selectpassword1orpassword2, and select the Generate icon.
In the password screen, optionally set an expiration date for the password, and selectGenerate. It's recommended to set an expiration date.
In the password screen, optionally set an expiration date for the password, and selectGenerate. It's recommended to set an expiration date.
After generating a password, copy and save it to a safe location. You can't retrieve a generated password after closing the screen, but you can generate a new one.
After generating a password, copy and save it to a safe location. You can't retrieve a generated password after closing the screen, but you can generate a new one.

Authenticate with token
When a user or service uses a token to authenticate with the target registry, it provides the token name as a user name and one of its generated passwords.
The authentication method depends on the configured action or actions associated with the token.
content/delete
az acr repository delete
az acr repository delete --name myregistry --repository myrepo --username MyToken --password xxxxxxxxxx
content/read
docker login
az acr login
az acr login --name myregistry --username MyToken --password xxxxxxxxxx
content/write
docker login
az acr login
metadata/read
az acr repository show
az acr repository show-tags
az acr manifest list-metadata
metadata/write
az acr repository untag
az acr repository update
Examples: Use token
The following examples use the token created earlier in this article to perform common operations on a repository: push and pull images, delete images, and list repository tags. The token was set up initially with push permissions (content/writeandcontent/readactions) on thesamples/hello-worldrepository.
content/write
content/read
samples/hello-world
Pull and tag test images
For the following examples, pull publichello-worldandnginximages from Microsoft Container Registry, and tag them for your registry and repository.
hello-world
nginx
docker pull mcr.microsoft.com/hello-world
docker pull mcr.microsoft.com/oss/nginx/nginx:1.15.5-alpine
docker tag mcr.microsoft.com/hello-world myregistry.azurecr.io/samples/hello-world:v1
docker tag mcr.microsoft.com/oss/nginx/nginx:1.15.5-alpine myregistry.azurecr.io/samples/nginx:v1
docker pull mcr.microsoft.com/hello-world
docker pull mcr.microsoft.com/oss/nginx/nginx:1.15.5-alpine
docker tag mcr.microsoft.com/hello-world myregistry.azurecr.io/samples/hello-world:v1
docker tag mcr.microsoft.com/oss/nginx/nginx:1.15.5-alpine myregistry.azurecr.io/samples/nginx:v1
Authenticate using token
Rundocker loginoraz acr loginto authenticate with the registry to push or pull images. Provide the token name as the user name, and provide one of its passwords. The token must have theEnabledstatus.
docker login
az acr login
Enabled
The following example is formatted for the bash shell, and provides the values using environment variables.
TOKEN_NAME=MyToken
TOKEN_PWD=<token password>

echo $TOKEN_PWD | docker login --username $TOKEN_NAME --password-stdin myregistry.azurecr.io
TOKEN_NAME=MyToken
TOKEN_PWD=<token password>

echo $TOKEN_PWD | docker login --username $TOKEN_NAME --password-stdin myregistry.azurecr.io
Output should show successful authentication:
Login Succeeded
Login Succeeded
Push images to registry
After successful login, attempt to push the tagged images to the registry. Because the token has permissions to push images to thesamples/hello-worldrepository, the following push succeeds:
samples/hello-world
docker push myregistry.azurecr.io/samples/hello-world:v1
docker push myregistry.azurecr.io/samples/hello-world:v1
The token doesn't have permissions to thesamples/nginxrepo, so the following push attempt fails with an error similar torequested access to the resource is denied:
samples/nginx
requested access to the resource is denied
docker push myregistry.azurecr.io/samples/nginx:v1
docker push myregistry.azurecr.io/samples/nginx:v1
Update token permissions
To update the permissions of a token, update the permissions in the associated scope map. The updated scope map is applied immediately to all associated tokens.
For example, updateMyToken-scope-mapwithcontent/writeandcontent/readactions on thesamples/ngnxrepository, and remove thecontent/writeaction on thesamples/hello-worldrepository.
MyToken-scope-map
content/write
content/read
samples/ngnx
content/write
samples/hello-world
To use the Azure CLI, runaz acr scope-map updateto update the scope map:
az acr scope-map update \
  --name MyScopeMap \
  --registry myregistry \
  --add-repository samples/nginx content/write content/read \
  --remove-repository samples/hello-world content/write
az acr scope-map update \
  --name MyScopeMap \
  --registry myregistry \
  --add-repository samples/nginx content/write content/read \
  --remove-repository samples/hello-world content/write
In the Azure portal:
Navigate to your container registry.
UnderRepository permissions, selectScope maps, and select the scope map to update.
UnderRepositories, entersamples/nginx, and underPermissions, selectcontent/readandcontent/write. Then select+Add.
samples/nginx
content/read
content/write
UnderRepositories, selectsamples/hello-worldand underPermissions, deselectcontent/write. Then selectSave.
samples/hello-world
content/write
After updating the scope map, the following push succeeds:
docker push myregistry.azurecr.io/samples/nginx:v1
docker push myregistry.azurecr.io/samples/nginx:v1
Because the scope map only has thecontent/readpermission on thesamples/hello-worldrepository, a push attempt to thesamples/hello-worldrepo now fails:
content/read
samples/hello-world
samples/hello-world
docker push myregistry.azurecr.io/samples/hello-world:v1
docker push myregistry.azurecr.io/samples/hello-world:v1
Pulling images from both repos succeeds, because the scope map providescontent/readpermissions on both repositories:
content/read
docker pull myregistry.azurecr.io/samples/nginx:v1
docker pull myregistry.azurecr.io/samples/hello-world:v1
docker pull myregistry.azurecr.io/samples/nginx:v1
docker pull myregistry.azurecr.io/samples/hello-world:v1
Delete images
Update the scope map by adding thecontent/deleteaction to thenginxrepository. This action allows deletion of images in the repository, or deletion of the entire repository.
content/delete
nginx
For brevity, we show only theaz acr scope-map updatecommand to update the scope map:
az acr scope-map update \
  --name MyScopeMap \
  --registry myregistry \
  --add-repository samples/nginx content/delete
az acr scope-map update \
  --name MyScopeMap \
  --registry myregistry \
  --add-repository samples/nginx content/delete
To update the scope map using the portal, see theprevious section.
Use the followingaz acr repository deletecommand to delete thesamples/nginxrepository. To delete images or repositories, pass the token's name and password to the command. The following example uses the environment variables created earlier in the article:
samples/nginx
az acr repository delete \
  --name myregistry --repository samples/nginx \
  --username $TOKEN_NAME --password $TOKEN_PWD
az acr repository delete \
  --name myregistry --repository samples/nginx \
  --username $TOKEN_NAME --password $TOKEN_PWD
Show repo tags
Update the scope map by adding themetadata/readaction to thehello-worldrepository. This action allows reading manifest and tag data in the repository.
metadata/read
hello-world
For brevity, we show only theaz acr scope-map updatecommand to update the scope map:
az acr scope-map update \
  --name MyScopeMap \
  --registry myregistry \
  --add-repository samples/hello-world metadata/read
az acr scope-map update \
  --name MyScopeMap \
  --registry myregistry \
  --add-repository samples/hello-world metadata/read
To update the scope map using the portal, see theprevious section.
To read metadata in thesamples/hello-worldrepository, run theaz acr manifest list-metadataoraz acr repository show-tagscommand.
samples/hello-world
To read metadata, pass the token's name and password to either command. The following example uses the environment variables created earlier in the article:
az acr repository show-tags \
  --name myregistry --repository samples/hello-world \
  --username $TOKEN_NAME --password $TOKEN_PWD
az acr repository show-tags \
  --name myregistry --repository samples/hello-world \
  --username $TOKEN_NAME --password $TOKEN_PWD
Sample output:
[
  "v1"
]
[
  "v1"
]
Manage tokens and scope maps
List scope maps
Use theaz acr scope-map listcommand, or theScope mapsscreen in the portal, to list all the scope maps configured in a registry. For example:
az acr scope-map list \
  --registry myregistry --output table
az acr scope-map list \
  --registry myregistry --output table
The output consists of the three system-defined scope maps and other scope maps generated by you. Tokens can be configured with any of these scope maps.
NAME                 TYPE           CREATION DATE         DESCRIPTION
-------------------  -------------  --------------------  ------------------------------------------------------------
_repositories_admin  SystemDefined  2020-01-20T09:44:24Z  Can perform all read, write and delete operations on the ...
_repositories_pull   SystemDefined  2020-01-20T09:44:24Z  Can pull any repository of the registry
_repositories_push   SystemDefined  2020-01-20T09:44:24Z  Can push to any repository of the registry
MyScopeMap           UserDefined    2019-11-15T21:17:34Z  Sample scope map
NAME                 TYPE           CREATION DATE         DESCRIPTION
-------------------  -------------  --------------------  ------------------------------------------------------------
_repositories_admin  SystemDefined  2020-01-20T09:44:24Z  Can perform all read, write and delete operations on the ...
_repositories_pull   SystemDefined  2020-01-20T09:44:24Z  Can pull any repository of the registry
_repositories_push   SystemDefined  2020-01-20T09:44:24Z  Can push to any repository of the registry
MyScopeMap           UserDefined    2019-11-15T21:17:34Z  Sample scope map
Show token details
To view the details of a token, such as its status and password expiration dates, run theaz acr token showcommand, or select the token in theTokensscreen in the portal. For example:
az acr scope-map show \
  --name MyScopeMap --registry myregistry
az acr scope-map show \
  --name MyScopeMap --registry myregistry
Use theaz acr token listcommand, or theTokensscreen in the portal, to list all the tokens configured in a registry. For example:
az acr token list --registry myregistry --output table
az acr token list --registry myregistry --output table
Regenerate token passwords
If you didn't generate a token password, or you want to generate new passwords, run theaz acr token credential generatecommand. Regenerating new passwords for tokens will take 60 seconds to replicate and be available.
The following example generates a new value for password1 for theMyTokentoken, with an expiration period of 30 days. It stores the password in the environment variableTOKEN_PWD. This example is formatted for the bash shell.
TOKEN_PWD
TOKEN_PWD=$(az acr token credential generate \
  --name MyToken --registry myregistry --expiration-in-days 30 \
  --password1 --query 'passwords[0].value' --output tsv)
TOKEN_PWD=$(az acr token credential generate \
  --name MyToken --registry myregistry --expiration-in-days 30 \
  --password1 --query 'passwords[0].value' --output tsv)
To use the Azure portal to generate a token password, see the steps inCreate token - portalearlier in this article.
Update token with new scope map
If you want to update a token with a different scope map, runaz acr token updateand specify the new scope map. For example:
az acr token update --name MyToken --registry myregistry \
  --scope-map MyNewScopeMap
az acr token update --name MyToken --registry myregistry \
  --scope-map MyNewScopeMap
In the portal, on theTokensscreen, select the token, and underScope map, select a different scope map.
Tip
After updating a token with a new scope map, you might want to generate new token passwords. Use theaz acr token credential generatecommand or regenerate a token password in the Azure portal.
Disable or delete token
You might need to temporarily disable use of the token credentials for a user or service.
Using the Azure CLI, run theaz acr token updatecommand to set thestatustodisabled:
status
disabled
az acr token update --name MyToken --registry myregistry \
  --status disabled
az acr token update --name MyToken --registry myregistry \
  --status disabled
In the portal, select the token in theTokensscreen, and selectDisabledunderStatus.
To delete a token to permanently invalidate access by anyone using its credentials, run theaz acr token deletecommand.
az acr token delete --name MyToken --registry myregistry
az acr token delete --name MyToken --registry myregistry
In the portal, select the token in theTokensscreen, and selectDiscard.
Next steps
To manage scope maps and tokens, use additional commands in theaz acr scope-mapandaz acr tokencommand groups.
See theauthentication overviewfor other options to authenticate with an Azure container registry, including using a Microsoft Entra identity, a service principal, or an admin account.
Learn aboutconnected registriesand using tokens foraccess.
Feedback
Was this page helpful?
Additional resources