Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Get started with the chat using your own data sample for JavaScript
Article
2025-03-17
3 contributors
In this article
This article shows you how to deploy and run theChat with your data sample for JavaScript. This sample implements a chat app using JavaScript, Azure OpenAI Service, andRetrieval Augmented Generation (RAG)in Azure AI Search to get answers about rental properties. The rental properties chat app is seeded with data from markdown files (*.md) including a privacy policy, terms of service, and support.
Demo JavaScript-  full stack video
Demo JavaScript- frontend with Python backend video
By following the instructions in this article, you will:
Deploy a chat app to Azure.
Get answers about rental properties website information.
Change settings to change behavior of responses.
Once you complete this article, you can start modifying the new project with your custom code and data.
This article is part of a collection of articles that show you how to build a chat app using Azure OpenAI Service and Azure AI Search. Other articles in the collection include:
.NET
Java
Python
Note
This article uses one or moreAI app templatesas the basis for the examples and guidance in the article. AI app templates provide you with well-maintained, easy to deploy reference implementations that help to ensure a high-quality starting point for your AI apps.
Architectural overview
A simple architecture of the chat app is shown in the following diagram:

The chat sample application is built for a fictitious company calledContoso Real Estate, and the intelligent chat experience allows its customers to ask support questions about the usage of its products. The sample data includes a set of documents that describe its terms of service, privacy policy, and a support guide. The documents are ingested into the architecture during deployment.
The application is made from multiple components, including:
Search service: the backend service that provides the search and retrieval capabilities.
Indexer service: the service that indexes the data and creates the search indexes.
Web app: the frontend web application that provides the user interface and orchestrates the interaction between the user and the backend services.

Cost
Most resources in this architecture use a basic or consumption pricing tier. Consumption pricing is based on usage, which means you only pay for what you use. To complete this article, the resources generate a charge but it's minimal. When you're done with the article, you can delete the resources to stop incurring charges.
Learn more aboutcost in the sample repo.
Prerequisites
Adevelopment containerenvironment is available with all dependencies required to complete this article. You can run the development container in GitHub Codespaces (in a browser) or locally using Visual Studio Code.
To use this article, you need the following prerequisites:
Codespaces (recommended)
Visual Studio Code
An Azure subscription -Create one for free
Azure account permissions - Your Azure Account must have Microsoft.Authorization/roleAssignments/write permissions, such asUser Access AdministratororOwner.
GitHub account
An Azure subscription -Create one for free
Azure account permissions - Your Azure Account must have Microsoft.Authorization/roleAssignments/write permissions, such asUser Access AdministratororOwner.
Azure Developer CLI
Docker Desktop- start Docker Desktop if it's not already running
Visual Studio Code
Dev Container Extension
Open development environment
Use the following instructions to deploy a preconfigured development environment containing all required dependencies to complete this article.
GitHub Codespaces (recommended)
Visual Studio Code
GitHub Codespacesruns a development container managed by GitHub withVisual Studio Code for the Webas the user interface. For the most straightforward development environment, use GitHub Codespaces so that you have the correct developer tools and dependencies preinstalled to complete this article.
Important
All GitHub accounts can use Codespaces for up to 60 hours free each month with two core instances. For more information, seeGitHub Codespaces monthly included storage and core hours.
Start the process to create a new GitHub Codespace on themainbranch of theAzure-Samples/azure-search-openai-javascriptGitHub repository.
Start the process to create a new GitHub Codespace on themainbranch of theAzure-Samples/azure-search-openai-javascriptGitHub repository.
main
Azure-Samples/azure-search-openai-javascript
Right-click on the following button, and selectOpen link in new windowin order to have both the development environment and the documentation available at the same time.
Right-click on the following button, and selectOpen link in new windowin order to have both the development environment and the documentation available at the same time.

On theCreate codespacepage, review the codespace configuration settings, and then selectCreate new codespace
On theCreate codespacepage, review the codespace configuration settings, and then selectCreate new codespace

Wait for the codespace to start. This startup process can take a few minutes.
Wait for the codespace to start. This startup process can take a few minutes.
In the terminal at the bottom of the screen, sign in to Azure with the Azure Developer CLI.azd auth login --use-device-code
In the terminal at the bottom of the screen, sign in to Azure with the Azure Developer CLI.
azd auth login --use-device-code
azd auth login --use-device-code
Copy the code from the terminal and then paste it into a browser. Follow the instructions to authenticate with your Azure account.
Copy the code from the terminal and then paste it into a browser. Follow the instructions to authenticate with your Azure account.
The remaining tasks in this article take place in the context of this development container.
The remaining tasks in this article take place in the context of this development container.
TheDev Containers extensionfor Visual Studio Code requiresDockerto be installed on your local machine. The extension hosts the development container locally using the Docker host with the correct developer tools and dependencies preinstalled to complete this article.
Create a new local directory on your computer for the project.mkdir my-intelligent-app && cd my-intelligent-app
Create a new local directory on your computer for the project.
mkdir my-intelligent-app && cd my-intelligent-app
mkdir my-intelligent-app && cd my-intelligent-app
Open Visual Studio Code in that directory:code .
Open Visual Studio Code in that directory:
code .
code .
Open a new terminal in Visual Studio Code.
Open a new terminal in Visual Studio Code.
Run the following AZD command to bring the GitHub repository to your local computer.azd init -t azure-search-openai-javascript
Run the following AZD command to bring the GitHub repository to your local computer.
azd init -t azure-search-openai-javascript
azd init -t azure-search-openai-javascript
Open the Command Palette, search for and selectDev Containers: Open Folder in Containerto open the project in a dev container. Wait until the dev container opens before continuing.
Open the Command Palette, search for and selectDev Containers: Open Folder in Containerto open the project in a dev container. Wait until the dev container opens before continuing.
Sign in to Azure with the Azure Developer CLI.azd auth loginCopy the code from the terminal and then paste it into a browser. Follow the instructions to authenticate with your Azure account.
Sign in to Azure with the Azure Developer CLI.
azd auth login
azd auth login
Copy the code from the terminal and then paste it into a browser. Follow the instructions to authenticate with your Azure account.
The remaining exercises in this project take place in the context of this development container.
The remaining exercises in this project take place in the context of this development container.
Deploy and run
The sample repository contains all the code and configuration files you need to deploy a chat app to Azure. The following steps walk you through the process of deploying the sample to Azure.
Deploy chat app to Azure
Important
Azure resources created in this section incur immediate costs, primarily from the Azure AI Search resource. These resources might accrue costs even if you interrupt the command before it fully executes.
Run the following Azure Developer CLI command to provision the Azure resources and deploy the source code:azd up
Run the following Azure Developer CLI command to provision the Azure resources and deploy the source code:
azd up
azd up
If you're prompted to enter an environment name, keep it short and lowercase. For example,myenv. It's used as part of the resource group name.
If you're prompted to enter an environment name, keep it short and lowercase. For example,myenv. It's used as part of the resource group name.
myenv
When prompted, select a subscription to create the resources in.
When prompted, select a subscription to create the resources in.
When you're prompted to select a location the first time, select a location near you. This location is used for most the resources including hosting.
When you're prompted to select a location the first time, select a location near you. This location is used for most the resources including hosting.
If you're prompted for a location for the OpenAI model, select a location that is near you. If the same location is available as your first location, select that.
If you're prompted for a location for the OpenAI model, select a location that is near you. If the same location is available as your first location, select that.
Wait until app is deployed. It might take 5-10 minutes for the deployment to complete.
Wait until app is deployed. It might take 5-10 minutes for the deployment to complete.
After the application successfully deploys, you see a URL displayed in the terminal.
After the application successfully deploys, you see a URL displayed in the terminal.
Select that URL labeledDeploying service webto open the chat application in a browser.
Select that URL labeledDeploying service webto open the chat application in a browser.
Deploying service web

Use chat app to get answers from markdown files
The chat app is preloaded with rental information from amarkdown file catalog. You can use the chat app to ask questions about the rental process. The following steps walk you through the process of using the chat app.
In the browser, select or enterWhat is the refund policyin the text box at the bottom of the page.
In the browser, select or enterWhat is the refund policyin the text box at the bottom of the page.

From the answer, selectShow thought process.
From the answer, selectShow thought process.

In the right-pane, use the tabs to understand how the answer was generated.TabDescriptionThought processThis is a script of the interactions in chat. You can view the system prompt (content) and your user question (content).Supporting contentThis includes the information to answer your question and the source material. The number of source material citations is noted in theDeveloper settings. The default value is3.CitationThis displays the original page that contains the citation.
In the right-pane, use the tabs to understand how the answer was generated.
content
content
When you're done, select thehidebutton denoted with anXabove the tabs.
When you're done, select thehidebutton denoted with anXabove the tabs.
Use chat app settings to change behavior of responses
The intelligence of the chat app is determined by the OpenAI model and the settings that are used to interact with the model.

Use semantic ranker
Use query-contextual summaries
The following steps walk you through the process of changing the settings.
In the browser, select theDeveloper Settingstab.
In the browser, select theDeveloper Settingstab.
Check theUse query-contextual summaries instead ofcheckbox and ask the same question again.What happens if the rental doesn't fit the description?The chat returned with a more concise answer such as the following.
Check theUse query-contextual summaries instead ofcheckbox and ask the same question again.
What happens if the rental doesn't fit the description?
What happens if the rental doesn't fit the description?
The chat returned with a more concise answer such as the following.
Clean up resources
Clean up Azure resources
The Azure resources created in this article are billed to your Azure subscription. If you don't expect to need these resources in the future, delete them to avoid incurring more charges.
Run the following Azure Developer CLI command to delete the Azure resources and remove the source code:
azd down --purge
azd down --purge
Clean up GitHub Codespaces
GitHub Codespaces
Visual Studio Code
Deleting the GitHub Codespaces environment ensures that you can maximize the amount of free per-core hours entitlement you get for your account.
Important
For more information about your GitHub account's entitlements, seeGitHub Codespaces monthly included storage and core hours.
Sign into theGitHub Codespaces dashboard.
Sign into theGitHub Codespaces dashboard.
Locate your currently running Codespaces sourced from theAzure-Samples/azure-search-openai-javascriptGitHub repository.
Locate your currently running Codespaces sourced from theAzure-Samples/azure-search-openai-javascriptGitHub repository.
Azure-Samples/azure-search-openai-javascript

Open the context menu for the codespace and then selectDelete.
Open the context menu for the codespace and then selectDelete.

You aren't necessarily required to clean up your local environment, but you can stop the running development container and return to running Visual Studio Code in the context of a local workspace.
Open theCommand Palette, search for theDev Containerscommands, and then selectDev Containers: Reopen Folder Locally.
Open theCommand Palette, search for theDev Containerscommands, and then selectDev Containers: Reopen Folder Locally.

Tip
Visual Studio Code stops the running development container, but the container still exists in Docker in a stopped state. You can always delete the container instance, container image, and volumes from Docker to free up more space on your local machine.
Get help
This sample repository offerstroubleshooting information.
If your issued isn't addressed, log your issue to the repository'sIssues.
Next steps
Get the source code for the sample used in this article
Build a chat app with Azure OpenAIbest practice solution architecture
Access control in Generative AI Apps with Azure AI Search
Build an Enterprise ready OpenAI solution with Azure API Management
Outperforming vector search with hybrid retrieval and ranking capabilities
Learn more about how AZD is used in this template:Tech community blog postReactor video series
Tech community blog post
Reactor video series
Feedback
Was this page helpful?
Additional resources