Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
String operators
Article
2025-03-10
19 contributors
In this article
Applies to: âMicrosoft FabricâAzure Data ExplorerâAzure MonitorâMicrosoft Sentinel
Kusto Query Language (KQL) offers various query operators for searching string data types. The following article describes how string terms are indexed, lists the string query operators, and gives tips for optimizing performance.
Understanding string terms
Kusto indexes all columns, including columns of typestring. Multiple indexes are built for such columns, depending on the actual data. These indexes aren't directly exposed, but are used in queries with thestringoperators that havehasas part of their name, such ashas,!has,hasprefix,!hasprefix. The semantics of these operators are dictated by the way the column is encoded. Instead of doing a "plain" substring match, these operators matchterms.
string
string
has
has
!has
hasprefix
!hasprefix
What is a term?
By default, eachstringvalue is broken into maximal sequences of alphanumeric characters, and each of those sequences is made into a term.
string
For example, in the followingstring, the terms areKusto,KustoExplorerQueryRun, and the following substrings:ad67d136,c1db,4f9f,88ef,d94f3b6b0b5a.
string
Kusto
KustoExplorerQueryRun
ad67d136
c1db
4f9f
88ef
d94f3b6b0b5a
Kusto: ad67d136-c1db-4f9f-88ef-d94f3b6b0b5a;KustoExplorerQueryRun
Kusto: ad67d136-c1db-4f9f-88ef-d94f3b6b0b5a;KustoExplorerQueryRun
Kusto builds a term index consisting of all terms that arethree characters or more, and this index is used by string operators such ashas,!has, and so on.  If the query looks for a term that is smaller than three characters, or uses acontainsoperator, then the query will revert to scanning the values in the column. Scanning is much slower than looking up the term in the term index.
has
!has
contains
WhileExploreris a substring ofKustoExplorerQueryRun,"KustoExplorerQueryRun" has "Explorer"will returnfalsewhile"KustoExplorerQueryRun" contains "Explorer"will returntrue. This is subtle but the behavior is due to the fact thathasis term-based.
Explorer
KustoExplorerQueryRun
"KustoExplorerQueryRun" has "Explorer"
false
"KustoExplorerQueryRun" contains "Explorer"
true
has
Operators on strings
The following abbreviations are used in this article:
RHS = right hand side of the expression
LHS = left hand side of the expression
Operators with an_cssuffix are case sensitive.
_cs
true
==
"aBc" == "aBc"
!=
"abc" != "ABC"
=~
"abc" =~ "ABC"
!~
"aBc" !~ "xyz"
contains
"FabriKam" contains "BRik"
!contains
"Fabrikam" !contains "xyz"
contains_cs
"FabriKam" contains_cs "Kam"
!contains_cs
"Fabrikam" !contains_cs "Kam"
endswith
"Fabrikam" endswith "Kam"
!endswith
"Fabrikam" !endswith "brik"
endswith_cs
"Fabrikam" endswith_cs "kam"
!endswith_cs
"Fabrikam" !endswith_cs "brik"
has
"North America" has "america"
!has
"North America" !has "amer"
has_all
has
"North and South America" has_all("south", "north")
has_any
has
"North America" has_any("south", "north")
has_cs
"North America" has_cs "America"
!has_cs
"North America" !has_cs "amer"
hasprefix
"North America" hasprefix "ame"
!hasprefix
"North America" !hasprefix "mer"
hasprefix_cs
"North America" hasprefix_cs "Ame"
!hasprefix_cs
"North America" !hasprefix_cs "CA"
hassuffix
"North America" hassuffix "ica"
!hassuffix
"North America" !hassuffix "americ"
hassuffix_cs
"North America" hassuffix_cs "ica"
!hassuffix_cs
"North America" !hassuffix_cs "icA"
in
"abc" in ("123", "345", "abc")
!in
"bca" !in ("123", "345", "abc")
in~
"Abc" in~ ("123", "345", "abc")
!in~
"bCa" !in~ ("123", "345", "ABC")
matches regex
"Fabrikam" matches regex "b.*k"
startswith
"Fabrikam" startswith "fab"
!startswith
"Fabrikam" !startswith "kam"
startswith_cs
"Fabrikam" startswith_cs "Fab"
!startswith_cs
"Fabrikam" !startswith_cs "fab"
Performance tips
For better performance, when there are two operators that do the same task, use the case-sensitive one.
For example:
Use==, not=~
==
=~
Usein, notin~
in
in~
Usehassuffix_cs, nothassuffix
hassuffix_cs
hassuffix
For faster results, if you're testing for the presence of a symbol or alphanumeric word that is bound by non-alphanumeric characters, or the start or end of a field, usehasorin.hasworks faster thancontains,startswith, orendswith.
has
in
has
contains
startswith
endswith
To search for IPv4 addresses or their prefixes, use one of specialoperators on IPv4 addresses, which are optimized for this purpose.
For more information, seeQuery best practices.
For example, the first of these queries will run faster:
Run the query
StormEvents | where State has "North" | count;
StormEvents | where State contains "nor" | count
StormEvents | where State has "North" | count;
StormEvents | where State contains "nor" | count
Operators on IPv4 addresses
The following group of operators provide index accelerated search on IPv4 addresses or their prefixes.
true
has_ipv4("Source address is 10.1.2.3:1234", "10.1.2.3")
has_ipv4_prefix("Source address is 10.1.2.3:1234", "10.1.2.")
has_any_ipv4("Source address is 10.1.2.3:1234", dynamic(["10.1.2.3", "127.0.0.1"]))
has_any_ipv4_prefix("Source address is 10.1.2.3:1234", dynamic(["10.1.2.", "127.0.0."]))
Feedback
Was this page helpful?
Additional resources