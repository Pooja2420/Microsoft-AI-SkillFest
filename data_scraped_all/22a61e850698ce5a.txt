Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Get started with Python packages in Azure Artifacts
Article
2024-12-05
17 contributors
In this article
Azure DevOps Services | Azure DevOps Server 2022 - Azure DevOps Server 2019
Using Azure Artifacts, you can publish and download packages from feeds and public registries such as PyPi. This quickstart will guide you through creating a feed, configuring your project, and managing Python packages in your Azure Artifacts feed. In this article, you learn how to:
Create a new feed.
Authenticate with your feed.
Publish Python packages.
Install packages from your feed.
Prerequisites
Create an Azure DevOpsorganizationand aprojectif you haven't already.
Create an Azure DevOpsorganizationand aprojectif you haven't already.
Download and installPython.
Download and installPython.
Get the code
If you don't have your own Python project, you can use the following sample Python project:https://github.com/microsoft/python-package-template
If you don't have your own Python project, you can use the following sample Python project:
https://github.com/microsoft/python-package-template
https://github.com/microsoft/python-package-template
To build your wheel and source distribution, run the following commands in your project directory:pip install --upgrade build
python -m build
To build your wheel and source distribution, run the following commands in your project directory:
pip install --upgrade build
python -m build
pip install --upgrade build
python -m build
If your Python project has asetup.pyfile, you can also use this command to build your package:python setup.py sdist bdist_wheel
If your Python project has asetup.pyfile, you can also use this command to build your package:
python setup.py sdist bdist_wheel
python setup.py sdist bdist_wheel
Create a feed
Sign in to your Azure DevOps organization and navigate to your project.
Sign in to your Azure DevOps organization and navigate to your project.
SelectArtifacts, and then selectCreate Feed.
SelectArtifacts, and then selectCreate Feed.
Provide aNamefor your feed, choose theVisibilityoption that defines who can view your packages, checkInclude packages from common public sourcesif you want to include packages from sources likenuget.orgornpmjs.com, and forScope, decide whether the feed should be scoped to your project or the entire organization.
Provide aNamefor your feed, choose theVisibilityoption that defines who can view your packages, checkInclude packages from common public sourcesif you want to include packages from sources likenuget.orgornpmjs.com, and forScope, decide whether the feed should be scoped to your project or the entire organization.
SelectCreatewhen you're done.
SelectCreatewhen you're done.

Sign in to your Azure DevOps server, and then go to your project.
Sign in to your Azure DevOps server, and then go to your project.
SelectArtifacts, and then selectCreate Feed.
SelectArtifacts, and then selectCreate Feed.
Provide aNamefor your feed, choose theVisibilityoption that defines who can view your packages, checkInclude packages from common public sourcesif you want to include packages from sources likenuget.orgornpmjs.com, and forScope, decide whether the feed should be scoped to your project or the entire organization.
Provide aNamefor your feed, choose theVisibilityoption that defines who can view your packages, checkInclude packages from common public sourcesif you want to include packages from sources likenuget.orgornpmjs.com, and forScope, decide whether the feed should be scoped to your project or the entire organization.
SelectCreatewhen you're done.
SelectCreatewhen you're done.

SelectCreatewhen you're done.
SelectCreatewhen you're done.

Note
By default, newly created feeds have their project'sBuild Servicevalue set toFeed and Upstream Reader (Collaborator).
Connect to a feed
twine
pip
Sign in to your Azure DevOps organization, and then navigate to your project.
Sign in to your Azure DevOps organization, and then navigate to your project.
SelectArtifacts, select your feed from the dropdown menu, and then selectConnect to feed.
SelectArtifacts, select your feed from the dropdown menu, and then selectConnect to feed.
Selecttwineunder thePythonsection.
Selecttwineunder thePythonsection.
If this is your first time using Azure Artifacts with twine, selectGet the toolsand follow the steps to install the prerequisites.
If this is your first time using Azure Artifacts with twine, selectGet the toolsand follow the steps to install the prerequisites.
Add apypircfile to your home directory and paste the provided snippet. Your file should look like this:[distutils]
Index-servers =
    FEED_NAME

[FEED_NAME]
Repository = https://pkgs.dev.azure.com/ORGANIZATION_NAME/PROJECT_NAME/_packaging/FEED_NAME/pypi/upload/
Add apypircfile to your home directory and paste the provided snippet. Your file should look like this:
[distutils]
Index-servers =
    FEED_NAME

[FEED_NAME]
Repository = https://pkgs.dev.azure.com/ORGANIZATION_NAME/PROJECT_NAME/_packaging/FEED_NAME/pypi/upload/
[distutils]
Index-servers =
    FEED_NAME

[FEED_NAME]
Repository = https://pkgs.dev.azure.com/ORGANIZATION_NAME/PROJECT_NAME/_packaging/FEED_NAME/pypi/upload/
Note
If your.pypircfile already contains credentials for the public PyPI index, we recommend removing the[pypi]section to prevent accidental publication of private packages to PyPI.
[pypi]
Sign in to your Azure DevOps organization, and then navigate to your project.
Sign in to your Azure DevOps organization, and then navigate to your project.
SelectArtifacts, select your feed from the dropdown menu, and then selectConnect to feed.
SelectArtifacts, select your feed from the dropdown menu, and then selectConnect to feed.
Selectpipunder thePythonsection.
Selectpipunder thePythonsection.
If this is your first time using Azure Artifacts with pip, selectGet the toolsand follow the steps to install the prerequisites.
If this is your first time using Azure Artifacts with pip, selectGet the toolsand follow the steps to install the prerequisites.
Create a virtual environment.
Create a virtual environment.
Add apip.inifile (Windows) orpip.conffile (Mac/Linux) to your virtual environment and paste the provided snippet into it. Your file should resemble the following:[global]
index-url=https://pkgs.dev.azure.com/ORGANIZATION_NAME/PROJECT_NAME/_packaging/FEED_NAME/pypi/simple/
Add apip.inifile (Windows) orpip.conffile (Mac/Linux) to your virtual environment and paste the provided snippet into it. Your file should resemble the following:
[global]
index-url=https://pkgs.dev.azure.com/ORGANIZATION_NAME/PROJECT_NAME/_packaging/FEED_NAME/pypi/simple/
[global]
index-url=https://pkgs.dev.azure.com/ORGANIZATION_NAME/PROJECT_NAME/_packaging/FEED_NAME/pypi/simple/
Publish packages
Run this command in your project directory to create source and wheel distributions:python setup.py sdist bdist_wheel
Run this command in your project directory to create source and wheel distributions:
python setup.py sdist bdist_wheel
python setup.py sdist bdist_wheel
Run the following command to publish your package. Use the -rFEED_NAMEflag to ensure your private packages are not accidentally published to PyPI.twine upload -r <FEED_NAME> dist/*
Run the following command to publish your package. Use the -rFEED_NAMEflag to ensure your private packages are not accidentally published to PyPI.
twine upload -r <FEED_NAME> dist/*
twine upload -r <FEED_NAME> dist/*
Install packages
Run this command in your project directory to install your packages:pip install
Run this command in your project directory to install your packages:
pip install
pip install
To install a specific package, run the following command, replacing the placeholder with the package name from your feed.pip install <PACKAGE_NAME>
To install a specific package, run the following command, replacing the placeholder with the package name from your feed.
pip install <PACKAGE_NAME>
pip install <PACKAGE_NAME>
Next steps
Use packages from Python package index (PyPI)Set up upstream sourcesPublish Python packages with Azure Pipelines
Feedback
Was this page helpful?
Additional resources