Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Create your first function in the Azure portal
Article
2024-09-11
14 contributors
In this article
Azure Functions lets you run your code in a serverless environment without having to first create a virtual machine (VM) or publish a web application. In this article, you learn how to use Azure Functions to create a "hello world" HTTP trigger function in the Azure portal.
Choose your preferred programming language at the top of the article.
Note
Editing your C# function code in the Azure portal is currently only supported forC# script (.csx) functions. To learn more about the limitations on editing function code in the Azure portal, seeDevelopment limitations in the Azure portal.
You should insteaddevelop your functions locallyand publish to a function app in Azure. Use one of the following links to get started with your chosen local development environment:
Visual Studio
Visual Studio Code
Terminal/command prompt
Note
Editing your Java function code in the Azure portal isn't currently supported. For more information, seeDevelopment limitations in the Azure portal.
You should insteaddevelop your functions locallyand publish to a function app in Azure. Use one of the following links to get started with your chosen local development environment:
Eclipse
Gradle
IntelliJ IDEA
Maven
Quarkus
Spring Cloud
Visual Studio Code
Note
Because ofdevelopment limitations in the Azure portal, you should insteaddevelop your functions locallyand publish to a function app in Azure. Use one of the following links to get started with your chosen local development environment:
Visual Studio Code
Terminal/command prompt
Note
Because ofdevelopment limitations in the Azure portal, you should insteaddevelop your functions locallyand publish to a function app in Azure. Use one of the following links to get started with your chosen local development environment:
Visual Studio Code
Terminal/command prompt
Note
Editing your TypeScript function code in the Azure portal isn't currently supported. For more information, seeDevelopment limitations in the Azure portal.
You should insteaddevelop your functions locallyand publish to a function app in Azure. Use one of the following links to get started with your chosen local development environment:
Visual Studio Code
Terminal/command prompt
Note
Because ofdevelopment limitations in the Azure portal, you should insteaddevelop your functions locallyand publish to a function app in Azure. Use one of the following links to get started with your chosen local development environment:
Visual Studio Code
Terminal/command prompt
Please review theknown issuesfor development of Azure Functions using Python in the Azure portal.
Prerequisites
If you don't have anAzure subscription, create anAzure free accountbefore you begin.
Sign in to Azure
Sign in to theAzure portalwith your Azure account.
Create a function app
You must have a function app to host the execution of your functions. A function app lets you group functions as a logical unit for easier management, deployment, scaling, and sharing of resources.
Use these steps to create your function app and related Azure resources, whether or not you're able to edit your code in the Azure portal.
To be able to create a C# script app that you can edit in the portal, choose8 (LTS), in-process modelfor .NETVersion.
From the Azure portal menu or theHomepage, selectCreate a resource.
From the Azure portal menu or theHomepage, selectCreate a resource.
In theNewpage, selectFunction App.
In theNewpage, selectFunction App.
UnderSelect a hosting option, selectConsumption>Selectto create your app in the defaultConsumptionplan. In thisserverlesshosting option, you pay only for the time your functions run.Premium planalso offers dynamic scaling. When you run in an App Service plan, you must manage thescaling of your function app.
UnderSelect a hosting option, selectConsumption>Selectto create your app in the defaultConsumptionplan. In thisserverlesshosting option, you pay only for the time your functions run.Premium planalso offers dynamic scaling. When you run in an App Service plan, you must manage thescaling of your function app.
On theBasicspage, use the function app settings as specified in the following table:SettingSuggested valueDescriptionSubscriptionYour subscriptionThe subscription under which you create your new function app.Resource GroupmyResourceGroupName for the new resource group in which you create your function app. You should create a new resource group because there areknown limitations when creating new function apps in an existing resource group.Function App nameGlobally unique nameName that identifies your new function app. Valid characters area-z(case insensitive),0-9, and-.Runtime stackPreferred languageChoose a runtime that supports your favorite function programming language. In-portal editing is only available for JavaScript, PowerShell, Python, TypeScript, and C# script.To create a C# Script app that supports in-portal editing, you must choose a runtimeVersionthat supports thein-process model.C# class library and Java functions must bedeveloped locally.VersionVersion numberChoose the version of your installed runtime.RegionPreferred regionSelect aregionthat's near you or near other services that your functions can access.Operating systemWindowsAn operating system is preselected for you based on your runtime stack selection, but you can change the setting if necessary. In-portal editing is only supported on Windows.
On theBasicspage, use the function app settings as specified in the following table:
a-z
0-9
-
Accept the default options in the remaining tabs, including the default behavior of creating a new storage account on theStoragetab and a new Application Insight instance on theMonitoringtab. You can also choose to use an existing storage account or Application Insights instance.
Accept the default options in the remaining tabs, including the default behavior of creating a new storage account on theStoragetab and a new Application Insight instance on theMonitoringtab. You can also choose to use an existing storage account or Application Insights instance.
SelectReview + createto review the app configuration you chose, and then selectCreateto provision and deploy the function app.
SelectReview + createto review the app configuration you chose, and then selectCreateto provision and deploy the function app.
Select theNotificationsicon in the upper-right corner of the portal and watch for theDeployment succeededmessage.
Select theNotificationsicon in the upper-right corner of the portal and watch for theDeployment succeededmessage.
SelectGo to resourceto view your new function app. You can also selectPin to dashboard. Pinning makes it easier to return to this function app resource from your dashboard.
SelectGo to resourceto view your new function app. You can also selectPin to dashboard. Pinning makes it easier to return to this function app resource from your dashboard.

Next, create a function in the new function app.
Create an HTTP trigger function
In your function app, selectOverview, and then select+ CreateunderFunctions. If you don't see the+ Createbutton, you must insteadcreate your functions locally.
In your function app, selectOverview, and then select+ CreateunderFunctions. If you don't see the+ Createbutton, you must insteadcreate your functions locally.
UnderSelect a template, scroll down and choose theHTTP triggertemplate.
UnderSelect a template, scroll down and choose theHTTP triggertemplate.
InTemplate details, useHttpExampleforNew Function, selectAnonymousfrom theAuthorization leveldrop-down list, and then selectCreate.Azure creates the HTTP trigger function. Now, you can run the new function by sending an HTTP request.
InTemplate details, useHttpExampleforNew Function, selectAnonymousfrom theAuthorization leveldrop-down list, and then selectCreate.
HttpExample
Azure creates the HTTP trigger function. Now, you can run the new function by sending an HTTP request.
Create your functions locally
If you aren't able to create your function code in the portal, you can instead create a local project and publish the function code to your new function app.
In your function app, selectOverview, and then inCreate functions in your preferred environmentunderFunctions.
In your function app, selectOverview, and then inCreate functions in your preferred environmentunderFunctions.
Choose your preferred local development environment and follow the steps in the linked article to create and publish your first Azure Functions project.TipWhen publishing your new project, make sure to use the function app and related resources you just created.
Choose your preferred local development environment and follow the steps in the linked article to create and publish your first Azure Functions project.
Tip
When publishing your new project, make sure to use the function app and related resources you just created.
Test the function
Tip
TheCode + Testfunctionality in the portal works even for functions that are read-only and can't be edited in the portal.
On theOverviewpage for your new function app, select your new HTTP triggered function in theFunctionstab.
On theOverviewpage for your new function app, select your new HTTP triggered function in theFunctionstab.
In the left menu, expandDeveloper, selectCode + Test, and then selectTest/Run.
In the left menu, expandDeveloper, selectCode + Test, and then selectTest/Run.
In theTest/Rundialog, selectRun.An HTTP POST request is sent to your new function with a payload that contains thenamevalue ofAzure. You can also test the function by selectingGETforHTTP methodand adding anameparameter with a value ofYOUR_NAME.TipTo test in an external browser, instead selectGet function URL, copy thedefault (Function key)value, add the query string value&name=<YOUR_NAME>to the end of this URL, and then submit the URL in the address bar of your web browser.
In theTest/Rundialog, selectRun.
An HTTP POST request is sent to your new function with a payload that contains thenamevalue ofAzure. You can also test the function by selectingGETforHTTP methodand adding anameparameter with a value ofYOUR_NAME.
name
Azure
name
YOUR_NAME
Tip
To test in an external browser, instead selectGet function URL, copy thedefault (Function key)value, add the query string value&name=<YOUR_NAME>to the end of this URL, and then submit the URL in the address bar of your web browser.
&name=<YOUR_NAME>
When your function runs, trace information is written to the logs. To see the trace output, return to theCode + Testpage in the portal and expand theLogsarrow at the bottom of the page. Call your function again to see the trace output written to the logs.
When your function runs, trace information is written to the logs. To see the trace output, return to theCode + Testpage in the portal and expand theLogsarrow at the bottom of the page. Call your function again to see the trace output written to the logs.
Clean up resources
Other quickstarts in this collection build upon this quickstart. If you plan to work with subsequent quickstarts, tutorials, or with any of the services you've created in this quickstart, don't clean up the resources.
Resourcesin Azure refer to function apps, functions, storage accounts, and so forth. They're grouped intoresource groups, and you can delete everything in a group by deleting the group.
You've created resources to complete these quickstarts. You might be billed for these resources, depending on youraccount statusandservice pricing. If you don't need the resources anymore, here's how to delete them:
In the Azure portal, go to theResource grouppage.To get to that page from the function app page, select theOverviewtab, and then select the link underResource group.To get to that page from the dashboard, selectResource groups, and then select the resource group that you used for this article.
In the Azure portal, go to theResource grouppage.
To get to that page from the function app page, select theOverviewtab, and then select the link underResource group.

To get to that page from the dashboard, selectResource groups, and then select the resource group that you used for this article.
In theResource grouppage, review the list of included resources, and verify that they're the ones you want to delete.
In theResource grouppage, review the list of included resources, and verify that they're the ones you want to delete.
SelectDelete resource groupand follow the instructions.Deletion might take a couple of minutes. When it's done, a notification appears for a few seconds. You can also select the bell icon at the top of the page to view the notification.
SelectDelete resource groupand follow the instructions.
Deletion might take a couple of minutes. When it's done, a notification appears for a few seconds. You can also select the bell icon at the top of the page to view the notification.
Next steps
Now that you've created your first function, let's add an output binding to the function that writes a message to a Storage queue.
Add messages to an Azure Storage queue using Functions
Feedback
Was this page helpful?
Additional resources