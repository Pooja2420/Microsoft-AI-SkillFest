Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Performance Efficiency design principles
Article
2023-11-15
4 contributors
In this article
Performance efficiency is the ability of your workload to adjust to changes in demands. A workload must be able tohandle an increase in load without compromising user experience. Conversely,when there's a decrease in load, the workload must conserve its resources. Capacity, which indicates resource availability (CPU and memory), is a significant factor.
The workload design shouldn't just rely on pre-provisioned capacity, which guarantees performance up to a certain limit. If that limit is exceeded, the workload might have performance issues or even experience outages. When load is under that limit, resources continue to run unnecessarily, incurring costs.
You need a comprehensive strategy to sustain performance targets over time. Performance considerations shouldn't be an afterthought in the design process, only to be addressed when issues arise in production. Instead,adopt a mindset where performance is a key consideration from the early stages of design. Initially, build the system without any specific performance targets. But from there, test and measure performance at each stage of development to ensure progress and effectiveness. Continual optimization of these targets throughout the process and incorporating lessons learned from production can significantly mitigate potential issues in advance.
These design principles can helpbuild your strategy for managing capacityof resources to sufficiently meet your business requirements for expected usage. Also, reduce waste during off-peak hours. After you've decided on a strategy, solidify your design by using thePerformance Efficiency checklist.
Performance efficiency is about effective use of workload resources. Without a good strategy, you might not be able to anticipate and meet user demands. You might have to resort to an approach of long-term forecasting and pre-provisioned capacity, which doesn't let you take full advantage of your cloud platform.
Negotiate realistic performance targets
From a performance perspective, it's ideal to have well-defined performance targets to start your design process. To set those targets, you need to have a good understanding of the business requirements and the anticipated quality of service that the workload is expected to deliver. Define the expectations in collaboration with the business stakeholders. Instead of only focusing on technical metrics, determine the acceptable effects on the user experience for the key flows.
There's a circular dependency. You can't measure what you haven't defined, and you can't define without measurement. So, it's also important tomeasure the workload performance until you achieve a satisfactory definition of acceptable thresholdwith collective agreement.
There's a strong correlation between performance and reliability targets, which help determine the quality of service in terms of performance, availability, and resilience. Without a clear definition, it's challenging to measure, alert for, and test performance. After you establish the targets and identify actual numbers through testing over time, you can implement automation for continuous testing against these targets.
Adhere to best practices in defining targets at the macro level, even if they're approximate or within a range.
Design to meet capacity requirements
It's important to proactively measure performance. Measuring performance involvesmeasuring baselinesand having a preliminary understanding of which components of the system are likely to pose challenges. You can achieve it without conducting a full performance test or through granular optimization. By taking these initial steps, you establish a foundation for effective performance management early in the development lifecycle.
Examine the system as a whole, rather than focusing on individual components. Avoid fine-tuning at this stage. Making granular performance improvements results in tradeoffs in other areas. As you progress through the lifecycle and begin user acceptance testing or move toward production, you can quickly identify which areas require further optimization.
Achieve and sustain performance
Development isn't a one-time effort. It's an ongoing process. Expect changes in performance as features change. There's variance in user patterns and profiles, even changes from optimizations in other Azure Well-Architected pillars. Any change can strain workload resources.
Safeguard the system from changesso that it doesn't slide back on performance targets.Integrate testing and monitoring in the development process. Test the system's performance in production with real load and simulate that load with automated testing prior to production. In both cases, you should have monitoring practices in place for verification purposes.
Throughout the development lifecycle,conduct various types of tests at different stages. In the initial stages, test the proof of concept to make sure performance results aren't entirely unexpected. As development progresses, conductmanual, low-effort teststo establish benchmarks. In the build stage, start developingautomated routine performance teststhat evaluate latency, stress levels, load capacity, and other characteristics defined in the test plans.
Monitoring must be an integral part of that effort, rather than being an isolated exercise. You cansee how the system and its resources perform over time. You can then fine-tune them to maximize their value, and ensure they continue to meet performance standards.
Keep in mind that performance targets vary over time, in response to changes. Update the performance model based on tested and monitored metrics. Clearly indicate increased, reduced, or no effect on the performance of the flows.
Always be ready to renegotiate and reset expectations with business stakeholders.
Improve efficiency through optimization
The targets set during the initial phase are based on a reasonable level of user experience, considering various constraints. You shouldreassess and adjust targets to further enhance the experience. To further enhance the experience, it requires a clear understanding of how the system is used, how it has evolved, and how the platform or technology has changed over time. The cycle of monitoring, optimizing, testing, and deploying is a continuous process.
Efficiency optimization efforts allow a workload to work with lower resource consumption. They can cause the workload to be in an overprovisioned state with spare capacity. Use that capacity to improve reliability of the system. Eliminate capacity to improve the cost of the system. Or repurpose the capacity to support new product features on existing resources.
When the system gains efficiencies, take the opportunity to set and maintain new performance targets.
Next steps
Performance Efficiency checklist
Feedback
Was this page helpful?
Additional resources