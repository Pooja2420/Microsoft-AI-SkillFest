Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Add and manage TLS/SSL certificates in Azure App Service
Article
2025-02-14
32 contributors
In this article

Note
Starting June 1, 2024, newly created App Service apps can generate a unique default host name that uses the naming convention<app-name>-<random-hash>.<region>.azurewebsites.net. For example:myapp-ds27dh7271aah175.westus-01.azurewebsites.net. Existing app names remain unchanged.
<app-name>-<random-hash>.<region>.azurewebsites.net
myapp-ds27dh7271aah175.westus-01.azurewebsites.net
For more information, see theblog post about creating a web app with a unique default host name.
You can add digital security certificates touse in your application codeor tohelp secure custom DNS namesinAzure App Service, which provides a highly scalable, self-patching web hosting service. Currently called Transport Layer Security (TLS) certificates, also previously known as Secure Socket Layer (SSL) certificates, these private or public certificates help you secure internet connections by encrypting data sent between your browser, websites that you visit, and the website server.
The following table lists the options for you to add certificates in App Service:
Prerequisites
Create an App Service app. The app'sApp Service planmust be in theBasic,Standard,Premium, orIsolatedtier. SeeScale up an appto update the tier.
Create an App Service app. The app'sApp Service planmust be in theBasic,Standard,Premium, orIsolatedtier. SeeScale up an appto update the tier.
For a private certificate, make sure that it satisfies allrequirements from App Service.
For a private certificate, make sure that it satisfies allrequirements from App Service.
Free certificate only:Map the domain where you want the certificate to App Service. For information, seeTutorial: Map an existing custom DNS name to Azure App Service.For a root domain (like contoso.com), make sure your app doesn't have anyIP restrictionsconfigured. Both certificate creation and its periodic renewal for a root domain depend on your app being reachable from the internet.
Free certificate only:
Map the domain where you want the certificate to App Service. For information, seeTutorial: Map an existing custom DNS name to Azure App Service.
Map the domain where you want the certificate to App Service. For information, seeTutorial: Map an existing custom DNS name to Azure App Service.
For a root domain (like contoso.com), make sure your app doesn't have anyIP restrictionsconfigured. Both certificate creation and its periodic renewal for a root domain depend on your app being reachable from the internet.
For a root domain (like contoso.com), make sure your app doesn't have anyIP restrictionsconfigured. Both certificate creation and its periodic renewal for a root domain depend on your app being reachable from the internet.
Private certificate requirements
Thefree App Service managed certificateand theApp Service certificatealready satisfy the requirements of App Service. If you choose to upload or import a private certificate to App Service, your certificate must meet the following requirements:
Exported as apassword-protected PFX file, encrypted using triple DES
Contains private key at least 2048 bits long
Contains all intermediate certificates and the root certificate in the certificate chain
If you want to help secure a custom domain in a TLS binding, the certificate must meet these additional requirements:
Contains anExtended Key Usagefor server authentication (OID = 1.3.6.1.5.5.7.3.1)
Signed by a trusted certificate authority
Note
Elliptic Curve Cryptography (ECC) certificateswork with App Service but aren't covered by this article. For the exact steps to create ECC certificates, work with your certificate authority.
Note
After you add a private certificate to an app, the certificate is stored in a deployment unit that's bound to the App Service plan's resource group, region, and operating system combination, internally called awebspace. That way, the certificate is accessible to other apps in the same resource group, region, and OS combination. Private certificates uploaded or imported to App Service are shared with App Services in the same deployment unit.
You can add up to 1000 private certificates per webspace.
Create a free managed certificate
The free App Service managed certificate is a turn-key solution for helping to secure your custom DNS name in App Service. Without any action from you, this TLS/SSL server certificate is fully managed by App Service and is automatically renewed continuously in six-month increments, 45 days before expiration, as long as the prerequisites that you set up stay the same. All the associated bindings are updated with the renewed certificate. You create and bind the certificate to a custom domain, and let App Service do the rest.
Important
Before you create a free managed certificate, make sure you havemet the prerequisitesfor your app.
Free certificates are issued by DigiCert. For some domains, you must explicitly allow DigiCert as a certificate issuer by creating aCAA domain recordwith the value:0 issue digicert.com.
0 issue digicert.com
Azure fully manages the certificates on your behalf, so any aspect of the managed certificate, including the root issuer, can change at anytime. Certificate renewals change both public and private key parts.  All of these certificate changes are outside your control. Make sure to avoid hard dependencies and "pinning" practice certificates to the managed certificate or any part of the certificate hierarchy. If you need the certificate pinning behavior, add a certificate to your custom domain using any other available method in this article.
The free certificate comes with the following limitations:
Doesn't support wildcard certificates.
Doesn't support usage as a client certificate by using certificate thumbprint, which is planned for deprecation and removal.
Doesn't support private DNS.
Isn't exportable.
Isn't supported in an App Service Environment.
Only supports alphanumeric characters, dashes (-), and periods (.).
Only custom domains of length up to 64 characters are supported.
Apex domain
Subdomain
Must have an A record pointing to your web app's IP address.
Must be on apps that are publicly accessible.
Isn't supported with root domains that are integrated with Traffic Manager.
Must meet all of the above for successful certificate issuances and renewals.
Must have CNAME mappeddirectlyto<app-name>.azurewebsites.netortrafficmanager.net. Mapping to an intermediate CNAME value blocks certificate issuance and renewal.
<app-name>.azurewebsites.net
Must be on apps that are publicly accessible.
Must meet all the above for successful certificate issuance and renewals.
In theAzure portal, from the left menu, selectApp Services><app-name>.
In theAzure portal, from the left menu, selectApp Services><app-name>.
On your app's navigation menu, selectCertificates. In theManaged certificatespane, selectAdd certificate.
On your app's navigation menu, selectCertificates. In theManaged certificatespane, selectAdd certificate.

Select the custom domain for the free certificate, and then selectValidate. When validation completes, selectAdd. You can create only one managed certificate for each supported custom domain.When the operation completes, the certificate appears in theManaged certificateslist.
Select the custom domain for the free certificate, and then selectValidate. When validation completes, selectAdd. You can create only one managed certificate for each supported custom domain.
When the operation completes, the certificate appears in theManaged certificateslist.

To provide security for a custom domain with this certificate, you still have to create a certificate binding. Follow the steps inSecure a custom DNS name with a TLS/SSL binding in Azure App Service.
To provide security for a custom domain with this certificate, you still have to create a certificate binding. Follow the steps inSecure a custom DNS name with a TLS/SSL binding in Azure App Service.
Import an App Service certificate
To import an App Service certificate, firstbuy and configure an App Service certificate, and then follow the steps here.
In theAzure portal, from the left menu, selectApp Services><app-name>.
In theAzure portal, from the left menu, selectApp Services><app-name>.
From your app's navigation menu, selectCertificates>Bring your own certificates (.pfx)>Add certificate.
From your app's navigation menu, selectCertificates>Bring your own certificates (.pfx)>Add certificate.
In Source, selectImport App Service Certificate.
In Source, selectImport App Service Certificate.
InApp Service certificate, select the certificate you just created.
InApp Service certificate, select the certificate you just created.
InCertificate friendly name, give the certificate a name in your app.
InCertificate friendly name, give the certificate a name in your app.
SelectValidate. When validation succeeds, selectAdd.When the operation completes, the certificate appears in theBring your own certificateslist.
SelectValidate. When validation succeeds, selectAdd.

When the operation completes, the certificate appears in theBring your own certificateslist.

To help secure a custom domain with this certificate, you still have to create a certificate binding. Follow the steps inSecure a custom DNS name with a TLS/SSL binding in Azure App Service.
To help secure a custom domain with this certificate, you still have to create a certificate binding. Follow the steps inSecure a custom DNS name with a TLS/SSL binding in Azure App Service.
Import a certificate from Key Vault
If you use Azure Key Vault to manage your certificates, you can import a PKCS12 certificate into App Service from Key Vault if you met therequirements.
Authorize App Service to read from the vault
By default, the App Service resource provider doesn't have access to your key vault. To use a key vault for a certificate deployment, you must authorize read access for the resource provider (App Service) to the key vault. You can grant access either with access policy or RBAC.
RBAC permissions
Access policy permissions
abfa0a7c-a6b6-4736-8310-5855508787cd
6a02c803-dafd-4136-b4c3-5a6f318b4714
The service principal app ID or assignee value is the ID for the App Service resource provider. Note that when granting access using RBAC, the corresponding Object ID of the service principal app ID is tenant-specific. To learn how to authorize key vault permissions for the App Service resource provider using an access policy, see theprovide access to Key Vault keys, certificates, and secrets with an Azure role-based access control documentation.
abfa0a7c-a6b6-4736-8310-5855508787cd
6a02c803-dafd-4136-b4c3-5a6f318b4714
The service principal app ID or assignee value is the ID for the App Service resource provider. To learn how to authorize key vault permissions for the App Service resource provider using an access policy, see theassign a Key Vault access policy documentation.
Note
Do not delete these access policy permissions from key vault. If you do, App Service will not be able to sync your web app with the latest key vault certificate version.
If key vault is configured to disable public access, ensure that Microsoft services have access by checking the 'Allow trusted Microsoft services to bypass this firewall' checkbox. SeeKey Vault firewall enabled trusted services onlydocumentation for more information.
Azure CLI
Azure PowerShell
az role assignment create --role "Key Vault Certificate User" --assignee "abfa0a7c-a6b6-4736-8310-5855508787cd" --scope "/subscriptions/{subscriptionid}/resourcegroups/{resource-group-name}/providers/Microsoft.KeyVault/vaults/{key-vault-name}"
az role assignment create --role "Key Vault Certificate User" --assignee "abfa0a7c-a6b6-4736-8310-5855508787cd" --scope "/subscriptions/{subscriptionid}/resourcegroups/{resource-group-name}/providers/Microsoft.KeyVault/vaults/{key-vault-name}"
#Assign by Service Principal ApplicationId
New-AzRoleAssignment -RoleDefinitionName "Key Vault Certificate User" -ApplicationId "abfa0a7c-a6b6-4736-8310-5855508787cd" -Scope "/subscriptions/{subscriptionid}/resourcegroups/{resource-group-name}/providers/Microsoft.KeyVault/vaults/{key-vault-name}"
#Assign by Service Principal ApplicationId
New-AzRoleAssignment -RoleDefinitionName "Key Vault Certificate User" -ApplicationId "abfa0a7c-a6b6-4736-8310-5855508787cd" -Scope "/subscriptions/{subscriptionid}/resourcegroups/{resource-group-name}/providers/Microsoft.KeyVault/vaults/{key-vault-name}"
Note
Do not delete these RBAC permissions from key vault. If you do, App Service will not be able to sync your web app with the latest key vault certificate version.
Import a certificate from your vault to your app
In theAzure portal, from the left menu, selectApp Services><app-name>.
In theAzure portal, from the left menu, selectApp Services><app-name>.
From your app's navigation menu, selectCertificates>Bring your own certificates (.pfx)>Add certificate.
From your app's navigation menu, selectCertificates>Bring your own certificates (.pfx)>Add certificate.
In Source, selectImport from Key Vault.
In Source, selectImport from Key Vault.
SelectSelect key vault certificate.
SelectSelect key vault certificate.

To help you select the certificate, use the following table:SettingDescriptionSubscriptionThe subscription associated with the key vault.Key vaultThe key vault that has the certificate you want to import.CertificateFrom this list, select a PKCS12 certificate that's in the vault. All PKCS12 certificates in the vault are listed with their thumbprints, but not all are supported in App Service.
To help you select the certificate, use the following table:
When finished with your selection, selectSelect,Validate, and thenAdd.When the operation completes, the certificate appears in theBring your own certificateslist. If the import fails with an error, the certificate doesn't meet therequirements for App Service.NoteIf you update your certificate in Key Vault with a new certificate, App Service automatically syncs your certificate within 24 hours.
When finished with your selection, selectSelect,Validate, and thenAdd.
When the operation completes, the certificate appears in theBring your own certificateslist. If the import fails with an error, the certificate doesn't meet therequirements for App Service.

Note
If you update your certificate in Key Vault with a new certificate, App Service automatically syncs your certificate within 24 hours.
To help secure custom domain with this certificate, you still have to create a certificate binding. Follow the steps inSecure a custom DNS name with a TLS/SSL binding in Azure App Service.
To help secure custom domain with this certificate, you still have to create a certificate binding. Follow the steps inSecure a custom DNS name with a TLS/SSL binding in Azure App Service.
Upload a private certificate
After you get a certificate from your certificate provider, make the certificate ready for App Service by following the steps in this section.
If your certificate authority gives you multiple certificates in the certificate chain, you must merge the certificates following the same order.
In a text editor, open each received certificate.
In a text editor, open each received certificate.
To store the merged certificate, create a file namedmergedcertificate.crt.
To store the merged certificate, create a file namedmergedcertificate.crt.
Copy the content for each certificate into this file. Make sure to follow the certificate sequence specified by the certificate chain, starting with your certificate and ending with the root certificate, for example:-----BEGIN CERTIFICATE-----
<your entire Base64 encoded SSL certificate>
-----END CERTIFICATE-----

-----BEGIN CERTIFICATE-----
<The entire Base64 encoded intermediate certificate 1>
-----END CERTIFICATE-----

-----BEGIN CERTIFICATE-----
<The entire Base64 encoded intermediate certificate 2>
-----END CERTIFICATE-----

-----BEGIN CERTIFICATE-----
<The entire Base64 encoded root certificate>
-----END CERTIFICATE-----
Copy the content for each certificate into this file. Make sure to follow the certificate sequence specified by the certificate chain, starting with your certificate and ending with the root certificate, for example:
-----BEGIN CERTIFICATE-----
<your entire Base64 encoded SSL certificate>
-----END CERTIFICATE-----

-----BEGIN CERTIFICATE-----
<The entire Base64 encoded intermediate certificate 1>
-----END CERTIFICATE-----

-----BEGIN CERTIFICATE-----
<The entire Base64 encoded intermediate certificate 2>
-----END CERTIFICATE-----

-----BEGIN CERTIFICATE-----
<The entire Base64 encoded root certificate>
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
<your entire Base64 encoded SSL certificate>
-----END CERTIFICATE-----

-----BEGIN CERTIFICATE-----
<The entire Base64 encoded intermediate certificate 1>
-----END CERTIFICATE-----

-----BEGIN CERTIFICATE-----
<The entire Base64 encoded intermediate certificate 2>
-----END CERTIFICATE-----

-----BEGIN CERTIFICATE-----
<The entire Base64 encoded root certificate>
-----END CERTIFICATE-----
Now, export your merged TLS/SSL certificate with the private key that was used to generate your certificate request. If you generated your certificate request using OpenSSL, then you created a private key file.
Note
OpenSSL v3 changed the default cipher from 3DES to AES256, but this can be overridden on the command line: -keypbe PBE-SHA1-3DES -certpbe PBE-SHA1-3DES -macalg SHA1.
OpenSSL v1 uses 3DES as the default, so the PFX files generated are supported without any special modifications.
To export your certificate to a PFX file, run the following command, but replace the placeholders<private-key-file>and<merged-certificate-file>with the paths to your private key and your merged certificate file.openssl pkcs12 -export -out myserver.pfx -inkey <private-key-file> -in <merged-certificate-file>
To export your certificate to a PFX file, run the following command, but replace the placeholders<private-key-file>and<merged-certificate-file>with the paths to your private key and your merged certificate file.
openssl pkcs12 -export -out myserver.pfx -inkey <private-key-file> -in <merged-certificate-file>
openssl pkcs12 -export -out myserver.pfx -inkey <private-key-file> -in <merged-certificate-file>
When you're prompted, specify a password for the export operation. When you upload your TLS/SSL certificate to App Service later, you must provide this password.
When you're prompted, specify a password for the export operation. When you upload your TLS/SSL certificate to App Service later, you must provide this password.
If you used IIS orCertreq.exeto generate your certificate request, install the certificate to your local computer, and thenexport the certificate to a PFX file.
If you used IIS orCertreq.exeto generate your certificate request, install the certificate to your local computer, and thenexport the certificate to a PFX file.
You're now ready upload the certificate to App Service.
In theAzure portal, from the left menu, selectApp Services><app-name>.
In theAzure portal, from the left menu, selectApp Services><app-name>.
From your app's navigation menu, selectCertificates>Bring your own certificates (.pfx)>Upload Certificate.
From your app's navigation menu, selectCertificates>Bring your own certificates (.pfx)>Upload Certificate.

To help you upload the .pfx certificate, use the following table:SettingDescriptionPFX certificate fileSelect your .pfx file.Certificate passwordEnter the password that you created when you exported the PFX file.Certificate friendly nameThe certificate name that will be shown in your web app.
To help you upload the .pfx certificate, use the following table:
When finished with your selection, selectSelect,Validate, and thenAdd.When the operation completes, the certificate appears in theBring your own certificateslist.
When finished with your selection, selectSelect,Validate, and thenAdd.
When the operation completes, the certificate appears in theBring your own certificateslist.

To provide security for a custom domain with this certificate, you still have to create a certificate binding. Follow the steps inSecure a custom DNS name with a TLS/SSL binding in Azure App Service.
To provide security for a custom domain with this certificate, you still have to create a certificate binding. Follow the steps inSecure a custom DNS name with a TLS/SSL binding in Azure App Service.
Upload a public certificate
Public certificates are supported in the.cerformat.
Note
After you upload a public certificate to an app, it's only accessible by the app it's uploaded to. Public certificates must be uploaded to each individual web app that needs access. For App Service Environment specific scenarios, refer tothe documentation for certificates and the App Service Environment.
You can upload up to 1000 public certificates per App Service Plan.
In theAzure portal, from the left menu, selectApp Services><app-name>.
In theAzure portal, from the left menu, selectApp Services><app-name>.
From your app's navigation menu, selectCertificates>Public key certificates (.cer)>Add certificate.
From your app's navigation menu, selectCertificates>Public key certificates (.cer)>Add certificate.
To help you upload the .cer certificate, use the following table:SettingDescriptionCER certificate fileSelect your .cer file.Certificate friendly nameThe certificate name that will be shown in your web app.
To help you upload the .cer certificate, use the following table:
When you're done, selectAdd.
When you're done, selectAdd.

After the certificate is uploaded, copy the certificate thumbprint, and then reviewMake the certificate accessible.
After the certificate is uploaded, copy the certificate thumbprint, and then reviewMake the certificate accessible.
Renew an expiring certificate
Before a certificate expires, make sure to add the renewed certificate to App Service, and update any certificate bindings where the process depends on the certificate type. For example, acertificate imported from Key Vault, including anApp Service certificate, automatically syncs to App Service every 24 hours and updates the TLS/SSL binding when you renew the certificate. For anuploaded certificate, there's no automatic binding update. Based on your scenario, review the corresponding section:
Renew an uploaded certificate
Renew an App Service certificate
Renew a certificate imported from Key Vault
When you replace an expiring certificate, the way you update the certificate binding with the new certificate might adversely affect the user experience. For example, your inbound IP address might change when you delete a binding, even if that binding is IP-based. This result is especially impactful when you renew a certificate that's already in an IP-based binding. To avoid a change in your app's IP address, and to avoid downtime for your app due to HTTPS errors, follow these steps in the specified sequence:
Upload the new certificate.
Upload the new certificate.
Go to theCustom domainspage for your app, select the...button, and then selectUpdate binding.
Go to theCustom domainspage for your app, select the...button, and then selectUpdate binding.
Select the new certificate and then selectUpdate.
Select the new certificate and then selectUpdate.
Delete the existing certificate.
Delete the existing certificate.
Note
To renew an App Service certificate, seeRenew an App Service certificate.
To renew a certificate that you imported into App Service from Key Vault, reviewRenew your Azure Key Vault certificate.
After the certificate renews in your key vault, App Service automatically syncs the new certificate and updates any applicable certificate binding within 24 hours. To sync manually, follow these steps:
Go to your app'sCertificatepage.
Go to your app'sCertificatepage.
UnderBring your own certificates (.pfx), select the...button for the imported key vault certificate, and then selectSync.
UnderBring your own certificates (.pfx), select the...button for the imported key vault certificate, and then selectSync.
Frequently asked questions
How can I automate adding a bring-your-own certificate to an app?
Azure CLI: Bind a custom TLS/SSL certificate to a web app
Azure PowerShell: Bind a custom TLS/SSL certificate to a web app using PowerShell
Can I use a private CA (certificate authority) certificate for inbound TLS on my app?
You can use a private CA certificate for inbound TLS inApp Service Environment version 3. This isn't possible in App Service (multitenant). For more information on App Service multitenant vs. single-tenant, seeApp Service Environment v3 and App Service public multitenant comparison.
Can I make outbound calls using a private CA client certificate from my app?
This is only supported for Windows container apps in multitenant App Service. In addition, you can make outbound calls using a private CA client certificate with both code-based and container-based apps inApp Service Environment version 3. For more information on App Service multitenant vs. single-tenant, seeApp Service Environment v3 and App Service public multitenant comparison.
Can I load a private CA certificate in my App Service Trusted Root Store?
You can load your own CA certificate into the Trusted Root Store inApp Service Environment version 3. You can't modify the list of Trusted Root Certificates in App Service (multitenant). For more information on App Service multitenant vs. single-tenant, seeApp Service Environment v3 and App Service public multitenant comparison.
Can App Service Certificate be used for other services?
Yes, certificates purchased via App Service Certificate can be exported and used with Application Gateway or other services. Refer to the following blog article for more information:Creating a local PFX copy of App Service Certificate.
More resources
Secure a custom DNS name with a TLS/SSL binding in Azure App Service
Enforce HTTPS
Enforce TLS 1.1/1.2
Use a TLS/SSL certificate in your code in Azure App Service
FAQ: App Service Certificates
Feedback
Was this page helpful?
Additional resources