Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Best practices for Kusto Query Language queries
Article
2024-11-13
17 contributors
In this article
Applies to: âMicrosoft FabricâAzure Data ExplorerâAzure MonitorâMicrosoft Sentinel
Here are several best practices to follow to make your query run faster.
In short
where
datetime
datetime
long
unixtime_milliseconds_todatetime()
datetime
has
contains
has
==
=~
in
in~
contains_cs
contains
has
has_cs
contains
contains_cs
*
*
MyTable | where DynamicColumn has "Rare value" | where DynamicColumn.SomeKey == "Rare value"
MyTable | where DynamicColumn.SomeKey == "Rare value"
let
materialize()
limit [small number]
count
Col =~ "lowercasestring"
tolower(Col) == "lowercasestring"
Col == "lowercasestring"
Col == "UPPERCASESTRING"
T | where predicate(*Expression*)
T | extend _value = *Expression* | where predicate(_value)
group by keys
summarize
in
join
join
extract()
"Time = <time>, ResourceId = <resourceId>, Duration = <duration>, ...."
materialized_view()
materialized_view('MV')
Reduce the amount of data being processed
A query's performance depends directly on the amount of data it needs to process.
The less data is processed, the quicker the query (and the fewer resources it consumes).
Therefore, the most important best-practice is to structure the query in such a way that
reduces the amount of data being processed.
Note
In the following discussion, it is important to have in mind the concept offilter selectivity.
Selectivity is what percentage of the records get filtered-out when filtering by some predicate.
A highly-selective predicate means that only a handful of records remain after applying
the predicate, reducing the amount of data that needs to then be processed effectively.
In order of importance:
Only reference tables whose data is needed by the query. For example, when using theunionoperator with wildcard table references, it's better from a performance point-of-view
to only reference a handful of tables, instead of using a wildcard (*) to reference all tables
and then filter data out using a predicate on the source table name.
Only reference tables whose data is needed by the query. For example, when using theunionoperator with wildcard table references, it's better from a performance point-of-view
to only reference a handful of tables, instead of using a wildcard (*) to reference all tables
and then filter data out using a predicate on the source table name.
union
*
Take advantage of a table's data scope if the query is relevant only for a specific scope.
Thetable() functionprovides an efficient way to eliminate data
by scoping it according to the caching policy (theDataScopeparameter).
Take advantage of a table's data scope if the query is relevant only for a specific scope.
Thetable() functionprovides an efficient way to eliminate data
by scoping it according to the caching policy (theDataScopeparameter).
Apply thewherequery operator immediately following table references.
Apply thewherequery operator immediately following table references.
where
When using thewherequery operator, the order in which you place the predicates, whether you use a singlewhereoperator, or multiple consecutivewhereoperators,
can have a significant effect on the query performance.
When using thewherequery operator, the order in which you place the predicates, whether you use a singlewhereoperator, or multiple consecutivewhereoperators,
can have a significant effect on the query performance.
where
where
where
Apply predicates that act upondatetimetable columns first. Kusto includes an efficient index on such columns,
often completely eliminating whole data shards without needing to access those shards.
Apply predicates that act upondatetimetable columns first. Kusto includes an efficient index on such columns,
often completely eliminating whole data shards without needing to access those shards.
datetime
Then apply predicates that act uponstringanddynamiccolumns, especially such predicates
that apply at the term-level. Order the predicates by the selectivity. For example,
searching for a user ID when there are millions of users is highly selective and usually involves a term search, for which the index is very efficient.
Then apply predicates that act uponstringanddynamiccolumns, especially such predicates
that apply at the term-level. Order the predicates by the selectivity. For example,
searching for a user ID when there are millions of users is highly selective and usually involves a term search, for which the index is very efficient.
string
dynamic
Then apply predicates that are selective and are based on numeric columns.
Then apply predicates that are selective and are based on numeric columns.
Last, for queries that scan a table column's data (for example, for predicates such ascontains"@!@!", that have no terms and don't benefit from indexing), order the predicates such that the ones that scan columns with less data are first. Doing so reduces the need to decompress and scan large columns.
Last, for queries that scan a table column's data (for example, for predicates such ascontains"@!@!", that have no terms and don't benefit from indexing), order the predicates such that the ones that scan columns with less data are first. Doing so reduces the need to decompress and scan large columns.
contains
"@!@!"
Avoid using redundant qualified references
Reference entities such as tables and materialized views by name.
For example, the tableTcan be referenced as simplyT(theunqualifiedname), or by using a database qualifier (for example,database("DB").Twhen the table is in a database calledDB), or by using a fully qualified name (for example,cluster("<serviceURL>").database("DB").T).
T
T
database("DB").T
DB
cluster("<serviceURL>").database("DB").T
For example, the tableTcan be referenced as simplyT(theunqualifiedname), or by using a database qualifier (for example,database("DB").Twhen the table is in a database calledDB), or by using a fully qualified name (for example,cluster("X.Y.kusto.windows.net").database("DB").T).
T
T
database("DB").T
DB
cluster("X.Y.kusto.windows.net").database("DB").T
It's a best practice to avoid using name qualifications when they're redundant, for the following reasons:
Unqualified names are easier to identify (for a human reader) as belonging to the database-in-scope.
Unqualified names are easier to identify (for a human reader) as belonging to the database-in-scope.
Referencing database-in-scope entities is always at least as fast, and in some cases much faster, then entities that belong to other databases.
Referencing database-in-scope entities is always at least as fast, and in some cases much faster, then entities that belong to other databases.
This is especially true when those databases are in a different cluster.
This is especially true when those databases are in a different Eventhouse.
Avoiding qualified names helps the reader to do the right thing.
Note
This doesn't mean that qualified names are bad for performance. In fact, Kusto is able in most cases to identify when a fully qualified name
references an entity that belongs to the database-in-scope and "short-circuit" the query so that it's not regarded as a cross-cluster query.
However, we don't recommend relying on this when not necessary.
Note
This doesn't mean that qualified names are bad for performance. In fact, Kusto is able in most cases to identify when a fully qualified name
references an entity belonging to the database-in-scope.
However, we don't recommend relying on this when not necessary.
Feedback
Was this page helpful?
Additional resources