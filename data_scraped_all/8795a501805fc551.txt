Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Connect to an SQL database from workflows in Azure Logic Apps
Article
2024-08-06
19 contributors
In this article
Applies to:Azure Logic Apps (Consumption + Standard)
This how-to guide shows how to access your SQL database from a workflow in Azure Logic Apps with the SQL Server connector. You can then create automated workflows that run when triggered by events in your SQL database or in other systems and run actions to manage your SQL data and resources.
For example, your workflow can run actions that get, insert, and delete data or that can run SQL queries and stored procedures. Your workflow can check for new records in a non-SQL database, do some processing work, use the results to create new records in your SQL database, and send email alerts about the new records.
If you're new to Azure Logic Apps, review the following get started documentation:
What is Azure Logic Apps
What is Azure Logic Apps
Create an example Consumption logic app workflow in multitenant Azure Logic Apps
Create an example Consumption logic app workflow in multitenant Azure Logic Apps
Create an example Standard logic app workflow in single-tenant Azure Logic Apps
Create an example Standard logic app workflow in single-tenant Azure Logic Apps
Supported SQL editions
The SQL Server connector supports the following SQL editions:
SQL Server
Azure SQL Database
Azure SQL Managed Instance
Connector technical reference
The SQL Server connector has different versions, based onlogic app type and host environment.
Limitations
For more information, review theSQL Server managed connector referenceor theSQL Server built-in connector reference.
Prerequisites
An Azure account and subscription. If you don't have a subscription,sign up for a free Azure account.
An Azure account and subscription. If you don't have a subscription,sign up for a free Azure account.
SQL Server database,Azure SQL Database, orSQL Managed Instance.The SQL Server connector requires that your tables contain data so that the connector operations can return results when called. For example, if you use Azure SQL Database, you can use the included sample databases to try the SQL Server connector operations.
SQL Server database,Azure SQL Database, orSQL Managed Instance.
The SQL Server connector requires that your tables contain data so that the connector operations can return results when called. For example, if you use Azure SQL Database, you can use the included sample databases to try the SQL Server connector operations.
The information required to create an SQL database connection, such as your SQL server and database name. If you're using Windows Authentication or SQL Server Authentication to authenticate access, you also need your user name and password. You can usually find this information in the connection string.ImportantIf you use an SQL Server connection string that you copied directly from the Azure portal, you have to manually
add your password to the connection string. For sensitive information, such as this string, make sure to use the
most secure authentication flow available. Microsoft recommends that you authenticate access to Azure resources
with amanaged identitywhen possible, and assign
a role that has the least privilege necessary.If this capability is unavailable, make sure to secure connection strings through other measures, such asAzure Key Vault, which you can use withapp settings in Standard workflows.
You can thendirectly reference secure strings, such as connection
strings and keys. Similar to ARM templates, where you can define environment variables at deployment time, you can define
app settings within yourStandard logic app workflow definition.
You can then capture dynamically generated infrastructure values, such as connection endpoints, storage strings, and more.
For more information, seeApplication types for the Microsoft identity platform.For an SQL database in Azure, the connection string has the following format:Server=tcp:{your-server-name}.database.windows.net,1433;Initial Catalog={your-database-name};Persist Security Info=False;User ID={your-user-name};Password={your-password};MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;To find this string in theAzure portal, open your database.On the database menu, underProperties, selectConnection strings.For an on-premises SQL server, the connection string has the following format:Server={your-server-address};Database={your-database-name};User Id={your-user-name};Password={your-password};
The information required to create an SQL database connection, such as your SQL server and database name. If you're using Windows Authentication or SQL Server Authentication to authenticate access, you also need your user name and password. You can usually find this information in the connection string.
Important
If you use an SQL Server connection string that you copied directly from the Azure portal, you have to manually
add your password to the connection string. For sensitive information, such as this string, make sure to use the
most secure authentication flow available. Microsoft recommends that you authenticate access to Azure resources
with amanaged identitywhen possible, and assign
a role that has the least privilege necessary.
If this capability is unavailable, make sure to secure connection strings through other measures, such asAzure Key Vault, which you can use withapp settings in Standard workflows.
You can thendirectly reference secure strings, such as connection
strings and keys. Similar to ARM templates, where you can define environment variables at deployment time, you can define
app settings within yourStandard logic app workflow definition.
You can then capture dynamically generated infrastructure values, such as connection endpoints, storage strings, and more.
For more information, seeApplication types for the Microsoft identity platform.
For an SQL database in Azure, the connection string has the following format:Server=tcp:{your-server-name}.database.windows.net,1433;Initial Catalog={your-database-name};Persist Security Info=False;User ID={your-user-name};Password={your-password};MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;To find this string in theAzure portal, open your database.On the database menu, underProperties, selectConnection strings.
For an SQL database in Azure, the connection string has the following format:
Server=tcp:{your-server-name}.database.windows.net,1433;Initial Catalog={your-database-name};Persist Security Info=False;User ID={your-user-name};Password={your-password};MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;
Server=tcp:{your-server-name}.database.windows.net,1433;Initial Catalog={your-database-name};Persist Security Info=False;User ID={your-user-name};Password={your-password};MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;
To find this string in theAzure portal, open your database.
To find this string in theAzure portal, open your database.
On the database menu, underProperties, selectConnection strings.
On the database menu, underProperties, selectConnection strings.
For an on-premises SQL server, the connection string has the following format:Server={your-server-address};Database={your-database-name};User Id={your-user-name};Password={your-password};
For an on-premises SQL server, the connection string has the following format:
Server={your-server-address};Database={your-database-name};User Id={your-user-name};Password={your-password};
Server={your-server-address};Database={your-database-name};User Id={your-user-name};Password={your-password};
In Standard workflows, to use the SQL built-in triggers, you must enable change tracking in the table where you want to use the trigger. For more information, seeEnable and disable change tracking.
In Standard workflows, to use the SQL built-in triggers, you must enable change tracking in the table where you want to use the trigger. For more information, seeEnable and disable change tracking.
The logic app workflow where you want to access your SQL database. To start your workflow with a SQL Server trigger, you have to start with a blank workflow. To use a SQL Server action, start your workflow with any trigger.
The logic app workflow where you want to access your SQL database. To start your workflow with a SQL Server trigger, you have to start with a blank workflow. To use a SQL Server action, start your workflow with any trigger.

To connect to an on-premises SQL server, the following extra requirements apply, based on whether you have a Consumption or Standard logic app workflow.Consumption workflowIn multitenant Azure Logic Apps, you need theon-premises data gatewayinstalled on a local computer and adata gateway resource that's already created in Azure.Standard workflowYou can use the SQL Server built-in connector or managed connector.To use Microsoft Entra authentication or managed identity authentication with your logic app, you have to set up your SQL Server to work with these authentication types. For more information, seeAuthentication - SQL Server managed connector reference.To use the built-in connector, you can authenticate your connection with either a managed identity, Microsoft Entra ID, or a connection string. You can adjust connection pooling by specifying parameters in the connection string. For more information, reviewConnection Pooling.To use the SQL Server managed connector, follow the same requirements as a Consumption logic app workflow in multitenant Azure Logic Apps. For other connector requirements, review theSQL Server managed connector reference.
To connect to an on-premises SQL server, the following extra requirements apply, based on whether you have a Consumption or Standard logic app workflow.
Consumption workflowIn multitenant Azure Logic Apps, you need theon-premises data gatewayinstalled on a local computer and adata gateway resource that's already created in Azure.
Consumption workflow
In multitenant Azure Logic Apps, you need theon-premises data gatewayinstalled on a local computer and adata gateway resource that's already created in Azure.
Standard workflowYou can use the SQL Server built-in connector or managed connector.To use Microsoft Entra authentication or managed identity authentication with your logic app, you have to set up your SQL Server to work with these authentication types. For more information, seeAuthentication - SQL Server managed connector reference.To use the built-in connector, you can authenticate your connection with either a managed identity, Microsoft Entra ID, or a connection string. You can adjust connection pooling by specifying parameters in the connection string. For more information, reviewConnection Pooling.To use the SQL Server managed connector, follow the same requirements as a Consumption logic app workflow in multitenant Azure Logic Apps. For other connector requirements, review theSQL Server managed connector reference.
Standard workflow
You can use the SQL Server built-in connector or managed connector.
To use Microsoft Entra authentication or managed identity authentication with your logic app, you have to set up your SQL Server to work with these authentication types. For more information, seeAuthentication - SQL Server managed connector reference.
To use Microsoft Entra authentication or managed identity authentication with your logic app, you have to set up your SQL Server to work with these authentication types. For more information, seeAuthentication - SQL Server managed connector reference.
To use the built-in connector, you can authenticate your connection with either a managed identity, Microsoft Entra ID, or a connection string. You can adjust connection pooling by specifying parameters in the connection string. For more information, reviewConnection Pooling.
To use the built-in connector, you can authenticate your connection with either a managed identity, Microsoft Entra ID, or a connection string. You can adjust connection pooling by specifying parameters in the connection string. For more information, reviewConnection Pooling.
To use the SQL Server managed connector, follow the same requirements as a Consumption logic app workflow in multitenant Azure Logic Apps. For other connector requirements, review theSQL Server managed connector reference.
To use the SQL Server managed connector, follow the same requirements as a Consumption logic app workflow in multitenant Azure Logic Apps. For other connector requirements, review theSQL Server managed connector reference.

Add a SQL Server trigger
The following steps use the Azure portal, but with the appropriate Azure Logic Apps extension, you can also use the following tools to create logic app workflows:
Consumption workflows:Visual Studio Code
Standard workflows:Visual Studio Code
Consumption
Standard
In theAzure portal, open your Consumption logic app and blank workflow in the designer.
In theAzure portal, open your Consumption logic app and blank workflow in the designer.
In the designer, under the search box, selectStandard. Then,follow these general stepsto add theSQL Server managed trigger you want.This example continues with the trigger namedWhen an item is created.
In the designer, under the search box, selectStandard. Then,follow these general stepsto add theSQL Server managed trigger you want.
This example continues with the trigger namedWhen an item is created.
If prompted, provide theinformation for your connection. When you're done, selectCreate.
If prompted, provide theinformation for your connection. When you're done, selectCreate.
After the trigger information box appears, provide the necessary information required byyour selected trigger.For this example, in the trigger namedWhen an item is created, provide the values for the SQL server name and database name, if you didn't previously provide them. Otherwise, from theTable namelist, select the table that you want to use. Select theFrequencyandIntervalto set the schedule for the trigger to check for new items.
After the trigger information box appears, provide the necessary information required byyour selected trigger.
For this example, in the trigger namedWhen an item is created, provide the values for the SQL server name and database name, if you didn't previously provide them. Otherwise, from theTable namelist, select the table that you want to use. Select theFrequencyandIntervalto set the schedule for the trigger to check for new items.

If any other properties are available for this trigger, open theAdd new parameterlist, and select those properties relevant to your scenario.This trigger returns only one row from the selected table, and nothing else. To perform other tasks, continue by adding either aSQL Server connector actionor another action that performs the next task that you want in your logic app workflow.For example, to view the data in this row, you can add other actions that create a file that includes the fields from the returned row, and then send email alerts. To learn about other available actions for this connector, see theSQL Server managed connector reference.
If any other properties are available for this trigger, open theAdd new parameterlist, and select those properties relevant to your scenario.
This trigger returns only one row from the selected table, and nothing else. To perform other tasks, continue by adding either aSQL Server connector actionor another action that performs the next task that you want in your logic app workflow.
For example, to view the data in this row, you can add other actions that create a file that includes the fields from the returned row, and then send email alerts. To learn about other available actions for this connector, see theSQL Server managed connector reference.
When you're done, save your workflow. On the designer toolbar, selectSave.
When you're done, save your workflow. On the designer toolbar, selectSave.
In theAzure portal, open your Standard logic app and blank workflow in the designer.
In theAzure portal, open your Standard logic app and blank workflow in the designer.
In the designer,follow these general stepsto find and add the SQL Serverbuilt-in triggerormanaged triggeryou want.For example, you might select the built-in trigger namedWhen a row is insertedor the managed trigger namedWhen a row is created. This example continues with the built-in trigger namedWhen a row is inserted.
In the designer,follow these general stepsto find and add the SQL Serverbuilt-in triggerormanaged triggeryou want.
For example, you might select the built-in trigger namedWhen a row is insertedor the managed trigger namedWhen a row is created. This example continues with the built-in trigger namedWhen a row is inserted.
If prompted, provide theinformation for your connection. When you're done, selectCreate.
If prompted, provide theinformation for your connection. When you're done, selectCreate.
After the trigger information box appears, provide the information required by your selectedbuilt-in triggerormanaged trigger.For this example, in the trigger namedWhen a row is inserted, from theTable namelist, select the table that you want to use.
After the trigger information box appears, provide the information required by your selectedbuilt-in triggerormanaged trigger.
For this example, in the trigger namedWhen a row is inserted, from theTable namelist, select the table that you want to use.

If any other properties are available for this trigger, open theAdd new parameterlist, and select those properties relevant to your scenario.In this example, theWhen a row is insertedbuilt-in trigger returns the row that you inserted in the selected table, and nothing else. To perform other tasks, continue by adding either another SQL Server action or another action that performs the next task that you want in your logic app workflow.For example, to view the data in this row, you can add other actions that create a file that includes the fields from the returned row, and then send email alerts. To learn about other available actions for this connector, see theSQL Server built-in connector referenceor theSQL Server managed connector reference.
If any other properties are available for this trigger, open theAdd new parameterlist, and select those properties relevant to your scenario.
In this example, theWhen a row is insertedbuilt-in trigger returns the row that you inserted in the selected table, and nothing else. To perform other tasks, continue by adding either another SQL Server action or another action that performs the next task that you want in your logic app workflow.
For example, to view the data in this row, you can add other actions that create a file that includes the fields from the returned row, and then send email alerts. To learn about other available actions for this connector, see theSQL Server built-in connector referenceor theSQL Server managed connector reference.
When you're done, save your workflow. On the designer toolbar, selectSave.
When you're done, save your workflow. On the designer toolbar, selectSave.
When you save your workflow, this step automatically publishes your updates to your deployed logic app, which is live in Azure. With only a trigger, your workflow just checks the SQL database based on your specified schedule. You have toadd an actionthat responds to the trigger.

Add a SQL Server action
The following steps use the Azure portal, but with the appropriate Azure Logic Apps extension, you can also use the following tools to build logic app workflows:
Consumption workflows:Visual Studio Code
Standard workflows:Visual Studio Code
In this example, the logic app workflow starts with theRecurrence trigger, and calls an action that gets a row from an SQL database.
Consumption
Standard
In theAzure portal, open your Consumption logic app and workflow in the designer.
In theAzure portal, open your Consumption logic app and workflow in the designer.
In the designer,follow these general stepsto add theSQL Server managed action you want.This example continues with the action namedGet row, which gets a single record.
In the designer,follow these general stepsto add theSQL Server managed action you want.
This example continues with the action namedGet row, which gets a single record.
If prompted, provide theinformation for your connection. When you're done, selectCreate.
If prompted, provide theinformation for your connection. When you're done, selectCreate.
After the action information box appears, from theTable namelist, select the table that you want to use. In theRow idproperty, enter the ID for the record that you want.For this example, the table name isSalesLT.Customer.This action returns only one row from the selected table, and nothing else. To view the data in this row, add other actions. For example, such actions might create a file, include the fields from the returned row, and store the file in a cloud storage account. To learn about other available actions for this connector, see theconnector's reference page.
After the action information box appears, from theTable namelist, select the table that you want to use. In theRow idproperty, enter the ID for the record that you want.
For this example, the table name isSalesLT.Customer.

This action returns only one row from the selected table, and nothing else. To view the data in this row, add other actions. For example, such actions might create a file, include the fields from the returned row, and store the file in a cloud storage account. To learn about other available actions for this connector, see theconnector's reference page.
When you're done, save your workflow. On the designer toolbar, selectSave.
When you're done, save your workflow. On the designer toolbar, selectSave.
In theAzure portal, open your Standard logic app and workflow in the designer.
In theAzure portal, open your Standard logic app and workflow in the designer.
In the designer,follow these general stepsto find and add the SQL Serverbuilt-in actionormanaged actionyou want.For example, you might select the built-in action namedExecute queryor the managed action namedGet row, which gets a single record. This example continues with the managed action namedGet row.
In the designer,follow these general stepsto find and add the SQL Serverbuilt-in actionormanaged actionyou want.
For example, you might select the built-in action namedExecute queryor the managed action namedGet row, which gets a single record. This example continues with the managed action namedGet row.
If prompted, provide theinformation for your connection. When you're done, selectCreate.
If prompted, provide theinformation for your connection. When you're done, selectCreate.
After the action information box appears, provide the values for the SQL server name and database name, if you didn't previously provide them. Otherwise, from theTable namelist, select the table that you want to use. In theRow idproperty, enter the ID for the record that you want.For this example, the table name isSalesLT.Customer.This action returns only one row from the selected table, and nothing else. To view the data in this row, add other actions. For example, such actions might create a file, include the fields from the returned row, and store the file in a cloud storage account. To learn about other available actions for this connector, review themanaged connector's reference page.
After the action information box appears, provide the values for the SQL server name and database name, if you didn't previously provide them. Otherwise, from theTable namelist, select the table that you want to use. In theRow idproperty, enter the ID for the record that you want.
For this example, the table name isSalesLT.Customer.

This action returns only one row from the selected table, and nothing else. To view the data in this row, add other actions. For example, such actions might create a file, include the fields from the returned row, and store the file in a cloud storage account. To learn about other available actions for this connector, review themanaged connector's reference page.
When you're done, save your workflow. On the designer toolbar, selectSave.
When you're done, save your workflow. On the designer toolbar, selectSave.

Connect to your database
When you add a trigger or action that connects to a service or system, and you don't have an existing or active connection, Azure Logic Apps prompts you to provide the connection information, which varies based on the connection type, for example:
Your account credentials
A name to use for the connection
The name for the server or system
The authentication type to use
A connection string
After you provide this information, continue with the following steps based on your target database:
Connect to cloud-based Azure SQL Database or SQL Managed Instance
Connect to on-premises SQL Server

Connect to Azure SQL Database or SQL Managed Instance
To access a SQL Managed Instance without using the on-premises data gateway, you have toset up the public endpoint on the SQL Managed Instance. The public endpoint uses port 3342, so make sure that you specify this port number when you create the connection from your logic app.
In the connection information box, complete the following steps:
ForConnection name, provide a name to use for your connection.
ForConnection name, provide a name to use for your connection.
ForAuthentication type, select the authentication that's required and enabled on your database in Azure SQL Database or SQL Managed Instance:AuthenticationDescriptionConnection string- Supported only in Standard workflows with the SQL Server built-in connector.- Requires the connection string to your SQL server and database.Active Directory OAuth- Supported only in Standard workflows with the SQL Server built-in connector. For more information, see the following documentation:-Authentication for SQL Server connector-Enable Open Authorization with Microsoft Entra ID (Microsoft Entra ID OAuth)-OAuth with Microsoft Entra IDLogic Apps Managed Identity- Supported with the SQL Server managed connector. In Standard workflows, this authentication type is available for the SQL Server built-in connector, but the option is namedManaged identityinstead.- Requires the following items:--- A valid managed identity that'senabled on your logic app resourceand has access to your database.---SQL DB Contributorrole access to the SQL Server resource---Contributoraccess to the resource group that includes the SQL Server resource.For more information, see the following documentation:-Managed identity authentication for SQL Server connector-SQL - Server-Level RolesService principal (Microsoft Entra application)- Supported with the SQL Server managed connector.- Requires a Microsoft Entra application and service principal. For more information, seeCreate a Microsoft Entra application and service principal that can access resources using the Azure portal.Microsoft Entra integrated- Supported with the SQL Server managed connector.- Requires a valid managed identity in Microsoft Entra that'senabled on your logic app resourceand has access to your database. For more information, see these topics:-Azure SQL Security Overview - Authentication-Authorize database access to Azure SQL - Authentication and authorization-Azure SQL - Microsoft Entra integrated authenticationSQL Server Authentication- Supported with the SQL Server managed connector.- Requires the following items:--- A data gateway resource that's previously created in Azure for your connection, regardless whether your logic app is in multitenant Azure Logic Apps.--- A valid user name and strong password that are created and stored in your SQL Server database. For more information, see the following topics:-Azure SQL Security Overview - Authentication-Authorize database access to Azure SQL - Authentication and authorizationThe following examples show how the connection information box might appear if you use the SQL Servermanagedconnector and selectMicrosoft Entra integratedauthentication:Consumption workflowsStandard workflows
ForAuthentication type, select the authentication that's required and enabled on your database in Azure SQL Database or SQL Managed Instance:
The following examples show how the connection information box might appear if you use the SQL Servermanagedconnector and selectMicrosoft Entra integratedauthentication:
Consumption workflows

Standard workflows

After you selectMicrosoft Entra integrated, selectSign in. Based on whether you use Azure SQL Database or SQL Managed Instance, select your user credentials for authentication.
After you selectMicrosoft Entra integrated, selectSign in. Based on whether you use Azure SQL Database or SQL Managed Instance, select your user credentials for authentication.
Select these values for your database:PropertyRequiredDescriptionServer nameYesThe address for your SQL server, for example,Fabrikam-Azure-SQL.database.windows.netDatabase nameYesThe name for your SQL database, for example,Fabrikam-Azure-SQL-DBTable nameYesThe table that you want to use, for example,SalesLT.CustomerTipTo provide your database and table information, you have these options:Find this information in your database's connection string. For example, in the Azure portal, find and open your database. On the database menu, select eitherConnection stringsorProperties, where you can find the following string:Server=tcp:{your-server-address}.database.windows.net,1433;Initial Catalog={your-database-name};Persist Security Info=False;User ID={your-user-name};Password={your-password};MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;By default, tables in system databases are filtered out, so they might not automatically appear when you select a system database. As an alternative, you can manually enter the table name after you selectEnter custom valuefrom the database list.This database information box looks similar to the following example:Consumption workflowsStandard workflows
Select these values for your database:
Tip
To provide your database and table information, you have these options:
Find this information in your database's connection string. For example, in the Azure portal, find and open your database. On the database menu, select eitherConnection stringsorProperties, where you can find the following string:Server=tcp:{your-server-address}.database.windows.net,1433;Initial Catalog={your-database-name};Persist Security Info=False;User ID={your-user-name};Password={your-password};MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;
Find this information in your database's connection string. For example, in the Azure portal, find and open your database. On the database menu, select eitherConnection stringsorProperties, where you can find the following string:
Server=tcp:{your-server-address}.database.windows.net,1433;Initial Catalog={your-database-name};Persist Security Info=False;User ID={your-user-name};Password={your-password};MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;
Server=tcp:{your-server-address}.database.windows.net,1433;Initial Catalog={your-database-name};Persist Security Info=False;User ID={your-user-name};Password={your-password};MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;
By default, tables in system databases are filtered out, so they might not automatically appear when you select a system database. As an alternative, you can manually enter the table name after you selectEnter custom valuefrom the database list.
By default, tables in system databases are filtered out, so they might not automatically appear when you select a system database. As an alternative, you can manually enter the table name after you selectEnter custom valuefrom the database list.
This database information box looks similar to the following example:
Consumption workflows

Standard workflows

Now, continue with the steps that you haven't completed yet in eitherAdd a SQL triggerorAdd a SQL action.
Now, continue with the steps that you haven't completed yet in eitherAdd a SQL triggerorAdd a SQL action.

Connect to on-premises SQL Server
In the connection information box, complete the following steps:
For connections to your on-premises SQL server that require the on-premises data gateway, make sure that you'vecompleted these prerequisites.Otherwise, your data gateway resource doesn't appear in theConnection Gatewaylist when you create your connection.
For connections to your on-premises SQL server that require the on-premises data gateway, make sure that you'vecompleted these prerequisites.
Otherwise, your data gateway resource doesn't appear in theConnection Gatewaylist when you create your connection.
ForAuthentication Type, select the authentication that's required and enabled on your SQL Server:AuthenticationDescriptionSQL Server Authentication- Supported with the SQL Server managed connector and SQL Server built-in connector.- Requires the following items:--- A data gateway resource that's previously created in Azure for your connection, regardless whether your logic app is in multitenant Azure Logic Apps.--- A valid user name and strong password that are created and stored in your SQL Server.For more information, seeSQL Server Authentication.Windows Authentication- Supported with the SQL Server managed connector.- Requires the following items:--- A data gateway resource that's previously created in Azure for your connection, regardless whether your logic app is in multitenant Azure Logic Apps.--- A valid Windows user name and password to confirm your identity through your Windows account.For more information, seeWindows Authentication.
ForAuthentication Type, select the authentication that's required and enabled on your SQL Server:
Select or provide the following values for your SQL database:PropertyRequiredDescriptionSQL server nameYesThe address for your SQL server, for example,Fabrikam-Azure-SQL.database.windows.netSQL database nameYesThe name for your SQL Server database, for example,Fabrikam-Azure-SQL-DBUsernameYesYour user name for the SQL server and databasePasswordYesYour password for the SQL server and databaseSubscriptionYes, for Windows authenticationThe Azure subscription for the data gateway resource that you previously created in AzureConnection GatewayYes, for Windows authenticationThe name for the data gateway resource that you previously created in AzureTip: If your gateway doesn't appear in the list, check that you correctlyset up your gateway.TipYou can find this information in your database's connection string:Server={your-server-address}Database={your-database-name}User ID={your-user-name}Password={your-password}The following examples show how the connection information box might appear if you selectWindowsauthentication.Consumption workflowsStandard workflows
Select or provide the following values for your SQL database:
Fabrikam-Azure-SQL.database.windows.net
Fabrikam-Azure-SQL-DB
Tip
You can find this information in your database's connection string:
Server={your-server-address}
Server={your-server-address}
Database={your-database-name}
Database={your-database-name}
User ID={your-user-name}
User ID={your-user-name}
Password={your-password}
Password={your-password}
The following examples show how the connection information box might appear if you selectWindowsauthentication.
Consumption workflows

Standard workflows

When you're ready, selectCreate.
When you're ready, selectCreate.
Now, continue with the steps that you haven't completed yet in eitherAdd a SQL triggerorAdd a SQL action.
Now, continue with the steps that you haven't completed yet in eitherAdd a SQL triggerorAdd a SQL action.

Handle bulk data
Sometimes, you work with result sets so large that the connector doesn't return all the results at the same time. Or, you want better control over the size and structure for your result sets. The following list includes some ways that you can handle such large result sets:
To help you manage results as smaller sets, turn onpagination. For more information, seeGet bulk data, records, and items by using pagination. For more information, seeSQL Pagination for bulk data transfer with Logic Apps.
To help you manage results as smaller sets, turn onpagination. For more information, seeGet bulk data, records, and items by using pagination. For more information, seeSQL Pagination for bulk data transfer with Logic Apps.
Create astored procedurethat organizes the results the way that you want. The SQL Server connector provides many backend features that you can access by using Azure Logic Apps so that you can more easily automate business tasks that work with SQL database tables.When a SQL action gets or inserts multiple rows, your logic app workflow can iterate through these rows by using anuntil loopwithin theselimits. However, when your logic app has to work with record sets so large, for example, thousands or millions of rows, that you want to minimize the costs resulting from calls to the database.To organize the results in the way that you want, you can create a stored procedure that runs in your SQL instance and uses theSELECT - ORDER BYstatement. This solution gives you more control over the size and structure of your results. Your logic app calls the stored procedure by using the SQL Server connector'sExecute stored procedureaction. For more information, seeSELECT - ORDER BY Clause.NoteThe SQL Server connector has a stored procedure timeout limit that'sless than 2 minutes.
Some stored procedures might take longer than this limit to complete, causing a504 Timeouterror. You can work around this problem
by using a SQL completion trigger, native SQL pass-through query, a state table, and server-side jobs.For this task, you can use theAzure Elastic Job AgentforAzure SQL Database. ForSQL Server on premisesandSQL Managed Instance,
you can use theSQL Server Agent. To learn more, seeHandle long-running stored procedure timeouts in the SQL Server connector for Azure Logic Apps.
Create astored procedurethat organizes the results the way that you want. The SQL Server connector provides many backend features that you can access by using Azure Logic Apps so that you can more easily automate business tasks that work with SQL database tables.
When a SQL action gets or inserts multiple rows, your logic app workflow can iterate through these rows by using anuntil loopwithin theselimits. However, when your logic app has to work with record sets so large, for example, thousands or millions of rows, that you want to minimize the costs resulting from calls to the database.
To organize the results in the way that you want, you can create a stored procedure that runs in your SQL instance and uses theSELECT - ORDER BYstatement. This solution gives you more control over the size and structure of your results. Your logic app calls the stored procedure by using the SQL Server connector'sExecute stored procedureaction. For more information, seeSELECT - ORDER BY Clause.
Note
The SQL Server connector has a stored procedure timeout limit that'sless than 2 minutes.
Some stored procedures might take longer than this limit to complete, causing a504 Timeouterror. You can work around this problem
by using a SQL completion trigger, native SQL pass-through query, a state table, and server-side jobs.
504 Timeout
For this task, you can use theAzure Elastic Job AgentforAzure SQL Database. ForSQL Server on premisesandSQL Managed Instance,
you can use theSQL Server Agent. To learn more, seeHandle long-running stored procedure timeouts in the SQL Server connector for Azure Logic Apps.
Handle dynamic bulk data
When you call a stored procedure by using the SQL Server connector, the returned output is sometimes dynamic. In this scenario, follow these steps:
In theAzure portal, open your logic app and workflow in the designer.
In theAzure portal, open your logic app and workflow in the designer.
View the output format by performing a test run. Copy and save your sample output.
View the output format by performing a test run. Copy and save your sample output.
In the designer, under the action where you call the stored procedure, add the built-in action namedParse JSON.
In the designer, under the action where you call the stored procedure, add the built-in action namedParse JSON.
In theParse JSONaction, selectUse sample payload to generate schema.
In theParse JSONaction, selectUse sample payload to generate schema.
In theEnter or paste a sample JSON payloadbox, paste your sample output, and selectDone.NoteIf you get an error that Azure Logic Apps can't generate a schema, check that your
sample output's syntax is correctly formatted. If you still can't generate the schema,
in theSchemabox, manually enter the schema.
In theEnter or paste a sample JSON payloadbox, paste your sample output, and selectDone.
Note
If you get an error that Azure Logic Apps can't generate a schema, check that your
sample output's syntax is correctly formatted. If you still can't generate the schema,
in theSchemabox, manually enter the schema.
When you're done, save your workflow.
When you're done, save your workflow.
To reference the JSON content properties, select inside the edit boxes where you want to reference those properties so that the dynamic content list appears. In the list, under theParse JSONheading, select the data tokens for the JSON content properties that you want.
To reference the JSON content properties, select inside the edit boxes where you want to reference those properties so that the dynamic content list appears. In the list, under theParse JSONheading, select the data tokens for the JSON content properties that you want.
Next steps
Managed connectors for Azure Logic Apps
Built-in connectors for Azure Logic Apps
Feedback
Was this page helpful?
Additional resources