Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Quickstart: Use Go language to connect and query data in Azure Database for PostgreSQL flexible server
Article
2024-12-17
4 contributors
In this article
APPLIES TO:Azure Database for PostgreSQL - Flexible Server
This quickstart demonstrates how to connect to an Azure Database for PostgreSQL using code written in theGolanguage (golang). It shows how to use SQL statements to query, insert, update, and delete data in the database. This article assumes you are familiar with development using Go, but that you are new to working with Azure Database for PostgreSQL.
Prerequisites
This quickstart uses the resources created in theCreate an Azure Database for PostgreSQL flexible serveras a starting point.
Important
We recommend you use a server withPublic access (allowed IP addresses)enabled for this quickstart. Using a server withPrivate access (VNet Integration)enabled to complete this quickstart might involve extra steps that aren't covered.
Ensure the IP address you're connecting from has been added the server's firewall rules using theAzure portalorAzure CLI.
Install Go and pq connector
InstallGoand thePure Go Postgres driver (pq)on your own machine. Depending on your platform, follow the appropriate steps:
Windows
Linux (Ubuntu)
Apple macOS
Downloadand install Go for Microsoft Windows according to theinstallation instructions.
Downloadand install Go for Microsoft Windows according to theinstallation instructions.
Launch the command prompt from the start menu.
Launch the command prompt from the start menu.
Make a folder for your project, such asmkdir  %USERPROFILE%\go\src\postgresqlgo.
Make a folder for your project, such asmkdir  %USERPROFILE%\go\src\postgresqlgo.
mkdir  %USERPROFILE%\go\src\postgresqlgo
Change directory into the project folder, such ascd %USERPROFILE%\go\src\postgresqlgo.
Change directory into the project folder, such ascd %USERPROFILE%\go\src\postgresqlgo.
cd %USERPROFILE%\go\src\postgresqlgo
Set the environment variable for GOPATH to point to the source code directory.set GOPATH=%USERPROFILE%\go.
Set the environment variable for GOPATH to point to the source code directory.set GOPATH=%USERPROFILE%\go.
set GOPATH=%USERPROFILE%\go
Rungo mod initto create a module in the current directory. For example:go mod init postgresqlgo.The<module_path>parameter is generally a location in a GitHub repo - such asgithub.com/<your_github_account_name>/<directory>.When you're creating a command-line app as a test and won't publish the app, the<module_path>doesn't need to refer to an actual location. For example,postgresqlgo.
Rungo mod initto create a module in the current directory. For example:go mod init postgresqlgo.
go mod init postgresqlgo
The<module_path>parameter is generally a location in a GitHub repo - such asgithub.com/<your_github_account_name>/<directory>.
<module_path>
github.com/<your_github_account_name>/<directory>
When you're creating a command-line app as a test and won't publish the app, the<module_path>doesn't need to refer to an actual location. For example,postgresqlgo.
<module_path>
postgresqlgo
Install thePure Go Postgres driver (pq)by running thego get github.com/lib/pqcommand.In summary, install Go, then run these commands in the command prompt:mkdir  %USERPROFILE%\go\src\postgresqlgo
cd %USERPROFILE%\go\src\postgresqlgo
set GOPATH=%USERPROFILE%\go
go mod init postgresqlgo
go get github.com/lib/pq
Install thePure Go Postgres driver (pq)by running thego get github.com/lib/pqcommand.
go get github.com/lib/pq
In summary, install Go, then run these commands in the command prompt:
mkdir  %USERPROFILE%\go\src\postgresqlgo
cd %USERPROFILE%\go\src\postgresqlgo
set GOPATH=%USERPROFILE%\go
go mod init postgresqlgo
go get github.com/lib/pq
mkdir  %USERPROFILE%\go\src\postgresqlgo
cd %USERPROFILE%\go\src\postgresqlgo
set GOPATH=%USERPROFILE%\go
go mod init postgresqlgo
go get github.com/lib/pq
Launch the Bash shell.
Launch the Bash shell.
Install Go by runningsudo apt-get install golang-go.
Install Go by runningsudo apt-get install golang-go.
sudo apt-get install golang-go
Make a folder for your project in your home directory, such asmkdir -p ~/go/src/postgresqlgo/.
Make a folder for your project in your home directory, such asmkdir -p ~/go/src/postgresqlgo/.
mkdir -p ~/go/src/postgresqlgo/
Change directory into the folder, such ascd ~/go/src/postgresqlgo/.
Change directory into the folder, such ascd ~/go/src/postgresqlgo/.
cd ~/go/src/postgresqlgo/
Set the GOPATH environment variable to point to a valid source directory, such as your current home directory's go folder. At the bash shell, runexport GOPATH=~/goto add the go directory as the GOPATH for the current shell session.
Set the GOPATH environment variable to point to a valid source directory, such as your current home directory's go folder. At the bash shell, runexport GOPATH=~/goto add the go directory as the GOPATH for the current shell session.
export GOPATH=~/go
Rungo mod initto create a module in the current directory. For example:go mod init postgresqlgo.The<module_path>parameter is generally a location in a GitHub repo - such asgithub.com/<your_github_account_name>/<directory>.When you're creating a command-line app as a test and won't publish the app, the<module_path>doesn't need to refer to an actual location. For example,postgresqlgo.
Rungo mod initto create a module in the current directory. For example:go mod init postgresqlgo.
go mod init postgresqlgo
The<module_path>parameter is generally a location in a GitHub repo - such asgithub.com/<your_github_account_name>/<directory>.
<module_path>
github.com/<your_github_account_name>/<directory>
When you're creating a command-line app as a test and won't publish the app, the<module_path>doesn't need to refer to an actual location. For example,postgresqlgo.
<module_path>
postgresqlgo
Install thePure Go Postgres driver (pq)by running thego get github.com/lib/pqcommand.In summary, run these bash commands:sudo apt-get install golang-go
mkdir -p ~/go/src/postgresqlgo/
cd ~/go/src/postgresqlgo/
export GOPATH=~/go/
go mod init postgresqlgo
go get github.com/lib/pq
Install thePure Go Postgres driver (pq)by running thego get github.com/lib/pqcommand.
go get github.com/lib/pq
In summary, run these bash commands:
sudo apt-get install golang-go
mkdir -p ~/go/src/postgresqlgo/
cd ~/go/src/postgresqlgo/
export GOPATH=~/go/
go mod init postgresqlgo
go get github.com/lib/pq
sudo apt-get install golang-go
mkdir -p ~/go/src/postgresqlgo/
cd ~/go/src/postgresqlgo/
export GOPATH=~/go/
go mod init postgresqlgo
go get github.com/lib/pq
Download and install Go according to theinstallation instructionsmatching your platform.
Download and install Go according to theinstallation instructionsmatching your platform.
Launch the Bash shell.
Launch the Bash shell.
Make a folder for your project in your home directory, such asmkdir -p ~/go/src/postgresqlgo/.
Make a folder for your project in your home directory, such asmkdir -p ~/go/src/postgresqlgo/.
mkdir -p ~/go/src/postgresqlgo/
Change directory into the folder, such ascd ~/go/src/postgresqlgo/.
Change directory into the folder, such ascd ~/go/src/postgresqlgo/.
cd ~/go/src/postgresqlgo/
Set the GOPATH environment variable to point to a valid source directory, such as your current home directory's go folder. At the bash shell, runexport GOPATH=~/goto add the go directory as the GOPATH for the current shell session.
Set the GOPATH environment variable to point to a valid source directory, such as your current home directory's go folder. At the bash shell, runexport GOPATH=~/goto add the go directory as the GOPATH for the current shell session.
export GOPATH=~/go
Rungo mod initto create a module in the current directory. For example:go mod init postgresqlgo.The<module_path>parameter is generally a location in a GitHub repo - such asgithub.com/<your_github_account_name>/<directory>.When you're creating a command-line app as a test and won't publish the app, the<module_path>doesn't need to refer to an actual location. For example,postgresqlgo.
Rungo mod initto create a module in the current directory. For example:go mod init postgresqlgo.
go mod init postgresqlgo
The<module_path>parameter is generally a location in a GitHub repo - such asgithub.com/<your_github_account_name>/<directory>.
<module_path>
github.com/<your_github_account_name>/<directory>
When you're creating a command-line app as a test and won't publish the app, the<module_path>doesn't need to refer to an actual location. For example,postgresqlgo.
<module_path>
postgresqlgo
Install thePure Go Postgres driver (pq)by running thego get github.com/lib/pqcommand.In summary, install Go, then run these bash commands:mkdir -p ~/go/src/postgresqlgo/
cd ~/go/src/postgresqlgo/
export GOPATH=~/go/
go mod init postgresqlgo
go get github.com/lib/pq
Install thePure Go Postgres driver (pq)by running thego get github.com/lib/pqcommand.
go get github.com/lib/pq
In summary, install Go, then run these bash commands:
mkdir -p ~/go/src/postgresqlgo/
cd ~/go/src/postgresqlgo/
export GOPATH=~/go/
go mod init postgresqlgo
go get github.com/lib/pq
mkdir -p ~/go/src/postgresqlgo/
cd ~/go/src/postgresqlgo/
export GOPATH=~/go/
go mod init postgresqlgo
go get github.com/lib/pq
Get connection information
Get the connection information needed to connect to the Azure Database for PostgreSQL. You need the fully qualified server name and login credentials.
Log in to theAzure portal.
From the left-hand menu in Azure portal, selectAll resources, and then search for the server you have created (such asmydemoserver).
Select the server name.
From the server'sOverviewpanel, make a note of theServer nameandServer admin login name. If you forget your password, you can also reset the password from this panel.
Build and run Go code
To write Golang code, you can use a plain text editor, such as Notepad in Microsoft Windows,viorNanoin Ubuntu, or TextEdit in macOS. If you prefer a richer Interactive Development Environment (IDE) tryGoLandby Jetbrains,Visual Studio Codeby Microsoft, orAtom.
Paste the Golang code from the following sections into text files, and save into your project folder with file extension *.go, such as Windows path%USERPROFILE%\go\src\postgresqlgo\createtable.goor Linux path~/go/src/postgresqlgo/createtable.go.
%USERPROFILE%\go\src\postgresqlgo\createtable.go
~/go/src/postgresqlgo/createtable.go
Locate theHOST,DATABASE,USER, andPASSWORDconstants in the code, and replace the example values with your own values. A database namedpostgresis created when you create your Azure Database for PostgreSQL server instance. You can use that database or another one that you've created.
HOST
DATABASE
USER
PASSWORD
Launch the command prompt or bash shell. Change directory into your project folder. For example, on Windowscd %USERPROFILE%\go\src\postgresqlgo\. On Linuxcd ~/go/src/postgresqlgo/. Some of the IDE environments mentioned offer debug and runtime capabilities without requiring shell commands.
cd %USERPROFILE%\go\src\postgresqlgo\
cd ~/go/src/postgresqlgo/
Run the code by typing the commandgo run createtable.goto compile the application and run it.
go run createtable.go
Alternatively, to build the code into a native application,go build createtable.go, then launchcreatetable.exeto run the application.
go build createtable.go
createtable.exe
Connect and create a table
Use the following code to connect and create a table usingCREATE TABLESQL statement, followed byINSERT INTOSQL statements to add rows into the table.
The code imports three packages: thesql package, thepq packageas a driver to communicate with the PostgreSQL server, and thefmt packagefor printed input and output on the command line.
The code calls methodsql.Open()to connect to Azure Database for PostgreSQL database, and checks the connection using methoddb.Ping(). Adatabase handleis used throughout, holding the connection pool for the database server. The code calls theExec()method several times to run several SQL commands. Each time a custom checkError() method checks if an error occurred and panic to exit if an error does occur.
Replace theHOST,DATABASE,USER, andPASSWORDparameters with your own values.
HOST
DATABASE
USER
PASSWORD
package main

import (
	"database/sql"
	"fmt"
	_ "github.com/lib/pq"
)

const (
	// Initialize connection constants.
	HOST     = "mydemoserver.postgres.database.azure.com"
	DATABASE = "postgres"
	USER     = "mylogin"
	PASSWORD = "<server_admin_password>"
)

func checkError(err error) {
	if err != nil {
		panic(err)
	}
}

func main() {
	// Initialize connection string.
	var connectionString string = fmt.Sprintf("host=%s user=%s password=%s dbname=%s sslmode=require", HOST, USER, PASSWORD, DATABASE)

	// Initialize connection object.
	db, err := sql.Open("postgres", connectionString)
	checkError(err)

	err = db.Ping()
	checkError(err)
	fmt.Println("Successfully created connection to database")

	// Drop previous table of same name if one exists.
	_, err = db.Exec("DROP TABLE IF EXISTS inventory;")
	checkError(err)
	fmt.Println("Finished dropping table (if existed)")

	// Create table.
	_, err = db.Exec("CREATE TABLE inventory (id serial PRIMARY KEY, name VARCHAR(50), quantity INTEGER);")
	checkError(err)
	fmt.Println("Finished creating table")

	// Insert some data into table.
	sql_statement := "INSERT INTO inventory (name, quantity) VALUES ($1, $2);"
	_, err = db.Exec(sql_statement, "banana", 150)
	checkError(err)
	_, err = db.Exec(sql_statement, "orange", 154)
	checkError(err)
	_, err = db.Exec(sql_statement, "apple", 100)
	checkError(err)
	fmt.Println("Inserted 3 rows of data")
}
package main

import (
	"database/sql"
	"fmt"
	_ "github.com/lib/pq"
)

const (
	// Initialize connection constants.
	HOST     = "mydemoserver.postgres.database.azure.com"
	DATABASE = "postgres"
	USER     = "mylogin"
	PASSWORD = "<server_admin_password>"
)

func checkError(err error) {
	if err != nil {
		panic(err)
	}
}

func main() {
	// Initialize connection string.
	var connectionString string = fmt.Sprintf("host=%s user=%s password=%s dbname=%s sslmode=require", HOST, USER, PASSWORD, DATABASE)

	// Initialize connection object.
	db, err := sql.Open("postgres", connectionString)
	checkError(err)

	err = db.Ping()
	checkError(err)
	fmt.Println("Successfully created connection to database")

	// Drop previous table of same name if one exists.
	_, err = db.Exec("DROP TABLE IF EXISTS inventory;")
	checkError(err)
	fmt.Println("Finished dropping table (if existed)")

	// Create table.
	_, err = db.Exec("CREATE TABLE inventory (id serial PRIMARY KEY, name VARCHAR(50), quantity INTEGER);")
	checkError(err)
	fmt.Println("Finished creating table")

	// Insert some data into table.
	sql_statement := "INSERT INTO inventory (name, quantity) VALUES ($1, $2);"
	_, err = db.Exec(sql_statement, "banana", 150)
	checkError(err)
	_, err = db.Exec(sql_statement, "orange", 154)
	checkError(err)
	_, err = db.Exec(sql_statement, "apple", 100)
	checkError(err)
	fmt.Println("Inserted 3 rows of data")
}
Read data
Use the following code to connect and read the data using aSELECTSQL statement.
The code imports three packages: thesql package, thepq packageas a driver to communicate with the PostgreSQL server, and thefmt packagefor printed input and output on the command line.
The code calls methodsql.Open()to connect to Azure Database for PostgreSQL database, and checks the connection using methoddb.Ping(). Adatabase handleis used throughout, holding the connection pool for the database server. The select query is run by calling methoddb.Query(), and the resulting rows are kept in a variable of typerows. The code reads the column data values in the current row using methodrows.Scan()and loops over the rows using the iteratorrows.Next()until no more rows exist. Each row's column values are printed to the console out. Each time a custom checkError() method is used to check if an error occurred and panic to exit if an error does occur.
Replace theHOST,DATABASE,USER, andPASSWORDparameters with your own values.
HOST
DATABASE
USER
PASSWORD
package main

import (
	"database/sql"
	"fmt"
	_ "github.com/lib/pq"
)

const (
	// Initialize connection constants.
	HOST     = "mydemoserver.postgres.database.azure.com"
	DATABASE = "postgres"
	USER     = "mylogin"
	PASSWORD = "<server_admin_password>"
)

func checkError(err error) {
	if err != nil {
		panic(err)
	}
}

func main() {

	// Initialize connection string.
	var connectionString string = fmt.Sprintf("host=%s user=%s password=%s dbname=%s sslmode=require", HOST, USER, PASSWORD, DATABASE)

	// Initialize connection object.
	db, err := sql.Open("postgres", connectionString)
	checkError(err)

	err = db.Ping()
	checkError(err)
	fmt.Println("Successfully created connection to database")

	// Read rows from table.
	var id int
	var name string
	var quantity int

	sql_statement := "SELECT * from inventory;"
	rows, err := db.Query(sql_statement)
	checkError(err)
	defer rows.Close()

	for rows.Next() {
		switch err := rows.Scan(&id, &name, &quantity); err {
		case sql.ErrNoRows:
			fmt.Println("No rows were returned")
		case nil:
			fmt.Printf("Data row = (%d, %s, %d)\n", id, name, quantity)
		default:
			checkError(err)
		}
	}
}
package main

import (
	"database/sql"
	"fmt"
	_ "github.com/lib/pq"
)

const (
	// Initialize connection constants.
	HOST     = "mydemoserver.postgres.database.azure.com"
	DATABASE = "postgres"
	USER     = "mylogin"
	PASSWORD = "<server_admin_password>"
)

func checkError(err error) {
	if err != nil {
		panic(err)
	}
}

func main() {

	// Initialize connection string.
	var connectionString string = fmt.Sprintf("host=%s user=%s password=%s dbname=%s sslmode=require", HOST, USER, PASSWORD, DATABASE)

	// Initialize connection object.
	db, err := sql.Open("postgres", connectionString)
	checkError(err)

	err = db.Ping()
	checkError(err)
	fmt.Println("Successfully created connection to database")

	// Read rows from table.
	var id int
	var name string
	var quantity int

	sql_statement := "SELECT * from inventory;"
	rows, err := db.Query(sql_statement)
	checkError(err)
	defer rows.Close()

	for rows.Next() {
		switch err := rows.Scan(&id, &name, &quantity); err {
		case sql.ErrNoRows:
			fmt.Println("No rows were returned")
		case nil:
			fmt.Printf("Data row = (%d, %s, %d)\n", id, name, quantity)
		default:
			checkError(err)
		}
	}
}
Update data
Use the following code to connect and update the data using anUPDATESQL statement.
The code imports three packages: thesql package, thepq packageas a driver to communicate with the Postgres server, and thefmt packagefor printed input and output on the command line.
The code calls methodsql.Open()to connect to Azure Database for PostgreSQL database, and checks the connection using methoddb.Ping(). Adatabase handleis used throughout, holding the connection pool for the database server. The code calls theExec()method to run the SQL statement that updates the table. A custom checkError() method is used to check if an error occurred and panic to exit if an error does occur.
Replace theHOST,DATABASE,USER, andPASSWORDparameters with your own values.
HOST
DATABASE
USER
PASSWORD
package main

import (
  "database/sql"
  _ "github.com/lib/pq"
  "fmt"
)

const (
	// Initialize connection constants.
	HOST     = "mydemoserver.postgres.database.azure.com"
	DATABASE = "postgres"
	USER     = "mylogin"
	PASSWORD = "<server_admin_password>"
)

func checkError(err error) {
	if err != nil {
		panic(err)
	}
}

func main() {

	// Initialize connection string.
	var connectionString string = 
		fmt.Sprintf("host=%s user=%s password=%s dbname=%s sslmode=require", HOST, USER, PASSWORD, DATABASE)

	// Initialize connection object.
	db, err := sql.Open("postgres", connectionString)
	checkError(err)

	err = db.Ping()
	checkError(err)
	fmt.Println("Successfully created connection to database")

	// Modify some data in table.
	sql_statement := "UPDATE inventory SET quantity = $2 WHERE name = $1;"
	_, err = db.Exec(sql_statement, "banana", 200)
	checkError(err)
	fmt.Println("Updated 1 row of data")
}
package main

import (
  "database/sql"
  _ "github.com/lib/pq"
  "fmt"
)

const (
	// Initialize connection constants.
	HOST     = "mydemoserver.postgres.database.azure.com"
	DATABASE = "postgres"
	USER     = "mylogin"
	PASSWORD = "<server_admin_password>"
)

func checkError(err error) {
	if err != nil {
		panic(err)
	}
}

func main() {

	// Initialize connection string.
	var connectionString string = 
		fmt.Sprintf("host=%s user=%s password=%s dbname=%s sslmode=require", HOST, USER, PASSWORD, DATABASE)

	// Initialize connection object.
	db, err := sql.Open("postgres", connectionString)
	checkError(err)

	err = db.Ping()
	checkError(err)
	fmt.Println("Successfully created connection to database")

	// Modify some data in table.
	sql_statement := "UPDATE inventory SET quantity = $2 WHERE name = $1;"
	_, err = db.Exec(sql_statement, "banana", 200)
	checkError(err)
	fmt.Println("Updated 1 row of data")
}
Delete data
Use the following code to connect and delete the data using aDELETESQL statement.
The code imports three packages: thesql package, thepq packageas a driver to communicate with the Postgres server, and thefmt packagefor printed input and output on the command line.
The code calls methodsql.Open()to connect to Azure Database for PostgreSQL database, and checks the connection using methoddb.Ping(). Adatabase handleis used throughout, holding the connection pool for the database server. The code calls theExec()method to run the SQL statement that deletes a row from the table. A custom checkError() method is used to check if an error occurred and panic to exit if an error does occur.
Replace theHOST,DATABASE,USER, andPASSWORDparameters with your own values.
HOST
DATABASE
USER
PASSWORD
package main

import (
  "database/sql"
  _ "github.com/lib/pq"
  "fmt"
)

const (
	// Initialize connection constants.
	HOST     = "mydemoserver.postgres.database.azure.com"
	DATABASE = "postgres"
	USER     = "mylogin"
	PASSWORD = "<server_admin_password>"
)

func checkError(err error) {
	if err != nil {
		panic(err)
	}
}

func main() {

	// Initialize connection string.
	var connectionString string = 
		fmt.Sprintf("host=%s user=%s password=%s dbname=%s sslmode=require", HOST, USER, PASSWORD, DATABASE)

	// Initialize connection object.
	db, err := sql.Open("postgres", connectionString)
	checkError(err)

	err = db.Ping()
	checkError(err)
	fmt.Println("Successfully created connection to database")

	// Delete some data from table.
	sql_statement := "DELETE FROM inventory WHERE name = $1;"
	_, err = db.Exec(sql_statement, "orange")
	checkError(err)
	fmt.Println("Deleted 1 row of data")
}
package main

import (
  "database/sql"
  _ "github.com/lib/pq"
  "fmt"
)

const (
	// Initialize connection constants.
	HOST     = "mydemoserver.postgres.database.azure.com"
	DATABASE = "postgres"
	USER     = "mylogin"
	PASSWORD = "<server_admin_password>"
)

func checkError(err error) {
	if err != nil {
		panic(err)
	}
}

func main() {

	// Initialize connection string.
	var connectionString string = 
		fmt.Sprintf("host=%s user=%s password=%s dbname=%s sslmode=require", HOST, USER, PASSWORD, DATABASE)

	// Initialize connection object.
	db, err := sql.Open("postgres", connectionString)
	checkError(err)

	err = db.Ping()
	checkError(err)
	fmt.Println("Successfully created connection to database")

	// Delete some data from table.
	sql_statement := "DELETE FROM inventory WHERE name = $1;"
	_, err = db.Exec(sql_statement, "orange")
	checkError(err)
	fmt.Println("Deleted 1 row of data")
}
Clean up resources
To clean up all resources used during this quickstart, delete the resource group using the following command:
az group delete \
    --name $AZ_RESOURCE_GROUP \
    --yes
az group delete \
    --name $AZ_RESOURCE_GROUP \
    --yes
Related content
Manage Azure Database for PostgreSQL flexible server.
Quickstart: Use Python to connect and query data from an Azure Database for PostgreSQL flexible server.
Quickstart: Use Java to connect and query data from an Azure Database for PostgreSQL flexible server.
Quickstart: Use .NET (C#) to connect and query data from an Azure Database for PostgreSQL flexible server.
Quickstart: Use PHP to connect and query data from an Azure Database for PostgreSQL flexible server.
Quickstart: Use Azure CLI to connect and query data from an Azure Database for PostgreSQL flexible server.
Quickstart: Import data from Azure Database for PostgreSQL flexible server in Power BI.
Feedback
Was this page helpful?
Additional resources