Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Strangler Fig pattern
Article
2025-02-19
7 contributors
In this article
This pattern incrementally migrates a legacy system by gradually replacing specific pieces of functionality with new applications and services. As you replace features from the legacy system, the new system eventually comprises all of the old system's features. This approach suppresses the old system so that you can decommission it.
Context and problem
As systems age, the development tools, hosting technology, and system architectures that they're built on can become obsolete. As new features and functionality are added, these applications become more complex, which can make them harder to maintain or extend.
Replacing an entire complex system is a huge undertaking. Instead, many teams prefer to migrate to a new system gradually and keep the old system to handle unmigrated features. However, running two separate versions of an application forces clients to track which version has individual features. Every time teams migrate a feature or service, they must direct clients to the new location. To overcome these challenges, you can adopt an approach that supports incremental migration and minimizes disruptions to clients.
Solution
Use an incremental process to replace specific pieces of functionality with new applications and services. Customers can continue using the same interface, unaware that this migration is taking place.

The Strangler Fig pattern provides a controlled and phased approach to modernization. It allows the existing application to continue functioning during the modernization effort. A faÃ§ade (proxy) intercepts requests that go to the back-end legacy system. The faÃ§ade routes these requests either to the legacy application or to the new services.
This pattern reduces risks in migration by enabling your teams to move forward at a pace that suits the complexity of the project. As you migrate functionality to the new system, the legacy system becomes obsolete, and you decommission the legacy system.
The Strangler Fig pattern begins by introducing a faÃ§ade (proxy) between the client app, the legacy system, and the new system. The faÃ§ade acts as an intermediary. It allows the client app to interact with the legacy system and the new system. Initially, the faÃ§ade routes most requests to the legacy system.
The Strangler Fig pattern begins by introducing a faÃ§ade (proxy) between the client app, the legacy system, and the new system. The faÃ§ade acts as an intermediary. It allows the client app to interact with the legacy system and the new system. Initially, the faÃ§ade routes most requests to the legacy system.
As the migration progresses, the faÃ§ade incrementally shifts requests from the legacy system to the new system. With each iteration, you implement more pieces of functionality in the new system.This incremental approach gradually reduces the legacy system's responsibilities and expands the scope of the new system. The process is iterative. It allows the team to address complexities and dependencies in manageable stages. These stages help the system remain stable and functional.
As the migration progresses, the faÃ§ade incrementally shifts requests from the legacy system to the new system. With each iteration, you implement more pieces of functionality in the new system.
This incremental approach gradually reduces the legacy system's responsibilities and expands the scope of the new system. The process is iterative. It allows the team to address complexities and dependencies in manageable stages. These stages help the system remain stable and functional.
After you migrate all of the functionality and there are no dependencies on the legacy system, you can decommission the legacy system. The faÃ§ade routes all requests exclusively to the new system.
After you migrate all of the functionality and there are no dependencies on the legacy system, you can decommission the legacy system. The faÃ§ade routes all requests exclusively to the new system.
You remove the faÃ§ade and reconfigure the client app to communicate directly with the new system. This step marks the completion of the migration.
You remove the faÃ§ade and reconfigure the client app to communicate directly with the new system. This step marks the completion of the migration.
Problems and considerations
Consider the following points as you decide how to implement this pattern:
Consider how to handle services and data stores that both the new system and the legacy system might use. Make sure that both systems can access these resources at the same time.
Consider how to handle services and data stores that both the new system and the legacy system might use. Make sure that both systems can access these resources at the same time.
Structure new applications and services so that you can easily intercept and replace them in future strangler fig migrations. For example, strive to have clear demarcations between parts of your solution so that you can migrate each part individually.
Structure new applications and services so that you can easily intercept and replace them in future strangler fig migrations. For example, strive to have clear demarcations between parts of your solution so that you can migrate each part individually.
After the migration is complete, you typically remove the strangler fig faÃ§ade. Alternatively, you can maintain the faÃ§ade as an adaptor for legacy clients to use while you update the core system for newer clients.
After the migration is complete, you typically remove the strangler fig faÃ§ade. Alternatively, you can maintain the faÃ§ade as an adaptor for legacy clients to use while you update the core system for newer clients.
Make sure that the faÃ§ade keeps up with the migration.
Make sure that the faÃ§ade keeps up with the migration.
Make sure that the faÃ§ade doesn't become a single point of failure or a performance bottleneck.
Make sure that the faÃ§ade doesn't become a single point of failure or a performance bottleneck.
When to use this pattern
Use this pattern when:
You gradually migrate a back-end application to a new architecture, especially when replacing large systems, key components, or complex features introduces risk.
You gradually migrate a back-end application to a new architecture, especially when replacing large systems, key components, or complex features introduces risk.
The original system can continue to exist for an extended period of time during the migration effort.
The original system can continue to exist for an extended period of time during the migration effort.
This pattern might not be suitable when:
Requests to the back-end system can't be intercepted.
Requests to the back-end system can't be intercepted.
You migrate a small system and replacing the whole system is simple.
You migrate a small system and replacing the whole system is simple.
You need to fully decommission the original solution quickly.
You need to fully decommission the original solution quickly.
Workload design
Evaluate how to use the Strangler Fig pattern in a workload's design to address the goals and principles of theAzure Well-Architected Framework pillars. The following table provides guidance about how this pattern supports the goals of each pillar.
Consider any trade-offs against the goals of the other pillars that this pattern might introduce.
Example
Legacy systems typically depend on a centralized database. Over time, a centralized database can become difficult to manage and evolve because of its many dependencies. To address these challenges, various database patterns can facilitate the transition away from such legacy systems. The Strangler Fig pattern is one of these patterns. Apply the Strangler Fig pattern as a phased approach to gradually transition from a legacy system to a new system and minimize disruption.

You introduce a new system, and the new system starts handling some requests from the client app. However, the new system still depends on the legacy database for all read and write operations. The legacy system remains operational, which facilitates a smooth transition without immediate structural changes.
You introduce a new system, and the new system starts handling some requests from the client app. However, the new system still depends on the legacy database for all read and write operations. The legacy system remains operational, which facilitates a smooth transition without immediate structural changes.
In the next phase, you introduce a new database. You migrate data load history to the new database by using an extract, transform, and load (ETL) process. The ETL process synchronizes the new database with the legacy database. During this phase, the new system performs shadow writes. The new system updates both databases in parallel. The new system continues to read from the legacy database to validate consistency.
In the next phase, you introduce a new database. You migrate data load history to the new database by using an extract, transform, and load (ETL) process. The ETL process synchronizes the new database with the legacy database. During this phase, the new system performs shadow writes. The new system updates both databases in parallel. The new system continues to read from the legacy database to validate consistency.
Finally, the new database becomes the system of record. The new database takes over all read and write operations. You can start deprecating the legacy database and legacy system. After you validate the new database, you can retire the legacy database. This retirement completes the migration process with minimal disruption.
Finally, the new database becomes the system of record. The new database takes over all read and write operations. You can start deprecating the legacy database and legacy system. After you validate the new database, you can retire the legacy database. This retirement completes the migration process with minimal disruption.
Next step
Read Martin Fowler's blog post aboutStrangler Fig pattern application.
Related resource
Messaging Bridge pattern
Feedback
Was this page helpful?
Additional resources