Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Add maps for transformations in workflows with Azure Logic Apps
Article
2025-03-23
9 contributors
In this article
Applies to:Azure Logic Apps (Consumption + Standard)
Workflow actions such asTransform XMLandLiquidrequire a map to perform their tasks. For example, theTransform XMLaction requires a map to convert XML between formats. A map is an XML document that describes how to convert data from XML to another format. The map contents contain the source XML schema as input and a target XML schema as output. You can define a basic transformation, such as copying a name and address from one document to another. Or, you can create more complex transformations using the out-of-the-box map operations. You can manipulate or control data by using different built-in functions, such as string manipulations, conditional assignments, arithmetic expressions, date time formatters, and even looping constructs.
For example, suppose you regularly receive B2B orders or invoices from a customer who uses the YearMonthDay date format (YYYYMMDD). However, your organization uses the MonthDayYear date format (MMDDYYYY). You can define and use a map that transforms the YYYYMMDD format to the MMDDYYYY format before storing the order or invoice details in your customer activity database.
This guide shows how to add a map for your workflow to use. You can add maps either to your linked integration account, or if you have a Standard logic app, you can add maps directly to your logic app resource.
Prerequisites
An Azure account and subscription. If you don't have a subscription yet,sign up for a free Azure account.
An Azure account and subscription. If you don't have a subscription yet,sign up for a free Azure account.
The map that you want to upload.Consumption workflows support the following map types:Liquid,XSLT,XSLT 2.0,XSLT 3.0, orHIDX.Standard workflows support the following map types:XSLT,XSLT 2.0, andXSLT 3.0.To create maps, you can use any of the following tools:Visual Studio Code and the Data Mapper extension. To call the maps created with Data Mapper from your workflow, you must use theData Mapper Operationsaction namedTransform using Data Mapper XSLT, not theXML Operationsaction namedTransform XML. For more information, seeCreate maps for data transformation with Visual Studio Code.Visual Studio 2019 and theMicrosoft Azure Logic Apps Enterprise Integration Tools extension.NoteDon't install the Microsoft Azure Logic Apps Enterprise Integration Tools extension alongside the BizTalk Server extension.
Having both extensions might produce unexpected behavior. Make sure that you only have one of these extensions installed.On high resolution monitors, you might experience adisplay problem with the map designerin Visual Studio. To resolve this display problem, eitherrestart Visual Studio in DPI-unaware mode,
or add theDPIUNAWARE registry value.For more information, review theCreate mapssection in this article.
The map that you want to upload.
Consumption workflows support the following map types:Liquid,XSLT,XSLT 2.0,XSLT 3.0, orHIDX.
Consumption workflows support the following map types:Liquid,XSLT,XSLT 2.0,XSLT 3.0, orHIDX.
Standard workflows support the following map types:XSLT,XSLT 2.0, andXSLT 3.0.
Standard workflows support the following map types:XSLT,XSLT 2.0, andXSLT 3.0.
To create maps, you can use any of the following tools:Visual Studio Code and the Data Mapper extension. To call the maps created with Data Mapper from your workflow, you must use theData Mapper Operationsaction namedTransform using Data Mapper XSLT, not theXML Operationsaction namedTransform XML. For more information, seeCreate maps for data transformation with Visual Studio Code.Visual Studio 2019 and theMicrosoft Azure Logic Apps Enterprise Integration Tools extension.NoteDon't install the Microsoft Azure Logic Apps Enterprise Integration Tools extension alongside the BizTalk Server extension.
Having both extensions might produce unexpected behavior. Make sure that you only have one of these extensions installed.On high resolution monitors, you might experience adisplay problem with the map designerin Visual Studio. To resolve this display problem, eitherrestart Visual Studio in DPI-unaware mode,
or add theDPIUNAWARE registry value.For more information, review theCreate mapssection in this article.
To create maps, you can use any of the following tools:
Visual Studio Code and the Data Mapper extension. To call the maps created with Data Mapper from your workflow, you must use theData Mapper Operationsaction namedTransform using Data Mapper XSLT, not theXML Operationsaction namedTransform XML. For more information, seeCreate maps for data transformation with Visual Studio Code.
Visual Studio Code and the Data Mapper extension. To call the maps created with Data Mapper from your workflow, you must use theData Mapper Operationsaction namedTransform using Data Mapper XSLT, not theXML Operationsaction namedTransform XML. For more information, seeCreate maps for data transformation with Visual Studio Code.
Visual Studio 2019 and theMicrosoft Azure Logic Apps Enterprise Integration Tools extension.NoteDon't install the Microsoft Azure Logic Apps Enterprise Integration Tools extension alongside the BizTalk Server extension.
Having both extensions might produce unexpected behavior. Make sure that you only have one of these extensions installed.On high resolution monitors, you might experience adisplay problem with the map designerin Visual Studio. To resolve this display problem, eitherrestart Visual Studio in DPI-unaware mode,
or add theDPIUNAWARE registry value.For more information, review theCreate mapssection in this article.
Visual Studio 2019 and theMicrosoft Azure Logic Apps Enterprise Integration Tools extension.
Note
Don't install the Microsoft Azure Logic Apps Enterprise Integration Tools extension alongside the BizTalk Server extension.
Having both extensions might produce unexpected behavior. Make sure that you only have one of these extensions installed.
On high resolution monitors, you might experience adisplay problem with the map designerin Visual Studio. To resolve this display problem, eitherrestart Visual Studio in DPI-unaware mode,
or add theDPIUNAWARE registry value.
For more information, review theCreate mapssection in this article.
Based on whether you're working on a Consumption or Standard logic app workflow, you'll need anintegration account resource. Usually, you need this resource when you want to define and store artifacts for use in enterprise integration and B2B workflows.ImportantTo work together, both your integration account and logic app resource must exist in the same Azure subscription and Azure region.For a Consumption logic app workflow, you'll need anintegration account that's linked to your logic app resource.For a Standard logic app workflow, you can link your integration account to your logic app resource, upload maps directly to your logic app resource, or both, based on the following scenarios:If you already have an integration account with the artifacts that you need or want to use, you can link your integration account to multiple Standard logic app resources where you want to use the artifacts. That way, you don't have to upload maps to each individual logic app. For more information, reviewLink your logic app resource to your integration account.TheLiquidbuilt-in connector lets you select a map that you previously uploaded to your logic app resource or to a linked integration account, but not both.So, if you don't have or need an integration account, you can use the upload option. Otherwise, you can use the linking option. Either way, you can use these artifacts across all child workflows within the same logic app resource.
Based on whether you're working on a Consumption or Standard logic app workflow, you'll need anintegration account resource. Usually, you need this resource when you want to define and store artifacts for use in enterprise integration and B2B workflows.
Important
To work together, both your integration account and logic app resource must exist in the same Azure subscription and Azure region.
For a Consumption logic app workflow, you'll need anintegration account that's linked to your logic app resource.
For a Consumption logic app workflow, you'll need anintegration account that's linked to your logic app resource.
For a Standard logic app workflow, you can link your integration account to your logic app resource, upload maps directly to your logic app resource, or both, based on the following scenarios:If you already have an integration account with the artifacts that you need or want to use, you can link your integration account to multiple Standard logic app resources where you want to use the artifacts. That way, you don't have to upload maps to each individual logic app. For more information, reviewLink your logic app resource to your integration account.TheLiquidbuilt-in connector lets you select a map that you previously uploaded to your logic app resource or to a linked integration account, but not both.So, if you don't have or need an integration account, you can use the upload option. Otherwise, you can use the linking option. Either way, you can use these artifacts across all child workflows within the same logic app resource.
For a Standard logic app workflow, you can link your integration account to your logic app resource, upload maps directly to your logic app resource, or both, based on the following scenarios:
If you already have an integration account with the artifacts that you need or want to use, you can link your integration account to multiple Standard logic app resources where you want to use the artifacts. That way, you don't have to upload maps to each individual logic app. For more information, reviewLink your logic app resource to your integration account.
If you already have an integration account with the artifacts that you need or want to use, you can link your integration account to multiple Standard logic app resources where you want to use the artifacts. That way, you don't have to upload maps to each individual logic app. For more information, reviewLink your logic app resource to your integration account.
TheLiquidbuilt-in connector lets you select a map that you previously uploaded to your logic app resource or to a linked integration account, but not both.
TheLiquidbuilt-in connector lets you select a map that you previously uploaded to your logic app resource or to a linked integration account, but not both.
So, if you don't have or need an integration account, you can use the upload option. Otherwise, you can use the linking option. Either way, you can use these artifacts across all child workflows within the same logic app resource.
Consumption and Standard workflows support maps that reference external assemblies, which enable directly calling custom .NET code from maps. To support this capability, Consumption workflows also have the following requirements:You need a 64-bit assembly. The transform service runs a 64-bit process, so 32-bit assemblies aren't supported. If you have the source code for a 32-bit assembly, recompile the code into a 64-bit assembly. If you don't have the source code, but you obtained the binary from another provider, get the 64-bit version from that provider. For example, some vendors provide assemblies in packages that have both 32-bit and 64-bit versions. If you have the option, use the 64-bit version instead.You have to uploadboth the assembly and the mapin a specific order to your integration account. Make sure that youupload your assembly first, and then upload the map that references the assembly.If your assembly or map is2 MB or smaller, you can add your assembly and map to your integration accountdirectlyfrom the Azure portal.If your assembly is bigger than 2 MB but not bigger than thesize limit for assemblies, you'll need an Azure storage account and blob container where you can upload your assembly. Later, you can provide that container's location when you add the assembly to your integration account. For this task, the following table describes the items you need:ItemDescriptionAzure storage accountIn this account, create an Azure blob container for your assembly. Learnhow to create a storage account.Blob containerIn this container, you can upload your assembly. You also need this container's content URI location when you add the assembly to your integration account. Learn how tocreate a blob container.Azure Storage ExplorerThis tool helps you more easily manage storage accounts and blob containers. To use Storage Explorer, eitherdownload and locally install Azure Storage Explorer. Then, connect Storage Explorer to your storage account by following the steps inGet started with Storage Explorer. For more information, seeQuickstart: Create a blob in object storage with Azure Storage Explorer.To add larger maps, you can use theAzure Logic Apps REST API - Maps. For Standard workflows, the Azure Logic Apps REST API is currently unavailable.
Consumption and Standard workflows support maps that reference external assemblies, which enable directly calling custom .NET code from maps. To support this capability, Consumption workflows also have the following requirements:
You need a 64-bit assembly. The transform service runs a 64-bit process, so 32-bit assemblies aren't supported. If you have the source code for a 32-bit assembly, recompile the code into a 64-bit assembly. If you don't have the source code, but you obtained the binary from another provider, get the 64-bit version from that provider. For example, some vendors provide assemblies in packages that have both 32-bit and 64-bit versions. If you have the option, use the 64-bit version instead.
You need a 64-bit assembly. The transform service runs a 64-bit process, so 32-bit assemblies aren't supported. If you have the source code for a 32-bit assembly, recompile the code into a 64-bit assembly. If you don't have the source code, but you obtained the binary from another provider, get the 64-bit version from that provider. For example, some vendors provide assemblies in packages that have both 32-bit and 64-bit versions. If you have the option, use the 64-bit version instead.
You have to uploadboth the assembly and the mapin a specific order to your integration account. Make sure that youupload your assembly first, and then upload the map that references the assembly.
You have to uploadboth the assembly and the mapin a specific order to your integration account. Make sure that youupload your assembly first, and then upload the map that references the assembly.
If your assembly or map is2 MB or smaller, you can add your assembly and map to your integration accountdirectlyfrom the Azure portal.
If your assembly or map is2 MB or smaller, you can add your assembly and map to your integration accountdirectlyfrom the Azure portal.
If your assembly is bigger than 2 MB but not bigger than thesize limit for assemblies, you'll need an Azure storage account and blob container where you can upload your assembly. Later, you can provide that container's location when you add the assembly to your integration account. For this task, the following table describes the items you need:ItemDescriptionAzure storage accountIn this account, create an Azure blob container for your assembly. Learnhow to create a storage account.Blob containerIn this container, you can upload your assembly. You also need this container's content URI location when you add the assembly to your integration account. Learn how tocreate a blob container.Azure Storage ExplorerThis tool helps you more easily manage storage accounts and blob containers. To use Storage Explorer, eitherdownload and locally install Azure Storage Explorer. Then, connect Storage Explorer to your storage account by following the steps inGet started with Storage Explorer. For more information, seeQuickstart: Create a blob in object storage with Azure Storage Explorer.To add larger maps, you can use theAzure Logic Apps REST API - Maps. For Standard workflows, the Azure Logic Apps REST API is currently unavailable.
If your assembly is bigger than 2 MB but not bigger than thesize limit for assemblies, you'll need an Azure storage account and blob container where you can upload your assembly. Later, you can provide that container's location when you add the assembly to your integration account. For this task, the following table describes the items you need:
To add larger maps, you can use theAzure Logic Apps REST API - Maps. For Standard workflows, the Azure Logic Apps REST API is currently unavailable.
Limitations
Limits apply to the number of artifacts, such as maps, per integration account. For more information, reviewLimits and configuration information for Azure Logic Apps.
Limits apply to the number of artifacts, such as maps, per integration account. For more information, reviewLimits and configuration information for Azure Logic Apps.
Based on whether you're working on a Consumption or Standard logic app workflow, the following limitations apply:Consumption workflowsAzure Logic Apps allocates finite memory for processing XML transformations. If you create Consumption workflows, and your map or payload transformations have high memory consumption, such transformations might fail, resulting in out of memory errors. To avoid this scenario, consider these options:Edit your maps or payloads to reduce memory consumption.CreateStandard logic app workflows, which run in single-tenant Azure Logic Apps and offer dedicated and flexible options for compute and memory resources.Standard workflows support fewer map types than Consumption workflows, but no limits apply to map file sizes. For more information, seePrerequisites.
Based on whether you're working on a Consumption or Standard logic app workflow, the following limitations apply:
Consumption workflowsAzure Logic Apps allocates finite memory for processing XML transformations. If you create Consumption workflows, and your map or payload transformations have high memory consumption, such transformations might fail, resulting in out of memory errors. To avoid this scenario, consider these options:Edit your maps or payloads to reduce memory consumption.CreateStandard logic app workflows, which run in single-tenant Azure Logic Apps and offer dedicated and flexible options for compute and memory resources.
Consumption workflows
Azure Logic Apps allocates finite memory for processing XML transformations. If you create Consumption workflows, and your map or payload transformations have high memory consumption, such transformations might fail, resulting in out of memory errors. To avoid this scenario, consider these options:Edit your maps or payloads to reduce memory consumption.CreateStandard logic app workflows, which run in single-tenant Azure Logic Apps and offer dedicated and flexible options for compute and memory resources.
Azure Logic Apps allocates finite memory for processing XML transformations. If you create Consumption workflows, and your map or payload transformations have high memory consumption, such transformations might fail, resulting in out of memory errors. To avoid this scenario, consider these options:
Edit your maps or payloads to reduce memory consumption.
Edit your maps or payloads to reduce memory consumption.
CreateStandard logic app workflows, which run in single-tenant Azure Logic Apps and offer dedicated and flexible options for compute and memory resources.
CreateStandard logic app workflows, which run in single-tenant Azure Logic Apps and offer dedicated and flexible options for compute and memory resources.
Standard workflows support fewer map types than Consumption workflows, but no limits apply to map file sizes. For more information, seePrerequisites.
Standard workflows support fewer map types than Consumption workflows, but no limits apply to map file sizes. For more information, seePrerequisites.

Create maps
You can create maps using either Visual Studio Code with the Data Mapper extension or Visual Studio with the Microsoft Azure Logic Apps Enterprise Integration Tools extension.
Visual Studio Code
When you create maps using Visual Studio Code and the Data Mapper extension, you can call these maps from your workflow, but only with theData Mapper Operationsaction namedTransform using Data Mapper XSLT, not theXML Operationsaction namedTransform XML. For more information, seeCreate maps for data transformation with Visual Studio Code.
Visual Studio
If you create maps with Visual Studio, you'll need to create an integration project with Visual Studio 2019 and theMicrosoft Azure Logic Apps Enterprise Integration Tools extension.
In the integration project, you can build an integration map file, which lets you visually map items between two XML schema files. These tools offer the following map capabilities:
You work with a graphical representation of the map, which shows all the relationships and links you create.
You work with a graphical representation of the map, which shows all the relationships and links you create.
You can make a direct data copy between the XML schemas that you use to create the map. The Enterprise Integration SDK for Visual Studio includes a mapper that makes this task as simple as drawing a line that connects the elements in the source XML schema with their counterparts in the target XML schema.
You can make a direct data copy between the XML schemas that you use to create the map. The Enterprise Integration SDK for Visual Studio includes a mapper that makes this task as simple as drawing a line that connects the elements in the source XML schema with their counterparts in the target XML schema.
Operations or functions for multiple maps are available, including string functions, date time functions, and so on.
Operations or functions for multiple maps are available, including string functions, date time functions, and so on.
To add a sample XML message, you can use the map testing capability. With just one gesture, you can test the map you created, and review the generated output.
To add a sample XML message, you can use the map testing capability. With just one gesture, you can test the map you created, and review the generated output.
After you build your project, you get an XSLT document.
After you build your project, you get an XSLT document.
Your map must have the following attributes and aCDATAsection that contains the call to the assembly code:
CDATA
nameis the custom assembly name.
nameis the custom assembly name.
name
namespaceis the namespace in your assembly that includes the custom code.
namespaceis the namespace in your assembly that includes the custom code.
namespace
The following example shows a map that references an assembly namedXslUtilitiesLiband calls thecircumferencemethod from the assembly.
circumference
<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:msxsl="urn:schemas-microsoft-com:xslt" xmlns:user="urn:my-scripts">
<msxsl:script language="C#" implements-prefix="user">
    <msxsl:assembly name="XsltHelperLib"/>
    <msxsl:using namespace="XsltHelpers"/>
    <![CDATA[public double circumference(int radius){ XsltHelper helper = new XsltHelper(); return helper.circumference(radius); }]]>
</msxsl:script>
<xsl:template match="data">
<circles>
    <xsl:for-each select="circle">
        <circle>
            <xsl:copy-of select="node()"/>
                <circumference>
                    <xsl:value-of select="user:circumference(radius)"/>
                </circumference>
        </circle>
    </xsl:for-each>
</circles>
</xsl:template>
</xsl:stylesheet>
<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:msxsl="urn:schemas-microsoft-com:xslt" xmlns:user="urn:my-scripts">
<msxsl:script language="C#" implements-prefix="user">
    <msxsl:assembly name="XsltHelperLib"/>
    <msxsl:using namespace="XsltHelpers"/>
    <![CDATA[public double circumference(int radius){ XsltHelper helper = new XsltHelper(); return helper.circumference(radius); }]]>
</msxsl:script>
<xsl:template match="data">
<circles>
    <xsl:for-each select="circle">
        <circle>
            <xsl:copy-of select="node()"/>
                <circumference>
                    <xsl:value-of select="user:circumference(radius)"/>
                </circumference>
        </circle>
    </xsl:for-each>
</circles>
</xsl:template>
</xsl:stylesheet>

Add referenced assemblies
Consumption
Standard
A Consumption logic app resource supports referencing external assemblies from maps, which enable directly calling custom .NET code from maps.
In theAzure portalsearch box, enterintegration accounts, and selectIntegration accounts.
In theAzure portalsearch box, enterintegration accounts, and selectIntegration accounts.
Select the integration account where you want to add your assembly.
Select the integration account where you want to add your assembly.
On the integration account menu, selectOverview. UnderSettings, selectAssemblies.
On the integration account menu, selectOverview. UnderSettings, selectAssemblies.
On theAssembliespage toolbar, selectAdd.
On theAssembliespage toolbar, selectAdd.
Based on your assembly file's size, follow the steps for uploading an assembly that's eitherup to 2 MBormore than 2 MB but only up to 8 MB. For limits on assembly quantities in integration accounts, reviewLimits and configuration for Azure Logic Apps.
Note
If you change your assembly, you must also update your map whether or not the map has changes.

UnderAdd Assembly, enter a name for your assembly. KeepSmall fileselected. Next to theAssemblybox, select the folder icon. Find and select the assembly you're uploading.After you select the assembly, theAssembly Nameproperty automatically shows the assembly's file name.
UnderAdd Assembly, enter a name for your assembly. KeepSmall fileselected. Next to theAssemblybox, select the folder icon. Find and select the assembly you're uploading.
After you select the assembly, theAssembly Nameproperty automatically shows the assembly's file name.
When you're done, selectOK.After your assembly file finishes uploading, the assembly appears in theAssemblieslist. On your integration accountOverviewpage, underArtifacts, your uploaded assembly also appears.
When you're done, selectOK.
After your assembly file finishes uploading, the assembly appears in theAssemblieslist. On your integration accountOverviewpage, underArtifacts, your uploaded assembly also appears.

To add larger assemblies, you can upload your assembly to an Azure blob container in your Azure storage account. Your steps for adding assemblies differ based whether your blob container has public read access. So first, check whether or not your blob container has public read access by following these steps:Set public access level for blob container
Open Azure Storage Explorer. In theExplorerwindow, expand your Azure subscription.
Open Azure Storage Explorer. In theExplorerwindow, expand your Azure subscription.
ExpandStorage Accounts><storage-account-name>>Blob Containers. Select your blob container.
ExpandStorage Accounts><storage-account-name>>Blob Containers. Select your blob container.
From your blob container's shortcut menu, selectSet Public Access Level.If your blob container has at least public access, selectCancel, and follow these steps later on this page:Upload to containers with public accessIf your blob container doesn't have public access, selectCancel, and follow these steps later on this page:Upload to containers without public access
From your blob container's shortcut menu, selectSet Public Access Level.
If your blob container has at least public access, selectCancel, and follow these steps later on this page:Upload to containers with public access
If your blob container has at least public access, selectCancel, and follow these steps later on this page:Upload to containers with public access

If your blob container doesn't have public access, selectCancel, and follow these steps later on this page:Upload to containers without public access
If your blob container doesn't have public access, selectCancel, and follow these steps later on this page:Upload to containers without public access


To upload an assembly to your blob container, follow these steps:
Open Azure Storage Explorer, if not already open. In theExplorerwindow, expand your Azure subscription.
Open Azure Storage Explorer, if not already open. In theExplorerwindow, expand your Azure subscription.
ExpandStorage Accounts><storage-account-name>>Blob Containers. Select the blob container where you want to add the assembly.
ExpandStorage Accounts><storage-account-name>>Blob Containers. Select the blob container where you want to add the assembly.
On the blob container toolbar, selectUpload>Upload Files. In theUpload Filesbox, browse to and select your assembly file. When you're ready, selectUpload.
On the blob container toolbar, selectUpload>Upload Files. In theUpload Filesbox, browse to and select your assembly file. When you're ready, selectUpload.
After you finish uploading, open the shortcut menu for your uploaded assembly, and selectCopy URL.
After you finish uploading, open the shortcut menu for your uploaded assembly, and selectCopy URL.
Return to the Azure portal where theAdd Assemblypane is open. Enter a name for your assembly. SelectLarge file (larger than 2 MB).TheContent URIbox now appears, rather than theAssemblybox.
Return to the Azure portal where theAdd Assemblypane is open. Enter a name for your assembly. SelectLarge file (larger than 2 MB).
TheContent URIbox now appears, rather than theAssemblybox.
In theContent URIbox, paste your assembly's URL. Finish adding your assembly.After your assembly finishes uploading, the assembly appears in theAssemblieslist. On your integration accountOverviewpage, underArtifacts, your uploaded assembly also appears.
In theContent URIbox, paste your assembly's URL. Finish adding your assembly.
After your assembly finishes uploading, the assembly appears in theAssemblieslist. On your integration accountOverviewpage, underArtifacts, your uploaded assembly also appears.

To upload an assembly to your blob container, follow these steps:
Open Azure Storage Explorer, if not already open. In theExplorerwindow, expand your Azure subscription.
Open Azure Storage Explorer, if not already open. In theExplorerwindow, expand your Azure subscription.
ExpandStorage Accounts><storage-account-name>>Blob Containers. Select the blob container where you want to add the assembly.
ExpandStorage Accounts><storage-account-name>>Blob Containers. Select the blob container where you want to add the assembly.
On the blob container toolbar, selectUpload>Upload Files. In theUpload Filesbox, browse to and select your assembly files. When you're ready, selectUpload.
On the blob container toolbar, selectUpload>Upload Files. In theUpload Filesbox, browse to and select your assembly files. When you're ready, selectUpload.
After you finish uploading, generate a shared access signature (SAS) for your assembly. From your assembly's shortcut menu, selectGet Shared Access Signature.
After you finish uploading, generate a shared access signature (SAS) for your assembly. From your assembly's shortcut menu, selectGet Shared Access Signature.
In theShared Access Signaturebox, review the available options. When you're ready, selectCreate. After Storage Explorer generates the SAS URL, under theURLbox, selectCopy.
In theShared Access Signaturebox, review the available options. When you're ready, selectCreate. After Storage Explorer generates the SAS URL, under theURLbox, selectCopy.
Return to the Azure portal where theAdd Assemblypane is open. Enter a name for your assembly. SelectLarge file (larger than 2 MB).TheContent URIbox now appears, rather than theAssemblybox.
Return to the Azure portal where theAdd Assemblypane is open. Enter a name for your assembly. SelectLarge file (larger than 2 MB).
TheContent URIbox now appears, rather than theAssemblybox.
In theContent URIbox, paste the SAS URI that you previously created. Finish adding your assembly.
In theContent URIbox, paste the SAS URI that you previously created. Finish adding your assembly.
After your assembly finishes uploading, the assembly appears in theAssemblieslist. On your integration account'sOverviewpage, underArtifacts, your uploaded assembly also appears.
A Standard logic app resource supports referencing external assemblies from maps. For example, this capability enables your workflow to call custom .NET Framework code from maps. For more information, seeCreate and run .NET Framework code from Standard workflows.
The following table describes the supported assembly types:
In theAzure portalsearch box, find and open your logic app resource.
In theAzure portalsearch box, find and open your logic app resource.
On the logic app menu, underArtifacts, selectAssemblies.
On the logic app menu, underArtifacts, selectAssemblies.
On theAssembliespage toolbar, selectAdd. On theAdd Assemblypane, underAssembly Type, select the matching assembly type.
On theAssembliespage toolbar, selectAdd. On theAdd Assemblypane, underAssembly Type, select the matching assembly type.
Now, either drag your assemblies to theUpload Filesarea, or find and select your assemblies.
Now, either drag your assemblies to theUpload Filesarea, or find and select your assemblies.
When you're done, selectUpload Files.Your selected assemblies now appear on your logic app'sAssembliespage.
When you're done, selectUpload Files.
Your selected assemblies now appear on your logic app'sAssembliespage.
On your computer, go to your project's local folder, and expand thelibfolder.
On your computer, go to your project's local folder, and expand thelibfolder.
Choose from the following options, based on the assembly type:Assembly typeFile extensionFolder locationClient or SDK Assembly (.NET Framework).dllbuiltinOperationSdks>net472Client or SDK Assembly (Java).jarbuiltinOperationSdks>JARCustom Assembly (.NET Framework or .NET 8).dllcustom>net472
Choose from the following options, based on the assembly type:
Return to Visual Studio Code.Your assembly file now appears in your project, for example:
Return to Visual Studio Code.
Your assembly file now appears in your project, for example:


Add maps
If you're working with a Consumption workflow, you must add your map to a linked integration account.
If you're working with a Consumption workflow, you must add your map to a linked integration account.
If you're working with a Standard workflow, you have the following options:Add your map to a linked integration account. You can share the map and integration account across multiple Standard logic app resources and their child workflows.Add your map directly to your logic app resource. However, you can only share that map across child workflows in the same logic app resource.
If you're working with a Standard workflow, you have the following options:
Add your map to a linked integration account. You can share the map and integration account across multiple Standard logic app resources and their child workflows.
Add your map to a linked integration account. You can share the map and integration account across multiple Standard logic app resources and their child workflows.
Add your map directly to your logic app resource. However, you can only share that map across child workflows in the same logic app resource.
Add your map directly to your logic app resource. However, you can only share that map across child workflows in the same logic app resource.

Add map to integration account
In theAzure portal, sign in with your Azure account credentials.
In theAzure portal, sign in with your Azure account credentials.
In the Azure portal search box, enterintegration accounts, and selectIntegration accounts.
In the Azure portal search box, enterintegration accounts, and selectIntegration accounts.
Find and select your integration account.
Find and select your integration account.
On the integration account menu, underSettings, selectMaps.
On the integration account menu, underSettings, selectMaps.
On theMapspage toolbar, selectAdd.
On theMapspage toolbar, selectAdd.
For Consumption workflows, based on your map's file size, now follow the steps for uploading a map that's eitherup to 2 MBormore than 2 MB.

On theAdd Mappane, enter a unique name for your map.
On theAdd Mappane, enter a unique name for your map.
UnderMap type, select the type, for example:Liquid,XSLT,XSLT 2.0,XSLT 3.0, orHIDX.
UnderMap type, select the type, for example:Liquid,XSLT,XSLT 2.0,XSLT 3.0, orHIDX.
Next to theMapbox, select the folder icon. Select the map to upload, and then selectOpen.If you left theNameproperty empty, the map's file name automatically appears in that property after you select the map file.
Next to theMapbox, select the folder icon. Select the map to upload, and then selectOpen.
If you left theNameproperty empty, the map's file name automatically appears in that property after you select the map file.
When you're done, selectOK.After your map file finishes uploading, the map appears in theMapslist. If the map doesn't appear, on theMapstoolbar, selectRefresh. On your integration accountOverviewpage, underArtifacts, your uploaded map also appears.
When you're done, selectOK.
After your map file finishes uploading, the map appears in theMapslist. If the map doesn't appear, on theMapstoolbar, selectRefresh. On your integration accountOverviewpage, underArtifacts, your uploaded map also appears.

To add larger maps for Consumption workflows, use theAzure Logic Apps REST API - Maps.
Add map to Standard logic app resource
The following steps apply only if you want to add a map directly to your Standard logic app resource. Otherwise,add the map to your integration account.
On your logic app menu, underArtifacts, selectMaps.
On your logic app menu, underArtifacts, selectMaps.
On theMapspage toolbar, selectAdd.
On theMapspage toolbar, selectAdd.
On theAdd Mappane, enter a unique name for your map and include the file extension, for example,.xslt,.hidx, or.liquid.
On theAdd Mappane, enter a unique name for your map and include the file extension, for example,.xslt,.hidx, or.liquid.
Next to theMapbox, select the folder icon. Select the map to upload.
Next to theMapbox, select the folder icon. Select the map to upload.
When you're done, selectOK.After your map file finishes uploading, the map appears in theMapslist. On your integration account'sOverviewpage, underArtifacts, your uploaded map also appears.
When you're done, selectOK.
After your map file finishes uploading, the map appears in theMapslist. On your integration account'sOverviewpage, underArtifacts, your uploaded map also appears.
On your computer, go to your project'slocalfolder, and expand the following folders:Artifacts>Maps.
On your computer, go to your project'slocalfolder, and expand the following folders:Artifacts>Maps.
In theMapsfolder, add your map file.
In theMapsfolder, add your map file.
Return to Visual Studio Code.Your map file now appears in your project, for example:
Return to Visual Studio Code.
Your map file now appears in your project, for example:


Edit a map
To update an existing map, you have to upload a new map file that has the changes you want. However, you can first download the existing map for editing.
Consumption
Standard
In theAzure portal, open your integration account, if not already open.
In theAzure portal, open your integration account, if not already open.
On the integration account menu, underSettings, selectMaps.
On the integration account menu, underSettings, selectMaps.
After theMapspage opens, select your map. To download and edit the map first, on theMapspage toolbar, selectDownload, and save the map.
After theMapspage opens, select your map. To download and edit the map first, on theMapspage toolbar, selectDownload, and save the map.
When you're ready to upload the updated map, on theMapspage, select the map that you want to update. On theMapspage toolbar, selectUpdate.
When you're ready to upload the updated map, on theMapspage, select the map that you want to update. On theMapspage toolbar, selectUpdate.
Find and select the updated map you want to upload.After your map file finishes uploading, the updated map appears in theMapslist.
Find and select the updated map you want to upload.
After your map file finishes uploading, the updated map appears in theMapslist.
In theAzure portal, open your logic app resource, if not already open.
In theAzure portal, open your logic app resource, if not already open.
On the logic app menu, underSettings, selectMaps.
On the logic app menu, underSettings, selectMaps.
After theMapspage opens, select your map. To download and edit the map first, on theMapspage toolbar, selectDownload, and save the map.
After theMapspage opens, select your map. To download and edit the map first, on theMapspage toolbar, selectDownload, and save the map.
On theMapspage toolbar, selectAdd.
On theMapspage toolbar, selectAdd.
UnderAdd map, enter a unique name for your map and include the file extension.
UnderAdd map, enter a unique name for your map and include the file extension.
Next to theMapbox, select the folder icon. Select the map to upload.
Next to theMapbox, select the folder icon. Select the map to upload.
When you're done, selectOK.After your map file finishes uploading, the updated map appears in theMapslist.
When you're done, selectOK.
After your map file finishes uploading, the updated map appears in theMapslist.

Delete a map
Consumption
Standard
In theAzure portal, open your integration account, if not already open.
In theAzure portal, open your integration account, if not already open.
On the integration account menu, underSettings, selectMaps.
On the integration account menu, underSettings, selectMaps.
After theMapspage opens, select your map, and then selectDelete.
After theMapspage opens, select your map, and then selectDelete.
To confirm you want to delete the map, selectYes.
To confirm you want to delete the map, selectYes.
In theAzure portal, open your logic app resource, if not already open.
In theAzure portal, open your logic app resource, if not already open.
On the logic app menu, underSettings, selectMaps.
On the logic app menu, underSettings, selectMaps.
After theMapspage opens, select your map, and then selectDelete.
After theMapspage opens, select your map, and then selectDelete.
To confirm you want to delete the map, selectYes.
To confirm you want to delete the map, selectYes.
Related content
Transform XML for workflows in Azure Logic Apps
Validate XML for workflows in Azure Logic Apps
Feedback
Was this page helpful?
Additional resources