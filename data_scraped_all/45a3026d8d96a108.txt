Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Roll out features to targeted audiences in an ASP.NET Core application
Article
2025-01-13
7 contributors
In this article
In this guide, you'll use the targeting filter to roll out a feature to targeted audiences for your ASP.NET Core application. For more information about the targeting filter, seeRoll out features to targeted audiences.
Prerequisites
An Azure account with an active subscription.Create one for free.
An App Configuration store.Create a store.
A feature flag with targeting filter.Create the feature flag.
.NET SDK 6.0 or later.
Create a web application with a feature flag
In this section, you create a web application that allows users to sign in and use theBetafeature flag you created before.
Create a web application that authenticates against a local database using the following command.dotnet new webapp --auth Individual -o TestFeatureFlags
Create a web application that authenticates against a local database using the following command.
dotnet new webapp --auth Individual -o TestFeatureFlags
dotnet new webapp --auth Individual -o TestFeatureFlags
Navigate to the newly createdTestFeatureFlagsdirectory and add references to the following NuGet packages.Microsoft Entra ID (recommended)Connection stringdotnet add package Microsoft.Azure.AppConfiguration.AspNetCore
dotnet add package Microsoft.FeatureManagement.AspNetCore
dotnet add package Azure.Identitydotnet add package Microsoft.Azure.AppConfiguration.AspNetCore
dotnet add package Microsoft.FeatureManagement.AspNetCore
Navigate to the newly createdTestFeatureFlagsdirectory and add references to the following NuGet packages.
Microsoft Entra ID (recommended)
Connection string
dotnet add package Microsoft.Azure.AppConfiguration.AspNetCore
dotnet add package Microsoft.FeatureManagement.AspNetCore
dotnet add package Azure.Identity
dotnet add package Microsoft.Azure.AppConfiguration.AspNetCore
dotnet add package Microsoft.FeatureManagement.AspNetCore
dotnet add package Azure.Identity
dotnet add package Microsoft.Azure.AppConfiguration.AspNetCore
dotnet add package Microsoft.FeatureManagement.AspNetCore
dotnet add package Microsoft.Azure.AppConfiguration.AspNetCore
dotnet add package Microsoft.FeatureManagement.AspNetCore
Create a user secret for the application by running the following commands.Microsoft Entra ID (recommended)Connection stringThe command usesSecret Managerto store a secret namedEndpoints:AppConfiguration, which stores the endpoint for your App Configuration store. Replace the<your-App-Configuration-endpoint>placeholder with your App Configuration store's endpoint. You can find the endpoint in your App Configuration store'sOverviewblade in the Azure portal.dotnet user-secrets init
dotnet user-secrets set Endpoints:AppConfiguration "<your-App-Configuration-endpoint>"The command usesSecret Managerto store a secret namedConnectionStrings:AppConfiguration, which stores the connection string for your App Configuration store. Replace the<your-App-Configuration-connection-string>placeholder with your App Configuration store's read-only connection string. You can find the connection string in your App Configuration store'sAccess settingsin the Azure portal.dotnet user-secrets init
dotnet user-secrets set ConnectionStrings:AppConfiguration "<your-App-Configuration-connection-string>"
Create a user secret for the application by running the following commands.
Microsoft Entra ID (recommended)
Connection string
The command usesSecret Managerto store a secret namedEndpoints:AppConfiguration, which stores the endpoint for your App Configuration store. Replace the<your-App-Configuration-endpoint>placeholder with your App Configuration store's endpoint. You can find the endpoint in your App Configuration store'sOverviewblade in the Azure portal.
Endpoints:AppConfiguration
<your-App-Configuration-endpoint>
dotnet user-secrets init
dotnet user-secrets set Endpoints:AppConfiguration "<your-App-Configuration-endpoint>"
dotnet user-secrets init
dotnet user-secrets set Endpoints:AppConfiguration "<your-App-Configuration-endpoint>"
The command usesSecret Managerto store a secret namedConnectionStrings:AppConfiguration, which stores the connection string for your App Configuration store. Replace the<your-App-Configuration-connection-string>placeholder with your App Configuration store's read-only connection string. You can find the connection string in your App Configuration store'sAccess settingsin the Azure portal.
ConnectionStrings:AppConfiguration
<your-App-Configuration-connection-string>
dotnet user-secrets init
dotnet user-secrets set ConnectionStrings:AppConfiguration "<your-App-Configuration-connection-string>"
dotnet user-secrets init
dotnet user-secrets set ConnectionStrings:AppConfiguration "<your-App-Configuration-connection-string>"
Add Azure App Configuration and feature management to your application.Microsoft Entra ID (recommended)Connection stringYou use theDefaultAzureCredentialto authenticate to your App Configuration store. Follow theinstructionsto assign your credential theApp Configuration Data Readerrole. Be sure to allow sufficient time for the permission to propagate before running your application.Update theProgram.csfile with the following code.// Existing code in Program.cs
// ... ...

using Azure.Identity;

var builder = WebApplication.CreateBuilder(args);

// Retrieve the endpoint
string endpoint = builder.Configuration.GetValue<string>("Endpoints:AppConfiguration") 
    ?? throw new InvalidOperationException("The setting `Endpoints:AppConfiguration` was not found.");

// Connect to Azure App Configuration and load all feature flags with no label
builder.Configuration.AddAzureAppConfiguration(options =>
{
    options.Connect(new Uri(endpoint), new DefaultAzureCredential())
           .UseFeatureFlags();
});

// Add Azure App Configuration middleware to the container of services
builder.Services.AddAzureAppConfiguration();

// Add feature management to the container of services
builder.Services.AddFeatureManagement();

// The rest of existing code in Program.cs
// ... ...Update theProgram.csfile with the following code.// Existing code in Program.cs
// ... ...

var builder = WebApplication.CreateBuilder(args);

// Retrieve the connection string
string connectionString = builder.Configuration.GetConnectionString("AppConfiguration")
    ?? throw new InvalidOperationException("The connection string 'AppConfiguration' was not found.");

// Connect to Azure App Configuration and load all feature flags with no label
builder.Configuration.AddAzureAppConfiguration(options =>
{
    options.Connect(connectionString)
           .UseFeatureFlags();
});

// Add Azure App Configuration middleware to the container of services
builder.Services.AddAzureAppConfiguration();

// Add feature management to the container of services
builder.Services.AddFeatureManagement();

// The rest of existing code in Program.cs
// ... ...
Add Azure App Configuration and feature management to your application.
Microsoft Entra ID (recommended)
Connection string
You use theDefaultAzureCredentialto authenticate to your App Configuration store. Follow theinstructionsto assign your credential theApp Configuration Data Readerrole. Be sure to allow sufficient time for the permission to propagate before running your application.
You use theDefaultAzureCredentialto authenticate to your App Configuration store. Follow theinstructionsto assign your credential theApp Configuration Data Readerrole. Be sure to allow sufficient time for the permission to propagate before running your application.
DefaultAzureCredential
Update theProgram.csfile with the following code.// Existing code in Program.cs
// ... ...

using Azure.Identity;

var builder = WebApplication.CreateBuilder(args);

// Retrieve the endpoint
string endpoint = builder.Configuration.GetValue<string>("Endpoints:AppConfiguration") 
    ?? throw new InvalidOperationException("The setting `Endpoints:AppConfiguration` was not found.");

// Connect to Azure App Configuration and load all feature flags with no label
builder.Configuration.AddAzureAppConfiguration(options =>
{
    options.Connect(new Uri(endpoint), new DefaultAzureCredential())
           .UseFeatureFlags();
});

// Add Azure App Configuration middleware to the container of services
builder.Services.AddAzureAppConfiguration();

// Add feature management to the container of services
builder.Services.AddFeatureManagement();

// The rest of existing code in Program.cs
// ... ...
Update theProgram.csfile with the following code.
// Existing code in Program.cs
// ... ...

using Azure.Identity;

var builder = WebApplication.CreateBuilder(args);

// Retrieve the endpoint
string endpoint = builder.Configuration.GetValue<string>("Endpoints:AppConfiguration") 
    ?? throw new InvalidOperationException("The setting `Endpoints:AppConfiguration` was not found.");

// Connect to Azure App Configuration and load all feature flags with no label
builder.Configuration.AddAzureAppConfiguration(options =>
{
    options.Connect(new Uri(endpoint), new DefaultAzureCredential())
           .UseFeatureFlags();
});

// Add Azure App Configuration middleware to the container of services
builder.Services.AddAzureAppConfiguration();

// Add feature management to the container of services
builder.Services.AddFeatureManagement();

// The rest of existing code in Program.cs
// ... ...
// Existing code in Program.cs
// ... ...

using Azure.Identity;

var builder = WebApplication.CreateBuilder(args);

// Retrieve the endpoint
string endpoint = builder.Configuration.GetValue<string>("Endpoints:AppConfiguration") 
    ?? throw new InvalidOperationException("The setting `Endpoints:AppConfiguration` was not found.");

// Connect to Azure App Configuration and load all feature flags with no label
builder.Configuration.AddAzureAppConfiguration(options =>
{
    options.Connect(new Uri(endpoint), new DefaultAzureCredential())
           .UseFeatureFlags();
});

// Add Azure App Configuration middleware to the container of services
builder.Services.AddAzureAppConfiguration();

// Add feature management to the container of services
builder.Services.AddFeatureManagement();

// The rest of existing code in Program.cs
// ... ...
Update theProgram.csfile with the following code.
// Existing code in Program.cs
// ... ...

var builder = WebApplication.CreateBuilder(args);

// Retrieve the connection string
string connectionString = builder.Configuration.GetConnectionString("AppConfiguration")
    ?? throw new InvalidOperationException("The connection string 'AppConfiguration' was not found.");

// Connect to Azure App Configuration and load all feature flags with no label
builder.Configuration.AddAzureAppConfiguration(options =>
{
    options.Connect(connectionString)
           .UseFeatureFlags();
});

// Add Azure App Configuration middleware to the container of services
builder.Services.AddAzureAppConfiguration();

// Add feature management to the container of services
builder.Services.AddFeatureManagement();

// The rest of existing code in Program.cs
// ... ...
// Existing code in Program.cs
// ... ...

var builder = WebApplication.CreateBuilder(args);

// Retrieve the connection string
string connectionString = builder.Configuration.GetConnectionString("AppConfiguration")
    ?? throw new InvalidOperationException("The connection string 'AppConfiguration' was not found.");

// Connect to Azure App Configuration and load all feature flags with no label
builder.Configuration.AddAzureAppConfiguration(options =>
{
    options.Connect(connectionString)
           .UseFeatureFlags();
});

// Add Azure App Configuration middleware to the container of services
builder.Services.AddAzureAppConfiguration();

// Add feature management to the container of services
builder.Services.AddFeatureManagement();

// The rest of existing code in Program.cs
// ... ...
Enable configuration and feature flag refresh from Azure App Configuration with the App Configuration middleware.Update Program.cs withe the following code.// Existing code in Program.cs
// ... ...

var app = builder.Build();

// Use Azure App Configuration middleware for dynamic configuration refresh
app.UseAzureAppConfiguration();

// The rest of existing code in Program.cs
// ... ...
Enable configuration and feature flag refresh from Azure App Configuration with the App Configuration middleware.
Update Program.cs withe the following code.
// Existing code in Program.cs
// ... ...

var app = builder.Build();

// Use Azure App Configuration middleware for dynamic configuration refresh
app.UseAzureAppConfiguration();

// The rest of existing code in Program.cs
// ... ...
// Existing code in Program.cs
// ... ...

var app = builder.Build();

// Use Azure App Configuration middleware for dynamic configuration refresh
app.UseAzureAppConfiguration();

// The rest of existing code in Program.cs
// ... ...
Add a new empty Razor page namedBetaunder the Pages directory. It includes two filesBeta.cshtmlandBeta.cshtml.cs.@page
@model TestFeatureFlags.Pages.BetaModel
@{
    ViewData["Title"] = "Beta Page";
}

<h1>This is the beta website.</h1>
Add a new empty Razor page namedBetaunder the Pages directory. It includes two filesBeta.cshtmlandBeta.cshtml.cs.
@page
@model TestFeatureFlags.Pages.BetaModel
@{
    ViewData["Title"] = "Beta Page";
}

<h1>This is the beta website.</h1>
@page
@model TestFeatureFlags.Pages.BetaModel
@{
    ViewData["Title"] = "Beta Page";
}

<h1>This is the beta website.</h1>
OpenBeta.cshtml.cs, and add theFeatureGateattribute to theBetaModelclass.using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.FeatureManagement.Mvc;

namespace TestFeatureFlags.Pages
{
    [FeatureGate("Beta")]
    public class BetaModel : PageModel
    {
        public void OnGet()
        {
        }
    }
}
OpenBeta.cshtml.cs, and add theFeatureGateattribute to theBetaModelclass.
FeatureGate
BetaModel
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.FeatureManagement.Mvc;

namespace TestFeatureFlags.Pages
{
    [FeatureGate("Beta")]
    public class BetaModel : PageModel
    {
        public void OnGet()
        {
        }
    }
}
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.FeatureManagement.Mvc;

namespace TestFeatureFlags.Pages
{
    [FeatureGate("Beta")]
    public class BetaModel : PageModel
    {
        public void OnGet()
        {
        }
    }
}
OpenPages/_ViewImports.cshtml, and register the feature manager Tag Helper using an@addTagHelperdirective.@addTagHelper *, Microsoft.FeatureManagement.AspNetCore
OpenPages/_ViewImports.cshtml, and register the feature manager Tag Helper using an@addTagHelperdirective.
@addTagHelper
@addTagHelper *, Microsoft.FeatureManagement.AspNetCore
@addTagHelper *, Microsoft.FeatureManagement.AspNetCore
Open_Layout.cshtmlin thePages/Shareddirectory. Insert a new<feature>tag in between theHomeandPrivacynavbar items, as shown in the highlighted lines below.<nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3">
    <div class="container">
        <a class="navbar-brand" asp-area="" asp-page="/Index">TestAppConfigNet3</a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="navbar-collapse collapse d-sm-inline-flex flex-sm-row-reverse">
            <ul class="navbar-nav flex-grow-1">
                <li class="nav-item">
                    <a class="nav-link text-dark" asp-area="" asp-page="/Index">Home</a>
                </li>
                <feature name="Beta">
                    <li class="nav-item">
                        <a class="nav-link text-dark" asp-area="" asp-page="/Beta">Beta</a>
                    </li>
                </feature>
                <li class="nav-item">
                    <a class="nav-link text-dark" asp-area="" asp-page="/Privacy">Privacy</a>
                </li>
            </ul>
        </div>
    </div>
</nav>
Open_Layout.cshtmlin thePages/Shareddirectory. Insert a new<feature>tag in between theHomeandPrivacynavbar items, as shown in the highlighted lines below.
<feature>
<nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3">
    <div class="container">
        <a class="navbar-brand" asp-area="" asp-page="/Index">TestAppConfigNet3</a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="navbar-collapse collapse d-sm-inline-flex flex-sm-row-reverse">
            <ul class="navbar-nav flex-grow-1">
                <li class="nav-item">
                    <a class="nav-link text-dark" asp-area="" asp-page="/Index">Home</a>
                </li>
                <feature name="Beta">
                    <li class="nav-item">
                        <a class="nav-link text-dark" asp-area="" asp-page="/Beta">Beta</a>
                    </li>
                </feature>
                <li class="nav-item">
                    <a class="nav-link text-dark" asp-area="" asp-page="/Privacy">Privacy</a>
                </li>
            </ul>
        </div>
    </div>
</nav>
<nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3">
    <div class="container">
        <a class="navbar-brand" asp-area="" asp-page="/Index">TestAppConfigNet3</a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="navbar-collapse collapse d-sm-inline-flex flex-sm-row-reverse">
            <ul class="navbar-nav flex-grow-1">
                <li class="nav-item">
                    <a class="nav-link text-dark" asp-area="" asp-page="/Index">Home</a>
                </li>
                <feature name="Beta">
                    <li class="nav-item">
                        <a class="nav-link text-dark" asp-area="" asp-page="/Beta">Beta</a>
                    </li>
                </feature>
                <li class="nav-item">
                    <a class="nav-link text-dark" asp-area="" asp-page="/Privacy">Privacy</a>
                </li>
            </ul>
        </div>
    </div>
</nav>
Enable targeting for the web application
A targeting context is required for feature evaluation with targeting. You can provide it as a parameter to thefeatureManager.IsEnabledAsyncAPI explicitly. In ASP.NET Core, the targeting context can also be provided through the service collection as an ambient context by implementing theITargetingContextAccessorinterface.
featureManager.IsEnabledAsync
Targeting Context Accessor
To provide the targeting context, pass your implementation type of theITargetingContextAccessorto theWithTargeting<T>method. If no type is provided, a default implementation is used, as shown in the following code snippet. The default targeting context accessor utilizesHttpContext.User.Identity.NameasUserIdandHttpContext.User.Claimsof typeRoleforGroups. You can reference theDefaultHttpTargetingContextAccessorto implement your own if customization is needed. To learn more about implementing theITargetingContextAccessor, see thefeature reference for targeting.
ITargetingContextAccessor
WithTargeting<T>
HttpContext.User.Identity.Name
UserId
HttpContext.User.Claims
Role
Groups
ITargetingContextAccessor
// Existing code in Program.cs
// ... ...

// Add feature management to the container of services
builder.Services.AddFeatureManagement()
                .WithTargeting();

// The rest of existing code in Program.cs
// ... ...
// Existing code in Program.cs
// ... ...

// Add feature management to the container of services
builder.Services.AddFeatureManagement()
                .WithTargeting();

// The rest of existing code in Program.cs
// ... ...
Note
For Blazor applications, seeinstructionsfor enabling feature management as scoped services.
Targeting filter in action
Build and run the application. Initially, theBetaitem doesn't appear on the toolbar, because theDefault percentageoption is set to 0.
Build and run the application. Initially, theBetaitem doesn't appear on the toolbar, because theDefault percentageoption is set to 0.

Select theRegisterlink in the upper right corner to create a new user account. Use an email address oftest@contoso.com. On theRegister Confirmationscreen, selectClick here to confirm your account.
Select theRegisterlink in the upper right corner to create a new user account. Use an email address oftest@contoso.com. On theRegister Confirmationscreen, selectClick here to confirm your account.
test@contoso.com
Sign in astest@contoso.com, using the password you set when registering the account.TheBetaitem now appears on the toolbar, becausetest@contoso.comis specified as a targeted user.Now sign in astestuser@contoso.com, using the password you set when registering the account. TheBetaitem doesn't appear on the toolbar, becausetestuser@contoso.comis specified as an excluded user.
Sign in astest@contoso.com, using the password you set when registering the account.
test@contoso.com
TheBetaitem now appears on the toolbar, becausetest@contoso.comis specified as a targeted user.
test@contoso.com

Now sign in astestuser@contoso.com, using the password you set when registering the account. TheBetaitem doesn't appear on the toolbar, becausetestuser@contoso.comis specified as an excluded user.
testuser@contoso.com
testuser@contoso.com
Next steps
To learn more about the feature filters, continue to the following documents.
Enable conditional features with feature filters
Enable features on a schedule
For the full feature rundown of the .NET feature management library, continue to the following document.
.NET Feature Management
Feedback
Was this page helpful?
Additional resources