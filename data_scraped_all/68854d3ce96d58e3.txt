Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Quickstart: Integrate Bicep with Azure Pipelines
Article
2025-03-26
11 contributors
In this article
This quickstart shows you how to integrate Bicep files with Azure Pipelines for continuous integration and continuous deployment.
It provides a short introduction to the pipeline task you need for deploying a Bicep file. For more detailed steps on setting up the pipeline and project, see theDeploy Azure resources by using Bicep and Azure PipelinesMicrosoft Learn module.
Prerequisites
If you don't have an Azure subscription,create a free accountbefore you begin.
You also need an Azure DevOps organization. If you don't have one,create one for free. If your team already has an Azure DevOps organization, make sure you're an administrator of the Azure DevOps project that you want to use.
You need to have configured aservice connectionto your Azure subscription. The tasks in the pipeline execute under the identity of the service principal. For steps to create the connection, seeCreate a DevOps project.
You need aBicep filethat defines the infrastructure for your project. This file is in a repository.
You need a'.bicepparam' filethat defines the parameters that your Bicep file uses. This file is in a repository.
Create pipeline
From your Azure DevOps organization, selectPipelinesandCreate pipeline.
From your Azure DevOps organization, selectPipelinesandCreate pipeline.

Specify where your code is stored. This quickstart uses Azure Repos Git repos.
Specify where your code is stored. This quickstart uses Azure Repos Git repos.

Select the repository that has the code for your project.
Select the repository that has the code for your project.

SelectStarter pipelinefor the type of pipeline to create.
SelectStarter pipelinefor the type of pipeline to create.

Deploy Bicep files
You can use an Azure Resource Group deployment task or an Azure CLI task to deploy a Bicep file.
Use Azure Resource Manager template deployment task
Note
As ofAzure Resource Manager template deployment taskversion 3.235.0, usage of'.bicepparam'files is supported.
Note
TheAzureResourceManagerTemplateDeployment@3task requires both Bicep and.bicepparamfiles to be provided when using.bicepparam. The Bicep file can reference all supported locations for module references. The.bicepparamfile must reference the local Bicep file in theusingstatement.
AzureResourceManagerTemplateDeployment@3
.bicepparam
.bicepparam
.bicepparam
using
Replace your starter pipeline with the following YAML. It uses the Azure Resource Manager template deployment task to create a resource group and deploy a Bicep and.bicepparamfile.trigger:
- main

name: Deploy Bicep files

parameters:
- name: azureServiceConnection
  type: string
  default: '<your-connection-name>'

variables:
  vmImageName: 'ubuntu-latest'
  resourceGroupName: 'exampleRG'
  location: '<your-resource-group-location>'
  templateFile: './main.bicep'
  csmParametersFile: './main.bicepparam'

pool:
  vmImage: $(vmImageName)

steps:
- task: AzureResourceManagerTemplateDeployment@3
  inputs:
    deploymentScope: 'Resource Group'
    action: 'Create Or Update Resource Group'
    resourceGroupName: '$(resourceGroupName)'
    location: '$(location)'
    templateLocation: 'Linked artifact'
    csmFile: '$(templateFile)'
    csmParametersFile: '$(csmParametersFile)'
    overrideParameters: '-storageAccountType Standard_LRS'
    deploymentMode: 'Incremental'
    deploymentName: 'DeployPipelineTemplate'
    connectedServiceName: '${{ parameters.azureServiceConnection }}'
Replace your starter pipeline with the following YAML. It uses the Azure Resource Manager template deployment task to create a resource group and deploy a Bicep and.bicepparamfile.
.bicepparam
trigger:
- main

name: Deploy Bicep files

parameters:
- name: azureServiceConnection
  type: string
  default: '<your-connection-name>'

variables:
  vmImageName: 'ubuntu-latest'
  resourceGroupName: 'exampleRG'
  location: '<your-resource-group-location>'
  templateFile: './main.bicep'
  csmParametersFile: './main.bicepparam'

pool:
  vmImage: $(vmImageName)

steps:
- task: AzureResourceManagerTemplateDeployment@3
  inputs:
    deploymentScope: 'Resource Group'
    action: 'Create Or Update Resource Group'
    resourceGroupName: '$(resourceGroupName)'
    location: '$(location)'
    templateLocation: 'Linked artifact'
    csmFile: '$(templateFile)'
    csmParametersFile: '$(csmParametersFile)'
    overrideParameters: '-storageAccountType Standard_LRS'
    deploymentMode: 'Incremental'
    deploymentName: 'DeployPipelineTemplate'
    connectedServiceName: '${{ parameters.azureServiceConnection }}'
trigger:
- main

name: Deploy Bicep files

parameters:
- name: azureServiceConnection
  type: string
  default: '<your-connection-name>'

variables:
  vmImageName: 'ubuntu-latest'
  resourceGroupName: 'exampleRG'
  location: '<your-resource-group-location>'
  templateFile: './main.bicep'
  csmParametersFile: './main.bicepparam'

pool:
  vmImage: $(vmImageName)

steps:
- task: AzureResourceManagerTemplateDeployment@3
  inputs:
    deploymentScope: 'Resource Group'
    action: 'Create Or Update Resource Group'
    resourceGroupName: '$(resourceGroupName)'
    location: '$(location)'
    templateLocation: 'Linked artifact'
    csmFile: '$(templateFile)'
    csmParametersFile: '$(csmParametersFile)'
    overrideParameters: '-storageAccountType Standard_LRS'
    deploymentMode: 'Incremental'
    deploymentName: 'DeployPipelineTemplate'
    connectedServiceName: '${{ parameters.azureServiceConnection }}'
Update the values ofazureServiceConnectionandlocation.
Update the values ofazureServiceConnectionandlocation.
azureServiceConnection
location
Verify you have a validmain.bicepfile in your repo.
Verify you have a validmain.bicepfile in your repo.
main.bicep
Verify you have a validmain.bicepparamfile in your repo that contains ausingstatement.
Verify you have a validmain.bicepparamfile in your repo that contains ausingstatement.
main.bicepparam
using
SelectSave. The build pipeline runs automatically. Go back to the summary for your build pipeline, and watch the status.
SelectSave. The build pipeline runs automatically. Go back to the summary for your build pipeline, and watch the status.
Use Azure CLI task
Note
Theaz deployment group createcommand requires only abicepparam.file. Theusingstatement in the.bicepparamfile can target any supported location to reference the Bicep file. A Bicep file is only required in your repository whenusingfrom a local disk path with the Azure CLI.
az deployment group create
bicepparam.
using
.bicepparam
using
Note
When you use a.bicepparamfile with theaz deployment group createcommand, you can't override parameters.
.bicepparam
az deployment group create
Replace your starter pipeline with the following YAML. It creates a resource group and deploys a.bicepparamfile by using anAzure CLI task:trigger:
- main

name: Deploy Bicep files

parameters:
  azureServiceConnection: '<your-connection-name>'

variables:
  vmImageName: 'ubuntu-latest'
  resourceGroupName: 'exampleRG'
  location: '<your-resource-group-location>'
  bicepParamFile: './main.bicepparam'

pool:
  vmImage: $(vmImageName)

steps:
- task: AzureCLI@2
  inputs:
    azureSubscription: '${{ parameters.azureServiceConnection }}'
    scriptType: bash
    scriptLocation: inlineScript
    useGlobalConfig: false
    inlineScript: |
      az --version
      az group create --name $(resourceGroupName) --location $(location)
      az deployment group create `
        --resource-group $(resourceGroupName) `
        --parameters $(bicepParamFile) `
        --name DeployPipelineTemplateFor the descriptions of the task inputs, seeAzure CLI v2 task. When using the task on air-gapped cloud, you must set theuseGlobalConfigproperty of the task totrue. The default value isfalse.
Replace your starter pipeline with the following YAML. It creates a resource group and deploys a.bicepparamfile by using anAzure CLI task:
.bicepparam
trigger:
- main

name: Deploy Bicep files

parameters:
  azureServiceConnection: '<your-connection-name>'

variables:
  vmImageName: 'ubuntu-latest'
  resourceGroupName: 'exampleRG'
  location: '<your-resource-group-location>'
  bicepParamFile: './main.bicepparam'

pool:
  vmImage: $(vmImageName)

steps:
- task: AzureCLI@2
  inputs:
    azureSubscription: '${{ parameters.azureServiceConnection }}'
    scriptType: bash
    scriptLocation: inlineScript
    useGlobalConfig: false
    inlineScript: |
      az --version
      az group create --name $(resourceGroupName) --location $(location)
      az deployment group create `
        --resource-group $(resourceGroupName) `
        --parameters $(bicepParamFile) `
        --name DeployPipelineTemplate
trigger:
- main

name: Deploy Bicep files

parameters:
  azureServiceConnection: '<your-connection-name>'

variables:
  vmImageName: 'ubuntu-latest'
  resourceGroupName: 'exampleRG'
  location: '<your-resource-group-location>'
  bicepParamFile: './main.bicepparam'

pool:
  vmImage: $(vmImageName)

steps:
- task: AzureCLI@2
  inputs:
    azureSubscription: '${{ parameters.azureServiceConnection }}'
    scriptType: bash
    scriptLocation: inlineScript
    useGlobalConfig: false
    inlineScript: |
      az --version
      az group create --name $(resourceGroupName) --location $(location)
      az deployment group create `
        --resource-group $(resourceGroupName) `
        --parameters $(bicepParamFile) `
        --name DeployPipelineTemplate
For the descriptions of the task inputs, seeAzure CLI v2 task. When using the task on air-gapped cloud, you must set theuseGlobalConfigproperty of the task totrue. The default value isfalse.
useGlobalConfig
true
false
Update the values ofazureServiceConnectionandlocation.
Update the values ofazureServiceConnectionandlocation.
azureServiceConnection
location
Verify you have a validmain.bicepparamfile in your repo that contains ausingstatement.
Verify you have a validmain.bicepparamfile in your repo that contains ausingstatement.
main.bicepparam
using
SelectSave. The build pipeline runs automatically. Go back to the summary for your build pipeline, and watch the status.
SelectSave. The build pipeline runs automatically. Go back to the summary for your build pipeline, and watch the status.
Clean up resources
When the Azure resources are no longer needed, use the Azure CLI or Azure PowerShell to delete the quickstart resource group.
Azure CLI
Azure PowerShell
az group delete --name exampleRG
az group delete --name exampleRG
Remove-AzResourceGroup -Name exampleRG
Remove-AzResourceGroup -Name exampleRG
Next steps
Deploy Bicep files by using GitHub Actions
Feedback
Was this page helpful?
Additional resources