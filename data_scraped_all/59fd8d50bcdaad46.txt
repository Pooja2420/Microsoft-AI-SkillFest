Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Quickstart: Use Go language to connect and query data in Azure Database for MySQL
Article
2024-11-27
3 contributors
In this article
This quickstart demonstrates how to connect to an Azure Database for MySQL from Windows, Ubuntu Linux, and Apple macOS platforms by using code written in theGolanguage. It shows how to use SQL statements to query, insert, update, and delete data in the database. This topic assumes that you are familiar with development using Go and that you are new to working with Azure Database for MySQL.
Prerequisites
This quickstart uses the resources created in either of these guides as a starting point:
Quickstart: Create an instance of Azure Database for MySQL with the Azure portal
Quickstart: Create an instance of Azure Database for MySQL - Flexible Server by using the Azure CLI
Important
We recommend you use a server withPublic access (allowed IP addresses)enabled for this quickstart. Using a server withPrivate access (VNet Integration)enabled to complete this quickstart might involve extra steps that aren't covered.
Ensure the IP address you're connecting from has been added the server's firewall rules using theManage firewall rules for Azure Database for MySQL - Flexible Server using the Azure portalorManage firewall rules for Azure Database for MySQL - Flexible Server using Azure CLI
Install Go and MySQL connector
InstallGoand thego-sql-driver for MySQLon your own computer. Depending on your platform, follow the steps in the appropriate section:
Windows
Linux (Ubuntu)
Apple macOS
Downloadand install Go for Microsoft Windows according to theinstallation instructions.
Downloadand install Go for Microsoft Windows according to theinstallation instructions.
Launch the command prompt from the start menu.
Launch the command prompt from the start menu.
Make a folder for your project, such asmkdir %USERPROFILE%\go\src\mysqlgo.
Make a folder for your project, such asmkdir %USERPROFILE%\go\src\mysqlgo.
mkdir %USERPROFILE%\go\src\mysqlgo
Change directory into the project folder, such ascd %USERPROFILE%\go\src\mysqlgo.
Change directory into the project folder, such ascd %USERPROFILE%\go\src\mysqlgo.
cd %USERPROFILE%\go\src\mysqlgo
Set the environment variable for GOPATH to point to the source code directory:set GOPATH=%USERPROFILE%\go.
Set the environment variable for GOPATH to point to the source code directory:set GOPATH=%USERPROFILE%\go.
set GOPATH=%USERPROFILE%\go
Rungo mod initto create a module in the current directory. For example:go mod init mysqlgo.The<module_path>parameter is generally a location in a GitHub repo - such asgithub.com/<your_github_account_name>/<directory>.When you're creating a command-line app as a test and won't publish the app, the<module_path>doesn't need to refer to an actual location. For example,mysqlgo.
Rungo mod initto create a module in the current directory. For example:go mod init mysqlgo.
go mod init mysqlgo
The<module_path>parameter is generally a location in a GitHub repo - such asgithub.com/<your_github_account_name>/<directory>.
<module_path>
github.com/<your_github_account_name>/<directory>
When you're creating a command-line app as a test and won't publish the app, the<module_path>doesn't need to refer to an actual location. For example,mysqlgo.
<module_path>
mysqlgo
Install thego-sql-driver for mysqlby running thego get github.com/go-sql-driver/mysqlcommand.In summary, install Go, then run these commands in the command prompt:mkdir  %USERPROFILE%\go\src\mysqlgo
cd %USERPROFILE%\go\src\mysqlgo
set GOPATH=%USERPROFILE%\go
go mod init mysqlgo
go get github.com/go-sql-driver/mysql
Install thego-sql-driver for mysqlby running thego get github.com/go-sql-driver/mysqlcommand.
go get github.com/go-sql-driver/mysql
In summary, install Go, then run these commands in the command prompt:
mkdir  %USERPROFILE%\go\src\mysqlgo
cd %USERPROFILE%\go\src\mysqlgo
set GOPATH=%USERPROFILE%\go
go mod init mysqlgo
go get github.com/go-sql-driver/mysql
mkdir  %USERPROFILE%\go\src\mysqlgo
cd %USERPROFILE%\go\src\mysqlgo
set GOPATH=%USERPROFILE%\go
go mod init mysqlgo
go get github.com/go-sql-driver/mysql
Launch the Bash shell.
Launch the Bash shell.
Install Go by runningsudo apt-get install golang-go.
Install Go by runningsudo apt-get install golang-go.
sudo apt-get install golang-go
Make a folder for your project in your home directory, such asmkdir -p ~/go/src/mysqlgo/.
Make a folder for your project in your home directory, such asmkdir -p ~/go/src/mysqlgo/.
mkdir -p ~/go/src/mysqlgo/
Change directory into the folder, such ascd ~/go/src/mysqlgo/.
Change directory into the folder, such ascd ~/go/src/mysqlgo/.
cd ~/go/src/mysqlgo/
Set the GOPATH environment variable to point to a valid source directory, such as your current home directory's go folder. At the Bash shell, runexport GOPATH=~/goto add the go directory as the GOPATH for the current shell session.
Set the GOPATH environment variable to point to a valid source directory, such as your current home directory's go folder. At the Bash shell, runexport GOPATH=~/goto add the go directory as the GOPATH for the current shell session.
export GOPATH=~/go
Rungo mod initto create a module in the current directory. For example:go mod init mysqlgo.The<module_path>parameter is generally a location in a GitHub repo - such asgithub.com/<your_github_account_name>/<directory>.When you're creating a command-line app as a test and won't publish the app, the<module_path>doesn't need to refer to an actual location. For example,mysqlgo.
Rungo mod initto create a module in the current directory. For example:go mod init mysqlgo.
go mod init mysqlgo
The<module_path>parameter is generally a location in a GitHub repo - such asgithub.com/<your_github_account_name>/<directory>.
<module_path>
github.com/<your_github_account_name>/<directory>
When you're creating a command-line app as a test and won't publish the app, the<module_path>doesn't need to refer to an actual location. For example,mysqlgo.
<module_path>
mysqlgo
Install thego-sql-driver for mysqlby running thego get github.com/go-sql-driver/mysqlcommand.In summary, run these bash commands:sudo apt-get install golang-go git -y
mkdir -p ~/go/src/mysqlgo/
cd ~/go/src/mysqlgo/
export GOPATH=~/go/
go mod init mysqlgo
go get github.com/go-sql-driver/mysql
Install thego-sql-driver for mysqlby running thego get github.com/go-sql-driver/mysqlcommand.
go get github.com/go-sql-driver/mysql
In summary, run these bash commands:
sudo apt-get install golang-go git -y
mkdir -p ~/go/src/mysqlgo/
cd ~/go/src/mysqlgo/
export GOPATH=~/go/
go mod init mysqlgo
go get github.com/go-sql-driver/mysql
sudo apt-get install golang-go git -y
mkdir -p ~/go/src/mysqlgo/
cd ~/go/src/mysqlgo/
export GOPATH=~/go/
go mod init mysqlgo
go get github.com/go-sql-driver/mysql
Download and install Go according to theinstallation instructionsmatching your platform.
Download and install Go according to theinstallation instructionsmatching your platform.
Launch the Bash shell.
Launch the Bash shell.
Make a folder for your project in your home directory, such asmkdir -p ~/go/src/mysqlgo/.
Make a folder for your project in your home directory, such asmkdir -p ~/go/src/mysqlgo/.
mkdir -p ~/go/src/mysqlgo/
Change directory into the folder, such ascd ~/go/src/mysqlgo/.
Change directory into the folder, such ascd ~/go/src/mysqlgo/.
cd ~/go/src/mysqlgo/
Set the GOPATH environment variable to point to a valid source directory, such as your current home directory's go folder. At the Bash shell, runexport GOPATH=~/goto add the go directory as the GOPATH for the current shell session.
Set the GOPATH environment variable to point to a valid source directory, such as your current home directory's go folder. At the Bash shell, runexport GOPATH=~/goto add the go directory as the GOPATH for the current shell session.
export GOPATH=~/go
Rungo mod initto create a module in the current directory. For example:go mod init mysqlgo.The<module_path>parameter is generally a location in a GitHub repo - such asgithub.com/<your_github_account_name>/<directory>.When you're creating a command-line app as a test and won't publish the app, the<module_path>doesn't need to refer to an actual location. For example,mysqlgo.
Rungo mod initto create a module in the current directory. For example:go mod init mysqlgo.
go mod init mysqlgo
The<module_path>parameter is generally a location in a GitHub repo - such asgithub.com/<your_github_account_name>/<directory>.
<module_path>
github.com/<your_github_account_name>/<directory>
When you're creating a command-line app as a test and won't publish the app, the<module_path>doesn't need to refer to an actual location. For example,mysqlgo.
<module_path>
mysqlgo
Install thego-sql-driver for mysqlby running thego get github.com/go-sql-driver/mysqlcommand.In summary, install Go, then run these bash commands:mkdir -p ~/go/src/mysqlgo/
cd ~/go/src/mysqlgo/
export GOPATH=~/go/
go mod init mysqlgo
go get github.com/go-sql-driver/mysql
Install thego-sql-driver for mysqlby running thego get github.com/go-sql-driver/mysqlcommand.
go get github.com/go-sql-driver/mysql
In summary, install Go, then run these bash commands:
mkdir -p ~/go/src/mysqlgo/
cd ~/go/src/mysqlgo/
export GOPATH=~/go/
go mod init mysqlgo
go get github.com/go-sql-driver/mysql
mkdir -p ~/go/src/mysqlgo/
cd ~/go/src/mysqlgo/
export GOPATH=~/go/
go mod init mysqlgo
go get github.com/go-sql-driver/mysql
Get connection information
Get the connection information needed to connect to the Azure Database for MySQL. You need the fully qualified server name and login credentials.
Log in to theAzure portal.
From the left-hand menu in Azure portal, selectAll resources, and then search for the server you have created (such asmydemoserver).
Select the server name.
From the server'sOverviewpanel, make a note of theServer nameandServer admin login name. If you forget your password, you can also reset the password from this panel.
Build and run Go code
To write Golang code, you can use a simple text editor, such as Notepad in Microsoft Windows,viorNanoin Ubuntu, or TextEdit in macOS. If you prefer a richer Interactive Development Environment (IDE), tryGoglandby Jetbrains,Visual Studio Codeby Microsoft, orAtom.
Paste the Go code from the sections below into text files, and then save them into your project folder with file extension *.go (such as Windows path%USERPROFILE%\go\src\mysqlgo\createtable.goor Linux path~/go/src/mysqlgo/createtable.go).
%USERPROFILE%\go\src\mysqlgo\createtable.go
~/go/src/mysqlgo/createtable.go
Locate thehost,database,user, andpasswordconstants in the code, and then replace the example values with your own values. A database namedflexibleserverdbis created when you create your Azure Database for MySQL server instance. You can use that database or another one that you've created.
host
database
user
password
Launch the command prompt or Bash shell. Change directory into your project folder. For example, on Windowscd %USERPROFILE%\go\src\mysqlgo\. On Linuxcd ~/go/src/mysqlgo/. Some of the IDE editors mentioned offer debug and runtime capabilities without requiring shell commands.
cd %USERPROFILE%\go\src\mysqlgo\
cd ~/go/src/mysqlgo/
Run the code by typing the commandgo run createtable.goto compile the application and run it.
go run createtable.go
Alternatively, to build the code into a native application,go build createtable.go, then launchcreatetable.exeto run the application.
go build createtable.go
createtable.exe
Connect, create table, and insert data
Use the following code to connect to the server, create a table, and load the data by using anINSERTSQL statement.
The code imports three packages: thesql package, thego sql driver for mysqlas a driver to communicate with the Azure Database for MySQL, and thefmt packagefor printed input and output on the command line.
The code calls methodsql.Open()to connect to Azure Database for MySQL, and it checks the connection by using methoddb.Ping(). Adatabase handleis used throughout, holding the connection pool for the database server. The code calls theExec()method several times to run several DDL commands. The code also usesPrepare()and Exec() to run prepared statements with different parameters to insert three rows. Each time, a custom checkError() method is used to check if an error occurred and panic to exit.
Replace thehost,database,user, andpasswordconstants with your own values.
host
database
user
password
package main

import (
    "database/sql"
    "fmt"

    _ "github.com/go-sql-driver/mysql"
)

const (
    host     = "mydemoserver.mysql.database.azure.com"
    database = "flexibleserverdb"
    user     = "myadmin"
    password = "yourpassword"
)

func checkError(err error) {
    if err != nil {
        panic(err)
    }
}

func main() {

    // Initialize connection string.
    var connectionString = fmt.Sprintf("%s:%s@tcp(%s:3306)/%s?allowNativePasswords=true&tls=true", user, password, host, database)

    // Initialize connection object.
    db, err := sql.Open("mysql", connectionString)
    checkError(err)
    defer db.Close()

    err = db.Ping()
    checkError(err)
    fmt.Println("Successfully created connection to database.")

    // Drop previous table of same name if one exists.
    _, err = db.Exec("DROP TABLE IF EXISTS inventory;")
    checkError(err)
    fmt.Println("Finished dropping table (if existed).")

    // Create table.
    _, err = db.Exec("CREATE TABLE inventory (id serial PRIMARY KEY, name VARCHAR(50), quantity INTEGER);")
    checkError(err)
    fmt.Println("Finished creating table.")

    // Insert some data into table.
    sqlStatement, err := db.Prepare("INSERT INTO inventory (name, quantity) VALUES (?, ?);")
    res, err := sqlStatement.Exec("banana", 150)
    checkError(err)
    rowCount, err := res.RowsAffected()
    fmt.Printf("Inserted %d row(s) of data.\n", rowCount)

    res, err = sqlStatement.Exec("orange", 154)
    checkError(err)
    rowCount, err = res.RowsAffected()
    fmt.Printf("Inserted %d row(s) of data.\n", rowCount)

    res, err = sqlStatement.Exec("apple", 100)
    checkError(err)
    rowCount, err = res.RowsAffected()
    fmt.Printf("Inserted %d row(s) of data.\n", rowCount)
    fmt.Println("Done.")
}
package main

import (
    "database/sql"
    "fmt"

    _ "github.com/go-sql-driver/mysql"
)

const (
    host     = "mydemoserver.mysql.database.azure.com"
    database = "flexibleserverdb"
    user     = "myadmin"
    password = "yourpassword"
)

func checkError(err error) {
    if err != nil {
        panic(err)
    }
}

func main() {

    // Initialize connection string.
    var connectionString = fmt.Sprintf("%s:%s@tcp(%s:3306)/%s?allowNativePasswords=true&tls=true", user, password, host, database)

    // Initialize connection object.
    db, err := sql.Open("mysql", connectionString)
    checkError(err)
    defer db.Close()

    err = db.Ping()
    checkError(err)
    fmt.Println("Successfully created connection to database.")

    // Drop previous table of same name if one exists.
    _, err = db.Exec("DROP TABLE IF EXISTS inventory;")
    checkError(err)
    fmt.Println("Finished dropping table (if existed).")

    // Create table.
    _, err = db.Exec("CREATE TABLE inventory (id serial PRIMARY KEY, name VARCHAR(50), quantity INTEGER);")
    checkError(err)
    fmt.Println("Finished creating table.")

    // Insert some data into table.
    sqlStatement, err := db.Prepare("INSERT INTO inventory (name, quantity) VALUES (?, ?);")
    res, err := sqlStatement.Exec("banana", 150)
    checkError(err)
    rowCount, err := res.RowsAffected()
    fmt.Printf("Inserted %d row(s) of data.\n", rowCount)

    res, err = sqlStatement.Exec("orange", 154)
    checkError(err)
    rowCount, err = res.RowsAffected()
    fmt.Printf("Inserted %d row(s) of data.\n", rowCount)

    res, err = sqlStatement.Exec("apple", 100)
    checkError(err)
    rowCount, err = res.RowsAffected()
    fmt.Printf("Inserted %d row(s) of data.\n", rowCount)
    fmt.Println("Done.")
}
Read data
Use the following code to connect and read the data by using aSELECTSQL statement.
The code imports three packages: thesql package, thego sql driver for mysqlas a driver to communicate with the Azure Database for MySQL, and thefmt packagefor printed input and output on the command line.
The code calls methodsql.Open()to connect to Azure Database for MySQL, and checks the connection using methoddb.Ping(). Adatabase handleis used throughout, holding the connection pool for the database server. The code calls theQuery()method to run the select command. Then it runsNext()to iterate through the result set andScan()to parse the column values, saving the value into variables. Each time a custom checkError() method is used to check if an error occurred and panic to exit.
Replace thehost,database,user, andpasswordconstants with your own values.
host
database
user
password
package main

import (
    "database/sql"
    "fmt"

    _ "github.com/go-sql-driver/mysql"
)

const (
    host     = "mydemoserver.mysql.database.azure.com"
    database = "flexibleserverdb"
    user     = "myadmin"
    password = "yourpassword"
)

func checkError(err error) {
    if err != nil {
        panic(err)
    }
}

func main() {

    // Initialize connection string.
    var connectionString = fmt.Sprintf("%s:%s@tcp(%s:3306)/%s?allowNativePasswords=true&tls=true", user, password, host, database)

    // Initialize connection object.
    db, err := sql.Open("mysql", connectionString)
    checkError(err)
    defer db.Close()

    err = db.Ping()
    checkError(err)
    fmt.Println("Successfully created connection to database.")

    // Variables for printing column data when scanned.
    var (
        id       int
        name     string
        quantity int
    )

    // Read some data from the table.
    rows, err := db.Query("SELECT id, name, quantity from inventory;")
    checkError(err)
    defer rows.Close()
    fmt.Println("Reading data:")
    for rows.Next() {
        err := rows.Scan(&id, &name, &quantity)
        checkError(err)
        fmt.Printf("Data row = (%d, %s, %d)\n", id, name, quantity)
    }
    err = rows.Err()
    checkError(err)
    fmt.Println("Done.")
}
package main

import (
    "database/sql"
    "fmt"

    _ "github.com/go-sql-driver/mysql"
)

const (
    host     = "mydemoserver.mysql.database.azure.com"
    database = "flexibleserverdb"
    user     = "myadmin"
    password = "yourpassword"
)

func checkError(err error) {
    if err != nil {
        panic(err)
    }
}

func main() {

    // Initialize connection string.
    var connectionString = fmt.Sprintf("%s:%s@tcp(%s:3306)/%s?allowNativePasswords=true&tls=true", user, password, host, database)

    // Initialize connection object.
    db, err := sql.Open("mysql", connectionString)
    checkError(err)
    defer db.Close()

    err = db.Ping()
    checkError(err)
    fmt.Println("Successfully created connection to database.")

    // Variables for printing column data when scanned.
    var (
        id       int
        name     string
        quantity int
    )

    // Read some data from the table.
    rows, err := db.Query("SELECT id, name, quantity from inventory;")
    checkError(err)
    defer rows.Close()
    fmt.Println("Reading data:")
    for rows.Next() {
        err := rows.Scan(&id, &name, &quantity)
        checkError(err)
        fmt.Printf("Data row = (%d, %s, %d)\n", id, name, quantity)
    }
    err = rows.Err()
    checkError(err)
    fmt.Println("Done.")
}
Update data
Use the following code to connect and update the data using aUPDATESQL statement.
The code imports three packages: thesql package, thego sql driver for mysqlas a driver to communicate with the Azure Database for MySQL, and thefmt packagefor printed input and output on the command line.
The code calls methodsql.Open()to connect to Azure Database for MySQL, and checks the connection using methoddb.Ping(). Adatabase handleis used throughout, holding the connection pool for the database server. The code calls theExec()method to run the update command. Each time a custom checkError() method is used to check if an error occurred and panic to exit.
Replace thehost,database,user, andpasswordconstants with your own values.
host
database
user
password
package main

import (
    "database/sql"
    "fmt"

    _ "github.com/go-sql-driver/mysql"
)

const (
    host     = "mydemoserver.mysql.database.azure.com"
    database = "flexibleserverdb"
    user     = "myadmin"
    password = "yourpassword"
)

func checkError(err error) {
    if err != nil {
        panic(err)
    }
}

func main() {

    // Initialize connection string.
    var connectionString = fmt.Sprintf("%s:%s@tcp(%s:3306)/%s?allowNativePasswords=true&tls=true", user, password, host, database)

    // Initialize connection object.
    db, err := sql.Open("mysql", connectionString)
    checkError(err)
    defer db.Close()

    err = db.Ping()
    checkError(err)
    fmt.Println("Successfully created connection to database.")

    // Modify some data in table.
    rows, err := db.Exec("UPDATE inventory SET quantity = ? WHERE name = ?", 200, "banana")
    checkError(err)
    rowCount, err := rows.RowsAffected()
    fmt.Printf("Updated %d row(s) of data.\n", rowCount)
    fmt.Println("Done.")
}
package main

import (
    "database/sql"
    "fmt"

    _ "github.com/go-sql-driver/mysql"
)

const (
    host     = "mydemoserver.mysql.database.azure.com"
    database = "flexibleserverdb"
    user     = "myadmin"
    password = "yourpassword"
)

func checkError(err error) {
    if err != nil {
        panic(err)
    }
}

func main() {

    // Initialize connection string.
    var connectionString = fmt.Sprintf("%s:%s@tcp(%s:3306)/%s?allowNativePasswords=true&tls=true", user, password, host, database)

    // Initialize connection object.
    db, err := sql.Open("mysql", connectionString)
    checkError(err)
    defer db.Close()

    err = db.Ping()
    checkError(err)
    fmt.Println("Successfully created connection to database.")

    // Modify some data in table.
    rows, err := db.Exec("UPDATE inventory SET quantity = ? WHERE name = ?", 200, "banana")
    checkError(err)
    rowCount, err := rows.RowsAffected()
    fmt.Printf("Updated %d row(s) of data.\n", rowCount)
    fmt.Println("Done.")
}
Delete data
Use the following code to connect and remove data using aDELETESQL statement.
The code imports three packages: thesql package, thego sql driver for mysqlas a driver to communicate with the Azure Database for MySQL, and thefmt packagefor printed input and output on the command line.
The code calls methodsql.Open()to connect to Azure Database for MySQL, and checks the connection using methoddb.Ping(). Adatabase handleis used throughout, holding the connection pool for the database server. The code calls theExec()method to run the delete command. Each time a custom checkError() method is used to check if an error occurred and panic to exit.
Replace thehost,database,user, andpasswordconstants with your own values.
host
database
user
password
package main

import (
    "database/sql"
    "fmt"
    _ "github.com/go-sql-driver/mysql"
)

const (
    host     = "mydemoserver.mysql.database.azure.com"
    database = "flexibleserverdb"
    user     = "myadmin"
    password = "yourpassword"
)

func checkError(err error) {
    if err != nil {
        panic(err)
    }
}

func main() {

    // Initialize connection string.
    var connectionString = fmt.Sprintf("%s:%s@tcp(%s:3306)/%s?allowNativePasswords=true&tls=true", user, password, host, database)

    // Initialize connection object.
    db, err := sql.Open("mysql", connectionString)
    checkError(err)
    defer db.Close()

    err = db.Ping()
    checkError(err)
    fmt.Println("Successfully created connection to database.")

    // Modify some data in table.
    rows, err := db.Exec("DELETE FROM inventory WHERE name = ?", "orange")
    checkError(err)
    rowCount, err := rows.RowsAffected()
    fmt.Printf("Deleted %d row(s) of data.\n", rowCount)
    fmt.Println("Done.")
}
package main

import (
    "database/sql"
    "fmt"
    _ "github.com/go-sql-driver/mysql"
)

const (
    host     = "mydemoserver.mysql.database.azure.com"
    database = "flexibleserverdb"
    user     = "myadmin"
    password = "yourpassword"
)

func checkError(err error) {
    if err != nil {
        panic(err)
    }
}

func main() {

    // Initialize connection string.
    var connectionString = fmt.Sprintf("%s:%s@tcp(%s:3306)/%s?allowNativePasswords=true&tls=true", user, password, host, database)

    // Initialize connection object.
    db, err := sql.Open("mysql", connectionString)
    checkError(err)
    defer db.Close()

    err = db.Ping()
    checkError(err)
    fmt.Println("Successfully created connection to database.")

    // Modify some data in table.
    rows, err := db.Exec("DELETE FROM inventory WHERE name = ?", "orange")
    checkError(err)
    rowCount, err := rows.RowsAffected()
    fmt.Printf("Deleted %d row(s) of data.\n", rowCount)
    fmt.Println("Done.")
}
Clean up resources
To clean up all resources used during this quickstart, delete the resource group using the following command:
az group delete \
    --name $AZ_RESOURCE_GROUP \
    --yes
az group delete \
    --name $AZ_RESOURCE_GROUP \
    --yes
Next step
Migrate your Azure Database for MySQL - Flexible Server database by using import and export
Feedback
Was this page helpful?
Additional resources