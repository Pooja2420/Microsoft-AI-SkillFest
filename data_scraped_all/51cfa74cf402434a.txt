Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
summarize operator
Article
2025-02-06
5 contributors
In this article
Applies to: âMicrosoft FabricâAzure Data ExplorerâAzure MonitorâMicrosoft Sentinel
Produces a table that aggregates the content of the input table.
Syntax
T| summarize[SummarizeParameters]
[[Column=]Aggregation[,...]]
[by[Column=]GroupExpression[,...]]
| summarize
=
,
by
=
,
Learn more aboutsyntax conventions.
Parameters
string
string
count()
avg()
string
=
Note
When the input table is empty, the output depends on whetherGroupExpressionis used:
IfGroupExpressionis not provided, the output will be a single (empty) row.
IfGroupExpressionis provided, the output will have no rows.
Supported parameters
hint.num_partitions
hint.shufflekey=<key>
shufflekey
hint.strategy=shuffle
shuffle
Returns
The input rows are arranged into groups having the same values of thebyexpressions. Then the specified aggregation functions are computed over each group, producing a row for each group. The result contains thebycolumns and also at least one column for each computed aggregate. (Some aggregation functions return multiple columns.)
by
by
The result has as many rows as there are distinct combinations ofbyvalues
(which may be zero). If there are no group keys provided, the result has a single
record.
by
To summarize over ranges of numeric values, usebin()to reduce ranges to discrete values.
bin()
Note
Although you can provide arbitrary expressions for both the aggregation and grouping expressions, it's more efficient to use simple column names, or applybin()to a numeric column.
bin()
The automatic hourly bins for datetime columns is no longer supported. Use explicit binning instead. For example,summarize by bin(timestamp, 1h).
summarize by bin(timestamp, 1h)
Default values of aggregations
The following table summarizes the default values of aggregations:
count()
countif()
dcount()
dcountif()
count_distinct()
sum()
sumif()
variance()
varianceif()
stdev()
stdevif()
make_bag()
make_bag_if()
make_list()
make_list_if()
make_set()
make_set_if()
Note
When applying these aggregates to entities that include null values, the null values are ignored and don't factor into the calculation. For examples, seeAggregates default values.
Examples
The example in this section shows how to use the syntax to help you get started.
The examples in this article use publicly available tables in thehelp cluster, such as theStormEventstable in theSamplesdatabase.
StormEvents
The examples in this article use publicly available tables, such as theStormEventstable in the Weather analyticssample data.
StormEvents

Unique combination
The following query determines what unique combinations ofStateandEventTypethere are for storms that resulted in direct injury. There are no aggregation functions, just group-by keys. The output will just show the columns for those results.
State
EventType
Run the query
StormEvents
| where InjuriesDirect > 0
| summarize by State, EventType
StormEvents
| where InjuriesDirect > 0
| summarize by State, EventType
Output
The following table shows only the first 5 rows. To see the full output, run the query.
Minimum and maximum timestamp
Finds the minimum and maximum heavy rain storms in Hawaii. There's no group-by clause, so there's just one row in the output.
Run the query
StormEvents
| where State == "HAWAII" and EventType == "Heavy Rain"
| project Duration = EndTime - StartTime
| summarize Min = min(Duration), Max = max(Duration)
StormEvents
| where State == "HAWAII" and EventType == "Heavy Rain"
| project Duration = EndTime - StartTime
| summarize Min = min(Duration), Max = max(Duration)
Output
Distinct count
The following query calculates the number of unique storm event types for each state and sorts the results by the number of unique storm types:
Run the query
StormEvents
| summarize TypesOfStorms=dcount(EventType) by State
| sort by TypesOfStorms
StormEvents
| summarize TypesOfStorms=dcount(EventType) by State
| sort by TypesOfStorms
Output
The following table shows only the first 5 rows. To see the full output, run the query.
Histogram
The following example calculates a histogram storm event types that had storms lasting longer than 1 day. BecauseDurationhas many values, usebin()to group its values into 1-day intervals.
Duration
bin()
Run the query
StormEvents
| project EventType, Duration = EndTime - StartTime
| where Duration > 1d
| summarize EventCount=count() by EventType, Length=bin(Duration, 1d)
| sort by Length
StormEvents
| project EventType, Duration = EndTime - StartTime
| where Duration > 1d
| summarize EventCount=count() by EventType, Length=bin(Duration, 1d)
| sort by Length
Output
Aggregates default values
When the input ofsummarizeoperator has at least one empty group-by key, its result is empty, too.
summarize
When the input ofsummarizeoperator doesn't have an empty group-by key, the result is the default values of the aggregates used in thesummarizeFor more information, seeDefault values of aggregations.
summarize
summarize
Run the query
datatable(x:long)[]
| summarize any_x=take_any(x), arg_max_x=arg_max(x, *), arg_min_x=arg_min(x, *), avg(x), buildschema(todynamic(tostring(x))), max(x), min(x), percentile(x, 55), hll(x) ,stdev(x), sum(x), sumif(x, x > 0), tdigest(x), variance(x)
datatable(x:long)[]
| summarize any_x=take_any(x), arg_max_x=arg_max(x, *), arg_min_x=arg_min(x, *), avg(x), buildschema(todynamic(tostring(x))), max(x), min(x), percentile(x, 55), hll(x) ,stdev(x), sum(x), sumif(x, x > 0), tdigest(x), variance(x)
Output
The result ofavg_x(x)isNaNdue to dividing by 0.
avg_x(x)
NaN
Run the query
datatable(x:long)[]
| summarize  count(x), countif(x > 0) , dcount(x), dcountif(x, x > 0)
datatable(x:long)[]
| summarize  count(x), countif(x > 0) , dcount(x), dcountif(x, x > 0)
Output
Run the query
datatable(x:long)[]
| summarize  make_set(x), make_list(x)
datatable(x:long)[]
| summarize  make_set(x), make_list(x)
Output
The aggregate avg sums all the non-nulls and counts only those which participated in the calculation (won't take nulls into account).
Run the query
range x from 1 to 4 step 1
| extend y = iff(x == 1, real(null), real(5))
| summarize sum(y), avg(y)
range x from 1 to 4 step 1
| extend y = iff(x == 1, real(null), real(5))
| summarize sum(y), avg(y)
Output
The regular count will count nulls:
Run the query
range x from 1 to 2 step 1
| extend y = iff(x == 1, real(null), real(5))
| summarize count(y)
range x from 1 to 2 step 1
| extend y = iff(x == 1, real(null), real(5))
| summarize count(y)
Output
Run the query
range x from 1 to 2 step 1
| extend y = iff(x == 1, real(null), real(5))
| summarize make_set(y), make_set(y)
range x from 1 to 2 step 1
| extend y = iff(x == 1, real(null), real(5))
| summarize make_set(y), make_set(y)
Output
Feedback
Was this page helpful?
Additional resources