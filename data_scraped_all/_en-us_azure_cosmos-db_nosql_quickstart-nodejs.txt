Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Quickstart: Use Azure Cosmos DB for NoSQL with Azure SDK for Node.js
Article
2025-04-08
6 contributors
Applies to: â NoSQL
In this article
.NET
Node.js
Java
Python
Go
Rust
In this quickstart, you deploy a basic Azure Cosmos DB for NoSQL application using the Azure SDK for Node.js. Azure Cosmos DB for NoSQL is a schemaless data store allowing applications to store unstructured data in the cloud. Query data in your containers and perform common operations on individual items using the Azure SDK for Node.js.
API reference documentation|Library source code|Package (npm)|Azure Developer CLI
Prerequisites
Azure Developer CLI
Docker Desktop
Node.js 22 or newer
If you don't have an Azure account, create afree accountbefore you begin.
Initialize the project
Use the Azure Developer CLI (azd) to create an Azure Cosmos DB for NoSQL account and deploy a containerized sample application. The sample application uses the client library to manage, create, read, and query sample data.
azd
Open a terminal in an empty directory.
Open a terminal in an empty directory.
If you're not already authenticated, authenticate to the Azure Developer CLI usingazd auth login. Follow the steps specified by the tool to authenticate to the CLI using your preferred Azure credentials.azd auth login
If you're not already authenticated, authenticate to the Azure Developer CLI usingazd auth login. Follow the steps specified by the tool to authenticate to the CLI using your preferred Azure credentials.
azd auth login
azd auth login
azd auth login
Useazd initto initialize the project.azd init --template cosmos-db-nosql-nodejs-quickstart
Useazd initto initialize the project.
azd init
azd init --template cosmos-db-nosql-nodejs-quickstart
azd init --template cosmos-db-nosql-nodejs-quickstart
During initialization, configure a unique environment name.
During initialization, configure a unique environment name.
Deploy the Azure Cosmos DB account usingazd up. The Bicep templates also deploy a sample web application.azd up
Deploy the Azure Cosmos DB account usingazd up. The Bicep templates also deploy a sample web application.
azd up
azd up
azd up
During the provisioning process, select your subscription, desired location, and target resource group. Wait for the provisioning process to complete. The process can takeapproximately five minutes.
During the provisioning process, select your subscription, desired location, and target resource group. Wait for the provisioning process to complete. The process can takeapproximately five minutes.
Once the provisioning of your Azure resources is done, a URL to the running web application is included in the output.Deploying services (azd deploy)

  (â) Done: Deploying service web
- Endpoint: <https://[container-app-sub-domain].azurecontainerapps.io>

SUCCESS: Your application was provisioned and deployed to Azure in 5 minutes 0 seconds.
Once the provisioning of your Azure resources is done, a URL to the running web application is included in the output.
Deploying services (azd deploy)

  (â) Done: Deploying service web
- Endpoint: <https://[container-app-sub-domain].azurecontainerapps.io>

SUCCESS: Your application was provisioned and deployed to Azure in 5 minutes 0 seconds.
Deploying services (azd deploy)

  (â) Done: Deploying service web
- Endpoint: <https://[container-app-sub-domain].azurecontainerapps.io>

SUCCESS: Your application was provisioned and deployed to Azure in 5 minutes 0 seconds.
Use the URL in the console to navigate to your web application in the browser. Observe the output of the running app.
Use the URL in the console to navigate to your web application in the browser. Observe the output of the running app.


Install the client library
The client library is available through the Node Package Manager, as the@azure/cosmospackage.
@azure/cosmos
Open a terminal and navigate to the/srcfolder.cd ./src
Open a terminal and navigate to the/srcfolder.
/src
cd ./src
cd ./src
If not already installed, install the@azure/cosmospackage usingnpm install.npm install --save @azure/cosmos
If not already installed, install the@azure/cosmospackage usingnpm install.
@azure/cosmos
npm install
npm install --save @azure/cosmos
npm install --save @azure/cosmos
Also, install the@azure/identitypackage if not already installed.npm install --save @azure/identity
Also, install the@azure/identitypackage if not already installed.
@azure/identity
npm install --save @azure/identity
npm install --save @azure/identity
Open and review thesrc/package.jsonfile to validate that theazure-cosmosandazure-identityentries both exist.
Open and review thesrc/package.jsonfile to validate that theazure-cosmosandazure-identityentries both exist.
azure-cosmos
azure-identity
Import libraries
Import theDefaultAzureCredentialandCosmosClienttypes into your application code.
DefaultAzureCredential
CosmosClient
import { DefaultAzureCredential } from '@azure/identity';
import { CosmosClient } from '@azure/cosmos';
import { DefaultAzureCredential } from '@azure/identity';
import { CosmosClient } from '@azure/cosmos';
Import all required types into your application code.
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { DefaultAzureCredential, TokenCredential } from '@azure/identity';
import { Container, CosmosClient, Database, FeedResponse, ItemResponse, SqlQuerySpec } from '@azure/cosmos';
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { DefaultAzureCredential, TokenCredential } from '@azure/identity';
import { Container, CosmosClient, Database, FeedResponse, ItemResponse, SqlQuerySpec } from '@azure/cosmos';
Object model
CosmosClient
Database
Container
PartitionKey
SqlQuerySpec
Code examples
Authenticate the client
Get a database
Get a container
Create an item
Get an item
Query items
The sample code in the template uses a database namedcosmicworksand container namedproducts. Theproductscontainer contains details such as name, category, quantity, a unique identifier, and a sale flag for each product. The container uses the/categoryproperty as a logical partition key.
cosmicworks
products
products
/category
Authenticate the client
This sample creates a new instance of theCosmosClienttype and authenticates using aDefaultAzureCredentialinstance.
CosmosClient
DefaultAzureCredential
const credential = new DefaultAzureCredential();

const client = new CosmosClient({
    '<azure-cosmos-db-nosql-account-endpoint>',
    aadCredentials: credential
});
const credential = new DefaultAzureCredential();

const client = new CosmosClient({
    '<azure-cosmos-db-nosql-account-endpoint>',
    aadCredentials: credential
});
const credential: TokenCredential = new DefaultAzureCredential();

const client = new CosmosClient({
    '<azure-cosmos-db-nosql-account-endpoint>',
    aadCredentials: credential
});
const credential: TokenCredential = new DefaultAzureCredential();

const client = new CosmosClient({
    '<azure-cosmos-db-nosql-account-endpoint>',
    aadCredentials: credential
});
Get a database
Useclient.databaseto retrieve the existing database namedcosmicworks.
client.database
cosmicworks
const database = client.database('cosmicworks');
const database = client.database('cosmicworks');
const database: Database = client.database('cosmicworks');
const database: Database = client.database('cosmicworks');
Get a container
Retrieve the existingproductscontainer usingdatabase.container.
products
database.container
const container = database.container('products');
const container = database.container('products');
const container: Container = database.container('products');
const container: Container = database.container('products');
Create an item
Build a new object with all of the members you want to serialize into JSON. In this example, the type has a unique identifier, and fields for category, name, quantity, price, and sale. Create an item in the container usingcontainer.items.upsert. This method "upserts" the item effectively replacing the item if it already exists.
container.items.upsert
const item = {
    'id': 'aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb',
    'category': 'gear-surf-surfboards',
    'name': 'Yamba Surfboard',
    'quantity': 12,
    'price': 850.00,
    'clearance': false
};

let response = await container.items.upsert(item);
const item = {
    'id': 'aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb',
    'category': 'gear-surf-surfboards',
    'name': 'Yamba Surfboard',
    'quantity': 12,
    'price': 850.00,
    'clearance': false
};

let response = await container.items.upsert(item);
const item: Product = {
    'id': 'aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb',
    'category': 'gear-surf-surfboards',
    'name': 'Yamba Surfboard',
    'quantity': 12,
    'price': 850.00,
    'clearance': false
};

let response: ItemResponse<Product> = await container.items.upsert<Product>(item);
const item: Product = {
    'id': 'aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb',
    'category': 'gear-surf-surfboards',
    'name': 'Yamba Surfboard',
    'quantity': 12,
    'price': 850.00,
    'clearance': false
};

let response: ItemResponse<Product> = await container.items.upsert<Product>(item);
Read an item
Perform a point read operation by using both the unique identifier (id) and partition key fields. Usecontainer.itemto get a pointer to an item anditem.readto efficiently retrieve the specific item.
id
container.item
item.read
const id = 'aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb';
const partitionKey = 'gear-surf-surfboards';

let response = await container.item(id, partitionKey).read();
let read_item = response.resource;
const id = 'aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb';
const partitionKey = 'gear-surf-surfboards';

let response = await container.item(id, partitionKey).read();
let read_item = response.resource;
const id = 'aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb';
const partitionKey = 'gear-surf-surfboards';

let response: ItemResponse<Product> = await container.item(id, partitionKey).read<Product>();
let read_item: Product = response.resource!;
const id = 'aaaaaaaa-0000-1111-2222-bbbbbbbbbbbb';
const partitionKey = 'gear-surf-surfboards';

let response: ItemResponse<Product> = await container.item(id, partitionKey).read<Product>();
let read_item: Product = response.resource!;
Query items
Perform a query over multiple items in a container usingcontainer.items.query. Find all items within a specified category using this parameterized query:
container.items.query
SELECT * FROM products p WHERE p.category = @category
SELECT * FROM products p WHERE p.category = @category
Fetch all of the results of the query usingquery.fetchAll. Loop through the results of the query.
query.fetchAll
const querySpec = {
    query: 'SELECT * FROM products p WHERE p.category = @category',
    parameters: [
        {
            name: '@category',
            value: 'gear-surf-surfboards'
        }
    ]
};

let response = await container.items.query(querySpec).fetchAll();
for (let item of response.resources) {
    // Do something
}
const querySpec = {
    query: 'SELECT * FROM products p WHERE p.category = @category',
    parameters: [
        {
            name: '@category',
            value: 'gear-surf-surfboards'
        }
    ]
};

let response = await container.items.query(querySpec).fetchAll();
for (let item of response.resources) {
    // Do something
}
const querySpec: SqlQuerySpec = {
    query: 'SELECT * FROM products p WHERE p.category = @category',
    parameters: [
        {
            name: '@category',
            value: 'gear-surf-surfboards'
        }
    ]
};

let response: FeedResponse<Product> = await container.items.query<Product>(querySpec).fetchAll();
for (let item of response.resources) {
    // Do something
}
const querySpec: SqlQuerySpec = {
    query: 'SELECT * FROM products p WHERE p.category = @category',
    parameters: [
        {
            name: '@category',
            value: 'gear-surf-surfboards'
        }
    ]
};

let response: FeedResponse<Product> = await container.items.query<Product>(querySpec).fetchAll();
for (let item of response.resources) {
    // Do something
}
Explore your data
Use the Visual Studio Code extension for Azure Cosmos DB to explore your NoSQL data. You can perform core database operations including, but not limited to:
Performing queries using a scrapbook or the query editor
Modifying, updating, creating, and deleting items
Importing bulk data from other sources
Managing databases and containers
For more information, seeHow-to use Visual Studio Code extension to explore Azure Cosmos DB for NoSQL data.
Clean up resources
When you no longer need the sample application or resources, remove the corresponding deployment and all resources.
azd down
azd down
Related content
.NET Quickstart
Java Quickstart
Python Quickstart
Go Quickstart
Rust Quickstart
Feedback
Was this page helpful?
Additional resources