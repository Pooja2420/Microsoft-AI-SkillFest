Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Microsoft.SecurityInsights dataConnectors
Article
2025-03-18
2 contributors
In this article
Latest
2025-03-01
2025-01-01-preview
2024-10-01-preview
2024-09-01
2024-04-01-preview
2024-03-01
2024-01-01-preview
2023-12-01-preview
2023-11-01
2023-10-01-preview
2023-09-01-preview
2023-08-01-preview
2023-07-01-preview
2023-06-01-preview
2023-05-01-preview
2023-04-01-preview
2023-03-01-preview
2023-02-01
2023-02-01-preview
2022-12-01-preview
2022-11-01
2022-11-01-preview
2022-10-01-preview
2022-09-01-preview
2022-08-01
2022-08-01-preview
2022-07-01-preview
2022-06-01-preview
2022-05-01-preview
2022-04-01-preview
2022-01-01-preview
2021-10-01
2021-10-01-preview
2021-09-01-preview
2021-03-01-preview
2020-01-01
2019-01-01-preview
Bicep resource definition
The dataConnectors resource type can be deployed with operations that target:
For a list of changed properties in each API version, seechange log.
Resource format
To create a Microsoft.SecurityInsights/dataConnectors resource, add the following Bicep to your template.
resource symbolicname 'Microsoft.SecurityInsights/dataConnectors@2025-03-01' = {
  etag: 'string'
  name: 'string'
  kind: 'string'
  // For remaining properties, see Microsoft.SecurityInsights/dataConnectors objects
}
resource symbolicname 'Microsoft.SecurityInsights/dataConnectors@2025-03-01' = {
  etag: 'string'
  name: 'string'
  kind: 'string'
  // For remaining properties, see Microsoft.SecurityInsights/dataConnectors objects
}
Microsoft.SecurityInsights/dataConnectors objects
Set thekindproperty to specify the type of object.
ForAmazonWebServicesCloudTrail, use:
{
  kind: 'AmazonWebServicesCloudTrail'
  properties: {
    awsRoleArn: 'string'
    dataTypes: {
      logs: {
        state: 'string'
      }
    }
  }
}
{
  kind: 'AmazonWebServicesCloudTrail'
  properties: {
    awsRoleArn: 'string'
    dataTypes: {
      logs: {
        state: 'string'
      }
    }
  }
}
ForAzureActiveDirectory, use:
{
  kind: 'AzureActiveDirectory'
  properties: {
    dataTypes: {
      alerts: {
        state: 'string'
      }
    }
    tenantId: 'string'
  }
}
{
  kind: 'AzureActiveDirectory'
  properties: {
    dataTypes: {
      alerts: {
        state: 'string'
      }
    }
    tenantId: 'string'
  }
}
ForAzureAdvancedThreatProtection, use:
{
  kind: 'AzureAdvancedThreatProtection'
  properties: {
    dataTypes: {
      alerts: {
        state: 'string'
      }
    }
    tenantId: 'string'
  }
}
{
  kind: 'AzureAdvancedThreatProtection'
  properties: {
    dataTypes: {
      alerts: {
        state: 'string'
      }
    }
    tenantId: 'string'
  }
}
ForAzureSecurityCenter, use:
{
  kind: 'AzureSecurityCenter'
  properties: {
    dataTypes: {
      alerts: {
        state: 'string'
      }
    }
    subscriptionId: 'string'
  }
}
{
  kind: 'AzureSecurityCenter'
  properties: {
    dataTypes: {
      alerts: {
        state: 'string'
      }
    }
    subscriptionId: 'string'
  }
}
ForMicrosoftCloudAppSecurity, use:
{
  kind: 'MicrosoftCloudAppSecurity'
  properties: {
    dataTypes: {
      alerts: {
        state: 'string'
      }
      discoveryLogs: {
        state: 'string'
      }
    }
    tenantId: 'string'
  }
}
{
  kind: 'MicrosoftCloudAppSecurity'
  properties: {
    dataTypes: {
      alerts: {
        state: 'string'
      }
      discoveryLogs: {
        state: 'string'
      }
    }
    tenantId: 'string'
  }
}
ForMicrosoftDefenderAdvancedThreatProtection, use:
{
  kind: 'MicrosoftDefenderAdvancedThreatProtection'
  properties: {
    dataTypes: {
      alerts: {
        state: 'string'
      }
    }
    tenantId: 'string'
  }
}
{
  kind: 'MicrosoftDefenderAdvancedThreatProtection'
  properties: {
    dataTypes: {
      alerts: {
        state: 'string'
      }
    }
    tenantId: 'string'
  }
}
ForMicrosoftThreatIntelligence, use:
{
  kind: 'MicrosoftThreatIntelligence'
  properties: {
    dataTypes: {
      microsoftEmergingThreatFeed: {
        lookbackPeriod: 'string'
        state: 'string'
      }
    }
    tenantId: 'string'
  }
}
{
  kind: 'MicrosoftThreatIntelligence'
  properties: {
    dataTypes: {
      microsoftEmergingThreatFeed: {
        lookbackPeriod: 'string'
        state: 'string'
      }
    }
    tenantId: 'string'
  }
}
ForOffice365, use:
{
  kind: 'Office365'
  properties: {
    dataTypes: {
      exchange: {
        state: 'string'
      }
      sharePoint: {
        state: 'string'
      }
      teams: {
        state: 'string'
      }
    }
    tenantId: 'string'
  }
}
{
  kind: 'Office365'
  properties: {
    dataTypes: {
      exchange: {
        state: 'string'
      }
      sharePoint: {
        state: 'string'
      }
      teams: {
        state: 'string'
      }
    }
    tenantId: 'string'
  }
}
ForPremiumMicrosoftDefenderForThreatIntelligence, use:
{
  kind: 'PremiumMicrosoftDefenderForThreatIntelligence'
  properties: {
    dataTypes: {
      connector: {
        state: 'string'
      }
    }
    lookbackPeriod: 'string'
    requiredSKUsPresent: bool
    tenantId: 'string'
  }
}
{
  kind: 'PremiumMicrosoftDefenderForThreatIntelligence'
  properties: {
    dataTypes: {
      connector: {
        state: 'string'
      }
    }
    lookbackPeriod: 'string'
    requiredSKUsPresent: bool
    tenantId: 'string'
  }
}
ForRestApiPoller, use:
{
  kind: 'RestApiPoller'
  properties: {
    addOnAttributes: {
      {customized property}: 'string'
    }
    auth: {
      type: 'string'
      // For remaining properties, see CcpAuthConfig objects
    }
    connectorDefinitionName: 'string'
    dataType: 'string'
    dcrConfig: {
      dataCollectionEndpoint: 'string'
      dataCollectionRuleImmutableId: 'string'
      streamName: 'string'
    }
    isActive: bool
    paging: {
      pageSize: int
      pageSizeParameterName: 'string'
      pagingType: 'string'
    }
    request: {
      apiEndpoint: 'string'
      endTimeAttributeName: 'string'
      headers: {
        {customized property}: 'string'
      }
      httpMethod: 'string'
      isPostPayloadJson: bool
      queryParameters: {
        {customized property}: any(...)
      }
      queryParametersTemplate: 'string'
      queryTimeFormat: 'string'
      queryTimeIntervalAttributeName: 'string'
      queryTimeIntervalDelimiter: 'string'
      queryTimeIntervalPrepend: 'string'
      queryWindowInMin: int
      rateLimitQPS: int
      retryCount: int
      startTimeAttributeName: 'string'
      timeoutInSeconds: int
    }
    response: {
      compressionAlgo: 'string'
      convertChildPropertiesToArray: bool
      csvDelimiter: 'string'
      csvEscape: 'string'
      eventsJsonPaths: [
        'string'
      ]
      format: 'string'
      hasCsvBoundary: bool
      hasCsvHeader: bool
      isGzipCompressed: bool
      successStatusJsonPath: 'string'
      successStatusValue: 'string'
    }
  }
}
{
  kind: 'RestApiPoller'
  properties: {
    addOnAttributes: {
      {customized property}: 'string'
    }
    auth: {
      type: 'string'
      // For remaining properties, see CcpAuthConfig objects
    }
    connectorDefinitionName: 'string'
    dataType: 'string'
    dcrConfig: {
      dataCollectionEndpoint: 'string'
      dataCollectionRuleImmutableId: 'string'
      streamName: 'string'
    }
    isActive: bool
    paging: {
      pageSize: int
      pageSizeParameterName: 'string'
      pagingType: 'string'
    }
    request: {
      apiEndpoint: 'string'
      endTimeAttributeName: 'string'
      headers: {
        {customized property}: 'string'
      }
      httpMethod: 'string'
      isPostPayloadJson: bool
      queryParameters: {
        {customized property}: any(...)
      }
      queryParametersTemplate: 'string'
      queryTimeFormat: 'string'
      queryTimeIntervalAttributeName: 'string'
      queryTimeIntervalDelimiter: 'string'
      queryTimeIntervalPrepend: 'string'
      queryWindowInMin: int
      rateLimitQPS: int
      retryCount: int
      startTimeAttributeName: 'string'
      timeoutInSeconds: int
    }
    response: {
      compressionAlgo: 'string'
      convertChildPropertiesToArray: bool
      csvDelimiter: 'string'
      csvEscape: 'string'
      eventsJsonPaths: [
        'string'
      ]
      format: 'string'
      hasCsvBoundary: bool
      hasCsvHeader: bool
      isGzipCompressed: bool
      successStatusJsonPath: 'string'
      successStatusValue: 'string'
    }
  }
}
ForThreatIntelligence, use:
{
  kind: 'ThreatIntelligence'
  properties: {
    dataTypes: {
      indicators: {
        state: 'string'
      }
    }
    tenantId: 'string'
    tipLookbackPeriod: 'string'
  }
}
{
  kind: 'ThreatIntelligence'
  properties: {
    dataTypes: {
      indicators: {
        state: 'string'
      }
    }
    tenantId: 'string'
    tipLookbackPeriod: 'string'
  }
}
CcpAuthConfig objects
Set thetypeproperty to specify the type of object.
ForAPIKey, use:
{
  apiKey: 'string'
  apiKeyIdentifier: 'string'
  apiKeyName: 'string'
  isApiKeyInPostPayload: bool
  type: 'APIKey'
}
{
  apiKey: 'string'
  apiKeyIdentifier: 'string'
  apiKeyName: 'string'
  isApiKeyInPostPayload: bool
  type: 'APIKey'
}
ForAWS, use:
{
  externalId: 'string'
  roleArn: 'string'
  type: 'AWS'
}
{
  externalId: 'string'
  roleArn: 'string'
  type: 'AWS'
}
ForBasic, use:
{
  password: 'string'
  type: 'Basic'
  userName: 'string'
}
{
  password: 'string'
  type: 'Basic'
  userName: 'string'
}
ForGCP, use:
{
  projectNumber: 'string'
  serviceAccountEmail: 'string'
  type: 'GCP'
  workloadIdentityProviderId: 'string'
}
{
  projectNumber: 'string'
  serviceAccountEmail: 'string'
  type: 'GCP'
  workloadIdentityProviderId: 'string'
}
ForGitHub, use:
{
  installationId: 'string'
  type: 'GitHub'
}
{
  installationId: 'string'
  type: 'GitHub'
}
ForJwtToken, use:
{
  headers: {
    {customized property}: 'string'
  }
  isCredentialsInHeaders: bool
  isJsonRequest: bool
  password: {
    {customized property}: 'string'
  }
  queryParameters: {
    {customized property}: 'string'
  }
  requestTimeoutInSeconds: int
  tokenEndpoint: 'string'
  type: 'JwtToken'
  userName: {
    {customized property}: 'string'
  }
}
{
  headers: {
    {customized property}: 'string'
  }
  isCredentialsInHeaders: bool
  isJsonRequest: bool
  password: {
    {customized property}: 'string'
  }
  queryParameters: {
    {customized property}: 'string'
  }
  requestTimeoutInSeconds: int
  tokenEndpoint: 'string'
  type: 'JwtToken'
  userName: {
    {customized property}: 'string'
  }
}
ForNone, use:
{
  type: 'None'
}
{
  type: 'None'
}
ForOAuth2, use:
{
  accessTokenPrepend: 'string'
  authorizationCode: 'string'
  authorizationEndpoint: 'string'
  authorizationEndpointHeaders: {
    {customized property}: 'string'
  }
  authorizationEndpointQueryParameters: {
    {customized property}: 'string'
  }
  clientId: 'string'
  clientSecret: 'string'
  grantType: 'string'
  isCredentialsInHeaders: bool
  isJwtBearerFlow: bool
  redirectUri: 'string'
  scope: 'string'
  tokenEndpoint: 'string'
  tokenEndpointHeaders: {
    {customized property}: 'string'
  }
  tokenEndpointQueryParameters: {
    {customized property}: 'string'
  }
  type: 'OAuth2'
}
{
  accessTokenPrepend: 'string'
  authorizationCode: 'string'
  authorizationEndpoint: 'string'
  authorizationEndpointHeaders: {
    {customized property}: 'string'
  }
  authorizationEndpointQueryParameters: {
    {customized property}: 'string'
  }
  clientId: 'string'
  clientSecret: 'string'
  grantType: 'string'
  isCredentialsInHeaders: bool
  isJwtBearerFlow: bool
  redirectUri: 'string'
  scope: 'string'
  tokenEndpoint: 'string'
  tokenEndpointHeaders: {
    {customized property}: 'string'
  }
  tokenEndpointQueryParameters: {
    {customized property}: 'string'
  }
  type: 'OAuth2'
}
ForOracle, use:
{
  pemFile: 'string'
  publicFingerprint: 'string'
  tenantId: 'string'
  type: 'Oracle'
  userId: 'string'
}
{
  pemFile: 'string'
  publicFingerprint: 'string'
  tenantId: 'string'
  type: 'Oracle'
  userId: 'string'
}
ForServiceBus, use:
{
  credentialsConfig: {
    {customized property}: 'string'
  }
  storageAccountCredentialsConfig: {
    {customized property}: 'string'
  }
  type: 'ServiceBus'
}
{
  credentialsConfig: {
    {customized property}: 'string'
  }
  storageAccountCredentialsConfig: {
    {customized property}: 'string'
  }
  type: 'ServiceBus'
}
ForSession, use:
{
  headers: {
    {customized property}: 'string'
  }
  isPostPayloadJson: bool
  password: {
    {customized property}: 'string'
  }
  queryParameters: {
    {customized property}: any(...)
  }
  sessionIdName: 'string'
  sessionLoginRequestUri: 'string'
  sessionTimeoutInMinutes: int
  type: 'Session'
  userName: {
    {customized property}: 'string'
  }
}
{
  headers: {
    {customized property}: 'string'
  }
  isPostPayloadJson: bool
  password: {
    {customized property}: 'string'
  }
  queryParameters: {
    {customized property}: any(...)
  }
  sessionIdName: 'string'
  sessionLoginRequestUri: 'string'
  sessionTimeoutInMinutes: int
  type: 'Session'
  userName: {
    {customized property}: 'string'
  }
}
Property Values
AADDataConnector
AADDataConnectorProperties
AatpDataConnector
AatpDataConnectorProperties
AlertsDataTypeOfDataConnector
ApiKeyAuthModel
ASCDataConnector
ASCDataConnectorProperties
AWSAuthModel
AwsCloudTrailDataConnector
AwsCloudTrailDataConnectorDataTypes
AwsCloudTrailDataConnectorDataTypesLogs
AwsCloudTrailDataConnectorProperties
BasicAuthModel
CcpAuthConfig
CcpResponseConfig
DataConnectorDataTypeCommon
DCRConfiguration
GCPAuthModel
GenericBlobSbsAuthModel
GenericBlobSbsAuthModelCredentialsConfig
GenericBlobSbsAuthModelStorageAccountCredentialsConfig
GitHubAuthModel
JwtAuthModel
value
Key
Value
JwtAuthModelHeaders
JwtAuthModelPassword
JwtAuthModelQueryParameters
JwtAuthModelUserName
McasDataConnector
McasDataConnectorDataTypes
McasDataConnectorProperties
MdatpDataConnector
MdatpDataConnectorProperties
Microsoft.SecurityInsights/dataConnectors
MstiDataConnector
MstiDataConnectorDataTypes
MstiDataConnectorDataTypesMicrosoftEmergingThreatFeed
MstiDataConnectorProperties
NoneAuthModel
OAuthModel
OAuthModelAuthorizationEndpointHeaders
OAuthModelAuthorizationEndpointQueryParameters
OAuthModelTokenEndpointHeaders
OAuthModelTokenEndpointQueryParameters
OfficeDataConnector
OfficeDataConnectorDataTypes
OfficeDataConnectorDataTypesExchange
OfficeDataConnectorDataTypesSharePoint
OfficeDataConnectorDataTypesTeams
OfficeDataConnectorProperties
OracleAuthModel
PremiumMdtiDataConnectorDataTypes
PremiumMdtiDataConnectorDataTypesConnector
PremiumMdtiDataConnectorProperties
PremiumMicrosoftDefenderForThreatIntelligence
RestApiPollerDataConnector
RestApiPollerDataConnectorProperties
RestApiPollerDataConnectorPropertiesAddOnAttributes
RestApiPollerRequestConfig
startTimeAttributeName
queryTimeIntervalPrepend
queryTimeIntervalDelimiter
queryTimeIntervalAttributeName
queryTimeIntervalAttributeName
endTimeAttributeName
RestApiPollerRequestConfigHeaders
RestApiPollerRequestConfigQueryParameters
RestApiPollerRequestPagingConfig
SessionAuthModel
SessionAuthModelHeaders
SessionAuthModelPassword
SessionAuthModelQueryParameters
SessionAuthModelUserName
TIDataConnector
TIDataConnectorDataTypes
TIDataConnectorDataTypesIndicators
TIDataConnectorProperties
ARM template resource definition
The dataConnectors resource type can be deployed with operations that target:
For a list of changed properties in each API version, seechange log.
Resource format
To create a Microsoft.SecurityInsights/dataConnectors resource, add the following JSON to your template.
{
  "etag": "string",
  "name": "string",
  "kind": "string"
  // For remaining properties, see Microsoft.SecurityInsights/dataConnectors objects
}
{
  "etag": "string",
  "name": "string",
  "kind": "string"
  // For remaining properties, see Microsoft.SecurityInsights/dataConnectors objects
}
Microsoft.SecurityInsights/dataConnectors objects
Set thekindproperty to specify the type of object.
ForAmazonWebServicesCloudTrail, use:
{
  "kind": "AmazonWebServicesCloudTrail",
  "properties": {
    "awsRoleArn": "string",
    "dataTypes": {
      "logs": {
        "state": "string"
      }
    }
  }
}
{
  "kind": "AmazonWebServicesCloudTrail",
  "properties": {
    "awsRoleArn": "string",
    "dataTypes": {
      "logs": {
        "state": "string"
      }
    }
  }
}
ForAzureActiveDirectory, use:
{
  "kind": "AzureActiveDirectory",
  "properties": {
    "dataTypes": {
      "alerts": {
        "state": "string"
      }
    },
    "tenantId": "string"
  }
}
{
  "kind": "AzureActiveDirectory",
  "properties": {
    "dataTypes": {
      "alerts": {
        "state": "string"
      }
    },
    "tenantId": "string"
  }
}
ForAzureAdvancedThreatProtection, use:
{
  "kind": "AzureAdvancedThreatProtection",
  "properties": {
    "dataTypes": {
      "alerts": {
        "state": "string"
      }
    },
    "tenantId": "string"
  }
}
{
  "kind": "AzureAdvancedThreatProtection",
  "properties": {
    "dataTypes": {
      "alerts": {
        "state": "string"
      }
    },
    "tenantId": "string"
  }
}
ForAzureSecurityCenter, use:
{
  "kind": "AzureSecurityCenter",
  "properties": {
    "dataTypes": {
      "alerts": {
        "state": "string"
      }
    },
    "subscriptionId": "string"
  }
}
{
  "kind": "AzureSecurityCenter",
  "properties": {
    "dataTypes": {
      "alerts": {
        "state": "string"
      }
    },
    "subscriptionId": "string"
  }
}
ForMicrosoftCloudAppSecurity, use:
{
  "kind": "MicrosoftCloudAppSecurity",
  "properties": {
    "dataTypes": {
      "alerts": {
        "state": "string"
      },
      "discoveryLogs": {
        "state": "string"
      }
    },
    "tenantId": "string"
  }
}
{
  "kind": "MicrosoftCloudAppSecurity",
  "properties": {
    "dataTypes": {
      "alerts": {
        "state": "string"
      },
      "discoveryLogs": {
        "state": "string"
      }
    },
    "tenantId": "string"
  }
}
ForMicrosoftDefenderAdvancedThreatProtection, use:
{
  "kind": "MicrosoftDefenderAdvancedThreatProtection",
  "properties": {
    "dataTypes": {
      "alerts": {
        "state": "string"
      }
    },
    "tenantId": "string"
  }
}
{
  "kind": "MicrosoftDefenderAdvancedThreatProtection",
  "properties": {
    "dataTypes": {
      "alerts": {
        "state": "string"
      }
    },
    "tenantId": "string"
  }
}
ForMicrosoftThreatIntelligence, use:
{
  "kind": "MicrosoftThreatIntelligence",
  "properties": {
    "dataTypes": {
      "microsoftEmergingThreatFeed": {
        "lookbackPeriod": "string",
        "state": "string"
      }
    },
    "tenantId": "string"
  }
}
{
  "kind": "MicrosoftThreatIntelligence",
  "properties": {
    "dataTypes": {
      "microsoftEmergingThreatFeed": {
        "lookbackPeriod": "string",
        "state": "string"
      }
    },
    "tenantId": "string"
  }
}
ForOffice365, use:
{
  "kind": "Office365",
  "properties": {
    "dataTypes": {
      "exchange": {
        "state": "string"
      },
      "sharePoint": {
        "state": "string"
      },
      "teams": {
        "state": "string"
      }
    },
    "tenantId": "string"
  }
}
{
  "kind": "Office365",
  "properties": {
    "dataTypes": {
      "exchange": {
        "state": "string"
      },
      "sharePoint": {
        "state": "string"
      },
      "teams": {
        "state": "string"
      }
    },
    "tenantId": "string"
  }
}
ForPremiumMicrosoftDefenderForThreatIntelligence, use:
{
  "kind": "PremiumMicrosoftDefenderForThreatIntelligence",
  "properties": {
    "dataTypes": {
      "connector": {
        "state": "string"
      }
    },
    "lookbackPeriod": "string",
    "requiredSKUsPresent": "bool",
    "tenantId": "string"
  }
}
{
  "kind": "PremiumMicrosoftDefenderForThreatIntelligence",
  "properties": {
    "dataTypes": {
      "connector": {
        "state": "string"
      }
    },
    "lookbackPeriod": "string",
    "requiredSKUsPresent": "bool",
    "tenantId": "string"
  }
}
ForRestApiPoller, use:
{
  "kind": "RestApiPoller",
  "properties": {
    "addOnAttributes": {
      "{customized property}": "string"
    },
    "auth": {
      "type": "string"
      // For remaining properties, see CcpAuthConfig objects
    },
    "connectorDefinitionName": "string",
    "dataType": "string",
    "dcrConfig": {
      "dataCollectionEndpoint": "string",
      "dataCollectionRuleImmutableId": "string",
      "streamName": "string"
    },
    "isActive": "bool",
    "paging": {
      "pageSize": "int",
      "pageSizeParameterName": "string",
      "pagingType": "string"
    },
    "request": {
      "apiEndpoint": "string",
      "endTimeAttributeName": "string",
      "headers": {
        "{customized property}": "string"
      },
      "httpMethod": "string",
      "isPostPayloadJson": "bool",
      "queryParameters": {
        "{customized property}": {}
      },
      "queryParametersTemplate": "string",
      "queryTimeFormat": "string",
      "queryTimeIntervalAttributeName": "string",
      "queryTimeIntervalDelimiter": "string",
      "queryTimeIntervalPrepend": "string",
      "queryWindowInMin": "int",
      "rateLimitQPS": "int",
      "retryCount": "int",
      "startTimeAttributeName": "string",
      "timeoutInSeconds": "int"
    },
    "response": {
      "compressionAlgo": "string",
      "convertChildPropertiesToArray": "bool",
      "csvDelimiter": "string",
      "csvEscape": "string",
      "eventsJsonPaths": [ "string" ],
      "format": "string",
      "hasCsvBoundary": "bool",
      "hasCsvHeader": "bool",
      "isGzipCompressed": "bool",
      "successStatusJsonPath": "string",
      "successStatusValue": "string"
    }
  }
}
{
  "kind": "RestApiPoller",
  "properties": {
    "addOnAttributes": {
      "{customized property}": "string"
    },
    "auth": {
      "type": "string"
      // For remaining properties, see CcpAuthConfig objects
    },
    "connectorDefinitionName": "string",
    "dataType": "string",
    "dcrConfig": {
      "dataCollectionEndpoint": "string",
      "dataCollectionRuleImmutableId": "string",
      "streamName": "string"
    },
    "isActive": "bool",
    "paging": {
      "pageSize": "int",
      "pageSizeParameterName": "string",
      "pagingType": "string"
    },
    "request": {
      "apiEndpoint": "string",
      "endTimeAttributeName": "string",
      "headers": {
        "{customized property}": "string"
      },
      "httpMethod": "string",
      "isPostPayloadJson": "bool",
      "queryParameters": {
        "{customized property}": {}
      },
      "queryParametersTemplate": "string",
      "queryTimeFormat": "string",
      "queryTimeIntervalAttributeName": "string",
      "queryTimeIntervalDelimiter": "string",
      "queryTimeIntervalPrepend": "string",
      "queryWindowInMin": "int",
      "rateLimitQPS": "int",
      "retryCount": "int",
      "startTimeAttributeName": "string",
      "timeoutInSeconds": "int"
    },
    "response": {
      "compressionAlgo": "string",
      "convertChildPropertiesToArray": "bool",
      "csvDelimiter": "string",
      "csvEscape": "string",
      "eventsJsonPaths": [ "string" ],
      "format": "string",
      "hasCsvBoundary": "bool",
      "hasCsvHeader": "bool",
      "isGzipCompressed": "bool",
      "successStatusJsonPath": "string",
      "successStatusValue": "string"
    }
  }
}
ForThreatIntelligence, use:
{
  "kind": "ThreatIntelligence",
  "properties": {
    "dataTypes": {
      "indicators": {
        "state": "string"
      }
    },
    "tenantId": "string",
    "tipLookbackPeriod": "string"
  }
}
{
  "kind": "ThreatIntelligence",
  "properties": {
    "dataTypes": {
      "indicators": {
        "state": "string"
      }
    },
    "tenantId": "string",
    "tipLookbackPeriod": "string"
  }
}
CcpAuthConfig objects
Set thetypeproperty to specify the type of object.
ForAPIKey, use:
{
  "apiKey": "string",
  "apiKeyIdentifier": "string",
  "apiKeyName": "string",
  "isApiKeyInPostPayload": "bool",
  "type": "APIKey"
}
{
  "apiKey": "string",
  "apiKeyIdentifier": "string",
  "apiKeyName": "string",
  "isApiKeyInPostPayload": "bool",
  "type": "APIKey"
}
ForAWS, use:
{
  "externalId": "string",
  "roleArn": "string",
  "type": "AWS"
}
{
  "externalId": "string",
  "roleArn": "string",
  "type": "AWS"
}
ForBasic, use:
{
  "password": "string",
  "type": "Basic",
  "userName": "string"
}
{
  "password": "string",
  "type": "Basic",
  "userName": "string"
}
ForGCP, use:
{
  "projectNumber": "string",
  "serviceAccountEmail": "string",
  "type": "GCP",
  "workloadIdentityProviderId": "string"
}
{
  "projectNumber": "string",
  "serviceAccountEmail": "string",
  "type": "GCP",
  "workloadIdentityProviderId": "string"
}
ForGitHub, use:
{
  "installationId": "string",
  "type": "GitHub"
}
{
  "installationId": "string",
  "type": "GitHub"
}
ForJwtToken, use:
{
  "headers": {
    "{customized property}": "string"
  },
  "isCredentialsInHeaders": "bool",
  "isJsonRequest": "bool",
  "password": {
    "{customized property}": "string"
  },
  "queryParameters": {
    "{customized property}": "string"
  },
  "requestTimeoutInSeconds": "int",
  "tokenEndpoint": "string",
  "type": "JwtToken",
  "userName": {
    "{customized property}": "string"
  }
}
{
  "headers": {
    "{customized property}": "string"
  },
  "isCredentialsInHeaders": "bool",
  "isJsonRequest": "bool",
  "password": {
    "{customized property}": "string"
  },
  "queryParameters": {
    "{customized property}": "string"
  },
  "requestTimeoutInSeconds": "int",
  "tokenEndpoint": "string",
  "type": "JwtToken",
  "userName": {
    "{customized property}": "string"
  }
}
ForNone, use:
{
  "type": "None"
}
{
  "type": "None"
}
ForOAuth2, use:
{
  "accessTokenPrepend": "string",
  "authorizationCode": "string",
  "authorizationEndpoint": "string",
  "authorizationEndpointHeaders": {
    "{customized property}": "string"
  },
  "authorizationEndpointQueryParameters": {
    "{customized property}": "string"
  },
  "clientId": "string",
  "clientSecret": "string",
  "grantType": "string",
  "isCredentialsInHeaders": "bool",
  "isJwtBearerFlow": "bool",
  "redirectUri": "string",
  "scope": "string",
  "tokenEndpoint": "string",
  "tokenEndpointHeaders": {
    "{customized property}": "string"
  },
  "tokenEndpointQueryParameters": {
    "{customized property}": "string"
  },
  "type": "OAuth2"
}
{
  "accessTokenPrepend": "string",
  "authorizationCode": "string",
  "authorizationEndpoint": "string",
  "authorizationEndpointHeaders": {
    "{customized property}": "string"
  },
  "authorizationEndpointQueryParameters": {
    "{customized property}": "string"
  },
  "clientId": "string",
  "clientSecret": "string",
  "grantType": "string",
  "isCredentialsInHeaders": "bool",
  "isJwtBearerFlow": "bool",
  "redirectUri": "string",
  "scope": "string",
  "tokenEndpoint": "string",
  "tokenEndpointHeaders": {
    "{customized property}": "string"
  },
  "tokenEndpointQueryParameters": {
    "{customized property}": "string"
  },
  "type": "OAuth2"
}
ForOracle, use:
{
  "pemFile": "string",
  "publicFingerprint": "string",
  "tenantId": "string",
  "type": "Oracle",
  "userId": "string"
}
{
  "pemFile": "string",
  "publicFingerprint": "string",
  "tenantId": "string",
  "type": "Oracle",
  "userId": "string"
}
ForServiceBus, use:
{
  "credentialsConfig": {
    "{customized property}": "string"
  },
  "storageAccountCredentialsConfig": {
    "{customized property}": "string"
  },
  "type": "ServiceBus"
}
{
  "credentialsConfig": {
    "{customized property}": "string"
  },
  "storageAccountCredentialsConfig": {
    "{customized property}": "string"
  },
  "type": "ServiceBus"
}
ForSession, use:
{
  "headers": {
    "{customized property}": "string"
  },
  "isPostPayloadJson": "bool",
  "password": {
    "{customized property}": "string"
  },
  "queryParameters": {
    "{customized property}": {}
  },
  "sessionIdName": "string",
  "sessionLoginRequestUri": "string",
  "sessionTimeoutInMinutes": "int",
  "type": "Session",
  "userName": {
    "{customized property}": "string"
  }
}
{
  "headers": {
    "{customized property}": "string"
  },
  "isPostPayloadJson": "bool",
  "password": {
    "{customized property}": "string"
  },
  "queryParameters": {
    "{customized property}": {}
  },
  "sessionIdName": "string",
  "sessionLoginRequestUri": "string",
  "sessionTimeoutInMinutes": "int",
  "type": "Session",
  "userName": {
    "{customized property}": "string"
  }
}
Property Values
AADDataConnector
AADDataConnectorProperties
AatpDataConnector
AatpDataConnectorProperties
AlertsDataTypeOfDataConnector
ApiKeyAuthModel
ASCDataConnector
ASCDataConnectorProperties
AWSAuthModel
AwsCloudTrailDataConnector
AwsCloudTrailDataConnectorDataTypes
AwsCloudTrailDataConnectorDataTypesLogs
AwsCloudTrailDataConnectorProperties
BasicAuthModel
CcpAuthConfig
CcpResponseConfig
DataConnectorDataTypeCommon
DCRConfiguration
GCPAuthModel
GenericBlobSbsAuthModel
GenericBlobSbsAuthModelCredentialsConfig
GenericBlobSbsAuthModelStorageAccountCredentialsConfig
GitHubAuthModel
JwtAuthModel
value
Key
Value
JwtAuthModelHeaders
JwtAuthModelPassword
JwtAuthModelQueryParameters
JwtAuthModelUserName
McasDataConnector
McasDataConnectorDataTypes
McasDataConnectorProperties
MdatpDataConnector
MdatpDataConnectorProperties
Microsoft.SecurityInsights/dataConnectors
MstiDataConnector
MstiDataConnectorDataTypes
MstiDataConnectorDataTypesMicrosoftEmergingThreatFeed
MstiDataConnectorProperties
NoneAuthModel
OAuthModel
OAuthModelAuthorizationEndpointHeaders
OAuthModelAuthorizationEndpointQueryParameters
OAuthModelTokenEndpointHeaders
OAuthModelTokenEndpointQueryParameters
OfficeDataConnector
OfficeDataConnectorDataTypes
OfficeDataConnectorDataTypesExchange
OfficeDataConnectorDataTypesSharePoint
OfficeDataConnectorDataTypesTeams
OfficeDataConnectorProperties
OracleAuthModel
PremiumMdtiDataConnectorDataTypes
PremiumMdtiDataConnectorDataTypesConnector
PremiumMdtiDataConnectorProperties
PremiumMicrosoftDefenderForThreatIntelligence
RestApiPollerDataConnector
RestApiPollerDataConnectorProperties
RestApiPollerDataConnectorPropertiesAddOnAttributes
RestApiPollerRequestConfig
startTimeAttributeName
queryTimeIntervalPrepend
queryTimeIntervalDelimiter
queryTimeIntervalAttributeName
queryTimeIntervalAttributeName
endTimeAttributeName
RestApiPollerRequestConfigHeaders
RestApiPollerRequestConfigQueryParameters
RestApiPollerRequestPagingConfig
SessionAuthModel
SessionAuthModelHeaders
SessionAuthModelPassword
SessionAuthModelQueryParameters
SessionAuthModelUserName
TIDataConnector
TIDataConnectorDataTypes
TIDataConnectorDataTypesIndicators
TIDataConnectorProperties
Usage Examples
Terraform (AzAPI provider) resource definition
The dataConnectors resource type can be deployed with operations that target:
For a list of changed properties in each API version, seechange log.
Resource format
To create a Microsoft.SecurityInsights/dataConnectors resource, add the following Terraform to your template.
resource "azapi_resource" "symbolicname" {
  etag = "string"
  name = "string"
  kind = "string"
  // For remaining properties, see Microsoft.SecurityInsights/dataConnectors objects
}
resource "azapi_resource" "symbolicname" {
  etag = "string"
  name = "string"
  kind = "string"
  // For remaining properties, see Microsoft.SecurityInsights/dataConnectors objects
}
Microsoft.SecurityInsights/dataConnectors objects
Set thekindproperty to specify the type of object.
ForAmazonWebServicesCloudTrail, use:
{
  kind = "AmazonWebServicesCloudTrail"
  properties = {
    awsRoleArn = "string"
    dataTypes = {
      logs = {
        state = "string"
      }
    }
  }
}
{
  kind = "AmazonWebServicesCloudTrail"
  properties = {
    awsRoleArn = "string"
    dataTypes = {
      logs = {
        state = "string"
      }
    }
  }
}
ForAzureActiveDirectory, use:
{
  kind = "AzureActiveDirectory"
  properties = {
    dataTypes = {
      alerts = {
        state = "string"
      }
    }
    tenantId = "string"
  }
}
{
  kind = "AzureActiveDirectory"
  properties = {
    dataTypes = {
      alerts = {
        state = "string"
      }
    }
    tenantId = "string"
  }
}
ForAzureAdvancedThreatProtection, use:
{
  kind = "AzureAdvancedThreatProtection"
  properties = {
    dataTypes = {
      alerts = {
        state = "string"
      }
    }
    tenantId = "string"
  }
}
{
  kind = "AzureAdvancedThreatProtection"
  properties = {
    dataTypes = {
      alerts = {
        state = "string"
      }
    }
    tenantId = "string"
  }
}
ForAzureSecurityCenter, use:
{
  kind = "AzureSecurityCenter"
  properties = {
    dataTypes = {
      alerts = {
        state = "string"
      }
    }
    subscriptionId = "string"
  }
}
{
  kind = "AzureSecurityCenter"
  properties = {
    dataTypes = {
      alerts = {
        state = "string"
      }
    }
    subscriptionId = "string"
  }
}
ForMicrosoftCloudAppSecurity, use:
{
  kind = "MicrosoftCloudAppSecurity"
  properties = {
    dataTypes = {
      alerts = {
        state = "string"
      }
      discoveryLogs = {
        state = "string"
      }
    }
    tenantId = "string"
  }
}
{
  kind = "MicrosoftCloudAppSecurity"
  properties = {
    dataTypes = {
      alerts = {
        state = "string"
      }
      discoveryLogs = {
        state = "string"
      }
    }
    tenantId = "string"
  }
}
ForMicrosoftDefenderAdvancedThreatProtection, use:
{
  kind = "MicrosoftDefenderAdvancedThreatProtection"
  properties = {
    dataTypes = {
      alerts = {
        state = "string"
      }
    }
    tenantId = "string"
  }
}
{
  kind = "MicrosoftDefenderAdvancedThreatProtection"
  properties = {
    dataTypes = {
      alerts = {
        state = "string"
      }
    }
    tenantId = "string"
  }
}
ForMicrosoftThreatIntelligence, use:
{
  kind = "MicrosoftThreatIntelligence"
  properties = {
    dataTypes = {
      microsoftEmergingThreatFeed = {
        lookbackPeriod = "string"
        state = "string"
      }
    }
    tenantId = "string"
  }
}
{
  kind = "MicrosoftThreatIntelligence"
  properties = {
    dataTypes = {
      microsoftEmergingThreatFeed = {
        lookbackPeriod = "string"
        state = "string"
      }
    }
    tenantId = "string"
  }
}
ForOffice365, use:
{
  kind = "Office365"
  properties = {
    dataTypes = {
      exchange = {
        state = "string"
      }
      sharePoint = {
        state = "string"
      }
      teams = {
        state = "string"
      }
    }
    tenantId = "string"
  }
}
{
  kind = "Office365"
  properties = {
    dataTypes = {
      exchange = {
        state = "string"
      }
      sharePoint = {
        state = "string"
      }
      teams = {
        state = "string"
      }
    }
    tenantId = "string"
  }
}
ForPremiumMicrosoftDefenderForThreatIntelligence, use:
{
  kind = "PremiumMicrosoftDefenderForThreatIntelligence"
  properties = {
    dataTypes = {
      connector = {
        state = "string"
      }
    }
    lookbackPeriod = "string"
    requiredSKUsPresent = bool
    tenantId = "string"
  }
}
{
  kind = "PremiumMicrosoftDefenderForThreatIntelligence"
  properties = {
    dataTypes = {
      connector = {
        state = "string"
      }
    }
    lookbackPeriod = "string"
    requiredSKUsPresent = bool
    tenantId = "string"
  }
}
ForRestApiPoller, use:
{
  kind = "RestApiPoller"
  properties = {
    addOnAttributes = {
      {customized property} = "string"
    }
    auth = {
      type = "string"
      // For remaining properties, see CcpAuthConfig objects
    }
    connectorDefinitionName = "string"
    dataType = "string"
    dcrConfig = {
      dataCollectionEndpoint = "string"
      dataCollectionRuleImmutableId = "string"
      streamName = "string"
    }
    isActive = bool
    paging = {
      pageSize = int
      pageSizeParameterName = "string"
      pagingType = "string"
    }
    request = {
      apiEndpoint = "string"
      endTimeAttributeName = "string"
      headers = {
        {customized property} = "string"
      }
      httpMethod = "string"
      isPostPayloadJson = bool
      queryParameters = {
        {customized property} = ?
      }
      queryParametersTemplate = "string"
      queryTimeFormat = "string"
      queryTimeIntervalAttributeName = "string"
      queryTimeIntervalDelimiter = "string"
      queryTimeIntervalPrepend = "string"
      queryWindowInMin = int
      rateLimitQPS = int
      retryCount = int
      startTimeAttributeName = "string"
      timeoutInSeconds = int
    }
    response = {
      compressionAlgo = "string"
      convertChildPropertiesToArray = bool
      csvDelimiter = "string"
      csvEscape = "string"
      eventsJsonPaths = [
        "string"
      ]
      format = "string"
      hasCsvBoundary = bool
      hasCsvHeader = bool
      isGzipCompressed = bool
      successStatusJsonPath = "string"
      successStatusValue = "string"
    }
  }
}
{
  kind = "RestApiPoller"
  properties = {
    addOnAttributes = {
      {customized property} = "string"
    }
    auth = {
      type = "string"
      // For remaining properties, see CcpAuthConfig objects
    }
    connectorDefinitionName = "string"
    dataType = "string"
    dcrConfig = {
      dataCollectionEndpoint = "string"
      dataCollectionRuleImmutableId = "string"
      streamName = "string"
    }
    isActive = bool
    paging = {
      pageSize = int
      pageSizeParameterName = "string"
      pagingType = "string"
    }
    request = {
      apiEndpoint = "string"
      endTimeAttributeName = "string"
      headers = {
        {customized property} = "string"
      }
      httpMethod = "string"
      isPostPayloadJson = bool
      queryParameters = {
        {customized property} = ?
      }
      queryParametersTemplate = "string"
      queryTimeFormat = "string"
      queryTimeIntervalAttributeName = "string"
      queryTimeIntervalDelimiter = "string"
      queryTimeIntervalPrepend = "string"
      queryWindowInMin = int
      rateLimitQPS = int
      retryCount = int
      startTimeAttributeName = "string"
      timeoutInSeconds = int
    }
    response = {
      compressionAlgo = "string"
      convertChildPropertiesToArray = bool
      csvDelimiter = "string"
      csvEscape = "string"
      eventsJsonPaths = [
        "string"
      ]
      format = "string"
      hasCsvBoundary = bool
      hasCsvHeader = bool
      isGzipCompressed = bool
      successStatusJsonPath = "string"
      successStatusValue = "string"
    }
  }
}
ForThreatIntelligence, use:
{
  kind = "ThreatIntelligence"
  properties = {
    dataTypes = {
      indicators = {
        state = "string"
      }
    }
    tenantId = "string"
    tipLookbackPeriod = "string"
  }
}
{
  kind = "ThreatIntelligence"
  properties = {
    dataTypes = {
      indicators = {
        state = "string"
      }
    }
    tenantId = "string"
    tipLookbackPeriod = "string"
  }
}
CcpAuthConfig objects
Set thetypeproperty to specify the type of object.
ForAPIKey, use:
{
  apiKey = "string"
  apiKeyIdentifier = "string"
  apiKeyName = "string"
  isApiKeyInPostPayload = bool
  type = "APIKey"
}
{
  apiKey = "string"
  apiKeyIdentifier = "string"
  apiKeyName = "string"
  isApiKeyInPostPayload = bool
  type = "APIKey"
}
ForAWS, use:
{
  externalId = "string"
  roleArn = "string"
  type = "AWS"
}
{
  externalId = "string"
  roleArn = "string"
  type = "AWS"
}
ForBasic, use:
{
  password = "string"
  type = "Basic"
  userName = "string"
}
{
  password = "string"
  type = "Basic"
  userName = "string"
}
ForGCP, use:
{
  projectNumber = "string"
  serviceAccountEmail = "string"
  type = "GCP"
  workloadIdentityProviderId = "string"
}
{
  projectNumber = "string"
  serviceAccountEmail = "string"
  type = "GCP"
  workloadIdentityProviderId = "string"
}
ForGitHub, use:
{
  installationId = "string"
  type = "GitHub"
}
{
  installationId = "string"
  type = "GitHub"
}
ForJwtToken, use:
{
  headers = {
    {customized property} = "string"
  }
  isCredentialsInHeaders = bool
  isJsonRequest = bool
  password = {
    {customized property} = "string"
  }
  queryParameters = {
    {customized property} = "string"
  }
  requestTimeoutInSeconds = int
  tokenEndpoint = "string"
  type = "JwtToken"
  userName = {
    {customized property} = "string"
  }
}
{
  headers = {
    {customized property} = "string"
  }
  isCredentialsInHeaders = bool
  isJsonRequest = bool
  password = {
    {customized property} = "string"
  }
  queryParameters = {
    {customized property} = "string"
  }
  requestTimeoutInSeconds = int
  tokenEndpoint = "string"
  type = "JwtToken"
  userName = {
    {customized property} = "string"
  }
}
ForNone, use:
{
  type = "None"
}
{
  type = "None"
}
ForOAuth2, use:
{
  accessTokenPrepend = "string"
  authorizationCode = "string"
  authorizationEndpoint = "string"
  authorizationEndpointHeaders = {
    {customized property} = "string"
  }
  authorizationEndpointQueryParameters = {
    {customized property} = "string"
  }
  clientId = "string"
  clientSecret = "string"
  grantType = "string"
  isCredentialsInHeaders = bool
  isJwtBearerFlow = bool
  redirectUri = "string"
  scope = "string"
  tokenEndpoint = "string"
  tokenEndpointHeaders = {
    {customized property} = "string"
  }
  tokenEndpointQueryParameters = {
    {customized property} = "string"
  }
  type = "OAuth2"
}
{
  accessTokenPrepend = "string"
  authorizationCode = "string"
  authorizationEndpoint = "string"
  authorizationEndpointHeaders = {
    {customized property} = "string"
  }
  authorizationEndpointQueryParameters = {
    {customized property} = "string"
  }
  clientId = "string"
  clientSecret = "string"
  grantType = "string"
  isCredentialsInHeaders = bool
  isJwtBearerFlow = bool
  redirectUri = "string"
  scope = "string"
  tokenEndpoint = "string"
  tokenEndpointHeaders = {
    {customized property} = "string"
  }
  tokenEndpointQueryParameters = {
    {customized property} = "string"
  }
  type = "OAuth2"
}
ForOracle, use:
{
  pemFile = "string"
  publicFingerprint = "string"
  tenantId = "string"
  type = "Oracle"
  userId = "string"
}
{
  pemFile = "string"
  publicFingerprint = "string"
  tenantId = "string"
  type = "Oracle"
  userId = "string"
}
ForServiceBus, use:
{
  credentialsConfig = {
    {customized property} = "string"
  }
  storageAccountCredentialsConfig = {
    {customized property} = "string"
  }
  type = "ServiceBus"
}
{
  credentialsConfig = {
    {customized property} = "string"
  }
  storageAccountCredentialsConfig = {
    {customized property} = "string"
  }
  type = "ServiceBus"
}
ForSession, use:
{
  headers = {
    {customized property} = "string"
  }
  isPostPayloadJson = bool
  password = {
    {customized property} = "string"
  }
  queryParameters = {
    {customized property} = ?
  }
  sessionIdName = "string"
  sessionLoginRequestUri = "string"
  sessionTimeoutInMinutes = int
  type = "Session"
  userName = {
    {customized property} = "string"
  }
}
{
  headers = {
    {customized property} = "string"
  }
  isPostPayloadJson = bool
  password = {
    {customized property} = "string"
  }
  queryParameters = {
    {customized property} = ?
  }
  sessionIdName = "string"
  sessionLoginRequestUri = "string"
  sessionTimeoutInMinutes = int
  type = "Session"
  userName = {
    {customized property} = "string"
  }
}
Property Values
AADDataConnector
AADDataConnectorProperties
AatpDataConnector
AatpDataConnectorProperties
AlertsDataTypeOfDataConnector
ApiKeyAuthModel
ASCDataConnector
ASCDataConnectorProperties
AWSAuthModel
AwsCloudTrailDataConnector
AwsCloudTrailDataConnectorDataTypes
AwsCloudTrailDataConnectorDataTypesLogs
AwsCloudTrailDataConnectorProperties
BasicAuthModel
CcpAuthConfig
CcpResponseConfig
DataConnectorDataTypeCommon
DCRConfiguration
GCPAuthModel
GenericBlobSbsAuthModel
GenericBlobSbsAuthModelCredentialsConfig
GenericBlobSbsAuthModelStorageAccountCredentialsConfig
GitHubAuthModel
JwtAuthModel
value
Key
Value
JwtAuthModelHeaders
JwtAuthModelPassword
JwtAuthModelQueryParameters
JwtAuthModelUserName
McasDataConnector
McasDataConnectorDataTypes
McasDataConnectorProperties
MdatpDataConnector
MdatpDataConnectorProperties
Microsoft.SecurityInsights/dataConnectors
MstiDataConnector
MstiDataConnectorDataTypes
MstiDataConnectorDataTypesMicrosoftEmergingThreatFeed
MstiDataConnectorProperties
NoneAuthModel
OAuthModel
OAuthModelAuthorizationEndpointHeaders
OAuthModelAuthorizationEndpointQueryParameters
OAuthModelTokenEndpointHeaders
OAuthModelTokenEndpointQueryParameters
OfficeDataConnector
OfficeDataConnectorDataTypes
OfficeDataConnectorDataTypesExchange
OfficeDataConnectorDataTypesSharePoint
OfficeDataConnectorDataTypesTeams
OfficeDataConnectorProperties
OracleAuthModel
PremiumMdtiDataConnectorDataTypes
PremiumMdtiDataConnectorDataTypesConnector
PremiumMdtiDataConnectorProperties
PremiumMicrosoftDefenderForThreatIntelligence
RestApiPollerDataConnector
RestApiPollerDataConnectorProperties
RestApiPollerDataConnectorPropertiesAddOnAttributes
RestApiPollerRequestConfig
startTimeAttributeName
queryTimeIntervalPrepend
queryTimeIntervalDelimiter
queryTimeIntervalAttributeName
queryTimeIntervalAttributeName
endTimeAttributeName
RestApiPollerRequestConfigHeaders
RestApiPollerRequestConfigQueryParameters
RestApiPollerRequestPagingConfig
SessionAuthModel
SessionAuthModelHeaders
SessionAuthModelPassword
SessionAuthModelQueryParameters
SessionAuthModelUserName
TIDataConnector
TIDataConnectorDataTypes
TIDataConnectorDataTypesIndicators
TIDataConnectorProperties
Feedback
Was this page helpful?
Additional resources