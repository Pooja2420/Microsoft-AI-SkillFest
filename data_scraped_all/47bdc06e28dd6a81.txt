Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Quickstart: Azure AI Translator REST APIs
Article
2025-04-14
2 contributors
In this article
Try the latest version of Azure AI Translator. In this quickstart, get started using the Translator service totranslate textusing a programming language of your choice or the REST API. For this project, we recommend using the free pricing tier (F0), while you're learning the technology, and later upgrading to a paid tier for production.
Prerequisites
You need an active Azure subscription. If you don't have an Azure subscription, you cancreate one for free.
Once you have your Azure subscription, create aTranslator resourcein the Azure portal.
Once you have your Azure subscription, create aTranslator resourcein the Azure portal.
After your resource deploys, selectGo to resourceand retrieve your key and endpoint.You need the key and endpoint from the resource to connect your application to the Translator service. You paste your key and endpoint into the code later in the quickstart. You can find these values on the Azure portalKeys and Endpointpage:NoteFor this quickstart, we recommended that you use a Translator text single-service global resource.With a single-service global resource, you' include one authorization header (Ocp-Apim-Subscription-key) with the REST API request. The value for Ocp-Apim-Subscription-key is your Azure secret key for your Translator Text subscription.If you choose to use an Azure AI multi-service or regional Translator resource, two authentication headers are required: (Ocp-Api-Subscription-KeyandOcp-Apim-Subscription-Region). The value for Ocp-Apim-Subscription-Region is the region associated with your subscription.For more information on how to use theOcp-Apim-Subscription-Regionheader,seeText translation REST API headers.
After your resource deploys, selectGo to resourceand retrieve your key and endpoint.
You need the key and endpoint from the resource to connect your application to the Translator service. You paste your key and endpoint into the code later in the quickstart. You can find these values on the Azure portalKeys and Endpointpage:NoteFor this quickstart, we recommended that you use a Translator text single-service global resource.With a single-service global resource, you' include one authorization header (Ocp-Apim-Subscription-key) with the REST API request. The value for Ocp-Apim-Subscription-key is your Azure secret key for your Translator Text subscription.If you choose to use an Azure AI multi-service or regional Translator resource, two authentication headers are required: (Ocp-Api-Subscription-KeyandOcp-Apim-Subscription-Region). The value for Ocp-Apim-Subscription-Region is the region associated with your subscription.For more information on how to use theOcp-Apim-Subscription-Regionheader,seeText translation REST API headers.
You need the key and endpoint from the resource to connect your application to the Translator service. You paste your key and endpoint into the code later in the quickstart. You can find these values on the Azure portalKeys and Endpointpage:

Note
For this quickstart, we recommended that you use a Translator text single-service global resource.
With a single-service global resource, you' include one authorization header (Ocp-Apim-Subscription-key) with the REST API request. The value for Ocp-Apim-Subscription-key is your Azure secret key for your Translator Text subscription.
If you choose to use an Azure AI multi-service or regional Translator resource, two authentication headers are required: (Ocp-Api-Subscription-KeyandOcp-Apim-Subscription-Region). The value for Ocp-Apim-Subscription-Region is the region associated with your subscription.
For more information on how to use theOcp-Apim-Subscription-Regionheader,seeText translation REST API headers.
Headers
To call the Translator service via theREST API, you need to include the following headers with each request. Don't worry, we include the headers for you in the sample code for each programming language.
For more information on Translator authentication options,seetheTranslator v3 referenceguide.
Important
Remember to remove the key from your code when you're done, and never post it publicly. For production, use a secure way of storing and accessing your credentials likeAzure Key Vault. For more information,seethe Azure AI servicessecurityarticle.
Translate text
The core operation of the Translator service is translating text. In this quickstart, you build a request using a programming language of your choice that takes a single source (from) and provides two outputs (to). Then we review some parameters that can be used to adjust both the request and the response.
from
to
For detailed information regarding Azure AI Translator service request limits,seeText translation request limits.
C#: Visual Studio
Go
Java: Gradle
JavaScript: Node.js
Python
Set up your Visual Studio project
Make sure you have the current version ofVisual Studio IDE.TipIf you're new to Visual Studio, try theIntroduction to Visual StudioLearn module.
Make sure you have the current version ofVisual Studio IDE.
Tip
If you're new to Visual Studio, try theIntroduction to Visual StudioLearn module.
Open Visual Studio.
Open Visual Studio.
On the Start page, chooseCreate a new project.
On the Start page, chooseCreate a new project.

On theCreate a new project page, enterconsolein the search box. Choose theConsole Applicationtemplate, then chooseNext.
On theCreate a new project page, enterconsolein the search box. Choose theConsole Applicationtemplate, then chooseNext.

In theConfigure your new projectdialog window, entertranslator_quickstartin the Project name box. Leave the "Place solution and project in the same directory" checkboxuncheckedand selectNext.
In theConfigure your new projectdialog window, entertranslator_quickstartin the Project name box. Leave the "Place solution and project in the same directory" checkboxuncheckedand selectNext.
translator_quickstart

In theAdditional informationdialog window, make sure.NET 6.0 (Long-term support)is selected. Leave the "Don't use top-level statements" checkboxuncheckedand selectCreate.
In theAdditional informationdialog window, make sure.NET 6.0 (Long-term support)is selected. Leave the "Don't use top-level statements" checkboxuncheckedand selectCreate.

Install the Newtonsoft.json package with NuGet
Right-click on your translator_quickstart project and selectManage NuGet Packages....
Right-click on your translator_quickstart project and selectManage NuGet Packages....

Select the Browse tab and type Newtonsoft.json.
Select the Browse tab and type Newtonsoft.json.

To add the package to your project, select install from the right package manager window.
To add the package to your project, select install from the right package manager window.

Build your C# application
Note
Starting with .NET 6, new projects using theconsoletemplate generate a new program style that differs from previous versions.
console
The new output uses recent C# features that simplify the code you need to write.
When you use the newer version, you only need to write the body of theMainmethod. You don't need to include top-level statements, global using directives, or implicit using directives.
Main
For more information,seeNew C# templates generate top-level statements.
Open theProgram.csfile.
Open theProgram.csfile.
Delete the existing code, including the lineConsole.WriteLine("Hello World!"). Copy and paste the code sample into your application's Program.cs file. Make sure you update the key variable with the value from your Azure portal Translator instance:
Delete the existing code, including the lineConsole.WriteLine("Hello World!"). Copy and paste the code sample into your application's Program.cs file. Make sure you update the key variable with the value from your Azure portal Translator instance:
Console.WriteLine("Hello World!")
using System.Text;
using Newtonsoft.Json;

class Program
{
    private static readonly string key = "<your-translator-key>";
    private static readonly string endpoint = "https://api.cognitive.microsofttranslator.com";

    // location, also known as region.
    // required if you're using a multi-service or regional (not global) resource. It can be found in the Azure portal on the Keys and Endpoint page.
    private static readonly string location = "<YOUR-RESOURCE-LOCATION>";

    static async Task Main(string[] args)
    {
        // Input and output languages are defined as parameters.
        string route = "/translate?api-version=3.0&from=en&to=fr&to=zu";
        string textToTranslate = "I would really like to drive your car around the block a few times!";
        object[] body = new object[] { new { Text = textToTranslate } };
        var requestBody = JsonConvert.SerializeObject(body);

        using (var client = new HttpClient())
        using (var request = new HttpRequestMessage())
        {
            // Build the request.
            request.Method = HttpMethod.Post;
            request.RequestUri = new Uri(endpoint + route);
            request.Content = new StringContent(requestBody, Encoding.UTF8, "application/json");
            request.Headers.Add("Ocp-Apim-Subscription-Key", key);
            // location required if you're using a multi-service or regional (not global) resource.
            request.Headers.Add("Ocp-Apim-Subscription-Region", location);

            // Send the request and get response.
            HttpResponseMessage response = await client.SendAsync(request).ConfigureAwait(false);
            // Read response as a string.
            string result = await response.Content.ReadAsStringAsync();
            Console.WriteLine(result);
        }
    }
}
using System.Text;
using Newtonsoft.Json;

class Program
{
    private static readonly string key = "<your-translator-key>";
    private static readonly string endpoint = "https://api.cognitive.microsofttranslator.com";

    // location, also known as region.
    // required if you're using a multi-service or regional (not global) resource. It can be found in the Azure portal on the Keys and Endpoint page.
    private static readonly string location = "<YOUR-RESOURCE-LOCATION>";

    static async Task Main(string[] args)
    {
        // Input and output languages are defined as parameters.
        string route = "/translate?api-version=3.0&from=en&to=fr&to=zu";
        string textToTranslate = "I would really like to drive your car around the block a few times!";
        object[] body = new object[] { new { Text = textToTranslate } };
        var requestBody = JsonConvert.SerializeObject(body);

        using (var client = new HttpClient())
        using (var request = new HttpRequestMessage())
        {
            // Build the request.
            request.Method = HttpMethod.Post;
            request.RequestUri = new Uri(endpoint + route);
            request.Content = new StringContent(requestBody, Encoding.UTF8, "application/json");
            request.Headers.Add("Ocp-Apim-Subscription-Key", key);
            // location required if you're using a multi-service or regional (not global) resource.
            request.Headers.Add("Ocp-Apim-Subscription-Region", location);

            // Send the request and get response.
            HttpResponseMessage response = await client.SendAsync(request).ConfigureAwait(false);
            // Read response as a string.
            string result = await response.Content.ReadAsStringAsync();
            Console.WriteLine(result);
        }
    }
}
Run your C# application
Once you add a code sample to your application, choose the greenstart buttonnext to formRecognizer_quickstart to build and run your program, or pressF5.

Translation output:
After a successful call, you should see the following response:
[
    {
        "detectedLanguage": {
            "language": "en",
            "score": 1.0
        },
        "translations": [
            {
                "text": "J'aimerais vraiment conduire votre voiture autour du pÃ¢tÃ© de maisons plusieurs fois!",
                "to": "fr"
            },
            {
                "text": "Ngingathanda ngempela ukushayela imoto yakho endaweni evimbelayo izikhathi ezimbalwa!",
                "to": "zu"
            }
        ]
    }
]
[
    {
        "detectedLanguage": {
            "language": "en",
            "score": 1.0
        },
        "translations": [
            {
                "text": "J'aimerais vraiment conduire votre voiture autour du pÃ¢tÃ© de maisons plusieurs fois!",
                "to": "fr"
            },
            {
                "text": "Ngingathanda ngempela ukushayela imoto yakho endaweni evimbelayo izikhathi ezimbalwa!",
                "to": "zu"
            }
        ]
    }
]
Set up your Go environment
You can use any text editor to write Go applications. We recommend using the latest version ofVisual Studio Code and Go extension.
Tip
If you're new to Go, try theGet started with GoLearn module.
Make sure the latest version ofGois installed:Download theGoprogramming language version for your operating system.Once the download is complete, run the installer.Open a command prompt and enter the following to confirm Go was installed:go version
Make sure the latest version ofGois installed:
Download theGoprogramming language version for your operating system.
Download theGoprogramming language version for your operating system.
Go
Once the download is complete, run the installer.
Once the download is complete, run the installer.
Open a command prompt and enter the following to confirm Go was installed:go version
Open a command prompt and enter the following to confirm Go was installed:
go version
go version
Build your Go application
In a console window (such as cmd, PowerShell, or Bash), create a new directory for your app calledtranslator-app, and navigate to it.
In a console window (such as cmd, PowerShell, or Bash), create a new directory for your app calledtranslator-app, and navigate to it.
Create a new GO file namedtranslation.gofrom thetranslator-appdirectory.
Create a new GO file namedtranslation.gofrom thetranslator-appdirectory.
Copy and paste the provided code sample into yourtranslation.gofile. Make sure you update the key variable with the value from your Azure portal Translator instance:
Copy and paste the provided code sample into yourtranslation.gofile. Make sure you update the key variable with the value from your Azure portal Translator instance:
package main

import (
    "bytes"
    "encoding/json"
    "fmt"
    "log"
    "net/http"
    "net/url"
)

func main() {
    key := "<YOUR-TRANSLATOR-KEY>"
    endpoint := "https://api.cognitive.microsofttranslator.com/"
    uri := endpoint + "/translate?api-version=3.0"

    // location, also known as region.
    // required if you're using a multi-service or regional (not global) resource. It can be found in the Azure portal on the Keys and Endpoint page.
    location := "<YOUR-RESOURCE-LOCATION>"

    // Build the request URL. See: https://go.dev/pkg/net/url/#example_URL_Parse
    u, _ := url.Parse(uri)
    q := u.Query()
    q.Add("from", "en")
    q.Add("to", "fr")
    q.Add("to", "zu")
    u.RawQuery = q.Encode()

    // Create an anonymous struct for your request body and encode it to JSON
    body := []struct {
        Text string
    }{
        {Text: "I would really like to drive your car around the block a few times."},
    }
    b, _ := json.Marshal(body)

    // Build the HTTP POST request
    req, err := http.NewRequest("POST", u.String(), bytes.NewBuffer(b))
    if err != nil {
        log.Fatal(err)
    }
    // Add required headers to the request
    req.Header.Add("Ocp-Apim-Subscription-Key", key)
    // location required if you're using a multi-service or regional (not global) resource.
    req.Header.Add("Ocp-Apim-Subscription-Region", location)
    req.Header.Add("Content-Type", "application/json")

    // Call the Translator API
    res, err := http.DefaultClient.Do(req)
    if err != nil {
        log.Fatal(err)
    }

    // Decode the JSON response
    var result interface{}
    if err := json.NewDecoder(res.Body).Decode(&result); err != nil {
        log.Fatal(err)
    }
    // Format and print the response to terminal
    prettyJSON, _ := json.MarshalIndent(result, "", "  ")
    fmt.Printf("%s\n", prettyJSON)
}
package main

import (
    "bytes"
    "encoding/json"
    "fmt"
    "log"
    "net/http"
    "net/url"
)

func main() {
    key := "<YOUR-TRANSLATOR-KEY>"
    endpoint := "https://api.cognitive.microsofttranslator.com/"
    uri := endpoint + "/translate?api-version=3.0"

    // location, also known as region.
    // required if you're using a multi-service or regional (not global) resource. It can be found in the Azure portal on the Keys and Endpoint page.
    location := "<YOUR-RESOURCE-LOCATION>"

    // Build the request URL. See: https://go.dev/pkg/net/url/#example_URL_Parse
    u, _ := url.Parse(uri)
    q := u.Query()
    q.Add("from", "en")
    q.Add("to", "fr")
    q.Add("to", "zu")
    u.RawQuery = q.Encode()

    // Create an anonymous struct for your request body and encode it to JSON
    body := []struct {
        Text string
    }{
        {Text: "I would really like to drive your car around the block a few times."},
    }
    b, _ := json.Marshal(body)

    // Build the HTTP POST request
    req, err := http.NewRequest("POST", u.String(), bytes.NewBuffer(b))
    if err != nil {
        log.Fatal(err)
    }
    // Add required headers to the request
    req.Header.Add("Ocp-Apim-Subscription-Key", key)
    // location required if you're using a multi-service or regional (not global) resource.
    req.Header.Add("Ocp-Apim-Subscription-Region", location)
    req.Header.Add("Content-Type", "application/json")

    // Call the Translator API
    res, err := http.DefaultClient.Do(req)
    if err != nil {
        log.Fatal(err)
    }

    // Decode the JSON response
    var result interface{}
    if err := json.NewDecoder(res.Body).Decode(&result); err != nil {
        log.Fatal(err)
    }
    // Format and print the response to terminal
    prettyJSON, _ := json.MarshalIndent(result, "", "  ")
    fmt.Printf("%s\n", prettyJSON)
}
Run your Go application
Once you add a code sample to your application, your Go program can be executed in a command or terminal prompt. Make sure your prompt's path is set to thetranslator-appfolder and use the following command:
go run translation.go
go run translation.go
Translation output:
After a successful call, you should see the following response:
[
    {
        "detectedLanguage": {
            "language": "en",
            "score": 1.0
        },
        "translations": [
            {
                "text": "J'aimerais vraiment conduire votre voiture autour du pÃ¢tÃ© de maisons plusieurs fois!",
                "to": "fr"
            },
            {
                "text": "Ngingathanda ngempela ukushayela imoto yakho endaweni evimbelayo izikhathi ezimbalwa!",
                "to": "zu"
            }
        ]
    }
]
[
    {
        "detectedLanguage": {
            "language": "en",
            "score": 1.0
        },
        "translations": [
            {
                "text": "J'aimerais vraiment conduire votre voiture autour du pÃ¢tÃ© de maisons plusieurs fois!",
                "to": "fr"
            },
            {
                "text": "Ngingathanda ngempela ukushayela imoto yakho endaweni evimbelayo izikhathi ezimbalwa!",
                "to": "zu"
            }
        ]
    }
]
Set up your Java environment
You should have the latest version ofVisual Studio Codeor your preferred IDE.SeeJava in Visual Studio Code.TipVisual Studio Code offers aCoding Pack for Javafor Windows and macOS.The coding pack is a bundle of VS Code, the Java Development Kit (JDK), and a collection of suggested extensions by Microsoft. The Coding Pack can also be used to fix an existing development environment.If you're using VS Code and the Coding Pack For Java, install theGradle for Javaextension.
You should have the latest version ofVisual Studio Codeor your preferred IDE.SeeJava in Visual Studio Code.
Tip
Visual Studio Code offers aCoding Pack for Javafor Windows and macOS.The coding pack is a bundle of VS Code, the Java Development Kit (JDK), and a collection of suggested extensions by Microsoft. The Coding Pack can also be used to fix an existing development environment.
If you're using VS Code and the Coding Pack For Java, install theGradle for Javaextension.
If you aren't using Visual Studio Code, make sure you have the following installed in your development environment:AJava Development Kit(OpenJDK)version 8 or later.Gradle, version 6.8 or later.
If you aren't using Visual Studio Code, make sure you have the following installed in your development environment:
AJava Development Kit(OpenJDK)version 8 or later.
AJava Development Kit(OpenJDK)version 8 or later.
Gradle, version 6.8 or later.
Gradle, version 6.8 or later.
Create a new Gradle project
In console window (such as cmd, PowerShell, or Bash), create a new directory for your app calledtranslator-text-app, and navigate to it.mkdir translator-text-app && translator-text-appmkdir translator-text-app; cd translator-text-app
In console window (such as cmd, PowerShell, or Bash), create a new directory for your app calledtranslator-text-app, and navigate to it.
mkdir translator-text-app && translator-text-app
mkdir translator-text-app && translator-text-app
mkdir translator-text-app; cd translator-text-app
mkdir translator-text-app; cd translator-text-app
Run thegradle initcommand from the translator-text-app directory. This command creates essential build files for Gradle, includingbuild.gradle.kts, which is used at runtime to create and configure your application.gradle init --type basic
Run thegradle initcommand from the translator-text-app directory. This command creates essential build files for Gradle, includingbuild.gradle.kts, which is used at runtime to create and configure your application.
gradle init
gradle init --type basic
gradle init --type basic
When prompted to choose aDSL, selectKotlin.
When prompted to choose aDSL, selectKotlin.
Accept the default project name (translator-text-app) by selectingReturnorEnter.
Accept the default project name (translator-text-app) by selectingReturnorEnter.
Updatebuild.gradle.ktswith the following code:
Updatebuild.gradle.ktswith the following code:
build.gradle.kts
plugins {
  java
  application
}
application {
  mainClass.set("TranslatorText")
}
repositories {
  mavenCentral()
}
dependencies {
  implementation("com.squareup.okhttp3:okhttp:4.10.0")
  implementation("com.google.code.gson:gson:2.9.0")
}
plugins {
  java
  application
}
application {
  mainClass.set("TranslatorText")
}
repositories {
  mavenCentral()
}
dependencies {
  implementation("com.squareup.okhttp3:okhttp:4.10.0")
  implementation("com.google.code.gson:gson:2.9.0")
}
Create your Java Application
From the translator-text-app directory, run the following command:mkdir -p src/main/javaYou create the following directory structure:
From the translator-text-app directory, run the following command:
mkdir -p src/main/java
mkdir -p src/main/java
You create the following directory structure:

Navigate to thejavadirectory and create a file namedTranslatorText.java.TipYou can create a new file using PowerShell.Open a PowerShell window in your project directory by holding down the Shift key and right-clicking the folder.Type the following commandNew-Item TranslatorText.java.You can also create a new file in your IDE namedTranslatorText.javaand save it to thejavadirectory.
Navigate to thejavadirectory and create a file namedTranslatorText.java.
java
TranslatorText.java
Tip
You can create a new file using PowerShell.
You can create a new file using PowerShell.
Open a PowerShell window in your project directory by holding down the Shift key and right-clicking the folder.
Open a PowerShell window in your project directory by holding down the Shift key and right-clicking the folder.
Type the following commandNew-Item TranslatorText.java.
Type the following commandNew-Item TranslatorText.java.
You can also create a new file in your IDE namedTranslatorText.javaand save it to thejavadirectory.
You can also create a new file in your IDE namedTranslatorText.javaand save it to thejavadirectory.
TranslatorText.java
java
Open theTranslatorText.javafile in your IDE and copy then paste the following code sample into your application.Make sure you update the key with one of the key values from your Azure portal Translator instance:
Open theTranslatorText.javafile in your IDE and copy then paste the following code sample into your application.Make sure you update the key with one of the key values from your Azure portal Translator instance:
TranslatorText.java
import java.io.IOException;

import com.google.gson.*;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

public class TranslatorText {
    private static String key = "<your-translator-key";

    // location, also known as region.
   // required if you're using a multi-service or regional (not global) resource. It can be found in the Azure portal on the Keys and Endpoint page.
    private static String location = "<YOUR-RESOURCE-LOCATION>";


    // Instantiates the OkHttpClient.
    OkHttpClient client = new OkHttpClient();

    // This function performs a POST request.
    public String Post() throws IOException {
        MediaType mediaType = MediaType.parse("application/json");
        RequestBody body = RequestBody.create(mediaType,
                "[{\"Text\": \"I would really like to drive your car around the block a few times!\"}]");
        Request request = new Request.Builder()
                .url("https://api.cognitive.microsofttranslator.com/translate?api-version=3.0&from=en&to=fr&to=zu")
                .post(body)
                .addHeader("Ocp-Apim-Subscription-Key", key)
                // location required if you're using a multi-service or regional (not global) resource.
                .addHeader("Ocp-Apim-Subscription-Region", location)
                .addHeader("Content-type", "application/json")
                .build();
        Response response = client.newCall(request).execute();
        return response.body().string();
    }

    // This function prettifies the json response.
    public static String prettify(String json_text) {
        JsonParser parser = new JsonParser();
        JsonElement json = parser.parse(json_text);
        Gson gson = new GsonBuilder().setPrettyPrinting().create();
        return gson.toJson(json);
    }

    public static void main(String[] args) {
        try {
            TranslatorText translateRequest = new TranslatorText();
            String response = translateRequest.Post();
            System.out.println(prettify(response));
        } catch (Exception e) {
            System.out.println(e);
        }
    }
}
import java.io.IOException;

import com.google.gson.*;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

public class TranslatorText {
    private static String key = "<your-translator-key";

    // location, also known as region.
   // required if you're using a multi-service or regional (not global) resource. It can be found in the Azure portal on the Keys and Endpoint page.
    private static String location = "<YOUR-RESOURCE-LOCATION>";


    // Instantiates the OkHttpClient.
    OkHttpClient client = new OkHttpClient();

    // This function performs a POST request.
    public String Post() throws IOException {
        MediaType mediaType = MediaType.parse("application/json");
        RequestBody body = RequestBody.create(mediaType,
                "[{\"Text\": \"I would really like to drive your car around the block a few times!\"}]");
        Request request = new Request.Builder()
                .url("https://api.cognitive.microsofttranslator.com/translate?api-version=3.0&from=en&to=fr&to=zu")
                .post(body)
                .addHeader("Ocp-Apim-Subscription-Key", key)
                // location required if you're using a multi-service or regional (not global) resource.
                .addHeader("Ocp-Apim-Subscription-Region", location)
                .addHeader("Content-type", "application/json")
                .build();
        Response response = client.newCall(request).execute();
        return response.body().string();
    }

    // This function prettifies the json response.
    public static String prettify(String json_text) {
        JsonParser parser = new JsonParser();
        JsonElement json = parser.parse(json_text);
        Gson gson = new GsonBuilder().setPrettyPrinting().create();
        return gson.toJson(json);
    }

    public static void main(String[] args) {
        try {
            TranslatorText translateRequest = new TranslatorText();
            String response = translateRequest.Post();
            System.out.println(prettify(response));
        } catch (Exception e) {
            System.out.println(e);
        }
    }
}
Build and run your Java application
Once you add a code sample to your application, navigate back to your main project directoryâtranslator-text-app, open a console window, and enter the following commands:
Build your application with thebuildcommand:gradle build
Build your application with thebuildcommand:
build
gradle build
gradle build
Run your application with theruncommand:gradle run
Run your application with theruncommand:
run
gradle run
gradle run
Translation output:
After a successful call, you should see the following response:
[
  {
    "translations": [
      {
        "text": "J'aimerais vraiment conduire votre voiture autour du pÃ¢tÃ© de maisons plusieurs fois!",
        "to": "fr"
      },
      {
        "text": "Ngingathanda ngempela ukushayela imoto yakho endaweni evimbelayo izikhathi ezimbalwa!",
        "to": "zu"
      }
    ]
  }
]
[
  {
    "translations": [
      {
        "text": "J'aimerais vraiment conduire votre voiture autour du pÃ¢tÃ© de maisons plusieurs fois!",
        "to": "fr"
      },
      {
        "text": "Ngingathanda ngempela ukushayela imoto yakho endaweni evimbelayo izikhathi ezimbalwa!",
        "to": "zu"
      }
    ]
  }
]
Set up your Node.js Express project
Make sure the latest version ofNode.jsis installed. Node Package Manager (npm) is included with the Node.js installation.TipIf you're new to Node.js, try theIntroduction to Node.jsLearn module.
Make sure the latest version ofNode.jsis installed. Node Package Manager (npm) is included with the Node.js installation.
Tip
If you're new to Node.js, try theIntroduction to Node.jsLearn module.
In a console window (such as cmd, PowerShell, or Bash), create and navigate to a new directory for your app namedtranslator-app.mkdir translator-app && cd translator-appmkdir translator-app; cd translator-app
In a console window (such as cmd, PowerShell, or Bash), create and navigate to a new directory for your app namedtranslator-app.
translator-app
mkdir translator-app && cd translator-app
mkdir translator-app && cd translator-app
mkdir translator-app; cd translator-app
mkdir translator-app; cd translator-app
Run the npm init command to initialize the application and scaffold your project.npm init
Run the npm init command to initialize the application and scaffold your project.
npm init
npm init
Specify your project's attributes using the prompts presented in the terminal.The most important attributes are name, version number, and entry point.We recommend keepingindex.jsfor the entry point name. The description, test command, GitHub repository, keywords, author, and license information are optional attributesâthey can be skipped for this project.Accept the suggestions in parentheses by selectingReturnorEnter.After you complete the prompts, apackage.jsonfile will be created in your translator-app directory.
Specify your project's attributes using the prompts presented in the terminal.
The most important attributes are name, version number, and entry point.
We recommend keepingindex.jsfor the entry point name. The description, test command, GitHub repository, keywords, author, and license information are optional attributesâthey can be skipped for this project.
index.js
Accept the suggestions in parentheses by selectingReturnorEnter.
After you complete the prompts, apackage.jsonfile will be created in your translator-app directory.
package.json
Open a console window and use npm to install theaxiosHTTP library anduuidpackage:npm install axios uuid
Open a console window and use npm to install theaxiosHTTP library anduuidpackage:
axios
uuid
npm install axios uuid
npm install axios uuid
Create theindex.jsfile in the application directory.TipYou can create a new file using PowerShell.Open a PowerShell window in your project directory by holding down the Shift key and right-clicking the folder.Type the following commandNew-Item index.js.You can also create a new file namedindex.jsin your IDE and save it to thetranslator-appdirectory.
Create theindex.jsfile in the application directory.
index.js
Tip
You can create a new file using PowerShell.
You can create a new file using PowerShell.
Open a PowerShell window in your project directory by holding down the Shift key and right-clicking the folder.
Open a PowerShell window in your project directory by holding down the Shift key and right-clicking the folder.
Type the following commandNew-Item index.js.
Type the following commandNew-Item index.js.
You can also create a new file namedindex.jsin your IDE and save it to thetranslator-appdirectory.
You can also create a new file namedindex.jsin your IDE and save it to thetranslator-appdirectory.
index.js
translator-app
Build your JavaScript application
Add the following code sample to yourindex.jsfile.Make sure you update the key variable with the value from your Azure portal Translator instance:
index.js
const axios = require('axios').default;
    const { v4: uuidv4 } = require('uuid');

    let key = "<your-translator-key>";
    let endpoint = "https://api.cognitive.microsofttranslator.com";

    // location, also known as region.
    // required if you're using a multi-service or regional (not global) resource. It can be found in the Azure portal on the Keys and Endpoint page.
    let location = "<YOUR-RESOURCE-LOCATION>";

    axios({
        baseURL: endpoint,
        url: '/translate',
        method: 'post',
        headers: {
            'Ocp-Apim-Subscription-Key': key,
             // location required if you're using a multi-service or regional (not global) resource.
            'Ocp-Apim-Subscription-Region': location,
            'Content-type': 'application/json',
            'X-ClientTraceId': uuidv4().toString()
        },
        params: {
            'api-version': '3.0',
            'from': 'en',
            'to': 'fr,zu'
        },
        data: [{
            'text': 'I would really like to drive your car around the block a few times!'
        }],
        responseType: 'json'
    }).then(function(response){
        console.log(JSON.stringify(response.data, null, 4));
    })
const axios = require('axios').default;
    const { v4: uuidv4 } = require('uuid');

    let key = "<your-translator-key>";
    let endpoint = "https://api.cognitive.microsofttranslator.com";

    // location, also known as region.
    // required if you're using a multi-service or regional (not global) resource. It can be found in the Azure portal on the Keys and Endpoint page.
    let location = "<YOUR-RESOURCE-LOCATION>";

    axios({
        baseURL: endpoint,
        url: '/translate',
        method: 'post',
        headers: {
            'Ocp-Apim-Subscription-Key': key,
             // location required if you're using a multi-service or regional (not global) resource.
            'Ocp-Apim-Subscription-Region': location,
            'Content-type': 'application/json',
            'X-ClientTraceId': uuidv4().toString()
        },
        params: {
            'api-version': '3.0',
            'from': 'en',
            'to': 'fr,zu'
        },
        data: [{
            'text': 'I would really like to drive your car around the block a few times!'
        }],
        responseType: 'json'
    }).then(function(response){
        console.log(JSON.stringify(response.data, null, 4));
    })
Run your JavaScript application
Once you add the code sample to your application, run your program:
Navigate to your application directory (translator-app).
Navigate to your application directory (translator-app).
Type the following command in your terminal:node index.js
Type the following command in your terminal:
node index.js
node index.js
Translation output:
After a successful call, you should see the following response:
[
    {
        "translations": [
            {
                "text": "J'aimerais vraiment conduire votre voiture autour du pÃ¢tÃ© de maisons plusieurs fois!",
                "to": "fr"
            },
            {
                "text": "Ngingathanda ngempela ukushayela imoto yakho endaweni evimbelayo izikhathi ezimbalwa!",
                "to": "zu"
            }
        ]
    }
]
[
    {
        "translations": [
            {
                "text": "J'aimerais vraiment conduire votre voiture autour du pÃ¢tÃ© de maisons plusieurs fois!",
                "to": "fr"
            },
            {
                "text": "Ngingathanda ngempela ukushayela imoto yakho endaweni evimbelayo izikhathi ezimbalwa!",
                "to": "zu"
            }
        ]
    }
]
Set up your Python project
Make sure the latest version ofPython 3.xis installed. The Python installer package (pip) is included with the Python installation.TipIf you're new to Python, try theIntroduction to PythonLearn module.
Make sure the latest version ofPython 3.xis installed. The Python installer package (pip) is included with the Python installation.
Tip
If you're new to Python, try theIntroduction to PythonLearn module.
Open a terminal window and use pip to install the Requests library and uuid0 package:pip install requests uuidNoteWe also use a Python built-in package called json. It's used to work with JSON data.
Open a terminal window and use pip to install the Requests library and uuid0 package:
pip install requests uuid
pip install requests uuid
Note
We also use a Python built-in package called json. It's used to work with JSON data.
Build your Python application
Create a new Python file calledtranslator-app.pyin your preferred editor or IDE.
Create a new Python file calledtranslator-app.pyin your preferred editor or IDE.
Add the following code sample to yourtranslator-app.pyfile.Make sure you update the key with one of the values from your Azure portal Translator instance.
Add the following code sample to yourtranslator-app.pyfile.Make sure you update the key with one of the values from your Azure portal Translator instance.
translator-app.py
import requests, uuid, json

# Add your key and endpoint
key = "<your-translator-key>"
endpoint = "https://api.cognitive.microsofttranslator.com"

# location, also known as region.
# required if you're using a multi-service or regional (not global) resource. It can be found in the Azure portal on the Keys and Endpoint page.
location = "<YOUR-RESOURCE-LOCATION>"

path = '/translate'
constructed_url = endpoint + path

params = {
    'api-version': '3.0',
    'from': 'en',
    'to': ['fr', 'zu']
}

headers = {
    'Ocp-Apim-Subscription-Key': key,
    # location required if you're using a multi-service or regional (not global) resource.
    'Ocp-Apim-Subscription-Region': location,
    'Content-type': 'application/json',
    'X-ClientTraceId': str(uuid.uuid4())
}

# You can pass more than one object in body.
body = [{
    'text': 'I would really like to drive your car around the block a few times!'
}]

request = requests.post(constructed_url, params=params, headers=headers, json=body)
response = request.json()

print(json.dumps(response, sort_keys=True, ensure_ascii=False, indent=4, separators=(',', ': ')))
import requests, uuid, json

# Add your key and endpoint
key = "<your-translator-key>"
endpoint = "https://api.cognitive.microsofttranslator.com"

# location, also known as region.
# required if you're using a multi-service or regional (not global) resource. It can be found in the Azure portal on the Keys and Endpoint page.
location = "<YOUR-RESOURCE-LOCATION>"

path = '/translate'
constructed_url = endpoint + path

params = {
    'api-version': '3.0',
    'from': 'en',
    'to': ['fr', 'zu']
}

headers = {
    'Ocp-Apim-Subscription-Key': key,
    # location required if you're using a multi-service or regional (not global) resource.
    'Ocp-Apim-Subscription-Region': location,
    'Content-type': 'application/json',
    'X-ClientTraceId': str(uuid.uuid4())
}

# You can pass more than one object in body.
body = [{
    'text': 'I would really like to drive your car around the block a few times!'
}]

request = requests.post(constructed_url, params=params, headers=headers, json=body)
response = request.json()

print(json.dumps(response, sort_keys=True, ensure_ascii=False, indent=4, separators=(',', ': ')))
Run your Python application
Once you add a code sample to your application, build and run your program:
Navigate to yourtranslator-app.pyfile.
Navigate to yourtranslator-app.pyfile.
Type the following command in your console:python translator-app.py
Type the following command in your console:
python translator-app.py
python translator-app.py
Translation output:
After a successful call, you should see the following response:
[
  {
    "translations": [
      {
        "text": "J'aimerais vraiment conduire votre voiture autour du pÃ¢tÃ© de maisons plusieurs fois!",
        "to": "fr"
      },
      {
        "text": "Ngingathanda ngempela ukushayela imoto yakho endaweni evimbelayo izikhathi ezimbalwa!",
        "to": "zu"
      }
    ]
  }
]
[
  {
    "translations": [
      {
        "text": "J'aimerais vraiment conduire votre voiture autour du pÃ¢tÃ© de maisons plusieurs fois!",
        "to": "fr"
      },
      {
        "text": "Ngingathanda ngempela ukushayela imoto yakho endaweni evimbelayo izikhathi ezimbalwa!",
        "to": "zu"
      }
    ]
  }
]
Next steps
That's it, congratulations! You just learned to use the Translator service to translate text.
Explore our how-to documentation and take a deeper dive into Translation service capabilities:
Translate text
Translate text
Transliterate text
Transliterate text
Detect and identify language
Detect and identify language
Get sentence length
Get sentence length
Dictionary lookup and alternate translations
Dictionary lookup and alternate translations
Feedback
Was this page helpful?
Additional resources