Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Use Docker YAML to build and push Docker images to Azure Container Registry
Article
2024-08-23
14 contributors
In this article
Azure DevOps Services
This tutorial shows you how to use a pipeline based on an Azure Pipelines Docker template to build a containerized application and push it to Azure Container Registry. The template sets up a continuous integration YAML pipeline where new code repository changes trigger the pipeline to build and publish updated Docker images to the registry.
The Docker container template pipeline uses Microsoft-hosted agents and creates a service principal-based service connection to Azure Container Registry. For a pipeline that does a similar process by using self-hosted agents and a service connection you create yourself, seeBuild and push Docker images to Azure Container Registry.
Prerequisites
An Azure account where you have permission to create and configure resources. If you don't have an Azure account,sign up for a free account.
An Azure account where you have permission to create and configure resources. If you don't have an Azure account,sign up for a free account.
An Azure DevOps organization and project where you have permission to create pipelines and deploy apps. To create an organization or project, seeCreate a new organizationorCreate a project in Azure DevOps.
An Azure DevOps organization and project where you have permission to create pipelines and deploy apps. To create an organization or project, seeCreate a new organizationorCreate a project in Azure DevOps.
A GitHub account.ImportantWhen you use GitHub in the following procedures, you might be prompted to create aGitHub service connection, sign in to GitHub, authenticate to GitHub organizations, install Azure Pipelines, or authorize Azure Pipelines. Follow the onscreen instructions to complete the process. For more information, seeAccess to GitHub repositories.
A GitHub account.
Important
When you use GitHub in the following procedures, you might be prompted to create aGitHub service connection, sign in to GitHub, authenticate to GitHub organizations, install Azure Pipelines, or authorize Azure Pipelines. Follow the onscreen instructions to complete the process. For more information, seeAccess to GitHub repositories.
Get the sample app
In GitHub, fork or clone theSample Docker and Kubernetes Node.JS apprepository.
Create a container registry
From theAzure portal, sign in to Azure Cloud Shell by selecting the icon in the top menu bar. Make sure to use theBashshell.
From theAzure portal, sign in to Azure Cloud Shell by selecting the icon in the top menu bar. Make sure to use theBashshell.

In the Cloud Shell, run the following commands to create a resource group and an Azure container registry by using the Azure CLI. The Container Registry name must be lowercase.az group create --name myapp-rg --location eastus
az acr create --resource-group myapp-rg --name mycontainerregistry --sku Basic
In the Cloud Shell, run the following commands to create a resource group and an Azure container registry by using the Azure CLI. The Container Registry name must be lowercase.
az group create --name myapp-rg --location eastus
az acr create --resource-group myapp-rg --name mycontainerregistry --sku Basic
az group create --name myapp-rg --location eastus
az acr create --resource-group myapp-rg --name mycontainerregistry --sku Basic
To deploy a Docker image to the Azure container registry, you must enable the admin user account for the registry, which is disabled by default. To enable the admin user for your registry, use the--admin-enabledparameter with theaz acr updatecommand. For more information and instructions, seeAdmin account.az acr update -n <acrName> --admin-enabled true
To deploy a Docker image to the Azure container registry, you must enable the admin user account for the registry, which is disabled by default. To enable the admin user for your registry, use the--admin-enabledparameter with theaz acr updatecommand. For more information and instructions, seeAdmin account.
--admin-enabled
az acr update
az acr update -n <acrName> --admin-enabled true
az acr update -n <acrName> --admin-enabled true
Alternatively, you can use the Azure portal UI to create your Azure container registry. For instructions, seeCreate a container registry. Enable the admin account inPropertiesafter you create the registry.
Create the pipeline
In your Azure DevOps project, selectPipelines>New pipeline, orCreate pipelineif this pipeline is the first in the project.
In your Azure DevOps project, selectPipelines>New pipeline, orCreate pipelineif this pipeline is the first in the project.

SelectGitHubas the location of your source code.
SelectGitHubas the location of your source code.
On theSelect a repositoryscreen, select your sample code repository.
On theSelect a repositoryscreen, select your sample code repository.
On theConfigure your pipelinescreen, select theDocker: Build and push an image to Azure Container Registrypipeline.
On theConfigure your pipelinescreen, select theDocker: Build and push an image to Azure Container Registrypipeline.

On theDockerscreen, select your Azure subscription and then selectContinue.
On theDockerscreen, select your Azure subscription and then selectContinue.
Select yourContainer registryfrom the dropdown menu, provide anImage Name, and then selectValidate and configure.Azure Pipelines generates anazure-pipelines.ymlfile that defines your pipeline.
Select yourContainer registryfrom the dropdown menu, provide anImage Name, and then selectValidate and configure.

Azure Pipelines generates anazure-pipelines.ymlfile that defines your pipeline.
Review the code inazure-pipelines.yml, and then selectSave and run.
Review the code inazure-pipelines.yml, and then selectSave and run.

Optionally edit theCommit messageand provide a description. Then selectSave and runagain to commit theazure-pipelines.ymlfile to your repository and start a build.
Optionally edit theCommit messageand provide a description. Then selectSave and runagain to commit theazure-pipelines.ymlfile to your repository and start a build.
The build run page shows build details and progress. To watch your pipeline in action, selectBuildunderJobs.
The build run page shows build details and progress. To watch your pipeline in action, selectBuildunderJobs.

Pipeline details
The pipeline is generated from theDocker container template. The build stage uses theDocker v2 taskto build and push your Docker image to the container registry.
The Docker task uses aDocker registry service connectionwith service principal authentication to enable your pipeline to push images to your container registry. The Docker container template generates this service connection when it creates the pipeline.
- stage: Build
  displayName: Build and push stage
  jobs:  
  - job: Build
    displayName: Build job
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
- stage: Build
  displayName: Build and push stage
  jobs:  
  - job: Build
    displayName: Build job
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
Clean up resources
When you finish using the resources you created in this tutorial, you can delete them to avoid incurring further charges. Run the following Cloud Shell command to delete your resource group and all the resources within it.
az group delete --name myapp-rg
az group delete --name myapp-rg
Related articles
Deploy a custom container to Azure App Service with Azure Pipelines
Docker Content Trust
Feedback
Was this page helpful?
Additional resources