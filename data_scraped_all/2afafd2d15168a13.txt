Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Azure Functions developer guide
Article
2024-06-26
35 contributors
In this article
In Azure Functions, all functions share some core technical concepts and components, regardless of your preferred language or development environment. This article is language-specific. Choose your preferred language at the top of the article.
This article assumes that you've already read theAzure Functions overview.
If you prefer to jump right in, you can complete a quickstart tutorial usingVisual Studio,Visual Studio Code, or from thecommand prompt.
If you prefer to jump right in, you can complete a quickstart tutorial usingMaven(command line),Eclipse,IntelliJ IDEA,Gradle,Quarkus,Spring Cloud, orVisual Studio Code.
If you prefer to jump right in, you can complete a quickstart tutorial usingVisual Studio Codeor from thecommand prompt.
If you prefer to jump right in, you can complete a quickstart tutorial usingVisual Studio Codeor from thecommand prompt.
If you prefer to jump right in, you can complete a quickstart tutorial usingVisual Studio Codeor from thecommand prompt.
If you prefer to jump right in, you can complete a quickstart tutorial usingVisual Studio Codeor from thecommand prompt.
Code project
At the core of Azure Functions is a language-specific code project that implements one or more units of code execution calledfunctions. Functions are simply methods that run in the Azure cloud based on events, in response to HTTP requests, or on a schedule. Think of your Azure Functions code project as a mechanism for organizing, deploying, and collectively managing your individual functions in the project when they're running in Azure. For more information, seeOrganize your functions.
The way that you lay out your code project and how you indicate which methods in your project are functions depends on the development language of your project. For detailed language-specific guidance, see theC# developers guide.
The way that you lay out your code project and how you indicate which methods in your project are functions depends on the development language of your project. For language-specific guidance, see theJava developers guide.
The way that you lay out your code project and how you indicate which methods in your project are functions depends on the development language of your project. For language-specific guidance, see theNode.js developers guide.
The way that you lay out your code project and how you indicate which methods in your project are functions depends on the development language of your project. For language-specific guidance, see thePowerShell developers guide.
The way that you lay out your code project and how you indicate which methods in your project are functions depends on the development language of your project. For language-specific guidance, see thePython developers guide.
All functions must have a trigger, which defines how the function starts and can provide input to the function. Your functions can optionally define input and output bindings. These bindings simplify connections to other services without you having to work with client SDKs. For more information, seeAzure Functions triggers and bindings concepts.
Azure Functions provides a set of language-specific project and function templates that make it easy to create new code projects and add functions to your project. You can use any of the tools that support Azure Functions development to generate new apps and functions using these templates.
Development tools
The following tools provide an integrated development and publishing experience for Azure Functions in your preferred language:
Visual Studio
Visual Studio Code
Visual Studio Code
Azure Functions Core Tools(command prompt)
Azure Functions Core Tools(command prompt)
Eclipse
Eclipse
Gradle
Gradle
IntelliJ IDEA
IntelliJ IDEA
Quarkus
Quarkus
Spring Cloud
Spring Cloud
These tools integrate withAzure Functions Core Toolsso that you can run and debug on your local computer using the Functions runtime. For more information, seeCode and test Azure Functions locally.
There's also an editor in the Azure portal that lets you update your code and yourfunction.jsondefinition file directly in the portal. You should only use this editor for small changes or creating proof-of-concept functions. You should always develop your functions locally, when possible. For more information, seeCreate your first function in the Azure portal.
Portal editing is only supported forNode.js version 3, which uses the function.json file.
Deployment
When you publish your code project to Azure, you're essentially deploying your project to an existing function app resource. A function app provides an execution context in Azure in which your functions run. As such, it's the unit of deployment and management for your functions. From an Azure Resource perspective, a function app is equivalent to a site resource (Microsoft.Web/sites) in Azure App Service, which is equivalent to a web app.
Microsoft.Web/sites
A function app is composed of one or more individual functions that are managed, deployed, and scaled together. All of the functions in a function app share the samepricing plan,deployment method, andruntime version. For more information, seeHow to manage a function app.
When the function app and any other required resources don't already exist in Azure, you first need to create these resources before you can deploy your project files. You can create these resources in one of these ways:
DuringVisual Studiopublishing
UsingVisual Studio Code
UsingVisual Studio Code
Programmatically usingAzure CLI,Azure PowerShell,ARM templates, orBicep templates
Programmatically usingAzure CLI,Azure PowerShell,ARM templates, orBicep templates
In theAzure portal
In theAzure portal
In addition to tool-based publishing, Functions supports other technologies for deploying source code to an existing function app. For more information, seeDeployment technologies in Azure Functions.
Connect to services
A major requirement of any cloud-based compute service is reading data from and writing data to other cloud services. Functions provides an extensive set of bindings that makes it easier for you to connect to services without having to work with client SDKs.
Whether you use the binding extensions provided by Functions or you work with client SDKs directly, you securely store connection data and do not include it in your code. For more information, seeConnections.
Bindings
Functions provides bindings for many Azure services and a few third-party services, which are implemented as extensions. For more information, see thecomplete list of supported bindings.
Binding extensions can support both inputs and outputs, and many triggers also act as input bindings. Bindings let you configure the connection to services so that the Functions host can handle the data access for you. For more information, seeAzure Functions triggers and bindings concepts.
If you're having issues with errors coming from bindings, see theAzure Functions Binding Error Codesdocumentation.
Client SDKs
While Functions provides bindings to simplify data access in your function code, you're still able to use a client SDK in your project to directly access a given service, if you prefer. You might need to use client SDKs directly should your functions require a functionality of the underlying SDK that's not supported by the binding extension.
When using client SDKs, you should use the same process forstoring and accessing connection stringsused by binding extensions.
When you create a client SDK instance in your functions, you should get the connection info required by the client fromEnvironment variables.
When you create a client SDK instance in your functions, you should get the connection info required by the client fromEnvironment variables.
When you create a client SDK instance in your functions, you should get the connection info required by the client fromEnvironment variables.
When you create a client SDK instance in your functions, you should get the connection info required by the client fromEnvironment variables.
When you create a client SDK instance in your functions, you should get the connection info required by the client fromEnvironment variables.
Connections
As a security best practice, Azure Functions takes advantage of the application settings functionality of Azure App Service to help you more securely store strings, keys, and other tokens required to connect to other services. Application settings in Azure are stored encrypted and can be accessed at runtime by your app as environment variablenamevaluepairs. For triggers and bindings that require a connection property, you set the application setting name instead of the actual connection string. You can't configure a binding directly with a connection string or key.
name
value
For example, consider a trigger definition that has aconnectionproperty. Instead of the connection string, you setconnectionto the name of an environment variable that contains the connection string. Using this secrets access strategy both makes your apps more secure and makes it easier for you to change connections across environments. For even more security, you can use identity-based connections.
connection
connection
The default configuration provider uses environment variables. These variables are defined inapplication settingswhen running in the Azure and in thelocal settings filewhen developing locally.
Connection values
When the connection name resolves to a single exact value, the runtime identifies the value as aconnection string, which typically includes a secret. The details of a connection string depend on the service to which you connect.
However, a connection name can also refer to a collection of multiple configuration items, useful for configuringidentity-based connections. Environment variables can be treated as a collection by using a shared prefix that ends in double underscores__. The group can then be referenced by setting the connection name to this prefix.
__
For example, theconnectionproperty for an Azure Blob trigger definition might beStorage1. As long as there's no single string value configured by an environment variable namedStorage1,  an environment variable namedStorage1__blobServiceUricould be used to inform theblobServiceUriproperty of the connection. The connection properties are different for each service. Refer to the documentation for the component that uses the connection.
connection
Storage1
Storage1
Storage1__blobServiceUri
blobServiceUri
Note
When usingAzure App ConfigurationorKey Vaultto provide settings for Managed Identity connections, setting names should use a valid key separator such as:or/in place of the__to ensure names are resolved correctly.
:
/
__
For example,Storage1:blobServiceUri.
Storage1:blobServiceUri
Configure an identity-based connection
Some connections in Azure Functions can be configured to use an identity instead of a secret. Support depends on the runtime version and the extension using the connection. In some cases, a connection string may still be required in Functions even though the service to which you're connecting supports identity-based connections. For a tutorial on configuring your function apps with managed identities, see thecreating a function app with identity-based connections tutorial.
Note
When running in a Consumption or Elastic Premium plan, your app uses theWEBSITE_AZUREFILESCONNECTIONSTRINGandWEBSITE_CONTENTSHAREsettings when connecting to Azure Files on the storage account used by your function app. Azure Files doesn't support using managed identity when accessing the file share. For more information, seeAzure Files supported authentication scenarios
WEBSITE_AZUREFILESCONNECTIONSTRING
WEBSITE_CONTENTSHARE
Identity-based connections are only supported on Functions 4.x, If you are using version 1.x, you must firstmigrate to version 4.x.
The following components support identity-based connections:
When hosted in the Azure Functions service, identity-based connections use amanaged identity. The system-assigned identity is used by default, although a user-assigned identity can be specified with thecredentialandclientIDproperties. Note that configuring a user-assigned identity with a resource ID isnotsupported. When run in other contexts, such as local development, your developer identity is used instead, although this can be customized. SeeLocal development with identity-based connections.
credential
clientID
Whatever identity is being used must have permissions to perform the intended actions. For most Azure services, this means you need toassign a role in Azure RBAC, using either built-in or custom roles which provide those permissions.
Important
Some permissions might be exposed by the target service that are not necessary for all contexts. Where possible, adhere to theprinciple of least privilege, granting the identity only required privileges. For example, if the app only needs to be able to read from a data source, use a role that only has permission to read. It would be inappropriate to assign a role that also allows writing to that service, as this would be excessive permission for a read operation. Similarly, you would want to ensure the role assignment is scoped only over the resources that need to be read.
Choose one of these tabs to learn about permissions for each component:
Azure Blobs extension
Azure Queues extension
Azure Tables extension
Event Hubs extension
Service Bus extension
Event Grid extension
Azure Cosmos DB extension
Azure SignalR extension
Durable Functions storage provider
Functions host storage
You need to create a role assignment that provides access to your blob container at runtime. Management roles likeOwneraren't sufficient. The following table shows built-in roles that are recommended when using the Blob Storage extension in normal operation. Your application may require further permissions based on the code you write.
1The blob trigger handles failure across multiple retries by writingpoison blobsto a queue on the storage account specified by the connection.
2The AzureWebJobsStorage connection is used internally for blobs and queues that enable the trigger. If it's configured to use an identity-based connection, it needs extra permissions beyond the default requirement. The required permissions are covered by theStorage Blob Data Owner,Storage Queue Data Contributor, andStorage Account Contributorroles. To learn more, seeConnecting to host storage with an identity.
You will need to create a role assignment that provides access to your queue at runtime. Management roles likeOwnerare not sufficient. The following table shows built-in roles that are recommended when using the Queue Storage extension in normal operation. Your application may require additional permissions based on the code you write.
You'll need to create a role assignment that provides access to your Azure Storage table service at runtime. Management roles likeOwneraren't sufficient. The following table shows built-in roles that are recommended when using the Azure Tables extension against Azure Storage in normal operation. Your application may require additional permissions based on the code you write.
1If your app is instead connecting to tables in Azure Cosmos DB for Table, using an identity isn't supported and the connection must use a connection string.
You will need to create a role assignment that provides access to your event hub at runtime. The scope of the role assignment can be for an Event Hubs namespace, or the event hub itself. Management roles likeOwnerare not sufficient. The following table shows built-in roles that are recommended when using the Event Hubs extension in normal operation. Your application may require additional permissions based on the code you write.
You'll need to create a role assignment that provides access to your topics and queues at runtime. Management roles likeOwneraren't sufficient. The following table shows built-in roles that are recommended when using the Service Bus extension in normal operation. Your application may require additional permissions based on the code you write.
1For triggering from Service Bus topics, the role assignment needs to have effective scope over the Service Bus subscription resource. If only the topic is included, an error will occur. Some clients, such as the Azure portal, don't expose the Service Bus subscription resource as a scope for role assignment. In such cases, the Azure CLI may be used instead. To learn more, seeAzure built-in roles for Azure Service Bus.
You must create a role assignment that provides access to your Event Grid topic at runtime. Management roles likeOwnerare not sufficient. The following table shows built-in roles that are recommended when using the Event Hubs extension in normal operation. Your application may require additional permissions based on the code you write.
Cosmos DB does not use Azure RBAC for data operations. Instead, it uses aCosmos DB built-in RBAC systemwhich is built on similar concepts. You will need to create a role assignment that provides access to your database account at runtime. Azure RBAC Management roles likeOwnerare not sufficient. The following table shows built-in roles that are recommended when using the Azure Cosmos DB extension in normal operation. Your application may require additional permissions based on the code you write.
1These roles cannot be used in an Azure RBAC role assignment. See theCosmos DB built-in RBAC systemdocumentation for details on how to assign these roles.
2When using identity, Cosmos DB treats container creation as a management operation. It is not available as a data-plane operation for the trigger. You will need to ensure that you create the containers needed by the trigger (including the lease container) before setting up your function.
You need to create a role assignment that provides access to Azure SignalR Service data plane REST APIs. We recommend you to use the built-in roleSignalR Service Owner. Management roles likeOwneraren't sufficient.
You'll need to create a role assignment that provides access to Azure storage at runtime. Management roles likeOwneraren't sufficient. The following built-in roles are recommended when using the Durable Functions extension in normal operation:
Storage Blob Data Contributor
Storage Queue Data Contributor
Storage Table Data Contributor
Your application may require more permissions based on the code you write. If you're using the default behavior or explicitly settingconnectionNameto "AzureWebJobsStorage", seeConnecting to host storage with an identityfor other permission considerations.
connectionName
You will need to create a role assignment that provides access to the storage account for "AzureWebJobsStorage" at runtime. Management roles likeOwnerare not sufficient. TheStorage Blob Data Ownerrole covers the basic needs of Functions host storage - the runtime needs both read and write access to blobs and the ability to create containers. Several extensions use this connection as a default location for blobs, queues, and tables, and these uses may add requirements as noted in the table below. You may need additional permissions if you use "AzureWebJobsStorage" for any other purposes.
An identity-based connection for an Azure service accepts the following common properties, where<CONNECTION_NAME_PREFIX>is the value of yourconnectionproperty in the trigger or binding definition:
<CONNECTION_NAME_PREFIX>
connection
<CONNECTION_NAME_PREFIX>__credential
managedidentity
<CONNECTION_NAME_PREFIX>__clientId
credential
managedidentity
credential
<CONNECTION_NAME_PREFIX>__managedIdentityResourceId
credential
managedidentity
credential
Other options may be supported for a given connection type. Refer to the documentation for the component making the connection.
Caution
Use of the Azure SDK'sEnvironmentCredentialenvironment variables is not recommended due to the potentially unintentional impact on other connections. They also are not fully supported when deployed to Azure Functions.
EnvironmentCredential
The environment variables associated with the Azure SDK'sEnvironmentCredentialcan also be set, but these are not processed by the Functions service for scaling in Consumption plans. These environment variables are not specific to any one connection and will apply as a default unless a corresponding property is not set for a given connection. For example, ifAZURE_CLIENT_IDis set, this would be used as if<CONNECTION_NAME_PREFIX>__clientIdhad been configured. Explicitly setting<CONNECTION_NAME_PREFIX>__clientIdwould override this default.
EnvironmentCredential
AZURE_CLIENT_ID
<CONNECTION_NAME_PREFIX>__clientId
<CONNECTION_NAME_PREFIX>__clientId
Note
Local development with identity-based connections requires version4.0.3904ofAzure Functions Core Tools, or a later version.
4.0.3904
When you're running your function project locally, the above configuration tells the runtime to use your local developer identity. The connection attempts to get a token from the following locations, in order:
A local cache shared between Microsoft applications
The current user context in Visual Studio
The current user context in Visual Studio Code
The current user context in the Azure CLI
If none of these options are successful, an error occurs.
Your identity may already have some role assignments against Azure resources used for development, but those roles may not provide the necessary data access. Management roles likeOwneraren't sufficient. Double-check what permissions are required for connections for each component, and make sure that you have them assigned to yourself.
In some cases, you may wish to specify use of a different identity. You can add configuration properties for the connection that point to the alternate identity based on a client ID and client Secret for a Microsoft Entra service principal.This configuration option is not supported when hosted in the Azure Functions service.To use an ID and secret on your local machine, define the connection with the following extra properties:
<CONNECTION_NAME_PREFIX>__tenantId
<CONNECTION_NAME_PREFIX>__clientId
<CONNECTION_NAME_PREFIX>__clientSecret
Here's an example oflocal.settings.jsonproperties required for identity-based connection to Azure Blobs:
local.settings.json
{
  "IsEncrypted": false,
  "Values": {
    "<CONNECTION_NAME_PREFIX>__blobServiceUri": "<blobServiceUri>",
    "<CONNECTION_NAME_PREFIX>__queueServiceUri": "<queueServiceUri>",
    "<CONNECTION_NAME_PREFIX>__tenantId": "<tenantId>",
    "<CONNECTION_NAME_PREFIX>__clientId": "<clientId>",
    "<CONNECTION_NAME_PREFIX>__clientSecret": "<clientSecret>"
  }
}
{
  "IsEncrypted": false,
  "Values": {
    "<CONNECTION_NAME_PREFIX>__blobServiceUri": "<blobServiceUri>",
    "<CONNECTION_NAME_PREFIX>__queueServiceUri": "<queueServiceUri>",
    "<CONNECTION_NAME_PREFIX>__tenantId": "<tenantId>",
    "<CONNECTION_NAME_PREFIX>__clientId": "<clientId>",
    "<CONNECTION_NAME_PREFIX>__clientSecret": "<clientSecret>"
  }
}
The Azure Functions host uses the storage connection set inAzureWebJobsStorageto enable core behaviors such as coordinating singleton execution of timer triggers and default app key storage. This connection can also be configured to use an identity.
AzureWebJobsStorage
Caution
Other components in Functions rely onAzureWebJobsStoragefor default behaviors. You should not move it to an identity-based connection if you are using older versions of extensions that do not support this type of connection, including triggers and bindings for Azure Blobs, Event Hubs, and Durable Functions. Similarly,AzureWebJobsStorageis used for deployment artifacts when using server-side build in Linux Consumption, and if you enable this, you will need to deploy viaan external deployment package.
AzureWebJobsStorage
AzureWebJobsStorage
In addition, your function app might be reusingAzureWebJobsStoragefor other storage connections in their triggers, bindings, and/or function code. Make sure that all uses ofAzureWebJobsStorageare able to use the identity-based connection format before changing this connection from a connection string.
AzureWebJobsStorage
AzureWebJobsStorage
To use an identity-based connection forAzureWebJobsStorage, configure the following app settings:
AzureWebJobsStorage
AzureWebJobsStorage__blobServiceUri
AzureWebJobsStorage__queueServiceUri
AzureWebJobsStorage__tableServiceUri
Common properties for identity-based connectionsmay also be set as well.
If you're configuringAzureWebJobsStorageusing a storage account that uses the default DNS suffix and service name for global Azure, following thehttps://<accountName>.[blob|queue|file|table].core.windows.netformat, you can instead setAzureWebJobsStorage__accountNameto the name of your storage account. The endpoints for each storage service are inferred for this account. This doesn't work when the storage account is in a sovereign cloud or has a custom DNS.
AzureWebJobsStorage
https://<accountName>.[blob|queue|file|table].core.windows.net
AzureWebJobsStorage__accountName
AzureWebJobsStorage__accountName
AzureWebJobsStorage
You will need to create a role assignment that provides access to the storage account for "AzureWebJobsStorage" at runtime. Management roles likeOwnerare not sufficient. TheStorage Blob Data Ownerrole covers the basic needs of Functions host storage - the runtime needs both read and write access to blobs and the ability to create containers. Several extensions use this connection as a default location for blobs, queues, and tables, and these uses may add requirements as noted in the table below. You may need additional permissions if you use "AzureWebJobsStorage" for any other purposes.
Reporting Issues
Open source repositories
The code for Azure Functions is open source, and you can find key components in these GitHub repositories:
Azure Functions
Azure Functions
Azure Functions host
Azure Functions host
Azure Functions portal
Azure Functions portal
Azure Functions templates
Azure Functions templates
Azure WebJobs SDK
Azure WebJobs SDK
Azure WebJobs SDK Extensions
Azure WebJobs SDK Extensions
Azure Functions .NET worker (isolated process)
Azure Functions Java worker
Azure Functions Node.js Programming Model
Azure Functions PowerShell worker
Azure Functions Python worker
Next steps
For more information, see the following resources:
Azure Functions scenarios
Code and test Azure Functions locally
Best Practices for Azure Functions
Feedback
Was this page helpful?
Additional resources