Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Define fail criteria for load tests by using Azure Load Testing
Article
2025-03-03
7 contributors
In this article
In this article, you learn how to define fail criteria or auto stop criteria for your load tests with Azure Load Testing. Fail criteria let you define performance and quality expectations for your application under load. Azure Load Testing supports various client and server metrics for defining fail criteria, such as error rate or CPU percentage for an Azure resource. Auto stop criteria enable you to automatically stop your load test when the error rate surpasses a given threshold.
Prerequisites
An Azure account with an active subscription. If you don't have an Azure subscription, create afree accountbefore you begin.
An Azure load testing resource. If you need to create an Azure Load Testing resource, see the quickstartCreate and run a load test.
Load test fail criteria
Load test fail criteria are conditions for metrics, that your test should meet. You define test criteria at the load test level in Azure Load Testing. A load test can have one or more test criteria. When at least one of the test criteria evaluates to true, the load test gets thefailedstatus.
You can define a maximum of 50 test criteria for a load test. If there are multiple criteria for the same metric, the criterion with the lowest threshold value is used.
Fail criteria structure for client metrics
The format of fail criteria in Azure Load Testing follows that of a conditional statement for asupported metric. For example, ensure that the average number of requests per second is greater than 500.
For client-side metrics, you can define test criteria at two levels. A load test can combine criteria at the different levels.
At the load test level. For example, to ensure that the total error percentage doesn't exceed a threshold. The structure for the criteria is:Aggregate_function (client_metric) condition threshold.
Aggregate_function (client_metric) condition threshold
At the request level. For example, you could specify a response time threshold of thegetProductsrequest, but disregard the response time of thesign inrequest. The structure for the criteria is:Request: Aggregate_function (client_metric) condition threshold.
Request: Aggregate_function (client_metric) condition threshold
The following table describes the different components:
Client metric
Aggregate function
Condition
greater than
less than
Threshold
Request
Supported client metrics for fail criteria
Azure Load Testing supports the following client metrics:
response_time_ms
avg
min
max
pxx
>
<
latency
avg
min
max
pxx
>
<
error
percentage
>
requests_per_sec
avg
>
<
requests
count
>
<
Define load test fail criteria for client metrics
Azure portal
Azure Pipelines / GitHub Actions
In this section, you configure test criteria for client metric for a load test in the Azure portal.
In theAzure portal, go to your Azure Load Testing resource.
In theAzure portal, go to your Azure Load Testing resource.
On the left pane, selectTeststo view the list of load tests.
On the left pane, selectTeststo view the list of load tests.
Select your load test from the list, and then selectEdit.
Select your load test from the list, and then selectEdit.

On theTest criteriapane, fill theMetric,Aggregate function,Condition, andThresholdvalues for your test.Optionally, enter theRequest nameinformation to add a test criterion for a specific request. The value should match the name of the sampler or request in the test script.
On theTest criteriapane, fill theMetric,Aggregate function,Condition, andThresholdvalues for your test.

Optionally, enter theRequest nameinformation to add a test criterion for a specific request. The value should match the name of the sampler or request in the test script.

SelectApplyto save the changes.When you now run the load test, Azure Load Testing uses the test criteria to determine the status of the load test run.
SelectApplyto save the changes.
When you now run the load test, Azure Load Testing uses the test criteria to determine the status of the load test run.
Run the test and view the status in the load test dashboard.The dashboard shows each of the test criteria and their status. The overall test status is failed if at least one criterion was met.
Run the test and view the status in the load test dashboard.
The dashboard shows each of the test criteria and their status. The overall test status is failed if at least one criterion was met.

In this section, you configure test criteria for a client metric for a load test, as part of a CI/CD workflow. Learn how toset up automated performance testing with CI/CD.
For CI/CD workflows, you configure the load test settings in aYAML test configuration file. You store the load test configuration file alongside the test script file in the source control repository.
To specify fail criteria in the YAML configuration file:
Open the YAML test configuration file for your load test in your editor of choice.
Open the YAML test configuration file for your load test in your editor of choice.
Add your test criteria in thefailureCriteriasetting.Use thefail criteria format, as described earlier. You can add multiple fail criteria for a load test.The following example defines three fail criteria. The first two criteria apply to the overall load test, and the last one specifies a condition for theGetCustomerDetailsrequest.version: v0.1
testId: SampleTestCICD
displayName: Sample test from CI/CD
testPlan: SampleTest.jmx
description: Load test website home page
engineInstances: 1
failureCriteria:
  - avg(response_time_ms) > 300
  - percentage(error) > 50
  - GetCustomerDetails: avg(latency) >200When you define a test criterion for a specific request, the request name should match the name of the JMeter sampler in the JMX file or the request in the Locust script.
Add your test criteria in thefailureCriteriasetting.
failureCriteria
Use thefail criteria format, as described earlier. You can add multiple fail criteria for a load test.
The following example defines three fail criteria. The first two criteria apply to the overall load test, and the last one specifies a condition for theGetCustomerDetailsrequest.
GetCustomerDetails
version: v0.1
testId: SampleTestCICD
displayName: Sample test from CI/CD
testPlan: SampleTest.jmx
description: Load test website home page
engineInstances: 1
failureCriteria:
  - avg(response_time_ms) > 300
  - percentage(error) > 50
  - GetCustomerDetails: avg(latency) >200
version: v0.1
testId: SampleTestCICD
displayName: Sample test from CI/CD
testPlan: SampleTest.jmx
description: Load test website home page
engineInstances: 1
failureCriteria:
  - avg(response_time_ms) > 300
  - percentage(error) > 50
  - GetCustomerDetails: avg(latency) >200
When you define a test criterion for a specific request, the request name should match the name of the JMeter sampler in the JMX file or the request in the Locust script.

Save the YAML configuration file, and commit the changes to source control.
Save the YAML configuration file, and commit the changes to source control.
After the CI/CD workflow runs, verify the test status in the CI/CD log.The log shows the overall test status, and the status of each of the test criteria. The status of the CI/CD workflow run also reflects the test run status.
After the CI/CD workflow runs, verify the test status in the CI/CD log.
The log shows the overall test status, and the status of each of the test criteria. The status of the CI/CD workflow run also reflects the test run status.

Access app component for test criteria on server metrics
When you set failure criteria on a metric in your app component, your load testing resource uses amanaged identityfor accessing that component. After you configure the managed identity, you need to grant the managed identity of your load testing resource permissions to read these values from the app component.
To grant your Azure load testing resource permissions to read the metrics from your app component:
In theAzure portal, go to your app component.
In theAzure portal, go to your app component.
On the left pane, selectAccess Control (IAM), then select+ Add, and then selectAdd role assignment.
On the left pane, selectAccess Control (IAM), then select+ Add, and then selectAdd role assignment.

On theRoletab, underJob functions roles, search forMonitoring ReaderorMonitoring Contributor.
On theRoletab, underJob functions roles, search forMonitoring ReaderorMonitoring Contributor.
On theMemberstab, underAssign access to, selectManaged Identity.
On theMemberstab, underAssign access to, selectManaged Identity.
Click onSelect members, search and select the managed identity for the load testing resource, and then selectNext.
If you're using a system-assigned managed identity, the managed identity name matches that of your Azure load testing resource.
Click onSelect members, search and select the managed identity for the load testing resource, and then selectNext.
If you're using a system-assigned managed identity, the managed identity name matches that of your Azure load testing resource.
SelectReview + assignto assign the identity the permission.
SelectReview + assignto assign the identity the permission.

When your test runs, the managed identity that's associated with your load testing resource can now read the metrics for your load test from your app component.
Define load test fail criteria for server metrics
Important
Azure Load Testing doesn't support configuring failure criteria on server-side metrics from Azure Pipelines/GitHub Actions.
In this section, you configure test failure criteria on server-side metrics for a load test in the Azure portal.
In theAzure portal, go to your Azure Load Testing resource.
In theAzure portal, go to your Azure Load Testing resource.
SelectCreate Test.
SelectCreate Test.
Under theMonitoringTab,configure the app componentsyou want to monitor during the test.
Under theMonitoringTab,configure the app componentsyou want to monitor during the test.
Configure theMetrics reference identity. The identity can be the system-assigned identity of the load testing resource, or one of the user-assigned identities. Make sure you use the same identity you've granted access previously.
Configure theMetrics reference identity. The identity can be the system-assigned identity of the load testing resource, or one of the user-assigned identities. Make sure you use the same identity you've granted access previously.

On theTest criteriapane, fill theResource ID, Namespace, Metric, Aggregation, Condition, Threshold valuesfor your test. You can set failure criteria only for those resources/app components that you are monitoring during the test.
On theTest criteriapane, fill theResource ID, Namespace, Metric, Aggregation, Condition, Threshold valuesfor your test. You can set failure criteria only for those resources/app components that you are monitoring during the test.

SelectApplyto save the changes.
When you now run the load test, Azure Load Testing uses the test criteria to determine the status of the load test run.
SelectApplyto save the changes.
When you now run the load test, Azure Load Testing uses the test criteria to determine the status of the load test run.
Run the test and view the status in the load test dashboard.
The dashboard shows each of the test criteria and their status. The overall test status is failed if at least one criterion was met.
Run the test and view the status in the load test dashboard.
The dashboard shows each of the test criteria and their status. The overall test status is failed if at least one criterion was met.

Auto stop configuration
Azure Load Testing automatically stops a load test if the error percentage exceeds a given threshold for a certain time window. Automatically stopping safeguards you against failing tests further incurring costs, for example, because of an incorrectly configured endpoint URL.
In the load test configuration, you can enable or disable the auto stop functionality and configure the error percentage threshold and time window. By default, Azure Load Testing automatically stops a load test that has an error percentage that is at least 90% during any 60-second time window.
You can use the Azure Load Testing auto stop functionality in combination with anAutoStop listenerin your JMeter script. The load test automatically stops when one of the criteria in either the auto stop configuration or the JMeter AutoStop listener is met.
Caution
If you disable auto stop for your load test, you may incur costs even when your load test is configured incorrectly.
Azure portal
Azure Pipelines / GitHub Actions
To configure auto stop for your load test in the Azure portal:
In theAzure portal, go to your Azure Load Testing resource.
In theAzure portal, go to your Azure Load Testing resource.
On the left pane, selectTeststo view the list of load tests.
On the left pane, selectTeststo view the list of load tests.
Select your load test from the list, and then selectEdit. Alternately, selectCreate>Upload a scriptto create a new test.
Select your load test from the list, and then selectEdit. Alternately, selectCreate>Upload a scriptto create a new test.
Go to theTest criteriatab to configure the auto stop functionality.Enable or disable automatically stopping of the load test by using theAuto-stop testcontrol.If you enable auto stop, you can fill theError percentageandTime windowfields. Specify the time window in seconds.
Go to theTest criteriatab to configure the auto stop functionality.
Enable or disable automatically stopping of the load test by using theAuto-stop testcontrol.
Enable or disable automatically stopping of the load test by using theAuto-stop testcontrol.
If you enable auto stop, you can fill theError percentageandTime windowfields. Specify the time window in seconds.
If you enable auto stop, you can fill theError percentageandTime windowfields. Specify the time window in seconds.

SelectApply, orReview + createif you're creating a new load test, to save the changes.
SelectApply, orReview + createif you're creating a new load test, to save the changes.
To configure auto stop for your load test in a CI/CD workflow, you update theload test configuration YAML file.
To specify auto stop settings in the YAML configuration file:
Open the YAML test configuration file for your load test in your editor of choice.To enable auto stop, add theautoStopsetting and specify theerrorPercentageandtimeWindow.The following example automatically stops the load test when the error percentage exceeds 80% during any 2-minute time window:version: v0.1
testId: SampleTestCICD
displayName: Sample test from CI/CD
testPlan: SampleTest.jmx
description: Load test website home page
engineInstances: 1
autoStop:
  errorPercentage: 80
  timeWindow: 120To disable auto stop, addautoStop: disableto the configuration file.The following example disables auto stop for your load test:version: v0.1
testId: SampleTestCICD
displayName: Sample test from CI/CD
testPlan: SampleTest.jmx
description: Load test website home page
engineInstances: 1
autoStop: disable
Open the YAML test configuration file for your load test in your editor of choice.
To enable auto stop, add theautoStopsetting and specify theerrorPercentageandtimeWindow.The following example automatically stops the load test when the error percentage exceeds 80% during any 2-minute time window:version: v0.1
testId: SampleTestCICD
displayName: Sample test from CI/CD
testPlan: SampleTest.jmx
description: Load test website home page
engineInstances: 1
autoStop:
  errorPercentage: 80
  timeWindow: 120
To enable auto stop, add theautoStopsetting and specify theerrorPercentageandtimeWindow.
autoStop
errorPercentage
timeWindow
The following example automatically stops the load test when the error percentage exceeds 80% during any 2-minute time window:
version: v0.1
testId: SampleTestCICD
displayName: Sample test from CI/CD
testPlan: SampleTest.jmx
description: Load test website home page
engineInstances: 1
autoStop:
  errorPercentage: 80
  timeWindow: 120
version: v0.1
testId: SampleTestCICD
displayName: Sample test from CI/CD
testPlan: SampleTest.jmx
description: Load test website home page
engineInstances: 1
autoStop:
  errorPercentage: 80
  timeWindow: 120
To disable auto stop, addautoStop: disableto the configuration file.The following example disables auto stop for your load test:version: v0.1
testId: SampleTestCICD
displayName: Sample test from CI/CD
testPlan: SampleTest.jmx
description: Load test website home page
engineInstances: 1
autoStop: disable
To disable auto stop, addautoStop: disableto the configuration file.
autoStop: disable
The following example disables auto stop for your load test:
version: v0.1
testId: SampleTestCICD
displayName: Sample test from CI/CD
testPlan: SampleTest.jmx
description: Load test website home page
engineInstances: 1
autoStop: disable
version: v0.1
testId: SampleTestCICD
displayName: Sample test from CI/CD
testPlan: SampleTest.jmx
description: Load test website home page
engineInstances: 1
autoStop: disable
Save the YAML configuration file, and commit the changes to source control.
Save the YAML configuration file, and commit the changes to source control.
Learn how toset up automated performance testing with CI/CD.
Next steps
To learn how to parameterize a load test by using secrets, seeParameterize a load test.
To learn how to parameterize a load test by using secrets, seeParameterize a load test.
To learn about performance test automation, seeConfigure automated performance testing.
To learn about performance test automation, seeConfigure automated performance testing.
Feedback
Was this page helpful?
Additional resources