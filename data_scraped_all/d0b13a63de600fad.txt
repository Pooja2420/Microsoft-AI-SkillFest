Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Copy data from an SAP table using Azure Data Factory or Azure Synapse Analytics
Article
2025-04-02
15 contributors
In this article
APPLIES TO:Azure Data FactoryAzure Synapse Analytics
Tip
Try outData Factory in Microsoft Fabric, an all-in-one analytics solution for enterprises.Microsoft Fabriccovers everything from data movement to data science, real-time analytics, business intelligence, and reporting. Learn how tostart a new trialfor free!
This article outlines how to use the copy activity in Azure Data Factory and Azure Synapse Analytics pipelines to copy data from an SAP table. For more information, seeCopy activity overview.
Tip
To learn the overall support on SAP data integration scenario, seeSAP data integration using Azure Data Factory whitepaperwith detailed introduction on each SAP connector, comparison and guidance.
Supported capabilities
This SAP table connector is supported for the following capabilities:
â  Azure integration runtime â¡ Self-hosted integration runtime
For a list of the data stores that are supported as sources or sinks by the copy activity, see theSupported data storestable.
Specifically, this SAP table connector supports:
Copying data from an SAP table in:SAP ERP Central Component (SAP ECC) version 7.01 or later (in a recent SAP Support Package Stack released after 2015).SAP Business Warehouse (SAP BW) version 7.01 or later (in a recent SAP Support Package Stack released after 2015).SAP S/4HANA.Other products in SAP Business Suite version 7.01 or later (in a recent SAP Support Package Stack released after 2015).
Copying data from an SAP table in:
SAP ERP Central Component (SAP ECC) version 7.01 or later (in a recent SAP Support Package Stack released after 2015).
SAP Business Warehouse (SAP BW) version 7.01 or later (in a recent SAP Support Package Stack released after 2015).
SAP S/4HANA.
Other products in SAP Business Suite version 7.01 or later (in a recent SAP Support Package Stack released after 2015).
Copying data from both an SAP transparent table, a pooled table, a clustered table, and a view.
Copying data from both an SAP transparent table, a pooled table, a clustered table, and a view.
Copying data by using basic authentication or Secure Network Communications (SNC), if SNC is configured.
Copying data by using basic authentication or Secure Network Communications (SNC), if SNC is configured.
Connecting to an SAP application server or SAP message server.
Connecting to an SAP application server or SAP message server.
Retrieving data via default or custom RFC.
Retrieving data via default or custom RFC.
For more information about SNC, seeGetting started with SAP SNC for RFC integrations - SAP blog.
The version 7.01 or later refers to SAP NetWeaver version instead of SAP ECC version. For example,â¯SAP ECC 6.0 EHP 7 in general has NetWeaver version >=7.4. In case you are unsure about your environment, here are the steps to confirm the version from your SAP system:
Use SAP GUI to connect to the SAP System.
Go toSystem->Status.
Check the release of the SAP_BASIS, ensure it is equal to or larger than 701.
Prerequisites
To use this SAP table connector, you need to:
Set up a self-hosted integration runtime (version 3.17 or later). For more information, seeCreate and configure a self-hosted integration runtime.
Set up a self-hosted integration runtime (version 3.17 or later). For more information, seeCreate and configure a self-hosted integration runtime.
Download the 64-bitSAP Connector for Microsoft .NET 3.0from SAP's website, and install it on the self-hosted integration runtime machine. During installation, make sure you select theInstall Assemblies to GACoption in theOptional setup stepswindow.
Download the 64-bitSAP Connector for Microsoft .NET 3.0from SAP's website, and install it on the self-hosted integration runtime machine. During installation, make sure you select theInstall Assemblies to GACoption in theOptional setup stepswindow.

The SAP user who's being used in the SAP table connector must have the following permissions:Authorization for using Remote Function Call (RFC) destinations.Permissions to the Execute activity of the S_SDSAUTH authorization object. You can refer to SAP Note 460089 on the majority authorization objects. Certain RFCs are required by the underlying NCo connector, for example RFC_FUNCTION_SEARCH.
The SAP user who's being used in the SAP table connector must have the following permissions:
Authorization for using Remote Function Call (RFC) destinations.
Permissions to the Execute activity of the S_SDSAUTH authorization object. You can refer to SAP Note 460089 on the majority authorization objects. Certain RFCs are required by the underlying NCo connector, for example RFC_FUNCTION_SEARCH.
Get started
To perform the Copy activity with a pipeline, you can use one of the following tools or SDKs:
The Copy Data tool
The Azure portal
The .NET SDK
The Python SDK
Azure PowerShell
The REST API
The Azure Resource Manager template
Create a linked service to an SAP table using UI
Use the following steps to create a linked service to an SAP table in the Azure portal UI.
Browse to the Manage tab in your Azure Data Factory or Synapse workspace and select Linked Services, then click New:Azure Data FactoryAzure Synapse
Browse to the Manage tab in your Azure Data Factory or Synapse workspace and select Linked Services, then click New:
Azure Data Factory
Azure Synapse


Search for SAP and select the SAP table connector.
Search for SAP and select the SAP table connector.

Configure the service details, test the connection, and create the new linked service.
Configure the service details, test the connection, and create the new linked service.

Connector configuration details
The following sections provide details about properties that are used to define the entities specific to the SAP table connector.
Linked service properties
The following properties are supported for the SAP BW Open Hub linked service:
type
type
SapTable
server
systemNumber
messageServer
messageServerService
systemId
logonGroup
clientId
language
EN
userName
password
SecureString
sncMode
0
1
sncMyName
sncMode
sncPartnerName
sncMode
sncLibraryPath
sncMode
sncQop
sncMode
1
2
3
8
9
connectVia
Example 1: Connect to an SAP application server
{
    "name": "SapTableLinkedService",
    "properties": {
        "type": "SapTable",
        "typeProperties": {
            "server": "<server name>",
            "systemNumber": "<system number>",
            "clientId": "<client ID>",
            "userName": "<SAP user>",
            "password": {
                "type": "SecureString",
                "value": "<Password for SAP user>"
            }
        },
        "connectVia": {
            "referenceName": "<name of Integration Runtime>",
            "type": "IntegrationRuntimeReference"
        }
    }
}
{
    "name": "SapTableLinkedService",
    "properties": {
        "type": "SapTable",
        "typeProperties": {
            "server": "<server name>",
            "systemNumber": "<system number>",
            "clientId": "<client ID>",
            "userName": "<SAP user>",
            "password": {
                "type": "SecureString",
                "value": "<Password for SAP user>"
            }
        },
        "connectVia": {
            "referenceName": "<name of Integration Runtime>",
            "type": "IntegrationRuntimeReference"
        }
    }
}
Example 2: Connect to an SAP message server
{
    "name": "SapTableLinkedService",
    "properties": {
        "type": "SapTable",
        "typeProperties": {
            "messageServer": "<message server name>",
            "messageServerService": "<service name or port>",
            "systemId": "<system ID>",
            "logonGroup": "<logon group>",
            "clientId": "<client ID>",
            "userName": "<SAP user>",
            "password": {
                "type": "SecureString",
                "value": "<Password for SAP user>"
            }
        },
        "connectVia": {
            "referenceName": "<name of integration runtime>",
            "type": "IntegrationRuntimeReference"
        }
    }
}
{
    "name": "SapTableLinkedService",
    "properties": {
        "type": "SapTable",
        "typeProperties": {
            "messageServer": "<message server name>",
            "messageServerService": "<service name or port>",
            "systemId": "<system ID>",
            "logonGroup": "<logon group>",
            "clientId": "<client ID>",
            "userName": "<SAP user>",
            "password": {
                "type": "SecureString",
                "value": "<Password for SAP user>"
            }
        },
        "connectVia": {
            "referenceName": "<name of integration runtime>",
            "type": "IntegrationRuntimeReference"
        }
    }
}
Example 3: Connect by using SNC
{
    "name": "SapTableLinkedService",
    "properties": {
        "type": "SapTable",
        "typeProperties": {
            "server": "<server name>",
            "systemNumber": "<system number>",
            "clientId": "<client ID>",
            "userName": "<SAP user>",
            "password": {
                "type": "SecureString",
                "value": "<Password for SAP user>"
            },
            "sncMode": 1,
            "sncMyName": "<SNC myname>",
            "sncPartnerName": "<SNC partner name>",
            "sncLibraryPath": "<SNC library path>",
            "sncQop": "8"
        },
        "connectVia": {
            "referenceName": "<name of integration runtime>",
            "type": "IntegrationRuntimeReference"
        }
    }
}
{
    "name": "SapTableLinkedService",
    "properties": {
        "type": "SapTable",
        "typeProperties": {
            "server": "<server name>",
            "systemNumber": "<system number>",
            "clientId": "<client ID>",
            "userName": "<SAP user>",
            "password": {
                "type": "SecureString",
                "value": "<Password for SAP user>"
            },
            "sncMode": 1,
            "sncMyName": "<SNC myname>",
            "sncPartnerName": "<SNC partner name>",
            "sncLibraryPath": "<SNC library path>",
            "sncQop": "8"
        },
        "connectVia": {
            "referenceName": "<name of integration runtime>",
            "type": "IntegrationRuntimeReference"
        }
    }
}
For more information about SNC, seeGetting started with SAP SNC for RFC integrations - SAP blog.
Dataset properties
For a full list of the sections and properties for defining datasets, seeDatasets. The following section provides a list of the properties supported by the SAP table dataset.
To copy data from and to the SAP BW Open Hub linked service, the following properties are supported:
type
type
SapTableResource
tableName
Example
{
    "name": "SAPTableDataset",
    "properties": {
        "type": "SapTableResource",
        "typeProperties": {
            "tableName": "<SAP table name>"
        },
        "schema": [],
        "linkedServiceName": {
            "referenceName": "<SAP table linked service name>",
            "type": "LinkedServiceReference"
        }
    }
}
{
    "name": "SAPTableDataset",
    "properties": {
        "type": "SapTableResource",
        "typeProperties": {
            "tableName": "<SAP table name>"
        },
        "schema": [],
        "linkedServiceName": {
            "referenceName": "<SAP table linked service name>",
            "type": "LinkedServiceReference"
        }
    }
}
Copy activity properties
For a full list of the sections and properties for defining activities, seePipelines. The following section provides a list of the properties supported by the SAP table source.
SAP table as source
To copy data from an SAP table, the following properties are supported:
type
type
SapTableSource
rowCount
rfcTableFields
column0, column1
rfcTableOptions
COLUMN0 EQ 'SOMEVALUE'
customRfcReadTableFunctionModule
/SAPDS/RFC_READ_TABLE2
partitionOption
None
None
PartitionOnInt(normal integer or integer values with zero padding on the left, such as0000012345)
PartitionOnInt
0000012345
PartitionOnCalendarYear(4 digits in the format "YYYY")
PartitionOnCalendarYear
PartitionOnCalendarMonth(6 digits in the format "YYYYMM")
PartitionOnCalendarMonth
PartitionOnCalendarDate(8 digits in the format "YYYYMMDD")
PartitionOnCalendarDate
PartitionOntime(6 digits in the format "HHMMSS", such as235959)
PartitionOntime
235959
partitionColumnName
partitionUpperBound
partitionColumnName
partitionLowerBound
partitionColumnName
partitionLowerBound
PartitionOnInt
maxPartitionsNumber
sapDataColumnDelimiter
Tip
If your SAP table has a large volume of data, such as several billion rows, usepartitionOptionandpartitionSettingto split the data into smaller partitions. In this case, the data is read per partition, and each data partition is retrieved from your SAP server via a single RFC call.TakingpartitionOptionaspartitionOnIntas an example, the number of rows in each partition is calculated with this formula: (total rows falling betweenpartitionUpperBoundandpartitionLowerBound)/maxPartitionsNumber.To load data partitions in parallel to speed up copy, the parallel degree is controlled by theparallelCopiessetting on the copy activity. For example, if you setparallelCopiesto four, the service concurrently generates and runs four queries based on your specified partition option and settings, and each query retrieves a portion of data from your SAP table. We strongly recommend makingmaxPartitionsNumbera multiple of the value of theparallelCopiesproperty. When copying data into file-based data store, it's also recommended to write to a folder as multiple files (only specify folder name), in which case the performance is better than writing to a single file.
partitionOption
partitionSetting
partitionOption
partitionOnInt
partitionUpperBound
partitionLowerBound
maxPartitionsNumber
parallelCopies
parallelCopies
maxPartitionsNumber
parallelCopies
Tip
TheBASXMLis enabled by default for this SAP Table connector within the service.
BASXML
InrfcTableOptions, you can use the following common SAP query operators to filter the rows:
rfcTableOptions
EQ
NE
LT
LE
GT
GE
IN
TABCLASS IN ('TRANSP', 'INTTAB')
LIKE
LIKE 'Emma%'
Example
"activities":[
    {
        "name": "CopyFromSAPTable",
        "type": "Copy",
        "inputs": [
            {
                "referenceName": "<SAP table input dataset name>",
                "type": "DatasetReference"
            }
        ],
        "outputs": [
            {
                "referenceName": "<output dataset name>",
                "type": "DatasetReference"
            }
        ],
        "typeProperties": {
            "source": {
                "type": "SapTableSource",
                "partitionOption": "PartitionOnInt",
                "partitionSettings": {
                     "partitionColumnName": "<partition column name>",
                     "partitionUpperBound": "2000",
                     "partitionLowerBound": "1",
                     "maxPartitionsNumber": 500
                 }
            },
            "sink": {
                "type": "<sink type>"
            },
            "parallelCopies": 4
        }
    }
]
"activities":[
    {
        "name": "CopyFromSAPTable",
        "type": "Copy",
        "inputs": [
            {
                "referenceName": "<SAP table input dataset name>",
                "type": "DatasetReference"
            }
        ],
        "outputs": [
            {
                "referenceName": "<output dataset name>",
                "type": "DatasetReference"
            }
        ],
        "typeProperties": {
            "source": {
                "type": "SapTableSource",
                "partitionOption": "PartitionOnInt",
                "partitionSettings": {
                     "partitionColumnName": "<partition column name>",
                     "partitionUpperBound": "2000",
                     "partitionLowerBound": "1",
                     "maxPartitionsNumber": 500
                 }
            },
            "sink": {
                "type": "<sink type>"
            },
            "parallelCopies": 4
        }
    }
]
Join SAP tables
Currently SAP Table connector only supports one single table with the default function module. To get the joined data of multiple tables, you can leverage thecustomRfcReadTableFunctionModuleproperty in the SAP Table connector following steps below:
Write a custom function module, which can take a query as OPTIONS and apply your own logic to retrieve the data.
For the "Custom function module", enter the name of your custom function module.
For the "RFC table options", specify the table join statement to feed into your function module as OPTIONS, such as "<TABLE1>INNER JOIN<TABLE2>ON COLUMN0".
<TABLE1>
<TABLE2>
Below is an example:

Tip
You can also consider having the joined data aggregated in the VIEW, which is supported by SAP Table connector.
You can also try to extract related tables to get onboard onto Azure (e.g. Azure Storage, Azure SQL Database), then use Data Flow to proceed with further join or filter.
Create custom function module
For SAP table, currently we supportcustomRfcReadTableFunctionModuleproperty in the copy source, which allows you to leverage your own logic and process data.
As a quick guidance, here are some requirements to get started with the "Custom function module":
Definition:
Definition:

Export data into one of the tables below:
Export data into one of the tables below:


Below are illustrations of how SAP table connector works with custom function module:
Build connection with SAP server via SAP NCO.
Build connection with SAP server via SAP NCO.
Invoke "Custom function module" with the parameters set as below:QUERY_TABLE: the table name you set in the SAP Table dataset;Delimiter: the delimiter you set in the SAP Table Source;ROWCOUNT/Option/Fields: the Rowcount/Aggregated Option/Fields you set in the Table source.
Invoke "Custom function module" with the parameters set as below:
QUERY_TABLE: the table name you set in the SAP Table dataset;
Delimiter: the delimiter you set in the SAP Table Source;
ROWCOUNT/Option/Fields: the Rowcount/Aggregated Option/Fields you set in the Table source.
Get the result and parse the data in below ways:Parse the value in the Fields table to get the schemas.Get the values of the output table to see which table contains these values.Get the values in the OUT_TABLE, parse the data and then write it into the sink.
Get the result and parse the data in below ways:
Parse the value in the Fields table to get the schemas.
Parse the value in the Fields table to get the schemas.

Get the values of the output table to see which table contains these values.
Get the values of the output table to see which table contains these values.

Get the values in the OUT_TABLE, parse the data and then write it into the sink.
Get the values in the OUT_TABLE, parse the data and then write it into the sink.
Data type mappings for an SAP table
When you're copying data from an SAP table, the following mappings are used from the SAP table data types to interim data types used within the service. To learn how the copy activity maps the source schema and data type to the sink, seeSchema and data type mappings.
C
String
I
Int32
F
Double
D
String
T
String
P
Decimal
N
String
X
String
Lookup activity properties
To learn details about the properties, checkLookup activity.
Related content
For a list of the data stores supported as sources and sinks by the copy activity, seeSupported data stores.
Feedback
Was this page helpful?
Additional resources