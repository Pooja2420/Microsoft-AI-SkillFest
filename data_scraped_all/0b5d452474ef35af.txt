Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Tutorial: Set up global distribution using Azure Cosmos DB for NoSQL
Article
2024-10-03
2 contributors
In this article
APPLIES TO:NoSQL
In this article, we show how to use the Azure portal to set up Azure Cosmos DB global distribution and then connect using the API for NoSQL.
This article covers the following tasks:
Configure global distribution using the Azure portal
Configure global distribution using theAPI for NoSQLs
Add global database regions using the Azure portal
Azure Cosmos DB is available in allAzure regionsworldwide. After selecting the default consistency level for your database account, you can associate one or more regions (depending on your choice of default consistency level and global distribution needs).
In theAzure portal, in the left bar, clickAzure Cosmos DB.
In theAzure portal, in the left bar, clickAzure Cosmos DB.
In theAzure Cosmos DBpage, select the database account to modify.
In theAzure Cosmos DBpage, select the database account to modify.
In the account page, clickReplicate data globallyfrom the menu.
In the account page, clickReplicate data globallyfrom the menu.
In theReplicate data globallypage, select the regions to add or remove by clicking regions in the map, and then clickSave. There is a cost to adding regions, see thepricing pageor theDistribute data globally with Azure Cosmos DBarticle for more information.
In theReplicate data globallypage, select the regions to add or remove by clicking regions in the map, and then clickSave. There is a cost to adding regions, see thepricing pageor theDistribute data globally with Azure Cosmos DBarticle for more information.

Once you add a second region, theManual Failoveroption is enabled on theReplicate data globallypage in the portal. You can use this option to test the failover process or change the primary write region. Once you add a third region, theFailover Prioritiesoption is enabled on the same page so that you can change the failover order for reads.
Selecting global database regions
There are two common scenarios for configuring two or more regions:
Delivering low-latency access to data to end users no matter where they are located around the globe
Adding regional resiliency for business continuity and disaster recovery (BCDR)
For delivering low-latency to end users, it is recommended that you deploy both the application and Azure Cosmos DB in the regions that correspond to where the application's users are located.
For BCDR, it is recommended to add regions based on the region pairs described in theCross-region replication in Azure: Business continuity and disaster recoveryarticle.
Connecting to a preferred region using the API for NoSQL
In order to take advantage ofglobal distribution, client applications can specify the ordered preference list of regions to be used to perform document operations. Based on the Azure Cosmos DB account configuration, current regional availability and the preference list specified, the most optimal endpoint will be chosen by the SQL SDK to perform write and read operations.
This preference list is specified when initializing a connection using the SQL SDKs. The SDKs accept an optional parameterPreferredLocationsthat is an ordered list of Azure regions.
PreferredLocations
The SDK will automatically send all writes to the current write region. All reads are sent to the first available region in the preferred locations list. If the request fails, the client will fail down the list to the next region.
The SDK will only attempt to read from the regions specified in preferred locations. So, for example, if the Azure Cosmos DB account is available in four regions, but the client only specifies two read(non-write) regions within thePreferredLocations, then no reads will be served out of the read region that is not specified inPreferredLocations. If the read regions specified in thePreferredLocationslist are not available, reads will be served out of write region.
PreferredLocations
PreferredLocations
PreferredLocations
The application can verify the current write endpoint and read endpoint chosen by the SDK by checking two properties,WriteEndpointandReadEndpoint, available in SDK version 1.8 and above. If thePreferredLocationsproperty is not set, all requests will be served from the current write region.
WriteEndpoint
ReadEndpoint
PreferredLocations
If you don't specify the preferred locations but used thesetCurrentLocationmethod, the SDK automatically populates the preferred locations based on the current region that the client is running in. The SDK orders the regions based on the proximity of a region to the current region.
setCurrentLocation
.NET SDK
The SDK can be used without any code changes. In this case, the SDK automatically directs both reads and writes to the current write region.
In version 1.8 and later of the .NET SDK, the ConnectionPolicy parameter for the DocumentClient constructor has a property called Microsoft.Azure.Documents.ConnectionPolicy.PreferredLocations. This property is of type Collection<string>and should contain a list of region names. The string values are formatted per the region name column on theAzure Regionspage, with no spaces before or after the first and last character respectively.
<string>
The current write and read endpoints are available in DocumentClient.WriteEndpoint and DocumentClient.ReadEndpoint respectively.
Note
The URLs for the endpoints should not be considered as long-lived constants. The service may update these at any point. The SDK handles this change automatically.
.NET SDK V2
.NET SDK V3
If you are using the .NET V2 SDK, use thePreferredLocationsproperty to set the preferred region.
PreferredLocations
// Getting endpoints from application settings or other configuration location
Uri accountEndPoint = new Uri(Properties.Settings.Default.GlobalDatabaseUri);

ConnectionPolicy connectionPolicy = new ConnectionPolicy();

//Setting read region selection preference
connectionPolicy.PreferredLocations.Add(LocationNames.WestUS); // first preference
connectionPolicy.PreferredLocations.Add(LocationNames.EastUS); // second preference
connectionPolicy.PreferredLocations.Add(LocationNames.NorthEurope); // third preference
// initialize connection
DocumentClient docClient = new DocumentClient(
    accountEndPoint,
    credential,
    connectionPolicy);

// connect to DocDB
await docClient.OpenAsync().ConfigureAwait(false);
// Getting endpoints from application settings or other configuration location
Uri accountEndPoint = new Uri(Properties.Settings.Default.GlobalDatabaseUri);

ConnectionPolicy connectionPolicy = new ConnectionPolicy();

//Setting read region selection preference
connectionPolicy.PreferredLocations.Add(LocationNames.WestUS); // first preference
connectionPolicy.PreferredLocations.Add(LocationNames.EastUS); // second preference
connectionPolicy.PreferredLocations.Add(LocationNames.NorthEurope); // third preference
// initialize connection
DocumentClient docClient = new DocumentClient(
    accountEndPoint,
    credential,
    connectionPolicy);

// connect to DocDB
await docClient.OpenAsync().ConfigureAwait(false);
Alternatively, you can use theSetCurrentLocationproperty and let the SDK choose the preferred location based on proximity.
SetCurrentLocation
// Getting endpoints from application settings or other configuration location
Uri accountEndPoint = new Uri(Properties.Settings.Default.GlobalDatabaseUri);

ConnectionPolicy connectionPolicy = new ConnectionPolicy();

connectionPolicy.SetCurrentLocation("West US 2"); /

// initialize connection
DocumentClient docClient = new DocumentClient(
    accountEndPoint,
    credential,
    connectionPolicy);

// connect to DocDB
await docClient.OpenAsync().ConfigureAwait(false);
// Getting endpoints from application settings or other configuration location
Uri accountEndPoint = new Uri(Properties.Settings.Default.GlobalDatabaseUri);

ConnectionPolicy connectionPolicy = new ConnectionPolicy();

connectionPolicy.SetCurrentLocation("West US 2"); /

// initialize connection
DocumentClient docClient = new DocumentClient(
    accountEndPoint,
    credential,
    connectionPolicy);

// connect to DocDB
await docClient.OpenAsync().ConfigureAwait(false);
If you are using the .NET V3 SDK, use theApplicationPreferredRegionsproperty to set the preferred region.
ApplicationPreferredRegions
CosmosClientOptions options = new CosmosClientOptions();
options.ApplicationName = "MyApp";
options.ApplicationPreferredRegions = new List<string> {Regions.WestUS, Regions.WestUS2};

CosmosClient client = new CosmosClient(endpoint, credential, options);
CosmosClientOptions options = new CosmosClientOptions();
options.ApplicationName = "MyApp";
options.ApplicationPreferredRegions = new List<string> {Regions.WestUS, Regions.WestUS2};

CosmosClient client = new CosmosClient(endpoint, credential, options);
Alternatively, you can use theApplicationRegionproperty and let the SDK choose the preferred location based on proximity.
ApplicationRegion
CosmosClientOptions options = new CosmosClientOptions();
options.ApplicationName = "MyApp";
// If the application is running in West US
options.ApplicationRegion = Regions.WestUS;

CosmosClient client = new CosmosClient(endpoint, tokenCredential, options);
CosmosClientOptions options = new CosmosClientOptions();
options.ApplicationName = "MyApp";
// If the application is running in West US
options.ApplicationRegion = Regions.WestUS;

CosmosClient client = new CosmosClient(endpoint, tokenCredential, options);
Node.js/JavaScript
Note
The URLs for the endpoints should not be considered as long-lived constants. The service may update these at any point. The SDK will handle this change automatically.
Below is a code example for Node.js/JavaScript.
// Setting read region selection preference, in the following order -
// 1 - West US
// 2 - East US
// 3 - North Europe
const preferredLocations = ['West US', 'East US', 'North Europe'];

// initialize the connection
const client = new CosmosClient({ endpoint, aadCredentials: tokenCredential, connectionPolicy: { preferredLocations } });
// Setting read region selection preference, in the following order -
// 1 - West US
// 2 - East US
// 3 - North Europe
const preferredLocations = ['West US', 'East US', 'North Europe'];

// initialize the connection
const client = new CosmosClient({ endpoint, aadCredentials: tokenCredential, connectionPolicy: { preferredLocations } });
Python SDK
The following code shows how to set preferred locations by using the Python SDK:
connectionPolicy = documents.ConnectionPolicy()
connectionPolicy.PreferredLocations = ['West US', 'East US', 'North Europe']
client = cosmos_client.CosmosClient(ENDPOINT, credential=token_credential, connectionPolicy)
connectionPolicy = documents.ConnectionPolicy()
connectionPolicy.PreferredLocations = ['West US', 'East US', 'North Europe']
client = cosmos_client.CosmosClient(ENDPOINT, credential=token_credential, connectionPolicy)
Java V4 SDK
The following code shows how to set preferred locations by using the Java SDK:
Async
Sync
ArrayList<String> preferredRegions = new ArrayList<String>();
preferredRegions.add("East US");
preferredRegions.add( "West US");
preferredRegions.add("Canada Central");

CosmosAsyncClient client =
        new CosmosClientBuilder()
                .endpoint(HOST)
                .credential(tokenCredential)
                .preferredRegions(preferredRegions)
                .contentResponseOnWriteEnabled(true)
                .buildAsyncClient();
ArrayList<String> preferredRegions = new ArrayList<String>();
preferredRegions.add("East US");
preferredRegions.add( "West US");
preferredRegions.add("Canada Central");

CosmosAsyncClient client =
        new CosmosClientBuilder()
                .endpoint(HOST)
                .credential(tokenCredential)
                .preferredRegions(preferredRegions)
                .contentResponseOnWriteEnabled(true)
                .buildAsyncClient();
ArrayList<String> preferredRegions = new ArrayList<String>();
preferredRegions.add("East US");
preferredRegions.add( "West US");
preferredRegions.add("Canada Central");

CosmosClient client =
        new CosmosClientBuilder()
                .endpoint(HOST)
                .credential(tokenCredential)
                .preferredRegions(preferredRegions)
                .contentResponseOnWriteEnabled(true)
                .buildClient();
ArrayList<String> preferredRegions = new ArrayList<String>();
preferredRegions.add("East US");
preferredRegions.add( "West US");
preferredRegions.add("Canada Central");

CosmosClient client =
        new CosmosClientBuilder()
                .endpoint(HOST)
                .credential(tokenCredential)
                .preferredRegions(preferredRegions)
                .contentResponseOnWriteEnabled(true)
                .buildClient();
Spark 3 Connector
You can define the preferred regional list using thespark.cosmos.preferredRegionsListconfiguration, for example:
spark.cosmos.preferredRegionsList
val sparkConnectorConfig = Map(
  "spark.cosmos.accountEndpoint" -> cosmosEndpoint,
  "spark.cosmos.preferredRegionsList" -> "[West US, East US, North Europe]"
  // other settings
)
val sparkConnectorConfig = Map(
  "spark.cosmos.accountEndpoint" -> cosmosEndpoint,
  "spark.cosmos.preferredRegionsList" -> "[West US, East US, North Europe]"
  // other settings
)
REST
Once a database account has been made available in multiple regions, clients can query its availability by performing a GET request on this  URIhttps://{databaseaccount}.documents.azure.com/
https://{databaseaccount}.documents.azure.com/
The service will return a list of regions and their corresponding Azure Cosmos DB endpoint URIs for the replicas. The current write region will be indicated in the response. The client can then select the appropriate endpoint for all further REST API requests as follows.
Example response
{
    "_dbs": "//dbs/",
    "media": "//media/",
    "writableLocations": [
        {
            "Name": "West US",
            "DatabaseAccountEndpoint": "https://globaldbexample-westus.documents.azure.com:443/"
        }
    ],
    "readableLocations": [
        {
            "Name": "East US",
            "DatabaseAccountEndpoint": "https://globaldbexample-eastus.documents.azure.com:443/"
        }
    ],
    "MaxMediaStorageUsageInMB": 2048,
    "MediaStorageUsageInMB": 0,
    "ConsistencyPolicy": {
        "defaultConsistencyLevel": "Session",
        "maxStalenessPrefix": 100,
        "maxIntervalInSeconds": 5
    },
    "addresses": "//addresses/",
    "id": "globaldbexample",
    "_rid": "globaldbexample.documents.azure.com",
    "_self": "",
    "_ts": 0,
    "_etag": null
}
{
    "_dbs": "//dbs/",
    "media": "//media/",
    "writableLocations": [
        {
            "Name": "West US",
            "DatabaseAccountEndpoint": "https://globaldbexample-westus.documents.azure.com:443/"
        }
    ],
    "readableLocations": [
        {
            "Name": "East US",
            "DatabaseAccountEndpoint": "https://globaldbexample-eastus.documents.azure.com:443/"
        }
    ],
    "MaxMediaStorageUsageInMB": 2048,
    "MediaStorageUsageInMB": 0,
    "ConsistencyPolicy": {
        "defaultConsistencyLevel": "Session",
        "maxStalenessPrefix": 100,
        "maxIntervalInSeconds": 5
    },
    "addresses": "//addresses/",
    "id": "globaldbexample",
    "_rid": "globaldbexample.documents.azure.com",
    "_self": "",
    "_ts": 0,
    "_etag": null
}
All PUT, POST, and DELETE requests must go to the indicated write URI
All GETs and other read-only requests (for example queries) may go to any endpoint of the client's choice
Write requests to read-only regions will fail with HTTP error code 403 ("Forbidden").
If the write region changes after the client's initial discovery phase, subsequent writes to the previous write region will fail with HTTP error code 403 ("Forbidden"). The client should then GET the list of regions again to get the updated write region.
That's it, that completes this tutorial. You can learn how to manage the consistency of your globally replicated account by readingConsistency levels in Azure Cosmos DB. And for more information about how global database replication works in Azure Cosmos DB, seeDistribute data globally with Azure Cosmos DB.
Next steps
In this tutorial, you've done the following:
Configure global distribution using the Azure portal
Configure global distribution using the API for NoSQLs
You can now proceed to the next tutorial to learn how to develop locally using the Azure Cosmos DB local emulator.
Develop locally with the emulator
Trying to do capacity planning for a migration to Azure Cosmos DB? You can use information about your existing database cluster for capacity planning.
If all you know is the number of vcores and servers in your existing database cluster, read aboutestimating request units using vCores or vCPUs
If you know typical request rates for your current database workload, read aboutestimating request units using Azure Cosmos DB capacity planner
Feedback
Was this page helpful?
Additional resources