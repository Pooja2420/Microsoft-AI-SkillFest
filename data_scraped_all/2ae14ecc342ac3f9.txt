Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Configure your App Service or Azure Functions app to use Microsoft Entra sign-in
Article
2025-03-28
26 contributors
In this article

Note
Starting June 1, 2024, newly created App Service apps can generate a unique default host name that uses the naming convention<app-name>-<random-hash>.<region>.azurewebsites.net. For example:myapp-ds27dh7271aah175.westus-01.azurewebsites.net. Existing app names remain unchanged.
<app-name>-<random-hash>.<region>.azurewebsites.net
myapp-ds27dh7271aah175.westus-01.azurewebsites.net
For more information, see theblog post about creating a web app with a unique default host name.
Select another authentication provider to jump to it.
Microsoft Entra
Facebook
Google
X
OpenID Connect provider
Sign in with Apple (preview)
This article shows you how to configure authentication for Azure App Service or Azure Functions so that your app signs in users with theMicrosoft identity platform(Microsoft Entra) as the authentication provider.
Choose a tenant for your application and its users
Before your application can sign in users, you need to register it in a workforce tenant or an external tenant. If you're making your app available to employee or business guests, register your app in a workforce tenant. If your app is for consumers and business customers, register it in an external tenant.
Sign in to theAzure portaland go to your app.
Sign in to theAzure portaland go to your app.
On your app's left menu, selectSettings>Authentication, and then selectAdd identity provider.
On your app's left menu, selectSettings>Authentication, and then selectAdd identity provider.
On theAdd an identity providerpage, selectMicrosoftas theIdentity providervalue to sign in Microsoft and Microsoft Entra identities.
On theAdd an identity providerpage, selectMicrosoftas theIdentity providervalue to sign in Microsoft and Microsoft Entra identities.
UnderChoose a tenant for your application and its users, select either:Workforce configuration (current tenant)for employees and business guestsExternal configurationfor consumers and business customers
UnderChoose a tenant for your application and its users, select either:
Workforce configuration (current tenant)for employees and business guests
External configurationfor consumers and business customers
Choose the app registration
The App Service authentication feature can automatically create an app registration for you. Or, you can use a registration that you or a directory admin creates separately.
Create a new app registration automatically, unless you need to create an app registration separately. You can customize the app registration in theMicrosoft Entra admin centerlater if you want.
The following situations are the most common cases for using an existing app registration:
Your account doesn't have permissions to create app registrations in your Microsoft Entra tenant.
You want to use an app registration from a different Microsoft Entra tenant than the one that contains your app. This is always the case if you selectedExternal configurationwhen you chose a tenant.
The option to create a new registration isn't available for government clouds.
Workforce configuration
External configuration
Option 1: Create and use a new app registration
SelectCreate new app registration.
SelectCreate new app registration.
ForName, enter the name of the new app registration.
ForName, enter the name of the new app registration.
Select theSupported account typevalue:Current tenant - Single tenant. Accounts in this organizational directory only. All user and guest accounts in your directory can use your application or API. Use this option if your target audience is internal to your organization.Any Microsoft Entra directory - Multitenant. Accounts in any organizational directory. All users with a work or school account from Microsoft can use your application or API. These accounts include schools and businesses that use Office 365. Use this option if your target audience is business or educational customers and to enable multitenancy.Any Microsoft Entra directory & personal Microsoft accounts. Accounts in any organizational directory and personal Microsoft accounts (for example, Skype or Xbox). All users with a work or school account, or a personal Microsoft account, can use your application or API. It includes schools and businesses that use Office 365, along with personal accounts that are used to sign in to services like Xbox and Skype. Use this option to target the widest set of Microsoft identities and to enable multitenancy.Personal Microsoft accounts only. Personal accounts that are used to sign in to services like Xbox and Skype. Use this option to target the widest set of Microsoft identities.
Select theSupported account typevalue:
Current tenant - Single tenant. Accounts in this organizational directory only. All user and guest accounts in your directory can use your application or API. Use this option if your target audience is internal to your organization.
Any Microsoft Entra directory - Multitenant. Accounts in any organizational directory. All users with a work or school account from Microsoft can use your application or API. These accounts include schools and businesses that use Office 365. Use this option if your target audience is business or educational customers and to enable multitenancy.
Any Microsoft Entra directory & personal Microsoft accounts. Accounts in any organizational directory and personal Microsoft accounts (for example, Skype or Xbox). All users with a work or school account, or a personal Microsoft account, can use your application or API. It includes schools and businesses that use Office 365, along with personal accounts that are used to sign in to services like Xbox and Skype. Use this option to target the widest set of Microsoft identities and to enable multitenancy.
Personal Microsoft accounts only. Personal accounts that are used to sign in to services like Xbox and Skype. Use this option to target the widest set of Microsoft identities.
You can change the name of the registration or the supported account types later if you want.
A client secret is created as a slot-stickyapplication settingnamedMICROSOFT_PROVIDER_AUTHENTICATION_SECRET. If you want to manage the secret in Azure Key Vault, you can update that setting later to useKey Vault references. Alternatively, you can change this touse an identity instead of a client secret. Support for using an identity is currently in preview.
MICROSOFT_PROVIDER_AUTHENTICATION_SECRET
Option 2: Use an existing registration created separately
To use an existing registration, select either:
Pick an existing app registration in this directory. Then select an app registration from the dropdown list.
Pick an existing app registration in this directory. Then select an app registration from the dropdown list.
Provide the details of an existing app registration. Then provide:Application (client) ID.Client secret (recommended). A secret value that the application uses to prove its identity when it requests a token. This value is saved in your app's configuration as a slot-sticky application setting namedMICROSOFT_PROVIDER_AUTHENTICATION_SECRET. If the client secret isn't set, sign-in operations from the service use the OAuth 2.0 implicit grant flow, which wedon'trecommend.You can also configure the application touse an identity instead of a client secret. Support for using an identity is currently in preview.Issuer URL. This URL takes the form<authentication-endpoint>/<tenant-id>/v2.0. Replace<authentication-endpoint>with the authentication endpointvalue that's specific to the cloud environment. For example, a workforce tenant in global Azure would usehttps://sts.windows.netas its authentication endpoint.
Provide the details of an existing app registration. Then provide:
Application (client) ID.
Application (client) ID.
Client secret (recommended). A secret value that the application uses to prove its identity when it requests a token. This value is saved in your app's configuration as a slot-sticky application setting namedMICROSOFT_PROVIDER_AUTHENTICATION_SECRET. If the client secret isn't set, sign-in operations from the service use the OAuth 2.0 implicit grant flow, which wedon'trecommend.You can also configure the application touse an identity instead of a client secret. Support for using an identity is currently in preview.
Client secret (recommended). A secret value that the application uses to prove its identity when it requests a token. This value is saved in your app's configuration as a slot-sticky application setting namedMICROSOFT_PROVIDER_AUTHENTICATION_SECRET. If the client secret isn't set, sign-in operations from the service use the OAuth 2.0 implicit grant flow, which wedon'trecommend.
MICROSOFT_PROVIDER_AUTHENTICATION_SECRET
You can also configure the application touse an identity instead of a client secret. Support for using an identity is currently in preview.
Issuer URL. This URL takes the form<authentication-endpoint>/<tenant-id>/v2.0. Replace<authentication-endpoint>with the authentication endpointvalue that's specific to the cloud environment. For example, a workforce tenant in global Azure would usehttps://sts.windows.netas its authentication endpoint.
Issuer URL. This URL takes the form<authentication-endpoint>/<tenant-id>/v2.0. Replace<authentication-endpoint>with the authentication endpointvalue that's specific to the cloud environment. For example, a workforce tenant in global Azure would usehttps://sts.windows.netas its authentication endpoint.
<authentication-endpoint>/<tenant-id>/v2.0
<authentication-endpoint>
https://sts.windows.net
If you need to manually create an app registration in a workforce tenant, seeRegister an application with the Microsoft identity platform. As you go through the registration process, be sure to note the application (client) ID and client secret values.
During the registration process, in theRedirect URIssection, selectWebfor platform and enter<app-url>/.auth/login/aad/callback. For example, enterhttps://contoso.azurewebsites.net/.auth/login/aad/callback.
<app-url>/.auth/login/aad/callback
https://contoso.azurewebsites.net/.auth/login/aad/callback
Now, modify the app registration:
On the left pane, selectExpose an API>Add>Save. This value uniquely identifies the application when it's used as a resource, which allows tokens that grant access to be requested. The value is a prefix for scopes that you create.For a single-tenant app, you can use the default value, which is in the formapi://<application-client-id>. You can also specify a more readable URI likehttps://contoso.com/api, based on one of the verified domains for your tenant. For a multitenant app, you must provide a custom URI. For more information about accepted formats for app ID URIs, seeSecurity best practices for application properties in Microsoft Entra ID.
On the left pane, selectExpose an API>Add>Save. This value uniquely identifies the application when it's used as a resource, which allows tokens that grant access to be requested. The value is a prefix for scopes that you create.
For a single-tenant app, you can use the default value, which is in the formapi://<application-client-id>. You can also specify a more readable URI likehttps://contoso.com/api, based on one of the verified domains for your tenant. For a multitenant app, you must provide a custom URI. For more information about accepted formats for app ID URIs, seeSecurity best practices for application properties in Microsoft Entra ID.
api://<application-client-id>
https://contoso.com/api
SelectAdd a scope, and then:InScope name, enteruser_impersonation.InWho can consent, selectAdmins and usersif you want to allow users to consent to this scope.Enter the consent scope name. Enter a description that you want users to see on the consent page. For example, enterAccessapplication-name.SelectAdd scope.
SelectAdd a scope, and then:
InScope name, enteruser_impersonation.
InWho can consent, selectAdmins and usersif you want to allow users to consent to this scope.
Enter the consent scope name. Enter a description that you want users to see on the consent page. For example, enterAccessapplication-name.
SelectAdd scope.
(Recommended) Create a client assertion for the app. To create a client secret:On the left pane, selectCertificates & secrets>Client secrets>New client secret.Enter a description and expiration, and then selectAdd.In theValuefield, copy the client secret value. After you move away from this page, it doesn't appear again.You can also configure the application touse an identity instead of a client secret. Support for using an identity is currently in preview.
(Recommended) Create a client assertion for the app. To create a client secret:
On the left pane, selectCertificates & secrets>Client secrets>New client secret.
Enter a description and expiration, and then selectAdd.
In theValuefield, copy the client secret value. After you move away from this page, it doesn't appear again.
You can also configure the application touse an identity instead of a client secret. Support for using an identity is currently in preview.
(Optional) To add multiple reply URLs, selectAuthentication.
(Optional) To add multiple reply URLs, selectAuthentication.
Option 1: Create and use a new app registration
SelectCreate new app registration.
SelectCreate new app registration.
ForSelect a tenant, take one of the following actions:Select an existing tenant to use.SelectCreate new, and then:On theCreate a tenantpage, add theTenant NameandDomain Namevalues.Select aLocationvalue, and then selectReview and create>Create. The tenant creation process takes a few minutes.For more information about creating a tenant, seeUse your Azure subscription to create an external tenant.
ForSelect a tenant, take one of the following actions:
Select an existing tenant to use.
Select an existing tenant to use.
SelectCreate new, and then:On theCreate a tenantpage, add theTenant NameandDomain Namevalues.Select aLocationvalue, and then selectReview and create>Create. The tenant creation process takes a few minutes.For more information about creating a tenant, seeUse your Azure subscription to create an external tenant.
SelectCreate new, and then:
On theCreate a tenantpage, add theTenant NameandDomain Namevalues.
On theCreate a tenantpage, add theTenant NameandDomain Namevalues.
Select aLocationvalue, and then selectReview and create>Create. The tenant creation process takes a few minutes.
Select aLocationvalue, and then selectReview and create>Create. The tenant creation process takes a few minutes.
For more information about creating a tenant, seeUse your Azure subscription to create an external tenant.
SelectConfigureto configure external authentication for the new tenant.
SelectConfigureto configure external authentication for the new tenant.
The browser opensConfigure customer authentication.
The browser opensConfigure customer authentication.
Select or create a user flow. The user flow defines the sign-in methods that your external users can use. Each app can only have one user flow, but you can reuse the same user flow for multiple apps.Take one of the following actions:Select a user flow from the dropdown list.SelectCreate new, and then:ForName, enter a name for the user flow.Select the sign-in method for your external users.Email and passwordandEmail and one-time passcodeare already configured in the new tenant. You can also addGoogleorFacebookas identity providers.SelectCreate.
Select or create a user flow. The user flow defines the sign-in methods that your external users can use. Each app can only have one user flow, but you can reuse the same user flow for multiple apps.
Take one of the following actions:
Select a user flow from the dropdown list.
Select a user flow from the dropdown list.
SelectCreate new, and then:ForName, enter a name for the user flow.Select the sign-in method for your external users.Email and passwordandEmail and one-time passcodeare already configured in the new tenant. You can also addGoogleorFacebookas identity providers.SelectCreate.
SelectCreate new, and then:
ForName, enter a name for the user flow.
ForName, enter a name for the user flow.
Select the sign-in method for your external users.Email and passwordandEmail and one-time passcodeare already configured in the new tenant. You can also addGoogleorFacebookas identity providers.
Select the sign-in method for your external users.
Email and passwordandEmail and one-time passcodeare already configured in the new tenant. You can also addGoogleorFacebookas identity providers.
SelectCreate.
SelectCreate.
SelectNextto customize branding.
SelectNextto customize branding.
Add your logo, select a background color, and select a sign-in layout.
Add your logo, select a background color, and select a sign-in layout.
SelectNext, and then selectYes, update the changesto accept the branding changes.
SelectNext, and then selectYes, update the changesto accept the branding changes.
On theReviewtab, selectConfigureto confirm the external tenant update.The browser opens to theAdd an identity providerpage.
On theReviewtab, selectConfigureto confirm the external tenant update.
The browser opens to theAdd an identity providerpage.
Option 2: Use an existing registration created separately
To use an existing registration, selectProvide the details of an existing app registration. Then provide values for:
Application (client) ID
Client secret
Issuer URL
If you need to manually create an app registration in an external tenant, seeRegister an app in your external tenant.
During the registration process, in theRedirect URIssection, selectWebfor platform and enter<app-url>/.auth/login/aad/callback. For example, enterhttps://contoso.azurewebsites.net/.auth/login/aad/callback.
<app-url>/.auth/login/aad/callback
https://contoso.azurewebsites.net/.auth/login/aad/callback
Now, modify the app registration:
On the left pane, selectExpose an API>Add>Save. This value uniquely identifies the application when it's used as a resource, which allows tokens that grant access to be requested. The value is a prefix for scopes that you create.For a single-tenant app, you can use the default value, which is in the formapi://<application-client-id>. You can also specify a more readable URI likehttps://contoso.com/api, based on one of the verified domains for your tenant. For a multitenant app, you must provide a custom URI. For more information about accepted formats for app ID URIs, seeSecurity best practices for application properties in Microsoft Entra ID.
On the left pane, selectExpose an API>Add>Save. This value uniquely identifies the application when it's used as a resource, which allows tokens that grant access to be requested. The value is a prefix for scopes that you create.
For a single-tenant app, you can use the default value, which is in the formapi://<application-client-id>. You can also specify a more readable URI likehttps://contoso.com/api, based on one of the verified domains for your tenant. For a multitenant app, you must provide a custom URI. For more information about accepted formats for app ID URIs, seeSecurity best practices for application properties in Microsoft Entra ID.
api://<application-client-id>
https://contoso.com/api
SelectAdd a scope, and then:InScope name, enteruser_impersonation.InWho can consent, selectAdmins and usersif you want to allow users to consent to this scope.Enter the consent scope name. Then enter a description that you want users to see on the consent page. For example, enterAccessapplication-name.SelectAdd scope.
SelectAdd a scope, and then:
InScope name, enteruser_impersonation.
InWho can consent, selectAdmins and usersif you want to allow users to consent to this scope.
Enter the consent scope name. Then enter a description that you want users to see on the consent page. For example, enterAccessapplication-name.
SelectAdd scope.
(Optional) Create a client secret:On the left pane, selectCertificates & secrets>Client secrets>New client secret.Enter a description and expiration, and then selectAdd.In theValuefield, copy the client secret value. After you move away from this page, it doesn't appear again.
(Optional) Create a client secret:
On the left pane, selectCertificates & secrets>Client secrets>New client secret.
Enter a description and expiration, and then selectAdd.
In theValuefield, copy the client secret value. After you move away from this page, it doesn't appear again.
(Optional) To add multiple reply URLs, selectAuthentication.
(Optional) To add multiple reply URLs, selectAuthentication.
Configure additional checks
Additional checksdetermine which requests are allowed to access your application. You can customize this behavior now, or you can adjust these settings later from the mainAuthenticationpage by selectingEditnext toAuthentication settings.
ForClient application requirement, choose whether to:
Allow requests only from this application itself.
Allow requests from specific client applications.
Allow requests from any application (not recommended).
ForIdentity requirement, choose whether to:
Allow requests from any identity.
Allow requests from specific identities.
ForTenant requirement, choose whether to:
Allow requests only from the issuer tenant.
Allow requests from specific tenants.
Use default restrictions based on the issuer.
Your app might still need to make other authorization decisions in code. For more information, seeUse a built-in authorization policylater in this article.
Configure authentication settings
Authentication settings determine how your application responds to unauthenticated requests. The default selections redirect all requests to sign in with this new provider. You can customize this behavior now, or you can adjust these settings later from the mainAuthenticationpage by selectingEditnext toAuthentication settings. For more information, seeAuthentication flow.
ForRestrict access, decide whether to:
Require authentication.
Allow unauthenticated access.
ForUnauthenticated requests, choose error options:
HTTP302 Found redirect: recommended for websites
302 Found redirect
HTTP401 Unauthorized: recommended for APIs
401 Unauthorized
HTTP403 Forbidden
403 Forbidden
HTTP404 Not found
404 Not found
SelectToken store(recommended). The token store collects, stores, and refreshes tokens for your application. You can disable this behavior later if your app doesn't need tokens or if you need to optimize performance.
Add the identity provider
If you selected workforce configuration, you can selectNext: Permissionsand add any Microsoft Graph permissions that the application needs. These permissions are added to the app registration, but you can also change them later. If you selected external configuration, you can add Microsoft Graph permissions later.
SelectAdd.
You're now ready to use the Microsoft identity platform for authentication in your app. The provider is listed on theAuthenticationpage. From there, you can edit or delete this provider configuration.
For an example of configuring Microsoft Entra sign-in for a web app that accesses Azure Storage and Microsoft Graph, seeAdd app authentication to your web app.
Authorize requests
By default, App Service authentication handles onlyauthentication. It determines whether the caller is who they say they are.Authorization, determining whether that caller should have access to some resource, is a step beyond authentication. For more information, seeAuthorization basics.
Your app canmake authorization decisions in code. App Service authentication provides somebuilt-in checks, which can help, but they alone might not be sufficient to cover the authorization needs of your app. The following sections cover these capabilities.
Tip
Multitenant applications should validate the issuer and tenant ID of the request as part of this process to make sure the values are allowed. When App Service authentication is configured for a multitenant scenario, it doesn't validate which tenant the request comes from. An app might need to be limited to specific tenants, based on whether the organization has signed up for the service (for example). SeeUpdate your code to handle multiple issuer values.
Perform validations from application code
When you perform authorization checks in your app code, you can use the claims information that App Service authentication makes available. For more information, seeAccess user claims in app code.
The injectedx-ms-client-principalheader contains a Base64-encoded JSON object with the claims asserted about the caller. By default, these claims go through a claims mapping, so the claim names might not always match what you would see in the token. For example, thetidclaim is mapped tohttp://schemas.microsoft.com/identity/claims/tenantidinstead.
x-ms-client-principal
tid
http://schemas.microsoft.com/identity/claims/tenantid
You can also work directly with the underlying access token from the injectedx-ms-token-aad-access-tokenheader.
x-ms-token-aad-access-token
Use a built-in authorization policy
The created app registration authenticates incoming requests for your Microsoft Entra tenant. By default, it also lets anyone within the tenant access the application. This approach is fine for many applications. Some applications need to restrict access further by making authorization decisions.
Your application code is often the best place to handle custom authorization logic. However, for common scenarios, the Microsoft identity platform provides built-in checks that you can use to limit access.
This section shows how to enable built-in checks by using theApp Service authentication V2 API. Currently, the only way to configure these built-in checks is by usingAzure Resource Manager templatesor theREST API.
Within the API object, the Microsoft Entra identity provider configuration has avalidationsection that can include adefaultAuthorizationPolicyobject, as shown in the following structure:
validation
defaultAuthorizationPolicy
{
    "validation": {
        "defaultAuthorizationPolicy": {
            "allowedApplications": [],
            "allowedPrincipals": {
                "identities": []
            }
        }
    }
}
{
    "validation": {
        "defaultAuthorizationPolicy": {
            "allowedApplications": [],
            "allowedPrincipals": {
                "identities": []
            }
        }
    }
}
defaultAuthorizationPolicy
AND
allowedApplications
allowedPrincipals
allowedApplications
appid
azp
allowedPrincipals
allowedPrincipals
OR
identities
allowedPrincipals
allowedPrincipals
oid
Also, you can configure some checks through anapplication setting, regardless of the API version that you're using. You can configure theWEBSITE_AUTH_AAD_ALLOWED_TENANTSapplication setting with a comma-separated list of up to 10 tenant IDs; for example,aaaabbbb-0000-cccc-1111-dddd2222eeee. This setting can require that the incoming token is from one of the specified tenants, as specified by thetidclaim.
WEBSITE_AUTH_AAD_ALLOWED_TENANTS
aaaabbbb-0000-cccc-1111-dddd2222eeee
tid
You can configure theWEBSITE_AUTH_AAD_REQUIRE_CLIENT_SERVICE_PRINCIPALapplication setting totrueor1, to require the incoming token to include anoidclaim. If you configuredallowedPrincipals.identities, this setting is ignored and treated as true because theoidclaim is checked against this provided list of identities.
WEBSITE_AUTH_AAD_REQUIRE_CLIENT_SERVICE_PRINCIPAL
true
1
oid
allowedPrincipals.identities
oid
Requests that fail these built-in checks get an HTTP403 Forbiddenresponse.
403 Forbidden
Use a managed identity instead of a secret (preview)
Instead of configuring a client secret for your app registration, you canconfigure an application to trust a managed identity (preview). Using an identity instead of a secret means you don't have to manage a secret. You don't have secret expiration events to handle, and you don't have the same level of risk associated with possibly disclosing or leaking that secret.
The identity allows you to create afederated identity credential, which can be used instead of a client secret as aclient assertion. This approach is available only for workforce configurations. The built-in authentication feature currently supports federated identity credentials as a preview.
You can use the steps in this section to configure your App Service or Azure Functions resource to use this pattern. The steps here assume that you already set up an app registration by using one of the supported methods, and that you have a secret defined already.
Create a user-assigned managed identity resource according tothese instructions.
Create a user-assigned managed identity resource according tothese instructions.
Assign that identityto your App Service or Azure Functions resource.ImportantThe user-assigned managed identity that you create should only be assigned to the App Service or Azure Functions application through this registration. If you assign the identity to another resource, you're giving that resource unnecessary access to your app registration.
Assign that identityto your App Service or Azure Functions resource.
Important
The user-assigned managed identity that you create should only be assigned to the App Service or Azure Functions application through this registration. If you assign the identity to another resource, you're giving that resource unnecessary access to your app registration.
Note down theObject IDandClient IDvalues of the managed identity. You'll need the object ID to create a federated identity credential in the next step. You'll use the managed identity's client ID in a later step.
Note down theObject IDandClient IDvalues of the managed identity. You'll need the object ID to create a federated identity credential in the next step. You'll use the managed identity's client ID in a later step.
Follow the Microsoft Entra IDinstructions to configure a federated identity credential on an existing application. Those instructions also include sections for updating application code, which you can skip.
Follow the Microsoft Entra IDinstructions to configure a federated identity credential on an existing application. Those instructions also include sections for updating application code, which you can skip.
Add a newapplication settingnamedOVERRIDE_USE_MI_FIC_ASSERTION_CLIENTID. Set its value to the managed identity'sClient IDvalue that you obtained in a previous step. Don't use the client ID of your app registration. Make sure to mark this application setting as slot-sticky.
Add a newapplication settingnamedOVERRIDE_USE_MI_FIC_ASSERTION_CLIENTID. Set its value to the managed identity'sClient IDvalue that you obtained in a previous step. Don't use the client ID of your app registration. Make sure to mark this application setting as slot-sticky.
OVERRIDE_USE_MI_FIC_ASSERTION_CLIENTID
In the built-in authentication settings for your app resource, setClient secret setting nametoOVERRIDE_USE_MI_FIC_ASSERTION_CLIENTID.To make this change by using the Azure portal:Go back to your App Service or Azure Functions resource and select theAuthenticationtab.In theIdentity providersection, for theMicrosoftentry, select the icon in theEditcolumn.In theEdit identity providerdialog, open the dropdown list forClient secret setting nameand selectOVERRIDE_USE_MI_FIC_ASSERTION_CLIENTID.SelectSave.To make this change by using the REST API:Set theclientSecretSettingNameproperty toOVERRIDE_USE_MI_FIC_ASSERTION_CLIENTID. You can find this property underproperties>identityProviders>azureActiveDirectory>registration.
In the built-in authentication settings for your app resource, setClient secret setting nametoOVERRIDE_USE_MI_FIC_ASSERTION_CLIENTID.
OVERRIDE_USE_MI_FIC_ASSERTION_CLIENTID
To make this change by using the Azure portal:
Go back to your App Service or Azure Functions resource and select theAuthenticationtab.
In theIdentity providersection, for theMicrosoftentry, select the icon in theEditcolumn.
In theEdit identity providerdialog, open the dropdown list forClient secret setting nameand selectOVERRIDE_USE_MI_FIC_ASSERTION_CLIENTID.
OVERRIDE_USE_MI_FIC_ASSERTION_CLIENTID
SelectSave.
To make this change by using the REST API:
Set theclientSecretSettingNameproperty toOVERRIDE_USE_MI_FIC_ASSERTION_CLIENTID. You can find this property underproperties>identityProviders>azureActiveDirectory>registration.
clientSecretSettingName
OVERRIDE_USE_MI_FIC_ASSERTION_CLIENTID
properties
identityProviders
azureActiveDirectory
registration
Verify that the application works as you expect. You should be able to successfully perform a new sign-in action.
Verify that the application works as you expect. You should be able to successfully perform a new sign-in action.
When you're satisfied with the behavior using a managed identity, remove the existing secret:
Make sure that your app code doesn't take a dependency on the application setting. If it does, follow theinstructions to update your application code to request an access token.
Make sure that your app code doesn't take a dependency on the application setting. If it does, follow theinstructions to update your application code to request an access token.
Remove the application setting that previously held your secret. The name of this application setting is the previousClient secret setting namevalue, before you set it toOVERRIDE_USE_MI_FIC_ASSERTION_CLIENTID.
Remove the application setting that previously held your secret. The name of this application setting is the previousClient secret setting namevalue, before you set it toOVERRIDE_USE_MI_FIC_ASSERTION_CLIENTID.
OVERRIDE_USE_MI_FIC_ASSERTION_CLIENTID
Sign in to theMicrosoft Entra admin centerby using the tenant that contains your app registration. Go to the app registration again.
Sign in to theMicrosoft Entra admin centerby using the tenant that contains your app registration. Go to the app registration again.
UnderCertificates & secrets, selectClient secretsand remove the client secret.
UnderCertificates & secrets, selectClient secretsand remove the client secret.
Your app is now configured to use Microsoft Entra ID authentication without secrets.
Configure client apps to access App Service
In prior sections, you registered your App Service or Azure Functions app to authenticate users. The following sections explain how to register native clients or daemon apps in Microsoft Entra. These clients or apps can request access to APIs exposed by App Service on behalf of users or themselves, such as in an N-tier architecture. If you only want to authenticate users, the steps in the following sections aren't required.
Native client application
You can register native clients to request access to your App Service app's APIs on behalf of a signed-in user:
On the Azure portal menu, selectMicrosoft Entra ID.
On the Azure portal menu, selectMicrosoft Entra ID.
On the left pane, selectManage>App registrations. Then selectNew registration.
On the left pane, selectManage>App registrations. Then selectNew registration.
On theRegister an applicationpane, forName, enter a name for your app registration.
On theRegister an applicationpane, forName, enter a name for your app registration.
InRedirect URI, selectPublic client/native (mobile & desktop)and enter the URL<app-url>/.auth/login/aad/callback. For example, enterhttps://contoso.azurewebsites.net/.auth/login/aad/callback.
InRedirect URI, selectPublic client/native (mobile & desktop)and enter the URL<app-url>/.auth/login/aad/callback. For example, enterhttps://contoso.azurewebsites.net/.auth/login/aad/callback.
<app-url>/.auth/login/aad/callback
https://contoso.azurewebsites.net/.auth/login/aad/callback
SelectRegister.
SelectRegister.
After the app registration is created, copy the value ofApplication (client) ID.NoteFor a Microsoft Store application, use thepackage SIDas the URI instead.
After the app registration is created, copy the value ofApplication (client) ID.
Note
For a Microsoft Store application, use thepackage SIDas the URI instead.
On the left pane, selectManage>API permissions. Then selectAdd a permission>My APIs.
On the left pane, selectManage>API permissions. Then selectAdd a permission>My APIs.
Select the app registration that you created earlier for your App Service app. If you don't see the app registration, be sure to add theuser_impersonationscope in the app registration.
Select the app registration that you created earlier for your App Service app. If you don't see the app registration, be sure to add theuser_impersonationscope in the app registration.
UnderDelegated permissions, selectuser_impersonation, and then selectAdd permissions.
UnderDelegated permissions, selectuser_impersonation, and then selectAdd permissions.
You've now configured a native client application that can request access your App Service app on behalf of a user.
Daemon client application (service-to-service calls)
In an N-tier architecture, your client application can acquire a token to call an App Service or Azure Functions app on behalf of the client app itself, not on behalf of a user. This scenario is useful for non-interactive daemon applications that perform tasks without a logged-in user. It uses the standard OAuth 2.0 client credentials grant. For more information, seeMicrosoft identity platform and the OAuth 2.0 client credentials flow.
On the Azure portal menu, selectMicrosoft Entra ID.
On the Azure portal menu, selectMicrosoft Entra ID.
On the left pane, selectManage>App registrations. Then selectNew registration.
On the left pane, selectManage>App registrations. Then selectNew registration.
On theRegister an applicationpane, forName, enter a name for your app registration.
On theRegister an applicationpane, forName, enter a name for your app registration.
For a daemon application, you don't need a redirect URI, so you can keep theRedirect URIbox empty.
For a daemon application, you don't need a redirect URI, so you can keep theRedirect URIbox empty.
SelectRegister.
SelectRegister.
After the app registration is created, copy the value ofApplication (client) ID.
After the app registration is created, copy the value ofApplication (client) ID.
On the left pane, selectManage>Certificates & secrets. Then selectClient secrets>New client secret.
On the left pane, selectManage>Certificates & secrets. Then selectClient secrets>New client secret.
Enter a description and expiration, and then selectAdd.
Enter a description and expiration, and then selectAdd.
In theValuefield, copy the client secret value. After you move away from this page, it doesn't appear again.
In theValuefield, copy the client secret value. After you move away from this page, it doesn't appear again.
You can nowrequest an access token by using the client ID and client secret. Set theresourceparameter to theApplication ID URIvalue of the target app. The resulting access token can then be presented to the target app via the standardOAuth 2.0 Authorization header. App Service authentication validates and uses the token to indicate that the caller is authenticated. In this case, the caller is an application, not a user.
resource
This approach allowsanyclient application in your Microsoft Entra tenant to request an access token and authenticate to the target app. If you also want to enforce authorization to allow only certain client applications, you must perform extra configuration.
Define an app rolein the manifest of the app registration that represents the App Service or Azure Functions app that you want to protect.
Define an app rolein the manifest of the app registration that represents the App Service or Azure Functions app that you want to protect.
On the app registration that represents the client that needs to be authorized, selectAPI permissions>Add a permission>My APIs.
On the app registration that represents the client that needs to be authorized, selectAPI permissions>Add a permission>My APIs.
Select the app registration that you created earlier. If you don't see the app registration, make sure that youadded an app role.
Select the app registration that you created earlier. If you don't see the app registration, make sure that youadded an app role.
UnderApplication permissions, select the app role that you created earlier. Then selectAdd permissions.
UnderApplication permissions, select the app role that you created earlier. Then selectAdd permissions.
SelectGrant admin consentto authorize the client application to request the permission.Similar to the previous scenario (before you added any roles), you can nowrequest an access tokenfor the same target resource. The access token includes arolesclaim that contains the app roles that were authorized for the client application.
SelectGrant admin consentto authorize the client application to request the permission.
Similar to the previous scenario (before you added any roles), you can nowrequest an access tokenfor the same target resource. The access token includes arolesclaim that contains the app roles that were authorized for the client application.
roles
Within the target App Service or Azure Functions app code, you can now validate that the token has the expected roles. App Service authentication doesn't perform this validation. For more information, seeAccess user claims in app code.
You've now configured a daemon client application that can access your App Service app by using its own identity.
Best practices
Regardless of the configuration that you use to set up authentication, the following best practices keep your tenant and applications more secure:
Configure each App Service app with its own app registration in Microsoft Entra.
Give each App Service app its own permissions and consent.
Avoid permission sharing between environments. Use separate app registrations for separate deployment slots. When you're testing new code, this practice can help prevent problems from affecting the production app.
Migrate to Microsoft Graph
Some older apps might be set up with a dependency onAzure AD Graph, which is deprecated and scheduled for full retirement. For example, your app code might call Azure AD Graph to check group membership as part of an authorization filter in a middleware pipeline. Apps should move toMicrosoft Graph. For more information, seeMigrate your apps from Azure AD Graph to Microsoft Graph.
During this migration, you might need to make some changes to your configuration of App Service authentication. After you add Microsoft Graph permissions to your app registration, you can:
Update theIssuer URLvalue to include the/v2.0suffix if it doesn't already.
Update theIssuer URLvalue to include the/v2.0suffix if it doesn't already.
/v2.0
Remove requests for Azure AD Graph permissions from your sign-in configuration. The properties to change depend onwhich version of the management API you're using:If you're using the V1 API (/authsettings), this setting is in theadditionalLoginParamsarray.If you're using the V2 API (/authsettingsV2), this setting is in theloginParametersarray.You need to remove any reference tohttps://graph.windows.net, for example. This change includes theresourceparameter, which the/v2.0endpoint doesn't support. It also includes any scopes that you specifically request that are from Azure AD Graph.You also need to update the configuration to request the new Microsoft Graph permissions that you set up for the application registration. In many cases, you can use thedefault scopeto simplify this setup. To do so, add a new sign-in parameter:scope=openid profile email https://graph.microsoft.com/.default.
Remove requests for Azure AD Graph permissions from your sign-in configuration. The properties to change depend onwhich version of the management API you're using:
If you're using the V1 API (/authsettings), this setting is in theadditionalLoginParamsarray.
/authsettings
additionalLoginParams
If you're using the V2 API (/authsettingsV2), this setting is in theloginParametersarray.
/authsettingsV2
loginParameters
You need to remove any reference tohttps://graph.windows.net, for example. This change includes theresourceparameter, which the/v2.0endpoint doesn't support. It also includes any scopes that you specifically request that are from Azure AD Graph.
https://graph.windows.net
resource
/v2.0
You also need to update the configuration to request the new Microsoft Graph permissions that you set up for the application registration. In many cases, you can use thedefault scopeto simplify this setup. To do so, add a new sign-in parameter:scope=openid profile email https://graph.microsoft.com/.default.
scope=openid profile email https://graph.microsoft.com/.default
With these changes, when App Service authentication tries to sign in, it no longer requests permissions to Azure AD Graph. Instead, it gets a token for Microsoft Graph. Any use of that token from your application code also needs to be updated, as described inMigrate your apps from Azure AD Graph to Microsoft Graph.
Related content
Authentication and authorization in Azure App Service and Azure Functions
Tutorial: Authenticate and authorize users end to end in Azure App Service
Quickstart: Add app authentication to your web app running on Azure App Service
Feedback
Was this page helpful?
Additional resources