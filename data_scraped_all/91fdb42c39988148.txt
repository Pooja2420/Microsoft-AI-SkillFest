Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Develop and deploy WebJobs using Visual Studio
Article
2022-06-01
14 contributors
In this article
This article explains how to use Visual Studio to deploy a console app project to a web app inAzure App Serviceas anAzure WebJob. For information about how to deploy WebJobs by using theAzure portal, seeRun background tasks with WebJobs in Azure App Service.
You can choose to develop a WebJob that runs as either a.NET Core appor a.NET Framework app. Version 3.x of theAzure WebJobs SDKlets you develop WebJobs that run as either .NET Core apps or .NET Framework apps, while version 2.x supports only the .NET Framework. The way that you deploy a WebJobs project is different for .NET Core projects than for .NET Framework projects.
You can publish multiple WebJobs to a single web app, provided that each WebJob in a web app has a unique name.
WebJobs as .NET Core console apps
With version 3.x of the Azure WebJobs SDK, you can create and publish WebJobs as .NET Core console apps. For step-by-step instructions to create and publish a .NET Core console app to Azure as a WebJob, seeGet started with the Azure WebJobs SDK for event-driven background processing.
Note
.NET Core Web Apps and/or .NET Core WebJobs can't be linked with web projects. If you need to deploy your WebJob with a web app,create your WebJobs as a .NET Framework console app.
Deploy to Azure App Service
Publishing a .NET Core WebJob to Azure App Service from Visual Studio uses the same tooling as publishing an ASP.NET Core app.
InSolution Explorer, right-click the project and selectPublish.
InSolution Explorer, right-click the project and selectPublish.
In thePublishdialog box, selectAzureforTarget, and then selectNext.
In thePublishdialog box, selectAzureforTarget, and then selectNext.
SelectAzure WebJobsforSpecific target, and then selectNext.
SelectAzure WebJobsforSpecific target, and then selectNext.
AboveApp Service instancesselect the plus (+) button toCreate a new Azure WebJob.
AboveApp Service instancesselect the plus (+) button toCreate a new Azure WebJob.
In theApp Service (Windows)dialog box, use the hosting settings in the following table.SettingSuggested valueDescriptionNameGlobally unique nameName that uniquely identifies your new function app.SubscriptionChoose your subscriptionThe Azure subscription to use.Resource groupmyResourceGroupName of the resource group in which to create your function app. ChooseNewto create a new resource group.Hosting PlanApp Service planAnApp Service planspecifies the location, size, and features of the web server farm that hosts your app. You can save money when hosting multiple apps by configuring the web apps to share a single App Service plan. App Service plans define the region, instance size, scale count, and SKU (Free, Shared, Basic, Standard, or Premium). ChooseNewto create a new App Service plan. Free and Basic tiers don't support the Always On option to keep your site running continuously.
In theApp Service (Windows)dialog box, use the hosting settings in the following table.

SelectCreateto create a WebJob and related resources in Azure with these settings and deploy your project code.
SelectCreateto create a WebJob and related resources in Azure with these settings and deploy your project code.
SelectFinishto return to thePublishpage.
SelectFinishto return to thePublishpage.
WebJobs as .NET Framework console apps
If you use Visual Studio to deploy a WebJobs-enabled .NET Framework console app project, it copies runtime files to the appropriate folder in the web app (App_Data/jobs/continuousfor continuous WebJobs andApp_Data/jobs/triggeredfor scheduled or on-demand WebJobs).
Visual Studio adds the following items to a WebJobs-enabled project:
TheMicrosoft.Web.WebJobs.PublishNuGet package.
Awebjob-publish-settings.jsonfile that contains deployment and scheduler settings.

You can add these items to an existing console app project or use a template to create a new WebJobs-enabled console app project.
Deploy a project as a WebJob by itself, or link it to a web project so that it automatically deploys whenever you deploy the web project. To link projects, Visual Studio includes the name of the WebJobs-enabled project in awebjobs-list.jsonfile in the web project.

Prerequisites
Install Visual Studio 2022 with theAzure development workload.
Enable WebJobs deployment for an existing console app project
You have two options:
Enable automatic deployment with a web project.Configure an existing console app project so that it automatically deploys as a WebJob when you deploy a web project. Use this option when you want to run your WebJob in the same web app in which you run the related web application.
Enable automatic deployment with a web project.
Configure an existing console app project so that it automatically deploys as a WebJob when you deploy a web project. Use this option when you want to run your WebJob in the same web app in which you run the related web application.
Enable deployment without a web project.Configure an existing console app project to deploy as a WebJob by itself, without a link to a web project. Use this option when you want to run a WebJob in a web app by itself, with no web application running in the web app. You might want to do so to scale your WebJob resources independently of your web application resources.
Enable deployment without a web project.
Configure an existing console app project to deploy as a WebJob by itself, without a link to a web project. Use this option when you want to run a WebJob in a web app by itself, with no web application running in the web app. You might want to do so to scale your WebJob resources independently of your web application resources.
Right-click the web project inSolution Explorer, and then selectAdd>Existing Project as Azure WebJob.TheAdd Azure WebJobdialog box appears.
Right-click the web project inSolution Explorer, and then selectAdd>Existing Project as Azure WebJob.

TheAdd Azure WebJobdialog box appears.
In theProject namedrop-down list, select the console app project to add as a WebJob.
In theProject namedrop-down list, select the console app project to add as a WebJob.

Complete theAdd Azure WebJobdialog box, and then selectOK.
Complete theAdd Azure WebJobdialog box, and then selectOK.
Right-click the console app project inSolution Explorer, and then selectPublish as Azure WebJob.TheAdd Azure WebJobdialog box appears, with the project selected in theProject namebox.
Right-click the console app project inSolution Explorer, and then selectPublish as Azure WebJob.

TheAdd Azure WebJobdialog box appears, with the project selected in theProject namebox.
Complete theAdd Azure WebJobdialog box, and then selectOK.ThePublish Webwizard appears. If you don't want to publish immediately, close the wizard. The settings that you've entered are saved for when you do want todeploy the project.
Complete theAdd Azure WebJobdialog box, and then selectOK.
ThePublish Webwizard appears. If you don't want to publish immediately, close the wizard. The settings that you've entered are saved for when you do want todeploy the project.
Create a new WebJobs-enabled project
To create a new WebJobs-enabled project, use the console app project template and enable WebJobs deployment as explained inthe previous section. As an alternative, you can use the WebJobs new-project template:
Use the WebJobs new-project template for an independent WebJobCreate a project and configure it to deploy by itself as a WebJob, with no link to a web project. Use this option when you want to run a WebJob in a web app by itself, with no web application running in the web app. You might want to do so to scale your WebJob resources independently of your web application resources.
Use the WebJobs new-project template for an independent WebJob
Create a project and configure it to deploy by itself as a WebJob, with no link to a web project. Use this option when you want to run a WebJob in a web app by itself, with no web application running in the web app. You might want to do so to scale your WebJob resources independently of your web application resources.
Use the WebJobs new-project template for a WebJob linked to a web projectCreate a project that is configured to deploy automatically as a WebJob when you deploy a web project in the same solution. Use this option when you want to run your WebJob in the same web app in which you run the related web application.
Use the WebJobs new-project template for a WebJob linked to a web project
Create a project that is configured to deploy automatically as a WebJob when you deploy a web project in the same solution. Use this option when you want to run your WebJob in the same web app in which you run the related web application.
Note
The WebJobs new-project template automatically installs NuGet packages and includes code inProgram.csfor theWebJobs SDK. If you don't want to use the WebJobs SDK, remove or change thehost.RunAndBlockstatement inProgram.cs.
host.RunAndBlock
SelectFile>New>Project. In theCreate a new projectdialog box, search for and selectAzure WebJob (.NET Framework)for C#.
SelectFile>New>Project. In theCreate a new projectdialog box, search for and selectAzure WebJob (.NET Framework)for C#.
Follow the previous directions tomake the console app project an independent WebJobs project.
Follow the previous directions tomake the console app project an independent WebJobs project.
Right-click the web project inSolution Explorer, and then selectAdd>New Azure WebJob Project.TheAdd Azure WebJobdialog box appears.
Right-click the web project inSolution Explorer, and then selectAdd>New Azure WebJob Project.

TheAdd Azure WebJobdialog box appears.
Complete theAdd Azure WebJobdialog box, and then selectOK.
Complete theAdd Azure WebJobdialog box, and then selectOK.
webjob-publish-settings.json file
When you configure a console app for WebJobs deployment, Visual Studio installs theMicrosoft.Web.WebJobs.PublishNuGet package
and stores scheduling information in awebjob-publish-settings.jsonfile in the projectPropertiesfolder of the WebJobs project. Here is an example of that file:
{
  "$schema": "http://schemastore.org/schemas/json/webjob-publish-settings.json",
  "webJobName": "WebJob1",
  "startTime": "null",
  "endTime": "null",
  "jobRecurrenceFrequency": "null",
  "interval": null,
  "runMode": "Continuous"
}
{
  "$schema": "http://schemastore.org/schemas/json/webjob-publish-settings.json",
  "webJobName": "WebJob1",
  "startTime": "null",
  "endTime": "null",
  "jobRecurrenceFrequency": "null",
  "interval": null,
  "runMode": "Continuous"
}
You can edit this file directly, and Visual Studio provides IntelliSense. The file schema is stored athttps://schemastore.organd can be viewed there.
webjobs-list.json file
When you link a WebJobs-enabled project to a web project, Visual Studio stores the name of the WebJobs project in awebjobs-list.jsonfile in the web project'sPropertiesfolder. The list might contain multiple WebJobs projects, as shown in the following example:
{
  "$schema": "http://schemastore.org/schemas/json/webjobs-list.json",
  "WebJobs": [
    {
      "filePath": "../ConsoleApplication1/ConsoleApplication1.csproj"
    },
    {
      "filePath": "../WebJob1/WebJob1.csproj"
    }
  ]
}
{
  "$schema": "http://schemastore.org/schemas/json/webjobs-list.json",
  "WebJobs": [
    {
      "filePath": "../ConsoleApplication1/ConsoleApplication1.csproj"
    },
    {
      "filePath": "../WebJob1/WebJob1.csproj"
    }
  ]
}
You can edit this file directly in Visual Studio, with IntelliSense. The file schema is stored athttps://schemastore.org.
Deploy a WebJobs project
A WebJobs project that you've linked to a web project deploys automatically with the web project. For information about web project deployment, seeHow-to guides>Deploy the appin the left navigation.
To deploy a WebJobs project by itself, right-click the project inSolution Explorerand selectPublish as Azure WebJob.

For an independent WebJob, the samePublish Webwizard that is used for web projects appears, but with fewer settings available to change.
Add Azure WebJob dialog box
TheAdd Azure WebJobdialog box lets you enter the WebJob name and the run mode setting for your WebJob.

Some of the fields in this dialog box correspond to fields on theAdd WebJobdialog box of the Azure portal. For more information, seeRun background tasks with WebJobs in Azure App Service.
WebJob deployment information:
For information about command-line deployment, seeEnabling Command-line or Continuous Delivery of Azure WebJobs.
For information about command-line deployment, seeEnabling Command-line or Continuous Delivery of Azure WebJobs.
If you deploy a WebJob, and then decide you want to change the type of WebJob and redeploy, delete thewebjobs-publish-settings.jsonfile. Doing so causes Visual Studio to redisplay the publishing options, so you can change the type of WebJob.
If you deploy a WebJob, and then decide you want to change the type of WebJob and redeploy, delete thewebjobs-publish-settings.jsonfile. Doing so causes Visual Studio to redisplay the publishing options, so you can change the type of WebJob.
If you deploy a WebJob and later change the run mode from continuous to non-continuous or vice versa, Visual Studio creates a new WebJob in Azure when you redeploy. If you change other scheduling settings, but leave run mode the same or switch between Scheduled and On Demand, Visual Studio updates the existing job instead of creating a new one.
If you deploy a WebJob and later change the run mode from continuous to non-continuous or vice versa, Visual Studio creates a new WebJob in Azure when you redeploy. If you change other scheduling settings, but leave run mode the same or switch between Scheduled and On Demand, Visual Studio updates the existing job instead of creating a new one.
WebJob types
The type of a WebJob can be eithertriggeredorcontinuous:
Triggered (default): A triggered WebJob starts based on a binding event, on aschedule, or when you trigger it manually (on demand). It runs on a single instance that the web app runs on.
Triggered (default): A triggered WebJob starts based on a binding event, on aschedule, or when you trigger it manually (on demand). It runs on a single instance that the web app runs on.
Continuous: AcontinuousWebJob starts immediately when the WebJob is created. It runs on all web app scaled instances by default but can be configured to run as a single instance viasettings.job.
Continuous: AcontinuousWebJob starts immediately when the WebJob is created. It runs on all web app scaled instances by default but can be configured to run as a single instance viasettings.job.
Note
A web app can time out after 20 minutes of inactivity, and only requests to the actual web app can reset the timer. Viewing the app's configuration in the Azure portal or making requests to the advanced tools site (https://<app_name>.scm.azurewebsites.net) doesn't reset the timer. If you set the web app that hosts your job to run continuously, run on a schedule, or use event-driven triggers, enable theAlways onsetting on your web app's AzureConfigurationpane. TheAlways onsetting helps make sure that these kinds of WebJobs run reliably. This feature is available only in the Basic, Standard, and Premiumpricing tiers.
https://<app_name>.scm.azurewebsites.net
Scheduling a triggered WebJob
When you publish a console app to Azure, Visual Studio sets the type of WebJob toTriggeredby default, and adds a newsettings.jobfile to the project. For triggered WebJob types, you can use this file to set an execution schedule for your WebJob.
Use thesettings.jobfile to set an execution schedule for your WebJob. The following example runs every hour from 9 AM to 5 PM:
{
    "schedule": "0 0 9-17 * * *"
}
{
    "schedule": "0 0 9-17 * * *"
}
This file is located at the root of the WebJobs folder with your WebJob's script, such aswwwroot\app_data\jobs\triggered\{job name}orwwwroot\app_data\jobs\continuous\{job name}. When you deploy a WebJob from Visual Studio, mark yoursettings.jobfile properties in Visual Studio asCopy if newer.
wwwroot\app_data\jobs\triggered\{job name}
wwwroot\app_data\jobs\continuous\{job name}
If youcreate a WebJob from the Azure portal, thesettings.jobfile is created for you.
WebJobs uses the same CRON expressions for scheduling as the timer trigger in Azure Functions. To learn more about CRON support, seeTimer trigger for Azure Functions.
Note
The default time zone used to run CRON expressions is Coordinated Universal Time (UTC). To have your CRON expression run based on another time zone, create an app setting for your function app named WEBSITE_TIME_ZONE. To learn more, seeNCRONTAB time zones.
The following settings are supported by WebJobs:
is_in_place
is_singleton
schedule
stopping_wait_time
Continuous execution
If you enableAlways onin Azure, you can use Visual Studio to change the WebJob to run continuously:
If you haven't already done so,publish the project to Azure.
If you haven't already done so,publish the project to Azure.
InSolution Explorer, right-click the project and selectPublish.
InSolution Explorer, right-click the project and selectPublish.
In theSettingssection, chooseShow all settings.
In theSettingssection, chooseShow all settings.
In theProfile settingsdialog box, chooseContinuousforWebJob Type, and then chooseSave.
In theProfile settingsdialog box, chooseContinuousforWebJob Type, and then chooseSave.

SelectPublishin thePublishtab to republish the WebJob with the updated settings.
SelectPublishin thePublishtab to republish the WebJob with the updated settings.
Next steps
Learn more about the WebJobs SDK
Feedback
Was this page helpful?
Additional resources