Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Quickstart: Create a .NET Framework app with Azure App Configuration
Article
2025-02-12
16 contributors
In this article
There are two ways to incorporate Azure App Configuration into a .NET Framework-based app.
The configuration builder for App Configuration enables data from App Configuration to be loaded to App Settings. Your app accesses configuration as it always does viaConfigurationManager. You don't need to make any code change other than updates toapp.configorweb.configfiles. This quickstart walks you through this option.
ConfigurationManager
As is designed by the .NET Framework, the App Settings can only refresh upon application restart. The App Configuration .NET provider is a .NET Standard library. It supports caching and refreshing configuration dynamically without application restart. If the dynamic configuration is essential to you and you're willing to make code changes, see tutorials on how you can implement dynamic configuration updates in a.NET Framework console appor anASP.NET web app.
In this quickstart, a .NET Framework console app is used as an example, but the same technique applies to an ASP.NET Web Forms/MVC app.
Prerequisites
An Azure account with an active subscription.Create one for free.
An App Configuration store.Create a store.
Visual Studio
.NET Framework 4.7.2 or later
Add a key-value
Add the following key-value to the App Configuration store and leaveLabelandContent Typewith their default values. For more information about how to add key-values to a store using the Azure portal or the CLI, go toCreate a key-value.
Create a .NET Framework console app
Start Visual Studio and selectCreate a new project.
Start Visual Studio and selectCreate a new project.
InCreate a new project, filter on theConsoleproject type and selectConsole App (.NET Framework)with C# from the project template list. PressNext.
InCreate a new project, filter on theConsoleproject type and selectConsole App (.NET Framework)with C# from the project template list. PressNext.
InConfigure your new project, enter a project name. UnderFramework, select.NET Framework 4.7.2or higher. PressCreate.
InConfigure your new project, enter a project name. UnderFramework, select.NET Framework 4.7.2or higher. PressCreate.
Connect to an App Configuration store
Connect to your App Configuration store using Microsoft Entra ID (recommended), or a connection string.
Right-click your project, and selectManage NuGet Packages. On theBrowsetab, search and add the latest stable versions of following NuGet packages to your project.Microsoft.Configuration.ConfigurationBuilders.AzureAppConfigurationMicrosoft.Configuration.ConfigurationBuilders.EnvironmentSystem.Configuration.ConfigurationManager
Right-click your project, and selectManage NuGet Packages. On theBrowsetab, search and add the latest stable versions of following NuGet packages to your project.
Microsoft.Configuration.ConfigurationBuilders.AzureAppConfiguration
Microsoft.Configuration.ConfigurationBuilders.Environment
System.Configuration.ConfigurationManager
Update theApp.configfile of your project as follows. You can connect to your App Configuration store using Microsoft Entra ID (recommended), or a connection string.Microsoft Entra ID (recommended)Connection stringTheDefaultAzureCredentialis used to authenticate to your App Configuration store by default. Follow theinstructionsto assign your credential theApp Configuration Data Readerrole. Be sure to allow sufficient time for the permission to propagate before running your application.<configSections>
    <section name="configBuilders" type="System.Configuration.ConfigurationBuildersSection, System.Configuration, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" restartOnExternalChanges="false" requirePermission="false" />
</configSections>

<configBuilders>
    <builders>
        <add name="MyConfigStore" mode="Greedy" endpoint="${Endpoint}" type="Microsoft.Configuration.ConfigurationBuilders.AzureAppConfigurationBuilder, Microsoft.Configuration.ConfigurationBuilders.AzureAppConfiguration" />
        <add name="Environment" mode="Greedy" type="Microsoft.Configuration.ConfigurationBuilders.EnvironmentConfigBuilder, Microsoft.Configuration.ConfigurationBuilders.Environment" />
    </builders>
</configBuilders>

<appSettings configBuilders="Environment,MyConfigStore">
    <add key="AppName" value="Console App Demo" />
    <add key="Endpoint" value ="Set via an environment variable - for example, dev, test, staging, or production endpoint." />
</appSettings>The endpoint value of your App Configuration store is read from the environment variableEndpoint. You also add theEnvironmentconfiguration builder before theMyConfigStorein theconfigBuildersproperty of theappSettingssection.<configSections>
    <section name="configBuilders" type="System.Configuration.ConfigurationBuildersSection, System.Configuration, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" restartOnExternalChanges="false" requirePermission="false" />
</configSections>

<configBuilders>
    <builders>
        <add name="MyConfigStore" mode="Greedy" connectionString="${ConnectionString}" type="Microsoft.Configuration.ConfigurationBuilders.AzureAppConfigurationBuilder, Microsoft.Configuration.ConfigurationBuilders.AzureAppConfiguration" />
        <add name="Environment" mode="Greedy" type="Microsoft.Configuration.ConfigurationBuilders.EnvironmentConfigBuilder, Microsoft.Configuration.ConfigurationBuilders.Environment" />
    </builders>
</configBuilders>

<appSettings configBuilders="Environment,MyConfigStore">
    <add key="AppName" value="Console App Demo" />
    <add key="ConnectionString" value ="Set via an environment variable - for example, dev, test, staging, or production connection string." />
</appSettings>The connection string of your App Configuration store is read from the environment variableConnectionString. You also add theEnvironmentconfiguration builder before theMyConfigStorein theconfigBuildersproperty of theappSettingssection.
Update theApp.configfile of your project as follows. You can connect to your App Configuration store using Microsoft Entra ID (recommended), or a connection string.
Microsoft Entra ID (recommended)
Connection string
TheDefaultAzureCredentialis used to authenticate to your App Configuration store by default. Follow theinstructionsto assign your credential theApp Configuration Data Readerrole. Be sure to allow sufficient time for the permission to propagate before running your application.
DefaultAzureCredential
<configSections>
    <section name="configBuilders" type="System.Configuration.ConfigurationBuildersSection, System.Configuration, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" restartOnExternalChanges="false" requirePermission="false" />
</configSections>

<configBuilders>
    <builders>
        <add name="MyConfigStore" mode="Greedy" endpoint="${Endpoint}" type="Microsoft.Configuration.ConfigurationBuilders.AzureAppConfigurationBuilder, Microsoft.Configuration.ConfigurationBuilders.AzureAppConfiguration" />
        <add name="Environment" mode="Greedy" type="Microsoft.Configuration.ConfigurationBuilders.EnvironmentConfigBuilder, Microsoft.Configuration.ConfigurationBuilders.Environment" />
    </builders>
</configBuilders>

<appSettings configBuilders="Environment,MyConfigStore">
    <add key="AppName" value="Console App Demo" />
    <add key="Endpoint" value ="Set via an environment variable - for example, dev, test, staging, or production endpoint." />
</appSettings>
<configSections>
    <section name="configBuilders" type="System.Configuration.ConfigurationBuildersSection, System.Configuration, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" restartOnExternalChanges="false" requirePermission="false" />
</configSections>

<configBuilders>
    <builders>
        <add name="MyConfigStore" mode="Greedy" endpoint="${Endpoint}" type="Microsoft.Configuration.ConfigurationBuilders.AzureAppConfigurationBuilder, Microsoft.Configuration.ConfigurationBuilders.AzureAppConfiguration" />
        <add name="Environment" mode="Greedy" type="Microsoft.Configuration.ConfigurationBuilders.EnvironmentConfigBuilder, Microsoft.Configuration.ConfigurationBuilders.Environment" />
    </builders>
</configBuilders>

<appSettings configBuilders="Environment,MyConfigStore">
    <add key="AppName" value="Console App Demo" />
    <add key="Endpoint" value ="Set via an environment variable - for example, dev, test, staging, or production endpoint." />
</appSettings>
The endpoint value of your App Configuration store is read from the environment variableEndpoint. You also add theEnvironmentconfiguration builder before theMyConfigStorein theconfigBuildersproperty of theappSettingssection.
Endpoint
Environment
MyConfigStore
configBuilders
appSettings
<configSections>
    <section name="configBuilders" type="System.Configuration.ConfigurationBuildersSection, System.Configuration, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" restartOnExternalChanges="false" requirePermission="false" />
</configSections>

<configBuilders>
    <builders>
        <add name="MyConfigStore" mode="Greedy" connectionString="${ConnectionString}" type="Microsoft.Configuration.ConfigurationBuilders.AzureAppConfigurationBuilder, Microsoft.Configuration.ConfigurationBuilders.AzureAppConfiguration" />
        <add name="Environment" mode="Greedy" type="Microsoft.Configuration.ConfigurationBuilders.EnvironmentConfigBuilder, Microsoft.Configuration.ConfigurationBuilders.Environment" />
    </builders>
</configBuilders>

<appSettings configBuilders="Environment,MyConfigStore">
    <add key="AppName" value="Console App Demo" />
    <add key="ConnectionString" value ="Set via an environment variable - for example, dev, test, staging, or production connection string." />
</appSettings>
<configSections>
    <section name="configBuilders" type="System.Configuration.ConfigurationBuildersSection, System.Configuration, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" restartOnExternalChanges="false" requirePermission="false" />
</configSections>

<configBuilders>
    <builders>
        <add name="MyConfigStore" mode="Greedy" connectionString="${ConnectionString}" type="Microsoft.Configuration.ConfigurationBuilders.AzureAppConfigurationBuilder, Microsoft.Configuration.ConfigurationBuilders.AzureAppConfiguration" />
        <add name="Environment" mode="Greedy" type="Microsoft.Configuration.ConfigurationBuilders.EnvironmentConfigBuilder, Microsoft.Configuration.ConfigurationBuilders.Environment" />
    </builders>
</configBuilders>

<appSettings configBuilders="Environment,MyConfigStore">
    <add key="AppName" value="Console App Demo" />
    <add key="ConnectionString" value ="Set via an environment variable - for example, dev, test, staging, or production connection string." />
</appSettings>
The connection string of your App Configuration store is read from the environment variableConnectionString. You also add theEnvironmentconfiguration builder before theMyConfigStorein theconfigBuildersproperty of theappSettingssection.
ConnectionString
Environment
MyConfigStore
configBuilders
appSettings
OpenProgram.cs, and update theMainmethod to use App Configuration by callingConfigurationManager.static void Main(string[] args)
{
    string message = System.Configuration.ConfigurationManager.AppSettings["TestApp:Settings:Message"];

    Console.WriteLine(message);
    Console.ReadKey();
}
OpenProgram.cs, and update theMainmethod to use App Configuration by callingConfigurationManager.
Main
ConfigurationManager
static void Main(string[] args)
{
    string message = System.Configuration.ConfigurationManager.AppSettings["TestApp:Settings:Message"];

    Console.WriteLine(message);
    Console.ReadKey();
}
static void Main(string[] args)
{
    string message = System.Configuration.ConfigurationManager.AppSettings["TestApp:Settings:Message"];

    Console.WriteLine(message);
    Console.ReadKey();
}
Build and run the app
Set an environment variable.Microsoft Entra ID (recommended)Connection stringSet an environment variable namedEndpointto the endpoint of your App Configuration store found under theOverviewof your store in the Azure portal.If you use the Windows command prompt, run the following command and restart the command prompt to allow the change to take effect:setx Endpoint "<endpoint-of-your-app-configuration-store>"If you use PowerShell, run the following command:$Env:Endpoint = "<endpoint-of-your-app-configuration-store>"If you use macOS or Linux, run the following command:export Endpoint='<endpoint-of-your-app-configuration-store>'Set an environment variable namedConnectionStringto the read-only connection string of your App Configuration store found underAccess settingsof your store in the Azure portal.If you use the Windows command prompt, run the following command:setx ConnectionString "<connection-string-of-your-app-configuration-store>"If you use Windows PowerShell, run the following command:$Env:ConnectionString = "<connection-string-of-your-app-configuration-store>"If you use macOS or Linux, run the following command:export ConnectionString='<connection-string-of-your-app-configuration-store>'
Set an environment variable.
Microsoft Entra ID (recommended)
Connection string
Set an environment variable namedEndpointto the endpoint of your App Configuration store found under theOverviewof your store in the Azure portal.
If you use the Windows command prompt, run the following command and restart the command prompt to allow the change to take effect:
setx Endpoint "<endpoint-of-your-app-configuration-store>"
setx Endpoint "<endpoint-of-your-app-configuration-store>"
If you use PowerShell, run the following command:
$Env:Endpoint = "<endpoint-of-your-app-configuration-store>"
$Env:Endpoint = "<endpoint-of-your-app-configuration-store>"
If you use macOS or Linux, run the following command:
export Endpoint='<endpoint-of-your-app-configuration-store>'
export Endpoint='<endpoint-of-your-app-configuration-store>'
Set an environment variable namedConnectionStringto the read-only connection string of your App Configuration store found underAccess settingsof your store in the Azure portal.
If you use the Windows command prompt, run the following command:
setx ConnectionString "<connection-string-of-your-app-configuration-store>"
setx ConnectionString "<connection-string-of-your-app-configuration-store>"
If you use Windows PowerShell, run the following command:
$Env:ConnectionString = "<connection-string-of-your-app-configuration-store>"
$Env:ConnectionString = "<connection-string-of-your-app-configuration-store>"
If you use macOS or Linux, run the following command:
export ConnectionString='<connection-string-of-your-app-configuration-store>'
export ConnectionString='<connection-string-of-your-app-configuration-store>'
Restart Visual Studio to allow the change to take effect.
Restart Visual Studio to allow the change to take effect.
Press Ctrl + F5 to build and run the console app. You should see the message from App Configuration outputs in the console.
Press Ctrl + F5 to build and run the console app. You should see the message from App Configuration outputs in the console.
Clean up resources
If you don't want to continue using the resources created in this article, delete the resource group you created here to avoid charges.
Important
Deleting a resource group is irreversible. The resource group and all the resources in it are permanently deleted. Ensure that you don't accidentally delete the wrong resource group or resources. If you created the resources for this article inside a resource group that contains other resources you want to keep, delete each resource individually from its respective pane instead of deleting the resource group.
Sign in to theAzure portal, and selectResource groups.
In theFilter by namebox, enter the name of your resource group.
In the result list, select the resource group name to see an overview.
SelectDelete resource group.
You're asked to confirm the deletion of the resource group. Enter the name of your resource group to confirm, and selectDelete.
After a few moments, the resource group and all its resources are deleted.
Next steps
In this quickstart, you created a new App Configuration store and used it with a .NET Framework console app. To learn how to enable your .NET Framework app to dynamically refresh configuration settings, continue to the next tutorials.
Enable dynamic configuration in a .NET Framework app
Enable dynamic configuration in an ASP.NET web app
Feedback
Was this page helpful?
Additional resources