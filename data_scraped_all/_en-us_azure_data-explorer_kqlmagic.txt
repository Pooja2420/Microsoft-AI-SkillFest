Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Use a Jupyter Notebook and kqlmagic extension to analyze data in Azure Data Explorer
Article
2024-05-28
18 contributors
In this article
Jupyter Notebookis an open-source web application that allows you to create and share documents containing live code, equations, visualizations, and narrative text. It's useful for a wide range of tasks, such as data cleaning and transformation, numerical simulation, statistical modeling, data visualization, and machine learning.
Kqlmagicextends the capabilities of the Python kernel in Jupyter Notebook so you can runKusto Query Language (KQL)queries natively. You can combine Python and KQL to query and visualize data using the rich Plot.ly library integrated with therenderoperator. The kqlmagic extension is compatible with Jupyter Lab, Visual Studio Code Jupyter extension, and Azure Data Studio, and supported data sources include Azure Data Explorer, Azure Monitor logs, and Application Insights.
In this article, you'll learn how to use kqlmagic in a Jupyter Notebook to connect to and query data stored inAzure Data Explorer.
Prerequisites
A Microsoft account or a Microsoft Entra user identity. An Azure subscription isn't required.
Jupyter Notebook installed on your local machine. Otherwise, useAzure Data Studio.
Python 3.6. To change the Jupyter Notebook kernel version to Python 3.6, selectKernel>Change Kernel>Python 3.6.
Install kqlmagic
Once you install and load the kqlmagic extension, you can write KQL queries in your notebook. If the kernel stops or the results aren't as expected, reload the kqlmagic extension.
To install kqlmagic, run the following command:!pip install Kqlmagic --no-cache-dir  --upgrade
To install kqlmagic, run the following command:
!pip install Kqlmagic --no-cache-dir  --upgrade
!pip install Kqlmagic --no-cache-dir  --upgrade
To load the kqlmagic extension, run the following command:%reload_ext Kqlmagic
To load the kqlmagic extension, run the following command:
%reload_ext Kqlmagic
%reload_ext Kqlmagic
Connect to a cluster
Select the tab for your preferred method to connect to your cluster.
Note
We recommend using the Certificate method of authentication when possible.
Certificate
Code
Application key
Username and password
Anonymous
The Microsoft Entra certificate should be stored in a file accessible from the notebook. This file can be referenced in the connection string.
%kql AzureDataExplorer://tenant='<tenant-id>';certificate='<certificate>';certificate_thumbprint='<thumbprint>';cluster='<cluster-name>';database='<database-name>'
%kql AzureDataExplorer://tenant='<tenant-id>';certificate='<certificate>';certificate_thumbprint='<thumbprint>';cluster='<cluster-name>';database='<database-name>'
The Microsoft Entra code method prompts MSAL interactive sign-in. You'll receive a code to enter for authentication.
%kql AzureDataExplorer://code;cluster='<cluster-name>';database='<database-name>'
%kql AzureDataExplorer://code;cluster='<cluster-name>';database='<database-name>'
The Microsoft Entra application method allows for a non-interactive sign-in using a Microsoft Entra application ID and key.
%kql AzureDataExplorer://tenant='<tenant-id>';clientid='<aad-appid>';clientsecret='<aad-appkey>';cluster='<cluster-name>';database='<database-name>'
%kql AzureDataExplorer://tenant='<tenant-id>';clientid='<aad-appid>';clientsecret='<aad-appkey>';cluster='<cluster-name>';database='<database-name>'
The Microsoft Entra username and password method only works on corporate network. If a username is provided without a password, the user is prompted to provide the password.
%kql AzureDataExplorer://username='<username>';password='<password>';cluster='<cluster-name>';database='<database-name>'
%kql AzureDataExplorer://username='<username>';password='<password>';cluster='<cluster-name>';database='<database-name>'
Anonymous authentication is equivalent to no authentication, which is only supported for local clusters.
%kql azureDataExplorer://anonymous;cluster='<cluster-name>';database='<database-name>'
%kql azureDataExplorer://anonymous;cluster='<cluster-name>';database='<database-name>'
Tip
To parameterize the connection string, use unquoted values as they are interpreted as Python expressions.
To simplify the process of getting credentials, seeConnection options.
Example of cluster connection
The following command uses the Microsoft Entra code method to authenticate to theSamplesdatabase hosted on thehelpcluster. For non-Microsoft Entra users, replace the tenant nameMicrosoft.comwith your Microsoft Entra tenant.
Samples
help
Microsoft.com
%kql AzureDataExplorer://tenant="Microsoft.com";code;cluster='help';database='Samples'
%kql AzureDataExplorer://tenant="Microsoft.com";code;cluster='help';database='Samples'
Connection options
To simplify the process of getting credentials, you can add one of the following option flags after the connection string.
-try_azcli_login
-try_azcli_login_subscription=<subscription_id>
-try_vscode_login
resource
client_id
object_id
mis_res_id
cloud_environment
timeout
-try_msi={"client_id":<id>}
-try_token={"tokenType":"bearer","accessToken":"<token>"}
Example of connection option
Any of the options described in the previous table can be added after a connection string. The following example uses the Azure CLI sign-in option:
%kql azureDataExplorer://code;cluster='help';database='Samples' -try_azcli_login
%kql azureDataExplorer://code;cluster='help';database='Samples' -try_azcli_login
Display connection information
To see all existing connections, run the following command:
%kql --conn
%kql --conn
To check the details of a specific connection, run the following command:
%kql --conn <database-name>@<cluster-name>
%kql --conn <database-name>@<cluster-name>
Query and visualize
Query data using therender operatorand visualize data using the ploy.ly library. This query and visualization supplies an integrated experience that uses native KQL. Kqlmagic supports most charts excepttimepivot,pivotchart, andladderchart. Render is supported with all attributes exceptkind,ysplit, andaccumulate.
timepivot
pivotchart
ladderchart
kind
ysplit
accumulate
Query and render piechart
%%kql
StormEvents
| summarize statecount=count() by State
| sort by statecount 
| take 10
| render piechart title="My Pie Chart by State"
%%kql
StormEvents
| summarize statecount=count() by State
| sort by statecount 
| take 10
| render piechart title="My Pie Chart by State"
Query and render timechart
%%kql
StormEvents
| summarize count() by bin(StartTime,7d)
| render timechart
%%kql
StormEvents
| summarize count() by bin(StartTime,7d)
| render timechart
Note
These charts are interactive. Select a time range to zoom into a specific time.
Customize the chart colors
If you don't like the default color palette, customize the charts using palette options. The available palettes can be found here:Choose colors palette for your kqlmagic query chart result
For a list of palettes:%kql --palettes -popup_window
For a list of palettes:
%kql --palettes -popup_window
%kql --palettes -popup_window
Select thecoolcolor palette and render the query again:%%kql -palette_name "cool"
StormEvents
| summarize statecount=count() by State
| sort by statecount
| take 10
| render piechart title="My Pie Chart by State"
Select thecoolcolor palette and render the query again:
cool
%%kql -palette_name "cool"
StormEvents
| summarize statecount=count() by State
| sort by statecount
| take 10
| render piechart title="My Pie Chart by State"
%%kql -palette_name "cool"
StormEvents
| summarize statecount=count() by State
| sort by statecount
| take 10
| render piechart title="My Pie Chart by State"
Parameterize a query with Python
Kqlmagic allows for simple interchange between Kusto Query Language and Python. To learn more:Parameterize your kqlmagic query with Python
Use a Python variable in your KQL query
You can use the value of a Python variable in your query to filter the data:
statefilter = ["TEXAS", "KANSAS"]
statefilter = ["TEXAS", "KANSAS"]
%%kql
let _state = statefilter;
StormEvents 
| where State in (_state) 
| summarize statecount=count() by bin(StartTime,1d), State
| render timechart title = "Trend"
%%kql
let _state = statefilter;
StormEvents 
| where State in (_state) 
| summarize statecount=count() by bin(StartTime,1d), State
| render timechart title = "Trend"
Convert query results to Pandas DataFrame
You can access the results of a KQL query in Pandas DataFrame. Access the last executed query results by variable_kql_raw_result_and easily convert the results into Pandas DataFrame as follows:
_kql_raw_result_
df = _kql_raw_result_.to_dataframe()
df.head(10)
df = _kql_raw_result_.to_dataframe()
df.head(10)
Example
In many analytics scenarios, you may want to create reusable notebooks that contain many queries and feed the results from one query into subsequent queries. The example below uses the Python variablestatefilterto filter the data.
statefilter
Run a query to view the top 10 states with maximumDamageProperty:%%kql
StormEvents
| summarize max(DamageProperty) by State
| order by max_DamageProperty desc
| take 10
Run a query to view the top 10 states with maximumDamageProperty:
DamageProperty
%%kql
StormEvents
| summarize max(DamageProperty) by State
| order by max_DamageProperty desc
| take 10
%%kql
StormEvents
| summarize max(DamageProperty) by State
| order by max_DamageProperty desc
| take 10
Run a query to extract the top state and set it into a Python variable:df = _kql_raw_result_.to_dataframe()
statefilter =df.loc[0].State
statefilter
Run a query to extract the top state and set it into a Python variable:
df = _kql_raw_result_.to_dataframe()
statefilter =df.loc[0].State
statefilter
df = _kql_raw_result_.to_dataframe()
statefilter =df.loc[0].State
statefilter
Run a query using theletstatement and the Python variable:%%kql
let _state = statefilter;
StormEvents 
| where State in (_state)
| summarize statecount=count() by bin(StartTime,1d), State
| render timechart title = "Trend"
Run a query using theletstatement and the Python variable:
let
%%kql
let _state = statefilter;
StormEvents 
| where State in (_state)
| summarize statecount=count() by bin(StartTime,1d), State
| render timechart title = "Trend"
%%kql
let _state = statefilter;
StormEvents 
| where State in (_state)
| summarize statecount=count() by bin(StartTime,1d), State
| render timechart title = "Trend"
Run the help command:%kql --help "help"
Run the help command:
%kql --help "help"
%kql --help "help"
Tip
To receive information about all available configurations use%config Kqlmagic. To troubleshoot and capture Kusto errors, such as connection issues and incorrect queries, use%config Kqlmagic.short_errors=False
%config Kqlmagic
%config Kqlmagic.short_errors=False
Sample notebooks
Get started with kqlmagic for Azure Data Explorer
Get started with kqlmagic for Application Insights
Get started with kqlmagic for Azure Monitor logs
Parametrize your kqlmagic query with Python
Choose colors palette for your kqlmagic query chart result
Related content
LearnKusto Query Language (KQL)
Feedback
Was this page helpful?
Additional resources