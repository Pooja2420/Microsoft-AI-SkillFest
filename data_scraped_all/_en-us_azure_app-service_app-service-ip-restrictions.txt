Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Set up Azure App Service access restrictions
Article
2025-03-31
26 contributors
In this article

Note
Starting June 1, 2024, newly created App Service apps can generate a unique default host name that uses the naming convention<app-name>-<random-hash>.<region>.azurewebsites.net. For example:myapp-ds27dh7271aah175.westus-01.azurewebsites.net. Existing app names remain unchanged.
<app-name>-<random-hash>.<region>.azurewebsites.net
myapp-ds27dh7271aah175.westus-01.azurewebsites.net
For more information, see theblog post about creating a web app with a unique default host name.
When you set up access restrictions, you can define a priority-ordered allow/deny list that controls network access to your app. The list can include IP addresses or Azure Virtual Network subnets. When there are one or more entries, an implicitdeny allexists at the end of the list. For more information, seeAzure App Service access restrictions.
The access restriction capability works with all Azure App Service-hosted workloads. The workloads can include web apps, API apps, Linux apps, Linux custom containers, and Azure Functions apps.
When someone makes a request to your app, theFROMaddress is evaluated against the rules in your access restriction list. If theFROMaddress is in a subnet configured with service endpoints toMicrosoft.Web, the source subnet is compared against the virtual network rules in your access restriction list. If the address isn't allowed access based on the rules in the list, the service replies with an HTTP 403 status code.
FROM
FROM
Microsoft.Web
The access restriction capability is implemented in the App Service front-end roles, which are upstream of the worker hosts where your code runs. Therefore, access restrictions are effectively network access-control lists.
The ability to restrict access to your web app from an Azure virtual network usesservice endpoints. With service endpoints, you can restrict access to a multitenant service from selected subnets. It doesn't work to restrict traffic to apps that are hosted in an App Service Environment. If you're in an App Service Environment, you can control access to your app by applying IP address rules.
Note
The service endpoints must be enabled both on the networking side and for the Azure service with which they're being enabled. For a list of Azure services that support service endpoints, seeVirtual Network service endpoints.

Manage access restriction rules in the portal
To add an access restriction rule to your app:
Sign in to the Azure portal.
Sign in to the Azure portal.
Select the app that you want to add access restrictions to.
Select the app that you want to add access restrictions to.
On the left menu, selectSettings>Networking.
On the left menu, selectSettings>Networking.
On theNetworkingpane, underInbound traffic configuration, select thePublic network accesssetting.
On theNetworkingpane, underInbound traffic configuration, select thePublic network accesssetting.

On theAccess Restrictionspane, review the list of access restriction rules that are defined for your app.The list displays the restrictions that are currently applied to the app. If you have a virtual network restriction on your app, the table shows whether the service endpoints are enabled forMicrosoft.Web. If no restrictions are defined on your app and your unmatched rule isn't set toDeny, the app is accessible from anywhere.
On theAccess Restrictionspane, review the list of access restriction rules that are defined for your app.

The list displays the restrictions that are currently applied to the app. If you have a virtual network restriction on your app, the table shows whether the service endpoints are enabled forMicrosoft.Web. If no restrictions are defined on your app and your unmatched rule isn't set toDeny, the app is accessible from anywhere.
Microsoft.Web
Permissions
You must have the following role-based access control permissions on the subnet or at a higher level to configure access restrictions through Azure portal, CLI, or when you set thesite configproperties directly:
site config
Microsoft.Web/sites/config/read
Microsoft.Web/sites/config/write
Microsoft.Network/virtualNetworks/subnets/joinViaServiceEndpoint/action
Microsoft.Web/sites/write
*Only required when adding a virtual network (service endpoint) rule
**Only required if you're updating access restrictions through the Azure portal
If you add a service endpoint-based rule and the virtual network is in a different subscription than the app, ensure that the subscription with the virtual network is registered for theMicrosoft.Webresource provider. You can explicitly register the provider, but it's also automatically registered when you create the first web app in a subscription. For more information, seeRegister resource provider.
Microsoft.Web
Add an access restriction rule
To add an access restriction rule to your app, on theAccess Restrictionspane, selectAdd. The rule is effective only after you save it.
Rules are enforced in priority order, from the lowest number in thePrioritycolumn. If you don't configure unmatched rule, an implicitdeny allis in effect when you add one rule.
On theAdd Access Restrictionpane, when you create a rule, do the following:
UnderAction, select eitherAlloworDeny.
Enter a name and description of the rule (optional).
In thePrioritybox, enter a priority value.
In theTypedropdown list, select the type of rule. The different types of rules are described in the following sections.
Type in the rule-specific input. SelectAdd ruleto add the rule to the list.
SelectSaveon theAccess Restrictionspane.
Note
There's a limit of 512 access restriction rules. If you require more than 512 access restriction rules, we suggest that you consider a standalone security product. Consider Azure Front Door, Azure Application Gateway, or a different web application firewall (WAF).
Follow the procedure as outlined in the preceding section, but with the following addition:
For step 4, in theTypedropdown list, select IPv4 or IPv6.
SpecifyIP Address Blockin the Classless Inter-Domain Routing (CIDR) notation for both the IPv4 and IPv6 addresses. To specify an address, you can use something like1.2.3.4/32, where the first four octets represent your IP address and/32is the mask. The IPv4 CIDR notation for all addresses is0.0.0.0/0.
1.2.3.4/32
/32
0.0.0.0/0
Note
IP-based access restriction rules only handle virtual network address ranges when your app is in an App Service Environment. If your app is in the multitenant service, you need to use service endpoints to restrict traffic to select subnets in your virtual network.
For step 4, in theTypedropdown list, selectVirtual Network.
For step 4, in theTypedropdown list, selectVirtual Network.

Specify theSubscription,Virtual Network, andSubnetdropdown lists, matching what you want to restrict access to.
By using service endpoints, you can restrict access to selected Azure virtual network subnets. If service endpoints aren't already enabled withMicrosoft.Webfor the subnet that you select, they're automatically enabled unless you selectIgnore missing Microsoft.Web service endpoints. Whether you might want to enable service endpoints on the app but not the subnet depends on if you have the permissions to enable them on the subnet.
Microsoft.Web
If you need someone else to enable service endpoints on the subnet, selectIgnore missing Microsoft.Web service endpoints. Your app is configured for service endpoints. They can later be enabled on the subnet.
You can't use service endpoints to restrict access to apps that run in an App Service Environment. When your app is in an App Service Environment, you can control access to it by applying IP access rules.
With service endpoints, you can configure your app by using application gateways or other web application firewall (WAF) devices. You can also configure multi-tier applications with secure back ends. For more information, seeApp Service networking featuresandApplication Gateway integration.
Note
Service endpoints aren't supported for web apps that use IP-based TLS/SSL bindings with a virtual IP.
For step 4, in theTypedropdown list, selectService Tag.
For step 4, in theTypedropdown list, selectService Tag.

All publicly available service tags are supported in access restriction rules. Each service tag represents a list of IP ranges from Azure services. A list of these services and links to the specific ranges can be found in theservice tag documentation. Use Azure Resource Manager templates or scripting to configure more advanced rules like regional scoped rules.
Note
When you create service tag-based rules through Azure portal or the Azure CLI, you need read access at the subscription level to get the full list of service tags for selection/validation. In addition, theMicrosoft.Networkresource provider needs to be registered on the subscription.
Microsoft.Network
Edit a rule
To edit an existing access restriction rule, go to theAccess Restrictionspane and select the rule you want to edit.
To edit an existing access restriction rule, go to theAccess Restrictionspane and select the rule you want to edit.
On theEdit Access Restrictionpane, make your changes, and then selectUpdate rule.
On theEdit Access Restrictionpane, make your changes, and then selectUpdate rule.
SelectSaveto save the changes.NoteWhen you edit a rule, you can't switch between rule types.
SelectSaveto save the changes.
Note
When you edit a rule, you can't switch between rule types.
Delete a rule
To delete a rule, on theAccess Restrictionspane, select the rule or rules that you want to delete, and then selectDelete.
To delete a rule, on theAccess Restrictionspane, select the rule or rules that you want to delete, and then selectDelete.
SelectSaveto save the changes.
SelectSaveto save the changes.

Access restriction advanced scenarios
The following sections describe using access restrictions in advanced scenarios.
Filter by HTTP header
You can add HTTP header filters to any rule. The following HTTP header names are supported:
X-Forwarded-For
X-Forwarded-For
X-Forwarded-Host
X-Forwarded-Host
X-Azure-FDID
X-Azure-FDID
X-FD-HealthProbe
X-FD-HealthProbe
For each header name, you can add up to eight values separated by commas. The HTTP header filters are evaluated after the rule itself and both conditions must be true for the rule to apply.
Multi-source rules
Multi-source rules allow you to combine up to eight IP ranges or eight service tags in a single rule. Use multi-source rules if you have more than 512 IP ranges or if you want to create logical rules. For example: a logical rule could include multiple IP ranges combined with a single HTTP header filter.
Multi-source rules are defined the same way as single-source rules, but each range is separated with a comma.
PowerShell example:
Add-AzWebAppAccessRestrictionRule -ResourceGroupName "ResourceGroup" -WebAppName "AppName" `
  -Name "Multi-source rule" -IpAddress "192.168.1.0/24,192.168.10.0/24,192.168.100.0/24" `
  -Priority 100 -Action Allow
Add-AzWebAppAccessRestrictionRule -ResourceGroupName "ResourceGroup" -WebAppName "AppName" `
  -Name "Multi-source rule" -IpAddress "192.168.1.0/24,192.168.10.0/24,192.168.100.0/24" `
  -Priority 100 -Action Allow
Block a single IP address
If you want to explicitly block a single IP address or a block of IP addresses, but allow access to everything else, you can add aDenyrule for the specific IP address. Then configure the unmatched rule action toAllow.

Restrict access to an SCM site
In addition to being able to control access to your app, you can restrict access to the source control management (SCM) advanced tool site used by your app. The SCM site is both the web deploy endpoint and the Kudu console. You can assign access restrictions to the SCM site from the app separately or use the same set of restrictions for both the app and the SCM site. When you selectUse main site rules, the rules list is hidden. The SCM site uses the rules from the main site. If you unselect the checkbox, your SCM site settings appear again.

Restrict access to a specific Azure Front Door instance
Traffic from Azure Front Door to your application originates from a well known set of IP ranges defined in theAzureFrontDoor.Backendservice tag. By using a service tag restriction rule, you can restrict traffic to only originate from Azure Front Door. To ensure traffic only originates from your specific instance, you need to further filter the incoming requests based on the unique HTTP header that Azure Front Door sends.
AzureFrontDoor.Backend

PowerShell example:
$afd = Get-AzFrontDoor -Name "MyFrontDoorInstanceName"
Add-AzWebAppAccessRestrictionRule -ResourceGroupName "ResourceGroup" -WebAppName "AppName" `
  -Name "Front Door example rule" -Priority 100 -Action Allow -ServiceTag AzureFrontDoor.Backend `
  -HttpHeader @{'x-azure-fdid' = $afd.FrontDoorId}
$afd = Get-AzFrontDoor -Name "MyFrontDoorInstanceName"
Add-AzWebAppAccessRestrictionRule -ResourceGroupName "ResourceGroup" -WebAppName "AppName" `
  -Name "Front Door example rule" -Priority 100 -Action Allow -ServiceTag AzureFrontDoor.Backend `
  -HttpHeader @{'x-azure-fdid' = $afd.FrontDoorId}
Manage access restriction programmatically
You can also manage access restriction programmatically. The following examples show how to add rules to access restrictions and how to changeUnmatched rule actionfor bothMain siteandAdvanced tool site.
Add access restrictions rules for main site
You can add access restrictions rules forMain siteprogrammatically by choosing one of the following options:
Azure CLI
PowerShell
Azure Resource Manager
Bicep
You can run the following command inAzure Cloud Shell. For more information about the command, seeaz webapp config access-restriction.
az webapp config access-restriction
az webapp config access-restriction add --resource-group ResourceGroup --name AppName \
  --rule-name 'IP example rule' --action Allow --ip-address 122.133.144.0/24 --priority 100

az webapp config access-restriction add --resource-group ResourceGroup --name AppName \
  --rule-name "Azure Front Door example" --action Allow --priority 200 --service-tag AzureFrontDoor.Backend \
  --http-header x-azure-fdid=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
az webapp config access-restriction add --resource-group ResourceGroup --name AppName \
  --rule-name 'IP example rule' --action Allow --ip-address 122.133.144.0/24 --priority 100

az webapp config access-restriction add --resource-group ResourceGroup --name AppName \
  --rule-name "Azure Front Door example" --action Allow --priority 200 --service-tag AzureFrontDoor.Backend \
  --http-header x-azure-fdid=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
You can run the following command inAzure Cloud Shell. For more information about the command, seeAdd-AzWebAppAccessRestrictionRule.
Add-AzWebAppAccessRestrictionRule
Add-AzWebAppAccessRestrictionRule -ResourceGroupName "ResourceGroup" -WebAppName "AppName"
    -Name "Ip example rule" -Priority 100 -Action Allow -IpAddress 122.133.144.0/24

Add-AzWebAppAccessRestrictionRule -ResourceGroupName "ResourceGroup" -WebAppName "AppName"
    -Name "Azure Front Door example" -Priority 200 -Action Allow -ServiceTag AzureFrontDoor.Backend 
    -HttpHeader @{'x-azure-fdid'='xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx'}
Add-AzWebAppAccessRestrictionRule -ResourceGroupName "ResourceGroup" -WebAppName "AppName"
    -Name "Ip example rule" -Priority 100 -Action Allow -IpAddress 122.133.144.0/24

Add-AzWebAppAccessRestrictionRule -ResourceGroupName "ResourceGroup" -WebAppName "AppName"
    -Name "Azure Front Door example" -Priority 200 -Action Allow -ServiceTag AzureFrontDoor.Backend 
    -HttpHeader @{'x-azure-fdid'='xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx'}
For Azure Resource Manager templates (ARM templates), modify theipSecurityRestrictionsblock. A sample ARM template snippet is provided for you.
ipSecurityRestrictions
{
    "type": "Microsoft.Web/sites",
    "apiVersion": "2020-06-01",
    "name": "[parameters('name')]",
    "location": "[parameters('location')]",
    "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanPortalName'))]"
    ],
    "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanPortalName'))]",
        "siteConfig": {
            "linuxFxVersion": "[parameters('linuxFxVersion')]",
            "ipSecurityRestrictions": [
                {
                    "ipAddress": "122.133.144.0/24",
                    "action": "Allow",
                    "priority": 100,
                    "name": "IP example rule"
                },
                {
                    "ipAddress": "AzureFrontDoor.Backend",
                    "tag": "ServiceTag",
                    "action": "Allow",
                    "priority": 200,
                    "name": "Azure Front Door example",
                    "headers": {
                        "x-azure-fdid": [
                        "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                        ]
                    }
                }
            ]
        }
    }
}
{
    "type": "Microsoft.Web/sites",
    "apiVersion": "2020-06-01",
    "name": "[parameters('name')]",
    "location": "[parameters('location')]",
    "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanPortalName'))]"
    ],
    "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanPortalName'))]",
        "siteConfig": {
            "linuxFxVersion": "[parameters('linuxFxVersion')]",
            "ipSecurityRestrictions": [
                {
                    "ipAddress": "122.133.144.0/24",
                    "action": "Allow",
                    "priority": 100,
                    "name": "IP example rule"
                },
                {
                    "ipAddress": "AzureFrontDoor.Backend",
                    "tag": "ServiceTag",
                    "action": "Allow",
                    "priority": 200,
                    "name": "Azure Front Door example",
                    "headers": {
                        "x-azure-fdid": [
                        "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                        ]
                    }
                }
            ]
        }
    }
}
For Bicep, modify theipSecurityRestrictionsblock. A sample Bicep snippet is provided for you.
ipSecurityRestrictions
resource appService 'Microsoft.Web/sites@2020-06-01' = {
  name: webSiteName
  location: location
  properties: {
    serverFarmId: appServicePlan.id
    siteConfig: {
      ftpsState: ftpsState
      alwaysOn: alwaysOn
      linuxFxVersion: linuxFxVersion
      ipSecurityRestrictions: [
        {
          ipAddress: '122.133.144.0/24'
          action: 'Allow'
          priority: 100
          name: 'IP example rule'
        }
        {
          ipAddress: 'AzureFrontDoor.Backend'
          tag: 'ServiceTag'
          action: 'Allow'
          priority: 100
          name: 'Azure Front Door example'
          headers: {
            'x-azure-fdid': [
              'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx'
            ]
          }
        }
      ]
    }
  }
}
resource appService 'Microsoft.Web/sites@2020-06-01' = {
  name: webSiteName
  location: location
  properties: {
    serverFarmId: appServicePlan.id
    siteConfig: {
      ftpsState: ftpsState
      alwaysOn: alwaysOn
      linuxFxVersion: linuxFxVersion
      ipSecurityRestrictions: [
        {
          ipAddress: '122.133.144.0/24'
          action: 'Allow'
          priority: 100
          name: 'IP example rule'
        }
        {
          ipAddress: 'AzureFrontDoor.Backend'
          tag: 'ServiceTag'
          action: 'Allow'
          priority: 100
          name: 'Azure Front Door example'
          headers: {
            'x-azure-fdid': [
              'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx'
            ]
          }
        }
      ]
    }
  }
}
Add access restrictions rules for advanced tool site
You can add access restrictions rules forAdvanced tool siteprogrammatically. Choose one of the following options:
Azure CLI
PowerShell
Azure Resource Manager
Bicep
You can run the following command inCloud Shell. For more information about the command, seeaz webapp config access-restriction.
az webapp config access-restriction
az webapp config access-restriction add --resource-group ResourceGroup --name AppName \
  --rule-name 'IP example rule' --action Allow --ip-address 122.133.144.0/24 --priority 100 --scm-site true
az webapp config access-restriction add --resource-group ResourceGroup --name AppName \
  --rule-name 'IP example rule' --action Allow --ip-address 122.133.144.0/24 --priority 100 --scm-site true
You can run the following command inCloud Shell. For more information about the command, seeAdd-AzWebAppAccessRestrictionRule.
Add-AzWebAppAccessRestrictionRule -ResourceGroupName "ResourceGroup" -WebAppName "AppName"
    -Name "Ip example rule" -Priority 100 -Action Allow -IpAddress 122.133.144.0/24 -TargetScmSite
Add-AzWebAppAccessRestrictionRule -ResourceGroupName "ResourceGroup" -WebAppName "AppName"
    -Name "Ip example rule" -Priority 100 -Action Allow -IpAddress 122.133.144.0/24 -TargetScmSite
For ARM templates, modify thescmIpSecurityRestrictionsblock. A sample ARM template snippet is provided for you.
scmIpSecurityRestrictions
{
    "type": "Microsoft.Web/sites",
    "apiVersion": "2020-06-01",
    "name": "[parameters('name')]",
    "location": "[parameters('location')]",
    "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanPortalName'))]"
    ],
    "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanPortalName'))]",
        "siteConfig": {
            "linuxFxVersion": "[parameters('linuxFxVersion')]",
            "scmIpSecurityRestrictions": [
                {
                    "ipAddress": "122.133.144.0/24",
                    "action": "Allow",
                    "priority": 100,
                    "name": "IP example rule"
                }
            ]
        }
    }
}
{
    "type": "Microsoft.Web/sites",
    "apiVersion": "2020-06-01",
    "name": "[parameters('name')]",
    "location": "[parameters('location')]",
    "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanPortalName'))]"
    ],
    "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanPortalName'))]",
        "siteConfig": {
            "linuxFxVersion": "[parameters('linuxFxVersion')]",
            "scmIpSecurityRestrictions": [
                {
                    "ipAddress": "122.133.144.0/24",
                    "action": "Allow",
                    "priority": 100,
                    "name": "IP example rule"
                }
            ]
        }
    }
}
For Bicep, modify thescmIpSecurityRestrictionsblock. A sample Bicep snippet is provided for you.
scmIpSecurityRestrictions
resource appService 'Microsoft.Web/sites@2020-06-01' = {
  name: webSiteName
  location: location
  properties: {
    serverFarmId: appServicePlan.id
    siteConfig: {
      ftpsState: ftpsState
      alwaysOn: alwaysOn
      linuxFxVersion: linuxFxVersion
      scmIpSecurityRestrictions: [
        {
          ipAddress: '122.133.144.0/24'
          action: 'Allow'
          priority: 100
          name: 'IP example rule'
        }
      ]
    }
  }
}
resource appService 'Microsoft.Web/sites@2020-06-01' = {
  name: webSiteName
  location: location
  properties: {
    serverFarmId: appServicePlan.id
    siteConfig: {
      ftpsState: ftpsState
      alwaysOn: alwaysOn
      linuxFxVersion: linuxFxVersion
      scmIpSecurityRestrictions: [
        {
          ipAddress: '122.133.144.0/24'
          action: 'Allow'
          priority: 100
          name: 'IP example rule'
        }
      ]
    }
  }
}
Change unmatched rule action for main site
You can changeUnmatched rule actionforMain siteprogrammatically by choosing one of the following options:
Azure CLI
PowerShell
Azure Resource Manager
Bicep
You can run the following command inCloud Shell. For more information about the command, seeaz resource. Accepted values foripSecurityRestrictionsDefaultActionareAlloworDeny.
az resource
ipSecurityRestrictionsDefaultAction
Allow
Deny
az resource update --resource-group ResourceGroup --name AppName --resource-type "Microsoft.Web/sites" \
  --set properties.siteConfig.ipSecurityRestrictionsDefaultAction=Allow
az resource update --resource-group ResourceGroup --name AppName --resource-type "Microsoft.Web/sites" \
  --set properties.siteConfig.ipSecurityRestrictionsDefaultAction=Allow
You can run the following command inCloud Shell. For more information about the command, seeSet-AzResource. Accepted values foripSecurityRestrictionsDefaultActionareAlloworDeny.
Set-AzResource
ipSecurityRestrictionsDefaultAction
Allow
Deny
$Resource = Get-AzResource -ResourceType Microsoft.Web/sites -ResourceGroupName ResourceGroup -ResourceName AppName
$Resource.Properties.siteConfig.ipSecurityRestrictionsDefaultAction = "Allow"
$Resource | Set-AzResource -Force
$Resource = Get-AzResource -ResourceType Microsoft.Web/sites -ResourceGroupName ResourceGroup -ResourceName AppName
$Resource.Properties.siteConfig.ipSecurityRestrictionsDefaultAction = "Allow"
$Resource | Set-AzResource -Force
For ARM templates, modify the propertyipSecurityRestrictionsDefaultAction. Accepted values foripSecurityRestrictionsDefaultActionareAlloworDeny. A sample ARM template snippet is provided for you.
ipSecurityRestrictionsDefaultAction
ipSecurityRestrictionsDefaultAction
Allow
Deny
{
    "type": "Microsoft.Web/sites",
    "apiVersion": "2020-06-01",
    "name": "[parameters('name')]",
    "location": "[parameters('location')]",
    "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanPortalName'))]"
    ],
    "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanPortalName'))]",
        "siteConfig": {
            "linuxFxVersion": "[parameters('linuxFxVersion')]",
            "ipSecurityRestrictionsDefaultAction": "[parameters('ipSecurityRestrictionsDefaultAction')]"
        }
    }
}
{
    "type": "Microsoft.Web/sites",
    "apiVersion": "2020-06-01",
    "name": "[parameters('name')]",
    "location": "[parameters('location')]",
    "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanPortalName'))]"
    ],
    "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanPortalName'))]",
        "siteConfig": {
            "linuxFxVersion": "[parameters('linuxFxVersion')]",
            "ipSecurityRestrictionsDefaultAction": "[parameters('ipSecurityRestrictionsDefaultAction')]"
        }
    }
}
For Bicep, modify the propertyipSecurityRestrictionsDefaultAction. Accepted values foripSecurityRestrictionsDefaultActionareAlloworDeny. A sample Bicep snippet is provided for you.
ipSecurityRestrictionsDefaultAction
ipSecurityRestrictionsDefaultAction
Allow
Deny
resource appService 'Microsoft.Web/sites@2020-06-01' = {
  name: webSiteName
  location: location
  kind: 'app'
  properties: {
    serverFarmId: appServicePlan.id
    siteConfig: {
      linuxFxVersion: linuxFxVersion
      ipSecurityRestrictionsDefaultAction: ipSecurityRestrictionsDefaultAction
    }
  }
}
resource appService 'Microsoft.Web/sites@2020-06-01' = {
  name: webSiteName
  location: location
  kind: 'app'
  properties: {
    serverFarmId: appServicePlan.id
    siteConfig: {
      linuxFxVersion: linuxFxVersion
      ipSecurityRestrictionsDefaultAction: ipSecurityRestrictionsDefaultAction
    }
  }
}
Change unmatched rule action for advanced tool site
You can changeUnmatched rule actionforAdvanced tool siteprogrammatically by choosing one of the following options:
Azure CLI
PowerShell
Azure Resource Manager
Bicep
You can run the following command inCloud Shell. For more information about the command, seeaz resource. Accepted values forscmIpSecurityRestrictionsDefaultActionareAlloworDeny.
az resource
scmIpSecurityRestrictionsDefaultAction
Allow
Deny
az resource update --resource-group ResourceGroup --name AppName --resource-type "Microsoft.Web/sites" \
  --set properties.siteConfig.scmIpSecurityRestrictionsDefaultAction=Allow
az resource update --resource-group ResourceGroup --name AppName --resource-type "Microsoft.Web/sites" \
  --set properties.siteConfig.scmIpSecurityRestrictionsDefaultAction=Allow
You can run the following command inCloud Shell. For more information about the command, seeSet-AzResource. Accepted values forscmIpSecurityRestrictionsDefaultActionareAlloworDeny.
Set-AzResource
scmIpSecurityRestrictionsDefaultAction
Allow
Deny
$Resource = Get-AzResource -ResourceType Microsoft.Web/sites -ResourceGroupName ResourceGroup -ResourceName AppName
$Resource.Properties.siteConfig.scmIpSecurityRestrictionsDefaultAction = "Allow"
$Resource | Set-AzResource -Force
$Resource = Get-AzResource -ResourceType Microsoft.Web/sites -ResourceGroupName ResourceGroup -ResourceName AppName
$Resource.Properties.siteConfig.scmIpSecurityRestrictionsDefaultAction = "Allow"
$Resource | Set-AzResource -Force
For ARM templates, modify the propertyscmIpSecurityRestrictionsDefaultAction. Accepted values forscmIpSecurityRestrictionsDefaultActionareAlloworDeny. A sample ARM template snippet is provided for you.
scmIpSecurityRestrictionsDefaultAction
scmIpSecurityRestrictionsDefaultAction
Allow
Deny
{
    "type": "Microsoft.Web/sites",
    "apiVersion": "2020-06-01",
    "name": "[parameters('name')]",
    "location": "[parameters('location')]",
    "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanPortalName'))]"
    ],
    "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanPortalName'))]",
        "siteConfig": {
            "linuxFxVersion": "[parameters('linuxFxVersion')]",
            "scmIpSecurityRestrictionsDefaultAction": "[parameters('scmIpSecurityRestrictionsDefaultAction')]"
        }
    }
}
{
    "type": "Microsoft.Web/sites",
    "apiVersion": "2020-06-01",
    "name": "[parameters('name')]",
    "location": "[parameters('location')]",
    "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanPortalName'))]"
    ],
    "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanPortalName'))]",
        "siteConfig": {
            "linuxFxVersion": "[parameters('linuxFxVersion')]",
            "scmIpSecurityRestrictionsDefaultAction": "[parameters('scmIpSecurityRestrictionsDefaultAction')]"
        }
    }
}
For Bicep, modify the propertyscmIpSecurityRestrictionsDefaultAction. Accepted values forscmIpSecurityRestrictionsDefaultActionareAlloworDeny. A sample Bicep snippet is provided for you.
scmIpSecurityRestrictionsDefaultAction
scmIpSecurityRestrictionsDefaultAction
Allow
Deny
resource appService 'Microsoft.Web/sites@2020-06-01' = {
  name: webSiteName
  location: location
  kind: 'app'
  properties: {
    serverFarmId: appServicePlan.id
    siteConfig: {
      linuxFxVersion: linuxFxVersion
      scmIpSecurityRestrictionsDefaultAction: scmIpSecurityRestrictionsDefaultAction
    }
  }
}
resource appService 'Microsoft.Web/sites@2020-06-01' = {
  name: webSiteName
  location: location
  kind: 'app'
  properties: {
    serverFarmId: appServicePlan.id
    siteConfig: {
      linuxFxVersion: linuxFxVersion
      scmIpSecurityRestrictionsDefaultAction: scmIpSecurityRestrictionsDefaultAction
    }
  }
}
Set up Azure Functions access restrictions
Access restrictions are also available for function apps with the same functionality as App Service plans. When you enable access restrictions, you also disable the Azure portal code editor for any disallowed IPs.
Related content
Access restrictions for Azure Functions
Application Gateway integration with service endpoints
Blog post: Advanced access restriction scenarios in Azure App Service
Feedback
Was this page helpful?
Additional resources