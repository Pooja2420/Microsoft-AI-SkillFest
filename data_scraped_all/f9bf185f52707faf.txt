Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Tutorial: Add a transformation in a workspace data collection rule by using the Azure portal
Article
2025-03-17
5 contributors
In this article
This tutorial walks you through configuration of a sampletransformation in a workspace data collection rule (DCR)by using the Azure portal.Transformationsin Azure Monitor allow you to filter or modify incoming data before it's sent to its destination. Workspace transformations provide support foringestion-time transformationsfor workflows that don't yet use theAzure Monitor data ingestion pipeline.
Workspace transformations are stored together in a singleDCRfor the workspace, which is called the workspace DCR. Each transformation is associated with a particular table. The transformation will be applied to all data sent to this table from any workflow not using a DCR.
Note
This tutorial uses the Azure portal to configure a workspace transformation. For the same tutorial using Azure Resource Manager templates and REST API, seeTutorial: Add transformation in workspace data collection rule to Azure Monitor using resource manager templates.
In this tutorial, you learn how to:
Configure aworkspace transformationfor a table in a Log Analytics workspace.
Write a log query for a workspace transformation.
Prerequisites
To complete this tutorial, you need:
A Log Analytics workspace where you have at leastcontributor rights.
Permissions to create DCR objectsin the workspace.
A table that already has some data.
The table can't be linked to theworkspace transformation DCR.
Overview
In this tutorial, you'll reduce the storage requirement for theLAQueryLogstable by filtering out certain records. You'll also remove the contents of a column while parsing the column data to store a piece of data in a custom column. TheLAQueryLogs tableis created when you enablelog query auditingin a workspace. You can use this same basic process to create a transformation for anysupported tablein a Log Analytics workspace.
LAQueryLogs
This tutorial uses the Azure portal, which provides a wizard to walk you through the process of creating an ingestion-time transformation. After you finish the steps, you'll see that the wizard:
Updates the table schema with any other columns from the query.
Creates aWorkspaceTransformsDCR and links it to the workspace if a default DCR isn't already linked to the workspace.
WorkspaceTransforms
Creates an ingestion-time transformation and adds it to the DCR.
Enable query audit logs
You need to enablequery auditingfor your workspace to create theLAQueryLogstable that you'll be working with. This step isn't required for all ingestion time transformations. It's just to generate the sample data that we'll be working with.
LAQueryLogs
On theLog Analytics workspacesmenu in the Azure portal, selectDiagnostic settings>Add diagnostic setting.
On theLog Analytics workspacesmenu in the Azure portal, selectDiagnostic settings>Add diagnostic setting.

Enter a name for the diagnostic setting. Select the workspace so that the auditing data is stored in the same workspace. Select theAuditcategory and then selectSaveto save the diagnostic setting and close theDiagnostic settingpage.
Enter a name for the diagnostic setting. Select the workspace so that the auditing data is stored in the same workspace. Select theAuditcategory and then selectSaveto save the diagnostic setting and close theDiagnostic settingpage.

SelectLogsand then run some queries to populateLAQueryLogswith some data. These queries don't need to return data to be added to the audit log.
SelectLogsand then run some queries to populateLAQueryLogswith some data. These queries don't need to return data to be added to the audit log.
LAQueryLogs

Add a transformation to the table
Now that the table's created, you can create the transformation for it.
On theLog Analytics workspacesmenu in the Azure portal, selectTables. Locate theLAQueryLogstable and selectCreate transformation.
On theLog Analytics workspacesmenu in the Azure portal, selectTables. Locate theLAQueryLogstable and selectCreate transformation.
LAQueryLogs

Because this transformation is the first one in the workspace, you must create aworkspace transformation DCR. If you create transformations for other tables in the same workspace, they'll be stored in this same DCR. SelectCreate a new data collection rule. TheSubscriptionandResource groupwill already be populated for the workspace. Enter a name for the DCR and selectDone.
Because this transformation is the first one in the workspace, you must create aworkspace transformation DCR. If you create transformations for other tables in the same workspace, they'll be stored in this same DCR. SelectCreate a new data collection rule. TheSubscriptionandResource groupwill already be populated for the workspace. Enter a name for the DCR and selectDone.

SelectNextto view sample data from the table. As you define the transformation, the result will be applied to the sample data. For this reason, you can evaluate the results before you apply it to actual data. SelectTransformation editorto define the transformation.
SelectNextto view sample data from the table. As you define the transformation, the result will be applied to the sample data. For this reason, you can evaluate the results before you apply it to actual data. SelectTransformation editorto define the transformation.

In the transformation editor, you can see the transformation that will be applied to the data prior to its ingestion into the table. The incoming data is represented by a virtual table namedsource, which has the same set of columns as the destination table itself. The transformation initially contains a simple query that returns thesourcetable with no changes.
In the transformation editor, you can see the transformation that will be applied to the data prior to its ingestion into the table. The incoming data is represented by a virtual table namedsource, which has the same set of columns as the destination table itself. The transformation initially contains a simple query that returns thesourcetable with no changes.
source
source
Modify the query to the following example:source
| where QueryText !contains 'LAQueryLogs'
| extend Context = parse_json(RequestContext)
| extend Workspace_CF = tostring(Context['workspaces'][0])
| project-away RequestContext, ContextThe modification makes the following changes:Rows related to querying theLAQueryLogstable itself were dropped to save space because these log entries aren't useful.A column for the name of the workspace that was queried was added.Data from theRequestContextcolumn was removed to save space.NoteUsing the Azure portal, the output of the transformation will initiate changes to the table schema if required. Columns will be added to match the transformation output if they don't already exist. Make sure that your output doesn't contain any columns that you don't want added to the table. If the output doesn't include columns that are already in the table, those columns won't be removed, but data won't be added.Any custom columns added to a built-in table must end in_CF. Columns added to a custom table don't need to have this suffix. A custom table has a name that ends in_CL.
Modify the query to the following example:
source
| where QueryText !contains 'LAQueryLogs'
| extend Context = parse_json(RequestContext)
| extend Workspace_CF = tostring(Context['workspaces'][0])
| project-away RequestContext, Context
source
| where QueryText !contains 'LAQueryLogs'
| extend Context = parse_json(RequestContext)
| extend Workspace_CF = tostring(Context['workspaces'][0])
| project-away RequestContext, Context
The modification makes the following changes:
Rows related to querying theLAQueryLogstable itself were dropped to save space because these log entries aren't useful.
LAQueryLogs
A column for the name of the workspace that was queried was added.
Data from theRequestContextcolumn was removed to save space.
RequestContext
Note
Using the Azure portal, the output of the transformation will initiate changes to the table schema if required. Columns will be added to match the transformation output if they don't already exist. Make sure that your output doesn't contain any columns that you don't want added to the table. If the output doesn't include columns that are already in the table, those columns won't be removed, but data won't be added.
Any custom columns added to a built-in table must end in_CF. Columns added to a custom table don't need to have this suffix. A custom table has a name that ends in_CL.
_CF
_CL
Copy the query into the transformation editor and selectRunto view results from the sample data. You can verify that the newWorkspace_CFcolumn is in the query.
Copy the query into the transformation editor and selectRunto view results from the sample data. You can verify that the newWorkspace_CFcolumn is in the query.
Workspace_CF

SelectApplyto save the transformation and then selectNextto review the configuration. SelectCreateto update the DCR with the new transformation.
SelectApplyto save the transformation and then selectNextto review the configuration. SelectCreateto update the DCR with the new transformation.

Test the transformation
Allow about 30 minutes for the transformation to take effect and then test it by running a query against the table. Only data sent to the table after the transformation was applied will be affected.
For this tutorial, run some sample queries to send data to theLAQueryLogstable. Include some queries againstLAQueryLogsso that you can verify that the transformation filters these records. Now the output has the newWorkspace_CFcolumn, and there are no records forLAQueryLogs.
LAQueryLogs
LAQueryLogs
Workspace_CF
LAQueryLogs
Troubleshooting
This section describes different error conditions you might receive and how to correct them.
IntelliSense in Log Analytics not recognizing new columns in the table
The cache that drives IntelliSense might take up to 24 hours to update.
Transformation on a dynamic column isn't working
A known issue currently affects dynamic columns. A temporary workaround is to explicitly parse dynamic column data by usingparse_json()prior to performing any operations against them.
parse_json()
Next steps
Read more about transformations
See which tables support workspace transformations
Learn more about writing transformation queries
Feedback
Was this page helpful?
Additional resources