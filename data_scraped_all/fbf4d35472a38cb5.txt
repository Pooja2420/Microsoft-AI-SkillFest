Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Python plugin
Article
2024-09-18
3 contributors
In this article
Applies to: 창혵Microsoft Fabric창혵Azure Data Explorer
The Python plugin runs a user-defined function (UDF) using a Python script. The Python script gets tabular data as its input, and produces tabular output. The plugin's runtime is hosted insandboxes, running on the cluster's nodes.
Syntax
T|evaluate[hint.distribution=(single|per_node)] [hint.remote=(auto|local)]python(output_schema,script[,script_parameters] [,external_artifacts][,spill_to_disk])
|
evaluate
hint.distribution
=
single
per_node
hint.remote
=
auto
local
python(
,
,
,
,
)
Learn more aboutsyntax conventions.
Parameters
string
type
typeof(
:
)
typeof(col1:string, col2:long)
typeof(*, col1:string, col2:long)
string
dynamic
kargs
string
single
single
per_node
string
auto
auto
local
dynamic
bool
true
true
Reserved Python variables
The following variables are reserved for interaction between Kusto Query Language and the Python code.
df: The input tabular data (the values ofTabove), as apandasDataFrame.
df
T
pandas
kargs: The value of thescript_parametersargument, as a Python dictionary.
kargs
result: ApandasDataFrame created by the Python script, whose value becomes the tabular data that gets sent to the Kusto query operator that follows the plugin.
result
pandas
Enable the plugin
The plugin is disabled by default. Before you start, review the list ofprerequisites. To enable the plugin and select the version of the Python image, seeEnable language extensions on your cluster.
Python sandbox image
To change the version of the Python image to a different managed image or a custom image, seeChange the Python language extensions image on your cluster.
To see the list of packages for the different Python images, seePython package reference.
Note
By default, the plugin importsnumpyasnpandpandasaspd. Optionally, you can import other modules as needed.
Some packages might be incompatible with the limitations enforced by the sandbox where the plugin is run.
Use ingestion from query and update policy
Use the plugin in queries that are:Defined as part of anupdate policy, whose source table is ingested to usingnon-streamingingestion.Run as part of a command thatingests from a query, such as.set-or-append.
Defined as part of anupdate policy, whose source table is ingested to usingnon-streamingingestion.
Run as part of a command thatingests from a query, such as.set-or-append.
.set-or-append
You can't use the plugin in a query that is defined as part of an update policy, whose source table is ingested usingstreaming ingestion.
Examples
range x from 1 to 360 step 1
| evaluate python(
//
typeof(*, fx:double),               //  Output schema: append a new fx column to original table 
```
result = df
n = df.shape[0]
g = kargs["gain"]
f = kargs["cycles"]
result["fx"] = g * np.sin(df["x"]/n*2*np.pi*f)
```
, bag_pack('gain', 100, 'cycles', 4)    //  dictionary of parameters
)
| render linechart
range x from 1 to 360 step 1
| evaluate python(
//
typeof(*, fx:double),               //  Output schema: append a new fx column to original table 
```
result = df
n = df.shape[0]
g = kargs["gain"]
f = kargs["cycles"]
result["fx"] = g * np.sin(df["x"]/n*2*np.pi*f)
```
, bag_pack('gain', 100, 'cycles', 4)    //  dictionary of parameters
)
| render linechart

print "This is an example for using 'external_artifacts'"
| evaluate python(
    typeof(File:string, Size:string), ```if 1:
    import os
    result = pd.DataFrame(columns=['File','Size'])
    sizes = []
    path = '.\\\\Temp'
    files = os.listdir(path)
    result['File']=files
    for file in files:
        sizes.append(os.path.getsize(path + '\\\\' + file))
    result['Size'] = sizes
    ```,
    external_artifacts = 
        dynamic({"this_is_my_first_file":"https://kustoscriptsamples.blob.core.windows.net/samples/R/sample_script.r",
                 "this_is_a_script":"https://kustoscriptsamples.blob.core.windows.net/samples/python/sample_script.py"})
)
print "This is an example for using 'external_artifacts'"
| evaluate python(
    typeof(File:string, Size:string), ```if 1:
    import os
    result = pd.DataFrame(columns=['File','Size'])
    sizes = []
    path = '.\\\\Temp'
    files = os.listdir(path)
    result['File']=files
    for file in files:
        sizes.append(os.path.getsize(path + '\\\\' + file))
    result['Size'] = sizes
    ```,
    external_artifacts = 
        dynamic({"this_is_my_first_file":"https://kustoscriptsamples.blob.core.windows.net/samples/R/sample_script.r",
                 "this_is_a_script":"https://kustoscriptsamples.blob.core.windows.net/samples/python/sample_script.py"})
)
Performance tips
Reduce the plugin's input dataset to the minimum amount required (columns/rows).Use filters on the source dataset, when possible, with Kusto's query language.To do a calculation on a subset of the source columns, project only those columns before invoking the plugin.
Use filters on the source dataset, when possible, with Kusto's query language.
To do a calculation on a subset of the source columns, project only those columns before invoking the plugin.
Usehint.distribution = per_nodewhenever the logic in your script is distributable.You can also use thepartition operatorfor partitioning the input dataset.
hint.distribution = per_node
You can also use thepartition operatorfor partitioning the input dataset.
Use Kusto's query language whenever possible, to implement the logic of your Python script.
Usage tips
To generate multi-line strings containing the Python script in your query editor, copy your Python script from your favorite
Python editor (Jupyter,Visual Studio Code,PyCharm, and so on), paste it in your query editor, and then enclose the full script between lines containing three consecutive backticks. For example:```python code```
To generate multi-line strings containing the Python script in your query editor, copy your Python script from your favorite
Python editor (Jupyter,Visual Studio Code,PyCharm, and so on), paste it in your query editor, and then enclose the full script between lines containing three consecutive backticks. For example:
```python code```
```
python code
```
Use theexternaldataoperatorto obtain the content of a script that you've stored in an external location, such as Azure Blob storage.
Use theexternaldataoperatorto obtain the content of a script that you've stored in an external location, such as Azure Blob storage.
externaldata
Example
let script = 
        externaldata(script:string)
        [h'https://kustoscriptsamples.blob.core.windows.net/samples/python/sample_script.py']
        with(format = raw);
    range x from 1 to 360 step 1
    | evaluate python(
        typeof(*, fx:double),
        toscalar(script), 
        bag_pack('gain', 100, 'cycles', 4))
    | render linechart
let script = 
        externaldata(script:string)
        [h'https://kustoscriptsamples.blob.core.windows.net/samples/python/sample_script.py']
        with(format = raw);
    range x from 1 to 360 step 1
    | evaluate python(
        typeof(*, fx:double),
        toscalar(script), 
        bag_pack('gain', 100, 'cycles', 4))
    | render linechart
Using External Artifacts
External artifacts from cloud storage can be made available for the script and used at runtime.
The URLs referenced by the external artifacts property must be:
Included in the cluster'scallout policy.
In a publicly available location, or provide the necessary credentials, as explained instorage connection strings.
Note
When authenticating external artifacts using Managed Identities, theSandboxArtifactsusage must be defined on the cluster levelmanaged identity policy.
SandboxArtifacts
The artifacts are made available for the script to consume from a local temporary directory,.\Temp. The names provided in the property bag are used as the local file names. SeeExamples.
.\Temp
For information regarding referencing external packages, seeInstall packages for the Python plugin.
Refreshing external artifact cache
External artifact files utilized in queries are cached on your cluster. If you make updates to your files in cloud storage and require immediate synchronization with your cluster, you can use the.clear cluster cache external-artifacts command. This command clears the cached files and ensures that subsequent queries run with the latest version of the artifacts.
Install packages for the Python plugin
In most use cases, you might prefer tocreate a custom image.
You might want to install package(s) yourself, for the following reasons:
You don't have permissions to create a custom image.
The package is private.
You prefer to create an ad hoc package installation for testing and don't want the overhead of creating a custom image.
Install packages as follows:
Prerequisites
Create a blob container to host the packages, preferably in the same place as your cluster. For example,https://artifactswestus.blob.core.windows.net/python, assuming your cluster is in West US.
Create a blob container to host the packages, preferably in the same place as your cluster. For example,https://artifactswestus.blob.core.windows.net/python, assuming your cluster is in West US.
https://artifactswestus.blob.core.windows.net/python
Alter the cluster'scallout policyto allow access to that location.This change requiresAllDatabasesAdminpermissions.For example, to enable access to a blob located inhttps://artifactswestus.blob.core.windows.net/python, run the following command:.alter-merge cluster policy callout @'[ { "CalloutType": "sandbox_artifacts", "CalloutUriRegex": "artifactswestus\\.blob\\.core\\.windows\\.net/python/","CanCall": true } ]'
Alter the cluster'scallout policyto allow access to that location.
This change requiresAllDatabasesAdminpermissions.
This change requiresAllDatabasesAdminpermissions.
For example, to enable access to a blob located inhttps://artifactswestus.blob.core.windows.net/python, run the following command:
For example, to enable access to a blob located inhttps://artifactswestus.blob.core.windows.net/python, run the following command:
https://artifactswestus.blob.core.windows.net/python
.alter-merge cluster policy callout @'[ { "CalloutType": "sandbox_artifacts", "CalloutUriRegex": "artifactswestus\\.blob\\.core\\.windows\\.net/python/","CanCall": true } ]'
.alter-merge cluster policy callout @'[ { "CalloutType": "sandbox_artifacts", "CalloutUriRegex": "artifactswestus\\.blob\\.core\\.windows\\.net/python/","CanCall": true } ]'
Install packages
For public packages inPyPior other channels,
download the package and its dependencies.From a cmd window in your local Windows Python environment, run:pip wheel [-w download-dir] package-name.
For public packages inPyPior other channels,
download the package and its dependencies.
From a cmd window in your local Windows Python environment, run:
pip wheel [-w download-dir] package-name.
pip wheel [-w download-dir] package-name.
Create a ZIP file that contains the required package and its dependencies.For private packages, zip the folder of the package and the folders of its dependencies.For public packages, zip the files that were downloaded in the previous step.NoteMake sure to download the package that is compatible to the Python engine and the platform of the sandbox runtime (currently 3.6.5 on Windows)Make sure to zip the.whlfiles themselves, and not their parent folder.You can skip.whlfiles for packages that already exist with the same version in the base sandbox image.
Create a ZIP file that contains the required package and its dependencies.
For private packages, zip the folder of the package and the folders of its dependencies.
For public packages, zip the files that were downloaded in the previous step.
Note
Make sure to download the package that is compatible to the Python engine and the platform of the sandbox runtime (currently 3.6.5 on Windows)
Make sure to zip the.whlfiles themselves, and not their parent folder.
.whl
You can skip.whlfiles for packages that already exist with the same version in the base sandbox image.
.whl
Upload the zipped file to a blob in the artifacts location (from step 1).
Upload the zipped file to a blob in the artifacts location (from step 1).
Call thepythonplugin.Specify theexternal_artifactsparameter with a property bag of name and reference to the ZIP file (the blob's URL, including a SAS token).In your inline python code, importZipackagefromsandbox_utilsand call itsinstall()method with the name of the ZIP file.
Call thepythonplugin.
python
Specify theexternal_artifactsparameter with a property bag of name and reference to the ZIP file (the blob's URL, including a SAS token).
external_artifacts
In your inline python code, importZipackagefromsandbox_utilsand call itsinstall()method with the name of the ZIP file.
Zipackage
sandbox_utils
install()
Example
Install theFakerpackage that generates fake data.
range ID from 1 to 3 step 1 
| extend Name=''
| evaluate python(typeof(*), ```if 1:
    from sandbox_utils import Zipackage
    Zipackage.install("Faker.zip")
    from faker import Faker
    fake = Faker()
    result = df
    for i in range(df.shape[0]):
        result.loc[i, "Name"] = fake.name()
    ```,
    external_artifacts=bag_pack('faker.zip', 'https://artifacts.blob.core.windows.net/Faker.zip?*** REPLACE WITH YOUR SAS TOKEN ***'))
range ID from 1 to 3 step 1 
| extend Name=''
| evaluate python(typeof(*), ```if 1:
    from sandbox_utils import Zipackage
    Zipackage.install("Faker.zip")
    from faker import Faker
    fake = Faker()
    result = df
    for i in range(df.shape[0]):
        result.loc[i, "Name"] = fake.name()
    ```,
    external_artifacts=bag_pack('faker.zip', 'https://artifacts.blob.core.windows.net/Faker.zip?*** REPLACE WITH YOUR SAS TOKEN ***'))
Related content
For more examples of UDF functions that use the Python plugin, see theFunctions library.
The Python plugin runs a user-defined function (UDF) using a Python script. The Python script gets tabular data as its input, and produces tabular output.
Syntax
T|evaluate[hint.distribution=(single|per_node)] [hint.remote=(auto|local)]python(output_schema,script[,script_parameters] [,spill_to_disk])
|
evaluate
hint.distribution
=
single
per_node
hint.remote
=
auto
local
python(
,
,
,
)
Learn more aboutsyntax conventions.
Parameters
string
type
typeof(
:
)
typeof(col1:string, col2:long)
typeof(*, col1:string, col2:long)
string
dynamic
kargs
string
single
single
per_node
string
auto
auto
local
bool
true
true
Reserved Python variables
The following variables are reserved for interaction between Kusto Query Language and the Python code.
df: The input tabular data (the values ofTabove), as apandasDataFrame.
df
T
pandas
kargs: The value of thescript_parametersargument, as a Python dictionary.
kargs
result: ApandasDataFrame created by the Python script, whose value becomes the tabular data that gets sent to the Kusto query operator that follows the plugin.
result
pandas
Enable the plugin
The plugin is disabled by default. Before you start,enable the Python pluginin your KQL database.
Python sandbox image
To see the list of packages for the different Python images, seePython package reference.
Note
By default, the plugin importsnumpyasnpandpandasaspd. Optionally, you can import other modules as needed.
Some packages might be incompatible with the limitations enforced by the sandbox where the plugin is run.
Use ingestion from query and update policy
Use the plugin in queries that are:Defined as part of anupdate policy, whose source table is ingested to usingnon-streamingingestion.Run as part of a command thatingests from a query, such as.set-or-append.
Defined as part of anupdate policy, whose source table is ingested to usingnon-streamingingestion.
Run as part of a command thatingests from a query, such as.set-or-append.
.set-or-append
You can't use the plugin in a query that is defined as part of an update policy, whose source table is ingested usingstreaming ingestion.
Examples
range x from 1 to 360 step 1
| evaluate python(
//
typeof(*, fx:double),               //  Output schema: append a new fx column to original table 
```
result = df
n = df.shape[0]
g = kargs["gain"]
f = kargs["cycles"]
result["fx"] = g * np.sin(df["x"]/n*2*np.pi*f)
```
, bag_pack('gain', 100, 'cycles', 4)    //  dictionary of parameters
)
| render linechart
range x from 1 to 360 step 1
| evaluate python(
//
typeof(*, fx:double),               //  Output schema: append a new fx column to original table 
```
result = df
n = df.shape[0]
g = kargs["gain"]
f = kargs["cycles"]
result["fx"] = g * np.sin(df["x"]/n*2*np.pi*f)
```
, bag_pack('gain', 100, 'cycles', 4)    //  dictionary of parameters
)
| render linechart

Performance tips
Reduce the plugin's input dataset to the minimum amount required (columns/rows).Use filters on the source dataset, when possible, with Kusto's query language.To do a calculation on a subset of the source columns, project only those columns before invoking the plugin.
Use filters on the source dataset, when possible, with Kusto's query language.
To do a calculation on a subset of the source columns, project only those columns before invoking the plugin.
Usehint.distribution = per_nodewhenever the logic in your script is distributable.You can also use thepartition operatorfor partitioning the input dataset.
hint.distribution = per_node
You can also use thepartition operatorfor partitioning the input dataset.
Use Kusto's query language whenever possible, to implement the logic of your Python script.
Usage tips
To generate multi-line strings containing the Python script in your query editor, copy your Python script from your favorite
Python editor (Jupyter,Visual Studio Code,PyCharm, and so on), paste it in your query editor, and then enclose the full script between lines containing three consecutive backticks. For example:```python code```
To generate multi-line strings containing the Python script in your query editor, copy your Python script from your favorite
Python editor (Jupyter,Visual Studio Code,PyCharm, and so on), paste it in your query editor, and then enclose the full script between lines containing three consecutive backticks. For example:
```python code```
```
python code
```
Use theexternaldataoperatorto obtain the content of a script that you've stored in an external location, such as Azure Blob storage.
Use theexternaldataoperatorto obtain the content of a script that you've stored in an external location, such as Azure Blob storage.
externaldata
Example
let script = 
        externaldata(script:string)
        [h'https://kustoscriptsamples.blob.core.windows.net/samples/python/sample_script.py']
        with(format = raw);
    range x from 1 to 360 step 1
    | evaluate python(
        typeof(*, fx:double),
        toscalar(script), 
        bag_pack('gain', 100, 'cycles', 4))
    | render linechart
let script = 
        externaldata(script:string)
        [h'https://kustoscriptsamples.blob.core.windows.net/samples/python/sample_script.py']
        with(format = raw);
    range x from 1 to 360 step 1
    | evaluate python(
        typeof(*, fx:double),
        toscalar(script), 
        bag_pack('gain', 100, 'cycles', 4))
    | render linechart
Related content
For more examples of UDF functions that use the Python plugin, see theFunctions library.
Feedback
Was this page helpful?
Additional resources