Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Feature Engineering and Workspace Feature Store Python API
Article
2024-12-11
5 contributors
In this article
This page provides links to the Python API documentation of Databricks Feature Engineering and Databricks legacy Workspace Feature Store, and information about the client packagesdatabricks-feature-engineeringanddatabricks-feature-store.
databricks-feature-engineering
databricks-feature-store
Note
As of version 0.17.0,databricks-feature-storehas been deprecated. All existing modules from this package are now available indatabricks-feature-engineeringversion 0.2.0 and later. For information about migrating todatabricks-feature-engineering, seeMigrate to databricks-feature-engineering.
databricks-feature-store
databricks-feature-engineering
databricks-feature-engineering
Compatibility matrix
The package and client you should use depend on where your feature tables are located and what Databricks Runtime ML version you are running, as shown in the following table.
To identify the package version that is built in to your Databricks Runtime ML version, see theFeature Engineering compatibility matrix.
databricks-feature-engineering
FeatureEngineeringClient
databricks-feature-engineering
FeatureStoreClient
databricks-feature-engineering
FeatureEngineeringClient
databricks-feature-store
FeatureStoreClient
Note
databricks-feature-engineering<=0.7.0is not compatible withmlflow>=2.18.0. To usedatabricks-feature-engineeringwith MLflow 2.18.0 and above, upgrade todatabricks-feature-engineeringversion 0.8.0 or above.
databricks-feature-engineering<=0.7.0
mlflow>=2.18.0
databricks-feature-engineering
databricks-feature-engineering
Release notes
SeeDatabricks feature engineering and legacy Workspace Feature Store release notes.
Feature Engineering Python API reference
See the Feature EngineeringPython API reference.
Workspace Feature Store Python API reference (deprecated)
Note
As of version 0.17.0,databricks-feature-storehas been deprecated. All existing modules from this package are now available indatabricks-feature-engineeringversion 0.2.0 and later.
databricks-feature-store
databricks-feature-engineering
Fordatabricks-feature-storev0.17.0, see DatabricksFeatureStoreClientinFeature Engineering Python API referencefor the latest Workspace Feature Store API reference.
databricks-feature-store
FeatureStoreClient
For v0.16.3 and below, use the links in the table to download or display the Feature Store Python API reference. To determine the pre-installed version for your Databricks Runtime ML version, seethe compatibility matrix.
Python package
This section describes how to install the Python packages to use Databricks Feature Engineering and Databricks Workspace Feature Store.
Feature Engineering
Note
As of version 0.2.0,databricks-feature-engineeringcontains modules for working with feature tables in both Unity Catalog and Workspace Feature Store.databricks-feature-engineeringbelow version 0.2.0 only works with feature tables in Unity Catalog.
databricks-feature-engineering
databricks-feature-engineering
The Databricks Feature Engineering APIs are available through the Python client packagedatabricks-feature-engineering. The client is available onPyPIand is pre-installed in Databricks Runtime 13.3 LTS ML and above.
databricks-feature-engineering
For a reference of which client version corresponds to which runtime version, see thecompatibility matrix.
To install the client in Databricks Runtime:
%pip install databricks-feature-engineering
%pip install databricks-feature-engineering
To install the client in a local Python environment:
pip install databricks-feature-engineering
pip install databricks-feature-engineering
Workspace Feature Store (deprecated)
Note
As of version 0.17.0,databricks-feature-storehas been deprecated. All existing modules from this package are now available indatabricks-feature-engineering, version 0.2.0 and later.
databricks-feature-store
databricks-feature-engineering
SeeMigrate to databricks-feature-engineeringfor more information.
The Databricks Feature Store APIs are available through the Python client packagedatabricks-feature-store. The client is available onPyPIand is pre-installed in Databricks Runtime for Machine Learning. For a reference of which runtime includes which client version, see thecompatibility matrix.
databricks-feature-store
To install the client in Databricks Runtime:
%pip install databricks-feature-store
%pip install databricks-feature-store
To install the client in a local Python environment:
pip install databricks-feature-store
pip install databricks-feature-store
Migrate todatabricks-feature-engineering
databricks-feature-engineering
To install thedatabricks-feature-engineeringpackage, usepip install databricks-feature-engineeringinstead ofpip install databricks-feature-store. All of the modules indatabricks-feature-storehave been moved todatabricks-feature-engineering, so you do not have to change any code. Import statements such asfrom databricks.feature_store import FeatureStoreClientwill continue to work after you installdatabricks-feature-engineering.
databricks-feature-engineering
pip install databricks-feature-engineering
pip install databricks-feature-store
databricks-feature-store
databricks-feature-engineering
from databricks.feature_store import FeatureStoreClient
databricks-feature-engineering
To work with feature tables in Unity Catalog, useFeatureEngineeringClient. To use Workspace Feature Store, you must useFeatureStoreClient.
FeatureEngineeringClient
FeatureStoreClient
Supported scenarios
On Databricks, including Databricks Runtime and Databricks Runtime for Machine Learning, you can:
Create, read, and write feature tables.
Train and score models on feature data.
Publish feature tables to online stores for real-time serving.
From a local environment or an environment external to Databricks, you can:
Develop code with local IDE support.
Unit test using mock frameworks.
Write integration tests to be run on Databricks.
Limitations
The client library can only be run on Databricks, including Databricks Runtime and Databricks Runtime for Machine Learning. It does
not support calling Feature Engineering in Unity Catalog or Feature Store APIs from a local environment, or from an environment other than Databricks.
Use the clients for unit testing
You can install the Feature Engineering in Unity Catalog client or the Feature Store client locally to aid in running unit tests.
For example, to validate that a methodupdate_customer_featurescorrectly callsFeatureEngineeringClient.write_table(or for Workspace Feature Store,FeatureStoreClient.write_table), you could write:
update_customer_features
FeatureEngineeringClient.write_table
FeatureStoreClient.write_table
from unittest.mock import MagicMock, patch

from my_feature_update_module import update_customer_features
from databricks.feature_engineering import FeatureEngineeringClient

@patch.object(FeatureEngineeringClient, "write_table")
@patch("my_feature_update_module.compute_customer_features")
def test_something(compute_customer_features, mock_write_table):
  customer_features_df = MagicMock()
  compute_customer_features.return_value = customer_features_df

  update_customer_features()  # Function being tested

  mock_write_table.assert_called_once_with(
    name='ml.recommender_system.customer_features',
    df=customer_features_df,
    mode='merge'
  )
from unittest.mock import MagicMock, patch

from my_feature_update_module import update_customer_features
from databricks.feature_engineering import FeatureEngineeringClient

@patch.object(FeatureEngineeringClient, "write_table")
@patch("my_feature_update_module.compute_customer_features")
def test_something(compute_customer_features, mock_write_table):
  customer_features_df = MagicMock()
  compute_customer_features.return_value = customer_features_df

  update_customer_features()  # Function being tested

  mock_write_table.assert_called_once_with(
    name='ml.recommender_system.customer_features',
    df=customer_features_df,
    mode='merge'
  )
Use the clients for integration testing
You can run integration tests with the Feature Engineering in Unity Catalog client or the Feature Store client on Databricks. For details, seeDeveloper Tools and Guidance: Use CI/CD.
Feedback
Was this page helpful?
Additional resources