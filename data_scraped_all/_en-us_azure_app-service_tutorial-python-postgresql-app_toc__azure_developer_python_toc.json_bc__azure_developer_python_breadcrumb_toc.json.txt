Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Deploy a Python (Flask) web app with PostgreSQL in Azure
Article
2025-04-17
3 contributors
In this article
In this tutorial, you'll deploy a data-driven Python web app (Flask) toAzure App Servicewith theAzure Database for PostgreSQLrelational database service. Azure App Service supportsPythonin a Linux server environment. If you want, see theDjango tutorialor theFastAPI tutorialinstead.

In this tutorial, you learn how to:
Create a secure-by-default App Service, PostgreSQL, and Redis cache architecture.
Secure connection secrets using a managed identity and Key Vault references.
Deploy a sample Python app to App Service from a GitHub repository.
Access App Service connection strings and app settings in the application code.
Make updates and redeploy the application code.
Generate database schema by running database migrations.
Stream diagnostic logs from Azure.
Manage the app in the Azure portal.
Provision the same architecture and deploy by using Azure Developer CLI.
Optimize your development workflow with GitHub Codespaces and GitHub Copilot.
Prerequisites
An Azure account with an active subscription. If you don't have an Azure account, youcan create one for free.
A GitHub account. you can alsoget one for free.
Knowledge of Python with Flask development.
(Optional)To try GitHub Copilot, aGitHub Copilot account. A 30-day free trial is available.
An Azure account with an active subscription. If you don't have an Azure account, youcan create one for free.
Azure Developer CLIinstalled. You can follow the steps with theAzure Cloud Shellbecause it already has Azure Developer CLI installed.
Knowledge of Python with Flask development.
(Optional)To try GitHub Copilot, aGitHub Copilot account. A 30-day free trial is available.
Skip to the end
If you just want to see the sample app in this tutorial running in Azure, just run the following commands in theAzure Cloud Shell, and follow the prompt:
mkdir msdocs-flask-postgresql-sample-app
cd msdocs-flask-postgresql-sample-app
azd init --template msdocs-flask-postgresql-sample-app
azd up
mkdir msdocs-flask-postgresql-sample-app
cd msdocs-flask-postgresql-sample-app
azd init --template msdocs-flask-postgresql-sample-app
azd up
1. Run the sample
First, you set up a sample data-driven app as a starting point. For your convenience, thesample repository, includes adev containerconfiguration. The dev container has everything you need to develop an application, including the database, cache, and all environment variables needed by the sample application. The dev container can run in aGitHub codespace, which means you can run the sample on any computer with a web browser.
Note
If you are following along with this tutorial with your own app, look at therequirements.txtfile description inREADME.mdto see what packages you'll need.
Step 1:In a new browser window:
Sign in to your GitHub account.
Navigate tohttps://github.com/Azure-Samples/msdocs-flask-postgresql-sample-app/fork.
UnselectCopy the main branch only. You want all the branches.
SelectCreate fork.

Step 2:In the GitHub fork:
Selectmain>starter-no-infrafor the starter branch. This branch contains just the sample project and no Azure-related files or configuration.
SelectCode>Create codespace on starter-no-infra.
The codespace takes a few minutes to set up, and it runspip install -r requirements.txtfor your repository at the end.
pip install -r requirements.txt

Step 3:In the codespace terminal:
Run database migrations withflask db upgrade.
flask db upgrade
Run the app withflask run.
flask run
When you see the notificationYour application running on port 5000 is available., selectOpen in Browser.
You should see the sample application in a new browser tab.
To stop the application, typeCtrl+C.
Your application running on port 5000 is available.
Ctrl
C

Tip
You can askGitHub Copilotabout this repository. For example:
@workspace What does this project do?
@workspace What does the .devcontainer folder do?
Having issues? Check theTroubleshooting section.
2. Create App Service and PostgreSQL
In this step, you create the Azure resources. The steps used in this tutorial create a set of secure-by-default resources that include App Service and Azure Database for PostgreSQL. For the creation process, you specify:
TheNamefor the web app. It's used as part of the DNS name for your app in the form ofhttps://<app-name>-<hash>.<region>.azurewebsites.net.
https://<app-name>-<hash>.<region>.azurewebsites.net
TheRegionto run the app physically in the world. It's also used as part of the DNS name for your app.
TheRuntime stackfor the app. It's where you select the version of Python to use for your app.
TheHosting planfor the app. It's the pricing tier that includes the set of features and scaling capacity for your app.
TheResource Groupfor the app. A resource group lets you group (in a logical container) all the Azure resources needed for the application.
Sign in to theAzure portaland follow these steps to create your Azure App Service resources.
Step 1:In the Azure portal:
Enter "web app database" in the search bar at the top of the Azure portal.
Select the item labeledWeb App + Databaseunder theMarketplaceheading.
You can also navigate to thecreation wizarddirectly.

Step 2:In theCreate Web App + Databasepage, fill out the form as follows.
Resource Group: SelectCreate newand use a name ofmsdocs-flask-postgres-tutorial.
Region: Any Azure region near you.
Name:msdocs-python-postgres-XYZ.
Runtime stack:Python 3.12.
Database:PostgreSQL - Flexible Serveris selected by default as the database engine. The server name and database name are also set by default to appropriate values.
Add Azure Cache for Redis?:No.
Hosting plan:Basic. When you're ready, you canscale upto a production pricing tier.
SelectReview + create.
After validation completes, selectCreate.

Step 3:The deployment takes a few minutes to complete. Once deployment completes, select theGo to resourcebutton. You're taken directly to the App Service app, but the following resources are created:
Resource group: The container for all the created resources.
App Service plan: Defines the compute resources for App Service. A Linux plan in theBasictier is created.
App Service: Represents your app and runs in the App Service plan.
Virtual network: Integrated with the App Service app and isolates back-end network traffic.
Network interfaces: Represents private IP addresses, one for each of the private endpoints.
Azure Database for PostgreSQL flexible server: Accessible only from within the virtual network. A database and a user are created for you on the server.
Private DNS zones: Enables DNS resolution of the key vault and the database server in the virtual network.

3. Secure connection secrets
The creation wizard generated the connectivity variables for you already asapp settings. However, the security best practice is to keep secrets out of App Service completely. You'll move your secrets to a key vault and change your app setting toKey Vault referenceswith the help of Service Connectors.
Step 1: Retrieve the existing connection string
In the left menu of the App Service page, selectSettings > Environment variables.
SelectAZURE_POSTGRESQL_CONNECTIONSTRING.
InAdd/Edit application setting, in theValuefield, find thepassword=part at the end of the string.
Copy the password string afterPassword=for use later.
This app setting lets you connect to the Postgres database secured behind a private endpoint. However, the secret is saved directly in the App Service app, which isn't the best. You'll change this.

Step 2:  Create a key vault for secure management of secrets
In the top search bar, type "key vault", then selectMarketplace>Key Vault.
InResource Group, selectmsdocs-python-postgres-tutorial.
InKey vault name, type a name that consists of only letters and numbers.
InRegion, set it to the same location as the resource group.

Step 3: Secure the key vault with a Private Endpoint
Select theNetworkingtab.
UnselectEnable public access.
SelectCreate a private endpoint.
InResource Group, selectmsdocs-python-postgres-tutorial.
In the dialog, inLocation, select the same location as your App Service app.
InName, typemsdocs-python-postgres-XYZVaultEndpoint.
InVirtual network, selectmsdocs-python-postgres-XYZVnet.
InSubnet,msdocs-python-postgres-XYZSubnet.
SelectOK.
SelectReview + create, then selectCreate. Wait for the key vault deployment to finish. You should see "Your deployment is complete."

Step 4: Configure the PostgreSQL connector
In the top search bar, typemsdocs-python-postgres, then select the App Service resource calledmsdocs-python-postgres-XYZ.
In the App Service page, in the left menu, selectSettings > Service Connector. There's already a connector, which the app creation wizard created for you.
Select checkbox next to the PostgreSQL connector, then selectEdit.
InClient type, selectDjango. Even though you have a Flask app, theDjango client type in the PostgreSQL service connectorgives you database variables in separate settings instead of one connection string. The separate variables are easier for you to use in your application code, which usesSQLAlchemyto connect to the database.
Select theAuthenticationtab.
InPassword, paste the password you copied earlier.
SelectStore Secret in Key Vault.
UnderKey Vault Connection, selectCreate new.
ACreate connectiondialog is opened on top of the edit dialog.

Step 5: Establish the Key Vault connection
In theCreate connectiondialog for the Key Vault connection, inKey Vault, select the key vault you created earlier.
SelectReview + Create.
When validation completes, selectCreate.

Step 6: Finalize the PostgreSQL connector settings
You're back in the edit dialog fordefaultConnector. In theAuthenticationtab, wait for the key vault connector to be created. When it's finished, theKey Vault Connectiondropdown automatically selects it.
SelectNext: Networking.
SelectSave. Wait until theUpdate succeedednotification appears.

Step 7: Verify the Key Vault integration
From the left menu, selectSettings > Environment variablesagain.
Next toAZURE_POSTGRESQL_PASSWORD, selectShow value. The value should be@Microsoft.KeyVault(...), which means that it's akey vault referencebecause the secret is now managed in the key vault.
@Microsoft.KeyVault(...)

To summarize, the process for securing your connection secrets involved:
Retrieving the connection secrets from the App Service app's environment variables.
Creating a key vault.
Creating a Key Vault connection with the system-assigned managed identity.
Updating the service connectors to store the secrets in the key vault.
Having issues? Check theTroubleshooting section.
4. Deploy sample code
In this step, you configure GitHub deployment using GitHub Actions. It's just one of many ways to deploy to App Service, but also a great way to have continuous integration in your deployment process. By default, everygit pushto your GitHub repository kicks off the build and deploy action.
git push
Step 1:In the left menu, selectDeployment>Deployment Center.

Step 2:In the Deployment Center page:
InSource, selectGitHub. By default,GitHub Actionsis selected as the build provider.
Sign in to your GitHub account and follow the prompt to authorize Azure.
InOrganization, select your account.
InRepository, selectmsdocs-flask-postgresql-sample-app.
InBranch, selectstarter-no-infra. This is the same branch that you worked in with your sample app, without any Azure-related files or configuration.
ForAuthentication type, selectUser-assigned identity.
In the top menu, selectSave.
App Service commits a workflow file into the chosen GitHub repository, in the.github/workflowsdirectory.
By default, the deployment centercreates a user-assigned identityfor the workflow to authenticate using Microsoft Entra (OIDC authentication). For alternative authentication options, seeDeploy to App Service using GitHub Actions.
.github/workflows

Step 3:Back in the GitHub codespace of your sample fork, rungit pull origin starter-no-infra.
This pulls the newly committed workflow file into your codespace.
git pull origin starter-no-infra

Step 4 (Option 1: with GitHub Copilot):
Start a new chat session by selecting theChatview, then selecting+.
Ask, "@workspace How does the app connect to the database?" Copilot might give you some explanation aboutSQLAlchemyhow it's connection URI is configured inazureproject/development.pyandazureproject/production.py.
SQLAlchemy
Ask, "@workspace In production mode, my app is running in an App Service web app, which uses Azure Service Connector to connect to a PostgreSQL flexible server using the Django client type. What are the environment variable names I need to use?" Copilot might give you a code suggestion similar to the one in theOption 2: without GitHub Copilotsteps below and even tell you to make the change in theazureproject/production.pyfile.
Openazureproject/production.pyin the explorer and add the code suggestion.
GitHub Copilot doesn't give you the same response every time, and it's not always correct. You might need to ask more questions to fine-tune its response. For tips, seeWhat can I do with GitHub Copilot in my codespace?.

Step 4 (Option 2: without GitHub Copilot):
OpenProgram.csin the explorer.
Find the commented code (lines 3-8) and uncomment it.
This creates a connection string for SQLAlchemy by usingAZURE_POSTGRESQL_USER,AZURE_POSTGRESQL_PASSWORD,AZURE_POSTGRESQL_HOST, andAZURE_POSTGRESQL_NAME.
AZURE_POSTGRESQL_USER
AZURE_POSTGRESQL_PASSWORD
AZURE_POSTGRESQL_HOST
AZURE_POSTGRESQL_NAME

Step 5:
Select theSource Controlextension.
In the textbox, type a commit message likeConfigure Azure database connecton. Or, selectand let GitHub Copilot generate a commit message for you.
Configure Azure database connecton
SelectCommit, then confirm withYes.
SelectSync changes 1, then confirm withOK.

Step 6:Back in the Deployment Center page in the Azure portal:
Select theLogstab, then selectRefreshto see the new deployment run.
In the log item for the deployment run, select theBuild/Deploy Logsentry with the latest timestamp.

Step 7:You're taken to your GitHub repository and see that the GitHub action is running. The workflow file defines two separate stages, build and deploy. Wait for the GitHub run to show a status ofSuccess. It takes about 5 minutes.

Having issues? Check theTroubleshooting guide.
5. Generate database schema
With the PostgreSQL database protected by the virtual network, the easiest way to runFlask database migrationsis in an SSH session with the Linux container in App Service.
Step 1:Back in the App Service page, in the left menu,
SelectDevelopment Tools>SSH.
SelectGo.

Step 2:In the SSH session, runflask db upgrade. If it succeeds, App Service isconnecting successfully to the database.
flask db upgrade

Tip
In the SSH session, only changes to files in/homecan persist beyond app restarts. Changes outside of/homearen't persisted.
/home
/home
Having issues? Check theTroubleshooting section.
6. Browse to the app
Step 1:In the App Service page:
From the left menu, selectOverview.
Select the URL of your app.

Step 2:Add a few restaurants to the list.
Congratulations, you're running a web app in Azure App Service, with secure connectivity to Azure Database for PostgreSQL.

7. Stream diagnostic logs
Azure App Service captures all console logs to help you diagnose issues with your application. The sample app includesprint()statements to demonstrate this capability as shown below.
print()
@app.route('/', methods=['GET'])
def index():
    print('Request for index page received')
    restaurants = Restaurant.query.all()
    return render_template('index.html', restaurants=restaurants)
@app.route('/', methods=['GET'])
def index():
    print('Request for index page received')
    restaurants = Restaurant.query.all()
    return render_template('index.html', restaurants=restaurants)
Step 1:In the App Service page:
From the left menu, selectMonitoring>App Service logs.
UnderApplication logging, selectFile System.
In the top menu, selectSave.

Step 2:From the left menu, selectLog stream. You see the logs for your app, including platform logs and logs from inside the container.

Learn more about logging in Python apps in the series onsetting up Azure Monitor for your Python application.
8. Clean up resources
When you're finished, you can delete all of the resources from your Azure subscription by deleting the resource group.
Step 1:In the search bar at the top of the Azure portal:
Enter the resource group name.
Select the resource group.

Step 2:In the resource group page, selectDelete resource group.

Step 3:
Enter the resource group name to confirm your deletion.
SelectDelete.

2. Create Azure resources and deploy a sample app
In this step, you create the Azure resources and deploy a sample app to App Service on Linux. The steps used in this tutorial create a set of secure-by-default resources that include App Service and Azure Database for PostgreSQL.
The dev container already has theAzure Developer CLI(AZD).
From the repository root, runazd init.azd init --template python-app-service-postgresql-infra
From the repository root, runazd init.
azd init
azd init --template python-app-service-postgresql-infra
azd init --template python-app-service-postgresql-infra
When prompted, give the following answers:QuestionAnswerThe current directory is not empty. Would you like to initialize a project here in '<your-directory>'?YWhat would you like to do with these files?Keep my existing files unchangedEnter a new environment nameType a unique name. The AZD template uses this name as part of the DNS name of your web app in Azure (<app-name>-<hash>.azurewebsites.net). Alphanumeric characters and hyphens are allowed.
When prompted, give the following answers:
<app-name>-<hash>.azurewebsites.net
Sign into Azure by running theazd auth logincommand and following the prompt:azd auth login
Sign into Azure by running theazd auth logincommand and following the prompt:
azd auth login
azd auth login
azd auth login
Create the necessary Azure resources with theazd provisioncommand. Follow the prompt to select the desired subscription and location for the Azure resources.azd provisionTheazd provisioncommand takes about 15 minutes to complete (the Redis cache takes the most time). Later, you'll modify your code to work with App Service and deploy the changes withazd deploy. While it's running, the command provides messages about the provisioning and deployment process, including a link to the deployment in Azure.This AZD template contains files (azure.yamland theinfradirectory) that generate a secure-by-default architecture with the following Azure resources:Resource group: The container for all the created resources.App Service plan: Defines the compute resources for App Service. A Linux plan in theBasictier is created.App Service: Represents your app and runs in the App Service plan.Virtual network: Integrated with the App Service app and isolates back-end network traffic.Private endpoints: Access endpoints for the key vault and the Redis cache in the virtual network.Network interfaces: Represents private IP addresses, one for each of the private endpoints.Azure Database for PostgreSQL flexible server: Accessible only from within the virtual network. A database and a user are created for you on the server.Private DNS zone: Enables DNS resolution of the PostgreSQL server in the virtual network.Log Analytics workspace: Acts as the target container for your app to ship its logs, where you can also query the logs.Azure Cache for Redis: Accessible only from behind its private endpoint.Key vault: Accessible only from behind its private endpoint. Used to manage secrets for the App Service app.Once the command finishes creating resources and deploying the application code the first time, the deployed sample app doesn't work yet because you must make small changes to make it connect to the database in Azure.
Create the necessary Azure resources with theazd provisioncommand. Follow the prompt to select the desired subscription and location for the Azure resources.
azd provision
azd provision
azd provision
Theazd provisioncommand takes about 15 minutes to complete (the Redis cache takes the most time). Later, you'll modify your code to work with App Service and deploy the changes withazd deploy. While it's running, the command provides messages about the provisioning and deployment process, including a link to the deployment in Azure.
azd provision
azd deploy
This AZD template contains files (azure.yamland theinfradirectory) that generate a secure-by-default architecture with the following Azure resources:
Resource group: The container for all the created resources.
App Service plan: Defines the compute resources for App Service. A Linux plan in theBasictier is created.
App Service: Represents your app and runs in the App Service plan.
Virtual network: Integrated with the App Service app and isolates back-end network traffic.
Private endpoints: Access endpoints for the key vault and the Redis cache in the virtual network.
Network interfaces: Represents private IP addresses, one for each of the private endpoints.
Azure Database for PostgreSQL flexible server: Accessible only from within the virtual network. A database and a user are created for you on the server.
Private DNS zone: Enables DNS resolution of the PostgreSQL server in the virtual network.
Log Analytics workspace: Acts as the target container for your app to ship its logs, where you can also query the logs.
Azure Cache for Redis: Accessible only from behind its private endpoint.
Key vault: Accessible only from behind its private endpoint. Used to manage secrets for the App Service app.
Once the command finishes creating resources and deploying the application code the first time, the deployed sample app doesn't work yet because you must make small changes to make it connect to the database in Azure.
Having issues? Check theTroubleshooting section.
3. Use the database connection string
The AZD template you use generated the connectivity variables for you already asapp settingsand outputs the them to the terminal for your convenience. App settings are one way to keep connection secrets out of your code repository.
In the AZD output, find the settingsAZURE_POSTGRESQL_USER,AZURE_POSTGRESQL_PASSWORD,AZURE_POSTGRESQL_HOST, andAZURE_POSTGRESQL_NAME. To keep secrets safe, only the setting names are displayed. They look like this in the AZD output:App Service app has the following connection settings:
         - AZURE_POSTGRESQL_NAME
         - AZURE_POSTGRESQL_HOST
         - AZURE_POSTGRESQL_USER
         - AZURE_POSTGRESQL_PASSWORD
         - AZURE_REDIS_CONNECTIONSTRING
         - AZURE_KEYVAULT_RESOURCEENDPOINT
         - AZURE_KEYVAULT_SCOPE
In the AZD output, find the settingsAZURE_POSTGRESQL_USER,AZURE_POSTGRESQL_PASSWORD,AZURE_POSTGRESQL_HOST, andAZURE_POSTGRESQL_NAME. To keep secrets safe, only the setting names are displayed. They look like this in the AZD output:
AZURE_POSTGRESQL_USER
AZURE_POSTGRESQL_PASSWORD
AZURE_POSTGRESQL_HOST
AZURE_POSTGRESQL_NAME
App Service app has the following connection settings:
         - AZURE_POSTGRESQL_NAME
         - AZURE_POSTGRESQL_HOST
         - AZURE_POSTGRESQL_USER
         - AZURE_POSTGRESQL_PASSWORD
         - AZURE_REDIS_CONNECTIONSTRING
         - AZURE_KEYVAULT_RESOURCEENDPOINT
         - AZURE_KEYVAULT_SCOPE
For your convenience, the AZD template shows you the direct link to the app's app settings page. Find the link and open it in a new browser tab.
For your convenience, the AZD template shows you the direct link to the app's app settings page. Find the link and open it in a new browser tab.
Having issues? Check theTroubleshooting section.
4. Modify sample code and redeploy
With GitHub Copilot
Without GitHub Copilot
In the GitHub codespace, start a new chat session by selecting theChatview, then selecting+.
In the GitHub codespace, start a new chat session by selecting theChatview, then selecting+.
Ask, "@workspace How does the app connect to the database?" Copilot might give you some explanation aboutSQLAlchemyhow it's connection URI is configured inazureproject/development.pyandazureproject/production.py.
Ask, "@workspace How does the app connect to the database?" Copilot might give you some explanation aboutSQLAlchemyhow it's connection URI is configured inazureproject/development.pyandazureproject/production.py.
SQLAlchemy
Ask, "@workspace In production mode, my app is running in an App Service web app, which uses Azure Service Connector to connect to a PostgreSQL flexible server using the Django client type. What are the environment variable names I need to use?" Copilot might give you a code suggestion similar to the one in theOption 2: without GitHub Copilotsteps below and even tell you to make the change in theazureproject/production.pyfile.
Ask, "@workspace In production mode, my app is running in an App Service web app, which uses Azure Service Connector to connect to a PostgreSQL flexible server using the Django client type. What are the environment variable names I need to use?" Copilot might give you a code suggestion similar to the one in theOption 2: without GitHub Copilotsteps below and even tell you to make the change in theazureproject/production.pyfile.
Openazureproject/production.pyin the explorer and add the code suggestion.GitHub Copilot doesn't give you the same response every time, and it's not always correct. You might need to ask more questions to fine-tune its response. For tips, seeWhat can I do with GitHub Copilot in my codespace?.
Openazureproject/production.pyin the explorer and add the code suggestion.
GitHub Copilot doesn't give you the same response every time, and it's not always correct. You might need to ask more questions to fine-tune its response. For tips, seeWhat can I do with GitHub Copilot in my codespace?.
In the terminal, runazd deploy.azd deploy
In the terminal, runazd deploy.
azd deploy
azd deploy
azd deploy
You need to use the four app settings for connectivity in App service. Openazureproject/production.py, uncomment the following lines (lines 3-8), and save the file:DATABASE_URI = 'postgresql+psycopg2://{dbuser}:{dbpass}@{dbhost}/{dbname}'.format(
    dbuser=os.getenv('AZURE_POSTGRESQL_USER'),
    dbpass=os.getenv('AZURE_POSTGRESQL_PASSWORD'),
    dbhost=os.getenv('AZURE_POSTGRESQL_HOST'),
    dbname=os.getenv('AZURE_POSTGRESQL_NAME')
)Your application code is now configured to connect to the PostgreSQL database in Azure. If you want, openapp.pyand see how theDATABASE_URIenvironment variable is used.
You need to use the four app settings for connectivity in App service. Openazureproject/production.py, uncomment the following lines (lines 3-8), and save the file:
DATABASE_URI = 'postgresql+psycopg2://{dbuser}:{dbpass}@{dbhost}/{dbname}'.format(
    dbuser=os.getenv('AZURE_POSTGRESQL_USER'),
    dbpass=os.getenv('AZURE_POSTGRESQL_PASSWORD'),
    dbhost=os.getenv('AZURE_POSTGRESQL_HOST'),
    dbname=os.getenv('AZURE_POSTGRESQL_NAME')
)
DATABASE_URI = 'postgresql+psycopg2://{dbuser}:{dbpass}@{dbhost}/{dbname}'.format(
    dbuser=os.getenv('AZURE_POSTGRESQL_USER'),
    dbpass=os.getenv('AZURE_POSTGRESQL_PASSWORD'),
    dbhost=os.getenv('AZURE_POSTGRESQL_HOST'),
    dbname=os.getenv('AZURE_POSTGRESQL_NAME')
)
Your application code is now configured to connect to the PostgreSQL database in Azure. If you want, openapp.pyand see how theDATABASE_URIenvironment variable is used.
app.py
DATABASE_URI
In the terminal, runazd deploy.azd deploy
In the terminal, runazd deploy.
azd deploy
azd deploy
azd deploy
Note
If you runazd up, it combinesazd package,azd provision, andazd deploy. The reason you didn't do it at the beginning was because you didn't have the PostgreSQL connection settings to modify your code with yet. If you ranazd upthen, the deploy stage would stall because the Gunicorn server wouldn't be able to start the app without valid connection settings.
azd up
azd package
azd provision
azd deploy
azd up
Having issues? Check theTroubleshooting section.
5. Generate database schema
With the PostgreSQL database protected by the virtual network, the easiest way to runFlask database migrationsis in an SSH session with the Linux container in App Service.
In the AZD output, find the URL for the SSH session and navigate to it in the browser. It looks like this in the output:Open SSH session to App Service container at: https://<app-name>.scm.azurewebsites.net/webssh/host
In the AZD output, find the URL for the SSH session and navigate to it in the browser. It looks like this in the output:
Open SSH session to App Service container at: https://<app-name>.scm.azurewebsites.net/webssh/host
In the SSH session, runflask db upgrade. If it succeeds, App Service isconnecting successfully to the database.NoteOnly changes to files in/homecan persist beyond app restarts. Changes outside of/homearen't persisted.
In the SSH session, runflask db upgrade. If it succeeds, App Service isconnecting successfully to the database.
flask db upgrade

Note
Only changes to files in/homecan persist beyond app restarts. Changes outside of/homearen't persisted.
/home
/home
Having issues? Check theTroubleshooting section.
6. Browse to the app
In the AZD output, find the URL of your app and navigate to it in the browser. The URL looks like this in the AZD output:Deploying services (azd deploy)

   (â) Done: Deploying service web
   - Endpoint: https://<app-name>.azurewebsites.net/
In the AZD output, find the URL of your app and navigate to it in the browser. The URL looks like this in the AZD output:
Deploying services (azd deploy)

   (â) Done: Deploying service web
   - Endpoint: https://<app-name>.azurewebsites.net/
Add a few restaurants to the list.Congratulations, you're running a web app in Azure App Service, with secure connectivity to Azure Database for PostgreSQL.
Add a few restaurants to the list.

Congratulations, you're running a web app in Azure App Service, with secure connectivity to Azure Database for PostgreSQL.
Having issues? Check theTroubleshooting section.
7. Stream diagnostic logs
Azure App Service can capture console logs to help you diagnose issues with your application. For convenience, the AZD template alreadyenables logging to the local file systemand isshipping the logs to a Log Analytics workspace.
The sample application includesprint()statements to demonstrate this capability, as shown in the following snippet.
print()
@app.route('/', methods=['GET'])
def index():
    print('Request for index page received')
    restaurants = Restaurant.query.all()
    return render_template('index.html', restaurants=restaurants)
@app.route('/', methods=['GET'])
def index():
    print('Request for index page received')
    restaurants = Restaurant.query.all()
    return render_template('index.html', restaurants=restaurants)
In the AZD output, find the link to stream App Service logs and navigate to it in the browser. The link looks like this in the AZD output:
Stream App Service logs at: https://portal.azure.com/#@/resource/subscriptions/<subscription-guid>/resourceGroups/<group-name>/providers/Microsoft.Web/sites/<app-name>/logStream
Learn more about logging in Python apps in the series onsetting up Azure Monitor for your Python application.
Having issues? Check theTroubleshooting section.
8. Clean up resources
To delete all Azure resources in the current deployment environment, runazd downand follow the prompts.
azd down
azd down
azd down
Troubleshooting
Listed below are issues you might encounter while trying to work through this tutorial and steps to resolve them.
If you can't connect to the SSH session, then the app itself has failed to start. Check thediagnostic logsfor details. For example, if you see an error likeKeyError: 'AZURE_POSTGRESQL_HOST', it might mean that the environment variable is missing (you might have removed the app setting).
KeyError: 'AZURE_POSTGRESQL_HOST'
If you encounter any errors related to connecting to the database, check if the app settings (AZURE_POSTGRESQL_USER,AZURE_POSTGRESQL_PASSWORD,AZURE_POSTGRESQL_HOST, andAZURE_POSTGRESQL_NAME) were changed or deleted. Without that connection string, the migrate command can't communicate with the database.
AZURE_POSTGRESQL_USER
AZURE_POSTGRESQL_PASSWORD
AZURE_POSTGRESQL_HOST
AZURE_POSTGRESQL_NAME
Frequently asked questions
How much does this setup cost?
How do I connect to the PostgreSQL server that's secured behind the virtual network with other tools?
How does local app development work with GitHub Actions?
How do I debug errors during the GitHub Actions deployment?
I don't have permissions to create a user-assigned identity
What can I do with GitHub Copilot in my codespace?
Pricing for the created resources is as follows:
The App Service plan is created inBasictier and can be scaled up or down. SeeApp Service pricing.
The PostgreSQL flexible server is created in the lowest burstable tierStandard_B1ms, with the minimum storage size, which can be scaled up or down. SeeAzure Database for PostgreSQL pricing.
The virtual network doesn't incur a charge unless you configure extra functionality, such as peering. SeeAzure Virtual Network pricing.
The private DNS zone incurs a small charge. SeeAzure DNS pricing.
For basic access from a command-line tool, you can runpsqlfrom the app's SSH session.
psql
To connect from a desktop tool, your machine must be within the virtual network. For example, it could be an Azure VM that's connected to one of the subnets, or a machine in an on-premises network that has asite-to-site VPNconnection with the Azure virtual network.
You can alsointegrate Azure Cloud Shellwith the virtual network.
Using the autogenerated workflow file from App Service as an example, eachgit pushkicks off a new build and deployment run. From a local clone of the GitHub repository, you make the desired updates and push to GitHub. For example:
git push
git add .
git commit -m "<some-message>"
git push origin main
git add .
git commit -m "<some-message>"
git push origin main
If a step fails in the autogenerated GitHub workflow file, try modifying the failed command to generate more verbose output. For example, you can get more output from thepythoncommand by adding the-doption. Commit and push your changes to trigger another deployment to App Service.
python
-d
SeeSet up GitHub Actions deployment from the Deployment Center.
You might have noticed that the GitHub Copilot chat view was already there for you when you created the codespace. For your convenience, we include the GitHub Copilot chat extension in the container definition (see.devcontainer/devcontainer.json). However, you need aGitHub Copilot account(30-day free trial available).
A few tips for you when you talk to GitHub Copilot:
In a single chat session, the questions and answers build on each other and you can adjust your questions to fine-tune the answer you get.
By default, GitHub Copilot doesn't have access to any file in your repository. To ask questions about a file, open the file in the editor first.
To let GitHub Copilot have access to all of the files in the repository when preparing its answers, begin your question with@workspace. For more information, seeUse the@workspaceagent.
@workspace
In the chat session, GitHub Copilot can suggest changes and (with@workspace) even where to make the changes, but it's not allowed to make the changes for you. It's up to you to add the suggested changes and test it.
@workspace
Next steps
Advance to the next tutorial to learn how to secure your app with a custom domain and certificate.
Secure with custom domain and certificate
Learn how App Service runs a Python app:
Configure Python app
Feedback
Was this page helpful?
Additional resources