Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
SDKs and REST APIs
Article
2025-02-14
35 contributors
In this article
Azure Communication Services capabilities are conceptually organized into discrete areas based on their functional area. Most areas have fully open-source SDKs programmed against published REST APIs that you can use directly over the Internet. The Calling SDK uses proprietary network interfaces and is closed-source.
The following tables summarize these areas and availability of REST APIs and SDK libraries. We note whether APIs and SDKs are intended for end-user clients or trusted service environments. You shouldn't directly access APIs such as SMS using end-user devices in low trust environments.
You can accelerate development of Calling and Chat applications using theAzure Communication Services UI library. The customizable UI library provides open-source UI components for Web and mobile apps, and a Microsoft Teams theme.
Creating a practice to use the latest SDK
Browsers and operating systems are constantly evolving to support the latest enhancements and to fix existing bugs. Using the most recent Azure Communication Services SDK can help you achieve the best overall end user experience for your application when used with updated browsers and operating system updates. The most update Azure Communication Services SDK offers many benefits, such as better performance, security, compatibility, quality, and usability. Updating allows you to access the newest features and updates that are regularly added to the browser and operating system. Azure Communication Services SDKs are updated frequently (approximately every six weeks to once a quarter). We recommend creating a process to ensure that you're always updating to the most recent SDKs.
SDKs
Languages and publishing locations
Publishing locations for individual SDK packages:
SDK platform support details
Support for Android API Level 21 or Higher
Support for Java 7 or higher
Support for Android Studio 2.0
The Android ecosystem is extensive, encompassing various versions and specialized platforms designed for diverse types of devices. The next table lists the Android platforms currently supported:
Note
Weonly support video calls on phones and tablets. For use cases involving video on nonstandard devices or platforms (such as smart glasses or custom devices), we suggestcontacting usearly in your development process to help determine the most suitable integration approach.
If you found issues during your implementation, seethe troubleshooting guide.
Support for iOS 10.0+ at build time, and iOS 12.0+ at run time
Xcode 12.0+
Support foriPadOS13.0+
Calling supports the following platforms:
UWP with .NET Native or C++/WinRTWindows 10/11 10.0.17763 - 10.0.22621.0Windows Server 2019/2022 10.0.17763 - 10.0.22621.0
Windows 10/11 10.0.17763 - 10.0.22621.0
Windows Server 2019/2022 10.0.17763 - 10.0.22621.0
WinUI3 with .NET 6Windows 10/11 10.0.17763.0 - net6.0-windows10.0.22621.0Windows Server 2019/2022 10.0.17763.0 - net6.0-windows10.0.22621.0
Windows 10/11 10.0.17763.0 - net6.0-windows10.0.22621.0
Windows Server 2019/2022 10.0.17763.0 - net6.0-windows10.0.22621.0
All other Communication Services packages target .NET Standard 2.0, which supports the following platforms:
Support via .NET Framework 4.6.1Windows 10, 8.1, 8 and 7Windows Server 2012 R2, 2012 and 2008 R2 SP1
Windows 10, 8.1, 8 and 7
Windows Server 2012 R2, 2012 and 2008 R2 SP1
Support via .NET Core 2.0:Windows 10 (1607+), 7 SP1+, 8.1Windows Server 2008 R2 SP1+Max OS X 10.12+Linux multiple versions/distributionsUWP 10.0.16299 (RS3) September 2017Unity 2018.1Mono 5.4Xamarin iOS 10.14Xamarin Mac 3.8
Windows 10 (1607+), 7 SP1+, 8.1
Windows Server 2008 R2 SP1+
Max OS X 10.12+
Linux multiple versions/distributions
UWP 10.0.16299 (RS3) September 2017
Unity 2018.1
Mono 5.4
Xamarin iOS 10.14
Xamarin Mac 3.8
Note
Unpackaged appis currently not supported
If you want to improve your app, seethe Best Practices article. It provides recommendations and a checklist to review before releasing your app.
REST APIs
Communication Services APIs are documented with otherAzure REST APIs. This documentation describes how to structure your HTTP messages and offers guidance for usingPostman. REST interface documentation is also published in OpenAPI format onGitHub. You can find throttling limits for individual APIs inservice limits.
API stability expectations
Important
This section provides guidance on REST APIs and SDKs markedstable. APIs marked prerelease, preview, or beta may be changed or deprecatedwithout notice.
In the future we may retire versions of the Communication Services SDKs, and we may introduce breaking changes to our REST APIs and released SDKs. Azure Communication Servicesgenerallyfollows two supportability policies for retiring service versions:
You're notified at least three years before being required to change code due to a Communication Services interface change. All documented REST APIs and SDK APIs generally enjoy at least three years warning before interfaces are decommissioned.
You're notified at least one year before having to update SDK assemblies to the latest minor version. These required updates shouldn't require any code changes because they're in the same major version. Using the latest SDK is especially important for the Calling and Chat libraries that real-time components that often require security and performance updates. We strongly encourage you to keep all your Communication Services SDKs updated.
API and SDK decommissioning examples
You've integrated the v24 version of the SMS REST API into your application. Azure Communication releases v25.
You get three years warning before these APIs stop working and are forced to update to v25. This update might require a code change.
You've integrated the v2.02 version of the Calling SDK into your application. Azure Communication releases v2.05.
You may be required to update to the v2.05 version of the Calling SDK within 12 months of the release of v2.05. The update should be a replacement of the artifact without requiring a code change because v2.05 is in the v2 major version and has no breaking changes.
Next steps
For more information, see the following SDK overviews:
Calling SDK Overview
Call Automation SDK Overview
Job Router SDK Overview
Chat SDK Overview
SMS SDK Overview
Email SDK Overview
Advanced Messaging SDK Overview
To get started with Azure Communication Services:
Create an Azure Communication Services resource
GenerateUser Access Tokens
Feedback
Was this page helpful?
Additional resources