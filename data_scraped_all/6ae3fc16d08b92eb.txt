Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Architecture pattern for mission-critical workloads on Azure
Article
2022-12-16
7 contributors
In this article
This article presents a key pattern for mission-critical architectures on Azure. Apply this pattern when you start your design process, and then select components that are best suited for your business requirements. The article recommends anorth stardesign approach and includes other examples with common technology components.
We recommend that you evaluatethe key design areas, define the critical user and system flows that use the  underlying components, and develop a matrix of Azure resources and their configuration while keeping in mind the following characteristics.
Important
This article is part of theAzure Well-Architected mission-critical workloadseries. If you aren't familiar with this series, we recommend you start withwhat is a mission-critical workload?
Core architecture pattern

Global resources
Certain resources are globally shared by resources deployed within each region. Common examples are resources that are used to distribute traffic across multiple regions, store permanent state for the whole application, and monitor resources for them.
Regional stamp resources
The stamp contains the application and resources that participate in completing business transactions. A stamp typically corresponds to a deployment to an Azure region. Although a region can have more than one stamp.
Regional resources
A system can have resources that are deployed in region but outlive the stamp resources. For example, observability resources that monitor resources at the regional level, including the stamps.
Baseline architectures for mission-critical workloads
These baseline examples serve as the recommended north star architecture for mission-critical applications. The baseline strongly recommends containerization and using a container orchestrator for the application platform. The baseline uses Azure Kubernetes Service (AKS).
Refer toWell-Architected mission-critical workloads: Containerization.
Baseline architectureIf you're just starting your mission-critical journey, use this architecture as a reference. The workload is accessed over a public endpoint and doesn't require private network connectivity to other company resources.
If you're just starting your mission-critical journey, use this architecture as a reference. The workload is accessed over a public endpoint and doesn't require private network connectivity to other company resources.
Baseline with network controlsThis architecture builds on the baseline architecture. The design is extended to provide strict network controls to prevent unauthorized public access from the internet to the workload resources.
This architecture builds on the baseline architecture. The design is extended to provide strict network controls to prevent unauthorized public access from the internet to the workload resources.
Baseline in Azure landing zonesThis architecture is appropriate if you're deploying the workload in an enterprise setup where integration within a broader organization is required. The workload uses centralized shared services, needs on-premises connectivity, and integrates with other workloads within the enterprise. It's deployed in an Azure landing zone subscription that inherits from the Corp. management group.
This architecture is appropriate if you're deploying the workload in an enterprise setup where integration within a broader organization is required. The workload uses centralized shared services, needs on-premises connectivity, and integrates with other workloads within the enterprise. It's deployed in an Azure landing zone subscription that inherits from the Corp. management group.
Baseline with App ServicesThis architecture extends the baseline reference by considering App Services as the primary application hosting technology, providing an easy to use environment for container deployments.
This architecture extends the baseline reference by considering App Services as the primary application hosting technology, providing an easy to use environment for container deployments.
Design areas
We recommend that you use the provided design guidance to navigate the key design decisions to reach an optimal solution. For information, seeWhat are the key design areas?
Next step
Review the best practices for designing mission-critical application scenarios.
Application design
Feedback
Was this page helpful?
Additional resources