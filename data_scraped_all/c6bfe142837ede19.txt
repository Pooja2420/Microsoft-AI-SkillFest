Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Azure Cosmos DB service quotas
Article
2024-09-26
36 contributors
In this article
APPLIES TO:NoSQLMongoDBCassandraGremlinTable
This article provides an overview of the default quotas offered to different resources in the Azure Cosmos DB.
Storage and database operations
After you create an Azure Cosmos DB account under your subscription, you can manage data in your account bycreating databases, containers, and items.
Provisioned throughput
You can allocate throughput at a container-level or a database-level in terms ofrequest units (RU/s or RUs). The following table lists the limits for storage and throughput per container/database. Storage refers to the combined amount of data and index storage.
Â¹ You can increase Maximum RUs per container or database byfiling an Azure support ticket.
Â² To learn about best practices for managing workloads that have partition keys requiring higher limits for storage or throughput, seeCreate a synthetic partition key. If your workload has already reached the logical partition limit of 20 GB in production, it's recommended to rearchitect your application with a different partition key as a long-term solution. To help give time to rearchitect your application, you can request a temporary increase in the logical partition key limit for your existing application.File an Azure support ticketand select quota typeTemporary increase in container's logical partition key size. Requesting a temporary increase is intended as a temporary mitigation and not recommended as a long-term solution, asSLA guarantees are not honored when the limit is increased. To remove the configuration, file a support ticket and select quota typeRestore containerâs logical partition key size to default (20 GB). Filing this support ticket can be done after you have either deleted data to fit the 20-GB logical partition limit or have rearchitected your application with a different partition key.
Minimum throughput limits
An Azure Cosmos DB container (or shared throughput database) using manual throughput must have a minimum throughput of 400 RU/s. As the container grows, Azure Cosmos DB requires a minimum throughput to ensure the resource (database or container) has sufficient resource for its operations.
The current and minimum throughput of a container or a database can be retrieved from the Azure portal or the SDKs. For more information, seeAllocate throughput on containers and databases.
The actual minimum RU/s might vary depending on your account configuration. You can useAzure Monitor metricsto view the history of provisioned throughput (RU/s) and storage on a resource.
Use this section to estimate the minimum throughput on a container.
To estimate the minimum RU/s required of a container with manual throughput, find the maximum of:
400 RU/s
Current storage in GB * 1 RU/s
Highest RU/s ever provisioned on the container / 100
For example, you have a container provisioned with 400 RU/s and 0-GB storage. You increase the throughput to 50,000 RU/s and import 20 GB of data. The minimum RU/s is nowMAX(400, 20 * 1 RU/s per GB, 50,000 RU/s / 100)= 500 RU/s. Over time, the storage grows to 2000 GB. The minimum RU/s is nowMAX(400, 2000 * 1 RU/s per GB, 50,000 / 100)= 2000 RU/s.
MAX(400, 20 * 1 RU/s per GB, 50,000 RU/s / 100)
MAX(400, 2000 * 1 RU/s per GB, 50,000 / 100)
To estimate the minimum autoscale max RU/s required of a container with autoscale throughput, find the maximum of:
1000 RU/s
Current storage in GB * 10 RU/s
Highest RU/s ever provisioned on the container / 10
For example, you have a container provisioned with 1000 RU/s and 0-GB storage. You increase the throughput to 50,000 RU/s and import 20 GB of data. The minimum max RU/s is nowMAX(1000, 20 * 10 RU/s per GB, 50,000 RU/s / 10)= 5000 RU/s. Over time, the storage grows to 2000 GB. The minimum max RU/s is nowMAX(1000, 2000 * 10 RU/s per GB, 50,000 / 10)= 20,000 RU/s.
MAX(1000, 20 * 10 RU/s per GB, 50,000 RU/s / 10)
MAX(1000, 2000 * 10 RU/s per GB, 50,000 / 10)
Use this section to estimate the minimum throughput on a database sharing throughput across containers.
To estimate the minimum RU/s required of a shared throughput database with manual throughput, find the maximum of:
400 RU/s
Current storage in GB * 1 RU/s
Highest RU/s ever provisioned on the database / 100
400 + MAX(Container count - 25, 0) * 100 RU/s
For example, you have a database provisioned with 400 RU/s, 15 GB of storage, and 10 containers. The minimum RU/s isMAX(400, 15 * 1 RU/s per GB, 400 / 100, 400 + 0 )= 400 RU/s. If there were 30 containers in the database, the minimum RU/s would be400 + MAX(30 - 25, 0) * 100 RU/s= 900 RU/s.
MAX(400, 15 * 1 RU/s per GB, 400 / 100, 400 + 0 )
400 + MAX(30 - 25, 0) * 100 RU/s
To estimate the minimum autoscale max RU/s required of a shared throughput database with autoscale throughput, find the maximum of:
1000 RU/s
Current storage in GB * 10 RU/s
Highest RU/s ever provisioned on the database / 10
1000 + MAX(Container count - 25, 0) * 1000 RU/s
For example, you have a database provisioned with 1000 RU/s, 15 GB of storage, and 10 containers. The minimum max RU/s for autoscale database isMAX(1000, 15 * 10 RU/s per GB, 1000 / 10, 1000 + 0 )= 1000 RU/s. If there were 30 containers in the database, the minimum max RU/s would be1000 + MAX(30 - 25, 0) * 1000 RU/s= 5000 RU/s.
MAX(1000, 15 * 10 RU/s per GB, 1000 / 10, 1000 + 0 )
1000 + MAX(30 - 25, 0) * 1000 RU/s
In summary, here are the minimum provisioned RU limits when using provisioned throughput.
Azure Cosmos DB supports programmatic scaling of throughput (RU/s) per container or database via the SDKs or portal.
Depending on the current RU/s provisioned and resource settings, each resource can scale synchronously and immediately between the minimum RU/s to up to 100x the minimum RU/s. If the requested throughput value is outside the range, scaling is performed asynchronously. Asynchronous scaling may take minutes to hours to complete depending on the requested throughput and data storage size in the container.Learn more.
Serverless
Serverlesslets you use your Azure Cosmos DB resources in a consumption-based fashion. The following table lists the limits for storage and throughput burstability per container/database. These limits can't be increased. It's recommended to allocate extra serverless accounts for more storage needs.
*Maximum RU/sec availability is dependent on data stored in the container. See,Serverless Performance
Control plane
Azure Cosmos DB maintains a resource provider that offers a management layer to create, update, and delete resources in your Azure Cosmos DB account. The resource provider interfaces with the overall Azure Resource Management layer, which is the deployment and management service for Azure. You cancreate and manage Azure Cosmos DB resourcesusing the Azure portal, Azure PowerShell, Azure CLI, Azure Resource Manager and Bicep templates, Rest API, Azure Management SDKs as well as 3rd party tools such as Terraform and Pulumi.
This management layer can also be accessed from the Azure Cosmos DB data plane SDKs used in your applications to create and manage resources within an account. Data plane SDKs also make control plane requests during initial connection to the service to do things like enumerating databases and containers, as well as requesting account keys for authentication.
Each account for Azure Cosmos DB has amaster partitionwhich contains all of the metadata for an account. It also has a small amount of throughput to support control plane operations. Control plane requests that create, read, update or delete this metadata consumes this throughput. When the amount of throughput consumed by control plane operations exceeds this amount, operations are rate-limited, same as data plane operations within Azure Cosmos DB. However, unlike throughput for data operations, throughput for the master partition cannot be increased.
master partition
Some control plane operations do not consume master partition throughput, such as Get or List Keys. However, unlike requests on data within your Azure Cosmos DB account, resource providers within Azure are not designed for high request volumes.Control plane operations that exceed the documented limits at sustained levels over consecutive 5-minute periods may experience request throttling as well as failed or incomplete operations on Azure Cosmos DB resources.
Control plane operations can be monitored by navigating the Insights tab for an Azure Cosmos DB account. To learn more seeMonitor Control Plane Requests. Users can also customize these, use Azure Monitor and create a workbook to monitorMetadata Requestsand set alerts on them.
Resource limits
The following table lists resource limits per subscription or account.
Â¹ Default limits differ for Microsoft internal customers. You can increase these limits by creating anAzure Support requestup to 1,000 max. Cosmos DB reserves the right to delete any empty database accounts i.e. no databases/collections.
Â² This limit cannot be increased. Total count of both with an account. (1 database and 499 containers, 250 databases and 250 containers, etc.)
Request limits
The following table lists request limits per 5 minute interval, per account, unless otherwise specified.
Â¹ Users should usesingleton clientfor SDK instances and cache keys and database and container references between requests for the lifetime of that instance.
Â² Regional failovers only apply to single region writes accounts. Multi-region write accounts don't require or allow changing the write region.
Azure Cosmos DB automatically takes backups of your data at regular intervals. For details on backup retention intervals and windows, seeOnline backup and on-demand data restore in Azure Cosmos DB.
Per-account limits
Here's a list of limits per account.
Provisioned throughput
Serverless
Per-container limits
Depending on which API you use, an Azure Cosmos DB container can represent either a collection, a table, or graph. Containers support configurations forunique key constraints,stored procedures, triggers, and UDFs, andindexing policy. The following table lists the limits specific to configurations within a container.
Â¹ You can increase any of these per-container limits by creating anAzure Support request.
Per-item limits
An Azure Cosmos DB item can represent either a document in a collection, a row in a table, or a node or edge in a graph; depending on which API you use. The following table shows the limits per item in Azure Cosmos DB.
Â¹ Large document sizes up to 16 MB are supported with Azure Cosmos DB for MongoDB only. Read thefeature documentationto learn more.
There are no restrictions on the item payloads (like number of properties and nesting depth), except for the length restrictions on partition key and ID values, and the overall size restriction of 2 MB. You may have to configure indexing policy for containers with large or complex item structures to reduce RU consumption. SeeModeling items in Azure Cosmos DBfor a real-world example, and patterns to manage large items.
Per-request limits
Azure Cosmos DB supportsCRUD and query operationsagainst resources like containers, items, and databases. It also supportstransactional batch requestsagainst items with the same partition key in a container.
Azure Cosmos DB supports execution of triggers during writes. The service supports a maximum of one pre-trigger and one post-trigger per write operation.
Once an operation like query reaches the execution timeout or response size limit, it returns a page of results and a continuation token to the client to resume execution. There's no practical limit on the duration a single query can run across pages/continuations.
Azure Cosmos DB uses HMAC for authorization. You can use a primary key for fine-grained access control to resources. These resources can include containers, partition keys, or items. The following table lists limits for authorization tokens in Azure Cosmos DB.
Â¹ You can increase it byfiling an Azure support ticket
Limits for autoscale provisioned throughput
See theAutoscalearticle andFAQfor more detailed explanation of the throughput and storage limits with autoscale.
Tmax
0.1 * Tmax
0.1*Tmax <= T <= Tmax
0.1 * Tmax
0.1*Tmax
MAX(1000, highest max RU/s ever provisioned / 10, current storage in GB * 10)
MAX(1000, highest max RU/s ever provisioned / 10, current storage in GB * 10,  1000 + (MAX(Container count - 25, 0) * 1000))
SQL query limits
Azure Cosmos DB supports querying items usingSQL. The following table describes restrictions in query statements, for example in terms of number of clauses or query length.
Â¹ You can increase any of these SQL query limits by creating anAzure Support request.
API for MongoDB-specific limits
Azure Cosmos DB supports the MongoDB wire protocol for applications written against MongoDB. You can find the supported commands and protocol versions atSupported MongoDB features and syntax.
The following table lists the limits specific to MongoDB feature support. Other service limits mentioned for the API for NoSQL also apply to the API for MongoDB.
Â¹ Large document sizes up to 16 MB require feature enablement in the Azure portal. Read thefeature documentationto learn more.
Â² We recommend that client applications set the idle connection timeout in the driver settings to 2-3 minutes because thedefault timeout for Azure LoadBalancer is 4 minutes.  This timeout ensures that an intermediate load balancer idle doesn't close connections between the client machine and Azure Cosmos DB.
Try Azure Cosmos DB Free limits
The following table lists the limits for theTry Azure Cosmos DB for Freetrial.
Try Azure Cosmos DB supports global distribution in only the Central US, North Europe, and Southeast Asia regions. Azure support tickets can't be created for Try Azure Cosmos DB accounts. However, support is provided for subscribers with existing support plans.
Azure Cosmos DB free tier account limits
The following table lists the limits forAzure Cosmos DB free tier accounts.
In addition to the previous table, thePer-account limitsalso apply to free tier accounts. To learn more, see how to create afree tier account.
Related content
Global distribution
Partitioningandprovisioned throughput.
Feedback
Was this page helpful?
Additional resources