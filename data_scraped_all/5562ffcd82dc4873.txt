Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Set up Apache HBase cluster replication in Azure virtual networks
Article
2024-04-29
18 contributors
In this article
Learn how to set upApache HBasereplication within a virtual network, or between two virtual networks in Azure.
Cluster replication uses a source-push methodology. An HBase cluster can be a source or a destination, or it can fulfill both roles at once. Replication is asynchronous. The goal of replication is eventual consistency. When the source receives an edit to a column family when replication is enabled, the edit is propagated to all destination clusters. When data replicated from one cluster to another, the source cluster and all clusters that have already consumed the data tracked, to prevent replication loops.
In this article, you set up a source-destination replication. For other cluster topologies, see theApache HBase reference guide.
The following are HBase replication usage cases for a single virtual network:
Load balancing. For example, you can run scans or MapReduce jobs on the destination cluster, and ingest data on the source cluster.
Adding high availability.
Migrating data from one HBase cluster to another.
Upgrading an Azure HDInsight cluster from one version to another.
The following are HBase replication usage cases for two virtual networks:
Setting up disaster recovery.
Load balancing and partitioning the application.
Adding high availability.
You can replicate clusters by usingscript actionscripts fromGitHub.
Prerequisites
Before you begin this article, you must have an Azure subscription. SeeGet an Azure free trial.
Set up the environments
You have three configuration options:
Two Apache HBase clusters in one Azure virtual network.
Two Apache HBase clusters in two different virtual networks in the same region.
Two Apache HBase clusters in two different virtual networks in two different regions (geo-replication).
This article covers the geo-replication scenario.
To help you set up the environments, we have created someAzure Resource Manager templates. If you prefer to set up the environments by using other methods, see:
Create Apache Hadoop clusters in HDInsight
Create Apache HBase clusters in Azure Virtual Network
Set up two virtual networks in two different regions
To use a template that creates two virtual networks in two different regions and the VPN connection between the VNets, select the followingDeploy to Azurebutton.

Some of the hard-coded values in the template:
VNet 1
VNet 2
Alternatively, follow below steps to setup two different vnets and VMs manually
Create Two VNET (Virtual Network)in different Region
EnablePeering in both the VNET. Go toVirtual networkcreated in above steps then click onpeeringand add peering link of another region. Do it for both the virtual network.
Create the latest version of the UBUNTUin each VNET.
Setup DNS
In the last section, the template creates an Ubuntu virtual machine in each of the two virtual networks.  In this section, you install Bind on the two DNS virtual machines, and then configure the DNS forwarding on the two virtual machines.
To install Bind, yon need to find the public IP address of the two DNS virtual machines.
Open theAzure portal.
Open the DNS virtual machine by selectingResources groups > [resource group name] > [vnet1DNS].  The resource group name is the one you create in the last procedure. The default DNS virtual machine names arevnet1DNSandvnet2NDS.
SelectPropertiesto open the properties page of the virtual network.
Write down thePublic IP address, and also verify thePrivate IP address.  The private IP address shall be10.1.0.4for vnet1DNS and10.2.0.4for vnet2DNS.
Change the DNS Servers for both virtual networks to use Default (Azure-Provided) DNS servers to allow inbound and outbound access to download packages to install Bind in the following steps.
To install Bind, use the following procedure:
Use SSH to connect to thepublic IP addressof the DNS virtual machine. The following example connects to a virtual machine at 40.68.254.142:ssh sshuser@40.68.254.142Replacesshuserwith the SSH user account you specified when creating the DNS virtual machine.NoteThere are a variety of ways to obtain thesshutility. On Linux, Unix, and macOS, it's provided as part of the operating system. If you are using Windows, consider one of the following options:Azure Cloud ShellBash on Ubuntu on Windows 10Git (https://git-scm.com/)OpenSSH (https://github.com/PowerShell/Win32-OpenSSH/wiki/Install-Win32-OpenSSH)
Use SSH to connect to thepublic IP addressof the DNS virtual machine. The following example connects to a virtual machine at 40.68.254.142:
ssh sshuser@40.68.254.142
ssh sshuser@40.68.254.142
Replacesshuserwith the SSH user account you specified when creating the DNS virtual machine.
sshuser
Note
There are a variety of ways to obtain thesshutility. On Linux, Unix, and macOS, it's provided as part of the operating system. If you are using Windows, consider one of the following options:
ssh
Azure Cloud Shell
Bash on Ubuntu on Windows 10
Git (https://git-scm.com/)
OpenSSH (https://github.com/PowerShell/Win32-OpenSSH/wiki/Install-Win32-OpenSSH)
To install Bind, use the following commands from the SSH session:sudo apt-get update -y
 sudo apt-get install bind9 -y
To install Bind, use the following commands from the SSH session:
sudo apt-get update -y
 sudo apt-get install bind9 -y
sudo apt-get update -y
 sudo apt-get install bind9 -y
Configure Bind to forward name resolution requests to your on premises DNS server. To do so, use the following text as the contents of the/etc/bind/named.conf.optionsfile:acl goodclients {
    10.1.0.0/16; # Replace with the IP address range of the virtual network 1
    10.2.0.0/16; # Replace with the IP address range of the virtual network 2
    localhost;
    localhost;
};

options {
    directory "/var/cache/bind";
    recursion yes;
    allow-query { goodclients; };

    forwarders {
        168.63.129.16; #This is the Azure DNS server
    };

    dnssec-validation auto;

    auth-nxdomain no;    # conform to RFC1035
    listen-on-v6 { any; };
};ImportantReplace the values in thegoodclientssection with the IP address range of the two virtual networks. This section defines the addresses that this DNS server accepts requests from.To edit this file, use the following command:sudo nano /etc/bind/named.conf.optionsTo save the file, useCtrl+X,Y, and thenEnter.
Configure Bind to forward name resolution requests to your on premises DNS server. To do so, use the following text as the contents of the/etc/bind/named.conf.optionsfile:
/etc/bind/named.conf.options
acl goodclients {
    10.1.0.0/16; # Replace with the IP address range of the virtual network 1
    10.2.0.0/16; # Replace with the IP address range of the virtual network 2
    localhost;
    localhost;
};

options {
    directory "/var/cache/bind";
    recursion yes;
    allow-query { goodclients; };

    forwarders {
        168.63.129.16; #This is the Azure DNS server
    };

    dnssec-validation auto;

    auth-nxdomain no;    # conform to RFC1035
    listen-on-v6 { any; };
};
acl goodclients {
    10.1.0.0/16; # Replace with the IP address range of the virtual network 1
    10.2.0.0/16; # Replace with the IP address range of the virtual network 2
    localhost;
    localhost;
};

options {
    directory "/var/cache/bind";
    recursion yes;
    allow-query { goodclients; };

    forwarders {
        168.63.129.16; #This is the Azure DNS server
    };

    dnssec-validation auto;

    auth-nxdomain no;    # conform to RFC1035
    listen-on-v6 { any; };
};
Important
Replace the values in thegoodclientssection with the IP address range of the two virtual networks. This section defines the addresses that this DNS server accepts requests from.
goodclients
To edit this file, use the following command:
sudo nano /etc/bind/named.conf.options
sudo nano /etc/bind/named.conf.options
To save the file, useCtrl+X,Y, and thenEnter.
From the SSH session, use the following command:hostname -fThis command returns a value similar to the following text:vnet1DNS.icb0d0thtw0ebifqt0g1jycdxd.ex.internal.cloudapp.netTheicb0d0thtw0ebifqt0g1jycdxd.ex.internal.cloudapp.nettext is theDNS suffixfor this virtual network. Save this value, as it's used later.You must also find out the DNS suffix from the other DNS server. You need it in the next step.
From the SSH session, use the following command:
hostname -f
hostname -f
This command returns a value similar to the following text:
vnet1DNS.icb0d0thtw0ebifqt0g1jycdxd.ex.internal.cloudapp.net
vnet1DNS.icb0d0thtw0ebifqt0g1jycdxd.ex.internal.cloudapp.net
Theicb0d0thtw0ebifqt0g1jycdxd.ex.internal.cloudapp.nettext is theDNS suffixfor this virtual network. Save this value, as it's used later.
icb0d0thtw0ebifqt0g1jycdxd.ex.internal.cloudapp.net
You must also find out the DNS suffix from the other DNS server. You need it in the next step.
To configure Bind to resolve DNS names for resources within the virtual network, use the following text as the contents of the/etc/bind/named.conf.localfile:// Replace the following with the DNS suffix for your virtual network
zone "v5ant3az2hbe1edzthhvwwkcse.bx.internal.cloudapp.net" {
        type forward;
        forwarders {10.2.0.4;}; # The Azure recursive resolver
};ImportantYou must replace thev5ant3az2hbe1edzthhvwwkcse.bx.internal.cloudapp.netwith the DNS suffix of the other virtual network. And the forwarder IP is the private IP address of the DNS server in the other virtual network.To edit this file, use the following command:sudo nano /etc/bind/named.conf.localTo save the file, useCtrl+X,Y, and thenEnter.
To configure Bind to resolve DNS names for resources within the virtual network, use the following text as the contents of the/etc/bind/named.conf.localfile:
/etc/bind/named.conf.local
// Replace the following with the DNS suffix for your virtual network
zone "v5ant3az2hbe1edzthhvwwkcse.bx.internal.cloudapp.net" {
        type forward;
        forwarders {10.2.0.4;}; # The Azure recursive resolver
};
// Replace the following with the DNS suffix for your virtual network
zone "v5ant3az2hbe1edzthhvwwkcse.bx.internal.cloudapp.net" {
        type forward;
        forwarders {10.2.0.4;}; # The Azure recursive resolver
};
Important
You must replace thev5ant3az2hbe1edzthhvwwkcse.bx.internal.cloudapp.netwith the DNS suffix of the other virtual network. And the forwarder IP is the private IP address of the DNS server in the other virtual network.
v5ant3az2hbe1edzthhvwwkcse.bx.internal.cloudapp.net
To edit this file, use the following command:
sudo nano /etc/bind/named.conf.local
sudo nano /etc/bind/named.conf.local
To save the file, useCtrl+X,Y, and thenEnter.
To start Bind, use the following command:sudo service bind9 restart
To start Bind, use the following command:
sudo service bind9 restart
sudo service bind9 restart
To verify that bind can resolve the names of resources in the other virtual network, use the following commands:sudo apt install dnsutils
nslookup vnet2dns.v5ant3az2hbe1edzthhvwwkcse.bx.internal.cloudapp.netImportantReplacevnet2dns.v5ant3az2hbe1edzthhvwwkcse.bx.internal.cloudapp.netwith the fully qualified domain name (FQDN) of the DNS virtual machine in the other network.Replace10.2.0.4with theinternal IP addressof your custom DNS server in the other virtual network.The response appears similar to the following text:Server:         10.2.0.4
Address:        10.2.0.4#53

Non-authoritative answer:
Name:   vnet2dns.v5ant3az2hbe1edzthhvwwkcse.bx.internal.cloudapp.net
Address: 10.2.0.4Until now, you can't look up the IP address from the other network without specified DNS server IP address.
To verify that bind can resolve the names of resources in the other virtual network, use the following commands:
sudo apt install dnsutils
nslookup vnet2dns.v5ant3az2hbe1edzthhvwwkcse.bx.internal.cloudapp.net
sudo apt install dnsutils
nslookup vnet2dns.v5ant3az2hbe1edzthhvwwkcse.bx.internal.cloudapp.net
Important
Replacevnet2dns.v5ant3az2hbe1edzthhvwwkcse.bx.internal.cloudapp.netwith the fully qualified domain name (FQDN) of the DNS virtual machine in the other network.
vnet2dns.v5ant3az2hbe1edzthhvwwkcse.bx.internal.cloudapp.net
Replace10.2.0.4with theinternal IP addressof your custom DNS server in the other virtual network.
10.2.0.4
The response appears similar to the following text:
Server:         10.2.0.4
Address:        10.2.0.4#53

Non-authoritative answer:
Name:   vnet2dns.v5ant3az2hbe1edzthhvwwkcse.bx.internal.cloudapp.net
Address: 10.2.0.4
Server:         10.2.0.4
Address:        10.2.0.4#53

Non-authoritative answer:
Name:   vnet2dns.v5ant3az2hbe1edzthhvwwkcse.bx.internal.cloudapp.net
Address: 10.2.0.4
Until now, you can't look up the IP address from the other network without specified DNS server IP address.
Configure the virtual network to use the custom DNS server
To configure the virtual network to use the custom DNS server instead of the Azure recursive resolver, use the following steps:
In theAzure portal, select the virtual network, and then selectDNS Servers.
In theAzure portal, select the virtual network, and then selectDNS Servers.
SelectCustom, and enter theinternal IP addressof the custom DNS server. Finally, selectSave.
SelectCustom, and enter theinternal IP addressof the custom DNS server. Finally, selectSave.
Open the DNS server virtual machine in vnet1, and clickRestart.  You must restart all the virtual machines in the virtual network to make the DNS configuration to take effect.
Open the DNS server virtual machine in vnet1, and clickRestart.  You must restart all the virtual machines in the virtual network to make the DNS configuration to take effect.
Repeat steps configure the custom DNS server for vnet2.
Repeat steps configure the custom DNS server for vnet2.
To test the DNS configuration, you can connect to the two DNS virtual machines using SSH, and ping the DNS server of the other virtual network by using its host name. If it doesn't work, use the following command to check DNS status:
sudo service bind9 status
sudo service bind9 status
Create Apache HBase clusters
Create anApache HBasecluster in each of the two virtual networks with the following configuration:
Resource group name: use the same resource group name as you created the virtual networks.
Cluster type: HBase
Version: HBase 1.1.2 (HDI 3.6)
Location: Use the same location as the virtual network.  By default, vnet1 isWest US, and vnet2 isEast US.
Storage: Create a new storage account for the cluster.
Virtual network(from Advanced settings on the portal): Select vnet1 you created in the last procedure.
Subnet: The default name used in the template issubnet1.
To ensure the environment is configured correctly, you must be able to ping the headnode's FQDN between the two clusters.
Load test data
When you replicate a cluster, you must specify the tables that you want to replicate. In this section, you load some data into the source cluster. In the next section, you'll enable replication between the two clusters.
To create aContactstable and insert some data in the table, follow the instructions atApache HBase tutorial: Get started using Apache HBase in HDInsight.
Note
If you want to replicate tables from a custom namespace, you need to ensure that the appropriate custom namespaces are defined on the destination cluster as well.
Enable replication
The following steps describe how to call the script action script from the Azure portal. For information about running a script action by using Azure PowerShell and the Azure Classic CLI, seeCustomize HDInsight clusters by using script action.
To enable HBase replication from the Azure portal
Sign in to theAzure portal.
Sign in to theAzure portal.
Open the source HBase cluster.
Open the source HBase cluster.
In the cluster menu, selectScript Actions.
In the cluster menu, selectScript Actions.
At the top of the page, selectSubmit New.
At the top of the page, selectSubmit New.
Select or enter the following information:Name: EnterEnable replication.Bash Script URL: Enterhttps://raw.githubusercontent.com/Azure/hbase-utils/master/replication/hdi_enable_replication.sh.Head: Ensure this parameter is selected. Clear the other node types.Parameters: The following sample parameters enable replication for all existing tables, and then copy all data from the source cluster to the destination cluster:-m hn1 -s <source hbase cluster name> -d <destination hbase cluster name> -sp <source cluster Ambari password> -dp <destination cluster Ambari password> -copydataNoteUse hostname instead of FQDN for both the source and destination cluster DNS name.This walkthrough assumes hn1 as active headnode. Check your cluster to identify the active head node.
Select or enter the following information:
Name: EnterEnable replication.
Bash Script URL: Enterhttps://raw.githubusercontent.com/Azure/hbase-utils/master/replication/hdi_enable_replication.sh.
Head: Ensure this parameter is selected. Clear the other node types.
Parameters: The following sample parameters enable replication for all existing tables, and then copy all data from the source cluster to the destination cluster:
-m hn1 -s <source hbase cluster name> -d <destination hbase cluster name> -sp <source cluster Ambari password> -dp <destination cluster Ambari password> -copydata
-m hn1 -s <source hbase cluster name> -d <destination hbase cluster name> -sp <source cluster Ambari password> -dp <destination cluster Ambari password> -copydata
Note
Use hostname instead of FQDN for both the source and destination cluster DNS name.
This walkthrough assumes hn1 as active headnode. Check your cluster to identify the active head node.
SelectCreate. The script can take a while to run, especially when you use the-copydataargument.
SelectCreate. The script can take a while to run, especially when you use the-copydataargument.
Required arguments:
Optional arguments:
Theprint_usage()section of thescripthas a detailed explanation of parameters.
print_usage()
After the script action is successfully deployed, you can use SSH to connect to the destination HBase cluster, and then verify that the data has been replicated.
Replication scenarios
The following list shows you some general usage cases and their parameter settings:
Enable replication on all tables between the two clusters. This scenario doesn't require copying or migrating existing data in the tables, and it doesn't use Phoenix tables. Use the following parameters:-m hn1 -s <source hbase cluster name> -d <destination hbase cluster name> -sp <source cluster Ambari password> -dp <destination cluster Ambari password>
Enable replication on all tables between the two clusters. This scenario doesn't require copying or migrating existing data in the tables, and it doesn't use Phoenix tables. Use the following parameters:
-m hn1 -s <source hbase cluster name> -d <destination hbase cluster name> -sp <source cluster Ambari password> -dp <destination cluster Ambari password>
-m hn1 -s <source hbase cluster name> -d <destination hbase cluster name> -sp <source cluster Ambari password> -dp <destination cluster Ambari password>
Enable replication on specific tables. To enable replication on table1, table2, and table3, use the following parameters:-m hn1 -s <source hbase cluster name> -d <destination hbase cluster name> -sp <source cluster Ambari password> -dp <destination cluster Ambari password> -t "table1;table2;table3"
Enable replication on specific tables. To enable replication on table1, table2, and table3, use the following parameters:
-m hn1 -s <source hbase cluster name> -d <destination hbase cluster name> -sp <source cluster Ambari password> -dp <destination cluster Ambari password> -t "table1;table2;table3"
-m hn1 -s <source hbase cluster name> -d <destination hbase cluster name> -sp <source cluster Ambari password> -dp <destination cluster Ambari password> -t "table1;table2;table3"
Enable replication on specific tables, and copy the existing data. To enable replication on table1, table2, and table3, use the following parameters:-m hn1 -s <source hbase cluster name> -d <destination hbase cluster name> -sp <source cluster Ambari password> -dp <destination cluster Ambari password> -t "table1;table2;table3" -copydata
Enable replication on specific tables, and copy the existing data. To enable replication on table1, table2, and table3, use the following parameters:
-m hn1 -s <source hbase cluster name> -d <destination hbase cluster name> -sp <source cluster Ambari password> -dp <destination cluster Ambari password> -t "table1;table2;table3" -copydata
-m hn1 -s <source hbase cluster name> -d <destination hbase cluster name> -sp <source cluster Ambari password> -dp <destination cluster Ambari password> -t "table1;table2;table3" -copydata
Enable replication on all tables, and replicate Phoenix metadata from source to destination. Phoenix metadata replication isn't perfect. Use it with caution. Use the following parameters:-m hn1 -s <source hbase cluster name> -d <destination hbase cluster name> -sp <source cluster Ambari password> -dp <destination cluster Ambari password> -t "table1;table2;table3" -replicate-phoenix-meta
Enable replication on all tables, and replicate Phoenix metadata from source to destination. Phoenix metadata replication isn't perfect. Use it with caution. Use the following parameters:
-m hn1 -s <source hbase cluster name> -d <destination hbase cluster name> -sp <source cluster Ambari password> -dp <destination cluster Ambari password> -t "table1;table2;table3" -replicate-phoenix-meta
-m hn1 -s <source hbase cluster name> -d <destination hbase cluster name> -sp <source cluster Ambari password> -dp <destination cluster Ambari password> -t "table1;table2;table3" -replicate-phoenix-meta
Set up replication between ESP clusters
Prerequisites
Both ESP clusters should be there in the same realm (domain). Check/etc/krb5.conffile default realm property to confirm.
/etc/krb5.conf
Common user should be there who has read and write access to both the clustersFor example, if both clusters have same cluster admin user (For example,admin@abc.example.com), that user can be used to run the replication script.If both the clusters using same user group, you can add a new user or use existing user from the group.If both the clusters using different user group, you can add a new user to both use existing user from the groups.
For example, if both clusters have same cluster admin user (For example,admin@abc.example.com), that user can be used to run the replication script.
admin@abc.example.com
If both the clusters using same user group, you can add a new user or use existing user from the group.
If both the clusters using different user group, you can add a new user to both use existing user from the groups.
Steps to Execute Replication script
Note
Perform the following steps only if DNS is unable to resolve hostname correctly of destination cluster.
Copy sink cluster hosts IP & hostname mapping in source cluster nodes /etc/hosts file.
Copy head node, worker node and ZooKeeper nodes host and IP mapping from /etc/hosts file of destination(sink) cluster.
Add copied entries source cluster /etc/hosts file. These entries should be added to head nodes, worker nodes and ZooKeeper nodes.
Step 1:Create keytab file for the user usingktutil.$ ktutil
ktutil
$ ktutil
addent -password -p admin@ABC.EXAMPLE.COM -k 1 -e RC4-HMAC
addent -password -p admin@ABC.EXAMPLE.COM -k 1 -e RC4-HMAC
Ask for password to authenticate, provide user password
wkt /etc/security/keytabs/admin.keytab
wkt /etc/security/keytabs/admin.keytab
Note
Make sure the keytab file is stored in/etc/security/keytabs/folder in the<username>.keytabformat.
/etc/security/keytabs/
<username>.keytab
Step 2:Run script action with-kuoption
-ku
Provide-ku <username>on ESP clusters.
-ku <username>
-ku, --krb-user
Copy and migrate data
There are two separate script action scripts available for copying or migrating data after replication is enabled:
Script for small tables(tables that are a few gigabytes in size, and overall copy is expected to finish in less than one hour)
Script for small tables(tables that are a few gigabytes in size, and overall copy is expected to finish in less than one hour)
Script for large tables(tables that are expected to take longer than one hour to copy)
Script for large tables(tables that are expected to take longer than one hour to copy)
You can follow the same procedure that's described inEnable replicationto call the script action. Use the following parameters:
-m hn1 -t <table1:start_timestamp:end_timestamp;table2:start_timestamp:end_timestamp;...> -p <replication_peer> [-everythingTillNow]
-m hn1 -t <table1:start_timestamp:end_timestamp;table2:start_timestamp:end_timestamp;...> -p <replication_peer> [-everythingTillNow]
Theprint_usage()section of thescripthas a detailed description of parameters.
print_usage()
Scenarios
Copy specific tables (test1, test2, and test3) for all rows edited until now (current time stamp):-m hn1 -t "test1::;test2::;test3::" -p "<zookeepername1>;<zookeepername2>;<zookeepername3>:2181:/hbase-unsecure" -everythingTillNowOr:-m hn1 -t "test1::;test2::;test3::" --replication-peer="<zookeepername1>;<zookeepername2>;<zookeepername3>:2181:/hbase-unsecure" -everythingTillNow
Copy specific tables (test1, test2, and test3) for all rows edited until now (current time stamp):
-m hn1 -t "test1::;test2::;test3::" -p "<zookeepername1>;<zookeepername2>;<zookeepername3>:2181:/hbase-unsecure" -everythingTillNow
-m hn1 -t "test1::;test2::;test3::" -p "<zookeepername1>;<zookeepername2>;<zookeepername3>:2181:/hbase-unsecure" -everythingTillNow
Or:
-m hn1 -t "test1::;test2::;test3::" --replication-peer="<zookeepername1>;<zookeepername2>;<zookeepername3>:2181:/hbase-unsecure" -everythingTillNow
-m hn1 -t "test1::;test2::;test3::" --replication-peer="<zookeepername1>;<zookeepername2>;<zookeepername3>:2181:/hbase-unsecure" -everythingTillNow
Copy specific tables with a specified time range:-m hn1 -t "table1:0:452256397;table2:14141444:452256397" -p "<zookeepername1>;<zookeepername2>;<zookeepername3>:2181:/hbase-unsecure"
Copy specific tables with a specified time range:
-m hn1 -t "table1:0:452256397;table2:14141444:452256397" -p "<zookeepername1>;<zookeepername2>;<zookeepername3>:2181:/hbase-unsecure"
-m hn1 -t "table1:0:452256397;table2:14141444:452256397" -p "<zookeepername1>;<zookeepername2>;<zookeepername3>:2181:/hbase-unsecure"
Disable replication
To disable replication, use another script action script fromGitHub. You can follow the same procedure that's described inEnable replicationto call the script action. Use the following parameters:
-m hn1 -s <source hbase cluster name> -sp <source cluster Ambari password> <-all|-t "table1;table2;...">
-m hn1 -s <source hbase cluster name> -sp <source cluster Ambari password> <-all|-t "table1;table2;...">
Theprint_usage()section of thescripthas a detailed explanation of parameters.
print_usage()
Scenarios
Disable replication on all tables:-m hn1 -s <source hbase cluster name> -sp Mypassword\!789 -allor--src-cluster=<source hbase cluster name> --dst-cluster=<destination hbase cluster name> --src-ambari-user=<source cluster Ambari user name> --src-ambari-password=<source cluster Ambari password>
Disable replication on all tables:
-m hn1 -s <source hbase cluster name> -sp Mypassword\!789 -all
-m hn1 -s <source hbase cluster name> -sp Mypassword\!789 -all
or
--src-cluster=<source hbase cluster name> --dst-cluster=<destination hbase cluster name> --src-ambari-user=<source cluster Ambari user name> --src-ambari-password=<source cluster Ambari password>
--src-cluster=<source hbase cluster name> --dst-cluster=<destination hbase cluster name> --src-ambari-user=<source cluster Ambari user name> --src-ambari-password=<source cluster Ambari password>
Disable replication on specified tables (table1, table2, and table3):-m hn1 -s <source hbase cluster name> -sp <source cluster Ambari password> -t "table1;table2;table3"
Disable replication on specified tables (table1, table2, and table3):
-m hn1 -s <source hbase cluster name> -sp <source cluster Ambari password> -t "table1;table2;table3"
-m hn1 -s <source hbase cluster name> -sp <source cluster Ambari password> -t "table1;table2;table3"
Note
If you intend to delete the destination cluster, make sure you remove it from the peer list of the source cluster. This can be done by running the command remove_peer '1' at the hbase shell on the source cluster. Failing this the source cluster may not function properly.
Next steps
In this article, you learned how to set up Apache HBase replication within a virtual network, or between two virtual networks. To learn more about HDInsight and Apache HBase, see these articles:
Get started with Apache HBase in HDInsight
HDInsight Apache HBase overview
Create Apache HBase clusters in Azure Virtual Network
Feedback
Was this page helpful?
Additional resources