Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Define, capture, triage, and manage software bugs in Azure Boards
Article
2024-11-18
14 contributors
In this article
Azure DevOps Services | Azure DevOps Server 2022 - Azure DevOps Server 2019
How do you track and manage defects in your code? How do you make sure software problems and customer feedback get addressed quickly to support high-quality software deployments? How do you make good progress on new features and address your technical debt?
At a minimum, you need a way to capture your software issues, prioritize them, assign them to a team member, and track progress. You want to manage your code defects in ways that align with your Agile practices.
To support these scenarios, Azure Boards provides a specific work item type to track code defects namedBug. Bug work items share all the standard features of other work item types with a few more. For an overview of standard features, seeAbout work items and work item types.
Bugs also provide the following features:
Options for each team to choose how they want to track bugs
Test tools to capture bugs
Built-in integration across Azure DevOps to track bugs linked to builds, releases, and tests
Note
Bug work item types aren't available with the Basic process. The Basic process tracks bugs as Issues and is available when you create a new project from Azure DevOps Services orAzure DevOps Server 2019.1or later versions.
Prerequisites
Note
ProvideStakeholder accessto members who want to contribute to the discussion and review progress. These are typically members who don't contribute to code, but want to view work items, backlogs, boards, and dashboards.
By default, allContributorsandStakeholdersin public projects can add new and existing tags. In private projects, Stakeholders can only add existing tags. To control the ability to create new tags, set theCreate tag definitionpermission at the project level. For more information, seeChange project-level permissions.
Note
ProvideStakeholder accessto members who want to contribute to the discussion and review progress. These are typically members who don't contribute to code, but want to view work items, backlogs, boards, and dashboards.
Tip
To report a bug, a user must have at a minimum,Stakeholderaccess. A user must haveEdit work items in this nodepermission set toAllowfor theArea Pathwhere they add the bug. For more information, seeSet work tracking permissions
Bug work item type
The following image shows the Bug work item type for the Scrum process. The Bug work item type for Agile and Capability Maturity Model Integration (CMMI) processes tracks similar information. It appears on the product backlog along with requirements or on the Taskboard along with tasks.

Note
The images you see from your web portal might differ from the images you see in this article. These differences result from updates made to your web app, options that you or your administrator enabled, and which process was chosen when creating your project:Agile,Basic,Scrum, orCMMI. The Basic process is available withAzure DevOps Server 2019 Update 1and later versions.

Fields specific to bugs
The Bug work item type uses some bug-specific fields. To capture both the initial issue and ongoing discoveries, use the fields described in the following table. For information about fields specific to the Bug defined for the Capability Maturity Model Integration (CMMI) process, seeBugs, issues, and risks field reference. For information about all other fields, seeWork item field index.
Field, Group, or Tab
Usage
Steps to Reproduce(friendly name=Repro Steps)
Use to capture enough information so that other team members can fully understand the code defect. Include actions taken to find or reproduce the bug and expected behavior.
System InfoFound In Build
Information about the software and system configuration that is relevant to the bug and tests to apply. TheSystem InfoandFound in Buildfields are automatically filled in when you create a bug through a testing tool. These fields specify information about the software environment and build where the bug occurred. For more information, seeTest different configurations.
Acceptance Criteria
Provide the criteria to meet before the bug can be closed. Before work begins, describe the customer acceptance criteria as clearly as possible. Teams should use this criteria as the basis for acceptance tests and to evaluate whether an item is satisfactorily completed.
Integrated in Build
Specifies the name of the build that incorporates the code that fixes the bug. This field should be specified when you resolve the bug.
For on-premises Azure DevOps, to access a dropdown menu of all builds that have run, you can update theFIELDdefinitions forFound in BuildandIntegrated in Buildto reference a global list. The global list is automatically updated with each build that is run. For more information, seeQuery based on build and test integration fields.
FIELD
For information about how to define build numbers, seeClassic pipelines configuration.
Priority1
1: Product requires successful resolution of the work item before it ships and addressed soon.
2: Product requires successful resolution of the work item before it ships, but doesn't need to be addressed immediately.
3: Resolution of the work item is optional, based on resources, time, and risk.
Severity1
A subjective rating of the impact of a bug or work item on the project or software system. For example: If a remote link within the user interface (a rare event) causes an application or web page to crash (a severe customer experience), you might specifySeverity = 2 - HighandPriority = 3. Allowed values and suggested guidelines are:
1 - Critical: Must fix. A defect that causes termination of one or more system components or the complete system, or causes extensive data corruption. There are no acceptable alternative methods to achieve required results.
2 - High: Consider fix. A defect that causes termination of one or more system components or the complete system, or causes extensive data corruption. An acceptable alternative method exists to achieve required results.
3 - Medium: (Default) A defect that causes the system to produce incorrect, incomplete, or inconsistent results.
4 - Low: A minor or cosmetic defect that has acceptable workarounds to achieve required results.
Deployment
TheDeploymentcontrol supports links to and display of releases that contain work items. To use the control, you must enable settings for the release. For more information, seeLink work items to releaseslater in this article.
Development
TheDevelopmentcontrol supports links to and display of links made to development objects. These objects include Git commits and pull requests, or TFVC changesets and versioned items. You can define links from the work item or from the commits, pull requests, or other development objects. For more information, seeLink work items to developmentlater in this article.
Notes
1To change the menu selection or picklist, seeCustomize the work tracking experience. The customization method depends on the process model used by your project.
Choose how your team tracks bugs
Your team can track bugs as requirements or as tasks. To support the team choice, consider the following factors.
Size of your team. Smaller teams can maintain a lightweight footprint by tracking bugs as requirements.
Organization requirements to track work. If your team is required to track hours, then choose to track bugs as tasks.
Organization of your team's work. If your team relies on the product backlog to prioritize work and add bugs, track bugs as requirements.
Tools your team wants to use such as the Planning pane, velocity chart, forecast, rollup, and delivery plans. Tracking bugs as tasks prevents use of several of these tools.
The following table summarizes the three options teams have to track bugs. To learn more and to set the option for your team, seeShow bugs on backlogs and boards.
Option
Choose when you want to...
Track bugs as Requirements
Prioritize, or stack rank, bugs along with requirements
Estimate Bug effort for forecasting
Update bug status on board
Include Bugs inVelocity chartsandCumulative Flow Diagrams
Be able to use theForecast toolto support sprint planning
Drag bugs to thePlanningpane to assign bugs to a sprint
View Bugs onDelivery Plans
Note
Bugs are assigned to the Requirements Category
Track bugs as Tasks
Estimate work for bugs similar to tasks
Update bug status on sprint Taskboards
Link bugs to requirements as child items
Drag bugs to the Planning pane to assign bugs to a sprint
Note
Bugs are assigned to the Task Category
User Stories (Agile), Product Backlog Items (Scrum), or Requirements (CMMI) are the natural parent work item type for Bugs
Bugs aren't visible on Delivery Plans
Bugs don't appear on backlogs or boards
Manage bugs using queries
Note
Bugs are associated with the Bugs Category and don't appear on either backlogs or boards
Bugs aren't visible on Backlogs, Boards, Sprint Backlogs, Taskboards, or Delivery Plans
You can't drag bugs to the Planning pane to assign bugs to a sprint

Customize work item type
You can customize the Bug and other work item types. Or, create custom types to track software issues or customer feedback. For all work item types, you can customize the following elements:
Add or remove custom fields
Add custom controls or custom tabs within the work item form
Customize the workflow states
Add conditional rules
Choose the backlog level in which work items appear
Before you customize your process, we recommend that you reviewAbout configuring and customizing Azure Boards.
To customize your particular process, seeCustomize an inheritance process.
To customize your particular process, seeCustomize an inheritance processorCustomize the On-premises XML process model.
Add or capture bugs
You can define bugs from several different Azure DevOps tools. These tools include backlogs and boards and testing tools.
Tip
By default, theTitlefield is the only required field when you create a bug. You can add bugs in the same way you add user stories or product backlog items using Azure Boards. You can make some fields required by adding conditional rules based on a state change. For more information, seeAdd a rule to a work item type.
Add a bug from your backlog or board
If your team chose tomanage bugs with requirements, you can define bugs from your product backlog or board. For more information, seeCreate your product backlogorUse your board.
Add a bug from the product backlog
Add a bug from the product backlog

Add a bug from the board
Add a bug from the board

Tip
When you add a bug from your product backlog or board, the bug is automatically assigned the default Area Path and Iteration Path defined for the team. For more information, seeTeam defaults referenced by backlogs and boards.
Add a bug from your sprint backlog or Taskboard
If your team chose tomanage bugs with tasks, you can define bugs from your board, product backlog, Sprint backlog, or Sprint Taskboard. You add a bug as a child to a product backlog work item.
Add a linked child bug from the Sprint BacklogYou add a bug in the same way you add a task to a Sprint backlog. For more information, seeAdd tasks to backlog items.
Add a linked child bug from the Sprint Backlog
You add a bug in the same way you add a task to a Sprint backlog. For more information, seeAdd tasks to backlog items.

Add a linked child bug from the boardYou add a bug in the same way you add a task to a backlog item. For more information, seeAdd tasks or child items as checklists.
Add a linked child bug from the board
You add a bug in the same way you add a task to a backlog item. For more information, seeAdd tasks or child items as checklists.

Create a bug from a testing tool
The two testing tools you can use to add bugs while testing include the web portal Test Runner and the Test & Feedback extension.
Test Runner: When running manual tests, you can choose toCreate bug. For more information, seeRun manual tests.
Test Runner: When running manual tests, you can choose toCreate bug. For more information, seeRun manual tests.

Test & Feedback extension: When running exploratory tests, you can choose toCreate bugorCreate task. For more information, seeExploratory testing with the Test & Feedback extension.
Test & Feedback extension: When running exploratory tests, you can choose toCreate bugorCreate task. For more information, seeExploratory testing with the Test & Feedback extension.


Bug lifecycle and workflow states
As with all other work item types, the Bug work item type has a well-defined workflow. Each workflow consists of three or moreStatesand aReason. Reasons specify why the item transitioned from one State to another. The following images illustrate the default bug workflow defined for theAgile,Scrum, andCMMIprocesses.
For Scrum bugs, you change theStatefromCommitted(similar toActive) toDone. For Agile and CMMI, you first resolve the bug and select a reason that indicates the bug is fixed. Typically, the person who created the bug then verifies the fix and updates theStatefromResolvedtoClosed. If you find more work after you resolve or close a bug, reactivate it by setting theStatetoCommittedorActive.
Note
The Agile process bug work item type previously had a rule which reassigned the bug to the person who created it. This rule has been removed from the default system process. You can reinstate this automation by adding a rule. For an Inheritance process, seeAutomate reassignment based on state change.
Verify a fix
To verify a fix, a developer or tester attempts to reproduce the bug and look for more unexpected behavior. If necessary, they should reactivate the bug.
When verifying a bug fix, you might find that the bug wasn't fixed or you might disagree with the resolution. In this case, discuss the bug with the person who resolved it, come to an agreement, and possibly reactivate the bug. If you reactivate a bug, include the reasons for reactivating the bug in the bug description.

Close a bug
You close a bug when a team member verifies it as fixed. However, you might also close a bug for one of the following reasons. Reasons available depend on the project process and the bug transition states.
Agile process:
Deferred: Defer bug fix until the next product release.
Fixed: Bug is verified as fixed.
Duplicate: Bug tracks another bug currently defined. You can link each bug with theDuplicate/Duplicate oflink type and close one of the bugs.
As Designed: Feature works as designed.
Cannot Reproduce: Tests prove that the bug can't be reproduced.
Obsolete: The bug's feature is no longer in the product.
Copied to Backlog: A user story has been opened to track the bug.
Scrum process:
Not a Bug: Bug is verified that it isn't a bug.
Duplicate: Bug tracks another bug currently defined. You can link each bug with theDuplicate/Duplicate oflink type and close one of the bugs.
Removed from the backlog: Bug is verified that it isn't a bug. Remove the bug from the backlog.
Work finished: Bug has been verified as fixed.
CMMI process:
Deferred: Defer bug fix until the next product release.
Duplicate: Bug tracks another bug currently defined. You can link each bug with theDuplicate/Duplicate oflink type and close one of the bugs.
Rejected: Bug is verified that it isn't a bug.
Verified: Bug is verified as fixed.
Tip
After a bug has been closed and the fix is actively released in deployments, recommended practice is to never reopen it due to regression. Instead, you should consider opening a new bug and link to the older, closed bug.
It's always a good idea to describe any more details for closing a bug in theDiscussionfield to avoid future confusion as to why the bug was closed.
Automate bug closure when merging pull requests
If your team uses a Git repository, you can set the State in linked bugs and other work items to close upon successful merging of pull requests. For more information, seeSet work item state in pull requestlater in this article.
List and triage bugs
Most teams, whatever option they chose to track bugs, define one or more bug queries. With queries, you can list active bugs, unassigned bugs, stale bugs, bug trends, and more. You can add queries and query charts to your team dashboards to monitor bug status and progress.
Bug queries
Open a shared query oruse the query editorto create useful bug queries, such as the following options:
Active bugs by priority (State <> DoneorState <> Closed)
State <> Done
State <> Closed
In Progress bugs (State = CommittedorState = Active)
State = Committed
State = Active
Bugs to fix for a target release (Tags Contains RTM)
Tags Contains RTM
Recent bugs, such as bugs opened in the last three weeks (Created Date > @Today-21)
Created Date > @Today-21
When you have the queries of interest to your team, you cancreate status or trend charts. You can also add the chart you create to adashboard.
Triage mode in query results
After you start coding and testing, hold periodic triage meetings to review and rank your bugs. Typically, the project owner runs the bug triage meetings. Team leads, business analysts, and other stakeholders who can speak about specific project risks attend the triage meetings.
The project owner can define a shared query for new and reopened bugs to list bugs to be triaged.
From the query results page, you can move up and down within the list of bug work items using the up and down arrows. As you review each bug, you can assign it, add details, or set priority.

Organize and assign bugs to a sprint
If your teamtracks bugs as requirements, view the list of active bugs from your backlog. With thefilter function, you can focus solely on bugs. From the product backlog, you can also do the following tasks:
Organize bugs on your backlog. Stack rank against other items. Stack ranking is disabled when filtering is enabled.
Assign bugs to a sprintfrom your backlog using thePlanningpane.
Map Parent bugs to Featuresor other portfolio backlog items using theMappingpane.
View rollup of work to portfolio backlog items.
If your teamtracks bugs as tasks, use managed queries to list and triage bugs. In each sprint, you see the bugs assigned to the sprint from the Sprint backlog orTaskboard.

Taskboard items versus query list items
You might notice and wonder why the items shown on a sprint Taskboard can differ from a query list created in a corresponding sprint backlog.
It's possible to assign tasks or bugs to an iteration but not link them to a parent backlog item. These items appear in the created query, but might not show up on the Taskboard itself. The system runs the query and then applies a few background processes before displaying Taskboard items.
These reasons can cause work items that belong to the Task Category to not appear on a sprint backlog or Taskboard:
The task or bug isn't linked to a parent backlog item. Only bugs and tasks are linked to a parent product backlog item (Scrum), user story (Agile), or requirement (CMMI) with an iteration path set to the sprint appears on the sprint backlog page.
The task or bug is a parent of another task or bug, or the user story is a parent of another user story. If you create a hierarchy of tasks, bugs, or user stories, only the child-level tasks or the child-level stories at the bottom of the hierarchy appear. For more information, seeTroubleshoot reordering and nesting issues.
The task's or bug's linked parent corresponds to a backlog item defined for another team. Or, the area path of the task's or bug's parent backlog item differs from the task's or bug's area path.
Create inline tests linked to bugs
When your teamtracks bugs as requirements, you can use the board to add tests to verify bug fixes.

Update bug status
You can update the bug status by dragging and dropping bugs to a new column on a board.
If your teamtracks bugs as requirements, you use the board as shown in the following image. For more information, seeUpdate work item status.
If your teamtracks bugs as requirements, you use the board as shown in the following image. For more information, seeUpdate work item status.

If your teamtracks bugs as tasks, you use the Taskboard. For more information, seeUpdate and monitor your Taskboard.
If your teamtracks bugs as tasks, you use the Taskboard. For more information, seeUpdate and monitor your Taskboard.

Customize your board to track intermediate states
You can add intermediate columns to track your bug status on the board. You can also define queries that filter based on the status of a Board Column. For more information, see the following articles:
Add columns to your board
Customize a sprint Taskboard
Query changes to a board
Automate bug reassignment based on workflow state
To automate select actions, add custom rules to your Bug work item type. For example, add a rule as shown in the following image. This rule specifies to reassign a bug to the person who opened the bug when a team member resolves it. Typically, that person verifies that the bug is fixed and closes the bug. For more information, seeApply rules to workflow states (Inheritance process).


Set work item state in pull request
When you create a pull request, you can set thestatevalue of the linked work items in the description. Follow the syntax:{state value}: #ID.
{state value}: #ID
When you merge the pull request, the system reads the description and updates the work item state. The following example sets work items #300 and #301 to Resolved, and #323 and #324 to Closed.

Note
This feature requires installation of Azure DevOps Server 2020.1 update. For more information, seeAzure DevOps Server 2020 Update 1 RC1 Release Notes, Boards.
Integration across Azure DevOps
One of the methods used by Azure DevOps to support integration is to link objects to other objects. Along with linking work items to work items, you can also link work items to other objects. Link to objects such as builds, releases, branches, commits, and pull requests as illustrated in the following image.

You can add a link from the work item or from the build and release objects.

Link work items to development
TheDevelopmentcontrol supports linking to and displaying links made to builds, Git commits, and pull requests. When a TFVC repository is used, it supports links to changesets and versioned items. Choosing the link opens the corresponding item in a new browser tab. For more information, seeDrive Git development from a work item.


Link work items to releases
TheDeploymentcontrol supports links to and display of releases that contain the work items. For example, the following image shows several releases that contain links to the current work item. You can expand each release to see details about each stage. You can choose the link for each release and stage to open the corresponding release or stage. For more information, seeLink work items to deployments.

Link work items to pipeline runs
Pipelines are often defined to automatically run when a new commit occurs to a Git repository. Work items associated with the commit pipelines appear as part of the pipeline run if you customize your pipeline settings. For more information, seeCustomize your pipeline.

Create or edit a work item upon a build failure
If you use classic pipelines (not YAML), you can create work items on a build failure. For more information, seeCreate a work item on failure.
Monitor bug status, assignments, and trends
You can track the bug status, assignments, and trends using queries that you can chart and add to a dashboard. For example, here are two examples showing active bug trends by State and Active Bugs by Priority over time.

For more information about queries, charts, and dashboards seemanaged queries,charts, anddashboards.
Use Analytics views and the Analytics service to create bug reports
The Analytics service is the reporting platform for Azure DevOps. It replaces the previous platform based on SQL Server Reporting Services.
Analytics views provide prebuilt filters to view work items. Four Analytic views are supported for bug reporting. You can use these views as defined or further edit them to create a custom, filtered view.
Bugs - All history by month
Bugs - Last 26 weeks
Bugs - Last 30 days
Bugs - Today
For more information about using Analytic views, seeAbout Analytics viewsandCreate an active bugs report in Power BI based on a custom Analytics view.
You can use Power BI to create more complex reports than a query. For more information, seeConnect with Power BI Data Connector.
Predefined SQL Server bug reports
The following reports are supported for Agile and CMMI processes.
Bug Status
Bug Trends
Reactivations
These reports require that you have SQL Server Analysis Services and SQL Server Reporting Services configured for your project. To learn how to add SQL Server reports for a project, seeAdd reports to a project.
Marketplace extensions
There are multiple bug-related Marketplace extensions. SeeMarketplace for Azure DevOps.
For more information on extensions, seeAzure Boards extensions developed by Microsoft.
Next steps
Use templates to add and update work items
Related articles
Remove, delete, or restore work items
Copy or clone a work item
Product backlog and board
Use backlogs to manage projects
Create your backlog
Define features and epics
Organize your backlog and map child work items to parents
Interactively filter backlogs, boards, queries, and plans
Forecast your product backlog
Board
About Boards and Kanban
Use your board
Reorder cards
Add tasks or child items as checklists
Sprint backlog and Taskboard
Learn about Scrum best practices
Assign backlog items to a sprint
Add tasks
Update your Taskboard
Integration within Azure DevOps
Link user stories, issues, bugs, and other work items
Follow a work item or pull request
Configure run or build numbers
Industry resources
Good and Bad Technical Debt (and how TDD helps)by Henrik Kniberg
Managing Technical Debtposted by Sven Johann & Eberhard Wolff
Feedback
Was this page helpful?
Additional resources