Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Tutorial: Create a function to integrate with Azure Logic Apps
Article
2024-08-09
16 contributors
In this article
Azure Functions integrates with Azure Logic Apps in the Logic Apps Designer. This integration allows you use the computing power of Functions in orchestrations with other Azure and third-party services.
This tutorial shows you how to create a workflow to analyze X activity. As tweets are evaluated, the workflow sends notifications when positive sentiments are detected.
In this tutorial, you learn to:
Create an Azure AI services API Resource.
Create a function that categorizes tweet sentiment.
Create a logic app that connects to X.
Add sentiment detection to the logic app.
Connect the logic app to the function.
Send an email based on the response from the function.
Prerequisites
An activeXaccount.
AnOutlook.comaccount (for sending notifications).
Note
If you want to use the Gmail connector, only G-Suite business accounts can use this connector without restrictions in logic apps. If you have a Gmail consumer account, you can use the Gmail connector with only specific Google-approved apps and services, or you cancreate a Google client app to use for authentication in your Gmail connector.For more information, seeData security and privacy policies for Google connectors in Azure Logic Apps.
Create Text Analytics resource
The Azure AI services APIs are available in Azure as individual resources. Use the Text Analytics API to detect the sentiment of posted tweets.
Sign in to theAzure portal.
Sign in to theAzure portal.
SelectCreate a resourcein the upper left-hand corner of the Azure portal.
SelectCreate a resourcein the upper left-hand corner of the Azure portal.
UnderCategories, selectAI + Machine Learning
UnderCategories, selectAI + Machine Learning
UnderText Analytics, selectCreate.
UnderText Analytics, selectCreate.
Enter the following values in theCreate Text Analyticsscreen.SettingValueRemarksSubscriptionYour Azure subscription nameResource groupCreate a new resource group namedtweet-sentiment-tutorialLater, you delete this resource group to remove all the resources created during this tutorial.RegionSelect the region closest to youNameTweetSentimentAppPricing tierSelectFree F0
Enter the following values in theCreate Text Analyticsscreen.
SelectReview + create.
SelectReview + create.
SelectCreate.
SelectCreate.
Once the deployment is complete, selectGo to Resource.
Once the deployment is complete, selectGo to Resource.
Get Text Analytics settings
With the Text Analytics resource created, you'll copy a few settings and set them aside for later use.
SelectKeys and Endpoint.
SelectKeys and Endpoint.
CopyKey 1by clicking on the icon at the end of the input box.
CopyKey 1by clicking on the icon at the end of the input box.
Paste the value into a text editor.
Paste the value into a text editor.
Copy theEndpointby clicking on the icon at the end of the input box.
Copy theEndpointby clicking on the icon at the end of the input box.
Paste the value into a text editor.
Paste the value into a text editor.
Create the function app
From the top search box, search for and selectFunction app.
From the top search box, search for and selectFunction app.
SelectCreate.
SelectCreate.
Enter the following values.SettingSuggested ValueRemarksSubscriptionYour Azure subscription nameResource grouptweet-sentiment-tutorialUse the same resource group name throughout this tutorial.Function App nameTweetSentimentAPI+ a unique suffixFunction application names are globally unique. Valid characters area-z(case insensitive),0-9, and-.PublishCodeRuntime stack.NETThe function code provided for you is in C#.VersionSelect the latest version numberRegionSelect the region closest to you
Enter the following values.
a-z
0-9
-
SelectReview + create.
SelectReview + create.
SelectCreate.
SelectCreate.
Once the deployment is complete, selectGo to Resource.
Once the deployment is complete, selectGo to Resource.
Create an HTTP-triggered function
From the left menu of theFunctionswindow, selectFunctions.
From the left menu of theFunctionswindow, selectFunctions.
SelectAddfrom the top menu and enter the following values.SettingValueRemarksDevelopment environmentDevelop in portalTemplateHTTP TriggerNew FunctionTweetSentimentFunctionThis is the name of your function.Authorization levelFunction
SelectAddfrom the top menu and enter the following values.
Select theAddbutton.
Select theAddbutton.
Select theCode + Testbutton.
Select theCode + Testbutton.
Paste the following code in the code editor window.#r "Newtonsoft.Json"

using System;
using System.Net;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Primitives;
using Newtonsoft.Json;

public static async Task<IActionResult> Run(HttpRequest req, ILogger log)
{

    string requestBody = String.Empty;
    using (StreamReader streamReader =  new  StreamReader(req.Body))
    {
        requestBody = await streamReader.ReadToEndAsync();
    }

    dynamic score = JsonConvert.DeserializeObject(requestBody);
    string value = "Positive";

    if(score < .3)
    {
        value = "Negative";
    }
    else if (score < .6) 
    {
        value = "Neutral";
    }

    return requestBody != null
        ? (ActionResult)new OkObjectResult(value)
       : new BadRequestObjectResult("Pass a sentiment score in the request body.");
}A sentiment score is passed into the function, which returns a category name for the value.
Paste the following code in the code editor window.
#r "Newtonsoft.Json"

using System;
using System.Net;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Primitives;
using Newtonsoft.Json;

public static async Task<IActionResult> Run(HttpRequest req, ILogger log)
{

    string requestBody = String.Empty;
    using (StreamReader streamReader =  new  StreamReader(req.Body))
    {
        requestBody = await streamReader.ReadToEndAsync();
    }

    dynamic score = JsonConvert.DeserializeObject(requestBody);
    string value = "Positive";

    if(score < .3)
    {
        value = "Negative";
    }
    else if (score < .6) 
    {
        value = "Neutral";
    }

    return requestBody != null
        ? (ActionResult)new OkObjectResult(value)
       : new BadRequestObjectResult("Pass a sentiment score in the request body.");
}
#r "Newtonsoft.Json"

using System;
using System.Net;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Primitives;
using Newtonsoft.Json;

public static async Task<IActionResult> Run(HttpRequest req, ILogger log)
{

    string requestBody = String.Empty;
    using (StreamReader streamReader =  new  StreamReader(req.Body))
    {
        requestBody = await streamReader.ReadToEndAsync();
    }

    dynamic score = JsonConvert.DeserializeObject(requestBody);
    string value = "Positive";

    if(score < .3)
    {
        value = "Negative";
    }
    else if (score < .6) 
    {
        value = "Neutral";
    }

    return requestBody != null
        ? (ActionResult)new OkObjectResult(value)
       : new BadRequestObjectResult("Pass a sentiment score in the request body.");
}
A sentiment score is passed into the function, which returns a category name for the value.
Select theSavebutton on the toolbar to save your changes.NoteTo test the function, selectTest/Runfrom the top menu. On theInputtab, enter a value of0.9in theBodyinput box, and then selectRun. Verify that a value ofPositiveis returned in theHTTP response contentbox in theOutputsection.
Select theSavebutton on the toolbar to save your changes.
Note
To test the function, selectTest/Runfrom the top menu. On theInputtab, enter a value of0.9in theBodyinput box, and then selectRun. Verify that a value ofPositiveis returned in theHTTP response contentbox in theOutputsection.
0.9
Next, create a logic app that integrates with Azure Functions, X, and the Azure AI services API.
Create a logic app
From the top search box, search for and selectLogic Apps.
From the top search box, search for and selectLogic Apps.
SelectAdd.
SelectAdd.
SelectConsumptionand enter the following values.SettingSuggested ValueSubscriptionYour Azure subscription nameResource grouptweet-sentiment-tutorialLogic app nameTweetSentimentAppRegionSelect the region closest to you, preferably the same region you selected in previous steps.Accept default values for all other settings.
SelectConsumptionand enter the following values.
Accept default values for all other settings.
SelectReview + create.
SelectReview + create.
SelectCreate.
SelectCreate.
Once the deployment is complete, selectGo to Resource.
Once the deployment is complete, selectGo to Resource.
Select theBlank Logic Appbutton.
Select theBlank Logic Appbutton.

Select theSavebutton on the toolbar to save your progress.
Select theSavebutton on the toolbar to save your progress.
You can now use the Logic Apps Designer to add services and triggers to your application.
Connect to X
Create a connection to X so your app can poll for new tweets.
Search forXin the top search box.
Search forXin the top search box.
Select theXicon.
Select theXicon.
Select theWhen a new tweet is postedtrigger.
Select theWhen a new tweet is postedtrigger.
Enter the following values to set up the connection.SettingValueConnection nameMyXConnectionAuthentication TypeUse default shared application
Enter the following values to set up the connection.
SelectSign in.
SelectSign in.
Follow the prompts in the pop-up window to complete signing in to X.
Follow the prompts in the pop-up window to complete signing in to X.
Next, enter the following values in theWhen a new tweet is postedbox.SettingValueSearch text#my-x-tutorialHow often do you want to check for items?1in the textbox, andHourin the dropdown. You may enter different values but be sure to review the currentlimitationsof the X connector.
Next, enter the following values in theWhen a new tweet is postedbox.
Select theSavebutton on the toolbar to save your progress.
Select theSavebutton on the toolbar to save your progress.
Next, connect to text analytics to detect the sentiment of collected tweets.
Add Text Analytics sentiment detection
SelectNew step.
SelectNew step.
Search forText Analyticsin the search box.
Search forText Analyticsin the search box.
Select theText Analyticsicon.
Select theText Analyticsicon.
SelectDetect Sentimentand enter the following values.SettingValueConnection nameTextAnalyticsConnectionAccount KeyPaste in the Text Analytics account key you set aside earlier.Site URLPaste in the Text Analytics endpoint you set aside earlier.
SelectDetect Sentimentand enter the following values.
SelectCreate.
SelectCreate.
Click inside theAdd new parameterbox, and check the box next todocumentsthat appears in the pop-up.
Click inside theAdd new parameterbox, and check the box next todocumentsthat appears in the pop-up.
Click inside thedocuments Id - 1textbox to open the dynamic content pop-up.
Click inside thedocuments Id - 1textbox to open the dynamic content pop-up.
In thedynamic contentsearch box, search forid, and click onTweet id.
In thedynamic contentsearch box, search forid, and click onTweet id.
Click inside thedocuments Text - 1textbox to open the dynamic content pop-up.
Click inside thedocuments Text - 1textbox to open the dynamic content pop-up.
In thedynamic contentsearch box, search fortext, and click onTweet text.
In thedynamic contentsearch box, search fortext, and click onTweet text.
InChoose an action, typeText Analytics, and then click theDetect sentimentaction.
InChoose an action, typeText Analytics, and then click theDetect sentimentaction.
Select theSavebutton on the toolbar to save your progress.
Select theSavebutton on the toolbar to save your progress.
TheDetect Sentimentbox should look like the following screenshot.

Connect sentiment output to function endpoint
SelectNew step.
SelectNew step.
Search forAzure Functionsin the search box.
Search forAzure Functionsin the search box.
Select theAzure Functionsicon.
Select theAzure Functionsicon.
Search for your function name in the search box. If you followed the guidance above, your function name begins withTweetSentimentAPI.
Search for your function name in the search box. If you followed the guidance above, your function name begins withTweetSentimentAPI.
Select the function icon.
Select the function icon.
Select theTweetSentimentFunctionitem.
Select theTweetSentimentFunctionitem.
Click inside theRequest Bodybox, and select theDetect Sentimentscoreitem from the pop-up window.
Click inside theRequest Bodybox, and select theDetect Sentimentscoreitem from the pop-up window.
Select theSavebutton on the toolbar to save your progress.
Select theSavebutton on the toolbar to save your progress.
Add conditional step
Select theAdd an actionbutton.
Select theAdd an actionbutton.
Click inside theControlbox, and search for and selectControlin the pop-up window.
Click inside theControlbox, and search for and selectControlin the pop-up window.
SelectCondition.
SelectCondition.
Click inside theChoose a valuebox, and select theTweetSentimentFunctionBodyitem from the pop-up window.
Click inside theChoose a valuebox, and select theTweetSentimentFunctionBodyitem from the pop-up window.
EnterPositivein theChoose a valuebox.
EnterPositivein theChoose a valuebox.
Select theSavebutton on the toolbar to save your progress.
Select theSavebutton on the toolbar to save your progress.
Add email notifications
Under theTruebox, select theAdd an actionbutton.
Under theTruebox, select theAdd an actionbutton.
Search for and selectOffice 365 Outlookin the text box.
Search for and selectOffice 365 Outlookin the text box.
Search forsendand selectSend an emailin the text box.
Search forsendand selectSend an emailin the text box.
Select theSign inbutton.
Select theSign inbutton.
Follow the prompts in the pop-up window to complete signing in to Office 365 Outlook.
Follow the prompts in the pop-up window to complete signing in to Office 365 Outlook.
Enter your email address in theTobox.
Enter your email address in theTobox.
Click inside theSubjectbox and click on theBodyitem underTweetSentimentFunction. If theBodyitem isn't shown in the list, click theSee morelink to expand the options list.
Click inside theSubjectbox and click on theBodyitem underTweetSentimentFunction. If theBodyitem isn't shown in the list, click theSee morelink to expand the options list.
After theBodyitem in theSubject, enter the textTweet from:.
After theBodyitem in theSubject, enter the textTweet from:.
After theTweet from:text, click on the box again and selectUser namefrom theWhen a new tweet is postedoptions list.
After theTweet from:text, click on the box again and selectUser namefrom theWhen a new tweet is postedoptions list.
Click inside theBodybox and selectTweet textunder theWhen a new tweet is postedoptions list. If theTweet textitem isn't shown in the list, click theSee morelink to expand the options list.
Click inside theBodybox and selectTweet textunder theWhen a new tweet is postedoptions list. If theTweet textitem isn't shown in the list, click theSee morelink to expand the options list.
Select theSavebutton on the toolbar to save your progress.
Select theSavebutton on the toolbar to save your progress.
The email box should now look like this screenshot.

Run the workflow
From your X account, tweet the following text:I'm enjoying #my-x-tutorial.
From your X account, tweet the following text:I'm enjoying #my-x-tutorial.
Return to the Logic Apps Designer and select theRunbutton.
Return to the Logic Apps Designer and select theRunbutton.
Check your email for a message from the workflow.
Check your email for a message from the workflow.
Clean up resources
To clean up all the Azure services and accounts created during this tutorial, delete the resource group.
Search forResource groupsin the top search box.
Search forResource groupsin the top search box.
Select thetweet-sentiment-tutorial.
Select thetweet-sentiment-tutorial.
SelectDelete resource group
SelectDelete resource group
Entertweet-sentiment-tutorialin the text box.
Entertweet-sentiment-tutorialin the text box.
Select theDeletebutton.
Select theDeletebutton.
Optionally, you may want to return to your X account and delete any test tweets from your feed.
Next steps
Create a serverless API using Azure Functions
Feedback
Was this page helpful?
Additional resources