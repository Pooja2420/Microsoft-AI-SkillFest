Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
AzureDiagnostics
Article
2025-04-21
2 contributors
In this article
Stores resource logs for Azure services that use Azure Diagnostics mode. Resource logs describe the internal operation of Azure resources.
The resource log for each Azure service has a unique set of columns. The AzureDiagnostics table includes the most common columns used by Azure services. If a resource log includes a column that doesn't already exist in the AzureDiagnostics table, that column is added the first time that data is collected. If the maximum number of 500 columns is reached, data for any additional columns is added to a dynamic column.
Azure services that use resource-specific mode store data in a table specific to that service and don't use the AzureDiagnostics table. SeeAzure resource logsfor details on the differences. SeeResources using Azure Diagnostics modefor the services that use Azure Diagnostics.
Note
The AzureDiagnostics table is a custom log table created exclusively by the Azure Monitor pipeline the first time an Azure resource begins sending logs in Azure Diagnostics mode. Unlike other tables, the AzureDiagnostics table can't be created via an ARM template or tables API. Consequently, it's not possible to modifying the table's default retention values before its creation.
AdditionalFields column
Unlike other tables,AzureDiagnosticsis much more susceptible to exceeding the 500 column limit imposed for any table in a Log Analytics workspace due to the wide assortment of Azure Resources capable of sending data to this table. To ensure that no data is lost due to the number of active columns exceeding this 500 column limit, AzureDiagnostics column creation is handled in a different manner to other tables.
The AzureDiagnostics table in every workspace contains at a minimum, the same200 columns. For workspaces created before January 19, 2021, the table also contains any columns that were already in place before this date. When data is sent to a column not already in place:
If the total number of columns inAzureDiagnosticsin the current workspace doesn't exceed 500, a new column is created just like with any other table.
If the total number of columns is at or above 500, the excess data is added to a dynamic property bag column calledAdditionalFieldsas a property.
Example
To illustrate this behavior, imagine that as of (deployment date) the AzureDiagnostics table in our workspace looks as follows:
A resource that sends data toAzureDiagnosticsthen adds a new dimension to their data that they callNewInfo1. Since the table still has fewer than 500 columns, the first time an event occurs that contains data for this new dimension adds a new column to the table:
You can return this new data in a simple query:
AzureDiagnostics | where NewInfo1_s == "xyz"
AzureDiagnostics | where NewInfo1_s == "xyz"
At a later date, another resource sends data toAzureDiagnosticsthat adds new dimensions calledNewInfo2andNewInfo3. Because the table has reached 500 columns in this workspace, the new data goes into theAdditionalFieldscolumn:
You can still query for this data, but you must extract it from the property bag using any of the dynamic property operators in KQL:
AzureDiagnostics
| where AdditionalFields.NewInfo2 == "789" and AdditionalFields.NewInfo3 == "qwerty"
AzureDiagnostics
| where AdditionalFields.NewInfo2 == "789" and AdditionalFields.NewInfo3 == "qwerty"
Tips on using theAdditionalFieldscolumn
AdditionalFields
While query best practices such as always filtering by time as the first clause in the query should be followed, there are some other recommendations you should consider when working with AdditionalFields:
You must typecast data before performing further operations on it. For example, if you have a column  calledPerf1Sec_iand a property inAdditionalFieldscalledPerf2Sec, and you want to calculate total perf by adding both values, you can use the following:AzureDiagnostics | extend TotalPerfSec = Perf1Sec_i + toint(AdditionalFields.Perf2Sec) | .....
AzureDiagnostics | extend TotalPerfSec = Perf1Sec_i + toint(AdditionalFields.Perf2Sec) | ....
Usewhereclauses to reduce the data volume to the smallest possible before writing any complex logic to significantly improve performance.TimeGeneratedis one column that should always be reduced to the smallest possible window. In the case ofAzureDiagnostics, an additional filter should always be included at the top of the query around the resource types that are being queried using theResourceTypecolumn.
When querying large volumes of data, it's sometimes more efficient to do a filter onAdditionalFieldsas a whole rather than parsing it. For example, for large volumes of data,AzureDiagnostics | where AdditionalFields has "Perf2Sec"is often more efficient thanAzureDiagnostics | where isnotnull(toint(AdditionalFields.Perf2Sec)).
AzureDiagnostics | where AdditionalFields has "Perf2Sec"
AzureDiagnostics | where isnotnull(toint(AdditionalFields.Perf2Sec))
Resources using Azure Diagnostics mode
The following services use Azure diagnostics mode for their resource logs and send data to the Azure Diagnostics table. SeeAzure resource logsfor details on this configuration.
Note
All other resources send data to resource-specific tables.
Azure Diagnostics mode or resource-specific mode
The following services use either Azure diagnostics mode or resource-specific mode for their resource logs depending on the diagnostics settings configuration. When using resource-specific mode, these resources don't send data to the AzureDiagnostics table. SeeAzure resource logsfor details on this configuration.
AzureDiagnostics table columns
Feedback
Was this page helpful?
Additional resources