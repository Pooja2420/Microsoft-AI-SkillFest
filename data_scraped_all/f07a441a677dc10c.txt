Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Create a parameters file for Bicep deployment
Article
2025-03-25
11 contributors
In this article
Bicep parameter files allow you to define values in an individual file that are then passed to yourmain.bicepfile. The parameter file exposes values that may change from a given subscription, environment, and/or region. Leveraging a parameter file will drive consistency in your IaC deployments while also providing flexibility. Some of this flexibility might allow an organization to take advantage of cost benefits by right-sizing their nonproduction environments while maintaining the same core infrastructure.
main.bicep
These parameter files also help enable a streamlined CI/CD deployment approach. Each parameter file is under source control and passed into the appropriate automated deployment steps. These parameter files ensure a consistent deployment experience.
This article shows you how to create a parameters file, which you can use instead of passing parameters as inline values in your script. You can use either a Bicep parameters file with the.bicepparamfile extension or a JSON parameters file that contains the parameter value.
.bicepparam
Note
Bicep parameters files are supported only inBicep CLIversion 0.18.4 or later,Azure CLIversion 2.47.0 or later, andAzure PowerShellversion 9.7.1 or later.
A single Bicep file can have multiple Bicep parameters files associated with it. However, each Bicep parameters file is intended for one particular Bicep file. You can establish this relationship by applying theusingstatementwithin the Bicep parameters file.
using
You can compile Bicep parameters files into JSON parameters files that you can deploy by using a Bicep file. For more information, seebuild-params. You can also decompile a JSON parameters file into a Bicep parameters file. For more information, seedecompile-params.
build-params
decompile-params
Parameters file
A parameters file uses the following format:
Bicep parameters file
JSON parameters file
using '<path>/<file-name>.bicep'

param <first-parameter-name> = <first-value>
param <second-parameter-name> = <second-value>
using '<path>/<file-name>.bicep'

param <first-parameter-name> = <first-value>
param <second-parameter-name> = <second-value>
You can apply theusingstatement by using a Bicep file, JSON Azure Resource Manager templates, Bicep modules, and template specifications. For example:
using
using './main.bicep'
...
using './main.bicep'
...
using './azuredeploy.json'
...
using './azuredeploy.json'
...
using 'br/public:avm/res/storage/storage-account:0.9.0' 
...
using 'br/public:avm/res/storage/storage-account:0.9.0' 
...
using 'br:myacr.azurecr.io/bicep/modules/storage:v1'
...
using 'br:myacr.azurecr.io/bicep/modules/storage:v1'
...
using 'ts:00000000-0000-0000-0000-000000000000/myResourceGroup/storageSpec:1.0'
...
using 'ts:00000000-0000-0000-0000-000000000000/myResourceGroup/storageSpec:1.0'
...
For more information, seeUsing statement.
You can use expressions with the default value. For example:
using 'main.bicep'

param storageName = toLower('MyStorageAccount')
param intValue = 2 + 2
using 'main.bicep'

param storageName = toLower('MyStorageAccount')
param intValue = 2 + 2
You can reference environment variables as parameter values. For example:
using './main.bicep'

param intFromEnvironmentVariables = int(readEnvironmentVariable('intEnvVariableName'))
using './main.bicep'

param intFromEnvironmentVariables = int(readEnvironmentVariable('intEnvVariableName'))
You can define and use variables. You must useBicep CLIversion 0.21.X or later to use variables in.bicepparamfiles. See the following examples:
.bicepparam
using './main.bicep'

var storagePrefix = 'myStorage'
param primaryStorageName = '${storagePrefix}Primary'
param secondaryStorageName = '${storagePrefix}Secondary'
using './main.bicep'

var storagePrefix = 'myStorage'
param primaryStorageName = '${storagePrefix}Primary'
param secondaryStorageName = '${storagePrefix}Secondary'
using './main.bicep'

var testSettings = {
  instanceSize: 'Small'
  instanceCount: 1
}

var prodSettings = {
  instanceSize: 'Large'
  instanceCount: 4
}

param environmentSettings = {
  test: testSettings
  prod: prodSettings
}
using './main.bicep'

var testSettings = {
  instanceSize: 'Small'
  instanceCount: 1
}

var prodSettings = {
  instanceSize: 'Large'
  instanceCount: 4
}

param environmentSettings = {
  test: testSettings
  prod: prodSettings
}
{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "<first-parameter-name>": {
      "value": "<first-value>"
    },
    "<second-parameter-name>": {
      "value": "<second-value>"
    }
  }
}
{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "<first-parameter-name>": {
      "value": "<first-value>"
    },
    "<second-parameter-name>": {
      "value": "<second-value>"
    }
  }
}
Note
A parameters file saves parameter values as plain text. For security reasons, we don't recommend using this approach with sensitive values such as passwords.
If you need to pass a parameter with a sensitive value, you should keep the value in a key vault. Instead of adding a sensitive value to your parameters file, use thegetSecretfunctionto retrieve it. For more information, seeUse Azure Key Vault to pass a secret as a parameter during Bicep deployment.
getSecret
Parameter type formats
The following example shows the formats of various parameter types: string, integer, Boolean, array, and object.
Bicep parameters file
JSON parameters file
using './main.bicep'

param exampleString = 'test string'
param exampleInt = 2 + 2
param exampleBool = true
param exampleArray = [
  'value 1'
  'value 2'
]
param exampleObject = {
  property1: 'value 1'
  property2: 'value 2'
}
using './main.bicep'

param exampleString = 'test string'
param exampleInt = 2 + 2
param exampleBool = true
param exampleArray = [
  'value 1'
  'value 2'
]
param exampleObject = {
  property1: 'value 1'
  property2: 'value 2'
}
Use Bicep syntax to declareobjectsandarrays.
{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "exampleString": {
      "value": "test string"
    },
    "exampleInt": {
      "value": 4
    },
    "exampleBool": {
      "value": true
    },
    "exampleArray": {
      "value": [
        "value 1",
        "value 2"
      ]
    },
    "exampleObject": {
      "value": {
        "property1": "value1",
        "property2": "value2"
      }
    }
  }
}
{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "exampleString": {
      "value": "test string"
    },
    "exampleInt": {
      "value": 4
    },
    "exampleBool": {
      "value": true
    },
    "exampleArray": {
      "value": [
        "value 1",
        "value 2"
      ]
    },
    "exampleObject": {
      "value": {
        "property1": "value1",
        "property2": "value2"
      }
    }
  }
}
File name
Bicep parameters file
JSON parameters file
The file extension for a Bicep parameters file is.bicepparam.
.bicepparam
To deploy to multiple environments, you create more than one parameters file. When you use multiple parameters files, label them according to their use. For example, to deploy resources, use the labelmain.dev.bicepparamfor development and the labelmain.prod.bicepparamfor production.
The general naming convention for a parameters file is to includeparametersin the Bicep file name. For example, if your Bicep file is namedazuredeploy.bicep, then your parameters file is namedazuredeploy.parameters.json. This naming convention helps you see the connection between the Bicep file and the parameters.
To deploy to different environments, you create more than one parameters file. When you use multiple parameters files, label them according to their use. For example, to deploy resources, use the labelazuredeploy.parameters-dev.jsonfor development and the labelazuredeploy.parameters-prod.jsonfor production.
Define parameter values
To determine how to define parameter names and values, open your Bicep file. Look at theparameterssection of the Bicep file. The following examples show the parameters from a Bicep file namedmain.bicep:
main.bicep
@maxLength(11)
param storagePrefix string

@allowed([
  'Standard_LRS'
  'Standard_GRS'
  'Standard_ZRS'
  'Premium_LRS'
])
param storageAccountType string = 'Standard_LRS'
@maxLength(11)
param storagePrefix string

@allowed([
  'Standard_LRS'
  'Standard_GRS'
  'Standard_ZRS'
  'Premium_LRS'
])
param storageAccountType string = 'Standard_LRS'
In the parameters file, look for the name of each parameter. The parameter names in your parameters file must match the parameter names in your Bicep file.
Bicep parameters file
JSON parameters file
using 'main.bicep'

param storagePrefix
param storageAccountType
using 'main.bicep'

param storagePrefix
param storageAccountType
Theusingstatement ties the Bicep parameters file to a Bicep file. For more information, seeUsing statement.
using
When you type the keywordparamin Visual Studio Code, it prompts you the available parameters and their descriptions from the linked Bicep file.
param

When you hover over aparamname, you can see the parameter data type and description.
param

{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "storagePrefix": {
    },
    "storageAccountType": {
    }
  }
}
{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "storagePrefix": {
    },
    "storageAccountType": {
    }
  }
}
Review the parameter type, because the parameter types in your parameters file must use the same types as your Bicep file. In this example, both parameter types are strings:
Bicep parameters file
JSON parameters file
using 'main.bicep'

param storagePrefix = ''
param storageAccountType = ''
using 'main.bicep'

param storagePrefix = ''
param storageAccountType = ''
{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "storagePrefix": {
      "value": ""
    },
    "storageAccountType": {
      "value": ""
    }
  }
}
{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "storagePrefix": {
      "value": ""
    },
    "storageAccountType": {
      "value": ""
    }
  }
}
Check the Bicep file for parameters that include a default value. If a parameter has a default value, you can provide a value in the parameters file, but it isn't required. The parameters file value overrides the Bicep file's default value.
Bicep parameters file
JSON parameters file
using 'main.bicep'

param storagePrefix = '' // This value must be provided.
param storageAccountType = '' // This value is optional. Bicep uses default value if not provided.
using 'main.bicep'

param storagePrefix = '' // This value must be provided.
param storageAccountType = '' // This value is optional. Bicep uses default value if not provided.
{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "storagePrefix": {
      "value": "" // This value must be provided.
    },
    "storageAccountType": {
      "value": "" // This value is optional. Bicep uses default value if not provided.
    }
  }
}
{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "storagePrefix": {
      "value": "" // This value must be provided.
    },
    "storageAccountType": {
      "value": "" // This value is optional. Bicep uses default value if not provided.
    }
  }
}
Note
For inline comments, you can use either // or /* ... */. In Visual Studio Code, save parameters files with theJSONCfile type. If you don't, you get an error message that says, "Comments not permitted in JSON."
JSONC
To see if there are any restrictions like maximum length, check the Bicep file's allowed values. The allowed values specify the range of values you can provide for a parameter. In this example,storagePrefixcan have a maximum of 11 characters, andstorageAccountTypemust specify an allowed value.
storagePrefix
storageAccountType
Bicep parameters file
JSON parameters file
using 'main.bicep'

param storagePrefix = 'storage'
param storageAccountType = 'Standard_ZRS'
using 'main.bicep'

param storagePrefix = 'storage'
param storageAccountType = 'Standard_ZRS'
{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "storagePrefix": {
      "value": "storage"
    },
    "storageAccountType": {
      "value": "Standard_ZRS"
    }
  }
}
{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentParameters.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "storagePrefix": {
      "value": "storage"
    },
    "storageAccountType": {
      "value": "Standard_ZRS"
    }
  }
}
Note
Your parameters file can contain only values for parameters that are defined in the Bicep file. If your parameters file contains extra parameters that don't match the Bicep file's parameters, you receive an error.
Generate parameters file
You can create a parameters file by using either Visual Studio Code or the Bicep CLI. Both tools allow you to use a Bicep file to generate a parameters file. SeeGenerate parameters filefor the Visual Studio Code method andGenerate parameters filefor the Bicep CLI method.
Build Bicep parameters file
From the Bicep CLI, you can build a Bicep parameters file into a JSON parameters file. For more information, seeBuild parameters file.
Deploy Bicep file with parameters file
Azure CLI
From the Azure CLI, you can pass a parameters file with your Bicep file deployment.
Bicep parameters file
JSON parameters file
You can deploy a Bicep file by using a Bicep parameters file withAzure CLIversion 2.53.0 or later andBicep CLIversion 0.22.X or later. With theusingstatement within the Bicep parameters file, there's no need to provide the--template-fileswitch when specifying a Bicep parameters file for the--parametersswitch.
using
--template-file
--parameters
az deployment group create \
  --name ExampleDeployment \
  --resource-group ExampleGroup \
  --parameters storage.bicepparam
az deployment group create \
  --name ExampleDeployment \
  --resource-group ExampleGroup \
  --parameters storage.bicepparam
az deployment group create \
  --name ExampleDeployment \
  --resource-group ExampleGroup \
  --template-file storage.bicep \
  --parameters storage.parameters.json
az deployment group create \
  --name ExampleDeployment \
  --resource-group ExampleGroup \
  --template-file storage.bicep \
  --parameters storage.parameters.json
You can use inline parameters and a location parameters file in the same deployment operation. For example:
Bicep parameters file
JSON parameters file
az deployment group create \
  --name ExampleDeployment \
  --resource-group ExampleGroup \
  --parameters storage.bicepparam \
  --parameters storageAccountType=Standard_LRS
az deployment group create \
  --name ExampleDeployment \
  --resource-group ExampleGroup \
  --parameters storage.bicepparam \
  --parameters storageAccountType=Standard_LRS
az deployment group create \
  --name ExampleDeployment \
  --resource-group ExampleGroup \
  --template-file storage.bicep \
  --parameters storage.parameters.json \
  --parameters storageAccountType=Standard_LRS
az deployment group create \
  --name ExampleDeployment \
  --resource-group ExampleGroup \
  --template-file storage.bicep \
  --parameters storage.parameters.json \
  --parameters storageAccountType=Standard_LRS
For more information, seeDeploy Bicep files by using the Azure CLI.
Azure PowerShell
From Azure PowerShell, pass a local parameters file by using theTemplateParameterFileparameter.
TemplateParameterFile
Bicep parameters file
JSON parameters file
New-AzResourceGroupDeployment `
  -Name ExampleDeployment `
  -ResourceGroupName ExampleResourceGroup `
  -TemplateFile C:\MyTemplates\storage.bicep `
  -TemplateParameterFile C:\MyTemplates\storage.bicepparam
New-AzResourceGroupDeployment `
  -Name ExampleDeployment `
  -ResourceGroupName ExampleResourceGroup `
  -TemplateFile C:\MyTemplates\storage.bicep `
  -TemplateParameterFile C:\MyTemplates\storage.bicepparam
New-AzResourceGroupDeployment `
  -Name ExampleDeployment `
  -ResourceGroupName ExampleResourceGroup `
  -TemplateFile C:\MyTemplates\storage.bicep `
  -TemplateParameterFile C:\MyTemplates\storage.parameters.json
New-AzResourceGroupDeployment `
  -Name ExampleDeployment `
  -ResourceGroupName ExampleResourceGroup `
  -TemplateFile C:\MyTemplates\storage.bicep `
  -TemplateParameterFile C:\MyTemplates\storage.parameters.json
You can use inline parameters and a location parameters file in the same deployment operation. For example:
Bicep parameters file
JSON parameters file
New-AzResourceGroupDeployment `
  -Name ExampleDeployment `
  -ResourceGroupName ExampleResourceGroup `
  -TemplateFile C:\MyTemplates\storage.bicep `
  -TemplateParameterFile C:\MyTemplates\storage.bicepparam `
  -storageAccountType Standard_LRS
New-AzResourceGroupDeployment `
  -Name ExampleDeployment `
  -ResourceGroupName ExampleResourceGroup `
  -TemplateFile C:\MyTemplates\storage.bicep `
  -TemplateParameterFile C:\MyTemplates\storage.bicepparam `
  -storageAccountType Standard_LRS
New-AzResourceGroupDeployment `
  -Name ExampleDeployment `
  -ResourceGroupName ExampleResourceGroup `
  -TemplateFile C:\MyTemplates\storage.bicep `
  -TemplateParameterFile C:\MyTemplates\storage.parameters.json `
  -storageAccountType Standard_LRS
New-AzResourceGroupDeployment `
  -Name ExampleDeployment `
  -ResourceGroupName ExampleResourceGroup `
  -TemplateFile C:\MyTemplates\storage.bicep `
  -TemplateParameterFile C:\MyTemplates\storage.parameters.json `
  -storageAccountType Standard_LRS
For more information, seeDeploy Bicep files with Azure PowerShell. To deploy.bicepfiles, you need Azure PowerShell version 5.6.0 or later.
.bicep
Parameter precedence
You can use inline parameters and a local parameters file in the same deployment operation. For example, you can specify some values in the local parameters file and add other values inline during deployment. If you provide values for a parameter in both the local parameters file and inline, the inline value takes precedence.
Although external Bicep parameters files aren't currently supported, you can use an external JSON parameters file by providing the URI to the file. When you use an external parameters file, provide all parameter values in the external file. When you use an external file, you can't pass other values inline or from a local file, and all inline parameters are ignored.
Parameter name conflicts
If your Bicep file includes a parameter with the same name as one of the parameters in the Azure PowerShell command, Azure PowerShell presents the parameter from your Bicep file with theFromTemplatepostfix. For example, if a parameter namedResourceGroupNamein your Bicep file conflicts with theResourceGroupNameparameter in theNew-AzResourceGroupDeploymentcmdlet, you're prompted to provide a value forResourceGroupNameFromTemplate. To avoid this confusion, use parameter names that aren't used for deployment commands.
FromTemplate
ResourceGroupName
ResourceGroupName
New-AzResourceGroupDeployment
ResourceGroupNameFromTemplate
Related content
For more information about how to define parameters in a Bicep file, seeParameters in Bicep.
To get sensitive values, seeUse Azure Key Vault to pass secure parameter value during deployment.
Feedback
Was this page helpful?
Additional resources