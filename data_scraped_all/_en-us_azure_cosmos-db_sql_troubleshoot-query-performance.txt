Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Troubleshoot query issues when using Azure Cosmos DB
Article
2024-08-14
3 contributors
In this article
APPLIES TO:NoSQL
This article walks through a general recommended approach for troubleshooting queries in Azure Cosmos DB. Although you shouldn't consider the steps outlined in this article a complete defense against potential query issues, we've included the most common performance tips here. You should use this article as a starting place for troubleshooting slow or expensive queries in the Azure Cosmos DB for NoSQL. You can also usediagnostics logsto identify queries that are slow or that consume significant amounts of throughput. If you are using Azure Cosmos DB's API for MongoDB, you should useAzure Cosmos DB's API for MongoDB query troubleshooting guide
Query optimizations in Azure Cosmos DB are broadly categorized as follows:
Optimizations that reduce the Request Unit (RU) charge of the query
Optimizations that just reduce latency
If you reduce the RU charge of a query, you'll typically decrease latency as well.
Common SDK issues
Before reading this guide, it is helpful to consider common SDK issues that aren't related to the query engine.
Follow theseSDK Performance tips for query.
Sometimes queries may have empty pages even when there are results on a future page. Reasons for this could be:The SDK could be doing multiple network calls.The query might be taking a long time to retrieve the documents.
The SDK could be doing multiple network calls.
The query might be taking a long time to retrieve the documents.
All queries have a continuation token that allows the query to continue. Be sure to drain the query completely. Learn more abouthandling multiple pages of results
Get query metrics
When you optimize a query in Azure Cosmos DB, the first step is always toget the query metricsfor your query. These metrics are also available through the Azure portal. Once you run your query in the Data Explorer, the query metrics are visible next to theResultstab:

After you get the query metrics, compare theRetrieved Document Countwith theOutput Document Countfor your query. Use this comparison to identify the relevant sections to review in this article.
TheRetrieved Document Countis the number of documents that the query engine needed to load. TheOutput Document Countis the number of documents that were needed for the results of the query. If theRetrieved Document Countis higher than theOutput Document Count, there was at least one part of your query that was unable to use an index and needed to do a scan.
Refer to the following sections to understand the relevant query optimizations for your scenario.
Query's RU charge is too high
Include necessary paths in the indexing policy.
Include necessary paths in the indexing policy.
Understand which system functions use the index.
Understand which system functions use the index.
Improve string system function execution.
Improve string system function execution.
Understand which aggregate queries use the index.
Understand which aggregate queries use the index.
Optimize queries that have both a filter and an ORDER BY clause.
Optimize queries that have both a filter and an ORDER BY clause.
Optimize JOIN expressions by using a subquery.
Optimize JOIN expressions by using a subquery.
Minimize cross partition queries.
Minimize cross partition queries.
Optimize queries that have filters on multiple properties.
Optimize queries that have filters on multiple properties.
Optimize queries that have both a filter and an ORDER BY clause.
Optimize queries that have both a filter and an ORDER BY clause.
Query's RU charge is acceptable but latency is still too high
Improve proximity.
Improve proximity.
Increase provisioned throughput.
Increase provisioned throughput.
Increase MaxConcurrency.
Increase MaxConcurrency.
Increase MaxBufferedItemCount.
Increase MaxBufferedItemCount.
Queries where Retrieved Document Count exceeds Output Document Count
TheRetrieved Document Countis the number of documents that the query engine needed to load. TheOutput Document Countis the number of documents returned by the query. If theRetrieved Document Countis higher than theOutput Document Count, there was at least one part of your query that was unable to use an index and needed to do a scan.
Here's an example of scan query that wasn't entirely served by the index:
Query:
SELECT VALUE c.description
FROM c
WHERE UPPER(c.description) = "BABYFOOD, DESSERT, FRUIT DESSERT, WITHOUT ASCORBIC ACID, JUNIOR"
SELECT VALUE c.description
FROM c
WHERE UPPER(c.description) = "BABYFOOD, DESSERT, FRUIT DESSERT, WITHOUT ASCORBIC ACID, JUNIOR"
Query metrics:
Retrieved Document Count                 :          60,951
Retrieved Document Size                  :     399,998,938 bytes
Output Document Count                    :               7
Output Document Size                     :             510 bytes
Index Utilization                        :            0.00 %
Total Query Execution Time               :        4,500.34 milliseconds
  Query Preparation Times
    Query Compilation Time               :            0.09 milliseconds
    Logical Plan Build Time              :            0.05 milliseconds
    Physical Plan Build Time             :            0.04 milliseconds
    Query Optimization Time              :            0.01 milliseconds
  Index Lookup Time                      :            0.01 milliseconds
  Document Load Time                     :        4,177.66 milliseconds
  Runtime Execution Times
    Query Engine Times                   :          322.16 milliseconds
    System Function Execution Time       :           85.74 milliseconds
    User-defined Function Execution Time :            0.00 milliseconds
  Document Write Time                    :            0.01 milliseconds
Client Side Metrics
  Retry Count                            :               0
  Request Charge                         :        4,059.95 RUs
Retrieved Document Count                 :          60,951
Retrieved Document Size                  :     399,998,938 bytes
Output Document Count                    :               7
Output Document Size                     :             510 bytes
Index Utilization                        :            0.00 %
Total Query Execution Time               :        4,500.34 milliseconds
  Query Preparation Times
    Query Compilation Time               :            0.09 milliseconds
    Logical Plan Build Time              :            0.05 milliseconds
    Physical Plan Build Time             :            0.04 milliseconds
    Query Optimization Time              :            0.01 milliseconds
  Index Lookup Time                      :            0.01 milliseconds
  Document Load Time                     :        4,177.66 milliseconds
  Runtime Execution Times
    Query Engine Times                   :          322.16 milliseconds
    System Function Execution Time       :           85.74 milliseconds
    User-defined Function Execution Time :            0.00 milliseconds
  Document Write Time                    :            0.01 milliseconds
Client Side Metrics
  Retry Count                            :               0
  Request Charge                         :        4,059.95 RUs
TheRetrieved Document Count(60,951) is higher than theOutput Document Count(7), implying that this query resulted in a document scan. In this case, the system functionUPPER()doesn't use an index.
Include necessary paths in the indexing policy
Your indexing policy should cover any properties included inWHEREclauses,ORDER BYclauses,JOIN, and most system functions. The desired paths specified in the index policy should match the properties in the JSON documents.
WHERE
ORDER BY
JOIN
Note
Properties in Azure Cosmos DB indexing policy are case-sensitive
Query:
SELECT *
FROM c
WHERE c.description = "Malabar spinach, cooked"
SELECT *
FROM c
WHERE c.description = "Malabar spinach, cooked"
Indexing policy:
{
    "indexingMode": "consistent",
    "automatic": true,
    "includedPaths": [
        {
            "path": "/*"
        }
    ],
    "excludedPaths": [
        {
            "path": "/description/*"
        }
    ]
}
{
    "indexingMode": "consistent",
    "automatic": true,
    "includedPaths": [
        {
            "path": "/*"
        }
    ],
    "excludedPaths": [
        {
            "path": "/description/*"
        }
    ]
}
RU charge:409.51 RUs
Updated indexing policy:
{
    "indexingMode": "consistent",
    "automatic": true,
    "includedPaths": [
        {
            "path": "/*"
        }
    ],
    "excludedPaths": []
}
{
    "indexingMode": "consistent",
    "automatic": true,
    "includedPaths": [
        {
            "path": "/*"
        }
    ],
    "excludedPaths": []
}
RU charge:2.98 RUs
You can add properties to the indexing policy at any time, with no effect on write or read availability. You cantrack index transformation progress.
Understand which system functions use the index
Most system functions use indexes. Here's a list of some common string functions that use indexes:
StartsWith
Contains
RegexMatch
Left
Substring - but only if the first num_expr is 0
Following are some common system functions that don't use the index and must load each document when used in aWHEREclause:
WHERE
SELECT * FROM c WHERE UPPER(c.name) = 'BOB'
SELECT * FROM c WHERE c.name = 'BOB'
WHERE
These system functions can use indexes, except when used in queries with aggregates:
When used in theSELECTclause, inefficient system functions will not affect how queries can use indexes.
SELECT
Improve string system function execution
For some system functions that use indexes, you can improve query execution by adding anORDER BYclause to the query.
ORDER BY
More specifically, any system function whose RU charge increases as the cardinality of the property increases may benefit from havingORDER BYin the query. These queries do an index scan, so having the query results sorted can make the query more efficient.
ORDER BY
This optimization can improve execution for the following system functions:
StartsWith (where case-insensitive = true)
StringEquals (where case-insensitive = true)
Contains
RegexMatch
EndsWith
For example, consider the below query withCONTAINS.CONTAINSwill use indexes but sometimes, even after adding the relevant index, you may still observe a high RU charge when running the below query.
CONTAINS
CONTAINS
Original query:
SELECT *
FROM c
WHERE CONTAINS(c.town, "Sea")
SELECT *
FROM c
WHERE CONTAINS(c.town, "Sea")
You can improve query execution by addingORDER BY:
ORDER BY
SELECT *
FROM c
WHERE CONTAINS(c.town, "Sea")
ORDER BY c.town
SELECT *
FROM c
WHERE CONTAINS(c.town, "Sea")
ORDER BY c.town
The same optimization can help in queries with other filters. In this case, it's best to also add properties with equality filters to theORDER BYclause.
ORDER BY
Original query:
SELECT *
FROM c
WHERE c.name = "Samer" AND CONTAINS(c.town, "Sea")
SELECT *
FROM c
WHERE c.name = "Samer" AND CONTAINS(c.town, "Sea")
You can improve query execution by addingORDER BYanda composite indexfor (c.name, c.town):
ORDER BY
SELECT *
FROM c
WHERE c.name = "Samer" AND CONTAINS(c.town, "Sea")
ORDER BY c.name, c.town
SELECT *
FROM c
WHERE c.name = "Samer" AND CONTAINS(c.town, "Sea")
ORDER BY c.name, c.town
Understand which aggregate queries use the index
In most cases, aggregate system functions in Azure Cosmos DB uses the index. However, depending on the filters or another clauses in an aggregate query, the query engine may be required to load a high number of documents. Typically, the query engine applies equality and range filters first. After applying these filters,
the query engine can evaluate other filters and resort to loading remaining documents to compute the aggregate, if needed.
For example, given these two sample queries, the query with both an equality andCONTAINSsystem function filter is generally more efficient than a query with just aCONTAINSsystem function filter. This is because the equality filter is applied first and uses the index before documents need to be loaded for the more expensiveCONTAINSfilter.
CONTAINS
CONTAINS
CONTAINS
Query with onlyCONTAINSfilter - higher RU charge:
CONTAINS
SELECT COUNT(1)
FROM c
WHERE CONTAINS(c.description, "spinach")
SELECT COUNT(1)
FROM c
WHERE CONTAINS(c.description, "spinach")
Query with both equality filter andCONTAINSfilter - lower RU charge:
CONTAINS
SELECT AVG(c._ts)
FROM c
WHERE c.foodGroup = "Sausages and Luncheon Meats" AND CONTAINS(c.description, "spinach")
SELECT AVG(c._ts)
FROM c
WHERE c.foodGroup = "Sausages and Luncheon Meats" AND CONTAINS(c.description, "spinach")
Here are more examples of aggregate queries that will not fully use the index:
You should refer to the relevantsystem function's pageto see if it uses the index.
SELECT MAX(c._ts)
FROM c
WHERE CONTAINS(c.description, "spinach")
SELECT MAX(c._ts)
FROM c
WHERE CONTAINS(c.description, "spinach")
SELECT AVG(c._ts)
FROM c
WHERE udf.MyUDF("Sausages and Luncheon Meats")
SELECT AVG(c._ts)
FROM c
WHERE udf.MyUDF("Sausages and Luncheon Meats")
The RU charge of queries withGROUP BYincrease as the cardinality of the properties in theGROUP BYclause increases. In the below query, for example, the RU charge of the query increase as the number unique descriptions increases.
GROUP BY
GROUP BY
The RU charge of an aggregate function with aGROUP BYclause is higher than the RU charge of an aggregate function alone. In this example, the query engine must load every document that matches thec.foodGroup = "Sausages and Luncheon Meats"filter so the RU charge is expected to be high.
GROUP BY
c.foodGroup = "Sausages and Luncheon Meats"
SELECT COUNT(1)
FROM c
WHERE c.foodGroup = "Sausages and Luncheon Meats"
GROUP BY c.description
SELECT COUNT(1)
FROM c
WHERE c.foodGroup = "Sausages and Luncheon Meats"
GROUP BY c.description
If you plan to frequently run the same aggregate queries, it may be more efficient to build a real-time materialized view with theAzure Cosmos DB change feedthan running individual queries.
Optimize queries that have both a filter and an ORDER BY clause
Although queries that have a filter and anORDER BYclause will normally use a range index, they are more efficient if they can be served from a composite index. In addition to modifying the indexing policy, you should add all properties in the composite index to theORDER BYclause. This change to the query ensures that it uses the composite index.
ORDER BY
ORDER BY
Query:
SELECT *
FROM c
WHERE c.foodGroup = "Soups, Sauces, and Gravies"
ORDER BY c._ts ASC
SELECT *
FROM c
WHERE c.foodGroup = "Soups, Sauces, and Gravies"
ORDER BY c._ts ASC
Indexing policy:
{

        "automatic":true,
        "indexingMode":"Consistent",
        "includedPaths":[  
            {  
                "path":"/*"
            }
        ],
        "excludedPaths":[]
}
{

        "automatic":true,
        "indexingMode":"Consistent",
        "includedPaths":[  
            {  
                "path":"/*"
            }
        ],
        "excludedPaths":[]
}
RU charge:44.28 RUs
Updated query (includes both properties in theORDER BYclause):
ORDER BY
SELECT *
FROM c
WHERE c.foodGroup = "Soups, Sauces, and Gravies"
ORDER BY c.foodGroup, c._ts ASC
SELECT *
FROM c
WHERE c.foodGroup = "Soups, Sauces, and Gravies"
ORDER BY c.foodGroup, c._ts ASC
Updated indexing policy:
{  
        "automatic":true,
        "indexingMode":"Consistent",
        "includedPaths":[  
            {  
                "path":"/*"
            }
        ],
        "excludedPaths":[],
        "compositeIndexes":[  
            [  
                {  
                    "path":"/foodGroup",
                    "order":"ascending"
        },
                {  
                    "path":"/_ts",
                    "order":"ascending"
                }
            ]
        ]
    }
{  
        "automatic":true,
        "indexingMode":"Consistent",
        "includedPaths":[  
            {  
                "path":"/*"
            }
        ],
        "excludedPaths":[],
        "compositeIndexes":[  
            [  
                {  
                    "path":"/foodGroup",
                    "order":"ascending"
        },
                {  
                    "path":"/_ts",
                    "order":"ascending"
                }
            ]
        ]
    }
RU charge:8.86 RUs
Optimize JOIN expressions by using a subquery
Multi-value subqueries can optimizeJOINexpressions by pushing predicates after each select-many expression rather than after all cross joins in theWHEREclause.
JOIN
WHERE
Consider this query:
SELECT Count(1) AS Count
FROM c
JOIN t IN c.tags
JOIN n IN c.nutrients
JOIN s IN c.servings
WHERE t.name = 'infant formula' AND (n.nutritionValue > 0
AND n.nutritionValue < 10) AND s.amount > 1
SELECT Count(1) AS Count
FROM c
JOIN t IN c.tags
JOIN n IN c.nutrients
JOIN s IN c.servings
WHERE t.name = 'infant formula' AND (n.nutritionValue > 0
AND n.nutritionValue < 10) AND s.amount > 1
RU charge:167.62 RUs
For this query, the index matches any document that has a tag with the nameinfant formula,nutritionValuegreater than 0, andamountgreater than 1. TheJOINexpression here performs the cross-product of all items of tags, nutrients, and servings arrays for each matching document before any filter is applied. TheWHEREclause will then apply the filter predicate on each<c, t, n, s>tuple.
infant formula
nutritionValue
amount
JOIN
WHERE
<c, t, n, s>
For example, if a matching document has 10 items in each of the three arrays, it expands to 1 x 10 x 10 x 10 (that is, 1,000) tuples. The use of subqueries here can help to filter out joined array items before joining with the next expression.
This query is equivalent to the preceding one but uses subqueries:
SELECT Count(1) AS Count
FROM c
JOIN (SELECT VALUE t FROM t IN c.tags WHERE t.name = 'infant formula')
JOIN (SELECT VALUE n FROM n IN c.nutrients WHERE n.nutritionValue > 0 AND n.nutritionValue < 10)
JOIN (SELECT VALUE s FROM s IN c.servings WHERE s.amount > 1)
SELECT Count(1) AS Count
FROM c
JOIN (SELECT VALUE t FROM t IN c.tags WHERE t.name = 'infant formula')
JOIN (SELECT VALUE n FROM n IN c.nutrients WHERE n.nutritionValue > 0 AND n.nutritionValue < 10)
JOIN (SELECT VALUE s FROM s IN c.servings WHERE s.amount > 1)
RU charge:22.17 RUs
Assume that only one item in the tags array matches the filter and that there are five items for both the nutrients and servings arrays. TheJOINexpressions expands to 1 x 1 x 5 x 5 = 25 items, as opposed to 1,000 items in the first query.
JOIN
Queries where Retrieved Document Count is equal to Output Document Count
If theRetrieved Document Countis approximately equal to theOutput Document Count, the query engine didn't have to scan many unnecessary documents. For many queries, like those that use theTOPkeyword,Retrieved Document Countmight exceedOutput Document Countby 1. You don't need to be concerned about this.
TOP
Minimize cross partition queries
Azure Cosmos DB usespartitioningto scale individual containers as Request Unit and data storage needs increase. Each physical partition has a separate and independent index. If your query has an equality filter that matches your container's partition key, you need to check only the relevant partition's index. This optimization reduces the total number of RUs that the query requires.
If you have a large number of provisioned RUs (more than 30,000) or a large amount of data stored (more than approximately 100 GB), you probably have a large enough container to see a significant reduction in query RU charges.
For example, if you create a container with the partition key foodGroup, the following queries need to check only a single physical partition:
SELECT *
FROM c
WHERE c.foodGroup = "Soups, Sauces, and Gravies" and c.description = "Mushroom, oyster, raw"
SELECT *
FROM c
WHERE c.foodGroup = "Soups, Sauces, and Gravies" and c.description = "Mushroom, oyster, raw"
Queries that have anINfilter with the partition key only check one or more relevant physical partitions and will not "fan-out":
IN
SELECT *
FROM c
WHERE c.foodGroup IN("Soups, Sauces, and Gravies", "Vegetables and Vegetable Products") and c.description = "Mushroom, oyster, raw"
SELECT *
FROM c
WHERE c.foodGroup IN("Soups, Sauces, and Gravies", "Vegetables and Vegetable Products") and c.description = "Mushroom, oyster, raw"
Queries that have range filters on the partition key, or that don't have any filters on the partition key, will need to "fan-out" and check every physical partition's index for results:
SELECT *
FROM c
WHERE c.description = "Mushroom, oyster, raw"
SELECT *
FROM c
WHERE c.description = "Mushroom, oyster, raw"
SELECT *
FROM c
WHERE c.foodGroup > "Soups, Sauces, and Gravies" and c.description = "Mushroom, oyster, raw"
SELECT *
FROM c
WHERE c.foodGroup > "Soups, Sauces, and Gravies" and c.description = "Mushroom, oyster, raw"
Optimize queries that have filters on multiple properties
Although queries that have filters on multiple properties will normally use a range index, they are more efficient if they can be served from a composite index. For small amounts of data, this optimization won't have a significant impact. It could be useful, however, for large amounts of data. You can only optimize, at most, one non-equality filter per composite index. If your query has multiple non-equality filters, pick one of them that will use the composite index. The rest continues to use range indexes. The non-equality filter must be defined last in the composite index.Learn more about composite indexes.
Here are some examples of queries that could be optimized with a composite index:
SELECT *
FROM c
WHERE c.foodGroup = "Vegetables and Vegetable Products" AND c._ts = 1575503264
SELECT *
FROM c
WHERE c.foodGroup = "Vegetables and Vegetable Products" AND c._ts = 1575503264
SELECT *
FROM c
WHERE c.foodGroup = "Vegetables and Vegetable Products" AND c._ts > 1575503264
SELECT *
FROM c
WHERE c.foodGroup = "Vegetables and Vegetable Products" AND c._ts > 1575503264
Here's the relevant composite index:
{  
        "automatic":true,
        "indexingMode":"Consistent",
        "includedPaths":[  
            {  
                "path":"/*"
            }
        ],
        "excludedPaths":[],
        "compositeIndexes":[  
            [  
                {  
                    "path":"/foodGroup",
                    "order":"ascending"
                },
                {  
                    "path":"/_ts",
                    "order":"ascending"
                }
            ]
        ]
}
{  
        "automatic":true,
        "indexingMode":"Consistent",
        "includedPaths":[  
            {  
                "path":"/*"
            }
        ],
        "excludedPaths":[],
        "compositeIndexes":[  
            [  
                {  
                    "path":"/foodGroup",
                    "order":"ascending"
                },
                {  
                    "path":"/_ts",
                    "order":"ascending"
                }
            ]
        ]
}
Optimizations that reduce query latency
In many cases, the RU charge might be acceptable when query latency is still too high. The following sections give an overview of tips for reducing query latency. If you run the same query multiple times on the same dataset, it will typically have the same RU charge each time. But query latency might vary between query executions.
Improve proximity
Queries that are run from a different region than the Azure Cosmos DB account has higher latency than if they were run inside the same region. For example, if you're running code on your desktop computer, you should expect latency to be tens or hundreds of milliseconds higher (or more) than if the query came from a virtual machine within the same Azure region as Azure Cosmos DB. It's simple toglobally distribute data in Azure Cosmos DBto ensure you can bring your data closer to your app.
Increase provisioned throughput
In Azure Cosmos DB, your provisioned throughput is measured in Request Units (RUs). Imagine you have a query that consumes 5 RUs of throughput. For example, if you provision 1,000 RUs, you would be able to run that query 200 times per second. If you tried to run the query when there wasn't enough throughput available, Azure Cosmos DB would return an HTTP 429 error. Any of the current API for NoSQL SDKs will automatically retry this query after waiting for a short time. Throttled requests take longer, so increasing provisioned throughput can improve query latency. You can observe thetotal number of throttled requestson theMetricsblade of the Azure portal.
Increase MaxConcurrency
Parallel queries work by querying multiple partitions in parallel. But data from an individual partitioned collection is fetched serially with respect to the query. So, if you set MaxConcurrency to the number of partitions, you have the best chance of achieving the most performant query, provided all other system conditions remain the same. If you don't know the number of partitions, you can set MaxConcurrency (or MaxDegreesOfParallelism in older SDK versions) to a high number. The system chooses the minimum (number of partitions, user provided input) as the maximum degree of parallelism.
Increase MaxBufferedItemCount
Queries are designed to pre-fetch results while the current batch of results is being processed by the client. Pre-fetching helps to improve the overall latency of a query. Setting MaxBufferedItemCount limits the number of pre-fetched results. If you set this value to the expected number of results returned (or a higher number), the query can get the most benefit from pre-fetching. If you set this value to -1, the system will automatically determine the number of items to buffer.
Next steps
See the following articles for information on how to measure RUs per query, get execution statistics to tune your queries, and more:
Get SQL query execution metrics by using .NET SDK
Tuning query performance with Azure Cosmos DB
Performance tips for .NET SDK
Performance tips for Java v4 SDK
Feedback
Was this page helpful?
Additional resources