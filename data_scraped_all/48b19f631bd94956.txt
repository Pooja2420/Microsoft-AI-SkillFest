Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Duplicate detection
Article
2025-04-10
11 contributors
In this article
If an application fails due to a fatal error immediately after sending a message, and the restarted application instance erroneously believes that the prior message delivery didn't occur, a subsequent send causes the same message to appear in the system twice.
It's also possible for an error at the client or network level to occur a moment earlier, and for a sent message to be committed into the queue, with the acknowledgment not successfully returned to the client. This scenario leaves the client in doubt about the outcome of the send operation.
Duplicate detection takes the doubt out of these situations by enabling the sender resend the same message, and the queue or topic discards any duplicate copies.
Note
The basic tier of Service Bus doesn't support duplicate detection. The standard and premium tiers support duplicate detection. For differences between these tiers, seeService Bus pricing.
How it works
Enabling duplicate detection helps keep track of the application-controlledMessageIdof all messages sent into a queue or topic during a specified time window. If any new message is sent withMessageIdthat was logged during the time window, the message is reported as accepted (the send operation succeeds), but the newly sent message is instantly ignored and dropped. No other parts of the message other than theMessageIdare considered.
MessageId
MessageId
MessageId
Application control of the identifier is essential, because only that allows the application to tie theMessageIdto a business process context from which it can be predictably reconstructed when a failure occurs.
MessageId
For a business process in which multiple messages are sent in the course of handling some application context, theMessageIdcan be a composite of the application-level context identifier, such as a purchase order number, and the subject of the message, for example,12345.2017/payment.
MessageId
TheMessageIdcan always be some GUID, but anchoring the identifier to the business process yields predictable repeatability, which is desired for using the duplicate detection feature effectively.
MessageId
Important
Whenpartitioningisenabled,MessageId+PartitionKeyis used to determine uniqueness. When sessions are enabled, partition key and session ID must be the same.
MessageId+PartitionKey
Whenpartitioningisdisabled(default), onlyMessageIdis used to determine uniqueness.
MessageId
For information aboutSessionId,PartitionKey, andMessageId, seeUse of partition keys.
SessionId
PartitionKey
MessageId
When usingpartitioningand sendingbatchesof messages, you should ensure that they do not contain any partition identifying properties. Since deduplication relies on explicitly setting message IDs to determine uniqueness, it is not recommended to use deduplication and batching together with partitioning.
Note
Scheduled messages are included in duplicate detection. Therefore, if you send a scheduled message and then send a duplicate non-scheduled message, the non-scheduled message gets dropped. Similarly, if you send a non-scheduled message and then a duplicate scheduled message, the scheduled message is dropped.
Duplicate detection window size
Apart from enabling duplicate detection, you can also configure the size of the duplicate detection history time window during which message IDs are retained. This value defaults to 1 minute for queues and topics, with a minimum value of 20 seconds and a maximum value of 7 days.
Enabling duplicate detection and the size of the window directly impact the queue (and topic) throughput, since all recorded message IDs must be matched against the newly submitted message identifier.
Keeping the window small means that fewer message IDs must be retained and matched, and throughput is impacted less. For high throughput entities that require duplicate detection, you should keep the window as small as possible.
Next steps
You can enable duplicate message detection using Azure portal, PowerShell, CLI, Resource Manager template, .NET, Java, Python, and JavaScript. For more information, seeEnable duplicate message detection.
In scenarios where client code is unable to resubmit a message with the sameMessageIdas before, it's important to design messages that can be safely reprocessed. Thisblog post about idempotencedescribes various techniques for how to do that.
Try the samples in the language of your choice to explore Azure Service Bus features.
Azure Service Bus client library samples for .NET (latest)
Azure Service Bus client library samples for Java (latest)
Azure Service Bus client library samples for Python
Azure Service Bus client library samples for JavaScript
Azure Service Bus client library samples for TypeScript
See samples for the older .NET and Java client libraries here:
Azure Service Bus client library samples for .NET (legacy)
Azure Service Bus client library samples for Java (legacy)
On 30 September 2026, we'll retire the Azure Service Bus SDK libraries WindowsAzure.ServiceBus, Microsoft.Azure.ServiceBus, and com.microsoft.azure.servicebus, which don't conform to Azure SDK guidelines. We'll also end support of the SBMP protocol, so you'll no longer be able to use this protocol after 30 September 2026. Migrate to the latest Azure SDK libraries, which offer critical security updates and improved capabilities, before that date.
Although the older libraries can still be used beyond 30 September 2026, they'll no longer receive official support and updates from Microsoft. For more information, see thesupport retirement announcement.
Feedback
Was this page helpful?
Additional resources