Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Usage metering, billing, and pricing for Azure Logic Apps
Article
2024-09-08
17 contributors
In this article
Applies to:Azure Logic Apps (Consumption + Standard)
Azure Logic Appshelps you create and run automated integration workflows that can scale in the cloud. This article describes how metering, billing, and pricing models work for Azure Logic Apps and related resources. For information such as specific pricing rates, cost planning, or different hosting environments, review the following content:
Pricing rates for Azure Logic Apps
Plan and manage costs for Azure Logic Apps
Single-tenant versus multitenant

Consumption (multitenant)
In multitenant Azure Logic Apps, a logic app and its workflow follow theConsumptionplanfor pricing and billing. You create such logic apps in various ways, for example, when you choose theLogic App (Consumption)resource type, use theAzure Logic Apps (Consumption)extension in Visual Studio Code, or when you createautomation tasks.
The following table summarizes how the Consumption model handles metering and billing for the following components when used with a logic app and a workflow in multitenant Azure Logic Apps:

Trigger and action operations in the Consumption model
Except for the initial number of free built-in operation executions, per Azure subscription, that a workflow can run, the Consumption model meters and bills an operation based oneach execution, whether or not the overall workflow successfully runs, finishes, or is even instantiated. An operation usually makes a single executionunless the operation has retry attempts enabled. In turn, an execution usually makes a single callunless the operation supports and enables chunking or pagination to get large amounts of data. If chunking or pagination is enabled, an operation execution might have to make multiple calls.
The Consumption model meters and bills an operationper execution, not per call. For example, suppose a workflow starts with a polling trigger that gets records by regularly making outbound calls to an endpoint. The outbound call is metered and billed as a single execution, whether or not the trigger fires or is skipped, such as when a trigger checks an endpoint but doesn't find any data or events. The trigger state controls whether or not the workflow instance is created and run. Now, suppose the operation also supports and has enabled chunking or pagination. If the operation has to make 10 calls to finish getting all the data, the operation is still metered and billed as asingle execution, despite making multiple calls.
Note
By default, triggers that return an array have aSplit Onsetting that's already enabled.
This setting results in a trigger event, which you can review in the trigger history, and a
workflow instancefor eacharray item. All the workflow instances run in parallel so that
the array items are processed at the same time. Billing applies to all trigger events whether
the trigger state isSucceededorSkipped. Triggers are still billable even in scenarios
where the triggers don't instantiate and start the workflow, but the trigger state isSucceeded,Failed, orSkipped.
The following table summarizes how the Consumption model handles metering and billing for these operation types when used with a logic app and workflow in multitenant Azure Logic Apps:
For example, the HTTP trigger and Request trigger are built-in triggers. The HTTP action and Response action are built-in actions. Other built-in operations include workflow control actions such as loops and conditions, data operations, batch operations, and others.

Note: Some managed connector operations arealsoavailable as built-in operations, which are included in the initial free operations. Above the initially free operations, billing follows theActionspricing, not theStandardorEnterpriseconnector pricing.

Note: Preview Enterprise connector operation executions follow theConsumptionStandardconnector pricing.
For more information about how the Consumption model works with operations that run inside other operations such as loops, process multiple items such as arrays, and retry policies, reviewOther operation behavior.

Cost estimation tips for the Consumption model
To help you estimate more accurate consumption costs, review these tips:
Consider the possible number of messages or events that might arrive on any given day, rather than base your calculations on only the polling interval.
Consider the possible number of messages or events that might arrive on any given day, rather than base your calculations on only the polling interval.
When an event or message meets the trigger criteria, many triggers immediately try to read any other waiting events or messages that meet the criteria. This behavior means that even when you select a longer polling interval, the trigger fires based on the number of waiting events or messages that qualify for starting workflows. Triggers that follow this behavior include Azure Service Bus and Azure Event Hubs.For example, suppose you set up trigger that checks an endpoint every day. When the trigger checks the endpoint and finds 15 events that meet the criteria, the trigger fires and runs the corresponding workflow 15 times. The Logic Apps service meters all the actions that those 15 workflows perform, including the trigger requests.
When an event or message meets the trigger criteria, many triggers immediately try to read any other waiting events or messages that meet the criteria. This behavior means that even when you select a longer polling interval, the trigger fires based on the number of waiting events or messages that qualify for starting workflows. Triggers that follow this behavior include Azure Service Bus and Azure Event Hubs.
For example, suppose you set up trigger that checks an endpoint every day. When the trigger checks the endpoint and finds 15 events that meet the criteria, the trigger fires and runs the corresponding workflow 15 times. The Logic Apps service meters all the actions that those 15 workflows perform, including the trigger requests.

Standard (single-tenant)
In single-tenant Azure Logic Apps, a logic app and its workflows follow theStandardplanfor pricing and billing. You create such logic apps in various ways, for example, when you choose theLogic App (Standard)resource type or use theAzure Logic Apps (Standard)extension in Visual Studio Code. This pricing model requires that logic apps use a hosting plan and a pricing tier, which differs from the Consumption plan in that you're billed for reserved capacity and dedicated resources whether or not you use them.
When you create or deploy logic apps with theLogic App (Standard)resource type, and you select any Azure region for deployment, you'll also select a Workflow Standard hosting plan. However, if you select an existingApp Service Environment v3resource for your deployment location, you must then select anApp Service Plan.
Important
TheHybridhosting option is currently in preview. For information, seeSet up your own infrastructure for Standard logic apps using hybrid deployment.
The following plans and resources are no longer available or supported with the public release of Standard
logic app workflows in single-tenant Azure Logic Apps: Functions Premium plan, App Service Environment v1,
and App Service Environment v2. The App Service Plan is available and supported only with App Service Environment v3 (ASE v3).
The following table summarizes how the Standard model handles metering and billing for the following components when used with a logic app and a workflow in single-tenant Azure Logic Apps:
If your workflow uses any managed connector operations, metering applies toeach call, while billing follows thesameStandardorEnterpriseconnector pricing as the Consumption plan. For more information, reviewTrigger and action operations in the Standard model.

Pricing tiers in the Standard model
The pricing tier that you choose for metering and billing for yourLogic App (Standard)resource includes specific amounts of compute in virtual CPU (vCPU) and memory resources. If you select an App Service Environment v3 as the deployment location and an App Service Plan, specifically an Isolated V2 Service Plan pricing tier, you're charged for the instances used by the App Service Plan and for running your logic app workflows. No other charges apply. For more information, seeApp Service Plan - Isolated V2 Service Plan pricing tiers.
If you select aWorkflow Standardhosting plan, you can choose from the following tiers:
Important
The following example is for illustration only and provides sample estimates to generally show how a pricing tier works.
For specific vCPU and memory pricing based on specific regions where Azure Logic Apps is available, review theStandard plan for a selected region on the Azure Logic Apps pricing page.
Suppose that in an example region, the following resources have these hourly rates:
The following calculation provides an estimated monthly rate:
<monthly-rate> = 730 hours (per month) * [(<number-vCPU> * <hourly-rate-vCPU>) + (<number-GB-memory> * <hourly-rate-GB-memory>)]
Based on the preceding information, the following table shows the estimated monthly rates for each pricing tier and the resources in that pricing tier:

Trigger and action operations in the Standard model
Except for the unlimited free built-in operations that a workflow can run, the Standard model meters and bills an operation based oneach call, whether or not the overall workflow successfully runs, finishes, or is even instantiated. An operation usually makes a single executionunless the operation has retry attempts enabled. In turn, an execution usually makes a single callunless the operation supports and enables chunking or pagination to get large amounts of data. If chunking or pagination is enabled, an operation execution might have to make multiple calls. The Standard model meters and bills an operationper call, not per execution.
For example, suppose a workflow starts with a polling trigger that gets records by regularly making outbound calls to an endpoint. The outbound call is metered and billed, whether or not the trigger fires or is skipped. The trigger state controls whether or not the workflow instance is created and run. Now, suppose the operation also supports and has enabled chunking or pagination. If the operation has to make 10 calls to finish getting all the data, the operation is metered and billedper call.
The following table summarizes how the Standard model handles metering and billing for operation types when used with a logic app and workflow in single-tenant Azure Logic Apps:
For example, the HTTP trigger and Request trigger are built-in triggers. The HTTP action and Response action are built-in actions. Other built-in operations include workflow control actions such as loops and conditions, data operations, batch operations, and others.

Note: Some managed connector operations arealsoavailable as built-in operations. While built-in operations are free, the Standard model still meters and bills managed connector operations using thesameStandardorEnterpriseconnector pricing as the Consumption model.
For more information about how the Standard model works with operations that run inside other operations such as loops, process multiple items such as arrays, and retry policies, reviewOther operation behavior.

Other operation behavior
The following table summarizes how the Consumption and Standard models handle operations that run inside other operations such as loops, process multiple items such as arrays, and retry policies:

For example, suppose you have aFor eachloop with actions that process a list. The service multiplies the number of list items against the number of actions in the loop, and adds the action that starts the loop. So, the calculation for a 10-item list is (10 * 1) + 1, which results in 11 action executions.

Pricing is based on whether the operation types are built in, Standard, or Enterprise.

Pricing is based on whether the operation types are built in, Standard, or Enterprise.

Storage operations
Azure Logic Apps usesAzure Storagefor any required storage transactions, such as using queues for scheduling trigger operations or using tables and blobs for storing workflow states. Based on the operations in your workflow, storage costs vary because different triggers, actions, and payloads result in different storage operations and needs. The service also saves and stores inputs and outputs from your workflow's run history, based on the logic app resource'srun history retention limit. You can manage this retention limit at the logic app resource level, not the workflow level.
The following table summarizes how the Consumption and Standard models handle metering and billing for storage operations:

Tip: To help you better understand the number of storage operations that a workflow might run and their cost, try using theLogic Apps Storage calculator. Select either a sample workflow or use an existing workflow definition. The first calculation estimates the number of storage operations in your workflow. You can then use these numbers to estimate possible costs using theAzure pricing calculator. For more information, reviewEstimate storage needs and costs for workflows in single-tenant Azure Logic Apps.
For more information, review the following documentation:
View metrics for executions and storage usage
Limits in Azure Logic Apps

On-premises data gateway
Theon-premises data gatewayis a separate Azure resource that you create so that your logic app workflows can access on-premises data by using specific gateway-supported connectors. The gateway resource itself doesn't incur charges, but operations that run through the gateway incur charges, based on the pricing and billing model used by your logic app.

Integration accounts
Anintegration accountis a separate Azure resource that you create as a container to define and store business-to-business (B2B) artifacts such as trading partners, agreements, schemas, maps, and so on. After you create this account and define these artifacts, link this account to your logic app so that you can use these artifacts and various B2B operations in workflows to explore, build, and test integration solutions that useEDIandXML processingcapabilities.
The following table summarizes how the Consumption and Standard models handle metering and billing for integration accounts:
For more information, review the following documentation:
Create and manage integration accounts
Integration account limits in Azure Logic Apps
Other items not metered or billed
Across all pricing models, the following items aren't metered or billed:
Actions that didn't run because the workflow stopped before completion
Disabled logic apps or workflows because they can't create new instances while they're inactive.
Next steps
Plan and manage costs for Azure Logic Apps
Feedback
Was this page helpful?
Additional resources