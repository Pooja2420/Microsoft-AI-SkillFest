Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Upstream endpoints
Article
2022-12-19
10 contributors
In this article
The upstream endpoints feature allows Azure SignalR Service to send messages and connection events to a set of endpoints in serverless mode. You can use upstream endpoints to invoke a hub method from clients in serverless mode to notify endpoints when client connections are connected or disconnected.
Note
Upstream endpoints can only be configured in serverless mode.
Upstream endpoint settings
An upstream endpoint's settings consist of a list of order-sensitive items:
A URL template, which specifies where messages send to.
A set of rules.
Authentication configurations.
When an event is fired, an item's rules are checked one by one in order. Messages will be sent to the first matching item's upstream endpoint URL.
URL template settings
You can parameterize the upstream endpoint URL to support various patterns. There are three predefined parameters:
connections: Connection lifetime events. It's fired when a client connection is connected or disconnected. It includes connected and disconnected events.
messages: Fired when clients invoke a hub method. It includes all other events, except events in theconnectionscategory.
These predefined parameters can be used in the URL pattern. Parameters will be replaced with a specified value when you're evaluating the upstream endpoint URL. For example:
http://host.com/{hub}/api/{category}/{event}
http://host.com/{hub}/api/{category}/{event}
When a client connection in the "chat" hub is connected, a message will be sent to this URL:
http://host.com/chat/api/connections/connected
http://host.com/chat/api/connections/connected
When a client in the "chat" hub invokes the hub methodbroadcast, a message will be sent to this URL:
broadcast
http://host.com/chat/api/messages/broadcast
http://host.com/chat/api/messages/broadcast
Key Vault secret reference in URL template settings
The upstream endpoint URL isn't encrypted. You can secure sensitive upstream endpoints using Key Vault and access them with a managed identity.
To enable managed identity in your SignalR service instance and grant it Key Vault access:
Add a system-assigned identity or user-assigned identity. SeeHow to add managed identity in Azure portal.
Add a system-assigned identity or user-assigned identity. SeeHow to add managed identity in Azure portal.
Grant secret read permission for the managed identity in the Access policies in the Key Vault. SeeAssign a Key Vault access policy using the Azure portal
Grant secret read permission for the managed identity in the Access policies in the Key Vault. SeeAssign a Key Vault access policy using the Azure portal
Replace your sensitive text with the below syntax in the upstream endpoint URL Pattern:{@Microsoft.KeyVault(SecretUri=<secret-identity>)}<secret-identity>is the full data-plane URI of a secret in Key Vault, optionally including a version, e.g.,https://myvault.vault.azure.net/secrets/mysecret/orhttps://myvault.vault.azure.net/secrets/mysecret/ec96f02080254f109c51a1f14cdb1931For example, a complete reference would look like the following:{@Microsoft.KeyVault(SecretUri=https://myvault.vault.azure.net/secrets/mysecret/)}An upstream endpoint URL to Azure Function would look like the following:https://contoso.azurewebsites.net/runtime/webhooks/signalr?code={@Microsoft.KeyVault(SecretUri=https://myvault.vault.azure.net/secrets/mysecret/)}
Replace your sensitive text with the below syntax in the upstream endpoint URL Pattern:
{@Microsoft.KeyVault(SecretUri=<secret-identity>)}
{@Microsoft.KeyVault(SecretUri=<secret-identity>)}
<secret-identity>is the full data-plane URI of a secret in Key Vault, optionally including a version, e.g.,https://myvault.vault.azure.net/secrets/mysecret/orhttps://myvault.vault.azure.net/secrets/mysecret/ec96f02080254f109c51a1f14cdb1931
<secret-identity>
For example, a complete reference would look like the following:
{@Microsoft.KeyVault(SecretUri=https://myvault.vault.azure.net/secrets/mysecret/)}
{@Microsoft.KeyVault(SecretUri=https://myvault.vault.azure.net/secrets/mysecret/)}
An upstream endpoint URL to Azure Function would look like the following:
https://contoso.azurewebsites.net/runtime/webhooks/signalr?code={@Microsoft.KeyVault(SecretUri=https://myvault.vault.azure.net/secrets/mysecret/)}
https://contoso.azurewebsites.net/runtime/webhooks/signalr?code={@Microsoft.KeyVault(SecretUri=https://myvault.vault.azure.net/secrets/mysecret/)}
Note
Every 30 minutes, or whenever the upstream endpoint settings or managed identity change, the service rereads the secret content. You can immediately trigger an update by changing the upstream endpoint settings.
Rule settings
You can sethub rules,category rules, andevent rulesseparately. The matching rule supports three formats:
Use an asterisk (*) to match any event.
Use a comma (,) to join multiple events. For example,connected, disconnectedmatches the connected and disconnected events.
connected, disconnected
Use the full event name to match the event. For example,connectedmatches the connected event.
connected
Note
If you're using Azure Functions withSignalR trigger, SignalR trigger will expose a single endpoint in the following format:<Function_App_URL>/runtime/webhooks/signalr?code=<API_KEY>.
You can just configureURL template settingsto this url and keepRule settingsdefault. SeeSignalR Service integrationfor details about how to find<Function_App_URL>and<API_KEY>.
<Function_App_URL>/runtime/webhooks/signalr?code=<API_KEY>
<Function_App_URL>
<API_KEY>
Authentication settings
You can configure authentication for each upstream endpoint setting separately. When you configure authentication, a token is set in theAuthenticationheader of the upstream message. Currently, Azure SignalR Service supports the following authentication types:
Authentication
None
None
ManagedIdentity
ManagedIdentity
When you selectManagedIdentity, you must first enable a managed identity in Azure SignalR Service and optionally, specify a resource. SeeManaged identities for Azure SignalR Servicefor details.
ManagedIdentity
Configure upstream endpoint settings via the Azure portal
Note
Integration with App Service Environment is currently not supported.
Go to Azure SignalR Service.
SelectSettings.
SwitchService ModetoServerless.
Add URLs underUpstream URL Pattern.
SelectHub Rulesto openUpstream Settings.
ChangeHub Rules,Event RulesandCategory Rulesby entering rule value in the corresponding field.
UnderUpstream Authenticationselect
Use Managed Identity. (Ensure that you've enabled managed identity)
Choose any options underAudience in the issued token. SeeManaged identities for Azure SignalR Servicefor details.
Configure upstream endpoint settings via Resource Manager template
To configure upstream endpoint settings by using anAzure Resource Manager template, set theupstreamproperty in thepropertiesproperty. The following snippet shows how to set theupstreamproperty for creating and updating upstream endpoint settings.
upstream
properties
upstream
{
  "properties": {
    "upstream": {
      "templates": [
        {
          "UrlTemplate": "http://host.com/{hub}/api/{category}/{event}",
          "EventPattern": "*",
          "HubPattern": "*",
          "CategoryPattern": "*",
          "Auth": {
            "Type": "ManagedIdentity",
            "ManagedIdentity": {
              "Resource": "<resource>"
            }
          }
        }
      ]
    }
  }
}
{
  "properties": {
    "upstream": {
      "templates": [
        {
          "UrlTemplate": "http://host.com/{hub}/api/{category}/{event}",
          "EventPattern": "*",
          "HubPattern": "*",
          "CategoryPattern": "*",
          "Auth": {
            "Type": "ManagedIdentity",
            "ManagedIdentity": {
              "Resource": "<resource>"
            }
          }
        }
      ]
    }
  }
}
Serverless protocols
Azure SignalR Service sends messages to endpoints that follow the following protocols. You can useSignalR Service trigger bindingwith Function App, which handles these protocols for you.
Method
POST
Request header
ManagedIdentity
Request body
Content-Type:application/json
application/json
Content-Type:application/json
application/json
Content-Type:application/jsonorapplication/x-msgpack
application/json
application/x-msgpack
Target
Signature
The service will calculate SHA256 code for theX-ASRS-Connection-Idvalue by using both the primary access key and the secondary access key as theHMACkey. The service will set it in theX-ASRS-Signatureheader when making HTTP requests to an upstream endpoint:
X-ASRS-Connection-Id
HMAC
X-ASRS-Signature
Hex_encoded(HMAC_SHA256(accessKey, connection-id))
Hex_encoded(HMAC_SHA256(accessKey, connection-id))
Next steps
Managed identities for Azure SignalR Service
Azure Functions development and configuration with Azure SignalR Service
Handle messages from SignalR Service (Trigger binding)
SignalR Service Trigger binding sample
Feedback
Was this page helpful?
Additional resources