Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Set scaling rules in Azure Container Apps
Article
2025-04-17
19 contributors
In this article
Azure Container Apps manages automatic horizontal scaling through a set of declarative scaling rules. As a container app revision scales out, new instances of the revision are created on-demand. These instances are known as replicas.
To support this scaling behavior, Azure Container Apps is powered by KEDA (Kubernetes Event-driven Autoscaling). KEDA supports scaling against a variety of metrics like HTTP requests, queue messages, CPU and memory load, and event sources like Azure Service Bus, Azure Event Hubs, Apache Kafka, and Redis. For more information, seeScalers in the KEDA documentation.
Adding or editing scaling rules creates a new revision of your container app. A revision is an immutable snapshot of your container app. To learn which types of changes trigger a new revision, see revisionchange types.
Event-driven Container Apps jobsuse scaling rules to trigger executions based on events.
Scale definition
Scaling is the combination of limits, rules, and behavior.
Limitsdefine the minimum and maximum possible number of replicas per revision as your container app scales.Scale limitDefault valueMin valueMax valueMinimum number of replicas per revision00Maximum replicas configurable are 1,000.Maximum number of replicas per revision101Maximum replicas configurable are 1,000.
Limitsdefine the minimum and maximum possible number of replicas per revision as your container app scales.
Rulesare the criteria used by Container Apps to decide when to add or remove replicas.Scale rulesare implemented as HTTP, TCP (Transmission Control Protocol), or custom.
Rulesare the criteria used by Container Apps to decide when to add or remove replicas.
Scale rulesare implemented as HTTP, TCP (Transmission Control Protocol), or custom.
Behavioris the combination of rules and limits to determine scale decisions over time.Scale behaviorexplains how scale decisions are made.
Behavioris the combination of rules and limits to determine scale decisions over time.
Scale behaviorexplains how scale decisions are made.
As you define your scaling rules, it's important to consider the following items:
You aren't billed usage charges if your container app scales to zero.
Replicas that aren't processing, but remain in memory might be billed at a lower "idle" rate. For more information, seeBilling.
If you want to ensure that an instance of your revision is always running, set the minimum number of replicas to 1 or higher.
Scale rules
Three categories of triggers determine how scaling occurs:
HTTP: Based on the number of concurrent HTTP requests to your revision.
TCP: Based on the number of concurrent TCP connections to your revision.
Custom: Based on custom metrics like:CPUMemorySupported event-driven data sources:Azure Service BusAzure Event HubsApache KafkaRedis
CPU
Memory
Supported event-driven data sources:Azure Service BusAzure Event HubsApache KafkaRedis
Azure Service Bus
Azure Event Hubs
Apache Kafka
Redis
If you define more than one scale rule, the container app begins to scale once the first condition of any rules is met.
HTTP
With an HTTP scaling rule, you have control over the threshold of concurrent HTTP requests that determines how your container app revision scales. Every 15 seconds, the number of concurrent requests is calculated as the number of requests in the past 15 seconds divided by 15.Container Apps jobsdon't support HTTP scaling rules.
In the following example, the revision scales out up to five replicas and can scale in to zero. The scaling property is set to 100 concurrent requests per second.
Example
Thehttpsection defines an HTTP scale rule.
http
concurrentRequests
maxReplicas
{
  ...
  "resources": {
    ...
    "properties": {
      ...
      "template": {
        ...
        "scale": {
          "minReplicas": 0,
          "maxReplicas": 5,
          "rules": [{
            "name": "http-rule",
            "http": {
              "metadata": {
                "concurrentRequests": "100"
              }
            }
          }]
        }
      }
    }
  }
}
{
  ...
  "resources": {
    ...
    "properties": {
      ...
      "template": {
        ...
        "scale": {
          "minReplicas": 0,
          "maxReplicas": 5,
          "rules": [{
            "name": "http-rule",
            "http": {
              "metadata": {
                "concurrentRequests": "100"
              }
            }
          }]
        }
      }
    }
  }
}
Note
Set theproperties.configuration.activeRevisionsModeproperty of the container app tosingle, when using non-HTTP event scale rules.
properties.configuration.activeRevisionsMode
single
Define an HTTP scale rule using the--scale-rule-http-concurrencyparameter in thecreateorupdatecommands.
--scale-rule-http-concurrency
create
update
--scale-rule-http-concurrency
max-replicas
az containerapp create \
  --name <CONTAINER_APP_NAME> \
  --resource-group <RESOURCE_GROUP> \
  --environment <ENVIRONMENT_NAME> \
  --image <CONTAINER_IMAGE_LOCATION>
  --min-replicas 0 \
  --max-replicas 5 \
  --scale-rule-name azure-http-rule \
  --scale-rule-type http \
  --scale-rule-http-concurrency 100
az containerapp create \
  --name <CONTAINER_APP_NAME> \
  --resource-group <RESOURCE_GROUP> \
  --environment <ENVIRONMENT_NAME> \
  --image <CONTAINER_IMAGE_LOCATION>
  --min-replicas 0 \
  --max-replicas 5 \
  --scale-rule-name azure-http-rule \
  --scale-rule-type http \
  --scale-rule-http-concurrency 100
Go to your container app in the Azure portal
Go to your container app in the Azure portal
SelectScale.
SelectScale.
SelectEdit and deploy.
SelectEdit and deploy.
Select theScaletab.
Select theScaletab.
Select the minimum and maximum replica range.
Select the minimum and maximum replica range.

SelectAdd.
SelectAdd.
In theRule namebox, enter a rule name.
In theRule namebox, enter a rule name.
From theTypedropdown, selectHTTP Scaling.
From theTypedropdown, selectHTTP Scaling.
In theConcurrent requestsbox, enter your desired number of concurrent requests for your container app.
In theConcurrent requestsbox, enter your desired number of concurrent requests for your container app.
TCP
With a TCP scaling rule, you have control over the threshold of concurrent TCP connections that determines how your app scales. Every 15 seconds, the number of concurrent connections is calculated as the number of connections in the past 15 seconds divided by 15.Container Apps jobsdon't support TCP scaling rules.
In the following example, the container app revision scales out up to five replicas and can scale in to zero. The scaling threshold is set to 100 concurrent connections per second.
Example
Thetcpsection defines a TCP scale rule.
tcp
concurrentConnections
maxReplicas
{
  ...
  "resources": {
    ...
    "properties": {
      ...
      "template": {
        ...
        "scale": {
          "minReplicas": 0,
          "maxReplicas": 5,
          "rules": [{
            "name": "tcp-rule",
            "tcp": {
              "metadata": {
                "concurrentConnections": "100"
              }
            }
          }]
        }
      }
    }
  }
}
{
  ...
  "resources": {
    ...
    "properties": {
      ...
      "template": {
        ...
        "scale": {
          "minReplicas": 0,
          "maxReplicas": 5,
          "rules": [{
            "name": "tcp-rule",
            "tcp": {
              "metadata": {
                "concurrentConnections": "100"
              }
            }
          }]
        }
      }
    }
  }
}
Define a TCP scale rule using the--scale-rule-tcp-concurrencyparameter in thecreateorupdatecommands.
--scale-rule-tcp-concurrency
create
update
--scale-rule-tcp-concurrency
max-replicas
az containerapp create \
  --name <CONTAINER_APP_NAME> \
  --resource-group <RESOURCE_GROUP> \
  --environment <ENVIRONMENT_NAME> \
  --image <CONTAINER_IMAGE_LOCATION>
  --min-replicas 0 \
  --max-replicas 5 \
  --transport tcp \
  --ingress <external/internal> \
  --target-port <CONTAINER_TARGET_PORT> \
  --scale-rule-name azure-tcp-rule \
  --scale-rule-type tcp \
  --scale-rule-tcp-concurrency 100
az containerapp create \
  --name <CONTAINER_APP_NAME> \
  --resource-group <RESOURCE_GROUP> \
  --environment <ENVIRONMENT_NAME> \
  --image <CONTAINER_IMAGE_LOCATION>
  --min-replicas 0 \
  --max-replicas 5 \
  --transport tcp \
  --ingress <external/internal> \
  --target-port <CONTAINER_TARGET_PORT> \
  --scale-rule-name azure-tcp-rule \
  --scale-rule-type tcp \
  --scale-rule-tcp-concurrency 100
Not supported in the Azure portal. Use theAzure CLIorAzure Resource Managerto configure a TCP scale rule.
Custom
You can create a custom Container Apps scaling rule based on anyScaledObject-basedKEDA scalerwith these defaults:
Forevent-driven Container Apps jobs, you can create a custom scaling rule based on anyScaledJob-based KEDA scalers.
The following example demonstrates how to create a custom scale rule.
Example
This example shows how to convert anAzure Service Bus scalerto a Container Apps scale rule, but you use the same process for any otherScaledObject-basedKEDA scalerspecification.
For authentication, KEDA scaler authentication parameters takeContainer Apps secretsormanaged identity.
The following procedure shows you how to convert a KEDA scaler to a Container App scale rule. This snippet is an excerpt of an ARM template to show you where each section fits in context of the overall template.
{
  ...
  "resources": {
    ...
    "properties": {
      ...
      "configuration": {
        ...
        "secrets": [
          {
            "name": "<NAME>",
            "value": "<VALUE>"
          }
        ]
      },
      "template": {
        ...
        "scale": {
          "minReplicas": 0,
          "maxReplicas": 5,
          "rules": [
            {
              "name": "<RULE_NAME>",
              "custom": {
                "metadata": {
                  ...
                },
                "auth": [
                  {
                    "secretRef": "<NAME>",
                    "triggerParameter": "<PARAMETER>"
                  }
                ]
              }
            }
          ]
        }
      }
    }
  }
}
{
  ...
  "resources": {
    ...
    "properties": {
      ...
      "configuration": {
        ...
        "secrets": [
          {
            "name": "<NAME>",
            "value": "<VALUE>"
          }
        ]
      },
      "template": {
        ...
        "scale": {
          "minReplicas": 0,
          "maxReplicas": 5,
          "rules": [
            {
              "name": "<RULE_NAME>",
              "custom": {
                "metadata": {
                  ...
                },
                "auth": [
                  {
                    "secretRef": "<NAME>",
                    "triggerParameter": "<PARAMETER>"
                  }
                ]
              }
            }
          ]
        }
      }
    }
  }
}
Refer to this excerpt for context on how the below examples fit in the ARM template.
First, you define the type and metadata of the scale rule.
From the KEDA scaler specification, find thetypevalue.triggers:
- type: azure-servicebus
  metadata:
    queueName: my-queue
    namespace: service-bus-namespace
    messageCount: "5"
From the KEDA scaler specification, find thetypevalue.
type
triggers:
- type: azure-servicebus
  metadata:
    queueName: my-queue
    namespace: service-bus-namespace
    messageCount: "5"
triggers:
- type: azure-servicebus
  metadata:
    queueName: my-queue
    namespace: service-bus-namespace
    messageCount: "5"
In the ARM template, enter the scalertypevalue into thecustom.typeproperty of the scale rule....
"rules": [
  {
    "name": "azure-servicebus-queue-rule",
    "custom": {
      "type": "azure-servicebus",
      "metadata": {
        "queueName": "my-queue",
        "namespace": "service-bus-namespace",
        "messageCount": "5"
      }
    }
  }
]
...
In the ARM template, enter the scalertypevalue into thecustom.typeproperty of the scale rule.
type
custom.type
...
"rules": [
  {
    "name": "azure-servicebus-queue-rule",
    "custom": {
      "type": "azure-servicebus",
      "metadata": {
        "queueName": "my-queue",
        "namespace": "service-bus-namespace",
        "messageCount": "5"
      }
    }
  }
]
...
...
"rules": [
  {
    "name": "azure-servicebus-queue-rule",
    "custom": {
      "type": "azure-servicebus",
      "metadata": {
        "queueName": "my-queue",
        "namespace": "service-bus-namespace",
        "messageCount": "5"
      }
    }
  }
]
...
From the KEDA scaler specification, find themetadatavalues.triggers:
- type: azure-servicebus
  metadata:
    queueName: my-queue
    namespace: service-bus-namespace
    messageCount: "5"
From the KEDA scaler specification, find themetadatavalues.
metadata
triggers:
- type: azure-servicebus
  metadata:
    queueName: my-queue
    namespace: service-bus-namespace
    messageCount: "5"
triggers:
- type: azure-servicebus
  metadata:
    queueName: my-queue
    namespace: service-bus-namespace
    messageCount: "5"
In the ARM template, add all metadata values to thecustom.metadatasection of the scale rule....
"rules": [
  {
    "name": "azure-servicebus-queue-rule",
    "custom": {
      "type": "azure-servicebus",
      "metadata": {
        "queueName": "my-queue",
        "namespace": "service-bus-namespace",
        "messageCount": "5"
      }
    }
  }
]
...
In the ARM template, add all metadata values to thecustom.metadatasection of the scale rule.
custom.metadata
...
"rules": [
  {
    "name": "azure-servicebus-queue-rule",
    "custom": {
      "type": "azure-servicebus",
      "metadata": {
        "queueName": "my-queue",
        "namespace": "service-bus-namespace",
        "messageCount": "5"
      }
    }
  }
]
...
...
"rules": [
  {
    "name": "azure-servicebus-queue-rule",
    "custom": {
      "type": "azure-servicebus",
      "metadata": {
        "queueName": "my-queue",
        "namespace": "service-bus-namespace",
        "messageCount": "5"
      }
    }
  }
]
...
Authentication
Container Apps scale rules support secrets-based authentication. Scale rules for Azure resources, including Azure Queue Storage, Azure Service Bus, and Azure Event Hubs, also support managed identity. Where possible, use managed identity authentication to avoid storing secrets within the app.
To use secrets for authentication, you need to create a secret in the container app'ssecretsarray. The secret value is used in theautharray of the scale rule.
secrets
auth
KEDA scalers can use secrets in aTriggerAuthenticationthat is referenced by theauthenticationRefproperty. You can map the TriggerAuthentication object to the Container Apps scale rule.
authenticationRef
Find theTriggerAuthenticationobject referenced by the KEDAScaledObjectspecification.
Find theTriggerAuthenticationobject referenced by the KEDAScaledObjectspecification.
TriggerAuthentication
ScaledObject
In theTriggerAuthenticationobject, find eachsecretTargetRefand its associated secret.apiVersion: v1
kind: Secret
metadata:
  name: my-secrets
  namespace: my-project
type: Opaque
data:
  connection-string-secret: <SERVICE_BUS_CONNECTION_STRING>
---
apiVersion: keda.sh/v1alpha1
kind: TriggerAuthentication
metadata:
  name: azure-servicebus-auth
spec:
  secretTargetRef:
  - parameter: connection
    name: my-secrets
    key: connection-string-secret
---
apiVersion: keda.sh/v1alpha1
kind: ScaledObject
metadata:
  name: azure-servicebus-queue-rule
  namespace: default
spec:
  scaleTargetRef:
    name: my-scale-target
  triggers:
  - type: azure-servicebus
    metadata:
      queueName: my-queue
      namespace: service-bus-namespace
      messageCount: "5"
    authenticationRef:
        name: azure-servicebus-auth
In theTriggerAuthenticationobject, find eachsecretTargetRefand its associated secret.
TriggerAuthentication
secretTargetRef
apiVersion: v1
kind: Secret
metadata:
  name: my-secrets
  namespace: my-project
type: Opaque
data:
  connection-string-secret: <SERVICE_BUS_CONNECTION_STRING>
---
apiVersion: keda.sh/v1alpha1
kind: TriggerAuthentication
metadata:
  name: azure-servicebus-auth
spec:
  secretTargetRef:
  - parameter: connection
    name: my-secrets
    key: connection-string-secret
---
apiVersion: keda.sh/v1alpha1
kind: ScaledObject
metadata:
  name: azure-servicebus-queue-rule
  namespace: default
spec:
  scaleTargetRef:
    name: my-scale-target
  triggers:
  - type: azure-servicebus
    metadata:
      queueName: my-queue
      namespace: service-bus-namespace
      messageCount: "5"
    authenticationRef:
        name: azure-servicebus-auth
apiVersion: v1
kind: Secret
metadata:
  name: my-secrets
  namespace: my-project
type: Opaque
data:
  connection-string-secret: <SERVICE_BUS_CONNECTION_STRING>
---
apiVersion: keda.sh/v1alpha1
kind: TriggerAuthentication
metadata:
  name: azure-servicebus-auth
spec:
  secretTargetRef:
  - parameter: connection
    name: my-secrets
    key: connection-string-secret
---
apiVersion: keda.sh/v1alpha1
kind: ScaledObject
metadata:
  name: azure-servicebus-queue-rule
  namespace: default
spec:
  scaleTargetRef:
    name: my-scale-target
  triggers:
  - type: azure-servicebus
    metadata:
      queueName: my-queue
      namespace: service-bus-namespace
      messageCount: "5"
    authenticationRef:
        name: azure-servicebus-auth
In the ARM template, for each secret:Add asecretto the container app'ssecretsarray containing the secret name and value.Add an entry to theautharray of the scale rule.Set the value of thetriggerParameterproperty to the value of thesecretTargetRef'sparameterproperty.Set the value of thesecretRefproperty to the name of thesecretTargetRef'skeyproperty.{
  ...
  "resources": {
    ...
    "properties": {
      ...
      "configuration": {
        ...
        "secrets": [
          {
            "name": "connection-string-secret",
            "value": "<SERVICE_BUS_CONNECTION_STRING>"
          }
        ]
      },
      "template": {
        ...
        "scale": {
          "minReplicas": 0,
          "maxReplicas": 5,
          "rules": [
            {
              "name": "azure-servicebus-queue-rule",
              "custom": {
                "type": "azure-servicebus",
                "metadata": {
                  "queueName": "my-queue",
                  "namespace": "service-bus-namespace",
                  "messageCount": "5"
                },
                "auth": [
                  {
                    "secretRef": "connection-string-secret",
                    "triggerParameter": "connection"
                  }
                ]
              }
            }
          ]
        }
      }
    }
  }
}Some scalers support metadata with theFromEnvsuffix to reference a value in an environment variable. Container Apps looks at the first container listed in the ARM template for the environment variable.Refer to theconsiderations sectionfor more security related information.
In the ARM template, for each secret:
Add asecretto the container app'ssecretsarray containing the secret name and value.
Add asecretto the container app'ssecretsarray containing the secret name and value.
secrets
Add an entry to theautharray of the scale rule.Set the value of thetriggerParameterproperty to the value of thesecretTargetRef'sparameterproperty.Set the value of thesecretRefproperty to the name of thesecretTargetRef'skeyproperty.
Add an entry to theautharray of the scale rule.
auth
Set the value of thetriggerParameterproperty to the value of thesecretTargetRef'sparameterproperty.
Set the value of thetriggerParameterproperty to the value of thesecretTargetRef'sparameterproperty.
triggerParameter
secretTargetRef
parameter
Set the value of thesecretRefproperty to the name of thesecretTargetRef'skeyproperty.
Set the value of thesecretRefproperty to the name of thesecretTargetRef'skeyproperty.
secretRef
secretTargetRef
key
{
  ...
  "resources": {
    ...
    "properties": {
      ...
      "configuration": {
        ...
        "secrets": [
          {
            "name": "connection-string-secret",
            "value": "<SERVICE_BUS_CONNECTION_STRING>"
          }
        ]
      },
      "template": {
        ...
        "scale": {
          "minReplicas": 0,
          "maxReplicas": 5,
          "rules": [
            {
              "name": "azure-servicebus-queue-rule",
              "custom": {
                "type": "azure-servicebus",
                "metadata": {
                  "queueName": "my-queue",
                  "namespace": "service-bus-namespace",
                  "messageCount": "5"
                },
                "auth": [
                  {
                    "secretRef": "connection-string-secret",
                    "triggerParameter": "connection"
                  }
                ]
              }
            }
          ]
        }
      }
    }
  }
}
{
  ...
  "resources": {
    ...
    "properties": {
      ...
      "configuration": {
        ...
        "secrets": [
          {
            "name": "connection-string-secret",
            "value": "<SERVICE_BUS_CONNECTION_STRING>"
          }
        ]
      },
      "template": {
        ...
        "scale": {
          "minReplicas": 0,
          "maxReplicas": 5,
          "rules": [
            {
              "name": "azure-servicebus-queue-rule",
              "custom": {
                "type": "azure-servicebus",
                "metadata": {
                  "queueName": "my-queue",
                  "namespace": "service-bus-namespace",
                  "messageCount": "5"
                },
                "auth": [
                  {
                    "secretRef": "connection-string-secret",
                    "triggerParameter": "connection"
                  }
                ]
              }
            }
          ]
        }
      }
    }
  }
}
Some scalers support metadata with theFromEnvsuffix to reference a value in an environment variable. Container Apps looks at the first container listed in the ARM template for the environment variable.
FromEnv
Refer to theconsiderations sectionfor more security related information.
Container Apps scale rules can use managed identity to authenticate with Azure services. The following ARM template passes in system-based managed identity to authenticate for an Azure Queue scaler.
"scale": {
  "minReplicas": 0,
  "maxReplicas": 4,
  "rules": [
    {
      "name": "azure-queue",
      "custom": {
        "type": "azure-queue",
        "metadata": {
          "accountName": "apptest123",
          "queueName": "queue1",
          "queueLength": "1"
        },
        "identity": "system"
      }
    }
  ]
}
"scale": {
  "minReplicas": 0,
  "maxReplicas": 4,
  "rules": [
    {
      "name": "azure-queue",
      "custom": {
        "type": "azure-queue",
        "metadata": {
          "accountName": "apptest123",
          "queueName": "queue1",
          "queueLength": "1"
        },
        "identity": "system"
      }
    }
  ]
}
To learn more about using managed identity with scale rules, seeManaged identity.
From the KEDA scaler specification, find thetypevalue.triggers:
- type: azure-servicebus
  metadata:
    queueName: my-queue
    namespace: service-bus-namespace
    messageCount: "5"
From the KEDA scaler specification, find thetypevalue.
type
triggers:
- type: azure-servicebus
  metadata:
    queueName: my-queue
    namespace: service-bus-namespace
    messageCount: "5"
triggers:
- type: azure-servicebus
  metadata:
    queueName: my-queue
    namespace: service-bus-namespace
    messageCount: "5"
In the CLI command, set the--scale-rule-typeparameter to the specificationtypevalue.az containerapp create \
  --name <CONTAINER_APP_NAME> \
  --resource-group <RESOURCE_GROUP> \
  --environment <ENVIRONMENT_NAME> \
  --image <CONTAINER_IMAGE_LOCATION>
  --min-replicas 0 \
  --max-replicas 5 \
  --secrets "connection-string-secret=<SERVICE_BUS_CONNECTION_STRING>" \
  --scale-rule-name azure-servicebus-queue-rule \
  --scale-rule-type azure-servicebus \
  --scale-rule-metadata "queueName=my-queue" \
                        "namespace=service-bus-namespace" \
                        "messageCount=5" \
  --scale-rule-auth "connection=connection-string-secret"
In the CLI command, set the--scale-rule-typeparameter to the specificationtypevalue.
--scale-rule-type
type
az containerapp create \
  --name <CONTAINER_APP_NAME> \
  --resource-group <RESOURCE_GROUP> \
  --environment <ENVIRONMENT_NAME> \
  --image <CONTAINER_IMAGE_LOCATION>
  --min-replicas 0 \
  --max-replicas 5 \
  --secrets "connection-string-secret=<SERVICE_BUS_CONNECTION_STRING>" \
  --scale-rule-name azure-servicebus-queue-rule \
  --scale-rule-type azure-servicebus \
  --scale-rule-metadata "queueName=my-queue" \
                        "namespace=service-bus-namespace" \
                        "messageCount=5" \
  --scale-rule-auth "connection=connection-string-secret"
az containerapp create \
  --name <CONTAINER_APP_NAME> \
  --resource-group <RESOURCE_GROUP> \
  --environment <ENVIRONMENT_NAME> \
  --image <CONTAINER_IMAGE_LOCATION>
  --min-replicas 0 \
  --max-replicas 5 \
  --secrets "connection-string-secret=<SERVICE_BUS_CONNECTION_STRING>" \
  --scale-rule-name azure-servicebus-queue-rule \
  --scale-rule-type azure-servicebus \
  --scale-rule-metadata "queueName=my-queue" \
                        "namespace=service-bus-namespace" \
                        "messageCount=5" \
  --scale-rule-auth "connection=connection-string-secret"
From the KEDA scaler specification, find themetadatavalues.triggers:
- type: azure-servicebus
  metadata:
    queueName: my-queue
    namespace: service-bus-namespace
    messageCount: "5"
From the KEDA scaler specification, find themetadatavalues.
metadata
triggers:
- type: azure-servicebus
  metadata:
    queueName: my-queue
    namespace: service-bus-namespace
    messageCount: "5"
triggers:
- type: azure-servicebus
  metadata:
    queueName: my-queue
    namespace: service-bus-namespace
    messageCount: "5"
In the CLI command, set the--scale-rule-metadataparameter to the metadata values.You need to transform the values from a YAML format to a key/value pair for use on the command line. Separate each key/value pair with a space.az containerapp create \
  --name <CONTAINER_APP_NAME> \
  --resource-group <RESOURCE_GROUP> \
  --environment <ENVIRONMENT_NAME> \
  --image <CONTAINER_IMAGE_LOCATION>
  --min-replicas 0 \
  --max-replicas 5 \
  --secrets "connection-string-secret=<SERVICE_BUS_CONNECTION_STRING>" \
  --scale-rule-name azure-servicebus-queue-rule \
  --scale-rule-type azure-servicebus \
  --scale-rule-metadata "queueName=my-queue" \
                        "namespace=service-bus-namespace" \
                        "messageCount=5" \
  --scale-rule-auth "connection=connection-string-secret"
In the CLI command, set the--scale-rule-metadataparameter to the metadata values.
--scale-rule-metadata
You need to transform the values from a YAML format to a key/value pair for use on the command line. Separate each key/value pair with a space.
az containerapp create \
  --name <CONTAINER_APP_NAME> \
  --resource-group <RESOURCE_GROUP> \
  --environment <ENVIRONMENT_NAME> \
  --image <CONTAINER_IMAGE_LOCATION>
  --min-replicas 0 \
  --max-replicas 5 \
  --secrets "connection-string-secret=<SERVICE_BUS_CONNECTION_STRING>" \
  --scale-rule-name azure-servicebus-queue-rule \
  --scale-rule-type azure-servicebus \
  --scale-rule-metadata "queueName=my-queue" \
                        "namespace=service-bus-namespace" \
                        "messageCount=5" \
  --scale-rule-auth "connection=connection-string-secret"
az containerapp create \
  --name <CONTAINER_APP_NAME> \
  --resource-group <RESOURCE_GROUP> \
  --environment <ENVIRONMENT_NAME> \
  --image <CONTAINER_IMAGE_LOCATION>
  --min-replicas 0 \
  --max-replicas 5 \
  --secrets "connection-string-secret=<SERVICE_BUS_CONNECTION_STRING>" \
  --scale-rule-name azure-servicebus-queue-rule \
  --scale-rule-type azure-servicebus \
  --scale-rule-metadata "queueName=my-queue" \
                        "namespace=service-bus-namespace" \
                        "messageCount=5" \
  --scale-rule-auth "connection=connection-string-secret"
Authentication
Container Apps scale rules support secrets-based authentication. Scale rules for Azure resources, including Azure Queue Storage, Azure Service Bus, and Azure Event Hubs, also support managed identity. Where possible, use managed identity authentication to avoid storing secrets within the app.
To configure secrets-based authentication for a Container Apps scale rule, you configure the secrets in the container app and reference them in the scale rule.
A KEDA scaler supports secrets in aTriggerAuthenticationwhich theauthenticationRefproperty uses for reference. You can map theTriggerAuthenticationobject to the Container Apps scale rule.
authenticationRef
TriggerAuthentication
Find theTriggerAuthenticationobject referenced by the KEDAScaledObjectspecification. Identify eachsecretTargetRefof theTriggerAuthenticationobject.apiVersion: v1
kind: Secret
metadata:
  name: my-secrets
  namespace: my-project
type: Opaque
data:
  connection-string-secret: <SERVICE_BUS_CONNECTION_STRING>
---
apiVersion: keda.sh/v1alpha1
kind: TriggerAuthentication
metadata:
  name: azure-servicebus-auth
spec:
  secretTargetRef:
  - parameter: connection
    name: my-secrets
    key: connection-string-secret
---
apiVersion: keda.sh/v1alpha1
kind: ScaledObject
metadata:
  name: azure-servicebus-queue-rule
  namespace: default
spec:
  scaleTargetRef:
    name: my-scale-target
  triggers:
  - type: azure-servicebus
    metadata:
      queueName: my-queue
      namespace: service-bus-namespace
      messageCount: "5"
    authenticationRef:
        name: azure-servicebus-auth
Find theTriggerAuthenticationobject referenced by the KEDAScaledObjectspecification. Identify eachsecretTargetRefof theTriggerAuthenticationobject.
TriggerAuthentication
ScaledObject
secretTargetRef
TriggerAuthentication
apiVersion: v1
kind: Secret
metadata:
  name: my-secrets
  namespace: my-project
type: Opaque
data:
  connection-string-secret: <SERVICE_BUS_CONNECTION_STRING>
---
apiVersion: keda.sh/v1alpha1
kind: TriggerAuthentication
metadata:
  name: azure-servicebus-auth
spec:
  secretTargetRef:
  - parameter: connection
    name: my-secrets
    key: connection-string-secret
---
apiVersion: keda.sh/v1alpha1
kind: ScaledObject
metadata:
  name: azure-servicebus-queue-rule
  namespace: default
spec:
  scaleTargetRef:
    name: my-scale-target
  triggers:
  - type: azure-servicebus
    metadata:
      queueName: my-queue
      namespace: service-bus-namespace
      messageCount: "5"
    authenticationRef:
        name: azure-servicebus-auth
apiVersion: v1
kind: Secret
metadata:
  name: my-secrets
  namespace: my-project
type: Opaque
data:
  connection-string-secret: <SERVICE_BUS_CONNECTION_STRING>
---
apiVersion: keda.sh/v1alpha1
kind: TriggerAuthentication
metadata:
  name: azure-servicebus-auth
spec:
  secretTargetRef:
  - parameter: connection
    name: my-secrets
    key: connection-string-secret
---
apiVersion: keda.sh/v1alpha1
kind: ScaledObject
metadata:
  name: azure-servicebus-queue-rule
  namespace: default
spec:
  scaleTargetRef:
    name: my-scale-target
  triggers:
  - type: azure-servicebus
    metadata:
      queueName: my-queue
      namespace: service-bus-namespace
      messageCount: "5"
    authenticationRef:
        name: azure-servicebus-auth
In your container app, create thesecretsthat match thesecretTargetRefproperties.
In your container app, create thesecretsthat match thesecretTargetRefproperties.
secretTargetRef
In the CLI command, set parameters for eachsecretTargetRefentry.Create a secret entry with the--secretsparameter. If there are multiple secrets, separate them with a space.Create an authentication entry with the--scale-rule-authparameter. If there are multiple entries, separate them with a space.az containerapp create \
  --name <CONTAINER_APP_NAME> \
  --resource-group <RESOURCE_GROUP> \
  --environment <ENVIRONMENT_NAME> \
  --image <CONTAINER_IMAGE_LOCATION>
  --min-replicas 0 \
  --max-replicas 5 \
  --secrets "connection-string-secret=<SERVICE_BUS_CONNECTION_STRING>" \
  --scale-rule-name azure-servicebus-queue-rule \
  --scale-rule-type azure-servicebus \
  --scale-rule-metadata "queueName=my-queue" \
                        "namespace=service-bus-namespace" \
                        "messageCount=5" \
  --scale-rule-auth "connection=connection-string-secret"
In the CLI command, set parameters for eachsecretTargetRefentry.
secretTargetRef
Create a secret entry with the--secretsparameter. If there are multiple secrets, separate them with a space.
Create a secret entry with the--secretsparameter. If there are multiple secrets, separate them with a space.
--secrets
Create an authentication entry with the--scale-rule-authparameter. If there are multiple entries, separate them with a space.
Create an authentication entry with the--scale-rule-authparameter. If there are multiple entries, separate them with a space.
--scale-rule-auth
az containerapp create \
  --name <CONTAINER_APP_NAME> \
  --resource-group <RESOURCE_GROUP> \
  --environment <ENVIRONMENT_NAME> \
  --image <CONTAINER_IMAGE_LOCATION>
  --min-replicas 0 \
  --max-replicas 5 \
  --secrets "connection-string-secret=<SERVICE_BUS_CONNECTION_STRING>" \
  --scale-rule-name azure-servicebus-queue-rule \
  --scale-rule-type azure-servicebus \
  --scale-rule-metadata "queueName=my-queue" \
                        "namespace=service-bus-namespace" \
                        "messageCount=5" \
  --scale-rule-auth "connection=connection-string-secret"
az containerapp create \
  --name <CONTAINER_APP_NAME> \
  --resource-group <RESOURCE_GROUP> \
  --environment <ENVIRONMENT_NAME> \
  --image <CONTAINER_IMAGE_LOCATION>
  --min-replicas 0 \
  --max-replicas 5 \
  --secrets "connection-string-secret=<SERVICE_BUS_CONNECTION_STRING>" \
  --scale-rule-name azure-servicebus-queue-rule \
  --scale-rule-type azure-servicebus \
  --scale-rule-metadata "queueName=my-queue" \
                        "namespace=service-bus-namespace" \
                        "messageCount=5" \
  --scale-rule-auth "connection=connection-string-secret"
Container Apps scale rules can use managed identity to authenticate with Azure services. The following command creates a container app with a user-assigned managed identity and uses it to authenticate for an Azure Queue scaler.
az containerapp create \
  --resource-group <RESOURCE_GROUP> \
  --name <APP_NAME> \
  --environment <ENVIRONMENT_ID> \
  --user-assigned <USER_ASSIGNED_IDENTITY_ID> \
  --scale-rule-name azure-queue \
  --scale-rule-type azure-queue \
  --scale-rule-metadata "accountName=<AZURE_STORAGE_ACCOUNT_NAME>" "queueName=queue1" "queueLength=1" \
  --scale-rule-identity <USER_ASSIGNED_IDENTITY_ID>
az containerapp create \
  --resource-group <RESOURCE_GROUP> \
  --name <APP_NAME> \
  --environment <ENVIRONMENT_ID> \
  --user-assigned <USER_ASSIGNED_IDENTITY_ID> \
  --scale-rule-name azure-queue \
  --scale-rule-type azure-queue \
  --scale-rule-metadata "accountName=<AZURE_STORAGE_ACCOUNT_NAME>" "queueName=queue1" "queueLength=1" \
  --scale-rule-identity <USER_ASSIGNED_IDENTITY_ID>
Replace placeholders with your values.
Go to your container app in the Azure portal.
Go to your container app in the Azure portal.
SelectScale.
SelectScale.
SelectEdit and deploy.
SelectEdit and deploy.
Select theScale and replicastab.
Select theScale and replicastab.
Select the minimum and maximum replica range.
Select the minimum and maximum replica range.

SelectAdd.
SelectAdd.
In theRule namebox, enter a rule name.
In theRule namebox, enter a rule name.
From theTypedropdown, selectCustom.
From theTypedropdown, selectCustom.
From the KEDA scaler specification, find thetypevalue.triggers:
- type: azure-servicebus
  metadata:
    queueName: my-queue
    namespace: service-bus-namespace
    messageCount: "5"
From the KEDA scaler specification, find thetypevalue.
type
triggers:
- type: azure-servicebus
  metadata:
    queueName: my-queue
    namespace: service-bus-namespace
    messageCount: "5"
triggers:
- type: azure-servicebus
  metadata:
    queueName: my-queue
    namespace: service-bus-namespace
    messageCount: "5"
In theCustom rule typebox, enter the scalertypevalue.
In theCustom rule typebox, enter the scalertypevalue.
type
From the KEDA scaler specification, find themetadatavalues.triggers:
- type: azure-servicebus
  metadata:
    queueName: my-queue
    namespace: service-bus-namespace
    messageCount: "5"
From the KEDA scaler specification, find themetadatavalues.
metadata
triggers:
- type: azure-servicebus
  metadata:
    queueName: my-queue
    namespace: service-bus-namespace
    messageCount: "5"
triggers:
- type: azure-servicebus
  metadata:
    queueName: my-queue
    namespace: service-bus-namespace
    messageCount: "5"
In the portal, find theMetadatasection and selectAdd. Enter the name and value for each item in the KEDAScaledObjectspecification metadata section.
In the portal, find theMetadatasection and selectAdd. Enter the name and value for each item in the KEDAScaledObjectspecification metadata section.
ScaledObject
Authentication
Container Apps scale rules support secrets-based authentication. Scale rules for Azure resources, including Azure Queue Storage, Azure Service Bus, and Azure Event Hubs, also support managed identity. Where possible, use managed identity authentication to avoid storing secrets within the app.
In your container app, create thesecretsthat you want to reference.
In your container app, create thesecretsthat you want to reference.
Find theTriggerAuthenticationobject referenced by the KEDAScaledObjectspecification. Identify eachsecretTargetRefof theTriggerAuthenticationobject.apiVersion: v1
kind: Secret
metadata:
  name: my-secrets
  namespace: my-project
type: Opaque
data:
  connection-string-secret: <SERVICE_BUS_CONNECTION_STRING>
---
apiVersion: keda.sh/v1alpha1
kind: TriggerAuthentication
metadata:
  name: azure-servicebus-auth
spec:
  secretTargetRef:
  - parameter: connection
    name: my-secrets
    key: connection-string-secret
---
apiVersion: keda.sh/v1alpha1
kind: ScaledObject
metadata:
  name: azure-servicebus-queue-rule
  namespace: default
spec:
  scaleTargetRef:
    name: my-scale-target
  triggers:
  - type: azure-servicebus
    metadata:
      queueName: my-queue
      namespace: service-bus-namespace
      messageCount: "5"
    authenticationRef:
        name: azure-servicebus-auth
Find theTriggerAuthenticationobject referenced by the KEDAScaledObjectspecification. Identify eachsecretTargetRefof theTriggerAuthenticationobject.
TriggerAuthentication
ScaledObject
secretTargetRef
TriggerAuthentication
apiVersion: v1
kind: Secret
metadata:
  name: my-secrets
  namespace: my-project
type: Opaque
data:
  connection-string-secret: <SERVICE_BUS_CONNECTION_STRING>
---
apiVersion: keda.sh/v1alpha1
kind: TriggerAuthentication
metadata:
  name: azure-servicebus-auth
spec:
  secretTargetRef:
  - parameter: connection
    name: my-secrets
    key: connection-string-secret
---
apiVersion: keda.sh/v1alpha1
kind: ScaledObject
metadata:
  name: azure-servicebus-queue-rule
  namespace: default
spec:
  scaleTargetRef:
    name: my-scale-target
  triggers:
  - type: azure-servicebus
    metadata:
      queueName: my-queue
      namespace: service-bus-namespace
      messageCount: "5"
    authenticationRef:
        name: azure-servicebus-auth
apiVersion: v1
kind: Secret
metadata:
  name: my-secrets
  namespace: my-project
type: Opaque
data:
  connection-string-secret: <SERVICE_BUS_CONNECTION_STRING>
---
apiVersion: keda.sh/v1alpha1
kind: TriggerAuthentication
metadata:
  name: azure-servicebus-auth
spec:
  secretTargetRef:
  - parameter: connection
    name: my-secrets
    key: connection-string-secret
---
apiVersion: keda.sh/v1alpha1
kind: ScaledObject
metadata:
  name: azure-servicebus-queue-rule
  namespace: default
spec:
  scaleTargetRef:
    name: my-scale-target
  triggers:
  - type: azure-servicebus
    metadata:
      queueName: my-queue
      namespace: service-bus-namespace
      messageCount: "5"
    authenticationRef:
        name: azure-servicebus-auth
In theAuthenticationsection, selectAddto create an entry for each KEDAsecretTargetRefparameter.
In theAuthenticationsection, selectAddto create an entry for each KEDAsecretTargetRefparameter.
secretTargetRef
Managed identity authentication isn't supported in the Azure portal. Use theAzure CLIorAzure Resource Managerto authenticate using managed identity.
Default scale rule
If you don't create a scale rule, the default scale rule is applied to your container app.
Important
Make sure you create a scale rule or setminReplicasto 1 or more if you don't enable ingress. If ingress is disabled and you don't define aminReplicasor a custom scale rule, then your container app scales to zero and have no way of starting back up.
minReplicas
minReplicas
Scale behavior
Scaling behavior has the following defaults:
desiredReplicas = ceil(currentMetricValue / targetMetricValue)
Polling intervalis how frequently event sources are queried by KEDA. This value doesn't apply to HTTP and TCP scale rules.
Cool down periodis how long after the last event was observed before the application scales down to its minimum replica count.
Scale up stabilization windowis how long to wait before performing a scale up decision once scale up conditions were met.
Scale down stabilization windowis how long to wait before performing a scale down decision once scale down conditions were met.
Scale up stepis the rate new instances are added at. It starts with 1, 4, 8, 16, 32, ... up to the configured maximum replica count.
Scale down stepis the rate at which replicas are removed. By default 100% of replicas that need to shut down are removed.
Scaling algorithmis the formula used to calculate the current desired number of replicas.
Example
For the following scale rule:
"minReplicas": 0,
"maxReplicas": 20,
"rules": [
  {
    "name": "azure-servicebus-queue-rule",
    "custom": {
      "type": "azure-servicebus",
      "metadata": {
        "queueName": "my-queue",
        "namespace": "service-bus-namespace",
        "messageCount": "5"
      }
    }
  }
]
"minReplicas": 0,
"maxReplicas": 20,
"rules": [
  {
    "name": "azure-servicebus-queue-rule",
    "custom": {
      "type": "azure-servicebus",
      "metadata": {
        "queueName": "my-queue",
        "namespace": "service-bus-namespace",
        "messageCount": "5"
      }
    }
  }
]
As your app scales out, KEDA starts with an empty queue and performs the following steps:
Checkmy-queueevery 30 seconds.
my-queue
If the queue length equals 0, go back to (1).
If the queue length is > 0, scale the app to 1.
If the queue length is 50, calculatedesiredReplicas = ceil(50/5) = 10.
desiredReplicas = ceil(50/5) = 10
Scale app tomin(maxReplicaCount, desiredReplicas, max(4, 2*currentReplicaCount))
min(maxReplicaCount, desiredReplicas, max(4, 2*currentReplicaCount))
Go back to (1).
If the app was scaled to the maximum replica count of 20, scaling goes through the same previous steps. Scale down only happens if the condition was satisfied for 300 seconds (scale down stabilization window). Once the queue length is 0, KEDA waits for 300 seconds (cool down period) before scaling the app to 0.
Considerations
In "multiple revisions" mode, adding a new scale trigger creates a new revision of your application but your old revision remains available with the old scale rules. Use theRevision managementpage to manage traffic allocations.
In "multiple revisions" mode, adding a new scale trigger creates a new revision of your application but your old revision remains available with the old scale rules. Use theRevision managementpage to manage traffic allocations.
No usage charges are incurred when an application scales to zero. For more pricing information, seeBilling in Azure Container Apps.
No usage charges are incurred when an application scales to zero. For more pricing information, seeBilling in Azure Container Apps.
You need to enable data protection for all .NET apps on Azure Container Apps. SeeDeploying and scaling an ASP.NET Core app on Azure Container Appsfor details.
You need to enable data protection for all .NET apps on Azure Container Apps. SeeDeploying and scaling an ASP.NET Core app on Azure Container Appsfor details.
Known limitations
Vertical scaling isn't supported.
Vertical scaling isn't supported.
Replica quantities are a target amount, not a guarantee.
Replica quantities are a target amount, not a guarantee.
If you're usingDapr actorsto manage states, you should keep in mind that scaling to zero isn't supported. Dapr uses virtual actors to manage asynchronous calls, which means their in-memory representation isn't tied to their identity or lifetime.
If you're usingDapr actorsto manage states, you should keep in mind that scaling to zero isn't supported. Dapr uses virtual actors to manage asynchronous calls, which means their in-memory representation isn't tied to their identity or lifetime.
Changing KEDA proxies through theproxiessettings aren't supported. Consider using Workload Profiles with a NAT Gateway or User Defined Route (UDR) to send traffic to a network appliance, where traffic can be inspected or proxied from there.
Changing KEDA proxies through theproxiessettings aren't supported. Consider using Workload Profiles with a NAT Gateway or User Defined Route (UDR) to send traffic to a network appliance, where traffic can be inspected or proxied from there.
Next steps
Manage secrets
Feedback
Was this page helpful?
Additional resources