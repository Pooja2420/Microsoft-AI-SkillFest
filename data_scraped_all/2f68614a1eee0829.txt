Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Use Azure role-based access control for Kubernetes Authorization
Article
2024-11-08
24 contributors
In this article
This article covers how to use Azure RBAC for Kubernetes Authorization, which allows for the unified management and access control across Azure resources, AKS, and Kubernetes resources. For more information, seeAzure RBAC for Kubernetes Authorization.
Note
When usingintegrated authentication between Microsoft Entra ID and AKS, you can use Microsoft Entra users, groups, or service principals as subjects inKubernetes role-based access control (Kubernetes RBAC). With this feature, you don't need to separately manage user identities and credentials for Kubernetes. However, you still need to set up and manage Azure RBAC and Kubernetes RBAC separately.
Before you begin
You need the Azure CLI version 2.24.0 or later installed and configured. Runaz --versionto find the version. If you need to install or upgrade, seeInstall Azure CLI.
az --version
You needkubectl, with a minimum version of1.18.3.
kubectl
You need managed Microsoft Entra integration enabled on your cluster before you can add Azure RBAC for Kubernetes authorization. If you need to enable managed Microsoft Entra integration, seeUse Microsoft Entra ID in AKS.
If you have CRDs and are making custom role definitions, the only way to cover CRDs today is to useMicrosoft.ContainerService/managedClusters/*/read. For the remaining objects, you can use the specific API groups, such asMicrosoft.ContainerService/apps/deployments/read.
Microsoft.ContainerService/managedClusters/*/read
Microsoft.ContainerService/apps/deployments/read
New role assignments can takeup to five minutesto propagate and be updated by the authorization server.
Azure RBAC for Kubernetes Authorization requires that the Microsoft Entra tenant configured for authentication is same as the tenant for the subscription that holds your AKS cluster.

Create a new AKS cluster with managed Microsoft Entra integration and Azure RBAC for Kubernetes Authorization
Create an Azure resource group using theaz group createcommand.export RESOURCE_GROUP=<resource-group-name>
export LOCATION=<azure-region>

az group create --name $RESOURCE_GROUP --location $LOCATION
Create an Azure resource group using theaz group createcommand.
az group create
export RESOURCE_GROUP=<resource-group-name>
export LOCATION=<azure-region>

az group create --name $RESOURCE_GROUP --location $LOCATION
export RESOURCE_GROUP=<resource-group-name>
export LOCATION=<azure-region>

az group create --name $RESOURCE_GROUP --location $LOCATION
Create an AKS cluster with managed Microsoft Entra integration and Azure RBAC for Kubernetes Authorization using theaz aks createcommand.export CLUSTER_NAME=<cluster-name>

az aks create \
    --resource-group $RESOURCE_GROUP \
    --name $CLUSTER_NAME \
    --enable-aad \
    --enable-azure-rbac \
    --generate-ssh-keysYour output should look similar to the following example output:"AADProfile": {
    "adminGroupObjectIds": null,
    "clientAppId": null,
    "enableAzureRbac": true,
    "managed": true,
    "serverAppId": null,
    "serverAppSecret": null,
    "tenantId": "****-****-****-****-****"
}
Create an AKS cluster with managed Microsoft Entra integration and Azure RBAC for Kubernetes Authorization using theaz aks createcommand.
az aks create
export CLUSTER_NAME=<cluster-name>

az aks create \
    --resource-group $RESOURCE_GROUP \
    --name $CLUSTER_NAME \
    --enable-aad \
    --enable-azure-rbac \
    --generate-ssh-keys
export CLUSTER_NAME=<cluster-name>

az aks create \
    --resource-group $RESOURCE_GROUP \
    --name $CLUSTER_NAME \
    --enable-aad \
    --enable-azure-rbac \
    --generate-ssh-keys
Your output should look similar to the following example output:
"AADProfile": {
    "adminGroupObjectIds": null,
    "clientAppId": null,
    "enableAzureRbac": true,
    "managed": true,
    "serverAppId": null,
    "serverAppSecret": null,
    "tenantId": "****-****-****-****-****"
}
"AADProfile": {
    "adminGroupObjectIds": null,
    "clientAppId": null,
    "enableAzureRbac": true,
    "managed": true,
    "serverAppId": null,
    "serverAppSecret": null,
    "tenantId": "****-****-****-****-****"
}
Enable Azure RBAC on an existing AKS cluster
Enable Azure RBAC for Kubernetes Authorization on an existing AKS cluster using theaz aks updatecommand with the--enable-azure-rbacflag.az aks update --resource-group $RESOURCE_GROUP --name $CLUSTER_NAME --enable-azure-rbac
Enable Azure RBAC for Kubernetes Authorization on an existing AKS cluster using theaz aks updatecommand with the--enable-azure-rbacflag.
az aks update
--enable-azure-rbac
az aks update --resource-group $RESOURCE_GROUP --name $CLUSTER_NAME --enable-azure-rbac
az aks update --resource-group $RESOURCE_GROUP --name $CLUSTER_NAME --enable-azure-rbac
Disable Azure RBAC for Kubernetes Authorization from an AKS cluster
Remove Azure RBAC for Kubernetes Authorization from an existing AKS cluster using theaz aks updatecommand with the--disable-azure-rbacflag.az aks update --resource-group $RESOURCE_GROUP --name $CLUSTER_NAME --disable-azure-rbac
Remove Azure RBAC for Kubernetes Authorization from an existing AKS cluster using theaz aks updatecommand with the--disable-azure-rbacflag.
az aks update
--disable-azure-rbac
az aks update --resource-group $RESOURCE_GROUP --name $CLUSTER_NAME --disable-azure-rbac
az aks update --resource-group $RESOURCE_GROUP --name $CLUSTER_NAME --disable-azure-rbac
AKS built-in roles
AKS provides the following built-in roles:
Secrets
Secrets
Create role assignments for cluster access
Azure CLI
Azure portal
Get your AKS resource ID using theaz aks showcommand.AKS_ID=$(az aks show --resource-group $RESOURCE_GROUP --name $CLUSTER_NAME --query id --output tsv)
Get your AKS resource ID using theaz aks showcommand.
az aks show
AKS_ID=$(az aks show --resource-group $RESOURCE_GROUP --name $CLUSTER_NAME --query id --output tsv)
AKS_ID=$(az aks show --resource-group $RESOURCE_GROUP --name $CLUSTER_NAME --query id --output tsv)
Create a role assignment using theaz role assignment createcommand.<AAD-ENTITY-ID>can be a username or the client ID of a service principal. The following example creates a role assignment for theAzure Kubernetes Service RBAC Adminrole.az role assignment create --role "Azure Kubernetes Service RBAC Admin" --assignee <AAD-ENTITY-ID> --scope $AKS_IDNoteYou can create theAzure Kubernetes Service RBAC ReaderandAzure Kubernetes Service RBAC Writerrole assignments scoped to a specific namespace within the cluster using theaz role assignment createcommand and setting the scope to the desired namespace.az role assignment create --role "Azure Kubernetes Service RBAC Reader" --assignee <AAD-ENTITY-ID> --scope $AKS_ID/namespaces/<namespace-name>
Create a role assignment using theaz role assignment createcommand.<AAD-ENTITY-ID>can be a username or the client ID of a service principal. The following example creates a role assignment for theAzure Kubernetes Service RBAC Adminrole.
az role assignment create
<AAD-ENTITY-ID>
az role assignment create --role "Azure Kubernetes Service RBAC Admin" --assignee <AAD-ENTITY-ID> --scope $AKS_ID
az role assignment create --role "Azure Kubernetes Service RBAC Admin" --assignee <AAD-ENTITY-ID> --scope $AKS_ID
Note
You can create theAzure Kubernetes Service RBAC ReaderandAzure Kubernetes Service RBAC Writerrole assignments scoped to a specific namespace within the cluster using theaz role assignment createcommand and setting the scope to the desired namespace.
az role assignment create
az role assignment create --role "Azure Kubernetes Service RBAC Reader" --assignee <AAD-ENTITY-ID> --scope $AKS_ID/namespaces/<namespace-name>
az role assignment create --role "Azure Kubernetes Service RBAC Reader" --assignee <AAD-ENTITY-ID> --scope $AKS_ID/namespaces/<namespace-name>
In theAzure portal, navigate to your AKS cluster.
In theAzure portal, navigate to your AKS cluster.
In the service menu, selectAccess control (IAM)>Add role assignment.
In the service menu, selectAccess control (IAM)>Add role assignment.
On theRoletab, select the desired role, such asAzure Kubernetes Service RBAC Admin, and then selectNext.
On theRoletab, select the desired role, such asAzure Kubernetes Service RBAC Admin, and then selectNext.
On theMemberstab, configure the following settings:Assign access to: SelectUser, group, or service principal.Members: Select+ Select members, search for and select the desired members, and then selectSelect.
On theMemberstab, configure the following settings:
Assign access to: SelectUser, group, or service principal.
Members: Select+ Select members, search for and select the desired members, and then selectSelect.
SelectReview + assign>Assign.NoteIn Azure portal, after creating role assignments scoped to a desired namespace, you won't be able to see "role assignments" for namespaceat a scope. You can find it by using theaz role assignment listcommand, orlist role assignments for a user or group, which you assigned the role to.az role assignment list --scope $AKS_ID/namespaces/<namespace-name>
SelectReview + assign>Assign.
Note
In Azure portal, after creating role assignments scoped to a desired namespace, you won't be able to see "role assignments" for namespaceat a scope. You can find it by using theaz role assignment listcommand, orlist role assignments for a user or group, which you assigned the role to.
az role assignment list
az role assignment list --scope $AKS_ID/namespaces/<namespace-name>
az role assignment list --scope $AKS_ID/namespaces/<namespace-name>
Create custom roles definitions
The following example custom role definition allows a user to only read deployments and nothing else. For the full list of possible actions, seeMicrosoft.ContainerService operations.
To create your own custom role definitions, copy the following file, replacing<YOUR SUBSCRIPTION ID>with your own subscription ID, and then save it asdeploy-view.json.{
    "Name": "AKS Deployment Reader",
    "Description": "Lets you view all deployments in cluster/namespace.",
    "Actions": [],
    "NotActions": [],
    "DataActions": [
        "Microsoft.ContainerService/managedClusters/apps/deployments/read"
    ],
    "NotDataActions": [],
    "assignableScopes": [
        "/subscriptions/<YOUR SUBSCRIPTION ID>"
    ]
}
To create your own custom role definitions, copy the following file, replacing<YOUR SUBSCRIPTION ID>with your own subscription ID, and then save it asdeploy-view.json.
<YOUR SUBSCRIPTION ID>
deploy-view.json
{
    "Name": "AKS Deployment Reader",
    "Description": "Lets you view all deployments in cluster/namespace.",
    "Actions": [],
    "NotActions": [],
    "DataActions": [
        "Microsoft.ContainerService/managedClusters/apps/deployments/read"
    ],
    "NotDataActions": [],
    "assignableScopes": [
        "/subscriptions/<YOUR SUBSCRIPTION ID>"
    ]
}
{
    "Name": "AKS Deployment Reader",
    "Description": "Lets you view all deployments in cluster/namespace.",
    "Actions": [],
    "NotActions": [],
    "DataActions": [
        "Microsoft.ContainerService/managedClusters/apps/deployments/read"
    ],
    "NotDataActions": [],
    "assignableScopes": [
        "/subscriptions/<YOUR SUBSCRIPTION ID>"
    ]
}
Create the role definition using theaz role definition createcommand, setting the--role-definitionto thedeploy-view.jsonfile you created in the previous step.az role definition create --role-definition @deploy-view.json
Create the role definition using theaz role definition createcommand, setting the--role-definitionto thedeploy-view.jsonfile you created in the previous step.
az role definition create
--role-definition
deploy-view.json
az role definition create --role-definition @deploy-view.json
az role definition create --role-definition @deploy-view.json
Assign the role definition to a user or other identity using theaz role assignment createcommand.az role assignment create --role "AKS Deployment Reader" --assignee <AAD-ENTITY-ID> --scope $AKS_ID
Assign the role definition to a user or other identity using theaz role assignment createcommand.
az role assignment create
az role assignment create --role "AKS Deployment Reader" --assignee <AAD-ENTITY-ID> --scope $AKS_ID
az role assignment create --role "AKS Deployment Reader" --assignee <AAD-ENTITY-ID> --scope $AKS_ID
Use Azure RBAC for Kubernetes Authorization withkubectl
kubectl
Make sure you have theAzure Kubernetes Service Cluster Userbuilt-in role, and then get the kubeconfig of your AKS cluster using theaz aks get-credentialscommand.az aks get-credentials --resource-group $RESOURCE_GROUP --name $CLUSTER_NAME
Make sure you have theAzure Kubernetes Service Cluster Userbuilt-in role, and then get the kubeconfig of your AKS cluster using theaz aks get-credentialscommand.
az aks get-credentials
az aks get-credentials --resource-group $RESOURCE_GROUP --name $CLUSTER_NAME
az aks get-credentials --resource-group $RESOURCE_GROUP --name $CLUSTER_NAME
You can now usekubectlto manage your cluster. For example, you can list the nodes in your cluster usingkubectl get nodes.kubectl get nodesExample output:NAME                                STATUS   ROLES   AGE    VERSION
aks-nodepool1-93451573-vmss000000   Ready    agent   3h6m   v1.15.11
aks-nodepool1-93451573-vmss000001   Ready    agent   3h6m   v1.15.11
aks-nodepool1-93451573-vmss000002   Ready    agent   3h6m   v1.15.11
You can now usekubectlto manage your cluster. For example, you can list the nodes in your cluster usingkubectl get nodes.
kubectl
kubectl get nodes
kubectl get nodes
kubectl get nodes
Example output:
NAME                                STATUS   ROLES   AGE    VERSION
aks-nodepool1-93451573-vmss000000   Ready    agent   3h6m   v1.15.11
aks-nodepool1-93451573-vmss000001   Ready    agent   3h6m   v1.15.11
aks-nodepool1-93451573-vmss000002   Ready    agent   3h6m   v1.15.11
NAME                                STATUS   ROLES   AGE    VERSION
aks-nodepool1-93451573-vmss000000   Ready    agent   3h6m   v1.15.11
aks-nodepool1-93451573-vmss000001   Ready    agent   3h6m   v1.15.11
aks-nodepool1-93451573-vmss000002   Ready    agent   3h6m   v1.15.11
Use Azure RBAC for Kubernetes Authorization withkubelogin
kubelogin
AKS created thekubeloginplugin to help unblock scenarios such as non-interactive logins, olderkubectlversions, or leveraging SSO across multiple clusters without the need to sign in to a new cluster.
kubelogin
kubectl
Use thekubeloginplugin by running the following command:export KUBECONFIG=/path/to/kubeconfig
kubelogin convert-kubeconfig
Use thekubeloginplugin by running the following command:
kubelogin
export KUBECONFIG=/path/to/kubeconfig
kubelogin convert-kubeconfig
export KUBECONFIG=/path/to/kubeconfig
kubelogin convert-kubeconfig
You can now usekubectlto manage your cluster. For example, you can list the nodes in your cluster usingkubectl get nodes.kubectl get nodesExample output:NAME                                STATUS   ROLES   AGE    VERSION
aks-nodepool1-93451573-vmss000000   Ready    agent   3h6m   v1.15.11
aks-nodepool1-93451573-vmss000001   Ready    agent   3h6m   v1.15.11
aks-nodepool1-93451573-vmss000002   Ready    agent   3h6m   v1.15.11
You can now usekubectlto manage your cluster. For example, you can list the nodes in your cluster usingkubectl get nodes.
kubectl
kubectl get nodes
kubectl get nodes
kubectl get nodes
Example output:
NAME                                STATUS   ROLES   AGE    VERSION
aks-nodepool1-93451573-vmss000000   Ready    agent   3h6m   v1.15.11
aks-nodepool1-93451573-vmss000001   Ready    agent   3h6m   v1.15.11
aks-nodepool1-93451573-vmss000002   Ready    agent   3h6m   v1.15.11
NAME                                STATUS   ROLES   AGE    VERSION
aks-nodepool1-93451573-vmss000000   Ready    agent   3h6m   v1.15.11
aks-nodepool1-93451573-vmss000001   Ready    agent   3h6m   v1.15.11
aks-nodepool1-93451573-vmss000002   Ready    agent   3h6m   v1.15.11
Clean up resources
Delete role assignment
Azure CLI
Azure portal
List role assignments using theaz role assignment listcommand.az role assignment list --scope $AKS_ID --query [].id --output tsv
List role assignments using theaz role assignment listcommand.
az role assignment list
az role assignment list --scope $AKS_ID --query [].id --output tsv
az role assignment list --scope $AKS_ID --query [].id --output tsv
Delete role assignments using theaz role assignment deletecommand.az role assignment delete --ids <LIST OF ASSIGNMENT IDS>
Delete role assignments using theaz role assignment deletecommand.
az role assignment delete
az role assignment delete --ids <LIST OF ASSIGNMENT IDS>
az role assignment delete --ids <LIST OF ASSIGNMENT IDS>
Navigate to your AKS cluster and selectAccess control (IAM)>Role assignments.
Select the role assignment you want to delete, and then selectDelete>Yes.
Delete role definition
Delete the custom role definition using theaz role definition deletecommand.az role definition delete --name "AKS Deployment Reader"
Delete the custom role definition using theaz role definition deletecommand.
az role definition delete
az role definition delete --name "AKS Deployment Reader"
az role definition delete --name "AKS Deployment Reader"
Delete resource group and AKS cluster
Azure CLI
Azure portal
Delete the resource group and AKS cluster using theaz group deletecommand.az group delete --name $RESOURCE_GROUP --yes --no-wait
Delete the resource group and AKS cluster using theaz group deletecommand.
az group delete
az group delete --name $RESOURCE_GROUP --yes --no-wait
az group delete --name $RESOURCE_GROUP --yes --no-wait
Navigate to the resource group that contains your AKS cluster and selectDelete resource group.
On theDelete a resource grouppage, enter the resource group name, and then selectDelete>Delete.
Next steps
To learn more about AKS authentication, authorization, Kubernetes RBAC, and Azure RBAC, see:
Access and identity options for AKS
What is Azure RBAC?
Microsoft.ContainerService operations
Azure Kubernetes Service

Additional resources