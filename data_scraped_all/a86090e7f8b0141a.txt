Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Authenticate Python apps to Azure services during local development using developer accounts
Article
2024-10-17
4 contributors
In this article
When developers create cloud applications, they typically debug and test applications on their local workstation. When an application is run on a developer's workstation during local development, it still must authenticate to any Azure services used by the app. This article covers how to use a developer's Azure credentials to authenticate the app to Azure during local development.

For an app to authenticate to Azure during local development using the developer's Azure credentials, a developer must be signed-in to Azure from the Azure CLI, Azure PowerShell, or Azure Developer CLI. The Azure SDK for Python is able to detect that the developer is signed-in from one of these tools and then obtain the necessary credentials from the credentials cache to authenticate the app to Azure as the signed-in user.
This approach is easiest to set up for a development team since it takes advantage of the developers' existing Azure accounts. However, a developer's account will likely have more permissions than required by the application, therefore exceeding the permissions the app will run with in production. As an alternative, you cancreate application service principals to use during local development, which can be scoped to have only the access needed by the app.

1 - Create Microsoft Entra security group for local development
Since there are almost always multiple developers who work on an application, it's recommended to first create a Microsoft Entra security group to encapsulate the roles (permissions) the app needs in local development. This approach offers the following advantages.
Every developer is assured to have the same roles assigned since roles are assigned at the group level.
If a new role is needed for the app, it only needs to be added to the Microsoft Entra group for the app.
If a new developer joins the team, they simply must be added to the correct Microsoft Entra group to get the correct permissions to work on the app.
If you have an existing Microsoft Entra security group for your development team, you can use that group. Otherwise, complete the following steps to create a Microsoft Entra security group.
Azure CLI
Azure portal
Theaz ad group createcommand is used to create groups in Microsoft Entra ID. The--display-nameand--main-nicknameparameters are required. The name given to the group should be based on the name of the application. It's also useful to include a phrase like 'local-dev' in the name of the group to indicate the purpose of the group.
--display-name
--main-nickname
az ad group create \
    --display-name MyDisplay \
    --mail-nickname MyDisplay  \
    --description "<group-description>"
az ad group create \
    --display-name MyDisplay \
    --mail-nickname MyDisplay  \
    --description "<group-description>"
Copy the value of theidproperty in the output of the command. This is the object ID for the group. You need it in later steps. You can also use theaz ad group showcommand to retrieve this property.
id
To add members to the group, you need the object ID of Azure user. Use theaz ad user listto list the available service principals. The--filterparameter command accepts OData style filters and can be used to filter the list on the display name of the user as shown. The--queryparameter limits the output to columns of interest.
--filter
--query
az ad user list \
    --filter "startswith(displayName, 'Bob')" \
    --query "[].{objectId:id, displayName:displayName}" \
    --output table
az ad user list \
    --filter "startswith(displayName, 'Bob')" \
    --query "[].{objectId:id, displayName:displayName}" \
    --output table
Theaz ad group member addcommand can then be used to add members to groups.
az ad group member add \
    --group <group-name> \
    --member-id <object-id>
az ad group member add \
    --group <group-name> \
    --member-id <object-id>
Group typeâSecurity.
Group nameâ A name for the security group, typically created from the application name.  It's also helpful to include a string likelocal-devin the name of the group to indicate the purpose of the group.
Group descriptionâ A description of the purpose of the group.
Select theNo members selectedlink underMembersto add members to the group.
Use the search box to filter the list of user names in the list.
Choose one or more users for local development for this app.  As you choose an object, the object moves to theSelected itemslist at the bottom of the dialog.
When finished, choose theSelectbutton.
Note
By default, the creation of Microsoft Entra security groups is limited to certain privileged roles in a directory. If you're unable to create a group, contact an administrator for your directory. If you're unable to add members to an existing group, contact the group owner or a directory administrator. To learn more, seeManage Microsoft Entra groups and group membership.

2 - Assign roles to the Microsoft Entra group
Next, you need to determine what roles (permissions) your app needs on what resources and assign those roles to your app. In this example, the roles will be assigned to the Microsoft Entra group created in step 1. Roles can be assigned at a resource, resource group, or subscription scope. This example shows how to assign roles at the resource group scope since most applications group all their Azure resources into a single resource group.
Azure CLI
Azure portal
A user, group, or application service principal is assigned a role in Azure using theaz role assignment createcommand. You can specify a group with its object ID.
az role assignment create --assignee <objectId> \
    --scope /subscriptions/<subscriptionId>/resourceGroups/<resourceGroupName> \
    --role "<roleName>"
az role assignment create --assignee <objectId> \
    --scope /subscriptions/<subscriptionId>/resourceGroups/<resourceGroupName> \
    --role "<roleName>"
To get the role names that can be assigned, use theaz role definition listcommand.
az role definition list --query "sort_by([].{roleName:roleName, description:description}, &roleName)" --output table
az role definition list --query "sort_by([].{roleName:roleName, description:description}, &roleName)" --output table
For example, to allow the members of a group with an object ID ofbbbbbbbb-1111-2222-3333-ccccccccccccread, write, and delete access to Azure Storage blob containers and data in all storage accounts in themsdocs-python-sdk-auth-exampleresource group in the subscription with IDaaaa0a0a-bb1b-cc2c-dd3d-eeeeee4e4e4e, you would assign theStorage Blob Data Contributorrole to the group using the following command.
bbbbbbbb-1111-2222-3333-cccccccccccc
aaaa0a0a-bb1b-cc2c-dd3d-eeeeee4e4e4e
az role assignment create --assignee bbbbbbbb-1111-2222-3333-cccccccccccc \
    --scope /subscriptions/aaaa0a0a-bb1b-cc2c-dd3d-eeeeee4e4e4e/resourceGroups/msdocs-python-sdk-auth-example \
    --role "Storage Blob Data Contributor"
az role assignment create --assignee bbbbbbbb-1111-2222-3333-cccccccccccc \
    --scope /subscriptions/aaaa0a0a-bb1b-cc2c-dd3d-eeeeee4e4e4e/resourceGroups/msdocs-python-sdk-auth-example \
    --role "Storage Blob Data Contributor"
For information on assigning permissions at the resource or subscription level using the Azure CLI, see the articleAssign Azure roles using the Azure CLI.
Select theRole assignmentstab.
Select+ Addfrom the top menu and thenAdd role assignmentfrom the resulting drop-down menu.
Use the search box to filter the list to a more manageable size. This example shows how to filter for Storage Blob roles.
Select the role that you want to assign.SelectNextto go to the next screen.
SelectUser, group, or service principalunderAssign access to.
Select+ Select membersunderMembers
TheSelecttext box can be used to filter the list of users and groups in your subscription. If needed, type the first few characters of the local development Microsoft Entra group you created for the app.
Select the local development Microsoft Entra group associated with your application.
3 - Sign-in to Azure using the Azure CLI, Azure PowerShell, Azure Developer CLI, or in a browser
Azure CLI
Azure PowerShell
Azure Developer CLI
Interactive browser
Open a terminal on your developer workstation and sign-in to Azure from theAzure CLI.
az login
az login
Open a terminal on your developer workstation and sign-in to Azure fromAzure PowerShell.
Connect-AzAccount
Connect-AzAccount
Open a terminal on your developer workstation and sign-in to Azure fromAzure Developer CLI.
azd auth login
azd auth login
Interactive authentication is disabled in theDefaultAzureCredentialby default and can be enabled with a keyword argument:
DefaultAzureCredential
DefaultAzureCredential(exclude_interactive_browser_credential=False)
DefaultAzureCredential(exclude_interactive_browser_credential=False)
4 - Implement DefaultAzureCredential in your application
To authenticate Azure SDK client objects to Azure, your application should use theDefaultAzureCredentialclass from theazure.identitypackage. In this scenario,DefaultAzureCredentialwill sequentially check to see if the developer has signed-in to Azure using the Azure CLI, Azure PowerShell, or Azure developer CLI. If the developer is signed-in to Azure using any of these tools, then the credentials used to sign into the tool will be used by the app to authenticate to Azure.
DefaultAzureCredential
azure.identity
DefaultAzureCredential
Start by adding theazure.identitypackage to your application.
pip install azure-identity
pip install azure-identity
Next, for any Python code that creates an Azure SDK client object in your app, you'll want to:
Import theDefaultAzureCredentialclass from theazure.identitymodule.
DefaultAzureCredential
azure.identity
Create aDefaultAzureCredentialobject.
DefaultAzureCredential
Pass theDefaultAzureCredentialobject to the Azure SDK client object constructor.
DefaultAzureCredential
An example of these steps is shown in the following code segment.
from azure.identity import DefaultAzureCredential
from azure.storage.blob import BlobServiceClient

# Acquire a credential object
token_credential = DefaultAzureCredential()

blob_service_client = BlobServiceClient(
        account_url="https://<my_account_name>.blob.core.windows.net",
        credential=token_credential)
from azure.identity import DefaultAzureCredential
from azure.storage.blob import BlobServiceClient

# Acquire a credential object
token_credential = DefaultAzureCredential()

blob_service_client = BlobServiceClient(
        account_url="https://<my_account_name>.blob.core.windows.net",
        credential=token_credential)
Feedback
Was this page helpful?
Additional resources