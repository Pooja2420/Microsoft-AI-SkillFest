Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Container insights log schema
Article
2025-02-04
4 contributors
In this article
Container insights stores log data it collects in a table calledContainerLogV2in a Log Analytics workspace. This article describes the schema of this table and configuration options for it. It also compares this table to the legacyContainerLogtable and provides detail for migrating from it.
Table comparison
ContainerLogV2is the default schema for CLI version 2.54.0 and greater. This is the default table for customers who onboard Container insights with managed identity authentication. ContainerLogV2 can be explicitly enabled through CLI version 2.51.0 or higher using data collection settings.
Important
Support for theContainerLogtable will be retired on 30th September 2026.
The following table highlights the key differences between using ContainerLogV2 and ContainerLog schema.
ContainerName
PodName
PodNamespace
LogLevel
KubernetesMetadata
1IfLogMessageis valid JSON and has a key namedlevel, its value will be used. Otherwise, regex based keyword matching is used to inferLogLevelfromLogMessage. This inference may result in some misclassifications.LogLevelis a string field with a health value such asCRITICAL,ERROR,WARNING,INFO,DEBUG,TRACE, orUNKNOWN.
LogMessage
level
LogLevel
LogMessage
LogLevel
CRITICAL
ERROR
WARNING
INFO
DEBUG
TRACE
UNKNOWN
2KubernetesMetadatais an optional column that is enabled withKubernetes metadata. The value of this field is JSON with the fieldspodLabels,podAnnotations,podUid,Image,ImageTag, andImage repo.
KubernetesMetadata
podLabels
podAnnotations
podUid
Image
ImageTag
Image repo
3DCR configuration requiresmanaged identity authentication.
Note
TheLogMessagefield is dynamic and supports ingesting both JSON and plaintext string formats.Log data exportto Event Hub and Storage Account is supported if the incomingLogMessageis valid JSON or a valid plain string.
LogMessage
LogMessage
If theLogMessageis malformed JSON then those log messages will be ingested with escaping. By default, log messages larger than 16KB are truncated. Withmulti-line loggingenabled, log messages larger than 64KB are truncated.
LogMessage
Enable the ContainerLogV2 schema
Enable theContainerLogV2schema for a cluster either using the cluster'sData Collection Rule (DCR)orConfigMap. If both settings are enabled, the ConfigMap takes precedence. TheContainerLogtable is used only when both the DCR and ConfigMap are explicitly set to off.
ContainerLog
Before you enable theContainerLogsV2schema, you should assess whether you have any alert rules that rely on theContainerLogtable. Any such alerts need to be updated to use the new table. Run the following Azure Resource Graph query to scan for alert rules that reference theContainerLogtable.
ContainerLog
resources
| where type in~ ('microsoft.insights/scheduledqueryrules') and ['kind'] !in~ ('LogToMetric')
| extend severity = strcat("Sev", properties["severity"])
| extend enabled = tobool(properties["enabled"])
| where enabled in~ ('true')
| where tolower(properties["targetResourceTypes"]) matches regex 'microsoft.operationalinsights/workspaces($|/.*)?' or tolower(properties["targetResourceType"]) matches regex 'microsoft.operationalinsights/workspaces($|/.*)?' or tolower(properties["scopes"]) matches regex 'providers/microsoft.operationalinsights/workspaces($|/.*)?'
| where properties contains "ContainerLog"
| project id,name,type,properties,enabled,severity,subscriptionId
| order by tolower(name) asc
resources
| where type in~ ('microsoft.insights/scheduledqueryrules') and ['kind'] !in~ ('LogToMetric')
| extend severity = strcat("Sev", properties["severity"])
| extend enabled = tobool(properties["enabled"])
| where enabled in~ ('true')
| where tolower(properties["targetResourceTypes"]) matches regex 'microsoft.operationalinsights/workspaces($|/.*)?' or tolower(properties["targetResourceType"]) matches regex 'microsoft.operationalinsights/workspaces($|/.*)?' or tolower(properties["scopes"]) matches regex 'providers/microsoft.operationalinsights/workspaces($|/.*)?'
| where properties contains "ContainerLog"
| project id,name,type,properties,enabled,severity,subscriptionId
| order by tolower(name) asc
Kubernetes metadata and logs filtering
Kubernetes metadata and logs filtering extends the ContainerLogsV2 schema with additional Kubernetes metadata. The logs filtering feature provides filtering capabilities for both workload and platform  containers. These features give you richer context and improved visibility into your workloads.
Note
The Kubernetes metadata and logs filtering Grafana dashboard does not currently support basic logs.
Features
Enhanced ContainerLogV2 schemaWhen Kubernetes Logs Metadata is enabled, it adds a column toContainerLogV2calledKubernetesMetadatathat enhances troubleshooting with simple log queries and removes the need for joining with other tables. The fields in this column include:PodLabels,PodAnnotations,PodUid,Image,ImageID,ImageRepo,ImageTag. These fields enhance the troubleshooting experience using log queries without having to join with other tables. See below for details on enabling the Kubernetes metadata feature.
Enhanced ContainerLogV2 schemaWhen Kubernetes Logs Metadata is enabled, it adds a column toContainerLogV2calledKubernetesMetadatathat enhances troubleshooting with simple log queries and removes the need for joining with other tables. The fields in this column include:PodLabels,PodAnnotations,PodUid,Image,ImageID,ImageRepo,ImageTag. These fields enhance the troubleshooting experience using log queries without having to join with other tables. See below for details on enabling the Kubernetes metadata feature.
ContainerLogV2
KubernetesMetadata
PodLabels
PodAnnotations
PodUid
Image
ImageID
ImageRepo
ImageTag
Log levelThis feature adds aLogLevelcolumn to ContainerLogV2 with the possible valuescritical,error,warning,info,debug,trace, orunknown. This helps you assess application health based on severity level. Adding the Grafana dashboard, you can visualize the log level trends over time and quickly pinpoint affected resources.
Log levelThis feature adds aLogLevelcolumn to ContainerLogV2 with the possible valuescritical,error,warning,info,debug,trace, orunknown. This helps you assess application health based on severity level. Adding the Grafana dashboard, you can visualize the log level trends over time and quickly pinpoint affected resources.
LogLevel
Grafana dashboard for visualizationThe Grafana dashboard provides a color-coded visualization of thelog leveland also provides insights into Log Volume, Log Rate, Log Records, Logs. You can get time-sensitive analysis, dynamic insights into log level trends over time, and crucial real-time monitoring. The dashboard also provides a detailed breakdown by computer, pod, and container, which empowers in-depth analysis and pinpointed troubleshooting. See below for details on installing the Grafana dashboard.
Grafana dashboard for visualizationThe Grafana dashboard provides a color-coded visualization of thelog leveland also provides insights into Log Volume, Log Rate, Log Records, Logs. You can get time-sensitive analysis, dynamic insights into log level trends over time, and crucial real-time monitoring. The dashboard also provides a detailed breakdown by computer, pod, and container, which empowers in-depth analysis and pinpointed troubleshooting. See below for details on installing the Grafana dashboard.
Annotation based log filtering for workloadsEfficient log filtering through pod annotations. This allows you to focus on relevant information without sifting through noise. Annotation-based filtering enables you to exclude log collection for certain pods and containers by annotating the pod, which would help reduce the log analytics cost significantly. SeeAnnotation-based log filteringfor details on configuring annotation based filtering.
Annotation based log filtering for workloadsEfficient log filtering through pod annotations. This allows you to focus on relevant information without sifting through noise. Annotation-based filtering enables you to exclude log collection for certain pods and containers by annotating the pod, which would help reduce the log analytics cost significantly. SeeAnnotation-based log filteringfor details on configuring annotation based filtering.
ConfigMap based log filtering for platform logs (System Kubernetes Namespaces)Platform logs are emitted by containers in the system (or similar restricted) namespaces. By default, all the container logs from the system namespace are excluded to minimize the cost of data in your Log Analytics workspace. In specific troubleshooting scenarios though, container logs of system container play a crucial role. One example is thecorednscontainer in thekube-systemnamespace.
ConfigMap based log filtering for platform logs (System Kubernetes Namespaces)Platform logs are emitted by containers in the system (or similar restricted) namespaces. By default, all the container logs from the system namespace are excluded to minimize the cost of data in your Log Analytics workspace. In specific troubleshooting scenarios though, container logs of system container play a crucial role. One example is thecorednscontainer in thekube-systemnamespace.
coredns
kube-system
Enable Kubernetes metadata
Important
Collection of Kubernetes metadata requiresmanaged identity authenticationandContainerLogsV2
Enable Kubernetes metadata usingConfigMapwith the following settings. All metadata fields are collected by default when themetadata_collectionis enabled. Uncommentinclude_fieldsto specify individual fields to be collected.
metadata_collection
include_fields
[log_collection_settings.metadata_collection]
    enabled = true
    include_fields = ["podLabels","podAnnotations","podUid","image","imageID","imageRepo","imageTag"]
[log_collection_settings.metadata_collection]
    enabled = true
    include_fields = ["podLabels","podAnnotations","podUid","image","imageID","imageRepo","imageTag"]
After a few minutes, theKubernetesMetadatacolumn should be included with any log queries forContainerLogV2table as shown below.
KubernetesMetadata
ContainerLogV2

Install Grafana dashboard
Important
If you enabled Grafana using the guidance atEnable monitoring for Kubernetes clustersthen your Grafana instance should already have access to your Azure Monitor workspace for Prometheus metrics. The Kubernetes Logs Metadata dashboard also requires access to your Log Analytics workspace which contains log data. SeeHow to modify access permissions to Azure Monitorfor guidance on granting your Grafana instance the Monitoring Reader role for your Log Analytics workspace.
Import the dashboard from the Grafana gallery atContainerLogV2 Dashboard. You can then open the dashboard and select values for DataSource, Subscription, ResourceGroup, Cluster, Namespace, and Labels.

Note
When you initially load the Grafana Dashboard, you may see errors due to variables not yet being selected. To prevent this from recurring, save the dashboard after selecting a set of variables so that it becomes default on the first open.
Multi-line logging
With multiline logging enabled, previously split container logs are stitched together and sent as single entries to the ContainerLogV2 table. Enable multiline logging with ConfigMap as described inConfigure data collection in Container insights using ConfigMap.
Note
The configmap now features a language specification option that allows you to select only the languages you're interested in. This feature can be enabled by editing the languages in the stacktrace_languages option in theconfigmap.
Limitations
Multiline logging only stitches exception stack traces from the containers using Java, Python, .NET, and Go. Other multiline log entries, including custom exceptions and arbitrary log messages, are not stitched together.
Multiline logging only stitches exception stack traces from the containers using Java, Python, .NET, and Go. Other multiline log entries, including custom exceptions and arbitrary log messages, are not stitched together.
If the log line which larger than 16KB instead of truncated by container runtime by default and log line will be supported up to 64KB.
If the log line which larger than 16KB instead of truncated by container runtime by default and log line will be supported up to 64KB.
Examples
Go exception stack trace multi-line logging disabled

Go exception stack trace multi-line logging enabled

Java stack trace multi-line logging enabled

Python stack trace multi-line logging enabled

Next steps
ConfigureBasic Logsfor ContainerLogv2.
Learn howquery datafrom ContainerLogV2
Feedback
Was this page helpful?
Additional resources