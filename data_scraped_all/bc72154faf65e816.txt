Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Quickstart: Deploy to Azure Container Apps using IntelliJ IDEA
Article
2025-01-10
5 contributors
In this article
This article shows you how to deploy a containerized application to Azure Container Apps using Azure Toolkit for IntelliJ IDEA. The article uses a sample backend web API service that returns a static collection of music albums.
Prerequisites
An Azure account with an active subscription. If you don't have a subscription, create afree accountbefore you begin.
A supported Java Development Kit (JDK). For more information about the JDKs available for use when developing on Azure, seeJava support on Azure and Azure Stack.
IntelliJ IDEA, Ultimate or Community Edition.
Maven 3.5.0+.
ADockerclient.
TheAzure Toolkit for IntelliJ. For more information, seeInstall the Azure Toolkit for IntelliJ. You also need to sign in to your Azure account for the Azure Toolkit for IntelliJ. For more information, seeSign-in instructions for the Azure Toolkit for IntelliJ.
Clone the project
Use the following steps to clone and open the sample project:
Use the following commands to clone the sample app and check out theIDEbranch:git clone https://github.com/Azure-Samples/containerapps-albumapi-java
cd containerapps-albumapi-java
git checkout IDE
Use the following commands to clone the sample app and check out theIDEbranch:
git clone https://github.com/Azure-Samples/containerapps-albumapi-java
cd containerapps-albumapi-java
git checkout IDE
git clone https://github.com/Azure-Samples/containerapps-albumapi-java
cd containerapps-albumapi-java
git checkout IDE
SelectOpento open the project in IntelliJ IDEA.
SelectOpento open the project in IntelliJ IDEA.
Build and run the project locally
Use the following steps to test the project locally:
Use the following command to build the project withMaven:mvn clean package -DskipTests
Use the following command to build the project withMaven:
mvn clean package -DskipTests
mvn clean package -DskipTests
To verify that the application is running, open a browser and go tohttp://localhost:8080/albums. The page returns a list of JSON objects similar to the output of the following command:java -jar target\containerapps-albumapi-java-0.0.1-SNAPSHOT.jar
To verify that the application is running, open a browser and go tohttp://localhost:8080/albums. The page returns a list of JSON objects similar to the output of the following command:
http://localhost:8080/albums
java -jar target\containerapps-albumapi-java-0.0.1-SNAPSHOT.jar
java -jar target\containerapps-albumapi-java-0.0.1-SNAPSHOT.jar
Create an environment
Use the following steps to set up your environment and deploy a container app in Azure:
In theAzure Explorerview, right-clickContainer Apps Environmentand then selectCreate Container Apps Environment.
In theAzure Explorerview, right-clickContainer Apps Environmentand then selectCreate Container Apps Environment.
On theCreate Container Apps Environmentpage, enter the following information, and then selectOK:Subscription: The Azure subscription to use.Resource Group: The resource group for your container apps. Select one of the following options:Create New: Specifies that you want to create a new resource group.Use Existing: Specifies that you must select from a list of resource groups that are associated with your Azure account.Region: The appropriate region, for example,East US.Name: The name for the new Container Apps environment.Type: The type of Container Apps environment. You can accept the default.Workload Profiles: The workload profiles for your container apps. You can accept the default.Log Analytics workspace: The Log Analytics workspace to use. You can accept the default.
On theCreate Container Apps Environmentpage, enter the following information, and then selectOK:
Subscription: The Azure subscription to use.
Resource Group: The resource group for your container apps. Select one of the following options:Create New: Specifies that you want to create a new resource group.Use Existing: Specifies that you must select from a list of resource groups that are associated with your Azure account.
Create New: Specifies that you want to create a new resource group.
Use Existing: Specifies that you must select from a list of resource groups that are associated with your Azure account.
Region: The appropriate region, for example,East US.
Name: The name for the new Container Apps environment.
Type: The type of Container Apps environment. You can accept the default.
Workload Profiles: The workload profiles for your container apps. You can accept the default.
Log Analytics workspace: The Log Analytics workspace to use. You can accept the default.

Deploy the container app
To deploy the container app, use the following steps:
SourceCode
Artifact
Image
Right-click the Container Apps environment you created, and selectCreate>Container Appin Azure Explorer. Then, enter the following information:Subscription: The Azure subscription to use.Resource Group: The resource group for your container apps. Select one of the following options:Create New: Specifies that you want to create a new resource group.Use Existing: Specifies that you must select from a list of resource groups that are associated with your Azure account.Environment: The Container Apps environment to use.Name: The name for a new container app.Deployment:Source: Select theSource Codeoption.Code: Select the folder button, and then select the source code folder on your local machine.Container Resource Allocation:Workload Profile: Select the appropriate workload profile based on your application's requirements.CPU and Memory: Allocate the necessary CPU and memory resources for your container app.Ingress Settings:Ingress: Enable or disable ingress based on your application's needs. You can accept the default settings.External Traffic: Specifies whether the container app should accept external traffic. You can accept the default settings.Target Port: Enable or disable ingress based on your application's needs. Configure the target port to8080.Other:Env Variables: Set any environment variables required by your application.Min Replicas: The minimum number of replicas for your container app. You can accept the default settings.Max Replicas: The maximum number of replicas for your container app. You can accept the default settings.
Right-click the Container Apps environment you created, and selectCreate>Container Appin Azure Explorer. Then, enter the following information:
Subscription: The Azure subscription to use.
Resource Group: The resource group for your container apps. Select one of the following options:Create New: Specifies that you want to create a new resource group.Use Existing: Specifies that you must select from a list of resource groups that are associated with your Azure account.
Create New: Specifies that you want to create a new resource group.
Use Existing: Specifies that you must select from a list of resource groups that are associated with your Azure account.
Environment: The Container Apps environment to use.
Name: The name for a new container app.
Deployment:Source: Select theSource Codeoption.Code: Select the folder button, and then select the source code folder on your local machine.
Source: Select theSource Codeoption.
Code: Select the folder button, and then select the source code folder on your local machine.
Container Resource Allocation:Workload Profile: Select the appropriate workload profile based on your application's requirements.CPU and Memory: Allocate the necessary CPU and memory resources for your container app.
Workload Profile: Select the appropriate workload profile based on your application's requirements.
CPU and Memory: Allocate the necessary CPU and memory resources for your container app.
Ingress Settings:Ingress: Enable or disable ingress based on your application's needs. You can accept the default settings.External Traffic: Specifies whether the container app should accept external traffic. You can accept the default settings.Target Port: Enable or disable ingress based on your application's needs. Configure the target port to8080.
Ingress: Enable or disable ingress based on your application's needs. You can accept the default settings.
External Traffic: Specifies whether the container app should accept external traffic. You can accept the default settings.
Target Port: Enable or disable ingress based on your application's needs. Configure the target port to8080.
8080
Other:Env Variables: Set any environment variables required by your application.Min Replicas: The minimum number of replicas for your container app. You can accept the default settings.Max Replicas: The maximum number of replicas for your container app. You can accept the default settings.
Env Variables: Set any environment variables required by your application.
Min Replicas: The minimum number of replicas for your container app. You can accept the default settings.
Max Replicas: The maximum number of replicas for your container app. You can accept the default settings.

SelectOK. The toolkit displays a status message when the app deployment succeeds.
SelectOK. The toolkit displays a status message when the app deployment succeeds.
After the deployment finishes, the Azure Toolkit for IntelliJ displays a notification. SelectBrowseto open the deployed app in a browser.
After the deployment finishes, the Azure Toolkit for IntelliJ displays a notification. SelectBrowseto open the deployed app in a browser.

In the browser's address bar, append the/albumspath to the end of the app URL to view data from a sample API request.
In the browser's address bar, append the/albumspath to the end of the app URL to view data from a sample API request.
/albums
Right-click the Container Apps environment you created and then, in Azure Explorer, selectCreate>Container App. Enter the following information:Subscription: The Azure subscription to use.Resource Group: The resource group for your container apps. Select one of the following options:Create New: Specifies that you want to create a new resource group.Use Existing: Specifies that you must select from a list of resource groups that are associated with your Azure account.Environment: The Container Apps environment to use.Name: The name for a new container app.Deployment:Source: SelectArtifact.Artifact: Select the artifact file from your local machine by first selecting the folder button.Container Resource Allocation:Workload Profile: Select the appropriate workload profile, based on your application's requirements.CPU and Memory: Allocate the necessary CPU and memory resources for your container app.Ingress Settings:Ingress: Enable or disable ingress based on your application's needs. You can accept the default settings.External Traffic: Specifies whether the container app should accept external traffic. You can accept the default settings.Target Port: Enable or disable ingress based on your application's needs. Configure the target port to8080.Other:Env Variables: Set any environment variables required by your application.Min Replicas: The minimum number of replicas for your container app. You can accept the default settings.Max Replicas: The maximum number of replicas for your container app. You can accept the default settings.
Right-click the Container Apps environment you created and then, in Azure Explorer, selectCreate>Container App. Enter the following information:
Subscription: The Azure subscription to use.
Resource Group: The resource group for your container apps. Select one of the following options:Create New: Specifies that you want to create a new resource group.Use Existing: Specifies that you must select from a list of resource groups that are associated with your Azure account.
Create New: Specifies that you want to create a new resource group.
Use Existing: Specifies that you must select from a list of resource groups that are associated with your Azure account.
Environment: The Container Apps environment to use.
Name: The name for a new container app.
Deployment:Source: SelectArtifact.Artifact: Select the artifact file from your local machine by first selecting the folder button.
Source: SelectArtifact.
Artifact: Select the artifact file from your local machine by first selecting the folder button.
Container Resource Allocation:Workload Profile: Select the appropriate workload profile, based on your application's requirements.CPU and Memory: Allocate the necessary CPU and memory resources for your container app.
Workload Profile: Select the appropriate workload profile, based on your application's requirements.
CPU and Memory: Allocate the necessary CPU and memory resources for your container app.
Ingress Settings:Ingress: Enable or disable ingress based on your application's needs. You can accept the default settings.External Traffic: Specifies whether the container app should accept external traffic. You can accept the default settings.Target Port: Enable or disable ingress based on your application's needs. Configure the target port to8080.
Ingress: Enable or disable ingress based on your application's needs. You can accept the default settings.
External Traffic: Specifies whether the container app should accept external traffic. You can accept the default settings.
Target Port: Enable or disable ingress based on your application's needs. Configure the target port to8080.
8080
Other:Env Variables: Set any environment variables required by your application.Min Replicas: The minimum number of replicas for your container app. You can accept the default settings.Max Replicas: The maximum number of replicas for your container app. You can accept the default settings.
Env Variables: Set any environment variables required by your application.
Min Replicas: The minimum number of replicas for your container app. You can accept the default settings.
Max Replicas: The maximum number of replicas for your container app. You can accept the default settings.

SelectOK. The toolkit displays a status message when the app deployment succeeds.
SelectOK. The toolkit displays a status message when the app deployment succeeds.
After the deployment finishes, the Azure Toolkit for IntelliJ displays a notification. SelectBrowseto open the deployed app in a browser.
After the deployment finishes, the Azure Toolkit for IntelliJ displays a notification. SelectBrowseto open the deployed app in a browser.

In the browser's address bar, append the/albumspath to the end of the app URL to view data from a sample API request.
In the browser's address bar, append the/albumspath to the end of the app URL to view data from a sample API request.
/albums
On theProjecttab, navigate to your project and selectDockerfile.
On theProjecttab, navigate to your project and selectDockerfile.

Select the Azure icon, and then selectDeploy Image to Container App.
Select the Azure icon, and then selectDeploy Image to Container App.

On theDeploy Image to Azure Container Appspage, enter the following information, and then selectRun:Module: The module to deploy.Container App: The container app to deploy to.Deployment:Source: Select theContainer Imageoption.Docker Host: The Docker host to use. You can accept the default.Dockerfile/Image: The path of the Dockerfile. You can accept the default.Container Registry: The container registry to use.Repository Name: The repository name to use under your container registry.Tag Name: The tag name to use under your container registry.Ingress Settings:Ingress: Enable or disable ingress based on your application's needs. You can accept the default settings.External Traffic: Specifies whether the container app should accept external traffic. You can accept the default settings.Target Port: Enable or disable ingress based on your application's needs. Open port8080in this step.Other:Env Variables: Set any environment variables required by your application.
On theDeploy Image to Azure Container Appspage, enter the following information, and then selectRun:
Module: The module to deploy.
Container App: The container app to deploy to.
Deployment:Source: Select theContainer Imageoption.Docker Host: The Docker host to use. You can accept the default.Dockerfile/Image: The path of the Dockerfile. You can accept the default.Container Registry: The container registry to use.Repository Name: The repository name to use under your container registry.Tag Name: The tag name to use under your container registry.
Source: Select theContainer Imageoption.
Docker Host: The Docker host to use. You can accept the default.
Dockerfile/Image: The path of the Dockerfile. You can accept the default.
Container Registry: The container registry to use.
Repository Name: The repository name to use under your container registry.
Tag Name: The tag name to use under your container registry.
Ingress Settings:Ingress: Enable or disable ingress based on your application's needs. You can accept the default settings.External Traffic: Specifies whether the container app should accept external traffic. You can accept the default settings.Target Port: Enable or disable ingress based on your application's needs. Open port8080in this step.
Ingress: Enable or disable ingress based on your application's needs. You can accept the default settings.
External Traffic: Specifies whether the container app should accept external traffic. You can accept the default settings.
Target Port: Enable or disable ingress based on your application's needs. Open port8080in this step.
8080
Other:Env Variables: Set any environment variables required by your application.
Env Variables: Set any environment variables required by your application.

SelectOK. The toolkit displays a status message when the app deployment succeeds.
SelectOK. The toolkit displays a status message when the app deployment succeeds.
After the deployment finishes, the Azure Toolkit for IntelliJ displays a notification. SelectBrowseto open the deployed app in a browser.
After the deployment finishes, the Azure Toolkit for IntelliJ displays a notification. SelectBrowseto open the deployed app in a browser.

In the browser's address bar, append the/albumspath to the end of the app URL to view data from a sample API request.
In the browser's address bar, append the/albumspath to the end of the app URL to view data from a sample API request.
/albums
Clean up resources
To clean up and remove a Container Apps resource, you can delete the resource or resource group. Deleting the resource group also deletes any other resources associated with it. Use the following steps to clean up resources:
To delete your Container Apps resources, from theAzure Explorersidebar, locate theContainer Apps Environmentitem.
Right-click the Container Apps service you want to delete, and then selectDelete.
To delete your resource group, use the Azure portal to manually delete the resources under your subscription.
Next steps
Java on Azure Container Apps overview
Feedback
Was this page helpful?
Additional resources