Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Mount Azure Storage as a local share in App Service
Article
2025-03-06
23 contributors
In this article
Azure Storage is Microsoft's cloud storage solution for modern data storage scenarios. Azure Storage offers highly available, massively scalable, durable, and secure storage for data objects in the cloud. This guide shows how to mount Azure Storage Files as a network share in Windows code (noncontainer) in Azure App Service.
Azure Storage supportsAzure Files SharesandPremium Files Sharesfor App Service. Azure Storage isn't the default storage for App Service. It's billed separately. You can alsoconfigure Azure Storage in an ARM template.
The benefits of custom-mounted storage include:
Configure persistent storage for your App Service app and manage the storage separately.
Make static content like video and images readily available for your App Service app.
Write application log files or archive older application logs to Azure File shares.
Share content across multiple apps or with other Azure services.
The following features are supported for Windows code:
Secured access to storage accounts with key vault,private endpoints, andservice endpoints(when you usevirtual network integration).
Azure Files (read/write).
Up to five mount points per app.
Mount Azure Storage file shares using/mounts/<path-name>.
Here are the three options to mount Azure storage to your app:
Prerequisites
Basic
Access Key
Key Vault
An existing Windows code app in App Service.
An Azure file share.
Files uploaded to the Azure File share.
An existing Windows code app in App Service.
An Azure file share.
Files uploaded to the Azure File share.
An existing Windows code app in App Service.
An Azure file share.
Files uploaded to the Azure File share.
AnAzure Key Vaultinstance that usesvault access policyand asecret, which is required to configure the Key Vault with Azure Storage.
Limitations
Storage firewallis supported only throughprivate endpointsandservice endpointswhen you usevirtual network integration.
Azure blobs aren't supported when you configure Azure storage mounts for Windows code apps deployed to App Service.
FTP/FTPS access to mounted storage isn't supported. UseAzure Storage Explorer.
Mapping/mounts,mounts/name1/name2,/, and/mounts/name.ext/to custom-mounted storage isn't supported. You can only use/mounts/pathnamefor mounting custom storage to your web app.
Storage mounts aren't included inbackups. Be sure to follow best practices to back up Azure Storage accounts.
With virtual network integration on your app, the mounted drive uses an RFC1918 IP address and not an IP address from your virtual network.
Prepare for mounting
Basic
Access Key
Key Vault
No extra steps are required because the portal gets and stores the access key for you.
You need to obtain the access key from your storage account.
Before you can mount storage using Key Vault access, you need to get the Key Vault secret and add it as an application setting in your app.
In the Azure portal, browse to your Key Vault. SelectObjects>Secrets. Copy theSecret Identifierto your clipboard.
In the Azure portal, browse to your Key Vault. SelectObjects>Secrets. Copy theSecret Identifierto your clipboard.

Navigate back to your app, and follow thekey vault referenceto create anapplication settingusing theSecret Identifier.Example app setting value:@Microsoft.KeyVault(SecretUri=https://mykeyvault.vault.azure.net/secrets/mykeyvaultsecret/aaaaaaaa0b0b1c1c2d2d333333333333)
Navigate back to your app, and follow thekey vault referenceto create anapplication settingusing theSecret Identifier.
Example app setting value:@Microsoft.KeyVault(SecretUri=https://mykeyvault.vault.azure.net/secrets/mykeyvaultsecret/aaaaaaaa0b0b1c1c2d2d333333333333)
@Microsoft.KeyVault(SecretUri=https://mykeyvault.vault.azure.net/secrets/mykeyvaultsecret/aaaaaaaa0b0b1c1c2d2d333333333333)
Now you're ready to use Key Vault to access your storage account.
Mount storage to Windows code
Azure portal
Azure portal
Azure portal
Azure CLI
Azure CLI
Azure CLI
In theAzure portal, navigate to the app.
In theAzure portal, navigate to the app.
From the left navigation, selectSettings>Configuration. SelectPath mappings, thenNew Azure Storage Mount.
From the left navigation, selectSettings>Configuration. SelectPath mappings, thenNew Azure Storage Mount.
Configure the storage mount according to the following table. When finished, selectOK.SettingDescriptionNameName of the mount configuration. Spaces aren't allowed.Configuration optionsSelectBasicif the storage account doesn't useprivate endpointsorAzure Key Vault. Otherwise, selectAdvanced.Storage accountsAzure Storage account. It must contain an Azure Files share.Share nameFiles share to mount.Storage accessSelectKey vault referencefor Azure Key Vault. Otherwise, selectManual inputAccess key(Advanced only)Access keyfor your storage account.Mount pathDirectory inside your app service that you want to mount. Only/mounts/pathnameis supported.Application settingsSelect the app setting with the Azure Key Vault secret.Deployment slot settingWhen selected, the storage mount settings also apply to deployment slots.
Configure the storage mount according to the following table. When finished, selectOK.
In theAzure portal, navigate to the app.
In theAzure portal, navigate to the app.
From the left navigation, selectSettings>Configuration. SelectPath mappings, thenNew Azure Storage Mount.
From the left navigation, selectSettings>Configuration. SelectPath mappings, thenNew Azure Storage Mount.
Configure the storage mount according to the following table. When finished, selectOK.SettingDescriptionNameName of the mount configuration. Spaces aren't allowed.Configuration optionsSelectAdvanced.Storage accountsAzure Storage account.Storage typeSelect the type based on the storage you want to mount. Azure Blobs only supports read-only access.Storage containerorShare nameFiles share or Blobs container to mount.Storage accessSelectManual input.Access keyEnter theaccess keyfor your storage account.Mount pathDirectory inside the Linux container to mount to Azure Storage. Don't use/or/home.Deployment slot settingWhen selected, the storage mount settings also apply to deployment slots.
Configure the storage mount according to the following table. When finished, selectOK.
In theAzure portal, navigate to the app.
In theAzure portal, navigate to the app.
From the left navigation, selectSettings>Configuration. SelectPath mappings, thenNew Azure Storage Mount.
From the left navigation, selectSettings>Configuration. SelectPath mappings, thenNew Azure Storage Mount.
Configure the storage mount according to the following table. When finished, selectOK.SettingDescriptionNameName of the mount configuration. Spaces aren't allowed.Configuration optionsSelectBasicif the storage account doesn't useservice endpoints,private endpoints, orAzure Key Vault. Otherwise, selectAdvanced.Storage accountsAzure Storage account.Storage typeSelect the type based on the storage you want to mount. Azure Blobs only supports read-only access.Storage containerorShare nameFiles share or Blobs container to mount.Storage accessSelectKey vault reference.Application settingsSelect the existing app setting with the Azure Key Vault secret.Mount pathDirectory inside the Linux container to mount to Azure Storage. Don't use/or/home.Deployment slot settingWhen checked, the storage mount settings also apply to deployment slots.
Configure the storage mount according to the following table. When finished, selectOK.
To access the storage mount,grant your app access to the Key Vault.
To access the storage mount,grant your app access to the Key Vault.
Using Azure CLI to mount storage requires you to provide the storage access key.
Use theaz webapp config storage-account addcommand. For example:
az webapp config storage-account add --resource-group <group-name> --name <app-name> --custom-id <custom-id> --storage-type AzureFiles --share-name <share-name> --account-name <storage-account-name> --access-key "<access-key>" --mount-path <mount-path-directory>
az webapp config storage-account add --resource-group <group-name> --name <app-name> --custom-id <custom-id> --storage-type AzureFiles --share-name <share-name> --account-name <storage-account-name> --access-key "<access-key>" --mount-path <mount-path-directory>
Verify your storage is mounted by running the following command:
az webapp config storage-account list --resource-group <resource-group> --name <app-name>
az webapp config storage-account list --resource-group <resource-group> --name <app-name>
The Azure CLI doesn't currently support mounting storage with Key Vault access. Use the Azure portal instead.
Note
Adding, editing, or deleting a storage mount causes the app to restart.
Best practices
Azure Storage mounts can be configured as a virtual directory to serve static content. To configure the virtual directory, in the left navigation selectSettings>Configuration. Then selectPath mappings, thenNew virtual application or directory. Set thePhysical pathto theMount pathdefined on the Azure Storage mount.
Azure Storage mounts can be configured as a virtual directory to serve static content. To configure the virtual directory, in the left navigation selectSettings>Configuration. Then selectPath mappings, thenNew virtual application or directory. Set thePhysical pathto theMount pathdefined on the Azure Storage mount.
To avoid latency issues, place the app and the Azure Storage account in the same region. If you grant access from App Service IP addresses in theAzure Storage firewall configurationwhen the app and Azure Storage account are in the same region, these IP restrictions aren't honored.
To avoid latency issues, place the app and the Azure Storage account in the same region. If you grant access from App Service IP addresses in theAzure Storage firewall configurationwhen the app and Azure Storage account are in the same region, these IP restrictions aren't honored.
In the Azure Storage account, avoidregenerating the access keythat you use to mount the storage in the app. The storage account contains two keys. Azure App Services stores an Azure storage account key. Use a stepwise approach to ensure that the storage mount remains available to the app during key regeneration. For example, assuming that you usedkey1to configure storage mount in your app:Regeneratekey2.In the storage mount configuration, update the access the key to use the regeneratedkey2.Regeneratekey1.
In the Azure Storage account, avoidregenerating the access keythat you use to mount the storage in the app. The storage account contains two keys. Azure App Services stores an Azure storage account key. Use a stepwise approach to ensure that the storage mount remains available to the app during key regeneration. For example, assuming that you usedkey1to configure storage mount in your app:
Regeneratekey2.
In the storage mount configuration, update the access the key to use the regeneratedkey2.
Regeneratekey1.
If you delete an Azure Storage account, container, or share, remove the corresponding storage mount configuration in the app to avoid possible error scenarios.
If you delete an Azure Storage account, container, or share, remove the corresponding storage mount configuration in the app to avoid possible error scenarios.
The mounted Azure Storage account can be either Standard or Premium performance tier. Based on the app capacity and throughput requirements, choose the appropriate performance tier for the storage account. See thescalability and performance targets for Files.
The mounted Azure Storage account can be either Standard or Premium performance tier. Based on the app capacity and throughput requirements, choose the appropriate performance tier for the storage account. See thescalability and performance targets for Files.
If your appscales to multiple instances, all the instances connect to the same mounted Azure Storage account. To avoid performance bottlenecks and throughput issues, choose the appropriate performance tier for the storage account.
If your appscales to multiple instances, all the instances connect to the same mounted Azure Storage account. To avoid performance bottlenecks and throughput issues, choose the appropriate performance tier for the storage account.
We don't recommend that you use storage mounts for local databases, such as SQLite, or for any other applications and components that rely on file handles and locks.
We don't recommend that you use storage mounts for local databases, such as SQLite, or for any other applications and components that rely on file handles and locks.
If youinitiate a storage failoverwhen the storage account is mounted to the app, the mount doesn't connect until the app is restarted or the storage mount is removed and added again.
If youinitiate a storage failoverwhen the storage account is mounted to the app, the mount doesn't connect until the app is restarted or the storage mount is removed and added again.
When virtual network integration is used, ensure app setting,WEBSITE_CONTENTOVERVNETis set to1and the following ports are open: Azure Files: 80 and 445.
When virtual network integration is used, ensure app setting,WEBSITE_CONTENTOVERVNETis set to1and the following ports are open: Azure Files: 80 and 445.
WEBSITE_CONTENTOVERVNET
1
The mounted Azure Storage account can be either Standard or Premium performance tier. Based on the app capacity and throughput requirements, choose the appropriate performance tier for the storage account. Seethe scalability and performance targets for Files.
The mounted Azure Storage account can be either Standard or Premium performance tier. Based on the app capacity and throughput requirements, choose the appropriate performance tier for the storage account. Seethe scalability and performance targets for Files.
Next step
Migrate .NET apps to Azure App Service.
Azure Storage is Microsoft's cloud storage solution for modern data storage scenarios. Azure Storage offers highly available, massively scalable, durable, and secure storage for data objects in the cloud. This guide shows how to mount Azure Storage Files as a network share in a Windows container in App Service.
Azure Storage supportsAzure Files SharesandPremium Files Shares. Azure Storage isn't the default storage for App Service. It's billed separately. You can alsoconfigure Azure Storage in an ARM template.
The benefits of custom-mounted storage include:
Configure persistent storage for your App Service app and manage the storage separately.
Make static content like video and images readily available for your App Service app.
Write application log files or archive older application log to Azure File shares.
Share content across multiple apps or with other Azure services.
Mount Azure Storage in a Windows container, including Isolated. For more information, seeApp Service environment v3.
The following features are supported for Windows containers:
Secured access to storage accounts with key vault,private endpoints, andservice endpointswhen you usevirtual network integration.
Azure Files (read/write).
Up to five mount points per app.
Drive letter assignments (C:toZ:).
Here are the three options to mount Azure storage to your app:
Prerequisites
Basic
Access Key
Key Vault
An existing Windows container app in App Service.
An Azure file share.
Files uploaded to the Azure File share.
An existing Windows container app in App Service.
An Azure file share.
Files uploaded to the Azure File share.
An existing Windows container app in App Service.
An Azure file share.
Files uploaded to the Azure File share.
AnAzure Key Vaultinstance that usesvault access policyand asecret, which is required to configure the Key Vault with Azure Storage.
Limitations
Azure blobs aren't supported.
Storage firewallis supported only throughprivate endpointsandservice endpointswhen you usevirtual network integration.
FTP/FTPS access to mounted storage not supported (useAzure Storage Explorer).
Mapping[C-Z]:\,[C-Z]:\home,/, and/hometo custom-mounted storage isn't supported.
Storage mounts aren't backed up when youback up your app. Be sure to follow best practices to back up the Azure Storage accounts.
With virtual network integration on your app, the mounted drive uses an RFC1918 IP address and not an IP address from your virtual network.
Prepare for mounting
Basic
Access Key
Key Vault
No extra steps are required because the portal gets and stores the access key for you.
You need to obtain the access key from your storage account.
Before you can mount storage using Key Vault access, you need to get the Key Vault secret and add it as an application setting in your app.
In the Azure portal, browse to your Key Vault. SelectObjects>Secrets. Copy theSecret Identifierto your clipboard.
In the Azure portal, browse to your Key Vault. SelectObjects>Secrets. Copy theSecret Identifierto your clipboard.

Navigate back to your app and follow thekey vault referenceto create anapplication settingusing theSecret Identifier.Example app setting value:@Microsoft.KeyVault(SecretUri=https://mykeyvault.vault.azure.net/secrets/mykeyvaultsecret/aaaaaaaa0b0b1c1c2d2d333333333333)
Navigate back to your app and follow thekey vault referenceto create anapplication settingusing theSecret Identifier.
Example app setting value:@Microsoft.KeyVault(SecretUri=https://mykeyvault.vault.azure.net/secrets/mykeyvaultsecret/aaaaaaaa0b0b1c1c2d2d333333333333)
@Microsoft.KeyVault(SecretUri=https://mykeyvault.vault.azure.net/secrets/mykeyvaultsecret/aaaaaaaa0b0b1c1c2d2d333333333333)
Now you're ready to use Key Vault to access your storage account.
Mount storage to Windows container
Azure portal
Azure portal
Azure portal
Azure CLI
Azure CLI
Azure CLI
In theAzure portal, navigate to the app.
In theAzure portal, navigate to the app.
From the left navigation, selectSettings>Configuration. SelectPath mappings, thenNew Azure Storage Mount.
From the left navigation, selectSettings>Configuration. SelectPath mappings, thenNew Azure Storage Mount.
Configure the storage mount according to the following table. When finished, selectOK.SettingDescriptionNameName of the mount configuration. Spaces aren't allowed.Configuration optionsSelectBasicStorage accountsAzure Storage account. It must contain an Azure Files share.Share nameFiles share to mount.Mount pathDirectory inside your Windows container that you want to mount. Don't use a root directory ([C-Z]:* or/) or thehomedirectory ([C-Z]:\home* or/home).Deployment slot settingWhen selected, the storage mount settings also apply to deployment slots.
Configure the storage mount according to the following table. When finished, selectOK.
In theAzure portal, navigate to the app.
In theAzure portal, navigate to the app.
From the left navigation, selectSettings>Configuration. SelectPath mappings, thenNew Azure Storage Mount.
From the left navigation, selectSettings>Configuration. SelectPath mappings, thenNew Azure Storage Mount.
Configure the storage mount according to the following table. When finished, selectOK.SettingDescriptionNameName of the mount configuration. Spaces aren't allowed.Configuration optionsSelectAdvanced.Storage accountsAzure Storage account. It must contain an Azure Files share.Share nameFiles share to mount.Access key(Advanced only)Access keyfor your storage account.Mount pathDirectory inside your Windows container that you want to mount. Don't use a root directory ([C-Z]:* or/) or thehomedirectory ([C-Z]:\home* or/home).Application settingsSelect the app setting with the Azure Key Vault secret.Deployment slot settingWhen selected, the storage mount settings also apply to deployment slots.
Configure the storage mount according to the following table. When finished, selectOK.
In theAzure portal, navigate to the app.
In theAzure portal, navigate to the app.
From the left navigation, selectSettings>Configuration. SelectPath mappings, thenNew Azure Storage Mount.
From the left navigation, selectSettings>Configuration. SelectPath mappings, thenNew Azure Storage Mount.
Configure the storage mount according to the following table. When finished, selectOK.SettingDescriptionNameName of the mount configuration. Spaces aren't allowed.Configuration optionsIf the storage account doesn't useservice endpoints,private endpoints, orAzure Key Vault, selectBasic. Otherwise, selectAdvanced.Storage accountsAzure Storage account.Storage typeSelect the type based on the storage you want to mount. Azure Blobs only supports read-only access.Storage containerorShare nameFiles share or Blobs container to mount.Storage accessSelectKey vault reference.Application settingsSelect the existing app setting that's configured with the Azure Key Vault secret.Mount pathDirectory inside the Linux container to mount to Azure Storage. Don't use/or/home.Deployment slot settingWhen selected, the storage mount settings also apply to deployment slots.
Configure the storage mount according to the following table. When finished, selectOK.
To access the storage mount,grant your app access to the Key Vault.
To access the storage mount,grant your app access to the Key Vault.
Using Azure CLI to mount storage requires you to provide the storage access key.
Use theaz webapp config storage-account addcommand. For example:
az webapp config storage-account add --resource-group <group-name> --name <app-name> --custom-id <custom-id> --storage-type AzureFiles --share-name <share-name> --account-name <storage-account-name> --access-key "<access-key>" --mount-path <mount-path-directory>
az webapp config storage-account add --resource-group <group-name> --name <app-name> --custom-id <custom-id> --storage-type AzureFiles --share-name <share-name> --account-name <storage-account-name> --access-key "<access-key>" --mount-path <mount-path-directory>
--storage-typemust beAzureFilesfor Windows containers.
--storage-type
AzureFiles
mount-path-directorymust be in the form/path/to/diror[C-Z]:\path\to\dir.
mount-path-directory
Verify your storage is mounted by running the following command:
az webapp config storage-account list --resource-group <resource-group> --name <app-name>
az webapp config storage-account list --resource-group <resource-group> --name <app-name>
The Azure CLI doesn't currently support mounting storage with Key Vault access. Use the portal instead.
Note
Adding, editing, or deleting a storage mount causes the app to restart.
Best practices
To avoid latency issues, place the app and the Azure Storage account in the same region. If you grant access from App Service IP addresses in theAzure Storage firewall configurationwhen the app and Azure Storage account are in the same region, these IP restrictions aren't honored.
To avoid latency issues, place the app and the Azure Storage account in the same region. If you grant access from App Service IP addresses in theAzure Storage firewall configurationwhen the app and Azure Storage account are in the same region, these IP restrictions aren't honored.
In the Azure Storage account, avoidregenerating the access keythat you use to mount the storage in the app. The storage account contains two keys. Azure App Services stores an Azure storage account key. Use a stepwise approach to ensure that the storage mount remains available to the app during key regeneration. For example, assuming that you usedkey1to configure storage mount in your app:Regeneratekey2.In the storage mount configuration, update the access the key to use the regeneratedkey2.Regeneratekey1.
In the Azure Storage account, avoidregenerating the access keythat you use to mount the storage in the app. The storage account contains two keys. Azure App Services stores an Azure storage account key. Use a stepwise approach to ensure that the storage mount remains available to the app during key regeneration. For example, assuming that you usedkey1to configure storage mount in your app:
Regeneratekey2.
In the storage mount configuration, update the access the key to use the regeneratedkey2.
Regeneratekey1.
If you delete an Azure Storage account, container, or share, remove the corresponding storage mount configuration in the app to avoid possible error scenarios.
If you delete an Azure Storage account, container, or share, remove the corresponding storage mount configuration in the app to avoid possible error scenarios.
The mounted Azure Storage account can be either Standard or Premium performance tier. Based on the app capacity and throughput requirements, choose the appropriate performance tier for the storage account. See thescalability and performance targets for Files.
The mounted Azure Storage account can be either Standard or Premium performance tier. Based on the app capacity and throughput requirements, choose the appropriate performance tier for the storage account. See thescalability and performance targets for Files.
If your appscales to multiple instances, all the instances connect to the same mounted Azure Storage account. To avoid performance bottlenecks and throughput issues, choose the appropriate performance tier for the storage account.
If your appscales to multiple instances, all the instances connect to the same mounted Azure Storage account. To avoid performance bottlenecks and throughput issues, choose the appropriate performance tier for the storage account.
We don't recommend that you use storage mounts for local databases, such as SQLite, or for any other applications and components that rely on file handles and locks.
We don't recommend that you use storage mounts for local databases, such as SQLite, or for any other applications and components that rely on file handles and locks.
Ensure ports 80 and 445 are open when using Azure Files with virtual network integration.
Ensure ports 80 and 445 are open when using Azure Files with virtual network integration.
If youinitiate a storage failoverwhen the storage account is mounted to the app, the mount doesn't connect until the app is restarted or the storage mount is removed and added again.
If youinitiate a storage failoverwhen the storage account is mounted to the app, the mount doesn't connect until the app is restarted or the storage mount is removed and added again.
Next step
Migrate custom software to Azure App Service using a custom container.
Note
NFSsupport is now available for App Service on Linux.
This guide shows how to mount Azure Storage as a network share in a built-in Linux container or a custom Linux container in App Service. Azure Storage is Microsoft's cloud storage solution for modern data storage scenarios. Azure Storage offers highly available, massively scalable, durable, and secure storage for data objects in the cloud. Azure Storage isn't the default storage for App Service. It's billed separately. You can alsoconfigure Azure Storage in an ARM template.
The benefits of custom-mounted storage include:
Configure persistent storage for your App Service app and manage the storage separately.
Make static content like video and images readily available for your App Service app.
Write application log files or archive older application log to Azure File shares.
Share content across multiple apps or with other Azure services.
Supports Azure FilesNFSand Azure FilesSMB.
Supports Azure Blobs (read-only).
Supports up to five mount points per app.
The limitations of custom-mounted storage include:
Storage firewallis supported only throughservice endpointsandprivate endpointswhen you usevirtual network integration.
FTP/FTPS access to custom-mounted storage isn't supported. UseAzure Storage Explorer.
Storage account shared access keys are the only means of authentication that are supported.Entra ID and RBAC Rolesaren't supported.
Azure CLI, Azure PowerShell, and Azure SDK support is in preview.
Mapping/or/hometo custom-mounted storage isn't supported.
Don't map the storage mount to/tmpor its subdirectories. This action can cause a time-out during app startup.
Azure Storage isn't supported withDocker Composescenarios.
Storage mounts aren't included inbackups. Be sure to follow best practices to back up the Azure Storage accounts.
NFS support is only available for App Service on Linux. NFS isn't supported for Windows code and Windows containers. The web app and storage account need to be configured on the same virtual network for NFS. The storage account used for file share should havePremiumperformance tier andFile storageas the Account Kind. Azure Key Vault isn't applicable when using the NFS protocol.
With virtual network integration on your app, the mounted drive uses an RFC1918 IP address and not an IP address from your virtual network.
Mounting options
You need to mount the storage to the app. Here are three mounting options for Azure storage:
Prerequisites
Basic
Access Key
Key Vault
An existingApp Service on Linux app.
AnAzure Storage account.
AnAzure file share and directory.
An existingApp Service on Linux app.
AnAzure Storage account.
AnAzure file share and directory.
An existingApp Service on Linux app.
AnAzure Storage account.
AnAzure file share and directory.
AnAzure Key Vaultinstance that usesvault access policyand asecret, which is required to configure the Key Vault with Azure Storage.
Prepare for mounting
Basic
Access Key
Key Vault
No extra steps are required because the portal gets and stores the access key for you.
You need to obtain the access key from your storage account.
Before you can mount storage using Key Vault access, you need to get the Key Vault secret and add it as an application setting in your app.
In the Azure portal, browse to your Key Vault. SelectObjects>Secrets. Copy theSecret Identifierto your clipboard.
In the Azure portal, browse to your Key Vault. SelectObjects>Secrets. Copy theSecret Identifierto your clipboard.

Back in your app, follow thekey vault referenceto create anapplication settingusing theSecret Identifier.Example app setting value:@Microsoft.KeyVault(SecretUri=https://mykeyvault.vault.azure.net/secrets/mykeyvaultsecret/aaaaaaaa0b0b1c1c2d2d333333333333)
Back in your app, follow thekey vault referenceto create anapplication settingusing theSecret Identifier.
Example app setting value:@Microsoft.KeyVault(SecretUri=https://mykeyvault.vault.azure.net/secrets/mykeyvaultsecret/aaaaaaaa0b0b1c1c2d2d333333333333)
@Microsoft.KeyVault(SecretUri=https://mykeyvault.vault.azure.net/secrets/mykeyvaultsecret/aaaaaaaa0b0b1c1c2d2d333333333333)
Now you're ready to use Key Vault to access your storage account.
Mount storage to Linux container
The way that you mount storage depends on your storage access option and whether you use the portal or the Azure CLI.
Azure portal
Azure portal
Azure portal
Azure CLI
Azure CLI
Azure CLI
In theAzure portal, navigate to the app.
In theAzure portal, navigate to the app.
From the left navigation, selectSettings>Configuration. SelectPath mappings, thenNew Azure Storage Mount.
From the left navigation, selectSettings>Configuration. SelectPath mappings, thenNew Azure Storage Mount.
Configure the storage mount according to the following table. When finished, selectOK.SettingDescriptionNameName of the mount configuration. Spaces aren't allowed.Configuration optionsSelectBasicif the storage account doesn't useservice endpoints,private endpoints, orAzure Key Vault. Otherwise, selectAdvanced.Storage accountsAzure Storage account.Storage typeSelect the type based on the storage you want to mount. Azure Blobs only supports read-only access.Storage containerorShare nameFiles share or Blobs container to mount.Mount pathDirectory inside the Linux container to mount to Azure Storage. Don't use/or/home.Deployment slot settingWhen checked, the storage mount settings also apply to deployment slots.
Configure the storage mount according to the following table. When finished, selectOK.
In theAzure portal, navigate to the app.
In theAzure portal, navigate to the app.
From the left navigation, selectSettings>Configuration. SelectPath mappings, thenNew Azure Storage Mount.
From the left navigation, selectSettings>Configuration. SelectPath mappings, thenNew Azure Storage Mount.
Configure the storage mount according to the following table. When finished, selectOK.SettingDescriptionNameName of the mount configuration. Spaces aren't allowed.Configuration optionsSelectAdvanced.Storage accountsAzure Storage account.Storage typeSelect the type based on the storage you want to mount. Azure Blobs only supports read-only access.Storage containerorShare nameFiles share or Blobs container to mount.Storage accessSelectManual input.Access keyEnter theaccess keyfor your storage account.Mount pathDirectory inside the Linux container to mount to Azure Storage. Don't use/or/home.Deployment slot settingWhen selected, the storage mount settings also apply to deployment slots.
Configure the storage mount according to the following table. When finished, selectOK.
In theAzure portal, navigate to the app.
In theAzure portal, navigate to the app.
From the left navigation, selectSettings>Configuration. SelectPath mappings, thenNew Azure Storage Mount.
From the left navigation, selectSettings>Configuration. SelectPath mappings, thenNew Azure Storage Mount.
Configure the storage mount according to the following table. When finished, selectOK.SettingDescriptionNameName of the mount configuration. Spaces aren't allowed.Configuration optionsSelectAdvanced.Storage accountsAzure Storage account.Storage typeSelect the type based on the storage you want to mount. Azure Blobs only supports read-only access.Storage containerorShare nameFiles share or Blobs container to mount.Storage accessSelectKey vault reference.Application settingsSelect the existing app setting that's configured with the Azure Key Vault secret.Mount pathDirectory inside the Linux container to mount to Azure Storage. Don't use/or/home.Deployment slot settingWhen selected, the storage mount settings also apply to deployment slots.
Configure the storage mount according to the following table. When finished, selectOK.
To access the storage mount,grant your app access to the Key Vault.
To access the storage mount,grant your app access to the Key Vault.
Using Azure CLI to mount storage requires you to provide the storage access key.
Use theaz webapp config storage-account addcommand. For example:
az webapp config storage-account add --resource-group <group-name> --name <app-name> --custom-id <custom-id> --storage-type AzureFiles --share-name <share-name> --account-name <storage-account-name> --access-key "<access-key>" --mount-path <mount-path-directory>
az webapp config storage-account add --resource-group <group-name> --name <app-name> --custom-id <custom-id> --storage-type AzureFiles --share-name <share-name> --account-name <storage-account-name> --access-key "<access-key>" --mount-path <mount-path-directory>
--storage-typecan beAzureBloborAzureFiles.AzureBlobis read-only.
--storage-type
AzureBlob
AzureFiles
AzureBlob
--mount-pathis the directory inside the Linux container to mount to Azure Storage. Don't use/, the root directory.
--mount-path
Verify your storage is mounted by running the following command:
az webapp config storage-account list --resource-group <resource-group> --name <app-name>
az webapp config storage-account list --resource-group <resource-group> --name <app-name>
The Azure CLI doesn't currently support mounting storage with Key Vault access. Use the portal instead.
Note
Adding, editing, or deleting a storage mount causes the app to restart.
Validate the mounted storage
To validate that the Azure Storage is mounted successfully for the app:
Open an SSH sessioninto the container.
Open an SSH sessioninto the container.
In the SSH terminal, execute the following command:df âh
In the SSH terminal, execute the following command:
df âh
df âh
Check if the storage share is mounted. If it's not present, there's an issue with mounting the storage share.
Check if the storage share is mounted. If it's not present, there's an issue with mounting the storage share.
Check latency or general reachability of the storage mount with the following command:tcpping Storageaccount.file.core.windows.net
Check latency or general reachability of the storage mount with the following command:
tcpping Storageaccount.file.core.windows.net
tcpping Storageaccount.file.core.windows.net
Best practices
Performance
To avoid latency issues, place the app and the Azure Storage account in the same region. If you grant access from App Service IP addresses in theAzure Storage firewall configurationwhen the app and Azure Storage account are in the same region, then these IP restrictions aren't honored.
To avoid latency issues, place the app and the Azure Storage account in the same region. If you grant access from App Service IP addresses in theAzure Storage firewall configurationwhen the app and Azure Storage account are in the same region, then these IP restrictions aren't honored.
The mounted Azure Storage account can be either Standard or Premium performance tier. Based on the app capacity and throughput requirements, choose the appropriate performance tier for the storage account. See the scalability and performance targets that correspond to the storage type:FilesandBlobs.
The mounted Azure Storage account can be either Standard or Premium performance tier. Based on the app capacity and throughput requirements, choose the appropriate performance tier for the storage account. See the scalability and performance targets that correspond to the storage type:FilesandBlobs.
If your appscales to multiple instances, all the instances connect to the same mounted Azure Storage account. To avoid performance bottlenecks and throughput issues, choose the appropriate performance tier for the storage account.
If your appscales to multiple instances, all the instances connect to the same mounted Azure Storage account. To avoid performance bottlenecks and throughput issues, choose the appropriate performance tier for the storage account.
Security
In the Azure Storage account, avoidregenerating the access keythat you use to mount the storage in the app. The storage account contains two keys. Azure App Services stores an Azure storage account key. Use a stepwise approach to ensure that the storage mount remains available to the app during key regeneration. For example, assuming that you usedkey1to configure storage mount in your app:Regeneratekey2.In the storage mount configuration, update the access the key to use the regeneratedkey2.Regeneratekey1.
In the Azure Storage account, avoidregenerating the access keythat you use to mount the storage in the app. The storage account contains two keys. Azure App Services stores an Azure storage account key. Use a stepwise approach to ensure that the storage mount remains available to the app during key regeneration. For example, assuming that you usedkey1to configure storage mount in your app:
Regeneratekey2.
In the storage mount configuration, update the access the key to use the regeneratedkey2.
Regeneratekey1.
Configuration
If you need to use a real time file system, where you expect changes to alter, add, or remove files quickly, use Azure Files as the storage type when you mount storage. When files are static and you don't expect them to change, use Azure Blob.
Troubleshooting
The mount directory in the custom container should be empty. Any content stored at this path is deleted when the Azure Storage is mounted, if you specify a directory under/home, for example. If you migrate files for an existing app, make a backup of the app and its content before you begin.
If you delete an Azure Storage account, container, or share, remove the corresponding storage mount configuration in the app to avoid possible error scenarios.
We don't recommend that you use storage mounts for local databases, such as SQLite, or for any other applications and components that rely on file handles and locks.
Ensure the following ports are open when using virtual network integration: Azure Files: 80 and 445. Azure Blobs: 80 and 443.
If youinitiate a storage failoverwhen the storage account is mounted to the app, the mount doesn't connect until the app is restarted or the storage mount is removed and added again.
Next step
Configure a custom container.
Video: How to mount Azure Storage as a local share.
Feedback
Was this page helpful?
Additional resources