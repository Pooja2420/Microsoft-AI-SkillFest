Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Validate GraphQL request
Article
2025-02-16
1 contributor
In this article
APPLIES TO: All API Management tiers
Thevalidate-graphql-requestpolicy validates the GraphQL request and authorizes access to specific query paths in a GraphQL API. An invalid query is a "request error". Authorization is only done for valid requests.
validate-graphql-request
Note
Set the policy's elements and child elements in the order provided in the policy statement. Learn more abouthow to set or edit API Management policies.
Policy statement
<validate-graphql-request error-variable-name="variable name" max-size="size in bytes" max-depth="query depth">
    <authorize>
        <rule path="query path, for example: '/listUsers' or '/__*'" action="string or policy expression that evaluates to 'allow | remove | reject | ignore'" />
    </authorize>
</validate-graphql-request>
<validate-graphql-request error-variable-name="variable name" max-size="size in bytes" max-depth="query depth">
    <authorize>
        <rule path="query path, for example: '/listUsers' or '/__*'" action="string or policy expression that evaluates to 'allow | remove | reject | ignore'" />
    </authorize>
</validate-graphql-request>
Attributes
context.Variables
Elements
rule attributes
/type/field
Introspection system
The policy for path=/__*is theintrospectionsystem. You can use it to reject introspection requests (__schema,__type, etc.).
/__*
__schema
__type
Request actions
Available actions are described in the following table.
Usage
Policy sections:inbound
Policy scopes:global, workspace, product, API
Gateways:classic, v2, consumption, self-hosted, workspace
Usage notes
Configure the policy for apass-throughorsyntheticGraphQL API that has been imported to API Management.
Configure the policy for apass-throughorsyntheticGraphQL API that has been imported to API Management.
This policy can only be used once in a policy section.
This policy can only be used once in a policy section.
Because GraphQL queries use a flattened schema, permissions may be applied at any leaf node of an output type:Mutation, query, or subscriptionIndividual field in a type declarationPermissions may not be applied to:Input typesFragmentsUnionsInterfacesThe schema element
Because GraphQL queries use a flattened schema, permissions may be applied at any leaf node of an output type:
Mutation, query, or subscription
Individual field in a type declaration
Permissions may not be applied to:
Input types
Fragments
Unions
Interfaces
The schema element
The policy can validate GraphQL requests with up to 250 query fields across all levels.
The policy can validate GraphQL requests with up to 250 query fields across all levels.
Error handling
Failure to validate against the GraphQL schema, or a failure for the request's size or depth, is a request error and results in the request being failed with an errors block (but no data block).
Similar to theContext.LastErrorproperty, all GraphQL validation errors are automatically propagated in theGraphQLErrorsvariable. If the errors need to be propagated separately, you can specify an error variable name. Errors are pushed onto theerrorvariable and theGraphQLErrorsvariable.
Context.LastError
GraphQLErrors
error
GraphQLErrors
Examples
Query validation
This example applies the following validation and authorization rules to a GraphQL query:
Requests larger than 100 kb or with query depth greater than 4 are rejected.
Requests to the introspection system are rejected.
The/Missions/namefield is removed from requests containing more than two headers.
/Missions/name
<validate-graphql-request error-variable-name="name" max-size="102400" max-depth="4"> 
    <authorize>
        <rule path="/__*" action="reject" /> 
        <rule path="/Missions/name" action="@(context.Request.Headers.Count > 2 ? "remove" : "allow")" />
    </authorize>
</validate-graphql-request>
<validate-graphql-request error-variable-name="name" max-size="102400" max-depth="4"> 
    <authorize>
        <rule path="/__*" action="reject" /> 
        <rule path="/Missions/name" action="@(context.Request.Headers.Count > 2 ? "remove" : "allow")" />
    </authorize>
</validate-graphql-request>
Mutation validation
This example applies the following validation and authorization rules to a GraphQL mutation:
Requests larger than 100 kb or with query depth greater than 4 are rejected.
Requests to mutate thedeleteUserfield are denied except when the request is from IP address198.51.100.1.
deleteUser
198.51.100.1
<validate-graphql-request error-variable-name="name" max-size="102400" max-depth="4"> 
    <authorize>
        <rule path="/Mutation/deleteUser" action="@(context.Request.IpAddress <> "198.51.100.1" ? "deny" : "allow")" />
    </authorize>
</validate-graphql-request>
<validate-graphql-request error-variable-name="name" max-size="102400" max-depth="4"> 
    <authorize>
        <rule path="/Mutation/deleteUser" action="@(context.Request.IpAddress <> "198.51.100.1" ? "deny" : "allow")" />
    </authorize>
</validate-graphql-request>
Related policies
Content validation
Related content
For more information about working with policies, see:
Tutorial: Transform and protect your API
Policy referencefor a full list of policy statements and their settings
Policy expressions
Set or edit policies
Reuse policy configurations
Policy snippets repo
Azure API Management policy toolkit
Get Copilot assistance to create, explain, and troubleshoot policies
Feedback
Was this page helpful?
Additional resources