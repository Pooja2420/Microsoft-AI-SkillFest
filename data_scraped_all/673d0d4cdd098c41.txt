Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Perform data operations in Azure Logic Apps
Article
2025-04-02
3 contributors
In this article
Applies to:Azure Logic Apps (Consumption + Standard)
This how-to guide shows how you can work with data in your logic app workflow in the following ways:
Create a string or JavaScript Object Notation (JSON) object from multiple inputs that have different data types. You can then use this string as a single input, rather than repeatedly entering the same inputs.
Create user-friendly tokens from JavaScript Object Notation (JSON) object properties so that you can easily use those properties in your workflow.
Create an HTML or CSV table from an array.
Create an array from another array based on a specified filter or condition.
Create an array based on the specified properties for all the items in another array.
Create a string from all the items in an array and separate those items using a specified character.
Prerequisites
An Azure account and subscription. If you don't have a subscription,sign up for a free Azure account.
An Azure account and subscription. If you don't have a subscription,sign up for a free Azure account.
The logic app workflow where you want to perform the data operation. Both Consumption and Standard logic app workflows support the data operations described in this guide.All data operations are available only as actions. So, before you can use these actions, your workflow must already start with atriggeras the first step and include any other actions required to create the outputs that you want to use in the data operation.
The logic app workflow where you want to perform the data operation. Both Consumption and Standard logic app workflows support the data operations described in this guide.
All data operations are available only as actions. So, before you can use these actions, your workflow must already start with atriggeras the first step and include any other actions required to create the outputs that you want to use in the data operation.
Data operation actions
The following sections summarize the data operations you can use. The operations are organized based on the source data types that the operations work on, but each description appears alphabetically.
JSON actions
The following actions help you work with data in JavaScript Object Notation (JSON) format.
To create more complex JSON transformations, seePerform advanced JSON transformations with Liquid templates.
Array actions
The following actions help you work with data in arrays.

Compose action
To construct a single output such as a JSON object from multiple inputs, use the action namedCompose. Your inputs can have various types such as integers, Booleans, arrays, JSON objects, and any other native type that Azure Logic Apps supports, for example, binary and XML. You can then use the output in actions that follow after theComposeaction. TheComposeaction also helps you avoid repeatedly entering the same inputs while you build your logic app's workflow.
For example, you can construct a JSON message from multiple variables, such as string variables that store people's first names and last names, and an integer variable that stores people's ages. In this example, theComposeaction accepts the following inputs:
{ "age": <ageVar>, "fullName": "<lastNameVar>, <firstNameVar>" }
{ "age": <ageVar>, "fullName": "<lastNameVar>, <firstNameVar>" }
And creates the following output:
{"age":35,"fullName":"Owens,Sophia"}
{"age":35,"fullName":"Owens,Sophia"}
To try theComposeaction, follow these steps by using the workflow designer. Or, if you prefer working in the code view editor, you can copy the exampleComposeandInitialize variableaction definitions from this guide into your own logic app's underlying workflow definition:Data operation code examples - Compose. For more information about theComposeaction in the underlying JSON workflow definition, see theCompose action.
Consumption
Standard
In theAzure portalor Visual Studio Code, open your logic app workflow in the designer.This example uses the Azure portal and a sample workflow with theRecurrencetrigger followed by severalVariablesactions namedInitialize variable. These actions are set up to create two string variables and an integer variable.OperationProperties and valuesInitialize variable-Name: firstNameVar-Type: String-Value: SophiaInitialize variable-Name: lastNameVar-Type: String-Value: OwensInitialize variable-Name: ageVar-Type: Integer-Value: 35
In theAzure portalor Visual Studio Code, open your logic app workflow in the designer.
This example uses the Azure portal and a sample workflow with theRecurrencetrigger followed by severalVariablesactions namedInitialize variable. These actions are set up to create two string variables and an integer variable.

Follow these general steps to add theData Operationsaction namedCompose.
Follow these general steps to add theData Operationsaction namedCompose.
On the designer, select theComposeaction, if not already selected. In theInputsbox, enter the inputs to use for creating the output.For this example, follow these steps:In theInputsbox, enter the following sample JSON object, including the spacing as shown:{
    "age": ,
    "fullName": " , "
}In the JSON object, put your cursor in the corresponding locations, select the dynamic content list (lightning icon), and then select the corresponding variable from the list:JSON propertyVariableageageVarfullName"lastNameVar,firstNameVar"The following example shows both added and not yet added variables:The following example shows definitions added for two variables, and the process to add the third variable:
On the designer, select theComposeaction, if not already selected. In theInputsbox, enter the inputs to use for creating the output.
For this example, follow these steps:
In theInputsbox, enter the following sample JSON object, including the spacing as shown:{
    "age": ,
    "fullName": " , "
}
In theInputsbox, enter the following sample JSON object, including the spacing as shown:
{
    "age": ,
    "fullName": " , "
}
{
    "age": ,
    "fullName": " , "
}
In the JSON object, put your cursor in the corresponding locations, select the dynamic content list (lightning icon), and then select the corresponding variable from the list:JSON propertyVariableageageVarfullName"lastNameVar,firstNameVar"The following example shows both added and not yet added variables:The following example shows definitions added for two variables, and the process to add the third variable:
In the JSON object, put your cursor in the corresponding locations, select the dynamic content list (lightning icon), and then select the corresponding variable from the list:
age
fullName
The following example shows both added and not yet added variables:

The following example shows definitions added for two variables, and the process to add the third variable:

Save your workflow. On the designer toolbar, selectSave.
Save your workflow. On the designer toolbar, selectSave.
In theAzure portalor Visual Studio Code, open your logic app workflow in the designer.This example uses the Azure portal and a sample workflow with theRecurrencetrigger followed by severalVariablesactions namedInitialize variable. These actions are set up to create two string variables and an integer variable.OperationProperties and valuesInitialize variable-Name: firstNameVar-Type: String-Value: SophiaInitialize variable-Name: lastNameVar-Type: String-Value: OwensInitialize variable-Name: ageVar-Type: Integer-Value: 35
In theAzure portalor Visual Studio Code, open your logic app workflow in the designer.
This example uses the Azure portal and a sample workflow with theRecurrencetrigger followed by severalVariablesactions namedInitialize variable. These actions are set up to create two string variables and an integer variable.

Follow these general steps to add theData Operationsaction namedCompose.
Follow these general steps to add theData Operationsaction namedCompose.
On the designer, select theComposeaction, if not already selected. In theInputsbox, enter the inputs to use for creating the output.For this example, follow these steps:In theInputsbox, enter the following sample JSON object syntax, including the spacing as shown:{
    "age": ,
    "fullName": " , "
}For each variable declaration in the object syntax, place the insertion cursor as described in the following table. Select the dynamic content list (lightning icon), and then select the corresponding definition from theVariableslist:JSON propertyCursor locationVariableageBefore commaageVarfullName- Last name: Before comma- First name: After comma"lastNameVar,firstNameVar"The following example shows how to prepare theComposeaction:The following example shows definitions added for two variables, and the process to add the third variable:
On the designer, select theComposeaction, if not already selected. In theInputsbox, enter the inputs to use for creating the output.
For this example, follow these steps:
In theInputsbox, enter the following sample JSON object syntax, including the spacing as shown:{
    "age": ,
    "fullName": " , "
}
In theInputsbox, enter the following sample JSON object syntax, including the spacing as shown:
{
    "age": ,
    "fullName": " , "
}
{
    "age": ,
    "fullName": " , "
}
For each variable declaration in the object syntax, place the insertion cursor as described in the following table. Select the dynamic content list (lightning icon), and then select the corresponding definition from theVariableslist:JSON propertyCursor locationVariableageBefore commaageVarfullName- Last name: Before comma- First name: After comma"lastNameVar,firstNameVar"The following example shows how to prepare theComposeaction:The following example shows definitions added for two variables, and the process to add the third variable:
For each variable declaration in the object syntax, place the insertion cursor as described in the following table. Select the dynamic content list (lightning icon), and then select the corresponding definition from theVariableslist:
age
ageVar
fullName
lastNameVar
firstNameVar
The following example shows how to prepare theComposeaction:

The following example shows definitions added for two variables, and the process to add the third variable:

Save your workflow. On the designer toolbar, selectSave.
Save your workflow. On the designer toolbar, selectSave.
Test your workflow
To confirm whether theComposeaction creates the expected results, send yourself a notification that includes output from theComposeaction.
In your workflow, add an action that can send you the results from theComposeaction.This example continues by using the Office 365 Outlook action namedSend an email (V2):
In your workflow, add an action that can send you the results from theComposeaction.
This example continues by using the Office 365 Outlook action namedSend an email (V2):

In this action, for each box where you want the results to appear, select inside each box, and then select the dynamic content list (lightning icon). In the list, under theComposeaction, selectOutputs.For this example, the result appears in the email body, so you add theOutputsfield to theBodybox:
In this action, for each box where you want the results to appear, select inside each box, and then select the dynamic content list (lightning icon). In the list, under theComposeaction, selectOutputs.
For this example, the result appears in the email body, so you add theOutputsfield to theBodybox:

Save your workflow, and then manually run your workflow. On the designer toolbar, selectRun>Run.
Save your workflow, and then manually run your workflow. On the designer toolbar, selectRun>Run.
If you use the Office 365 Outlook - Send an email action, the following example shows the result:


Create CSV table action
To create a comma-separated value (CSV) table that has the properties and values from JavaScript Object Notation (JSON) objects in an array, use the action namedCreate CSV table. You can then use the resulting table in actions that follow theCreate CSV tableaction.
To try theCreate CSV tableaction, follow these steps by using the workflow designer. Or, if you prefer working in the code view editor, you can copy the exampleCreate CSV tableandInitialize variableaction definitions from this guide into your own logic app's underlying workflow definition:Data operation code examples - Create CSV table. For more information about theCreate CSV tableaction in the underlying JSON workflow definition, see theTable action.
Consumption
Standard
In theAzure portalor Visual Studio Code, open your logic app workflow in the designer.This example uses the Azure portal and a sample workflow with theRecurrencetrigger followed by anInitialize variableaction. The action is set up to create a variable where the initial value is an array that has some properties and values in JSON format.OperationProperties and valuesInitialize variable-Name: myJSONArray-Type: Array-Value:[ { "Description": "Apples", "Product_ID": 1 }, { "Description": "Oranges", "Product_ID": 2 }]
In theAzure portalor Visual Studio Code, open your logic app workflow in the designer.
This example uses the Azure portal and a sample workflow with theRecurrencetrigger followed by anInitialize variableaction. The action is set up to create a variable where the initial value is an array that has some properties and values in JSON format.
[ { "Description": "Apples", "Product_ID": 1 }, { "Description": "Oranges", "Product_ID": 2 }]

Follow these general steps to add theData Operationsaction namedCreate CSV table.
Follow these general steps to add theData Operationsaction namedCreate CSV table.
On the designer, select theCreate CSV tableaction, if not already selected. In theFrombox, enter the array or expression to use for creating the table.For this example, select inside theFrombox, and select the dynamic content list (lightning icon). From that list, select themyJSONArrayvariable:TipTo create user-friendly tokens for the properties in JSON objects so that you can select
those properties as inputs, use the action namedParse JSONbefore you use theCreate CSV tableaction.The following screenshot shows the finished exampleCreate CSV tableaction:
On the designer, select theCreate CSV tableaction, if not already selected. In theFrombox, enter the array or expression to use for creating the table.
For this example, select inside theFrombox, and select the dynamic content list (lightning icon). From that list, select themyJSONArrayvariable:

Tip
To create user-friendly tokens for the properties in JSON objects so that you can select
those properties as inputs, use the action namedParse JSONbefore you use theCreate CSV tableaction.
The following screenshot shows the finished exampleCreate CSV tableaction:

Save your workflow. On the designer toolbar, selectSave.
Save your workflow. On the designer toolbar, selectSave.
In theAzure portalor Visual Studio Code, open your logic app workflow in the designer.This example uses the Azure portal and a sample workflow with theRecurrencetrigger followed by anInitialize variableaction. The action is set up to create a variable where the initial value is an array that has some properties and values in JSON format.OperationProperties and valuesInitialize variable-Name: myJSONArray-Type: Array-Value:[ { "Description": "Apples", "Product_ID": 1 }, { "Description": "Oranges", "Product_ID": 2 }]
In theAzure portalor Visual Studio Code, open your logic app workflow in the designer.
This example uses the Azure portal and a sample workflow with theRecurrencetrigger followed by anInitialize variableaction. The action is set up to create a variable where the initial value is an array that has some properties and values in JSON format.
[ { "Description": "Apples", "Product_ID": 1 }, { "Description": "Oranges", "Product_ID": 2 }]

Follow these general steps to add theData Operationsaction namedCreate CSV table.
Follow these general steps to add theData Operationsaction namedCreate CSV table.
On the designer, select theCreate CSV tableaction, if not already selected. In theFrombox, enter the array or expression to use for creating the table.For this example, select inside theFrombox, and select the dynamic content list (lightning icon). From that list, select themyJSONArrayvariable:TipTo create user-friendly tokens for the properties in JSON objects so that you can select
those properties as inputs, use the action namedParse JSONbefore you use theCreate CSV tableaction.The following screenshot shows the finished exampleCreate CSV tableaction:
On the designer, select theCreate CSV tableaction, if not already selected. In theFrombox, enter the array or expression to use for creating the table.
For this example, select inside theFrombox, and select the dynamic content list (lightning icon). From that list, select themyJSONArrayvariable:

Tip
To create user-friendly tokens for the properties in JSON objects so that you can select
those properties as inputs, use the action namedParse JSONbefore you use theCreate CSV tableaction.
The following screenshot shows the finished exampleCreate CSV tableaction:

Save your workflow. On the designer toolbar, selectSave.
Save your workflow. On the designer toolbar, selectSave.
Customize table format
By default, theColumnsproperty is set to automatically create the table columns based on the array items. To specify custom headers and values, follow these steps:
If theColumnsproperty doesn't appear in the action information box, from theAdvanced parameterslist, selectColumns.
If theColumnsproperty doesn't appear in the action information box, from theAdvanced parameterslist, selectColumns.

Open theColumnslist, and selectCustom.
Open theColumnslist, and selectCustom.
In theHeaderproperty, specify the custom header text to use instead.
In theHeaderproperty, specify the custom header text to use instead.
In theValueproperty, specify the custom value to use instead.
In theValueproperty, specify the custom value to use instead.
To return values from the array, you can use theitem()functionwith theCreate CSV tableaction. In aFor_eachloop, you can use theitems()function.
item()
For_each
items()
For example, suppose you want table columns that have only the property values and not the property names from an array. To return only these values, follow these steps for working in designer view or in code view.
This example returns the following result:
Apples,1
Oranges,2
Apples,1
Oranges,2
In theCreate CSV tableaction, keep theHeadercolumn empty. On each row in theValuecolumn, dereference each array property that you want. Each row underValuereturns all the values for the specified array property and becomes a column in your table.
For each array property that you want, in theValuecolumn, select inside the edit box, and then select the function icon, which opens the expression editor. Make sure that theFunctionlist appears selected.
For each array property that you want, in theValuecolumn, select inside the edit box, and then select the function icon, which opens the expression editor. Make sure that theFunctionlist appears selected.

In the expression editor, enter the following expression, but replace<array-property-name>with the array property name for the value that you want. When you're done with each expression, selectAdd.Syntax:item()?['<array-property-name>']Example values:item()?['Description']item()?['Product_ID']For more information, seeitem()function.
In the expression editor, enter the following expression, but replace<array-property-name>with the array property name for the value that you want. When you're done with each expression, selectAdd.
<array-property-name>
Syntax:item()?['<array-property-name>']
item()?['<array-property-name>']
Example values:
item()?['Description']
item()?['Description']
item()?['Product_ID']
item()?['Product_ID']

For more information, seeitem()function.
Repeat the preceding steps for each array property. When you're done, your action looks similar to the following example:
Repeat the preceding steps for each array property. When you're done, your action looks similar to the following example:

Save your workflow. On the designer toolbar, selectSave.
Save your workflow. On the designer toolbar, selectSave.
In the action's JSON definition, within thecolumnsarray, set theheaderproperty to an empty string. For eachvalueproperty, dereference each array property that you want.
columns
header
value
On the designer toolbar, selectCode view.
On the designer toolbar, selectCode view.
In the code editor, find the action'scolumnsarray. For each column of array values that you want, add an emptyheaderproperty and the following expression for thevalueproperty:Syntax:{
   "header": "",
   "value": "@item()?['<array-property-name>']"
}Example:"Create_CSV_table": {
   "type": "Table",
   "inputs": {
      "columns": [
         { 
            "header": "",
            "value": "@item()?['Description']"
         },
         { 
            "header": "",
            "value": "@item()?['Product_ID']"
         }
      ],
      "format": "CSV",
      "from": "@variables('myJSONArray')"
   }
}NoteIf you copy the example into your code, make sure you include therunAfteraction at the end of theCreate_CSV_tabledefinition.
In the code editor, find the action'scolumnsarray. For each column of array values that you want, add an emptyheaderproperty and the following expression for thevalueproperty:
columns
header
value
Syntax:
{
   "header": "",
   "value": "@item()?['<array-property-name>']"
}
{
   "header": "",
   "value": "@item()?['<array-property-name>']"
}
Example:
"Create_CSV_table": {
   "type": "Table",
   "inputs": {
      "columns": [
         { 
            "header": "",
            "value": "@item()?['Description']"
         },
         { 
            "header": "",
            "value": "@item()?['Product_ID']"
         }
      ],
      "format": "CSV",
      "from": "@variables('myJSONArray')"
   }
}
"Create_CSV_table": {
   "type": "Table",
   "inputs": {
      "columns": [
         { 
            "header": "",
            "value": "@item()?['Description']"
         },
         { 
            "header": "",
            "value": "@item()?['Product_ID']"
         }
      ],
      "format": "CSV",
      "from": "@variables('myJSONArray')"
   }
}
Note
If you copy the example into your code, make sure you include therunAfteraction at the end of theCreate_CSV_tabledefinition.
runAfter
Create_CSV_table
Switch back to designer view to review the results.
Switch back to designer view to review the results.
Test your workflow
To confirm whether theCreate CSV tableaction creates the expected results, send yourself a notification that includes output from theCreate CSV tableaction.
In your workflow, add an action that can send you the results from theCreate CSV tableaction.This example continues by using the Office 365 Outlook action namedSend an email (V2).
In your workflow, add an action that can send you the results from theCreate CSV tableaction.
This example continues by using the Office 365 Outlook action namedSend an email (V2).
In this action, for each box where you want the results to appear, select inside each box, which opens the dynamic content list. From that list, under theCreate CSV tableaction, selectOutput.
In this action, for each box where you want the results to appear, select inside each box, which opens the dynamic content list. From that list, under theCreate CSV tableaction, selectOutput.

Save your workflow, and then manually run your workflow. On the designer toolbar, selectRun>Run.
Save your workflow, and then manually run your workflow. On the designer toolbar, selectRun>Run.
If you use the Office 365 Outlook - Send an email action, the following example shows the result:

Note
If your table is returned with incorrect formatting, seehow to check your table data formatting.

Create HTML table action
To create an HTML table that has the properties and values from JavaScript Object Notation (JSON) objects in an array, use theCreate HTML tableaction. You can then use the resulting table in actions that follow theCreate HTML tableaction.
To try theCreate HTML tableaction, follow these steps by using the workflow designer. Or, if you prefer working in the code view editor, you can copy the exampleCreate HTML tableandInitialize variableaction definitions from this guide into your own logic app's underlying workflow definition:Data operation code examples - Create HTML table. For more information about theCreate HTML tableaction in the underlying JSON workflow definition, see theTable action.
Consumption
Standard
In theAzure portalor Visual Studio Code, open your logic app workflow in the designer.This example uses the Azure portal and a sample workflow with theRecurrencetrigger followed by anInitialize variableaction. The action is set up to create a variable where the initial value is an array that has some properties and values in JSON format.OperationProperties and valuesInitialize variable-Name: myJSONArray-Type: Array-Value:[ { "Description": "Apples", "Product_ID": 1 }, { "Description": "Oranges", "Product_ID": 2 }]
In theAzure portalor Visual Studio Code, open your logic app workflow in the designer.
This example uses the Azure portal and a sample workflow with theRecurrencetrigger followed by anInitialize variableaction. The action is set up to create a variable where the initial value is an array that has some properties and values in JSON format.
[ { "Description": "Apples", "Product_ID": 1 }, { "Description": "Oranges", "Product_ID": 2 }]

Follow these general steps to add theData Operationsaction namedCreate HTML table.
Follow these general steps to add theData Operationsaction namedCreate HTML table.
On the designer, select theCreate HTML tableaction, if not already selected. In theFrombox, enter the array or expression to use for creating the table.For this example, select inside theFrombox, and select the dynamic content list (lightning icon). From that list, select themyJSONArrayvariable:TipTo create user-friendly tokens for the properties in JSON objects so that you can select
those properties as inputs, use the action namedParse JSONbefore you use theCreate HTML tableaction.The following screenshot shows the finished exampleCreate HTML tableaction:
On the designer, select theCreate HTML tableaction, if not already selected. In theFrombox, enter the array or expression to use for creating the table.
For this example, select inside theFrombox, and select the dynamic content list (lightning icon). From that list, select themyJSONArrayvariable:

Tip
To create user-friendly tokens for the properties in JSON objects so that you can select
those properties as inputs, use the action namedParse JSONbefore you use theCreate HTML tableaction.
The following screenshot shows the finished exampleCreate HTML tableaction:

Save your workflow. On the designer toolbar, selectSave.
Save your workflow. On the designer toolbar, selectSave.
In theAzure portalor Visual Studio Code, open your logic app workflow in the designer.This example uses the Azure portal and a sample workflow with theRecurrencetrigger followed by anInitialize variableaction. The action is set up to create a variable where the initial value is an array that has some properties and values in JSON format.OperationProperties and valuesInitialize variable-Name: myJSONArray-Type: Array-Value:[ { "Description": "Apples", "Product_ID": 1 }, { "Description": "Oranges", "Product_ID": 2 }]
In theAzure portalor Visual Studio Code, open your logic app workflow in the designer.
This example uses the Azure portal and a sample workflow with theRecurrencetrigger followed by anInitialize variableaction. The action is set up to create a variable where the initial value is an array that has some properties and values in JSON format.
[ { "Description": "Apples", "Product_ID": 1 }, { "Description": "Oranges", "Product_ID": 2 }]

Follow these general steps to add theData Operationsaction namedCreate HTML table.
Follow these general steps to add theData Operationsaction namedCreate HTML table.
On the designer, select theCreate HTML tableaction, if not already selected. In theFrombox, enter the array or expression to use for creating the table.For this example, select inside theFrombox, and select the dynamic content list (lightning icon). From that list, select themyJSONArrayvariable:TipTo create user-friendly tokens for the properties in JSON objects so that you can select
those properties as inputs, use the action namedParse JSONbefore you use theCreate HTML tableaction.The following screenshot shows the finished exampleCreate HTML tableaction:
On the designer, select theCreate HTML tableaction, if not already selected. In theFrombox, enter the array or expression to use for creating the table.
For this example, select inside theFrombox, and select the dynamic content list (lightning icon). From that list, select themyJSONArrayvariable:

Tip
To create user-friendly tokens for the properties in JSON objects so that you can select
those properties as inputs, use the action namedParse JSONbefore you use theCreate HTML tableaction.
The following screenshot shows the finished exampleCreate HTML tableaction:

Save your workflow. On the designer toolbar, selectSave.
Save your workflow. On the designer toolbar, selectSave.
Customize table format
By default, theColumnsproperty is set to automatically create the table columns based on the array items. To specify custom headers and values, follow these steps:
If theColumnsproperty doesn't appear in the action information box, from theAdvanced parameterslist, selectColumns.
If theColumnsproperty doesn't appear in the action information box, from theAdvanced parameterslist, selectColumns.
Open theColumnslist, and selectCustom.
Open theColumnslist, and selectCustom.
In theHeaderproperty, specify the custom header text to use instead.
In theHeaderproperty, specify the custom header text to use instead.
In theValueproperty, specify the custom value to use instead.
In theValueproperty, specify the custom value to use instead.
To return values from the array, you can use theitem()functionwith theCreate HTML tableaction. In aFor_eachloop, you can use theitems()function.
item()
For_each
items()
For example, suppose you want table columns that have only the property values and not the property names from an array. To return only these values, follow these steps for working in designer view or in code view.
This example returns the following result:
Apples,1
Oranges,2
Apples,1
Oranges,2
In theCreate HTML tableaction, keep theHeadercolumn empty. On each row in theValuecolumn, dereference each array property that you want. Each row underValuereturns all the values for the specified array property and becomes a column in your table.
For each array property that you want, in theValuecolumn, select inside the edit box, and then select the function icon, which opens the expression editor. Make sure that theFunctionlist appears selected.
For each array property that you want, in theValuecolumn, select inside the edit box, and then select the function icon, which opens the expression editor. Make sure that theFunctionlist appears selected.
In the expression editor, enter the following expression, but replace<array-property-name>with the array property name for the value that you want. When you're done with each expression, selectAdd.Syntax:item()?['<array-property-name>']Examples:item()?['Description']item()?['Product_ID']For more information, seeitem()function.
In the expression editor, enter the following expression, but replace<array-property-name>with the array property name for the value that you want. When you're done with each expression, selectAdd.
<array-property-name>
Syntax:item()?['<array-property-name>']
item()?['<array-property-name>']
Examples:
item()?['Description']
item()?['Description']
item()?['Product_ID']
item()?['Product_ID']

For more information, seeitem()function.
Repeat the preceding steps for each array property. When you're done, your action looks similar to the following example:
Repeat the preceding steps for each array property. When you're done, your action looks similar to the following example:

In the action's JSON definition, within thecolumnsarray, set theheaderproperty to an empty string. For eachvalueproperty, dereference each array property that you want.
columns
header
value
On the designer toolbar, selectCode view.
On the designer toolbar, selectCode view.
In the code editor, find the action'scolumnsarray. For each column of array values that you want, add an emptyheaderproperty and the following expression for thevalueproperty:Syntax:{
   "header": "",
   "value": "@item()?['<array-property-name>']"
}Example:"Create_HTML_table": {
   "type": "Table",
   "inputs": {
      "columns": [
         { 
            "header": "",
            "value": "@item()?['Description']"
         },
         { 
            "header": "",
            "value": "@item()?['Product_ID']"
         }
      ],
      "format": "HTML",
      "from": "@variables('myJSONArray')"
   }
}NoteIf you copy the example into your code, make sure you include therunAfteraction at the end of theCreate_HTML_tabledefinition.
In the code editor, find the action'scolumnsarray. For each column of array values that you want, add an emptyheaderproperty and the following expression for thevalueproperty:
columns
header
value
Syntax:
{
   "header": "",
   "value": "@item()?['<array-property-name>']"
}
{
   "header": "",
   "value": "@item()?['<array-property-name>']"
}
Example:
"Create_HTML_table": {
   "type": "Table",
   "inputs": {
      "columns": [
         { 
            "header": "",
            "value": "@item()?['Description']"
         },
         { 
            "header": "",
            "value": "@item()?['Product_ID']"
         }
      ],
      "format": "HTML",
      "from": "@variables('myJSONArray')"
   }
}
"Create_HTML_table": {
   "type": "Table",
   "inputs": {
      "columns": [
         { 
            "header": "",
            "value": "@item()?['Description']"
         },
         { 
            "header": "",
            "value": "@item()?['Product_ID']"
         }
      ],
      "format": "HTML",
      "from": "@variables('myJSONArray')"
   }
}
Note
If you copy the example into your code, make sure you include therunAfteraction at the end of theCreate_HTML_tabledefinition.
runAfter
Create_HTML_table
Switch back to designer view to review the results.
Switch back to designer view to review the results.
Test your workflow
To confirm whether theCreate HTML tableaction creates the expected results, send yourself a notification that includes output from theCreate HTML tableaction.
In your workflow, add an action that can send you the results from theCreate HTML tableaction.This example continues by using the Office 365 Outlook action namedSend an email (V2).
In your workflow, add an action that can send you the results from theCreate HTML tableaction.
This example continues by using the Office 365 Outlook action namedSend an email (V2).
In this action, for each box where you want the results to appear, select inside each box, and then select the lightning icon, which opens the dynamic content list. From that list, under theCreate HTML tableaction, selectOutput.
In this action, for each box where you want the results to appear, select inside each box, and then select the lightning icon, which opens the dynamic content list. From that list, under theCreate HTML tableaction, selectOutput.

Save your workflow, and then manually run your workflow. On the designer toolbar, selectRun>Run.
Save your workflow, and then manually run your workflow. On the designer toolbar, selectRun>Run.
If you use the Office 365 Outlook - Send an email action, the following example shows the result:


Filter array action
To create a subset array from an existing array where the subset items meet specific criteria, use theFilter arrayaction. You can then use resulting filtered array in actions that follow theFilter arrayaction.
To try theFilter arrayaction, follow these steps by using the workflow designer. Or, if you prefer working in the code view editor, you can copy the exampleFilter arrayandInitialize variableaction definitions from this guide into your own logic app's underlying workflow definition:Data operation code examples - Filter array. For more information about theFilter arrayaction in the underlying JSON workflow definition, see theQuery action.
Note
Any filter text that you use in your condition is case sensitive. Also, this action
can't change the format or components of items in the array.
For actions to use the array output from theFilter arrayaction, either those
actions must accept arrays as input, or you might have to transform the output array
into another compatible format.
If you call an HTTP endpoint and receive a JSON response, use theParse JSONactionto process the JSON response.
Otherwise, theFilter arrayaction can read only the response body
and not the structure of the JSON payload.
Consumption
Standard
In theAzure portalor Visual Studio Code, open your logic app workflow in the designer.This example uses the Azure portal and a sample workflow with theRecurrencetrigger followed by anInitialize variableaction. The action is set up to create where the initial value is an array that has some sample integer values.OperationProperties and valuesInitialize variable-Name: myIntegerArray-Type: Array-Value:[1,2,3,4]NoteAlthough this example uses a simple integer array, this action is especially useful for JSON
object arrays where you can filter based on the objects' properties and values.
In theAzure portalor Visual Studio Code, open your logic app workflow in the designer.
This example uses the Azure portal and a sample workflow with theRecurrencetrigger followed by anInitialize variableaction. The action is set up to create where the initial value is an array that has some sample integer values.
[1,2,3,4]
Note
Although this example uses a simple integer array, this action is especially useful for JSON
object arrays where you can filter based on the objects' properties and values.

Follow these general steps to find theData Operationsaction namedFilter array.
Follow these general steps to find theData Operationsaction namedFilter array.
On the designer, select theFilter arrayaction, if not already selected. In theFrombox, enter the array or expression to use as the filter.For this example, select inside theFrombox, and then select the lightning icon, which opens the dynamic content list. From that list, select the previously created variable:
On the designer, select theFilter arrayaction, if not already selected. In theFrombox, enter the array or expression to use as the filter.
For this example, select inside theFrombox, and then select the lightning icon, which opens the dynamic content list. From that list, select the previously created variable:

For the condition, specify the array items to compare, select the comparison operator, and specify the comparison value.This example uses theitem()functionto access each item in the array, while theFilter arrayaction searches for array items where the value is greater than one. The following screenshot shows the finished exampleFilter arrayaction:
For the condition, specify the array items to compare, select the comparison operator, and specify the comparison value.
This example uses theitem()functionto access each item in the array, while theFilter arrayaction searches for array items where the value is greater than one. The following screenshot shows the finished exampleFilter arrayaction:

Save your workflow. On the designer toolbar, selectSave.
Save your workflow. On the designer toolbar, selectSave.
In theAzure portalor Visual Studio Code, open your logic app workflow in the designer.This example uses the Azure portal and a sample workflow with theRecurrencetrigger followed by anInitialize variableaction. The action is set up to create where the initial value is an array that has some sample integer values.OperationProperties and valuesInitialize variable-Name: myIntegerArray-Type: Array-Value:[1,2,3,4]NoteAlthough this example uses a simple integer array, this action is especially useful for JSON
object arrays where you can filter based on the objects' properties and values.
In theAzure portalor Visual Studio Code, open your logic app workflow in the designer.
This example uses the Azure portal and a sample workflow with theRecurrencetrigger followed by anInitialize variableaction. The action is set up to create where the initial value is an array that has some sample integer values.
[1,2,3,4]
Note
Although this example uses a simple integer array, this action is especially useful for JSON
object arrays where you can filter based on the objects' properties and values.

Follow these general steps to find theData Operationsaction namedFilter array.
Follow these general steps to find theData Operationsaction namedFilter array.
On the designer, select theFilter arrayaction, if not already selected. In theFrombox, enter the array or expression to use as the filter.For this example, select inside theFrombox, and then select the lightning icon, which opens the dynamic content list. From that list, select the previously created variable:
On the designer, select theFilter arrayaction, if not already selected. In theFrombox, enter the array or expression to use as the filter.
For this example, select inside theFrombox, and then select the lightning icon, which opens the dynamic content list. From that list, select the previously created variable:

For the condition, specify the array items to compare, select the comparison operator, and specify the comparison value.This example uses theitem()functionto access each item in the array, while theFilter arrayaction searches for array items where the value is greater than one. The following screenshot shows the finished exampleFilter arrayaction:
For the condition, specify the array items to compare, select the comparison operator, and specify the comparison value.
This example uses theitem()functionto access each item in the array, while theFilter arrayaction searches for array items where the value is greater than one. The following screenshot shows the finished exampleFilter arrayaction:

Save your workflow. On the designer toolbar, selectSave.
Save your workflow. On the designer toolbar, selectSave.
Test your workflow
To confirm whetherFilter arrayaction creates the expected results, send yourself a notification that includes output from theFilter arrayaction.
In your workflow, add an action that can send you the results from theFilter arrayaction.This example continues by using the Office 365 Outlook action namedSend an email (V2).
In your workflow, add an action that can send you the results from theFilter arrayaction.
This example continues by using the Office 365 Outlook action namedSend an email (V2).
In this action, complete the following steps:For each box where you want the results to appear, select inside each box, and then select the function icon, which opens the expression editor. Make sure that theFunctionlist appears selected.To get the array output from theFilter arrayaction, enter the following expression, which uses thebody()functionwith theFilter arrayaction name, and then selectAdd.body('Filter_array')The resolved expression specifies to show the outputs from theFilter_arrayaction in the email body when sent:
In this action, complete the following steps:
For each box where you want the results to appear, select inside each box, and then select the function icon, which opens the expression editor. Make sure that theFunctionlist appears selected.
For each box where you want the results to appear, select inside each box, and then select the function icon, which opens the expression editor. Make sure that theFunctionlist appears selected.
To get the array output from theFilter arrayaction, enter the following expression, which uses thebody()functionwith theFilter arrayaction name, and then selectAdd.body('Filter_array')The resolved expression specifies to show the outputs from theFilter_arrayaction in the email body when sent:
To get the array output from theFilter arrayaction, enter the following expression, which uses thebody()functionwith theFilter arrayaction name, and then selectAdd.
body('Filter_array')
body('Filter_array')

The resolved expression specifies to show the outputs from theFilter_arrayaction in the email body when sent:

Save your workflow, and then manually run your workflow. On the designer toolbar, selectRun>Run.
Save your workflow, and then manually run your workflow. On the designer toolbar, selectRun>Run.
If you use the Office 365 Outlook - Send an email action, the following example shows the result:


Join action
To create a string that has all the items from an array and separate those items with a specific delimiter character, use theJoinaction. You can then use the string in actions that follow theJoinaction.
To try theJoinaction, follow these steps by using the workflow designer. Or, if you prefer working in the code view editor, you can copy the exampleJoinandInitialize variableaction definitions from this guide into your own logic app's underlying workflow definition:Data operation code examples - Join. For more information about theJoinaction in your underlying workflow definition, see theJoin action.
Consumption
Standard
In theAzure portalor Visual Studio Code, open your logic app workflow in the designer.This example uses the Azure portal and a sample workflow with theRecurrencetrigger followed by anInitialize variableaction. This action is set up to create a variable where the initial value is an array that has some sample integer values.OperationProperties and valuesInitialize variable-Name: myIntegerArray-Type: Array-Value:[1,2,3,4]
In theAzure portalor Visual Studio Code, open your logic app workflow in the designer.
This example uses the Azure portal and a sample workflow with theRecurrencetrigger followed by anInitialize variableaction. This action is set up to create a variable where the initial value is an array that has some sample integer values.
[1,2,3,4]

Follow these general steps to find theData Operationsaction namedJoin.
Follow these general steps to find theData Operationsaction namedJoin.
On the designer, select theJoinaction, if not already selected. In theFrombox, enter the array that has the items that you want to join as a string.
On the designer, select theJoinaction, if not already selected. In theFrombox, enter the array that has the items that you want to join as a string.
In theFrombox, enter the array that has the items you want to join as a string.For this example, select inside theFrombox, and then select the lightning icon, which opens the dynamic content list. From that list, select the previously created variable:
In theFrombox, enter the array that has the items you want to join as a string.
For this example, select inside theFrombox, and then select the lightning icon, which opens the dynamic content list. From that list, select the previously created variable:

In theJoin Withbox, enter the character to use for separating each array item.This example uses a colon (:) as the separator for theJoin Withproperty.
In theJoin Withbox, enter the character to use for separating each array item.
This example uses a colon (:) as the separator for theJoin Withproperty.

Save your workflow. On the designer toolbar, selectSave.
Save your workflow. On the designer toolbar, selectSave.
In theAzure portalor Visual Studio Code, open your logic app workflow in the designer.This example uses the Azure portal and a sample workflow with theRecurrencetrigger followed by anInitialize variableaction. The action is set up to create where the initial value is an array that has some sample integer values.OperationProperties and valuesInitialize variable-Name: myIntegerArray-Type: Array-Value:[1,2,3,4]
In theAzure portalor Visual Studio Code, open your logic app workflow in the designer.
This example uses the Azure portal and a sample workflow with theRecurrencetrigger followed by anInitialize variableaction. The action is set up to create where the initial value is an array that has some sample integer values.
[1,2,3,4]

Follow these general steps to find theData Operationsaction namedJoin.
Follow these general steps to find theData Operationsaction namedJoin.
On the designer, select theJoinaction, if not already selected. In theFrombox, enter the array that has the items that you want to join as a string.For this example, select inside theFrombox, and then select the lightning icon, which opens the dynamic content list. From that list, select the previously created variable:
On the designer, select theJoinaction, if not already selected. In theFrombox, enter the array that has the items that you want to join as a string.
For this example, select inside theFrombox, and then select the lightning icon, which opens the dynamic content list. From that list, select the previously created variable:

In theJoin Withbox, enter the character to use for separating each array item.This example uses a colon (:) as the separator for theJoin Withproperty.
In theJoin Withbox, enter the character to use for separating each array item.
This example uses a colon (:) as the separator for theJoin Withproperty.

Save your workflow. On the designer toolbar, selectSave.
Save your workflow. On the designer toolbar, selectSave.
Test your workflow
To confirm whether theJoinaction creates the expected results, send yourself a notification that includes output from theJoinaction.
In your workflow, add an action that can send you the results from theJoinaction.This example continues by using the Office 365 Outlook action namedSend an email (V2).
In your workflow, add an action that can send you the results from theJoinaction.
This example continues by using the Office 365 Outlook action namedSend an email (V2).
In this action, for each box where you want the results to appear, select inside each box, and then select the lightning icon, which opens the dynamic content list. From that list, under theJoinaction, selectOutput.
In this action, for each box where you want the results to appear, select inside each box, and then select the lightning icon, which opens the dynamic content list. From that list, under theJoinaction, selectOutput.

Save your workflow, and then manually run your workflow. On the designer toolbar, selectRun>Run.
Save your workflow, and then manually run your workflow. On the designer toolbar, selectRun>Run.
If you use the Office 365 Outlook - Send an email action, the following example shows the result:


Parse JSON action
To reference or access properties in JavaScript Object Notation (JSON) content, you can create user-friendly fields or tokens for those properties by using theParse JSONaction. That way, you can select those properties from the dynamic content list when you specify inputs for subsequent actions in your workflow. For this action, you can either provide a JSON schema or generate a JSON schema from your sample JSON content or payload.
To try theParse JSONaction, follow these steps by using the workflow designer. Or, if you prefer working in the code view editor, you can copy the exampleParse JSONandInitialize variableaction definitions from this guide into your own logic app's underlying workflow definition:Data operation code examples - Parse JSON.
For more information about this action in your underlying workflow definition, seeParse JSON action.
Consumption
Standard
In theAzure portalor Visual Studio Code, open your logic app workflow in the designer.This example uses the Azure portal and a sample workflow with aRecurrencetrigger followed by anInitialize variableaction. This action is set up to create a variable whose initial value is the following JSON object with properties and values:{
    "Member": {
        "Email": "Sophia.Owen@fabrikam.com",
        "FirstName": "Sophia",
        "LastName": "Owen"
    }
}
In theAzure portalor Visual Studio Code, open your logic app workflow in the designer.
This example uses the Azure portal and a sample workflow with aRecurrencetrigger followed by anInitialize variableaction. This action is set up to create a variable whose initial value is the following JSON object with properties and values:
{
    "Member": {
        "Email": "Sophia.Owen@fabrikam.com",
        "FirstName": "Sophia",
        "LastName": "Owen"
    }
}
{
    "Member": {
        "Email": "Sophia.Owen@fabrikam.com",
        "FirstName": "Sophia",
        "LastName": "Owen"
    }
}

Follow these general steps to find theData Operationsaction namedParse JSON.
Follow these general steps to find theData Operationsaction namedParse JSON.
On the designer, select theParse JSONaction, if not already selected. In theContentbox, enter the JSON object that you want to parse.For this example, select inside theContentbox, and then select the lightning icon, which opens the dynamic content list. From that list, select the previously created variable:
On the designer, select theParse JSONaction, if not already selected. In theContentbox, enter the JSON object that you want to parse.
For this example, select inside theContentbox, and then select the lightning icon, which opens the dynamic content list. From that list, select the previously created variable:

In theSchemabox, enter the JSON schema that describes the JSON object, orpayload, that you want to parse.For this example, use the following schema for the sample JSON object:{
    "type": "object",
    "properties": {
        "Member": {
            "type": "object",
            "properties": {
                "Email": {
                    "type": "string"
                },
                "FirstName": {
                    "type": "string"
                },
                "LastName": {
                    "type": "string"
                }
            }
        }
    }
}If you don't have a schema, you can generate the schema from the JSON object:In theParse JSONaction, under theSchemabox, selectUse sample payload to generate schema.In theEnter or paste a sample JSON payloadbox, enter the JSON content or object, and then selectDone, for example:{
    "Member": {
       "Email": "Sophia.Owens@fabrikam.com",
       "FirstName": "Sophia",
       "LastName": "Owens"
    }
}
In theSchemabox, enter the JSON schema that describes the JSON object, orpayload, that you want to parse.
For this example, use the following schema for the sample JSON object:
{
    "type": "object",
    "properties": {
        "Member": {
            "type": "object",
            "properties": {
                "Email": {
                    "type": "string"
                },
                "FirstName": {
                    "type": "string"
                },
                "LastName": {
                    "type": "string"
                }
            }
        }
    }
}
{
    "type": "object",
    "properties": {
        "Member": {
            "type": "object",
            "properties": {
                "Email": {
                    "type": "string"
                },
                "FirstName": {
                    "type": "string"
                },
                "LastName": {
                    "type": "string"
                }
            }
        }
    }
}

If you don't have a schema, you can generate the schema from the JSON object:
In theParse JSONaction, under theSchemabox, selectUse sample payload to generate schema.
In theParse JSONaction, under theSchemabox, selectUse sample payload to generate schema.
In theEnter or paste a sample JSON payloadbox, enter the JSON content or object, and then selectDone, for example:{
    "Member": {
       "Email": "Sophia.Owens@fabrikam.com",
       "FirstName": "Sophia",
       "LastName": "Owens"
    }
}
In theEnter or paste a sample JSON payloadbox, enter the JSON content or object, and then selectDone, for example:
{
    "Member": {
       "Email": "Sophia.Owens@fabrikam.com",
       "FirstName": "Sophia",
       "LastName": "Owens"
    }
}
{
    "Member": {
       "Email": "Sophia.Owens@fabrikam.com",
       "FirstName": "Sophia",
       "LastName": "Owens"
    }
}

Save your workflow. On the designer toolbar, selectSave.
Save your workflow. On the designer toolbar, selectSave.
In theAzure portalor Visual Studio Code, open your logic app workflow in the designer.This example uses the Azure portal and a sample workflow with aRecurrencetrigger followed by anInitialize variableaction. This action is set up to create a variable whose initial value is the following JSON object with properties and values:{
    "Member": {
        "Email": "Sophia.Owens@fabrikam.com",
        "FirstName": "Sophia",
        "LastName": "Owens"
    }
}
In theAzure portalor Visual Studio Code, open your logic app workflow in the designer.
This example uses the Azure portal and a sample workflow with aRecurrencetrigger followed by anInitialize variableaction. This action is set up to create a variable whose initial value is the following JSON object with properties and values:
{
    "Member": {
        "Email": "Sophia.Owens@fabrikam.com",
        "FirstName": "Sophia",
        "LastName": "Owens"
    }
}
{
    "Member": {
        "Email": "Sophia.Owens@fabrikam.com",
        "FirstName": "Sophia",
        "LastName": "Owens"
    }
}

Follow these general steps to find theData Operationsaction namedParse JSON.
Follow these general steps to find theData Operationsaction namedParse JSON.
On the designer, select theParse JSONaction, if not already selected. In theContentbox, enter the JSON object that you want to parse.For this example, select inside theContentbox, and then select the lightning icon, which opens the dynamic content list. From that list, select the previously created variable:
On the designer, select theParse JSONaction, if not already selected. In theContentbox, enter the JSON object that you want to parse.
For this example, select inside theContentbox, and then select the lightning icon, which opens the dynamic content list. From that list, select the previously created variable:

In theSchemabox, enter the JSON schema that describes the JSON object, orpayload. that you want to parse.For this example, use the following schema for the sample JSON object:{
    "type": "object",
    "properties": {
        "Member": {
            "type": "object",
            "properties": {
                "Email": {
                    "type": "string"
                },
                "FirstName": {
                    "type": "string"
                },
                "LastName": {
                    "type": "string"
                }
            }
        }
    }
}If you don't have a schema, you can generate the schema from the JSON object:In theParse JSONaction, under theSchemabox, selectUse sample payload to generate schema.In theEnter or paste a sample JSON payloadbox, enter the JSON content or object, and then selectDone, for example:{
    "Member": {
       "Email": "Sophia.Owens@fabrikam.com",
       "FirstName": "Sophia",
       "LastName": "Owens"
    }
}
In theSchemabox, enter the JSON schema that describes the JSON object, orpayload. that you want to parse.
For this example, use the following schema for the sample JSON object:
{
    "type": "object",
    "properties": {
        "Member": {
            "type": "object",
            "properties": {
                "Email": {
                    "type": "string"
                },
                "FirstName": {
                    "type": "string"
                },
                "LastName": {
                    "type": "string"
                }
            }
        }
    }
}
{
    "type": "object",
    "properties": {
        "Member": {
            "type": "object",
            "properties": {
                "Email": {
                    "type": "string"
                },
                "FirstName": {
                    "type": "string"
                },
                "LastName": {
                    "type": "string"
                }
            }
        }
    }
}

If you don't have a schema, you can generate the schema from the JSON object:
In theParse JSONaction, under theSchemabox, selectUse sample payload to generate schema.
In theParse JSONaction, under theSchemabox, selectUse sample payload to generate schema.
In theEnter or paste a sample JSON payloadbox, enter the JSON content or object, and then selectDone, for example:{
    "Member": {
       "Email": "Sophia.Owens@fabrikam.com",
       "FirstName": "Sophia",
       "LastName": "Owens"
    }
}
In theEnter or paste a sample JSON payloadbox, enter the JSON content or object, and then selectDone, for example:
{
    "Member": {
       "Email": "Sophia.Owens@fabrikam.com",
       "FirstName": "Sophia",
       "LastName": "Owens"
    }
}
{
    "Member": {
       "Email": "Sophia.Owens@fabrikam.com",
       "FirstName": "Sophia",
       "LastName": "Owens"
    }
}

Save your workflow. On the designer toolbar, selectSave.
Save your workflow. On the designer toolbar, selectSave.
Test your workflow
To confirm whether theParse JSONaction creates the expected results, send yourself a notification that includes output from theParse JSONaction.
In your workflow, add an action that can send you the results from theParse JSONaction.This example continues by using the Office 365 Outlook action namedSend an email (V2).
In your workflow, add an action that can send you the results from theParse JSONaction.
This example continues by using the Office 365 Outlook action namedSend an email (V2).
In this action, for each box where you want the results to appear, select inside each edit box, and then select the lightning icon, which opens the dynamic content list. From that list, under theParse JSONaction, select the properties from the parsed JSON object.This example selects the following properties:Body FirstName,Body LastName, andBody EmailWhen you're done, theSend an emailaction looks similar to the following example:
In this action, for each box where you want the results to appear, select inside each edit box, and then select the lightning icon, which opens the dynamic content list. From that list, under theParse JSONaction, select the properties from the parsed JSON object.
This example selects the following properties:Body FirstName,Body LastName, andBody Email

When you're done, theSend an emailaction looks similar to the following example:

Save your workflow, and then manually run your workflow. On the designer toolbar, selectRun>Run.
Save your workflow, and then manually run your workflow. On the designer toolbar, selectRun>Run.
If you use the Office 365 Outlook - Send an email action, the following example shows the result:


Select action
By default, theSelectaction creates an array that contains JSON objects built from the values in an existing array. For example, you can create a JSON object for each value in an integer array. Specify the properties that each JSON object must have and map the values from the source array to the properties. Although you can change the component JSON objects, the output array always has the same number of items as the source array. To use the output array from theSelectaction, subsequent actions must either accept arrays as input, or you might have to transform the output array into another compatible format.
To try theSelectaction, follow these steps by using the workflow designer. Or, if you prefer working in the code view editor, you can copy the exampleSelectandInitialize variableaction definitions from this guide into your own logic app's underlying workflow definition:Data operation code examples - Select. For more information about this action in your underlying workflow definition, seeSelect action.
Tip
For an example that creates an array with strings or integers built from the values in a JSON object array,
see theSelectandInitialize variableaction definitions inData operation code examples - Select.
Consumption
Standard
In theAzure portalor Visual Studio Code, open your logic app workflow in the designer.This example uses the Azure portal and a sample workflow with theRecurrencetrigger followed by anInitialize variableaction. The action is set up for create a variable where the initial value is an array that has some sample integers.OperationProperties and valuesInitialize variable-Name: myIntegerArray-Type: Array-Value:[1,2,3,4]
In theAzure portalor Visual Studio Code, open your logic app workflow in the designer.
This example uses the Azure portal and a sample workflow with theRecurrencetrigger followed by anInitialize variableaction. The action is set up for create a variable where the initial value is an array that has some sample integers.
[1,2,3,4]

Follow these general steps to find theData Operationsaction namedSelect.
Follow these general steps to find theData Operationsaction namedSelect.
On the designer, select theSelectaction, if not already selected. In theFrombox, enter the source array that you want to use.For this example, select inside theFrombox, and then select the lightning icon, which opens the dynamic content list. From that list, select the previously created variable:
On the designer, select theSelectaction, if not already selected. In theFrombox, enter the source array that you want to use.
For this example, select inside theFrombox, and then select the lightning icon, which opens the dynamic content list. From that list, select the previously created variable:

For theMapproperty, in the left column, enter a property name to describe all the values in the source array.This example usesProduct_IDas the property name for the integer values in the source array. So, each value, for example,1,2,3, and4, is a product ID.
For theMapproperty, in the left column, enter a property name to describe all the values in the source array.
This example usesProduct_IDas the property name for the integer values in the source array. So, each value, for example,1,2,3, and4, is a product ID.
In the right column, enter an expression that specifies the value in the source array for the property name in the left column.This example uses theitem()functionto iterate through and access each item in the array.Select inside the right column, and then select the function icon, which opens the expression editor. Make sure that theFunctionlist appears selected.In the expression editor, enter the function nameditem(), and then selectAdd.TheSelectaction now appears similar to the following example:
In the right column, enter an expression that specifies the value in the source array for the property name in the left column.
This example uses theitem()functionto iterate through and access each item in the array.
Select inside the right column, and then select the function icon, which opens the expression editor. Make sure that theFunctionlist appears selected.
Select inside the right column, and then select the function icon, which opens the expression editor. Make sure that theFunctionlist appears selected.
In the expression editor, enter the function nameditem(), and then selectAdd.
In the expression editor, enter the function nameditem(), and then selectAdd.

TheSelectaction now appears similar to the following example:

Save your workflow. On the designer toolbar, selectSave.
Save your workflow. On the designer toolbar, selectSave.
In theAzure portalor Visual Studio Code, open your logic app workflow in the designer.This example uses the Azure portal and a sample workflow with theRecurrencetrigger followed by anInitialize variableaction. The action is set up for create a variable where the initial value is an array that has some sample integers.OperationProperties and valuesInitialize variable-Name: myIntegerArray-Type: Array-Value:[1,2,3,4]
In theAzure portalor Visual Studio Code, open your logic app workflow in the designer.
This example uses the Azure portal and a sample workflow with theRecurrencetrigger followed by anInitialize variableaction. The action is set up for create a variable where the initial value is an array that has some sample integers.
[1,2,3,4]

Follow these general steps to find theData Operationsaction namedSelect.
Follow these general steps to find theData Operationsaction namedSelect.
On the designer, select theSelectaction, if not already selected. In theFrombox, enter the source array that you want to use.For this example, select inside theFrombox, and then select the lightning icon, which opens the dynamic content list. From that list, select the previously created variable:
On the designer, select theSelectaction, if not already selected. In theFrombox, enter the source array that you want to use.
For this example, select inside theFrombox, and then select the lightning icon, which opens the dynamic content list. From that list, select the previously created variable:

For theMapproperty, in the left column, enter a property name to describe all the values in the source array.This example usesProduct_IDas the property name for the integer values in the source array. So, each value, for example,1,2,3, and4, is a product ID.
For theMapproperty, in the left column, enter a property name to describe all the values in the source array.
This example usesProduct_IDas the property name for the integer values in the source array. So, each value, for example,1,2,3, and4, is a product ID.
In the right column, enter an expression that specifies the value in the source array for the property name in the left column.This example uses theitem()functionto iterate through and access each item in the array.Select inside the right column, and then select the function icon, which opens the expression editor. Make sure that theFunctionlist appears selected.In the expression editor, enter the function nameditem(), and then selectAdd.TheSelectaction now appears similar to the following example:
In the right column, enter an expression that specifies the value in the source array for the property name in the left column.
This example uses theitem()functionto iterate through and access each item in the array.
item()
Select inside the right column, and then select the function icon, which opens the expression editor. Make sure that theFunctionlist appears selected.
Select inside the right column, and then select the function icon, which opens the expression editor. Make sure that theFunctionlist appears selected.
In the expression editor, enter the function nameditem(), and then selectAdd.
In the expression editor, enter the function nameditem(), and then selectAdd.

TheSelectaction now appears similar to the following example:

Test your workflow
To confirm whether theSelectaction creates the expected results, send yourself a notification that includes output from theSelectaction.
In your workflow, add an action that can send you the results from theSelectaction.
In your workflow, add an action that can send you the results from theSelectaction.
In this action, complete the following steps:For each box where you want the results to appear, select inside each box, and then select the function icon, which opens the expression editor. Make sure that theFunctionlist appears selected.To get the array output from theSelectaction, enter the following expression, which uses thebody()functionwith theSelectaction name, and selectAdd:body('Select')The resolved expression specifies to show the outputs from theSelectaction in the email body when sent:
In this action, complete the following steps:
For each box where you want the results to appear, select inside each box, and then select the function icon, which opens the expression editor. Make sure that theFunctionlist appears selected.
For each box where you want the results to appear, select inside each box, and then select the function icon, which opens the expression editor. Make sure that theFunctionlist appears selected.
To get the array output from theSelectaction, enter the following expression, which uses thebody()functionwith theSelectaction name, and selectAdd:body('Select')The resolved expression specifies to show the outputs from theSelectaction in the email body when sent:
To get the array output from theSelectaction, enter the following expression, which uses thebody()functionwith theSelectaction name, and selectAdd:
body('Select')
body('Select')

The resolved expression specifies to show the outputs from theSelectaction in the email body when sent:

Save your workflow, and then manually run your workflow. On the designer toolbar, selectRun>Run.
Save your workflow, and then manually run your workflow. On the designer toolbar, selectRun>Run.
If you use the Office 365 Outlook - Send an email action, the following example shows the result:

Troubleshooting
Format table data
If yourCSV tableorHTML tableis returned with incorrect formatting, make sure your input data has line breaks between rows.
Incorrect formatting:
Fruit,Number Apples,1 Oranges,2
Fruit,Number Apples,1 Oranges,2
Correct formatting:
Fruit,Number
Apples,1
Oranges,2
Fruit,Number
Apples,1
Oranges,2
To add line breaks between rows, add one of the following expressions to your table:
replace(body('Create_CSV_table'),'','<br/>')
replace(body('Create_CSV_table'),'','<br/>')
replace(body('Create_HTML_table'),'','<br/>')
replace(body('Create_HTML_table'),'','<br/>')
For example:
{
	"Send_an_email_": {
		"inputs": {
			"body": {
				"Body": "<p>Results from Create CSV table action:<br/>\n<br/>\n<br/>\n@{replace(body('Create_CSV_table'),'\r\n','<br/>')}</p>",
				"Subject": "Create CSV table results",
				"To": "sophia.owen@fabrikam.com"
			}
		}
	}
}
{
	"Send_an_email_": {
		"inputs": {
			"body": {
				"Body": "<p>Results from Create CSV table action:<br/>\n<br/>\n<br/>\n@{replace(body('Create_CSV_table'),'\r\n','<br/>')}</p>",
				"Subject": "Create CSV table results",
				"To": "sophia.owen@fabrikam.com"
			}
		}
	}
}
Related content
Managed connectors for Azure Logic Apps
Built-in connectors for Azure Logic Apps
Feedback
Was this page helpful?
Additional resources