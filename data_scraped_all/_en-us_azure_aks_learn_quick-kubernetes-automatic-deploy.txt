Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Quickstart: Create an Azure Kubernetes Service (AKS) Automatic cluster (preview)
Article
2025-02-07
1 contributor
In this article
Applies to:âï¸ AKS Automatic (preview)
Azure Kubernetes Service (AKS) Automatic (preview)provides the easiest managed Kubernetes experience for developers, DevOps engineers, and platform engineers. Ideal for modern and AI applications, AKS Automatic automates AKS cluster setup and operations and embeds best practice configurations. Users of any skill level can benefit from the security, performance, and dependability of AKS Automatic for their applications.
In this quickstart, you learn to:
Deploy an AKS Automatic cluster.
Run a sample multi-container application with a group of microservices and web front ends simulating a retail scenario.
Before you begin
This quickstart assumes a basic understanding of Kubernetes concepts. For more information, seeKubernetes core concepts for Azure Kubernetes Service (AKS).
Use the Bash environment inAzure Cloud Shell. For more information, seeGet started with Azure Cloud Shell.
Use the Bash environment inAzure Cloud Shell. For more information, seeGet started with Azure Cloud Shell.

If you prefer to run CLI reference commands locally,installthe Azure CLI. If you're running on Windows or macOS, consider running Azure CLI in a Docker container. For more information, seeHow to run the Azure CLI in a Docker container.If you're using a local installation, sign in to the Azure CLI by using theaz logincommand. To finish the authentication process, follow the steps displayed in your terminal. For other sign-in options, seeAuthenticate to Azure using Azure CLI.When you're prompted, install the Azure CLI extension on first use. For more information about extensions, seeUse and manage extensions with the Azure CLI.Runaz versionto find the version and dependent libraries that are installed. To upgrade to the latest version, runaz upgrade.
If you prefer to run CLI reference commands locally,installthe Azure CLI. If you're running on Windows or macOS, consider running Azure CLI in a Docker container. For more information, seeHow to run the Azure CLI in a Docker container.
If you're using a local installation, sign in to the Azure CLI by using theaz logincommand. To finish the authentication process, follow the steps displayed in your terminal. For other sign-in options, seeAuthenticate to Azure using Azure CLI.
If you're using a local installation, sign in to the Azure CLI by using theaz logincommand. To finish the authentication process, follow the steps displayed in your terminal. For other sign-in options, seeAuthenticate to Azure using Azure CLI.
When you're prompted, install the Azure CLI extension on first use. For more information about extensions, seeUse and manage extensions with the Azure CLI.
When you're prompted, install the Azure CLI extension on first use. For more information about extensions, seeUse and manage extensions with the Azure CLI.
Runaz versionto find the version and dependent libraries that are installed. To upgrade to the latest version, runaz upgrade.
Runaz versionto find the version and dependent libraries that are installed. To upgrade to the latest version, runaz upgrade.
This article requires version 2.57.0 or later of the Azure CLI. If you're using Azure Cloud Shell, the latest version is already installed there.
This article requires theaks-previewAzure CLI extension version9.0.0b4or later.
aks-preview
If you have multiple Azure subscriptions, select the appropriate subscription ID in which the resources should be billed using theaz account setcommand.
Register theAutomaticSKUPreviewfeature in your Azure subscription.
AutomaticSKUPreview
The identity creating the cluster should also have thefollowing permissions on the resource group:Microsoft.Authorization/policyAssignments/writeMicrosoft.Authorization/policyAssignments/read
Microsoft.Authorization/policyAssignments/write
Microsoft.Authorization/policyAssignments/write
Microsoft.Authorization/policyAssignments/read
Microsoft.Authorization/policyAssignments/read
AKS Automatic clusters require deployment in Azure regions that support at least 3availability zones.
To deploy a Bicep file, you need to write access on the resources you create and access to all operations on theMicrosoft.Resources/deploymentsresource type. For example, to create a virtual machine, you needMicrosoft.Compute/virtualMachines/writeandMicrosoft.Resources/deployments/*permissions. For a list of roles and permissions, seeAzure built-in roles.
Microsoft.Resources/deployments
Microsoft.Compute/virtualMachines/write
Microsoft.Resources/deployments/*
Important
AKS Automatic tries to dynamically select a virtual machine size for thesystemnode pool based on the capacity available in the subscription. Make sure your subscription has quota for 16 vCPUs of any of the following sizes in the region you're deploying the cluster to:Standard_D4pds_v5,Standard_D4lds_v5,Standard_D4ads_v5,Standard_D4ds_v5,Standard_D4d_v5,Standard_D4d_v4,Standard_DS3_v2,Standard_DS12_v2. You canview quotas for specific VM-families and submit quota increase requeststhrough the Azure portal.
system
Install the aks-preview Azure CLI extension
Important
AKS preview features are available on a self-service, opt-in basis. Previews are provided "as is" and "as available," and they're excluded from the service-level agreements and limited warranty. AKS previews are partially covered by customer support on a best-effort basis. As such, these features aren't meant for production use. For more information, see the following support articles:
AKS support policies
Azure support FAQ
To install the aks-preview extension, run the following command:
az extension add --name aks-preview
az extension add --name aks-preview
Run the following command to update to the latest version of the extension released:
az extension update --name aks-preview
az extension update --name aks-preview
Register the feature flags
To use AKS Automatic in preview, register the following flag using theaz feature registercommand.
az feature register --namespace Microsoft.ContainerService --name AutomaticSKUPreview
az feature register --namespace Microsoft.ContainerService --name AutomaticSKUPreview
Verify the registration status by using theaz feature showcommand. It takes a few minutes for the status to showRegistered:
az feature show --namespace Microsoft.ContainerService --name AutomaticSKUPreview
az feature show --namespace Microsoft.ContainerService --name AutomaticSKUPreview
When the status reflectsRegistered, refresh the registration of theMicrosoft.ContainerServiceresource provider by using theaz provider registercommand:
az provider register --namespace Microsoft.ContainerService
az provider register --namespace Microsoft.ContainerService
Create a resource group
AnAzure resource groupis a logical group in which Azure resources are deployed and managed.
The following example creates a resource group namedmyResourceGroupin theeastuslocation.
Create a resource group using theaz group createcommand.
az group create --name myResourceGroup --location eastus
az group create --name myResourceGroup --location eastus
The following sample output resembles successful creation of the resource group:
{
  "id": "/subscriptions/<guid>/resourceGroups/myResourceGroup",
  "location": "eastus",
  "managedBy": null,
  "name": "myResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null
}
{
  "id": "/subscriptions/<guid>/resourceGroups/myResourceGroup",
  "location": "eastus",
  "managedBy": null,
  "name": "myResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null
}
Create an AKS Automatic cluster
To create an AKS Automatic cluster, use theaz aks createcommand. The following example creates a cluster namedmyAKSAutomaticClusterwith Managed Prometheus and Container Insights integration enabled.
az aks create \
    --resource-group myResourceGroup \
    --name myAKSAutomaticCluster \
    --sku automatic
az aks create \
    --resource-group myResourceGroup \
    --name myAKSAutomaticCluster \
    --sku automatic
After a few minutes, the command completes and returns JSON-formatted information about the cluster.
Connect to the cluster
To manage a Kubernetes cluster, use the Kubernetes command-line client,kubectl.kubectlis already installed if you use Azure Cloud Shell. To installkubectllocally, run theaz aks install-clicommand. AKS Automatic clusters are configured withMicrosoft Entra ID for Kubernetes role-based access control (RBAC).
kubectl
kubectl
Note
When you create a cluster using the Azure CLI, your user isassigned built-in rolesforAzure Kubernetes Service RBAC Cluster Admin.
Azure Kubernetes Service RBAC Cluster Admin
Configurekubectlto connect to your Kubernetes cluster using theaz aks get-credentialscommand. This command downloads credentials and configures the Kubernetes CLI to use them.
kubectl
az aks get-credentials --resource-group myResourceGroup --name myAKSAutomaticCluster
az aks get-credentials --resource-group myResourceGroup --name myAKSAutomaticCluster
Verify the connection to your cluster using thekubectl getcommand. This command returns a list of the cluster nodes.
kubectl get nodes
kubectl get nodes
The following sample output shows how you're asked to log in.
To sign in, use a web browser to open the page https://microsoft.com/devicelogin and enter the code AAAAAAAAA to authenticate.
To sign in, use a web browser to open the page https://microsoft.com/devicelogin and enter the code AAAAAAAAA to authenticate.
After you log in, the following sample output shows the managed system node pools. Make sure the node status isReady.
NAME                                STATUS   ROLES   AGE     VERSION
aks-nodepool1-13213685-vmss000000   Ready    agent   2m26s   v1.28.5
aks-nodepool1-13213685-vmss000001   Ready    agent   2m26s   v1.28.5
aks-nodepool1-13213685-vmss000002   Ready    agent   2m26s   v1.28.5
NAME                                STATUS   ROLES   AGE     VERSION
aks-nodepool1-13213685-vmss000000   Ready    agent   2m26s   v1.28.5
aks-nodepool1-13213685-vmss000001   Ready    agent   2m26s   v1.28.5
aks-nodepool1-13213685-vmss000002   Ready    agent   2m26s   v1.28.5
Create Automatic Kubernetes Cluster
To create an AKS Automatic cluster, search forKubernetes Services, and selectAutomatic Kubernetes clusterfrom the drop-down options.
To create an AKS Automatic cluster, search forKubernetes Services, and selectAutomatic Kubernetes clusterfrom the drop-down options.

On theBasicstab, fill in all the mandatory fields required to get started:
Subscription, Resource Group, Cluster name, and RegionIf the prerequisites aren't met and the subscription requires registration of the preview flags, there will be an error shown under the Subscription field:
On theBasicstab, fill in all the mandatory fields required to get started:
Subscription, Resource Group, Cluster name, and Region

If the prerequisites aren't met and the subscription requires registration of the preview flags, there will be an error shown under the Subscription field:

On theMonitoringtab, choose your monitoring configurations from Azure Monitor, Managed Prometheus, Managed Grafana, and/or configure alerts. Add tags (optional), and proceed to create the cluster.
On theMonitoringtab, choose your monitoring configurations from Azure Monitor, Managed Prometheus, Managed Grafana, and/or configure alerts. Add tags (optional), and proceed to create the cluster.

Get started with configuring your first application from GitHub and set up an automated deployment pipeline.
Get started with configuring your first application from GitHub and set up an automated deployment pipeline.

Connect to the cluster
To manage a Kubernetes cluster, use the Kubernetes command-line client,kubectl.kubectlis already installed if you use Azure Cloud Shell. To installkubectllocally, run theaz aks install-clicommand. AKS Automatic clusters are configured withMicrosoft Entra ID for Kubernetes role-based access control (RBAC). When you create a cluster using the Azure portal, your user isassigned built-in rolesforAzure Kubernetes Service RBAC Cluster Admin.
kubectl
kubectl
Azure Kubernetes Service RBAC Cluster Admin
Configurekubectlto connect to your Kubernetes cluster using theaz aks get-credentialscommand. This command downloads credentials and configures the Kubernetes CLI to use them.
kubectl
az aks get-credentials --resource-group myResourceGroup --name myAKSAutomaticCluster
az aks get-credentials --resource-group myResourceGroup --name myAKSAutomaticCluster
Verify the connection to your cluster using thekubectl getcommand. This command returns a list of the cluster nodes.
kubectl get nodes
kubectl get nodes
The following sample output shows how you're asked to log in.
To sign in, use a web browser to open the page https://microsoft.com/devicelogin and enter the code AAAAAAAAA to authenticate.
To sign in, use a web browser to open the page https://microsoft.com/devicelogin and enter the code AAAAAAAAA to authenticate.
After you log in, the following sample output shows the managed system node pools. Make sure the node status isReady.
NAME                                STATUS   ROLES   AGE     VERSION
aks-nodepool1-13213685-vmss000000   Ready    agent   2m26s   v1.28.5
aks-nodepool1-13213685-vmss000001   Ready    agent   2m26s   v1.28.5
aks-nodepool1-13213685-vmss000002   Ready    agent   2m26s   v1.28.5
NAME                                STATUS   ROLES   AGE     VERSION
aks-nodepool1-13213685-vmss000000   Ready    agent   2m26s   v1.28.5
aks-nodepool1-13213685-vmss000001   Ready    agent   2m26s   v1.28.5
aks-nodepool1-13213685-vmss000002   Ready    agent   2m26s   v1.28.5
Create a resource group
AnAzure resource groupis a logical group in which Azure resources are deployed and managed. When you create a resource group, you're prompted to specify a location. This location is the storage location of your resource group metadata and where your resources run in Azure if you don't specify another region during resource creation.
The following example creates a resource group namedmyResourceGroupin theeastuslocation.
Create a resource group using theaz group createcommand.
az group create --name myResourceGroup --location eastus
az group create --name myResourceGroup --location eastus
The following sample output resembles successful creation of the resource group:
{
  "id": "/subscriptions/<guid>/resourceGroups/myResourceGroup",
  "location": "eastus",
  "managedBy": null,
  "name": "myResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null
}
{
  "id": "/subscriptions/<guid>/resourceGroups/myResourceGroup",
  "location": "eastus",
  "managedBy": null,
  "name": "myResourceGroup",
  "properties": {
    "provisioningState": "Succeeded"
  },
  "tags": null
}
Review the Bicep file
This Bicep file defines an AKS Automatic cluster. While in preview, you need to specify thesystem nodepoolagent pool profile.
@description('The name of the managed cluster resource.')
param clusterName string = 'myAKSAutomaticCluster'

@description('The location of the managed cluster resource.')
param location string = resourceGroup().location

resource aks 'Microsoft.ContainerService/managedClusters@2024-03-02-preview' = {
  name: clusterName
  location: location  
  sku: {
	name: 'Automatic'
  }
  properties: {
    agentPoolProfiles: [
      {
        name: 'systempool'
        mode: 'System'
	count: 3
      }
    ]
  }
  identity: {
    type: 'SystemAssigned'
  }
}
@description('The name of the managed cluster resource.')
param clusterName string = 'myAKSAutomaticCluster'

@description('The location of the managed cluster resource.')
param location string = resourceGroup().location

resource aks 'Microsoft.ContainerService/managedClusters@2024-03-02-preview' = {
  name: clusterName
  location: location  
  sku: {
	name: 'Automatic'
  }
  properties: {
    agentPoolProfiles: [
      {
        name: 'systempool'
        mode: 'System'
	count: 3
      }
    ]
  }
  identity: {
    type: 'SystemAssigned'
  }
}
For more information about the resource defined in the Bicep file, see theMicrosoft.ContainerService/managedClustersreference.
Deploy the Bicep file
Save the Bicep file asmain.bicepto your local computer.ImportantThe Bicep file sets theclusterNameparam to the stringmyAKSAutomaticCluster. If you want to use a different cluster name, make sure to update the string to your preferred cluster name before saving the file to your computer.
Save the Bicep file asmain.bicepto your local computer.
Important
The Bicep file sets theclusterNameparam to the stringmyAKSAutomaticCluster. If you want to use a different cluster name, make sure to update the string to your preferred cluster name before saving the file to your computer.
clusterName
Deploy the Bicep file using the Azure CLI.az deployment group create --resource-group myResourceGroup --template-file main.bicepIt takes a few minutes to create the AKS cluster. Wait for the cluster to be successfully deployed before you move on to the next step.
Deploy the Bicep file using the Azure CLI.
az deployment group create --resource-group myResourceGroup --template-file main.bicep
az deployment group create --resource-group myResourceGroup --template-file main.bicep
It takes a few minutes to create the AKS cluster. Wait for the cluster to be successfully deployed before you move on to the next step.
Connect to the cluster
To manage a Kubernetes cluster, use the Kubernetes command-line client,kubectl.kubectlis already installed if you use Azure Cloud Shell. To installkubectllocally, run theaz aks install-clicommand. AKS Automatic clusters are configured withMicrosoft Entra ID for Kubernetes role-based access control (RBAC).
kubectl
kubectl
Important
When you create a cluster using Bicep, you need toassign one of the built-in rolessuch asAzure Kubernetes Service RBAC Reader,Azure Kubernetes Service RBAC Writer,Azure Kubernetes Service RBAC Admin, orAzure Kubernetes Service RBAC Cluster Adminto your users, scoped to the cluster or a specific namespace, example usingaz role assignment create --role "Azure Kubernetes Service RBAC Cluster Admin" --scope <AKS cluster resource id> --assignee user@contoso.com. Also make sure your users have theAzure Kubernetes Service Cluster Userbuilt-in role to be able to do runaz aks get-credentials, and then get the kubeconfig of your AKS cluster using theaz aks get-credentialscommand.
Azure Kubernetes Service RBAC Reader
Azure Kubernetes Service RBAC Writer
Azure Kubernetes Service RBAC Admin
Azure Kubernetes Service RBAC Cluster Admin
az role assignment create --role "Azure Kubernetes Service RBAC Cluster Admin" --scope <AKS cluster resource id> --assignee user@contoso.com
Azure Kubernetes Service Cluster User
az aks get-credentials
az aks get-credentials
Configurekubectlto connect to your Kubernetes cluster using theaz aks get-credentialscommand. This command downloads credentials and configures the Kubernetes CLI to use them.
kubectl
az aks get-credentials --resource-group myResourceGroup --name
az aks get-credentials --resource-group myResourceGroup --name
Verify the connection to your cluster using thekubectl getcommand. This command returns a list of the cluster nodes.
kubectl get nodes
kubectl get nodes
The following sample output shows how you're asked to log in.
To sign in, use a web browser to open the page https://microsoft.com/devicelogin and enter the code AAAAAAAAA to authenticate.
To sign in, use a web browser to open the page https://microsoft.com/devicelogin and enter the code AAAAAAAAA to authenticate.
After you log in, the following sample output shows the managed system node pools. Make sure the node status isReady.
NAME                                STATUS   ROLES   AGE     VERSION
aks-nodepool1-13213685-vmss000000   Ready    agent   2m26s   v1.28.5
aks-nodepool1-13213685-vmss000001   Ready    agent   2m26s   v1.28.5
aks-nodepool1-13213685-vmss000002   Ready    agent   2m26s   v1.28.5
NAME                                STATUS   ROLES   AGE     VERSION
aks-nodepool1-13213685-vmss000000   Ready    agent   2m26s   v1.28.5
aks-nodepool1-13213685-vmss000001   Ready    agent   2m26s   v1.28.5
aks-nodepool1-13213685-vmss000002   Ready    agent   2m26s   v1.28.5
Deploy the application
To deploy the application, you use a manifest file to create all the objects required to run theAKS Store application. AKubernetes manifest filedefines a cluster's desired state, such as which container images to run. The manifest includes the following Kubernetes deployments and services:

Store front: Web application for customers to view products and place orders.
Product service: Shows product information.
Order service: Places orders.
Rabbit MQ: Message queue for an order queue.
Note
We don't recommend running stateful containers, such as Rabbit MQ, without persistent storage for production. These are used here for simplicity, but we recommend using managed services, such as Azure Cosmos DB or Azure Service Bus.
Create a namespaceaks-store-demoto deploy the Kubernetes resources into.kubectl create ns aks-store-demo
Create a namespaceaks-store-demoto deploy the Kubernetes resources into.
aks-store-demo
kubectl create ns aks-store-demo
kubectl create ns aks-store-demo
Deploy the application using thekubectl applycommand into theaks-store-demonamespace. The YAML file defining the deployment is onGitHub.kubectl apply -n aks-store-demo -f https://raw.githubusercontent.com/Azure-Samples/aks-store-demo/main/aks-store-ingress-quickstart.yamlThe following sample output shows the deployments and services:statefulset.apps/rabbitmq created
configmap/rabbitmq-enabled-plugins created
service/rabbitmq created
deployment.apps/order-service created
service/order-service created
deployment.apps/product-service created
service/product-service created
deployment.apps/store-front created
service/store-front created
ingress/store-front created
Deploy the application using thekubectl applycommand into theaks-store-demonamespace. The YAML file defining the deployment is onGitHub.
aks-store-demo
kubectl apply -n aks-store-demo -f https://raw.githubusercontent.com/Azure-Samples/aks-store-demo/main/aks-store-ingress-quickstart.yaml
kubectl apply -n aks-store-demo -f https://raw.githubusercontent.com/Azure-Samples/aks-store-demo/main/aks-store-ingress-quickstart.yaml
The following sample output shows the deployments and services:
statefulset.apps/rabbitmq created
configmap/rabbitmq-enabled-plugins created
service/rabbitmq created
deployment.apps/order-service created
service/order-service created
deployment.apps/product-service created
service/product-service created
deployment.apps/store-front created
service/store-front created
ingress/store-front created
statefulset.apps/rabbitmq created
configmap/rabbitmq-enabled-plugins created
service/rabbitmq created
deployment.apps/order-service created
service/order-service created
deployment.apps/product-service created
service/product-service created
deployment.apps/store-front created
service/store-front created
ingress/store-front created
Test the application
When the application runs, a Kubernetes service exposes the application front end to the internet. This process can take a few minutes to complete.
Check the status of the deployed pods using thekubectl get podscommand. Make sure all pods areRunningbefore proceeding. If this is the first workload you deploy, it may take a few minutes fornode auto provisioningto create a node pool to run the pods.kubectl get pods -n aks-store-demo
Check the status of the deployed pods using thekubectl get podscommand. Make sure all pods areRunningbefore proceeding. If this is the first workload you deploy, it may take a few minutes fornode auto provisioningto create a node pool to run the pods.
Running
kubectl get pods -n aks-store-demo
kubectl get pods -n aks-store-demo
Check for a public IP address for the store-front application. Monitor progress using thekubectl get servicecommand with the--watchargument.kubectl get ingress store-front -n aks-store-demo --watchTheADDRESSoutput for thestore-frontservice initially shows empty:NAME          CLASS                                HOSTS   ADDRESS        PORTS   AGE
store-front   webapprouting.kubernetes.azure.com   *                      80      12m
Check for a public IP address for the store-front application. Monitor progress using thekubectl get servicecommand with the--watchargument.
--watch
kubectl get ingress store-front -n aks-store-demo --watch
kubectl get ingress store-front -n aks-store-demo --watch
TheADDRESSoutput for thestore-frontservice initially shows empty:
store-front
NAME          CLASS                                HOSTS   ADDRESS        PORTS   AGE
store-front   webapprouting.kubernetes.azure.com   *                      80      12m
NAME          CLASS                                HOSTS   ADDRESS        PORTS   AGE
store-front   webapprouting.kubernetes.azure.com   *                      80      12m
Once theADDRESSchanges from blank to an actual public IP address, useCTRL-Cto stop thekubectlwatch process.The following sample output shows a valid public IP address assigned to the service:NAME          CLASS                                HOSTS   ADDRESS        PORTS   AGE
store-front   webapprouting.kubernetes.azure.com   *       4.255.22.196   80      12m
Once theADDRESSchanges from blank to an actual public IP address, useCTRL-Cto stop thekubectlwatch process.
CTRL-C
kubectl
The following sample output shows a valid public IP address assigned to the service:
NAME          CLASS                                HOSTS   ADDRESS        PORTS   AGE
store-front   webapprouting.kubernetes.azure.com   *       4.255.22.196   80      12m
NAME          CLASS                                HOSTS   ADDRESS        PORTS   AGE
store-front   webapprouting.kubernetes.azure.com   *       4.255.22.196   80      12m
Open a web browser to the external IP address of your ingress to see the Azure Store app in action.
Open a web browser to the external IP address of your ingress to see the Azure Store app in action.

Delete the cluster
If you don't plan on going through theAKS tutorial, clean up unnecessary resources to avoid Azure charges. Run theaz group deletecommand to remove the resource group, container service, and all related resources.
az group delete --name myResourceGroup --yes --no-wait
az group delete --name myResourceGroup --yes --no-wait
Note
The AKS cluster was created with a system-assigned managed identity, which is the default identity option used in this quickstart. The platform manages this identity, so you don't need to manually remove it.
Next steps
In this quickstart, you deployed a Kubernetes cluster usingAKS Automaticand then deployed a simple multi-container application to it. This sample application is for demo purposes only and doesn't represent all the best practices for Kubernetes applications. For guidance on creating full solutions with AKS for production, seeAKS solution guidance.
To learn more about AKS Automatic, continue to the introduction.
Introduction to Azure Kubernetes Service (AKS) Automatic (preview)
Azure Kubernetes Service

Additional resources