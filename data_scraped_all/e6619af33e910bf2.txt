Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Create your first Java function in Azure using IntelliJ
Article
2024-05-29
18 contributors
In this article
This article shows you how to use Java and IntelliJ to create an Azure function.
Specifically, this article shows you:
How to create an HTTP-triggered Java function in an IntelliJ IDEA project.
Steps for testing and debugging the project in the integrated development environment (IDE) on your own computer.
Instructions for deploying the function project to Azure Functions.
Prerequisites
An Azure account with an active subscription.Create an account for free.
AnAzure supported Java Development Kit (JDK), version 8, 11, 17 or 21. (Java 21 is currently supported on Linux only)
AnIntelliJ IDEAUltimate Edition or Community Edition installed
Maven 3.5.0+
LatestFunction Core Tools
Install plugin and sign in
To install the Azure Toolkit for IntelliJ and then sign in, follow these steps:
In IntelliJ IDEA'sSettings/Preferencesdialog (Ctrl+Alt+S), selectPlugins. Then, find theAzure Toolkit for IntelliJin theMarketplaceand selectInstall. After it's installed, selectRestartto activate the plugin.
In IntelliJ IDEA'sSettings/Preferencesdialog (Ctrl+Alt+S), selectPlugins. Then, find theAzure Toolkit for IntelliJin theMarketplaceand selectInstall. After it's installed, selectRestartto activate the plugin.

To sign in to your Azure account, open theAzure Explorersidebar, and then select theAzure Sign Inicon in the bar on top (or from the IDEA menu, selectTools > Azure > Azure Sign in).
To sign in to your Azure account, open theAzure Explorersidebar, and then select theAzure Sign Inicon in the bar on top (or from the IDEA menu, selectTools > Azure > Azure Sign in).

In theAzure Sign Inwindow, selectOAuth 2.0, and then selectSign in. For other sign-in options, seeSign-in instructions for the Azure Toolkit for IntelliJ.
In theAzure Sign Inwindow, selectOAuth 2.0, and then selectSign in. For other sign-in options, seeSign-in instructions for the Azure Toolkit for IntelliJ.

In the browser, sign in with your account and then go back to IntelliJ. In theSelect Subscriptionsdialog box, select the subscriptions that you want to use, then selectSelect.
In the browser, sign in with your account and then go back to IntelliJ. In theSelect Subscriptionsdialog box, select the subscriptions that you want to use, then selectSelect.

Create your local project
To use Azure Toolkit for IntelliJ to create a local Azure Functions project, follow these steps:
Open IntelliJ IDEA'sWelcomedialog, selectNew Projectto open a new project wizard, then selectAzure Functions.
Open IntelliJ IDEA'sWelcomedialog, selectNew Projectto open a new project wizard, then selectAzure Functions.

SelectHttp Trigger, then selectNextand follow the wizard to go through all the configurations in the following pages. Confirm your project location, then selectFinish. IntelliJ IDEA then opens your new project.
SelectHttp Trigger, then selectNextand follow the wizard to go through all the configurations in the following pages. Confirm your project location, then selectFinish. IntelliJ IDEA then opens your new project.

Run the project locally
To run the project locally, follow these steps:
Important
You must have the JAVA_HOME environment variable set correctly to the JDK directory that is used during code compiling using Maven. Make sure that the version of the JDK is at least as high as theJava.versionsetting.
Java.version
Navigate tosrc/main/java/org/example/functions/HttpTriggerJava.javato see the code generated. Beside line 17, you should see a greenRunbutton. Select it and then selectRun 'Functions-azur...'. You should see your function app running locally with a few logs.
Navigate tosrc/main/java/org/example/functions/HttpTriggerJava.javato see the code generated. Beside line 17, you should see a greenRunbutton. Select it and then selectRun 'Functions-azur...'. You should see your function app running locally with a few logs.


You can try the function by accessing the displayed endpoint from browser, such ashttp://localhost:7071/api/HttpTriggerJava?name=Azure.
You can try the function by accessing the displayed endpoint from browser, such ashttp://localhost:7071/api/HttpTriggerJava?name=Azure.
http://localhost:7071/api/HttpTriggerJava?name=Azure

The log is also displayed in your IDEA. Stop the function app by selectingStop.
The log is also displayed in your IDEA. Stop the function app by selectingStop.

Debug the project locally
To debug the project locally, follow these steps:
Select theDebugbutton in the toolbar. If you don't see the toolbar, enable it by choosingView>Appearance>Toolbar.
Select theDebugbutton in the toolbar. If you don't see the toolbar, enable it by choosingView>Appearance>Toolbar.

Select line 20 of the filesrc/main/java/org/example/functions/HttpTriggerJava.javato add a breakpoint. Access the endpointhttp://localhost:7071/api/HttpTriggerJava?name=Azureagain and you should find that the breakpoint is hit. You can then try more debug features likeStep,Watch, andEvaluation. Stop the debug session by selectingStop.
Select line 20 of the filesrc/main/java/org/example/functions/HttpTriggerJava.javato add a breakpoint. Access the endpointhttp://localhost:7071/api/HttpTriggerJava?name=Azureagain and you should find that the breakpoint is hit. You can then try more debug features likeStep,Watch, andEvaluation. Stop the debug session by selectingStop.
http://localhost:7071/api/HttpTriggerJava?name=Azure

Create the function app in Azure
Use the following steps create a function app and related resources in your Azure subscription:
In Azure Explorer in your IDEA, right-clickFunction Appand then selectCreate.
In Azure Explorer in your IDEA, right-clickFunction Appand then selectCreate.
SelectMore Settingsand provide the following information at the prompts:PromptSelectionSubscriptionChoose the subscription to use.Resource GroupChoose the resource group for your function app.NameSpecify the name for a new function app. Here you can accept the default value.PlatformSelectWindows-Java 17or another platform as appropriate.RegionFor better performance, choose aregionnear you.Hosting OptionsChoose the hosting options for your function app.PlanChoose the App Service plan pricing tier you want to use, or select+to create a new App Service plan.ImportantTo create your app in the Flex Consumption plan, selectFlex Consumption. TheFlex Consumption planis currently in preview.
SelectMore Settingsand provide the following information at the prompts:
Important
To create your app in the Flex Consumption plan, selectFlex Consumption. TheFlex Consumption planis currently in preview.
SelectOK. A notification is displayed after your function app is created.
SelectOK. A notification is displayed after your function app is created.
Deploy your project to Azure
To deploy your project to Azure, follow these steps:
Select and expand the Azure icon in IntelliJ Project explorer, then selectDeploy to Azure -> Deploy to Azure Functions.
Select and expand the Azure icon in IntelliJ Project explorer, then selectDeploy to Azure -> Deploy to Azure Functions.

You can select the function app from the previous section. To create a new one, select+on theFunctionline. Type in the function app name and choose the proper platform. Here, you can accept the default value. SelectOKand the new function app you created is automatically selected. SelectRunto deploy your functions.
You can select the function app from the previous section. To create a new one, select+on theFunctionline. Type in the function app name and choose the proper platform. Here, you can accept the default value. SelectOKand the new function app you created is automatically selected. SelectRunto deploy your functions.


Manage function apps from IDEA
To manage your function apps withAzure Explorerin your IDEA, follow these steps:
SelectFunction Appto see all your function apps listed.
SelectFunction Appto see all your function apps listed.

Select one of your function apps, then right-click and selectShow Propertiesto open the detail page.
Select one of your function apps, then right-click and selectShow Propertiesto open the detail page.

Right-click yourHttpTrigger-Javafunction app, then selectTrigger Function in Browser. You should see that the browser is opened with the trigger URL.
Right-click yourHttpTrigger-Javafunction app, then selectTrigger Function in Browser. You should see that the browser is opened with the trigger URL.

Add more functions to the project
To add more functions to your project, follow these steps:
Right-click the packageorg.example.functionsand selectNew -> Azure Function Class.
Right-click the packageorg.example.functionsand selectNew -> Azure Function Class.

Fill in the class nameHttpTestand selectHttpTriggerin the create function class wizard, then selectOKto create. In this way, you can create new functions as you want.
Fill in the class nameHttpTestand selectHttpTriggerin the create function class wizard, then selectOKto create. In this way, you can create new functions as you want.


Cleaning up functions
Select one of your function apps usingAzure Explorerin your IDEA, then right-click and selectDelete. This command might take several minutes to run. When it's done, the status refreshes inAzure Explorer.

Next steps
You've created a Java project with an HTTP triggered function, run it on your local machine, and deployed it to Azure. Now, extend your function by continuing to the following article:
Adding an Azure Storage queue output binding
Feedback
Was this page helpful?
Additional resources