Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Deploy to Linux VMs in an environment
Article
2024-07-18
16 contributors
In this article
Azure DevOps Services | Azure DevOps Server 2022 | Azure DevOps Server 2020
In this quickstart, you learn how to set up an Azure DevOps pipeline for deployment to multiple Linuxvirtual machine (VM) resourcesin anenvironment. You can use these instructions for any app that publishes a web deployment package.
Prerequisites
An Azure account with an active subscription.Create an account for free.
An Azure DevOps organization and project.Sign up for Azure Pipelines.
JavaScript
Java
For JavaScript or Node.js apps,at least two Linux VMs set up with Nginx on Azure.
For Java Spring Boot and Spring Cloud based apps,at least two Linux VMs created in Azure using the Java 13 on Ubuntu 20.04 template, which provides a fully supported OpenJDK-based runtime.
Fork the sample code
If you already have an app in GitHub that you want to deploy, you can create a pipeline for that code.
If you are a new user, fork this repo in GitHub:
JavaScript
Java
https://github.com/MicrosoftDocs/pipelines-javascript
https://github.com/MicrosoftDocs/pipelines-javascript
https://github.com/spring-projects/spring-petclinic
https://github.com/spring-projects/spring-petclinic
Note
Petclinic is aSpring Bootapplication built usingMaven.
Create an environment with Linux VMs
You can add VMs as resources withinenvironmentsand target them for multi-VM deployments. The deployment history for the environment provides traceability from the VM to the commit.
Add a VM resource
In your Azure DevOps project, go toPipelines>Environmentsand then selectCreate environmentorNew environment.
In your Azure DevOps project, go toPipelines>Environmentsand then selectCreate environmentorNew environment.
On the firstNew environmentscreen, add aNameand an optionalDescription.
On the firstNew environmentscreen, add aNameand an optionalDescription.
UnderResource, selectVirtual machines, and then selectNext.
UnderResource, selectVirtual machines, and then selectNext.
On the nextNew environmentscreen, choose Linux underOperating system.
On the nextNew environmentscreen, choose Linux underOperating system.
Copy the Linux registration script. The script is the same for all the Linux VMs added to the environment.NoteThe Personal Access Token (PAT) of the signed in user is pre-inserted in the script and expires after three hours.
Copy the Linux registration script. The script is the same for all the Linux VMs added to the environment.

Note
The Personal Access Token (PAT) of the signed in user is pre-inserted in the script and expires after three hours.
SelectClose, and note that the new environment is created.
SelectClose, and note that the new environment is created.
Run the copied script on each target VM that you want to register with the environment.NoteIf the VM already has another agent running on it, provide a unique name foragentto register with the environment.
Run the copied script on each target VM that you want to register with the environment.
Note
If the VM already has another agent running on it, provide a unique name foragentto register with the environment.
Once the VM is registered, it appears as a resource under theResourcestab of the environment.

To copy the script again for creating more resources, for example if your PAT expires, selectAdd resourceon the environment's page.
Add and manage tags
Tags are a way to target a specific set of VMs in an environment for deployment. There's no limit to the number of tags that you can use. Tags are limited to 256 characters each.
You can add tags or remove tags for VMs in the interactive registration script or through the UI by selectingMore actionsfor a VM resource. For this quickstart, assign a different tag to each VM in your environment.

Define a CI build pipeline
You need a continuous integration (CI) build pipeline that publishes your web app, and a deployment script to run locally on the Linux server. Set up your CI build pipeline based on the runtime you want to use.
Important
During GitHub procedures, you might be prompted to create aGitHub service connectionor be redirected to GitHub to sign in, install Azure Pipelines, or authorize Azure Pipelines. Follow the onscreen instructions to complete the process. For more information, seeAccess to GitHub repositories.
In your Azure DevOps project, selectPipelines>Create Pipeline, and then selectGitHubas the location of your source code.
On theSelect a repositoryscreen, select your forked sample repository.
On theConfigure your pipelinescreen, selectStarter pipeline. Azure Pipelines generates a YAML file calledazure-pipelines.ymlfor your pipeline.
Select the dropdown caret next toSave and run, selectSave, and then selectSaveagain. The file is saved to your forked GitHub repository.
Edit the code
SelectEdit, and replace the contents of theazure-pipelines.ymlfile with the following code. You add to this YAML in future steps.
JavaScript
Java
The following code builds your Node.js project with npm.
trigger:
    - main
    
    pool:
      vmImage: ubuntu-latest
    
    stages:
    - stage: Build
      displayName: Build stage
      jobs:  
      - job: Build
        displayName: Build
        steps:
        - task: UseNode@1
          inputs:
            version: '16.x'
          displayName: 'Install Node.js'
        - script: |
            npm install
            npm run build --if-present
            npm run test --if-present
          displayName: 'npm install, build and test'
        - task: ArchiveFiles@2
          displayName: 'Archive files'
          inputs:
            rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
            includeRootFolder: false
            archiveType: zip
            archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
            replaceExistingArchive: true
        - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
          artifact: drop
trigger:
    - main
    
    pool:
      vmImage: ubuntu-latest
    
    stages:
    - stage: Build
      displayName: Build stage
      jobs:  
      - job: Build
        displayName: Build
        steps:
        - task: UseNode@1
          inputs:
            version: '16.x'
          displayName: 'Install Node.js'
        - script: |
            npm install
            npm run build --if-present
            npm run test --if-present
          displayName: 'npm install, build and test'
        - task: ArchiveFiles@2
          displayName: 'Archive files'
          inputs:
            rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
            includeRootFolder: false
            archiveType: zip
            archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
            replaceExistingArchive: true
        - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
          artifact: drop
For more information, review the steps inBuild your Node.js app with gulpfor creating a build.
The following code builds your Java project and runs tests with Apache Maven.
trigger:
    - main
    
    pool:
      vmImage: ubuntu-latest
    
    stages:
    - stage: Build
      displayName: Build stage
      jobs:  
      - job: Build
        displayName: Build Maven Project
        steps:
        - task: Maven@4
          displayName: 'Maven Package'
          inputs:
            mavenPomFile: 'pom.xml'
        - task: CopyFiles@2
          displayName: 'Copy Files to artifact staging directory'
          inputs:
            SourceFolder: '$(System.DefaultWorkingDirectory)'
            Contents: '**/target/*.?(war|jar)'
            TargetFolder: $(Build.ArtifactStagingDirectory)
        - upload: $(Build.ArtifactStagingDirectory)
          artifact: drop
trigger:
    - main
    
    pool:
      vmImage: ubuntu-latest
    
    stages:
    - stage: Build
      displayName: Build stage
      jobs:  
      - job: Build
        displayName: Build Maven Project
        steps:
        - task: Maven@4
          displayName: 'Maven Package'
          inputs:
            mavenPomFile: 'pom.xml'
        - task: CopyFiles@2
          displayName: 'Copy Files to artifact staging directory'
          inputs:
            SourceFolder: '$(System.DefaultWorkingDirectory)'
            Contents: '**/target/*.?(war|jar)'
            TargetFolder: $(Build.ArtifactStagingDirectory)
        - upload: $(Build.ArtifactStagingDirectory)
          artifact: drop
For more information, review the steps inBuild your Java app with Mavenfor creating a build.
Run your pipeline
SelectValidate and save, then selectSave, selectRun, and selectRunagain.
After your pipeline runs, verify that the job ran successfully and that you see a published artifact.
Deploy to the Linux VMs
Edit your pipeline to add the followingdeployment job. Replace<environment name>with the name of the environment you created earlier. Select specific VMs from the environment to receive the deployment by specifying the<VM tag>that you defined for each VM.jobs:  
- deployment: VMDeploy
  displayName: Web deploy
  environment:
    name:  <environment name>
    resourceType: VirtualMachine
    tags: <VM tag> # Update value for VMs to deploy to
  strategy:For more information, see the completejobs.deployment definition.For more information about theenvironmentkeyword and resources targeted by a deployment job, see thejobs.deployment.environment definition.
Edit your pipeline to add the followingdeployment job. Replace<environment name>with the name of the environment you created earlier. Select specific VMs from the environment to receive the deployment by specifying the<VM tag>that you defined for each VM.
<environment name>
<VM tag>
jobs:  
- deployment: VMDeploy
  displayName: Web deploy
  environment:
    name:  <environment name>
    resourceType: VirtualMachine
    tags: <VM tag> # Update value for VMs to deploy to
  strategy:
jobs:  
- deployment: VMDeploy
  displayName: Web deploy
  environment:
    name:  <environment name>
    resourceType: VirtualMachine
    tags: <VM tag> # Update value for VMs to deploy to
  strategy:
For more information, see the completejobs.deployment definition.
For more information about theenvironmentkeyword and resources targeted by a deployment job, see thejobs.deployment.environment definition.
environment
Specify eitherrunOnceorrollingas a deploymentstrategy.runOnceis the simplest deployment strategy. ThepreDeploydeploy,routeTraffic, andpostRouteTrafficlifecycle hooks each execute once. Then eitheron:successoron:failureexecutes.The following code shows a deployment job forrunOnce:jobs:
- deployment: VMDeploy
  displayName: Web deploy
  environment:
    name: <environment name>
    resourceType: VirtualMachine
    tags: <VM tag>
  strategy:
    runOnce:
      deploy:
        steps:
        - script: echo my first deploymentThe following code shows a YAML snippet for therollingdeployment strategy, using a Java pipeline. You can update up to five targets in each iteration. ThemaxParallelparameter specifies the number of targets that can be deployed to in parallel.ThemaxParallelselection accounts for absolute number or percentage of targets that must remain available at any time, excluding the targets being deployed to, and determines success and failure conditions during deployment.jobs: 
- deployment: VMDeploy
  displayName: web
  environment:
    name: <environment name>
    resourceType: VirtualMachine
    tags: <VM tag>
  strategy:
      rolling:
        maxParallel: 2  #for percentages, mention as x%
        preDeploy:
          steps:
          - download: current
            artifact: drop
          - script: echo initialize, cleanup, backup, install certs
        deploy:
          steps:
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                # Modify deployment script based on the app type
                echo "Starting deployment script run"
                sudo java -jar '$(Pipeline.Workspace)/drop/**/target/*.jar'
        routeTraffic:
          steps:
          - script: echo routing traffic
        postRouteTraffic:
          steps:
          - script: echo health check post-route traffic
        on:
          failure:
            steps:
            - script: echo Restore from backup! This is on failure
          success:
            steps:
            - script: echo Notify! This is on successWith each run of this job, deployment history is recorded against the environment you created and registered the VMs in.
Specify eitherrunOnceorrollingas a deploymentstrategy.
runOnce
rolling
strategy
runOnceis the simplest deployment strategy. ThepreDeploydeploy,routeTraffic, andpostRouteTrafficlifecycle hooks each execute once. Then eitheron:successoron:failureexecutes.The following code shows a deployment job forrunOnce:jobs:
- deployment: VMDeploy
  displayName: Web deploy
  environment:
    name: <environment name>
    resourceType: VirtualMachine
    tags: <VM tag>
  strategy:
    runOnce:
      deploy:
        steps:
        - script: echo my first deployment
runOnceis the simplest deployment strategy. ThepreDeploydeploy,routeTraffic, andpostRouteTrafficlifecycle hooks each execute once. Then eitheron:successoron:failureexecutes.
runOnce
preDeploy
deploy
routeTraffic
postRouteTraffic
on:
success
on:
failure
The following code shows a deployment job forrunOnce:
runOnce
jobs:
- deployment: VMDeploy
  displayName: Web deploy
  environment:
    name: <environment name>
    resourceType: VirtualMachine
    tags: <VM tag>
  strategy:
    runOnce:
      deploy:
        steps:
        - script: echo my first deployment
jobs:
- deployment: VMDeploy
  displayName: Web deploy
  environment:
    name: <environment name>
    resourceType: VirtualMachine
    tags: <VM tag>
  strategy:
    runOnce:
      deploy:
        steps:
        - script: echo my first deployment
The following code shows a YAML snippet for therollingdeployment strategy, using a Java pipeline. You can update up to five targets in each iteration. ThemaxParallelparameter specifies the number of targets that can be deployed to in parallel.ThemaxParallelselection accounts for absolute number or percentage of targets that must remain available at any time, excluding the targets being deployed to, and determines success and failure conditions during deployment.jobs: 
- deployment: VMDeploy
  displayName: web
  environment:
    name: <environment name>
    resourceType: VirtualMachine
    tags: <VM tag>
  strategy:
      rolling:
        maxParallel: 2  #for percentages, mention as x%
        preDeploy:
          steps:
          - download: current
            artifact: drop
          - script: echo initialize, cleanup, backup, install certs
        deploy:
          steps:
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                # Modify deployment script based on the app type
                echo "Starting deployment script run"
                sudo java -jar '$(Pipeline.Workspace)/drop/**/target/*.jar'
        routeTraffic:
          steps:
          - script: echo routing traffic
        postRouteTraffic:
          steps:
          - script: echo health check post-route traffic
        on:
          failure:
            steps:
            - script: echo Restore from backup! This is on failure
          success:
            steps:
            - script: echo Notify! This is on successWith each run of this job, deployment history is recorded against the environment you created and registered the VMs in.
The following code shows a YAML snippet for therollingdeployment strategy, using a Java pipeline. You can update up to five targets in each iteration. ThemaxParallelparameter specifies the number of targets that can be deployed to in parallel.
rolling
maxParallel
ThemaxParallelselection accounts for absolute number or percentage of targets that must remain available at any time, excluding the targets being deployed to, and determines success and failure conditions during deployment.
maxParallel
jobs: 
- deployment: VMDeploy
  displayName: web
  environment:
    name: <environment name>
    resourceType: VirtualMachine
    tags: <VM tag>
  strategy:
      rolling:
        maxParallel: 2  #for percentages, mention as x%
        preDeploy:
          steps:
          - download: current
            artifact: drop
          - script: echo initialize, cleanup, backup, install certs
        deploy:
          steps:
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                # Modify deployment script based on the app type
                echo "Starting deployment script run"
                sudo java -jar '$(Pipeline.Workspace)/drop/**/target/*.jar'
        routeTraffic:
          steps:
          - script: echo routing traffic
        postRouteTraffic:
          steps:
          - script: echo health check post-route traffic
        on:
          failure:
            steps:
            - script: echo Restore from backup! This is on failure
          success:
            steps:
            - script: echo Notify! This is on success
jobs: 
- deployment: VMDeploy
  displayName: web
  environment:
    name: <environment name>
    resourceType: VirtualMachine
    tags: <VM tag>
  strategy:
      rolling:
        maxParallel: 2  #for percentages, mention as x%
        preDeploy:
          steps:
          - download: current
            artifact: drop
          - script: echo initialize, cleanup, backup, install certs
        deploy:
          steps:
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                # Modify deployment script based on the app type
                echo "Starting deployment script run"
                sudo java -jar '$(Pipeline.Workspace)/drop/**/target/*.jar'
        routeTraffic:
          steps:
          - script: echo routing traffic
        postRouteTraffic:
          steps:
          - script: echo health check post-route traffic
        on:
          failure:
            steps:
            - script: echo Restore from backup! This is on failure
          success:
            steps:
            - script: echo Notify! This is on success
With each run of this job, deployment history is recorded against the environment you created and registered the VMs in.
Access pipeline traceability in environment
The environmentDeploymentsview provides complete traceability of commits and work items and a cross-pipeline deployment history for the environment.

Related content
Jobs
Tasks
Catalog of tasks
Variables
Triggers
Troubleshooting
YAML schema reference
Feedback
Was this page helpful?
Additional resources