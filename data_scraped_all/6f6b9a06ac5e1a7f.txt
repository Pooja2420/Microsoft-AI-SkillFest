Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Quickstart: Create a single database - Azure SQL Database
Article
2024-09-18
21 contributors
In this article
In this quickstart, you create asingle databasein Azure SQL Database using either the Azure portal, a PowerShell script, or an Azure CLI script. You then query the database usingQuery editorin the Azure portal.
Watch this video in theAzure SQL Database essentials seriesfor an overview of the deployment process:
Prerequisites
An active Azure subscription. If you don't have one,create a free account.
Much of this article can be accomplished with the Azure portal alone. Optionally, use the latest version ofAzure PowerShellorAzure CLI.
Permissions
To create databases via Transact-SQL:CREATE DATABASEpermissions are necessary. To create a database a login must be either the server admin login (created when the Azure SQL Database logical server was provisioned), the Microsoft Entra admin of the server, a member of the dbmanager database role inmaster. For more information, seeCREATE DATABASE.
CREATE DATABASE
master
To create databases via the Azure portal, PowerShell, Azure CLI, or REST API: Azure RBAC permissions are needed, specifically the Contributor, SQL DB Contributor, or SQL Server Contributor Azure RBAC role. For more information, seeAzure RBAC built-in roles.
Create a single database
This quickstart creates a single database in theserverless compute tier.
Note
Try Azure SQL Database free of chargeand get 100,000 vCore seconds of serverless compute and 32 GB of storage every month.
Portal
Azure CLI
PowerShell
To create a single database in the Azure portal, this quickstart starts at the Azure SQL page.
Browse to theSelect SQL Deployment optionpage.
Browse to theSelect SQL Deployment optionpage.
UnderSQL databases, leaveResource typeset toSingle database, and selectCreate.
UnderSQL databases, leaveResource typeset toSingle database, and selectCreate.

On theBasicstab of theCreate SQL Databaseform, underProject details, select the desired AzureSubscription.
On theBasicstab of theCreate SQL Databaseform, underProject details, select the desired AzureSubscription.
ForResource group, selectCreate new, entermyResourceGroup, and selectOK.
ForResource group, selectCreate new, entermyResourceGroup, and selectOK.
ForDatabase name, entermySampleDatabase.
ForDatabase name, entermySampleDatabase.
ForServer, selectCreate new, and fill out theNew serverform with the following values:Server name: Entermysqlserver, and add some characters for uniqueness. We can't provide an exact server name to use because server names must be globally unique for all servers in Azure, not just unique within a subscription. So enter something likemysqlserver12345, and the portal lets you know if it's available or not.Location: Select a location from the dropdown list.Authentication method: SelectUse SQL authentication.Server admin login: Enterazureuser.Password: Enter a password that meets requirements, and enter it again in theConfirm passwordfield.SelectOK.
ForServer, selectCreate new, and fill out theNew serverform with the following values:
Server name: Entermysqlserver, and add some characters for uniqueness. We can't provide an exact server name to use because server names must be globally unique for all servers in Azure, not just unique within a subscription. So enter something likemysqlserver12345, and the portal lets you know if it's available or not.
Server name: Entermysqlserver, and add some characters for uniqueness. We can't provide an exact server name to use because server names must be globally unique for all servers in Azure, not just unique within a subscription. So enter something likemysqlserver12345, and the portal lets you know if it's available or not.
mysqlserver12345
Location: Select a location from the dropdown list.
Location: Select a location from the dropdown list.
Authentication method: SelectUse SQL authentication.
Authentication method: SelectUse SQL authentication.
Server admin login: Enterazureuser.
Server admin login: Enterazureuser.
Password: Enter a password that meets requirements, and enter it again in theConfirm passwordfield.
Password: Enter a password that meets requirements, and enter it again in theConfirm passwordfield.
SelectOK.
LeaveWant to use SQL elastic poolset toNo.
LeaveWant to use SQL elastic poolset toNo.
ForWorkload environment, specifyDevelopmentfor this exercise.The Azure portal provides aWorkload environmentoption that helps to preset some configuration settings. These settings can be overridden. This option applies to theCreate SQL Databaseportal page only. Otherwise, theWorkload environmentoption has no impact on licensing or other database configuration settings.Choosing thedevelopmentworkload environment sets a few options, including:Backup storage redundancyoption is locally redundant storage. Locally redundant storage incurs less cost and is appropriate for pre-production environments that do not require the redundance of zone- or geo-replicated storage.Compute + storageis General Purpose, Serverless with a single vCore. By default, there is aone-hour auto-pause delay.Choosing theProductionworkload environment sets:Backup storage redundancyis geo-redundant storage, the default.Compute + storageis General Purpose, Provisioned with 2 vCores and 32 GB of storage. This can be further modified in the next step.
ForWorkload environment, specifyDevelopmentfor this exercise.
The Azure portal provides aWorkload environmentoption that helps to preset some configuration settings. These settings can be overridden. This option applies to theCreate SQL Databaseportal page only. Otherwise, theWorkload environmentoption has no impact on licensing or other database configuration settings.
Choosing thedevelopmentworkload environment sets a few options, including:Backup storage redundancyoption is locally redundant storage. Locally redundant storage incurs less cost and is appropriate for pre-production environments that do not require the redundance of zone- or geo-replicated storage.Compute + storageis General Purpose, Serverless with a single vCore. By default, there is aone-hour auto-pause delay.
Backup storage redundancyoption is locally redundant storage. Locally redundant storage incurs less cost and is appropriate for pre-production environments that do not require the redundance of zone- or geo-replicated storage.
Compute + storageis General Purpose, Serverless with a single vCore. By default, there is aone-hour auto-pause delay.
Choosing theProductionworkload environment sets:Backup storage redundancyis geo-redundant storage, the default.Compute + storageis General Purpose, Provisioned with 2 vCores and 32 GB of storage. This can be further modified in the next step.
Backup storage redundancyis geo-redundant storage, the default.
Compute + storageis General Purpose, Provisioned with 2 vCores and 32 GB of storage. This can be further modified in the next step.
UnderCompute + storage, selectConfigure database.
UnderCompute + storage, selectConfigure database.
This quickstart uses a serverless database, so leaveService tierset toGeneral Purpose (Most budget-friendly, serverless compute)and setCompute tiertoServerless. SelectApply.
This quickstart uses a serverless database, so leaveService tierset toGeneral Purpose (Most budget-friendly, serverless compute)and setCompute tiertoServerless. SelectApply.
UnderBackup storage redundancy, choose a redundancy option for the storage account where your backups will be saved. To learn more, seebackup storage redundancy.
UnderBackup storage redundancy, choose a redundancy option for the storage account where your backups will be saved. To learn more, seebackup storage redundancy.
SelectNext: Networkingat the bottom of the page.
SelectNext: Networkingat the bottom of the page.

On theNetworkingtab, forConnectivity method, selectPublic endpoint.
On theNetworkingtab, forConnectivity method, selectPublic endpoint.
ForFirewall rules, setAdd current client IP addresstoYes. LeaveAllow Azure services and resources to access this serverset toNo.
ForFirewall rules, setAdd current client IP addresstoYes. LeaveAllow Azure services and resources to access this serverset toNo.

UnderConnection policy, choose theDefaultconnection policy, and leave theMinimum TLS versionat the default of TLS 1.2.
UnderConnection policy, choose theDefaultconnection policy, and leave theMinimum TLS versionat the default of TLS 1.2.
SelectNext: Securityat the bottom of the page.
SelectNext: Securityat the bottom of the page.

On theSecuritypage, you can choose to start a free trial ofMicrosoft Defender for SQL, as well as configureLedger,Managed identitiesandAzure SQL transparent data encryption with customer-managed keyif you desire.  SelectNext: Additional settingsat the bottom of the page.
On theSecuritypage, you can choose to start a free trial ofMicrosoft Defender for SQL, as well as configureLedger,Managed identitiesandAzure SQL transparent data encryption with customer-managed keyif you desire.  SelectNext: Additional settingsat the bottom of the page.
On theAdditional settingstab, in theData sourcesection, forUse existing data, selectSample. This creates anAdventureWorksLTsample database so there's some tables and data to query and experiment with, as opposed to an empty blank database. You can also configuredatabase collationand amaintenance window.
On theAdditional settingstab, in theData sourcesection, forUse existing data, selectSample. This creates anAdventureWorksLTsample database so there's some tables and data to query and experiment with, as opposed to an empty blank database. You can also configuredatabase collationand amaintenance window.
AdventureWorksLT
SelectReview + createat the bottom of the page:
SelectReview + createat the bottom of the page:

On theReview + createpage, after reviewing, selectCreate.
On theReview + createpage, after reviewing, selectCreate.
The Azure CLI code blocks in this section create a resource group, server, single database, and server-level IP firewall rule for access to the server. Make sure to record the generated resource group and server names, so you can manage these resources later.
First, install the latestAzure CLI.
If you don't have anAzure subscription, create anAzure free accountbefore you begin.
Prepare your environment for the Azure CLI
Use the Bash environment inAzure Cloud Shell. For more information, seeGet started with Azure Cloud Shell.
Use the Bash environment inAzure Cloud Shell. For more information, seeGet started with Azure Cloud Shell.

If you prefer to run CLI reference commands locally,installthe Azure CLI. If you're running on Windows or macOS, consider running Azure CLI in a Docker container. For more information, seeHow to run the Azure CLI in a Docker container.If you're using a local installation, sign in to the Azure CLI by using theaz logincommand. To finish the authentication process, follow the steps displayed in your terminal. For other sign-in options, seeAuthenticate to Azure using Azure CLI.When you're prompted, install the Azure CLI extension on first use. For more information about extensions, seeUse and manage extensions with the Azure CLI.Runaz versionto find the version and dependent libraries that are installed. To upgrade to the latest version, runaz upgrade.
If you prefer to run CLI reference commands locally,installthe Azure CLI. If you're running on Windows or macOS, consider running Azure CLI in a Docker container. For more information, seeHow to run the Azure CLI in a Docker container.
If you're using a local installation, sign in to the Azure CLI by using theaz logincommand. To finish the authentication process, follow the steps displayed in your terminal. For other sign-in options, seeAuthenticate to Azure using Azure CLI.
If you're using a local installation, sign in to the Azure CLI by using theaz logincommand. To finish the authentication process, follow the steps displayed in your terminal. For other sign-in options, seeAuthenticate to Azure using Azure CLI.
When you're prompted, install the Azure CLI extension on first use. For more information about extensions, seeUse and manage extensions with the Azure CLI.
When you're prompted, install the Azure CLI extension on first use. For more information about extensions, seeUse and manage extensions with the Azure CLI.
Runaz versionto find the version and dependent libraries that are installed. To upgrade to the latest version, runaz upgrade.
Runaz versionto find the version and dependent libraries that are installed. To upgrade to the latest version, runaz upgrade.
Launch Azure Cloud Shell
The Azure Cloud Shell is a free interactive shell that you can use to run the steps in this article. It has common Azure tools preinstalled and configured to use with your account.
To open the Cloud Shell, selectTry itfrom the upper right corner of a code block. You can also launch Cloud Shell in a separate browser tab by going tohttps://shell.azure.com.
When Cloud Shell opens, verify thatBashis selected for your environment. Subsequent sessions will use Azure CLI in a Bash environment. SelectCopyto copy the blocks of code, paste it into the Cloud Shell, and pressEnterto run it.
Sign in to Azure
Cloud Shell is automatically authenticated under the initial account signed-in with. Use the following script to sign in using a different subscription, replacing<Subscription ID>with your Azure Subscription ID.  If you don't have anAzure subscription, create anAzure free accountbefore you begin.
<Subscription ID>
subscription="<subscriptionId>" # add subscription here

az account set -s $subscription # ...or use 'az login'
subscription="<subscriptionId>" # add subscription here

az account set -s $subscription # ...or use 'az login'
For more information, seeset active subscriptionorlog in interactively
Set parameter values
The following values are used in subsequent commands to create the database and required resources. Server names need to be globally unique across all of Azure so the $RANDOM function is used to create the server name.
Change the location as appropriate for your environment. Replace0.0.0.0with the IP address range that matches your specific environment. Use the public IP address of the computer you're using to restrict access to the server to only your IP address.
0.0.0.0
# Variable block
let "randomIdentifier=$RANDOM*$RANDOM"
location="East US"
resourceGroup="msdocs-azuresql-rg-$randomIdentifier"
tag="create-and-configure-database"
server="msdocs-azuresql-server-$randomIdentifier"
database="msdocsazuresqldb$randomIdentifier"
login="azureuser"
password="Pa$$w0rD-$randomIdentifier"
# Specify appropriate IP address values for your environment
# to limit access to the SQL Database server
startIp=0.0.0.0
endIp=0.0.0.0

echo "Using resource group $resourceGroup with login: $login, password: $password..."
# Variable block
let "randomIdentifier=$RANDOM*$RANDOM"
location="East US"
resourceGroup="msdocs-azuresql-rg-$randomIdentifier"
tag="create-and-configure-database"
server="msdocs-azuresql-server-$randomIdentifier"
database="msdocsazuresqldb$randomIdentifier"
login="azureuser"
password="Pa$$w0rD-$randomIdentifier"
# Specify appropriate IP address values for your environment
# to limit access to the SQL Database server
startIp=0.0.0.0
endIp=0.0.0.0

echo "Using resource group $resourceGroup with login: $login, password: $password..."
Create a resource group
Create a resource group with theaz group createcommand. An Azure resource group is a logical container into which Azure resources are deployed and managed. The following example creates a resource group namedmyResourceGroupin theeastusAzure region:
echo "Creating $resourceGroup in $location..."
az group create --name $resourceGroup --location "$location" --tags $tag
echo "Creating $resourceGroup in $location..."
az group create --name $resourceGroup --location "$location" --tags $tag
Create a server
Create a server with theaz sql server createcommand.
echo "Creating $server in $location..."
az sql server create --name $server --resource-group $resourceGroup --location "$location" --admin-user $login --admin-password $password
echo "Creating $server in $location..."
az sql server create --name $server --resource-group $resourceGroup --location "$location" --admin-user $login --admin-password $password
Configure a server-based firewall rule
Create a firewall rule with theaz sql server firewall-rule createcommand.
echo "Configuring firewall..."
az sql server firewall-rule create --resource-group $resourceGroup --server $server -n AllowYourIp --start-ip-address $startIp --end-ip-address $endIp
echo "Configuring firewall..."
az sql server firewall-rule create --resource-group $resourceGroup --server $server -n AllowYourIp --start-ip-address $startIp --end-ip-address $endIp
Create a single database
Create a database with theaz sql db createcommand in theserverless compute tier.
echo "Creating $database in serverless tier"
az sql db create \
    --resource-group $resourceGroup \
    --server $server \
    --name $database \
    --sample-name AdventureWorksLT \
    --edition GeneralPurpose \
    --compute-model Serverless \
    --family Gen5 \
    --capacity 2
echo "Creating $database in serverless tier"
az sql db create \
    --resource-group $resourceGroup \
    --server $server \
    --name $database \
    --sample-name AdventureWorksLT \
    --edition GeneralPurpose \
    --compute-model Serverless \
    --family Gen5 \
    --capacity 2
You can create a resource group, server, and single database using Azure PowerShell.
First, install the latestAzure PowerShell.
Launch Azure Cloud Shell
The Azure Cloud Shell is a free interactive shell that you can use to run the steps in this article. It has common Azure tools preinstalled and configured to use with your account.
To open the Cloud Shell, selectTry itfrom the upper right corner of a code block. You can also launch Cloud Shell in a separate browser tab by going tohttps://shell.azure.com.
When Cloud Shell opens, verify thatPowerShellis selected for your environment. Subsequent sessions use Azure CLI in a PowerShell environment. SelectCopyto copy the blocks of code, paste it into the Cloud Shell, and pressEnterto run it.
Set parameter values
The following values are used in subsequent commands to create the database and required resources. Server names need to be globally unique across all of Azure so theGet-Randomcmdlet is used to create the server name.
In the following code snippet:
Replace0.0.0.0in the ip address range to match your specific environment.
0.0.0.0
Replace<strong password here>with a strong password for youradminLogin.
<strong password here>
adminLogin
# Set variables for your server and database
   $resourceGroupName = "myResourceGroup"
   $location = "eastus"
   $adminLogin = "azureuser"
   $password = "<strong password here>"
   $serverName = "mysqlserver-$(Get-Random)"
   $databaseName = "mySampleDatabase"

   # The ip address range that you want to allow to access your server
   $startIp = "0.0.0.0"
   $endIp = "0.0.0.0"

   # Show randomized variables
   Write-host "Resource group name is" $resourceGroupName
   Write-host "Server name is" $serverName
# Set variables for your server and database
   $resourceGroupName = "myResourceGroup"
   $location = "eastus"
   $adminLogin = "azureuser"
   $password = "<strong password here>"
   $serverName = "mysqlserver-$(Get-Random)"
   $databaseName = "mySampleDatabase"

   # The ip address range that you want to allow to access your server
   $startIp = "0.0.0.0"
   $endIp = "0.0.0.0"

   # Show randomized variables
   Write-host "Resource group name is" $resourceGroupName
   Write-host "Server name is" $serverName
Create resource group
Create an Azure resource group withNew-AzResourceGroup. A resource group is a logical container into which Azure resources are deployed and managed.
Write-host "Creating resource group..."
   $resourceGroup = New-AzResourceGroup -Name $resourceGroupName -Location $location -Tag @{Owner="SQLDB-Samples"}
   $resourceGroup
Write-host "Creating resource group..."
   $resourceGroup = New-AzResourceGroup -Name $resourceGroupName -Location $location -Tag @{Owner="SQLDB-Samples"}
   $resourceGroup
Create a server
Create a server with theNew-AzSqlServercmdlet.
Write-host "Creating primary server..."
   $server = New-AzSqlServer -ResourceGroupName $resourceGroupName `
      -ServerName $serverName `
      -Location $location `
      -SqlAdministratorCredentials $(New-Object -TypeName System.Management.Automation.PSCredential `
      -ArgumentList $adminLogin, $(ConvertTo-SecureString -String $password -AsPlainText -Force))
   $server
Write-host "Creating primary server..."
   $server = New-AzSqlServer -ResourceGroupName $resourceGroupName `
      -ServerName $serverName `
      -Location $location `
      -SqlAdministratorCredentials $(New-Object -TypeName System.Management.Automation.PSCredential `
      -ArgumentList $adminLogin, $(ConvertTo-SecureString -String $password -AsPlainText -Force))
   $server
Create a firewall rule
Create a server firewall rule with theNew-AzSqlServerFirewallRulecmdlet.
Write-host "Configuring server firewall rule..."
   $serverFirewallRule = New-AzSqlServerFirewallRule -ResourceGroupName $resourceGroupName `
      -ServerName $serverName `
      -FirewallRuleName "AllowedIPs" -StartIpAddress $startIp -EndIpAddress $endIp
   $serverFirewallRule
Write-host "Configuring server firewall rule..."
   $serverFirewallRule = New-AzSqlServerFirewallRule -ResourceGroupName $resourceGroupName `
      -ServerName $serverName `
      -FirewallRuleName "AllowedIPs" -StartIpAddress $startIp -EndIpAddress $endIp
   $serverFirewallRule
Create a single database with PowerShell
Create a single database with theNew-AzSqlDatabasecmdlet.
Write-host "Creating a gen5 2 vCore serverless database..."
   $database = New-AzSqlDatabase  -ResourceGroupName $resourceGroupName `
      -ServerName $serverName `
      -DatabaseName $databaseName `
      -Edition GeneralPurpose `
      -ComputeModel Serverless `
      -ComputeGeneration Gen5 `
      -VCore 2 `
      -MinimumCapacity 2 `
      -SampleName "AdventureWorksLT"
   $database
Write-host "Creating a gen5 2 vCore serverless database..."
   $database = New-AzSqlDatabase  -ResourceGroupName $resourceGroupName `
      -ServerName $serverName `
      -DatabaseName $databaseName `
      -Edition GeneralPurpose `
      -ComputeModel Serverless `
      -ComputeGeneration Gen5 `
      -VCore 2 `
      -MinimumCapacity 2 `
      -SampleName "AdventureWorksLT"
   $database
Query the database
Once your database is created, you can use theQuery editor (preview)in the Azure portal to connect to the database and query data. For more information, seeAzure portal query editor for Azure SQL Database.
In the portal, search for and selectSQL databases, and then select your database from the list.
In the portal, search for and selectSQL databases, and then select your database from the list.
On the page for your database, selectQuery editor (preview)in the left menu.
On the page for your database, selectQuery editor (preview)in the left menu.
Enter yourSQL authenticationserver admin login information or useMicrosoft Entra authentication.NoteMicrosoft Entra IDwas previously known as Azure Active Directory (Azure AD).
Enter yourSQL authenticationserver admin login information or useMicrosoft Entra authentication.
Note
Microsoft Entra IDwas previously known as Azure Active Directory (Azure AD).

Enter the following query in theQuery editorpane.SELECT TOP 20 pc.Name as CategoryName, p.name as ProductName
FROM SalesLT.ProductCategory pc
JOIN SalesLT.Product p
ON pc.productcategoryid = p.productcategoryid;
Enter the following query in theQuery editorpane.
SELECT TOP 20 pc.Name as CategoryName, p.name as ProductName
FROM SalesLT.ProductCategory pc
JOIN SalesLT.Product p
ON pc.productcategoryid = p.productcategoryid;
SELECT TOP 20 pc.Name as CategoryName, p.name as ProductName
FROM SalesLT.ProductCategory pc
JOIN SalesLT.Product p
ON pc.productcategoryid = p.productcategoryid;
SelectRun, and then review the query results in theResultspane.
SelectRun, and then review the query results in theResultspane.

Close theQuery editorpage, and selectOKwhen prompted to discard your unsaved edits.
Close theQuery editorpage, and selectOKwhen prompted to discard your unsaved edits.
Clean up resources
Keep the resource group, server, and single database to go on to the next steps, and learn how to connect and query your database with different methods.
When you're finished using these resources, you can delete the resource group you created, which will also delete the server and single database within it.
Portal
Azure CLI
PowerShell
To deletemyResourceGroupand all its resources using the Azure portal:
In the portal, search for and selectResource groups, and then selectmyResourceGroupfrom the list.
On the resource group page, selectDelete resource group.
UnderType the resource group name, entermyResourceGroup, and then selectDelete.
Use the following command to remove the resource group and all resources associated with it using theaz group deletecommand - unless you have an ongoing need for these resources. Some of these resources might take a while to create, as well as to delete.
az group delete --name $resourceGroup
az group delete --name $resourceGroup
To delete the resource group and all its resources, run the following PowerShell cmdlet, using the name of your resource group:
Remove-AzResourceGroup -Name $resourceGroupName
Remove-AzResourceGroup -Name $resourceGroupName
Next step
Want to optimize and save on your cloud spending?
Start analyzing costs with Cost Management
Related content
Connect and query your database
Quickstart: Use SSMS to connect to and query Azure SQL Database or Azure SQL Managed Instance
Connect and query using Azure Data Studio
Feedback
Was this page helpful?
Additional resources