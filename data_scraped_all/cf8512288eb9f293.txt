Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Architecture best practices for Azure Event Hubs
Article
2024-08-14
3 contributors
In this article
Azure Event Hubsis a scalable event processing service that ingests and processes large volumes of events and data, with low latency and high reliability. It can receive and process millions of events per second. Data sent to an event hub can be transformed and stored by using any real-time analytics provider or batching and storage adapters.
For more information about using Event Hubs, reference theAzure Event Hubs documentationto learn how to use Event Hubs to ingest millions of events per second from connected devices and applications.
To understand ways using Event Hubs helps you achieve operational excellence and reliability for your workload, reference the following articles:
Monitor Azure Event Hubs
Stream Azure Diagnostics data using Event Hubs
Scaling with Event Hubs
The following sections are specific to Azure Event Hubs from a Well Architected Framework perspective:
Design considerations
Configuration checklist
Recommended configuration options
Source artifacts
Design considerations
Azure Event Hubs provides an uptime SLA. For more information, referenceSLA for Event Hubs.
Checklist
Have you configured Azure Event Hubs with operational excellence in mind?
Create SendOnly and ListenOnly policies for the event publisher and consumer, respectively.
When using the SDK to send events to Event Hubs, ensure the exceptions thrown by the retry policy (EventHubsExceptionorOperationCancelledException) are properly caught.
EventHubsException
OperationCancelledException
In high-throughput scenarios, use batched events.
Every consumer can read events from one to maximum partitions supported by the Event HubsSKU
When developing new applications, useEventProcessorClient(.NET and Java) orEventHubConsumerClient(Python and JavaScript) as the client SDK.
EventProcessorClient
EventHubConsumerClient
As part of your solution-wide availability and disaster recovery strategy, consider enabling the Event Hubs geo disaster-recovery option.
When a solution has a large number of independent event publishers, consider using Event Publishers for fine-grained access control.
Don't publish events to a specific partition.
When publishing events frequently, use the AMQP protocol when possible.
The number of partitions reflect the degree of downstream parallelism you can achieve.
Ensure each consuming application uses a separate consumer group and only one active receiver per consumer group is in place.
When using the Capture feature, carefully consider the configuration of the time window and file size, especially with low event volumes.
Configuration recommendations
Consider the following recommendations to optimize reliability when configuring Azure Event Hubs:
EventHubsException
OperationCancelledException
HTTPS
json
EventProcessorClient
EventHubConsumerClient
EventProcessorHost
HTTPS
Source artifacts
To find Event Hubs namespaces withBasicSKU, use the following query:
Resources 
| where type == 'microsoft.eventhub/namespaces'
| where sku.name == 'Basic'
| project resourceGroup, name, sku.name
Resources 
| where type == 'microsoft.eventhub/namespaces'
| where sku.name == 'Basic'
| project resourceGroup, name, sku.name
Next step
Service Bus and reliability
Feedback
Was this page helpful?
Additional resources