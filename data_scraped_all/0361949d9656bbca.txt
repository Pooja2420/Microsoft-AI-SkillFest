Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Best practices for Azure Cosmos DB Java SDK
Article
2024-08-14
6 contributors
In this article
APPLIES TO:NoSQL
This article walks through the best practices for using the Azure Cosmos DB Java SDK. Following these practices, will help improve your latency, availability, and boost overall performance.
Checklist
CosmosClient
idleEndpointTimeout
idleEndpointTimeout
DirectConnectionConfig
.block()
CosmosAsyncDatabase#read()
CosmosAsyncContainer#read()
createDatabaseIfNotExists()
maxDegreeOfParallelism
CosmosQueryRequestsOptions
-1
maxBufferedItemCount
RetryAfter
IndexingPolicy#getIncludedPaths()
IndexingPolicy#getExcludedPaths()
CosmosDiagnostics#getDuration()
getDuration()
Best practices when using Gateway mode
Azure Cosmos DB requests are made over HTTPS/REST when you use Gateway mode. They're subject to the default connection limit per hostname or IP address. You might need to tweakmaxConnectionPoolSizeto a different value (from 100 through 1,000) so that the client library can use multiple simultaneous connections to Azure Cosmos DB. In Java v4 SDK, the default value forGatewayConnectionConfig#maxConnectionPoolSizeis 1000. To change the value, you can setGatewayConnectionConfig#maxConnectionPoolSizeto a different value.
GatewayConnectionConfig#maxConnectionPoolSize
GatewayConnectionConfig#maxConnectionPoolSize
Best practices for write-heavy workloads
For workloads that have heavy create payloads, set theCosmosClientBuilder#contentResponseOnWriteEnabled()request option tofalse. The service will no longer return the created or updated resource to the SDK. Normally, because the application has the object that's being created, it doesn't need the service to return it. The header values are still accessible, like a request charge. Disabling the content response can help improve performance, because the SDK no longer needs to allocate memory or serialize the body of the response. It also reduces the network bandwidth usage to further help performance.
CosmosClientBuilder#contentResponseOnWriteEnabled()
false
Next steps
To learn more about performance tips for Java SDK, seePerformance tips for Azure Cosmos DB Java SDK v4.
To learn more about designing your application for scale and high performance, seePartitioning and scaling in Azure Cosmos DB.
Trying to do capacity planning for a migration to Azure Cosmos DB? You can use information about your existing database cluster for capacity planning.
If all you know is the number of vCores and servers in your existing database cluster, read aboutestimating request units using vCores or vCPUs
If you know typical request rates for your current database workload, read aboutestimating request units using Azure Cosmos DB capacity planner
Feedback
Was this page helpful?
Additional resources