Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Continuous deployment for Azure Functions
Article
2024-05-05
11 contributors
In this article
Azure Functions enables you to continuously deploy the changes made in a source control repository to a connected function app. Thissource control integrationenables a workflow in which a code update triggers build, packaging, and deployment from your project to Azure.
You should always configure continuous deployment for a staging slot and not for the production slot. When you use the production slot, code updates are pushed directly to production without being verified in Azure. Instead, enable continuous deployment to a staging slot, verify updates in the staging slot, and after everything runs correctly you canswap the staging slot code into production. If you connect to a production slot, make sure that only production-quality code makes it into the integrated code branch.
Steps in this article show you how to configure continuous code deployments to your function app in Azure by using the Deployment Center in the Azure portal. You can alsoconfigure continuous integration using the Azure CLI. These steps can target either a staging or a production slot.
Functions supports these sources for continuous deployment to your app:
Azure Repos
GitHub
Bitbucket
Local Git
Maintain your project code inAzure Repos, one of the services in Azure DevOps. Supports both Git and Team Foundation Version Control. Used with theAzure Pipelines build provider. For more information, seeWhat is Azure Repos?.
Maintain your project code inGitHub. Supported by allbuild providers. For more information, seeGitHub docs.
GitHub is the only continuous deployment source supported for apps running on Linux in aConsumption plan, which includes serverless Python apps.
Maintain your project code inBitbucket. Requires theApp Service build provider.
Maintain your project code in a dedicated Git server hosted in the same App Service plan with your function app. Requires theApp Service build provider. For more information, seeLocal Git deployment to Azure App Service.
You can also connect your function app to an external Git repository, but this requires a manual synchronization. For more information about deployment options, seeDeployment technologies in Azure Functions.
Note
Continuous deployment options covered in this article are specific to code-only deployments. For containerized function app deployments, seeEnable continuous deployment of containers to Azure.
Requirements
The unit of deployment for functions in Azure is the function app. For continuous deployment to succeed, the directory structure of your project must be compatible with the basic folder structure that Azure Functions expects. When you create your code project using Azure Functions Core Tools, Visual Studio Code, or Visual Studio, the Azure Functions templates are used to create code projects with the correct directory structure. All functions in a function app are deployed at the same time and in the same package.
After you enable continuous deployment, access to function code in the Azure portal is configured asread-onlybecause thesource of truthis known to reside elsewhere.
Note
The Deployment Center doesn't support enabling continuous deployment for a function app withinbound network restrictions. You need to instead configure the build provider workflow directly in GitHub or Azure Pipelines. These workflows also require you to use a virtual machine in the same virtual network as the function app as either aself-hosted agent (Azure Pipelines)or aself-hosted runner (GitHub).
Select a build provider
Building your code project is part of the deployment process. The specific build process depends on your specific language stack, operating system, and hosting plan. Builds can be done locally or remotely, again depending on your specific hosting. For more information, seeRemote build.
Important
For increased security, consider using a build provider that supports managed identities, including Azure Pipelines and GitHub Actions. The App Service (Kudu) service requires you toenable basic authenticationand work with text-based credentials.
Functions supports these build providers:
Azure Pipelines
GitHub Actions
App Service (Kudu) service
Azure Pipelines is one of the services in Azure DevOps and the default build provider for Azure Repos projects. You can also use Azure Pipelines to build projects from GitHub. In Azure Pipelines, there's anAzureFunctionApptask designed specifically for deploying to Azure Functions. This task provides you with control over how the project gets built, packaged, and deployed. Supports managed identities.
AzureFunctionApp
GitHub Actions is the default build provider for GitHub projects. GitHub Actions provides you with control over how the project gets built, packaged, and deployed. Supports managed identities.
The App Service platform maintains a native deployment service (Project Kudu) to support local Git deployment, some container deployments, and other deployment sources not supported by either Azure Pipelines or GitHub Actions. Remote builds, packaging, and other maintenance tasks are performed in a subdomain ofscm.azurewebsites.netdedicated to your app, such ashttps://myfunctionapp.scm.azurewebsites.net. This build service can only be used when thescmsite can be accessed by your deployment. While you can use identities to connect to thescmendpoint, many publishing tools instead require basic authentication to connect to thescmendpoint.
scm.azurewebsites.net
https://myfunctionapp.scm.azurewebsites.net
scm
scm
scm
This build provider is used when you deploy your code project by using Visual Studio, Visual Studio Code, or Azure Functions Core Tools. If you haven't already deployed code to your function app by using one of these tools, you might need toEnable basic authentication for deploymentsto use thescmsite.
scm
Keep the strengths and limitations of these providers in mind when you enable source control integration. You might need to change your repository source type to take advantage of a specific provider.
Configure continuous deployment
TheAzure portalprovides aDeployment centerfor your function apps, which makes it easier to configure continuous deployment. The specific way you configure continuous deployment depends both on the type of source control repository in which your code resides and thebuild provideryou choose.
In theAzure portal, browse to your function app page and selectDeployment CenterunderDeploymenton the left pane.

Select theSourcerepository type where your project code is being maintained from one of these supported options:
Azure Repos
GitHub
Bitbucket
Local Git
Azure Repos
GitHub
Bitbucket
Local Git
Azure Repos
GitHub
Bitbucket
Local Git
Deployments from Azure Repos that use Azure Pipelines are defined in theAzure DevOps portaland not from your function app. For a step-by-step guide for creating an Azure Pipelines-based deployment from Azure Repos, seeContinuous delivery with Azure Pipelines.
Deployments from GitHub that use Azure Pipelines are defined in theAzure DevOps portaland not from your function app. For a step-by-step guide for creating an Azure Pipelines-based deployment from GitHub, seeContinuous delivery with Azure Pipelines.
You can't deploy from Bitbucket using Azure Pipelines. Instead choose theApp Service build provider.
You can't deploy from local git using Azure Pipelines. Instead choose theApp Service build provider.
You can't deploy from Azure Repos using GitHub Actions. Choose a differentbuild provider.
To add a GitHub Actions workflow to an existing function app:
Navigate to your function app in theAzure portaland selectDeployment Center.
Navigate to your function app in theAzure portaland selectDeployment Center.
ForSourceselectGitHub. If you don't see the default messageBuilding with GitHub Actions, selectChange providerchooseGitHub Actionsand selectOK.
ForSourceselectGitHub. If you don't see the default messageBuilding with GitHub Actions, selectChange providerchooseGitHub Actionsand selectOK.
If you haven't already authorized GitHub access, selectAuthorize. Provide your GitHub credentials and selectSign in. To authorize a different GitHub account, selectChange Accountand sign in with another account.
If you haven't already authorized GitHub access, selectAuthorize. Provide your GitHub credentials and selectSign in. To authorize a different GitHub account, selectChange Accountand sign in with another account.
Select your GitHubOrganization,Repository, andBranch. To deploy with GitHub Actions, you must have write access to this repository.
Select your GitHubOrganization,Repository, andBranch. To deploy with GitHub Actions, you must have write access to this repository.
InAuthentication settings, choose whether to have GitHub Actions authenticate with aUser-assigned identityor usingBasic authenticationcredentials. For basic authentication, the current credentials are used.
InAuthentication settings, choose whether to have GitHub Actions authenticate with aUser-assigned identityor usingBasic authenticationcredentials. For basic authentication, the current credentials are used.
SelectPreview fileto see the workflow file that gets added to your GitHub repository ingithub/workflows/.
SelectPreview fileto see the workflow file that gets added to your GitHub repository ingithub/workflows/.
github/workflows/
SelectSaveto add the workflow file to your repository.
SelectSaveto add the workflow file to your repository.
To learn more about GitHub Action deployments, including other ways to generate the workflow configuration file, seeContinuous delivery by using GitHub Actions.
You can't deploy from Bitbucket using GitHub Actions. Instead choose theApp Service build provider.
You can't deploy from local git using GitHub Actions. Instead choose theApp Service build provider.
Go to your function app in theAzure portaland selectDeployment Center.
Go to your function app in theAzure portaland selectDeployment Center.
ForSource, selectAzure Repos. IfApp Service build serviceprovider isn't the default, selectChange provider, selectApp Service build service, and then selectOK.
ForSource, selectAzure Repos. IfApp Service build serviceprovider isn't the default, selectChange provider, selectApp Service build service, and then selectOK.
Select values forOrganization,Project,Repository, andBranch. Only organizations that belong to your Azure account are displayed.
Select values forOrganization,Project,Repository, andBranch. Only organizations that belong to your Azure account are displayed.
SelectSaveto create the webhook in your repository.
SelectSaveto create the webhook in your repository.
Go to your function app in theAzure portaland selectDeployment Center.
Go to your function app in theAzure portaland selectDeployment Center.
ForSource, selectGitHub. IfApp Service build serviceprovider isn't the default, selectChange provider, selectApp Service build service, and then selectOK.
ForSource, selectGitHub. IfApp Service build serviceprovider isn't the default, selectChange provider, selectApp Service build service, and then selectOK.
If you haven't already authorized GitHub access, selectAuthorize. Provide your GitHub credentials and selectSign in. If you need to authorize a different GitHub account, selectChange Accountand sign in with another account.
If you haven't already authorized GitHub access, selectAuthorize. Provide your GitHub credentials and selectSign in. If you need to authorize a different GitHub account, selectChange Accountand sign in with another account.
Select values forOrganization,Repository, andBranch. The values are based on the location of your code.
Select values forOrganization,Repository, andBranch. The values are based on the location of your code.
Review all details and selectSave. A webhook is placed in your chosen repository.
Review all details and selectSave. A webhook is placed in your chosen repository.
When a new commit is pushed to the selected branch, the service pulls your code, builds your application, and deploys it to your function app.
Go to your function app in theAzure portaland selectDeployment Center.
Go to your function app in theAzure portaland selectDeployment Center.
ForSource, selectBitbucket.
ForSource, selectBitbucket.
If you haven't already authorized Bitbucket access, selectAuthorizeand thenGrant access. If requested, provide your Bitbucket credentials and selectSign in. If you need to authorize a different Bitbucket account, selectChange Accountand sign in with another account.
If you haven't already authorized Bitbucket access, selectAuthorizeand thenGrant access. If requested, provide your Bitbucket credentials and selectSign in. If you need to authorize a different Bitbucket account, selectChange Accountand sign in with another account.
Select values forOrganization,Repository, andBranch. The values are based on the location of your code.
Select values forOrganization,Repository, andBranch. The values are based on the location of your code.
Review all details and selectSave. A webhook is placed in your chosen repository.
Review all details and selectSave. A webhook is placed in your chosen repository.
When a new commit is pushed to the selected branch, the service pulls your code, builds your application, and deploys it to your function app.
Go to your function app in theAzure portaland selectDeployment Center.
Go to your function app in theAzure portaland selectDeployment Center.
ForSource, selectLocal Gitand selectSave.
ForSource, selectLocal Gitand selectSave.
A local repository is created in your existing App Service plan, which is accessed from thescmdomain. Copy theGit clone URIand use it to create a clone of this new repository on your local computer.
A local repository is created in your existing App Service plan, which is accessed from thescmdomain. Copy theGit clone URIand use it to create a clone of this new repository on your local computer.
scm
When a new commit is pushed to the local git repository, the service pulls your code, builds your application, and deploys it to your function app.
After deployment finishes, all code from the specified source is deployed to your app. At that point, changes in the deployment source trigger a deployment of those changes to your function app in Azure.
Enable continuous deployment during app creation
Currently, you can configure continuous deployment from GitHub using GitHub Actions when you create your function app in the Azure portal. You can do this on theDeploymenttab in theCreate Function Apppage.
If you want to use a different deployment source or build provider for continuous integration, first create your function app and then return to the portal andset up continuous integration in the Deployment Center.
Enable basic authentication for deployments
In some cases, your function app is created with basic authentication access to thescmendpoint disabled. This blocks publishing by all methods that can't use managed identities to access thescmendpoint. The publishing impacts of having thescmendpoint disabled are detailed inDeploy without basic authentication.
scm
scm
scm
Important
When you use basic authentication, credentials are sent in clear text. To protect these credentials, you must only access thescmendpoint over an encrypted connection (HTTPS) when using basic authentication. For more information, seeSecure deployment.
scm
To enable basic authentication to thescmendpoint:
scm
Azure portal
Azure CLI
In theAzure portal, go to your function app.
In theAzure portal, go to your function app.
On the app's left menu, selectSettings>Configuration>General settings.
On the app's left menu, selectSettings>Configuration>General settings.
SetSCM Basic Auth Publishing CredentialstoOn, and then selectSave.
SetSCM Basic Auth Publishing CredentialstoOn, and then selectSave.
You can use the Azure CLI to turn on basic authentication by using thisaz resource updatecommand to update the resource that controls thescmendpoint.
az resource update
scm
az resource update --resource-group <RESOURCE_GROUP> --name scm --namespace Microsoft.Web --resource-type basicPublishingCredentialsPolicies --parent sites/<APP_NAME> --set properties.allow=true
az resource update --resource-group <RESOURCE_GROUP> --name scm --namespace Microsoft.Web --resource-type basicPublishingCredentialsPolicies --parent sites/<APP_NAME> --set properties.allow=true
In this command, replace the placeholders with your resource group name and app name.
Next steps
Best practices for Azure Functions
Feedback
Was this page helpful?
Additional resources