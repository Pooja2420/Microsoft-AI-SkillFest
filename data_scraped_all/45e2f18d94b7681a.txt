Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Get Started: Configure Ansible on an Azure VM
Article
2024-08-14
13 contributors
In this article
This article shows how to installAnsibleon an Ubuntu VM in Azure.
In this article, you learn how to:
Create a resource group
Create an Ubuntu virtual machine
Install Ansible on the virtual machine
Connect to the virtual machine via SSH
Configure Ansible on the virtual machine
Prerequisites
Azure subscription: If you don't have an Azure subscription, create afree accountbefore you begin.
Azure service principal:Create a service principal, making note of the following values:appId,displayName,password, andtenant.
Create a virtual machine
Create an Azure resource group.Azure CLIAzure PowerShellaz group create --name QuickstartAnsible-rg --location eastusYou might need to replace the--locationparameter with the appropriate value for your environment.New-AzResourceGroup -Name QuickstartAnsible-rg -location eastusYou might need to replace the-locationparameter with the appropriate value for your environment.
Create an Azure resource group.
Azure CLI
Azure PowerShell
az group create --name QuickstartAnsible-rg --location eastus
az group create --name QuickstartAnsible-rg --location eastus
You might need to replace the--locationparameter with the appropriate value for your environment.
--location
New-AzResourceGroup -Name QuickstartAnsible-rg -location eastus
New-AzResourceGroup -Name QuickstartAnsible-rg -location eastus
You might need to replace the-locationparameter with the appropriate value for your environment.
-location
Create the Azure virtual machine for Ansible.Azure CLIAzure PowerShellaz vm create \
--resource-group QuickstartAnsible-rg \
--name QuickstartAnsible-vm \
--image Ubuntu2204 \
--admin-username azureuser \
--admin-password <password>Replace the<password>your password.$adminUsername = "azureuser"
$adminPassword = ConvertTo-SecureString <password> -AsPlainText -Force
$credential = New-Object System.Management.Automation.PSCredential ($adminUsername, $adminPassword);

New-AzVM `
-ResourceGroupName QuickstartAnsible-rg `
-Location eastus `
-Image Ubuntu2204 `
-Name QuickstartAnsible-vm `
-OpenPorts 22 `
-Credential $credentialReplace the<password>your password.
Create the Azure virtual machine for Ansible.
Azure CLI
Azure PowerShell
az vm create \
--resource-group QuickstartAnsible-rg \
--name QuickstartAnsible-vm \
--image Ubuntu2204 \
--admin-username azureuser \
--admin-password <password>
az vm create \
--resource-group QuickstartAnsible-rg \
--name QuickstartAnsible-vm \
--image Ubuntu2204 \
--admin-username azureuser \
--admin-password <password>
Replace the<password>your password.
<password>
$adminUsername = "azureuser"
$adminPassword = ConvertTo-SecureString <password> -AsPlainText -Force
$credential = New-Object System.Management.Automation.PSCredential ($adminUsername, $adminPassword);

New-AzVM `
-ResourceGroupName QuickstartAnsible-rg `
-Location eastus `
-Image Ubuntu2204 `
-Name QuickstartAnsible-vm `
-OpenPorts 22 `
-Credential $credential
$adminUsername = "azureuser"
$adminPassword = ConvertTo-SecureString <password> -AsPlainText -Force
$credential = New-Object System.Management.Automation.PSCredential ($adminUsername, $adminPassword);

New-AzVM `
-ResourceGroupName QuickstartAnsible-rg `
-Location eastus `
-Image Ubuntu2204 `
-Name QuickstartAnsible-vm `
-OpenPorts 22 `
-Credential $credential
Replace the<password>your password.
<password>
Get the public Ip address of the Azure virtual machine.Azure CLIAzure PowerShellaz vm show -d -g QuickstartAnsible-rg -n QuickstartAnsible-vm --query publicIps -o tsv(Get-AzVM -ResourceGroupName QuickstartAnsible-rg QuickstartAnsible-vm-pwsh | Get-AzPublicIpAddress).IpAddress
Get the public Ip address of the Azure virtual machine.
Azure CLI
Azure PowerShell
az vm show -d -g QuickstartAnsible-rg -n QuickstartAnsible-vm --query publicIps -o tsv
az vm show -d -g QuickstartAnsible-rg -n QuickstartAnsible-vm --query publicIps -o tsv
(Get-AzVM -ResourceGroupName QuickstartAnsible-rg QuickstartAnsible-vm-pwsh | Get-AzPublicIpAddress).IpAddress
(Get-AzVM -ResourceGroupName QuickstartAnsible-rg QuickstartAnsible-vm-pwsh | Get-AzPublicIpAddress).IpAddress
Connect to your virtual machine via SSH
Using the SSH command, connect to your virtual machine's public IP address.
ssh azureuser@<vm_ip_address>
ssh azureuser@<vm_ip_address>
Replace the<vm_ip_address>with the appropriate value returned in previous commands.
<vm_ip_address>
Install Ansible on the virtual machine
Ansible with azure.azcollection
Run the following commands to configure Ansible onUbuntu:
#!/bin/bash

sudo apt update

sudo apt install software-properties-common

sudo add-apt-repository --yes --update ppa:ansible/ansible

sudo apt install ansible

# Install Ansible az collection for interacting with Azure. (optional)
ansible-galaxy collection install azure.azcollection --force 

# Install Ansible modules for Azure (optional)
sudo pip3 install -r ~/.ansible/collections/ansible_collections/azure/azcollection/requirements.txt
#!/bin/bash

sudo apt update

sudo apt install software-properties-common

sudo add-apt-repository --yes --update ppa:ansible/ansible

sudo apt install ansible

# Install Ansible az collection for interacting with Azure. (optional)
ansible-galaxy collection install azure.azcollection --force 

# Install Ansible modules for Azure (optional)
sudo pip3 install -r ~/.ansible/collections/ansible_collections/azure/azcollection/requirements.txt
Key points:
Ansible control node requires Python 2 (version 2.7) or Python 3 (versions 3.5 and higher) installed. Ansible 4.0.0 and ansible-core 2.11 has a soft dependency on Python 3.8, but functions with lower versions. However, Ansible 5.0.0 and ansible-core 2.12 will require 3.8 and newer.
Create Azure credentials
To configure the Ansible credentials, you need the following information:
Your Azure subscription ID and tenant ID
The service principal application ID and secret
Configure the Ansible credentials using one of the following techniques:
Option 1: Create an Ansible credentials file
Option 2: Define Ansible environment variables
In this section, you create a local credentials file to provide credentials to Ansible. For security reasons, credential files should only be used in development environments.
For more information about defining Ansible credentials, seeProviding Credentials to Azure Modules.
Once you've successfully connected to the host virtual machine, create and open a file namedcredentials:mkdir ~/.azure
vi ~/.azure/credentials
Once you've successfully connected to the host virtual machine, create and open a file namedcredentials:
credentials
mkdir ~/.azure
vi ~/.azure/credentials
mkdir ~/.azure
vi ~/.azure/credentials
Insert the following lines into the file. Replace the placeholders with the service principal values.[default]
subscription_id=<subscription_id>
client_id=<service_principal_app_id>
secret=<service_principal_password>
tenant=<service_principal_tenant_id>
Insert the following lines into the file. Replace the placeholders with the service principal values.
[default]
subscription_id=<subscription_id>
client_id=<service_principal_app_id>
secret=<service_principal_password>
tenant=<service_principal_tenant_id>
[default]
subscription_id=<subscription_id>
client_id=<service_principal_app_id>
secret=<service_principal_password>
tenant=<service_principal_tenant_id>
Save and close the file.
Save and close the file.
On the host virtual machine, export the service principal values to configure your Ansible credentials.
export AZURE_SUBSCRIPTION_ID=<subscription_id>
export AZURE_CLIENT_ID=<service_principal_app_id>
export AZURE_SECRET=<service_principal_password>
export AZURE_TENANT=<service_principal_tenant_id>
export AZURE_SUBSCRIPTION_ID=<subscription_id>
export AZURE_CLIENT_ID=<service_principal_app_id>
export AZURE_SECRET=<service_principal_password>
export AZURE_TENANT=<service_principal_tenant_id>
Test Ansible installation
You now have a virtual machine with Ansible installed and configured!
This section shows how to create a test resource group within your new Ansible configuration. If you don't need to do that, you can skip this section.
Option 1: Use an ad-hoc ansible command
Option 2: Write and run an Ansible playbook
Run the following ad-hoc Ansible command to create a resource group:
#Ansible with azure.azcollection
ansible localhost -m azure.azcollection.azure_rm_resourcegroup -a "name=<resource_group_name> location=<location>"
#Ansible with azure.azcollection
ansible localhost -m azure.azcollection.azure_rm_resourcegroup -a "name=<resource_group_name> location=<location>"
Replace<resource_group_name>and<location>with your values.
<resource_group_name>
<location>
Save the following code ascreate_rg.yml.Ansible with azure.azcollection- hosts: localhost
  connection: local
  collections:
    - azure.azcollection
  tasks:
    - name: Creating resource group
      azure_rm_resourcegroup:
        name: "<resource_group_name"
        location: "<location>"Replace<resource_group_name>and<location>with your values.
Save the following code ascreate_rg.yml.
create_rg.yml
Ansible with azure.azcollection
- hosts: localhost
  connection: local
  collections:
    - azure.azcollection
  tasks:
    - name: Creating resource group
      azure_rm_resourcegroup:
        name: "<resource_group_name"
        location: "<location>"
- hosts: localhost
  connection: local
  collections:
    - azure.azcollection
  tasks:
    - name: Creating resource group
      azure_rm_resourcegroup:
        name: "<resource_group_name"
        location: "<location>"
Replace<resource_group_name>and<location>with your values.
<resource_group_name>
<location>
Run the playbook usingansible-playbook.ansible-playbook create_rg.yml
Run the playbook usingansible-playbook.
ansible-playbook create_rg.yml
ansible-playbook create_rg.yml
Read more about theazure.azcollection.
Clean up resources
Ansible
Azure CLI
Azure PowerShell
Save the following code asdelete_rg.yml.---
- hosts: localhost
  tasks:
    - name: Deleting resource group - "{{ name }}"
      azure_rm_resourcegroup:
        name: "{{ name }}"
        state: absent
      register: rg
    - debug:
        var: rg
Save the following code asdelete_rg.yml.
delete_rg.yml
---
- hosts: localhost
  tasks:
    - name: Deleting resource group - "{{ name }}"
      azure_rm_resourcegroup:
        name: "{{ name }}"
        state: absent
      register: rg
    - debug:
        var: rg
---
- hosts: localhost
  tasks:
    - name: Deleting resource group - "{{ name }}"
      azure_rm_resourcegroup:
        name: "{{ name }}"
        state: absent
      register: rg
    - debug:
        var: rg
Run the playbook using theansible-playbookcommand. Replace the placeholder with the name of the resource group to be deleted. All resources within the resource group will be deleted.ansible-playbook delete_rg.yml --extra-vars "name=<resource_group>"Key points:Because of theregistervariable anddebugsection of the playbook, the results display when the command finishes.
Run the playbook using theansible-playbookcommand. Replace the placeholder with the name of the resource group to be deleted. All resources within the resource group will be deleted.
ansible-playbook delete_rg.yml --extra-vars "name=<resource_group>"
ansible-playbook delete_rg.yml --extra-vars "name=<resource_group>"
Key points:
Because of theregistervariable anddebugsection of the playbook, the results display when the command finishes.
register
debug
Runaz group deleteto delete the resource group. All resources within the resource group will be deleted.az group delete --name <resource_group>
Runaz group deleteto delete the resource group. All resources within the resource group will be deleted.
az group delete --name <resource_group>
az group delete --name <resource_group>
Verify that the resource group was deleted by usingaz group show.az group show --name <resource_group>
Verify that the resource group was deleted by usingaz group show.
az group show --name <resource_group>
az group show --name <resource_group>
RunRemove-AzResourceGroupto delete the resource group. All resources within the resource group will be deleted.Remove-AzResourceGroup -Name <resource_group>
RunRemove-AzResourceGroupto delete the resource group. All resources within the resource group will be deleted.
Remove-AzResourceGroup -Name <resource_group>
Remove-AzResourceGroup -Name <resource_group>
Verify that the resource group was deleted by usingGet-AzResourceGroup.Get-AzResourceGroup -Name <resource_group>
Verify that the resource group was deleted by usingGet-AzResourceGroup.
Get-AzResourceGroup -Name <resource_group>
Get-AzResourceGroup -Name <resource_group>
Next steps
Ansible on Azure
Feedback
Was this page helpful?
Additional resources