Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Add an API to Azure Static Web Apps with Azure Functions
Article
2024-11-25
25 contributors
In this article
You can add serverless APIs to Azure Static Web Apps powered by Azure Functions. This article demonstrates how to add and deploy an API to an Azure Static Web Apps site.
Note
The functions provided by default in Static Web Apps are pre-configured to provide secure API endpoints and only support HTTP-triggered functions. SeeAPI support with Azure Functionsfor information on how they differ from standalone Azure Functions apps.
Prerequisites
Azure account with an active subscription.If you don't have an account, you cancreate one for free.
If you don't have an account, you cancreate one for free.
Visual Studio Code.
Azure Static Web Apps extensionfor Visual Studio Code.
Azure Functions extensionfor Visual Studio Code.
Node.js v18to run the frontend app and API.
Tip
You can use thenvmtool to manage multiple versions of Node.js on your development system.
On Windows,NVM for Windowscan be installed via Winget.
Create the static web app
Before adding an API, create and deploy a frontend application to Azure Static Web Apps by following theBuilding your first static site with Azure Static Web Appsquickstart.
Once you have a frontend application deployed to Azure Static Web Apps,clone your app repository. For example, you can clone your repository using thegitcommand line.
git
Before you run the following command, make sure to replace<YOUR_GITHUB_USERNAME>with your GitHub username.
<YOUR_GITHUB_USERNAME>
git clone https://github.com/<YOUR_GITHUB_USERNAME>/my-first-static-web-app
git clone https://github.com/<YOUR_GITHUB_USERNAME>/my-first-static-web-app
In Visual Studio Code, open the root of your app's repository. The folder structure contains the source for your frontend app and the Static Web Apps GitHub workflow in.github/workflowsfolder.
âââ .github
â   âââ workflows
â       âââ azure-static-web-apps-<DEFAULT_HOSTNAME>.yml
â
âââ (folders and files from your static web app)
âââ .github
â   âââ workflows
â       âââ azure-static-web-apps-<DEFAULT_HOSTNAME>.yml
â
âââ (folders and files from your static web app)
Create the API
You create an Azure Functions project for your static web app's API. By default, the Static Web Apps Visual Studio Code extension creates the project in a folder namedapiat the root of your repository.
PressF1to open the Command Palette.
PressF1to open the Command Palette.
SelectAzure Static Web Apps: Create HTTP Function.... If you're prompted to install the Azure Functions extension, install it and rerun this command.
SelectAzure Static Web Apps: Create HTTP Function.... If you're prompted to install the Azure Functions extension, install it and rerun this command.
When prompted, enter the following values:PromptValueSelect a languageJavaScriptSelect a programming modelV4Provide a function namemessageTipYou can learn more about the differences between programming models in theAzure Functions developer guideAn Azure Functions project is generated with an HTTP triggered function. Your app now has a project structure similar to the following example.âââ .github
â   âââ workflows
â       âââ azure-static-web-apps-<DEFAULT_HOSTNAME>.yml
â
âââ api
âââ âââsrc
â   â  â functions
â   â  â  âââ message.js
â   â  âââ index.js
â   âââ .funcignore
â   âââ host.json
â   âââ local.settings.json
â   âââ package-lock.json
â   âââ package.json
â
âââ (...plus other folders and files from your static web app)
When prompted, enter the following values:
Tip
You can learn more about the differences between programming models in theAzure Functions developer guide
An Azure Functions project is generated with an HTTP triggered function. Your app now has a project structure similar to the following example.
âââ .github
â   âââ workflows
â       âââ azure-static-web-apps-<DEFAULT_HOSTNAME>.yml
â
âââ api
âââ âââsrc
â   â  â functions
â   â  â  âââ message.js
â   â  âââ index.js
â   âââ .funcignore
â   âââ host.json
â   âââ local.settings.json
â   âââ package-lock.json
â   âââ package.json
â
âââ (...plus other folders and files from your static web app)
âââ .github
â   âââ workflows
â       âââ azure-static-web-apps-<DEFAULT_HOSTNAME>.yml
â
âââ api
âââ âââsrc
â   â  â functions
â   â  â  âââ message.js
â   â  âââ index.js
â   âââ .funcignore
â   âââ host.json
â   âââ local.settings.json
â   âââ package-lock.json
â   âââ package.json
â
âââ (...plus other folders and files from your static web app)
Next, change themessagefunction to return a message to the frontend. Update the function insrc/functions/message.jswith the following code.const { app } = require('@azure/functions');

app.http('message', {
    methods: ['GET', 'POST'],
    authLevel: 'anonymous',
    handler: async (request, context) => {
        return { body: `Hello, from the API!` };
    }
});
Next, change themessagefunction to return a message to the frontend. Update the function insrc/functions/message.jswith the following code.
message
const { app } = require('@azure/functions');

app.http('message', {
    methods: ['GET', 'POST'],
    authLevel: 'anonymous',
    handler: async (request, context) => {
        return { body: `Hello, from the API!` };
    }
});
const { app } = require('@azure/functions');

app.http('message', {
    methods: ['GET', 'POST'],
    authLevel: 'anonymous',
    handler: async (request, context) => {
        return { body: `Hello, from the API!` };
    }
});
Tip
You can add more API functions by running theAzure Static Web Apps: Create HTTP Function...command again.
Update the frontend app to call the API
Update your frontend app to call the API at/api/messageand display the response message.
/api/message
If you used the quickstarts to create the app, use the following instructions to apply the updates.
No Framework
Angular
React
Vue
Update the content of thesrc/index.htmlfile with the following code to fetch the text from the API function and display it on the screen.
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="styles.css">
    <title>Vanilla JavaScript App</title>
</head>

<body>
    <main>
    <h1>Vanilla JavaScript App</h1>
    <p>Loading content from the API: <b id="name">...</b></p>
    </main>

    <script>
    (async function() {
        const { text } = await( await fetch(`/api/message`)).json();
        document.querySelector('#name').textContent = text;
    }());
    </script>
</body>

</html>
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="styles.css">
    <title>Vanilla JavaScript App</title>
</head>

<body>
    <main>
    <h1>Vanilla JavaScript App</h1>
    <p>Loading content from the API: <b id="name">...</b></p>
    </main>

    <script>
    (async function() {
        const { text } = await( await fetch(`/api/message`)).json();
        document.querySelector('#name').textContent = text;
    }());
    </script>
</body>

</html>
Update the content ofsrc/app/app.module.tswith the following code to enableHttpClientin your app.import { BrowserModule } from "@angular/platform-browser";
import { NgModule } from "@angular/core";
import { HttpClientModule } from '@angular/common/http';

import { AppComponent } from "./app.component";

@NgModule({
  declarations: [AppComponent],
  imports: [BrowserModule, HttpClientModule],
  bootstrap: [AppComponent]
})
export class AppModule {}
Update the content ofsrc/app/app.module.tswith the following code to enableHttpClientin your app.
HttpClient
import { BrowserModule } from "@angular/platform-browser";
import { NgModule } from "@angular/core";
import { HttpClientModule } from '@angular/common/http';

import { AppComponent } from "./app.component";

@NgModule({
  declarations: [AppComponent],
  imports: [BrowserModule, HttpClientModule],
  bootstrap: [AppComponent]
})
export class AppModule {}
import { BrowserModule } from "@angular/platform-browser";
import { NgModule } from "@angular/core";
import { HttpClientModule } from '@angular/common/http';

import { AppComponent } from "./app.component";

@NgModule({
  declarations: [AppComponent],
  imports: [BrowserModule, HttpClientModule],
  bootstrap: [AppComponent]
})
export class AppModule {}
Update the content ofsrc/app/app.component.tswith the following code to fetch the text from the API function and display it on the screen.import { HttpClient } from '@angular/common/http';
import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  template: `<div>{{message}}</div>`,
})
export class AppComponent {
  message = '';

  constructor(private http: HttpClient) {
    this.http.get('/api/message')
      .subscribe((resp: any) => this.message = resp.text);
  }
}
Update the content ofsrc/app/app.component.tswith the following code to fetch the text from the API function and display it on the screen.
import { HttpClient } from '@angular/common/http';
import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  template: `<div>{{message}}</div>`,
})
export class AppComponent {
  message = '';

  constructor(private http: HttpClient) {
    this.http.get('/api/message')
      .subscribe((resp: any) => this.message = resp.text);
  }
}
import { HttpClient } from '@angular/common/http';
import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  template: `<div>{{message}}</div>`,
})
export class AppComponent {
  message = '';

  constructor(private http: HttpClient) {
    this.http.get('/api/message')
      .subscribe((resp: any) => this.message = resp.text);
  }
}
Update the content ofsrc/App.jswith the following code to fetch the text from the API function and display it on the screen.
import React, { useState, useEffect } from 'react';

function App() {
  const [data, setData] = useState('');

  useEffect(() => {
    (async function () {
      const { text } = await( await fetch(`/api/message`)).json();
      setData(text);
    })();
  });

  return <div>{data}</div>;
}

export default App;
import React, { useState, useEffect } from 'react';

function App() {
  const [data, setData] = useState('');

  useEffect(() => {
    (async function () {
      const { text } = await( await fetch(`/api/message`)).json();
      setData(text);
    })();
  });

  return <div>{data}</div>;
}

export default App;
Update the content ofsrc/App.vuewith the following code to fetch the text from the API function and display it on the screen.
<template>
  <div>{{ message }}</div>
</template>

<script>
export default {
  name: "App",
  data() {
    return {
      message: ""
    };
  },
  async mounted() {
    const { text } = await (await fetch("/api/message")).json();
    this.message = text;
  }
};
</script>
<template>
  <div>{{ message }}</div>
</template>

<script>
export default {
  name: "App",
  data() {
    return {
      message: ""
    };
  },
  async mounted() {
    const { text } = await (await fetch("/api/message")).json();
    this.message = text;
  }
};
</script>
Run the frontend and API locally
To run your frontend app and API together locally, Azure Static Web Apps provides a CLI that emulates the cloud environment. The CLI uses the Azure Functions Core Tools to run the API.
Install command line tools
Ensure you have the necessary command line tools installed.
Important
To improve the security of deployments from theStatic Web Apps CLI, a breaking change was introduced that requires you to upgrade to the latest version (2.0.2) of the Static Web Apps CLI by Jan. 15th, 2025.
npm install -g @azure/static-web-apps-cli
npm install -g @azure/static-web-apps-cli
Tip
If you don't want to install theswacommand line globally, you can usenpx swainstead ofswain the following instructions.
swa
npx swa
swa
Build frontend app
If your app uses a framework, build the app to generate the output before running the Static Web Apps CLI.
No Framework
Angular
React
Vue
There's no need to build the app.
Install npm dependencies and build the app into thedist/angular-basicfolder.
npm install
npm run build --prod
npm install
npm run build --prod
Install npm dependencies and build the app into thebuildfolder.
npm install
npm run build
npm install
npm run build
Install npm dependencies and build the app into thedistfolder.
npm install
npm run build
npm install
npm run build
Run the application locally
Run the frontend app and API together by starting the app with the Static Web Apps CLI. Running the two parts of your application this way allows the CLI to serve your frontend's build output from a folder, and makes the API accessible to the running app.
In root of your repository, start the Static Web Apps CLI with thestartcommand. Adjust the arguments if your app has a different folder structure.No FrameworkAngularReactVuePass the current folder (src) and the API folder (api) to the CLI.swa start src --api-location apiPass the build output folder (dist/angular-basic) and the API folder (api) to the CLI.swa start dist/angular-basic --api-location apiPass the build output folder (build) and the API folder (api) to the CLI.swa start build --api-location apiPass the build output folder (dist) and the API folder (api) to the CLI.swa start dist --api-location api
In root of your repository, start the Static Web Apps CLI with thestartcommand. Adjust the arguments if your app has a different folder structure.
start
No Framework
Angular
React
Vue
Pass the current folder (src) and the API folder (api) to the CLI.
src
api
swa start src --api-location api
swa start src --api-location api
Pass the build output folder (dist/angular-basic) and the API folder (api) to the CLI.
dist/angular-basic
api
swa start dist/angular-basic --api-location api
swa start dist/angular-basic --api-location api
Pass the build output folder (build) and the API folder (api) to the CLI.
build
api
swa start build --api-location api
swa start build --api-location api
Pass the build output folder (dist) and the API folder (api) to the CLI.
dist
api
swa start dist --api-location api
swa start dist --api-location api
Windows Firewall might prompt to request that the Azure Functions runtime can access the Internet. SelectAllow.
Windows Firewall might prompt to request that the Azure Functions runtime can access the Internet. SelectAllow.
When the CLI processes start, access your app athttp://localhost:4280/. Notice how the page calls the API and displays its output,Hello from the API.
When the CLI processes start, access your app athttp://localhost:4280/. Notice how the page calls the API and displays its output,Hello from the API.
http://localhost:4280/
Hello from the API
To stop the CLI, typeCtrl + C.
To stop the CLI, typeCtrl + C.
Add API location to workflow
Before you can deploy your app to Azure, update your repository's GitHub Actions workflow with the correct location of your API folder.
Open your workflow at.github/workflows/azure-static-web-apps-<DEFAULT-HOSTNAME>.yml.
Open your workflow at.github/workflows/azure-static-web-apps-<DEFAULT-HOSTNAME>.yml.
Search for the propertyapi_locationand set the value toapi.###### Repository/Build Configurations - These values can be configured to match your app requirements. ######
# For more information regarding Static Web App workflow configurations, please visit: https://aka.ms/swaworkflowconfig
app_location: "src" # App source code path
api_location: "api" # Api source code path - optional
output_location: "" # Built app content directory - optional
###### End of Repository/Build Configurations ######Note: The above values ofapi_location,app_location,output_locationare for no framework and these values change based on your framework.
Search for the propertyapi_locationand set the value toapi.
api_location
api
###### Repository/Build Configurations - These values can be configured to match your app requirements. ######
# For more information regarding Static Web App workflow configurations, please visit: https://aka.ms/swaworkflowconfig
app_location: "src" # App source code path
api_location: "api" # Api source code path - optional
output_location: "" # Built app content directory - optional
###### End of Repository/Build Configurations ######
###### Repository/Build Configurations - These values can be configured to match your app requirements. ######
# For more information regarding Static Web App workflow configurations, please visit: https://aka.ms/swaworkflowconfig
app_location: "src" # App source code path
api_location: "api" # Api source code path - optional
output_location: "" # Built app content directory - optional
###### End of Repository/Build Configurations ######
Note: The above values ofapi_location,app_location,output_locationare for no framework and these values change based on your framework.
api_location
app_location
output_location
Save the file.
Save the file.
Deploy changes
To publish changes to your static web app in Azure, commit and push your code to the remote GitHub repository.
PressF1to open the Command Palette.
PressF1to open the Command Palette.
Select theGit: Commit Allcommand.
Select theGit: Commit Allcommand.
When prompted for a commit message, enterfeat: add APIand commit all changes to your local git repository.
When prompted for a commit message, enterfeat: add APIand commit all changes to your local git repository.
PressF1to open the Command Palette.
PressF1to open the Command Palette.
Select theGit: pushcommand.Your changes are pushed to the remote repository in GitHub, triggering the Static Web Apps GitHub Actions workflow to build and deploy your app.
Select theGit: pushcommand.
Your changes are pushed to the remote repository in GitHub, triggering the Static Web Apps GitHub Actions workflow to build and deploy your app.
Open your repository in GitHub to monitor the status of your workflow run.
Open your repository in GitHub to monitor the status of your workflow run.
When the workflow run completes, visit your static web app to view your changes.
When the workflow run completes, visit your static web app to view your changes.
Next steps
Configure app settings
Feedback
Was this page helpful?
Additional resources