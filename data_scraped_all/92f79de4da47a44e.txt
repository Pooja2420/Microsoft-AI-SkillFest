Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Connect to Azure AI Search using roles
Article
2025-03-31
19 contributors
In this article
Azure provides a global authentication androle-based access controlthrough Microsoft Entra ID for all services running on the platform. In this article, learn which roles provide access to search content and administration on Azure AI Search.
In Azure AI Search, you can assign Azure roles for:
Service administration
Development or write-access to a search service
Read-only access for queries
Scoped access to a single index
Per-user access over search results (sometimes referred to asrow-level securityordocument-level security) isn't supported through role assignments. As a workaround,create security filtersthat trim results by user identity, removing documents for which the requestor shouldn't have access. See thisEnterprise chat sample using RAGfor a demonstration.
Role assignments are cumulative and pervasive across all tools and client libraries. You can assign roles using any of thesupported approachesdescribed in Azure role-based access control documentation.
Role-based access is optional, but recommended. The alternative iskey-based authentication, which is the default.
Prerequisites
A search service in any region, on any tier,enabled for role-based access.
A search service in any region, on any tier,enabled for role-based access.
Owner, User Access Administrator, Role-based Access Control Administrator, or a custom role withMicrosoft.Authorization/roleAssignments/writepermissions.
Owner, User Access Administrator, Role-based Access Control Administrator, or a custom role withMicrosoft.Authorization/roleAssignments/writepermissions.
How to assign roles in the Azure portal
The following steps work for all role assignments.
Sign in to theAzure portal.
Sign in to theAzure portal.
Navigate to your search service.
Navigate to your search service.
Enable role-based access.
Enable role-based access.
SelectAccess Control (IAM)in the left pane.
SelectAccess Control (IAM)in the left pane.
Select+ Add>Add role assignmentto start theAdd role assignmentwizard.
Select+ Add>Add role assignmentto start theAdd role assignmentwizard.

Select a role. You can assign multiple security principals, whether users or managed identities to a role in one pass through the wizard, but you have to repeat these steps for each role you define.
Select a role. You can assign multiple security principals, whether users or managed identities to a role in one pass through the wizard, but you have to repeat these steps for each role you define.
On theMemberstab, select the Microsoft Entra user or group identity. If you're setting up permissions for another Azure service, select a system or user-managed identity.
On theMemberstab, select the Microsoft Entra user or group identity. If you're setting up permissions for another Azure service, select a system or user-managed identity.
On theReview + assigntab, selectReview + assignto assign the role.
On theReview + assigntab, selectReview + assignto assign the role.
Built-in roles used in search
Roles are a collection of permissions on specific operations affecting either data plane or control plane layers.
Data planerefers to operations against the search service endpoint, such as indexing or queries, or any other operation specified in theSearch Service REST APIsor equivalent Azure SDK client libraries.
Control planerefers to Azure resource management, such as creating or configuring a search service.
The following roles are built in. If these roles are insufficient,create a custom role.
Microsoft.Search/searchServices/*
Combine these roles to get sufficient permissions for your use case.
Note
If you disable Azure role-based access, built-in roles for the control plane (Owner, Contributor, Reader) continue to be available. Disabling role-based access removes just the data-related permissions associated with those roles. If data plane roles are disabled, Search Service Contributor is equivalent to control-plane Contributor.
Summary
1In the Azure portal, an Owner or Contributor can run the Import data wizards that create and load indexes, even though they can't upload documents in other clients. Data connections in the wizard are made by the search service itself and not individual users. The wizards have theMicrosoft.Search/searchServices/indexes/documents/*permission necessary for completing this task.
Microsoft.Search/searchServices/indexes/documents/*
Owners and Contributors grant the same permissions, except that only Owners can assign roles.
Assign roles
In this section, assign roles for:
Service administration
Development or write-access to a search service
Read-only access for queries
Assign roles for service administration
As a service administrator, you can create and configure a search service, and perform all control plane operations described in theManagement REST APIor equivalent client libraries. If you're an Owner or Contributor, you can also perform most data planeSearch REST APItasks in the Azure portal.
Owner
Contributor
Reader
Azure portal
PowerShell
Sign in to theAzure portal.
Sign in to theAzure portal.
Assign these roles:Owner (full access to all data plane and control plane operations, except for query permissions)Contributor (same as Owner, except for permissions to assign roles)Reader (acceptable for monitoring and viewing metrics)
Assign these roles:
Owner (full access to all data plane and control plane operations, except for query permissions)
Contributor (same as Owner, except for permissions to assign roles)
Reader (acceptable for monitoring and viewing metrics)
When youuse PowerShell to assign roles, callNew-AzRoleAssignment, providing the Azure user or group name, and the scope of the assignment.
This example creates a role assignment scoped to a search service:
New-AzRoleAssignment -SignInName <email> `
    -RoleDefinitionName "Reader" `
    -Scope  "/subscriptions/<subscription>/resourceGroups/<resource-group>/providers/Microsoft.Search/searchServices/<search-service>"
New-AzRoleAssignment -SignInName <email> `
    -RoleDefinitionName "Reader" `
    -Scope  "/subscriptions/<subscription>/resourceGroups/<resource-group>/providers/Microsoft.Search/searchServices/<search-service>"
Assign roles for development
Role assignments are global across the search service. Toscope permissions to a single index, use PowerShell or the Azure CLI to create a custom role.
Search Service Contributor
Search Index Data Contributor
Search Index Data Reader
Another combination of roles that provides full access is Contributor or Owner, plus Search Index Data Reader.
Important
If you configure role-based access for a service or index and you also provide an API key on the request, the search service uses the API key to authenticate.
Azure portal
PowerShell
Sign in to theAzure portal.
Sign in to theAzure portal.
Assign these roles:Search Service Contributor (create-read-update-delete operations on indexes, indexers, skillsets, and other top-level objects)Search Index Data Contributor (load documents and run indexing jobs)Search Index Data Reader (query an index)
Assign these roles:
Search Service Contributor (create-read-update-delete operations on indexes, indexers, skillsets, and other top-level objects)
Search Index Data Contributor (load documents and run indexing jobs)
Search Index Data Reader (query an index)
When youuse PowerShell to assign roles, callNew-AzRoleAssignment, providing the Azure user or group name, and the scope of the assignment.
This example creates a role assignment scoped to a search service:
New-AzRoleAssignment -SignInName <email> `
    -RoleDefinitionName "Search Index Data Contributor" `
    -Scope  "/subscriptions/<subscription>/resourceGroups/<resource-group>/providers/Microsoft.Search/searchServices/<search-service>"
New-AzRoleAssignment -SignInName <email> `
    -RoleDefinitionName "Search Index Data Contributor" `
    -Scope  "/subscriptions/<subscription>/resourceGroups/<resource-group>/providers/Microsoft.Search/searchServices/<search-service>"
This example creates a role assignment scoped to a specific index:
New-AzRoleAssignment -SignInName <email> `
    -RoleDefinitionName "Search Index Data Contributor" `
    -Scope  "/subscriptions/<subscription>/resourceGroups/<resource-group>/providers/Microsoft.Search/searchServices/<search-service>/indexes/<index-name>"
New-AzRoleAssignment -SignInName <email> `
    -RoleDefinitionName "Search Index Data Contributor" `
    -Scope  "/subscriptions/<subscription>/resourceGroups/<resource-group>/providers/Microsoft.Search/searchServices/<search-service>/indexes/<index-name>"
Assign roles for read-only queries
Use the Search Index Data Reader role for apps and processes that only need read-access to an index.
Search Index Data Reader
This is a very specific role. It grantsGET or POST accessto thedocuments collection of a search indexfor search, autocomplete, and suggestions. It doesn't support GET or LIST operations on an index or other top-level objects, or GET service statistics.
This section provides basic steps for setting up the role assignment and is here for completeness, but we recommendUse Azure AI Search without keysfor comprehensive instructions on configuring your app for role-based access.
Azure portal
PowerShell
Sign in to theAzure portal.
Sign in to theAzure portal.
Assign theSearch Index Data Readerrole.
Assign theSearch Index Data Readerrole.
Whenusing PowerShell to assign roles, callNew-AzRoleAssignment, providing the Azure user or group name, and the scope of the assignment.
Get your subscription ID, search service resource group, and search service name.
Get your subscription ID, search service resource group, and search service name.
Get the object identifier of your Azure service, such as Azure OpenAI.Get-AzADServicePrincipal -SearchString <YOUR AZURE OPENAI RESOURCE NAME>
Get the object identifier of your Azure service, such as Azure OpenAI.
Get-AzADServicePrincipal -SearchString <YOUR AZURE OPENAI RESOURCE NAME>
Get-AzADServicePrincipal -SearchString <YOUR AZURE OPENAI RESOURCE NAME>
Get the role definition and review the permissions to make sure this is the role you want.Get-AzRoleDefinition -Name "Search Index Data Reader"
Get the role definition and review the permissions to make sure this is the role you want.
Get-AzRoleDefinition -Name "Search Index Data Reader"
Get-AzRoleDefinition -Name "Search Index Data Reader"
Create the role assignment, substituting valid values for the placeholders.New-AzRoleAssignment -ObjectId YOUR-AZURE-OPENAI-OBJECT-ID -RoleDefinitionName "Search Index Data Reader" -Scope /subscriptions/YOUR-SUBSCRIPTION-ID/resourcegroups/YOUR-RESOURCE-GROUP/providers/Microsoft.Search/searchServices/YOUR-SEARCH-SERVICE-NAME
Create the role assignment, substituting valid values for the placeholders.
New-AzRoleAssignment -ObjectId YOUR-AZURE-OPENAI-OBJECT-ID -RoleDefinitionName "Search Index Data Reader" -Scope /subscriptions/YOUR-SUBSCRIPTION-ID/resourcegroups/YOUR-RESOURCE-GROUP/providers/Microsoft.Search/searchServices/YOUR-SEARCH-SERVICE-NAME
New-AzRoleAssignment -ObjectId YOUR-AZURE-OPENAI-OBJECT-ID -RoleDefinitionName "Search Index Data Reader" -Scope /subscriptions/YOUR-SUBSCRIPTION-ID/resourcegroups/YOUR-RESOURCE-GROUP/providers/Microsoft.Search/searchServices/YOUR-SEARCH-SERVICE-NAME
Here's an example of a role assignment scoped to a specific index:New-AzRoleAssignment -ObjectId YOUR-AZURE-OPENAI-OBJECT-ID `
    -RoleDefinitionName "Search Index Data Reader" `
    -Scope /subscriptions/YOUR-SUBSCRIPTION-ID/resourcegroups/YOUR-RESOURCE-GROUP/providers/Microsoft.Search/searchServices/YOUR-SEARCH-SERVICE-NAME/indexes/YOUR-INDEX-NAME
Here's an example of a role assignment scoped to a specific index:
New-AzRoleAssignment -ObjectId YOUR-AZURE-OPENAI-OBJECT-ID `
    -RoleDefinitionName "Search Index Data Reader" `
    -Scope /subscriptions/YOUR-SUBSCRIPTION-ID/resourcegroups/YOUR-RESOURCE-GROUP/providers/Microsoft.Search/searchServices/YOUR-SEARCH-SERVICE-NAME/indexes/YOUR-INDEX-NAME
New-AzRoleAssignment -ObjectId YOUR-AZURE-OPENAI-OBJECT-ID `
    -RoleDefinitionName "Search Index Data Reader" `
    -Scope /subscriptions/YOUR-SUBSCRIPTION-ID/resourcegroups/YOUR-RESOURCE-GROUP/providers/Microsoft.Search/searchServices/YOUR-SEARCH-SERVICE-NAME/indexes/YOUR-INDEX-NAME
Test role assignments
Use a client to test role assignments. Remember that roles are cumulative and inherited roles that are scoped to the subscription or resource group level can't be deleted or denied at the resource (search service) level.
Configure your application for keyless connectionsand have role assignments in place before testing.
Azure portal
REST API
.NET
Python
JavaScript
Java
Sign in to theAzure portal.
Sign in to theAzure portal.
Navigate to your search service.
Navigate to your search service.
On the Overview page, select theIndexestab:Search Service Contributors can view and create any object, but can't load documents or query an index. To verify permissions,create a search index.Search Index Data Contributors can load documents. There's no load documents option in the Azure portal outside of Import data wizard, but you canreset and run an indexerto confirm document load permissions.Search Index Data Readers can query the index. To verify permissions, useSearch explorer. You should be able to send queries and view results, but you shouldn't be able to view the index definition or create one.
On the Overview page, select theIndexestab:
Search Service Contributors can view and create any object, but can't load documents or query an index. To verify permissions,create a search index.
Search Service Contributors can view and create any object, but can't load documents or query an index. To verify permissions,create a search index.
Search Index Data Contributors can load documents. There's no load documents option in the Azure portal outside of Import data wizard, but you canreset and run an indexerto confirm document load permissions.
Search Index Data Contributors can load documents. There's no load documents option in the Azure portal outside of Import data wizard, but you canreset and run an indexerto confirm document load permissions.
Search Index Data Readers can query the index. To verify permissions, useSearch explorer. You should be able to send queries and view results, but you shouldn't be able to view the index definition or create one.
Search Index Data Readers can query the index. To verify permissions, useSearch explorer. You should be able to send queries and view results, but you shouldn't be able to view the index definition or create one.
This approach assumes Visual Studio Code with a REST client extension.
Open a command shell for Azure CLI and sign in to your Azure subscription.az login
Open a command shell for Azure CLI and sign in to your Azure subscription.
az login
az login
Get your tenant ID and subscription ID. The ID is used as a variable in a future step.az account show
Get your tenant ID and subscription ID. The ID is used as a variable in a future step.
az account show
az account show
Get an access token.az account get-access-token --query accessToken --output tsv
Get an access token.
az account get-access-token --query accessToken --output tsv
az account get-access-token --query accessToken --output tsv
Paste these variables in a new text file in Visual Studio Code.@baseUrl = PASTE-YOUR-SEARCH-SERVICE-URL-HERE
@index-name = PASTE-YOUR-INDEX-NAME-HERE
@token = PASTE-YOUR-TOKEN-HERE
Paste these variables in a new text file in Visual Studio Code.
@baseUrl = PASTE-YOUR-SEARCH-SERVICE-URL-HERE
@index-name = PASTE-YOUR-INDEX-NAME-HERE
@token = PASTE-YOUR-TOKEN-HERE
@baseUrl = PASTE-YOUR-SEARCH-SERVICE-URL-HERE
@index-name = PASTE-YOUR-INDEX-NAME-HERE
@token = PASTE-YOUR-TOKEN-HERE
Paste and then send a request that uses the variables you've specified. For the "Search Index Data Reader" role, you can send a query. You can use anysupported API version.POST https://{{baseUrl}}/indexes/{{index-name}}/docs/search?api-version=2024-07-01 HTTP/1.1
  Content-type: application/json
  Authorization: Bearer {{token}}

    {
         "queryType": "simple",
         "search": "motel",
         "filter": "",
         "select": "HotelName,Description,Category,Tags",
         "count": true
     }
Paste and then send a request that uses the variables you've specified. For the "Search Index Data Reader" role, you can send a query. You can use anysupported API version.
POST https://{{baseUrl}}/indexes/{{index-name}}/docs/search?api-version=2024-07-01 HTTP/1.1
  Content-type: application/json
  Authorization: Bearer {{token}}

    {
         "queryType": "simple",
         "search": "motel",
         "filter": "",
         "select": "HotelName,Description,Category,Tags",
         "count": true
     }
POST https://{{baseUrl}}/indexes/{{index-name}}/docs/search?api-version=2024-07-01 HTTP/1.1
  Content-type: application/json
  Authorization: Bearer {{token}}

    {
         "queryType": "simple",
         "search": "motel",
         "filter": "",
         "select": "HotelName,Description,Category,Tags",
         "count": true
     }
For more information on how to acquire a token for a specific environment, seeManage a Azure AI Search service with REST APIsandMicrosoft identity platform authentication libraries.
Use theAzure.Search.Documentspackage.
Use theAzure.Search.Documentspackage.
UseAzure.Identity for .NETfor token authentication. Microsoft recommendsDefaultAzureCredential()for most scenarios.
UseAzure.Identity for .NETfor token authentication. Microsoft recommendsDefaultAzureCredential()for most scenarios.
DefaultAzureCredential()
Here's an example of a client connection usingDefaultAzureCredential().// Create a SearchIndexClient to send create/delete index commands
SearchIndexClient adminClient = new SearchIndexClient(serviceEndpoint, new DefaultAzureCredential());

// Create a SearchClient to load and query documents
SearchClient srchclient = new SearchClient(serviceEndpoint, indexName, new DefaultAzureCredential());
Here's an example of a client connection usingDefaultAzureCredential().
DefaultAzureCredential()
// Create a SearchIndexClient to send create/delete index commands
SearchIndexClient adminClient = new SearchIndexClient(serviceEndpoint, new DefaultAzureCredential());

// Create a SearchClient to load and query documents
SearchClient srchclient = new SearchClient(serviceEndpoint, indexName, new DefaultAzureCredential());
// Create a SearchIndexClient to send create/delete index commands
SearchIndexClient adminClient = new SearchIndexClient(serviceEndpoint, new DefaultAzureCredential());

// Create a SearchClient to load and query documents
SearchClient srchclient = new SearchClient(serviceEndpoint, indexName, new DefaultAzureCredential());
Here's another example of usingclient secret credential:var tokenCredential =  new ClientSecretCredential(aadTenantId, aadClientId, aadSecret);
SearchClient srchclient = new SearchClient(serviceEndpoint, indexName, tokenCredential);
Here's another example of usingclient secret credential:
var tokenCredential =  new ClientSecretCredential(aadTenantId, aadClientId, aadSecret);
SearchClient srchclient = new SearchClient(serviceEndpoint, indexName, tokenCredential);
var tokenCredential =  new ClientSecretCredential(aadTenantId, aadClientId, aadSecret);
SearchClient srchclient = new SearchClient(serviceEndpoint, indexName, tokenCredential);
Useazure.search.documents (Azure SDK for Python).
Useazure.search.documents (Azure SDK for Python).
UseAzure.Identity for Pythonfor token authentication.
UseAzure.Identity for Pythonfor token authentication.
UseDefaultAzureCredentialif the Python client is an application that executes server-side. Enableinteractive authenticationif the app runs in a browser.
UseDefaultAzureCredentialif the Python client is an application that executes server-side. Enableinteractive authenticationif the app runs in a browser.
Here's an example:from azure.search.documents import SearchClient
from azure.identity import DefaultAzureCredential

credential = DefaultAzureCredential()
endpoint = "https://<mysearch>.search.windows.net"
index_name = "myindex"
client = SearchClient(endpoint=endpoint, index_name=index_name, credential=credential)
Here's an example:
from azure.search.documents import SearchClient
from azure.identity import DefaultAzureCredential

credential = DefaultAzureCredential()
endpoint = "https://<mysearch>.search.windows.net"
index_name = "myindex"
client = SearchClient(endpoint=endpoint, index_name=index_name, credential=credential)
from azure.search.documents import SearchClient
from azure.identity import DefaultAzureCredential

credential = DefaultAzureCredential()
endpoint = "https://<mysearch>.search.windows.net"
index_name = "myindex"
client = SearchClient(endpoint=endpoint, index_name=index_name, credential=credential)
Use@azure/search-documents (Azure SDK for JavaScript), version 11.3.
Use@azure/search-documents (Azure SDK for JavaScript), version 11.3.
UseAzure.Identity for JavaScriptfor token authentication.
UseAzure.Identity for JavaScriptfor token authentication.
If you're using React, useInteractiveBrowserCredentialfor Microsoft Entra authentication to Search. SeeWhen to use@azure/identityfor details.
If you're using React, useInteractiveBrowserCredentialfor Microsoft Entra authentication to Search. SeeWhen to use@azure/identityfor details.
InteractiveBrowserCredential
@azure/identity
Useazure-search-documents (Azure SDK for Java).
Useazure-search-documents (Azure SDK for Java).
UseAzure.Identity for Javafor token authentication.
UseAzure.Identity for Javafor token authentication.
Microsoft recommendsDefaultAzureCredentialfor apps that run on Azure.
Microsoft recommendsDefaultAzureCredentialfor apps that run on Azure.
Test as current user
If you're already a Contributor or Owner of your search service, you can present a bearer token for your user identity for authentication to Azure AI Search.
Get a bearer token for the current user using the Azure CLI:az account get-access-token --scope https://search.azure.com/.defaultOr by using PowerShell:Get-AzAccessToken -ResourceUrl https://search.azure.com
Get a bearer token for the current user using the Azure CLI:
az account get-access-token --scope https://search.azure.com/.default
az account get-access-token --scope https://search.azure.com/.default
Or by using PowerShell:
Get-AzAccessToken -ResourceUrl https://search.azure.com
Get-AzAccessToken -ResourceUrl https://search.azure.com
Paste these variables into a new text file in Visual Studio Code.@baseUrl = PASTE-YOUR-SEARCH-SERVICE-URL-HERE
@index-name = PASTE-YOUR-INDEX-NAME-HERE
@token = PASTE-YOUR-TOKEN-HERE
Paste these variables into a new text file in Visual Studio Code.
@baseUrl = PASTE-YOUR-SEARCH-SERVICE-URL-HERE
@index-name = PASTE-YOUR-INDEX-NAME-HERE
@token = PASTE-YOUR-TOKEN-HERE
@baseUrl = PASTE-YOUR-SEARCH-SERVICE-URL-HERE
@index-name = PASTE-YOUR-INDEX-NAME-HERE
@token = PASTE-YOUR-TOKEN-HERE
Paste in and then send a request to confirm access. Here's one that queries the hotels-quickstart indexPOST https://{{baseUrl}}/indexes/{{index-name}}/docs/search?api-version=2024-07-01 HTTP/1.1
  Content-type: application/json
  Authorization: Bearer {{token}}

    {
         "queryType": "simple",
         "search": "motel",
         "filter": "",
         "select": "HotelName,Description,Category,Tags",
         "count": true
     }
Paste in and then send a request to confirm access. Here's one that queries the hotels-quickstart index
POST https://{{baseUrl}}/indexes/{{index-name}}/docs/search?api-version=2024-07-01 HTTP/1.1
  Content-type: application/json
  Authorization: Bearer {{token}}

    {
         "queryType": "simple",
         "search": "motel",
         "filter": "",
         "select": "HotelName,Description,Category,Tags",
         "count": true
     }
POST https://{{baseUrl}}/indexes/{{index-name}}/docs/search?api-version=2024-07-01 HTTP/1.1
  Content-type: application/json
  Authorization: Bearer {{token}}

    {
         "queryType": "simple",
         "search": "motel",
         "filter": "",
         "select": "HotelName,Description,Category,Tags",
         "count": true
     }

Grant access to a single index
In some scenarios, you might want to limit an application's access to a single resource, such as an index.
the Azure portal doesn't currently support role assignments at this level of granularity, but it can be done withPowerShellor theAzure CLI.
In PowerShell, useNew-AzRoleAssignment, providing the Azure user or group name, and the scope of the assignment.
Load theAzureandAzureADmodules and connect to your Azure account:Import-Module -Name Az
Import-Module -Name AzureAD
Connect-AzAccount
Load theAzureandAzureADmodules and connect to your Azure account:
Azure
AzureAD
Import-Module -Name Az
Import-Module -Name AzureAD
Connect-AzAccount
Import-Module -Name Az
Import-Module -Name AzureAD
Connect-AzAccount
Add a role assignment scoped to an individual index:New-AzRoleAssignment -ObjectId <objectId> `
    -RoleDefinitionName "Search Index Data Contributor" `
    -Scope  "/subscriptions/<subscription>/resourceGroups/<resource-group>/providers/Microsoft.Search/searchServices/<search-service>/indexes/<index-name>"
Add a role assignment scoped to an individual index:
New-AzRoleAssignment -ObjectId <objectId> `
    -RoleDefinitionName "Search Index Data Contributor" `
    -Scope  "/subscriptions/<subscription>/resourceGroups/<resource-group>/providers/Microsoft.Search/searchServices/<search-service>/indexes/<index-name>"
New-AzRoleAssignment -ObjectId <objectId> `
    -RoleDefinitionName "Search Index Data Contributor" `
    -Scope  "/subscriptions/<subscription>/resourceGroups/<resource-group>/providers/Microsoft.Search/searchServices/<search-service>/indexes/<index-name>"
Create a custom role
Ifbuilt-in rolesdon't provide the right combination of permissions, you can create acustom roleto support the operations you require.
This example clonesSearch Index Data Readerand then adds the ability to list indexes by name. Normally, listing the indexes on a search service is considered an administrative right.
Azure portal
Azure PowerShell
REST API
Azure CLI
These steps are derived fromCreate or update Azure custom roles using the Azure portal. Cloning from an existing role is supported in a search service page.
These steps create a custom role that augments search query rights to include listing indexes by name. Typically, listing indexes is considered an admin function.
In the Azure portal, navigate to your search service.
In the Azure portal, navigate to your search service.
In the left-navigation pane, selectAccess Control (IAM).
In the left-navigation pane, selectAccess Control (IAM).
In the action bar, selectRoles.
In the action bar, selectRoles.
Right-clickSearch Index Data Reader(or another role) and selectCloneto open theCreate a custom rolewizard.
Right-clickSearch Index Data Reader(or another role) and selectCloneto open theCreate a custom rolewizard.
On the Basics tab, provide a name for the custom role, such as "Search Index Data Explorer", and then selectNext.
On the Basics tab, provide a name for the custom role, such as "Search Index Data Explorer", and then selectNext.
On the Permissions tab, selectAdd permission.
On the Permissions tab, selectAdd permission.
On the Add permissions tab, search for and then select theMicrosoft Searchtile.
On the Add permissions tab, search for and then select theMicrosoft Searchtile.
Set the permissions for your custom role. At the top of the page, using the defaultActionsselection:Under Microsoft.Search/operations, selectRead : List all available operations.Under Microsoft.Search/searchServices/indexes, selectRead : Read Index.
Set the permissions for your custom role. At the top of the page, using the defaultActionsselection:
Under Microsoft.Search/operations, selectRead : List all available operations.
Under Microsoft.Search/searchServices/indexes, selectRead : Read Index.
On the same page, switch toData actionsand under Microsoft.Search/searchServices/indexes/documents, selectRead : Read Documents.The JSON definition looks like the following example:{
 "properties": {
     "roleName": "search index data explorer",
     "description": "",
     "assignableScopes": [
         "/subscriptions/0000000000000000000000000000000/resourceGroups/free-search-svc/providers/Microsoft.Search/searchServices/demo-search-svc"
     ],
     "permissions": [
         {
             "actions": [
                 "Microsoft.Search/operations/read",
                 "Microsoft.Search/searchServices/indexes/read"
             ],
             "notActions": [],
             "dataActions": [
                 "Microsoft.Search/searchServices/indexes/documents/read"
             ],
             "notDataActions": []
         }
     ]
   }
 }
On the same page, switch toData actionsand under Microsoft.Search/searchServices/indexes/documents, selectRead : Read Documents.
The JSON definition looks like the following example:
{
 "properties": {
     "roleName": "search index data explorer",
     "description": "",
     "assignableScopes": [
         "/subscriptions/0000000000000000000000000000000/resourceGroups/free-search-svc/providers/Microsoft.Search/searchServices/demo-search-svc"
     ],
     "permissions": [
         {
             "actions": [
                 "Microsoft.Search/operations/read",
                 "Microsoft.Search/searchServices/indexes/read"
             ],
             "notActions": [],
             "dataActions": [
                 "Microsoft.Search/searchServices/indexes/documents/read"
             ],
             "notDataActions": []
         }
     ]
   }
 }
{
 "properties": {
     "roleName": "search index data explorer",
     "description": "",
     "assignableScopes": [
         "/subscriptions/0000000000000000000000000000000/resourceGroups/free-search-svc/providers/Microsoft.Search/searchServices/demo-search-svc"
     ],
     "permissions": [
         {
             "actions": [
                 "Microsoft.Search/operations/read",
                 "Microsoft.Search/searchServices/indexes/read"
             ],
             "notActions": [],
             "dataActions": [
                 "Microsoft.Search/searchServices/indexes/documents/read"
             ],
             "notDataActions": []
         }
     ]
   }
 }
SelectReview + createto create the role. You can now assign users and groups to the role.
SelectReview + createto create the role. You can now assign users and groups to the role.
The PowerShell example shows the JSON syntax for creating a custom role that's a clone ofSearch Index Data Reader, but withe ability to list all indexes by name.
Review thelist of atomic permissionsto determine which ones you need. For this example, you'll need the following:"Microsoft.Search/operations/read",
"Microsoft.Search/searchServices/read",
"Microsoft.Search/searchServices/indexes/read"
Review thelist of atomic permissionsto determine which ones you need. For this example, you'll need the following:
"Microsoft.Search/operations/read",
"Microsoft.Search/searchServices/read",
"Microsoft.Search/searchServices/indexes/read"
"Microsoft.Search/operations/read",
"Microsoft.Search/searchServices/read",
"Microsoft.Search/searchServices/indexes/read"
Set up a PowerShell session to create the custom role. For detailed instructions, seeAzure PowerShell
Set up a PowerShell session to create the custom role. For detailed instructions, seeAzure PowerShell
Provide the role definition as a JSON document. The following example shows the syntax for creating a custom role with PowerShell.
Provide the role definition as a JSON document. The following example shows the syntax for creating a custom role with PowerShell.
{
  "Name": "Search Index Data Explorer",
  "Id": "88888888-8888-8888-8888-888888888888",
  "IsCustom": true,
  "Description": "List all indexes on the service and query them.",
  "Actions": [
      "Microsoft.Search/operations/read",
      "Microsoft.Search/searchServices/read"
  ],
  "NotActions": [],
  "DataActions": [
      "Microsoft.Search/searchServices/indexes/read"
  ],
  "NotDataActions": [],
  "AssignableScopes": [
    "/subscriptions/{subscriptionId1}"
  ]
}
{
  "Name": "Search Index Data Explorer",
  "Id": "88888888-8888-8888-8888-888888888888",
  "IsCustom": true,
  "Description": "List all indexes on the service and query them.",
  "Actions": [
      "Microsoft.Search/operations/read",
      "Microsoft.Search/searchServices/read"
  ],
  "NotActions": [],
  "DataActions": [
      "Microsoft.Search/searchServices/indexes/read"
  ],
  "NotDataActions": [],
  "AssignableScopes": [
    "/subscriptions/{subscriptionId1}"
  ]
}
Note
If the assignable scope is at the index level, the data action should be"Microsoft.Search/searchServices/indexes/documents/read".
"Microsoft.Search/searchServices/indexes/documents/read"
Review thelist of atomic permissionsto determine which ones you need.
Review thelist of atomic permissionsto determine which ones you need.
SeeCreate or update Azure custom roles using the REST APIfor steps.
SeeCreate or update Azure custom roles using the REST APIfor steps.
Copy or create a role, or use JSON to specify the custom role (see the PowerShell tab for JSON syntax).
Copy or create a role, or use JSON to specify the custom role (see the PowerShell tab for JSON syntax).
Review thelist of atomic permissionsto determine which ones you need.
Review thelist of atomic permissionsto determine which ones you need.
SeeCreate or update Azure custom roles using Azure CLIfor steps.
SeeCreate or update Azure custom roles using Azure CLIfor steps.
See the PowerShell tab for JSON syntax.
See the PowerShell tab for JSON syntax.
Conditional Access
We recommendMicrosoft Entra Conditional Accessif you need to enforce organizational policies, such as multifactor authentication.
To enable a Conditional Access policy for Azure AI Search, follow these steps:
Sign into the Azure portal.
Sign into the Azure portal.
Search forMicrosoft Entra Conditional Access.
Search forMicrosoft Entra Conditional Access.
SelectPolicies.
SelectPolicies.
SelectNew policy.
SelectNew policy.
In theCloud apps or actionssection of the policy, addAzure AI Searchas a cloud app depending on how you want to set up your policy.
In theCloud apps or actionssection of the policy, addAzure AI Searchas a cloud app depending on how you want to set up your policy.
Update the remaining parameters of the policy. For example, specify which users and groups this policy applies to.
Update the remaining parameters of the policy. For example, specify which users and groups this policy applies to.
Save the policy.
Save the policy.
Important
If your search service has a managed identity assigned to it, the specific search service will show up as a cloud app that can be included or excluded as part of the Conditional Access policy. Conditional Access policies can't be enforced on a specific search service. Instead make sure you select the generalAzure AI Searchcloud app.
Troubleshooting role-based access control issues
When developing applications that use role-based access control for authentication, some common issues might occur:
If the authorization token came from amanaged identityand the appropriate permissions were recently assigned, itmight take several hoursfor these permissions assignments to take effect.
If the authorization token came from amanaged identityand the appropriate permissions were recently assigned, itmight take several hoursfor these permissions assignments to take effect.
The default configuration for a search service iskey-based authentication. If you didn't change the default key setting toBothorRole-based access control, then all requests using role-based authentication are automatically denied regardless of the underlying permissions.
The default configuration for a search service iskey-based authentication. If you didn't change the default key setting toBothorRole-based access control, then all requests using role-based authentication are automatically denied regardless of the underlying permissions.
Feedback
Was this page helpful?
Additional resources