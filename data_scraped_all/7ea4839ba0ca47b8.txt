Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Connectivity settings
Article
2025-03-19
25 contributors
In this article
Applies to:Azure SQL DatabaseSQL database in Fabric
This article introduces settings that control connectivity to the server for Azure SQL Database and SQL database in Microsoft Fabric.
For more information on various components that direct network traffic and connection policies, seeconnectivity architecture.
This article does not apply to Azure SQL Managed Instance, instead seeConnect your application to Azure SQL Managed Instance.
This article doesnotapply to Azure Synapse Analytics.For settings that control connectivity to dedicated SQL pools in Azure Synapse Analytics, seeAzure Synapse Analytics connectivity settings.For connection strings to Azure Synapse Analytics pools, seeConnect to Synapse SQL.SeeAzure Synapse Analytics IP firewall rulesfor guidance on how to configure IP firewall rules for Azure Synapse Analytics with workspaces.
For settings that control connectivity to dedicated SQL pools in Azure Synapse Analytics, seeAzure Synapse Analytics connectivity settings.
For connection strings to Azure Synapse Analytics pools, seeConnect to Synapse SQL.
SeeAzure Synapse Analytics IP firewall rulesfor guidance on how to configure IP firewall rules for Azure Synapse Analytics with workspaces.
Networking and connectivity
You can change these settings in yourlogical server.
Change public network access
It's possible to change the public network access for your Azure SQL Database via the Azure portal, Azure PowerShell, and the Azure CLI.
Note
These settings take effect immediately after they're applied. Your customers might experience connection loss if they don't meet the requirements for each setting.
Portal
PowerShell
Azure CLI
To enable public network access for the logical server hosting your databases:

Go to the Azure portal, and go to thelogical server in Azure.
UnderSecurity, select theNetworkingpage.
Choose thePublic accesstab, and then set thePublic network accesstoSelect networks.
From this page, you can add a virtual network rule, as well as configure firewall rules for your public endpoint.
Choose thePrivate accesstab to configure aprivate endpoint.
It's possible to change public network access by using Azure PowerShell.
Important
TheAzmodule replacesAzureRM. All future development is for theAz.Sqlmodule. The following script requires theAzure PowerShell module.
Az
AzureRM
Az.Sql
The following PowerShell script shows how toGetandSetthePublic Network Accessproperty at the server level:
Get
Set
# Get the Public Network Access property
(Get-AzSqlServer -ServerName sql-server-name -ResourceGroupName sql-server-group).PublicNetworkAccess

# Update Public Network Access to Disabled
$SecureString = ConvertTo-SecureString "password" -AsPlainText -Force

Set-AzSqlServer -ServerName sql-server-name -ResourceGroupName sql-server-group -SqlAdministratorPassword $SecureString -PublicNetworkAccess "Disabled"
# Get the Public Network Access property
(Get-AzSqlServer -ServerName sql-server-name -ResourceGroupName sql-server-group).PublicNetworkAccess

# Update Public Network Access to Disabled
$SecureString = ConvertTo-SecureString "password" -AsPlainText -Force

Set-AzSqlServer -ServerName sql-server-name -ResourceGroupName sql-server-group -SqlAdministratorPassword $SecureString -PublicNetworkAccess "Disabled"
It's possible to change the public network settings by using theAzure CLI.
The following CLI script shows how to change thePublic Network Accesssetting in a Bash shell:
# Get current setting for Public Network Access
az sql server show -n sql-server-name -g sql-server-group --query "publicNetworkAccess"

# Update setting for Public Network Access
az sql server update -n sql-server-name -g sql-server-group --set publicNetworkAccess="Disabled"
# Get current setting for Public Network Access
az sql server show -n sql-server-name -g sql-server-group --query "publicNetworkAccess"

# Update setting for Public Network Access
az sql server update -n sql-server-name -g sql-server-group --set publicNetworkAccess="Disabled"
Deny public network access
The default for thePublic network accesssetting isDisable. Customers can choose to connect to a database by using either public endpoints (with IP-based server-level firewall rules or with virtual-network firewall rules), orprivate endpoints(by using Azure Private Link), as outlined in thenetwork access overview.
WhenPublic network accessis set toDisable, only connections from private endpoints are allowed. All connections from public endpoints will be denied with an error message similar to:
Error 47073
An instance-specific error occurred while establishing a connection to SQL Server. 
The public network interface on this server is not accessible. 
To connect to this server, use the Private Endpoint from inside your virtual network.
Error 47073
An instance-specific error occurred while establishing a connection to SQL Server. 
The public network interface on this server is not accessible. 
To connect to this server, use the Private Endpoint from inside your virtual network.
WhenPublic network accessis set toDisable, any attempts to add, remove, or edit any firewall rules will be denied with an error message similar to:
Error 42101
Unable to create or modify firewall rules when public network interface for the server is disabled. 
To manage server or database level firewall rules, please enable the public network interface.
Error 42101
Unable to create or modify firewall rules when public network interface for the server is disabled. 
To manage server or database level firewall rules, please enable the public network interface.
Ensure thatPublic network accessis set toSelected networksto be able to add, remove, or edit any firewall rules for Azure SQL Database.
Minimum TLS version
The minimumTransport Layer Security (TLS)version setting allows customers to choose which version of TLS their SQL database uses. It's possible to change the minimum TLS version by using the Azure portal, Azure PowerShell, and the Azure CLI.
Currently, Azure SQL Database supports TLS 1.0, 1.1, 1.2, and 1.3. Setting a minimum TLS version ensures that newer TLS versions are supported. For example, choosing a TLS version 1.1 means only connections with TLS 1.1 and 1.2 are accepted, and connections with TLS 1.0 are rejected. After you test to confirm that your applications support it, we recommend setting the minimal TLS version to 1.3. This version includes fixes for vulnerabilities in previous versions and is the highest version of TLS that's supported in Azure SQL Database.
Upcoming retirement changes
Azure has announced that support for older TLS versions (TLS 1.0, and 1.1) ends August 31, 2025. For more information, seeTLS 1.0 and 1.1 deprecation.
Starting November 2024, you will no longer be able to set the minimal TLS version for Azure SQL Database client connections below TLS 1.2.
Configure minimum TLS version
You can configure the minimum TLS version for client connections by using the Azure portal, Azure PowerShell, or the Azure CLI.
Caution
The default for the minimal TLS version is to allow all versions. After you enforce a version of TLS, it's not possible to revert to the default.
Enforcing a minimum of TLS 1.3 might cause issues for connections from clients that don't support TLS 1.3 since not alldriversand operating systems support TLS 1.3.
For customers with applications that rely on older versions of TLS, we recommend setting the minimal TLS version according to the requirements of your applications. If application requirements are unknown or workloads rely on older drivers that are no longer maintained, we recommend not setting any minimal TLS version.
For more information, seeTLS considerations for SQL Database connectivity.
After you set the minimal TLS version, customers who are using a TLS version lower than the minimum TLS version of the server will fail to authenticate, with the following error:
Error 47072
Login failed with invalid TLS version
Error 47072
Login failed with invalid TLS version
Note
The minimum TLS version is enforced at the application layer. Tools that attempt to determine TLS support at the protocol layer might return TLS versions in addition to the minimum required version when run directly against the SQL Database endpoint.
Portal
PowerShell
Azure CLI
Go to the Azure portal, and go to thelogical server in Azure.
UnderSecurity, select theNetworkingpage.
Choose theConnectivitytab. Select theMinimum TLS Versiondesired for all databases associated with the server, and selectSave.

It's possible to change the minimum TLS version by using Azure PowerShell.
Important
TheAzmodule replacesAzureRM. All future development is for theAz.Sqlmodule. The following script requires theAzure PowerShell module.
Az
AzureRM
Az.Sql
The following PowerShell script shows how toGettheMinimal TLS Versionproperty at the logical server level:
Get
$serverParams = @{
    ServerName = "sql-server-name"
    ResourceGroupName = "sql-server-group"
}

(Get-AzSqlServer @serverParams).MinimalTlsVersion
$serverParams = @{
    ServerName = "sql-server-name"
    ResourceGroupName = "sql-server-group"
}

(Get-AzSqlServer @serverParams).MinimalTlsVersion
ToSettheMinimal TLS Versionproperty at the logical server level, substitute your Sql Administrator password forstrong_password_here_password, and execute:
Set
strong_password_here_password
$serverParams = @{
    ServerName = "sql-server-name"
    ResourceGroupName = "sql-server-group"
    SqlAdministratorPassword = (ConvertTo-SecureString "strong_password_here_password" -AsPlainText -Force)
    MinimalTlsVersion = "1.2"
}
Set-AzSqlServer @serverParams
$serverParams = @{
    ServerName = "sql-server-name"
    ResourceGroupName = "sql-server-group"
    SqlAdministratorPassword = (ConvertTo-SecureString "strong_password_here_password" -AsPlainText -Force)
    MinimalTlsVersion = "1.2"
}
Set-AzSqlServer @serverParams
It's possible to change the minimum TLS settings by using the Azure CLI.
Important
All scripts in this section require theAzure CLI.
The following CLI script shows how to change theMinimal TLS Versionsetting in a Bash shell:
# Get current setting for Minimal TLS Version
az sql server show -n sql-server-name -g sql-server-group --query "minimalTlsVersion"

# Update setting for Minimal TLS Version
az sql server update -n sql-server-name -g sql-server-group --set minimalTlsVersion="1.2"
# Get current setting for Minimal TLS Version
az sql server show -n sql-server-name -g sql-server-group --query "minimalTlsVersion"

# Update setting for Minimal TLS Version
az sql server update -n sql-server-name -g sql-server-group --set minimalTlsVersion="1.2"
Identify client connections
You can use the Azure portal and SQL audit logs to identify clients that are connecting using TLS 1.0 and 1.0.
In the Azure portal, go toMetricsunderMonitoringfor your database resource, and then filter bySuccessful connections, andTLS versions=1.0and1.1:
1.0
1.1

You can also querysys.fn_get_audit_filedirectly within your database to view theclient_tls_version_namein the audit file, looking for events namedaudit_event.
client_tls_version_name
audit_event

Change the connection policy
Connection policydetermines how customers connect. We highly recommend theRedirectconnection policy over theProxyconnection policy for the lowest latency and highest throughput.
Redirect
Proxy
It's possible to change the connection policy by using the Azure portal, Azure PowerShell, and the Azure CLI.
Portal
PowerShell
Azure CLI
It's possible to change your connection policy for your logical server by using the Azure portal.
Go to the Azure portal. Go to thelogical server in Azure.
UnderSecurity, select theNetworkingpage.
Choose theConnectivitytab. Choose the desired connection policy, and selectSave.

It's possible to change the connection policy for your logical server by using Azure PowerShell.
Important
TheAzmodule replacesAzureRM. All future development is for theAz.Sqlmodule. The following script requires theAzure PowerShell module.
Az
AzureRM
Az.Sql
The following PowerShell script shows how to change the connection policy by using PowerShell:
# Get SQL Server ID
$sqlserverid = (Get-AzSqlServer -ServerName sql-server-name -ResourceGroupName sql-server-group).ResourceId

# Set URI
$id = "$sqlserverid/connectionPolicies/Default"

# Get current connection policy
$resourceParams = @{
    ResourceId = $id
    ApiVersion = "2014-04-01"
    Verbose = $true
}
(Get-AzResource @resourceParams).Properties.ConnectionType

# Update connection policy
$updateParams = @{
    ResourceId = $id
    Properties = @{
        connectionType = "Proxy"
    }
    Force = $true
}
Set-AzResource @updateParams
# Get SQL Server ID
$sqlserverid = (Get-AzSqlServer -ServerName sql-server-name -ResourceGroupName sql-server-group).ResourceId

# Set URI
$id = "$sqlserverid/connectionPolicies/Default"

# Get current connection policy
$resourceParams = @{
    ResourceId = $id
    ApiVersion = "2014-04-01"
    Verbose = $true
}
(Get-AzResource @resourceParams).Properties.ConnectionType

# Update connection policy
$updateParams = @{
    ResourceId = $id
    Properties = @{
        connectionType = "Proxy"
    }
    Force = $true
}
Set-AzResource @updateParams
It's possible to change the connection policy for your logical server by using the Azure CLI.
Important
All scripts in this section require theAzure CLI.
Azure CLI in a Bash shell
For information on how to change the Azure SQL Database connection policy for a server, seeconn-policy
The following CLI script shows how to change the connection policy in a Bash shell:
# Get SQL Server ID
sqlserverid=$(az sql server show -n sql-server-name -g sql-server-group --query 'id' -o tsv)

# Set URI
ids="$sqlserverid/connectionPolicies/Default"

# Get current connection policy
az resource show --ids $ids

# Update connection policy
az resource update --ids $ids --set properties.connectionType=Proxy
# Get SQL Server ID
sqlserverid=$(az sql server show -n sql-server-name -g sql-server-group --query 'id' -o tsv)

# Set URI
ids="$sqlserverid/connectionPolicies/Default"

# Get current connection policy
az resource show --ids $ids

# Update connection policy
az resource update --ids $ids --set properties.connectionType=Proxy
Azure CLI from a Windows command prompt
The following CLI script shows how to change the connection policy from a Windows command prompt (with the Azure CLI installed):
# Get SQL Server ID and set URI
FOR /F "tokens=*" %g IN ('az sql server show --resource-group myResourceGroup-571418053 --name server-538465606 --query "id" -o tsv') do (SET sqlserverid=%g/connectionPolicies/Default)

# Get current connection policy
az resource show --ids %sqlserverid%

# Update connection policy
az resource update --ids %sqlserverid% --set properties.connectionType=Proxy
# Get SQL Server ID and set URI
FOR /F "tokens=*" %g IN ('az sql server show --resource-group myResourceGroup-571418053 --name server-538465606 --query "id" -o tsv') do (SET sqlserverid=%g/connectionPolicies/Default)

# Get current connection policy
az resource show --ids %sqlserverid%

# Update connection policy
az resource update --ids %sqlserverid% --set properties.connectionType=Proxy
Related content
Connectivity architecture
Feedback
Was this page helpful?
Additional resources