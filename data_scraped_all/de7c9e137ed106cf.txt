Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Update Kubernetes and node images across multiple clusters using Azure Kubernetes Fleet Manager
Article
2025-03-26
8 contributors
In this article
Platform admins managing large number of clusters often have problems with staging the updates of multiple clusters (for example, upgrading node OS image or Kubernetes versions) in a safe and predictable way. To address this challenge, Azure Kubernetes Fleet Manager (Fleet) allows you to orchestrate updates across multiple clusters using update runs.
Update runs consist of stages, groups, and strategies and can be applied manually for one-time updates, or automatically, for ongoing regular updates using auto-upgrade profiles. All update runs (manual or automated) honor member cluster maintenance windows.
This guide covers how to configure and manually execute update runs.
Prerequisites
Read theconceptual overview of this feature, which provides an explanation of update strategies, runs, stages, and groups referenced in this guide.
Read theconceptual overview of this feature, which provides an explanation of update strategies, runs, stages, and groups referenced in this guide.
You must have a Fleet resource with one or more member clusters. If not, follow thequickstartto create a Fleet resource and join Azure Kubernetes Service (AKS) clusters as members.
You must have a Fleet resource with one or more member clusters. If not, follow thequickstartto create a Fleet resource and join Azure Kubernetes Service (AKS) clusters as members.
Set the following environment variables:export GROUP=<resource-group>
export FLEET=<fleet-name>
export AKS_CLUSTER_ID=<aks-cluster-resource-id>
Set the following environment variables:
export GROUP=<resource-group>
export FLEET=<fleet-name>
export AKS_CLUSTER_ID=<aks-cluster-resource-id>
export GROUP=<resource-group>
export FLEET=<fleet-name>
export AKS_CLUSTER_ID=<aks-cluster-resource-id>
If you're following the Azure CLI instructions in this article, you need Azure CLI version 2.58.0 or later installed. To install or upgrade, seeInstall the Azure CLI.
If you're following the Azure CLI instructions in this article, you need Azure CLI version 2.58.0 or later installed. To install or upgrade, seeInstall the Azure CLI.
You also need thefleetAzure CLI extension, which you can install by running the following command:az extension add --name fleetRun theaz extension updatecommand to update to the latest version of the extension released:az extension update --name fleet
You also need thefleetAzure CLI extension, which you can install by running the following command:
fleet
az extension add --name fleet
az extension add --name fleet
Run theaz extension updatecommand to update to the latest version of the extension released:
az extension update
az extension update --name fleet
az extension update --name fleet
Defining the cluster upgrade sequence
Update run supports two options for the cluster upgrade sequence:
One by one: If you don't care about controlling the cluster upgrade sequence,one-by-oneprovides a simple approach to upgrade all member clusters of the fleet in sequence one at a time.
one-by-one
Control sequence of clusters using update groups and stages: If you want to control the cluster upgrade sequence, you can structure member clusters in update groups and update stages. You can store this sequence as a template in the form of anupdate strategy. You can create update runs later using the update strategies instead of defining the sequence every time you need to create an update run.
Note
Update runs honor theplanned maintenance windowsthat you set at the AKS cluster level. For more information, seeplanned maintenance across multiple member clusters, which explains how update runs handle member clusters configured with planned maintenance windows.
Update all clusters one by one
Azure portal
Azure CLI
In the Azure portal, navigate to your Azure Kubernetes Fleet Manager resource.
In the Azure portal, navigate to your Azure Kubernetes Fleet Manager resource.
From the service menu, underSettings, selectMulti-cluster update>Create a run.
From the service menu, underSettings, selectMulti-cluster update>Create a run.
Enter a name for the update run, and then selectOne by onefor the upgrade type.
Enter a name for the update run, and then selectOne by onefor the upgrade type.

Select one of the following options for theUpgrade scope:Kubernetes version for both control plane and node poolsKubernetes version for only control plane of the clusterNode image version only
Select one of the following options for theUpgrade scope:
Kubernetes version for both control plane and node pools
Kubernetes version for only control plane of the cluster
Node image version only
Select one of the following options for theNode image:Latest image: Updates every AKS cluster in the update run to the latest image available for that cluster in its region.Consistent image: As it's possible for an update run to have AKS clusters across multiple regions where the latest available node images can be different (checkrelease trackerfor more information). The update run picks thelatest commonimage across all these regions to achieve consistency.
Select one of the following options for theNode image:
Latest image: Updates every AKS cluster in the update run to the latest image available for that cluster in its region.
Consistent image: As it's possible for an update run to have AKS clusters across multiple regions where the latest available node images can be different (checkrelease trackerfor more information). The update run picks thelatest commonimage across all these regions to achieve consistency.

SelectCreateto create the update run.
SelectCreateto create the update run.
Create an update run using theaz fleet updaterun createcommand with your chosen values for the--upgrade-typeand--node-image-selectionflags. The following command creates an update run that upgrades the Kubernetes version for both control plane and node pools and uses the latest node image available for each cluster in its region.The--upgrade-typeflag supports the following values:Fullupgrades Kubernetes version for control plane and node pools along with the node images.ControlPlaneOnlyonly upgrades the Kubernetes version for the control plane of the cluster.NodeImageOnlyonly upgrades the node images.The--node-image-selectionflag supports the following values:Latest: Updates every AKS cluster in the update run to the latest image available for that cluster in its region.Consistent: As it's possible for an update run to have AKS clusters across multiple regions where the latest available node images can be different (checkrelease trackerfor more information). The update run picks thelatest commonimage across all these regions to achieve consistency.az fleet updaterun create \
 --resource-group $GROUP \
 --fleet-name $FLEET \
 --name run-1 \
 --upgrade-type Full \
 --kubernetes-version 1.26.0 \
 --node-image-selection Latest
Create an update run using theaz fleet updaterun createcommand with your chosen values for the--upgrade-typeand--node-image-selectionflags. The following command creates an update run that upgrades the Kubernetes version for both control plane and node pools and uses the latest node image available for each cluster in its region.
az fleet updaterun create
--upgrade-type
--node-image-selection
The--upgrade-typeflag supports the following values:
--upgrade-type
Fullupgrades Kubernetes version for control plane and node pools along with the node images.
Full
ControlPlaneOnlyonly upgrades the Kubernetes version for the control plane of the cluster.
ControlPlaneOnly
NodeImageOnlyonly upgrades the node images.
NodeImageOnly
The--node-image-selectionflag supports the following values:
--node-image-selection
Latest: Updates every AKS cluster in the update run to the latest image available for that cluster in its region.
Latest
Consistent: As it's possible for an update run to have AKS clusters across multiple regions where the latest available node images can be different (checkrelease trackerfor more information). The update run picks thelatest commonimage across all these regions to achieve consistency.
Consistent
az fleet updaterun create \
 --resource-group $GROUP \
 --fleet-name $FLEET \
 --name run-1 \
 --upgrade-type Full \
 --kubernetes-version 1.26.0 \
 --node-image-selection Latest
az fleet updaterun create \
 --resource-group $GROUP \
 --fleet-name $FLEET \
 --name run-1 \
 --upgrade-type Full \
 --kubernetes-version 1.26.0 \
 --node-image-selection Latest
Start the update run using theaz fleet updaterun startcommand.az fleet updaterun start \
 --resource-group $GROUP \
 --fleet-name $FLEET \
 --name run-1
Start the update run using theaz fleet updaterun startcommand.
az fleet updaterun start
az fleet updaterun start \
 --resource-group $GROUP \
 --fleet-name $FLEET \
 --name run-1
az fleet updaterun start \
 --resource-group $GROUP \
 --fleet-name $FLEET \
 --name run-1
When creating an update run, you have the ability to control the scope of the update run. The--upgrade-typeflag supports the following values:
--upgrade-type
ControlPlaneOnlyonly upgrades the Kubernetes version for the control plane of the cluster.
ControlPlaneOnly
Fullupgrades Kubernetes version for control plane and node pools along with the node images.
Full
NodeImageOnlyonly upgrades the node images.
NodeImageOnly
Also,--node-image-selectionflag supports the following values:
--node-image-selection
Latest: Updates every AKS cluster in the update run to the latest image available for that cluster in its region.
Consistent: As it's possible for an update run to have AKS clusters across multiple regions where the latest available node images can be different (checkrelease trackerfor more information). The update run picks thelatest commonimage across all these regions to achieve consistency.
Starting an update run:
To start update runs, run the following command:
az fleet updaterun start \
 --resource-group $GROUP \
 --fleet-name $FLEET \
 --name <run-name>
az fleet updaterun start \
 --resource-group $GROUP \
 --fleet-name $FLEET \
 --name <run-name>
Update clusters using groups and stages
You can define an update run using update stages to sequentially order the application of updates to different update groups. For example, a first update stage might update test environment member clusters, and a second update stage would then update production environment member clusters. You can also specify a wait time between the update stages. You can store this sequence as a template in the form of anupdate strategy.
Azure portal
Azure CLI
In the Azure portal, navigate to your Azure Kubernetes Fleet Manager resource.
In the Azure portal, navigate to your Azure Kubernetes Fleet Manager resource.
From the service menu, underSettings, selectMulti-cluster update>Create a run.
From the service menu, underSettings, selectMulti-cluster update>Create a run.
Enter a name for the update run, and then selectStagesfor the update sequence type.
Enter a name for the update run, and then selectStagesfor the update sequence type.

SelectCreate stage, and then enter a name for the stage and the wait time between stages.
SelectCreate stage, and then enter a name for the stage and the wait time between stages.

Select the update groups that you want to include in this stage. You can also specify the order of the update groups if you want to update them in a specific sequence. When you're done, selectCreate.
Select the update groups that you want to include in this stage. You can also specify the order of the update groups if you want to update them in a specific sequence. When you're done, selectCreate.

Select one of the following options for theUpgrade scope:Kubernetes version for both control plane and node poolsKubernetes version for only control plane of the clusterNode image version only
Select one of the following options for theUpgrade scope:
Kubernetes version for both control plane and node pools
Kubernetes version for only control plane of the cluster
Node image version only
Select one of the following options for theNode image:Latest image: Updates every AKS cluster in the update run to the latest image available for that cluster in its region.Consistent image: As it's possible for an update run to have AKS clusters across multiple regions where the latest available node images can be different (checkrelease trackerfor more information). The update run picks thelatest commonimage across all these regions to achieve consistency.
Select one of the following options for theNode image:
Latest image: Updates every AKS cluster in the update run to the latest image available for that cluster in its region.
Consistent image: As it's possible for an update run to have AKS clusters across multiple regions where the latest available node images can be different (checkrelease trackerfor more information). The update run picks thelatest commonimage across all these regions to achieve consistency.

SelectCreateto create the update run.Specifying stages and their order every time when creating an update run can get repetitive and cumbersome. Update strategies simplify this process by allowing you to store templates for update runs. For more information, seeupdate strategy creation and usage.
SelectCreateto create the update run.
Specifying stages and their order every time when creating an update run can get repetitive and cumbersome. Update strategies simplify this process by allowing you to store templates for update runs. For more information, seeupdate strategy creation and usage.
In theMulti-cluster updatemenu, select the update run, and then selectStart.
In theMulti-cluster updatemenu, select the update run, and then selectStart.
Create a JSON file to define the stages and groups for the update run. Here's an example of input from the stages file (example-stages.json):{
    "stages": [
        {
            "name": "stage1",
            "groups": [
                {
                    "name": "group-1a"
                },
                {
                    "name": "group-1b"
                },
                {
                    "name": "group-1c"
                }
            ],
            "afterStageWaitInSeconds": 3600
        },
        {
            "name": "stage2",
            "groups": [
                {
                    "name": "group-2a"
                },
                {
                    "name": "group-2b"
                },
                {
                    "name": "group-2c"
                }
            ]
        }
    ]
}
Create a JSON file to define the stages and groups for the update run. Here's an example of input from the stages file (example-stages.json):
{
    "stages": [
        {
            "name": "stage1",
            "groups": [
                {
                    "name": "group-1a"
                },
                {
                    "name": "group-1b"
                },
                {
                    "name": "group-1c"
                }
            ],
            "afterStageWaitInSeconds": 3600
        },
        {
            "name": "stage2",
            "groups": [
                {
                    "name": "group-2a"
                },
                {
                    "name": "group-2b"
                },
                {
                    "name": "group-2c"
                }
            ]
        }
    ]
}
{
    "stages": [
        {
            "name": "stage1",
            "groups": [
                {
                    "name": "group-1a"
                },
                {
                    "name": "group-1b"
                },
                {
                    "name": "group-1c"
                }
            ],
            "afterStageWaitInSeconds": 3600
        },
        {
            "name": "stage2",
            "groups": [
                {
                    "name": "group-2a"
                },
                {
                    "name": "group-2b"
                },
                {
                    "name": "group-2c"
                }
            ]
        }
    ]
}
Create an update run using theaz fleet updaterun createcommand with the--stagesflag set to the name of your JSON file and your chosen values for the--upgrade-typeand--node-image-selectionflags. The following command creates an update run that upgrades the Kubernetes version for both control plane and node pools and uses the latest node image available for each cluster in its region.The--upgrade-typeflag supports the following values:Fullupgrades Kubernetes version for control plane and node pools along with the node images.ControlPlaneOnlyonly upgrades the Kubernetes version for the control plane of the cluster.NodeImageOnlyonly upgrades the node images.The--node-image-selectionflag supports the following values:Latest: Updates every AKS cluster in the update run to the latest image available for that cluster in its region.Consistent: As it's possible for an update run to have AKS clusters across multiple regions where the latest available node images can be different (checkrelease trackerfor more information). The update run picks thelatest commonimage across all these regions to achieve consistency.az fleet updaterun create \
 --resource-group $GROUP \
 --fleet-name $FLEET \
 --name run-1 \
 --upgrade-type Full \
 --kubernetes-version 1.26.0 \
 --node-image-selection Latest \
 --stages example-stages.json
Create an update run using theaz fleet updaterun createcommand with the--stagesflag set to the name of your JSON file and your chosen values for the--upgrade-typeand--node-image-selectionflags. The following command creates an update run that upgrades the Kubernetes version for both control plane and node pools and uses the latest node image available for each cluster in its region.
az fleet updaterun create
--stages
--upgrade-type
--node-image-selection
The--upgrade-typeflag supports the following values:
--upgrade-type
Fullupgrades Kubernetes version for control plane and node pools along with the node images.
Full
ControlPlaneOnlyonly upgrades the Kubernetes version for the control plane of the cluster.
ControlPlaneOnly
NodeImageOnlyonly upgrades the node images.
NodeImageOnly
The--node-image-selectionflag supports the following values:
--node-image-selection
Latest: Updates every AKS cluster in the update run to the latest image available for that cluster in its region.
Latest
Consistent: As it's possible for an update run to have AKS clusters across multiple regions where the latest available node images can be different (checkrelease trackerfor more information). The update run picks thelatest commonimage across all these regions to achieve consistency.
Consistent
az fleet updaterun create \
 --resource-group $GROUP \
 --fleet-name $FLEET \
 --name run-1 \
 --upgrade-type Full \
 --kubernetes-version 1.26.0 \
 --node-image-selection Latest \
 --stages example-stages.json
az fleet updaterun create \
 --resource-group $GROUP \
 --fleet-name $FLEET \
 --name run-1 \
 --upgrade-type Full \
 --kubernetes-version 1.26.0 \
 --node-image-selection Latest \
 --stages example-stages.json
Start the update run using theaz fleet updaterun startcommand.az fleet updaterun start \
 --resource-group $GROUP \
 --fleet-name $FLEET \
 --name run-1
Start the update run using theaz fleet updaterun startcommand.
az fleet updaterun start
az fleet updaterun start \
 --resource-group $GROUP \
 --fleet-name $FLEET \
 --name run-1
az fleet updaterun start \
 --resource-group $GROUP \
 --fleet-name $FLEET \
 --name run-1
Create an update run using update strategies
Creating an update run requires you to specify the stages, groups, order each time. Update strategies simplify this process by allowing you to store templates for update runs.
Note
It's possible to create multiple update runs with unique names from the same update strategy.
You can create an update strategy using one of the following methods:
Create a new update strategy and then reference it when creating an update run.
Save an update strategy while creating an update run using the Azure portal.
Save an update strategy while creating an update run
Save an update strategy while creating an update run in the Azure portal:
Save an update strategy while creating an update run in the Azure portal:

Manage an update run
The following sections explain how to manage an update run using the Azure portal and Azure CLI.
Azure portal
Azure CLI
On theMulti-cluster updatepage of the fleet resource, you canStartan update run that's either inNot startedorFailedstate:
On theMulti-cluster updatepage of the fleet resource, you canStartan update run that's either inNot startedorFailedstate:

On theMulti-cluster updatepage of the fleet resource, you canStopa currentlyRunningupdate run:
On theMulti-cluster updatepage of the fleet resource, you canStopa currentlyRunningupdate run:

Within any update run in theNot Started,Failed, orRunningstate, you can select anyStageandSkipthe upgrade:You can similarly skip the upgrade at the update group or member cluster level too.
Within any update run in theNot Started,Failed, orRunningstate, you can select anyStageandSkipthe upgrade:

You can similarly skip the upgrade at the update group or member cluster level too.
You canStartan update run that's either inNot startedorFailedstate using theaz fleet updaterun startcommand:az fleet updaterun start \
 --resource-group $GROUP \
 --fleet-name $FLEET \
 --name <run-name>
You canStartan update run that's either inNot startedorFailedstate using theaz fleet updaterun startcommand:
az fleet updaterun start
az fleet updaterun start \
 --resource-group $GROUP \
 --fleet-name $FLEET \
 --name <run-name>
az fleet updaterun start \
 --resource-group $GROUP \
 --fleet-name $FLEET \
 --name <run-name>
You canStopa currentlyRunningupdate run using theaz fleet updaterun stopcommand:az fleet updaterun stop \
 --resource-group $GROUP \
 --fleet-name $FLEET \
 --name <run-name>
You canStopa currentlyRunningupdate run using theaz fleet updaterun stopcommand:
az fleet updaterun stop
az fleet updaterun stop \
 --resource-group $GROUP \
 --fleet-name $FLEET \
 --name <run-name>
az fleet updaterun stop \
 --resource-group $GROUP \
 --fleet-name $FLEET \
 --name <run-name>
You can skip update stages or groups by specifying them in the--targetsflag using theaz fleet updaterun skipcommand:az fleet updaterun skip \
 --resource-group $GROUP \
 --fleet-name $FLEET \
 --name <run-name> \
 --targets Group:my-group-name Stage:my-stage-nameFor more information, seeconceptual overview on the update run states and skip behavioron runs/stages/groups.
You can skip update stages or groups by specifying them in the--targetsflag using theaz fleet updaterun skipcommand:
--targets
az fleet updaterun skip
az fleet updaterun skip \
 --resource-group $GROUP \
 --fleet-name $FLEET \
 --name <run-name> \
 --targets Group:my-group-name Stage:my-stage-name
az fleet updaterun skip \
 --resource-group $GROUP \
 --fleet-name $FLEET \
 --name <run-name> \
 --targets Group:my-group-name Stage:my-stage-name
For more information, seeconceptual overview on the update run states and skip behavioron runs/stages/groups.
Automate update runs using auto-upgrade profiles
Auto-upgrade profiles are used to automatically execute update runs across member clusters when new Kubernetes or node image versions are made available.
For more information on configuring auto-upgrade profiles, seeautomate upgrades of Kubernetes and node images using Azure Kubernetes Fleet Manager.
Generate an update run from an auto-upgrade profile
When you create an auto-upgrade profile, your clusters can be on various versions of Kubernetes or node image. Depending on your selected auto-upgrade channel, it may be some time before a new version release triggers auto-upgrade to create and execute an update run.
Auto-upgrade allows you to generate a new update run at any time using theaz fleet autoupgradeprofile generate-update-runcommand. The resulting update run is based on the current AKS-published Kubernetes or node image version.
az fleet autoupgradeprofile generate-update-run
az fleet autoupgradeprofile generate-update-run \ 
    --resource-group $GROUP \ 
    --fleet-name $FLEET \ 
    --name $AUTOUPGRADEPROFILE
az fleet autoupgradeprofile generate-update-run \ 
    --resource-group $GROUP \ 
    --fleet-name $FLEET \ 
    --name $AUTOUPGRADEPROFILE
The generated update run is not automatically started, allowing you to review it. If you are satisfied with the generated update run, you can start and manage it by following the steps inmanage an update run.
Next steps
How-to: Automatically upgrade multiple clusters using Azure Kubernetes Fleet Manager.
How-to: Monitor update runs for Azure Kubernetes Fleet Manager.
Azure Kubernetes Service

Additional resources