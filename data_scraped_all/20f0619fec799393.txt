Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Architecture best practices for Azure Application Gateway v2
Article
2025-03-28
11 contributors
In this article
Azure Application Gateway v2 is a web traffic load balancer that operates at the application layer. Application Gateway manages traffic to your web applications based on the attributes of an HTTP request. Use Application Gateway for scenarios that have advanced routing capabilities and require enhanced security and scalability.
This article assumes that as an architect, you've reviewed thenetworking optionsand chose Application Gateway as the web traffic load balancer for your workload. The guidance in this article provides architectural recommendations that are mapped to the principles of theWell-Architected Framework pillars.
Important
How to use this guide
Each section has adesign checklistthat presents architectural areas of concern along with design strategies localized to the technology scope.
Also included are recommendations for the technology capabilities that can help materialize those strategies. The recommendations don't represent an exhaustive list of all configurations that are available for Application Gateway and its dependencies. Instead, they list the key recommendations mapped to the design perspectives. Use the recommendations to build your proof-of-concept or to optimize your existing environments.
Foundational architecture that demonstrates the key recommendations:Baseline highly available, zone-redundant web application architecture.
Technology scope
This review focuses on the interrelated decisions for the following Azure resources:
Application Gateway v2
Web Application Firewall (WAF) on Application Gateway
Reliability
The purpose of the Reliability pillar is to provide continued functionality bybuilding enough resilience and the ability to recover fast from failures.
Reliability design principlesprovide a high-level design strategy applied for individual components, system flows, and the system as a whole.
Start your design strategy based on thedesign review checklist for Reliability. Determine its relevance to your business requirements while keeping in mind the features of Application Gateway and its dependencies. Extend the strategy to include more approaches as needed.
Use Application Gateway v2in new deployments unless your workload specifically requires Application Gateway v1.
Use Application Gateway v2in new deployments unless your workload specifically requires Application Gateway v1.
Build redundancy in your design.Spread Application Gateway instances across availability zones to improve fault tolerance and build redundancy. Traffic goes to other zones if one zone fails. For more information, seeRecommendations for using availability zones and regions.
Build redundancy in your design.Spread Application Gateway instances across availability zones to improve fault tolerance and build redundancy. Traffic goes to other zones if one zone fails. For more information, seeRecommendations for using availability zones and regions.
Plan extra time for rule updatesand other configuration changes before you access Application Gateway or make further changes. For example, you might need extra time to remove servers from a back-end pool because they have to drain existing connections.
Plan extra time for rule updatesand other configuration changes before you access Application Gateway or make further changes. For example, you might need extra time to remove servers from a back-end pool because they have to drain existing connections.
Implement the Health Endpoint Monitoring pattern.Your application should expose health endpoints, which aggregate the state of the critical services and dependencies that your application needs to serve requests. Application Gateway health probes use the endpoint to detect the health of servers in the back-end pool. For more information, seeHealth Endpoint Monitoring pattern.
Implement the Health Endpoint Monitoring pattern.Your application should expose health endpoints, which aggregate the state of the critical services and dependencies that your application needs to serve requests. Application Gateway health probes use the endpoint to detect the health of servers in the back-end pool. For more information, seeHealth Endpoint Monitoring pattern.
Evaluate the impact of interval and threshold settings on a health probe.The health probe sends requests to the configured endpoint at a set interval. And the back end tolerates a limited number of failed requests before it's marked as unhealthy. These settings can conflict, which presents a tradeoff.A higher interval puts a higher load on your service. Each Application Gateway instance sends its own health probe, so 100 instances every 30 seconds equals 100 requests every 30 seconds.A lower interval increases the amount of time before the health probe detects an outage.A low, unhealthy threshold increases the chance of short, transient failures shutting down a back end.A high threshold increases the amount of time that it takes a back end to go out of rotation.
Evaluate the impact of interval and threshold settings on a health probe.The health probe sends requests to the configured endpoint at a set interval. And the back end tolerates a limited number of failed requests before it's marked as unhealthy. These settings can conflict, which presents a tradeoff.
A higher interval puts a higher load on your service. Each Application Gateway instance sends its own health probe, so 100 instances every 30 seconds equals 100 requests every 30 seconds.
A higher interval puts a higher load on your service. Each Application Gateway instance sends its own health probe, so 100 instances every 30 seconds equals 100 requests every 30 seconds.
A lower interval increases the amount of time before the health probe detects an outage.
A lower interval increases the amount of time before the health probe detects an outage.
A low, unhealthy threshold increases the chance of short, transient failures shutting down a back end.
A low, unhealthy threshold increases the chance of short, transient failures shutting down a back end.
A high threshold increases the amount of time that it takes a back end to go out of rotation.
A high threshold increases the amount of time that it takes a back end to go out of rotation.
Verify downstream dependencies through health endpoints.To isolate failures, each of your back ends might have its own dependencies. For example, an application that you host behind Application Gateway might have multiple back ends, and each back end connects to a different database, or replica. When such a dependency fails, the application might work but doesn't return valid results. For that reason, the health endpoint should ideally validate all dependencies.If each call to the health endpoint has a direct dependency call, that database receives 100 queries every 30 seconds instead of one query. To avoid excessive queries, the health endpoint should cache the state of the dependencies for a short period of time.
Verify downstream dependencies through health endpoints.To isolate failures, each of your back ends might have its own dependencies. For example, an application that you host behind Application Gateway might have multiple back ends, and each back end connects to a different database, or replica. When such a dependency fails, the application might work but doesn't return valid results. For that reason, the health endpoint should ideally validate all dependencies.
If each call to the health endpoint has a direct dependency call, that database receives 100 queries every 30 seconds instead of one query. To avoid excessive queries, the health endpoint should cache the state of the dependencies for a short period of time.
Consider Application Gateway limitations and known issues that might affect reliability.Review theApplication Gateway FAQfor important information about by-design behavior, fixes under construction, platform limitations, and possible workarounds or mitigation strategies. Don't use UDRs in the Application Gateway dedicated subnet.
Consider Application Gateway limitations and known issues that might affect reliability.Review theApplication Gateway FAQfor important information about by-design behavior, fixes under construction, platform limitations, and possible workarounds or mitigation strategies. Don't use UDRs in the Application Gateway dedicated subnet.
Consider Source Network Address Translation (SNAT) port limitations in your designthat can affect back-end connections on Application Gateway. Some factors affect how Application Gateway reaches the SNAT port limit. For example, if the back end is a public IP address, it requires its own SNAT port. To avoid SNAT port limitations, you can do one of the following options:Increase the number of instances for each Application Gateway.Scale out the back ends to have more IP addresses.Move your back ends into the same virtual network, and use private IP addresses for the back ends.If Application Gateway reaches the SNAT port limit, it affects the requests per second (RPS). For example, Application Gateway can't open a new connection to the back end, and the request fails.
Consider Source Network Address Translation (SNAT) port limitations in your designthat can affect back-end connections on Application Gateway. Some factors affect how Application Gateway reaches the SNAT port limit. For example, if the back end is a public IP address, it requires its own SNAT port. To avoid SNAT port limitations, you can do one of the following options:
Increase the number of instances for each Application Gateway.
Increase the number of instances for each Application Gateway.
Scale out the back ends to have more IP addresses.
Scale out the back ends to have more IP addresses.
Move your back ends into the same virtual network, and use private IP addresses for the back ends.If Application Gateway reaches the SNAT port limit, it affects the requests per second (RPS). For example, Application Gateway can't open a new connection to the back end, and the request fails.
Move your back ends into the same virtual network, and use private IP addresses for the back ends.
If Application Gateway reaches the SNAT port limit, it affects the requests per second (RPS). For example, Application Gateway can't open a new connection to the back end, and the request fails.
Recommendations
Security
The purpose of the Security pillar is to provideconfidentiality, integrity, and availabilityguarantees to the workload.
TheSecurity design principlesprovide a high-level design strategy for achieving those goals by applying approaches to the technical design of Application Gateway.
Design checklist
Start your design strategy based on thedesign review checklist for Securityand identify vulnerabilities and controls to improve the security posture. Extend the strategy to include more approaches as needed.
Review thesecurity baseline for Application Gateway.
Review thesecurity baseline for Application Gateway.
Block common threats at the edge.WAF integrates with Application Gateway. Enable WAF rules on the front ends to protect applications from common exploits and vulnerabilities at the network edge, which is close to the attack source. For more information, seeWAF on Application Gateway.Understand how WAF affects Application Gateway capacity changes. When you enable WAF, Application Gateway:Buffers every request until it fully arrives.Checks if the request matches with any rule violation in its core rule set.Forwards the packet to the back-end instances.Large file uploads that are 30 MB or more can introduce significant latency. Application Gateway capacity requirements change when you enable WAF, so we recommend that you properly test and validate this method first.When you use Azure Front Door and Application Gateway to protect HTTP or HTTPS applications, use WAF policies in Azure Front Door and lock down Application Gateway to receive traffic only from Azure Front Door. Certain scenarios can force you to implement rules specifically on Application Gateway. For example, if you require ModSec CRS 2.2.9, CRS 3.0, or CRS 3.1 rules, you can only implement these rules on Application Gateway. Conversely, Azure Front Door supports rate limiting and geo filtering, and Application Gateway doesn't support these features.
Block common threats at the edge.WAF integrates with Application Gateway. Enable WAF rules on the front ends to protect applications from common exploits and vulnerabilities at the network edge, which is close to the attack source. For more information, seeWAF on Application Gateway.
Understand how WAF affects Application Gateway capacity changes. When you enable WAF, Application Gateway:
Buffers every request until it fully arrives.
Buffers every request until it fully arrives.
Checks if the request matches with any rule violation in its core rule set.
Checks if the request matches with any rule violation in its core rule set.
Forwards the packet to the back-end instances.
Forwards the packet to the back-end instances.
Large file uploads that are 30 MB or more can introduce significant latency. Application Gateway capacity requirements change when you enable WAF, so we recommend that you properly test and validate this method first.
When you use Azure Front Door and Application Gateway to protect HTTP or HTTPS applications, use WAF policies in Azure Front Door and lock down Application Gateway to receive traffic only from Azure Front Door. Certain scenarios can force you to implement rules specifically on Application Gateway. For example, if you require ModSec CRS 2.2.9, CRS 3.0, or CRS 3.1 rules, you can only implement these rules on Application Gateway. Conversely, Azure Front Door supports rate limiting and geo filtering, and Application Gateway doesn't support these features.
Allow only authorized access to the control plane.Use Application Gatewayrole-based access control (RBAC)to restrict access to only the identities that need it.
Allow only authorized access to the control plane.Use Application Gatewayrole-based access control (RBAC)to restrict access to only the identities that need it.
Protect data in transit.Enable end-to-end Transport Layer Security (TLS), TLS termination, and end-to-end TLS encryption. When you re-encrypt back-end traffic, ensure that the back-end server certificate contains both the root and intermediate certificate authorities (CAs).Use a well-known CA to issue a TLS certificate of the back-end server. If you don't use a trusted CA to issue the certificate, Application Gateway checks until it finds a trusted CA certificate. It establishes a secure connection only when it finds a trusted CA. Otherwise, Application Gateway marks the back end as unhealthy.
Protect data in transit.Enable end-to-end Transport Layer Security (TLS), TLS termination, and end-to-end TLS encryption. When you re-encrypt back-end traffic, ensure that the back-end server certificate contains both the root and intermediate certificate authorities (CAs).
Use a well-known CA to issue a TLS certificate of the back-end server. If you don't use a trusted CA to issue the certificate, Application Gateway checks until it finds a trusted CA certificate. It establishes a secure connection only when it finds a trusted CA. Otherwise, Application Gateway marks the back end as unhealthy.
Protect application secrets.Use Azure Key Vault to store TLS certificates for increased security and an easier certificate renewal and rotation process.
Protect application secrets.Use Azure Key Vault to store TLS certificates for increased security and an easier certificate renewal and rotation process.
Reduce the attack surface and harden the configuration.Remove default configurations that you don't need, and harden your Application Gateway configuration to tighten security controls. Comply with all network security group (NSG) restrictions for Application Gateway.Use an appropriate Domain Name System (DNS) server for back-end pool resources. When the back-end pool contains a resolvable fully qualified domain name (FQDN), the DNS resolution is based on a private DNS zone or custom DNS server (if configured on the virtual network), or it uses the default Azure-provided DNS.
Reduce the attack surface and harden the configuration.Remove default configurations that you don't need, and harden your Application Gateway configuration to tighten security controls. Comply with all network security group (NSG) restrictions for Application Gateway.
Use an appropriate Domain Name System (DNS) server for back-end pool resources. When the back-end pool contains a resolvable fully qualified domain name (FQDN), the DNS resolution is based on a private DNS zone or custom DNS server (if configured on the virtual network), or it uses the default Azure-provided DNS.
Monitor anomalous activity.Regularly review logs to check for attacks and false positives. SendWAF logs from Application Gatewayto your organization's centralized security information and event management (SIEM), such as Microsoft Sentinel, to detect threat patterns and incorporate preventative measures in the workload design.
Monitor anomalous activity.Regularly review logs to check for attacks and false positives. SendWAF logs from Application Gatewayto your organization's centralized security information and event management (SIEM), such as Microsoft Sentinel, to detect threat patterns and incorporate preventative measures in the workload design.
Recommendations
Cost Optimization
Cost Optimization focuses ondetecting spend patterns, prioritizing investments in critical areas, and optimizing in othersto meet the organization's budget while meeting business requirements.
TheCost Optimization design principlesprovide a high-level design strategy for achieving those goals and making tradeoffs as necessary in the technical design related to Application Gateway and its environment.
Design checklist
Start your design strategy based on thedesign review checklist for Cost Optimizationfor investments. Fine-tune the design so that the workload is aligned with the budget that's allocated for the workload. Your design should use the right Azure capabilities, monitor investments, and find opportunities to optimize over time.
Familiarize yourself withApplication Gateway and WAF pricing.Choose appropriately sized options to meet your workload capacity demand and deliver expected performance without wasting resources. To estimate costs, use thepricing calculator.
Familiarize yourself withApplication Gateway and WAF pricing.Choose appropriately sized options to meet your workload capacity demand and deliver expected performance without wasting resources. To estimate costs, use thepricing calculator.
Remove unused Application Gateway instances, and optimize underused instances.To avoid unnecessary costs, identify and delete Application Gateway instances that have empty back-end pools. Stop Application Gateway instances when they're not in use.
Remove unused Application Gateway instances, and optimize underused instances.To avoid unnecessary costs, identify and delete Application Gateway instances that have empty back-end pools. Stop Application Gateway instances when they're not in use.
Optimize the scaling cost of your Application Gateway instance.To optimize your scaling strategy and reduce your wokload's demands, seeRecommendations for optimizing scaling cost.To scale the service in or out based on application traffic requirements, useautoscaling in Application Gateway v2.
Optimize the scaling cost of your Application Gateway instance.To optimize your scaling strategy and reduce your wokload's demands, seeRecommendations for optimizing scaling cost.
To scale the service in or out based on application traffic requirements, useautoscaling in Application Gateway v2.
Monitor Application Gateway consumption metrics, and understand their cost impact. Azure charges for metered instances of Application Gateway based on tracked metrics. Evaluate the various metrics and capacity units, and determine the cost drivers. For more information, seeMicrosoft Cost Management.
Monitor Application Gateway consumption metrics, and understand their cost impact. Azure charges for metered instances of Application Gateway based on tracked metrics. Evaluate the various metrics and capacity units, and determine the cost drivers. For more information, seeMicrosoft Cost Management.
Recommendations
Operational Excellence
Operational Excellence primarily focuses on procedures fordevelopment practices, observability, and release management.
TheOperational Excellence design principlesprovide a high-level design strategy for achieving those goals for the operational requirements of the workload.
Design checklist
Start your design strategy based on thedesign review checklist for Operational Excellencefor defining processes for observability, testing, and deployment related to Application Gateway.
Enable diagnostics on Application Gateway and WAF.Collect logs and metrics so you can monitor the health of the workload, identify trends in the workload performance and reliability, and troubleshoot problems. To design your overall monitoring approach, seeRecommendations for designing and creating a monitoring system.Use capacity metrics to monitor the use of the provisioned Application Gateway capacity. Set alerts on metrics to notify you of capacity problems or other problems either at Application Gateway or the back end. Use diagnostic logs to manage and troubleshoot problems with Application Gateway instances.
Enable diagnostics on Application Gateway and WAF.Collect logs and metrics so you can monitor the health of the workload, identify trends in the workload performance and reliability, and troubleshoot problems. To design your overall monitoring approach, seeRecommendations for designing and creating a monitoring system.
Use capacity metrics to monitor the use of the provisioned Application Gateway capacity. Set alerts on metrics to notify you of capacity problems or other problems either at Application Gateway or the back end. Use diagnostic logs to manage and troubleshoot problems with Application Gateway instances.
UseAzure Monitor Network Insightsto get a comprehensive view of health and metrics for network resources, including Application Gateway. Use centralized monitoring to quickly identify and resolve problems, optimize performance, and ensure the reliability of your applications.
UseAzure Monitor Network Insightsto get a comprehensive view of health and metrics for network resources, including Application Gateway. Use centralized monitoring to quickly identify and resolve problems, optimize performance, and ensure the reliability of your applications.
Monitor Application Gateway recommendations in Azure Advisor.Configure alerts to notify your team when you have new, critical recommendations for your Application Gateway instance. Advisor generates recommendations based on properties, such as the category, impact level, and recommendation type.
Monitor Application Gateway recommendations in Azure Advisor.Configure alerts to notify your team when you have new, critical recommendations for your Application Gateway instance. Advisor generates recommendations based on properties, such as the category, impact level, and recommendation type.
Recommendations
Performance Efficiency
Performance Efficiency is aboutmaintaining user experience even when there's an increase in loadby managing capacity. The strategy includes scaling resources, identifying and optimizing potential bottlenecks, and optimizing for peak performance.
ThePerformance Efficiency design principlesprovide a high-level design strategy for achieving those capacity goals against the expected usage.
Design checklist
Estimate capacity requirements for Application Gateway to support your workload requirements.Take advantage of the autoscaling functionality in Application Gateway v2. Set appropriate values for the minimum and maximum number of instances. Appropriately size the dedicated subnet that Application Gateway requires. For more information, seeRecommendations for capacity planning.Application Gateway v2 scales out based on many aspects, such as CPU, network throughput, and current connections. To determine the approximate instance count, factor in these metrics:Current compute units:This metric indicates the CPU usage. One Application Gateway instance equals approximately 10 compute units.Throughput:An Application Gateway instance can serve approximately 500 Mbps of throughput. This data depends on the type of payload.Consider this equation when you calculate instance counts.After you estimate the instance count, compare that value to the maximum instance count. Use this comparison to determine how close you are to the maximum available capacity.
Estimate capacity requirements for Application Gateway to support your workload requirements.Take advantage of the autoscaling functionality in Application Gateway v2. Set appropriate values for the minimum and maximum number of instances. Appropriately size the dedicated subnet that Application Gateway requires. For more information, seeRecommendations for capacity planning.
Application Gateway v2 scales out based on many aspects, such as CPU, network throughput, and current connections. To determine the approximate instance count, factor in these metrics:
Current compute units:This metric indicates the CPU usage. One Application Gateway instance equals approximately 10 compute units.
Current compute units:This metric indicates the CPU usage. One Application Gateway instance equals approximately 10 compute units.
Throughput:An Application Gateway instance can serve approximately 500 Mbps of throughput. This data depends on the type of payload.
Throughput:An Application Gateway instance can serve approximately 500 Mbps of throughput. This data depends on the type of payload.
Consider this equation when you calculate instance counts.
After you estimate the instance count, compare that value to the maximum instance count. Use this comparison to determine how close you are to the maximum available capacity.
Take advantage of features for autoscaling and performance benefits.The v2 SKU offers autoscaling, which scales up Application Gateway as traffic increases. Compared to the v1 SKU, the v2 SKU has capabilities that enhance the performance of the workload. For example, the v2 SKU has better TLS offload performance, quicker deployment and update times, and zone-redundancy support. For more information, seeScaling Application Gateway v2 and WAF v2.If you use Application Gateway v1, consider migrating to Application Gateway v2. For more information, seeMigrate Application Gateway and WAF from v1 to v2.
Take advantage of features for autoscaling and performance benefits.The v2 SKU offers autoscaling, which scales up Application Gateway as traffic increases. Compared to the v1 SKU, the v2 SKU has capabilities that enhance the performance of the workload. For example, the v2 SKU has better TLS offload performance, quicker deployment and update times, and zone-redundancy support. For more information, seeScaling Application Gateway v2 and WAF v2.
If you use Application Gateway v1, consider migrating to Application Gateway v2. For more information, seeMigrate Application Gateway and WAF from v1 to v2.
Recommendations
Azure policies
Azure provides an extensive set of built-in policies related to App Service and its dependencies. A set of Azure policies can audit some of the preceding recommendations. For example, you can check whether:
You should enable WAF for Application Gateway. Deploy WAF in front of public-facing web applications to add another inspection layer for incoming traffic. WAF provides centralized protection for your web applications. It helps prevent common exploits and vulnerabilities, such as SQL injections, cross-site scripting, and local and remote file executions. You can also use custom rules to restrict access to your web applications based on countries or regions, IP address ranges, and other HTTP or HTTPS parameters.
You should enable WAF for Application Gateway. Deploy WAF in front of public-facing web applications to add another inspection layer for incoming traffic. WAF provides centralized protection for your web applications. It helps prevent common exploits and vulnerabilities, such as SQL injections, cross-site scripting, and local and remote file executions. You can also use custom rules to restrict access to your web applications based on countries or regions, IP address ranges, and other HTTP or HTTPS parameters.
WAF should use the specified mode for Application Gateway. Ensure that all WAF policies for Application Gateway useDetectionorPreventionmode.
WAF should use the specified mode for Application Gateway. Ensure that all WAF policies for Application Gateway useDetectionorPreventionmode.
You should enable Azure DDoS Protection. Enable DDoS Protection for all virtual networks that have a subnet that contains Application Gateway with a public IP.
You should enable Azure DDoS Protection. Enable DDoS Protection for all virtual networks that have a subnet that contains Application Gateway with a public IP.
For comprehensive governance, review theAzure Policy built-in definitionsand other policies that might affect networking.
Azure Advisor recommendations
Azure Advisor is a personalized cloud consultant that helps you follow best practices to optimize your Azure deployments. Here are some recommendations that can help you improve the reliability, security, cost effectiveness, performance, and operational excellence of Application Gateway.
Reliability
Security
Cost Optimization
Performance
Operational Excellence
Next steps
Use API gateways in microservices
Azure Firewall and Application Gateway for virtual networks
Protect APIs with Application Gateway and Azure API Management
Securely managed web applications
Zero Trust network for web applications with Azure Firewall and Application Gateway
Quickstart: Direct web traffic with Application Gateway via the Azure portal
Feedback
Was this page helpful?
Additional resources