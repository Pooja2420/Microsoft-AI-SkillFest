Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Azure SQL transparent data encryption with customer-managed key
Article
2025-03-28
25 contributors
In this article
Applies to:Azure SQL DatabaseAzure SQL Managed InstanceAzure Synapse Analytics (dedicated SQL pools only)
Transparent data encryption (TDE)in Azure SQL with customer-managed key (CMK) enables Bring Your Own Key (BYOK) scenario for data protection at rest, and allows organizations to implement separation of duties in the management of keys and data. With customer-managed TDE, the customer is responsible for and in a full control of a key lifecycle management (key creation, upload, rotation, deletion), key usage permissions, and auditing of operations on keys.
In this scenario, the key used for encryption of the Database Encryption Key (DEK), called TDE protector, is a customer-managed asymmetric key stored in a customer-owned and customer-managedAzure Key Vault (AKV), a cloud-based external key management system. Key Vault is highly available and scalable secure storage for RSA cryptographic keys, optionally backed by FIPS 140-2 Level 2 validated hardware security modules (HSMs). It doesn't allow direct access to a stored key, but provides services of encryption/decryption using the key to the authorized entities. The key can be generated by the key vault, imported, ortransferred to the key vault from an on-premises HSM device.
For Azure SQL Database and Azure Synapse Analytics, the TDE protector is set at the server level and is inherited by all encrypted databases associated with that server. For Azure SQL Managed Instance, the TDE protector is set at the instance level and is inherited by all encrypted databases on that instance. The termserverrefers both to a server in SQL Database and Azure Synapse and to a managed instance in SQL Managed Instance throughout this document, unless stated differently.
Managing the TDE protector at the database level in Azure SQL Database is available. For more information, seeTransparent data encryption (TDE) with customer-managed keys at the database level.
Note
This article applies to Azure SQL Database, Azure SQL Managed Instance, and Azure Synapse Analytics (dedicated SQL pools (formerly SQL DW)). For documentation on transparent data encryption for dedicated SQL pools inside Synapse workspaces, seeAzure Synapse Analytics encryption.
Note
Microsoft Entra IDwas previously known as Azure Active Directory (Azure AD).
Benefits of the customer-managed TDE
Note
In this article, the terms Customer Managed Key (CMK) and Bring Your Own Key (BYOK) are used interchangeably, but they represent some differences.
Customer Managed Key (CMK)- The customer manages the key lifecycle, including key creation, rotation, and deletion. The key is stored inAzure Key VaultorAzure Key Vault Managed HSMand used for encryption of the Database Encryption Key (DEK) in Azure SQL, SQL Server on Azure VM, and SQL Server on-premises.
Bring Your Own Key (BYOK)- The customer securely brings or imports their own key from an on-premises hardware security module (HSM) into Azure Key Vault or Azure Key Vault Managed HSM. Such imported keys might be used as any other key in Azure Key Vault, including as a Customer Managed Key for encryption of the DEK. For more information, seeImport HSM-protected keys to Managed HSM (BYOK).
Customer-managed TDE provides the following benefits to the customer:
Full and granular control over usage and management of the TDE protector;
Full and granular control over usage and management of the TDE protector;
Transparency of the TDE protector usage;
Transparency of the TDE protector usage;
Ability to implement separation of duties in the management of keys and data within the organization;
Ability to implement separation of duties in the management of keys and data within the organization;
Key Vault administrator can revoke key access permissions to make encrypted database inaccessible;
Key Vault administrator can revoke key access permissions to make encrypted database inaccessible;
Central management of keys in AKV;
Central management of keys in AKV;
Greater trust from your end customers, since AKV is designed such that Microsoft can't see nor extract encryption keys;
Greater trust from your end customers, since AKV is designed such that Microsoft can't see nor extract encryption keys;
Important
For those using service-managed TDE who would like to start using customer-managed TDE, data remains encrypted during the process of switching over, and there's no downtime nor re-encryption of the database files. Switching from a service-managed key to a customer-managed key only requires re-encryption of the DEK, which is a fast and online operation.
How customer-managed TDE works

In order for thelogical server in Azureto use the TDE protector stored in AKV for encryption of the DEK, theKey Vault Administratorneeds to give access rights to the server using its unique Microsoft Entra identity. There are two access models to grant the server access to the key vault:
Azure role-based access control (RBAC) - Use Azure RBAC to grant a user, group, or application access to the key vault. This method is recommended for its flexibility and granularity. TheKey Vault Crypto Service Encryption Userrole is needed by the server identity to be able to use the key for encryption and decryption operations.
Azure role-based access control (RBAC) - Use Azure RBAC to grant a user, group, or application access to the key vault. This method is recommended for its flexibility and granularity. TheKey Vault Crypto Service Encryption Userrole is needed by the server identity to be able to use the key for encryption and decryption operations.
Vault access policy - Use the key vault access policy to grant the server access to the key vault. This method is simpler and more straightforward, but less flexible. The server identity needs to have the following permissions on the key vault:get- for retrieving the public part and properties of the key in the Key VaultwrapKey- to be able to protect (encrypt) DEKunwrapKey- to be able to unprotect (decrypt) DEK
Vault access policy - Use the key vault access policy to grant the server access to the key vault. This method is simpler and more straightforward, but less flexible. The server identity needs to have the following permissions on the key vault:
get- for retrieving the public part and properties of the key in the Key Vault
wrapKey- to be able to protect (encrypt) DEK
unwrapKey- to be able to unprotect (decrypt) DEK
In theAccess configurationAzure portal menu of the key vault, you have the option of selectingAzure role-based access controlorVault access policy. For step by step instructions on setting up an Azure Key Vault access configuration for TDE, seeSet up SQL Server TDE Extensible Key Management by using Azure Key Vault. For more information on the access models, seeAzure Key Vault security.
AKey Vault Administratorcan alsoenable logging of key vault audit events, so they can be audited later.
When server is configured to use a TDE protector from AKV, the server sends the DEK of each TDE-enabled database to the key vault for encryption. Key vault returns the encrypted DEK, which is then stored in the user database.
When needed, server sends protected DEK to the key vault for decryption.
Auditors can use Azure Monitor to review key vault AuditEvent logs, if logging is enabled.
Note
It may take around 10 minutes for any permission changes to take effect for the key vault. This includes revoking access permissions to the TDE protector in AKV, and users within this time frame may still have access permissions.
Requirements for configuring customer-managed TDE
Requirements for configuring AKV
Soft-deleteandpurge protectionfeatures must be enabled on the key vault to protect from data loss due to accidental key (or key vault) deletion.
Soft-deleteandpurge protectionfeatures must be enabled on the key vault to protect from data loss due to accidental key (or key vault) deletion.
Grant the server or managed instance access to the key vault (get,wrapKey,unwrapKey) using its Microsoft Entra identity. The server identity can be a system-assigned managed identity or a user-assigned managed identity assigned to the server. When using the Azure portal, the Microsoft Entra identity gets automatically created when the server is created. When using PowerShell or Azure CLI, the Microsoft Entra identity must be explicitly created and should be verified. SeeConfigure TDE with BYOKandConfigure TDE with BYOK for SQL Managed Instancefor detailed step-by-step instructions when using PowerShell.Depending on the permission model of the key vault (access policy or Azure RBAC), key vault access can be granted either by creating an access policy on the key vault, or by creating a new Azure RBAC role assignment with the roleKey Vault Crypto Service Encryption User.
Grant the server or managed instance access to the key vault (get,wrapKey,unwrapKey) using its Microsoft Entra identity. The server identity can be a system-assigned managed identity or a user-assigned managed identity assigned to the server. When using the Azure portal, the Microsoft Entra identity gets automatically created when the server is created. When using PowerShell or Azure CLI, the Microsoft Entra identity must be explicitly created and should be verified. SeeConfigure TDE with BYOKandConfigure TDE with BYOK for SQL Managed Instancefor detailed step-by-step instructions when using PowerShell.
Depending on the permission model of the key vault (access policy or Azure RBAC), key vault access can be granted either by creating an access policy on the key vault, or by creating a new Azure RBAC role assignment with the roleKey Vault Crypto Service Encryption User.
When using a firewall with AKV, you must enable the optionAllow trusted Microsoft services to bypass the firewall, unless you're usingprivate endpoints for the AKV. For more information, seeConfigure Azure Key Vault firewalls and virtual networks.
When using a firewall with AKV, you must enable the optionAllow trusted Microsoft services to bypass the firewall, unless you're usingprivate endpoints for the AKV. For more information, seeConfigure Azure Key Vault firewalls and virtual networks.
Enable soft-delete and purge protection for AKV
Important
Bothsoft-deleteandpurge protectionmust be enabled on the key vault when configuring customer-managed TDE on a new or existing server or managed instance.
Soft-deleteandpurge protectionare important features of Azure Key Vault that allow recovery of deleted vaults and deleted key vault objects, reducing the risk of a user accidentally or maliciously deleting a key or a key vault.
Soft-deleted resources are retained for 90 days, unless recovered or purged by the customer. Therecoverandpurgeactions have their own permissions associated in a key vault access policy. The soft-delete feature is on by default for new key vaults and can also be enabled using the Azure portal,PowerShellorAzure CLI.
Soft-deleted resources are retained for 90 days, unless recovered or purged by the customer. Therecoverandpurgeactions have their own permissions associated in a key vault access policy. The soft-delete feature is on by default for new key vaults and can also be enabled using the Azure portal,PowerShellorAzure CLI.
Purge protection can be turned on usingAzure CLIorPowerShell. When purge protection is enabled, a vault or an object in the deleted state can't be purged until the retention period has passed. The default retention period is 90 days, but is configurable from 7 to 90 days through the Azure portal.
Purge protection can be turned on usingAzure CLIorPowerShell. When purge protection is enabled, a vault or an object in the deleted state can't be purged until the retention period has passed. The default retention period is 90 days, but is configurable from 7 to 90 days through the Azure portal.
Azure SQL requires soft-delete and purge protection to be enabled on the key vault containing the encryption key being used as the TDE protector for the server or managed instance. This helps prevent the scenario of accidental or malicious key vault or key deletion that can lead to the database going intoInaccessiblestate.
Azure SQL requires soft-delete and purge protection to be enabled on the key vault containing the encryption key being used as the TDE protector for the server or managed instance. This helps prevent the scenario of accidental or malicious key vault or key deletion that can lead to the database going intoInaccessiblestate.
When configuring the TDE protector on an existing server or during server creation, Azure SQL validates that the key vault being used has soft-delete and purge protection turned on. If soft-delete and purge protection aren't enabled on the key vault, the TDE protector setup fails with an error. In this case, soft-delete and purge protection must first be enabled on the key vault and then the TDE protector setup should be performed.
When configuring the TDE protector on an existing server or during server creation, Azure SQL validates that the key vault being used has soft-delete and purge protection turned on. If soft-delete and purge protection aren't enabled on the key vault, the TDE protector setup fails with an error. In this case, soft-delete and purge protection must first be enabled on the key vault and then the TDE protector setup should be performed.
Requirements for configuring TDE protector
TDE protector can only be an asymmetric, RSA, or RSA HSM key. The supported key lengths are 2,048 bits and 3,072 bits.
TDE protector can only be an asymmetric, RSA, or RSA HSM key. The supported key lengths are 2,048 bits and 3,072 bits.
The key activation date (if set) must be a date and time in the past. Expiration date (if set) must be a future date and time.
The key activation date (if set) must be a date and time in the past. Expiration date (if set) must be a future date and time.
The key must be in theEnabledstate.
The key must be in theEnabledstate.
If you're importing existing key into the key vault, make sure to provide it in the supported file formats (.pfx,.byok, or.backup).
If you're importing existing key into the key vault, make sure to provide it in the supported file formats (.pfx,.byok, or.backup).
.pfx
.byok
.backup
Note
Azure SQL and SQL Server on Azure VM support using an RSA key stored in a Managed HSM as TDE protector. Azure Key Vault Managed HSM is a fully managed, highly available, single-tenant, standards-compliant cloud service that enables you to safeguard cryptographic keys for your cloud applications, using FIPS 140-2 Level 3 validated HSMs. Learn more aboutManaged HSMsand the configuration or RBAC permissions needed for SQL Server through the article,Set up SQL Server TDE Extensible Key Management by using Azure Key Vault.
An issue with Thales CipherTrust Manager versions prior to v2.8.0 prevents keys newly imported into Azure Key Vault from being used with Azure SQL Database or Azure SQL Managed Instance for customer-managed TDE scenarios. More details about this issue can be foundhere. For such cases, wait 24 hours after importing the key into key vault to begin using it as TDE protector for the server or managed instance. This issue has been resolved in Thales CipherTrust Managerv2.8.0.
Recommendations when configuring customer-managed TDE
Recommendations when configuring AKV
Associate at most 500 General Purpose or 200 Business Critical databases in total with a key vault in a single subscription to ensure high availability when server accesses the TDE protector in the key vault. These figures are based on the experience and documented in thekey vault service limits. The intention is to prevent issues after server failover, as it will trigger as many key operations against the vault as there are databases in that server.
Associate at most 500 General Purpose or 200 Business Critical databases in total with a key vault in a single subscription to ensure high availability when server accesses the TDE protector in the key vault. These figures are based on the experience and documented in thekey vault service limits. The intention is to prevent issues after server failover, as it will trigger as many key operations against the vault as there are databases in that server.
Set a resource lock on the key vault to control who can delete this critical resource and prevent accidental or unauthorized deletion. Learn more aboutresource locks.
Set a resource lock on the key vault to control who can delete this critical resource and prevent accidental or unauthorized deletion. Learn more aboutresource locks.
Enable auditing and reporting on all encryption keys: Key vault provides logs that are easy to inject into other security information and event management tools. Operations Management SuiteLog Analyticsis one example of a service that is already integrated.
Enable auditing and reporting on all encryption keys: Key vault provides logs that are easy to inject into other security information and event management tools. Operations Management SuiteLog Analyticsis one example of a service that is already integrated.
Use a key vault from an Azure region that can replicate its content to a paired region for maximum availability. For more information, seeBest practices for using Azure Key VaultandAzure Key Vault availability and redundancy.
Use a key vault from an Azure region that can replicate its content to a paired region for maximum availability. For more information, seeBest practices for using Azure Key VaultandAzure Key Vault availability and redundancy.
Note
To allow greater flexibility in configuring customer-managed TDE, Azure SQL Database and Azure SQL Managed Instance in one region can now be linked to key vault in any other region. The server and key vault don't have to be colocated in the same region.
Recommendations when configuring TDE protector
Keep a copy of the TDE protector on a secure place or escrow it to the escrow service.
Keep a copy of the TDE protector on a secure place or escrow it to the escrow service.
If the key is generated in the key vault, create a key backup before using the key in AKV for the first time. Backup can be restored to an Azure Key Vault only. Learn more about theBackup-AzKeyVaultKeycommand.
If the key is generated in the key vault, create a key backup before using the key in AKV for the first time. Backup can be restored to an Azure Key Vault only. Learn more about theBackup-AzKeyVaultKeycommand.
Create a new backup whenever any changes are made to the key (for example, key attributes, tags, ACLs).
Create a new backup whenever any changes are made to the key (for example, key attributes, tags, ACLs).
Keep previous versionsof the key in the key vault when rotating keys, so older database backups can be restored. When the TDE protector is changed for a database, old backups of the databaseare not updatedto use the latest TDE protector. At restore time, each backup needs the TDE protector it was encrypted with at creation time. Key rotations can be performed following the instructions atRotate the transparent data encryption protector Using PowerShell.
Keep previous versionsof the key in the key vault when rotating keys, so older database backups can be restored. When the TDE protector is changed for a database, old backups of the databaseare not updatedto use the latest TDE protector. At restore time, each backup needs the TDE protector it was encrypted with at creation time. Key rotations can be performed following the instructions atRotate the transparent data encryption protector Using PowerShell.
Keep all previously used keys in AKV even after switching to service-managed keys. It ensures database backups can be restored with the TDE protectors stored in AKV. TDE protectors created with Azure Key Vault have to be maintained until all remaining stored backups have been created with service-managed keys. Make recoverable backup copies of these keys usingBackup-AzKeyVaultKey.
Keep all previously used keys in AKV even after switching to service-managed keys. It ensures database backups can be restored with the TDE protectors stored in AKV. TDE protectors created with Azure Key Vault have to be maintained until all remaining stored backups have been created with service-managed keys. Make recoverable backup copies of these keys usingBackup-AzKeyVaultKey.
To remove a potentially compromised key during a security incident without the risk of data loss, follow the steps from theRemove a potentially compromised key.
To remove a potentially compromised key during a security incident without the risk of data loss, follow the steps from theRemove a potentially compromised key.
Rotation of TDE protector
Rotating the TDE protector for a server means to switch to a new asymmetric key that protects the databases on the server. Key rotation is an online operation and should only take a few seconds to complete. The operation only decrypts and re-encrypts the database encryption key, not the entire database.
Rotation of the TDE protectorcan either be done manually or by using the automated rotation feature.
Automated rotation of the TDE protectorcan be enabled when configuring the TDE protector for the server. Automated rotation is disabled by default. When enabled, the server will continuously check the key vault for any new versions of the key being used as the TDE protector. If a new version of the key is detected, the TDE protector on the server or database will be automatically rotated to the latest key version within 24 hours.
When used withautomated key rotation in Azure Key Vault, this feature enables end-to-end zero-touch rotation for the TDE protector on Azure SQL Database and Azure SQL Managed Instance.
Note
Setting TDE with CMK using manual or automated rotation of keys will always use the latest version of the key that is supported. The setup doesn't allow using a previous or lower version of keys. Always using the latest key version complies with the Azure SQL security policy that disallows previous key versions that might be compromised. The previous versions of the key might be needed fordatabase backup or restore purposes, especially forlong-term retention backups, where the older key versions must be preserved. For geo-replication setups, all keys required by the source server need to be present on the target server.
Geo-replication considerations when configuring automated rotation of the TDE protector
To avoid issues while establishing or during geo-replication, when automatic rotation of the TDE protector is enabled on the primary or secondary server, it's important to follow these rules when configuring geo-replication:
Both the primary and secondary servers must haveGet,wrapKeyandunwrapKeypermissions to the primary server's key vault (key vault that holds the primary server's TDE protector key).
Both the primary and secondary servers must haveGet,wrapKeyandunwrapKeypermissions to the primary server's key vault (key vault that holds the primary server's TDE protector key).
For a server with automated key rotation enabled, before initiating geo-replication, add the encryption key being used as TDE protector on the primary server to the secondary server. The secondary server requires access to the key in the same key vault being used with the primary server (and not another key with the same key material). Alternatively, before initiating geo-replication, ensure that the secondaryserver's managed identity(user-assigned or system-assigned) has required permissions on the primary server's key vault, and the system will attempt to add the key to the secondary server.
For a server with automated key rotation enabled, before initiating geo-replication, add the encryption key being used as TDE protector on the primary server to the secondary server. The secondary server requires access to the key in the same key vault being used with the primary server (and not another key with the same key material). Alternatively, before initiating geo-replication, ensure that the secondaryserver's managed identity(user-assigned or system-assigned) has required permissions on the primary server's key vault, and the system will attempt to add the key to the secondary server.
For an existing geo-replication setup, prior to enabling automated key rotation on the primary server, add the encryption key being used as TDE protector on the primary server to the secondary server. The secondary server requires access to the key in the same key vault being used with the primary server (and not another key with the same key material). Alternatively, before enabling automated key, ensure that the secondaryserver's managed identity(user-assigned or system-assigned) has required permissions on the primary server's key vault, and the system will attempt to add the key to the secondary server.
For an existing geo-replication setup, prior to enabling automated key rotation on the primary server, add the encryption key being used as TDE protector on the primary server to the secondary server. The secondary server requires access to the key in the same key vault being used with the primary server (and not another key with the same key material). Alternatively, before enabling automated key, ensure that the secondaryserver's managed identity(user-assigned or system-assigned) has required permissions on the primary server's key vault, and the system will attempt to add the key to the secondary server.
Geo-replication scenarios using customer-managed keys (CMK) for TDE is supported. TDE with automatic key rotation must be configured on all servers if you're configuring TDE in the Azure portal. For more information on setting up automatic key rotation for geo-replication configurations with TDE, seeAutomatic key rotation for geo-replication configurations.
Geo-replication scenarios using customer-managed keys (CMK) for TDE is supported. TDE with automatic key rotation must be configured on all servers if you're configuring TDE in the Azure portal. For more information on setting up automatic key rotation for geo-replication configurations with TDE, seeAutomatic key rotation for geo-replication configurations.
Inaccessible TDE protector
When TDE is configured to use a customer-managed key, continuous access to the TDE protector is required for the database to stay online. If the server loses access to the customer-managed TDE protector in AKV, in up to 10 minutes a database starts denying all connections with the corresponding error message and change its state toInaccessible. The only action allowed on a database in the Inaccessible state is deleting it.
Note
If the database is inaccessible due to an intermittent networking outage, there's no action required and the databases will come back online automatically. To mitigate the impact of network errors or outages while trying to access the TDE protector in Azure Key Vault, a 24 hour buffer has been introduced before the service attempts to move the database to an inaccessible state. If a failover occurs before reaching the inaccessible state, the database becomes unavailable due to the loss of the encryption cache.
After access to the key is restored, taking database back online requires extra time and steps, which might vary based on the time elapsed without access to the key and the size of the data in the database:
Note
If key access is restored within 30 minutes, the database will autoheal within the next hour.
If key access is restored after more than 30 minutes, autoheal of the database isn't possible. Bringing back the database requires extra steps on the Azure portal and can take a significant amount of time depending on the size of the database.
Once the database is back online, previously configured server-level settings that might includefailover groupconfiguration, tags, and database-level settings such as elastic pools configuration, read scale, auto pause, point-in-time-restore history, long term retention policy, and others will be lost. Therefore, it's recommended that customers implement a notification system that identifies loss of encryption key access within 30 minutes. Once the 30-minutes window has expired, we recommend validating all server and database level settings on the recovered database.
Below is a view of the extra steps required on the portal to bring an inaccessible database back online.

Accidental TDE protector access revocation
It might happen that someone with sufficient access rights to the key vault accidentally disables server access to the key by:
revoking the key vault'sget,wrapKey,unwrapKeypermissions from the server
revoking the key vault'sget,wrapKey,unwrapKeypermissions from the server
deleting the key
deleting the key
deleting the key vault
deleting the key vault
changing the key vault's firewall rules
changing the key vault's firewall rules
deleting the managed identity of the server in Microsoft Entra ID
deleting the managed identity of the server in Microsoft Entra ID
Learn more aboutthe common causes for database to become inaccessible.
Blocked connectivity between SQL Managed Instance and Key Vault
The network connectivity block between SQL Managed Instance and key vault happens mostly when the key vault resource exists but its endpoint can't be reached from the managed instance. All scenarios where the key vault endpoint can be reached but connection is denied, missing permissions, etc., will cause the databases to change its state toInaccessible.
The most common causes for lack of networking connectivity to Key Vault are:
Key Vault is exposed via private endpoint and the private IP address of the AKV service isn't allowed in the outbound rules of the Network Security Group (NSG) associated with the managed instance subnet.
Bad DNS resolution, like when the key vault FQDN isn't resolved or resolves to an invalid IP address.
Test the connectivityfrom SQL Managed Instance to the Key Vault hosting the TDE protector.
The endpoint is your vault FQDN, like<vault_name>.vault.azure.net(without the https://).
The port to be tested is 443.
The result for RemoteAddress should exist and be the correct IP address
The result for TCP test should beTcpTestSucceeded: True.
In case the test returnsTcpTestSucceeded: False, review the networking configuration:
Check the resolved IP address, confirm it's valid. A missing value means there's issues with DNS resolution.Confirm that the network security group on the managed instance has anoutboundrule that covers the resolved IP address on port 443, especially when the resolved address belongs to the key vault's private endpoint.Check other networking configurations like route table, existence of virtual appliance and its configuration, etc.
Confirm that the network security group on the managed instance has anoutboundrule that covers the resolved IP address on port 443, especially when the resolved address belongs to the key vault's private endpoint.
Check other networking configurations like route table, existence of virtual appliance and its configuration, etc.
Monitoring of the customer-managed TDE
To monitor database state and to enable alerting for loss of TDE protector access, configure the following Azure features:
Azure Resource Health. An inaccessible database that has lost access to the TDE protector will show as "Unavailable" after the first connection to the database has been denied.
Activity Logwhen access to the TDE protector in the customer-managed key vault fails, entries are added to the activity log. Creating alerts for these events enable you to reinstate access as soon as possible.
Action Groupscan be defined to send you notifications and alerts based on your preferences, for example, Email/SMS/Push/Voice, Logic App, Webhook, ITSM, or Automation Runbook.
Databasebackupandrestorewith customer-managed TDE
backup
restore
Once a database is encrypted with TDE using a key from Key Vault, any newly generated backups are also encrypted with the same TDE protector. When the TDE protector is changed, old backups of the databaseare not updatedto use the latest TDE protector.
To restore a backup encrypted with a TDE protector from Key Vault, make sure that the key material is available to the target server. Therefore, we recommend that you keep all the old versions of the TDE protector in key vault, so database backups can be restored.
Important
There can't be more than one TDE protector set for a server at any moment. The key marked withMake the key the default TDE protectorin the Azure portal pane is the TDE protector. However, multiple keys can be linked to a server without marking them as a TDE protector. These keys aren't used for protecting the DEK, but can be used during restore from a backup, if the backup file is encrypted with the key with the corresponding thumbprint.
If the key that is needed for restoring a backup is no longer available to the target server, the following error message is returned on the restore try:
"Target server<Servername>doesn't have access to all AKV URIs created between <Timestamp #1> and <Timestamp #2>. Retry operation after restoring all AKV URIs."
<Servername>
To mitigate it, run theGet-AzSqlServerKeyVaultKeycmdlet for the target server orGet-AzSqlInstanceKeyVaultKeyfor the target managed instance to return the list of available keys and identify the missing ones. To ensure all backups can be restored, make sure the target server for the restore has access to all of keys needed. These keys don't need to be marked as TDE protector.
To learn more about backup recovery for SQL Database, seeRecover a database in SQL Database. To learn more about backup recovery for dedicated SQL pools in Azure Synapse Analytics, seeRecover a dedicated SQL pool. For SQL Server's native backup/restore with SQL Managed Instance, seeQuickstart: Restore a database to SQL Managed Instance.
Another consideration for log files: Backed up log files remain encrypted with the original TDE protector, even if it was rotated and the database is now using a new TDE protector. At restore time, both keys are needed to restore the database. If the log file is using a TDE protector stored in Azure Key Vault, this key is needed at restore time, even if the database has been changed to use service-managed TDE in the meantime.
High availability with customer-managed TDE
With the AKV providing multiple layers of redundancy, TDEs using a customer managed key can take advantage of AKV availability and resilience, and rely fully on the AKV redundancy solution.
AKV's multiple redundancy layers ensure key access even if individual service components fail or Azure regions or availability zones are down. For more information, seeAzure Key Vault availability and redundancy.
AKV offers the following components of availability and resilience that are provided automatically without user intervention:
Data replication
Failover within a region
Failover across regions
Note
For all pair regions, AKV keys are replicated to both regions and there are Hardware Security Modules (HSM) in both regions that can operate on those keys. For more information, seeData replication. This applies to both Standard and Premium Azure Key Vault service tiers, and software or hardware keys.
Geo-DR and customer-managed TDE
In bothactive geo-replicationandfailover groupsscenarios, the primary and secondary servers involvedâ¯can be linked to the Azure Key Vault located in any region. The server and key vault don't have to be collocated in the same region. With this, for simplicity, the primary and secondary servers can be connected to the same key vault (in any region).â¯This helps avoid scenarios where key material might be out of sync if separate key vaults are used for both the servers.â¯
Azure Key Vault has multiple layers of redundancy in place to make sure that the keys and key vaults remain available in case of service or region failures.â¯The redundancy is supported by the nonpaired as well as paired regions. For more information, seeAzure Key Vault availability and redundancy.
There are several options for storing the TDE protector key, based on the customers' requirements:
Leverage Azure Key Vault and the native paired region resiliency or nonpaired region resiliency.
Leverage Azure Key Vault and the native paired region resiliency or nonpaired region resiliency.
Leverage customer HSM and load keys in Azure Key Vault in separate AKVs across multiple regions.
Leverage customer HSM and load keys in Azure Key Vault in separate AKVs across multiple regions.
Leverage Managed HSM and the cross-region replication option.This option allows the customer to select the desired region where the keys will be replicated.
Leverage Managed HSM and the cross-region replication option.
This option allows the customer to select the desired region where the keys will be replicated.
The following diagram represents a configuration for paired region (primary and secondary) for an AKV cross-failover with Azure SQL setup for geo-replication using a failover group:

Azure Key Vault remarks for Geo-DR
Both primary and secondary servers in Azure SQL access the AKV in the primary region.
Both primary and secondary servers in Azure SQL access the AKV in the primary region.
The AKV failover is initiated by the AKV service and not by the customer.
The AKV failover is initiated by the AKV service and not by the customer.
In case of AKV failover to the secondary region, the server in Azure SQL can still access the same AKV. Although internally, the AKV connection is redirected to the AKV in the secondary region.
In case of AKV failover to the secondary region, the server in Azure SQL can still access the same AKV. Although internally, the AKV connection is redirected to the AKV in the secondary region.
New key creations, imports, and key rotations are only possible while the AKV in the primary is available.
New key creations, imports, and key rotations are only possible while the AKV in the primary is available.
Once the failover occurs, key rotation isn't allowed until the AKV in the primary region of the paired region is accessible again.
Once the failover occurs, key rotation isn't allowed until the AKV in the primary region of the paired region is accessible again.
Customer can't manually connect to the secondary region.
Customer can't manually connect to the secondary region.
The AKV is in a read-only state while the AKV in the primary region is unavailable
The AKV is in a read-only state while the AKV in the primary region is unavailable
Customer can't choose or check what region the AKV is currently in.
Customer can't choose or check what region the AKV is currently in.
For nonpaired region, both Azure SQL servers access the AKV  in the first region (as indicated on the graph) and the AKV uses zone-redundant storage  to replicate the data within the region, across independent availability zones of the same region.
For nonpaired region, both Azure SQL servers access the AKV  in the first region (as indicated on the graph) and the AKV uses zone-redundant storage  to replicate the data within the region, across independent availability zones of the same region.
For more information, seeAzure Key Vault availability and redundancy,Azure region pairs and nonpaired regions, andService-level agreements for Azure Key Vault.
Azure SQL remarks for Geo-DR
Use the zone-redundant option of Azure SQL MI and Azure SQL DB to increase resilience. For more information, seeWhat are Azure availability zones?.
Use the zone-redundant option of Azure SQL MI and Azure SQL DB to increase resilience. For more information, seeWhat are Azure availability zones?.
Use failover groups for Azure SQL MI and Azure SQL DB for disaster recovery to a secondary region. For more information, seeFailover groups overview & best practices.
Use failover groups for Azure SQL MI and Azure SQL DB for disaster recovery to a secondary region. For more information, seeFailover groups overview & best practices.
The configuration might require a more complex DNS zone if private endpoints are used in Azure SQL (for example, it can't create two private endpoints to the same resource in the same DNS zone).
The configuration might require a more complex DNS zone if private endpoints are used in Azure SQL (for example, it can't create two private endpoints to the same resource in the same DNS zone).
Ensure applications leverage retry logic.
Ensure applications leverage retry logic.
There are several scenarios when customers might want to choose Managed Hardware Security Modules (HSM) solution over AKV:
Manual connection requirement to the secondary vault.
Manual connection requirement to the secondary vault.
Read access requirement to the vault even if a failure occurs.
Read access requirement to the vault even if a failure occurs.
Flexibility to choose which region their key material is replicated toRequires enabling cross-region replication which creates the second Managed HSM pool in the second region.
Flexibility to choose which region their key material is replicated to
Requires enabling cross-region replication which creates the second Managed HSM pool in the second region.
Using the Managed HSM allows customers to create an exact replica for HSM if the original is lost or unavailable.
Using the Managed HSM allows customers to create an exact replica for HSM if the original is lost or unavailable.
Use of Managed HSM for security or regulatory requirements.
Use of Managed HSM for security or regulatory requirements.
Having the ability to back up the entire vault versus backing up individual keys.
Having the ability to back up the entire vault versus backing up individual keys.
For more information, seeEnable multi-region replication on Azure Managed HSMandManaged HSM disaster recovery.
Azure Policy for customer-managed TDE
Azure Policy can be used to enforce customer-managed TDE during the creation or update of an Azure SQL Database server or Azure SQL Managed Instance. With this policy in place, any attempts to create or update alogical server in Azureor managed instance will fail if it isn't configured with a customer-managed key.
The Azure Policy can be applied to the whole Azure subscription, or just within a resource group.
For more information on Azure Policy, seeWhat is Azure PolicyandAzure Policy definition structure.
The following two built-in policies are supported for customer-managed TDE in Azure Policy:
SQL servers should use customer-managed keys to encrypt data at rest
Managed instances should use customer-managed keys to encrypt data at rest
The customer-managed TDE policy can be managed by going to theAzure portal, and searching for thePolicyservice. UnderDefinitions, search for customer-managed key.
There are three effects for these policies:
Audit- The default setting, and will only capture an audit report in the Azure Policy activity logs
Deny- Prevents logical server or managed instance creation or update without a customer-managed key configured
Disabled- Will disable the policy, and won't restrict users from creating or updating a logical server or managed instance without customer-managed TDE enabled
If the Azure Policy for customer-managed TDE is set toDeny, Azure SQL logical server or managed instance creation will fail. The details of this failure will be recorded in theActivity logof the resource group.
Important
Earlier versions of built-in policies for customer-managed TDE containing theAuditIfNotExisteffect have been deprecated. Existing policy assignments using the deprecated policies aren't affected and will continue to work as before.
AuditIfNotExist
Related content
Rotate the transparent data encryption protector for SQL Database
Remove a transparent data encryption (TDE) protector for SQL Database
Manage transparent data encryption in SQL Managed Instance with your own key using PowerShell
Microsoft Defender for SQL
Feedback
Was this page helpful?
Additional resources