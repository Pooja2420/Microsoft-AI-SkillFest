Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Bicep file structure and syntax
Article
2025-03-25
8 contributors
In this article
This article describes the structure and syntax of a Bicep file. It presents the different sections of the file and the properties that are available in those sections.
For a step-by-step tutorial that guides you through the process of creating a Bicep file, seeQuickstart: Create Bicep files with Visual Studio Code.
Bicep format
Bicep is a declarative language, which means the elements can appear in any order. Unlike imperative languages, the order of elements doesn't affect how deployment is processed.
A Bicep file has the following elements:
@<decorator>(<argument>)
metadata <metadata-name> = ANY

targetScope = '<scope>'

@<decorator>(<argument>)
type <user-defined-data-type-name> = <type-expression>

@<decorator>(<argument>)
func <user-defined-function-name> (<argument-name> <data-type>, <argument-name> <data-type>, ...) <function-data-type> => <expression>

@<decorator>(<argument>)
param <parameter-name> <parameter-data-type> = <default-value>

@<decorator>(<argument>)
var <variable-name> = <variable-value>

@<decorator>(<argument>)
resource <resource-symbolic-name> '<resource-type>@<api-version>' = {
  <resource-properties>
}

@<decorator>(<argument>)
module <module-symbolic-name> '<path-to-file>' = {
  name: '<linked-deployment-name>'
  params: {
    <parameter-names-and-values>
  }
}

@<decorator>(<argument>)
output <output-name> <output-data-type> = <output-value>
@<decorator>(<argument>)
metadata <metadata-name> = ANY

targetScope = '<scope>'

@<decorator>(<argument>)
type <user-defined-data-type-name> = <type-expression>

@<decorator>(<argument>)
func <user-defined-function-name> (<argument-name> <data-type>, <argument-name> <data-type>, ...) <function-data-type> => <expression>

@<decorator>(<argument>)
param <parameter-name> <parameter-data-type> = <default-value>

@<decorator>(<argument>)
var <variable-name> = <variable-value>

@<decorator>(<argument>)
resource <resource-symbolic-name> '<resource-type>@<api-version>' = {
  <resource-properties>
}

@<decorator>(<argument>)
module <module-symbolic-name> '<path-to-file>' = {
  name: '<linked-deployment-name>'
  params: {
    <parameter-names-and-values>
  }
}

@<decorator>(<argument>)
output <output-name> <output-data-type> = <output-value>
The following example shows an implementation of these elements:
metadata description = 'Creates a storage account and a web app'

@description('The prefix to use for the storage account name.')
@minLength(3)
@maxLength(11)
param storagePrefix string

param storageSKU string = 'Standard_LRS'
param location string = resourceGroup().location

var uniqueStorageName = '${storagePrefix}${uniqueString(resourceGroup().id)}'

resource stg 'Microsoft.Storage/storageAccounts@2023-04-01' = {
  name: uniqueStorageName
  location: location
  sku: {
    name: storageSKU
  }
  kind: 'StorageV2'
  properties: {
    supportsHttpsTrafficOnly: true
  }
}

module webModule './webApp.bicep' = {
  name: 'webDeploy'
  params: {
    skuName: 'S1'
    location: location
  }
}
metadata description = 'Creates a storage account and a web app'

@description('The prefix to use for the storage account name.')
@minLength(3)
@maxLength(11)
param storagePrefix string

param storageSKU string = 'Standard_LRS'
param location string = resourceGroup().location

var uniqueStorageName = '${storagePrefix}${uniqueString(resourceGroup().id)}'

resource stg 'Microsoft.Storage/storageAccounts@2023-04-01' = {
  name: uniqueStorageName
  location: location
  sku: {
    name: storageSKU
  }
  kind: 'StorageV2'
  properties: {
    supportsHttpsTrafficOnly: true
  }
}

module webModule './webApp.bicep' = {
  name: 'webDeploy'
  params: {
    skuName: 'S1'
    location: location
  }
}
Metadata
Metadata in Bicep is an untyped value that you can include in your Bicep files. Metadata provides supplementary information about your Bicep files, like name, description, author, and creation date.
Target scope
By default, the target scope is set toresourceGroup. If you deploy at the resource-group level, you don't need to set the target scope in your Bicep file.
resourceGroup
The allowed values are:
resourceGroup: Default value used forresource group deployments.
resourceGroup
subscription: Used forsubscription deployments.
subscription
managementGroup: Used formanagement group deployments.
managementGroup
tenant: Used fortenant deployments.
tenant
In a module, you can specify a scope that's different than the scope for the rest of the Bicep file. For more information, seeConfigure module scope.
Decorators
You can add one or more decorators for each of the following elements:
param
var
resource
module
output
func
type
The following table lists the decorators:
param
type
output
param
Parameters
Use parameters for values that need to vary for different deployments. You can define a default value for the parameter that's used if a value isn't provided during deployment.
For example, you can add anSKUparameter to specify different sizes for a resource. You might pass in different values depending on whether you're deploying to test or production.
SKU
param storageSKU string = 'Standard_LRS'
param storageSKU string = 'Standard_LRS'
The parameter is available for use in your Bicep file.
sku: {
  name: storageSKU
}
sku: {
  name: storageSKU
}
You can add one or more decorators for each parameter. For more information, seeUse decorators.
For more information, seeParameters in Bicep.
Variables
To make your Bicep file more readable, encapsulate complex expressions in a variable. For example, you might add a variable for a resource name that's constructed by concatenating several values together.
var uniqueStorageName = '${storagePrefix}${uniqueString(resourceGroup().id)}'
var uniqueStorageName = '${storagePrefix}${uniqueString(resourceGroup().id)}'
Apply this variable wherever you need the complex expression.
resource stg 'Microsoft.Storage/storageAccounts@2023-04-01' = {
  name: uniqueStorageName
resource stg 'Microsoft.Storage/storageAccounts@2023-04-01' = {
  name: uniqueStorageName
You can add one or more decorators for each variable. For more information, seeUse decorators.
For more information, seeVariables in Bicep.
Types
You can use thetypestatement to define user-defined data types.
type
param location string = resourceGroup().location

type storageAccountSkuType = 'Standard_LRS' | 'Standard_GRS'

type storageAccountConfigType = {
  name: string
  sku: storageAccountSkuType
}

param storageAccountConfig storageAccountConfigType = {
  name: 'storage${uniqueString(resourceGroup().id)}'
  sku: 'Standard_LRS'
}

resource storageAccount 'Microsoft.Storage/storageAccounts@2023-04-01' = {
  name: storageAccountConfig.name
  location: location
  sku: {
    name: storageAccountConfig.sku
  }
  kind: 'StorageV2'
}
param location string = resourceGroup().location

type storageAccountSkuType = 'Standard_LRS' | 'Standard_GRS'

type storageAccountConfigType = {
  name: string
  sku: storageAccountSkuType
}

param storageAccountConfig storageAccountConfigType = {
  name: 'storage${uniqueString(resourceGroup().id)}'
  sku: 'Standard_LRS'
}

resource storageAccount 'Microsoft.Storage/storageAccounts@2023-04-01' = {
  name: storageAccountConfig.name
  location: location
  sku: {
    name: storageAccountConfig.sku
  }
  kind: 'StorageV2'
}
You can add one or more decorators for each user-defined data type. For more information, seeUse decorators.
For more information, seeUser-defined data types in Bicep.
Functions
In your Bicep file, you can create your own functions and also use thestandard Bicep functionsthat are automatically available within your Bicep files. Create your own functions when you have complicated expressions that are used repeatedly in your Bicep files.
func buildUrl(https bool, hostname string, path string) string => '${https ? 'https' : 'http'}://${hostname}${empty(path) ? '' : '/${path}'}'

output azureUrl string = buildUrl(true, 'microsoft.com', 'azure')
func buildUrl(https bool, hostname string, path string) string => '${https ? 'https' : 'http'}://${hostname}${empty(path) ? '' : '/${path}'}'

output azureUrl string = buildUrl(true, 'microsoft.com', 'azure')
For more information, seeUser-defined functions in Bicep.
Resources
Use theresourcekeyword to define a resource to deploy. Your resource declaration includes a symbolic name for the resource. You use this symbolic name in other parts of the Bicep file to get a value from the resource.
resource
The resource declaration includes the resource type and API version. Within the body of the resource declaration, include properties that are specific to the resource type.
resource stg 'Microsoft.Storage/storageAccounts@2023-04-01' = {
  name: uniqueStorageName
  location: location
  sku: {
    name: storageSKU
  }
  kind: 'StorageV2'
  properties: {
    supportsHttpsTrafficOnly: true
  }
}
resource stg 'Microsoft.Storage/storageAccounts@2023-04-01' = {
  name: uniqueStorageName
  location: location
  sku: {
    name: storageSKU
  }
  kind: 'StorageV2'
  properties: {
    supportsHttpsTrafficOnly: true
  }
}
You can add one or more decorators for each resource. For more information, seeUse decorators.
For more information, seeResource declaration in Bicep.
Some resources have a parent/child relationship. You can define a child resource either inside the parent resource or outside of it.
The following example shows how to define a child resource within a parent resource. It contains a storage account with a child resource (file service) that's defined within the storage account. The file service also has a child resource (share) that's defined within it.
resource storage 'Microsoft.Storage/storageAccounts@2023-04-01' = {
  name: 'examplestorage'
  location: resourceGroup().location
  kind: 'StorageV2'
  sku: {
    name: 'Standard_LRS'
  }

  resource service 'fileServices' = {
    name: 'default'

    resource share 'shares' = {
      name: 'exampleshare'
    }
  }
}
resource storage 'Microsoft.Storage/storageAccounts@2023-04-01' = {
  name: 'examplestorage'
  location: resourceGroup().location
  kind: 'StorageV2'
  sku: {
    name: 'Standard_LRS'
  }

  resource service 'fileServices' = {
    name: 'default'

    resource share 'shares' = {
      name: 'exampleshare'
    }
  }
}
The next example shows how to define a child resource outside of the parent resource. You use the parent property to identify a parent/child relationship. The same three resources are defined.
resource storage 'Microsoft.Storage/storageAccounts@2023-04-01' = {
  name: 'examplestorage'
  location: resourceGroup().location
  kind: 'StorageV2'
  sku: {
    name: 'Standard_LRS'
  }
}

resource service 'Microsoft.Storage/storageAccounts/fileServices@2023-04-01' = {
  name: 'default'
  parent: storage
}

resource share 'Microsoft.Storage/storageAccounts/fileServices/shares@2023-04-01' = {
  name: 'exampleshare'
  parent: service
}
resource storage 'Microsoft.Storage/storageAccounts@2023-04-01' = {
  name: 'examplestorage'
  location: resourceGroup().location
  kind: 'StorageV2'
  sku: {
    name: 'Standard_LRS'
  }
}

resource service 'Microsoft.Storage/storageAccounts/fileServices@2023-04-01' = {
  name: 'default'
  parent: storage
}

resource share 'Microsoft.Storage/storageAccounts/fileServices/shares@2023-04-01' = {
  name: 'exampleshare'
  parent: service
}
For more information, seeSet name and type for child resources in Bicep.
Modules
Modules enable you to reuse code from a Bicep file in other Bicep files. In the module declaration, you link to the file to reuse. When you deploy the Bicep file, the resources in the module are also deployed.
module webModule './webApp.bicep' = {
  name: 'webDeploy'
  params: {
    skuName: 'S1'
    location: location
  }
}
module webModule './webApp.bicep' = {
  name: 'webDeploy'
  params: {
    skuName: 'S1'
    location: location
  }
}
The symbolic name enables you to reference the module from somewhere else in the file. For example, you can get an output value from a module by using the symbolic name and the name of the output value.
You can add one or more decorators for each module. For more information, seeUse decorators.
For more information, seeUse Bicep modules.
Outputs
Use outputs to return values from the deployment. Typically, you return a value from a deployed resource when you need to reuse that value for another operation.
output storageEndpoint object = stg.properties.primaryEndpoints
output storageEndpoint object = stg.properties.primaryEndpoints
You can add one or more decorators for each output. For more information, seeUse decorators.
For more information, seeOutputs in Bicep.
Loops
Add iterative loops to your Bicep file to define multiple copies of:
A resource
A module
A variable
A property
An output
Use theforexpression to define a loop.
for
param moduleCount int = 2

module stgModule './example.bicep' = [for i in range(0, moduleCount): {
  name: '${i}deployModule'
  params: {
  }
}]
param moduleCount int = 2

module stgModule './example.bicep' = [for i in range(0, moduleCount): {
  name: '${i}deployModule'
  params: {
  }
}]
You can iterate over an array, object, or integer index.
For more information, seeIterative loops in Bicep.
Conditional deployment
You can add a resource or module to your Bicep file that's conditionally deployed. During deployment, the condition is evaluated and the result determines whether the resource or module is deployed. Use theifexpression to define a conditional deployment.
if
param deployZone bool

resource dnsZone 'Microsoft.Network/dnsZones@2023-07-01-preview' = if (deployZone) {
  name: 'myZone'
  location: 'global'
}
param deployZone bool

resource dnsZone 'Microsoft.Network/dnsZones@2023-07-01-preview' = if (deployZone) {
  name: 'myZone'
  location: 'global'
}
For more information, seeConditional deployments in Bicep with the if expression.
Whitespace
Spaces and tabs are ignored when you author Bicep files.
Bicep is newline sensitive. For example:
resource sa 'Microsoft.Storage/storageAccounts@2023-04-01' = if (newOrExisting == 'new') {
  ...
}
resource sa 'Microsoft.Storage/storageAccounts@2023-04-01' = if (newOrExisting == 'new') {
  ...
}
Can't be written as:
resource sa 'Microsoft.Storage/storageAccounts@2023-04-01' =
    if (newOrExisting == 'new') {
      ...
    }
resource sa 'Microsoft.Storage/storageAccounts@2023-04-01' =
    if (newOrExisting == 'new') {
      ...
    }
Defineobjectsandarraysin multiple lines.
Comments
Use//for single-line comments or/* ... */for multiline comments.
//
/* ... */
The following example shows a single-line comment.
// This is your primary NIC.
resource nic1 'Microsoft.Network/networkInterfaces@2023-11-01' = {
  ...
}
// This is your primary NIC.
resource nic1 'Microsoft.Network/networkInterfaces@2023-11-01' = {
  ...
}
The following example shows a multiline comment.
/*
  This Bicep file assumes the key vault already exists and
  is in same subscription and resource group as the deployment.
*/
param existingKeyVaultName string
/*
  This Bicep file assumes the key vault already exists and
  is in same subscription and resource group as the deployment.
*/
param existingKeyVaultName string
Multi-line strings
You can break a string into multiple lines. Use three single quotation marks'''to start and end the multi-line string.
'''
Characters within the multi-line string are handled as is. Escape characters are unnecessary. You can't include'''in the multi-line string. String interpolation isn't currently supported.
'''
You can start your string right after the opening''', or include a new line. In either case, the resulting string doesn't include a new line. Depending on the line endings in your Bicep file, new lines are interpreted as\r\nor\n.
'''
\r\n
\n
The following example shows a multi-line string.
var stringVar = '''
this is multi-line
  string with formatting
  preserved.
'''
var stringVar = '''
this is multi-line
  string with formatting
  preserved.
'''
The preceding example is equivalent to the following JSON:
"variables": {
  "stringVar": "this is multi-line\r\n  string with formatting\r\n  preserved.\r\n"
}
"variables": {
  "stringVar": "this is multi-line\r\n  string with formatting\r\n  preserved.\r\n"
}
Multiple-line declarations
You can now use multiple lines in function, array, and object declarations. This feature requiresBicep CLI version 0.7.X or higher.
In the following example, theresourceGroup()definition is broken into multiple lines.
resourceGroup()
var foo = resourceGroup(
  mySubscription,
  myRgName)
var foo = resourceGroup(
  mySubscription,
  myRgName)
For multiple-line declaration samples, seearraysandobjects.
Known limitations
Support isn't available for the concept ofapiProfile, which is used to map a singleapiProfileto a setapiVersionfor each resource type.
apiProfile
apiProfile
apiVersion
User-defined functions aren't supported at this time. An experimental feature is currently accessible. For more information, seeUser-defined functions in Bicep.
Some Bicep features require a corresponding change to the intermediate language (Azure Resource Manager JSON templates). We announce these features as available after all the required updates are deployed to global Azure. If you use a different environment such as Azure Stack, there might be a delay in the availability of the feature. The Bicep feature is available only after the intermediate language is also updated in that environment.
Related content
For an introduction to Bicep, seeWhat is Bicep?.
For Bicep data types, seeData types.
Feedback
Was this page helpful?
Additional resources