Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Quickstart: Deploy your first container app with containerapp up
Article
2025-02-05
9 contributors
In this article
The Azure Container Apps service enables you to run microservices and containerized applications on a serverless platform. With Container Apps, you enjoy the benefits of running containers while you leave behind the concerns of manually configuring cloud infrastructure and complex container orchestrators.
In this quickstart, you create and deploy your first container app using theaz containerapp upcommand.
az containerapp up
Prerequisites
An Azure account with an active subscription.If you don't have one, youcan create one for free.
If you don't have one, youcan create one for free.
Install theAzure CLI.
Setup
To sign in to Azure from the CLI, run the following command and follow the prompts to complete the authentication process.
Bash
PowerShell
az login
az login
Connect-AzAccount
Connect-AzAccount
To ensure you're running the latest version of the CLI, run the upgrade command.
Bash
PowerShell
az upgrade
az upgrade
Install-Module -Name Az -Scope CurrentUser -Repository PSGallery -Force
Install-Module -Name Az -Scope CurrentUser -Repository PSGallery -Force
Ignore any warnings about modules currently in use.
Next, install or update the Azure Container Apps extension for the CLI.
If you receive errors about missing parameters when you runaz containerappcommands in Azure CLI or cmdlets from theAz.Appmodule in PowerShell, be sure you have the latest version of the Azure Container Apps extension installed.
az containerapp
Az.App
Bash
PowerShell
az extension add --name containerapp --upgrade
az extension add --name containerapp --upgrade
Note
Starting in May 2024, Azure CLI extensions no longer enable preview features by default. To access Container Appspreview features, install the Container Apps extension with--allow-preview true.
--allow-preview true
az extension add --name containerapp --upgrade --allow-preview true
az extension add --name containerapp --upgrade --allow-preview true
Install-Module -Name Az.App
Install-Module -Name Az.App
Make sure to update theAz.Appmodule to the latest version.
Az.App
Update-Module -Name Az.App
Update-Module -Name Az.App
Now that the current extension or module is installed, register theMicrosoft.AppandMicrosoft.OperationalInsightsnamespaces.
Microsoft.App
Microsoft.OperationalInsights
Bash
PowerShell
az provider register --namespace Microsoft.App
az provider register --namespace Microsoft.App
az provider register --namespace Microsoft.OperationalInsights
az provider register --namespace Microsoft.OperationalInsights
Register-AzResourceProvider -ProviderNamespace Microsoft.App
Register-AzResourceProvider -ProviderNamespace Microsoft.App
Register-AzResourceProvider -ProviderNamespace Microsoft.OperationalInsights
Register-AzResourceProvider -ProviderNamespace Microsoft.OperationalInsights
Create and deploy the container app
Create and deploy your first container app with thecontainerapp upcommand. This command will:
containerapp up
Create the Container Apps environment
Create the Log Analytics workspace
Create and deploy the container app using a public container image
Note that if any of these resources already exist, the command will use them instead of creating new ones.
Bash
PowerShell
az containerapp up \
  --name my-container-app \
  --resource-group my-container-apps \
  --location centralus \
  --environment 'my-container-apps' \
  --image mcr.microsoft.com/k8se/quickstart:latest \
  --target-port 80 \
  --ingress external \
  --query properties.configuration.ingress.fqdn
az containerapp up \
  --name my-container-app \
  --resource-group my-container-apps \
  --location centralus \
  --environment 'my-container-apps' \
  --image mcr.microsoft.com/k8se/quickstart:latest \
  --target-port 80 \
  --ingress external \
  --query properties.configuration.ingress.fqdn
az containerapp up `
  --name my-container-app `
  --resource-group my-container-apps `
  --location centralus `
  --environment  my-container-apps `
  --image mcr.microsoft.com/k8se/quickstart:latest `
  --target-port 80 `
  --ingress external `
  --query properties.configuration.ingress.fqdn
az containerapp up `
  --name my-container-app `
  --resource-group my-container-apps `
  --location centralus `
  --environment  my-container-apps `
  --image mcr.microsoft.com/k8se/quickstart:latest `
  --target-port 80 `
  --ingress external `
  --query properties.configuration.ingress.fqdn
Note
Make sure the value for the--imageparameter is in lower case.
--image
By setting--ingresstoexternal, you make the container app available to public requests.
--ingress
external
Verify deployment
Theupcommand returns the fully qualified domain name for the container app. Copy this location to a web browser.
up
The following message is displayed when the container app is deployed:

Clean up resources
If you're not going to continue to use this application, run the following command to delete the resource group along with all the resources created in this quickstart.
Caution
The following command deletes the specified resource group and all resources contained within it. If resources outside the scope of this quickstart exist in the specified resource group, they will also be deleted.
az group delete --name my-container-apps
az group delete --name my-container-apps
Tip
Having issues? Let us know on GitHub by opening an issue in theAzure Container Apps repo.
Next steps
Communication between microservices
Feedback
Was this page helpful?
Additional resources