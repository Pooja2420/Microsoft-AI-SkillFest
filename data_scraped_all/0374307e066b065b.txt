Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Set up staging environments in Azure App Service
Article
2025-03-28
36 contributors
In this article


Note
Starting June 1, 2024, newly created App Service apps can generate a unique default host name that uses the naming convention<app-name>-<random-hash>.<region>.azurewebsites.net. For example:myapp-ds27dh7271aah175.westus-01.azurewebsites.net. Existing app names remain unchanged.
<app-name>-<random-hash>.<region>.azurewebsites.net
myapp-ds27dh7271aah175.westus-01.azurewebsites.net
For more information, see theblog post about creating a web app with a unique default host name.
When you deploy your web app, web app on Linux, mobile back end, or API app toAzure App Service, you can use a separate deployment slot instead of the default production slot. This approach is available if you run in the Standard, Premium, or Isolated tier of an App Service plan. Deployment slots are live apps with their own host names. App content and configuration elements can be swapped between two deployment slots, including the production slot.
Deploying your application to a nonproduction slot has the following benefits:
You can validate app changes before you swap the slot into production.
You can validate app changes before you swap the slot into production.
You can make sure that all instances of the slot are warmed up before you swap it into production. This approach eliminates downtime when you deploy your app. The traffic redirection is seamless. No requests are dropped because of swap operations.You can automate this entire workflow by configuringauto swapwhen pre-swap validation isn't needed.
You can make sure that all instances of the slot are warmed up before you swap it into production. This approach eliminates downtime when you deploy your app. The traffic redirection is seamless. No requests are dropped because of swap operations.
You can automate this entire workflow by configuringauto swapwhen pre-swap validation isn't needed.
After a swap, the slot with previously staged app now has the previous production app. If the changes swapped into the production slot aren't as you expect, you can perform the same swap immediately to get yourlast known good siteback.
After a swap, the slot with previously staged app now has the previous production app. If the changes swapped into the production slot aren't as you expect, you can perform the same swap immediately to get yourlast known good siteback.
There's no extra charge for using deployment slots. Each App Service plan tier supports a different number of deployment slots. To find out the number of slots that your app's tier supports, seeApp Service limits.
To scale your app to a different tier, make sure that the target tier supports the number of slots that your app already uses. For example, if your app has more than five slots, you can't scale it down to the Standard tier. The Standard tier supports only five deployment slots.
The following video complements the steps in this article by illustrating how to set up staging environments in Azure App Service.
Prerequisites
Permissions to perform the slot operation that you want. For information on the required permissions, seeResource provider operations. Search forslot, for example.

Add a slot
For you to enable multiple deployment slots, the app must be running in the Standard, Premium, or Isolated tier.
Azure portal
Azure CLI
Azure PowerShell
In theAzure portal, go to your app's management page.
In theAzure portal, go to your app's management page.
On the left menu, selectDeployment>Deployment slots. Then selectAdd.NoteIf the app isn't already in the Standard, Premium, or Isolated tier, selectUpgrade. Go to theScaletab of your app before continuing.
On the left menu, selectDeployment>Deployment slots. Then selectAdd.
Note
If the app isn't already in the Standard, Premium, or Isolated tier, selectUpgrade. Go to theScaletab of your app before continuing.
In theAdd Slotdialog, give the slot a name, and select whether to clone an app configuration from another deployment slot. SelectAddto continue.You can clone a configuration from any existing slot. Settings that can be cloned include app settings, connection strings, language framework versions, web sockets, HTTP version, and platform bitness.NoteCurrently, a private endpoint isn't cloned across slots.
In theAdd Slotdialog, give the slot a name, and select whether to clone an app configuration from another deployment slot. SelectAddto continue.

You can clone a configuration from any existing slot. Settings that can be cloned include app settings, connection strings, language framework versions, web sockets, HTTP version, and platform bitness.
Note
Currently, a private endpoint isn't cloned across slots.
After you enter the settings, selectCloseto close the dialog. The new slot now appears on theDeployment slotspage. By default,Traffic %is set to0for the new slot, with all customer traffic routed to the production slot.
After you enter the settings, selectCloseto close the dialog. The new slot now appears on theDeployment slotspage. By default,Traffic %is set to0for the new slot, with all customer traffic routed to the production slot.
Select the new deployment slot to open its resource page.The staging slot has a management page just like any other App Service app. You can change the slot's configuration. To remind you that you're viewing the deployment slot, the app name appears as<app-name>/<slot-name>. The app type isApp Service (Slot). You can also see the slot as a separate app in your resource group, with the same designations.
Select the new deployment slot to open its resource page.

The staging slot has a management page just like any other App Service app. You can change the slot's configuration. To remind you that you're viewing the deployment slot, the app name appears as<app-name>/<slot-name>. The app type isApp Service (Slot). You can also see the slot as a separate app in your resource group, with the same designations.
On the slot's resource page, select the app URL. The deployment slot has its own host name and is also a live app. To limit public access to the deployment slot, seeSet up Azure App Service access restrictions.
On the slot's resource page, select the app URL. The deployment slot has its own host name and is also a live app. To limit public access to the deployment slot, seeSet up Azure App Service access restrictions.
Run the following command in a terminal:
az webapp deployment slot create --name <app-name> --resource-group <group-name> --slot <slot-name>
az webapp deployment slot create --name <app-name> --resource-group <group-name> --slot <slot-name>
For more information, seeaz webapp deployment slot create.
Run the following cmdlet in an Azure PowerShell terminal:
New-AzWebAppSlot -ResourceGroupName <group-name> -Name <app-name> -Slot <slot-name> -AppServicePlan <plan-name>
New-AzWebAppSlot -ResourceGroupName <group-name> -Name <app-name> -Slot <slot-name> -AppServicePlan <plan-name>
For more information, seeNew-AzWebAppSlot.
The new deployment slot has no content, even if you clone the settings from a different slot. For example, you canpublish to this slot with Git. You can deploy to the slot from a different repository branch or a different repository. The articleGet a publish profile from Azure App Servicecan provide the required information for deploying to the slot. Visual Studio can import the profile to deploy contents to the slot.
The slot's URL has the formathttp://sitename-slotname.azurewebsites.net. To keep the URL length within necessary DNS limits, the site name is truncated at 40 characters. The combined site name and slot name must be fewer than 59 characters.
http://sitename-slotname.azurewebsites.net

Understand what happens during a swap
Swap operation steps
When you swap two slots, App Service does the following to ensure that the target slot doesn't experience downtime:
Apply the following settings from the target slot (for example, the production slot) to all instances of the source slot:Slot-specificapp settings and connection strings, if applicableContinuous deploymentsettings, if enabledApp Service authenticationsettings, if enabledWhen any of the settings is applied to the source slot, the change triggers all instances in the source slot to restart. During aswap with preview, this action marks the end of the first phase. The swap operation is paused. You can validate that the source slot works correctly with the target slot's settings.
Apply the following settings from the target slot (for example, the production slot) to all instances of the source slot:
Slot-specificapp settings and connection strings, if applicable
Continuous deploymentsettings, if enabled
App Service authenticationsettings, if enabled
When any of the settings is applied to the source slot, the change triggers all instances in the source slot to restart. During aswap with preview, this action marks the end of the first phase. The swap operation is paused. You can validate that the source slot works correctly with the target slot's settings.
Wait for every instance in the source slot to complete its restart. If any instance fails to restart, the swap operation reverts all changes to the source slot and stops the operation.
Wait for every instance in the source slot to complete its restart. If any instance fails to restart, the swap operation reverts all changes to the source slot and stops the operation.
Iflocal cacheis enabled, trigger local cache initialization by making an HTTP request to the application root (/) on each instance of the source slot. Wait until each instance returns any HTTP response. Local cache initialization causes another restart on each instance.
Iflocal cacheis enabled, trigger local cache initialization by making an HTTP request to the application root (/) on each instance of the source slot. Wait until each instance returns any HTTP response. Local cache initialization causes another restart on each instance.
/
Ifauto swapis enabled withcustom warm-up, trigger the customapplication initializationon each instance of the source slot.IfapplicationInitializationisn't specified, trigger an HTTP request to the application root of the source slot on each instance.If an instance returns any HTTP response, it's considered to be warmed up.
Ifauto swapis enabled withcustom warm-up, trigger the customapplication initializationon each instance of the source slot.
IfapplicationInitializationisn't specified, trigger an HTTP request to the application root of the source slot on each instance.
applicationInitialization
If an instance returns any HTTP response, it's considered to be warmed up.
If all instances on the source slot are warmed up successfully, swap the two slots by switching their routing rules. After this step, the target slot (for example, the production slot) has the app that's previously warmed up in the source slot.
If all instances on the source slot are warmed up successfully, swap the two slots by switching their routing rules. After this step, the target slot (for example, the production slot) has the app that's previously warmed up in the source slot.
Now that the source slot has the pre-swap app that was previously in the target slot, perform the same operation by applying all settings and restarting the instances.
Now that the source slot has the pre-swap app that was previously in the target slot, perform the same operation by applying all settings and restarting the instances.
At any point in the swap operation, all work of initializing the swapped apps happens on the source slot. The target slot remains online while the source slot is being prepared and warmed up, regardless of whether the swap succeeds or fails. To swap a staging slot with the production slot, make sure that the production slot is always the target slot. This way, the swap operation doesn't affect your production app.
Note
Your former production instances are swapped into staging after this swap operation. Those instances are recycled in the last step of the swap process. If you have any long-running operations in your application, they're abandoned when the workers recycle. This fact also applies to function apps. Make sure that your application code is written in a fault-tolerant way.
Steps for making a slot unswappable
When you clone a configuration from another deployment slot, the cloned configuration is editable. Some configuration elements follow the content across a swap (they'renot slot specific). Other configuration elements stay in the same slot after a swap (they'reslot specific).
When you swap slots, these settings are swapped:
Language stack and version, 32 bit and 64 bit
App settings (can be configured to stick to a slot)
Connection strings (can be configured to stick to a slot)
Mounted storage accounts (can be configured to stick to a slot)
Handler mappings
Public certificates
WebJobs content
Hybrid connections (currently)
Service endpoints (currently)
Azure Content Delivery Network (currently)
Path mappings
When you swap slots, these settings aren't swapped:
General settings not mentioned in the previous list
Publishing endpoints
Custom domain names
Nonpublic certificates and TLS/SSL settings
Scale settings
WebJobs schedulers
IP restrictions
Always On
Diagnostic settings
Cross-origin resource sharing (CORS)
Virtual network integration
Managed identities and related settings
Settings that end with the suffix_EXTENSION_VERSION
_EXTENSION_VERSION
Settings thatService Connectorcreated
Note
To make settings swappable, add the app settingWEBSITE_OVERRIDE_PRESERVE_DEFAULT_STICKY_SLOT_SETTINGSin every slot of the app. Set its value to0orfalse. These settings are either all swappable or all not swappable. You can't make just some settings swappable and not the others. Managed identities are never swapped. This override app setting doesn't affect them.
WEBSITE_OVERRIDE_PRESERVE_DEFAULT_STICKY_SLOT_SETTINGS
0
false
Certain app settings that apply to unswapped settings are also not swapped. For example, because diagnostic settings aren't swapped, related app settings likeWEBSITE_HTTPLOGGING_RETENTION_DAYSandDIAGNOSTICS_AZUREBLOBRETENTIONDAYSare also not swapped, even if they don't show up as slot settings.
WEBSITE_HTTPLOGGING_RETENTION_DAYS
DIAGNOSTICS_AZUREBLOBRETENTIONDAYS
To configure an app setting or connection string to stick to a specific slot that isn't swapped:
Go toSettings>Environment Variablefor that slot.
Go toSettings>Environment Variablefor that slot.
Add or edit a setting, and then selectDeployment slot setting. Selecting this checkbox tells App Service that the setting isn't swappable.
Add or edit a setting, and then selectDeployment slot setting. Selecting this checkbox tells App Service that the setting isn't swappable.
SelectApply.
SelectApply.


Swap deployment slots
You can swap deployment slots on your app'sDeployment slotspage and theOverviewpage.
Before you swap an app from a deployment slot into production, make sure that production is your target slot and that all settings in the source slot are configured exactly as you want to have them in production.
Azure portal
Azure CLI
Azure PowerShell
Go to your app'sDeployment slotspage and selectSwap.TheSwapdialog shows settings in the selected source and target slots to be changed.
Go to your app'sDeployment slotspage and selectSwap.

TheSwapdialog shows settings in the selected source and target slots to be changed.
Select the desiredSourceandTargetslots. Usually, the target is the production slot. Also, select theSource slot changesandTarget slot changestabs and verify that the configuration changes are expected. When you finish, you can swap the slots immediately by selectingStart Swap.To see how your target slot would run with the new settings before the swap happens, don't selectStart Swap. Follow the instructions inSwap with previewlater in this article.
Select the desiredSourceandTargetslots. Usually, the target is the production slot. Also, select theSource slot changesandTarget slot changestabs and verify that the configuration changes are expected. When you finish, you can swap the slots immediately by selectingStart Swap.

To see how your target slot would run with the new settings before the swap happens, don't selectStart Swap. Follow the instructions inSwap with previewlater in this article.
SelectCloseto close the dialog.
SelectCloseto close the dialog.
Run the following command in a terminal:
az webapp deployment slot swap --resource-group <group-name> --name <app-name> --slot <source-slot-name> --target-slot production
az webapp deployment slot swap --resource-group <group-name> --name <app-name> --slot <source-slot-name> --target-slot production
For more information, seeaz webapp deployment slot swap.
Run the following cmdlet in an Azure PowerShell terminal:
Switch-AzWebAppSlot -SourceSlotName "<source-slot-name>" -DestinationSlotName "production" -ResourceGroupName "<group-name>" -Name "<app-name>"
Switch-AzWebAppSlot -SourceSlotName "<source-slot-name>" -DestinationSlotName "production" -ResourceGroupName "<group-name>" -Name "<app-name>"
For more information, seeSwitch-AzWebAppSlot.
If you have any problems, seeTroubleshoot swapslater in this article.

Swap with preview (multiple-phase swap)
Before you swap into production as the target slot, validate that the app runs with the swapped settings. The source slot is also warmed up before the swap completion, which is desirable for mission-critical applications.
When you perform a swap with preview, App Service performs the sameswap operationbut pauses after the first step. You can then verify the result on the staging slot before completing the swap.
If you cancel the swap, App Service reapplies configuration elements to the source slot.
Note
You can't use swap with preview when site authentication is enabled in one of the slots.
Azure portal
Azure CLI
Azure PowerShell
Follow the steps in theSwap deployment slotssection, but selectPerform swap with preview.The dialog shows you how the configuration in the source slot changes in the first phase, and how the source and target slot change in the second phase.
Follow the steps in theSwap deployment slotssection, but selectPerform swap with preview.
The dialog shows you how the configuration in the source slot changes in the first phase, and how the source and target slot change in the second phase.
When you're ready to start the swap, selectStart Swap.When the first phase finishes, the dialog notifies you. Preview the swap in the source slot by going tohttps://<app_name>-<source-slot-name>.azurewebsites.net.
When you're ready to start the swap, selectStart Swap.
When the first phase finishes, the dialog notifies you. Preview the swap in the source slot by going tohttps://<app_name>-<source-slot-name>.azurewebsites.net.
https://<app_name>-<source-slot-name>.azurewebsites.net
When you're ready to complete the pending swap, selectComplete SwapinSwap action, and then select theComplete Swapbutton.To cancel a pending swap, selectCancel Swapinstead, and then select theCancel Swapbutton.
When you're ready to complete the pending swap, selectComplete SwapinSwap action, and then select theComplete Swapbutton.

To cancel a pending swap, selectCancel Swapinstead, and then select theCancel Swapbutton.
When you finish, selectCloseto close the dialog.
When you finish, selectCloseto close the dialog.
To swap a slot into production with preview, run the following command in a terminal:
az webapp deployment slot swap --resource-group <group-name> --name <app-name> --slot <source-slot-name> --target-slot production --action preview
az webapp deployment slot swap --resource-group <group-name> --name <app-name> --slot <source-slot-name> --target-slot production --action preview
To complete the swap, run this command:
az webapp deployment slot swap --resource-group <group-name> --name <app-name> --slot <source-slot-name> --target-slot production --action swap
az webapp deployment slot swap --resource-group <group-name> --name <app-name> --slot <source-slot-name> --target-slot production --action swap
To cancel the swap, run this command:
az webapp deployment slot swap --resource-group <group-name> --name <app-name> --slot <source-slot-name> --target-slot production --action reset
az webapp deployment slot swap --resource-group <group-name> --name <app-name> --slot <source-slot-name> --target-slot production --action reset
For more information, seeaz webapp deployment slot swap.
To swap a slot into production with preview, run the following cmdlet in an Azure PowerShell terminal:
Switch-AzWebAppSlot -SourceSlotName "<source-slot-name>" -DestinationSlotName "production" -ResourceGroupName "<group-name>" -Name "<app-name>" -SwapWithPreviewAction ApplySlotConfig
Switch-AzWebAppSlot -SourceSlotName "<source-slot-name>" -DestinationSlotName "production" -ResourceGroupName "<group-name>" -Name "<app-name>" -SwapWithPreviewAction ApplySlotConfig
To complete the swap, run the following cmdlet:
Switch-AzWebAppSlot -SourceSlotName "<source-slot-name>" -DestinationSlotName "production" -ResourceGroupName "<group-name>" -Name "<app-name>" -SwapWithPreviewAction CompleteSlotSwap
Switch-AzWebAppSlot -SourceSlotName "<source-slot-name>" -DestinationSlotName "production" -ResourceGroupName "<group-name>" -Name "<app-name>" -SwapWithPreviewAction CompleteSlotSwap
To cancel the swap, run the following cmdlet:
Switch-AzWebAppSlot -SourceSlotName "<source-slot-name>" -DestinationSlotName "production" -ResourceGroupName "<group-name>" -Name "<app-name>" -SwapWithPreviewAction ResetSlotSwap
Switch-AzWebAppSlot -SourceSlotName "<source-slot-name>" -DestinationSlotName "production" -ResourceGroupName "<group-name>" -Name "<app-name>" -SwapWithPreviewAction ResetSlotSwap
For more information, seeSwitch-AzWebAppSlot.
If you have any problems, seeTroubleshoot swapslater in this article.

Roll back a swap
If any errors occur in the target slot (for example, the production slot) after a slot swap, restore the slots to their pre-swap states by swapping the same two slots immediately.

Configure auto swap
Auto swap streamlines Azure DevOps scenarios where you want to deploy your app continuously with zero cold starts and zero downtime for customers of the app. When auto swap is enabled from a slot into production, every time you push your code changes to that slot, App Service automaticallyswaps the app into productionafter it's warmed up in the source slot.
Note
Auto swap isn't supported in web apps on Linux and in Web App for Containers.
Before you configure auto swap for the production slot, consider testing it on a nonproduction target slot.
Azure portal
Azure CLI
Azure PowerShell
Go to your app's resource page. SelectDeployment>Deployment slots, and then select the desired source slot.
Go to your app's resource page. SelectDeployment>Deployment slots, and then select the desired source slot.
On the left menu, selectSettings>Configuration>General settings.
On the left menu, selectSettings>Configuration>General settings.
ForAuto swap enabled, selectOn. ForAuto swap deployment slot, select the target slot. Then selectSaveon the command bar.
ForAuto swap enabled, selectOn. ForAuto swap deployment slot, select the target slot. Then selectSaveon the command bar.

Run a code push to the source slot. Auto swap happens after a short time. The update is reflected at your target slot's URL.
Run a code push to the source slot. Auto swap happens after a short time. The update is reflected at your target slot's URL.
To configure auto swap into the production slot, run the following command in a terminal:
az webapp deployment slot auto-swap --name <app-name> --resource-group <group-name> --slot <source-slot-name>
az webapp deployment slot auto-swap --name <app-name> --resource-group <group-name> --slot <source-slot-name>
To disable auto swap, run the following command:
az webapp deployment slot auto-swap --name <app-name> --resource-group <group-name> --slot <source-slot-name> --disable
az webapp deployment slot auto-swap --name <app-name> --resource-group <group-name> --slot <source-slot-name> --disable
For more information, seeaz webapp deployment slot auto-swap.
Run the following command in an Azure PowerShell terminal:
Set-AzWebAppSlot -ResourceGroupName "<group-name>" -Name "<app-name>" -Slot "<source-slot-name>" -AutoSwapSlotName "production"
Set-AzWebAppSlot -ResourceGroupName "<group-name>" -Name "<app-name>" -Slot "<source-slot-name>" -AutoSwapSlotName "production"
For more information, seeSet-AzWebAppSlot.
If you have any problems, seeTroubleshoot swapslater in this article.

Specify custom warm-up
Some apps might require custom warm-up actions before the swap. You can specify these custom actions by using theapplicationInitializationconfiguration element inWeb.config. Theswap operationwaits for this custom warm-up to finish before swapping with the target slot. Here's a sampleWeb.configfragment:
applicationInitialization
Web.config
Web.config
<system.webServer>
    <applicationInitialization>
        <add initializationPage="/" hostName="[app hostname]" />
        <add initializationPage="/Home/About" hostName="[app hostname]" />
    </applicationInitialization>
</system.webServer>
<system.webServer>
    <applicationInitialization>
        <add initializationPage="/" hostName="[app hostname]" />
        <add initializationPage="/Home/About" hostName="[app hostname]" />
    </applicationInitialization>
</system.webServer>
For more information on customizing theapplicationInitializationelement, see the blog postMost common deployment slot swap failures and how to fix them.
applicationInitialization
You can also customize the warm-up behavior by using the followingapp settings:
WEBSITE_SWAP_WARMUP_PING_PATH: The path to ping over HTTP to warm up your site. Add this app setting by specifying a custom path that begins with a slash as the value. An example is/statuscheck. The default value is/.
WEBSITE_SWAP_WARMUP_PING_PATH
/statuscheck
/
WEBSITE_SWAP_WARMUP_PING_STATUSES: Valid HTTP response codes for the warm-up operation. Add this app setting with a comma-separated list of HTTP codes. An example is200,202. If the returned status code isn't in the list, the warm-up and swap operations are stopped. By default, all response codes are valid.
WEBSITE_SWAP_WARMUP_PING_STATUSES
200,202
WEBSITE_WARMUP_PATH: A relative path on the site that should be pinged whenever the site restarts (not only during slot swaps). Example values include/statuscheckor the root path,/.
WEBSITE_WARMUP_PATH
/statuscheck
/
The<applicationInitialization>configuration element is part of each app startup, whereas the app settings for warm-up behavior apply only to slot swaps.
<applicationInitialization>
If you have any problems, seeTroubleshoot swapslater in this article.
Monitor a swap
If theswap operationtakes a long time to complete, you can get information on the swap operation in theactivity log.
Azure portal
Azure CLI
Azure PowerShell
On your app's resource page in the portal, on the left menu, selectActivity log.
On your app's resource page in the portal, on the left menu, selectActivity log.
A swap operation appears in the log query asSwap Web App Slots. To view the details, you can expand it and select one of the suboperations or errors.
A swap operation appears in the log query asSwap Web App Slots. To view the details, you can expand it and select one of the suboperations or errors.
Swap Web App Slots
Run the following command:
az monitor activity-log list --resource-group <group-name> --query "[?contains(operationName.value,'Microsoft.Web/sites/slots/slotsswap/action')]"
az monitor activity-log list --resource-group <group-name> --query "[?contains(operationName.value,'Microsoft.Web/sites/slots/slotsswap/action')]"
For more information, seeaz monitor activity-log list.
Run the following Azure PowerShell command:
Get-AzLog -ResourceGroup <group-name> -StartTime 2025-01-01 | where{$_.OperationName -eq 'Swap Web App Slots'}
Get-AzLog -ResourceGroup <group-name> -StartTime 2025-01-01 | where{$_.OperationName -eq 'Swap Web App Slots'}
For more information, seeGet-AzLog.
Route production traffic automatically
By default, all client requests to the app's production URL (http://<app_name>.azurewebsites.net) are routed to the production slot. You can route a portion of the traffic to another slot. This feature is useful if you need user feedback for a new update but you're not ready to release it to production.
http://<app_name>.azurewebsites.net
Azure portal
Azure CLI
Azure PowerShell
Go to your web app's resource page and selectDeployment>Deployment slots.
Go to your web app's resource page and selectDeployment>Deployment slots.
In theTraffic %column of the slot that you want to route to, specify a percentage (between 0 and 100) to represent the amount of total traffic that you want to route. Then selectSave.
In theTraffic %column of the slot that you want to route to, specify a percentage (between 0 and 100) to represent the amount of total traffic that you want to route. Then selectSave.

After you save the setting, the specified percentage of clients is randomly routed to the nonproduction slot.
To add a routing rule on a slot and transfer 15% of production traffic to it, run the following command:
az webapp traffic-routing set --resource-group <group-name> --name <app-name> --distribution <slot-name>=15
az webapp traffic-routing set --resource-group <group-name> --name <app-name> --distribution <slot-name>=15
For more information, seeaz webapp traffic-routing set.
To add a routing rule on a slot and transfer 15% of production traffic to it, run the following command:
Add-AzWebAppTrafficRouting -ResourceGroupName "<group-name>" -WebAppName "<app-name>" -RoutingRule @{ActionHostName='<app-name>-<slot-name>.azurewebsites.net';ReroutePercentage='15';Name='<slot-name>'}
Add-AzWebAppTrafficRouting -ResourceGroupName "<group-name>" -WebAppName "<app-name>" -RoutingRule @{ActionHostName='<app-name>-<slot-name>.azurewebsites.net';ReroutePercentage='15';Name='<slot-name>'}
For more information, seeAdd-AzWebAppTrafficRouting. To update an existing rule, useUpdate-AzWebAppTrafficRouting.
After a client is automatically routed to a specific slot, it'spinnedto that slot for one hour or until the cookies are deleted. On the client browser, you can see which slot your session is pinned to by looking at thex-ms-routing-namecookie in your HTTP headers. A request that's routed to the staging slot has the cookiex-ms-routing-name=staging. A request that's routed to the production slot has the cookiex-ms-routing-name=self.
x-ms-routing-name
x-ms-routing-name=staging
x-ms-routing-name=self
Route production traffic manually
In addition to automatic traffic routing, App Service can route requests to a specific slot. This option is useful when you want your users to be able to opt in to or opt out of your beta app. To route production traffic manually, you use thex-ms-routing-namequery parameter.
x-ms-routing-name
To let users opt out of your beta app, for example, you can put this link on your webpage:
<a href="<webappname>.azurewebsites.net/?x-ms-routing-name=self">Go back to production app</a>
<a href="<webappname>.azurewebsites.net/?x-ms-routing-name=self">Go back to production app</a>
The stringx-ms-routing-name=selfspecifies the production slot. After the client browser accesses the link, it's redirected to the production slot. Every subsequent request has thex-ms-routing-name=selfcookie that pins the session to the production slot.
x-ms-routing-name=self
x-ms-routing-name=self
To let users opt in to your beta app, set the same query parameter to the name of the nonproduction slot. Here's an example:
<webappname>.azurewebsites.net/?x-ms-routing-name=staging
<webappname>.azurewebsites.net/?x-ms-routing-name=staging
By default, new slots have a routing rule of0%, shown in gray. When you explicitly set this value to0%(shown in black text), your users can access the staging slot manually by using thex-ms-routing-namequery parameter. They won't be routed to the slot automatically because the routing percentage is set to0. This configuration is an advanced scenario where you can hide your staging slot from the public while allowing internal teams to test changes on the slot.
0%
0%
x-ms-routing-name
0

Delete a slot
Azure portal
Azure CLI
Azure PowerShell
Search for and select your app.
Search for and select your app.
SelectDeployment>Deployment slots>slot to delete>Overview. The app type appears asApp Service (Slot)to remind you that you're viewing a deployment slot.
SelectDeployment>Deployment slots>slot to delete>Overview. The app type appears asApp Service (Slot)to remind you that you're viewing a deployment slot.
Stop the slot and set the traffic in the slot to zero.
Stop the slot and set the traffic in the slot to zero.
On the command bar, selectDelete.
On the command bar, selectDelete.

Run the following command in a terminal:
az webapp deployment slot delete --name <app-name> --resource-group <group-name> --slot <slot-name>
az webapp deployment slot delete --name <app-name> --resource-group <group-name> --slot <slot-name>
For more information, seeaz webapp deployment slot delete.
Run the following cmdlet in an Azure PowerShell terminal:
Remove-AzWebAppSlot -ResourceGroupName "<group-name>" -Name "<app-name>" -Slot "<slot-name>"
Remove-AzWebAppSlot -ResourceGroupName "<group-name>" -Name "<app-name>" -Slot "<slot-name>"
For more information, seeRemove-AzWebAppSlot.
Automate with Resource Manager templates
Azure Resource Manager templatesare declarative JSON files for automating the deployment and configuration of Azure resources. To swap slots by using Resource Manager templates, you set two properties on theMicrosoft.Web/sites/slotsandMicrosoft.Web/sitesresources:
Microsoft.Web/sites/slots
Microsoft.Web/sites
buildVersion: A string property that represents the current version of the app deployed in the slot. For example:v1,1.0.0.1, or2019-09-20T11:53:25.2887393-07:00.
buildVersion
v1
1.0.0.1
2019-09-20T11:53:25.2887393-07:00
targetBuildVersion: A string property that specifies whatbuildVersionvalue the slot should have. If thetargetBuildVersionvalue doesn't equal the currentbuildVersionvalue, it triggers the swap operation by finding the slot with the specifiedbuildVersionvalue.
targetBuildVersion
buildVersion
targetBuildVersion
buildVersion
buildVersion
Example Resource Manager template
The following Resource Manager template swaps two slots by updating thebuildVersionvalue of thestagingslot and setting thetargetBuildVersionvalue on the production slot. You must have a slot calledstaging.
buildVersion
staging
targetBuildVersion
staging
{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "my_site_name": {
            "defaultValue": "SwapAPIDemo",
            "type": "String"
        },
        "sites_buildVersion": {
            "defaultValue": "v1",
            "type": "String"
        }
    },
    "resources": [
        {
            "type": "Microsoft.Web/sites/slots",
            "apiVersion": "2018-02-01",
            "name": "[concat(parameters('my_site_name'), '/staging')]",
            "location": "East US",
            "kind": "app",
            "properties": {
                "buildVersion": "[parameters('sites_buildVersion')]"
            }
        },
        {
            "type": "Microsoft.Web/sites",
            "apiVersion": "2018-02-01",
            "name": "[parameters('my_site_name')]",
            "location": "East US",
            "kind": "app",
            "dependsOn": [
                "[resourceId('Microsoft.Web/sites/slots', parameters('my_site_name'), 'staging')]"
            ],
            "properties": {
                "targetBuildVersion": "[parameters('sites_buildVersion')]"
            }
        }        
    ]
}
{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "my_site_name": {
            "defaultValue": "SwapAPIDemo",
            "type": "String"
        },
        "sites_buildVersion": {
            "defaultValue": "v1",
            "type": "String"
        }
    },
    "resources": [
        {
            "type": "Microsoft.Web/sites/slots",
            "apiVersion": "2018-02-01",
            "name": "[concat(parameters('my_site_name'), '/staging')]",
            "location": "East US",
            "kind": "app",
            "properties": {
                "buildVersion": "[parameters('sites_buildVersion')]"
            }
        },
        {
            "type": "Microsoft.Web/sites",
            "apiVersion": "2018-02-01",
            "name": "[parameters('my_site_name')]",
            "location": "East US",
            "kind": "app",
            "dependsOn": [
                "[resourceId('Microsoft.Web/sites/slots', parameters('my_site_name'), 'staging')]"
            ],
            "properties": {
                "targetBuildVersion": "[parameters('sites_buildVersion')]"
            }
        }        
    ]
}
This Resource Manager template is idempotent. You can run it repeatedly and produce the same state of the slots. Without any change to the template, subsequent runs of the same template don't trigger any slot swap because the slots are already in the desired state.
Troubleshoot swaps
If any error occurs during aslot swap, the error appears inD:\home\LogFiles\eventlog.xml. It's also logged in the application-specific error log.
D:\home\LogFiles\eventlog.xml
Here are some common swap errors:
An HTTP request to the application root is timed. The swap operation waits for 90 seconds for each HTTP request, and it retries up to five times. If all retries are timed out, the swap operation is stopped.
An HTTP request to the application root is timed. The swap operation waits for 90 seconds for each HTTP request, and it retries up to five times. If all retries are timed out, the swap operation is stopped.
Local cache initialization might fail when the app content exceeds the local disk quota that's specified for the local cache. For more information, seeAzure App Service local cache overview.
Local cache initialization might fail when the app content exceeds the local disk quota that's specified for the local cache. For more information, seeAzure App Service local cache overview.
During a site update operation, the following error can occur: "The slot cannot be changed because its configuration settings have been prepared for swap." This error can occur if the first phase in a multiple-phase swap finishes but the second phase hasn't happened. It can also occur if a swap failed. There are two ways to resolve this problem:Cancel the swap operation, which resets the site back to the old state.Complete the swap operation, which updates the site to the desired new state.To learn how to cancel or complete the swap operation, seeSwap with preview (multiple-phase swap)earlier in this article.
During a site update operation, the following error can occur: "The slot cannot be changed because its configuration settings have been prepared for swap." This error can occur if the first phase in a multiple-phase swap finishes but the second phase hasn't happened. It can also occur if a swap failed. There are two ways to resolve this problem:
Cancel the swap operation, which resets the site back to the old state.
Complete the swap operation, which updates the site to the desired new state.
To learn how to cancel or complete the swap operation, seeSwap with preview (multiple-phase swap)earlier in this article.
Duringcustom warm-up, the HTTP requests are made internally without going through the external URL. They can fail with certain URL rewrite rules inWeb.config. For example, rules for redirecting domain names or enforcing HTTPS can prevent warm-up requests from reaching the app code. To work around this problem, modify your rewrite rules by adding the following two conditions:<conditions>
  <add input="{WARMUP_REQUEST}" pattern="1" negate="true" />
  <add input="{REMOTE_ADDR}" pattern="^100?\." negate="true" />
  ...
</conditions>
Duringcustom warm-up, the HTTP requests are made internally without going through the external URL. They can fail with certain URL rewrite rules inWeb.config. For example, rules for redirecting domain names or enforcing HTTPS can prevent warm-up requests from reaching the app code. To work around this problem, modify your rewrite rules by adding the following two conditions:
Web.config
<conditions>
  <add input="{WARMUP_REQUEST}" pattern="1" negate="true" />
  <add input="{REMOTE_ADDR}" pattern="^100?\." negate="true" />
  ...
</conditions>
<conditions>
  <add input="{WARMUP_REQUEST}" pattern="1" negate="true" />
  <add input="{REMOTE_ADDR}" pattern="^100?\." negate="true" />
  ...
</conditions>
Without a custom warm-up, the URL rewrite rules can still block HTTP requests. To work around this problem, modify your rewrite rules by adding the following condition:<conditions>
  <add input="{REMOTE_ADDR}" pattern="^100?\." negate="true" />
  ...
</conditions>
Without a custom warm-up, the URL rewrite rules can still block HTTP requests. To work around this problem, modify your rewrite rules by adding the following condition:
<conditions>
  <add input="{REMOTE_ADDR}" pattern="^100?\." negate="true" />
  ...
</conditions>
<conditions>
  <add input="{REMOTE_ADDR}" pattern="^100?\." negate="true" />
  ...
</conditions>
After slot swaps, the app might experience unexpected restarts. The restarts happen because after a swap, the host-name binding configuration goes out of sync. This situation by itself doesn't cause restarts. However, certain underlying storage events, such as storage volume failovers, might detect these discrepancies and force all worker processes to restart.To minimize these types of restarts, set theWEBSITE_ADD_SITENAME_BINDINGS_IN_APPHOST_CONFIG=1app settingonall slots. However, this app setting doesn't work with Windows Communication Foundation (WCF) apps.
After slot swaps, the app might experience unexpected restarts. The restarts happen because after a swap, the host-name binding configuration goes out of sync. This situation by itself doesn't cause restarts. However, certain underlying storage events, such as storage volume failovers, might detect these discrepancies and force all worker processes to restart.
To minimize these types of restarts, set theWEBSITE_ADD_SITENAME_BINDINGS_IN_APPHOST_CONFIG=1app settingonall slots. However, this app setting doesn't work with Windows Communication Foundation (WCF) apps.
WEBSITE_ADD_SITENAME_BINDINGS_IN_APPHOST_CONFIG=1
Next step
Set up Azure App Service access restrictions
Feedback
Was this page helpful?
Additional resources