Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Self-hosted Windows agents
Article
2024-08-21
11 contributors
In this article
Azure DevOps Services
To build and deploy Windows, Azure, and other Visual Studio solutions you'll need at least one Windows agent. Windows agents can also build Java and Android apps.
This article provides guidance for using the3.x agent softwarewith Azure DevOps Services and current versions of Azure DevOps Server. For a list of Azure DevOps Server versions that support the 3.x agent, seeDoes Azure DevOps Server support the 3.x agent.
Note
This article describes how to configure aself-hosted agent. If you're using Azure DevOps Services and aMicrosoft-hosted agentmeets your needs, you can skip setting up a self-hosted Windows agent.
Learn about agents
If you already know what an agent is and how it works, feel free to jump right in to the following sections. But if you'd like some more background about what they do and how they work, seeAzure Pipelines agents.
Check prerequisites
Make sure your machine has these prerequisites:
Operating system versionClient OSWindows 7 SP1ESUWindows 8.1Windows 10Windows 11Server OSWindows Server 2012 or higher
Client OSWindows 7 SP1ESUWindows 8.1Windows 10Windows 11
Windows 7 SP1ESU
Windows 8.1
Windows 10
Windows 11
Server OSWindows Server 2012 or higher
Windows Server 2012 or higher
The agent software installs its own version of .NET so there's no .NET prerequisite.
PowerShell 3.0or higher
Subversion- If you're building from a Subversion repo, you must install the Subversion client on the machine.
Recommended -Visual Studio build tools(2015 or higher)
You should run agent setup manually the first time.
After you get a feel for how agents work, or if you want to automate setting up many agents, consider usingunattended config.
Hardware specs
The hardware specs for your agents will vary with your needs, team size, etc.
It's not possible to make a general recommendation that will apply to everyone.
As a point of reference, the Azure DevOps team builds the hosted agents code using pipelines that utilizehosted agents.
On the other hand, the bulk of the Azure DevOps code is built by 24-core server class machines
running four self-hosted agents apiece.
Prepare permissions
Information security for self-hosted agents
The user configuring the agent needs pool admin permissions, but the user running the agent does not.
The folders controlled by the agent should be restricted to as few users as possible because they contain secrets that could be decrypted or exfiltrated.
The Azure Pipelines agent is a software product designed to execute code it downloads from external sources. It inherently could be a target for Remote Code Execution (RCE) attacks.
Therefore, it is important to consider the threat model surrounding each individual usage of Pipelines Agents to perform work, and decide what are the minimum permissions that could be granted to the user running the agent, to the machine where the agent runs, to the users who have write access to the Pipeline definition, the git repos where the yaml is stored, or the group of users who control access to the pool for new pipelines.
It is a best practice to have the identity running the agent be different from the identity with permissions to connect the agent to the pool. The user generating the credentials (and other agent-related files) is different than the user that needs to read them. Therefore, it is safer to carefully consider access granted to the agent machine itself, and the agent folders which contain sensitive files, such as logs and artifacts.
It makes sense to grant access to the agent folder only for DevOps administrators and the user identity running the agent process. Administrators may need to investigate the file system to understand build failures or get log files to be able to report Azure DevOps failures.
Decide which user you'll use
As a one-time step, you must register the agent. Someone with permission toadminister the agent queuemust complete these steps. The agent will not use this person's
credentials in everyday operation, but they're required to complete registration.
Learn more abouthow agents communicate.
Confirm the user has permission
Make sure the user account that you're going to use has permission to register the agent.
Is the user an Azure DevOps organization owner or TFS or Azure DevOps Server administrator?Stop here, you have permission.
Otherwise:
Open a browser and navigate to theAgent poolstab for your Azure Pipelines organization or Azure DevOps Server or TFS server:Sign in to your organization (https://dev.azure.com/{yourorganization}).ChooseAzure DevOps,Organization settings.ChooseAgent pools.Sign in to your project collection (http://your-server/DefaultCollection).ChooseAzure DevOps,Collection settings.ChooseAgent pools.
Open a browser and navigate to theAgent poolstab for your Azure Pipelines organization or Azure DevOps Server or TFS server:
Sign in to your organization (https://dev.azure.com/{yourorganization}).
Sign in to your organization (https://dev.azure.com/{yourorganization}).
https://dev.azure.com/{yourorganization}
ChooseAzure DevOps,Organization settings.
ChooseAzure DevOps,Organization settings.

ChooseAgent pools.
ChooseAgent pools.

Sign in to your project collection (http://your-server/DefaultCollection).
Sign in to your project collection (http://your-server/DefaultCollection).
http://your-server/DefaultCollection
ChooseAzure DevOps,Collection settings.
ChooseAzure DevOps,Collection settings.

ChooseAgent pools.
ChooseAgent pools.

Select the pool on the right side of the page and then clickSecurity.
Select the pool on the right side of the page and then clickSecurity.
If the user account you're going to use is not shown, then get an administrator to add it. The administrator can be an agent pool administrator, anAzure DevOps organization owner, or aTFS or Azure DevOps Server administrator.If it's adeployment groupagent, the administrator can be a deployment group administrator, anAzure DevOps organization owner, or aTFS or Azure DevOps Server administrator.You can add a user to the deployment group administrator role in theSecuritytab on theDeployment Groupspage inAzure Pipelines.
If the user account you're going to use is not shown, then get an administrator to add it. The administrator can be an agent pool administrator, anAzure DevOps organization owner, or aTFS or Azure DevOps Server administrator.
If it's adeployment groupagent, the administrator can be a deployment group administrator, anAzure DevOps organization owner, or aTFS or Azure DevOps Server administrator.
You can add a user to the deployment group administrator role in theSecuritytab on theDeployment Groupspage inAzure Pipelines.
Note
If you see a message like this:Sorry, we couldn't add the identity. Please try a different identity., you probably followed the above steps for an organization owner or TFS or Azure DevOps Server administrator. You don't need to do anything; you already have permission to administer the agent pool.

Download and configure the agent
Azure Pipelines
Log on to the machine using the account for which you've prepared permissions as explained above.
Log on to the machine using the account for which you've prepared permissions as explained above.
In your web browser, sign in to Azure Pipelines, and navigate to theAgent poolstab:Sign in to your organization (https://dev.azure.com/{yourorganization}).ChooseAzure DevOps,Organization settings.ChooseAgent pools.Sign in to your project collection (http://your-server/DefaultCollection).ChooseAzure DevOps,Collection settings.ChooseAgent pools.
In your web browser, sign in to Azure Pipelines, and navigate to theAgent poolstab:
Sign in to your organization (https://dev.azure.com/{yourorganization}).
Sign in to your organization (https://dev.azure.com/{yourorganization}).
https://dev.azure.com/{yourorganization}
ChooseAzure DevOps,Organization settings.
ChooseAzure DevOps,Organization settings.

ChooseAgent pools.
ChooseAgent pools.

Sign in to your project collection (http://your-server/DefaultCollection).
Sign in to your project collection (http://your-server/DefaultCollection).
http://your-server/DefaultCollection
ChooseAzure DevOps,Collection settings.
ChooseAzure DevOps,Collection settings.

ChooseAgent pools.
ChooseAgent pools.

Select theDefaultpool, select theAgentstab, and chooseNew agent.
Select theDefaultpool, select theAgentstab, and chooseNew agent.
On theGet the agentdialog box, chooseWindows.
On theGet the agentdialog box, chooseWindows.
On the left pane, select the processor architecture of the installed Windows OS version on your machine.
The x64 agent version is intended for 64-bit Windows, whereas the x86 version is intended for 32-bit Windows.
If you aren't sure which version of Windows is installed,follow these instructions to find out.
On the left pane, select the processor architecture of the installed Windows OS version on your machine.
The x64 agent version is intended for 64-bit Windows, whereas the x86 version is intended for 32-bit Windows.
If you aren't sure which version of Windows is installed,follow these instructions to find out.
On the right pane, click theDownloadbutton.
On the right pane, click theDownloadbutton.
Follow the instructions on the page to download the agent.
Follow the instructions on the page to download the agent.
Unpack the agent into the directory of your choice. Make sure that the path to the directory contains no spaces because tools and scripts don't always properly escape spaces. A recommended folder isC:\agents. Extracting in the download folder or other user folders may cause permission issues.
Unpack the agent into the directory of your choice. Make sure that the path to the directory contains no spaces because tools and scripts don't always properly escape spaces. A recommended folder isC:\agents. Extracting in the download folder or other user folders may cause permission issues.
C:\agents
Important
We strongly recommend you configure the agent from an elevated PowerShell window.
If you want to configure as a service, this isrequired.
You must not useWindows PowerShell ISEto configure the agent.
Important
For security reasons we strongly recommend making sure the agents folder (C:\agents) is only editable by admins.
C:\agents
Note
Please avoid using mintty based shells, such as git-bash, for agent configuration. Mintty is not fully compatible with native Input/Output Windows API (hereis some info about it) and we can't guarantee the setup script will work correctly in this case.
Install the agent
Start an elevated (PowerShell) window and set the location to where you unpacked the agent.cd C:\agents
Start an elevated (PowerShell) window and set the location to where you unpacked the agent.
cd C:\agents
cd C:\agents
Runconfig.cmd. This will ask you a series of questions to configure the agent..\config.cmd
Runconfig.cmd. This will ask you a series of questions to configure the agent.
config.cmd
.\config.cmd
.\config.cmd
Server URL
When setup asks for your server URL, for Azure DevOps Services, answerhttps://dev.azure.com/{your-organization}.
https://dev.azure.com/{your-organization}
When setup asks for your server URL, for Azure DevOps Server, answerhttps://{my-server}/{my-collection}.
https://{my-server}/{my-collection}
Agent setup authentication type
When you register an agent, choose from the following authentication types, and setup will prompt you for the specific additional information required for each authentication type.  For more information, seeSelf-hosted agent authentication options.
Personal access token
Device code flow
Service principal
Personal access token
AlternateConnect to Azure DevOps Server or TFS using Basic authentication. When you selectAlternateyou'll be prompted for your credentials.
Windows agents have the following two additional authentication options on Azure DevOps Server and TFS.
NegotiateConnect to TFS as a user other than the signed-in user via a Windows authentication scheme such as NTLM or Kerberos. After you select Negotiate you'll be prompted for credentials.
Integrated(Default) Connect a Windows agent to TFS using the credentials of the signed-in user via a Windows authentication scheme such as NTLM or Kerberos. You won't be prompted for credentials after you choose this method.
Important
Your server must beconfigured to support the authentication methodto use Alternate, Negotiate, or Integrated authentication.
The authentication method used for registering the agent is used only during agent registration. To learn more about how agents communicate with Azure Pipelines after registration, seeCommunication with Azure Pipelines or TFS.
Choose interactive or service mode
For guidance on whether to run the agent in interactive mode or as a service, seeAgents: Interactive vs. service.
If you choose to run as a service (which we recommend), the username you run as should be 20 characters or fewer.
Run the agent
Run interactively
If you configured the agent to run interactively, run the following the command to start the agent.
.\run.cmd
.\run.cmd
To restart the agent, press Ctrl+C to stop the agent, and then runrun.cmdto restart it.
run.cmd
Note
If you are running the agent from PowerShell Core to execute Windows PowerShell tasks, your pipeline may fail with an error such asError in TypeData "System.Security.AccessControl.ObjectSecurity": The member is already present. This is because
Windows PowerShell inherits thePSModulePathenvironment variable, which includes PowerShell Core module locations, from its parent process.
Error in TypeData "System.Security.AccessControl.ObjectSecurity": The member is already present
PSModulePath
As a workaround, you can set the agent's knobAZP_AGENT_CLEANUP_PSMODULES_IN_POWERSHELLtotruein the pipeline. This will allow the agent to resetPSModulePathbefore executing tasks.
AZP_AGENT_CLEANUP_PSMODULES_IN_POWERSHELL
true
PSModulePath
variables:
 AZP_AGENT_CLEANUP_PSMODULES_IN_POWERSHELL: "true"
variables:
 AZP_AGENT_CLEANUP_PSMODULES_IN_POWERSHELL: "true"
If this workaround does not resolve your issue, or if you need to use custom module locations, you can set the$Env:PSModulePathvariable as needed in your PowerShell Core window before running the agent.
$Env:PSModulePath
You can also choose to have the agent accept only one job and then exit.
To run in this configuration, use the following command.
.\run.cmd --once
.\run.cmd --once
Agents in this mode will accept only one job and then spin down gracefully (useful for running inDockeron a service like Azure Container Instances).
Run as a service
If you configured the agent to run as a service, it starts automatically. You can view and control the agent running status from the services snap-in. Runservices.mscand look for one of:
services.msc
"Azure Pipelines Agent (name of your agent)"
"VSTS Agent (name of your agent)"
"vstsagent.(organization name).(name of your agent)"
Note
To allow more flexibility with access control of an agent running as a service it
is possible to set up the agent service SID type as [SERVICE_SID_TYPE_UNRESTRICTED] via
flag or prompt during interactive configuration flow.
By default, the agent service is configured withSERVICE_SID_TYPE_NONE.
SERVICE_SID_TYPE_UNRESTRICTED
SERVICE_SID_TYPE_NONE
For more details aboutSIDtypes please check thisdocumentation.
To restart the agent, right-click the entry and chooseRestart.
Note
If you need to change the agent's logon account, don't do it from the Services
snap-in. Instead, see the information below to reconfigure the agent.
To use your agent, run ajobusing the agent's pool.
If you didn't choose a different pool, your agent will be in theDefaultpool.
Replace an agent
To replace an agent, follow theDownload and configure the agentsteps again.
When you configure an agent using the same name as an agent that already exists,
you're asked if you want to replace the existing agent. If you answerY,
then make sure you remove the agent (see below) that you're replacing. Otherwise,
after a few minutes of conflicts, one of the agents will shut down.
Y
Remove and reconfigure an agent
To remove the agent:
.\config remove
.\config remove
After you've removed the agent, you canconfigure it again.
Unattended config
The agent can be set up from a script with no human intervention.
You must pass--unattendedand the answers to all questions.
--unattended
To configure an agent, it must know the URL to your organization or collection and credentials of someone authorized to set up agents.
All other responses are optional.
Any command-line parameter can be specified using an environment variable instead:
put its name in upper case and prependVSTS_AGENT_INPUT_.
For example,VSTS_AGENT_INPUT_PASSWORDinstead of specifying--password.
VSTS_AGENT_INPUT_
VSTS_AGENT_INPUT_PASSWORD
--password
Required options
--unattended- agent setup will not prompt for information, and all settings must be provided on the command line
--unattended
--url <url>- URL of the server. For example:https://dev.azure.com/myorganizationor http://my-azure-devops-server:8080/tfs
--url <url>
--auth <type>- authentication type. Valid values are:pat(Personal access token)SP(Service Principal) (Requiresagent version 3.227.1or newer)negotiate(Kerberos or NTLM)alt(Basic authentication)integrated(Windows default credentials)
--auth <type>
pat(Personal access token)
pat
SP(Service Principal) (Requiresagent version 3.227.1or newer)
SP
negotiate(Kerberos or NTLM)
negotiate
alt(Basic authentication)
alt
integrated(Windows default credentials)
integrated
Authentication options
If you chose--auth pat:--token <token>- specifies your personal access tokenYou can also pass an OAuth 2.0 token as the--tokenparameter.
--auth pat
--token <token>- specifies your personal access token
--token <token>
You can also pass an OAuth 2.0 token as the--tokenparameter.
--token
If you chose--auth negotiateor--auth alt:--userName <userName>- specifies a Windows username in the formatdomain\userNameoruserName@domain.com--password <password>- specifies a password
--auth negotiate
--auth alt
--userName <userName>- specifies a Windows username in the formatdomain\userNameoruserName@domain.com
--userName <userName>
domain\userName
userName@domain.com
--password <password>- specifies a password
--password <password>
If you chose--auth SP:--clientID <clientID>- specifies the Client ID of the Service Principal with access to register agents--tenantId <tenantID>- specifies the Tenant ID which the Service Principal is registered in--clientSecret <clientSecret>- specifies the Client Secret of the Service PrincipalSeeRegister an agent using a service principalfor more information
--auth SP
--clientID <clientID>- specifies the Client ID of the Service Principal with access to register agents
--clientID <clientID>
--tenantId <tenantID>- specifies the Tenant ID which the Service Principal is registered in
--tenantId <tenantID>
--clientSecret <clientSecret>- specifies the Client Secret of the Service Principal
--clientSecret <clientSecret>
SeeRegister an agent using a service principalfor more information
Pool and agent names
--pool <pool>- pool name for the agent to join
--pool <pool>
--agent <agent>- agent name
--agent <agent>
--replace- replace the agent in a pool. If another agent is listening by the same name, it will start failing with a conflict
--replace
Agent setup
--work <workDirectory>- work directory where job data is stored. Defaults to_workunder the
root of the agent directory. The work directory is owned by a given
agent and should not be shared between multiple agents.
--work <workDirectory>
_work
--acceptTeeEula- accept the Team Explorer Everywhere End User License Agreement (macOS and Linux only)
--acceptTeeEula
--disableloguploads- don't stream or send console log output to the server. Instead, you may retrieve them from the agent host's filesystem after the job completes.
--disableloguploads
Windows-only startup
--runAsService- configure the agent to run as a Windows service (requires administrator permission)
--runAsService
--runAsAutoLogon- configure auto-logon and run the agent on startup (requires administrator permission)
--runAsAutoLogon
--windowsLogonAccount <account>- used with--runAsServiceor--runAsAutoLogonto specify the Windows user
name in the formatdomain\userNameoruserName@domain.com
--windowsLogonAccount <account>
--runAsService
--runAsAutoLogon
domain\userName
userName@domain.com
--windowsLogonPassword <password>- used with--runAsServiceor--runAsAutoLogonto specify Windows logon password (not required forGroup Managed Service Accountsand Windows built in accounts such as 'NT AUTHORITY\NETWORK SERVICE')
--windowsLogonPassword <password>
--runAsService
--runAsAutoLogon
--enableservicesidtypeunrestricted- used with--runAsServiceto configure the agent with service SID type asSERVICE_SID_TYPE_UNRESTRICTED(requires administrator permission)
--enableservicesidtypeunrestricted
--runAsService
SERVICE_SID_TYPE_UNRESTRICTED
--overwriteAutoLogon- used with--runAsAutoLogonto overwrite the existing auto logon on the machine
--overwriteAutoLogon
--runAsAutoLogon
--noRestart- used with--runAsAutoLogonto stop the host from restarting after agent configuration completes
--noRestart
--runAsAutoLogon
Troubleshooting configuring the agent with therunAsAutoLogonoption
runAsAutoLogon
Configuring the agent with therunAsAutoLogonoption runs the agent each time after restarting the machine.
Perform next steps if the agent is not run after restarting the machine.
runAsAutoLogon
Before reconfiguring the agent, it is necessary to remove the old agent configuration, so try to run this command from the agent folder:
.\config.cmd remove --auth 'PAT' --token '<token>'
.\config.cmd remove --auth 'PAT' --token '<token>'
Check if the agent was removed from your agent pool after executing the command:
<Azure DevOps organization> / <Project> / Settings / Agent pools / <Agent Pool> / Agents
<Azure DevOps organization> / <Project> / Settings / Agent pools / <Agent Pool> / Agents
Remove the agent from your agent pool manually if it was not removed by running the command.
Then try to reconfigure the agent by running this command from the agent folder:
.\config.cmd --unattended --agent '<agent-name>' --pool '<agent-pool-name>' --url '<azure-dev-ops-organization-url>' --auth 'PAT' --token '<token>' --runAsAutoLogon --windowsLogonAccount '<domain\user-name>' --windowsLogonPassword '<windows-password>'
.\config.cmd --unattended --agent '<agent-name>' --pool '<agent-pool-name>' --url '<azure-dev-ops-organization-url>' --auth 'PAT' --token '<token>' --runAsAutoLogon --windowsLogonAccount '<domain\user-name>' --windowsLogonPassword '<windows-password>'
Specify the agent name (any specific unique name) and check if this agent appeared in your agent pool after reconfiguring.
It will be much better to unpack an agent archive (which can be downloadedhere) and run this command from the new unpacked agent folder.
Run thewhoami /usercommand to get the<sid>. OpenRegistry Editorand follow the path:
whoami /user
<sid>
Registry Editor
Computer\HKEY_USERS\<sid>\SOFTWARE\Microsoft\Windows\CurrentVersion\Run
Computer\HKEY_USERS\<sid>\SOFTWARE\Microsoft\Windows\CurrentVersion\Run
Check if there is theVSTSAgentkey. Delete this key if it exists, then closeRegistry Editorand configure the agent by running the.\config.cmdcommand (without args) from the agent folder. Before answering the questionEnter Restart the machine at a later time?, openRegistry Editoragain and check if theVSTSAgentkey has appeared. PressEnterto answer the question, and check if theVSTSAgentkey remains in its place after restarting the machine.
VSTSAgent
Registry Editor
.\config.cmd
Enter Restart the machine at a later time?
Registry Editor
VSTSAgent
Enter
VSTSAgent
Create aautorun.cmdfile that contains the following line:echo "Hello from AutoRun!".
OpenRegistry Editorand create in the path above a new key-value pair with the keyAutoRunand the value
autorun.cmd
echo "Hello from AutoRun!"
Registry Editor
AutoRun
C:\windows\system32\cmd.exe /D /S /C start "AutoRun" "D:\path\to\autorun.cmd"
C:\windows\system32\cmd.exe /D /S /C start "AutoRun" "D:\path\to\autorun.cmd"
Restart your machine. You have an issue with Windows registry keys if you do not see a console window with theHello from AutoRun!message.
Hello from AutoRun!
Deployment group only
--deploymentGroup- configure the agent as a deployment group agent
--deploymentGroup
--deploymentGroupName <name>- used with--deploymentGroupto specify the deployment group for the agent to join
--deploymentGroupName <name>
--deploymentGroup
--projectName <name>- used with--deploymentGroupto set the project name
--projectName <name>
--deploymentGroup
--addDeploymentGroupTags- used with--deploymentGroupto indicate that deployment group tags should be added
--addDeploymentGroupTags
--deploymentGroup
--deploymentGroupTags <tags>- used with--addDeploymentGroupTagsto specify the comma separated list of tags for
the deployment group agent - for example "web, db"
--deploymentGroupTags <tags>
--addDeploymentGroupTags
Environments only
--addvirtualmachineresourcetags- used to indicate that environment resource tags should be added
--addvirtualmachineresourcetags
--virtualmachineresourcetags  <tags>- used with--addvirtualmachineresourcetagsto specify the comma separated list of tags for
the environment resource agent - for example "web, db"
--virtualmachineresourcetags  <tags>
--addvirtualmachineresourcetags
.\config --helpalways lists the latest required and optional responses.
.\config --help
Diagnostics
If you're having trouble with your self-hosted agent, you can try running diagnostics.
After configuring the agent:
.\run --diagnostics
.\run --diagnostics
This will run through a diagnostic suite that may help you troubleshoot the problem.
The diagnostics feature is available starting with agent version 2.165.0.
Network diagnostics for self-hosted agents
Set the value ofAgent.Diagnostictotrueto collect additional logs that can be used for troubleshooting network issues for self-hosted agents. For more information, seeNetwork diagnostics for self-hosted agents
Agent.Diagnostic
true
Help on other options
To learn about other options:
.\config --help
.\config --help
The help provides information on authentication alternatives and unattended configuration.
Capabilities
Your agent's capabilities are cataloged and advertised in the pool so that only the builds and releases it can handle are assigned to it. SeeBuild and release agent capabilities.
In many cases, after you deploy an agent, you'll need to install software or utilities. Generally you should install on your agents whatever software and tools you use on your development machine.
For example, if your build includes thenpm task, then the build won't run unless there's a build agent in the pool that has npm installed.
Important
Capabilities include all environment variables and the values that are set when the agent runs. If any of these values change while the agent is running, the agent must be restarted to pick up the new values. After you install new software on an agent, you must restart the agent for the new capability to show up in the pool, so that the build can run.
If you want to exclude environment variables as capabilities, you can designate them by setting an environment variableVSO_AGENT_IGNOREwith a comma-delimited list of variables to ignore.
VSO_AGENT_IGNORE
FAQ
What version of Git does my agent run?
By default, the Windows agent uses the version of Git that is bundled with the agent software. Microsoft recommends using the version of Git that is bundled with the agent, but you have several options to override this default behavior and use the version of Git that the agent machine has installed in the path.
Set a pipeline variable namedSystem.PreferGitFromPathtotruein your pipelines.
System.PreferGitFromPath
true
On self-hosted agents, you can create a file named.envin the agent root directory and add aSystem.PreferGitFromPath=trueline to the file. For more information, seeHow do I set different environment variables for each individual agent?
System.PreferGitFromPath=true
To see the version of Git used by a pipeline, you can look at the logs for acheckoutstep in your pipeline, as shown in the following example.
checkout
Syncing repository: PathFilter (Git)
Prepending Path environment variable with directory containing 'git.exe'.
git version
git version 2.26.2.windows.1
Syncing repository: PathFilter (Git)
Prepending Path environment variable with directory containing 'git.exe'.
git version
git version 2.26.2.windows.1
How do I make sure I have the latest agent version?
Navigate to theAgent poolstab:Sign in to your organization (https://dev.azure.com/{yourorganization}).ChooseAzure DevOps,Organization settings.ChooseAgent pools.Sign in to your project collection (http://your-server/DefaultCollection).ChooseAzure DevOps,Collection settings.ChooseAgent pools.
Navigate to theAgent poolstab:
Sign in to your organization (https://dev.azure.com/{yourorganization}).
Sign in to your organization (https://dev.azure.com/{yourorganization}).
https://dev.azure.com/{yourorganization}
ChooseAzure DevOps,Organization settings.
ChooseAzure DevOps,Organization settings.

ChooseAgent pools.
ChooseAgent pools.

Sign in to your project collection (http://your-server/DefaultCollection).
Sign in to your project collection (http://your-server/DefaultCollection).
http://your-server/DefaultCollection
ChooseAzure DevOps,Collection settings.
ChooseAzure DevOps,Collection settings.

ChooseAgent pools.
ChooseAgent pools.

Click the pool that contains the agent.
Click the pool that contains the agent.
Make sure the agent is enabled.
Make sure the agent is enabled.
Navigate to the capabilities tab:From theAgent poolstab, select the desired agent pool.SelectAgentsand choose the desired agent.Choose theCapabilitiestab.NoteMicrosoft-hosted agents don't display system capabilities. For a list of software installed on Microsoft-hosted agents, seeUse a Microsoft-hosted agent.From theAgent poolstab, select the desired pool.SelectAgentsand choose the desired agent.Choose theCapabilitiestab.
Navigate to the capabilities tab:
From theAgent poolstab, select the desired agent pool.
From theAgent poolstab, select the desired agent pool.

SelectAgentsand choose the desired agent.
SelectAgentsand choose the desired agent.

Choose theCapabilitiestab.NoteMicrosoft-hosted agents don't display system capabilities. For a list of software installed on Microsoft-hosted agents, seeUse a Microsoft-hosted agent.
Choose theCapabilitiestab.

Note
Microsoft-hosted agents don't display system capabilities. For a list of software installed on Microsoft-hosted agents, seeUse a Microsoft-hosted agent.
From theAgent poolstab, select the desired pool.
From theAgent poolstab, select the desired pool.

SelectAgentsand choose the desired agent.
SelectAgentsand choose the desired agent.

Choose theCapabilitiestab.
Choose theCapabilitiestab.

Look for theAgent.Versioncapability. You can check this value against the latest published agent version. SeeAzure Pipelines Agentand check the page for the highest version number listed.
Look for theAgent.Versioncapability. You can check this value against the latest published agent version. SeeAzure Pipelines Agentand check the page for the highest version number listed.
Agent.Version
Each agent automatically updates itself when it runs a task that requires a newer version of the agent. If you want to manually update some agents, right-click the pool, and selectUpdate all agents.
Each agent automatically updates itself when it runs a task that requires a newer version of the agent. If you want to manually update some agents, right-click the pool, and selectUpdate all agents.
Can I update my agents that are part of an Azure DevOps Server pool?
Yes.
Beginning with Azure DevOps Server 2019, you can configure your server to look for the agent package files on a local disk.
This configuration will override the default version that came with the server at the time of its release.
This scenario also applies when the server doesn't have access to the internet.
From a computer with Internet access, download the latest version of the agent package files (in .zip or .tar.gz form) from theAzure Pipelines Agent GitHub Releases page.
From a computer with Internet access, download the latest version of the agent package files (in .zip or .tar.gz form) from theAzure Pipelines Agent GitHub Releases page.
Transfer the downloaded package files to each Azure DevOps Server Application Tier by using a method of your choice (such as USB drive, Network transfer, and so on). Place the agent files under the following folder:
Transfer the downloaded package files to each Azure DevOps Server Application Tier by using a method of your choice (such as USB drive, Network transfer, and so on). Place the agent files under the following folder:
Windows:%ProgramData%\Microsoft\Azure DevOps\Agents
%ProgramData%\Microsoft\Azure DevOps\Agents
Linux:usr/share/Microsoft/Azure DevOps/Agents
usr/share/Microsoft/Azure DevOps/Agents
macOS:usr/share/Microsoft/Azure DevOps/Agents
usr/share/Microsoft/Azure DevOps/Agents
Create theAgentsfolder if it is not present.
You're all set! Your Azure DevOps Server will now use the local files whenever the agents are updated. Each agent automatically updates itself when it runs a task that requires a newer version of the agent. But if you want to manually update some agents, right-click the pool, and then chooseUpdate all agents.
I'm running a firewall and my code is in Azure Repos. What URLs does the agent need to communicate with?
If you're running an agent in a secure network behind a firewall, make sure the agent can initiate communication with the following URLs and IP addresses.
https://{organization_name}.pkgs.visualstudio.com
{organization_name}.visualstudio.com
https://{organization_name}.visualstudio.com
{organization_name}.visualstudio.com
https://{organization_name}.vsblob.visualstudio.com
{organization_name}.visualstudio.com
https://{organization_name}.vsrm.visualstudio.com
{organization_name}.visualstudio.com
https://{organization_name}.vssps.visualstudio.com
{organization_name}.visualstudio.com
https://{organization_name}.vstmr.visualstudio.com
{organization_name}.visualstudio.com
https://*.blob.core.windows.net
https://*.dev.azure.com
dev.azure.com
https://*.vsassets.io
https://*.vsblob.visualstudio.com
dev.azure.com
https://*.vssps.visualstudio.com
dev.azure.com
https://*.vstmr.visualstudio.com
dev.azure.com
https://app.vssps.visualstudio.com
{organization_name}.visualstudio.com
https://dev.azure.com
dev.azure.com
https://login.microsoftonline.com
https://management.core.windows.net
https://vstsagentpackage.azureedge.net
https://download.agent.dev.azure.com
Important
Edgio CDN for Azure DevOps is being retired, which requires a new domain URL to be allow-listed in firewall rules for agent software download.
The new domain to allow-list for agent download ishttps://*.dev.azure.com. If your firewall rules don't allow wildcards, usehttps://download.agent.dev.azure.com.
https://*.dev.azure.com
https://download.agent.dev.azure.com
The Azure DevOps team recommends to make this change by the following date:
May 1, 2025 for Azure DevOps Services
May 15, 2025 for Azure DevOps Server
For more information, seeCDN Domain URL change for Agents in Pipelines.
To ensure your organization works with any existing firewall or IP restrictions, ensure thatdev.azure.comand*dev.azure.comare open and update your allow-listed IPs to include the following IP addresses, based on your IP version. If you're currently allow-listing the13.107.6.183and13.107.9.183IP addresses, leave them in place, as you don't need to remove them.
dev.azure.com
*dev.azure.com
13.107.6.183
13.107.9.183
IP V4 ranges
IP V6 ranges
13.107.6.0/24
13.107.9.0/24
13.107.42.0/24
13.107.43.0/24
150.171.22.0/24 
150.171.23.0/24 
150.171.73.0/24 
150.171.74.0/24 
150.171.75.0/24 
150.171.76.0/24
13.107.6.0/24
13.107.9.0/24
13.107.42.0/24
13.107.43.0/24
150.171.22.0/24 
150.171.23.0/24 
150.171.73.0/24 
150.171.74.0/24 
150.171.75.0/24 
150.171.76.0/24
2620:1ec:4::/48
2620:1ec:a92::/48
2620:1ec:21::/48
2620:1ec:22::/48
2620:1ec:50::/48 
2620:1ec:51::/48 
2603:1061:10::/48
2620:1ec:4::/48
2620:1ec:a92::/48
2620:1ec:21::/48
2620:1ec:22::/48
2620:1ec:50::/48 
2620:1ec:51::/48 
2603:1061:10::/48
Note
For more information about allowed addresses, seeAllowed address lists and network connections.
How do I run the agent with self-signed certificate?
Note
Running the agent with a self-signed certificate only applies to Azure DevOps Server.
Run the agent with self-signed certificate
How do I run the agent behind a web proxy?
Run the agent behind a web proxy
How do I restart the agent
If you're running the agent interactively, see the restart instructions inRun interactively. If you're running the agent as a service, restart the agent by following the steps inRun as a service.
How do I set different environment variables for each individual agent?
Create a.envfile under agent's root directory and put the environment variables you want to set into the file in the following format, and then restart the agent.
.env
MyEnv0=MyEnvValue0
MyEnv1=MyEnvValue1
MyEnv2=MyEnvValue2
MyEnv3=MyEnvValue3
MyEnv4=MyEnvValue4
MyEnv0=MyEnvValue0
MyEnv1=MyEnvValue1
MyEnv2=MyEnvValue2
MyEnv3=MyEnvValue3
MyEnv4=MyEnvValue4
How do I configure the agent to bypass a web proxy and connect to Azure Pipelines?
If you want the agent to bypass your proxy and connect to Azure Pipelines directly, then you should configure your web proxy to enable the agent to access the following URLs.
*.visualstudio.com
https://login.microsoftonline.com
https://app.vssps.visualstudio.com 
https://{organization_name}.visualstudio.com
https://{organization_name}.vsrm.visualstudio.com
https://{organization_name}.vstmr.visualstudio.com
https://{organization_name}.pkgs.visualstudio.com
https://{organization_name}.vssps.visualstudio.com
https://login.microsoftonline.com
https://app.vssps.visualstudio.com 
https://{organization_name}.visualstudio.com
https://{organization_name}.vsrm.visualstudio.com
https://{organization_name}.vstmr.visualstudio.com
https://{organization_name}.pkgs.visualstudio.com
https://{organization_name}.vssps.visualstudio.com
dev.azure.com
https://dev.azure.com
https://*.dev.azure.com
https://login.microsoftonline.com
https://management.core.windows.net
https://vstsagentpackage.azureedge.net
https://download.agent.dev.azure.com
https://vssps.dev.azure.com
https://dev.azure.com
https://*.dev.azure.com
https://login.microsoftonline.com
https://management.core.windows.net
https://vstsagentpackage.azureedge.net
https://download.agent.dev.azure.com
https://vssps.dev.azure.com
To ensure your organization works with any existing firewall or IP restrictions, ensure thatdev.azure.comand*dev.azure.comare open and update your allow-listed IPs to include the following IP addresses, based on your IP version. If you're currently allow-listing the13.107.6.183and13.107.9.183IP addresses, leave them in place, as you don't need to remove them.
dev.azure.com
*dev.azure.com
13.107.6.183
13.107.9.183
IP V4 ranges
IP V6 ranges
13.107.6.0/24
13.107.9.0/24
13.107.42.0/24
13.107.43.0/24
150.171.22.0/24 
150.171.23.0/24 
150.171.73.0/24 
150.171.74.0/24 
150.171.75.0/24 
150.171.76.0/24
13.107.6.0/24
13.107.9.0/24
13.107.42.0/24
13.107.43.0/24
150.171.22.0/24 
150.171.23.0/24 
150.171.73.0/24 
150.171.74.0/24 
150.171.75.0/24 
150.171.76.0/24
2620:1ec:4::/48
2620:1ec:a92::/48
2620:1ec:21::/48
2620:1ec:22::/48
2620:1ec:50::/48 
2620:1ec:51::/48 
2603:1061:10::/48
2620:1ec:4::/48
2620:1ec:a92::/48
2620:1ec:21::/48
2620:1ec:22::/48
2620:1ec:50::/48 
2620:1ec:51::/48 
2603:1061:10::/48
Note
This procedure enables the agent to bypass a web proxy. Your build pipeline and scripts must still handle bypassing your web proxy for each task and tool you run in your build.
For example, if you are using a NuGet task, you must configure your web proxy to support bypassing the URL for the server that hosts the NuGet feed you're using.
I'm using TFS and the URLs in the sections above don't work for me. Where can I get help?
Web site settings and security
I use TFS on-premises and I don't see some of these features. Why not?
Some of these features are available only onAzure Pipelinesand not yet available on-premises. Some features are available on-premises if you haveupgraded to the latest version of TFS.
What is enable SERVICE_SID_TYPE_UNRESTRICTED for agent service?
When configuring the agent software on Windows Server, you can specify the service security identifier from the following prompt.
Enter enable SERVICE_SID_TYPE_UNRESTRICTED for agent service (Y/N) (press enter for N)
Enter enable SERVICE_SID_TYPE_UNRESTRICTED for agent service (Y/N) (press enter for N)
Previous versions of the agent software set the service security identifier type toSERVICE_SID_TYPE_NONE, which is the default value for the current agent versions. To configure the security service identifier type toSERVICE_SID_TYPE_UNRESTRICTED, pressY.
SERVICE_SID_TYPE_NONE
SERVICE_SID_TYPE_UNRESTRICTED
Y
For more information, seeSERVICE_SID_INFO structureandSecurity identifiers.
Feedback
Was this page helpful?
Additional resources