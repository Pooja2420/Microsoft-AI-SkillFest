Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Import a Git repo
Article
2025-02-18
14 contributors
In this article
Azure DevOps Services | Azure DevOps Server 2022 - Azure DevOps Server 2019
This article shows you how to import an existing Git repo from GitHub, Bitbucket, GitLab, or other location into a new or empty existing repo in your Azure DevOps project.
Prerequisites
Note
In public projects, users withStakeholderaccess have full access to Azure Repos, including viewing, cloning, and contributing to code.
Note
When the import of the repository is completed, Azure DevOps sets theDefaultbranch for that imported repository. If the imported repository contains a branch namedmain, it gets set as the default branch, otherwise the first branch (in alphabetical order) of the imported repository gets set asDefault.
main
Import into a new repo
SelectRepos,Files.
SelectRepos,Files.

From the repo drop-down, selectImport repository.
From the repo drop-down, selectImport repository.

If the source repo is publicly available, justenter the clone URLof the source repository and a name for your new Git repository.If the source repository is private but can be accessed using basic authentication (username-password, personal access token, etc.),  selectRequires authorizationand enter your credentials. SSH authentication isn't supported, but you can manually import a repository that uses SSH authentication by following the steps inManually import a repo using git CLI.
If the source repo is publicly available, justenter the clone URLof the source repository and a name for your new Git repository.
If the source repository is private but can be accessed using basic authentication (username-password, personal access token, etc.),  selectRequires authorizationand enter your credentials. SSH authentication isn't supported, but you can manually import a repository that uses SSH authentication by following the steps inManually import a repo using git CLI.

::: moniker-end
Import into an existing empty repo
On theFilespage of the empty Git repository, selectImportandenter the clone URL. Provide credentials if the source repository requires authentication.

Note
The import feature disables automated linking for work items mentioned in a commit comment since the work item IDs in the destination project might not be the same as ones in the source project. Automatic linking for work items mentioned in a commit can be re-enabled by navigating toSettings,Version Control,  selecting your repository, and choosingOptions. For more information on linking commits with work items, seeLink work items to commits
Manually import a repo using az repos CLI
You can useaz repos importto import a repository to your Azure DevOps project.
Note
You must first create the repository in Azure DevOps before you can import a Git repository. Also, the repository you create must be empty. To create a repo, seeCreate your Git repo in Azure Repos.
az repos import create --git-source-url
                       [--detect {false, true}]
                       [--git-service-endpoint-id]
                       [--org]
                       [--project]
                       [--repository]
                       [--requires-authorization]
                       [--subscription]
                       [--user-name]
az repos import create --git-source-url
                       [--detect {false, true}]
                       [--git-service-endpoint-id]
                       [--org]
                       [--project]
                       [--repository]
                       [--requires-authorization]
                       [--subscription]
                       [--user-name]
Parameters
git-source-url
detect
false
true
git-service-endpoint-id
org
organization
az devops configure -d organization=<ORG_URL>
https://dev.azure.com/MyOrganizationName/
project
p
az devops configure -d project=<NAME_OR_ID>
repository
requires-authorization
AZURE_DEVOPS_EXT_GIT_SOURCE_PASSWORD_OR_PAT
subscription
az account set -s <NAME_OR_ID>
user-name
Example
The following command imports the public repofabrikam-open-sourceto the empty Git repofabrikam-open-sourcefor the default configurationaz devops configure --defaults organization=https://dev.azure.com/fabrikamprime project="Fabrikam Fiber".
az devops configure --defaults organization=https://dev.azure.com/fabrikamprime project="Fabrikam Fiber"
az repos import create --git-source-url https://github.com/fabrikamprime/fabrikam-open-source --repository fabrikam-open-source
{
  "detailedStatus": {
    "allSteps": [
      "Processing request",
      "Analyzing repository objects",
      "Storing objects",
      "Storing index file",
      "Updating references",
      "Import completed successfully"
    ],
    "currentStep": 6,
    "errorMessage": null
  },
  "importRequestId": 8,
  "parameters": {
    "deleteServiceEndpointAfterImportIsDone": null,
    "gitSource": {
      "overwrite": false,
      "url": "https://github.com/fabrikamprime/fabrikam-open-source"
    },
    "serviceEndpointId": null,
    "tfvcSource": null
  },
  "repository": {
    "defaultBranch": null,
    "id": "0f6919cd-a4db-4f34-a73f-2354114a66c4",
    "isDisabled": false,
    "isFork": null,
    "name": "new-empty-repo",
    "parentRepository": null,
    "project": {
      "abbreviation": null,
      "defaultTeamImageUrl": null,
      "description": "Guidance and source control to foster a vibrant ecosystem for Fabrikam Fiber applications and extensions.",
      "id": "56af920d-393b-4236-9a07-24439ccaa85c",
      "lastUpdateTime": "2021-05-24T21:52:14.95Z",
      "name": "Fabrikam Fiber",
      "revision": 438023732,
      "state": "wellFormed",
      "url": "https://dev.azure.com/fabrikamprime/_apis/projects/56af920d-393b-4236-9a07-24439ccaa85c",
      "visibility": "private"
    },
    "remoteUrl": "https://fabrikamprime@dev.azure.com/fabrikamprime/Fabrikam%20Fiber/_git/fabrikam-open-source",
    "size": 12477,
    "sshUrl": "git@ssh.dev.azure.com:v3/kelliott/Fabrikam%20Fiber/new-empty-repo",
    "url": "https://dev.azure.com/fabrikamprime/56af920d-393b-4236-9a07-24439ccaa85c/_apis/git/repositories/0f6919cd-a4db-4f34-a73f-2354114a66c4",
    "validRemoteUrls": null,
    "webUrl": "https://dev.azure.com/fabrikamprime/Fabrikam%20Fiber/_git/fabrikam-open-source"
  },
  "status": "completed",
  "url": "https://dev.azure.com/fabrikamprime/Fabrikam%20Fiber/_apis/git/repositories/0f6919cd-a4db-4f34-a73f-2354114a66c4/importRequests/8"
}
az repos import create --git-source-url https://github.com/fabrikamprime/fabrikam-open-source --repository fabrikam-open-source
{
  "detailedStatus": {
    "allSteps": [
      "Processing request",
      "Analyzing repository objects",
      "Storing objects",
      "Storing index file",
      "Updating references",
      "Import completed successfully"
    ],
    "currentStep": 6,
    "errorMessage": null
  },
  "importRequestId": 8,
  "parameters": {
    "deleteServiceEndpointAfterImportIsDone": null,
    "gitSource": {
      "overwrite": false,
      "url": "https://github.com/fabrikamprime/fabrikam-open-source"
    },
    "serviceEndpointId": null,
    "tfvcSource": null
  },
  "repository": {
    "defaultBranch": null,
    "id": "0f6919cd-a4db-4f34-a73f-2354114a66c4",
    "isDisabled": false,
    "isFork": null,
    "name": "new-empty-repo",
    "parentRepository": null,
    "project": {
      "abbreviation": null,
      "defaultTeamImageUrl": null,
      "description": "Guidance and source control to foster a vibrant ecosystem for Fabrikam Fiber applications and extensions.",
      "id": "56af920d-393b-4236-9a07-24439ccaa85c",
      "lastUpdateTime": "2021-05-24T21:52:14.95Z",
      "name": "Fabrikam Fiber",
      "revision": 438023732,
      "state": "wellFormed",
      "url": "https://dev.azure.com/fabrikamprime/_apis/projects/56af920d-393b-4236-9a07-24439ccaa85c",
      "visibility": "private"
    },
    "remoteUrl": "https://fabrikamprime@dev.azure.com/fabrikamprime/Fabrikam%20Fiber/_git/fabrikam-open-source",
    "size": 12477,
    "sshUrl": "git@ssh.dev.azure.com:v3/kelliott/Fabrikam%20Fiber/new-empty-repo",
    "url": "https://dev.azure.com/fabrikamprime/56af920d-393b-4236-9a07-24439ccaa85c/_apis/git/repositories/0f6919cd-a4db-4f34-a73f-2354114a66c4",
    "validRemoteUrls": null,
    "webUrl": "https://dev.azure.com/fabrikamprime/Fabrikam%20Fiber/_git/fabrikam-open-source"
  },
  "status": "completed",
  "url": "https://dev.azure.com/fabrikamprime/Fabrikam%20Fiber/_apis/git/repositories/0f6919cd-a4db-4f34-a73f-2354114a66c4/importRequests/8"
}

Manually import a repo using git CLI
The import repo feature was introduced in the 2017 Update 1. You can also follow these steps to manually import a repo into an Azure DevOps Services repo by replacing "TFS" with Azure Repos in the following steps.
Clone the source repo to a temporary folder on your computer using thebareoption, as shown in the following command line example, and then navigate to the repo's folder. When cloning using thebareoption, the folder name includes the.gitsuffix. In this example,https://github.com/contoso/old-contoso-repo.gitis the source repo to be manually imported.git clone --bare https://github.com/contoso/old-contoso-repo.git
cd old-contoso-repo.git
Clone the source repo to a temporary folder on your computer using thebareoption, as shown in the following command line example, and then navigate to the repo's folder. When cloning using thebareoption, the folder name includes the.gitsuffix. In this example,https://github.com/contoso/old-contoso-repo.gitis the source repo to be manually imported.
bare
bare
.git
https://github.com/contoso/old-contoso-repo.git
git clone --bare https://github.com/contoso/old-contoso-repo.git
cd old-contoso-repo.git
git clone --bare https://github.com/contoso/old-contoso-repo.git
cd old-contoso-repo.git
Create a target repoand make a note of the clone URL. In this example,https://dev.azure.com/contoso-ltd/MyFirstProject/_git/new-contoso-repois the URL for the new target repo.
Create a target repoand make a note of the clone URL. In this example,https://dev.azure.com/contoso-ltd/MyFirstProject/_git/new-contoso-repois the URL for the new target repo.
https://dev.azure.com/contoso-ltd/MyFirstProject/_git/new-contoso-repo
Run the following command to copy the source repo to the target repo.git push --mirror https://dev.azure.com/contoso-ltd/MyFirstProject/_git/new-contoso-repoWarningUsing--mirroroverwrites all branches in the target repo which includes deleting any branches not in the source repo.
Run the following command to copy the source repo to the target repo.
git push --mirror https://dev.azure.com/contoso-ltd/MyFirstProject/_git/new-contoso-repo
git push --mirror https://dev.azure.com/contoso-ltd/MyFirstProject/_git/new-contoso-repo
Warning
Using--mirroroverwrites all branches in the target repo which includes deleting any branches not in the source repo.
--mirror
If the source repository has LFS objects, then fetch them, and copy them from the source repo to the target repo.git lfs fetch origin --all
git lfs push --all https://dev.azure.com/contoso-ltd/MyFirstProject/_git/new-contoso-repo
If the source repository has LFS objects, then fetch them, and copy them from the source repo to the target repo.
git lfs fetch origin --all
git lfs push --all https://dev.azure.com/contoso-ltd/MyFirstProject/_git/new-contoso-repo
git lfs fetch origin --all
git lfs push --all https://dev.azure.com/contoso-ltd/MyFirstProject/_git/new-contoso-repo
Delete the temporary folder by running the following commands.cd ..
rm -rf old-contoso-repo.git
Delete the temporary folder by running the following commands.
cd ..
rm -rf old-contoso-repo.git
cd ..
rm -rf old-contoso-repo.git
Frequently asked questions (FAQs)
Although imports are most often successful, the following conditions might cause issues.
What if my Source repository is behind two-factor authentication?
What if my source repository doesn't support multi_ack?
Can I import from previous versions of Team Foundation Server?
Can I use MSA-based credentials?
Can I import from TFVC?
What if my source repository contains Git LFS objects?
Q: What if my source repository is behind two-factor authentication?
A: The import service uses REST APIs to validate and trigger import and can't work directly with repositories that require two-factor authentication.
Most Git hosting providers likeGitHubandAzure DevOps Servicessupport personal tokens which can be supplied to the import service.

Q: What if my source repository doesn't support multi_ack?
A: The import service uses themulti_ackcapability of the Git protocol during the import.
If the source repository doesn't provide this capability, the import service can fail to import from the given source.
This failure can happen when creating import request or while import is in progress.
Q: Can I import from previous versions?
A: If the source Git repository is in a TFS version earlier than TFS 2017 RTM, then import fails.
This happens because of a contract mismatch between the latest Azure DevOps and previous versions.
Q: Can I use MSA-based credentials?
A: Unfortunately, MSA (Microsoft Account, formerly Live ID) based credentials don't work. Import service relies on basic authentication to communicate with the source repository. If the username / password you're using aren't basic auth then authentication and import fail.
One way to check if the username / password you're using are basic auth or not is to try using Git to clone your repository using the following format
git clone https://<<username>>:<<password>>@<<remaining clone Url>>
git clone https://<<username>>:<<password>>@<<remaining clone Url>>
Q: Can I import from TFVC?
A: You can migrate code from an existing TFVC repository to a new Git repository within the same account. While migrating to Git has many benefits, it's an involved process for large TFVC repositories and teams. Centralized version control systems, like TFVC, behave different than Git in fundamental ways. The switch involves a lot more than learning new commands. It's a disruptive change that requires careful planning. For more information, seeImport from TFVC to Git.
Q: What if my source repository contains Git LFS objects?
A: Git import doesn't import Git LFS objects.
LFS objects can be moved using the following steps:
Import the repository using import repository feature into Azure DevOps.
This action copies over all the Git objects from source to Azure DevOps, which also imports the LFS pointers that are Git objects, but not the LFS files
To move over the LFS files, you need both Git.exe and LFS client in the same box and access to both source repository and destination repository
Clone the imported repository from Azure DevOps to local system. Clone works, but it fails while performing checkout of LFS files
Add the source repository as remote, for example, "source"
Performgit lfs fetch source --all, which brings over all LFS files from source to your local repository
git lfs fetch source --all
Assuming the destination VSTS repository is your "target" remote
Performgit lfs push target --all
git lfs push target --all
Q: Can I import updates if the source changes later?
A: The import service is for initially importing an entire repository.
To mirror later changes, you need a local clone of the repository with remotes set to both source and destination.
You can sync changes using the following commands.
We treat the Azure Repos import asoriginand the original repo asupstream.
origin
upstream
git clone --bare <Azure-Repos-clone-URL>.git
cd <name-of-repo>
git remote add --mirror=fetch upstream <original-repo-URL>
git fetch upstream --tags
git push origin --all
git clone --bare <Azure-Repos-clone-URL>.git
cd <name-of-repo>
git remote add --mirror=fetch upstream <original-repo-URL>
git fetch upstream --tags
git push origin --all
Next steps
New to Git repos? Learn more
Related articles
Learn more about Git workflow
Feedback
Was this page helpful?
Additional resources