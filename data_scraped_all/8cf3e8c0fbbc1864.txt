Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Migrate WebLogic Server applications to Azure Kubernetes Service (AKS)
Article
2023-04-03
8 contributors
In this article
This guide describes what you should be aware of when you want to migrate an existing WebLogic Server (WLS) application to run on Azure Kubernetes Service (AKS).
Pre-migration
To ensure a successful migration, before you start, complete the assessment and inventory steps described in the following sections.
Ensure that the target is the appropriate target for your migration effort
The first step in a successful migration of a WLS application to Azure is selecting the most appropriate migration target. WLS runs well on Azure virtual machines (VMs) or Azure Kubernetes Service (AKS). The VM target is the easiest choice, because it most closely resembles an on-premises deployment. The administrative and deployment experience for virtual machines is very analogous to what you have on-premises. The trade-off for this ease is economic cost. Generally speaking, the per-minute cost for a VM-based solution is higher compared with AKS. While an AKS-based solution costs less to run, you must constrain your application to fit within the requirements of AKS. If minimizing change is the most important factor for your migration effort, consider a VM-based migration. In this case, seeMigrate WebLogic applications to Azure Virtual Machines. If you can tolerate converting your application to run within Kubernetes to reduce runtime cost, consider an AKS-based migration.  In this case, continue withMigrate WebLogic Server applications to Azure Kubernetes Service.
Determine whether the prebuilt Azure Marketplace offer is a good starting point
Once you've decided that AKS is the appropriate deployment target, you must accept that the Oracle WLS Kubernetes operator (the operator) is the only way to run WLS on Kubernetes. After accepting this fact, you must decide whether or not the prebuiltAzure Marketplace offeris a good starting point. Here are some things to consider about the prebuilt Azure Marketplace offer.
Oracle and Microsoft created this offer to allow you to quickly provision WLS on AKS using theModel in Imagedomain home source type. This concept is explained in more detail later in this article.
At a high level, the offer automates the following steps for you.Take an existing WAR or EAR deployment, if desired.Wrap it in a container using the WebLogic Image Tool (WIT). For more information, seeWebLogic Image Toolin the Oracle documentation.Install and configure the WebLogic Kubernetes Operator on AKS.Use the operator to run the whole thing. The operator invokes WebLogic Deploy Tooling (WDT) to stand up WebLogic environments and perform domain lifecycle operations in a repeatable fashion based on a metadata model. For more information, seeWebLogic Deploy Toolingin the Oracle documentation.
Take an existing WAR or EAR deployment, if desired.
Wrap it in a container using the WebLogic Image Tool (WIT). For more information, seeWebLogic Image Toolin the Oracle documentation.
Install and configure the WebLogic Kubernetes Operator on AKS.
Use the operator to run the whole thing. The operator invokes WebLogic Deploy Tooling (WDT) to stand up WebLogic environments and perform domain lifecycle operations in a repeatable fashion based on a metadata model. For more information, seeWebLogic Deploy Toolingin the Oracle documentation.
Though the prebuilt offer does provide numerous Azure service integrations, such as App Gateway, Elastic logging, Database integration, and more, it does make many simplifying assumptions. These assumptions make the offer not as flexible as mastering and using the operator yourself.
If you don't use the prebuilt Azure Marketplace offer, you must learn how to use the operator directly. Mastering the operator is beyond the scope of this article. The complete documentation for the WLS Kubernetes Operator is available atOracle.
The remainder of this section provides some considerations for deciding to use the prebuilt Azure Marketplace offer or using the operator directly.
First, you have to understand the concept of the WLSdomain. A domain is a logically related group of WLS resources. For the canonical definition of WLS domain, seethe Oracle documentation. Running WLS on AKS requires deciding how AKS deals with domains. The various choices are referred to as "domain home source type". The WLS Kubernetes operator supports three choices of domain home source type. The prebuilt Azure Marketplace offer uses the first one in this table.
Important
If you choose the Domain in PV source type, we strongly recommend NFS instead of SMB. NFS evolved from the UNIX operating system, and other variants such as GNU/Linux. For this reason, when using NFS with container technologies such as Docker, it's less likely to have problems for concurrent reads and file locking.
Be sure to enable NFS v4.1. Versions lower than v4.1 will have problems.
The operator documentation also includes a useful table comparing the various options. For more information, seeChoose a domain home source type.
To get a feel for the prebuilt Azure Marketplace offer, seeQuickstart: Deploy WebLogic Server on Azure Kubernetes Service using the Azure portal. For the reference documentation on the prebuilt Azure Marketplace offer, seeOracle.
To get a feel for using the operator directly, try the samples inthe operator documentation.
Now that you've been introduced to the various ways to handle WLS domains on AKS, you're better able to choose whether to use the prebuilt Azure Marketplace offer or to do it yourself using the operator directly.
Determine whether the WebLogic version is compatible
Your existing WLS version must be one of the versions supported by the operator. Oracle maintains these versions in the Oracle Container Registry (OCR). Use the following steps to see the list of supported versions.
Visit the Oracle Container Registry website and sign in. For more information, seehttps://container-registry.oracle.com/.
If you have a support entitlement, selectMiddleware, then search forweblogic_cpu. Selectweblogic_cpu.
If you don't have a support entitlement from Oracle, selectMiddleware, then search forweblogic. Selectweblogic.
Note
Get a support entitlement from Oracle before going to production. Failure to do so results in running insecure images that are not patched for critical security flaws. For more information on Oracle's critical patch updates, seeCritical Patch Updates, Security Alerts and Bulletins.
The prebuilt Azure Marketplace offer allows you to select the WLS images from OCR and Azure Container Registry (ACR), and thus implicitly supports all of the versions available from OCR. If you direct the offer to pull an image from ACR, make sure it's derived from one of the supported versions listed in OCR.
Inventory server capacity
Document the hardware (memory, CPU, disk) of the current production server(s) and the average and peak request counts and resource utilization. You'll need this information regardless of the migration path you choose. It's useful, for example, to help guide selection of the size of the VMs in your node pool, the amount of memory to be used by the container, and how many CPU shares the container needs.
It's possible to resize node pools in AKS. To learn how, seeResize node pools in Azure Kubernetes Service (AKS).
Inventory all secrets
Before the advent of "configuration as a service" technologies such as Azure Key Vault, there wasn't a well-defined concept of "secrets". Instead, you had a disparate set of configuration settings that effectively functioned as what we now call "secrets". With app servers such as WebLogic Server, these secrets are in many different config files and configuration stores. Check all properties and configuration files on the production server(s) for any secrets and passwords. Be sure to checkweblogic.xmlin your WARs. Configuration files containing passwords or credentials may also be found inside your application. For more information, seeAzure Key Vault basic concepts.
Once you have a solid inventory of secrets, consult the operator documentation regarding secrets. For more information, seeSecrets.
Inventory all certificates
Document all the certificates used for public SSL endpoints. You can view all certificates on the production server(s) by running the following command:
keytool -list -v -keystore <path to keystore>
keytool -list -v -keystore <path to keystore>
Once you have a solid inventory of certificates, you can install them directly with the prebuilt Azure Marketplace offer. For more information, seeTLS/SSL configuration. If you're using the operator directly, seeUpdating operator external certificates.
Validate that the supported Java version works correctly
All of the migration paths for WebLogic to Azure require a specific Java version, which varies for each path. You'll need to validate that your application is able to run correctly using that supported version.
Note
This validation is especially important if your current server is running on an unsupported JDK (such as Oracle JDK or IBM OpenJ9).
To obtain your current Java version, sign in to your production server and run the following command:
java -version
java -version
Note
When migrating to WLS on Azure virtual machines, the requirements for the specific Java versions are determined by the pre-installed Java on the virtual machines. When migrating to WLS on AKS, the specific Java version is determined by the container image chosen. There are a wide variety of choices, but all of them use the Oracle JDK.
Inventory JNDI resources
Inventory all JNDI resources. For example, datasources such as databases may have an associated JNDI name that allows JPA to correctly bind instances ofEntityManagerto a particular database. For more information on JNDI resources and databases, seeWebLogic Server Data Sourcesin the Oracle documentation. Other JNDI-related resources, such as JMS message brokers, may require migration or reconfiguration. For more information on JMS configuration seeOracle WebLogic Server 12.2.1.4.0.
EntityManager
If you're using the prebuilt Azure Marketplace offer, the set of JNDI resources you can customize at deployment time is limited to what the offer supports. Search forJNDIin theoffer documentation. If you're using the operator directly, the JDNI resources can be defined depending on your chosen domain home source type. For Domain in PV, you can set them the usual way, with WLST or with the admin console. For Domain in Image or Model in Image, seeTypical overrides.
Inspect your domain configuration
The main configuration unit in WebLogic Server is the domain. As such, theconfig.xmlfile contains a wealth of configuration that you must carefully consider for migration. The file includes references to additional XML files that are stored in subdirectories. Oracle advises that you should normally use theAdministration Consoleto configure WebLogic Server's manageable objects and services and allow WebLogic Server to maintain theconfig.xmlfile. For more information, seeDomain Configuration Files.
Inspect theWEB-INF/weblogic.xmlfile and/or theWEB-INF/web.xmlfile.
The prebuilt Azure Marketplace offer automatically creates a domain resource. If you're using the operator directly, you can completely customize how your domain is represented. For complete information, seeDomain resource.
Determine whether session replication is used
If your application relies on session replication, with or without Oracle Coherence*Web, you have three options:
Coherence*Web can run alongside a WebLogic Server in the Azure virtual machines, but you must manually configure this option after you provision the offer. If you are using standalone Coherence, you can also run it in an Azure virtual machine, but you must manually configure this option after you provision the offer.
Refactor your application to use a database for session management.
Refactor your application to externalize the session to Azure Redis Service. For more information, seeAzure Cache for Redis.
For all of these options, it's a good idea to master how WebLogic does HTTP Session State Replication. For more information, seeHTTP Session State Replicationin the Oracle documentation.
The prebuilt Azure Marketplace offer supports session affinity via the Application Gateway ingress controller. Cookie based affinity is enabled by default. You can selectDisable cookie based affinityto disable it. Look for cookie based affinity inthe documentation for the offer.
Document datasources
If your application uses any databases, you need to capture the following information:
What is the datasource name?
What is the connection pool configuration?
Where can I find the JDBC driver JAR file?
For more information on JDBC drivers in WebLogic, seeUsing JDBC Drivers with WebLogic Server.
The prebuilt Azure Marketplace offer has support for most popular databases. For more information, seeDatabase. For Domain in PV, you can set them the usual way, with WLST or with the admin console. For Domain in Image or Model in Image, seeTypical overrides.
Determine whether WebLogic has been customized
Determine which of the following customizations have been made, and capture what's been done.
Have the startup scripts been changed? Such scripts includesetDomainEnv,commEnv,startWebLogic, andstopWebLogic.
Are there any specific parameters passed to the JVM?
Are there JARs added to the server classpath?
You need to capture these customizations in the container image run by AKS. For the prebuilt Azure Marketplace offer, such customizations are best handled by creating a custom container image and making it available in Azure Container Registry, then pointing to that registry at deployment time. For more information, seeImage selection. If you're using the operator directly, seeJVM memory and Java option environment variables.
Determine whether Management over REST is used
If the lifecycle of your application includes using Management over REST, you need to capture which ports are used to access the REST API and determine how they are authenticated and exposed. After migration, you'll need to ensure that these same ports and authentication mechanisms are exposed so your application lifecycle can operate in a similar fashion as before the migration. For more information, seeAdministering Oracle WebLogic Server with RESTful Management Services.
The only domain home source type where it makes sense to continue to use management over REST is Domain in PV. It's possible to use it with the other domain home source types, but changes made are ephemeral and don't persist across pod restarts.
Determine whether a connection to on-premises is needed
If your application needs to access any of your on-premises services, you'll need to provision one of Azure's connectivity services. For more information, seeConnect an on-premises network to Azure. Alternatively, you'll need to refactor your application to use publicly available APIs that your on-premises resources expose.
Determine whether Java Message Service (JMS) Queues or Topics are in use
If your application is using JMS Queues or Topics, you'll need to migrate them to an externally-hosted JMS server. Azure Service Bus and the Advanced Message Queuing Protocol can be a great migration strategy for those using JMS. For more information, seeUse Java Message Service 1.1 with Azure Service Bus standard and AMQP 1.0.
If JMS persistent stores have been configured, you must capture their configuration and apply it after the migration.
If you're using Oracle Message Broker, you can migrate this software to Azure virtual machines and use it as-is.
Determine whether you are using your own custom created Shared Java EE Libraries
If you're using the Shared Java EE library feature, you have two options:
Refactor your application code to remove all dependencies on your libraries, and instead incorporate the functionality directly into your application.
Add the libraries to the server classpath.
These libraries can be handled using the same techniques as described inDetermine whether WebLogic has been customized.
Determine whether OSGi bundles are used
If you used OSGi bundles added to the WebLogic server, you'll need to add the equivalent JAR files directly to your web application.
You can include them in the WAR or EAR supplied to the prebuilt Azure Marketplace offer or using the operator directly.
Determine whether your application contains OS-specific code
If your application contains any code with dependencies on the host OS, then you need to refactor it to remove those dependencies. For example, you may need to replace any use of/or\in file system paths withFile.SeparatororPaths.getif your application is running on Windows.
/
\
File.Separator
Paths.get
WLS on AKS runs on Oracle Linux. Any OS-specific code must be compatible with Oracle Linux. To learn how to discover specific OS information, follow the steps inDetermine whether the WebLogic version is compatible.
Determine whether Oracle Service Bus is in use
If your application is using Oracle Service Bus (OSB), you'll need to capture how OSB is configured. For more information, seeAbout the Oracle Service Bus Installation.
OSB isn't directly supported in the prebuilt Azure Marketplace offer. If you must use OSB, you must use the operator directly.
Determine whether your application is composed of multiple WARs
If your application is composed of multiple WARs, you should treat each of those WARs as separate applications and go through this guide for each of them.
Determine whether your application is packaged as an EAR
If your application is packaged as an EAR file, be sure to examine theapplication.xmlandweblogic-application.xmlfiles and capture their configurations.
The prebuilt Azure Marketplace offer supports WARs and EARs. Using the operator directly also supports WARs and EARs.
Identify all outside processes and daemons running on the production servers
If you have any processes running outside the application server, such as monitoring daemons, you'll need to eliminate them or migrate them elsewhere.
Determine whether WebLogic Scripting Tool (WLST) is used
If you currently use WLST to perform your deployment, you'll need to assess what it's doing. If WLST is changing any (runtime) parameters of your application as part of the deployment, you'll need to make sure that this behavior continues to work while testing your application after migration.
The only domain home source type that's compatible with use of WLST is Domain in PV. For more information, seeDomain home on a PV.
Determine whether and how the file system is used
Kubernetes deals with filesystems with persistent volumes (PV). Mounting persistent volumes is supported in the prebuilt Azure Marketplace offer, and when using the operator directly. If you're using Domain in PV, the filesystem is a central aspect of configuration.
If your application currently serves static content, you need an alternate location for it. You should consider moving static content to Azure Blob Storage and adding Azure Front Door for fast downloads globally. For more information, seeStatic website hosting in Azure StorageandIntegrate an Azure Storage account with Azure Front Door.
Determine the network topology
The current set of Azure Marketplace offers is a starting point for your migration. If the offer does not cover aspects of your architecture that you need to migrate, you'll need to capture the network topology of your existing deployment and reproduce that in Azure, even after standing up the basic offer with one of the solution templates.
This is a very broad topic, but the following references can give some direction to your migration efforts:
This reference enumerates the high level topics relevant to the migration of network topology to Azure:Fast Track Deployment Guide.
This reference describes important concerns regarding clustering, which has an impact on network topology:WebLogic Server Clustering.
Because data sources are separate servers in a WebLogic system, you must consider them as part of the network topology analysis.WebLogic Server Data Sources.
Messaging sources are also separate servers.WebLogic Server Messaging
Load balancing is a fundamental requirement. This reference covers the WebLogic Server side of load balancing:Load Balancing in a Cluster.
Account for the use of JCA Adapters and Resource Adapters
If your deployment relies on resource adapters, the most supported option isDomain home on a PV.
Account for the use of custom security providers and JAAS
If your application is using JAAS, you need to make sure the configuration of security providers is correctly migrated. For more information, seeAbout Configuring WebLogic Security Providersin the Oracle documentation.
If your deployment relies security providers, the most supported option isDomain home on a PV.
Determine whether WebLogic clustering is used
The operator handles clustering for all possible ways of running WLS on AKS.
If your application is using local EJB, you need to migrate them to clustered EJB. For more information, seeClustered versus local EJB.
Account for load-balancing requirements
The best way to account for load balancing is to use the App Gateway integration provided by the built-in Azure Marketplace offer. For more information, seeTutorial: Migrate a WebLogic Server cluster to Azure with Azure Application Gateway as a load balancer.
Determine whether the Java EE Application Client feature is used
If your deployment relies on Java EE application clients, it's best to use the operator directly. For more information, seeExternal Clients.
Determine whether multiple container images are needed
A WebLogic Server domain can contain multiple clusters. For example, a multi-tiered application can be represented in a single domain, but have two clusters, say "frontend" and "backend".  It's useful to be able to update the frontend, without updating the backend, and vice versa. However, with the Model in Image domain home source type, the entire domain is represented in one container image. To accommodate this use case, you must separate the clusters into their own domains, each with their own container image. The operator can manage multiple domains in multiple namespaces. For more information, seeChoose a domain namespace selection strategy
Adopting multiple domains may introduce T3 access problems between domains. To resolve these problems, enable a custom channel as described inDetermine whether enabling unknown host access is needed.
Determine whether enabling unknown host access is needed
You may need to enable unknown host access by applying a patch to WebLogic for the following scenarios:
Allow T3 access from external clients outside AKS to WLS clusters in AKS via a custom channel.
Allow T3 access between different WLS domains in AKS via a custom channel.
For the details of the patch, follow the guidance inHow to Use the Patch Search in My Oracle Support(MOS)and search for patch30656708.
30656708
After the patch is applied, seeEnabling unknown host access.
Migration
The steps in this section assume that your analysis has lead you to decide to use the prebuilt Azure Marketplace offer.
Provision the offer
To open the offer in the Azure portal, seehttps://aka.ms/wlsaks. SelectCreate, and then follow the instructions in thedocumentation for the offer. Use the information you gathered in the preceding steps to aid in filling out the fields of the offer.
Migrate the domains
After you've provisioned the offer, output the domain by following these steps.
If you navigated away from theDeployment is in progresspage, the following steps show you how to get back to that page. If you're still on the page that showsYour deployment is complete, you can skip to step 5.
In the upper left of any portal page, select the hamburger menu and selectResource groups.
In the upper left of any portal page, select the hamburger menu and selectResource groups.
In the box with the textFilter for any field, enter the first few characters of the resource group you created previously. If you followed the recommended convention, enter your initials, then select the appropriate resource group.
In the box with the textFilter for any field, enter the first few characters of the resource group you created previously. If you followed the recommended convention, enter your initials, then select the appropriate resource group.
In the left navigation pane, in theSettingssection, selectDeploymentsto see an ordered list of the deployments to this resource group, with the most recent one first.
In the left navigation pane, in theSettingssection, selectDeploymentsto see an ordered list of the deployments to this resource group, with the most recent one first.
Scroll to the oldest entry in this list. This entry corresponds to the deployment you started in the preceding section. Select the oldest deployment, as shown in the following screenshot.
Scroll to the oldest entry in this list. This entry corresponds to the deployment you started in the preceding section. Select the oldest deployment, as shown in the following screenshot.

In the left panel, selectOutputs. This list shows the output values from the deployment. Useful information is included in the outputs. We're interested in the outputs that allow us to inspect the domain and interact with the operator. The other values in the outputs are explained in detail in theWebLogic on AKS user guide.
In the left panel, selectOutputs. This list shows the output values from the deployment. Useful information is included in the outputs. We're interested in the outputs that allow us to inspect the domain and interact with the operator. The other values in the outputs are explained in detail in theWebLogic on AKS user guide.
Locate the output namedshellCmdtoConnectAks. Paste the value of the output in a Bash shell and run the command. This command enables you to usekubectlas described inConnect to the cluster.
Locate the output namedshellCmdtoConnectAks. Paste the value of the output in a Bash shell and run the command. This command enables you to usekubectlas described inConnect to the cluster.
shellCmdtoConnectAks
kubectl
Locate the output namedshellCmdtoOutputWlsDomainYaml. Paste the value of the output in a Bash shell and run the command. This command outputs the domain resource as a YAML file.
Locate the output namedshellCmdtoOutputWlsDomainYaml. Paste the value of the output in a Bash shell and run the command. This command outputs the domain resource as a YAML file.
shellCmdtoOutputWlsDomainYaml
Now that you have the domain YAML of the current deployment, you can apply the knowledge inDeploying domain resource YAML filesand reviewthis guidancefor more clues on how to migrate the domains. This guidance requires adaptation to apply to the Kubernetes way of doing things, but it's still useful to know about.
Now that you have the domain YAML of the current deployment, you can apply the knowledge inDeploying domain resource YAML filesand reviewthis guidancefor more clues on how to migrate the domains. This guidance requires adaptation to apply to the Kubernetes way of doing things, but it's still useful to know about.
Account for KeyStores
You must account for the migration of any SSL KeyStores used by your application. For more information, seeConfiguring Keystores.
Connect the JMS sources
After you've connected the databases, you can configure JMS by following the instructions atFusion Middleware Administering JMS Resources for Oracle WebLogic Serverin the WebLogic documentation.
Account for logging
You can't do cloud without mastering logging. The operator provides samples for using Elasticsearch and Kibana. For more information, seethe operator documentation. Azure provides great support for Elastic. For complete details, seeWhat is Elastic integration with Azure?. You can combine the knowledge in these two resources to achieve an Azure-optimized logging solution for WLS on AKS.
Migrating your applications
Whether or not you chose to provide a WAR or EAR file at deployment time, you need to update the application via CI/CD. The operator documentation has a sample that shows how to do this update. For more information, seeUpdate 3. The other update samples are relevant to migration and are worth exploring.
Testing
Any in-container tests against applications must be configured to access the new servers running within Azure. As with the CI/CD concerns, you must ensure the necessary network security rules allow your tests to access the applications deployed to Azure. For more information, seeNetwork security groups.
Post-migration
After you've reached the migration goals you defined in thepre-migrationstep, perform some end-to-end acceptance testing to verify that everything works as expected. For guidance on some potential post-migration enhancements, see the following recommendations:
Scaling. Dynamic scaling is a key value proposition to justify the complexity of using Kubernetes. Combine the knowledge inTutorial: Scale applications in Azure Kubernetes Service (AKS)with the operator documentation sectionScalingto achieve a WLS-native Kubernetes optimized scaling solution. It's perfectly possible to use popular off-the shelf solutions such as Prometheus and Grafana for scaling with WLS on AKS. For more information, seeUsing Prometheus and Grafana to Monitor WebLogic Server on Kubernetes. Azure has a managed Grafana service. For details, seeWhat is Azure Managed Grafana?.
Scaling. Dynamic scaling is a key value proposition to justify the complexity of using Kubernetes. Combine the knowledge inTutorial: Scale applications in Azure Kubernetes Service (AKS)with the operator documentation sectionScalingto achieve a WLS-native Kubernetes optimized scaling solution. It's perfectly possible to use popular off-the shelf solutions such as Prometheus and Grafana for scaling with WLS on AKS. For more information, seeUsing Prometheus and Grafana to Monitor WebLogic Server on Kubernetes. Azure has a managed Grafana service. For details, seeWhat is Azure Managed Grafana?.
If you deployed WebLogic Server with Azure Application Gateway by following the steps in the offer, you may want to do more configuration on the Application Gateway. For more information, seeApplication Gateway configuration overview.
If you deployed WebLogic Server with Azure Application Gateway by following the steps in the offer, you may want to do more configuration on the Application Gateway. For more information, seeApplication Gateway configuration overview.
Enhance your network topology with advanced load balancing services. For more information, seeUsing load-balancing services in Azure.
Enhance your network topology with advanced load balancing services. For more information, seeUsing load-balancing services in Azure.
Get Java-optimized application performance monitoring with Azure Monitor and Application Insights. For more information, seeZero instrumentation application monitoring for Kubernetes - Azure Monitor Application Insights.
Get Java-optimized application performance monitoring with Azure Monitor and Application Insights. For more information, seeZero instrumentation application monitoring for Kubernetes - Azure Monitor Application Insights.
Use Azure Storage to serve static content mounted to AKS. For more information, seeStorage options for applications in Azure Kubernetes Service (AKS). Combine this knowledge with the operator documentation sectionProviding Access To A Persistent Volume Claim.
Use Azure Storage to serve static content mounted to AKS. For more information, seeStorage options for applications in Azure Kubernetes Service (AKS). Combine this knowledge with the operator documentation sectionProviding Access To A Persistent Volume Claim.
Deploy your applications to your migrated WebLogic cluster with Azure DevOps. For more information, seeAzure DevOps getting started documentation.
Deploy your applications to your migrated WebLogic cluster with Azure DevOps. For more information, seeAzure DevOps getting started documentation.
Use Azure Managed Identities to managed secrets and assign role based access to Azure resources. For more information, seeWhat are managed identities for Azure resources?.
Use Azure Managed Identities to managed secrets and assign role based access to Azure resources. For more information, seeWhat are managed identities for Azure resources?.
Integrate WebLogic Java EE authentication and authorization with Microsoft Entra ID. For more information, seeIntegrating Microsoft Entra getting started guide.
Integrate WebLogic Java EE authentication and authorization with Microsoft Entra ID. For more information, seeIntegrating Microsoft Entra getting started guide.
Feedback
Was this page helpful?
Additional resources