Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Publish from the command line
Article
2025-04-02
7 contributors
In this article
Azure DevOps Services | Azure DevOps Server 2022 - Azure DevOps Server 2019
You can use the Cross-platform CLI for Azure DevOps (tfx-cli) to publish your extension to the Visual Studio Marketplace.
For more information, see the overview ofpublish, install, and share.
Prerequisites
Get the TFX CLI from Node Package Manager and generate a Microsoft Entra token or a personal access token (PAT). Also, if you haven't already, set up a Publisher in the Gallery.
Acquire the Cross-platform CLI for Azure DevOps
If you don't have it, download and installNodeJS. During set up, ensure that you leaveAdd to PATHchosen.
If you don't have it, download and installNodeJS. During set up, ensure that you leaveAdd to PATHchosen.
Open a Command Prompt and enternpm i -g tfx-cli.
Open a Command Prompt and enternpm i -g tfx-cli.
npm i -g tfx-cli
If you already have the TFX CLI installed, you can update to the latest release by runningnpm up -g tfx-cli.
npm up -g tfx-cli
Publish with a Microsoft Entra token as a service principal
It is also possible to publish an extension as aservice principal.
Add the service principal as a member to a publisher account. You can get the service principal's ID through the REST API by logging in via the az cli and querying the service principal's profile. This can be done with the following commands:
Bash
PowerShell
az login --service-principal --username <appId> --password <password> --tenant <tenant-id>
# 499b84ac-1321-427f-aa17-267ca6975798 specifies azure devops as a resource
az rest -u https://app.vssps.visualstudio.com/_apis/profile/profiles/me --resource 499b84ac-1321-427f-aa17-267ca6975798
az login --service-principal --username <appId> --password <password> --tenant <tenant-id>
# 499b84ac-1321-427f-aa17-267ca6975798 specifies azure devops as a resource
az rest -u https://app.vssps.visualstudio.com/_apis/profile/profiles/me --resource 499b84ac-1321-427f-aa17-267ca6975798
# Variable block
$tenantId = "<tenant-id>"
$appId = "<appId>"
$password = "<password>"
$resource = "499b84ac-1321-427f-aa17-267ca6975798" # specifies azure devops
$url = "https://app.vssps.visualstudio.com/_apis/profile/profiles/me"

Connect-AzAccount -ServicePrincipal -Tenant $tenantId -ApplicationId $appId -Credential (New-Object System.Management.Automation.PSCredential($appId, (ConvertTo-SecureString $password -AsPlainText -Force)))

$accessToken = (Get-AzAccessToken -ResourceUrl $resource).Token
$response = Invoke-RestMethod -Uri $url -Headers @{Authorization = "Bearer $accessToken"}
$response
# Variable block
$tenantId = "<tenant-id>"
$appId = "<appId>"
$password = "<password>"
$resource = "499b84ac-1321-427f-aa17-267ca6975798" # specifies azure devops
$url = "https://app.vssps.visualstudio.com/_apis/profile/profiles/me"

Connect-AzAccount -ServicePrincipal -Tenant $tenantId -ApplicationId $appId -Credential (New-Object System.Management.Automation.PSCredential($appId, (ConvertTo-SecureString $password -AsPlainText -Force)))

$accessToken = (Get-AzAccessToken -ResourceUrl $resource).Token
$response = Invoke-RestMethod -Uri $url -Headers @{Authorization = "Bearer $accessToken"}
$response
Then, you canadd the service principal as a memberto the publisher using the ID from the previous step.
Publish an extension viaTFX CLIusing a service principal. Execute the followingTFX CLIcommand to use its access token:
tfx extension publish --publisher my-publisher --vsix my-publisher.my-extension-1.0.0.vsix --auth-type pat -t <ENTRA_TOKEN>
tfx extension publish --publisher my-publisher --vsix my-publisher.my-extension-1.0.0.vsix --auth-type pat -t <ENTRA_TOKEN>
Publish with a personal access token
Sign in to your organization
(https:dev.azure.com/{organization}).
Sign in to your organization
(https:dev.azure.com/{organization}).
https:dev.azure.com/{organization}
From your home page, open the user settings icon, and then selectProfile.
From your home page, open the user settings icon, and then selectProfile.

UnderSecurity, selectPersonal access tokens, and then selectNew Token.
UnderSecurity, selectPersonal access tokens, and then selectNew Token.

Complete the form:Name your tokenSelectAll accessible organizations, which is the only value that works when publishing via CLI. If you select only one organization, it results in an error, even if the PAT is validSelect an expiration time frame for your token. This is required because the Visual Studio Marketplace publishing APIs work outside of the context of an organizationSet the scope of access associated with this token. Be sure to select theMarketplace (publish)scope. This scope limits the token to only being able
to publish extensions to the Marketplace.SelectCreate
Complete the form:
Name your token
SelectAll accessible organizations, which is the only value that works when publishing via CLI. If you select only one organization, it results in an error, even if the PAT is valid
Select an expiration time frame for your token. This is required because the Visual Studio Marketplace publishing APIs work outside of the context of an organization
Set the scope of access associated with this token. Be sure to select theMarketplace (publish)scope. This scope limits the token to only being able
to publish extensions to the Marketplace.
SelectCreate

Copy your generated personal access token. Make sure to keep it secret.
Copy your generated personal access token. Make sure to keep it secret.

Once TFX CLI is installed and you have your token, you can use the tool to package and publish your extension.
Open a command prompt to the root directory of your extension.
Run the following command to publish your extension. When prompted, enter your token to authenticate.
tfx extension publish --publisher <YOUR_PUBLISHER_ID> --manifest-js <YOUR_EXTENSION_MANIFEST> --share-with <ACCOUNT_NAME>
tfx extension publish --publisher <YOUR_PUBLISHER_ID> --manifest-js <YOUR_EXTENSION_MANIFEST> --share-with <ACCOUNT_NAME>
Potential Errors
You may receive the following error if your extension has already been published:
Failed Request: Internal Server Error(500) - Version number must increase each time an extension is published. Extension: fabrikam.my-extension  Current version: 0.1.9  Updated version: 0.1.9
Failed Request: Internal Server Error(500) - Version number must increase each time an extension is published. Extension: fabrikam.my-extension  Current version: 0.1.9  Updated version: 0.1.9
You can add the--rev-versionflag to automatically increment thepatchversion of your extension. This also saves the new version to your manifest.
--rev-version
Note
All options available forcreateare available for thepublishcommand.
create
publish
C:\vso-team-calendar>tfx extension publish --publisher publishFabrikam --manifest-js fabrikam.config.js --share-with fabrikam --rev-version
Copyright Microsoft Corporation
> Personal access token:
Checking if this extension is already published
It is, update the extension
Waiting for server to validate extension package...
Sharing extension with fabrikam.

=== Completed operation: publish extension ===
 - Packaging: C:\vso-team-calendar\fabrikam.team-calendar-0.2.6.vsix
 - Publishing: success
 - Sharing: shared with fabrikam
C:\vso-team-calendar>tfx extension publish --publisher publishFabrikam --manifest-js fabrikam.config.js --share-with fabrikam --rev-version
Copyright Microsoft Corporation
> Personal access token:
Checking if this extension is already published
It is, update the extension
Waiting for server to validate extension package...
Sharing extension with fabrikam.

=== Completed operation: publish extension ===
 - Packaging: C:\vso-team-calendar\fabrikam.team-calendar-0.2.6.vsix
 - Publishing: success
 - Sharing: shared with fabrikam
Feedback
Was this page helpful?
Additional resources