Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Authenticate and authorize access to Azure OpenAI APIs using Azure API Management
Article
2025-04-01
1 contributor
In this article
APPLIES TO: All API Management tiers
In this article, you learn about ways to authenticate and authorize to Azure OpenAI API endpoints that are managed using Azure API Management. This article shows the following common methods:
Authentication- Authenticate to an Azure OpenAI API using policies that authenticate using either an API key or a Microsoft Entra ID managed identity.
Authentication- Authenticate to an Azure OpenAI API using policies that authenticate using either an API key or a Microsoft Entra ID managed identity.
Authorization- For more fine-grained access control, preauthorize requests that pass OAuth 2.0 tokens generated by an identity provider such as Microsoft Entra ID.
Authorization- For more fine-grained access control, preauthorize requests that pass OAuth 2.0 tokens generated by an identity provider such as Microsoft Entra ID.
For background, see:
Azure OpenAI Service REST API reference
Azure OpenAI Service REST API reference
Authentication and authorization to APIs in API Management.
Authentication and authorization to APIs in API Management.
Prerequisites
Before following the steps in this article, you must have:
An API Management instance. For example steps, seeCreate an Azure API Management instance.
An Azure OpenAI resource and model added to your API Management instance. For example steps, seeImport an Azure OpenAI API as a REST API.
Permissions to create an app registration in an identity provider such as a Microsoft Entra tenant associated with your Azure subscription (for OAuth 2.0 authorization).
Authenticate with API key
A default way to authenticate to an Azure OpenAI API is by using an API key. For this type of authentication, all API requests must include a valid API key in theapi-keyHTTP header.
api-key
API Management can manage the API key in a secure way, by using anamed value.
The named value can then be referenced in an API policy to set theapi-keyheader in requests to the Azure OpenAI API. We provide two examples of how to do this: one uses theset-backend-servicepolicy, and the other uses theset-headerpolicy.
api-key
set-backend-service
set-header
Store the API key in a named value
Obtain an API key from the Azure OpenAI resource. In the Azure portal, find a key on theKeys and Endpointpage of the Azure OpenAI resource.
Go to your API Management instance, and selectNamed valuesin the left menu.
Select+ Add, and add the value as a secret, or optionally for more security, use akey vault reference.
Pass the API key in API requests - set-backend-service policy
Create abackendthat points to the Azure OpenAI API.In the left menu of your API Management instance, selectBackends.Select+ Add, and enter a descriptive name for the backend. Example:openai-backend.UnderType, selectCustom, and enter the URL of the Azure OpenAI endpoint. Example:https://contoso.openai.azure.com/openai.UnderAuthorization credentials, selectHeaders, and enterapi-keyas the header name and the named value as the value.SelectCreate.
Create abackendthat points to the Azure OpenAI API.
In the left menu of your API Management instance, selectBackends.
Select+ Add, and enter a descriptive name for the backend. Example:openai-backend.
UnderType, selectCustom, and enter the URL of the Azure OpenAI endpoint. Example:https://contoso.openai.azure.com/openai.
https://contoso.openai.azure.com/openai
UnderAuthorization credentials, selectHeaders, and enterapi-keyas the header name and the named value as the value.
SelectCreate.
Add the followingset-backend-servicepolicy snippet in theinboundpolicy section to pass the API key in requests to the Azure OpenAI API.In this example, the backend resource isopenai-backend.<set-backend-service backend-id="openai-backend" />
Add the followingset-backend-servicepolicy snippet in theinboundpolicy section to pass the API key in requests to the Azure OpenAI API.
set-backend-service
inbound
In this example, the backend resource isopenai-backend.
<set-backend-service backend-id="openai-backend" />
<set-backend-service backend-id="openai-backend" />
Pass the API key in API requests - set-header policy
Alternatively, add the followingset-headerpolicy snippet in theinboundpolicy section to pass the API key in requests to the Azure OpenAI API. This policy snippet sets theapi-keyheader with the named value that you set up.
set-header
inbound
api-key
In this example, the named value in API Management isopenai-api-key.
<set-header name="api-key" exists-action="override">
    <value>{{openai-api-key}}</value>
</set-header>
<set-header name="api-key" exists-action="override">
    <value>{{openai-api-key}}</value>
</set-header>
Authenticate with managed identity
An alternative and recommended way to authenticate to an Azure OpenAI API is by using a managed identity in Microsoft Entra ID. For background, seeHow to configure Azure OpenAI Service with managed identity.
Following are steps to configure your API Management instance to use a managed identity to authenticate requests to an Azure OpenAI API.
Enablea system-assigned or user-assigned managed identity for your API Management instance. The following example assumes that you've enabled the instance's system-assigned managed identity.
Enablea system-assigned or user-assigned managed identity for your API Management instance. The following example assumes that you've enabled the instance's system-assigned managed identity.
Assign the managed identity theCognitive Services OpenAI Userrole, scoped to the appropriate resource. For example, assign the system-assigned managed identity theCognitive Services OpenAI Userrole on the Azure OpenAI resource. For detailed steps, seeRole-based access control for Azure OpenAI service.
Assign the managed identity theCognitive Services OpenAI Userrole, scoped to the appropriate resource. For example, assign the system-assigned managed identity theCognitive Services OpenAI Userrole on the Azure OpenAI resource. For detailed steps, seeRole-based access control for Azure OpenAI service.
Add the following policy snippet in theinboundpolicy section to authenticate requests to the Azure OpenAI API using the managed identity.In this example:Theauthentication-managed-identitypolicy obtains an access token for the managed identity.Theset-headerpolicy sets theAuthorizationheader of the request with the access token.<authentication-managed-identity resource="https://cognitiveservices.azure.com" output-token-variable-name="managed-id-access-token" ignore-error="false" /> 
<set-header name="Authorization" exists-action="override"> 
    <value>@("Bearer " + (string)context.Variables["managed-id-access-token"])</value> 
</set-header>
Add the following policy snippet in theinboundpolicy section to authenticate requests to the Azure OpenAI API using the managed identity.
inbound
In this example:
Theauthentication-managed-identitypolicy obtains an access token for the managed identity.
authentication-managed-identity
Theset-headerpolicy sets theAuthorizationheader of the request with the access token.
set-header
Authorization
<authentication-managed-identity resource="https://cognitiveservices.azure.com" output-token-variable-name="managed-id-access-token" ignore-error="false" /> 
<set-header name="Authorization" exists-action="override"> 
    <value>@("Bearer " + (string)context.Variables["managed-id-access-token"])</value> 
</set-header>
<authentication-managed-identity resource="https://cognitiveservices.azure.com" output-token-variable-name="managed-id-access-token" ignore-error="false" /> 
<set-header name="Authorization" exists-action="override"> 
    <value>@("Bearer " + (string)context.Variables["managed-id-access-token"])</value> 
</set-header>
Tip
An alternative to using theauthentication-managed-identityandset-headerpolicies shown in this example is to configure abackendresource that directs API requests to the Azure OpenAI Service endpoint. In the backend configuration, enable managed identity authentication to the Azure OpenAI Service. Azure API Management automates these steps when importing an API directly from Azure OpenAI Service. For more information, seeImport API from Azure OpenAI Service.
authentication-managed-identity
set-header
OAuth 2.0 authorization using identity provider
To enable more fine-grained access to OpenAPI APIs by particular users or clients, you can preauthorize access to the Azure OpenAI API using OAuth 2.0 authorization with Microsoft Entra ID or another identity provider. For background, seeProtect an API in Azure API Management using OAuth 2.0 authorization with Microsoft Entra ID.
Note
Use OAuth 2.0 authorization as part of a defense-in-depth strategy. It's not a replacement for API key authentication or managed identity authentication to an Azure OpenAI API.
Following are high level steps to restrict API access to users or apps that are authorized using an identity provider.
Create an application in your identity provider to represent the OpenAI API in Azure API Management. If you're using Microsoft Entra ID,registeran application in your Microsoft Entra ID tenant. Record details such as the application ID and the audience URI.As needed, configure the application to have roles or scopes that represent the fine-grained permissions needed to access the Azure OpenAI API.
Create an application in your identity provider to represent the OpenAI API in Azure API Management. If you're using Microsoft Entra ID,registeran application in your Microsoft Entra ID tenant. Record details such as the application ID and the audience URI.
As needed, configure the application to have roles or scopes that represent the fine-grained permissions needed to access the Azure OpenAI API.
Add aninboundpolicy snippet in your API Management instance to validate requests that present a JSON web token (JWT) in theAuthorizationheader. Place this snippetbeforeotherinboundpolicies that you set to authenticate to the Azure OpenAI API.NoteThe following examples show the general structure of the policies to validate a JWT. Customize them to your identity provider and the requirements of your application and API.validate-azure-ad-token- If you use Microsoft Entra ID, configure thevalidate-azure-ad-tokenpolicy to validate the audience and claims in the JWT. For details, see thepolicy reference.<validate-azure-ad-token tenant-id={{TENANT_ID}} header-name="Authorization" failed-validation-httpcode="401" failed-validation-error-message="Unauthorized. Access token is missing or invalid.">
    <client-application-ids>
            <application-id>{{CLIENT_APP_ID}}</application-id>
    </client-application-ids>
   <audiences>
        <audience>...</audience> 
    </audiences>
    <required-claims>
        <claim name=...>
            <value>...</value>
        </claim>
    </required-claims>
</validate-azure-ad-token>validate-jwt- If you use another identity provider, configure thevalidate-jwtpolicy to validate the audience and claims in the JWT. For details, see thepolicy reference.<validate-jwt header-name="Authorization" failed-validation-httpcode="401" failed-validation-error-message="Unauthorized. Access token is missing or invalid.">
    <openid-config url={{OPENID_CONFIGURATION_URL}} />
    <issuers>
        <issuer>{{ISSUER_URL}}</issuer>
    </issuers>
    <audiences>
        <audience>...</audience> 
    </audiences>
    <required-claims>
        <claim name=...>
            <value>...</value>
        </claim>
    </required-claims>
</validate-jwt>
Add aninboundpolicy snippet in your API Management instance to validate requests that present a JSON web token (JWT) in theAuthorizationheader. Place this snippetbeforeotherinboundpolicies that you set to authenticate to the Azure OpenAI API.
inbound
Authorization
inbound
Note
The following examples show the general structure of the policies to validate a JWT. Customize them to your identity provider and the requirements of your application and API.
validate-azure-ad-token- If you use Microsoft Entra ID, configure thevalidate-azure-ad-tokenpolicy to validate the audience and claims in the JWT. For details, see thepolicy reference.<validate-azure-ad-token tenant-id={{TENANT_ID}} header-name="Authorization" failed-validation-httpcode="401" failed-validation-error-message="Unauthorized. Access token is missing or invalid.">
    <client-application-ids>
            <application-id>{{CLIENT_APP_ID}}</application-id>
    </client-application-ids>
   <audiences>
        <audience>...</audience> 
    </audiences>
    <required-claims>
        <claim name=...>
            <value>...</value>
        </claim>
    </required-claims>
</validate-azure-ad-token>
validate-azure-ad-token- If you use Microsoft Entra ID, configure thevalidate-azure-ad-tokenpolicy to validate the audience and claims in the JWT. For details, see thepolicy reference.
validate-azure-ad-token
<validate-azure-ad-token tenant-id={{TENANT_ID}} header-name="Authorization" failed-validation-httpcode="401" failed-validation-error-message="Unauthorized. Access token is missing or invalid.">
    <client-application-ids>
            <application-id>{{CLIENT_APP_ID}}</application-id>
    </client-application-ids>
   <audiences>
        <audience>...</audience> 
    </audiences>
    <required-claims>
        <claim name=...>
            <value>...</value>
        </claim>
    </required-claims>
</validate-azure-ad-token>
<validate-azure-ad-token tenant-id={{TENANT_ID}} header-name="Authorization" failed-validation-httpcode="401" failed-validation-error-message="Unauthorized. Access token is missing or invalid.">
    <client-application-ids>
            <application-id>{{CLIENT_APP_ID}}</application-id>
    </client-application-ids>
   <audiences>
        <audience>...</audience> 
    </audiences>
    <required-claims>
        <claim name=...>
            <value>...</value>
        </claim>
    </required-claims>
</validate-azure-ad-token>
validate-jwt- If you use another identity provider, configure thevalidate-jwtpolicy to validate the audience and claims in the JWT. For details, see thepolicy reference.<validate-jwt header-name="Authorization" failed-validation-httpcode="401" failed-validation-error-message="Unauthorized. Access token is missing or invalid.">
    <openid-config url={{OPENID_CONFIGURATION_URL}} />
    <issuers>
        <issuer>{{ISSUER_URL}}</issuer>
    </issuers>
    <audiences>
        <audience>...</audience> 
    </audiences>
    <required-claims>
        <claim name=...>
            <value>...</value>
        </claim>
    </required-claims>
</validate-jwt>
validate-jwt- If you use another identity provider, configure thevalidate-jwtpolicy to validate the audience and claims in the JWT. For details, see thepolicy reference.
validate-jwt
<validate-jwt header-name="Authorization" failed-validation-httpcode="401" failed-validation-error-message="Unauthorized. Access token is missing or invalid.">
    <openid-config url={{OPENID_CONFIGURATION_URL}} />
    <issuers>
        <issuer>{{ISSUER_URL}}</issuer>
    </issuers>
    <audiences>
        <audience>...</audience> 
    </audiences>
    <required-claims>
        <claim name=...>
            <value>...</value>
        </claim>
    </required-claims>
</validate-jwt>
<validate-jwt header-name="Authorization" failed-validation-httpcode="401" failed-validation-error-message="Unauthorized. Access token is missing or invalid.">
    <openid-config url={{OPENID_CONFIGURATION_URL}} />
    <issuers>
        <issuer>{{ISSUER_URL}}</issuer>
    </issuers>
    <audiences>
        <audience>...</audience> 
    </audiences>
    <required-claims>
        <claim name=...>
            <value>...</value>
        </claim>
    </required-claims>
</validate-jwt>
Related content
Learn more aboutMicrosoft Entra ID and OAuth2.0.
Authenticate requests to Azure AI services
Protect Azure OpenAI keys with API Management
Feedback
Was this page helpful?
Additional resources