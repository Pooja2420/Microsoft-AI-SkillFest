Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
PublishToAzureServiceBus@2 - Publish To Azure Service Bus v2 task
Article
2025-03-28
1 contributor
In this article
Sends a message to Azure Service Bus using a service connection (no agent is required).
This version of the task supports Entra ID and Workload identity federation through itsAzure Resource Manager service connectioninput (azureSubscription). For more information, see the followingRemarkssection.
azureSubscription
Syntax
# Publish To Azure Service Bus v2
# Sends a message to Azure Service Bus using an Azure Resource Manager service connection (no agent is required).
- task: PublishToAzureServiceBus@2
  inputs:
    azureSubscription: # string. Alias: connectedServiceName. Required. Azure Resource Manager service connection. 
    serviceBusQueueName: # string. Required. Azure Service Bus Queue name. 
    serviceBusNamespace: # string. Required. Azure Service Bus Namespace. 
    #messageBody: # string. Message body. 
    #waitForCompletion: false # boolean. Wait for task completion. Default: false.
    #useDataContractSerializer: true # boolean. Use .NET data contract serializer. Default: true.
  # Advanced
    #sessionId: # string. Session Id. 
    #signPayload: false # boolean. Sign the Message. Default: false.
    #certificateString: # string. Required when signPayload = true. Certificate Variable. 
    #signatureKey: 'signature' # string. Optional. Use when signPayload = true. Signature Property Key. Default: signature.
# Publish To Azure Service Bus v2
# Sends a message to Azure Service Bus using an Azure Resource Manager service connection (no agent is required).
- task: PublishToAzureServiceBus@2
  inputs:
    azureSubscription: # string. Alias: connectedServiceName. Required. Azure Resource Manager service connection. 
    serviceBusQueueName: # string. Required. Azure Service Bus Queue name. 
    serviceBusNamespace: # string. Required. Azure Service Bus Namespace. 
    #messageBody: # string. Message body. 
    #waitForCompletion: false # boolean. Wait for task completion. Default: false.
    #useDataContractSerializer: true # boolean. Use .NET data contract serializer. Default: true.
  # Advanced
    #sessionId: # string. Session Id. 
    #signPayload: false # boolean. Sign the Message. Default: false.
    #certificateString: # string. Required when signPayload = true. Certificate Variable. 
    #signatureKey: 'signature' # string. Optional. Use when signPayload = true. Signature Property Key. Default: signature.
Inputs
azureSubscription-Azure Resource Manager service connectionInput alias:connectedServiceName.string. Required.
azureSubscription
connectedServiceName
string
Specifies anAzure Resource Manager service connection.
serviceBusQueueName-Azure Service Bus Queue namestring. Required.
serviceBusQueueName
string
Specify the name of the queue for which the message is intended.
serviceBusNamespace-Azure Service Bus Namespacestring. Required.
serviceBusNamespace
string
Specify the namespace of your Azure Service Bus.
messageBody-Message bodystring.
messageBody
string
Specifies the JSONmessageBody.
messageBody
sessionId-Session Idstring.
sessionId
string
Specifies the session ID with which the message is published. For session-based queues, the publishing fails if a value is not specified. For non session-based queues, a value does not need to be specified.
signPayload-Sign the Messageboolean. Default value:false.
signPayload
boolean
false
If set totrue, a private certificate will be added to the message.
true
certificateString-Certificate Variablestring. Required whensignPayload = true.
certificateString
string
signPayload = true
Specifies the secret variable that contains the certificate content. This can also be a certificate stored in an Azure key vault that islinkedto a variable group used by the release pipeline.
signatureKey-Signature Property Keystring. Optional. Use whensignPayload = true. Default value:signature.
signatureKey
string
signPayload = true
signature
In Message Properties, specifies the key where the signature is. If left empty, the default value issignature.
signature
waitForCompletion-Wait for task completionboolean. Default value:false.
waitForCompletion
boolean
false
If set totrue, this task will wait for the TaskCompleted event for the specified task timeout.
true
useDataContractSerializer-Use .NET data contract serializerboolean. Default value:true.
useDataContractSerializer
boolean
true
SetuseDataContractSerializertofalseif you want to pass your message as a stream instead of an object.
useDataContractSerializer
false
Task control options
All tasks have control options in addition to their task inputs. For more information, seeControl options and common task properties.
Output variables
None.
Remarks
Use this task in anagentless jobof a release pipeline to send a message to an Azure Service Bus using a service connection (without using an agent).
Note
Can only be used in anagentless jobof a release pipeline.
Access Azure Service Bus from Pipelines using Entra ID authentication
You can now useEntra ID authenticationto access Azure Service Bus from Azure Pipelines. This allows you to take advantage of Workload identity federation to remove secrets management and Azure RBAC for fine grained access control.
Identities accessing Azure Service Bus will need to be granted one of theAzure built-in roles for Azure Service Buson the Service Bus accessed.
ThePublishToAzureServiceBus@2task can be configured using an Azure Resource Manager service connection. Create anAzure Resource Manager service connectionand populate theserviceBusQueueNameandserviceBusNamespaceproperties of the task:
PublishToAzureServiceBus@2
serviceBusQueueName
serviceBusNamespace
- task: PublishToAzureServiceBus@2
  inputs:
    azureSubscription: my-azure-service-connection
    serviceBusQueueName: my-service-bus-queue
    serviceBusNamespace: my-service-bus-namespace
    useDataContractSerializer: false
    messageBody: |
      {
        "property": "value"
      }
- task: PublishToAzureServiceBus@2
  inputs:
    azureSubscription: my-azure-service-connection
    serviceBusQueueName: my-service-bus-queue
    serviceBusNamespace: my-service-bus-namespace
    useDataContractSerializer: false
    messageBody: |
      {
        "property": "value"
      }
Where should a task signal completion?
To signal completion, the external service should POST completion data to the following pipelines REST endpoint.
{planUri}/{projectId}/_apis/distributedtask/hubs/{hubName}/plans/{planId}/events?api-version=2.0-preview.1

**Request Body**
 { "name": "TaskCompleted", "taskId": "taskInstanceId", "jobId": "jobId", "result": "succeeded" }
{planUri}/{projectId}/_apis/distributedtask/hubs/{hubName}/plans/{planId}/events?api-version=2.0-preview.1

**Request Body**
 { "name": "TaskCompleted", "taskId": "taskInstanceId", "jobId": "jobId", "result": "succeeded" }
Seethis simple cmdline applicationfor specifics.
In addition, a C# helper library is available to enable live logging and managing the task status for agentless tasks. Learn more aboutAsync HTTP agentless tasks.
Requirements
Feedback
Was this page helpful?
Additional resources