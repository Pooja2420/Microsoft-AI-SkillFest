Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Distributed training with Azure Machine Learning
Article
2024-12-05
8 contributors
In this article
In this article, you learn about distributed training and how Azure Machine Learning supports it for deep learning models.
In distributed training, the workload to train a model is split up and shared among multiple mini processors, called worker nodes. These worker nodes work in parallel to speed up model training. Distributed training can be used for traditional machine learning models, but is better suited for compute and time intensive tasks, likedeep learningfor training deep neural networks.
Deep learning and distributed training
There are two main types of distributed training:data parallelismandmodel parallelism. For distributed training on deep learning models, theAzure Machine Learning SDK in Pythonsupports integrations with PyTorch and TensorFlow. Both are popular frameworks that employ data parallelism for distributed training, and can useHorovodto optimize compute speeds.
Distributed training with PyTorch
Distributed training with PyTorch
Distributed training with TensorFlow
Distributed training with TensorFlow
For machine learning models that don't require distributed training, seeTrain models with Azure Machine Learningfor different ways to train models using the Python SDK.
Data parallelism
Data parallelism is the easiest to implement of the two distributed training approaches, and is sufficient for most use cases.
In this approach, the data is divided into partitions, where the number of partitions is equal to the total number of available nodes, in the compute cluster orserverless compute. The model is copied in each of these worker nodes, and each node operates on its own subset of the data. Keep in mind that each node must have the capacity to support the model that's being trained, that is, the entire model has to fit on each node.
The following diagram shows this approach.

Each node independently computes the errors between its predictions for its training samples and the labeled outputs. In turn, each node updates its model based on the errors and must communicate all of its changes to the other nodes to update their corresponding models. Worker nodes need to synchronize the model parameters, or gradients, at the end of the batch computation to ensure they're training a consistent model.
Model parallelism
In model parallelism, also known as network parallelism, the model is segmented into different parts that can run concurrently in different nodes, and each one runs on the same data. The scalability of this method depends on the degree of task parallelization of the algorithm, and it's more complex to implement than data parallelism.
In model parallelism, worker nodes only need to synchronize the shared parameters, usually once for each forward or backward-propagation step. Also, larger models aren't a concern since each node operates on a subsection of the model on the same training data.
Related content
Artificial intelligence (AI) architecture design
Distributed GPU training guide
Feedback
Was this page helpful?
Additional resources