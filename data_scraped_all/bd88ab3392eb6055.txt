Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Configure managed identities with Microsoft Entra ID for your Azure Cosmos DB account
Article
2024-08-14
3 contributors
In this article
APPLIES TO:NoSQLMongoDBCassandraGremlinTable
Managed identities for Azure resources provide Azure services with an automatically managed identity in Microsoft Entra ID. This article shows how to create a managed identity for Azure Cosmos DB accounts.
Prerequisites
If you're unfamiliar with managed identities for Azure resources, seeWhat are managed identities for Azure resources?. To learn about managed identity types, seeManaged identity types.
To set up managed identities, your account needs to have theDocumentDB Account Contributor role.
Add a system-assigned identity
Using the Azure portal
To enable a system-assigned managed identity on an existing Azure Cosmos DB account, navigate to your account in the Azure portal and selectIdentityfrom the left menu.

Under theSystem assignedsection, flip theStatusto On and selectSave. You will be asked to confirm the creation of the system-assigned managed identity.

Once the identity has been created and assigned, you can retrieve its Object (principal) ID.

Using an Azure Resource Manager (ARM) template
Important
Make sure to use anapiVersionof2021-03-15or higher when working with managed identities.
apiVersion
2021-03-15
To enable a system-assigned identity on a new or existing Azure Cosmos DB account, include the following property in the resource definition:
"identity": {
    "type": "SystemAssigned"
}
"identity": {
    "type": "SystemAssigned"
}
Theresourcessection of your ARM template should then look like the following:
resources
"resources": [
    {
        "type": " Microsoft.DocumentDB/databaseAccounts",
        "identity": {
            "type": "SystemAssigned"
        },
        // ...
    },
    // ...
]
"resources": [
    {
        "type": " Microsoft.DocumentDB/databaseAccounts",
        "identity": {
            "type": "SystemAssigned"
        },
        // ...
    },
    // ...
]
Once your Azure Cosmos DB account has been created or updated, it will show the following property:
"identity": {
    "type": "SystemAssigned",
    "tenantId": "<azure-ad-tenant-id>",
    "principalId": "<azure-ad-principal-id>"
}
"identity": {
    "type": "SystemAssigned",
    "tenantId": "<azure-ad-tenant-id>",
    "principalId": "<azure-ad-principal-id>"
}
Using the Azure CLI
To enable a system-assigned identity while creating a new Azure Cosmos DB account, add the--assign-identityoption:
--assign-identity
resourceGroupName='myResourceGroup'
accountName='mycosmosaccount'

az cosmosdb create \
    -n $accountName \
    -g $resourceGroupName \
    --locations regionName='West US 2' failoverPriority=0 isZoneRedundant=False \
    --assign-identity
resourceGroupName='myResourceGroup'
accountName='mycosmosaccount'

az cosmosdb create \
    -n $accountName \
    -g $resourceGroupName \
    --locations regionName='West US 2' failoverPriority=0 isZoneRedundant=False \
    --assign-identity
You can also add a system-assigned identity on an existing account using theaz cosmosdb identity assigncommand:
az cosmosdb identity assign
resourceGroupName='myResourceGroup'
accountName='mycosmosaccount'

az cosmosdb identity assign \
    -n $accountName \
    -g $resourceGroupName
resourceGroupName='myResourceGroup'
accountName='mycosmosaccount'

az cosmosdb identity assign \
    -n $accountName \
    -g $resourceGroupName
Once your Azure Cosmos DB account has been created or updated, you can fetch the identity assigned with theaz cosmosdb identity showcommand:
az cosmosdb identity show
resourceGroupName='myResourceGroup'
accountName='mycosmosaccount'

az cosmosdb identity show \
    -n $accountName \
    -g $resourceGroupName
resourceGroupName='myResourceGroup'
accountName='mycosmosaccount'

az cosmosdb identity show \
    -n $accountName \
    -g $resourceGroupName
{
    "type": "SystemAssigned",
    "tenantId": "<azure-ad-tenant-id>",
    "principalId": "<azure-ad-principal-id>"
}
{
    "type": "SystemAssigned",
    "tenantId": "<azure-ad-tenant-id>",
    "principalId": "<azure-ad-principal-id>"
}
Add a user-assigned identity
Using the Azure portal
To enable a user-assigned managed identity on an existing Azure Cosmos DB account, navigate to your account in the Azure portal and selectIdentityfrom the left menu.

Under theuser assignedsection, select+ Add.

Find and select all the identities you wish to assign to your Azure Cosmos DB account, then selectAdd.

Using an Azure Resource Manager (ARM) template
Important
Make sure to use anapiVersionof2021-03-15or higher when working with managed identities.
apiVersion
2021-03-15
To enable a user-assigned identity on a new or existing Azure Cosmos DB account, include the following property in the resource definition:
"identity": {
    "type": "UserAssigned",
    "userAssignedIdentities": {
        "<identity-resource-id>": {}
    }
}
"identity": {
    "type": "UserAssigned",
    "userAssignedIdentities": {
        "<identity-resource-id>": {}
    }
}
Theresourcessection of your ARM template should then look like the following:
resources
"resources": [
    {
        "type": " Microsoft.DocumentDB/databaseAccounts",
        "identity": {
            "type": "UserAssigned",
            "userAssignedIdentities": {
                "<identity-resource-id>": {}
            }
        },
        // ...
    },
    // ...
]
"resources": [
    {
        "type": " Microsoft.DocumentDB/databaseAccounts",
        "identity": {
            "type": "UserAssigned",
            "userAssignedIdentities": {
                "<identity-resource-id>": {}
            }
        },
        // ...
    },
    // ...
]
After your Azure Cosmos DB account has been created or updated, it will show the following property:
"identity": {
    "type": "UserAssigned",
    "tenantId": "<azure-ad-tenant-id>",
    "principalId": "<azure-ad-principal-id>"
}
"identity": {
    "type": "UserAssigned",
    "tenantId": "<azure-ad-tenant-id>",
    "principalId": "<azure-ad-principal-id>"
}
Using the Azure CLI
To enable a user-assigned identity while creating a new Azure Cosmos DB account, add the--assign-identityoption and pass the resource ID of the identity you wish to assign:
--assign-identity
resourceGroupName='myResourceGroup'
accountName='mycosmosaccount'

az cosmosdb create \
    -n $accountName \
    -g $resourceGroupName \
    --locations regionName='West US 2' failoverPriority=0 isZoneRedundant=False \
    --assign-identity <identity-resource-id>
resourceGroupName='myResourceGroup'
accountName='mycosmosaccount'

az cosmosdb create \
    -n $accountName \
    -g $resourceGroupName \
    --locations regionName='West US 2' failoverPriority=0 isZoneRedundant=False \
    --assign-identity <identity-resource-id>
You can also add a user-assigned identity on an existing account using theaz cosmosdb identity assigncommand:
az cosmosdb identity assign
resourceGroupName='myResourceGroup'
accountName='mycosmosaccount'

az cosmosdb identity assign \
    -n $accountName \
    -g $resourceGroupName
    --identities <identity-resource-id>
resourceGroupName='myResourceGroup'
accountName='mycosmosaccount'

az cosmosdb identity assign \
    -n $accountName \
    -g $resourceGroupName
    --identities <identity-resource-id>
After your Azure Cosmos DB account has been created or updated, you can fetch the identity assigned with theaz cosmosdb identity showcommand:
az cosmosdb identity show
resourceGroupName='myResourceGroup'
accountName='mycosmosaccount'

az cosmosdb identity show \
    -n $accountName \
    -g $resourceGroupName
resourceGroupName='myResourceGroup'
accountName='mycosmosaccount'

az cosmosdb identity show \
    -n $accountName \
    -g $resourceGroupName
{
    "type": "UserAssigned",
    "tenantId": "<azure-ad-tenant-id>",
    "principalId": "<azure-ad-principal-id>"
}
{
    "type": "UserAssigned",
    "tenantId": "<azure-ad-tenant-id>",
    "principalId": "<azure-ad-principal-id>"
}
Remove a system-assigned or user-assigned identity
Using an Azure Resource Manager (ARM) template
Important
Make sure to use anapiVersionof2021-03-15or higher when working with managed identities.
apiVersion
2021-03-15
To remove a system-assigned identity from your Azure Cosmos DB account, set thetypeof theidentityproperty toNone:
type
identity
None
"identity": {
    "type": "None"
}
"identity": {
    "type": "None"
}
Using the Azure CLI
To remove all managed identities from your Azure Cosmos DB account, use theaz cosmosdb identity removecommand:
az cosmosdb identity remove
resourceGroupName='myResourceGroup'
accountName='mycosmosaccount'

az cosmosdb identity remove \
    -n $accountName \
    -g $resourceGroupName
resourceGroupName='myResourceGroup'
accountName='mycosmosaccount'

az cosmosdb identity remove \
    -n $accountName \
    -g $resourceGroupName
Next steps
Tutorial: Store and use Azure Cosmos DB credentials with Azure Key Vault
Learn more aboutmanaged identities for Azure resources
Learn more aboutcustomer-managed keys on Azure Cosmos DB
Feedback
Was this page helpful?
Additional resources