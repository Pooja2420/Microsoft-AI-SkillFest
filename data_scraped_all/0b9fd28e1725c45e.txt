Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Quickstart: Audit Azure security baseline for Linux with a test machine
Article
2025-03-06
2 contributors
In this article

In this guide, you will use Azure Policy to audit a test Virtual Machine (VM) against the Azure security baseline for Linux.
Specifically, you will:
Create an emptyresource group
Assign the auditpolicyto the empty resource group
Create aVMin the resource group and observe the audit results
Tip
If you would like to try theaudit-and-configure(remediate) experience rather than the audit-only experience, seeQuickstart: Configure Azure security baseline for Linux with a test machine
For background on the Azure security baseline for Linux including, seeWhat is the Azure security baseline for Linux?.
Prerequisites
Before attempting the steps in this article:
You will need an Azure account to create a resource group, policy assignment, and a virtual machine. If you don't have an Azure account, you cancreate a free trial.
You will need an Azure account to create a resource group, policy assignment, and a virtual machine. If you don't have an Azure account, you cancreate a free trial.
Choose how you will access your Azure environment, for example:EASY: Azure Cloud Shell athttps://shell.azure.comOR: Use your own workstation and shell environment with Azure CLI installed and signed inOR: Use the Azure portal athttps://portal.azure.com
Choose how you will access your Azure environment, for example:
EASY: Azure Cloud Shell athttps://shell.azure.com
OR: Use your own workstation and shell environment with Azure CLI installed and signed in
OR: Use the Azure portal athttps://portal.azure.com
Ensure that you are signed in to your desired Azure test environmentAzure CLIAzure portalYou can useaz account showto see your current context. To sign in or change contexts, useaz account login.Use the account information in the portal to see your current context.
Ensure that you are signed in to your desired Azure test environment
Azure CLI
Azure portal
You can useaz account showto see your current context. To sign in or change contexts, useaz account login.
az account show
az account login
Use the account information in the portal to see your current context.

Step 1: Create a resource group
Tip
The use of "East US" (eastus) as an example location throughout this article is arbitrary. You can choose any available Azure location.
eastus
Azure CLI
Azure portal
az group create --name my-demo-rg --location eastus
az group create --name my-demo-rg --location eastus
From the Azure portal, browse toResource groups
Select+ Create
Choose a name and region, such as "my-demo-rg" and "East US"
Proceed toReview + create
Step 2: Assign the policy to your empty test resource group
Azure CLI
Azure portal
# Note this example is from a bash shell. Other shells may require different handling of special characters and variables
RG_ID=$(az group show --resource-group my-demo-rg --query id --output tsv)
az policy assignment create --policy "fc9b3da7-8347-4380-8e70-0a0361d8dedd" --display-name "Linux machines should meet requirements for the Azure compute security baseline" --scope "$RG_ID"
# Note this example is from a bash shell. Other shells may require different handling of special characters and variables
RG_ID=$(az group show --resource-group my-demo-rg --query id --output tsv)
az policy assignment create --policy "fc9b3da7-8347-4380-8e70-0a0361d8dedd" --display-name "Linux machines should meet requirements for the Azure compute security baseline" --scope "$RG_ID"
In the Azure portal search bar, type Policy and selectPolicyfrom the Services results.
From the Azure Policy overview, navigate toAuthoring>Definitions.
In the list of available definitions, search for "Linux machines should" and selectLinux machines should meet requirements for the Azure compute security baseline.
From the Policy definition page, select theAssign policybutton to enter the policy assignment workflow.
Basicstab:Scope: Select your test resource group (for example, my-demo-rg)Take carenotto select the entire subscription or the wrong resource groupPolicy definition: Should already be filled withLinux machines should meet requirements for the Azure compute security baselineNote that several other fields including assignment name and version will auto-populate.
Scope: Select your test resource group (for example, my-demo-rg)Take carenotto select the entire subscription or the wrong resource group
Take carenotto select the entire subscription or the wrong resource group
Policy definition: Should already be filled withLinux machines should meet requirements for the Azure compute security baseline
Note that several other fields including assignment name and version will auto-populate.
Proceed to review and create the assignment
Optional: You will now be back at the policy definition page. If you would like you see the policy assignment you just created, navigate to the Assignments tab.
Step 3: Create a test VM and prepare it for Machine Configuration
Azure CLI
Azure portal
Create a Linux VM with a system assigned identityaz vm create --name my-demo-vm-01 --resource-group my-demo-rg --image Ubuntu2204 --assign-identity [system] --size Standard_B2sTipIt is normal to receive an alert similar to"No access was given yet...". Azure Machine Configuration requires only that the machinehavea managed identity, not any specific resource access.
Create a Linux VM with a system assigned identity
az vm create --name my-demo-vm-01 --resource-group my-demo-rg --image Ubuntu2204 --assign-identity [system] --size Standard_B2s
az vm create --name my-demo-vm-01 --resource-group my-demo-rg --image Ubuntu2204 --assign-identity [system] --size Standard_B2s
Tip
It is normal to receive an alert similar to"No access was given yet...". Azure Machine Configuration requires only that the machinehavea managed identity, not any specific resource access.
Install the Machine Configuration agent, as an Azure VM extensionaz vm extension set --resource-group my-demo-rg --vm-name my-demo-vm-01 --name ConfigurationForLinux --publisher Microsoft.GuestConfiguration --enable-auto-upgrade
Install the Machine Configuration agent, as an Azure VM extension
az vm extension set --resource-group my-demo-rg --vm-name my-demo-vm-01 --name ConfigurationForLinux --publisher Microsoft.GuestConfiguration --enable-auto-upgrade
az vm extension set --resource-group my-demo-rg --vm-name my-demo-vm-01 --name ConfigurationForLinux --publisher Microsoft.GuestConfiguration --enable-auto-upgrade
Tip
The choice of Ubuntu in this example is arbitrary. For information on compatible distros, seeWhat is the Azure security baseline for Linux?.
Create a Linux virtual machine, with the following choices:Virtual machine name: my-demo-vm-01Resource group: The empty resource group created earlier, e.g.,my-demo-rgImage: Ubuntu Server 22.04 LTS - x64 Gen2VM architecture: x64VM size: Your choice, but note that smaller B-series VM sizes such as Standard_B2s can be a cost-effective option for testing
Create a Linux virtual machine, with the following choices:
Virtual machine name: my-demo-vm-01
Resource group: The empty resource group created earlier, e.g.,my-demo-rg
Image: Ubuntu Server 22.04 LTS - x64 Gen2
VM architecture: x64
VM size: Your choice, but note that smaller B-series VM sizes such as Standard_B2s can be a cost-effective option for testing

After VM creation, update the VM to work with Machine Configuration:Add a system assigned identity, if not already presentAdd the Machine Configuration extension (labeled in portal asAzure Automanage Machine Configuration)
After VM creation, update the VM to work with Machine Configuration:
Add a system assigned identity, if not already present
Add the Machine Configuration extension (labeled in portal asAzure Automanage Machine Configuration)

Tip
The managed identity and Machine Configuration extension steps were performed manually in this guide to reduce waiting and to reduce context changes. At scale, these can be satisfied using theDeploy prerequisites to enable Guest Configuration policies on virtual machinesbuilt-in policy initiative.
Step 4: Take a break before proceeding
Several steps will now happen automatically. Each of these steps can take a few minutes. Accordingly, please wait atleast 15 minutesbefore proceeding.
Step 5: Observe results
The following examples show how to get:
Count of machines by compliance state (useful at production scales, where you might have thousands of machines)
List of machines with compliance state for each
Detailed list of baseline rules with compliance state and evidence (also known asReasons) for each
Tip
Expect to see rednon-compliantresults in the following. The audit-only use case is about discovering the difference between existing systems and the Azure security baseline.
Azure CLI
Azure portal
The following Azure CLI examples are from abashenvironment. To use another shell environment, you might need to adjust examples for line ending behavior, quote rules, character escaping, and so on.
Count of machines by compliance state:QUERY='
// Returns one record per observed compliance status bucket, with machine counts for each
guestconfigurationresources
| where name contains "AzureLinuxBaseline"
| extend ["> ComplianceStatus"] = tostring(properties.complianceStatus)
| summarize MachineCount = count() by ["> ComplianceStatus"]'
az graph query --graph-query "$QUERY" --query data --output yamlc
Count of machines by compliance state:
QUERY='
// Returns one record per observed compliance status bucket, with machine counts for each
guestconfigurationresources
| where name contains "AzureLinuxBaseline"
| extend ["> ComplianceStatus"] = tostring(properties.complianceStatus)
| summarize MachineCount = count() by ["> ComplianceStatus"]'
az graph query --graph-query "$QUERY" --query data --output yamlc
QUERY='
// Returns one record per observed compliance status bucket, with machine counts for each
guestconfigurationresources
| where name contains "AzureLinuxBaseline"
| extend ["> ComplianceStatus"] = tostring(properties.complianceStatus)
| summarize MachineCount = count() by ["> ComplianceStatus"]'
az graph query --graph-query "$QUERY" --query data --output yamlc
List of machines with compliance state for each:QUERY='
// returns one record per machine, with status
guestconfigurationresources
| where name contains "AzureLinuxBaseline"
| project ["> Machine"] = split(properties.targetResourceId,"/")[-1],
  ComplianceStatus = properties.complianceStatus,
  LastComplianceCheck = properties.lastComplianceStatusChecked'
az graph query --graph-query "$QUERY" --query data --output yamlc
List of machines with compliance state for each:
QUERY='
// returns one record per machine, with status
guestconfigurationresources
| where name contains "AzureLinuxBaseline"
| project ["> Machine"] = split(properties.targetResourceId,"/")[-1],
  ComplianceStatus = properties.complianceStatus,
  LastComplianceCheck = properties.lastComplianceStatusChecked'
az graph query --graph-query "$QUERY" --query data --output yamlc
QUERY='
// returns one record per machine, with status
guestconfigurationresources
| where name contains "AzureLinuxBaseline"
| project ["> Machine"] = split(properties.targetResourceId,"/")[-1],
  ComplianceStatus = properties.complianceStatus,
  LastComplianceCheck = properties.lastComplianceStatusChecked'
az graph query --graph-query "$QUERY" --query data --output yamlc
Detailed list of baseline rules with compliance state and evidence (also known asReasons) for each:QUERY='
// Returns one record per baseline rule (around 200 per machine) with status for each
GuestConfigurationResources
| where name contains "AzureLinuxBaseline"
| project Report = properties.latestAssignmentReport,
  Machine = split(properties.targetResourceId,"/")[-1],
  LastComplianceCheck=properties.lastComplianceStatusChecked
| mv-expand Report.resources
| project ["> Machine"] = Machine,
  ["> Rule"] = Report_resources.resourceId,
  RuleComplianceStatus = Report_resources.complianceStatus,
  RuleComplianceReason = Report_resources.reasons[0].phrase,
  LastComplianceCheck'

az graph query --graph-query "$QUERY" --query data --output yamlc
Detailed list of baseline rules with compliance state and evidence (also known asReasons) for each:
QUERY='
// Returns one record per baseline rule (around 200 per machine) with status for each
GuestConfigurationResources
| where name contains "AzureLinuxBaseline"
| project Report = properties.latestAssignmentReport,
  Machine = split(properties.targetResourceId,"/")[-1],
  LastComplianceCheck=properties.lastComplianceStatusChecked
| mv-expand Report.resources
| project ["> Machine"] = Machine,
  ["> Rule"] = Report_resources.resourceId,
  RuleComplianceStatus = Report_resources.complianceStatus,
  RuleComplianceReason = Report_resources.reasons[0].phrase,
  LastComplianceCheck'

az graph query --graph-query "$QUERY" --query data --output yamlc
QUERY='
// Returns one record per baseline rule (around 200 per machine) with status for each
GuestConfigurationResources
| where name contains "AzureLinuxBaseline"
| project Report = properties.latestAssignmentReport,
  Machine = split(properties.targetResourceId,"/")[-1],
  LastComplianceCheck=properties.lastComplianceStatusChecked
| mv-expand Report.resources
| project ["> Machine"] = Machine,
  ["> Rule"] = Report_resources.resourceId,
  RuleComplianceStatus = Report_resources.complianceStatus,
  RuleComplianceReason = Report_resources.reasons[0].phrase,
  LastComplianceCheck'

az graph query --graph-query "$QUERY" --query data --output yamlc
The video is included to give an overall sense of workflow. For query details, rely on the text in this article.
Navigate to the Azure Policy overview page
Click "Compliance" in the left navigation
Click on yourLinux machines should ...policy assignment
Note that this page provides both of:Count of machines by compliance stateList of machines with compliance state for each
Count of machines by compliance state
List of machines with compliance state for each
When you are ready to see a detailed list of baseline rules with compliance state and evidence, do the following:In the list of machines (shown underResource compliance) select the name of your test machineClick onView resourceto go to the machine overview pageIn the left navigation, find and selectConfiguration managementIn the list of configurations, select the configuration whose name starts withAzureLinuxBaseline...In the configuration details view, use the filter drop-down toSelect allif you would like to see both compliance and non-compliant rules
In the list of machines (shown underResource compliance) select the name of your test machine
Click onView resourceto go to the machine overview page
In the left navigation, find and selectConfiguration management
In the list of configurations, select the configuration whose name starts withAzureLinuxBaseline...
In the configuration details view, use the filter drop-down toSelect allif you would like to see both compliance and non-compliant rules
Optional: Add more test machines to experience scale
In this article, the policy was assigned to a resource group which was initially empty and then gained one VM. While this demonstrates the system working end-to-end, it doesn't provide a sense of at-scale operations with lists of machines and so on.
Consider adding more test machines to the resource group, whether manually or via automation. These machines could be Azure VMs or Arc-enabled machines. As you see those machines come into compliance (or even fail), you can gain a keener sense of operationalizing Azure security baseline at scale.
Clean up resources
To avoid ongoing charges, consider deleting the resource group used in this article. For example, the Azure CLI command would beaz group delete --name "my-demo-rg".
az group delete --name "my-demo-rg"
Related content
To provide feedback, discuss feature requests, etc. contact:linux_sec_config_mgmt@service.microsoft.com
Read about thelaunch blogannounced at Ignite 2024
Additional resources