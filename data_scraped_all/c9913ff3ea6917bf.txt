Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Create and use a volume with Azure Files in Azure Kubernetes Service (AKS)
Article
2025-04-25
17 contributors
In this article
A persistent volume represents a piece of storage that has been provisioned for use with Kubernetes pods. You can use a persistent volume with one or many pods, and it can be dynamically or statically provisioned. If multiple pods need concurrent access to the same storage volume, you can use Azure Files to connect using theServer Message Block (SMB) protocol. This article shows you how to dynamically create an Azure file share for use by multiple pods in an Azure Kubernetes Service (AKS) cluster.
This article shows you how to:
Work with a dynamic persistent volume (PV) by installing the Container Storage Interface (CSI) driver and dynamically creating one or more Azure file shares to attach to a pod.
Work with a static PV by creating one or more Azure file shares, or use an existing one and attach it to a pod.
For more information on Kubernetes volumes, seeStorage options for applications in AKS.
Before you begin
You need an Azurestorage account.
Make sure you have Azure CLI version 2.0.59 or later installed and configured. Runaz --versionto find the version. If you need to install or upgrade, seeInstall Azure CLI.
az --version
When choosing between standard and premium file shares, it's important you understand the provisioning model and requirements of the expected usage pattern you plan to run on Azure Files. For more information, seeChoosing an Azure Files performance tier based on usage patterns.
Dynamically provision a volume
This section provides guidance for cluster administrators who want to provision one or more persistent volumes that include details of one or more shares on Azure Files. A persistent volume claim (PVC) uses the storage class object to dynamically provision an Azure Files file share.
Storage class parameters for dynamic PersistentVolumes
The following table includes parameters you can use to define a custom storage class for your PersistentVolumeClaim.
Hot
Cool
Premium
102400
true
false
false
true
false
false
true
false
false
eastus
true
false
false
privateEndpoint
privateEndpoint
smb
nfs
smb
true
false
false
true
false
false
accountname.privatelink.file.core.windows.net
accountname.file.core.windows.net
TransactionOptimized
Hot
Cool
storageAccountType
Standard_LRS
Standard_ZRS
Standard_GRS
Standard_RAGRS
Standard_RAGZRS
Premium_LRS
Premium_ZRS
Standard_LRS
core.windows.net
core.chinacloudapi.cn
core.windows.net
resourceGroup
true
false
false
true
secretNamespace
default
kube-system
csi.storage.k8s.io/pvc/namespace
true
false
false
0777
0
chmod
0777
NoRootSquash
AllSquash
NoRootSquash
RootSquash
securityContext.fsGroupChangePolicy
OnRootMismatch
Always
None
OnRootMismatch
subnetName
vnetResourceGroup
1If the storage account is created by the driver, then you only need to specifynetworkEndpointType: privateEndpointparameter in storage class. The CSI driver creates the private endpoint and private DNS zone (namedprivatelink.file.core.windows.net) together with the account. If you bring your own storage account, then you need tocreate the private endpointfor the storage account.
networkEndpointType: privateEndpoint
privatelink.file.core.windows.net
Create a storage class
Storage classes define how to create an Azure file share. A storage account is automatically created in thenode resource groupfor use with the storage class to hold the Azure Files file share. Choose of the followingAzure storage redundancy SKUsforskuName:
skuName
Standard_LRS: Standard locally redundant storage (LRS)
Standard_LRS
Standard_GRS: Standard geo-redundant storage (GRS)
Standard_GRS
Standard_ZRS: Standard zone redundant storage (ZRS)
Standard_ZRS
Standard_RAGRS: Standard read-access geo-redundant storage (RA-GRS)
Standard_RAGRS
Premium_LRS: Premium locally redundant storage (LRS)
Premium_LRS
Premium_ZRS: Premium zone redundant storage (ZRS)
Premium_ZRS
Note
Minimum premium file share is 100GB.
For more information on Kubernetes storage classes for Azure Files, seeKubernetes Storage Classes.
Create a file namedazure-file-sc.yamland copy in the following example manifest. For more information onmountOptions, see theMount optionssection.kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: my-azurefile
provisioner: file.csi.azure.com # replace with "kubernetes.io/azure-file" if aks version is less than 1.21
allowVolumeExpansion: true
mountOptions:
 - dir_mode=0777
 - file_mode=0777
 - uid=0
 - gid=0
 - mfsymlinks
 - cache=strict
 - actimeo=30
 - nobrl  # disable sending byte range lock requests to the server and for applications which have challenges with posix locks
parameters:
  skuName: Premium_LRS
Create a file namedazure-file-sc.yamland copy in the following example manifest. For more information onmountOptions, see theMount optionssection.
azure-file-sc.yaml
mountOptions
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: my-azurefile
provisioner: file.csi.azure.com # replace with "kubernetes.io/azure-file" if aks version is less than 1.21
allowVolumeExpansion: true
mountOptions:
 - dir_mode=0777
 - file_mode=0777
 - uid=0
 - gid=0
 - mfsymlinks
 - cache=strict
 - actimeo=30
 - nobrl  # disable sending byte range lock requests to the server and for applications which have challenges with posix locks
parameters:
  skuName: Premium_LRS
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: my-azurefile
provisioner: file.csi.azure.com # replace with "kubernetes.io/azure-file" if aks version is less than 1.21
allowVolumeExpansion: true
mountOptions:
 - dir_mode=0777
 - file_mode=0777
 - uid=0
 - gid=0
 - mfsymlinks
 - cache=strict
 - actimeo=30
 - nobrl  # disable sending byte range lock requests to the server and for applications which have challenges with posix locks
parameters:
  skuName: Premium_LRS
Create the storage class using thekubectl applycommand.kubectl apply -f azure-file-sc.yaml
Create the storage class using thekubectl applycommand.
kubectl apply
kubectl apply -f azure-file-sc.yaml
kubectl apply -f azure-file-sc.yaml
Create a persistent volume claim
A persistent volume claim (PVC) uses the storage class object to dynamically provision an Azure file share. You can use the following YAML to create a persistent volume claim100 GBin size withReadWriteManyaccess. For more information on access modes, seeKubernetes persistent volume.
Create a file namedazure-file-pvc.yamland copy in the following YAML. Make sure thestorageClassNamematches the storage class you created in the previous step.apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: my-azurefile
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: my-azurefile
  resources:
    requests:
      storage: 100GiNoteIf using thePremium_LRSSKU for your storage class, the minimum value forstoragemust be100Gi.
Create a file namedazure-file-pvc.yamland copy in the following YAML. Make sure thestorageClassNamematches the storage class you created in the previous step.
azure-file-pvc.yaml
storageClassName
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: my-azurefile
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: my-azurefile
  resources:
    requests:
      storage: 100Gi
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: my-azurefile
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: my-azurefile
  resources:
    requests:
      storage: 100Gi
Note
If using thePremium_LRSSKU for your storage class, the minimum value forstoragemust be100Gi.
Premium_LRS
storage
100Gi
Create the persistent volume claim using thekubectl applycommand.kubectl apply -f azure-file-pvc.yamlOnce completed, the file share is created. A Kubernetes secret is also created that includes connection information and credentials. You can use thekubectl getcommand to view the status of the PVC:kubectl get pvc my-azurefileThe output of the command resembles the following example:NAME           STATUS    VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS      AGE
my-azurefile   Bound     pvc-8436e62e-a0d9-11e5-8521-5a8664dc0477   100Gi       RWX            my-azurefile      5m
Create the persistent volume claim using thekubectl applycommand.
kubectl apply
kubectl apply -f azure-file-pvc.yaml
kubectl apply -f azure-file-pvc.yaml
Once completed, the file share is created. A Kubernetes secret is also created that includes connection information and credentials. You can use thekubectl getcommand to view the status of the PVC:
kubectl get
kubectl get pvc my-azurefile
kubectl get pvc my-azurefile
The output of the command resembles the following example:
NAME           STATUS    VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS      AGE
my-azurefile   Bound     pvc-8436e62e-a0d9-11e5-8521-5a8664dc0477   100Gi       RWX            my-azurefile      5m
NAME           STATUS    VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS      AGE
my-azurefile   Bound     pvc-8436e62e-a0d9-11e5-8521-5a8664dc0477   100Gi       RWX            my-azurefile      5m
Use the persistent volume
The following YAML creates a pod that uses the persistent volume claimmy-azurefileto mount the Azure Files file share at the/mnt/azurepath. For Windows Server containers, specify amountPathusing the Windows path convention, such as'D:'.
mountPath
Create a file namedazure-pvc-files.yaml, and copy in the following YAML. Make sure theclaimNamematches the PVC you created in the previous step.kind: Pod
apiVersion: v1
metadata:
  name: mypod
spec:
  containers:
    - name: mypod
      image: mcr.microsoft.com/oss/nginx/nginx:1.15.5-alpine
      resources:
        requests:
          cpu: 100m
          memory: 128Mi
        limits:
          cpu: 250m
          memory: 256Mi
      volumeMounts:
        - mountPath: /mnt/azure
          name: volume
          readOnly: false
  volumes:
   - name: volume
     persistentVolumeClaim:
       claimName: my-azurefile
Create a file namedazure-pvc-files.yaml, and copy in the following YAML. Make sure theclaimNamematches the PVC you created in the previous step.
azure-pvc-files.yaml
claimName
kind: Pod
apiVersion: v1
metadata:
  name: mypod
spec:
  containers:
    - name: mypod
      image: mcr.microsoft.com/oss/nginx/nginx:1.15.5-alpine
      resources:
        requests:
          cpu: 100m
          memory: 128Mi
        limits:
          cpu: 250m
          memory: 256Mi
      volumeMounts:
        - mountPath: /mnt/azure
          name: volume
          readOnly: false
  volumes:
   - name: volume
     persistentVolumeClaim:
       claimName: my-azurefile
kind: Pod
apiVersion: v1
metadata:
  name: mypod
spec:
  containers:
    - name: mypod
      image: mcr.microsoft.com/oss/nginx/nginx:1.15.5-alpine
      resources:
        requests:
          cpu: 100m
          memory: 128Mi
        limits:
          cpu: 250m
          memory: 256Mi
      volumeMounts:
        - mountPath: /mnt/azure
          name: volume
          readOnly: false
  volumes:
   - name: volume
     persistentVolumeClaim:
       claimName: my-azurefile
Create the pod using thekubectl applycommand.kubectl apply -f azure-pvc-files.yamlYou now have a running pod with your Azure Files file share mounted in the/mnt/azuredirectory. This configuration can be seen when inspecting your pod using thekubectl describecommand. The following condensed example output shows the volume mounted in the container.Containers:
  mypod:
    Container ID:   docker://053bc9c0df72232d755aa040bfba8b533fa696b123876108dec400e364d2523e
    Image:          mcr.microsoft.com/oss/nginx/nginx:1.15.5-alpine
    Image ID:       docker-pullable://nginx@sha256:d85914d547a6c92faa39ce7058bd7529baacab7e0cd4255442b04577c4d1f424
    State:          Running
      Started:      Fri, 01 Mar 2019 23:56:16 +0000
    Ready:          True
    Mounts:
      /mnt/azure from volume (rw)
      /var/run/secrets/kubernetes.io/serviceaccount from default-token-8rv4z (ro)
[...]
Volumes:
  volume:
    Type:       PersistentVolumeClaim (a reference to a PersistentVolumeClaim in the same namespace)
    ClaimName:  my-azurefile
    ReadOnly:   false
[...]
Create the pod using thekubectl applycommand.
kubectl apply
kubectl apply -f azure-pvc-files.yaml
kubectl apply -f azure-pvc-files.yaml
You now have a running pod with your Azure Files file share mounted in the/mnt/azuredirectory. This configuration can be seen when inspecting your pod using thekubectl describecommand. The following condensed example output shows the volume mounted in the container.
kubectl describe
Containers:
  mypod:
    Container ID:   docker://053bc9c0df72232d755aa040bfba8b533fa696b123876108dec400e364d2523e
    Image:          mcr.microsoft.com/oss/nginx/nginx:1.15.5-alpine
    Image ID:       docker-pullable://nginx@sha256:d85914d547a6c92faa39ce7058bd7529baacab7e0cd4255442b04577c4d1f424
    State:          Running
      Started:      Fri, 01 Mar 2019 23:56:16 +0000
    Ready:          True
    Mounts:
      /mnt/azure from volume (rw)
      /var/run/secrets/kubernetes.io/serviceaccount from default-token-8rv4z (ro)
[...]
Volumes:
  volume:
    Type:       PersistentVolumeClaim (a reference to a PersistentVolumeClaim in the same namespace)
    ClaimName:  my-azurefile
    ReadOnly:   false
[...]
Containers:
  mypod:
    Container ID:   docker://053bc9c0df72232d755aa040bfba8b533fa696b123876108dec400e364d2523e
    Image:          mcr.microsoft.com/oss/nginx/nginx:1.15.5-alpine
    Image ID:       docker-pullable://nginx@sha256:d85914d547a6c92faa39ce7058bd7529baacab7e0cd4255442b04577c4d1f424
    State:          Running
      Started:      Fri, 01 Mar 2019 23:56:16 +0000
    Ready:          True
    Mounts:
      /mnt/azure from volume (rw)
      /var/run/secrets/kubernetes.io/serviceaccount from default-token-8rv4z (ro)
[...]
Volumes:
  volume:
    Type:       PersistentVolumeClaim (a reference to a PersistentVolumeClaim in the same namespace)
    ClaimName:  my-azurefile
    ReadOnly:   false
[...]
Mount options
The default value forfileModeanddirModeis0777for Kubernetes versions 1.13.0 and above. If you're dynamically creating the persistent volume with a storage class, you can specify mount options on the storage class object. For more information, seeMount options. The following example sets0777:
fileMode
dirMode
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: my-azurefile
provisioner: file.csi.azure.com # replace with "kubernetes.io/azure-file" if aks version is less than 1.21
allowVolumeExpansion: true
mountOptions:
  - dir_mode=0777
  - file_mode=0777
  - uid=0
  - gid=0
  - mfsymlinks
  - cache=strict
  - actimeo=30
  - nobrl  # disable sending byte range lock requests to the server and for applications which have challenges with posix locks
parameters:
  skuName: Premium_LRS
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: my-azurefile
provisioner: file.csi.azure.com # replace with "kubernetes.io/azure-file" if aks version is less than 1.21
allowVolumeExpansion: true
mountOptions:
  - dir_mode=0777
  - file_mode=0777
  - uid=0
  - gid=0
  - mfsymlinks
  - cache=strict
  - actimeo=30
  - nobrl  # disable sending byte range lock requests to the server and for applications which have challenges with posix locks
parameters:
  skuName: Premium_LRS
Note
The location to configure mount options (mountOptions) depends on whether you're provisioning dynamic or static persistent volumes. If you'redynamically provisioning a volumewith a storage class, specify the mount options on the storage class object (kind: StorageClass). If youârestatically provisioning a volume, specify the mount options on the PersistentVolume object (kind: PersistentVolume). If youâremounting the file share as an inline volume, specify the mount options on the Pod object (kind: Pod).
Using Azure tags
For more information on using Azure tags, seeUse Azure tags in Azure Kubernetes Service (AKS).
Statically provision a volume
This section provides guidance for cluster administrators who want to create one or more persistent volumes that include details of an existing Azure Files share to use with a workload.
Static provisioning parameters for PersistentVolume
The following table includes parameters you can use to define a PersistentVolume.
smb
nfs
smb
accountname.privatelink.file.core.windows.net
accountname.file.core.windows.net
default
kube-system
csi.storage.k8s.io/pvc/namespace
securityContext.fsGroupChangePolicy
OnRootMismatch
Always
None
OnRootMismatch
0777
Create an Azure file share
Before you can use an Azure Files file share as a Kubernetes volume, you must create an Azure Storage account and the file share.
Get the resource group name using theaz aks showcommand with the--query nodeResourceGroupparameter.az aks show --resource-group myResourceGroup --name myAKSCluster --query nodeResourceGroup -o tsvThe output of the command resembles the following example:MC_myResourceGroup_myAKSCluster_eastus
Get the resource group name using theaz aks showcommand with the--query nodeResourceGroupparameter.
az aks show
--query nodeResourceGroup
az aks show --resource-group myResourceGroup --name myAKSCluster --query nodeResourceGroup -o tsv
az aks show --resource-group myResourceGroup --name myAKSCluster --query nodeResourceGroup -o tsv
The output of the command resembles the following example:
MC_myResourceGroup_myAKSCluster_eastus
MC_myResourceGroup_myAKSCluster_eastus
Create a storage account using theaz storage account createcommand with the--skuparameter. The following command creates a storage account using theStandard_LRSSKU. Make sure to replace the following placeholders:myAKSStorageAccountwith the name of the storage accountnodeResourceGroupNamewith the name of the resource group that the AKS cluster nodes are hosted inlocationwith the name of the region to create the resource in. It should be the same region as the AKS cluster nodes.az storage account create -n myAKSStorageAccount -g nodeResourceGroupName -l location --sku Standard_LRS
Create a storage account using theaz storage account createcommand with the--skuparameter. The following command creates a storage account using theStandard_LRSSKU. Make sure to replace the following placeholders:
az storage account create
--sku
Standard_LRS
myAKSStorageAccountwith the name of the storage account
myAKSStorageAccount
nodeResourceGroupNamewith the name of the resource group that the AKS cluster nodes are hosted in
nodeResourceGroupName
locationwith the name of the region to create the resource in. It should be the same region as the AKS cluster nodes.
location
az storage account create -n myAKSStorageAccount -g nodeResourceGroupName -l location --sku Standard_LRS
az storage account create -n myAKSStorageAccount -g nodeResourceGroupName -l location --sku Standard_LRS
Export the connection string as an environment variable using the following command, which you use to create the file share.export AZURE_STORAGE_CONNECTION_STRING=$(az storage account show-connection-string -n storageAccountName -g resourceGroupName -o tsv)
Export the connection string as an environment variable using the following command, which you use to create the file share.
export AZURE_STORAGE_CONNECTION_STRING=$(az storage account show-connection-string -n storageAccountName -g resourceGroupName -o tsv)
export AZURE_STORAGE_CONNECTION_STRING=$(az storage account show-connection-string -n storageAccountName -g resourceGroupName -o tsv)
Create the file share using theaz storage share createcommand. Make sure to replaceshareNamewith your share name.az storage share create -n shareName --connection-string $AZURE_STORAGE_CONNECTION_STRING
Create the file share using theaz storage share createcommand. Make sure to replaceshareNamewith your share name.
az storage share create
shareName
az storage share create -n shareName --connection-string $AZURE_STORAGE_CONNECTION_STRING
az storage share create -n shareName --connection-string $AZURE_STORAGE_CONNECTION_STRING
Export the storage account key as an environment variable using the following command.STORAGE_KEY=$(az storage account keys list --resource-group nodeResourceGroupName --account-name myAKSStorageAccount --query "[0].value" -o tsv)
Export the storage account key as an environment variable using the following command.
STORAGE_KEY=$(az storage account keys list --resource-group nodeResourceGroupName --account-name myAKSStorageAccount --query "[0].value" -o tsv)
STORAGE_KEY=$(az storage account keys list --resource-group nodeResourceGroupName --account-name myAKSStorageAccount --query "[0].value" -o tsv)
Echo the storage account name and key using the following command. Copy this information, as you need these values when creating the Kubernetes volume.echo Storage account key: $STORAGE_KEY
Echo the storage account name and key using the following command. Copy this information, as you need these values when creating the Kubernetes volume.
echo Storage account key: $STORAGE_KEY
echo Storage account key: $STORAGE_KEY
Create a Kubernetes secret
Kubernetes needs credentials to access the file share created in the previous step. These credentials are stored in aKubernetes secret, which is referenced when you create a Kubernetes pod.
Create the secret using thekubectl create secretcommand. The following example creates a secret namedazure-secretand populates theazurestorageaccountnameandazurestorageaccountkeyfrom the previous step. To use an existing Azure storage account, provide the account name and key.kubectl create secret generic azure-secret --from-literal=azurestorageaccountname=myAKSStorageAccount --from-literal=azurestorageaccountkey=$STORAGE_KEY
Create the secret using thekubectl create secretcommand. The following example creates a secret namedazure-secretand populates theazurestorageaccountnameandazurestorageaccountkeyfrom the previous step. To use an existing Azure storage account, provide the account name and key.
kubectl create secret
kubectl create secret generic azure-secret --from-literal=azurestorageaccountname=myAKSStorageAccount --from-literal=azurestorageaccountkey=$STORAGE_KEY
kubectl create secret generic azure-secret --from-literal=azurestorageaccountname=myAKSStorageAccount --from-literal=azurestorageaccountkey=$STORAGE_KEY
Mount file share as a persistent volume
Create a new file namedazurefiles-pv.yamland copy in the following contents. Undercsi, updateresourceGroup,volumeHandle, andshareName. For mount options, the default value forfileModeanddirModeis0777.apiVersion: v1
kind: PersistentVolume
metadata:
  annotations:
    pv.kubernetes.io/provisioned-by: file.csi.azure.com
  name: azurefile
spec:
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  storageClassName: azurefile-csi
  csi:
    driver: file.csi.azure.com
    volumeHandle: "{resource-group-name}#{account-name}#{file-share-name}"  # make sure this volumeid is unique for every identical share in the cluster
    volumeAttributes:
      shareName: aksshare
    nodeStageSecretRef:
      name: azure-secret
      namespace: default
  mountOptions:
    - dir_mode=0777
    - file_mode=0777
    - uid=0
    - gid=0
    - mfsymlinks
    - cache=strict
    - nosharesock
    - nobrl  # disable sending byte range lock requests to the server and for applications which have challenges with posix locks
Create a new file namedazurefiles-pv.yamland copy in the following contents. Undercsi, updateresourceGroup,volumeHandle, andshareName. For mount options, the default value forfileModeanddirModeis0777.
azurefiles-pv.yaml
csi
resourceGroup
volumeHandle
shareName
fileMode
dirMode
apiVersion: v1
kind: PersistentVolume
metadata:
  annotations:
    pv.kubernetes.io/provisioned-by: file.csi.azure.com
  name: azurefile
spec:
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  storageClassName: azurefile-csi
  csi:
    driver: file.csi.azure.com
    volumeHandle: "{resource-group-name}#{account-name}#{file-share-name}"  # make sure this volumeid is unique for every identical share in the cluster
    volumeAttributes:
      shareName: aksshare
    nodeStageSecretRef:
      name: azure-secret
      namespace: default
  mountOptions:
    - dir_mode=0777
    - file_mode=0777
    - uid=0
    - gid=0
    - mfsymlinks
    - cache=strict
    - nosharesock
    - nobrl  # disable sending byte range lock requests to the server and for applications which have challenges with posix locks
apiVersion: v1
kind: PersistentVolume
metadata:
  annotations:
    pv.kubernetes.io/provisioned-by: file.csi.azure.com
  name: azurefile
spec:
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  storageClassName: azurefile-csi
  csi:
    driver: file.csi.azure.com
    volumeHandle: "{resource-group-name}#{account-name}#{file-share-name}"  # make sure this volumeid is unique for every identical share in the cluster
    volumeAttributes:
      shareName: aksshare
    nodeStageSecretRef:
      name: azure-secret
      namespace: default
  mountOptions:
    - dir_mode=0777
    - file_mode=0777
    - uid=0
    - gid=0
    - mfsymlinks
    - cache=strict
    - nosharesock
    - nobrl  # disable sending byte range lock requests to the server and for applications which have challenges with posix locks
Create the persistent volume using thekubectl createcommand.kubectl create -f azurefiles-pv.yaml
Create the persistent volume using thekubectl createcommand.
kubectl create
kubectl create -f azurefiles-pv.yaml
kubectl create -f azurefiles-pv.yaml
Create a new file namedazurefiles-mount-options-pvc.yamland copy the following contents.apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: azurefile
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: azurefile-csi
  volumeName: azurefile
  resources:
    requests:
      storage: 5Gi
Create a new file namedazurefiles-mount-options-pvc.yamland copy the following contents.
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: azurefile
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: azurefile-csi
  volumeName: azurefile
  resources:
    requests:
      storage: 5Gi
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: azurefile
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: azurefile-csi
  volumeName: azurefile
  resources:
    requests:
      storage: 5Gi
Create the PersistentVolumeClaim using thekubectl applycommand.kubectl apply -f azurefiles-mount-options-pvc.yaml
Create the PersistentVolumeClaim using thekubectl applycommand.
kubectl apply
kubectl apply -f azurefiles-mount-options-pvc.yaml
kubectl apply -f azurefiles-mount-options-pvc.yaml
Verify your PersistentVolumeClaim is created and bound to the PersistentVolume using thekubectl getcommand.kubectl get pvc azurefileThe output from the command resembles the following example:NAME        STATUS   VOLUME      CAPACITY   ACCESS MODES   STORAGECLASS   AGE
azurefile   Bound    azurefile   5Gi        RWX            azurefile      5s
Verify your PersistentVolumeClaim is created and bound to the PersistentVolume using thekubectl getcommand.
kubectl get
kubectl get pvc azurefile
kubectl get pvc azurefile
The output from the command resembles the following example:
NAME        STATUS   VOLUME      CAPACITY   ACCESS MODES   STORAGECLASS   AGE
azurefile   Bound    azurefile   5Gi        RWX            azurefile      5s
NAME        STATUS   VOLUME      CAPACITY   ACCESS MODES   STORAGECLASS   AGE
azurefile   Bound    azurefile   5Gi        RWX            azurefile      5s
Update your container spec to reference yourPersistentVolumeClaimand your pod in the YAML file. For example:...
  volumes:
  - name: azure
    persistentVolumeClaim:
      claimName: azurefile
Update your container spec to reference yourPersistentVolumeClaimand your pod in the YAML file. For example:
...
  volumes:
  - name: azure
    persistentVolumeClaim:
      claimName: azurefile
...
  volumes:
  - name: azure
    persistentVolumeClaim:
      claimName: azurefile
A pod spec can't be updated in place, so delete the pod using thekubectl deletecommand and recreate it using thekubectl applycommand.kubectl delete pod mypod

kubectl apply -f azure-files-pod.yaml
A pod spec can't be updated in place, so delete the pod using thekubectl deletecommand and recreate it using thekubectl applycommand.
kubectl delete
kubectl apply
kubectl delete pod mypod

kubectl apply -f azure-files-pod.yaml
kubectl delete pod mypod

kubectl apply -f azure-files-pod.yaml
Mount file share as an inline volume
Note
To avoid performance issue, we recommend you use a persistent volume instead of an inline volume when numerous pods are accessing the same file share.
Inline volume can only access secrets in the same namespace as the pod. To specify a different secret namespace, use apersistent volume.
To mount the Azure Files file share into your pod, you configure the volume in the container spec.
Create a new file namedazure-files-pod.yamland copy in the following contents. If you changed the name of the file share or secret name, update theshareNameandsecretName. You can also update themountPath, which is the path where the Files share is mounted in the pod. For Windows Server containers, specify amountPathusing the Windows path convention, such as'D:'.apiVersion: v1
kind: Pod
metadata:
  name: mypod
spec:
  nodeSelector:
    kubernetes.io/os: linux
  containers:
    - image: 'mcr.microsoft.com/oss/nginx/nginx:1.15.5-alpine'
      name: mypod
      resources:
        requests:
          cpu: 100m
          memory: 128Mi
        limits:
          cpu: 250m
          memory: 256Mi
      volumeMounts:
        - name: azure
          mountPath: /mnt/azure
          readOnly: false
  volumes:
    - name: azure
      csi:
        driver: file.csi.azure.com
        volumeAttributes:
          secretName: azure-secret  # required
          shareName: aksshare  # required
          mountOptions: 'dir_mode=0777,file_mode=0777,cache=strict,actimeo=30,nosharesock,nobrl'  # optional
Create a new file namedazure-files-pod.yamland copy in the following contents. If you changed the name of the file share or secret name, update theshareNameandsecretName. You can also update themountPath, which is the path where the Files share is mounted in the pod. For Windows Server containers, specify amountPathusing the Windows path convention, such as'D:'.
azure-files-pod.yaml
shareName
secretName
mountPath
mountPath
apiVersion: v1
kind: Pod
metadata:
  name: mypod
spec:
  nodeSelector:
    kubernetes.io/os: linux
  containers:
    - image: 'mcr.microsoft.com/oss/nginx/nginx:1.15.5-alpine'
      name: mypod
      resources:
        requests:
          cpu: 100m
          memory: 128Mi
        limits:
          cpu: 250m
          memory: 256Mi
      volumeMounts:
        - name: azure
          mountPath: /mnt/azure
          readOnly: false
  volumes:
    - name: azure
      csi:
        driver: file.csi.azure.com
        volumeAttributes:
          secretName: azure-secret  # required
          shareName: aksshare  # required
          mountOptions: 'dir_mode=0777,file_mode=0777,cache=strict,actimeo=30,nosharesock,nobrl'  # optional
apiVersion: v1
kind: Pod
metadata:
  name: mypod
spec:
  nodeSelector:
    kubernetes.io/os: linux
  containers:
    - image: 'mcr.microsoft.com/oss/nginx/nginx:1.15.5-alpine'
      name: mypod
      resources:
        requests:
          cpu: 100m
          memory: 128Mi
        limits:
          cpu: 250m
          memory: 256Mi
      volumeMounts:
        - name: azure
          mountPath: /mnt/azure
          readOnly: false
  volumes:
    - name: azure
      csi:
        driver: file.csi.azure.com
        volumeAttributes:
          secretName: azure-secret  # required
          shareName: aksshare  # required
          mountOptions: 'dir_mode=0777,file_mode=0777,cache=strict,actimeo=30,nosharesock,nobrl'  # optional
Create the pod using thekubectl applycommand.kubectl apply -f azure-files-pod.yamlYou now have a running pod with an Azure Files file share mounted at/mnt/azure. You can verify the share is mounted successfully using thekubectl describecommand.kubectl describe pod mypod
Create the pod using thekubectl applycommand.
kubectl apply
kubectl apply -f azure-files-pod.yaml
kubectl apply -f azure-files-pod.yaml
You now have a running pod with an Azure Files file share mounted at/mnt/azure. You can verify the share is mounted successfully using thekubectl describecommand.
kubectl describe
kubectl describe pod mypod
kubectl describe pod mypod
Best practices
To have the best experience with Azure Files, please follow these best practices:
The location to configure mount options (mountOptions) depends on whether you're provisioning dynamic or static persistent volumes. If you'redynamically provisioning a volumewith a storage class, specify the mount options on the storage class object (kind: StorageClass). If youârestatically provisioning a volume, specify the mount options on the PersistentVolume object (kind: PersistentVolume). If youâremounting the file share as an inline volume, specify the mount options on the Pod object (kind: Pod).
We recommend FIO when running benchmarking tests. For more information, seebenchmarking tools and tests.
SMB shares
Recommended mount options when using SMB shares are provided in the following storage class example:apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
 name: azurefile-csi
provisioner: file.csi.azure.com
allowVolumeExpansion: true
parameters:
 skuName: Premium_LRS  # available values: Premium_LRS, Premium_ZRS, Standard_LRS, Standard_GRS, Standard_ZRS, Standard_RAGRS, Standard_RAGZRS
reclaimPolicy: Delete
volumeBindingMode: Immediate
mountOptions:
 - dir_mode=0777  # modify this permission if you want to enhance the security
 - file_mode=0777 # modify this permission if you want to enhance the security
 - mfsymlinks    # support symbolic links
 - cache=strict  # https://linux.die.net/man/8/mount.cifs
 - nosharesock  # reduces probability of reconnect race
 - actimeo=30  # reduces latency for metadata-heavy workload
 - nobrl  # disable sending byte range lock requests to the server and for applications which have challenges with posix locks
Recommended mount options when using SMB shares are provided in the following storage class example:
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
 name: azurefile-csi
provisioner: file.csi.azure.com
allowVolumeExpansion: true
parameters:
 skuName: Premium_LRS  # available values: Premium_LRS, Premium_ZRS, Standard_LRS, Standard_GRS, Standard_ZRS, Standard_RAGRS, Standard_RAGZRS
reclaimPolicy: Delete
volumeBindingMode: Immediate
mountOptions:
 - dir_mode=0777  # modify this permission if you want to enhance the security
 - file_mode=0777 # modify this permission if you want to enhance the security
 - mfsymlinks    # support symbolic links
 - cache=strict  # https://linux.die.net/man/8/mount.cifs
 - nosharesock  # reduces probability of reconnect race
 - actimeo=30  # reduces latency for metadata-heavy workload
 - nobrl  # disable sending byte range lock requests to the server and for applications which have challenges with posix locks
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
 name: azurefile-csi
provisioner: file.csi.azure.com
allowVolumeExpansion: true
parameters:
 skuName: Premium_LRS  # available values: Premium_LRS, Premium_ZRS, Standard_LRS, Standard_GRS, Standard_ZRS, Standard_RAGRS, Standard_RAGZRS
reclaimPolicy: Delete
volumeBindingMode: Immediate
mountOptions:
 - dir_mode=0777  # modify this permission if you want to enhance the security
 - file_mode=0777 # modify this permission if you want to enhance the security
 - mfsymlinks    # support symbolic links
 - cache=strict  # https://linux.die.net/man/8/mount.cifs
 - nosharesock  # reduces probability of reconnect race
 - actimeo=30  # reduces latency for metadata-heavy workload
 - nobrl  # disable sending byte range lock requests to the server and for applications which have challenges with posix locks
If using premium (SSD) file shares and your workload is metadata heavy, enroll to use themetadata cachingfeature to improve performance.
If using premium (SSD) file shares and your workload is metadata heavy, enroll to use themetadata cachingfeature to improve performance.
For more information, seeImprove performance for SMB Azure file shares.
NFS shares
Recommended mount options when using NFS shares are provided in the following storage class example:apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: azurefile-csi-nfs
provisioner: file.csi.azure.com
parameters:
  protocol: nfs
  skuName: Premium_LRS     # available values: Premium_LRS, Premium_ZRS
reclaimPolicy: Delete
volumeBindingMode: Immediate
allowVolumeExpansion: true
mountOptions:
  - nconnect=4  # improves performance by enabling multiple connections to share
  - noresvport  # improves availability
  - actimeo=30  # reduces latency for metadata-heavy workloads
Recommended mount options when using NFS shares are provided in the following storage class example:
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: azurefile-csi-nfs
provisioner: file.csi.azure.com
parameters:
  protocol: nfs
  skuName: Premium_LRS     # available values: Premium_LRS, Premium_ZRS
reclaimPolicy: Delete
volumeBindingMode: Immediate
allowVolumeExpansion: true
mountOptions:
  - nconnect=4  # improves performance by enabling multiple connections to share
  - noresvport  # improves availability
  - actimeo=30  # reduces latency for metadata-heavy workloads
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: azurefile-csi-nfs
provisioner: file.csi.azure.com
parameters:
  protocol: nfs
  skuName: Premium_LRS     # available values: Premium_LRS, Premium_ZRS
reclaimPolicy: Delete
volumeBindingMode: Immediate
allowVolumeExpansion: true
mountOptions:
  - nconnect=4  # improves performance by enabling multiple connections to share
  - noresvport  # improves availability
  - actimeo=30  # reduces latency for metadata-heavy workloads
Increaseread-ahead sizeto improve read throughput.
Increaseread-ahead sizeto improve read throughput.
While Azure Files supports setting nconnect up to the maximum setting of 16, we recommend configuring the mount options with the optimal setting of nconnect=4. Currently, there are no gains beyond four channels for the Azure Files implementation of nconnect.
While Azure Files supports setting nconnect up to the maximum setting of 16, we recommend configuring the mount options with the optimal setting of nconnect=4. Currently, there are no gains beyond four channels for the Azure Files implementation of nconnect.
For more information, seeImprove performance for NFS Azure file shares.
Next steps
For Azure Files CSI driver parameters, seeCSI driver parameters.
For associated best practices, seeBest practices for storage and backups in AKS.
Azure Kubernetes Service

Additional resources