Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Quickstart: Create a private container registry using the Azure CLI
Article
2024-09-19
18 contributors
In this article
Azure Container Registry is a private registry service for building, storing, and managing container images and related artifacts. In this quickstart, you create an Azure container registry instance with the Azure CLI. Then, use Docker commands to push a container image into the registry, and finally pull and run the image from your registry.
This quickstart requires that you are running the Azure CLI (version 2.0.55 or later recommended). Runaz --versionto find the version. If you need to install or upgrade, seeInstall Azure CLI.
az --version
You must also have Docker installed locally. Docker provides packages that easily configure Docker on anymacOS,Windows, orLinuxsystem.
Because the Azure Cloud Shell doesn't include all required Docker components (thedockerddaemon), you can't use the Cloud Shell for this quickstart.
dockerd
Create a resource group
Create a resource group with theaz group createcommand. An Azure resource group is a logical container into which Azure resources are deployed and managed.
The following example creates a resource group namedmyResourceGroupin theeastuslocation.
az group create --name myResourceGroup --location eastus
az group create --name myResourceGroup --location eastus
Create a container registry
In this quickstart you create aBasicregistry, which is a cost-optimized option for developers learning about Azure Container Registry. For details on available service tiers, seeContainer registry service tiers.
Create an ACR instance using theaz acr createcommand. The registry name must be unique within Azure, and contain 5-50 lowercase alphanumeric characters. In the following example,mycontainerregistryis used. Update this to a unique value.
az acr create --resource-group myResourceGroup \
  --name mycontainerregistry --sku Basic
az acr create --resource-group myResourceGroup \
  --name mycontainerregistry --sku Basic
When the registry is created, the output is similar to the following:
{
  "adminUserEnabled": false,
  "creationDate": "2019-01-08T22:32:13.175925+00:00",
  "id": "/subscriptions/aaaa0a0a-bb1b-cc2c-dd3d-eeeeee4e4e4e/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/mycontainerregistry",
  "location": "eastus",
  "loginServer": "mycontainerregistry.azurecr.io",
  "name": "mycontainerregistry",
  "provisioningState": "Succeeded",
  "resourceGroup": "myResourceGroup",
  "sku": {
    "name": "Basic",
    "tier": "Basic"
  },
  "status": null,
  "storageAccount": null,
  "tags": {},
  "type": "Microsoft.ContainerRegistry/registries"
}
{
  "adminUserEnabled": false,
  "creationDate": "2019-01-08T22:32:13.175925+00:00",
  "id": "/subscriptions/aaaa0a0a-bb1b-cc2c-dd3d-eeeeee4e4e4e/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/mycontainerregistry",
  "location": "eastus",
  "loginServer": "mycontainerregistry.azurecr.io",
  "name": "mycontainerregistry",
  "provisioningState": "Succeeded",
  "resourceGroup": "myResourceGroup",
  "sku": {
    "name": "Basic",
    "tier": "Basic"
  },
  "status": null,
  "storageAccount": null,
  "tags": {},
  "type": "Microsoft.ContainerRegistry/registries"
}
Take note ofloginServerin the output, which is the fully qualified registry name (all lowercase). Throughout the rest of this quickstart<registry-name>is a placeholder for the container registry name, and<login-server>is a placeholder for the registry's login server name.
loginServer
<registry-name>
<login-server>
Tip
In this quickstart, you create aBasicregistry, which is a cost-optimized option for developers learning about Azure Container Registry. Choose other tiers for increased storage and image throughput, and capabilities such as connection using aprivate endpoint. For details on available service tiers (SKUs), seeContainer registry service tiers.
Log in to registry
Before pushing and pulling container images, you must log in to the registry. To do so, use theaz acr logincommand. Specify only the registry resource name when logging in with the Azure CLI. Don't use the fully qualified login server name.
az acr login --name <registry-name>
az acr login --name <registry-name>
Example:
az acr login --name mycontainerregistry
az acr login --name mycontainerregistry
The command returns aLogin Succeededmessage once completed.
Login Succeeded
Push image to registry
To push an image to an Azure Container registry, you must first have an image. If you don't yet have any local container images, run the followingdocker pullcommand to pull an existing public image. For this example, pull thehello-worldimage from Microsoft Container Registry.
hello-world
docker pull mcr.microsoft.com/hello-world
docker pull mcr.microsoft.com/hello-world
Before you can push an image to your registry, you must tag it with the fully qualified name of your registry login server. The login server name is in the format<registry-name>.azurecr.io(must be all lowercase), for example,mycontainerregistry.azurecr.io.
Tag the image using thedocker tagcommand. Replace<login-server>with the login server name of your ACR instance.
<login-server>
docker tag mcr.microsoft.com/hello-world <login-server>/hello-world:v1
docker tag mcr.microsoft.com/hello-world <login-server>/hello-world:v1
Example:
docker tag mcr.microsoft.com/hello-world mycontainerregistry.azurecr.io/hello-world:v1
docker tag mcr.microsoft.com/hello-world mycontainerregistry.azurecr.io/hello-world:v1
Finally, usedocker pushto push the image to the registry instance. Replace<login-server>with the login server name of your registry instance. This example creates thehello-worldrepository, containing thehello-world:v1image.
<login-server>
hello-world:v1
docker push <login-server>/hello-world:v1
docker push <login-server>/hello-world:v1
After pushing the image to your container registry, remove thehello-world:v1image from your local Docker environment. (Note that thisdocker rmicommand does not remove the image from thehello-worldrepository in your Azure container registry.)
hello-world:v1
docker rmi <login-server>/hello-world:v1
docker rmi <login-server>/hello-world:v1
List container images
The following example lists the repositories in your registry:
az acr repository list --name <registry-name> --output table
az acr repository list --name <registry-name> --output table
Output:
Result
----------------
hello-world
Result
----------------
hello-world
The following example lists the tags on thehello-worldrepository.
az acr repository show-tags --name <registry-name> --repository hello-world --output table
az acr repository show-tags --name <registry-name> --repository hello-world --output table
Output:
Result
--------
v1
Result
--------
v1
Run image from registry
Now, you can pull and run thehello-world:v1container image from your container registry by usingdocker run:
hello-world:v1
docker run <login-server>/hello-world:v1
docker run <login-server>/hello-world:v1
Example output:
Unable to find image 'mycontainerregistry.azurecr.io/hello-world:v1' locally
v1: Pulling from hello-world
Digest: sha256:662dd8e65ef7ccf13f417962c2f77567d3b132f12c95909de6c85ac3c326a345
Status: Downloaded newer image for mycontainerregistry.azurecr.io/hello-world:v1

Hello from Docker!
This message shows that your installation appears to be working correctly.

[...]
Unable to find image 'mycontainerregistry.azurecr.io/hello-world:v1' locally
v1: Pulling from hello-world
Digest: sha256:662dd8e65ef7ccf13f417962c2f77567d3b132f12c95909de6c85ac3c326a345
Status: Downloaded newer image for mycontainerregistry.azurecr.io/hello-world:v1

Hello from Docker!
This message shows that your installation appears to be working correctly.

[...]
Clean up resources
When no longer needed, you can use theaz group deletecommand to remove the resource group, the container registry, and the container images stored there.
az group delete --name myResourceGroup
az group delete --name myResourceGroup
Next steps
In this quickstart, you created an Azure Container Registry with the Azure CLI, pushed a container image to the registry, and pulled and ran the image from the registry. Continue to the Azure Container Registry tutorials for a deeper look at ACR.
Azure Container Registry tutorials
Azure Container Registry Tasks tutorials
Feedback
Was this page helpful?
Additional resources