Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Azure Cosmos DB trigger for Azure Functions 2.x and higher
Article
2024-01-19
20 contributors
In this article
The Azure Cosmos DB Trigger uses theAzure Cosmos DB change feedto listen for inserts and updates across partitions. The change feed publishes new and updated items, not including updates from deletions.
For information on setup and configuration details, see theoverview.
Cosmos DB scaling decisions for the Consumption and Premium plans are done via target-based scaling. For more information, seeTarget-based scaling.
Important
This article uses tabs to support multiple versions of the Node.js programming model. The v4 model is generally available and is designed to have a more flexible and intuitive experience for JavaScript and TypeScript developers. For more details about how the v4 model works, refer to theAzure Functions Node.js developer guide. To learn more about the differences between v3 and v4, refer to themigration guide.
Azure Functions supports two programming models for Python. The way that you define your bindings depends on your chosen programming model.
v2
v1
The Python v2 programming model lets you define bindings using decorators directly in your Python function code. For more information, see thePython developer guide.
The Python v1 programming model requires you to define bindings in a separatefunction.jsonfile in the function folder. For more information, see thePython developer guide.
This article supports both programming models.
Example
The usage of the trigger depends on the extension package version and the C# modality used in your function app, which can be one of the following:
Isolated worker model
In-process model
An isolated worker process class library compiled C# function runs in a process isolated from the runtime.
Important
Support will end for the in-process model on November 10, 2026. We highly recommend that youmigrate your apps to the isolated worker modelfor full support.
An in-process class library is a compiled C# function runs in the same process as the Functions runtime.
The following examples depend on the extension version for the given C# mode.
Extension 4.x+
Functions 2.x+
Extension 4.x+
Functions 2.x+
Apps usingAzure Cosmos DB extension version 4.xor higher have different attribute properties, which are shown here. This example refers to a simpleToDoItemtype.
ToDoItem
namespace CosmosDBSamplesV2
{
    // Customize the model with your own desired properties
    public class ToDoItem
    {
        public string id { get; set; }
        public string Description { get; set; }
    }
}
namespace CosmosDBSamplesV2
{
    // Customize the model with your own desired properties
    public class ToDoItem
    {
        public string id { get; set; }
        public string Description { get; set; }
    }
}
using System.Collections.Generic;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Host;
using Microsoft.Extensions.Logging;

namespace CosmosDBSamplesV2
{
    public static class CosmosTrigger
    {
        [FunctionName("CosmosTrigger")]
        public static void Run([CosmosDBTrigger(
            databaseName: "databaseName",
            containerName: "containerName",
            Connection = "CosmosDBConnectionSetting",
            LeaseContainerName = "leases",
            CreateLeaseContainerIfNotExists = true)]IReadOnlyList<ToDoItem> input, ILogger log)
        {
            if (input != null && input.Count > 0)
            {
                log.LogInformation("Documents modified " + input.Count);
                log.LogInformation("First document Id " + input[0].id);
            }
        }
    }
}
using System.Collections.Generic;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Host;
using Microsoft.Extensions.Logging;

namespace CosmosDBSamplesV2
{
    public static class CosmosTrigger
    {
        [FunctionName("CosmosTrigger")]
        public static void Run([CosmosDBTrigger(
            databaseName: "databaseName",
            containerName: "containerName",
            Connection = "CosmosDBConnectionSetting",
            LeaseContainerName = "leases",
            CreateLeaseContainerIfNotExists = true)]IReadOnlyList<ToDoItem> input, ILogger log)
        {
            if (input != null && input.Count > 0)
            {
                log.LogInformation("Documents modified " + input.Count);
                log.LogInformation("First document Id " + input[0].id);
            }
        }
    }
}
The following example shows aC# functionthat is invoked when there are inserts or updates in the specified database and collection.
using Microsoft.Azure.Documents;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Host;
using System.Collections.Generic;
using Microsoft.Extensions.Logging;

namespace CosmosDBSamplesV2
{
    public static class CosmosTrigger
    {
        [FunctionName("CosmosTrigger")]
        public static void Run([CosmosDBTrigger(
            databaseName: "ToDoItems",
            collectionName: "Items",
            ConnectionStringSetting = "CosmosDBConnection",
            LeaseCollectionName = "leases",
            CreateLeaseCollectionIfNotExists = true)]IReadOnlyList<Document> documents,
            ILogger log)
        {
            if (documents != null && documents.Count > 0)
            {
                log.LogInformation($"Documents modified: {documents.Count}");
                log.LogInformation($"First document Id: {documents[0].Id}");
            }
        }
    }
}
using Microsoft.Azure.Documents;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Host;
using System.Collections.Generic;
using Microsoft.Extensions.Logging;

namespace CosmosDBSamplesV2
{
    public static class CosmosTrigger
    {
        [FunctionName("CosmosTrigger")]
        public static void Run([CosmosDBTrigger(
            databaseName: "ToDoItems",
            collectionName: "Items",
            ConnectionStringSetting = "CosmosDBConnection",
            LeaseCollectionName = "leases",
            CreateLeaseCollectionIfNotExists = true)]IReadOnlyList<Document> documents,
            ILogger log)
        {
            if (documents != null && documents.Count > 0)
            {
                log.LogInformation($"Documents modified: {documents.Count}");
                log.LogInformation($"First document Id: {documents[0].Id}");
            }
        }
    }
}
This example refers to a simpleToDoItemtype:
ToDoItem
public class ToDoItem
{
    public string? Id { get; set; }
    public string? Description { get; set; }
}
public class ToDoItem
{
    public string? Id { get; set; }
    public string? Description { get; set; }
}
The following function is invoked when there are inserts or updates in the specified database and collection.
[Function("CosmosTrigger")]
public void Run([CosmosDBTrigger(
    databaseName: "ToDoItems",
    containerName:"TriggerItems",
    Connection = "CosmosDBConnection",
    LeaseContainerName = "leases",
    CreateLeaseContainerIfNotExists = true)] IReadOnlyList<ToDoItem> todoItems,
    FunctionContext context)
{
    if (todoItems is not null && todoItems.Any())
    {
        foreach (var doc in todoItems)
        {
            _logger.LogInformation("ToDoItem: {desc}", doc.Description);
        }
    }
}
[Function("CosmosTrigger")]
public void Run([CosmosDBTrigger(
    databaseName: "ToDoItems",
    containerName:"TriggerItems",
    Connection = "CosmosDBConnection",
    LeaseContainerName = "leases",
    CreateLeaseContainerIfNotExists = true)] IReadOnlyList<ToDoItem> todoItems,
    FunctionContext context)
{
    if (todoItems is not null && todoItems.Any())
    {
        foreach (var doc in todoItems)
        {
            _logger.LogInformation("ToDoItem: {desc}", doc.Description);
        }
    }
}
The following code defines aMyDocumenttype:
MyDocument
public class MyDocument
{
    public string? Id { get; set; }

    public string? Text { get; set; }

    public int Number { get; set; }

    public bool Boolean { get; set; }
}
public class MyDocument
{
    public string? Id { get; set; }

    public string? Text { get; set; }

    public int Number { get; set; }

    public bool Boolean { get; set; }
}
AnIReadOnlyList<T>is used as the Azure Cosmos DB trigger binding parameter in the following example:
IReadOnlyList<T>
[Function(nameof(CosmosDBFunction))]
[ExponentialBackoffRetry(5, "00:00:04", "00:15:00")]
[CosmosDBOutput("%CosmosDb%", "%CosmosContainerOut%", Connection = "CosmosDBConnection", CreateIfNotExists = true)]
public object? Run(
    [CosmosDBTrigger(
        "%CosmosDb%",
        "%CosmosContainerIn%",
        Connection = "CosmosDBConnection",
        LeaseContainerName = "leases",
        CreateLeaseContainerIfNotExists = true)] IReadOnlyList<MyDocument> input,
    FunctionContext context)
{
    if (input != null && input.Any())
    {
        foreach (var doc in input)
        {
            _logger.LogInformation("Doc Id: {id}", doc.Id);
        }

        // Cosmos Output
        return input.Select(p => new { id = p.Id });
    }

    return null;
}
[Function(nameof(CosmosDBFunction))]
[ExponentialBackoffRetry(5, "00:00:04", "00:15:00")]
[CosmosDBOutput("%CosmosDb%", "%CosmosContainerOut%", Connection = "CosmosDBConnection", CreateIfNotExists = true)]
public object? Run(
    [CosmosDBTrigger(
        "%CosmosDb%",
        "%CosmosContainerIn%",
        Connection = "CosmosDBConnection",
        LeaseContainerName = "leases",
        CreateLeaseContainerIfNotExists = true)] IReadOnlyList<MyDocument> input,
    FunctionContext context)
{
    if (input != null && input.Any())
    {
        foreach (var doc in input)
        {
            _logger.LogInformation("Doc Id: {id}", doc.Id);
        }

        // Cosmos Output
        return input.Select(p => new { id = p.Id });
    }

    return null;
}
This example requires the followingusingstatements:
using
using System.Collections.Generic;
using System.Linq;
using Microsoft.Azure.Functions.Worker;
using Microsoft.Extensions.Logging;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Azure.Functions.Worker;
using Microsoft.Extensions.Logging;
This function is invoked when there are inserts or updates in the specified database and container.
Extension 4.x+
Functions 2.x+
Because of schema changes in the Azure Cosmos DB SDK, version 4.x of the Azure Cosmos DB extension requiresazure-functions-java-library V3.0.0for Java functions.
@FunctionName("CosmosDBTriggerFunction")
    public void run(
        @CosmosDBTrigger(
            name = "items",
            databaseName = "ToDoList",
            containerName = "Items",
            leaseContainerName="leases",
            connection = "AzureCosmosDBConnection",
            createLeaseContainerIfNotExists = true
        )
        Object inputItem,
        final ExecutionContext context
    ) {
        context.getLogger().info("Items modified: " + inputItems.size());
    }
@FunctionName("CosmosDBTriggerFunction")
    public void run(
        @CosmosDBTrigger(
            name = "items",
            databaseName = "ToDoList",
            containerName = "Items",
            leaseContainerName="leases",
            connection = "AzureCosmosDBConnection",
            createLeaseContainerIfNotExists = true
        )
        Object inputItem,
        final ExecutionContext context
    ) {
        context.getLogger().info("Items modified: " + inputItems.size());
    }
@FunctionName("cosmosDBMonitor")
    public void cosmosDbProcessor(
        @CosmosDBTrigger(name = "items",
            databaseName = "ToDoList",
            collectionName = "Items",
            leaseCollectionName = "leases",
            createLeaseCollectionIfNotExists = true,
            connectionStringSetting = "AzureCosmosDBConnection") String[] items,
            final ExecutionContext context ) {
                context.getLogger().info(items.length + "item(s) is/are changed.");
            }
@FunctionName("cosmosDBMonitor")
    public void cosmosDbProcessor(
        @CosmosDBTrigger(name = "items",
            databaseName = "ToDoList",
            collectionName = "Items",
            leaseCollectionName = "leases",
            createLeaseCollectionIfNotExists = true,
            connectionStringSetting = "AzureCosmosDBConnection") String[] items,
            final ExecutionContext context ) {
                context.getLogger().info(items.length + "item(s) is/are changed.");
            }
In theJava functions runtime library, use the@CosmosDBTriggerannotation on parameters whose value would come from Azure Cosmos DB.  This annotation can be used with native Java types, POJOs, or nullable values usingOptional<T>.
@CosmosDBTrigger
Optional<T>
Model v4
Model v3
The following example shows an Azure Cosmos DB triggerTypeScript function. The function writes log messages when Azure Cosmos DB records are added or modified.
import { app, InvocationContext } from '@azure/functions';

export async function cosmosDBTrigger1(documents: unknown[], context: InvocationContext): Promise<void> {
    context.log(`Cosmos DB function processed ${documents.length} documents`);
}

app.cosmosDB('cosmosDBTrigger1', {
    connection: '<connection-app-setting>',
    databaseName: 'Tasks',
    containerName: 'Items',
    createLeaseContainerIfNotExists: true,
    handler: cosmosDBTrigger1,
});
import { app, InvocationContext } from '@azure/functions';

export async function cosmosDBTrigger1(documents: unknown[], context: InvocationContext): Promise<void> {
    context.log(`Cosmos DB function processed ${documents.length} documents`);
}

app.cosmosDB('cosmosDBTrigger1', {
    connection: '<connection-app-setting>',
    databaseName: 'Tasks',
    containerName: 'Items',
    createLeaseContainerIfNotExists: true,
    handler: cosmosDBTrigger1,
});
TypeScript samples aren't documented for model v3.
Model v4
Model v3
The following example shows an Azure Cosmos DB triggerJavaScript function. The function writes log messages when Azure Cosmos DB records are added or modified.
const { app } = require('@azure/functions');

app.cosmosDB('cosmosDBTrigger1', {
    connection: '<connection-app-setting>',
    databaseName: 'Tasks',
    containerName: 'Items',
    createLeaseContainerIfNotExists: true,
    handler: (documents, context) => {
        context.log(`Cosmos DB function processed ${documents.length} documents`);
    },
});
const { app } = require('@azure/functions');

app.cosmosDB('cosmosDBTrigger1', {
    connection: '<connection-app-setting>',
    databaseName: 'Tasks',
    containerName: 'Items',
    createLeaseContainerIfNotExists: true,
    handler: (documents, context) => {
        context.log(`Cosmos DB function processed ${documents.length} documents`);
    },
});
The following example shows an Azure Cosmos DB trigger binding in afunction.jsonfile and aJavaScript functionthat uses the binding. The function writes log messages when Azure Cosmos DB records are added or modified.
Here's the binding data in thefunction.jsonfile:
Functions 2.x+
Functions 4.x+
{
    "type": "cosmosDBTrigger",
    "name": "documents",
    "direction": "in",
    "leaseCollectionName": "leases",
    "connectionStringSetting": "<connection-app-setting>",
    "databaseName": "Tasks",
    "collectionName": "Items",
    "createLeaseCollectionIfNotExists": true
}
{
    "type": "cosmosDBTrigger",
    "name": "documents",
    "direction": "in",
    "leaseCollectionName": "leases",
    "connectionStringSetting": "<connection-app-setting>",
    "databaseName": "Tasks",
    "collectionName": "Items",
    "createLeaseCollectionIfNotExists": true
}
{
    "type": "cosmosDBTrigger",
    "name": "documents",
    "direction": "in",
    "leaseContainerName": "leases",
    "connection": "<connection-app-setting>",
    "databaseName": "Tasks",
    "containerName": "Items",
    "createLeaseContainerIfNotExists": true
}
{
    "type": "cosmosDBTrigger",
    "name": "documents",
    "direction": "in",
    "leaseContainerName": "leases",
    "connection": "<connection-app-setting>",
    "databaseName": "Tasks",
    "containerName": "Items",
    "createLeaseContainerIfNotExists": true
}
Note that some of the binding attribute names changed in version 4.x of the Azure Cosmos DB extension.
Here's the JavaScript code:
module.exports = async function (context, documents) {
      context.log('First document Id modified : ', documents[0].id);
    }
module.exports = async function (context, documents) {
      context.log('First document Id modified : ', documents[0].id);
    }
The following example shows how to run a function as data changes in Azure Cosmos DB.
Functions 2.x+
Functions 4.x+
{
    "type": "cosmosDBTrigger",
    "name": "documents",
    "direction": "in",
    "leaseCollectionName": "leases",
    "connectionStringSetting": "<connection-app-setting>",
    "databaseName": "Tasks",
    "collectionName": "Items",
    "createLeaseCollectionIfNotExists": true
}
{
    "type": "cosmosDBTrigger",
    "name": "documents",
    "direction": "in",
    "leaseCollectionName": "leases",
    "connectionStringSetting": "<connection-app-setting>",
    "databaseName": "Tasks",
    "collectionName": "Items",
    "createLeaseCollectionIfNotExists": true
}
{
    "type": "cosmosDBTrigger",
    "name": "documents",
    "direction": "in",
    "leaseContainerName": "leases",
    "connection": "<connection-app-setting>",
    "databaseName": "Tasks",
    "containerName": "Items",
    "createLeaseContainerIfNotExists": true
}
{
    "type": "cosmosDBTrigger",
    "name": "documents",
    "direction": "in",
    "leaseContainerName": "leases",
    "connection": "<connection-app-setting>",
    "databaseName": "Tasks",
    "containerName": "Items",
    "createLeaseContainerIfNotExists": true
}
Note that some of the binding attribute names changed in version 4.x of the Azure Cosmos DB extension.
In therun.ps1file, you have access to the document that triggers the function via the$Documentsparameter.
$Documents
param($Documents, $TriggerMetadata) 

Write-Host "First document Id modified : $($Documents[0].id)"
param($Documents, $TriggerMetadata) 

Write-Host "First document Id modified : $($Documents[0].id)"
The following example shows an Azure Cosmos DB trigger binding. The example depends on whether you use thev1 or v2 Python programming model.
v2
v1
import logging
import azure.functions as func

app = func.FunctionApp()

@app.function_name(name="CosmosDBTrigger")
@app.cosmos_db_trigger(name="documents", 
                       connection="CONNECTION_SETTING",
                       database_name="DB_NAME", 
                       container_name="CONTAINER_NAME", 
                       lease_container_name="leases",
                       create_lease_container_if_not_exists="true")
def test_function(documents: func.DocumentList) -> str:
    if documents:
        logging.info('Document id: %s', documents[0]['id'])
import logging
import azure.functions as func

app = func.FunctionApp()

@app.function_name(name="CosmosDBTrigger")
@app.cosmos_db_trigger(name="documents", 
                       connection="CONNECTION_SETTING",
                       database_name="DB_NAME", 
                       container_name="CONTAINER_NAME", 
                       lease_container_name="leases",
                       create_lease_container_if_not_exists="true")
def test_function(documents: func.DocumentList) -> str:
    if documents:
        logging.info('Document id: %s', documents[0]['id'])
The function writes log messages when Azure Cosmos DB records are modified. Here's the binding data in thefunction.jsonfile:
Functions 2.x+
Functions 4.x+
{
    "type": "cosmosDBTrigger",
    "name": "documents",
    "direction": "in",
    "leaseCollectionName": "leases",
    "connectionStringSetting": "<connection-app-setting>",
    "databaseName": "Tasks",
    "collectionName": "Items",
    "createLeaseCollectionIfNotExists": true
}
{
    "type": "cosmosDBTrigger",
    "name": "documents",
    "direction": "in",
    "leaseCollectionName": "leases",
    "connectionStringSetting": "<connection-app-setting>",
    "databaseName": "Tasks",
    "collectionName": "Items",
    "createLeaseCollectionIfNotExists": true
}
{
    "type": "cosmosDBTrigger",
    "name": "documents",
    "direction": "in",
    "leaseContainerName": "leases",
    "connection": "<connection-app-setting>",
    "databaseName": "Tasks",
    "containerName": "Items",
    "createLeaseContainerIfNotExists": true
}
{
    "type": "cosmosDBTrigger",
    "name": "documents",
    "direction": "in",
    "leaseContainerName": "leases",
    "connection": "<connection-app-setting>",
    "databaseName": "Tasks",
    "containerName": "Items",
    "createLeaseContainerIfNotExists": true
}
Note that some of the binding attribute names changed in version 4.x of the Azure Cosmos DB extension.
Here's the Python code:
import logging
    import azure.functions as func


    def main(documents: func.DocumentList) -> str:
        if documents:
            logging.info('First document Id modified: %s', documents[0]['id'])
import logging
    import azure.functions as func


    def main(documents: func.DocumentList) -> str:
        if documents:
            logging.info('First document Id modified: %s', documents[0]['id'])
Attributes
Bothin-processandisolated processC# libraries use theCosmosDBTriggerAttributeto define the function. C# script instead uses a function.json configuration file as described in theC# scripting guide.
Extension 4.x+
Functions 2.x+
Extension 4.x+
Functions 2.x+
Connection
databaseName
leases
true
false
true
CreateLeaseContainerIfNotExists
true
true
2021-02-16T14:19:29Z
ConnectionStringSetting
databaseName
leases
true
false
CreateLeaseCollectionIfNotExists
true
true
JsonConvert.DefaultSettings
JsonConvert.DefaultSettings
CosmosDBWebJobsStartup
Connection
databaseName
leases
true
false
true
CreateLeaseContainerIfNotExists
true
true
2021-02-16T14:19:29Z
ConnectionStringSetting
databaseName
leases
true
false
CreateLeaseCollectionIfNotExists
true
true
JsonConvert.DefaultSettings
JsonConvert.DefaultSettings
CosmosDBWebJobsStartup
Decorators
Applies only to the Python v2 programming model.
For Python v2 functions defined using a decorator, the following properties on thecosmos_db_trigger:
cosmos_db_trigger
arg_name
database_name
collection_name
connection
For Python functions defined by usingfunction.json, see theConfigurationsection.
Annotations
Extension 4.x+
Functions 2.x+
Because of schema changes in the Azure Cosmos DB SDK, version 4.x of the Azure Cosmos DB extension requiresazure-functions-java-library V3.0.0for Java functions.
Use the@CosmosDBTriggerannotation on parameters that read data from Azure Cosmos DB. The annotation supports the following properties:
@CosmosDBTrigger
Connection
databaseName
leases
true
false
true
CreateLeaseContainerIfNotExists
true
true
From theJava functions runtime library, use the@CosmosDBTriggerannotation on parameters that read data from Azure Cosmos DB. The annotation supports the following properties:
@CosmosDBTrigger
name
connectionStringSetting
databaseName
collectionName
leaseConnectionStringSetting
leaseDatabaseName
leaseCollectionName
createLeaseCollectionIfNotExists
leasesCollectionThroughput
leaseCollectionPrefix
feedPollDelay
leaseAcquireInterval
leaseExpirationInterval
leaseRenewInterval
checkpointInterval
checkpointDocumentCount
maxItemsPerInvocation
startFromBeginning
preferredLocations
Configuration
Applies only to the Python v1 programming model.
Model v4
Model v3
The following table explains the properties that you can set on theoptionsobject passed to theapp.cosmosDB()method. Thetype,direction, andnameproperties don't apply to the v4 model.
options
app.cosmosDB()
type
direction
name
The following table explains the binding configuration properties that you set in thefunction.jsonfile, where properties differ by extension version:
The following table explains the binding configuration properties that you set in thefunction.jsonfile, where properties differ by extension version:
Extension 4.x+
Functions 2.x+
cosmosDBTrigger
in
connection
databaseName
leases
true
false
true
createLeaseContainerIfNotExists
true
true
2021-02-16T14:19:29Z
cosmosDBTrigger
in
connectionStringSetting
databaseName
leases
true
false
createLeaseCollectionIfNotExists
true
true
See theExample sectionfor complete examples.
Usage
The trigger requires a second collection that it uses to storeleasesover the partitions. Both the collection being monitored and the collection that contains the leases must be available for the trigger to work.
Important
If multiple functions are configured to use an Azure Cosmos DB trigger for the same collection, each of the functions should use a dedicated lease collection or specify a differentLeaseCollectionPrefixfor each function. Otherwise, only one of the functions is triggered. For information about the prefix, see theAttributes section.
LeaseCollectionPrefix
Important
If multiple functions are configured to use an Azure Cosmos DB trigger for the same collection, each of the functions should use a dedicated lease collection or specify a differentleaseCollectionPrefixfor each function. Otherwise, only one of the functions is triggered. For information about the prefix, see theAnnotations section.
leaseCollectionPrefix
Important
If multiple functions are configured to use an Azure Cosmos DB trigger for the same collection, each of the functions should use a dedicated lease collection or specify a differentleaseCollectionPrefixfor each function. Otherwise, only one of the functions will be triggered. For information about the prefix, see theConfiguration section.
leaseCollectionPrefix
The trigger doesn't indicate whether a document was updated or inserted, it just provides the document itself. If you need to handle updates and inserts differently, you could do that by implementing timestamp fields for insertion or update.
The parameter type supported by the Azure Cosmos DB trigger depends on the Functions runtime version, the extension package version, and the C# modality used.
Extension 4.x+
Functions 2.x+
Extension 4.x+
Functions 2.x+
SeeBinding typesfor a list of supported types.
SeeBinding typesfor a list of supported types.
When you want the function to process a single document, the Cosmos DB trigger can bind to the following types:
When you want the function to process a batch of documents, the Cosmos DB trigger can bind to the following types:
IEnumerable<T>
T
SeeBinding typesfor a list of supported types.
Connections
TheconnectionStringSetting/connectionandleaseConnectionStringSetting/leaseConnectionproperties are references to environment configuration which specifies how the app should connect to Azure Cosmos DB. They may specify:
connectionStringSetting
connection
leaseConnectionStringSetting
leaseConnection
The name of an application setting containing aconnection string
The name of a shared prefix for multiple application settings, together defining anidentity-based connection. This option is only available for theconnectionandleaseConnectionversions fromversion 4.x or higher of the extension.
connection
leaseConnection
If the configured value is both an exact match for a single setting and a prefix match for other settings, the exact match is used.
Connection string
The connection string for your database account should be stored in an application setting with a name matching the value specified by the connection property of the binding configuration.
Identity-based connections
If you are usingversion 4.x or higher of the extension, instead of using a connection string with a secret, you can have the app use anMicrosoft Entra identity. To do this, you would define settings under a common prefix which maps to the connection property in the trigger and binding configuration.
In this mode, the extension requires the following properties:
<CONNECTION_NAME_PREFIX>__accountEndpoint
Additional properties may be set to customize the connection. SeeCommon properties for identity-based connections.
When hosted in the Azure Functions service, identity-based connections use amanaged identity. The system-assigned identity is used by default, although a user-assigned identity can be specified with thecredentialandclientIDproperties. Note that configuring a user-assigned identity with a resource ID isnotsupported. When run in other contexts, such as local development, your developer identity is used instead, although this can be customized. SeeLocal development with identity-based connections.
credential
clientID
Whatever identity is being used must have permissions to perform the intended actions. For most Azure services, this means you need toassign a role in Azure RBAC, using either built-in or custom roles which provide those permissions.
Important
Some permissions might be exposed by the target service that are not necessary for all contexts. Where possible, adhere to theprinciple of least privilege, granting the identity only required privileges. For example, if the app only needs to be able to read from a data source, use a role that only has permission to read. It would be inappropriate to assign a role that also allows writing to that service, as this would be excessive permission for a read operation. Similarly, you would want to ensure the role assignment is scoped only over the resources that need to be read.
Cosmos DB does not use Azure RBAC for data operations. Instead, it uses aCosmos DB built-in RBAC systemwhich is built on similar concepts. You will need to create a role assignment that provides access to your database account at runtime. Azure RBAC Management roles likeOwnerare not sufficient. The following table shows built-in roles that are recommended when using the Azure Cosmos DB extension in normal operation. Your application may require additional permissions based on the code you write.
1These roles cannot be used in an Azure RBAC role assignment. See theCosmos DB built-in RBAC systemdocumentation for details on how to assign these roles.
2When using identity, Cosmos DB treats container creation as a management operation. It is not available as a data-plane operation for the trigger. You will need to ensure that you create the containers needed by the trigger (including the lease container) before setting up your function.
Next steps
Read an Azure Cosmos DB document (Input binding)
Save changes to an Azure Cosmos DB document (Output binding)
Feedback
Was this page helpful?
Additional resources