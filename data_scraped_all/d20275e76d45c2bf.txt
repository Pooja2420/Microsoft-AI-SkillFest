Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
UseDotNet@2 - Use dotnet v2 task
Article
2025-03-24
5 contributors
In this article
Use this task to acquire a specific version of the .NET Core SDK from the internet or the local cache and add it to the PATH. Use this task to change the version of .NET Core that is used in subsequent tasks. This task also provides proxy support.
Syntax
# Use .NET Core v2
# Acquires a specific version of the .NET Core SDK from the internet or the local cache and adds it to the PATH. Use this task to change the version of .NET Core used in subsequent tasks. Additionally provides proxy support.
- task: UseDotNet@2
  inputs:
    #packageType: 'sdk' # 'runtime' | 'sdk'. Package to install. Default: sdk.
    #useGlobalJson: false # boolean. Optional. Use when packageType = sdk. Use global json. Default: false.
    #workingDirectory: # string. Optional. Use when useGlobalJson = true. Working Directory. 
    #version: # string. Optional. Use when useGlobalJson = false || packageType = runtime. Version. 
    #includePreviewVersions: false # boolean. Optional. Use when useGlobalJson = false  || packageType = runtime. Include Preview Versions. Default: false.
    #requestTimeout: '300000' # string. Set timeout for package download request. Default: 300000.
  # Advanced
    #vsVersion: # string. Compatible Visual Studio version. 
    #installationPath: '$(Agent.ToolsDirectory)/dotnet' # string. Path To Install .Net Core. Default: $(Agent.ToolsDirectory)/dotnet.
    #performMultiLevelLookup: false # boolean. Perform Multi Level Lookup. Default: false.
# Use .NET Core v2
# Acquires a specific version of the .NET Core SDK from the internet or the local cache and adds it to the PATH. Use this task to change the version of .NET Core used in subsequent tasks. Additionally provides proxy support.
- task: UseDotNet@2
  inputs:
    #packageType: 'sdk' # 'runtime' | 'sdk'. Package to install. Default: sdk.
    #useGlobalJson: false # boolean. Optional. Use when packageType = sdk. Use global json. Default: false.
    #workingDirectory: # string. Optional. Use when useGlobalJson = true. Working Directory. 
    #version: # string. Optional. Use when useGlobalJson = false || packageType = runtime. Version. 
    #includePreviewVersions: false # boolean. Optional. Use when useGlobalJson = false  || packageType = runtime. Include Preview Versions. Default: false.
    #requestTimeout: '300000' # string. Set timeout for package download request. Default: 300000.
  # Advanced
    #vsVersion: # string. Compatible Visual Studio version. 
    #installationPath: '$(Agent.ToolsDirectory)/dotnet' # string. Path To Install .Net Core. Default: $(Agent.ToolsDirectory)/dotnet.
    #performMultiLevelLookup: false # boolean. Perform Multi Level Lookup. Default: false.
# Use .NET Core v2
# Acquires a specific version of the .NET Core SDK from the internet or the local cache and adds it to the PATH. Use this task to change the version of .NET Core used in subsequent tasks. Additionally provides proxy support.
- task: UseDotNet@2
  inputs:
    #packageType: 'sdk' # 'runtime' | 'sdk'. Package to install. Default: sdk.
    #useGlobalJson: false # boolean. Optional. Use when packageType = sdk. Use global json. Default: false.
    #workingDirectory: # string. Optional. Use when useGlobalJson = true. Working Directory. 
    #version: # string. Optional. Use when useGlobalJson = false || packageType = runtime. Version. 
    #includePreviewVersions: false # boolean. Optional. Use when useGlobalJson = false  || packageType = runtime. Include Preview Versions. Default: false.
  # Advanced
    #vsVersion: # string. Compatible Visual Studio version. 
    #installationPath: '$(Agent.ToolsDirectory)/dotnet' # string. Path To Install .Net Core. Default: $(Agent.ToolsDirectory)/dotnet.
    #performMultiLevelLookup: false # boolean. Perform Multi Level Lookup. Default: false.
# Use .NET Core v2
# Acquires a specific version of the .NET Core SDK from the internet or the local cache and adds it to the PATH. Use this task to change the version of .NET Core used in subsequent tasks. Additionally provides proxy support.
- task: UseDotNet@2
  inputs:
    #packageType: 'sdk' # 'runtime' | 'sdk'. Package to install. Default: sdk.
    #useGlobalJson: false # boolean. Optional. Use when packageType = sdk. Use global json. Default: false.
    #workingDirectory: # string. Optional. Use when useGlobalJson = true. Working Directory. 
    #version: # string. Optional. Use when useGlobalJson = false || packageType = runtime. Version. 
    #includePreviewVersions: false # boolean. Optional. Use when useGlobalJson = false  || packageType = runtime. Include Preview Versions. Default: false.
  # Advanced
    #vsVersion: # string. Compatible Visual Studio version. 
    #installationPath: '$(Agent.ToolsDirectory)/dotnet' # string. Path To Install .Net Core. Default: $(Agent.ToolsDirectory)/dotnet.
    #performMultiLevelLookup: false # boolean. Perform Multi Level Lookup. Default: false.
# Use .NET Core v2
# Acquires a specific version of the .NET Core SDK from the internet or the local cache and adds it to the PATH. Use this task to change the version of .NET Core used in subsequent tasks. Additionally provides proxy support.
- task: UseDotNet@2
  inputs:
    #packageType: 'sdk' # 'runtime' | 'sdk'. Package to install. Default: sdk.
    #useGlobalJson: false # boolean. Optional. Use when packageType = sdk. Use global json. Default: false.
    #workingDirectory: # string. Optional. Use when useGlobalJson = true. Working Directory. 
    #version: # string. Optional. Use when useGlobalJson = false || packageType = runtime. Version. 
    #includePreviewVersions: false # boolean. Optional. Use when useGlobalJson = false  || packageType = runtime. Include Preview Versions. Default: false.
  # Advanced
    #installationPath: '$(Agent.ToolsDirectory)/dotnet' # string. Path To Install .Net Core. Default: $(Agent.ToolsDirectory)/dotnet.
    #performMultiLevelLookup: false # boolean. Perform Multi Level Lookup. Default: false.
# Use .NET Core v2
# Acquires a specific version of the .NET Core SDK from the internet or the local cache and adds it to the PATH. Use this task to change the version of .NET Core used in subsequent tasks. Additionally provides proxy support.
- task: UseDotNet@2
  inputs:
    #packageType: 'sdk' # 'runtime' | 'sdk'. Package to install. Default: sdk.
    #useGlobalJson: false # boolean. Optional. Use when packageType = sdk. Use global json. Default: false.
    #workingDirectory: # string. Optional. Use when useGlobalJson = true. Working Directory. 
    #version: # string. Optional. Use when useGlobalJson = false || packageType = runtime. Version. 
    #includePreviewVersions: false # boolean. Optional. Use when useGlobalJson = false  || packageType = runtime. Include Preview Versions. Default: false.
  # Advanced
    #installationPath: '$(Agent.ToolsDirectory)/dotnet' # string. Path To Install .Net Core. Default: $(Agent.ToolsDirectory)/dotnet.
    #performMultiLevelLookup: false # boolean. Perform Multi Level Lookup. Default: false.
Inputs
packageType-Package to installstring. Allowed values:runtime,sdk(SDK (contains runtime)). Default value:sdk.
packageType
string
runtime
sdk
sdk
Specifies whether to install only the .NET runtime or the SDK.
useGlobalJson-Use global jsonboolean. Optional. Use whenpackageType = sdk. Default value:false.
useGlobalJson
boolean
packageType = sdk
false
Installs all SDKs fromglobal.jsonfiles. These files are searched fromsystem.DefaultWorkingDirectory. You can change the search root path by setting the working directory input.
global.json
system.DefaultWorkingDirectory
The6.xand6.1.xformat (using.xas a wildcard) described in theUseDotNet@2.versioninput is for use in theversioninput in the task, not thesdk.versionparameter inglobal.json.
6.x
6.1.x
.x
UseDotNet@2.version
version
sdk.version
global.json
If you receive an error message like##[error]Version 6.0.x is not allowed. Allowed version types are: majorVersion.x, majorVersion.minorVersion.x, majorVersion.minorVersion.patchVersion. More details: Only explicit versions and accepted, such as: 2.2.301. Version: 6.0.x is not valid.and you are usingglobal.json, check thesdk.versionin yourglobal.json.
##[error]Version 6.0.x is not allowed. Allowed version types are: majorVersion.x, majorVersion.minorVersion.x, majorVersion.minorVersion.patchVersion. More details: Only explicit versions and accepted, such as: 2.2.301. Version: 6.0.x is not valid.
global.json
sdk.version
global.json
For more information onglobal.json, seeSelect the .NET version to use.
global.json
workingDirectory-Working Directorystring. Optional. Use whenuseGlobalJson = true.
workingDirectory
string
useGlobalJson = true
Specifies the path from whereglobal.jsonfiles should be searched when usinguseGlobalJson. If the value is empty,system.DefaultWorkingDirectorywill be considered as the root path.
global.json
useGlobalJson
system.DefaultWorkingDirectory
version-Versionstring. Optional. Use whenuseGlobalJson = false || packageType = runtime.
version
string
useGlobalJson = false || packageType = runtime
Specifies the version of the .NET Core SDK or runtime to install. The version value formats are shown with examples:
2.x: Installs the latest SDK or runtime with the specified major version,2.
2.x
2
3.1.x: Installs the latest SDK or runtime with the specified major and minor versions,3and1.
3.1.x
3
1
3.1.402: Installs the specified SDK or runtime version,3.1.402.
3.1.402
3.1.402
The version values for SDK or runtime installations are in thereleases.jsonfile. The link to thereleases.jsonof a major/minor version is in thereleases-indexfile. For example, the link to thereleases.json file for version 3.1.
releases.json
releases.json
vsVersion-Compatible Visual Studio versionstring.
vsVersion
string
Specifies a compatible Visual Studio version for a corresponding .NET Core SDK installation. The value must be a complete version number, such as16.6.4, which contains a major version, a minor version, and a patch number.
16.6.4
The version values for SDK or runtime installations, which are used for theversionstring, are in thereleases.jsonfile. The link to thereleases.jsonof a major/minor version is in thereleases-indexfile. For example, the link to thereleases.json file for version 3.1.
version
releases.json
releases.json
includePreviewVersions-Include Preview Versionsboolean. Optional. Use whenuseGlobalJson = false  || packageType = runtime. Default value:false.
includePreviewVersions
boolean
useGlobalJson = false  || packageType = runtime
false
If set totrue, includes preview versions when the task searches for latest runtime/SDK versions, such as searching for2.2.xor3.1.x. This setting is ignored if you specify an exact version, such as3.0.100-preview3-010431.
true
2.2.x
3.1.x
3.0.100-preview3-010431
installationPath-Path To Install .Net Corestring. Default value:$(Agent.ToolsDirectory)/dotnet.
installationPath
string
$(Agent.ToolsDirectory)/dotnet
Specifies where the .NET Core SDK/Runtime should be installed. Different paths can have the following impact on .NET's behavior.
$(Agent.ToolsDirectory): Using this path caches the installation on the agent, as this directory is not cleaned across pipelines. All pipelines running on the agent have access to the previously installed versions.
$(Agent.ToolsDirectory)
$(Agent.TempDirectory): Using this path ensures that a pipeline doesn't use a cached version of .NET Core, as this folder is cleaned after each pipeline.
$(Agent.TempDirectory)
Another path: You can use any path if the agent process has access to the path. This will change the state of the machine and impact all processes running on it.
Note
You can use theMulti-Level Lookupsetting,performMultiLevelLookup, to configure how the .NET host searches for versions.
performMultiLevelLookup
performMultiLevelLookup-Perform Multi Level Lookupboolean. Default value:false.
performMultiLevelLookup
boolean
false
Configures the behavior of the .NET host process when it searches for a suitable shared framework. The values are:
false: The host process searches only for versions that are present in the folder that is specified by the task.
false
true: The host process will search in predefined global locations using multi-level lookup. The default global locations are:C:\Program Files\dotnet(64-bit processes)C:\Program Files (x86)\dotnet(32-bit processes)
true
C:\Program Files\dotnet(64-bit processes)
C:\Program Files\dotnet
C:\Program Files (x86)\dotnet(32-bit processes)
C:\Program Files (x86)\dotnet
Learn more aboutmulti-level SharedFX lookup.
Note
performMultiLevelLookupis only applicable to Windows based agents.
performMultiLevelLookup
requestTimeout-Set timeout for package download requeststring. Default value:300000.
requestTimeout
string
300000
Provide a timeout value for HTTP requests that the task makes to obtain the .NET package. The value is in milliseconds. Default is 300000 milliseconds (5 minutes). Cannot be more than 600000 milliseconds (10 minutes).
Task control options
All tasks have control options in addition to their task inputs. For more information, seeControl options and common task properties.
Output variables
None.
Remarks
The Use .NET Core task acquires a specific version of.NET Corefrom internet or the tools cache and adds it to the PATH of the Azure Pipelines Agent (hosted or private). Use this task to change the version of .NET Core used in subsequent tasks likeDotNetCoreCLI@2.
Adding this task before theDotNetCoreCLI@2in a build definition ensures that the version would be available at the time of building, testing and publishing your app.
The tool installer approach also allows you to decouple from the agent update cycles. If the .NET Core version you are looking for is missing from the Azure Pipelines agent (Hosted or Private), then you can use this task to get the right version installed on the agent.
Requirements
Feedback
Was this page helpful?
Additional resources