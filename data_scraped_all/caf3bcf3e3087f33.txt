Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Enable application monitoring in Azure App Service for .NET, Node.js, Python, and Java applications
Article
2025-02-28
3 contributors
In this article
Autoinstrumentation, also referred to asruntimemonitoring, is the easiest way to enable Application Insights for Azure App Service without requiring any code changes or advanced configurations. Based on your specific scenario, evaluate whether you require more advanced monitoring throughmanual instrumentation.
Note
On March 31, 2025, support for instrumentation key ingestion will end. Instrumentation key ingestion will continue to work, but we'll no longer provide updates or support for the feature.Transition to connection stringsto take advantage ofnew capabilities.
Enable Application Insights
ASP.NET Core
.NET
Java
Node.js
Python (Preview)
Important
If both autoinstrumentation monitoring and manual SDK-based instrumentation are detected, only the manual instrumentation settings are honored. This arrangement prevents duplicate data from being sent. To learn more, seeTroubleshooting.
Note
Only .NET CoreLong Term Support(LTS) releases are supported.
Trim self-contained deploymentsisnot supported. Usemanual instrumentationinstead.
Autoinstrumentation in the Azure portal
SelectApplication Insightsin the left-hand navigation menu of your app service, then selectEnable.
SelectApplication Insightsin the left-hand navigation menu of your app service, then selectEnable.

Create a new resource or select an existing Application Insights resource for this application.NoteWhen you selectOKto create a new resource, you're prompted toApply monitoring settings. SelectingContinuelinks your new Application Insights resource to your app service. Your app service then restarts.
Create a new resource or select an existing Application Insights resource for this application.
Note
When you selectOKto create a new resource, you're prompted toApply monitoring settings. SelectingContinuelinks your new Application Insights resource to your app service. Your app service then restarts.

After you specify which resource to use, you can choose how you want Application Insights to collect data per platform for your application. ASP.NET Core collection options areRecommendedorDisabled.
After you specify which resource to use, you can choose how you want Application Insights to collect data per platform for your application. ASP.NET Core collection options areRecommendedorDisabled.

Important
If both autoinstrumentation monitoring and manual SDK-based instrumentation are detected, only the manual instrumentation settings are honored. This arrangement prevents duplicate data from being sent. To learn more, seeTroubleshooting.
Note
The combination ofAPPINSIGHTS_JAVASCRIPT_ENABLEDandurlCompressionisn't supported. For more information, seeTroubleshooting.
APPINSIGHTS_JAVASCRIPT_ENABLED
urlCompression
Autoinstrumentation in the Azure portal
SelectApplication Insightsin the left-hand navigation menu of your app service, then selectEnable.
SelectApplication Insightsin the left-hand navigation menu of your app service, then selectEnable.

Create a new resource or select an existing Application Insights resource for this application.NoteWhen you selectOKto create a new resource, you're prompted toApply monitoring settings. SelectingContinuelinks your new Application Insights resource to your app service. Your app service then restarts.
Create a new resource or select an existing Application Insights resource for this application.
Note
When you selectOKto create a new resource, you're prompted toApply monitoring settings. SelectingContinuelinks your new Application Insights resource to your app service. Your app service then restarts.

After you specify which resource to use, you can choose how you want Application Insights to collect data per platform for your application. ASP.NET app monitoring is on by default with two different levels of collection,RecommendedandBasic.The following table summarizes the data collected for each route.DataRecommendedBasicAdds CPU, memory, and I/O usage trendsYesNoCollects usage trends, and enables correlation from availability results to transactionsYesYesCollects exceptions unhandled by the host processYesYesImproves APM metrics accuracy under load, when sampling is usedYesYesCorrelates micro-services across request/dependency boundariesYesNo (single-instance APM capabilities only)
After you specify which resource to use, you can choose how you want Application Insights to collect data per platform for your application. ASP.NET app monitoring is on by default with two different levels of collection,RecommendedandBasic.

The following table summarizes the data collected for each route.
Note
With Spring Boot Native Image applications, use theAzure Monitor OpenTelemetry Distro / Application Insights in Spring Boot native image Java applicationproject instead of the Application Insights Java agent solution described here.
This integration addsApplication Insights Java 3.xand autocollects telemetry. You can further apply extra configurations andadd your own custom telemetry.
Autoinstrumentation in the Azure portal
SelectApplication Insightsin the left-hand navigation menu of your app service, then selectEnable.
SelectApplication Insightsin the left-hand navigation menu of your app service, then selectEnable.

Create a new resource or select an existing Application Insights resource for this application.NoteWhen you selectOKto create a new resource, you're prompted toApply monitoring settings. SelectingContinuelinks your new Application Insights resource to your app service. Your app service then restarts.
Create a new resource or select an existing Application Insights resource for this application.
Note
When you selectOKto create a new resource, you're prompted toApply monitoring settings. SelectingContinuelinks your new Application Insights resource to your app service. Your app service then restarts.

Important
If both autoinstrumentation monitoring and manual SDK-based instrumentation are detected, only the manual instrumentation settings are honored. This arrangement prevents duplicate data from being sent. To learn more, see theTroubleshooting section.
Note
You can configure the automatically attached agent using theAPPLICATIONINSIGHTS_CONFIGURATION_CONTENTenvironment variable in the App Service Environment variable blade. For details on the configuration options that can be passed via this environment variable, seeNode.js Configuration.
APPLICATIONINSIGHTS_CONFIGURATION_CONTENT
Application Insights for Node.js is integrated with Azure App Service on Linux - both code-based and custom containers, and with App Service on Windows for code-based apps. The integration is in public preview.
Autoinstrumentation in the Azure portal
SelectApplication Insightsin the left-hand navigation menu of your app service, then selectEnable.
SelectApplication Insightsin the left-hand navigation menu of your app service, then selectEnable.

Create a new resource or select an existing Application Insights resource for this application.NoteWhen you selectOKto create a new resource, you're prompted toApply monitoring settings. SelectingContinuelinks your new Application Insights resource to your app service. Your app service then restarts.
Create a new resource or select an existing Application Insights resource for this application.
Note
When you selectOKto create a new resource, you're prompted toApply monitoring settings. SelectingContinuelinks your new Application Insights resource to your app service. Your app service then restarts.

Once you specified which resource to use, you're all set to go.
Once you specified which resource to use, you're all set to go.

Important
See theSupplemental Terms of Use for Microsoft Azure Previewsfor legal terms that apply to Azure features that are in beta, preview, or otherwise not yet released into general availability.
Note
Only use autoinstrumentation on App Service if you aren't using manual instrumentation of OpenTelemetry in your code, such as theAzure Monitor OpenTelemetry Distroor theAzure Monitor OpenTelemetry Exporter. This is to prevent duplicate data from being sent. To learn more about this, check out thetroubleshooting sectionin this article.
Only use autoinstrumentation on App Service if you aren't using manual instrumentation of OpenTelemetry in your code, such as theAzure Monitor OpenTelemetry Distroor theAzure Monitor OpenTelemetry Exporter. This is to prevent duplicate data from being sent. To learn more about this, check out thetroubleshooting sectionin this article.
Live Metricsisn't available for autoinstrumented Python applications running on Azure App Service. To use this feature, manually instrument your application with theAzure Monitor OpenTelemetry Distroinstead.
Live Metricsisn't available for autoinstrumented Python applications running on Azure App Service. To use this feature, manually instrument your application with theAzure Monitor OpenTelemetry Distroinstead.
Application Insights for Python integrates with code-based Linux Azure App Service. The integration is in public preview and adds the Python SDK, which is in GA. It instruments popular Python libraries in your code, letting you automatically gather and correlate dependencies, logs, and metrics. To see which calls and metrics are collected, seePython libraries
Logging telemetry is collected at the level of the root logger. To learn more about Python's native logging hierarchy, visit thePython logging documentation.
Prerequisites
Python version 3.11 or earlier.
App Service must be deployed as code. Custom containers aren't supported.
Autoinstrumentation in the Azure portal
SelectApplication Insightsin the left-hand navigation menu of your app service, then selectEnable.
SelectApplication Insightsin the left-hand navigation menu of your app service, then selectEnable.

Create a new resource or select an existing Application Insights resource for this application.NoteWhen you selectOKto create a new resource, you're prompted toApply monitoring settings. SelectingContinuelinks your new Application Insights resource to your app service. Your app service then restarts.
Create a new resource or select an existing Application Insights resource for this application.
Note
When you selectOKto create a new resource, you're prompted toApply monitoring settings. SelectingContinuelinks your new Application Insights resource to your app service. Your app service then restarts.

You specify the resource, and it's ready to use.
You specify the resource, and it's ready to use.

Python libraries
After instrumenting, you collect calls and metrics from these Python libraries:
Django instrumentation
In order to use the OpenTelemetry Django instrumentation, you need to set theDJANGO_SETTINGS_MODULEenvironment variable in the App Service settings to point from your app folder to your settings module.
DJANGO_SETTINGS_MODULE
For more information, see theDjango documentation.
Add a community instrumentation library
You can collect more data automatically when you include instrumentation libraries from the OpenTelemetry community.
Caution
We don't support or guarantee the quality of community instrumentation libraries. To suggest one for our distro, post or up-vote in ourfeedback community. Be aware, some are based on experimental OpenTelemetry specs and might introduce future breaking changes.
To add the community OpenTelemetry Instrumentation Library, install it via your app'srequirements.txtfile. OpenTelemetry autoinstrumentation automatically picks up and instruments all installed libraries. Find the list of community librarieshere.
requirements.txt
Manually upgrade the monitoring extension/agent
ASP.NET Core
.NET
Java
Node.js
Python (Preview)
Upgrade from versions 2.8.9 and up
Upgrading from version 2.8.9 happens automatically, without any extra actions. The new monitoring bits are delivered in the background to the target app service, and are picked up on application restart.
To check which version of the extension you're running, go tohttps://yoursitename.scm.azurewebsites.net/ApplicationInsights.
https://yoursitename.scm.azurewebsites.net/ApplicationInsights

Upgrade from versions 1.0.0 - 2.6.5
Starting with version 2.8.9, the preinstalled site extension is used. If you're using an earlier version, you can update via one of two ways:
Upgrade by enabling via the Azure portal: Even if you have the Application Insights extension for App Service installed, the UI shows only theEnablebutton. Behind the scenes, the old private site extension is removed.
Upgrade by enabling via the Azure portal: Even if you have the Application Insights extension for App Service installed, the UI shows only theEnablebutton. Behind the scenes, the old private site extension is removed.
Upgrade through PowerShell:Set the application settings to enable the preinstalled site extensionApplicationInsightsAgent. For more information, seeEnable through PowerShell.Manually remove the private site extension namedApplication Insights extension for Azure App Service.
Upgrade through PowerShell:
Set the application settings to enable the preinstalled site extensionApplicationInsightsAgent. For more information, seeEnable through PowerShell.
ApplicationInsightsAgent
Manually remove the private site extension namedApplication Insights extension for Azure App Service.
If the upgrade is done from a version before 2.5.1, check that theApplicationInsightsDLLs are removed from the application bin folder. For more information, seeTroubleshooting.
ApplicationInsights
Upgrade from versions 2.8.9 and up
Upgrading from version 2.8.9 happens automatically, without any extra actions. The new monitoring bits are delivered in the background to the target app service, and are picked up on application restart.
To check which version of the extension you're running, go tohttps://yoursitename.scm.azurewebsites.net/ApplicationInsights.
https://yoursitename.scm.azurewebsites.net/ApplicationInsights

Upgrade from versions 1.0.0 - 2.6.5
Starting with version 2.8.9, the preinstalled site extension is used. If you're using an earlier version, you can update via one of two ways:
Upgrade by enabling via the Azure portal: Even if you have the Application Insights extension for App Service installed, the UI shows only theEnablebutton. Behind the scenes, the old private site extension is removed.
Upgrade by enabling via the Azure portal: Even if you have the Application Insights extension for App Service installed, the UI shows only theEnablebutton. Behind the scenes, the old private site extension is removed.
Upgrade through PowerShell:Set the application settings to enable the preinstalled site extensionApplicationInsightsAgent. For more information, seeEnable through PowerShell.Manually remove the private site extension namedApplication Insights extension for Azure App Service.
Upgrade through PowerShell:
Set the application settings to enable the preinstalled site extensionApplicationInsightsAgent. For more information, seeEnable through PowerShell.
ApplicationInsightsAgent
Manually remove the private site extension namedApplication Insights extension for Azure App Service.
If the upgrade is done from a version before 2.5.1, check that theApplicationInsightsDLLs are removed from the application bin folder. For more information, seeTroubleshooting.
ApplicationInsights
The Application Insights Java version is updated automatically as part of App Service updates. If you encounter an issue that got fixed in the latest version of the Application Insights Java agent, you can update it manually.
Upload the Java agent jar file to App Service.a. First, get the latest version of Azure CLI by following the instructionshere.b. Next, get the latest version of the Application Insights Java agent by following the instructionshere.c. Then, deploy the Java agent jar file to App Service using the following command:az webapp deploy --src-path applicationinsights-agent-{VERSION_NUMBER}.jar --target-path java/applicationinsights-agent-{VERSION_NUMBER}.jar --type static --resource-group {YOUR_RESOURCE_GROUP} --name {YOUR_APP_SVC_NAME}. Alternatively, you can usethis guideto deploy the agent through the Maven plugin.
Upload the Java agent jar file to App Service.
a. First, get the latest version of Azure CLI by following the instructionshere.
b. Next, get the latest version of the Application Insights Java agent by following the instructionshere.
c. Then, deploy the Java agent jar file to App Service using the following command:az webapp deploy --src-path applicationinsights-agent-{VERSION_NUMBER}.jar --target-path java/applicationinsights-agent-{VERSION_NUMBER}.jar --type static --resource-group {YOUR_RESOURCE_GROUP} --name {YOUR_APP_SVC_NAME}. Alternatively, you can usethis guideto deploy the agent through the Maven plugin.
az webapp deploy --src-path applicationinsights-agent-{VERSION_NUMBER}.jar --target-path java/applicationinsights-agent-{VERSION_NUMBER}.jar --type static --resource-group {YOUR_RESOURCE_GROUP} --name {YOUR_APP_SVC_NAME}
Disable Application Insights via the Application Insights tab in the Azure portal.
Disable Application Insights via the Application Insights tab in the Azure portal.
Once the agent jar file is uploaded, go to App Service configurations. If you need to useStartup Commandfor Linux, include JVM arguments:Startup Commanddoesn't honorJAVA_OPTSfor JavaSE orCATALINA_OPTSfor Tomcat.If you don't useStartup Command, create a new environment variable,JAVA_OPTSfor JavaSE orCATALINA_OPTSfor Tomcat, with the value-javaagent:{PATH_TO_THE_AGENT_JAR}/applicationinsights-agent-{VERSION_NUMBER}.jar.
Once the agent jar file is uploaded, go to App Service configurations. If you need to useStartup Commandfor Linux, include JVM arguments:

Startup Commanddoesn't honorJAVA_OPTSfor JavaSE orCATALINA_OPTSfor Tomcat.
JAVA_OPTS
CATALINA_OPTS
If you don't useStartup Command, create a new environment variable,JAVA_OPTSfor JavaSE orCATALINA_OPTSfor Tomcat, with the value-javaagent:{PATH_TO_THE_AGENT_JAR}/applicationinsights-agent-{VERSION_NUMBER}.jar.
JAVA_OPTS
CATALINA_OPTS
-javaagent:{PATH_TO_THE_AGENT_JAR}/applicationinsights-agent-{VERSION_NUMBER}.jar
To apply the changes, restart the app.
To apply the changes, restart the app.
Note
If you set theJAVA_OPTSfor JavaSE orCATALINA_OPTSfor Tomcat environment variable, you have to disable Application Insights in the Azure portal. Alternatively, if you prefer to enable Application Insights from the Azure portal, make sure that you don't set theJAVA_OPTSfor JavaSE orCATALINA_OPTSfor Tomcat variable in App Service configurations settings.
JAVA_OPTS
CATALINA_OPTS
JAVA_OPTS
CATALINA_OPTS
The Application Insights Node.js version is updated automatically as part of App Service updates andcan't be updated manually.
If you encounter an issue that got fixed in the latest version of theApplication Insights SDK, you can remove autoinstrumentation and manually instrument your application with the most recent SDK version.
The Application Insights Python version is updated automatically as part of App Service updates andcan't be updated manually.
Configure the monitoring extension/agent
ASP.NET Core
.NET
Java
Node.js
Python (Preview)
We currently don't offer options to configure the monitoring extension for ASP.NET Core.
To configure sampling, which you could previously control via theapplicationinsights.configfile, you can now interact with it via application settings with the corresponding prefixMicrosoftAppInsights_AdaptiveSamplingTelemetryProcessor.
MicrosoftAppInsights_AdaptiveSamplingTelemetryProcessor
For example, to change the initial sampling percentage, you can create an application setting ofMicrosoftAppInsights_AdaptiveSamplingTelemetryProcessor_InitialSamplingPercentageand a value of100.
For example, to change the initial sampling percentage, you can create an application setting ofMicrosoftAppInsights_AdaptiveSamplingTelemetryProcessor_InitialSamplingPercentageand a value of100.
MicrosoftAppInsights_AdaptiveSamplingTelemetryProcessor_InitialSamplingPercentage
100
To disable sampling, setMicrosoftAppInsights_AdaptiveSamplingTelemetryProcessor_MinSamplingPercentageto a value of100.
To disable sampling, setMicrosoftAppInsights_AdaptiveSamplingTelemetryProcessor_MinSamplingPercentageto a value of100.
MicrosoftAppInsights_AdaptiveSamplingTelemetryProcessor_MinSamplingPercentage
100
Supported settings include:MicrosoftAppInsights_AdaptiveSamplingTelemetryProcessor_InitialSamplingPercentageMicrosoftAppInsights_AdaptiveSamplingTelemetryProcessor_MinSamplingPercentageMicrosoftAppInsights_AdaptiveSamplingTelemetryProcessor_EvaluationIntervalMicrosoftAppInsights_AdaptiveSamplingTelemetryProcessor_MaxTelemetryItemsPerSecond
Supported settings include:
MicrosoftAppInsights_AdaptiveSamplingTelemetryProcessor_InitialSamplingPercentage
MicrosoftAppInsights_AdaptiveSamplingTelemetryProcessor_InitialSamplingPercentage
MicrosoftAppInsights_AdaptiveSamplingTelemetryProcessor_MinSamplingPercentage
MicrosoftAppInsights_AdaptiveSamplingTelemetryProcessor_MinSamplingPercentage
MicrosoftAppInsights_AdaptiveSamplingTelemetryProcessor_EvaluationInterval
MicrosoftAppInsights_AdaptiveSamplingTelemetryProcessor_EvaluationInterval
MicrosoftAppInsights_AdaptiveSamplingTelemetryProcessor_MaxTelemetryItemsPerSecond
MicrosoftAppInsights_AdaptiveSamplingTelemetryProcessor_MaxTelemetryItemsPerSecond
For the list of supported adaptive sampling telemetry processor settings and definitions, see thecodeandsampling documentation.
For the list of supported adaptive sampling telemetry processor settings and definitions, see thecodeandsampling documentation.
After specifying which resource to use, you can configure the Java agent. If you don't configure the Java agent, default configurations apply.
The fullset of configurationsis available. You just need to paste a validjson file.Exclude the connection string and any configurations that are in preview- you're able to add the items that are currently in preview as they become generally available.
Once you modify the configurations through the Azure portal,APPLICATIONINSIGHTS_CONFIGURATION_FILEenvironment variable are automatically populated and appear in App Service settings panel. This variable contains the full json content that you pasted in the Azure portal configuration text box for your Java app.
APPLICATIONINSIGHTS_CONFIGURATION_FILE

The Node.js agent can be configured using JSON. Set theAPPLICATIONINSIGHTS_CONFIGURATION_CONTENTenvironment variable to the JSON string or set theAPPLICATIONINSIGHTS_CONFIGURATION_FILEenvironment variable to the file path containing the JSON.
APPLICATIONINSIGHTS_CONFIGURATION_CONTENT
APPLICATIONINSIGHTS_CONFIGURATION_FILE
"samplingPercentage": 80,
"enableAutoCollectExternalLoggers": true,
"enableAutoCollectExceptions": true,
"enableAutoCollectHeartbeat": true,
"enableSendLiveMetrics": true,
...
"samplingPercentage": 80,
"enableAutoCollectExternalLoggers": true,
"enableAutoCollectExceptions": true,
"enableAutoCollectHeartbeat": true,
"enableSendLiveMetrics": true,
...
The fullset of configurationsis available. You just need to use a valid json file.
You can configure withOpenTelemetry environment variablessuch as:
OTEL_SERVICE_NAME
OTEL_RESOURCE_ATTRIBUTES
service.name
OTEL_LOGS_EXPORTER
None
OTEL_METRICS_EXPORTER
None
OTEL_TRACES_EXPORTER
None
OTEL_BLRP_SCHEDULE_DELAY
OTEL_BSP_SCHEDULE_DELAY
OTEL_TRACES_SAMPLER_ARG
OTEL_PYTHON_DISABLED_INSTRUMENTATIONS
"psycopg2,fastapi"
Enable client-side monitoring
ASP.NET Core
.NET
Java
Node.js
Python (Preview)
Client-side monitoring is enabled by default for ASP.NET Core apps withRecommendedcollection, regardless of whether the app settingAPPINSIGHTS_JAVASCRIPT_ENABLEDis present.
APPINSIGHTS_JAVASCRIPT_ENABLED
If you want to disable client-side monitoring:
SelectSettings>Configuration.
SelectSettings>Configuration.
UnderApplication settings, create aNew application settingwith the following information:Name:APPINSIGHTS_JAVASCRIPT_ENABLEDValue:false
UnderApplication settings, create aNew application settingwith the following information:
Name:APPINSIGHTS_JAVASCRIPT_ENABLED
APPINSIGHTS_JAVASCRIPT_ENABLED
Value:false
false
Savethe settings. Restart your app.
Savethe settings. Restart your app.
Client-side monitoring is an opt-in for ASP.NET. To enable client-side monitoring:
SelectSettings>Configuration.
SelectSettings>Configuration.
UnderApplication settings, create a new application setting:Name: EnterAPPINSIGHTS_JAVASCRIPT_ENABLED.Value: Entertrue.
UnderApplication settings, create a new application setting:
Name: EnterAPPINSIGHTS_JAVASCRIPT_ENABLED.
Value: Entertrue.
Save the settings and restart your app.
Save the settings and restart your app.
To disable client-side monitoring, either remove the associated key value pair fromApplication settingsor set the value tofalse.
To enable client-side monitoring, the Java agent can inject theBrowser SDK Loader (Preview)into your application's HTML pages, including configuring the appropriate connection string.
For more information, go toConfiguration options: Azure Monitor Application Insights for Java.
To enable client-side monitoring for your Node.js application, you need tomanually add the client-side JavaScript SDK to your application.
To enable client-side monitoring for your Python application, you need tomanually add the client-side JavaScript SDK to your application.
Automate monitoring
In order to enable telemetry collection with Application Insights, only the following Application settings need to be set:
ASP.NET Core
.NET
Java
Node.js
Python (Preview)

Application settings definitions
~2
~3
disabled
recommended
1

Application settings definitions
~2
default
recommended
InstrumentationEngine
~1
InstrumentationEngine
~1

Application settings definitions
~2
~3
0
1
Note
Snapshot Debugger isn't available for Java applications.

Application settings definitions
~2
~3
0
1
Note
Snapshot Debugger isn't available for Node.js applications.

Application settings definitions
~3
Note
Snapshot Debugger isn't available for Python applications.
App Service application settings with Azure Resource Manager
Application settings for Azure App Service can be managed and configured withAzure Resource Manager templates. You can use this method when you deploy new App Service resources with Resource Manager automation or modify the settings of existing resources.
The basic structure of the application settings JSON for an App Service resource:
"resources": [
        {
          "name": "appsettings",
          "type": "config",
          "apiVersion": "2015-08-01",
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites', variables('webSiteName'))]"
          ],
          "tags": {
            "displayName": "Application Insights Settings"
          },
          "properties": {
            "key1": "value1",
            "key2": "value2"
          }
        }
      ]
"resources": [
        {
          "name": "appsettings",
          "type": "config",
          "apiVersion": "2015-08-01",
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites', variables('webSiteName'))]"
          ],
          "tags": {
            "displayName": "Application Insights Settings"
          },
          "properties": {
            "key1": "value1",
            "key2": "value2"
          }
        }
      ]
Automate the creation of an Application Insights resource and link to your newly created App Service resource
To create a Resource Manager template with the default Application Insights settings, begin the process as if you were going to create a new web app with Application Insights enabled.
Create a new App Service resource with your desired web app information. Enable Application Insights on theMonitoringtab.
Create a new App Service resource with your desired web app information. Enable Application Insights on theMonitoringtab.
SelectReview + create. Then selectDownload a template for automation.This option generates the latest Resource Manager template with all required settings configured.
SelectReview + create. Then selectDownload a template for automation.

This option generates the latest Resource Manager template with all required settings configured.

In the following sample, replace all instances ofAppMonitoredSitewith your site name:
AppMonitoredSite
Note
If using Windows, setApplicationInsightsAgent_EXTENSION_VERSIONto~2. If using Linux, setApplicationInsightsAgent_EXTENSION_VERSIONto~3.
ApplicationInsightsAgent_EXTENSION_VERSION
~2
ApplicationInsightsAgent_EXTENSION_VERSION
~3
{
    "resources": [
        {
            "name": "[parameters('name')]",
            "type": "Microsoft.Web/sites",
            "properties": {
                "siteConfig": {
                    "appSettings": [
                        {
                            "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                            "value": "[reference('microsoft.insights/components/AppMonitoredSite', '2015-05-01').InstrumentationKey]"
                        },
                        {
                            "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
                            "value": "[reference('microsoft.insights/components/AppMonitoredSite', '2015-05-01').ConnectionString]"
                        },
                        {
                            "name": "ApplicationInsightsAgent_EXTENSION_VERSION",
                            "value": "~2"
                        }
                    ]
                },
                "name": "[parameters('name')]",
                "serverFarmId": "[concat('/subscriptions/', parameters('subscriptionId'),'/resourcegroups/', parameters('serverFarmResourceGroup'), '/providers/Microsoft.Web/serverfarms/', parameters('hostingPlanName'))]",
                "hostingEnvironment": "[parameters('hostingEnvironment')]"
            },
            "dependsOn": [
                "[concat('Microsoft.Web/serverfarms/', parameters('hostingPlanName'))]",
                "microsoft.insights/components/AppMonitoredSite"
            ],
            "apiVersion": "2016-03-01",
            "location": "[parameters('location')]"
        },
        {
            "apiVersion": "2016-09-01",
            "name": "[parameters('hostingPlanName')]",
            "type": "Microsoft.Web/serverfarms",
            "location": "[parameters('location')]",
            "properties": {
                "name": "[parameters('hostingPlanName')]",
                "workerSizeId": "[parameters('workerSize')]",
                "numberOfWorkers": "1",
                "hostingEnvironment": "[parameters('hostingEnvironment')]"
            },
            "sku": {
                "Tier": "[parameters('sku')]",
                "Name": "[parameters('skuCode')]"
            }
        },
        {
            "apiVersion": "2015-05-01",
            "name": "AppMonitoredSite",
            "type": "microsoft.insights/components",
            "location": "West US 2",
            "properties": {
                "ApplicationId": "[parameters('name')]",
                "Request_Source": "IbizaWebAppExtensionCreate"
            }
        }
    ],
    "parameters": {
        "name": {
            "type": "string"
        },
        "hostingPlanName": {
            "type": "string"
        },
        "hostingEnvironment": {
            "type": "string"
        },
        "location": {
            "type": "string"
        },
        "sku": {
            "type": "string"
        },
        "skuCode": {
            "type": "string"
        },
        "workerSize": {
            "type": "string"
        },
        "serverFarmResourceGroup": {
            "type": "string"
        },
        "subscriptionId": {
            "type": "string"
        }
    },
    "$schema": "https://schema.management.azure.com/schemas/2014-04-01-preview/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0"
}
{
    "resources": [
        {
            "name": "[parameters('name')]",
            "type": "Microsoft.Web/sites",
            "properties": {
                "siteConfig": {
                    "appSettings": [
                        {
                            "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                            "value": "[reference('microsoft.insights/components/AppMonitoredSite', '2015-05-01').InstrumentationKey]"
                        },
                        {
                            "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
                            "value": "[reference('microsoft.insights/components/AppMonitoredSite', '2015-05-01').ConnectionString]"
                        },
                        {
                            "name": "ApplicationInsightsAgent_EXTENSION_VERSION",
                            "value": "~2"
                        }
                    ]
                },
                "name": "[parameters('name')]",
                "serverFarmId": "[concat('/subscriptions/', parameters('subscriptionId'),'/resourcegroups/', parameters('serverFarmResourceGroup'), '/providers/Microsoft.Web/serverfarms/', parameters('hostingPlanName'))]",
                "hostingEnvironment": "[parameters('hostingEnvironment')]"
            },
            "dependsOn": [
                "[concat('Microsoft.Web/serverfarms/', parameters('hostingPlanName'))]",
                "microsoft.insights/components/AppMonitoredSite"
            ],
            "apiVersion": "2016-03-01",
            "location": "[parameters('location')]"
        },
        {
            "apiVersion": "2016-09-01",
            "name": "[parameters('hostingPlanName')]",
            "type": "Microsoft.Web/serverfarms",
            "location": "[parameters('location')]",
            "properties": {
                "name": "[parameters('hostingPlanName')]",
                "workerSizeId": "[parameters('workerSize')]",
                "numberOfWorkers": "1",
                "hostingEnvironment": "[parameters('hostingEnvironment')]"
            },
            "sku": {
                "Tier": "[parameters('sku')]",
                "Name": "[parameters('skuCode')]"
            }
        },
        {
            "apiVersion": "2015-05-01",
            "name": "AppMonitoredSite",
            "type": "microsoft.insights/components",
            "location": "West US 2",
            "properties": {
                "ApplicationId": "[parameters('name')]",
                "Request_Source": "IbizaWebAppExtensionCreate"
            }
        }
    ],
    "parameters": {
        "name": {
            "type": "string"
        },
        "hostingPlanName": {
            "type": "string"
        },
        "hostingEnvironment": {
            "type": "string"
        },
        "location": {
            "type": "string"
        },
        "sku": {
            "type": "string"
        },
        "skuCode": {
            "type": "string"
        },
        "workerSize": {
            "type": "string"
        },
        "serverFarmResourceGroup": {
            "type": "string"
        },
        "subscriptionId": {
            "type": "string"
        }
    },
    "$schema": "https://schema.management.azure.com/schemas/2014-04-01-preview/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0"
}
Enable through PowerShell
To enable the application monitoring through PowerShell, only the underlying application settings must be changed. The following sample enables application monitoring for a website calledAppMonitoredSitein the resource groupAppMonitoredRG. It configures data to be sent to the012345678-abcd-ef01-2345-6789abcdinstrumentation key.
AppMonitoredSite
AppMonitoredRG
012345678-abcd-ef01-2345-6789abcd
Note
We recommend that you use the Azure Az PowerShell module to interact with Azure. To get started, seeInstall Azure PowerShell. To learn how to migrate to the Az PowerShell module, seeMigrate Azure PowerShell from AzureRM to Az.
Note
If using Windows, set ApplicationInsightsAgent_EXTENSION_VERSION to~2. If using Linux, set ApplicationInsightsAgent_EXTENSION_VERSION to~3.
~2
~3
$app = Get-AzWebApp -ResourceGroupName "AppMonitoredRG" -Name "AppMonitoredSite" -ErrorAction Stop
$newAppSettings = @{} # case-insensitive hash map
$app.SiteConfig.AppSettings | %{$newAppSettings[$_.Name] = $_.Value} # preserve non Application Insights application settings.
$newAppSettings["APPINSIGHTS_INSTRUMENTATIONKEY"] = "012345678-abcd-ef01-2345-6789abcd"; # set the Application Insights instrumentation key
$newAppSettings["APPLICATIONINSIGHTS_CONNECTION_STRING"] = "InstrumentationKey=012345678-abcd-ef01-2345-6789abcd"; # set the Application Insights connection string
$newAppSettings["ApplicationInsightsAgent_EXTENSION_VERSION"] = "~2"; # enable the ApplicationInsightsAgent
$app = Set-AzWebApp -AppSettings $newAppSettings -ResourceGroupName $app.ResourceGroup -Name $app.Name -ErrorAction Stop
$app = Get-AzWebApp -ResourceGroupName "AppMonitoredRG" -Name "AppMonitoredSite" -ErrorAction Stop
$newAppSettings = @{} # case-insensitive hash map
$app.SiteConfig.AppSettings | %{$newAppSettings[$_.Name] = $_.Value} # preserve non Application Insights application settings.
$newAppSettings["APPINSIGHTS_INSTRUMENTATIONKEY"] = "012345678-abcd-ef01-2345-6789abcd"; # set the Application Insights instrumentation key
$newAppSettings["APPLICATIONINSIGHTS_CONNECTION_STRING"] = "InstrumentationKey=012345678-abcd-ef01-2345-6789abcd"; # set the Application Insights connection string
$newAppSettings["ApplicationInsightsAgent_EXTENSION_VERSION"] = "~2"; # enable the ApplicationInsightsAgent
$app = Set-AzWebApp -AppSettings $newAppSettings -ResourceGroupName $app.ResourceGroup -Name $app.Name -ErrorAction Stop
Frequently asked questions
This section provides answers to common questions.
What does Application Insights modify in my project?
The details depend on the type of project. The following list is an example for a web application.
Adds files to your project:ApplicationInsights.configai.js
Adds files to your project:
ApplicationInsights.config
ai.js
Installs NuGet packages:Application Insights API: The core APIApplication Insights API for Web Applications: Used to send telemetry from the serverApplication Insights API for JavaScript Applications: Used to send telemetry from the client
Installs NuGet packages:
Application Insights API: The core API
Application Insights API for Web Applications: Used to send telemetry from the server
Application Insights API for JavaScript Applications: Used to send telemetry from the client
Includes assemblies in packages:Microsoft.ApplicationInsightsMicrosoft.ApplicationInsights.Platform
Includes assemblies in packages:
Microsoft.ApplicationInsights
Microsoft.ApplicationInsights.Platform
Inserts items into:Web.configpackages.config
Inserts items into:
Web.config
packages.config
Inserts snippets into the client and server code to initialize them with the Application Insights resource ID. For example, in an MVC app, code is inserted into the main pageViews/Shared/_Layout.cshtml. For new projects only, youadd Application Insights to an existing project manually.
Inserts snippets into the client and server code to initialize them with the Application Insights resource ID. For example, in an MVC app, code is inserted into the main pageViews/Shared/_Layout.cshtml. For new projects only, youadd Application Insights to an existing project manually.
What's the difference between standard metrics from Application Insights vs. Azure App Service metrics?
Application Insights collects telemetry for the requests that made it to the application. If the failure occurs in WebApps/WebServer, and the request didn't reach the user application, Application Insights doesn't have any telemetry about it.
The duration forserverresponsetimecalculated by Application Insights doesn't necessarily match the server response time observed by Web Apps. This behavior is because Application Insights only counts the duration when the request actually reaches the user application. If the request is stuck or queued in WebServer, the waiting time is included in the Web Apps metrics but not in Application Insights metrics.
serverresponsetime
Troubleshooting
Test connectivity between your application host and the ingestion service
Application Insights SDKs and agents send telemetry to get ingested as REST calls to our ingestion endpoints. You can test connectivity from your web server or application host machine to the ingestion service endpoints by using raw REST clients from PowerShell or curl commands. SeeTroubleshoot missing application telemetry in Azure Monitor Application Insights.
ASP.NET Core
.NET
Java
Node.js
Python (Preview)
Note
When you create a web app with theASP.NET Coreruntimes in App Service, it deploys a single static HTML page as a starter website. Wedo notrecommend that you troubleshoot an issue with the default template. Deploy an application before you troubleshoot an issue.
ASP.NET Core
Missing telemetry
Check that theApplicationInsightsAgent_EXTENSION_VERSIONapp setting is set to a value of~2.
Check that theApplicationInsightsAgent_EXTENSION_VERSIONapp setting is set to a value of~2.
ApplicationInsightsAgent_EXTENSION_VERSION
~2
Browse tohttps://yoursitename.scm.azurewebsites.net/ApplicationInsights.Confirm thatApplication Insights Extension StatusisPre-Installed Site Extension, version 2.8.x.xxxx, is running.If it isn't running, follow the instructions in the sectionEnable Application Insights monitoring.Confirm that the status source exists and looks likeStatus source D:\home\LogFiles\ApplicationInsights\status\status_RD0003FF0317B6_4248_1.json.If a similar value isn't present, it means the application isn't currently running or isn't supported. To ensure that the application is running, try manually visiting the application URL/application endpoints, which allows the runtime information to become available.Confirm thatIKeyExistsisTrue. If it'sFalse, addAPPINSIGHTS_INSTRUMENTATIONKEYandAPPLICATIONINSIGHTS_CONNECTION_STRINGwith your ikey GUID to your application settings.If your application refers to any Application Insights packages, enabling the App Service integration might not take effect, and the data might not appear in Application Insights. An example would be if you previously instrumented, or attempted to instrument, your app with theASP.NET Core SDK. To fix the issue, in the Azure portal, turn onInterop with Application Insights SDK.ImportantThis functionality is in preview.The data is sent using a codeless approach, even if the Application Insights SDK was originally used or attempted to be used.ImportantIf the application used the Application Insights SDK to send any telemetry, the telemetry will be disabled. In other words, custom telemetry (for example, anyTrack*()methods) and custom settings (such as sampling) will be disabled.
Browse tohttps://yoursitename.scm.azurewebsites.net/ApplicationInsights.
https://yoursitename.scm.azurewebsites.net/ApplicationInsights

Confirm thatApplication Insights Extension StatusisPre-Installed Site Extension, version 2.8.x.xxxx, is running.If it isn't running, follow the instructions in the sectionEnable Application Insights monitoring.
Confirm thatApplication Insights Extension StatusisPre-Installed Site Extension, version 2.8.x.xxxx, is running.
Pre-Installed Site Extension, version 2.8.x.xxxx, is running.
If it isn't running, follow the instructions in the sectionEnable Application Insights monitoring.
Confirm that the status source exists and looks likeStatus source D:\home\LogFiles\ApplicationInsights\status\status_RD0003FF0317B6_4248_1.json.If a similar value isn't present, it means the application isn't currently running or isn't supported. To ensure that the application is running, try manually visiting the application URL/application endpoints, which allows the runtime information to become available.
Confirm that the status source exists and looks likeStatus source D:\home\LogFiles\ApplicationInsights\status\status_RD0003FF0317B6_4248_1.json.
Status source D:\home\LogFiles\ApplicationInsights\status\status_RD0003FF0317B6_4248_1.json
If a similar value isn't present, it means the application isn't currently running or isn't supported. To ensure that the application is running, try manually visiting the application URL/application endpoints, which allows the runtime information to become available.
Confirm thatIKeyExistsisTrue. If it'sFalse, addAPPINSIGHTS_INSTRUMENTATIONKEYandAPPLICATIONINSIGHTS_CONNECTION_STRINGwith your ikey GUID to your application settings.
Confirm thatIKeyExistsisTrue. If it'sFalse, addAPPINSIGHTS_INSTRUMENTATIONKEYandAPPLICATIONINSIGHTS_CONNECTION_STRINGwith your ikey GUID to your application settings.
True
False
APPINSIGHTS_INSTRUMENTATIONKEY
APPLICATIONINSIGHTS_CONNECTION_STRING
If your application refers to any Application Insights packages, enabling the App Service integration might not take effect, and the data might not appear in Application Insights. An example would be if you previously instrumented, or attempted to instrument, your app with theASP.NET Core SDK. To fix the issue, in the Azure portal, turn onInterop with Application Insights SDK.ImportantThis functionality is in preview.The data is sent using a codeless approach, even if the Application Insights SDK was originally used or attempted to be used.ImportantIf the application used the Application Insights SDK to send any telemetry, the telemetry will be disabled. In other words, custom telemetry (for example, anyTrack*()methods) and custom settings (such as sampling) will be disabled.
If your application refers to any Application Insights packages, enabling the App Service integration might not take effect, and the data might not appear in Application Insights. An example would be if you previously instrumented, or attempted to instrument, your app with theASP.NET Core SDK. To fix the issue, in the Azure portal, turn onInterop with Application Insights SDK.
Important
This functionality is in preview.

The data is sent using a codeless approach, even if the Application Insights SDK was originally used or attempted to be used.
Important
If the application used the Application Insights SDK to send any telemetry, the telemetry will be disabled. In other words, custom telemetry (for example, anyTrack*()methods) and custom settings (such as sampling) will be disabled.
Track*()
Check that theApplicationInsightsAgent_EXTENSION_VERSIONapp setting is set to a value of~3.
Check that theApplicationInsightsAgent_EXTENSION_VERSIONapp setting is set to a value of~3.
ApplicationInsightsAgent_EXTENSION_VERSION
~3
Browse tohttps://your site name.scm.azurewebsites.net/ApplicationInsights.
Browse tohttps://your site name.scm.azurewebsites.net/ApplicationInsights.
https://your site name.scm.azurewebsites.net/ApplicationInsights
Within this site, confirm:The status source exists and looks likeStatus source /var/log/applicationinsights/status_abcde1234567_89_0.json.The valueAuto-Instrumentation enabled successfullyis displayed. If a similar value isn't present, it means the application isn't running or isn't supported. To ensure that the application is running, try manually visiting the application URL/application endpoints, which allows the runtime information to become available.IKeyExistsisTrue. If it'sFalse, addAPPINSIGHTS_INSTRUMENTATIONKEYandAPPLICATIONINSIGHTS_CONNECTION_STRINGwith your ikey GUID to your application settings.
Within this site, confirm:
The status source exists and looks likeStatus source /var/log/applicationinsights/status_abcde1234567_89_0.json.
Status source /var/log/applicationinsights/status_abcde1234567_89_0.json
The valueAuto-Instrumentation enabled successfullyis displayed. If a similar value isn't present, it means the application isn't running or isn't supported. To ensure that the application is running, try manually visiting the application URL/application endpoints, which allows the runtime information to become available.
Auto-Instrumentation enabled successfully
IKeyExistsisTrue. If it'sFalse, addAPPINSIGHTS_INSTRUMENTATIONKEYandAPPLICATIONINSIGHTS_CONNECTION_STRINGwith your ikey GUID to your application settings.
True
False
APPINSIGHTS_INSTRUMENTATIONKEY
APPLICATIONINSIGHTS_CONNECTION_STRING

Default website deployed with web apps doesn't support automatic client-side monitoring
When you create a web app with the ASP.NET Core runtimes in App Service, it deploys a single static HTML page as a starter website. The static webpage also loads an ASP.NET-managed web part in IIS. This behavior allows for testing codeless server-side monitoring but doesn't support automatic client-side monitoring.
If you want to test out codeless server and client-side monitoring for ASP.NET Core in an App Service web app, we recommend following the official guides forcreating an ASP.NET Core web app. Afterwards, use the instructions in the current article to enable monitoring.
PHP and WordPress aren't supported
PHP and WordPress sites aren't supported. There's currently no officially supported SDK/agent for server-side monitoring of these workloads. To track client-side transactions on a PHP or WordPress site, add the client-side JavaScript to your webpages using theJavaScript SDK.
The following table provides an explanation of what these values mean, their underlying causes, and recommended fixes.
AppAlreadyInstrumented:true
Microsoft.ApplicationInsights.AspNetCore
Microsoft.ApplicationInsights
Microsoft.ApplicationInsights
AppAlreadyInstrumented:true
Microsoft.ApplicationsInsights
IKeyExists:false
APPINSIGHTS_INSTRUMENTATIONKEY
Note
When you create a web app with theASP.NETruntimes in App Service, it deploys a single static HTML page as a starter website. We donotrecommend that you troubleshoot an issue with a default template. Deploy an application before you troubleshoot an issue.
ASP.NET
Missing telemetry
Check that theApplicationInsightsAgent_EXTENSION_VERSIONapp setting is set to a value of~2.
Check that theApplicationInsightsAgent_EXTENSION_VERSIONapp setting is set to a value of~2.
ApplicationInsightsAgent_EXTENSION_VERSION
~2
Browse tohttps://yoursitename.scm.azurewebsites.net/ApplicationInsights.Confirm thatApplication Insights Extension StatusisPre-Installed Site Extension, version 2.8.x.xxxxand is running.If it isn't running, follow the instructions toenable Application Insights monitoring.Confirm that the status source exists and looks likeStatus source D:\home\LogFiles\ApplicationInsights\status\status_RD0003FF0317B6_4248_1.json.If a similar value isn't present, it means the application isn't currently running or isn't supported. To ensure that the application is running, try manually visiting the application URL/application endpoints, which allows the runtime information to become available.Confirm thatIKeyExistsistrue.
If not, addAPPINSIGHTS_INSTRUMENTATIONKEYandAPPLICATIONINSIGHTS_CONNECTION_STRINGwith your instrumentation key GUID to your application settings.Confirm that there are no entries forAppAlreadyInstrumented,AppContainsDiagnosticSourceAssembly, andAppContainsAspNetTelemetryCorrelationAssembly.If any of these entries exist, remove the following packages from your application:Microsoft.ApplicationInsights,System.Diagnostics.DiagnosticSource, andMicrosoft.AspNet.TelemetryCorrelation.
Browse tohttps://yoursitename.scm.azurewebsites.net/ApplicationInsights.
https://yoursitename.scm.azurewebsites.net/ApplicationInsights

Confirm thatApplication Insights Extension StatusisPre-Installed Site Extension, version 2.8.x.xxxxand is running.If it isn't running, follow the instructions toenable Application Insights monitoring.
Confirm thatApplication Insights Extension StatusisPre-Installed Site Extension, version 2.8.x.xxxxand is running.
Application Insights Extension Status
Pre-Installed Site Extension, version 2.8.x.xxxx
If it isn't running, follow the instructions toenable Application Insights monitoring.
Confirm that the status source exists and looks likeStatus source D:\home\LogFiles\ApplicationInsights\status\status_RD0003FF0317B6_4248_1.json.If a similar value isn't present, it means the application isn't currently running or isn't supported. To ensure that the application is running, try manually visiting the application URL/application endpoints, which allows the runtime information to become available.
Confirm that the status source exists and looks likeStatus source D:\home\LogFiles\ApplicationInsights\status\status_RD0003FF0317B6_4248_1.json.
Status source D:\home\LogFiles\ApplicationInsights\status\status_RD0003FF0317B6_4248_1.json
If a similar value isn't present, it means the application isn't currently running or isn't supported. To ensure that the application is running, try manually visiting the application URL/application endpoints, which allows the runtime information to become available.
Confirm thatIKeyExistsistrue.
If not, addAPPINSIGHTS_INSTRUMENTATIONKEYandAPPLICATIONINSIGHTS_CONNECTION_STRINGwith your instrumentation key GUID to your application settings.
Confirm thatIKeyExistsistrue.
If not, addAPPINSIGHTS_INSTRUMENTATIONKEYandAPPLICATIONINSIGHTS_CONNECTION_STRINGwith your instrumentation key GUID to your application settings.
IKeyExists
true
APPINSIGHTS_INSTRUMENTATIONKEY
APPLICATIONINSIGHTS_CONNECTION_STRING
Confirm that there are no entries forAppAlreadyInstrumented,AppContainsDiagnosticSourceAssembly, andAppContainsAspNetTelemetryCorrelationAssembly.If any of these entries exist, remove the following packages from your application:Microsoft.ApplicationInsights,System.Diagnostics.DiagnosticSource, andMicrosoft.AspNet.TelemetryCorrelation.
Confirm that there are no entries forAppAlreadyInstrumented,AppContainsDiagnosticSourceAssembly, andAppContainsAspNetTelemetryCorrelationAssembly.
AppAlreadyInstrumented
AppContainsDiagnosticSourceAssembly
AppContainsAspNetTelemetryCorrelationAssembly
If any of these entries exist, remove the following packages from your application:Microsoft.ApplicationInsights,System.Diagnostics.DiagnosticSource, andMicrosoft.AspNet.TelemetryCorrelation.
Microsoft.ApplicationInsights
System.Diagnostics.DiagnosticSource
Microsoft.AspNet.TelemetryCorrelation
Default website deployed with web apps doesn't support automatic client-side monitoring
When you create a web app with the ASP.NET runtimes in App Service, it deploys a single static HTML page as a starter website. The static webpage also loads an ASP.NET-managed web part in IIS. This page allows for testing codeless server-side monitoring but doesn't support automatic client-side monitoring.
If you want to test out codeless server and client-side monitoring for ASP.NET in an App Service web app, we recommend following the official guides forcreating an ASP.NET Framework web app. Afterwards, use the instructions in the current article to enable monitoring.
APPINSIGHTS_JAVASCRIPT_ENABLED and urlCompression not supported
If you useAPPINSIGHTS_JAVASCRIPT_ENABLED=truein cases where content is encoded, you might get errors like:
APPINSIGHTS_JAVASCRIPT_ENABLED=true
500 URL rewrite error.
500.53 URL rewrite module error with the message "Outbound rewrite rules can't be applied when the content of the HTTP response is encoded ('gzip')."
An error occurs because theAPPINSIGHTS_JAVASCRIPT_ENABLEDapplication setting is set totrueand content encoding is present at the same time. This scenario isn't supported yet. The workaround is to removeAPPINSIGHTS_JAVASCRIPT_ENABLEDfrom your application settings. Unfortunately, if client/browser-side JavaScript instrumentation is still required, manual SDK references are needed for your webpages. Follow theinstructionsfor manual instrumentation with the JavaScript SDK.
APPINSIGHTS_JAVASCRIPT_ENABLED
true
APPINSIGHTS_JAVASCRIPT_ENABLED
For the latest information on the Application Insights agent/extension, see therelease notes.
PHP and WordPress aren't supported
PHP and WordPress sites aren't supported. There's currently no officially supported SDK/agent for server-side monitoring of these workloads. To track client-side transactions on a PHP or WordPress site, add the client-side JavaScript to your webpages using theJavaScript SDK.
The following table provides an explanation of what these values mean, their underlying causes, and recommended fixes.
AppAlreadyInstrumented:true
System.Diagnostics.DiagnosticSource
Microsoft.AspNet.TelemetryCorrelation
Microsoft.ApplicationInsights
Microsoft.ApplicationInsights
AppAlreadyInstrumented:true
AppContainsAspNetTelemetryCorrelationAssembly: true
Microsoft.AspNet.TelemetryCorrelation
AppContainsDiagnosticSourceAssembly**:true
System.Diagnostics.DiagnosticSource
IKeyExists:false
APPINSIGHTS_INSTRUMENTATIONKEY
System.IO.FileNotFoundException after 2.8.44 upgrade
The 2.8.44 version of autoinstrumentation upgrades Application Insights SDK to 2.20.0. The Application Insights SDK has an indirect reference toSystem.Runtime.CompilerServices.Unsafe.dllthroughSystem.Diagnostics.DiagnosticSource.dll. If the application hasbinding redirectforSystem.Runtime.CompilerServices.Unsafe.dlland if this library isn't present in the application folder, it might throwSystem.IO.FileNotFoundException.
System.Runtime.CompilerServices.Unsafe.dll
System.Diagnostics.DiagnosticSource.dll
System.Runtime.CompilerServices.Unsafe.dll
System.IO.FileNotFoundException
To resolve this issue, remove the binding redirect entry forSystem.Runtime.CompilerServices.Unsafe.dllfrom the web.config file. If the application wanted to useSystem.Runtime.CompilerServices.Unsafe.dll, set the binding redirect as shown here:
System.Runtime.CompilerServices.Unsafe.dll
System.Runtime.CompilerServices.Unsafe.dll
<dependentAssembly>
    <assemblyIdentity name="System.Runtime.CompilerServices.Unsafe" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />
    <bindingRedirect oldVersion="0.0.0.0-4.0.4.1" newVersion="4.0.4.1" />
</dependentAssembly>
<dependentAssembly>
    <assemblyIdentity name="System.Runtime.CompilerServices.Unsafe" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />
    <bindingRedirect oldVersion="0.0.0.0-4.0.4.1" newVersion="4.0.4.1" />
</dependentAssembly>
As a temporary workaround, you could set the app settingApplicationInsightsAgent_EXTENSION_VERSIONto a value of2.8.37. This setting triggers App Service to use the old Application Insights extension. Temporary mitigations should only be used as an interim.
ApplicationInsightsAgent_EXTENSION_VERSION
2.8.37
Missing telemetry
Check thatApplicationInsightsAgent_EXTENSION_VERSIONapp setting is set to a value of~2on Windows,~3on Linux
Check thatApplicationInsightsAgent_EXTENSION_VERSIONapp setting is set to a value of~2on Windows,~3on Linux
ApplicationInsightsAgent_EXTENSION_VERSION
~2
~3
Examine the log file to see that the agent started successfully: browse tohttps://yoursitename.scm.azurewebsites.net/, under SSH change to the root directory, the log file is located under LogFiles/ApplicationInsights.
Examine the log file to see that the agent started successfully: browse tohttps://yoursitename.scm.azurewebsites.net/, under SSH change to the root directory, the log file is located under LogFiles/ApplicationInsights.
https://yoursitename.scm.azurewebsites.net/

After enabling application monitoring for your Java app, you can validate that the agent is working by looking at the live metrics - even before you deploy and app to App Service you'll see some requests from the environment. Remember that the full set of telemetry is only available when you have your app deployed and running.
After enabling application monitoring for your Java app, you can validate that the agent is working by looking at the live metrics - even before you deploy and app to App Service you'll see some requests from the environment. Remember that the full set of telemetry is only available when you have your app deployed and running.
SetAPPLICATIONINSIGHTS_SELF_DIAGNOSTICS_LEVELenvironment variable todebugif you don't see any errors and there's no telemetry.
SetAPPLICATIONINSIGHTS_SELF_DIAGNOSTICS_LEVELenvironment variable todebugif you don't see any errors and there's no telemetry.
APPLICATIONINSIGHTS_SELF_DIAGNOSTICS_LEVEL
debug
Missing telemetry
Check thatApplicationInsightsAgent_EXTENSION_VERSIONapp setting is set to a value of~2.
Check thatApplicationInsightsAgent_EXTENSION_VERSIONapp setting is set to a value of~2.
ApplicationInsightsAgent_EXTENSION_VERSION
~2
Browse tohttps://yoursitename.scm.azurewebsites.net/ApplicationInsights.Confirm that theApplication Insights Extension StatusisPre-Installed Site Extension, version 2.8.x.xxxx, is running.If it isn't running, follow theenable Application Insights monitoring instructions.Navigate toD:\local\Temp\status.jsonand openstatus.json.Confirm thatSDKPresentis set to false,AgentInitializedSuccessfullyto true andIKeyto have a valid iKey.Example of the JSON file:"AppType":"node.js",

    "MachineName":"c89d3a6d0357",

    "PID":"47",

    "AgentInitializedSuccessfully":true,

    "SDKPresent":false,

    "IKey":"00000000-0000-0000-0000-000000000000",

    "SdkVersion":"1.8.10"IfSDKPresentis true, it means the extension detected that some aspect of the SDK is already present in the Application, and will back-off.
Browse tohttps://yoursitename.scm.azurewebsites.net/ApplicationInsights.
https://yoursitename.scm.azurewebsites.net/ApplicationInsights

Confirm that theApplication Insights Extension StatusisPre-Installed Site Extension, version 2.8.x.xxxx, is running.If it isn't running, follow theenable Application Insights monitoring instructions.
Confirm that theApplication Insights Extension StatusisPre-Installed Site Extension, version 2.8.x.xxxx, is running.
Application Insights Extension Status
Pre-Installed Site Extension, version 2.8.x.xxxx, is running.
If it isn't running, follow theenable Application Insights monitoring instructions.
Navigate toD:\local\Temp\status.jsonand openstatus.json.
Navigate toD:\local\Temp\status.jsonand openstatus.json.
Confirm thatSDKPresentis set to false,AgentInitializedSuccessfullyto true andIKeyto have a valid iKey.
SDKPresent
AgentInitializedSuccessfully
IKey
Example of the JSON file:
"AppType":"node.js",

    "MachineName":"c89d3a6d0357",

    "PID":"47",

    "AgentInitializedSuccessfully":true,

    "SDKPresent":false,

    "IKey":"00000000-0000-0000-0000-000000000000",

    "SdkVersion":"1.8.10"
"AppType":"node.js",

    "MachineName":"c89d3a6d0357",

    "PID":"47",

    "AgentInitializedSuccessfully":true,

    "SDKPresent":false,

    "IKey":"00000000-0000-0000-0000-000000000000",

    "SdkVersion":"1.8.10"
IfSDKPresentis true, it means the extension detected that some aspect of the SDK is already present in the Application, and will back-off.
SDKPresent
Check thatApplicationInsightsAgent_EXTENSION_VERSIONapp setting is set to a value of~3.
Check thatApplicationInsightsAgent_EXTENSION_VERSIONapp setting is set to a value of~3.
ApplicationInsightsAgent_EXTENSION_VERSION
~3
Navigate to/var/log/applicationinsights/and openstatus.json.Confirm thatSDKPresentis set to false,AgentInitializedSuccessfullyto true andIKeyto have a valid iKey.Example of the JSON file:"AppType":"node.js",

    "MachineName":"c89d3a6d0357",

    "PID":"47",

    "AgentInitializedSuccessfully":true,

    "SDKPresent":false,

    "IKey":"00000000-0000-0000-0000-000000000000",

    "SdkVersion":"1.8.10"IfSDKPresentis true, it means the extension detected that some aspect of the SDK is already present in the Application, and will back-off.
Navigate to/var/log/applicationinsights/and openstatus.json.
Confirm thatSDKPresentis set to false,AgentInitializedSuccessfullyto true andIKeyto have a valid iKey.
SDKPresent
AgentInitializedSuccessfully
IKey
Example of the JSON file:
"AppType":"node.js",

    "MachineName":"c89d3a6d0357",

    "PID":"47",

    "AgentInitializedSuccessfully":true,

    "SDKPresent":false,

    "IKey":"00000000-0000-0000-0000-000000000000",

    "SdkVersion":"1.8.10"
"AppType":"node.js",

    "MachineName":"c89d3a6d0357",

    "PID":"47",

    "AgentInitializedSuccessfully":true,

    "SDKPresent":false,

    "IKey":"00000000-0000-0000-0000-000000000000",

    "SdkVersion":"1.8.10"
IfSDKPresentis true, it means the extension detected that some aspect of the SDK is already present in the Application, and will back-off.
SDKPresent
Duplicate telemetry
Only use autoinstrumentation on App Service if you aren't using manual instrumentation of OpenTelemetry in your code, such as theAzure Monitor OpenTelemetry Distroor theAzure Monitor OpenTelemetry Exporter.
Using autoinstrumentation on top of the manual instrumentation could cause duplicate telemetry and increase your cost. In order to use App Service OpenTelemetry autoinstrumentation, first remove manual instrumentation of OpenTelemetry from your code.
If you're seeing unexpected charges or high costs in Application Insights, this guide can help. It covers common causes like high telemetry volume, data ingestion spikes, and misconfigured sampling. It's especially useful if you're troubleshooting issues related to cost spikes, telemetry volume, sampling not working, data caps, high ingestion, or unexpected billing. To get started, seeTroubleshoot high data ingestion in Application Insights.
Missing telemetry
If you're missing telemetry, follow these steps to confirm that autoinstrumentation is enabled correctly.
Confirm that autoinstrumentation is enabled in the Application Insights experience on your App Service resource.
Confirm that autoinstrumentation is enabled in the Application Insights experience on your App Service resource.

Confirm that theApplicationInsightsAgent_EXTENSION_VERSIONapp setting is set to a value of~3and that yourAPPLICATIONINSIGHTS_CONNECTION_STRINGpoints to the appropriate Application Insights resource.
Confirm that theApplicationInsightsAgent_EXTENSION_VERSIONapp setting is set to a value of~3and that yourAPPLICATIONINSIGHTS_CONNECTION_STRINGpoints to the appropriate Application Insights resource.
ApplicationInsightsAgent_EXTENSION_VERSION
~3
APPLICATIONINSIGHTS_CONNECTION_STRING

Check autoinstrumentation diagnostics and status logs.a. Navigate to/var/log/applicationinsights/and open status_*.json.b. Confirm thatAgentInitializedSuccessfullyis set to true andIKeyto have a valid iKey.Example JSON file:"AgentInitializedSuccessfully":true,

    "AppType":"python",

    "MachineName":"c89d3a6d0357",

    "PID":"47",

    "IKey":"00000000-0000-0000-0000-000000000000",

    "SdkVersion":"1.0.0"Theapplicationinsights-extension.logfile in the same folder may show other helpful diagnostics.
Check autoinstrumentation diagnostics and status logs.
a. Navigate to/var/log/applicationinsights/and open status_*.json.
b. Confirm thatAgentInitializedSuccessfullyis set to true andIKeyto have a valid iKey.
AgentInitializedSuccessfully
IKey
Example JSON file:
"AgentInitializedSuccessfully":true,

    "AppType":"python",

    "MachineName":"c89d3a6d0357",

    "PID":"47",

    "IKey":"00000000-0000-0000-0000-000000000000",

    "SdkVersion":"1.0.0"
"AgentInitializedSuccessfully":true,

    "AppType":"python",

    "MachineName":"c89d3a6d0357",

    "PID":"47",

    "IKey":"00000000-0000-0000-0000-000000000000",

    "SdkVersion":"1.0.0"
Theapplicationinsights-extension.logfile in the same folder may show other helpful diagnostics.
applicationinsights-extension.log
Django apps
If your app uses Django and is either failing to start or using incorrect settings, make sure to set theDJANGO_SETTINGS_MODULEenvironment variable. See theDjango Instrumentationsection for details.
DJANGO_SETTINGS_MODULE
For the latest updates and bug fixes,consult the release notes.
Next steps
Enable the .NET Profiler for Azure App Service appson your live app.
Enable Azure diagnosticsto be sent to Application Insights.
Monitor service health metricsto make sure your service is available and responsive.
Receive alert notificationswhenever operational events happen or metrics cross a threshold.
Set up availability testsfor your application.
Feedback
Was this page helpful?
Additional resources