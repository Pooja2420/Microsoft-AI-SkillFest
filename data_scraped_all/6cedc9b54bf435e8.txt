Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Get started with Azure Cosmos DB for NoSQL using JavaScript
Article
2024-10-01
3 contributors
In this article
APPLIES TO:NoSQL
This article shows you how to connect to Azure Cosmos DB for NoSQL using the JavaScript SDK. Once connected, you can perform operations on databases, containers, and items.
Package (npm)|API reference|Library source code|Give Feedback
Prerequisites
An Azure account with an active subscription.Create an account for free.
Azure Cosmos DB for NoSQL account.Create a API for NoSQL account.
Node.js LTS
Azure Command-Line Interface (CLI)orAzure PowerShell
Set up your local project
Create a new directory for your JavaScript project in a bash shell.mkdir cosmos-db-nosql-javascript-samples && cd ./cosmos-db-nosql-javascript-samples
Create a new directory for your JavaScript project in a bash shell.
mkdir cosmos-db-nosql-javascript-samples && cd ./cosmos-db-nosql-javascript-samples
mkdir cosmos-db-nosql-javascript-samples && cd ./cosmos-db-nosql-javascript-samples
Create a new JavaScript application by using thenpm initcommand with theconsoletemplate.npm init -y
Create a new JavaScript application by using thenpm initcommand with theconsoletemplate.
npm init
npm init -y
npm init -y
Install the required dependency for the Azure Cosmos DB for NoSQL JavaScript SDK.npm install @azure/cosmos
Install the required dependency for the Azure Cosmos DB for NoSQL JavaScript SDK.
npm install @azure/cosmos
npm install @azure/cosmos
Connect to Azure Cosmos DB for NoSQL
To connect to the API for NoSQL of Azure Cosmos DB, create an instance of theCosmosClientclass. This class is the starting point to perform all operations against databases.
CosmosClient
To connect to your API for NoSQL account using the Microsoft Entra, use a security principal. The exact type of principal depends on where you host your application code. The table below serves as a quick reference guide.
Import@azure/identity
The@azure/identitynpm package contains core authentication functionality that is shared among all Azure SDK libraries.
Import the@azure/identitynpm package using thenpm installcommand.npm install @azure/identity
Import the@azure/identitynpm package using thenpm installcommand.
npm install
npm install @azure/identity
npm install @azure/identity
In your code editor, add the dependencies.const { DefaultAzureCredential } = require("@azure/identity");
In your code editor, add the dependencies.
const { DefaultAzureCredential } = require("@azure/identity");
const { DefaultAzureCredential } = require("@azure/identity");
Create CosmosClient with default credential implementation
If you're testing on a local machine, or your application will run on Azure services with direct support for managed identities, obtain an OAuth token by creating aDefaultAzureCredentialinstance. Then create a new instance of theCosmosClientclass with theCOSMOS_ENDPOINTenvironment variable and theTokenCredentialobject as parameters.
DefaultAzureCredential
COSMOS_ENDPOINT
const { CosmosClient } = require("@azure/cosmos");
const { DefaultAzureCredential } = require("@azure/identity");

const credential = new DefaultAzureCredential();

const cosmosClient = new CosmosClient({ 
    endpoint, 
    aadCredentials: credential
});
const { CosmosClient } = require("@azure/cosmos");
const { DefaultAzureCredential } = require("@azure/identity");

const credential = new DefaultAzureCredential();

const cosmosClient = new CosmosClient({ 
    endpoint, 
    aadCredentials: credential
});
Build your application
As you build your application, your code will primarily interact with four types of resources:
The API for NoSQL account, which is the unique top-level namespace for your Azure Cosmos DB data.
The API for NoSQL account, which is the unique top-level namespace for your Azure Cosmos DB data.
Databases, which organize the containers in your account.
Databases, which organize the containers in your account.
Containers, which contain a set of individual items in your database.
Containers, which contain a set of individual items in your database.
Items, which represent a JSON document in your container.
Items, which represent a JSON document in your container.
The following diagram shows the relationship between these resources.

Hierarchical diagram showing an Azure Cosmos DB account at the top. The account has two child database nodes. One of the database nodes includes two child container nodes. The other database node includes a single child container node. That single container node has three child item nodes.

Each type of resource is represented by one or more associated classes. Here's a list of the most common classes:
CosmosClient
Database
Container
The following guides show you how to use each of these classes to build your application.
See also
npm package
API reference
Library source code
Give Feedback
Next steps
Create a database in Azure Cosmos DB for NoSQL using JavaScript
Feedback
Was this page helpful?
Additional resources