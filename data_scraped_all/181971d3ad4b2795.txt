Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
AdvancedSecurity-Codeql-Init@1 - Advanced Security Initialize CodeQL v1 task
Article
2025-02-24
3 contributors
In this article
Initializes the CodeQL database in preparation for building.
You must haveGitHub Advanced Security for Azure DevOpsenabled for the repository being scanned.
Syntax
# Advanced Security Initialize CodeQL v1
# Initializes the CodeQL database in preparation for building.
- task: AdvancedSecurity-Codeql-Init@1
  inputs:
    #enableAutomaticCodeQLInstall: false # boolean. Enable automatic CodeQL detection and installation. Default: false.
    #languages: # 'csharp' | 'cpp' | 'go' | 'java' | 'javascript' | 'python' | 'ruby' | 'swift'. Languages to analyze. 
    #querysuite: 'Select a query suite...' # 'Select a query suite...' | 'code-scanning' | 'security-extended' | 'security-experimental' | 'security-and-quality'. CodeQL Query Suite to use for analysis. Default: Select a query suite....
    #buildtype: 'Manual' # 'Manual' | 'None'. Select build mode (manual vs none). Default: Manual.
  # Advanced
    #ram: # string. Options to control RAM usage in MB. 
    #threads: # string. Use this many threads to evaluate queries. 
    #codeqlpathstoignore: # string. Set a list of paths to exclude in the CodeQL analysis. 
    #codeqlpathstoinclude: # string. Set a list of additional paths to include in the CodeQL analysis. 
    #sourcesfolder: # string. Sets the folder that contains the sources to be analyzed. 
    #loglevel: '_' # '0' | '1' | '2' | '_'. Set the log level for the CodeQL analysis. Default: _.
    #configfilepath: # string. Use this to enable custom query analysis in codeql (path must be absolute). 
    #codeqltoolsdirectory: # string. Set a custom CodeQL tools directory (path must be absolute).
# Advanced Security Initialize CodeQL v1
# Initializes the CodeQL database in preparation for building.
- task: AdvancedSecurity-Codeql-Init@1
  inputs:
    #enableAutomaticCodeQLInstall: false # boolean. Enable automatic CodeQL detection and installation. Default: false.
    #languages: # 'csharp' | 'cpp' | 'go' | 'java' | 'javascript' | 'python' | 'ruby' | 'swift'. Languages to analyze. 
    #querysuite: 'Select a query suite...' # 'Select a query suite...' | 'code-scanning' | 'security-extended' | 'security-experimental' | 'security-and-quality'. CodeQL Query Suite to use for analysis. Default: Select a query suite....
    #buildtype: 'Manual' # 'Manual' | 'None'. Select build mode (manual vs none). Default: Manual.
  # Advanced
    #ram: # string. Options to control RAM usage in MB. 
    #threads: # string. Use this many threads to evaluate queries. 
    #codeqlpathstoignore: # string. Set a list of paths to exclude in the CodeQL analysis. 
    #codeqlpathstoinclude: # string. Set a list of additional paths to include in the CodeQL analysis. 
    #sourcesfolder: # string. Sets the folder that contains the sources to be analyzed. 
    #loglevel: '_' # '0' | '1' | '2' | '_'. Set the log level for the CodeQL analysis. Default: _.
    #configfilepath: # string. Use this to enable custom query analysis in codeql (path must be absolute). 
    #codeqltoolsdirectory: # string. Set a custom CodeQL tools directory (path must be absolute).
Inputs
enableAutomaticCodeQLInstall-Enable automatic CodeQL detection and installationboolean. Default value:false.
enableAutomaticCodeQLInstall
boolean
false
Selecting this option will set the task to automatically check for CodeQL on the agent. If CodeQL is not correctly configured or at the latest version, the task will automatically install the latest version.
languages-Languages to analyzestring. Allowed values:csharp,cpp,go,java,javascript,python,ruby,swift.
languages
string
csharp
cpp
go
java
javascript
python
ruby
swift
The programming language to analyze. Multiple languages can be separated by a comma.
- task: AdvancedSecurity-Codeql-Init@1
  inputs:
    languages: 'cpp, java, python'
    # This languages value is valid, the Pipelines editor 
    # doesn't recognize all combinations and only validates
    # correctly when a single language is specified
- task: AdvancedSecurity-Codeql-Init@1
  inputs:
    languages: 'cpp, java, python'
    # This languages value is valid, the Pipelines editor 
    # doesn't recognize all combinations and only validates
    # correctly when a single language is specified
You can set the language here in the task, or you can specify the language in a pipeline variable namedadvancedsecurity.codeql.language. If both are set, the value specified in the task takes precedence.
advancedsecurity.codeql.language
querysuite-CodeQL Query Suite to use for analysis.string. Allowed values:Select a query suite...,code-scanning,security-extended,security-experimental,security-and-quality. Default value:Select a query suite....
querysuite
string
Select a query suite...
code-scanning
security-extended
security-experimental
security-and-quality
Select a query suite...
The query suite, i.e. ruleset, used for analysis. You can specify the value here in the task, or you can specify it in a pipeline variable namedadvancedsecurity.codeql.querysuite. If both are set, the value specified in the task takes precedence. The default value isSelect a query suite...which indicates that the query suite must be specified in theadvancedsecurity.codeql.querysuitevariable.
advancedsecurity.codeql.querysuite
Select a query suite...
advancedsecurity.codeql.querysuite
buildtype-Select build mode (manual vs none)string. Allowed values:Manual,None. Default value:Manual.
buildtype
string
Manual
None
Manual
SpecifyManualif you want to manually build the project before running the CodeQL analysis. SpecifyNoneif you want to run the CodeQL analysis without building the project.
Manual
None
For more information on the different build modes including a comparison on the benefits of each build mode, seeCodeQL code scanning for compiled languages. To useautobuild, add theAdvancedSecurity-CodeQL-Autobuild@1task to your pipeline. For more information, seeCode scanning build mode customization.
autobuild
ram-Options to control RAM usage in MBstring.
ram
string
Set total amount of RAM the query evaluator should be allowed to use.
You can specifyramhere in the task, or you can specify it in a pipeline variable namedadvancedsecurity.codeql.ram. If both are set, the value specified in the task takes precedence.
ram
advancedsecurity.codeql.ram
threads-Use this many threads to evaluate queriesstring.
threads
string
You can pass 0 to use one thread per core on the machine, or -N to leave N cores unused (except still use at least one thread).
You can specifythreadshere in the task, or you can specify it in a pipeline variable namedadvancedsecurity.codeql.threads. If both are set, the value specified in the task takes precedence.
threads
advancedsecurity.codeql.threads
codeqlpathstoignore-Set a list of paths to exclude in the CodeQL analysisstring.
codeqlpathstoignore
string
You can provide multiple paths separated by commas. The paths must be relative to thesourcesfolderwhere CodeQL is running, which defaults to theBuild.SourcesDirectorypipeline environment variable. For example, to ignore the$(Build.SourcesDirectory)/donotscandirectory, setcodeqlpathstoignore: donotscanrather thancodeqlpathstoignore: $(Build.SourcesDirectory)/donotscan.
sourcesfolder
Build.SourcesDirectory
$(Build.SourcesDirectory)/donotscan
codeqlpathstoignore: donotscan
codeqlpathstoignore: $(Build.SourcesDirectory)/donotscan
Important
Thecodeqlpathstoignoresetting applies only when you run the CodeQL tasks on an interpreted language (Python, Ruby, and JavaScript/TypeScript) or when you analyze a compiled language without building the code (currently supported for C# and Java).
codeqlpathstoignore
codeqlpathstoinclude-Set a list of additional paths to include in the CodeQL analysisstring.
codeqlpathstoinclude
string
You can provide multiple paths separated by commas. The paths must be relative to thesourcesfolderwhere CodeQL is running, which defaults to theBuild.SourcesDirectorypipeline environment variable. For example, to include the$(Build.SourcesDirectory)/appdirectory, setcodeqlpathstoinclude: apprather thancodeqlpathstoinclude: $(Build.SourcesDirectory)/app.
sourcesfolder
Build.SourcesDirectory
$(Build.SourcesDirectory)/app
codeqlpathstoinclude: app
codeqlpathstoinclude: $(Build.SourcesDirectory)/app
Important
Thecodeqlpathstoincludesetting applies only when you run the CodeQL tasks on an interpreted language (Python, Ruby, and JavaScript/TypeScript) or when you analyze a compiled language without building the code (currently supported for C# and Java).
codeqlpathstoinclude
sourcesfolder-Sets the folder that contains the sources to be analyzedstring.
sourcesfolder
string
If you don't provide this value, the default sources folder for the pipeline infrastructure is used (provided by theBuild.SourcesDirectoryvariable).
Build.SourcesDirectory
loglevel-Set the log level for the CodeQL analysisstring. Allowed values:0(Warning),1(Verbose),2(Debug),_(Default (Warning)). Default value:_.
loglevel
string
0
1
2
_
_
Specify the level of logging.
You can specifyloglevelhere in the task, or you can specify it in a pipeline variable namedadvancedsecurity.codeql.loglevel. If both are set, the value specified in the task takes precedence, unless the default value_forloglevelin the task is specified. If_is specified, the value fromadvancedsecurity.codeql.loglevelis used if available.
loglevel
advancedsecurity.codeql.loglevel
_
loglevel
_
advancedsecurity.codeql.loglevel
configfilepath-Use this to enable custom query analysis in codeql (path must be absolute).string.
configfilepath
string
If path is not provided, then codeql analysis will proceed with default queries.
codeqltoolsdirectory-Set a custom CodeQL tools directory (path must be absolute)string.
codeqltoolsdirectory
string
If the path is not provided, the default value of$agent_toolsdirectorywill be utilized.
$agent_toolsdirectory
Task control options
All tasks have control options in addition to their task inputs. For more information, seeControl options and common task properties.
Output variables
None.
Remarks
You must haveGitHub Advanced Security for Azure DevOpsenabled for the repository being scanned.
Important
This task is supported with Azure Repos Git repositories only.
The pipeline must call the tasks in the following order.
Initialize CodeQL
AutoBuild (or your custom build tasks)
Perform CodeQL analysis
The AutoBuild task is optional and may be replaced with your custom build tasks. Either AutoBuild or your custom build tasks must be run for your project to be analyzed.
Requirements
See also
Code scanning for GitHub Advanced Security
Feedback
Was this page helpful?
Additional resources