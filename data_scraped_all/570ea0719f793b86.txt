Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
How to enable and usepgvectoron Azure Cosmos DB for PostgreSQL
pgvector
Article
2024-08-14
3 contributors
In this article
APPLIES TO:Azure Cosmos DB for PostgreSQL (powered by theCitus database
extensionto PostgreSQL)
Thepgvectorextension adds an open-source vector similarity search to PostgreSQL.
pgvector
This article introduces us to extra capabilities enabled bypgvector. It covers the concepts of vector similarity and embeddings, and provides guidance on how to enable thepgvectorextension. We learn about, how to create, store and query the vectors.
You might also want to refer to the officialREADMEof the project.
pgvector
pgvector
Enable extension
PostgreSQL extensions must be enabled in your database before you can use them. To enable the extension, run the command from the psql tool to load the packaged objects into your database.
SELECT CREATE_EXTENSION('vector');
SELECT CREATE_EXTENSION('vector');
Note
To disable an extension usedrop_extension()
drop_extension()
Concepts
Vector similarity
Vector similarity is a method used to measure how similar two items are by representing them as vectors, which are series of numbers. Vectors are often used to represent data points, where each element of the vector represents a feature or attribute of the data point.
Vector similarity is commonly calculated using distance metrics, such asEuclidean distanceorcosinesimilarity. Euclidean distance measures the straight-line distance between two vectors in the n-dimensional space, while cosine similarity measures the cosine of the angle between two vectors. The values of similarity metrics typically range between0and1, withhighervalues indicating greater similarity between the vectors.
Euclidean distance
cosine
0
1
higher
Vector similarity is widely used in various applications, such as recommendation systems, text classification, image recognition, and clustering. For example, in recommendation systems, vector similarity can be used to identify similar items based on the user's preferences. In text classification, vector similarity can be used to determine the similarity between two documents or sentences based on their vector representations.
Embeddings
An embedding is a technique of evaluating "relatedness" of text, images, videos, or other types of information. The evaluation permits machine learning models to efficiently identify the relationships and similarities between data, allowing algorithms to identify patterns and make accurate predictions. For example, in a sentiment analysis task, words with similar embeddings might be expected to have similar sentiment scores.
Getting started
Create a tabletblvectorwith anembeddingcolumn of typevector(3)representing a three-dimensional vector.
tblvector
embedding
vector(3)
CREATE TABLE tblvector(
    id bigserial PRIMARY KEY,
    embedding vector(3)
    );
CREATE TABLE tblvector(
    id bigserial PRIMARY KEY,
    embedding vector(3)
    );
Once you generated an embedding using a service like the OpenAI API, you can store the resulting vector in your database. Defining a vector asvector(3)designates[x,y,z] coordinatesin three-dimension plane. The command inserts five new rows into thetblvectortable with the provided embeddings.
vector(3)
[x,y,z] coordinates
tblvector
INSERT INTO tblvector (id, embedding) VALUES (1, '[1,2,3]'), (2, '[4,5,6]'), (3, '[5,4,6]'), (4, '[3,5,7]'), (5, '[7,8,9]');
INSERT INTO tblvector (id, embedding) VALUES (1, '[1,2,3]'), (2, '[4,5,6]'), (3, '[5,4,6]'), (4, '[3,5,7]'), (5, '[7,8,9]');
By using theINSERT INTO ... ON CONFLICTstatement, you can specify an alternative action, such as updating records that match the criteria. It allows you to handle potential conflicts in a more efficient and effective manner.
INSERT INTO ... ON CONFLICT
INSERT INTO tblvector (id, embedding) VALUES (1, '[1,2,3]'), (2, '[4,5,6]')
ON CONFLICT (id) DO UPDATE SET embedding = EXCLUDED.embedding;
INSERT INTO tblvector (id, embedding) VALUES (1, '[1,2,3]'), (2, '[4,5,6]')
ON CONFLICT (id) DO UPDATE SET embedding = EXCLUDED.embedding;
TheDELETEcommand removes rows from a specified table based on the conditions specified in the WHERE clause. When the WHERE clause isn't present, all the rows in the table are deleted.
DELETE
DELETE FROM tblvector WHERE id = 1;
DELETE FROM tblvector WHERE id = 1;
To retrieve vectors and calculate similarity, useSELECTstatements and the built-in vector operators. For instance, the query computes the Euclidean distance (L2 distance) between the given vector and the vectors stored in thetblvectortable, sorts the results by the calculated distance, and returns the closest five most similar items.
SELECT
tblvector
SELECT * FROM tblvector 
ORDER BY embedding <-> '[3,1,2]' 
LIMIT 5;
SELECT * FROM tblvector 
ORDER BY embedding <-> '[3,1,2]' 
LIMIT 5;
The query uses the "<->" operator, which is the "distance operator" used to calculate the distance between two vectors in a multi-dimensional space. The query returns all rows with the distance of less than 6 from the vector [3,1,2].
SELECT * FROM tblvector WHERE embedding <-> '[3,1,2]' < 6;
SELECT * FROM tblvector WHERE embedding <-> '[3,1,2]' < 6;
The command retrieves the average value of the "embedding" column from the "tblvector" table. For example, if the "embedding" column contains word embeddings for a language model, then the average value of these embeddings could be used to represent the entire sentence or document.
SELECT AVG(embedding) FROM tblvector;
SELECT AVG(embedding) FROM tblvector;
Vector operators
pgvectorintroduces six new operators that can be used on vectors:
pgvector
Vector functions
cosine_distance
cosine_distance
Calculates the cosine distance between two vectors.
cosine_distance(vector, vector)
cosine_distance(vector, vector)
vector
Firstvector.
vector
vector
Secondvector.
vector
double precisionas distance between the two provided vectors.
double precision
inner_product
inner_product
Calculates the inner product of two vectors.
inner_product(vector, vector)
inner_product(vector, vector)
vector
Firstvector.
vector
vector
Secondvector
vector
double precisionas inner product of the two vectors.
double precision
l2_distance
l2_distance
Calculates the Euclidean distance (also known as L2) between two vectors.
l2_distance(vector, vector)
l2_distance(vector, vector)
vector
Firstvector.
vector
vector
Secondvector
vector
double precisionas the Euclidean distance between the two vectors.
double precision
l1_distance
l1_distance
Calculates the taxicab distance (also known as L1) between two vectors.
l1_distance(vector, vector)
l1_distance(vector, vector)
vector
Firstvector.
vector
vector
Secondvector
vector
double precisionas the taxicab distance between the two vectors.
double precision
vector_dims(vector)
vector_dims(vector)
Returns the dimensions of a given vector.
vector
Avector.
vector
integerrepresenting the number of dimensions of the given vector.
integer
vector_norms(vector)
vector_norms(vector)
Calculates the Euclidean norm of a given vector.
vector
Avector.
vector
double precisionrepresenting the Euclidean norm of the given vector.
double precision
Vector aggregates
AVG
AVG
Calculates the average of the processed vectors.
vector
Avector.
vector
vectorrepresenting the average of processed vectors.
vector
SUM
SUM
vector
Avector.
vector
vectorrepresenting the sum of processed vectors.
vector
Next Steps
Learn more around performance, indexing and limitations usingpgvector.
pgvector
Optimize performance using pgvector
Feedback
Was this page helpful?
Additional resources