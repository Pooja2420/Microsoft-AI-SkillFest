Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Tutorial: Create an Azure container registry and push a container image
Article
2024-08-29
15 contributors
In this article
This article is part two of a three-part tutorial.Part oneof the tutorial created a Docker container image for a Node.js web application. In this tutorial, you push the image to Azure Container Registry. If you need to create the container image, return toTutorial 1 â Create container image.
Azure Container Registry is your private Docker registry in Azure. In this tutorial, part two of the series, you:
Create an Azure Container Registry instance with the Azure CLI
Tag a container image for your Azure container registry
Upload the image to your registry
In the next article, the last in the series, you deploy the container from your private registry to Azure Container Instances.
Before you begin
You must satisfy the following requirements to complete this tutorial:
Azure CLI: You must have Azure CLI version 2.0.29 or later installed on your local computer. To find the version, runaz --version. If you need to install or upgrade, seeInstall the Azure CLI.
az --version
Docker: This tutorial assumes a basic understanding of core Docker concepts like containers, container images, and basicdockercommands. For a primer on Docker and container basics, see theDocker overview.
docker
Docker: To complete this tutorial, you need Docker installed locally. Docker provides packages that configure the Docker environment onmacOS,Windows, andLinux.
Important
Because the Azure Cloud shell does not include the Docker daemon, youmustinstall both the Azure CLI and Docker Engine on yourlocal computerto complete this tutorial. You cannot use the Azure Cloud Shell for this tutorial.
Create Azure container registry
Before you create your container registry, you need aresource groupto deploy it to. A resource group is a logical collection into which all Azure resources are deployed and managed.
Create a resource group with theaz group createcommand. In the following example, a resource group namedmyResourceGroupis created in theeastusregion:
az group create --name myResourceGroup --location eastus
az group create --name myResourceGroup --location eastus
Once you create the resource group, create an Azure container registry with theaz acr createcommand. The container registry name must be unique within Azure, and contain 5-50 alphanumeric characters. Replace<acrName>with a unique name for your registry:
<acrName>
az acr create --resource-group myResourceGroup --name <acrName> --sku Basic
az acr create --resource-group myResourceGroup --name <acrName> --sku Basic
Here's partial output for a new Azure container registry namedmycontainerregistry082:
{
  "creationDate": "2020-07-16T21:54:47.297875+00:00",
  "id": "/subscriptions/<Subscription ID>/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/mycontainerregistry082",
  "location": "eastus",
  "loginServer": "mycontainerregistry082.azurecr.io",
  "name": "mycontainerregistry082",
  "provisioningState": "Succeeded",
  "resourceGroup": "myResourceGroup",
  "sku": {
    "name": "Basic",
    "tier": "Basic"
  },
  "status": null,
  "storageAccount": null,
  "tags": {},
  "type": "Microsoft.ContainerRegistry/registries"
}
{
  "creationDate": "2020-07-16T21:54:47.297875+00:00",
  "id": "/subscriptions/<Subscription ID>/resourceGroups/myResourceGroup/providers/Microsoft.ContainerRegistry/registries/mycontainerregistry082",
  "location": "eastus",
  "loginServer": "mycontainerregistry082.azurecr.io",
  "name": "mycontainerregistry082",
  "provisioningState": "Succeeded",
  "resourceGroup": "myResourceGroup",
  "sku": {
    "name": "Basic",
    "tier": "Basic"
  },
  "status": null,
  "storageAccount": null,
  "tags": {},
  "type": "Microsoft.ContainerRegistry/registries"
}
The rest of the tutorial refers to<acrName>as a placeholder for the container registry name that you chose in this step.
<acrName>
Sign in to container registry
You must sign in to your Azure Container Registry instance before pushing images to it. Use theaz acr logincommand to complete the operation. You must provide the unique name you chose for the container registry when you created it.
az acr login --name <acrName>
az acr login --name <acrName>
For example:
az acr login --name mycontainerregistry082
az acr login --name mycontainerregistry082
The command returnsLogin Succeededonce completed:
Login Succeeded
Login Succeeded
Login Succeeded
Tag container image
To push a container image to a private registry like Azure Container Registry, you must first tag the image with the full name of the registry's login server.
First, get the full login server name for your Azure container registry. Run the followingaz acr showcommand, and replace<acrName>with the name of registry you created:
<acrName>
az acr show --name <acrName> --query loginServer --output table
az acr show --name <acrName> --query loginServer --output table
For example, if your registry is namedmycontainerregistry082:
az acr show --name mycontainerregistry082 --query loginServer --output table
az acr show --name mycontainerregistry082 --query loginServer --output table
Result
------------------------
mycontainerregistry082.azurecr.io
Result
------------------------
mycontainerregistry082.azurecr.io
Now, display the list of your local images with thedocker imagescommand:
docker images
docker images
Along with any other images you have on your machine, you should see theaci-tutorial-appimage you built in theprevious tutorial:
docker images
docker images
REPOSITORY          TAG       IMAGE ID        CREATED           SIZE
aci-tutorial-app    latest    5c745774dfa9    39 minutes ago    68.1 MB
REPOSITORY          TAG       IMAGE ID        CREATED           SIZE
aci-tutorial-app    latest    5c745774dfa9    39 minutes ago    68.1 MB
Tag theaci-tutorial-appimage with the login server of your container registry. Also, add the:v1tag to the end of the image name to indicate the image version number. Replace<acrLoginServer>with the result of theaz acr showcommand you executed earlier.
:v1
<acrLoginServer>
docker tag aci-tutorial-app <acrLoginServer>/aci-tutorial-app:v1
docker tag aci-tutorial-app <acrLoginServer>/aci-tutorial-app:v1
Rundocker imagesagain to verify the tagging operation:
docker images
docker images
docker images
REPOSITORY                                            TAG       IMAGE ID        CREATED           SIZE
aci-tutorial-app                                      latest    5c745774dfa9    39 minutes ago    68.1 MB
mycontainerregistry082.azurecr.io/aci-tutorial-app    v1        5c745774dfa9    7 minutes ago     68.1 MB
REPOSITORY                                            TAG       IMAGE ID        CREATED           SIZE
aci-tutorial-app                                      latest    5c745774dfa9    39 minutes ago    68.1 MB
mycontainerregistry082.azurecr.io/aci-tutorial-app    v1        5c745774dfa9    7 minutes ago     68.1 MB
Push image to Azure Container Registry
Now that you tagged theaci-tutorial-appimage with the full login server name of your private registry, you can push the image to the registry with thedocker pushcommand. Replace<acrLoginServer>with the full login server name you obtained in the earlier step.
<acrLoginServer>
docker push <acrLoginServer>/aci-tutorial-app:v1
docker push <acrLoginServer>/aci-tutorial-app:v1
Thepushoperation should take a few seconds to a few minutes depending on your internet connection, and output is similar to the following example:
push
docker push mycontainerregistry082.azurecr.io/aci-tutorial-app:v1
docker push mycontainerregistry082.azurecr.io/aci-tutorial-app:v1
The push refers to a repository [mycontainerregistry082.azurecr.io/aci-tutorial-app]
3db9cac20d49: Pushed
13f653351004: Pushed
4cd158165f4d: Pushed
d8fbd47558a8: Pushed
44ab46125c35: Pushed
5bef08742407: Pushed
v1: digest: sha256:ed67fff971da47175856505585dcd92d1270c3b37543e8afd46014d328f05715 size: 1576
The push refers to a repository [mycontainerregistry082.azurecr.io/aci-tutorial-app]
3db9cac20d49: Pushed
13f653351004: Pushed
4cd158165f4d: Pushed
d8fbd47558a8: Pushed
44ab46125c35: Pushed
5bef08742407: Pushed
v1: digest: sha256:ed67fff971da47175856505585dcd92d1270c3b37543e8afd46014d328f05715 size: 1576
List images in Azure Container Registry
To verify that the image you just pushed is indeed in your Azure container registry, list the images in your registry with theaz acr repository listcommand. Replace<acrName>with the name of your container registry.
<acrName>
az acr repository list --name <acrName> --output table
az acr repository list --name <acrName> --output table
For example:
az acr repository list --name mycontainerregistry082 --output table
az acr repository list --name mycontainerregistry082 --output table
Result
----------------
aci-tutorial-app
Result
----------------
aci-tutorial-app
To see thetagsfor a specific image, use theaz acr repository show-tagscommand.
az acr repository show-tags --name <acrName> --repository aci-tutorial-app --output table
az acr repository show-tags --name <acrName> --repository aci-tutorial-app --output table
You should see output similar to the following example:
--------
v1
--------
v1
Next steps
In this tutorial, you prepared an Azure container registry for use with Azure Container Instances, and pushed a container image to the registry. The following steps were completed:
Created an Azure Container Registry instance with the Azure CLI
Tagged a container image for Azure Container Registry
Uploaded an image to Azure Container Registry
Advance to the next tutorial to learn how to deploy the container to Azure using Azure Container Instances:
Deploy container to Azure Container Instances
Feedback
Was this page helpful?
Additional resources