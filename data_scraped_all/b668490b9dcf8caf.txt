Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Encryption at rest using customer-managed keys
Article
2022-03-24
7 contributors
In this article
Encrypting your web app's application data at rest requires an Azure Storage Account and an Azure Key Vault. These services are used when you run your app from a deployment package.
Azure Storage provides encryption at rest. You can use system-provided keys or your own, customer-managed keys. This is where your application data is stored when it's not running in a web app in Azure.
Running from a deployment packageis a deployment feature of App Service. It allows you to deploy your site content from an Azure Storage Account using a Shared Access Signature (SAS) URL.
Key Vault referencesare a security feature of App Service. It allows you to import secrets at runtime as application settings. Use this to encrypt the SAS URL of your Azure Storage Account.
Set up encryption at rest
Create an Azure Storage account
First,create an Azure Storage accountandencrypt it with customer-managed keys. Once the storage account is created, use theAzure Storage Explorerto upload package files.
Next, use the Storage Explorer togenerate an SAS.
Note
Save this SAS URL, this is used later to enable secure access of the deployment package at runtime.
Configure running from a package from your storage account
Once you upload your file to Blob storage and have an SAS URL for the file, set theWEBSITE_RUN_FROM_PACKAGEapplication setting to the SAS URL. The following example does it by using Azure CLI:
WEBSITE_RUN_FROM_PACKAGE
az webapp config appsettings set --name <app-name> --resource-group <resource-group-name> --settings WEBSITE_RUN_FROM_PACKAGE="<your-SAS-URL>"
az webapp config appsettings set --name <app-name> --resource-group <resource-group-name> --settings WEBSITE_RUN_FROM_PACKAGE="<your-SAS-URL>"
Adding this application setting causes your web app to restart. After the app has restarted, browse to it and make sure that the app has started correctly using the deployment package. If the application didn't start correctly, see theRun from package troubleshooting guide.
Encrypt the application setting using Key Vault references
Now you can replace the value of theWEBSITE_RUN_FROM_PACKAGEapplication setting with a Key Vault reference to the SAS-encoded URL. This keeps the SAS URL encrypted in Key Vault, which provides an extra layer of security.
WEBSITE_RUN_FROM_PACKAGE
Use the followingaz keyvault createcommand to create a Key Vault instance.az keyvault create --name "Contoso-Vault" --resource-group <group-name> --location eastus
Use the followingaz keyvault createcommand to create a Key Vault instance.
az keyvault create
az keyvault create --name "Contoso-Vault" --resource-group <group-name> --location eastus
az keyvault create --name "Contoso-Vault" --resource-group <group-name> --location eastus
Followthese instructions to grant your app accessto your key vault:
Followthese instructions to grant your app accessto your key vault:
Use the followingaz keyvault secret setcommand to add your external URL as a secret in your key vault:az keyvault secret set --vault-name "Contoso-Vault" --name "external-url" --value "<SAS-URL>"
Use the followingaz keyvault secret setcommand to add your external URL as a secret in your key vault:
az keyvault secret set
az keyvault secret set --vault-name "Contoso-Vault" --name "external-url" --value "<SAS-URL>"
az keyvault secret set --vault-name "Contoso-Vault" --name "external-url" --value "<SAS-URL>"
Use the followingaz webapp config appsettings setcommand to create theWEBSITE_RUN_FROM_PACKAGEapplication setting with the value as a Key Vault reference to the external URL:az webapp config appsettings set --settings WEBSITE_RUN_FROM_PACKAGE="@Microsoft.KeyVault(SecretUri=https://Contoso-Vault.vault.azure.net/secrets/external-url/<secret-version>"The<secret-version>will be in the output of the previousaz keyvault secret setcommand.
Use the followingaz webapp config appsettings setcommand to create theWEBSITE_RUN_FROM_PACKAGEapplication setting with the value as a Key Vault reference to the external URL:
az webapp config appsettings set
WEBSITE_RUN_FROM_PACKAGE
az webapp config appsettings set --settings WEBSITE_RUN_FROM_PACKAGE="@Microsoft.KeyVault(SecretUri=https://Contoso-Vault.vault.azure.net/secrets/external-url/<secret-version>"
az webapp config appsettings set --settings WEBSITE_RUN_FROM_PACKAGE="@Microsoft.KeyVault(SecretUri=https://Contoso-Vault.vault.azure.net/secrets/external-url/<secret-version>"
The<secret-version>will be in the output of the previousaz keyvault secret setcommand.
<secret-version>
az keyvault secret set
Updating this application setting causes your web app to restart. After the app has restarted, browse to it make sure it has started correctly using the Key Vault reference.
How to rotate the access token
It is best practice to periodically rotate the SAS key of your storage account. To ensure the web app does not inadvertently lose access, you must also update the SAS URL in Key Vault.
Rotate the SAS key by navigating to your storage account in the Azure portal. UnderSettings>Access keys, select the icon to rotate the SAS key.
Rotate the SAS key by navigating to your storage account in the Azure portal. UnderSettings>Access keys, select the icon to rotate the SAS key.
Copy the new SAS URL, and use the following command to set the updated SAS URL in your key vault:az keyvault secret set --vault-name "Contoso-Vault" --name "external-url" --value "<SAS-URL>"
Copy the new SAS URL, and use the following command to set the updated SAS URL in your key vault:
az keyvault secret set --vault-name "Contoso-Vault" --name "external-url" --value "<SAS-URL>"
az keyvault secret set --vault-name "Contoso-Vault" --name "external-url" --value "<SAS-URL>"
Update the key vault reference in your application setting to the new secret version:az webapp config appsettings set --settings WEBSITE_RUN_FROM_PACKAGE="@Microsoft.KeyVault(SecretUri=https://Contoso-Vault.vault.azure.net/secrets/external-url/<secret-version>"The<secret-version>will be in the output of the previousaz keyvault secret setcommand.
Update the key vault reference in your application setting to the new secret version:
az webapp config appsettings set --settings WEBSITE_RUN_FROM_PACKAGE="@Microsoft.KeyVault(SecretUri=https://Contoso-Vault.vault.azure.net/secrets/external-url/<secret-version>"
az webapp config appsettings set --settings WEBSITE_RUN_FROM_PACKAGE="@Microsoft.KeyVault(SecretUri=https://Contoso-Vault.vault.azure.net/secrets/external-url/<secret-version>"
The<secret-version>will be in the output of the previousaz keyvault secret setcommand.
<secret-version>
az keyvault secret set
How to revoke the web app's data access
There are two methods to revoke the web app's access to the storage account.
Rotate the SAS key for the Azure Storage account
If the SAS key for the storage account is rotated, the web app will no longer have access to the storage account, but it will continue to run with the last downloaded version of the package file. Restart the web app to clear the last downloaded version.
Remove the web app's access to Key Vault
You can revoke the web app's access to the site data by disabling the web app's access to Key Vault. To do this, remove the access policy for the web app's identity. This is the same identity you created earlier while configuring key vault references.
Summary
Your application files are now encrypted at rest in your storage account. When your web app starts, it retrieves the SAS URL from your key vault. Finally, the web app loads the application files from the storage account.
If you need to revoke the web app's access to your storage account, you can either revoke access to the key vault or rotate the storage account keys, both of which invalidate the SAS URL.
Frequently Asked Questions
Is there any additional charge for running my web app from the deployment package?
Only the cost associated with the Azure Storage Account and any applicable egress charges.
How does running from the deployment package affect my web app?
Running your app from the deployment package makeswwwroot/read-only. Your app receives an error when it attempts to write to this directory.
wwwroot/
TAR and GZIP formats are not supported.
This feature is not compatible with local cache.
Next steps
Key Vault references for App Service
Azure Storage encryption for data at rest
Feedback
Was this page helpful?
Additional resources