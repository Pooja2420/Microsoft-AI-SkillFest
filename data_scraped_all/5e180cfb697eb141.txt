Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Service Fabric application lifecycle
Article
2024-08-23
14 contributors
In this article
As with other platforms, an application on Azure Service Fabric usually goes through the following phases: design, development, testing, deployment, upgrading, maintenance, and removal. Service Fabric provides first-class support for the full application lifecycle of cloud applications, from development through deployment, daily management, and maintenance to eventual decommissioning. The service model enables several different roles to participate independently in the application lifecycle. This article provides an overview of the APIs and how they are used by the different roles throughout the phases of the Service Fabric application lifecycle.
Check this page for a training video that describes how to manage your application lifecycle:
Important
There are two CLI utilities used to interact with Service Fabric.Azure CLIis used to manage Azure resources, such as an Azure-hosted Service Fabric cluster.Service Fabric CLIis used to directly connect to the Service Fabric cluster (regardless of where it's hosted) and manage the cluster, applications, and services.
Service model roles
The service model roles are:
Service developer: Develops modular and generic services that can be repurposed and used in multiple applications of the same type or different types. For example, a queue service can be used for creating a ticketing application (helpdesk) or an e-commerce application (shopping cart).
Application developer: Creates applications by integrating a collection of services to satisfy certain specific requirements or scenarios. For example, an e-commerce website might integrate âJSON Stateless Front-End Service,â âAuction Stateful Service,â and âQueue Stateful Serviceâ to build an auctioning solution.
Application administrator: Makes decisions on the application configuration (filling in the configuration template parameters), deployment (mapping to available resources), and quality of service. For example, an application administrator decides the language locale (English for the United States or Japanese for Japan, for example) of the application. A different deployed application can have different settings.
Operator: Deploys applications based on the application configuration and requirements specified by the application administrator. For example, an operator provisions and deploys the application and ensures that it is running in Azure. Operators monitor application health and performance information and maintain the physical infrastructure as needed.
Develop
Aservice developerdevelops different types of services using theReliable ActorsorReliable Servicesprogramming model.
Aservice developerdeclaratively describes the developed service types in a service manifest file consisting of one or more code, configuration, and data packages.
Anapplication developerthen builds an application using different service types.
Anapplication developerdeclaratively describes the application type in an application manifest by referencing the service manifests of the constituent services and appropriately overriding and parameterizing different configuration and deployment settings of the constituent services.
SeeGet started with Reliable ActorsandGet started with Reliable Servicesfor examples.
Deploy
Anapplication administratortailors the application type to a specific application to be deployed to a Service Fabric cluster by specifying the appropriate parameters of theApplicationTypeelement in the application manifest.
Anoperatoruploads the application package to the cluster image store by using theCopyApplicationPackagemethodor theCopy-ServiceFabricApplicationPackagecmdlet. The application package contains the application manifest and the collection of service packages. Service Fabric deploys applications from the application package stored in the image store, which can be an Azure blob store or the Service Fabric system service.
Theoperatorthen provisions the application type in the target cluster from the uploaded application package using theProvisionApplicationAsyncmethod, theRegister-ServiceFabricApplicationTypecmdlet, or theProvision an ApplicationREST operation.
After provisioning the application, anoperatorstarts the application with the parameters supplied by theapplication administratorusing theCreateApplicationAsyncmethod, theNew-ServiceFabricApplicationcmdlet, or theCreate ApplicationREST operation.
After the application has been deployed, anoperatoruses theCreateServiceAsyncmethod, theNew-ServiceFabricServicecmdlet, or theCreate ServiceREST operationto create new service instances for the application based on available service types.
The application is now running in the Service Fabric cluster.
SeeDeploy an applicationfor examples.
Test
After deploying to the local development cluster or a test cluster, aservice developerruns the built-in failover test scenario by using theFailoverTestScenarioParametersandFailoverTestScenarioclasses, or theInvoke-ServiceFabricFailoverTestScenariocmdlet. The failover test scenario runs a specified service through important transitions and failovers to ensure that it's still available and working.
Theservice developerthen runs the built-in chaos test scenario using theChaosTestScenarioParametersandChaosTestScenarioclasses, or theInvoke-ServiceFabricChaosTestScenariocmdlet. The chaos test scenario randomly induces multiple node, code package, and replica faults into the cluster.
Theservice developertests service-to-service communicationby authoring test scenarios that move primary replicas around the cluster.
SeeIntroduction to the Fault Analysis Servicefor more information.
Upgrade
Aservice developerupdates the constituent services of the instantiated application and/or fixes bugs and provides a new version of the service manifest.
Anapplication developeroverrides and parameterizes the configuration and deployment settings of the consistent services and provides a new version of the application manifest. The application developer then incorporates the new versions of the service manifests into the application and provides a new version of the application type in an updated application package.
Anapplication administratorincorporates the new version of the application type into the target application by updating the appropriate parameters.
Anoperatoruploads the updated application package to the cluster image store using theCopyApplicationPackagemethodor theCopy-ServiceFabricApplicationPackagecmdlet. The application package contains the application manifest and the collection of service packages.
Anoperatorprovisions the new version of the application in the target cluster by using theProvisionApplicationAsyncmethod, theRegister-ServiceFabricApplicationTypecmdlet, or theProvision an ApplicationREST operation.
Anoperatorupgrades the target application to the new version using theUpgradeApplicationAsyncmethod, theStart-ServiceFabricApplicationUpgradecmdlet, or theUpgrade an ApplicationREST operation.
Anoperatorchecks the progress of upgrade using theGetApplicationUpgradeProgressAsyncmethod, theGet-ServiceFabricApplicationUpgradecmdlet, or theGet Application Upgrade ProgressREST operation.
If necessary, theoperatormodifies and reapplies the parameters of the current application upgrade using theUpdateApplicationUpgradeAsyncmethod, theUpdate-ServiceFabricApplicationUpgradecmdlet, or theUpdate Application UpgradeREST operation.
If necessary, theoperatorrolls back the current application upgrade using theRollbackApplicationUpgradeAsyncmethod, theStart-ServiceFabricApplicationRollbackcmdlet, or theRollback Application UpgradeREST operation.
Service Fabric upgrades the target application running in the cluster without losing the availability of any of its constituent services.
See theApplication upgrade tutorialfor examples.
Maintain
For operating system upgrades and patches, Service Fabric interfaces with the Azure infrastructure to guarantee availability of all the applications running in the cluster.
For upgrades and patches to the Service Fabric platform, Service Fabric upgrades itself without losing availability of any of the applications running on the cluster.
Anapplication administratorapproves the addition or removal of nodes from a cluster after analyzing historical capacity utilization data and projected future demand.
Anoperatoradds and removes nodes specified by theapplication administrator.
When new nodes are added to or existing nodes are removed from the cluster, Service Fabric automatically load-balances the running applications across all nodes in the cluster to achieve optimal performance.
Remove
Anoperatorcan delete a specific instance of a running service in the cluster without removing the entire application using theDeleteServiceAsyncmethod, theRemove-ServiceFabricServicecmdlet, or theDelete ServiceREST operation.
Anoperatorcan also delete an application instance and all of its services using theDeleteApplicationAsyncmethod, theRemove-ServiceFabricApplicationcmdlet, or theDelete ApplicationREST operation.
Once the application and services have stopped, theoperatorcan unprovision the application type using theUnprovisionApplicationAsyncmethod, theUnregister-ServiceFabricApplicationTypecmdlet, or theUnprovision an ApplicationREST operation. Unprovisioning the application type does not remove the application package from the ImageStore.
Anoperatorremoves the application package from the ImageStore using theRemoveApplicationPackagemethodor theRemove-ServiceFabricApplicationPackagecmdlet.
SeeDeploy an applicationfor examples.
Preserving disk space in cluster image store
The ImageStoreService keeps copied and provisioned packages, which can lead to accumulation of files. File accumulation can cause the ImageStoreService (fabric:/System/ImageStoreService) to fill up the disk and can increase the build time for ImageStoreService replicas.
To avoid file accumulation, use the following provisioning sequence:
Copy package to ImageStore, and use the compress option
Copy package to ImageStore, and use the compress option
Provision the package
Provision the package
Remove the package in the image store
Remove the package in the image store
Upgrade the application/cluster
Upgrade the application/cluster
Unprovision the old version
Unprovision the old version
Steps 3 and 5 in the procedure above prevent the accumulation of files in the image store.
Configuration for automatic cleanup
You can automate step 3 above using PowerShell or XML. This will cause the application package to be automatically deleted after the successful registration of the application type.
PowerShell:
Register-ServiceFabricApplicationTye -ApplicationPackageCleanupPolicy Automatic
Register-ServiceFabricApplicationTye -ApplicationPackageCleanupPolicy Automatic
XML:
<Section Name="Management">
  <Parameter Name="CleanupApplicationPackageOnProvisionSuccess" Value="True" />
</Section>
<Section Name="Management">
  <Parameter Name="CleanupApplicationPackageOnProvisionSuccess" Value="True" />
</Section>
You can automate step 5 above using XML. This will cause unused application types to be automatically unregistered.
<Section Name="Management">
  <Parameter Name="CleanupUnusedApplicationTypes" Value="true" />
  <Parameter Name="PeriodicCleanupUnusedApplicationTypes" Value="true" />     
  <Parameter Name="TriggerAppTypeCleanupOnProvisionSuccess" Value="true" />
  <Parameter Name="MaxUnusedAppTypeVersionsToKeep" Value="3" />
</Section>
<Section Name="Management">
  <Parameter Name="CleanupUnusedApplicationTypes" Value="true" />
  <Parameter Name="PeriodicCleanupUnusedApplicationTypes" Value="true" />     
  <Parameter Name="TriggerAppTypeCleanupOnProvisionSuccess" Value="true" />
  <Parameter Name="MaxUnusedAppTypeVersionsToKeep" Value="3" />
</Section>
Cleaning up files and data on nodes
The replication of application files will distribute eventually the files to all nodes depending on balancing actions. This can create disk pressure depending on the number of applications and their file size.
Even when no active instance is running on a node, the files from a former instance will be kept. The same is true for data from reliable collections used by stateful services. This serves the purpose of higher availability. In case of a new application instance on the same node no files must be copied. For reliable collections, only the delta must be replicated.
To remove the application binaries completely you have to unregister the application type.
Recommendations to reduce disk pressure:
Remove-ServiceFabricApplicationPackagethis removes the package from temporary upload location.
Unregister-ServiceFabricApplicationTypereleases storage space by removing the application type files from image store service and all nodes. The deletion manager runs every hour per default.
CleanupUnusedApplicationTypescleans up old unused application versions automatically.{
  "name": "Management",
  "parameters": [
    {
      "name": "CleanupUnusedApplicationTypes",
      "value": true
    },
    {
      "name": "MaxUnusedAppTypeVersionsToKeep",
      "value": "3"
    }
  ]
}
{
  "name": "Management",
  "parameters": [
    {
      "name": "CleanupUnusedApplicationTypes",
      "value": true
    },
    {
      "name": "MaxUnusedAppTypeVersionsToKeep",
      "value": "3"
    }
  ]
}
{
  "name": "Management",
  "parameters": [
    {
      "name": "CleanupUnusedApplicationTypes",
      "value": true
    },
    {
      "name": "MaxUnusedAppTypeVersionsToKeep",
      "value": "3"
    }
  ]
}
Remove-ServiceFabricClusterPackageremoves old unused runtime installation binaries.
Note
A feature is under development to allow Service Fabric to delete application folders once the application is evacuated from the node.
Next steps
For more information on developing, testing, and managing Service Fabric applications and services, see:
Reliable Actors
Reliable Services
Deploy an application
Application upgrade
Testability overview
Feedback
Was this page helpful?
Additional resources