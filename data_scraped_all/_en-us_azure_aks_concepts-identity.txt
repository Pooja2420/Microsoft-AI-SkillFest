Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Access and identity options for Azure Kubernetes Service (AKS)
Article
2024-08-01
28 contributors
In this article
You can authenticate, authorize, secure, and control access to Kubernetes clusters in a variety of ways:
Using Kubernetes role-based access control (Kubernetes RBAC), you can grant users, groups, and service accounts access to only the resources they need.
With Azure Kubernetes Service (AKS), you can further enhance the security and permissions structure using Microsoft Entra ID and Azure RBAC.
Kubernetes RBAC and AKS help you secure your cluster access and provide only the minimum required permissions to developers and operators.
This article introduces the core concepts that help you authenticate and assign permissions in AKS.
Kubernetes RBAC
Kubernetes RBAC provides granular filtering of user actions. With this control mechanism:
You assign users or user groups permission to create and modify resources or view logs from running application workloads.
You can scope permissions to a single namespace or across the entire AKS cluster.
You createrolesto define permissions, and then assign those roles to users withrole bindings.
For more information, seeUsing Kubernetes RBAC authorization.
Roles and ClusterRoles
Before assigning permissions to users with Kubernetes RBAC, you'll define user permissions as aRole. Grant permissions within a namespace using roles.
Note
Kubernetes rolesgrantpermissions; they don'tdenypermissions.
To grant permissions across the entire cluster or to cluster resources outside a given namespace, you can instead useClusterRoles.
A ClusterRole grants and applies permissions to resources across the entire cluster, not a specific namespace.
RoleBindings and ClusterRoleBindings
Once you've defined roles to grant permissions to resources, you assign those Kubernetes RBAC permissions with aRoleBinding. If your AKS clusterintegrates with Microsoft Entra ID, RoleBindings grant permissions to Microsoft Entra users to perform actions within the cluster. See how inControl access to cluster resources using Kubernetes role-based access control and Microsoft Entra identities.
Assign roles to users for a given namespace using RoleBindings. With RoleBindings, you can logically segregate a single AKS cluster, only enabling users to access the application resources in their assigned namespace.
To bind roles across the entire cluster, or to cluster resources outside a given namespace, you instead useClusterRoleBindings.
With a ClusterRoleBinding, you bind roles to users and apply to resources across the entire cluster, not a specific namespace. This approach lets you grant administrators or support engineers access to all resources in the AKS cluster.
Note
Microsoft/AKS performs any cluster actions with user consent under a built-in Kubernetes roleaks-serviceand built-in role bindingaks-service-rolebinding.
aks-service
aks-service-rolebinding
This role enables AKS to troubleshoot and diagnose cluster issues, but can't modify permissions nor create roles or role bindings, or other high privilege actions. Role access is only enabled under active support tickets with just-in-time (JIT) access. Read more aboutAKS support policies.
Kubernetes service accounts
Service accountsare one of the primary user types in Kubernetes. The Kubernetes API holds and manages service accounts. Service account credentials are stored as Kubernetes secrets, allowing them to be used by authorized pods to communicate with the API Server. Most API requests provide an authentication token for a service account or a normal user account.
Normal user accounts allow more traditional access for human administrators or developers, not just services and processes. While Kubernetes doesn't provide an identity management solution to store regular user accounts and passwords, you can integrate external identity solutions into Kubernetes. For AKS clusters, this integrated identity solution is Microsoft Entra ID.
For more information on the identity options in Kubernetes, seeKubernetes authentication.
Azure role-based access control
Azure role-based access control (RBAC) is an authorization system built onAzure Resource Managerthat provides fine-grained access management of Azure resources.
With Azure RBAC, you create arole definitionthat outlines the permissions to be applied. You then assign a user or group this role definition via arole assignmentfor a particularscope. The scope can be an individual resource, a resource group, or across the subscription.
For more information, seeWhat is Azure role-based access control (Azure RBAC)?
There are two levels of access needed to fully operate an AKS cluster:
Access the AKS resource in your Azure subscription.Control scaling or upgrading your cluster using the AKS APIs.Pull yourkubeconfig.
Control scaling or upgrading your cluster using the AKS APIs.
Pull yourkubeconfig.
kubeconfig
Access to the Kubernetes API. This access is controlled by either:Kubernetes RBAC(traditionally).Integrating Azure RBAC with AKS for Kubernetes authorization.
Kubernetes RBAC(traditionally).
Integrating Azure RBAC with AKS for Kubernetes authorization.
Azure RBAC to authorize access to the AKS resource
With Azure RBAC, you can provide your users (or identities) with granular access to AKS resources across one or more subscriptions. For example, you could use theAzure Kubernetes Service Contributor roleto scale and upgrade your cluster. Meanwhile, another user with theAzure Kubernetes Service Cluster Admin roleonly has permission to pull the Adminkubeconfig.
kubeconfig
Use Azure RBAC to define access to the Kubernetes configuration file in AKS.
Azure RBAC for Kubernetes Authorization
With the Azure RBAC integration, AKS will use a Kubernetes Authorization webhook server so you can manage Microsoft Entra integrated Kubernetes cluster resource permissions and assignments using Azure role definition and role assignments.

As shown in the above diagram, when using the Azure RBAC integration, all requests to the Kubernetes API will follow the same authentication flow as explained on theMicrosoft Entra integration section.
If the identity making the request exists in Microsoft Entra ID, Azure will team with Kubernetes RBAC to authorize the request. If the identity exists outside of Microsoft Entra ID (i.e., a Kubernetes service account), authorization will defer to the normal Kubernetes RBAC.
In this scenario, you use Azure RBAC mechanisms and APIs to assign users built-in roles or create custom roles, just as you would with Kubernetes roles.
With this feature, you not only give users permissions to the AKS resource across subscriptions, but you also configure the role and permissions for inside each of those clusters controlling Kubernetes API access. For example, you can grant theAzure Kubernetes Service RBAC Readerrole on the subscription scope. The role recipient will be able to list and get all Kubernetes objects from all clusters without modifying them.
Azure Kubernetes Service RBAC Reader
Important
You need to enable Azure RBAC for Kubernetes authorization before using this feature. For more details and step by step guidance, follow ourUse Azure RBAC for Kubernetes Authorizationhow-to guide.
AKS provides the following four built-in roles. They are similar to theKubernetes built-in roleswith a few differences, like supporting CRDs. See the full list of actions allowed by eachAzure built-in role.
Secrets
Secrets
ServiceAccount
ServiceAccount
Secrets

Microsoft Entra integration
Enhance your AKS cluster security with Microsoft Entra integration. Built on decades of enterprise identity management, Microsoft Entra ID is a multi-tenant, cloud-based directory and identity management service that combines core directory services, application access management, and identity protection. With Microsoft Entra ID, you can integrate on-premises identities into AKS clusters to provide a single source for account management and security.

With Microsoft Entra integrated AKS clusters, you can grant users or groups access to Kubernetes resources within a namespace or across the cluster.
To obtain akubectlconfiguration context, a user runs theaz aks get-credentialscommand.
kubectl
When a user interacts with the AKS cluster withkubectl, they're prompted to sign in with their Microsoft Entra credentials.
kubectl
This approach provides a single source for user account management and password credentials. The user can only access the resources as defined by the cluster administrator.
Microsoft Entra authentication is provided to AKS clusters with OpenID Connect. OpenID Connect is an identity layer built on top of the OAuth 2.0 protocol. For more information on OpenID Connect, see theOpenID Connect documentation. From inside of the Kubernetes cluster,Webhook Token Authenticationis used to verify authentication tokens. Webhook token authentication is configured and managed as part of the AKS cluster.
Webhook and API server

As shown in the graphic above, the API server calls the AKS webhook server and performs the following steps:
kubectluses the Microsoft Entra client application to sign in users withOAuth 2.0 device authorization grant flow.
kubectl
Microsoft Entra ID provides an access_token, id_token, and a refresh_token.
The user makes a request tokubectlwith an access_token fromkubeconfig.
kubectl
kubeconfig
kubectlsends the access_token to API Server.
kubectl
The API Server is configured with the Auth WebHook Server to perform validation.
The authentication webhook server confirms the JSON Web Token signature is valid by checking the Microsoft Entra public signing key.
If the groups are bigger than 200, the server application uses user-provided credentials to query group memberships of the logged-in user from the MS Graph API. If groups do not exceedd 200, the groups claim already exists in the client token, no query will be performed.
A response is sent to the API Server with user information such as the user principal name (UPN) claim of the access token, and the group membership of the user based on the object ID.
The API performs an authorization decision based on the Kubernetes Role/RoleBinding.
Once authorized, the API server returns a response tokubectl.
kubectl
kubectlprovides feedback to the user.
kubectl
Learn how to integrate AKS with Microsoft Entra ID with ourAKS-managed Microsoft Entra integration how-to guide.
AKS service permissions
When creating a cluster, AKS generates or modifies resources it needs (like VMs and NICs) to create and run the cluster on behalf of the user. This identity is distinct from the cluster's identity permission, which is created during cluster creation.
Identity creating and operating the cluster permissions
The following permissions are needed by the identity creating and operating the cluster.
Microsoft.Compute/diskEncryptionSets/read
Microsoft.Compute/proximityPlacementGroups/write
Microsoft.Network/applicationGateways/read
Microsoft.Network/applicationGateways/write
Microsoft.Network/virtualNetworks/subnets/join/action
Microsoft.Network/virtualNetworks/subnets/join/action
Microsoft.Network/publicIPAddresses/join/action
Microsoft.Network/publicIPPrefixes/join/action
Microsoft.OperationalInsights/workspaces/sharedkeys/read
Microsoft.OperationalInsights/workspaces/read
Microsoft.OperationsManagement/solutions/write
Microsoft.OperationsManagement/solutions/read
Microsoft.ManagedIdentity/userAssignedIdentities/assign/action
Microsoft.Network/virtualNetworks/joinLoadBalancer/action
AKS cluster identity permissions
The following permissions are used by the AKS cluster identity, which is created and associated with the AKS cluster. Each permission is used for the reasons below:
Microsoft.ContainerService/managedClusters/*
Microsoft.Network/loadBalancers/delete
Microsoft.Network/loadBalancers/read
Microsoft.Network/loadBalancers/write
Microsoft.Network/publicIPAddresses/delete
Microsoft.Network/publicIPAddresses/read
Microsoft.Network/publicIPAddresses/write
Microsoft.Network/publicIPAddresses/join/action
Microsoft.Network/networkSecurityGroups/read
Microsoft.Network/networkSecurityGroups/write
Microsoft.Compute/disks/delete
Microsoft.Compute/disks/read
Microsoft.Compute/disks/write
Microsoft.Compute/locations/DiskOperations/read
Microsoft.Storage/storageAccounts/delete
Microsoft.Storage/storageAccounts/listKeys/action
Microsoft.Storage/storageAccounts/read
Microsoft.Storage/storageAccounts/write
Microsoft.Storage/operations/read
Microsoft.Network/routeTables/read
Microsoft.Network/routeTables/routes/delete
Microsoft.Network/routeTables/routes/read
Microsoft.Network/routeTables/routes/write
Microsoft.Network/routeTables/write
Microsoft.Compute/virtualMachines/read
Microsoft.Compute/virtualMachines/write
Microsoft.Compute/virtualMachineScaleSets/read
Microsoft.Compute/virtualMachineScaleSets/virtualMachines/read
Microsoft.Compute/virtualMachineScaleSets/virtualmachines/instanceView/read
Microsoft.Network/networkInterfaces/write
Microsoft.Compute/virtualMachineScaleSets/write
Microsoft.Compute/virtualMachineScaleSets/delete
Microsoft.Compute/virtualMachineScaleSets/virtualmachines/write
Microsoft.Network/networkInterfaces/read
Microsoft.Compute/virtualMachineScaleSets/virtualMachines/networkInterfaces/read
Microsoft.Compute/virtualMachineScaleSets/virtualMachines/networkInterfaces/ipconfigurations/publicipaddresses/read
Microsoft.Network/virtualNetworks/read
Microsoft.Network/virtualNetworks/subnets/read
Microsoft.Compute/snapshots/delete
Microsoft.Compute/snapshots/read
Microsoft.Compute/snapshots/write
Microsoft.Compute/locations/vmSizes/read
Microsoft.Compute/locations/operations/read
Additional cluster identity permissions
When creating a cluster with specific attributes, you will need the following additional permissions for the cluster identity. Since these permissions are not automatically assigned, you must add them to the cluster identity after it's created.
Microsoft.Network/networkSecurityGroups/write
Microsoft.Network/networkSecurityGroups/read
Microsoft.Network/virtualNetworks/subnets/read
Microsoft.Network/virtualNetworks/subnets/join/action
Microsoft.Network/routeTables/routes/read
Microsoft.Network/routeTables/routes/write
Microsoft.Network/virtualNetworks/subnets/read
Microsoft.Network/privatednszones/*
AKS Node Access
By default Node Access is not required for AKS.  The following access is needed for the node if a specific component is leveraged.
kubelet
http app routing
container insights
Summary
View the table for a quick summary of how users can authenticate to Kubernetes when Microsoft Entra integration is enabled. In all cases, the user's sequence of commands is:
Runaz loginto authenticate to Azure.
Runaz loginto authenticate to Azure.
az login
Runaz aks get-credentialsto download credentials for the cluster into.kube/config.
Runaz aks get-credentialsto download credentials for the cluster into.kube/config.
az aks get-credentials
.kube/config
Runkubectlcommands.The first command may trigger browser-based authentication to authenticate to the cluster, as described in the following table.
Runkubectlcommands.
kubectl
The first command may trigger browser-based authentication to authenticate to the cluster, as described in the following table.
In the Azure portal, you can find:
TheRole Grant(Azure RBAC role grant) referred to in the second column is shown on theAccess Controltab.
The Cluster Admin Microsoft Entra group is shown on theConfigurationtab.Also found with parameter name--aad-admin-group-object-idsin the Azure CLI.
Also found with parameter name--aad-admin-group-object-idsin the Azure CLI.
--aad-admin-group-object-ids
az aks get-credentials
--admin
.kube/config
az aks get-credentials
--admin
.kube/config
kubectl
subjects
kubectl
cluster-admin
kubectl
cluster-admin
Next steps
To get started with Microsoft Entra ID and Kubernetes RBAC, seeIntegrate Microsoft Entra ID with AKS.
For associated best practices, seeBest practices for authentication and authorization in AKS.
To get started with Azure RBAC for Kubernetes Authorization, seeUse Azure RBAC to authorize access within the Azure Kubernetes Service (AKS) Cluster.
To get started securing yourkubeconfigfile, seeLimit access to cluster configuration file.
kubeconfig
To get started with managed identities in AKS, seeUse a managed identity in AKS.
For more information on core Kubernetes and AKS concepts, see the following articles:
Kubernetes / AKS clusters and workloads
Kubernetes / AKS security
Kubernetes / AKS virtual networks
Kubernetes / AKS storage
Kubernetes / AKS scale
Azure Kubernetes Service

Additional resources