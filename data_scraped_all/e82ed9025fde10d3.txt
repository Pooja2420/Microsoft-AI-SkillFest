Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Networking in Azure Container Apps environment
Article
2025-03-20
17 contributors
In this article
Azure Container Apps run in the context of anenvironment, with its own virtual network (VNet).
By default, your Container App environment is created with a VNet that is automatically generated for you. For fine-grained control over your network, you can provide anexisting VNetwhen you create an environment. Once you create an environment with either a generated or existing VNet, the network type can't be changed.
Generated VNets take on the following characteristics.
They are:
inaccessible to you as they're created in Microsoft's tenant
publicly accessible over the internet
only able to reach internet accessible endpoints
Further, they only support a limited subset of networking capabilities such as ingress IP restrictions and container app level ingress controls.
Use an existing VNet if you need more Azure networking features such as:
Integration with Application Gateway
Network Security Groups
Communication with resources behind private endpoints in your virtual network
The available VNet features depend on your environment selection.
Environment selection
Container Apps has two differentenvironment types, which share many of the same networking characteristics with some key differences.
/27
/23
Virtual IP
Depending on your virtual IP configuration, you can control whether your container app environment allows public ingress or ingress only from within your VNet at the environment level. This configuration can't be changed after your environment is created.
Custom VNet configuration
As you create a custom VNet, keep in mind the following situations:
If you want your container app to restrict all outside access, create an internal Container Apps environment.
If you want your container app to restrict all outside access, create an internal Container Apps environment.
If you use your own VNet, you need to provide a subnet that is dedicated exclusively to the Container App environment you deploy. This subnet isn't available to other services.
If you use your own VNet, you need to provide a subnet that is dedicated exclusively to the Container App environment you deploy. This subnet isn't available to other services.
Network addresses are assigned from a subnet range you define as the environment is created.You can define the subnet range used by the Container Apps environment.You can restrict inbound requests to the environment exclusively to the VNet by deploying the environment as internal.
Network addresses are assigned from a subnet range you define as the environment is created.
You can define the subnet range used by the Container Apps environment.
You can define the subnet range used by the Container Apps environment.
You can restrict inbound requests to the environment exclusively to the VNet by deploying the environment as internal.
You can restrict inbound requests to the environment exclusively to the VNet by deploying the environment as internal.
Note
When you provide your own virtual network, additionalmanaged resourcesare created. These resources incur costs at their associated rates.
As you begin to design the network around your container app, refer toPlan virtual networks.

Note
Moving VNets among different resource groups or subscriptions isn't allowed if the VNet is in use by a Container Apps environment.
HTTP edge proxy behavior
Azure Container Apps uses theEnvoy proxyas an edge HTTP proxy. Transport Layer Security (TLS) is terminated on the edge and requests are routed based on their traffic splitting rules and routes traffic to the correct application.
HTTP applications scale based on the number of HTTP requests and connections. Envoy routes internal traffic inside clusters.
Downstream connections support HTTP1.1 and HTTP2 and Envoy automatically detects and upgrades connections if the client connection requires an upgrade.
Upstream connections are defined by setting thetransportproperty on theingressobject.
transport
Ingress configuration
Under theingresssection, you can configure the following settings:
Accessibility level: You can set your container app as externally or internally accessible in the environment. An environment variableCONTAINER_APP_ENV_DNS_SUFFIXis used to automatically resolve the fully qualified domain name (FQDN) suffix for your environment. When communicating between container apps within the same environment, you may also use the app name. For more information on how to access your apps, seeIngress in Azure Container Apps.
Accessibility level: You can set your container app as externally or internally accessible in the environment. An environment variableCONTAINER_APP_ENV_DNS_SUFFIXis used to automatically resolve the fully qualified domain name (FQDN) suffix for your environment. When communicating between container apps within the same environment, you may also use the app name. For more information on how to access your apps, seeIngress in Azure Container Apps.
CONTAINER_APP_ENV_DNS_SUFFIX
Traffic split rules: You can define traffic splitting rules between different revisions of your application.  For more information, seeTraffic splitting.
Traffic split rules: You can define traffic splitting rules between different revisions of your application.  For more information, seeTraffic splitting.
For more information about different networking scenarios, seeIngress in Azure Container Apps.
Portal dependencies
For every app in Azure Container Apps, there are two URLs.
The Container Apps runtime initially generates a fully qualified domain name (FQDN) used to access your app. See theApplication Urlin theOverviewwindow of your container app in the Azure portal for the FQDN of your container app.
A second URL is also generated for you. This location grants access to the log streaming service and the console. If necessary, you may need to addhttps://<region>.azurecontainerapps.dev/to the allowlist of your firewall or proxy.
https://<region>.azurecontainerapps.dev/
Ports and IP addresses
The following ports are exposed for inbound connections.
IP addresses are broken down into the following types:
Subnet
Virtual network integration depends on a dedicated subnet. The allocation of IP addresses in a subnet and the supported subnet sizes depend on theplanyou're using in Azure Container Apps.
Select your subnet size carefully. Subnet sizes can't be modified after you create a Container Apps environment.
Different environment types have different subnet requirements:
Workload profiles environment
Consumption only environment
/27is the minimum subnet size required for virtual network integration.
/27is the minimum subnet size required for virtual network integration.
/27
Your subnet must be delegated toMicrosoft.App/environments.
Your subnet must be delegated toMicrosoft.App/environments.
Microsoft.App/environments
When using an external environment with external ingress, inbound traffic routes through the infrastructureâs public IP rather than through your subnet.
When using an external environment with external ingress, inbound traffic routes through the infrastructureâs public IP rather than through your subnet.
Container Apps automatically reserves 12 IP addresses for integration with the subnet. The number of IP addresses required for infrastructure integration doesn't vary based on the scale demands of the environment. Additional IP addresses are allocated according to the following rules depending on the type of workload profile you're using more IP addresses are allocated depending on your environment's workload profile:Dedicated workload profile: As your container app scales out, each node has one IP address assigned.Consumption workload profile: Each IP address may be shared among multiple replicas. When planning for how many IP addresses are required for your app, plan for 1 IP address per 10 replicas.
Container Apps automatically reserves 12 IP addresses for integration with the subnet. The number of IP addresses required for infrastructure integration doesn't vary based on the scale demands of the environment. Additional IP addresses are allocated according to the following rules depending on the type of workload profile you're using more IP addresses are allocated depending on your environment's workload profile:
Dedicated workload profile: As your container app scales out, each node has one IP address assigned.
Dedicated workload profile: As your container app scales out, each node has one IP address assigned.
Consumption workload profile: Each IP address may be shared among multiple replicas. When planning for how many IP addresses are required for your app, plan for 1 IP address per 10 replicas.
Consumption workload profile: Each IP address may be shared among multiple replicas. When planning for how many IP addresses are required for your app, plan for 1 IP address per 10 replicas.
When you make achange to a revisionin single revision mode, the required address space is doubled for a short period of time in order to support zero downtime deployments. This affects the real, available supported replicas or nodes for a given subnet size. The following table shows both the maximum available addresses per CIDR block and the effect on horizontal scale.Subnet SizeAvailable IP Addresses1Max nodes (Dedicated workload profile)2Max replicas (Consumption workload profile)2/234952472,470/242391191,190/2511155550/264723230/27157701The available IP addresses is the size of the subnet minus the 12 IP addresses required for Azure Container Apps infrastructure and 5 IP addresses reserved by the subnet.2This is accounting for apps in single revision mode.
When you make achange to a revisionin single revision mode, the required address space is doubled for a short period of time in order to support zero downtime deployments. This affects the real, available supported replicas or nodes for a given subnet size. The following table shows both the maximum available addresses per CIDR block and the effect on horizontal scale.
1The available IP addresses is the size of the subnet minus the 12 IP addresses required for Azure Container Apps infrastructure and 5 IP addresses reserved by the subnet.2This is accounting for apps in single revision mode.
/23is the minimum subnet size required for virtual network integration.
/23is the minimum subnet size required for virtual network integration.
/23
Your subnet must not be delegated to any services.
Your subnet must not be delegated to any services.
The Container Apps runtime reserves a minimum of 60 IPs for infrastructure in your VNet. The reserved amount may increase up to 256 addresses as apps in your environment scale.
The Container Apps runtime reserves a minimum of 60 IPs for infrastructure in your VNet. The reserved amount may increase up to 256 addresses as apps in your environment scale.
As your apps scale, a new IP address is allocated for each new replica.
As your apps scale, a new IP address is allocated for each new replica.
When you make achange to a revisionin single revision mode, the required address space is doubled for a short period of time in order to support zero downtime deployments. This affects the real, available supported replicas for a given subnet size.
When you make achange to a revisionin single revision mode, the required address space is doubled for a short period of time in order to support zero downtime deployments. This affects the real, available supported replicas for a given subnet size.
Subnet address range restrictions
Workload profiles environment
Consumption only environment
Subnet address ranges can't overlap with the following ranges reserved by Azure Kubernetes Services:
169.254.0.0/16
172.30.0.0/16
172.31.0.0/16
192.0.2.0/24
In addition, a workload profiles environment reserves the following addresses:
100.100.0.0/17
100.100.128.0/19
100.100.160.0/19
100.100.192.0/19
Subnet address ranges can't overlap with the following ranges reserved by Azure Kubernetes Services:
169.254.0.0/16
172.30.0.0/16
172.31.0.0/16
192.0.2.0/24
If you created your container apps environment with a custom service CIDR, make sure your container app's subnet (or any peered subnet) doesn't conflict with your custom service CIDR range.
Subnet configuration with CLI
As a Container Apps environment is created, you provide resource IDs for a single subnet.
If you're using the CLI, the parameter to define the subnet resource ID isinfrastructure-subnet-resource-id. The subnet hosts infrastructure components and user app containers.
infrastructure-subnet-resource-id
If you're using the Azure CLI with a Consumption only environment and theplatformReservedCidrrange is defined, the subnet must not overlap with the IP range defined inplatformReservedCidr.
platformReservedCidr
Routes

User defined routes (UDR)
User Defined Routes (UDR) and controlled egress through NAT Gateway are supported in the workload profiles environment. In the Consumption only environment, these features aren't supported.
Note
When using UDR with Azure Firewall in Azure Container Apps, you need to add certain FQDNs and service tags to the allowlist for the firewall. To learn more, seeconfiguring UDR with Azure Firewall.
You can use UDR with workload profiles environments to restrict outbound traffic from your container app through Azure Firewall or other network appliances.
You can use UDR with workload profiles environments to restrict outbound traffic from your container app through Azure Firewall or other network appliances.
Configuring UDR is done outside of the Container Apps environment scope.
Configuring UDR is done outside of the Container Apps environment scope.

Azure creates a default route table for your virtual networks upon create. By implementing a user-defined route table, you can control how traffic is routed within your virtual network. For example, you can create a UDR that routes all traffic to the firewall.
User defined routes are only supported in a workload profiles environment. The following application or network rules must be added to the allowlist for your firewall depending on which resources you're using.
Note
You only need to configure either application rules or network rules, depending on your systemâs requirements. Configuring both at the same time is not necessary.
Note
For a guide on how to set up UDR with Container Apps to restrict outbound traffic with Azure Firewall, visit thehow to for Container Apps and Azure Firewall.
Application rules allow or deny traffic based on the application layer. The following outbound firewall application rules are required based on scenario.
mcr.microsoft.com
*.data.mcr.microsoft.com
*.blob.core.windows.net
login.microsoft.com
login.microsoft.com
*.identity.azure.net
login.microsoftonline.com
*.login.microsoftonline.com
*.login.microsoft.com
https://northcentralus.ext.azurecontainerapps.dev
hub.docker.com
registry-1.docker.io
production.cloudflare.docker.com
Network rules allow or deny traffic based on the network and transport layer. The following outbound firewall network rules are required based on scenario.
MicrosoftContainerRegistry
AzureFrontDoorFirstParty
AzureContainerRegistry
AzureActiveDirectory
AzureKeyVault
AzureActiveDirectory
AzureActiveDirectory
Note
For Azure resources you're using with Azure Firewall not listed in this article, refer to theservice tags documentation.

NAT gateway integration
You can use NAT Gateway to simplify outbound connectivity for your outbound internet traffic in your virtual network in a workload profiles environment.
When you configure a NAT Gateway on your subnet, the NAT Gateway provides a static public IP address for your environment. All outbound traffic from your container app is routed through the NAT Gateway's static public IP address.
Public network access (preview)
The public network access setting determines whether your container apps environment is accessible from the public Internet. Whether you can change this setting after creating your environment depends on the environment's virtual IP configuration. The following table shows valid values for public network access, depending on your environment's virtual IP configuration.
Enabled
Disabled
Disabled
In order to create private endpoints on your Azure Container App environment, public network access must be set toDisabled.
Disabled
Azure networking policies are supported with the public network access flag.
Private endpoint (preview)
Azure private endpoint enables clients located in your private network to securely connect to your Azure Container Apps environment through Azure Private Link. A private link connection eliminates exposure to the public internet. Private endpoints use a private IP address in your Azure virtual network address space.
This feature is supported for both Consumption and Dedicated plans in workload profile environments.
To learn more about how to configure private endpoints in Azure Container Apps, see theUse a private endpoint with an Azure Container Apps environmenttutorial.
Private link connectivity with Azure Front Door is supported for Azure Container Apps. Refer tocreate a private link with Azure Front Doorfor more information.
Private endpoints on Azure Container Apps only support inbound HTTP traffic. TCP traffic isn't supported.
To use a private endpoint with a custom domain and anApex domainas theHostname record type, you must configure a private DNS zone with the same name as your public DNS. In the record set, configure your private endpoint's private IP address instead of the container app environment's IP address. When you configure your custom domain with CNAME, the setup is unchanged. For more information, seeSet up custom domain with existing certificate.
Your private endpoint's VNet can be separate from the VNet integrated with your container app.
You can add a private endpoint to both new and existing workload profile environments.
In order to connect to your container apps through a private endpoint, you must configure a private DNS zone.
Environment security
Note
To control ingress traffic, you can alsouse private endpoints with a private connection to Azure Front Doorin place of Application Gateway. This feature is in preview.

You can fully secure your ingress and egress networking traffic workload profiles environment by taking the following actions:
Create your internal container app environment in a workload profiles environment. For steps, refer toManage workload profiles with the Azure CLI.
Create your internal container app environment in a workload profiles environment. For steps, refer toManage workload profiles with the Azure CLI.
Integrate your Container Apps with anApplication Gateway.
Integrate your Container Apps with anApplication Gateway.
Configure UDR to route all traffic throughAzure Firewall.
Configure UDR to route all traffic throughAzure Firewall.
Peer-to-peer encryption in the Azure Container Apps environment
Azure Container Apps supports peer-to-peer TLS encryption within the environment. Enabling this feature encrypts all network traffic within the environment with a private certificate that is valid within the Azure Container Apps environment scope. Azure Container Apps automatically manage these certificates.
Note
By default, peer-to-peer encryption is disabled. Enabling peer-to-peer encryption for your applications may increase response latency and reduce maximum throughput in high-load scenarios.
The following example shows an environment with peer-to-peer encryption enabled.
1Inbound TLS traffic is terminated at the ingress proxy on the edge of the environment.
2Traffic to and from the ingress proxy within the environment is TLS encrypted with a private certificate and decrypted by the receiver.
3Calls made from app A to app B's FQDN are first sent to the edge ingress proxy, and are TLS encrypted.
4Calls made from app A to app B using app B's app name are sent directly to app B and are TLS encrypted. Calls between apps andJava componentsare treated in the same way as app to app communication and TLS encrypted.
Applications within a Container Apps environment are automatically authenticated. However, the Container Apps runtime doesn't support authorization for access control between applications using the built-in peer-to-peer encryption.
When your apps are communicating with a client outside of the environment, two-way authentication with mTLS is supported. To learn more, seeconfigure client certificates.
Azure CLI
ARM template
You can enable peer-to-peer encryption using the following commands.
On create:
az containerapp env create \
    --name <environment-name> \
    --resource-group <resource-group> \
    --location <location> \
    --enable-peer-to-peer-encryption
az containerapp env create \
    --name <environment-name> \
    --resource-group <resource-group> \
    --location <location> \
    --enable-peer-to-peer-encryption
For an existing container app:
az containerapp env update \
    --name <environment-name> \
    --resource-group <resource-group> \
    --enable-peer-to-peer-encryption
az containerapp env update \
    --name <environment-name> \
    --resource-group <resource-group> \
    --enable-peer-to-peer-encryption
You can enable mTLS in the ARM template for Container Apps environments using the following configuration.
{
  ...
  "properties": {
       "peerTrafficConfiguration":{
            "encryption": {
                "enabled": "true|false"
            }
        }
  ...
}
{
  ...
  "properties": {
       "peerTrafficConfiguration":{
            "encryption": {
                "enabled": "true|false"
            }
        }
  ...
}
Rule-based routing (preview)
With rule-based routing, you create a fully qualified domain name (FQDN) on your container apps environment. You then use rules to route requests to this FQDN to different container apps, depending on the path of each request. This offers the following benefits.
Isolation: By routing different paths to different container apps, you can deploy and update individual components without affecting the entire application.
Isolation: By routing different paths to different container apps, you can deploy and update individual components without affecting the entire application.
Scalability: With rule-based routing, you can scale individual container apps independently based on the traffic each container app receives.
Scalability: With rule-based routing, you can scale individual container apps independently based on the traffic each container app receives.
Custom Routing Rules: You can, for example, redirect users to different versions of your application or implement A/B testing.
Custom Routing Rules: You can, for example, redirect users to different versions of your application or implement A/B testing.
Security: You can implement security measures tailored to each container app. This helps you to reduce the attack surface of your application.
Security: You can implement security measures tailored to each container app. This helps you to reduce the attack surface of your application.
To learn how to configure rule-based routing on your container apps environment, seeUse rule-based routing.
DNS
Custom DNS: If your VNet uses a custom DNS server instead of the default Azure-provided DNS server, configure your DNS server to forward unresolved DNS queries to168.63.129.16.Azure recursive resolversuses this IP address to resolve requests. When configuring your NSG or firewall, don't block the168.63.129.16address, otherwise, your Container Apps environment doesn't function correctly.
Custom DNS: If your VNet uses a custom DNS server instead of the default Azure-provided DNS server, configure your DNS server to forward unresolved DNS queries to168.63.129.16.Azure recursive resolversuses this IP address to resolve requests. When configuring your NSG or firewall, don't block the168.63.129.16address, otherwise, your Container Apps environment doesn't function correctly.
168.63.129.16
168.63.129.16
VNet-scope ingress: If you plan to use VNet-scopeingressin an internal environment, configure your domains in one of the following ways:Non-custom domains: If you don't plan to use a custom domain, create a private DNS zone that resolves the Container Apps environment's default domain to the static IP address of the Container Apps environment. You can useAzure Private DNSor your own DNS server. If you use Azure Private DNS, create a private DNS Zone named as the Container App environmentâs default domain (<UNIQUE_IDENTIFIER>.<REGION_NAME>.azurecontainerapps.io), with anArecord. TheArecord contains the name*<DNS Suffix>and the static IP address of the Container Apps environment. For more information, seeCreate and configure an Azure Private DNS zone.Custom domains: If you plan to use custom domains and are using an external Container Apps environment, use a publicly resolvable domain toadd a custom domain and certificateto the container app. If you're using an internal Container Apps environment, there's no validation for the DNS binding, as the cluster can only be accessed from within the virtual network. Additionally, create a private DNS zone that resolves the apex domain to the static IP address of the Container Apps environment. You can useAzure Private DNSor your own DNS server. If you use Azure Private DNS, create a Private DNS Zone named as the apex domain, with anArecord that points to the static IP address of the Container Apps environment.
VNet-scope ingress: If you plan to use VNet-scopeingressin an internal environment, configure your domains in one of the following ways:
Non-custom domains: If you don't plan to use a custom domain, create a private DNS zone that resolves the Container Apps environment's default domain to the static IP address of the Container Apps environment. You can useAzure Private DNSor your own DNS server. If you use Azure Private DNS, create a private DNS Zone named as the Container App environmentâs default domain (<UNIQUE_IDENTIFIER>.<REGION_NAME>.azurecontainerapps.io), with anArecord. TheArecord contains the name*<DNS Suffix>and the static IP address of the Container Apps environment. For more information, seeCreate and configure an Azure Private DNS zone.
Non-custom domains: If you don't plan to use a custom domain, create a private DNS zone that resolves the Container Apps environment's default domain to the static IP address of the Container Apps environment. You can useAzure Private DNSor your own DNS server. If you use Azure Private DNS, create a private DNS Zone named as the Container App environmentâs default domain (<UNIQUE_IDENTIFIER>.<REGION_NAME>.azurecontainerapps.io), with anArecord. TheArecord contains the name*<DNS Suffix>and the static IP address of the Container Apps environment. For more information, seeCreate and configure an Azure Private DNS zone.
<UNIQUE_IDENTIFIER>.<REGION_NAME>.azurecontainerapps.io
A
A
*<DNS Suffix>
Custom domains: If you plan to use custom domains and are using an external Container Apps environment, use a publicly resolvable domain toadd a custom domain and certificateto the container app. If you're using an internal Container Apps environment, there's no validation for the DNS binding, as the cluster can only be accessed from within the virtual network. Additionally, create a private DNS zone that resolves the apex domain to the static IP address of the Container Apps environment. You can useAzure Private DNSor your own DNS server. If you use Azure Private DNS, create a Private DNS Zone named as the apex domain, with anArecord that points to the static IP address of the Container Apps environment.
Custom domains: If you plan to use custom domains and are using an external Container Apps environment, use a publicly resolvable domain toadd a custom domain and certificateto the container app. If you're using an internal Container Apps environment, there's no validation for the DNS binding, as the cluster can only be accessed from within the virtual network. Additionally, create a private DNS zone that resolves the apex domain to the static IP address of the Container Apps environment. You can useAzure Private DNSor your own DNS server. If you use Azure Private DNS, create a Private DNS Zone named as the apex domain, with anArecord that points to the static IP address of the Container Apps environment.
A
The static IP address of the Container Apps environment is available in the Azure portal inCustom DNS suffixof the container app page or using the Azure CLIaz containerapp env listcommand.
az containerapp env list
Managed resources
When you deploy an internal or an external environment into your own network, a new resource group is created in the Azure subscription where your environment is hosted. This resource group contains infrastructure components managed by the Azure Container Apps platform. Don't modify the services in this group or the resource group itself.
Workload profiles environment
The name of the resource group created in the Azure subscription where your environment is hosted is prefixed withME_by default, and the resource group namecanbe customized as you create your container app environment.
ME_
For external environments, the resource group contains a public IP address used specifically for inbound connectivity to your external environment and a load balancer. For internal environments, the resource group only contains aLoad Balancer.
In addition to the standardAzure Container Apps billing, you're billed for:
One standard staticpublic IPfor egress if using an internal or external environment, plus one standard staticpublic IPfor ingress if using an external environment. If you need more public IPs for egress due to SNAT issues,open a support ticket to request an override.
One standard staticpublic IPfor egress if using an internal or external environment, plus one standard staticpublic IPfor ingress if using an external environment. If you need more public IPs for egress due to SNAT issues,open a support ticket to request an override.
One standardload balancer.
One standardload balancer.
The cost of data processed (in GBs) includes both ingress and egress for management operations.
The cost of data processed (in GBs) includes both ingress and egress for management operations.
Consumption only environment
The name of the resource group created in the Azure subscription where your environment is hosted is prefixed withMC_by default, and the resource group namecan'tbe customized when you create a container app. The resource group contains public IP addresses used specifically for outbound connectivity from your environment and a load balancer.
MC_
In addition to the standardAzure Container Apps billing, you're billed for:
One standard staticpublic IPfor egress. If you need more IPs for egress due to Source Network Address Translation (SNAT) issues,open a support ticket to request an override.
One standard staticpublic IPfor egress. If you need more IPs for egress due to Source Network Address Translation (SNAT) issues,open a support ticket to request an override.
Two standardload balancersif using an internal environment, or one standardload balancerif using an external environment. Each load balancer has fewer than six rules. The cost of data processed (in GBs) includes both ingress and egress for management operations.
Two standardload balancersif using an internal environment, or one standardload balancerif using an external environment. Each load balancer has fewer than six rules. The cost of data processed (in GBs) includes both ingress and egress for management operations.
Next steps
Use a custom virtual network
Feedback
Was this page helpful?
Additional resources