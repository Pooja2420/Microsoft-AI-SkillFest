Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Bash@3 - Bash v3 task
Article
2025-03-24
3 contributors
In this article
Use this task to run a Bash script on macOS, Linux, or Windows.
Note
On a Windows host this runs bash from the WSL default distribution. WSL must be installed and the user that the agent runs as must have a distribution setup. WSL is installed on Microsoft-hosted Windows agent images. For more information, seeMicrosoft-hosted agents - Software.
Syntax
# Bash v3
# Run a Bash script on macOS, Linux, or Windows.
- task: Bash@3
  inputs:
    #targetType: 'filePath' # 'filePath' | 'inline'. Type. Default: filePath.
    filePath: # string. Required when targetType = filePath. Script Path. 
    #arguments: # string. Optional. Use when targetType = filePath. Arguments. 
    #script: # string. Required when targetType = inline. Script. 
  # Advanced
    #workingDirectory: # string. Working Directory. 
    #failOnStderr: false # boolean. Fail on Standard Error. Default: false.
    #bashEnvValue: # string. Set value for BASH_ENV environment variable.
# Bash v3
# Run a Bash script on macOS, Linux, or Windows.
- task: Bash@3
  inputs:
    #targetType: 'filePath' # 'filePath' | 'inline'. Type. Default: filePath.
    filePath: # string. Required when targetType = filePath. Script Path. 
    #arguments: # string. Optional. Use when targetType = filePath. Arguments. 
    #script: # string. Required when targetType = inline. Script. 
  # Advanced
    #workingDirectory: # string. Working Directory. 
    #failOnStderr: false # boolean. Fail on Standard Error. Default: false.
    #bashEnvValue: # string. Set value for BASH_ENV environment variable.
# Bash v3
# Run a Bash script on macOS, Linux, or Windows.
- task: Bash@3
  inputs:
    #targetType: 'filePath' # 'filePath' | 'inline'. Type. Default: filePath.
    filePath: # string. Required when targetType = filePath. Script Path. 
    #arguments: # string. Optional. Use when targetType = filePath. Arguments. 
    #script: # string. Required when targetType = inline. Script. 
  # Advanced
    #workingDirectory: # string. Working Directory. 
    #failOnStderr: false # boolean. Fail on Standard Error. Default: false.
    #noProfile: true # boolean. Don't load the profile startup/initialization files. Default: true.
    #noRc: true # boolean. Don't read the `~/.bashrc' initialization file. Default: true.
# Bash v3
# Run a Bash script on macOS, Linux, or Windows.
- task: Bash@3
  inputs:
    #targetType: 'filePath' # 'filePath' | 'inline'. Type. Default: filePath.
    filePath: # string. Required when targetType = filePath. Script Path. 
    #arguments: # string. Optional. Use when targetType = filePath. Arguments. 
    #script: # string. Required when targetType = inline. Script. 
  # Advanced
    #workingDirectory: # string. Working Directory. 
    #failOnStderr: false # boolean. Fail on Standard Error. Default: false.
    #noProfile: true # boolean. Don't load the profile startup/initialization files. Default: true.
    #noRc: true # boolean. Don't read the `~/.bashrc' initialization file. Default: true.
Inputs
targetType-Typestring. Allowed values:filePath(File Path),inline. Default value:filePath.
targetType
string
filePath
inline
filePath
Targets script type: file path or inline.
filePath-Script Pathstring. Required whentargetType = filePath.
filePath
string
targetType = filePath
The path of the script to execute. This must be a fully qualified path or relative to$(System.DefaultWorkingDirectory).
$(System.DefaultWorkingDirectory)
arguments-Argumentsstring. Optional. Use whentargetType = filePath.
arguments
string
targetType = filePath
The arguments passed to the shell script. Either ordinal parameters or named parameters.
script-Scriptstring. Required whentargetType = inline. Default value:# Write your commands here\n\necho 'Hello world'.
script
string
targetType = inline
# Write your commands here\n\necho 'Hello world'
The contents of the script.
workingDirectory-Working Directorystring.
workingDirectory
string
Specifies the working directory in which you want to run the command. If you leave it empty, the working directory is$(Build.SourcesDirectory).
failOnStderr-Fail on Standard Errorboolean. Default value:false.
failOnStderr
boolean
false
If this is true, this task will fail if any errors are written to theStandardErrorstream.
StandardError
bashEnvValue-Set value for BASH_ENV environment variablestring.
bashEnvValue
string
If the input is specified, its value is expanded and used as the path of a startup file to execute before running the script. If the environment variableBASH_ENVhas already been defined, the task will override this variable only for the current task. Learn more aboutBash Startup Files.
BASH_ENV
noProfile-Don't load the profile startup/initialization filesboolean. Default value:true.
noProfile
boolean
true
Don't load the system-wide startup file/etc/profileor any of the personal initialization files.
/etc/profile
noRc- **Don't read the~/.bashrc' initialization file**<br>boolean. Default value:true`.
noRc
~/.bashrc' initialization file**<br>
. Default value:
Task control options
All tasks have control options in addition to their task inputs. For more information, seeControl options and common task properties.
Output variables
None.
Remarks
The bash task has a shortcut in YAML:steps.bash.
steps:
- bash: string # Required as first property. An inline script. 
  ## Other task inputs
steps:
- bash: string # Required as first property. An inline script. 
  ## Other task inputs
The Bash task will find the first Bash implementation on your system.
Runningwhich bashon Linux/macOS orwhere bashon Windows will give you an idea of which one it will select.
which bash
where bash
Info about Bash startup files
The Bash task invokes the Bash as a non-interactive, non-login shell. When Bash is started non-interactively, to run a shell script, the Bash looks for the variableBASH_ENVin the environment, unfolds its value if it appears there, and uses the value as the name of a file to read and execute.
BASH_ENV
There are several options for defining theBASH_ENVenvironment variable in a pipeline. Firstly, it's possible to set theBASH_ENVenvironment variable as a pipeline variable. In this case, each instance of the Bash task will try to unfold the value of theBASH_ENVvariable and use its value.
BASH_ENV
BASH_ENV
BASH_ENV
variables:
  BASH_ENV: "~/.profile"

steps:
- task: Bash@3
  inputs:
    targetType: 'inline'
    script: env
variables:
  BASH_ENV: "~/.profile"

steps:
- task: Bash@3
  inputs:
    targetType: 'inline'
    script: env
Another option is to setBASH_ENVfor one particular instance of the Bash task, there are two ways how this can be done:
BASH_ENV
The first way is to use thebashEnvValuetask input, see an example for reference:
bashEnvValue
steps:
- task: Bash@3
  inputs:
    targetType: 'inline'
    script: env
    bashEnvValue: '~/.profile'
steps:
- task: Bash@3
  inputs:
    targetType: 'inline'
    script: env
    bashEnvValue: '~/.profile'
Another way is to set theBASH_ENVvariable as an environment variable for the pipeline task via theenvkeyword, for example:
BASH_ENV
env
- task: Bash@3
  inputs:
    targetType: 'inline'
    script: env
  env:
    BASH_ENV: '~/.profile'
- task: Bash@3
  inputs:
    targetType: 'inline'
    script: env
  env:
    BASH_ENV: '~/.profile'
Note
Note that if thebashEnvValueinput is defined in the Bash task, the pipeline task will override the value of theBASH_ENVvariable with the value from thebashEnvValueinput in a case when theBASH_ENVenvironment variable was already defined in the environment.
bashEnvValue
BASH_ENV
bashEnvValue
BASH_ENV
Bash scripts checked into the repo should be set executable (chmod +x).
Otherwise, the task will show a warning andsourcethe file instead.
chmod +x
source
Examples
You can map in variables using theenvparameter which iscommon across all tasks, and is list of additional items to map into the process's environment.
For example, secret variables are not automatically mapped. If you have a secret variable calledFoo, you can map it in like this:
env
Foo
steps:
- task: Bash@3
  inputs:
    targetType: 'inline'
    script: echo $MYSECRET
  env:
    MYSECRET: $(Foo)
steps:
- task: Bash@3
  inputs:
    targetType: 'inline'
    script: echo $MYSECRET
  env:
    MYSECRET: $(Foo)
On macOS or Linux, the example above is equivalent to:
steps:
- script: echo $MYSECRET
  env:
    MYSECRET: $(Foo)
steps:
- script: echo $MYSECRET
  env:
    MYSECRET: $(Foo)
Requirements
Feedback
Was this page helpful?
Additional resources