Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Query Azure Cosmos DB data using a serverless SQL pool
Article
2025-04-14
19 contributors
In this article
A serverless SQL pool allows you to analyze data in your Azure Cosmos DB containers that are enabled withAzure Synapse Linkin near real time without affecting the performance of your transactional workloads. It offers a familiar Transact-SQL (T-SQL) syntax to query data from theanalytical storeand integrated connectivity to a wide range of business intelligence (BI) and ad-hoc querying tools via the T-SQL interface.
For querying Azure Cosmos DB, the fullSELECTsurface area is supported through theOPENROWSETfunction, which includes mostSQL functions and operators. You can also store results of the query that reads data from Azure Cosmos DB along with data in Azure Blob Storage or Azure Data Lake Storage by usingcreate external table as select (CETAS). You can't currently store serverless SQL pool query results to Azure Cosmos DB by using CETAS.
This article explains how to write a query with a serverless SQL pool that queries data from Azure Cosmos DB containers that are enabled with Azure Synapse Link. You can then learn more about building serverless SQL pool views over Azure Cosmos DB containers and connecting them to Power BI models inthis tutorial. This tutorial uses a container with anAzure Cosmos DB well-defined schema. You can also check out the Learn module on how toQuery Azure Cosmos DB with SQL Serverless for Azure Synapse Analytics.
Prerequisites
Make sure that you prepare the analytical store:Enable analytical store onyour Azure Cosmos DB containers.Get the connection string with a read-only key that you can use to query analytical store.Get the read-onlykey that will be used to access the Azure Cosmos DB container.
Enable analytical store onyour Azure Cosmos DB containers.
Get the connection string with a read-only key that you can use to query analytical store.
Get the read-onlykey that will be used to access the Azure Cosmos DB container.
Make sure that you have applied allbest practices, such as:Ensure that your Azure Cosmos DB analytical storage is in the same region as serverless SQL pool.Ensure that the client application (Power BI, Analysis service) is in the same region as serverless SQL pool.If you're returning a large amount of data (more than 80 GB), consider using caching layer such as Analysis services and load the partitions smaller than 80 GB in the Analysis services model.If you're filtering data using string columns, make sure that you use theOPENROWSETfunction with the explicitWITHclause that has the smallest possible types. For example, don't useVARCHAR(1000)if you know that the property has up to five characters.
Ensure that your Azure Cosmos DB analytical storage is in the same region as serverless SQL pool.
Ensure that the client application (Power BI, Analysis service) is in the same region as serverless SQL pool.
If you're returning a large amount of data (more than 80 GB), consider using caching layer such as Analysis services and load the partitions smaller than 80 GB in the Analysis services model.
If you're filtering data using string columns, make sure that you use theOPENROWSETfunction with the explicitWITHclause that has the smallest possible types. For example, don't useVARCHAR(1000)if you know that the property has up to five characters.
OPENROWSET
WITH
VARCHAR(1000)
Overview
Serverless SQL pool enables you to query Azure Cosmos DB analytical storage usingOPENROWSETfunction.
OPENROWSET
OPENROWSET( 
       'CosmosDB',
       '<SQL connection string for Azure Cosmos DB>',
       <other parameters>
    )  [ < with clause > ] AS alias
OPENROWSET( 
       'CosmosDB',
       '<SQL connection string for Azure Cosmos DB>',
       <other parameters>
    )  [ < with clause > ] AS alias
The SQL connection string for Azure Cosmos DB includes the following components:
account- The name of the Azure Cosmos DB account you are targeting.
database- The container name, specified without quotation marks in the OPENROWSET syntax. If the container name contains special characters (for example, a dash -), it should be enclosed in square brackets ([]).
region(optional) - The region of your Cosmos DB analytical storage. If omitted, the container's primary region is used.
endpoint(optional) - The Cosmos DB endpoint URI (for examplehttps://<account name>.documents.azure.us) that is required if your Cosmos DB account does not follow the standard*.documents.azure.comformat.
https://<account name>.documents.azure.us
*.documents.azure.com
Important
Theendpointparameter is needed for accounts that don't match the standard*.documents.azure.comformat. For example, if your Azure Cosmos DB account ends with.documents.azure.us, make sure that you addendpoint=https://<account name>.documents.azure.usin the connection string. Make sure that you includehttps://prefix.
endpoint
*.documents.azure.com
.documents.azure.us
endpoint=https://<account name>.documents.azure.us
https://
These properties can be identified from the standard Cosmos DB connection string, for example:
AccountEndpoint=https://<database account name>.documents.azure.com:443/;AccountKey=<database account master key>;
AccountEndpoint=https://<database account name>.documents.azure.com:443/;AccountKey=<database account master key>;
The SQL connection string can be formatted as follows:
account=<database account name>;database=<database name>;region=<region name>
account=<database account name>;database=<database name>;region=<region name>
This connection string does not include the authentication information required to connect to Cosmos DB analytical storage. Additional information is needed depending on the type of authentication used:
IfOPENROWSETuses workspace managed identity to access the analytical store, you should add theAuthTypeproperty.
OPENROWSET
AuthType
IfOPENROWSETuses an inline account key, you should add thekeyproperty. This allows you to query Azure Cosmos DB collections without needing to prepare credentials.
OPENROWSET
key
Instead of including authentication information in the connection string,OPENROWSETcan reference a credential that contains the Azure Cosmos DB account key. This approach can be used to create views on Azure Cosmos DB collections.
OPENROWSET
These options are described below.
OPENROWSET with key or managed identity
OPENROWSET with credential
The serverless SQL pool enables you to query Cosmos DB Analytical storage and authenticate with the original Cosmos DB account key or to allow Synapse managed identity to access the Cosmos DB Analytical storage. You can use the following syntax in this scenario:
OPENROWSET( 
       'CosmosDB',
       '<SQL connection string for Azure Cosmos DB>',
       <Container name>
    )  [ < with clause > ] AS alias
OPENROWSET( 
       'CosmosDB',
       '<SQL connection string for Azure Cosmos DB>',
       <Container name>
    )  [ < with clause > ] AS alias
In addition to the common properties in the SQL connection string that are described above (account,database,region, andendpoint), you need to addoneof the following options:
AuthType- set this option toManagedIdentityif accessing Cosmos DB using the Synapse workspace Managed Identity.
ManagedIdentity
key- The master key for accessing Cosmos DB data, used if not utilizing the Synapse workspace managed identity.
The examples of connection strings are shown in the following table:
account=<account name>;database=<db name>;region=<region name>;AuthType=ManagedIdentity
account=<account name>;database=<db name>;region=<region name>;key=<account master key>
Instead of defining the access key in OPENROWSET, you can place it in the separate credential and useOPENROWSETsyntax that references a credential:
OPENROWSET
OPENROWSET( 
       PROVIDER = 'CosmosDB',
       CONNECTION = '<SQL connection string for Azure Cosmos DB without account key>',
       OBJECT = '<Container name>',
       [ CREDENTIAL | SERVER_CREDENTIAL ] = '<credential name>'
    )  [ < with clause > ] AS alias
OPENROWSET( 
       PROVIDER = 'CosmosDB',
       CONNECTION = '<SQL connection string for Azure Cosmos DB without account key>',
       OBJECT = '<Container name>',
       [ CREDENTIAL | SERVER_CREDENTIAL ] = '<credential name>'
    )  [ < with clause > ] AS alias
The SQL connection string for Azure Cosmos DB doesn't contain a key in this case. The connection string has the following format:
account=<database account name>;database=<database name>;region=<region name>
account=<database account name>;database=<database name>;region=<region name>
Database account master key is placed in server-level credential or database scoped credential.
Important
Make sure that you're using some UTF-8 database collation, for example,Latin1_General_100_CI_AS_SC_UTF8, because string values in an Azure Cosmos DB analytical store are encoded as UTF-8 text.
A mismatch between text encoding in the file and collation might cause unexpected text conversion errors.
You can easily change default collation of the current database by using the T-SQL statementalter database current collate Latin1_General_100_CI_AI_SC_UTF8.
Latin1_General_100_CI_AS_SC_UTF8
alter database current collate Latin1_General_100_CI_AI_SC_UTF8
Note
A serverless SQL pool doesn't support querying an Azure Cosmos DB transactional store.
Sample dataset
The examples in this article are based on data from theEuropean Center for Disease Prevention and Control (ECDC) COVID-19 CasesandCOVID-19 Open Research Dataset (CORD-19).
You can see the license and the structure of data on these pages. You can alsodownload sample data for the ECDCand CORD-19 datasets.
To follow along with this article showcasing how to query Azure Cosmos DB data with a serverless SQL pool, make sure that you create the following resources:
An Azure Cosmos DB database account that'sAzure Synapse Link enabled
An Azure Cosmos DB database namedcovid
covid
Two Azure Cosmos DB containers namedEcdcandCord19loaded with the preceding sample datasets
Ecdc
Cord19
Note that this connection doesn't guarantee performance because this account might be located in remote region compared to your Synapse SQL endpoint.
Explore Azure Cosmos DB data with automatic schema inference
The easiest way to explore data in Azure Cosmos DB is by using the automatic schema inference capability. By omitting theWITHclause from theOPENROWSETstatement, you can instruct the serverless SQL pool to autodetect (infer) the schema of the analytical store of the Azure Cosmos DB container.
WITH
OPENROWSET
OPENROWSET with key
OPENROWSET with credential
Important
In the script, replace these values with your own values:
your-cosmosdb- the name of your Cosmos DB account
yourcosmosdbkey- your Cosmos DB account key
SELECT TOP 10 *
FROM OPENROWSET( 
       'CosmosDB',
       'Account=your-cosmosdb;Database=covid;Key=yourcosmosdbkey',
       Ecdc) as documents
SELECT TOP 10 *
FROM OPENROWSET( 
       'CosmosDB',
       'Account=your-cosmosdb;Database=covid;Key=yourcosmosdbkey',
       Ecdc) as documents
/*  Setup - create server-level or database scoped credential with Azure Cosmos DB account key:
    CREATE CREDENTIAL MyCosmosDbAccountCredential
    WITH IDENTITY = 'SHARED ACCESS SIGNATURE', SECRET = 'yourcosmosdbkey';
*/
SELECT TOP 10 *
FROM OPENROWSET(
      PROVIDER = 'CosmosDB',
      CONNECTION = 'Account=your-cosmosdb;Database=covid',
      OBJECT = 'Ecdc',
      SERVER_CREDENTIAL = 'MyCosmosDbAccountCredential'
    ) with ( date_rep varchar(20), cases bigint, geo_id varchar(6) ) as rows
/*  Setup - create server-level or database scoped credential with Azure Cosmos DB account key:
    CREATE CREDENTIAL MyCosmosDbAccountCredential
    WITH IDENTITY = 'SHARED ACCESS SIGNATURE', SECRET = 'yourcosmosdbkey';
*/
SELECT TOP 10 *
FROM OPENROWSET(
      PROVIDER = 'CosmosDB',
      CONNECTION = 'Account=your-cosmosdb;Database=covid',
      OBJECT = 'Ecdc',
      SERVER_CREDENTIAL = 'MyCosmosDbAccountCredential'
    ) with ( date_rep varchar(20), cases bigint, geo_id varchar(6) ) as rows
In the preceding example, we instructed the serverless SQL pool to connect to thecoviddatabase in the Azure Cosmos DB accountMyCosmosDbAccountauthenticated by using the Azure Cosmos DB key (the dummy in the preceding example). We then accessed theEcdccontainer's analytical store in theWest US 2region. Since there's no projection of specific properties, theOPENROWSETfunction returns all properties from the Azure Cosmos DB items.
covid
MyCosmosDbAccount
Ecdc
West US 2
OPENROWSET
Assuming that the items in the Azure Cosmos DB container havedate_rep,cases, andgeo_idproperties, the results of this query are shown in the following table:
date_rep
cases
geo_id
If you need to explore data from the other container in the same Azure Cosmos DB database, you can use the same connection string and reference the required container as the third parameter:
SELECT TOP 10 *
FROM OPENROWSET( 
       'CosmosDB',
       'Account=your-cosmosdb;Database=covid;Key=yourcosmosdbkey',
       Cord19) as cord19
SELECT TOP 10 *
FROM OPENROWSET( 
       'CosmosDB',
       'Account=your-cosmosdb;Database=covid;Key=yourcosmosdbkey',
       Cord19) as cord19
Explicitly specify schema
While automatic schema inference capability inOPENROWSETprovides a simple, easy-to-use experience, your business scenarios might require you to explicitly specify the schema to read-only relevant properties from the Azure Cosmos DB data.
OPENROWSET
TheOPENROWSETfunction lets you explicitly specify which properties you want to read from the data in the container and to specify their data types.
OPENROWSET
Let's imagine that we've imported some data from theECDC COVID datasetwith the following structure into Azure Cosmos DB:
{"date_rep":"2020-08-13","cases":254,"countries_and_territories":"Serbia","geo_id":"RS"}
{"date_rep":"2020-08-12","cases":235,"countries_and_territories":"Serbia","geo_id":"RS"}
{"date_rep":"2020-08-11","cases":163,"countries_and_territories":"Serbia","geo_id":"RS"}
{"date_rep":"2020-08-13","cases":254,"countries_and_territories":"Serbia","geo_id":"RS"}
{"date_rep":"2020-08-12","cases":235,"countries_and_territories":"Serbia","geo_id":"RS"}
{"date_rep":"2020-08-11","cases":163,"countries_and_territories":"Serbia","geo_id":"RS"}
These flat JSON documents in Azure Cosmos DB can be represented as a set of rows and columns in Synapse SQL. TheOPENROWSETfunction allows you to specify a subset of properties that you want to read and the exact column types in theWITHclause:
OPENROWSET
WITH
OPENROWSET with key
OPENROWSET with credential
SELECT TOP 10 *
FROM OPENROWSET(
      'CosmosDB',
      'Account=your-cosmosdb;Database=covid;Key=yourcosmosdbkey',
       Ecdc
    ) with ( date_rep varchar(20), cases bigint, geo_id varchar(6) ) as rows
SELECT TOP 10 *
FROM OPENROWSET(
      'CosmosDB',
      'Account=your-cosmosdb;Database=covid;Key=yourcosmosdbkey',
       Ecdc
    ) with ( date_rep varchar(20), cases bigint, geo_id varchar(6) ) as rows
/*  Setup - create server-level or database scoped credential with Azure Cosmos DB account key:
    CREATE CREDENTIAL MyCosmosDbAccountCredential
    WITH IDENTITY = 'SHARED ACCESS SIGNATURE', SECRET = 'yourcosmosdbkey';
*/
SELECT TOP 10 *
FROM OPENROWSET(
      PROVIDER = 'CosmosDB',
      CONNECTION = 'Account=your-cosmosdb;Database=covid',
      OBJECT = 'Ecdc',
      SERVER_CREDENTIAL = 'MyCosmosDbAccountCredential'
    ) with ( date_rep varchar(20), cases bigint, geo_id varchar(6) ) as rows
/*  Setup - create server-level or database scoped credential with Azure Cosmos DB account key:
    CREATE CREDENTIAL MyCosmosDbAccountCredential
    WITH IDENTITY = 'SHARED ACCESS SIGNATURE', SECRET = 'yourcosmosdbkey';
*/
SELECT TOP 10 *
FROM OPENROWSET(
      PROVIDER = 'CosmosDB',
      CONNECTION = 'Account=your-cosmosdb;Database=covid',
      OBJECT = 'Ecdc',
      SERVER_CREDENTIAL = 'MyCosmosDbAccountCredential'
    ) with ( date_rep varchar(20), cases bigint, geo_id varchar(6) ) as rows
The result of this query might look like the following table:
For more information about the SQL types that should be used for Azure Cosmos DB values, seeAzure Cosmos DB to SQL type mappingsat the end of this article.
Create view
Creating views in themasteror default databases isn't recommended or supported. So you need to create a user database for your views.
master
Once you identify the schema, you can prepare a view on top of your Azure Cosmos DB data. You should place your Azure Cosmos DB account key in a separate credential and reference this credential fromOPENROWSETfunction. Don't keep your account key in the view definition.
OPENROWSET
CREATE CREDENTIAL MyCosmosDbAccountCredential
WITH IDENTITY = 'SHARED ACCESS SIGNATURE', SECRET = 'yourcosmosdbkey';
GO
CREATE OR ALTER VIEW Ecdc
AS SELECT *
FROM OPENROWSET(
      PROVIDER = 'CosmosDB',
      CONNECTION = 'Account=your-cosmosdb;Database=covid',
      OBJECT = 'Ecdc',
      SERVER_CREDENTIAL = 'MyCosmosDbAccountCredential'
    ) with ( date_rep varchar(20), cases bigint, geo_id varchar(6) ) as rows
CREATE CREDENTIAL MyCosmosDbAccountCredential
WITH IDENTITY = 'SHARED ACCESS SIGNATURE', SECRET = 'yourcosmosdbkey';
GO
CREATE OR ALTER VIEW Ecdc
AS SELECT *
FROM OPENROWSET(
      PROVIDER = 'CosmosDB',
      CONNECTION = 'Account=your-cosmosdb;Database=covid',
      OBJECT = 'Ecdc',
      SERVER_CREDENTIAL = 'MyCosmosDbAccountCredential'
    ) with ( date_rep varchar(20), cases bigint, geo_id varchar(6) ) as rows
Don't useOPENROWSETwithout explicitly defined schema because it might affect your performance. Make sure that you use the smallest possible sizes for your columns (for exampleVARCHAR(100)instead of defaultVARCHAR(8000)). You should use some UTF-8 collation as default database collation or set it as explicit column collation to avoid aUTF-8 conversion issue. CollationLatin1_General_100_BIN2_UTF8provides best performance when you filter data using some string columns.
OPENROWSET
VARCHAR(100)
VARCHAR(8000)
Latin1_General_100_BIN2_UTF8
When you query the view, you might encounter errors or unexpected results. The view references columns or objects were probably modified or no longer exists. You need to manually adjust the view definition to align with the underlying schema changes. Keep in mind that this can happen both when using automatic schema inference in the view and when explicitly specifying the schema.
Query nested objects
With Azure Cosmos DB, you can represent more complex data models by composing them as nested objects or arrays. The autosync capability of Azure Synapse Link for Azure Cosmos DB manages the schema representation in the analytical store out of the box, which includes handling nested data types that allow for rich querying from the serverless SQL pool.
For example, theCORD-19dataset has JSON documents that follow this structure:
{
    "paper_id": <str>,                   # 40-character sha1 of the PDF
    "metadata": {
        "title": <str>,
        "authors": <array of objects>    # list of author dicts, in order
        ...
     }
     ...
}
{
    "paper_id": <str>,                   # 40-character sha1 of the PDF
    "metadata": {
        "title": <str>,
        "authors": <array of objects>    # list of author dicts, in order
        ...
     }
     ...
}
The nested objects and arrays in Azure Cosmos DB are represented as JSON strings in the query result when theOPENROWSETfunction reads them. You can specify the paths to nested values in the objects when you use theWITHclause:
OPENROWSET
WITH
SELECT TOP 10 *
FROM OPENROWSET( 
       'CosmosDB',
       'Account=your-cosmosdb;Database=covid;Key=yourcosmosdbkey',
       Cord19)
WITH (  paper_id    varchar(8000),
        title        varchar(1000) '$.metadata.title',
        metadata     varchar(max),
        authors      varchar(max) '$.metadata.authors'
) AS docs;
SELECT TOP 10 *
FROM OPENROWSET( 
       'CosmosDB',
       'Account=your-cosmosdb;Database=covid;Key=yourcosmosdbkey',
       Cord19)
WITH (  paper_id    varchar(8000),
        title        varchar(1000) '$.metadata.title',
        metadata     varchar(max),
        authors      varchar(max) '$.metadata.authors'
) AS docs;
The result of this query might look like the following table:
{"title":"Supplementary Informatiâ¦
[{"first":"Julien","last":"MÃ©lade","suffix":"","afâ¦
{"title":"The Use of Convalescentâ¦
[{"first":"Antonio","last":"Lavazza","suffix":"", â¦
{"title":"Tylosema esculentum (Maâ¦
[{"first":"Walter","last":"Chingwaru","suffix":"",â¦
To learn more, seeAnalyze complex data types in Azure Synapse AnalyticsorQuery nested types in Parquet and JSON files by using serverless SQL pool.
Important
If you see unexpected characters in your text likeMÃÆÃ&copy;ladeinstead ofMÃ©lade, then your database collation isn't set toUTF-8collation. You canchange the database collationto UTF-8 collation by using a SQL statement likeALTER DATABASE MyLdw COLLATE LATIN1_GENERAL_100_CI_AS_SC_UTF8.
MÃÆÃ&copy;lade
MÃ©lade
ALTER DATABASE MyLdw COLLATE LATIN1_GENERAL_100_CI_AS_SC_UTF8
Flatten nested arrays
Azure Cosmos DB data might have nested subarrays like the author's array from aCORD-19dataset:
{
    "paper_id": <str>,                      # 40-character sha1 of the PDF
    "metadata": {
        "title": <str>,
        "authors": [                        # list of author dicts, in order
            {
                "first": <str>,
                "middle": <list of str>,
                "last": <str>,
                "suffix": <str>,
                "affiliation": <dict>,
                "email": <str>
            },
            ...
        ],
        ...
}
{
    "paper_id": <str>,                      # 40-character sha1 of the PDF
    "metadata": {
        "title": <str>,
        "authors": [                        # list of author dicts, in order
            {
                "first": <str>,
                "middle": <list of str>,
                "last": <str>,
                "suffix": <str>,
                "affiliation": <dict>,
                "email": <str>
            },
            ...
        ],
        ...
}
In some cases, you might need tojointhe properties from the top item (metadata) with all elements of the array (authors). A serverless SQL pool allows you to flatten nested structures by applying theOPENJSONfunction on the nested array:
OPENJSON
SELECT
    *
FROM
    OPENROWSET(
      'CosmosDB',
      'Account=your-cosmosdb;Database=covid;Key=yourcosmosdbkey',
       Cord19
    ) WITH ( title varchar(1000) '$.metadata.title',
             authors varchar(max) '$.metadata.authors' ) AS docs
      CROSS APPLY OPENJSON ( authors )
                  WITH (
                       first varchar(50),
                       last varchar(50),
                       affiliation nvarchar(max) as json
                  ) AS a
SELECT
    *
FROM
    OPENROWSET(
      'CosmosDB',
      'Account=your-cosmosdb;Database=covid;Key=yourcosmosdbkey',
       Cord19
    ) WITH ( title varchar(1000) '$.metadata.title',
             authors varchar(max) '$.metadata.authors' ) AS docs
      CROSS APPLY OPENJSON ( authors )
                  WITH (
                       first varchar(50),
                       last varchar(50),
                       affiliation nvarchar(max) as json
                  ) AS a
The result of this query might look like the following table:
[{"first":"Julien","last":"MÃ©lade","suffix":"","affiliation":{"laboratory":"Centre de Recherâ¦
{"laboratory":"Centre de Recherâ¦
[{"first":"Nicolas","last":"4#","suffix":"","affiliation":{"laboratory":"","institution":"Uâ¦
{"laboratory":"","institution":"Uâ¦
[{"first":"Beza","last":"Ramazindrazana","suffix":"","affiliation":{"laboratory":"Centre de Recherâ¦
{"laboratory":"Centre de Recherâ¦
[{"first":"Olivier","last":"Flores","suffix":"","affiliation":{"laboratory":"UMR C53 CIRAD, â¦
{"laboratory":"UMR C53 CIRAD, â¦
Important
If you see unexpected characters in your text likeMÃÆÃ&copy;ladeinstead ofMÃ©lade, then your database collation isn't set toUTF-8collation. You canchange the database collationto UTF-8 collation by using a SQL statement likeALTER DATABASE MyLdw COLLATE LATIN1_GENERAL_100_CI_AS_SC_UTF8.
MÃÆÃ&copy;lade
MÃ©lade
ALTER DATABASE MyLdw COLLATE LATIN1_GENERAL_100_CI_AS_SC_UTF8
Azure Cosmos DB to SQL type mappings
Although Azure Cosmos DB transactional store is schema-agnostic, the analytical store is schematized to optimize for analytical query performance. With the autosync capability of Azure Synapse Link, Azure Cosmos DB manages the schema representation in the analytical store out of the box, which includes handling nested data types. Since a serverless SQL pool queries the analytical store, it's important to understand how to map Azure Cosmos DB input data types to SQL data types.
Azure Cosmos DB accounts of SQL (Core) API support JSON property types ofnumber,string,Boolean,null,nested object, orarray. You would need to choose SQL types that match these JSON types if you're using theWITHclause inOPENROWSET. The following table shows the SQL column types that should be used for different property types in Azure Cosmos DB.
WITH
OPENROWSET
any SQL type
Full fidelity schema
Azure Cosmos DB full fidelity schema records both values and their best match types for every property in a container. TheOPENROWSETfunction on a container with full fidelity schema provides both the type and the actual value in each cell. Let's assume that the following query reads the items from a container with full fidelity schema:
OPENROWSET
SELECT *
FROM OPENROWSET(
      'CosmosDB',
      'account=MyCosmosDbAccount;database=covid;region=westus2;key=C0Sm0sDbKey==',
       Ecdc
    ) as rows
SELECT *
FROM OPENROWSET(
      'CosmosDB',
      'account=MyCosmosDbAccount;database=covid;region=westus2;key=C0Sm0sDbKey==',
       Ecdc
    ) as rows
The result of this query returns types and values formatted as JSON text:
For every value, you can see the type identified in an Azure Cosmos DB container item. Most of the values for thedate_repproperty containdatevalues, but some of them are incorrectly stored as strings in Azure Cosmos DB. Full fidelity schema returns both correctly typeddatevalues and incorrectly formattedstringvalues.
date_rep
date
date
string
The number of cases is stored as anint32value, but there's one value that's entered as a decimal number. This value has thefloat64type. If there are some values that exceed the largestint32number, they would be stored as theint64type. Allgeo_idvalues in this example are stored asstringtypes.
int32
float64
int32
int64
geo_id
string
Important
TheOPENROWSETfunction without aWITHclause exposes both values with expected types and the values with incorrectly entered types. This function is designed for data exploration and not for reporting. Don't parse JSON values returned from this function to build reports. Use an explicitWITH clauseto create your reports. You should clean up the values that have incorrect types in the Azure Cosmos DB container to apply corrections in the full fidelity analytical store.
OPENROWSET
WITH
To query Azure Cosmos DB for MongoDB accounts, you can learn more about the full fidelity schema representation in the analytical store and the extended property names to be used inWhat is Azure Cosmos DB Analytical Store?.
Query items with full fidelity schema
While querying full fidelity schema, you need to explicitly specify the SQL type and the expected Azure Cosmos DB property type in theWITHclause.
WITH
In the following example, we assume thatstringis the correct type for thegeo_idproperty, andint32is the correct type for thecasesproperty:
string
geo_id
int32
cases
SELECT geo_id, cases = SUM(cases)
FROM OPENROWSET(
      'CosmosDB'
      'account=MyCosmosDbAccount;database=covid;region=westus2;key=C0Sm0sDbKey==',
       Ecdc
    ) WITH ( geo_id VARCHAR(50) '$.geo_id.string',
             cases INT '$.cases.int32'
    ) as rows
GROUP BY geo_id
SELECT geo_id, cases = SUM(cases)
FROM OPENROWSET(
      'CosmosDB'
      'account=MyCosmosDbAccount;database=covid;region=westus2;key=C0Sm0sDbKey==',
       Ecdc
    ) WITH ( geo_id VARCHAR(50) '$.geo_id.string',
             cases INT '$.cases.int32'
    ) as rows
GROUP BY geo_id
Values forgeo_idandcasesthat have other types are returned asNULLvalues. This query references only thecaseswith the specified type in the expression (cases.int32).
geo_id
cases
NULL
cases
cases.int32
If you have values with other types (cases.int64,cases.float64) that can't be cleaned in an Azure Cosmos DB container, you would need to explicitly reference them in aWITHclause and combine the results. The following query aggregates bothint32,int64, andfloat64stored in thecasescolumn:
cases.int64
cases.float64
WITH
int32
int64
float64
cases
SELECT geo_id, cases = SUM(cases_int) + SUM(cases_bigint) + SUM(cases_float)
FROM OPENROWSET(
      'CosmosDB',
      'account=MyCosmosDbAccount;database=covid;region=westus2;key=C0Sm0sDbKey==',
       Ecdc
    ) WITH ( geo_id VARCHAR(50) '$.geo_id.string', 
             cases_int INT '$.cases.int32',
             cases_bigint BIGINT '$.cases.int64',
             cases_float FLOAT '$.cases.float64'
    ) as rows
GROUP BY geo_id
SELECT geo_id, cases = SUM(cases_int) + SUM(cases_bigint) + SUM(cases_float)
FROM OPENROWSET(
      'CosmosDB',
      'account=MyCosmosDbAccount;database=covid;region=westus2;key=C0Sm0sDbKey==',
       Ecdc
    ) WITH ( geo_id VARCHAR(50) '$.geo_id.string', 
             cases_int INT '$.cases.int32',
             cases_bigint BIGINT '$.cases.int64',
             cases_float FLOAT '$.cases.float64'
    ) as rows
GROUP BY geo_id
In this example, the number of cases is stored either asint32,int64, orfloat64values. All values must be extracted to calculate the number of cases per country or region.
int32
int64
float64
Troubleshooting
Review theself-help pageto find the known issues or troubleshooting steps that can help you to resolve potential problems with Azure Cosmos DB queries.
Related content
Use Power BI and serverless Synapse SQL pool to analyze Azure Cosmos DB data
Create and use views using serverless SQL pool
Tutorial: Explore and Analyze data lakes with serverless SQL pool
If you're getting errors or experiencing performance issues, seeTroubleshoot serverless SQL pool
Module: Implement Azure Synapse Link with Azure Cosmos DB
Feedback
Was this page helpful?
Additional resources