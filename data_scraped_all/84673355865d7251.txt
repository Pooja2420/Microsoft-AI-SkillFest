Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Deploy and manage cluster extensions by using Azure CLI
Article
2024-08-01
4 contributors
In this article
You can create extension instances in an AKS cluster, setting required and optional parameters including options related to updates and configurations. You can also view, list, update, and delete extension instances.
Before you begin, read aboutcluster extensions.
Note
The examples provided in this article are not complete, and are only meant to showcase functionality. For a comprehensive list of commands and their parameters, see theâ¯az k8s-extension CLI reference.
Prerequisites
An Azure subscription. If you don't have an Azure subscription, you can create afree account.
An Azure subscription. If you don't have an Azure subscription, you can create afree account.
TheMicrosoft.ContainerServiceandMicrosoft.KubernetesConfigurationresource providers must be registered on your subscription. To register these providers, run the following command:az provider register --namespace Microsoft.ContainerService --wait 
az provider register --namespace Microsoft.KubernetesConfiguration --wait
TheMicrosoft.ContainerServiceandMicrosoft.KubernetesConfigurationresource providers must be registered on your subscription. To register these providers, run the following command:
Microsoft.ContainerService
Microsoft.KubernetesConfiguration
az provider register --namespace Microsoft.ContainerService --wait 
az provider register --namespace Microsoft.KubernetesConfiguration --wait
az provider register --namespace Microsoft.ContainerService --wait 
az provider register --namespace Microsoft.KubernetesConfiguration --wait
An AKS cluster. This cluster must have been created with a managed identity, as cluster extensions won't work with service principal-based clusters. For new clusters created withaz aks create, managed identity is configured by default. For existing service principal-based clusters, switch to manage identity by runningaz aks updatewith the--enable-managed-identityflag. For more information, seeUse managed identity.
An AKS cluster. This cluster must have been created with a managed identity, as cluster extensions won't work with service principal-based clusters. For new clusters created withaz aks create, managed identity is configured by default. For existing service principal-based clusters, switch to manage identity by runningaz aks updatewith the--enable-managed-identityflag. For more information, seeUse managed identity.
az aks create
az aks update
--enable-managed-identity
Azure CLIversion >= 2.16.0 installed. We recommend using the latest version.
Azure CLIversion >= 2.16.0 installed. We recommend using the latest version.
The latest version of thek8s-extensionAzure CLI extensions. Install the extension by running the following command:az extension add --name k8s-extensionIf the extension is already installed, make sure you're running the latest version by using the following command:az extension update --name k8s-extension
The latest version of thek8s-extensionAzure CLI extensions. Install the extension by running the following command:
k8s-extension
az extension add --name k8s-extension
az extension add --name k8s-extension
If the extension is already installed, make sure you're running the latest version by using the following command:
az extension update --name k8s-extension
az extension update --name k8s-extension
Create extension instance
Create a new extension instance withk8s-extension create, passing in values for the mandatory parameters. This example command creates an Azure Machine Learning extension instance on your AKS cluster:
k8s-extension create
az k8s-extension create --name azureml --extension-type Microsoft.AzureML.Kubernetes --scope cluster --cluster-name <clusterName> --resource-group <resourceGroupName> --cluster-type managedClusters --configuration-settings enableInference=True allowInsecureConnections=True inferenceRouterServiceType=LoadBalancer
az k8s-extension create --name azureml --extension-type Microsoft.AzureML.Kubernetes --scope cluster --cluster-name <clusterName> --resource-group <resourceGroupName> --cluster-type managedClusters --configuration-settings enableInference=True allowInsecureConnections=True inferenceRouterServiceType=LoadBalancer
This example command creates a sample Kubernetes application (published on Marketplace) on your AKS cluster:
az k8s-extension create --name voteapp --extension-type Contoso.AzureVoteKubernetesAppTest --scope cluster --cluster-name <clusterName> --resource-group <resourceGroupName> --cluster-type managedClusters --plan-name testPlanID --plan-product testOfferID --plan-publisher testPublisherID --configuration-settings title=VoteAnimal value1=Cats value2=Dogs
az k8s-extension create --name voteapp --extension-type Contoso.AzureVoteKubernetesAppTest --scope cluster --cluster-name <clusterName> --resource-group <resourceGroupName> --cluster-type managedClusters --plan-name testPlanID --plan-product testOfferID --plan-publisher testPublisherID --configuration-settings title=VoteAnimal value1=Cats value2=Dogs
Note
The Cluster Extensions service is unable to retain sensitive information for more than 48 hours. If the cluster extension agents don't have network connectivity for more than 48 hours and can't determine whether to create an extension on the cluster, then the extension transitions toFailedstate. Once inFailedstate, you'll need to runk8s-extension createagain to create a fresh extension instance.
Failed
Failed
k8s-extension create
Required parameters
--name
--extension-type
Microsoft.AzureML.Kubernetes
--cluster-name
--resource-group
--cluster-type
managedClusters
Optional parameters
--auto-upgrade-minor-version
true
version
false
--version
true
--configuration-settings
key=value
--configuration-settings-file
--configuration-settings-file
--configuration-settings
--configuration-protected-settings
GET
az k8s-extension show
key=value
--configuration-protected-settings-file
--configuration-protected-settings-file
--configuration-protected-settings
--scope
cluster
namespace
--release-namespace
scope
cluster
--release-train
Stable
Preview
Stable
--auto-upgrade-minor-version
false
--target-namespace
scope
namespace
--plan-name
--plan-product
--plan-publisher
Show details of an extension instance
To view details of a currently installed extension instance, usek8s-extension show, passing in values for the mandatory parameters.
k8s-extension show
az k8s-extension show --name azureml --cluster-name <clusterName> --resource-group <resourceGroupName> --cluster-type managedClusters
az k8s-extension show --name azureml --cluster-name <clusterName> --resource-group <resourceGroupName> --cluster-type managedClusters
List all extensions installed on the cluster
To list all extensions installed on a cluster, usek8s-extension list, passing in values for the mandatory parameters.
k8s-extension list
az k8s-extension list --cluster-name <clusterName> --resource-group <resourceGroupName> --cluster-type managedClusters
az k8s-extension list --cluster-name <clusterName> --resource-group <resourceGroupName> --cluster-type managedClusters
Update extension instance
Note
Refer to documentation for the specific extension type to understand the specific settings in--configuration-settingsand--configuration-protected-settingsthat are able to be updated. For--configuration-protected-settings, all settings are expected to be provided, even if only one setting is being updated. If any of these settings are omitted, those settings will be considered obsolete and deleted.
--configuration-settings
--configuration-protected-settings
--configuration-protected-settings
To update an existing extension instance, usek8s-extension update, passing in values for the mandatory parameters. The following command updates the auto-upgrade setting for an Azure Machine Learning extension instance:
k8s-extension update
az k8s-extension update --name azureml --extension-type Microsoft.AzureML.Kubernetes --scope cluster --cluster-name <clusterName> --resource-group <resourceGroupName> --cluster-type managedClusters
az k8s-extension update --name azureml --extension-type Microsoft.AzureML.Kubernetes --scope cluster --cluster-name <clusterName> --resource-group <resourceGroupName> --cluster-type managedClusters
Required parameters for update
--name
--extension-type
--cluster-name
--resource-group
--cluster-type
managedClusters
If updating a Kubernetes application procured through Marketplace, the following parameters are also required:
--plan-name
--plan-product
--plan-publisher
Optional parameters for update
--auto-upgrade-minor-version
true
version
false
--version
true
--configuration-settings
key=value
--configuration-settings-file
--configuration-settings-file
--configuration-settings
--configuration-protected-settings
GET
az k8s-extension show
key=value
--configuration-protected-settings-file
--configuration-protected-settings-file
--configuration-protected-settings
--scope
cluster
namespace
--release-train
Stable
Preview
Stable
autoUpgradeMinorVersion
false
Delete extension instance
To delete an extension instance on a cluster, usek8s-extension-delete, passing in values for the mandatory parameters.
k8s-extension-delete
az k8s-extension delete --name azureml --cluster-name <clusterName> --resource-group <resourceGroupName> --cluster-type managedClusters
az k8s-extension delete --name azureml --cluster-name <clusterName> --resource-group <resourceGroupName> --cluster-type managedClusters
Note
The Azure resource representing this extension gets deleted immediately. The Helm release on the cluster associated with this extension is only deleted when the agents running on the Kubernetes cluster have network connectivity and can reach out to Azure services again to fetch the desired state.
Next steps
View the list ofcurrently available cluster extensions.
Learn aboutKubernetes applications available through Marketplace.
Azure Kubernetes Service

Additional resources