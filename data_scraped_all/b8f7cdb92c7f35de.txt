Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Build Java apps
Article
2025-04-17
13 contributors
In this article
Azure DevOps Services | Azure DevOps Server 2022 - Azure DevOps Server 2019
You can use a pipeline to automatically:
Build your project usingMaven,Gradle, orAnt.
Run tests and code analysis tools.
Publish your app to your pipeline and Azure Artifacts.
Deploy your app toAzure App Service,Azure Functions, orAzure Kubernetes Service.
If you're working on an Android project, seeBuild, test, and deploy Android apps.
Prerequisites
Create a GitHub repository
Fork the following repo to your GitHub account:
https://github.com/MicrosoftDocs/pipelines-java
https://github.com/MicrosoftDocs/pipelines-java
Create a pipeline
Sign in to your Azure DevOps organization and go to your project.
Sign in to your Azure DevOps organization and go to your project.
Go toPipelines, and then selectNew pipelineorCreate pipelineif creating the first pipeline in the project.
Go toPipelines, and then selectNew pipelineorCreate pipelineif creating the first pipeline in the project.
Perform the steps of the wizard by first selectingGitHubas the location of your source code. You might be redirected to GitHub to sign in. If so, enter your GitHub credentials.
Perform the steps of the wizard by first selectingGitHubas the location of your source code. You might be redirected to GitHub to sign in. If so, enter your GitHub credentials.
Select your repo. You might be redirected to GitHub to install the Azure Pipelines app. If so, selectApprove & install.
Select your repo. You might be redirected to GitHub to install the Azure Pipelines app. If so, selectApprove & install.
When you see theConfigure your pipelinetab, selectMaven,Gradle, orAntdepending on how you want tobuild your code.
When you see theConfigure your pipelinetab, selectMaven,Gradle, orAntdepending on how you want tobuild your code.
Aazure-pipelines.ymlfile containing your pipeline definition is created in your repo and opened in the YAML editor. You can customize the pipeline by adding more tasks or modifying the existing tasks. For more information about the build tasks, seeBuild your code.
Aazure-pipelines.ymlfile containing your pipeline definition is created in your repo and opened in the YAML editor. You can customize the pipeline by adding more tasks or modifying the existing tasks. For more information about the build tasks, seeBuild your code.
azure-pipelines.yml
When you're finished editing theazure-pipelines.yml, selectSave and run.
When you're finished editing theazure-pipelines.yml, selectSave and run.
azure-pipelines.yml
To commit theazure-pipelines.ymlfile to your repo, selectSave and runagain.
To commit theazure-pipelines.ymlfile to your repo, selectSave and runagain.
azure-pipelines.yml
SelectJobto watch  your pipeline in action.
Go to your collection and select your project.
Go to your collection and select your project.
SelectPipelines, and then selectNew pipelineorCreate pipelineif creating the first pipeline in the project.
SelectPipelines, and then selectNew pipelineorCreate pipelineif creating the first pipeline in the project.
Perform the steps of the wizard by first selectingGitHub Enterprise Serveras the location of your source code.
Perform the steps of the wizard by first selectingGitHub Enterprise Serveras the location of your source code.
Use an existing GitHub service connection or create a new one.To create a service connection:SelectConnect to GitHub Enterprise Server.Enter your GitHub Enterprise Server URL.Enter your GitHub Enterprise Server personal access token. If you don't have a personal access token, you can create one in your GitHub Enterprise Server account. For more information, seeCreating a personal access token.
Use an existing GitHub service connection or create a new one.
To create a service connection:
SelectConnect to GitHub Enterprise Server.
Enter your GitHub Enterprise Server URL.
Enter your GitHub Enterprise Server personal access token. If you don't have a personal access token, you can create one in your GitHub Enterprise Server account. For more information, seeCreating a personal access token.
Select your repository. You might be redirected to GitHub to install the Azure Pipelines app. If so, selectApprove & install.
Select your repository. You might be redirected to GitHub to install the Azure Pipelines app. If so, selectApprove & install.
When you see theConfigure your pipelinetab, selectMaven,Gradle, orAntdepending on how you want tobuild your code.
When you see theConfigure your pipelinetab, selectMaven,Gradle, orAntdepending on how you want tobuild your code.
Anazure-pipelines-ymlfile containing your pipeline definition is created in your repo and opened in the YAML editor. You can customize the pipeline by adding more tasks or modifying the existing tasks. For more information about the build tasks, seeBuild your code.
Anazure-pipelines-ymlfile containing your pipeline definition is created in your repo and opened in the YAML editor. You can customize the pipeline by adding more tasks or modifying the existing tasks. For more information about the build tasks, seeBuild your code.
azure-pipelines-yml
When you're finished editing theazure-pipelines.yml, selectSave and run.
When you're finished editing theazure-pipelines.yml, selectSave and run.
azure-pipelines.yml
To commit theazure-pipelines.ymlfile to your repo, selectSave and runagain.
To commit theazure-pipelines.ymlfile to your repo, selectSave and runagain.
azure-pipelines.yml
You can selectJobto watch your pipeline in action.
You now have a working YAML pipeline (azure-pipelines.yml) in your repo that's ready for you to customize! To make changes to your pipeline, select it in thePipelinespage, and thenEdittheazure-pipelines.ymlfile.
azure-pipelines.yml
azure-pipelines.yml
Build environment
You can use Azure Pipelines to build Java apps without needing to set up any infrastructure of your own. You can build on Windows, Linux, or macOS images. The Microsoft-hosted agents in Azure Pipelines have modern JDKs and other tools for Java preinstalled. To know which versions of Java are installed, seeMicrosoft-hosted agents.
To select the appropriate image, update the following snippet in yourazure-pipelines.ymlfile.
azure-pipelines.yml
pool:
  vmImage: 'ubuntu-latest' # other options: 'macOS-latest', 'windows-latest'
pool:
  vmImage: 'ubuntu-latest' # other options: 'macOS-latest', 'windows-latest'
SeeMicrosoft-hosted agentsfor a complete list of images.
As an alternative to using Microsoft-hosted agents, you can set upself-hosted agentswith Java installed. You can also use self-hosted agents to save more time if you have a large repo or you run incremental builds.
Your builds run on aself-hosted agent. Make sure that you have Java and the tools necessary to build with your chosen method installed on the agent's host.
You can select your agent pool and the agent capabilities in theAgent poolandAgent Specificationsections of theOptionstab in the pipeline editor.
For example to specify the agent pool and an agent with the Maven capability, add the following snippet to yourazure-pipelines.ymlfile.
azure-pipelines.yml
pool: 
  name: MyPool
  demands: maven
pool: 
  name: MyPool
  demands: maven
Build your code
You can build your Java app with Maven, Gradle, Ant, or a script. The following sections show you how to add a build step to your pipeline for each method.
Maven
With your Maven build, the following tasks are added to yourazure-pipelines.ymlfile. Replace the values to match your project. For more information about the task options, see theMaven task.
azure-pipelines.yml
steps:
- task: Maven@4
  inputs:
    mavenPomFile: 'pom.xml'
    mavenOptions: '-Xmx3072m'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: 'default'
    jdkArchitectureOption: 'x64'
    publishJUnitResults: true
    testResultsFiles: '**/TEST-*.xml'
    goals: 'package'
steps:
- task: Maven@4
  inputs:
    mavenPomFile: 'pom.xml'
    mavenOptions: '-Xmx3072m'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: 'default'
    jdkArchitectureOption: 'x64'
    publishJUnitResults: true
    testResultsFiles: '**/TEST-*.xml'
    goals: 'package'
ForSpring Boot, you can use theMaventask as well. Make sure that yourmavenPomFilevalue reflects the path to yourpom.xmlfile. For example, if you're using theSpring Boot sample repo, your path iscomplete/pom.xml.
mavenPomFile
pom.xml
complete/pom.xml
Adjust themavenPomFilevalue if yourpom.xmlfile isn't in the root of the repo. The file path value should be relative to the root of the repo, such asIdentityService/pom.xmlor$(system.defaultWorkingDirectory)/IdentityService/pom.xml.
mavenPomFile
pom.xml
IdentityService/pom.xml
$(system.defaultWorkingDirectory)/IdentityService/pom.xml
Set thegoalsvalue to a space-separated list of goals for Maven to execute, such asclean package. For details about common Java phases and goals, seeApache's Maven documentation.
clean package
Gradle
With the Gradle build, the following task is added to yourazure-pipelines.ymlfile. For more information about these options, see theGradletask.
azure-pipelines.yml
steps:
- task: Gradle@2
  inputs:
    workingDirectory: ''
    gradleWrapperFile: 'gradlew'
    gradleOptions: '-Xmx3072m'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: 'default'
    jdkArchitectureOption: 'x64'
    publishJUnitResults: true
    testResultsFiles: '**/TEST-*.xml'
    tasks: 'build'
steps:
- task: Gradle@2
  inputs:
    workingDirectory: ''
    gradleWrapperFile: 'gradlew'
    gradleOptions: '-Xmx3072m'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: 'default'
    jdkArchitectureOption: 'x64'
    publishJUnitResults: true
    testResultsFiles: '**/TEST-*.xml'
    tasks: 'build'
You need to have agradlewfile in your repo. If you don't have one, you can generate it by runninggradle wrapperin your project's root directory. For information about creating a Gradle wrapper, see theGradle.
gradlew
gradle wrapper
The version of Gradle installed on the agent machine is used unless your repo'sgradle/wrapper/gradle-wrapper.propertiesfile has adistributionUrlproperty that specifies a different Gradle version to download and use during the build.
gradle/wrapper/gradle-wrapper.properties
distributionUrl
Adjust theworkingDirectoryvalue if yourgradlewfile isn't in the root of the repo.
The directory value should be relative to the root of the repo, such asIdentityServiceor$(system.defaultWorkingDirectory)/IdentityService.
workingDirectory
gradlew
IdentityService
$(system.defaultWorkingDirectory)/IdentityService
Adjust thegradleWrapperFilevalue if yourgradlewfile isn't in the root of the repo. The file path value should be relative to the root of the repo, such asIdentityService/gradlewor$(system.defaultWorkingDirectory)/IdentityService/gradlew.
gradleWrapperFile
gradlew
IdentityService/gradlew
$(system.defaultWorkingDirectory)/IdentityService/gradlew
Adjust thetasksvalue for the tasks that Gradle should execute, such asbuildorcheck. For more information about common Java Plugin tasks for Gradle, seeGradle's documentation.
build
check
Ant
With Ant build, add the following task to yourazure-pipelines.ymlfile. Change values, such as the path to yourbuild.xmlfile, to match your project configuration. For more information about these options, see theAnttask. If using the sample repo, you need to provide abuild.xmlfile in your repo.
azure-pipelines.yml
build.xml
build.xml
steps:
- task: Ant@1
  inputs:
    workingDirectory: ''
    buildFile: 'build.xml'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: 'default'
    jdkArchitectureOption: 'x64'
    publishJUnitResults: false
    testResultsFiles: '**/TEST-*.xml'
steps:
- task: Ant@1
  inputs:
    workingDirectory: ''
    buildFile: 'build.xml'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: 'default'
    jdkArchitectureOption: 'x64'
    publishJUnitResults: false
    testResultsFiles: '**/TEST-*.xml'
Script
To build with a command line or script, add one of the following snippets to yourazure-pipelines.ymlfile.
azure-pipelines.yml
Thescript:step runs an inline script using Bash on Linux and macOS and Command Prompt on Windows. For details, see theBashorCommand linetask.
script:
steps:
- script: |
    echo Starting the build
    mvn package
  displayName: 'Build with Maven'
steps:
- script: |
    echo Starting the build
    mvn package
  displayName: 'Build with Maven'
This task runs a script file that is in your repo. For details, see theShell Script,Batch script, orPowerShelltask.
steps:
- task: ShellScript@2
  inputs:
    scriptPath: 'build.sh'
steps:
- task: ShellScript@2
  inputs:
    scriptPath: 'build.sh'
Next steps
You can publish your build output to your pipeline. You can package and publish your app in a Maven package or a.war/jarfile to be deployed to a web application.
Learn more about creating a CI/CD pipeline for your deployment target:
Azure App Service
Azure Functions
Azure Kubernetes service
Feedback
Was this page helpful?
Additional resources