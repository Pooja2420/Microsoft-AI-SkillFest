Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Use an Azure-managed identity in ACR Tasks
Article
2024-09-19
6 contributors
In this article
Enable amanaged identity for Azure resourcesin anACR task, so the task can access other Azure resources, without needing to provide or manage credentials. For example, use a managed identity to enable a task step to pull or push container images to another registry.
In this article, you learn how to use the Azure CLI to enable a user-assigned or system-assigned managed identity on an ACR task. You can use the Azure Cloud Shell or a local installation of the Azure CLI. If you'd like to use it locally, version 2.0.68 or later is required. Runaz --versionto find the version. If you need to install or upgrade, seeInstall Azure CLI.
az --version
For illustration purposes, the example commands in this article useaz acr task createto create a basic image build task that enables a managed identity. For sample scenarios to access secured resources from an ACR task using a managed identity, see:
Cross-registry authentication
Access external resources with secrets stored in Azure Key Vault
Why use a managed identity?
A managed identity for Azure resources provides selected Azure services with an automatically managed identity in Microsoft Entra ID. You can configure an ACR task with a managed identity so that the task can access other secured Azure resources, without passing credentials in the task steps.
Managed identities are of two types:
User-assigned identities, which you can assign to multiple resources and persist for as long as you want. User-assigned identities are currently in preview.
User-assigned identities, which you can assign to multiple resources and persist for as long as you want. User-assigned identities are currently in preview.
Asystem-assigned identity, which is unique to a specific resource such as an ACR task and lasts for the lifetime of that resource.
Asystem-assigned identity, which is unique to a specific resource such as an ACR task and lasts for the lifetime of that resource.
You can enable either or both types of identity in an ACR task. Grant the identity access to another resource, just like any security principal. When the task runs, it uses the identity to access the resource in any task steps that require access.
Steps to use a managed identity
Follow these high-level steps to use a managed identity with an ACR task.
1. (Optional) Create a user-assigned identity
If you plan to use a user-assigned identity, use an existing identity, or create the identity using the Azure CLI or other Azure tools. For example, use theaz identity createcommand.
If you plan to use only a system-assigned identity, skip this step. You create a system-assigned identity when you create the ACR task.
2. Enable identity on an ACR task
When you create an ACR task, optionally enable a user-assigned identity, a system-assigned identity, or both. For example, pass the--assign-identityparameter when you run theaz acr task createcommand in the Azure CLI.
--assign-identity
To enable a system-assigned identity, pass--assign-identitywith no value orassign-identity [system]. The following example command creates a Linux task from a public GitHub repository which builds thehello-worldimage and enables a system-assigned managed identity:
--assign-identity
assign-identity [system]
hello-world
az acr task create \
    --image hello-world:{{.Run.ID}} \
    --name hello-world --registry MyRegistry \
    --context https://github.com/Azure-Samples/acr-build-helloworld-node.git#main \
    --file Dockerfile \
    --commit-trigger-enabled false \
    --assign-identity
az acr task create \
    --image hello-world:{{.Run.ID}} \
    --name hello-world --registry MyRegistry \
    --context https://github.com/Azure-Samples/acr-build-helloworld-node.git#main \
    --file Dockerfile \
    --commit-trigger-enabled false \
    --assign-identity
To enable a user-assigned identity, pass--assign-identitywith a value of theresource IDof the identity. The following example command creates a Linux task from a public GitHub repository which builds thehello-worldimage and enables a user-assigned managed identity:
--assign-identity
hello-world
az acr task create \
    --image hello-world:{{.Run.ID}} \
    --name hello-world --registry MyRegistry \
    --context https://github.com/Azure-Samples/acr-build-helloworld-node.git#main \
    --file Dockerfile \
    --commit-trigger-enabled false
    --assign-identity <resourceID>
az acr task create \
    --image hello-world:{{.Run.ID}} \
    --name hello-world --registry MyRegistry \
    --context https://github.com/Azure-Samples/acr-build-helloworld-node.git#main \
    --file Dockerfile \
    --commit-trigger-enabled false
    --assign-identity <resourceID>
You can get the resource ID of the identity by running theaz identity showcommand. The resource ID for the IDmyUserAssignedIdentityin resource groupmyResourceGroupis of the form:
"/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourcegroups/myResourceGroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myUserAssignedIdentity"
"/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourcegroups/myResourceGroup/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myUserAssignedIdentity"
3. Grant the identity permissions to access other Azure resources
Depending on the requirements of your task, grant the identity permissions to access other Azure resources. Examples include:
Assign the managed identity a role with pull, push and pull, or other permissions to a target container registry in Azure. For a complete list of registry roles, seeAzure Container Registry roles and permissions.
Assign the managed identity a role to read secrets in an Azure key vault.
Use theAzure CLIor other Azure tools to manage role-based access to resources. For example, run theaz role assignment createcommand to assign the identity a role to the resource.
The following example assigns a managed identity the permissions to pull from a container registry. The command specifies theprincipal IDof the task identity and theresource IDof the target registry.
az role assignment create \
  --assignee <principalID> \
  --scope <registryID> \
  --role acrpull
az role assignment create \
  --assignee <principalID> \
  --scope <registryID> \
  --role acrpull
4. (Optional) Add credentials to the task
If your task needs credentials to pull or push images to another custom registry, or to access other resources, add credentials to the task. Run theaz acr task credential addcommand to add credentials, and pass the--use-identityparameter to indicate that the identity can access the credentials.
--use-identity
For example, to add credentials for a system-assigned identity to authenticate with the Azure container registrytargetregistry, passuse-identity [system]:
use-identity [system]
az acr task credential add \
    --name helloworld \
    --registry myregistry \
    --login-server targetregistry.azurecr.io \
    --use-identity [system]
az acr task credential add \
    --name helloworld \
    --registry myregistry \
    --login-server targetregistry.azurecr.io \
    --use-identity [system]
To add credentials for a user-assigned identity to authenticate with the registrytargetregistry, passuse-identitywith a value of theclient IDof the identity. For example:
use-identity
az acr task credential add \
    --name helloworld \
    --registry myregistry \
    --login-server targetregistry.azurecr.io \
    --use-identity <clientID>
az acr task credential add \
    --name helloworld \
    --registry myregistry \
    --login-server targetregistry.azurecr.io \
    --use-identity <clientID>
You can get the client ID of the identity by running theaz identity showcommand. The client ID is a GUID of the formxxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx.
xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
5. Run the task
After configuring a task with a managed identity, run the task. For example, to test one of the tasks created in this article, manually trigger it using theaz acr task runcommand. If you configured additional, automated task triggers, the task runs when automatically triggered.
Next steps
In this article, you learned how to enable and use a user-assigned or system-assigned managed identity on an ACR task. For scenarios to access secured resources from an ACR task using a managed identity, see:
Cross-registry authentication
Access external resources with secrets stored in Azure Key Vault
Feedback
Was this page helpful?
Additional resources