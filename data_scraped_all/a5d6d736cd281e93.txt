Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Use Azure role-based access control to define access to the Kubernetes configuration file in Azure Kubernetes Service (AKS)
Article
2024-08-01
16 contributors
In this article
You can interact with Kubernetes clusters using thekubectltool. The Azure CLI provides an easy way to get the access credentials andkubeconfigconfiguration file to connect to your AKS clusters usingkubectl. You can use Azure role-based access control (Azure RBAC) to limit who can get access to thekubeconfigfile and the permissions they have.
kubectl
kubectl
This article shows you how to assign Azure roles that limit who can get the configuration information for an AKS cluster.
Before you begin
This article assumes that you have an existing AKS cluster. If you need an AKS cluster, create one usingAzure CLI,Azure PowerShell, orthe Azure portal.
This article also requires that you're running Azure CLI version 2.0.65 or later. Runaz --versionto find the version. If you need to install or upgrade, seeInstall Azure CLI.
az --version
Available permissions for cluster roles
When you interact with an AKS cluster using thekubectltool, a configuration file, calledkubeconfig, defines cluster connection information. This configuration file is typically stored in~/.kube/config. Multiple clusters can be defined in thiskubeconfigfile. You can switch between clusters using thekubectl config use-contextcommand.
kubectl
kubectl config use-context
Theaz aks get-credentialscommand lets you get the access credentials for an AKS cluster and merges these credentials into thekubeconfigfile. You can use Azure RBAC to control access to these credentials. These Azure roles let you define who can retrieve thekubeconfigfile and what permissions they have within the cluster.
az aks get-credentials
There are two Azure roles you can apply to a Microsoft Entra user or group:
Azure Kubernetes Service Cluster Admin RoleAllows access toMicrosoft.ContainerService/managedClusters/listClusterAdminCredential/actionAPI call. This API calllists the cluster admin credentials.Downloadskubeconfigfor theclusterAdminrole.
Azure Kubernetes Service Cluster Admin Role
Allows access toMicrosoft.ContainerService/managedClusters/listClusterAdminCredential/actionAPI call. This API calllists the cluster admin credentials.
Microsoft.ContainerService/managedClusters/listClusterAdminCredential/action
Downloadskubeconfigfor theclusterAdminrole.
Azure Kubernetes Service Cluster User RoleAllows access toMicrosoft.ContainerService/managedClusters/listClusterUserCredential/actionAPI call. This API calllists the cluster user credentials.DownloadskubeconfigforclusterUserrole.
Azure Kubernetes Service Cluster User Role
Allows access toMicrosoft.ContainerService/managedClusters/listClusterUserCredential/actionAPI call. This API calllists the cluster user credentials.
Microsoft.ContainerService/managedClusters/listClusterUserCredential/action
DownloadskubeconfigforclusterUserrole.
Note
On clusters that use Microsoft Entra ID, users with theclusterUserrole have an emptykubeconfigfile that prompts a login. Once logged in, users have access based on their Microsoft Entra user or group settings. Users with theclusterAdminrole have admin access.
On clusters that don't use Microsoft Entra ID, theclusterUserrole has same effect ofclusterAdminrole.
Assign role permissions to a user or group
To assign one of the available roles, you need to get the resource ID of the AKS cluster and the ID of the Microsoft Entra user account or group using the following steps:
Get the cluster resource ID using theaz aks showcommand for the cluster namedmyAKSClusterin themyResourceGroupresource group. Provide your own cluster and resource group name as needed.
az aks show
Use theaz account showandaz ad user showcommands to get your user ID.
az account show
az ad user show
Assign a role using theaz role assignment createcommand.
az role assignment create
The following example assigns theAzure Kubernetes Service Cluster Admin Roleto an individual user account:
# Get the resource ID of your AKS cluster
AKS_CLUSTER=$(az aks show --resource-group myResourceGroup --name myAKSCluster --query id -o tsv)

# Get the account credentials for the logged in user
ACCOUNT_UPN=$(az account show --query user.name -o tsv)
ACCOUNT_ID=$(az ad user show --id $ACCOUNT_UPN --query objectId -o tsv)

# Assign the 'Cluster Admin' role to the user
az role assignment create \
    --assignee $ACCOUNT_ID \
    --scope $AKS_CLUSTER \
    --role "Azure Kubernetes Service Cluster Admin Role"
# Get the resource ID of your AKS cluster
AKS_CLUSTER=$(az aks show --resource-group myResourceGroup --name myAKSCluster --query id -o tsv)

# Get the account credentials for the logged in user
ACCOUNT_UPN=$(az account show --query user.name -o tsv)
ACCOUNT_ID=$(az ad user show --id $ACCOUNT_UPN --query objectId -o tsv)

# Assign the 'Cluster Admin' role to the user
az role assignment create \
    --assignee $ACCOUNT_ID \
    --scope $AKS_CLUSTER \
    --role "Azure Kubernetes Service Cluster Admin Role"
If you want to assign permissions to a Microsoft Entra group, update the--assigneeparameter shown in the previous example with the object ID for thegrouprather than theuser.
--assignee
To get the object ID for a group, use theaz ad group showcommand. The following command gets the object ID for the Microsoft Entra group namedappdev:
az ad group show
az ad group show --group appdev --query objectId -o tsv
az ad group show --group appdev --query objectId -o tsv
Important
In some cases, such as Microsoft Entra guest users, theuser.namein the account is different than theuserPrincipalName.
$ az account show --query user.name -o tsv
user@contoso.com

$ az ad user list --query "[?contains(otherMails,'user@contoso.com')].{UPN:userPrincipalName}" -o tsv
user_contoso.com#EXT#@contoso.onmicrosoft.com
$ az account show --query user.name -o tsv
user@contoso.com

$ az ad user list --query "[?contains(otherMails,'user@contoso.com')].{UPN:userPrincipalName}" -o tsv
user_contoso.com#EXT#@contoso.onmicrosoft.com
In this case, set the value ofACCOUNT_UPNto theuserPrincipalNamefrom the Microsoft Entra user. For example, if your accountuser.nameisuser@contoso.com, this action would look like the following example:
ACCOUNT_UPN=$(az ad user list --query "[?contains(otherMails,'user@contoso.com')].{UPN:userPrincipalName}" -o tsv)
ACCOUNT_UPN=$(az ad user list --query "[?contains(otherMails,'user@contoso.com')].{UPN:userPrincipalName}" -o tsv)
Get and verify the configuration information
Once the roles are assigned, use theaz aks get-credentialscommand to get thekubeconfigdefinition for your AKS cluster. The following example gets the--admincredentials, which works correctly if the user has been granted theCluster Admin Role:
az aks get-credentials
az aks get-credentials --resource-group myResourceGroup --name myAKSCluster --admin
az aks get-credentials --resource-group myResourceGroup --name myAKSCluster --admin
You can then use thekubectl config viewcommand to verify that thecontextfor the cluster shows that the admin configuration information has been applied.
kubectl config view
$ kubectl config view
$ kubectl config view
Your output should look similar to the following example output:
apiVersion: v1
clusters:
- cluster:
    certificate-authority-data: DATA+OMITTED
    server: https://myaksclust-myresourcegroup-19da35-4839be06.hcp.eastus.azmk8s.io:443
  name: myAKSCluster
contexts:
- context:
    cluster: myAKSCluster
    user: clusterAdmin_myResourceGroup_myAKSCluster
  name: myAKSCluster-admin
current-context: myAKSCluster-admin
kind: Config
preferences: {}
users:
- name: clusterAdmin_myResourceGroup_myAKSCluster
  user:
    client-certificate-data: REDACTED
    client-key-data: REDACTED
    token: e9f2f819a4496538b02cefff94e61d35
apiVersion: v1
clusters:
- cluster:
    certificate-authority-data: DATA+OMITTED
    server: https://myaksclust-myresourcegroup-19da35-4839be06.hcp.eastus.azmk8s.io:443
  name: myAKSCluster
contexts:
- context:
    cluster: myAKSCluster
    user: clusterAdmin_myResourceGroup_myAKSCluster
  name: myAKSCluster-admin
current-context: myAKSCluster-admin
kind: Config
preferences: {}
users:
- name: clusterAdmin_myResourceGroup_myAKSCluster
  user:
    client-certificate-data: REDACTED
    client-key-data: REDACTED
    token: e9f2f819a4496538b02cefff94e61d35
Remove role permissions
To remove role assignments, use theaz role assignment deletecommand. Specify the account ID and cluster resource ID that you obtained in the previous steps. If you assigned the role to a group rather than a user, specify the appropriate group object ID rather than account object ID for the--assigneeparameter.
az role assignment delete
--assignee
az role assignment delete --assignee $ACCOUNT_ID --scope $AKS_CLUSTER
az role assignment delete --assignee $ACCOUNT_ID --scope $AKS_CLUSTER
Next steps
For enhanced security on access to AKS clusters,integrate Microsoft Entra authentication.
Azure Kubernetes Service

Additional resources