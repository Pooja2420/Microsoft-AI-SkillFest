Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Deploy Bicep files with Azure PowerShell
Article
2025-01-14
13 contributors
In this article
This article explains how to use Azure PowerShell with Bicep files to deploy your resources to Azure. If you aren't familiar with the deploying and managing your Azure solutions, seeWhat is Bicep?.
Prerequisites
You need a Bicep file to deploy, and the file must be local. You also need Azure PowerShell and to be connected to Azure:
Install Azure PowerShell cmdlets on your local computer.To deploy Bicep files, you needAzure PowerShellversion 5.6.0 or later. For more information, seeGet started with Azure PowerShell.
Install the Bicep CLI.You mustinstall the Bicep CLI manuallysince Azure PowerShell doesn't automatically install it.
UseConnect-AzAccountto connect to Azure. If you have multiple Azure subscriptions, you might also need to runSet-AzContext. For more information, seeUse multiple Azure subscriptions.
Connect-AzAccount
Set-AzContext
If you don't have PowerShell installed, you can use Azure Cloud Shell. For more information, seeDeploy Bicep files with Azure Cloud Shell.
Required permissions
To deploy a Bicep file or ARM template, you need write access on the resources you're deploying and access to all operations on the Microsoft.Resources/deployments resource type. For example, to deploy a virtual machine, you needMicrosoft.Compute/virtualMachines/writeandMicrosoft.Resources/deployments/*permissions.  The what-if operation has the same permission requirements.
Microsoft.Compute/virtualMachines/write
Microsoft.Resources/deployments/*
For a list of roles and permissions, seeAzure built-in roles.
Deployment scope
You can target your deployment to a resource group, subscription, management group, or tenant. Depending on the scope of the deployment, you use different commands, and the user deploying the Bicep file must have the required permissions to create resources for every scope.
To deploy to aresource group, useNew-AzResourceGroupDeployment:New-AzResourceGroupDeployment -ResourceGroupName <resource-group-name> -TemplateFile <path-to-bicep>
To deploy to aresource group, useNew-AzResourceGroupDeployment:
New-AzResourceGroupDeployment
New-AzResourceGroupDeployment -ResourceGroupName <resource-group-name> -TemplateFile <path-to-bicep>
New-AzResourceGroupDeployment -ResourceGroupName <resource-group-name> -TemplateFile <path-to-bicep>
To deploy to asubscription, useNew-AzSubscriptionDeployment, which is an alias of theNew-AzDeploymentcmdlet:New-AzSubscriptionDeployment -Location <location> -TemplateFile <path-to-bicep>For more information about subscription-level deployments, seeUse Bicep to deploy resources to subscription.
To deploy to asubscription, useNew-AzSubscriptionDeployment, which is an alias of theNew-AzDeploymentcmdlet:
New-AzSubscriptionDeployment
New-AzDeployment
New-AzSubscriptionDeployment -Location <location> -TemplateFile <path-to-bicep>
New-AzSubscriptionDeployment -Location <location> -TemplateFile <path-to-bicep>
For more information about subscription-level deployments, seeUse Bicep to deploy resources to subscription.
To deploy to amanagement group, useNew-AzManagementGroupDeployment.New-AzManagementGroupDeployment -ManagementGroupId <management-group-id> -Location <location> -TemplateFile <path-to-bicep>For more information about management-group-level deployments, seeUse Bicep to deploy resources to management group.
To deploy to amanagement group, useNew-AzManagementGroupDeployment.
New-AzManagementGroupDeployment
New-AzManagementGroupDeployment -ManagementGroupId <management-group-id> -Location <location> -TemplateFile <path-to-bicep>
New-AzManagementGroupDeployment -ManagementGroupId <management-group-id> -Location <location> -TemplateFile <path-to-bicep>
For more information about management-group-level deployments, seeUse Bicep to deploy resources to management group.
To deploy to atenant, useNew-AzTenantDeployment.New-AzTenantDeployment -Location <location> -TemplateFile <path-to-bicep>For more information about tenant-level deployments, seeUse Bicep to deploy resources to tenant.
To deploy to atenant, useNew-AzTenantDeployment.
New-AzTenantDeployment
New-AzTenantDeployment -Location <location> -TemplateFile <path-to-bicep>
New-AzTenantDeployment -Location <location> -TemplateFile <path-to-bicep>
For more information about tenant-level deployments, seeUse Bicep to deploy resources to tenant.
Deploy local Bicep file
This section describes how to deploy a local Bicep file. You can deploy a Bicep file from your local machine or an external one.
If you're deploying to a resource group that doesn't exist, create the resource group. The name of the resource group can only include alphanumeric characters, periods, underscores, hyphens, and parenthesis. It can be up to 90 characters and can't end in a period.
New-AzResourceGroup -Name ExampleGroup -Location "Central US"
New-AzResourceGroup -Name ExampleGroup -Location "Central US"
To deploy a local Bicep file, use the-TemplateFileswitch in the deployment command:
-TemplateFile
New-AzResourceGroupDeployment `
  -Name ExampleDeployment `
  -ResourceGroupName ExampleGroup `
  -TemplateFile <path-to-bicep>
New-AzResourceGroupDeployment `
  -Name ExampleDeployment `
  -ResourceGroupName ExampleGroup `
  -TemplateFile <path-to-bicep>
The deployment can take several minutes to complete.
Deploy remote Bicep file
Azure PowerShell doesn't currently support deploying remote Bicep files. You can use theBicep CLItobuildthe Bicep file to a JSON template and then load the JSON file to a remote location. For more information, seeDeploy remote template.
Parameters
To pass parameter values, you can use either inline parameters or a parameters file. The parameters file can be either aBicep parameters fileor aJSON parameters file.
Inline parameters
To pass inline parameters, provide the names of the parameter with theNew-AzResourceGroupDeploymentcommand. For example, to pass a string and array to a Bicep file, use:
New-AzResourceGroupDeployment
$arrayParam = "value1", "value2"
New-AzResourceGroupDeployment -ResourceGroupName testgroup `
  -TemplateFile <path-to-bicep> `
  -exampleString "inline string" `
  -exampleArray $arrayParam
$arrayParam = "value1", "value2"
New-AzResourceGroupDeployment -ResourceGroupName testgroup `
  -TemplateFile <path-to-bicep> `
  -exampleString "inline string" `
  -exampleArray $arrayParam
You can use theTemplateParameterObjectparameter to pass through a hashtable that contains the parameters for the template:
TemplateParameterObject
$params = @{
  exampleString = "inline string"
  exampleArray = "value1", "value2"
}

New-AzResourceGroupDeployment -ResourceGroupName testgroup `
  -TemplateFile <path-to-bicep> `
  -TemplateParameterObject $params
$params = @{
  exampleString = "inline string"
  exampleArray = "value1", "value2"
}

New-AzResourceGroupDeployment -ResourceGroupName testgroup `
  -TemplateFile <path-to-bicep> `
  -TemplateParameterObject $params
You can also get the contents of file and provide that content as an inline parameter:
$arrayParam = "value1", "value2"
New-AzResourceGroupDeployment -ResourceGroupName testgroup `
  -TemplateFile <path-to-bicep> `
  -exampleString $(Get-Content -Path c:\MyTemplates\stringcontent.txt -Raw) `
  -exampleArray $arrayParam
$arrayParam = "value1", "value2"
New-AzResourceGroupDeployment -ResourceGroupName testgroup `
  -TemplateFile <path-to-bicep> `
  -exampleString $(Get-Content -Path c:\MyTemplates\stringcontent.txt -Raw) `
  -exampleArray $arrayParam
Getting a parameter value from a file is helpful when you need to provide configuration values. For example, you can providecloud-init values for a Linux virtual machine.
If you need to pass in an array of objects, create hash tables in Azure PowerShell and add them to an array. Pass that array as a parameter during deployment:
$hash1 = @{ Name = "firstSubnet"; AddressPrefix = "10.0.0.0/24"}
$hash2 = @{ Name = "secondSubnet"; AddressPrefix = "10.0.1.0/24"}
$subnetArray = $hash1, $hash2
New-AzResourceGroupDeployment -ResourceGroupName testgroup `
  -TemplateFile <path-to-bicep> `
  -exampleArray $subnetArray
$hash1 = @{ Name = "firstSubnet"; AddressPrefix = "10.0.0.0/24"}
$hash2 = @{ Name = "secondSubnet"; AddressPrefix = "10.0.1.0/24"}
$subnetArray = $hash1, $hash2
New-AzResourceGroupDeployment -ResourceGroupName testgroup `
  -TemplateFile <path-to-bicep> `
  -exampleArray $subnetArray
Bicep parameters files
Rather than passing parameters as inline values in your script, you might find it easier to use aBicep parameters fileor aJSON parameters filethat contains the parameter values. The Bicep parameters file must be a local file, while the JSON template file can be located somewhere online. For more information about parameters files, seeCreate parameters files for Bicep deployment.
You can use a Bicep parameters file to deploy a Bicep file withAzure PowerShellversion 10.4.0 or later andBicep CLIversion 0.22.X or later. With theusingstatement within the Bicep parameters file, there's no need to provide the-TemplateFileswitch when specifying a Bicep parameters file for the-TemplateParameterFileswitch.
using
-TemplateFile
-TemplateParameterFile
The following example shows a parameters file namedstorage.bicepparam. The file is in the same directory where the command runs:
New-AzResourceGroupDeployment `
  -Name ExampleDeployment `
  -ResourceGroupName ExampleResourceGroup `
  -TemplateParameterFile storage.bicepparam
New-AzResourceGroupDeployment `
  -Name ExampleDeployment `
  -ResourceGroupName ExampleResourceGroup `
  -TemplateParameterFile storage.bicepparam
JSON parameters files
The JSON parameters file can local or an external file with an accessible URI.
To pass a local parameters file, use theTemplateParameterFileswitch with a JSON parameters file:
TemplateParameterFile
New-AzResourceGroupDeployment `
  -Name ExampleDeployment `
  -ResourceGroupName ExampleResourceGroup `
  -TemplateFile c:\BicepFiles\storage.bicep `
  -TemplateParameterFile c:\BicepFiles\storage.parameters.json
New-AzResourceGroupDeployment `
  -Name ExampleDeployment `
  -ResourceGroupName ExampleResourceGroup `
  -TemplateFile c:\BicepFiles\storage.bicep `
  -TemplateParameterFile c:\BicepFiles\storage.parameters.json
To pass an external parameters file, use theTemplateParameterUriparameter:
TemplateParameterUri
New-AzResourceGroupDeployment `
  -Name ExampleDeployment `
  -ResourceGroupName ExampleResourceGroup `
  -TemplateFile c:\BicepFiles\storage.bicep `
  -TemplateParameterUri https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/quickstarts/microsoft.storage/storage-account-create/azuredeploy.parameters.json
New-AzResourceGroupDeployment `
  -Name ExampleDeployment `
  -ResourceGroupName ExampleResourceGroup `
  -TemplateFile c:\BicepFiles\storage.bicep `
  -TemplateParameterUri https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/quickstarts/microsoft.storage/storage-account-create/azuredeploy.parameters.json
Since theTemplateParameterUriparameter only supports JSON parameters files, it doesn't support.bicepparamfiles.
TemplateParameterUri
.bicepparam
You can use inline parameters and a location parameters file in the same deployment operation. For more information, seeParameter precedence.
Preview changes
Before deploying your Bicep file, you can preview the changes the Bicep file will make to your environment. Use thewhat-if operationto verify that the Bicep file makes the changes that you expect. What-if also validates the Bicep file for errors.
Deploy template specs
Azure PowerShell doesn't currently provide Bicep files to help create template specs. However, you can create a Bicep file with theMicrosoft.Resources/templateSpecsresource to deploy a template spec. TheCreate template spec sampleshows how to create a template spec in a Bicep file. You can also build your Bicep file to JSON by using the Bicep CLI and then a JSON template to create a template spec.
Deployment name
When deploying a Bicep file, you can give the deployment a name. This name can help you retrieve the deployment from the deployment history. If you don't provide a name for the deployment, its name becomes the name of the Bicep file. For example, if you deploy a Bicep file namedmain.bicepand don't specify a deployment name, the deployment is namedmain.
main
Every time you run a deployment, an entry is added to the resource group's deployment history with the deployment name. If you run another deployment and give it the same name, the earlier entry is replaced with the current deployment. If you want to maintain unique entries in the deployment history, give each deployment a unique name.
To create a unique name, you can assign a random number:
$suffix = Get-Random -Maximum 1000
$deploymentName = "ExampleDeployment" + $suffix
$suffix = Get-Random -Maximum 1000
$deploymentName = "ExampleDeployment" + $suffix
Or, add a date value:
$today=Get-Date -Format "MM-dd-yyyy"
$deploymentName="ExampleDeployment"+"$today"
$today=Get-Date -Format "MM-dd-yyyy"
$deploymentName="ExampleDeployment"+"$today"
If you run concurrent deployments to the same resource group with the same deployment name, only the last deployment is completed. Any deployments with the same name that haven't finished are replaced by the last deployment. For example, if you run a deployment namednewStoragethat deploys a storage account namedstorage1and run another deployment namednewStoragethat deploys a storage account namedstorage2at the same time, you deploy only one storage account. The resulting storage account is namedstorage2.
newStorage
storage1
newStorage
storage2
storage2
However, if you run a deployment namednewStoragethat deploys a storage account namedstorage1and immediately run another deployment namednewStoragethat deploys a storage account namedstorage2after the first deployment finishes, then you have two storage accounts. One is namedstorage1, and the other is namedstorage2. But, you only have one entry in the deployment history.
newStorage
storage1
newStorage
storage2
storage1
storage2
When you specify a unique name for each deployment, you can run them concurrently without conflict. If you run a deployment namednewStorage1that deploys a storage account namedstorage1and run another deployment namednewStorage2that deploys a storage account namedstorage2at the same time, then you have two storage accounts and two entries in the deployment history.
newStorage1
storage1
newStorage2
storage2
To avoid conflicts with concurrent deployments and to ensure unique entries in the deployment history, give each deployment a unique name.
Next steps
To learn how to define parameters in your file, seeUnderstand the structure and syntax of Bicep files.
Feedback
Was this page helpful?
Additional resources