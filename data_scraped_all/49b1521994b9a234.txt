Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Receive and respond to key vault notifications with Azure Event Grid
Article
2025-04-16
3 contributors
In this article
Azure Key Vault integration with Azure Event Grid enables user notification when the status of a secret stored in a key vault has changed. For an overview of this feature, seeMonitoring Key Vault with Event Grid.
This guide describes how to receive Key Vault notifications through Event Grid, and how to respond to status changes through Azure Automation.
Prerequisites
An Azure subscription. If you don't have an Azure subscription, create afree accountbefore you begin.
A key vault in your Azure Subscription. You can quickly create a new key vault by following the steps inSet and retrieve a secret from Azure Key Vault using Azure CLI.
Concepts
Event Grid is an eventing service for the cloud. By following the steps in this guide, you'll subscribe to events for Key Vault and route events to Automation. When one of the secrets in the key vault is about to expire (defined as 30 days before expiration date), Event Grid is notified of the status change and makes an HTTP POST to the endpoint. A web hook then triggers an Automation execution of a PowerShell script.

Create an Automation account
Create an Automation account through theAzure portal:
Go to portal.azure.com and log in to your subscription.
Go to portal.azure.com and log in to your subscription.
In the search box, enterAutomation Accounts.
In the search box, enterAutomation Accounts.
Under theServicessection of the drop-down list on the search bar, selectAutomation Accounts.
Under theServicessection of the drop-down list on the search bar, selectAutomation Accounts.
SelectAdd.
SelectAdd.

Enter the required information in theAdd Automation Accountpane and then selectCreate.
Enter the required information in theAdd Automation Accountpane and then selectCreate.
Create a runbook
After your Automation account is ready, create a runbook.

Select the Automation account you created.
Select the Automation account you created.
SelectRunbooksunderProcess Automation.
SelectRunbooksunderProcess Automation.
SelectCreate a runbook.
SelectCreate a runbook.
Name your runbook and selectPowerShellas the runbook type.
Name your runbook and selectPowerShellas the runbook type.
Select the runbook you created and then select theEditbutton.
Select the runbook you created and then select theEditbutton.
Enter the following code (for testing purposes) and select thePublishbutton. This action returns the result of the POST request received.
Enter the following code (for testing purposes) and select thePublishbutton. This action returns the result of the POST request received.
param
(
[Parameter (Mandatory = $false)]
[object] $WebhookData
)

#If runbook was called from Webhook, WebhookData will not be null.
if ($WebhookData) {

#rotate secret:
#generate new secret version in key vault
#update db/service with generated secret

#Write-Output "WebhookData <$WebhookData>"
Write-Output $WebhookData.RequestBody
}
else
{
# Error
write-Error "No input data found." 
}
param
(
[Parameter (Mandatory = $false)]
[object] $WebhookData
)

#If runbook was called from Webhook, WebhookData will not be null.
if ($WebhookData) {

#rotate secret:
#generate new secret version in key vault
#update db/service with generated secret

#Write-Output "WebhookData <$WebhookData>"
Write-Output $WebhookData.RequestBody
}
else
{
# Error
write-Error "No input data found." 
}

Create a webhook
Create a webhook to trigger your newly created runbook.
SelectWebhooksfrom theResourcessection of the runbook you published.
SelectWebhooksfrom theResourcessection of the runbook you published.
SelectAdd Webhook.
SelectAdd Webhook.

SelectCreate new Webhook.
SelectCreate new Webhook.
Name the webhook, set an expiration date, and copy the URL.ImportantYou can't view the URL after you create it. Make sure you save a copy in a secure location where you can access it for the remainder of this guide.
Name the webhook, set an expiration date, and copy the URL.
Important
You can't view the URL after you create it. Make sure you save a copy in a secure location where you can access it for the remainder of this guide.
SelectParameters and run settingsand then selectOK. Don't enter any parameters. TheCreatebutton will be enabled.
SelectParameters and run settingsand then selectOK. Don't enter any parameters. TheCreatebutton will be enabled.
SelectOKand then selectCreate.
SelectOKand then selectCreate.

Create an Event Grid subscription
Create an Event Grid subscription through theAzure portal.
Go to your key vault and select theEventstab.
Go to your key vault and select theEventstab.

Select theEvent Subscriptionbutton.
Select theEvent Subscriptionbutton.
Create a descriptive name for the subscription.
Create a descriptive name for the subscription.
ChooseEvent Grid Schema.
ChooseEvent Grid Schema.
Topic Resourceshould be the key vault you want to monitor for status changes.
Topic Resourceshould be the key vault you want to monitor for status changes.
ForFilter to Event Types, leave all options selected (9 selected).
ForFilter to Event Types, leave all options selected (9 selected).
ForEndpoint Type, selectWebhook.
ForEndpoint Type, selectWebhook.
ChooseSelect an endpoint. In the new context pane, paste the webhook URL from theCreate a webhookstep into theSubscriber Endpointfield.
ChooseSelect an endpoint. In the new context pane, paste the webhook URL from theCreate a webhookstep into theSubscriber Endpointfield.
SelectConfirm Selectionon the context pane.
SelectConfirm Selectionon the context pane.
SelectCreate.
SelectCreate.

Test and verify
Verify that your Event Grid subscription is properly configured. This test assumes you have subscribed to the "Secret New Version Created" notification in theCreate an Event Grid subscription, and that you have the necessary permissions to create a new version of a secret in a key vault.


Go to your key vault on the Azure portal.
Go to your key vault on the Azure portal.
Create a new secret. For testing purposes, set the expiration to date to the next day.
Create a new secret. For testing purposes, set the expiration to date to the next day.
On theEventstab in your key vault, select the Event Grid subscription you created.
On theEventstab in your key vault, select the Event Grid subscription you created.
UnderMetrics, check whether an event was captured. Two events are expected: SecretNewVersion and SecretNearExpiry. These events validate that Event Grid successfully captured the status change of the secret in your key vault.
UnderMetrics, check whether an event was captured. Two events are expected: SecretNewVersion and SecretNearExpiry. These events validate that Event Grid successfully captured the status change of the secret in your key vault.

Go to your Automation account.
Go to your Automation account.
Select theRunbookstab, and then select the runbook you created.
Select theRunbookstab, and then select the runbook you created.
Select theWebhookstab, and confirm that the "last triggered" time stamp is within 60 seconds of when you created the new secret. This result confirms that Event Grid made a POST to the webhook with the event details of the status change in your key vault and that the webhook was triggered.
Select theWebhookstab, and confirm that the "last triggered" time stamp is within 60 seconds of when you created the new secret. This result confirms that Event Grid made a POST to the webhook with the event details of the status change in your key vault and that the webhook was triggered.

Return to your runbook and select theOverviewtab.
Return to your runbook and select theOverviewtab.
Look at theRecent Jobslist. You should see that a job was created and that the status is complete. This confirms that the webhook triggered the runbook to start executing its script.
Look at theRecent Jobslist. You should see that a job was created and that the status is complete. This confirms that the webhook triggered the runbook to start executing its script.

Select the recent job and look at the POST request that was sent from Event Grid to the webhook. Examine the JSON and make sure that the parameters for your key vault and event type are correct. If the "event type" parameter in the JSON object matches the event that occurred in the key vault (in this example, Microsoft.KeyVault.SecretNearExpiry), the test was successful.
Select the recent job and look at the POST request that was sent from Event Grid to the webhook. Examine the JSON and make sure that the parameters for your key vault and event type are correct. If the "event type" parameter in the JSON object matches the event that occurred in the key vault (in this example, Microsoft.KeyVault.SecretNearExpiry), the test was successful.
Troubleshooting
You can't create an event subscription
Reregister Event Grid and the key vault provider in your Azure subscription resource providers. SeeAzure resource providers and types.
Next steps
Congratulations! If you've correctly followed all these steps, you're now ready to programmatically respond to status changes of secrets stored in your key vault.
If you've been using a polling-based system to search for status changes of secrets in your key vaults, you can now start using this notification feature. You can also replace the test script in your runbook with code to programmatically renew your secrets when they're about to expire.
Learn more:
Overview:Monitoring Key Vault with Azure Event Grid
How to:Receive email when a key vault secret changes
Azure Event Grid event schema for Azure Key Vault
Azure Key Vault overview
Azure Event Grid overview
Azure Automation overview
Feedback
Was this page helpful?
Additional resources