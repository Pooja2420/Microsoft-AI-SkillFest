Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Create and use a volume with Azure Disks in Azure Kubernetes Service (AKS)
Article
2024-12-11
16 contributors
In this article
A persistent volume represents a piece of storage provisioned for use with Kubernetes pods. You can use a persistent volume with one or many pods, and you can provision it dynamically or statically. This article shows you how to dynamically create persistent volumes with Azure Disks in an Azure Kubernetes Service (AKS) cluster.
Note
An Azure disk can only be mounted withAccess modetypeReadWriteOnce, which makes it available to one node in AKS. This access mode still allows multiple pods to access the volume when the pods run on the same node. For more information, seeKubernetes PersistentVolume access modes.
This article shows you how to:
Work with a dynamic persistent volume (PV) by installing the Container Storage Interface (CSI) driver and dynamically creating one or more Azure managed disks to attach to a pod.
Work with a static PV by creating one or more Azure managed disks or use an existing one and attach it to a pod.
For more information on Kubernetes volumes, seeStorage options for applications in AKS.
Before you begin
Make sure you have Azure CLI version 2.0.59 or later installed and configured. Runaz --versionto find the version. If you need to install or upgrade, seeInstall Azure CLI.
Make sure you have Azure CLI version 2.0.59 or later installed and configured. Runaz --versionto find the version. If you need to install or upgrade, seeInstall Azure CLI.
az --version
The Azure Disk CSI driver has a per-node volume limit. The volume count changes based on the size of the node/node pool. Run thekubectl getcommand to determine the number of volumes that can be allocated per node:kubectl get CSINode <nodename> -o yamlIf the per-node volume limit is an issue for your workload, consider usingAzure Container Storagefor persistent volumes instead of CSI drivers.
The Azure Disk CSI driver has a per-node volume limit. The volume count changes based on the size of the node/node pool. Run thekubectl getcommand to determine the number of volumes that can be allocated per node:
kubectl get CSINode <nodename> -o yaml
kubectl get CSINode <nodename> -o yaml
If the per-node volume limit is an issue for your workload, consider usingAzure Container Storagefor persistent volumes instead of CSI drivers.
Dynamically provision a volume
This section provides guidance for cluster administrators who want to provision one or more persistent volumes that include details of Azure Disk storage for use by a workload. A persistent volume claim (PVC) uses the storage class object to dynamically provision an Azure Disk storage container.
Storage class parameters for dynamic persistent volumes
The following table includes parameters you can use to define a custom storage class for your PersistentVolumeClaim.
storageAccountType
Standard_LRS
Premium_LRS
StandardSSD_LRS
PremiumV2_LRS
UltraSSD_LRS
Premium_ZRS
StandardSSD_ZRS
StandardSSD_LRS
ext4
ext3
ext2
xfs
btrfs
ntfs
ext4
ntfs
None
None
ReadOnly
ReadWrite
ReadOnly
500
100
512
4096
4096
key1=val1,key2=val2
/subscriptions/{subs-id}/resourceGroups/{rg-name}/providers/Microsoft.Compute/diskEncryptionSets/{diskEncryptionSet-name}
EncryptionAtRestWithCustomerKey
EncryptionAtRestWithPlatformAndCustomerKeys
true
false
AllowAll
DenyAll
AllowPrivate
AllowAll
true
false
false
driverName/driverVersion compiler/version (OS-ARCH)
resourceGroup
[0..(maxShares - 1)]
accessMode
ReadWriteMany
0
maxShares - 1
Built-in storage classes
Storage classes define how a unit of storage is dynamically created with a persistent volume. For more information on Kubernetes storage classes, seeKubernetes storage classes.
Each AKS cluster includes four precreated storage classes, two of them configured to work with Azure Disks:
Thedefaultstorage class provisions a standard SSD Azure Disk.Standard SSDs backs Standard storage and delivers cost-effective storage while still delivering reliable performance.
Standard SSDs backs Standard storage and delivers cost-effective storage while still delivering reliable performance.
Themanaged-csi-premiumstorage class provisions a premium Azure Disk.SSD-based high-performance, low-latency disks back Premium disks. They're ideal for VMs running production workloads. When you use the Azure Disk CSI driver on AKS, you can also use themanaged-csistorage class, which is backed by Standard SSD locally redundant storage (LRS).
SSD-based high-performance, low-latency disks back Premium disks. They're ideal for VMs running production workloads. When you use the Azure Disk CSI driver on AKS, you can also use themanaged-csistorage class, which is backed by Standard SSD locally redundant storage (LRS).
managed-csi
Effective starting with Kubernetes version 1.29, when you deploy Azure Kubernetes Service (AKS) clusters across multiple availability zones, AKS now utilizes zone-redundant storage (ZRS) to create managed disks within built-in storage classes.ZRS ensures synchronous replication of your Azure managed disks across multiple Azure availability zones in your chosen region. This redundancy strategy enhances the resilience of your applications and safeguards your data against datacenter failures.However, it's important to note that zone-redundant storage (ZRS) comes at a higher cost compared to locally redundant storage (LRS). If cost optimization is a priority, you can create a new storage class with the LRS SKU name parameter and use it in your persistent volume claim.
ZRS ensures synchronous replication of your Azure managed disks across multiple Azure availability zones in your chosen region. This redundancy strategy enhances the resilience of your applications and safeguards your data against datacenter failures.
However, it's important to note that zone-redundant storage (ZRS) comes at a higher cost compared to locally redundant storage (LRS). If cost optimization is a priority, you can create a new storage class with the LRS SKU name parameter and use it in your persistent volume claim.
Reducing the size of a PVC isn't supported due to the risk of data loss. You can edit an existing storage class using thekubectl edit sccommand, or you can create your own custom storage class. For example, if you want to use a disk of size 4 TiB, you must create a storage class that definescachingmode: Nonebecausedisk caching isn't supported for disks 4 TiB and larger. For more information about storage classes and creating your own storage class, seeStorage options for applications in AKS.
kubectl edit sc
cachingmode: None
You can see the precreated storage classes using thekubectl get sccommand. The following example shows the precreated storage classes available within an AKS cluster:
kubectl get sc
kubectl get sc
kubectl get sc
The output of the command resembles the following example:
NAME                PROVISIONER                AGE
default (default)   disk.csi.azure.com         1h
managed-csi         disk.csi.azure.com         1h
NAME                PROVISIONER                AGE
default (default)   disk.csi.azure.com         1h
managed-csi         disk.csi.azure.com         1h
Note
Persistent volume claims are specified in GiB but Azure managed disks are billed by SKU for a specific size. These SKUs range from 32GiB for S4 or P4 disks to 32TiB for S80 or P80 disks (in preview). The throughput and IOPS performance of a Premium managed disk depends on the both the SKU and the instance size of the nodes in the AKS cluster. For more information, seePricing and performance of managed disks.
Create a persistent volume claim
A persistent volume claim automatically provisions storage based on a storage class. In this case, a PVC can use one of the precreated storage classes to create a standard or premium Azure managed disk.
Create a file namedazure-pvc.yamland copy in the following manifest. The claim requests a disk namedazure-managed-diskthat's5 GBin size withReadWriteOnceaccess. Themanaged-csistorage class is specified as the storage class.apiVersion: v1
kind: PersistentVolumeClaim
metadata:
    name: azure-managed-disk
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: managed-csi
  resources:
    requests:
      storage: 5Gi
Create a file namedazure-pvc.yamland copy in the following manifest. The claim requests a disk namedazure-managed-diskthat's5 GBin size withReadWriteOnceaccess. Themanaged-csistorage class is specified as the storage class.
azure-pvc.yaml
azure-managed-disk
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
    name: azure-managed-disk
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: managed-csi
  resources:
    requests:
      storage: 5Gi
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
    name: azure-managed-disk
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: managed-csi
  resources:
    requests:
      storage: 5Gi
Tip
To create a disk that uses premium storage, usestorageClassName: managed-csi-premiumrather thanmanaged-csi.
storageClassName: managed-csi-premium
Create the persistent volume claim using thekubectl applycommand and specify yourazure-pvc.yamlfile.kubectl apply -f azure-pvc.yamlThe output of the command resembles the following example:persistentvolumeclaim/azure-managed-disk created
Create the persistent volume claim using thekubectl applycommand and specify yourazure-pvc.yamlfile.
kubectl apply
kubectl apply -f azure-pvc.yaml
kubectl apply -f azure-pvc.yaml
The output of the command resembles the following example:
persistentvolumeclaim/azure-managed-disk created
persistentvolumeclaim/azure-managed-disk created
Use the persistent volume
After you create the persistent volume claim, you must verify it has a status ofPending. ThePendingstatus indicates it's ready to be used by a pod.
Pending
Pending
Verify the status of the PVC using thekubectl describe pvccommand.kubectl describe pvc azure-managed-diskThe output of the command resembles the following condensed example:Name:            azure-managed-disk
Namespace:       default
StorageClass:    managed-csi
Status:          Pending
[...]
Verify the status of the PVC using thekubectl describe pvccommand.
kubectl describe pvc
kubectl describe pvc azure-managed-disk
kubectl describe pvc azure-managed-disk
The output of the command resembles the following condensed example:
Name:            azure-managed-disk
Namespace:       default
StorageClass:    managed-csi
Status:          Pending
[...]
Name:            azure-managed-disk
Namespace:       default
StorageClass:    managed-csi
Status:          Pending
[...]
Create a file namedazure-pvc-disk.yamland copy in the following manifest. This manifest creates a basic NGINX pod that uses the persistent volume claim namedazure-managed-diskto mount the Azure Disk at the path/mnt/azure. For Windows Server containers, specify amountPathusing the Windows path convention, such as'D:'.kind: Pod
apiVersion: v1
metadata:
  name: mypod
spec:
  containers:
    - name: mypod
      image: mcr.microsoft.com/oss/nginx/nginx:1.15.5-alpine
      resources:
        requests:
          cpu: 100m
          memory: 128Mi
        limits:
          cpu: 250m
          memory: 256Mi
      volumeMounts:
        - mountPath: "/mnt/azure"
          name: volume
          readOnly: false
  volumes:
    - name: volume
      persistentVolumeClaim:
        claimName: azure-managed-disk
Create a file namedazure-pvc-disk.yamland copy in the following manifest. This manifest creates a basic NGINX pod that uses the persistent volume claim namedazure-managed-diskto mount the Azure Disk at the path/mnt/azure. For Windows Server containers, specify amountPathusing the Windows path convention, such as'D:'.
azure-pvc-disk.yaml
/mnt/azure
kind: Pod
apiVersion: v1
metadata:
  name: mypod
spec:
  containers:
    - name: mypod
      image: mcr.microsoft.com/oss/nginx/nginx:1.15.5-alpine
      resources:
        requests:
          cpu: 100m
          memory: 128Mi
        limits:
          cpu: 250m
          memory: 256Mi
      volumeMounts:
        - mountPath: "/mnt/azure"
          name: volume
          readOnly: false
  volumes:
    - name: volume
      persistentVolumeClaim:
        claimName: azure-managed-disk
kind: Pod
apiVersion: v1
metadata:
  name: mypod
spec:
  containers:
    - name: mypod
      image: mcr.microsoft.com/oss/nginx/nginx:1.15.5-alpine
      resources:
        requests:
          cpu: 100m
          memory: 128Mi
        limits:
          cpu: 250m
          memory: 256Mi
      volumeMounts:
        - mountPath: "/mnt/azure"
          name: volume
          readOnly: false
  volumes:
    - name: volume
      persistentVolumeClaim:
        claimName: azure-managed-disk
Create the pod using thekubectl applycommand.kubectl apply -f azure-pvc-disk.yamlThe output of the command resembles the following example:pod/mypod created
Create the pod using thekubectl applycommand.
kubectl apply
kubectl apply -f azure-pvc-disk.yaml
kubectl apply -f azure-pvc-disk.yaml
The output of the command resembles the following example:
pod/mypod created
pod/mypod created
You now have a running pod with your Azure Disk mounted in the/mnt/azuredirectory. Check the pod configuration using thekubectl describecommand.kubectl describe pod mypodThe output of the command resembles the following example:[...]
Volumes:
  volume:
    Type:       PersistentVolumeClaim (a reference to a PersistentVolumeClaim in the same namespace)
    ClaimName:  azure-managed-disk
    ReadOnly:   false
   default-token-smm2n:
    Type:        Secret (a volume populated by a Secret)
    SecretName:  default-token-smm2n
    Optional:    false
[...]
 Events:
  Type    Reason                 Age   From                               Message
  ----    ------                 ----  ----                               -------
  Normal  Scheduled              2m    default-scheduler                  Successfully assigned mypod to aks-nodepool1-79590246-0
  Normal  SuccessfulMountVolume  2m    kubelet, aks-nodepool1-79590246-0  MountVolume.SetUp succeeded for volume "default-token-smm2n"
  Normal  SuccessfulMountVolume  1m    kubelet, aks-nodepool1-79590246-0  MountVolume.SetUp succeeded for volume "pvc-faf0f176-8b8d-11e8-923b-deb28c58d242"
[...]
You now have a running pod with your Azure Disk mounted in the/mnt/azuredirectory. Check the pod configuration using thekubectl describecommand.
/mnt/azure
kubectl describe
kubectl describe pod mypod
kubectl describe pod mypod
The output of the command resembles the following example:
[...]
Volumes:
  volume:
    Type:       PersistentVolumeClaim (a reference to a PersistentVolumeClaim in the same namespace)
    ClaimName:  azure-managed-disk
    ReadOnly:   false
   default-token-smm2n:
    Type:        Secret (a volume populated by a Secret)
    SecretName:  default-token-smm2n
    Optional:    false
[...]
 Events:
  Type    Reason                 Age   From                               Message
  ----    ------                 ----  ----                               -------
  Normal  Scheduled              2m    default-scheduler                  Successfully assigned mypod to aks-nodepool1-79590246-0
  Normal  SuccessfulMountVolume  2m    kubelet, aks-nodepool1-79590246-0  MountVolume.SetUp succeeded for volume "default-token-smm2n"
  Normal  SuccessfulMountVolume  1m    kubelet, aks-nodepool1-79590246-0  MountVolume.SetUp succeeded for volume "pvc-faf0f176-8b8d-11e8-923b-deb28c58d242"
[...]
[...]
Volumes:
  volume:
    Type:       PersistentVolumeClaim (a reference to a PersistentVolumeClaim in the same namespace)
    ClaimName:  azure-managed-disk
    ReadOnly:   false
   default-token-smm2n:
    Type:        Secret (a volume populated by a Secret)
    SecretName:  default-token-smm2n
    Optional:    false
[...]
 Events:
  Type    Reason                 Age   From                               Message
  ----    ------                 ----  ----                               -------
  Normal  Scheduled              2m    default-scheduler                  Successfully assigned mypod to aks-nodepool1-79590246-0
  Normal  SuccessfulMountVolume  2m    kubelet, aks-nodepool1-79590246-0  MountVolume.SetUp succeeded for volume "default-token-smm2n"
  Normal  SuccessfulMountVolume  1m    kubelet, aks-nodepool1-79590246-0  MountVolume.SetUp succeeded for volume "pvc-faf0f176-8b8d-11e8-923b-deb28c58d242"
[...]
Use Azure ultra disks
To use Azure ultra disk, seeUse ultra disks on Azure Kubernetes Service (AKS).
Using Azure tags
For more information on using Azure tags, seeUse Azure tags in Azure Kubernetes Service (AKS).
Statically provision a volume
This section provides guidance for cluster administrators who want to create one or more persistent volumes that include details of Azure Disks for use by a workload.
Static provisioning parameters for a persistent volume
The following table includes parameters you can use to define a persistent volume.
/subscriptions/{sub-id}/resourcegroups/{group-name}/providers/microsoft.compute/disks/{disk-id}
ext4
ext3
ext2
xfs
btrfs
ntfs
ext4
ntfs
1
2
3
-part1
None
ReadOnly
ReadWrite
ReadOnly
Create an Azure disk
When you create an Azure disk for use with AKS, you can create the disk resource in thenoderesource group. This approach allows the AKS cluster to access and manage the disk resource. If you instead create the disk in a separate resource group, you must grant the Azure Kubernetes Service (AKS) managed identity for your cluster theContributorrole to the disk's resource group.
Contributor
Identify the resource group name using theaz aks showcommand and add the--query nodeResourceGroupparameter.az aks show --resource-group myResourceGroup --name myAKSCluster --query nodeResourceGroup -o tsvThe output of the command resembles the following example:MC_myResourceGroup_myAKSCluster_eastus
Identify the resource group name using theaz aks showcommand and add the--query nodeResourceGroupparameter.
az aks show
--query nodeResourceGroup
az aks show --resource-group myResourceGroup --name myAKSCluster --query nodeResourceGroup -o tsv
az aks show --resource-group myResourceGroup --name myAKSCluster --query nodeResourceGroup -o tsv
The output of the command resembles the following example:
MC_myResourceGroup_myAKSCluster_eastus
MC_myResourceGroup_myAKSCluster_eastus
Create a disk using theaz disk createcommand. Specify the node resource group name and a name for the disk resource, such asmyAKSDisk. The following example creates a20GiB disk, and outputs the ID of the disk after it's created. If you need to create a disk for use with Windows Server containers, add the--os-type windowsparameter to correctly format the disk.az disk create \
  --resource-group MC_myResourceGroup_myAKSCluster_eastus \
  --name myAKSDisk \
  --size-gb 20 \
  --query id --output tsvNoteAzure Disks are billed by SKU for a specific size. These SKUs range from 32GiB for S4 or P4 disks to 32TiB for S80 or P80 disks (in preview). The throughput and IOPS performance of a Premium managed disk depends on both the SKU and the instance size of the nodes in the AKS cluster. SeePricing and Performance of Managed Disks.The disk resource ID is displayed once the command has successfully completed, as shown in the following example output. You use the disk ID to mount the disk in the next section./subscriptions/<subscriptionID>/resourceGroups/MC_myAKSCluster_myAKSCluster_eastus/providers/Microsoft.Compute/disks/myAKSDisk
Create a disk using theaz disk createcommand. Specify the node resource group name and a name for the disk resource, such asmyAKSDisk. The following example creates a20GiB disk, and outputs the ID of the disk after it's created. If you need to create a disk for use with Windows Server containers, add the--os-type windowsparameter to correctly format the disk.
az disk create
--os-type windows
az disk create \
  --resource-group MC_myResourceGroup_myAKSCluster_eastus \
  --name myAKSDisk \
  --size-gb 20 \
  --query id --output tsv
az disk create \
  --resource-group MC_myResourceGroup_myAKSCluster_eastus \
  --name myAKSDisk \
  --size-gb 20 \
  --query id --output tsv
Note
Azure Disks are billed by SKU for a specific size. These SKUs range from 32GiB for S4 or P4 disks to 32TiB for S80 or P80 disks (in preview). The throughput and IOPS performance of a Premium managed disk depends on both the SKU and the instance size of the nodes in the AKS cluster. SeePricing and Performance of Managed Disks.
The disk resource ID is displayed once the command has successfully completed, as shown in the following example output. You use the disk ID to mount the disk in the next section.
/subscriptions/<subscriptionID>/resourceGroups/MC_myAKSCluster_myAKSCluster_eastus/providers/Microsoft.Compute/disks/myAKSDisk
/subscriptions/<subscriptionID>/resourceGroups/MC_myAKSCluster_myAKSCluster_eastus/providers/Microsoft.Compute/disks/myAKSDisk
Mount disk as a volume
Create apv-azuredisk.yamlfile with aPersistentVolume. UpdatevolumeHandlewith disk resource ID from the previous step. For Windows Server containers, specifyntfsfor the parameterfsType.apiVersion: v1
kind: PersistentVolume
metadata:
  annotations:
    pv.kubernetes.io/provisioned-by: disk.csi.azure.com
  name: pv-azuredisk
spec:
  capacity:
    storage: 20Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: managed-csi
  csi:
    driver: disk.csi.azure.com
    volumeHandle: /subscriptions/<subscriptionID>/resourceGroups/MC_myAKSCluster_myAKSCluster_eastus/providers/Microsoft.Compute/disks/myAKSDisk
    volumeAttributes:
      fsType: ext4
Create apv-azuredisk.yamlfile with aPersistentVolume. UpdatevolumeHandlewith disk resource ID from the previous step. For Windows Server containers, specifyntfsfor the parameterfsType.
volumeHandle
apiVersion: v1
kind: PersistentVolume
metadata:
  annotations:
    pv.kubernetes.io/provisioned-by: disk.csi.azure.com
  name: pv-azuredisk
spec:
  capacity:
    storage: 20Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: managed-csi
  csi:
    driver: disk.csi.azure.com
    volumeHandle: /subscriptions/<subscriptionID>/resourceGroups/MC_myAKSCluster_myAKSCluster_eastus/providers/Microsoft.Compute/disks/myAKSDisk
    volumeAttributes:
      fsType: ext4
apiVersion: v1
kind: PersistentVolume
metadata:
  annotations:
    pv.kubernetes.io/provisioned-by: disk.csi.azure.com
  name: pv-azuredisk
spec:
  capacity:
    storage: 20Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: managed-csi
  csi:
    driver: disk.csi.azure.com
    volumeHandle: /subscriptions/<subscriptionID>/resourceGroups/MC_myAKSCluster_myAKSCluster_eastus/providers/Microsoft.Compute/disks/myAKSDisk
    volumeAttributes:
      fsType: ext4
Create apvc-azuredisk.yamlfile with aPersistentVolumeClaimthat uses thePersistentVolume.apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc-azuredisk
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  volumeName: pv-azuredisk
  storageClassName: managed-csi
Create apvc-azuredisk.yamlfile with aPersistentVolumeClaimthat uses thePersistentVolume.
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc-azuredisk
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  volumeName: pv-azuredisk
  storageClassName: managed-csi
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc-azuredisk
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  volumeName: pv-azuredisk
  storageClassName: managed-csi
Create thePersistentVolumeandPersistentVolumeClaimusing thekubectl applycommand and reference the two YAML files you created.kubectl apply -f pv-azuredisk.yaml
kubectl apply -f pvc-azuredisk.yaml
Create thePersistentVolumeandPersistentVolumeClaimusing thekubectl applycommand and reference the two YAML files you created.
kubectl apply
kubectl apply -f pv-azuredisk.yaml
kubectl apply -f pvc-azuredisk.yaml
kubectl apply -f pv-azuredisk.yaml
kubectl apply -f pvc-azuredisk.yaml
Verify yourPersistentVolumeClaimis created and bound to thePersistentVolumeusing thekubectl get pvccommand.kubectl get pvc pvc-azurediskThe output of the command resembles the following example:NAME            STATUS   VOLUME         CAPACITY    ACCESS MODES   STORAGECLASS   AGE
pvc-azuredisk   Bound    pv-azuredisk   20Gi        RWO                           5s
Verify yourPersistentVolumeClaimis created and bound to thePersistentVolumeusing thekubectl get pvccommand.
kubectl get pvc
kubectl get pvc pvc-azuredisk
kubectl get pvc pvc-azuredisk
The output of the command resembles the following example:
NAME            STATUS   VOLUME         CAPACITY    ACCESS MODES   STORAGECLASS   AGE
pvc-azuredisk   Bound    pv-azuredisk   20Gi        RWO                           5s
NAME            STATUS   VOLUME         CAPACITY    ACCESS MODES   STORAGECLASS   AGE
pvc-azuredisk   Bound    pv-azuredisk   20Gi        RWO                           5s
Create anazure-disk-pod.yamlfile to reference yourPersistentVolumeClaim. For Windows Server containers, specify amountPathusing the Windows path convention, such as'D:'.apiVersion: v1
kind: Pod
metadata:
  name: mypod
spec:
  nodeSelector:
    kubernetes.io/os: linux
  containers:
  - image: mcr.microsoft.com/oss/nginx/nginx:1.15.5-alpine
    name: mypod
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        cpu: 250m
        memory: 256Mi
    volumeMounts:
      - name: azure
        mountPath: /mnt/azure
  volumes:
    - name: azure
      persistentVolumeClaim:
        claimName: pvc-azuredisk
Create anazure-disk-pod.yamlfile to reference yourPersistentVolumeClaim. For Windows Server containers, specify amountPathusing the Windows path convention, such as'D:'.
apiVersion: v1
kind: Pod
metadata:
  name: mypod
spec:
  nodeSelector:
    kubernetes.io/os: linux
  containers:
  - image: mcr.microsoft.com/oss/nginx/nginx:1.15.5-alpine
    name: mypod
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        cpu: 250m
        memory: 256Mi
    volumeMounts:
      - name: azure
        mountPath: /mnt/azure
  volumes:
    - name: azure
      persistentVolumeClaim:
        claimName: pvc-azuredisk
apiVersion: v1
kind: Pod
metadata:
  name: mypod
spec:
  nodeSelector:
    kubernetes.io/os: linux
  containers:
  - image: mcr.microsoft.com/oss/nginx/nginx:1.15.5-alpine
    name: mypod
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        cpu: 250m
        memory: 256Mi
    volumeMounts:
      - name: azure
        mountPath: /mnt/azure
  volumes:
    - name: azure
      persistentVolumeClaim:
        claimName: pvc-azuredisk
Apply the configuration and mount the volume using thekubectl applycommand.kubectl apply -f azure-disk-pod.yaml
Apply the configuration and mount the volume using thekubectl applycommand.
kubectl apply
kubectl apply -f azure-disk-pod.yaml
kubectl apply -f azure-disk-pod.yaml
Clean up resources
When you're done with the resources created in this article, you can remove them using thekubectl deletecommand.
kubectl delete
# Remove the pod
kubectl delete -f azure-pvc-disk.yaml

# Remove the persistent volume claim
kubectl delete -f azure-pvc.yaml
# Remove the pod
kubectl delete -f azure-pvc-disk.yaml

# Remove the persistent volume claim
kubectl delete -f azure-pvc.yaml
Next steps
To learn how to use CSI driver for Azure Disks storage, seeUse Azure Disks storage with CSI driver.
For associated best practices, seeBest practices for storage and backups in AKS.
Azure Kubernetes Service

Additional resources