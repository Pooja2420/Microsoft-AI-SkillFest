Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Configure the Application Insights SDK with ApplicationInsights.config or .xml
Article
2025-03-21
17 contributors
In this article
The Application Insights .NET SDK consists of many NuGet packages. Thecore packageprovides the API for sending telemetry to the Application Insights.More packagesprovide telemetrymodulesandinitializersfor automatically tracking telemetry from your application and its context. By adjusting the configuration file, you can enable or disable telemetry modules and initializers. You can also set parameters for some of them.
Caution
We recommend theAzure Monitor OpenTelemetry Distrofor new applications or customers to powerAzure Monitor Application Insights. The Azure Monitor OpenTelemetry Distro delivers a similar functionality and experience as the Application Insights SDK. It's possible to migrate from the Application Insights SDK using the migration guides for.NET,Node.js, andPython, but we are still working to add afew more featuresfor backwards compatibility.
The configuration file is namedApplicationInsights.configorApplicationInsights.xml. The name depends on the type of your application. It's automatically added to your project when youinstall most versions of the SDK. By default, when you use the automated experience from the Visual Studio template projects that supportAdd>Application Insights Telemetry, theApplicationInsights.configfile is created in the project root folder. When it's compiled, it's copied to the bin folder. It's also added to a web app byApplication Insights Agent on an IIS server. The configuration file is ignored if theextension for Azure websitesor theextension for Azure VMs and virtual machine scale setsis used.
ApplicationInsights.config
ApplicationInsights.xml
ApplicationInsights.config
There isn't an equivalent file to control theSDK in a webpage.
This article describes the sections you see in the configuration file, how they control the components of the SDK, and which NuGet packages load those components.
Note
TheApplicationInsights.configand .xml instructions don't apply to the .NET Core SDK. To configure .NET Core applications, follow the instructions inApplication Insights for ASP.NET Core applications.
ApplicationInsights.config
Telemetry modules (ASP.NET)
Each telemetry module collects a specific type of data and uses the core API to send the data. The modules are installed by different NuGet packages, which also add the required lines to the .config file.
There's a node in the configuration file for each module. To disable a module, delete the node or comment it out.
Dependency tracking
Dependency trackingcollects telemetry about calls your app makes to databases and external services and databases. To allow this module to work in an IIS server, you need toinstall Application Insights Agent.
You can also write your own dependency tracking code by using theTrackDependency API.
Microsoft.ApplicationInsights.DependencyCollector.DependencyTrackingTelemetryModule
Microsoft.ApplicationInsights.DependencyCollector.DependencyTrackingTelemetryModule
Microsoft.ApplicationInsights.DependencyCollectorNuGet package
Dependencies can be autocollected without modifying your code by using agent-based (codeless) attach. To use it in Azure web apps, enable theApplication Insights extension. To use it in an Azure VM or an Azure virtual machine scale set, enable theApplication Monitoring extension for VMs and virtual machine scale sets.
Performance collector
The performance collectorcollects system performance counters, such as CPU, memory, and network load from IIS installations. You can specify which counters to collect, including performance counters you've set up yourself.
Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.PerformanceCollectorModule
Microsoft.ApplicationInsights.Extensibility.PerfCounterCollector.PerformanceCollectorModule
Microsoft.ApplicationInsights.PerfCounterCollectorNuGet package
Application Insights diagnostics telemetry
TheDiagnosticsTelemetryModuleclass reports errors in the Application Insights instrumentation code itself. Examples are if the code can't access performance counters or ifITelemetryInitializerthrows an exception. Trace telemetry tracked by this module appears in theDiagnostic Search.
DiagnosticsTelemetryModule
ITelemetryInitializer
Microsoft.ApplicationInsights.Extensibility.Implementation.Tracing.DiagnosticsTelemetryModule
Microsoft.ApplicationInsights.Extensibility.Implementation.Tracing.DiagnosticsTelemetryModule
Microsoft.ApplicationInsightsNuGet package. If you only install this package, the ApplicationInsights.config file isn't automatically created.
Developer mode
TheDeveloperModeWithDebuggerAttachedTelemetryModuleclass forces the Application InsightsTelemetryChannelto send data immediately, one telemetry item at a time, when a debugger is attached to the application process. This design reduces the amount of time between the moment when your application tracks telemetry and when it appears in the Application Insights portal. It causes significant overhead in CPU and network bandwidth.
DeveloperModeWithDebuggerAttachedTelemetryModule
TelemetryChannel
Microsoft.ApplicationInsights.WindowsServer.DeveloperModeWithDebuggerAttachedTelemetryModule
Microsoft.ApplicationInsights.WindowsServer.DeveloperModeWithDebuggerAttachedTelemetryModule
Application Insights Windows ServerNuGet package
Web request tracking
Web request tracking reports theresponse time and result codeof HTTP requests.
Microsoft.ApplicationInsights.Web.RequestTrackingTelemetryModule
Microsoft.ApplicationInsights.Web.RequestTrackingTelemetryModule
Microsoft.ApplicationInsights.WebNuGet package
Exception tracking
TheExceptionTrackingTelemetryModuleclass tracks unhandled exceptions in your web app. For more information, seeFailures and exceptions.
ExceptionTrackingTelemetryModule
Microsoft.ApplicationInsights.Web.ExceptionTrackingTelemetryModule.
Microsoft.ApplicationInsights.Web.ExceptionTrackingTelemetryModule
Microsoft.ApplicationInsights.WebNuGet package.
Microsoft.ApplicationInsights.WindowsServer.UnobservedExceptionTelemetryModule: Tracks unobserved task. exceptions.
Microsoft.ApplicationInsights.WindowsServer.UnobservedExceptionTelemetryModule
Microsoft.ApplicationInsights.WindowsServer.UnhandledExceptionTelemetryModule: Tracks unhandled exceptions for worker roles, Windows services, and console applications.
Microsoft.ApplicationInsights.WindowsServer.UnhandledExceptionTelemetryModule
Application Insights Windows ServerNuGet package.
EventSource tracking
TheEventSourceTelemetryModuleclass allows you to configure EventSource events to be sent to Application Insights as traces. For information on tracking EventSource events, seeUsing EventSource events.
EventSourceTelemetryModule
Microsoft.ApplicationInsights.EventSourceListener.EventSourceTelemetryModule
Microsoft.ApplicationInsights.EventSourceListener.EventSourceTelemetryModule
Microsoft.ApplicationInsights.EventSourceListener
ETW event tracking
TheEtwCollectorTelemetryModuleclass allows you to configure events from ETW providers to be sent to Application Insights as traces. For information on tracking ETW events, seeUsing ETW events.
EtwCollectorTelemetryModule
Microsoft.ApplicationInsights.EtwCollector.EtwCollectorTelemetryModule
Microsoft.ApplicationInsights.EtwCollector.EtwCollectorTelemetryModule
Microsoft.ApplicationInsights.EtwCollector
Microsoft.ApplicationInsights
TheMicrosoft.ApplicationInsightspackage provides thecore APIof the SDK. The other telemetry modules use this API. You can alsouse it to define your own telemetry.
Microsoft.ApplicationInsights
No entry in ApplicationInsights.config.
Microsoft.ApplicationInsightsNuGet package. If you just install this NuGet, no .config file is generated.
Telemetry channel
Thetelemetry channelmanages buffering and transmission of telemetry to the Application Insights service.
Microsoft.ApplicationInsights.WindowsServer.TelemetryChannel.ServerTelemetryChannelis the default channel for web applications. It buffers data in memory and employs retry mechanisms and local disk storage for more reliable telemetry delivery.
Microsoft.ApplicationInsights.WindowsServer.TelemetryChannel.ServerTelemetryChannel
Microsoft.ApplicationInsights.InMemoryChannelis a lightweight telemetry channel. It's used if no other channel is configured.
Microsoft.ApplicationInsights.InMemoryChannel
Telemetry initializers (ASP.NET)
Telemetry initializers set context properties that are sent along with every item of telemetry.
You canwrite your own initializersto set context properties.
The standard initializers are all set either by the web or WindowsServer NuGet packages:
AccountIdTelemetryInitializersets theAccountIdproperty.
AccountIdTelemetryInitializersets theAccountIdproperty.
AccountIdTelemetryInitializer
AccountId
AuthenticatedUserIdTelemetryInitializersets theAuthenticatedUserIdproperty as set by the JavaScript SDK.
AuthenticatedUserIdTelemetryInitializersets theAuthenticatedUserIdproperty as set by the JavaScript SDK.
AuthenticatedUserIdTelemetryInitializer
AuthenticatedUserId
AzureRoleEnvironmentTelemetryInitializerupdates theRoleNameandRoleInstanceproperties of theDevicecontext for all telemetry items with information extracted from the Azure runtime environment.
AzureRoleEnvironmentTelemetryInitializerupdates theRoleNameandRoleInstanceproperties of theDevicecontext for all telemetry items with information extracted from the Azure runtime environment.
AzureRoleEnvironmentTelemetryInitializer
RoleName
RoleInstance
Device
BuildInfoConfigComponentVersionTelemetryInitializerupdates theVersionproperty of theComponentcontext for all telemetry items with the value extracted from theBuildInfo.configfile produced by MS Build.
BuildInfoConfigComponentVersionTelemetryInitializerupdates theVersionproperty of theComponentcontext for all telemetry items with the value extracted from theBuildInfo.configfile produced by MS Build.
BuildInfoConfigComponentVersionTelemetryInitializer
Version
Component
BuildInfo.config
ClientIpHeaderTelemetryInitializerupdates theIpproperty of theLocationcontext of all telemetry items based on theX-Forwarded-ForHTTP header of the request.
ClientIpHeaderTelemetryInitializerupdates theIpproperty of theLocationcontext of all telemetry items based on theX-Forwarded-ForHTTP header of the request.
ClientIpHeaderTelemetryInitializer
Ip
Location
X-Forwarded-For
DeviceTelemetryInitializerupdates the following properties of theDevicecontext for all telemetry items.Typeis set toPC.Idis set to the domain name of the computer where the web application is running.OemNameis set to the value extracted from theWin32_ComputerSystem.Manufacturerfield by using WMI.Modelis set to the value extracted from theWin32_ComputerSystem.Modelfield by using WMI.NetworkTypeis set to the value extracted from theNetworkInterfaceproperty.Languageis set to the name of theCurrentCultureproperty.
DeviceTelemetryInitializerupdates the following properties of theDevicecontext for all telemetry items.
DeviceTelemetryInitializer
Device
Typeis set toPC.
Type
PC
Idis set to the domain name of the computer where the web application is running.
Id
OemNameis set to the value extracted from theWin32_ComputerSystem.Manufacturerfield by using WMI.
OemName
Win32_ComputerSystem.Manufacturer
Modelis set to the value extracted from theWin32_ComputerSystem.Modelfield by using WMI.
Model
Win32_ComputerSystem.Model
NetworkTypeis set to the value extracted from theNetworkInterfaceproperty.
NetworkType
NetworkInterface
Languageis set to the name of theCurrentCultureproperty.
Language
CurrentCulture
DomainNameRoleInstanceTelemetryInitializerupdates theRoleInstanceproperty of theDevicecontext for all telemetry items with the domain name of the computer where the web application is running.
DomainNameRoleInstanceTelemetryInitializerupdates theRoleInstanceproperty of theDevicecontext for all telemetry items with the domain name of the computer where the web application is running.
DomainNameRoleInstanceTelemetryInitializer
RoleInstance
Device
OperationNameTelemetryInitializerupdates theNameproperty ofRequestTelemetryand theNameproperty of theOperationcontext of all telemetry items based on the HTTP method, and the names of the ASP.NET MVC controller and action invoked to process the request.
OperationNameTelemetryInitializerupdates theNameproperty ofRequestTelemetryand theNameproperty of theOperationcontext of all telemetry items based on the HTTP method, and the names of the ASP.NET MVC controller and action invoked to process the request.
OperationNameTelemetryInitializer
Name
RequestTelemetry
Name
Operation
OperationIdTelemetryInitializerorOperationCorrelationTelemetryInitializerupdates theOperation.Idcontext property of all telemetry items tracked while handling a request with the automatically generatedRequestTelemetry.Id.
OperationIdTelemetryInitializerorOperationCorrelationTelemetryInitializerupdates theOperation.Idcontext property of all telemetry items tracked while handling a request with the automatically generatedRequestTelemetry.Id.
OperationIdTelemetryInitializer
OperationCorrelationTelemetryInitializer
Operation.Id
RequestTelemetry.Id
SessionTelemetryInitializerupdates theIdproperty of theSessioncontext for all telemetry items with value extracted from theai_sessioncookie generated by theApplicationInsightsJavaScript instrumentation code running in the user's browser.
SessionTelemetryInitializerupdates theIdproperty of theSessioncontext for all telemetry items with value extracted from theai_sessioncookie generated by theApplicationInsightsJavaScript instrumentation code running in the user's browser.
SessionTelemetryInitializer
Id
Session
ai_session
ApplicationInsights
SyntheticTelemetryInitializerorSyntheticUserAgentTelemetryInitializerupdates theUser,Session, andOperationcontext properties of all telemetry items tracked when handling a request from a synthetic source, such as an availability test or search engine bot. By default,metrics explorerdoesn't display synthetic telemetry.The<Filters>set identifying properties of the requests.
SyntheticTelemetryInitializerorSyntheticUserAgentTelemetryInitializerupdates theUser,Session, andOperationcontext properties of all telemetry items tracked when handling a request from a synthetic source, such as an availability test or search engine bot. By default,metrics explorerdoesn't display synthetic telemetry.
SyntheticTelemetryInitializer
SyntheticUserAgentTelemetryInitializer
User
Session
Operation
The<Filters>set identifying properties of the requests.
<Filters>
UserTelemetryInitializerupdates theIdandAcquisitionDateproperties of theUsercontext for all telemetry items with values extracted from theai_usercookie generated by the Application Insights JavaScript instrumentation code running in the user's browser.
UserTelemetryInitializerupdates theIdandAcquisitionDateproperties of theUsercontext for all telemetry items with values extracted from theai_usercookie generated by the Application Insights JavaScript instrumentation code running in the user's browser.
UserTelemetryInitializer
Id
AcquisitionDate
User
ai_user
WebTestTelemetryInitializersets the user ID, session ID, and synthetic source properties for HTTP requests that come fromavailability tests. The<Filters>set identifying properties of the requests.
WebTestTelemetryInitializersets the user ID, session ID, and synthetic source properties for HTTP requests that come fromavailability tests. The<Filters>set identifying properties of the requests.
WebTestTelemetryInitializer
<Filters>
For .NET applications running in Azure Service Fabric, you can include theMicrosoft.ApplicationInsights.ServiceFabricNuGet package. This package includes aFabricTelemetryInitializerproperty, which adds Service Fabric properties to telemetry items. For more information, see theGitHub pageabout the properties added by this NuGet package.
Microsoft.ApplicationInsights.ServiceFabric
FabricTelemetryInitializer
Telemetry processors (ASP.NET)
Telemetry processors can filter and modify each telemetry item before it's sent from the SDK to the portal.
You canwrite your own telemetry processors.
This functionality is enabled by default. If your app sends considerable telemetry, this processor removes some of it.
<TelemetryProcessors>
      <Add Type="Microsoft.ApplicationInsights.WindowsServer.TelemetryChannel.AdaptiveSamplingTelemetryProcessor, Microsoft.AI.ServerTelemetryChannel">
        <MaxTelemetryItemsPerSecond>5</MaxTelemetryItemsPerSecond>
      </Add>
    </TelemetryProcessors>
<TelemetryProcessors>
      <Add Type="Microsoft.ApplicationInsights.WindowsServer.TelemetryChannel.AdaptiveSamplingTelemetryProcessor, Microsoft.AI.ServerTelemetryChannel">
        <MaxTelemetryItemsPerSecond>5</MaxTelemetryItemsPerSecond>
      </Add>
    </TelemetryProcessors>
The parameter provides the target that the algorithm tries to achieve. Each instance of the SDK works independently. So, if your server is a cluster of several machines, the actual volume of telemetry will be multiplied accordingly.
Learn more aboutsampling.
There's also a standardsampling telemetry processor(from 2.0.1):
<TelemetryProcessors>
     <Add Type="Microsoft.ApplicationInsights.WindowsServer.TelemetryChannel.SamplingTelemetryProcessor, Microsoft.AI.ServerTelemetryChannel">

     <!-- Set a percentage close to 100/N where N is an integer. -->
     <!-- E.g. 50 (=100/2), 33.33 (=100/3), 25 (=100/4), 20, 1 (=100/100), 0.1 (=100/1000) -->
     <SamplingPercentage>10</SamplingPercentage>
     </Add>
   </TelemetryProcessors>
<TelemetryProcessors>
     <Add Type="Microsoft.ApplicationInsights.WindowsServer.TelemetryChannel.SamplingTelemetryProcessor, Microsoft.AI.ServerTelemetryChannel">

     <!-- Set a percentage close to 100/N where N is an integer. -->
     <!-- E.g. 50 (=100/2), 33.33 (=100/3), 25 (=100/4), 20, 1 (=100/100), 0.1 (=100/1000) -->
     <SamplingPercentage>10</SamplingPercentage>
     </Add>
   </TelemetryProcessors>
ConnectionString
Note
On March 31, 2025, support for instrumentation key ingestion will end. Instrumentation key ingestion will continue to work, but we'll no longer provide updates or support for the feature.Transition to connection stringsto take advantage ofnew capabilities.
This setting determines the Application Insights resource in which your data appears. Typically, you create a separate resource, with a separate connection string, for each of your applications.
SeeConnection strings in Application Insightsfor code samples.
If you want to set the connection string dynamically, for example, to send results from your application to different resources, you can omit the connection string from the configuration file and set it in code instead.
To set the connection string for all instances ofTelemetryClient, including standard telemetry modules, do this step in an initialization method, such as global.aspx.cs in an ASP.NET service:
TelemetryClient
using Microsoft.ApplicationInsights.Extensibility;
using Microsoft.ApplicationInsights;

    protected void Application_Start()
    {
        TelemetryConfiguration configuration = TelemetryConfiguration.CreateDefault();
        configuration.ConnectionString = "InstrumentationKey=00000000-0000-0000-0000-000000000000";
        var telemetryClient = new TelemetryClient(configuration);
using Microsoft.ApplicationInsights.Extensibility;
using Microsoft.ApplicationInsights;

    protected void Application_Start()
    {
        TelemetryConfiguration configuration = TelemetryConfiguration.CreateDefault();
        configuration.ConnectionString = "InstrumentationKey=00000000-0000-0000-0000-000000000000";
        var telemetryClient = new TelemetryClient(configuration);
If you want to send a specific set of events to a different resource, you can set the key for a specific telemetry client:
var tc = new TelemetryClient();
    tc.Context.ConnectionString = "InstrumentationKey=00000000-0000-0000-0000-000000000000";
    tc.TrackEvent("myEvent");
    // ...
var tc = new TelemetryClient();
    tc.Context.ConnectionString = "InstrumentationKey=00000000-0000-0000-0000-000000000000";
    tc.TrackEvent("myEvent");
    // ...
To get a new key,create a new resource in the Application Insights portal.
ApplicationId Provider
The provider is available starting in v2.6.0.
The purpose of this provider is to look up an application ID based on a connection string. The application ID is included inRequestTelemetryandDependencyTelemetryand is used to determine correlation in the portal.
RequestTelemetry
DependencyTelemetry
This functionality is available by settingTelemetryConfiguration.ApplicationIdProvidereither in code or in the config file.
TelemetryConfiguration.ApplicationIdProvider
Interface: IApplicationIdProvider
public interface IApplicationIdProvider
{
    bool TryGetApplicationId(string instrumentationKey, out string applicationId);
}
public interface IApplicationIdProvider
{
    bool TryGetApplicationId(string instrumentationKey, out string applicationId);
}
We provide two implementations in theMicrosoft.ApplicationInsightsSDK:ApplicationInsightsApplicationIdProviderandDictionaryApplicationIdProvider.
ApplicationInsightsApplicationIdProvider
DictionaryApplicationIdProvider
ApplicationInsightsApplicationIdProvider
This wrapper is for our Profile API. It throttles requests and cache results.
This provider is added to your config file when you install eitherMicrosoft.ApplicationInsights.DependencyCollectororMicrosoft.ApplicationInsights.Web.
This class has an optional propertyProfileQueryEndpoint. By default, it's set tohttps://dc.services.visualstudio.com/api/profiles/{0}/appId. If you need to configure a proxy for this configuration, we recommend that you proxy the base address and include"/api/profiles/{0}/appId". A{0}is substituted at runtime per request with the instrumentation key.
ProfileQueryEndpoint
https://dc.services.visualstudio.com/api/profiles/{0}/appId
"/api/profiles/{0}/appId"
{0}
<ApplicationInsights>
    ...
    <ApplicationIdProvider Type="Microsoft.ApplicationInsights.Extensibility.Implementation.ApplicationId.ApplicationInsightsApplicationIdProvider, Microsoft.ApplicationInsights">
        <ProfileQueryEndpoint>https://dc.services.visualstudio.com/api/profiles/{0}/appId</ProfileQueryEndpoint>
    </ApplicationIdProvider>
    ...
</ApplicationInsights>
<ApplicationInsights>
    ...
    <ApplicationIdProvider Type="Microsoft.ApplicationInsights.Extensibility.Implementation.ApplicationId.ApplicationInsightsApplicationIdProvider, Microsoft.ApplicationInsights">
        <ProfileQueryEndpoint>https://dc.services.visualstudio.com/api/profiles/{0}/appId</ProfileQueryEndpoint>
    </ApplicationIdProvider>
    ...
</ApplicationInsights>
TelemetryConfiguration.Active.ApplicationIdProvider = new ApplicationInsightsApplicationIdProvider();
TelemetryConfiguration.Active.ApplicationIdProvider = new ApplicationInsightsApplicationIdProvider();
DictionaryApplicationIdProvider
This static provider relies on your configured instrumentation key/application ID pairs.
This class has theDefinedproperty, which is aDictionary<string,string>of instrumentation key/application ID pairs.
Defined
Dictionary<string,string>
This class has the optional propertyNext, which can be used to configure another provider to use when a connection string is requested that doesn't exist in your configuration.
Next
<ApplicationInsights>
    ...
    <ApplicationIdProvider Type="Microsoft.ApplicationInsights.Extensibility.Implementation.ApplicationId.DictionaryApplicationIdProvider, Microsoft.ApplicationInsights">
        <Defined>
            <Type key="InstrumentationKey_1" value="ApplicationId_1"/>
            <Type key="InstrumentationKey_2" value="ApplicationId_2"/>
        </Defined>
        <Next Type="Microsoft.ApplicationInsights.Extensibility.Implementation.ApplicationId.ApplicationInsightsApplicationIdProvider, Microsoft.ApplicationInsights" />
    </ApplicationIdProvider>
    ...
</ApplicationInsights>
<ApplicationInsights>
    ...
    <ApplicationIdProvider Type="Microsoft.ApplicationInsights.Extensibility.Implementation.ApplicationId.DictionaryApplicationIdProvider, Microsoft.ApplicationInsights">
        <Defined>
            <Type key="InstrumentationKey_1" value="ApplicationId_1"/>
            <Type key="InstrumentationKey_2" value="ApplicationId_2"/>
        </Defined>
        <Next Type="Microsoft.ApplicationInsights.Extensibility.Implementation.ApplicationId.ApplicationInsightsApplicationIdProvider, Microsoft.ApplicationInsights" />
    </ApplicationIdProvider>
    ...
</ApplicationInsights>
TelemetryConfiguration.Active.ApplicationIdProvider = new DictionaryApplicationIdProvider{
 Defined = new Dictionary<string, string>
    {
        {"InstrumentationKey_1", "ApplicationId_1"},
        {"InstrumentationKey_2", "ApplicationId_2"}
    }
};
TelemetryConfiguration.Active.ApplicationIdProvider = new DictionaryApplicationIdProvider{
 Defined = new Dictionary<string, string>
    {
        {"InstrumentationKey_1", "ApplicationId_1"},
        {"InstrumentationKey_2", "ApplicationId_2"}
    }
};
Configure snapshot collection for ASP.NET applications
Configure asnapshot collection for ASP.NET applications.
Next steps
Learn more about the API
Feedback
Was this page helpful?
Additional resources