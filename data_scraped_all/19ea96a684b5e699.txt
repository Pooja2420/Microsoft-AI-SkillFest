Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
steps.powershell definition
Article
2025-03-20
3 contributors
In this article
Thepowershellstep runs a script using either Windows PowerShell (on Windows) orpwsh(Linux and macOS).
powershell
pwsh
steps:
- powershell: string # Required as first property. Inline PowerShell script.
  errorActionPreference: string # Unless otherwise specified, the error action preference defaults to the value stop. See the following section for more information.
  failOnStderr: string # Fail the task if output is sent to Stderr?
  ignoreLASTEXITCODE: string # Check the final exit code of the script to determine whether the step succeeded?
  workingDirectory: string # Start the script with this working directory.
  condition: string # Evaluate this condition expression to determine whether to run this task.
  continueOnError: boolean # Continue running even on failure?
  displayName: string # Human-readable name for the task.
  target: string | target # Environment in which to run this task.
  enabled: boolean # Run this task when the job runs?
  env: # Variables to map into the process's environment.
    string: string # Name/value pairs
  name: string # ID of the step.
  timeoutInMinutes: string # Time to wait for this task to complete before the server kills it.
  retryCountOnTaskFailure: string # Number of retries if the task fails.
steps:
- powershell: string # Required as first property. Inline PowerShell script.
  errorActionPreference: string # Unless otherwise specified, the error action preference defaults to the value stop. See the following section for more information.
  failOnStderr: string # Fail the task if output is sent to Stderr?
  ignoreLASTEXITCODE: string # Check the final exit code of the script to determine whether the step succeeded?
  workingDirectory: string # Start the script with this working directory.
  condition: string # Evaluate this condition expression to determine whether to run this task.
  continueOnError: boolean # Continue running even on failure?
  displayName: string # Human-readable name for the task.
  target: string | target # Environment in which to run this task.
  enabled: boolean # Run this task when the job runs?
  env: # Variables to map into the process's environment.
    string: string # Name/value pairs
  name: string # ID of the step.
  timeoutInMinutes: string # Time to wait for this task to complete before the server kills it.
  retryCountOnTaskFailure: string # Number of retries if the task fails.
steps:
- powershell: string # Required as first property. Inline PowerShell script.
  errorActionPreference: string # Unless otherwise specified, the error action preference defaults to the value stop. See the following section for more information.
  failOnStderr: string # Fail the task if output is sent to Stderr?
  ignoreLASTEXITCODE: string # Check the final exit code of the script to determine whether the step succeeded?
  workingDirectory: string # Start the script with this working directory.
  condition: string # Evaluate this condition expression to determine whether to run this task.
  continueOnError: boolean # Continue running even on failure?
  displayName: string # Human-readable name for the task.
  target: string | target # Environment in which to run this task.
  enabled: boolean # Run this task when the job runs?
  env: # Variables to map into the process's environment.
    string: string # Name/value pairs
  name: string # ID of the step.
  timeoutInMinutes: string # Time to wait for this task to complete before the server kills it.
steps:
- powershell: string # Required as first property. Inline PowerShell script.
  errorActionPreference: string # Unless otherwise specified, the error action preference defaults to the value stop. See the following section for more information.
  failOnStderr: string # Fail the task if output is sent to Stderr?
  ignoreLASTEXITCODE: string # Check the final exit code of the script to determine whether the step succeeded?
  workingDirectory: string # Start the script with this working directory.
  condition: string # Evaluate this condition expression to determine whether to run this task.
  continueOnError: boolean # Continue running even on failure?
  displayName: string # Human-readable name for the task.
  target: string | target # Environment in which to run this task.
  enabled: boolean # Run this task when the job runs?
  env: # Variables to map into the process's environment.
    string: string # Name/value pairs
  name: string # ID of the step.
  timeoutInMinutes: string # Time to wait for this task to complete before the server kills it.
Definitions that reference this definition:steps
Properties
powershellstring. Required as first property.Inline PowerShell script.
powershell
errorActionPreferencestring.Unless otherwise specified, the error action preference defaults to the value stop. See the following section for more information.
errorActionPreference
failOnStderrstring.Fail the task if output is sent to Stderr?
failOnStderr
ignoreLASTEXITCODEstring.Check the final exit code of the script to determine whether the step succeeded?
ignoreLASTEXITCODE
workingDirectorystring.Start the script with this working directory.
workingDirectory
conditionstring.Evaluate this condition expression to determine whether to run this task.
condition
continueOnErrorboolean.Continue running even on failure?
continueOnError
displayNamestring.Human-readable name for the task.
displayName
targettarget.Environment in which to run this task.
target
enabledboolean.Run this task when the job runs?
enabled
envstring dictionary.Variables to map into the process's environment.
env
namestring.ID of the step. Acceptable values: [-_A-Za-z0-9]*.
name
timeoutInMinutesstring.Time to wait for this task to complete before the server kills it.
timeoutInMinutes
Note
Pipelines may be configured with a job level timeout. If the job level timeout interval elapses before your step completes, the running job (including your step) is terminated, even if the step is configured with a longertimeoutInMinutesinterval. For more information, seeTimeouts.
timeoutInMinutes
retryCountOnTaskFailurestring.Number of retries if the task fails.
retryCountOnTaskFailure
Remarks
Thepowershellkeyword is a shortcut for thePowerShell task.
The task runs a script using either Windows PowerShell (on Windows) orpwsh(Linux and macOS).
powershell
pwsh
Each PowerShell session lasts only for the duration of the job in which it runs. Tasks that depend on what has been bootstrapped must be in the same job as the bootstrap.
Learn more aboutconditionsandtimeouts.
Error action preference
Unless otherwise specified, the error action preference defaults to the valuestop, and the line$ErrorActionPreference = 'stop'is prepended to the top of your script.
stop
$ErrorActionPreference = 'stop'
When the error action preference is set to stop, errors cause PowerShell to terminate the task and return a nonzero exit code.
The task is also marked as Failed.
errorActionPreference: stop | continue | silentlyContinue
errorActionPreference: stop | continue | silentlyContinue
steps:
- powershell: |
    Write-Error 'Uh oh, an error occurred'
    Write-Host 'Trying again...'
  displayName: Error action preference
  errorActionPreference: continue
steps:
- powershell: |
    Write-Error 'Uh oh, an error occurred'
    Write-Host 'Trying again...'
  displayName: Error action preference
  errorActionPreference: continue
Ignore last exit code
The last exit code returned from your script is checked by default.
A nonzero code indicates a step failure, in which case the system appends your script with:
if ((Test-Path -LiteralPath variable:\LASTEXITCODE)) { exit $LASTEXITCODE }
if ((Test-Path -LiteralPath variable:\LASTEXITCODE)) { exit $LASTEXITCODE }
If you don't want this behavior, specifyignoreLASTEXITCODE: true.
ignoreLASTEXITCODE: true
ignoreLASTEXITCODE: boolean
ignoreLASTEXITCODE: boolean
steps:
- powershell: git nosuchcommand
  displayName: Ignore last exit code
  ignoreLASTEXITCODE: true
steps:
- powershell: git nosuchcommand
  displayName: Ignore last exit code
  ignoreLASTEXITCODE: true
Learn more aboutconditionsandtimeouts.
Examples
steps:
- powershell: Write-Host Hello $Env:name
  displayName: Say hello
  name: firstStep
  workingDirectory: $(build.sourcesDirectory)
  failOnStderr: true
  env:
    name: Microsoft
steps:
- powershell: Write-Host Hello $Env:name
  displayName: Say hello
  name: firstStep
  workingDirectory: $(build.sourcesDirectory)
  failOnStderr: true
  env:
    name: Microsoft
See also
PowerShell task
Learn more aboutconditionsandtimeouts
Feedback
Was this page helpful?
Additional resources