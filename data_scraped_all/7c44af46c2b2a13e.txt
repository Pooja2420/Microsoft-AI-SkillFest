Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Continuous integration and continuous deployment to Azure IoT Edge devices (classic editor)
Article
2021-08-26
1 contributor
In this article
Applies to:IoT Edge 1.4
Important
IoT Edge 1.5 LTS and IoT Edge 1.4 aresupported releases. If you are on an earlier release, seeUpdate IoT Edge.
Azure Pipelines includes a built-in Azure IoT Edge task that helps you adopt DevOps with your Azure IoT Edge applications. This article demonstrates how to use the continuous integration and continuous deployment features of Azure Pipelines to build, test, and deploy applications quickly and efficiently to your Azure IoT Edge using the classic editor. Alternatively, you canuse YAML.

In this article, you learn how to use the built-inAzure IoT Edge tasksfor Azure Pipelines to create build and release pipelines for your IoT Edge solution. Each Azure IoT Edge task added to your pipeline implements one of the following four actions:
Unless otherwise specified, the procedures in this article do not explore all the functionality available through task parameters. For more information, see the following resources:
Task version
Advanced- If applicable, specify modules that you do not want built.
Control Options
Environment Variables
Output variables
Prerequisites
An Azure Repos repository. If you don't have one, you canCreate a new Git repo in your project. For this article, we created a repository calledIoTEdgeRepo.
An Azure Repos repository. If you don't have one, you canCreate a new Git repo in your project. For this article, we created a repository calledIoTEdgeRepo.
An IoT Edge solution committed and pushed to your repository. If you want to create a new sample solution for testing this article, follow the steps inDevelop Azure IoT Edge modules using Visual Studio Code. For this article, we created a solution in our repository calledIoTEdgeSolution, which has the code for a module namedfiltermodule.For this article, all you need is the solution folder created by the IoT Edge templates in either Visual Studio Code or Visual Studio. You don't need to build, push, deploy, or debug this code before proceeding. You'll set up those processes in Azure Pipelines.Know the path to thedeployment.template.jsonfile in your solution, which is used in several steps. If you're unfamiliar with the role of the deployment template, seeLearn how to deploy modules and establish routes.TipIf you're creating a new solution, clone your repository locally first. Then, when you create the solution you can choose to create it directly in the repository folder. You can easily commit and push the new files from there.
An IoT Edge solution committed and pushed to your repository. If you want to create a new sample solution for testing this article, follow the steps inDevelop Azure IoT Edge modules using Visual Studio Code. For this article, we created a solution in our repository calledIoTEdgeSolution, which has the code for a module namedfiltermodule.
For this article, all you need is the solution folder created by the IoT Edge templates in either Visual Studio Code or Visual Studio. You don't need to build, push, deploy, or debug this code before proceeding. You'll set up those processes in Azure Pipelines.
Know the path to thedeployment.template.jsonfile in your solution, which is used in several steps. If you're unfamiliar with the role of the deployment template, seeLearn how to deploy modules and establish routes.
Tip
If you're creating a new solution, clone your repository locally first. Then, when you create the solution you can choose to create it directly in the repository folder. You can easily commit and push the new files from there.
A container registry where you can push module images. You can useAzure Container Registryor a third-party registry.
A container registry where you can push module images. You can useAzure Container Registryor a third-party registry.
An active AzureIoT hubwith at least two IoT Edge devices for testing the separate test and production deployment stages. You can follow the quickstart articles to create an IoT Edge device onLinuxorWindows
An active AzureIoT hubwith at least two IoT Edge devices for testing the separate test and production deployment stages. You can follow the quickstart articles to create an IoT Edge device onLinuxorWindows
Create a build pipeline for continuous integration
In this section, you create a new build pipeline. You configure the pipeline to run automatically and publish build logs whenever you check in changes to the IoT Edge solution.
Sign in to your Azure DevOps organization (https://dev.azure.com/{your organization}) and open the project that contains your IoT Edge solution repository.
Sign in to your Azure DevOps organization (https://dev.azure.com/{your organization}) and open the project that contains your IoT Edge solution repository.
https://dev.azure.com/{your organization}

From the left pane menu in your project, selectPipelines. SelectCreate Pipelineat the center of the page. Or, if you already have build pipelines, select theNew pipelinebutton in the top right.
From the left pane menu in your project, selectPipelines. SelectCreate Pipelineat the center of the page. Or, if you already have build pipelines, select theNew pipelinebutton in the top right.

At the bottom of theWhere is your code?page, selectUse the classic editor. If you wish to use YAML to create your project's build pipelines, see theYAML guide.
At the bottom of theWhere is your code?page, selectUse the classic editor. If you wish to use YAML to create your project's build pipelines, see theYAML guide.

Follow the prompts to create your pipeline.Provide the source information for your new build pipeline. SelectAzure Repos Gitas the source, then select the project, repository, and branch where your IoT Edge solution code is located. Then, selectContinue.SelectEmpty jobinstead of a template.
Follow the prompts to create your pipeline.
Provide the source information for your new build pipeline. SelectAzure Repos Gitas the source, then select the project, repository, and branch where your IoT Edge solution code is located. Then, selectContinue.
Provide the source information for your new build pipeline. SelectAzure Repos Gitas the source, then select the project, repository, and branch where your IoT Edge solution code is located. Then, selectContinue.

SelectEmpty jobinstead of a template.
SelectEmpty jobinstead of a template.

Once your pipeline is created, you are taken to the pipeline editor. Here, you can change the pipeline's name, agent pool, and agent specification.You can select a Microsoft-hosted pool, or a self-hosted pool that you manage.In your pipeline description, choose the correct agent specification based on your target platform:If you would like to build your modules in platform amd64 for Linux containers, chooseubuntu-18.04If you would like to build your modules in platform amd64 for Windows 1809 containers, you need toset up self-hosted agent on Windows.If you would like to build your modules in platform arm32v7 or arm64 for Linux containers, you need toset up self-hosted agent on Linux.
Once your pipeline is created, you are taken to the pipeline editor. Here, you can change the pipeline's name, agent pool, and agent specification.
You can select a Microsoft-hosted pool, or a self-hosted pool that you manage.
In your pipeline description, choose the correct agent specification based on your target platform:
If you would like to build your modules in platform amd64 for Linux containers, chooseubuntu-18.04
If you would like to build your modules in platform amd64 for Linux containers, chooseubuntu-18.04
If you would like to build your modules in platform amd64 for Windows 1809 containers, you need toset up self-hosted agent on Windows.
If you would like to build your modules in platform amd64 for Windows 1809 containers, you need toset up self-hosted agent on Windows.
If you would like to build your modules in platform arm32v7 or arm64 for Linux containers, you need toset up self-hosted agent on Linux.
If you would like to build your modules in platform arm32v7 or arm64 for Linux containers, you need toset up self-hosted agent on Linux.

Your pipeline comes preconfigured with a job calledAgent job 1. Select the plus sign (+) to add four tasks to the job:Azure IoT Edgetwice,Copy Filesonce, andPublish Build Artifactsonce. Search for each task and hover over the task's name to see theAddbutton.When all four tasks are added, your Agent job looks like the following example:
Your pipeline comes preconfigured with a job calledAgent job 1. Select the plus sign (+) to add four tasks to the job:Azure IoT Edgetwice,Copy Filesonce, andPublish Build Artifactsonce. Search for each task and hover over the task's name to see theAddbutton.

When all four tasks are added, your Agent job looks like the following example:

Select the firstAzure IoT Edgetask to edit it. This task builds all modules in the solution with the target platform that you specify. Edit the task with the following values:ParameterDescriptionDisplay nameThe display name is automatically updated when the Action field changes.ActionSelectBuild module images..template.json fileSelect the ellipsis (...) and navigate to thedeployment.template.jsonfile in the repository that contains your IoT Edge solution.Default platformSelect the appropriate operating system for your modules based on your targeted IoT Edge device.Output variablesProvide a reference name to associate with the file path where your deployment.json file generates, such asedge.For more information about this task and its parameters, seeAzure IoT Edge task.These configurations use the image repository and tag that are defined in themodule.jsonfile to name and tag the module image.Build module imagesalso helps replace the variables with the exact value you define in themodule.jsonfile. In Visual Studio or Visual Studio Code, you specify the actual value in a.envfile. In Azure Pipelines, you set the value on thePipeline Variablestab. Select theVariablestab on the pipeline editor menu and configure the name and value as following:ACR_ADDRESS: Your Azure Container RegistryLogin servervalue. You can find the login server value on the container registry's overview page in the Azure portal.If you have other variables in your project, you can specify the name and value on this tab.Build module imagesrecognizes only variables that are in${VARIABLE}format. Make sure you use this format in your**/module.jsonfiles.
Select the firstAzure IoT Edgetask to edit it. This task builds all modules in the solution with the target platform that you specify. Edit the task with the following values:
For more information about this task and its parameters, seeAzure IoT Edge task.
These configurations use the image repository and tag that are defined in themodule.jsonfile to name and tag the module image.Build module imagesalso helps replace the variables with the exact value you define in themodule.jsonfile. In Visual Studio or Visual Studio Code, you specify the actual value in a.envfile. In Azure Pipelines, you set the value on thePipeline Variablestab. Select theVariablestab on the pipeline editor menu and configure the name and value as following:
module.json
module.json
.env
ACR_ADDRESS: Your Azure Container RegistryLogin servervalue. You can find the login server value on the container registry's overview page in the Azure portal.
If you have other variables in your project, you can specify the name and value on this tab.Build module imagesrecognizes only variables that are in${VARIABLE}format. Make sure you use this format in your**/module.jsonfiles.
${VARIABLE}
**/module.json
Select the secondAzure IoT Edgetask to edit it. This task pushes all module images to the container registry that you select.ParameterDescriptionDisplay nameThe display name is automatically updated when the Action field changes.ActionSelectPush module images.Container registry typeUse the default type:Azure Container Registry.Azure subscriptionChoose your subscription.Azure Container RegistrySelect the type of container registry that you use to store your module images. Depending on which registry type you choose, the form changes. If you chooseAzure Container Registry, use the dropdown lists to select the Azure subscription and the name of your container registry. If you chooseGeneric Container Registry, selectNewto create a registry service connection..template.json fileSelect the ellipsis (...) and navigate to thedeployment.template.jsonfile in the repository that contains your IoT Edge solution.Default platformSelect the appropriate operating system for your modules based on your targeted IoT Edge device.Add registry credential to deployment manifestSpecify true to add the registry credential for pushing docker images to deployment manifest.For more information about this task and its parameters, seeAzure IoT Edge task.If you have multiple container registries to host your module images, you need to duplicate this task, select different container registry, and useBypass module(s)in theAdvancedsettings to bypass the images that are not for this specific registry.
Select the secondAzure IoT Edgetask to edit it. This task pushes all module images to the container registry that you select.
Azure Container Registry
For more information about this task and its parameters, seeAzure IoT Edge task.
If you have multiple container registries to host your module images, you need to duplicate this task, select different container registry, and useBypass module(s)in theAdvancedsettings to bypass the images that are not for this specific registry.
Select theCopy Filestask to edit it. Use this task to copy files to the artifact staging directory.ParameterDescriptionDisplay nameUse the default name or customizeSource folderThe folder with the files to be copied.ContentsAdd two lines:deployment.template.jsonand**/module.json. These two files serve as inputs to generate the IoT Edge deployment manifest.Target FolderSpecify the variable$(Build.ArtifactStagingDirectory). SeeBuild variablesto learn about the description.For more information about this task and its parameters, seeCopy files task.
Select theCopy Filestask to edit it. Use this task to copy files to the artifact staging directory.
deployment.template.json
**/module.json
$(Build.ArtifactStagingDirectory)
For more information about this task and its parameters, seeCopy files task.
Select thePublish Build Artifactstask to edit it. Provide artifact staging directory path to the task so that the path can be published to release pipeline.ParameterDescriptionDisplay nameUse the default name or customize.Path to publishSpecify the variable$(Build.ArtifactStagingDirectory). SeeBuild variablesto learn more.Artifact nameUse the default name:dropArtifact publish locationUse the default location:Azure PipelinesFor more information about this task and its parameters, seePublish build artifacts task.
Select thePublish Build Artifactstask to edit it. Provide artifact staging directory path to the task so that the path can be published to release pipeline.
$(Build.ArtifactStagingDirectory)
For more information about this task and its parameters, seePublish build artifacts task.
Open theTriggerstab and check the box toEnable continuous integration. Make sure the branch containing your code is included.
Open theTriggerstab and check the box toEnable continuous integration. Make sure the branch containing your code is included.

SelectSavefrom theSave & queuedropdown.
This pipeline is now configured to run automatically when you push new code to your repo. The last task, publishing the pipeline artifacts, triggers a release pipeline. Continue to the next section to build the release pipeline.
Create a release pipeline for continuous deployment
In this section, you create a release pipeline that is configured to run automatically when your build pipeline drops artifacts, and it will show deployment logs in Azure Pipelines.
Create a new pipeline, and add a new stage:
In theReleasestab underPipelines, choose+ New pipeline. Or, if you already have release pipelines, choose the+ Newbutton and select+ New release pipeline.
In theReleasestab underPipelines, choose+ New pipeline. Or, if you already have release pipelines, choose the+ Newbutton and select+ New release pipeline.

When prompted to select a template, choose to start with anEmpty job.
When prompted to select a template, choose to start with anEmpty job.

Your new release pipeline initializes with one stage, calledStage 1. Rename Stage 1 todevand treat it as a continuous deployment pipeline for your development environment. Usually, continuous deployment pipelines have multiple stages includingdev,staging, andprod. You can use different names and create more based on your DevOps practice. Close the stage details window once it's renamed.You can also rename your release pipeline by selecting the "New release pipeline" text at the top.
Your new release pipeline initializes with one stage, calledStage 1. Rename Stage 1 todevand treat it as a continuous deployment pipeline for your development environment. Usually, continuous deployment pipelines have multiple stages includingdev,staging, andprod. You can use different names and create more based on your DevOps practice. Close the stage details window once it's renamed.
You can also rename your release pipeline by selecting the "New release pipeline" text at the top.
Link the release to the build artifacts that are published by the build pipeline. ClickAddin artifacts area.
Link the release to the build artifacts that are published by the build pipeline. ClickAddin artifacts area.

On theAdd an artifact page, selectBuildas theSource type. Choose the project and the build pipeline you created. If you wish, you can change theSource aliasto something more descriptive. Then, selectAdd.
On theAdd an artifact page, selectBuildas theSource type. Choose the project and the build pipeline you created. If you wish, you can change theSource aliasto something more descriptive. Then, selectAdd.

Open the artifact triggers and select the toggle to enable the continuous deployment trigger. Now, a new release will be created each time a new build is available.
Open the artifact triggers and select the toggle to enable the continuous deployment trigger. Now, a new release will be created each time a new build is available.

Thedevstage is preconfigured with one job and zero tasks. From the pipeline menu, selectTasksthen choose thedevstage. Select theAgent joband change itsDisplay nametoQA. You can configure details about the agent job, but the deployment task is platform insensitive so you can use anyAgent specificationin the chosenAgent pool.
Thedevstage is preconfigured with one job and zero tasks. From the pipeline menu, selectTasksthen choose thedevstage. Select theAgent joband change itsDisplay nametoQA. You can configure details about the agent job, but the deployment task is platform insensitive so you can use anyAgent specificationin the chosenAgent pool.

On the QA job, select the plus sign (+) to add two tasks. Search for and addAzure IoT Edgetwice.
On the QA job, select the plus sign (+) to add two tasks. Search for and addAzure IoT Edgetwice.
Select the firstAzure IoT Edgetask and configure it with the following values:ParameterDescriptionDisplay nameThe display name is automatically updated when the Action field changes.ActionSelectGenerate deployment manifest..template.json fileSpecify the path:$(System.DefaultWorkingDirectory)/Drop/drop/deployment.template.json. The path is published from build pipeline.Default platformSelect the appropriate operating system for your modules based on your targeted IoT Edge device.Output pathPut the path$(System.DefaultWorkingDirectory)/Drop/drop/configs/deployment.json. This path is the final IoT Edge deployment manifest file.These configurations help replace the module image URLs in thedeployment.template.jsonfile. TheGenerate deployment manifestalso helps replace the variables with the exact value you defined in thedeployment.template.jsonfile. In Visual Studio/Visual Studio Code, you are specifying the actual value in a.envfile. In Azure Pipelines, you set the value inRelease Pipeline Variablestab. Move toVariablestab and configure the name and value as following:ACR_ADDRESS: Your Azure Container RegistryLogin servervalue. You can retrieve the Login server from the Overview page of your container registry in the Azure portal.ACR_PASSWORD: Your Azure Container Registry password.ACR_USER: Your Azure Container Registry username.If you have other variables in your project, you can specify the name and value in this tab. TheGenerate deployment manifestcan only recognize the variables that are in${VARIABLE}flavor. Make sure you are using this flavor in your*.template.jsonfiles."registryCredentials": {
  "<ACR name>": { // Your Azure Container Registry **Registry name** value
    "username": "${ACR_USER}",
    "password": "${ACR_PASSWORD}",
    "address": "${ACR_ADDRESS}"
  }
}
Select the firstAzure IoT Edgetask and configure it with the following values:
Generate deployment manifest
$(System.DefaultWorkingDirectory)/Drop/drop/deployment.template.json
$(System.DefaultWorkingDirectory)/Drop/drop/configs/deployment.json
These configurations help replace the module image URLs in thedeployment.template.jsonfile. TheGenerate deployment manifestalso helps replace the variables with the exact value you defined in thedeployment.template.jsonfile. In Visual Studio/Visual Studio Code, you are specifying the actual value in a.envfile. In Azure Pipelines, you set the value inRelease Pipeline Variablestab. Move toVariablestab and configure the name and value as following:
deployment.template.json
deployment.template.json
.env
ACR_ADDRESS: Your Azure Container RegistryLogin servervalue. You can retrieve the Login server from the Overview page of your container registry in the Azure portal.
ACR_PASSWORD: Your Azure Container Registry password.
ACR_USER: Your Azure Container Registry username.
If you have other variables in your project, you can specify the name and value in this tab. TheGenerate deployment manifestcan only recognize the variables that are in${VARIABLE}flavor. Make sure you are using this flavor in your*.template.jsonfiles.
${VARIABLE}
*.template.json
"registryCredentials": {
  "<ACR name>": { // Your Azure Container Registry **Registry name** value
    "username": "${ACR_USER}",
    "password": "${ACR_PASSWORD}",
    "address": "${ACR_ADDRESS}"
  }
}
"registryCredentials": {
  "<ACR name>": { // Your Azure Container Registry **Registry name** value
    "username": "${ACR_USER}",
    "password": "${ACR_PASSWORD}",
    "address": "${ACR_ADDRESS}"
  }
}

Select the secondAzure IoT Edgetask and configure it with the following values:ParameterDescriptionDisplay nameThe display name is automatically updated when the Action field changes.ActionSelectDeploy to IoT Edge devices.Deployment filePut the path$(System.DefaultWorkingDirectory)/Drop/drop/configs/deployment.json. This path is the file IoT Edge deployment manifest file.Azure subscriptionSelect the subscription that contains your IoT Hub.IoT Hub nameSelect your IoT hub.Choose single/multiple deviceChoose whether you want the release pipeline to deploy to one or multiple devices. If you deploy to a single device, enter theIoT Edge device ID. If you are deploying to multiple devices, specify the devicetarget condition. The target condition is a filter to match a set of IoT Edge devices in IoT Hub. If you want to use device tags as the condition, you need to update your corresponding devices tags with IoT Hub device twin. Update theIoT Edge deployment IDandIoT Edge deployment priorityin the advanced settings. For more information about creating a deployment for multiple devices, seeUnderstand IoT Edge automatic deployments.Device ID or target conditionDepending on the prior selection, specify a device ID ortarget conditionto deploy to multiple devices.AdvancedFor the IoT Edge deployment ID, specify$(System.TeamProject)-$(Release.EnvironmentName). This variable maps the project and release name with your IoT Edge deployment ID.If your task involves using an image that resides in a private Docker Trusted Registry that isn't visible to the public cloud, you can set theSKIP_MODULE_IMAGE_VALIDATIONenvironment variable totrueto skip image validation.
Select the secondAzure IoT Edgetask and configure it with the following values:
Deploy to IoT Edge devices
$(System.DefaultWorkingDirectory)/Drop/drop/configs/deployment.json
$(System.TeamProject)-$(Release.EnvironmentName)
If your task involves using an image that resides in a private Docker Trusted Registry that isn't visible to the public cloud, you can set theSKIP_MODULE_IMAGE_VALIDATIONenvironment variable totrueto skip image validation.
true

SelectSaveto save your changes to the new release pipeline. Return to the pipeline view by selectingPipelinetab from the menu.
SelectSaveto save your changes to the new release pipeline. Return to the pipeline view by selectingPipelinetab from the menu.
Note
Layered deployments are not yet supported in Azure IoT Edge tasks in Azure DevOps.
However, you can use anAzure CLI task in Azure DevOpsto create your deployment as a layered deployment. For theInline Scriptvalue, you can use theaz iot edge deployment create command:
az iot edge deployment create -d {deployment_name} -n {hub_name} --content modules_content.json --layered true
az iot edge deployment create -d {deployment_name} -n {hub_name} --content modules_content.json --layered true
Verify IoT Edge CI/CD with the build and release pipelines
To trigger a build job, you can either push a commit to source code repository or manually trigger it. In this section, you manually trigger the CI/CD pipeline to test that it works. Then verify that the deployment succeeds.
From the left pane menu, selectPipelinesand open the build pipeline that you created at the beginning of this article.
From the left pane menu, selectPipelinesand open the build pipeline that you created at the beginning of this article.
You can trigger a build job in your build pipeline by selecting theRun pipelinebutton in the top right.
You can trigger a build job in your build pipeline by selecting theRun pipelinebutton in the top right.

Review theRun pipelinesettings. Then, selectRun.
Review theRun pipelinesettings. Then, selectRun.

SelectAgent job 1to watch the run's progress. You can review the logs of the job's output by selecting the job.
SelectAgent job 1to watch the run's progress. You can review the logs of the job's output by selecting the job.

If the build pipeline is completed successfully, it triggers a release todevstage. The successfuldevrelease creates IoT Edge deployment to target IoT Edge devices.
If the build pipeline is completed successfully, it triggers a release todevstage. The successfuldevrelease creates IoT Edge deployment to target IoT Edge devices.

Clickdevstage to see release logs.
Clickdevstage to see release logs.

If your pipeline is failing, start by looking at the logs. You can view logs by navigating to the pipeline run summary and selecting the job and task. If a certain task is failing, check the logs for that task. For detailed instructions for configuring and using logs, seeReview logs to diagnose pipeline issues.
If your pipeline is failing, start by looking at the logs. You can view logs by navigating to the pipeline run summary and selecting the job and task. If a certain task is failing, check the logs for that task. For detailed instructions for configuring and using logs, seeReview logs to diagnose pipeline issues.
Next steps
Understand the IoT Edge deployment inUnderstand IoT Edge deployments for single devices or at scale
Walk through the steps to create, update, or delete a deployment inDeploy and monitor IoT Edge modules at scale.
Additional resources