Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Hybrid search in Azure Cosmos DB for NoSQL (preview)
Article
2025-03-13
2 contributors
Applies to: â NoSQL
In this article
Azure Cosmos DB for NoSQL now supports a powerful hybrid search capability that combines Vector Search with Full Text Search scoring (BM25) using the Reciprocal Rank Fusion (RRF) function.
What is hybrid search?
Hybrid search leverages the strengths of both vector-based and traditional keyword-based search methods to deliver more relevant and accurate search results. Hybrid search is easy to do in Azure Cosmos DB for NoSQL due to the ability to store both metadata and vectors within the same document.
Hybrid search in Azure Cosmos DB for NoSQL integrates two distinct search methodologies:
Vector search: Utilizes machine learning models to understand the semantic meaning of queries and documents. This allows for more nuanced and context-aware search results, especially useful for complex queries where traditional keyword search might fall short.
Full text search (BM25): A well-established algorithm that scores documents based on the presence and frequency of words and terms. BM25 is particularly effective for straightforward keyword searches, providing a robust baseline for search relevance.
The results from vector search and full text search are then combined using the Reciprocal Rank Fusion (RRF) function. RRF is a rank aggregation method that merges the rankings from multiple search algorithms to produce a single, unified ranking. This ensures that the final search results benefit from the strengths of both search approaches and offers multiple benefits.
Enhanced Relevance: By combining semantic understanding with keyword matching, hybrid search delivers more relevant results for a wide range of queries.
Improved Accuracy: The RRF function ensures that the most pertinent results from both search methods are prioritized.
Versatility: Suitable for various use cases includingRetrieval Augmented Generation (RAG)to improve the responses generated by an LLM grounded on your own data.
How to use hybrid search
Enable theVector Search in Azure Cosmos DB for NoSQL feature.
Enable theFull Text & Hybrid Search for NoSQL preview feature.
Create a container with a vector policy, full text policy, vector index, and full text index.
Insert your data with text and vector properties.
Run hybrid queries against the data.
Configure policies and indexes for hybrid search
Important
Currently, vector policies and vector indexes are immutable after creation. To make changes, please create a new collection.
A sample vector policy
{
   "vectorEmbeddings": [
       {
           "path":"/vector",
           "dataType":"float32",
           "distanceFunction":"cosine",
           "dimensions":3
       },

}
{
   "vectorEmbeddings": [
       {
           "path":"/vector",
           "dataType":"float32",
           "distanceFunction":"cosine",
           "dimensions":3
       },

}
A sample full text policy
{
    "defaultLanguage": "en-US",
    "fullTextPaths": [
        {
            "path": "/text",
            "language": "en-US"
        }
    ]
}
{
    "defaultLanguage": "en-US",
    "fullTextPaths": [
        {
            "path": "/text",
            "language": "en-US"
        }
    ]
}
A sample indexing policy with both full text and vector indexes
{
    "indexingMode": "consistent",
    "automatic": true,
    "includedPaths": [
        {
            "path": "/*"
        }
    ],
    "excludedPaths": [
        {
            "path": "/\"_etag\"/?"
        },
        {
            "path": "/vector/*"
        }
    ],
    "fullTextIndexes": [
        {
            "path": "/text"
        }
    ],
    "vectorIndexes": [
        {
            "path": "/vector",
            "type": "DiskANN"
        }
    ]
}
{
    "indexingMode": "consistent",
    "automatic": true,
    "includedPaths": [
        {
            "path": "/*"
        }
    ],
    "excludedPaths": [
        {
            "path": "/\"_etag\"/?"
        },
        {
            "path": "/vector/*"
        }
    ],
    "fullTextIndexes": [
        {
            "path": "/text"
        }
    ],
    "vectorIndexes": [
        {
            "path": "/vector",
            "type": "DiskANN"
        }
    ]
}
Hybrid search queries
Hybrid search queries can be executed by leveraging theRRFsystem function in anORDER BY RANKclause that includes both aVectorDistancefunction andFullTextScore. For example, a parameterized query to find the topkmost relevant results would look like:
RRF
ORDER BY RANK
VectorDistance
FullTextScore
SELECT TOP @k *
FROM c
ORDER BY RANK RRF(VectorDistance(c.vector, @queryVector), FullTextScore(c.content, [@searchTerm1, @searchTerm2, ...]))
SELECT TOP @k *
FROM c
ORDER BY RANK RRF(VectorDistance(c.vector, @queryVector), FullTextScore(c.content, [@searchTerm1, @searchTerm2, ...]))
Suppose you have a document that has vector embeddings stored in each document in the propertyc.vectorand text data contained in the property c.text. To get the 10 most relevant documents using Hybrid search, the query can be written as:
c.vector
SELECT TOP 10 * 
FROM c
ORDER BY RANK RRF(VectorDistance(c.vector, [1,2,3]), FullTextScore(c.text, ["text", "to", "search", "goes" ,"here])
SELECT TOP 10 * 
FROM c
ORDER BY RANK RRF(VectorDistance(c.vector, [1,2,3]), FullTextScore(c.text, ["text", "to", "search", "goes" ,"here])
Related content
Vector search
VectorDistance system function
FullTextScore system function
RRF system function
ORDER BY RANK clause
Feedback
Was this page helpful?
Additional resources