Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Use IoT Edge module to run a Kubernetes stateless application on your Azure Stack Edge Pro GPU device
Article
2021-08-27
3 contributors
In this article
APPLIES TO:Azure Stack Edge Pro - GPUAzure Stack Edge Pro 2Azure Stack Edge Pro RAzure Stack Edge Mini R
This article describes how you can use an IoT Edge module to deploy a stateless application on your Azure Stack Edge Pro device.
To deploy the stateless application, you'll take the following steps:
Ensure that prerequisites are completed before you deploy an IoT Edge module.
Add an IoT Edge module to access compute network on your Azure Stack Edge Pro.
Verify the module can access the enabled network interface.
In this how-to article, you'll use a webserver app module to demonstrate the scenario.
Prerequisites
Before you begin, you'll need:
An Azure Stack Edge Pro device. Make sure that:Compute network settings are configured on the device.Device is activated as per the steps inTutorial: Activate your device.
An Azure Stack Edge Pro device. Make sure that:
Compute network settings are configured on the device.
Device is activated as per the steps inTutorial: Activate your device.
You've completedConfigure computestep as per theTutorial: Configure compute on your Azure Stack Edge Pro deviceon your device. Your device should have an associated IoT Hub resource, an IoT device, and an IoT Edge device.
You've completedConfigure computestep as per theTutorial: Configure compute on your Azure Stack Edge Pro deviceon your device. Your device should have an associated IoT Hub resource, an IoT device, and an IoT Edge device.
Add webserver app module
Take the following steps to add a webserver app module on your Azure Stack Edge Pro device.
In the IoT Hub resource associated with your device, go toAutomatic Device Management > IoT Edge.
In the IoT Hub resource associated with your device, go toAutomatic Device Management > IoT Edge.
Select and click the IoT Edge device associated with your Azure Stack Edge Pro device.
Select and click the IoT Edge device associated with your Azure Stack Edge Pro device.

SelectSet modules. OnSet modules on device, select+ Addand then selectIoT Edge Module.
SelectSet modules. OnSet modules on device, select+ Addand then selectIoT Edge Module.

In theAdd IoT Edge module:Specify aNamefor your webserver app module that you want to deploy.UnderModule settingstab, provide anImage URIfor your module image. A module matching the provided name and tags is retrieved. In this case,mcr.microsoft.com/oss/nginx/nginx:1.15.5-alpinewill pull an nginx image (tagged as 1.15.5-alpine) from the publicmcr.microsoft.comregistry.In theContainer Create Optionstab, paste the following sample code:{
    "HostConfig": {
        "PortBindings": {
            "80/tcp": [
                {
                    "HostPort": "8080"
                }
            ]
        }
    }
}This configuration lets you access the module using the compute network IP overhttpon TCP port 8080 (with the default webserver port being 80). SelectAdd.SelectReview + create. Review the module details and selectCreate.
In theAdd IoT Edge module:
Specify aNamefor your webserver app module that you want to deploy.
Specify aNamefor your webserver app module that you want to deploy.
UnderModule settingstab, provide anImage URIfor your module image. A module matching the provided name and tags is retrieved. In this case,mcr.microsoft.com/oss/nginx/nginx:1.15.5-alpinewill pull an nginx image (tagged as 1.15.5-alpine) from the publicmcr.microsoft.comregistry.
UnderModule settingstab, provide anImage URIfor your module image. A module matching the provided name and tags is retrieved. In this case,mcr.microsoft.com/oss/nginx/nginx:1.15.5-alpinewill pull an nginx image (tagged as 1.15.5-alpine) from the publicmcr.microsoft.comregistry.
mcr.microsoft.com/oss/nginx/nginx:1.15.5-alpine
mcr.microsoft.com

In theContainer Create Optionstab, paste the following sample code:{
    "HostConfig": {
        "PortBindings": {
            "80/tcp": [
                {
                    "HostPort": "8080"
                }
            ]
        }
    }
}This configuration lets you access the module using the compute network IP overhttpon TCP port 8080 (with the default webserver port being 80). SelectAdd.
In theContainer Create Optionstab, paste the following sample code:
{
    "HostConfig": {
        "PortBindings": {
            "80/tcp": [
                {
                    "HostPort": "8080"
                }
            ]
        }
    }
}
{
    "HostConfig": {
        "PortBindings": {
            "80/tcp": [
                {
                    "HostPort": "8080"
                }
            ]
        }
    }
}
This configuration lets you access the module using the compute network IP overhttpon TCP port 8080 (with the default webserver port being 80). SelectAdd.

SelectReview + create. Review the module details and selectCreate.
SelectReview + create. Review the module details and selectCreate.
Verify module access
Verify the module is successfully deployed and is running. On theModulestab, the runtime status of the module should berunning.
Verify the module is successfully deployed and is running. On theModulestab, the runtime status of the module should berunning.

To get the external endpoint of the webserver app,access the Kubernetes dashboard.
To get the external endpoint of the webserver app,access the Kubernetes dashboard.
In the left-pane of the dashboard, filter byiotedgenamespace. Go toDiscovery and Load balancing > Services. Under the list of services listed, locate the external endpoint for the webserver app module.
In the left-pane of the dashboard, filter byiotedgenamespace. Go toDiscovery and Load balancing > Services. Under the list of services listed, locate the external endpoint for the webserver app module.

Select the external endpoint to open a new browser window.You should see that the webserver app is running.
Select the external endpoint to open a new browser window.
You should see that the webserver app is running.

Next steps
Learn how to Expose stateful application via an IoT Edge module.
Feedback
Was this page helpful?
Additional resources