Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Quickstart: Create an example Consumption logic app workflow using the Azure portal
Article
2025-04-06
5 contributors
In this article
Applies to:Azure Logic Apps (Consumption)
This quickstart show how to create an example workflow that runs in multitenant Azure Logic Apps and performs tasks with multiple cloud services. The workflow checks an RSS feed for new articles, based on a specific schedule, and sends an email for each new RSS item. Specifically, you create a Consumption logic app resource and workflow that uses the following items:
TheRSSconnector, which provides a trigger to check an RSS feed.
TheOffice 365 Outlookconnector, which provides an action to send email.
When you finish, your workflow looks like the following high level example:

Tip
To learn more, you can ask Azure Copilot these questions:
What's Azure Logic Apps?
What's a Consumption logic app workflow?
What's the RSS connector?
What's the Office 365 Outlook connector?
To find Azure Copilot, on theAzure portaltoolbar, selectCopilot.
The operations in this example are from two connectors among1000+ connectorsthat you can use in a workflow. While this example is cloud-based, Azure Logic Apps supports workflows that connect apps, data, services, and systems across cloud, on-premises, and hybrid environments.
To create and manage a Consumption logic app workflow using other tools, see the following quickstarts:
Create and manage logic app workflows in Visual Studio Code
Create and manage logic apps workflows using the Azure CLI
To create a Standard logic app workflow that runs in single-tenant Azure Logic Apps instead, seeCreate an example Standard logic app workflow using Azure portal.

Prerequisites
An Azure account and subscription. If you don't have a subscription,sign up for a free Azure account.
An Azure account and subscription. If you don't have a subscription,sign up for a free Azure account.
An email account from a service that works with Azure Logic Apps, such as Office 365 Outlook or Outlook.com. For other supported email providers, seeConnectors for Azure Logic Apps.This quickstart uses Office 365 Outlook with a work or school account. If you use a different email account, the general steps stay the same, but your UI might slightly differ. If you use Outlook.com, use your personal Microsoft account instead to sign in.NoteIf you want to use theGmail connector, only G Suite accounts can use
this connector without restriction in Azure Logic Apps. If you have a consumer Gmail account,
you can only use this connector with specific Google-approved services, unless youcreate a Google client app to use for authentication with your Gmail connector. For more information, seeData security and privacy policies for Google connectors in Azure Logic Apps.
An email account from a service that works with Azure Logic Apps, such as Office 365 Outlook or Outlook.com. For other supported email providers, seeConnectors for Azure Logic Apps.
This quickstart uses Office 365 Outlook with a work or school account. If you use a different email account, the general steps stay the same, but your UI might slightly differ. If you use Outlook.com, use your personal Microsoft account instead to sign in.
Note
If you want to use theGmail connector, only G Suite accounts can use
this connector without restriction in Azure Logic Apps. If you have a consumer Gmail account,
you can only use this connector with specific Google-approved services, unless youcreate a Google client app to use for authentication with your Gmail connector. For more information, seeData security and privacy policies for Google connectors in Azure Logic Apps.
If you have a firewall that limits traffic to specific IP addresses, make sure that you set up your firewall to allow access for both theinboundandoutboundIP addresses that Azure Logic Apps uses in the Azure region where you create your logic app workflow.This example uses theRSSandOffice 365 Outlookconnectors, whichare hosted and run in global multitenant Azure and are managed by Microsoft. These connectors require that you set up your firewall to allow access for all themanaged connector outbound IP addressesin the Azure region for your logic app resource.
If you have a firewall that limits traffic to specific IP addresses, make sure that you set up your firewall to allow access for both theinboundandoutboundIP addresses that Azure Logic Apps uses in the Azure region where you create your logic app workflow.
This example uses theRSSandOffice 365 Outlookconnectors, whichare hosted and run in global multitenant Azure and are managed by Microsoft. These connectors require that you set up your firewall to allow access for all themanaged connector outbound IP addressesin the Azure region for your logic app resource.

Create a Consumption logic app resource
In theAzure portal, sign in with your Azure account.
In theAzure portal, sign in with your Azure account.
In the Azure portal search box, enterlogic app, and selectLogic apps.
In the Azure portal search box, enterlogic app, and selectLogic apps.

On theLogic appspage toolbar, selectAdd.TheCreate Logic Apppage appears and shows the following options:PlanDescriptionConsumptionCreates a logic app resource that supports only one workflow that runs in multitenant Azure Logic Apps and uses theConsumption model for billing.StandardCreates a logic app resource that supports multiple workflows. You have the following options:-Workflow Service Plan: Workflows run in single-tenant Azure Logic Apps and use theStandard model for billing.-App Service Environment V3: Workflows run in single-tenant Azure Logic Apps and use anApp Service Environment plan for billing.-Hybrid(Preview): Workflows run on premises and in multiple clouds usingKubernetes Event-driven Autoscaling (KEDA). For more information, seeCreate Standard workflows for hybrid deployment.
On theLogic appspage toolbar, selectAdd.
TheCreate Logic Apppage appears and shows the following options:
On theCreate Logic Apppage, selectConsumption (Multi-tenant).
On theCreate Logic Apppage, selectConsumption (Multi-tenant).
On theBasicstab, provide the following information about your logic app resource:PropertyRequiredValueDescriptionSubscriptionYes<Azure-subscription-name>Your Azure subscription name.This example usesPay-As-You-Go.Resource GroupYes<Azure-resource-group-name>TheAzure resource groupwhere you create your logic app and related resources. This name must be unique across regions and can contain only letters, numbers, hyphens (-), underscores (_), parentheses (()), and periods (.).This example creates a resource group namedConsumption-RG.Logic App nameYes<logic-app-name>Your logic app resource name, which must be unique across regions and can contain only letters, numbers, hyphens (-), underscores (_), parentheses (()), and periods (.).This example creates a logic app resource namedMy-Consumption-Logic-App.RegionYes<Azure-region>The Azure datacenter region for your logic app.This example usesWest US.Enable log analyticsYesNoChange this option only when you want to enable diagnostic logging. For this quickstart, keep the default selection.Note: This option is available only with Consumption logic apps.NoteAvailability zones are automatically enabled for new and existing Consumption logic app workflows inAzure regions that support availability zones.
For more information, seeReliability in Azure FunctionsandProtect logic apps from region failures with zone redundancy and availability zones.After you finish, your settings look similar to the following example:
On theBasicstab, provide the following information about your logic app resource:
Note
Availability zones are automatically enabled for new and existing Consumption logic app workflows inAzure regions that support availability zones.
For more information, seeReliability in Azure FunctionsandProtect logic apps from region failures with zone redundancy and availability zones.
After you finish, your settings look similar to the following example:

When you're ready, selectReview + create. On the validation page that appears, confirm all the provided information, and selectCreate.
When you're ready, selectReview + create. On the validation page that appears, confirm all the provided information, and selectCreate.
After Azure successfully deploys your logic app resource, selectGo to resource. Or, find and select your logic app resource by using the Azure search box.
After Azure successfully deploys your logic app resource, selectGo to resource. Or, find and select your logic app resource by using the Azure search box.


Add the trigger
A workflow always starts with a singletrigger, which specifies the condition to meet before running any subsequent actions in the workflow. Each time the trigger fires, Azure Logic Apps creates and runs a workflow instance. If the trigger doesn't fire, no workflow instance is created or run.
This example uses an RSS trigger that checks an RSS feed, based on the specified schedule. If a new item exists in the feed, the trigger fires, and a new workflow instance is created and run. If multiple new items exist between checks, the trigger fires for each item, and a separate new workflow instance runs for each item. By default, workflow instances that are created at the same time also run at the same time, or concurrently.
On the workflow designer,follow these general steps to add theRSStrigger namedWhen a feed item is published.
On the workflow designer,follow these general steps to add theRSStrigger namedWhen a feed item is published.
In the trigger box, provide the following information:PropertyRequiredValueDescriptionThe RSS feed URLYes<RSS-feed-URL>The RSS feed URL to monitor.This example uses the Wall Street Journal's RSS feed athttps://feeds.content.dowjones.io/public/rss/RSSMarketsMain. However, you can use any RSS feed that doesn't require HTTP authorization. Choose an RSS feed that publishes frequently, so you can easily test your workflow.Chosen Property Will Be Used To Determine Which Items are NewNoPublishDateThe property that determines which items are new.IntervalYes30The number of intervals to wait between feed checks.This example uses30as the interval because this value is theminimum interval for theRSStrigger.FrequencyYesMinuteThe unit of frequency to use for every interval.This example usesMinuteas the frequency.Time ZoneNo<time-zone>The time zone to use for checking the RSS feedStart TimeNo<start-time>The start time to use for checking the RSS feed
In the trigger box, provide the following information:

Save your workflow. On the designer toolbar, selectSave.This step automatically publishes your logic app resource and workflow live in the Azure portal. However, the workflow doesn't do anything yet other than fire the trigger to check the RSS feed, based on the specified schedule. In a later section, you add an action to specify what you want to happen when the trigger fires.
Save your workflow. On the designer toolbar, selectSave.
This step automatically publishes your logic app resource and workflow live in the Azure portal. However, the workflow doesn't do anything yet other than fire the trigger to check the RSS feed, based on the specified schedule. In a later section, you add an action to specify what you want to happen when the trigger fires.
Due to thisRSStrigger's default double-encoding behavior, you have to edit the trigger definition and manually remove this behavior:On thedesignertoolbar, selectCode view.ImportantDon't select theCode viewtab in the trigger information pane. This tab opens code view in read-only mode.In the code editor, find the line"feedUrl": "@{encodeURIComponent(encodeURIComponent('https://feeds.content.dowjones.io/public/rss/RSSMarketsMain'))}".Remove the extra function namedencodeURIComponent()so that you have only one instance, for example:"feedUrl": "@{encodeURIComponent('https://feeds.content.dowjones.io/public/rss/RSSMarketsMain')}"
Due to thisRSStrigger's default double-encoding behavior, you have to edit the trigger definition and manually remove this behavior:
On thedesignertoolbar, selectCode view.ImportantDon't select theCode viewtab in the trigger information pane. This tab opens code view in read-only mode.
On thedesignertoolbar, selectCode view.
Important
Don't select theCode viewtab in the trigger information pane. This tab opens code view in read-only mode.
In the code editor, find the line"feedUrl": "@{encodeURIComponent(encodeURIComponent('https://feeds.content.dowjones.io/public/rss/RSSMarketsMain'))}".
In the code editor, find the line"feedUrl": "@{encodeURIComponent(encodeURIComponent('https://feeds.content.dowjones.io/public/rss/RSSMarketsMain'))}".
"feedUrl": "@{encodeURIComponent(encodeURIComponent('https://feeds.content.dowjones.io/public/rss/RSSMarketsMain'))}"
Remove the extra function namedencodeURIComponent()so that you have only one instance, for example:"feedUrl": "@{encodeURIComponent('https://feeds.content.dowjones.io/public/rss/RSSMarketsMain')}"
Remove the extra function namedencodeURIComponent()so that you have only one instance, for example:
encodeURIComponent()
"feedUrl": "@{encodeURIComponent('https://feeds.content.dowjones.io/public/rss/RSSMarketsMain')}"
"feedUrl": "@{encodeURIComponent('https://feeds.content.dowjones.io/public/rss/RSSMarketsMain')}"
Save the changes that you made. On the code editor toolbar, selectSave.Every time that you save changes to your workflow in the designer or code editor, Azure instantly publishes those changes live in the Azure portal.
Save the changes that you made. On the code editor toolbar, selectSave.
Every time that you save changes to your workflow in the designer or code editor, Azure instantly publishes those changes live in the Azure portal.
Return to the designer. On the code editor toolbar, selectDesigner.
Return to the designer. On the code editor toolbar, selectDesigner.
In the next section, you specify the action to take when the trigger condition is met, which causes the trigger to fire.

Add an action
Following a trigger, anactionis any subsequent step that runs some operation in the workflow. Any action can use the outputs from the previous operations, which include the trigger and any other actions. You can choose from many different actions, include multiple actions up to thelimit per workflow, and even create different action paths.
This example uses an Office 365 Outlook action that sends an email each time that the trigger fires for a new RSS feed item. If multiple new items exist between checks, you receive multiple emails.
On the workflow designer,follow these general steps to add a connector action that you can use to send email, for example:If you have a Microsoft work or school account, add theOffice 365 Outlookconnector action namedSend an email.If you have a personal Microsoft account, add theOutlook.comconnector action namedSend an email.This example continues with theOffice 365 Outlookconnector action namedSend an email.If you use a different supported email service in your workflow, the user interface might look slightly different. However, the basic concepts for connecting to another email service remain the same.
On the workflow designer,follow these general steps to add a connector action that you can use to send email, for example:
If you have a Microsoft work or school account, add theOffice 365 Outlookconnector action namedSend an email.
If you have a personal Microsoft account, add theOutlook.comconnector action namedSend an email.
This example continues with theOffice 365 Outlookconnector action namedSend an email.
If you use a different supported email service in your workflow, the user interface might look slightly different. However, the basic concepts for connecting to another email service remain the same.
If your selected email service prompts you to sign in and authenticate your identity, complete that step now.Many connectors require that you first create a connection and authenticate your identity before you can continue. This example uses manual authentication for connecting to Office 365 Outlook. However, other services might support or use different authentication types. Based on your scenario, you can handle connection authentication in various ways.For more information, see the following documentation:Template parameters for deploymentAuthorize OAuth connectionsAuthenticate access with managed identitiesAuthenticate connections for logic app deployment
If your selected email service prompts you to sign in and authenticate your identity, complete that step now.
Many connectors require that you first create a connection and authenticate your identity before you can continue. This example uses manual authentication for connecting to Office 365 Outlook. However, other services might support or use different authentication types. Based on your scenario, you can handle connection authentication in various ways.
For more information, see the following documentation:
Template parameters for deployment
Authorize OAuth connections
Authenticate access with managed identities
Authenticate connections for logic app deployment
In theSend an emailaction, provide the following information to include in the email.In theTobox, enter the recipient's email address. For this example, use your email address.When you select inside theTobox or other edit boxes, the options to open the dynamic content list (lightning icon) or expression editor (formula icon) appear. The dynamic content list shows any outputs from previous operations that you can select and use as inputs for the current action. The expression editor provides a way for you to use functions and outputs to manipulate data manipulation. You can ignore these options for now. The next step uses the dynamic content list.In theSubjectbox, enter the subject for the email.For this example, include the output from the trigger to show the RSS item's title by following these steps:Enter the following text with a trailing blank space:New RSS item:With the cursor still in theSubjectbox, select the dynamic content list (lightning icon).From the dynamic content list that opens, underWhen a feed item is published, selectFeed title, which is a trigger output that references the title for the RSS item.If no outputs appear available underWhen a feed item is published, selectSee more.After you finish, the email subject looks like the following example:NoteIf you select an output that references an array, the designer automatically adds aFor eachloop around the action that references the output. That way, your workflow processes the array
by performing the same action on each item in the array.To remove the loop, drag the child action outside the loop, then delete the loop.In theBodybox, enter the email content.For this example, include each line of descriptive text, followed by the corresponding outputs from the RSS trigger. To add blank lines in an edit box, press Shift + Enter.Descriptive textPropertyDescriptionTitle:Feed titleThe item's titleDate published:Feed published onThe item's publishing date and timeLink:Primary feed linkThe URL for the item
In theSend an emailaction, provide the following information to include in the email.
In theTobox, enter the recipient's email address. For this example, use your email address.When you select inside theTobox or other edit boxes, the options to open the dynamic content list (lightning icon) or expression editor (formula icon) appear. The dynamic content list shows any outputs from previous operations that you can select and use as inputs for the current action. The expression editor provides a way for you to use functions and outputs to manipulate data manipulation. You can ignore these options for now. The next step uses the dynamic content list.
In theTobox, enter the recipient's email address. For this example, use your email address.
When you select inside theTobox or other edit boxes, the options to open the dynamic content list (lightning icon) or expression editor (formula icon) appear. The dynamic content list shows any outputs from previous operations that you can select and use as inputs for the current action. The expression editor provides a way for you to use functions and outputs to manipulate data manipulation. You can ignore these options for now. The next step uses the dynamic content list.
In theSubjectbox, enter the subject for the email.For this example, include the output from the trigger to show the RSS item's title by following these steps:Enter the following text with a trailing blank space:New RSS item:With the cursor still in theSubjectbox, select the dynamic content list (lightning icon).From the dynamic content list that opens, underWhen a feed item is published, selectFeed title, which is a trigger output that references the title for the RSS item.If no outputs appear available underWhen a feed item is published, selectSee more.After you finish, the email subject looks like the following example:NoteIf you select an output that references an array, the designer automatically adds aFor eachloop around the action that references the output. That way, your workflow processes the array
by performing the same action on each item in the array.To remove the loop, drag the child action outside the loop, then delete the loop.
In theSubjectbox, enter the subject for the email.
For this example, include the output from the trigger to show the RSS item's title by following these steps:
Enter the following text with a trailing blank space:New RSS item:
Enter the following text with a trailing blank space:New RSS item:
New RSS item:
With the cursor still in theSubjectbox, select the dynamic content list (lightning icon).
With the cursor still in theSubjectbox, select the dynamic content list (lightning icon).

From the dynamic content list that opens, underWhen a feed item is published, selectFeed title, which is a trigger output that references the title for the RSS item.If no outputs appear available underWhen a feed item is published, selectSee more.After you finish, the email subject looks like the following example:NoteIf you select an output that references an array, the designer automatically adds aFor eachloop around the action that references the output. That way, your workflow processes the array
by performing the same action on each item in the array.To remove the loop, drag the child action outside the loop, then delete the loop.
From the dynamic content list that opens, underWhen a feed item is published, selectFeed title, which is a trigger output that references the title for the RSS item.

If no outputs appear available underWhen a feed item is published, selectSee more.

After you finish, the email subject looks like the following example:

Note
If you select an output that references an array, the designer automatically adds aFor eachloop around the action that references the output. That way, your workflow processes the array
by performing the same action on each item in the array.
To remove the loop, drag the child action outside the loop, then delete the loop.
In theBodybox, enter the email content.For this example, include each line of descriptive text, followed by the corresponding outputs from the RSS trigger. To add blank lines in an edit box, press Shift + Enter.Descriptive textPropertyDescriptionTitle:Feed titleThe item's titleDate published:Feed published onThe item's publishing date and timeLink:Primary feed linkThe URL for the item
In theBodybox, enter the email content.
For this example, include each line of descriptive text, followed by the corresponding outputs from the RSS trigger. To add blank lines in an edit box, press Shift + Enter.
Title:
Date published:
Link:

Save your workflow. On the designer toolbar, selectSave.
Save your workflow. On the designer toolbar, selectSave.

Test your workflow
To check that the workflow runs correctly, you can either wait for the trigger to fire based on your specified schedule, or you can manually run the workflow.
On the designer toolbar, from theRunmenu, selectRun.
If the RSS feed has new items, your workflow sends an email for each new item. Otherwise, your workflow waits until the next interval to check the RSS feed again.
The following screenshot shows a sample email that the example workflow sends. The email includes the details from each trigger output that you selected plus the descriptive text that you included for each item.

Troubleshoot problems
If you don't receive emails from the workflow as expected:
Check your email account's junk or spam folder, in case the message was incorrectly filtered.
Check your email account's junk or spam folder, in case the message was incorrectly filtered.
Make sure the RSS feed you're using published items since the last scheduled or manual check.
Make sure the RSS feed you're using published items since the last scheduled or manual check.
Clean up resources
When you complete this quickstart, delete the sample logic app resource and any related resources by deleting the resource group that you created for this example.
In the Azure search box, enterresource groups, and selectResource groups.
In the Azure search box, enterresource groups, and selectResource groups.

Find and select your logic app's resource group. On theOverviewpane, selectDelete resource group.
Find and select your logic app's resource group. On theOverviewpane, selectDelete resource group.

When the confirmation pane appears, enter the resource group name, and selectDelete.
When the confirmation pane appears, enter the resource group name, and selectDelete.

Next steps
In this quickstart, you created a Consumption logic app workflow in the Azure portal to check an RSS feed, and send an email for each new item. To learn more about advanced scheduled workflows, see the following tutorial:
Check traffic with a schedule-based logic app workflow
Feedback
Was this page helpful?
Additional resources