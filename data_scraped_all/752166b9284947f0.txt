Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Use Azure RBAC on Azure Arc-enabled Kubernetes clusters
Article
2025-02-26
12 contributors
In this article
You can useMicrosoft Entra IDandAzure role-based access control (Azure RBAC)to control authorization checks on your Azure Arc-enabled Kubernetes cluster. Azure role assignments let you granularly control which users can read, write, and delete Kubernetes objects such as deployment, pod, and service. KubernetesClusterRoleBinding and RoleBindingobject types help to define authorization in Kubernetes natively.
For a conceptual overview of this feature, seeAzure RBAC on Azure Arc-enabled Kubernetes.
Prerequisites
Install or upgrade the Azure CLIto the latest version.
Install or upgrade the Azure CLIto the latest version.
Install the latest version of theconnectedk8sAzure CLI extension:az extension add --name connectedk8sIf theconnectedk8sextension is already installed, you can update it to the latest version by using the following command:az extension update --name connectedk8s
Install the latest version of theconnectedk8sAzure CLI extension:
connectedk8s
az extension add --name connectedk8s
az extension add --name connectedk8s
If theconnectedk8sextension is already installed, you can update it to the latest version by using the following command:
connectedk8s
az extension update --name connectedk8s
az extension update --name connectedk8s
Connect an existing Azure Arc-enabled Kubernetes cluster:If you haven't connected a cluster yet, use ourquickstart.Upgrade your agentsto the latest version.
Connect an existing Azure Arc-enabled Kubernetes cluster:
If you haven't connected a cluster yet, use ourquickstart.
Upgrade your agentsto the latest version.
Note
Azure RBAC isn't supported for Red Hat OpenShift or managed Kubernetes offerings where user access to the API server is restricted (such as Amazon Elastic Kubernetes Service (EKS) or Google Kubernetes Engine (GKE)).
Azure RBAC doesn't currently support Kubernetes clusters operating on Arm64 architecture. For these clusters, useKubernetes RBACto manage access control.
For Azure Kubernetes Service (AKS) clusters, thisfeature is available nativelyand doesn't require the AKS cluster to be connected to Azure Arc.
For Azure Kubernetes Service (AKS) clusters enabled by Azure Arc on Azure Local, version 23H2, Azure RBAC is currently supported only if enabled when the clusters are created. To create an AKS cluster enabled by Azure Arc with Azure RBAC enabled, seeUse Azure RBAC for Kubernetes authorization. Azure RBAC isn't supported for Azure Local, version 22H2.
Enable Azure RBAC on the cluster
Get the cluster MSI identity by running the following command:az connectedk8s show -g <resource-group> -n <connected-cluster-name>
Get the cluster MSI identity by running the following command:
az connectedk8s show -g <resource-group> -n <connected-cluster-name>
az connectedk8s show -g <resource-group> -n <connected-cluster-name>
Get the ID (identity.principalId) from the output and run the following command to assign theConnected Cluster Managed Identity CheckAccess Readerrole to the cluster MSI:az role assignment create --role "Connected Cluster Managed Identity CheckAccess Reader" --assignee "<Cluster MSI ID>" --scope <cluster ARM ID>
Get the ID (identity.principalId) from the output and run the following command to assign theConnected Cluster Managed Identity CheckAccess Readerrole to the cluster MSI:
identity.principalId
az role assignment create --role "Connected Cluster Managed Identity CheckAccess Reader" --assignee "<Cluster MSI ID>" --scope <cluster ARM ID>
az role assignment create --role "Connected Cluster Managed Identity CheckAccess Reader" --assignee "<Cluster MSI ID>" --scope <cluster ARM ID>
Enable Azure role-based access control (RBAC) on your Azure Arc-enabled Kubernetes cluster by running the following command:az connectedk8s enable-features -n <clusterName> -g <resourceGroupName> --features azure-rbacNoteBefore you run theenable-featurescommand, ensure that thekubeconfigfile on the machine points to the cluster on which you want to enable Azure RBAC.Use--skip-azure-rbac-listwith this command for a comma-separated list of usernames, emails, and OpenID connections undergoing authorization checks by using Kubernetes nativeClusterRoleBindingandRoleBindingobjects instead of Azure RBAC.
Enable Azure role-based access control (RBAC) on your Azure Arc-enabled Kubernetes cluster by running the following command:
az connectedk8s enable-features -n <clusterName> -g <resourceGroupName> --features azure-rbac
az connectedk8s enable-features -n <clusterName> -g <resourceGroupName> --features azure-rbac
Note
Before you run theenable-featurescommand, ensure that thekubeconfigfile on the machine points to the cluster on which you want to enable Azure RBAC.
enable-features
kubeconfig
Use--skip-azure-rbac-listwith this command for a comma-separated list of usernames, emails, and OpenID connections undergoing authorization checks by using Kubernetes nativeClusterRoleBindingandRoleBindingobjects instead of Azure RBAC.
--skip-azure-rbac-list
ClusterRoleBinding
RoleBinding
Next, follow the steps in the appropriate section, depending on whether you're using a generic cluster where no reconciler is running on theapiserverspecification, or a cluster created by using Cluster API.
apiserver
Generic cluster where no reconciler is running on theapiserverspecification
apiserver
SSH into every master node of the cluster, then complete the following steps:If yourkube-apiserveris astatic pod:Theazure-arc-guard-manifestssecret in thekube-systemnamespace contains two files:guard-authn-webhook.yamlandguard-authz-webhook.yaml. Copy these files to the/etc/guarddirectory of the node.sudo mkdir -p /etc/guard
kubectl get secrets azure-arc-guard-manifests -n kube-system -o json | jq -r '.data."guard-authn-webhook.yaml"' | base64 -d > /etc/guard/guard-authn-webhook.yaml
kubectl get secrets azure-arc-guard-manifests -n kube-system -o json | jq -r '.data."guard-authz-webhook.yaml"' | base64 -d > /etc/guard/guard-authz-webhook.yamlOpen theapiservermanifest in edit mode:sudo vi /etc/kubernetes/manifests/kube-apiserver.yamlAdd the following specification undervolumes:- hostPath:
    path: /etc/guard
    type: Directory
  name: azure-rbacAdd the following specification undervolumeMounts:- mountPath: /etc/guard
  name: azure-rbac
  readOnly: trueIf yourkube-apiserverisn't a static pod:Open theapiservermanifest in edit mode:sudo vi /etc/kubernetes/manifests/kube-apiserver.yamlAdd the following specification undervolumes:- name: azure-rbac
  secret:
    secretName: azure-arc-guard-manifestsAdd the following specification undervolumeMounts:- mountPath: /etc/guard
  name: azure-rbac
  readOnly: true
SSH into every master node of the cluster, then complete the following steps:
If yourkube-apiserveris astatic pod:
kube-apiserver
Theazure-arc-guard-manifestssecret in thekube-systemnamespace contains two files:guard-authn-webhook.yamlandguard-authz-webhook.yaml. Copy these files to the/etc/guarddirectory of the node.sudo mkdir -p /etc/guard
kubectl get secrets azure-arc-guard-manifests -n kube-system -o json | jq -r '.data."guard-authn-webhook.yaml"' | base64 -d > /etc/guard/guard-authn-webhook.yaml
kubectl get secrets azure-arc-guard-manifests -n kube-system -o json | jq -r '.data."guard-authz-webhook.yaml"' | base64 -d > /etc/guard/guard-authz-webhook.yaml
Theazure-arc-guard-manifestssecret in thekube-systemnamespace contains two files:guard-authn-webhook.yamlandguard-authz-webhook.yaml. Copy these files to the/etc/guarddirectory of the node.
azure-arc-guard-manifests
kube-system
guard-authn-webhook.yaml
guard-authz-webhook.yaml
/etc/guard
sudo mkdir -p /etc/guard
kubectl get secrets azure-arc-guard-manifests -n kube-system -o json | jq -r '.data."guard-authn-webhook.yaml"' | base64 -d > /etc/guard/guard-authn-webhook.yaml
kubectl get secrets azure-arc-guard-manifests -n kube-system -o json | jq -r '.data."guard-authz-webhook.yaml"' | base64 -d > /etc/guard/guard-authz-webhook.yaml
sudo mkdir -p /etc/guard
kubectl get secrets azure-arc-guard-manifests -n kube-system -o json | jq -r '.data."guard-authn-webhook.yaml"' | base64 -d > /etc/guard/guard-authn-webhook.yaml
kubectl get secrets azure-arc-guard-manifests -n kube-system -o json | jq -r '.data."guard-authz-webhook.yaml"' | base64 -d > /etc/guard/guard-authz-webhook.yaml
Open theapiservermanifest in edit mode:sudo vi /etc/kubernetes/manifests/kube-apiserver.yaml
Open theapiservermanifest in edit mode:
apiserver
sudo vi /etc/kubernetes/manifests/kube-apiserver.yaml
sudo vi /etc/kubernetes/manifests/kube-apiserver.yaml
Add the following specification undervolumes:- hostPath:
    path: /etc/guard
    type: Directory
  name: azure-rbac
Add the following specification undervolumes:
volumes
- hostPath:
    path: /etc/guard
    type: Directory
  name: azure-rbac
- hostPath:
    path: /etc/guard
    type: Directory
  name: azure-rbac
Add the following specification undervolumeMounts:- mountPath: /etc/guard
  name: azure-rbac
  readOnly: true
Add the following specification undervolumeMounts:
volumeMounts
- mountPath: /etc/guard
  name: azure-rbac
  readOnly: true
- mountPath: /etc/guard
  name: azure-rbac
  readOnly: true
If yourkube-apiserverisn't a static pod:
kube-apiserver
Open theapiservermanifest in edit mode:sudo vi /etc/kubernetes/manifests/kube-apiserver.yaml
Open theapiservermanifest in edit mode:
apiserver
sudo vi /etc/kubernetes/manifests/kube-apiserver.yaml
sudo vi /etc/kubernetes/manifests/kube-apiserver.yaml
Add the following specification undervolumes:- name: azure-rbac
  secret:
    secretName: azure-arc-guard-manifests
Add the following specification undervolumes:
volumes
- name: azure-rbac
  secret:
    secretName: azure-arc-guard-manifests
- name: azure-rbac
  secret:
    secretName: azure-arc-guard-manifests
Add the following specification undervolumeMounts:- mountPath: /etc/guard
  name: azure-rbac
  readOnly: true
Add the following specification undervolumeMounts:
volumeMounts
- mountPath: /etc/guard
  name: azure-rbac
  readOnly: true
- mountPath: /etc/guard
  name: azure-rbac
  readOnly: true
Add the followingapiserverarguments:- --authentication-token-webhook-config-file=/etc/guard/guard-authn-webhook.yaml
- --authentication-token-webhook-cache-ttl=5m0s
- --authorization-webhook-cache-authorized-ttl=5m0s
- --authorization-webhook-config-file=/etc/guard/guard-authz-webhook.yaml
- --authorization-webhook-version=v1
- --authorization-mode=Node,RBAC,WebhookSet the followingapiserverargument:- --authentication-token-webhook-version=v1
Add the followingapiserverarguments:
apiserver
- --authentication-token-webhook-config-file=/etc/guard/guard-authn-webhook.yaml
- --authentication-token-webhook-cache-ttl=5m0s
- --authorization-webhook-cache-authorized-ttl=5m0s
- --authorization-webhook-config-file=/etc/guard/guard-authz-webhook.yaml
- --authorization-webhook-version=v1
- --authorization-mode=Node,RBAC,Webhook
- --authentication-token-webhook-config-file=/etc/guard/guard-authn-webhook.yaml
- --authentication-token-webhook-cache-ttl=5m0s
- --authorization-webhook-cache-authorized-ttl=5m0s
- --authorization-webhook-config-file=/etc/guard/guard-authz-webhook.yaml
- --authorization-webhook-version=v1
- --authorization-mode=Node,RBAC,Webhook
Set the followingapiserverargument:
apiserver
- --authentication-token-webhook-version=v1
- --authentication-token-webhook-version=v1
Save and close the editor to update theapiserverpod.
Save and close the editor to update theapiserverpod.
apiserver
Cluster created by using Cluster API
Copy the guard secret that contains authentication and authorization webhook configuration files from the workload cluster onto your machine:kubectl get secret azure-arc-guard-manifests -n kube-system -o yaml > azure-arc-guard-manifests.yaml
Copy the guard secret that contains authentication and authorization webhook configuration files from the workload cluster onto your machine:
kubectl get secret azure-arc-guard-manifests -n kube-system -o yaml > azure-arc-guard-manifests.yaml
kubectl get secret azure-arc-guard-manifests -n kube-system -o yaml > azure-arc-guard-manifests.yaml
Change thenamespacefield in theazure-arc-guard-manifests.yamlfile to the namespace within the management cluster where you're applying the custom resources for creation of workload clusters.
Change thenamespacefield in theazure-arc-guard-manifests.yamlfile to the namespace within the management cluster where you're applying the custom resources for creation of workload clusters.
namespace
Apply this manifest:kubectl apply -f azure-arc-guard-manifests.yaml
Apply this manifest:
kubectl apply -f azure-arc-guard-manifests.yaml
kubectl apply -f azure-arc-guard-manifests.yaml
Edit theKubeadmControlPlaneobject by runningkubectl edit kcp <clustername>-control-plane:Add the following specification underfiles:- contentFrom:
    secret:
      key: guard-authn-webhook.yaml
      name: azure-arc-guard-manifests
  owner: root:root
  path: /etc/kubernetes/guard-authn-webhook.yaml
  permissions: "0644"
- contentFrom:
    secret:
      key: guard-authz-webhook.yaml
      name: azure-arc-guard-manifests
  owner: root:root
  path: /etc/kubernetes/guard-authz-webhook.yaml
  permissions: "0644"Add the following specification underapiServer>extraVolumes:- hostPath: /etc/kubernetes/guard-authn-webhook.yaml
  mountPath: /etc/guard/guard-authn-webhook.yaml
  name: guard-authn
  readOnly: true
- hostPath: /etc/kubernetes/guard-authz-webhook.yaml
  mountPath: /etc/guard/guard-authz-webhook.yaml
  name: guard-authz
  readOnly: trueAdd the following specification underapiServer>extraArgs:authentication-token-webhook-cache-ttl: 5m0s
authentication-token-webhook-config-file: /etc/guard/guard-authn-webhook.yaml
authentication-token-webhook-version: v1
authorization-mode: Node,RBAC,Webhook
authorization-webhook-cache-authorized-ttl: 5m0s
authorization-webhook-config-file: /etc/guard/guard-authz-webhook.yaml
authorization-webhook-version: v1Save and close to update theKubeadmControlPlaneobject. Wait for these changes to appear on the workload cluster.
Edit theKubeadmControlPlaneobject by runningkubectl edit kcp <clustername>-control-plane:
KubeadmControlPlane
kubectl edit kcp <clustername>-control-plane
Add the following specification underfiles:- contentFrom:
    secret:
      key: guard-authn-webhook.yaml
      name: azure-arc-guard-manifests
  owner: root:root
  path: /etc/kubernetes/guard-authn-webhook.yaml
  permissions: "0644"
- contentFrom:
    secret:
      key: guard-authz-webhook.yaml
      name: azure-arc-guard-manifests
  owner: root:root
  path: /etc/kubernetes/guard-authz-webhook.yaml
  permissions: "0644"
Add the following specification underfiles:
files
- contentFrom:
    secret:
      key: guard-authn-webhook.yaml
      name: azure-arc-guard-manifests
  owner: root:root
  path: /etc/kubernetes/guard-authn-webhook.yaml
  permissions: "0644"
- contentFrom:
    secret:
      key: guard-authz-webhook.yaml
      name: azure-arc-guard-manifests
  owner: root:root
  path: /etc/kubernetes/guard-authz-webhook.yaml
  permissions: "0644"
- contentFrom:
    secret:
      key: guard-authn-webhook.yaml
      name: azure-arc-guard-manifests
  owner: root:root
  path: /etc/kubernetes/guard-authn-webhook.yaml
  permissions: "0644"
- contentFrom:
    secret:
      key: guard-authz-webhook.yaml
      name: azure-arc-guard-manifests
  owner: root:root
  path: /etc/kubernetes/guard-authz-webhook.yaml
  permissions: "0644"
Add the following specification underapiServer>extraVolumes:- hostPath: /etc/kubernetes/guard-authn-webhook.yaml
  mountPath: /etc/guard/guard-authn-webhook.yaml
  name: guard-authn
  readOnly: true
- hostPath: /etc/kubernetes/guard-authz-webhook.yaml
  mountPath: /etc/guard/guard-authz-webhook.yaml
  name: guard-authz
  readOnly: true
Add the following specification underapiServer>extraVolumes:
apiServer
extraVolumes
- hostPath: /etc/kubernetes/guard-authn-webhook.yaml
  mountPath: /etc/guard/guard-authn-webhook.yaml
  name: guard-authn
  readOnly: true
- hostPath: /etc/kubernetes/guard-authz-webhook.yaml
  mountPath: /etc/guard/guard-authz-webhook.yaml
  name: guard-authz
  readOnly: true
- hostPath: /etc/kubernetes/guard-authn-webhook.yaml
  mountPath: /etc/guard/guard-authn-webhook.yaml
  name: guard-authn
  readOnly: true
- hostPath: /etc/kubernetes/guard-authz-webhook.yaml
  mountPath: /etc/guard/guard-authz-webhook.yaml
  name: guard-authz
  readOnly: true
Add the following specification underapiServer>extraArgs:authentication-token-webhook-cache-ttl: 5m0s
authentication-token-webhook-config-file: /etc/guard/guard-authn-webhook.yaml
authentication-token-webhook-version: v1
authorization-mode: Node,RBAC,Webhook
authorization-webhook-cache-authorized-ttl: 5m0s
authorization-webhook-config-file: /etc/guard/guard-authz-webhook.yaml
authorization-webhook-version: v1
Add the following specification underapiServer>extraArgs:
apiServer
extraArgs
authentication-token-webhook-cache-ttl: 5m0s
authentication-token-webhook-config-file: /etc/guard/guard-authn-webhook.yaml
authentication-token-webhook-version: v1
authorization-mode: Node,RBAC,Webhook
authorization-webhook-cache-authorized-ttl: 5m0s
authorization-webhook-config-file: /etc/guard/guard-authz-webhook.yaml
authorization-webhook-version: v1
authentication-token-webhook-cache-ttl: 5m0s
authentication-token-webhook-config-file: /etc/guard/guard-authn-webhook.yaml
authentication-token-webhook-version: v1
authorization-mode: Node,RBAC,Webhook
authorization-webhook-cache-authorized-ttl: 5m0s
authorization-webhook-config-file: /etc/guard/guard-authz-webhook.yaml
authorization-webhook-version: v1
Save and close to update theKubeadmControlPlaneobject. Wait for these changes to appear on the workload cluster.
Save and close to update theKubeadmControlPlaneobject. Wait for these changes to appear on the workload cluster.
KubeadmControlPlane
Create role assignments for users to access the cluster
Owners of the Azure Arc-enabled Kubernetes resource can use either built-in roles or custom roles to grant other users access to the Kubernetes cluster.
Built-in roles
The following built-in roles provide access to perform common tasks on Kubernetes clusters. These roles can be granted to Microsoft Entra ID users, groups, or service principals.
read
ServiceAccount
ServiceAccount
ServiceAccount
ServiceAccount
RoleBinding
RoleBinding
ClusterRoleBinding
RoleBinding
You can create built-in role assignments scoped to the cluster by using either the Azure portal or the Azure CLI. However, only Azure CLI can be used to create role assignments scoped to namespaces.
To create role assignments scoped to the Azure Arc-enabled Kubernetes cluster in the Azure portal, navigate to the cluster and then selectAccess Control (IAM)from the service menu.
To create role assignments by using Azure CLI, use the following command:
az role assignment create --role "Azure Arc Kubernetes Cluster Admin" --assignee <AZURE-AD-ENTITY-ID> --scope $ARM_ID
az role assignment create --role "Azure Arc Kubernetes Cluster Admin" --assignee <AZURE-AD-ENTITY-ID> --scope $ARM_ID
AZURE-AD-ENTITY-IDcan be a username (for example,testuser@mytenant.onmicrosoft.com) or theappIdvalue of a service principal.
AZURE-AD-ENTITY-ID
testuser@mytenant.onmicrosoft.com
appId
To create a role assignment scoped to a specific namespace within the cluster, modify the scope:
az role assignment create --role "Azure Arc Kubernetes Viewer" --assignee <AZURE-AD-ENTITY-ID> --scope $ARM_ID/namespaces/<namespace-name>
az role assignment create --role "Azure Arc Kubernetes Viewer" --assignee <AZURE-AD-ENTITY-ID> --scope $ARM_ID/namespaces/<namespace-name>
Custom roles
You can choose to create your own role definition for use in role assignments. For more information, seethe full list of data actions that you can use to construct a role definition.
The following example shows a custom role definition that allows a user to read deployments, but provides no other access. The custom role uses one of the data actions and lets you view all deployments in the scope (cluster or namespace) where the role assignment is created.
{
    "Name": "Arc Deployment Viewer",
    "Description": "Lets you view all deployments in cluster/namespace.",
    "Actions": [],
    "NotActions": [],
    "DataActions": [
        "Microsoft.Kubernetes/connectedClusters/apps/deployments/read"
    ],
    "NotDataActions": [],
    "assignableScopes": [
        "/subscriptions/<subscription-id>"
    ]
}
{
    "Name": "Arc Deployment Viewer",
    "Description": "Lets you view all deployments in cluster/namespace.",
    "Actions": [],
    "NotActions": [],
    "DataActions": [
        "Microsoft.Kubernetes/connectedClusters/apps/deployments/read"
    ],
    "NotDataActions": [],
    "assignableScopes": [
        "/subscriptions/<subscription-id>"
    ]
}
To use this role definition, copy the following JSON object into a file calledcustom-role.json. Replace the<subscription-id>placeholder with the actual subscription ID. Then, complete these steps:
<subscription-id>
Create the role definition by running the following command from the folder where you savedcustom-role.json:az role definition create --role-definition @custom-role.json
Create the role definition by running the following command from the folder where you savedcustom-role.json:
az role definition create --role-definition @custom-role.json
az role definition create --role-definition @custom-role.json
Create a role assignment to assign this custom role definition:az role assignment create --role "Arc Deployment Viewer" --assignee <AZURE-AD-ENTITY-ID> --scope $ARM_ID/namespaces/<namespace-name>
Create a role assignment to assign this custom role definition:
az role assignment create --role "Arc Deployment Viewer" --assignee <AZURE-AD-ENTITY-ID> --scope $ARM_ID/namespaces/<namespace-name>
az role assignment create --role "Arc Deployment Viewer" --assignee <AZURE-AD-ENTITY-ID> --scope $ARM_ID/namespaces/<namespace-name>
Configure kubectl with user credentials
There are two ways to get thekubeconfigfile that you need to access the cluster:
Use thecluster connectfeature (az connectedk8s proxy) of the Azure Arc-enabled Kubernetes cluster.
az connectedk8s proxy
The cluster admin can share thekubeconfigfile with every user.
Use cluster connect
Run the following command to start the proxy process:
az connectedk8s proxy -n <clusterName> -g <resourceGroupName>
az connectedk8s proxy -n <clusterName> -g <resourceGroupName>
After the proxy process is running, you can open another tab in your console tostart sending your requests to the cluster.
Use a shared kubeconfig file
Run the following command to set the credentials for the user. SpecifyserverApplicationIdas6256c85f-0aad-4d50-b960-e6e9b21efe35andclientApplicationIdas3f4439ff-e698-4d6d-84fe-09c9d574f06b:kubectl config set-credentials <testuser>@<mytenant.onmicrosoft.com> \
--auth-provider=azure \
--auth-provider-arg=environment=AzurePublicCloud \
--auth-provider-arg=client-id=<clientApplicationId> \
--auth-provider-arg=tenant-id=<tenantId> \
--auth-provider-arg=apiserver-id=<serverApplicationId>
Run the following command to set the credentials for the user. SpecifyserverApplicationIdas6256c85f-0aad-4d50-b960-e6e9b21efe35andclientApplicationIdas3f4439ff-e698-4d6d-84fe-09c9d574f06b:
serverApplicationId
6256c85f-0aad-4d50-b960-e6e9b21efe35
clientApplicationId
3f4439ff-e698-4d6d-84fe-09c9d574f06b
kubectl config set-credentials <testuser>@<mytenant.onmicrosoft.com> \
--auth-provider=azure \
--auth-provider-arg=environment=AzurePublicCloud \
--auth-provider-arg=client-id=<clientApplicationId> \
--auth-provider-arg=tenant-id=<tenantId> \
--auth-provider-arg=apiserver-id=<serverApplicationId>
kubectl config set-credentials <testuser>@<mytenant.onmicrosoft.com> \
--auth-provider=azure \
--auth-provider-arg=environment=AzurePublicCloud \
--auth-provider-arg=client-id=<clientApplicationId> \
--auth-provider-arg=tenant-id=<tenantId> \
--auth-provider-arg=apiserver-id=<serverApplicationId>
Open thekubeconfigfile that you created earlier. Undercontexts, verify that the context associated with the cluster points to the user credentials that you created in the previous step. To set the current context to these user credentials, run the following command:kubectl config set-context --current=true --user=<testuser>@<mytenant.onmicrosoft.com>
Open thekubeconfigfile that you created earlier. Undercontexts, verify that the context associated with the cluster points to the user credentials that you created in the previous step. To set the current context to these user credentials, run the following command:
contexts
kubectl config set-context --current=true --user=<testuser>@<mytenant.onmicrosoft.com>
kubectl config set-context --current=true --user=<testuser>@<mytenant.onmicrosoft.com>
Add theconfig-modesetting underuser>config:name: testuser@mytenant.onmicrosoft.com
user:
    auth-provider:
    config:
        apiserver-id: $SERVER_APP_ID
        client-id: $CLIENT_APP_ID
        environment: AzurePublicCloud
        tenant-id: $TENANT_ID
        config-mode: "1"
    name: azure
Add theconfig-modesetting underuser>config:
user
config
name: testuser@mytenant.onmicrosoft.com
user:
    auth-provider:
    config:
        apiserver-id: $SERVER_APP_ID
        client-id: $CLIENT_APP_ID
        environment: AzurePublicCloud
        tenant-id: $TENANT_ID
        config-mode: "1"
    name: azure
name: testuser@mytenant.onmicrosoft.com
user:
    auth-provider:
    config:
        apiserver-id: $SERVER_APP_ID
        client-id: $CLIENT_APP_ID
        environment: AzurePublicCloud
        tenant-id: $TENANT_ID
        config-mode: "1"
    name: azure
Exec pluginis a Kubernetes authentication strategy that allowskubectlto execute an external command to receive user credentials to send toapiserver. Starting with Kubernetes version 1.26, in order to use the exec plugin to receive user credentials, you must useAzure kubelogin, aclient-gocredential (exec) plugin that implements Azure authentication. To install Azure kubelogin:For Windows or Mac, follow theAzure kubelogin installation instructions.For Linux or Ubuntu, download thelatest version of kubelogin, then run the following commands:curl -LO https://github.com/Azure/kubelogin/releases/download/"$KUBELOGIN_VERSION"/kubelogin-linux-amd64.zip 

unzip kubelogin-linux-amd64.zip 

sudo mv bin/linux_amd64/kubelogin /usr/local/bin/ 

sudo chmod +x /usr/local/bin/kubelogin
Exec pluginis a Kubernetes authentication strategy that allowskubectlto execute an external command to receive user credentials to send toapiserver. Starting with Kubernetes version 1.26, in order to use the exec plugin to receive user credentials, you must useAzure kubelogin, aclient-gocredential (exec) plugin that implements Azure authentication. To install Azure kubelogin:
kubectl
apiserver
client-go
For Windows or Mac, follow theAzure kubelogin installation instructions.
For Windows or Mac, follow theAzure kubelogin installation instructions.
For Linux or Ubuntu, download thelatest version of kubelogin, then run the following commands:curl -LO https://github.com/Azure/kubelogin/releases/download/"$KUBELOGIN_VERSION"/kubelogin-linux-amd64.zip 

unzip kubelogin-linux-amd64.zip 

sudo mv bin/linux_amd64/kubelogin /usr/local/bin/ 

sudo chmod +x /usr/local/bin/kubelogin
For Linux or Ubuntu, download thelatest version of kubelogin, then run the following commands:
curl -LO https://github.com/Azure/kubelogin/releases/download/"$KUBELOGIN_VERSION"/kubelogin-linux-amd64.zip 

unzip kubelogin-linux-amd64.zip 

sudo mv bin/linux_amd64/kubelogin /usr/local/bin/ 

sudo chmod +x /usr/local/bin/kubelogin
curl -LO https://github.com/Azure/kubelogin/releases/download/"$KUBELOGIN_VERSION"/kubelogin-linux-amd64.zip 

unzip kubelogin-linux-amd64.zip 

sudo mv bin/linux_amd64/kubelogin /usr/local/bin/ 

sudo chmod +x /usr/local/bin/kubelogin
Kubelogin can be used to authenticate with Azure Arc-enabled clusters by requesting a proof-of-possession (PoP) token.Convertthe kubeconfig using kubelogin to use the appropriatelogin mode. For example, fordevice code loginwith a Microsoft Entra user, the commands would be as follows:export KUBECONFIG=/path/to/kubeconfig

kubelogin convert-kubeconfig --pop-enabled --pop-claims 'u=<ARM ID of cluster>"
Kubelogin can be used to authenticate with Azure Arc-enabled clusters by requesting a proof-of-possession (PoP) token.Convertthe kubeconfig using kubelogin to use the appropriatelogin mode. For example, fordevice code loginwith a Microsoft Entra user, the commands would be as follows:
export KUBECONFIG=/path/to/kubeconfig

kubelogin convert-kubeconfig --pop-enabled --pop-claims 'u=<ARM ID of cluster>"
export KUBECONFIG=/path/to/kubeconfig

kubelogin convert-kubeconfig --pop-enabled --pop-claims 'u=<ARM ID of cluster>"
Send requests to the cluster
Run anykubectlcommand. For example:kubectl get nodeskubectl get pods
Run anykubectlcommand. For example:
kubectl
kubectl get nodes
kubectl get nodes
kubectl get pods
kubectl get pods
After you're prompted for browser-based authentication, copy the device login URL (https://microsoft.com/devicelogin) and open it in your web browser.
After you're prompted for browser-based authentication, copy the device login URL (https://microsoft.com/devicelogin) and open it in your web browser.
https://microsoft.com/devicelogin
Enter the code printed on your console. Copy and paste the code on your terminal into the prompt for device authentication input.
Enter the code printed on your console. Copy and paste the code on your terminal into the prompt for device authentication input.
Enter the username (testuser@mytenant.onmicrosoft.com) and the associated password.
Enter the username (testuser@mytenant.onmicrosoft.com) and the associated password.
testuser@mytenant.onmicrosoft.com
If you see an error message that says the users doesn't have access to the resource in Azure, it means you're unauthorized to access the requested resource. In this case, an administrator in your Azure tenant needs to create a new role assignment that authorizes this user to have access on the resource.
If you see an error message that says the users doesn't have access to the resource in Azure, it means you're unauthorized to access the requested resource. In this case, an administrator in your Azure tenant needs to create a new role assignment that authorizes this user to have access on the resource.

Use Conditional Access with Microsoft Entra ID
When you're integrating Microsoft Entra ID with your Azure Arc-enabled Kubernetes cluster, you can also useConditional Accessto control access to your cluster.
Note
Microsoft Entra Conditional Accessis a Microsoft Entra ID P2 capability. For more information about Microsoft Entra ID SKUs, see thepricing guide.
To create an example Conditional Access policy to use with the cluster:
At the top of the Azure portal, search for and selectMicrosoft Entra ID.
In the service menu, underManage, selectEnterprise applications.
In the service menu, underSecurity, selectConditional Access.
In the service menu, selectPolicies. Then selectCreate new policy.
Enter a name for the policy, such asarc-k8s-policy.
arc-k8s-policy
UnderAssignments, select the current value underUsers or workload identities. Then, underWhat does this policy apply to?, verify thatUsers and groupsis selected.
UnderInclude, chooseSelect users and groups. Then choose the users and groups where you want to apply the policy. For this example, choose the same Microsoft Entra group that has administrative access to your cluster.
Select the current value underCloud apps or actions. Then, underSelect what this policy applies to, verify thatCloud appsis selected.
UnderInclude, chooseSelect resources. Then search for and select the server application that you created earlier.
UnderAccess controls, select the current value underGrant. Then, selectGrant access.
Check the box forRequire device to be marked as compliant, then selectSelect.
UnderEnable policy, selectOn.
To apply the Conditional Access policy, selectCreate.
Access the cluster again. For example, run thekubectl get nodescommand to view nodes in the cluster:
kubectl get nodes
kubectl get nodes
kubectl get nodes
To confirm that the policy is applied correctly, follow the instructions to sign in again. An error message states that you're successfully logged in, but your admin requires the device that's requesting access to be managed by Microsoft Entra ID in order to access the resource. Follow these steps to view more details:
In the Azure portal, go toMicrosoft Entra ID.
In the service menu, underManage, selectEnterprise applications.
In the service menu, underActivity, selectSign-in logs.
Select the entry at the top that showsFailedforStatusandSuccessforConditional Access. Then, underDetails, selectConditional Access.You'll see the Conditional Access policy that you created, requiring that your device must be compliant.

Configure just-in-time cluster access with Microsoft Entra ID
Another option for cluster access control isPrivileged Identity Management (PIM), which enables a higher level of access for users for just-in-time requests.
Note
Microsoft Entra PIMis a Microsoft Entra ID P2 capability. For more information about Microsoft Entra ID SKUs, see thepricing guide.
To configure just-in-time access requests for a group of users, complete the following steps:
At the top of the Azure portal, search for and selectMicrosoft Entra ID.
At the top of the Azure portal, search for and selectMicrosoft Entra ID.
In the service menu, underManage, selectGroups. Then selectNew group.
In the service menu, underManage, selectGroups. Then selectNew group.
ForGroup type, verify thatSecurityis selected. Enter a group name, such asmyJITGroup. Make any additional selections, then selectCreate.
ForGroup type, verify thatSecurityis selected. Enter a group name, such asmyJITGroup. Make any additional selections, then selectCreate.
myJITGroup

You're brought back to theGroupspage. Search for and select your newly created group.
You're brought back to theGroupspage. Search for and select your newly created group.
In the service menu, underActivity, selectPrivileged Identity Management. Then selectEnable PIM for this group.
In the service menu, underActivity, selectPrivileged Identity Management. Then selectEnable PIM for this group.
SelectAdd assignmentsto begin granting access.
SelectAdd assignmentsto begin granting access.
UnderSelect role, chooseMember. Then select the users and groups to whom you want to grant cluster access. A group admin can modify these assignments at any time. When you're ready to move on, selectNext.
UnderSelect role, chooseMember. Then select the users and groups to whom you want to grant cluster access. A group admin can modify these assignments at any time. When you're ready to move on, selectNext.

Choose an assignment type ofActive, choose the desired duration, and provide a justification. When you're ready to proceed, selectAssign.
Choose an assignment type ofActive, choose the desired duration, and provide a justification. When you're ready to proceed, selectAssign.

For more information about these steps and options, seeAssign eligibility for a group in Privileged Identity Management.
After you've made the assignments, verify that just-in-time access is working by accessing the cluster. For example, use thekubectl get nodescommand to view nodes in the cluster:
kubectl get nodes
kubectl get nodes
kubectl get nodes
Note the authentication requirement and follow the steps to authenticate. If authentication is successful, you should see output similar to this:
To sign in, use a web browser to open the page https://microsoft.com/devicelogin and enter the code AAAAAAAAA to authenticate.

NAME      STATUS   ROLES    AGE      VERSION
node-1    Ready    agent    6m36s    v1.18.14
node-2    Ready    agent    6m42s    v1.18.14
node-3    Ready    agent    6m33s    v1.18.14
To sign in, use a web browser to open the page https://microsoft.com/devicelogin and enter the code AAAAAAAAA to authenticate.

NAME      STATUS   ROLES    AGE      VERSION
node-1    Ready    agent    6m36s    v1.18.14
node-2    Ready    agent    6m42s    v1.18.14
node-3    Ready    agent    6m33s    v1.18.14
Next steps
Read about thearchitecture of Azure RBAC on Arc-enabled Kubernetes.
Securely connect to an Arc-enabled Kubernetes cluster by usingcluster connect.
Feedback
Was this page helpful?
Additional resources