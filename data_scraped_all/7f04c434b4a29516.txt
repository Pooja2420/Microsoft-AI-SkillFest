Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
OpenID Connect on the Microsoft identity platform
Article
2025-01-04
37 contributors
In this article
OpenID Connect (OIDC) extends the OAuth 2.0 authorization protocol for use as another authentication protocol. You can use OIDC to enable single sign-on (SSO) between your OAuth-enabled applications by using a security token called anID token.
The full specification for OIDC is available on the OpenID Foundation's website atOpenID Connect Core 1.0 specification.
Protocol flow: Sign-in
The following diagram shows the basic OpenID Connect sign-in flow. The steps in the flow are described in more detail in later sections of the article.

Enable ID tokens
TheID tokenintroduced by OpenID Connect is issued by the authorization server, the Microsoft identity platform, when the client application requests one during user authentication. The ID token enables a client application to verify the identity of the user and to get other information (claims) about them.
ID tokens aren't issued by default for an application registered with the Microsoft identity platform. ID tokens for an application are enabled by using one of the following methods:
Sign in to theMicrosoft Entra admin center.
Browse toEntra ID>App registrations><your application>>Authentication.
UnderPlatform configurations, selectAdd a platform.
In the pane that opens, select the appropriate platform for your application. For example, selectWebfor a web application.
Under Redirect URIs, add the redirect URI of your application. For example,https://localhost:8080/.
https://localhost:8080/
UnderImplicit grant and hybrid flows, select theID tokens (used for implicit and hybrid flows)checkbox.
Or:
SelectEntra ID>App registrations><your application>>Manifest.
Setoauth2AllowIdTokenImplicitFlowtotruein the app registration'sapplication manifest.
oauth2AllowIdTokenImplicitFlow
true
If ID tokens aren't enabled for your app and one is requested, the Microsoft identity platform returns anunsupported_responseerror similar to:
unsupported_response
The provided value for the input parameter 'response_type' isn't allowed for this client. Expected value is 'code'.
Requesting an ID token by specifying aresponse_typeofid_tokenis explained inSend the sign-in requestlater in the article.
response_type
id_token
Fetch the OpenID configuration document
OpenID providers like the Microsoft identity platform provide anOpenID Provider Configuration Documentat a publicly accessible endpoint containing the provider's OIDC endpoints, supported claims, and other metadata. Client applications can use the metadata to discover the URLs to use for authentication and the authentication service's public signing keys.
Authentication libraries are the most common consumers of the OpenID configuration document, which they use for discovery of authentication URLs, the provider's public signing keys, and other service metadata. If an authentication library is used in your app, you likely won't need to hand-code requests to and responses from the OpenID configuration document endpoint.
Find your app's OpenID configuration document URI
Every app registration in Microsoft Entra ID is provided a publicly accessible endpoint that serves its OpenID configuration document. To determine the URI of the configuration document's endpoint for your app, append thewell-known OpenID configurationpath to your app registration'sauthority URL.
Well-known configuration document path:/.well-known/openid-configuration
/.well-known/openid-configuration
Authority URL:https://login.microsoftonline.com/{tenant}/v2.0
https://login.microsoftonline.com/{tenant}/v2.0
The value of{tenant}varies based on the application's sign-in audience as shown in the following table. The authority URL also varies bycloud instance.
{tenant}
common
organizations
consumers
Directory (tenant) ID
contoso.onmicrosoft.com
Tip
Note that when using thecommonorconsumersauthority for personal Microsoft accounts, the consuming resource application must be configured to support such type of accounts in accordance withsignInAudience.
common
consumers
To find the OIDC configuration document in the Microsoft Entra admin center, sign in to theMicrosoft Entra admin centerand then:
Browse toEntra ID>App registrations><your application>>Endpoints.
Locate the URI underOpenID Connect metadata document.
Sample request
The following request gets the OpenID configuration metadata from thecommonauthority's OpenID configuration document endpoint on the Azure public cloud:
common
GET /common/v2.0/.well-known/openid-configuration
Host: login.microsoftonline.com
GET /common/v2.0/.well-known/openid-configuration
Host: login.microsoftonline.com
Tip
Try it! To see the OpenID configuration document for an application'scommonauthority, navigate tohttps://login.microsoftonline.com/common/v2.0/.well-known/openid-configuration.
common
Sample response
The configuration metadata is returned in JSON format as shown in the following example (truncated for brevity). The metadata returned in the JSON response is described in detail in theOpenID Connect 1.0 discovery specification.
{
  "authorization_endpoint": "https://login.microsoftonline.com/{tenant}/oauth2/v2.0/authorize",
  "token_endpoint": "https://login.microsoftonline.com/{tenant}/oauth2/v2.0/token",
  "token_endpoint_auth_methods_supported": [
    "client_secret_post",
    "private_key_jwt"
  ],
  "jwks_uri": "https://login.microsoftonline.com/{tenant}/discovery/v2.0/keys",
  "userinfo_endpoint": "https://graph.microsoft.com/oidc/userinfo",
  "subject_types_supported": [
      "pairwise"
  ],
  ...
}
{
  "authorization_endpoint": "https://login.microsoftonline.com/{tenant}/oauth2/v2.0/authorize",
  "token_endpoint": "https://login.microsoftonline.com/{tenant}/oauth2/v2.0/token",
  "token_endpoint_auth_methods_supported": [
    "client_secret_post",
    "private_key_jwt"
  ],
  "jwks_uri": "https://login.microsoftonline.com/{tenant}/discovery/v2.0/keys",
  "userinfo_endpoint": "https://graph.microsoft.com/oidc/userinfo",
  "subject_types_supported": [
      "pairwise"
  ],
  ...
}
Send the sign-in request
To authenticate a user and request an ID token for use in your application, direct their user-agent to the Microsoft identity platform's/authorizeendpoint. The request is similar to the first leg of theOAuth 2.0 authorization code flowbut with these distinctions:
Include theopenidscope in thescopeparameter.
openid
scope
Specifyid_tokenin theresponse_typeparameter.
id_token
response_type
Include thenonceparameter.
nonce
Example sign-in request (line breaks included only for readability):
GET https://login.microsoftonline.com/{tenant}/oauth2/v2.0/authorize?
client_id=00001111-aaaa-2222-bbbb-3333cccc4444
&response_type=id_token
&redirect_uri=http%3A%2F%2Flocalhost%2Fmyapp%2F
&response_mode=form_post
&scope=openid
&state=12345
&nonce=678910
GET https://login.microsoftonline.com/{tenant}/oauth2/v2.0/authorize?
client_id=00001111-aaaa-2222-bbbb-3333cccc4444
&response_type=id_token
&redirect_uri=http%3A%2F%2Flocalhost%2Fmyapp%2F
&response_mode=form_post
&scope=openid
&state=12345
&nonce=678910
tenant
{tenant}
common
organizations
consumers
client_id
response_type
id_token
redirect_uri
redirect_uri
scope
openid
nonce
nonce
nonce
response_mode
form_post
fragment
response_mode=form_post
state
prompt
login
none
consent
select_account
prompt=login
prompt=none
login_hint
prompt=consent
select_account
login_hint
select_account
login_hint
login_hint
domain_hint
At this point, the user is prompted to enter their credentials and complete the authentication. The Microsoft identity platform verifies that the user has consented to the permissions indicated in thescopequery parameter. If the user hasn't consented to any of those permissions, the Microsoft identity platform prompts the user to consent to the required permissions. You can read more aboutpermissions, consent, and multitenant apps.
scope
After the user authenticates and grants consent, the Microsoft identity platform returns a response to your app at the indicated redirect URI by using the method specified in theresponse_modeparameter.
response_mode
Successful response
A successful response when you useresponse_mode=form_postis similar to:
response_mode=form_post
POST /myapp/ HTTP/1.1
Host: localhost
Content-Type: application/x-www-form-urlencoded

id_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6Ik1uQ19WWmNB...&state=12345
POST /myapp/ HTTP/1.1
Host: localhost
Content-Type: application/x-www-form-urlencoded

id_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6Ik1uQ19WWmNB...&state=12345
id_token
id_token
state
state
Error response
Error responses might also be sent to the redirect URI so the app can handle them, for example:
POST /myapp/ HTTP/1.1
Host: localhost
Content-Type: application/x-www-form-urlencoded

error=access_denied&error_description=the+user+canceled+the+authentication
POST /myapp/ HTTP/1.1
Host: localhost
Content-Type: application/x-www-form-urlencoded

error=access_denied&error_description=the+user+canceled+the+authentication
error
error_description
Error codes for authorization endpoint errors
The following table describes error codes that can be returned in theerrorparameter of the error response:
error
invalid_request
unauthorized_client
access_denied
unsupported_response_type
server_error
temporarily_unavailable
invalid_resource
Validate the ID token
Receiving an ID token in your app might not always be sufficient to fully authenticate the user. You might also need to validate the ID token's signature and verify its claims per your app's requirements. Like all OpenID providers, the Microsoft identity platform's ID tokens areJSON Web Tokens (JWTs)signed by using public key cryptography.
Web apps and web APIs that use ID tokens for authorization must validate them because such applications get access to data. Other types of application might not benefit from ID token validation, however. Native and single-page applications (SPA), for example, rarely benefit from ID token validation because any entity with physical access to the device or browser can potentially bypass the validation.
Two examples of token validation bypass are:
Providing fake tokens or keys by modifying network traffic to the device
Debugging the application and stepping over the validation logic during program execution.
If you validate ID tokens in your application, we recommendnotdoing so manually. Instead, use a token validation library to parse and validate tokens. Token validation libraries are available for most development languages, frameworks, and platforms.
What to validate in an ID token
In addition to validating ID token's signature, you should validate several of its claims as described inValidating an ID token. Also seeImportant information about signing key-rollover.
Several other validations are common and vary by application scenario, including:
Ensuring the user/organization has signed up for the app.
Ensuring the user has proper authorization/privileges
Ensuring a certain strength of authentication has occurred, such asmultifactor authentication.
Once you've validated the ID token, you can begin a session with the user and use the information in the token's claims for app personalization, display, or for storing their data.
Protocol diagram: Access token acquisition
Many applications need not only to sign in a user, but also access a protected resource like a web API on behalf of the user. This scenario combines OpenID Connect to get an ID token for authenticating the user and OAuth 2.0 to get an access token for a protected resource.
The full OpenID Connect sign-in and token acquisition flow looks similar to this diagram:

Get an access token for the UserInfo endpoint
In addition to the ID token, the authenticated user's information is also made available at the OIDCUserInfo endpoint.
To get an access token for the OIDC UserInfo endpoint, modify the sign-in request as described here:
// Line breaks are for legibility only.

GET https://login.microsoftonline.com/{tenant}/oauth2/v2.0/authorize?
client_id=00001111-aaaa-2222-bbbb-3333cccc4444        // Your app registration's Application (client) ID
&response_type=id_token%20token                       // Requests both an ID token and access token
&redirect_uri=http%3A%2F%2Flocalhost%2Fmyapp%2F       // Your application's redirect URI (URL-encoded)
&response_mode=form_post                              // 'form_post' or 'fragment'
&scope=openid+profile+email                           // 'openid' is required; 'profile' and 'email' provide information in the UserInfo endpoint as they do in an ID token. 
&state=12345                                          // Any value - provided by your app
&nonce=678910                                         // Any value - provided by your app
// Line breaks are for legibility only.

GET https://login.microsoftonline.com/{tenant}/oauth2/v2.0/authorize?
client_id=00001111-aaaa-2222-bbbb-3333cccc4444        // Your app registration's Application (client) ID
&response_type=id_token%20token                       // Requests both an ID token and access token
&redirect_uri=http%3A%2F%2Flocalhost%2Fmyapp%2F       // Your application's redirect URI (URL-encoded)
&response_mode=form_post                              // 'form_post' or 'fragment'
&scope=openid+profile+email                           // 'openid' is required; 'profile' and 'email' provide information in the UserInfo endpoint as they do in an ID token. 
&state=12345                                          // Any value - provided by your app
&nonce=678910                                         // Any value - provided by your app
You can use theauthorization code flow, thedevice code flow, or arefresh tokenin place ofresponse_type=tokento get an access token for your app.
response_type=token
Successful token response
A successful response from usingresponse_mode=form_post:
response_mode=form_post
POST /myapp/ HTTP/1.1
Host: localhost
Content-Type: application/x-www-form-urlencoded
 access_token=eyJ0eXAiOiJKV1QiLCJub25jZSI6I....
 &token_type=Bearer
 &expires_in=3598
 &scope=email+openid+profile
 &id_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI....
 &state=12345
POST /myapp/ HTTP/1.1
Host: localhost
Content-Type: application/x-www-form-urlencoded
 access_token=eyJ0eXAiOiJKV1QiLCJub25jZSI6I....
 &token_type=Bearer
 &expires_in=3598
 &scope=email+openid+profile
 &id_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI....
 &state=12345
Response parameters mean the same thing regardless of the flow used to acquire them.
access_token
token_type
expires_in
scope
scope
User.Read
id_token
state
Warning
Don't attempt to validate or read tokens for any API you don't own, including the tokens in this example, in your code. Tokens for Microsoft services can use a special format that will not validate as a JWT, and may also be encrypted for consumer (Microsoft account) users. While reading tokens is a useful debugging and learning tool, do not take dependencies on this in your code or assume specifics about tokens that aren't for an API you control.
Error response
Error responses might also be sent to the redirect URI so that the app can handle them appropriately:
POST /myapp/ HTTP/1.1
Host: localhost
Content-Type: application/x-www-form-urlencoded

error=access_denied&error_description=the+user+canceled+the+authentication
POST /myapp/ HTTP/1.1
Host: localhost
Content-Type: application/x-www-form-urlencoded

error=access_denied&error_description=the+user+canceled+the+authentication
error
error_description
For a description of possible error codes and recommended client responses, seeError codes for authorization endpoint errors.
When you have an authorization code and an ID token, you can sign the user in and get access tokens on their behalf. To sign the user in, you must validate the ID token as described in thevalidate tokens. To get access tokens, follow the steps described inOAuth code flow documentation.
Calling the UserInfo endpoint
Review theUserInfo documentationto look over how to call the UserInfo endpoint with this token.
Send a sign-out request
To sign out a user, perform both of the following operations:
Redirect the user's user-agent to the Microsoft identity platform's logout URI.
Clear your app's cookies or end the user's session in your application.
If you fail to perform either of these operations, the user may remain authenticated and not be prompted to sign-in the next time they use your app.
Redirect the user-agent to theend_session_endpointas shown in the OpenID Connect configuration document. Theend_session_endpointsupports both HTTP GET and POST requests.
end_session_endpoint
end_session_endpoint
GET https://login.microsoftonline.com/common/oauth2/v2.0/logout?
post_logout_redirect_uri=http%3A%2F%2Flocalhost%2Fmyapp%2F
GET https://login.microsoftonline.com/common/oauth2/v2.0/logout?
post_logout_redirect_uri=http%3A%2F%2Flocalhost%2Fmyapp%2F
post_logout_redirect_uri
logout_hint
logout_hint
login_hint
login_hint
logout_hint
logout_hint
Note
After successful sign-out, the active sessions will be set to inactive. If a valid Primary Refresh Token (PRT) exists for the signed-out user and a new sign-in is executed, single sign-out will be interrupted and user will see a prompt with an account picker. If the option selected is the connected account that refers to the PRT, sign-in will proceed automatically without the need to insert fresh credentials.
Single sign-out
When you redirect the user to theend_session_endpointin an application, the Microsoft identity platform ends the user session for this application. However, the user may still be signed in to other applications that use the same Microsoft accounts for authentication.
end_session_endpoint
When a user has signed into multiple web or SPA applications registered in this directory (also known as a tenant) single sign-out allows this user to sign out of all applications instantly by signing out in either one of the applications.
To enable single sign-out for your Entra application, you should use the OpenID Connect front channel logout feature. This feature allows an application to notify other applications that the user has logged out. When the user logs out of one application, the Microsoft identity platform sends an HTTP GET request to the front-channel logout URL of every application that the user is currently signed in to.
These applications must respond to this request by performing the following two actions for single sign-out to be successful:
Clear any session that identifies the user.
Applications must respond to this request by clearing any session that identifies the user and returning a200response.
200
What is a front channel logout URL?
A front channel logout URL is where your web or SPA application receives the sign out request from the Entra authentication server and performs single sign-out functionality. Each application has one front channel logout URL.
When should you set a front channel logout URL?
If you or your developer has determined single sign-out is required for an application, you must set the front channel logout URL for this applicationâs app registration. Once the front channel logout URL is set for this applicationâs app registration, the Microsoft identity platform sends an HTTP GET request to the front-channel logout URL of this application when the signed in user has signed out of another application.
How to set up single sign out using front channel logout feature
To use the front channel logout feature for a set of applications, you must complete the following two tasks:
Set the front channel logout URL in theMicrosoft Entra admin centerfor all the applications that should be signed out simultaneously. Each application typically has its own dedicated front channel logout URL.
Edit the applications code so that they listen for an HTTP GET request sent by the Microsoft identity platform to the front channel logout URL, and respond to this request by clearing any session that identifies the user and returning a 200 response.
How to choose a front channel logout URL
The front channel logout URL should be a URL that is capable of receiving and responding to HTTP GET requests and should be able to clear any session that identifies the user. Examples of a front channel logout URL could be, but aren't limited to, the following:
https://example.com/frontchannel_logout
https://example.com/frontchannel_logout
https://example.com/signout
https://example.com/signout
https://example.com/logout
https://example.com/logout
Next steps
Review theUserInfo endpoint documentation.
Populate claim values in a tokenwith data from on-premises systems.
Include your own claims in tokens.
Feedback
Was this page helpful?
Additional resources