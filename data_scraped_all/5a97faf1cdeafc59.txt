Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Azure Cosmos DB for MongoDB (4.2 server version): Supported features and syntax
Article
2024-08-22
8 contributors
In this article
APPLIES TO:MongoDB
Azure Cosmos DB is the Microsoft globally distributed multi-model database service. Azure Cosmos DB offersmultiple database APIs. You can communicate with Azure Cosmos DB for MongoDB by using any of the open-source MongoDB clientdrivers. Azure Cosmos DB for MongoDB supports the use of existing client drivers by adhering to the MongoDBwire protocol.
By using Azure Cosmos DB for MongoDB, you can enjoy the benefits of MongoDB that you're used to, with all of the enterprise capabilities that Azure Cosmos DB provides:global distribution,automatic sharding, availability and latency guarantees, encryption at rest, backups, and much more.
Protocol support
The supported operators and any limitations or exceptions are listed in this article. Any client driver that understands these protocols should be able to connect to Azure Cosmos DB for MongoDB. When you create Azure Cosmos DB for MongoDB accounts, the 3.6+ version of accounts has an endpoint in the format*.mongo.cosmos.azure.com. The 3.2 version of accounts has an endpoint in the format*.documents.azure.com.
*.mongo.cosmos.azure.com
*.documents.azure.com
Note
This article lists only the supported server commands, and excludes client-side wrapper functions. Client-side wrapper functions such asdeleteMany()andupdateMany()internally use thedelete()andupdate()server commands. Functions that use supported server commands are compatible with Azure Cosmos DB for MongoDB.
deleteMany()
updateMany()
delete()
update()
Query language support
Azure Cosmos DB for MongoDB provides comprehensive support for MongoDB query language constructs. In the following sections, you can find the detailed list of currently supported operations, operators, stages, commands, and options.
Database commands
Azure Cosmos DB for MongoDB supports the following database commands.
Query and write operation commands
change streams
delete
eval
find
findAndModify
getLastError
getMore
getPrevError
insert
parallelCollectionScan
resetError
update
Transaction commands
Note
Multi-document transactions are supported only within a single non-sharded collection. Cross-collection and cross-shard multi-document transactions are not yet supported in the API for MongoDB.
abortTransaction
commitTransaction
Authentication commands
authenticate
getnonce
logout
Administration commands
cloneCollectionAsCapped
collMod
connectionStatus
convertToCapped
copydb
create
createIndexes
currentOp
drop
dropDatabase
dropIndexes
filemd5
killCursors
killOp
listCollections
listDatabases
listIndexes
reIndex
renameCollection
Diagnostics commands
buildInfo
collStats
connPoolStats
connectionStatus
dataSize
dbHash
dbStats
explain
features
hello
hostInfo
listDatabases
listCommands
profiler
serverStatus
top
whatsmyuri

Aggregation pipeline
Azure Cosmos DB for MongoDB supports the following aggregation commands.
Aggregation commands
aggregate
count
distinct
mapReduce
Aggregation stages
addFields
bucket
bucketAuto
changeStream
collStats
count
currentOp
facet
geoNear
graphLookup
group
indexStats
limit
listLocalSessions
listSessions
lookup
match
merge
out
planCacheStats
project
redact
regexFind
regexFindAll
regexMatch
replaceRoot
replaceWith
sample
set
skip
sort
sortByCount
unset
unwind
Note
The$lookupaggregation does not yet support theuncorrelated subqueriesfeature that's introduced in server version 3.6. If you attempt to use the$lookupoperator with theletandpipelinefields, an error message that indicates thatletis not supportedappears.
$lookup
$lookup
let
pipeline
let
Boolean expressions
and
not
or
Conversion expressions
convert
toBool
toDate
toDecimal
toDouble
toInt
toLong
toObjectId
toString
Set expressions
setEquals
setIntersection
setUnion
setDifference
setIsSubset
anyElementTrue
allElementsTrue
Comparison expressions
Note
The API for MongoDB does not support comparison expressions that have an array literal in the query.
cmp
eq
gt
gte
lt
lte
ne
in
nin
Arithmetic expressions
abs
add
ceil
divide
exp
floor
ln
log
log10
mod
multiply
pow
round
sqrt
subtract
trunc
Trigonometry expressions
acos
acosh
asin
asinh
atan
atan2
atanh
cos
cosh
degreesToRadians
radiansToDegrees
sin
sinh
tan
tanh
String expressions
concat
indexOfBytes
indexOfCP
ltrim
rtrim
trim
split
strLenBytes
strLenCP
strcasecmp
substr
substrBytes
substrCP
toLower
toUpper
Text search operator
meta
Array expressions
arrayElemAt
arrayToObject
concatArrays
filter
indexOfArray
isArray
objectToArray
range
reverseArray
reduce
size
slice
zip
in
Variable operators
map
let
System variables
$$CLUSTERTIME
$$CURRENT
$$DESCEND
$$KEEP
$$NOW
$$PRUNE
$$REMOVE
$$ROOT
Literal operator
literal
Date expressions
dayOfYear
dayOfMonth
dayOfWeek
year
month
week
hour
minute
second
millisecond
dateToString
isoDayOfWeek
isoWeek
dateFromParts
dateToParts
dateFromString
isoWeekYear
Conditional expressions
cond
ifNull
switch
Data type operator
type
Accumulator expressions
sum
avg
first
last
max
min
push
addToSet
stdDevPop
stdDevSamp
Merge operator
mergeObjects
Data types
Azure Cosmos DB for MongoDB supports documents that are encoded in MongoDB BSON format. Versions 4.0 and later (4.0+) enhance the internal usage of this format to improve performance and reduce costs. Documents that are written or updated through an endpoint running 4.0+ benefit from this optimization.
In anupgrade scenario, documents that were written prior to the upgrade to version 4.0+ won't benefit from the enhanced performance until they're updated via a write operation through the 4.0+ endpoint.
16-MB document support raises the size limit for your documents from 2 MB to 16 MB. This limit applies only to collections that are created after this feature is enabled. When this feature is enabled for your database account, it can't be disabled.
To enable 16-MB document support, change the setting on theFeaturestab for the resource in the Azure portal or programmaticallyadd theEnableMongo16MBDocumentSupportcapability.
EnableMongo16MBDocumentSupport
We recommend that you enable Server Side Retry and avoid using wildcard indexes to ensure that requests in larger documents succeed. Raising your database or collection request units might also help performance.
Double
String
Object
Array
Binary Data
ObjectId
Boolean
Date
Null
32-bit Integer (int)
Timestamp
64-bit Integer (long)
MinKey
MaxKey
Decimal128
Regular Expression
JavaScript
JavaScript (with scope)
Undefined
Indexes and index properties
Azure Cosmos DB for MongoDB supports the following index commands and index properties.
Indexes
Single Field Index
Compound Index
Multikey Index
Text Index
2dsphere
2d Index
Hashed Index
Index properties
TTL
Unique
Partial
Case Insensitive
Sparse
Background
Operators
Azure Cosmos DB for MongoDB supports the following operators.
Logical operators
or
and
not
nor
Element operators
exists
type
Evaluation query operators
expr
jsonSchema
mod
regex
text
$regex
where
In$regexqueries, left-anchored expressions allow index search. However, using theimodifier (case-insensitivity) and themmodifier (multiline) causes the collection to scan in all expressions.
$regex
i
m
When there's a need to include$or|, it's best to create two (or more)$regexqueries.
$
|
$regex
For example, change the following original query:
find({x:{$regex: /^abc$/})
find({x:{$regex: /^abc$/})
To this query:
find({x:{$regex: /^abc/, x:{$regex:/^abc$/}})
find({x:{$regex: /^abc/, x:{$regex:/^abc$/}})
The first part of the modified query uses the index to restrict the search to documents that begin with^abc. The second part of the query matches the exact entries. The bar operator (|) acts as an "or" function. The queryfind({x:{$regex: /^abc |^def/})matches the documents in which fieldxhas values that begin withabcordef. To use the index, we recommend that you break the query into two different queries that are joined by the$oroperator:find( {$or : [{x: $regex: /^abc/}, {$regex: /^def/}] }).
^abc
|
find({x:{$regex: /^abc |^def/})
x
abc
def
$or
find( {$or : [{x: $regex: /^abc/}, {$regex: /^def/}] })
Array operators
all
elemMatch
size
Comment operator
comment
Projection operators
elemMatch
meta
slice
Update operators
inc
mul
rename
setOnInsert
set
unset
min
max
currentDate
$
$[]
$[\<identifier\>]
addToSet
pop
pullAll
pull
push
pushAll
each
slice
sort
position
bit
bitsAllSet
bitsAnySet
bitsAllClear
bitsAnyClear
Geospatial operators
$geoWithin
$geoIntersects
$near
$nearSphere
$geometry
$minDistance
$maxDistance
$center
$centerSphere
$box
$polygon
Sort operations
When you use thefindOneAndUpdateoperation, sort operations on a single field are supported. Sort operations on multiple fields aren't supported.
findOneAndUpdate
Indexing
The API for MongoDBsupports various indexesto enable sorting on multiple fields, improve query performance, and enforce uniqueness.
Client-side field-level encryption
Client-level field encryption is a driver feature and is compatible with the API for MongoDB. Explicit encryption, in which the driver explicitly encrypts each field when it's written, is supported. Automatic encryption isn't supported. Explicit decryption and automatic decryption is supported.
Themongocryptdshouldn't be run because it isn't needed to perform any of the supported operations.
mongocryptd
GridFS
Azure Cosmos DB supports GridFS through any GridFS-compatible Mongo driver.
Replication
Azure Cosmos DB supports automatic, native replication at the lowest layers. This logic is also extended to achieve low-latency, global replication. Azure Cosmos DB doesn't support manual replication commands.
Retryable writes
The retryable writes feature enables MongoDB drivers to automatically retry certain write operations. The feature results in more stringent requirements for certain operations, which match MongoDB protocol requirements. With this feature enabled, update operations, including deletes, in sharded collections require the shard key to be included in the query filter or update statement.
For example, with a sharded collection that's sharded on the"country"key, to delete all the documents that have the field"city" = "NYC", the application needs to execute the operation for all shard key ("country") values if the retryable writes feature is enabled.
"country"
"city" = "NYC"
"country"
db.coll.deleteMany({"country": "USA", "city": "NYC"})-Success
db.coll.deleteMany({"country": "USA", "city": "NYC"})
db.coll.deleteMany({"city": "NYC"})- Fails with errorShardKeyNotFound(61)
db.coll.deleteMany({"city": "NYC"})
Note
Retryable writes does not support bulk unordered writes at this time. If you want to perform bulk writes with retryable writes enabled, perform bulk ordered writes.
To enable the feature,add the EnableMongoRetryableWrites capabilityto your database account. This feature can also be enabled on theFeaturestab in the Azure portal.
Sharding
Azure Cosmos DB supports automatic, server-side sharding. It automatically manages shard creation, placement, and balancing. Azure Cosmos DB doesn't support manual sharding commands, which means that you don't have to invoke commands likeaddShard,balancerStart, andmoveChunk. You need to specify the shard key only when you create the containers or query the data.
addShard
balancerStart
moveChunk
Sessions
Azure Cosmos DB doesn't yet support server-side sessions commands.
Time to Live
Azure Cosmos DB supports a Time to Live (TTL) that's based on the time stamp of the document. You can enable TTL for a collection in theAzure portal.
Custom TTL
This feature provides the ability to set a custom TTL on any one field in a collection.
On a collection that has TTL enabled on a field:
Acceptable types are the BSON data type and numeric types (integer, long, or double), which will be interpreted as a Unix millisecond time stamp to determine expiration.
Acceptable types are the BSON data type and numeric types (integer, long, or double), which will be interpreted as a Unix millisecond time stamp to determine expiration.
If the TTL field is an array, then the smallest element of the array that is of an acceptable type is considered for document expiry.
If the TTL field is an array, then the smallest element of the array that is of an acceptable type is considered for document expiry.
If the TTL field is missing from a document, the document doesnât expire.
If the TTL field is missing from a document, the document doesnât expire.
If the TTL field isn't an acceptable type, the document doesn't expire.
If the TTL field isn't an acceptable type, the document doesn't expire.
Only one field in a collection can have a TTL set on it.
Only one field in a collection can have a TTL set on it.
With a custom TTL field set, the\_tsfield can't be used for document expiration.
With a custom TTL field set, the\_tsfield can't be used for document expiration.
\_ts
You can't use the\_tsfield in addition.
You can't use the\_tsfield in addition.
\_ts
You can enable a custom TTL by updating theEnableTtlOnCustomPathcapability for the account. Learnhow to configure capabilities.
EnableTtlOnCustomPath
Set up the TTL
To set up the TTL, run this command:db.coll.createIndex({"YOUR_CUSTOM_TTL_FIELD":1}, {expireAfterSeconds: 10})
db.coll.createIndex({"YOUR_CUSTOM_TTL_FIELD":1}, {expireAfterSeconds: 10})
Transactions
Multi-document transactions are supported within an unsharded collection. Multi-document transactions aren't supported across collections or in sharded collections. The timeout for transactions is a fixed 5 seconds.
Manage users and roles
Azure Cosmos DB doesn't yet support users and roles. However, Azure Cosmos DB supports Azure role-based access control (Azure RBAC) and read-write and read-only passwords and keys that can be obtained through theAzure portal(on theConnection Stringspage).
Write concerns
Some applications rely on awrite concern, which specifies the number of responses that are required during a write operation. Due to how Azure Cosmos DB handles replication in the background, all writes are automatically Quorum by default. Any write concern that's specified by the client code is ignored. Learn how touse consistency levels to maximize availability and performance.
Next steps
Learn how touse Studio 3Twith Azure Cosmos DB for MongoDB.
Learn how touse Robo 3Twith Azure Cosmos DB for MongoDB.
Explore MongoDBsampleswith Azure Cosmos DB for MongoDB.
Trying to do capacity planning for a migration to Azure Cosmos DB? You can use information about your existing database cluster for capacity planning.If all you know is the number of vCores and servers in your existing database cluster, read aboutestimating request units by using vCores or vCPUs.If you know typical request rates for your current database workload, read aboutestimating request units by using the Azure Cosmos DB capacity planner.
If all you know is the number of vCores and servers in your existing database cluster, read aboutestimating request units by using vCores or vCPUs.
If you know typical request rates for your current database workload, read aboutestimating request units by using the Azure Cosmos DB capacity planner.
Feedback
Was this page helpful?
Additional resources