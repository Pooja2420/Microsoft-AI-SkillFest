Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
What is the Databricks CLI?
Article
2025-03-25
8 contributors
In this article
Note
This information applies to Databricks CLI versions 0.205 and above. The Databricks CLI is inPublic Preview.
Databricks CLI use is subject to theDatabricks LicenseandDatabricks Privacy Notice, including any Usage Data provisions.
TheDatabricks CLI(command-line interface) allows you to interact with the Azure Databricks platform from your local terminal or automation scripts. You can also run Databricks CLI commands from within a Databricks workspace using web terminal. SeeRun shell commands in Azure Databricks web terminal.
To install and configure authentication for the Databricks CLI, seeInstall or update the Databricks CLIandAuthentication for the Databricks CLI.
Tip
The Databricks CLI source is publicly available in thedatabricks/cli GitHub repository.
Information for legacy Databricks CLI users
Databricks plans no support or new feature work for the legacy Databricks CLI.
For more information about the legacy Databricks CLI, seeDatabricks CLI (legacy).
To migrate from Databricks CLI version 0.18 or below to Databricks CLI version 0.205 or above, seeDatabricks CLI migration.
How does the Databricks CLI work?
The CLI wraps the Databricks REST API, which provides endpoints for modifying or requesting information about Azure Databricks account and workspace objects. See theAzure Databricks REST API reference.
For example, to print information about an individual cluster in a workspace, you run the CLI as follows:
databricks clusters get 1234-567890-a12bcde3
databricks clusters get 1234-567890-a12bcde3
Withcurl, the equivalent operation is as follows:
curl
curl --request GET "https://${DATABRICKS_HOST}/api/2.0/clusters/get" \
     --header "Authorization: Bearer ${DATABRICKS_TOKEN}" \
     --data '{ "cluster_id": "1234-567890-a12bcde3" }'
curl --request GET "https://${DATABRICKS_HOST}/api/2.0/clusters/get" \
     --header "Authorization: Bearer ${DATABRICKS_TOKEN}" \
     --data '{ "cluster_id": "1234-567890-a12bcde3" }'
Example: create an Azure Databricks job
The following example uses the CLI to create an Azure Databricks job. This job contains a single job task. This task runs the specified Azure Databricks notebook. This notebook has a dependency on a specific version of the PyPI package namedwheel. To run this task, the job temporarily creates a job cluster that exports an environment variable namedPYSPARK_PYTHON. After the job runs, the cluster is terminated.
wheel
PYSPARK_PYTHON
databricks jobs create --json '{
  "name": "My hello notebook job",
  "tasks": [
    {
      "task_key": "my_hello_notebook_task",
      "notebook_task": {
        "notebook_path": "/Workspace/Users/someone@example.com/hello",
        "source": "WORKSPACE"
      },
      "libraries": [
        {
          "pypi": {
            "package": "wheel==0.41.2"
          }
        }
      ],
      "new_cluster": {
        "spark_version": "13.3.x-scala2.12",
        "node_type_id": "Standard_DS3_v2",
        "num_workers": 1,
        "spark_env_vars": {
          "PYSPARK_PYTHON": "/databricks/python3/bin/python3"
        }
      }
    }
  ]
}'
databricks jobs create --json '{
  "name": "My hello notebook job",
  "tasks": [
    {
      "task_key": "my_hello_notebook_task",
      "notebook_task": {
        "notebook_path": "/Workspace/Users/someone@example.com/hello",
        "source": "WORKSPACE"
      },
      "libraries": [
        {
          "pypi": {
            "package": "wheel==0.41.2"
          }
        }
      ],
      "new_cluster": {
        "spark_version": "13.3.x-scala2.12",
        "node_type_id": "Standard_DS3_v2",
        "num_workers": 1,
        "spark_env_vars": {
          "PYSPARK_PYTHON": "/databricks/python3/bin/python3"
        }
      }
    }
  ]
}'
Next steps
To install the CLI and configure authentication to quickly get started, seeDatabricks CLI tutorial.
To skip the tutorial and just install the CLI, seeInstall or update the Databricks CLI.
To learn about all available authentication types between the CLI and your Azure Databricks accounts and workspaces, seeAuthentication for the Databricks CLI.
To use configuration profiles to quickly switch between related groups of CLI settings, seeConfiguration profiles for the Databricks CLI.
To learn about basic usage for the CLI, seeBasic usage for the Databricks CLI.
For a list of all available CLI commands, seeDatabricks CLI commands.
Feedback
Was this page helpful?
Additional resources