Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Publish and download build artifacts
Article
2025-03-10
16 contributors
In this article
Azure DevOps Services | Azure DevOps Server 2022 - Azure DevOps Server 2019
Note
We recommend usingDownload Pipeline ArtifactsandPublish Pipeline Artifactsfor faster performance.
Azure Artifacts enables teams to use feeds and upstream sources to manage their dependencies. You can use Azure Pipelines to publish and download different types of artifacts as part of your CI/CD workflow.
Publish artifacts
Artifacts can be published at any stage of your pipeline. You can use YAML or the classic Azure DevOps editor to publish your packages.
YAML
Classic
- powershell: gci env:* | sort-object name | Format-Table -AutoSize | Out-File $env:BUILD_ARTIFACTSTAGINGDIRECTORY/environment-variables.txt

- task: CopyFiles@2
  inputs:
    sourceFolder: '$(Build.SourcesDirectory)'
    contents: '**/$(BuildConfiguration)/**/?(*.exe|*.dll|*.pdb)'
    targetFolder: '$(Build.ArtifactStagingDirectory)'
- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: drop
- powershell: gci env:* | sort-object name | Format-Table -AutoSize | Out-File $env:BUILD_ARTIFACTSTAGINGDIRECTORY/environment-variables.txt

- task: CopyFiles@2
  inputs:
    sourceFolder: '$(Build.SourcesDirectory)'
    contents: '**/$(BuildConfiguration)/**/?(*.exe|*.dll|*.pdb)'
    targetFolder: '$(Build.ArtifactStagingDirectory)'
- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: drop
pathToPublish: the path of your artifact. This can be an absolute or a relative path. Wildcards aren't supported.
artifactName: the name of your artifact.
Note
Make sure you aren't using one of the reserved folder names when publishing your artifact. SeeApplication Foldersfor more details.
Add thePublish Build Artifactstask to your pipeline and fill out the required fields. Make sure your file is at the root of your repository.

Example: Use multiple tasks
YAML
Classic
- powershell: gci env:* | sort-object name | Format-Table -AutoSize | Out-File $env:BUILD_ARTIFACTSTAGINGDIRECTORY/environment-variables.txt

- task: CopyFiles@2
  inputs:
    sourceFolder: '$(Build.SourcesDirectory)'
    contents: '**/$(BuildConfiguration)/**/?(*.exe|*.dll|*.pdb)'
    targetFolder: '$(Build.ArtifactStagingDirectory)'
- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: drop1
- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: drop2
- powershell: gci env:* | sort-object name | Format-Table -AutoSize | Out-File $env:BUILD_ARTIFACTSTAGINGDIRECTORY/environment-variables.txt

- task: CopyFiles@2
  inputs:
    sourceFolder: '$(Build.SourcesDirectory)'
    contents: '**/$(BuildConfiguration)/**/?(*.exe|*.dll|*.pdb)'
    targetFolder: '$(Build.ArtifactStagingDirectory)'
- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: drop1
- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: drop2
pathToPublish: the path of your artifact. This can be an absolute or a relative path. Wildcards aren't supported.
artifactName: the name of your artifact.
You can add multiplePublish Build Artifactstasks to your pipelines. Make sure your file is at the root of your repository.

Example: Copy and publish binaries
YAML
Classic
- powershell: gci env:* | sort-object name | Format-Table -AutoSize | Out-File $env:BUILD_ARTIFACTSTAGINGDIRECTORY/environment-variables.txt

- task: CopyFiles@2
  inputs:
    sourceFolder: '$(Build.SourcesDirectory)'
    contents: '**/$(BuildConfiguration)/**/?(*.exe|*.dll|*.pdb)'
    targetFolder: '$(Build.ArtifactStagingDirectory)'
- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: drop
- powershell: gci env:* | sort-object name | Format-Table -AutoSize | Out-File $env:BUILD_ARTIFACTSTAGINGDIRECTORY/environment-variables.txt

- task: CopyFiles@2
  inputs:
    sourceFolder: '$(Build.SourcesDirectory)'
    contents: '**/$(BuildConfiguration)/**/?(*.exe|*.dll|*.pdb)'
    targetFolder: '$(Build.ArtifactStagingDirectory)'
- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: drop
sourceFolder: the folder that contains the files you want to copy. If you leave this empty, copying will be done from$(Build.SourcesDirectory).
contents: File paths to include as part of the copy.
targetFolder: destination folder.
pathToPublish: the folder or file path to publish. It can be an absolute or a relative path. Wildcards aren't supported.
artifactName: the name of the artifact that you want to create.
Note
Make sure not to use reserved name forartifactNamesuch asBinorApp_Data. SeeASP.NET Web Project Folder Structurefor more details.
Utility: Copy Files
Source folder: $(Build.SourcesDirectory)
Source folder: $(Build.SourcesDirectory)
Contents: /$(BuildConfiguration)//?(.exe|.dll|*.pdb)
Contents: /$(BuildConfiguration)//?(.exe|.dll|*.pdb)
Target folder: $(Build.ArtifactStagingDirectory)
Target folder: $(Build.ArtifactStagingDirectory)
Utility: Publish Build Artifacts
Path to publish: $(Build.ArtifactStagingDirectory)
Path to publish: $(Build.ArtifactStagingDirectory)
Artifact name: drop
Artifact name: drop
Note
Build.ArtifactStagingDirectorypath is cleaned up after each build. If you're using this path to publish your artifact, make sure you copy the content you wish to publish into this directory before the publishing step.
Build.ArtifactStagingDirectory
Download artifacts
YAML
Classic
- powershell: gci env:* | sort-object name | Format-Table -AutoSize | Out-File $env:BUILD_ARTIFACTSTAGINGDIRECTORY/environment-variables.txt

- task: DownloadBuildArtifacts@0
  inputs:
    buildType: 'current'
    downloadType: 'single'
    artifactName: 'drop'
    downloadPath: '$(System.ArtifactsDirectory)'
- powershell: gci env:* | sort-object name | Format-Table -AutoSize | Out-File $env:BUILD_ARTIFACTSTAGINGDIRECTORY/environment-variables.txt

- task: DownloadBuildArtifacts@0
  inputs:
    buildType: 'current'
    downloadType: 'single'
    artifactName: 'drop'
    downloadPath: '$(System.ArtifactsDirectory)'
buildType: specify which build artifacts will be downloaded:current(the default value) or from a specific build.
current
downloadType: choose whether to download a single artifact or all artifacts of a specific build.
artifactName: the name of the artifact that will be downloaded.
downloadPath: path on the agent machine where the artifacts will be downloaded.
Utility: Download Build Artifacts
Download artifacts produced by: Current build
Download artifacts produced by: Current build
Download type: Specific artifact
Download type: Specific artifact
Artifact name: drop
Artifact name: drop
Destination directory: $(System.ArtifactsDirectory)
Destination directory: $(System.ArtifactsDirectory)
Note
If you're using a deployment task, you can reference your build artifacts using$(Agent.BuildDirectory). SeeAgent variablesfor more details.
When your pipeline run is completed, navigate toSummaryto explore or download your artifact.

Download a specific artifact
YAML
Classic
steps:
- task: DownloadBuildArtifacts@1
  displayName: 'Download Build Artifacts'
  inputs:
    buildType: specific
    project: 'xxxxxxxxxx-xxxx-xxxx-xxxxxxxxxxx'
    pipeline: 20
    buildVersionToDownload: specific
    buildId: 128
    artifactName: drop
    extractTars: false
steps:
- task: DownloadBuildArtifacts@1
  displayName: 'Download Build Artifacts'
  inputs:
    buildType: specific
    project: 'xxxxxxxxxx-xxxx-xxxx-xxxxxxxxxxx'
    pipeline: 20
    buildVersionToDownload: specific
    buildId: 128
    artifactName: drop
    extractTars: false
Add theDownload Build Artifactstask to your pipeline definition and configure it as follows:

Download artifacts produced by: Specific build.
Download artifacts produced by: Specific build.
Project: select your project from the dropdown menu.
Project: select your project from the dropdown menu.
Build pipeline: select your build pipeline.
Build pipeline: select your build pipeline.
Build version to download: select specific version.
Build version to download: select specific version.
Build: select your build from the dropdown menu.
Build: select your build from the dropdown menu.
Download type: specific artifact.
Download type: specific artifact.
Artifact name: select your artifact from the dropdown menu.
Artifact name: select your artifact from the dropdown menu.
Destination directory: default $(System.ArtifactsDirectory).
Destination directory: default $(System.ArtifactsDirectory).
Tips
Disable IIS Basic Authentication if you're using Azure DevOps Server to allow authentication with your Personal Access Token. For more information, seeWhy did my PAT stop working?.
Disable IIS Basic Authentication if you're using Azure DevOps Server to allow authentication with your Personal Access Token. For more information, seeWhy did my PAT stop working?.
Use forward slashes in file path arguments. Backslashes don't work in macOS/Linux agents.
Use forward slashes in file path arguments. Backslashes don't work in macOS/Linux agents.
Build artifacts are stored on a Windows filesystem, which causes all UNIX permissions to be lost, including the execution bit. You might need to restore the correct UNIX permissions after downloading your artifacts from Azure Pipelines.
Build artifacts are stored on a Windows filesystem, which causes all UNIX permissions to be lost, including the execution bit. You might need to restore the correct UNIX permissions after downloading your artifacts from Azure Pipelines.
Build.ArtifactStagingDirectoryandBuild.StagingDirectoryare interchangeable.
Build.ArtifactStagingDirectoryandBuild.StagingDirectoryare interchangeable.
Build.ArtifactStagingDirectory
Build.StagingDirectory
Build.ArtifactStagingDirectorypath is cleaned up after each build.
Build.ArtifactStagingDirectorypath is cleaned up after each build.
Build.ArtifactStagingDirectory
Deleting a build associated with packages published to a file share will result in the deletion of all Artifacts in that UNC path.
Deleting a build associated with packages published to a file share will result in the deletion of all Artifacts in that UNC path.
If you're publishing your packages to a file share, make sure you provide access to the build agent.
If you're publishing your packages to a file share, make sure you provide access to the build agent.
Make sure you allowAzure Artifacts Domain URLs and IP addressesif your organization is using a firewall.
Make sure you allowAzure Artifacts Domain URLs and IP addressesif your organization is using a firewall.
Related articles
Publish and download artifacts in Azure Pipelines
Define your multi-stage classic pipeline
How to mitigate risk when using private package feeds
Feedback
Was this page helpful?
Additional resources