Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
AzureFunctionApp@2 - Azure Functions Deploy v2 task
Article
2025-03-28
3 contributors
In this article
Update a function app with .NET, Python, JavaScript, PowerShell, Java based web applications.
Syntax
# Azure Functions Deploy v2
# Update a function app with .NET, Python, JavaScript, PowerShell, Java based web applications.
- task: AzureFunctionApp@2
  inputs:
    connectedServiceNameARM: # string. Alias: azureSubscription. Required. Azure Resource Manager connection. 
    appType: # 'functionApp' | 'functionAppLinux'. Required. App type. 
    #isFlexConsumption: false # boolean. Is Function App on Flex Consumption Plan. Default: false.
    appName: # string. Required. Azure Functions App name. 
    #deployToSlotOrASE: false # boolean. Optional. Use when appType != "" && isFlexConsumption = false. Deploy to Slot or App Service Environment. Default: false.
    #resourceGroupName: # string. Required when deployToSlotOrASE = true. Resource group. 
    #slotName: 'production' # string. Required when deployToSlotOrASE = true. Slot. Default: production.
    package: '$(System.DefaultWorkingDirectory)/**/*.zip' # string. Required. Package or folder. Default: $(System.DefaultWorkingDirectory)/**/*.zip.
    #runtimeStack: # 'DOTNET|6.0' | 'DOTNET-ISOLATED|6.0' | 'DOTNET-ISOLATED|7.0' | 'DOTNET-ISOLATED|8.0' | 'JAVA|8' | 'JAVA|11' | 'JAVA|17' | 'JAVA|21' | 'NODE|14' | 'NODE|16' | 'NODE|18' | 'NODE|20' | 'PYTHON|3.8' | 'PYTHON|3.9' | 'PYTHON|3.10' | 'PYTHON|3.11'. Optional. Use when appType = functionAppLinux && isFlexConsumption = false. Runtime stack. 
  # Application and Configuration Settings
    #appSettings: # string. App settings. 
  # Additional Deployment Options
    #deploymentMethod: 'auto' # 'auto' | 'zipDeploy' | 'runFromPackage'. Required when appType != "" && isFlexConsumption = false && package NotEndsWith .war && Package NotEndsWith .jar. Deployment method. Default: auto.
# Azure Functions Deploy v2
# Update a function app with .NET, Python, JavaScript, PowerShell, Java based web applications.
- task: AzureFunctionApp@2
  inputs:
    connectedServiceNameARM: # string. Alias: azureSubscription. Required. Azure Resource Manager connection. 
    appType: # 'functionApp' | 'functionAppLinux'. Required. App type. 
    #isFlexConsumption: false # boolean. Is Function App on Flex Consumption Plan. Default: false.
    appName: # string. Required. Azure Functions App name. 
    #deployToSlotOrASE: false # boolean. Optional. Use when appType != "" && isFlexConsumption = false. Deploy to Slot or App Service Environment. Default: false.
    #resourceGroupName: # string. Required when deployToSlotOrASE = true. Resource group. 
    #slotName: 'production' # string. Required when deployToSlotOrASE = true. Slot. Default: production.
    package: '$(System.DefaultWorkingDirectory)/**/*.zip' # string. Required. Package or folder. Default: $(System.DefaultWorkingDirectory)/**/*.zip.
    #runtimeStack: # 'DOTNET|6.0' | 'DOTNET-ISOLATED|6.0' | 'DOTNET-ISOLATED|7.0' | 'DOTNET-ISOLATED|8.0' | 'JAVA|8' | 'JAVA|11' | 'JAVA|17' | 'JAVA|21' | 'NODE|14' | 'NODE|16' | 'NODE|18' | 'NODE|20' | 'PYTHON|3.8' | 'PYTHON|3.9' | 'PYTHON|3.10' | 'PYTHON|3.11'. Optional. Use when appType = functionAppLinux && isFlexConsumption = false. Runtime stack. 
  # Application and Configuration Settings
    #appSettings: # string. App settings. 
  # Additional Deployment Options
    #deploymentMethod: 'auto' # 'auto' | 'zipDeploy' | 'runFromPackage'. Required when appType != "" && isFlexConsumption = false && package NotEndsWith .war && Package NotEndsWith .jar. Deployment method. Default: auto.
# Azure Functions Deploy v2
# Update a function app with .NET, Python, JavaScript, PowerShell, Java based web applications.
- task: AzureFunctionApp@2
  inputs:
    connectedServiceNameARM: # string. Alias: azureSubscription. Required. Azure Resource Manager connection. 
    appType: # 'functionApp' | 'functionAppLinux'. Required. App type. 
    appName: # string. Required. Azure Functions App name. 
    #deployToSlotOrASE: false # boolean. Optional. Use when appType != "". Deploy to Slot or App Service Environment. Default: false.
    #resourceGroupName: # string. Required when deployToSlotOrASE = true. Resource group. 
    #slotName: 'production' # string. Required when deployToSlotOrASE = true. Slot. Default: production.
    package: '$(System.DefaultWorkingDirectory)/**/*.zip' # string. Required. Package or folder. Default: $(System.DefaultWorkingDirectory)/**/*.zip.
    #runtimeStack: # 'DOTNET|2.2' | 'DOTNET|3.1' | 'DOTNET|6.0' | 'DOTNET-ISOLATED|7.0' | 'JAVA|8' | 'JAVA|11' | 'NODE|8' | 'NODE|10' | 'NODE|12' | 'NODE|14' | 'NODE|16' | 'NODE|18' | 'PYTHON|3.6' | 'PYTHON|3.7' | 'PYTHON|3.8' | 'PYTHON|3.9' | 'PYTHON|3.10'. Optional. Use when appType = functionAppLinux. Runtime stack. 
  # Application and Configuration Settings
    #appSettings: # string. App settings. 
  # Additional Deployment Options
    #deploymentMethod: 'auto' # 'auto' | 'zipDeploy' | 'runFromPackage'. Required when appType != "" && package NotEndsWith .war && Package NotEndsWith .jar. Deployment method. Default: auto.
# Azure Functions Deploy v2
# Update a function app with .NET, Python, JavaScript, PowerShell, Java based web applications.
- task: AzureFunctionApp@2
  inputs:
    connectedServiceNameARM: # string. Alias: azureSubscription. Required. Azure Resource Manager connection. 
    appType: # 'functionApp' | 'functionAppLinux'. Required. App type. 
    appName: # string. Required. Azure Functions App name. 
    #deployToSlotOrASE: false # boolean. Optional. Use when appType != "". Deploy to Slot or App Service Environment. Default: false.
    #resourceGroupName: # string. Required when deployToSlotOrASE = true. Resource group. 
    #slotName: 'production' # string. Required when deployToSlotOrASE = true. Slot. Default: production.
    package: '$(System.DefaultWorkingDirectory)/**/*.zip' # string. Required. Package or folder. Default: $(System.DefaultWorkingDirectory)/**/*.zip.
    #runtimeStack: # 'DOTNET|2.2' | 'DOTNET|3.1' | 'DOTNET|6.0' | 'DOTNET-ISOLATED|7.0' | 'JAVA|8' | 'JAVA|11' | 'NODE|8' | 'NODE|10' | 'NODE|12' | 'NODE|14' | 'NODE|16' | 'NODE|18' | 'PYTHON|3.6' | 'PYTHON|3.7' | 'PYTHON|3.8' | 'PYTHON|3.9' | 'PYTHON|3.10'. Optional. Use when appType = functionAppLinux. Runtime stack. 
  # Application and Configuration Settings
    #appSettings: # string. App settings. 
  # Additional Deployment Options
    #deploymentMethod: 'auto' # 'auto' | 'zipDeploy' | 'runFromPackage'. Required when appType != "" && package NotEndsWith .war && Package NotEndsWith .jar. Deployment method. Default: auto.
Inputs
connectedServiceNameARM-Azure Resource Manager connectionInput alias:azureSubscription.string. Required.
connectedServiceNameARM
azureSubscription
string
Select the Azure Resource Manager subscription for the deployment.
appType-App typestring. Required. Allowed values:functionApp(Function App on Windows),functionAppLinux(Function App on Linux).
appType
string
functionApp
functionAppLinux
Select the Azure Function App type for the deployment.
isFlexConsumption-Is Function App on Flex Consumption Planboolean. Default value:false.
isFlexConsumption
boolean
false
Set totrueif function app is on aFlex Consumption plan.
true
appName-Azure Functions App namestring. Required.
appName
string
Specify the name of an existing Azure Functions App. The Function Apps listed will be based on the selected app type.
deployToSlotOrASE-Deploy to Slot or App Service Environmentboolean. Optional. Use whenappType != "" && isFlexConsumption = false. Default value:false.
deployToSlotOrASE
boolean
appType != "" && isFlexConsumption = false
false
Deploys to an existing deployment slot or Azure App Service Environment. For both targets, the task needs a Resource group name.
If the deployment target is a slot, it will default to theproductionslot. Any other existing slot name can also be provided.
If the deployment target is an Azure App Service Environment, leave the slot name asproductionand specify the Resource group name.
deployToSlotOrASE-Deploy to Slot or App Service Environmentboolean. Optional. Use whenappType != "". Default value:false.
deployToSlotOrASE
boolean
appType != ""
false
Deploys to an existing deployment slot or Azure App Service Environment. For both targets, the task needs a Resource group name.
If the deployment target is a slot, it will default to theproductionslot. Any other existing slot name can also be provided.
If the deployment target is an Azure App Service Environment, leave the slot name asproductionand specify the Resource group name.
resourceGroupName-Resource groupstring. Required whendeployToSlotOrASE = true.
resourceGroupName
string
deployToSlotOrASE = true
The Resource group name is required when the deployment target is either a deployment slot or an App Service Environment.
Enters or selects the Azure Resource group that contains the Azure App Service specified above.
slotName-Slotstring. Required whendeployToSlotOrASE = true. Default value:production.
slotName
string
deployToSlotOrASE = true
production
Enters or selects an existing slot, excluding the Production slot.
slotName-Slotstring. Required whendeployToSlotOrASE = true. Default value:production.
slotName
string
deployToSlotOrASE = true
production
Enter or Select an existing Slot other than the Production slot.
package-Package or folderstring. Required. Default value:$(System.DefaultWorkingDirectory)/**/*.zip.
package
string
$(System.DefaultWorkingDirectory)/**/*.zip
The file path to the package or folder that contains App Service content generated by MSBuild or a compressed zip file. Variables (Build|Release) and wildcards are supported. For example,$(System.DefaultWorkingDirectory)/**/*.zip.
$(System.DefaultWorkingDirectory)/**/*.zip
runtimeStack-Runtime stackstring. Optional. Use whenappType = functionAppLinux && isFlexConsumption = false. Allowed values:DOTNET|6.0,DOTNET-ISOLATED|6.0,DOTNET-ISOLATED|7.0,DOTNET-ISOLATED|8.0,JAVA|8,JAVA|11,JAVA|17,JAVA|21,NODE|14,NODE|16,NODE|18,NODE|20,PYTHON|3.8,PYTHON|3.9,PYTHON|3.10,PYTHON|3.11.
runtimeStack
string
appType = functionAppLinux && isFlexConsumption = false
DOTNET|6.0
DOTNET-ISOLATED|6.0
DOTNET-ISOLATED|7.0
DOTNET-ISOLATED|8.0
JAVA|8
JAVA|11
JAVA|17
JAVA|21
NODE|14
NODE|16
NODE|18
NODE|20
PYTHON|3.8
PYTHON|3.9
PYTHON|3.10
PYTHON|3.11
Specify the framework and version your function app will run on. You can use any of thesupported runtime versions. Old values likeDOCKER|microsoft/azure-functions-*are deprecated. New values are listed in the drop-down list in thetask assistant. If there is a newer version of a framework available in thesupported runtime versionsyou can specify it even if it is not in the list.
DOCKER|microsoft/azure-functions-*
Note
This value currently doesn't update thelinuxFxVersionthat the site is running on. This means you can't update the stack from Node 18 to Node 20. The task currently only updates the app settings.
runtimeStack-Runtime stackstring. Optional. Use whenappType = functionAppLinux. Allowed values:DOTNET|2.2(DOTNET|2.2 (functionapp v2)),DOTNET|3.1(DOTNET|3.1 (functionapp v3)),DOTNET|6.0(DOTNET|6.0 (functionapp v4)),DOTNET-ISOLATED|7.0(DOTNET-ISOLATED|7.0 (functionapp v4)),JAVA|8(JAVA|8 (functionapp v2/v3/v4)),JAVA|11(JAVA|11  (functionapp v3/v4)),NODE|8(NODE|8 (functionapp v2)),NODE|10(NODE|10 (functionapp v2/v3)),NODE|12(NODE|12 (functionapp v3)),NODE|14(NODE|14 (functionapp v3/v4)),NODE|16(NODE|16 (functionapp v4)),NODE|18(NODE|18 (functionapp v4)),PYTHON|3.6(PYTHON|3.6 (functionapp v2/v3)),PYTHON|3.7(PYTHON|3.7 (functionapp v2/v3/v4)),PYTHON|3.8(PYTHON|3.8 (functionapp v3/v4)),PYTHON|3.9(PYTHON|3.9 (functionapp v3/v4)),PYTHON|3.10(PYTHON|3.10 (functionapp v3/v4)).
runtimeStack
string
appType = functionAppLinux
DOTNET|2.2
DOTNET|3.1
DOTNET|6.0
DOTNET-ISOLATED|7.0
JAVA|8
JAVA|11
NODE|8
NODE|10
NODE|12
NODE|14
NODE|16
NODE|18
PYTHON|3.6
PYTHON|3.7
PYTHON|3.8
PYTHON|3.9
PYTHON|3.10
Specify the framework and version your function app will run on. You can use any of thesupported runtime versions. Old values likeDOCKER|microsoft/azure-functions-*are deprecated. New values are listed in the drop-down list in thetask assistant. If there is a newer version of a framework available in thesupported runtime versionsyou can specify it even if it is not in the list.
DOCKER|microsoft/azure-functions-*
appSettings-App settingsstring.
appSettings
string
Enter the application settings using the syntax-key value(for example:-Port 5000-RequestTimeout 5000-WEBSITE_TIME_ZONE). Enclose values that contain spaces in double quotes (for example:"Eastern Standard Time").
-key value
-Port 5000
-RequestTimeout 5000
-WEBSITE_TIME_ZONE
"Eastern Standard Time"
For more information on app settings, seeEnvironment variables and app settings in Azure App Service.
deploymentMethod-Deployment methodstring. Required whenappType != "" && isFlexConsumption = false && package NotEndsWith .war && Package NotEndsWith .jar. Allowed values:auto(Auto-detect),zipDeploy(Zip Deploy),runFromPackage(Zip Deploy with Run From Package). Default value:auto.
deploymentMethod
string
appType != "" && isFlexConsumption = false && package NotEndsWith .war && Package NotEndsWith .jar
auto
zipDeploy
runFromPackage
auto
Specifies thedeployment methodfor the app. Linux Consumption apps do not support this configuration.
The Azure Web Jobs Storage app settings needs to be set for zip deployments when the SKU is Linux Consumption. Zip deployments use a storage account to upload and mount application code into the app.
deploymentMethod-Deployment methodstring. Required whenappType != "" && package NotEndsWith .war && Package NotEndsWith .jar. Allowed values:auto(Auto-detect),zipDeploy(Zip Deploy),runFromPackage(Zip Deploy with Run From Package). Default value:auto.
deploymentMethod
string
appType != "" && package NotEndsWith .war && Package NotEndsWith .jar
auto
zipDeploy
runFromPackage
auto
Specifies thedeployment methodfor the app. Linux Consumption apps do not support this configuration.
The Azure Web Jobs Storage app settings needs to be set for zip deployments when the SKU is Linux Consumption. Zip deployments use a storage account to upload and mount application code into the app.
deploymentMethod-Deployment methodstring. Required whenappType != "" && package NotEndsWith .war && Package NotEndsWith .jar. Allowed values:auto(Auto-detect),zipDeploy(Zip Deploy),runFromPackage(Zip Deploy with Run From Package). Default value:auto.
deploymentMethod
string
appType != "" && package NotEndsWith .war && Package NotEndsWith .jar
auto
zipDeploy
runFromPackage
auto
Chooses thedeployment methodfor the app. Linux Consumption apps do not support this configuration.
The Azure Web Jobs Storage app settings needs to be set for zip deployments when the SKU is Linux Consumption. Zip deployments use a storage account to upload and mount application code into the app.
Task control options
All tasks have control options in addition to their task inputs. For more information, seeControl options and common task properties.
Output variables
This task defines the followingoutput variables, which you can consume in downstream steps, jobs, and stages.
AppServiceApplicationUrlApplication URL of the selected Azure Function App.
AppServiceApplicationUrl
Remarks
The Azure Function Deployment task is used to update Azure Functions to deployFunctionsto Azure. The task works on cross platform Azure Pipelines agents running Windows, Linux or Mac and uses the underlying deployment technologies of RunFromPackage, Zip Deploy andKudu REST APIs.
The task works for the Azure Functionssupported languages.
Pre-requisites for the task
The following pre-requisites need to be setup in the target machine(s) for the task to work properly.
The task is used to deploy an Azure Functions project to an existing Azure Function. The Azure Function app should exist prior to running the task. The Azure Function App can be created from theAzure portal. Alternatively, theAzure PowerShell taskcan be used to runAzureRM PowerShell scriptsto provision and configure the Azure Function app.
The task can be used to deployAzure Functions(Windows/Linux).
To deploy to Azure, an Azure subscription has to be linked to Azure Pipelines using the Services tab in the Account Administration section. Add the Azure subscription to use in the Build or Release Management definition by opening the Account Administration screen (gear icon on the top-right of the screen) and then click on the Services Tab.
Create theARMservice endpoint and useAzure Resource Managerendpoint type. For more details, follow the steps listed in the linkhere.
The task does not work with the Azure Classic service endpoint and it will not list these connections in the parameters in the task.
Deployment methods
Several deployment methods are available in this task.
To change the package-based deployment option in a designer task, expandAdditional Deployment Optionsand enableSelect Deployment Method.
Based on the type of Azure App Service and Azure Pipelines agent, the task uses a suitable deployment technology. The deployment technologies used by tasks are as follows:
Kudu REST API
Zip Deploy
Run From Package
By default, the task attempts to select the appropriate deployment technology based on the input package, App Service type, and agent OS.
If a post-deployment script is provided, use Zip Deploy.
If the App Service type is Web App on Linux, use Zip Deploy.
If a .war file is provided, use War Deploy.
If a .jar file is provided, use Run-From-Zip.
For all other tasks, use Run From Package (via Zip Deploy).
On a non-Windows agent (for any App Service type), the task relies on theKudu REST APIto deploy the web app.
TheKudu REST APIworks on both Windows and Linux automation agents when the target is a Web App on Windows, a Web App on Linux (built-in source), or a function app. The task uses Kudu to copy files to the Azure App Service.
Zip Deploy creates a .zip deployment package from the chosen package or folder. It then deploys the file contents to the wwwroot folder of the App Service name function app in Azure. This option overwrites all existing content in the wwwroot folder. For more information, seeZip deployment for Azure Functions.
Run From Package creates the same deployment package as Zip Deploy. Instead of deploying files to the wwwroot folder, the Functions runtime mounts the entire package. When you use this option, files in the wwwroot folder become read-only. For more information, seeRun your Azure Functions from a package file.
Troubleshooting
Error: Could not fetch access token for Azure. Verify if the Service Principal used is valid and not expired.
The task uses the service principal in the service connection to authenticate with Azure. If the service principal has expired or doesn't have permissions to the App Service, the task fails with this error. Verify the validity of the service principal used and that it's present in the app registration. For more information, seeUse role-based access control to manage access to your Azure subscription resources.This blog postalso contains more information about using service principal authentication.
SSL error
If you want to use a certificate in App Service, the certificate must be signed by a trusted certificate authority. If your web app gives you certificate validation errors, you're probably using a self-signed certificate. Set a variable namedVSTS_ARM_REST_IGNORE_SSL_ERRORSto the valuetruein the build or release pipeline to resolve the error.
VSTS_ARM_REST_IGNORE_SSL_ERRORS
true
A release hangs for long time and then fails
This problem could be the result of insufficient capacity in your App Service plan. To resolve this problem, you can scale up the App Service instance to increase available CPU, RAM, and disk space or try with a different App Service plan.
5xxerror codes
If you're seeing a 5xxerror,check the status of your Azure service.
Azure Function suddenly stopped working
Azure Functions may suddenly stop working if more than one year has passed since the last deployment. If you deploy with "RunFromPackage" in "deploymentMethod", a SAS with an expiration date of 1 year is generated and set as the value of "WEBSITE_RUN_FROM_PACKAGE" in the application configuration. Azure Functions uses this SAS to reference the package file for function execution, so if the SAS has expired, the function will not be executed. To resolve this issue, deploy again to generate a SAS with an expiration date of one year.
Error: No package found with specified pattern
Check if the package mentioned in the task is published as an artifact in the build or a previous stage and downloaded in the current job.
Error: Publish using zip deploy option is not supported for msBuild package type
Web packages created via the MSBuild task (with default arguments) have a nested folder structure that can be deployed correctly only by Web Deploy. The publish-to-zip deployment option can't be used to deploy those packages. To convert the packaging structure, take these steps:
In the Build solution task, change theMSBuild Argumentsto/p:DeployOnBuild=true /p:DeployDefaultTarget=WebPublish /p:WebPublishMethod=FileSystem /p:DeleteExistingFiles=True /p:publishUrl="$(System.DefaultWorkingDirectory)\\WebAppContent":
In the Build solution task, change theMSBuild Argumentsto/p:DeployOnBuild=true /p:DeployDefaultTarget=WebPublish /p:WebPublishMethod=FileSystem /p:DeleteExistingFiles=True /p:publishUrl="$(System.DefaultWorkingDirectory)\\WebAppContent":
/p:DeployOnBuild=true /p:DeployDefaultTarget=WebPublish /p:WebPublishMethod=FileSystem /p:DeleteExistingFiles=True /p:publishUrl="$(System.DefaultWorkingDirectory)\\WebAppContent"

Add an Archive task and change the values as follows:ChangeRoot folder or file to archiveto$(System.DefaultWorkingDirectory)\\WebAppContent.Clear thePrepend root folder name to archive pathscheck box:
Add an Archive task and change the values as follows:
ChangeRoot folder or file to archiveto$(System.DefaultWorkingDirectory)\\WebAppContent.
ChangeRoot folder or file to archiveto$(System.DefaultWorkingDirectory)\\WebAppContent.
$(System.DefaultWorkingDirectory)\\WebAppContent
Clear thePrepend root folder name to archive pathscheck box:
Clear thePrepend root folder name to archive pathscheck box:

This problem could occur if a web.config file isn't present in your app. You can either add a web.config file to your source or automatically generate one by using theApplication and Configuration Settingsof the task.
Select the task and go toGenerate web.config parameters for Python, Node.js, Go and Java apps:
Select the task and go toGenerate web.config parameters for Python, Node.js, Go and Java apps:

Select the More button (...) underGenerate web.config parameters for Python, Node.js, Go and Java appsto edit the parameters:
Select the More button (...) underGenerate web.config parameters for Python, Node.js, Go and Java appsto edit the parameters:

Select your application type in theApplication frameworklist.
Select your application type in theApplication frameworklist.
SelectOK. Doing so will populate the web.config parameters required to generate the web.config file.
SelectOK. Doing so will populate the web.config parameters required to generate the web.config file.
FAQs
How should I configure my service connection?
This task requires anAzure Resource Manager service connection.
How should I configure web job deployment with Application Insights?
When you're deploying to an App Service, if you haveApplication Insightsconfigured and you've enabledRemove additional files at destination, you also need to enableExclude files from the App_Data folder. Enabling this option keeps the Application Insights extension in a safe state. This step is required because the Application Insights continuous WebJob is installed into the App_Data folder.
Remove additional files at destination
Exclude files from the App_Data folder
How should I configure my agent if it's behind a proxy while I'm deploying to App Service?
If your self-hosted agent requires a web proxy, you can inform the agent about the proxy during configuration. Doing so allows your agent to connect to Azure Pipelines or Azure DevOps Server through the proxy.Learn more about running a self-hosted agent behind a web proxy.
By design, a Microsoft-hosted agent won't work with an App Service Environment. Instead, you need to configure a private agent on a virtual machine that's in the same virtual network as the App Service Environment. Also, set a private DNS zone to enable communication between the resources.
Examples
Here's a sample YAML snippet that deploys Azure functions on Windows:
variables:
  azureSubscription: Contoso
  # To ignore SSL error, uncomment the below variable
  # VSTS_ARM_REST_IGNORE_SSL_ERRORS: true

steps:
- task: AzureFunctionApp@2
  displayName: Azure Function App Deploy
  inputs:
    azureSubscription: $(azureSubscription)
    appName: samplefunctionapp
    appType: functionApp
    package: $(System.DefaultWorkingDirectory)/**/*.zip
variables:
  azureSubscription: Contoso
  # To ignore SSL error, uncomment the below variable
  # VSTS_ARM_REST_IGNORE_SSL_ERRORS: true

steps:
- task: AzureFunctionApp@2
  displayName: Azure Function App Deploy
  inputs:
    azureSubscription: $(azureSubscription)
    appName: samplefunctionapp
    appType: functionApp
    package: $(System.DefaultWorkingDirectory)/**/*.zip
To deploy a function on Linux, add theappTypeparameter and set it toappType: functionAppLinux. If you don't specify a value,functionAppis the default.
appType
appType: functionAppLinux
functionApp
To explicitly specify the deployment method as Zip Deploy, add the parameterdeploymentMethod: zipDeploy. Another supported value for this parameter isrunFromPackage.
If you don't specify a value,autois the default.
deploymentMethod: zipDeploy
runFromPackage
auto
For a walkthrough that shows how to create a CI/CD pipeline, seeBuild and deploy Java to Azure Functions.
Requirements
Feedback
Was this page helpful?
Additional resources