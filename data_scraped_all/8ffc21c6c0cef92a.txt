Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Container Storage Interface (CSI) drivers on Azure Kubernetes Service (AKS)
Article
2024-12-11
15 contributors
In this article
The Container Storage Interface (CSI) is a standard for exposing arbitrary block and file storage systems to containerized workloads on Kubernetes. By adopting and using CSI, Azure Kubernetes Service (AKS) can write, deploy, and iterate plug-ins to expose new or improve existing storage systems in Kubernetes without having to touch the core Kubernetes code and wait for its release cycles.
The CSI storage driver support on AKS allows you to natively use:
Azure Diskscan be used to create a KubernetesDataDiskresource. Disks can use Azure Premium Storage, backed by high-performance SSDs, or Azure Standard Storage, backed by regular HDDs or Standard SSDs. For most production and development workloads, use Premium Storage. Azure Disks are mounted asReadWriteOnceand are only available to one node in AKS. For storage volumes that can be accessed by multiple nodes simultaneously, use Azure Files.
Azure Filescan be used to mount an SMB 3.0/3.1 share backed by an Azure storage account to pods. With Azure Files, you can share data across multiple nodes and pods. Azure Files can use Azure Standard storage backed by regular HDDs or Azure Premium storage backed by high-performance SSDs.
Azure Blob storagecan be used to mount Blob storage (or object storage) as a file system into a container or pod. Using Blob storage enables your cluster to support applications that work with large unstructured datasets like log file data, images or documents, HPC, and others. Additionally, if you ingest data intoAzure Data Lake storage, you can directly mount and use it in AKS without configuring another interim filesystem.
Tip
If you want a fully managed solution for block-level access to data, consider usingAzure Container Storageinstead of CSI drivers. Azure Container Storage integrates with Kubernetes, allowing dynamic and automatic provisioning of persistent volumes. Azure Container Storage supports Azure Disks, Ephemeral Disks, and Azure Elastic SAN (preview) as backing storage, offering flexibility and scalability for stateful applications running on Kubernetes clusters.
Prerequisites
You need the Azure CLI version 2.42 or later installed and configured. Runaz --versionto find the version. If you need to install or upgrade, seeInstall Azure CLI.
az --version
If the open-source CSI storage driver is installed on your cluster, uninstall it before enabling the Azure storage CSI driver.
To enforce the Azure Policy for AKSpolicy definitionKubernetes clusters should use Container Storage Interface(CSI) driver StorageClass, the Azure Policy add-on needs to be enabled on new and existing clusters. For an existing cluster, review theLearn Azure Policy for Kubernetesto enable it.
Disk encryption supported scenarios
CSI storage drivers support the following scenarios:
Encrypted managed disks with customer-managed keysusing Azure Key Vaults stored in a different Microsoft Entra tenant.
Encrypt your Azure Storage disks hosting AKS OS and application data withcustomer-managed keys.
Enable CSI storage drivers on an existing cluster
To enable CSI storage drivers on a new cluster, include one of the following parameters depending on the storage system:
--enable-disk-driverallows you to enable theAzure Disks CSI driver.
--enable-disk-driver
--enable-file-driverallows you to enable theAzure Files CSI driver.
--enable-file-driver
--enable-blob-driverallows you to enable theAzure Blob storage CSI driver.
--enable-blob-driver
--enable-snapshot-controllerallows you to enable thesnapshot controller.
--enable-snapshot-controller
az aks update --name myAKSCluster --resource-group myResourceGroup --enable-disk-driver --enable-file-driver --enable-blob-driver --enable-snapshot-controller
az aks update --name myAKSCluster --resource-group myResourceGroup --enable-disk-driver --enable-file-driver --enable-blob-driver --enable-snapshot-controller
It might take several minutes to complete this action. Once it's complete, you should see in the output the status of enabling the driver on your cluster. The following example resembles the section indicating the results when enabling the Blob storage CSI driver:
"storageProfile": {
    "blobCsiDriver": {
      "enabled": true
    },
"storageProfile": {
    "blobCsiDriver": {
      "enabled": true
    },
Disable CSI storage drivers on a new or existing cluster
To disable CSI storage drivers on a new cluster, include one of the following parameters depending on the storage system:
--disable-disk-driverallows you to disable theAzure Disks CSI driver.
--disable-disk-driver
--disable-file-driverallows you to disable theAzure Files CSI driver.
--disable-file-driver
--disable-blob-driverallows you to disable theAzure Blob storage CSI driver.
--disable-blob-driver
--disable-snapshot-controllerallows you to disable thesnapshot controller.
--disable-snapshot-controller
az aks create \
    --name myAKSCluster \
    --resource-group myResourceGroup \
    --disable-disk-driver \
    --disable-file-driver \
    --disable-blob-driver \
    --disable-snapshot-controller \
    --generate-ssh-keys
az aks create \
    --name myAKSCluster \
    --resource-group myResourceGroup \
    --disable-disk-driver \
    --disable-file-driver \
    --disable-blob-driver \
    --disable-snapshot-controller \
    --generate-ssh-keys
To disable CSI storage drivers on an existing cluster, use one of the parameters listed earlier depending on the storage system:
az aks update \
    --name myAKSCluster \
    --resource-group myResourceGroup \
    --disable-disk-driver \
    --disable-file-driver \
    --disable-blob-driver \
    --disable-snapshot-controller
az aks update \
    --name myAKSCluster \
    --resource-group myResourceGroup \
    --disable-disk-driver \
    --disable-file-driver \
    --disable-blob-driver \
    --disable-snapshot-controller
Note
We recommend deleting the corresponding PersistentVolumeClaim object instead of the PersistentVolume object when deleting a CSI volume. The external provisioner in the CSI driver will react to the deletion of the PersistentVolumeClaim and based on its reclamation policy, it issues the DeleteVolume call against the CSI volume driver commands to delete the volume. The PersistentVolume object is then deleted.
Migrate custom in-tree storage classes to CSI
Starting with Kubernetes version 1.26, in-tree persistent volume typeskubernetes.io/azure-diskandkubernetes.io/azure-fileare deprecated and will no longer be supported.In-tree driversrefers to the storage drivers that are part of the core Kubernetes code opposed to the CSI drivers, which are plug-ins.
Removing these drivers following their deprecation isn't planned, however you should migrate to the corresponding CSI driversdisk.csi.azure.comandfile.csi.azure.com. To review the migration options for your storage classes and upgrade your cluster to use Azure Disks and Azure Files CSI drivers, seeMigrate from in-tree to CSI drivers.
If you've created in-tree driver storage classes, those storage classes continue to work since CSI migration is turned on after upgrading your cluster to 1.21.x. If you want to use CSI features you'll need to perform the migration.
Next steps
To use the CSI driver for Azure Disks, seeUse Azure Disks with CSI drivers.
To use the CSI driver for Azure Files, seeUse Azure Files with CSI drivers.
To use the CSI driver for Azure Blob storage, seeUse Azure Blob storage with CSI drivers
For more about storage best practices, seeBest practices for storage and backups in Azure Kubernetes Service.
For more information on CSI migration, seeKubernetes in-tree to CSI Volume Migration.
Azure Kubernetes Service

Additional resources