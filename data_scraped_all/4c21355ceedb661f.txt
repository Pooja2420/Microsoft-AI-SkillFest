Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Dependency tracking in Application Insights
Article
2025-01-31
26 contributors
In this article
Caution
We recommend theAzure Monitor OpenTelemetry Distrofor new applications or customers to powerAzure Monitor Application Insights. The Azure Monitor OpenTelemetry Distro delivers a similar functionality and experience as the Application Insights SDK. It's possible to migrate from the Application Insights SDK using the migration guides for.NET,Node.js, andPython, but we are still working to add afew more featuresfor backwards compatibility.
Adependencyis a component that's called by your application. It's typically a service called by using HTTP, a database, or a file system.Application Insightsmeasures the duration of dependency calls and whether it's failing or not, along with information like the name of the dependency. You can investigate specific dependency calls and correlate them to requests and exceptions.
Automatically tracked dependencies
Application Insights SDKs for .NET and .NET Core ship withDependencyTrackingTelemetryModule, which is a telemetry module that automatically collects dependencies. This dependency collection is enabled automatically forASP.NETandASP.NET Coreapplications when configured according to the linked official docs. The moduleDependencyTrackingTelemetryModuleis shipped as theMicrosoft.ApplicationInsights.DependencyCollectorNuGet package and brought automatically when you use either theMicrosoft.ApplicationInsights.WebNuGet package or theMicrosoft.ApplicationInsights.AspNetCoreNuGet package.
DependencyTrackingTelemetryModule
DependencyTrackingTelemetryModule
Microsoft.ApplicationInsights.Web
Microsoft.ApplicationInsights.AspNetCore
Currently,DependencyTrackingTelemetryModuletracks the following dependencies automatically:
DependencyTrackingTelemetryModule
SqlClient
If you're missing a dependency or using a different SDK, make sure it's in the list ofautocollected dependencies. If the dependency isn't autocollected, you can track it manually with atrack dependency call.
Set up automatic dependency tracking in console apps
To automatically track dependencies from .NET console apps, install the NuGet packageMicrosoft.ApplicationInsights.DependencyCollectorand initializeDependencyTrackingTelemetryModule:
Microsoft.ApplicationInsights.DependencyCollector
DependencyTrackingTelemetryModule
DependencyTrackingTelemetryModule depModule = new DependencyTrackingTelemetryModule();
    depModule.Initialize(TelemetryConfiguration.Active);
DependencyTrackingTelemetryModule depModule = new DependencyTrackingTelemetryModule();
    depModule.Initialize(TelemetryConfiguration.Active);
For .NET Core console apps,TelemetryConfiguration.Activeis obsolete. See the guidance in theWorker service documentationand theASP.NET Core monitoring documentation.
TelemetryConfiguration.Active
How does automatic dependency monitoring work?
Dependencies are automatically collected by using one of the following techniques:
Using byte code instrumentation around select methods. UseInstrumentationEngineeither fromStatusMonitoror an Azure App Service Web Apps extension.
InstrumentationEngine
StatusMonitor
EventSourcecallbacks.
EventSource
DiagnosticSourcecallbacks in the latest .NET or .NET Core SDKs.
DiagnosticSource
Manually tracking dependencies
The following examples of dependencies, which aren't automatically collected, require manual tracking:
Azure Cosmos DB is tracked automatically only ifHTTP/HTTPSis used. TCP mode won't be automatically captured by Application Insights for SDK versions older than2.22.0-Beta1.
2.22.0-Beta1
Redis
For those dependencies not automatically collected by SDK, you can track them manually by using theTrackDependency APIthat's used by the standard autocollection modules.
Example
If you build your code with an assembly that you didn't write yourself, you could time all the calls to it. This scenario would allow you to find out what contribution it makes to your response times.
To have this data displayed in the dependency charts in Application Insights, send it by usingTrackDependency:
TrackDependency
var startTime = DateTime.UtcNow;
    var timer = System.Diagnostics.Stopwatch.StartNew();
    try
    {
        // making dependency call
        success = dependency.Call();
    }
    finally
    {
        timer.Stop();
        telemetryClient.TrackDependency("myDependencyType", "myDependencyCall", "myDependencyData",  startTime, timer.Elapsed, success);
    }
var startTime = DateTime.UtcNow;
    var timer = System.Diagnostics.Stopwatch.StartNew();
    try
    {
        // making dependency call
        success = dependency.Call();
    }
    finally
    {
        timer.Stop();
        telemetryClient.TrackDependency("myDependencyType", "myDependencyCall", "myDependencyData",  startTime, timer.Elapsed, success);
    }
Alternatively,TelemetryClientprovides the extension methodsStartOperationandStopOperation, which can be used to manually track dependencies as shown inOutgoing dependencies tracking.
TelemetryClient
StartOperation
StopOperation
If you want to switch off the standard dependency tracking module, remove the reference toDependencyTrackingTelemetryModuleinApplicationInsights.configfor ASP.NET applications. For ASP.NET Core applications, follow the instructions inApplication Insights for ASP.NET Core applications.
DependencyTrackingTelemetryModule
Track AJAX calls from webpages
For webpages, the Application Insights JavaScript SDK automatically collects AJAX calls as dependencies.
Advanced SQL tracking to get full SQL query
Note
Azure Functions requires separate settings to enable SQL text collection. For more information, seeEnable SQL query collection.
For SQL calls, the name of the server and database is always collected and stored as the name of the collectedDependencyTelemetry. Another field, called data, can contain the full SQL query text.
DependencyTelemetry
For ASP.NET Core applications, It's now required to opt in to SQL Text collection by using:
services.ConfigureTelemetryModule<DependencyTrackingTelemetryModule>((module, o) => { module. EnableSqlCommandTextInstrumentation = true; });
services.ConfigureTelemetryModule<DependencyTrackingTelemetryModule>((module, o) => { module. EnableSqlCommandTextInstrumentation = true; });
For ASP.NET applications, the full SQL query text is collected with the help of byte code instrumentation, which requires using the instrumentation engine or by using theMicrosoft.Data.SqlClientNuGet package instead of the System.Data.SqlClient library. Platform-specific steps to enable full SQL Query collection are described in the following table.
In addition to the preceding platform-specific steps, youmust also explicitly opt in to enable SQL command collectionby modifying theapplicationInsights.configfile with the following code:
applicationInsights.config
<TelemetryModules>
  <Add Type="Microsoft.ApplicationInsights.DependencyCollector.DependencyTrackingTelemetryModule, Microsoft.AI.DependencyCollector">
    <EnableSqlCommandTextInstrumentation>true</EnableSqlCommandTextInstrumentation>
  </Add>
<TelemetryModules>
  <Add Type="Microsoft.ApplicationInsights.DependencyCollector.DependencyTrackingTelemetryModule, Microsoft.AI.DependencyCollector">
    <EnableSqlCommandTextInstrumentation>true</EnableSqlCommandTextInstrumentation>
  </Add>
In the preceding cases, the proper way of validating that the instrumentation engine is correctly installed is by validating that the SDK version of collectedDependencyTelemetryisrddp. Use ofrdddsdorrddfindicates dependencies are collected viaDiagnosticSourceorEventSourcecallbacks, so the full SQL query won't be captured.
DependencyTelemetry
rddp
rdddsd
rddf
DiagnosticSource
EventSource
Where to find dependency data
Application Mapvisualizes dependencies between your app and neighboring components.
Transaction Diagnosticsshows unified, correlated server data.
Browsers tabshows AJAX calls from your users' browsers.
Select from slow or failed requests to check their dependency calls.
Analyticscan be used to query dependency data.
Diagnose slow requests
Each request event is associated with the dependency calls, exceptions, and other events tracked while processing the request. So, if some requests are doing badly, you can find out whether it's because of slow responses from a dependency.
Tracing from requests to dependencies
Select the left-handPerformancetab and select theDependenciestab at the top.
Select aDependency NameunderOverall. After you select a dependency, it shows a graph of that dependency's distribution of durations.

Select theSamplesbutton at the bottom right. Then select a sample to see the end-to-end transaction details.

Profile your live site
The.NET Profilertraces HTTP calls to your live site and shows you the functions in your code that took the longest time.
Failed requests
Failed requests might also be associated with failed calls to dependencies.
Select the left-handFailurestab and then select theDependenciestab at the top.

Here you see the failed dependency count. To get more information about a failed occurrence, select aDependency Namein the bottom table. Select theDependenciesbutton at the bottom right to see the end-to-end transaction details.
Logs (Analytics)
You can track dependencies in theKusto query language. Here are some examples.
Find any failed dependency calls:dependencies | where success != "True" | take 10
Find any failed dependency calls:
dependencies | where success != "True" | take 10
dependencies | where success != "True" | take 10
Find AJAX calls:dependencies | where client_Type == "Browser" | take 10
Find AJAX calls:
dependencies | where client_Type == "Browser" | take 10
dependencies | where client_Type == "Browser" | take 10
Find dependency calls associated with requests:dependencies
    | where timestamp > ago(1d) and  client_Type != "Browser"
    | join (requests | where timestamp > ago(1d))
      on operation_Id
Find dependency calls associated with requests:
dependencies
    | where timestamp > ago(1d) and  client_Type != "Browser"
    | join (requests | where timestamp > ago(1d))
      on operation_Id
dependencies
    | where timestamp > ago(1d) and  client_Type != "Browser"
    | join (requests | where timestamp > ago(1d))
      on operation_Id
Find AJAX calls associated with page views:dependencies
    | where timestamp > ago(1d) and  client_Type == "Browser"
    | join (browserTimings | where timestamp > ago(1d))
      on operation_Id
Find AJAX calls associated with page views:
dependencies
    | where timestamp > ago(1d) and  client_Type == "Browser"
    | join (browserTimings | where timestamp > ago(1d))
      on operation_Id
dependencies
    | where timestamp > ago(1d) and  client_Type == "Browser"
    | join (browserTimings | where timestamp > ago(1d))
      on operation_Id
Frequently asked questions
This section provides answers to common questions.
How does the automatic dependency collector report failed calls to dependencies?
Failed dependency calls have thesuccessfield set to False. The moduleDependencyTrackingTelemetryModuledoesn't reportExceptionTelemetry. The full data model for dependency is described inApplication Insights telemetry data model.
success
DependencyTrackingTelemetryModule
ExceptionTelemetry
How do I calculate ingestion latency for my dependency telemetry?
Use this code:
dependencies
| extend E2EIngestionLatency = ingestion_time() - timestamp 
| extend TimeIngested = ingestion_time()
dependencies
| extend E2EIngestionLatency = ingestion_time() - timestamp 
| extend TimeIngested = ingestion_time()
How do I determine the time the dependency call was initiated?
In the Log Analytics query view,timestamprepresents the moment the TrackDependency() call was initiated, which occurs immediately after the dependency call response is received. To calculate the time when the dependency call began, you would taketimestampand subtract the recordeddurationof the dependency call.
timestamp
timestamp
duration
Does dependency tracking in Application Insights include logging response bodies?
Dependency tracking in Application Insights doesn't include logging response bodies as it would generate too much telemetry for most applications.
Open-source SDK
Like every Application Insights SDK, the dependency collection module is also open source. Read and contribute to the code or report issues atthe official GitHub repo.
Dependency autocollection
Below is the currently supported list of dependency calls that are automatically detected as dependencies without requiring any additional modification to your application's code. These dependencies are visualized in the Application InsightsApplication mapandTransaction diagnosticsviews. If your dependency isn't on the list, you can still track it manually with atrack dependency call.
.NET
Note
There is aknown issuewith older versions of Microsoft.Data.SqlClient. We recommend using 1.1.0 or later to mitigate this issue. Entity Framework Core does not necessarily ship with the latest stable release of Microsoft.Data.SqlClient so we advise confirming that you are on at least 1.1.0 to avoid this issue.
Java
See the list of Application Insights Java'sautocollected dependencies.
Node.js
A list of the latestcurrently supported modulesis maintainedhere.
JavaScript
Next steps
Exceptions
User and page data
Availability
Set up custom dependency tracking forJava.
Set up custom dependency tracking forOpenCensus Python.
Write custom dependency telemetry
Seedata modelfor Application Insights types and data model.
Check outplatformssupported by Application Insights.
Feedback
Was this page helpful?
Additional resources