Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Set up a custom domain name and SSL certificate with the application routing add-on
Article
2025-03-12
5 contributors
In this article
An Ingress is an API object that defines rules, which allow external access to services in an Azure Kubernetes Service (AKS) cluster. When you create an Ingress object that uses the application routing add-on nginx Ingress classes, the add-on creates, configures, and manages one or more Ingress controllers in your AKS cluster.
This article shows you how to set up an advanced Ingress configuration to encrypt the traffic with SSL/TLS certificates stored in an Azure Key Vault, and use Azure DNS to manage DNS zones.
Application routing add-on with nginx features
The application routing add-on with nginx delivers the following:
Easy configuration of managed nginx Ingress controllers.
Integration with an external DNS such asAzure DNSfor global and private zone management
SSL termination with certificates stored in a key vault, such asAzure Key Vault.
Prerequisites
An AKS cluster with theapplication routing add-on.
Azure Key Vault if you want to configure SSL termination and store certificates in the vault hosted in Azure.
Azure DNS if you want to configure global and private zone management and host them in Azure.
To attach an Azure Key Vault or Azure DNS Zone, you need theOwner,Azure account administrator, orAzure co-administratorrole on your Azure subscription.
Connect to your AKS cluster
To connect to the Kubernetes cluster from your local computer, you usekubectl, the Kubernetes command-line client. You can install it locally using theaz aks install-clicommand. If you use the Azure Cloud Shell,kubectlis already installed.
kubectl
kubectl
Configure kubectl to connect to your Kubernetes cluster using theaz aks get-credentialscommand.
az aks get-credentials
az aks get-credentials --resource-group <ResourceGroupName> --name <ClusterName>
az aks get-credentials --resource-group <ResourceGroupName> --name <ClusterName>
Terminate HTTPS traffic with certificates from Azure Key Vault
To enable support for HTTPS traffic, see the following prerequisites:
An SSL certificate. If you don't have one, you cancreate a certificate.
Create an Azure Key Vault to store the certificate
Note
If you already have an Azure Key Vault, you can skip this step.
Create an Azure Key Vault using theaz keyvault createcommand.
az keyvault create
az keyvault create --resource-group <ResourceGroupName> --location <Location> --name <KeyVaultName> --enable-rbac-authorization true
az keyvault create --resource-group <ResourceGroupName> --location <Location> --name <KeyVaultName> --enable-rbac-authorization true
Create and export a self-signed SSL certificate
For testing, you can use a self-signed public certificate instead of a Certificate Authority (CA)-signed certificate. If you already have a certificate, you can skip this step.
Caution
Self-signed certificates are digital certificates that are not signed by a trusted third-party CA. Self-signed certificates are created, issued, and signed by the company or developer who is responsible for the website or software being signed. This is why self-signed certificates are considered unsafe for public-facing websites and applications. Azure Key Vault has atrusted partnership with the some Certificate Authorities.
Create a self-signed SSL certificate to use with the Ingress using theopenssl reqcommand. Make sure you replace<Hostname>with the DNS name you're using.openssl req -new -x509 -nodes -out aks-ingress-tls.crt -keyout aks-ingress-tls.key -subj "/CN=<Hostname>" -addext "subjectAltName=DNS:<Hostname>"
Create a self-signed SSL certificate to use with the Ingress using theopenssl reqcommand. Make sure you replace<Hostname>with the DNS name you're using.
openssl req
<Hostname>
openssl req -new -x509 -nodes -out aks-ingress-tls.crt -keyout aks-ingress-tls.key -subj "/CN=<Hostname>" -addext "subjectAltName=DNS:<Hostname>"
openssl req -new -x509 -nodes -out aks-ingress-tls.crt -keyout aks-ingress-tls.key -subj "/CN=<Hostname>" -addext "subjectAltName=DNS:<Hostname>"
Export the SSL certificate and skip the password prompt using theopenssl pkcs12 -exportcommand.openssl pkcs12 -export -in aks-ingress-tls.crt -inkey aks-ingress-tls.key -out aks-ingress-tls.pfx
Export the SSL certificate and skip the password prompt using theopenssl pkcs12 -exportcommand.
openssl pkcs12 -export
openssl pkcs12 -export -in aks-ingress-tls.crt -inkey aks-ingress-tls.key -out aks-ingress-tls.pfx
openssl pkcs12 -export -in aks-ingress-tls.crt -inkey aks-ingress-tls.key -out aks-ingress-tls.pfx
Import certificate into Azure Key Vault
Import the SSL certificate into Azure Key Vault using theaz keyvault certificate importcommand. If your certificate is password protected, you can pass the password through the--passwordflag.
az keyvault certificate import
--password
az keyvault certificate import --vault-name <KeyVaultName> --name <KeyVaultCertificateName> --file aks-ingress-tls.pfx [--password <certificate password if specified>]
az keyvault certificate import --vault-name <KeyVaultName> --name <KeyVaultCertificateName> --file aks-ingress-tls.pfx [--password <certificate password if specified>]
Important
To enable the add-on to reload certificates from Azure Key Vault when they change, you should to enable thesecret autorotation featureof the Secret Store CSI driver with the--enable-secret-rotationargument. When autorotation is enabled, the driver updates the pod mount and the Kubernetes secret by polling for changes periodically, based on the rotation poll interval you define. The default rotation poll interval is two minutes.
--enable-secret-rotation
Enable Azure Key Vault integration
On a cluster with the application routing add-on enabled, use theaz aks approuting updatecommand using the--enable-kvand--attach-kvarguments to enable the Azure Key Vault provider for Secrets Store CSI Driver and apply the required role assignments.
az aks approuting update
--enable-kv
--attach-kv
Azure Key Vault offerstwo authorization systems:Azure role-based access control (Azure RBAC), which operates on the management plane, and theaccess policy model, which operates on both the management plane and the data plane. The--attach-kvoperation will choose the appropriate access model to use.
--attach-kv
Note
Theaz aks approuting update --attach-kvcommand uses the permissions of the user running the command to create the Azure Key Vault role assignment. This role is assigned to the add-on's managed identity. For more information on AKS managed identities, seeSummary of managed identities.
az aks approuting update --attach-kv
Retrieve the Azure Key Vault resource ID.
KEYVAULTID=$(az keyvault show --name <KeyVaultName> --query "id" --output tsv)
KEYVAULTID=$(az keyvault show --name <KeyVaultName> --query "id" --output tsv)
Then update the app routing add-on to enable the Azure Key Vault secret store CSI driver and apply the role assignment.
az aks approuting update --resource-group <ResourceGroupName> --name <ClusterName> --enable-kv --attach-kv ${KEYVAULTID}
az aks approuting update --resource-group <ResourceGroupName> --name <ClusterName> --enable-kv --attach-kv ${KEYVAULTID}
Enable Azure DNS integration
The app routing add-on can be configured to automatically create records on one or more Azure global and private DNS zones for hosts defined on Ingress resources. To enable support for DNS zones, review the following prerequisites:
All global Azure DNS zones need to be in the same resource group, which could be different from the cluster's resource group.
All private Azure DNS zones need to be in the same resource group, which could be different from the cluster's resource group.
The resource group doesn't need to be in the same subscription as the cluster.
If you don't have an Azure DNS zone, you cancreate one.
Create a public Azure DNS zone
Note
If you already have an Azure DNS Zone, you can skip this step.
Create an Azure DNS zone using theaz network dns zone createcommand.az network dns zone create --resource-group <ResourceGroupName> --name <ZoneName>
Create an Azure DNS zone using theaz network dns zone createcommand.
az network dns zone create
az network dns zone create --resource-group <ResourceGroupName> --name <ZoneName>
az network dns zone create --resource-group <ResourceGroupName> --name <ZoneName>
Attach Azure DNS zone to the application routing add-on
Note
Theaz aks approuting zone addcommand uses the permissions of the user running the command to create the Azure DNS Zone role assignment. This role is assigned to the add-on's managed identity. For more   information on AKS managed identities, seeSummary of managed identities.
az aks approuting zone add
Retrieve the resource ID for the DNS zone using theaz network dns zone showcommand and set the output to a variable namedZONEID.ZONEID=$(az network dns zone show --resource-group <ResourceGroupName> --name <ZoneName> --query "id" --output tsv)
Retrieve the resource ID for the DNS zone using theaz network dns zone showcommand and set the output to a variable namedZONEID.
az network dns zone show
ZONEID=$(az network dns zone show --resource-group <ResourceGroupName> --name <ZoneName> --query "id" --output tsv)
ZONEID=$(az network dns zone show --resource-group <ResourceGroupName> --name <ZoneName> --query "id" --output tsv)
Update the add-on to enable the integration with Azure DNS using theaz aks approuting zonecommand. You can pass a comma-separated list of DNS zone resource IDs.az aks approuting zone add --resource-group <ResourceGroupName> --name <ClusterName> --ids=${ZONEID} --attach-zones
Update the add-on to enable the integration with Azure DNS using theaz aks approuting zonecommand. You can pass a comma-separated list of DNS zone resource IDs.
az aks approuting zone
az aks approuting zone add --resource-group <ResourceGroupName> --name <ClusterName> --ids=${ZONEID} --attach-zones
az aks approuting zone add --resource-group <ResourceGroupName> --name <ClusterName> --ids=${ZONEID} --attach-zones
Create the Ingress that uses a host name and a certificate from Azure Key Vault
The application routing add-on creates an Ingress class on the cluster namedwebapprouting.kubernetes.azure.com. When you create an Ingress object with this class, it activates the add-on.
Get the certificate URI to use in the Ingress from Azure Key Vault using theaz keyvault certificate showcommand.az keyvault certificate show --vault-name <KeyVaultName> --name <KeyVaultCertificateName> --query "id" --output tsvThe following example output shows the certificate URI returned from the command:https://KeyVaultName.vault.azure.net/certificates/KeyVaultCertificateName/ea62e42260f04f17a9309d6b87aceb44
Get the certificate URI to use in the Ingress from Azure Key Vault using theaz keyvault certificate showcommand.
az keyvault certificate show
az keyvault certificate show --vault-name <KeyVaultName> --name <KeyVaultCertificateName> --query "id" --output tsv
az keyvault certificate show --vault-name <KeyVaultName> --name <KeyVaultCertificateName> --query "id" --output tsv
The following example output shows the certificate URI returned from the command:
https://KeyVaultName.vault.azure.net/certificates/KeyVaultCertificateName/ea62e42260f04f17a9309d6b87aceb44
https://KeyVaultName.vault.azure.net/certificates/KeyVaultCertificateName/ea62e42260f04f17a9309d6b87aceb44
Copy the following YAML manifest into a new file namedingress.yamland save the file to your local computer.Update<Hostname>with the name of your DNS host and<KeyVaultCertificateUri>with the URI returned from the command to query Azure Key Vault in step 1 above. The string value for*<KeyVaultCertificateUri>*should only includehttps://yourkeyvault.vault.azure.net/certificates/certname. TheCertificate Versionat the end of the URI string should be omitted in order to get the current version.ThesecretNamekey in thetlssection defines the name of the secret that contains the certificate for this Ingress resource. This certificate is presented in the browser when a client browses to the URL specified in the<Hostname>key. Make sure that the value ofsecretNameis equal tokeyvault-followed by the value of the Ingress resource name (frommetadata.name). In the example YAML,secretNameneeds to be equal tokeyvault-<your Ingress name>.apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    kubernetes.azure.com/tls-cert-keyvault-uri: <KeyVaultCertificateUri>
  name: aks-helloworld
  namespace: hello-web-app-routing
spec:
  ingressClassName: webapprouting.kubernetes.azure.com
  rules:
  - host: <Hostname>
    http:
      paths:
      - backend:
          service:
            name: aks-helloworld
            port:
              number: 80
        path: /
        pathType: Prefix
  tls:
  - hosts:
    - <Hostname>
    secretName: keyvault-<your ingress name>
Copy the following YAML manifest into a new file namedingress.yamland save the file to your local computer.
Update<Hostname>with the name of your DNS host and<KeyVaultCertificateUri>with the URI returned from the command to query Azure Key Vault in step 1 above. The string value for*<KeyVaultCertificateUri>*should only includehttps://yourkeyvault.vault.azure.net/certificates/certname. TheCertificate Versionat the end of the URI string should be omitted in order to get the current version.
<Hostname>
<KeyVaultCertificateUri>
*<KeyVaultCertificateUri>*
https://yourkeyvault.vault.azure.net/certificates/certname
ThesecretNamekey in thetlssection defines the name of the secret that contains the certificate for this Ingress resource. This certificate is presented in the browser when a client browses to the URL specified in the<Hostname>key. Make sure that the value ofsecretNameis equal tokeyvault-followed by the value of the Ingress resource name (frommetadata.name). In the example YAML,secretNameneeds to be equal tokeyvault-<your Ingress name>.
secretName
tls
<Hostname>
secretName
keyvault-
metadata.name
secretName
keyvault-<your Ingress name>
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    kubernetes.azure.com/tls-cert-keyvault-uri: <KeyVaultCertificateUri>
  name: aks-helloworld
  namespace: hello-web-app-routing
spec:
  ingressClassName: webapprouting.kubernetes.azure.com
  rules:
  - host: <Hostname>
    http:
      paths:
      - backend:
          service:
            name: aks-helloworld
            port:
              number: 80
        path: /
        pathType: Prefix
  tls:
  - hosts:
    - <Hostname>
    secretName: keyvault-<your ingress name>
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    kubernetes.azure.com/tls-cert-keyvault-uri: <KeyVaultCertificateUri>
  name: aks-helloworld
  namespace: hello-web-app-routing
spec:
  ingressClassName: webapprouting.kubernetes.azure.com
  rules:
  - host: <Hostname>
    http:
      paths:
      - backend:
          service:
            name: aks-helloworld
            port:
              number: 80
        path: /
        pathType: Prefix
  tls:
  - hosts:
    - <Hostname>
    secretName: keyvault-<your ingress name>
Create the cluster resources using thekubectl applycommand.kubectl apply -f ingress.yaml -n hello-web-app-routingThe following example output shows the created resource:Ingress.networking.k8s.io/aks-helloworld created
Create the cluster resources using thekubectl applycommand.
kubectl apply
kubectl apply -f ingress.yaml -n hello-web-app-routing
kubectl apply -f ingress.yaml -n hello-web-app-routing
The following example output shows the created resource:
Ingress.networking.k8s.io/aks-helloworld created
Ingress.networking.k8s.io/aks-helloworld created
Verify the managed Ingress was created
You can verify the managed Ingress was created using thekubectl get ingresscommand.
kubectl get ingress
kubectl get ingress -n hello-web-app-routing
kubectl get ingress -n hello-web-app-routing
The following example output shows the created managed Ingress:
NAME             CLASS                                HOSTS               ADDRESS       PORTS     AGE
aks-helloworld   webapprouting.kubernetes.azure.com   myapp.contoso.com   20.51.92.19   80, 443   4m
NAME             CLASS                                HOSTS               ADDRESS       PORTS     AGE
aks-helloworld   webapprouting.kubernetes.azure.com   myapp.contoso.com   20.51.92.19   80, 443   4m
Next steps
Learn about monitoring the Ingress-nginx controller metrics included with the application routing add-on withwith Prometheus in Grafanaas part of analyzing the performance and usage of your application.
Azure Kubernetes Service

Additional resources