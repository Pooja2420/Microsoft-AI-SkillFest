Note
Access to this page requires authorization. You can trysigning inorchanging directories.
Access to this page requires authorization. You can trychanging directories.
Sign and verify a container image with Notation in Azure Pipeline
Article
2024-04-29
2 contributors
In this article
The Notation task in Azure DevOps is a built-in task to sign and verify container images and other Open Container Initiative (OCI) artifacts within an Azure Pipeline. The Notation task utilizes the Notation CLI to execute these operations, ensuring that the artifacts are signed by a trusted entity and have not been tampered since their creation.
The article walks you through creating an Azure pipeline that builds a container image, pushes it to ACR, and adds signatures using Notation and the Azure Key Vault plugin providing a layer of security and integrity for the artifacts. The goal of the pipeline is to:
Build a container image and push it to Azure Container Registry (ACR).
Sign the image withNotationand Notation Azure Key Vault plugin. The signature is then automatically pushed to ACR.
Prerequisites
Create a Key Vault in Azure Key Vault and generate a self-signed signing key and certificate. You can use thisdocumentfor creating a self-signed key and certificate for testing purposes. If you have a CA-issued certificate, refer to thisdocumentfor details.
Create a registry in Azure Container Registry (ACR).
Ensure you have an Azure DevOps repository or GitHub repository.
Create Service Connection
Create a service connection in Azure Pipelines, which allows your pipeline to access external services like Azure Container Registry (ACR), you can follow these steps:
Sign an image in Azure Container Registry (ACR) using ACR credentials.
Sign an image in Azure Container Registry (ACR) using ACR credentials.
Use theDocker taskin Azure Pipelines to log in to the ACR. The Docker task is a built-in task in Azure Pipelines that allows you to build, push, and pull Docker images, among other things.
Use theDocker taskin Azure Pipelines to log in to the ACR. The Docker task is a built-in task in Azure Pipelines that allows you to build, push, and pull Docker images, among other things.
Establish aDocker Registry service connectionin Azure Pipeline for granting Notation tasks access to your ACR registry, as follows:Sign in to your organization (https://dev.azure.com/{yourorganization}) and select your project.Select theSettingsbutton in the bottom-left corner.Go toPipelines, and then selectService connection.ChooseNew service connectionand selectDocker Registry.Next chooseAzure Container Registry.ChooseService Principlein theAuthentication Typeand enter the Service Principal details including your Azure Subscription and ACR registry.Enter a user-friendlyConnection nameto use when referring to this service connection.
Establish aDocker Registry service connectionin Azure Pipeline for granting Notation tasks access to your ACR registry, as follows:
Sign in to your organization (https://dev.azure.com/{yourorganization}) and select your project.
https://dev.azure.com/{yourorganization}
Select theSettingsbutton in the bottom-left corner.
Go toPipelines, and then selectService connection.
ChooseNew service connectionand selectDocker Registry.
Next chooseAzure Container Registry.
ChooseService Principlein theAuthentication Typeand enter the Service Principal details including your Azure Subscription and ACR registry.
Enter a user-friendlyConnection nameto use when referring to this service connection.
Create anAzure Resource Managerservice connection in Azure Pipelines to authorize access to your Azure Key Vault:ChooseService principal (automatic).Next, chooseSubscriptionand find your Azure subscription from the drop-down list.Choose an available Resource group from the drop-down list.Enter a user-friendlyService connection nameto use when referring to this service connection.Save it to finish the creation.
Create anAzure Resource Managerservice connection in Azure Pipelines to authorize access to your Azure Key Vault:
ChooseService principal (automatic).
Next, chooseSubscriptionand find your Azure subscription from the drop-down list.
Choose an available Resource group from the drop-down list.
Enter a user-friendlyService connection nameto use when referring to this service connection.
Save it to finish the creation.
Grant the access policy to your service principal by following these steps:Open the created Azure Resource Manager service connection and clickManage Service Principalto enter the Azure service principal portal.Copy theApplication (client) ID. It will be used to grant the permission for the service principal.Open the Azure Key Vault portal and enterAccess Policiespage.Create a new access policy withkey sign,secret getandcertificate getpermission.Grant this new access policy to a service principle using theApplication (client) IDpaste from the previous step.Save it to finish the creation.
Grant the access policy to your service principal by following these steps:
Open the created Azure Resource Manager service connection and clickManage Service Principalto enter the Azure service principal portal.
Copy theApplication (client) ID. It will be used to grant the permission for the service principal.
Application (client) ID
Open the Azure Key Vault portal and enterAccess Policiespage.
Create a new access policy withkey sign,secret getandcertificate getpermission.
key sign
secret get
certificate get
Grant this new access policy to a service principle using theApplication (client) IDpaste from the previous step.
Application (client) ID
Save it to finish the creation.
Learn more about service connectionhere.
Create a pipeline and use Notation task
Create an Azure pipeline for your git repository by following these steps:
Navigate to the project in your AOD organization.
Go toPipelinesfrom the left menu and then selectNew pipeline.
Choose your git repository. We use the Azure DevOps repository for demonstration convenience.
Configure the pipeline with aStarter Pipelineif you are new to Azure DevOps. Review and create the pipeline by clicking onSave and run.
Note
The example assumes that the default branch ismain. If it's not, please follow theguideto update the default branch.
main
There are two ways to add Notation tasks by editing your Azure pipeline:
Use the Azure DevOps (ADO) panel: The ADO panel provides a user interface where you can add tasks to your pipeline. You can search for Notation tasks and add them to your pipeline using this interface.
Copy from a sample Azure Pipeline file: If you have a sample Azure Pipeline file that already includes Notation tasks, you can copy these tasks from the sample file and paste them into your pipeline file.
Option 1: Use the Azure DevOps (ADO) editing panel
Search theDockertask from the pipeline editing panel on the right side. Use itslogincommand with the Docker Registry service connection to authenticate with ACR.
Docker
login
Choose the Docker Registry service connection created in the previous step from theContainer registrydrop-down list.
Chooseloginfrom theCommanddrop-down list.
login
ClickAddto add the Docker task withlogincommand to the pipeline file left.
login
Similarly, search theDockertask from the pipeline editing panel again. Use itsbuildAndPushcommand to automatically build the source code to an image and push it to the target ACR repository. It will generate an image digest that will be used for signing in the next step.
Docker
buildAndPush
Input the repository name toContainer repository.
ChoosebuildAndPushfrom the theCommanddrop-down list.
Specify the file path of Dockerfile. For example, use./Dockerfileif your Dockerfile is stored in the root folder.
./Dockerfile
ClickAddto add the Docker task withbuildAndPushcommand to the pipeline file left.
buildAndPush
Search theNotationtask from the pipeline editing panel on the right side.
Notation
ChooseInstallfrom the drop-down listcommand to run.
ClickAddto add thenotation installtask to the pipeline.
notation install
Similarly, search theNotationtask from the pipeline editing panel again and chooseSign.
Notation
You can skipArtifact referencessince we sign an image using its latest digest that is built and pushed to the registry by aDocker task. Instead, you can manually specify a digest using<registry_host>/<repository>@<digest>.
<registry_host>/<repository>@<digest>
Fill out the plugin configuration in the form. We will use the default AKV plugin and the service connection created in the previous step. Copy your Key ID from your AKV into theKey ID.
Check theSelf-signed Certificatebox since we use a self-signed certificate for demonstration convenience. Instead, you can input your certificate file path inCertificate Bundle File Pathif you want to use a CA issued certificate.
ClickAddto add thenotation signto the pipeline file left.
notation sign
Option 2: Edit a sample Azure Pipeline file
If you are familiar with Azure Pipelines and Notation, it's efficient to start with a template pipeline file.
Copy the pipeline template provided in the document to your own pipeline file. This template is designed to use Notation tasks, which are used to sign and verify container images.
After copying the template, fill out the required values according to the references and comments provided below.
trigger:
 - main
pool: 
  vmImage: 'ubuntu-latest'

steps:
# log in to registry
- task: Docker@2
  inputs:
    containerRegistry: <your_docker_registry_service_connection>
    command: 'login'
# build and push artifact to registry
- task: Docker@2
  inputs:
    repository: <your_repository_name>
    command: 'buildAndPush'
    Dockerfile: './Dockerfile'
# install notation
- task: Notation@0
  inputs:
    command: 'install'
    version: '1.1.0'
# automatically detect the artifact pushed by Docker task and sign the artifact.
- task: Notation@0
  inputs:
    command: 'sign'
    plugin: 'azureKeyVault'
    akvPluginVersion: <azure_key_vault_plugin_version>
    azurekvServiceConection: <your_akv_service_connection>
    keyid: <your_key_id>
    selfSigned: true
trigger:
 - main
pool: 
  vmImage: 'ubuntu-latest'

steps:
# log in to registry
- task: Docker@2
  inputs:
    containerRegistry: <your_docker_registry_service_connection>
    command: 'login'
# build and push artifact to registry
- task: Docker@2
  inputs:
    repository: <your_repository_name>
    command: 'buildAndPush'
    Dockerfile: './Dockerfile'
# install notation
- task: Notation@0
  inputs:
    command: 'install'
    version: '1.1.0'
# automatically detect the artifact pushed by Docker task and sign the artifact.
- task: Notation@0
  inputs:
    command: 'sign'
    plugin: 'azureKeyVault'
    akvPluginVersion: <azure_key_vault_plugin_version>
    azurekvServiceConection: <your_akv_service_connection>
    keyid: <your_key_id>
    selfSigned: true
Note
Apart from using the Docker task, you can sign a specified image digest by manually specifying an artifact reference inartifactRefsas follows.
artifactRefs
# sign the artifact
- task: Notation@0
  inputs:
    artifactRefs: '<registry_host>/<repository>@<digest>'
    command: 'sign'
    plugin: 'azureKeyVault'
    akvPluginVersion: <azure_key_vault_plugin_version>
    azurekvServiceConection: <akv_service_connection>
    keyid: <key_id>
    selfSigned: true
# sign the artifact
- task: Notation@0
  inputs:
    artifactRefs: '<registry_host>/<repository>@<digest>'
    command: 'sign'
    plugin: 'azureKeyVault'
    akvPluginVersion: <azure_key_vault_plugin_version>
    azurekvServiceConection: <akv_service_connection>
    keyid: <key_id>
    selfSigned: true
Trigger the pipeline
Follow the steps to run a pipeline in Azure DevOps and verify its execution.
After filling out the inputs in the pipeline, save and run it to trigger the pipeline.
Go to theJobpage of the running pipeline. Here, you can see the execution of each step. This pipeline will build and sign the latest build or the specified digest, and then push the signed image along with its associated signature to the registry.
Upon successful execution, you can see the image pushed to your Azure Container Registry (ACR) with a CBOR Object Signing and Encryption (COSE) format signature attached.
Verify the signed image
Similarly, to verify the signed image, you can use the editing panel or edit the pipeline file to add the notationverifytask to your pipeline. The pipeline will verify the signed image with the trust policy and trust store you provided.
verify
Prepare Notation trust policy and trust store
In general, the verifier is different from the signer. For demonstration purposes, we use the same pipeline and ADO repository in this sample. Follow the steps below to create Notationtrust policy,trust store, and add theverifytask in the pipeline:
verify
In the current ADO repository, create a sample folder.pipelineto store the Notation trust policy.pipeline/trustpolicy/. Create a sample trust policy JSON filetrustpolicy.json. Fill out the trust policy template with your own values and save it in the folder.
.pipeline
.pipeline/trustpolicy/
trustpolicy.json
Note
Note that Notation Trust Store supports currently supports three kinds of identities, including Certificate Authority (CA), SigningAuthority, and Time Stamping Authority (TSA) root certificates. For demonstration purposes, we use Certificate Authority (CA)x509/cain the trust policy and trust store below. Seetrust storefor details.
x509/ca
{
    "version": "1.0",
    "trustPolicies": [
        {
            "name": "<yourPolicyName>",
            "registryScopes": [ "<yourRegistry>.azurecr.io/<yourArtifact>" ],
            "signatureVerification": {
                "level" : "strict" 
            },
            "trustStores": [ "ca:<yourTrustStore>"],
            "trustedIdentities": [
                "*"
            ]
        }
    ]
}
{
    "version": "1.0",
    "trustPolicies": [
        {
            "name": "<yourPolicyName>",
            "registryScopes": [ "<yourRegistry>.azurecr.io/<yourArtifact>" ],
            "signatureVerification": {
                "level" : "strict" 
            },
            "trustStores": [ "ca:<yourTrustStore>"],
            "trustedIdentities": [
                "*"
            ]
        }
    ]
}
In the current ADO repository, create a new folder for Notation trust store/.pipeline/truststore/x509/ca/$<yourTrustStore>/to store the certificate. If you followed the signing steps in this document to sign your image, use the command below to download your self-signed certificate from Azure Key Vault (AKV):
/.pipeline/truststore/x509/ca/$<yourTrustStore>/
KEY_NAME=<key_name_you_picked_when_creating_the_key>
AKV_NAME=<akv_name_where_certificate_is_stored>
CERT_ID=$(az keyvault certificate show -n $KEY_NAME --vault-name $AKV_NAME --query 'id' -o tsv)
CERT_PATH=./${KEY_NAME}.pem
az keyvault certificate download --file $CERT_PATH --id $CERT_ID --encoding PEM
KEY_NAME=<key_name_you_picked_when_creating_the_key>
AKV_NAME=<akv_name_where_certificate_is_stored>
CERT_ID=$(az keyvault certificate show -n $KEY_NAME --vault-name $AKV_NAME --query 'id' -o tsv)
CERT_PATH=./${KEY_NAME}.pem
az keyvault certificate download --file $CERT_PATH --id $CERT_ID --encoding PEM
Upload the certificate to the trust store folder/.pipeline/truststore/x509/ca/$<yourTrustStore>/that we created in the last step.
/.pipeline/truststore/x509/ca/$<yourTrustStore>/
Add notation verify task
Search the Notation task from the pipeline editing panel again and chooseVerify.
Fill out theArtifact referenceswith the digest of the signed image.
Enter the value.pipeline/trustpolicy/trustpolicy.jsonin theTrust Policy File Path.
.pipeline/trustpolicy/trustpolicy.json
Enter the value.pipeline/truststore/in theTrust Store Folder Path.
.pipeline/truststore/
Click Add to add the notation verify to the pipeline file left.
Yournotation verifywill be saved as follows.
notation verify
# sign the artifact
- task: Notation@0
  inputs:
    command: 'verify'
    artifactRefs: '<registry_host>/<repository>@<digest>'
    trustPolicy: .pipeline/trustpolicy.json
    trustStore: .pipeline/truststore/
# sign the artifact
- task: Notation@0
  inputs:
    command: 'verify'
    artifactRefs: '<registry_host>/<repository>@<digest>'
    trustPolicy: .pipeline/trustpolicy.json
    trustStore: .pipeline/truststore/
Trigger the pipeline (Updated)
You can trigger the pipeline again to verify the signed image. Upon successful execution, you can see the logs from theJobpage of the running pipeline. The pipeline will verify the signed image with the trust policy and trust store you provided.
Conclusion
This article shows you how to sign and verify a container image with Notation in Azure Pipeline. You can use the Azure DevOps panel or edit the pipeline file to add Notation tasks to your pipeline. The pipeline will build, push, sign, and verify the image with the trust policy and trust store you provided. This process ensures that the artifacts are signed by a trusted entity and have not been tampered with since their creation.
Additional resources